ã\INMR01


 

«



IZE  
 ALPHACP 
25   ASH     
 
LIST 
 BUTLAST 
1525   
 
RP   
   CLOSUREP

 
URDATE 
   

 
BCDIC  


   


±
V  
^

©

h^

∞ß
?ˇ
h^


i
?
h^

Œ‚ê‡SEB1525   LISTP   
i
?Œ
h^
©
Œ
i
?Œ


–
^
KVECTOR
◊
–
^
EB1525   NCONC2  

? 
   
EB1525   NULL    


? 
25   PBIND   
SEB1525   PEEK    
¸
˙PLUSP   
1525   PREFIX  
$SEB1525   RANDOM  
ã
 RESTAˇ
1525   REVERSE 
SEB1525   ROT     
ACA  
   RUNTIME 
1525   SAPPEND 
SEB1525   
CRSIZE 
   SETASCII
1525   SETBRACK
BUG
ETPLIST
   SFLOATP 
EB1525   
RSE
TRING  
 ˇ
∑±
   
ABS    
25   
ß
D  
 USERID  

∏
TORP 
 

 
IZE  
h^

 

h…¸
∑
 
i
?§



^


?&		∫	SEB1525   ZILBIG  
^


?Ç
^

Ä
Öﬁ!?SEB1525   ZILFINT 
^

€
?à	{	g	øSEB1525   ZILINTLN
h^
`SEB1525   ZILLOAD 
‹
i
?ânlmSEB1525   ZILOPEN 
SBND 
ÇSEB1525   ZILPRIN 
â
i
?ä
1525   ZILSPAD 
ˇ
ä
D
1525   ZILTERP 
ÆuSEB1525   ZILTPUT 
ä
   ZILVSET 
EB1525   ZILVSYM 
°
ILXDEF 
25   ZILXLFY 
EB1525   ZISEXEC 
ﬁ
 ZMSALTP 
25   ZMSDELQ 
EB1525   ZMSEQ   
MEMQ 
 ZMSTRUCT
25   ZPUTFPI 
EB1525   



      TITLE 'ABS - BUILT-IN ZIL 1.3 SUBROUTINE'                      000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
3*                                                                     *
3* ABS TAKES ONE ARGUMENT - A FIXNUM, FLONUM OR BIGNUM                 *
3*                          ˇ
003*********************************************************************
003ABS      #ZBEG MINARGS=1,MAXARGS=1,NAME='ABS'
003         #ZPDS 16                       ˇ
40003         #ZSAV ,
50003         SPACE
60003         L     #15,0(,#11)         GET THE ARG       ˇ
0070003         CLI   0(#15),##FIXNUM
0080003         BE    ABSFIX
0090003         CLI   0(#15),##SFLOAT
 00100003         BE    ABSFLO
 00110003         CLI   0(#15),##BIGNUM
 00120003         BE    ABSBIG
 0013000ˇ
   00140003         BE    ABSDFLO
   00150003         B     ERROR
   00160003         SPAˇ
     00170003ABSFIX   DS    0H                  ABS OF A FIXNUM
     00180003         SPACE 1
     00190003         ICM   #2,15,##CDˇ
       00200003         BNM   RETURN              IF NOT NEGATIVE, RETUR
       00210003         LPR   #2,#2               MAKE IT POSITIVE
       00220003         BO    FIXOVFLO            IF ˇ
-2**31   00230003         LA    #0,16(,#11)         PASS CURRENT STACK L
TO CONS  00240003         #MKAT FIXED               MAKE A FIXNUM
         00250003         SPACE 1                                   ˇ
           00260003RETURN   DS    0H
           00270003         SPACE 1
           00280003         #ZRET ,                   RETURN WITH VALUE
   +
 ˇ
               00310003         SPACE 1
               00320003         TM    ##CDR(#15),X'80'    IF ALREADY NON
               0ˇ
E ATOM           00340003         LE    #F2,##CDR(,#15)     GET FLONUM V
                 00350003         LPER  #F2,#F2             MAKE IT POSI
                 00360003      ˇ
                   00370003         L     #2,ZLCWORK
                   00380003         LA    #0,16(,#11)         PASS CURRE
 LOCATION TO CONS  00390003         #MKAT FLOAˇ
                     00400003         B     RETURN              AND RETU
IT                   00410003         SPACE 1
                     00420003ABSBIG   DS    0H               ˇ
M                      00430003         SPACE 1
                       00440003         TM    ##VECDAT(#15),X'80' IF ALR
NEGATIVE               00450003         BZ    RETURN              THEN R
WITH SAME ATOM           00460003         XR    #2,#2               CLEA
 REGISTER                00470003         ICM   #2,7,1(#15)         GET
ENGTH                    00480003         LA    #2,4(,#2)           PLUS
OF HEADER  ˇ
LENGTH                     00500003         LA    #0,16(,#11)         PA
NT STACK LOCATION TO CONS  00510003         L     #15,ZLCBIG          GE
S OF BIGNUM MAKER         ˇ
BIG                          00530003         LR    #4,#15
RESS OF NEW BIGNUM           00540003         LR    #0,#4
ION ADDRESS                  00550003    ˇ
 ADDRESS                       00560003         LR    #1,#3
ATION LENGTH                   00570003         LR    #15,#3
 LENGTH                        00580003         MVCL  #0ˇ
 OLD BIGNUM TO NEW BIGNUM        00590003         ST    #0,ZLCVSNXT
TE V/S-SPACE POINTER             00600003         LR    #15,#4
ADDRESS OF BIGNUM AGAIN          00610003         NI    ##VECDAT(#15),Xˇ
RN OFF SIGN BIT TO MAKE IT PPLUS   00620003         B     RETURN
                                   00630003         SPACE 1
                                   00640003FIXOVFLO DS    0H
      ˇ
RETURN BIGNUM +2**31                 00660003         B     RETURN
                                     00670003         SPACE 1
                                      00680003ˇÁ
                ABS OF A DOUBLE-FLOAT                00690003         SP
                                                     00700003         TM
5),X'80'        IF ALREADY NONNEGATIVE               00710003 ˇ
TURN              THEN RETURN WITH SAME ATOM           00720003
0,8(,#15)         GET FLONUM VALUE                     00730003
0,#F0             MAKE IT POSITIVE                     00740003
#0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS  00750003
#15,ZLCMDF          GET ADDRESS OF ZILMDF                00760003
#14,#15             CALL ZILMDF TO CONS UP DOUBLE FLOAT  00770003
RETURN      ˇ
E 1                                                        00790003P2TO3
  0A                  ALIGN BIGNUM TO FULLWORD             00800003
  YL1(##BIGNUM),AL3(8),F'0,ˇ
    0H                                                       00820003
RR  2,'Argument to ABS not numeric - ',0(#11)                00830003
ACE 1                                     I                    00840003
LTORG                                                          00850003
END                                                            00860003

         00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002         SPACE
             00017002ACSIZE   #ZBEG MINARGS=0,MAXARGS=0,NAME='ACSIZE'
             00018002         #ZPDS 12          ˇ
               00019002         #ZSAV ARGS=0              SAVE REGISTERS
               00020002         SPACE 1
               00030002         L     #2,ZLCGCACD         GET Nˇ
 CONS CELLS      00040002         SLA   #2,3                CONVERT TO N
 BYTES           00050002         #MKAT FIXED               MAKE A FIXNU
 IT              00060002         #ZRET ,                   RETURN WITH
                   00070002         SPACE 1
                   00080002         LTORG
                   00090002         SPACE 1
             %       00100002         END
                     00110002
ILT-IN ZIL 1.3 SUBROUTINE'                     00010000*****************
********************************************** 00011003*
                                             * 00012003*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013003*
ll rights reserved.                            * 00014003*
                                               * 00015003**************ˇ
************************************************** 00016003*
                                                 * 00017003* ADD1 TAKES
MENT - A NUMERIC ATOM                            * 00018003*
      ˇ
**************************************************** 00020003         SP
                                                     00030003ADD1     #Z
RGS=1,MAXARGS=1,NAME=ˇ
                                                       00050003
                  DEFINE STACK SIZE                    00060003
                  SAVE REGISTERS    ˇ
                                                         00080003
#1,0(,#11)          LOAD FIRST (AND ONLY) ARGUMENT       00090003
##TYPE(#1),##FIXNUM IS IT A FIXNUM?                ˇ
  NOTFIX              IF NOT, GO SOMEWHERE ELSE            00110003
  #2,##CDR(,#1)       Get value of fixnum                  00120003* Not
ollowing test assumes that the lowest small fixnum is 0.   0013000ˇ
    #2,ZLCSFTHI         If within small fixnum table range   00140003*
                        (and not equal to the largest small) 00150003
    SMALLFIX            then go to increment small fixnum    00160003
 ˇ
BO    MAKTWO31            OVERFLOW...MUST BE 2**31             00180003
LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS  00190003
#MKAT FIXED     ˇ
  B     RETURN                                                   0021000
                                                                 0022000
X DS    0H                     ˇ
                                                                   00240
****************************************************************** 00250
                                              ˇ
ixnum between lowest and highest small fixnum from table           * 002
but not equal to the highest).  We load the address of the         * 002
ext higher fixnum from the table.                            +
                                                           ˇ
3***********************************************************************
3*
3         SLA   #2,3                Multiply fixval by 8 for an index
003         LA    #15,#SFT+8(#2)      Get address of (fixval+1)th fixnum
003******** B     RETURN               from table and return with it
003         SPACE 1
003RETURNˇ
70003         SPACE
80003         #ZRET ,                   RESTORE REGISTERS AND RETURN
90003*                  ˇ
0400003NOTFIX   CLI   ##TYPE(#1),##BIGNUM IS IT A BIGNUM?
0410003         BNE   NOTFXBG             NOT A BIGNUM NOR A FIXNUM
0420003*-------------------------------ˇ
 00430003*     IT'S A BIGNUM - pass control to ZILADD
 00440003*--------------------------------------------------------------
 00450003         SPACE 1                             ˇ
   00460003         LA    #2,#SFT1            Get address of fixnum +1
   00470003         L     #15,@ZILADD         Get address of ZILADD
   00480003         LR    #1,#11              Restore stack pointer  ˇ
     00490003         LM    #11,#12,4(#1)       Restore regs as if retur
     00500003         L     #14,12(,#1)         Pass original return add
     00510003         ST    #2,4(,#1)           Set arg 2 to ZILADD = fi
    ˇ
DD1)   00530003         BR    #15                 Go to ZILADD to add +1
um     00540003         SPACE 1
       00550003    ˇ
INSTEAD  00560003*******************************************************
******** 00570003.        ICM   #6,15,##VECDAT(#1)  LOAD LS WORD AND TES
         00580003.        BM    BIˇ
           00590003.        AH    #6,=H'1'            ADD 1 TO LS WORD O
           00600003.        BO    BIGC1               CARRY FROM FIRST W
           00610003*-----------------------------ˇ
-----------* 00620003*     IT'S A POSITIVE BIGNUM WITH NO CARRY OUT OF F
D          * 00630003*--------------------------------------------------
-----------* 00640003.        LA    #0,16(,#11)         PASS CURˇ
 TO ZILBIG     00650003.        XR    #2,#2               CLEAR FOR 3-BY
T              00660003.        ICM   #2,7,1(#1)          GET 3-BYTE LEN
IGNUM          00670003.        L     #15,ZLCBIG
                 00680003ˇÁ
                               00690003*
                               00700003.        LA    #3,##VECDAT(,#2)
EN OF HEADER+BIGNUM            00710003.ˇ
ESS OF SOURCE                    00720003.        LR    #2,#15
ESS OF DESTINATION               00730003.        LR    #5,#3
TH TO MOVE                       00740003.        MVCL ˇ
PY BIGNUM TO DESTINATION           00750003.        ST    #6,##VECDAT(,#
ORE UPDATED LS WORD IN NEW BIGN    00760003.        ST    #2,ZLCVSNXT
DATE VSS POINTER                   00770003.        B     RETURN      ˇ
                                     00780003*--------------------------
-----------------------------------* 00790003*     IT'S A POSITIVE BIGNU
ARRY OUT OF FIRST WORD             * 00800003*--------------------------
-----ˇ
  PASS CURRENT STACK LOC TO ZILBIG     00820003.        XR    #3,#3
  CLEAR FOR 3-BYTE INSERT              00830003.        ICM   #3,7,1(#1)
  GET 3-BYTE LENGTH ˇ
    IT MIGHT BE ONE WORD LONGER          00850003.        L     #15,ZLCB
                                         00860003.        #BASR #14,#15
                                   ˇ
                                           00880003.        L     #7,0(,
      GET ARG 1 AGAIN                      00890003.        LA    #0,##V
7)    CLCL PREP - SOURCE                   0090000ˇ
        BIGNUM LENGTH                        00910003.        SH    #1,=
        SUBTRACT LENGTH OF ONE WORD          00920003.        LA    #4,#
4(,#7)  COMPARE WITH ONE WORD AHEAD          00930003.        LR ˇ
          PUT IN BOTH OTHER CLCL LENGTH        00940003.        CLCL  #4
          FIND FIRST WORD THAT WON'T CARRY     00950003.        BE    BI
          BIGNUM IS FULL - NEEDS NEW WORD      00960003*
ˇ
FFFFFC'     DROP DOWN TO NEAREST WORD BNDRY      00980003.        LR
            MVCL PREP - ARG BIGNUM               00990003.        LA
DAT         MOVˇ
              SAVE POSITION OF WORD TO BE INC      01010003.        LR
              DESTINATION - RESULT BIGNUM          01020003.        LR
                              ˇ
7               CALCULATE LENGTH FOR MOVE & 0 PAD    01040003.        MV
0               NOW WE ARE UP TO WORD TO BE INC'D    01050003.        LA
                                             +
,0(,#6)           CLCL VERIFIED THIS CAN'T ˇ
#0,0(,#4)           MVCL PUT #4 IN RIGHT PLACE           01080003.
#0,4(,#6)           PREP NEXT MVCL SOURCE                01090003.
#4,4(,#4)           BUMP UP THE DESTINATION POINTER      0ˇ
  #1,##VECDAT(#3,#7)  POINT TO END OF BIGNUM ARGUMENT      01110003.
  #1,#0               CALC LENGTH LEFT TO COPY             01120003.
  #5,#1               DESTINATION LENGTH TOO               01130003.
CL  #4,#0               COPY REST OF BIGNUM                  01140003.
    #4,ZLCVSNXT         UPDATE VSS POINTER TO END OF RESULT  01150003.
    RETURN                                                   01160003*
        ˇ
STCM  #2,7,1(#15)         STORE RESULT LEN (ONE WORD GREATER)  01180003.
XR    #1,#1        ****   THIS SHOULD ALREADY BE 0 FROM CLCL   01190003.
LA    #2,##VECDAT(,#15)ˇ
  MVCL  #2,#0               FILL LENGTH #3 WITH ZEROES           0121000
  LA    #6,1                GENERATE 1 FOR MS WORD OF RESULT     0122000
  ST    #6,0(,#2)           PUT 1 IN Mˇ
    LA    #2,4(,#2)           POINT TO END FOR NEXT BIGNUM         01240
    ST    #2,ZLCVSNXT         UPDATE VSS POINTER                   01250
    B     RETURN                                     ˇ
-------------------------------------------------------------------* 012
                   IT'S A NEGATIVE BIGNUM                          * 012
-------------------------------------------------------------------*ˇ
IGM     CLC   0(12,#1),MTWO31M1   CHECK FOR -2**31 - 1 BIGNUM          0
        BE    MAMTWO31              GENERATE MOST NEGATIVE FIXNUM      0
        SH    #6,=H'1'            SUB1 (FOR SIGN AND MAGNITUDE)        0
   ˇ
3*---------------------------------------------------------------------*
3*     IT'S A NEGATIVE BIGNUM WITH NO CARRY OUT OF FIRST WORD          *
3*----------------ˇ
003.        LA    #0,16(,#11)         PASS CURRENT STACK LOC TO ZILBIG
003.        XR    #2,#2               CLEAR FOR 3-BYTE INSERT
003.        ICM   #2,7,1(#1)     ˇ
90003.        L     #15,ZLCBIG
00003.        #BASR #14,#15
10003*                                          ˇ
1420003.        LA    #3,##VECDAT(,#2)    CALC LEN OF HEADER+BIGNUM
1430003.        L     #4,0(,#11)          ADDRESS OF SOURCE
1440003.        LR    #2,#15              ADDRESS OF DESTINATIO N
 01450003ˇÁ
               01460003.        MVCL  #2,#4               COPY BIGNUM TO
TION           01470003.        ST    #6,##VECDAT(,#15)   STORE UPDATED
IN NEW BIGN    01480003.ˇ
                 01490003.        B     RETURN
                 01500003*----------------------------------------------
---------------* 01510003*     IT'S A Nˇ
T WORD           * 01520003*--------------------------------------------
-----------------* 01530003MBIGC1   LA    #0,16(,#11)         PASS CURRE
 LOC TO ZILBIG     01540003.        XR    #2,#2       ˇ
 INSERT              01550003.        ICM   #2,7,1(#1)          GET 3-BY
H OF BIGNUM          01560003.        L     #15,ZLCBIG
                     01570003.        #BASR #14,#15                  ˇ
                       01580003*
                       01590003.        L     #3,0(,#11)          GET AR
N                      01600003.        LA    #4,##VECDAT+4(,#3)  CLCL P
INT ˇ
H                        01620003.        SH    #5,=H'8'            COMP
OM 2ND LS TO 2ND MS      01630003.        XR    #1,#1               ZERO
NGTH AND PAD BYTE  ˇ
 NONZERO WORD              01650003.        BE    MBIGCMS             CA
 MS WORD                   01660003*
                           0167000ˇ
N TO NEAREST WORD BNDRY      01680003.        L     #0,0(,#3)
ER OF ARG                    01690003.        L     #1,=X'7FFFFFFF'
 FOR LS WORD, SIGN LATER     01700003.        STMˇ
HEADER AND LS WORD             01710003.        LA    #6,##VECDAT+4(,#15
REP FOR COPYING 7FFFFFFF       01720003.        LA    #0,##VECDAT(,#15)
                               01730003.        LR    #7,#4     ˇ
                                 01740003.        SR    #7,#3
                                 01750003.        SH    #7,=H'8'
                                 01760003.        LR    #1,#7

                                   01780003.        L     #1,0(,#4)
T WORD THAT CAN CARRY OUT          01790003.        BCTR  #1,0
BTRACT ONE FROˇ
STORE DECREMENTED WORD IN RESULT     01810003.        LA    #6,4(,#6)
BUMP TO NEXT FOR COPYING REST        01820003.        LA    #0,4(,#4)
BUMP TO NEXT IN SOURCE BIGNUM+
3) POINT TO LAST WORD      ˇ
    CALCULATE # WORDS TO BE COPIED       01850003.        LR    #7,#1
    PUT LENGTH IN BOTH MVCL OPERANDS     01860003.        MVCL  #6,#0
    COPY UNCHANGED END OF BIGNUM         0ˇ
X'80' SET NEGATIVE SIGN                    01880003.        ST    #6,ZLC
      UPDATE VSS POINTER TO END OF RESULT  01890003.        B     RETURN
                                           01900003MBIGCMˇ
        LOAD MS WORD WHICH MUST CARRY OUT    01910003.        BCT   #5,M
        SUBTRACT CARRY, STILL POSITIVE?      01920003.        L     #5,=
FF'                                          01930003.        ST    #5,#
T(,#15)                                        01940003.        LA    #6
T+4(,#15)                                      01950003.        LR    #7
                                               01960003.        SH    #7
       ˇ
                                                 01980003.        LA
DAT(,#15)                                        01990003.        MVCL
                      ˇ
AT(#15),X'80' SET SIGN TO NEGATIVE                 02010003.        SH
4'                                                 02020003.        STCM
(#15)         RESULT LEN (ONE WORD SHˇ
LCVSNXT                                              02040003.        B
RN                                                   02050003*
                                                    ˇ
,=X'7FFFFFFF'                                          02070003.
,##VECDAT(,#15)                                        02080003.
,##VECDAT+4(,#15)                                      02090003.   ˇ
#7,#2                                                    02100003.
#7,=H'8'                                                 02110003.
#1,#7                                                    02120003.
#0ˇ
  #6,#0                                                    02140003.
  ##VECDAT(#15),X'80' SET SIGN TO NEGATIVE                 02150003.
  #2,7,1(#15)    ˇ
    #5,0(,#6)           STORE NEW MS WORD                    02170003.
    #6,4(,#6)           INCREMENT TO NEXT AVAILABLE WRD      02180003.
    #6,ZLCVSNXT         STORE NEˇ
B     RETURN                                                   02200003*
                                                               02210003*
----------------------------------------------- --------------* 0222000

2230003*----------------------------------------------------------------
2240003MAMTWO31 LA    #15,MTWO31          POINT TO -2*31 FIXNUM INLINE
2250003.ˇ
 02260003***************************************************************
 02270003.SKIP    ANOP  ,
 02280003*-------------ˇ
-* 02290003*              IT'S THE SMALLEST POSITIVE BIGNUM
 * 02300003*------------------------------------------------------------
-* 02310003MAKTWO31 LA    #15,TWO31   ˇ
     02320003         B     RETURN
     02330003*----------------------------------------------------------
---* 02340003*  IT'S NOT A FIXNUM NOR A BIGNUM, MUST ˇ
     * 02350003*--------------------------------------------------------
-----* 02360003NOTFXBG  CLI   ##TYPE(#1),##SFLOAT IF NOT SINGLE-FLOAT
       02370003         BNE   NOTSFLO             THEN TRY SOMETHINGˇ
         02380003         LE    #F0,##CDR(,#1)      LOAD FLOAT VALUE
         02390003         AE    #F0,=E'1'           ADD 1
         02400003         STE   #F0,ZLCWORK         PUT RESULT IN ATOM-M
GISˇ
           02420003         LA    #0,16(,#11)         PASS CURRENT STACK
N TO CONS  02430003         #MKAT FLOAT               MAKE A FLONUM
           0244000ˇ
             02450003         SPACE
             02460003NOTSFLO  CLI   ##TYPE(#1),##DFLOAT MUST BE DOUBLE-F
             02470003         BNEˇ
               02480003         LD    #F0,8(,#1)          LOAD FLOAT VAL
               02490003         AD    #F0,=D'1'           ADD 1
               02500003         LA    #0,16(,#11ˇ
OCATION TO CONS  02510003         L     #15,ZLCMDF          GET ADDRESS
F                02520003         #BASR #14,#15             CALL ZILMDF
DOUBLE FLOAT     02530003         B     RETURN              Retˇ
 float             02540003         SPACE 1
                   02550003ERROR1   DS    0H                  NOT A NUME
                   02560003         #ERR  2,'Argument to ADD1 not a numb
,0(#11)              02570003         SPACE 1
                     02580003ZILSUBRS DS    0A
                     02590003@ZILADD  DC    V(ZILADD)           Address
utine        +
           ˇ
                         02620003         SPACE
                         02630003         DS    0A                  FORC
ENT TO FULLWORD BNDRY    0ˇ
**31 SMALLEST POS BIGNUM   02650003         SPACE 1
                           02660003         AGO   .SKIP2              DO
 THESE WHEN SKIPPING       02670003******ˇ
**************************** 02680003         DS    0A
IGNMENT TO FULLWORD BNDRY    02690003MTWO31M1 DC    YL1(##BIGNUM),AL3(8)
001',F'1'  -2**31 - 1        02700003         SPACE 1   ˇ
AST-NEGATIVE BIGNUM            02710003         DS    0A
ALIGNMENT TO FULLWORD BNDRY    02720003MTWO31   DC    YL1(##FIXNUM),AL3(
47483648'  MOST NEG FIXNUM     02730003         SPACE 1                ˇ
                                 02740003*******************************
******************************** 02750003.SKIP2   ANOP  ,
                                 02760003         LTORG
      „                            02770003         END
                                   02780003{
TITLE 'ALPHACP - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
AS "ALPHA-CHAR-P".                                               * 00018
                      ˇ
******************************************************************** 000
      SPACE                                                          000
HACP  #ZBEG MINARGS=1,MAXARGS=1,NAME=ˇ
        SPACE                                                          0
        L     #3,0(,#1)           GET ATOM (ARG 1 TO ALPHACP)          0
        CLI   ##TYPE(#3),##FIXNUM MUST BE A FIXNUM  ˇ
2         BNE   ERROR1              OR ELSE
2*
2* GET THE NUMERIC VALUE OF THE FIXNUM.                            ˇ
002*
002         L     #1,##CDR(,#3)       GET FIXNUM CONTENTS
002         CL    #1,=X'000000FF'     MUST BE 1-BYTE CHARACTER FIXNUM
00ˇ
40002         XR    #2,#2
50002         IC    #2,TABLE(#1)        IF IN RANGE, LOAD CHAR FROM TABL
60002         LTRˇ
0170002         BZ    FALSE               THEN...
0180002TRUE     LR    #15,#8               RETURN T
0190002         BR    #14       ˇ
 00200002FALSE    LR    #15,#10              RETURN NIL
 00210002         BR    #14
 00220002         SPACE 1                      ˇ
   00230002TABLE    DC    256YL1(0)
   00240002         ORG   TABLE+C'A'-X'40'
   00250002         DC    X'010101010101010101'               ˇ
     00260002         ORG   TABLE+C'J'-X'40'
     00270002         DC    X'010101010101010101'
     00280002         ORG   TABLE+C'S'-X'40'
       00290002         DC    X'0101010101010101'
         00300002         ORG   TABLE+C'A'
         00310002         DC    X'010101010101010101'
         00320002         ORG   TABLE+C'J'
         0ˇ
           00340002         ORG   TABLE+C'S'
           00350002         DC    X'0101010101010101'
           00360002      ˇ
             00370002         SPACE 1
             00380002ERROR1   DS    0H
             00390002         LR    #2,#ˇ
               00400002         USING ALPHACP,#2
               00410002         DROP  #15
               00420002         #ERR  'Argument to ALPHˇ
 ',(#3)          00430002         SPACE 1
                 00440002         LTORG
                 00450002         END                                 

                   00460002{
 BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*****************
********************************************** 00011003*
                                             * 00012003*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013003*
ll rights reserved.                            * 00014003*
                                               * 00015003**************ˇ
************************************************** 00016003*
                                                 * 00017003* APPEND2: AP
 EXACTLY TWO ARGUMENTS.                          * 00018003*
      ˇ
EMENTS APPEND AS A MACRO THAT EXPANDS INTO THE     * 00020003* REQUISITE
O APPEND2.                                         * 00030003*
                     ˇ
PRETER, APPEND IS A FUNCTION THAT TAKES A &REST ARG  * 00050003* AND INV
END2.                                                * 00060003*
                                    ˇ
******************************************************** 00080003
1                                                        00090003APPEND2
MINARGS=2,MAXARGS=2,NAME='APPEND2'                 ˇ
E 1                                                        00110003
S 2*4+12+4                                                 00120003
V ,                                                        0013000ˇ
ACE 1                                                        00140003
    #3,#4,0(#11)        LOAD THE ARGUMENTS                   00150003
ACE 1                                                        00160003
 ˇ
BE    ARG1NIL             THEN GO TO RETURN LIST 2             00180003
SPACE 1                                                        00190003A
DS    0H        ˇ
  LR    #6,#10              INITIALIZE RESULT TO NIL             0021000
  LA    #0,24(,#11)         SET CURRENT STACK POINTER FOR CONS   0022000
  TM    ##TYPE(#3),##ATOM   IF ˇ
    BZ    INLOOP              THEN...                              00240
    CR    #4,#10               IF LIST 2 IS NIL,                   00250
    BNE   ERROR1               THEN...        ˇ
      LR    #15,#3                RETURN LIST 1                      002
      B     RETURN               ELSE ERROR                          002
      SPACE 1                                                +
OOP     DS    0H                                           ˇ
3         TM    ##TYPE(#3),##ATOM   IF (SUB)LIST 1 NOT A LIST
3         BO    ERROR1              THEN ERROR
3INLOOP   DS    0H
003         L     #1,##CAR(,#3)       GET CAR OF (SUB)LIST 1
003         LR    #2,#4               GET LIST 2 (in case it's last cons
003         L     #15,ZLCCONS         CALL CONS TO BUILD A PIECE OF THE
003      ˇ
70003         CR    #6,#10              IF NO RESULT YET,
80003         BNE   BASHEND             THEN...
90003         LR    #6,#ˇ
0400003         ST    #6,20(,#11)          SAVE ON STACK FOR POSSIBLE GC
0410003         B     AFTBASH             ELSE...
0420003BASHEND  ST    #15,##CDR(,#5)   ˇ
 00430003AFTBASH  LR    #5,#15              SET POINTER TO LAST CONS IN
 00440003         L     #3,##CDR(,#3)       GO DOWN LIST 1
 00450003         CR    #3,#10              IF END NOTˇ
   00460003         BNE   LOOP                THEN CONTINUE
   00470003******** ST    #4,##CDR(,#5)       WHEN END, list 2 already b
   00480003         LR    #15,#6              RETURN THE RESULT LIST ˇ
     00490003         SPACE 1
     00500003RETURN   DS    0H                  #15 CONTAINS RETURN VALU
     00510003         #ZRET ,                   RETURN TO CALLER
    ˇ
       00530003ARG1NIL  LR    #15,#4              ARG 1 IS NIL:  RETURN
       00540003         #ZRET ,                   RETURN TO CALLER
       00550003    ˇ
         00560003ERROR1   DS    0H                  ERROR IN ARGUMENT
         00570003         #ERR  'Argument 1 to APPEND2 not a proper list
11)      00580003         SPACE 1 ·
           00590003         LTORG
           00600003         END
           00610003{
L 1.3 SUBROUTINE'                              *************************
************************************** 00012000*
                                     * 00013000*ˇ
Charles Stark Draper Laboratory Inc.   * 00014000*                     A
s reserved.                            * 00015000*
                                       * 00015100**************ˇ
******************************************         *
                                         *         * ASH takes two integ
ents.                                    *         * This function does
thmetic shift operation.  Compare LSH.     *         *
                                           *         * Common Lisp compl
                                           *         *
             ˇ
 numbers is to realize that any 1-bits       *         * shifted out on
t in magnitude notation is a remainder       *         * part that will
 magnitude of the remaining ˇ
 magnitude.                                    *         *
                                               *         * ASH could be
ately asymptotically doubled in speed by   ˇ
E loops, with testing to use the vectorized      *         * version onl
he length to be shifted reaches a threshhold.    *         *
                                                 *        ˇ
****************************************************         ASH      #Z
RGS=2,MAXARGS=2,NAME='ASH'                                            #Z
12+0 (= 20)     DEFINE STACK SIZE                                     #Z
                  SAVE REGISTERS
,#7,0(#11)        LOAD ARGUMENTS
TYPE(#6),##FIXNUM Is arg 1 a fixnum?
1       ˇ
##TYPE(#7),##FIXNUM Is arg 2 a fixnum?
F1NF2               Go to Fixnum 1 Not Fixnum 2                  F1F2
#3,15,##CDR(#7)     Getˇ
  I1FZ2               If 0, no shifting required
  F1FM2               If negative, right shift required            F1FP2
  #3,=H'31'           Maximum useful sˇ
    F1FP2BZ             Shift is large enough for bignum
    #2,##CDR(,#6)       Load fixnum to be shifted
A   #2,0(#3)            Shift the fixnum requested am+
BO    F1FP2B              Overflow, go make it a biˇ
  #MKAT FIXED               Cons up a fixnum, probably not SF
  #ZRET ,                   RESTORE REGISTERS AND RETURN
                                                                  ˇ
    CH    #3,=H'-30'          Maximum useful shift
    BL    F1FM2LRG            All but sign shifted out?
    LCR   #3,#3               Change to positive shift amount
 ˇ
      SRA   #2,0(#3)            Shift by amount of arg 2
      CL    #2,ZLCSFTHI         Is number within small fixnum table?
      BH    RETFˇ
        SLA   #2,3                Compute offset in small fixnum table
        LA    #15,#SFT(#2)        Address in small fixnum table
        B     RET              ˇ
 *
 F1FM2LRG TM    ##CDR(#6),X'80'     Test sign of fixnum
          LA    #15,#SFT0           Load 0 in ˇ
            BZ    RET                 Return to caller if it was 0
            LA    #15,#SFTM1          Load -1 because fixnum was neg
            B     RET                 Return to caller       ˇ
     *
     I1FZ2    LR    #15,#6              Return arg 1 unchanged
              B     RET                 Return to caller
       *
       F1FP2B   L     #5,##CDR(,#6)       Load fixnum to be shifted
                XR    #4,#4               Clear before shift left
           ˇ
                  SLDA  #4,1(#3)            Shift left requested amount
                  BO    MT62                Answer must be -2^62
                  SRL   #5ˇ
                    TM    ##CDR(#6),X'80'     Test sign of arg 1
                    LR    #6,#4               Save upper word from ZLCBI
r                   BZ    NONEG          ˇ
                      O     #5,=X'80000000'     Insert minus sign before
             NONEG    L     #15,ZLCBIG          Address of bignum alloca
                      LA    #2,##VECDAT+8       Total leˇ
                        #BASR #14,#15             Allocate bignum space
                        MVC   1(3,#15),=AL3(8)    Store bignum length
                        STM   #5,#6,##VECDAT(#15) Store two-word bignum
                 ˇÁ
availability pointer                    ST    #2,ZLCVSNXT         Store
availability pointer                    B     RET                 Return
er                             *ˇ
                                 MT62     LA    #15,#MT62           Retu
er to -2^62h                              B     RET                 Retu
ller                             *             ˇ
                                   F1FP2BZ  ICM   #2,B'1111',##CDR(#6) L
um and test sign                            BP    FP1FP2B             An
l be positive bignum                        BM    FM1FP2B     ˇ
ill be negative bignum                        LA    #15,#SFT0
ust be 0, load pointer to 0                   B     RET
o caller                             *
                                       FP1FP2B  XR    #4,#4
for divide                                      LR    #5,#3
e requested shift amount                        D     #4,=F'31'
 to get offsˇ
r reg 2 and put in reg 3                          SLDL  #2,1(#4)
ocal shift, plus extra for bit 0                  SRL   #3,1
ect for overshift of lower ˇ
nvert word offset to byte offset                    LTR   #6,#2
 highest word a zero?                               L     #15,ZLCBIG
dress of bignum maker                     ˇ
High word is not zero?                                LR    #2,#5
Copy whole word shift amount                          AH    #2,=H'8'
Total bignum length for bignum maker                  #BAˇ
  Get a bignum space                                    SH    #2,=H'4'
  Bring down to data length of bignum                   STCM  #2,B'0111'
  Store bignum length in bignum header                  ST    #3,##VECDA
15) Store highest word of new bignum                      LA    #4,##VEC
)   Start of area to zero out                             XR    #7,#7
    Zero source length and 0 pad - MVCL                   LA    #2,##VEC
15) Poiˇ
      Zero out all but high word, #6 junk                   ST    #2,ZLC
      Update availability pointer                           B     RET
      Return to callerˇ
                                                     FP1FP2BH LR    #2,#
        Copy whole word shift amount                          AH    #2,=
        Total bignum length for bignu+
          Get a bignum space       ˇ
            Bring down to data length of bignum                   STCM
1',1(#15)   Store bignum length in bignum header                  ST
DAT(#5,#15) Store highest word of new bignum      ˇ
ECDAT+4(#5,#15) Store highest word of new bignum                    LA
ECDAT(,#15)   Start of area to zero out                             XR
              Zero source length and 0 pad - MVCL                ˇ
#VECDAT(#2,#15) Point to end of result                                MV
6               Zero out all but high word, #6 junk                   ST
LCVSNXT         Update availability pointer                           B
ˇ
                                                               FM1FP2B
,#4               Clear for divide
,#3            ˇ
#4,=F'31'           Divide to get offset and local shift
#2,#2
#2,32               Clear reg ˇ
  #2,1(#4)            Do local shift, plus extra for bit 0
  #3,1                Correct for overshift of lower word
  #5,2                Convert word offset to ˇ
R   #6,#2               Is highest word a zero?
    #15,ZLCBIG          Address of bignum maker
    FM1FP2BH            High word is not zero?              ˇ
LR    #2,#5               Copy whole word shift amount
AH    #2,=H'8'            Total bignum length for bignum maker
#BASR #14,#15             Get a bignum space
  SH    #2,=H'4'            Bring down to data length of bignum
  STCM  #2,B'0111',1(#15)   Store bignum length in bignum header
  ST    #3,##VECDAT(#5,#15) Store highest word of new bignum
  LA    #4ˇ
    LA    #6,=X'80'           First byte of minus bignum
    LA    #7,1                Copy minus byte and pad rest with 0
    LA    #2,##VECDAT(#2,ˇ
      MVCL  #4,#6               Zero out all but high word, #6 junk
      ST    #2,ZLCVSNXT         Update availability pointer
      B     RET                 Return tˇ

M1FP2BH LR    #2,#5               Copy whole word shift amount
        AH    #2,=H'12'           Total bignum length f or bignum maker
 ˇÁ
                        SH    #2,=H'4'            Bring down to data len
ignum                   STCM  #2,B'0111',1(#15)   Store bignum length in
header          ˇ
gnum                      ST    #6,##VECDAT+4(#5,#15) Store highest word
bignum                    LA    #4,##VECDAT(,#15)   Start of area to zer
                          LA   ˇ
                            LA    #7,1                Copy minus byte an
st with 0                   LA    #2,##VECDAT(#2,#15) Point to end of re
                            MVCL  #4,#6       ˇ
rd, #6 junk                   ST    #2,ZLCVSNXT         Update availabil
ter                           B     RET                 Return to caller
                     *                                       ˇ
                       F1NF2    CLI   ##TYPE(#7),##BIGNUM Is arg 2 a big
                                BNE   ERROR2              Error, arg 2 n
teger                           TM    ##VECDAT(#7),X'80'  Test sign of b
                                  BO    F1BM2               Shift amount
tive bignum              F1BP2    ICM   #5,B'1111',##CDR(#6) Test fixnum
                                  BNZ   ERROR3              Bignum will
           ˇ
                                    B     RET                 Return to
                           *
                          ˇ
num to be shifted                     LA    #15,#SFT0           Load add
0 in case we need it                  BZ    RET                 Fixnum w
egative, answer is 0                  LA ˇ
tive, answer is -1                      B     RET                 Return
er                             *
                               NF1      CLI   ##TYPE(#6)ˇ
ignum?                                    BNE   ERROR1              If n
t arg is not integer             B1       CLI   ##TYPE(#7),##FIXNUM Is a
ixnum?                                    BNE   B1NF2               Go ˇ
um 1 Not Fixnum 2                  B1F2     ICM   #3,B'1111',##CDR(#7) L
x and test sign                             BZ    I1FZ2               Ar
nteger, arg 2 is zero                       BM    B1FM2               Go
um 1 Fˇ
per word for divide                           D     #2,=F'31'
y bits/word                                   SLL   #3,2
number of bytes of sh+
it shift           ˇ
r for inserting bignum length                     ICM   #5,B'0111',1(#6)
length of bignum                                  LR    #2,#5
a copy of bignum length           ˇ
ad address of bignum maker                          AH    #2,=H'8'
mpute maximum length of result                      AR    #2,#3
d shift amount to length                         ˇ
Call bignum allocator                                 L     #6,0(,#11)
Reload pointer to arg1 after GC                       L     #0,##VECDAT(
Load lowest word of source bignum                     LA    #2,0ˇ
  Fake pointer inside new bignum                        SLL   #0,1(#7)
  Shift and squeeze out sign bit                        SRL   #0,1
  Return to correct position                            ST    #0,##VECDA

    Size of a bignum word for BXLE                        LR    #14,#4
    Set start value for index                             SR    #5,#4
    Reduce terˇ
#14,#6) Lower of pair from source                           L     #0,##V
4,#6) Upper of pair from source                             SLL   #1,1
      Squeeze out empty bit aˇ
        Shift by required amount                              ST    #0,#
#14,#2) Store into source bignum                              BXLE  #14,
LOO     More words to shift?                ˇ
          Now we do last special iteration                      L     #1
T-4(#14,#6) Highest word from source                            XR    #0
          Clear because it's "beyond end"                  ˇ
            Shift by amount and empty bit                         ST
DAT(#14,#2) Store into source bignum                              AR
            Calculate total length for output                     XR
              Setup zero-pad for whole MVCL                         LA
ECDAT(,#15)   Start of data area to zero out                        MVCL
              Pad sign and zeroes at bottom                         TM
AT(#6),X'ˇ
DONE            Bignum is positive                                    OI
CDAT(#15),X'80' Insert minus sign into result bignum         SIGNDONE LT
0               Is higheˇ
Z                 Highest word zero, don't lengthen
4,4(,#14)         Add length when it's longer                  HIZ
4,B'0111',1(#15)  Store length into res ult bignum              ˇÁ
        LA    #2,##VECDAT(#14,#15) Update VSS availability pointer
        ST    #2,ZLCVSNXT         Store availability pointer
        B     RET                 Return to caller
ˇ
 B1FM2    XR    #2,#2               Clear upper word for divide
          LCR   #3,#3               Take positive of the shift
          D    ˇ
            SLL   #3,2                Compute number of bytes of shift
            LR    #7,#2               Save bit shift
            XR    #2,#2       ˇ
              ICM   #2,B'0111',1(#6)    Get length of bignum
              SR    #2,#3               Subtract shift amount from lengt
              BNP   B1IM2               All wˇ
                L     #15,ZLCBIG          Load address of bignum maker
                AH    #2,=H'8'            Add length of ##VECDAT header+
                #BASR #14,#15             Call bignum allocaˇ
                  L     #6,0(,#11)          Reload arg in case GC change
                  LR    #5,#2               Save result length
                  SH    #5,=H'12'           -4 -header -one extra word
                    LA    #2,0(#3,#6)         Fake pointer inside old bi
                    BZ    B1FM2F              Answer must be fixnum
                    LA    #4,4                Size of a bignum word for
          ˇ
             B1FM2LOO L     #1,##VECDAT-4(#14,#2) Lower of pair from sou
                      L     #0,##VECDAT(#14,#2) Upper of pair from sourc
                      SLLˇ
                        SRDL  #0,0(#7)            Shift by required amou
                        SRL   #1,1                Open up a zero for lef
t                       ST    #1,##VECDAˇ
                          BXLE  #14,#4,B1FM2LOO     More words to shift?
                 *                                  Now we do last speci
tion                      L     #0,##VECDAT-4(#14,#2) Hˇ
                            SRA   #0,0(#7)            Shift by amount an
bit                         BZ    B1FM2HZ             High word is zero,
orter                       ST    #0,##VECDAT-4(#14,#15) Store into soˇ
num                           TM    ##VECDAT(#6),X'80'  Test sign of sou
um                            BZ    VSRETBP             Return with posi
num                           B     VSRETBMC            Check bits and r
g big+
   ˇ
 from source                      TM    ##VECDAT(#6),X'80'  Test sign of
bignum                            BO    BM1FM2F             Bignum is ne
                  ˇ
amount                              LR    #2,#0               Set up for
                                    B     RETFIX
                           *     ˇ
                             BM1FM2F  XR    #1,#1               Clear lo
 of double reg                        SRDL  #0,0(#7)            Shift di
ts into reg #1                        LCR   #2,#ˇ
of result                               BZ    RETM1               Result
 neg 1                                  LTR   #1,#1               Any on
ed out?                                 BZ    BM1FM2FC         ˇ
 lower bits too                           BCTR  #2,0                Add
agnitude of ASH                           B     RETFIX              Make
m                                *
                                   BM1FM2FC LA    #2,##VECDAT(,#6)    Ge
r to source header                          LA    #4,=X'80'           Im
rst byte in neg big data                    LA    #5,1                Co
ngth 1, 0-padˇ
s in displaced length                         BNE   BM1FM2F1
 one to fixnum magnitude                      LCR   #2,#0
ative of shifted answer     ˇ
 fixnum                                *
                                       BM1FM2F1 LCR   #2,#0
egative of shifted word                    ˇ
ract one                                          B     RETFIX
 a fixnum                                *
                                         B1FM2HZ  SH    #1ˇ
swer is one word shorter, #14=len                   CH    #14,=H'4'
 answer only one word?                              BE    B1FM2HZF
swer must be a fixnum                      BFMRET   TM    ##VECDAT(#6),X
Test sign of source bignum                            BZ    VSRETBP
Return positive bignum                       VSRETBMC L     #0,##VECDAT(
Load rightmost used word in source                    XR    #1,#1
Clear hiˇ
  Shift by bit amount                                   LTR   #1,#1
  Any bits shifted out on right?                        BNZ   VSRETBM1
  Return 1 less for neg  bignum result          ˇÁ
,#3               Are there whole words to check?
RETBM0            Nope, don't subtract one from result
,##VECDAT(,#6)    Start of comparison to 0's                    ˇ
#4,=X'80'           First byte to compare
#5,1                Clear pad, 1 byte of real compare
#2,#4               Compare to 0

                                                                   VSRET
  #5,#14              Restore length
  #4,4        ˇ
    #14,#4              Index start
    #0,#0               Need zero for storing in loop                BMC
    #1,##VECDAT-4(#14,#15) Loˇ
AH    #1,=H'1'            Add carry
BNO   NOCARRY             Word did not overflow?
ST    #0,##VECDAT-4(#14,#15) Store zero if oˇ
  BXLE  #14,#4,BMCLOOP      More words to overflow to?

  LA    #1,1                Carry out of high word, add anoˇ
    ST    #1,##VECDAT-4(#14,#15) Store the 1 in new high word
    OI    ##VECDAT(#15),X'80' Insert minus sign bit into result
    STCM  #14,B'0111',1(#15)  Store bignum length in header
      LA    #14,##VECDAT(#14,#15) Update availability pointer
      ST    #14,ZLCVSNXT        Store updated VSS pointer
      B     RET                 Return to caller
         ˇ
OCARRY  ST    #1,##VECDAT-4(#14,#15)
        OI    ##VECDAT(#15),X'80' Insert minus sign bit into result
        STCM  #5,B'0111'ˇ
          LA    #14,##VECDAT(#5,#15) Update availability pointer
          ST    #14,ZLCVSNXT        Store updated VSS pointer
          B     RET                 Retˇ
   *
   VSRETBM0 CH    #14,=H'8'           Two-word bignum?
            BNE   VSRETBM             No need to checkˇ
              CLC   ##VECDAT(8,#15),#W0W1 Compare agains possible -2^31
              BE    MT31                Answer is -2^31
     VSRETBM  OI    ##VECDAT(#15),X'80' Insert minus sign bit into re+
       VSRETBP  STCM  #14,B'0111',1(#15)  Store bignum length in heˇ
                  LA    #14,##VECDAT(#14,#15) Update availability pointe
                  ST    #14,ZLCVSNXT        Store updated VSS pointer
                  B     RET                 Return to caller
  ˇ
           MT31     LA    #15,#MT31           Load address of -2^31
                    B     RET
           *     ˇ
             B1FM2HZF TM    ##VECDAT(#6),X'80'  Test sign of source bign
                      BO    RETFMC              Check for bits
                      CL    #1,Zˇ
e max                   LR    #2,#1               Proper register for co
xnum                    BH    RETFIX              Need to cons the fixnu
                        SLA   #1,3             ˇ
um table                  LA    #15,#SFT(#1)        Address in small fix
e                         B     RET                 Return to caller
                 *                                            ˇ
                   RETFMC   L     #0,##VECDAT(,#2)    Get lowest used wo
eck lowbit                  XR    #1,#1               Clear second word
                            SRDL  #0,0(#7)            Shift out unused b
                              LTR   #1,#1               Test shifted out
                              BNZ   RETFSUB1            Return 1 less fo
x result                      LTR   #3,#3               Are there whole
 check?     ˇ
ne from result                  LA    #2,##VECDAT(,#6)    Get start of a
heck for 1-bit                  LA    #4,=X'80'           First byte to
                           ˇ
-pad rest                         CLCL  #2,#4               Search for f
s                                 BNE   RETFSUB1            Return 1 les
g fix result             RETFSUB0 L     #2ˇ
 be a fixnum                        LCR   #2,#2               Take negat
                                    B     RETFIX              Return fix
                           *                             ˇ
                             RETFSUB1 L     #2,##VECDAT-4(#14,#15) Get w
ld be a fixnum                        LCR   #2,#2               Take neg
                                      BCTR  #2,0                Subtract
ause 1-bits went out                    B     RETFIX              Return
                               *
                               B1NF2    CLI   ##TYPE(#7),##BIGNUM Is arg
num?                            ˇÁ
  Arg 2 is not an integer                      B1B2     TM    ##VECDAT(#
  Is arg2 bignum positive?                              BZ    ERROR3
  Then result will be too big                  Bˇ
0'  Is arg 1 integer positive?                            LA    #15,#SFT
    Load address of 0 in case we need it                  BZ    RET
    Arg 1 positive, all bits shifted out         RETM1    LA   ˇ
      Load address of -1, because arg1 neg                  B     RET
      Return to caller                             *
                                                            DS    0A
        Align bignum to fullword                     #MT62    DC    YL1(
),AL3(12),X'80000000',F'0',F'1'  -2**62              #T31     DC    YL1(
),AL3(8),F'0',F'1' 2**31=bad bignum if neg           #MT31    DC    YL1(
),AL3(0),F'-2ˇ
 Upper two words of 2^31 bignum                        *
                                                       ERROR1   #ERR  'A
1 to ASH not an integer - ',ˇ
t 2 to ASH not an integer - ',(#7)                       ERROR3   LM
#11)                                                              #ERR
 integer magnitude exceeded in ASH trying tˇ
#6),' by ',(#7)                                                     LTOR
                                                                    END
                                                            

0010000*****************************************************************
0011005*
0012005*ˇ
 00013005*                     All rights reserved.
 00014005*
 00015005**************ˇ
** 00016005*
 * 00017005* ASSQ: SAME AS COMMON LISP (ASSOC A B :TEST #'EQ)
 * 00018005*                          ˇ
   * 00019005* THIS ROUTINE IS NONRECURSIVE AND USES NO STACK SPACE.
   * 00020005*
   * 00030005****************************************ˇ
****** 00040005*
     * 00050005* NOTE: THERE USED TO BE CODE TO CHECK FOR THE PRESENCE O
     * 00060005*       THE MIDDLE OF THE ALIST.  THIS CODE HAS BEEN ˇ
       * 00070005*       SINCE WHEN IT IS REMOVED IT HAS THE SAME EFFECT
ECT    * 00080005*       PROGRAMS.  TAKING THE "CAR" OF NIL RESULTS IN A
 THAT  * 00090005*       CANNOT BE EQ TO ANYTHING ELSE (EXCEPT THE CAR O
HATˇ
EARCH    * 00110005*       ALWAYS PROCEEDS PAST NULL ELEMENTS.
         * 00120005*       WE'VE NEVER CHECKED FOR ATOMIC SUBLISTS ANYHO
         * 0013000ˇ
           * 00140005***************************************************
************ 00150005         SPACE 1
             00160005************ˇ
************** 00170005*
             * 00180005* Change activity:
             * 00190005*                        ˇ
               * 00200005* 03/30/88 - Error checking added, now that ASS
ompiled inline.* 00210005*            Note that the checking is rather m
               * 00220005*                                     ˇ
                 * 00230005*********************************************
****************** 00240005         SPACE 1
                   00250005ASSQ     #ZBEG MINARGS=2,MAXARGS=2,NAME='ASSQ
                     00260005         SPACE 1
                     00270005         LM    #2,#3,0(#1)         LOAD ARG
ARAND)               00280005         LR    #4,#3               LOAD ARG
T)           +
           ˇ
)ALIST TO NIL            00310005         LM    #3,#4,##CAR(#4)     #2 =
S'S CAR, #3 = ITS CDR    00320005         BE    NOTFOUND            IF S
AS NIL, RETURN NIL       0ˇ
ist was an atom            00340005         BM    ERROR1              th
                           00350005         C     #2,##CAR(,#3)       IF
OT EQ ITS CAR'S CAR        00360005      ˇ
TINUE WITH SUBALIST'S CDR    00370005         DROP  #15
                             00380005         LR    #15,#3
URN WITH SUBALIST'S CAR      00390005         BR    #14 ˇ
                               00400005NOTFOUND DS    0H
                               00410005         LR    #15,#10
UND IN ALIST, RETURN NIL       00420005         BR    #14              ˇ
                                 00430005ERROR1   LR    #3,#15
                                 00440005         USING ASSQ,#3
                                 00450005         L     #4,4(,#1)
      ˇ
t a proper list - ',(#4)           00470005         SPACE 1
                                   00480005         LTORG
                     Ä               00490005         END
                                     00500005{
  TITLE 'ATOM - BUILT-IN ZIL 1.3 SUBROUTINE'                     0001000
**************************************************************** 0001100
                                                               * 0001200
 Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013
                 All rights reserved.                            * 00014
                                                                 * 00015
*********ˇ
      SPACE 1                                                        000
M     #ZBEG MINARGS=1,MAXARGS=1,NAME='ATOM'                          000
      SPACE 1           ˇ
        USING ATOM,#15                                                 0
        SPACE 1                                                        0
        L     #2,0(,#1)                ˇ
2         TM    ##TYPE(#2),##ATOM
2         BZ    ZXATN
2         DROP  #15                                   ˇ
002         LR    #15,#8
002         BR    #14
002ZXATN    LR    #15,#10                                            º
00002         BR    #14
10002         END
20002
TINE'                  00010000*****************************************
********************** 00011003*
                     * 00012003*ˇ
aper Laboratory Inc.   * 00013003*                     All rights reserv
                       * 00014003*
                       * 00015003**************ˇ
************************** 00016003* BIGLIST TAKES 1 ARGUMENT - A BIGNUM
ERT TO A LIST OF FIXNUMS * 00017003*************************************
************************** 00018003         SPACE             ˇ
                             00019003BIGLIST  #ZBEG MINARGS=1,MAXARGS=1,
GLIST'                       00020003         #ZPDS 20
TACK SIZE                    00030003         #ZSAV ARGS=1
EGISTERS                       00040003         SPACE
                               00050003*
                               00060003* CHECK INPUT ARGUMENT - MUST BE
            ˇ
                                 00080003         L     #6,0(,#11)
ARG 1                            00090003         CLI   ##TYPE(#6),##BIG
 BE A BIGNUM               ˇ
 ELSE                              00110003* #6 -> BIGNUM
                                   00120003* #3 = LENGTH OF BIGNUM DATA
RDS * 4)                           0013000ˇ
                                     00140003* #5 -> LIST BEING BUILT
                                     00150003*
                                     00160003* FOR EACH Wˇ
KE A FIXNUM OUT OF IT.                 00170003* WE GO BACKWARDS TO FACI
ONSING THEM TOGETHER TO MAKE A LIST.   00180003*
                                       00190003         XR    #3,#3
    CLEAR INSERT REGISTER                00200003         ICM   #3,7,1(#
    GET LENGTH OF BIGNUM DATA            00210003         LA    #4,##VEC
3)  INDEX TO LAST WORD IN BIGNUM         00220003         LR    #15,#10
    INIˇ
      SET STACK POINTER FOR CONS           00240003         LH    #5,=H'
      SET UP BXLE DECREMENT                00250003         AR    #4,#5
                      ˇ
        LOOP USING BXLE REGS #4, #6, #7      00270003         ST    #15,
        (SETQ LIST (CONS FIXNUM LIST))       00280003         L     #6,0
        RELOAD BIGNUM ARG FROM STACK +
T(#4,#6)  LOAD BIGNUM WORD VALUE   ˇ
            MAKE A FIXNUM OUT OF IT              00310003         LR
            ARG 1 TO CONS = BUILT FIXNUM         00320003         L
11)         ARG 2 TO CONS = LIST SO FAR          0ˇ
CCONS         CALL CONS TO ADD NEW ATOM TO LIST    00340003         #BAS
5                                                  00350003         BXH
LOOP          CONTINUE UNTIL HIT START OF BIGNUM   00360003RETLISˇ
                                                     00370003         SP
                                                     00380003         #Z
                RESTORE REGISTERS AND RETURN         00390003         SP
ˇ
                                                       00410003
rgument to BIGLIST not a bignum - ',(#6)               00420003
               K                                         00430003
                                                         00440003
                                                         00450003{
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002         SPACE 1
         00017002BIGP     #ZBEG MINARGS=1,MAXARGS=1,NAME='BIGP'
         00018002         SPACE 1           ˇ
           00019002         USING BIGP,#15
           00020002         SPACE 1
           00030002         L     #2,0(,#1)                ˇ
             00040002         CLI   ##TYPE(#2),##BIGNUM
             00050002         BNE   ZXBIGN
             00060002         DROP  #15
               00070002         LR    #15,#8
               00080002         BR    #14
               00090002ZXBIGN   LR    #15,#10
         º       00100002         BR    #14
                 00110002         END
                 00120002
LT-IN ZIL 1.3 SUBROUTINE'                  00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002*
                                             * 00017002* BUTLAST takes o
red argument - a proper list - and           * 00018002*               o
naˇ
from the end of the list (default: 1).         * 00020002*
                                               * 00030002* BUTLAST makes
of the first LENGˇ
                                                 * 00050002* Like LENGTH
T will loop indefinitely if the list is circular.* 00060002*
                                ˇ
**************************************************** 00080002BUTLAST  #Z
RGS=1,MAXARGS=2,NAME='BUTLAST'                       00090002         #Z
                DEFINE STACK SIZE              ˇ
                  SAVE REGISTERS                       00110002
                                                       00120002
,#4,0(#11)        #3 = arg1, #4 = arg2                 0013000ˇ
#4,#13              If arg2 is unsupplied                00140002
ARG2SUP             then                                 00150002
#5,1                 set arg2 value to 1                 00160002
  GOTARG2             else                                 00170002ARG2S
  0H                   arg2 was supplied                   00180002
  ##TYPE(#4),##FIXNUM If arg2 is not a fixnum              00190002
  ERROR2    ˇ
M   #5,15,##CDR(#4)     else get value of arg2               00210002
M   GOTARG2             If negative,                         00220002
    #5,#5                thˇ
DS    0H                  #5 now equals "ignore count"         00240002
LR    #1,#3               Load arg1 for length computation     00250002
XR    #2,#2               Initialize (minuˇ
  SPACE 1                                                        0027000
  DS    0H                                                       0028000
  CR    #1,#10              Loop until NIL (end of list a+
    BE    ENDLOOP1                                     ˇ
      TM    ##TYPE(#1),##ATOM   If atom or dotted pair in arg1       003
      BO    ERROR1              then arg1 is not a valid list        003
      L     #1,##CDR(,#1)       Else cdr down arg1                   0ˇ
        BCT   #2,LOOP1            to find length thereof               0
NDLOOP1 DS    0H                  #2 contains (minus (length arg1))    0
        LR    #15,#10             Initialize return list to NIL        0
     ˇ
2         BNM   RETURN              If positive, return null list
2         LCR   #5,#5               Else make # of elements positive
2         LR    #7,#ˇ
002LOOP2    DS    0H                  Loop consing up elements
002         L     #1,##CAR(,#3)       Get a CAR of arg1
002         LR    #2,#10           ˇ
30002         L     #15,ZLCCONS         Call CONS to add item to result
40002         #BASR #14,#15             (sets #15 to result of CONS)
50002         CR    #7,#10              If return ˇ
0460002         BNE   BNN                 then
0470002         LR    #7,#15               set return list to first CONS
0480002         LR    #6,#15               set bashee to first COˇ
 00490002         B     AFTBASH             else
 00500002BNN      ST    #15,##CDR(,#6)       bash CDR of bashee
 00510002         LR    #6,#15               set new bashee
ˇ
   00530002         L     #3,##CDR(,#3)       CDR down list
   00540002         BCT   #5,LOOP2            CONS until count exhausted
   00550002    ˇ
     00560002         SPACE 1
     00570002RETURN   DS    0H                  #15 contains return valu
     00580002         #ZRET , ˇ
       00590002         SPACE 1
       00600002ERROR1   DS    0H                  NOT A NUMERIC ATOM
       00610002         #ERR  'Argument 1 to ˇ
11)      00620002ERROR2   DS    0H                  NOT A NUMERIC ATOM
         00630002         #ERR  'Argument 2 to BUTLAST not a fixnum - ',
         00640002         SPACE 1                           G
           00650002         LTORG
           00660002         END
           00670002{
L 1.3 SUBROUTINE'                      00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* THIS IS THE VERSION
FOR WHICH (CAR NIL) ==> NIL.             * 00018002* FOR SPEED BUT NO SU
FOR (CAR NIL), USE ZCAR.                   * 00019002*
                                           * 00020002*******************
******************************************** 00030002         SPACE 1
             ˇ
MAXARGS=1,NAME='CAR'                           00050002         SPACE 1
                                               00060002         LR    #3
                            ˇ
                                                 00080002         DROP
                                                 00090002         SPACE
                                           ˇ
,#1)          LOAD ARG 1                           00110002         CR
0             IF ARG IS NIL                        00120002         BER
              THEN RETURN (CAR NIL) = NIL          0013000ˇ
PE(#15),##ATOM  IF ARG IS NOT A LIST                 00140002         BO
RROR            THEN ERROR                           00150002         L
##CAR(,#15)     ELSE RETURN CAR OF ARG               00160002         BR
4                                                      00170002
                                                       00180002CARERROR
                                                       00190002
,#15    ˇ
'Argument to CAR not a list - ',(#2)                     00210002
1                                                        00220002
                       Œ                                   00230002
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002*
       * 00017002* THIS IS THE VERSION OF CDR FOR WHICH (CDR NIL) ==> NI
       * 00018002* FOR SPEED BUT NO SUPPORT ˇ
         * 00019002*
         * 00020002*****************************************************
********** 00030002         SPACE 1                        ˇ
             00040002CDR      #ZBEG MINARGS=1,MAXARGS=1,NAME='CDR'
             00050002         SPACE 1
             00060002         LR    #3,#15
               00070002         USING CDR,#3
               00080002         DROP  #15
               00090002         SPACE 1
         ˇ
                 00110002         SPACE 1
                 00120002***********************************************
**************** 0013000ˇ
                 * 00140002* The check for CDR of NIL is not required, s
 architecture of * 00150002* symbols is such that the value cell is in t
position as the  * 00160002* CDR cell oˇ
                   * 00170002*
                   * 00180002* However, since a check for atomicity is r
 we still have to  * 00190002* allow for this.        ˇ
                     * 00200002*
                     * 00210002*****************************************
********************** 00220002         SPACE 1                      ˇ
                         00230002         CR    #15,#10             IF A
L                        00240002         BER   #14                 THEN
(CDR NIL) = NIL          00250002         TM    ##TYPE(#15),##ATOM  IF A
T A ˇ
                           00270002         L     #15,##CDR(,#15)     EL
N CDR OF ARG               00280002         BR    #14
                   +
                 ˇ
                               00310002         LR    #2,#15
                               00320002         #ERR  'Argument to CDR n
t - ',(#2)                     0z 0330002         SPACE 1
                                 00340002         END
                                 00350002{
TLE 'CHAR - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000***
************************************************************ 00011002*
                                                           * 00012002*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
             All rights reserved.                            * 00014002*
                                                             * 00015002*
*****ˇ
                                                               * 0001700
TAKES TWO ARGUMENTS - A STRING AND A FIXNUM.                   * 0001800
                    ˇ
RETURNS A FIXNUM.  INDEXING IS ZERO-BASED, UNLIKE GETCHAR(N).    * 00020
                                                                 * 00030
e: Because this function does not nˇ
     have to save anything on the stack.                           * 000
                                                                   * 000
**************************************************ˇ
        SPACE 1                                                        0
HAR     #ZBEG MINARGS=2,MAXARGS=2,NAME='CHAR'                          0
        SPACE 1                                                  ˇ
2         LM    #6,#7,0(#1)         LOAD ARGS
2         CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING
2         BE    ARG1OK              THEN OK
ˇ
002         BNE   ERROR1              THEN
002         L     #6,##PNAME(,#6)      TAKE THE PRINT NAME, ELSE ERROR
002ARG1OK   DS ˇ
70002         CLI   ##TYPE(#7),##FIXNUM IF ARG 2 IS NOT A FIXNUM
80002         BNE   ERROR2              THEN ERROR
90002         ICM   #5,15,##CDˇ
0200002         BM    RETNIL              IF NEGATIVE, RETURN NIL
0210002         XR    #4,#4               CLEAR INSERT REG
0220002         ICM   #4,7,1(#6)          GETˇ
 00230002         CR    #5,#4               IF INDEX EXCEEDS LENGTH
 00240002         BNL   RETNIL              THEN RETURN NIL
 00250002         XR    #2,#2               CLEAR INSERT REGˇ
   00260002         IC    #2,##VECDAT(#5,#6)  GET STRING CHARACTER INTO
   00270002         SLA   #2,3                Convert to index into fixn
   00280002         LA    #15,#SFT(#2)        Point to fixnum in table
     00290002         BR    #14                 Return with #15 pointing
xnum   00300002         SPACE 1
       00310002RETNIL   DS    0H                  INDEX OUT OF BOUNDS
       00320002         LR    #15,#10             RETURN NIL
       0ˇ
fixnum   00340002         SPACE 1
         00350002         USING CHAR,#3
         00360002      ˇ
           00370002ERROR1   LR    #3,#15
           00380002         #ERR  'Argument 1 to CHAR not a string - ',(
           00390002ERROR2   LR    #3,#ˇ
             00400002         #ERR  'Argument 2 to CHAR not a fixnum - '
             00410002         SPACE 1
             00420002         LTORG                  b
               00430002         END
               00440002{
ILT-IN ZIL SUBROUTINE'                     00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002*
                                             * 00017002* CHARDOWN TAKES
MENT - A FIXNUM.                             * 00018002* THE FIXNUM IS I
EDˇ
.                                              * 00020002*
                                               * 00030002* ALIAS "CHAR-D
.                ˇ
                                                 * 00050002*************
************************************************** 00060002         SPAC
                                ˇ
RGS=1,MAXARGS=1,NAME='CHAR-DOWNCASE'                 00080002         SP
                                                     00090002         LR
15                                             ˇ
ARDOWN,#3                                              00110002
5                                                      00120002
                                                       0013000ˇ
#15,0(,#1)          GET ATOM (ARG 1 TO CHARDOWN)         00140002
##TYPE(#15),##FIXNUM MUST BE A FIXNUM                    00150002
ERROR1              OR ELSE                              00160002
  #4,##CDR(,#15)      GET FIXNUM CONTENTS                  00170002
  #4,#SFW255          IF NOT 1-BYTE CHARACTER FIXNUM       00180002
  #14                  THEN JUST RETURN IT AS IS           00190002
  #2,#2     ˇ
    #2,TABLE(#4)        IF IN RANGE, LOAD CHAR FROM TABLE    00210002
    #2,#4               IF THE SAME                          00220002
R   #14                 THEˇ
SLA   #2,3                Else convert number to table index   00240002
LA    #15,#SFT(#2)        Point to fixnum in fixnum table      00250002
BR    #14                  and return withˇ
  SPACE 1                                                        0027000
  DC    256YL1(*-TABLE)     ALL CHARS TRANSLATE TO SELVES        0028000
  ORG   TABLE+C'A'          EXCEPT UPPER CASE TO LOWER CA+
    DC    X'818283848586878889'                        ˇ
      ORG   TABLE+C'J'                                               003
      DC    X'919293949596979899'                                    003
      ORG   TABLE+C'S'                                               0ˇ
        DC    X'A2A3A4A5A6A7A8A9'                                      0
        ORG                                                            0
        SPACE 1                                                        0
RROR1ˇ
2         SPACE 1
2         LTORG
2         END       ¸
002{
NE'                    00010000*****************************************
********************** 00011004*
                     * 00012004*ˇ
aper Laboratory Inc.   * 00013004*                     All rights reserv
                       * 00014004*
                       * 00015004**************ˇ
************************** 00018004*
                         * 00019004* CHARACTERP - alias CHARP - true if
 is a "character", which * 00020004* means in ZIL a fixnum betˇ
 The test here is to       * 00030004* compare the argument with X'C0000
00__', since all fixnums   * 00040004* in character range will look like
                           * 00050004*
                             * 00060004*********************************
****************************** 00070004*
                               00080004CHARP    #ZBEG MINARGS=1,MAXARGS=
CHARACTERP' ˇ
                                 00100004         USING CHARP,#15
                                 00110004         SPACE 1
                           ˇ
                                   00130004         CLC   0(7,#2),#SFT0
                                   00140004         BNE   ZXCHARN
                                   0015000ˇ
                                     00160004         LR    #15,#8
                                     00170004         BR    #14
                                     00180004ZXCHARN  LR 2    #15,#10
                                       00190004         BR    #14
                                       00200004         END
                                       00210004
  TITLE 'CHARUP - BUILT-IN ZIL 1.3 SUBROUTINE'                   0001000
**************************************************************** 0001100
                                                               * 0001200
 Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013
                 All rights reserved.                            * 00014
                                                                 * 00015
*********ˇ
                                                                   * 000
HARUP TAKES ONE ARGUMENT - A FIXNUM.                               * 000
HE FIXNUM IS INTERPRETEDˇ
 UPPER CASE EQUIVALENT.                                              * 0
                                                                     * 0
 ALIAS "CHAR-UPCASE".                  ˇ
2*                                                                     *
2***********************************************************************
2         SPACE 1                                     ˇ
002CHARUP   #ZBEG MINARGS=1,MAXARGS=1,NAME='CHAR-UPCASE'
002         SPACE 1
002         LR    #3,#15                                             ˇ
00002         USING CHARUP,#3
10002         DROP  #15
20002         SPACE 1
3000ˇ
0140002         CLI   ##TYPE(#15),##FIXNUM MUST BE A FIXNUM
0150002         BNE   ERROR1              OR ELSE
0160002         L  ˇ
 00170002         CL    #4,#SFW255          IF NOT 1-BYTE CHARACTER FIXN
 00180002         BHR   #14                  THEN JUST RETURN IT AS IS
 00190002         XR    #2,#2     ˇ
   00200002         IC    #2,TABLE(#4)        IF IN RANGE, LOAD CHAR FRO
   00210002         CR    #2,#4               IF THE SAME
   00220002         BER   #14                 THEˇ
     00230002         SLA   #2,3                Else convert number to t
ex   00240002         LA    #15,#SFT(#2)        Point to fixnum in fixnu
     00250002         BR    #14                  and return withˇ
       00260002         SPACE 1
       00270002TABLE    DC    256YL1(*-TABLE)     ALL CHARS TRANSLATE TO
       00280002         ORG   TABLE+C'A'-X'40'    EXCEPT LOWER CASE TO U

           00300002         ORG   TABLE+C'J'-X'40'
           00310002         DC    C'JKLMNOPQR'
           00320002         ORG   TABLE+C'S'-X'40'
           0ˇ
             00340002         ORG
             00350002         SPACE 1
             00360002ERROR1ˇ
0(#11)         00370002         SPACE 1
               00380002         LTORG
               00390002         END       ¸
                 00400002{
BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*******************
******************************************** 00011002*
                                           * 00012002*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013002*
 rights reserved.                            * 00014002*
                                             * 00015002**************ˇ
************************************************ 00016002         SPACE
                                                 00017002CLOSUREP #ZBEG
1,MAXARGS=1,NAME='CLOSUREP'                      00018002         SPACE
    ˇ
EP,#15                                             00020002         SPAC
                                                   00030002         L
#1)                ˇ
PE(#2),##CLOSUR                                      00050002         BN
SRN                                                  00060002         DR
                                  ˇ
5,#8                                                   00080002
4                                                      00090002ZXCLSRN
5,#10                                            º       00100002
#14                                                      00110002
                                                         00120002

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002         SPACE 1
       00017002CODEP    #ZBEG MINARGS=1,MAXARGS=1,NAME='CODEP'
       00018002         SPACE 1           ˇ
         00019002         USING CODEP,#15
         00020002         SPACE 1
         00030002         L     #2,0(,#1)                ˇ
           00040002         TM    ##TYPE(#2),##CODE   ATOMIC AND COMPILE
BJECT      00050002         BNO   ZXCODEN
           00060002         DROP  #15
             00070002ZXCODET  LR    #15,#8
             00080002         BR    #14
             00090002ZXCODEN  LR    #15,#10
       º       00100002         BR    #14
               00110002         END
               00120002
 ZIL 1.3 SUBROUTINE'                     00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002         SPACE 1
                                             00017002CONS     #ZBEG MINA
XARGS=2,NAME='CONS'                          00018002         SPACE 1
ˇ
          NOTE - NO BASE REGISTER.             00020002         L     #1
S                                              00030002         LM    #1
)              O                                 00040002         BR
            ZLCCONS WILL RETURN VIA OUR #14      00050002         END
                                                 00060002

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002         SPACE 1
0017002CONSP    #ZBEG MINARGS=1,MAXARGS=1,NAME='CONSP'
0018002         SPACE 1           ˇ
 00019002         USING CONSP,#15
 00020002         SPACE 1
 00030002         L     #2,0(,#1)                ˇ
   00040002         TM    ##TYPE(#2),##ATOM
   00050002         BO    ZXCONSN
   00060002         DROP  #15                                   ˇ
     00070002         LR    #15,#8
     00080002         BR    #14
     00090002ZXCONSN  LR    #15,#10
       00100002         BR    #14
       00110002         END
       00120002
.3 SUBROUTINE'                   00010000*******************************
******************************** 00011002*
                               * 00012002*ˇ
s Stark Draper Laboratory Inc.   * 00013002*                     All rig
rved.                            * 00014002*
                                 * 00015002**************ˇ
************************************ 00016002         SPACE
                                     00017002CSSIZE   #ZBEG MINARGS=0,MA
NAME='CSSIZE'                        00018002         #ZPDS 12
  DEFINE STACK SIZE                    00019002         #ZSAV ARGS=0
  SAVE REGISTERS                       00020002         SPACE 1
                                       00030002         L     #2,ZLCCSSI
  GET Sˇ
    MAKE A FIXNUM OUT OF IT              00050002         #ZRET ,
    RETURN WITH IT                       00060002         SPACE 1
                      ˇ
                                           00080002         SPACE 1
                                           00090002         END
                                     ∫       00100002
        TITLE 'CURDATE - BUILT-IN ZIL 1.3 SUBROUTINE'                  0
********************************************************************** 0
                                                                     * 0
ˇ
2*                     All rights reserved.                            *
2*                                                                     *
2**************ˇ
002*
002* CURDATE RETURNS THE CURRENT DATE AS LIST OF 3 INTEGERS, REPRESENTIN
002* THE DATE AS (YEAR MONTH Dˇ
19002*
20002*******************************************************************
21002*                                       ˇ
0022003* 04/13/2000 Changed for Y2K.
0022103*
0022203*****************************************************ˇ
 00023003CURDATE  #ZBEG MINARGS=0,MAXARGS=0,NAME='CURDATE'
 00030002         #ZPDS 16                  DEFINE STACK SIZE
 00040002         #ZSAV ARGS=0              SAVE REGISTERS
   00050002         SPACE
   00060002         TIME  DEC                 GET CURRENT TIME AND DATE
   00070002         ST    #1,DECDATE          STORE DATE IN WORK AREA
   0008000ˇ
     00090002         XR    #14,#14
     00100002         LH    #15,DECYEAR         GET DECIMAL YEAR
     00120003         SLLˇ
       00130002         LA    #15,X'C'(,#15)
       00140002         STM   #14,#15,ZLCDBL
       00150002         CVB   #2,ZLCDBL ˇ
         00160002         LA    #2,1900(,#2)
         00161003         ST    #2,YEAR
         00170002         SPACE                        ˇ
           00180002         XR    #14,#14
           00190002         XR    #15,#15
           00200002         ICM   #15,B'0011',DECJUL  GET DECIMAL JULIˇ
             00210002         STM   #14,#15,ZLCDBL
             00220002         CVB   #2,ZLCDBL
             00230002         ST    #2,JULIAN
     +
   ˇ
                 00260002* COMPUTE MONTH AND DAY FROM JULIAN DAY
                 00270002*
                 0ˇ
).                 00290002* (THIS ALGORITHM WILL FAIL IN THE YEAR 2100,
ARNED)             00300002*
                   00310002      ˇ
A LEAP YEAR          00320002         BNZ   NOTLEAP             THEN
                     00330002         LA    #0,29                SET MON
9                    00340002         B     AFTLˇ
                       00350002NOTLEAP  LA    #0,28                SET M
 28                    00360002AFTLEAP  DS    0H
                       00370002         ST    #0,MONTHS+4      ˇ
THS IN FEBRUARY          00380002         LA    #15,MONTHS-4        POIN
AY OF DAYS PER MONTH     00390002         LA    #1,4(,#15)          POIN
ST/NEXT ELEMENT          00400002JULLOOP  DS    0H                  DO W
DAYS EXCEEDS DAYS LEFT     00410002         C     #2,0(,#1)           IF
 DAYS IN THIS MONTH        00420002         BNH   GOTMONTH            TH
                           00430002         S     #2,0(,#1)            D
#DAYS BY DAYSˇ
O NEXT MONTH'S DAYS          00450002         B     JULLOOP
TINUE.                       00460002GOTMONTH DS    0H
TH IS FOUND,                ˇ
TE THE INDEX OF THE            00480002         SRA   #1,2
IN-MONTH ENTRY WE'RE AT        00490002         ST    #1,MONTH
G THE MONTH NUMBER             00500002    ˇ
AINING # OF DAYS IS DAY NUMBER   00510002DATEDONE DS    0H
                                 00520002         L     #2,DAY
                                 00530002         SLA   #2ˇ
                                   00540002         LA    #1,#SFT(#2)
XNUM DAY                           00550002         LR    #2,#10
                                   00560002         LA    #0,16(,#11)
                                     00570002         L     #15,ZLCCONS
                                     00580002         #BASR #14,#15
(CONS DAY NIL)                       00590002         ST    #15,12(,#11)
        ˇ
                                       00610002         SLA   #2,3
                                       00620002         LA    #1,#SFT(#2
  FIXNUM MONTH                          00630002ˇÁ
,12(,#11)                                              00640002
,16(,#11)                                              00650002
5,ZLCCONS                                              00660002 ˇ
#14,#15             (CONS MONTH (CONS DAY NIL))          00670002
#15,12(,#11)                                             00680002
#2,YEAR                                                  00690002

T FIXED               Make a new fixnum for the year       00722005
  #1,#15              FIXNUM MONTH                         00722105
  #2,12(,#11) ˇ
    #0,16(,#11)                                              00723305
    #15,ZLCCONS                                              00723405
ASR #14,#15             (CONSˇ
SPACE                                                          00750002
#ZRET ,                   RESTORE REGISTERS AND RETURN         00760002
SPACE                                       ˇ
  DS    F                                                        0078000
  DS    F                                                        0079000
  DS    F                                                  ˇ
N   DS    F                                                        00810
TE  DS    F                   0086123F                             00820
AR  EQU   DECDATE+0,2,C'H'    0086                                 00830
JUL   EQU   DECDATE+2,2,C'P'        123F                             008
      SPACE                                                          008
THS   DC    F'31,00,31,30,31,30,31,31,30,31,30,31'                   008
      LTO2 RG                                                          0
        SPACE                                                          0
        END                                                            0

                 00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* CURJDATE RETURNS THE CURRENT JULIAN DATE
T OF 2 INTEGERS,   * 00018002* REPRESENTING THE DATE AS ˇ
                     * 00019002*
                     * 00020002*****************************************
********************** 00030002*                                       ˇ
                         00030103* 04/13/2000 Changed for Y2K.
                         00030203*
                         00030303***************************************
******ˇ
DATE'                      00040002         #ZPDS 16                  DE
CK SIZE                    00050002         #ZSAV ARGS=0              SA
TERS                 ˇ
                             00070002         TIME  DEC
ENT TIME AND DATE            00080002         ST    #1,DECDATE
TE IN WORK AREA              0009000ˇ
                               00100002         XR    #14,#14
                               00110002         LH    #15,DECYEAR
CIMAL YEAR                     00111003         SLLˇ
                                 00112003         LA    #15,X'C'(,#15)
                                 00113003         STM   #14,#15,ZLCDBL
                                 00114003         CVB   #2,ZLCDBL ˇ
                                   00115003         LA    #2,1900(,#2)
                                   00116003         ST    #2,YEAR
                                   00117003         SPACE
 ˇ
                                     00200002         XR    #15,#15
                                     00210002         ICM   #15,B'0011',
GET DECIMAL JULIˇ
                                       00230002         CVB   #2,ZLCDBL
                                       00240002         ST    #2,JULIAN
                               +
                             ˇ
                                           00270002         L     #2,JUL
                                           00280002         #MKAT FIXED
      MUST CONS FIXNUM, MAY BE > 255       0ˇ
                                             00300002         LR    #2,#
                                             00310002         LA    #0,1
                                             00320002      ˇ
S                                              00330002         #BASR #1
          (CONS JULIAN NIL)                    00340002         ST    #1
1)                                             00350002         L     #2
                                                 00351003         LA
11)                                              00352003         #MKAT
            Make a new fixnum for the year       00353003         LR
         ˇ
,#11)                                              00355003         LA
,#11)                                              00356003         L
CCONS                   ˇ
#15             (CONS YEAR (CONS JULIAN NIL)         00410002         SP
                                                     00420002         #Z
                RESTORE REGISTERS AND Rˇ
                                                       00440002YEAR
                                                       00450002JULIAN
                                                      ˇ
F                   0086123F                             00470002DECYEAR
DECDATE+0,2,C'H'    0086                                 00481003DECJUL
DECDATE+2,2,C'P'        123F                             00490002    ˇ
E                                                          00500002
G                                                          00510002
E                                                          00520002
    ‘                                                        00530002{

         00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002*
             00017002* CURTIME RETURNS THE CURRENT TIME AS A LIST OF 4 I
             00018002* REPRESENTING THE CURRENT ˇ
IME IN THE     00019002* FORM OF A LIST (HOUR MINUTE SECOND /* HUNDREDTH
ND */  ).      00020002*
               00030002****************************************ˇ
**************** 00031002CURTIME  #ZBEG MINARGS=0,MAXARGS=0,NAME='CURTIM
                 00040002         #ZPDS 16                  DEFINE STACK
                 00050002         #ZSAV ARGS=0              SAVE REGISTE
                   00060002         SPACE
                   00070002         TIME  DEC                 GET CURREN
                   00080002         ST    #0,DECTIME          STORE IN W
             ˇ
                     00100002         XR    #14,#14
                     00110002         XR    #15,#15
                     0012000ˇ
OF HOURS               00130002         SLL   #15,4
                       00140002         LA    #15,X'C'(,#15)
                       00150002         STMˇ
                         00160002         CVB   #2,ZLCDBL
                         00170002         ST    #2,HOURS
                         00180002         SPACE           ˇ
                           00190002         XR    #14,#14
                           00200002         XR    #15,#15
                           00210002         IC    #15,DECTIME+1       GE
MAL # OF MINUTES             00220002         SLL   #15,4
                             00230002         LA    #15,X'C'(,#15)
                             00240002         STM   #14,#15,ZLCDBL
        ˇ
                               00260002         ST    #2,MINUTES
                               00270002         SPACE
                       +
                     ˇ
                                   00300002         IC    #15,DECTIME+2
T DECIMAL # OF SECONDS             00310002         SLL   #15,4
                                   0ˇ
                                     00330002         STM   #14,#15,ZLCD
                                     00340002         CVB   #2,ZLCDBL
                                     00350002      ˇ
                                       00360002         SPACE
                                       00370002***      XR    #14,#14
                                       00380002***      XR    #15,ˇ
                                         00390002***      IC    #15,DECT
    GET DECIMAL # OF SECONDS/100         00400002***      SLL   #15,4
                                         00410002***      LA    #15,X'C'
 ˇ
                                           00430002***      CVB   #2,ZLC
                                           00440002***      ST    #2,HUN
                ˇ
                                             00460002***      L     #2,H
                                             00470002***      #MKAT FIXE
                               ˇ
                                               00490002***      LR    #2
                                               00500002***      LA    #0
)                                             ˇ
ONS                                              00520002***      #BASR
            (CONS HUNDREDTHSOFASECOND NIL)       00530002***      ST
#11)                                             00540002    ˇ
ONDS                                               00550002         SLA
                                                   00560002         LA
T(#2)         FIXNUM SECONDS                       00570002***      L
2(,#11)         ONLY IF USING SECONDS/100...         00580002         LR
10              OTHERWISE START LIST OUT HERE.       00590002         LA
6(,#11)                                              00600002         L
ZLCCONS    ˇ
4,#15             (CONS SECONDS ...                    00620002
5,12(,#11)                                             00630002
,MINUTES                  ˇ
#2,3                                                     00650002
#1,#SFT(#2)         FIXNUM MINUTES                       00660002
#2,#12(,11)                                               00670002ˇÁ
\         L     #15,ZLCCONS
2         #BASR #14,#15             (CONS MINUTES (CONS SECONDS ...
2         ST    #15,12(,#11)
2 ˇ
002         SLA   #2,3
002         LA    #1,#SFT(#2)         FIXNUM HOURS
002         L    ˇ
40002         L     #15,ZLCCONS
50002         #BASR #14,#15             (CONS HOURS (CONS MINUTES (CONS
60002         SPACE             ˇ
0770002         #ZRET ,                   RESTORE REGISTERS AND RETURN
0780002         SPACE
0790002         DS    0D                       ˇ
 00800002DECTIME  DS    A
 00810002HOURS    DS    A
 00820002MINUTES  DS    A                                     ˇ
   00830002SECONDS  DS    A
   00840002HUNSECS  DS    A
   00850002         SPACE
     00860002         LTORG
     00870002         SPACE
     00880002         END
     0089000 2
 SUBROUTINE'                     00010000*******************************
******************************** 00011002*
                               * 00012002*ˇ
s Stark Draper Laboratory Inc.   * 00013002*                     All rig
rved.                            * 00014002*
                                 * 00015002**************ˇ
************************************ 00016002*
                                   * 00017002* DELQ: SAME AS COMMON LISP
 A B :TEST #'EQ)                   * 00018002*
                                     * 00019002* THIS ROUTINE IS NONRECU
D USES NO STACK SPACE.               * 00020002*
                                     * 00030002*************************
*******ˇ
                                         00050002DELQ     #ZBEG MINARGS=
S=3,NAME='DELQ'                          00060002         SPACE 1
                      ˇ
      LOCAL BASE REGISTER                  00080002         USING DELQ,#
                                           00090002         DROP  #15
                                     ˇ
                                             00110002         LM    #1,#
        LOAD ARGS 1, 2, 3                    00120002         LR    #15,
        PRESET RETURN VALUE                  0013000ˇ
                                               00140002         CR    #3
          IF ARG 3 NOT SUPPLIED                00150002         BNE   AR
          THEN                                 00160002         LR ˇ
             SET ARG 3 = NIL                     00170002         B
             AND GO PROCESS                      00180002ARG3SUP  DS
            ELSE                                 00190002         SPACE
  ˇ
              IF ARG3 (COUNT) IS NIL               00210002         BE
              THEN IT'S OK                         00220002         CLI
(#3),##FIXNUM ELSˇ
ERR             OTHERWISE ERROR                      00240002         IC
15,##CDR(#3)    GET FIXNUM VALUE OF ARG3 = COUNT     00250002         BN
                IF NOT POSITIVE,ˇ
                                                       00270002
,#10              INITIALIZE BASHEE POINTER            00280002LOOP
                  DO WHILE LIST IS NOT NULL    +
#2,#10              WHEN END OF LIST REACHED ˇ
  #14                 RETURN WITH VALUE IN #15             00310002
  ##TYPE(#2),##ATOM   IF LIST ENDS WITH ATOM               00320002
  #14                 DO LIKE IT ENDED IN NIL              0ˇ
    #1,##CAR(,#2)       IF ARG1 IS EQ TO CAR OF (SUB)LIST    00340002
E   NOTEQ               THEN...                              00350002
    #2,##CDR(,#2)        DROP IT FROM (SUB)LIST              00360002
CR    #4,#10               IF WE HAVE SOMETHING TO BASH        00370002
BE    NOBASH               THEN                                00380002
ST    #2,##CDR(,#4)         BASH IT (RPLACD TO SPLICE OUT CAR) 00390002
B     AFTBˇ
  LR    #15,#2                JUST CHANGE THE RETURN VALUE PTR   0041000
  DS    0H                                                       0042000
  CR    #3,#10           ˇ
    BE    LOOP                 THEN...                             00440
    BCT   #6,LOOP               DECREMENT, THEN LOOP UNLESS COUNT  00450
    BR    #14                   REACHED,ˇ
EQ    DS    0H                  ELSE THIS CAR DOESN'T MATCH          004
      LR    #4,#2               SET BASHEE POINTER                   004
      L     #2,##CDR(,#2)       CDR DOWN (SUB)LIST     ˇ
        B     LOOP                CONTINUE LOOPING                     0
        SPACE 1                                                        0
RG3ERR  #ERR  'Invalid DELQ count argument - ',(#3)                   ˚
2         SPACE 1
2         LTORG
2         END
2{
NE'                  00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002         SPACE 1
                         00017002DFLOATP  #ZBEG MINARGS=1,MAXARGS=1,NAME
P'                       00018002         SPACE 1           ˇ
                           00019002         USING DFLOATP,#15
                           00020002         SPACE 1
                           00030002         L     #2,0(,#1)
                             00040002         CLI   ##TYPE(#2),##DFLOAT
                             00050002         BNE   ZXFLON
                             00060002         DROP  #15
          ˇ
                               00080002         BR    #14
                               00090002ZXFLON   LR    #15,#10
                         º       00100002         BR    #14
                                 00110002         END
                                 00120002
E 'DIGITCP - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*****
********************************************************** 00011002*
                                                         * 00012002*ˇ
on 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
           All rights reserved.                            * 00014002*
                                                           * 00015002***
***ˇ
                                                             * 00017002*
DIGIT-CHAR-P".                                               * 00018002*
                  ˇ
**************************************************************** 0002000
  SPACE                                                          0003000
  #ZBEG MINARGS=1,MAXARGS=2,NAME=ˇ
    LR    #7,#15                                                   00050
    USING DIGITCP,#7                                               00060
    DROP  #15                                   ˇ
      SPACE                                                          000
      LM    #3,#4,0(#1)         GET ARGS 1 AND 2                     000
      CLI   ##TYPE(#3),##FIXNUM MUST BE A FIXNUM               ˇ
        BNE   ERROR1              OR ELSE ERROR                        0
        CR    #4,#13              IF OPTIONAL ARG 2 IS OMITTED         0
        BNE   ARG2SPEC            THEN                                 0
2         LA    #5,10                SET RADIX TO 10
2         B     RADIXSET            ELSE
2ARG2SPEC CLI   ##TYPE(#4),##FIXNUM  ARG 2 MUST BE A FIXNUM
2         BNEˇ
002         L     #5,##CDR(,#4)        GET VALUE OF ARG 2
002         CH    #5,=H'2'             CHECK RANGE OF RADIX
002         BL    ERROR2    ˇ
00002         CH    #5,=H'36'
10002         BH    ERROR2
20002RADIXSET DS    0H                  #5 ˇ
0230002*
0240002* GET THE NUMERIC VALUE OF THE FIXNUM.
0250002*                                                  ˇ
 00260002         L     #1,##CDR(,#3)       GET FIXNUM CONTENTS
 00270002         CL    #1,#SFW255          MUST BE 1-BYTE CHARACTER FIX
 00280002         BH    FALSE               ELSE NOT NUMERIC CHARACTER
   00290002         XR    #2,#2                                        ˇ
     00300002         IC    #2,TABLE(#1)        IF IN RANGE, LOAD WEIGHT
BLE  00310002         CR    #2,#5               IF WEIGHT OK WITHIN RADI
     00320002         BNL   FALSE               THEN...
     0ˇ
       00340002         SLA   #2,3                CONVERT WEIGHT TO INDE
       00350002         LA    #15,#SFT(#2)        LOAD FIXNUM FROM TABLE
       00360002      ˇ
         00370002         SPACE 1
         00380002FALSE    LR    #15,#10             NOT A DIGIT - RETURN
         00390002         BR    #14 ˇ
           00400002         SPACE 1
           00410002TABLE    DC    256YL1(255)         CHARACTERS INVALID
 RADICES   00420002*                               ˇ
             00430002         ORG   TABLE+C'0'
             00440002         DC    YL1(0,1,2,3,4,5,6,7,8,9)
             00450002         ORG   TABLE+C'A'-X'40'              ˇ
               00460002         DC    YL1(10,11,12,13,14,15,16,17,18)
               00470002         ORG   TABLE+C'J'-X'40'
               00480002         DC    YL1(19,20,21,22,23,24,25,26,27)
 ˇ
                 00500002         DC    YL1(28,29,30,31,32,33,34,35)
                 00510002         ORG   TABLE+C'A'
                ˇ
                   00530002         ORG   TABLE+C'J'
                   00540002         DC    YL1(19,20,21,22,23,24,25,26,27
                   00550002    ˇ
                     00560002         DC    YL1(28,29,30,31,32,33,34,35)
                     00570002         ORG
                     00580002         SPACE 1 ˇ
                       00590002ERROR1   #ERR  'Argument 1 to DIGIT-CHAR-
fixnum - ',(#3)        00600002         SPACE 1
                       00610002ERROR2   #ERR  'Argument 2 to ˇ
a valid radix - ',(#4), X00620002               ' (must be a fixnum betw
d 36)'                   00630002         SPACE 1
                         00640002         LTORG
                           00650002         END
                           00660002{
OWNCASE - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

                                                         * 00017002* THI
ING-DOWNCASE.                                            * 00018002*
              ˇ
************************************************************ 00020002DOW
BEG MINARGS=1,MAXARGS=1,NAME='STRING-DOWNCASE'               00030002
PDS 16                  DEFINˇ
#ZSAV ,                   SAVE REGISTERS                       00050002
SPACE                                                          00060002
L     #3,0(,#11)          LOAD ARG1         ˇ
  CLI   ##TYPE(#3),##STRING IF ARGUMENT IS A STRING              0008000
  BE    ARG1OK              THEN OK                              0009000
  CLI   ##TYPE(#3),##SYMBOL IF ARGUMENT IS A SYMBOL        ˇ
    BNE   ERROR1              THEN                                 00110
    L     #3,##PNAME(,#3)      TAKE THE PRINT NAME, ELSE ERROR     00120
K   DS    0H                                                       00130
      XR    #7,#7               CLEAR INSERT REGISTER                001
      ST    #3,0(,#11)          STORE BACK ON STACK FOR FUTURE USE   001
      ICM   #7,7,1(#3)          GET LENGTH OF STRING                 001
      BZ ˇ
        LA    #14,##VECDAT(,#3)   POINT TO TEXT OF STRING              0
        LR    #15,#7              GET LENGTH                           0
        LA    #0,256    ˇ
2TRTLOOP  DS    0H                  LOOP TO SCAN STRING
2         CR    #15,#0
2         BNH   SHORTTRT               ˇ
002         TRT   0(256,#14),TRTTABLE SCAN FOR UPPER CASE CHARACTERS
002         BNZ   COPYIT              IF WE FOUND ONE, WE HAVE TO COPY
002         AR    #14,#0              ELSE BUMP UP POIˇ
60002         SR    #15,#0              BUMP DOWN LENGTH
70002         B     TRTLOOP             AND CONTINUE SCANNING.
80002SHORTTRT DS    0H                                               +
0290002         BCTR  #15,0               REDUCE LENGTH FOR EXECUTEˇ
 00300002         EX    #15,EXTRT           SCAN FOR LOWER CASE CHARACTE
 00310002         BZ    RETSELF             IF NO BAD CHARS, RETURN SELF
 00320002COPYIT   DS    0H                  UPPERCASE DATA, HAVE TO COPY
 0ˇ
   00340002         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NE
   00350002         L     #15,ZLCVSS          GET ADDRESS OF ZILVSS
   00360002      ˇ
     00370002         #BASR #14,#15             CALL ZILVSS TO CREATE A
     00380002         LTR   #4,#15              IF STRING BUILD FAILED
     00390002         BZ    ERROˇ
       00400002         L     #1,0(,#11)          GET POINTER TO ORIGINA
       00410002         LA    #0,##VECDAT(,#1)    POINT TO STRING TEXT
       00420002         LA    #14,##VECDAT(,#4)ˇ
G TEXT   00430002         LR    #1,#7               GET LENGTH OF STRING
 MOVE    00440002         LR    #15,#7
         00450002         MVCL  #14,#0              MOVE TEXT ˇ
TO NEW     00460002         LA    #14,##VECDAT(,#4)   POINT TO TEXT OF S
           00470002         LR    #15,#7              GET LENGTH
           00480002         LA    #0,256              SET UP CONSTANT 25
             00490002TRLOOP   DS    0H                  LOOP TO TRANSLAT
             00500002         CR    #15,#0
             00510002         BL    SHORTTR
            ˇ
E              00530002         AR    #14,#0              BUMP UP POINTE
T              00540002         SR    #15,#0              BUMP DOWN LENG
               00550002    ˇ
                 00560002         B     TRLOOP              AND CONTINUE
TING.            00570002SHORTTR  DS    0H
                 00580002         BCTR  #1ˇ
EXECUTE            00590002         EX    #15,EXTR            TRANSLATE
 CASE              00600002DONE     DS    0H                  ALL FINISH
                   00610002         LR    #15,#4         ˇ
UILT STRING          00620002         B     RETURN              RETURN T
IN #15               00630002         SPACE 1
                     00640002RETSELF  DS    0H                  NULL STR
R NO UPPERCASE CHARS)  00650002         LR    #15,#3              RETURN
ING PASSED             00660002RETURN   DS    0H
                       00670002         SPACE 1
                        00680002ˇÁ
  RESTORE REGISTERS AND RETURN         00690002         SPACE 1
                                       00700002EXTRT    TRT   0(*-*,#14)
E EXECUTED: SCAN FOR UPPERCASE CHARS   00710002Eˇ
LE  EXECUTED: TRANSLATE TO LOWERCASE     00720002         SPACE 1
                                         00730002TRTTABLE DC    256X'00'
    TABLE TO SCAN FOR UPPERCASE CHARS    00740002         ORG  ˇ
                                           00750002         DC    9XL1'F
                                           00760002         ORG   TRTTAB
                                           00770002         DC    9XL1'F
                                             00780002         ORG   TRTT
'                                            00790002         DC    8XL1
                                             00800002         ORG   ,
             ˇ
                                               00820002TRTABLE  DC    25
RTABLE)   TABLE TO TRANSLATE TO LOWERCASE      00830002         ORG   TR
A'                          ˇ
848586878889'                                    00850002         ORG
C'J'                                             00860002         DC
949596979899'                              ˇ
E+C'S'                                             00880002         DC
A4A5A6A7A8A9'                                      00890002         ORG
                                                   0090000ˇ
                                                     00910002ERROR1   #E
ument to STRING-DOWNCASE not a string - ',(#3)       00920002         SP
                                                     00930002ERROR2   #E
EFIX=NO,          NOT ENUF ROOM                       X00940002
IL4010 STRING-DOWNCASE: Not enough vector/string spaceX00950002
o build string.'                                       00960002
        V                                                00970002
                                                         00980002
                                                         00990002

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002*
     * 00017002* EBCDIC TAKES TWO ARGUMENTS, OF WHICH THE SECOND IS OPTI
     * 00018002* THE FIRST IS A FIXNUM TO ˇ
OL.    * 00019002* THE SECOND SPECIFIES WHETHER (NON-NIL) OR NOT (NIL) T
 THE   * 00020002*  GENERATED SYMBOL ON THE OBJECT LIST (NOTE DEFAULT IS
.      * 00030002* THIS ROUTINE IS NOT RECURSIVE AND USESˇ
.        * 00040002*
         * 00050002* COMPARE MACLISP "ASCII".
         * 00060002*
           * 00070002***************************************************
************ 00080002         SPACE
             00090002EBCDIC   #ZBEG MINARGS=1,MAXARGS=2,NAME='EBCDIC'
       ˇ
               00110002         #ZSAV ARGS=2              SAVE REGISTERS
               00120002         SPACE
               0013000ˇ
BCDIC)           00140002         CLI   ##TYPE(#2),##FIXNUM MUST BE AN A
                 00150002         BNE   ERROR1              OR ELSE
                 00160002*           ˇ
                   00170002* GET THE NUMERIC VALUE OF THE FIXNUM.
                   00180002*
                   00190002         L     #15,##CDR(ˇ
NTS                  00200002         CL    #15,#SFW255         MUST BE
HARACTER FIXNUM      00210002         BNH   CHAROK
                     00220002         #ERR  1,'Invalid argument to ˇ
stituting null - ',   X00230002               (#2)
                       00240002         XR    #15,#15             IF BAD
 TO NULL               00250002CHAROK   DS    0H
  ˇ
ORK AREA                 00270002*
                         00280002* BUILD A ONE-CHARACTER ATOM FROM IT.
                 +
               ˇ
TH = 1                       00310002         LA    #1,EBWORK
 CHARACTER TO BE ATOMIZED    00320002         L     #2,4(,#11)
RN FLAG = ARG 2 TO EBCDIC    0ˇ
RMAT FLAG = NIL                00340002         L     #15,ZLCABLD
DRESS OF ZILABLD               00350002         LA    #4,20(,#11)
RRENT STACK POINTER FOR CONS   00360002      ˇ
 ZILABLD TO MAKE AN ATOM FROM IT 00370002*
URNS ATOM IN #15)                00380002         SPACE 1
                                 00390002         #ZRET ,   ˇ
STORE REGISTERS AND RETURN         00400002         SPACE 1
                                   00410002ERROR1   DS    0H
                                   00420002         #ERR  'Argument to E
not a fixnum - ',(#2)                00430002         SPACE 1
                                     00440002EBWORK   DS    C
                                     00450002         SPACE 1
          E                            00460002         LTORG
                                       00470002         END
                                       00480002{
    TITLE 'ECHO - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 ECHO SYNTAX IS AS FOLLOWS:                                          * 0
                          ˇ
2* (ECHO FILE1 &OPTIONAL FILE2 EVEN-IF-BOTH-FILES-ARE-TERMINAL-P)      *
2*                                                                     *
2* FILE1 MUST BE AN INPUT FILE.          ˇ
002* FILE2 MUST BE AN OUTPUT FILE.
002*
002* IF FILE2 IS OMITTED, ECHO MODE IS TURNED OFF FOR FIˇ
70002* OTHERWISE, FILE2 BECOMES THE ECHO FILE FOR FILE1.
80002*
90002* IF THE THIRD ARG IS SUPPLIED AND NON-NIL, ECHOING IS ACTIVE EVENˇ
0100002* IF BOTH FILES HAPPEN TO BE ALLOCATED TO THE TERMINAL.  THE DEFA
0110002* IS FOR ECHOING TO BE DISABLED IF THE TERMINAL IS IN USE FOR BOT
0120002*
013000ˇ
 00140002         SPACE 1
 00150002ECHO     #ZBEG MINARGS=1,MAXARGS=3,NAME='ECHO'
 00160002         #ZPˇ
   00170002         #ZSAV ,                   SAVE REGISTERS
   00180002         SPACE 1
   00190002         #IFIL 1         ˇ
     00200002         LR    #6,#7               #6 = ADDRESS OF INPUT FI
     00210002         SPACE 1
     00220002         XR    #5,#5               CLEˇ
LOCK   00230002         C     #13,4(,#11)         IF ARG 2 WAS NOT SUPPL
       00240002         BE    NOFILE2             THEN GO TO TURN ECHOIN
       00250002         SPACE 1                                   ˇ
         00260002         #OFIL 2                   ARG 2 = OUTPUT FILE
         00270002         LR    #5,#7               #5 = ADDRESS OF OUTP
BLOCK    00280002         SPACE 1
 +

             00310002***************************************************
************ 00320002*
           * 0ˇ
F THE        * 00340002* CURRENT ECHOING MODE.
             * 00350002*
             * 00360002******ˇ
**************** 00370002         SPACE 1
                 00380002         DROP  #7
                 00390002         USING ZLFIˇ
FILE BLOCK         00400002         SPACE 1
                   00410002         ICM   #4,15,ZLFECHO       IF FILE1 I
TLY BEING ECHOED   00420002         BZ    NOECHO1          ˇ
                     00430002         LH    #0,ZLFECCNT-ZLFILBLK(,#4)
                     00440002         BCTR  #0,0                 DECREME
FILE'S REFERENCE CT  00450002         STH   #0,ZLFECCNT-ZLFILBLK(,#4)
                       00460002*                                   (NOTE
BECAUSE NO FILE2)      00470002         ST    #5,ZLFECHO           CLEAR
 ECHO POINTER          00480002NOECHO1  DS    0H
         ˇ
 FILE2 TO ECHO TO...     00500002         BZ    NOECHO2             THEN
                         00510002         ST    #5,ZLFECHO           SET
 ECHO POINTER           ˇ
 ECHO FILE'S REFERENCE CT  00530002         AH    #0,ZLFECCNT-ZLFILBLK(,
                           00540002         STH   #0,ZLFECCNT-ZLFILBLK(,
                           00550002    ˇ
IS NOT SUPPLIED              00560002         BE    NOETIO
                             00570002         C     #10,8(,#11)
S NIL                        00580002         BNE   ETˇ
N                              00590002NOETIO   NI    ZLFFLAG2-ZLFILBLK(
ZLFETIO  TURN OFF ETIO FLAG    00600002         B     NOECHO2
                               00610002ETIO     OI    ZLFFLAG2-ZLFILBˇ
FETIO  TURN ON ETIO FLAG         00620002NOECHO2  DS    0H
                                 00630002         SPACE 1
                                 00640002         LR    #15,#10
RN Nˇ
                                   00660002         #ZRET ,
STORE REGISTERS AND RETURN         00670002         SPACE 1
                                    00680002ˇÁ
                                                   00690002         SPAC
                                                   00700002         END
                                                   00710002

0010000*****************************************************************
0020000*
0030000*ˇ
 00040000*                     All rights reserved.
 00050000*
 00060000**************ˇ
** 00070000*
   00080000*************************************************************
** 00090000*                          ˇ
   * 00100000* CLtL, p. 264:
   * 00110000*
   * 00120000* "The predicate ENDP is the recommendedˇ
of a * 00130000* list.  It is false of conses, true of NIL, and an error
     * 00140000* other arguments."
     * 00150000*                                                    ˇ
       * 00160000*******************************************************
******** 00170000*
         00180000         SPACE 1
   ˇ
           00200000         SPACE 1
           00210000         USING ENDP,#15
           0022000ˇ
             00230000         L     #2,0(,#1)           Get argument 1
             00240000         CR    #2,#10              If equal to NIL
             00250000         BE ˇ
               00260000         TM    ##TYPE(#2),##ATOM   If atomic (not
               00270000         BO    ERROR               then error
               00280000         DROP  #15       ˇ
                 00290000FALSE    LR    #15,#10             Else return
                 00300000         BR    #14
                 00310000TRUE     LR    #15,#8                 ˇ
                   00320000         BR    #14
                   00330000         SPACE 1
                   00340000ERROR    DS    0H
                     00350000         LR    #3,#15
                     00360000         USING ENDP,#3
                     00370000         #ERR  'Argument to ENDP not a list
)            +
           ›             00390000         END
                         00400000{
- BUILT-IN ZIL 1.3 SUBROUTINE'                       00010000***********
**************************************************** 00011002*
                                                   * 00012002*ˇ
 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
     All rights reserved.                            * 00014002*
                                                     * 00015002*********
******************************************************** 00016002
1                                                        00017002EQ
MINARGS=2,MAXARGS=2,NAME='EQ'                            00018002
1           ˇ
G EQ,#15                                                   00020002
E 1                                                        00030002
  #2,#3,0(#1)              ˇ
    #2,#3                                                    00050002
E   ZXEQN                                                    00060002
OP  #15                                   ˇ
LR    #15,#8                                                   00080002
BR    #14                                                      00090002Z
LR    #15,#10                                            º       0010000
  BR    #14                                                      0011000
  END                                                            0012000
∞
           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002*
             * 00017002*  EQL IS LIKE EQUALP, BUT THE TYPES MUST MATCH.
             * 00018002*                          ˇ
               * 00019002***********************************************
**************** 00020002*
               * 00030002* NOTE: SYMBOLS ARE EQL ONLY IF THEY AREˇ
G TO COMMON LISP * 00040002*       EQL.  IF SYMBOLS ARE TO BE CONSIDERED
THEIR PNAMES ARE * 00050002*       STRING-EQUAL, THEN DECOMMENT THE LINE
 *$$$$$$$.       * 00060002*
ˇ
L, INCLUDING CASE. * 00080002*       FOR TRUE COMMON LISP THE CODE THAT
 STRINGS SHOULD BE * 00090002*       REMOVED, SINCE STRINGS ARE NOT EQL
HEY ARE EQ.    ˇ
                     * 00110002*       THE PHILOSOPHY IS THAT IN ZIL PRI
3, STRINGS ARE       * 00120002*       UNMODIFIABLE OBJECTS, AND THEREFO
E COMPARED BY EQL.   * 0013000ˇ
 VALID TEST.           * 00140002*
                       * 00150002***************************************
************************ 00160002*           ˇ
                         * 00170002* THIS ROUTINE IS NONRECURSIVE AND US
ACK SPACE.               * 00180002*
                         * 00190002*************************ˇ
**************************** 00200002EQL      #ZBEG MINARGS=2,MAXARGS=2,
L'                           00210002         SPACE
                             00220002         USING EQL,#15
                               00230002         SPACE
                               00240002         LM    #1,#2,0(#1)
RGUMENTS                       00250002         CR    #1,#2
S ARE "EQ"ˇ
 RETURN T                        00270002*
                                 00280002* CHECK THAT THE TYPES MATCH
                         +
                       ˇ
#2)                                  00310002         BNE   FALSE
IF TYPES DO NOT MATCH, NOT EQL.      00320002*
                                     0ˇ
                                       00340002*
                                       00350002         CLI   ##TYPE(#1)
M FIXNUM COMPARE                       00360002      ˇ
                                         00370002         CLI   ##TYPE(#
OAT SINGLE-FLOAT COMPARE                 00380002         BE    COMPSFLO
                                         00390002*                  ˇ
                                           00400002*--- DELETE THIS CODE
E COMMON LISPNESS                          00410002*
                                           00420002         CLI   ##TYPE
TRIˇ
                                             00440002*$$$$$$$ CLI   ##TY
#SYMBOL SYMBOL COMPARE                       00450002*$$$$$$$ BE    COMP
                  ˇ
                                               00470002*--- END OF CODE
LETED                                          00480002*
                                 ˇ
1),##BIGNUM BIGNUM COMPARE LIKE STRING COMPARE   00500002         BE
                                                 00510002         CLI
1),##DFLOAT DOUBLE-FLOAT COMPARE                ˇ
LO                                                 00530002FALSE    DS
              ALL OTHER TYPES ARE EQL ONLY IF EQ   00540002         LR
0             THEREFORE RETURN NIL (FALSE)         00550002    ˇ
                                                     00560002         SP
                                                     00570002         DR
                NO BASE REG ALLOWED AFTER THIS POINT 00580002         EJ
                                                       00590002COMPFIX
                  ARG 1 IS FIXED OR LOGICAL            00600002
                                                       00610002
,##CDR(,#1)  ˇ
#15,#10             PRESET RETURN VALUE TO NIL           00630002
#0,##CDR(,#2)       COMPARE FIXED VALUE 2                00640002
#14                 RETURN Nˇ
  0H                  ALL OTHER TYPES ARE EQL ONLY IF EQ   00660002
  #15,#8              ELSE RETURN T (TRUE)                 00670002
  #14                                                       00680002ˇÁ

002COMPSFLO DS    0H                  ARG 1 IS SINGLE FLOAT
002         SPACE
002 ˇ
20002         LR    #15,#10             PRESET RETURN VALUE TO NIL
30002         CE    #F0,##CDR(,#2)      COMPARE FLOAT VALUE 2
40002         BNER ˇ
0750002         LR    #15,#8              ELSE RETURN T (TRUE)
0760002         BR    #14
0770002         EJECT             ˇ
 00780002COMPDFLO DS    0H                  ARG 1 IS DOUBLE FLOAT
 00790002         SPACE
 00800002         LD    #F0,8(,#1)          GET Fˇ
   00810002         LR    #15,#10             PRESET RETURN VALUE TO NIL
   00820002         CD    #F0,8(,#2)          COMPARE FLOAT VALUE 2
   00830002         BNER  #14                 RETURN NIL IF FALSˇ
     00840002         LR    #15,#8              ELSE RETURN T (TRUE)
     00850002         BR    #14
     00860002         EJECT

       00880002*$$$$$$$ L     #1,##PNAME(,#1)     GET SYMBOL PRINT NAME
       00890002*$$$$$$$ L     #2,##PNAME(,#2)     GET SYMBOL PRINT NAME
       0090000ˇ
MPARE    00910002         SPACE 2
         00920002*
         00930002* NOTE: DELEˇ
           00940002*
           00950002COMPSTR  DS    0H                  STRING-TO-STRING C
           00960002COMPBIG  DS    0H        ˇ
             00970002         SPACE 1
             00980002         L     #5,0(,#1)           GET STRING HEADE
             00990002         LR    #15,#10             PREˇ
 NIL           01000002         CL    #5,0(,#2)           TYPE AND LENGT
ATCH           01010002         BNER  #14                 RETURN NIL (FA
THEY DON'T     01020002         SLL   #5,8                ERASE TYPE BIT
 HEADER          01030002         SRL   #5,8                GET STRING L
                 01040002         LA    #4,##VECDAT(,#1)    POINT TO STR
 1               01050002         LA    #6,##VECDAT(,#2)    POINT TO STR
 2       +
2      ˇ
                     01080002         BNER  #14                 RETURN N
E) IF NOT EQUAL      01090002         LR    #15,#8              ELSE RET
RUE)                 0ˇ
                       01110002         SPACE
                       01120002         LTORG
                       01130002      <    END
                         01140002{
NP - BUILT-IN ZIL 1.3 SUBROUTINE'                    00010000***********
**************************************************** 00011002*
                                                   * 00012002*ˇ
 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
     All rights reserved.                            * 00014002*
                                                     * 00015002*********
******************************************************** 00016002*
                                                       * 00017002* EVENP
NE ARGUMENT - AN INTEGER                               * 00018002*
            ˇ
********************************************************** 00020002EVENP
G MINARGS=1,MAXARGS=1,NAME='EVENP'                         00030002
E                          ˇ
ING EVENP,#15                                                00050002
ACE                                                          00060002
    #2,0(,#1)           LOAD FIRST (AND ONˇ
TM    ##TYPE(#2),##INT    MUST BE INTEGER (FIXNUM OR BIGNUM)   00080002
BNO   ERROR                                                    00090002
TM    ##CDR+3(#2),X'01'   TEST FOR EVEN                  ˇ
  BO    FALSE               FALSE IF ODD                         0011000
  DS    0H                                                       0012000
  LR    #15,#8              TRUE... SET RESULT TO T              0013000
    BR    #14                                                      00140
    DS    0H                                                       00150
    LR    #15,#10             FALSE... SET RESULT TO NIL           00160
    BR ˇ
      SPACE                                                          001
OR    DS    0H                  NOT A NUMERIC ATOM                   001
      LR    #3,#15    ˇ
        USING EVENP,#3                                                 0
        DROP  #15                                                      0
        #ERR  'Argument to EVENP not ˇ
2         SPACE 1
2         LTORG
2         END                                       ∆
002
                     00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002* EXIT TAKES ONE (OPTIONAL) ARGUMENT -
ODE SPEC.              * 00018002*                          ˇ
                         * 00019002* IT GETS THE RETURN ADDRESS TO "ZILM
E FROM THE BOTTOM OF     * 00020002* THE PUSH-DOWN STACK AND RETURNS TO
IF THE OPTIONAL OPERAND  * 00030002* IS SPECIFIED (NON-NIL) IT IS ASSUME
E A FIXNUM AND THE VALUE   * 00040002* IS PICKED UP THEREFROM AND INSERT
THE RETURN CODE FIELD.     * 00050002*
                           * 00060002***********************************
**********ˇ
EXIT'                          00080002         SPACE
                               00090002         L     #1,0(,#1)
GUMENT 1                 ˇ
OT NIL                           00110002         BE    NOSETRC-EXIT(,#1
                                 00120002         CR    #1,#13
T OMITTED                        0013000ˇ
 THEN...                           00140002*
                                   00150002* DON'T BOTHER CHECKING TYPE
TA RETURN ANYHOW                   00160002*           ˇ
                                     00170002         L     #1,##CDR(,#1
 GET FIXNUM VALUE ITSELF             00180002         ST    #1,ZLCRETCD
 STORE INTO RETURN CODE VALUE        00190002NOSETRC  DS    0H        ˇ
  OTHERWISE USE RETURN CODE AS IS      00200002         LR    #15,#10
  SET RETURN VALUE (IRRELEVANT)        00210002         L     #1,ZLCPDAD
  GET BOTTOM-OF-STACK ADDRESS          00220002         LM    #11,#12,0(
  RESˇ
    RESTORE RETURN REGISTER              00240002         BR    #14
    RETURN TO MAINLINE                   00250002         SPACE
                    ˇ
                                           00270002         SPACE
                                           00280002         END
                                   ª         00290002
        TITLE 'FIRSTN - BUILT-IN ZIL 1.3 SUBROUTINE'                   0
********************************************************************** 0
                                                                     * 0
ˇ
2*                     All rights reserved.                            *
2*                                                                     *
2**************ˇ
002*
002* (FIRSTN 3 '(A B C D E))  ==> (A B C)
002*                          ˇ
19002*******************************************************************
20002*
30002* Note: This implementation of FIRSTN exˇ
0040002*       does not work for negative arguments, and also does not w
0050002*       exactly as the LISPM version does, in that it does not pa
0060002*       the resultant list out with NILs.  It works tˇ
 00070002*       PDP10/Franz definition in Macsyma's UTILS file does.
 00080002*
 00090002***************************************************************
** 00100002         SPACE 1
   00110002FIRSTN   #ZBEG MINARGS=2,MAXARGS=2,NAME='FIRSTN'
   00120002         SPACE 1
   0013000ˇ
     00140002         #ZSAV ARGS=2
     00150002         SPACE 1
     00160002         LM ˇ
       00170002         SPACE 1
       00180002         CLI   ##TYPE(#3),##FIXNUM ARG 1 MUST BE A FIXNUM
       00190002         BNE   ERROR1    ˇ
         00200002         L     #3,##CDR(,#3)       LOAD FIXNUM VALUE OF
         00210002         SPACE 1
         00220002         CR    #4,#10              IF ˇ
           00230002         BE    RETNIL              THEN RETURN NIL
           00240002         LTR   #3,#3               CHECK SIGN OF COUN
           00250002         BZ    RETNIL              IF ZERO, RETURN ˇ
             00260002         BM    ERROR1              IF NEGATIVE, WEL
             00270002ARG1NN   DS    0H                  IF POSITIVE, PRO
             00280002         LR    #6,#10              INITIALIZE RESUL
     +
TERˇ
                 00310002LOOP     DS    0H
                 00320002         TM    ##TYPE(#4),##ATOM   IF (SUB)LIST
IST              0ˇ
                   00340002INLOOP   DS    0H
                   00350002         L     #1,##CAR(,#4)       GET CAR OF
ST                 00360002      ˇ
                     00370002         L     #15,ZLCCONS         CALL CON
LD A PIECE OF THE    00380002         #BASR #14,#15              RESULT
                     00390002         CR    #6,#ˇ
ET,                    00400002         BNE   BASHEND             THEN..
                       00410002         LR    #6,#15               START
FROM THIS PIECE        00420002         ST    #6,20(,#11)      ˇ
CK FOR POSSIBLE GC'ING   00430002         B     AFTBASH             ELSE
                         00440002BASHEND  ST    #15,##CDR(,#5)       BAS
ONS OF RESULT LIST       00450002AFTBASH  LR    #5,#15              SET
R TO LAST CONS IN RESULT   00460002         BCT   #3,CONTINUE         DE
COUNT                      00470002RETIT    LR    #15,#6              IF
ETURN RESULT LIST SO FAR   00480002         B     RETURN              EL
             ˇ
                             00500002         L     #4,##CDR(,#4)
LIST                         00510002         CR    #4,#10
OT REACHED YET              ˇ
ONTINUE                        00530002         LR    #15,#6
ETURN THE RESULT LIST          00540002         B     RETURN
                               00550002    ˇ
                                 00560002RETNIL   LR    #15,#10
RN NIL                           00570002         SPACE 1
                                 00580002RETURN   DS    0Hˇ
5 CONTAINS RETURN VALUE            00590002         SPACE 1
                                   00600002         #ZRET ,
TURN TO CALLER                     00610002         SPACE 3
                                     00620002ERROR1   DS    0H
ERROR IN ARGUMENT                    00630002         #ERR  'Argument 1
N not a nonnegative fixnum - ',     X00640002               0(#11)
        ˇ
                                       00660002ERROR2   DS    0H
  ERROR IN ARGUMENT                    00670002         #ERR  'Argument
STN not a proper list -  ',            X00680002ˇÁ
#11)                                                   00690002
                                                       00700002
                                                       00710002 )
                                                         00720002

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002         SPACE 1
       00017002FIXNUMP  #ZBEG MINARGS=1,MAXARGS=1,NAME='FIXNUMP'
       00018002         SPACE 1           ˇ
         00019002         USING FIXNUMP,#15
         00020002         SPACE 1
         00030002         L     #2,0(,#1)                ˇ
           00040002         CLI   ##TYPE(#2),##FIXNUM
           00050002         BNE   ZXFIXN
           00060002         DROP  #15
             00070002         LR    #15,#8
             00080002         BR    #14
             00090002ZXFIXN   LR    #15,#10
       º       00100002         BR    #14
               00110002         END
               00120002
N ZIL 1.3 SUBROUTINE'                    00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00017002* FLOAT TAKES ONE R
ARGUMENT, A NUMERIC ATOM, AND ONE          * 00018002* OPTIONAL ARGUMENT
ˇ
                                             * 00020002*
                                             * 00030002*****************
***************ˇ
1,MAXARGS=2,NAME='FLOAT'                         00050002         #ZPDS
            DEFINE STACK SIZE                    00060002         #ZSAV
            SAVE REGISTERS    ˇ
                                                   00080002*************
************************************************** 00090002*
                                             ˇ
ARE AS FOLLOWS:                                    * 00110002*
                                                   * 00120002* 1. ARG IN
          - CONVERT TO FLOAT AND RETURN.           * 0013000ˇ
            - RETURN FLONUM ITSELF.                  * 00140002*
                                                     * 00150002* ANY OTH
 CAUSE AN ERROR.                                     * 00160002*
                                                       * 00170002*******
******************************************************** 00180002
                                                         00190002
#15,0(,#11ˇ
                                                           00210002* CHE
OF ARG 1                                                   00220002*
                         ˇ
I   ##TYPE(#15),##FIXNUM                                     00240002
    CONVERT             IF FIXP, CONVERT IT AND RETURN       00250002
I   ##TYPE(#15),##SFLOAT                ˇ
BE    SCONVERT            IF SINGLE-FLOAT, MAYBE CONVERT       00270002
CLI   ##TYPE(#15),##DFLOAT                                     00280002
BE    DCONVERT            IF DOUBLE-FLOAT, MAYBE CONVER+
  CLI   ##TYPE(#15),##BIGNUM                         ˇ
    BE    BCONVERT            IF BIGP, CONVERT IT AND RETURN       00310
    B     ERROR1                                                   00320
    SPACE 1                                                        0ˇ
VERT  DS    0H                  MAKE A FLONUM FROM FIXED OR LOGICAL  003
      SPACE 1                                                        003
      L     #1,4(,#11)          Get argument 2                       003
   ˇ
        BE    CID                 then convert integer to double float 0
        CR    #1,#10              If arg 2 NIL                         0
        BE    CID ˇ
2         CLI   ##TYPE(#1),##SFLOAT If arg 2 single-float
2         BE    CIS                 then convert integer to single float
2         CLI   ##TYPE(#1),##DFLOˇ
002         BE    CID                 then convert integer to double flo
002         B     ERROR2              Else error
002         SPACE 1                             ˇ
60002CIS      DS    0H                  Convert fixnum to single float
70002         SPACE 1
80002         L     #0,##CDR(,#15)      GET FIXED VALUE        ˇ
0490002         #BAS  #14,FIX2FLO         CONVERT FROM FIXED TO FLOAT
0500002         STE   #F0,ZLCWORK         STORE IT
0510002         L     #2,ZLCWORK          PICK IT UP
 00520002         LA    #0,20(,#11)         SET STACK LOCATION FOR CONS
 00530002         #MKAT FLOAT               MAKE A FLONUM ATOM
 00540002         B     RETURN              AND RETURN WITH IT
 00550002    ˇ
   00560002CID      DS    0H                  Convert fixnum to double f
   00570002         SPACE 1
   00580002         L     #0ˇ
     00590002         #BAS  #14,FIX2FLO         Convert from fixed to fl
     00600002         LA    #0,20(,#11)         Set stack pointer for CO
     00610002         B     CDFLOAT        ˇ
       00620002         SPACE 1
       00630002SCONVERT DS    0H                  Single-float
       00640002         SPACE 1                           ˇ
         00650002         L     #1,4(,#11)          Get argument 2
         00660002         CR    #1,#13              If arg 2 unsupplied
         00670002         BE    RETURN              then return single f
s is       00680002ˇÁ
                         00690002         BE    RETURN              then
single float as is       00700002         CLI   ##TYPE(#1),##SFLOAT If a
gle-float                00710002 ˇ
n single float as is       00720002         CLI   ##TYPE(#1),##DFLOAT If
ouble-float                00730002         BE    CSD                 th
rt single to double        00740002         B    ˇ
or                           00750002         SPACE 1
                             00760002DCONVERT DS    0H
loat                         00770002         SPACE 1           ˇ
                               00780002         L     #1,4(,#11)
gument 2                       00790002         CR    #1,#13
 2 unsupplied                  00800002         BE    RETURN

rg 2 NIL                         00820002         BE    RETURN
 return double float as is       00830002         CLI   ##TYPE(#1),##SFL
rg 2 single-flˇ
en convert double to single        00850002         CLI   ##TYPE(#1),##D
 arg 2 double-float                00860002         BE    RETURN
en return double float as is ˇ
Else error                           00880002         EJECT
                                     00890002CSD      DS    0H
Convert single to double             0090000ˇ
                                       00910002         SDR   #F0,#F0
  Clear FPR                            00920002         LE    #F0,##CDR(
  Load single-float from arg 1         00930002         LA ˇ
    Set stack location for CONS          00940002         SPACE 1
                                         00950002CDFLOAT  DS    0H
    #F0 = value, build a double-float    00960002         SPACE 1
                                           00970002         L     #15,ZL
      Get address of ZILMDF                00980002         #BASR #14,#1
      Call ZILMDF to build double float    00990002         B     RETURN
      Retˇ
                                             01010002CDS      DS    0H
        Convert double to single             01020002         SPACE 1
                        ˇ
)         Load double-float from arg 1         01040002         LRER  #F
          Convert to single while rounding     01050002         STE   #F
K         Store in temp area           +
RK          Load into GPR            ˇ
              Cons up a single-float               01080002         B
              Return with it                       01090002         EJEC
                                                   0ˇ
                Bignum-to-float conversion           01110002         SP
                                                     01120002         L
(,#11)          Get argument 2                       01130002      ˇ
,#13              If arg 2 unsupplied                  01140002
D                 then convert integer to double float 01150002
,#10              If arg 2 NIL                         01160002
D ˇ
##TYPE(#1),##SFLOAT If arg 2 single-float                01180002
CBS                 then convert integer to single float 01190002
##TYPE(#1),##DFLOˇ
  CBD                 then convert integer to double float 01210002
  ERROR2              Else error                           01220002
E 1                             ˇ
    0H                  Convert bignum to single float       01240002
ACE 1                                                        01250002
    #5,#15              Get address of bignum tˇ
L     #15,ZLCCVBF         Get address of ZILCVBF               01270002
#BASR #14,#15             Call ZILCVBF to convert to float     01280002
STE   #F0,ZLCWORK         Store flonum value result           ˇ
  LA    #0,20(,#11)         SET STACK LOCATION FOR CONS          0130000
  L     #2,ZLCWORK          Get flonum value in register         0131000
  #MKAT FLOAT               Make a single-precision flonum       0132000
    B     RETURN                                                   01330
    SPACE 1                                                        01340
    DS    0H                  Convert bignum to double float       01350
    LCR   #5ˇ
      L     #15,ZLCCVBF         Get address of ZILCVBF               013
      #BASR #14,#15             Call ZILCVBF to convert to float     013
      L     #15,ZLCMDF     ˇ
        LA    #0,20(,#11)         SET STACK LOCATION FOR CONS          0
        #BASR #14,#15             Call ZILMDF to make a double float   0
        B     RETURN                      ˇ
2         SPACE 1
2RETURN   DS    0H                  RETURN WITH NEW ATOM
2         SPACE                                          
002ˇÁ
         01460002         EJECT
         01470002         COPY  FIX2FLO             FIXED TO FLOAT CONVE
UTINE    01480002 ˇ
           01490002ERROR1   DS    0H                  NOT A NUMERIC ATOM
           01500002         #ERR  'Argument 1 to FLOAT not a number - ',
           01510002         SPACEˇ
             01520002ERROR2   DS    0H                  NOT A NUMERIC AT
             01530002         #ERR  'Argument 2 to FLOAT not a flonum -
             01540002         SPACE 1           T
               01550002         LTORG
               01560002         END
               01570002
IN ZIL 1.3 SUBROUTINE'                   00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002         SPACE 1
                                             00017002FLOATP   #ZBEG MINA
XARGS=1,NAME='FLOATP'                        00018002         SPACE 1
ˇ
                                               00020002         SPACE 1
                                               00030002         L     #2
               ˇ
2),##FLONUM                                      00050002         BNO
                                                 00060002         DROP
                              ˇ
                                                   00080002         BR
                                                   00090002ZXFLON   LR
0                                            º       00100002         BR
                                                     00110002         EN
                                                     00120002

0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002         SPACE 1
   00017002FUNARGP #ZBEG  MINARGS=1,MAXARGS=1,NAME='FUNARGP'
   00018002         SPACE 1           ˇ
     00019002         USING FUNARGP,#15
     00020002         SPACE 1
     00030002         L     #2,0(,#1)                ˇ
       00040002         CLI   ##TYPE(#2),##FUNARG
       00050002         BNE   ZXFUNN
       00060002         DROP  #15                                   ˇ
         00070002         LR    #15,#8
         00080002         BR    #14
         00090002ZXFUNN   LR    #15,#10
   º       00100002         BR    #14
           00110002         END
           00120002
IL 1.3 SUBROUTINE'                   00010000***************************
************************************ 00011002*
                                   * 00012002*ˇ
arles Stark Draper Laboratory Inc.   * 00013002*                     All
reserved.                            * 00014002*
                                     * 00015002**************ˇ
**************************************** 00018002*
                                       * 00019002* THIS RETURNS THE ENVI
COMPONENT OF AN INTERPRETED LEXICAL    * 00020002* CLOSURE (FUNARG).  IT
ETES "FUNCDR".                           * 00030002*
                                         * 00040002*********************
****************************************** 00050002         SPACE 1
           ˇ
XARGS=1,NAME='FUNENV'                        00070002         SPACE 1
                                             00080002         USING FUNE
                          ˇ
                                               00100002         L     #2
                                               00110002         CLI   ##
,##FUNARG                                ˇ
                                                 00130002         L
CDAT+4(,#2)                                      00140002         BR
                                                 0015000ˇ
                                                   00160002FCERROR  DS
                                                   00170002         LR
                                                   00180002         USIˇ
NV,#3                                                00190002         DR
                                                     00200002         #E
ument to FUNENV not an interpreted lexical closure (X00210002
ARG") V - ',(#2)                                       00220002
                                                       00230002
                                                       00240002

 00010000***************************************************************
 00011002*
 00012002*ˇ
 * 00013002*                     All rights reserved.
 * 00014002*
 * 00015002**************ˇ
**** 00018002*
   * 00019002* THIS RETURNS THE FUNCTION COMPONENT OF AN INTERPRETED LEX
   * 00020002* CLOSURE (FUNARG).  IT OBSˇ
     * 00030002*
     * 00040002*********************************************************
****** 00050002         SPACE 1                        ˇ
         00060002FUNFUN   #ZBEG MINARGS=1,MAXARGS=1,NAME='FUNFUN'
         00070002         SPACE 1
         00080002         USING FUNFUN,#15                            ˇ
           00090002         SPACE 1
           00100002         L     #2,0(,#1)
           00110002         CLI   ##TYPE(#2),##FUNARG
     ˇ
             00130002         L     #15,##VECDAT+0(,#2)
             00140002         BR    #14
             0015000ˇ
               00160002FCERROR  DS    0H
               00170002         LR    #3,#15
               00180002         USIˇ
                 00190002         DROP  #15
                 00200002         #ERR  'Argument to FUNFUN not an inter
exical closure (X00210002               "FUNARG") V - ',(#2)
                   00220002         SPACE 1
                   00230002         END
                   00240002
3 FUNCTION TO FORCE A GARBAGE COLLECTION'    00010000*******************
******************************************** 00011002*
                                           * 00012002*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013002*
 rights reserved.                            * 00014002*
                                             * 00015002**************ˇ
************************************************ 00016002*
                                               * 00017002* THIS FUNCTION
A GARBAGE COLLECTION BY DESTROYING THE FREE    * 00018002* LIST POINTER
 DOIˇ
                                                 * 00020002* CURRENTLY A
ONS OF TWO NILS... (NIL) ...IS RETURNED.         * 00030002*
                   ˇ
MAT OF THE FREE LIST VARIES DEPENDING ON           * 00050002* WHETHER A
 COLLECTION HAS OCCURRED YET.  SEE ZILCONS         * 00060002* FOR MORE
                                  ˇ
                                                     * 00080002*********
****************************************************** 00090002GC
NARGS=0,MAXARGS=0,NAME='GC'                      ˇ
12                  DEFINE STACK SIZE                    00110002
,                   SAVE REGISTERS                       00120002
                                                         0013000ˇ
  #9,ZLCGCEND         FORCE END OF FREE LIST               00140002*
                                                           00150002* NOW
 DUMMY CONS TO FORCE A GARBAGE COLLECTION TO OCCUR.        00160002*

    #1,#10              SET CONS ARG 1 TO NIL (CAR-TO-BE)    00180002
    #2,#10              SET CONS ARG 2 TO NIL (CDR-TO-BE)    00190002
    #15,ZLCCONˇ
LA    #0,12(,#11)         PASS CURRENT STACK LOCATION TO CONS  00210002
#BASR #14,#15              FORCE A GARBAGE COLLECTION          00220002*
                          RETˇ
  #ZRET ,                   RESTORE REGISTERS AND RETURN         0024000
  SPACE                                                          0025000
  LTORG                                     #                      00260
    END                                                            00270

             00010000***************************************************
************ 00011002*
           * 00012002*ˇ
atory Inc.   * 00013002*                     All rights reserved.
             * 00014002*
             * 00015002**************ˇ
**************** 00016002*
               * 00017002* GCMSG TAKES ONE OPTIONAL ARGUMENT - NIL OR NO
               * 00018002*                          ˇ
                 * 00019002* IF THE ARG IS OMITTED, T OR NIL IS RETURNED
G WHETHER OR     * 00020002* NOT GC MESSAGES ARE CURRENTLY ENABLED.
                 * 00030002* IF THE ARG IS NIL, GC MESSAGES ARE SUPˇ
                   * 00040002* OTHERWISE, GC MESSAGES ARE ENABLED.
                   * 00050002*
                   * 00060002*******************************************
**ˇ
                       00080002GCMSG    #ZBEG MINARGS=0,MAXARGS=1,NAME='
                       00090002         SPACE
                 ˇ
                         00110002         USING GCMSG,#3
                         00120002         DROP  #15
                         0013000ˇ
G 1                        00140002         CR    #15,#13             IF
OMITTED                    00150002         BE    GCMSGQ              TH
 CURRENT GCMSG SETTING     00160002         CR ˇ
S NIL                        00170002         BNE   GCMSGT
                             00180002         NI    ZLCGCFLG,255-ZLCGCMS
C MESSAGES OFF               00190002         BR    #14       ˇ
N FALSE                        00200002GCMSGT   DS    0H
.                              00210002         OI    ZLCGCFLG,ZLCGCMSG
C MESSAGES ON                  00220002         LR    #15,#8
URN TRUE                         00230002         BR    #14
                                 00240002         SPACE 1
                                 00250002GCMSGQ   DS    0H
            ˇ
 GC MESSAGES ARE ENABLED           00270002         BO    TRUE
EN RETURN T (TRUE)                 00280002         LR    #15,#10
SE RETURN NIL (FALSE)      +
                         ˇ
                                       00310002         BR    #14
                                       00320002         END
                                       0∞ 0330002{
      TITLE 'GCTIME - BUILT-IN ZIL 1.3 SUBROUTINE'                   000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2         SPACE
2GCTIME   #ZBEG MINARGS=0,MAXARGS=0,NAME='GCTIME'
2         #ZPDS 12          ˇ
002         #ZSAV ,                   SAVE REGISTERS
002         SPACE 1
002         L     #2,ZLCGCTIM         GET Tˇ
40002         #MKAT FIXED               MAKE A FIXNUM OUT OF IT
50002         #ZRET ,                   RETURN WITH IT
60002         SPACE 1                                     ˇ
0070002         LTORG
0080002         SPACE 1
0090002         END
 00100002
ROUTINE'                   00010000*************************************
************************** 00011003*
                         * 00012003*ˇ
k Draper Laboratory Inc.   * 00013003*                     All rights re
                           * 00014003*
                           * 00015003**************ˇ
****************************** 00016003*
                             * 00017003* GENSYM TAKES 1 OPTIONAL ARGUMEN
                             * 00018003*                          ˇ
                               * 00019003* The following description is
 the one in CLtL, page 169,    * 00020003* 1st edition:
                               * 00030003*
 ˇ
erned symbol, consisting of a    * 00050003* prefix (which defaults to "
owed by a decimally dumped       * 00060003* number, which is incremente
ach time GENSYM ˇ
                                   * 00080003* If the optional argument
nt, then:                          * 00090003*
                               ˇ
must be non-negative, and the        * 00110003* internal GENSYM counter
to that value for FUTURE use         * 00120003* rather than having it b
ented the normal way.                * 0013000ˇ
                                       * 00140003*   If it is a string,
t string is made the default GENSYM    * 00150003* prefix for THIS and F
lls to GENSYM.                         * 00160003*           ˇ
                                         * 00170003* After handling the
, GENSYM creates a symbol as it would    * 00180003* with no argument.
ns that if the optional argument is      * 00190003* present and is an i
, then that value becomes part of the      * 00200003* GENSYM name.
                                           * 00210003*
                                           * 00220003*******************
***********ˇ
                                             * 00240003* For this implem
:                                            * 00250003*
                          ˇ
r the argument to be a bignum.  Sorry.         * 00270003*      Maybe so
 day.                                          * 00280003*  (2) If the a
is a symbol, the print name is used as if+
passed.                                ˇ
                                                   * 00310003***********
**************************************************** 00320003*
                                                     0ˇ
****************************************************** 00340003*
                                                     * 00350003* Change
:                                                    * 00360003*     ˇ
                                                       * 00370003* 05/22
t package cell to NIL.                                 * 00380003*
                                                       * 00390003*******
****ˇ
                                                           00410003GENSY
G MINARGS=0,MAXARGS=1,NAME='GENSYM'                        00420003
E 1                ˇ
PDS 16                  DEFINE STACK SIZE                    00440003
SAV ,                   SAVE REGISTERS                       00450003
ACE 1                             ˇ
L     #1,0(,#11)          Get arg 1                            00470003
CR    #1,#13              If arg 1 is omitted,                 00480003
BE    INCR                then go increment countˇ
  CLI   ##TYPE(#1),##FIXNUM If arg 1 is a fixnum                 0050000
  BE    ARG1FIX             then go process integer arg1         0051000
  CLI   ##TYPE(#1),##STRING If arg 1 is a string                ˇ
    BE    ARG1STR             then go process string arg1          00530
    CLI   ##TYPE(#1),##SYMBOL If arg 1 is a symbol                 00540
    BE    ARG1SYM             then go process symbol arg1          00550

      SPACE 1                                                        005
1FIX  DS    0H                  Arg 1 is a fixnum                    005
      ICM   #2ˇ
        BM    ERROR1              If negative, error                   0
        ST    #2,ZLCGSCNT         Store as new GENSYM counter          0
        B     AFTINCR        ˇ
3         SPACE 1
3ARG1SYM  DS    0H                  Arg 1 is a symbol
3         L     #1,##PNAME(,#1)     Get prinˇ
003ARG1STR  DS    0H                  Arg 1 is a string
003         ST    #1,ZLCGSPRE         Store GENSYM prefix
003******** B     INCR                Go to increment GENSY M counter
80003ˇÁ
           00690003INCR     DS    0H                  OK, increment the
           00700003         LA    #2,1                Add 1 to GENSYM co
           00710003 ˇ
             00720003         ST    #2,ZLCGSCNT
             00730003         SPACE 1
             00740003AFTINCR  DS   ˇ
 whatever way  00750003         SPACE 1
               00760003*************************************************
************** 00770003*                          ˇ
               * 00780003* Compute length of integer and length of prefi
               * 00790003*
               * 00800003****************************************ˇ
****************** 00810003         SPACE 1
                   00820003* Get length of integer
                   00830003         MVC   GWORK(12),=X'F0202020202020212
ˇ
pattern and register 00850003         CVD   #2,ZLCDBL           Convert
ted GENSYM counter   00860003         EDMK  GWORK(12),ZLCDBL+2  Edit dec
nter into patteˇ
r to check.            00880003         LA    #5,GWORK+12         Comput
 of significant part   00890003         SR    #5,#1               Length
erted integer          0090000ˇ
of converted integer     00910003* Get length of prefix
                         00920003         ICM   #1,15,ZLCGSPRE      Get
refix string             00930003         BZ ˇ
s one, then...             00940003         LA    #7,##VECDAT(,#1)     g
ss of prefix string        00950003         XR    #4,#4                c
ert register               00960003         ICM   #4,7,1(#1)ˇ
gth of GENSYM prefix         00970003         B     AFTPREFX
                             00980003NOPREFIX DS    0H
GENSYM prefix in use...      00990003         LA    #4,1
ength of default GENSYM prefix 01000003         XR    #7,#7
 address of GENSYM prefix      01010003AFTPREFX DS    0H
                               01020003*
ength of pˇ
 address of prefix               01040003*
 length of converted integer     01050003*
 address of converted int+
                       ˇ
************************************ 01080003*
                                   * 01090003* Get storage for the entir
 in one swoop. This consists of    * 0ˇ
                                     * 01110003* (1) storage for the sym
er - ##SYMLEN bytes                  * 01120003* (2) storage for the pri
of the GENSYM, consisting of...      * 01130003*     ˇ
                                       * 01140003*     ##VECDAT + length
ix + length of converted counter       * 01150003*
                                       * 01160003*******************ˇ
****************************************** 01170003         SPACE 1
                                           01180003REPEAT   DS    0H
      Back here in case GC was required    01190003         SPACE 1
   ˇ
EN+##VECDAT(#4,#5)                           01210003         N     #14,
FFC'    Round up to fullword                 01220003         SPACE 1
                  ˇ
R         Get address of vector/string space   01240003******** L     #2
N         Get length of vector/string space    01250003******** L     #3
T         Get address of next avaˇ
CVSADR      Get all of the above                 01270003         AR
            Next slot + needed length = new end  01280003         AR
            Get address of end of V/S space     ˇ
              If out of room                       01300003         BH
              then go try to get some more         01310003         LR
              Get length of prefix string into #0  01320003    ˇ
14              Get end-pointer-to-be                01330003         MV
SYMLEN,#3),ZLCNSYM Init from new symbol template     01340003         LA
##SYMLEN(,#3)   PNAME = other part of space          01350003         ST
4,##PNAME(,#3)    Store into print name cell           01360003* Package
mains "uninterned"                                     01370003
0,##PPKG(,#3)     Set package cell to NIL              01380003
4,#0         ˇ
#14,#5              Add integer length                   01400003
#14,##SYMLEN+0(,#3) Store print name string length       01410003
##SYMLEN+0(#3),##STRING Set ˇ
  #15,#0              Destination length of prefix string  01430003
  #0,#7               Source address of GENSYM prefix      01440003
  MVCLPRFX            If zero, then                         01450003ˇÁ

003         LA    #14,##SYMLEN+##VECDAT+1(,#3)
003         B     AFTMPRFX            else
003Mˇ
90003         LR    #1,#15               Source length of GENSYM prefix
00003         LA    #14,##SYMLEN+##VECDAT(,#3) Dest addr in string area
10003         MVCL ˇ
1520003AFTMPRFX DS    0H
1530003* Now #14 points to where to put the rest of the text.
1540003         BCTR  #5,0        ˇ
 01550003         EX    #5,MOVEINT          Move converted integer to st
 01560003         ST    #4,ZLCVSNXT         Update next-slot VSS pointer
 01570003         LR    #15,#3              Pointˇ
   01580003         SPACE 1
   01590003RETURN   DS    0H                  RETURN WITH NEW ATOM <-- R
   01600003         SPACE 1                                     ˇ
     01610003         #ZRET ,                   RESTORE REGISTERS AND RE
     01620003         SPACE 1
     01630003MOVEINT  MVC   0(*-*,#14),0(#6)    Executed: move converted

       01650003GWORK    DS    CL12                Work area for converti
er     01660003         SPACE 1
       0167000ˇ
ACE?     01680003         LTR   #0,#0               IF THIS IS THE SECON
T        01690003         BZ    ERROR               THEN FAIL - SPACE AL
         01700003         L  ˇ
           01710003         LR    #1,#10              SET DUMMY ARG 1 TO
NIL        01720003         LR    #2,#10              SET DUMMY ARG 2 TO
NIL        01730003*                        ˇ
 STACK LOC   01740003         L     #15,ZLCCONS         GET ADDRESS OF Z
             01750003         #BASR #14,#15             CALL CONS:FORCE
E COLLECTION 01760003         XR    #0,#0               CLEˇ
OTHER GC       01770003         B     REPEAT              AND TRY IT AGA
               01780003         SPACE
               01790003ERROR1   DS    0H
                 01800003         #ERR  'Argument 1 to GENSYM not a stri
nnegative fixnumX01810003                - ',0(#11)
                 01820003         SPACE
         +
       ˇ
o create GENSYM.',  X01850003               PREFIX=NO
                     01860003         SPACE 1
                     0z 1870003         LTORG
                       01880003         END
                       01890003{
 BUILT-IN ZIL 1.3 SUBROUTINE'                      00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002*
                                                     * 00017002* GET TAK
EQUIRED AND ONE OPTIONAL ARGUMENT.                   * 00018002*
          ˇ
IS NONRECURSIVE AND THEREFORE USES NO STACK SPACE.     * 00020002*
                                                       * 00030002*******
*************************ˇ
                                                         * 00050002* The
d be related functions, like GETF, that do similar       * 00060002* thi
well as "optimized-call-path" ones that ˇ
nt to check argument type or inspect default value.        * 00080002*
                                                           * 00090002***
*******************************************************ˇ
SPACE 1                                                        00110002G
#ZBEG MINARGS=2,MAXARGS=3,NAME='GET'                           00120002
SPACE 1                                                        0013000ˇ
  LR    #3,#15                                                   0014000
  USING GET,#3                                                   0015000
  DROP  #15                                                      0016000
  SPAˇ
    LM    #5,#7,0(#1)         LOAD THE ARGUMENTS                   00180
    CLI   ##TYPE(#5),##SYMBOL ARG 1 MUST BE A SYMBOL               00190
    BNE   NOTSYM    ˇ
      L     #15,##PLIST(,#5)    GET PROPERTY LIST POINTER            002
CESS  DS    0H                                                       002
nitial loop-bypassing test for nullˇ
        CR    #15,#10             IF END OF PROPERTY LIST (NULL)       0
        BE    NOTFOUND            THEN RETURN NO-PROPERTY-FOUND VALUE  0
        SPACE 1                                   ˇ
2LOOP     DS    0H
2         LM    #1,#2,##CAR(#15)    GET CAR AND CDR OF NEXT CELL
2*                                  #1 = CAR, #2 = CDR           +
002         CR    #6,#1               IF (CAR SUBPLIST) IS "EQ"ˇ
00002         BE    FOUND               THEN PROPERTY FOUND, GO GET VALU
10002*
20002* If #15 didn't point to a CONS cell, then the high-order bit of #1
0330002* will be one, since it was an "atom" type bit.
0340002*
0350002         LTR   #1,#1               IF PROPERTY (SUB)LIST ATOMIC
0360002      ˇ
 00370002*                                  ELSE NOT THE ONE - CONTINUE
 00380002         L     #15,##CDR(,#2)      GET CDR OF PROPERTY (SUB)LIS
 00390002         TM    ##TYˇ
   00400002         BO    ERROR2              THEN ERROR
   00410002         CR    #15,#10             IF NOT NIL, THEN CONTINUE
G  00420002         BNE   LOOP             ˇ
LIST 00430002NOTFOUND DS    0H                  PROPERTY NOT FOUND
     00440002         LR    #15,#7              LOAD ARG 3
     00450002         CR    #7,#13              IF ARG 3 Sˇ
       00460002         BNER  #14                 THEN RETURN WITH IT
       00470002         LR    #15,#10             ELSE RETURN DEFAULT OF
       00480002         BR    #14
         00490002         SPACE 1
         00500002FOUND    DS    0H                  PROPERTY FOUND
         00510002         ICM   #15,15,##CAR(#2)    SET RETURN VALUE = C
BLIST   ˇ
           00530002         B     ERROR2              IF #2 DIDN'T POINT
, ERROR    00540002         SPACE 1
           00550002NOTSˇ
             00560002         SPACE 1
             00570002***************************************************
************ 00580002*                ˇ
             * 00590002* FOR COMPATIBILITY WITH MACLISP AND OTHER APPLIC
HAT USE      * 00600002* DISEMBODIED PROPERTY LISTS, IF ARG 1 IS A LIST
ACCEPT IT.   * 00610002*                             ˇ
               * 00620002***********************************************
**************** 00630002         SPACE 1
                 00640002         TM    ##TYPE(#5),##ATOM   See if iˇ
                   00650002         BO    ERROR1              If so, the
                   00660002         L     #15,##CDR(,#5)       get CDR a
s property list    00670002         B     PROCESS             Else it's
                    00680002ˇÁ
                                   00690002ERROR1   DS    0H
g 1 not even a list...             00700002         SPACE 1
                                   00710002*ˇ
************************************ 00720002*
                                   * 00730002* If arg 1 is neither a sym
a list, it should be an error.     * 00740002* However, forˇ
 Maclisp and other dialects of       * 00750002* LISP that run Macsyma,
 GET to always return the specified  * 00760002* "default value" in such
                                     * 00770002*
                                       * 00780002***********************
**************************************** 00790002         SPACE 1
                                         00800002         LR    #4,#14
    SAVE ˇ
ontinue                                    00820002         #ERR  1,'Arg
to GET not a symbol, returning default valX00830002               ue of
 - ',(#5)               ˇ
        Restore return address               00850002         B     NOTF
        Go to return default value           00860002         SPACE 1
                                       ˇ
          INVALID PROPERTY LIST                00880002         #ERR  'Z
ET: Invalid property list found for ',(#5),   X00890002               PR
                                               0090000ˇ 2         SPACE
                                                 00910002         LTORG
                                                 00920002         END
                                                 00930002

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002*
0017002* GETCHAR TAKES TWO ARGUMENTS - A STRING AND A FIXNUM.
0018002*                          ˇ
 00019002* It returns an interned symbol representing the arg2'th charac
 00020002* of arg1.
 00030002*                                       ˇ
 * 00040002* This is a Maclisp function, not a Common Lisp function.
 * 00050002*
 * 00060002*****************************************************ˇ
**** 00070002GETCHAR  #ZBEG MINARGS=2,MAXARGS=2,NAME='GETCHAR'
     00080002         #ZPDS 20
     00090002         #ZSAV ,

       00110002         LM    #6,#7,0(#11)        LOAD ARGS
       00120002         CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRIN
       0013000ˇ
         00140002         CLI   ##TYPE(#6),##SYMBOL IF ARGUMENT IS A SYM
         00150002         BNE   ERROR1              THEN
         00160002         L  ˇ
 ERROR     00170002ARG1OK   DS    0H
           00180002         CLI   ##TYPE(#7),##FIXNUM IF ARG 2 IS NOT A
           00190002         BNE   ERROR2    ˇ
             00200002         ICM   #7,15,##CDR(#7)     GET FIXNUM VALUE
             00210002         BNP   RETNIL              IF ZERO OR NEGAT
URN NIL      00220002         XR    #2,#2               CLEˇ
               00230002         ICM   #2,7,1(#6)          GET STRING LEN
               00240002         CR    #7,#2               IF SUBSCRIPT E
ENGTH          00250002         BH    RETNIL              THEN RETURN NI
                 00260002         IC    #1,##VECDAT-1(#7,#6) LOAD CHARAC
 SUBSTRING       00270002         STC   #1,CHARWORK         MOVE TO TEMP
TSIDE STRING!    00280002*
         +
irectlyˇ
                     00310002* In such a case, we MUST check for T ourse
                     00320002*
                     0ˇ
 T                     00340002         BNE   NOTT                then
                       00350002         LR    #15,#8               retur
s of T                 00360002      ˇ
                         00370002NOTT     DS    0H                   cha
ther than T...           00380002         LA    #4,CHARWORK         GET
OF PRINT NAME TEXT       00390002         LA    #5,1ˇ
 OF PRINT NAME TEXT        00400002         XR    #7,#7               IN
RINT NAME TEXT SUPPLIED    00410002         L     #15,ZLCINTN         GE
S OF ZILINTN               00420002         LA    #0,20(,#11)      ˇ
ENT TOP-OF-STACK POINTER     00430002         #BASR #14,#15
INTN TO INTERN THE SYMBOL    00440002         B     RETURN
                             00450002***      SPACE 1
  ˇ
NGTH = 1                       00470002***      LA    #1,CHARWORK
TO THIS AREA!                  00480002***      LR    #2,#8
TERN FLAG = T    ˇ
FORMAT FLAG = NIL                00500002***      L     #15,ZLCABLD
ADDRESS OF ZILABLD               00510002***      LA    #4,20(,#11)
CURRENT STACK POINTER FOR CONS  ˇ
LL ZILABLD TO MAKE AT ATOM FROM IT 00530002***      B     RETURN
TURN THE ATOM IN #15               00540002         SPACE 1
                                   00550002RETNˇ
SUBSCRIPT OUT OF BOUNDS              00560002         LR    #15,#10
RETURN NIL                           00570002RETURN   DS    0H
                                     00580002         SPACE 1 ˇ
                                       00590002         #ZRET ,
  RESTORE REGISTERS AND RETURN         00600002         SPACE 1
                                       00610002ERROR1   #ERR  'Argument
ETCHAR not a string - ',(#6)             00620002ERROR2   #ERR  'Argumen
ETCHAR not a fixnum - ',(#7)             00630002         SPACE 1
                                         00640002CHARWORK DS    CL1
            ˇ
                                           00660002         LTORG
                                           00670002         END
                                            00680002{
0         TITLE 'GETCHARN - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* GETCHARN TAKES TWO ARGUMENTS - A STRING AND A FIXNUM.
18002*                          ˇ
0019002* IT RETURNS A FIXNUM.  INDEXING IS ZERO-BASED, UNLIKE CHAR.
0020002*
0030002* This is a Maclisp function, not a Commˇ
 00040002*
 00050002***************************************************************
 00060002GETCHARN #ZBEG MINARGS=2,MAXARGS=2,NAME='GETCHARN'   ˇ
   00070002         SPACE
   00080002         LM    #6,#7,0(#1)         LOAD ARGS
   00090002         CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING
     00100002         BE    ARG1OK              THEN OK
     00110002         CLI   ##TYPE(#6),##SYMBOL IF ARGUMENT IS A SYMBOL
     00120002         BNE   ERROR1              THEN
     0013000ˇ
OR     00140002ARG1OK   DS    0H
       00150002         CLI   ##TYPE(#7),##FIXNUM IF ARG 2 IS NOT A FIXN
       00160002         BNEˇ
         00170002         ICM   #5,15,##CDR(#7)     GET FIXNUM VALUE
         00180002         BNP   RET00               IF ZERO OR NEGATIVE,
X'00'    00190002         XR    #3,#3     ˇ
           00200002         ICM   #3,7,1(#6)          GET STRING LENGTH
           00210002         CR    #5,#3               IF INDEX EXCEEDS L
           00220002         BH    RET00               THEˇ
             00230002         XR    #2,#2               CLEAR INSERT REG
             00240002         IC    #2,##VECDAT-1(#5,#6) GET STRING CHAR
TO REGISTER  00250002         SLA   #2,3                Convert to index
fixnum table   00260002         DROP  #15
               00270002         LA    #15,#SFT(#2)        Point to entry
um table       00280002         BR    #14
       +
     ˇ
S                  00310002         LA    #15,#SFT0           RETURN X'0
                   00320002         BR    #14
                   0ˇ
                     00340002         USING GETCHARN,#2
                     00350002ERROR1   LR    #2,#15
                     00360002      ˇ
ng - ',(#6)            00370002ERROR2   LR    #2,#15
                       00380002         #ERR  'Argument 2 to GETCHARN no
um - ',(#7)            00390002         SPACE 1   ò
                         00400002         LTORG
                         00410002         END
                         00420002{
K - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000***********
**************************************************** 00011002*
                                                   * 00012002*ˇ
 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
     All rights reserved.                            * 00014002*
                                                     * 00015002*********
******************************************************** 00016002*
                                                       * 00017002* GETK
O REQUIRED ARGUMENTS - A LIST AND A KEYWORD INDICATOR  * 00018002* - AND
ONAL ARGUMENˇ
LED IF THE LIST IS BAD.                                  * 00020002*
                                                         * 00030002* THE
 NOT A "DISEMBODIED PROPERTˇ
LTERNATING KEYWORDS AND VALUES.                            * 00050002*
                                                           * 00060002* T
TION RETURNS THE SUBLIST OF THE PROPERTY Lˇ
E VALUE (NOT THE KEYWORD), OR NIL IF THE INDICATOR IS        * 00080002*
ND.                                                          * 00090002*
                                                         ˇ
FUNCTION IS DESIGNED FOR USE WITH CODE THAT ACCESSES THE       * 0011000
 OF KEYWORDS USING A LAMBDA LIST WITH &KEY SPECIFIED.          * 0012000
                                                               * 0013000
S ROUTINE IS NONRECURSIVE AND THEREFORE USES NO STACK SPACE.     * 00140
                                                                 * 00150
s is a ZIL-only function.                                        * 00160
       ˇ
******************************************************************** 001
      SPACE 1                                                        001
K     #ZBEG MINARGS=2,ˇ
        SPACE 1                                                        0
        LR    #3,#15                                                   0
        USING GETK,#3                ˇ
2         DROP  #15
2         SPACE 1
2         LM    #15,#0,0(#1)        #15 = LIST, #0 =ˇ
002         SPACE 1
002LOOP     DS    0H
002         CR    #15,#10             IF END OF PROPERTY LIST (NULL+
90002         BER   #14                 THEN RETURN NIL          ˇ
0300002         TM    ##TYPE(#15),##ATOM  IF PROPERTY (SUB)LIST ATOMIC
0310002         BO    ERROR1              THEN ERROR
0320002         C     #0,##CAR(,#15)      IF (CAR SUBPLIST) IS "EQ" TO A
ˇ
 00340002         L     #15,##CDR(,#15)      GET CDR OF PROPERTY (SUB)LI
 00350002         BR    #14                 RETURN TO CALLER
 00360002      ˇ
   00370002NEXT     DS    0H                  ELSE NOT THE ONE - CONTINU
   00380002         L     #15,##CDR(,#15)      GET CDR OF PROPERTY (SUB)
   00390002         TM    ##TYˇ
     00400002         BO    ERROR1              THEN ERROR
     00410002         L     #15,##CDR(,#15)     GET CDR OF PROPERTY (SUB
     00420002         B     LOOP             ˇ
       00430002         SPACE 1
       00440002ERROR1   DS    0H                  ERROR IN ARGUMENT
       00450002         C     #13,8(,#1)          IF ARG 3 Iˇ
         00460002         BE    ERROR                OR
         00470002         C     #10,8(,#1)            ARG 3 IS NIL
         00480002         BE    ERROR                  THEN SIGNAL AN ER
           00490002         LR    #15,#10             ELSE RETURN NIL
           00500002         BR    #14
           00510002         SPACE 1
          ˇ
             00530002         L     #2,0(,#1)
             00540002         #ERR  'ZIL4012 GETK: Improper keyword list
ed - ',     X00550002    ˇ
               00560002         SPACE 1
               00570002         LTORG
               00580002         END     ‘
                 00590002{
T-IN ZIL 1.3 SUBROUTINE'                     00010000*******************
******************************************** 00011002*
                                           * 00012002*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013002*
 rights reserved.                            * 00014002*
                                             * 00015002**************ˇ
************************************************ 00016002*
                                               * 00017002* GETL TAKES TW
NTS - AN ATOM AND A LIST OF PROPERTIES         * 00018002*
    ˇ
RECURSIVE AND THEREFORE USES NO STACK SPACE.     * 00020002*
                                                 * 00030002* Note: GETL
 exist in Common LIˇ
might be:                                          * 00050002*
                                                   * 00060002* (defun ge
ol indicator-list)                ˇ
e-bind (found-indicator found-value plist-tail)      * 00080002*
       (get-properties (symbol-plist symbol)         * 00090002*
                       indicator-list)           ˇ
         plist-tail))                                  * 00110002*
                                                       * 00120002*******
******************************************************** 0013000ˇ
E 1                                                        00140002GETL
G MINARGS=2,MAXARGS=2,NAME='GETL'                          00150002
E 1                                                        00160002

ING GETL,#3                                                  00180002
OP  #15                                                      00190002
ACE 1         ˇ
LM    #5,#6,0(#1)         LOAD THE ARGUMENTS                   00210002
CLI   ##TYPE(#5),##SYMBOL ARG 1 MUST BE A SYMBOL               00220002
BNE   NOTSYM                 ˇ
  L     #15,##PLIST(,#5)    GET PROPERTY LIST POINTER            0024000
  DS    0H                                                       0025000
al loop-bypassing test for null property lisˇ
    CR    #15,#10             IF END OF PROPERTY LIST (NULL)       00270
    BER   #14                 THEN RETURN NIL (NO PROPS FOUND)     00280
    SPACE 1                                                +
P     DS    0H                                           ˇ
        LM    #0,#1,##CAR(#15)    GET CAR AND CDR OF NEXT CELL         0
                                                                       0
 If #15 didn't point to a CONS cell, then the high-order bit of #1     0
2* will be one, since it was an "atom" type bit.
2*
2         LTR   #0,#0               IF PROPERTY (SUB)LIST ATOMIC
2      ˇ
002*                                  #0 = CAR OF (SUB)LIST = INDICATOR
002*                                  #1 = CDR OF (SUB)LIST = NEXT SUBLI
002         LR    #4,#ˇ
00002PROPLOOP DS    0H
10002         TM    ##TYPE(#4),##ATOM   AT END OF ARG2
20002         BO    NOTFOUND         ˇ
0430002         C     #0,##CAR(,#4)       IF INDICATOR IS "EQ" TO PROPER
0440002         BER   #14                 THEN RETURN WITH SUBLIST
0450002         L     #4,##CDR(,#4)       ELSE GET Cˇ
 00460002         B     PROPLOOP            AND CONTINUE SEARCHING IT
 00470002NOTFOUND DS    0H
 00480002         TM    ##TYPE(#1),##ATOM   IF PROPERTY (SUB)LIST Aˇ
   00490002         L     #15,##CDR(,#1)      GETTING CDR OF PROPERTY (S
   00500002         BO    ERROR2              THEN ERROR
   00510002         CR    #15,#10             CHECK SUBLIST FOR NIL
  ˇ
     00530002         B     LOOP                IF SUBLIST NOT NIL, KEEP
     00540002         SPACE 1
     00550002NOTSˇ
       00560002         SPACE 1
       00570002*********************************************************
****** 00580002*                ˇ
       * 00590002* FOR COMPATIBILITY WITH MACLISP AND OTHER APPLICATIONS
E      * 00600002* DISEMBODIED PROPERTY LISTS, IF ARG 1 IS A LIST THEN W
 IT.   * 00610002*                             ˇ
         * 00620002*****************************************************
********** 00630002         SPACE 1
           00640002         TM    ##TYPE(#5),##ATOM   See if iˇ
             00650002         BO    ERROR1              If so, then...
             00660002         L     #15,##CDR(,#5)       get CDR and use
erty list    00670002         B     PROCESS             Else it's an ato
               00680002ˇÁ
                             00690002ERROR1   DS    0H
t even a list...             00700002         SPACE 1
                             00710002*ˇ
****************************** 00720002*
                             * 00730002* If arg 1 is neither a symbol no
, it should be an error.     * 00740002* However, forˇ
sp and other dialects of LISP  * 00750002* that run Macsyma, we allow GE
ways return the specified      * 00760002* "default value" in such cases
                               * 00770002*                          ˇ
                                 * 00780002*****************************
********************************** 00790002         SPACE 1
                                   00800002         LR    #4,#14
VE ˇ
e                                    00820002         #ERR  1,'Argument
L not a symbol, returning NIL - ',  X00830002               (#5)
                  ˇ
  SET RETURN VALUE TO NIL              00850002         BR    #4
  RETURN TO CALLER                     00860002         SPACE 1
                                 ˇ
    INVALID PROPERTY LIST                00880002         #ERR  'ZIL4011
nvalid property list found for ',(#5),  X00890002               PREFIX=N
                                         0090000ˇ 2         SPACE 1
                                           00910002         LTORG
                                           00920002         END
                                           00930002
      TITLE 'GETPARM - BUILT-IN ZIL 1.3 SUBROUTINE'                  000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2*                                                                     *
2* GETPARM TAKES TWO (OPTIONAL) ARGUMENTS:                             *
2*                          ˇ
002* (1) WHETHER (T) OR NOT (NIL) TO INTERN THE RESULTING ATOM.
002* (2) WHETHER (T) OR NOT (NIL) TO CONVERT TO NUMERIC FORMAT.
002*                                       ˇ
40002*******************************************************************
50002*
60002*    IF THE PARM DATA BEGINS WITH A BACKSLASH "\", SKˇ
0070002*    ALL DATA UP TO THE NEXT BACKSLASH.  THIS IS DESIGNED TO
0080002*    ALLOW INITIALIZATION SPECS TO BE PASSED TO ZIL.
0090002*
 00100002***************************************************************
 00110002*
 00120002* Note:  This is an MVS-dependent function.  Actually, it is ki
 0013000ˇ
 * 00140002*        returns the PARM stuff as a STRING rather than a sym
 * 00150002*
 * 00160002************ˇ
**** 00170002         GBLB  &ZILTSO
     00180002         #ZSYS
     00190002         EJECT           ˇ
       00200002GETPARM  #ZBEG MINARGS=0,MAXARGS=2,NAME='GETPARM'
       00210002         #ZPDS 20                  DEFINE STACK SIZE
       00220002         #ZSAV ,                   SAVˇ
         00230002         SPACE
         00240002         L     #1,4(,#13)          GET ADDRESS OF ZLBSA
S HSA)   00250002         L     #1,4(,#1)           GET ADDRESS OF Zˇ
AVE AREA   00260002         L     #1,24(,#1)          GET ORIGINAL PARM
           00270002         AIF   (NOT &ZILTSO).PGMCALL
           00280002*----------------------------------------------------
---+
 ˇ
-------------- 00310002         TM    0(#1),X'80'         IF THERE IS 1
R              00320002         BO    PGMCALL              THEN WE WERE
S A PROGRAM    0ˇ
ETERS            00340002         BO    PGMCALL              THEN WE WER
 AS A PROGRAM    00350002         TM    8(#1),X'80'         IF THERE ARE
ETERS            00360002      ˇ
ED AS A PROGRAM    00370002*                                  ELSE WE WE
D AS A COMMAND     00380002         USING CPPL,#1
                   00390002         L     #2,Cˇ
OMMAND BUFFER        00400002         LH    #0,0(,#2)           GET LENG
MMAND BUFFER         00410002         AR    #0,#2               POINT TO
COMMAND BUFFER       00420002         LH    #1,2(,#2)        ˇ
COMMAND TEXT           00430002         LA    #1,4(#1,#2)         POINT
 OF COMMAND TEXT       00440002         SR    #0,#1               GET LE
COMMAND TEXT           00450002         B     GOTIT
                         00460002*--------------------------------------
------------------------ 00470002* END TSO ONLY
                         00480002*--------------------------------------
-----------ˇ
                           00500002PGMCALL  DS    0H
                           00510002         L     #1,0(,#1)           GE
S OF PARM STRING          ˇ
TH OF PARM STRING            00530002         LA    #1,2(,#1)
 TEXT OF PARM                00540002GOTIT    DS    0H
RESS, #0 = LENGTH            00550002* GEˇ
G DATA ENCLOSED IN BACKSLASHES 00560002         LTR   #0,#0
M LENGTH IS ALREADY ZERO       00570002         BZ    GOTREAL
HIS IS IT                      00580002         CLI   0(ˇ
ARM DOESN'T BEGIN WITH BACKSLASH 00590002         BNE   GOTREAL
 THIS IS IT                      00600002         LA    #1,1(,#1)
 SKIP OVER INITIAL BACKSLASH     00610002         BCTR  #0,0           ˇ
CREMENT PARM LENGTH                00620002BSLOOP   DS    0H
OP TO FIND TERMINATING BACKSLASH   00630002         LTR   #0,#0
 PARM LENGTH DOWN TO ZERO          00640002         BZ    GOTREAL
EN STOˇ
IF BACKSLASH FOUND                   00660002         BE    BSEND
THEN PROCESS REMAINDER OF STRING     00670002         LA    #1,1(,#1)
ELSE INCREMENT POINTE R               00680002ˇÁ
                DECREMENT LENGTH                     00690002         B
OP                                                   00700002BSEND    DS
                WE FOUND TERMINATING BACKSLASH       00710002 ˇ
,1(,#1)           POINT TO DATA FOLLOWING BACKSLASH    00720002
,0                DECREMENT LENGTH                     00730002GOTREAL
                  #1 = ADDRESS, #0 = LENGTH            00740002* NOW WE
E TRUE PARM                                              00750002
#2,0(,#11)          GET ARG 1 = WHETHER TO INTERN IT     00760002
#3,4(,#11)          GET ARG 2 = WHETHER TO FORMAT IT     00770002
#15,ZLCABLD ˇ
  #4,20(,#11)         GET CURRENT STACK POINTER FOR CONS   00790002
R #14,#15             CALL ZILABLD TO BUILD THE ATOM       00800002*
                       MAKIˇ
ACE                                                          00820002RET
    0H                                                       00830002
ACE 1                                     ˇ
#ZRET ,                   RESTORE REGISTERS AND RETURN         00850002
SPACE 1                                                        00860002
LTORG                                                    ˇ
  EJECT                                                          0088000
  AIF   (NOT &ZILTSO).AFTCPPL                                    0089000
---------------------------------------------------------------- 0090000
 ONLY                                                              00910
------------------------------------------------------------------ 00920
    IKJCPPL                                                        00930
-------ˇ
ND TSO ONLY                                                          009
-------------------------------------------------------------------- 009
TCPPL ANOP  ,         V                                                0
        SPACE                                                          0
        END                                                            0

                 00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* GREATERP TAKES TWO ARGUMENTS. BOTH MUST B
C OR ALPHA ATOMS.  * 00018002*                          ˇ
                     * 00019002*****************************************
********************** 00020002*
                     * 00030002* THIS ROUTINE IS NOT RECURSIVE AND USESˇ
CK SPACE.              * 00040002*
                       * 00050002***************************************
************************ 00060002*
      ˇ
                         * 00080002*
                         * 00090002* 1. BOTH ARGS FIXED         - PERFOR
R COMPARISON.        ˇ
 COMPARISON.               * 00110002* 3. ONE FIXED, ONE FLOAT    - CONV
FIXED ARGUMENT TO          * 00120002*                              FLOA
RFORM REAL COMPARISON.     * 0013000ˇ
ARACTER COMPARISON.          * 00140002*
                             * 00150002* ANY OTHER TYPES CAUSE AN ERROR.
                             * 00160002*           ˇ
                               * 00170002*******************************
******************************** 00180002*
                               * 00190002* ===> BIGNUM - FLOAT COMˇ
YET IMPLEMENTED                  * 00200002*
                                 * 00210002*****************************
********************************** 00220002*
 ˇ
PARES.  THE FOLLOWING COMPARISONS  * 00240002*            ARE LEGAL:
                                   * 00250002*
                ˇ
                                     * 00270002*  STRING TO STRING
                                     * 00280002*  SYMBOL TO STRING
                               +
                             ˇ
                                         * 00310002* ALL MAY BE REMOVED
 COMMON LISP.                            * 00320002*
                                         * 0ˇ
******************************************** 00340002GREATERP #ZBEG MINA
XARGS=2,NAME='GREATERP'                      00350002         SPACE
                                             00360002      ˇ
                                               00370002         DROP  #1
                                               00380002         USING GR
3                                              00390002         SPACE
                                                 00400002         LM
#1)         LOAD ARGUMENTS                       00410002         LR
            PRESET RETURN VALUE TO NIL           00420002         CR
         ˇ
              THEN RETURN NIL                      00440002*
                                                   00450002* CHECK TYPE
                        ˇ
                                                     00470002         CL
PE(#1),##FIXNUM                                      00480002         BE
FIX                                    ˇ
TYPE(#1),##SFLOAT                                      00500002
G1SFLO                                                 00510002
TYPE(#1),##BIGNUM                                     ˇ
ARG1BIG                                                  00530002
##TYPE(#1),##DFLOAT                                      00540002
ARG1DFLO                                                 00550002*   ˇ
                                                           00560002* ---
THIS CODE FOR FULL COMMON LISP                             00570002*
                                                           00580002
  ##ˇ
    ARG1STR                                                  00600002
I   ##TYPE(#1),##SYMBOL                                      00610002
    ARG1ALF        ˇ
                                                               00630002*
 CODE TO DELETE FOR FULL COMMON LISP                           00640002*
                                  ˇ
  B     ERROR                                                    0066000
  EJECT                                                          0067000
  DS    0H                  ARG 1 IS FIXED                        00680

 00690002         L     #0,##CDR(,#1)       GET FIXED VALUE 1
 00700002*
 00710002*ˇ
   00720002*
   00730002         CLI   ##TYPE(#2),##FIXNUM
   00740002         BE   ˇ
     00750002         CLI   ##TYPE(#2),##BIGNUM
     00760002         BE    CFIXBIG             FIXED - BIG   = OK
     00770002         CLI   ##TYPE(#2),#ˇ
       00780002         BE    CFIXSFLO            FIXED - FLOAT = OK
       00790002         CLI   ##TYPE(#2),##DFLOAT
       00800002         BE    CFIXDFLO            FIXEDˇ
         00810002         B     ERROR               ANYTHING ELSE = ERRO
         00820002CFIXSFLO DS    0H                  FIXED VALUE 1 ALREAD
         00830002         LR    #7,#14              SAVE RETURN REGISTˇ
           00840002         #BAS  #14,FIX2FLO         CONVERT FIXED TO F
           00850002         LR    #14,#7              RESTORE RETURN REG
           00860002         LRER  #F2,#F0             GET SINGLE FLOAT V
     ˇ
             00880002         SPACE
             00890002CFIXDFLO DS    0H                  FIXED VALUE 1 AL
 #0          0090000ˇ
               00910002         #BAS  #14,FIX2FLO         CONVERT FIXED
               00920002         LR    #14,#7              RESTORE RETURN
R              00930002         LDRˇ
UE 1             00940002         B     COMDFLO1
                 00950002         SPACE
                 00960002CFIXFIX  DS    0H        ˇ
                   00970002         C     #0,##CDR(,#2)       COMPARE
                   00980002         BNHR  #14
                   00990002         LR    #15,#8                 ˇ
                     01000002         BR    #14
                     01010002         SPACE
                     01020002ARG1SFLO DS    0H                  ARG 1 IS
ˇ
                       01040002*
                       01050002* CHECK TYPE OF ARG 2
               +
             ˇ
                           01080002         BE    SFLOSFLO            SF
FLOAT = OK                 01090002         CLI   ##TYPE(#2),##DFLOAT
                           0ˇ
 DFLOAT = OK                 01110002         CLI   ##TYPE(#2),##FIXNUM
                             01120002         BE    SFLOFIX
FIXED = OK                   01130002      ˇ
                               01140002         BE    SFLOBIG
- BIG   = OK                   01150002         B     ERROR
- NONUM = ERROR                01160002SFLOFIX  DS    0H  ˇ
                                 01170002         LE    #F2,##CDR(,#1)
SINGLE FLOAT VALUE 1             01180002         L     #0,##CDR(,#2)
FIXED VALUE 2                    01190002         LR    #7,#14
VE RETURN REGISTER                 01200002         #BAS  #14,FIX2FLO
NVERT FIXED TO FLOAT               01210002         LR    #14,#7
STORE RETURN REGISTER              01220002         LRER  #F4,#F0
T SINGLEˇ
                                     01240002         SPACE
                                     01250002SFLODFLO DS    0H
SINGLE FLOAT 1, DOUBLE ˇ
                                       01270002         LE    #F2,##CDR(
  GET DOUBLE FLOAT VALUE 1             01280002         B     COMDFLO1
                                      ˇ
    SINGLE FLOAT 1, SINGLE FLOAT 2       01300002         LE    #F2,##CD
    GET FLOAT VALUE 1                    01310002COMSFLO1 DS    0H
                                         01320002    ˇ
      GET SINGLE FLOAT VALUE 1             01330002COMSFLO2 DS    0H
                                           01340002         CER   #F2,#F
      COMPARE                              01350002         BNHR  #1ˇ
                                             01360002         LR    #15,
                                             01370002         BR    #14
                                             01380002         EJECT
   ˇ
          ARG 1 IS DOUBLE FLOAT                01400002         SPACE
                                               01410002         LD    #F
          GET DOUBˇ
                                                 01430002* CHECK TYPE OF
                                                 01440002*
                                                  01450002ˇÁ
  CLI   ##TYPE(#2),##DFLOAT                                      0146000
  BE    DFLODFLO            DFLOAT - DFLOAT = OK                 0147000
  CLI   ##TYPE(#2),##SFLOAT                                      0148000
    BE    DFLOSFLO            DFLOAT - SFLOAT = OK                 01490
    CLI   ##TYPE(#2),##FIXNUM                                      01500
    BE    DFLOFIX             FLOAT - FIXED = OK                   01510
    CLI  ˇ
      BE    DFLOBIG             FLOAT - BIG   = OK                   015
      B     ERROR               FLOAT - NONUM = ERROR                015
OFIX  DS    0H          ˇ
        L     #0,##CDR(,#2)       GET FIXED VALUE 2                    0
        LR    #7,#14              SAVE RETURN REGISTER                 0
        #BAS  #14,FIX2FLO         CONVEˇ
2         LR    #14,#7              RESTORE RETURN REGISTER
2         LDR   #F4,#F0             GET DOUBLE FLOAT VALUE 2
2         B     COMDFLO2                              ˇ
002         SPACE
002DFLOSFLO DS    0H                  DOUBLE FLOAT 1, SINGLE FLOAT 2
002         SDR   #F4,#F4                                            ˇ
40002         LE    #F4,##CDR(,#2)      GET DOUBLE FLOAT VALUE 2
50002         B     COMDFLO2
60002DFLODFLO DS    0H                  DOUBLE FLOAT 1, DOUBLE FLOAT 2
7000ˇ
1680002         LD    #F4,8(,#2)          GET DOUBLE FLOAT VALUE 1
1690002COMDFLO2 DS    0H
1700002         CDRˇ
 01710002         BNHR  #14
 01720002         LR    #15,#8
 01730002         BR    #14       ˇ
   01740002         EJECT
   01750002ARG1BIG  DS    0H                  ARG1 IS A BIGNUM
   01760002         SPACE                        ˇ
     01770002*
     01780002* CHECK TYPE OF ARG 2
     01790002*                                                  ˇ
       01800002         CLI   ##TYPE(#2),##FIXNUM
       01810002         BE    CBIGFIX             FIXED - FIXED = OK
       01820002         CLI   ##TYPE(#2),##BIGNUM

           01840002         CLI   ##TYPE(#2),##SFLOAT
           01850002         BE    CBIGSFLO            FIXED - FLOAT = OK
           01860002         CLI   ##TYPE(#2),##DFLOAT
           0ˇ
             01880002         B     ERROR               ANYTHING ELSE =
             01890002         SPACE
             01900002CFIXBIˇ
UM             01910002         SPACE
               01920002         TM    ##VECDAT(#2),X'80'  TEST SIGN OF B
               01930002         BZR   #14 ˇ
FIX NOT GT BIG   01940002         LR    #15,#8              IF BIGNUM NE
FIX IS GT BIG    01950002         BR    #14                  SO RETURN T
                 01960002         SPACE                  ˇ
                   01970002CBIGFIX  DS    0H                  COMPARE BI
FIXNUM             01980002         SPACE
                   01990002         TM    ##VECDAT(#1),X'80'  TEST SIGN
NUM                  02000002         BOR   #14                 IF BIGNU
VE, BIG NOT GT FIX   02010002         LR    #15,#8              IF BIGNU
VE, BIG IS GT FIX    02020002         BR    #14                  SO RETU
       ˇ
                       02040002CBIGBIG  DS    0H                  COMPAR
 TO BIGNUM             02050002         SPACE 1
                      ˇ
************************ 02070002*
                       * 02080002* THE FOLLOWING CODE DEPENDS ON THESE F
                       * 02090002*   ˇ
                         * 02100002*  (1) ALL BIGNUMS ARE NORMALIZED.
                         * 02110002*  (2) BIGNUMS ARE STORED IN 31-BIT "
 EACH DIGIT OCCUPYING A  * 02120002*      WORD, WITHˇ
D LEFTMOST.  I.E. THE      * 02130002*      BIGNUM "DIGITS" ARE STORED "
S".                        * 02140002*  (3) NEGATIVE BIGNUMS ARE STORED
 ABSOLUTE VALUE, EXCEPT    * 02150002*      THAT THE LEAST SIGNIFICˇ
ST) WORD HAS THE HIGH-ORDER  * 02160002*      BIT SET TO 1 (BUT IT IS NO
COMPLEMENT).                 * 02170002*
                             * 02180002*********************************
**ˇ
                                 02200002         ICM   #4,15,##VECDAT(#
 SIGN OF BIGNUM 1                02210002         BM    B1NEG
IGNUM 1 NEGATIVE,  CHECK BIG# 2   02220002ˇÁ
(#2),X'80'  BIG 1 IS POSITIVE.  SO...            02230002         BO
            IF BIGNUM 2 NEGATIVE, RETURN TRUE    02240002*
            ELSE COMPARE 2 POSITIVE BIGNUMS      02250002 ˇ
              CLEAR INSERT REGISTER                02260002         XR
              CLEAR INSERT REGISTER                02270002         ICM
(#1)          GET BIGNUM LENGTH 1                  02280002         ICM
,1(#2)          GET BIGNUM LENGTH 2                  02290002         CR
7               COMPARE LENGTHS                      02300002         BL
                IF FIRST IS SHORTER, B1 < B2         02310002         BH
        ˇ
,4                OTHERWISE WE HAVE TO COMPARE THEM.   02330002
,#7               SET INCREMENT REGISTER TO -4         02340002
,#7               INIT ˇ
0H                  LOOP FROM LAST WORD THRU TO FIRST    02360002
#0,##VECDAT(#5,#1)  COMPARE WORD FROM BIGNUM 1           02370002
#0,##VECDAT(#5,#2)  WITH WORD FROM BIGˇ
  TRUE                IF GREATER, B1 > B2                  02390002
  #14                 IF LESS, B1 < B2                     02400002
  #5,#7,BBPLOOP       =, DECREMENT INDEX AND LOOP UNTˇ
    #14                 NO MORE WORDS: ALL =, B1 NOT GT B2   02420002
ACE                                                          02430002B1N
    0H                  BIGNUM 1 IS NEGATIVE                 0244000ˇ
ICM   #6,15,##VECDAT(#2)  IF BIGNUM 2 IS POSITIVE              02450002
BNMR  #14                 THEN RETURN FALSE. ELSE...           02460002*
                          COMPARE 2 NEGATIVE BIGNUMS           02470002
XR ˇ
  XR    #7,#7               CLEAR INSERT REGISTER                0249000
  ICM   #5,7,1(#1)          GET BIGNUM LENGTH 1                  0250000
  ICM   #7,7,1(#2)ˇ
    CR    #5,#7               COMPARE LENGTHS                      02520
    BL    TRUE                IF FIRST IS SHORTER, B1 > B2         02530
    BHR   #14                 IF ˇ
      LA    #7,4                OTHERWISE WE HAVE TO COMPARE THEM.   025
      LCR   #7,#7               SET INCREMENT REGISTER TO -4         025
      AR    #5,#7               INIT INDEX TO BIˇ
BNLOOP  DS    0H                  LOOP FROM LAST WORD THRU TO FIRST    0
        L     #0,##VECDAT(#5,#1)  COMPARE WORD FROM BIGNUM 1           0
        CL    #0,##VECDAT(#5,#2)  WITH WORD FROM B2 (IGNORE SIG+
2         BHR   #14                 IF GREATER, B1 < B2      ˇ
002         BL    TRUE                IF LESS, B1 > B2
002         BXH   #5,#7,BBNLOOP       =, DECREMENT INDEX AND LOOP UNTIL.
002         BR    #14                 NO MORE WORDS: ALL =, B1 NOT GT B2
40002         SPACE 1
50002TRUE     DS    0H
60002         LR    #15,#8              TRUE... RESULT IS T
70002      ˇ
2680002         EJECT
2690002*
2700002* --- DELETE THIS Cˇ
 02710002*
 02720002ARG1STR  DS    0H                  ARG 1 IS STRING
 02730002*                               ˇ
   02740002* CHECK TYPE OF ARG 2
   02750002*
   02760002         CLI   ##TYPE(#2),##STRING           ˇ
     02770002         BE    COMPSS              STRING - STRING IS OK
     02780002         CLI   ##TYPE(#2),##SYMBOL
     02790002         BE    COMPSA              STRING - SYMBOL IS OK  ˇ
       02800002         B     ERROR               ALL OTHERS ARE NO GOOD
       02810002         SPACE
       02820002ARG1ALF  DS    0H                  ARG 1 IS SYMBOL
      ˇ
         02840002* CHECK TYPE OF ARG 2
         02850002*
         02860002    ˇ
           02870002         BE    COMPAS              SYMBOL - STRING IS
           02880002         CLI   ##TYPE(#2),##SYMBOL
           02890002         BE    COˇ
             02900002         B     ERROR               ALL OTHERS ARE N
             02910002         SPACE
             02920002COMPAS   DS    0H             ˇ
RE             02930002         L     #1,##PNAME(,#1)     GET PRINT NAME
OL 1           02940002         B     COMPSS              COMPARE STRING
               02950002         SPACE                             ˇ
                 02960002COMPSA   DS    0H                  STRING-TO-SY
PARE             02970002         L     #2,##PNAME(,#2)     GET PRINT NA
MBOL 2           02980002         B     COMPSS              COMPARE STRI
                  02990002ˇÁ
                                 03000002COMPAA   DS    0H
OL-TO-SYMBOL COMPARE             03010002         L     #1,##PNAME(,#1)
PRINT NAME OF SYMBOL 1           03020002 ˇ
T PRINT NAME OF SYMBOL 2           03030002******** B     COMPSS
MPARE STRINGS                      03040002         SPACE
                                   03050002COMPSS   DS   ˇ
STRING-TO-STRING COMPARE             03060002         SPACE 1
                                     03070002         XR    #5,#5
CLEAR INSERT REGISTER                03080002         XR    #7,#7
  CLEAR INSERT REGISTER                03090002         ICM   #5,7,1(#1)
  GET STRING LENGTH 1                  03100002         ICM   #7,7,1(#2)
  GET STRING LENGTH 2                  03110002         LA    #4,##VECDA
  POINTˇ
    POINT TO STRING TEXT 2               03130002*
                                         03140002*
    #4 = ADDRESS OF ARˇ
      #5 = LENGTH OF ARG 1 DATA            03160002*
      #6 = ADDRESS OF ARG 2 DATA           03170002*
      #7 = LENGTH OF ARG 2 DATA      ˇ
                                             03190002         CR    #5,#
        COMPARE LENGTHS                      03200002         BL    SHOR
        IF FIRST IS SHORTER, GO HANDLE THAT  0321000ˇ
          IF FIRST IS LONGER, GO HANDLE THAT   03220002         CLCL  #4
          OTHERWISE JUST DO COMPARE            03230002         BNHR  #1
          ARG1 LE ARG2: RETURN NIL             03240002         LR ˇ
            ARG1 GT ARG2: RETURN T               03250002         BR
                                                 03260002         SPACE
                                                 03270002SHORTCOM DS
  ˇ
              USE SHORT LENGTH FOR COMPARE         03290002         CLCL
              DO COMPARE                           03300002         BNHR
              ARGˇ
#8              ARG1 GT ARG2: RETURN T               03320002         BR
                                                     03330002         SP
                                ˇ
                  ARG1 LONGER THAN ARG2                03350002
,#7               USE SHORT LENGTH FOR COMPARE         03360002
,#6               DO COMPARE                   +
#14                 ARG1 LT ARG2: RETURN NIL ˇ
  #15,#8              ARG1 GE ARG2: RESULT IS T            03390002
  #14                                                      03400002*
                                                           0ˇ
ODE TO DELETE FOR FULL COMMON LISP                           03420002*
                                                             03430002
ECT                                                          03440002
COPY  FIX2FLO             FIXED TO FLOAT CONVERSION ROUTINE    03450002
EJECT                                                          03460002C
DS    0H                                                       03470002C
DS    0H  ˇ
  DS    0H                                                       0349000
  DS    0H                                                       0350000
  LR    #5,#1            ˇ
    LR    #6,#2                                                    03520
    #ERR  2,'ZIL4101 GREATERP: Float-to-bignum compare not supportX03530
          ed.',PREFIX=NO,SIGNAL=NO      ˇ
      B     BOMBOUT                                                  035
OR    DS    0H                  INVALID TYPES                        035
      LR    #5,#1                                      ˇ
        LR    #6,#2                                                    0
OMBOUT  #ERR  'Type conflict, GREATERP cannot compare ',              X0
              (#5),' and ',(#6)                                       ˚
2         SPACE 1
2         LTORG
2         END
2{
NE'                  00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002         SPACE 1
                         00017002***************************************
************************ 00018002*                          ˇ
                         * 00019002* THIS IS THE MACLISP "HAIPART" FUNCT
 TAKES AN INTEGER ARG    * 00020002* AND RETURNS THE FIRST N BITS IN THE
E VALUE THEREOF,         * 00030002* NOT INCLUDING LEADING ZERO BITS.
                           * 00040002*
                           * 00050002* ARG 1 = THE NUMBER FROM WHICH THE
ART" IS TO BE TAKEN        * 00060002* ARG 2 = THE NUMBER OF BITS TO TAK
NG WITH THˇ
                             * 00080002* IF ABS(ARG 2) IS GREATER THAN 3
ARG 1) IS RETURNED.          * 00090002*
                         ˇ
                               * 00110002*
                               * 00120002* IF ARG 1 IS ZERO, THE RESULT
S ZERO.                        * 0013000ˇ
 SHIFTED AND RIGHT SHIFTED TO    * 00140002* RETURN THE LOW-ORDER (ABS A
S OF ARG 1.                      * 00150002* OTHERWISE, ARG 1 IS LEFT SH
TIL A 1-BIT APPEARS IN THE       * 00160002* LEFTMOST Pˇ
IS RIGHT SHIFTED (32-ARG2) BITS.   * 00170002*
                                   * 00180002* BIGNUMS ARE ALSO SUPPORTE
1.                                 * 00190002*                        ˇ
                                     * 00200002*************************
************************************** 00210002         SPACE 1
                                       00220002HAIPART  #ZBEG MINARGS=2,
2,NAMˇ
                                         00240002         #ZSAV ,
                                         00250002         SPACE 1
                    ˇ
      GET ARG1                             00270002         CLI   ##TYPE
FIXNUM ARG1 MUST BE A FIXNUM OR A BIGNUM   00280002         BNE   NFIX1
                                   +
        GET ARG2                 ˇ
,##FIXNUM ARG2 MUST BE A FIXNUM                00310002         BNE   ER
                                               00320002         L     #2
#15)      GET ARG 1 VALUE                      0ˇ
            Clear second half of reg pair        00340002         LPR
            GET ITS ABSOLUTE VALUE               00350002         BO
            If overflow, must be -2147483648     00360002      ˇ
O             IF ZERO, ANSWER = ZERO,              00370002         ICM
##CDR(#4)     GET ARG 2 VALUE                      00380002         BM
G             IF NEGATIVE, PROCESS NEGATIVE        00390002         CH
H'31'           IF GREATER THAN 31                   00400002         BH
BS1             THEN RETURN (ABS ARG1)               00410002         SP
                                                     00420002PROCESS  DS
             ˇ
                                                       00440002* NOTE TH
ST BE POSITIVE, SINCE WE TOOK ABSOLUTE VALUE.          00450002*
                            ˇ
                    #2 CONTAINS THE ABSOLUTE VALUE       00470002*
                    #3 CONTAINS ADD'L LOW-ORDER BITS     00480002*
                    #4 CONTAINS BIT COUNT Tˇ
                                                           00500002
E 1                                                        00510002LOOP
  0H                  LOOP UNTIL WE GET 1-BIT IN LEFTMOST ˇ
DL  #2,1                SHIFT OUT LEFTMOST BIT               00530002
R   #2,#2               IF DIDN'T GO NEGATIVE YET            00540002
M   LOOP                THEN KEEP LOOPING                    00550002
LA    #1,32               GET SHIFT AMOUNT = 32 MINUS ARG2     00560002
SR    #1,#4                                                    00570002
SRL   #2,0(#1)            SHIFT RIGHT BY THAT AMOUNT           00580002
#MKAT FIˇ
  B     RETURN              AND RETURN WITH IT                   0060000
  SPACE 1                                                        0061000
  DS    0H             ˇ
    SPACE 1                                                        00630
    LPR   #4,#4               GET ABSOLUTE VALUE OF ARG2           00640
    CH    #4,=H'31'           IF GREATˇ
      BH    RETABS1             THEN RETURN (ABS ARG1)               006
ORDER DS    0H                                                       006
      LA    #1,32               GET SHIFT AMOUNT = 32  MINUS ARG2     0
Á
     00690002         SLDL  #2,0(#1)            SHIFT LEFT BY THAT AMOUN
     00700002         SRL   #2,0(#1)            SHIFT RIGHT BY THAT AMOU
     00710002Rˇ
 ARG1) 00720002         #MKAT FIXED               MAKE INTO A FIXNUM
       00730002         B     RETURN              AND RETURN WITH IT
       00740002         SPACEˇ
         00750002RETZERO  DS    0H                  HERE IF WE KNOW ANSW
BE ZERO  00760002         LA    #15,#SFT0           POINT TO FIXNUM 0
         00770002         B     RETURN      ˇ
           00780002         SPACE 1
           00790002MAXNEG   DS    0H                  Arg 1 is -21474836
           00800002         SPACE 1                        ˇ
             00810002         LA    #15,TWOTO31         Load bignum 2147
             00820002         B     ARG1BIG
             00830002         SPACE 1
               00840002NFIX1    DS    0H                  Arg 1 is not a
               00850002         SPACE 1
               00860002         CLI   ##TYPE(#15),##BIGNUM
         ˇ
rror             00880002         SPACE 1
                 00890002ARG1BIG  DS    0H                  Arg 1 is a b
                 0090000ˇ
                   00910002         L     #4,4(,#11)          GET ARG2
                   00920002         CLI   ##TYPE(#4),##FIXNUM ARG2 MUST
NUM                00930002         BNEˇ
                     00940002         SPACE 1
                     00950002*******************************************
******************** 00960002*                        ˇ
                     * 00970002* Test arg2 - see if it is zero, negative
ve - also if > 31    * 00980002*
                     * 00990002**************************************ˇ
************************ 01000002         SPACE 1
                         01010002         ICM   #4,15,##CDR(#4)     Get
lue                      01020002         BZ    RETZERO             If z
urn ˇ
e, process negative        01040002         CH    #4,=H'31'           If
lue greater than 31        01050002         BH    PRETBIG             th
to return bignum   +
itive arg2 in fixˇ
                               01080002*********************************
****************************** 01090002*
                             * 0ˇ
abs bignum-arg1) and shift     * 01110002* left until we get a 32-bit nu
h that the leftmost bit is 1.  * 01120002*
                               * 01130002* Noteˇ
, it will get shifted out anyhow * 01140002*
                                 * 01150002*****************************
********************************** 01160002         SPACE 1   ˇ
                                     01170002******** L     #15,0(,#11)
Get pointer to arg1                  01180002         XR    #1,#1
                                     01190002         ICM   #1,7,1(#15)
  Get bignum length                    01200002         LA    #14,##VECD
#15) Point to most significant word    01210002         SH    #14,=H'4'
  Bump back to 2nd most significant wd 01220002         L     #3,0(,#14)
  Load seconˇ
    Zero possible sign bit to make ABS   01240002         L     #2,4(,#1
    Load most significant word           01250002         SLL   #3,1
    Bring halves together  ˇ
      Shift 62-bit number into reg pair    01270002         B     PROCES
      Go to to compute fixnum value        01280002         SPACE 1
                                          ˇ
        Bignum arg 1, negative arg 2         01300002         SPACE 1
                                             01310002         LPR   #4,#
        Get absolute value of arg2           01320002    ˇ
          If greater than 31                   01330002         BH    NR
          then need to return bignum           01340002         SPACE 1
                                               01350002*****************
************************************************ 01360002*
                                               * 01370002* Get the least
cant word of bignum arg1 and proceed as if     * 01380002* for fixnum ar
       ˇ
                                                 * 01400002*************
************************************************** 01410002         SPAC
                      ˇ
#VECDAT(,#15)   Get LSW of bignum                    01430002         N
X'7FFFFFFF'     Zero out possible sign bit           01440002         XR
3               Clear second half of  reg pair        01450002ˇÁ
      B     ARG2NEG             Go process                           014
      SPACE 1                                                        014
TBIG  DS    0H                  HAIPART of bignum by N:N>31          014
        SPACE 1                                                        0
        LA    #6,1                Set arg2 sign flag positive          0
        B     RETBIG              Go to process bignum HAIPART         0
        SPACEˇ
2NRETBIG  DS    0H                  HAIPART of bignum by N:N>31
2         SPACE 1
2         XR    #6,#6       ˇ
002         BCTR  #6,0
002         B     RETBIG              Go to process bignum HAIPART
002         SPACE 1                        ˇ
80002RETBIG   DS    0H                  HAIPART of bignum by N:N>31
90002         SPACE 1
00002*****************************************************ˇ
1610002*
1620002* Logic for computing HAIPART where arg1 is a bignum and arg2 is
1630002* positive integer greater than 31.
 01640002*
 01650002* arg2 is the number of bits in the resulting bignum.  Thus, we
 01660002* reserve space for it, knowing that the number of words in it
 0167000ˇ
 * 01680002*
 * 01690002* Compute the number of SIGNIFICANT bits in arg1 (this is the
 * 01700002* as (HAULONˇ
   * 01710002* return (ABS arg1), by definition per the Maclisp manual.
   * 01720002*
   * 01730002* Otherwise, processing dˇ
     * 01740002* positive or negative.
     * 01750002*
     * 01760002* If arg2 is negative, we must take thˇ
       * 01770002* bignum arg1 and return it as a bignum. So go to RETBI
       * 01780002*
       * 01790002* Otherwise, get the most significant word of arg1 ˇ
hift it  * 01800002* until the high-order bit is 1.  This tells us the n
 bit     * 01810002* positions to shift the entire arg1 to get rid of al
ading    * 01820002* zero bits (note that we actually shifted 1 more tha
tua+
eˇ
he right     * 01850002* to make it correct.
             * 01860002*
             * 0ˇ
ry to build    * 01880002* the result.  This is at most 1 more than the
f words in     * 01890002* the result.  Left shift that number of bigits
 the amount    * 01900002* deteˇ
ady correctly    * 01910002* shifted), rippling the shifted-out bits of
d into its       * 01920002* more significant neighbor.  This gives a ne
, which is       * 01930002* the original arg1ˇ
h is irrelevant,   * 01940002* since HAIPART will give us the same resul
).                 * 01950002*
                   * 01960002* Divide arg2 (the number of bitˇ
by 31; the remainder * 01970002* lets us figure out how many bit positio
ght-shift the result * 01980002* after we compute it by taking the first
 of the result of    * 01990002* the previous operation, where N is the
 of words of arg1      * 02000002* necessary to build the result minus 1
equals the number of   * 02010002* words in the result, remember?).  The
of bit positions to    * 02020002* right-shift is equal to 31 minus that
er.  Thus wˇ
 in the MSW of the       * 02040002* result.
                         * 02050002*
                         *ˇ
y that amount, letting     * 02070002* the shifted-out bits of each word
in its less significant    * 02080002* neighbor.  Return the resulting b
 the value of HAIPART.     * 02090002*   ˇ
                             * 02100002*********************************
****************************** 02110002         SPACE 1
                               02120002*****************ˇ
******************************** 02130002*
                               * 02140002* Reserve space for the resulti
m, arg2 being the # of bits.   * 02150002*                             ˇ
                                 * 02160002* The length is
                                 * 02170002*    (arg2-1)/31+1.
                                 * 02180002*
      ˇ
                                   * 02200002*    #4  -     value of arg
r of bits in result)               * 02210002*    #5  -     pointer to r
gnum                                * 02220002ˇÁ
                                                   * 02230002***********
**************************************************** 02240002         SP
                                                     02250002 ˇ
,#4               Get arg2 value                       02260002
,0                Subtract 1                           02270002
,#0               Clear left half of dividend          02280002
#0,=F'31'           Divide by 31                         02290002
#2,#1               Get quotient                         02300002
#2,1(,#2)           Add 1 to get # of words for bignum   02310002
#2,2        ˇ
  #3,#2               Save this length                     02330002
  #15,ZLCBIG          Get address of ZILBIG                02340002
  #2,4(,#2)           Add 4ˇ
ASR #14,#15             Call ZILBIG to reserve bignum space  02360002
    #5,#15              #5 = address of new bignum           02370002
CM  #3,7,1(#5)          Store length of biˇ
L     #15,0(,#11)         #15 =  pointer to arg1               02390002
SPACE 1                                                        02400002*
*********************************************************ˇ
                                                               * 0242000
te the number of SIGNIFICANT bits in arg1 (this is the same    * 0243000
AULONG arg1).  If this value is greater than arg2, then        * 0244000
urn (ABS arg1), by definition per the Maclisp manual.            * 02450
                                                                 * 02460
****************************************************************** 02470
    SPAˇ
      XR    #14,#14             Clear insert register                024
      ICM   #14,7,1(#15)        Get length of arg1 bignum text       025
      SH    #14,=H'4' ˇ
        L     #3,##VECDAT(#14,#15) Get most significant word of arg1   0
        SRA   #14,2               Divide length by 4 to get # of bytes 0
        LR    #2,#14              theˇ
2         SLA   #2,5                Multiply by 31 (32X - X = 31X)
2         SR    #2,#14              to get number of bits in these words
2         LA    #2,31(,#2)          Set presumed bitˇ
002         XR    #7,#7               Clear shift count to zero
002*                                  #3 contains MSW of arg1
002*                                  #7 will tell us how many to s+
00002HAULOOP  DS    0H                  Loop until we determine #ˇ
2610002         SLL   #3,1                Shift out leftmost bit
2620002         LTR   #3,#3               Test sign to see if we hit a 1
2630002*        BZ    ...                 (can never be zero, from a big
ˇ
 02650002         LA    #7,1(,#7)           Else increment shift count
 02660002         BCT   #2,HAULOOP          Else reduce bit count and co
 02670002GOTIT ˇ
   02680002         SPACE 1
   02690002*************************************************************
** 02700002*                  ˇ
   * 02710002* If (ABS arg2) is greater than (HAULONG arg1), return (ABS
   * 02720002*
   * 02730002********************************ˇ
****** 02740002         SPACE 1
       02750002         L     #4,4(,#11)          Reload arg2
       02760002         L     #4,##CDR(,#4)       Get value ˇ
         02770002         LPR   #4,#4               Take (abs arg2)
         02780002         CR    #4,#2               If arg2 > (haulong a
         02790002         BH    RETABSB             then return (abs arg
           02800002         SPACE 1
           02810002*****************************************************
********** 02820002*
         *ˇ
           * 02840002*
           * 02850002***************************************************
************ 02860002    ˇ
               02870002         LTR   #6,#6
               02880002******** BP    RETBIGP
               02890002         BM    REˇ
                 02900002         SPACE 1
                 02910002RETBIGP  DS    0H
                 02920002         SPACE 1              ˇ
                   02930002*********************************************
****************** 02940002*
                 * 02950002* Positive:  get the most significant word ˇ
and left shift it  * 02960002* until the high-order bit is 1.  This tell
 number of bit     * 02970002* positions to shift the entire arg1 to get
all the leading    * 02980002* zero bits (note that we actually shifted
han t he actual     * 02990002ˇÁ
ons to shift is the number we had  * 03000002* to shift the MSW minus 1.
the MSW back by 1 to the right     * 03010002* to make it correct.
                                   * 03020002*ˇ
                                     * 03030002*************************
************************************** 03040002         SPACE 1
                                       03050002         SRL  ˇ
    Shift MSW into "normal" position     03060002*
    #7 already contains correct # pos.   03070002         SPACE 1
                                         03080002***********************
****************************************** 03090002*
                                         * 03100002* We then take only t
r of words of arg1 necessary to build    * 03110002* the result.  This i
t 1 more thˇ
hat number of bigits over by the amount    * 03130002* determined above
for the MSW, which is already correctly    * 03140002* shifted), ripplin
ifted-out bits of each worˇ
or.  This gives a new bignum, which is       * 03160002* the original ar
d to some power of 2 (which is irrelevant,   * 03170002* since HAIPART w
 us the same result anyhow).             ˇ
                                               * 03190002***************
************************************************ 03200002         SPACE
                                                 0321000ˇ
r to words in result                               03220002*    #15 -
r to words in arg1                                 03230002*    #0  -
er pair for shifting                               03240002*    #1  -  ˇ
ster pair for shifting                               03250002*    #2  -
long arg1)                                           03260002*    #3  -
ady-shifted MSW of arg1; holder of each shifted word 03270002*    #4  -
e of aˇ
inter to result bignum                                 03290002*    #6
                                                       03300002*    #7
mber of bit positionsˇ
1                                                        03320002*
                    Set 4(#14) = MSW of result           03330002
#0,#0               Clear insert regˇ
  #0,7,1(#5)          Get length of result bignum          03350002
  #14,##VECDAT(,#5)                                        03360002
  #14,#0              Point to end of result bignum+
    #14,=H'8'           Point to MSW of result biˇ
                          Set 0(#15) = next-to-MSW of arg1     03390002*
L     #15,0(,#11)                                              03400002
XR    #0,#0               Clear insert register                0ˇ
  ICM   #0,7,1(#15)         Get length of arg1 bignum            0342000
  LA    #15,##VECDAT(,#15)                                       0343000
  AR    #15,#0              Point to end of arg1 bignum          0344000

    SPACE 1                                                        03460
****************************************************************** 03470
              ˇ
oop decrementing #14 and #15 until #14 = #5, storing shifted       * 034
ords from 0(#15) into 4(#14).  Note that #3 already contains       * 035
art of the first (most signifˇ
                                                                     * 0
********************************************************************** 0
        SPACE 1                             ˇ
2LSLOOP   DS    0H
2         CR    #14,#5              Until we hit the end of the result
2         BL    LSEND                                      ˇ
002         XR    #0,#0               Clear left half of reg pair
002         L     #1,0(,#15)          Get next-MSW of arg1
002         SLL   #1,1                Shift out sign bit
00002         SLDL  #0,0(#7)            Left shift (#7) bits into left r
10002         OR    #3,#0               Combine previous bits with shift
20002         ST    #3,4(,#14)          Store into word of result bignum
30002    ˇ
3640002         SRL   #3,1                Shift back in a zero sign bit
3650002         SH    #15,=H'4'           Decrement arg1 pointer
3660002         SH    #1ˇ
 03670002         B     LSLOOP              Loop
 03680002LSEND    DS    0H
 03690002         SPACE 1              ˇ
   03700002*************************************************************
** 03710002*
 * 03720002* Now we have a complete result bignum.  Buˇ
   * 03730002* If the number of bits in the result is not a multiple of
   * 03740002* have to right shift all the words to get leading zeroes i
   * 03750002* of trailing zeroes.                                   
     * 03760002ˇÁ
                   * 03770002*******************************************
******************** 03780002         SPACE 1
                     03790002*ˇ
********************** 03800002*
                     * 03810002* Divide arg2 (the number of bits in the
by 31; the remainder * 03820002* lets us figuˇ
right-shift the result * 03830002* after we compute it by taking the fir
ds of the result of    * 03840002* the previous operation, where N is th
 of words of arg1      * 03850002* necessary to build the reˇ
h equals the number of   * 03860002* words in the result, remember?).  T
r of bit positions to    * 03870002* right-shift is equal to 31 minus th
nder.  Thus we end up    * 03880002* with the proper number of leading z
ts in the MSW of the       * 03890002* result.
                           * 03900002*
                           * 03910002***********************************
**********ˇ
                             * 03930002*    #0  -     register pair for
                             * 03940002*    #1  -     register pair for
                         ˇ
 bits in result)               * 03960002*    #5  -     pointer to resul
                               * 03970002*
                               * 0398000ˇ
********************************** 03990002         SPACE 1
                                   04000002         XR    #14,#14
ear left half of reg pair          04010002         LR ˇ
Load value of arg2 (# of bits)       04020002         D     #14,=F'31'
Divide by 31                         04030002*
#15 = quotient, #14 = remainder      04040002         LTR   #14,#14   ˇ
  If no remainder                      04050002         BZ    READY
  then we're done, return result       04060002*
  Compute amount to shift = 31-#14     04070002         LA    #7,31
     ˇ
    Amount to right-shift result         04090002         SPACE 1
                                         04100002***********************
********************ˇ
                                         * 04120002* Right-shift all the
n the result by that amount, letting     * 04130002* the shifted-out bit
h word end up in its less significa+
ulting bignum as the value of HAIˇ
                                             * 04160002*****************
********************************************** 04170002         SPACE 1
                                               0ˇ
            Set 4(#14) = each word of result     04190002         XR
            Clear insert register                04200002         ICM
5)          Get length of result bignum          04210002      ˇ
VECDAT(,#5)                                        04220002         AR
              Point to end of result bignum        04230002         SH
'8'           Point to MSW of result bignum        04240002         SPAC
                                                     04250002***********
**************************************************** 04260002*
                                                   * 04270002* Loop decr
 #14 until #1ˇ
o themselves.                                        * 04290002*
                                                     * 04300002* Note th
 will be no negative sign biˇ
e.                                                     * 04320002*
                                                       * 04330002*******
*******************************************ˇ
E 1                                                        04350002
  #3,#3               Clear reg for building shifted wds   04360002
E 1                                                       ˇ
    0H                                                       04380002
    #14,#5              Until we hit the end of the result   04390002
    RSEND                                                    04400002
L     #0,4(,#14)          Load a word of the result bignum     04410002
XR    #1,#1               Clear right half of register pair    04420002
SRDL  #0,0(#7)            Shift right (#7) bits                04430002
OR    #3ˇ
  ST    #3,4(,#14)          Store back into result bignum        0445000
  LR    #3,#1               Set up for next word                 0446000
  SRL   #3,1           ˇ
    SH    #14,=H'4'           Decrement pointer                    04480
    B     RSLOOP              Loop                                 04490
    DS    0H                          ˇ
      SPACE 1                                                        045
******************************************************************** 045
                                                                    * 0
Á
   * 04540002*
   * 04550002***********************************************************
**** 04560002 ˇ
       04570002READY    DS    0H
       04580002         LR    #15,#5              Point to result bignum
       04590002         XR   ˇ
         04600002         ICM   #1,7,1(#15)         Get length of result
         04610002         LA    #0,##VECDAT(#1,#15) Point to end of bign
         04620002         ST    #0,ZLCVSNXT ˇ
nter       04630002         B     RETURN              Return
           04640002         SPACE 1
           04650002RETBIGN  DS    0H                  HAIPAˇ
<(-31)       04660002         SPACE 1
             04670002***************************************************
************ 04680002*
             * 04690002* Logic for (HAIPART arg1 arg2) where arg1 is a b
d arg2 is    * 04700002* a negative integer less than -31:
             * 04710002*
         ˇ
To do this,    * 04730002* we figure out how many bignum words are requi
old the        * 04740002* result.   (Henceforth, let absarg2 = (abs arg
e number of    * 0475000ˇ
gnum of          * 04760002* that size, and copy the least significant N
rom arg1 to      * 04770002* the result (this will be ##VECDAT off arg1
ngth of N*4,     * 04780002* making an ˇ
esult to force     * 04790002* taking of (abs arg1).
                   * 04800002* Now, if absarg2 is not a multiple of 31,
need to mask out   * 04810002* the extra leading bits.ˇ
 based on the        * 04820002* remainder of absarg2/31, so that only t
 bits are left in    * 04830002* the most significant word of the result
                     * 04840002*                                     ˇ
                       * 04850002* As a final step, remove leading zero
rom the result.        * 04860002*
                       * 04870002***************************************
****ˇ
                           04890002*************************************
************************** 04900002*
                   +
                 ˇ
                             * 04930002* Move correct # of words of bign
to result bignum             * 04940002*
                             * 0ˇ
******************************** 04960002         SPACE 1
                                 04970002         L     #15,0(,#11)
 arg1                            04980002      ˇ
                                   04990002         ICM   #3,7,1(#5)
ad length of result bignum         05000002         LA    #14,##VECDAT(,
urce address                       05010002         LR    #15,ˇ
Source length                        05020002         LA    #0,##VECDAT(
Destination address                  05030002         LR    #1,#3
Destination length                   05040002         MVCL  #0,#14
  Move from arg1 to result             05050002         NI    ##VECDAT(#
  Force sign bit positive              05060002         SPACE 1
                                       05070002*************************
************ˇ
                                       * 05090002* If absarg2 is not a m
of 31, we will need to mask out        * 05100002* the extra leading bit
enerate a bit mask based onˇ
 that only that many bits are left in    * 05120002* the most significan
f the result bignum.                     * 05130002*
                                         *ˇ
******************************************** 05150002         SPACE 1
                                             05160002         LR    #1,#
        Set up regs for divide               05170002    ˇ
                                               05180002         D     #0
          Quotient in #1, remainder in #0      05190002         LTR   #0
          If remainder is zero                 05200002         BZ    NR
            then result is already OK, return    05210002         SPACE
                                                 05220002***************
************************************************ 05230002*
       ˇ
generate a bit mask with which to AND the MSW    * 05250002* of the resu
m.                                               * 05260002*
                      ˇ
**************************************************** 05280002         SP
                                                     05290002         LA
1               # of bits to zero out  = ...          05300002ˇÁ
      SR    #2,#0                31 minus remainder                  053
      L     #3,=X'7FFFFFFF'     Initialize mask to 31 1-bits         053
KLOOP DS    0H                  Loop to turn #3 into a bit mask      053
        SRL   #3,1                Shift in a zero-bit                  0
        BCT   #2,MASKLOOP         Do it 31-(mod absarg2 31) times      0
*******                           Register cleared (by BCT) for insert 0
        ICM  ˇ
2         LA    #1,##VECDAT-4(#2,#5) Point to MSW of result bignum
2         N     #3,0(,#1)           And it with our bit mask
2         ST    #3,0(,#1)   ˇ
002         SPACE 1
002NREADY   DS    0H                  Almost ready to return result
002         SPACE 1                        ˇ
30002*******************************************************************
40002*
50002* Remove all leading zero bigits from the result.  Itˇ
5460002* this to culminate in the return of a fixnum.
5470002*
5480002*****************************************************************
 05490002         SPACE 1
 05500002         XR    #3,#3
 05510002         ICM   #3,7,1(#5)          Get result bignum length
 0552000ˇ
   05530002         XR    #0,#0               Make a zero
   05540002         LA    #7,4                Make a four
   05550002NRLOOP   DS ˇ
     05560002         CR    #3,#7               If length of bignum text
 4   05570002         BNH   RNFIXNUM            then change to a fixnum
     05580002         C     #0,0(,#1) ˇ
       05590002         BNE   NREND               then...
       05600002         SR    #3,#7                decrement bignum text
by 4   05610002         SR    #1,#7                deˇ
         05620002         B     NRLOOP               and continue loopin
         05630002NREND    DS    0H
         05640002         STCM  #3,7,1(#5)          Store corrected ˇ
gth        05650002         LR    #15,#5              Get pointer to res
um         05660002         LA    #1,##VECDAT(#3,#5)  Point to end of bi
           05670002         ST    #1,ZLCVSNXT         Update VSS pointer
   +
 ˇ
               05700002RNFIXNUM DS    0H                  Result turns i
xnum!          05710002         SPACE 1
               0ˇ
                 05730002         #MKAT FIXED               Make a fixnu
 it              05740002         B     RETURN              Return with
                 05750002      ˇ
                   05760002RETABSB  DS    0H                  Return (AB
 arg1 bignum       05770002         SPACE 1
                   05780002         TM    ##VEˇ
dy positive          05790002         BZ    RETURN              then jus
 it                  05800002         XR    #2,#2               CLEAR IN
ISTER                05810002         ICM   #2,7,1(#15)      ˇ
GTH                    05820002         LA    #2,4(,#2)           PLUS L
 HEADER                05830002         LR    #3,#2               SAVE T
TH                     05840002         L     #15,ZLCBIG          GET AD
OF BIGNUM MAKER          05850002         #BASR #14,#15             CALL
                         05860002         LR    #4,#15              SAVE
 OF NEW BIGNUM           05870002         LR    #0,#4               DEST
ADDRESS    ˇ
RESS = arg1                05890002         LR    #1,#3               DE
N LENGTH                   05900002         LR    #15,#3              SO
GTH                       ˇ
 BIGNUM TO NEW BIGNUM        05920002         ST    #0,ZLCVSNXT
/S-SPACE POINTER             05930002         LR    #15,#4
ESS OF BIGNUM AGAIN          05940002    ˇ
FF SIGN BIT TO MAKE IT PLUS    05950002******** B     RETURN
 with (abs bignum)             05960002         SPACE 1
                               05970002RETURN   DS    0Hˇ
E IS IN #15 HERE                 05980002         SPACE 1
                                 05990002         #ZRET ,
                                 06000002         SPACE 1              ˇ
                                   06010002ERROR1   #ERR  'Argument 1 to
 not an integer - ',0(#11)         06020002ERROR2   #ERR  'Argument 2 to
 not a fixnum - ',4(#11)           06030002*RROR3   #ERR  'Cannot comput
T of 'ˇ
                                     06050002TWOTO31  DC    YL1(##BIGNUM
,F'0,1'  Bignum 2147483648           06060002         SPACE 1
                                      06070002ˇÁ
                                                     06080002         SP
                                                     06090002         EN
                                                     06100002

         ***************************************************************
 00012000*
 00013000*ˇ
 * 00014000*                     All rights reserved.
 * 00015000*
 * 00015100**************ˇ
****         *
   *         * HAULONG takes one integer argument.
   *         *                          ˇ
     *         * Maclisp complete.
     *         *
     *         * Idiom for (INTEGER-LENGTH (ABS n)) in ˇ
       *         *
       *         * Scalar and vector versions.
       *         *                                                    ˇ
         *         *****************************************************
**********                  GBLB  &ZILVF
                   HAULONG  #ZBEG MINARGS=1,MAXARGS=1,NAME='HAULONG'
     ˇ
-----------*         * Calculate the number of significant bits in the i
 The       *         * number of bits up to and including the lefmost "1
 the       *        ˇ
umber 0      *         * having a length of 0.
             *         *
             *         * For bignumˇ
 word, plus 31 *         * times the number of remaining words.
               *         *
               *         * In the scalar version, ˇ
smaller fixnums  *         * by searching for the leftmost significant b
arching from     *         * the right.
                 *         *                                     ˇ
                   *         * The difference in speed between the vecto
alar versions      *         * is always marginal on an IBM 3090.  For s
nums, the scalar   *         * version is actually a tiny bit faster, du
ˇ
y be implemented     *         * for machines that have IBM/370 Vector F
s because the        *         * potential speedup of the vector hardwar
ure products is+
ctions used tˇ
tions on the IBM 3090.   *         *
                         *         * The vector instruction VCZVM does e
hat we want.  We should  *  ˇ
 hardware bottlenecks      *         * and programming around them.  As
le, when going from the    *         * IBM 3084 to the IBM 3090, the dou
t scalar instructions      *         * speeˇ
le, while the single-shift   *         * instructions were the same numb
cles.  Thus, anyone who      *         * simulated certain uses of doubl
 in alternate ways because   *         * of the slow speedˇ
, got screwed and can't get    *         * the benefit now that the doub
s are speeded up on the IBM    *         * 3090.
                               *         *------------------------------
---------------------------------*                  AIF   (&ZILVF).VFIX
                                           *----------------------------
---------------------------------*         * Scalar version.  Start here
 cases. ˇ
-----------------------------------*                  L     #7,0(,#1)
Load argument                                         XR    #5,#5
Clear, need this for maˇ
M Is arg a fixnum?                                      BNE   NF
  Branch if not fixed                          *
                                      ˇ
    Load fixnum                                           LPR   #6,#6
    We need only the magnitude                            BZ    FZ
    Fixnum is zero, no count                         ˇ
      It's most neg fixnum, 32 bits                FPLOOP   SRA   #6,1
      Have at least one 1, pop it out                       LA    #5,8(,
      Count by 1 in small fixnum table                      BNZ   FPˇ
        We have more bits to count                            LA    #15,
        Point to correct number in SFT                        BR    #14
        Return to caller                             *
   ˇ
          Point to 0 in SFT                                     BR    #1
          Return to caller                             *
                  ˇ
+8*32       Point to 32 in SFT                                    BR
            Return to caller                             *--------------
--------------------------------- --------------*         ˇÁ
r version.  Continue here if not a fixnum.  Note that a faulty *
m containing a leading 0 word will loop forever at label MORE. *
---------------------------------------------------------------*
    CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
    BNE   ERROR1              Branch if not fixed
    ICM   #5,B'0111',1(#7)    Load bignum length
    LR   ˇ
      L     #6,##VECDAT-4(#5,#7) Get most significant word
      SRA   #2,2                /4, change bytes to words
      MH    #2,=H'31'   ˇ
        SLA   #6,1                Shift out a bit on the left
        BO    COUNTED             Most significant bit shifted out
ORE     SLA   #6,1                Shiftˇ
          BCTR  #2,0                Decrease count of bits
          BNO   MORE                More bits need to be examined
 COUNTED  CL    #2,ZLCSFTHI         Is answer in smallˇ
            BH    FCONS               No?  Must cons up a new fixnum
            SLL   #2,3                *8 for offset in SFT
            LA    #15,#SFT(#2)        Calculate small fixnum table adˇ
              BR    #14                 Return to caller
     *
     FCONS    LR    #6,#14              Save return address
    ˇ
                BR    #6                  Return to caller
       *================================================================
                AGOˇ
         .VFIX    ANOP
         *--------------------------------------------------------------
         *  Vector version of HAULˇ
 *         *
 *         *  The vector mask instructions are used to count the zeroes
 *         *  left of the leftmost 1 in the fixnuˇ
   *         *  This is then subtracted from the maximum number of bits
   *         *  word could have contained (highest word for bignum).  (F
   *         *  bignums, the number of bits below the highest woˇ
d    *         *  and added to the count.
     *         *--------------------------------------------------------
-----*                  L     #7,0(,#1)           Load argument

paths                       CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
                            VRCL  0                   Clear vector inter
ex                          BNE   NF                  Branch if not fixe
            ˇ
                     F        L     #6,##CDR(,#7)       Load fixnum
                              LPR   #6,#6               We need only the
de                         ˇ
 in vec loop                    ST    #6,ZLCDBL           Store in tempo
 VLVM                           LA    #6,ZLCDBL           Make pointer t
 quantity                       VLVCU #4  ˇ
# of bits                FPZLOOP  VLVM  #6                  Load a secti
ts                                VCZVM #5                  Count the le
guous 0-bits                      VLVCU #4               ˇ
t                                   BC    3,FPZLOOP           More bits?
                                    LCR   #5,#5               Take negat
d 32-(#5)                           SLA   #5,3                Convert to
acement in SFT                        LA    #15,#SFT+32*8(#5)   Add to a
f 32 (total bits)                     BR    #14                 Return p
of leftmost 1                *------------------------------------------
-------ˇ
                     *         *----------------------------------------
---------------------*         NF       CLI   ##TYPE(#7),##BIGNUM Is arg
m?                    ˇ
t fixed                                   XR    #2,#2               Clea
ading 3-byte length                       ICM   #2,B'0111',1(#7)    Load
length                               ˇ
bits to examine                             LR    #3,#2               Sa
m length for later                          LA    #6,##VECDAT-4(#2,#7) G
significant word                            VLVCU #4ˇ
or count to # of bits                BLOOP    VLVM  #6
ection of bits                                VCZVM #5
e left contiguous 0-bits                      VLVCU #4             ˇ
 vector count                                   BC    3,BLOOP
its?                                            SRA   #2,2
ange bytes to words                             L     #6,##VECDAT-4(#3,#
osˇ
t include bit 0 of VCZVM count                    MH    #2,=H'31'
 words to bits, max possible                      SLL   #6,2(#5)
t out the leftmos t 1 to left             ˇÁ
            Position of leftmost 1 in bignum             COUNTED  CL
THI         Is answer in small fixnum table?                      BH
            No?  Must cons up a new fixnum                ˇ
              *8 for offset in SFT                                  LA
FT(#2)        Small fixnum                                          BR
              Return to caller                             *
                                                             FCONS    LR
14              Save return address                                   #M
D               Cons up a fixnum                                      BR
        ˇ
=====================================================*         .CONTIN1
                                                               *
                       ˇ
#15
HAULONG,#3
1                                     ˇ
  #3,#15
  'Argument to HAULONG not an integer - ',(#7)
E 1                                                  º
ORG
D                                                                    

       00010000*********************************************************
****** 00011002*
     * 00012002*ˇ
Inc.   * 00013002*                     All rights reserved.
       * 00014002*
       * 00015002**************ˇ
********** 00016002*
         * 00017002* IFILEP TAKES ONE (REQUIRED) ARGUMENT - INPUT FILE S
         * 00018002*                          ˇ
           * 00019002***************************************************
************ 00020002         SPACE
             00030002IFILEP   #ZBEG MINARGS=1,MAXARGS=1,NAME=ˇ
               00040002         #ZPDS 16                  DEFINE STACK S
               00050002         #ZSAV ,                   SAVE REGISTERS
               00060002         SPACE 1
                 00070002         OI    ZLCERFLG,ZLCERCFA   INDICATE CON
 FILE ACCESS     00080002         #IFIL 1                   ARG 1 = INPU
PEC              00090002         NI    ZLCERFLG,255-ZLCERCFA TURN CONDI
ILE ACCESS ˇ
                   00110002         LTR   #7,#7               IF FILE WA
                   00120002         BZ    FALSE               THEN
                   0013000ˇ
                     00140002         B     RETURN              ELSE
                     00150002FALSE    LR    #15,#10              RETURN
                     00160002RETURN   DS ˇ
                       00170002         SPACE 1
                       00180002         #ZRET ,                   RESTOR
ERS AND RETURN         00190002         SPACE 1         ˇ
                         00200002         LTORG
                         00210002         SPACE 1
                         00220002         END                          Œ
                           00230002
EX - BUILT-IN ZIL 1.3 SUBROUTINE'                    00010000***********
**************************************************** 00011002*
                                                   * 00012002*ˇ
 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
     All rights reserved.                            * 00014002*
                                                     * 00015002*********
******************************************************** 00016002*
                                                       * 00017002* (INDE
RG2 &OPTIONAL ARG3)...                                 * 00018002*
            ˇ
STRING          - THE STRING TO SEARCH WITHIN            * 00020002*  AR
STRING          - THE VALUE TO SEARCH FOR                * 00030002*  AR
FIXNUM OR NIL   - THE STARTˇ
                                                           * 00050002***
************************************************************ 00060002IND
BEG MINARGS=2,MAXARGS=3,NAME='STRING-INDEXˇ
#ZPDS 24                  DEFINE STACK SIZE                    00080002
#ZSAV ,                   SAVE REGISTERS                       00090002
SPACE                                                    ˇ
  LM    #5,#7,0(#11)        LOAD ARGS                            0011000
  CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A STRING              0012000
  BE    ARG1OK              THEN OK                              0013000
    CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS A SYMBOL              00140
    BNE   ERROR1              THEN                                 00150
    L     #5,##PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR     00160
K   DS ˇ
      CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING              001
      BE    ARG2OK              THEN OK                              001
      CLI   ##TYPE(#6)ˇ
        BNE   ERROR2              THEN                                 0
        L     #6,##PNAME(,#6)      TAKE THE PRINT NAME, ELSE ERROR     0
RG2OK   DS    0H                     ˇ
2         LA    #2,1                DEFAULT STARTING OFFSET IS 1
2         CR    #7,#10              IF ARG 3 IS NIL
2         BE    ARGSOK              THEN IT'S OK (OMˇ
002         CR    #7,#13              IF ARG 3 IS NOT SUPPLIED
002         BE    ARGSOK              THEN IT'S OK (OMITTED)
002         CLI   ##TYPE(#7),##FIXNUM IF ARG 3 IS NOT A FIXNUM     +
90002         BNE   ERROR3              THEN ERROR               ˇ
0300002         ICM   #2,15,##CDR(#7)     IF ARG3 PROVIDED, USE ITS VALU
0310002         BNP   ERROR3
0320002ARGSOK   DS    0H                  #2 HAS 1-BASED START
ˇ
 00340002         XR    #3,#3
 00350002         ICM   #4,7,1(#6)          #4 = LENGTH OF STRING ARG 2
 00360002      ˇ
   00370002         ICM   #3,7,1(#5)          #3 = LENGTH OF STRING ARG
   00380002         BZ    RETNIL              IF ARG1 IS NULL STRING, RE
   00390002         CH    #4,=ˇ
     00400002         BH    DOCLCL              THEN USE CLCL TO SEARCH
     00410002*                                  ELSE ... CLC LOOP
     00420002         LA    #1,##VECDAT-2(#2,ˇ
 - 1   00430002         LA    #14,1               SET BXLE INCREMENT REG
       00440002         LA    #15,##VECDAT(#3,#5) POINT TO END OF STRING
       00450002         SR    #15,#4              MINUS LENGˇ
         00460002         BCTR  #4,0                ADJUST ARG2 LENGTH F
TE       00470002CLCLOOP  DS    0H
         00480002         BXH   #1,#14,RETNIL       INCREMENT TO 1ST LOC
           00490002         EX    #4,CLC              IF SUBSTRING MATCH
           00500002         BE    GOTIT               THEN WE HAVE THE O
           00510002         LA    #2,1(,#2)           ELSE INCREMENT IND
          ˇ
OF STRING    00530002         SPACE 1
             00540002CLC      CLC   0(*-*,#1),##VECDAT(#6)  COMPARE ARG1
 WITH ARG2   00550002    ˇ
               00560002DOCLCL   DS    0H
               00570002         LA    #1,##VECDAT-1(#2,#5) POINT TO STAR
 IN ARG1       00580002         LA    #0ˇ
NG ARG 1         00590002         SR    #0,#4               MINUS LENGTH
2                00600002         LR    #7,#4               SAVE LENGTH
                 00610002CLCLLOOP DS    0H             ˇ
                   00620002         CR    #1,#0               IF PAST EN
RCHABLE STRING     00630002         BH    RETNIL              THEN FAILE
RN NIL             00640002         LR    #4,#1               SUBTEXT ˇ
                     00650002         LA    #14,##VECDAT(,#6)   TEXT OF
                     00660002         LR    #15,#7              LENGTH O
                     00670002         LR    #5,#7               TO COMPA
                      00680002ˇÁ
IF IT MATCHES                        00690002         BE    GOTIT
THEN WE GOT IT                       00700002         LA    #2,1(,#2)
ELSE INCREMENT INDEX                 00710002 ˇ
  AND INCREMENT SUBTEXT POINTER        00720002         B     CLCLLOOP
  AND LOOP UNTIL PAST END OF STRING    00730002GOTIT    DS    0H
  #2 CONTAINS INDEX OF SUBSTRING       00740002         LA   ˇ
    PASS CURRENT STACK POINTER TO CONS   00750002         #MKAT FIXED
    MAKE A FIXNUM OUT OF IT              00760002         B     RETURN
                                         00770002RETZERO  DS    0H
      (INDEX "FOOBAR" "") ===> 0           00780002         LA    #15,#S
      RETURN FIXNUM 0                      00790002         B     RETURN
                                           00800002RETNIL   DS    0H
      SUBSCˇ
        RETURN NIL                           00820002RETURN   DS    0H
                                             00830002         SPACE 1
                          ˇ
          RESTORE REGISTERS AND RETURN         00850002         SPACE 3
                                               00860002ERROR1   #ERR  'A
1 to STRING-INDEX not a string - ',(#5)  ˇ
t 2 to STRING-INDEX not a string - ',(#6)        00880002ERROR3   #ERR
t 3 to STRING-INDEX not a positive fixnum - ',  X00890002
                                                 0090000ˇ 2         SPAC
                                                   00910002         LTOR
                                                   00920002         END
                                                   00930002
∞
10000*******************************************************************
11002*
12002*ˇ
0013002*                     All rights reserved.
0014002*
0015002**************ˇ
 00016002         SPACE 1
 00017002INTEGERP #ZBEG MINARGS=1,MAXARGS=1,NAME='INTEGERP'
 00018002         SPACE 1           ˇ
   00019002         USING INTEGERP,#15
   00020002         SPACE 1
   00030002         L     #2,0(,#1)                ˇ
     00040002         TM    ##TYPE(#2),##INT    TRUE IF FIXNUM OR BIGNUM
     00050002         BNO   ZXINTN
     00060002         DROP  #15                                   ˇ
       00070002         LR    #15,#8
       00080002         BR    #14
       00090002ZXINTN   LR    #15,#10
 º       00100002         BR    #14
         00110002         END
         00120002
 1.3 SUBROUTINE'                   00010000*****************************
********************************** 00011002*
                                 * 00012002*ˇ
les Stark Draper Laboratory Inc.   * 00013002*                     All r
served.                            * 00014002*
                                   * 00015002**************ˇ
************************************** 00016002         SPACE 1
                                       00017002*************************
************************************** 00018002*
                                       * 00019002*  THIS FUNCTION CALLS
M FOUND IN A SYSTEM LIBRARY.  UNLIKE   * 00020002*  THE TSO FUNCTION, IT
T REQUIRE A TSO ENVIRONMENT AND CAN    * 00030002*  THEREFORE BE SUCCESS
ECUTED FRˇ
ERS")                                    * 00050002*  WHERE "PROGRAM" IS
RED STRING (OR SYMBOL) AND               * 00060002*        "PARAMETERS"
QUIRED STRING (OR NIL). ˇ
ETER ARG MUST BE A STRING; OTHERWISE       * 00080002*        NIL WOULD
D AS A PARAMETER OF NIL.                   * 00090002*
                                       ˇ
********************************************** 00110002         SPACE 1
                                               00120002INVOKE   #ZBEG MI
MAXARGS=2,NAME='INVOKE'                        0013000ˇ
                                                 00140002         #ZSAV
                                                 00150002         SPACE
                                                 00160002         LM ˇ
0(#11)        GET ARGS                             00170002         CLI
(#6),##STRING ARG1 MUST BE A STRING                00180002         BE
               OR                                  00190002         CLI
(#6)ˇ
R1                 ELSE ERROR                        00210002         L
#PNAME(,#6)         (IF A SYMBOL, TAKE PRINT NAME)   00220002ARG1OK   DS
                   ˇ
,#10              ARG2 MUST BE NIL                     00240002
TNULL              OR                                  00250002
,#13                NOT SUPPLIED  ˇ
SETNULL                OR                                00270002
##TYPE(#7),##STRING     A STRING                         00280002
ERROR2                                           +
  ARG2OK                                       ˇ
    0H                  IF ARG2 IS NIL                       00310002
    #7,NULLSTR           THEN USE NULL STRING                00320002ARG
    0H                                                       0ˇ
SPACE 1                                                        00340002*
************************************************************** 00350002*
                                                             * 00360002*
HE NAME OF THE PROGRAM AND VALIDATE IT                         * 0037000
                                                               * 0038000
**************************************************************** 0039000
  SPACE 1   ˇ
    MVI   PROGRAM,C' '        CLEAR PROGRAM NAME TO BLANKS         00410
    MVC   PROGRAM+1(7),PROGRAM                                     00420
    XR    #15,#15          ˇ
      ICM   #15,7,1(#6)         GET LENGTH OF ARG1 STRING TEXT       004
      BNP   ERROR3                                                   004
      CH    #15,=H'8'           LENGTH MUSˇ
        BH    ERROR3                                                   0
        BCTR  #15,0               MOVE STRING TO PROGRAM NAME,         0
        EX    #15,MVCPGM          TRANSLATING IT TO UPPERˇ
2         SPACE 1
2***********************************************************************
2*                                                                     *
002* GET THE PARAMETER STRING AND VALIDATE IT
002*
002*********************************************************************
002    ˇ
60002         MVI   PARM,C' '           CLEAR PARAMETER STRING TO BLANKS
70002         MVC   PARM+1(L'PARM-1),PARM
80002         XR    #1ˇ
0590002         ICM   #15,7,1(#7)         GET LENGTH OF ARG2 STRING TEXT
0600002         STH   #15,PARMLEN         STORE PARAMETER STRING LENGTH
0610002         BZ    NOPARM         ˇ
 00620002         CH    #15,=H'100'         LENGTH MUST BE BETWEEN 0 AND
 00630002         BH    ERROR4
 00640002         BCTR  #15,0               MOVE STRˇ
   00650002         EX    #15,MVCPARM         TRANSLATING IT TO UPPER CA
   00660002NOPARM   DS    0H
   00670002         SPACE 1                                        
     00680002ˇÁ
****************** 00690002*
                 * 00700002* CHECK TO MAKE SURE THAT THE PROGRAM REALLY
                 * 00710002*ˇ
                   * 00720002*******************************************
******************** 00730002         SPACE 1
                     00740002**************ˇ
********************** 00750002*
                     * 00760002* FIRST, SCAN THE LPA DIRECTORY TO SEE IF
N LPA MODULE.        * 00770002*                          ˇ
                       * 00780002***************************************
************************ 00790002         SPACE 1
                         00800002         ST    #9,ZLCISV09         SAVE
EGS                        00810002         STM   #3,#9,32(#13)       SA
USED BY LPA SEARCH         00820002         LM    #0,#1,PROGRAM       GE
M NAME INTO REGS           00830002         L     #3,16               #3
        ˇ
PA DIRECTORY SEARCH ROUTINE  00850002         OI    ZLCIFLGS,ZLCISYS
 NON-ZIL-CODE RUNNING        00860002         #BASR #14,#15
 DIRECTORY SEARCH      ˇ
                               00880002* IF THE PROGRAM NAME IS FOUND IN
 DIRECTORY, CONTROL RETURNS    00890002* TO THE NEXT SEQUENTIAL INSTRUCT
#14 IS SET TO ZERO.            0090000ˇ
D, CONTROL RETURNS TO THE        00910002* INSTRUCTION AT +4 PAST HERE A
S NONZERO.                       00920002*
                                 00930002         LA ˇ
 SUCCESSFUL, SET #14 = 0           00940002         LM    #3,#9,32(#13)
STORE REGS USED BY LPA SEARCH      00950002         TM    ZLCIFLGS,ZLCIA
F ATTENTION INTERRUPT OCCURRED     00960002         BOR   #13       ˇ
 THEN GO TO HANDLE IT                00970002         NI    ZLCIFLGS,255
 INDICATE ZIL CODE RUNNING AGAIN     00980002         LTR   #14,#14
IF PROGRAM NAME WAS FOUND,           00990002         BZ    DOIT
THEˇ
                                       01010002*************************
************************************** 01020002*
                  ˇ
K THE LINKLIST TO SEE IF IT IS THERE.  * 01040002*
                                       * 01050002***********************
*********************************+
                               ˇ
PROGRAM                                      01080002         BLDL  0,BL
        SEE IF MEMBER IS IN LINK LIST        01090002         LTR   #15,
        IF NOT,                              0ˇ
           ERROR                               01110002         SPACE 1
                                               01120002*****************
********************************************** 01130002*     ˇ
                                               * 01140002* NOW INVOKE TH
M                                              * 01150002*
                                               * 01160002***************
************************************************** 01170002         SPAC
                                                   01180002DOIT     DS
                                                   01190002         SPAC
           ˇ
SG7P(8),PROGRAM                                      01210002         MV
SG8P(8),PROGRAM                                      01220002         XC
DE,ABCODE       CLEAR ABENˇ
ASCODE,REASCODE   CLEAR REASON CODE                    01240002
CECB,ZLCECB       CLEAR ATTACH ECB                     01250002
,PARMADDR                                ˇ
#3,ZLCECB                                                01270002
 EPLOC=PROGRAM,ECB=(#3),SZERO=NO,SHSPV=78,              X01280002
ESTAI=(STAIEXIT,STAIPARM)                               ˇ
  #15,#15                                                  01300002
  ERROR7                                                   01310002
  #1,ATCHTCB          SAVE TCB ADDRESS                     01320002    ˇ
    #3,#1               SAVE TCB ADDRESS                     01330002
IT  ECB=ZLCECB          WAIT FOR PROGRAM TO COMPLETE         01340002
    #2,#2                                                    01350002
M   #2ˇ
LA    #1,ATCHTCB                                               01370002
DETACH (1),STAE=YES                                            01380002
CH    #15,=H'4'      ˇ
  BH    ERROR8                                                   0140000
  SPACE 1                                                        0141000
************************************ˇ
                                                                 * 01430
 IF PROGRAM ABENDED AND ISSUE A MESSAGE IF SO.                   * 01440
                                                                  * 014

** 01460002         SPACE 1
   01470002         ICM   #3,15,ABCODE
   01480002 ˇ
     01490002         MVC   ABPGM,PROGRAM
     01500002         ST    #3,ZLCDBL
     01510002         UNPK ˇ
       01520002         TR    ABHEX(8),HEXTBL
       01530002         MVI   ABPERIOD,C'.'
       01540002         #TPUT ABMSG       ˇ
         01550002         LR    #15,#10             RETURN NIL IF PROGRA
D        01560002         B     RETURN
         01570002NOABEND  DS    0H                       ˇ
           01580002         SPACE 1
           01590002*****************************************************
********** 01600002*
           * 01610002* NOW SET THE RETURN VALUE TO A FIXNUM CONTAINING T
N CODE     * 01620002* WHICH IS ALREADY IN #2
           * 01630002*
       ˇ
************** 01650002         SPACE 1
               01660002         LA    #0,20(,#11)         PASS CURRENT S
ATION TO CONS  0167000ˇ
 THE RETURN CODE 01680002RETURN   DS    0H
                 01690002         #ZRET ,
                 01700002         EJEˇ
                   01710002MVCPGM   OC    PROGRAM(*-*),##VECDAT(#6) EXEC
VE PROGRAM NAME    01720002MVCPARM  OC    PARM(*-*),##VECDAT(#7)    EXEC
VE PARM STRING     01730002         SPACE 1         ˇ
                     01740002ATCHTCB  DS    A                   TCB FOR
 PROGRAM             01750002         SPACE 1
                     01760002NULLSTR  DS    0A                  ALIˇ
O FULLWORD             01770002         DC    YL1(##STRING),AL3(0),X'00'
TRING                  01780002         SPACE 1
                       01790002         DS    0A                  ALIGN
FFˇ
R PROGRAM NAME           01810002PROGRAM  DS    CL8                 THE
NAME                     01820002TTR      DS    CL3
                 +
               ˇ
                             01850002C        DS    CL1
                             01860002         DS    CL44
                             0ˇ
                               01880002PARMLEN  DS    H
                               01890002PARM     DS    CL100
                               01900002      ˇ
                                 01910002ERROR1   #ERR  'Argument 1 to I
t a string or symbol - ',0(#11)  01920002ERROR2   #ERR  'Argument 2 to I
t a string or NIL - ',4(#11)     01930002ERROR3   #ERR  'Argˇ
not a valid program name - ',     X01940002               0(#11)
                                   01950002ERROR4   #ERR  'Argument 2 to
longer than 100 characters, the maX01960002               ximum permitte
VS - ',4(#11)                        01970002ERROR5   #TPUT 2,ERRMSG5
                                     01980002         #ERR  'System prog
d ',0(#11),' does not exist.'        01990002ERROR7   #TPUT ERRMSG7
          ˇ
                                       02010002ERROR8   #TPUT ERRMSG8
                                       02020002         B     FAILURE8
                         ˇ
                                         02040002FAILURE8 DS    0H
                                         02050002FAILURE  #ERR  'INVOKE
system error processing program ',0(#11)ˇ
                                           02070002ERRMSG5X DC    C'ZIL1
RAM '                                      02080002ERRMSG5P DC    CL8'
                                           02090002    ˇ
 IN SYSTEM LIBRARY.'                         02100002ERRMSG5  EQU   ERRM
RRMSG5X,C'C'                                 02110002ERRMSG7X DC    C'ZI
TACH OF PROGRAM '                            02120002ERRMSG7P DC    CLˇ
  '                                            02130002         DC    C'
'                                              02140002ERRMSG7  EQU   ER
-ERRMSG7X,C'C'                                 02150002ERRMSG8X DC    C'
DETACˇ
    '                                            02170002         DC
D.'                                              02180002ERRMSG8  EQU
,*-ERRMSG8X,C'C'    ˇ
                                                   02200002ABMSGX   DC
500 '                                              02210002ABPGM    DC
                                                    02220002ˇÁ
    DC    C' ABENDED, COMPLETION CODE '                            02230
    DC    CL8' '                                                   02240
IOD DC    C' '                                                     02250
SG    EQU   ABMSGX,*-ABMSGX,C'C'                                     022
      SPACE 1                                                        022
      DC    C'0123456789ABCDEF'                                      022
TBL   EQU  ˇ
        SPACE 1                                                        0
        LTORG                                                          0
        SPACE 1           ˇ
2STAIPARM DS    0H
2         SPACE 1
2ABCODE   DS    A                        ˇ
002REASCODE DS    A
002         SPACE 1
002         DROP  #12                                   ˇ
80002         EJECT
90002*******************************************************************
00002*                                                                 ˇ
2410002* STAI EXIT THAT GETS CONTROL IF THE ATTACHED PROGRAM ABENDS
2420002*
2430002* THE PARAMETER ON ENTRY SHOULD BE THE ADDRESS OF THE ZIL COMMON
244000ˇ
 02450002***************************************************************
 02460002         SPACE 1
 02470002STAIEXIT DS ˇ
   02480002         SPACE 1
   02490002*************************************************************
** 02500002*                        ˇ
   * 02510002* ESTAI EXIT THAT GETS CONTROL IF AN ABEND OCCURS IN ATTACH
AM * 02520002*
   * 02530002*  ON ENTRY TO THIS ROUTINE:          ˇ
     * 02540002*
     * 02550002*  REGISTER 0 = 12 - NO SWDA AVAILABLE
     * 02560002*               OTHER - SDWA AVAILABLE             ˇ
       * 02570002*
       * 02580002*  IF REGISTER 0 = 12:
       * 02590002*
 +

RAM)       * 02620002*     REGISTER 14 = RETURN ADDRESS TO RTM
           * 02630002*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS EST
ROUTINE    * 0ˇ
             * 02650002*  OTHERWISE:
             * 02660002*
             * 02670002*     ˇ
               * 02680002*     REGISTER 13 = ADDRESS OF A 72-BYTE SAVE A
               * 02690002*     REGISTER 14 = RETURN ADDRESS TO RTM
               * 02700002*     REGISTER 15 =ˇ
 EXIT ROUTINE    * 02710002*
                 * 02720002*********************************************
****************** 02730002         SPACE 1                ˇ
                     02740002         PUSH  USING
                     02750002         LR    #7,#15              SAVE ENT
SS REGISTER          02760002         USING STAIEXIT,#7
                       02770002         LA    #3,12               CHECK
TER 0 = 12             02780002         CR    #0,#3               IF AN
AVAILABLE              02790002         BE    NOSDWAI             THEN..
         ˇ
                         02810002         L     #4,SDWAPARM          #4
REA                      02820002         USING STAIPARM,#4
                        ˇ
                           02840002         ICM   #5,7,SDWACMPC        #
LETION CODE                02850002         ST    #5,ABCODE           SA
 CODE                      02860002    ˇ
ASON CODE FROM ABEND MACRO   02870002         ST    #6,REASCODE
ASON CODE                    02880002         SETRP RC=16
D CONTINUE WITHOUT ESTAI     02890002         BR    #1ˇ
 TO ABNORMAL TERMINATION       02900002         SPACE 1
                               02910002NOSDWAI  DS    0H
A AVAILABLE...                 02920002         LR    #4,#2          ˇ
-> WORKAREA                      02930002         LR    #5,#1
= COMPLETION CODE                02940002         ST    #5,ABCODE
 ABEND CODE                      02950002         XR    #6,#6
= REˇ
ORE REASON CODE                    02970002         LA    #15,16
T ABEND CONTINUE WITHOUT ESTAI     02980002         BR    #14
TURN TO ABNORMAL TE RMINATION       02990002ˇÁ
                                                   03000002         EJEC
                                                   03010002         IHAS
                                                   03020002 [         EJ
                                                     03030002         EN
                                                     03040002
√
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002*
 * 00017002* ISPFP RETURNS T IF IT IS POSSIBLE TO INVOKE ISPF DIALOG SER
 * 00018002* AND NIL IF IT ISN'T.  THIˇ
DE * 00019002* IN ISPLINK.
   * 00020002*
   * 00030002****************************************ˇ
****** 00040002         SPACE 1
       00050002ISPFP    #ZBEG MINARGS=0,MAXARGS=0,NAME='ISPFP'
       00060002         SPACE 1                                     ˇ
         00070002         L     #1,540              Get TCB address
         00080002TRYIT    DS    0H                  See if this TCB belo
SPF      00090002         ICM   #2,15,X'70'(#1)     Get TCBFSA - first s
   ˇ
           00110002         CLI   24(#2),X'00'        If saved reg 1 is
 address   00120002         BNE   NOPE                then not this one
           0013000ˇ
e area       00140002         BZ    NOPE                If zero, not thi
             00150002         CLI   0(#2),X'00'         If it's a 31-bit
             00160002         BNEˇ
               00170002         L     #2,0(,#2)           Else load wher
oints to       00180002         CLC   0(3,#2),=CL3'TLD'   See if it's th
               00190002         BE    TRUE      ˇ
                 00200002NOPE     DS    0H                  Else not thi
                 00210002         L     #1,X'84'(,#1)       Get TCBOTC -
task TCB         00220002         C     #1,X'7C'(,#1)       Comˇ
TCB - job step TCB 00230002         BNE   TRYIT               If not it,
in with this TCB   00240002*                                  Else job s
- no more TCB's    00250002         SPACE 1
                     00260002FALSE    LR    #15,#10             ISPEXEC
ossible, return NIL  00270002         BR    #14
                     00280002         SPACE 1
             +
sible, retuˇ
                         00310002         SPACE 1
                         00320002         LTORG
                         0z 0330002         SPACE 1
                           00340002         END
                           00350002{
EYWORDP - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

E 1                                                        00017002*****
********************************************************** 00018002*
              ˇ
 hack for a non-package implementation.  It returns true   * 00020002* i
mbol's print name begins with a colon.  The right way to   * 00030002* i
 this is to check the packageˇ
to the keyword package, the symbol is KEYWORDP.  You'll just * 00050002*
 wait for packages to be implemented for this to happen.     * 00060002*
                                            ˇ
**************************************************************** 0008000
  SPACE 1                                                        0009000
P #ZBEG MINARGS=1,MAXARGS=1,NAME='KEYWORDP'                ˇ
    SPACE 1                                                        00110
    USING KEYWORDP,#15                                             00120
    SPACE 1                                                        00130
      L     #2,0(,#1)           GET ARG                              001
      CLI   ##TYPE(#2),##SYMBOL MUST BE A SYMBOL                     001
      BNE   FALSE               IF NOT, CAN'T BE A KEYWORD           001
      L  ˇ
        CLI   ##VECDAT(#2),C':'   FIRST CHAR MUST BE A COLON           0
        BNE   FALSE               IF NOT, NOT A KEYWORD                0
        DROP  #15       ˇ
2         LR    #15,#8              TRUE - IT IS A KEYWORD
2         BR    #14
2FALSE    LR    #15,#10             FALQ SE - IT IS NOT A KEYWORD
002         BR    #14
002         END
002
                     00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                         00017002* LAND TAKES TWO INTEGER ARGUMENTS.  CU
THEY MUST BE FIXNUMS.    00018002*                          ˇ
                           00019002LAND     #ZBEG MINARGS=2,MAXARGS=2,NA
'                          00020002         #ZPDS 2*4+12+0 (= 20)     DE
CK SIZE                    00030002         #ZSAV ,                   SA
ISTERS                       00040002         SPACE
                             00050002         LM    #6,#7,0(#11)
UMENTS                       00060002*
          ˇ
                               00080002*
                               00090002         CLI   ##TYPE(#6),##FIXNU
ARGUMENT MUST BE A FIXNUMˇ
                                 00110002         CLI   ##TYPE(#7),##FIX
ND ARGUMENT MUST BE A FIXNUM     00120002         BNE   ERROR2
                                 0013000ˇ
T HEADER AND VALUE 1               00140002         N     #2,##CDR(,#7)
 LOGICAL AND WITH VALUE 2          00150002         L     #15,ZLCCONS
T ADDRESS OF CONS                  00160002         LA ˇ
PASS CURRENT STACK LOCATION TO CONS  00170002         #BASR #14,#15
CALL CONS TO MAKE A NEW FIXNUM       00180002         SPACE 1
                                     00190002         #ZRET ,         ˇ
  RESTORE REGISTERS AND RETURN         00200002         SPACE 1
                                       00210002ERROR1   #ERR  'Argument
ical AND not a fixnum - ',(#6)         00220002ERROR2   #ERR  'Argument
ical ˇ
                                         00240002         LTORG
                                         00250002         END
                    ∆                      00260002
      TITLE 'LAST - BUILT-IN ZIL 1.3 SUBROUTINE'                     000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2*                                                                     *
2* LAST TAKES ONE ARGUMENT - A LIST.                                   *
2*                          ˇ
002* THIS FUNCTION IS NON-RECURSIVE AND TAKES NO STACK SPACE.
002*
002****************************************ˇ
40002         SPACE 1
50002LAST     #ZBEG MINARGS=1,MAXARGS=1,NAME='LAST'
60002         SPACE 1                                     ˇ
0070002         LR    #3,#15
0080002         DROP  #15
0090002         USING LAST,#3
 00100002         SPACE 1
 00110002         L     #15,0(,#1)          LOAD THE ARGUMENT
 00120002* Null test subsumed by atom test.
 0013000ˇ
   00140002******** BER   #14                 THEN RETURN NIL
   00150002         TM    ##TYPE(#15),##ATOM  IF ARG 1 NOT A LIST
   00160002         BORˇ
     00170002LOOP     DS    0H
     00180002         L     #2,##CDR(,#15)      LOOK AT THE CDR OF THE L
     00190002* Null test subsumed by aˇ
       00200002******** CR    #2,#10              IF IT IS NIL
       00210002******** BER   #14                 THEN RETURN THIS CONS
       00220002         TM    ##TYPE(#2),##ATOM   IF ˇ
         00230002         BOR   #14                 THEN RETURN THIS CON
         00240002         LR    #15,#2              ELSE CONTINUE WITH T
         00250002         B     LOOP                                ˇ
           00260002         SPACE
           00270002         LTORG
           00280002         END
   ª         00290002
N ZIL 1.3 SUBROUTINE'                  00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* LASTCAR TAKES ONE A
- A LIST.                                * 00018002*
                                           * 00019002* THIS FUNCTION IS
RSIVE AND TAKES NO STACK SPACE.            * 00020002*
                                           * 00030002*******************
*************ˇ
                                               00050002LASTCAR  #ZBEG MI
MAXARGS=1,NAME='LASTCAR'                       00060002         SPACE 1
                            ˇ
                                                 00080002         DROP
                                                 00090002         USING
#3                                         ˇ
                                                   00110002         L
,#1)          LOAD THE ARGUMENT                    00120002* Null test s
by atom test.                                      0013000ˇ
#10             IF ARG IS NIL                        00140002******** BE
                THEN RETURN NIL                      00150002         TM
PE(#15),##ATOM  IF ARG 1 NOT A LIST                  00160002         BO
4                 THEN RETURN IT                       00170002LOOP
                                                       00180002
5,#0,##CAR(#15)   #15 = CAR, #0 = CDR                  00190002
,#10    ˇ
#14                 THEN RETURN #15 = CAR OF THIS CONS   00210002
#15,#0              ELSE LOAD UP THE CDR                 00220002
##TYPE(#15),##ATOM  IF ˇ
  #14                 THEN RETURN IT AS THE VALUE          00240002
  LOOP                ELSE CONTINUE WITH THE CDR           00250002
E                                     ì                      00260002
ORG                                                          00270002
D                                                            00280002

       00010000*********************************************************
****** 00011002*
     * 00012002*ˇ
Inc.   * 00013002*                     All rights reserved.
       * 00014002*
       * 00015002**************ˇ
********** 00016002*
         * 00017002* LENGTH TAKES ONE ARGUMENT - A PROPER LIST
         * 00018002*                          ˇ
           * 00019002* IF THE LIST IS CIRCULAR LENGTH WILL LOOP INDEFINI
           * 00020002*
           * 00030002* We assume that a list cannot be longerˇ
elements,    * 00040002* and therefore that fixed-point overflow is impo
 This        * 00050002* allows us to use BCT to compute the length (cle
).           * 00060002*
               * 00070002***********************************************
**************** 00080002LENGTH   #ZBEG MINARGS=1,MAXARGS=1,NAME='LENGTH
                 00090002         #ZPDS 16                  DEFINE STACK
           ˇ
                   00110002         SPACE
                   00120002         L     #3,0(,#11)          LOAD FIRST
LY) ARGUMENT       0013000ˇ
S LENGTH) TO ZERO    00140002         SPACE
                     00150002LOOP     DS    0H
                     00160002         CR ˇ
, EXIT LOOP            00170002         BE    ENDLOOP
                       00180002         TM    ##TYPE(#3),##ATOM   IF ATO
TED PAIR               00190002         BO    ERROR     ˇ
 LIST                    00200002         L     #3,##CDR(,#3)       (SET
CDR LIST))               00210002         BCT   #2,LOOP             CONT
                         00220002ENDLOOP  DS    0H                  #2 ˇ
s (minus length)           00230002         LCR   #2,#2               Ma
h positive                 00240002         CL    #2,ZLCSFTHI         If
within small fixnum range  00250002         BNH   SMALLFIX            th
turn aˇ
t cons up a fixnum           00270002         LA    #0,16(,#11)
RENT STACK LOCATION TO CONS  00280002         #MKAT FIXED
IXNUM                +
eturn with it      ˇ
th is within small fixnum range  00310002         SLA   #2,3
ert length to index into fixnums 00320002         LA    #15,#SFT(#2)
fixnum from table                0ˇ
TURN WITH NEW ATOM                 00340002         #ZRET ,
STORE REGISTERS AND RETURN         00350002         SPACE 1
                                   00360002ERROR ˇ
NOT A NUMERIC ATOM                   00370002         #ERR  'Argument to
not a proper list - ',0(#11)         00380002         SPACE 1
                                     00390002         LTORG     Ï
                                       00400002         END
                                       00410002{
    TITLE 'LESSP - BUILT-IN ZIL 1.3 SUBROUTINE'                    00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 LESSP TAKES TWO ARGUMENTS. BOTH MUST BE NUMERIC OR ALPHA ATOMS.     * 0
                          ˇ
2***********************************************************************
2*                                                                     *
2* THIS ROUTINE IS NOT RECURSIVE AND USESˇ
002*
002*********************************************************************
002*                                                    ˇ
70002* CONVERSION RULES ARE AS FOLLOWS:
80002*
90002* 1. BOTH ARGS FIXED         - PERFORM INTEGER COMPARISON.        ˇ
0100002* 2. BOTH ARGS FLOAT         - PERFORM REAL COMPARISON.
0110002* 3. ONE FIXED, ONE FLOAT    - CONVERT THE FIXED ARGUMENT TO
0120002*                              FLOAT AND PERFORM REAL COMPARISON.
013000ˇ
 00140002*
 00150002* ANY OTHER TYPES CAUSE AN ERROR.
 00160002*           ˇ
 * 00170002*************************************************************
** 00180002*
 * 00190002* ===> BIGNUM - FLOAT COMˇ
   * 00200002*
   * 00210002***********************************************************
**** 00220002*                                     ˇ
     * 00230002* SUPPORT FOR STRING AND SYMBOL COMPARES.  THE FOLLOWING
ONS  * 00240002*            ARE LEGAL:
     * 00250002*                                                  ˇ
       * 00260002*  SYMBOL TO SYMBOL
       * 00270002*  STRING TO STRING
       * 00280002*  SYMBOL TO STRING
 +

           * 00310002* ALL MAY BE REMOVED FOR FULL COMMON LISP.
           * 00320002*
           * 0ˇ
************** 00340002LESSP    #ZBEG MINARGS=2,MAXARGS=2,NAME='LESSP'
               00350002         SPACE
               00360002      ˇ
                 00370002         DROP  #15
                 00380002         USING LESSP,#3
                 00390002         SPACE     ˇ
                   00400002         LM    #1,#2,0(#1)         LOAD ARGUM
                   00410002         LR    #15,#10             PRESET RET
E TO NIL           00420002         CR    #1,#2            ˇ
                     00430002         BER   #14                 THEN RET
                     00440002*
                     00450002* CHECK TYPE OF ARG 1
                       00460002*
                       00470002         CLI   ##TYPE(#1),##FIXNUM
                       00480002         BE    ARG1FIX
         ˇ
                         00500002         BE    ARG1SFLO
                         00510002         CLI   ##TYPE(#1),##BIGNUM
                        ˇ
                           00530002         CLI   ##TYPE(#1),##DFLOAT
                           00540002         BE    ARG1DFLO
                           00550002*   ˇ
                             00560002* --- DELETE THIS CODE FOR FULL COM
                             00570002*
                             00580002         CLI   ##ˇ
                               00590002         BE    ARG1STR
                               00600002         CLI   ##TYPE(#1),##SYMBO
                               00610002         BE    ARG1ALF        ˇ
                                 00620002*
                                 00630002* --- END CODE TO DELETE FOR FU
N LISP                           00640002*
    ˇ
                                   00660002         EJECT
                                   00670002ARG1FIX  DS    0H
G 1 IS FIXED                        00680002ˇÁ
                                                   00690002         L
DR(,#1)       GET FIXED VALUE 1                    00700002*
                                                   00710002*ˇ
 2                                                   00720002*
                                                     00730002         CL
PE(#2),##FIXNUM                                      00740002         BE
IXFIX             FIXED - FIXED = OK                   00750002
TYPE(#2),##BIGNUM                                      00760002
IXBIG             FIXED - BIG   = OK                   00770002
TYPE(#2),#ˇ
CFIXSFLO            FIXED - FLOAT = OK                   00790002
##TYPE(#2),##DFLOAT                                      00800002
CFIXDFLO            FIXEDˇ
  ERROR               ANYTHING ELSE = ERROR                00820002CFIXS
  0H                  FIXED VALUE 1 ALREADY IN #0          00830002
  #7,#14              SAVE RETURN REGISTˇ
AS  #14,FIX2FLO         CONVERT FIXED TO FLOAT               00850002
    #14,#7              RESTORE RETURN REGISTER              00860002
ER  #F2,#F0             GET SINGLE FLOAT VALUE 1       ˇ
B     COMSFLO1                                                 00880002
SPACE                                                          00890002C
DS    0H                  FIXED VALUE 1 ALREADY IN #0          0090000ˇ
  LR    #7,#14              SAVE RETURN REGISTER                 0091000
  #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT               0092000
  LR    #14,#7              RESTORE RETURN REGISTER              0093000
  LDRˇ
    B     COMDFLO1                                                 00950
    SPACE                                                          00960
IX  DS    0H        ˇ
      C     #0,##CDR(,#2)       COMPARE                              009
      BNLR  #14                                                      009
      LR    #15,#8                 ˇ
        BR    #14                                                      0
        SPACE                                                          0
RG1SFLO DS    0H                  ARG 1 IS SINGLE ˇ
2         SPACE
2*
2* CHECK TYPE OF ARG 2                                           +
002*                                                           ˇ
70002         CLI   ##TYPE(#2),##SFLOAT
80002         BE    SFLOSFLO            SFLOAT - SFLOAT = OK
90002         CLI   ##TYPE(#2),##DFLOAT
1100002         BE    SFLODFLO            SFLOAT - DFLOAT = OK
1110002         CLI   ##TYPE(#2),##FIXNUM
1120002         BE    SFLOFIX             FLOAT - FIXED = OK
1130002      ˇ
 01140002         BE    SFLOBIG             FLOAT - BIG   = OK
 01150002         B     ERROR               FLOAT - NONUM = ERROR
 01160002SFLOFIX  DS    0H  ˇ
   01170002         LE    #F2,##CDR(,#1)      GET SINGLE FLOAT VALUE 1
   01180002         L     #0,##CDR(,#2)       GET FIXED VALUE 2
   01190002         LR    #7,#14           ˇ
     01200002         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
     01210002         LR    #14,#7              RESTORE RETURN REGISTER
     01220002         LRER  #F4,#F0             GET SINGLEˇ
       01230002         B     COMSFLO2
       01240002         SPACE
       01250002SFLODFLO DS    0H                  SINGLE FLOAT 1, DOUBLE
 2       01260002         SDR   #F2,#F2
         01270002         LE    #F2,##CDR(,#1)      GET DOUBLE FLOAT VAL
         01280002         B     COMDFLO1
        ˇ
AT 2       01300002         LE    #F2,##CDR(,#1)      GET FLOAT VALUE 1
           01310002COMSFLO1 DS    0H
           01320002    ˇ
             01330002COMSFLO2 DS    0H
             01340002         CER   #F2,#F4             COMPARE
             01350002         BNLR  #1ˇ
               01360002         LR    #15,#8
               01370002         BR    #14
               01380002         EJECT                ˇ
                 01390002ARG1DFLO DS    0H                  ARG 1 IS DOU
T                01400002         SPACE
                 01410002         LD    #F2,8(,#1)          GET DOUBˇ
ALUE 1             01420002*
                   01430002* CHECK TYPE OF ARG 2
                   01440002*
                    01450002ˇÁ
                                   01460002         BE    DFLODFLO
LOAT - DFLOAT = OK                 01470002         CLI   ##TYPE(#2),##S
                                   01480002 ˇ
DFLOAT - SFLOAT = OK                 01490002         CLI   ##TYPE(#2),#
                                     01500002         BE    DFLOFIX
FLOAT - FIXED = OK                   01510002         CLI  ˇ
M                                      01520002         BE    DFLOBIG
  FLOAT - BIG   = OK                   01530002         B     ERROR
  FLOAT - NONUM = ERROR                01540002DFLOFIX  DS    0H
                                         01550002         L     #0,##CDR
    GET FIXED VALUE 2                    01560002         LR    #7,#14
    SAVE RETURN REGISTER                 01570002         #BAS  #14,FIX2
    CONVEˇ
      RESTORE RETURN REGISTER              01590002         LDR   #F4,#F
      GET DOUBLE FLOAT VALUE 2             01600002         B     COMDFL
                        ˇ
                                             01620002DFLOSFLO DS    0H
        DOUBLE FLOAT 1, SINGLE FLOAT 2       01630002         SDR   #F4,
                                       ˇ
,#2)      GET DOUBLE FLOAT VALUE 2             01650002         B     CO
                                               01660002DFLODFLO DS    0H
          DOUBLE FLOAT 1, DOUBLE FLOAT 2       0167000ˇ
                                                 01680002         LD
2)          GET DOUBLE FLOAT VALUE 1             01690002COMDFLO2 DS
                                                 01700002         CDRˇ
4             COMPARE                              01710002         BNLR
                                                   01720002         LR
                                                   01730002         BR
    ˇ
                                                     01750002ARG1BIG  DS
                ARG1 IS A BIGNUM                     01760002         SP
                   ˇ
                                                       01780002* CHECK T
RG 2                                                   01790002*
                                  ˇ
##TYPE(#2),##FIXNUM                                      01810002
CBIGFIX             FIXED - FIXED = OK                   01820002
##TYPE(#2),##BIGNUM                              +
  CBIGBIG             FIXED - BIG   = OK       ˇ
I   ##TYPE(#2),##SFLOAT                                      01850002
    CBIGSFLO            FIXED - FLOAT = OK                   01860002
I   ##TYPE(#2),##DFLOAT                                      0ˇ
BE    CBIGDFLO            FIXED - FLOAT = OK                   01880002
B     ERROR               ANYTHING ELSE = ERROR                01890002
SPACE                                                          01900002C
  DS    0H                  COMPARE FIXNUM TO BIGNUM             0191000
  SPACE                                                          0192000
  TM    ##VECDAT(#2),X'80'  TEST SIGN OF BIGNUM                  0193000
  BOR   #14 ˇ
    LR    #15,#8              IF BIGNUM POSITIVE, FIX IS LT BIG    01950
    BR    #14                  SO RETURN T                         01960
    SPACE                  ˇ
GFIX  DS    0H                  COMPARE BIGNUM TO FIXNUM             019
      SPACE                                                          019
      TM    ##VECDAT(#1),X'80'  TEST SIGN ˇ
        BZR   #14                 IF BIGNUM POSITIVE, BIG NOT LT FIX   0
        LR    #15,#8              IF BIGNUM NEGATIVE, BIG IS LT FIX    0
        BR    #14                  SO RETURN T           ˇ
2         EJECT
2CBIGBIG  DS    0H                  COMPARE BIGNUM TO BIGNUM
2         SPACE 1
002*********************************************************************
002*
002* THE FOLLOWING CODE DEPENDS ON THESE FACTS:
002*   ˇ
00002*  (1) ALL BIGNUMS ARE NORMALIZED.
10002*  (2) BIGNUMS ARE STORED IN 31-BIT "DIGITS", EACH DIGIT OCCUPYING
20002*      WORD, WITHˇ
2130002*      BIGNUM "DIGITS" ARE STORED "BACKWARDS".
2140002*  (3) NEGATIVE BIGNUMS ARE STORED AS THEIR ABSOLUTE VALUE, EXCEP
2150002*      THAT THE LEAST SIGNIFICˇ
 02160002*      BIT SET TO 1 (BUT IT IS NOT TWO'S COMPLEMENT).
 02170002*
 02180002*******************************************ˇ
** 02190002         SPACE 1
   02200002         ICM   #4,15,##VECDAT(#1)  TEST SIGN OF BIGNUM 1
   02210002         BM    B1NEG               IF BIGNUM 1 NEGATIVE,  CH
 2   02220002ˇÁ
  SO...            02230002         BOR   #14                 IF BIGNUM
VE, RETURN FALSE   02240002*                                  ELSE COMPA
ITIVE BIGNUMS      02250002 ˇ
ISTER                02260002         XR    #7,#7               CLEAR IN
ISTER                02270002         ICM   #5,7,1(#1)          GET BIGN
H 1                  02280002         ICM  ˇ
GTH 2                  02290002         CR    #5,#7               COMPAR
S                      02300002         BHR   #14                 IF FIR
NGER, B1 > B2          02310002         BL    TRUE        ˇ
SHORTER, B1 < B2         02320002         LA    #7,4                OTHE
 HAVE TO COMPARE THEM.   02330002         LCR   #7,#7               SET
T REGISTER TO -4         02340002         AR    #5,#7               INIT
 TO BIGNUM LENGTH - 4      02350002BBPLOOP  DS    0H                  LO
LAST WORD THRU TO FIRST    02360002         L     #0,##VECDAT(#5,#1)  CO
RD FROM BIGNUM 1           02370002         C     #0,##VECDAT(#5,#2)  WI
FROM BIGˇ
ER, B1 > B2                  02390002         BL    TRUE
 B1 < B2                     02400002         BXH   #5,#7,BBPLOOP
MENT INDEX AND LOOP UNTˇ
E WORDS: ALL =, B1 NOT GT B2   02420002         SPACE
                               02430002B1NEG    DS    0H
 1 IS NEGATIVE                 0244000ˇ
IGNUM 2 IS POSITIVE              02450002         BNM   TRUE
 RETURN TRUE. ELSE...            02460002*
ARE 2 NEGATIVE BIGNUMS           02470002         XR ˇ
EAR INSERT REGISTER                02480002         XR    #7,#7
EAR INSERT REGISTER                02490002         ICM   #5,7,1(#1)
T BIGNUM LENGTH 1                  02500002         ICM   #7,7,1(#2)ˇ
GET BIGNUM LENGTH 2                  02510002         CR    #5,#7
COMPARE LENGTHS                      02520002         BLR   #14
IF FIRST IS LONGER, B1 < B2          02530002         BH    TRUE
IF ˇ
  OTHERWISE WE HAVE TO COMPARE THEM.   02550002         LCR   #7,#7
  SET INCREMENT REGISTER TO -4         02560002         AR    #5,#7
  INIT INDEX TO BIˇ
    LOOP FROM LAST WORD THRU TO FIRST    02580002         L     #0,##VEC
1)  COMPARE WORD FROM BIGNUM 1           02590002         CL    #0,##VEC
2)  WITH WORD FROM B2 (IGNORE SIG+
      IF LESS, B1 > B2         ˇ
        IF GREATER, B1 < B2                  02620002         BXH   #5,#
P       =, DECREMENT INDEX AND LOOP UNTIL... 02630002         BR    #14
        NO MORE WORDS: ALL =, B1 NOT GT B2   0ˇ
                                               02650002TRUE     DS    0H
                                               02660002         LR    #1
          TRUE... RESULT IS T                  02670002      ˇ
                                                 02680002         EJECT
                                                 02690002*
                                                 02700002* --- DELETE TH
E FOR FULL COMMON LISP                             02710002*
                                                   02720002ARG1STR  DS
              ARG 1 IS STRING                      02730002*
           ˇ
 2                                                   02750002*
                                                     02760002         CL
PE(#2),##STRING           ˇ
MPSS              STRING - STRING IS OK                02780002
TYPE(#2),##SYMBOL                                      02790002
MPSA              STRING - SYMBOL IS OK  ˇ
ERROR               ALL OTHERS ARE NO GOOD               02810002
                                                         02820002ARG1ALF
0H                  ARG 1 IS SYMBOL                     ˇ
                                                           02840002* CHE
OF ARG 2                                                   02850002*
                                                           02860002    ˇ
I   ##TYPE(#2),##STRING                                      02870002
    COMPAS              SYMBOL - STRING IS OK                02880002
I   ##TYPE(#2),##SYMBOL                                      02890002
    COˇ
B     ERROR               ALL OTHERS ARE NO GOOD               02910002
SPACE                                                          02920002C
DS    0H             ˇ
  L     #1,##PNAME(,#1)     GET PRINT NAME OF SYMBOL 1           0294000
  B     COMPSS              COMPARE STRINGS                      0295000
  SPACE                             ˇ
A   DS    0H                  STRING-TO-SYMBOL COMPARE             02970
    L     #2,##PNAME(,#2)     GET PRINT NAME OF SYMBOL 2           02980
    B     COMPSS              COMPARE STRINGS                       029

   03000002COMPAA   DS    0H                  SYMBOL-TO-SYMBOL COMPARE
   03010002         L     #1,##PNAME(,#1)     GET PRINT NAME OF SYMBOL 1
   03020002 ˇ
     03030002******** B     COMPSS              COMPARE STRINGS
     03040002         SPACE
     03050002COMPSS   DS   ˇ
       03060002         SPACE 1
       03070002         XR    #5,#5               CLEAR INSERT REGISTER
       03080002         XR    #7,#7       ˇ
         03090002         ICM   #5,7,1(#1)          GET STRING LENGTH 1
         03100002         ICM   #7,7,1(#2)          GET STRING LENGTH 2
         03110002         LA    #4,##VECDAT(,#1)    POINTˇ
           03120002         LA    #6,##VECDAT(,#2)    POINT TO STRING TE
           03130002*
           03140002*                                  #4 = ADDRESS OF AR
TA           03150002*                                  #5 = LENGTH OF A
A            03160002*                                  #6 = ADDRESS OF
TA           03170002*                                  #7 = LENGTH OF A
A      ˇ
               03190002         CR    #5,#7               COMPARE LENGTH
               03200002         BL    SHORTCOM            IF FIRST IS SH
O HANDLE THAT  0321000ˇ
GO HANDLE THAT   03220002         CLCL  #4,#6               OTHERWISE JU
MPARE            03230002         BNLR  #14                 ARG1 GE ARG2
 NIL             03240002         LR ˇ
RN T               03250002         BR    #14
                   03260002         SPACE 1
                   03270002SHORTCOM DS    0H        ˇ
N ARG2               03280002         LR    #7,#5               USE SHOR
 FOR COMPARE         03290002         CLCL  #4,#6               DO COMPA
                     03300002         BHR   #14                 ARGˇ
RETURN NIL             03310002         LR    #15,#8              ARG1 L
RETURN T               03320002         BR    #14
                       03330002         SPACE 1
  ˇ
THAN ARG2                03350002         LR    #5,#7               USE
NGTH FOR COMPARE         03360002         CLCL  #4,#6               DO C
                 +
G2: RETURN NIL ˇ
ARG2: RETURN T               03390002         BR    #14
                             03400002*
                             0ˇ
LISP                           03420002*
                               03430002         EJECT
                               03440002      ˇ
D TO FLOAT CONVERSION ROUTINE    03450002         EJECT
                                 03460002CBIGSFLO DS    0H
                                 03470002CBIGDFLO DS    0H  ˇ
                                   03480002SFLOBIG  DS    0H
                                   03490002DFLOBIG  DS    0H
                                   03500002         LR    #5,#1
                                     03510002         LR    #6,#2
                                     03520002         #ERR  2,'ZIL4101 L
oat-to-bignum compare not supported.X03530002               ',PREFIX=NO,
O         ˇ
                                       03550002ERROR    DS    0H
  INVALID TYPES                        03560002         LR    #5,#1
                         ˇ
                                         03580002BOMBOUT  #ERR  'Type co
LESSP cannot compare ',                 X03590002               (#5),' a
)                                       ˚  03600002         SPACE 1
                                           03610002         LTORG
                                           03620002         END
                                           03630002{
        TITLE 'LISTP - BUILT-IN ZIL 1.3 SUBROUTINE'                    0
********************************************************************** 0
                                                                     * 0
ˇ
2*                     All rights reserved.                            *
2*                                                                     *
2**************ˇ
002         SPACE 1
002LISTP    #ZBEG MINARGS=1,MAXARGS=1,NAME='LISTP'
002         SPACE 1           ˇ
19002         USING LISTP,#15
20002         SPACE 1
30002         L     #2,0(,#1)                ˇ
0040002         CR    #2,#10              IF NIL, TRUE
0050002         BE    TRUE
0060002         TM    ##TYPE(#2),##ATOM   IF ATOM, FALSE    ˇ
 00070002         BO    FALSE
 00080002         DROP  #15
 00090002TRUE     LR    #15,#8
   00100002         BR    #14
   00110002FALSE    LR    #15,#10
   00120002         BR    #14
   0013000^ 2         END
     00140002
.3 SUBROUTINE'                 00010000*********************************
****************************** 00011002*
                             * 00012002*ˇ
Stark Draper Laboratory Inc.   * 00013002*                     All right
ed.                            * 00014002*
                               * 00015002**************ˇ
********************************** 00016002*
                                 * 00017002* THIS FUNCTION, ALSO KNOWN A
A-LIST-KEYWORD-P", RETURNS T IF  * 00018002* ITS ARGUMENT IS A SYMBOL ˇ
RST CHARACTER IS "&", ELSE NIL.    * 00019002*
                                   * 00020002***************************
************************************ 00030002         SPACE 1
     ˇ
1,NAME='LLKEYWDP'                      00050002         SPACE 1
                                       00060002* NO BASE REGISTER
                    ˇ
    GET ARG                              00080002         LR    #15,#10
    PRESUME FALSE                        00090002         CLI   ##TYPE(#
BOL MUST BE A SYMBOL               ˇ
      IF NOT, CAN'T BE A LAMBDA LIST KEYWD 00110002         L     #3,##P
)     GET ITS PRINT NAME                   00120002         CLI   ##VECD
'&&'  FIRST CHAR MUST BE AN AMPERSAND      0013000ˇ
        IF NOT, NOT A LAMBDA LIST KEYWORD    00140002         LR    #15,
        TRUE - IT IS A LAMBDA LIST KEYWORD   00150002         BR    #14
                                             00160002         ENDà
                                               00170002
         TITLE 'LOGBITP - BUILT-IN ZIL 1.3 SUBROUTINE'
 ***********************************************************************
0*                                                                     *
0*ˇ
000*                     All rights reserved.
000*
100**************ˇ
     *
     * LOGBITP takes two integer arguments.
     *                          ˇ
       * Common Lisp complete.
       *
       ****************************************ˇ
         LOGBITP  #ZBEG MINARGS=2,MAXARGS=2,NAME='LOGBITP'
                  SPACE 1
                  LM    #6,#7,0(#1)         Load arguments    ˇ
                    CLI   ##TYPE(#6),##FIXNUM Is first arg a fixnum?
                    BNE   NFIX1               Branch if not fixed
                    CLI   ##TYPE(#7),##FIXNUM Is second argument a fixnu
                      BNE   NOTFIX2             Branch if not fixed
                      ICM   #2,B'1111',##CDR(#6) Get value 1 (index)
                      BM    ERROR2              If negative, error
            ˇ
                        BH    MORE32              then check if arg 2 is
                        LA    #3,1                Set up word with one 1
                        SLLˇ
ion                       LR    #15,#10             Load FALSE for retur
                          N     #3,##CDR(,#7)       Do logical AND with
                          BZR   #14       ˇ
false                       LR    #15,#8              Load TRUE for retu
                            BR    #14                 If requested bit i
rue                *                                     ˇ
                     MORE32   TM    ##CDR(#7),X'80'     Sign test works
integers                      LR    #15,#10             Get FALSE for po
eturn                         BZR   #14                 Return if FALSE
                                LR    #15,#8              Get TRUE for r
                                BR    #14                 Return to call
TRUE                   *------------------------------------------------
-------+
     ˇ
-----------------*         NOTFIX2  CLI   ##TYPE(#7),##BIGNUM Is second
 a bignum?                          BNE   ERROR3              Argument 2
an integer          ˇ
est sign                              BM    ERROR2              Arg 1 sh
er be negative                        XR    #4,#4               Clear hi
for divide                         ˇ
ndex by 31 (bits/word)                  SLA   #5,2                Words
tes                                     BZ    WORD1               Index
 in lowest word?                        XR    #3,#ˇ
ading bignum length                       ICM   #3,B'0111',1(#7)    Load
bignum length                             CR    #5,#3               Is i
nting beyond bignum?                      BNL   MORE32           ˇ
urn sign as NIL/+ or T/-                    LA    #3,1                Lo
bit                                         SLL   #3,0(#4)            Sl
 bit to position in word                    TM    ##VECDAT(#7),X'80'  Te
ˇ
f bignum is negative                          N     #3,##VECDAT(#5,#7)
 bit with bignum word                         LR    #15,#8
to return with ˇ
 with TRUE if bit is 1                          LR    #15,#10
ALSE for return value                           BR    #14
 with FALSE, bit was 0        ˇ
                                         BIG2M    LR    #2,#3
 word with test bit in it                         BCTR  #2,0
 mask of 1's below test bit                  ˇ
e there 1's below test bit?                         BZ    CHKBITS
?  Then we must check lesser word                   N     #3,##VECDAT(#5
, then we can test the bit                          LR    #1ˇ
Prepare to return FALSE if needed                     BNZR  #14
Bit was one, return complement (NIL)                  LR    #15,#8
Load TRUE for return value                            BR    #14
  Return to caller with TRUE                   *
                                               CHKBITS  LA    #2,##VECDA
  Save pointer to word with test bit                    LA    #4,##VECDA
  Get addrˇ
    One-byte compare for CLCL                             LA    #7,1
    Compare length for CLCL                               CLCL  #4,#6
    Compare with zero pad  byte                   ˇÁ
LOWBITSZ            All the low bits are zero                    NZHBYTE
#3,0(,#2)           Use test bit as mask
#15,#10             Prepare to return FALSE                       ˇ
  #14                 If test bit 1, return FALSE
  #15,#8              Test bit is 0, load TRUE
  #14                 Return with TRUE                             *
 ˇ
    #3,0(,#2)           All low bits are 0, test bit
    #15,#10             Get set to return FALSE, if needed
R   #14         ˇ
LR    #15,#8              Load up TRUE for return
BR    #14                 Bit was 1, return TRUE                       *
                               ˇ
  L     #2,##VECDAT(,#7)    Get LS word of bignum
  LA    #3,1                Load test bit
  LPR   #2,#2               Complement if negaˇ
    SLL   #3,0(#4)            Slide the test bit to index position
    NR    #3,#2               Test the bit in index position
    LR    #15,#10             Get set to return FALSE, if neeˇ
      BZR   #14                 Return FALSE, if bit is zero
      LR    #15,#8              Load TRUE
      BR    #14                 Bit was 1, return with TRUE

FIX1    CLI   ##TYPE(#6),##BIGNUM Is first arg a bignum?
        BNE   ERROR1              Arg 1 is not an integer
        TM ˇ
          BNO   ERROR3              Arg 2 is not an integer
 B1NF2    TM    ##CDR(#6),X'80'     Test sign of arg 1
          BO    ERROR2    ˇ
            TM    ##VECDAT(#7),X'80'  Only the sign of bignum matters
            LR    #15,#10             Prepare to return with FALSE
            BZR   #14                 If ˇ
              LR    #15,#8              Bignum is negative, load TRUE
              BR    #14                 Return with TRUE
     *                                                  ˇ
                DROP  #15
                USING LOGBITP,#3
                SPACE 1                                                +
         ERROR1   LR    #3,#15                                       ˇ
                    #ERR  'Argument 1 to LOGBITP not an integer - ',(#6)
           ERROR2   LR    #3,#15
                    #ERR  'Argument 1 to LOGBITP is negative - ',(#6)
    ˇ
                      #ERR  'Argument 2 to LOGBITP not an integer - ',(#
                      SPACE 1
                   ë    LTORG
                        END
               {
IL 1.3 SUBROUTINE'                         *****************************
********************************** 00012000*
                                 * 00013000*ˇ
les Stark Draper Laboratory Inc.   * 00014000*                     All r
served.                            * 00015000*
                                   * 00015100**************ˇ
**************************************         *
                                     *         * LOGCOUNT takes one inte
ment.                                *         *
                                       *         * Common Lisp complete.
                                       *         *
                                       *         * Scalar and vector ver
         ˇ
                                         *         *********************
******************************************                  GBLB  &ZILVF
                        ˇ
XARGS=1,NAME='LOGCOUNT'                              *------------------
-------------------------------------------*         * Calculate the num
 bits in a positive fixnum, or the numbˇ
 fixnum.  This is done in a way that works   *         * for both cases
y counting the number of overflows when      *         * shifting every
ant bit to the left with an arithmetic shift *        ˇ
                                               *         *
                                               *         * A scheme usin
 instruction is probably considerably          *         * faster, thˇ
 may involve extra time to load the cache        *         * containing
able for short bignums, relatively speaking.     *         *
                                                 *         * For the vec
lityˇ
se even the fixnum bit count must special-case     *         * with rega
e sign.  For bignum calculations, the negative     *         * bignum ca
an additional complˇ
f the representation is in 2's complement, which it  *         * is not.
heme is then to count zeroes from the right until    *         * you hit
hen you count the 1's to the left ˇ
lves an intermediate step for special handling of      *         * the w
aining the rightmost 1 of the bignum.                  *         *------
-------------------------------------------------+
  (&ZILVF).VFIX                                ˇ
-----------------------------------------------------------*         * S
rsion.                                                     *         *--
-----------------------------------------------------------*  ˇ
L     #7,0(,#1)           Load argument
CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
BNE   NFIX                Branch if not fixed                          *

  L     #7,##CDR(,#7)       Load fixnum
  XR    #5,#5               Clear the bit-counter
  LA    #6,3ˇ
OP  SLA   #7,1                Shift out a bit on the left
    BNO   NOFIXBIT            Did we get overflow?
    LA    #5,8(,#5)        ˇ
IXBIT BCT   #6,FIXLOOP          More bits to test?
      LA    #15,#SFT(#5)        Compute small fixnum address
      BR    #14                 Return witˇ

FIX     CLI   ##TYPE(#7),##BIGNUM Is arg a bignum?
        BNE   ERROR1              Branch if not integer  ˇ
          TM    ##VECDAT(#7),X'80'  Test sign of bignum
          BO    BIGM                Branch if negative bignum
          XR    #2,#2               Clear bit counter
            LA    #3,##VECDAT         Starting offset of WORDLOOP
            LA    #4,4                Increment (bytes in a word)
            XR    #5,#5               Clear for load of 3-byte length
       ˇ
     WORDLOOP L     #1,##VECDAT-4(#3,#7) Load word with bits to be count
              LA    #6,31               Number of bits in a word to test
     BITLOOP  SLA   #1ˇ
                BNO   NOBIGBIT            No overflow?  Then, don't coun
                BCTR  #2,0                Count bit (in a negative way).
       NOBIGBIT BCT   #6,BITLOOP     ˇ
                  BXLE  #3,#4,WORDLOOP      More words for to bit-count?
         *
                  LCR   #2,#2               Make theˇ
                    CL    #2,ZLCSFTHI         Compare with largest SFT?
                    BH    FCONS               Not a small fixnum?
           FSMALL   SLA   #2,3                Create offset in SFT 
             ˇÁ
ll fixnum                           BR    #14
                           *
                           Bˇ
for CLCL                              XR    #3,#3               Clear fo
g bignum length                       ICM   #3,B'0111',1(#7)    Load the
length                                LA   ˇ
rn of the minus bit                     LA    #5,1                Pad by
ngth=1                                  CLCL  #2,#4               Search
d with first 1 bit                      N     #2,=X'FFFFFFˇ
zero word                                 L     #5,0(,#2)           Load
onzero word                               N     #5,=X'7FFFFFFF'     Remo
bit if LS word of bignum                  LCR   #1,#5               Comp
 word with rightmost 1                      LR    #3,#2               Ma
 copy pointer to 1st 1                      SR    #2,#7               (#
31/4= number of 0 bits                      SH    #2,=H'4'            -4
e of theˇ
o make it negative bit count                  SRA   #2,2
er of bytes per word                          LA    #6,31
f bits to test in word ˇ
out one bit, 0 will overflow                    BNO   BMUNOBIT
 if no zero bit to count                        BCTR  #2,0
0-bit                                 ˇ
finished with all 31 bits?                        SLR   #3,#7
lute address to bignum offset                     LA    #4,4
ement (bytes/word)                                XR ˇ
ear for load of 3-byte length                       ICM   #5,B'0111',1(#
ad bignum length in bytes                           BXLE  #3,#4,WORDLOOP
rds left of word with leftmost 1?          *                        ˇ
                                                      LCR   #2,#2
Make the count positive                               CL    #2,ZLCSFTHI
Compare with largest SFT?                             BNH   FSMALL
Notˇ
                                               FCONS    LR    #7,#14
  Save return address                                   #MKAT FIXED
  Make fixnum     ˇ
    Return to caller                             *======================
=======================================*                  AGO   .CONTIN1
                                 +
                               ˇ
-------------------------------------------*         *  Vector version o
NT.                                        *         *------------------
-------------------------------------------*  ˇ
          Load argument                                         VRCL  0
          Clear vector interrupt index                          CLI   ##
,##FIXNUM Is arg a fixnum?                                   ˇ
            Branch if not fixed                          *
                                                         FIX      LA
(,#7)       Make pointer to fixnum quantity                       LA
              Number of bits to test in vec loop                    XR
              Clear the 1-bit count                                 VLVC
              Set vector count to # of bits                FIXVLOOP VLVM
           ˇ
                Count the 1-bits                                      VL
                Update vector count                                   BC
XVLOOP          More bits?ˇ
,3                Convert to displacement in SFT
CDR(#7),X'80'     Test sign of fixnum
5,#SFT(#5)        Load address of small fˇ
#14                 Return 1-count if positive fixnum            *

#5,#5               Take negative of offset in SFT      ˇ
  #15,#SFT+32*8(#5)   Add to address of 32 (total bits)
  #14                 Return 0-count of negative fixnum            *
                                                                   NFIXˇ
I   ##TYPE(#7),##BIGNUM Is arg a bignum?
E   ERROR1              Branch if not integer
    ##VECDAT(#7),X'80'  Test sign of bignum
    BIˇ
XR    #3,#3               Clear for loading bignum length
XR    #2,#2               Clear bit counter
ICM   #3,B'0111',1(#7ˇ
  SLA   #3,3                Bytes x 8 = bits in bignum
  LA    #4,##VECDAT(,#7)    Get address of first bignum word
  VLVCU #3                  Set up vˇ
P   VLVM  #4                  Load a chunk of bignum bits
    VCOVM #2                  Count the 1-bits in the chunk
    VLVCU #3                  Decrement element cou nt, set sec siz

                    CL    #2,ZLCSFTHI         Compare with largest SFT?
                    BH    FCONS               Not a small fixnum?
            ˇ
                      LA    #15,#SFT(#2)        Get address of small fix
                      BR    #14
             *             ˇ
               FCONS    LR    #7,#14              Save return address
                        #MKAT FIXED               Make fixnum
                        BR    #7          ˇ
                 *
                 BIGM     LA    #2,##VECDAT(,#7)    Start of bignum for
                          XR    #3,#3               Clearˇ
ength                       ICM   #3,B'0111',1(#7)    Load the bignum le
                            LA    #4,=X'80'           Point to pattern o
nus bit                     LA    #5,1                Pad byte=0, length
                              CLCL  #2,#4               Search for word
st 1 bit                      N     #2,=X'FFFFFFFC'     Point to nonzero
                              L     #5,0(,#2)           Load first nonze
       ˇ
word of bignum                  LCR   #5,#5               Complement wor
ightmost 1                      ST    #5,ZLCDBL           Store for late
unt by VF             ˇ
ter to 1st 1                      SR    #2,#7               (#2-#7-4)*31
er of 0 bits                      SH    #2,=H'4'            -4
                                  MH ˇ
                                    SRA   #2,2                /4
                                    LA    #6,32               Number of
check                               LA    #4,ZLCDBL ˇ
emented temp word                     VLVCU #6                  Set sect
 to no. of bits              BMWLOOP  VLCVM #4                  We count
 load complement                      VCOVM #2                   beˇ
ng, add count to #5                     VLVCU #6                  Set se
ze to no. of bits                       BC    3,BMWLOOP           More b
r sections in word?                     BCTR  #3,0                Round
efˇ
is, only rest of bignum                   SLA   #3,3                Conv
s-remaining to bits                       LA    #5,4(,#5)           Set
after rightmost "+
tor loop counteˇ
hunk of bignum bits                           VCOVM #2
e 1-bits in the chunk                         VLVCU #3
t element count, set sec siz  ˇ
ne with all bits?                               CL    #2,ZLCSFTHI
e with largest SFT?                             BH    FCONS
small fixnum?                                ˇ
te offset in SFT                                  LA    #15,#SFT(#2)
address of small fixnum                           BR    #14
rn with bit-count of neg bignum          *==================ˇ
=================================*         .CONTIN1 ANOP
                                           *
                                                    DROP  #15
                                                      USING LOGCOUNT,#3
                                                      SPACE 1
                                             ERROR1   LR    #3,#15
          ˇ
UNT not an integer - ',(#7)                             SPACE 1
                                                        LTORG
                         Ä                                END
                                                 {
      TITLE 'LOGNOT - BUILT-IN ZIL 1.3 SUBROUTINE'
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
 *                                                                     *
 * LOGNOT takes one integer argument.                                  *
 *                          ˇ
   * LOGNOT is not worth vectorizing because of the sign and magnitude
   * implementation of bignums.  This is actually an advantage in this
   * case, since, on the average, most of tˇ
     * The equivalent LOGNOT operation is simply adding or subtracting
     * one to the magnitude and flipping the sign.  For large bignums
     * the most important speed operation is copying.  Notˇ
       * is not the fastest way to copy on current IBM hardware.
       *
       *****************************************************************
         LOGNOT   #ZBEG MINARGS=1,MAXARGS=1,NAME='LOGNOT'
                  #ZPDS 1*4+12+0 (= 16)     DEFINE STACK SIZE
                  #ZSAV ,                   SAVE REGISTERS
        ˇ
                    L     #6,0(,#11)          Load argument
                    CLI   ##TYPE(#6),##FIXNUM Is arg a fixnum?
                    BNEˇ
             F        L     #2,##CDR(,#6)       Get arg
                      X     #2,#SFWM1           Do logical XOR with X'FF
                      #MKAT FIXED     ˇ
               RET      #ZRET ,                   RESTORE REGISTERS AND
               *
               NF       CLI   ##TYPE(#6),##BIGNUM Is ˇ
                          BNE   ERROR1              Arg is not an intege
                 B        XR    #5,#5               Clear for inserting
ength                     ICM   #5,B'0111',1(#6)    Insert bignum leˇ
g                           ICM   #7,B'1111',##VECDAT(#6) Get LS word an
ign                         L     #15,ZLCBIG          Preload bignum-mak
ss                          BM    BM                  Bignum is negative
   +
 ˇ
nd location                     AH    #7,=H'1'            Pretend 2's co
, so must +1                    BO    BPO                 Overflow, we m
y to next word  ˇ
 LS word                          ST    #7,##VECDAT(#15)    Store LS wor
ult bignum                        STCM  #5,B'0111',1(#15)   Store bignum
in header                      ˇ
opy to                              SH    #5,=H'4'            One word l
opy                                 LA    #4,##VECDAT+4(,#6)  Start of a
opy from                            LR    #3,#ˇ
nation lengths same                   MVCL  #2,#4               Copy unc
art of bignum                         ST    #2,ZLCVSNXT         Update a
ity pointer                           B     RET              ˇ
er                             *
                               BPO      ST    #7,##VECDAT(#15)    Store
00' in LS word                          XR    #2,#2               Genera
or storing                                LA    #3,8                Star
ex for loop                               LA    #4,4                Word
r increment                      BPOLOOP  L     #7,##VECDAT-4(#3,#6) Loa
ord        ˇ
rry from previous word                      BNO   BPNO                No
w, stop adding                              ST    #2,##VECDAT-4(#3,#15)
word in result bignum     ˇ
ds to examine?                       *
                                              LA    #5,4(,#5)
rd to bignum length                      ˇ
tore                                            ST    #7,##VECDAT-4(#5,#
e 1 in high word                                STCM  #5,B'0111',1(#15)
bignum length in header                         LA    #2ˇ
te availability pointer                           ST    #2,ZLCVSNXT
e availability pointer                            B     RET
rn to caller                             *                             ˇ
                                           BPNO     ST    #7,##VECDAT-4(
Store carried-to word in result                     STCM  #5,B'0111',1(#
ore bignum length in header                         SR    #5,#3
maininˇ
Start of unchanged bignum part                        LR    #3,#5
Remaining length to copy                              LA    #2,##VECDAT(
Start for storing unc hanged bignum           ˇÁ
4               Copy unchanged part of bignum                         ST
LCVSNXT         Update availability pointer                           B
                Return to caller                             *ˇ
                                                               BM
,##VECDAT(,#5)    Size of possible required bignum
4,#15             Ask for bignum space and location
#7,=X'7FFFFFFF'     Mask out the sign bit
#7,=H'1'            Pretend 2's complement, so must -1
BMU                 Underflow, must borrow from next wrd
#7,##VECDAT(ˇ
  #5,B'0111',1(#15)   Store bignum length in header
  #2,##VECDAT+4(,#15) Start of area to copy to
  #5,=H'4'            One wˇ
    #4,##VECDAT+4(,#6)  Start of area to copy from
    #3,#5               Source and destination lengths same
CL  #2,#4               Copy unchanged parˇ
ST    #2,ZLCVSNXT         Update availability pointer
B     RET                 Return to caller                             *
                                                         ˇ
  ST    #7,##VECDAT(#15)    Store X'80000000' in LS word
  L     #2,=X'7FFFFFFF'     Generate max pos word for storing
  LA    #3,8                Starting index for loop
    LA    #4,4                Word size for increment
OP  L     #7,##VECDAT-4(#3,#6) Load next word
    SH    #7,=H'1'            Sub the borrow from previous word
    BNMˇ
      ST    #2,##VECDAT-4(#3,#15) Store 0 word in result bignum
      BXLE  #3,#4,BMOLOOP       More words to examine?
                      ˇ
        B     ERROR2              Severe error, should never get here

MNM     ST    #7,##VECDAT-4(#3,#15) Sˇ
          CR    #5,#3               Remaining length to copy
          BZ    BMNZ                Nothing more to copy with MVCL
          STCM  #5,B'0111',1(#15)   Store bignum lenˇ
            SR    #5,#3               Remaining length to copy
            LA    #4,##VECDAT(#3,#6)  Start of unchanged bignum part
            LR    #3,#5               Remaining length to copy     +
              LA    #2,##VECDAT(#3,#15) Start for storing unchangˇ
                MVCL  #2,#4               Copy unchanged part of bignum
                ST    #2,ZLCVSNXT         Update availability pointer
                B     RET                 Return to caller
ˇ
         BMNZ     LTR   #7,#7               Is highest word a zero?
                  BZ    BMNL                Result must be one word less
               ˇ
                    STCM  #5,B'0111',1(#15)   Store bignum length in hea
                    LA    #2,##VECDAT(#5,#15) Update availability pointe
                    ST    #2,Zˇ
                      B     RET
             *
             BMNL     SH    #5,=H'4'         ˇ
                        STCM  #5,B'0111',1(#15)   Store bignum length in
                        LA    #2,##VECDAT(#5,#15) Update availability po
                        ST    #2,ZLCVSNXT         Store avaiˇ
                          B     RET
                 *
                 ERROR1   #ERR  'Argument to LOGNOT not an integer - ',(
                   ERROR2   #ERR  'System error in LOGNOT - defective bi
,(#6)                       LTORG
                            END
                    {
-IN ZIL 1.3 SUBROUTINE'                          ***********************
**************************************** 00012000*
                                       * 00013000*ˇ
e Charles Stark Draper Laboratory Inc.   * 00014000*
hts reserved.                            * 00015000*
                                         * 00015100**************ˇ
********************************************         *
                                           *         * LOGTEST takes two
 arguments.                                *         *
ˇ
                                             *         *
                                             *         * It doesn't real
o vectorize LOGˇ
  If the answer is T, you don't have to look   *         * any further.
instructions always run to completion, and     *         * may therefore
nger to determine that somethiˇ
                                                 *         *
                                                 *         *************
*********************************************ˇ
RGS=2,MAXARGS=2,NAME='LOGTEST'                               *
                                                                      LM
7,0(#1)         LOAD ARGUMENTS                              ˇ
TYPE(#6),##FIXNUM Is first arg a fixnum?
1                 Branch to Not Fix 1
TYPE(#7),##FIXNUM Is second arg a fixnum?
F1NF2               Branch to Fix 1 Not Fix 2                    F1F2
#2,##CDR(,#6)       GET VALUE 1
#2,##CDR(,#7)       DO LOGICAL AND WITH VALUE 2
#15,#8    ˇ
  #14                 IF ALL REQUESTED BITS ZERO, FALSE            FALSE
  #15,#10             It's FALSE, load it
  #14                 Retˇ
                                                                     TRU
    #15,#8              Load TRUE
    #14                 Return to callerˇ
                                                                       F
CLI   ##TYPE(#7),##BIGNUM Is arg 2 a bignum?
BNE   ERROR2              Arg 2 is invalid type        +
  TM    ##CDR(#6),X'80'     Is arg 2 fixnum negative?ˇ
    BO    TRUE                Always TRUE if arg 2 negative?
    L     #5,##VECDAT(,#7)    Lowest word of bignum
    LPR   #5,#5               2's complement if negative            ˇ
      N     #5,##CDR(,#6)       Check for matches with fixnum
      LR    #15,#8              Load TRUE in case we need it
      BNZR  #14                 Match found, return with TRUE
   ˇ
        BR    #14                 Return to caller with FALSE

1NB2    CLI   ##TYˇ
          BNE   ERROR2              Arg 2 is not a fixnum?
 B1F2     TM    ##CDR(#7),X'80'     Is arg 2 fixnum negative?
          BO    TRUE             ˇ
   B1FP2    L     #5,##VECDAT(,#6)    Lowest word of bignum
            LPR   #5,#5               2's complement if negative
            N     #5,##CDR(,#7)       Check for ˇ
              LR    #15,#8              Load TRUE in case we need it
              BNZR  #14                 Match found, return with TRUE
              LR    #15,#10             No match found, load FAˇ
                BR    #14                 Return to caller with FALSE
       *
       NF1      CLI   ##TYPE(#6),##BIGNUM Is first arg a bignum?
                  BNE   ERROR1              Arg 1 is invalid type
                  CLI   ##TYPE(#7),##BIGNUM Is second arg a bignum?
                  BNE   B1NB2               Go to Big 1 No Big 2
         B1B2ˇ
                    BO    BM1B2               Go to Big Minus 1 Big 2
                    TM    ##VECDAT(#7),X'80'  Test sign of bignum 2
                    BO    BPˇ
             BP1BP2   LM    #4,#5,##VECDAT(#6)  Let's examine two lowest
irst                  N     #4,##VECDAT(#7)     Any common bits in LS wo
                      BNZ   TRUE           ˇ
                        N     #5,##VECDAT+4(#7)   Any common bits in sec
?                       BNZ   TRUE                If so, return with TRU
                        L     #5,0(,#6)           Load typˇ
1                         CL    #5,0(,#7)           Compare bignum lengt
s same)                   BNH   OKLEN1              We want shorter leng
o args                    L     #5,0(,#7)           Load length of bignu
                   ˇÁ
num type-byte                             CH    #5,=H'8'            Is s
ignum only 2 words?                       BE    FALSE               If s
eviously found no match           ˇ
first word to check                         LA    #4,4                Wo
ment amount for BXLE               LOOP1    L     #2,##VECDAT-4(#3,#6) L
 of bignum 1                                N    ˇ
or match bits in bignum 2                     BNZ   TRUE
t match, return with TRUE                     BXLE  #3,#4,LOOP1
ds to check?                                  LR    #15,#10     ˇ
ches found, load FALSE                          BR    #14
 to caller                             *
                                       BP1BM2   LR    #5,#7

same code for pos - neg                           LR    #6,#5
num combination can be used                       B     BM1BP2
inue with codeˇ
                                           BM1B2    TM    ##VECDAT(#7),X
st sign of bignum 2                                 BO    TRUE
o negative integers always maˇ
Load type and length of arg 2                         CL    #3,0(,#6)
Compare bignum lengths (types same)                   BH    TRUE
Leading 1 in big1 will always match         ˇ
  Start of data on negative bignum                      N     #3,=X'00FF
  Mask out the type-byte                                LA    #4,=X'80'
  Compare field for neg sign and 1st b                  LA ˇ
    Length of 1-byte compare field                        CLCL  #2,#4
    Find rightmost 1 in neg bignum                        BNH   FALSE
    No 1's in big1 within length of big2                  N     #2,=X'FF
'     Point to word containing rightmost 1                  L     #3,0(,
      Load first nonzero word                               N     #3,=X'
'     Remove sign bit if LS word of bignum                  LCR   #3,#3
      Comˇ
        Absolute address to bignum offset                     N     #3,#
4(#2,#7) Common bits in wrd w/rigthmst 1?                     BNZ   TRUE
        Yes, return withˇ
          Clear for loading shorter bignum len                  LA    #4
          Word increment for loop                               ICM   #5
,1(#7)    Load length of arg 2 bignum  +
LSE         No match at end of short,ˇ
ECDAT-4(#2,#6) Load next word                                       X
FFFFFFFF'     Flip the bits (2's-complement)                        N
ECDAT-4(#2,#7) Match the bits                       ˇ
                Match?  Then return with TRUE                         BX
4,LOOP2         More words to check for match?               *
                                                                   ˇ
5,#10             No matches found, load FALSE
4                 Return with FALSE                            *

5 ˇ
LOGTEST,#3
1                                                                ERROR1
#3,#15           ˇ
  'Argument 1 to LOGTEST not an integer - ',(#6)                   ERROR
  #3,#15
  'Argument 2 to LOGTEST not an ˇ
ACE 1
ORG
D                                                                     
¶
           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002*
               00017002* LOR TAKES TWO INTEGER ARGUMENTS.   CURRENTLY TH
BE FIXNUMS.    00018002*                          ˇ
                 00019002LOR      #ZBEG MINARGS=2,MAXARGS=2,NAME='LOR'
                 00020002         #ZPDS 2*4+12+0 (= 20)     DEFINE STACK
                 00030002         #ZSAV ,                   SAVE ˇ
                   00040002         SPACE
                   00050002         LM    #6,#7,0(#11)        LOAD ARGUM
                   00060002*
ˇ
                     00080002*
                     00090002         CLI   ##TYPE(#6),##FIXNUM FIRST AR
UST BE A FIXNUMˇ
                       00110002         CLI   ##TYPE(#7),##FIXNUM SECOND
T MUST BE A FIXNUM     00120002         BNE   ERROR2
                       0013000ˇ
ND VALUE 1               00140002         O     #2,##CDR(,#7)       DO L
R WITH VALUE 2           00150002         L     #15,ZLCCONS         GET
OF CONS                  00160002         LA ˇ
NT STACK LOCATION TO CONS  00170002         #BASR #14,#15             CA
TO MAKE A NEW FIXNUM       00180002         SPACE 1
                           00190002         #ZRET ,         ˇ
REGISTERS AND RETURN         00200002         SPACE 1
                             00210002ERROR1   #ERR  'Argument 1 to logic
t a fixnum - ',(#6)          00220002ERROR2   #ERR  'Argument 2 to logic
not a fixnum - ',(#7)          00230002         SPACE 1
                               00240002         LTORG
                               00250002         END
          ∆                      00260002
E 'LSH - BUILT-IN ZIL 1.3 SUBROUTINE'                      00010000*****
********************************************************** 00011002*
                                                         * 00012002*ˇ
on 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
           All rights reserved.                            * 00014002*
                                                           * 00015002***
***ˇ
                                                             * 00017002*
ES TWO INTEGER ARGUMENTS.  CURRENTLY THEY MUST BE FIXNUMS.   * 00018002*
                  ˇ
FUNCTION DOES A LOGICAL SHIFT OPERATION.  COMPARE ASH.         * 0002000
                                                               * 0003000
*********************************ˇ
    #ZBEG MINARGS=2,MAXARGS=2,NAME='LSH'                           00050
    #ZPDS 2*4+12+0 (= 20)     DEFINE STACK SIZE                    00060
    #ZSAV ,                   SAVE REGISTERS    ˇ
      SPACE                                                          000
      LM    #6,#7,0(#11)        LOAD ARGUMENTS                       000
      CLI   ##TYPE(#6),##FIXNUM                                ˇ
        BNE   ERROR1                                                   0
        CLI   ##TYPE(#7),##FIXNUM                                      0
        BNE   ERROR2                                                   0
2         L     #2,##CDR(,#6)       GET FIXED VALUE 1
2         L     #3,##CDR(,#7)       GET FIXED VALUE 2
2         LTR   #3,#3               TEST SHIFT AMOUNT
2         BZ ˇ
002         BM    RSHIFT              IF NEGATIVE, RIGHT SHIFT REQUIRED
002         SLL   #2,0(#3)            ELSE POSITIVE, DO LEFT SHIFT
002         B     NOSHIFT   ˇ
00002RSHIFT   DS    0H
10002         LPR   #3,#3               CHANGE SHIFT AMOUNT TO POSITIVE
20002         SRL   #2,0(#3)            DO ˇ
0230002NOSHIFT  DS    0H                  NOW #2 CONTAINS SHIFTED VALUE
0240002         LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO
0250002         #MKAT FIXED               MAKE A FIXNUM ATˇ
 00260002         SPACE 1
 00270002         #ZRET ,                   RESTORE REGISTERS AND RETURN
 00280002         SPACE 1
   00290002ERROR1   #ERR  'Argument 1 to LSH not a fixnum - ',(#6)     ˇ
     00300002ERROR2   #ERR  'Argument 2 to LSH not a fixnum - ',(#7)
     00310002         SPACE 1
     00320002         LTORG
     0ÿ 0330002         END
       00340002{
.3 SUBROUTINE'                     00010000*****************************
********************************** 00011002*
                                 * 00012002*ˇ
les Stark Draper Laboratory Inc.   * 00013002*                     All r
served.                            * 00014002*
                                   * 00015002**************ˇ
************************************** 00016002*
                                       00017002* LXOR TAKES TWO INTEGER
S.  CURRENTLY THEY MUST BE FIXNUMS.    00018002*
                                         00019002LXOR     #ZBEG MINARGS=
S=2,NAME='LXOR'                          00020002         #ZPDS 2*4+12+0
    DEFINE STACK SIZE                    00030002         #ZSAV ,
    SAVE ˇ
                                           00050002         LM    #6,#7,
      LOAD ARGUMENTS                       00060002*
                        ˇ
                                             00080002*
                                             00090002         CLI   ##TY
#FIXNUM FIRST ARGUMENT MUST BE A FIXNUMˇ
                                               00110002         CLI   ##
,##FIXNUM SECOND ARGUMENT MUST BE A FIXNUM     00120002         BNE   ER
                                               0013000ˇ
CAR(#6)     GET HEADER AND VALUE 1               00140002         X
(,#7)       DO LOGICAL XOR WITH VALUE 2          00150002         L
ONS         GET ADDRESS OF CONS                  00160002         LA ˇ
,#11)         PASS CURRENT STACK LOCATION TO CONS  00170002         #BAS
5             CALL CONS TO MAKE A NEW FIXNUM       00180002         SPAC
                                                   00190002         #ZRE
    ˇ
                                                     00210002ERROR1   #E
ument 1 to logical XOR not a fixnum - ',(#6)         00220002ERROR2   #E
ument 2 to logical ˇ
                                                       00240002
                                                       00250002
                                  ∆                      00260002

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002*
       00017002* MAKNUM TAKES AN ARG OF ANY TYPE AND RETURNS ITS VIRTUAL
.      00018002*                          ˇ
         00019002MAKNUM   #ZBEG MINARGS=1,MAXARGS=1,NAME='MAKNUM'
         00020002         #ZPDS 1*4+12+0 (= 16)     DEFINE STACK SIZE
         00030002         #ZSAV ,                   SAVE ˇ
           00040002         SPACE
           00050002         L     #2,0(,#11)          LOAD ADDRESS OF AR
           00060002         LA    #0,16(,#11)         PASS CURRENT STACK
ION TO CONS  00070002         #MKAT FIXED               MAKE A FIXNUM
             00080002         SPACE
             00090002         #ZRET ,                   RESTORE REGISTER
TURN   º       00100002         SPACE
               00110002         END
               00120002
-IN ZIL 1.3 SUBROUTINE'                  00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00017002* THIS MODULE RETUR
AXIMUM NUMBER OF ARGUMENTS DEFINED FOR A   * 00018002* COMPILED FUNCTION
ˇ
T BE CODE, I.E. THE VALUE OF THE ZILLOAD     * 00020002* FUNCTION OR OF
, FSUBR, ETC. PROPERTY OF A FUNCTION ATOM.   * 00030002*
               ˇ
************************************************ 00050002         SPACE
                                                 00060002MAXARGS  #ZBEG
1,MAXARGS=1,NAME='MAXARGS'    ˇ
                                                   00080002         L
#1)           PICK UP PARAMETER (FUNCTION CODE)    00090002         TM
(#6),##CODE   MUST BE A COMPILED CODE OBJECT ˇ
R               (SUBR OR CLOSURE)                    00110002         XR
4               ELSE CLEAR INSERT REGISTER           00120002         XR
2               CLEAR INSERT REG                     0013000ˇ
,7,##CAR+1(#6)    GET POINTER TO COMPILED CODE         00140002
,4(,#4)           GET LENGTH OF IDENTIFIER             00150002
,5+3(#2,#4)       POINT TO MODULE CODE PAST IDENTIFIER 00160002
#3,=X'FFFFFFFC'     ROUNDING UP TO NEXT FULLWORD         00170002
ZINT,#3             TO POINT TO "ZINT" AREA              00180002
#2,ZINMAXAR         PICK UP MAXARGS VALUE                00190002
#15       ˇ
  #2,3                Convert to index into fixnum table   00210002
  #15,#SFT(#2)        Point to fixnum in table             00220002
  #14                    ˇ
ACE 1                                                        00240002ERR
    0H                                                       00250002
    #2,#15                              ˇ
USING MAXARGS,#2                                               00270002
#ERR  'Argument to MAXARGS not a compiled code object (SUBR orX00280002
       closure) - ',(#6)                               +
  SPACE 1                                            ˇ
    LTORG                                                          00310
    SPACE 1                                                        00320
    #ZINT ,                   MAP THE CODE HEADER AREA             0ÿ 03
      END                                                            003

                 00010000***********************************************
**************** 00011003*
               * 00012003*ˇ
aboratory Inc.   * 00013003*                     All rights reserved.
                 * 00014003*
                 * 00015003**************ˇ
******************** 00016003*
                   * 00017003* MEMQ: SAME AS COMMON LISP (MEMBER A B :TE
                   * 00018003*                          ˇ
                     * 00019003* THIS ROUTINE IS NONRECURSIVE AND USES N
SPACE.               * 00020003*
                     * 00030003****************************************ˇ
************************ 00040003         SPACE 1
                         00050003***************************************
************************ 00060003*
      ˇ
                         * 00080003*
                         * 00090003* 03/30/88 - Error checking added, no
EMQ gets compiled inlˇ
er minimal.                * 00110003*
                           * 00120003***********************************
**************************** 0013000ˇ
                               00140003MEMQ     #ZBEG MINARGS=2,MAXARGS=
MEMQ'                          00150003         SPACE 1
                               00160003         LR ˇ
                                 00170003         USING MEMQ,#2
                                 00180003         DROP  #15
                                 00190003         LR    #4,#14    ˇ
VE RETURN ADDRESS                  00190103         LM    #14,#15,0(#1)
AD ARGS                            00190203LOOP     DS    0H
                                   00190303         CR    #15,#10
Eˇ
THEN RETURN NIL                      00190503         LM    #5,#6,##CAR(
#5 = CAR OF (SUB)LIST, #6 = CDR      00190603         LTR   #5,#5
IF (SUB)LIST CELˇ
  THEN BAD LIST, ERROR                 00190803         CR    #14,#5
  IF ARG1 IS EQ TO CAR OF (SUB)LIST    00190903         BER   #4
  THEN RETURN                  +
    ELSE GET CDR OF (SUB)LISTˇ
      AND CONTINUE.                        00193003ERROR1   DS    0H
                                           00194003         L     #3,4(,
                                           0ˇ
to MEMQ not a proper list - ',(#3)           00196003         SPACE 1
                                             00197003         LTORG
                                             00198003      <    END
                                               00199003{

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002*
0017002* THIS MODULE RETURNS THE MINIMUM NUMBER OF ARGUMENTS DEFINED FOR
0018002* COMPILED FUNCTION, PRIMARˇ
 00019002* THE INPUT PARAMETER MUST BE CODE, I.E. THE VALUE OF THE ZILLO
 00020002* FUNCTION OR OF THE SUBR, FSUBR, ETC. PROPERTY OF A FUNCTION A
 00030002*                                       ˇ
 * 00040002*************************************************************
** 00050002         SPACE
   00060002MINARGS  #ZBEG MINARGS=1,MAXARGS=1,NAME='MINARGS'    ˇ
     00070002         SPACE
     00080002         L     #6,0(,#1)           PICK UP PARAMETER (FUNCT
)    00090002         TM    ##TYPE(#6),##CODE   MUST BE A COMPILED CODE

       00110002         XR    #4,#4               ELSE CLEAR INSERT REGI
       00120002         XR    #2,#2               CLEAR INSERT REG
       0013000ˇ
         00140002         IC    #2,4(,#4)           GET LENGTH OF IDENTI
         00150002         LA    #3,5+3(#2,#4)       POINT TO MODULE CODE
ENTIFIER 00160002         N  ˇ
RD         00170002         USING ZINT,#3             TO POINT TO "ZINT"
           00180002         IC    #2,ZINMINAR         PICK UP MINARGS VA
           00190002         DROP  #15       ˇ
             00200002         SLA   #2,3                Convert to index
xnum table   00210002         LA    #15,#SFT(#2)        Point to fixnum
             00220002         BR    #14                 Retˇ
               00230002         SPACE 1
               00240002ERROR    DS    0H
               00250002         LR    #3,#15
                 00260002         USING MINARGS,#3
                 00270002         #ERR  'Argument to MINARGS not a compi
 object (SUBR orX00280002                closure) - ',(#6)
         +
       ˇ
                     00310002         SPACE
                     00320002         #ZINT ,                   MAP THE
DER AREA             0ÿ 0330002         END
                       00340002{
 - BUILT-IN ZIL 1.3 SUBROUTINE'                    00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002*
                                                     * 00017002* MINUS T
 ARGUMENT - A FIXNUM, FLONUM OR BIGNUM               * 00018002*
          ˇ
******************************************************** 00020002
1                                                        00030002MINUS
MINARGS=1,MAXARGS=1,NAME=ˇ
S 16                                                       00050002
V ,                                                        00060002
E                                       ˇ
    #15,0(,#11)         GET THE ARG                          00080002
I   0(#15),##FIXNUM                                          00090002
    MINUSFIX                                           ˇ
CLI   0(#15),##SFLOAT                                          00110002
BE    MINUSSFL                                                 00120002
CLI   0(#15),##BIGNUM                                          0013000ˇ
  BE    MINUSBIG                                                 0014000
  CLI   0(#15),##DFLOAT                                          0015000
  BE    MINUSDFL                                                 0016000
  B  ˇ
    SPACE 1                                                        00180
FIX DS    0H                  MINUS OF A FIXNUM                    00190
    SPACE 1         ˇ
      ICM   #2,15,##CDR(#15)    GET FIXNUM VALUE                     002
      BZ    RETURN              IF ALREADY ZERO, RETURN ITSELF       002
      LCR   #2,#2               NEGˇ
        BO    FIXOVFLO            IF OVERFLOW, MUST HAVE BEEN -2**31   0
        LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS  0
        #MKAT FIXED               MAKE A FIXNUM   ˇ
2RETURN   DS    0H
2         SPACE 1
2         #ZRET ,                   RETURN WITH VALUE            +
002         SPACE 1                                            ˇ
00002FIXOVFLO DS    0H                  HERE IF INPUT IS -2**31
10002         LA    #15,P2TO31          RETURN BIGNUM +2**31
20002         B     RETURN
0330002         SPACE 1
0340002MINUSSFL DS    0H                  MINUS OF A SINGLE FLOAT
0350002         SPACE 1
0360002      ˇ
 00370002         LCER  #F2,#F2             NEGATE IT
 00380002         BZ    RETURN              IF WAS ZERO, RETURN SELF, NO
 00390002         STE   #F2,ˇ
   00400002         L     #2,ZLCWORK
   00410002         LA    #0,16(,#11)         PASS CURRENT STACK LOCATIO
S  00420002         #MKAT FLOAT            ˇ
     00430002         B     RETURN              AND RETURN WITH IT
     00440002         SPACE 1
     00450002MINUSDFL DS    0H                  MINUS OF Aˇ
       00460002         SPACE 1
       00470002         LD    #F0,8(,#15)         GET FLONUM VALUE
       00480002         LCDR  #F0,#F0             NEGATE IT
         00490002         BZ    RETURN              IF WAS ZERO, RETURN
T THIS   00500002         L     #15,ZLCMDF          GET ADDRESS OF ZILMD
         00510002         LA    #0,16(,#11)         PASS CURRENT STACK L
TO CONS ˇ
LE FLOAT   00530002         B     RETURN              AND RETURN WITH IT
           00540002         SPACE 1
           00550002MINUˇ
             00560002         SPACE 1
             00570002         CLC   0(12,#15),P2TO31    IF BIGNUM IS 2**
             00580002         BE    BIˇ
XNUM -2**31    00590002         XR    #2,#2               ELSE CLEAR INS
STER           00600002         ICM   #2,7,1(#15)         GET BIGNUM LEN
               00610002         LA    #2,4(,#2)      ˇ
R                00620002         LR    #3,#2               SAVE THIS LE
                 00630002         L     #15,ZLCBIG          GET ADDRESS
M MAKER          00640002         LA    #0,16(,#11)         PASS CURˇ
 LOCATION TO CONS  00650002         #BASR #14,#15             CALL ZILBI
                   00660002         LR    #4,#15              SAVE ADDRE
W BIGNUM           00670002         LR    #0,#4               DESTINATIO
S                   00680002ˇÁ
URCE ADDRESS                       00690002         LR    #1,#3
STINATION LENGTH                   00700002         LR    #15,#3
URCE LENGTH                        00710002 ˇ
MOVE OLD BIGNUM TO NEW BIGNUM        00720002         ST    #0,ZLCVSNXT
UPDATE V/S-SPACE POINTER             00730002         LR    #15,#4
GET ADDRESS OF BIGNUM AGAIN          00740002         XI   ˇ
' FLIP SIGN BIT                        00750002         B     RETURN
                                       00760002         SPACE 1
                                       00770002BIG2FIX  DS    0H
    HERE IF INPUT IS +2**31              00780002         LA    #15,M2TO
    RETURN FIXNUM -2**31                 00790002         B     RETURN
                                         00800002         SPACE 1
         ˇ
                                           00820002M2TO31   #IATM -21474
      FIXNUM -2**31                        00830002         SPACE 1
                        ˇ
        ALIGN BIGNUM TO FULLWORD             00850002         DC    YL1(
),AL3(8),F'0,1'   BIGNUM 2**31               00860002         SPACE 1
                                       ˇ
                                               00880002         #ERR  'A
to MINUS not numeric - ',0(#11)                00890002         SPACE 1
                                               0090000¯ 2         LTORG
                                                 00910002         END
                                                 00920002

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002*
0017002* MINUSP TAKES ONE ARGUMENT - A NUMERIC ATOM
0018002*                          ˇ
 00019002***************************************************************
 00020002MINUSP   #ZBEG MINARGS=1,MAXARGS=1,NAME='MINUSP'
 00030002         SPACE                          ˇ
   00040002         L     #2,0(,#1)           LOAD FIRST (AND ONLY) ARGU
   00050002         CLI   ##TYPE(#2),##FLONUM MUST BE NUMERIC ATOM
   00060002         BL    ERROR               ELSE ERROR        ˇ
     00070002         DROP  #15
     00080002*
     00090002* THE FOLLOWING TEST WORKS FOR FIXNUMS, FLONUMS AND BIGNUMS

eft    00110002* half of the flonum when it builds one (and so does the
).     00120002* If anyone changes that behavior, this code must be chan
       0013000ˇ
         00140002         LR    #15,#10             PRESET RETURN VALUE
         00150002         TM    ##CDR(#2),X'80'     TEST SIGN BIT OF VAL
         00160002         BZRˇ
NIL        00170002         LR    #15,#8              IF ONE (NEGATIVE)
           00180002         BR    #14
           00190002         SPACE 1         ˇ
             00200002ERROR    DS    0H                  NOT A NUMERIC AT
             00210002         LR    #3,#15
             00220002         USING MINUSP,#3              ˇ
               00230002         #ERR  'Argument to MINUSP not numeric -
               00240002         SPACE 1
               00250002         LTORG
                 00260002         END
                 00270002
T-IN ZIL 1.3 SUBROUTINE'                   00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002* MKATOM TAKES 3
S, OF WHICH THE LAST 2 ARE OPTIONAL.         * 00017002* THE FIRST IS A
O BE "READ" INTO A SINGLE ATOM.              * 00018002* THE SECOND SPEC
ETˇ
E OBLIST (NOTE THAT DEFAULT IS NOT TO).        * 00020002* THE THIRD SPE
HETHER (NON-NIL) OR NOT (NIL) TO FORMAT THE    * 00030002*  ATOM AS NUME
E POSSIBLE (DEFAUˇ
 RECURSIVE AND USES NO EXTRA STACK SPACE.        * 00050002*************
************************************************** 00060002         SPAC
                                ˇ
RGS=1,MAXARGS=3,NAME='MAKE-ATOM'                     00080002         #Z
                DEFINE STACK SIZE                    00090002         #Z
                SAVE REGISTERS                 ˇ
                                                       00110002
,0(,#11)          GET FIRST ARGUMENT                   00120002
TYPE(#6),##STRING MUST BE A STRING                     0013000ˇ
OK                   OR                                  00140002
##TYPE(#6),##SYMBOL   A SYMBOL                           00150002
ERROR1                 (IF NEITHER, ERROR)               00160002
  #6,##PNAME(,#6)       IF A SYMBOL, TAKE PRINT NAME       00170002OK
  0H                                                       00180002
  #5,#5               CLEAR REGISTER FOR INSERT            00190002
  #5,7,1(#6)ˇ
    #5,ZLCWALEN         IF LENGTH EXCEEDS CURRENT WORKAREA   00210002
H   LENOK               THEN...                              00220002
    #2,7(,#5)            GEˇ
N     #2,=X'FFFFFFF8'      ROUNDED UP TO MULTIPLE OF 8         00240002
LR    #0,#2                SAVE THE NEW WORK AREA LENGTH       00250002
#GETMAIN RC,LV=(0),LOC=BELOW GET A NEW WORˇ
  LTR   #15,#15              IF GETMAIN FAILED                   0027000
  BNZ   ERROR2               THEN ERROR - NOT ENOUGH STORAGE     0028000
  LR    #3,#1                SAVE NEW WORKAREA ADDRESS   +
    ICM   #1,15,ZLCWA          GET ADDRESS OF OLD AREA ˇ
      BZ    NOFREE               IF NONE, THEN SKIP MOVE & FREE      003
      L     #0,ZLCWALEN          GET CURRENT WORK AREA LENGTH        003
      FREEMAIN R,LV=(0),A=(1)    FREE THE OLD WORK AREA              0ˇ
OFREE   DS    0H                                                       0
        ST    #3,ZLCWA             SET NEW ZIL WORKAREA ADDRESS        0
        ST    #2,ZLCWALEN          SET NEW ZIL WORKAREA LENGTH         0
     ˇ
2LENOK    DS    0H                  WORKAREA OK
2         LA    #0,##VECDAT(,#6)    SOURCE ADDRESS = STRING TEXT
2         LR    #1,#ˇ
002         L     #14,ZLCWA           DESTINATION ADDRESS = WORKAREA
002         LR    #15,#5              DESTINATION LENGTH = SOURCE LENGTH
002         MVCL  #14,#0           ˇ
30002*
40002         LR    #0,#5               GET LENGTH OF TEXT
50002         L     #1,ZLCWA            SET POINTEˇ
0460002         LM    #2,#3,4(#11)        SET INTERN FLAG = ARG 2 TO MKA
0470002         LA    #4,24(,#11)         SET CURRENT STACK POINTER FOR
0480002*                                  SET FORMAT FLAG = ARG 3ˇ
 00490002         L     #15,ZLCABLD         CALL ZILABLD TO MAKE AN ATOM
 00500002         #BASR #14,#15             (RETURNS ATOM IN #15)
 00510002         SPACE 1
ˇ
   00530002         SPACE 1
   00540002ERROR1   DS    0H
   00550002    ˇ
     00560002         SPACE 1
     00570002ERROR2   DS    0H                  ERROR - NOT ENOUGH STORA
     00580002         XR    #0ˇ
NGTH   00590002         ST    #0,ZLCWA
       00600002         ST    #0,ZLCWALEN
       00610002         #ERR  'ZIL2007 MAKE-Aˇ
ymbol.',x00620002               PREFIX=NO
         00630002         SPACE 1
         00640002         LTORG                             Â
           00650002         END
           00660002{
3 INTERNAL SUBROUTINE'                 00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* THIS SUBROUTINE MAK
NUM FROM A LIST OF FIXNUMS.              * 00018002*
                                           * 00019002* IT TAKES ONE REQU
UMENT - A LIST OF FIXNUMS.                 * 00020002*
                                           * 00030002*******************
*************ˇ
                                               00050002MKBIGNUM #ZBEG MI
MAXARGS=1,NAME='MAKE-BIGNUM'                   00060002         SPACE 1
                            ˇ
                                                 00080002         #ZSAV
                                                 00090002         SPACE
                                           ˇ
#11)          GET ARG                              00110002         LA
              INITIALIZE LENGTH REQUIRED FOR BIGNU 00120002LENLOOP  CR
              SCAN UNTIL END OF LIST               0013000ˇ
EN                                                   00140002         TM
PE(#3),##ATOM   IF (SUB)ARG IS NOT A LIST            00150002         BO
R1              THEN ERROR                           00160002         LA
,4(,#2)           ELSE INCREMENT LENGTH FOR BIGNUM     00170002
,##CDR(,#3)       GET CDR OF LIST                      00180002
NLOOP                                                  00190002GOTLEN
        ˇ
#2,=H'12'           IF LESS THAN 2 FIXNUMS IN LIST       00210002
ERROR2              THEN ERROR                           00220002
#15,ZLCBIG          GETˇ
  #0,16(,#11)         POINT TO CURRENT STACK LOCATION      00240002
R #14,#15             CALL ZILBIG TO GET BIGNUM SPACE      00250002
  #2,=H'4'            SET LENGTH OF BIˇ
CM  #2,7,1(#15)         STORE BIGNUM LENGTH                  00270002
    #3,0(,#11)          GET LIST ARG AGAIN                   00280002
    #4,##VECDAT(,#15)   POINT TO FIRST SLOT IN BIGNUM+
LR    #5,#4               SAVE THIS POINTER FOR CHEˇ
  CR    #3,#10              PROCESS UNTIL END OF LIST            0031000
  BE    FIXEND                                                   0032000
  L     #2,##CAR(,#3)       GET CAR OF (SUB)LIST                 0ˇ
    CLI   ##TYPE(#2),##FIXNUM IF IT IS NOT A FIXNUM                00340
    BNE   ERROR1              THEN ERROR                           00350
    ICM   #7,15,##CDR(#2)     ELSE GET FIXNUM VALUE                00360
 ˇ
      BNM   FIXOK               THEN (IT IS VALID ONLY IF FIRST #).. 003
      CR    #4,#5               IF WE'RE PROCESSING THE FIRST FIXNUM 003
      BNE   ERROˇ
IXOK    ST    #7,0(,#4)           IF OK, STORE VALUE INTO BIGNUM       0
        LA    #4,4(,#4)           INCREMENT SLOT POINTER               0
        L     #3,##CDR(,#3)    ˇ
2         B     FIXLOOP
2FIXEND   DS    0H
2*                                            ˇ
002* AT THIS POINT #7 CONTAINS THE LAST FIXNUM STORED INTO THE BIGNUM.
002* IF THIS VALUE IS ZERO, WE HAVE BUILT AN UNNORMALIZED BIGNUM,
002* WHICH IS AN ERROR.                                      ˇ
90002*
00002         LTR   #7,#7               IF LAST WORD OF BIGNUM IS ZERO,
10002         BZ    ERROR3              THEN ERROR
0520002         CLC   0(12,#15),BADBIG    IF A BIGNUM -2147483648 WAS CR
0530002         BE    ERROR5              THEN ERROR
0540002*                                  ELSE MAKE BIGNUM PERMANENT
0550002    ˇ
 00560002         SPACE 1
 00570002RETURN   DS    0H                  #15 POINTS TO BIGNUM BUILT
 00580002         SPACE 1 ˇ
   00590002         #ZRET ,
   00600002         SPACE 1
   00610002         DS    0A             ˇ
     00620002BADBIG   DC    YL1(##BIGNUM),AL3(8),X'80000000',F'1'  -2**3
NUM  00630002         SPACE 1
     00640002ERROR1   #ERR  'Argument to MAKE-BIGNUM notˇ
 more X00650002               fixnums - ',0(#11)
       00660002ERROR2   EQU   ERROR1              Too few fixnums
       00670002ERROR3   #ERR  'The last fixnum passed to MAKE-BIGNUM ca
 zero.',X00680002ˇÁ
n                     X00690002               'Invalid argument: ',0(#11
                       00700002ERROR4   #ERR  'All fixnums in MAKE-BIGNU
nt must be nonnegativeX00710002 ˇ
                        X00720002               X'0D',              Carr
urn                     X00730002               'Invalid argument: ',0(#
                         00740002ERROR5   #ERR ˇ
 (most negative fixnum) deX00750002               tected by MAKE-BIGNUM.
                          X00760002               X'0D',              Ca
eturn                     X00770002               'Invalid argˇ
                             00780002         SPACE 1
                             00790002         LTORG
                             00800002         SPACE 1
                               00810002         END
                               00820002
'MKFIXNUM - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
                                                             00017002* M
TAKES A FLONUM AND MAKES A FIXNUM OUT OF IT.                 00018002* T
R IS *NOT* CONVEˇ
CK INTO THE FIXNUM PART.  THIS FUNCTION IS USED, AMONG OTHER   00020002*
 TO HELP THE COMPILER COMPILE FLONUMS MORE ACCURATELY.         00030002*
                               ˇ
e argument is a single float, a single fixnum is returned.       0005000
e argument is a double float, a CONS (pair) of fixnums is        0006000
ned.                                          ˇ
                                                                   00080
****************************************************************** 00090
NUM #ZBEG MINARGS=1,MAXARGS=1,NAME='MAKE-FIXNUM'             ˇ
      #ZPDS 1*4+12+0 (= 16)     DEFINE STACK SIZE                    001
      #ZSAV ,                   SAVE REGISTERS                       001
      SPACE                                                          001
        L     #1,0(,#11)          LOAD ADDRESS OF ARG 1                0
        CLI   ##TYPE(#1),##SFLOAT If arg 1 is a single-float           0
        BE    MKSF                then process single-float            0
        CLIˇ
2         BE    MKDF                then process double-float
2         B     ERROR               Else error
2         SPACE 1         ˇ
002MKSF     DS    0H                  Single-float:  make one fixnum
002         SPACE 1
002         L     #2,##CDR(,#1)       Getˇ
30002         LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO C
40002         #MKAT FIXED               MAKE A FIXNUM
50002         B     RETURN                              ˇ
0260002         SPACE 1
0270002MKDF     DS    0H                  Double-float:  make pair of fi
0280002         SPACE 1                                                +
 00290002         LA    #0,16(,#11)         PASS CURRENT STACK LOCATIˇ
S  00300002         LM    #3,#4,8(#1)         Get both halves of double
   00310002         LR    #2,#3               Get first half
   00320002         #MKAT FIXED               Make a fixnum
   0ˇ
     00340002         LR    #2,#4               Get second half
     00350002         #MKAT FIXED               Make another fixnum
     00360002      ˇ
       00370002         LR    #2,#15              Get second fixnum
       00380002         L     #15,ZLCCONS         Get address of CONS
       00390002         #BASR #14,ˇ
         00400002         B     RETURN
         00410002         SPACE 1
         00420002RETURN   DS    0H               ˇ
           00430002         #ZRET ,                   RESTORE REGISTERS
RN         00440002         SPACE
           00450002ERROR    DS    0H                            ˇ
             00460002         #ERR  'Argument to MAKE-FIXNUM not a flonu
#11)         00470002         SPACE 1
             00480002         END
               00490002{
ILT-IN ZIL 1.3 SUBROUTINE'                 00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002*
                                               00017002* MKFLONUM TAKES
 AND MAKES A FLONUM OUT OF IT.                 00018002* THE NUMBER IS *
VEˇ
ONUM PART.  THIS FUNCTION MAY BE USED TO         00020002* GENERATE SPEC
WN-HEX-CONTENT FLONUMS.                          00030002*
                 ˇ
, A SINGLE-FLOAT IS CREATED.                       00050002* IF 2 ARGS A
, A DOUBLE-FLOAT IS CREATED.                       00060002*
                                ˇ
**************************************************** 00080002MKFLONUM #Z
RGS=1,MAXARGS=2,NAME='MAKE-FLONUM'                   00090002         #Z
12+0 (= 20)     DEFINE STACK SIZE              ˇ
                  SAVE REGISTERS                       00110002
                                                       00120002
,#2,0(#11)        LOAD ARGS 1 AND 2                    0013000ˇ
##TYPE(#1),##FIXNUM ARG MUST BE A FIXNUM                 00140002
ERROR1              ELSE ERROR                           00150002
#2,#13              IF ARG2 IS OMITTED                   00160002
  MKSINGLE            THEN MAKE A SINGLE-FLOAT             00170002
  #2,#10              IF ARG2 IS NIL                       00180002
  MKSINGLE            THEN MAKE A SINGLE-FLOAT             00190002
  ##TYPE(#2)ˇ
E   ERROR2              THEN ERROR                           00210002
    MKDOUBLE            ELSE MAKE A DOUBLE-FLOAT             00220002
ACE 1                      ˇ
DS    0H                  MAKE A SINGLE-FLOAT                  00240002
SPACE 1                                                        00250002
LE    #F2,##CDR(,#1)      GET FIXNUM PART ˇ
  AE    #F2,=E'0'           NORMALIZE                            0027000
  STE   #F2,ZLCWORK         STORE                                0028000
  L     #2,ZLCWORK          LOAD INTO REG FOR CONSING    +
    CL    #2,##CDR(,#1)       IF BITS DON'T MATCH      ˇ
      BE    OK                  THEN                                 003
                                 WARN USER NUMBER GOT NORMALIZED     003
      #ERR  1,'MAKE-FLONUM is normalizing the value generated by itsX0ˇ
               argument - ',0(#11)                                     0
K       DS    0H                                                       0
        LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO CONS  0
     ˇ
2         B     RETURN
2         SPACE 1
2MKDOUBLE DS    0H  ˇ
002         SPACE 1
002         L     #3,##CDR(,#1)       FIXNUM VALUE 1
002         L     #4,##CDR(,#2)    ˇ
30002         STM   #3,#4,ZLCWORK       STORE TWO WORDS
40002         SDR   #F0,#F0             NORMALIZE WHEN WE...
50002         AD    #F0,ZLCWORK         LOAD AS A ˇ
0460002         STD   #F0,TEMP            STORE
0470002         CLC   TEMP(8),ZLCWORK     IF BITS DON'T MATCH
0480002         BE    OK2                 THEN                   ˇ
 00490002*                                   WARN USER NUMBER GOT NORMAL
 00500002         #ERR  1,'MAKE-FLONUM is normalizing the value generate
X00510002                arguments - ',0(#11),' and ',4(#11)
ˇ
   00530002         LA    #0,20(,#11)         PASS CURRENT STACK LOCATIO
S  00540002         L     #15,ZLCMDF          GET ADDRESS OF ZILMDF
   00550002    ˇ
AT   00560002******** B     RETURN
     00570002         SPACE 1
     00580002RETURN   DS    0Hˇ
       00590002         SPACE 1
       00600002         #ZRET ,                   RESTORE REGISTERS AND
       00610002         SPACE 1              ˇ
         00620002TEMP     DS    D
         00630002         SPACE 1
         00640002ERROR1   DS    0H                          ˇ
           00650002         #ERR  'Argument 1 to MAKE-FLONUM not a fixnu
#11)       00660002         SPACE 1
           00670002ERROR2   DS    0H
             00680002ˇÁ
 a fixnum - ',4(#11)       00690002         SPACE 1
                           00700002         LTORG
                           00710002 [         SPACE 1
                             00720002         END
                             00730002
KFUNARG - ZIL 1.3 INTERNAL SUBROUTINE'                 00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

                                                         * 00017002* THI
TINE MAKES A FUNARG (LEXICAL CLOSURE).                   * 00018002*
              ˇ
TWO ARGUMENTS - THE FUNCTION AND THE ENVIRONMENT.          * 00020002*
                                                           * 00030002***
*****************************ˇ
                                                             * 00050002*
    THIS ROUTINE HAS BEEN COMPLETELY RECODED TO BUILD THE    * 00060002*
    NEW TYPE OF FUNARG OBJECT.  THE NEW OBJEˇ
      VECTOR/STRING SPACE RATHER THAN CONS SPACE, AND LOOKS    * 0008000
      LIKE A VECTOR.                                           * 0009000
                                                           ˇ
****************************************************************** 00110
    SPACE 1                                                        00120
ARG #ZBEG MINARGS=2,MAXARGS=2,NAME='MAKE-FUNARG'                   00130
      SPACE 1                                                        001
      #ZPDS 20                                                       001
      #ZSAV ,                                                        001
      SPAˇ
        LA    #0,20(,#11)         SET CURRENT STACK POINTER FOR GC     0
        SPACE 1                                                        0
ETRY    DS    0H        ˇ
2         SPACE 1
2         L     #15,ZLCVSNXT        GET ADDRESS OF CURRENT VSS SLOT
2         LA    #2,12(,#15)         POIˇ
002         L     #3,ZLCVSADR         ADDRESS + LENGTH OF V/S SPACE
002         A     #3,ZLCVSLEN         GIVES POINTER TO END OF SPACE
002         CR    #2,#3               IF OUR END IS PAˇ
60002         BH    NOROOM              THEN NO ROOM - TRY TO GC
70002         MVI   ##TYPE(#15),##FUNARG SET TYPE
80002         LA    #0,8                 SET LENGTH                  +
0290002         STCM  #0,7,1(#15)          (CURRENTLY ALWAYS 2 ELEMˇ
 00300002         MVC   ##VECDAT(8,#15),0(#11) MOVE ARGS 1&2 TO OUR "VEC
 00310002         ST    #2,ZLCVSNXT         UPDATE NEXT-SLOT POINTER
 00320002         #ZRET ,                   RETURN WITH NEW OBJECT IN #1
 0ˇ
   00340002NOROOM   DS    0H                  WHAT IF THERE'S NOT ENOUGH
   00350002         SPACE 1
   00360002      ˇ
     00370002         BZ    ERROR               THEN GIVE UP, NO V/S SPA
ABLE 00380002         L     #9,ZLCGCEND         ELSE CLOBBER CONS SPACE
     00390002         LR    #1,#ˇ
       00400002         LR    #2,#10              DUMMY ARG 2 TO CONS =
       00410002         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
       00420002         #BASR #14,#15          ˇ
ECTION   00430002         XR    #0,#0               CLEAR #0 TO STOP RET
         00440002         B     RETRY               TRY AGAIN
         00450002         SPACE 1                             ˇ
           00460002ERROR    #ERR  'ZIL2133 MAKE-FUNARG: No vector/string
vailable fX00470002               or FUNARG.',PREFIX=NO
           00480002         SPACE 1
             00490002         LTORG
             00500002         SPACE 1
             00510002         END
              00520002{
1.3 SUBROUTINE'                            00010000*********************
****************************************** 00011003*
                                         * 00012003*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013003*
ights reserved.                            * 00014003*
                                           * 00015003**************ˇ
********************************************** 00016003*
                                             * 00017003* THIS SUBROUTINE
 LIST OF A REQUESTED SIZE.                   * 00018003*
  ˇ
 ARGUMENT - A FIXNUM SPECIFYING THE NUMBER OF  * 00020003* ELEMENTS IN T
- AND ONE OPTIONAL ARGUMENT - THE VALUE TO     * 00030003* INITIALIZE TH
O, DEFAULT BEING ˇ
                                                 * 00050003*************
************************************************** 00060003*
                                ˇ
 quite the same as Common Lisp MAKE-LIST.          * 00080003*       Com
 MAKE-LIST has the following syntax:               * 00090003*
                                               ˇ
t <size> &key :initial-element)                      * 00110003*
                                                     * 00120003* Thus, a
e definition of MAKE-LIST could be:                  * 0013000ˇ
                                                       * 00140003* (defu
ist (size &key (initial-element nil))                  * 00150003*  (mkl
 initial-element))                                     * 00160003*
                                                         * 00170003* (Na
 the compiler should transform this into a MKLIST call.) * 00180003*
                                                         * 00190003*****
************ˇ
ACE 1                                                        00210003MKL
BEG MINARGS=1,MAXARGS=2,NAME='MKLIST'                        00220003
ACE 1                      ˇ
#ZPDS 2*4+12+0                                                 00240003
#ZSAV ,                                                        00250003
SPACE 1                                   ˇ
  L     #1,0(,#11)          LOAD ARG1                            0027000
  CLI   ##TYPE(#1),##FIXNUM IF ARG1 IS NOT A FIXNUM              0028000
  BNE   ERROR1              THEN ERROR.  ELSE...         +
    SPACE 1                                            ˇ
      C     #13,4(,#11)         IF ARG 2 NOT SUPPLIED                003
      BNE   *+8                 THEN                                 003
      ST    #10,4(,#11)          SET ARG 2 TO NIL                    0ˇ
        SPACE 1                                                        0
        LR    #15,#10             INITIALIZE NEW LIST TO NIL           0
        ICM   #6,15,##CDR(#1)     GET VALUE OF FIXNUM INTO REGISTER    0
     ˇ
3         BM    ERROR2              IF NEGATIVE, ERROR
3LOOP     DS    0H                  ELSE...
3         LR    #2,#ˇ
003         L     #15,ZLCCONS         GET ADDRESS OF ZILCONS
003         L     #1,4(,#11)          GET CONS ARG1 = VALUE
003         #BASR #14,#15          ˇ
30003         BCT   #6,LOOP             CONTINUE
40003         SPACE 1
50003RETURN   DS    0H                  #15 POINTSˇ
0460003         SPACE 1
0470003         #ZRET ,
0480003         SPACE 1                                          ˇ
 00490003ERROR1   #ERR  'Argument 1 to MKLIST not a non-negative fixnum
X00500003               0(#11)
 00510003ERROR2   EQU   ERROR1
ˇ
   00530003         LTORG
   00540003         SPACE 1
   00550003    +      END
     00560003{
RNAL SUBROUTINE'                 00010000*******************************
******************************** 00011002*
                               * 00012002*ˇ
s Stark Draper Laboratory Inc.   * 00013002*                     All rig
rved.                            * 00014002*
                                 * 00015002**************ˇ
************************************ 00016002*
                                   * 00017002* THIS SUBROUTINE MAKES A S
 OF A REQUESTED SIZE.              * 00018002*
                                     * 00019002* IT TAKES TWO REQUIRED A
: A FIXNUM SPECIFYING THE NUMBER OF  * 00020002* ELEMENTS IN THE STRUCTU
A SYMBOL IDENTIFYING THE TYPE OF     * 00030002* THE STRUCTURE.
       ˇ
                                       * 00050002* ALL ELEMENTS IN THE S
 ARE INITIALIZED TO NIL.               * 00060002*
                      ˇ
NSFORMS A LIST INTO A STRUCTURE.         * 00080002*
                                         * 00090002*********************
*************************************ˇ
                                             00110002MKSTRUCT #ZBEG MINA
XARGS=2,NAME='MKSTRUCT'                      00120002         SPACE 1
                                             0013000ˇ
                                               00140002         #ZSAV ,
                                               00150002         SPACE 1
                                               00160002         LM ˇ
#11)        ARG1 = LENGTH, ARG2 = TYPE           00170002         CLI
1),##FIXNUM IF ARG1 IS NOT A FIXNUM              00180002         BNE
            THEN ERROR.  ELSE...                 00190002         CLI
2)ˇ
              THEN ERROR.  ELSE...                 00210002         ICM
##CDR(#1)     GET VALUE OF FIXNUM INTO REGISTER    00220002         BNP
              IF ˇ
                MULTIPLY BY 4 FOR VECTOR LENGTH      00240002         LR
7               SET LENGTH TO ALLOCATE               00250002         XR
1               ENTRY CODE 0 = Aˇ
5,ZLCVSS          GET ADDRESS OF STRING SPACE SERVICE  00270002
,20(,#11)         SET CURRENT STACK LOCATION           00280002
4,#15             CALL ZILVSS TO BUILD THE OBJE+
#4,#4               IF STRING BUILD FAILED   ˇ
  ERROR3              THEN ERROR                           00310002
  ##TYPE(#15),##STRUCT SET OBJECT TYPE = STRUCTURE         00320002
  #2,4(,#11)          GET ARG 2 (TYPE OF STRUCTURE)        0ˇ
    #2,0(,#4)           SET STRUCTURE TYPE                   00340002
    #6,4                SET INCREMENT REGISTER FOR BXLE      00350002
    #7,=H'5'            SET TERMINATION REGISTER FOR BXLE    00360002
XR    #1,#1               SET INDEX REGISTER                   00370002I
ST    #10,4(#1,#4)        INITIALIZE EACH ELEMENT TO NIL       00380002
BXLE  #1,#6,INITLOOP                                           00390002
SPACE 1   ˇ
  DS    0H                  #15 POINTS TO STRUCTURE BUILT        0041000
  SPACE 1                                                        0042000
  #ZRET ,                ˇ
    SPACE 1                                                        00440
1   #ERR  'Arg 1 to MKSTRUCT not a positive fixnum - ',0(#11)      00450
2   #ERR  'Arg 2 to MKSTRUCT not a symboˇ
OR3   #ERR  'ZIL4010 MKSTRUCT: Not enough vector/string space to buiX004
            ld structure ',4(#11),'.',PREFIX=NO                      004
      SPACE 1                                          ˇ
        LTORG                                                          0
        SPACE 1                                                        0
        END                                                           
2{
INE'                 00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002* THIS SUBROUTINE MAKES A VECTOR OF A R
 SIZE.                 * 00018002*                          ˇ
                         * 00019002* IT TAKES ONE REQUIRED ARGUMENT - A
PECIFYING THE NUMBER OF  * 00020002* ELEMENTS IN THE VECTOR - AND ONE OP
RGUMENT - THE VALUE TO   * 00030002* INITIALIZE THE SLOTS TO, DEFAULT BE
L.                         * 00040002*
                           * 00050002* COMPARE ZMVECTOR, WHICH TRANSFORM
 INTO A VECTOR.            * 00060002*
          ˇ
****************************** 00080002*
                             * 00090002* Note: It might be desirable to
E-VECTOR be a LISP functiˇ
much like MAKE-LIST.           * 00110002*
                               * 00120002*******************************
******************************** 0013000ˇ
                                   00140002MKVECTOR #ZBEG MINARGS=1,MAXA
ME='MKVECTOR'                      00150002         SPACE 1
                                   00160002         #ZPˇ
                                     00170002         #ZSAV ,
                                     00180002         SPACE 1
                                     00190002         L     #7,0(,#11)ˇ
  LOAD ARG1 = THE REQUESTED LENGTH     00200002         CLI   ##TYPE(#7)
M IF ARG1 IS NOT A FIXNUM              00210002         BNE   ERROR1
  THEN ERROR.  ELSE...                 00220002         L     #7,##CDR(,
  GETˇ
    MULTIPLY BY 4 FOR VECTOR LENGTH      00240002         LR    #2,#7
    SET LENGTH TO ALLOCATE               00250002         XR    #1,#1
    ENTRY CODE 0 = Aˇ
      GET ADDRESS OF STRING SPACE SERVICE  00270002         LA    #0,20(
      SET CURRENT STACK LOCATION           00280002         #BASR #14,#1
      CALL ZILVSS TO BUILD THE OBJE+
        IF STRING BUILD FAILED   ˇ
          THEN ERROR                           00310002         MVI   ##
),##VECTOR SET OBJECT TYPE = VECTOR            00320002         L     #2
          GET ARG 2 (INITIAL VALUE OF VECTOR)  0ˇ
                                                 00340002         CR
            IF ARG 2 NOT SUPPLIED                00350002         BNE
            THEN                                 00360002      ˇ
               SET ARG 2 TO NIL                    00370002         SPAC
                                                   00380002         LA
              SET INCREMENT REGISTER FOR BXLE      00390002         BCTR
                SET TERMINATION REGISTER FOR BXLE    00400002         XR
1               SET INDEX REGISTER                   00410002INITLOOP ST
(#1,#4)         INITIALIZE EACH ELEMENT TO NIL       00420002         BX
6,INITLOOP   ˇ
                                                       00440002RETURN
                  #15 POINTS TO VECTOR BUILT           00450002
                            ˇ
,                                                        00470002
1                                                        00480002ERROR1
'Argument to MKVECTOR not a fixnum - ',0(#1ˇ
  'ZIL4010 MKVECTOR: Not enough vector/string space to buiX00500002
  ld vector.',PREFIX=NO                                    00510002
E 1                                                       ˚  00520002
ORG                                                          00530002
ACE 1                                                        00540002
D                                                            00550002{

         00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002*
           * 00017002* MSGLEVEL TAKES ONE (OPTIONAL) ARGUMENT - A NUMBER
TO 3.      * 00018002*                          ˇ
             * 00019002* IF NIL IS SPECIFIED OR DEFAULTED, THE CURRENT M
IS RETURNED. * 00020002*
             * 00030002****************************************ˇ
**************** 00040002         SPACE
                 00050002MSGLEVEL #ZBEG MINARGS=0,MAXARGS=1,NAME='MSGLEV
                 00060002         SPACE
                   00070002         L     #7,0(,#1)           PICK UP TH
NT                 00080002         CR    #7,#10              IF ARGUMEN
                   00090002         BE    ISNIL                OR
             ˇ
T SUPPLIED           00110002         BNE   NOTNIL                 THEN
                     00120002ISNIL    XR    #2,#2                PICK UP
 MSG LEVEL           0013000ˇ
ON AREA                00140002         SLA   #2,3                 CONVE
DEX INTO FIXNUM TABLE  00150002         LA    #15,#SFT(#2)         POINT
APPROPRIATE VALUE      00160002         BR ˇ
WITH IT                  00170002         SPACE 1
                         00180002NOTNIL   DS    0H                  ELSE
                         00190002         CLI   ##TYPE(#7)ˇ
NOT A FIXNUM               00200002         BNE   BADVALUE            TH
. ELSE...                  00210002         L     #2,##CDR(,#7)       GE
 VALUE                     00220002         CL    #2,#SFW3            IF
0 <= VALUE <= 3)             00230002         BH    BADVALUE
UE IS OUT OF RANGE           00240002         STC   #2,ZLCMSLVL
 THE VALUE                   00250002         LR    #15,#7
 INTO REˇ
 WITH ARG AS THE RETURN        00270002         SPACE 1
                               00280002         DROP  #15
                       +
                     ˇ
                                   00310002         SPACE 1
                                   00320002BADVALUE DS    0H
                                   0ˇ
                                     00340002         USING MSGLEVEL,#2
                                     00350002         #ERR  'Argument to
L not a fixnum between 0 and 3 - ', X00360002      ô          (#7)
                                       00370002         SPACE 1
                                       00380002         END
                                       00390002{
    TITLE 'NCONC2 - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 NCONC2: NCONC FOR EXACTLY TWO ARGUMENTS.                            * 0
                          ˇ
2* THE COMPILER IMPLEMENTS NCONC AS A MACRO THAT EXPANDS INTO THE      *
2* REQUISITE CALLS TO NCONC2.                                          *
2*                                       ˇ
002* UNDER THE INTERPRETER, NCONC IS A FUNCTION THAT TAKES AN &REST ARG
002* AND INVOKES NCONC2.
002*                                                    ˇ
70002*******************************************************************
80002         SPACE 1
90002NCONC2   #ZBEG MINARGS=2,MAXARGS=2,NAME='NCONC2'                  ˇ
0100002         SPACE 1
0110002         LR    #3,#15
0120002         USING NCONC2,#3
013000ˇ
 00140002         SPACE 1
 00150002         LM    #15,#0,0(#1)        LOAD THE ARGS, INITIALIZING
 00160002         SPAˇ
   00170002         CR    #15,#10             IF LIST 1 IS NIL,
   00180002         BE    ARG1NIL             THEN GO TO RETURN LIST 2.
   00190002         LR    #2,#15    ˇ
 1   00200002         B     GO                  SKIP 1ST CDR - JUMP INTO
     00210002         SPACE 1
     00220002LOOP     DS    0H                     ˇ
       00230002         L     #2,##CDR(,#2)       CONTINUE GOING DOWN LI
       00240002GO       DS    0H
       00250002         TM    ##TYPE(#2),##ATOM   IF (SUB)LIST 1 Nˇ
         00260002         BO    ERROR1              THEN ERROR
         00270002         C     #10,##CDR(,#2)      IF CDR OF (SUB)LIST
IL       00280002         BNE   LOOP                THEN CONTINUE LOOPIN
 +

ITH LIST 2   00310002         BR    #14                  AND RETURN THE
 ARG 1       00320002         SPACE 1
             0ˇ
               00340002         LR    #15,#0               RETURN LIST 2
               00350002         BR    #14
               00360002      ˇ
                 00370002ERROR1   DS    0H                  ERROR IN ARG
                 00380002         L     #2,0(,#1)           Reload arg 1
ack              00390002         #ERR  'Argˇ
t - ',(#2)         00400002         SPACE 1
                   00410002         LTORG
                   00420002         END                    
                     00430002{
 BUILT-IN ZIL 1.3 SUBROUTINE'                    00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002         SP
                                                     00017002NCONS    #Z
RGS=1,MAXARGS=1,NAME='NCONS'                         00018002         SP
        ˇ
ONS,#15                                                00020002
                                                       00030002
,0(,#1)           ARG 1ˇ
#15,ZLCCONS                                              00050002
#15                                                      00060002
#2,#10              ARG 2 = NIL       I                    00070002
  #15                 ZLCCONS WILL RETURN VIA OUR #14      00080002
                                                           00090002
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002         SPACE 1
         00017002NOT      #ZBEG MINARGS=1,MAXARGS=1,NAME='NOT'
         00018002         SPACE 1           ˇ
           00019002         USING NOT,#15
           00020002         SPACE 1
           00030002         C     #10,0(,#1)               ˇ
             00040002         BNE   ZXNOTN
             00050002         DROP  #15
             00060002         LR    #15,#8
               00070002         BR    #14
               00080002ZXNOTN   LR    #15,#10
               00090002         BR    #14
         %       00100002         END
                 00110002
LT-IN ZIL 1.3 SUBROUTINE'                  00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002*
                                             * 00017002* (NRECONC X Y) I
LENT TO (NCONC (NREVERSE X) Y).              * 00018002*
  ˇ
************************************************ 00020002         SPACE
                                                 00030002NRECONC  #ZBEG
2,MAXARGS=2,NAME=ˇ
                                                   00050002         LR
                                                   00060002         USIN
C,#7                            ˇ
                                                     00080002         SP
                                                     00090002         LM
#0,0(#1)        #15 = ARG1, #0 = ARG2          ˇ
5,#10             IF ARG1 IS NIL                       00110002
AHEAD             THEN                                 00120002
5,#0               RETURN WITH ARG2                    0013000ˇ
#14                                                      00140002GOAHEAD
0H                                                       00150002
1                                                        00160002
  ##TYPE(#15),##ATOM  IF ARGUMENT IS NOT A LIST            00170002
  ERROR1              THEN ERROR                           00180002
E 1                                                        00190002
  #2,##CDR(,ˇ
    #3,#0               SET OLD-CAR TO ARG2                  00210002
    GO                  START UP LOOP                        00220002NOT
    0H                  ELSˇ
TM    ##TYPE(#2),##ATOM   IF ARGUMENT IS NOT A LIST            00240002
BO    ERROR2              THEN ERROR                           00250002
ST    #3,##CDR(,#15)      BASH CDR OF LISTˇ
  LR    #3,#15              SET OLD-CAR TO LIST                  0027000
  LR    #15,#2              SET LIST TO OLD-CDR                  0028000
  L     #2,##CDR(,#2)       SET OLD-CDR TO CDR OF OLD-CDR+
    DS    0H                                           ˇ
      CR    #2,#10              IF OLD-CDR IS NULL                   003
      BNE   NOTNULL             THEN...                              003
      ST    #3,##CDR(,#15)       BASH CDR OF LIST WITH OLD-CAR       0ˇ
        BR    #14                  RETURN LIST                         0
        SPACE 1                                                        0
RROR1   DS    0H                  ERROR IN ARGUMENT                    0
     ˇ
2         #ERR  'Argument 1 to NRECONC not a list - ',(#2)
2         SPACE 1
2ERROR2   DS    0H  ˇ
002         L     #2,0(,#1)           Reload arg 1 from stack
002         #ERR  'Argument 1 to NRECONC not a proper list.',
002               X'0D',           ˇ
30002               'Value may have been destroyed - ',(#2)
40002         SPACE 1
50002         LTORG                               „
0460002         END
0470002{
UBROUTINE'                 00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00017002* NREVERSE TAKES ONE ARGUMENT - A
 BE REVERSED IN PLACE.       * 00018002*                          ˇ
                               * 00019002*******************************
******************************** 00020002         SPACE 1
                                 00030002NREVERSE #ZBEG MINARGS=1,MAXARG
=ˇ
                                   00050002         LR    #7,#15
                                   00060002         USING NREVERSE,#7
                ˇ
                                     00080002         SPACE 1
                                     00090002         L     #15,0(,#1)
LOAD THE ARGUMENT              ˇ
  IF ARGUMENT IS NIL                   00110002         BER   #14
  THEN RETURN NIL                      00120002         SPACE 1
                                       0013000ˇ
OM  IF ARGUMENT IS NOT A LIST            00140002         BO    ERROR1
    THEN ERROR                           00150002         SPACE 1
                                         00160002         L  ˇ
      LOAD OLD-CDR WITH CDR OF ARGUMENT    00170002         LR    #3,#10
      SET OLD-CAR TO NIL                   00180002         B     GO
      START UP LOOP                        00190002NOTNULL  DS    0H
                                             00200002         TM    ##TY
#ATOM   IF ARGUMENT IS NOT A LIST            00210002         BO    ERRO
        THEN ERROR                           00220002         ST    #3,#
5)      BASˇ
          SET OLD-CAR TO LIST                  00240002         LR    #1
          SET LIST TO OLD-CDR                  00250002         L     #2
#2)       SET OLD-CDR TO Cˇ
                                                 00270002         CR
            IF OLD-CDR IS NULL                   00280002         BNE
            THEN...                      +
DR(,#15)       BASH CDR OF LIST WITH OLˇ
                 RETURN LIST                         00310002*
                ELSE LOOP                            00320002         SP
                                                     0ˇ
                  ERROR IN ARGUMENT                    00340002
,0(,#1)           Reload arg 1 from stack              00350002
rgument 1 to NREVERSE not a list - ',(#2)              00360002      ˇ
1                                                        00370002ERROR2
0H                  ERROR IN ARGUMENT                    00380002
#2,0(,#1)           Reload arg 1 from stack              00390002
'Argˇ
  X'0D',              carriage return                     X00410002
  'Value may have been destroyed - ',(#2)                  00420002
E 1                K                                         00430002
ORG                                                          00440002
D                                                            00450002{

         00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002*
           * 00017002* NTH TAKES TWO ARGUMENTS - A NUMBER AND A LIST.
           * 00018002*                          ˇ
             * 00019002* THIS FUNCTION IS NON-RECURSIVE AND TAKES NO STA
.            * 00020002*
             * 00030002****************************************ˇ
**************** 00040002         SPACE 1
                 00050002NTH      #ZBEG MINARGS=2,MAXARGS=2,NAME='NTH'
                 00060002         SPACE 1
                   00070002         LR    #3,#15
                   00080002         USING NTH,#3
                   00090002         DROP  #15
             ˇ
                     00110002         LM    #15,#0,0(#1)        LOAD THE
TS                   00120002         LA    #2,1                PREPARE
                     0013000ˇ
A FIXNUM               00140002         BNE   ERROR1              THEN E
                       00150002         A     #2,##CDR(,#15)      GET FI
UE + 1                 00160002         BNPˇ
 NEGATIVE, ERROR         00170002LOOP     DS    0H                  ELSE
                         00180002         LR    #15,#0              LOAD
G2                       00190002         CR    #15,#10   ˇ
S NULL                     00200002         BER   #14                 TH
N NIL                      00210002         LM    #15,#0,##CAR(#15)   LO
CAR AND CDR                00220002         LTR   #15,#15             IF
ADED FROM AN ATOM            00230002         BM    ERROR2
IMPROPER LIST WAS PASSED     00240002         BCT   #2,LOOP
NT. IF NONZERO, CONTINUE     00250002         BR    #14
URN THISˇ
                               00270002ERROR1   DS    0H
                               00280002         L     #2,0(,#1)
                       +
 nonnegative fixnum -ˇ
                                   00310002ERROR2   DS    0H
                                   00320002         L     #2,4(,#1)
                                   0ˇ
ot a proper list - ',(#2)            00340002         SPACE 1
                                     00350002         LTORG
                                     00360002      <    END
                                       00370002{
    TITLE 'NTHCDR - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 NTHCDR TAKES TWO ARGUMENTS - A NUMBER AND A LIST.                   * 0
                          ˇ
2* THIS FUNCTION IS NON-RECURSIVE AND TAKES NO STACK SPACE.            *
2*                                                                     *
2****************************************ˇ
002         SPACE 1
002NTHCDR   #ZBEG MINARGS=2,MAXARGS=2,NAME='NTHCDR'
002         SPACE 1                                     ˇ
70002         LR    #3,#15
80002         DROP  #15
90002         USING NTHCDR,#3                                          ˇ
0100002         SPACE 1
0110002         LM    #5,#6,0(#1)         LOAD THE ARGUMENTS
0120002         CLI   ##TYPE(#5),##FIXNUM IF ARG 1 NOT A FIXNUM
013000ˇ
 00140002         ICM   #2,15,##CDR(#5)     GET FIXNUM VALUE
 00150002         BM    ERROR1              IF NEGATIVE, THEN ERROR
 00160002         LR ˇ
   00170002LOOP     DS    0H
   00180002         CR    #15,#10             IF ARG 2 IS NULL
   00190002         BER   #14       ˇ
     00200002         TM    ##TYPE(#15),##ATOM  IF ARG 2 IS AN ATOM
     00210002         BO    ERROR2              THEN AN IMPROPER LIST WA
     00220002         LTR   #2,#2               IF ˇ
       00230002         BZR   #14                 THEN RETURN THIS PART
       00240002         L     #15,##CDR(,#15)     ELSE GET CDR OF LIST
       00250002         BCTR  #2,0                SET N = N - 1   ˇ
         00260002         B     LOOP                REPEAT UNTIL N = 0 O
 LIST    00270002         SPACE 1
         00280002ERROR1   DS    0H                  ERROR IN ARGUMENT 1
 +

um - ',(#2)  00310002         SPACE 1
             00320002ERROR2   DS    0H                  ERROR IN ARGUMEN
             0ˇ
               00340002         #ERR  'Argument 2 to NTHCDR not a proper
',(#2)         00350002         SPACE 1
               00360002      ë    LTORG
                 00370002         END
                 00380002{
T-IN ZIL 1.3 SUBROUTINE'                     00010000*******************
******************************************** 00011002*
                                           * 00012002*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013002*
 rights reserved.                            * 00014002*
                                             * 00015002**************ˇ
************************************************ 00016002         SPACE
                                                 00017002NULL     #ZBEG
1,MAXARGS=1,NAME='NULL'                          00018002         SPACE
    ˇ
15                                                 00020002         SPAC
                                                   00030002         C
,#1)               ˇ
LLN                                                  00050002         DR
                                                     00060002         LR
#8                                ˇ
4                                                      00080002ZXNULLN
5,#10                                                  00090002
4                                                %       00100002
                                                         00110002

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002         SPACE 1
       00017002NUMBERP  #ZBEG MINARGS=1,MAXARGS=1,NAME='NUMBERP'
       00018002         SPACE 1           ˇ
         00019002         USING NUMBERP,#15
         00020002         SPACE 1
         00030002         L     #2,0(,#1)                ˇ
           00040002         CLI   ##TYPE(#2),##FLONUM
           00050002         BL    ZXNUMN
           00060002         DROP  #15
             00070002         LR    #15,#8
             00080002         BR    #14
             00090002ZXNUMN   LR    #15,#10
       º       00100002         BR    #14
               00110002         END
               00120002
IN ZIL 1.3 SUBROUTINE'                   00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00017002* OBLIST TAKES NO A
.                                          * 00018002*
ˇ
URSIVE AND TAKES NO STACK SPACE.             * 00020002*
                                             * 00030002*****************
***************ˇ
                                                 00050002OBLIST   #ZBEG
0,MAXARGS=0,NAME='OBLIST'                        00060002         SPACE
                              ˇ
COBLST        LOAD ADDRESS OF OBLIST               00080002         BR
                                                   00090002         END
                                             ∫       00100002
√
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002*
 * 00017002* ODDP TAKES ONE ARGUMENT - AN INTEGER
 * 00018002*                          ˇ
   * 00019002***********************************************************
**** 00020002ODDP     #ZBEG MINARGS=1,MAXARGS=1,NAME='ODDP'
     00030002         SPACE                          ˇ
       00040002         USING ODDP,#15
       00050002         SPACE
       00060002         L     #2,0(,#1)           LOAD FIRST (AND ONˇ
NT       00070002         TM    ##TYPE(#2),##INT    MUST BE INTEGER (FIX
IGNUM)   00080002         BNO   ERROR
         00090002         TM    ##CDR+3(#2),X'01'   TEST FOR ODD
   ˇ
           00110002TRUE     DS    0H
           00120002         LR    #15,#8              TRUE... SET RESULT
           0013000ˇ
             00140002FALSE    DS    0H
             00150002         LR    #15,#10             FALSE... SET RES
IL           00160002         BR ˇ
               00170002         SPACE
               00180002ERROR    DS    0H                  NOT A NUMERIC
               00190002         LR    #3,#15    ˇ
                 00200002         USING ODDP,#3
                 00210002         DROP  #15
                 00220002         #ERR  'Argument to ODDP not aˇ
#2)                00230002         SPACE 1
                   00240002         LTORG
                   00250002         END
                     00260002
BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*****************
********************************************** 00011002*
                                             * 00012002*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013002*
ll rights reserved.                            * 00014002*
                                               * 00015002**************ˇ
************************************************** 00016002*
                                                 * 00017002* OFILEP TAKE
EQUIRED) ARGUMENT - OUTPUT FILE SPEC             * 00018002*
      ˇ
**************************************************** 00020002         SP
                                                     00030002OFILEP   #Z
RGS=1,MAXARGS=1,NAME=ˇ
                  DEFINE STACK SIZE                    00050002
                  SAVE REGISTERS                       00060002
                                    ˇ
ZLCERFLG,ZLCERCFA   INDICATE CONDITIONAL FILE ACCESS     00080002
1                   ARG 1 = OUTPUT FILE SPEC             00090002
ZLCERFLG,255-ZLCERCFA TURN CONDITIONAL FILE ACCESS ˇ
E 1                                                        00110002
  #7,#7               IF FILE WAS FOUND                    00120002
  FALSE               THEN                                 0013000ˇ
    #15,#8               RETURN T                            00140002
    RETURN              ELSE                                 00150002FAL
    #15,#10              RETURN NIL                          00160002RET
 ˇ
SPACE 1                                                        00180002
#ZRET ,                   RESTORE REGISTERS AND RETURN         00190002
SPACE 1         ˇ
  LTORG                                                          0021000
  SPACE 1                                                        0022000
  END                          Œ                                   00230
√
             00010000***************************************************
************ 00011002*
           * 00012002*ˇ
atory Inc.   * 00013002*                     All rights reserved.
             * 00014002*
             * 00015002**************ˇ
**************** 00016002         SPACE 1
                 00017002***********************************************
**************** 00018002*                          ˇ
                 * 00019002* This function loads the "binding cell" of a
  This is        * 00020002* what is actually called the "value cell", b
ing used as      * 00030002* a cell to contain global dynamic bindiˇ
current            * 00040002* deep-binding implementation of ZIL.  In a
-binding           * 00050002* implementation, this will be a true value
nd this            * 00060002* function will disappear.
  ˇ
                     * 00080002*****************************************
********************** 00090002         SPACE 1
                 ˇ
                         00110002         SPACE 1
                         00120002         USING PBIND,#15
                         0013000ˇ
                           00140002         L     #2,0(,#1)
                           00150002         CLI   ##TYPE(#2),##SYMBOL
                           00160002         BNEˇ
                             00170002         L     #15,##PVALUE(,#2)
                             00180002         BR    #14
                             00190002         SPACE 1         ˇ
                               00200002PBERROR  DS    0H
                               00210002         LR    #3,#15
                               00220002         USING PBIND,#3
                                 00230002         DROP  #15
                                 00240002         #ERR  'Argument to PBI
 symbol - ',(#2)                 00250002         SPACE 1
            #                      00260002         END
                                   00270002
TLE 'PDSIZE - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000***
************************************************************ 00011002*
                                                           * 00012002*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
             All rights reserved.                            * 00014002*
                                                             * 00015002*
*****ˇ
  SPACE                                                          0001700
  #ZBEG MINARGS=0,MAXARGS=0,NAME='PDSIZE'                        0001800
  #ZPDS 12          ˇ
    #ZSAV ,                   SAVE REGISTERS                       00020
    SPACE 1                                                        00030
    L     #2,ZLCPDSIZ         GET Sˇ
      #MKAT FIXED               MAKE A FIXNUM OUT OF IT              000
      #ZRET ,                   RETURN WITH IT                       000
      SPACE 1                                     ˇ
        LTORG                                                          0
        SPACE 1                                                        0
        END                                                      ∫
2
                   00010000*********************************************
****************** 00011002*
                 * 00012002*ˇ
 Laboratory Inc.   * 00013002*                     All rights reserved.
                   * 00014002*
                   * 00015002**************ˇ
********************** 00016002*
                     * 00017002*  PEEK TAKES 1 ARGUMENT, A FIXNUM, AND U
S A POINTER INTO     * 00018002*       VIRTUAL STORAGE.  Iˇ
HICH CONTAINS THE      * 00019002*       CONTENTS OF THE FULLWORD OF MEM
HE SPECIFIED LOCATION. * 00020002*
                       * 00030002***************************************
************************** 00040002*
                         * 00050002* NOTE: THIS MODULE USES 31-BIT ADDRE
D REQUIRES H ASSEMBLER.  * 00060002*
        ˇ
**************************** 00080002         GBLB  &ZILXA
                             00090002         #ZSYS
                       ˇ
                               00110002PEEK     #ZBEG MINARGS=1,MAXARGS=
PEEK'                          00120002         #ZPDS 16
                               0013000ˇ
                                 00140002         SPACE 1
                                 00150002         L     #1,0(,#11)
ARGUMENT 1                       00160002         CLIˇ
ST BE A FIXNUM                     00170002         BNE   ERROR1
SE ERROR                           00180002         L     #2,##CDR(,#1)
T FIXNUM VALUE                     00190002         SPACE 1         ˇ
                                     00200002         AIF   (NOT &ZILXA)
                                     00210002*--------------------------
WITCH FROM CURRENT AMODE TO AMODE 31 00220002         L     #1,=A(CODE31
000ˇ
  RETURN ADDRESS                       00240002         BSM   #3,#1
                                       00250002CODE31   DS    0H
                  ˇ
---THE AMODE IS NOW 24                   00270002.SKIP1   ANOP
                                         00280002*
                                 +
OCCUR HERE...                  ˇ
                                             00310002         L     #2,0
        GET DATA AT POINTER LOCATION         00320002*
                                             0ˇ
                                               00340002*
                                               00350002         AIF   (N
A).SKIP2                                       00360002*-----ˇ
-----------SWITCH FROM AMODE 31 TO CURRENT AMODE 00370002         BSM
                                                 00380002CODE31E  DS
                                                 00390002*--------------
-------------THE AMODE IS NOW SAME AS ON ENTRY     00400002.SKIP2   ANOP
                                                   00410002         SPAC
                                                   00420002         LA
,#11)      ˇ
D               MAKE A FIXNUM                        00440002         SP
                                                     00450002         #Z
                          ˇ
                                                       00470002ERROR1
                                                       00480002
rgument to Peek not a fixnum - ',0(#11)  ˇ
1                                                        00500002
                                                         00510002
                                                          00520002{

       00010000*********************************************************
****** 00011002*
     * 00012002*ˇ
Inc.   * 00013002*                     All rights reserved.
       * 00014002*
       * 00015002**************ˇ
********** 00016002*
         * 00017002*  PEEKB TAKES 1 ARGUMENT, A FIXNUM, AND USES IT AS A
 INTO    * 00018002*       VIRTUAL STORAGE.  Iˇ
S THE      * 00019002*       CONTENTS OF THE BYTE AT THE SPECIFIED LOCAT
           * 00020002*
           * 00030002****************************************ˇ
************** 00040002*
             * 00050002* NOTE: THIS MODULE USES 31-BIT ADDRESSING AND RE
 ASSEMBLER.  * 00060002*
               * 00070002***********************************************
**************** 00080002         GBLB  &ZILXA
                 00090002         #ZSYS
           ˇ
                   00110002PEEKB    #ZBEG MINARGS=1,MAXARGS=1,NAME='PEEK
                   00120002         SPACE 1
                   0013000ˇ
                     00140002         USING PEEKB,#3
                     00150002         DROP  #15
                     00160002         SPAˇ
                       00170002         L     #1,0(,#1)           GET AR
                       00180002         CLI   ##TYPE(#1),##FIXNUM MUST B
UM                     00190002         BNE   ERROR1    ˇ
                         00200002         L     #4,##CDR(,#1)       GET
ALUE                     00210002         XR    #2,#2               CLEA
 REGISTER                00220002         SPACE 1                      ˇ
                           00230002         AIF   (NOT &ZILXA).SKIP1
                           00240002*---------------------------------SWI
 CURRENT AMODE TO AMODE 31 00250002         L     #1,=A(CODE31+X'8000000
ESS OFˇ
DDRESS                       00270002         BSM   #7,#1
                             00280002CODE31   DS    0H
                     +
DE IS NOW 24       ˇ
                                 00310002*
                                 00320002* WARNING: PROGRAM CHECK MAY OC
...                              0ˇ
                                   00340002         IC    #2,0(,#4)
T DATA AT POINTER LOCATION         00350002*
                                   00360002* END ˇ
                                     00370002*
                                     00380002         AIF   (NOT &ZILXA)
                                     00390002*------------------ˇ
-SWITCH FROM AMODE 31 TO CURRENT AMODE 00400002         BSM   0,#7
                                       00410002CODE31E  DS    0H
                                       00420002*------------------------

                                         00440002         SPACE 1
                                         00450002         SLA   #2,3
    Convert toˇ
      Load address of fixnum from table    00470002         BR    #14
      Return to caller with fixnum         00480002         SPACE 1
                             ˇ
                                             00500002         #ERR  'Arg
 PEEKB not a fixnum - ',0(#11)               00510002         SPACE 1
                                            ®  00520002         LTORG
                                               00530002         END
                                               00540002{

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002         SPACE 1
0017002PLIST    #ZBEG MINARGS=1,MAXARGS=1,NAME='SYMBOL-PLIST'
0018002         SPACE 1           ˇ
 00019002         USING PLIST,#15
 00020002         SPACE 1
 00030002         L     #2,0(,#1)                ˇ
   00040002         CLI   ##TYPE(#2),##SYMBOL
   00050002         BNE   PLSERROR
   00060002         L     #15,##PLIST(,#2)                      ˇ
     00070002         BR    #14
     00080002         SPACE 1
     00090002PLSERROR DS    0H

       00110002         USING PLIST,#3
       00120002         DROP  #15
       0013000ˇ 2         #ERR  'Argument to SYMBOL-PLIST not a symbol -
         00140002         SPACE 1
         00150002         END
         00160002
1.3 SUBROUTINE'                    00010000*****************************
********************************** 00011002*
                                 * 00012002*ˇ
les Stark Draper Laboratory Inc.   * 00013002*                     All r
served.                            * 00014002*
                                   * 00015002**************ˇ
************************************** 00016002*
                                     * 00017002* PLUSP TAKES ONE ARGUMEN
MERIC ATOM                           * 00018002*
                                       * 00019002***********************
**************************************** 00020002PLUSP    #ZBEG MINARGS=
S=1,NAME='PLUSP'                         00030002         SPACE 1
         ˇ
      LOAD FIRST (AND ONLY) ARGUMENT       00050002         CLI   ##TYPE
LONUM MUST BE NUMERIC ATOM                 00060002         BL    ERROR
      ELSE ERROR        ˇ
                                             00080002* THE FOLLOWING TES
FOR FIXNUMS AND FLONUMS.                     00090002* It works for doub
s only because ZILMDF duplicates the leˇ
 it builds one (and so does the compiler).     00110002* If anyone chang
behavior, this code must be changed.           00120002*
                                               0013000ˇ
CDR(#2)     LOAD THE VALUE (WORKS FOR FIX&FLO)   00140002         BP
            IF VALUE POSITIVE, RETURN T          00150002         BM
            IF VALUE NEGATIVE, RETURN NIL        00160002*           ˇ
              IF VALUE ZERO, SEE IF BIGNUM         00170002         CLI
(#2),##BIGNUM IF BIGNUM AND NOT NEGATIVE           00180002         BE
              THEN MUST BE POSITIVE, RETURN T      00190002******** B
    ˇ
#10             RETURN NIL                           00210002         BR
                                                     00220002TRUE     LR
#8              RETˇ
4                                                      00240002
                                                       00250002ERROR
                  NOT A NUMERIC ATˇ
#3,#15                                                   00270002
PLUSP,#3                                                 00280002
#15                                              +
  'Argument to PLUSP not numeric - ',(#2)      ˇ
ACE 1                                                        00310002
ORG                                                          00320002
D                                                            0∞ 0330002
	
           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002         SPACE 1
               00017002PNAME    #ZBEG MINARGS=1,MAXARGS=1,NAME='SYMBOL-N
               00018002         SPACE 1           ˇ
                 00019002         USING PNAME,#15
                 00020002         SPACE 1
                 00030002         L     #2,0(,#1)                ˇ
                   00040002         CLI   ##TYPE(#2),##SYMBOL
                   00050002         BNE   PNERROR
                   00060002         L     #15,##PNAME(,#2)
ˇ
                     00080002         SPACE 1
                     00090002PNERROR  DS    0H
               ˇ
                       00110002         USING PNAME,#3
                       00120002         DROP  #15
                       0013000ˇ 2         #ERR  'Argument to SYMBOL-NAME
ymbol - ',(#2)           00140002         SPACE 1
                         00150002         END
                         00160002
X - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002*
                                                     * 00017002*  PREFIX
 THE TSO PREFIX, OR NIL IF NON-TSO ENVIRONMENT.      * 00018002*
          ˇ
E PREFIX MAY BE A NULL STRING.                         * 00020002*
                                                       * 00030002*******
*************************ˇ
E 1                                                        00050002PREFI
G MINARGS=0,MAXARGS=0,NAME='PREFIX'                        00060002
S 12                                    ˇ
SAV ,                                                        00080002
ACE 1                                                        00090002***
*******************************************************ˇ
                                                             * 00110002*
GET THE UPT PREFIX VALUE.                                    * 00120002*
                                                             * 0013000ˇ
**************************************************************** 0014000
  L     #3,X'21C'           GET TCB ADDRESS                      0015000
  L     #3,X'B4'(,#3)       GET JSCB ADDRESS                     0016000
  L  ˇ
    ICM   #3,15,X'108'(#3)    GET PSCB ADDRESS                     00180
    BZ    RETNIL              IF NONE, NON-TSO, RETURN NIL         00190
    USING PSCB,#3   ˇ
      L     #3,PSCBUPT          GET UPT ADDRESS                      002
      DROP  #3                                                       002
      USING UPT,#3              GETˇ
        XR    #2,#2               CLEAR LENGTH REGISTER                0
        ICM   #2,1,UPTPREFL       GET LENGTH OF UPT PREFIX             0
        ST    #2,LENGTH           SAVE LENGTH     ˇ
2         BZ    RETSTR              IF ZERO, BYPASS DATA MOVE
2         SPACE 1
2****************************************************************+
002*                                                           ˇ
00002* THEN, GET VECTOR/STRING SPACE TO HOLD THE PREFIX.
10002*
20002*******************************************************************
0330002         SPACE 1
0340002******** L     #2,LENGTH           GET LENGTH INTO REG FOR ZILVSS
0350002         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SP
0360002      ˇ
 00370002         LA    #0,12(,#11)         SET CURRENT STACK POINTER FO
 00380002         #BASR #14,#15             CALL ZILVSS TO CREATE A STRI
 00390002         LTR   #15,ˇ
   00400002         BZ    ERROR               THEN ERROR
   00410002         L     #2,LENGTH           GET LENGTH OF TSO PREFIX
   00420002         BCTR  #2,0             ˇ
     00430002         EX    #2,MOVEIT           MOVE DATA FROM UPT TO OU
     00440002         B     RETURN
     00450002RETNIL   DS    0H                  HERE IF TSˇ
       00460002         LR    #15,#10
       00470002         B     RETURN
       00480002RETSTR   DS    0H                  HERE IF TSO BUT NO PRE
         00490002         LA    #15,NULLSTR
         00500002******** B     RETURN
         00510002         SPACE 1
        ˇ
           00530002         #ZRET ,
           00540002         SPACE 1
           00550002ERROˇ
            X00560002               'ZIL4010 PREFIX: Not enough vector/s
ace to returX00570002               n TSO prefix.'
             00580002         SPACE 1 ˇ
               00590002MOVEIT   MVC   ##VECDAT(*-*,#15),UPTPREFX X'D: MO
EFX TO STRING  00600002         SPACE 1
               00610002NULLSTR  DS    0A             ˇ
                 00620002         DC    YL1(##STRING),AL3(0),XL4'00'
                 00630002         SPACE 1
                 00640002LENGTH   DC    F'0'                        ˇ
                   00650002         SPACE 1
                   00660002         LTORG
                   00670002         SPACE 1
                    00680002ˇÁ
                                   00690002         IKJUPT
                                   00700002         END
                                   00710002
TITLE 'PUTPROP - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
PROP TAKES 3 ARGUMENTS.                                          * 00018
                      ˇ
******************************************************************** 000
      SPACE 1                                                        000
PROP  #ZBEG MINARGS=3,MAXARGS=3,NAME=ˇ
        SPACE 1                                                        0
        #ZPDS 3*4+12                                                   0
        #ZSAV ,                                     ˇ
2         SPACE 1
2         LM    #5,#7,0(#11)        LOAD THE ARGUMENTS
2         CLI   ##TYPE(#5),##SYMBOL ARG 1 MUST BE A SYMBOL         ˇ
002         BNE   NOTSYM
002         L     #2,##PLIST(,#5)     LOAD PROPERTY LIST OF ARG 1
002PROCESS  DS    0H
00ˇ
40002         BE    NOMORE              THEN WE HAVE TO MAKE A NEW PLIST
50002         LR    #4,#2               SAVE CURRENT PROPERTY LIST ADDRE
60002LOOP     DS ˇ
0170002         TM    ##TYPE(#4),##ATOM   CHECK VALIDITY OF PROPERTY LIS
0180002         BO    ERROR2
0190002         L     #1,##CDR(,ˇ
 00200002         TM    ##TYPE(#1),##ATOM   CHECK VALIDITY OF PROPERTY L
 00210002         BO    ERROR2
 00220002         C     #7,##CAR(,#4)       IF ˇ
OR 00230002         BNE   NOTEQ               THEN...
   00240002         ST    #6,##CAR(,#1)        BASH CADR THEREOF TO REPL
E  00250002         B     RETURN              ELSE...         ˇ
     00260002NOTEQ    DS    0H                   (HAVEN'T FOUND IT YET)
     00270002         L     #4,##CDR(,#1)        BUMP TO NEXT PAIR IN (S
     00280002         CR    #4,#10               IF ANY MORE PROP/VALUE
LEFT   00290002         BNE   LOOP                 THEN CONTINUE LOOP
         00300002NOMORE   DS    0H                  OTHERWISE INDICATOR
ERE NOW  00310002*
         00320002* AT THIS POINT ZIL USED TO STICK PROPERTY LIST STUFF O
END OF   0ˇ
SED ONTO   00340002* THE FRONT OF IT, HOWEVER, AND THAT'S WHAT WE'RE GOI
 NOW.      00350002*
           00360002*     ˇ
IST))        00370002*                                  #2 ALREADY POINT
 PLIST       00380002*
             00390002         LR    #1,#ˇ
               00400002         L     #15,ZLCCONS         GET ADDRESS OF
               00410002         LA    #0,24(,#11)         POINT TO CURRE
 LOCATION      00420002         #BASR #14,#15          ˇ
) NIL            00430002         L     #1,8(,#11)          INDICATOR (A
                 00440002         LR    #2,#15              RESULT OF PR
ONS              00450002         L     #15,ZLCCONS         GET ADDRESˇ
CONS               00460002         LA    #0,24(,#11)         POINT TO C
TACK LOCATION      00470002         #BASR #14,#15             CONS INDIC
                   00480002         LM    #5,#6,0(#11)        RELOAD OTH
     ˇ
ist                  00500002         BO    BASHSYM             then
                     00510002         ST    #15,##CDR(,#5)       bash cd
 list               ˇ
                       00530002BASHSYM  DS    0H
                       00540002         ST    #15,##PLIST(,#5)     BASH
 THE SYMBOL            00550002    ˇ
                         00560002RETURN   DS    0H
                         00570002         LR    #15,#6              RETU
ROPERTY AS VALUE         00580002         #ZRET , ˇ
CALLER                     00590002         SPACE 1
                           00600002NOTSYM   DS    0H                  Ar
a symbol                   00610002         SPACE 1              ˇ
                             00620002***********************************
**************************** 00630002*
                           * 00640002* FOR COMPATIBILITY WITH MACLISP AN
ˇ
 A LIST THEN WE ACCEPT IT.   * 00660002*
                             * 00670002*********************************
*************** *************** 00680002ˇÁ
                                               00690002         TM    ##
,##ATOM   See if it's a list                   00700002         BO    ER
          If so, then...                       00710002 ˇ
(,#5)        get CDR and use as property list    00720002         B
                                                 00730002         SPACE
                                                 00740002ERROR1   DS   ˇ
              Arg 1 not even a list...             00750002         #ERR
ent 1 to PUTPROP not a symbol - ',0(#11)           00760002         SPAC
                                                   00770002ERROR2   DS
      ˇ
4011 PUTPROP: Invalid property list found for ',    X00790002
1),PREFIX=NO                                         00800002         SP
                     O                                 00810002
                                                       00820002
                                                       00830002

 00010000***************************************************************
 00011002*
 00012002*ˇ
 * 00013002*                     All rights reserved.
 * 00014002*
 * 00015002**************ˇ
**** 00016002         SPACE 1
     00017002***********************************************************
**** 00018002*                          ˇ
     * 00019002* THIS IS A COPY OF THE PROGRAM SHOWN BELOW, TRANSFORMED
IL   * 00020002* FUNCTION BY STEVE BACHER.
     * 00030002*                                       ˇ
       * 00040002* IF ARG 1 IS OMITTED OR NIL, THE SEED KEY IS RESET.  O
 THE   * 00050002* KEY IS SET BASED ON THE CURRENT COMPUTATION FOR THE N
.      * 00060002*                                                    ˇ
         * 00070002* NOTE: THE SECOND ARGUMENT, SUPPOSED TO REPRESENT A
TATE     * 00080002* OBJECT, IS CURRENTLY IGNORED AND OPTIONAL, BUT ESTA
FOR      * 00090002* COMMON LISP FUNCTION-CALL-LEVEL COMPATIBILITY.
     ˇ
           * 00110002***************************************************
************ 00120002         SPACE 1
             0013000ˇ
************   00140002*  PROGRAM: CS226HW1
           *   00150002*  AUTHOR: DAYTON T. MARCOTT
           *   00160002*  DESCRIPTIˇ
             *   00170002*      THIS PROGRAM WRITTEN BY HOMER PETERSON O
N LABRATORY. *   00180002*  REAL FUNCTION RAN2 (SINGLE OR DOUBLE PRECISI
             *   00190002*  INPUT IN CALLING SEQUEˇ
               *   00200002*  OUTPUT IN CALLING SEQUENCE: REVISED SEED
               *   00210002*  OUTPUT IN FLOATING POINT REGISTER: RANDOM
ETWEEN 0 & 1   *   00220002*                                     ˇ
                 *   00230002*******************************************
******************   00240002*
                     00250002RANDOM   #ZBEG MINARGS=0,MAXARGS=2,NAME='RA
ˇ
                       00270002         #ZSAV ,
                       00280002         SPACE 1
               +
plied        ˇ
user                       00310002         #ERR  1,'Optional arg 2 to R
rrently ignored by ZIL.'   00320002ARG2OK   DS    0H
                           0ˇ
 1 AND 2                     00340002         XR    #4,#4
ZE FIX/FLO INDICATOR         00350002         CR    #3,#10
 IS NIL                      00360002      ˇ
                               00370002         CR    #3,#13
1 IS OMITTED                   00380002         BNE   NOTNIL
N...                           00390002ISNIL    XC    ZLCRˇ
RESET KEY TO INITIAL VALUE       00400002         L     #3,=X'7FFFFFFF'
NO LIMIT ON VALUE                00410002         B     RANFIX
AND PROCESS AS RANDOM FIXNUM     00420002NOTNIL   DS    0H
                                   00430002         CLI   ##TYPE(#3),##F
 FIXNUM                            00440002         BE    RANFIX
EN PROCESS RANDOM FIXNUM           00450002         TM    ##TYPE(#3),##F
 FLONUM,ˇ
ELSE NOT SUPPORTED                   00470002         LA    #4,1
SET FLONUM INDICATOR                 00480002         SPACE 1
                       ˇ
                                       00500002         L     #1,ZLCRAND
T KEY                                  00510002         LTR   #1,#1
E IF POSITIVE                         ˇ
OK IF IT IS                              00530002         LA    #1,3141
IF NOT CHOOSE ONE                        00540002OK       M     #0,=F'16
PRIMITIVE ROOT                           00550002    ˇ
' OF 2**31-1                               00560002         ST    #0,ZLC
  RETURN KEY                               00570002         LTR   #4,#4
      IF ASKING FOR A FLONUM               00580002         BNZ   SEˇ
        THEN GO GENERATE ONE                 00590002         ICM   #3,1
#3)     GET FIXNUM VALUE OF ARG 1            00600002         BNP   ERRO
        MUST BE POSITIVE                     00610002         SRDA  #0,3
   ˇ
          DIVIDE TO GET REMAINDER              00630002         LR    #2
          REMAINDER IN #0, QUOTIENT IN #1      00640002         LA    #0
)         PASS STAˇ
            MAKE A FIXNUM OUT OF IT              00660002         B
                                                 00670002         SPACE
                                                  00680002ˇÁ
  DS    0H                                                       0069000
  SPACE 1                                                        0070000
  CLI   ##TYPE(#3),##DFLOAT IF IT IS A DOUBLE FLOAT              0071000
    BE    SETDFLO             THEN GO DO A DOUBLE                  00720
    SPACE 1                                                        00730
    ST    #0,FLOAT        PREPARE TO FLOAT                         00740
    LD   ˇ
      AD    #F0,TEMP         DOUBLE IT AND NORMALIZE                 007
      ME    #F0,##CDR(,#3)      MULTIPLY BY FLONUM VALUE OF ARG 1    007
      STE   #F0,ZLCWORK ˇ
        L     #2,ZLCWORK                                               0
        LA    #0,20(,#11)         PASS STACK POINTER TO CONS           0
        #MKAT FLOAT                    ˇ
2         B     RETURN
2         SPACE 1
2SETDFLO  DS    0H                                    ˇ
002         SPACE 1
002         ST    #0,FLOAT        PREPARE TO FLOAT
002         LD    #F0,TEMP         LOAD A NUMBER BETWEEN 0 & .5      ˇ
70002         AD    #F0,TEMP         DOUBLE IT AND NORMALIZE
80002         MD    #F0,8(,#3)       MULTIPLY BY FLONUM VALUE OF ARG 1
90002         LA    #0,20(,#11)         PASS CURRENT STACK POINTER TO CO
0000ˇ
0910002         #BASR #14,#15             CALL ZILMDF TO MAKE DOUBLE FLO
0920002******** B     RETURN
0930002         SPAˇ
 00940002RETURN   DS    0H
 00950002         SPACE 1
 00960002         #ZRET ,         ˇ
   00970002TEMP     DS    0D             DOUBLE WORD ALIGN
   00980002CHAR     DC    X'46000000'    CHARACTERISTIC TO FLOAT RESULT
   00990002FLOAT    DS    F'0'                   ˇ
     01000002         SPACE 1
     01010002ERROR    DS    0H
     01020002         #ERR  'Argument 1 to RANDOM not a positiveˇ
num - X01030002               ',0(#11)
       01040002         SPACE 1
       01050002         LTORG

           01070002{
N ZIL 1.3 SUBROUTINE'                  00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* REMPROP TAKES 2 ARG
                                         * 00018002*
                                           * 00019002*******************
******************************************** 00020002         SPACE 1
                                             00030002REMPROP  #ZBEG MINA
XARGS=2,NAME=ˇ
                                               00050002         LR    #3
                                               00060002         USING RE
                            ˇ
                                                 00080002         SPACE
                                                 00090002         LM
#1)         LOAD THE ARGUMENTS             ˇ
(#5),##SYMBOL ARG 1 MUST BE A SYMBOL               00110002         BNE
                                                   00120002         L
LIST(,#5)     LOAD PROPERTY LIST OF ARG 1          0013000ˇ
                                                     00140002         CR
10              IF NULL                              00150002         BE
IL              THEN RETURN NIL                      00160002         TM
TYPE(#7),##ATOM   CHECK VALIDITY OF PROPERTY LIST      00170002
ROR2                                                   00180002
,##CAR(,#7)       IF FIRST PROPERTY ON LIST MATCHES    00190002
,##CDR(,ˇ
LOOP                THEN (REMOVE PROPERTY) ...           00210002
#15,#0,##CAR(#7)     LOAD VALUE AND REST OF PLIST        00220002
#15,#15              IFˇ
  ERROR2               THEN ERROR                          00240002
  ##TYPE(#5),##ATOM   IF ARG 1 WAS AN ATOM                 00250002
  BASHLIST            THEN            ˇ
    #0,##PLIST(,#5)      SET PLIST TO REST OF CURRENT PLIST  00270002
    #14                 ELSE                                 00280002BAS
    #0,##CDR(,#5)        SET CDR TO REST OF CURRENT P+
BR    #14                 RETURN THE OLD PROPERTY Vˇ
  SPACE 1                                                        0031000
  DS    0H                  POINTING TO CELL BEFORE PAIR         0032000
  TM    ##TYPE(#7),##ATOM   CHECK VALIDITY OF PROPERTY LIST      0ˇ
    BO    ERROR2                                                   00340
    L     #4,##CDR(,#7)       ELSE BUMP TO (SUB)PLIST WITH IND     00350
    CR    #4,#10              IF REACHED END OF PROPERTY LIST      00360
 ˇ
      LM    #1,#2,##CAR(#4)     #1 = CAR, #2 = CDR = VALUE           003
      LTR   #1,#1               IF CON(#4) WASN'T A CONS CELL        003
      BM    ERROˇ
        CR    #6,#1               IF PROPERTY INDICATOR MATCHES        0
        BNE   NOMATCH             THEN...                              0
        LM    #15,#0,##CAR(#2) ˇ
2         LTR   #15,#15              IF CON(#2) WASN'T A CONS CELL
2         BM    ERROR2               THEN ERROR
2         ST    #0,##CDR(,#7)        SPLICE INˇ
002         BR    #14                  RETURN WITH PROPERTY VALUE REMOVE
002NOMATCH  DS    0H                  ELSE...
002         LR    #7,#2                BUMP TO NEXT INDICATORˇ
90002         B     LOOP                 CONTINUE LOOPING
00002         SPACE 1
10002RETNIL   DS    0H
0520002         LR    #15,#10             RETURN NIL
0530002         BR    #14                 RETURN TO CALLER
0540002         SPACE 1
0550002NOTSˇ
 00560002         SPACE 1
 00570002***************************************************************
 00580002*                ˇ
 * 00590002* FOR COMPATIBILITY WITH MACLISP AND OTHER APPLICATIONS THAT
 * 00600002* DISEMBODIED PROPERTY LISTS, IF ARG 1 IS A LIST THEN WE ACCE
 * 00610002*                             ˇ
   * 00620002***********************************************************
**** 00630002         SPACE 1
     00640002         TM    ##TYPE(#5),##ATOM   See if iˇ
       00650002         BO    ERROR1              If so, then...
       00660002         L     #7,##CDR(,#5)        get CDR and use as pr
ist    00670002         B     PROCESS                                  
         00680002ˇÁ
                       00690002ERROR1   DS    0H                  ERROR
ENT                    00700002         #ERR  'Argument 1 to REMPROP not
l - ',(#5)             00710002 ˇ
                         00720002ERROR2   DS    0H                  ERRO
UMENT                    00730002         #ERR  'ZIL4011 REMPROP: Invali
ty list found for ',    X00740002              ˇ
                           00750002         SPACE 1
                           00760002         LTORG
                           00770002         END               Ñ
                             00780002
EMQ - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

                                                         * 00017002* REM
AS COMMON LISP (REMOVE A B :TEST #'EQ)                   * 00018002*
              ˇ
************************************************************ 00020002
ACE 1                                                        00030002REM
BEG MINARGS=2,MAXARGS=3,NAME=ˇ
#ZPDS 3*4+12+4  =     28                                       00050002
#ZSAV ARGS=3                                                   00060002
SPACE 1                                     ˇ
  LM    #6,#7,4(#11)        #6 = ARG2, #7 = ARG3                 0008000
 is kept on stack, since CONS might relocate it anyhow.          0009000
  SPACE 1                                                  ˇ
    CR    #7,#13              IF ARG 3 NOT SUPPLIED                00110
    BE    ARG3NULL             then process as if NIL              00120
    CR    #7,#10              IF ARG3 (COUNT) IS NIL               00130
      BE    ARG3NULL            THEN IT'S OK                         001
      CLI   ##TYPE(#7),##FIXNUM ELSE ARG3 MUST BE A FIXNUM           001
      BNE   ARG3ERR             OTHERWISE ERROR                      001
      ICMˇ
        BP    ARG3OK              If not positive, then                0
        LR    #15,#6               return arg 2                        0
        B     RETURN    ˇ
2ARG3NULL DS    0H                  Arg 3 is NIL (or unsupplied)
2         XR    #7,#7               SET ARG 3 fixnum value = 0
2*                                  Thiˇ
002*                                  0 as arg3.  This value will be abl
002*                                  to be decremented without ever goi
002*                                  to zero.        ˇ
60002ARG3OK   DS    0H                  #7 now contains fixnum value of
70002         ST    #10,24(,#11)        Init eventual result to NIL
80002         LA    #5,24-##CDR(,#11)   Set pseudolocative for bashin+
0290002         CR    #6,#10              If arg 2 is NIL          ˇ
 00300002         BE    RETURNZ             then return NIL.
 00310002LOOP     DS    0H                  Else start looping.
 00320002         ICM   #1,15,##CAR(#6)     Get CAR of sublist
 0ˇ
   00340002         C     #1,0(,#11)          If arg1 is EQ to CAR of (s
   00350002         BNE   NOTEQ               then...
   00360002      ˇ
     00370002*                                   If count still nonzero,
     00380002*                                   continue by skipping th
nt.  00390002*                  ˇ
.      00400002         L     #0,##CDR(,#6)         get CDR of remaining
st     00410002         ST    #0,##CDR(,#5)         bash new list being
       00420002         B     RETURNZ          ˇ
         00430002         SPACE 1
         00440002NOTEQ    DS    0H                  ELSE THIS CAR DOESN'
         00450002*                                  Include CAˇ
lready #1  00460002******** L     #1,##CAR(,#6)       Arg 1 to CONS = CA
list       00470002         L     #15,ZLCCONS         Get address of ZIL
           00480002         LR    #2,#10              Arg 2 to CONS = NI
             00490002         #BASR #14,#15             Call CONS to get
t element    00500002*
             00510002* Note: We assume that #5 is not relocated by GC, b
ONS pointer.ˇ
 CONS pointer. 00530002*
               00540002         ST    #15,##CDR(,#5)      Bash list bein
with new cell  00550002    ˇ
er               00560002         SPACE 1
                 00570002NEXTCDR  DS    0H
                 00580002         L     #6ˇ
t.                 00590002         CR    #6,#10              Until arg
o NIL              00600002         BNE   LOOP                 continue.
                   00610002         SPACE 1              ˇ
                     00620002RETURNZ  DS    0H
                     00630002         L     #15,24(,#11)        Load ret
e                    00640002         SPACE 1
                       00650002RETURN   DS    0H                  Return
s in #15               00660002         #ZRET ,
                       00670002         SPACE 1
                        00680002ˇÁ
  Here only if sublist ends in atom    00690002*
  (and no count argument)              00700002         ST    #6,##CDR(,
  Bash list with atomic end of list    00710002 ˇ
    and return the return value          00720002         SPACE 1
                                         00730002ARG3ERR  #ERR  'Invalid
unt argument - ',(#7)                    00740002         SPACE0  1
                                           00750002         LTORG
                                           00760002         END
                                           00770002
      TITLE 'RESTARG - BUILT-IN ZIL 1.3 SUBROUTINE'                  000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2*                                                                     *
2* THIS MODULE RETURNS T OR NIL, DEPENDING ON WHETHER THE COMPILED     *
2* FUNCTION TAKES AN &REST Aˇ
002* THE INPUT PARAMETER MUST BE CODE, I.E. THE VALUE OF THE ZILLOAD
002* FUNCTION OR OF THE SUBR, FSUBR, ETC. PROPERTY OF A FUNCTION ATOM.
002*                                       ˇ
40002*******************************************************************
50002         SPACE
60002RESTARG  #ZBEG MINARGS=1,MAXARGS=1,NAME='RESTARG'    ˇ
0070002         SPACE
0080002         L     #5,0(,#1)           PICK UP PARAMETER (FUNCTION CO
0090002         TM    ##TYPE(#5),##CODE   MUST BE A COMPILED CODE OBJECT
 00100002         BNO   ERROR               (SUBR OR CLOSURE)
 00110002         XR    #4,#4               ELSE CLEAR INSERT REGISTER
 00120002         ICM   #4,7,##CAR+1(#5)    GET POINTER TO COMPILED CODE
 0013000ˇ
   00140002         IC    #2,4(,#4)           GET LENGTH OF IDENTIFIER
   00150002         LA    #3,5+3(#2,#4)       POINT TO MODULE CODE PAST
ER 00160002         N  ˇ
     00170002         USING ZINT,#3             TO POINT TO "ZINT" AREA
     00180002         TM    ZINFLAG2,ZINGREST   IF &REST ARG IS EXPECTED
     00190002         BO    TRUE      ˇ
       00200002FALSE    LR    #15,#10
       00210002         BR    #14
       00220002TRUE     DS    0H                     ˇ
         00230002         LR    #15,#8
         00240002         BR    #14
         00250002         SPACE 1                                   ˇ
           00260002         DROP  #15
           00270002         SPACE 1
           00280002ERROR    DS    0H
   +
 ˇ
               00310002         #ERR  'Argument to RESTARG not a compile
bject (SUBR orX00320002                closure) - ',(#5)
               0ˇ
                 00340002         LTORG
                 00350002         SPACE
                 00360002      ë    #ZINT ,                   MAP THE CO
R AREA             00370002         END
                   00380002{
- BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*****************
********************************************** 00011002*
                                             * 00012002*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013002*
ll rights reserved.                            * 00014002*
                                               * 00015002**************ˇ
************************************************** 00016002*
                                                 * 00017002* (REVAPPEND
EQUIVALENT TO (APPEND (REVERSE X) Y).            * 00018002*
      ˇ
**************************************************** 00020002         SP
                                                     00030002REVAPPEN #Z
RGS=2,MAXARGS=2,NAME=ˇ
                                                       00050002
4+12                                                   00060002
GS=2                                ˇ
1                                                        00080002
#3,#4,0(#11)        LOAD THE ARGUMENTS                   00090002
#15,#4              PRESET RETURN VALUE TO ARG2    ˇ
  #3,#10              IF ARG1 IS NIL                       00110002
  RETURN              THEN RETURN ARG2                     00120002LOOP
  0H                  ELSE...                              0013000ˇ
M   #1,15,##CAR(#3)     GET CAR OF (SUB)LIST                 00140002
    ERROR1              IF (SUB)LIST WASN'T A CONS, ERROR    00150002
    #2,#15              GET RESULT SO FAR                    00160002
 ˇ
#BASR #14,#15             (SETS #15 TO RESULT OF CONS)         00180002
L     #3,##CDR(,#3)       GET CDR OF (SUB)LIST                 00190002
CR    #3,#10    ˇ
* BE    RETURN              THEN RETURN RESULT                   0021000
  BNE   LOOP                ELSE CONTINUE                        0022000
  SPACE 1                      ˇ
N   DS    0H                  #15 CONTAINS RETURN VALUE            00240
    #ZRET ,                   RETURN TO CALLER                     00250
    SPACE 1                                   ˇ
OR1   DS    0H                  ERROR IN ARGUMENT                    002
      #ERR  'Argument 1 to REVAPPEND not a proper list - ',0(#11)    002
      SPACE 1                                                +
        LTORG                                              ›
2         END
2{
NE'                  00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002* REVERSE TAKES 1 ARGUMENT.
                       * 00018002*                          ˇ
                         * 00019002*************************************
************************** 00020002         SPACE 1
                           00030002REVERSE  #ZBEG MINARGS=1,MAXARGS=1,NA
VERSE'                       00040002         SPACE 1
                             00050002         #ZPDS 1*4+12
                             00060002         #ZSAV ARGS=1
          ˇ
                               00080002         L     #3,0(,#11)
HE ARGUMENT                    00090002         LR    #15,#10
LIZE RESULT TO NIL       ˇ
RG IS NIL                        00110002         BE    RETURN
 RETURN RESULT                   00120002LOOP     DS    0H
                                 0013000ˇ
T CAR OF (SUB)LIST                 00140002         BM    ERROR1
 (SUB)LIST WASN'T A CONS, ERROR    00150002         LR    #2,#15
T RESULT SO FAR                    00160002         L  ˇ
CALL CONS TO ADD ITEM TO RESULT LIST 00170002         #BASR #14,#15
(SETS #15 TO RESULT OF CONS)         00180002         L     #3,##CDR(,#3
GET CDR OF (SUB)LIST                 00190002         CR    #3,#10    ˇ
  WHEN (SUB)LIST IS NIL,               00200002******** BE    RETURN
  THEN RETURN RESULT                   00210002         BNE   LOOP
  CONTINUE                             00220002         SPACE 1
     ˇ
    #15 CONTAINS RETURN VALUE            00240002         #ZRET ,
    RETURN TO CALLER                     00250002         SPACE 1
                    ˇ
      ERROR IN ARGUMENT                    00270002         #ERR  'Argum
EVERSE not a proper list - ',0(#11)        00280002         SPACE 1
                                   +
                                 ›             00300002         END
                                               00310002{

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002*
0017002* RMNIL TAKES NO ARGUMENTS.
0018002*                          ˇ
 00019002* THIS FUNCTION RETURNS THE OBJECT "RMNIL", A SPECIAL ENTITY TH
 00020002* TELLS THE READ FUNCTION, WHEN IT INVOKES A READER MACRO, THAT
 00030002* THE MACRO DID NOT RETURN A FORM.  IT Iˇ
 * 00040002* AS A VALUE BY READER MACRO FUNCTIONS ONLY.
 * 00050002*
 * 00060002* SINCE "RMNIL" LOOKS LIKE A LIST WHOSE CAR AND CDR Pˇ
,  * 00070002* AN ATTEMPT TO PRINT IT WILL BE DISASTROUS.
   * 00080002*
   * 00090002* THIS MODULE USES NO STACK SPACE AND SAVES NO REGISTERS.

     * 00110002*********************************************************
****** 00120002*
     * 0013000ˇ
       * 00140002*        multiple values.  A function that wants to ret
hing"  * 00150002*        to the reader can do it by issuing (values).
.      * 00160002*           ˇ
         * 00170002*****************************************************
********** 00180002         SPACE 1
           00190002RMNIL    #ZBEG MINARGS=0,ˇ
             00200002         SPACE 1
             00210002         LA    #15,ZLCRMNIL        GET ADDRESS OF R
             00220002         BR    #14                 RETˇ
               00230002         SPACE 1
               00240002         LTORG
               00250002         END
                 00260002
N ZIL 1.3 SUBROUTINE'                      00010000*********************
****************************************** 00011002*
                                         * 00012002*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013002*
ights reserved.                            * 00014002*
                                           * 00015002**************ˇ
********************************************** 00016002*
                                             * 00018002* ROT TAKES TWO I
RGUMENTS.  CURRENTLY THEY MUST BE FIXNUMS.   * 00019002*
  ˇ
 ARITHMETIC ROTATE OPERATION.                  * 00030002*
                                               * 00040002***************
*****************ˇ
S=2,MAXARGS=2,NAME='ROT'                           00060002         #ZPD
+0 (= 20)     DEFINE STACK SIZE                    00070002         #ZSA
              SAVE REGISTERS    ˇ
                                                     00090002         LM
7,0(#11)        LOAD ARGUMENTS                       00100002         CL
PE(#6),##FIXNUM                                ˇ
ROR1                                                   00120002
TYPE(#7),##FIXNUM                                      00130002
ROR2                                                   0014000ˇ
#4,15,##CDR(#7)     GET ARG 2 VALUE = SHIFT AMOUNT       00150002
NOSHIFT             IF ZERO, NO SHIFTING REQUIRED        00160002
RSHIFT              IF NEGATIVE, RIGHT SHIFT REQUIRED    00170002*
                      ELSE POSITIVE, DO LEFT SHIFT         00180002
  #2,##CDR(,#6)       GET ARG 1 VALUE INTO REGISTER 2      00190002
  #3,#2               MAKE A COPY IN OTHER REG OF PAIR     00200002
  #2,0(#4)  ˇ
                        RESULT IS IN #2                      00220002
    MAKEIT              AND GO MAKE A FIXNUM OUT OF IT       00230002RSH
    0H                     ˇ
LPR   #4,#4               CHANGE SHIFT AMOUNT TO POSITIVE      00250002
L     #2,##CDR(,#6)       GET ARG 1 VALUE INTO REGISTER 2      00260002
LR    #3,#2               MAKE A COPY IN Oˇ
  SRDL  #2,0(#4)            GET IT INTO REG 3 AND CLEAR REG 2    0028000
  LR    #2,#3               GET RESULT INTO #2                   0029000
* B     MAKEIT              AND GO MAKE A FIXNUM OUT OF I+
T   DS    0H                  NOW #2 CONTAINS SHIFTED Vˇ
      LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO CONS  003
      #MKAT FIXED               MAKE A FIXNUM ATOM                   003
      B     RETURN                                                   0ˇ
        SPACE 1                                                        0
OSHIFT  DS    0H                                                       0
        LR    #15,#6              NO SHIFTING - JUST RETURN ARG 1      0
     ˇ
2RETURN   DS    0H
2         SPACE 1
2         #ZRET ,   ˇ
002         SPACE 1
002ERROR1   #ERR  'Argument 1 to ROT not a fixnum - ',0(#11)
002ERROR2   #ERR  'Argument 2 to ROˇ
40002         SPACE 1
50002         LTORG
60002         END                                 

0470002{
ROUTINE'                   00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002         SPACE 1
                               00017002RPLACA   #ZBEG MINARGS=2,MAXARGS=
RPLACA'                        00018002         SPACE 1           ˇ
                                 00019002         USING RPLACA,#15
                                 00020002         SPACE 1
                                 00030002         LM    #2,#3,0(#1)
 ˇ
                                   00050002         BO    RCAERROR
                                   00060002         ST    #3,##CAR(,#2)
                ˇ
                                     00080002         BR    #14
                                     00090002         SPACE 1
                               ˇ
                                       00110002         LR    #4,#15
                                       00120002         USING RPLACA,#4
                                       0013000ˇ
                                         00140002         #ERR  'Argumen
ACA not a list - ',(#2)                  00150002         SPACE 1
                                         00160002         ENDà
                                           00170002
      TITLE 'RPLACD - BUILT-IN ZIL 1.3 SUBROUTINE'                   000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2         SPACE 1
2RPLACD   #ZBEG MINARGS=2,MAXARGS=2,NAME='RPLACD'
2         SPACE 1           ˇ
002         USING RPLACD,#15
002         SPACE 1
002         LM    #2,#3,0(#1)              ˇ
40002         TM    ##TYPE(#2),##ATOM
50002         BO    RCDERROR
60002         ST    #3,##CDR(,#2)                         ˇ
0070002         LR    #15,#2
0080002         BR    #14
0090002         SPACE 1
 00100002RCDERROR DS    0H
 00110002         LR    #4,#15
 00120002         USING RPLACD,#4
 0013000ˇ
   00140002         #ERR  'Argument to RPLACD not a list - ',(#2)
   00150002         SPACE 1
   00160002         ENDà
     00170002
L SUBROUTINE'                  00010000*********************************
****************************** 00011002*
                             * 00012002*ˇ
Stark Draper Laboratory Inc.   * 00013002*                     All right
ed.                            * 00014002*
                               * 00015002**************ˇ
********************************** 00016002*
                                   00017002* RUNTIME RETURNS THE NUMBER
ANDTHS OF A SECOND OF CPU TIME     00018002* USED DURING THE CURRENT Sˇ
 THE VALUE IS TAKEN FROM THE         00019002* ASCBEJST FIELD OF THE ASC
                                     00020002*
                                     00030002* FORMERLY CALLED "CPUTIME"
UNCTIˇ
NCTION.                                00050002*
                                       00060002RUNTIME  #ZBEG MINARGS=0,
0,NAME='RUNTIME'    ˇ
    DEFINE STACK SIZE                    00080002         #ZSAV ARGS=0
    SAVE REGISTERS                       00090002         SPACE
                                   ˇ
UMS   FORCE OS TO UPDATE TIMER HERE        00110002         L     #2,X'2
      GET ADDRESS OF ASCB                  00120002         LM    #2,#3,
)     GET JOB STEP ELAPSED TIME (ASCBEJST) 0013000ˇ
        CONVERT FROM MICROSECONDS            00140002         D     #2,=
        TO THOUSANDTHS OF A SECOND           00150002         LR    #2,#
        GET RESULT INTO REGISTER             00160002         LA ˇ
)         PASS CURRENT STACK LOCATION TO CONS  00170002         #MKAT FI
          MAKE A FIXNUM                        00180002         SPACE
                                               00190002         #ZRET ,
ˇ
                                                 00210002         DS
                                                 00220002DUMS     DC
               ˇ
                                                   00240002         LTOR
                                                   00250002         SPAC
                              #                      00260002         EN
                                                     00270002
√
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002*
 * 00017002* SPECIAL-ALIST TAKES NO ARGUMENTS.
 * 00018002*                          ˇ
   * 00019002* THIS ROUTINE IS NOT RECURSIVE AND TAKES NO STACK SPACE.
   * 00020002*
   * 00030002****************************************ˇ
****** 00040002         SPACE
       00050002SALIST   #ZBEG MINARGS=0,MAXARGS=0,NAME='SPECIAL-ALIST'
       00060002         SPACE                                       ˇ
         00070002         L     #15,ZLCSALST        LOAD ADDRESS OF SPEC
T        00080002         BR    #14
         00090002         END
   ∫       00100002
ZIL 1.3 SUBROUTINE'                  00010000***************************
************************************ 00011003*
                                   * 00012003*ˇ
arles Stark Draper Laboratory Inc.   * 00013003*                     All
reserved.                            * 00014003*
                                     * 00015003**************ˇ
**************************************** 00016003*
                                       * 00017003* "STRING-APPEND"
                                       * 00018003*
                                         * 00019003* SAPPEND TAKES AN &R
MENT - (A LIST OF) STRINGS TO BE         * 00020003* CONCATENATED INTO A
RESULT STRING.                           * 00030003*
           ˇ
******************************************** 00050003         SPACE
                                             00060003SAPPEND  #ZBEG MINA
XARGS=0,RESTARG=T,NAME='STˇ
          DEFINE STACK SIZE                    00080003         #ZSAV ,
          SAVE REGISTERS                       00090003         SPACE
                                         ˇ
                                                 00110003* FIRST CALL ZI
START BUILDING A STRING.                         00120003*
                                                 0013000ˇ
              SET ENTRY CODE FOR STRING BEGINNING  00140003         L
CVSS          GET ADDRESS OF ZILVSS                00150003         LA
,#11)         SET CURRENT STACK POINTER            00160003         #BAˇ
#15             CALL ZILVSS TO START BUILDING STRING 00170003         LT
4               IF NO STRING SPACE AVAILABLE         00180003         BZ
R2              THEN ERROR                           00190003*
      ˇ
 IN THE LIST, ADD IT TO THE STRING BEING BUILT.        00210003*
                                                       00220003
,#5               INIˇ
#7,0(,#11)          GET &REST ARGLIST                    00240003LOOP
0H                                                       00250003
#7,#10              IF END OF LIST Oˇ
  NOMORE              THEN END LOOP                        00270003
  #2,##CAR(,#7)       GET ATOM (ARG 1 TO SAPPEND)          00280003
  ##TYPE(#2),##STRING IF IT IS A STRING            +
E   NOTSTR              THEN                     ˇ
LR    #6,#2                GET POINTER TO THE STRING           00310003
B     DOIT                ELSE                                 00320003N
CLI   ##TYPE(#2),##SYMBOL IF IT IS A SYMBOL                    0ˇ
  BNE   ERROR1              THEN (WELL, WE'LL PERMIT IT)         0034000
  L     #6,##PNAME(,#2)      USE THE PRINT NAME                  0035000
                            ELSE INVALID ARG - NOT A STRING      0036000

    DS    0H                  #6 POINTS TO THE STRING ITSELF       00380
    LA    #1,16               SET ENTRY CODE FOR STRING CONCAT     00390
    L     #15,ˇ
      LA    #0,16(,#11)         SET CURRENT STACK POINTER            004
                                CALL ZILVSS TO CONCATENATE           004
      #BASR #14,#15          ˇ
        LTR   #4,#4               IF NO STRING SPACE AVAILABLE         0
        BZ    ERROR2              THEN ERROR                           0
        L     #7,##CDR(,#7)       GET REST Oˇ
3         B     LOOP                CONTINUE.
3NOMORE   DS    0H                  LIST HAS BEEN PROCESSED
3         LA    #1,8                SET ENTRY CODE FOR STRIˇ
003         L     #15,ZLCVSS          CALL ZILVSS TO FINALIZE THE STRING
003         #BASR #14,#15             (NO GC ERRORS POSSIBLE HERE)
003*                                  RETURNED STRING IS IN #15
20003         SPACE 1
30003         #ZRET ,                   RESTORE REGISTERS AND RETURN
40003         SPACE 1
50003ERROˇ
0560003ERROR2   #ERR  'ZIL4010 STRING-APPEND: Not enough vector/string s
0570003               o build string.',PREFIX=NO
0580003         SPACE 1 ·
 00590003         LTORG
 00600003         END
 00610003{
 SUBROUTINE'                 00010000***********************************
**************************** 00011002*
                           * 00012002*ˇ
ark Draper Laboratory Inc.   * 00013002*                     All rights
.                            * 00014002*
                             * 00015002**************ˇ
******************************** 00016002*
                               * 00017002* SAPPENDL TAKES A SINGLE ARGUM
 LIST OF) STRINGS TO BE        * 00018002* CONCATENATED INTO A SINGLˇ
TRING.                           * 00019002*
                                 * 00020002* IT DOES THIS BY PASSING CON
STRING-APPEND, MAKING THIS       * 00030002* EQUIVALENT TO (APPLY #'STRI
D Aˇ
                                   * 00050002***************************
************************************ 00060002         SPACE 1
                  ˇ
1,NAME='SAPPENDL',SUBRS=ZILSUBR        00080002         SPACE 1
                                       00090002         L     #15,@SAPPE
                                 ˇ
                                         00110002         BR    #15
                                         00120002         SPACE 1
                                         0013000ˇ
                                           00140002@SAPPEND DC    V(SAPP
      SUBROUTINE ADDRESS                   00150002         DC    CL8'SA
                                           00160002ZILSUBRE DS s    0A
                                             00170002         END
                                             00180002
********************************************************************** 0
                                                                     * 0
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
ˇ
2*                                                                     *
2***********************************************************************
2         TITLEˇ
302         MACRO
402&SYM     XTRT  &DATR,&TABLE,&LENR=,&EX=,&F256=#0
502         LCLC  &LBLA,&LBLB,ˇ
13602&LBLA    SETC  'XTRA&SYSNDX'
13702&LBLB    SETC  'XTRB&SYSNDX'
13802         AIF   ('&SYM' EQ '').FOO       ˇ
0013902&LBLC    SETC  '&SYM'
0014002         AGO   .BAR
0014102.FOO     ANOP                                        ˇ
 00015002&LBLC    SETC  'XTRC&SYSNDX'
 00016002.BAR     ANOP
 00017002&LBLC    DS    0H
   00018002         CR    &LENR,&F256          If length greater than 25
   00019002         BNH   &LBLA                then...
   00020002         TRT   0(256,&DATR),&TABLE   scan for desired charact
   0003000ˇ
     00040002         AR    &DATR,&F256           Else increment text po
 256 00050002         SR    &LENR,&F256           Decrement length by 25
     00060002         B  ˇ
       00070002&LBLA    DS    0H                  Else...
       00080002         BCTR  &LENR,0              Reduce length for exe
       00090002         EX    &LENR,&EX ˇ
         00100002&LBLB    DS    0H
         00110002         MEND
         00120002         TITLE 'STRING-CAPITALIZE - BUˇ
NE'        00130002*****************************************************
********** 00160002*
         * 00170002* STRING-CAPITALIZE                                ˇ
           * 00180002*
           * 00190002* Reference:  CLtL, pp. 303-304.
           * 00200002*
     +
   ˇ
               * 00212003***********************************************
**************** 00220002         SPACE 1
                 0ˇ
ALIZE'             00240002         #ZPDS 16                  DEFINE STA
                   00250002         #ZSAV ,                   SAVE REGIS
                   00260002      ˇ
                     00270002         L     #3,0(,#11)          LOAD ARG
                     00280002         CLI   ##TYPE(#3),##STRING IF ARGUM
 STRING              00290002         BE    ARG1ˇ
                       00300002         CLI   ##TYPE(#3),##SYMBOL IF ARG
 A SYMBOL              00310002         BNE   ERROR1              THEN
                       00320002         L     #3,##PNAME(,#3)  ˇ
INT NAME, ELSE ERROR     00330002ARG1OK   DS    0H
                         00340002         XR    #7,#7               CLEA
 REGISTER                00350002         ST    #3,0(,#11)          STOR
 ON STACK FOR FUTURE USE   00360002         ICM   #7,7,1(#3)          GE
 OF STRING                 00370002         BZ    RETSELF             IF
NGTH STRING, RETURN SELF   00380002         LA    #14,##VECDAT(,#3)   PO
EXT OF STRINGˇ
TH                           00400002         LA    #0,256
ONSTANT 256                  00410002TALOOP   DS    0H
SCAN STRING                 ˇ
XTRTA  Scan for any alpha's    00430002         BZ    RETSELF
BAD CHARS, RETURN SELF         00440002COPYIT   DS    0H
ETIC DATA, HAVE TO COPY        00450002    ˇ
LENGTH INTO REG FOR ZILVSS       00460002         XR    #1,#1
Y CODE 0 = ALLOCATE NEW SPACE    00470002         L     #15,ZLCVSS
ADDRESS OF ZILVSS                00480002         LA    #0ˇ
T CURRENT STACK POINTER FOR GC     00490002         #BASR #14,#15
LL ZILVSS TO CREATE A STRING       00500002         LTR   #4,#15
 STRING BUILD FAILED               00510002         BZ    ERROR2
THEN ERROR                           00520002         L     #1,0(,#11)
GET POINTER TO ORIGINAL STRING       00530002         LA    #0,##VECDAT(
POINT TO STRING TEXT                 00540002         LA    #14,##VECDAT
POINT TOˇ
  GET LENGTH OF STRING TEXT TO MOVE    00560002         LR    #15,#7
                                       00570002         MVCL  #14,#0
  MOVE TEXT FROM OLD ST RING TO NEW     00580002ˇÁ
,##VECDAT(,#4)    POINT TO TEXT OF STRING              00590002
5,#7              GET LENGTH                           00600002
,256              SET UP CONSTANT 256                  00610002 ˇ
#3,0(#5,#7)         Preset to point to end of string     00620002TRTNEXT
0H                  Loop to translate string             00630002
#15,#3              End of string minus where we are now 00640002

  #1,#1               Preset in case nothing found         00660002
  #14,#5              Load pointer for extended TRT        00670002
  #14,TRTANUM,ˇ
R   #5,#1               Point to start of found substring    00690002
    DONE                If none, finished translating        00700002
    #1,#3               Preseˇ
LR    #15,#3              End of string minus where we are now 00720002
SR    #15,#5              Get length of string remaining       00730002
LR    #14,#5              Load pointer for eˇ
  XTRT  #14,TRTNANUM,LENR=#15,EX=EXTRTNAN  Find next nonalphanum 0075000
  LR    #2,#1               End of substring minus start thereof 0076000
  SR    #2,#5               Get length of substring to tranˇ
    BNP   TRTNEXT             If not > 0, nothing to translate     00780
    TR    0(1,#5),TRUPPER     Translate first letter to upper case 00790
    LA    #5,1(,#5)           Bump to next characters              00800
      BCT   #2,TRLOOP           Decrement length                     008
      B     TRUDONE             Skip rest of translation if zero     008
OOP   DS    0H                                                       008
      CR ˇ
        BNH   SHORTTR             then...                              0
        TR    0(256,#5),TRLOWER   Translate rest to lower case         0
        AR    #5,#0     ˇ
2         SR    #2,#0               Bump down length
2         B     TRLOOP              and continue translating.
2SHORTTR  DS    0H                     ˇ
002         BCTR  #2,0                Reduce length for execute
002         EX    #2,EXTRL            Translate to lower case
002TRUDONE  DS    0H                  Finished translaˇ
30002         LR    #5,#1               Point to next part of string
40002         CR    #5,#3               As long as there's data left,
41003         BL    TRTNEXT             Continue looking for data to +
0950003DONE     DS    0H                  ALL FINISHED             ˇ
 00960002         LR    #15,#4              POINT TO NEWLY BUILT STRING
 00970002         B     RETURN              RETURN THE ATOM IN #15
 00980002         SPACE 1
 0ˇ
   01000002         LR    #15,#3              RETURN THE STRING PASSED
   01010002RETURN   DS    0H
   01020002      ˇ
     01030002         #ZRET ,                   RESTORE REGISTERS AND RE
     01040002         SPACE 1
     01050002EXTRTA   TRT   0(*-ˇ
       01060002EXTRTAN  TRT   0(*-*,#14),TRTANUM  EXECUTED: SCAN FOR NON
ERICS  01070002EXTRTNAN TRT   0(*-*,#14),TRTNANUM EXECUTED: SCAN FOR NON
ERICS  01080002EXTRL    TR    0(*-*,#5),TRLOWERˇ
CASE     01090002         SPACE 1
         01100002TRTALPHA DC    256X'00'            TABLE TO SCAN FOR AL
 CHARS   01110002         ORG   TRTALPHA+C'A'-X'40'           ˇ
           01120002         DC    9XL1'FF'
           01130002         ORG   TRTALPHA+C'J'-X'40'
           01140002         DC    9XL1'FF'
             01150002         ORG   TRTALPHA+C'S'-X'40'
             01160002         DC    8XL1'FF'
             01170002         ORG   TRTALPHA+C'A'
            ˇ
               01190002         ORG   TRTALPHA+C'J'
               01200002         DC    9XL1'FF'
               01210002    ˇ
                 01220002         DC    8XL1'FF'
                 01230002         ORG   ,
                 01240002         SPACE 1 ˇ
                   01250002TRTANUM  DC    256X'00'            TABLE TO S
ALPHANUMERICS      01260002         ORG   TRTANUM+C'A'-X'40'
                   01270002         DC    9XL1'FF'       ˇ
                     01280002         ORG   TRTANUM+C'J'-X'40'
                     01290002         DC    9XL1'FF'
                     01300002         ORG   TRTANUM+C'S'-X'40'
                       01310002         DC    8XL1'FF'
                       01320002         ORG   TRTANUM+C'A'
                       01330002         DC    9XL1'FF'
                        01340002ˇÁ
                                       01350002         DC    9XL1'FF'
                                       01360002         ORG   TRTANUM+C'
                                       01370002 ˇ
                                         01380002         ORG   TRTANUM+
                                         01390002         DC    10XL1'FF
                                         01400002         ORG  ˇ
                                           01410002         SPACE 1
                                           01420002TRTNANUM DC    256X'F
      TABLE TO SCAN FOR NON-ALPHANUMERICS  01430002         ORG   TRTNAN
'-X'40'                                      01440002         DC    9XL1
                                             01450002         ORG   TRTN
'-X'40'                                      01460002         DC    9XL1
             ˇ
'S'-X'40'                                      01480002         DC    8X
                                               01490002         ORG   TR
'A'                         ˇ
                                                 01510002         ORG
+C'J'                                            01520002         DC
                                           ˇ
UM+C'S'                                            01540002         DC
0'                                                 01550002         ORG
UM+C'0'                                            0156000ˇ
1'00'                                                01570002         OR
                                                     01580002         SP
                                                     01590002TRUPPER  DC
6YL1(*-TRUPPER)   TABLE TO TRANSLATE TO UPPERCASE      01600002
UPPER+C'A'-X'40'                                       01610002
ABCDEFGHI'                                             01620002
UPPER+C'ˇ
C'JKLMNOPQR'                                             01640002
TRUPPER+C'S'-X'40'                                       01650002
C'STUVWXYZ'            ˇ
  ,                                                        01670002
E 1                                                        01680002TRLOW
  256YL1(*-TRLOWER)   TABLE TO TRANSLAˇ
G   TRLOWER+C'A'                                             01700002
    C'abcdefghi'                                             01710002
G   TRLOWER+C'J'                                     +
DC    C'jklmnopqr'                                 ˇ
  ORG   TRLOWER+C'S'                                             0174000
  DC    C'stuvwxyz'                                              0175000
  ORG   ,                                                        0ˇ
    SPACE 1                                                        01770
1   #ERR  'Argument to STRING-CAPITALIZE not a string - ',(#3)     01780
    SPACE 1                                                        01790
2ˇ
            'ZIL4010 STRING-CAPITALIZE: Not enough vector/string spaX018
            ce to build string.'                                     018
      SPACE 1   ò                                                      0
        LTORG                                                          0
        END                                                            0
{
'                  00010000*********************************************
****************** 00011002*
                 * 00012002*ˇ
 Laboratory Inc.   * 00013002*                     All rights reserved.
                   * 00014002*
                   * 00015002**************ˇ
********************** 00016002*
                     * 00017002* SCRSIZE returns a dotted pair (rowsize
e) which represents  * 00018002* the current terminal attrˇ
                       * 00019002*
                       * 00020002***************************************
************************ 00030002         SPACE
                           00040002SCRSIZE  #ZBEG MINARGS=0,MAXARGS=0,NA
IZE'                       00050002         #ZPDS 0*4+12+0 = 16
                           00060002         #ZSAV
        ˇ
                             00080002         GTSIZE ,
ENT terminal attributes      00090002         LTR   #15,#15
4 failed,              ˇ
eturn no-terminal-size         00110002         LR    #3,#0
creen length (# of rows)       00120002         LR    #4,#1
ine size (# of columns)        0013000ˇ
fixnum value to cons up          00140002         LA    #0,16(,#11)
k pointer for CONS               00150002         #MKAT FIXED
 a fixnum out of # of rows       00160002         LR ˇ
ve it                              00170002         LR    #2,#4
t fixnum value to cons up          00180002         #MKAT FIXED
ke a fixnum out of # of cols       00190002         LR    #1,#5     ˇ
Get # of rows                        00200002         LR    #2,#15
Get # of columns                     00210002         L     #15,ZLCCONS
Get address of CONS                  00220002         #BASR #14,#15
Calˇ
                                       00240002         SPACE 1
                                       00250002RETNIL   DS    0H
  If anything wentˇ
                                         00270002         SPACE 1
                                         00280002RETURN   DS    0H
                                 +
                               ˇ
        Return to caller                     00310002         SPACE 1
                                             00320002         LTORG
                                             0ÿ 0330002         END
                                               00340002{

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002*
0017002* SETABEND TAKES ONE REQUIRED ARGUMENT - NIL OR NON-NIL.
0018002*                          ˇ
 00019002* IF THE ARG IS NIL, ESTAE PROCESSING IS CANCELLED;
 00020002* OTHERWISE, ESTAE PROCESSING IS ENABLED.
 00030002*                                       ˇ
 * 00040002* THIS FUNCTION TURNS ABEND CATCHING ON AND OFF.
 * 00050002*
 * 00060002*****************************************************ˇ
**** 00070002*
   * 00080002* SUMMARY OF REGISTER USAGE FOR THIS MODULE
   * 00090002*

     * 00110002*        USING STAEPARM,#4
     * 00120002*        USING STARETRY,#6
     * 0013000ˇ
       * 00140002*        USING SDWA,#5
       * 00150002*
       * 00160002************ˇ
********** 00170002         SPACE 1
           00180002SETABEND #ZBEG MINARGS=1,MAXARGS=1,NAME='SETABEND'
           00190002         #ZPDS 16        ˇ
             00200002         #ZSAV
             00210002         SPACE 1
             00220002         L     #15,0(,#11)         PICˇ
               00230002         CR    #15,#10             IF ARG IS NIL
               00240002         BNE   ABENDON             THEN...
               00250002         TM    ZLCEFLGS,ZLCESTAE    IF ESTAE ENVI
T IS ACTIVE      00260002         BZ    RETURN               THEN
                 00270002         ESTAE 0                    CANCEL ESTA
                 00280002         LTR   #15,#15              IF FAILED
         +
       ˇ
 NOT ACTIVE          00310002         B     RETURN                AND RE
                     00320002         SPACE 1
                     0ˇ
                       00340002         TM    ZLCEFLGS,ZLCESTAE   IF EST
ONMENT IS ACTIVE       00350002         BO    RETURN              THEN D
G                      00360002      ˇ
OF RETRY ROUTINE         00370002         ST    #0,STAERTRY         IN E
AMETER LIST              00380002         XC    STAECOMP,STAECOMP   CLEA
TION CODE                00390002         ST    #13,ˇ
S OF ZIL COMMON AREA       00400002         ESTAE STAEEXIT,PARAM=STAEPAR
ISH ESTAE ENVIRONMENT      00410002         LTR   #15,#15              I
                           00420002         BNZ   ERROR1           ˇ
ROR                          00430002         OI    ZLCEFLGS,ZLCESTAE
E ESTAE ACTIVE               00440002         B     RETURN
TURN OK                      00450002         SPACE 1
  ˇ
                               00470002         L     #15,0(,#11)
 WITH ARG AS VALUE             00480002         #ZRET ,
                 ˇ
                                 00500002ERROR1   DS    0H
                                 00510002         #ERR  'ZIL0040 SETABEN
, bad return code from ESTAE.', ˇ
                                   00530002         SPACE 1
                                   00540002STAEPARM DS    0A
TAE PARAM AREA                     00550002STAEˇ
ADDRESS OF ZIL COMMON AREA           00560002STAECOMP DS    A
COMPLETION CODE                      00570002STAEREAS DS    A
REASON CODE                          00580002STAERTRY DS    A ˇ
  ADDRESS OF RETRY ROUTINE             00590002         SPACE 1
                                       00600002         DROP  #12
                                       00610002         SPACE 1
                                         00620002         EJECT
                                         00630002STARETRY DS    0H
                                         00640002         SPACE 1
            ˇ
****************************************** 00660002*
                                         * 00670002* RETRY ROUTINE TO RE
NTROL WHEN ESTAE EXIT DETEC TED AN ABEND  * 00680002ˇÁ
PROCESSING.  THIS ROUTINE WILL ATTEMPT TO RETURN TO THE  * 00690002* MAI
DE VIA THROW PROCESSING.                                 * 00700002*
                                                         * 00710002*ˇ
 TO THIS ROUTINE:                                          * 00720002*
                                                           * 00730002*
WA WAS AVAILABLE (REGISTER 0 = OTHER THAN 12 IN STAEEXIT)  * 00740002*
SUMˇ
                                                             * 00760002*
STER  0 = 0                                                  * 00770002*
STER  1 = ADDRESS ˇ
GISTER 14 = ADDRESS OF AN SVC 3 INSTRUCTION (EXIT)             * 0079000
GISTER 15 = ENTRY POINT ADDRESS OF THIS RETRY ROUTINE          * 0080000
                                 ˇ
HERWISE (REGISTER 0 = 12 IN STAEEXIT):                           * 00820
                                                                 * 00830
REGISTER  0 = 12                                ˇ
  REGISTER  1 = ADDRESS OF THE ESTAE PARAMETER LIST (PARAM)        * 008
  REGISTER  2 = ADDRESS OF THE PURGE I/O LIST OR 0                 * 008
  REGISTER 14 = ADDRESS OF AN SVC 3 INSTRUCTION (EXIT)         ˇ
    REGISTER 15 = ENTRY POINT ADDRESS OF THIS RETRY ROUTINE          * 0
                                                                     * 0
  OTHER REGISTER CONTENTS ARE UNPREDICTABLE (UNLESS RETREGS=YES      * 0
2*  WAS SPECIFIED IN THE ESTAE EXIT).                                  *
2*                                                                     *
2***********************************************************************
2         SPAˇ
002         LR    #6,#15
002         USING STARETRY,#6
002         LA    #3,12     ˇ
70002         CR    #0,#3               IF AN SDWA IS AVAILABLE
80002         BE    NOSDWAR             THEN...
90002         LR    #5,#1                  ˇ
1000002         USING SDWA,#5
1010002         L     #4,SDWAPARM          #4 -> WORKAREA
1020002         USING STAEPARM,#4                         ˇ
 01030002         L     #13,STAEZCOM         GET ZIL COMMON FROM PARAM
 01040002         L     #3,SDWASR12          LOAD ABENDER'S POSSIBLE COD
 01050002         B     AFTSDWAR
   01060002NOSDWAR  DS    0H                  ELSE...                  ˇ
     01070002         LR    #4,#1                #4 -> WORKAREA
     01080002******** USING STAEPARM,#4
     01090002         XR    #5,#5                SHOW NO SDWA
     0ˇ
       01110002**** NOT USING SDWA,#5
       01120002         LA    #1,NOWAMSG
       01130002      ˇ
         01140002         TPUT  (1),(0),R           LET ME KNOW THERE'S
..       01150002         L     #13,STAEZCOM        GET ZIL COMMON FROM
         01160002         B     REGSˇ
           01170002AFTSDWAR DS    0H
           01180002         TM    ZLCIFLGS,ZLCISVD    IF CODE IN PROGRES
 REGS 8-11 01190002         BZ    REGSOK           ˇ
             01200002         LM    #8,#10,ZLCISAVE      RESTORE THEM FR
 THEY SAVED  01210002         NI    ZLCIFLGS,255-ZLCISVD
             01220002         B     AFTROK              ELSE      ˇ
               01230002REGSOK   DS    0H
               01240002         TM    ZLCIFLGS,ZLCISYS    IF REGS CANNOT
TED            01250002         BO    RESTREGS            THEN RESTORE C
 ˇ
ING TO #ZCOM     01270002         BNE   REGSNG              OR
                 01280002         L     #10,ZLCNIL
                ˇ
NTING TO NIL       01300002         BNE   REGSNG              THEN REGS
VALID              01310002         LM    #8,#10,SDWASR08     ELSE RESTO
EGS FROM SDWA      01320002    ˇ
                     01330002RESTREGS DS    0H                  HERE IF
WAS ON               01340002         XR    #3,#3               SHOW COD
NOT BE TRUSTED       01350002         L     #8ˇ
                       01360002         L     #9,ZLCISV09         RESTOR
OINTER AS SAVED        01370002         L     #10,ZLCNIL          RELOAD
                       01380002         NI    ZLCIFLGS,255-ZLˇ
                         01390002         B     AFTROK
                         01400002REGSNG   DS    0H                  HERE
 ARE NO GOOD             01410002         XR    #3,#3               SHOW
EG CANNOT BE TRUSTED       01420002         L     #8,ZLCT             RE
                           01430002         L     #9,ZLCGCEND         SE
E FOR CONS POINTER         01440002         L     #10,ZLCNIL          RE
                            01450002ˇÁ
                                           01460002AFTROK   DS    0H
                                           01470002         SPACE 1
                                           01480002*ˇ
******************************************** 01490002*
                                           * 01500002* AT THIS POINT, DO
ERENCE THE SDWA!  IT MAY NOT BE AVAILABLE. * 01510002*             ˇ
                                             * 01520002*****************
********************************************** 01530002         SPACE 1
                                               01540002         LTR   #5
  ˇ
                  THEN                           01560002         MVC
),=CL9'(UNKNWN),' WE CAN'T TELL WHERE WE ABENDED 01570002         B
                 ˇ
                    ELSE                           01590002         LTR
                    IF WE HAVE A POSSIBLE CODEREG  01600002         BZ
EG                  THEN...     ˇ
#3),=X'47F0F0'         CHECK IF IT POINTS TO CODE    01620002         BN
DREG                                                 01630002         L
DWANXT1               GET ABENDING ADDRESS     ˇ
,=X'7FFFFFFF'           CLEAR AMODE BIT                01650002
,=X'7FFFFFFF'           CLEAR AMODE BIT                01660002
,#3                     CONVERT TO OFFSET FROM CODE    0167000ˇ
FIXUPM                    IF NEGATIVE, NOT IN THERE      01680002
WHEREA,C'+'                                              01690002
AFTFIXUP                                                 01700002FIXUPM
  0H                                                       01710002
  WHEREA,C'-'                                              01720002
  #1,#1                                                    01730002
  AFTFIXUP  ˇ
    0H                                                       01750002
    #1,ZLCDBL                                                01760002
PK  WHEREA+1(9),ZLCDBL(5)  ˇ
TR    WHEREA+1(8),HEXTBL                                       01780002
MVI   WHEREA+1+8,C' '                                          01790002
XR    #15,#15                             ˇ
  IC    #15,4(,#3)                GET LENGTH OF MODULE HEADER    0181000
  SH    #15,=H'16'                REDUCE BY LENGTH OF DATE/TIME  0182000
  BNP   NOCODREG                                         +
    LA    #0,L'WHEREN                                  ˇ
      CR    #15,#0                                                   018
      BNH   *+6                                                      018
      LR    #15,#0                                                   0ˇ
        BCTR  #15,0                                                    0
        EX    #15,MOVENAME        MOVE FUNCTION NAME TO MESSAGE        0
        LA    #1,WHEREN+1(#15)                                         0
     ˇ
2         LA    #0,1(,#1)
2         LA    #1,WHEREM
2         SR    #0,#ˇ
002         #TPUT 2,(1),(0)           DISPLAY ABENDED MESSAGE
002         B     NOCODREG
002         SPACE 1                ˇ
70002MOVENAME MVC   WHEREN(*-*),5(#3)   EXECUTED: MOVE FUNCTION NAME TO
80002         SPACE 1
90002NOCODREG DS    0H                            ˇ
2000002         UNPK  ABENDL(9),SDWANXT1(5)     GET LOCATION FROM PSW
2010002         TR    ABENDL(8),HEXTBL          PUT INTO MESSAGE
2020002         MVI   ABENDL+8,C','                              ˇ
 02030002AFTGLOC  DS    0H
 02040002         L     #0,STAECOMP         GET COMPLETION CODE
 02050002         SLL   #0,8                SHIFT OUT HIGH ORDER BYTE
ˇ
   02070002         BNH   ABUSER              THEN GO TO PROCESS IT. ELS
   02080002         MVC   ABENDT(12),=C'system code '
   02090002    ˇ
NV   02100002         ST    #0,ZLCDBL
     02110002*
     02120002         CLC   ZLˇ
       02130002         BNE   NOT0CC              then...
       02140002         #TPUT S0CCMSG              inform user of cause
heck   02150002NOT0CC   DS    0H             ˇ
         02160002*
         02170002         UNPK  ABENDC(4),ZLCDBL(3)
         02180002         TR    ABENDC(4),HEXTBL            ˇ
           02190002         MVI   ABENDC+3,C','
           02200002         L     #0,STAEREAS         GET REASON CODE
           02210002         SLL   #0,16               ONLY CARE ABOUT LA
IBBLES       02220002ˇÁ
                           02230002         UNPK  ABENDR(4),ZLCDBL(3)
                           02240002         TR    ABENDR(4),HEXTBL
                           02250002 ˇ
                             02260002         LA    #0,L'ABENDMSG
                             02270002         B     THROWIT
                             02280002ABUSER   DS   ˇ
                               02290002         MVC   ABENDT(10),=C'user
                               02300002         SRL   #0,8
BACK USER ABEND CODE           02310002         CVD   #0,ZLCDBL   ˇ
                                 02320002         UNPK  ABENDT+10(4),ZLC
                                 02330002         OI    ABENDT+10+3,X'F0
                                 02340002         MVI   ABENDT+10+4,C'.'
 ˇ
                                   02360002THROWIT  DS    0H
SPLAY ERROR MESSAGE AND THROW      02370002         STCM  #0,B'0111',ABS
                ˇ
                                     02390002         SPACE 1
                                     02400002WHEREM   DC    C'ZIL0041 ZI
AT '                           ˇ
                                       02420002         DC    C'IN FUNCT
                                       02430002WHEREN   DC    CL65' '
                                       0244000ˇ
                                         02450002         DS    0H,XL1
    Align string to non-halfword         02460002ABSTRING DC    YL1(##ST
3(ABSTREND-ABENDM)                       02470002ABENDM   DC ˇ
D in ZIL at '                              02480002ABENDL   DC    C'
                                           02490002         DC    C', '
                                           02500002ABENDT   DC    CL12'
                                             02510002ABENDC   DC    C'
                                             02520002         DC    C' r
de '                                         02530002ABENDR   DC    C'
           ˇ
                                               02550002ABENDMSG EQU   AB
BENDM,C'C'                                     02560002         SPACE 1
                          ˇ
3 FLOATING-POINT OVERFLOW EXCEPTION OCCURRED.'   02580002         SPACE
                                                 02590002NOWAMSG  DC
O SDWA AVAILABLE TO ESTAE EXIT FOR THIS A+
                                       ˇ
'00',C'0123456789ABCDEF'                             02620002         SP
                                                     02630002         DR
                                                     0ˇ
                                                       02650002STAEEXIT
                                                       02660002
                                                       02670002******ˇ
******************************************************** 02680002*
                                                       * 02690002* ESTAE
AT GETS CONTROL IF AN ABEND OCCURS INSIDE ZIL.         * 02700002*
    ˇ
O THIS ROUTINE:                                          * 02720002*
                                                         * 02730002*  RE
 = 12 - NO SWDA AVAˇ
     OTHER - SDWA AVAILABLE                                * 02750002*
                                                           * 02760002*
TER 0 = 12:                       ˇ
                                                             * 02780002*
ISTER 1  = ABEND COMPLETION CODE                             * 02790002*
ISTER 2  = ADDRESS OF THE ESTAE PARAMETER LIST (Pˇ
EGISTER 14 = RETURN ADDRESS TO RTM                             * 0281000
EGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    * 0282000
                                                               *ˇ
HERWISE:                                                         * 02840
                                                                 * 02850
 REGISTER 1  = ADDRESS OF THE SDWA                               * 02860

   REGISTER 14 = RETURN ADDRESS TO RTM                             * 028
   REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE EXIT ROUTINE    * 028
              ˇ
********************************************************************** 0
        SPACE 1                                                        0
        LR    #7,#15         ˇ
2         USING STAEEXIT,#7
2         LA    #3,12               CHECK IF REGISTER 0 = 12
2         CR    #0,#3               IF AN SDˇ
002         BE    NOSDWAE             THEN...
002         LR    #5,#1
002         USING SDWA,#5                                  
90002ˇÁ
           03000002         USING STAEPARM,#4
           03010002         XR    #2,#2
           03020002 ˇ
             03030002         ST    #2,STAECOMP          SAVE COMPLETION
             03040002         L     #2,SDWAGR15          REASON CODE FRO
MACRO        03050002         ST   ˇ
               03060002         L     #2,STAEZCOM          LOOK AT ZIL C
EA             03070002         TM    ZLCEFLGS-ZLCOMMON(#2),ZLCETERM IF
IN PROGRESS    03080002         BO    DUMPIT      ˇ
JUST ABEND       03090002         TM    ZLCIFLGS-ZLCOMMON(#2),ZLCISMC IF
 UNINTERRUPTIBLE 03100002         BO    DUMPIT               THEN CANNOT
JUST ABEND       03110002         L     #2,STAERTRY          ADDRˇ
ROUTINE            03120002*
                   03130002* RETURN SPECIFYING RETRY WITH NO DUMP
                   03140002*
ˇ
4                    03160002         BR    #14                 AND RETU
                     03170002         SPACE 1
               ˇ
                       03190002*
                       03200002* RETURN SPECIFYING CONTINUE WITH TERMINA
 DUMP IF POSSIBLE      0321000ˇ
                         03220002         SETRP WKAREA=(#5),DUMP=YES,RC=
                         03230002         BR    #14                 AND
                         03240002         SPAˇ
                           03250002NOSDWAE  DS    0H                  NO
AILABLE...                 03260002         LR    #4,#2               #4
AREA                       03270002         ST    #1,STAECOMˇ
ND COMPLETION CODE           03280002         XR    #0,#0
ODE ZERO (UNKNOWN)           03290002         ST    #0,STAEREAS
SON CODE                     03300002         L     #15,STAEZCOM
T ZIL COMMON AREA              03310002         TM    ZLCEFLGS-ZLCOMMON(
ETERM IF ZILTERM IN PROGRESS   03320002         BO    NSDUMPIT
ANNOT RETRY, JUST ABEND        03330002         TM    ZLCIFLGS-ZLCOMMON(
ISMC IF UNˇ
N CANNOT RETRY, JUST ABEND       03350002         L     #0,STAERTRY
ESS OF RETRY ROUTINE             03360002         LA    #15,4
CATE RETRY TO BE ATTEMPTE+
D RETURN               ˇ
                                     03390002NSDUMPIT DS    0H
                                     03400002         XR    #15,#15
INDICATE CONTINUE WITH TERMINATION   0ˇ
  AND RETURN                           03420002         EJECT
                                       03430002         LTORG
                                       03440002      ô    EJECT
                                         03450002         IHASDWA
                                         03460002         END
                                         03470002{
      TITLE 'SETASCII - BUILT-IN ZIL 1.3 SUBROUTINE'                 000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
0*                                                                     *
0* SETASCII takes one optional argument - NIL or non-NIL.              *
1*                          ˇ
000* If the arg is omitted, the current ASCII mode setting is returned.
001* If the arg is NIL, ASCII mode is disabled;
001* otherwise, ASCII mode is enabled.     ˇ
30001*
40000*******************************************************************
50000         SPACE                                       ˇ
0060000SETASCII #ZBEG MINARGS=0,MAXARGS=1,NAME='SETASCII'
0070002         SPACE
0080000         LR    #3,#15
 00090000         USING SETASCII,#3
 00100000         DROP  #15
 00110000         L     #15,0(,#1)          PICK UP ARG 1
 0012000ˇ
   00121001         BE    ASCIIQ              THEN QUERY CURRENT ASCII S
   00122001         CR    #15,#10             IF ARG IS NIL
   00130001         BNEˇ
     00140000         NI    ZLCLDFLG,255-ZLCLDASC SET ASCII MODE OFF
     00150001         BR    #14
     00160000ASCIIT   DS    0H        ˇ
       00170000         OI    ZLCLDFLG,ZLCLDASC    SET ASCII MODE ON
       00180001         BR    #14
       00190000         SPACE 1                      ˇ
         00200001ASCIIQ   DS    0H
         00360001         TM    ZLCLDFLG,ZLCLDASC   IF ASCII MODE IS ON
         00370001         BO    TRUE                THEN RETURN T (Tˇ
           00380001         LR    #15,#10             ELSE RETURN NIL (F
           00390001         BR    #14
           00400001TRUE     LR    #15,#8
   +
 ›             00420001         END
               00430001{
LT-IN ZIL 1.3 SUBROUTINE'                  00010000*********************
****************************************** 00011014*
                                         * 00012014*ˇ
The Charles Stark Draper Laboratory Inc.   * 00013014*
ights reserved.                            * 00014014*
                                           * 00015014**************ˇ
********************************************** 00016014*
                                             * 00017014* SETATTN TAKES O
RED ARGUMENT - NIL OR NON-NIL.               * 00018014*
  ˇ
AX PROCESSING IS CANCELLED;                    * 00020014* OTHERWISE, ST
SSING IS ENABLED.                              * 00030014*
                 ˇ
 ATTENTION HANDLING ON AND OFF.                  * 00050014*
                                                 * 00060014*************
********************************ˇ
                                                   * 00080014* SUMMARY O
ER USAGE FOR THIS MODULE                           * 00090014*
                                               ˇ
TATTN,#12                                            * 00110014*
AXPARM,#4                                            * 00120014*
ARETRY,#6                                            * 0013001ˇ
STAXEXIT,#7                                            * 00140014*
SDWA,#5                                                * 00150014*
                                                       * 00160014*******
********************************************************** 00170014*
                                                         * 00180014* Cha
vity:                                                    * 00190014*
            ˇ
- Attempts to handle being in full screen mode.            * 00210014*
                                                           * 00220014***
***************************ˇ
SPACE 1                                                        00240014S
#ZBEG MINARGS=1,MAXARGS=1,NAME='SETATTN'                       00250014
#ZPDS 16                                  ˇ
  #ZSAV ARGS=1                                                   0027001
  SPACE 1                                                        0028001
  L     #15,0(,#11)         PICK UP ARG 1                +
    CR    #15,#10             IF ARG IS NIL            ˇ
      BNE   ATTNON              THEN...                              003
      TM    ZLCEFLGS,ZLCESTAX    IF STAX ENVIRONMENT IS ACTIVE       003
      BZ    RETURN               THEN                                0ˇ
        STAX  ,                    CANCEL STAX                         0
        LTR   #15,#15              IF FAILED                           0
        BNZ   ERROR1               THEN ERROR                          0
     ˇ
4         B     RETURN                AND RETURN OK
4         SPACE 1
4ATTNON   DS    0H  ˇ
014         TM    ZLCEFLGS,ZLCESTAX   IF STAX ENVIRONMENT IS ACTIVE
014         BO    RETURN              THEN DO NOTHING
014         STAX  STAXEXIT,        ˇ
30014               USADDR=(#13),
40014               REPLACE=YES
50014         LTR   #15,#15              IF FAILEDˇ
0460014         BNZ   ERROR1               THEN ERROR
0470014         OI    ZLCEFLGS,ZLCESTAX    INDICATE STAX ACTIVE
0480014         B     RETURN                AND RETURN OK        ˇ
 00490014         SPACE 1
 00500014RETURN   DS    0H
 00510014         L     #15,0(,#11)         RETURN WITH ARG AS VALUE
ˇ
   00530014         SPACE 1
   00540014ERROR1   DS    0H                  Error - STAX failed
   00550014    ˇ
,   X00560014               PREFIX=NO
     00570014         SPACE 1
     00580014         DROP  #1ˇ
       00590014         SPACE 1
       00600014         EJECT
       00610014STAXEXIT DS    0H             ˇ
         00620014         SPACE 1
         00630014*******************************************************
******** 00640014*                                          ˇ
         * 00650014* STAX EXIT THAT GETS CONTROL IF AN ATTENTION OCCURS
IL.      * 00660014*
         * 00670014*  ON ENTRY TO THIS ROUTINE:
           * 00680014ˇÁ
                         * 00690014* REGISTER 0, 2-12   = IRRELEVANT
                         * 00700014* REGISTER 1  = THE ADDRESS OF THE AT
EXIT PARAMETER LIST      * 00710014*ˇ
                           * 00720014* REGISTER 14 = RETURN ADDRESS
                           * 00730014* REGISTER 15 = ENTRY POINT ADDRESS
ATTENTION HANDLING ROUTINE * 00740014*             ˇ
                             * 00750014*  THE ATTENTION EXIT PARAMETER L
TED TO BY #1 CONTAINS THE    * 00760014*  ADDRESS OF A TERMINAL ATTENTIO
UPTION ELEMENT (TAIE).       * 00770014*                          ˇ
                               * 00780014*         +0 ___________    TAI
____________                   * 00790014*           ◊           ◊
   ◊TGET◊   ◊                  * 00800014*  #1 --->  ◊ ->TAIE ---◊------
Bˇ
_____◊____◊___◊                  * 00820014*   ATTN    ◊           ◊
              ◊                  * 00830014*   EXIT    ◊ -> IBUF   ◊
INT'D PSW ADR ◊ ˇ
◊_______________◊                  * 00850014*   LIST    ◊           ◊
◊               ◊                  * 00860014*           ◊ -> USADDR ◊
◊ INT'D GR0-15  ◊              ˇ
  ◊               ◊                  * 00880014*
                                     * 00890014*
                                     * 0090001ˇ
nonzero if a CLIST attention exit is   * 00910014*     in the stack.  Th
lid for MVS/SP2.2 only.                * 00920014*
                                       * 00930014************ˇ
****************************************** 00940014         SPACE 1
                                           00950014         PUSH  USING
                                           00960014         DROP  #13
                                             00970014         LR    #7,#
        SAVE ENTRY ADDRESS REGISTER          00980014         USING STAX
                                             00990014         LR    #6,#
        SAVˇ
)         LOAD VALUES FROM PARAMETER LIST      01010014*
          #2 --> TAIE                          01020014*
          #3 --> IBUF     ˇ
            #4 --> USADDR = ZLCOMMON             01040014         USING
                                                 01050014         USING
,#4                                      +
                                       ˇ
FLGS,ZLCIATTN   IF ATTENTION ALREADY IN PROGRESS     01080014         BO
                THEN IGNORE THIS ATTEMPT             01090014         TM
FLGS,ZLCISMC    IF NON-INTERRUPTIBLE PROCESS         0ˇ
TSMC              THEN...                              01110014
CMSG,L'SMCMSG      WARN USER ABORTS WILL BE DEFERRED   01120014NOTSMC
                  ELSE...                              01130014      ˇ
1                                                        01140014
ATTNOUT,L'ATTNOUT   SEND ATTENTION PROMPT                01150014
ATTNIN,L'ATTNIN     READ RESPONSE                        01160014
ATTNˇ
  #5,#1               SAVE TGET COUNT                      01180014
ARQ INPUT             THROW AWAY EXTRA JUNK                01190014
  #5,#5            ˇ
R   #6                  THEN RESUME CURRENT PROCESS          01210014
I   ATTNIN,C' '         IF USER ENTERED A BLANK              01220014
HR  #6                  THEN RESUMˇ
CLI   ATTNIN,C'R'         IF USER ENTERED "R"                  01240014
BER   #6                  THEN RESUME CURRENT PROCESS          01250014
CLI   ATTNIN,C'A'         IF USER ENTERED "A"    ˇ
  BE    ABORT               THEN ABORT                           0127001
  CLI   ATTNIN,C'T'         IF USER ENTERED "T"                  0128001
  BE    TIME                THEN SHOW TIME                      ˇ
    CLI   ATTNIN,C'H'         IF USER ENTERED "H"                  01300
    BE    HELP                THEN SHOW HELP                       01310
    CLI   ATTNIN,C'?'         IF USER ENTERED "?"                  01320

      B     NOTSMC              ELSE REPROMPT.                       013
      SPACE 1                                                        013
E     DS    0Hˇ
        SPACE 1                                                        0
        L     #15,X'21C'          GET TCB ADDRESS                      0
        L     #15,X'B4'(,#15)ˇ
4         L     #15,X'15C'(,#15)    GET ACTIVE JSCB ADDRESS
4         ICM   #15,15,X'108'(#15)  GET PSCB ADDRESS
4         ST    #15,CPPLPSCB                ˇ
014         USING PSCB,#15
014         MVC   CPPLUPT,PSCBUPT      SAVE UPT ADDRESS
014         L     #15,PSCBRLGB         GET ADDRESS OF RELOG ON BUFFER
50014ˇÁ
           01460014         L     #15,RLGBECT          GET ADDRESS OF EC
           01470014         ST    #15,CPPLECT         ADDRESS ENVIRONMEN
L TABLE    01480014 ˇ
             01490014         ICM   #15,15,TIMEADDR     GET ADDRESS OF I
             01500014         BNZ   CALLTIME
             01510014         LOAD ˇ
               01520014         LR    #15,#0
               01530014         ST    #15,TIMEADDR
               01540014CALLTIME DS    0H          ˇ
                 01550014         LA    #1,CPPL
                 01560014         #BASR #14,#15             CALL TSO TIM
D                01570014         B     NOTSMC                   ˇ
                   01580014         SPACE 1
                   01590014HELP     DS    0H                  HELP - GIV
ER SOME HELP       01600014         SPACE 1
ˇ
                     01620014HELPLOOP DS    0H
                     01630014         C     #14,=A(HELPMSGE)
               ˇ
                       01650014         LM    #0,#1,0(#14)
                       01660014         TPUT  (1),(0),R
                       0167001ˇ
                         01680014         B     HELPLOOP
                         01690014         SPACE 1
                         01700014ABORT    DS ˇ
                           01710014         OI    ZLCIFLGS,ZLCIATTN   IN
TTENTION IN PROGRESS       01720014         TM    ZLCIFLGS,ZLCISMC    IF
ERRUPTIBLE CODE RUNNING    01730014         BOR   #6        ˇ
T RETURN, CODE'LL DETECT     01740014         TM    ZLCIFLGS,ZLCISYS
IL CODE RUNNING NOW          01750014         BOR   #6
T RETURN, CODE'LL DETECT     01760014         C     #4,TAIERSAV+(13*4)
 13 AT ATTN TIME = ZLCOMMON    01770014         BNE   REGSBAD
E'RE OK SO FAR, ELSE PROBLEM   01780014         L     #1,TAIEIAD
ET ADDRESS OF INSTR AT ATTN    01790014         B     ZAPIT
 TO ZAP INˇ
                                 01810014         SPACE 1
                                 01820014*******************************
*************************+
                       ˇ
TAIE, DOES NOT MATCH ZIL'S, THEN   * 01850014*  PROBABLY WE GOT INTERRUP
E WE WERE IN SOME OTHER RB'S CODE  * 01860014*  (AND ZLCISYS WAS NOT SET
UCH A CASE, WE SHOULD SCAN THE     * 0ˇ
WHEN WE FIND IT, WE SHOULD RESTORE   * 01880014*  REGS 8, 9 AND 10 TO TH
F OUR ABILITY AND USE THE PSW FROM   * 01890014*  THAT RB TO STICK IN OU
".                                   * 01900014*     ˇ
                                       * 01910014***********************
**************************************** 01920014         SPACE 1
                                         01930014         L     #14,ˇ
      GET CURRENT TCB ADDRESS              01940014         L     #15,0(
      GET CURRENT RB (IRB FOR ATTN EXIT)   01950014RBLOOP   DS    0H
                                           01960014         CL    #15,ZL
   ˇ
                                             01980014         L     #15,
15)     ELSE GET NEXT RB IN CHAIN            01990014         TM    X'B'
80'     IF NO MOREˇ
          THEN DISASTER                        02010014         B     RB
          ELSE KEEP SEARCHING RB CHAIN         02020014RBGOT    DS    0H
                                 ˇ
(,#15)      GET RIGHT HALF OF RBOPSW             02040014ZAPIT    DS
            ZAP INSTRUCTION TO FORCE "BR 13"     02050014         ST
STA         SAVE ADDRESS                        ˇ
#1)           GET INSTRUCTION AT THAT ADDRESS      02070014         STH
INSTR         SAVE INSTRUCTION                     02080014         LH
3             GET A "BR 13" INSTRUCTION            02090014    ˇ
(,#1)           OVERLAY INSTRUCTION WITH BR 13       02100014         OI
FLGS,ZLCIOVER   INDICATE INSTRUCTION OVERLAID        02110014         SP
                                                     02120014         ST
TOP               STOP ANY SUBTASKS FROM EXECUTING     02130014
                                                       02140014
CECB              POST ECB IF WAITING FOR SUBTASK      02150014
             ˇ
#6                  RETURN TO SYSTEM SO ZIL CAN PROCEED  02170014
1                                                        02180014FAILURE
0H                  DIDN'T Fˇ
E 1                                                        02200014
  NORB,L'NORB                                              02210014
E 1                                                         02220014ˇÁ

014         SPACE 1
014BR13     BR    #13                 INSTRUCTION TO ZAP INTO ZIL CODE
014 ˇ
60014TIMEADDR DC    A(0)                ADDRESS OF IKJEFT25, TSO TIME CM
70014CPPL     DS    0A
80014CPPLCBUF DC   ˇ
2290014CPPLUPT  DS    A        PTR TO UPT
2300014CPPLPSCB DS    A        PTR TO PSCB
2310014CPPLECT  DS    A        PTRˇ
 02320014         SPACE 1
 02330014FAKEBUF  DC    X'0005000040'
 02340014         SPACE 1                        ˇ
   02350014SMCIBUF  DS    C                   FOR DUMMY TGET
   02360014         SPACE 1
   02370014HELPMSGS DS    0A                                    ˇ
     02380014         DC    A(L'HELP1),A(HELP1)
     02390014         DC    A(L'HELP2),A(HELP2)
     02400014         DC    A(L'HELP3),A(HELP3)

       02420014         DC    A(L'HELP5),A(HELP5)
       02430014         DC    A(L'HELP6),A(HELP6)
       0244001ˇ
         02450014HELPMSGE EQU   *
         02460014         SPACE 1
         02470014ATTNOUT  DC ˇ
(ESUME), TX02480014               (IME), H(ELP).'
           02490014ATTNIN   DC    CL1' '
           02500014SMCMSG   DC    C'ZIL0052 ˇ
 WILL BE DEFX02510014               ERRED UNTIL PROCESS IS COMPLETE.'
             02520014NORB     DC    C'ZIL0053 UNABLE TO PROCESS ATTENTIO
UPT, ZIL RB X02530014               NOT FOUND ON RB CHAIN.'ˇ
               02540014         SPACE 1
               02550014HELP1    DC    C'ZIL0055 Type one of the followin
ess ENTER:'    02560014HELP2    DC    C'          A - abort the current
s and return to X02570014               top level.'
                 02580014HELP3    DC    C'          R - resume processin
nothing had happX02590014               ened.'
         +
ar.'   ˇ
n.'                  02620014HELP6    DC    C'        Pressing ENTER is
nt to R (resume).'   02630014HELP7    DC    C'        Pressing PA1 (atte
ill terminate the enX0ˇ
                       02650014         POP   USING
                       02660014         EJECT
                       02670014      ˇ
                         02680014         EJECT
                         02690014         IKJTAIE ,                 TERM
ENTION INTERRUPT ELEMENT 02700014         IKJPSCB , ˇ
                           02710014         IKJUPT  ,
                           02720014         IKJRLGB ,
                           02730014         IKJECT ,               b
                             02740014         END
                             02750014{
'SETBRACK - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
                                                           * 00017002* S
takes two required arguments - both must be characters -   * 00018002* a
ptional argumentˇ
                                                             * 00020002*
nction tells ZIL to use the specified characters as left     * 00030002*
ht square brackets whenever wriˇ
b expansion is active for that file, whether the file is a     * 0005000
et or the terminal.                                            * 0006000
                                              ˇ
ument 1 is the character to be output for left square brackets.  * 00080
ument 2 is the character to be output for right square brackets. * 00090
                                                             ˇ
rgument 3, if specified and non-NIL, requests that the change be   * 001
ade to the terminal output translate table as well.  This will     * 001
ause the exact characters specified to be sent to the terminal     * 001
 as desired.  The default is to let ZIL try to determine the best    * 0
 way of sending square brackets to the terminal, which may be        * 0
 invalid for certain kinds of terminal connections.                  * 0
           ˇ
2* Use this only when you want to force ZIL to send these characters;  *
2* they will end up being used for file output as well!                *
2*                        ˇ
002* For example, to tell ZIL to send square brackets to a VT220 which
002* is connected to MVS via a 7171 controller, do:
002*                                     ˇ
30002*  (setbrack #XAD #XBD T)  ; send "real" brackets, even to terminal
40002*
50002* For a 3278 model 4, a 3279, a 3179 or a 3180:    ˇ
0260002*
0270002*  (setbrack #XAD #XBD NIL); send "real" brackets, let ZIL transl
0280002*                          ; to correct terminal code           +
 00290002*                                                           ˇ
 * 00300002* For a 3278 model 2:
 * 00310002*
 * 00320002*  (setbrack #XAD #XBD NIL); send "real" brackets.  There's n
 * 0ˇ
   * 00340002*                          ; it display as garbage.
   * 00350002*
   * 00360002* To rˇ
     * 00370002*
     * 00380002*  (setbrack #XC0 #XD0 NIL)
     * 00390002*                  ˇ
       * 00400002* Note: NIL may be omitted where specified in all examp
e.     * 00410002*
       * 00420002********************************ˇ
********** 00430002         SPACE
           00440002SETBRACK #ZBEG MINARGS=2,MAXARGS=3,NAME='SETBRACK'
           00450002         #ZPDS 3*4+12+0 = 24                 ˇ
             00460002         #ZSAV ,
             00470002         SPACE
             00480002         LM    #2,#4,0(#11)        LOAD ARGUMENTS

               00500002         BNE   ERROR1              ERROR IF ARG1
 FIXNUM        00510002         CLI   ##TYPE(#3),##FIXNUM
              ˇ
 A FIXNUM        00530002         L     #5,##CDR(,#2)       GET VALUE OF
                 00540002         CL    #5,#SFW255          MUST BE 0 <=
5                00550002    ˇ
                   00560002         L     #6,##CDR(,#3)       GET VALUE
                   00570002         CL    #6,#SFW255          MUST BE 0
255                00580002         BH    ERˇ
                     00590002         STC   #5,ZLCLB            SET LEFT
BRACKET CHARACTER    00600002         STC   #6,ZLCRB            SET RIGH
 BRACKET CHARACTER   00610002         CR    #4,#13         ˇ
FIED                   00620002         BE    DEFAULT              AND
                       00630002         CR    #4,#10                ARG
L                      00640002         BE    DEFAULT                THE
                         00650002         L     #14,ZLCTRMTR
INAL OUTPUT TRANS TABLE  00660002         STC   #5,X'AD'(,#14)      SET
ARE BRACKET CHARACTER    00670002         STC   #6,X'BD'(,#14)      SET
UARE BRAC KET CHARACTER   00680002ˇÁ
                                         00690002         LR    #15,#10
    RETURN NIL                           00700002         #ZRET ,
                                         00710002 ˇ
                                           00720002ERROR1   DS    0H
                                           00730002         #ERR  'Argum
 SETBRACK not a valid character - ',(#2)   00740002         SPACEˇ
                                             00750002ERROR2   DS    0H
                                             00760002         #ERR  'Arg
to SETBRACK not a valid character - ',(#3)   00770002         SPACE 1
T                                              00780002         LTORG
                                               00790002         END
                                               00800002
         TITLE 'SETDEBUG - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* SETDEBUG TAKES ONE REQUIRED ARGUMENT - NIL OR NON-NIL.
18002*                          ˇ
0019002* IF THE ARG IS NIL, DEBUG MODE IS DISABLED;
0020002* OTHERWISE, DEBUG MODE IS ENABLED.
0030002*                                       ˇ
 00040002***************************************************************
 00050002         SPACE
 00060002SETDEBUG #ZBEG MINARGS=1,MAXARGS=1,NAME='SETDEBUG'   ˇ
   00070002         SPACE
   00080002         LR    #3,#15
   00090002         USING SETDEBUG,#3
     00100002         DROP  #15
     00110002         L     #15,0(,#1)          PICK UP ARG 1
     00120002         CR    #15,#10             IF ARG IS NIL
     0013000ˇ
       00140002         NI    ZLCERFLG,255-ZLCERDBG SET DEBUG MODE OFF
       00150002         BR    #14
       00160002DEBUGT   DS ˇ
         00170002         OI    ZLCERFLG,ZLCERDBG    SET DEBUG MODE ON
         00180002         BR    #14
         00190002         END             †
           00200002
 ZIL 1.3 SUBROUTINE'                 00010000***************************
************************************ 00011002*
                                   * 00012002*ˇ
arles Stark Draper Laboratory Inc.   * 00013002*                     All
reserved.                            * 00014002*
                                     * 00015002**************ˇ
**************************************** 00016002         SPACE 1
                                         00017002***********************
**************************************** 00018002*
                                         * 00019002* This is the SETF me
 PBIND, basically.                       * 00020002*
                                         * 00030002* This function sets
ding cell" ˇ
he "value cell", but is being used as      * 00050002* a cell to contain
dynamic bindings in the current            * 00060002* deep-binding impl
on of ZIL.  In a shallow-bˇ
ll be a true value cell, and this            * 00080002* function will d
.                                            * 00090002*
                                         ˇ
************************************************ 00110002         SPACE
                                                 00120002SETPBIND #ZBEG
2,MAXARGS=2,NAME='SETPBIND'                      0013000ˇ
                                                   00140002         USIN
ND,#15                                             00150002         SPAC
                                                   00160002         LM ˇ
3,0(#1)                                              00170002         CL
PE(#2),##SYMBOL                                      00180002         BN
RROR                                                 00190002*
      ˇ
h code to check "constant-p" bit in symbol???          00210002*
                                                       00220002
,#10              Canˇ
SPBERROR                                                 00240002
#2,#8               Can't set value cell of T            00250002
SPBERROR                            ˇ
  #3,##PVALUE(,#2)                                         00270002
  #15,#2                                                   00280002
  #14                                              +
ACE 1                                            ˇ
DS    0H                                                       00310002
LR    #4,#15                                                   00320002
USING SETPBIND,#4                                              0ˇ
  DROP  #15                                                      0034000
  #ERR  'Argument to SETPBIND not a valid symbol - ',(#2)        0035000
  SPACE 1                                                        0036000
    END                                                            00370

               00010000*************************************************
************** 00011002*
             * 00012002*ˇ
oratory Inc.   * 00013002*                     All rights reserved.
               * 00014002*
               * 00015002**************ˇ
****************** 00016002         SPACE 1
                   00018002SETPLIST #ZBEG MINARGS=2,MAXARGS=2,NAME='SETP
                   00019002         SPACE 1           ˇ
                     00020002         USING SETPLIST,#15
                     00030002         SPACE 1
                     00040002         LM    #2,#3,0(#1)              ˇ
                       00050002         CLI   ##TYPE(#2),##SYMBOL
                       00060002         BNE   SPLERROR
                       00070002         ST    #3,##PLIST(,#2)
    ˇ
                         00090002         BR    #14
                         00100002         SPACE 1
                   ˇ
                           00120002         LR    #4,#15
                           00130002         USING SETPLIST,#4
                           0014000ˇ
                             00150002         #ERR  'Argument to SETPLIS
symbol - ',(#2)              00160002         SPACE 1
                             00170002         ENDà
                               00180002
'SETSALST - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
ACE 1                                                        00017002SET
BEG MINARGS=1,MAXARGS=1,NAME='SETSALST'                      00018002
ACE 1           ˇ
L     #15,0(,#1)          GET ARG 1                            00020002
ST    #15,ZLCSALST        STORE INTO SPECIAL ALIST             00030002
BR    #14                      f                                 0004000
  END                                                            0005000
∞
           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002         SPACE 1
               00018002SFLOATP  #ZBEG MINARGS=1,MAXARGS=1,NAME='SFLOATP'
               00019002         SPACE 1           ˇ
                 00020002         USING SFLOATP,#15
                 00030002         SPACE 1
                 00040002         L     #2,0(,#1)                ˇ
                   00050002         CLI   ##TYPE(#2),##SFLOAT
                   00060002         BNE   ZXFLON
                   00070002         DROP  #15
ˇ
                     00090002         BR    #14
                     00100002ZXFLON   LR    #15,#10
               º       00110002         BR    #14
                       00120002         END
                       00130002
 BUILT-IN ZIL 1.3 SUBROUTINE'                    00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002*
                                                     00017002* SLEEP PUT
 SLEEP FOR THE SPECIFIED NUMBER OF SECONDS.          00018002*
        ˇ
****************************************************** 00020002SLEEP
NARGS=1,MAXARGS=1,NAME='SLEEP'                         00030002
                  DEFINˇ
,                   SAVE REGISTERS                       00050002
                                                         00060002
#2,0(,#11)          GET ARG 1         ˇ
  ##TYPE(#2),##FIXNUM IF ARG 1 IS NOT A FIXNUM             00080002
  ERROR               THEN ERROR                           00090002
  #3,15,##CDR(#2)     ELSE GET VALUE                 ˇ
    ERROR                                                    00110002
    #3,=H'100'          CONVERT TO HUNDREDTHS OF A SECOND    00120002
    #3,TIME             STORE TIME VALUE FOR STIMER          0013000ˇ
SPACE                                                          00140002
STIMER WAIT,BINTVL=TIME   GO TO SLEEP FOR N SECONDS            00150002
SPACE                                                          00160002
LR ˇ
  SPACE                                                          0018000
  #ZRET ,                   RESTORE REGISTERS AND RETURN         0019000
  SPACE           ˇ
    #ERR  'Argument to SLEEP not a positive fixnum - ',0(#11)      00210
    SPACE                                                          00220
    DS    F                      ˇ
      SPACE                                                          002
      LTORG                                                          002
      SPACE                                     #                      0
        END                                                            0

                 00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* SLENGTH TAKES ONE ARGUMENT - A STRING
                   * 00018002*                          ˇ
                     * 00019002*****************************************
********************** 00020002SLENGTH  #ZBEG MINARGS=1,MAXARGS=1,NAME='
ENGTH'                 00030002         #ZPDS 16                  DEFINˇ
 SIZE                    00040002         #ZSAV ,                   SAVE
RS                       00050002         SPACE
                         00060002         L     #1,0(,#11)          LOAD
AND ONˇ
RT REGISTER                00080002         CLI   ##TYPE(#1),##STRING AR
E A STRING OR SYMBOL       00090002         BE    OK                  EL
                     ˇ
L, THEN USE PRINT NAME       00110002         BNE   ERROR1
                             00120002         L     #1,##PNAME(,#1)
                             0013000ˇ
                               00140002         ICM   #2,7,1(#1)
NGTH OF STRING TEXT            00150002         CL    #2,ZLCSFTHI
hin small fixnum range         00160002         BNHˇ
 go return a fixnum from table   00170002         LA    #0,16(,#11)
 CURRENT STACK LOCATION TO CONS  00180002         #MKAT FIXED
 A FIXNUM                        00190002         B     RETURN    ˇ
                                   00200002SMALLFIX DS    0H
 fixnum is small enough...         00210002         SLA   #2,3
nvert to index into fixnum table   00220002         LA    #15,#SFT(#2)
tˇ
                                     00240002         #ZRET ,
RESTORE REGISTERS AND RETURN         00250002         SPACE 3
                ˇ
  INVALID ARGUMENT                     00270002         #ERR  'Argument
G-LENGTH not a string - ',0(#11)       00280002         SPACE 1
                               +
                             ›             00300002         END
                                           00310002{
        TITLE 'SREVERSE - BUILT-IN ZIL 1.3 SUBROUTINE'                 0
********************************************************************** 0
                                                                     * 0
ˇ
2*                     All rights reserved.                            *
2*                                                                     *
2**************ˇ
002*
002* (STRING-REVERSE ARG1)
002*                          ˇ
19002* THIS FUNCTION REVERSES A STRING.
20002*
30002* STRING-RIGHT-TRIM USES THIS FUNCTION. ˇ
0040002*
0050002*****************************************************************
0060002         SPACE 1                                     ˇ
 00070002SREVERSE #ZBEG MINARGS=1,MAXARGS=1,NAME='STRING-REVERSE'
 00080002         #ZPDS 16                  DEFINE STACK SIZE
 00090002         #ZSAV ,                   SAVE REGISTERS
   00100002         SPACE
   00110002         L     #15,0(,#11)         LOAD ARG1
   00120002         CLI   ##TYPE(#15),##STRING IF ARGUMENT IS A STRING
   0013000ˇ
     00140002         CLI   ##TYPE(#15),##SYMBOL IF ARGUMENT IS A SYMBOL
     00150002         BNE   ERROR1              THEN
     00160002         L  ˇ
OR     00170002ARG1OK   DS    0H
       00180002         XR    #2,#2               CLEAR INSERT REGISTER
       00190002         ST    #15,0(,#11ˇ
R USE    00200002         ICM   #2,7,1(#15)         GET LENGTH OF STRING
VSS      00210002         BZ    RETURN              IF NULL STRING, RETU
         00220002         CH    #2,=H'1'               ˇ
           00230002         BNH   RETURN              IF STRING LENGTH 1
, RET SELF 00240002         XR    #1,#1               ENTRY CODE 0 = ALL
W SPACE    00250002         L     #15,ZLCVSS          GET ADDRESS OF Zˇ
             00260002         LA    #0,16(,#11)         SET CURRENT STAC
R FOR GC     00270002         #BASR #14,#15             CALL ZILVSS TO C
STRING       00280002         LTR   #15,#15             IF STRING BUILD
     +
   ˇ
NAL STRING       00310002         XR    #2,#2               CLEAR INSERT
R                00320002         LA    #1,##VECDAT(,#5)    POINT TO FIR
IN OLD STRING    0ˇ
NG                 00340002         LA    #5,##VECDAT-1(#15,#2) POINT TO
AR OF NEW STRING   00350002         AR    #2,#1               POINT TO E
D STRING           00360002      ˇ
NG OF NEW STRING     00370002         LA    #4,1                SET BXLE
NT REGISTER          00380002LOOP     DS    0H
                     00390002         BCTR  #2,0ˇ
US CHAR IN OLD STRING  00400002         MVC   0(1,#3),0(#2)       MOVE O
CTER TO NEW CHARACTER  00410002         BXLE  #3,#4,LOOP
                       00420002ENDLOOP  DS    0H               ˇ
                         00430002RETURN   DS    0H
                         00440002         SPACE 1
                         00450002         #ZRET ,                   REST
GISTERS AND RETURN         00460002         SPACE 1
                           00470002ERROR1   #ERR  'Argument to STRING-RE
t a string - ',0(#11)      00480002ERROR2   #ERR  'ZIL4010 STRING-REVERS
nough vector/ˇ
                             00500002         SPACE 1
                             00510002         LTORG
                            $  00520002         END
                               00530002{
********************************************************** 00010003*
                                                         * 00011003* ZIL
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00012003*ˇ
           All rights reserved.                            * 00013003*
                                                           * 00013103***
************************************************************ 00013203
TLEˇ
MACRO                                                          00013403&
XTRT  &DATR,&TABLE,&LENR=,&F256=#0                             00013503
LCLC  &LBLA,&LBLB,ˇ
  SETC  'XTRA&SYSNDX'                                            0001370
  SETC  'XTRB&SYSNDX'                                            0001380
  SETC  'XTRC&SYSNDX'            ˇ
    SETC  'XTRX&SYSNDX'                                            00014
    LA    &F256,256            Set up constant 256                 00014
    CR    &LENR,&F256          If length greaterˇ
      BNH   &LBLA                then...                             000
      TRT   0(256,&DATR),&TABLE   scan for desired characters        000
      BNZ   &LBLB                 If we found something, exit  ˇ
        AR    &DATR,&F256           Else increment text pointer by 256 0
        SR    &LENR,&F256           Decrement length by 256            0
        B     &LBLC                 Continue scanning.                 0
3&LBLX    TRT   0(*-*,&DATR),&TABLE  (Executed instruction)
3&LBLA    DS    0H                  Else...
3         BCTR  &LENR,0              Reduce length for execute
3         EX ˇ
003&LBLB    DS    0H
003         MEND
003         TITLE 'STRING-SCˇ
00003*******************************************************************
10003*                       ZIL 1.3 MAR88 - S. BACHER
20003**************************************ˇ
0130003*
0140003* STRING-SCAN
0150003*                                                  ˇ
 00160003* This function takes (1) a string to be tokenized and returns
 00170003* of strings, all of which are "words" in the string.  The stri
 00180003* parsed into words according to the following optional argumen
 * 00190003*                                                           ˇ
   * 00200003* (2) the whitespace string, which is a "bag" of string cha
   * 00210003*     to act as whitespace (in other words, the occurrence
   * 00220003*     of the characters in the "whitespace bag" marks the e
   * 0ˇ
     * 00240003*
     * 00250003* (3) the singleton string, which is a "bag" of string ch
     * 00260003*     ˇ
gets   * 00270003*     returned as a one-character string in the resulti
       * 00280003*
       * 00290003* (4) either a nullˇ
         * 00300003*     two-character string, which defines a "quote" c
.  The   * 00310003*     first character of the string defines the chara
be used  * 00320003*     to quote strings, and the ˇ
 the       * 00330003*     convention for embedding the quote character
tring.     * 00340003*     If a one-character string is specified, or th
 character * 00350003*     is the same as the first, the quote chaˇ
ecified by   * 00360003*     doubling it (e.g. 'don''t').  If the second
er is a      * 00370003*     different character from the first, it is a
 escape"     * 00380003*     character, and any character following it i
nˇ
               * 00400003*
               * 00410003*     The string is constructed including the e
 quotes and    *ˇ
In this way the  * 00430003*     caller can distinguish between quoted a
ted strings,     * 00440003*     but is responsible for unquoting the st
/herself.        * 00450003*   ˇ
                   * 00460003*     An error is signalled if the ending q
a string is not    * 00470003*     found, or if the escape character is
owed by something. * 00480003*                ˇ
                     * 00490003*     If a null string is specified, no q
racter is used.      * 00500003*     Only one quote character can be spe
                     * 00510003*                             ˇ
                       * 00520003* (5) a beginning-comment string (not a
which signals the      * 00530003*     beginning of a comment.  If "", t
no sequence which      * 00540003*     starts a comment.  Comments are t
ted by end-of-string     * 00550003*     or the ending-comment string sp
in...                    * 00560003*
                         * 00570003* (6) an ending-comment string (not a
which signa ls the        * 00580003ˇÁ
", only end-of-string can terminate      * 00590003*     a comment.
                                         * 00600003*
                                         * 00610003*ˇ
aracter tokens (strings of length 2 or     * 00620003*     more).   Defa
he null list.                              * 00630003*
                                           * 00640003* Syntax:     ˇ
                                             * 00650003*
                                             * 00660003*  (STRING-SCAN s
ptional (whitespace-bag       " ")           * 00670003*
  ˇ
          (quote-spec           "" )           * 00690003*
          (comment-start-string "" )           * 00700003*
          (commenˇ
            (token-list           NIL)           * 00720003*  )
                                                 * 00730003*
                                ˇ
specified for any of the arguments other than the  * 00750003*        la
n-list), it is treated like the string "NIL".      * 00760003*        Th
 do not specify NIL to mean a default or       ˇ
ed argument for any of those arguments!              * 00780003*
                                                     * 00790003*********
****************************************************** 0080000ˇ
1                                                        00810003SSCAN
MINARGS=1,MAXARGS=7,NAME='STRING-SCAN'                   00820003
7*4+12+12 = 52      DEFINE STACK SIZE                    00830003
V ,                   SAVE REGISTERS                       00840003
E 1                                                        00850003
  #3,#7,0(#11)        Load args 1, 2, 3, 4, 5 (not 6 yet)  00860003
  TRTDLM(256ˇ
I   TRTNDLM,4           Init non-whitespace translate table  00880003
C   TRTNDLM+1(255),TRTNDLM                                   00890003
    TRTQUOTE(256),TRTQUOTE ˇ
SPACE 1                                                        00910003*
************************************************************** 00920003*
                                          ˇ
ss argument 1, the string                                      * 0094000
                                                               * 0095000
*********************************************************+
    SPACE 1                                            ˇ
      CLI   ##TYPE(#3),##STRING IF ARGUMENT IS A STRING              009
      BE    ARG1OK              THEN OK                              009
      CLI   ##TYPE(#3),##SYMBOL IF ARGUMENT IS A SYMBOL              0ˇ
        BNE   ERROR1              THEN                                 0
        L     #3,##PNAME(,#3)      TAKE THE PRINT NAME, ELSE ERROR     0
RG1OK   DS    0H                                                       0
     ˇ
3***********************************************************************
3*                                                                     *
3* Process argument ˇ
003*
003*********************************************************************
003         SPACE 1                ˇ
00003         CR    #4,#13              If arg 2 is unsupplied
10003         BNE   NOTDEF2             then...
20003         MVI   TRTDLM+X'40',4       set spaceˇ
1130003         MVI   TRTNDLM+X'40',0      set space as only delimiter
1140003         B     BUILTTRT             and go to check arg 3
1150003NOTDEF2  DS    0H                  Else...                ˇ
 01160003         CLI   ##TYPE(#4),##STRING IF ARGUMENT IS A STRING
 01170003         BE    ARG2OK              THEN OK
 01180003         CLI   ##TYPE(#4),##SYMBOL IF ARGUMENT IS A SYMBOL
ˇ
   01200003         L     #4,##PNAME(,#4)      TAKE THE PRINT NAME, ELSE
   01210003ARG2OK   DS    0H
   01220003    ˇ
     01230003***********************************************************
**** 01240003*
   * 01250003* Build translateˇ
     * 01260003*
     * 01270003*********************************************************
****** 01280003         SPACE 1              ˇ
         01290003         XR    #14,#14             Clear insert registe
         01300003         ICM   #14,7,1(#4)         Get length of argume
         01310003         BZ    BUILTTRT            If zero,ˇ
           01320003         LA    #1,##VECDAT(,#4)    Point to text of s
g 2        01330003         XR    #15,#15             Clear insert regis
           01340003         LA    #0,4                Set value to stick
table        01350003ˇÁ
to stick into table        01360003TBLDLOOP DS    0H
                           01370003         IC    #15,0(,#1)          Ge
ter from string arg 2      01380003 ˇ
e char to flag as delimiter  01390003         STC   #2,TRTNDLM(#15)
e char to bypass delimiters  01400003         LA    #1,1(,#1)
t character pointer          01410003         BCT  ˇ
ue until arg 2 exhausted       01420003BUILTTRT DS    0H
bles are built                 01430003         SPACE 1
                               01440003***************************ˇ
******************************** 01450003*
                               * 01460003* Process argument 3, the singl
                               * 01470003*
 ˇ
********************************** 01490003         SPACE 1
                                   01500003         CR    #5,#13
 arg 3 is unsuppˇ
then do nothing.                     01520003         CLI   ##TYPE(#5),#
IF ARGUMENT IS A STRING              01530003         BE    ARG3OK
THEN OK                        ˇ
L IF ARGUMENT IS A SYMBOL              01550003         BNE   ERROR3
  THEN                                 01560003         L     #5,##PNAME
   TAKE THE PRINT NAME, ELSE ERROR     0157000ˇ
                                         01580003         SPACE 1
                                         01590003***********************
**************************************** 01600003*           ˇ
                                         * 01610003* Modify translate ta
m argument 3                             * 01620003*
                                         * 01630003* Note that any singl
haracter specified overrides the same      * 01640003* character having
cified in the whitespace bag.              * 01650003*
                                           * 01660003*******************
***********ˇ
                                               01680003         XR    #1
          Clear insert register                01690003         ICM   #1
)         Get length of arˇ
            If zero, finished                    01710003         LA
DAT(,#5)    Point to text of string arg 3        01720003         XR
            Clear insert register        +
              Set value to stick into tˇ
                                                     01750003         IC
0(,#1)          Get character from string arg 3      01760003         ST
RTDLM(#15)      Set table char to flag as singleton  0ˇ
,TRTNDLM(#15)     Set table char to flag as singleton  01780003
,1(,#1)           Increment character pointer          01790003
4,TMODLOOP        Continue until arg 3 exhausted       01800003NOSINGˇ
0H                                                       01810003
1                                                        01820003*******
******************************************************** 01830003*
    ˇ
ument 4, the quote bag                                   * 01850003*
                                                         * 01860003*****
*******************ˇ
ACE 1                                                        01880003
    #6,#13              If arg 4 is unsupplied               01890003
    NOQUOTE             then do noˇ
CLI   ##TYPE(#6),##STRING IF ARGUMENT IS A STRING              01910003
BE    ARG4OK              THEN OK                              01920003
CLI   ##TYPE(#6),##SYMBOL IF ARGUMENT IS A SYMBOLˇ
  BNE   ERROR4              THEN                                 0194000
  L     #6,##PNAME(,#6)      TAKE THE PRINT NAME, ELSE ERROR     0195000
  DS    0H                                                      ˇ
    SPACE 1                                                        01970
****************************************************************** 01980
                                                                 * 01990

                                                                   * 020
ote that any quote character specified overrides the same          * 020
haracter havinˇ
                                                                     * 0
********************************************************************** 0
        SPACE 1              ˇ
3         XR    #14,#14             Clear insert register
3         ICM   #14,7,1(#6)         Get length of argument 4
3         BZ    NOQUOTE             If zero,ˇ
003         XR    #15,#15             Clear insert register
003         LA    #0,12               Set value to stick into table
003         IC    #15,##VECDAT(,#6)   Get quote character f rom arg 4
20003ˇÁ
quoter     02130003         STC   #0,TRTNDLM(#15)     Set table char to
quoter     02140003         C     #14,#SFW1           If string length i
           02150003 ˇ
bling        02160003         C     #14,#SFW2           If string length
2,           02170003         BNE   ERROR4A             then invalid arg
             02180003         CLM  ˇ
s character 1  02190003         BE    EMDQUOTE            then embed quo
oubling        02200003         LA    #0,4                Else set norma
value          02210003         STC   #0,TRTQUOTE(ˇ
ag as quoter     02220003         LA    #0,12               Set escape v
                 02230003         IC    #15,##VECDAT+1(,#6) Get escape c
 from arg 4      02240003         STC   #0,TRTQUOTE(#15)    Set tˇ
flag as escape     02250003         B     NOQUOTE
                   02260003EMDQUOTE DS    0H
                   02270003         LA    #0,8                Set doubli
ˇ
uote doubler         02290003NOQUOTE  DS    0H
                     02300003         SPACE 1
               ˇ
egister                02320003         STH   #14,COMSLEN         Initia
rt string length to 0  02330003         STH   #14,COMELEN         Initia
 string length to 0    0234000ˇ
                         02350003***************************************
************************ 02360003*
                       * 02370003* Process arˇ
g                        * 02380003*
                         * 02390003*************************************
************************** 02400003         SPACE 1         ˇ
                             02410003         CR    #7,#13
 is unsupplied               02420003         BE    NOCOMM
nothing.                     02430003         CLI   ##TYPE(#7),##STRING
UMENT IS A STRING              02440003         BE    ARG5OK
K                              02450003         CLI   ##TYPE(#7),##SYMBO
UMENT IS A SYMBOL              02460003         BNE   ERROR5
          ˇ
E THE PRINT NAME, ELSE ERROR     02480003ARG5OK   DS    0H
                                 02490003         ST    #7,16(,#11)
e back on stack for futur+
                       ˇ
************************************ 02520003*
                                   * 02530003* Modify translate tables f
ment 5                             * 0ˇ
                                     * 02550003* Note that we alter the
 adding 16 (X'10') to it.            * 02560003* The original function o
aracter, if any, is unchanged.       * 02570003*     ˇ
                                       * 02580003***********************
**************************************** 02590003         SPACE 1
                                         02600003         ICM   #14,ˇ
      Get length of argument 5             02610003         BZ    NOCOMM
      If zero, no comment start string     02620003         CH    #14,=H
      Cannot be longer than 256            02630003         BH    ERROR5
   ˇ
        Save comment start string length     02650003         BCTR  #14,
        Reduce for CLC                       02660003         STC   #14,
1       Store intoˇ
          Assert #14 = X'000000__'             02680003         IC    #1
AT(,#7)   Get first character of string        02690003         LA    #1
#14)      Point to position in trˇ
10'         Set up for TRT                       02710003         LA
LM(#14)     Point to position in translate table 02720003         OI
10'         Set up for TRT                      ˇ
(256),TRTCOM  Initialize comment translate table   02740003         XC
256),TRTCS    Initialize comment translate table   02750003         LA
CS(#14)       Point to position in translate table 02760003    ˇ
),4             Set up for TRT                       02770003         SP
                                                     02780003***********
**************************************************** 02790003*
                                                     * 02800003* Process
t 6, the comment end string                          * 02810003*
                                                     * 02820003*********
*************ˇ
1                                                        02840003
#7,20(,#11)         Load argument 6                      02850003
#7,#13              If arg 6ˇ
  NOCOMM              then do nothing.                     02870003
  ##TYPE(#7),##STRING IF ARGUMENT IS A STRING              02880003
  ARG6OK              THEN OK                               02890003ˇÁ

003         BNE   ERROR6              THEN
003         L     #7,##PNAME(,#7)      TAKE THE PRINT NAME, ELSE ERROR
003Aˇ
30003         ST    #7,20(,#11)         Store back on stack for future u
40003         XR    #14,#14             Clear insert register
50003         ICM  ˇ
2960003         BZ    NOCOMM              If zero, no comment end string
2970003         CH    #14,=H'256'         Cannot be longer than 256
2980003         BH    ERROR6A     ˇ
 02990003         STH   #14,COMELEN         Save comment end string leng
 03000003         BCTR  #14,0               Reduce for CLC
 03010003         STC   #14,CLCCOME+1       Storeˇ
   03020003*                                  Assert #14 = X'000000__'
   03030003         IC    #14,##VECDAT(,#7)   Get first character of str
   03040003         LA    #1,TRTCOM(#14)      Point to position ˇ
able 03050003         MVI   0(#1),4             Set up for TRT
     03060003         SPACE 1
     03070003NOCOMM   DS    0H

       03090003*********************************************************
****** 03100003*
     * 0311000ˇ
       * 03120003*
       * 03130003*******************************************************
******** 03140003         SPAˇ
           03150003         L     #7,24(,#11)         Get argument 7
           03160003         CR    #7,#13              If arg 7 is unsupp
           03170003         BE    NOTLIST   ˇ
             03180003         SPACE 1
             03190003***************************************************
************ 03200003*                                     ˇ
             * 03210003* Modify translate tables from argument 7
             * 03220003*
             * 03230003* Note that we alter the entry by adding 32 (X'20
it.            * 03240003* The original function of the character, if an
changed.       * 03250003*
               * 03260003***********************************************
*********+
       ˇ
ments of list        03290003         CR    #7,#10
                     03300003         BE    NOTLIST             When lis
l, finished          0ˇ
t                      03320003         BM    ERROR7              If sub
 atomic, error         03330003         CLI   ##TYPE(#2),##STRING IF ARG
 A STRING              03340003      ˇ
                         03350003         CLI   ##TYPE(#2),##SYMBOL IF A
IS A SYMBOL              03360003         BNE   ERROR7A             THEN
                         03370003         L     #2,#ˇ
PRINT NAME, ELSE ERROR     03380003ELEM7OK  DS    0H
                           03390003         ICM   #14,7,1(#2)         Ge
 of element                03400003         BZ    ELEM7NXT         ˇ
 skip this one               03410003         CH    #14,=H'256'
e longer than 256            03420003         BH    ERROR7B
 don't be ridiculous)        03430003         IC    #14,##VECDAT(,#2)
t ˇ
to position in translate table 03450003         OI    0(#1),X'20'
 for TRT                       03460003         LA    #1,TRTNDLM(#14)
to position in trˇ
up for TRT                       03480003ELEM7NXT DS    0H
                                 03490003         L     #7,##CDR(,#7)
CDR of list                     ˇ
ntinue                             03510003         SPACE 1
                                   03520003NOTLIST  DS    0H
                                   03530003    ˇ
                                     03540003***************************
************************************ 03550003*
                                   * 03560003* OK, all argumenˇ
et's get moving.                     * 03570003*
                                     * 03580003*************************
************************************** 03590003         SPACE 1
                                         03600003         XR    #7,#7
    CLEAR INSERT REGISTER                03610003         ST    #3,0(,#1
    STORE BACK ON STACK FOR FUTURE USE   03620003         ICM   #7,7,1(#
    GET LENGˇ
      IF ZERO-LENGTH STRING, RETURN NIL    03640003         LA    #6,##V
      Offset of substring to scan          03650003         LA    #7,##V
7)    Offset of end of stri ng              03660003ˇÁ
  #15,#7              Get offset of end of string minus    03670003
  #15,COMSLEN          length of comment start string      03680003
  #15,COMSEND         Store it                             03690003 ˇ
    #15,#7              Get offset of end of string minus    03700003
    #15,COMELEN          length of comment end string        03710003
    #15,COMEEND         Store it                             03720003
ACEˇ
************************************************************** 03740003*
                                                             * 03750003*
ize the return lisˇ
                                                               * 0377000
**************************************************************** 0378000
  SPACE 1                        ˇ
    ST    #10,40(,#11)        Initialize return list to NIL        03800
    ST    #10,44(,#11)        Initialize return list to NIL        03810
    ST    #10,48(,#11)        Initialize saved Mˇ
      SPACE 1                                                        038
P     DS    0H                  Loop to search for words, etc.       038
      SPACE 1                                                  ˇ
********************************************************************** 0
                                                                     * 0
     Scan string for next non-whitespace character.                  * 0
3*     #6 = offset of substring to scan                                *
3*     #7 = offset of end of string                                    *
3*                                                                     *
3************ˇ
003         SPACE 1
003         LR    #15,#7              Compute length to scan
003         SR    #15,#6    ˇ
50003         BNP   RETLIST              return with list
60003*
70003* In case a multi-character token was ˇ
3980003* we'd just pick it up again, this is to avoid duplicating the se
3990003*
4000003         C     #10,48(,#11)        If there's a staˇ
 04010003         BE    NOSTKDMT            then...
 04020003         L     #4,48(,#11)          load it up
 04030003         ST    #10,48(,#11)         clear stacked entry
   04040003         XR    #14,#14              clear insert register   ˇ
     04050003         ICM   #14,7,1(#4)          get length of token str
     04060003         ST    #14,LEN2NEXT         remember it for future
     04070003         B     CONSIT               and go add it to result
     0ˇ
       04090003         LR    #14,#6              Compute address in str
can    04100003         A     #14,0(,#11)          from offset
       04110003      ˇ
         04120003         XTRT  #14,TRTNDLM,LENR=#15 Scan for constituen
         04130003         CH    #2,=Y(32)           If X'20' bit is on f
e        04140003         BNL   FOUNˇ
har token  04150003         B     XTRTND(#2)          Else go depending
was found  04160003XTRTND   B     RETLIST             0, nothing found,
ith list   04170003         B     FOUNDND          ˇ
ocess it     04180003         B     MKSINGLE            8, singleton fou
 character   04190003         B     FOUNDQ              12, quote found,
oted string  04200003         B     COMMENT             16, commenˇ
ace            04210003         B     CFOUNDND            20, comment or
uent           04220003         B     CMKSINGL            24, comment or
on             04230003         B     CFOUNDQ             28, comment or
 ˇ
                 04250003FOUNDMT  DS    0H                  Found possib
character token  04260003         SPACE 1
                ˇ
hing token         04280003         ST    #14,LEN2NEXT        Set length
 past              04290003         LTR   #4,#15              If we foun
15 -> the string   04300003    ˇ
 result list         04310003         SH    #2,=Y(32)           Else tur
20' bit              04320003         BNZ   XTRTND(#2)          If nonze
eed from table       04330003         LA    #6ˇ
cess as whitespace     04340003         B     LOOP                and go
 scan again.           04350003         SPACE 1
                       04360003COMMENT  DS    0H             ˇ
ment or whitespace       04370003         SPACE 1
                         04380003         BAL   #3,TRYCOMT          See
is really a comment      04390003         LTR   #15,#15             If i
                           04400003         BNZ   LOOP                th
ck to scan again           04410003         LA    #6,1(,#6)           El
past whitespace char       04420003         B     LOOP                an
k to scan a gain.           04430003ˇÁ
                                           04440003CFOUNDND DS    0H
      Either a comment or constituent      04450003         SPACE 1
                                           04460003 ˇ
        See if this is really a comment      04470003         LTR   #15,
        If it was,                           04480003         BNZ   LOOP
         then go back to scan again          04490003         B    ˇ
          Else go to process constituent       04500003         SPACE 1
                                               04510003CMKSINGL DS    0H
          Either a comment or singleton        04520003         SPACE 1
  ˇ
MT          See if this is really a comment      04540003         LTR
            If it was,                           04550003         BNZ
             thenˇ
LE            Else go to process singleton         04570003         SPAC
                                                   04580003CFOUNDQ  DS
              Either a comment oˇ
                                                     04600003         BA
RYCOMT          See if this is really a comment      04610003         LT
#15             If it was,                     ˇ
OP                 then go back to scan again          04630003
UNDQ              Else go to process quote             04640003
                                                       0465000ˇ
0H                  #1 -> single character               04660003
1                                                        04670003
#6,#1               Get pointer to substring             04680003
  #6,0(,#11)          Convert to offset                    04690003
  #3,1                Set length of substring              04700003
  #3,LEN2NEXT         Save it                              04710003*
            ˇ
    #2,0(,#1)           Get singleton character              04730003
    #1,#2               Get singleton character              04740003
A   #2,3                Conˇ
L     #4,=A(SINGTAB)                                           04760003
ALR   #4,#2               Get address of SINGTAB entry         04770003
CLI   0(#4),##STRING      If there's alreaˇ
  BE    CONSIT              then use it.                         0479000
  SLL   #1,24               Else shift character over string     0480000
  L     #0,STRHDR           Set up string header with con+
    STM   #0,#1,0(#4)         Initialize string        ˇ
      B     CONSIT              Go add it to list                    048
      SPACE 1                                                        048
NDQ   DS    0H                  Start of a quoted string             0ˇ
        SPACE 1                                                        0
********************************************************************** 0
                                                                     * 0
     ˇ
3*     escape characters.                                              *
3*                                                                     *
3*******************ˇ
003         SPACE 1
003         LR    #6,#1               Save address of first quote
003         S     #6,0(,#11)       ˇ
50003         LA    #3,1(,#6)           Next character is first to scan
60003QLOOP    DS    0H
70003         LR    #15,#7              Compute leˇ
4980003         SR    #15,#3
4990003         BNP   ERROR4B             If not positive, missing end q
5000003         LR    #14,#3              Compute address in striˇ
 05010003         A     #14,0(,#11)          from offset
 05020003         XR    #2,#2               Clear TRT register
 05030003         XTRT  #14,TRTQUOTE,LENR=#15 Scan quoted string
ˇ
   05050003XTRTQ    B     ERROR4B             0, nada found, missing quo
   05060003         B     QEND                4, normal quote found, end
   05070003    ˇ
t    05080003         B     QESCAPE             12, escape char found, p
t    05090003         SPACE 1
     05100003QEND     DS    0Hˇ
string 05110003         SPACE 1
       05120003         LA    #3,1(,#1)           Get address of char fo
quote  05130003         S     #3,0(,#11)     ˇ
         05140003         B     QWORDEND            Go to process comple
d string 05150003         SPACE 1
         05160003QQUOTE   DS    0H                  Found quˇ
uble       05170003         SPACE 1
           05180003         LA    #3,1(,#1)           Get address of cha
ing quote  05190003         S     #3,0(,#11)          Convert to offset
             05200003ˇÁ
ngth remaining to scan     05210003         SR    #15,#3
                           05220003         BNP   QWORDEND            If
his is an ending quote     05230003 ˇ
 is not doubled              05240003         BNE   QWORDEND
s is an ending quote         05250003         LA    #3,1(,#3)
p past second quote          05260003         B    ˇ
ntinue scanning                05270003         SPACE 1
                               05280003QESCAPE  DS    0H
escape character.              05290003         SPACE 1           ˇ
                                 05300003         LA    #3,1(,#1)
address of char following escape 05310003         S     #3,0(,#11)
ert to offset                    05320003         LR    #15,#7
uˇ
                                   05340003         BNP   ERROR4C
 zero, dangling escape character   05350003         LA    #3,1(,#3)
se bump past chaˇ
and continue scanning                05370003         SPACE 1
                                     05380003QWORDEND DS    0H
                               ˇ
                                       05400003         ST    #6,WORDPTR
  Store offset of start of "word"      05410003         B     ENDWORDQ
  Go to process complete quoted string 0542000ˇ
                                         05430003FOUNDND  DS    0H
    #1 -> constituent character          05440003         SPACE 1
                                         05450003************ˇ
****************************************** 05460003*
                                         * 05470003*     Scan string for
elimiter following constituents found,   * 05480003*     or else end of
 delimits this word.                       * 05490003*     The substring
nstituent to here is used to construct a   * 05500003*     new string to
d at the end of the list being built.      * 05510003*
           ˇ
********************************************** 05530003         SPACE 1
                                               05540003         LR    #6
          Save address of ˇ
1)          Convert to offset within string      05560003         ST
TR          Save it                              05570003         LA
)           Bump to next character       +
                                       ˇ
7               Preset end-of-word to end-of-string  05600003         A
(,#11)           from offset                         05610003         LR
#7              Compute length remaining to scan     0ˇ
5,#6              If zero, end of word                 05630003
DWORD                                                  05640003
4,#6              Compute address in string to scan    05650003      ˇ
#14,0(,#11)          from offset                         05660003
#2,#2               Preset anything-found TRT register   05670003
#14,TRTDLM,LENR=#15 Scan for end of word                 05680003
#2,=ˇ
  DTRYMT               constituent, then check it.         05700003
  #2,=Y(32)           If multichar-token-or-constituent    05710003
  DTRYMT           ˇ
    0H                                                       05730003
    #2,=Y(16)           If comment-or-constituent,           05740003
    DTRYCOM              then checˇ
B     ENDWORD             Else always end of word.             05760003
SPACE 1                                                        05770003D
DS    0H                  Possible comment       ˇ
  BAL   #3,TRYCOMT          See if this is a comment             0579000
  LTR   #15,#15              Get address of start of comment     0580000
  BNZ   ENDWORDC             If it was a comment, it ends word  ˇ
    LA    #6,1(,#6)           Else bump past constituent char      05820
    B     WORDLOOP            and continue scan.                   05830
    SPACE 1                                                        05840

      SPACE 1                                                        058
                                #6 = offset of end of comment        058
      S     #6ˇ
        ST    #6,LEN2NEXT         Save length to get to next word      0
        LR    #3,#15              Get address of start of comment      0
        S     #3,0(,#11)     ˇ
3         L     #6,WORDPTR          Get offset of start of word
3         SR    #3,#6               Compute length of word substring
3         B     MAKEIT                      ˇ
003         SPACE 1
003DTRYMT   DS    0H                  Possible multi-character token
003         BAL   #3,TRYMT            See if this is a toke n
70003ˇÁ
g          05980003         BNZ   ENDWORDM            If it was a token,
 word      05990003         SH    #2,=Y(32)           Else turn off toke
n TRT reg  06000003 ˇ
again        06010003         LA    #6,1(,#6)           Else bump past c
nt char      06020003         B     WORDLOOP            and continue sca
             06030003         SPACEˇ
               06040003ENDWORDM DS    0H                  Word ended by
ar token       06050003         SPACE 1
               06060003         ST    #15,48(,#11)ˇ
ring on stack    06070003         LR    #3,#6               Get offset o
of new token     06080003         L     #6,WORDPTR          Get offset o
of old word      06090003         SR    #3,#6               Compuˇ
word substring     06100003         ST    #3,LEN2NEXT         Save it
                   06110003         B     MAKEIT              Go to make
d                  06120003         SPACE 1
ˇ
d or substring       06140003         SPACE 1
                     06150003         LR    #3,#1               Get poin
 end of word   ˇ
set                    06170003ENDWORDQ DS    0H                  #3 = o
 end of word           06180003         L     #6,WORDPTR          Get of
start of word          0619000ˇ
th of word substring     06200003         ST    #3,LEN2NEXT         Save
                         06210003MAKEIT   DS    0H
                         06220003         SPAˇ
                           06230003*************************************
************************** 06240003*
                         * 06250003* Make a string out of thˇ
canned.                    * 06260003*
                           * 06270003* #1 -> position past last constitu
acter in word just scanned * 06280003* #2 tells what was found
                             * 06290003* #3 is offset of where we scanne
                             * 06300003* #6 is offset of start of word w
ring                         * 06310003*
          ˇ
******************************** 06330003         SPACE 1
                                 06340003         LR    #2,#3
length into reg for ZILVS+
TRY CODE 0 = ALLOCATE Nˇ
GET ADDRESS OF ZILVSS                06370003         LA    #0,52(,#11)
SET CURRENT STACK POINTER FOR GC     06380003         BALR  #14,#15
CALL ZILVSS TO CREATE A STRING       0ˇ
  IF STRING BUILD FAILED               06400003         BZ    ERRORG
  THEN ERROR                           06410003         LR    #0,#6
  Get offset of substring to build     06420003      ˇ
    Convert to address in string arg 1   06430003         LA    #14,##VE
)   Point to where to move string text   06440003         LR    #1,#3
    Get length of string text to move    06450003         LR    #15,ˇ
                                           06460003         MVCL  #14,#0
      Move text from substring to new      06470003CONSIT   DS    0H
      Add new string to list               06480003*
   ˇ
        #4 = address of new string           06500003*
        #6 = offset of new string in arg 1   06510003         LR    #1,#
        Arg 1 to Cˇ
          Arg 2 to CONS= NIL                   06530003         L     #1
S         Get address of ZILCONS               06540003         LA    #0
)         SET CURRENT STACK POINTˇ
            Call ZILCONS to (cons string NIL)    06560003         C
#11)        If no list so far yet,               06570003         BNE
             then...                            ˇ
(,#11)         set the list to this                06590003         B
T                                                  06600003OLDLIST  DS
              else...                              06610003    ˇ
44(,#11)         get address of last-cons-to-bash    06620003         ST
##CDR(,#14)      bash into list                      06630003AFTLIST  DS
                                                     06640003         ST
5,44(,#11)        Set cons-to-bash to latest cons      06650003
,LEN2NEXT         Reset string scanning offset         06660003
OP                Continue looking for words           06670003
             ˇ
0H                  Null string, or only whitespace      06690003
#15,#10             Return a null list                   06700003
RETURN                      ˇ
  0H                                                       06720003
  #15,40(,#11)        Return the list built                06730003RETUR
  0H                                                        06740003ˇÁ

003         #ZRET ,                   RESTORE REGISTERS AND RETURN
003         SPACE 1
003Tˇ
80003         SPACE 1
90003         LR    #6,#1               Get pointer to substring
00003         S    ˇ
6810003         XR    #15,#15             Preset return value to "NO"
6820003         C     #6,COMSEND          If past place where there can
6830003         BHR   #3          ˇ
 06840003         L     #14,16(,#11)        Get address of comment start
 06850003*
 06860003* Note: The CLC length field was filled ˇ
   06870003*
   06880003CLCCOMS  CLC   0(*-*,#1),##VECDAT(#14) If this isn't comment
   06890003         BNER  #3                   then return "NO" ˇ
     06900003         ST    #1,CCSADDR          Else save address of com
rt   06910003         AH    #6,COMSLEN          Bump past end of comment
     06920003TRYLOOP  DS    0H                  Else...

an     06940003         SR    #15,#6
       06950003         BNP   TRYCOMTE            If zero, hit end of st
       0696000ˇ
 scan    06970003         A     #14,0(,#11)          from offset
         06980003         XTRT  #14,TRTCOM,LENR=#15 Scan for comment end
         06990003         BZ ˇ
e it       07000003         LR    #6,#1               Get pointer to sub
           07010003         S     #6,0(,#11)          Convert to offset
           07020003         C     #6,COMEENDˇ
e can be     07030003         BH    TRYCOMTE             a comment ender
 of string   07040003         L     #14,20(,#11)        Get address of c
tart string  07050003*                                     ˇ
               07060003* Note: The CLC length field was filled in when a
 processed.    07070003*
               07080003CLCCOME  CLC   0(*-*,#1),##VECDAT(#14) If this is
mment start      07090003         BNE   TRYCONT              then keep s
                 07100003         AH    #6,COMELEN          Bump past co
d string         07110003         L     #15,CCSADDR         Indicate end
ent found+
       ˇ
dn't match           07140003         LA    #6,1(,#6)           Bump to
racter               07150003         B     TRYLOOP             Continue
g                    0ˇ
ing                    07170003         LR    #6,#7               Set of
t string end           07180003         L     #15,CCSADDR         Indica
nt ended at string end 07190003      ˇ
                         07200003         SPACE 1
                         07210003TRYMT    DS    0H                  Subr
o find multi-char token  07220003         SPACE 1   ˇ
                           07230003         ST    #3,SAVEMTR
                           07240003         LR    #6,#1               Ge
s of character found       07250003         S     #6,0(,#11)       ˇ
to offset in string          07260003         LR    #0,#7
th of remainder of string    07270003         SR    #0,#6
                             07280003         XR    #14,#14
giˇ
dress of token list            07300003MTLOOP   DS    0H
                               07310003         CR    #3,#10
ull list,        ˇ
atching token                    07330003         L     #15,##CAR(,#3)
element of list                  07340003         CLI   ##TYPE(#15),##SY
it's actually a symbol          ˇ
en                                 07360003         L     #15,##PNAME(,#
et its print name                  07370003MTNOTSYM DS    0H
                                   07380003    ˇ
Get string length                    07390003         BZ    MTSKIP
If zero, skip this one               07400003         CR    #0,#14
Compare remaining length             07410003         BL    MTˇ
  If less than string length, skip     07420003         BCTR  #14,0
  Reduce string length for execute     07430003         EX    #14,CLCMT
  Compare substring to token           07440003         BE    MTFOUND
    If this is it, go process it         07450003MTSKIP   DS    0H
    Else token not found yet             07460003         L     #3,##CDR
    Get CDR of list                      07470003         B     MTLOOP
    and contˇ
      We think we found a token, but...    07490003*
                                           07500003* Check that the comm
t string isn't embedded in  the substring   07510003ˇÁ
                                                           07520003* #7
ing length in substring                                    07530003* #14
 length - 1                                                07540003*ˇ
 length of defined comment start string if any               07550003* #
e string that defines the token                              07560003*
                                                             07570003
   ˇ
LTR   #0,#4               If zero                              07590003
BZ    MTREALLY             then no comment string, this is OK  07600003
AR    #0,#14      ˇ
  CR    #7,#0               If remaining length too short to     0762000
  BL    MTREALLY             be a comment, then this MT is OK    0763000
  STM   #14,#2,SAVEEM       Save ˇ
    LA    #0,1(#14,#1)        Get address of end of MT substr      07650
    BCTR  #4,0                Reduce CSS length for future EX's    07660
OP  DS    0H                                    ˇ
      LR    #14,#0               Get length to scan                  076
      SR    #14,#1               If zero, no more to scan,           076
      BNP   MTLMREAL              this MT must be OK           ˇ
        BCTR  #14,0                Adjust for execute                  0
        EX    #14,MTTRT            See if comment may begin here       0
        BZ    MTLMREAL             If not, that's all                  0
3         L     #2,16(,#11)          Get address of comment string
3         EX    #4,CLCCOM            If it matches
3         BE    MTLMSKIP             then this isn't one...
3         LA ˇ
003         B     MTXLOOP              then keep trying
003MTLMSKIP DS    0H                  Not the one because we found comme
003         LM    #14,#2,SAVˇ
00003         B     MTSKIP               and try the next token in list
10003MTLMREAL DS    0H                  OK, we really found the token
20003         LM    #14,#2,SAVEEM       (reˇ
7830003MTREALLY DS    0H                  OK, we really found the token
7840003         LA    #14,1(,#14)         Restore string token length
7850003         L     #3,SAVEMTR                          ˇ
 07860003         BR    #3                  Return to caller
 07870003NOTMT    DS    0H                  No matching token found
 07880003         XR    #15,#15             Indicate nothing found
   07890003         L     #3,SAVEMTR                                   ˇ
     07900003         BR    #3                  Return to caller
     07910003         SPACE 1
     07920003CLCMT    CLC   0(*-*,#1),##VECDAT(#15) Executed: compare st
en   0ˇ
rt     07940003CLCCOM   CLC   0(*-*,#1),##VECDAT(#2) Executed: compare s
mment  07950003         SPACE 1
       07960003WORDPTˇ
ned      07970003LEN2NEXT DS    F                   Offset of next place
         07980003SAVEMTR  DS    A                   Return address
         07990003SAVEEM   DS    5A  ˇ
           08000003CCSADDR  DS    F                   Address of start o
t string   08010003COMSEND  DS    F                   Offset of last pla
e c.s.s.   08020003COMEEND  DS    F                ˇ
see c.e.s.   08030003COMSLEN  DS    H                   Length of commen
string       08040003COMELEN  DS    H                   Length of commen
ring         08050003         SPACE 1                             ˇ
               08060003STRHDR   DS    0F
               08070003         DC    YL1(##STRING),AL3(1) Header for si
racter strings 08080003         SPACE 1
 ˇ
                 08100003         SPACE 1
                 08110003TRTDLM   DC    256X'00'            Table to sca
limiters        ˇ
                   08130003TRTNDLM  DC    256X'00'            Table to s
non-delimiters     08140003         SPACE 1
                   08150003TRTQˇ
oted strings         08160003         SPACE 1
                     08170003TRTCOM   DC    256X'00'            Table to
mment strings        08180003         SPACE 1 ˇ
                       08190003TRTCS    DC    256X'00'            Table
comment strings        08200003         SPACE 1
                       08210003ERROR1   LA    #2,1           ˇ
                         08220003         LR    #7,#3
                         08230003         B     ERROR
                         08240003ERROR2   LA    #2,2
                           08250003         LR    #7,#4
                           08260003         B     ERROR
                           08270003ERROR3   LA    #2,3
                            08280003ˇÁ
                                           08290003         B     ERROR
                                           08300003ERROR4   LA    #2,4
                                           08310003 ˇ
                                             08320003         B     ERRO
                                             08330003ERROR5   LA    #2,5
                                             08340003         B    ˇ
                                               08350003ERROR6   LA    #2
                                               08360003         B     ER
                                               08370003ERROR    #ERR  'A
',ˇ
t 7 to STRING-SCAN not a proper list - ',       X08390003
                                                 08400003ERROR4A  #ERR
t 4 to STRING-SCAˇ
                                                   08420003ERROR4B  #ERR
ng end quote found by STRING-SCAN while scanning -X08430003
11)                             ˇ
gling escape found by STRING-SCAN while scanning - 'X08450003
11)                                                  08460003ERROR5A  #E
ument 5 to STRING-SCAN longer than 256 characteˇ
(#7)                                                   08480003ERROR6A
rgument 6 to STRING-SCAN longer than 256 characters - X08490003
(#7)                                                   0850000ˇ
'Non-string element found in argument 7 to STRING-SCAN -X08510003
 ',(#2)                                                  08520003ERROR7B
'Argument 7 to STRING-SCAN contains an element longer thX08530003
  an 256 characters - ',(#2)                               08540003ERROR
  PREFIX=NO,          NOT ENUF ROOM                       X08550003
  'ZIL4010 STRING-SCAN: Not enough vector/string space to X08560003
  build striˇ
ACE 1                                                        08580003SIN
    256D'0'             Single-character string table        08590003
D                          Œ                                   08600003

         00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002*
           * 00017002* This is the Common Lisp STRING function (CLtL p.
           * 00018002*                          ˇ
             * 00019002* (string x)
             * 00020002*
             * 00030002* If x is a string, it is returned.     ˇ
               * 00040002* If x is a symbol, its print name is returned.
               * 00050002* If x is a string character (a fixnum between
5 in ZIL),     * 00060002* then a string containing that one character i
rned.            * 00070002* In any other situation, an error is signall
                 * 00080002*
                 * 00090002*********************************************
*************ˇ
                     00110002STRING   #ZBEG MINARGS=1,MAXARGS=1,NAME='ST
                     00120002         SPACE 1
                     0013000ˇ
                       00140002         #ZSAV ,
                       00150002         SPACE 1
                       00160002         L  ˇ
                         00170002         SPACE 1
                         00180002         CLI   ##TYPE(#15),##STRING  If
 a string                00190002         BE    RETURN    ˇ
t return it                00200002         CLI   ##TYPE(#15),##SYMBOL
is a symbol                00210002         BE    SYMBOL
cess symbol                00220002         CLI   ##TYPE(#15),##FIXNUM
1 is a fixnum                00230002         BNE   ERROR1
                             00240002         L     #5,##CDR(,#15)
meric value                  00250002         CL    #5,#SFW255
 1-byte ˇ
 error                         00270002DUMPST   DS    0H
 dump into 1-character string  00280002         LA    #2,1
ngth of string to creat+
address of character ˇ
try code 0 = allocate new space    00310002         L     #15,ZLCVSS
t address of ZILVSS                00320002         LA    #0,16(,#11)
t current stack pointer            0ˇ
Call ZILVSS to build the string      00340002         LTR   #4,#4
If string build failed               00350002         BZ    ERROR2
then error                           00360002      ˇ
  Store character into string          00370002         B     RETURN
                                       00380002         SPACE 1
                                       00390002SYMBOL   DS    0H  ˇ
    Here if arg1 is a symbol             00400002         L     #15,##PN
)   Get the print name                   00410002*******  B     RETURN
    and return that                      00420002         SPACE 1
 ˇ
                                           00440002         SPACE 1
                                           00450002         #ZRET ,
                ˇ
                                             00470002ERROR1   LR    #2,#
                                             00480002         #ERR  'Arg
 STRING not a string, symbol orˇ
                                               00500002         SPACE 1
                                               00510002ERROR2   #ERR  'Z
TRING: Not enough vector/string space to buildˇ
',PREFIX=NO                                      00530002         SPACE
                                                 00540002         LTORG
                                                 00550002    í      SPAC
                                                   00560002         END
                                                   00570002{
√
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002         SPACE 1
   00017002STRINGP  #ZBEG MINARGS=1,MAXARGS=1,NAME='STRINGP'
   00018002         SPACE 1           ˇ
     00019002         USING STRINGP,#15
     00020002         SPACE 1
     00030002         L     #2,0(,#1)                ˇ
       00040002         CLI   ##TYPE(#2),##STRING
       00050002         BNE   ZXSTRN
       00060002         DROP  #15                                   ˇ
         00070002         LR    #15,#8
         00080002         BR    #14
         00090002ZXSTRN   LR    #15,#10
   º       00100002         BR    #14
           00110002         END
           00120002
ZIL 1.3 SUBROUTINE'                  00010000***************************
************************************ 00011002*
                                   * 00012002*ˇ
arles Stark Draper Laboratory Inc.   * 00013002*                     All
reserved.                            * 00014002*
                                     * 00015002**************ˇ
**************************************** 00016002         SPACE 1
                                         00017002STRUCTP  #ZBEG MINARGS=
S=1,NAME='STRUCTP'                       00018002         SPACE 1
                                           00019002         USING STRUCT
                                           00020002         SPACE 1
                                           00030002         L     #2,0(,
           ˇ
#STRUCT                                      00050002         BNE   ZXNS
                                             00060002         DROP  #15
                          ˇ
                                               00080002         BR    #1
                                               00090002ZXNSTR   LR    #1
                                         º       00100002         BR
                                                 00110002         END
                                                 00120002

000*********************************************************************
002*
002*ˇ
13002*                     All rights reserved.
14002*
15002**************ˇ
0016002         SPACE 1
0017002SUBRP    #ZBEG MINARGS=1,MAXARGS=1,NAME='SUBRP'
0018002         SPACE 1           ˇ
 00019002         USING SUBRP,#15
 00020002         SPACE 1
 00030002         L     #2,0(,#1)                ˇ
   00040002         CLI   ##TYPE(#2),##SUBR
   00050002         BNE   ZXSUBRN
   00060002         DROP  #15                                   ˇ
     00070002         LR    #15,#8
     00080002         BR    #14
     00090002ZXSUBRN  LR    #15,#10
       00100002         BR    #14
       00110002         END
       00120002
.3 SUBROUTINE'                   00010000*******************************
******************************** 00011002*
                               * 00012002*ˇ
s Stark Draper Laboratory Inc.   * 00013002*                     All rig
rved.                            * 00014002*
                                 * 00015002**************ˇ
************************************ 00016002*
                                   * 00017002* (SUBSTR ARG1 ARG2 &OPTION
...                                * 00018002*
                                     * 00019002*  ARG1 IS A STRING
                                     * 00020002*  ARG2 IS A FIXNUM OR NI
E 1-BASED STARTING INDEX             * 00030002*  ARG3 IS A FIXNUM OR NI
E LENGTˇ
                                       * 00050002* IF ARG2 IS NEGATIVE,
 -ARG2 FROM THE END OF THE STRING.     * 00060002*
                      ˇ
LT IN A NULL STRING.                     * 00080002*
                                         * 00090002* ARG2 MAY BE NIL (RE
IN A NULL STRING).  THIS FACILITATES ˇ
UNCTION WITH POSITIONING STRING FUNCTIONS  * 00110002* (LIKE INDEX) WHIC
TURN EITHER A FIXNUM OR NIL.               * 00120002*
                                           * 0013000ˇ
********************************************** 00140002SUBSTR   #ZBEG MI
MAXARGS=3,NAME='STRING-SUBSTR'                 00150002         #ZPDS 24
          DEFINE STACK SIZE                    00160002         #ZSˇ
            SAVE REGISTERS                       00170002         SPACE
                                                 00180002         LM
#11)        LOAD ARGS                            00190002         CLI
5)ˇ
              THEN OK                              00210002         CLI
(#5),##SYMBOL IF ARGUMENT IS A SYMBOL              00220002         BNE
              THEˇ
#PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR     00240002ARG1OK   DS
                                                     00250002         XR
4                               ˇ
,0(,#11)          STORE BACK ON STACK FOR LATER USE    00270002
,#13              IF ARG 2 IS NOT SUPPLIED             00280002
TNULL             THEN IT'S OK, RETURN NULL STR+
#6,#10              IF ARG 2 IS NIL          ˇ
  RETNULL             THEN IT'S OK, RETURN NULL STRING     00310002
  ##TYPE(#6),##FIXNUM IF ARG 2 IS NOT A FIXNUM             00320002
  ERROR2              THEN ERROR                           0ˇ
    #7,#13              IF ARG 3 IS NOT SUPPLIED             00340002
    ARGSOK              THEN IT'S OK (OMITTED)               00350002
    #7,#10              IF ARG 3 IS NIL                      00360002
BE    ARGSOK              THEN IT'S OK (OMITTED)               00370002
CLI   ##TYPE(#7),##FIXNUM IF ARG 3 IS NOT A FIXNUM             00380002
BNE   ERROR3              THEN ERROR                           00390002A
DS    0H  ˇ
  ICM   #4,7,1(#5)          GET LENGTH OF STRING                 0041000
  ICM   #6,15,##CDR(#6)     GET FIXNUM VALUE                     0042000
  BZ    RETNULL          ˇ
    BP    NORMSUB             IF POSITIVE, NORMAL SUBSTRING        00440
    AR    #6,#4               IF NEGATIVE, TAKE LENGTH MINUS ABS   00450
    BM    RETNULL             (IF ABS GTˇ
      LA    #6,1(,#6)           AND ADJUST TO MAKE IT CORRECT...     004
MSUB  DS    0H                                                       004
      CR    #6,#4               IF VALUE GT STRING LENGˇ
        BH    RETNULL             THEN RETURN NULL STRING              0
        BCTR  #6,0                CONVERT FROM 1-BASED TO 0-BASED      0
        LR    #3,#4               GET LENGTH OF STRING                ˇ
2         SR    #3,#6               MINUS STARTING = MAX SUBSTR LENGTH
2         CR    #7,#13              IF ARG 3 IS NOT SUPPLIED
2         BNE   ARG3SUP             THEN
2    ˇ
002         B     GOTLEN3             ELSE
002ARG3SUP  CR    #7,#10              IF ARG 3 IS NIL
002         BNE   ARˇ
90002         LR    #7,#3                TAKE MAX SUBSTR LENGTH
00002         B     GOTLEN3
10002ARG3NNIL DS    0H             ˇ
0620002         ICM   #7,15,##CDR(#7)     GET FIXNUM VALUE
0630002         BM    RETNULL             IF NEGATIVE, RETURN NULL STRIN
0640002GOTLEN3  DS    0H                  NOW #7 =ˇ
 00650002         CR    #7,#3               IF REQUESTED LENGTH EXCEEDS
 00660002         BNH   *+6                  THEN...
 00670002         LR    #7,#3                 SET IT TO MAX      
   00680002ˇÁ
ZILVSS           00690002         XR    #1,#1               ENTRY CODE 0
ATE NEW SPACE    00700002         L     #15,ZLCVSS          GET ADDRESS
S                00710002 ˇ
POINTER FOR GC     00720002         #BASR #14,#15             CALL ZILVS
ATE A STRING       00730002         LTR   #4,#15              IF STRING
ILED               00740002         BZ   ˇ
                     00750002         L     #1,0(,#11)          GET POIN
RIGINAL STRING       00760002         LA    #0,##VECDAT(#6,#1)  POINT TO
TEXT + START OFFSET  00770002         LA    #14,##VECDATˇ
 TO MOVE STRING TEXT   00780002         LR    #1,#7               GET LE
STRING TEXT TO MOVE    00790002         LR    #15,#7              DESTIN
NGTH SAME              00800002         MVCL  #14,#0              MOVE ˇ
OM OLD STRING TO NEW     00810002         LR    #15,#4              POIN
LY BUILT STRING          00820002         B     RETURN              RETU
TOM IN #15               00830002         SPACE 1
      ˇ
OUT OF BOUNDS              00850002         LA    #15,NULLSTR         RE
L STRING                   00860002RETURN   DS    0H
                     ˇ
                             00880002         #ZRET ,
REGISTERS AND RETURN         00890002         SPACE 1
                             0090000ˇ
NULL STRING TO FULLWORD        00910002         DC    YL1(##STRING),AL3(
0'  STRING ""                  00920002         SPACE 1
                               00930002ERROR1   #ERˇ
BSTR not a string - ',0(#11)     00940002ERROR2   #ERR  'Argument 2 to S
BSTR not a fixnum - ',4(#11)     00950002ERROR3   #ERR  'Argument 3 to S
BSTR not a fixnum - ',8(#11)     00960002ERROR4   #ERR  'ZIL4010 Sˇ
: Not enough vector/string space tX00970002               o build string
X=NO                               00980002         SPACE 1
                                   00990002         LTORG
 h                                   01000002         END
                                     01010002
TITLE 'SUB1 - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
1 TAKES ONE ARGUMENT - A NUMERIC ATOM                            * 00018
                      ˇ
******************************************************************** 000
      SPACE                                                          000
1     #ZBEG MINARGS=1,MAXARGS=1,NAME=ˇ
        SPACE                                                          0
        #ZPDS 16                  DEFINE STACK SIZE                    0
        #ZSAV ,                   SAVE REGISTERS    ˇ
2         SPACE
2         L     #1,0(,#11)          LOAD FIRST (AND ONLY) ARGUMENT
2         CLI   ##TYPE(#1),##FIXNUM SEE IF FIXNUM                  ˇ
002         BNE   NOTFIX              IF NOT FIXNUM, GO SOMEWHERE ELSE
002         L     #2,##CDR(,#1)       Get value of fixnum
002         CL    #2,ZLCSFTHI         If within small fixnum table range
00ˇ
40002         S     #2,#SFW1            ELSE SUBTRACT 1 FROM FIXNUM
50002         BO    OVERFLOW            IF OVERFLOW, MUST BE -2**31
60002         LA ˇ
0170002         #MKAT FIXED               MAKE A NEW FIXNUM
0180002         B     RETURN              AND RETURN WITH IT
0190002         SPACE 1         ˇ
 00200002SMALLFIX DS    0H
 00210002         SPACE 1
 00220002**************************************ˇ
** 00230002*
 * 00240002* Fixnum between lowest and highest small fixnum from table
 * 00250002* (inclusive).  We load the address of the next lowˇ
   * 00260002* from the table.
   * 00270002*
   * 00280002* Note that if the value is zero, bumping back in the table
get  * 00290002* us -1, which was put there for this purpose (among othe
ven    * 00300002* though -1 is strictly not part of the small fixnum ta
       * 00310002*
       * 00320002*******************************************************
******** 0ˇ
           00340002         SLA   #2,3                Multiply fixval by
n index    00350002         LA    #15,#SFT-8(#2)      Get address of (fi
h fixnum   00360002******ˇ
ith it       00370002         SPACE 1
             00380002RETURN   DS    0H                  RETURN WITH NEW
             00390002         SPACE 1   ˇ
               00400002         #ZRET ,                   RESTORE REGIST
RETURN         00410002         SPACE 1
               00420002NOTFIX   DS    0H               ˇ
BE...            00430002         CLI   ##TYPE(#1),##SFLOAT  SINGLE-FLOA
                 00440002         BE    SUB1SFLO              OR
                 00450002         CLI   ##TYPE(#1),##DFLOAT  DOUBLE-FLˇ
                   00460002         BE    SUB1DFLO              OR
                   00470002         CLI   ##TYPE(#1),##BIGNUM    BIGNUM
                   00480002         BE    SUB1BIG                 ELSE
     ˇ
                     00500002         SPACE
                     00510002SUB1SFLO DS    0H                  SINGLE F
                    ˇ
                       00530002         LE    #F0,##CDR(,#1)      LOAD F
UE                     00540002         SE    #F0,=E'1'           SUBTRA
                       00550002    ˇ
N ATOM-MAKING REGISTER   00560002         L     #2,ZLCWORK
                         00570002         LA    #0,16(,#11)         PASS
 STACK LOCATION TO CONS  00580002         #MKAT FLˇ
NUM                        00590002         B     RETURN              AN
 WITH IT                   00600002         SPACE
                           00610002SUB1DFLO DS    0H             ˇ
LOAT                         00620002         SPACE
                             00630002         LD    #F0,8(,#1)
AT VALUE                     00640002         SD    #F0,=D'1'
ˇ
DRESS OF ZILMDF                00660002         LA    #0,16(,#11)
URRENT STACK LOCATION TO CONS  00670002         #BASR #14,#15
ILMDF TO MAKE A  DOUBLE FLOAT   00680002ˇÁ
          AND RETURN WITH IT                   00690002         SPACE
                                               00700002OVERFLOW DS    0H
          FIXED-POINT OVERFLOW OCCURRED        00710002 ˇ
                                                 00720002         LA
1           GET MOST NEGATIVE FIXNUM MINUS 1     00730002         B
            AND RETURN WITH IT                   00740002         SPACEˇ
                                                   00750002SUB1BIG  DS
              ARG IS A BIGNUM                      00760002         SPAC
                                                   00770002         LA
TM1   ˇ
@ZILADD         GET ADDRESS OF ZILADD                00790002         LR
11              RESTORE STACK POINTER                00800002         LM
#12,4(#1)       RESTOˇ
4,12(,#1)                                              00820002
,4(,#1)           SET ARG 2 TO ZILADD                  00830002
5                 GO TO ZILADD TO ADˇ
                                                         00850002
0A                  ALIGN BIGNUM TO FULLWORD             00860002MNFM1
YL1(##BIGNUM),AL3(8),F'-2147483647,1' BIGNUM -21474ˇ
E 1                                                        00880002ZILSU
  0A                                                       00890002@ZILA
  V(ZILADD)           ADDRESS OF SUBROUTINE                0090000ˇ
    CL8'ZILADD'                                              00910002ZIL
U   *                                                        00920002
ACE 1                                                        00930002ERR
 ˇ
#ERR  'Argument to SUB1 not a number - ',0(#11)                00950002
SPACE 1                                                        00960002
LTORG           n                                                0097000
  END                                                            0098000

           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002         SPACE 1
               00017002SYMBOLP  #ZBEG MINARGS=1,MAXARGS=1,NAME='SYMBOLP'
               00018002         SPACE 1           ˇ
                 00019002         USING SYMBOLP,#15
                 00020002         SPACE 1
                 00030002         L     #2,0(,#1)                ˇ
                   00040002         CLI   ##TYPE(#2),##SYMBOL
                   00050002         BNE   ZXSYMN
                   00060002         DROP  #15
ˇ
                     00080002         BR    #14
                     00090002ZXSYMN   LR    #15,#10
               º       00100002         BR    #14
                       00110002         END
                       00120002
BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002*
                                                   * 00017002* THIS FUNC
S TABS MODE ON OR OFF FOR AN OUTPUT FILE.          * 00018002* THIS CONT
THER TABˇ
R A FILE OR OUTPUT AS HEX CHARACTERS.                * 00020002*
                                                     * 00030002*********
***********************ˇ
                                                       * 00050002* TABS
O ARGUMENTS:    ARGUMENT 1 = T OR NIL                  * 00060002*
                ARGUMENT 2 = OUTPUT FIˇ
                                                         * 00080002*****
********************************************************** 00090002
E 1                                                  ˇ
BEG MINARGS=1,MAXARGS=2,NAME='TABS'                          00110002
PDS 20                  DEFINE STACK SIZE                    00120002
SAV ,                   SAVE REGISTERS                       0013000ˇ
SPACE 1                                                        00140002
#OFIL 2                   ARG 2 = OUTPUT FILE SPEC             00150002
SPACE 1                                                        00160002
L  ˇ
  CR    #15,#10             IF ARG 1 IS NIL                      0018000
  BNE   NOTNIL              THEN                                 0019000
  NI    ZLFFLAG2,2ˇ
    B     AFTNIL              ELSE                                 00210
L   OI    ZLFFLAG2,ZLFTABS     SET TABS MODE ON                    00220
L   DS    0H                     ˇ
      SPACE 1                                                        002
      #ZRET ,                   RESTORE REGISTERS AND RETURN         002
      SPACE 1                                   ˇ
        LTORG                                                          0
        SPACE 1                                                        0
        END                                                    ª
2
                   00010000*********************************************
****************** 00011003*
                 * 00012003*ˇ
 Laboratory Inc.   * 00013003*                     All rights reserved.
                   * 00014003*
                   * 00015003**************ˇ
********************** 00016003* THIS IS A KLUDGEY INTERFACE TO THE ZILT
TINE, PENDING        * 00017003* DIRECT SUPPORT IN THE COMPILER FOR THRO
                     * 00018003***************************ˇ
************************ 00019003*
                         00020003***************************************
************************ 00030003*
                         * 00040003* This routine is actually obsolete,
 not belong in ZIL,      * 00050003* since THROW is a special form.  How
 is kept around for      * 00060003* compatibility - more accurately, to
the reliˇ
 function.  THROW was      * 00080003* changed to a special form because
iple values.               * 00090003*
                       ˇ
****************************** 00110003*
                               00120003THROW    #ZBEG MINARGS=2,MAXARGS=
THROW'                         0013000ˇ
 ARGUMENTS FROM STACK.           00140003         L     #15,ZLCTHROW
ADDRESS OF ZILTHROW ROUTINE.     00150003         BR    #15
O ZILTHROW.                      00160003         SPAs CE
                                   00170003         END
                                   00180003
TLE 'TOSTRING - ZIL 1.3 SUBROUTINE'                          00010000***
************************************************************ 00011002*
                                                           * 00012002*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
             All rights reserved.                            * 00014002*
                                                             * 00015002*
*****ˇ
                                                               * 0001700
SUBROUTINE MAKES A STRING FROM ANY (VALID) LISP OBJECT.        * 0001800
                    ˇ
TAKES ONE REQUIRED ARGUMENT AND ONE OPTIONAL ARGUMENT.           * 00020
                                                                 * 00030
1: THE OBJECT TO MAKE A STRING OUT ˇ
RG2: NIL = DON'T SLASHIFY, T = SLASHIFY.                           * 000
                                                                   * 000
OTE: IF THE ARGUMENT IS ALREADY A STRING IT JUST Rˇ
       SAME STRING.  THIS IS MAKE-STRING, NOT COPY-STRING.           * 0
       IF THE ARGUMENT IS A SYMBOL, THE PRINT NAME IS RETURNED.      * 0
                                                                 ˇ
2***********************************************************************
2*                                                                     *
2* Note: This used to be called MKSTRING (and even MAKE-STRING),       *
ˇ
002*       Common Lisp function MAKE-STRING.
002*       Common Lisp MAKE-STRING has the following syntax:
002*           ˇ
70002*       (make-string <size> &key :initial-element)
80002*
90002* Thus, TOSTRING cannot bˇ
0200002*
0210002*****************************************************************
0220002         SPACE 1                      ˇ
 00230002TOSTRING #ZBEG MINARGS=1,MAXARGS=2,NAME='TOSTRING'
 00240002         SPACE 1
 00250002         #ZPDS 2*4+12+0                            ˇ
   00260002         #ZSAV ,
   00270002         SPACE 1
   00280002         LM    #15,#0,0(#11)       LOAD ARG1 AND ARG2
     00290002         SPACE 1
       00300002         CR    #0,#13              IF ARG2 NOT SUPPLIED
       00310002         BE    QUICKCK              OR
       00320002         CR    #0,#10                ARG2 = NIL (NO SLASH
N)     0ˇ
         00340002QUICKCK  CLI   ##TYPE(#15),##STRING  IF ARG1 IS ALREADY
G        00350002         BE    RETURN                THEN JUST RETURN I
..       00360002      ˇ
           00370002         BNE   SETARG2               THEN...
           00380002         L     #15,##PNAME(,#15)      GET THE PRINT N
           00390002         B     RETUˇ
             00400002         SPACE 1
             00410002SETARG2  DS    0H
             00420002         LR    #0,#10           ˇ
               00430002         SPACE 1
               00440002DUMPST   DS    0H
               00450002*                                            ˇ
                 00460002* MAKE SURE THE OBJECT IS A TYPE THAT ZILADMP C
E.               00470002* WE DON'T WANT TO GET AN ERROR MESSAGE FROM ZI
O WE?            00480002*
   ˇ
                   00500002         BZ    MAYBJUNK            THEN CHECK
UNBND, ETC.        00510002         TM    ##TYPE(#15),##VEC   IF THIS IS
R-TYPE OBJECT     ˇ
OR STRUCTURE), ERROR 00530002*
                     00540002* INVOKE ZILADMP TO GET THE "FLAT" REPRESEN
F THE ARGUMENT.      00550002*   ˇ
                       00560002         LR    #1,#0               SET #1
ADMP FROM ARG2         00570002         LR    #2,#15              GET TH
O BE DUMPED            00580002         L     #1ˇ
OF ATOM DUMPING ROUTINE  00590002         OI    ZLCDFLGS,ZLCDCOPY   SET
OPY BIT ON               00600002         #BASR #14,#15             CALL
                         00610002         LR    #5,#0          ˇ
 OF DUMPED DATA            00620002         LR    #6,#1               GE
S OF DUMPED DATA           00630002         LR    #2,#5               SE
 OF OBJECT TO CREATE       00640002         XR    #1,#1               EN
DE 0 = ALLOCATE NEW SPACE    00650002         L     #15,ZLCVSS
ESS OF STRING SPACE SERVICE  00660002         LA    #0,20(,#11)
ENT STACK LOCATION           00670002         #BASR #14,#15
VSS TO BUILD  THE OBJECT      00680002ˇÁ
        IF STRING BUILD FAILED               00690002         BZ    ERRO
        THEN ERROR                           00700002         LR    #7,#
        LENGTH OF DUMPED DATA                00710002 ˇ
          MOVE DUMPED DATA INTO STRING DATA    00720002         SPACE 1
                                               00730002RETURN   DS    0H
          #15 POINTS TO STRING BUILT           00740002         SPACEˇ
                                                 00750002         #ZRET
                                                 00760002         SPACE
                                                 00770002MAYBJUNK DS
    ˇ
                                                   00790002         CR
3             If equal to #13                      00800002         BE
              then ˇ
ZLCUNBND        If equal to the unbound object       00820002         BE
B               then it's the unbound object         00830002         C
ZLCRMNIL        If equal to RMNIL ˇ
RMN               then it's RMNIL                      00850002
ROR1              Else error                           00860002
                                                 ˇ
0H                  Unsupplied optional argument         00880002
#15,$UOA                                                 00890002
RETURN                                                   0090000ˇ
  0H                  The unbound object                   00910002
  #15,$UNBOUND                                             00920002
  RETURN                                                   00930002ISRMN

    #15,$RMNIL                                               00950002
    RETURN                                                   00960002
ACE 1         ˇ
LR    #2,#15                                                   00980002
#ERR  PREFIX=NO,                                              X00990002
      'ZIL2122 TOSTRING: Cannˇ
        ,                                                       X0101000
        (#2),                                                   X0102000
        X'0D',              carriage return ˇ
          '(it''s a list, vector, funarg, or structure).'          01040
    SPACE 1                                                        01050
2   #ERR  'ZIL4010 TOSTRING: Not enough vector/string space+
            ld string.',PREFIX=NO                        ˇ
        SPACE 1                                                        0
        DS    0A                                                       0
UOA     #SATM '#<UNSUPPLIED OPTIONAL ARGUMENT>'                        0
2         DS    0A
2$UNBOUND #SATM '#<UNBOUND>'
2         DS    0A
2$RMNILˇ
002         SPACE 1
002         LTORG
002         SPACE 1   Ï
70002         END
80002{
************************ 00010016*
                       * 00011016* ZIL Version 1.3 (c) 1989 The Charles
aper Laboratory Inc.   * 00012016*ˇ
                         * 00013016*
                         * 00013116*************************************
************************** 00013216         MACROˇ
                             00013316&NAME    INSYS
                             00013416&NAME    OI    ZLCIFLGS,ZLCISYS
 non-ZIL code running        00013516         MEND              ˇ
                               00013616         MACRO
                               00013716&NAME    OUTSYS
                               00013816&NAME    NI    ZLCIFLGS,255-ZLCIS

attention interrupt occurred     00014016         BOR   #13
n go to handle it                00014116         MEND
              ˇ
3 SUBROUTINE'                      00016016*****************************
********************************** 00019016* TSO TAKES AN &REST ARG - LI
OMS TO BE CONCATENATED INTO Aˇ
 THEN EXECUTED AS A TSO COMMAND.   * 00030016*  SPECIFICATION OF AN ATOM
 LIST CONTAINING NESTED LISTS IS   * 00040016*  ERRONEOUS AND WILL BE FL
 AN ERROR.                         * 0005001ˇ
                                     * 00060016* TSO RETURNS A FIXNUM CO
 THE RETURN CODE AS RETURNED BY      * 00070016* THE TSO COMMAND INVOKED
                                     * 00080016*           ˇ
                                       * 00090016* THIS ROUTINE IS NOT R
 AND USES NO EXTRA STACK SPACE.        * 00100016***********************
**************************************** 00110016*
                                         * 00120016* ZILADMP IS CALLED T
ACH ATOM IN THE LIST INTO OUR WORK AREA. * 00130016*
                                         * 00140016*********************
*********ˇ
                                           * 00160016* 01/27/88 - CHANGE
OKE TSO COMMAND ITSELF RATHER THAN USING   * 00170016*            THE DR
LIST" UTILITY.          ˇ
                                             * 00190016* 05/02/89 - TSO/
n 2 support.                                 * 00200016*
                                       +
*************************************ˇ
,&ZILTSO                                           00230016         #ZSY
                                                   00240016         SPAC
                                                   0ˇ
RGS=0,MAXARGS=0,RESTARG=T,NAME='TSO'                 00260016         #Z
                DEFINE STACK SIZE                    00270016         #Z
                SAVE REGISTERS                       00280016      ˇ
                                                       00290016
,0(,#11)          GET &REST ARGUMENT                   00300016
,4                INIT LENGTH REQUIRED SO FAR TO 4     00310016*
  ˇ
0H                                                       00330016
#6,#10              IF END OF LIST OR NULL LIST          00340016
NOMORE           ˇ
  #2,##CAR(,#6)       GET ATOM (ARG 1 TO TSO)              00360016
  ##TYPE(#2),##ATOM   IF IT'S NOT AN ATOM                  00370016
  BADLIST             THEN ERRORˇ
    ##TYPE(#2),##VEC    IF IT'S SOME KIND OF VECTOR          00390016
    BADLIST             THEN ERROR                           00400016
    #15,ZLCADMP         GET ADDRESS OF ZILADMP ˇ
LR    #1,#10              SET #1 FOR ZILADMP                   00420016
#BASR #14,#15             CALL ZILADMP TO DUMP ATOM            00430016
LR    #7,#1               SAVE ADDRESS OF DUMPED ATOM         ˇ
  LTR   #4,#0               GET LENGTH OF DUMPED ATOM            0045001
  BNP   AFTMOVE             IF ZERO LENGTH, SKIP THIS ONE        0046001
  AR    #0,#5               GET DUMPED-ATOM LENGTH PLUS TOTAL    0047001
    C     #0,ZLCWALEN         IF EXCEEDS CURRENT WORKAREA LENGTH   00480
    BNH   LENOK               THEN...                              00490
                                                                   00500
 GETMAIN A Nˇ
2) COPY CONTENTS OF OLD WORKAREA TO THE NEW WORKAREA, LENGTH = #5.   005
3) FREEMAIN THE OLD WORKAREA.                                        005
                           ˇ
 #0 = TOTAL LENGTH NEEDED SO FAR, INCLUDING DUMPED-BUT-NOT-ADDED-YET   0
 #1 = NOT IN USE                                                       0
 #2 = NOT IN USE, WILL CONTAIN NEW WORK ARˇ
6* #3 = NOT IN USE, WILL CONTAIN NEW WORK AREA ADDRESS
6* #4 = LENGTH OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
6* #5 = TOTAL LENGTH DUMPED SO FAR, NOT INCLUDING THIS ST UFF
016ˇÁ
         00610016* #7 = ADDRESS OF DUMPED ATOM TEXT THAT WE WANT TO ADD
         00620016*
         00630016 ˇ
           00640016         LA    #2,7(,#2)            GET A LARGER WORK
           00650016         N     #2,=X'FFFFFFF8'      ROUNDED UP TO MUL
 8         00660016         LR   ˇ
LENGTH       00670016         #GETMAIN RC,LV=(0),LOC=BELOW GET A NEW WOR
             00680016         LTR   #15,#15              IF GETMAIN FAIL
             00690016         BNZ   ERROR3      ˇ
GH STORAGE     00700016         LR    #3,#1                SAVE NEW WORK
RESS           00710016         ICM   #14,15,ZLCWA         #14 = ADDRESS
AREA           00720016         BZ    NOFREE               IF Nˇ
MOVE & FREE      00730016         LR    #0,#3                #0 = ADDRES
 AREA            00740016         LR    #1,#5                #1 = LENGTH
ED TEXT          00750016         LR    #15,#5               #15 = LENGT
UMPED TEXT         00760016         MVCL  #0,#14               COPY DATA
D AREA TO NEW AREA 00770016         L     #1,ZLCWA             GET CURRE
AREA ADDRESS       00780016         L     #0,ZLCWALEN          GET CURRE
AREA LENGTH  ˇ
RK AREA              00800016NOFREE   DS    0H
                     00810016         ST    #3,ZLCWA             SET NEW
KAREA ADDRESS        0082001ˇ
ORKAREA LENGTH         00830016         SPACE 1
                       00840016LENOK    DS    0H                  OTHERW
ILL ROOM               00850016         L  ˇ
RESS + WORK AREA LENGTH  00860016         AR    #0,#5               POIN
ERE TO MOVE DUMPED ATOM  00870016         LR    #1,#4               SOUR
H = DUMPED ATOM LENGTH   00880016         LR    #15,#4    ˇ
GTH = DUMPED ATOM LENGTH   00890016         LR    #14,#7              SO
RESS = WHERE DUMPED ATOM   00900016         MVCL  #0,#14              MO
D ATOM TO WORK AREA        00910016         AR    #5,#4               IN
T TOTAL LENGTH SO FAR        00920016AFTMOVE  DS    0H
                             00930016         L     #6,##CDR(,#6)
 OF LIST                     00940016         B     LOOP
.       ˇ
AS BEEN PROCESSED              00960016*
                               00970016* CHECK THAT THE ARGUMENT IS NOT
HAN 32K.               +
                     ˇ
T ADDRESS OF COMMAND WORK AREA     01000016         CH    #5,=H'32767'
 BUFFER LENGTH TOO LONG FOR TSO    01010016         BH    TOOLONG
EN ERROR                           0ˇ
                                     01030016* To solve problem of singl
ing up residual byte afterwards,     01040016* we blank the byte followi
nd of the active buffer.             01050016      ˇ
                                       01060016         C     #5,ZLCWALE
  Do only if active length is less     01070016         BNL   NONONONO
   than length of buffer.              01080016         LA    #15,ˇ
    Point to end of buffer               01090016         MVI   0(#15),C
    Blank it out to fix "%" problem      01100016NONONONO DS    0H
                                         01110016         SPACE
 ˇ
      ELSE SHIFT INTO LEFT HALF OF WORD    01130016         ST    #5,0(,
      STORE COMMAND BUFFER PREFIX          01140016         LR    #5,#1
      Load commaˇ
                                             01160016         LA    #3,4
)       Set up second base register          01170016         USING TSO+
                               ˇ
                                               01190016*****************
********************************************** 01200016*
                                             *ˇ
                                               * 01220016*
                                               * 01230016*   #3  -->  SE
E REGISTER                                     * 01240016*   ˇ
IRONMENT CONTROL TABLE)                          * 01250016*   #5  -->
MMAND BUFFER)                                    * 01260016*   #6  -->
LE)                                              * 01270016*   #7  -->
S OF OUR INPUT STACK                               * 01280016*
                                                   * 01290016* NOTE: REG
AGE IN EXIT ROUTINES MAY DEVIATE FROM THE ABOVE.   * 01300016*
           ˇ
****************************************************** 01320016*
                                                       01330016* BUILD C
 SYSTEM CONTROL BLOCKS    ˇ
                                                         01350016
PSA,0                                                    01360016
#15,PSATOLD          GET TCB ADDRESS                      01370016ˇÁ
         USING TCB,#15
6         L     #15,TCBJSCB          GET JSCB ADDRESS
6         USING IEZJSCB,#15
6 ˇ
016         L     #15,JSCBPSCB         GET ADDRESS OF PSCB
016         LTR   #15,#15             IF THERE'S NO PSCB
016         BZ   ˇ
40016         ST    #15,CPPLPSCB         SAVE PSCB ADDRESS
50016         USING PSCB,#15
60016         MVC   CPPLUPT,PSCBˇ
1470016         L     #15,PSCBRLGB         GET ADDRESS OF RELOGON BUFFER
1480016         USING RLGB,#15
1490016         L     #4,RLGBECT           GET ˇ
 01500016         ST    #4,CPPLECT          ADDRESS ENVIRONMENT CONTROL
 01510016         USING ECT,#4
 01520016         SPACE 2                                     ˇ
   01530016*
   01540016* Locate the LWA (logon work area) to find the addresses of t
   01550016* tables that define which TSO commands can be accessed and h
     01560016*
     01570016         XR    #0,#0               Clear the list of...
     01580016         ST    #0,ZTE2ADDR          TSO commands that run a
d    0159001ˇ
       01600016         USING ASCB,#15
       01610016         L     #15,ASCBASXB        Get ASXB address
       01620016         USIˇ
         01630016         ICM   #2,15,ASXBLWA       Get LWA address
         01640016         BZ    NOTTSOE             If none, probably no
         01650016         USING LWA,#2    ˇ
           01660016         ICM   #15,15,LWAPECT      Get LWA's ECT addr
           01670016         BZ    NOTTSOE             If none, probably
E          01680016         C     #15,CPPLECT         Cheˇ
 match       01690016         BE    ECTSOK
             01700016         #ERR  2,
            X01710016               'The ECT addresses in the LWA (logon
area) and the X01720016               RLGB (relogon buffer) do not match
s using the ECX01730016               T address from the RLGB.'
               01740016ECTSOK   DS    0H
       +
TE2  ˇ
 run authorized)   01770016NOTTSOE  DS    0H
                   01780016         EJECT
                   0ˇ
******************** 01800016* INITIALIZE WORK AREAS
                   * 01810016*******************************************
******************** 01820016      ˇ
                       01830016         L     #14,CPPLUPT
                       01840016         L     #15,CPPLECT
                       01850016         LA    #0,Zˇ
                         01860016         STM   #14,#0,IOPLUPT      SET
TL PARAMETER LIST        01870016         LA    #1,ZTCSFLG
                         01880016         LA    #2,CSOA          ˇ
                           01890016         STM   #14,#2,CSPL         SE
SCAN PARAMETER LIST        01900016         L     #1,CPPLPSCB
                           01910016         LA    #2,DAPB2C
ˇ
KJDAIR PARAMETER LIST        01930016         LA    #0,X'2C'
RY CODE TO MARK NOT IN USE   01940016         SLL   #0,16
TO LEFT HALF FOˇ
T ZEROES INTO FLAG FIELD       01960016         MVI   DA2CDDN,C' '
DDNAME TO BLANKS               01970016         MVC   DA2CDDN+1(7),DA2CD
                              ˇ
IALIZE BLDL LIST FOR CMDCHK      01990016         LA    #0,1
                                 02000016         LA    #1,ZTMSGHDR
                                 02010016    ˇ
                                   02020016         STM   #0,#2,ZTMSGOLD
ITIALIZE PUTLINE WORK AREA         02030016         LA    #1,ZTPGHDR
                                   02040016         STM   #0ˇ
INITIALIZE PUTGET MODE MSG AREA      02050016         LA    #1,ZTPGOLD
                                     02060016         ST    #1,PGPB+4
STORE ADDR OF O.L.D. IN PARM BLOCK   02070016         LA    #1,ZTMSGOLD
                                       02080016         ST    #1,PTPBOPU
  STORE ADDR OF O.L.D. IN PARM BLOCK   02090016         LA    #0,ZTCMDEC
                                       02100016         LA    #1,ZTATNEC
          ˇ
    INITIALIZE ECB LIST                  02120016         OI    ZTECBLST
                                         02130016*** NOTE: #2 CONTAINS Z
OM ABOVE INSTRUCTIONS.                    02140016ˇÁ
#2,DA2CTCB          TCB ADDRESS TO MARK DSE'S NOT IN USE 02150016
#2,ZTRETCD          INITIALIZE RETURN CODE TO ZERO       02160016
ZTCSFLG,0           PREPARE TO SYNTAX CHECK COMMAND      02170016 ˇ
  ZTSTATUS,ZTNORMAL   Initialize command status            02180016
  #2,ECTIOWA          GET ADDRESS OF ORIGINAL INPUT STACK  02190016
  #2,ZTSVIOA          SAVE INPUT STACK IN OUR WORK AREA    02200016
 ˇ
                                                             02220016* U
IST DCB with BLDL to find system stuff only                  02230016* (
f in a task librˇ
                                                               02250016
L     #15,16              Get CVT address                      02260016
L     #0,CVTLINK-CVT(,#15) Get ˇ
  ST    #0,LINKDCB          Save it                              0228001
  SPACE 2                                                        0229001
**********************************************ˇ
 UP ESTAE (ABEND) AND STAX (ATTENTION) EXIT ROUTINES.            * 02310
****************************************************************** 02320
    SPACE                                                    ˇ
      LA    #14,STAEEXIT                                             023
      ESTAE (#14),PARAM=(#12),MF=(E,ZTESTAE)                         023
      LTR   #15,#15             IF ESTAE FAILED,                     023
        BZ    ESTAEOK             THEN                                 0
        LA    #1,=C'ESTAE'         BLOW UP                             0
        LA    #0,5                                                     0
        B  ˇ
6ESTAEOK  OI    ZTFLAGS,ZTESTON     ELSE INDICATE ESTAE IS ACTIVE
6         SPACE
6         L     #14,=A(STAˇ
016         STAX  (#14),USADDR=(#12),REPLACE=NO,MF=(E,ZTSTAX)
016         CH    #15,=H'4'           IF STAX FAILED,
016         BNH   STAXOK              THEˇ
60016         LA    #1,=C'STAX'          BLOW UP
70016         LA    #0,4
80016         B     ERROR                               ˇ
2490016STAXOK   OI    ZTFLAGS,ZTSTXON     ELSE INDICATE STAX IS ACTIVE
2500016         EJECT
2510016****************************************************************+
 02520016* Determine which version of TSO/Extensions is active.      ˇ
 * 02530016* Reference: TSO/Extensions Version 2 Programming Services (S
 * 02540016*            Chapter 2. Considerations for Using TSO/E Servic
 * 02550016*            Determining the Version and Release of TSO/E Ins
 * 0ˇ
**** 02570016         SPACE 1
     02580016         MVI   ZTTSOE,C'0'         Initialize TSO/E version
e)   02590016      ˇ
       02600016         L     #15,CVTTVT-CVT(,#15) Get address of TSVT
       02610016         LTR   #15,#15             If there is none,
       02620016         BZ    TSOEˇ
         02630016         USING TSVT,#15            Else set it...
         02640016         MVC   ZTTSOE,TSVTLVER     C'1' = version 1, C'
sion 2   02650016         SPACE 1                ˇ
           02660016TSOEV0   DS    0H
           02670016         SPACE 1
           02680016*********************************************ˇ
************ 02690016* PREPARE TO INVOKE COMMANDS BY SAVING THE CURRENT
ACK AND    * 02700016* INITIALIZING IT TO A TERMINAL ELEMENT (A LA ISPF)
           * 02710016***************************************************

               02730016         CLI   ZTTSOE,C'2'         If TSO/E Versi
later,         02740016         BNL   INITSTK2            then do it the
ersion 2 way  ˇ
 Version 1 way   02760016         OI    ZTFLAGS,ZTSTKMOD    INDICATE INP
 ADDR ALTERED    02770016         XR    #0,#0               MAKE A ZERO
                 02780016    ˇ
ADDRESS            02790016         ST    #0,ZTECB            CLEAR ECB
K                  02800016*
                   02810016* SET UP A TERMINˇ
F NEW INPUT STACK    02820016*
                     02830016         INSYS
                     02840016         STACK PARM=STKINIT,MFˇ
                       02850016         OUTSYS
                       02860016         LTR   #15,#15             IF STA
D,                     02870016         BZ    STACKOK             THEN..
                         02880016         L     #2,ZTSVIOA           GET
NPUT STACK ADDRESS       02890016         ST    #2,ECTIOWA           RES
GINAL INPUT STACK        02900016         NI    ZTFLAGS,255-ZTSTKMOD IND
PUT STACK  ADDR RESTORED  02910016ˇÁ
SET=*' BLOW UP                           02920016         LA    #0,15
                                         02930016         B     ERROR
                                         02940016 ˇ
                                           02950016STACKOK  DS    0H
                                           02960016         SPACE
                                           02970016**************ˇ
******************************************** 02980016* IN ORDER TO INSUR
OMMANDS INVOKED VIA TSO FUNCTION IN THE    * 02990016* BACKGROUND, WE CA
STACK TO HAVE THE SAME BOTTOM ELEMENT AS   * 03000016* THE ORIGINAL STAC
ˇ
 BE THE SYSTSPRT DATASET IN THE BACKGROUND.  * 03020016* NOTE THAT WE CA
HIS "LEGALLY" BY USING THE STACK MACRO TO    * 03030016* SET UP SYSTSPRT
BOTTOM ELEMENT,ˇ
TPUT AND PREVIOUS TSO OUTPUT WOULD BE LOST.    * 03050016***************
************************************************ 03060016         SPACE
                              ˇ
VIOA          Get address of original input stack  03080016         L
IOWA          GET ADDRESS OF OUR NEW INPUT STACK   03090016         L
,#7)          GET ADDRESS OF OUR BOTTOM ELEMEˇ
4(,#2)          GET ADDRESS OF THEIR BOTTOM ELEMENT  03110016         MV
#14),0(#15)     MOVE THEIR ELEMENT TO OUR ELEMENT    03120016         B
TSTK            Else...                              0313001ˇ
                                                       03140016INITSTK2
                  Set input stack for TSO/E Version 2  03150016*
                                                       03160016*********
******************************************************** 03170016* Make
put stack by issuing STACK ENVIRON=CREATE, which makes * 03180016* a new
 a new IOWA.  We don't use the new ECT, but we do use  * 03190016* the n
 altering ˇ
********************************************************** 03210016*
                                                           03220016
  ZTECB,ZTECB         Cleˇ
SYS                                                          03240016
ACK PARM=STKECREA,MF=(E,IOPL) Stack ENVIRON=CREATE           03250016
TSYS                                    ˇ
LTR   #15,#15             If STACK failed,                     03270016
BZ    ENVCREOK            then blow up                         03280016
LA    #1,=C'STACK ENVIRON=CREATE'                      +
  LA    #0,20                                        ˇ
    B     ERROR                                                    03310
EOK DS    0H                  STACK created new ECT...             03320
                                                                   0ˇ
******************************************************************** 033
N ORDER TO INSURE THAT COMMANDS INVOKED VIA XCLIST FUNCTION IN THE * 033
ACKGROUND, WE CAUSE OUR STACK TO HAVE THE SAME BOTTOM ELEMENT AS   * 033
HE ˇ
 FOREGROUND, BUT IT WILL BE THE SYSTSPRT DATASET IN THE BACKGROUND.  * 0
********************************************************************** 0
                  ˇ
6         OI    ZTFLAGS,ZTSTKMOD    Indicate input stack addr altered
6         L     #15,STKECREA+STPBECTA-STPB Get address of new ECT
6         ST    #15,ZTNEWECT     ˇ
016         MVC   ECTIOWA(4),ECTIOWA-ECT(#15) Copy IOWA pointer to ours
016*
016* Put a barrier element on the stack.        ˇ
60016*
70016         XC    ZTECB,ZTECB         Clear ECB
80016         INSYS                                            ˇ
3490016         STACK PARM=STKBARR,MF=(E,IOPL) STACK BARRIER=*
3500016         OUTSYS
3510016         LTR   #15,#15             IF STACK UNSUCCESSFUL,
 03520016         BZ    BARRIERD            THEN TERMINATE OUR PROCESSIN
 03530016         LA    #1,=C'STACK BARRIER=*'
 03540016         LA    #0,15
 03550016    ˇ
   03560016BARRIERD DS    0H
   03570016*
   03580016* Use PUTGET SUBSˇ
     03590016*
     03600016         MVC   PGPB(PGPBSUBL),PGPBSUB Set up PUTGET SUBSTAC
rm   03610016         LA    #1,ZTPGOLD     ˇ
       03620016         ST    #1,PGPB+4           STORE ADDR OF O.L.D. I
LOCK   03630016         SPACE 1
       03640016AINITSTK DS    0H                  ECT readˇ
         03650016         SPACE
         03660016*******************************************************
******** 03670016* THE COMMAND BUFFER PASSED TO US IS SCANNED AS A TSO C
, THE    * 03680016ˇÁ
LID TSO COMMAND OR     * 03690016* CLIST, AND IF SO, IT IS THEN INVOKED.
                       * 03700016***************************************
************************ 03710016 ˇ
                           03720016         ST    #5,CPPLCBUF         SE
OMMAND BUFFER ADDRESS      03730016         MVC   ZTOFFSET,2(#5)      SA
BLE CLIST NAME OFFSET      03740016         LR   ˇ
 COMMAND BUFFER              03750016         #BAS  #14,SCAN
T OPERAND IN COMMAND BUFFER  03760016         B     GOSCAN(#15)
ASED ON RETURN CODE          03770016GOSCAN   B     SCAN0       ˇ
 VALID COMMAND NAME            03780016         B     RETURN
 NO COMMAND NAME, RETURN NIL   03790016         B     SCAN8
 INVALID COMMAND NAME          03800016         LH    #15,ZTSCANRC

WHICH CASE, BLOW UP              03820016         LA    #0,4
                                 03830016         B     ERROR
              ˇ
                                   03850016SCAN8    DS    0H
MMAND IS SYNTACTICALLY INVALID     03860016         LA    #1,SYNMSG
                             ˇ
                                     03880016         #BAS  #14,PUTLINE
DISPLAY ERROR MESSAGE                03890016         LA    #1,FLUSHALL
                                     0390001ˇ
  AND FLUSH THE INPUT STACK            03910016         B     RETURN
                                       03920016         SPACE
                                       03930016SCAN0    DS ˇ
    COMMAND NAME IS SYNTACTICALLY OK     03940016         #BAS  #14,CKCM
    CHECK EXISTENCE OF COMMAND           03950016         TM    ZTFLAGS,
    IF SEVERE ERROR OCCURRED,            03960016         BO    ERROR
      THEN GO DISPLAY ERROR MESSAGE        03970016         LTR   #15,#1
      IF COMMAND IS NOT SUPPORTED          03980016         BNZ   RETURN
      THEN RETURN WITHOUT INVOKING IT      03990016         #BAS  #14,AT
      ELSˇ
BER     IF SEVERE ERROR OCCURRED,            04010016         BO    ERRO
        THEN GO DISPLAY ERROR MESSAGE        04020016         B     PROC
        GO PROCESS ADDITˇ
                                               04040016RETURN   DS    0H
                                               04050016         SPACE
                                       +
*************************************ˇ
N TO CALLING PROGRAM ***                         * 04080016*         CLE
TACK, RESTORE ORIGINAL ONE,                      * 04090016*
E STORAGE AND EXIT                               * 0ˇ
**************************************************** 04110016         SP
                                                     04120016         TM
AGS,ZTSTKMOD    IF INPUT STACK ADDRESS WAS ALTERED,  04130016      ˇ
TSTKRS            THEN                                 04140016
TSOE,C'2'         If TSO/E Version 2 or later          04150016
EESTK2            then unstack the new way             04160016*
  ˇ
0H                   CHECK CURRENT INPUT STACK           04180016
0(4,#7),4(#7)        IF TOP ELEMENT NOT = BOTTOM ELEMENT 04190016
STKCLRD          ˇ
  #1,FLUSHTOP           CALL STACK TO FLUSH TOP ELEMENT    04210016
  #14,FLUSH             UNTIL                              04220016
  STKCHECK              ALL STACˇ
    0H                  WHEN STACK IS CLEARED...             04240016*
                                                             04250016* N
 WE DON'T PROCESS THE BOTTOM ELEMENT OF OUR STAˇ
OT BE DELETED IF IT IS A TERMINAL ELEMENT, AND IF IT IS A      04270016*
 ELEMENT WE DEFINITELY DON'T WANT TO CLOSE IT, SO WE JUST      04280016*
DISAPPEAR (UN)NATURALLY.                                      ˇ
                                                                 0430001
  B     AFTSTKRS                                                 0431001
  SPACE 1                                                        0432001
TK2 DS    0H                  Unstack the TSO/E Version 2 way...   04330
    XC    ZTECB,ZTECB                                              04340
    INSYS                                                          04350
    STACK PAˇ
      OUTSYS                                                         043
      LTR   #15,#15                                                  043
      BZ    AFTSTKDB       ˇ
        LA    #1,=C'STACK DELETE=BARRIER'                              0
        LA    #0,20                                                    0
        B     ERROR                       ˇ
6         SPACE 1
6AFTSTKDB DS    0H
6*                                                       
016ˇÁ
******** 04460016* Clear things out by issuing STACK ENVIRON=DESTROY.  T
LD     * 04470016* have the effect of deleting all the elements from the
at     * 04480016*ˇ
he ECT.  * 04490016*****************************************************
********** 04500016*
           04510016         L    ˇ
w ECT        04520016         ST    #15,STKEDEST+STPBECTA-STPB Store int
parm list    04530016         ST    #15,IOPLECT         Store into IOPL
K to see     04540016         XC    ZTECB,ZTECB ˇ
               04550016         INSYS
               04560016         STACK PARM=STKEDEST,MF=(E,IOPL) Stack EN
STROY          04570016         OUTSYS                         ˇ
                 04580016         LTR   #15,#15             If STACK fai
                 04590016         BZ    ENVDESOK            then blow up
                 04600016         LA    #1,=C'STACK ENVIRON=DESTROY'
                   04610016         LA    #0,20
                   04620016         B     ERROR
                   04630016ENVDESOK DS    0H                  STACK back
al, almost...ˇ
pointer              04650016         SPACE 1
                     04660016AFTSTKRS DS    0H
                     0467001ˇ
NAL INPUT STACK ADDR   04680016         NI    ZTFLAGS,255-ZTSTKMOD INDIC
T STACK RESTORED       04690016         TM    ZTFLAGS,ZTECTMOD    IF ECT
ECTSCMD WAS ALTERED,   04700016         BZ ˇ
                         04710016         MVC   ECTPCMD(16),ZTCMDS   RES
PCMD AND ECTSCMD.        04720016AFTCMDRS DS    0H
                         04730016         TM    ZTFLAGS,ZTˇ
 ACTIVE                    04740016         BNO   OFFSTAX             TH
                           04750016         STAX  ,                    C
AX                         04760016OFFSTAX  DS    0H
                             04770016         TM    ZTFLAGS,ZTESTON
 IS ACTIVE                   04780016         BNO   OFFESTAE
                             04790016         ESTAE 0
ESTAE   ˇ
                               04810016         SPACE
                               04820016FINALRET DS    0H
                       +
ommand terminated abnˇ
en handle abending command         04850016         CLI   ZTSTATUS,ZTATT
 command interrupted,              04860016         BE    RATTN
en handle attentioned command      0ˇ
Else return with last return code    04880016*
                                     04890016* CONVERT THE RETURN CODE F
COMMAND INTO A FIXNUM                04900016*     ˇ
                                       04910016         L     #2,ZTRETCD
  Get return code into reg for fixnum  04920016         LA    #0,16(,#11
  PASS CURRENT STACK LOCATION TO CONS  04930016         #MKAT FIXEˇ
    USING CONTENTS OF #15, MAKE FIXNUM   04940016         SPACE 1
                                         04950016         #ZRET ,
    RESTORE REGISTERS AND RETURN         04960016         EJECT
 ˇ
      HERE IF LINK FAILS                   04980016         #ERR  PREFIX
                                          X04990016               'ZIL21
Command feature ˇ
                                            X05010016               0(#1
        (try to print out list of strings)   05020016         SPACE 1
                               ˇ
                                               05040016         #ERR  PR
                                              X05050016               'Z
SO: Cannot convert argument to string - ',    ˇ
                                                X05070016
            carriage return                     X05080016
a list, vector, funarg, or structure).'          05090016    ˇ
                                                   05100016TOOLONG  DS
              Error - command string too long      05110016         #ERR
=NO,                                              X05120016
2120 TSO: Command exceeds maximum length of 32763 - X05130016
                                                    X05140016
1)              (try to print out list of strings)   05150016         SP
           ˇ
                  Error - command string too long      05170016
4,FAKESTR         Generate string for error message    05180016
EFIX=NO,                  ˇ
'ZIL2124 TSO: Requested command was abnormally terminateX05200016
d - ',(#2)                                               05210016
                                                          05220016ˇÁ
RATTN    DS    0H                  Error - command string too long
6         #BAS  #14,FAKESTR         Generate string for error message
6         #ERR  PREFIX=NO,
6 ˇ
016               ion - ',(#2)
016         SPACE
016ERROR3   DS   ˇ
90016         XR    #0,#0               CLEAR WORK AREA ADDRESS AND LENG
00016         ST    #0,ZLCWA
10016         ST    #0,ZLCWALEN ˇ
5320016         #ERR  PREFIX=NO,
5330016               'ZIL2123 TSO: Not enough memory to build TSO comma
5340016               ,0(#11)             (try ˇ
 05350016         EJECT
 05360016FAKESTR  DS    0H                  Subroutine to fake out a str
 05370016*                                  for ZIL error messˇ
   05380016         L     #2,ZLCWA            Get address of original co
   05390016         LH    #0,0(,#2)           Get length of command buff
   05400016         SH    #0,=H'4'            Convert to length of comma
ing  05410016         ST    #0,0(,#2)           Turn into ZIL string len
     05420016         MVI   0(#2),##STRING      Set string type
     05430016         BR    #14
     0544001ˇ
       05450016PROCXC   DS    0H
       05460016         SPACE
       05470016************ˇ
******** 05480016*               STACKED COMMAND PROCESSING
       * 05490016*
       * 05500016* FOR THIS ROUTINE, ALL Cˇ
 THE     * 05510016* CURRENT COMMAND (E.G. A CLIST) ARE EXECUTED FROM TH
FACE.    * 05520016* THE END OF THE CLIST OR STACK ELEMENT IS DETERMINED
HING     * 05530016* THE BOTTOM LEVEL OF THE INPUT STACK.ˇ
           * 05540016*
           * 05550016* NOTE: WHEN THE END OF A CLIST IS REACHED, THE PUT
ICE        * 05560016* ROUTINE AUTOMATICALLY GOES TO THE NEXT LOWER ELEM
 THE STACK   * 05570016* TO RETRIEVE THE NEXT COMMAND.  NO NOTIFICATION
VED BY THE   * 05580016* CALLER OF PUTGET THAT THIS HAS HAPPENED.  TO GE
 THIS        * 05590016* PROBLEM, WE ISSUE A PUTGET WITH A BAD MODE MESS
HAT THE+
A COMˇ
M THE TERMINAL   * 05620016* (IT WILL RETURN A CODE OF 24 IN THIS CASE).
IDEA CAME        * 05630016* ORIGINALLY FROM ISPF MODULE ISPCAT (OR CAT)
THIS SITUATION   * 0ˇ
ED; IF THE INPUT   * 05650016* WAS OBTAINED FROM THE TERMINAL BUT NOT FR
OTTOM LEVEL OF     * 05660016* THE INPUT STACK, THE PROBABLE EXPLANATION
 A "TERMIN"        * 05670016* COMMˇ
SO THE PUTGET IS     * 05680016* REISSUED WITH A GOOD MODE MESSAGE TO PE
MIN FUNCTIONING.     * 05690016* OTHERWISE WE KNOW THAT THE CLIST HAS CO
 END AND WE EXIT.    * 05700016*                  ˇ
                       * 05710016* THIS GIVES RISE TO A PROBLEM IN CLIST
ONTAIN TERMIN          * 05720016* STATEMENTS:  IF CONTROL IS RETURNED T
IST BY THE USER'S      * 05730016* ENTRY OF A TERMIN STRING, AND ˇ
UES NO MORE TSO COMMANDS * 05740016* BUT DOES SOME CLIST PROCESSING AND
ES, THIS SUBROUTINE HAS  * 05750016* NO WAY OF KNOWING THAT THE COMMAND
D FOLLOWING THE TERMIN   * 05760016* STATEMENT CAME FROM OUTSIDE THE CLI
ˇ
O DO ANYTHING ABOUT IT.    * 05780016* THEREFORE, CLISTS SHOULD CONTAIN
 ONE COMMAND (A NULL       * 05790016* COMMAND IS SUFFICIENT) FOLLOWING
ROM A TERMIN STˇ
O SUPPORT TERMIN ENTIRELY.)  * 05810016*
                             * 05820016*********************************
******************************ˇ
                                 05840016*******************************
******************************** 05850016* RETRIEVE COMMANDS USING PUTGE
THEM AND ATTACH THE COMMANDS   * 05860016* WHˇ
NG MAY CAUSE THE CURRENT STACK   * 05870016* LEVEL TO REVERT TO THE ORIG
EL, TERMINATING OUR PROCESSING   * 05880016* OF COMMANDS; THIS IS A NORM
F CLIST TERMINATION UNDER TSO.   * 05890016*****************ˇ
************************************ 05900016         SPACE
                                     05910016         LTR   #1,#5
GET ADDRESS OF PUTGET BUFFER         05920016         BZ    XCGET
  IF A PUTGET BUFFER EXISTS,           05930016         C     #1,ZLCWA
  AND IT'S NOT OUR OWN WORKAREA,       05940016         BE    XCGET
   THEN...                             05950016         LA    #0,1
   GET SUBˇ
     SHIFT INTO HIGH-ORDER BYTE          05970016         AH    #0,0(,#5
     ADD IN LENGTH OF PUTGET BUFFER      05980016         FREEMAIN R,LV=
)    FREE THE PUTGET INPU T BUFFER        05990016ˇÁ
#5,#5                CLEAR PUTGET BUFFER POINTER         06000016
                                                         06010016XCGET
0H                                                       06020016 ˇ
E                                                          06030016
  ZTTSOE,C'2'         If TSO/E Version 2 or later          06040016
  PROC2               then process commands the new way    06050016*
 ˇ
ACE                                                          06070016***
************************************************************ 06080016* A
OINT WE ARE READˇ
MENT HAS BEEN PLACED ON THE INPUT STACK, I.E. THE STACK      * 06100016*
T THIS POINT IS NOT THE SAME AS THE BOTTOM ELEMENT.  SUCH    * 06110016*
UR IF WE HAVE EXECUTED A CLIST ˇ
ND THAT STACKS OTHER COMMANDS.  WE KEEP PROCESSING COMMANDS    * 0613001
 THE STACK LEVEL REACHES THE BOTTOM AGAIN.  NOTE THAT ANY      * 0614001
 ENCOUNTERED DURING A PREVIOUS PASS THROUGH THˇ
E CAUSED US TO ISSUE A STACK FLUSH, WHICH WILL RESULT IN         * 06160
MINATION OF NEW STACK ELEMENTS (AND EXIT FROM LOOP) UNLESS THE   * 06170
MENT IS A CLIST WITH CONTROL MAIN OR CONTROL NOFLUSH ACTIVE. ˇ
******************************************************************** 061
      SPACE                                                          062
      CLC   0(4,#7),4(#7)       IF TOP STK ELEMENT = BOTTOM ELEMENT  062
        BE    ENDCMDS             THEN END OUR PROCESSING.             0
        SPACE                                                          0
********************************************************************** 0
 RETRIEVE Aˇ
6***********************************************************************
6         SPACE
6         XC    ZTPGHDR(4)ˇ
016         #BAS  #14,PUTGET          GET A LINE OF COMMAND INPUT
016         TM    ZTFLAGS,ZTSUBER     IF A PUTGET ERROR OCCURRED,
016         BO    BADPG               THEˇ
10016         CH    #15,=H'24'          IF INVALID PARAMETERS ON PUTGET,
20016         BNE   PUTGETOK            THEN (TERMINAL IS CURRENT ELEMEN
30016         CLC   0(4,#7),4(#7)        IF TOP STK ELEMˇ
6340016         BE    ENDCMDS              THEN END OUR PROCESSING.
6350016         SPACE
6360016****************************************************************+
 06370016* ELSE WE ASSUME A TERMIN STATEMENT WAS EXECUTED AND WE ACCEˇ
 * 06380016*************************************************************
** 06390016         SPACE
   06400016         MVC   ZTPGHDR(MODELEN),MODEDATA  SET UP GOOD MODE ME
   0ˇ
     06420016         TM    ZTFLAGS,ZTSUBER     IF A PUTGET ERROR OCCURR
     06430016         BO    BADPG                OR
     06440016      ˇ
,      06450016         BE    BADPG                  THEN REALLY BAD PUT
W UP.  06460016         CLC   0(4,#7),4(#7)       ELSE IF TOP ELEMENT =
LEMENT 06470016         BNE   PUTGˇ
 VALID)  06480016         LA    #1,TERMMSG           DISPLAY MESSAGE TEL
R THAT   06490016         LA    #0,L'TERMMSG         THE COMMAND WAS NOT
D SINCE  06500016         #BAS  #14,PUTLINE      ˇ
RETRIEVED  06510016         B     ENDCMDS              AND THEN RETURN T
G PGM.     06520016         SPACE 1
           06530016PROC2    DS    0H                  Process coˇ
/E V.2 way   06540016         SPACE 1
             06550016***************************************************
************ 06560016* At this point we are ready to get the next comman

e stack      * 06580016* level at this point is not the barrier element.
an occur if  * 06590016* we have executed a CLIST or if we have invoked
d that       *ˇ
ntil the stack * 06610016* barrier element is reached.  Note that any er
untered during * 06620016* a previous pass through this loop will have c
 to issue a    * 06630016* stˇ
w stack elements * 06640016* (and exit from loop) unless the element is
with             * 06650016* CONTROL MAIN or CONTROL NOFLUSH active.
                 * 06660016*****************ˇ
******************** 06670016* RETRIEVE ADDITIONAL COMMANDS FROM INPUT S
MENT.              * 06680016*******************************************
******************** 06690016         SPACE                ˇ
                       06700016         MVC   ZTPGHDR(MODELEN),MODEDATA
GOOD MODE MESSAGE      06710016         #BAS  #14,PUTGET          GET A
COMMAND INPUT          06720016         TM    ZTFLAGS,ZTSUBER     IF A P
ERROR OCCURRED,          06730016         BO    BADPG               THEN
ISPLAY ERROR MESSAGE     06740016         CH    #15,=H'40'          IF B
IT,                      06750016         BE    ENDCMDS             then
 command                  06760016ˇÁ
    else process command                 06770016         SPACE 1
                                         06780016PUTGETOK DS    0H
                                         06790016 ˇ
N     IF ATTENTION INTERRUPT OCCURRED,     06800016         BNE   PGNOAT
      THEN                                 06810016         LA    #1,FLU
       FLUSH THE STACK (EVEN IF            06820016         #BAS ˇ
          CONTROL NOFLUSH IS ACTIVE)         06830016         B     PROC
         AND CONTINUE                        06840016         SPACE
                                             06850016PGNOATTN DS    0H
ˇ
F         SET CPPL COMMAND BUFFER ADDRESS      06870016         XC    ZT
TOFFSET   SET COMMAND BUFFER OFFSET TO ZERO    06880016         LR    #1
          POINTˇ
            SCAN NEXT OPERAND OF THE COMMAND     06900016         B
#15)        BRANCH BASED ON RETURN CODE          06910016GOSCANX  B
            RC=0 - VALID COMMAˇ
              RC=4 - NO COMMAND NAME               06930016         B
              RC=8 - INVALID COMMAND NAME          06940016         LH
SCANRC        RC=12 - SCAN ERROR             ˇ
C'SCAN'          IN WHICH CASE, BLOW UP              06960016         LA
                                                     06970016         B
R                                                    0698001ˇ
                                                       06990016SCANX8
                  COMMAND IS SYNTACTICALLY INVALID     07000016
,SYNMSG                                                07010016
#0,L'SYNMSG                                              07020016
#14,PUTLINE         DISPLAY ERROR MESSAGE                07030016
#1,FLUSHALL                                              07040016
#14,FLUSH ˇ
  PROCXC                                                   07060016
E                                                          07070016SCANX
  0H                  COMˇ
AS  #14,CKCMD           CHECK VALIDITY OF COMMAND            07090016
R   #15,#15             IF COMMAND IS NOT VALID,             07100016
Z   PROCXC              THEN CONTINUE WIˇ
#BAS  #14,ATTACH          ELSE INVOKE THE COMMAND              07120016
TM    ZTFLAGS,ZTSUBER     IF SUBROUTINE ERROR,                 07130016
BO    ERROR               THEN GO TO DISPLAY MESSAGE   +
  B     PROCXC              ELSE GO TO GET THE NEXT Cˇ
    SPACE 2                                                        07160
    LA    #1,=C'PUTGET'       FATAL PUTGET ERROR                   07170
    LA    #0,6                                                     0ˇ
      B     ERROR                                                    071
      EJECT                                                          072
CMDS  DS    0H                  NO MORE COMMANDS TO PROCESS          072
   ˇ
        ICM   #15,7,ECTRTCD       PICK UP RETURN CODE FROM ECT         0
        ST    #15,ZTRETCD         SAVE THE RETURN CODE                 0
        SPACE     ˇ
6***********************************************************************
6* AT THIS POINT, TO INSURE CORRECT COMMAND STATISTICAL RECORDING, WE  *
6* DO VARIOUS STUFF FOR TSO/MON. ˇ
016* DRAPER, I HAVE OMITTED THIS CODE, BUT MAY ADD SVC109 INTERFACE SOON
016*********************************************************************
016         SPACE                               ˇ
10016         B     RETURN              RETURN TO CALLING PROGRAM
20016         EJECT
30016ERROR    DS    0H                  DISPLAY ERROR MESSAGE Aˇ
7340016         SPACE
7350016*****************************************************************
7360016* MISCELLANEOUS ERROR DISPLAY.
 07370016* #0 CONTAINS LENGTH OF NAME OF FUNCTION THAT FAILED
 07380016* #1 CONTAINS ADDRESS OF NAME OF FUNCTION THAT FAILED
 07390016* #15 CONTAINS RETURN CODE FROM FAILED FUNCTION
 07400016****ˇ
** 07410016         SPACE
   07420016         MVC   ZTMSG(L'ERRMSG1),ERRMSG1  SET UP FIRST PART OF
   07430016         LTR   #1ˇ
     07440016         BNP   AFTFUNC             IF NONE, BYPASS
     07450016         BCTR  #14,0               ELSE REDUCE LENGTH FOR E
     07460016         EX    #14,MOVEFUNC   ˇ
SSAGE  07470016AFTFUNC  LA    #1,ZTMSG+L'ERRMSG1+1(#14)  POINT TO NEXT P
ESSAGE 07480016         MVC   0(L'ERRMSG2,#1),ERRMSG2    SET UP SECOND P
ESSAGE 07490016         CVD   #15,ZTDOUBLE               Cˇ
 DISPLAY 07500016         UNPK  L'ERRMSG2(2,#1),ZTDOUBLE
         07510016         OI    L'ERRMSG2+1(#1),X'F0'
         07520016         LA    #0,L'ERRMSG1+L'ERRMSG2+3(#14)  GET LENGT
SG IN #0   07530016ˇÁ
SAGE ALREADY IN WORKAREA 07540016         #BAS  #14,PUTLINE         DISP
MESSAGE                  07550016         LA    #1,FLUSHALL
                         07560016 ˇ
INPUT STACK                07570016         B     RETURN              RE
CALLING PROGRAM            07580016         SPACE
                           07590016MOVEFUNC MVC  ˇ
VE FUNCTION TO ERROR MESSAGE 07600016         EJECT
                             07610016***********************************
**************************** 07620016* THE SCAN SUBROUTINE INVOKˇ
 TSO SERVICE ROUTINE TO      * 07630016* DETERMINE THE NATURE OF THE NEX
D IN THE TSO COMMAND         * 07640016* BUFFER.  ON ENTRY #1 CONTAINS T
SS OF THE COMMAND BUFFER TO  * 07650016* BE SCANNED.  ON RETURN THE FIEL

SS THE OPERAND IS MISSING OR   * 07670016* SYNTACTICALLY INVALID.  #15 I
 ZERO IF THE OPERAND IS A      * 07680016* SYNTACTICALLY VALID COMMAND N
F IT IS MISSINˇ
OR RETURN CODE IS PASSED BACK    * 07700016* FROM IKJSCAN.  IF THE OPERA
RECEDED BY A PERCENT SIGN (%),   * 07710016* THE FLAG ZTEXEC IS SET ON;
E IT IS SET OFF.  IF THERE ARˇ
MMAND BUFFER FOLLOWING THE         * 07730016* CURRENT ONE, THE ECTNOPD
THE ECT IS SET ON.                 * 07740016***************************
************************************ 0775001ˇ
                                       07760016SCAN     DS    0H
                                       07770016         ST    #14,ZTSCAN
  SAVE RETURN REGISTER                 07780016         MVIˇ
    SET COMMAND NAME FIELD TO BLANKS     07790016         MVC   ZTCOMMND
COMMND                                   07800016         NI    ZTFLAGS,
EC  ASSUME NOT AN IMPLICIT EXEC FOR NOW  07810016         NI    ECTSWS,2
NOPD  SET ECT NO-OPERANDS BIT OFF          07820016         ST    #1,CSP
      SET COMMAND BUFFER ADDRESS FROM PARM 07830016         XC    ZTECB,
      CLEAR ECB                            07840016         INSYS
         ˇ
N,MF=(E,CSPL)  CALL IKJSCAN TO SCAN BUFFER   07860016         OUTSYS
                                             07870016         STH   #15,
        SAVE IKJSCAN RETˇ
          IF SCAN FAILED,                      07890016         BZ    SC
          THEN...                              07900016         LA    #1
           INDICATE SCAN FAILURE       +
             AND RETURN. ELSE...     ˇ
              CHECK RESULTS OF SCAN                07930016         TM
G,CSOAQM+CSOABAD IF ANY SYNTAX ERROR               07940016         BNZ
D             THEN RETURN INDICATING BAD SYNTAX    0ˇ
FLG,CSOANOC     IF NO COMMAND NAME WAS FOUND,        07960016         BN
OC              THEN...                              07970016         OI
WS,ECTNOPD       INDICATE ECT NO OPERANDS            07980016      ˇ
5,4                RETURN INDICATING NOTHING FOUND     07990016
ANRET             ELSE...                              08000016NOTNOC
                  (AN OPERAND EXISTS)                  08010016
,Cˇ
#1,#1               IF LENGTH IS ZERO,                   08030016
SCANBAD             THEN...                              08040016
#15,CSOACNM      ˇ
  #1,0                REDUCE OPERAND LENGTH FOR EXECUTE    08060016
  #1,MOVECMD          MOVE OPERAND TO COMMAND NAME AREA    08070016
  #15,#15             INDICATE Vˇ
    CSOAFLG,CSOAEXEC    IF COMMAND PRECEDED BY % SIGN,       08090016
    *+8                 THEN...                              08100016
    ZTFLAGS,ZTEXEC       INDICATE IMPLICIT EXECˇ
TM    CSOAFLG,CSOAVNP     IF THERE ARE NO FURTHER OPERANDS,    08120016
BNO   *+8                 THEN...                              08130016
OI    ECTSWS,ECTNOPD       SAY SO IN ECT                      ˇ
  B     SCANRET             RETURN                               0815001
  DS    0H                  SYNTAX ERROR                         0816001
  LA    #15,8               RETURN INDICATING BAD SYNTAX         0817001
*** B     SCANRET                                                  08180
ET  L     #14,ZTSCAN14        RESTORE RETURN REGISTER              08190
    BR    #14                 RETURN                               08200
    SPACE 2 ˇ
ECMD  MVC   ZTCOMMND(0),0(#15)  MOVE COMMAND NAME TO NAME AREA       082
      SPACE                                                          082
      LTORG                ˇ
        EJECT                                                          0
KCMD    DS    0H                                                       0
        SPACE                             ˇ
6         ST    #14,ZTCKCM14        SAVE RETURN REGISTER
6         NI    ZTFLAGS,255-ZTSUBER TURN OFF ERROR INDICATOR
6         NI    ZTFLAGS,255-ZTAUTH  Also assume not APF a uthorized
016ˇÁ
         08310016         BO    IMPLICIT            THEN PROCESS AS ONE.
         08320016         CLC   ZTCOMMND(8),=CL8'ISPEXEC '  IF COMMAND =
         08330016 ˇ
           08340016*
           08350016******** BE    PROCESS_ISPEXEC_COMMAND future enhance
           08360016*             ˇ
             08370016         MVC   ZTMODULE,ZTCOMMND   ELSE SET COMMAND
SAME NAME    08380016         OI    ZTFLAGS,ZTECTMOD    INDICATE ECT HAS
ANGED        08390016         MVC   ECTPCMD,ZTMOˇ
E              08400016         MVI   ECTSCMD,C' '        CLEAR ECT SUBC
AME TO BLANKS  08410016         MVC   ECTSCMD+1(7),ECTSCMD
               08420016         CLC   =C'TIME ',ZTMODULE  IF COˇ
                 08430016         BNE   NOTTIME             THEN
                 08440016         MVC   ZTMODULE,=CL8'IKJEFT25' SET MODU
= IKJEFT25       08450016         B     TSEVENT                 AND PROC
THOUT SEARCHING    08460016NOTTIME  CLC   =C'CALL ',ZTMODULE  IF COMMAND
                   08470016         BNE   NOTCALL             THEN
                   08480016******** MVC   ZTMODULE,=CL8'ISPCALL ' SET MO
E = ISPCALL  ˇ
AME = IKJEFG00       08500016         B     TSEVENT                 AND
WITHOUT SEARCHING    08510016NOTCALL  CLC   =C'TEST ',ZTMODULE  If comma
T                    0852001ˇ
                       08530016         ICM   #15,15,ZTE2ADDR      If we
ave addr of IKJEFTE2   08540016         BZ    NGCMD                then
E, can't invoke TEST   08550016         OI ˇ
te APF authorization req 08560016         B     TSEVENT              and
 without searching.      08570016NOTTEST  DS    0H
                         08580016         SPACE 1         ˇ
                           08590016*************************************
************************** 08600016*
                         * 08610016* Before searching for the command, s
the table of authorized    * 08620016* TSO commands to see if it require
thorization.  If it does,  * 08630016* indicate so.  We will still have
h for it.                  * 08640016*
        ˇ
****************************** 08660016         SPACE 1
                               08670016         ICM   #15,15,ZTE2ADDR
dress of IKJEFTE2      +
one, not TSO/E, not aˇ
int to first entry                 08700016E2LOOP   DS    0H
op                                 08710016         CLI   0(#1),C' '
ntil blank entry found             0ˇ
 at which point it's not authorized  08730016         CLC   0(8,#1),ZTMO
 but if we found the module name     08740016         BE    NEEDAUTH
 then mark it authorized             08750016      ˇ
   else bump to next entry             08760016         B     E2LOOP
   and continue.                       08770016NEEDAUTH DS    0H
  Here if module is in E2 table        08780016         OI    ZTFLˇ
    Indicate APF authorization required  08790016*
                                         08800016* ... we should probabl
 the search - TSO service'll do it NEhow 08810016*
 ˇ
      Here if module is not authorized     08830016         SPACE 1
                                           08840016*********************
****************ˇ
 POSSIBLE TO INSERT SOME ALTERNATE COMMAND * 08860016* VALIDATION CODE S
N ACF2 COMMAND VALIDATION SVC.  HOWEVER,   * 08870016* WE WILL EMULATE T
ND ISPF COMMAND SEARCH CODE INSˇ
********************************************** 08890016         SPACE
                                               08900016         STM   #8
ISAVE     Save ZIL registers                  ˇ
MODULE      LOAD COMMAND NAME INTO PARM REGS     08920016         STM
(#13)       SAVE REGISTERS USED BY LPA SEARCH    08930016         L
            #3 = CVT ADDRESS                     08940016    ˇ
160'(,#3)     #15 -> LPA DIRECTORY SEARCH ROUTINE  08950016         INSY
                                                   08960016         #BAS
5             CALL LPA DIRECTORY SEARCH            08970016*************
**************************************************** 08980016* IF THE CO
ME IS FOUND IN THE LPA DIRECTORY, CONTROL RETURNS  * 08990016* TO THE NE
NTIAL INSTRUCTION AND #14 IS SET TO ZERO.  IF THE  * 09000016* COMMAND N
NOT BEEN FOˇ
 AND #14 IS NONZERO.                                 * 09020016*********
****************************************************** 09030016
4,0               IF SUCCEˇ
#3,#9,32(#13)       RESTORE REGISTERS USED BY LPA SEARCH 09050016
#8,#11,ZLCISAVE     Restore ZIL registers                09060016
                                                          09070016ˇÁ
         LTR   #14,#14             IF COMMAND NAME WAS FOUND,
6         BZ    TSEVENT             THEN GO AHEAD AND USE IT. ELSE...
6*
6*ˇ
016*
016******** LA    #0,ZTMODULE         SET EPLOC PARAMETER FOR IDENTIFY
016******** XR   ˇ
40016******** IDENTIFY ENTRY=(1),EPLOC=(0) SEE IF ENTRY NAME IS AROUND
50016******** CH    #15,=H'8'           IF RC=8, COMMAND IS IN JPA
60016******** BE    TSEVENT     ˇ
9170016******** CH    #15,=H'20'          IF RC=20, COMMAND IS IN JPA
9180016******** BE    TSEVENT             SO GO USE IT
9190016         MVC   ZTBLDNAM,ZTMODULE   If noˇ
 09200016         L     #0,LINKDCB          Get address of link list DCB
 09210016         BLDL  (0),ZTBLDL          Find member in linklist, not
 09220016         LTR   #15,#15             SEE IF BLDL SUCCESˇ
   09230016         BZ    TSEVENT             IF BLDL SUCCESSFUL, IT IS
D  09240016******** BNZ   IMPLICIT            IF BLDL FAILED, IT MUST BE
   09250016         SPACE
     09260016IMPLICIT DS    0H                  LOAD MODULE NOT FOUND, M
LIST 09270016         MVC   ZTMODULE,=CL8'EXEC' SET COMMAND NAME = "EXEC
     09280016         NI    ZTFLAGS,255-ZTAUTH  Show not APF authorized
l    0929001ˇ
       09300016         LTR   #15,#15             IF ZERO OFFSET, THEN I
       09310016         BNP   AFTBLNKX
       09320016         BCTˇ
         09330016         BCTR  #15,0               AND FOR MOVE CHARACT
         09340016         MVI   4(#5),C' '          SET BUFFER PRECEDING
AME      09350016         EX    #15,MVCBLAˇ
           09360016AFTBLNKX XC    2(2,#5),2(#5)       SET COMMAND BUFFER
= ZERO     09370016         OI    ZTFLAGS,ZTECTMOD    INDICATE ECT HAS B
GED        09380016         MVC   ECTPCMD,ZTMODULE    SETˇ
             09390016         MVI   ECTSCMD,C' '        CLEAR ECT SUBCOM
E TO BLANKS  09400016         MVC   ECTSCMD+1(7),ECTSCMD
             09410016         SPACE
               09420016TSEVENT  DS    0H                  NOW WE ARE REA
SUE COMMAND    09430016         SPACE
               09440016*************************************************
*******+
D.   ˇ
VER, EXISTING    * 09470016* TSO MONITORING PRODUCTS USE THE SVC 95 INTE
LY, EVEN THOUGH  * 09480016* THE SVC 109 INTERFACE IS PARTICULARLY SUITE
PLICATIONS SUCH  * 0ˇ
MAND INVOCATIONS.  * 09500016*******************************************
******************** 09510016         SPACE
                     09520016      ˇ
                       09530016         L     #15,ECTPCMD+4
                       09540016         TSEVENT PPMODE            TELL S
 THE COMMAND           09550016         XR    #15,ˇ
MAND IS OK               09560016         B     CKCMDRET            AND
                         09570016         SPACE
                         09580016NGCMD    DS    0H               ˇ
T VALID (TEST, ISPEXEC)    09590016         MVC   ZTMSG(L'TESTMSG1),TEST
VE BEGINNING OF MESSAGE    09600016         MVC   ZTMSG+L'TESTMSG1(8),ZT
MOVE IN COMMAND NAME       09610016         LA    #1,ZTMSG+L'TESTMSG1 PO
ˇ
T FOR NAME LENGTH            09630016NGLOOP   CLI   0(#1),C' '
 FIRST BLANK                 09640016         BE    NGBLANK
NG COMMAND NAMEˇ
L                              09660016         BCT   #14,NGLOOP
GTH OF NAME EXHAUSTED          09670016NGBLANK  DS    0H
                              ˇ
2  MOVE END OF MESSAGE           09690016         LA    #0,L'TESTMSG2(,#
OF MESSAGE                       09700016         LA    #14,ZTMSG
S BEGINNING OF MESSAGE           09710016    ˇ
VES LENGTH OF MESSAGE              09720016         XR    #1,#1
DICATE MESSAGE ALREADY BUILT       09730016         #BAS  #14,PUTLINE
SPLAY ERROR MESSAGE                09740016         LA    #1ˇ
SET ECT RETURN CODE TO 12            09750016         STCM  #1,7,ECTRTCD
AS IF COMMAND NOT FOUND              09760016         LA    #1,FLUSHALL
                                     09770016         #BAS  #14,FLUSH
  AND FLUSH THE INPUT STACK            09780016         LA    #15,8
  INDICATE COMMAND INVALID             09790016CKCMDRET L     #14,ZTCKCM
  RESTORE RETURN REGISTER              09800016         BR    #14
  RETURN  ˇ
                                         09820016MVCBLANK MVC   5(0,#5),
    FINISH MOVING BLANKS INTO CMD BUFFER 09830016         SPACE
                                          09840016ˇÁ
C'ZILTSO02 ZIL TSO DOES NOT SUPPORT THE '                09850016TESTMSG
C' COMMAND'                                              09860016
                                                         09870016 ˇ
G                                                          09880016
T                                                          09890016ATTAC
  0H                                                       09900016
Eˇ
************************************************************ 09920016*
                                                           * 09930016* T
outine does one ˇ
                                                             * 09950016*
the command requires APF authorization, invokes the TSO      * 09960016*
horized Service Facility to invˇ
therwise, attaches the command as a subtask directly.          * 0998001
                                                               * 0999001
**********************************************ˇ
    SPACE                                                          10010
    ST    #14,ZTATT14         SAVE RETURN REGISTER                 10020
    SPACE                                                    ˇ
      TM    ZTFLAGS,ZTAUTH      If command requires authorization    100
      BO    ATTTSF              then go invoke TSO service facility  100
      SPACE                                                          100
        XC    ZTCMDECB,ZTCMDECB   CLEAR ATTACH ECB                     1
        XC    ZTATNECB,ZTATNECB   CLEAR ATTENTION ECB                  1
        NI    ZTFLAGS,255-ZTSUBER CLEAR ERROR FLAG                     1
        MVIˇ
6         NI    ECTSWS2,255-ECTNOQPR ENABLE "? PROMPT HELP"
6         L     #2,LINKDCB          Get address of linklist DCB
6         LOAD  EPLOC=ZTMOˇ
016         LA    #1,CPPL             POINT TO CPPL
016         ATTACH EPLOC=ZTMODULE,SF=(E,ZTATTACH),ECB=ZTCMDECB,
016               DCB=(#2),              ˇ
60016               ESTAI=(STAIEXIT,(#12))     ATTACH THE COMMAND
70016         LTR   #15,#15             IF ATTACH FAILED,
80016         BZ    ATTACHOK            THEN            ˇ
0190016         LA    #1,=C'ATTACH'        BLOW UP
0200016         LA    #0,6
0210016         OI    ZTFLAGS,ZTSUBER                                  +
 10220016         B     ATTRET                                       ˇ
   10230016ATTACHOK DS    0H
   10240016         LR    #2,#1               SAVE TCB ADDRESS
   10250016         USING TCB,#2
   1ˇ
     10270016         MVC   ECTRTCD,TCBCMPC     MOVE TCB COMPLETION CODE
     10280016         MVI   ECTRCDF,0           INIT ECT CP = NOT ABENDE
     10290016      ˇ
       10300016         XC    ZTECB,ZTECB         CLEAR ECB
       10310016         INSYS
       10320016         CALLTSSR Eˇ
 USE     10330016         OUTSYS
         10340016         ST    #15,ZTDAIRRC        SAVE DAIR RETURN COD
         10350016         OI    ZTFLAGS,ZTDETACH ˇ
S          10360016         LA    #1,DA2CTCB          POINT TO TCB ADDRE
           10370016         DETACH (1),STAE=YES       DETACH THE COMMAND
           10380016         NI    ZTFLAGS,255-ZTDETACH INDICATE ˇ
PROGRESS     10390016         CH    #15,=H'4'           IF DETACH FAILED
             10400016         BNH   DETACHOK
             10410016         LA    #1,=C'DETACH'        BLOW UP

               10430016         OI    ZTFLAGS,ZTSUBER
               10440016         B     ATTRET
              ˇ
                 10460016DETACHOK DS    0H                  NOW, CHECK D
TER DETACH       10470016         DELETE EPLOC=ZTMODULE     Delete what
d before.        10480016    ˇ
E NOT ZERO,        10490016         BZ    DAIROK              THEN...
                   10500016         LA    #1,=C'DAIR'          BLOW UP
                   10510016         LA    #0ˇ
                     10520016         OI    ZTFLAGS,ZTSUBER
                     10530016         B     ATTRET
                     10540016DAIROK   DS    0H             ˇ
                       10550016         SPACE
                       10560016         CLI   ZTSTATUS,ZTATTN     IF COM
MINATED BY ATTENTION,  10570016         BE    ATTFLUSH            THEN F
HE INPUT STACK           10580016         CLI   ZTSTATUS,ZTABEND    ELSE
COMMAND ABENDED,         10590016         BNE   ATTRET              THEN
                         10600016ABFLUSH  OI    ECTRCDF,X'80'        IND
 ABENDED  IN ECT          10610016ˇÁ
     FOR ABEND, DO NORMAL STACK FLUSH    10620016         B     FLUSHCMD
     AND FLUSH THE INPUT STACK.          10630016ATTFLUSH LA    #1,FLUSH
    FOR ATTN, DO EVEN IF CONTROL=NOFLUSH 10640016Fˇ
      FLUSH THE INPUT STACK                10650016ATTRET   L     #14,ZT
      RESTORE RETURN REGISTER              10660016         BR    #14
      RETURN                               10670016         SPACEˇ
                                             10680016ATTTSF   DS    0H
        Here if command is APF authorized    10690016         SPACE
                                             10700016         XR    #0,#
ˇ
          Initialize TSO command return code   10720016         ST    #0
          Initialize TSO command reason code   10730016         ST    #0
          Initiˇ
AGS         Point to flags                       10750016         ST
P1          Store parameter 1                    10760016         L
BUF         Get address of comˇ
#2)           Point to command buffer text         10780016         ST
SFP2          Store parameter 2                    10790016         LH
#2)           Get length of command buffer   ˇ
H'4'            Adjust length to length of text      10810016         ST
TTSFLEN         Store length                         10820016         LA
TTSFLEN         Get address of length                1083001ˇ
,ZTTSFP3          Store parameter 3                    10840016
,ZTTSFRC          Point to where to store return code  10850016
,ZTTSFP4          Store parameter 4                    10860016
#1,ZTTSFRS          Point to where to store reason code  10870016
#1,ZTTSFP5          Store parameter 5                    10880016
#1,ZTTSFAC          Point to where to store abend code   10890016
#1,ZTTSFP6ˇ
  ZTTSFP6,X'80'       Set VL bit                           10910016
  #1,ZTTSFP1          Point to parameter list              10920016
  #15,X'10'           Getˇ
    #15,CVTTVT-CVT(,#15) Get address of TSVT                 10940016
    #15,TSVTASF-TSVT(,#15) Get address of IKJEFTSR           10950016
SYS                                     ˇ
#BASR #14,#15             Call IKJEFTSR                        10970016
OUTSYS                                                         10980016
SPACE                                                  +
ow process all those godawful return codes.  Who desiˇ
    SPACE                                                          11010
    B     TSFRC(#15)          Branch depending on return code      11020
    B     TSFRC0              0 = OK                               1ˇ
      B     TSFRC4              4 = nonzero return code from command 110
      B     TSFRC8              8 = attention interrupt              110
      B     TSFRC12             12 = abend                           110
   ˇ
        B     TSFRC20             20 = error in parameter list         1
        B     TSFRC24             24 = unexpected TSO failure          1
        B     TSFRˇ
6         SPACE
6TSFRC0   EQU   ATTRET              0 = OK
6TSFRC4   EQU   ATTRET           ˇ
016         SPACE
016TSFRC8   DS    0H                  8 = attention interrupt
016         SPACE                               ˇ
60016         MVI   ZTSTATUS,ZTATTN     INDICATE ATTENTION INTERRUPT
70016         MVC   ZTMSG(L'ATNMSGID),ATNMSGID   SET UP BEGINNING OF MES
80016         MVC   ZTMSG1(8),ECTPCMD            PUT COMMAND NAˇ
1190016         MVC   ZTMSG1+8(L'ATTNMSG),ATTNMSG  SET UP NEXT PART OF M
1200016         LA    #0,L'ATNMSGID+8+L'ATTNMSG    GET LENGTH OF ATTENTI
1210016         XR    #1,#1               INDICATE MESSAGE SET UP
 11220016         #BAS  #14,PUTLINE         CALL PUTLINE TO DISPLAY THE
 11230016         B     ATTFLUSH            Return to flush stack for at
 11240016         SPACE
 11250016TSFRˇ
   11260016         SPACE
   11270016         MVI   ZTSTATUS,ZTABEND    INDICATE COMMAND ABENDED
   11280016         MVC   ZTˇ
     11290016         SPACE
     11300016***********************************************************
**** 11310016* DISPLAY "ENDED DUE TO ERROR"ˇ
     * 11320016*********************************************************
****** 11330016         SPACE
       11340016         MVC   ZTMSG(L'ABEMSGID),ABEMSGID  ˇ
 MESSAGE 11350016         MVC   ZTMSG1(8),ECTPCMD            PUT COMMAND
 MESSAGE 11360016         MVC   ZTMSG1+8(L'ABEMSG1),ABEMSG1  SET UP NEXT
 MESSAGE 11370016         CLC   ZTABCODE,=X'000FFF'          IF CODE GRE
HAN 4095   11380016ˇÁ
N MUST BE A SYSTEM ABEND 11390016         MVC   ZTMSG2(6),=C'SYSTEM'
SAY SO                   11400016         MVC   ZTMSG2+6(L'ABEMSG2),ABEM
ISH UP MESSAGE           11410016 ˇ
UT ABEND CODE IN HEX IN    11420016         MVZ   ZTSYSTEM(3),=X'000000'
                           11430016         TR    ZTSYSTEM(3),=C'0123456
F'                         11440016         LA   ˇ
 GET LENGTH OF MESSAGE       11450016         B     TSFANYAB
 GO TO DISPLAY IT            11460016TSFUSRAB MVC   ZTMSG2(4),=C'USER'
 ELSE SAY IT'S A USER ABEND  11470016         MVC   ZTMSG2+4(L'Aˇ
2  FINISH UP MESSAGE           11480016         XR    #0,#0
                               11490016         ICM   #0,7,ZTABCODE
   GET NUMERIC USER ABEND CODE 11500016         CVD   #0,ZTDOUBLE

                                 11520016         OI    ZTUSER+3,X'F0'
                                 11530016         LA    #0,ZTUSERL
     GET LENGTˇ
                                   11550016         XR    #1,#1
DICATE MESSAGE SET UP              11560016         #BAS  #14,PUTLINE
LL PUTLINE TO DISPLAY THE MESˇ
                                     11580016TSFRC16  DS    0H
16 = parm address in protected stg.  11590016TSFRC20  DS    0H
20 = error in parameter list         1160001ˇ
  24 = unexpected TSO failure          11610016TSFRC28  DS    0H
  28 = AMODE 24 but parms are AMODE 31 11620016         LA    #1,=C'IKJE
  FATAL TSO SERVICE FACILITY ERROR     11630016         LA ˇ
                                         11640016         B     ERROR
                                         11650016         SPACE
                                         11660016TSFFLAGS DS    0F
      First parm to IKJEFTSR (flags)       11670016         DC    X'0000
      First 2 bytes must be zeroes         11680016         DC    X'01'
      Take a dump in case of ABEND         11690016         DC    X'01'
      Invˇ
        (so stacked commands are handled     11710016*
         by us instead of IKJEFTSR)          11720016         EJECT
                        ˇ
********************************************** 11740016* THIS SUBROUTINE
A PUTGET MACRO INSTRUCTION TO DISPLAY A MODE * 11750016* MESSAGE (WHERE
ATE) AND RETRIEVE A COMMAND LINE FROM T+
UT.  IF THE PUTGET RETURNS WITH A CODˇ
OND-LEVEL MESSAGE CHAIN IS AVAILABLE BUT THE     * 11780016* USER IS IN
AND THE "NOPAUSE" PROFILE OPTION IS ACTIVE), IT  * 11790016* IS RETRIED
TTING THE BIT IN THE ECT WHICH PURGES            * 1ˇ
AGES.  IF IT RETURNS WITH A CODE OF 24 (INVALID    * 11810016* PARAMETER
ROL IS RETURNED WITHOUT AN ERROR INDICATION - THIS * 11820016* IS USED T
INE IF A CLIST HAS TERMINATED.  THIS "TRICK" WAS   * 11830016* USEDˇ
DULE ISPCAT TO DETERMINE THE END OF A CLIST.         * 11840016*
                                                     * 11850016* UPON RE
 CONTAINS THE ADDRESS OF THE INPUT BUFFER RETURNED   * 11860016* BY PUTG
E ˇ
                                                       * 11880016*******
******************************************************** 11890016
                 ˇ
  0H                                                       11910016
  #14,ZTPG14          SAVE RETURN REGISTER                 11920016PGRET
  0H                            ˇ
I   ZTSTATUS,ZTNORMAL   CLEAR COMMAND STATUS FLAG            11940016
    #5,#5               SET PUTGET BUFFER ADDRESS TO ZERO    11950016
    #5,ZTECB            CLEAR ECB              ˇ
INSYS                                                          11970016
PUTGET PARM=PGPB,MF=(E,IOPL)  ISSUE PUTGET                     11980016
OUTSYS                                                        ˇ
  CH    #15,=H'24'          IF RETURN CODE GREATER THAN 24,      1200001
  BH    PGERROR              THEN BLOW UP                        1201001
  B     PGGO(#15)           ELSE PROCESS EACH POSSIBLE R.C.      1202001
    B     PGGOTLN         0 = LINE CAME FROM TERMINAL              12030
    B     PGGOTLN         4 = LINE CAME FROM IN-STORAGE LIST       12040
    B     PUTGET8         8 = ATTENTION INTERRUPTION               12050
    B     PUˇ
      B     PGERROR        16 = ERROR                                120
      B     PGERROR        20 = ERROR                                120
      B     PGRETURN       ˇ
        SPACE                                                          1
UTGET8  MVI   ZTSTATUS,ZTATTN     RC=8: INDICATE ATTENTION INTERRUPT   1
        B     PGRETURN              AND REˇ
6PUTGET12 TM    ECTMSGF,X'80'       RC=12: IF 2ND-LVL MSGS ALRDY PURGED,
6         BO    PGERROR                    THEN UNRECOVERABLE ERROR
6         OI    ECTMSGF,X'80'         ELSE PURGE 2ND-LEVE L MESSAGE CHA
016ˇÁ
         12160016PGERROR  DS    0H                  BAD RETURN CODE?
         12170016         CH    #15,=H'40'          If RC = 40 (SUBSTACK
arrier)  12180016 ˇ
l handle   12190016         OI    ZTFLAGS,ZTSUBER     Else bad RC, unrec
 error     12200016         B     PGRETURN            SO JUST RETURN.
           12210016PGGOTLN  L    ˇ
PUT BUFFER   12220016PGRETURN L     #14,ZTPG14          RESTORE RETURN R
             12230016         BR    #14                 RETURN
             12240016         EJECT             ˇ
               12250016*************************************************
************** 12260016* THIS ROUTINE DISPLAYS MESSAGES TO THE TSO USER
E TSO        * 12270016* PUTLINE SERVICE ROUTINE.  AT ENTRY #1 ˇ
DRESS OF THE   * 12280016* MESSAGE TO BE DISPLAYED, AND #0 CONTAINS THE
F THE MESSAGE. * 12290016* IF #1 IS ZERO, THE MESSAGE HAS ALREADY BEEN B
THE WORKAREA   * 12300016* ZTMSG.  THE MESSAGE IS ASSUMED TO BEGIN WITH
AGE ID UNLESS    * 12310016* THE FIRST CHARACTER IS BLANK, IN WHICH CASE
TIAL BLANK IS    * 12320016* STRIPPED OFF BY PUTLINE ANYHOW.
                 * 12330016* NOTE THAT THIS SUBROUTINE ESTABLISHES ITS O
REGISTER.  THˇ
CEPT ROUTINES      * 12350016* WHERE THE NORMAL BASE REGISTER IS UNAVAIL
                   * 12360016*******************************************
******************** 1237001ˇ
                       12380016PUTLINE  DS    0H
                       12390016         ST    #14,ZTPUTL14        SAVE R
GISTER                 12400016         LTRˇ
VALUE                    12410016         BNP   PUTLRET             IF Z
'T DO ANYTHING           12420016         BCTR  #15,0               ELSE
LENGTH FOR EXECUTE       12430016         LTR   #1,#1     ˇ
ERO,                       12440016         BZ    PUTIT               TH
GE ALREADY SET UP. ELSE... 12450016         EX    #15,MOVEPUT         MO
GE TO WORK AREA            12460016PUTIT    DS    0H
                             12470016         LA    #15,5(,#15)
LENGTH + 4 FOR HEADER        12480016         SLL   #15,16
NGTH INTO LEFT HALF OF HDR   12490016         STCM  #15,15,ZTMSGHDR
ES INTO ˇ
ECB                            12510016         INSYS
                               12520016         PUTLINE PARM=PTPB,MF=(E,
SSUE PUTLINE           +
                     ˇ
 PUTLINE OK                        12550016         BZ    PUTLRET
EN RETURN                          12560016         CH    #15,=H'8'
SE IF ATTENTION INTERRUPT          1ˇ
THEN                                 12580016         MVI   ZTSTATUS,ZTA
 INDICATE SO                         12590016         B     PUTLRET
ELSE PUTLINE ERROR                   12600016PUTERRˇ
                                       12610016         LA    #0,L'BADPU
                                       12620016         TPUT  (1),(0),R
  TELL USER PUTLINE FAILED VIA TPUT    12630016         LA    #1,Zˇ
                                         12640016         LH    #0,ZTMSG
                                         12650016         SH    #0,=H'4'
                                         12660016         TPUT  (1),(0),
 ˇ
      RESTORE RETURN REGISTER              12680016         BR    #14
      RETURN                               12690016         SPACE
                ˇ
1)      MOVE MESSAGE TO WORK AREA            12710016BADPUT   DC    C'ZI
PUTLINE FAILURE, FOLLOWING MESSAGE IS BEING X12720016               ISSU
PUT:'                          ˇ
                                               12740016*****************
********************************************** 12750016* THIS ROUTINE DE
EMENTS FROM THE INPUT STACK.  IT IS USED     *ˇ
THAT WOULD REQUIRE THAT NO MORE COMMANDS IN A  * 12770016* CLIST BE EXEC
T ALSO CLEARS THE TERMINAL INPUT QUEUE SO THAT * 12780016* ADDITIONAL CO
STACKED" WITH FIELD MARKS ARE NOT EXECUTED.    * 12790016* ONˇ
BROUTINE #1 POINTS TO THE LIST FORM OF THE STACK * 12800016* MACRO INSTR
O BE EXECUTED.  NORMALLY STACK DELETE=ALL WILL   * 12810016* BE USED; TH
ES ALL ELEMENTS FROM THE STACK EXCEPT (1) THE    * 12820016* BOTTOM ELEM
2) ANY CLISTS WHICH HAVE CONTROL NOFLUSH OR        * 12830016* CONTROL M
VE.  FOR ATTENTION-PROVOKED FLUSHES, WE USE STACK  * 12840016* DELETE=TO
 DELETES THE TOP ELEMENT FROM THE STACK UNLESS IT  * 12850016* IS A CLIS
ONTROL MAINˇ
****************************************************** 12870016
                                                       12880016FLUSH
                          ˇ
#14,ZTFLSH14        SAVE RETURN REGISTER                 12900016
#2,#1               GET STACK LIST FORM                  12910016
Q INPUT             CLEAR TERMINAL INPUT  QUEUE           12920016ˇÁ
         XC    ZTECB,ZTECB         CLEAR ECB
6         INSYS
6         STACK PARM=(#2),MF=(E,IOPL)  FLUSH THE STACK
6 ˇ
016         LTR   #15,#15             IF STACK FAILED
016         BZ    FLUSHRET            THEN SAY SO
016         LA   ˇ
90016         LA    #0,L'BADSTACK
00016         #BAS  #14,PUTLINE
10016FLUSHRET LA    #14,12      ˇ
3020016         ST    #14,ZTRETCD
3030016         L     #14,ZTFLSH14        RESTORE RETURN REGISTER
3040016         BR    #14                 RETURˇ
 13050016         SPACE
 13060016BADSTACK DC    C'ZILTSO07 TSO ERROR FLUSHING STACK'
 13070016         SPACE                                       ˇ
   13080016         LTORG
   13090016         SPACE
   13100016         TITLE 'TSO - STAI EXIT FOR ABENDING COMMANDS'
     13110016STAIEXIT DS    0H
     13120016         DROP  #3,#12
     13130016         USING STAIEXIT,#15
     1314001ˇ
       13150016         CR    #0,#10              IF AN SDWA IS AVAILABL
       13160016         BE    NOSDWA              THEN...
       13170016         L  ˇ
         13180016         L     #11,4(,#1)           #11 = ABEND COMPLET
         13190016         B     AFTSDWA             ELSE...
         13200016NOSDWA   LR    #12,#2    ˇ
           13210016         LR    #11,#1               #11 = ABEND COMPL
DE         13220016         XR    #1,#1                Clear SDWA addres
t none     13230016AFTSDWA  DS    0H                     ˇ
             13240016         LA    #3,4095(,#12)
             13250016         USING TSO,#12
             13260016         USING TSO+4095,#3
               13270016         DROP  #15
               13280016         ST    #1,ZTSDWA           Save address o
               13290016         ST    #14,ZTSTAI14        SAVE RETURN RE
       +
LITY ˇ
ESS                13320016         BZ    NOT33E               AND
                   13330016         CLM   #11,7,=X'33E000'      ABEND CO
3E                 1ˇ
                     13350016         MVC   ZTMSG(L'ATNMSGID),ATNMSGID
BEGINNING OF MESSAGE 13360016         MVC   ZTMSG1(8),ECTPCMD
MAND NAME IN MESSAGE 13370016      ˇ
P NEXT PART OF MESSAGE 13380016         LA    #15,L'ATNMSGID+8+L'ATTNMSG
ENGTH OF ATTENTION MSG 13390016         B     ANYABEND                GO
LAY THE MESSAGE        13400016NOT33E   DS    0H  ˇ
                         13410016         MVI   ZTSTATUS,ZTABEND    INDI
MAND ABENDED             13420016         STCM  #11,7,ZTABCODE      STOR
CODE                     13430016         SPACE                  ˇ
                           13440016*************************************
************************** 13450016* DISPLAY "ENDED DUE TO ERROR" MESSAG
                         * 13460016*************************************
ˇ
                             13480016         MVC   ZTMSG(L'ABEMSGID),AB
 SET UP BEGINNING OF MESSAGE 13490016         MVC   ZTMSG1(8),ECTPCMD
 PUT COMMAND NAˇ
1  SET UP NEXT PART OF MESSAGE 13510016         CLC   ZTABCODE,=X'000FFF
   IF CODE GREATER THAN 4095   13520016         BNH   USRABEND
   THEN MUST BE A SYSTEM ABENDˇ
     SO SAY SO                   13540016         MVC   ZTMSG2+6(L'ABEMS
SG2  FINISH UP MESSAGE           13550016         UNPK  ZTSYSTEM(3),ZTAB
     PUT ABEND CODE IN HEX IN    13560016    ˇ
                                   13570016         TR    ZTSYSTEM(3),=C
789ABCDEF'                         13580016         LA    #15,ZTSYSL
       GET LENGTH OF MESSAGE       13590016         B     ANˇ
         GO TO DISPLAY IT            13600016USRABEND MVC   ZTMSG2(4),=C
         ELSE SAY IT'S A USER ABEND  13610016         MVC   ZTMSG2+4(L'A
ABEMSG2  FINISH UP MESSAGE           13620016         XR    #0,#0
                                       13630016         ICM   #0,7,ZTABC
           GET NUMERIC USER ABEND CODE 13640016         CVD   #0,ZTDOUBL
           CONVERT TO DISPLAY          13650016         UNPK  ZTUSER(4),
          ˇ
                                         13670016         LA    #15,ZTUS
             GET LENGTH OF MESSAGE       13680016ANYABEND DS    0H
                                          13690016ˇÁ
#15,4(,#15)         ADD 4 TO LENGTH FOR HEADER           13700016
#15,16              SHIFT LENGTH INTO LEFT HALF OF HDR   13710016
#15,15,ZTMSGHDR     PUT ZEROES INTO RIGHT HALF OF HDR    13720016 ˇ
  ZTECB,ZTECB         CLEAR ECB                            13730016
INE PARM=PTPB,MF=(E,IOPL)  ISSUE PUTLINE                   13740016
  #15,#15             IF PUTLINE OK                        13750016
 ˇ
    #15,=H'8'           ELSE IF ATTENTION INTERRUPT          13770016
E   STAIPTER            THEN                                 13780016
I   ZTSTATUS,ZTAˇ
B     STAICONT                                                 13800016S
LA    #1,BADPUT           ELSE PUTLINE ERROR                   13810016
LA    #0,L'BADPUT              ˇ
  TPUT  (1),(0),R           TELL USER PUTLINE FAILED VIA TPUT    1383001
  LA    #1,ZTMSG                                                 1384001
  LH    #0,ZTMSGHDR                           ˇ
    SH    #0,=H'4'                                                 13860
    TPUT  (1),(0),R           DISPLAY MESSAGE VIA TPUT             13870
TRT DS    0H                                                 ˇ
      SPACE                                                          138
ICONT L     #2,ZTSTAI14         Get return register                  139
      LA    #15,16              Set return code in case no SDWA      139
        ICM   #10,15,ZTSDWA       Get SDWA address                     1
        BZR   #2                  If none, just branch back w/rc=16    1
        SETRP WKAREA=(#10),RC=16  Let ABEND continue without ESTAI     1
        BR ˇ
6         SPACE
6ABEMSGID DC    C'ZILTSO03 '
6ABEMSG1  DC    C' ENDED Dˇ
016ABEMSG2  DC    C' ABEND CODE '
016         SPACE
016ATNMSGID DC    C'ZILTSO04 '           ˇ
10016ATTNMSG  DC    C' TERMINATED BY ATTENTION INTERRUPTION'
20016         SPACE
30016         LTORG                                     ˇ
4040016         SPACE
4050016         TITLE 'TSO - STAE EXIT FOR INTERNAL ABEND'
4060016STAEEXIT DS    0H                                               +
 14070016         DROP  #3,#12                                       ˇ
   14080016         USING STAEEXIT,#15
   14090016         LA    #10,12              CHECK IF REGISTER 0 = "12"
   14100016         CR    #0,#10              IF AN SDWA IS AVAILABLE,
   1ˇ
     14120016         L     #12,0(,#1)           #12 -> WORKAREA
     14130016         B     AFTSDWAE            ELSE...
     14140016NOSDWAˇ
       14150016AFTSDWAE DS    0H
       14160016         LA    #3,4095(,#12)
       14170016         USING TSO,ˇ
         14180016         USING TSO+4095,#3
         14190016         DROP  #15
         14200016         L     #4,CPPLECT       ˇ
O ECT      14210016         MVC   ECTIOWA(4),ZTSVIOA  RESTORE ECT INPUT
DRESS      14220016         MVC   ECTPCMD(16),ZTCMDS  RESTORE ECT COMMAN
MAND NAMES 14230016         XR    #15,#15             CONTINUE Wˇ
ERMINATION   14240016         BR    #14                 AND RETURN
             14250016         SPACE
             14260016         LTORG

               14280016         TITLE 'TSO - STAX EXIT FOR ATTENTION INT
               14290016STAXEXIT DS    0H
              ˇ
                 14310016         DROP  #3,#12
                 14320016         USING STAXEXIT,#15
                 14330016    ˇ
R PARAMETER LIST   14340016         LA    #3,4095(,#12)
                   14350016         USING TSO,#12
                   14360016         USING TSˇ
                     14370016         DROP  #15
                     14380016         LR    #9,#14              SAVE RET
ESS                  14390016         STATUS STOP          ˇ
ONDISPATCHABLE         14400016         MVI   ZTSTATUS,ZTATTN     INDICA
TION OCCURRED          14410016         POST  ZTECB,0             POST S
OUTINES ECB            14420016         POST  ZTATNECB,0          POST E
 COMMAND ATTACH          14430016         BR    #9                  RETU
STEM                     14440016         SPACE
                         14450016         LTORG
                          14460016ˇÁ
                                         14470016         TITLE 'TSO - D
S'                                       14480016         SPACE
                                         14490016Zˇ
      FOR NUMERIC CONVERSIONS              14500016ZTSCAN14 DS    A
      SAVE AREA FOR SCAN SUBROUTINE        14510016ZTCKCM14 DS    A
      SAVE AREA FOR CKCMD SUBROUTINE       14520016ZTATT14  DS   ˇ
        SAVE AREA FOR ATTACH SUBROUTINE      14530016ZTPUTL14 DS    A
        SAVE AREA FOR PUTLINE SUBROUTINE     14540016ZTPG14   DS    A
        SAVE AREA FOR PUTGET SUBROUTINE      14550016ZTFLSH14 DS    A
ˇ
          SAVE AREA FOR STAI EXIT ROUTINE      14570016ZTECB    DS    F
          ECB FOR TSO SERVICE ROUTINES         14580016ZTCMDECB DS    F
          ECB Fˇ
            ECB FOR ATTENTION INTERRUPTIONS      14600016ZTECBLST DS
            ECB LIST                             14610016ZTE2ADDR DS
            Address of IKJEFTEˇ
              Address of SDWA                      14630016LINKDCB  DS
              Address of SYS1.LINKLIB DCB          14640016         SPAC
                                             ˇ
                COMMAND PROCESSOR PARAMETER LIST     14660016         SP
                                                     14670016***********
**************************************************** 1468001ˇ
S1.MACLIB(IKJCPPL)' BECAUSE THE MACRO FORCES A DSECT * 14690016*********
****************************************************** 14700016*    THE
PROCESSOR PARAMETER LIST (CPPL) IS A LIST OF         * 14710016*    ADDR
PASSED FROM THE TMP TO THE CP VIA REGISTER 1           * 14720016*******
******************************************************** 14730016
                                                         14740016CPPLCBU
A        Pˇ
  A        PTR TO UPT                                      14760016CPPLP
  A        PTR TO PSCB                                     14770016CPPLE
  A        PTR TO ECT    ˇ
ACE 2                                                        14790016IOP
    0F                  I/O SERVICE ROUTINE PARAMETER LIST   14800016
ACE                                     ˇ
************************************************************** 14820016*
FROM 'SYS1.MACLIB(IKJIOPL)' BECAUSE THE MACRO FORCES A DSECT * 14830016*
*******************************************************+
E I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LISTˇ
FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      * 14860
ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     * 14870
****************************************************************** 1ˇ
      SPACE                                                          148
LUPT  DS    A        PTR TO UPT                                      149
LECT  DS    A        PTR TO ECT                                      149
LECˇ
OPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK           1
        SPACE 2                                                        1
APL     DS    0F  ˇ
6         SPACE
6***********************************************************************
6* COPIED FROM 'SYS1.MACLIB(IKJDAˇ
016*********************************************************************
016*    THE DYNAMIC ALLOCATION INTERFACE ROUTINE (DAIR) PARAMETER LIST
016*    (DAPL) IS A LIST OF ADDRESSES PASSED FROˇ
10016*    VIA REGISTER 1
20016*******************************************************************
30016         SPACE                                            ˇ
5040016DAPLUPT  DS    A        PTR TO UPT
5050016DAPLECT  DS    A        PTR TO ECT
5060016DAPLECB  DS    A        PTR TO CP'S ECB
 15070016DAPLPSCB DS    A        PTR TO PSCB
 15080016DAPLDAPB DS    A        PTR TO DAIR PARAMETER BLOCK
 15090016         SPACE
 15100016DAPBˇ
   15110016         SPACE
   15120016*************************************************************
** 15130016* COPIED FROM SYSˇ
T  * 15140016***********************************************************
**** 15150016* THIS OPERATION CODE ALLOWS FOR RE-USE  OF TIOT ENTRIES
   * 15160016* IT IS USED BY THE TMP BEFOREˇ
     * 15170016* WHICH ATTACHES SUB-TASKS
     * 15180016*********************************************************
****** 15190016         SPACE                             ˇ
         15200016DA2CCD   DS    CL2      DAIR ENTRY CODE
         15210016DA2CFLG  DS    H        FLAG FIELD
         15220016DA2CTCB  DS    A        TCB ADDR OF DSE ENTRIES MARKED
 USE       15230016ˇÁ
                         15240016         SPACE
                         15250016ZTNEWECT DS    A                   @ of
ated by ENVIRON=CREATE   15260016Zˇ
E FROM COMMAND             15270016ZTDAIRRC DS    F                   RE
E FROM IKJDAIR             15280016ZTSVIOA  DS    F                   SA
 STACK ADDRESS             15290016ZTSCANRC DS   ˇ
ODE FROM IKJSCAN             15300016ZTOFFSET DS    H
FSET OF POSSIBLE CLIST NAME  15310016ZTCMDS   DS    CL16
T COMMAND AND SUBCOMMAND     15320016ZTCOMMND DS    CL8         ˇ
D NAME FROM SCAN               15330016ZTMODULE DS    CL8
 NAME FOR COMMAND              15340016ZTBLDL   DS    F
IST FOR COMMAND CHECK          15350016ZTBLDNAM DS    CL8

ER FOR BLDL                      15370016ZTABCODE DS    XL3
D CODE STORED BY STAI EXIT       15380016ZTFLAGS  DS    X
S             ˇ
 = IMPLICIT EXEC COMMAND (%)       15400016ZTSTKMOD EQU   B'01000000'
 = ECT INPUT STACK ADDR ALTERED    15410016ZTECTMOD EQU   B'00100000'
 = ECT PCMD/SCMD WAS ALTERED ˇ
 1 = ESTAE SUCCESSFUL                15430016ZTSTXON  EQU   B'00001000'
 1 = STAX SUCCESSFUL                 15440016ZTSUBER  EQU   B'00000100'
 1 = SEVERE ERROR IN SUBROUTINE      1545001ˇ
   1 = DETACH IN PROGRESS              15460016ZTAUTH   EQU   B'00000001
   1 = command requires authorization  15470016ZTSTATUS DS    X
  COMMAND STATUS FLAG                  15480016ZTNORMAL EQUˇ
     COMMAND COMPLETED NORMALLY          15490016ZTATTN   EQU   1
     ATTENTION INTERRUPT OCCURRED        15500016ZTABEND  EQU   2
     ABNORMAL TERMINATION OCCURRED       15510016ZTTSOE   DS    X
      Level of TSO/Extensions active       15520016         SPACE
                                           15530016PTPB     PUTLINE MF=L
(*-*,TERM,SINGLE,INFOR)                    15540016         ORG   PTPB
      PUTˇ
                                             15560016*******************
******************************************** 15570016* COPIED FROM 'SYS1
IKJPTPB)' BECAUSE THE MAˇ
********************************************** 15590016*    THE PUTLINE
R BLOCK (PTPB) IS POINTED TO BY THE PARAM.   * 15600016*    LIST PASSED
NE.  IT IS USED TO RETURN PERTINENT INF+
 PUTLINE FUNCTIONS                   ˇ
************************************************** 15630016         SPAC
                                                   15640016         DS
                                                   1ˇ
     INTERNAL PUTLINE USAGE                          15660016PTPBOPUT DS
     ADDRESS OF OUTPUT LINE DESCRIPTOR OR DATA LINE  15670016PTPBFLN  DS
     PTR TO FORMATTED LINE RETURNED WHEN OUTPUT=     15680016*     ˇ
       ADDR,FORMAT) IS SPECIFIED                       15690016
                                                       15700016
                                                       15710016PGPB
MFˇ
*-PGPB                                                   15730016PGPBSUB
  MF=L,OUTPUT=(*-*,,MODE),SUBSTACK=YES                   15740016PGPBSUB
*-PGPBSUB        ˇ
  PGPB                PUTGET PARAMETER BLOCK               15760016
E                                                          15770016*****
********************************ˇ
OM 'SYS1.MACLIB(IKJPGPB)' BECAUSE THE MACRO FORCES A DSECT * 15790016***
************************************************************ 15800016*
TGET PARAMETER BLOCK (PGPB) IS POINTED TO BY THˇ
ED TO PUTGET.  PUTGET USES IT FOR CONTROL AS WELL AS         * 15820016*
RNING INFORMATION.                                           * 15830016*
**************************************************************ˇ
  SPACE                                                          1585001
  DS    0F                                                       1586001
  DS    CL12     INTERNAL TO GETLINE/PUTLINE                     1587001
BUF DS    A        PTR TO OBTAINED INPUT LINE                      15880
    ORG                                                            15890
    SPACE                                                          15900
IT  STACK MFˇ
SHALL STACK MF=L,DELETE=ALL     NORMAL STACK FLUSH LIST FORM         159
SHTOP STACK MF=L,DELETE=TOP     ATTN STACK FLUSH LIST FORM           159
ECREA STACK MF=L,ENVIRON=CRˇ
TKEDEST STACK MF=L,ENVIRON=DESTROY TSO/E Version 2 ECT remover         1
TKBARR  STACK MF=L,BARRIER=*                                           1
TKDELB  STACK MF=L,DELETE=BARRIER         ˇ
6ZTATTACH ATTACH SF=L,SHSPV=78,SZERO=NO
6ZTESTAE  ESTAE MF=L
6ZTSTAX   STAX  MF=L,REPLACE=NO                          
016ˇÁ
         16010016MODEDATA DC    Y(MODELEN,0)
         16020016MODEMSG  DC    C' TSO'             LEADING BLANK REQUIR
MSGID    16030016Mˇ
           16040016         SPACE
           16050016*****************************************************
********** 16060016* MESSAGES    ˇ
           * 16070016***************************************************
************ 16080016         SPACE
             16090016SYNMSG   DC    C'ZILTSO01 Iˇ
               16100016TERMMSG  DC    C'ZILTSO05 COMMAND INPUT IGNORED,
S TERMINATED'  16110016ERRMSG1  DC    C'ZILTSO06 TSO FAILED, '
               16120016ERRMSG2  DC    C' ERROR CODE '          ˇ
                 16130016         SPACE
                 16140016         LTORG
                 16150016         EJECT
                   16160016         SPACE
                   16170016*********************************************
****************** 16180016* Fields used by the TSO Authorized Service F
             ˇ
******************** 16200016         SPACE
                     16210016ZTTSFP1  DS    A                   TSO Serv
lity parameter 1     1622001ˇ
cility parameter 2     16230016ZTTSFP3  DS    A                   TSO Se
cility parameter 3     16240016ZTTSFP4  DS    A                   TSO Se
cility parameter 4     16250016ZTTSFP5  DS ˇ
Facility parameter 5     16260016ZTTSFP6  DS    A                   TSO
Facility parameter 6     16270016ZTTSFRC  DS    A                   Retu
from TSO command         16280016ZTTSFRS  DS    A         ˇ
e from TSO command         16290016ZTTSFAC  DS    A                   Ab
 from TSO command          16300016ZTTSFLEN DS    A                   Le
command                    16310016         SPACE
                             16320016***********************************
**************************** 16330016* PUTGET MODE MESSAGE AREA
                           * 16340016***********************************
********ˇ
                               16360016ZTPGOLD  DS    A(1)
 OF MESSAGE SEGMENTS           16370016ZTPGPTR  DS    A
S OF THE ONLY MESSAGE S+
AGE HEADER           ˇ
SSAGE TEXT                         16400016         SPACE
                                   16410016*****************************
********************************** 1ˇ
 MESSAGES                          * 16430016* NOTE: THIS IS SET UP FOR
EVEL INFORMATIONAL MESSAGES ONLY.  * 16440016***************************
************************************ 16450016      ˇ
                                       16460016ZTMSGOLD DS    A(1)
  NUMBER OF MESSAGE SEGMENTS           16470016ZTMSGPTR DS    A
  ADDRESS OF THE ONLY MESSAGE SEGMENT  16480016ZTMSGHDR DS    2Y  ˇ
    MESSAGE HEADER                       16490016ZTMSG    DS    CL128
    MESSAGE TEXT                         16500016ZTMSG1   EQU   ZTMSG+L'
    OFFSET OF "ENDED DUE TO ERROR"       16510016ZTMSG2   EQU   ZTMSG1+8
Gˇ
MSG2  OFFSET OF SYSTEM ABEND CODE          16530016ZTUSER   EQU   ZTMSG2
MSG2  OFFSET OF USER ABEND CODE            16540016ZTSYSL   EQU   ZTSYST
SG    LENGTH OF ˇ
SG      LENGTH OF USER ABEND MESSAGE         16560016         SPACE 2
                                             16570016CSPL     DS    0D
        COMMAND SCAN PARAMETER ˇ
                                               16590016*****************
********************************************** 16600016* COPIED FROM 'SY
B(IKJCSPL)' BECAUSE THE MACRO FORCES A DSECT *ˇ
************************************************ 16620016*    THE COMMAN
ARAMETER LIST (CSPL) IS A LIST OF ADDRESSES    * 16630016*    PASSED FRO
VOKER TO COMMAND SCAN VIA REGISTER 1           * 16640016****ˇ
************************************************** 16650016         SPAC
                                                   16660016CSPLUPT  DS
   PTR TO  UPT                                     16670016CSPLECT  DS
     PTR TO  ECT                                     16680016CSPLECB  DS
     PTR TO  CP'S ECB                                16690016CSPLFLG  DS
     PTR TO  FLAG WORD WHICH IS OBTAINED & FREED     16700016*
     BY CALˇ
       COMMAND NAME.                                   16720016CSPLOA
       PTR TO OUTPUT AREA (CSOA DSECT)                 16730016CSPLCBUF
       PTR TO COMMAND BUFFˇ
                                                         16750016CSOA
0H                  COMMAND SCAN OUTPUT AREA             16760016
                                                          16770016ˇÁ
-***********************************************************************
6* COPIED FROM 'SYS1.MACLIB(IKJCSOA)' BECAUSE THE MACRO FORCES A DSECT *
6***********************************************************************
6*ˇ
016*    BY THE CSPL.  IT IS USED BY COMMAND SCAN TO INDICATE ITS
016*    FINDINGS.  IT IS OBTAINED AND FREED BY THE INVOKER
016**************ˇ
40016         SPACE
50016CSOACNM  DS    A        PTR TO COMMAND NAME-IF 0 INVALID CMD NAME
60016CSOALNM  DS    H        LENˇ
6870016CSOAFLG  DS    X        FLAGS
6880016CSOAVWP  EQU   X'80'    VALID WITH PARAMETERS
6890016CSOAVNP  EQU   X'40'    VALID NO   PARAMˇ
 16900016CSOAQM   EQU   X'20'    QUESTION MARK
 16910016CSOANOC  EQU   X'10'    NO COMMAND
 16920016CSOABAD  EQU   X'08'    BAD CMD NAME                 ˇ
   16930016CSOAEXEC EQU   X'04'    IMPLICIT EXEC COMMAND NAME
   16940016         DS    CL1      RESERVED
   16950016         SPACE
     16960016ZTCSFLG  DS    F                   COMMAND SCAN FLAG WORD
     16970016         SPACE 2
     16980016         EJECT
     1699001ˇ
       17000016         LTORG
       17010016         EJECT
       17020016         IKJˇ
         17030016         EJECT
         17040016         IKJPSCB
         17050016         EJECT           ˇ
           17060016         IKJRLGB
           17070016         EJECT
           17080016         IKJEFLWA                     ˇ
             17090016         EJECT
             17100016         IKJTSVT
             17110016         EJECT
               17120016         IKJSTPB
               17130016         EJECT
               17140016         PRINT NOGEN
       +
     ˇ
                   17170016         IKJTCB
                   17180016         IHAASCB
                   1ˇ
                     17200016         IHAPSA
                     17210016         CVT   DSECT=YES
                     17220016      <    END
                       17230016{
DIC - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002* UNEBCDI
ONE ARGUMENT - A ONE-CHARACTER SYMBOL OR STRING      * 00017002* TO BE C
 TO A FIXNUM (USED AS A "CHARACTER OBJECT").         * 00018002* THIS IS
 THE #/ ANˇ
******************************************************** 00020002
                                                         00030002UNEBCDI
MINARGS=1,MAXARGS=1,NAME=ˇ
E                                                          00050002
  #7,0(,#1)           GET ARG 1                            00060002
  ##TYPE(#7),##STRING IF ARG IS A STRINGˇ
    PROCESS             THEN GO AHEAD AND PROCESS IT         00080002
I   ##TYPE(#7),##SYMBOL IF ARG 1 IS A SYMBOL                 00090002
E   ERROR1              THEN OK, ELSE ERROR            ˇ
L     #7,##PNAME(,#7)     IF A SYMBOL, GET THE PRINT NAME      00110002P
DS    0H                                                       00120002
XR    #2,#2               CLEAR INSERT REGISTER                0013000ˇ
  CLC   1(3,#7),=AL3(1)     IF LENGTH IS NOT 1                   0014000
  BNE   ERROR1              THEN ERROR                           0015000
  IC    #2,##VECDAT(,#7)    PICK UP CHARACTER TO BE NUMBERIZED   0016000
  SLAˇ
    LA    #15,#SFT(#2)        Load address of fixnum from table    00180
    BR    #14                                                      00190
    SPACE 1         ˇ
      DROP  #15                                                      002
      SPACE 1                                                        002
OR1   DS    0H                  IF ˇ
        LR    #2,#15                                                   0
        USING UNEBCDIC,#2                                              0
        L     #7,0(,#1)           GET ARG 1       ˇ
2         #ERR  'Argument to UNEBCDIC not a 1-character string - ',
2               (#7)
2         SPACE 1                                                +
002         LTORG                                              ›
00002         END
10002{
UTINE'                   00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002* UNWORD TAKES ONE ARGUMENT - A FOU
TER SYMBOL OR STRING       * 00017002* TO BE CONVERTED TO A FIXNUM (USED
HARACTER OBJECT").         * 00018002***************************ˇ
****************************** 00019002         SPACE
                               00020002UNWORD   #ZBEG MINARGS=1,MAXARGS=
UNWORD'                        00030002         #ZPDS 16

 REGISTERS                       00050002         SPACE
                                 00060002         L     #1,0(,#11)
ARG 1         ˇ
 ARG IS A STRING                   00080002         BE    PROCESS
EN GO AHEAD AND PROCESS IT         00090002         CLI   ##TYPE(#1),##S
 ARG 1 IS A SYMBOL           ˇ
THEN OK, ELSE ERROR                  00110002         L     #1,##PNAME(,
IF A SYMBOL, GET THE PRINT NAME      00120002PROCESS  DS    0H
                                     0013000ˇ
  IF LENGTH IS NOT 4                   00140002         BNE   ERROR1
  THEN ERROR                           00150002         L     #2,##VECDA
  PICK UP CHARACTER TO BE NUMBERIZED   00160002         LA ˇ
    PASS CURRENT STACK POINTER TO CONS   00170002         #MKAT FIXED
    MAKE A FIXNUM OUT OF IT              00180002         SPACE 1
                                         00190002         #ZRET ,
      RESTORE REGISTERS AND RETURN         00200002         SPACE 1
                                           00210002ERROR1   DS    0H
      IF NOT 1, ERROR                      00220002         #ERR  'Argum
NWORD notˇ
                                             00240002         LTORG
                                             00250002         END
                        ∆                      00260002
         TITLE 'UPCASE - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* THIS IS STRING-UPCASE.
18002*                          ˇ
0019002*****************************************************************
0020002UPCASE   #ZBEG MINARGS=1,MAXARGS=1,NAME='STRING-UPCASE'
0030002         #ZPDS 16                  DEFINˇ
 00040002         #ZSAV ,                   SAVE REGISTERS
 00050002         SPACE
 00060002         L     #3,0(,#11)          LOAD ARG1         ˇ
   00070002         CLI   ##TYPE(#3),##STRING IF ARGUMENT IS A STRING
   00080002         BE    ARG1OK              THEN OK
   00090002         CLI   ##TYPE(#3),##SYMBOL IF ARGUMENT IS A SYMBOL
     00100002         BNE   ERROR1              THEN
     00110002         L     #3,##PNAME(,#3)      TAKE THE PRINT NAME, EL
     00120002ARG1OK   DS    0H
     0013000ˇ
       00140002         ST    #3,0(,#11)          STORE BACK ON STACK FO
 USE   00150002         ICM   #7,7,1(#3)          GET LENGTH OF STRING
       00160002         BZ ˇ
N SELF   00170002         LA    #14,##VECDAT(,#3)   POINT TO TEXT OF STR
         00180002         LR    #15,#7              GET LENGTH
         00190002         LA    #0,256    ˇ
           00200002TRTLOOP  DS    0H                  LOOP TO SCAN STRIN
           00210002         CR    #15,#0
           00220002         BNH   SHORTTRT               ˇ
             00230002         TRT   0(256,#14),TRTTABLE SCAN FOR LOWER C
ACTERS       00240002         BNZ   COPYIT              IF WE FOUND ONE,
 TO COPY     00250002         AR    #14,#0              ELSE BUMP UP POI
O TEXT         00260002         SR    #15,#0              BUMP DOWN LENG
               00270002         B     TRTLOOP             AND CONTINUE S
               00280002SHORTTRT DS    0H
       +
ECUTEˇ
E CHARACTERS       00310002         BZ    RETSELF             IF NO BAD
ETURN SELF         00320002COPYIT   DS    0H                  LOWERCASE
VE TO COPY         0ˇ
REG FOR ZILVSS       00340002         XR    #1,#1               ENTRY CO
LLOCATE NEW SPACE    00350002         L     #15,ZLCVSS          GET ADDR
ILVSS                00360002      ˇ
ACK POINTER FOR GC     00370002         #BASR #14,#15             CALL Z
 CREATE A STRING       00380002         LTR   #4,#15              IF STR
D FAILED               00390002         BZ    ERROˇ
                         00400002         L     #1,0(,#11)          GET
TO ORIGINAL STRING       00410002         LA    #0,##VECDAT(,#1)    POIN
ING TEXT                 00420002         LA    #14,##VECDAT(,#4)ˇ
HERE TO MOVE STRING TEXT   00430002         LR    #1,#7               GE
 OF STRING TEXT TO MOVE    00440002         LR    #15,#7
                           00450002         MVCL  #14,#0              MO
ˇ
 TEXT OF STRING              00470002         LR    #15,#7
TH                           00480002         LA    #0,256
ONSTANT 256    ˇ
O TRANSLATE STRING             00500002         CR    #15,#0
                               00510002         BL    SHORTTR
                              ˇ
SLATE TO UPPER CASE              00530002         AR    #14,#0
 BUMP UP POINTER TO TEXT         00540002         SR    #15,#0
 DOWN LENGTH                     00550002    ˇ
                                   00560002         B     TRLOOP
D CONTINUE TRANSLATING.            00570002SHORTTR  DS    0H
                                   00580002         BCTR  #1ˇ
REDUCE LENGTH FOR EXECUTE            00590002         EX    #15,EXTR
TRANSLATE TO UPPER CASE              00600002DONE     DS    0H
ALL FINISHED                         00610002         LR    #15,#4
  POINT TO NEWLY BUILT STRING          00620002         B     RETURN
  RETURN THE ATOM IN #15               00630002         SPACE 1
                                       00640002RETSELF  DS    0H
  NULL STRˇ
    RETURN THE STRING PASSED             00660002RETURN   DS    0H
                                         00670002         SPACE 1
                                          00680002ˇÁ
,                   RESTORE REGISTERS AND RETURN         00690002
1                                                        00700002EXTRT
0(*-*,#14),TRTTABLE EXECUTED: SCAN FOR LOWERCASE CHARS   00710002Eˇ
  0(*-*,#14),TRTABLE  EXECUTED: TRANSLATE TO UPPERCASE     00720002
E 1                                                        00730002TRTTA
  256X'00'            TABLE TO SCAN FOR LOWERCASE CHARS    00740002
 ˇ
    9XL1'FF'                                                 00760002
G   TRTTABLE+C'J'-X'40'                                      00770002
    9XL1'FF'    ˇ
ORG   TRTTABLE+C'S'-X'40'                                      00790002
DC    8XL1'FF'                                                 00800002
ORG   ,                        ˇ
  SPACE 1                                                        0082000
  DC    256YL1(*-TRTABLE)   TABLE TO TRANSLATE TO UPPERCASE      0083000
  ORG   TRTABLE+C'A'-X'40'                    ˇ
    DC    C'ABCDEFGHI'                                             00850
    ORG   TRTABLE+C'J'-X'40'                                       00860
    DC    C'JKLMNOPQR'                                       ˇ
      ORG   TRTABLE+C'S'-X'40'                                       008
      DC    C'STUVWXYZ'                                              008
      ORG   ,                                                        009
        SPACE 1                                                        0
RROR1   #ERR  'Argument to STRING-UPCASE not a string - ',(#3)         0
        SPACE 1                                                        0
RROR2   #ERˇ
2               'ZIL4010 STRING-UPCASE: Not enough vector/string space t
2               o build string.'
2         SPACE 1         V
002         LTORG
002         END
002
E'                   00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002*  USERID RETURNS THE TSO USERID, OR NI
-TSO ENVIRONMENT.      * 00018002*                          ˇ
                         * 00019002*************************************
************************** 00020002*
                         * 00030002* NOTE: THIS ROUTINE NEED NOT CONS UP
 STRING, SINCE THE         * 00040002*       USERID IS THE SAME THROUGHO
NTIRE ZIL SESSION.         * 00050002*
                           * 00060002***********************************
**********ˇ
                               00080002USERID   #ZBEG MINARGS=0,MAXARGS=
USERID'                        00090002         SPACE 1
                         ˇ
SERID WAS ALREADY SET            00110002         BO    RETSTR
 RETURN IT                       00120002         L     #3,X'21C'
TCB ADDRESS                      0013000ˇ
T JSCB ADDRESS                     00140002         L     #3,X'15C'(,#3)
T ACTIVE JSCB ADDRESS              00150002         ICM   #3,15,X'108'(#
T PSCB ADDRESS                     00160002         BZ ˇ
IF NONE, NON-TSO, RETURN NIL         00170002         XR    #2,#2
CLEAR LENGTH REGISTER                00180002         ICM   #2,1,7(#3)
GET LENGTH OF PSCB USERID            00190002         STCM  #2,7,LENGTˇ
  STORE INTO OUR STRING                00200002         BZ    RETSTR
  IF ZERO, BYPASS DATA MOVE            00210002         BCTR  #2,0
  REDUCE FOR EXECUTE                   00220002         EX    #2,MOVEIT
  MOVˇ
    INDICATE USERID SET                  00240002RETSTR   DS    0H
                                         00250002         LA    #15,STRI
                    ˇ
                                           00270002RETNIL   DS    0H
                                           00280002         LR    #15,#1
                                   +
                                 ˇ
                                               00310002MOVEIT   MVC   US
*),0(#3)  EXECUTED: MOVE PSCBUSER TO STRING    00320002         SPACE 1
                                               0ˇ
                                                 00340002         DC
RING)                                            00350002LENGTH   DC
                                                 00360002USERVAˇ
'                                                  00370002         SPAC
                                                   00380002FLAG     DC
                                                   00390002         SPAC
                                                     00400002         LT
                                                     00410002         EN
                                                     00420002{

 00010000***************************************************************
 00011001*
 00012001*ˇ
 * 00013001*                     All rights reserved.
 * 00014001*
 * 00015001**************ˇ
**** 00016001*
   * 00017001* "VALUES"
   * 00018001*                          ˇ
     * 00019001* VALUES takes an &REST argument - (a list of) forms to b
ed   * 00020001* as multiple values.  It does this by passing control to
     * 00030001* ZILVALS function to perform the multipˇ
       * 00040001*
       * 00050001*******************************************************
******** 00060001         SPACE                                       ˇ
           00070001VALUES   #ZBEG MINARGS=0,MAXARGS=0,RESTARG=T,NAME='VA
           00080001         SPACE 1
           00090001         USING VALUES,#15
     ˇ
             00110001         LA    #3,4(,#1)           Point to where t
values       00120001         L     #5,0(,#1)           Load list of val
 stack       0013000ˇ
er             00140001LOOP     DS    0H
               00150001         CR    #5,#10              Until list is
               00160001         BE ˇ
                 00170001         LA    #0,4(,#3)           Get stack po
                 00180001         #ZPDS (0)                 Check for st
flow             00190001         LM    #4,#5,##CAˇ
 list              00200001         ST    #4,0(,#3)           Store form
k                  00210001         LA    #2,1(,#2)           Increment
unter              00220001         LR    #3,#0               Incˇ
pointer              00230001         B     LOOP
                     00240001DONE     DS    0H                  Done, #1
oints to argument    00250001         LA    #1,4(,#1)           Point to
ˇ
 VALUES operation      00270001         L     #15,ZLCVALS         Get ad
 ZILVALS               00280001         BR    #15                 Pass c
o ZILVALS to do+
             ˇ
gisters and return         00310001         SPACE 1
                           00320001         LTORG
                           0ÿ 0330001         END
                             00340001{
'VALUES-LIST - BUILT-IN ZIL 1.3 SUBROUTINE'              00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
                                                           * 00017002* "
IST "                                                      * 00018002*
                ˇ
 takes one argument - a list of forms to be returned         * 00020002*
iple values.  It does this by passing control to the         * 00030002*
 function to perform the multipˇ
                                                               * 0005000
 p. 135:  (values-list <list>) == (apply #'values <list>)      * 0006000
                                              ˇ
****************************************************************** 00080
    SPACE                                                          00090
SL  #ZBEG MINARGS=1,MAXARGS=1,NAME='VALUES-LIST'             ˇ
      SPACE 1                                                        001
      USING VALUESL,#15                                              001
      SPACE 1                                                        001
        LA    #3,4(,#1)           Point to where to store values       0
        L     #5,0(,#1)           Load list of values from stack       0
        XR    #2,#2               Initialize value counter             0
OOP     DS ˇ
2         CR    #5,#10              Until list is null,
2         BE    DONE
2         LA    #0,4(,#3) ˇ
002         #ZPDS (0)                 Check for stack overflow
002         LM    #4,#5,##CAR(#5)     Get CAR and CDR of list
002*                                  ...ˇ
30002         LTR   #4,#4               If it was actually an atom,
40002         BM    ERROR               then error
50002         ST    #4,0(,#3)           Store form on stˇ
0260002         LA    #2,1(,#2)           Increment value counter
0270002         LR    #3,#0               Increment stack pointer
0280002         B     LOOP                                             +
 00290002DONE     DS    0H                  Done, #1 still points to ˇ
   00300002         LA    #1,4(,#1)           Point to values on stack
   00310002         XR    #0,#0               Signify normal VALUES oper
   00320002         L     #15,ZLCVALS         Get address of ZILVALS
   0ˇ
     00340002         SPACE 1
     00350002         #ZRET ,                   Restore registers and re
     00360002      ˇ
       00370002ERROR    DS    0H
       00380002         DROP  #15
       00390002         USING VALUˇ
         00400002         LR    #3,#15
         00410002         L     #2,0(,#1)
         00420002         #ERR  'Argument to VALUˇ
,(#2)      00430002         SPACE 1
           00440002         LTORG
           00450002         END                                 

             00460002{
 INTERNAL SUBROUTINE'                    00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00017002* This function cop
ctor-type object.  Syntax:                 * 00018002*
ˇ
                                             * 00020002*
                                             * 00030002* The one require
nt is a vector-ˇ
                                               * 00050002***************
************************************************ 00060002         SPACE
                              ˇ
S=1,MAXARGS=1,NAME='VCOPY'                         00080002         SPAC
                                                   00090002         #ZPD
+0                                           ˇ
                                                     00110002         SP
                                                     00120002         L
(,#11)          Get arg1                             0013000ˇ
TYPE(#7),##VEC    If arg1 is not a vectorish object    00140002
ROR1              then error                           00150002
,#2               Clear insert register                00160002
#2,7,1(#7)          Get length of current object         00170002
#1,#1               Entry code 0 = allocate new space    00180002
#15,ZLCVSS          Get address of string space service  00190002
#0,16(,#11ˇ
R #14,#15             Call ZILVSS to build new vec-object  00210002
  #4,#4               If vector build failed               00220002
  ERROR2              theˇ
    #0,#15              Get address of new object            00240002
    #2,0(,#11)          Get address of old object from stack 00250002
    #3,#3               (in case it got ˇ
ICM   #3,7,1(#2)          Get length of old object             00270002
LA    #3,4(,#3)           Add prefix length                    00280002
LR    #1,#3               Same as length of new object +
  MVCL  #0,#2               Copy old object to new obˇ
N   DS    0H                  #15 points to object built           00310
    SPACE 1                                                        00320
    #ZRET ,                                                        0ˇ
      SPACE 1                                                        003
OR1   #ERR  'Argument to VCOPY not a vector or structure - ',0(#11)  003
OR2   #ERR  'ZIL4010 VCOPY: Not enough vector/string space to copy vX003
   ˇ
        SPACE 1                                                        0
        LTORG                                                          0
        SPACE 1   Ï
2         END
2{
'                    00001003*******************************************
******************** 00002003*
                   * 00003003*ˇ
er Laboratory Inc.   * 00004003*                     All rights reserved
                     * 00005003*
                     * 00006003**************ˇ
************************ 00007003*
                       * 00008003* VECP RETURNS TRUE IF ITS ARG IS A VEC
ARG OR STRUCTURE;      * 00009003* I.E. ANY OBJECT FORMATTEDˇ
                         * 00010003*
                         * 00020003*************************************
************************** 00030003         SPACE 1
                             00040003VECP     #ZBEG MINARGS=1,MAXARGS=1,
CP'                          00050003         SPACE 1
                             00060003         USING VECP,#15
          ˇ
                               00080003         L     #2,0(,#1)
                               00090003         TM    ##TYPE(#2),##VECTO
                         ˇ
                                 00110003         DROP  #15
                                 00120003         LR    #15,#8
                                 0013000ˇ
                                   00140003ZXNVEC   LR    #15,#10
                                   00150003         BR    #14
                                   00160003         ENDà
                                     00170003
TITLE 'VECTORP - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
    SPACE 1                                                        00017
RP  #ZBEG MINARGS=1,MAXARGS=1,NAME='VECTORP'                       00018
    SPACE 1           ˇ
      USING VECTORP,#15                                              000
      SPACE 1                                                        000
      L     #2,0(,#1)                ˇ
        CLI   ##TYPE(#2),##VECTOR                                      0
        BNE   ZXNVEC                                                   0
        DROP  #15                                   ˇ
2         LR    #15,#8
2         BR    #14
2ZXNVEC   LR    #15,#10                                            º
002         BR    #14
002         END
002
E'                   00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002* (VERIFY ARG1 ARG2 &OPTIONAL ARG3)...
                       * 00018002*                          ˇ
                         * 00019002*  ARG1 IS A STRING          - THE ST
SEARCH WITHIN            * 00020002*  ARG2 IS A STRING          - THE ST
CHARACTERS TO MATCH      * 00030002*  ARG3 IS A FIXNUM OR NIL   - THE ST
 OFFSET FOR THE SEARCH     * 00040002*
                           * 00050002* THIS IS, LIKE, REALLY A PL/1 FUNC
N.  I MEAN, TAKEN          * 00060002* STRAIGHT FROM THE COMPILER OBJECT
STINGS, RIˇ
                             * 00080002*********************************
****************************** 00090002VERIFY   #ZBEG MINARGS=2,MAXARGS=
STRING-VERIFY'           ˇ
NE STACK SIZE                    00110002         #ZSAV ,
 REGISTERS                       00120002         SPACE
                                 0013000ˇ
AD ARGS                            00140002         CLI   ##TYPE(#5),##S
 ARGUMENT IS A STRING              00150002         BE    ARG1OK
EN OK                              00160002         CLIˇ
IF ARGUMENT IS A SYMBOL              00170002         BNE   ERROR1
THEN                                 00180002         L     #5,##PNAME(,
 TAKE THE PRINT NAME, ELSE ERROR     00190002ARG1OK   DS    0H        ˇ
  CHECK ARG 2                          00200002         CLI   ##TYPE(#6)
G IF ARGUMENT IS A STRING              00210002         BE    ARG2OK
  THEN OK                              00220002         CLI   ##TYPE(#6)
L IF ˇ
    THEN                                 00240002         L     #6,##PNA
     TAKE THE PRINT NAME, ELSE ERROR     00250002ARG2OK   DS    0H
                    ˇ
      DEFAULT STARTING OFFSET IS 1         00270002         CR    #7,#13
      IF ARG 3 IS NOT SUPPLIED             00280002         BE    ARGSOK
      THEN IT'S OK (OMITTED)       +
        IF ARG 3 IS NIL          ˇ
          THEN IT'S OK                         00310002         CLI   ##
,##FIXNUM IF ARG 3 IS NOT A FIXNUM             00320002         BNE   ER
          THEN ERROR                           0ˇ
CDR(#7)     IF ARG3 PROVIDED, USE ITS VALUE      00340002         BNP
                                                 00350002ARGSOK   DS
            #2 HAS 1-BASED START                 00360002      ˇ
                                                   00370002         XR
                                                   00380002         ICM
(#5)          #3 = LENGTH OF STRING ARG 1          00390002         LA
(,#3)           ADJUST FOR ONE-BASEDNESS AND         00400002         SR
2               ADJUST FOR OFFSET                    00410002         BN
IL              IF ARG1 IS NULL STRING, RETURN NIL   00420002         IC
,1(#6)       ˇ
T1                IF ARG2 IS NULL STRING, RETURN 1     00440002*
                                                       00450002* #2 - 1-
ART OF WHERE TO SCAN ARG1   ˇ
F STRING ARG1 MINUS OFFSET                               00470002* #4 -
F STRING ARG2                                            00480002* #5 -
NG ARG1                                    ˇ
RING ARG2                                                  00500002*
                                                           00510002
E 1                                                       ˇ
************************************************************ 00530002*
                                                           * 00540002* B
NSLATE TABLE FROM STRING ARG2                              * 00550002*
                                                             * 00560002*
************************************************************** 00570002
SPACE 1                                                        00580002
MVI   TRˇ
  MVC   TRTBL+1(255),TRTBL   CHARACTERS BY SETTING TO FF         0060000
  LA    #1,##VECDAT(,#6)    POINT TO TEXT OF STRING ARG2         0061000
  XR    #15,#15        ˇ
    XR    #0,#0               SET VALUE TO STICK INTO TABLE        00630
    LR    #14,#4              GET LENGTH OF STRING ARG2 (NOT 0)    00640
OOP DS    0H                          ˇ
      IC    #15,0(,#1)          GET CHARACTER FROM STRING ARG2       006
      STC   #0,TRTBL(#15)       SET TABLE CHARACTER TO FLAG AS "OK"  006
      LA    #1,1(,#1)           INCREMENT CHARACTER P OINTER          0
Á
     00690002TBLDEND  DS    0H                  NOW THE TABLE IS BUILT
     00700002         SPACE 1
     00710002*ˇ
****** 00720002*
     * 00730002* SCAN THE STRING ARG1 USING THE TABLE
     * 00740002*             ˇ
       * 00750002*******************************************************
******** 00760002         SPACE 1
         00770002         LA    #14,##VECDATˇ
+ OFFSET   00780002         LR    #15,#3              GET LENGTH OF STRI
- OFFSET   00790002         LA    #0,256              SET UP CONSTANT 25
           00800002TRTLOOP  DS    0H                  LOOP ˇ
             00810002         CR    #15,#0
             00820002         BNH   SHORTTRT
             00830002         TRT   0(256,#14),TRTBL    SCAN FOR CHARACT
T IN ARG2      00840002         BNZ   FOUNDONE            IF WE FOUND ON
ESULT          00850002         AR    #14,#0              ELSE BUMP UP P
O TEXT         00860002         SR    #15,#0              BUMP DOWN LENG
         ˇ
G.               00880002SHORTTRT DS    0H
                 00890002         BCTR  #15,0               REDUCE LENGT
ECUTE            0090000ˇ
S NOT IN ARG2      00910002         BZ    RETNIL              IF NO BAD
ETURN NIL          00920002FOUNDONE DS    0H                  FOUND A CH
N ARG2             00930002         SPAˇ
                     00940002*******************************************
******************** 00950002*
                   * 00960002* SET BY TRT:            ˇ
                     * 00970002*
                     * 00980002* #1 CONTAINS THE ADDRESS OF THE "BAD" CH
                     * 00990002* #2 CONTAINS THE BYTE FROM THE TABLE,ˇ
ON'T CARE ABOUT THAT   * 01000002*
                       * 01010002***************************************
************************ 01020002         SPACE 1
    ˇ
R TO BAD CHAR FROM TRT     01040002         LA    #0,##VECDAT-1(,#5)  GE
S OF ARG1 TEXT, ADJUSTED   01050002         SR    #2,#0               TO
 TO 1-BASED INDEX T+
                 ˇ
TAINS INDEX OF "BAD" CHAR      01080002         LA    #0,24(,#11)
URRENT STACK POINTER TO CONS   01090002         #MKAT FIXED
 FIXNUM OUT OF IT              0ˇ
                                 01110002RET1     DS    0H
CHARACTERS ARE "BAD"             01120002         LA    #15,#SFT1
ETURN FIXNUM 1                   01130002      ˇ
                                   01140002RETNIL   DS    0H
 "BAD" CHARACTERS IN STRING        01150002         LR    #15,#10
TURN NIL                           01160002RETURN   DS    0H  ˇ
                                     01170002         SPACE 1
                                     01180002         #ZRET ,
RESTORE REGISTERS AND RETURN         01190002         SPACE 1
                                       01200002EXTRT    TRT   0(*-*,#14)
  SCAN FOR CHARACTERS NOT IN ARG2      01210002         SPACE 1
                                       01220002TRTBL    DS    XL256
  AREA TO BUˇ
                                         01240002ERROR1   #ERR  'Argumen
TRING-VERIFY not a string - ',0(#11)     01250002ERROR2   #ERR  'Argumen
TRING-VERIFY not a string -ˇ
 STRING-VERIFY not a positive fixnum - ', X01270002               8(#11)
                                           01280002         SPACE 1
                                          ®  01290002         LTORG
                                             01300002         END
                                             01310002{
Ω         TITLE 'VFILL - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* THIS SUBROUTINE FILLS A VECTOR WITH A SPECIFIED ELEMENT.
18002*                          ˇ
0019002* IT TAKES TWO REQUIRED ARGUMENTS - A VECTOR AND A FILL VALUE - A
0020002* INITIALIZES THE SLOTS OF THE VECTOR TO THAT VALUE.
0030002*                                       ˇ
 00040002***************************************************************
 00050002         SPACE 1
 00060002VFILL    #ZBEG MINARGS=2,MAXARGS=2,NAME='VFILL'      ˇ
   00070002         SPACE 1
   00080002         LR    #3,#15
   00090002         USING VFILL,#3
     00100002         DROP  #15
     00110002         SPACE 1
     00120002         LM    #15,#0,0(#1)        LOAD ARGS
     0013000ˇ
       00140002         CLI   ##TYPE(#15),##VECTOR  IF ARG1 IS NOT A VEC
       00150002         BNE   ERROR1              THEN ERROR.  ELSE...
       00160002         ICMˇ
         00170002         BZR   #14                 IF NULL VECTOR, DO N
         00180002         LA    #4,##VECDAT(,#15)   POINT TO VECTOR ELEM
         00190002         LA    #6,4      ˇ
 BXLE      00200002         XR    #1,#1               SET INDEX REGISTER
           00210002         BCTR  #7,0                SET TERMINATION RE
OR BXLE    00220002FILLLOOP ST    #0,0(#1,#4)         INIˇ
TO ARG2      00230002         BXLE  #1,#6,FILLLOOP
             00240002         BR    #14                 #15 POINTS TO VE
LED          00250002         SPACE 1
               00260002ERROR1   DS    0H
               00270002         LR    #2,#15
               00280002         #ERR  'Argument 1 to VFILL not a vector
       +
     ˇ
                   00310002         SPACE 1
                   00320002         END
                   0∞ 0330002{
 - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002*
                                                   * 00017002* VLENGTH T
 ARGUMENT - A VECTOR-TYPE OBJECT.                  * 00018002*
        ˇ
****************************************************** 00020002VLENGTH
NARGS=1,MAXARGS=1,NAME='VLENGTH'                       00030002
                  DEFINˇ
ARGS=1              SAVE REGISTERS                       00050002
                                                         00060002
#1,0(,#11)          LOAD FIRST (AND ONˇ
  #2,#2               CLEAR INSERT REGISTER                00080002
  ##TYPE(#1),##VEC    IF ARGUMENT IS NOT A VECTOR          00090002
  ERROR1              THEN ERROR                     ˇ
M   #2,7,1(#1)          GET LENGTH OF VECTOR TEXT            00110002
A   #2,2                DIVIDE BY 4 TO GET # OF ELEMENTS     00120002
    #2,ZLCSFTHI         If within small fixnum range         0013000ˇ
BNH   SMALLFIX            then go to return fixnum from table  00140002
LA    #0,16(,#11)         PASS CURRENT STACK LOCATION TO CONS  00150002
#MKAT FIXED               MAKE A FIXED ATOM                    00160002
B  ˇ
X DS    0H                  Return small fixnum from table       0018000
  SLA   #2,3                Convert to index into fixnum table   0019000
  LA    #15,#SFT(#ˇ
N   DS    0H                  RETURN WITH NEW ATOM                 00210
    SPACE 1                                                        00220
    #ZRET ,                   RESˇ
      SPACE 1                                                        002
OR1   DS    0H                  INVALID ARGUMENT                     002
      #ERR  'Argument to VLENGTH not a vector - ˇ
        SPACE 1                                                        0
        LTORG                                                          0
        END                                                    ª
2
                   00010000*********************************************
****************** 00011002*
                 * 00012002*ˇ
 Laboratory Inc.   * 00013002*                     All rights reserved.
                   * 00014002*
                   * 00015002**************ˇ
********************** 00016002* VLIST TAKES 1 ARGUMENT - A VECTOR TO CO
 A LIST              * 00017002*****************************************
********************** 00018002         SPACE             ˇ
                         00019002VLIST    #ZBEG MINARGS=1,MAXARGS=1,NAME
                         00020002         #ZPDS 20                  DEFI
 SIZE                    00030002         #ZSAV ,                   SAVE
TERS                       00040002         SPACE
                           00050002*
                           00060002* CHECK INPUT ARGUMENT - MUST BE A VE
E OBJECTˇ
                             00080002         L     #6,0(,#11)
1                            00090002         TM    ##TYPE(#6),##VEC
A VECTOR               ˇ
E                              00110002*
                               00120002* FOR EACH WORD IN THE VECTOR, AD
THE LIST.                      0013000ˇ
 THEM TOGETHER TO MAKE A LIST.   00140002*
                                 00150002         XR    #3,#3
R INSERT REGISTER                00160002         ST ˇ
ITIALIZE OUTPUT LIST TO NIL        00170002         ICM   #3,7,1(#6)
T LENGTH OF VECTOR DATA            00180002         BZ    RETLIST
 ZERO, RETURN NIL                  00190002         LA    #5,##VECDAˇ
INDEX TO LAST WORD IN VECTOR         00200002         LA    #0,20(,#11)
SET STACK POINTER FOR CONS           00210002         LA    #4,4
                                     00220002LOOP     DS    0H
   ˇ
  RELOAD VECTOR ARG FROM STACK         00240002         L     #1,0(#5,#6
  LOAD VECTOR ELEMENT                  00250002         L     #15,ZLCCON
  GET ADDRESS OF Zˇ
    ARG 2 TO CONS = LIST SO FAR          00270002         #BASR #14,#15
    CALL CONS TO ADD NEW ATOM TO LIST    00280002         ST    #15,16(,
    (SETQ LIST (CONS ELEMENT LIST+
                               ˇ
        CONTINUE UNTIL HIT START OF VECTOR   00310002RETLIST  DS    0H
                                             00320002         L     #15,
        RETURN THE LIST                      0ˇ
                                               00340002         #ZRET ,
          RESTORE REGISTERS AND RETURN         00350002         SPACE 1
                                               00360002ERROR1ˇ
                                                 00370002         #ERR
t to VLIST not a vector - ',0(#11)               00380002         SPACE
                                                 00390002         LTORG
                                                   00400002         END
                                                   00410002{
ƒ
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002         SPACE 1
   00017002VREF     #ZBEG MINARGS=2,MAXARGS=2,NAME='VREF'
   00018002         SPACE 1           ˇ
     00019002         USING VREF,#15
     00020002         LM    #2,#3,0(#1)         LOAD ARGUMENTS
     00030002         TM    ##TYPE(#2),##VEC    IF ARˇ
       00040002         BNO   ERROR1              THEN ERROR.  ELSE...
       00050002         CLI   ##TYPE(#3),##FIXNUM IF ARG2 IS NOT A FIXNU
       00060002         BNE   ERROR2              THEN ERROR.  ELSE.ˇ
         00070002         L     #4,##CDR(,#3)       GET VALUE OF FIXNUM
ISTER    00080002         XR    #0,#0               CLEAR INSERT REGISTE
         00090002         SLA   #4,2                MULTIPLY BY 4 TO CON
OFFˇ
RANGE      00110002         ICM   #0,7,1(#2)          GET LENGTH OF VECT
           00120002         CR    #4,#0               IF NOT LESS THAN T
TOR LENGTH 0013000ˇ
             00140002         L     #15,##VECDAT(#4,#2) ELSE LOAD ELEMEN
ECTOR        00150002         BR    #14                 AND RETURN TO CA
             00160002         SPAˇ
               00170002         DROP  #15
               00180002         SPACE 1
               00190002         USING VREF,#7   ˇ
                 00200002         SPACE 1
                 00210002ERROR1   DS    0H
                 00220002         LR    #7,#15                 ˇ
                   00230002         #ERR  'Argument 1 to VREF not a vect
#2)                00240002ERROR2   DS    0H
                   00250002         LR    #7,#15
                     00260002         #ERR  'Argument 2 to VREF not a fi
,(#3)                00270002ERROR3   DS    0H
                     00280002         LR    #7,#15
             +
for vector ˇ
                         00310002         LTORG
                         00320002         SPACE 1
                         0ÿ 0330002         END
                           00340002{
SET - BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

E 1                                                        00017002VSET
G MINARGS=3,MAXARGS=3,NAME='VSET'                          00018002
E 1           ˇ
ING VSET,#15                                                 00020002
    #2,#4,0(#1)         LOAD ARGUMENTS                       00030002
    ##TYPE(#2),##VEC    IF ARˇ
BNO   ERROR1              THEN ERROR.  ELSE...                 00050002
CLI   ##TYPE(#3),##FIXNUM IF ARG2 IS NOT A FIXNUM              00060002
BNE   ERROR2              THEN ERROR.  ELSE.ˇ
  L     #5,##CDR(,#3)       GET VALUE OF FIXNUM INTO REGISTER    0008000
  XR    #0,#0               CLEAR INSERT REGISTER                0009000
  SLA   #5,2                MULTIPLY BY 4 TO CONVERT TO OFFˇ
    BM    ERROR3              IF LESS THAN ZERO, OUT OF RANGE      00110
    ICM   #0,7,1(#2)          GET LENGTH OF VECTOR TEXT            00120
    CR    #5,#0               IF NOT LESS THAN TOTAL VECTOR LENGTH 00130
      BNL   ERROR3              THEN OUT OF RANGE                    001
      ST    #4,##VECDAT(#5,#2)  ELSE STORE ARG 3 INTO ELEMENT N      001
      LR    #15,#4               OF VECTOR AND RETURN IT AS VALUE    001
      BR ˇ
        SPACE 1                                                        0
        DROP  #15                                                      0
        SPACE 1         ˇ
2         USING VSET,#7
2         SPACE 1
2ERROR1   DS    0H                     ˇ
002         LR    #7,#15
002         #ERR  'Argument 1 to VSET not a vector - ',(#2)
002ERROR2   DS    0H                                  ˇ
60002         LR    #7,#15
70002         #ERR  'Argument 2 to VSET not a fixnum - ',(#3)
80002ERROR3   DS    0H                                               +
0290002         LR    #7,#15                                       ˇ
 00300002         #ERR  'VSET index ',(#3),' out of range for vector ',(
 00310002         SPACE 1
 00320002         LTORG
 0z 0330002         SPACE 1
   00340002         END
   00350002{
 SUBROUTINE'                   00010000*********************************
****************************** 00011002*
                             * 00012002*ˇ
Stark Draper Laboratory Inc.   * 00013002*                     All right
ed.                            * 00014002*
                               * 00015002**************ˇ
********************************** 00016002         SPACE
                                   00017002VSSIZE   #ZBEG MINARGS=0,MAXA
ME='VSSIZE'                        00018002         #ZPDS 12          ˇ
DEFINE STACK SIZE                    00019002         #ZSAV ,
SAVE REGISTERS                       00020002         SPACE 1
                                     00030002         L     #2,ZLCVSLEN
GET Sˇ
  MAKE A FIXNUM OUT OF IT              00050002         #ZRET ,
  RETURN WITH IT                       00060002         SPACE 1
                    ˇ
                                         00080002         SPACE 1
                                         00090002         END
                                   ∫       00100002
      TITLE 'WORD - BUILT-IN ZIL 1.3 SUBROUTINE'                     000
******************************************************************** 000
                                                                   * 000
 ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0
                     All rights reserved.                            * 0
                                                                     * 0
*************ˇ
2*                                                                     *
2* WORD TAKES TWO ARGUMENTS, OF WHICH THE SECOND IS OPTIONAL.          *
2* THE FIRST IS A FIXNUM TO ˇ
002* THE SECOND SPECIFIES WHETHER (NON-NIL) OR NOT (NIL) TO INTERN THE
002*  GENERATED SYMBOL ON THE OBJECT LIST (NOTE DEFAULT IS NOT TO).
002* THIS ROUTINE IS NOT RECURSIVE AND USESˇ
40002*
50002*******************************************************************
60002         SPACE                                       ˇ
0070002WORD     #ZBEG MINARGS=1,MAXARGS=2,NAME='WORD'
0080002         #ZPDS 2*4+12+0 = 20       DEFINE STACK SIZE
0090002         #ZSAV ARGS=2              SAVE REGISTERS
 00100002         SPACE
 00110002         L     #2,0(,#11)          GET ATOM (ARG 1 TO WORD)
 00120002         CLI   ##TYPE(#2),##FIXNUM MUST BE AN ATOM
 0013000ˇ
   00140002*
   00150002* BUILD A FOUR-CHARACTER ATOM FROM IT.
   00160002*           ˇ
     00170002         MVC   WORDWORK(4),##CDR(#2) MOVE FIXNUM CONTENTS T
REA  00180002         LA    #0,4                SET LENGTH = 4
     00190002         LA    #1,WORDWORˇ
       00200002         L     #2,4(,#11)          SET INTERN FLAG = ARG
D      00210002         LR    #3,#10              SET FORMAT FLAG = NIL
       00220002         LA    #4,20(,#11)         SETˇ
R CONS   00230002         L     #15,ZLCABLD         CALL ZILABLD TO MAKE
 FROM IT 00240002         #BASR #14,#15             (RETURNS ATOM IN #15
         00250002         SPACE 2                                   ˇ
           00260002         #ZRET ,                   RESTORE REGISTERS
RN         00270002         SPACE 2
           00280002ERROR1   DS    0H
   +
 ˇ
               00310002WORDWORK DS    CL4
               00320002         SPACE 1
               0z 0330002         LTORG
                 00340002         END
                 00350002{
LT-IN ZIL 1.3 SUBROUTINE'                    00010000*******************
******************************************** 00011002*
                                           * 00012002*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013002*
 rights reserved.                            * 00014002*
                                             * 00015002**************ˇ
************************************************ 00016002         SPACE
                                                 00017002XCONS    #ZBEG
2,MAXARGS=2,NAME='XCONS'                         00018002         SPACE
    ˇ
#15                                                00020002         SPAC
                                                   00030002         LM
0(#1)         ARG 1ˇ
ZLCCONS                                              00050002         DR
                                                     00060002         LR
3               ARG 2 --> ARG 1 TOI  CONS              00070002
5                 ZLCCONS WILL RETURN VIA OUR #14      00080002
                                                       00090002

 00010000***************************************************************
 00011001*
 00012001*ˇ
 * 00013001*                     All rights reserved.
 * 00014001*
 * 00015001**************ˇ
**** 00016001*
   * 00017001* This is STRING-TRANSLATE.  This function is analogous to
   * 00018001* TRANSLATE built-in functiˇ
     * 00019001*
     * 00020001*  (string-translate "any-string" "to-chars-bag" "from-ch
)    * 00030001*                                       ˇ
       * 00040001*  where the second and third arguments must be the sam
gth.   * 00050001*
       * 00060001*****************************************************ˇ
********** 00070001XLATE    #ZBEG MINARGS=3,MAXARGS=3,NAME='STRING-TRANS
           00080001         #ZPDS 3*4+12+0 = 24       DEFINE STACK SIZE
           00090001         #ZSAV ,                   SAVE REGISTERS
     ˇ
             00110001         LM    #5,#7,0(#11)        LOAD ARGS
             00120001         CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A
             0013000ˇ
               00140001         CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS
L              00150001         BNE   ERROR1              THEN
               00160001         L  ˇ
, ELSE ERROR     00170001ARG1OK   DS    0H                  CHECK ARG 2
                 00180001         CLI   ##TYPE(#6),##STRING IF ARGUMENT
ING              00190001         BE    ARG2OK    ˇ
                   00200001         CLI   ##TYPE(#6),##SYMBOL IF ARGUMEN
YMBOL              00210001         BNE   ERROR2              THEN
                   00220001         L     #6,##PNAME(,#6)      TAˇ
NAME, ELSE ERROR     00230001ARG2OK   DS    0H
                     00240001         CLI   ##TYPE(#7),##STRING IF ARGUM
 STRING              00250001         BE    ARG3OK              THEN OK
ˇ
 A SYMBOL              00270001         BNE   ERROR3              THEN
                       00280001         L     #7,##PNAME(,#7)      TAKE
T NAME, ELSE ER+
             ˇ
ng ptr back on stack       00310001         XR    #2,#2
                           00320001         XR    #3,#3
                           0ˇ
                             00340001         ICM   #2,7,1(#5)
GTH OF STRING ARG 1          00350001         BZ    RETSELF
length string, return self   00360001      ˇ
ENGTH OF STRING ARG 2          00370001         ICM   #4,7,1(#7)
ENGTH OF STRING ARG 3          00380001         CR    #3,#4
gths of to-bag and from-bag    00390001         BNE   ERROˇ
't match, then error             00400001         SPACE 1
                                 00410001*******************************
******************************** 00420001*
                                 * 00430001* BUILD TRANSLATE TABLE FROM
ARG2 and ARG3                    * 00440001*
                                 * 00450001*****************************
********ˇ
                                     00470001         LTR   #14,#3
Get length of character bags         00480001         BNP   RETSELF
If zero, return untransˇ
  Initialize translate table to ident. 00500001         XC    TRTTBL(256
  Initialize scanning table            00510001         LA    #1,##VECDA
  Point to text of "to" char bag arg2 ˇ
    Point to text of "from"    bag arg3  00530001         XR    #15,#15
    Clear insert register                00540001TBLDLOOP DS    0H
                                         00550001    ˇ
      Get "to" character from arg2         00560001         IC    #15,0(
      Get "from" character from arg3       00570001         STC   #0,TRT
      Set translate table character        00580001         STC   #1ˇ
15)     Set scanning table character nonzero 00590001         LA    #1,1
        Increment "to" character pointer     00600001         LA    #4,1
        Increment "from" character pointer   00610001         BCT   #14,
   ˇ
          Now the table is built               00630001         SPACE 1
                                               00640001         LA    #1
AT(,#5)   Point toˇ
            Get arg1 string length into good reg 00660001         LR
            Get length of string arg1            00670001         LA
            Set up constant 256                   00680001ˇÁ
  DS    0H                  Loop to scan string                  0069000
  CR    #15,#0                                                   0070000
  BNH   SHORTTRT                                                 0071000
    TRT   0(256,#14),TRTTBL   Scan for translatable characters     00720
    BNZ   COPYIT              If we found one, we have to copy     00730
    AR    #14,#0              Else bump up pointer to string text  00740
    SR   ˇ
      B     TRTLOOP             And continue scanning.               007
RTTRT DS    0H                                                       007
      BCTR  #15,0       ˇ
        EX    #15,EXTRT           Scan for translatable characters     0
        BZ    RETSELF             If no such chars, return self        0
OPYIT   DS    0H                  Transˇ
1         LR    #2,#7               GET LENGTH INTO REG FOR ZILVSS
1         XR    #1,#1               ENTRY CODE 0 = ALLOCATE NEW SPACE
1         L     #15,ZLCVSS          GET ADDRESS OF ZILˇ
001         LA    #0,24(,#11)         SET CURRENT STACK POINTER FOR GC
001         #BASR #14,#15             CALL ZILVSS TO CREATE A STRING
001         LTR   #4,#15              IF STRING BUILD FAILED         ˇ
70001         BZ    ERROR2              THEN ERROR
80001         L     #1,0(,#11)          GET POINTER TO ORIGINAL STRING
90001         LA    #0,##VECDAT(,#1)    POINT TO STRING TEXT
0000ˇ
0910001         LR    #1,#7               GET LENGTH OF STRING TEXT TO M
0920001         LR    #15,#7
0930001         MVCˇ
 00940001         LA    #14,##VECDAT(,#4)   POINT TO TEXT OF STRING
 00950001         LR    #15,#7              GET LENGTH
 00960001         LA    #0,256    ˇ
   00970001TRLOOP   DS    0H                  LOOP TO TRANSLATE STRING
   00980001         CR    #15,#0
   00990001         BL    SHORTTR                ˇ
     01000001         TR    0(256,#14),TRTBL    TRANSLATE
     01010001         AR    #14,#0              BUMP UP POINTER TO TEXT
     01020001         SR    #15,#0              BUMP DOWN LENGTHˇ
       01030001         BZ    DONE
       01040001         B     TRLOOP              AND CONTINUE TRANSLATI
       01050001SHORTTR  DS    0H

           01070001         EX    #15,EXTR            TRANSLATE
           01080001DONE     DS    0H                  ALL FINISHED
           01090001         LR    #15,#4              POINT TO NEWLY BUI
G          0ˇ
             01110001         SPACE 1
             01120001RETSELF  DS    0H                  Null string, or
 to xlate    01130001      ˇ
               01140001RETURN   DS    0H
               01150001         SPACE 1
               01160001         #ZRET ,   ˇ
D RETURN         01170001         SPACE 1
                 01180001EXTRT    TRT   0(*-*,#14),TRTTBL   EXECUTED: Sc
latable chars    01190001EXTR     TR    0(*-*,#14),TRTBL ˇ
e the string       01200001         SPACE 1
                   01210001TRINIT   DC    256YL1(*-TRINIT)    Used to in
 translate table   01220001         SPACE 1
                     01230001TRTBL    DS    XL256               AREA TO
ANSLATE TABLE        01240001TRTTBL   DS    XL256               AREA TO
ANNING TABLE         01250001         SPACE 1
       ˇ
t a string - ',0(#11)  01270001ERROR2   #ERR  'Argument 2 to STRING-TRAN
t a string - ',4(#11)  01280001ERROR3   #ERR  'Argument 3 to STRING-TRAN
t a string - ',8(#11) ˇ
NG-TRANSLATE unequal - 'X01300001               ,4(#11),' and ',8(#11)
                         01310001ERRORGC  #ERR  PREFIX=NO,          Not
oom even after GC       X01320001    ˇ
 enough vector/string spacX01330001               e to build string.'
                           01340001         SPACE 1
                           01350001         LTORG   j
                             01360001         END
                             01370001{
******************************************************** 00012000*
                                                       * 00013000* ZIL V
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00014000*[
         All rights reserved.                            * 00015000*
                                                         * 00015100
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002*
       * 00017002* THIS VERSION OF CAR DOES NOT SUPPORT (CAR NIL).
       * 00018002* IT IS INTENDED FOR SPEED,ˇ
HE       * 00019002* ZCAR FUNCTION USED FOR COMPILATION.
         * 00020002*
         * 00030002****************************************ˇ
************ 00040002         SPACE 1
             00050002ZCAR     #ZBEG MINARGS=1,MAXARGS=1,NAME='ZCAR'
             00060002         SPACE 1
               00070002         USING ZCAR,#15
               00080002         SPACE 1
               00090002         L     #2,0(,#1)
         ˇ
                 00110002         BO    CARERROR
                 00120002         L     #15,##CAR(,#2)
                 0013000ˇ
                   00140002         SPACE 1
                   00150002CARERROR DS    0H
                   00160002         LR ˇ
                     00170002         USING ZCAR,#3
                     00180002         DROP  #15
                     00190002         #ERR  'Argument V to ZCAR is an at
#2)                    00200002         SPACE 1
                       00210002         END
                       00220002
BUILT-IN ZIL 1.3 SUBROUTINE'                     00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002*
                                                   * 00017002* THIS VERS
DR DOES NOT SUPPORT (CDR NIL).                     * 00018002* IT IS INT
R SPEED,ˇ
SED FOR COMPILATION.                                 * 00020002*
                                                     * 00030002*********
***********************ˇ
1                                                        00050002ZCDR
MINARGS=1,MAXARGS=1,NAME='ZCDR'                          00060002
1                                     ˇ
G ZCDR,#15                                                 00080002
E 1                                                        00090002
  #2,0(,#1)                                          ˇ
    ##TYPE(#2),##ATOM                                        00110002
    CDRERROR                                                 00120002
    #15,##CDR(,#2)                                           0013000ˇ
BR    #14                                                      00140002
SPACE 1                                                        00150002C
DS    0H                                                       00160002
LR ˇ
  USING ZCDR,#3                                                  0018000
  DROP  #15                                                      0019000
  #ERR  'Argument V to ZCDR is an atom - ',(#2)                    00200
    SPACE 1                                                        00210
    END                                                            00220
ƒ
             00010000***************************************************
************ 00011002*
           * 00012002*ˇ
atory Inc.   * 00013002*                     All rights reserved.
             * 00014002*
             * 00015002**************ˇ
**************** 00016002*
               * 00017002* ZCPRINT is the ZIL "current printer", called
, PRIN1,       * 00018002*    CTERPRI, TERPRI and TYˇ
                 * 00019002*
                 * 00020002* ZCPRINT takes 3 arguments:
                 * 00030002*                                       ˇ
                   * 00040002* arg 1 = the object to be printed, if appl
                   * 00050002* arg 2 = the file to print it on.
                   * 00060002* arg 3 = a fixnum built from the following
 vˇ
                     * 00080002*      ..00  =  print a character object
                     * 00090002*      ..01  =  print a LISP object (PRIN
                 ˇ
PRI)                   * 00110002*      .x..  =  0 = don't slashify, 1 =
y                      * 00120002*      x...  =  0 = unconditional, 1 =
nal                    * 0013000ˇ
                         * 00140002* EXAMPLE CALLING SEQUENCES:
                         * 00150002*
                         * 00160002*  (DEFUN TYˇ
F #b0000))   0             * 00170002*  (DEFUN PRINC (X &OPTIONAL F) (ZC
F #b0001))   1             * 00180002*  (DEFUN PRIN1 (X &OPTIONAL F) (ZC
F #b0101))   5             * 00190002*  (DEFUN TERPRI  (&OPTIOˇ
X F #b0010))   2             * 00200002*  (DEFUN CTERPRI (&OPTIONAL F) (
X F #b1010))  10             * 00210002*
                             * 00220002* ZCPRINT is very simple: it mere
ses its arguments to the       * 00230002* function whose address is in
on area field ZLCCPRT,         * 00240002* which is the compiled (or ass
ZIL function which is          * 00250002* currently doing the printing.
unction is iˇ
), but any compiled function     * 00270002* that processes its argument
rly may have its address         * 00280002* inserted into that field to
the current ZIL printer.   +
                         ˇ
************************************** 00310002         SPACE 1
                                       00320002ZCPRINT  #ZBEG MINARGS=3,
3,NAME='ZCPRINT'                       0ˇ
                                         00340002         DROP  #15
                                         00350002         SPACE 1
                                         00360002      ˇ
      Get address of current ZIL printer.  00370002         BR    #15
      Go to it.                            00380002         SPACE 1
                                           00390002         END       ¸
                                             00400002{
-         TITLE 'ZCREAD - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
4*                                                                     *
4*ˇ
004*                     All rights reserved.
004*
004**************ˇ
16004*
17004* ZCREAD is the ZIL "current reader", called by READ, TYI, TYIPEEK,
18004*        and many other rouˇ
0019004*
0020004* ZCREAD takes 6 arguments:
0030004*                                       ˇ
 00040004* arg 1 = the file to read from.
 00050004* arg 2 = a fixnum built from the boolean values listed below.
 00060004* arg 3 = miscellaneous function-dependent data (e.g.ˇ
 * 00070004* arg 4 = eof-error-p.
 * 00080004* arg 5 = eofval.
 * 00090004* arg 6 = recursive-p.
   * 00100004*
   * 00110004* Arg 2 values are made up from the following bit settings:
   * 00120004*
   * 0013000ˇ
     * 00140004*  .......1  =  Read a character (TYI/TYIPEEK)
     * 00150004*  ......1.  =  Peek flag
     * 00160004*  .....1.. ˇ
       * 00170004*  ....1...  =  EOF request
       * 00180004*  ...1....  =  EOL (newline) request
       * 00190004*  ..1.....  =  1 = set Eˇ
         * 00200004*  .1......  =  Read a line of data (READLINE)
         * 00210004*  1.......  =  Readtable functions
         * 00220004*  1......1  =  Set reader macro      ˇ
           * 00230004*  1.....1.  =  Set MACLISP readtable
           * 00240004*  1....1..  =  Return reader macro character
           * 00250004*
             * 00260004* Sample calling sequence:
             * 00270004*
             * 00280004*  (defun read (&optional file eoferp eofval recu
       +
rp)) ˇ
                 * 00310004* There are many others, not listed here.  No
even the one     * 00320004* above may not be the one in use in the pres
 depending on    * 0ˇ
sp READ.           * 00340004*
                   * 00350004* ZCREAD is very simple: it merely passes i
ents to the        * 00360004* funcˇ
eld ZLCCRDR,         * 00370004* which is the compiled (or assembled) ZI
on which is          * 00380004* currently doing the reading.   That fun
 initialized         * 00390004* to ZDREAD (the DEˇ
ompiled function       * 00400004* that processes its arguments similarl
ve its address         * 00410004* inserted into that field to become th
t ZIL reader.          * 00420004*                               ˇ
                         * 00430004*************************************
************************** 00440004         SPACE 1
                           00450004ZCREAD   #ZBEG MINARGS=6,MAXARGS=6,NA
ˇ
                             00470004         DROP  #15
                             00480004         SPACE 1
               ˇ
dress of current ZIL reader.   00500004         BR    #15
it.                            00510004         SPACE 1
                              $  00520004         END
                                 00530004{
TLE 'ZDPRINT - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000***
************************************************************ 00011007*
                                                           * 00012007*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013007*
             All rights reserved.                            * 00014007*
                                                             * 00015007*
*****ˇ
                                                               * 0001700
NT is the ZIL "default printer", called by PRINC, PRIN1,       * 0001800
ERPRI, TERPRI and TYˇ
                                                                 * 00020
-----------------------------------------------------------------* 00030
                                   ˇ
pdated 11/02/88 to handle ZGETFPO, ZPUTFPO and CLRSCRN requests.   * 000
                                                                   * 000
--------------------------------------------------ˇ
                                                                     * 0
 ZDPRINT takes 3 arguments:                                          * 0
                                                                 ˇ
7* arg 1 = the object to be printed, if applicable.                    *
7* arg 2 = the file to print it on.                                    *
7* arg 3 = a fixnum built from the following boolean values:           *
ˇ
007*    ....00  =  print a character object (TYO)
007*    ....01  =  print a LISP object (PRINC/PRIN1)
007*    ....10 ˇ
70007*    ...x..  =  0 = don't slashify, 1 = slashify
80007*    ..x...  =  0 = unconditional, 1 = conditional
90007*    .1....  =  CHARPOS rˇ
0200007*    1.....  =  CLRSCRN request
0210007*
0220007* EXAMPLE CALLING SEQUENCES: (NOT the ˇ
 00230007*
 00240007*  (DEFUN TYO     (X &OPTIONAL F) (ZDPRINT X   F #b000000))   0
 00250007*  (DEFUN PRINC   (X &OPTIONAL F) (ZDPRINT X   F #bˇ
 * 00260007*  (DEFUN PRIN1   (X &OPTIONAL F) (ZDPRINT X   F #b000101))
 * 00270007*  (DEFUN TERPRI    (&OPTIONAL F) (ZDPRINT NIL F #b000010))
 * 00280007*  (DEFUN CTERPRI   (&OPTIONAL F) (ZDPRINT NIL F #b001010))
   * 00290007*  (DEFUN ZGETFPO   (&OPTIONAL F) (ZDPRINT NIL F #b010000))
     * 00300007*  (DEFUN ZPUTFPO (X &OPTIONAL F) (ZDPRINT X   F #b010000
     * 00310007*  (DEFUN CLRSCRN ()              (ZDPRINT NIL T #b101010
     * 00320007*
     * 0ˇ
ich is * 00340007* not the terminal.
       * 00350007*
       * 00360007******ˇ
********** 00370007         SPACE 1
           00380007MODEB3   EQU   ##CDR+3
           00390007BPRINC   EQU   B'00ˇ
             00400007BTERPRI  EQU   B'00000010'         1 = TERPRI, 0 =
O            00410007BSLASHFY EQU   B'00000100'         1 = SLASHIFY, 0
             00420007BCONDNEW EQU   B'00001000'      ˇ
WLINE          00430007BCHARPOS EQU   B'00010000'         1 = CHARPOS re
               00440007BCLRSCRN EQU   B'00100000'         1 = CLRSCRN re
               00450007         SPACE 1                             ˇ
                 00460007ZDPRINT  #ZBEG MINARGS=3,MAXARGS=3,NAME='ZDPRIN
=ZILSUBR         00470007         #ZPDS 3*4+12+12 = 36
                 00480007         #ZSAV ,
   ˇ
                   00500007* If arg 2 is a symbol, then assume that it i
put file and       00510007* process it accordingly.  Otherwise, assume
is a "stream"     ˇ
 to ZCPEXEC to       00530007* handle the stream operation.
                     00540007*
                     00550007    ˇ
                       00560007         CLI   ##TYPE(#7),##SYMBOL If fil
nt is not a symbol     00570007         BNE   ZDSTREAM            then m
 stream, process so    00580007*                ˇ
 an output file...       00590007*                                  This
 based on 4(,#11)        00600007         #OFIL 2                   Arg
ut file spec             00610007         SPACE 1              ˇ
                           00620007         L     #2,8(,#11)          Ge
                           00630007         TM    MODEB3(#2),BTERPRI  If
bit is 1,                  00640007         BO    ZDTERPRI            th
to process (C)TERPRI/CLRSCRN 00650007         TM    MODEB3(#2),BCHARPOS
OS bit is 1,                 00660007         BO    ZDCHARPO
to process CHARPOS           00670007*
her TYO or PR INx...          00671007ˇÁ
PRINC   If PRINx bit is 0,                   00671107         BZ    ZDTY
        then go to process TYO               00671207*
        Else this is a PRINC/PRIN1           00671307 ˇ
55-ZLCPSLSH Initialize slashification bit      00671407         TM    MO
,BSLASHFY If slashification required           00671507         BE    *+
          then                                 00671607         OI   ˇ
,ZLCPSLSH    set slashify bit on                 00671707         L
RIN         Get address of ZILPRIN               00671807         L
1)          Get argument 1                       00671907         #BASR
    ˇ
,#11)         Set return value to arg1             00673007         B
              Return                               00674007         SPAC
                   ˇ
                Process CTERPRI / TERPRI / CLRSCRN   00676007         SP
                                                     00677007         TM
B3(#2),BCLRSCRN If CLRSCRN bit is ˇ
TERPNC             and                                 00679007
FFLAG1,ZLFTERM      this is a terminal file,           00680007
CLRSCR               then go to do screen clear  ˇ
0H                  Else non-screen-clearing (C)TERPRI   00700007
#15,#10             Preset return value to NIL, but...   00710007
MODEB3(#2),BCONDNEW If TERPRI request (non-conditional)  0072000ˇ
  JUSTTERP             or                                  00730007
  ZLFFLAG1,ZLFNEWLN     data already on current line       00740007
  RETURN                 then                              00750007JUSTT

    #15,ZLCTERP          Get address of ZILTERP              00770007
ASR #14,#15              Call ZILTERP                        00780007
    #15,#8    ˇ
B     RETURN                                                   00800007
SPACE 1                                                        00810007Z
DS    0H                  Proˇ
  SPACE 1                                                        0083000
  L     #1,0(,#11)          Get arg 1                            0084000
  CLI   ##TYPE(#1),##FIXNUM Must be characteˇ
    BNE   TYOERROR                                                 00860
    L     #2,##CDR(,#1)       Get fixnum value                     00870
    CL    #2,#SFW255          Must be between 0 and 255    +
      BH    TYOERROR                                     ˇ
        STC   #2,FAKECHAR         Store character in fake string       0
        NI    ZLCPFLGS,255-ZLCPSLSH Set no-slashify option             0
        L     #15,ZLCPRIN         Get address of ZILPRIN               0
7         LA    #4,FAKESTR          Get argument 1
7         #BASR #14,#15             Call printing routine
7         L     #15,0(,#11)         Set return value to arg1
7******ˇ
007         SPACE 1
007RETURN   DS    0H
007         SPACE 1   ˇ
90007         #ZRET ,                   Return to caller
00007         EJECT
10007ZDSTREAM DS    0H               ˇ
1020007         SPACE 1
1030007         LM    #14,#0,0(#11)        Args 1-3
1040007         STM   #14,#0,24(#11)       Store on ˇ
 01050007         ICM   #15,15,@ZCPEXEC     Get address of ZCPEXEC
 01060007         BZ    LOADZCP             If zero, not loaded yet
 01070007         LA    #1,24(,#11)         Point to args          ˇ
   01080007         #BASR #14,#15             Call whatever you put in #
   01090007         B     RETURN              and return with its result
)  01100007         SPACE 1
  ˇ
et   01120007         SPACE 1
     01130007         LA    #1,SZCPEXEC         Address of "ZCPEXEC" nam
     01140007    ˇ
       01150007         L     #15,@ZILLOAD        Get address of ZILLOAD
       01160007         LA    #1,24(,#11)         Point to args
       01170007         #BASR #1ˇ
         01180007         XR    #1,#1               Clear insert registe
         01190007         CR    #15,#10             If module could not
d        01200007         BE    ERRLOAD        ˇ
           01210007         ICM   #1,7,##CAR+1(#15)   Else get address o
ed code    01220007         ST    #1,@ZCPEXEC         Store it into our
constant   01230007         B     ZDSTREAM            Go to reˇ
             01240007         SPACE 1
             01250007ERRLOAD  DS    0H
             01260007         #ERR  PREFIX=NO,
              X01270007ˇÁ
XEC, stream operations imposX01280007               sible.'
                             01290007         SPACE 1
                             01300007Sˇ
CPEXEC '    String "ZCPEXEC"   01310007         SPACE 1
                               01320007*
                               01330007* The adcon foˇ
he ZILSUBRS area because it      01340007* is loaded on demand, not reso
linkedit time.                   01350007*
                                 01360007@ZCPEXEC DC    A(0)        ˇ
DRESS OF ZCPEXEC                   01370007         SPACE 1
                                   01380007ZILSUBRS DS    0A
TERNAL SUBROUTINES                 01390007@ZILLOAD DC    V(ZILLOAD)
DREˇ
                                     01410007ZILSUBRE DS    0A
END OF SUBROUTINES                   01420007         EJECT
                  ˇ
  Process CHARPOS request              01440007         SPACE 1
                                       01450007         L     #15,0(,#11
  Get argument 1                 ˇ
    If argument 1 is NIL                 01470007         BE    ZDGETFPO
    then process ZGETFPO                 01480007         SPACE 1
                                         0149000ˇ
      Process ZPUTFPO request              01500007         SPACE 1
                                           01510007*********************
****************************************** 01520007*           ˇ
                                           * 01530007* THIS FUNCTION UPD
 CURRENT CHARACTER POSITION OF THE         * 01540007* SPECIFIED OUTPUT
M A FIXNUM ATOM, AND RETURNS THAT VALUE.   * 01550007*
                                             * 01560007*****************
********************************************** 01570007         SPACE 1
                                               01580007         CLI   ##
),##FIXNUM IFˇ
            THEN ERROR                           01600007         ICM
#CDR(#15)   GET FIXNUM VALUE                     01610007         BM
            IF NEGATIVE, ERRˇ
FCHAR         SET CURRENT CHARACTER POINTER        01621007         B
              Return                               01622007         SPAC
                                           +
                Process ZGETFPO request  ˇ
                                                       01622307*********
****************************************************** 01622407*
                                                     * 0ˇ
 RETURNS THE CURRENT CHARACTER POSITION OF THE         * 01622607* SPECI
PUT FILE AS A FIXNUM ATOM.                             * 01622707*
                                                       * 01622807******ˇ
********************************************************** 01622907
E                                                          01623007
  #2,ZLFCHAR          GET CURRENT CHARACTER POINTER        01623107
  #2,Zˇ
H   SMALLFIX            THEN GO TO RETURN FIXNUM FROM TABLE  01623307
    #0,24(,#11)         PASS CURRENT STACK LOCATION TO CONS  01623407
KAT FIXED            ˇ
B     RETURN                                                   01623607S
DS    0H                                                       01623707
SLA   #2,3                CONVERT TOˇ
  LA    #15,#SFT(#2)        RETURN SMALL FIXNUM FROM TABLE       0162390
  B     RETURN              Return                               0162400
  SPACE 1                                          ˇ
SCR DS    0H                  Process CLRSCRN request              01624
    SPACE 1                                                        01624
    STFSMODE INITIAL=YES      SET FULL SCREEN MODE FOR VTAM       ˇ
      SPACE 1                                                        016
      LTR   #15,#15             IF NOT A VTAM TERMINAL               016
      BNZ   TCAMCLR             THEN DO A TCAM SCREEN CLEAR          016
 ˇ
******* STLINENO LINE=1           ELSE DO A VTAM SCREEN CLEAR          0
        TPUT  CLR,L'CLR,FULLSCR,,HOLD                                  0
        SPACE 1 ˇ
7         STLINENO LINE=1           INSURE LINE MODE OUTPUT GOES TO TOP
7         SPACE 1
7         STFSMODE OFF         ˇ
407         SPACE 1
507         TCLEARQ INPUT
607         SPACE 1                           ˇ
25707         LR    #15,#10             RETURN NIL
25807         B     RETURN
25907         SPACE 1                                        
1626007ˇÁ
N CLEAR      01626107         SPACE 1
             01626207         TPUT  FSON,L'FSON,FULLSCR,,HOLD
             01626307 ˇ
               01626407         SPACE 1
               01626507         LR    #15,#10             RETURN NIL
               01626607         B    ˇ
                 01626707         SPACE 1
                 01626807FAKESTR  DC    YL1(##STRING),AL3(1) String head
                 01626907FAKECHAR DC    XL4'00'     ˇ
aracter            01627007CLR      DC    X'401140403C40400013'
                   01628007FSON     DC    X'40115D7F1140403C40400013'
                   01629007FSOFF    DC    X'40115D7E1140403C4040001ˇ
                     01630007         SPACE 1
                     01640007TYOERROR #ERR  'Argument 1 to TYO not a cha
ixnum - ',0(#11)     01650007ZDPERROR #ERR  'Argument 1 to ZPUTFPO not a
atˇ
                       01670007*LRERROR #ERR  'Argument 1 to ZPUTFPO exc
put file length - ',  X01680007               0(#11)
                 ˇ
                         01700007         LTORG
                         01710007         SPACE
                         0172000ˇ
                           01730007
                           01740007
                           01750007            s
                             01760007
                             01770007
DREAD - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*********
****************************************************** 00011022*
                                                     * 00012022*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013022*
       All rights reserved.                            * 00014022*
                                                       * 00015022*******

                                                         * 00017022* ZDR
he ZIL "default reader", called by READ, TYI, TYIPEEK,   * 00018022* and
her routines. ˇ
                                                           * 00020022*--
-----------------------------------------------------------* 00030022*
                             ˇ
takes 6 arguments:                                           * 00050022*
                                                             * 00060022*
 the file to read from.                     ˇ
 = a fixnum built from the boolean values listed below.        * 0008002
 = miscellaneous function-dependent data (e.g. char operand).  * 0009002
 = eof-error-p.                                            ˇ
 5 = eofval.                                                     * 00110
 6 = recursive-p.                                                * 00120
                                                                 * 00130
rg 2 values are made up from the following bit settings:           * 001
                                                                   * 001
00000000  =  Read an S-expression (READ)                           * 001
.....001 ˇ
  .....010  =  Unread a character (UNTYI)                            * 0
  .....011  =  Peek a character (TYIPEEK)                            * 0
  .....100  =  Intern a ˇ
2*  .....110  =  Intern a character (PEEKCH)                           *
2*  ....1...  =  EOF request                                           *
2*  ...1....  =  EOL (newline) request ˇ
022*  ..1.....  =  1 = set EOF/EOL, 0 = test EOF/EOL
022*  .1......  =  Read a line of data (READLINE)
022*  1.......  =  Readtable functions                ˇ
60022*  1......1  =  Set reader macro
70022*  1.....1.  =  Set MACLISP readtable
80022*  1....1..  =  Return reader macro character                   +
0290022*                                                           ˇ
 00300022* Sample calling sequence:
 00310022*
 00320022*  (defun read (&optional file eoferp eofval recurp)
 0ˇ
 * 00340022*
 * 00350022* There are many others, not listed here.  Note that even the
 * 00360022* abovˇ
   * 00370022* whether we want the Maclisp READ or the Common Lisp READ.
   * 00380022*
   * 00390022*******************ˇ
****** 00400022*
     * 00401023* Change activity:
     * 00401123*                               ˇ
       * 00401223* 02/28/90 - Fixed GC errors by setting ZLCGCBLD flag.
       * 00401323*
       * 00401423*********************************************ˇ
********** 00402023         SPACE 1
           00410022MODEB3   EQU   ##CDR+3
           00420022BTYI     EQU   B'00000001'         1 = TYI/TYIPEEK, 0
D            00430022BPEEK    EQU   B'00000010'         1 = peek request
             00440022BINTERN  EQU   B'00000100'         1 = READCH/PEEKC
YI/TYIPEEK   00450022BEOF     EQU   B'00001000'         1 = EOF request
            ˇ
est            00470022BSET     EQU   B'00100000'         1 = set EOF/EO
est EOF/EOL    00480022BREADLIN EQU   B'01000000'         1 = READLINE
               00490022BRM ˇ
ons              00500022BRMBITS  EQU   B'01111111'         Other bits u
 readtable funx  00510022BRMSRM   EQU   B'00000001'         1 = set read
                 00520022BRMMACRT EQU   B'ˇ
adtable            00530022BRMCHAR  EQU   B'00000100'         1 = return
macro character    00540022         SPACE 1
                   00550022ZDREAD   #ZBEG MINARGS=6,MAXARˇ
BRS=ZILSUBR          00560022         #ZPDS 60
                     00570022         #ZSAV ,
                     00580022*
                       00590022* If arg 1 is a symbol, then assume that
 input file and        00600022* process it accordingly.  Otherwise, ass
 it is a "stream"      00610022* (in whatever format that may be) and pa
ol to Z CREXEC to       00620022ˇÁ
                                       00630022*
                                       00640022         L     #7,0(,#11)
  Get arg 1                            00650022 ˇ
BOL If file argument is not a symbol     00660022         BNE   ZDSTREAM
    then must be a stream, process so    00670022*
    Else must be an input file...        00680022*             ˇ
      This sets #7 based on 0(,#11)        00690022         #IFIL 1
      Arg 1 = input file spec              00700022         SPACE 1
                                           00710022         L     #2,4(,
        Get arg 2                            00720022         TM    MODE
RM      If readtable bit is on               00730022         BO    DORE
        then process readtable requests      00740022         CLI   MODE
        If alˇ
          then process READ request            00760022         TM    MO
,BTYI     If TYI/TYIPEEK bit is on             00770022         BO    DO
          then process TYI/Tˇ
2),BINTERN  If READCH/PEEKCH bit is on           00790022         BO
            then process READCH/PEEKCH request   00800022         TM
2),BPEEK    If PEEK but not TYI            ˇ
I             then process UNTYI request           00820022         TM
(#2),BEOF     If EOF bit is on                     00830022         BO
              then process EOF set/test request    0084002ˇ
B3(#2),BEOL     If EOL bit is on                     00850022         BO
L               then process EOL set/test request    00860022         TM
B3(#2),BREADLIN If READLINE bit is on                00870022         BO
READLI            then process READLINE request        00880022
KNOWN             else unknown                         00890022
                                                       00900022DOREAD
        ˇ
#14,CKRDTBL         Initialize read table if necessary   00920022
#0,0(,#11)                                               00930022
#0,36(,#11)         Argˇ
  #0,8(,#11)                                               00950022
  #0,40(,#11)         Arg 2 = preserving-whitespace-p      00960022
  #0,12(,#11)                         ˇ
    #0,44(,#11)         Arg 3 = eof-error-p                  00980022
    #0,16(,#11)                                              00990022
    #0,48(,#11)         Arg 4 = eofval               +
L     #0,20(,#11)                                  ˇ
  ST    #0,52(,#11)         Arg 5 = recursive-p                  0102002
  L     #15,=A(ZILREAD)     Get address of ZILREAD               0103002
  LA    #1,36(,#11)         Point to args                        0ˇ
    B     BASR1415            Go to call it.                       01050
    EJECT                                                          01060
    DS    0H                  This is TYI or TYIPEEK               01070
 ˇ
      BO    DOTYIPK             then                                 010
      L     #15,=A(ZILTYI)       get address of ZILTYI               011
      B     BASRˇ
OTYIPK  DS    0H                  Else peeking...                      0
                                                                       0
 Because (TYIPEEK T ...) needs ˇ
2* the readtable may be necessary.
2*
2         #BAS  #14,CKRDTBL          Initializˇ
022         L     #15,=A(ZILTYIPK)     get address of ZILTYIPK
022         B     BASR1415             go to call it
022         SPACE                                            ˇ
00022DOUNTYI  DS    0H                  This is UNTYI
10022         L     #15,=A(ZILUNTYI)    Get address of ZILUNTYI
20022         B     BASR1415            go to call it
1230022         SPACE
1240022DOINTERN DS    0H                  This is READCH or PEEKCH
1250022         TM    MODEB3(#2),BPEEK    If PEEK bit is off
1260022    ˇ
 01270022         L     #15,=A(READCH)       get address of READCH
 01280022         B     BASR1415             go to call it
 01290022DOPEEKCH DS    0Hˇ
   01300022         L     #15,=A(PEEKCH)       get address of PEEKCH
   01310022         B     BASR1415             go to call it
   01320022         SPACE                ˇ
     01330022DOREADLI DS    0H                  READLINE request
     01340022         L     #15,=A(READLINE)
     01350022         B     BASR1415            Go to caˇ
       01360022         SPACE
       01370022DOEOF    DS    0H                  This is EOF or QUIT
       01380022         TM    MODEB3(#2),BSET     If set bit is off    
         01390022ˇÁ
                       01400022*
                       01410022* EOF - return TRUE or FALSE depending on
 EOF has been reached  01420022*ˇ
                         01430022         TM    ZLFFLAG,ZLFEOF      Test
g                        01440022         BZ    FALSE               If o
EOF                      01450022         B    ˇ
                           01460022DOSETEOF DS    0H                  El
OF...                      01470022*
                           01480022* QUIT - force EOF on the fˇ
                             01490022*
                             01500022         OI    ZLFFLAG,ZLFEOF
flag                         01510022         B     FALSE
 NIL                           01520022         SPACE
                               01530022DOEOL    DS    0H
s NEWLINEP or ENDREAD          01540022         TM    MODEB3(#2),BSET
 bit is off ˇ
                                 01560022*
                                 01570022* NEWLINEP - return TRUE or FAL
ding on if EOL has been reaˇ
                                   01590022         TM    ZLFFLAG,ZLFNEW
st newline flag                    01600022         BZ    FALSE
 off, not newline                  0161002ˇ
If on, newline                       01620022DOSETEOL DS    0H
Else set newline...                  01630022*
                                     01640022* ENDREAD - ˇ
 read.  This isn't really the same as  01650022*           setting NEWLI
 it sort of fits with the bit setting  01660022*           configuration
READ/ZDREAD, so here it is.            01670022*
                                         01680022         NI    ZLFFLAG2
TGT12 Reset incomplete-TGET indicator    01690022         XR    #3,#3
                                         01700022         BCTR  #3,0
       ˇ
      Force newline condition on file      01720022         B     FALSE
      Return NIL                           01730022         SPACE
                      ˇ
        This is RMINIT or something          01750022         TM    MODE
RMBITS  If all other bits are off            01760022         BZ    DORM
        then this is an initializatio+
,BRMSRM   If set-reader-macro bit iˇ
            then this is set-reader-macro        01790022         TM
2),BRMMACRT If set-maclisp-reader bit is on      01800022         BO
            then set MACLISP readtable           0ˇ
(#2),BRMCHAR  If reader-macro-character bit on     01820022         BO
AR            then return reader macro character   01830022         B
N             Else we don't know what it is yet    01840022DORMINˇ
                Else RMINIT request...               01850022         L
@ZRMINIT        Get address of ZRMINIT               01860022         B
1415            Go to call it.                       01870022DORDRMAC DS
ˇ
4,CKRDTBL         Initialize read table if necessary   01890022
5,=A(RDRMACRO)    Get address of RDRMACRO              01900022
SR1415         ˇ
0H                  Else RMMAC request...                01920022
#14,CKRDTBL         Initialize read table if necessary   01930022
#4,ZLCRDTBL         Get read tˇ
  C'/'(#4),##ESCAPE   Set syntax of slash like backslash   01950022
  C'\'(#4),##NORMAL   Set normal syntax for backslash      01960022
  FALSE               Return NIL             ˇ
    0H                  RMCHAR request...                    01980022
AS  #14,CKRDTBL         Initialize read table if necessary   01990022
    #15,=A(RMCHAR)      Get address of RMCHAR               ˇ
B     BASR1415            Go to call it.                       02010022
SPACE                                                          02020022U
DS    0H                                                       02030022
  #ERR  'Unknown ZDREAD request, code ',4(#11)                   0204002
  SPACE                                                          0205002
  DS    0H                  Come here to return FALSE            0206002
  LR    #1ˇ
    B     RETURN                                                   02080
    SPACE                                                          02090
    DS    0H             ˇ
      LR    #15,#8              Set return value to T                021
      B     RETURN                                                   021
      SPACE                             ˇ
DSTREAM DS    0H                  Here if arg1 not a "file"            0
        SPACE 1                                                        0
        LM    #14,3,0(#11)        Args 1-6             
2ˇÁ
       02170022         ICM   #15,15,@ZCREXEC     Get address of ZCREXEC
       02180022         BZ    LOADZCR             If zero, not loaded ye
       02190022 ˇ
         02200022******** B     BASR1415            Go to call it.
         02210022         SPACE 1
         02220022BASR1415 DS   ˇ
tine       02230022         #BASR #14,#15             Call whatever you
15         02240022******** B     RETURN              and return with it
 value(s)  02250022         SPACE             ˇ
             02260022RETURN   DS    0H                  Return to caller
             02270022         SPACE 1
             02280022         #ZRET ,                        ˇ
               02290022         SPACE 1
               02300022LOADZCR  DS    0H                  Here when ZCRE
t loaded yet   02310022         SPACE 1
                 02320022         LA    #1,SZCREXEC         Address of "
 name            02330022         ST    #1,36(,#11)         Store on sta
                 02340022         L     #15,@ZILLOAD        Get address
AD         ˇ
                   02360022         #BASR #14,#15             Call ZILLO
ad ZCREXEC         02370022         XR    #1,#1               Clear inse
ter                0238002ˇ
not be loaded        02390022         BE    ERRLOAD             then err
d failure            02400022         ICM   #1,7,##CAR+1(#15)   Else get
 of compiled code    02410022         ST ˇ
our address constant   02420022         B     ZDSTREAM            Go to
                       02430022         SPACE 1
                       02440022SZCREXEC DC    YL1(##STRIˇ
 '    String "ZCREXEC"   02450022         SPACE 1
                         02460022ERRLOAD  DS    0H
                         02470022         #ERR  PREFIX=NO,             ˇ
                          X02480022               'ZIL1015 Unable to loa
C, stream operations imposX02490022               sible.'
                           02500022         EJECT
      ˇ
to check for read table      02520022*
                             02530022* If no read table exists yet, crea
                     +
ZIL work area.     ˇ
rs 15,0,1,and 2.                 02560022*
                                 02570022         ICM   #15,15,ZLCRDTBL
address of read table            0ˇ
 it's there, OK                    02590022         L     #15,@ZRMINIT
 not, allocate one                 02600022         BR    #15
ll ZRMINIT to initialize table     02610022*     ˇ
and return via #14                   02620022         SPACE 1
                                     02630022*
                                     02640022* The adcon for ZCRˇ
thin the ZILSUBRS area because it      02650022* is loaded on demand, no
ed at linkedit time.                   02660022*
                                       02670022@ZCREXEC DC    A(0)

                                         02690022ZILSUBRS DS    0A
    EXTERNAL SUBROUTINES                 02700022@ZRMINIT DC    V(ZRMINI
    ADDRESS OFˇ
                                           02720022@ZILLOAD DC    V(ZILL
      ADDRESS OF ZILLOAD                   02730022         DC    CL8'ZI
                             ˇ
        END OF SUBROUTINES                   02750022         SPACE
                                             02760022*
                                           *ˇ
> arg3    misc. function-dependent data        02780022*               4
> arg4    eof-error-p                          02790022*               8
> arg5    eofval                               02800022*   ˇ
--> arg6    recursive-p                          02810022*
                                               * 02820022         SPACE
                                                 02830022         DROP
                                                   02840022         SPAC
                                                   02850022         LTOR
                                                   02860022         EJEC
         ˇ
                                                     02880022***********
**************************************************** 02890022*
                        ˇ
code is taken from the original ZIL "READ" module.   * 02910022* #7 cont
 file pointer on entry.  The arguments on the stack  * 02920022* are as
ollowing pseoducall:                                  * 02930022ˇÁ
                                                                     * 0
 (zilread file whitespace-p eof-error-p eofval recursive-p)          * 0
                                                                     * 0
ˇ
2*                                                                     *
2* This isn't quite Common LISP READ yet.  First of all, the syntax    *
2* for READ in ˇ
022*
022* (defun read
022*        (&optional input-sˇ
30022*
40022* whereas this READ currently uses the Maclisp syntax
50022*                                       ˇ
3060022* (defun read (&optional file eofval) ...
3070022*   which maps into, kind of,
3080022* (zilread nil nil eofval nil) as a default mode of oˇ
 03090022*
 03100022* Second of all, this READ doesn't handle packages yet, which i
 03110022* say that it doesn't do anything different about colons, among
 * 03120022* things.
 * 03130022*
 * 03140022* Third of all, this READ treats # as a terminating macro rat
 * 0315002ˇ
   * 03160022* read table does not have any way of representing a non-te
g  * 03170022* reader macro.
   * 03180022*           ˇ
     * 03190022*********************************************************
****** 03200022*
     * 03210022*               0(#11) --ˇ
s      * 03220022*               4(#11) --> arg3    T if preserving-whit
       * 03230022*               8(#11) --> arg4    eof-error-p
       * 03240022*              12(#11) --> arg5    eofˇ
         * 03250022*              16(#11) --> arg6    recursive-p
         * 03260022*
         * 03270022*               #7 already contains the input file ˇ
           * 03280022*
           * 03290022***************************************************
************ 03300022         SPACE
     +
   ˇ
                 03330022         ST    #14,28(,#1)
                 03340022         STM   #11,#12,20(#1)
                 0ˇ
                   03360022         LR    #12,#15
                   03370022         USING ZILREAD,#12
                   03380022      ˇ
                     03390022         SPACE
                     03400022         TM    ZLFFLAG,ZLFEOF      IF END O
LREADY HIT           03410022         BO    RDAFˇ
EAD AFTER EOF          03420022         SPACE
                       03430022         L     #3,ZLFCHAR          GET CU
ARACTER POINTER        03440022GOTINPUT DS    0H               ˇ
                         03450022         LTR   #3,#3               CHEC
F OR NEWLINE             03460022         BP    INPUTOK             IF P
 WE HAVE GOOD STUFF      03470022         BZ    R0EOF               IF Z
OF ENCOUNTERED             03480022******** BM    R0NEWLN             IF
E, NEWLINE ENCOUNTERED     03490022R0NEWLN  DS    0H                  (R
R RETURNS A NEWLINE)       03500022         #GETC ,                   RE
ER CHARACTER ˇ
 MORE NEWLINE                03520022         SPACE
                             03530022RDAFTEOF DS    0H
IVE, EOF WAS ALREADY HIT    ˇ
                               03550022         #ERR  'ZIL2003 READ: Rea
end of file ',                X03560022               (#2),PREFIX=NO
                               03570022    ˇ
                                 03580022INPUTOK  DS    0H
                                 03590022         SPACE
                                 03600022         MVI   SYˇ
EAR SYNTAX FLAGS                   03610022         LA    #1,32(,#11)
T STACK POINTER                    03620022         #BAS  #14,READ1
 GET AN S-EXPRESSION INTO #15      03630022         ST    #3,ZLFCHAR
RESET CHARACTER POINTER              03640022         B     R0GO(#2)
BRANCH DEPENDING ON WHAT RETURNED    03650022R0GO     B     R0STUFF
0...WE GOT SOMETHING                 03660022         B     R0BADRP
4...RIGHˇ
  8...PERIOD FOUND                     03680022         B     R0EOF
  12...EOF ENCOUNTERED                 03690022         SPACE
                                        03700022ˇÁ
                  NO DATA RETURNED, EOF HIT            03710022
FFLAG,ZLFEOF      SET EOF FLAG ON IN FILE BLOCK        03720022
0,8(,#11)         If eof-error-p is NIL,               03730022 ˇ
R0EOFERR            then...                              03740022
#15,12(,#11)         set return value to eofval          03750022
#15,#13              if eofval is unsupplied &optional   03760022

  #15,#10               set return value to nil            03780022
  R0RETURN                                                 03790022R0EOF
  0H          ˇ
    #2,ZLFATOM          Load file atom for error message.    03810022
RR  'ZIL2006 READ: End of file encountered - file ',       ,X03820022
    (#2),PREFIX=NO           ˇ
SPACE                                                          03840022R
DS    0H                  BAD RIGHT PAREN                      03850022
L     #2,ZLFATOM          Load file atom forˇ
  #ERR  'ZIL2020 READ: Unmatched right parenthesis ")" - file ',X0387002
        (#2),PREFIX=NO                                           0388002
  SPACE                                                    ˇ
DOT DS    0H                  BAD PERIOD                           03900
    L     #2,ZLFATOM          Load file atom for error message.    03910
    #ERR  'ZIL2020 READ: Period "." not in dotted pair - file ',  X03920
            (#2),PREFIX=NO                                           039
      SPACE                                                          039
TUFF  DS    0H                  WE GOT SOMETHING, BUT...             039
      SPAˇ
        TM    SYNFLAGS,SYNERROR   IF A SYNTAX ERROR WAS FOUND          0
        BZ    R0RETURN            THEN...                              0
        L     #2,ZLFATOMˇ
2         #ERR  'ZIL2001 READ: Syntax error reading file ',
2               (#2),PREFIX=NO
2         SPACE 1                      ˇ
022R0RETURN DS    0H
022         SPACE
022         LR    #1,#11                              ˇ
50022         LM    #11,#12,20(#1)
60022         L     #14,28(,#1)
70022         BR    #14                                              +
4080022         EJECT                                              ˇ
 04090022READ1    DS    0H
 04100022         SPACE
 04110022***************************************************************
 0ˇ
 * 04130022* S-EXPRESSION THAT IT FINDS IN THE INPUT STREAM.  THIS ROUTI
 * 04140022* INVOKED RECURSIVELY.  LOGIC IS AS FOLLOWS:
 * 04150022*   SCˇ
   * 04160022*   IF LEFT PAREN FOUND, GET READY TO START A LIST, CALL RE
L  * 04170022*   A RIGHT PARENTHESIS IS FOUND.  BUILD LIST FROM ATOMS FR
.  * 04180022*   IF RIGHT PARENTˇ
     * 04190022*   IF PERIOD IS FOUND, RETURN TO CALLER WITH CODE 8.
     * 04200022*   IF READER MACRO CHAR, INVOKE MACRO AND RETURN WITH IT
     * 04210022*   IF END OF FILE REACHED, RETUˇ
       * 04220022*   IF ANY OTHER CHARACTER IS FOUND, BUILD AN ATOM AND
ITH IT * 04230022*******************************************************
******** 04240022         SPACE                               ˇ
           04250022         #ZPDS 32                  MAKE SURE WE HAVE
TACK SPACE 04260022         L     #15,0(,#11)         PICK UP FILE SPEC
           04270022         ST    #15,0(,#1)          SAVE FILE POINTER
             04280022         ST    #14,4(,#1)          SAVE RETURN REGI
STACK        04290022         ST    #11,8(,#1)          SAVE STACK POINT
ACK          04300022         LR    #11,#1              SET NEW STACK PO
            ˇ
L              04320022         MVI   FLAGS,X'00'         CLEAR FLAGS
               04330022         B     R1GO                SKIP OVER CHAR
T              04340022    ˇ
                 04350022CONTINUE DS    0H
                 04360022         #GETC ,                   GET A CHARAC
                 04370022         SPACE   ˇ
                   04380022R1GO     DS    0H
                   04390022         LTR   #6,#3               GET CURREN
TER POINTER        04400022         BP    R1NOTEOF       ˇ
, PROCESS IT         04410022         BM    CONTINUE            IF NEWLI
NEXT CHARACTER       04420022         LA    #2,12               ELSE EOF
ETURN TO 12          04430022         B     READ1RET             AND RET
                       04440022R1NOTEOF DS    0H
                       04450022         BCTR  #6,0                CONVER
ELATIVE COLUMN         04460022         A     #6,ZLFCARD          TO ABS
FSET IN  RECORD         04470022ˇÁ
  SET ADDRESS OF WHERE TO PUT CHARS    04480022         XR    #5,#5
  SET LENGTH OF ATOM SO FAR            04490022         L     #14,ZLCRDT
  GET ADDRESS OF READ TABLE            04500022 ˇ
    CLEAR TRT REG                        04510022         XR    #2,#2
    CLEAR TRT REG                        04520022         LA    #0,X'80'
    SET UP TO COMPARE FOR MACRO CHAR     04530022         TRT  ˇ
      SEE WHAT KIND OF CHARACTER THIS IS   04540022         CR    #2,#0
      IF MACRO BIT WAS ON IN READTABLE     04550022         BNL   GMACRO
      THEN IT'S A MACRO CHAR, PROCESS      04560022         B     GO(#2)
        ELSE BRANCH ON CHARACTER TYPE        04570022GO       B     GALO
        CHARACTER THAT CAN OCCUR IN ATOM     04580022         B     CONT
        BLANK                                04590022         B     GLEF
        LEFT ˇ
          RIGHT PARENTHESIS                    04610022         B     GS
          SEMICOLON                            04620022         B     GP
          PERIOD            ˇ
            CONTINUATION CHARACTER               04640022         B
            SINGLE ESCAPE BACKSLASH (HEX E0)     04650022         B
            DOUBLE ESCAPE VERTICAL BAR (◊) ˇ
G             DOUBLE QUOTE MARK (")                04670022         EJEC
                                                   04680022GCONT    DS
              It's a line continuation character   0469002ˇ
                                                     04700022***********
**************************************************** 04710022*
                                                   * 04720022* If the la
racter of a line (RECFM=F or RECFM=V) is the         * 04730022* "contin
haracter" (which defaults to cent sign in the        * 04740022* readtab
n ignore the following newline and process the       * 04750022* charact
he next ˇ
                                                       * 04770022*******
******************************************************** 04780022
1                      ˇ
  ZLFFLAG1,ZLFTERM    If this is from the terminal         04800022
  GALOOP              then process like ordinary char      04810022
  #0,1(,#6)           If address folloˇ
    #0,ZLFEND           doesn't point to end of record       04830022
    GALOOP              then handle this like ordinary char  04840022
ETC ,                   Otherwise get next character +
LTR   #3,#3               which should be newline, ˇ
  BNM   GABEND               or else cent sign                   0487002
  B     CONTINUE            and then go read the next one.       0488002
  EJECT                                                          0ˇ
    SPACE                                                          04900
P   DS    0H                  A NORMAL ATOM                        04910
    C     #5,ZLCWALEN         IF LENGTH HAS ALREADY REACHED MAX    04920
 ˇ
      #BAS  #14,INCRWA           ENLARGE THE WORK AREA               049
2LONG DS    0H                  ELSE                                 049
      LTR   #4,#ˇ
        BZ    RSTSLASH                                                 0
        MVC   0(1,#4),0(#6)       MOVE CHARACTER TO ATOM AREA          0
        TM    FLAGS,INBAR+SLASHˇ
2         BNZ   AFTASIS             THEN
2         TR    0(1,#4),UPTBL        FOLD TO UPPER CASE
2AFTASIS  DS    0H                            ˇ
022         LA    #4,1(,#4)           BUMP OUTPUT POINTER
022         LA    #5,1(,#5)           INCREMENT LENGTH
022RSTSLASH DS    0H                                         ˇ
50022         NI    FLAGS,255-SLASHED   RESET SINGLE-ESCAPE FLAG
60022AFT2LONG DS    0H
70022         #GETC ,                   GET THE NEXT CHARACTER
5080022         LTR   #3,#3               CHECK FOR EOF OR NEWLINE
5090022         BP    WHATISIT            IF NEITHER, PROCESS CHARACTER
5100022         BZ    GAFINISH            IF EOF, THEN END OF ATOM
5110022    ˇ
 05120022         BO    AFT2LONG            THEN SKIP OVER IT, GET NEXT
 05130022         B     GAFINISH            ELSE (NON-ESCAPED NEWLINE) E
 05140022         SPACE 1 ˇ
   05150022WHATISIT DS    0H
   05160022         L     #14,ZLCRDTBL        GET ADDR OF READ TABLE TO
R  05170022         TRT   0(1,#6),0(#14) ˇ
     05180022         BZ    GALOOP              THEN CONTINUE BUILDING A
     05190022         CLM   #2,1,=YL1(##PERIOD) IF IT IS A PERIOD
     05200022         BE    GALOOP              THEN IT'ˇ
NUE    05210022         CLM   #2,1,=YL1(##ESCAPE) IF IT IS A BACKSLASH
       05220022         BE    GESCAPE1            THEN PROCESS SINGLE ES
R      05230022         CLM   #2,1,=YL1(##BAR)    IF IT IS A VERTICAL B
         05240022ˇÁ
OUBLE ESCAPE CHAR      05250022         CLM   #2,1,=YL1(##CONT)   IF IT
TINUATION CHARACTER    05260022         BE    GCONT1              THEN P
OUBLE ESCAPE CHAR      05270022*ˇ
C.)                      05280022         TM    FLAGS,INBAR         IF W
EADY WITHIN BARS         05290022         BO    GALOOP              THEN
 AS NORMAL CHARACTER     05300022         B    ˇ
NATE ATOM                  05310022         SPACE 1
                           05320022GESCAPE1 DS    0H                   P
INGLE ESCAPE CHAR          05330022         OI    FLAGS,NONUM ˇ
IS CAN'T BE A NUMERIC ATOM   05340022         #GETC ,
XT CHARACTER FOR ATOM        05350022         LTR   #3,#3
EOF OR NEWLINE HIT           05360022         BZ    ESCERROR
F, FLAG AS SYNTAX ERROR        05370022         BP    ESCDOIT
WLINE, THEN                    05380022         LA    #6,FAKECR
CHAR TO FAKE CARRIAGE RETURN   05390022ESCDOIT  OI    FLAGS,SLASHED
 THIS CHAR Nˇ
 PROCESS AS REGULAR CHAR         05410022         SPACE 1
                                 05420022GESCAPE2 DS    0H
ESS VERTICAL BAR           ˇ
 ALREADY WITHIN BARS               05440022         BZ    NOTINBAR
EN                                 05450022         NI    FLAGS,255-INBA
ET BAR MODE OFF                    0546002ˇ
 GO TO PROCESS THE NEXT CHAR         05470022NOTINBAR DS    0H
ELSE NOT IN BARS YET...              05480022         OI    FLAGS,INBAR+
 INDICATE WITHIN BARS & NOT NUMERIC  05490022         B  ˇ
   GO TO PROCESS THE NEXT CHAR         05500022         SPACE 1
                                       05510022GCONT1   DS    0H
  It's a line continuation character   05520022         SPACE 1
                                         05530022***********************
**************************************** 05540022*
                                       * 05550022* If the last character
ne (RECˇ
hich defaults to cent sign in the        * 05570022* readtable), then ig
 following newline and process the       * 05580022* characters in the n
 as if it was all on oˇ
                                           * 05600022*******************
******************************************** 05610022         SPACE 1
                                     +
LFTERM    If this is from the termiˇ
            then process like ordinary char      05640022         LA
)           If address following this character  05650022         C
D           doesn't point to end of record       0ˇ
              then handle this like ordinary char  05670022         #GET
              Otherwise get next character         05680022         LTR
               which should be newline,            05690022      ˇ
ND                or elsecent sign                   05700022         B
LONG            and then go read the next one.       05710022         SP
                                                     05720022SEOFERR  DS
ˇ
,ZLFCHAR          RESET CHARACTER POINTER              05740022
,ZLFATOM          Load file atom for error message     05750022
IL2005 READ: Miˇ
',(#2),PREFIX=NO                                         05770022
1                                                        05780022ESCERRO
0H                  ERROR - BAˇ
  #3,ZLFCHAR          RESET CHARACTER POINTER              05800022
  #2,ZLFATOM          Load file atom for error message     05810022
  'ZIL2019 READ: No character following escapˇ
     file ',(#2),PREFIX=NO                                   05830022
ECT                                                          05840022GAF
    0H                  ELSE END OF ATOM, NOW CREATE IT     ˇ
                                                               05860022*
 FOR STORAGE ALLOCATION FAILURE                                05870022*
                                                               05880022
  LTR   #4,#4                                                    0589002
  BZ    AFAIL                                                    0590002
                                                                 0591002
CK ATOM TYˇ
TORE CURRENT CHARACTER POINTER IN CASE WE ERROR OUT BELOW...       05930
                                                                   05940
    ST    #3,ZLFCHAR     ˇ
      STM   #3,#7,SAVE37        SAVE VOLATILE REGS                   059
      LR    #0,#5               SET LENGTH OF ATOM TEXT              059
      L     #1,ZLCWA            POINT TOˇ
        LR    #2,#8               SET FLAG = T TO INTERN THE ATOM      0
        TM    FLAGS,NONUM         IF AN ESCAPED ATOM                   0
        BNZ   DONTFMT             THEN MUST BE SYMBOL.  ELSE NOT ESCD..
2ˇÁ
ERIC   06020022         B     AFTFMT              IF DELIMITED...
       06030022DONTFMT  MVI   FLAGS,X'00'          TURN OFF FLAGS
       06040022 ˇ
SYMBOL   06050022AFTFMT   DS    0H
         06060022         L     #15,ZLCABLD         CALL ZILABLD TO BUIL
OM       06070022         LA   ˇ
FOR CONS   06080022         #BASR #14,#15             AND PLACE IT ON OB
SYMBOL     06090022         LM    #3,#7,SAVE37        RESTORE VOLATILE R
           06100022         XR    #2,#2       ˇ
             06110022         B     READ1RET            RETURN TO CALLER
OM           06120022         EJECT
             06130022GSTRING  DS    0H                  FOUNDˇ
               06140022         SPACE 1
               06150022*
               06160022* START A STRING.  READ CHARACTERS, BACKSLASHIFIC
INCLUDED,        06170022* UNTIL ANOTHER DOUBLE QUOTE MARK IS ENCOUNTERE
D THE STRING     06180022* DIRECTLY IN VECTOR/STRING SPACE (IF WE RUN OU
CE, SIGNAL       06190022* AN ERROR BUT NOT UNTIL WE READ TO THE END OF
NG).       ˇ
                   06210022* REGISTER USAGE:
                   06220022*
                   0623002ˇ
ERE WE'RE BUILDING   06240022* #5 = STRING LENGTH AS WE GO
                     06250022*
                     06260022         L  ˇ
ILABLE STRING SPACE    06270022         ST    #4,VSSTRING         SAVE C
TRING POINTER          06280022STRY     DS    0H
                       06290022         L     #0,ZLCVSADˇ
)+LENGTH(VSSPACE)        06300022         A     #0,ZLCVSLEN         GIVE
R TO END OF STRING SPACE 06310022         XR    #5,#5               CLEA
 LENGTH SO FAR           06320022         LA    #1,4(,#4)           POIˇ
HERE TEXT IS GONNA GO      06330022         ST    #0,VSEND            SA
ER TO END OF STRING SPACE  06340022         CR    #1,#0               IF
E END                      06350022         BL    SOK1                TH
      ˇ
, TRY TO MAKE SOME           06370022         LTR   #4,#4
L NO ROOM                    06380022         BZ    SLOOP
AD THROUGH W/O BUILDI+
GET TRUE NEW STRINGˇ
SUCCESSFUL, TRY AGAIN            06410022SOK1     DS    0H
                                 06420022         ST    #5,0(,#4)
 CLEAR STRING PREFIX             0ˇ
T ATOM AND STRING TYPE BITS        06440022         LR    #4,#1
ART POINTING TO STRING AREA        06450022SLOOP    DS    0H
                                   06460022      ˇ
GET AN INPUT CHARACTER               06470022         LTR   #3,#3
CHECK FOR EOF/NEWLINE                06480022         BP    SGOTCHAR
IF OK, PROCESS THE CHARACTER         06490022         BZ    SEOFˇ
  IF EOF, SIGNAL ERROR                 06500022         LA    #6,FAKECR
  IF NEWLINE, POINT TO FAKE CR         06510022         B     SCHAR
  GO TO MOVE THE STRING                06520022SGOTCHAR DS    0H

    GET ADDRESS OF READ TABLE            06540022         TRT   0(1,#6),
    CHECK WHAT KIND OF CHARACTER WE GOT  06550022         BZ    SCHAR
    IF NORMAL ˇ
UOTE) IF A DOUBLE QUOTE                    06570022         BE    SDQUOT
      THEN PROCESS TERMINATING "           06580022         CLM   #2,1,=
CAPE) IF SINGLE ESCAPE (BACKSˇ
        THEN PROCESS AS ESCAPE CHARACTER     06600022         CLM   #2,1
CONT)   IF CONTINUATION CHARACTER            06610022         BE    SCON
        THEN PROCESS AS ESCAPE CHARACTER    ˇ
          ELSE NORMAL CHARACTER                06630022         C     #4
          IF WE'RE AT THE END OF VSSPACE       06640022         BL    SO
          THEN                                 06650022    ˇ
OM           NO ROOM FOR STRING RIGHT NOW        06660022         C
            IF WE'RE STILL AT THE END OF VSSPACE 06670022         BL
            THEN                                 06680022         #BAS
MB             PREPARE TO SIGNAL OUT-OF-SPACE      06690022SOK2     DS
               TRY TO GET SOME                     06700022         LTR
              IF STRING CAN'T BE BUILT             06710022         BZ
         ˇ
#4),0(#6)       ELSE MOVE CHAR INTO STRING SPACE     06730022         LA
(,#4)           INCREMENT POINTER                    06740022         LA
(,#5)           INCREMENˇ
OOP               CONTINUE                             06760022
                                                       06770022SBSLASH
                  PROCESS BACKSLASHIFIE D CHARACTER     06780022ˇÁ
        #GETC ,                   GET THE NEXT CHARACTER               0
        LTR   #3,#3               CHECK FOR NEWLINE/EOF                0
        BZ    SEOFERR             IF EOF, SIGNAL ERROR                 0
ˇ
2         LA    #6,FAKECR           ELSE POINT TO FAKE CARRIAGE RETURN
2         B     SCHAR               AND PROCESS AS NORMAL CHARACTER
2         SPACEˇ
022SCONT    DS    0H                  It's a line continuation character
022         SPACE 1
022***************************ˇ
80022*
90022* If the last character of a line (RECFM=F or RECFM=V) is the
00022* "continuation character" (which defaulˇ
6910022* readtable), then ignore the following newline and process the
6920022* characters in the next line as if it was all on one line.
6930022*                                                    ˇ
 06940022***************************************************************
 06950022         SPACE 1
 06960022         TM    ZLFFLAG1,ZLFTERM    If this is from the terminal
   06970022         BO    SCHAR               then process like ordinary
   06980022         LA    #0,1(,#6)           If address following this
r  06990022         C     #0,ZLFEND           doesn't point to end of re
   0700002ˇ
har  07010022         #GETC ,                   Otherwise get next chara
     07020022         LTR   #3,#3                which should be newline
     07030022         BNMˇ
       07040022         B     SLOOP               and then go read the n
       07050022         SPACE 1
       07060022SDQUOTE  DS    0H        ˇ
E QUOTE  07070022         LTR   #4,#4               IF STRING ERROR OCCU
         07080022         BZ    SFAIL               THEN FAIL
         07090022         L     #15,VSSTRING        ELSˇ
ST BUILT   07100022         STCM  #5,7,1(#15)         SET STRING LENGTH
           07110022         LTR   #5,#5               IF NULL STRING
           07120022         BP    SNZERO              THEN            ˇ
             07130022         LA    #4,1(,#4)            INSURE AT LEAST
ORD OF SPACE 07140022SNZERO   DS    0H
             07150022         LA    #4,3(,#4)           ROUND END-POINTE
FULLW+
NMEˇ
LE-VSSPACE-SLOT  07180022         #GETC ,                   PRIME READER
XT CHARACTER     07190022         XR    #2,#2               RETURN CODE(
                 0ˇ
ING FOUND          07210022         SPACE 1
                   07220022SFAIL    DS    0H                  FAILED TO
TRING              07230022      ˇ
H NEXT CHARACTER     07240022AFAIL    DS    0H                  FAILED T
 SYMBOL              07250022         ST    #3,ZLFCHAR          RESET CH
POINTER              07260022         L     #4,Vˇ
age address            07270022         L     #2,ZLFATOM          Load f
 for message           07280022         #ERR  (#4),(#2),PREFIX=NO Signal
                       07290022         SPACE 1                ˇ
                         07300022SNOROOM  DS    0H                  WHAT
 IF OUT OF STRING SPACE  07310022         SPACE 1
                         07320022*
                           07330022* ATTEMPT A GARBAGE COLLECTION, WHICH
E UP SOME STRING SPACE.    07340022* THIS SHOULD CAUSE THE CURRENT SPACE
FLIPPED, BUT WE WILL       07350022* STILL BE POINTING INTO THE ORIGINAL
D) SPACE. SO,ˇ
E NEW SPACE, WE MOVE THE     07370022* STRING WE'RE BUILDING INTO THE NE
AND KEEP GOING.              07380022*
                            ˇ
END OF FREE LIST               07400022         ST    #2,VSSAVE2
ETURN REGISTER                 07410022         LR    #1,#10
MMY ARG 1 TO CONS = NIL        07420022    ˇ
DUMMY ARG 1 TO CONS = NIL        07430022         L     #15,ZLCCONS
ADDRESS OF ZILCONS               07440022         LA    #0,12(,#11)
POINTER TO (NO) ARGS ON STACK    07450022         #BASR #1ˇ
LL CONS 2 FORCE GARBAGE COLLECTION 07460022         L     #2,VSSAVE2
STORE RETURN REGISTER              07470022         L     #0,ZLCVSADR
DR(NEW_VSSPACE)                    07480022         A     #0,ZLCVSLEN
+ LENGTH(NEW_VSSPACE)                07490022         S     #0,ZLCVSNXT
- ADDR(NEW_AVAILABLE_SLOT)           07500022         CH    #0,=H'8'
ALWAYS NEED AT LEAST 8 BYTES         07510022         BL    SBOMB
OR ELSE ˇ
  GET LENGTH OF STRING SO FAR + 4      07530022         CR    #0,#15
  COMPARE TO NEW AVAILABLE LENGTH      07540022         BL    SBOMB
  IF STILL NOT LONG ENO UGH, DIE.       07550022ˇÁ
4,VSSTRING        ELSE GET POINTER TO OLD STRING       07560022
,ZLCVSNXT         GET POINTER TO NEW STRING LOC        07570022
,VSSTRING         SAVE IT                              07580022 ˇ
#1,#15              GET LENGTH TOO                       07590022
#0,#14              MOVE STRING TO ITS NEW HOME          07600022
#4,#0               SET NEW OUTPUT POINTER               07610022

  #0,ZLCVSLEN         GIVES POINTER TO END OF STRING SPACE 07630022
  #0,VSEND            SAVE NEW POINTER TO END OF SPACE     07640022
  #2          ˇ
    0H                                                       07660022
    #1,ZIL2022          SIGNAL "NO STRING SPACE" ERROR       07670022
    #1,VSERROR               ˇ
XR    #4,#4               STOP BUILDING THE STRING             07690022
BR    #2                  RETURN                               07700022
EJECT                                       ˇ
  DS    0H                  FOUND A LEFT PARENTHESIS (           0772002
  SPACE                                                          0773002
                                                           ˇ
RT A LIST.  REPEATEDLY CALL READ1 RECURSIVELY, RETURNING           07750
S-EXPRESSION FOR EACH CALL AND CONSING THEM ALL TOGETHER.          07760
ISH WHEN A RIGHT PARENTHESIS IS ENCOUNTERED.                       07770
                                                                     077
      ST    #10,12(,#11)        INITIALIZE LIST TO NIL               077
      LA    #1,12-##CDR(,#11)   @ PSEUDO-CONS TO STORE THE 1ST CELL  078
      ST ˇ
        #GETC ,                   PRIME WITH NEXT CHARACTER            0
LGO     DS    0H                                                       0
        LA    #1,20(,#11ˇ
2         #BAS  #14,READ1           GO GET AN ELEMENT OF THE LIST
2         B     R1BR(#2)            BRANCH DEPENDING ON RETURN CODE
2R1BR     B     R1GOTIT             0..ˇ
022         B     R1ENDIT             4...RIGHT PARENTHESIS FOUND
022         B     R1DOT               8...PERIOD FOUND
022         B     R1EOF               12...EOF ENCOUNTˇ
00022         EJECT
10022R1GOTIT  DS    0H                  READ1 RETURNED SOMETHING GOOD
20022         SPACE                                                  +
7930022         LR    #1,#15              ARG 1 TO CONS = WHAT READˇ
 07940022         LR    #2,#10              ARG 2 TO CONS = NIL
 07950022         L     #15,ZLCCONS         GET ADDRESS OF CONS
 07960022         LA    #0,20(,#11)         PASS CURRENT STACK LOCATION
 0ˇ
T  07980022         L     #1,16(,#11)         GET PTR TO CELL TO RPLACD
O  07990022         ST    #15,##CDR(,#1)      SAVE THIS CELL OF LIST
   08000022      ˇ
TO   08010022         B     GLGO                GO GET ANOTHER S-EXPRESS
     08020022         EJECT
     08030022R1ENDIT  DS    0H  ˇ
ST     08040022         SPACE
       08050022         L     #15,12(,#11)        PICK UP POINTER TO LIS
       08060022         XR    #2,#2            ˇ
         08070022         B     READ1RET            THEN RETURN
         08080022         EJECT
         08090022R1DOT    DS    0H                  PERIOD FOUˇ
TED PAIR   08100022         SPACE
           08110022*
           08120022* IF A DOT FOLLOWS A LEFT PARENTHESIS WITH NO INTERVE
-EXPRESSION  08130022* THEN FLAG AS SYNTAX ERROR AND ACCEPT IT ANYWAY.
             08140022*
             08150022         C     #10,12(,#11)        IF LIST BUILT SO
NIL         ˇ
               08170022R1DOTERR DS    0H                  SYNTAX ERROR I
 PAIR          08180022         #ERR  1,'ZIL2009 READ: Syntax error in d
ir',          X08190022    ˇ
UE ANYWAY        08200022         OI    SYNFLAGS,SYNERROR   AND INDICATE
X ERROR          08210022         SPACE 1
                 08220022R1DOTOK  DS    0Hˇ
                   08230022         LA    #1,20(,#11)         SET STACK
                   08240022         #BAS  #14,READ1           GO GET AN
OF THE LIST        08250022         B     R2GO(#2)       ˇ
 ON RETURN CODE      08260022R2GO     B     R2GOTIT             0...WE G
HING                 08270022         B     R1ERR               4...RIGH
HESIS FOUND          08280022         B     R2ERR               8...PERI
ND                     08290022         B     R1EOF               12...E
NTERED                 08300022         EJECT
                       08310022R2GOTIT  DS    0H
                        08320022ˇÁ
                                       08330022*
                                       08340022* THIS IS AN S-EXPRESSION
LLOWS THE DOT IN A DOTTED PAIR         08350022*ˇ
 CDR OF THE CURRENT CONS                 08360022*
                                         08370022         L     #1,16(,#
    PTR TO CELL TO RPLACD WITH THIS ONE  08380022         ST   ˇ
      PUT THIS CELL AS CDR OF PREV CELL    08390022*
                                           08400022* THE NEXT THING WE S
E IS A RIGHT PARENTHESIS.                  08410022* ANYTHING ELSE IS AN
 AND IS IGNORED UNTIL WE SEE THAT ) .        08420022*
                                             08430022DOTCLNUP DS    0H
                                             08440022         LA    #1,2
        SET Sˇ
          GO GET AN ELEMENT OF THE LIST        08460022         B     R3
          BRANCH DEPENDING ON RETURN CODE      08470022R3GO     B     R2
          0...WE GOT SOMETHIˇ
            4...RIGHT PARENTHESIS FOUND          08490022         B
            8...PERIOD FOUND                     08500022         B
            12...EOF ENCOUNTERED           ˇ
                                                   08520022R1EOF    DS
              EOF IN MIDDLE OF LIST - NO GOOD      08530022         SPAC
                                                   0854002ˇ
LFCHAR          RESET CHARACTER POINTER              08550022         L
LFATOM          Load file atom for error message     08560022         #E
2002 READ: Missing right paren(s) at end of file ', X08570022
2),PREFIX=NO                                           08580022
                                                       08590022R2EXTRA
                  EXTRA STUFF TO IGNORE UNTIL )        08600022
        ˇ
1,'ZIL2004 READ: Extraneous data in dotted pair',       X08620022
PREFIX=NO                                                08630022
SYNFLAGS,SYNERROR   INDˇ
  DOTCLNUP            KEEP LOOKING FOR RIGHT PAREN         08650022
E                                                          08660022R2ERR
  0H                  EXTRA DOT IN DOTˇ
ACE                                                          08680022
RR  1,'ZIL2009 READ: Syntax error in dotted pair',          X08690022
    PREFIX=NO                                        +
OI    SYNFLAGS,SYNERROR   INDICATE A SYNTAX ERROR  ˇ
  B     DOTCLNUP            KEEP LOOKING FOR RIGHT PAREN         0872002
  SPACE                                                          0873002
  DS    0H                                                       0ˇ
    ST    #3,ZLFCHAR          RESET CHARACTER POINTER              08750
    L     #2,ZLFATOM          Load file atom for error message     08760
    #ERR  'ZIL2009 READ: Syntax error in dotted pair - file ',    X08770
 ˇ
      EJECT                                                          087
GHTP  DS    0H                  FOUND A RIGHT PARENTHESIS )          088
      SPACE     ˇ
        #GETC ,                   NEXT CHAR WILL FOLLOW IT             0
        LA    #2,4                SET RETURN TO 4                      0
        B     READ1RET         ˇ
2         EJECT
2GSEMI    DS    0H                  FOUND A SEMICOLON ;
2         SPACE                               ˇ
022         LA    #3,1                ALL WE WANT TO DO IS...
022         AH    #3,ZLFLRECL         FORCE END OF RECORD
022         B     CONTINUE            SKIP REST OF RECORD, COˇ
00022         EJECT
10022GPERIOD  DS    0H                  FOUND A PERIOD .
20022         SPACE 1
8930022*****************************************************************
8940022*
8950022* TENTATIVELY START BUILDING AN ATOM WITH THIS CHARACTER IN CASE
8960022* TUˇ
 08970022*
 08980022***************************************************************
 08990022         SPACE 1 ˇ
   09000022         MVC   0(1,#4),0(#6)       MOVE THE PERIOD TO THE ATO
   09010022         LA    #5,1                SET LENGTH SO FAR TO 1
   09020022         LA    #4,1(,#4)      ˇ
     09030022GPGET    DS    0H
     09040022         #GETC ,                   LOOK AT NEXT CHAR
     09050022         LTR   #3,#3               CHECK FOˇ
       09060022         BZ    R1DOTERR            IF EOF HIT, FLAG AS ER
       09070022         BM    GISADOT             IF NEWLINE HIT, IT REA
 DOT   09080022         L     #14,ZLCRDTBL        GET ADDR OF READ TABL
AN CHAR  09090022ˇÁ
D OF CHARACTER THIS IS 09100022         BZ    GALOOP              IF NOR
IOD IS PART OF AN ATOM 09110022         CLM   #2,1,=YL1(##PERIOD) IF PER
IOD IS PART OF AN ATOM 09120022 ˇ
                         09130022         CLM   #2,1,=YL1(##ESCAPE) IF E
ERIOD IS PART OF AN ATOM 09140022         BE    GESCAPE1
                         09150022         CLM  ˇ
RIOD IS PART OF AN ATOM    09160022         BE    GESCAPE2
                           09170022         CLM   #2,1,=YL1(##CONT)   IF
ATION, DON'T KNOW...       09180022         BE    GCONTP      ˇ
                             09190022GISADOT  DS    0H
S A DOTTED PAIR PERIOD       09200022         LA    #2,8
RN TO 8                      09210022         B     READ1RET
TURN WITH IT                   09220022         SPACE 1
                               09230022GCONTP   DS    0H
 line continuation character   09240022         SPACE 1
            ˇ
******************************** 09260022*
                               * 09270022* If the last character of a li
M=F or RECFM=V) is the     ˇ
aults to cent sign in the        * 09290022* readtable), then ignore the
ng newline and process the       * 09300022* characters in the next line
t was all on one line.           * 0931002ˇ
                                   * 09320022***************************
************************************ 09330022         SPACE 1
                                     09340022         TM ˇ
  If this is from the terminal         09350022         BO    GALOOP
  then process like ordinary char      09360022         LA    #0,1(,#6)
  If address following this character  09370022         C     #0,ZLFEND
    doesn't point to end of record       09380022         BL    GALOOP
    then handle this like ordinary char  09390022         #GETC ,
    Otherwise get next character         09400022         LTR   #3,#3
     whˇ
        or elsecent sign                   09420022         B     GPGET
      and then go read the next one.       09430022         SPACE 1
                      ˇ
                                             09450022GMACRO   DS    0H
        PROCESS READER MACRO CHARACTER       09460022         SPACE
                                     +
MCHN      START SEARCHING READER MAˇ
                                                 09490022         BZ
            IF NO MACRO DEFINED, ERROR           09500022         CLC
0(#6)       IF MACRO CHARACTER MATCHES           0ˇ
H             THEN WE HAVE IT                      09520022         ICM
##CDR(#4)     ELSE GET NEXT MACRO FORM IN CHAIN    09530022         B
              AND CONTINUE CHECKING.               09540022GMMATCˇ
                MACRO FOUND                          09550022         MV
MCHR,0(#6)      SET MACRO CHAR FOR RMCHAR FUNCTION   09560022         #G
                BUMP TO NEXT CHARACTER               09570022         ST
ˇ
,20(,#11)         SAVE FILE SPEC                       09590022
4,0(,#11)         GET FILE ARGUMENT                    09600022
5,#15          ˇ
#14,28(,#11)        SET ARG 1 TO MACRO FUNCTION = FILE   09620022
#15,7,1(#4)         GET ADDRESS OF MACRO PROCESSOR       09630022
#1,28(,#11)         POINT TO Aˇ
  #2,1*4              SET # OF ARGS * 4 FOR FUNCTION       09650022*
                                                           09660022* The
ng code imitates the code sequence generated ˇ
VALUE-LIST function to return a list of multiple values.     09680022*
                                                             09690022
    #11,24(,#11)        Prime for multiple value receiving  ˇ
#BASR #14,#15             CALL THE MACRO PROCESSOR             09710022
C     #11,24(,#11)        Test for multiple value list         09720022
L     #7,20(,#11)         RESTORE FILE SPEC                    09730022
  L     #3,ZLFCHAR          PICK UP UPDATED CHARACTER POINTER    0974002
  LA    #2,ZLCRMNIL         GET ADDRESS OF "RMNIL" OBJECT        0975002
  L     #14,ZLCRDTBL        RESET READ TABLE POINTER             0976002
  BE    RMˇ
    L     #15,24(,#11)        load up the multiple value list      09780
    CR    #15,#10             if null value list (VALUES) ret'd    09790
    BE    R1GO           ˇ
      L     #15,##CAR(,#15)     else load the first value            098
V1    DS    0H                  #15 = the one and only value         098
      CR    #15,#2              IF THE Rˇ
        BE    R1GO                THEN GO READ ANOTHER FORM. ELSE      0
        XR    #2,#2               RETURN WITH NORMAL VALUE IN #15      0
        B     READ1RET                                 
2ˇÁ
       09870022         ST    #3,ZLFCHAR          RESET CHARACTER POINTE
       09880022         L     #2,ZLFATOM          Load file atom for err
ge     09890022 ˇ
ocessingX09900022                - file ',(#2),PREFIX=NO
         09910022         EJECT
         09920022READ1RET DS   ˇ
           09930022         LR    #1,#11              RESTORE STACK POIN
           09940022         L     #11,8(,#1)
           09950022         L     #14,4(,#1)  ˇ
             09960022         BR    #14
             09970022         EJECT
             09980022INCRWA   DS    0H                       ˇ
               09990022         SPACE 1
               10000022*************************************************
************** 10010022*
               * 10020022* THIS SUBROUTINE IS CALLED WHEN THE ATOM BEING
XCEEDS THE     * 10030022* SIZE OF THE CURRENT WORKAREA.  IT ALLOCATES A
WORKAREA,      * 10040022* COPIES THE OLD INTO THE NEW, FREES THE OLD AN
 THE POINTEˇ
BROUTINE ALTERS  * 10060022* REGISTERS #0, #1 AND #15.
                 * 10070022*
                 * 1008002ˇ
******************** 10090022         SPACE 1
                     10100022         LTR   #4,#4               IF POINT
DY ZERO              10110022         BZRˇ
THOUT TRYING           10120022         ST    #14,INCRSAVE        ELSE S
RN REGISTER            10130022         L     #4,ZLCWA            GET AD
 NEW WORKAREA          10140022         L     #14,ZLCWALˇ
WORKAREA LENGTH          10150022         ST    #14,INCRSAVL        SAVE
FUTURE FREEMAIN          10160022         LA    #0,512(,#14)        COMP
WORKAREA LENGTH          10170022         ST    #0,ZLCWALEN         SETˇ
RKAREA LENGTH              10180022         #GETMAIN RC,LV=(0),LOC=BELOW
EW LARGER WORKAREA         10190022         LTR   #15,#15             IF
 FAILED (NO MEMORY)        10200022         BNZ   INCRERR             TH
      ˇ
 WORKAREA ADDRESS            10220022         LR    #0,#1
OF NEW WORKAREA              10230022         L     #1,ZLCWALEN
F NEW WORKAREA       +
S OF OLD WORKAREA  ˇ
TH OF OLD WORKAREA               10260022         MVCL  #0,#14
 OLD WORKAREA TO NEW WORKAREA    10270022         LR    #1,#4
ADDRESS OF OLD WORKAREA          1ˇ
T LENGTH OF OLD WORKAREA           10290022         FREEMAIN R,LV=(0),A=
EE THE OLD WORKAREA                10300022         L     #4,ZLCWA
T ADDRESS OF NEW WORKAREA          10310022      ˇ
SET POINTER TO NEW PORTION OF AREA   10320022         L     #14,INCRSAVE
RESTORE RETURN REGISTER              10330022         BR    #14
RETURN TO CALLER                     10340022         SPACE 1   ˇ
                                       10350022INCRERR  DS    0H
                                       10360022         LA    #1,ZIL2007
  SIGNAL "NOT ENOUGH CORE" ERROR       10370022         ST    #1,VSERROR

    ZERO OUT WORKAREA POINTER            10390022         XR    #5,#5
    ZERO OUT WORKAREA LENGTH             10400022         LA    #0,512
    GET ANOTHEˇ
      TO REINITIALIZE WORK AREA            10420022         #GETMAIN RU,
OC=BELOW (IT'S GOT TO BE AVAILABLE OR ELSE 10430022         ST    #1,ZLC
      STORE ITS ADDRESS AND Lˇ
        RESTORE RETURN REGISTER              10450022         BR    #14
        RETURN TO CALLER                     10460022         EJECT
                                            ˇ
EAD: Expected newline not found following contX10480022               in
haracter.'                                     10490022         EJECT
                                               10500022SAVEˇ
            SAVE AREAS                           10510022INCRSAVE DS
                                                 10520022INCRSAVL DS
                                                 10530022         SPACE
                                                   10540022*
                                                   10550022* FIELDS USED
NG PROCESSING                                      10560022*
         ˇ
                POINTER TO STRING BEING BUILT        10580022VSEND    DS
                POINTER TO END OF AVAILABLE VSSPACE  10590022VSSAVE2  DS
                REGISTERˇ
                  ERROR MESSAGE ADDRESS                10610022
                                                       10620022FAKECR
0D'               CHARACTER TO BE USED  AS FAKE CR      10630022ˇÁ
        SPACE                                                          1
LAGS    DC    X'00'               FLAGS FOR ATOM PROCESSING            1
ONUM    EQU   X'80'               1 = ESCAPE FOUND, ATOM NOT NUMERIC   1
ˇ
2SLASHED  EQU   X'20'               1 = PRECEDED BY BACKSLASH
2SYNFLAGS DC    X'00'               FLAGS FOR ENTIRE S-EXPRESSION
2SYNERROR EQU  ˇ
022DLM      DS    C                   DELIMITER CHARACTER
022         SPACE
022         DS    0H,XL1      ˇ
30022ZIL2007  #SATM 'ZIL2007 READ: Not enough memory to build symbol nam
40022               file '
50022         DS    0H,XL1              Alignˇ
0760022ZIL2022  #SATM 'ZIL2022 READ: Not enough vector/string space to b
0770022               tring - file '
0780022         SPACE                                       ˇ
 10790022UPTBL    DC    256YL1(*-UPTBL)     TABLE TO FOLD TO UPPER CASE
 10800022         ORG   UPTBL+X'81'
 10810022         DC    C'ABCDEFGHI'
   10820022         ORG   UPTBL+X'91'
   10830022         DC    C'JKLMNOPQR'
   10840022         ORG   UPTBL+X'A2'
   1085002ˇ
     10860022         ORG
     10870022         SPACE 1
     10880022         DROˇ
       10890022         SPACE 1
       10900022         LTORG
       10910022         EJECT           ˇ
         10920022*******************************************************
******** 10930022*
       * 10940022* (tyi &optional file eofval newlinevaˇ
         * 10950022*  is sort of like
         * 10960022* (zdread file #b1 nil eof-error-p eofval newlineval)
         * 10970022*                                                  ˇ
           * 10980022* reads a character from file and returns eofval if
,          * 10990022* newlineval if NEWLINE hit,
           * 11000022* and a character (fixnum) if a character hit.
     +
   ˇ
               * 11030022*
               * 11040022* The default value returned for newline is X'0
).             * 1ˇ
                 * 11060022* This is like the Maclisp syntax, but extend
an additional    * 11070022* optional argument for ZIL, whose 370 enviro
s to worry       * 11080022* abouˇ
ons.               * 11090022*
                   * 11100022*******************************************
******************** 11110022*                  ˇ
                     * 11120022*               0(#11) --> arg1
                     * 11130022*               4(#11) --> arg2
                     * 11140022*               8(#11) --> arg3 ˇ
TYI                    * 11150022*              12(#11) --> arg4    eof-
                       * 11160022*              16(#11) --> arg5    eofv
                       * 11170022*              20(#11) --> arg6    newl
                         * 11180022*
                         * 11190022*               #7 already contains t
 file pointer.           * 11200022*
             ˇ
**************************** 11220022         SPACE
                             11230022ZILTYI   DS    0D
TYI                         ˇ
                               11250022         ST    #12,36(,#11)
aller's regs                   11260022         ST    #14,40(,#11)
                               11270022    ˇ
                                 11280022         USING ZILTYI,#12
                                 11290022         SPACE
                                 11300022*                ˇ
                                   11310022* If there was a character re
y UNTYI, then return that char.    11320022*
                                   11330022*
Check status of unread character     11340022         CLI   ZLFUNRST,ZLF
If the unread character is invalid   11350022         BE    TYNUNCH
then don't process it                11360022         CLI   ZLFUNRST,ZLF
If the uˇ
  then return unread character         11380022******** CLI   ZLFUNRST,Z
  If the unread character is newline   11390022******** BE    TYRUNEOL
  then return newline                   11400022ˇÁ
FUNRST,ZLFSTEOF   If the unread character is EOF       11410022
RUNEOF            then return EOF                      11420022TYRUNEOL
                  Return UNTYI'd newline               11430022 ˇ
#15,20(,#11)        Get newlineval                       11440022
TYUNRET             Return it                            11450022TYRUNEO
0H                  Return UNTYI'd EOF                   11460022

  TYUNRET             Return it                            11480022TYRUN
  0H                  Return UNTYI'd character             11490022
  #2,#2       ˇ
    #2,ZLFUNRCH         Get character into register          11510022
A   #2,3                Convert to index into fixnum table   11520022
    #15,#SFT(#2)        Get aˇ
B     TYUNRET             Return it                            11540022T
DS    0H                  Return unread stuff                  11550022
MVC   ZLFLSTST,ZLFUNRST   Last char status =ˇ
  MVI   ZLFUNRST,ZLFSTINV   Invalidate unread character          1157002
  B     TYRETNOC            and return with it.                  1158002
  SPACE                                                    ˇ
CH  DS    0H                  Else no unread character valid...    11600
    TM    ZLFFLAG1,ZLFEOF     IF END OF FILE ALREADY HIT           11610
    BO    TYAFTEOF            THEN ERROR - READ AFTER EOF          11620
      SPACE                                                          116
      L     #3,ZLFCHAR          GET CURRENT POSITION                 116
OTINP DS    0H                                                       116
      LTRˇ
        BP    TYINPTOK            IF POSITIVE, WE HAVE GOOD STUFF      1
        BM    TYINL               IF NEGATIVE, RETURN AS A NEWLINE     1
******* BZ    TYIEOF    ˇ
2         SPACE
2TYIEOF   DS    0H                  EOF HIT ON LAST READ
2         OI    ZLFFLAG1,ZLFEOF     INDˇ
022         NI    ZLFFLAG1,255-ZLFNEWLN TURN NEWLINE OFF
022         MVI   ZLFLSTST,ZLFSTEOF   Indicate last char read was EOF
022         L     #15,16(,#11)        Get eofval      ˇ
50022         B     TYRETURN            and return it
60022         SPACE
70022TYINL    DS    0H                  NEWLINE HIT ON LAST READ     +
1780022*                                                           ˇ
 11790022* THE FOLLOWING IS TO PREVENT AN EXTRA KEYBOARD UNLOCK WHEN THE
 11800022* INPUT FILE IS A TERMINAL AND END-OF-LINE HAS BEEN ENCOUNTERED
 11810022* REMEMBER THAT "READ" IGNORES END-OF-LINE IT IT IS THE FIRST
 1ˇ
   11830022* HAVE TO BE CHANGED AS WELL.
   11840022*
   11850022      ˇ
IL,  11860022         BZ    TYNLNEW1            THEN...
     11870022         NI    ZLFFLAG1,255-ZLFNEWLN SET IT OFF AGAIN
     11880022         #GETC ,   ˇ
       11890022         B     TYGOTINP             AND TRY TO PROCESS IT
       11900022TYNLNEW1 DS    0H                  ELSE...
       11910022         OI    ZLFFLAG1,ZLFNEWLNˇ
         11920022         MVI   ZLFLSTST,ZLFSTEOL   Indicate last char r
newline  11930022         L     #15,20(,#11)        Get newlineval
         11940022         B     TYRETURN            and returnˇ
           11950022         SPACE
           11960022TYINPTOK DS    0H                  REG 3 LOCATES CURR
ACTER      11970022         SPACE
             11980022         NI    ZLFFLAG1,255-ZLFNEWLN TURN NEWLINE I
 OFF         11990022         LR    #4,#3               CONVERT RELATIVE
TO           12000022         BCTR  #4,0                 ABSOLUTE LOCATI
NE          ˇ
er             12020022         XR    #2,#2               Clear insert r
               12030022         IC    #2,0(,#4)           Get character
ister          12040022    ˇ
ter              12050022         SLA   #2,3                Convert to i
o fixnum table   12060022         LA    #15,#SFT(#2)        Get address
m from table     12070022         MVI   ZLˇ
 read is valid     12080022         L     #3,ZLFCHAR          RELOAD CHA
OINTER             12090022         #GETC ,                   GET NEXT C
 BEFORE RETURN     12100022         SPACE                ˇ
                     12110022TYRETURN DS    0H
                     12120022         ST    #3,ZLFCHAR          RESET CH
POINTER              12130022TYRETNOC DS    0H
                       12140022         L     #12,36(,#11)        Restor
's regs                12150022         L     #14,40(,#11)
                       12160022         BR    #14                 Return
                        12170022ˇÁ
                                       12180022TYAFTEOF DS    0H
  IF NEGATIVE, EOF WAS ALREADY HIT     12190022         L     #2,ZLFATOM
  Load file atom for error message     12200022 ˇ
ad after end of file ',(#2),            X12210022               PREFIX=N
                                         12220022         SPACE
                                         12230022         DROP ˇ
                                           12240022         SPACE
                                           12250022         LTORG
                                           12260022         EJECT
                                             12270022*******************
******************************************** 12280022*
                                           * 12290022* (tyipeek &optiona
ile eofval neˇ
                                             * 12310022* (zdread file #b
eof-error-p eofval newlineval)               * 12320022*
                            ˇ
from file and returns eofval if EOF hit,       * 12340022* newlineval if
 hit,                                          * 12350022* and a charact
um) if a character hit.                    ˇ
                                                 * 12370022* This is lik
clisp syntax, but extended with an additional    * 12380022* optional ar
or ZIL, whose 370 environment has to worry       * 1239002ˇ
with those pesky newline conditions.               * 12400022*
                                                   * 12410022***********
**************************************************** 12420022*
                                                     * 12430022*
(#11) --> arg1                                       * 12440022*
(#11) --> arg2                                       * 12450022*
(#11) --ˇ
12(#11) --> arg4    eof-error-p                        * 12470022*
16(#11) --> arg5    eofval                             * 12480022*
20(#11) --> arg6    newˇ
                                                         * 12500022*
   #7 already contains the input file pointer.           * 12510022*
                                      ˇ
************************************************************ 12530022
ACE 1                                                        12540022ZIL
    0D                  This is TYIPEEK              +
SPACE                                              ˇ
  ST    #12,36(,#11)        Save caller's regs                   1257002
  ST    #14,40(,#11)                                             1258002
  LR    #12,#15                                                  1ˇ
    USING ZILTYIPK,#12                                             12600
    SPACE                                                          12610
    L     #6,8(,#11)          Get arg 1 to TYIPEEK                 12620
 ˇ
      BE    TPARGNIL            then OK                              126
      CR    #6,#8               If T                                 126
      BE    TPARˇ
        CLI   ##TYPE(#6),##FIXNUM If a character                       1
        BNE   TPARG1ER            then                                 1
        L     #2,##CDR(,#6)    ˇ
2         CL    #2,#SFW255           Must be between 0 and 255
2         BH    TPARG1ER             otherwise error
2         B     TPARG1OK            If not NILˇ
022         SPACE
022TPARGNIL DS    0H                  Arg 1 to TYIPEEK is NIL
022TPARGT   DS    0H                  Arg 1 to TYIPEEK is T  ˇ
50022TPARG1OK DS    0H                  #6 = NIL, T or pointer to fixnum
60022*
70022* If there was a character restored by UNTYI, then return that char
2780022*
2790022*                                  Check status of unread charact
2800022         CLI   ZLFUNRST,ZLFSTINV   If the unread character is inv
2810022    ˇ
 12820022         MVC   ZLFLSTST,ZLFUNRST   Last char status = this char
 12830022         CLI   ZLFUNRST,ZLFSTVLD   If the unread character is r
 12840022         BE    TPˇ
   12850022         CLI   ZLFUNRST,ZLFSTEOL   If the unread character is
   12860022         BE    TPCKEOL             then return newline
   12870022         CLI   ZLFUNRST,ZLFSTEˇ
     12880022         BE    TPRETEOF            then return EOF
     12890022TPRUNCH  DS    0H                  Return UNTYI'd character
     12900022         XR    #2,#2               Clear inˇ
       12910022         IC    #2,ZLFUNRCH         Get character into reg
       12920022         B     TPCKCHAR            Go to check it
       12930022TPNUNCH  DS    0H                  Else no unread charac
id...    12940022ˇÁ
 ALREADY HIT           12950022         BO    TPAFTEOF            THEN E
EAD AFTER EOF          12960022TPCHKIT  DS    0H
                       12970022 ˇ
POSITION                 12980022         BP    TPINPOK             IF P
 WE HAVE GOOD STUFF      12990022         BM    TPEEKNL             IF N
 RETURN AS A NEWLINE     13000022******** BZ   ˇ
OF ENCOUNTERED             13010022         SPACE 1
                           13020022TPEEKEOF DS    0H
                           13030022         MVI   ZLFLSTST,ZLFˇ
 last char read was EOF      13040022TPRETEOF DS    0H
                             13050022         L     #15,16(,#11)
al                           13060022         B     TPRETURN
turn with it                   13070022         SPACE
                               13080022TPEEKNL  DS    0H
                               13090022*
            ˇ
dition.  If ZLFNEWLN has not     13110022* been set on, this means that
not yet seen a newline, so       13120022* return the newline parameter.
ise, TYI has already seen aˇ
bump the pointer back, and         13140022* return that character.
                                   13150022*
                                   1316002ˇ
If newline bit is already on,        13170022         BZ    TPNNLYET
then...                              13180022         NI    ZLFFLAG1,255
N turn newline bit off               13190022         #GEˇ
   get character from next line        13200022         L     #6,8(,#11)
   reload arg 1 to TYIPEEK             13210022         B     TPCHKIT
   and check it again. Else...         13220022TPNNLYET DS    0H
    No newline yet, return newline parm  13230022         MVI   ZLFLSTST
L   Indicate last char read was newline  13240022TPCKEOL  DS    0H
                                         13250022         L     #15,20(,
    Getˇ
      If (TYIPEEK NIL ...)                 13270022         BE    TPRETU
      then accept this                     13280022         CR    #6,#8
      If (TYIPEEK T ..ˇ
        then always consider this whitespace 13300022*
        Else (TYIPEEK character ...)         13310022         CLC   0(8,
5)      If character not EQL to newli+
          then skip this character ˇ
            else accept it.                      13340022         SPACE
                                                 13350022TPINPOK  DS
            REG 3 LOCATES CURRENT CHARACTER      1ˇ
                                                   13370022         LR
              CONVERT RELATIVE COLUMN TO           13380022         BCTR
               ABSOLUTE LOCATION IN LINE           13390022      ˇ
LFCARD          Get address of character             13400022         XR
2               Clear insert register                13410022         IC
(,#4)           Get character into register          13420022         ST
ˇ
FLSTST,ZLFSTVLD   Indicate last char read is valid     13440022TPCKCHAR
                                                       13450022
,#10           ˇ
TPRETCHR            then accept this character           13470022
#6,#8               If (TYIPEEK T ...)                   13480022
TPCKWSP             then do whˇ
  #2,##CDR(,#6)       If character not EQL to UNTYI'd char 13500022
  TPSKIP              then skip this character             13510022
  TPRETCHR            else accept this characˇ
    0H                  Do whitespace test for character     13530022
    #14,ZLCRDTBL        Get address of read table            13540022
    #14,#2              Point to syntax bits for character  ˇ
CLI   0(#14),##BLANK      If this is a whitespace character    13560022
BE    TPSKIP              then skip.                           13570022*
B     TPRETCHR            Else accept.                         13580022T
R DS    0H                  Return character in #2               1359002
  SLA   #2,3                Convert to index into fixnum table   1360002
  LA    #15,#SFT(#2)        Get address of fixnum from table     1361002
* B     TPˇ
    SPACE                                                          13630
URN DS    0H                  #15 points to character              13640
    L     #12,36(,#11)   ˇ
      L     #14,40(,#11)                                             136
      BR    #14                 Return                               136
      SPACE 1                           ˇ
PSKIP   DS    0H                  (TYIPEEK T/char ...) rejected this   1
        L     #3,ZLFCHAR          Reload current character pointer     1
        #GETC ,                   Get next character   
2ˇÁ
er     13720022         L     #6,8(,#11)          Reload arg 1 to TYIPEE
       13730022         B     TPCHKIT             Check it again
       13740022Tˇ
         13750022         #ERR  'Argument 1 to TYIPEEK not NIL, T or a c
 - ',   X13760022               8(#11)
         13770022TPAFTEOF DS   ˇ
DY HIT     13780022         L     #2,ZLFATOM          Load file atom for
essage     13790022         #ERR  'ZIL2003 TYIPEEK: Read after end of fi
),        X13800022               PREFIX=NO   ˇ
             13810022         SPACE 1
             13820022         DROP  #12
             13830022         SPACE                          ˇ
               13840022         LTORG
               13850022         EJECT
               13860022*************************************************
**************** 13870022*
               * 13880022* (untyi char &optional file eofval newlineval)
               * 13890022*  is sort of like
           ˇ
l)               * 13910022*
                 * 13920022* "unreads" a character from file.  If the la
 read from file  * 1393002ˇ
s returned;        * 13940022* else a character (fixnum) if a character
                   * 13950022*
                   * 13960022* This is liˇ
ith an additional    * 13970022* optional argument for ZIL, whose 370 en
t has to worry       * 13980022* about what to do with those pesky newli
tions.               * 13990022*                        ˇ
                       * 14000022***************************************
************************ 14010022*
                       * 14020022*               0(#11) --> arg1       ˇ
                         * 14030022*               4(#11) --> arg2
                         * 14040022*               8(#11) --> arg3    th
ter to be unread         * 14050022*              12(#11) --> arg4    eo
p     ˇ
                           * 14070022*              20(#11) --> arg6
al                         * 14080022*
                     +
nput file pointer. ˇ
                               * 14110022*******************************
******************************** 14120022         SPACE 1
                                 1ˇ
is is UNTYI                        14140022         SPACE
                                   14150022         ST    #12,36(,#11)
ve caller's regs                   14160022      ˇ
                                     14170022         LR    #12,#15
                                     14180022         USING ZILUNTYI,#12
                                     14190022         SPACE     ˇ
                                       14200022         L     #5,8(,#11)
  Get arg 1 to UNTYI                   14210022         CLI   ZLFUNRST,Z
  If unread char is still valid        14220022         BNE   TUTWICE

F   If last char read was EOF,           14240022         BE    TURETEOF
    then return eofval                   14250022         CLI   ZLFLSTST
L   If last chˇ
      then return newlineval               14270022         CLI   ZLFLST
VLD   If last-char-read is not valid       14280022         BNE   TUBAD
      then error             ˇ
#FIXNUM Check arg 1 to UNTYI                 14300022         BNE   TUER
        Must be a fixnum                     14310022         L     #3,#
)       Get the character                   ˇ
          Must be between 0 and 255            14330022         BH    TU
                                               14340022         XR    #2
          Clear insert register                14350022    ˇ
TCH         Get last read char into register     14360022         LR
            Get last read char into register     14370022         SLA
            Convert to index into fixnum table   14380022         LA
FT(#2)        Get address of fixnum from table     14390022         CR
              If last char read doesn't match      14400022         BNE
G             then error                           14410022         STC
UNRCH    ˇ
NRST,ZLFSTVLD   Indicate unread char valid           14430022         SP
                                                     14440022TURETURN DS
                #15 poinˇ
2,36(,#11)        Restore caller's regs                14460022
4,40(,#11)                                             14470022
4                 Return                                14480022ˇÁ
        SPACE 1                                                        1
URETEOF DS    0H                  Last char read was EOF               1
        L     #15,16(,#11)        Get eofval                           1
ˇ
2         BNE   TUWRONG             then error
2         MVI   ZLFUNRST,ZLFSTEOF   Indicate unread char is EOF
2         B    ˇ
022TURETEOL DS    0H                  Last char read was newline
022         L     #15,20(,#11)        Get newlineval
022         CLC   0(8,#5),0(#1ˇ
80022         BNE   TUWRONG             then error
90022         MVI   ZLFUNRST,ZLFSTEOL   Indicate unread char is newline
00022         B     TURETURN            else ˇ
4610022         SPACE 1
4620022TUERROR  DS    0H
4630022         L     #2,ZLFATOM          Load file atom forˇ
 14640022         #ERR  'ZIL2003 UNTYI: Invalid character specified for
X14650022               (#2),' - ',(#5),PREFIX=NO
 14660022TUWRONG  DS    0H
   14670022         LR    #4,#15              Load true character pointe
   14680022         L     #2,ZLFATOM          Load file atom for error m
   14690022         #ERR  'ZIL2003 UNTYI: Specified character ',(#5),' d
maX1470002ˇ
     14710022TUBAD    DS    0H
     14720022         L     #2,ZLFATOM          Load file atom for error
     14730022         #ERˇ
d charX14740022               acter ',(#5),' for file ',(#2),PREFIX=NO
       14750022         SPACE 1
       14760022TUTWICE  DS    0H        ˇ
         14770022         L     #2,ZLFATOM          Load file atom for e
sage     14780022         #ERR  'ZIL2003 UNTYI: Sequence error - issued
thout reX14790022               ading another characterˇ
X=NO       14800022         SPACE 1
           14810022         DROP  #12
           14820022         SPACE                                     ˇ
             14830022         LTORG
             14840022         EJECT
             14850022***************************************************
*****+
   ˇ
               * 14880022*  is sort of like
               * 14890022* (zdread file #b100 nil eof-error-p eofval new
               * 1ˇ
                 * 14910022* reads a character from file and returns eof
OF hit,          * 14920022* newlineval if NEWLINE hit,
                 * 14930022* and ˇ
                   * 14940022*
                   * 14950022* This is like the Maclisp syntax, but exte
h an additional    * 14960022* optional argumentˇ
t has to worry       * 14970022* about what to do with those pesky newli
tions.               * 14980022*
                     * 14990022********************************ˇ
************************ 15000022*
                       * 15010022*               0(#11) --> arg1
                       * 15020022*               4(#11) --> arg2
                         * 15030022*               8(#11) --> arg3    no
y READCH                 * 15040022*              12(#11) --> arg4    eo
p                        * 15050022*              16(#11) --> arg5    eo
             ˇ
al                         * 15070022*
                           * 15080022*               #7 already contains
ut file pointer.           *ˇ
                             * 15100022*********************************
****************************** 15110022         SPACE
                               15120022READˇ
 is READCH                       15130022         SPACE
                                 15140022         ST    #12,36(,#11)
 caller's regs                   15150022         ST    #1ˇ
                                   15160022         LR    #12,#15
                                   15170022         USING READCH,#12
                                   15180022         SPACE
                                     15190022         TM    ZLFFLAG1,ZLF
IF END OF FILE ALREADY HIT           15200022         BO    RCAFTEOF
THEN ERROR - READ AFTER EOF          15210022         SPACE
        ˇ
  GET CURRENT POSITION                 15230022RCGOTINP DS    0H
                                       15240022         LTR   #3,#3
  CHECK INPUT POINTER                   15250022ˇÁ
INPOK             IF POSITIVE, WE HAVE GOOD STUFF      15260022
NL                IF NEGATIVE, RETURN AS A NEWLINE     15270022********
EOF               IF ZERO, EOF ENCOUNTERED             15280022 ˇ
                                                         15290022RCEOF
0H                  EOF HIT ON LAST READ                 15300022
ZLFFLAG1,ZLFEOF     INDICATE EOF FOR NEXT CALL           15310022

  #15,16(,#11)        Get eofval                           15330022
  RCRETURN            and return it                        15340022
E             ˇ
    0H                  NEWLINE HIT ON LAST READ             15360022*
                                                             15370022* T
WING IS TO PREVENT AN EXTRA Kˇ
ILE IS A TERMINAL AND END-OF-LINE HAS BEEN ENCOUNTERED.        15390022*
R THAT "READ" IGNORES END-OF-LINE IT IT IS THE FIRST           15400022*
HAT IT SEES - IF THIS WERE NOT THE CASE, REAˇ
TO BE CHANGED AS WELL.                                           1542002
                                                                 1543002
  TM    ZLFFLAG1,ZLFNEWLN   IF WE ALREADY RETURNED NEWLINE/ˇ
    BZ    RCNLNEW1            THEN...                              15450
    NI    ZLFFLAG1,255-ZLFNEWLN SET IT OFF AGAIN                   15460
    #GETC ,                    READ IN THE NEXT CHARACTER          15470
      B     RCGOTINP             AND TRY TO PROCESS IT               154
LNEW1 DS    0H                  ELSE...                              154
      OI    ZLFFLAG1,ZLFNEWLN   INDICATE NEWLINE                     155
      L  ˇ
        B     RCRETURN            and return with it                   1
        SPACE                                                          1
CINPOK  DS    0H        ˇ
2         SPACE
2         NI    ZLFFLAG1,255-ZLFNEWLN TURN NEWLINE INDICATOR OFF
2         LR    #4,#3               CONˇ
022         BCTR  #4,0                 ABSOLUTE LOCATION IN LINE
022         A     #4,ZLFCARD            AND PASS IT TO INTERN ROUTINE
022*                                                  ˇ
00022* Since we are calling ZILINTN directly to intern the character,
10022* we MUST check for T ourselves.
20022*                                                               +
5630022         CLI   0(#4),C'T'          If character = T         ˇ
 15640022         BNE   RCNOTT              then
 15650022         LR    #15,#8               return address of T
 15660022         B     RCGETNXT            else not T...
 1ˇ
   15680022         LR    #3,#7               Save file pointer across Z
   15690022         LA    #5,1                Get length of print name t
   15700022      ˇ
t    15710022         L     #15,ZLCINTN         Get address of ZILINTN
     15720022         LA    #0,44(,#11)         Get current top-of-stack
     15730022         #BASR #14,ˇ
bol    15740022         LR    #7,#3               Restore file pointer
       15750022RCGETNXT DS    0H                  Time to pre-read next
r      15760022         L     #3,ZLFCHAR       ˇ
         15770022         #GETC ,                   GET NEXT CHARACTER B
TURN     15780022         SPACE
         15790022RCRETURN DS    0H                            ˇ
           15800022         ST    #3,ZLFCHAR          RESET CHARACTER PO
           15810022         L     #12,36(,#11)        Restore caller's r
           15820022         L     #14,40(,#11)
             15830022         BR    #14                 Return
             15840022         SPACE
             15850022RCAFTEOF DS    0H                  IF NEGATIVE, EOF
EADY HIT    ˇ
or message     15870022         #ERR  'ZIL2003 READCH: Read after end of
(#2),         X15880022               PREFIX=NO
               15890022    ˇ
                 15900022         DROP  #12
                 15910022         SPACE
                 15920022         LTORG   ˇ
                   15930022         EJECT
                   15940022*********************************************
****************** 15950022*                             ˇ
                   * 15960022* (peekch &optional file eofval newlineval)
                   * 15970022*  is sort of like
                   * 15980022* (zdread file #b110 nil eof-error-p eofval
neval)               * 15990022*
                     * 16000022* peeks at a character from file and retu
al if EOF hit,       * 16010022* newlineval if NEWLINE hit,
                      * 16020022ˇÁ
racter hit.                          * 16030022*
                                     * 16040022* This is like the Maclis
, but extended with an additional    * 16050022*ˇ
ose 370 environment has to worry       * 16060022* about what to do with
esky newline conditions.               * 16070022*
                                       * 16080022**************ˇ
****************************************** 16090022*
                                         * 16100022*               0(#11
g1                                       * 16110022*               4(#11
arg2                                       * 16120022*               8(#
arg3    not used by PEEKCH                 * 16130022*              12(#
arg4    eof-error-p                        * 16140022*              16(#
arg5    eofvaˇ
> arg6    newlineval                         * 16160022*
                                             * 16170022*               #
y contains the input file poˇ
                                               * 16190022***************
************************************************ 16200022         SPACE
                                           ˇ
              This is PEEKCH                       16220022         SPAC
                                                   16230022         ST
(,#11)        Save caller's regs                   1624002ˇ
40(,#11)                                             16250022         LR
#15                                                  16260022         US
CH,#12                                               16270022         SP
                                                       16280022
FFLAG1,ZLFEOF     IF END OF FILE ALREADY HIT           16290022
AFTEOF            THEN ERROR - READ AFTER EOF          16300022PCCHKIT
        ˇ
#3,15,ZLFCHAR       GET CURRENT POSITION                 16320022
PCINPOK             IF POSITIVE, WE HAVE GOOD STUFF      16330022
PCPEEKNL            IF ˇ
                      If zero, eof encountered             16350022
  #15,16(,#11)        Get eofval                           16360022
  PCRETURN            and return with ˇ
ACE                                                          16380022PCP
    0H                                                       16390022*
                                                     +
egative, meaning a newline condition.  If ZLFNEWLN ˇ
set on, this means that TYI has not yet seen a newline, so       1642002
n the newline parameter.  Otherwise, TYI has already seen a      1643002
ne, so get another character, bump the pointer back, and         1ˇ
urn that character.                                                16450
                                                                   16460
    TM    ZLFFLAG1,ZLFNEWLN   If newline bit is already on,        16470
 ˇ
      NI    ZLFFLAG1,255-ZLFNEWLN turn newline bit off               164
      #GETC ,                    get character from next line        165
      B     PCCHˇ
CNNLYET DS    0H                  No newline yet, return newline parm  1
        L     #15,20(,#11)        Get newlineval                       1
        B     PCRETURN         ˇ
2         SPACE
2PCINPOK  DS    0H                  REG 3 LOCATES CURRENT CHARACTER
2         SPACE                               ˇ
022         LR    #4,#3               CONVERT RELATIVE COLUMN TO
022         BCTR  #4,0                 ABSOLUTE LOCATION IN LINE
022         A     #4,ZLFCARD            AND PASS IT TO INTERNˇ
00022*
10022* Since we are calling ZILINTN directly to intern the character,
20022* we MUST check for T ourselves.
6630022*
6640022         CLI   0(#4),C'T'          If character = T
6650022         BNE   PCNOTT              then
6660022    ˇ
 16670022         B     PCRETURN            else not T...
 16680022PCNOTT   DS    0H                  #4 points to print name text
 16690022         LA    #5ˇ
   16700022         XR    #7,#7               Indicate print name must b
   16710022         L     #15,ZLCINTN         Get address of ZILINTN
   16720022         LA    #0,44(,#11)    ˇ
     16730022         #BASR #14,#15             Call ZILINTN to intern t
l    16740022         SPACE
     16750022PCRETURN DS    0H                          ˇ
       16760022         L     #12,36(,#11)        Restore caller's regs
       16770022         L     #14,40(,#11)
       16780022         BR    #14                 Return               
         16790022ˇÁ
                       16800022PCAFTEOF DS    0H                  IF NEG
OF WAS ALREADY HIT     16810022         L     #2,ZLFATOM          Load f
 for error message     16820022 ˇ
of file ',(#2),         X16830022               PREFIX=NO
                         16840022         SPACE
                         16850022         DROP ˇ
                           16860022         SPACE
                           16870022         LTORG
                           16880022         EJECT             ˇ
                             16890022         SPACE
                             16900022***********************************
**************************** 16910022*
                             * 16920022* READLINE - returns a line from
 file as a string.           * 16930022*
                             * 16940022*********************************
************ˇ
                                 16960022*******************************
******************************** 16970022*
                           ˇ
                                 * 16990022*               4(#11) --> ar
                                 * 17000022*               8(#11) --> ar
t used by READLINE               * 1701002ˇ
eof-error-p                        * 17020022*              16(#11) -->
eofval                             * 17030022*              20(#11) -->
newlineval                         * 17040022*           ˇ
                                     * 17050022*               #7 alread
ns the input file pointer.           * 17060022*
                                     * 17070022*************************
**************************************** 17080022         SPACE 1
                                         17090022READLINE DS    0D
    This is READLINE                     17100022         SPACE
       ˇ
      Save caller's regs                   17120022         ST    #14,40
                                           17130022         LR    #12,#1
                      ˇ
                                             17150022         SPACE
                                             17160022         TM    ZLFF
EOF     IF END OF FILE ALREADY HIT   +
          THEN ERROR - READ AFTER Eˇ
                                                 17190022         L
AR          GET CURRENT CHARACTER POINTER        17200022         LTR
            TEST IT                              1ˇ
              IF ZERO, END OF FILE                 17220022         BM
NL            IF NEWLINE, FORCE ANOTHER READ       17230022         TM
G1,ZLFNEWLN   IF NEWLINE CONDITION CURRENT         17240022      ˇ
EWLN            THEN...                              17250022RLFORCNL XR
3                SET CHARACTER POINTER TO            17260022         BC
                 FORCE A NEWLINE CONDITION TO        17270022         #G
ˇ
                                                       17290022
                                                       17300022
,#3            ˇ
RLEOF               IF ZERO, END OF FILE                 17320022
#3,#3               SET CHARACTER POINTER TO             17330022
#3,0                FORCE A NEˇ
  #1,#1               ENTRY CODE FOR ZILVSS = 0            17350022
  #2,ZLFLRECL         GET LENGTH OF INPUT DATA LINE        17360022
  #15,ZLCVSS          GET ADDRESS OF ZILVSS  ˇ
    #0,16(,#11)         SET CURRENT STACK POINTER            17380022
    ZLCGCFLG,ZLCGCBLD   Turn on trust-#0 flag for GC         17381023
ASR #14,#15             CALL ZILVSS TO GET SPACE            ˇ
NI    ZLCGCFLG,255-ZLCGCBLD Turn off trust-#0 flag for GC      17383023
LTR   #15,#15             IF NO SPACE                          17400022
BZ    RLNOSPC             THEN ERROR                           17410022
  LA    #0,##VECDAT(,#15)   DESTINATION ADDRESS = STRING TEXT    1742002
  LH    #1,ZLFLRECL         DESTINATION LENGTH = INPUT LRECL     1743002
  L     #4,ZLFCARD          SOURCE ADDRESS = INPUT RECORD        1744002
  LR    #5ˇ
    MVCL  #0,#4               MOVE INPUT DATA TO STRING TEXT       17460
    B     RLRETURN            RETURN WITH STRING                   17470
    SPACE                ˇ
OF    DS    0H                  EOF HIT ON LAST READ                 174
      OI    ZLFFLAG1,ZLFEOF     INDICATE EOF FOR NEXT CALL           175
      NI    ZLFFLAG1,255-ZLFNEWLN TURN Nˇ
        L     #15,16(,#11)        Return eofval                        1
        B     RLRETURN                                                 1
        SPACE                                          
2ˇÁ
IT     17550022         L     #2,ZLFATOM          Get file atom for erro
e      17560022         #ERR  'ZIL2003 READLINE: Read after end of file
      X17570022 ˇ
         17580022         SPACE
         17590022RLNOSPC  DS    0H
         17600022         #ERR ˇ
ace to buiX17610022               ld string.',PREFIX=NO
           17620022         SPACE
           17630022RLRETURN DS    0H          ˇ
             17640022         ST    #3,ZLFCHAR          RESET CHARACTER
             17650022         L     #12,36(,#11)        Restore caller's
             17660022         L     #14,40(,#11)             ˇ
               17670022         BR    #14                 Return
               17680022         SPACE
               17690022         DROP  #12
                 17700022         SPACE
                 17710022         LTORG
                 17720022         EJECT
           ˇ
****************** 17740022*
                 * 17750022* RDRMACRO - takes two arguments, both requir
                 * 1776002ˇ
                   * 17770022*   (1) The single character to be defined
der macro.         * 17780022*       This can be a string, symbol or cha
ixnum.             * 17790022*   (2) The ˇ
                     * 17800022*
                     * 17810022* Note that (2) MUST be a SUBR!  Even a c
s not acceptable.    * 17820022*                        ˇ
                       * 17830022***************************************
************************ 17840022*
                       * 17850022*               0(#11) --> arg1       ˇ
                         * 17860022*               4(#11) --> arg2
                         * 17870022*               8(#11) --> arg3    ch
arg to RDRMACRO          * 17880022*              12(#11) --> arg4    su
o RDRMˇ
                           * 17900022*              20(#11) --> arg6
                           * 17910022*
                     +
nput file pointer. ˇ
                               * 17940022*******************************
******************************** 17950022         SPACE
                                 1ˇ
is is RDRMACRO                     17970022         ST    #12,36(,#11)
ve caller's regs                   17980022         ST    #14,40(,#11)
                                   17990022      ˇ
                                     18000022         USING RDRMACRO,#12
                                     18010022         SPACE
                                     18020022         L     #4,Zˇ
  Get readtable address                18030022         LM    #2,#3,8(#1
  Get args: #2 = CHAR, #3 = SUBR       18040022         CLI   ##TYPE(#2)
M IF ARG1 IS A FIXNUM                  18050022         BE    RMA1CHAR

ING IF ARG1 IS A STRING                  18070022         BE    RMA1OK
    THEN OK (AS LONG AS LENGTH = 1)      18080022         CLI   ##TYPE(#
BOL IF ARG1 ISˇ
      THEN ERROR                           18100022         L     #2,##P
)     ELSE GET SYMBOL PRINT NAME           18110022RMA1OK   DS    0H
                             ˇ
        CLEAR INSERT REG                     18130022         CLC   1(3,
(1)     STRING/SYMBOL NAME LENGTH MUST BE 1  18140022         BNE   RMER
        ELSE ERROR                          ˇ
T(,#2)    GET READER MACRO CHARACTER IN REG    18160022         B     RM
                                               18170022RMA1CHAR DS    0H
          IT'S A FIXNUM...                     18180022    ˇ
(,#2)       GET FIXNUM VALUE                     18190022         CL
55          MUST BE BETWEEN 0 AND 255            18200022         BH
            ELSE ERROR                           18210022RMCKARG2 DS
                                                   18220022         CR
              IF ARG2 IS NIL                       18230022         BE
              THEN OK (MEANS DELETE THIS MACRO)    18240022         CLI
(#3),##SUˇ
ROR2            THEN ERROR                           18260022RMA2OK   DS
                                                     18270022*
                        ˇ
D NEW READER MACRO CELL.  FIRST SEARCH THE EXISTING    18290022* CHAIN F
 CELL WITH OUR CHARACTER, OR (2) THE END.              18300022*
                                                        18310022ˇÁ
        L     #1,ZLCRMCHN         PICK UP READER MACRO CHAIN           1
        LA    #5,ZLCRMCHN-##CDR   FAKE OUT INITIAL POINTER             1
MLOOP   DS    0H                                                       1
ˇ
2         BZ    RMNOMAC
2         LR    #5,#1
2         CLM  ˇ
022         BE    RMGOTMAC            IF SO, GO TO PROCESS
022         L     #1,##CDR(,#5)       IF NOT, GET NEXT CELL IN CHAIN
022         B     RMLOOP      ˇ
10022RMNOMAC  DS    0H                  DOES NOT EXIST - CREATE NEW ONE
20022         SPACE 1
30022         CR    #3,#10              IF ARˇ
8440022         BE    RMRETURN            THEN DO NOTHING, NO MACRO TO D
8450022*
8460022* CONS UP A NEW CELL                                 ˇ
 18470022*
 18480022         XR    #1,#1               ARG1 TO CONS
 18490022         XR    #2,#2               ARG2 TO CONS
   18500022         L     #15,ZLCCONS         GET ADDRESS OF CONS
   18510022         LA    #0,44(,#11)         PASS CURRENT STACK POINTER
   18520022         OI    ZLCGCFLG,ZLCGCBLD   Turn on trust-#0 flag for
   1852202ˇ
     18530022         NI    ZLCGCFLG,255-ZLCGCBLD Turn off trust-#0 flag
     18531023         STC   #6,##TYPE(,#15)     SET MACRO CHARACTER IN C
     18540022         ST ˇ
       18550022         LR    #5,#15              SET POINTER TO IT
       18560022RMGOTMAC DS    0H                  NOW WE HAVE A CELL
       18570022         CR    #3,#10    ˇ
         18580022         BNE   RMNEWMAC            THEN...
         18590022         LA    #1,0(#6,#4)          POINT TO CHAR POS I
BLE      18600022         NI    0(#1),X'7F'          REˇ
FOR CHAR   18610022         B     RMRETURN            ELSE...
           18620022RMNEWMAC DS    0H                  UPDATE READER MACR
           18630022         L     #1,##CAR(,#3)       GET COMPILED CODˇ
R SUBR ARG2  18640022         STCM  #1,7,##CAR+1(#5)    SET SUBR PTR IN
ACRO CELL    18650022         LA    #1,0(#6,#4)         POINT TO CHARACT
N READTABLE  18660022         OI    0(#1),X'80'         SET CHARACTER TO
CRO C+
   ˇ
                 18690022         LR    #15,#10             RETURN NIL (
E IS THERE?)     18700022         L     #12,36(,#11)        Restore call
s                1ˇ
                   18720022         BR    #14                 Return
                   18730022         SPACE
                   18740022RMERROˇ
cro character - ',  X18750022               8(#11),PREFIX=NO
                     18760022RMERROR2 #ERR  'Argument 2 to RDRMACRO not
ed code SUBR - ',   X18770022               12(#ˇ
                       18780022         SPACE
                       18790022         DROP  #12
                       18800022         SPACE                  ˇ
                         18810022         LTORG
                         18820022         EJECT
                         18830022***************************************
************************** 18840022*
                         * 18850022* RMCHAR TAKES NO ARGUMENTS.
                         * 18860022*
             ˇ
MACRO CHARACTER AS SET BY  * 18880022* THE READ FUNCTION WHEN IT INVOKES
R MACRO.                   * 18890022*
                           *ˇ
 GOOD WOULD IT BE OTHERWISE? * 18910022*
                             * 18920022* THIS FUNCTION IS MEANT TO BE IS
READER MACRO FUNCTIONS.      * 18930022* IFˇ
 UNPREDICTABLE.                * 18940022*
                               * 18950022*******************************
******************************** 18960022*                ˇ
                                 * 18970022*               0(#11) --> ar
                                 * 18980022*               4(#11) --> ar
                                 * 18990022*              18(#11) --> ar
not used                           * 19000022*              12(#11) -->
not used                           * 19010022*              16(#11) -->
not used                           * 19020022*              20(#11) -->
not usedˇ
                                     * 19040022*               #7 alread
ns the input file pointer.           * 19050022*
                                      * 19060022ˇÁ
****************************************************** 19070022
                                                       19080022RMCHAR
                  This is RMCHAR                       19090022 ˇ
#12,36(,#11)        Save caller's regs                   19100022
#14,40(,#11)                                             19110022
#12,#15                                                  19120022

E                                                          19140022
  ZLCRMCHR,C'T'       If reader macro character is T       19150022
  RKNOTT      ˇ
    #15,#8               return T                            19170022
    RKRETURN            else..                               19180022RKN
    0H                       ˇ
LA    #5,1                Length of atom to be built = 1       19200022
LA    #4,ZLCRMCHR         Get current reader macro character   19210022
XR    #7,#7               Indicate print namˇ
  L     #15,ZLCINTN         Get address of ZILINTN               1923002
  LA    #0,44(,#11)         Get current top-of-stack pointer     1924002
  #BASR #14,#15             Call ZILINTN to intern the symbˇ
URN DS    0H                                                       19260
    L     #12,36(,#11)        Restore caller's regs                19270
    L     #14,40(,#11)                                             19280
      BR    #14                 Return                               192
      SPACE                                                          193
      DROP  #12                                                      193
      SPA2 CE                                                          1
        LTORG                                                          1
        END                                                            1

                 00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* ZEROP TAKES ONE ARGUMENT - A NUMERIC ATOM
                   * 00018002*                          ˇ
                     * 00019002*****************************************
********************** 00020002ZEROP    #ZBEG MINARGS=1,MAXARGS=1,NAME='
                       00030002         SPACE 1                        ˇ
                         00040002         L     #2,0(,#1)           LOAD
AND ONLY) ARGUMENT       00050002         CLI   ##TYPE(#2),##FIXNUM TEST
TS                       00060002         BE    PROCESS             OK I
      ˇ
NUM CAN BE HIGHER IN TYPE  00080002*                                  AN
UM CAN NEVER BE ZERO       00090002*                                  SO
 A BIGNUM, RETURN FALˇ
ONUM                         00110002         BNO   ERROR
RS: ERROR                    00120002PROCESS  DS    0H
                             0013000ˇ
                               00140002* THE FOLLOWING TEST WORKS FOR FI
D FLONUMS.                     00150002* It works for double floats only
 ZILMDF duplicates the left    00160002* half of thˇ
 (and so does the compiler).     00170002* If anyone changes that behavi
 code must be changed.           00180002*
                                 00190002         ICM   #1,15,##CDˇ
T FIXNUM OR FLONUM VALUE           00200002         BZ    TRUE
 NONZERO RETURN NIL                00210002FALSE    LR    #15,#10
 NONZERO, RETURN NIL               00220002         BR    #14
 ˇ
IF ZERO, RETURN T                    00240002         BR    #14
                                     00250002         SPACE 1
                ˇ
  NOT A NUMERIC ATOM                   00270002         LR    #3,#15
                                       00280002         USING ZEROP,#3
                               +
                             ˇ
EROP not numeric - ',(#2)                  00310002         SPACE 1
                                           00320002         LTORG
                                           0ÿ 0330002         END
                                             00340002{
»         TITLE 'ZGETFPI - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* THIS FUNCTION RETURNS THE CURRENT CHARACTER POSITION OF THE
18002* SPECIFIED INPUT FILE AS Aˇ
0019002*
0020002*****************************************************************
0030002*                                       ˇ
 00040002* ZGETFPI TAKES ONE (OPTIONAL) ARGUMENT - INPUT FILE SPEC
 00050002*
 00060002*****************************************************ˇ
** 00070002         SPACE
   00080002ZGETFPI  #ZBEG MINARGS=0,MAXARGS=1,NAME='ZGETFPI'
   00090002         #ZPDS 16                  DEFINE STACK SIZE
     00100002         #ZSAV ,                   SAVE REGISTERS
     00110002         SPACE
     00120002         #IFIL 1                   ARG 1 = INPUT FILE SPEC
     0013000ˇ
       00140002         L     #2,ZLFCHAR          GET CURRENT CHARACTER
       00150002         CL    #2,ZLCSFTHI         IF WITHIN SMALL FIXNUM
       00160002         BNHˇ
M TABLE  00170002         LA    #0,16(,#11)         PASS CURRENT STACK L
TO CONS  00180002         #MKAT FIXED               MAKE A FIXED ATOM OU
         00190002         B     RETURN    ˇ
           00200002SMALLFIX DS    0H
           00210002         SLA   #2,3                CONVERT TO INDEX I
UM TABLE   00220002         LA    #15,#SFT(#2)        RETˇ
 TABLE       00230002RETURN   DS    0H
             00240002         SPACE
             00250002         #ZRET ,                   RESTORE REGISTER
RETURN         00260002         SPACE
               00270002         LTORG
               00280002         SPACE
       +
                  00300002{
 BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*****************
********************************************** 00011002*
                                             * 00012002*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013002*
ll rights reserved.                            * 00014002*
                                               * 00015002**************ˇ
************************************************** 00016002*
                                                 * 00017002* ACOS TAKES
MENT, A FLONUM.                                  * 00018002*
      ˇ
**************************************************** 00020002ZIFACOS  #Z
RGS=1,MAXARGS=1,NAME='ZIFACOS'                       00030002         #Z
                DEFINˇ
                  SAVE REGISTERS                       00050002
                                                       00060002
,0(,#11)          LOAD ARGUMENT     ˇ
                                                         00080002* CHECK
 ARG 1                                                   00090002*
                                                   ˇ
  ##TYPE(#6),##SFLOAT                                      00110002
  SFLOAT                                                   00120002
  ##TYPE(#6),##DFLOAT                                      0013000ˇ
    DFLOAT                                                   00140002
I   ##TYPE(#6),##FIXNUM IF FIXED,                            00150002
E   TRYBIG              THEN...                              00160002
Mˇ
LA    #0,X'4E'             PREPARE CHARACTERISTIC              00180002
BNM   FX2FLNN              IF VALUE IS NEGATIVE, THEN...       00190002
LPR   #1,#1     ˇ
  LA    #0,X'CE'             SET SIGN IN CHARACTERISTIC          0021000
  DS    0H                                                       0022000
  SLL   #0,24                GEˇ
    SDR   #F0,#F0              MAKE A NORMALIZED ZERO              00240
    STM   #0,#1,ZLCDBL+0       STORE CHARACTERISTIC AND MANTISSA   00250
    AD    #F0,ZLCDBL           ADD UNNORMALIZEˇ
      B     DOITD               ELSE...                              002
      SPACE 1                                                        002
BIG   DS    0H                  Not float or fixed...        +
        SPACE 1                                            ˇ
2***********************************************************************
2*                                                                     *
2* Bignum arg invalid for ACOS because ◊value◊ must be <= 1, of course *
002*
002*********************************************************************
002         SPACE 1
002      ˇ
70002         SPACE 1
80002SFLOAT   DS    0H                  SINGLE FLOAT
90002         LE    #F0,ˇ
0400002******** B     DOIT
0410002         SPACE 1
0420002DOIT     DS    0H               ˇ
 00430002         SPACE 1
 00440002***************************************************************
 00450002*                                            ˇ
 * 00460002* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE - EASY TO DO FOR
 * 00470002*
 * 00480002**********************************************************ˇ
**** 00490002         SPACE 1
     00500002         LPER  #F2,#F0             GET ABSOLUTE VALUE OF AR
     00510002         CE    #F2,=E'1'           IF GREATER THAN 1
    ˇ
       00530002         SPACE 1
       00540002         STE   #F0,ARGVAL          STORE FLO ARG INTO PAR
REA    00550002*   ˇ
         00560002* AT THIS POINT FP REG 0 CONTAINS THE ARGUMENT
         00570002*
         00580002*                ˇ
           00590002* FORTRAN INTERFACE INITIALIZATION
           00600002*
           00610002         #ZIFL ACOS           ˇ
OS IN #15    00620002         SPACE 1
             00630002         LA    #1,ARGLIST          POINT TO FORTRAN
T            00640002         SPACE 1                           ˇ
               00650002         ST    #9,ZLCISV09         SAVE ZIL REGS
               00660002         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-Z
RUNNING        00670002         L     #13,ZLCFTCBA        GET ADDRESS OF
  SAVE AREA      00680002ˇÁ
                               00690002         #BASR #14,#15
HE FORTRAN SUBROUTINE          00700002*
                               00710002 ˇ
ORE OUR COMMON AREA POINTER      00720002         NI    ZLCIFLGS,255-ZLC
ET NON-ZIL-CODE FLAG             00730002         TM    ZLCIFLGS,ZLCIATT
TTENTION INTERRUPT DETECTED      00740002         BOR  ˇ
EN GO HANDLE IT                    00750002*
                                   00760002* VALUE RETURNED FROM FORTRAN
 FP REG 0                          00770002*                          ˇ
                                     00780002         STE   #F0,ZLCWORK
GET ANSWER FROM FORTRAN ROUTINE      00790002         L     #2,ZLCWORK
GET INTO REG FOR CONSING FLONUM      00800002         LA    #0,16(,#11)
SET Sˇ
  MAKE A FLONUM AND RETURN WITH IT     00820002         SPACE 1
                                       00830002RETURN   #ZRET ,
  RESTORE REGISTERS ˇ
                                         00850002DFLOAT   DS    0H
    DOUBLE FLOAT                         00860002         SPACE 1
                                   ˇ
      LOAD DOUBLE FLOAT VALUE 1            00880002******** B     DOITD
                                           00890002         SPACE 1
                                           0090000ˇ
        Do it to a double float              00910002         SPACE 1
                                             00920002*******************
******************************************** 00930002*           ˇ
                                             * 00940002* ARG CHECK TO PR
END IN FORTRAN CODE - EASY TO DO FOR ACOS    * 00950002*
                                             * 00960002*****************
ˇ
                                                 00980002         LPDR
            GET ABSOLUTE VALUE OF ARG            00990002         CD
'           IF ˇ
              THEN ERROR                           01010002         SPAC
                                                   01020002         STD
GVAL          STORE FLO ARG INˇ
                                                     01040002* FORTRAN I
 INITIALIZATION                                      01050002*
                                             +
COS               ADDRESS OF SUBROUTINE DACˇ
1                                                        01080002
#1,ARGLIST          POINT TO FORTRAN ARG LIST            01090002
1                                                        0ˇ
  #9,ZLCISV09         SAVE ZIL REGS                        01110002
  ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING        01120002
  #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA      01130002*
                                                             01140002
ASR #14,#15             CALL THE FORTRAN SUBROUTINE          01150002*
                                                             01160002
    #13,ˇ
NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE FLAG             01180002
TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED      01190002
BOR   #13              ˇ
                                                                 0121000
 RETURNED FROM FORTRAN CODE IN FP REG 0                          0122000
                                      ˇ
    L     #15,ZLCMDF          GET ADDRESS OF ZILMDF                01240
    LA    #0,16(,#11)         SET STACK LOCATION FOR CONS          01250
    #BASR #14,#15             CALL ZILMDF TO MAKE DOUˇ
      B     RETURN              RETURN WITH IT                       012
      SPACE 1                                                        012
LIST  DS    0A                  ARG LIST FOR FORTRAN SUBROUTINE     ˇ
        DC    A(ARGVAL+X'80000000')                                    0
RGVAL   DS    D                   STORE THE FLONUM ARG HERE            0
        SPACE 1                                                        0
RROˇ
2               0(#11)
2         SPACE 1
2         LTORG   ˇ
002         SPACE 1
002         #ZIF
002         SPACE 1              d
90002         END
00002{
OUTINE'                  00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002*
                           * 00017002* ASIN TAKES ONE ARGUMENT, A FLONUM
                           * 00018002*                          ˇ
                             * 00019002*********************************
****************************** 00020002ZIFASIN  #ZBEG MINARGS=1,MAXARGS=
ZIFASIN'                       00030002         #ZPDS 16

 REGISTERS                       00050002         SPACE
                                 00060002         L     #6,0(,#11)
 ARGUMENT     ˇ
                                   00080002* CHECK TYPE OF ARG 1
                                   00090002*
                             ˇ
                                     00110002         BE    SFLOAT
                                     00120002         CLI   ##TYPE(#6),#
                                     0013000ˇ
                                       00140002         CLI   ##TYPE(#6)
M IF FIXED,                            00150002         BNE   TRYBIG
  THEN...                              00160002         ICMˇ
     GET FIXNUM VALUE                    00170002         LA    #0,X'4E'
     PREPARE CHARACTERISTIC              00180002         BNM   FX2FLNN
     IF VALUE IS NEGATIVE, THEN...       00190002         LPR   #1,#1
       USE ABSOLUTE VALUE                  00200002         LA    #0,X'C
       SET SIGN IN CHARACTERISTIC          00210002FX2FLNN  DS    0H
                                           00220002         SLL   #0,24
       GEˇ
         MAKE A NORMALIZED ZERO              00240002         STM   #0,#
+0       STORE CHARACTERISTIC AND MANTISSA   00250002         AD    #F0,
         ADD UNNORMALIZEˇ
                                               00270002         SPACE 1
                                               00280002TRYBIG   DS    0H
          Not float or fixed...        +
                                     ˇ
************************************************** 00310002*
                                                 * 00320002* Bignum arg
for ASIN because ◊value◊ must be <= 1, of course * 0ˇ
                                                   * 00340002***********
**************************************************** 00350002         SP
                                                     00360002      ˇ
ROR1              All other types: ERROR               00370002
                                                       00380002SFLOAT
                  SINGLE FLOAT                         00390002
0,ˇ
DOIT                                                     00410002
1                                                        00420002DOIT
0H               ˇ
E 1                                                        00440002*****
********************************************************** 00450002*
                                ˇ
 TO PREVENT ABEND IN FORTRAN CODE - EASY TO DO FOR ASIN    * 00470002*
                                                           * 00480002***
***********************************************ˇ
SPACE 1                                                        00500002
LPER  #F2,#F0             GET ABSOLUTE VALUE OF ARG            00510002
CE    #F2,=E'1'           IF GREATER THAN 1                   ˇ
  BH    ERROR1              THEN ERROR                           0053000
  SPACE 1                                                        0054000
  STE   #F0,ARGVAL          STORE FLO ARG INTO PARAMETER AREA    0055000
                                                                   00560
THIS POINT FP REG 0 CONTAINS THE ARGUMENT                          00570
                                                                   00580
            ˇ
ORTRAN INTERFACE INITIALIZATION                                      006
                                                                     006
      #ZIFL ASIN           ˇ
        SPACE 1                                                        0
        LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST            0
        SPACE 1                           ˇ
2         ST    #9,ZLCISV09         SAVE ZIL REGS
2         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
2         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB =  SAVE AREA
002ˇÁ
         00690002         #BASR #14,#15             CALL THE FORTRAN SUB
         00700002*
         00710002 ˇ
INTER      00720002         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-COD
           00730002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTER
ECTED      00740002         BOR  ˇ
             00750002*
             00760002* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
             00770002*                          ˇ
               00780002         STE   #F0,ZLCWORK         GET ANSWER FRO
N ROUTINE      00790002         L     #2,ZLCWORK          GET INTO REG F
NG FLONUM      00800002         LA    #0,16(,#11)         SET Sˇ
OR CONS          00810002         #MKAT FLOAT               MAKE A FLONU
TURN WITH IT     00820002         SPACE 1
                 00830002RETURN   #ZRET ,                   RESTORE REGI
AND RETURN         00840002         SPACE 1
                   00850002DFLOAT   DS    0H                  DOUBLE FLO
                   00860002         SPACE 1
             ˇ
T VALUE 1            00880002******** B     DOITD
                     00890002         SPACE 1
                     0090000ˇ
UBLE FLOAT             00910002         SPACE 1
                       00920002*****************************************
********************** 00930002*           ˇ
                       * 00940002* ARG CHECK TO PREVENT ABEND IN FORTRAN
EASY TO DO FOR ASIN    * 00950002*
                       * 00960002*************************ˇ
************************** 00970002         SPACE 1
                           00980002         LPDR  #F2,#F0             GE
TE VALUE OF ARG            00990002         CD    #F2,=D'1'           IF
ER THAN 1                    01000002         BH    ERROR1
OR                           01010002         SPACE 1
                             01020002         STD   #F0,ARGVAL
O ARG INˇ
                               01040002* FORTRAN INTERFACE INITIALIZATIO
                               01050002*
                       +
ESS OF SUBROUTINE DASˇ
                                   01080002         LA    #1,ARGLIST
INT TO FORTRAN ARG LIST            01090002         SPACE 1
                                   0ˇ
SAVE ZIL REGS                        01110002         OI    ZLCIFLGS,ZLC
INDICATE NON-ZIL CODE RUNNING        01120002         L     #13,ZLCFTCBA
GET ADDRESS OF FTCB = SAVE AREA      01130002*     ˇ
                                       01140002         #BASR #14,#15
  CALL THE FORTRAN SUBROUTINE          01150002*
                                       01160002         L     #13,ˇ
    RESTORE OUR COMMON AREA POINTER      01170002         NI    ZLCIFLGS
ISYS RESET NON-ZIL-CODE FLAG             01180002         TM    ZLCIFLGS
N   IF ATTENTION INTERRUPT DETECTED      01190002         BOR   #13
 ˇ
                                           01210002* VALUE RETURNED FROM
 CODE IN FP REG 0                          01220002*
                ˇ
        GET ADDRESS OF ZILMDF                01240002         LA    #0,1
        SET STACK LOCATION FOR CONS          01250002         #BASR #14,
        CALL ZILMDF TO MAKE DOUˇ
          RETURN WITH IT                       01270002         SPACE 1
                                               01280002ARGLIST  DS    0A
          ARG LIST FOR FORTRAN SUBROUTINE     ˇ
+X'80000000')                                    01300002ARGVAL   DS
            STORE THE FLONUM ARG HERE            01310002         SPACE
                                                 01320002ERROˇ
ent to ASIN not a number between -1 and 1 - ',    X01330002
                                                   01340002         SPAC
                                                   01350002         LTOR
                                                     01360002         SP
                                                     01370002         #Z
                                                     01380002         SP
           d                                           01390002
                                                       01400002{

   00010000*************************************************************
** 00011002*
 * 00012002*ˇ
   * 00013002*                     All rights reserved.
   * 00014002*
   * 00015002**************ˇ
****** 00016002*
     * 00017002* ATAN TAKES TWO ARGUMENTS.
     * 00018002*                          ˇ
       * 00019002*******************************************************
******** 00020002ZIFATAN  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZIFATAN'
         00030002         #ZPDS 20                  DEFINˇ
           00040002         #ZSAV ,                   SAVE REGISTERS
           00050002         SPACE
           00060002         LM    #6,#7,0(#11)        LOAD ARGUMENTS
             00070002*
             00080002* CHECK TYPE OF ARG 1
             00090002*
       ˇ
               00110002         BE    SFLOAT1
               00120002         CLI   ##TYPE(#6),##DFLOAT
               0013000ˇ
                 00140002         CLI   ##TYPE(#6),##FIXNUM IF FIXED,
                 00150002         BNE   TRYBIG1             THEN...
                 00160002         ICMˇ
                   00170002         LA    #0,X'4E'             PREPARE C
ISTIC              00180002         BNM   FX2FLNN1             IF VALUE
IVE, THEN...       00190002         LPR   #1,#1     ˇ
LUE                  00200002         LA    #0,X'CE'             SET SIG
RACTERISTIC          00210002FX2FLNN1 DS    0H
                     00220002         SLL   #0,24                GEˇ
ISTIC INTO POSITION    00230002         SDR   #F0,#F0              MAKE
IZED ZERO              00240002         STM   #0,#1,ZLCDBL+0       STORE
ERISTIC AND MANTISSA   00250002         AD    #F0,ZLCDBL           ADD U
ZEˇ
G IS SINGLE              00270002         BNE   CHKARG2              THE
                         00280002         LRER  #F0,#F0               CO
OM DOUBLE TO SING+
               ˇ
                             00310002TRYBIG1  CLI   ##TYPE(#6),##BIGNUM
                             00320002         BE    ERRORB1
N'T DO IT YET)               0ˇ
RROR                           00340002         SPACE 1
                               00350002SFLOAT1  DS    0H
IS SINGLE                      00360002      ˇ
                                 00370002         LE    #F0,##CDR(,#6)
                                 00380002         B     CHKARG2
                                 00390002         SPACE 1   ˇ
                                   00400002DFLOAT1  DS    0H
                                   00410002         LD    #F0,8(,#6)
                                   00420002         B     CHKARG2
                                     00430002         SPACE 1
                                     00440002CHKARG2  DS    0H
                                     00450002*
          ˇ
                                       00470002*
                                       00480002         CLI   ##TYPE(#7)
T                        ˇ
                                         00500002         CLI   ##TYPE(#
OAT                                      00510002         BE    DFLOAT2
                                        ˇ
IXNUM IF FIXED,                            00530002         BNE   TRYBIG
      THEN...                              00540002         ICM   #1,15,
)      GET FIXNUM VALUE                    00550002    ˇ
         PREPARE CHARACTERISTIC              00560002         BNM   FX2F
         IF VALUE IS NEGATIVE, THEN...       00570002         LPR   #1,#
         USE ABSOLUTE VALUE                  00580002         LA    #0ˇ
           SET SIGN IN CHARACTERISTIC          00590002FX2FLNN2 DS    0H
                                               00600002         SLL   #0
           GET CHARACTERISTIC INTO POSITION    00610002         SDR   #F
     ˇ
CDBL+0       STORE CHARACTERISTIC AND MANTISSA   00630002         AD
BL           ADD UNNORMALIZED FLOAT, NORMALIZING 00640002         CLI
6),##SFLOAT  IF OTHEˇ
               THEN                                00660002         LRER
2              CONVERT FROM DOUBLE TO SINGLE       00670002         B
              ELSE...                               00680002ˇÁ
    SPACE 1                                                        00690
G2  CLI   ##TYPE(#7),##BIGNUM IF BIG,                              00700
    BE    ERRORB2             THEN (CAN'T DO IT YET)               00710
      B     ERROR2              ELSE ERROR                           007
      SPACE 1                                                        007
OAT2  DS    0H                                                       007
      SDR  ˇ
        LE    #F2,##CDR(,#7)                                           0
        CLI   ##TYPE(#6),##DFLOAT IF OTHER ARG IS DOUBLE               0
        BE    DOITD       ˇ
2         B     DOIT                ELSE DO SINGLE
2         SPACE 1
2DFLOAT2  DS    0H                       ˇ
002         LD    #F2,8(,#7)
002         B     DOITD
002         SPACE 1                                     ˇ
40002DOIT     DS    0H
50002         SPACE 1
60002******************************************************************ˇ
0870002*
0880002* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE - HARD TO DO FOR ATA
0890002*
090000ˇ
 00910002         SPACE 1
 00920002         LTER  #F0,#F0             IF ARG 1 IS ZERO
 00930002         BNZˇ
   00940002         LTER  #F2,#F2               ARG 2 IS ZERO
   00950002         BZ    ERROR3                 THEN ERROR
   00960002ARGSOK   DS    0H        ˇ
     00970002         SPACE 1
     00980002         STE   #F0,ARGVAL1         STORE FLO ARG INTO PARAM
A    00990002         STE   #F2,ARGVAL2         STOˇ
REA    01000002*
       01010002* AT THIS POINT FP REG 0 CONTAINS THE ARGUMENT
       01020002*                                                  ˇ
         01030002*
         01040002* FORTRAN INTERFACE INITIALIZATION
         01050002*
 +

             01080002         LA    #1,ARGLIST          POINT TO FORTRAN
T            01090002         SPACE 1
             0ˇ
               01110002         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-Z
RUNNING        01120002         L     #13,ZLCFTCBA        GET ADDRESS OF
SAVE AREA      01130002*     ˇ
                 01140002         #BASR #14,#15             CALL THE FOR
ROUTINE          01150002*
                 01160002         L     #13,ˇ
 AREA POINTER      01170002         NI    ZLCIFLGS,255-ZLCISYS RESET NON
E FLAG             01180002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTI
RUPT DETECTED      01190002         BOR   #13              ˇ
T                    01200002*
                     01210002* VALUE RETURNED FROM FORTRAN CODE IN FP RE
                     01220002*
                       01230002         STE   #F0,ZLCWORK         GET AN
M FORTRAN ROUTINE      01240002         L     #2,ZLCWORK          GET IN
OR CONSING FLONUM      01250002         LA    #0,20(,#11)         SET ST
TION FOR ˇ
M AND RETURN WITH IT     01270002         SPACE 1
                         01280002RETURN   #ZRET ,                   REST
STERS AND RETURN        ˇ
                           01300002DOITD    DS    0H
                           01310002         SPACE 1
                           01320002****ˇ
**************************** 01330002*
                           * 01340002* ARG CHECK TO PREVENT ABEND IN FOR
E - HARD TO DO FOR ATAN    * 01350002*                ˇ
                             * 01360002*********************************
****************************** 01370002         SPACE 1
                               01380002         LTDR  #F0,#F0        ˇ
RG 1 IS ZERO                     01390002         BNZ   ARGSOKD
                                 01400002         LTDR  #F2,#F2
G 2 IS ZERO                      01410002         BZ    ERROR3
HEN ˇ
                                   01430002         SPACE 1
                                   01440002         STD   #F0,ARGVAL1
ORE FLO ARG INTO PA RAMETER AREA    01450002ˇÁ
GVAL2         STORE FLO ARG INTO PARAMETER AREA    01460002*
                                                   01470002* FORTRAN INT
NITIALIZATION                                      01480002*ˇ
                                                     01490002         #Z
N               ADDRESS OF SUBROUTINE DATAN2 IN #15  01500002         SP
                                                     01510002         LA
,ARGLIST          POINT TO FORTRAN ARG LIST            01520002
                                                       01530002
,ZLCISV09         SAVE ZIL REGS                        01540002
CIFLGS,ZLCˇ
#13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA      01560002*
                                                         01570002
#14,#15             CALL ˇ
                                                           01590002
  #13,4(,#13)         RESTORE OUR COMMON AREA POINTER      01600002
  ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODˇ
    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED      01620002
R   #13                 THEN GO HANDLE IT                    01630002*
                                                       ˇ
ETURNED FROM FORTRAN CODE IN FP REG 0                          01650002*
                                                               01660002
L     #15,ZLCMDF          GET ADDRESS OF ZILMDF                0167000ˇ
  LA    #0,20(,#11)         SET STACK LOCATION FOR CONS          0168000
  #BASR #14,#15             CALL ZILMDF TO MAKE DOUBLE FLOAT     0169000
  B     RETURN              RETURN WITH IT                       0170000
  SPAˇ
ST  DS    0A                  ARG LIST FOR FORTRAN SUBROUTINE      01720
    DC    A(ARGVAL1)                                               01730
    DC    A(ARGVAL2+ˇ
VAL1  DS    D                   STORE THE FLONUM ARG HERE            017
VAL2  DS    D                   STORE THE FLONUM ARG HERE            017
      SPACE 1                      ˇ
RROR1   #ERR  'Argument 1 to ATAN not numeric - ',0(#11)               0
RROR2   #ERR  'Argument 2 to ATAN not numeric - ',4(#11)               0
RROR3   #ERR  'Arguments to ATAN cannot both be zeˇ
2ERRORB1  LR    #2,#6
2         B     ERRORB
2ERRORB2  LR    #2,#7                                            +
002*******  B     ERRORB                                       ˇ
40002ERRORB   #ERR  'ZIL4100 ATAN: Conversion of bignum ',
50002               (#2),' to float not supported',PREFIX=NO
60002         SPACE 1
1870002         LTORG
1880002         SPACE 1
1890002         #ZIF
1900002      ë    SPACE 1
 01910002         END
 01920002{
UBROUTINE'                   00010000***********************************
**************************** 00011002*
                           * 00012002*ˇ
ark Draper Laboratory Inc.   * 00013002*                     All rights
.                            * 00014002*
                             * 00015002**************ˇ
******************************** 00016002*
                               * 00017002* COS TAKES ONE ARGUMENT, A FLO
                               * 00018002*                          ˇ
                                 * 00019002*****************************
********************************** 00020002ZIFCOS   #ZBEG MINARGS=1,MAXA
ME='ZIFCOS'                        00030002         #ZPDS 16
FINˇ
SAVE REGISTERS                       00050002         SPACE
                                     00060002         L     #6,0(,#11)
LOAD ARGUMENT     ˇ
                                       00080002* CHECK TYPE OF ARG 1
                                       00090002*
                                 ˇ
OAT                                      00110002         BE    SFLOAT
                                         00120002         CLI   ##TYPE(#
OAT                                      0013000ˇ
                                           00140002         CLI   ##TYPE
IXNUM IF FIXED,                            00150002         BNE   TRYBIG
      THEN...                              00160002         ICMˇ
#6)      GET FIXNUM VALUE                    00170002         LA    #0,X
         PREPARE CHARACTERISTIC              00180002         BNM   FX2F
         IF VALUE IS NEGATIVE, THEN...       00190002         LPR   #1,#
           USE ABSOLUTE VALUE                  00200002         LA    #0
           SET SIGN IN CHARACTERISTIC          00210002FX2FLNN  DS    0H
                                               00220002         SLL   #0
           GEˇ
             MAKE A NORMALIZED ZERO              00240002         STM
CDBL+0       STORE CHARACTERISTIC AND MANTISSA   00250002         AD
BL           ADD UNNORMALIZEˇ
              ELSE...                              00270002         SPAC
                                                   00280002TRYBIG   DS
              Not fixed or float...        +
                                         ˇ
TYPE(#6),##BIGNUM                                      00310002
ROR1                                                   00320002
RORB              Bignums not supported                0ˇ
1                                                        00340002SFLOAT
0H                  SINGLE FLOAT                         00350002
#F0,##CDR(,#6)      LOAD SINGLE FLOAT VALUE 1            00360002******ˇ
  DOIT                                                     00370002
E 1                                                        00380002DOIT
  0H                                                       00390002
E 1   ˇ
************************************************************ 00410002*
                                                           * 00420002* A
 TO PREVENT ABEND IN ˇ
                                                             * 00440002*
************************************************************** 00450002
SPACE 1                             ˇ
  LPER  #F2,#F0             Get absolute value of flonum arg     0047000
  CE    #F2,MAXARGVL        If ◊arg◊ greater than 823549.5625    0048000
  BH    ERROR2              then error             ˇ
    SPACE 1                                                        00500
    STE   #F0,ARGVAL          STORE FLO ARG INTO PARAMETER AREA    00510
                                                                  ˇ
T THIS POINT FP REG 0 CONTAINS THE ARGUMENT                          005
                                                                     005
                                                                     005
Oˇ
                                                                       0
        #ZIFL COS                 ADDRESS OF SUBROUTINE COS IN #15     0
        SPACE 1 ˇ
2         LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST
2         SPACE 1
2         ST    #9,ZLCISV09    ˇ
002         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
002         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA
002*                                          ˇ
50002         #BASR #14,#15             CALL THE FORTRAN SUBROUTINE
60002*
70002         L     #13,4(,#13)         RESTORE OUR COMMON AR EA POINTE
0680002ˇÁ
             00690002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INT
ETECTED      00700002         BOR   #13                 THEN GO HANDLE I
             00710002*ˇ
               00720002* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
               00730002*
               00740002         STE  ˇ
RAN ROUTINE      00750002         L     #2,ZLCWORK          GET INTO REG
SING FLONUM      00760002         LA    #0,16(,#11)         SET STACK LO
OR CONS          00770002         #MKAT FLOAT       ˇ
RETURN WITH IT     00780002         SPACE 1
                   00790002RETURN   #ZRET ,                   RESTORE RE
AND RETURN         00800002         SPACE 1                        ˇ
                     00810002DFLOAT   DS    0H                  DOUBLE F
                     00820002         SPACE 1
                     00830002         LD    #F0,8(,#6)          LOAD DOU
T ˇ
                       00850002         SPACE 1
                       00860002DOITD    DS    0H                  DO IT
UBLE FLOAT       ˇ
                         00880002***************************************
************************ 00890002*
                       * 0090000ˇ
                         * 00910002*
                         * 00920002*************************************
************************** 00930002         SPAˇ
                             00940002         LPDR  #F2,#F0
lute value of flonum arg     00950002         CD    #F2,MAXARGVD
 greater than max dbl val    00960002         BH    ERROR2D   ˇ
rror                           00970002         SPACE 1
                               00980002         STD   #F0,ARGVAL
FLO ARG INTO PARAMETER AREA    00990002*
                                 01000002* AT THIS POINT FP REG 0 CONTAI
RGUMENT                          01010002*
                                 01020002*
            ˇ
                                   01040002*
                                   01050002         #ZIFL DCOS
DRESS OF SUBROUTINE DCOS IN+
                         ˇ
  POINT TO FORTRAN ARG LIST            01080002         SPACE 1
                                       01090002         ST    #9,ZLCISV0
  SAVE ZIL REGS                        0ˇ
    INDICATE NON-ZIL CODE RUNNING        01110002         L     #13,ZLCF
    GET ADDRESS OF FTCB = SAVE AREA      01120002*
                                         01130002      ˇ
      CALL THE FORTRAN SUBROUTINE          01140002*
                                           01150002         L     #13,4(
      RESTORE OUR COMMON AREA POINTER      01160002         NI    ZLCIˇ
-ZLCISYS RESET NON-ZIL-CODE FLAG             01170002         TM    ZLCI
IATTN   IF ATTENTION INTERRUPT DETECTED      01180002         BOR   #13
        THEN GO HANDLE IT                    01190002*
     ˇ
TRAN CODE IN FP REG 0                          01210002*
                                               01220002         L     #1
          GET ADDRESˇ
11)         SET STACK LOCATION FOR CONS          01240002         #BASR
            CALL ZILMDF TO MAKE DOUBLE FLOAT     01250002         B
            RETURN WITH IT         ˇ
                                                   01270002ARGLIST  DS
              ARG LIST FOR FORTRAN SUBROUTINE      01280002         DC
AL+X'80000000')                                   ˇ
                STORE THE FLONUM ARG HERE            01300002         SP
                                                     01310002MAXARG   DS
                Maximum flonum arg value possible    01320002    ˇ
1(##SFLOAT),AL3(0)                                     01330002MAXARGVL
45C90FD9'         (I found this by trial and error)    01340002
                                                       01350002MAXARGD
ˇ
YL1(##DFLOAT),AL3(0)                                     01370002
X'4DC90FDA'                                              01380002MAXARGV
X'4DC90FDAA2216ˇ
E 1                                                        01400002ERROR
  'Argument to COS not numeric - ',0(#11)                  01410002ERROR
  'COS of ',0(#11),' cannot beˇ
     argument is greater than ',MAXARG                       01430002ERR
RR  'COS of ',0(#11),' cannot be computed, absolute value ofX01440002
     argument is greater than ',MAXARGD                       01450002ˇ
ß
60002               0(#11),' to float not supported',PREFIX=NO
70002         SPACE 1
80002 ˇ
1490002         SPACE 1
1500002         #ZIF
1510002         SPACEı  1
 01520002         END
 01530002
ROUTINE'                   00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00017002* EXP TAKES ONE ARGUMENT, A FLONU
                             * 00018002*                          ˇ
                               * 00019002*******************************
******************************** 00020002ZIFEXP   #ZBEG MINARGS=1,MAXARG
='ZIFEXP'                        00030002         #ZPDS 16
Nˇ
VE REGISTERS                       00050002         SPACE
                                   00060002         L     #6,0(,#11)
AD ARGUMENT     ˇ
                                     00080002* CHECK TYPE OF ARG 1
                                     00090002*
                               ˇ
T                                      00110002         BE    SFLOAT
                                       00120002         CLI   ##TYPE(#6)
T                                      0013000ˇ
                                         00140002         CLI   ##TYPE(#
NUM IF FIXED,                            00150002         BNE   TRYBIG
    THEN...                              00160002         ICMˇ
)      GET FIXNUM VALUE                    00170002         LA    #0,X'4
       PREPARE CHARACTERISTIC              00180002         BNM   FX2FLN
       IF VALUE IS NEGATIVE, THEN...       00190002         LPR   #1,#1
         USE ABSOLUTE VALUE                  00200002         LA    #0,X
         SET SIGN IN CHARACTERISTIC          00210002FX2FLNN  DS    0H
                                             00220002         SLL   #0,2
         GEˇ
           MAKE A NORMALIZED ZERO              00240002         STM   #0
BL+0       STORE CHARACTERISTIC AND MANTISSA   00250002         AD    #F
           ADD UNNORMALIZEˇ
            ELSE...                              00270002         SPACE
                                                 00280002TRYBIG   CLI
6),##BIGNUM IF BIG,                      +
               then...                 ˇ
CDAT(#6),X'80'    if a negative bignum               00310002         BZ
EGB                then                              00320002         LA
FLOZERO             assume (EXP value) is 0.0        0ˇ
TURN                 else                              00340002NOTNEGB
ROR2D                 value out of range               00350002
                                                       00360002SFLOATˇ
0H                  SINGLE FLOAT                         00370002
#F0,##CDR(,#6)      LOAD SINGLE FLOAT VALUE 1            00380002*******
DOIT                                                     00390002
1   ˇ
  0H                                                       00410002
E 1                                                        00420002*****
*******************ˇ
                                                           * 00440002* A
 TO PREVENT ABEND IN FORTRAN CODE                          * 00450002*
                                  ˇ
************************************************************** 00470002
SPACE 1                                                        00480002
CE    #F0,MAXARGVL        If arg greater than 174ˇ
  BH    ERROR2              then error                           0050000
  SPACE 1                                                        0051000
  STE   #F0,ARGVAL          STORE FLO ARG INTO PARAMETER AREA   ˇ
                                                                   00530
THIS POINT FP REG 0 CONTAINS THE ARGUMENT                          00540
                                                                   00550

ORTRAN INTERFACE INITIALIZATION                                      005
                                                                     005
      #ZIFL EXˇ
        SPACE 1                                                        0
        LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST            0
        SPACE 1              ˇ
2         ST    #9,ZLCISV09         SAVE ZIL REGS
2         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
2         L     #13,ZLCFTCBA        GET ADDRˇ
002*
002         #BASR #14,#15             CALL THE FORTRAN SUBROUTINE
002*                                                       
80002ˇÁ
INTER      00690002         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-COD
           00700002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTER
ECTED      00710002 ˇ
             00720002*
             00730002* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
             00740002*             ˇ
               00750002         STE   #F0,ZLCWORK         GET ANSWER FRO
N ROUTINE      00760002         L     #2,ZLCWORK          GET INTO REG F
NG FLONUM      00770002         LA    #0,16(,#11) ˇ
OR CONS          00780002         #MKAT FLOAT               MAKE A FLONU
TURN WITH IT     00790002         SPACE 1
                 00800002RETURN   DS    0H                       ˇ
                   00810002         SPACE 1
                   00820002         #ZRET ,                   RESTORE RE
AND RETURN         00830002         SPACE 1
ˇ
                     00850002         SPACE 1
                     00860002         LD    #F0,8(,#6)          LOAD DOU
T VALUE 1      ˇ
                       00880002         SPACE 1
                       00890002DOITD    DS    0H                  DO IT
UBLE FLOAT             0090000ˇ
                         00910002***************************************
************************ 00920002*
                       * 00930002* ARG CHECK ˇ
                         * 00940002*
                         * 00950002*************************************
************************** 00960002         SPACE 1         ˇ
                             00970002         CD    #F0,MAXARGVD
reater than whatever...      00980002         BH    ERROR2D
or                           00990002         SPACE 1
                               01000002         STD   #F0,ARGVAL
FLO ARG INTO PARAMETER AREA    01010002*
                               01020002* AT THIS POINT FP REG 0 CONTAINS
UMENT     ˇ
                                 01040002*
                                 01050002* FORTRAN INTERFACE INITIALIZAT
                         +
                       ˇ
ADDRESS OF SUBROUTINE DEXP IN #15    01080002         SPACE 1
                                     01090002         LA    #1,ARGLIST
POINT TO FORTRAN ARG LIST            0ˇ
                                       01110002         ST    #9,ZLCISV0
  SAVE ZIL REGS                        01120002         OI    ZLCIFLGS,Z
  INDICATE NON-ZIL CODE RUNNING        01130002      ˇ
    GET ADDRESS OF FTCB = SAVE AREA      01140002*
                                         01150002         #BASR #14,#15
    CALL THE FORTRAN SUBROUTINE          01160002*                  ˇ
                                           01170002         L     #13,4(
      RESTORE OUR COMMON AREA POINTER      01180002         NI    ZLCIFL
LCISYS RESET NON-ZIL-CODE FLAG             01190002         TM    ZLCIFL
TTNˇ
        THEN GO HANDLE IT                    01210002*
                                             01220002* VALUE RETURNED FR
AN CODE IN FP REG ˇ
                                               01240002         L     #1
          GET ADDRESS OF ZILMDF                01250002         LA    #0
)         SET STACK LOCATION FOR ˇ
            CALL ZILMDF TO MAKE DOUBLE FLOAT     01270002         B
            RETURN WITH IT                       01280002         SPACE
                                                ˇ
              ARG LIST FOR FORTRAN SUBROUTINE      01300002         DC
AL+X'80000000')                                    01310002ARGVAL   DS
              STORE THE FLONUM ARG HERE            01320002    ˇ
                                                     01330002MAXARG   DS
                MAXIMUM FLONUM ARG VALUE POSSIBLE    01340002         DC
##SFLOAT),AL3(0)                                     01350002MAXARGVL DC
42AEAC4F'         (I found this by trial and error)    01360002MAXARGD
                  MAXIMUM FLONUM ARG VALUE POSSIBLE    01370002
1(##DFLOAT),AL3(0)                                     01380002
42AEAC4F'    ˇ
X'42AEAC4F97F2883B' (I found this by trial and error)    01400002FLOZERO
0A                  0.0D0                                01410002
YL1(##DFLOAT),AL3(0)        ˇ
  3F'0'                                                    01430002
E 1                                                        01440002ERROR
  'Argument to EXP not numeric - ',0(#11)                   01450002ˇÁ

002               er than ',MAXARG
002ERROR2D  #ERR  'EXP of ',0(#11),' cannot be computed, argument is gre
002 ˇ
90002         SPACE 1
00002         LTORG
10002         SPACEˇ
1520002         #ZIF
1530002         SPACE 1
1540002         END               Ñ
 01550002
************************** 00010002*
                         * 00011002* ZIL Version 1.3 (c) 1989 The Charle
Draper Laboratory Inc.   * 00012002*ˇ
                           * 00013002*
                           * 00013102***********************************
**************************** 00013202         TITLEˇ
                               00013302         MACRO
                               00013402&SYM     SETCON &FUN,&FORTFUN=
                               00013502         LCLC  &FUN2,&REALFˇ
                                 00013602&FUN2    SETC  '&FORTFUN'
                                 00013702&REALFUN SETC  '&FUN    '(1,4)
                                 00013802         AIF   ('&FUN2' NE '').
 ˇ
                                   00014002.OK      ANOP
                                   00014102&SYM     L     0,=V(&FUN2)
                ˇ
                                     00016002         MEND
                                     00017002         TITLE 'ZIFINIT - Z
ORTRAN INITIALIZATION ROUTINE' ˇ
                                       00040002*************************
************************************** 00050002*
                                     * 0006000ˇ
LFINT AND BRANCHED TO TO INITIALIZE    * 00070002*  THE FORTRAN INTERFAC
S LINKEDITED WITH THE APPROPRIATE      * 00080002*  FORTRAN INITIALIZATI
E - FOR VS FORTRAN RELEASE 4 AND       * 00090002*  SUBSEQUENˇ
IS VFEIN#.                               * 00100002*
                                         * 00110002*********************
****************************************** 00120002*
                                           * 00130002*  !!!! NOTE !!!!
ULE MUST BE ASSEMBLED/LINKEDITED WITH      * 00140002*  THE FORTRAN LIBR
G. SYS1.FORTLIB - NOT NCAL!!!              * 00150002*
           ˇ
********************************************** 00170002         SPACE 1
                                               00180002ZIFINIT  CSECT
                          ˇ
                                                 00200002         STM
(13)        SAVE REGS                            00210002         LR
                                         +
T,12                                   ˇ
                AT ENTRY #4 ALREADY POINTS TO ZIFSA  00240002         ST
(,4)                                                 00250002         ST
,13)                                                 0ˇ
,4                CHAIN SAVE AREAS TOGETHER            00270002
                                                       00280002
1                 REGISTER 1 POINTS TO ZIL INTERFACE   00290002      ˇ
ZIF,4                CONTROL BLOCK - SET POINTER TO IT   00300002*******
15,FORTVCON                                              00310002*******
14,15                                                    00320002
1   ˇ
ON SQRT                                                    00340002
ON LOG                                                     00350002
ON EXP             ˇ
TCON SIN                                                     00370002
TCON COS                                                     00380002
TCON TAN                          ˇ
SETCON ASIN                                                    00400002
SETCON ACOS                                                    00410002
SETCON ATAN,FORTFUN=ATAN2                        ˇ
  SPACE 1                                                        0043000
  SETCON DSQRT                                                   0044000
  SETCON DLOG                                                   ˇ
    SETCON DEXP                                                    00460
    SETCON DSIN                                                    00470
    SETCON DCOS                                                    00480

      SETCON DASIN                                                   005
      SETCON DACOS                                                   005
      SETCON Dˇ
        SPACE 1                                                        0
        L     13,4(,13)                                                0
        LM    14,12,12(13)   ˇ
2         BR    14
2         SPACE 1
2*ORTVCON DC    V(VFEIN#)           !!! THISˇ
002         SPACE 1
002         LTORG
002         SPACE 1                                        
10002™{
ROL BLOCK  00620002         END
           00630002
IL 1.3 SUBROUTINE'                   00010000***************************
************************************ 00011002*
                                   * 00012002*ˇ
arles Stark Draper Laboratory Inc.   * 00013002*                     All
reserved.                            * 00014002*
                                     * 00015002**************ˇ
**************************************** 00016002*
                                       * 00017002* LOG TAKES ONE ARGUMEN
NUM.                                   * 00018002*
                                         * 00019002*********************
****************************************** 00020002ZIFLOG   #ZBEG MINARG
RGS=1,NAME='ZIFLOG'                        00030002         #ZPDS 16
      DEFINˇ
        SAVE REGISTERS                       00050002         SPACE
                                             00060002         L     #6,0
        LOAD ARGUMENT     ˇ
                                               00080002* CHECK TYPE OF A
                                               00090002*
                                         ˇ
6),##SFLOAT                                      00110002         BE
                                                 00120002         CLI
6),##DFLOAT                                      0013000ˇ
                                                   00140002         CLI
(#6),##FIXNUM IF FIXED,                            00150002         BNE
              THEN...                              00160002         ICMˇ
5,##CDR(#6)      GET FIXNUM VALUE                    00170002         LA
'4E'             PREPARE CHARACTERISTIC              00180002         BN
LNN              IF VALUE IS NEGATIVE, THEN...       00190002         LP
1     ˇ
,X'CE'             SET SIGN IN CHARACTERISTIC          00210002FX2FLNN
                                                       00220002
,24                GEˇ
#F0,#F0              MAKE A NORMALIZED ZERO              00240002
#0,#1,ZLCDBL+0       STORE CHARACTERISTIC AND MANTISSA   00250002
#F0,ZLCDBL           ADD UNNORMALIZEˇ
  DOITD               ELSE...                              00270002
E 1                                                        00280002TRYBI
  ##TYPE(#6),##BIGNUM IF NOT AT LEAST A BIGNUM,    +
E   ERROR1              THEN ERROR               ˇ
TM    ##VECDAT(#6),X'80'  IF A NEGATIVE BIGNUM,                00310002
BO    ERROR1              THEN OBVIOUSLY WE CAN'T HANDLE IT    00320002
B     ERRORB              OTHERWISE, NEED TO HANDLE BIGNA      0ˇ
  SPACE 1                                                        0034000
  DS    0H                  SINGLE FLOAT                         0035000
  LE    #F0,##CDR(,#6)      LOAD SINGLE FLOAT VALUE 1            0036000

    SPACE 1                                                        00380
    DS    0H                                                       00390
    SPACE 1   ˇ
******************************************************************** 004
                                                                   * 004
RG CHECK TO PREVENT ABEND IN ˇ
                                                                     * 0
********************************************************************** 0
        SPACE 1                             ˇ
2         LTER  #F0,#F0             ARG MUST BE POSITIVE
2         BNP   ERROR1              ELSE ERROR
2         SPACE 1                                          ˇ
002         STE   #F0,ARGVAL          STORE FLO ARG INTO PARAMETER AREA
002*
002* AT THIS POINT FP REG 0 CONTAINS THE ARGUMENT
20002*
30002*
40002* FORTRAN INTERFACE INITIALIZATION
50002*   ˇ
0560002         #ZIFL LOG                 ADDRESS OF SUBROUTINE LOG IN #
0570002         SPACE 1
0580002         LA    #1ˇ
 00590002         SPACE 1
 00600002         ST    #9,ZLCISV09         SAVE ZIL REGS
 00610002         OI    ZLCIFLGS,ZLCISYˇ
   00620002         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE
   00630002*
   00640002         #BASR #14,#15             CALL THEˇ
     00650002*
     00660002         L     #13,4(,#13)         RESTORE OUR COMMON AREA
     00670002         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE F L
       00680002ˇÁ
ERRUPT DETECTED      00690002         BOR   #13                 THEN GO
T                    00700002*
                     00710002*ˇ
                       00720002*
                       00730002         STE   #F0,ZLCWORK         GET AN
M FORTRAN ROUTINE      00740002         L    ˇ
 FOR CONSING FLONUM      00750002         LA    #0,16(,#11)         SET
CATION FOR CONS          00760002         #MKAT FLOAT               MAKE
M AND RETURN WITH IT     00770002         SPACE 1           ˇ
                           00780002RETURN   #ZRET ,                   RE
GISTERS AND RETURN         00790002         SPACE 1
                           00800002DFLOAT   DS    0H                  DO
LOAT                         00810002         SPACE 1
                             00820002         LD    #F0,8(,#6)
BLE FLOAT VALUE 1            00830002******** B     DOITD
          ˇ
                               00850002DOITD    DS    0H
FOR A DOUBLE FLOAT             00860002         SPACE 1
                         ˇ
******************************** 00880002*
                               * 00890002* ARG CHECK TO PREVENT ABEND IN
 CODE - EASY TO DO FOR LOG     * 0090000ˇ
                                 * 00910002*****************************
********************************** 00920002         SPACE 1
                                   00930002         LTDˇ
ARG MUST BE POSITIVE                 00940002         BNP   ERROR1
ELSE ERROR                           00950002         SPACE 1
                                     00960002         STD   #F0,ARGVALˇ
  STORE FLO ARG INTO PARAMETER AREA    00970002*
                                       00980002* AT THIS POINT FP REG 0
 THE ARGUMENT                          00990002*
     ˇ
                                         01010002* FORTRAN INTERFACE INI
ION                                      01020002*
                    ˇ
      ADDRESS OF SUBROUTINE DLOG IN #15    01040002         SPACE 1
                                           01050002         LA    #1,ARG
      POINT TO FORTRAN ARG LIST    +
                                 ˇ
9         SAVE ZIL REGS                        01080002         OI    ZL
LCISYS    INDICATE NON-ZIL CODE RUNNING        01090002         L     #1
BA        GET ADDRESS OF FTCB = SAVE AREA      0ˇ
                                                 01110002         #BASR
            CALL THE FORTRAN SUBROUTINE          01120002*
                                                 01130002      ˇ
,#13)         RESTORE OUR COMMON AREA POINTER      01140002         NI
GS,255-ZLCISYS RESET NON-ZIL-CODE FLAG             01150002         TM
GS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED      01160002         BOR
                THEN GO HANDLE IT                    01170002*
                                                     01180002* VALUE RET
OM FORTRAN CODE IN FP REG 0                          01190002*
             ˇ
5,ZLCMDF          GET ADDRESS OF ZILMDF                01210002
,16(,#11)         SET STACK LOCATION FOR CONS          01220002
4,#15             CALL ZILMDˇ
RETURN              RETURN WITH IT                       01240002
1                                                        01250002ARGLIST
0A                  ARG LIST FOR FORTRAN SUˇ
  A(ARGVAL+X'80000000')                                    01270002ARGVA
  D                   STORE THE FLONUM ARG HERE            01280002
E 1                                                       ˇ
RR  'Argument to LOG not a positive number - ',0(#11)        01300002ERR
RR  'ZIL4100 LOG: Conversion of bignum ',                   X01310002
    0(#11),' to float not supported',PREFIX=NO               01320002
SPACE 1                                                        01330002
LTORG                                                          01340002
SPACE 1                                                        01350002
#ZIF    ·                                                        0136000
  SPACE 1                                                        0137000
  END                                                            0138000
ƒ
             00010000***************************************************
************ 00011002*
           * 00012002*ˇ
atory Inc.   * 00013002*                     All rights reserved.
             * 00014002*
             * 00015002**************ˇ
**************** 00016002*
               * 00017002* SIN TAKES ONE ARGUMENT, A FLONUM.
               * 00018002*                          ˇ
                 * 00019002*********************************************
****************** 00020002ZIFSIN   #ZBEG MINARGS=1,MAXARGS=1,NAME='ZIFS
                   00030002         #ZPDS 16                  DEFINˇ
E                    00040002         #ZSAV ,                   SAVE REG
                     00050002         SPACE
                     00060002         L     #6,0(,#11)          LOAD ARG
  ˇ
                       00080002* CHECK TYPE OF ARG 1
                       00090002*
                 ˇ
                         00110002         BE    SFLOAT
                         00120002         CLI   ##TYPE(#6),##DFLOAT
                         0013000ˇ
                           00140002         CLI   ##TYPE(#6),##FIXNUM IF
                           00150002         BNE   TRYBIG              TH
                           00160002         ICMˇ
NUM VALUE                    00170002         LA    #0,X'4E'
 CHARACTERISTIC              00180002         BNM   FX2FLNN
E IS NEGATIVE, THEN...       00190002         LPR   #1,#1     ˇ
BSOLUTE VALUE                  00200002         LA    #0,X'CE'
IGN IN CHARACTERISTIC          00210002FX2FLNN  DS    0H
                               00220002         SLL   #0,24
 CHARACTERISTIC INTO POSITION    00230002         SDR   #F0,#F0
E A NORMALIZED ZERO              00240002         STM   #0,#1,ZLCDBL+0
RE CHARACTERISTIC AND MANTISSA   00250002         AD    #F0,ZLCDBL
 UNNORMALIZEˇ
SE...                              00270002         SPACE 1
                                   00280002TRYBIG   DS    0H
t fixed or float...        +
                         ˇ
M                                      00310002         BNE   ERROR1
                                       00320002         BE    ERRORB
                                       0ˇ
                                         00340002SFLOAT   DS    0H
    SINGLE FLOAT                         00350002         LE    #F0,##CD
    LOAD SINGLE FLOAT VALUE 1            00360002******ˇ
                                           00370002         SPACE 1
                                           00380002DOIT     DS    0H
                                           00390002         SPACE 1   ˇ
                                             00400002*******************
******************************************** 00410002*
                                           * 00420002* ARG CHECK TO PREV
D IN ˇ
                                             * 00440002*****************
********************************************** 00450002         SPACE 1
                    ˇ
            Get absolute value of flonum arg     00470002         CE
RGVL        If ◊arg◊ greater than 823549.5625    00480002         BH
            then error             ˇ
                                                   00500002         STE
GVAL          STORE FLO ARG INTO PARAMETER AREA    00510002*
                                                  ˇ
REG 0 CONTAINS THE ARGUMENT                          00530002*
                                                     00540002*
                                                     00550002* FOˇ
CE INITIALIZATION                                      00560002*
                                                       00570002
N                 ADDRESS OF SUBROUTINE SIN IN #15     00580002
ˇ
#1,ARGLIST          POINT TO FORTRAN ARG LIST            00600002
1                                                        00610002
#9,ZLCISV09    ˇ
  ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING        00630002
  #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA      00640002*
                              ˇ
ASR #14,#15             CALL THE FORTRAN SUBROUTINE          00660002*
                                                             00670002
    #13,4(,#13)         RESTORE OUR COMMON AR EA POINTER      00680002ˇ
©	
90002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTED
00002         BOR   #13                 THEN GO HANDLE IT
10002*ˇ
0720002* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
0730002*
0740002         STE  ˇ
 00750002         L     #2,ZLCWORK          GET INTO REG FOR CONSING FLO
 00760002         LA    #0,16(,#11)         SET STACK LOCATION FOR CONS
 00770002         #MKAT FLOAT       ˇ
   00780002         SPACE 1
   00790002RETURN   #ZRET ,                   RESTORE REGISTERS AND RETU
   00800002         SPACE 1                        ˇ
     00810002DFLOAT   DS    0H                  DOUBLE FLOAT
     00820002         SPACE 1
     00830002         LD    #F0,8(,#6)          LOAD DOUBLE FLOAT ˇ
       00840002******** B     DOITD
       00850002         SPACE 1
       00860002DOITD    DS    0H                  DO IT FOR A DOUBLE FLO
 ˇ
         00880002*******************************************************
******** 00890002*
       * 0090000ˇ
         * 00910002*
         * 00920002*****************************************************
********** 00930002         SPAˇ
             00940002         LPDR  #F2,#F0             Get absolute val
onum arg     00950002         CD    #F2,MAXARGVD        If ◊arg◊ greater
x dbl val    00960002         BH    ERROR2D   ˇ
               00970002         SPACE 1
               00980002         STD   #F0,ARGVAL          STORE FLO ARG
AMETER AREA    00990002*                                     ˇ
                 01000002* AT THIS POINT FP REG 0 CONTAINS THE ARGUMENT
                 01010002*
                 01020002*
                   01030002* FORTRAN INTERFACE INITIALIZATION
                   01040002*
                   01050002         #ZIFL DSIN                ADDRESS OF
INE DSIN IN+
         ˇ
AN ARG LIST            01080002         SPACE 1
                       01090002         ST    #9,ZLCISV09         SAVE Z
                       0ˇ
-ZIL CODE RUNNING        01110002         L     #13,ZLCFTCBA        GET
OF FTCB = SAVE AREA      01120002*
                         01130002      ˇ
ORTRAN SUBROUTINE          01140002*
                           01150002         L     #13,4(,#13)         RE
R COMMON AREA POINTER      01160002         NI    ZLCIˇ
ON-ZIL-CODE FLAG             01170002         TM    ZLCIFLGS,ZLCIATTN
TION INTERRUPT DETECTED      01180002         BOR   #13
HANDLE IT                    01190002*                               ˇ
                               01200002* VALUE RETURNED FROM FORTRAN COD
REG 0                          01210002*
                               01220002         L     #15,ZLCMDF
DRESˇ
STACK LOCATION FOR CONS          01240002         #BASR #14,#15
 ZILMDF TO MAKE DOUBLE FLOAT     01250002         B     RETURN
RN WITH IT         ˇ
                                   01270002ARGLIST  DS    0A
G LIST FOR FORTRAN SUBROUTINE      01280002         DC    A(ARGVAL+X'800
                                  ˇ
STORE THE FLONUM ARG HERE            01300002         SPACE 1
                                     01310002MAXARG   DS    0A
Maximum flonum arg value possible    01320002    ˇ
0)                                     01330002MAXARGVL DC    X'45C90FD9
  (I found this by trial and error)    01340002         SPACE 1
                                       01350002MAXARGD  DS    0Aˇ
    Maximum flonum arg value possible    01360002         DC    YL1(##DF
3(0)                                     01370002         DC    X'4DC90F
                                         01380002MAXARGVD DC    X'4DC90F

                                           01400002ERROR1   #ERR  'Argum
IN not numeric - ',0(#11)                  01410002ERROR2   #ERR  'SIN o
1),' cannot beˇ
 greater than ',MAXARG                       01430002ERROR2D  #ERR  'SIN
#11),' cannot be computed, absolute value ofX01440002                arg
 greater than ',MAXARGD                       01450002ˇÁ
RR  'ZIL4100 SIN: Conversion of bignum ',                   X01460002
    0(#11),' to float not supported',PREFIX=NO               01470002
ACE 1                                                        01480002 ˇ
LTORG                                                          01490002
SPACE 1                                                        01500002
#ZIF                                                           01510002
SPACEı  1                                                        0152000
  END                                                            0153000
©
           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002*
             * 00017002* SQRT TAKES ONE ARGUMENT, A FLONUM.
             * 00018002*                          ˇ
               * 00019002***********************************************
**************** 00020002ZIFSQRT  #ZBEG MINARGS=1,MAXARGS=1,NAME='ZIFSQR
                 00030002         #ZPDS 16                  DEFINˇ
                   00040002         #ZSAV ,                   SAVE REGIS
                   00050002         SPACE
                   00060002         L     #6,0(,#11)          LOAD ARGUM
ˇ
                     00080002* CHECK TYPE OF ARG 1
                     00090002*
               ˇ
                       00110002         BE    SFLOAT
                       00120002         CLI   ##TYPE(#6),##DFLOAT
                       0013000ˇ
                         00140002         CLI   ##TYPE(#6),##FIXNUM IF F
                         00150002         BNE   TRYBIG              THEN
                         00160002         ICMˇ
M VALUE                    00170002         LA    #0,X'4E'             P
HARACTERISTIC              00180002         BNM   FX2FLNN              I
IS NEGATIVE, THEN...       00190002         LPR   #1,#1     ˇ
OLUTE VALUE                  00200002         LA    #0,X'CE'
N IN CHARACTERISTIC          00210002FX2FLNN  DS    0H
                             00220002         SLL   #0,24
HARACTERISTIC INTO POSITION    00230002         SDR   #F0,#F0
A NORMALIZED ZERO              00240002         STM   #0,#1,ZLCDBL+0
 CHARACTERISTIC AND MANTISSA   00250002         AD    #F0,ZLCDBL
NNORMALIZEˇ
...                              00270002         SPACE 1
                                 00280002TRYBIG   CLI   ##TYPE(#6),##BIG
OT AT LEAST A BIGNUM,    +
EN ERROR               ˇ
IF A NEGATIVE BIGNUM,                00310002         BO    ERROR1
THEN OBVIOUSLY WE CAN'T HANDLE IT    00320002         B     ERRORB
OTHERWISE, NEED TO HANDLE BIGNA      0ˇ
                                       00340002SFLOAT   DS    0H
  SINGLE FLOAT                         00350002         LE    #F0,##CDR(
  LOAD SINGLE FLOAT VALUE 1            00360002******ˇ
                                         00370002         SPACE 1
                                         00380002DOIT     DS    0H
    DO IT FOR A SINGLE FLOAT             00390002         SPACE 1   ˇ
                                           00400002*********************
****************************************** 00410002*
                                         * 00420002* ARG CHECK TO PREVEN
IN ˇ
                                           * 00440002*******************
******************************************** 00450002         SPACE 1
                  ˇ
          IF ARG IS NEGATIVE                   00470002         BM    ER
          THEN ERROR                           00480002         SPACE 1
                                 ˇ
AL          STORE FLO ARG INTO PARAMETER AREA    00500002*
                                                 00510002* AT THIS POINT
0 CONTAINS THE ARGUMENT                         ˇ
                                                   00530002*
                                                   00540002* FORTRAN INT
NITIALIZATION                                      00550002*   ˇ
                                                     00560002         #Z
                GET ADDR OF SQRT SUBROUTINE IN #15   00570002         SP
                                                     00580002         LA
,ARGLIST          POINT TO FORTRAN ARG LIST            00590002
                                                       00600002
,ZLCISV09         SAVE ZIL REGS                        00610002
CIFLGS,ZLCISYˇ
#13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA      00630002*
                                                         00640002
#14,#15             CALL THEˇ
                                                           00660002
  #13,4(,#13)         RESTORE OUR COMMON AREA POINTER      00670002
  ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE F LAG             00680002ˇÁ

002         BOR   #13                 THEN GO HANDLE IT
002*
002*ˇ
20002*
30002         STE   #F0,ZLCWORK         GET ANSWER FROM FORTRAN ROUTINE
40002         L    ˇ
0750002         LA    #0,16(,#11)         SET STACK LOCATION FOR CONS
0760002         #MKAT FLOAT               MAKE A FLONUM AND RETURN WITH
0770002         SPACE 1           ˇ
 00780002RETURN   #ZRET ,                   RESTORE REGISTERS AND RETURN
 00790002         SPACE 1
 00800002DFLOAT   DS    0H                  DOUBLˇ
   00810002         SPACE 1
   00820002         LD    #F0,8(,#6)          LOAD DOUBLE FLOAT VALUE 1
   00830002******** B     DOITD                                 ˇ
     00840002         SPACE 1
     00850002DOITD    DS    0H                  DO IT FOR A DOUBLE FLOAT
     00860002         SPACE 1

****** 00880002*
     * 00890002* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE - EASY TO DO
T    * 0090000ˇ
       * 00910002*******************************************************
******** 00920002         SPACE 1
         00930002         LTDˇ
           00940002         BM    ERROR1              THEN ERROR
           00950002         SPACE 1
           00960002         STD   #F0,ARGVALˇ
ETER AREA    00970002*
             00980002* FORTRAN INTERFACE INITIALIZATION
             00990002*                                     ˇ
               01000002         #ZIFL DSQRT               GET ADDR OF DS
OUTINE IN #15  01010002         SPACE 1
               01020002         LA    #1,ARGLIST          POINT TO FORTR
 LIST            01030002         SPACE 1
                 01040002         ST    #9,ZLCISV09         SAVE ZIL REG
                 01050002         OI    ZLCIFLGS,ZLCISYS    INDICATE NON
E RUNNING+
B = SAVˇ
                     01080002         #BASR #14,#15             CALL THE
 SUBROUTINE          01090002*
                     0ˇ
MMON AREA POINTER      01110002         NI    ZLCIFLGS,255-ZLCISYS RESET
-CODE FLAG             01120002         TM    ZLCIFLGS,ZLCIATTN   IF ATT
NTERRUPT DETECTED      01130002      ˇ
LE IT                    01140002*
                         01150002* VALUE RETURNED FROM FORTRAN CODE IN F
                         01160002*                  ˇ
                           01170002         L     #15,ZLCMDF          GE
S OF ZILMDF                01180002         LA    #0,16(,#11)         SE
LOCATION FOR CONS          01190002         #BASR #14,#15          ˇ
MDF TO MAKE DOUBLE FLOAT     01200002         B     RETURN
ITH IT                       01210002         SPACE 1
                             01220002ARGLIST  DS    0A
 Fˇ
                               01240002ARGVAL   DS    D
THE FLONUM ARG HERE            01250002         SPACE 1
                 ˇ
nonnegative number - ',0(#11)    01270002ERRORB   #ERR  'ZIL4100 SQRT: C
n of bignum ',                  X01280002               0(#11),' to floa
pported',PREFIX=NO              ˇ
                                   01300002         LTORG
                                   01310002         SPACE 1
                                   01320002    Ó      #ZIF
                                     01330002         SPACE 1
                                     01340002         END
                                     01350002{
  TITLE 'ZIFTAN - BUILT-IN ZIL 1.3 SUBROUTINE'                   0001000
**************************************************************** 0001100
                                                               * 0001200
 Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013
                 All rights reserved.                            * 00014
                                                                 * 00015
*********ˇ
                                                                   * 000
AN TAKES ONE ARGUMENT, A FLONUM.                                   * 000
                        ˇ
********************************************************************** 0
IFTAN   #ZBEG MINARGS=1,MAXARGS=1,NAME='ZIFTAN'                        0
        #ZPDS 16                  DEFINˇ
2         #ZSAV ,                   SAVE REGISTERS
2         SPACE
2         L     #6,0(,#11)          LOAD ARGUMENT     ˇ
002*
002* CHECK TYPE OF ARG 1
002*                                                                 ˇ
00002         CLI   ##TYPE(#6),##SFLOAT
10002         BE    SFLOAT
20002         CLI   ##TYPE(#6),##DFLOAT
3000ˇ
0140002         CLI   ##TYPE(#6),##FIXNUM IF FIXED,
0150002         BNE   TRYBIG              THEN...
0160002         ICMˇ
 00170002         LA    #0,X'4E'             PREPARE CHARACTERISTIC
 00180002         BNM   FX2FLNN              IF VALUE IS NEGATIVE, THEN.
 00190002         LPR   #1,#1     ˇ
   00200002         LA    #0,X'CE'             SET SIGN IN CHARACTERISTI
   00210002FX2FLNN  DS    0H
   00220002         SLL   #0,24                GEˇ
N    00230002         SDR   #F0,#F0              MAKE A NORMALIZED ZERO
     00240002         STM   #0,#1,ZLCDBL+0       STORE CHARACTERISTIC AN
SA   00250002         AD    #F0,ZLCDBL           ADD UNNORMALIZEˇ
LIZING 00260002         B     DOITD               ELSE...
       00270002         SPACE 1
       00280002TRYBIG   CLI   ##TYPE(#6),##BIGNUM IF BIG,

           00300002         B     ERROR1              ELSE ERROR
           00310002         SPACE 1
           00320002SFLOAT   DS    0H                  SINGLE FLOAT
           0ˇ
1            00340002******** B     DOIT
             00350002         SPACE 1
             00360002DOIT  ˇ
               00370002         SPACE 1
               00380002*************************************************
************** 00390002*                  ˇ
               * 00400002* ARG CHECK TO PREVENT ABEND IN FORTRAN CODE
               * 00410002*
               * 00420002********************************ˇ
****************** 00430002         SPACE 1
                   00440002         LPER  #F2,#F0             Get absolu
 of flonum arg     00450002         CE    #F2,MAXARGVL        If ◊arg◊ g
 than 823549.5625    00460002         BH    ERROR2              then err
                     00470002         SPACE 1
                     00480002         STE   #F0,ARGVAL          STORE FL
TO PARAˇ
                       00500002* AT THIS POINT FP REG 0 CONTAINS THE ARG
                       00510002*
                      ˇ
                         00530002* FORTRAN INTERFACE INITIALIZATION
                         00540002*
                         00550002    ˇ
 SUBROUTINE TAN IN #15     00560002         SPACE 1
                           00570002         LA    #1,ARGLIST          PO
ORTRAN ARG LIST            00580002         SPACE 1 ˇ
                             00590002         ST    #9,ZLCISV09
 REGS                        00600002         OI    ZLCIFLGS,ZLCISYS
 NON-ZIL CODE RUNNING        00610002         L     #13,ZLCFTCBA   ˇ
DRESS OF FTCB = SAVE AREA      00620002*
                               00630002         #BASR #14,#15
HE FORTRAN SUBROUTINE          00640002*
  ˇ
ORE OUR COMMON AREA POINTER      00660002         NI    ZLCIFLGS,255-ZLC
ET NON-ZIL-CODE FLAG             00670002         TM    ZLCIFLGS,ZLCIATT
TTENTION INTERRUP T DETECTED      00680002ˇÁ
            THEN GO HANDLE IT                    00690002*
                                                 00700002* VALUE RETURNE
ORTRAN CODE IN FP REG 0                          00710002*ˇ
                                                   00720002         STE
CWORK         GET ANSWER FROM FORTRAN ROUTINE      00730002         L
WORK          GET INTO REG FOR CONSING FLONUM      00740002         LA
6(,#11)         SET STACK LOCATION FOR CONS          00750002         #M
T               MAKE A FLONUM AND RETURN WITH IT     00760002         SP
                                                     00770002RETURN   #Z
        ˇ
                                                       00790002DFLOAT
                  DOUBLE FLOAT                         00800002
                       ˇ
#F0,8(,#6)          LOAD DOUBLE FLOAT VALUE 1            00820002*******
DOITD                                                    00830002
1                                     ˇ
  0H                  DO IT FOR A DOUBLE FLOAT             00850002
E 1                                                        00860002*****
*****************************************************ˇ
                                                           * 00880002* A
 TO PREVENT ABEND IN FORTRAN CODE                          * 00890002*
                                                           * 0090000ˇ
************************************************************** 00910002
SPACE 1                                                        00920002
LPDR  #F2,#F0             Get absolute value of flonum arg     00930002
CD ˇ
  BH    ERROR2D             then error                           0095000
  SPACE 1                                                        0096000
  STD   #F0,ARGVALˇ
                                                                   00980
THIS POINT FP REG 0 CONTAINS THE ARGUMENT                          00990
                                 ˇ
                                                                     010
ORTRAN INTERFACE INITIALIZATION                                      010
                                                ˇ
        #ZIFL DTAN                ADDRESS OF SUBROUTINE DTAN IN #15    0
        SPACE 1                                                        0
        LA    #1,ARGLIST          POINT TO FORTRAN ARG LIST    +
2         SPACE 1                                            ˇ
002         ST    #9,ZLCISV09         SAVE ZIL REGS
002         OI    ZLCIFLGS,ZLCISYS    INDICATE NON-ZIL CODE RUNNING
002         L     #13,ZLCFTCBA        GET ADDRESS OF FTCB = SAVE AREA
00002*
10002         #BASR #14,#15             CALL THE FORTRAN SUBROUTINE
20002*
30002      ˇ
1140002         NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE FLAG
1150002         TM    ZLCIFLGS,ZLCIATTN   IF ATTENTION INTERRUPT DETECTE
1160002         BOR   #13 ˇ
 01170002*
 01180002* VALUE RETURNED FROM FORTRAN CODE IN FP REG 0
 01190002*                               ˇ
   01200002         L     #15,ZLCMDF          GET ADDRESS OF ZILMDF
   01210002         LA    #0,16(,#11)         SET STACK LOCATION FOR CON
   01220002         #BASR #14,#15             CALL ZILMDˇ
     01230002         B     RETURN              RETURN WITH IT
     01240002         SPACE 1
     01250002ARGLIST  DS    0A                  ARG LIST FOR FORTRAN SUˇ
E      01260002         DC    A(ARGVAL+X'80000000')
       01270002ARGVAL   DS    D                   STORE THE FLONUM ARG H
       01280002         SPACE 1
      ˇ
sible    01300002         DC    YL1(##SFLOAT),AL3(0)
         01310002MAXARGVL DC    X'45C90FD9'         (I found this by tri
rror)    01320002MAXAˇ
ossible    01330002         DC    YL1(##DFLOAT),AL3(0)
           01340002         DC    X'4DC90FDA'
           01350002MAXARGVD DC    X'ˇ
nd error)    01360002         SPACE 1
             01370002ERROR1   #ERR  'Argument to TAN not numeric - ',0(#
             01380002ERROR2   #ERR  'TAN of ',0(#11ˇ
olute value ofX01390002                argument is greater than ',MAXARG
               01400002ERROR2D  #ERR  'TAN of ',0(#11),' cannot be compu
olute value ofX01410002                argument is greater than ',ˇ
                 01420002ERRORB   #ERR  'ZIL4100 TAN: Conversion of bign
                X01430002               0(#11),' to float not supported'
NO               01440002         SPACE 1
                  01450002ˇÁ
                                 01460002         SPACE 1
                                 01470002         #ZIF
                                 01480002 [         SPACE 1
                                   01490002         END
                                   01500002
TLE 'ZILABLD - ZIL 1.3 ATOM CONSTRUCTOR MODULE'              00010000***
************************************************************ 00011002*
                                                           * 00012002*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
             All rights reserved.                            * 00014002*
                                                             * 00015002*
*****ˇ
                                                               * 0001800
MODULE IS INVOKED VIA BALR FROM ASSEMBLER LANGUAGE FUNCTIONS   * 0001900
 DESIRE TO CREATE ATˇ
                                                                 * 00030
Y SYMBOLS, FIXNUMS AND FLONUMS ARE BUILT BY THIS ROUTINE, WHICH  * 00040
USED BY READ (FOR EXAMPLE) WHEN IT ˇ
                                                                   * 000
HIS MODULE USES NO STACK SPACE,  SINCE IT'S NOT RECURSIVE.         * 000
                                                  ˇ
 INPUTS ARE AS FOLLOWS:                                              * 0
                                                                     * 0
 REGISTER 1 CONTAINS THE ADDRESS OF THE AREA CONTAINING THE TEXT ˇ
2*  THE ATOM.                                                          *
2* REGISTER 0 CONTAINS THE LENGTH OF THE AREA ADDRESSED BY REGISTER 1. *
2*                                                                     *
ˇ
002* OR ANY OTHER VALUE (TYPICALLY T) IF THE ATOM IS TO BE INTERNED
002* (I.E. PLACED ON THE OBLIST).
002*           ˇ
80002* REGISTER 3 CONTAINS NIL, IF THE ATOM IS TO BE A SYMBOL,
90002* OR ANY OTHER VALUE (TYPICALLY T) IF THE ATOM IS TO BE FORMATTED
00002* AS NUMERIC WHERE POSSIBˇ
0210002*
0220002* REGISTER 4 CONTAINS THE CURRENT STACK POINTER TO BE PASSED TO C
0230002*                                     ˇ
 00240002* ON RETURN REGISTER 15 CONTAINS THE ADDRESS OF THE RETURNED AT
 00250002*
 00260002***************************************************ˇ
** 00270002         EJECT
   00280002*************************************************************
** 00290002*
   * 00300002* WARNING: DO NOT PASS DATA TO THIS MODULE THAT RESIDES IN
     * 00310002*          VECTOR/STRING SPACE!!!
     * 00320002*
     * 00330002*********************************************************
****** 0ˇ
         00350002         SPACE 1
         00360002ZILABLD  #ZBEG NAME='ZILABLD'
         00370002      ˇ
           00380002         STM   #12,#14,ABLDSAVE    SAVE REGISTERS
           00390002         ST    #7,SAVE7            SAVE FILE POINTER
 IF USED   00400002         LR    #12,ˇ
             00410002         USING ZILABLD,#12         ESTABLISH ADDRES
             00420002         DROP  #15
             00430002         EJECT                  ˇ
               00440002*                                  REG 3 = FORMAT
               00450002         LR    #7,#4               REG 7 = CURREN
POINTER        00460002         LR    #4,#1               REG 4 --> ˇ
TEXT AREA        00470002         LR    #5,#0               REG 5 = LENG
ARACTER AREA     00480002         MVI   BITS,0              CLEAR LOCAL
LAGS             00490002         CR    #2,#10              IF INTERN PA
IS ˇ
                   00510002         CR    #2,#13                INTERN P
 IS "NOT SUPPLIED" 00520002         BE    DONTINT                THEN...
                  ˇ
LAG TRUE             00540002DONTINT  DS    0H
                     00550002*
                     00560002* WEˇ
                       00570002*
                       00580002         LA    #0,4(,#7)           POINT
NT STACK LOC + 4       00590002         #ZPDS (0ˇ
E HAVE ROOM              00600002*
                         00610002* BEGIN PROCESSING
                         00620002*                             ˇ
                           00630002         OI    ZLCGCFLG,ZLCGCBLD   TU
ECIAL CONSING FLAG         00640002         STM   #4,#5,ATOMREGS      SA
DDRESS AND LENGTH          00650002         MVI   SIGN,C'+'           IN
ZE SIGN IF REQUIRED          00660002*
                             00670002* CHECK FORMAT PARAMETER TO SEE IF
TO FORMAT THE ATOM.          00680002*
                              00690002ˇÁ
        IF FORMAT PARM = NIL                 00700002         BE    NOTN
         OR                                  00710002         CR    #3,#
          FORMAT PARM = "NOT SUPPLIED"       00720002 ˇ
             THEN ASSUME ALPHA, DON'T SCAN IT  00730002         SPACE
                                               00740002*
                                               00750002* SCAN THE ATOˇ
RMINE WHAT TYPE IT IS.                           00760002* IF IT TURNS O
 ALPHA, SEARCH THE OBJECT LIST IF INTERN = TRUE. 00770002* IF IT IS NUME
'T INTERN IT - JUST MAKE A NUMERIC ATOM.         00780002*
    ˇ
#4,#5)        GET ADDRESS OF END OF ATOM AREA      00800002         CLI
C'+'          IF ATOM STARTS WITH A PLUS SIGN      00810002         BE
              THEN ˇ
),C'-'          IF ATOM STARTS WITH A MINUS SIGN     00830002         BN
GN              THEN                                 00840002         MV
,C'-'            SET MINUS SIGN   ˇ
                  SINCE WE HAVE A SIGN...              00860002
,1(,#4)           BUMP POINTER PAST SIGN               00870002
,0                DECREMENT LENGTH ACCORDINGLY   ˇ
0H                                                       00890002
#15,#5              IF ZERO LENGTH (SOLITARY + OR -)     00900002
NOTNUM              THEN CANNOT BE NUMERIC               0091000ˇ
  #6,256                                                   00920002SCANL
  0H                                                       00930002
  #15,#6              IF LENGTH IS 256 OR LESS             00940002

    #1,#14              PRIME TRT END-POINTER                00960002
    #2,#4               PRIME SCANNING POINTER               00970002
T   0(256,#2),ˇ
BNZ   AFTTRT              IF WE GOT SOMETHING, GO CHECK IT     00990002
AR    #2,#6               BUMP UP SCANNING POINTER             01000002
SR    #15,#6              BUMˇ
  BNP   AFTTRT              WHEN ZERO, GO CHECK RESULT OF TRT    0102000
  B     SCANLOOP            IF STILL POSITIVE, CONTINUE SCANNING 0103000
  DS    0H                                  ˇ
    BCTR  #15,0               REDUCE LENGTH FOR EXECUTE            01050
    LR    #1,#14              PRIME TRT END-POINTER                01060
    LR    #2,#4               PRIME SCANNING POINTER       +
      EX    #15,TRTNUM          SCAN NUMERIC PORTION OF Aˇ
FTTRT   DS    0H                                                       0
        LR    #2,#1               GET ADDRESS OF FIRST NON-NUMERIC     0
        SR    #2,#4               GET LENGTH OF NUMERIC PORTION        0
2         BP    ISANUM              IF NONE,
2         CLI   0(#1),C'.'           THEN IF IT BEGINS W/DECIMAL POINT
2         BE    DECPT                     THEN IT IS A FRACTIONAL NUMBER
2      ˇ
002ISANUM   DS    0H
002         CR    #1,#14              IF ATOM IS TOTALLY NUMERIC
002         BE    MAKEˇ
80002         CLI   0(#1),C'.'          IF A DECIMAL POINT
90002         BE    DECPT               THEN PROCESS SOME MORE
00002         CLI   0(#1),C'E'       ˇ
1210002         BE    MAKEFLTE            THEN MAKE A FLONUM ATOM
1220002         CLI   0(#1),C'D'          IF D
1230002         BE    MAKEFLTD            THEN MAKE ˇ
 01240002         CLI   0(#1),C'F'          IF S
 01250002         BE    MAKEFLTF            THEN MAKE A FLONUM ATOM
 01260002         CLI   0(#1),C'S'          IF S                   ˇ
   01270002         BE    MAKEFLTS            THEN MAKE A FLONUM ATOM
   01280002         CLI   0(#1),C'e'          IF e
   01290002         BE    MAKEFLTE            THEN MAKE A FLONUM ATOM
  ˇ
     01310002         BE    MAKEFLTD            THEN MAKE A FLONUM ATOM
     01320002         CLI   0(#1),C'f'          IF s
     01330002    ˇ
       01340002         CLI   0(#1),C's'          IF s
       01350002         BE    MAKEFLTS            THEN MAKE A FLONUM ATO
       01360002*****************ˇ
******** 01370002***      CLI   0(#1),C'B'          ELSE CHECK TYPE QUAL
F B      01380002***      BE    MAKEBIN             THEN MAKE A FIXNUM A
ARY)     01390002***      CLI   0(#1),C'Q'     ˇ
           01400002***      BE    MAKEOCT             THEN MAKE A FIXNUM
CTAL)      01410002*****************************************************
********** 01420002         B     NOTNUM              ANYTHINGˇ
, IS ALPHA   01430002         EJECT
             01440002MAKEFIX  DS    0H
             01450002*
               01460002ˇÁ
HE STRING OF DIGITS          01470002* (EXCEPT FOR ANY LEADING SIGN), AN
NTS TO THE FIRST DIGIT       01480002* (AGAIN, PAST ANY LEADING SIGN).
CAN OFF LEADING ZEROES.      01490002*ˇ
                               01500002LZLOOP   CLI   0(#4),C'0'
 CHAR SO FAR IS ZERO           01510002         BNE   FIRSTNZ
.                              01520002         LA   ˇ
P TO NEXT CHAR                   01530002         BCT   #2,LZLOOP
REMENT LENGTH UNTIL OTHER OR...  01540002         LA    #15,#SFT0
S ONLY ZEROES, RETURN FIXNUM 0   01550002         B     RETURN      ˇ
ND RETURN. ELSE...                 01560002FIRSTNZ  DS    0H
T FIRST NONZERO DIGIT              01570002*
                                   01580002* NOW #2 CONTAINS LENGTH OF D
HERˇ
O DIGIT.  NOW CHECK FOR BIGNESS.     01600002*
                                     01610002         CH    #2,=H'10'
MAX NUM LENGTH IS ˇ
  ANY HIGHER, MUST BE BIGNUM           01630002         BL    MFIXLNOK
  LOWER, IS OK                         01640002         CLC   0(10,#4),=
3648'  CHECK AGAINST MAX VALUE   ˇ
    HIGHER, MUST BE BIGNUM               01660002         BL    MFIXLNOK
    LOWER, FIXNUM                        01670002         CLI   SIGN,C'-
    EQUAL, FIXNUM ONLY IF NEGATIVE       0168000ˇ
      IF NEGATIVE, THEN...                 01690002         LA    #15,FI
      POINT TO FIXNUM -2147483648          01700002         B     RETURN
      AND RETURN WITH IT.  ELSE...         01710002MFIXLNOK DS ˇ
        OK - #2 CONTAINS LENGTH OF NUMERICS  01720002         BCTR  #2,0
        REDUCE FOR EXECUTE                   01730002         EX    #2,P
        PACK INTO DOUBLE WORD                01740002         CVB   #2,Z
          GET BINARY VALUE INTO REGISTER       01750002         CLI   SI
          IF A MINUS SIGN WAS SPECIFIED        01760002         BNE   MF
          THEN                                 01770002         LCR   #2
           MAˇ
             AND GO TO DEFINITELY CONS IT UP     01790002MFIXCHK  DS
            ELSE POSITIVE, SEE IF IT'S IN TABLE  01800002         CL
THI         IF FIXNUM IS IN ˇ
NS            THEN                                 01820002         SLA
               CONVERT FIXNUM TO TABLE INDEX       01830002         LA
FT(#2)         GET ADDRESS OF FIXNUM IN TAB+
RN               AND RETURN WITH IT      ˇ
                  ELSE CONS UP THE FIXNUM              01860002
,#7               PASS CURRENT STACK LOCATION TO CONS  01870002
XED               MAKE FIXED ATOM USING #2, RET'G #15  0ˇ
RETURN              RETURN TO CALLER WITH ATOM           01890002*
                                                         01900002* NUMER
 ARE NOT INTERNED ON THE OBJECT LIST.                    01910002*     ˇ
                                                           01920002* ON
 EACH ONE OF THESE LITTLE ROUTINES...                      01930002* #4
ATOM WITHOUT THE SIGN, IF THERE WAS ONE                    01940002* #5
 OF THˇ
E DELIMITING CHARACTER THAT WE SAW                           01960002* #
LENGTH OF THE NUMERIC UP TO THE DELIMITER <- #1 (W/O SIGN)   01970002* #
HE END OF THE ATOM (Jˇ
ENGTH OF THE ATOM (WITHOUT THE SIGN) MINUS 1 FOR EXECUTE       01990002*
                                                               02000002
EJECT                               ˇ
**************************************************************** 0202000
N DS    0H                  SAW A 'B'                            0203000
  SPACE 1                                          ˇ
    STM   #14,#1,SAVEREGS     Save volatile register               02050
    #TPUT 1,ERR2015           Tell user about old-style constant   02060
    LM    #14,#1,SAVEREGS     Restore volatile register           ˇ
      SPACE 1                                                        020
      CH    #2,=H'32'           MAX LENGTH FOR BINARY CONSTANT IS 32 020
      BH    NUM2LONG                                                 021
 ˇ
        LA    #1,1                SET UP MASK TO INSERT BINARY BITS    0
        XR    #15,#15             CLEAR REG TO HOLD RESULT             0
BLOOP   DS    0Hˇ
2*        SLL   #15,1               SHIFT OVER TO MAKE ROOM
2*        CLI   0(#4),C'0'          IF A 0
2*        BE    B0             ˇ
002*        CLI   0(#4),C'1'          IF A 1
002*        BE    B1                  THEN PROCESS BINARY 1
002*        #TPUT 1,ERR2011           INVALID ˇ
00002*        B     NOTNUM              ASSUME SYMBOL
10002*B1      DS    0H
20002*        OR    #15,#1              INSERT A 1-BIT       
2230002ˇÁ
NOTHING)     02240002*        LA    #4,1(,#4)
             02250002*        BCT   #2,BLOOP            UNTIL END OF NUM
             02260002*ˇ
TERED          02270002*        BNE   BNOTMIN             THEN
               02280002*        LCR   #15,#15              MAKE IT NEGAT
               02290002*BNOTMIN DS   ˇ
                 02300002*        LTR   #5,#0               CHECK EXPONE
                 02310002*        BZ    BNOSHIFT            SKIP IF NONE
                 02320002*        BM    BRSHIFT     ˇ
                   02330002*        SLA   #15,0(#5)            SHIFT LEF
PONENT) BITS       02340002*        B     BNOSHIFT            IF NEGATIV
                   02350002*BRSHIFT LPR   #5,#5                MAKEˇ
OSITIVE AND          02360002*        SRA   #15,0(#5)            SHIFT R
(EXPONENT) BITS      02370002*BNOSHIFTDS    0H
                     02380002*        LR    #2,#15              GET NUME
E ˇ
TACK LOCATION TO CONS  02400002*        #MKAT FIXED               MAKE A
OUT OF IT              02410002*        B     RETURN              RETURN
                 ˇ
                         02430002*MAKEOCT DS    0H                  SAW
                         02440002*        SPACE 1
                         0245000ˇ
ile register               02460002*        #TPUT 1,ERR2016           Te
about old-style constant   02470002*        LM    #14,#1,SAVEREGS     Re
latile register            02480002*        SPAˇ
                             02490002*        CH    #2,=H'11'
TH FOR OCTAL CONSTANT IS 11  02500002*        BH    NUM2LONG
                             02510002*        BL    OOK       ˇ
                               02520002*        CLI   0(#4),C'3'
POSITIONS, FIRST MUST BE 0XX   02530002*        BH    NUM2LONG
                               02540002*OOK     DS    0H
                                 02550002*        #BAS  #15,GETEXP
EXPONENT, IF ANY, INTO #0        02560002*        XR    #15,#15
R REG TO HOLD RESULT             02570002*OLOOP   DS    0H
 TO GET BINAˇ
IFT OVER TO MAKE ROOM              02590002*        CLI   0(#4),C'0'
 BETWEEN 0 AND 7                   02600002*        BL    OERR
EN                         +
 PROCESS OCTAL DIGIT     ˇ
  ELSE                                 02630002*OERR    #TPUT 1,ERR2012
   INVALID OCTAL DIGIT                 02640002*        B     NOTNUM
   ASSUME SYMBOL                       0ˇ
                                         02660002*        IC    #1,0(,#4
    PICK UP OCTAL DIGIT                  02670002*        SLL   #1,28
    CLEAR OUT JUNK                       02680002*     ˇ
                                           02690002*        OR    #15,#1
      INSERT OCTAL BITS                    02700002*        LA    #4,1(,
      BUMP CHARACTER POINTER               02710002*        BCT   #2,Oˇ
        UNTIL END OF NUMERICS                02720002*        CLI   SIGN
        IF A MINUS SIGN WAS ENTERED          02730002*        BNE   ONOT
        THEN                                 02740002*        LCR   #15,
     ˇ
                                               02760002*        LTR   #5
          CHECK EXPONENT                       02770002*        BZ    ON
          SKIP IF NOˇ
            IF POSITIVE, THEN                    02790002*        MH
            CONVERT EXPONENT TO SHIFT AMOUNT     02800002*        SLA
)            SHIFT LEFT BY (EXPONENˇ
FT            IF NEGATIVE, THEN                    02820002*ORSHIFT LPR
               MAKE EXPONENT POSITIVE AND          02830002*        MH
3'            CONVERT EXPONENT TO SHIFT AMOUNT    ˇ
0(#5)            SHIFT RIGHT BY (EXPONENT*3) BITS    02850002*ONOSHIFTDS
                                                     02860002*        LR
15              GET NUMERIC VALUE                    02870002*   ˇ
,#7               PASS CURRENT STACK LOCATION TO CONS  02880002*
XED               MAKE A FIXNUM OUT OF IT              02890002*
TURN              RETURN WITH IT                       02900002*********
ˇ
                                                         02920002MAKEFLT
0H                  SAW A 'D'                            02930002MAKEFLT
0H             ˇ
  BITS,DEXP           Indicate building double float       02950002
  MAKEFLT             Go start building it                 02960002
E 1                           ˇ
    0H                  SAW AN 'F'                           02980002MAK
    0H                  SAW AN 'S'                           02990002
    BITS,255-DEXP       Indicate building sin gle float       03000002ˇ
∞
10002         SPACE 1
20002MAKEFLT  DS    0H                  MAKE A SINGLE-PRECISION FLONUM
30002 ˇ
3040002         #BAS  #15,GETEXP          GET EXPONENT, IF ANY, INTO #0
3050002         LD    #F0,=D'0'           INITIALIZE REG TO HOLD RESULT
3060002         XC   ˇ
 03070002         CLI   SIGN,C'-'           DEPENDING ON SIGN OF INPUT..
 03080002         BE    NEGFLOAT
 03090002         MVI   ZLCDBL,X'42'ˇ
   03100002         B     AFTNEGFL
   03110002NEGFLOAT MVI   ZLCDBL,X'C2'        X'C20_0000 00000000'
   03120002AFTNEGFL DS    0H                       ˇ
     03130002FLOOP    DS    0H
     03140002         MVN   ZLCDBL+1(1),0(#4)   MOVE IN NUMERIC PART OF
     03150002         MD    #F0,=D'10'          MULTIPLY WHAT WE Hˇ
Y 10   03160002         AD    #F0,ZLCDBL          ADD FP VERSION OF DIGI
       03170002         LA    #4,1(,#4)           BUMP DIGIT POINTER
       03180002         BCT   #2,FLOOP            CONTINUE UNTIL ALL DIG
 ˇ
         03200002         BZ    FNOEXP              IF ZERO, DO NO MORE
         03210002         BM    FMINEXP             IF NEGATIVE, DIVIDE
 OF 10   0322000ˇ
OWER OF 10 03230002         BCT   #0,FEXPLOOP         BY REPEATEDLY MULT
BY 10      03240002         B     FNOEXP              UNTIL EXPONENT IS
D          03250002FMINEXP  LPRˇ
NT POSITIVE  03260002FMINLOOP DD    #F0,=D'10'          AND REPEATEDLY D
 10          03270002         BCT   #0,FMINLOOP         UNTIL EXPONENT I
TED.         03280002FNOEXP   DS    0H        ˇ
               03290002         B     DPNOEXP             Go build singl
ble float      03300002         EJECT
               03310002DECPT    DS    0H                  SAWˇ
                 03320002         OI    BITS,DEXP           Default is d
oat if no exp.   03330002         LA    #15,1(,#1)          POINT TO CHA
OLLOWING '.'     03340002         CR    #15,#14             IF AT END (I
ST CHAR IS '.')    03350002         BL    MAKEFLO              THEN...
                   03360002         LTR   #2,#2                 IF IT HA
RIC (INTEGER) PART 03370002         BNZ   MAKEFIX                THEN TR
S A FIXNUM +
RIC      ˇ
OINT NOT AT END: FLOAT 03400002         LD    #F0,=D'0'           INITIA
 TO HOLD RESULT        03410002         LTR   #2,#2               IF ZER
 NUMERIC (.NNN...)     0ˇ
 PART IS ZERO            03430002         XC    ZLCDBL(8),ZLCDBL    CLEA
LOAT IN STORAGE          03440002         CLI   SIGN,C'-'           DEPE
 SIGN OF INPUT...        03450002      ˇ
                           03460002         MVI   ZLCDBL,X'42'        X'
 00000000'                 03470002         B     AFTDECFL
                           03480002NEGDECPT MVI   ZLCDˇ
00 00000000'                 03490002AFTDECFL DS    0H
                             03500002DPLOOP   DS    0H
                             03510002         MVN   ZLCDBL+1(1),0(#4)ˇ
N NUMERIC PART OF DIGIT        03520002         MD    #F0,=D'10'
LY WHAT WE HAVE SO FAR BY 10   03530002         AD    #F0,ZLCDBL
 VERSION OF DIGIT              03540002         LA    #4,1(,#4)
IGITˇ
INUE UNTIL ALL DIGITS USED UP    03560002DPNOINT  DS    0H
INTEGER, NOW GET FRACTION PART   03570002         XR    #0,#0
IALIZE EXPONENT TO ˇ
INT TO CHAR FOLLOWING DEC POINT    03590002         LR    #15,#14
INT TO END OF ATOM                 03600002         SR    #15,#4
MPUTE LENGTH OF DATA FOLLOWING "."ˇ
IF NONE, THAT'S IT, WE GOT THE VALUE 03620002         LA    #6,256
                                     03630002FLSCANLP DS    0H
                                     03640002    ˇ
  IF LENGTH IS 256 OR LESS             03650002         BNH   FLDOTRT
  THEN WE CAN SCAN EASILY              03660002         LR    #1,#14
  PRIME TRT END-POINTER                03670002         LR    #2ˇ
    PRIME SCANNING POINTER               03680002         TRT   0(256,#2
    SCAN 256 CHARS FOR E OR OTHER ^NUM   03690002         BNZ   FLAFTTRT
    IF WE GOT SOMETHING, GO CHECK IT     03700002         AR    #2,#6

      BUMP DOWN SCANNING LENGTH            03720002         BNP   FLAFTT
      WHEN ZERO, GO CHECK RESULT OF TRT    03730002         B     FLSCAN
      IF STILLˇ
                                             03750002         BCTR  #15,
        REDUCE LENGTH FOR EXECUTE            03760002         LR    #1,#
        PRIME TRT END-POINTER                 03770002ˇÁ
    #2,#4               PRIME SCANNING POINTER               03780002
    #15,TRTNUM          SCAN NUMERIC PORTION OF ATOM         03790002FLA
    0H                                                       03800002 ˇ
ST    #1,SAVEX            SAVE END-OF-FRACTION POINTER         03810002
BZ    DPFRAC              IF GOT TO THE END, PROCESS FRACTION  03820002
CLI   0(#1),C'E'          IF "E" FOUND                         03830002
BE   ˇ
  CLI   0(#1),C'D'          IF "D" FOUND                         0385000
  BE    PDNUM               THEN THIS IS STILL A NUMBER          0386000
  CLI   0(#1),C'F'  ˇ
    BE    PFNUM               THEN THIS IS STILL A NUMBER          03880
    CLI   0(#1),C'S'          IF "S" FOUND                         03890
    BE    PSNUM               THEN ˇ
      CLI   0(#1),C'e'          IF "e" FOUND                         039
      BE    PENUM               THEN THIS IS STILL A NUMBER          039
      CLI   0(#1),C'd'          IF "d" FOUND      ˇ
        BE    PDNUM               THEN THIS IS STILL A NUMBER          0
        CLI   0(#1),C'f'          IF "f" FOUND                         0
        BE    PFNUM               THEN THIS IS STILL A NUMBER    ˇ
2         CLI   0(#1),C's'          IF "s" FOUND
2         BE    PSNUM               THEN THIS IS STILL A NUMBER
2         B     NOTNUM              ELSE THIS CAN'T BE A NUMBER
ˇ
002PDNUM    DS    0H                  n.nDn
002PENUM    DS    0H                  n.nEn
002         OI ˇ
30002         B     PNUM                Go starting building it
40002         SPACE 1
50002PSNUM    DS    0H        ˇ
4060002PFNUM    DS    0H                  n.nFn
4070002         NI    BITS,255-DEXP       Indicate we're building a sing
4080002******** B     PNUM                Go ˇ
 04090002         SPACE 1
 04100002PNUM     DS    0H
 04110002         #BAS  #15,GETEXP          GET THE EXPONENTˇ
   04120002* #4 STILL POINTS TO THE FRACTIONAL PART OF THE NUMBER.
   04130002DPFRAC   DS    0H                  PROCESS FRACTIONAL PART
   04140002         LD    #F2,=D'0'           INITIALIZE REG TO HOLD RES
     04150002         LD    #F4,=D'1'           INITIALIZE REG TO HOLD P
F 10   04160002         L     #2,SAVEX            GET ADDRESS OF END OF
       04170002         SR    #2,#4               COMPUTE ITS LENGTH.  I
N.EN)  04180002         BZ    DFNOINT             THEN INTEGER PART IS Z
E      0ˇ
         04200002DFLOOP   DS    0H
         04210002         MVN   ZLCDBL+1(1),0(#4)   MOVE IN NUMERIC PART
T        04220002      ˇ
AR BY 10   04230002         MD    #F4,=D'10'          MULTIPLY WHAT WE H
AR BY 10   04240002         AD    #F2,ZLCDBL          ADD FP VERSION OF
           04250002         LA    #4,1ˇ
             04260002         BCT   #2,DFLOOP           CONTINUE UNTIL A
S USED UP    04270002DFNOINT  DS    0H
             04280002         DDR   #F2,#F4          ˇ
) FOR FRACTION 04290002         CLI   SIGN,C'-'           IF NUMBER IS N
IVE            04300002         BE    DFSUB               THEN
               04310002         ADR   #F0,#F2              ADD FRACTˇ
EGER PART        04320002         B     DFAFT               ELSE
                 04330002DFSUB    SDR   #F0,#F2              SUBTRACT FR
ROM INTEGER PART 04340002DFAFT    DS    0H
   ˇ
                   04360002         BZ    DPNOEXP             IF ZERO, D
E                  04370002         BM    DPMINEXP            IF NEGATIV
E BY POWER OF 10  ˇ
TIPLY BY POWER OF 10 04390002         BCT   #0,DPEXLOOP         BY REPEA
LTIPLYING BY 10      04400002         B     DPNOEXP             UNTIL EX
S EXHAUSTED          04410002DPMIˇ
AKE EXPONENT POSITIVE  04420002DPMILOOP DD    #F0,=D'10'          AND RE
 DIVIDE BY 10          04430002         BCT   #0,DPMILOOP         UNTIL
 IS EXHAUSTED.         04440002DPNOEXP  DS    0Hˇ
 or double float         04450002         TM    BITS,DEXP           If t
 double float,           04460002         BO    BUILDDBL            then
uild double float.       04470002         LRER  #F0,#F0        ˇ
 double to single          04480002         STE   #F0,ZLCDBL          ST
L RESULT                   04490002         L     #2,ZLCDBL           LO
GPR                        04500002         LR    #0,#7               PA
RENT STACK LOCATION TO CONS  04510002         #MKAT FLOAT
LOATING POINT ATOM           04520002         B     RETURN
ITH IT                       04530002         SPACE 1
                              04540002ˇÁ
        Build a double float                 04550002         LR    #0,#
        Pass current stack location to CONS  04560002         L     #15,
        Get address of ZILMDF                04570002 ˇ
          Call ZILMDF to cons up a flonum      04580002         B     RE
          Return with the flonum               04590002         EJECT
                                               04600002MUSTBBIG DS   ˇ
            LONG NUMERIC - MUST BE A BIGNUM      04610002         SPACE
                                                 04620002***************
************************************************ 04630002* INTEGER LARGE
AXIMˇ
GTH OF THE DIGITS (SIGN AND LEADING 0'S EXCLUDED)* 04650002* #4 POINTS T
RING OF DIGITS (SIGN AND LEADING ZEROES EXCLUDED)* 04660002* THE FIELD "
NTAINS "+" OR "-", ˇ
LD MAKE A BIGNUM, PUT ITS ADDRESS IN #15, AND      * 04680002* BRANCH TO
".                                                 * 04690002* THROUGHOU
IGNUM CONVERSION CODE THE REGISTERˇ
URPOSES.                                             * 04710002* R0 = CO
ER; MOST SIGNIFICANT WORD OF MACHINE MULTIPLY        * 04720002* R1 = MU
ND; LEAST SIGNIFICANT WORD OF MULTIPLY RESULT    ˇ
 CHARACTER CHUNK SIZE); 1,000,000,000 LARGEST POWER OF * 04740002*
SENTABLE IN 2**31 RADIX                                * 04750002* R3 =
TO THE END OF THE DIGIT CHARACTERS TO BE CONVERTED;    * 0476000ˇ
MOVED BACK BY 9 FOR PROPER BXLE TERMINATION CONDITION.   * 04770002* R4
R TO THE BEGINNING OF THE DIGIT CHARACTER STRING;        * 04780002* R5
ENTED TO ALWAYS POINT TO THE NEXT 9 DIGIT-CHARACTER CHUNK* 04790002* R6

TER TO THE END OF THE BIGNUM (THIS GROWS AS MORE CHUNKS ARE* 04810002*
ERTED, ITS FINAL VALUE IS THE SIZE OF THE BIGNUM)          * 04820002* R
IPLY CARRY REGˇ
QUIRED TO THE BIGNUM AFTER EVERY CONVERSION - SIMPLY PRETEND * 04840002*
'S A CARRY INTO THE FIRST MULTIPLY                           * 04850002*
INTER TO RESULTING BIGNUM    ˇ
**************************************************************** 0487000
  SPACE 1                                                        0488000
  LR    #0,#7               PASS CURRENT STAˇ
    LA    #3,0(#2,#4)         CALCULATE POINTER TO END OF STRING   04900
    S     #3,=F'9'            POINT TO LAST 9-DIGIT CHUNK          04910
    LR    #7,#2               SAVE STRING LENGTH           +
      XR    #6,#6               CLEAR FOR DIVIDE         ˇ
        D     #6,=F'9'            DIVIDE BY CHUNK SIZE                 0
        LR    #5,#4               SAVE POINTER TO BEGINNING OF STRING  0
        SLL   #7,2                # OF 9-DIGITS CHUNKS * 4             0
2         LA    #2,##VECDAT+4(,#7)  ADD CONSTANT FOR REMAINDER ( <9 )
2         L     #15,ZLCBIG          GET ADDRESS OF BIGNUM MAKER
2         #BASR #14,#15             CALL BIGNUM MAKER
2*     ˇ
002         LR    #4,#5               GET POINTER TO BEGINNING OF STRING
002         LTR   #6,#6               IS REMAINDER = 0
002         BZ    GET9ˇ
30002         BCTR  #6,0
40002         EX    #6,EXPACK           PACK #6 AMOUNT OF BYTES
50002         LA    #4,1(#6,#4)      ˇ
5060002*
5070002FIRSTCVB CVB   #1,ZLCDBL           CONVERT INTO ONE BINARY WORD
5080002         ST    #1,##VECDAT(,#15)   STORE INTOˇ
 05090002*
 05100002         LA    #6,4                GENERATE 4 FOR GENERAL USE
 05110002         LR    #7,#6               PRIME THE BIGNUM LENGTHˇ
   05120002NXTCVB   LR    #5,#6               RESET OFFSET IN BIGNUM TO
   05130002         PACK  ZLCDBL(8),0(9,#4)   PACK ANOTHER 9 EBCDIC DIGI
   05140002         CVB   #14,ZLCDBL          CONVERT - WILL BE LESS THA
N ˇ
     05160002BFLOOP   L     #1,##VECDAT-4(#5,#15) LOAD NEXT BIGNUM WORD
     05170002         MR    #0,#2               MULTIPLY BY A BILLION
     05180002    ˇ
OOP    05190002         BC    12,BFLOOPNC         CAN WE SKIP THE CARRY
EXT?   05200002         A     #0,=F'1'            ADD IN CARRY BIT *OPTI
       05210002BFLOOPNC SLDL  #0ˇ
         05220002         SRL   #1,1                RESTORE LOWER WORD
         05230002         ST    #1,##VECDAT-4(#5,#15) RESULT BIGNUM OVER
         05240002         LR    #14,#0         ˇ
           05250002         BXLE  #5,#6,BFLOOP        CONTINUE TO END OF
NUM        05260002*
           05270002         LTR   #0,#0               TEST HIGˇ
NUM RESULT   05280002         BZ    HWORD0              IF 0 THEN SKIP T
A STORE      05290002         ST    #0,##VECDAT-4(#5,#15) STORE NEW HIGH
             05300002         LR    #7,#5               STORE NEW LENGTH
MIT REGISTER   05310002ˇÁ
EMPORARILY AS INC FOR BXLE   05320002         BXLE  #4,#2,NXTCVB
ANOHTER 9-CHARACTER CHUNK?   05330002*
                             05340002 ˇ
GNUM LENGTH FIELD              05350002         LA    #1,##VECDAT(#7,#15
TO END OF BIGNUM               05360002         ST    #1,ZLCVSNXT
POINTER TO AVAILABLE VSS       05370002         CLI  ˇ
 SIGN OF BIGNUM                  05380002         BNE   RETURN
UM IS NOT MINUS                  05390002         OI    ##VECDAT(#15),X'
BIGNUM SIGN TO NEGATIVE          05400002         B     RETURN      ˇ
                                   05410002*
                                   05420002GET9I    PACK  ZLCDBL(8),0(9,
                                   05430002         LA    #4,9(,#4)
MP ˇ
                                     05450002*
                                     05460002EXPACK   PACK  ZLCDBL(8),0(
USED BY EXECUTE FOˇ
------------------------------------   05480002         EJECT
                                       05490002NOTNUM   DS    0H
  ATOM MUST BE ALPHA             ˇ
                                         05510002         LM    #4,#5,AT
    PICK UP TEXT ADDRESS AND LENGTH      05520002         TM    BITS,DOI
    IF INTERN PARM = NIL                 0553000ˇ
      THEN DON'T INTERN ATOM               05540002*
                                           05550002* SEARCH FOR ATOM ON
IST.  IF IT IS THERE, RETURN POINTER TO    05560002* EXISTING Aˇ
NOT THERE, BUILD A NEW ONE AND CONS IT TO    05570002* THE OBJECT LIST.
                                             05580002*
                                             05590002* CHECK IF THE LENG
SUCH THAT THE SYMBOL COULD BE T OR NIL.        05600002*
                                               05610002         CH    #5
          IF LENGTH = 1                        05620002         BNE   OB
           ANˇ
T'           AND TEXT = "T"                      05640002         BNE
              THEN...                            05650002         LR
               POINT TO T   ˇ
                  AND RETURN                       05670002OBNOTT   DS
              ELSE LENGTH NOT 1                    05680002         CH
3'            IF LENGTH = 3                +
ARCH             AND                     ˇ
3,#4),=C'NIL'       TEXT = "NIL"                       05710002
SEARCH               THEN...                           05720002
5,#10                 POINT TO NIL                     0ˇ
RETURN                   AND RETURN                      05740002OBSEARC
0H                  OTHERWISE SEARCH THE OBLIST FOR IT   05750002
#0,0(,#7)           SET STACK POINTER FOR CONSING        05760002      ˇ
  #15,ZLCINTN         GET ADDRESS OF ZILINTN               05770002
  #7,#7               INDICATE THAT WE NEED A NEW CELL     05780002
R #14,#15             CALL ZILINTN TO INTERN SYMBOL        05790002
  RETUˇ
ACE 1                                                        05810002NOI
    0H                  NOT TO BE INTERNED, BUILD SYMBOL     05820002
    #2,##SYMLEN+3(,#5ˇ
LR    #3,#4               GET PNAME TEXT PTR INTO SAFE REG     05840002
N     #2,=X'FFFFFFFC'     ROUND LEN UP TO FULLWORD BOUNDARY    05850002
L     #15,ZLCVSS          GET ADDRESˇ
  XR    #1,#1               SET ENTRY CODE 0 FOR ZILVSS          0587000
  #BASR #14,#15             CALL ZILVSS TO ALLOCATE SPACE        0588000
  LTR   #4,#4               IF NOT ENOUGH SPACE    ˇ
    BZ    NOROOM              THEN ERROR                           05900
                              Else R4 -> where to build the text   05910
                              and R15 -> the string object        ˇ
      LA    #2,##SYMLEN(,#15)   GET ADDRESS OF PNAME STRING          059
      ST    #5,0(,#2)           STORE STRING LENGTH                  059
      MVI   0(#2),##STRING      SET STRING TYPE                      059
 ˇ
        ST    #2,##PNAME(,#15)    STORE PRINT NAME CELL OF SYMBOL      0
 Package cell remains "uninterned"                                     0
        LA    #4ˇ
2*                                  #5 = LENGTH OF PNAME TEXT
2         LR    #0,#3               GET POINTER TO OUR PNAME TEXT
2         LR    #1,#5          ˇ
002         MVCL  #4,#0               MOVE PNAME TEXT INTO THE STRING
002         SPACE
002RETURN   DS    0H                  RETURN Wˇ
50002         NI    ZLCGCFLG,255-ZLCGCBLD TURN OFF SPECIAL CONSING FLAG
60002         L     #7,SAVE7            RESTORE REGISTERS
70002         LM    #12,#14,ABLDSAVE    RESTORE REGISTERS    
6080002ˇÁ
             06090002         EJECT
             06100002NOROOM   DS    0H                  NO V/S SPACE TO
MBOL         06110002 ˇ
vailable, symbX06120002               ol not built.',PREFIX=NO
               06130002         EJECT
               06140002GETEXP   DS   ˇ
                 06150002*
                 06160002* THIS SUBROUTINE EXTRACTS AN EXPONENT FROM A F
NARY OR OCTAL.   06170002* #0 CONTAINS THE EXPONENT ˇ
                   06180002* #1 POINTS TO THE DELIMITING CHARACTER B/O/E
DESTROYED.         06190002* #2 IS DESTROYED BY TRT.
                   06200002* #14 POINTS TO THE END OF THE ATOM AND ˇ
D.                   06210002* #15 IS THE RETURN ADDRESS.
                     06220002* NOTE THAT IF THE EXPONENT IS INVALID, THE
TIRE NUMBER IS       06230002* CONSIDERED NON-NUMERIC AND CONTROL DOES N
N ˇ
                       06250002*
                       06260002         XR    #0,#0               CLEAR
 TO ZERO         ˇ
ONENT IF ANY             06280002         LR    #3,#6               SAVE
 OF EXPONENT             06290002         SR    #14,#6              GET
F EXPONENT IF ANY        0630000ˇ
O EXPONENT                 06310002         CLI   0(#6),C'+'          SE
ONENT HAS A SIGN           06320002         BE    EXPSIGN
                           06330002         CLIˇ
                             06340002         BNE   EXPNOSGN
                             06350002EXPSIGN  LA    #6,1(,#6)
ES, ADJUST REGS FOR IT       06360002         BCTR  #14,0     ˇ
                               06370002EXPNOSGN LTR   #14,#14
NUMERIC PART, THEN             06380002         BNP   NOTNUM
S NOT A NUMBER AT ALL          06390002         CH    #14,=H'256'
UMERIC PART LONGER THAN 256      06400002         BH    NOTNUM
 DEFINITELY NOT A VALID EXPONENT 06410002         BCTR  #14,0
CE LENGTH FOR EXECUTE            06420002         EX    #14,TRTEXP
 EXPONENT FOˇ
 NON-NUMERIC, NOT A NUMBER AT ALL  06440002         CH    #14,=H'3'
 NUMERIC PART LONGER THAN 4 DIGITS 06450002         BH    BADEXP
EN NOT A VALID EXPONENT    +
ELSE PACK EXPONENT INTO Wˇ
  GET EXPONENT INTO REGISTER 0         06480002         CLI   0(#3),C'-'
  IF MINUS                             06490002         BNER  #15
  THEN                                 0ˇ
     SET EXPONENT NEGATIVE               06510002         BR    #15
    RETURN TO CALLER                     06520002         SPACE 1
                                         06530002BADEXPˇ
      TREAT VALUE AS ALPHA                 06540002*******  #TPUT 1,ERR2
      TELL USER EXPONENT IS NO GOOD        06550002*******  B     NOTNUM
      TREAT VALUE AS ALPHA                 06560002         SPACE 1   ˇ
                                             06570002*******************
******************************************** 06580002*NUM2LONGDS    0H
        NUMERIC OUT OF PERMISSIBLE RANGE     06590002*        #TPUT 1,ER
     ˇ
          TREAT VALUE AS ALPHA                 06610002*****************
********************************************** 06620002         EJECT
                    ˇ
NUMTBL      SCAN NUMERIC PORTION OF ATOM         06640002PACKNUM  PACK
),0(0,#4)   PACK ATOM INTO DOUBLE WORD           06650002TRTEXP   TRT
NUMTBL      SCAN NUMERIC PORTION OFˇ
(8),0(0,#6)   PACK ATOM INTO DOUBLE WORD           06670002         SPAC
                                                   06680002ABLDSAVE DS
              SAVE AREA FOR REGISTERS             ˇ
                SAVE                                 06700002SAVEX    DS
                SAVE                                 06710002SAVEREGS DS
                MORE SAVE                            06720002    ˇ
                                                       06730002ATOMREGS
                  THE ADDRESS AND LENGTH OF ATOM TEXT  06740002
                                                       06750002SIGN
ˇ
X                   FLAGS                                06770002DOINTER
X'80'               1 = INTERN THE SYMBOL                06780002DEXP
X'40'          ˇ
E                                                          06800002FIXMN
M -2147483648         MOST NEGATIVE FIXNUM (X'80000000')   06810002
E                             ˇ
    C'ZIL2013 INVALID EXPONENT, ASSUMING SYMBOL.'            06830002***
    C'ZIL2010 NUMERIC TOO LARGE, ASSUMING SYMBOL.'           06840002***
    C'ZIL2011 INVALID BINARY CONSTANT, ASSUMI NG SYMBOL.'     06850002ˇ
±
60002***2015  DC    C'ZIL2015 OLD STYLE LISP BINARY CONSTANT ASSUMED.'
70002***2016  DC    C'ZIL2016 OLD STYLE LISP OCTAL CONSTANT ASSUMED.'
80002 ˇ
6890002NUMTBL   DC    256YL1(1)           TABLE TO SCAN FOR NUMERICS
6900002         ORG   NUMTBL+C'0'
6910002         DC   ˇ
 06920002         ORG   ,                   END OF TABLE
 06930002         SPACE
 06940002         LTORG             l
   06950002         END
   06960002
UBROUTINE'                   00010000***********************************
**************************** 00011002*
                           * 00012002*ˇ
ark Draper Laboratory Inc.   * 00013002*                     All rights
.                            * 00014002*
                             * 00015002**************ˇ
******************************** 00016002*
                               * 00017002* ZILADD TAKES TWO ARGUMENTS. B
 BE NUMERIC ATOMS.             * 00018002*                          ˇ
                                 * 00019002* CONVERSION RULES ARE AS FOL
                                 * 00020002*
                                 * 00030002* 1. BOTH ARGS INTEGER
M Iˇ
ORM REAL ADDITION.                 * 00050002* 3. ONE FIXED, ONE FLOAT
ERT THE FIXED ARGUMENT TO          * 00060002*
T AND PERFORM REALˇ
                                     * 00080002* ANY OTHER TYPES CAUSE A
                                     * 00090002*
                                 ˇ
                                       * 00110002*
                                       * 00120002* ===> Make short path
UM + FIXNUM = FINXUM such that there   * 0013000ˇ
restoring.                               * 00140002*
                                         * 00150002*********************
****************************************** 00160002         SPAˇ
                                             00170002ZILADD   #ZBEG MINA
XARGS=2,NAME='ZILADD'                        00180002         SPACE
                                             00190002         #ZPDS 20
          DEFINE STACK SIZE                    00200002         #ZSAV ,
          SAVE REGISTERS                       00210002         SPACE
                                               00220002         LM    #6
1)        LOAˇ
6),##FIXNUM                                      00240002         BNE
                                                 00250002         CLI
7),##FIXNUM                 ˇ
2                                                  00270002*------------
-------------------------------------------------* 00280002*
  FIXNUM TO FIXNUM ADD                     +
-----------------------------------------ˇ
,##CDR(,#6)       GET FIXED VALUE 1                    00310002
,##CDR(,#7)       ADD THEM                             00320002
ERFIX             OVERFLOW OCCURRED, MUST BE BIGNUM    0ˇ
FIXED               MAKE A FIXNUM                        00340002*******
RETURN              AND RETURN WITH IT                   00350002
1                                                        00360002RETURNˇ
  0H                  RETURN WITH NEW ATOM                 00370002
E 1                                                        00380002
T ,                   RESTORE REGISTERS AND RETURN         00390002*
      ˇ
-----------------------------------------------------------* 00410002*
IXNUM ADD OVERFLOWED - MUST RESULT IN BIGNUM               * 00420002*--
---------------------ˇ
LCR   #3,#2               EXAMINE RESULT, ALSO #3 MAY BE NICE  00440002
BP    FFBIGP              RESULT IS POSITIVE BIGNUM            00450002
BM    FFBIGM              RESULT IS ˇ
  BZ    FFBIGM32            RESULT IS NEG BIGNUM -2**32          0047000
  LA    #15,#TWO31          OVERFLOW, BIGNUM IS 2**31            0048000
  B     RETURN                                     ˇ
                                                                   00500
M32 LA    #15,#MTWO32         POINT TO -2**32                      00510
    B     RETURN                                                  ˇ
                                                                     005
IGP   LR    #3,#2               SAVE IN #3, #2 USED BY ZILBIG        005
      N     #3,=X'7FFFFFFF'     MASK OUT CARRY BIT                   005
Iˇ
        LA    #2,12               LENGTH OF BIGNUM NEEDED FOR RESULT   0
        #BASR #14,#15             MAKE BIGNUMS, NOT WAR                0
        MVC   0(ˇ
2         ST    #3,##VECDAT(,#15)   STORE LS WORD IN RESULT
2         AR    #2,#15              POINT TO END OF RESULT
2         ST    #2,ZLCVSNXT    ˇ
002         B     RETURN
002*
002NFIX1    CLI   ##TYPE(#6),##BIGNUM         ˇ
50002         BNE   NFXBG1              ARG1 NOT FIXED NOR BIG
60002*
70002* ARG 1 IS A BIGNUM                                     
0680002ˇÁ
             00690002         CLI   ##TYPE(#7),##FIXNUM
             00700002         BE    BIGFIX              ARG1 IS BIGNUM,
FIXNUM       00710002 ˇ
               00720002         BE    BIGBIG              ARG1 IS BIGNUM
S BIGNUM       00730002         CLI   ##TYPE(#7),##SFLOAT
               00740002         BE   ˇ
 IS SINGLE-FLOAT 00750002         CLI   ##TYPE(#7),##DFLOAT
                 00760002         BE    BIGDFLO             ARG1 IS BIGN
 IS DOUBLE-FLOAT 00770002         B     ERROR2      ˇ
                   00780002BIGSFLO  DS    0H                  Bignum and
float              00790002         L     #15,ZLCCVBF         Get addres
CVBF               00800002         LR    #5,#6               Arg1 ˇ
arg2 is float        00810002         #BASR #14,#15             Convert
o float              00820002         LER   #F2,#F0             Get floa
for arg1             00830002         B     ADDSFLO1            Go to ad
o ˇ
ble-float              00850002         L     #15,ZLCCVBF         Get ad
 ZILCVBF               00860002         LNR   #5,#6               Arg1 i
, arg2 is float  ˇ
um to float              00880002         LDR   #F2,#F0             Get
lue for arg1             00890002         B     ADDDFLO1            Go t
g1 to float arg2         0090000ˇ
-------------------------* 00910002*                      BIGNUM TO BIGN
                         * 00920002*------------------------------------
-------------------------* 00930002BIGBIG   XR ˇ
R LOADING BIGNUM LENGTH ARG1 00940002         XR    #3,#3
R LOADING BIGNUM LENGTH ARG2 00950002         ICM   #5,7,1(#6)
GTH OF ARG1                  00960002         ICM   #3,7,1(#7)ˇ
ENGTH OF ARG2                  00970002         CR    #5,#3
E LENGTHS                      00980002         BH    BBNEXCH
EXCHANGE POINTERS              00990002         BE    BBEQLN
 LENGTHS - BETTER CHECK SIGNS    01000002         ST    #7,0(,#11)
E #7 IN PLACE OF OLD #6          01010002         ST    #6,4(,#11)
E #6 IN PLACE OF OLD #7          01020002         LR    #6,#5
ANGE LENGTHSˇ
          "                        01040002         LR    #3,#6
          "                        01050002BBNEXCH  L     #15,ZLCBIG
T ADDRESS OF ZILBIG        +
ASSUME ARG1 IS GREATER ORˇ
  SET UP A BIGNUM                      01080002         LM    #6,#7,0(#1
  GC MAY HAVE MOVED POINTERS           01090002         LA    #2,4
  INCREMENT AMOUNT FOR BXLE(WORD SIZE) 0ˇ
6)  GET LS WORD OF ARG1                  01110002         BM    BMB
    BIGNUM1 IS NEGATIVE                  01120002         ICM   #1,15,##
7)  GET LS WORD OF ARG2                  01130002      ˇ
      BIGNUM1 POSITIVE, BIGNUM2 NEGATIVE   01140002BPBP     ALR   #0,#1
      ADD LS WORDS OF BIGNUMS              01150002         SRDL  #0,31
      SHIFT CARRY BIT TO #0, 31 BIT RADIX  01160002         SRL   #1,1ˇ
        RESTORE SHIFTED WORD, HIGH BIT NOW 0 01170002BMBMCONT ST    #1,#
,#15)   STORE LS WORD OF SUM                 01180002         LA    #4,8
        SET OFFSET POINTER FOR LOOP          01190002BPBPL1   AL    #0,0
     ˇ
)         ADD NEXT WORD OF ARG2 TO THIS SUM    01210002         SRDL  #0
          SHIFT RIGHT ALL BUT CARRY BIT        01220002         SRL   #1
          RIGHT JUSTˇ
#15)        STORE INTO RESULT BIGNUM             01240002         BXLE
BPL1        NOT DONE WITH SHORTER BIGNUM         01250002         CR
            COMPARE TWO LENGTHS    ˇ
OP            RAN OUT OF LONGER BIGNUM TOO         01270002         LR
              PUT LENGTH OF LONGER BIGNUM IN LIMIT 01280002BPBPL2   AL
4,#6)         ADD NEXT WORD OF ARG1 TO CARRY      ˇ
1               SHIFT RIGHT ALL BUT CARRY BIT        01300002         SR
                RESTORE SHIFTED WORD, HIGH BIT NOW 0 01310002         ST
(#4,#15)        STORE INTO RESULT BIGNUM             01320002    ˇ
,#2,BPBPL2        NOT DONE WITH SHORTER BIGNUM         01330002BPBPSTOP
,#0               CARRY BIT LEFT OVER?                 01340002
BPXC              YES, THERE IS AN EXTRA CARRY         01350002
ˇ
#4,#15              CHANGE WHEN ##VECDAT CHANGES         01370002
#4,ZLCVSNXT         UPDATE AVAILABILITY POINTER          01380002
RETURN         ˇ
                                                           01400002BPBPX
  #4,7,1(#15)         STORE LENGTH INTO RESULT HEADER      01410002
  #0,0(#4,#15)        STORE CAˇ
    #4,##VECDAT(#4,#15) CALCULATE POINTER TO END             01430002
    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER          01440002
    RETURN                                                    01450002ˇ
±ß
60002BMBM     ALR   #0,#1               ADD LS WRDS OF BIGNUMS,SIGNS CAN
70002         SRDL  #0,31               SHIFT CARRY BIT TO #0, 31 BIT RA
80002 ˇ
1490002         O     #1,=X'80000000'     SET NEGATIVE SIGN ON LS RESULT
1500002         B     BMBMCONT            CAN SHARE THE REST OF CODE WIT
1510002*             ˇ
 01520002BBEQLN   TM    ##VECDAT(#6),X'80'  CHECK SIGN OF BIGNUM 1
 01530002         BO    EBMB                BIGNUM1 IS NEGATIVE
 01540002         TM    ##VECDAT(#7)ˇ
   01550002         BNO   BBNEXCH             BIG 1 IS POS, BIG 2 IS POS
   01560002EBPBM    LA    #3,4                4 FOR BXH INDEX
   01570002         LR    #4,#5               POINTˇ
     01580002         LCR   #2,#3               -4 IS BXH INCREMENT AMOU
     01590002EBPBML   L     #1,##VECDAT-4(#4,#6) GET WORD OF BIG1 FOR CO
     01600002         C     #1,##VECDAT-4(#4,#7) COMPARE WITH WORDˇ
       01610002         BH    B1B2SUB             OK BIG1 MUST BE BIGGER
       01620002         BL    B2B1SUB             OK BIG2 MUST BE BIGGER
       01630002         BXH   #4,#2,EBPBML        THIS WORD SAME, TRY NE
 ˇ
M        01650002         S     #2,##VECDAT(,#7)    DO SUBTRACTION OF LS
         01660002         X     #2,=X'80000000'     toggle out the sign
 big2    0167000ˇ
           01680002         B     RETURN
           01690002*
           01700002EBMB     TM ˇ
             01710002         BO    BBNEXCH             BOTH BIGNUMS ARE
E            01720002         ST    #7,0(,#11)          STORE #7 IN PLAC
 #6          01730002         LR    #14,#6    ˇ
               01740002         LR    #6,#7               EXCHANGE REGS
               01750002         LR    #7,#14              EXCHANGE REGS
               01760002         STM   #6,#7,0(#11)        SAVˇ
                 01770002         B     EBPBM               BIGNUMS SWIT
OCEED            01780002*
                 01790002B1B2SUB  LR    #5,#4               SAVE MAX LEN
 RESULT            01800002         L     #15,ZLCBIG          GET ADDRES
BIG                01810002         LA    #2,##VECDAT(,#5)    CALC MAXIM
H FOR RESULT VECT  01820002         #BASR #14,#15             SET UP A B
           +
D POINTERˇ
ASSUMED FROM ABOVE)    01850002         AR    #3,#3               8 INTO
STARTING OFFSET)       01860002         L     #0,##VECDAT(,#6)
                       0ˇ
                         01880002         X     #0,=X'80000000'     TOGG
 BIT (CAUSED BY NEG)     01890002         SRDA  #0,31               SHIF
ALL BUT BORROW BIT       01900002      ˇ
IFTED WORD, HIGH BIT NOW 0 01910002         ST    #1,##VECDAT(,#15)   ST
 RESULT BIGNUM             01920002B1B2SUBL A     #0,##VECDAT-4(#3,#6) A
RROW FROM PREVIOUS SUBTRCT 01930002         S     #0,#ˇ
                             01940002         SRDA  #0,31
RROW IN REG 0                01950002         SRL   #1,1
INING 31 BITS IN REG 1       01960002         ST    #1,##VECDAT-4(#3,ˇ
E WORD INTO RESULT VECTOR      01970002         BXLE  #3,#4,B1B2SUBL
                               01980002         LTR   #1,#1
OR MS RESULT WORD BEING ZERO   01990002         BZ    B1B2SUBX
NEEDˇ
ULATE NEXT AVAILABLE VSS LOC.    02010002         STCM  #5,7,1(#15)
E LENGTH INTO RESULT HEADER      02020002         CLC   0(12,#15),MTWO31
ARE NUMERIC PART AGˇ
                                   02040002         ST    #3,ZLCVSNXT
DATE VSS AVAILABILITY POINTER      02050002         B     RETURN
                                  ˇ
                                     02070002B1B2SUBX LR    #3,#5
WIPING OUT LEADING ZEROS, DATA LEN.  02080002         LR    #5,#4
GENERATE 4 FOR BXH LIMIT             02090002    ˇ
  GENERATE -4 FOR BXH DECREMENT        02100002         AR    #3,#4
  DECREMENT POINTER                    02110002         CR    #3,#5
  COMPARE AGAINST LS WORD OFFSET       02120002         BE    B1ˇ
    MUST BE FIXNUM RESULT                02130002B1B2SUBM L     #0,##VEC
,#15) ONLY SOME LEADING ZEROS            02140002         LTR   #0,#0
    IS IT ZERO?                          02150002         BNZ   B1B2SUBZ

      GO AND TEST NEXT LESS SIGNIF WORD    02170002B1B2SUBF L     #2,##V
15)   LS WORD OF BIGNUM NEEDS TO BE FIXNUM 02180002         LA    #0,20(
      RESTORE ˇ
        FORGET BIGNUM, IT'S FIXED            02200002         B     RETU
                                             02210002*
                                              02220002ˇÁ
    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS LOC.    02230002
CM  #3,7,1(#15)         STORE BIGNUM LENGTH IN HEADER        02240002
C   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST -2**31  02250002 ˇ
BE    MTWO31                                                   02260002
ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTER          02270002
B     RETURN                                                   02280002*
     ˇ
  ST    #7,0(,#11)          STORE #7 IN PLACE OF OLD #6          0230000
  ST    #6,4(,#11)          STORE #6 IN PLACE OF OLD #7          0231000
  LR    #5,#4       ˇ
    L     #15,ZLCBIG          GET ADDRESS OF ZILBIG                02330
    LA    #2,##VECDAT(,#5)    CALC MAXIMUM LENGTH FOR RESULT VECT  02340
    #BASR #14,#15             SET Uˇ
      LM    #6,#7,0(#11)        GC MAY HAVE MOVED POINTERS           023
      LR    #4,#3               4 INTO REG 4 (ASSUMED FROM ABOVE)    023
      AR    #3,#3               8 INTO REG 3 (STARˇ
        L     #0,##VECDAT(,#6)    LOAD LS WORD FOR FIRST SUBTRACT      0
        S     #0,##VECDAT(,#7)    SUBTRACT LS WORD OF OTHER BIGNUM     0
        X     #0,=X'80000000'     TOGGLE UPPER BIT (CAUSED BY NEGˇ
2         SRDA  #0,31               SHIFT RIGHT ALL BUT BORROW BIT
2         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW 0
2         LR    #14,#1              SAVE LS WORD OF BIGNUM
ˇ
002         S     #0,##VECDAT-4(#3,#7) SUBTRACT SMALLER BIGNUM
002         SRDA  #0,31               LEAVE BORROW IN REG 0
002         SRLˇ
80002         ST    #1,##VECDAT-4(#3,#15) STORE WORD INTO RESULT VECTOR
90002         BXLE  #3,#4,B2B1SUBL      NOT AT HIGHEST DIFFERENT WORD YE
00002         LTR   #1,#1     ˇ
2510002         BZ    B2B1SUBX            OOPS, NEED TO WIPE OUT LEADING
2520002         O     #14,=X'80000000'    PUT NEGATIVE SIGN ON RESULT LS
2530002         ST    #14,##VECDAT(,#15)  STOˇ
 02540002         AR    #3,#15              CALCULATE NEXT AVAILABLE VSS
 02550002         STCM  #5,7,1(#15)         STORE LENGTH INTO RESULT HEA
 02560002         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC ˇ
1  02570002         BE    MTWO31
   02580002         ST    #3,ZLCVSNXT         UPDATE VSS AVAILABILITY PO
   02590002         B     RETURN
     02600002*
       02610002B2B1SUBX LR    #3,#5               WIPING OUT LEADING ZER
 LEN.  02620002         LR    #5,#4               GENERATE 4 FOR BXH LIM
       02630002         LCR   #4,#4               GENERATE -4 FOR BXH DE
       0ˇ
         02650002         CR    #3,#5               COMPARE AGAINST LS W
ET       02660002         BE    B2B1SUBF            MUST BE FIXNUM RESUL
         02670002B2B1SUˇ
           02680002         LTR   #0,#0               IS IT ZERO?
           02690002         BNZ   B2B1SUBZ            FOUND NONZERO WORD
OOP        02700002         BXH   #3,#ˇ
GNIF WORD    02710002B2B1SUBF LCR   #2,#14              GET LS WORD OF R
D COMPLEMENT 02720002         LA    #0,20(,#11)         RESTORE TOP-OF-S
NTER         02730002         #MKAT FIXED            ˇ
XED            02740002         B     RETURN
               02750002*
               02760002B2B1SUBZ LA    #1,##VECDAT(#3,#15) CALCULATE ˇ
ABLE VSS LOC.    02770002         O     #14,=X'80000000'    PUT NEGATIVE
 RESULT LS WORD  02780002         ST    #14,##VECDAT(,#15)  STORE LS WOR
ULT BIGNUM       02790002         STCM  #3,7,1(#15)         STORE BIGNUM
IN ˇ
RT AGAINST -2**31  02810002         BE    MTWO31
                   02820002         ST    #1,ZLCVSNXT         UPDATE AVA
Y POINTER         ˇ
                     02840002*
                     02850002BPBM     N     #1,=X'7FFFFFFF'     mask out
n                    02860002    ˇ
t words                02870002         SRDA  #0,31               leave
tract carry in #0      02880002         SRL   #1,1                right
the ls result word     02890002         LA    #4ˇ
r first iteration        02900002         LR    #14,#1              save
num or end of bignum     02910002BPBML1   A     #0,##VECDAT-4(#4,#6) add
o next word in big1      02920002         S     #0,##VECDAT-4(#ˇ
the word in big2           02930002         SRDA  #0,31               le
 subtract carry in #0      02940002         SRL   #1,1                ri
ify the ls result word     02950002         ST    #1,##VECDAT-4(#4,#15)
the result word              02960002         BXLE  #4,#2,BPBML1
 words in big2?              02970002         LR    #3,#5
INTO LIMIT REGISTER          02980002BPBML2   A     #0,##VECDAT-4(#4,#6)
ry to next wo rd in big1      02990002ˇÁ
        no big2 left, keep carry in #0       03000002         SRL   #1,1
        right justify difference in #1       03010002         ST    #1,#
4(#4,#15) store the result word              03020002 ˇ
L2        any more words in big1?              03030002         LR    #5
          GENERATE 4 FOR BXH LIMIT             03040002         LCR   #4
          GENERATE -4 FOR BXH DECREMENT        03050002BPBMSUBM L    ˇ
DAT-4(#3,#15) ONLY SOME LEADING ZEROS            03060002         LTR
            IS IT ZERO?                          03070002         BNZ
            FOUND NONZERO WORD, STOP LOOP        03080002         BXH
BMSUˇ
              LS WORD OF BIGNUM NEEDS TO BE FIXNUM 03100002         LA
,#11)         RESTORE TOP-OF-STACK POINTER         03110002         #MKA
              FORGEˇ
RN                                                   03130002*
                                                     03140002BPBMSUBZ LA
#VECDAT(#3,#15) CALCULATE NEXT AVAˇ
,7,1(#15)         STORE BIGNUM LENGTH IN HEADER        03160002
4,##VECDAT(,#15)  STORE LS WORD with no (pos) sign     03170002
,ZLCVSNXT         UPDATE AVAILABILITY POINTER    ˇ
RETURN                                                   03190002*
                                                         03200002BMB
#1,15,##VECDAT(#7)  GET LS WORD OF ARG2                  0321000ˇ
  BMBM                BOTH BIGNUMS NEGATIVE, DIFF LENGTHS  03220002BMBP
  #0,=X'7FFFFFFF'     mask out the sign                    03230002
  #0,#1               subtract lowest words                03240002

L   #1,1                right justify the ls result word     03260002
    #4,##VECDAT+4       set index for first iteration        03270002
    #14,#1    ˇ
A     #0,##VECDAT-4(#4,#6) add carry to next word in big1      03290002
S     #0,##VECDAT-4(#4,#7) subtract the word in big2           03300002
SRDA  #0,31               leaˇ
  SRL   #1,1                right justify the ls result word     0332000
  ST    #1,##VECDAT-4(#4,#15) store the result word              0333000
  BXLE  #4,#2,BMBPL1        any more words iˇ
    LR    #3,#5               LENGTH1 INTO LIMIT REGISTER          03350
2   A     #0,##VECDAT-4(#4,#6) add carry to next word in big1      03360
    SRDA  #0,31               no big2 left, keep carry in #+
      SRL   #1,1                right justify difference ˇ
        ST    #1,##VECDAT-4(#4,#15) store the result word              0
        BXLE  #4,#2,BMBPL2        any more words in big1?              0
        LR    #5,#2               GENERATE 4 FOR BXH LIMIT             0
2         LCR   #4,#2               GENERATE -4 FOR BXH DECREMENT
2BMBPSUBM L     #0,##VECDAT-4(#3,#15) ONLY SOME LEADING ZEROS
2         LTR   #0,#0               IS IT ZERO?
2      ˇ
002         BXH   #3,#4,BMBPSUBM      GO AND TEST NEXT LESS SIGNIF WORD
002         LCR   #2,#14              LS WORD OF BIGNUM NEEDS TO BE FIXN
002         LA    #0,2ˇ
80002         #MKAT FIXED               FORGET BIGNUM, IT'S FIXED
90002         B     RETURN
00002*                               ˇ
3510002BMBPSUBZ LA    #1,##VECDAT(#3,#15) CALCULATE NEXT AVAILABLE VSS L
3520002         O     #14,=X'80000000'    INSERT NEGATIVE SIGN
3530002         STCM  #3,7,1(#15)         STORE BIGNˇ
 03540002         ST    #14,##VECDAT(,#15)  STORE LS WORD WITH NEGATIVE
 03550002         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC PART AGAINST
 03560002         BE    MTWO31                                     ˇ
   03570002         ST    #1,ZLCVSNXT         UPDATE AVAILABILITY POINTE
   03580002         B     RETURN
   03590002*
  ˇ
     03610002         B     RETURN
     03620002*
     03630002FX1Nˇ
       03640002         BNE   FX1NBF2             ARG1 IS FIXED, ARG2 NO
R FIX  03650002*--------------------------------------------------------
-----* 03660002*                ˇ
       * 03670002*------------------------------------------------------
-------* 03680002FIXBIG   ST    #7,0(,#11)          EXCHANGE POINTERS IN
#7       03690002         ST    #6,4(,#11)     ˇ
           03700002BIGFIX   L     #6,0(,#11)          GET POINTER TO ARG
E SWITCHED 03710002         XR    #3,#3               CLEAR FOR ICM OF L
           03720002         ICM   #3,7,1(#6)          GET BIGNˇ
             03730002         L     #15,ZLCBIG          GET ADDRESS OF Z
             03740002         LA    #2,##VECDAT+4(,#3)  GET SIZE TO PASS
IG           03750002         #BASR #14,#15             CALL ZILBIG
               03760002ˇÁ
AVE MOVED POINTERS           03770002         ICM   #0,15,##VECDAT(#6)
ORD OF BIGNUM                03780002         BM    BIGMFIX
 BIGNUM + FIXNUM             03790002 ˇ
OSITIVE OVERFLOW IS POSSIBLE   03800002         BM    BPFMINUS
ULT IS NEG - FIX UP            03810002         SRDL  #0,31
TO #1 ALL BUT CARRY BIT        03820002         SRL  ˇ
ALIZE SUM IN #1                  03830002         ST    #1,##VECDAT(,#15
E FIRST SUM RESULT               03840002         LA    #2,4
. WORD SIZE FOR BXLE             03850002         LA    #4,8        ˇ
ITIALIZE OFFSET FOR BXLE           03860002BFLOOP   AL    #0,0(#4,#6)
D NEXT WORD TO PREVIOUS CARRY      03870002         SRDL  #0,31
IFT RIGHT ALL BUT CARRY BIT        03880002         SRL   #1,1
STOˇ
STORE INTO RESULT BIGNUM             03900002         BXLE  #4,#2,BFLOOP
NOT DONE WITH SHORTER BIGNUM         03910002         LTR   #0,#0
CARRY BIT LEFT OVEˇ
  YES, THERE IS AN EXTRA CARRY         03930002         STCM  #3,7,1(#15
  STORE LENGTH INTO RESULT HEADER      03940002         AR    #4,#15
  CHANGE WHEN ##VECDAT CHANGES   ˇ
    UPDATE AVAILABILITY POINTER          03960002         B     RETURN
                                         03970002*
                                         0398000ˇ
      STORE LENGTH INTO RESULT HEADER      03990002         ST    #0,0(#
      STORE CARRY (WHICH MUST BE 1)        04000002         LA    #4,##V
,#15) CALCULATE POINTER TO END             04010002         ST ˇ
        UPDATE AVAILABILITY POINTER          04020002         B     RETU
                                             04030002*
                                             04040002BPFMINUS SRDA  #0,3
          SHIFT TO #1 ALL BUT BORROW BIT       04050002         SRL   #1
          NORMALIZE SUM IN #1                  04060002         ST    #1
T(,#15)   STORE FIRST SUM RESULT               04070002         LA    #2
          INIˇ
            INITIALIZE OFFSET FOR BXLE           04090002BPFMLOOP AL
#6)         ADD NEXT WORD TO PREVIOUS BORROW     04100002         SRDA
            SHIFT RIGHT ALL ˇ
              RESTORE SHIFTED WORD, HIGH BIT NOW 0 04120002         ST
4,#15)        STORE INTO RESULT BIGNUM             04130002         BXLE
BPFMLOOP      NOT DONE WITH BIGNUM         +
0               BORROW BIT LEFT OVER?    ˇ
FMIN0             HIGH WORD ZERO - MUST BACKTRACK      04160002
G1                HIGH WORD SHOULD NEVER BE NEGATIVE   04170002
,7,1(#15)         STORE LENGTH AND RESULT INTO HEADER  0ˇ
#4,#15              POINT TO END OF RESULT               04190002
#4,ZLCVSNXT         UPDATE AVAILABILITY POINTER          04200002
RETURN                                                   04210002*     ˇ
                                                           04220002BPFMI
  #0,#2               -4 INCREMENT FOR BXH                 04230002
  #1,#2               4 LIMIT FOR BXH                      04240002BPFMI
  #2,#ˇ
R   #2,#2               TEST WORD                            04260002
Z   BPFMIN1             STOP - FOUND NONZERO WORD            04270002
H   #3,#0,BPFMIN0L   ˇ
L     #2,##VECDAT(,#15)   LOAD LS WORD - THIS IS THE FIXNUM    04290002
#MKAT FIXED               MAKE A FIXNUM                        04300002
B     RETURN                        ˇ
                                                                 0432000
  STCM  #3,7,1(#15)         STORE LENGTH INTO RESULT HEADER      0433000
  AR    #4,#15              POINT TO END, (CHANGE Wˇ
    ST    #4,ZLCVSNXT         UPDATE AVAILABILITY POINTER          04350
    B     RETURN                                                   04360
                                                                  ˇ
MFIX  N     #0,=X'7FFFFFFF'     MASK OUT MINUS BIT OF BIGNUM LSWRD   043
      S     #0,##CDR(,#7)       ONLY POSITIVE OVERFLOW IS POSSIBLE   043
      BM    BMFMINUS            LS RESULT IS NEG - FIX UP            044
 ˇ
        SRL   #1,1                NORMALIZE SUM IN #1                  0
        O     #1,=X'80000000'     SET MINUS BIT FOR BIGNUM             0
        ST    #1ˇ
2         LA    #2,4                INIT. WORD SIZE FOR BXLE
2         LA    #4,8                INITIALIZE OFFSET FOR BXLE
2BMFLOOP  AL    #0,0(#4,#6)    ˇ
002         SRDL  #0,31               SHIFT RIGHT ALL BUT CARRY BIT
002         SRL   #1,1                RESTORE SHIFTED WORD, HIGH BIT NOW
002         ST    #1,0(#4,#15)        STORE INˇ
00002         BXLE  #4,#2,BMFLOOP       NOT DONE WITH SHORTER BIGNUM
10002         LTR   #0,#0               CARRY BIT LEFT OVER?
20002         BNZ   BMPFXC              YES, THERE IS AN EXTR A CARRY
4530002ˇÁ
 HEADER      04540002         CLC   0(12,#15),MTWO31X   COMPARE NUMERIC
INST -2**31  04550002         BNE   BMFNOT31            NO, IT CAN'T BE
             04560002 ˇ
 AS ANSWER     04570002         B     RETURN
               04580002*
               04590002BMFNOT31 AR   ˇ
 CHANGES         04600002         ST    #4,ZLCVSNXT         UPDATE AVAIL
POINTER          04610002         B     RETURN
                 04620002*                          ˇ
                   04630002BMPFXC   STCM  #4,7,1(#15)         STORE LENG
RESULT HEADER      04640002         ST    #0,0(#4,#15)        STORE CARR
 MUST BE 1)        04650002         LA    #4,##VECDAT(#4,#15) CALCUˇ
R TO END             04660002         ST    #4,ZLCVSNXT         UPDATE A
ITY POINTER          04670002         B     RETURN
                     04680002*
  ˇ
L BUT BORROW BIT       04700002         SRL   #1,1                NORMAL
IN #1                  04710002         O     #1,=X'80000000'     SET BI
US BIT           ˇ
SUM RESULT               04730002         LA    #2,4                INIT
IZE FOR BXLE             04740002         LA    #4,8                INIT
FFSET FOR BXLE           0475000ˇ
ORD TO PREVIOUS BORROW     04760002         SRDA  #0,31               SH
T ALL BUT BORROW BIT       04770002         SRL   #1,1                RE
IFTED WORD, HIGH BIT NOW 0 04780002         ST ˇ
TO RESULT BIGNUM             04790002         BXLE  #4,#2,BMFMLOOP
 WITH BIGNUM                 04800002         LTR   #0,#0
IT LEFT OVER?                04810002         BZ    BMFMIN0   ˇ
ORD ZERO - MUST BACKTRACK      04820002         BM    BUG1
ORD SHOULD NEVER BE NEGATIVE   04830002         STCM  #3,7,1(#15)
LENGTH AND RESULT INTO HEADER  04840002         AR    #4,#15
T TO END OF RESULT               04850002         ST    #4,ZLCVSNXT
TE AVAILABILITY POINTER          04860002         B     RETURN
                                 04870002*
            ˇ
 INCREMENT FOR BXH                 04890002         LR    #1,#2
LIMIT FOR BXH                      04900002BMFMIN0L L     #2,##VECDAT-4(
EXAMINE FOR ZERO           +
TEST WORD                ˇ
  STOP - FOUND NONZERO WORD            04930002         BXH   #3,#0,BMFM
  LOOP TO NEXT LOWER WORD              04940002         L     #2,##VECDA
  LOAD LS WORD - THIS IS THE FIXNUM    0ˇ
    MASK OUT SIGN BIT                    04960002         LCR   #2,#2
    SINCE IT'S SUPPOSED TO BE NEG.       04970002         #MKAT FIXED
    MAKE A FIXNUM                        04980002      ˇ
                                           04990002*
                                           05000002*
                                           05010002BMFMIN1  STCM  #3,7ˇ
        STORE LENGTH INTO RESULT HEADER      05020002         AR    #4,#
        POINT TO END, (CHANGE WITH ##VECDAT) 05030002         ST    #4,Z
        UPDATE AVAILABILITY POINTER          05040002         B     RETU
     ˇ
                                               05060002NFXBG1   DS    0H
          ARG 1 IS NOT INTEGER                 05070002         CLI   ##
,##SFLOAT           ˇ
            ARG 1 IS SINGLE FLOAT                05090002         CLI
6),##DFLOAT                                      05100002         BE
            ARG 1 IS DOUBLE FLOAT  ˇ
                                                   05120002         SPAC
                                                   05130002FX1NBF2  DS
              ARG 1 IS FIXED BUT ARG2 IS NOT      ˇ
                                                     05150002*
                                                   * 05160002*----------
---------------------------------------------------* 05170002*   ˇ
      CHECK TYPE OF ARG 2                            * 05180002*--------
-----------------------------------------------------* 05190002
TYPE(#7),##SFLOAT                                      05200002
ˇ
##TYPE(#7),##DFLOAT                                      05220002
FIXDFLO             FIXED + DFLOAT = DFLOAT              05230002
ERROR2         ˇ
  #0,##CDR(,#6)       GET FIXED VALUE 1                    05250002
  #14,FIX2FLO         CONVERT FIXED TO FLOAT               05260002
  #F2,#F0             GET SINGˇ
    ADDSFLO1                                                 05280002FIX
    #0,##CDR(,#6)       GET FIXED VALUE 1                    05290002
AS  #14,FIX2FLO         CONVERT FIXED TO FLOA T               05300002ˇ

10002         B     ADDDFLO1
20002         SPACE
30002Aˇ
5340002         SPACE
5350002*----------------------------------------------------------------
5360002*             ˇ
 05370002*--------------------------------------------------------------
 05380002         CLI   ##TYPE(#7),##SFLOAT
 05390002         BE    SADDSFLO    ˇ
   05400002         CLI   ##TYPE(#7),##DFLOAT
   05410002         BE    SADDDFLO            SFLOAT + DFLOAT = DFLOAT
   05420002         CLI   ##TYPE(#7),##FIXNUM      ˇ
     05430002         BE    SFLOPFIX            SFLOAT + FIXED = SFLOAT
     05440002         CLI   ##TYPE(#7),##BIGNUM
     05450002         BNE   ERROR2              SFLOAT + NONUM = Eˇ
       05460002         LE    #F2,##CDR(,#6)      Get single float value
       05470002         L     #15,ZLCCVBF         Get address of ZILCVBF
       05480002         LR    #5,#7               Arg1 is float, arg2 is
 ˇ
         05500002         LER   #F4,#F0             Get float value for
         05510002         B     ADDSFLO2            Go to add float arg1
         0552000ˇ
           05530002*----------------------------------------------------
---------* 05540002*                      FIXNUM TO SINGLE FLOAT
         * 05550002*-----------ˇ
-----------* 05560002SFLOPFIX LE    #F2,##CDR(,#6)      Get single float
             05570002         L     #0,##CDR(,#7)       GET FIXED VALUE
             05580002         #BAS  #14,FIX2FLˇ
               05590002         LRER  #F4,#F0             GET FLOAT VALU
               05600002         B     ADDSFLO2            FLOAT + FIXED
               05610002         SPACE                        ˇ
                 05620002ARG1DFLO DS    0H                  ARG 1 IS DOU
T                05630002         SPACE
                 05640002         LD    #F2,8(,#6)          GET FLOAT VA
                   05650002*--------------------------------------------
-----------------* 05660002*                      CHECK TYPE OF ARG 2
                 * 05670002*--------------------------------------------
-----------+
         ˇ
T = DFLOAT             05700002         CLI   ##TYPE(#7),##SFLOAT
                       05710002         BE    DADDSFLO            DFLOAT
T = DFLOAT             0ˇ
                         05730002         BE    DFLOPFIX            DFLO
ED = DFLOAT              05740002         CLI   ##TYPE(#7),##BIGNUM
                         05750002      ˇ
ONUM = ERROR               05760002         L     #15,ZLCCVBF         Ge
s of ZILCVBF               05770002         LNR   #5,#7               Ar
oat, arg2 is bignum        05780002         #BASR #14,ˇ
bignum to float              05790002         LDR   #F4,#F0
t value for arg2             05800002         B     ADDDFLO2
d float arg1 to arg2         05810002         SPACE 1                ˇ
                               05820002*--------------------------------
-----------------------------* 05830002*                      FIXNUM TO
LOAT                         * 05840002*--------------------------------
----ˇ
FIXED VALUE 2                    05860002         #BAS  #14,FIX2FLO
ERT FIXED TO FLOAT               05870002         LDR   #F4,#F0
FLOAT VALUE 2      ˇ
OAT + FIXED = FLOAT                05890002         SPACE
                                   05900002*----------------------------
---------------------------------*ˇ
T ADD                              * 05920002*--------------------------
-----------------------------------* 05930002SADDSFLO DS    0H
                                     05940002    ˇ
  Get single float value 1             05950002ADDSFLO1 DS    0H
                                       05960002         LE    #F4,##CDR(
  Get single float value 2             05970002ADDSFLO2 DS    0Hˇ
                                         05980002         AER   #F2,#F4
    ADD THEM                             05990002         STE   #F2,ZLCW
    PUT RESULT IN REG FOR ATOM-MAKING    06000002         L     #2,ZLCWO

      SET STACK LOCATION FOR CONS          06020002         #MKAT FLOAT
      MAKE A FLONUM                        06030002         B     RETURN
      AND RETUˇ
                                             06050002*------------------
-------------------------------------------* 06060002*
BLE FLOAT ADD                               * 06070002ˇÁ
-----------------------------------------------------------* 06080002DAD
    0H                                                       06090002
R   #F4,#F4                                                  06100002 ˇ
LE    #F4,##CDR(,#7)      Get double float value 2             06110002
B     ADDDFLO2                                                 06120002S
DS    0H                                                       06130002
SDR  ˇ
  LE    #F2,##CDR(,#6)      Get double float value 1             0615000
1 DS    0H                                                       0616000
  LD    #F4,8(,#7)  ˇ
LO2 DS    0H                                                       06180
    ADR   #F2,#F4             ADD THEM                             06190
    LDR   #F0,#F2                  ˇ
      L     #15,ZLCMDF          Get address of ZILMDF                062
      #BASR #14,#15             Call ZILMDF to make a double-float   062
      B     RETURN              AND RETURN WITH ITˇ
        SPACE 1                                                        0
        COPY  FIX2FLO             FIXED TO FLOAT CONVERSION ROUTINE    0
        SPACE 1                                                  ˇ
2         DS    0A                  ALIGN BIGNUM TO FULLWORD
2#TWO31   DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
2#MTWO31  DC    YL1(##FIXNUM),AL3(0),F'-2147483648'  MOST NEG FIXNUM
ˇ
002MTWO31X  DC    YL1(##BIGNUM),AL3(8),X'80000000',F'1' -2**31=BAD BIGNU
002         SPACE 1
002ERROR1   #ERˇ
30002ERROR2   #ERR  'Argument 2 to add not a number - ',4(#11)
40002BUG1     #ERR  'Internal bug in ZILADD - MS word of bignum negative
50002               ing ',0(#1ˇ
6360002         SPACE 1
6370002         LTORG
6380002         END                          Œ
 06390002
************************** 00010003*
                         * 00011003* ZIL Version 1.3 (c) 1989 The Charle
Draper Laboratory Inc.   * 00012003*ˇ
                           * 00013003*
                           * 00013103***********************************
**************************** 00013203         TITLEˇ
INITION'                       00013303         MACRO
                               00013403&SYM     DMPER &MSG
                               00013503&SYM     L     #1,=A(&MSG) ˇ
                                 00013603         LA    #0,L'&MSG
                                 00013703         B     SIGNALER
                                 00013803         MEND
 ˇ
M DECONSTRUCTOR MODULE'            00014003*****************************
********************************** 00016003*
                ˇ
ROM ASSEMBLER LANGUAGE FUNCTIONS   * 00018003* WHICH DESIRE TO DUMP ATOM
N-STORAGE CHARACTER AREAS, OR      * 00019003* JUST RETURN THE ALPHA TEX
N OF THE ATOM WHERE RELEVANT.  ˇ
                                     * 00030003* THIS MODULE USES NO STA
,  SINCE IT'S NOT RECURSIVE.         * 00040003*
                                     * 0005000ˇ
                                       * 00060003*
                                       * 00070003* REGISTER 1 CONTAINS T
IFICATION INDICATOR:                   * 00080003*   NIL - DOˇ
                                         * 00090003*   OTHER - SLASHIFY.
                                         * 00100003* REGISTER 2 POINTS T
OM TO BE DUMPED.                         * 00110003*
                                           * 00120003* ALSO, THE CALLER
THE "ALWAYS-COPY" BIT ON IF DESIRED...     * 00130003*       OI ZLCDFLGS
Y                                          * 00140003* IF IT IS REQUIRED
E RETURNED ˇ
.                                            * 00160003*
                                             * 00170003* OUTPUTS ARE AS
                          ˇ
                                               * 00190003* REGISTER 0 CO
HE LENGTH OF THE DUMPED ATOM.                  * 00200003* REGISTER 1 CO
HE ADDRESS OF THE (DUMPED ATOM) TEXT.    +
NGED.                                  ˇ
                                                   * 00230003* NON-ALPHA
OMS WILL BE CONVERTED APPROPRIATELY.               * 00240003* HOWEVER,
E INVALID AS INPUT.                                * 0ˇ
                                                     * 00260003*********
****************************************************** 00270003*
                                                     * 00280003* THE ˇ
 HAS CHANGED SLIGHTLY, IN THAT ZILADMP NOW RETURNS     * 00290003* THE A
F THE WORKAREA IN REGISTER 1.  THIS IS NECESSARY FOR   * 00300003* STRIN
H HAVE THEIR ACTUAL DATA AREA RETURNED, NOT COPIED.    * 00310003* THUS
ERS ˇ
                                                         * 00330003*****
********************************************************** 00340003*
                   ˇ
          BIGNUM DUMPING CODE BY KJELD HVATUM.             * 00360003*
                                                           * 00370003*
o decimal conversion can be done bˇ
Knuth (vol 2, 2nd ed., page 302)                             * 00390003*
                                                             * 00400003*
s the integer function)                          ˇ
                                                               * 0042000
                                                               * 0043000
 U  = u mod B                                                  *ˇ
    0                                                            * 00450
                                                                 * 00460
   U  = {u/B} mod B                                              * 00470

                                                                   * 004
     U  = {{u/B}/B} mod B                                          * 005
      2       ˇ
                                                                     * 0
       ...                                                           * 0
                             ˇ
3*                                                                     *
3*  etc. stopping when {...{{u/B}B}.../B} = 0.                         *
3*  This would be done in radix-b arithmeticˇ
003*
003*  is (U ...U U ).
003*       M    0 1                                        
00003ˇÁ
         * 00610003*  In our application the radices are b = 2   and B =
         * 00620003*  This will allow efficient use of machine instructi
 implies * 00630003*ˇ
m/fixnum   * 00640003*  (bignum divided by fixnum) routine which is incl
ine        * 00650003*  here.
           * 00660003**************ˇ
************** 00670003*
             * 00680003* Change activity:
             * 00690003*                          ˇ
               * 00700003* 04/27/88 - Fixed bug with slashification not
ter error.     * 00710003*
               * 00720003****************************************ˇ
****************** 00730003         EJECT 1
                   00740003ZILADMP  #ZBEG NAME='ZILADMP'
                   00750003         SPACE 1
ˇ
SHIFICATION FLAG     00770003         CR    #1,#10              IF SLASH
N REQUESTED          00780003         BE    DONTSLSH            OR
               ˇ
ION REQUESTED          00800003         BE    DONTSLSH            THEN..
                       00810003         OI    ZLCDFLGS,ZLCDSLSH    INDIC
HIFICATION REQUEST     0082000ˇ
                         00830003         SPACE 1
                         00840003         TM    ZLCDFLGS,ZLCDCOPY+ZLCDSL
ASHIFY OR COPY REQUESTED 00850003         BNZˇ
E-CHECK IS POSSIBLE        00860003*
                           00870003* QUICK PRE-CHECK FOR STRING/SYMBOL I
LE ONLY IF WE ARE NOT      00880003* SLASHIFYING AND NOT ALWˇ
XT.                          00890003*
                             00900003* QUICK PRE-CHECK FOR STRINGS.  WE
RETURN INFO FOR STRINGS      00910003* WITH MAXIMUM SPEED AND EFFICIENCY
OWEST OVERHEAD.                00920003*
                               00930003         XR    #0,#0
AR INSERT REGISTER             00940003         CLI   ##TYPE(#2),##STRIN
 IS A STRIˇ
EN...                            00960003         ICM   #0,7,1(#2)
ET STRING LENGTH                 00970003         LA    #1,##VECDAT(,#2)
ET STRING TEXT POINTER   +
 RETURN                ˇ
                                     01000003*
                                     01010003* QUICK PRE-CHECK FOR SYMBO
                                     0ˇ
                                       01030003         CLI   ##TYPE(#2)
L IF ARG IS A SYMBOL                   01040003         BNE   NOTASYM
    THEN...                            01050003      ˇ
       GET POINTER TO PRINT NAME         01060003         ICM   #0,7,1(#
       SET STRING LENGTH                 01070003         LA    #1,##VEC
       SET STRING TEXT POINTER           01080003         BR    #14 ˇ
         RETURN                            01090003         SPACE 1
                                           01100003NOPRECHK DS    0H
      SLASHIFICATION OR COPY REQUESTED     01110003         SPACE 1
   ˇ
AVE     SAVE REGISTERS                       01130003         LR    #12,
        SET UP BASE REGISTER                 01140003         SPACE 1
                  ˇ
2         ESTABLISH ADDRESSABILITY             01160003         DROP  #1
                                               01170003         SPACE 1
                                 ˇ
2),##STRING IF IT IS A STRING                    01190003         BE
            THEN GO TO SLASHIFY THE STRING       01200003         CLI
2),##SYMBOL IF IT IS A SYMBOL                   ˇ
OL            THEN GO TO SLASHIFY THE SYMBOL       01220003         B
M             ELSE NOT STRING OR SYMBOL            01230003         SPAC
                                                   01240003DOCOˇ
                                                     01250003         SP
                                                     01260003NOTASYM  DS
                NOT STRING OR SYMBOL...              01270003         SP
                                                       01280003
LADMP,#15         ESTABLISH ADDRESSABILITY             01290003
2                                                      01300003
             ˇ
#12,#7,ADMPSAVE     SAVE REGISTERS                       01320003
#12,#15             SET UP BASE REGISTER                 01330003
1                           ˇ
G ZILADMP,#12         ESTABLISH ADDRESSABILITY             01350003
  #15                                                      01360003
E 1                                                         01370003ˇÁ

003         EJECT
003*
003*ˇ
10003*
20003         TM    ##TYPE(#2),##ATOM   IF INPUT IS NOT AN ATOM
30003         BZ   ˇ
1440003*
1450003* BEGIN PROCESSING
1460003*                          ˇ
 01470003         LA    #3,ATOMAREA         REG 3 --> CHARACTER BUFFER A
 01480003         LR    #4,#2               REG 4 --> ATOM TO BE DUMPED
 01490003         XR    #5,#5               CLEARˇ
   01500003         SPACE 1
   01510003         TM    ##TYPE(#4),##CCO    IF THIS IS A COMPILED CODE
   01520003         BZ    NOTSUBR             THEN...           ˇ
     01530003         XR    #1,#1
     01540003         ICM   #1,7,##CAR+1(#4)    GET POINTER TO COMPILED
     01550003         LA    #2,0(,#3)           POINT TO OUTPUT AREA

       01570003         MVI   1(#2),C'<'
       01580003         TM    ##TYPE(#4),##CLOS   IF THIS IS A CLOSURE
       0159000ˇ
         01600003         MVC   2(8,#2),=C'CLOSURE ' IDENTIFY AS CLOSURE
         01610003         LA    #2,2+8(,#2)          BUMP OUTPUT POINTER
         01620003         B  ˇ
           01630003NOTACLOS DS    0H                  ELSE...
           01640003* IN FUTURE THIS COULD ALSO BE FSUBR, MSUBR, OR LSUBR
           01650003         MVC   2(5,#2),=Cˇ
             01660003         LA    #2,2+5(,#2)          BUMP OUTPUT POI
             01670003AFTACLOS DS    0H
             01680003         XR    #6,#6               CLEˇ
               01690003         IC    #6,4(,#1)           GET LENGTH OF
DENTIFIER      01700003         LA    #0,L'ATOMAREA(,#3)  POINT TO END O
 WORKAREA      01710003         SR    #0,#2               GET LENGTH OF
ING AREA         01720003         CR    #6,#0               IF MODULE ID
EXCEEDS IT       01730003         BNH   *+6                 THEN
                 01740003         LR    #6,#0               USE SHORTER
         +
EXECUTEˇ
RO,                  01770003         BM    AFTAMOV             THEN SKI
                     01780003         EX    #6,MOVID            ELSE MOV
 ID TO OUTPUT AREA   0ˇ
 MODULE ID OUTPUT      01800003         MVI   0(#2),C'>'          FINISH
                       01810003         LA    #0,1(,#2)           POINT
F OUTPUT STUFF         01820003      ˇ
TH OF THE STUFF          01830003         LR    #1,#3               GET
ESS OF THE STUFF         01840003         B     RETURN              RETU
 DONE)                   01850003         SPACE 1   ˇ
                           01860003MOVID    MVC   0(*-*,#2),5(#1)     EX
MOVE MODULE ID TO OUTPUT   01870003         EJECT
                           01880003NOTSUBR  DS    0H               ˇ
T CODE OBJECT)...            01890003         SPACE 1
                             01900003         TM    ##TYPE(#4),##FLOAT
ATING POINT ATOM             01910003         BZ    NOTFLOAT
  ˇ
                               01930003         TM    ##TYPE(#4),##VSS
ble float                      01940003         BO    DFDUMP
o to dump double ˇ
                                 01960003*******************************
******************************** 01970003*
                               *ˇ
p.                               * 01990003*
                                 * 02000003* Two floating-point formats
ible: "human" format and         * 02010003* scˇ
                                   * 02020003*
                                   * 02030003* If we can represent the a
value of the flonum without loss   * 02040003* of significanceˇ
ormat.  Otherwise we use E format.   * 02050003*
                                     * 02060003* In either case a leadin
ign is NOT output; a leading minus   * 02070003* sign will be output whe
required.                              * 02080003*
                                       * 02090003***********************
**************************************** 02100003         SPACE 1
            ˇ
       CLEAR FPR0                          02120003         LE    #F0,##
       GET FLOAT VALUE (SINGLE PRECISION)  02130003         LPDR  #F2,#F
       GET ABSOLUTE VALUE T HEREOF          02140003ˇÁ
  PRINT0P0             IF ZERO, PRINT 0.0F0                02150003
E 1                                                        02160003
  #F0,ZLCWORK          Store flonum into workarea          02170003 ˇ
    ZLCWORK,X'7F'        Turn off sign bit                   02180003
    #6,#6                Clear insert register               02190003
    #6,ZLCWORK+4         Clear right half of workarea        02200003
   ˇ
SH    #6,=H'64'            Convert from excess-64 notation     02220003
BP    GTZERO               If characteristic was X'40' or less 02230003
MVI   1(#3),C'0'  ˇ
  LA    #2,2(,#3)             Point to where to put decimal pt   0225000
  MVI   0(#2),C'.'            Move in decimal point              0226000
                                 ˇ
cases where the fractional part times 10^9 is still less than 1,   02280
 only characteristics we can handle without loss of significance   02290
 as follows:                                    ˇ
                                                                     023
riginal characteristic  Value of #6   Possible flonum values         023
                                                               ˇ
 40                       0             40xxxxxx                       0
 3F                       -1            3Fxxxxx0                       0
 3E                       -2            3Exxxx00                       0
3* 3D                       -3            3Dxxx000
3* 3C                       -4            3Cxx0000
3* 3B                       -5            3Bx00000
3*           ˇ
003* Anything else and we have to switch to E notation.
003*
003         LPR   #15,#6    ˇ
30003         CH    #15,=H'5'           If characteristic just too small
40003         BH    EDUMP               then use E-format
50003         SLA   #15,2               Indˇ
2460003         L     #0,ZLCWORK           Get flonum contents
2470003         N     #0,FRMASK(#15)       And it with mask
2480003         BNZ   EDUMP                If any 1-bits iˇ
 02490003         B     CVFRAC               Else go to convert fraction
 02500003         SPACE 1
 02510003GTZERO   DS    0H                   Else flonum > 0
   02520003         CH    #6,=H'6'             If more than 6 hex positˇ
     02530003         BH    EDUMP                then give up - use E-no
     02540003         XR    #4,#4                Set up register pair
     02550003         ICM   #5,15,ZLCWORK+1      Load integer part of fl
     0ˇ
       02570003         SLDL  #4,0(#6)             Shift integer by # of
ces    02580003* Now #4 contains the integer part of the flonum.
       02590003      ˇ
         02600003         MVC   NUMAREA(12),PATTERN  INITIALIZE EDIT PAT
         02610003         LA    #1,NUMAREA+11        INITIALIZE MARK REG
         02620003         EDMK  NUMAˇ
TERN       02630003         BNM   *+10                 IF RESULT IS NEGA
EN...      02640003         BCTR  #1,0                 BUMP BACK TO PREV
ITION      02650003         MVI   0(#1),C'-'       ˇ
N FRONT.     02660003         LA    #15,NUMAREA+12       COMPUTE LENGTH
FICANT PART  02670003         SR    #15,#1               LENGTH OF CONVE
EGER         02680003         BCTR  #15,0                REDUCE FOˇ
               02690003         EX    #15,MVCNUMI          MOVE OUR DATA
ER'S AREA      02700003*
               02710003* Now the dumped integer part of the flonum is at
 ˇ
                 02730003*
                 02740003         LA    #2,2(#15,#3)        Point past d
teger part      ˇ
point              02760003         STCM  #5,14,ZLCWORK+1     Store frac
art back           02770003         MVI   ZLCWORK,X'40'       Set charac
 of fraction       02780003    ˇ
                     02790003CVFRAC   DS    0H
                     02800003         SPACE 1
                     02810003*                ˇ
                       02820003* Convert fractional part of flonum to a
representation by      02830003* multiplying it by 10000000.  If the fra
magnitude is so small  02840003* that this would result in loˇ
e, then switch to        02850003* E notation.
                         02860003*
                         02870003         SDR   #F4,#F4             Clea
eg                         02880003         LE    #F4,ZLCWORK         Lo
ional part of flonum       02890003         LTER  #F4,#F4             If
                           02900003         BZ    FRAC0               th
 a zero fra ctional part    02910003ˇÁ
      If less than zero, error - lose      02920003         MD    #F4,=D
      Multiply by 10**7 (for 8 places)     02930003         AD    #F4,=D
      Add rounding factor                  02940003 ˇ
        If this makes it too big             02950003         BNL   EDUM
        then use E notation                  02960003         DD    #F4,
        Down to 10**7 for 8 places           02970003*             ˇ
                                               02980003* Now convert fra
 decimal following decimal point in workarea   02990003*
                                               03000003         STD   #F
K ˇ
             Clear insert register               03020003         IC
RK           Get characteristic                  03030003         SH
'            Convˇ
F              If frac lt 1, lose                  03050003         BP
RO             If characteristic was X'40', then   03060003         MVI
C'0'            make fractional ˇ
(,#2)             point to end of dumped value       03080003         B
EADY              go to finish up flonum             03090003         SP
                                               ˇ
                   Else flonum > 0                     03110003
,=H'6'             If more than 6 hex positions        03120003
UMP                then give up, use E notation        0313000ˇ
#4,#4                Set up register pair                03140003
#5,15,ZLCWORK+1      Load integer part of flonum         03150003
#6,2                 Multiply characteristic by 4        03160003
  #4,0(#6)             Shift integer by # of hex places    03170003* Now
ains the integer part of the flonum.                       03180003
  #4,ZLCDBL            Get decimal numeric value           03190003
  1(7,#2),ZLˇ
    7(#2),X'F0'          Fix up zone                         03210003*
                                                             03220003* N
umped fractional part of thˇ
tains the length thereof minus 1.                              03240003*
                                                               03250003
LA    #4,7(,#2)           Point to last diˇ
  LA    #0,1(,#2)           Point to first digit following "."   0327000
P DS    0H                  Back scan off trailing zeroes        0328000
  CR    #4,#0               Finished when hit first frac +
    BNH   FRDONE                                       ˇ
      CLI   0(#4),C'0'          If a nonzero digit found, done       033
      BNE   FRDONE                                                   033
      BCT   #4,FRBSLOOP         Else continue backscan               0ˇ
RDONE   DS    0H                  Now #4 points to last nonzero digit  0
                                  (or single digit following ".")      0
        B     FLOREADY                                                 0
     ˇ
3FRAC0    DS    0H                  Here if fractional part is zero
3         SPACE 1
3         MVI   1(#2ˇ
003         LA    #4,1(,#2)           Compute total length
003******** B     FLOREADY
003         SPACE 1                ˇ
30003FLOREADY DS    0H                  Flonum converted except for sign
40003         SPACE 1
50003         MVC   1(2,#4),=C'F0'      Move in siˇ
3460003         LA    #4,2(,#4)
3470003         SR    #4,#3               Compute length
3480003* If it starts with a plus sign, remove the plus sign.    ˇ
 03490003         LTER  #F0,#F0             If original number was negat
 03500003         BNM   FNMINUS             then
 03510003         MVI   0(#3),C'-'           add a minus sign
ˇ
   03530003         LR    #1,#3                point to minus sign
   03540003         B     RETURN
   03550003FNMIˇ
     03560003         LA    #1,1(,#3)            point to data
     03570003         LR    #0,#4                adjust length according
     03580003         B     REˇ
       03590003         SPACE 1
       03600003PRINT0P0 DS    0H                  Print a floating-point
       03610003         LA    #1,=C'0.0F0'   ˇ
         03620003         LA    #0,5
         03630003         B     RETURN
         03640003         SPACE 1                           ˇ
           03650003EDUMP    DS    0H                  Print flonum using
ion        03660003*                                  FP reg 2 contains
 value     03670003         SPACE 1
             03680003ˇÁ
MAL EXPONENT TO ZERO       03690003COMP10   DS    0H                   M
ETWEEN 0.1 AND 1.0         03700003         LTDR  #F2,#F2              I
                           03710003 ˇ
 FORMATTING                  03720003         CD    #F2,=D'1.'
TER THAN 1                   03730003         BNL   GE1
UST DIVIDE UNTIL < 1         03740003         CD   ˇ
SS THAN .1                     03750003         BL    LTP1
 MUST MULTIPLY UNTIL >= .1     03760003         B     OKNOW
OK FOR FORMATTING              03770003GE1      DS    0H          ˇ
                                 03780003         DD    #F2,=D'10'
IDE UNTIL LT 1.0                 03790003         AH    #6,=H'1'
REMENT DECIMAL EXPONENT          03800003         B     COMP10
Tˇ
                                   03820003         MD    #F2,=D'10'
ULTIPLY UNTIL GE 0.1               03830003         BCTR  #6,0
ECREMENT DECIMALˇ
 CONTINUE TESTING                    03850003OKNOW    DS    0H
 NUMBER IS READY TO FORMAT           03860003         MD    #F2,=D'10E8'
 MULTIPLY BY 10**9 (FOR 9 PLACEˇ
   ADD ROUNDING FACTOR (SHOW 8 PLACES) 03880003         CD    #F2,=D'10E
   IF THIS MAKES IT BIGGER AGAIN       03890003         BL    RNDEDOK
   THEN                                0390000ˇ
      DIVIDE BY 10 AGAIN                 03910003         AH    #6,=H'1'
      AND ADJUST EXPONENT ACCORDINGLY.   03920003RNDEDOK  DS    0H
                                         03930003         AW ˇ
000000000' UNNORMALIZE TO GET INTEGER PART 03940003         STD   #F2,ZL
       STORE RESULT IN WORK AREA           03950003         L     #1,ZLC
       PICK UP FIXED PORTION, NOW ISOLATED 03960003         LTDR  0,0
         IF NUMBER WAS NEGATIVE              03970003         BM    OUTM
         THEN PUT A MINUS SIGN               03980003         MVI   0(#3
         ELSE PUT A PLUS SIGN                03990003         B     AFTM
           ˇ
                                               04010003AFTMINUS DS    0H
                                               04020003*
                          ˇ
sentation from .mmmF+nn to m.mmF+(nn-1)          04040003*
                                                 04050003         BCTR
             Adjust exponent for this rep+
C'.'           DECIMAL POINT           ˇ
LCDBL            MANTISSA OF DECIMAL NUMBER          04080003         UN
#3),ZLCDBL       CONVERT INTO USER AREA              04090003* IGNORE LA
 (USED FOR ROUNDING ONLY)                            0ˇ
1,#3),2(#3)        Slide leftmost digit over           04110003
#3),C'.'           Insert decimal point                04120003
,3(,#3)            Point to digit following "."        04130003      ˇ
#15,9(,#3)           Point to last dumped digit          04140003EBS1
0H                   Scan off trailing zeroes            04150003
#15,#1               Loop until we have to stop          04160003
EBS2ˇ
  0(#15),C'0'            until we find a nonzero digit     04180003
  EBS2                    at which point go finish up      04190003
  #15,EBS1         ˇ
    0H                                                       04210003
I   1(#15),C'F'          OVERLAY ROUNDING DIGIT WITH EXP CHR 04220003
R   #6,#6                CHECK SIGˇ
BM    EXPMINUS                                                 04240003
MVI   2(#15),C'+'                                              04250003
B     AFTEXPMN                                   ˇ
S MVI   2(#15),C'-'                                              0427000
N DS    0H                                                       0428000
  CVD   #6,ZLCDBL           DECIMAL CHARACTERISTIC              ˇ
    UNPK  3(2,#15),ZLCDBL     CONVERT INTO USER AREA               04300
    OI    4(#15),X'F0'                                             04310
it starts with a plus sign, remove the plus sign.  This is the     04320

      CLI   0(#3),C'+'          IF STARTS WITH PLUS SIGN             043
      BNE   FNOTPLUS            THEN                                 043
      LA    #1ˇ
        B     FAFTPLUS             FLOAT NUMBER LOOKS LIKE ABOVE       0
NOTPLUS DS    0H                  ELSE                                 0
        LR    #1,#3          ˇ
3FAFTPLUS DS    0H
3         LA    #0,5(,#15)          LENGTH OF DUMPED FLONUM
3         SR    #0,#1               = END - ˇ
003         B     RETURN
003         EJECT
003DFDUMP   DS    0H                  Dump double float    
50003ˇÁ
           04460003*****************************************************
********** 04470003*
         * 04480003*ˇ
           * 04490003*
           * 04500003* Two floating-point formats are possible: "human"
nd         * 04510003* scientific-nˇ
             * 04520003*
             * 04530003* If we can represent the absolute value of the f
thout loss   * 04540003* of significance, we use hˇ
se E format.   * 04550003*
               * 04560003* In either case a leading plus sign is NOT out
eading minus   * 04570003* sign will be output whenever required.ˇ
                 * 04580003*
                 * 04590003*********************************************
****************** 04600003         SPACE 1
ˇ
uble precision float 04620003         LPDR  #F2,#F0              Get abs
lue thereof          04630003         BZ    DPRINT00             If zero
0.0            ˇ
                       04650003         STD   #F0,ZLCWORK          Store
into workarea          04660003         NI    ZLCWORK,X'7F'        Turn
 bit                   0467000ˇ
t register               04680003         IC    #6,ZLCWORK           Get
eristic                  04690003         SH    #6,=H'64'            Con
m excess-64 notation     04700003         BP ˇ
0', go do integer part     04710003*                                   C
istic X'40' or less...     04720003*                                   t
only a fractional part     04730003         MVI   1(#3),C'0'ˇ
nteger part print as zero    04740003         LA    #2,2(,#3)
to where to put decimal pt   04750003         MVI   0(#2),C'.'
n decimal point              04760003*
                               04770003* In cases where the fractional p
s 10^16 is still less than 1,  04780003* the only characteristics we can
without loss of significance   04790003* are as follows:
          ˇ
                                 04810003* Original characteristic  Valu
  Possible flonum values         04820003*
                         +
    40xxxxxx xxxxxxxx  ˇ
      3Fxxxxxx xxxxxxx0              04850003* 3E
      3Exxxxxx xxxxxx00              04860003* 3D
      3Dxxxxxx xxxxx000              0ˇ
        3Cxxxxxx xxxx0000              04880003* 3B
        3Bxxxxxx xxx00000              04890003* 3A
        3Axxxxxx xx000000              04900003* 39  ˇ
          39xxxxxx x0000000              04910003* 38
          38xxxxxx 00000000              04920003* 37
          37xxxxx0 00000000              04930003* 36               ˇ
0           36xxxx00 00000000              04940003* 35
1           35xxx000 00000000              04950003* 34
2           34xx0000 00000000              04960003* 33
3  ˇ
                                             04980003* Anything else and
 to switch to scientific notation.           04990003*
                  ˇ
ere.  More than just this test is required.    05010003*
                                               05020003         LPR   #1
          Convert #6 to an index ˇ
2' <==      If characteristic just too small     05040003         BH
            then use scientific notation         05050003         SLA
            Index into table of flonum masks    ˇ
RMASK(#15)    Get address of appropriate mask      05070003         MVC
8),ZLCWORK    Move flonum contents to work area    05080003         NC
8),0(#15)     And it with mask                     05090003    ˇ
MP              If any 1-bits in bad place, use sci. 05100003         B
RAC             Else go to convert fractional part   05110003         SP
                                                     05120003DGTZERO  DS
                   Else flonum > 0                     05130003
                                                       05140003
,=H'14'            If more than 14 hex positions       05150003
DUMP         ˇ
1                                                        05170003*******
******************************************************** 05180003*
                            ˇ
 integer part of flonum and convert to decimal.          * 05200003*
justed characteristic (number of nibbles of integer)     * 05210003*
                                                          * 05220003ˇÁ

003* (isolated by the old trick of adding an unnormalized zero)
003* into a register pair and do a fixed-point divide by 10^9 to get the
003*ˇ
60003* get the right half.  Subsequently we scan off leading blanks.
70003*
80003**************ˇ
5290003         SPACE 1
5300003         LDR   #F4,#F2             Get that (abs flonum) again
5310003         AW    #F4,=X'4E000ˇ
 05320003         STD   #F4,DWORK            Store it
 05330003         CLI   DWORK,X'4E'          If characteristic isn't wha
 05340003         BNE   FLOBARF               expˇ
   05350003         MVI   DWORK,X'00'          Clear characteristic
   05360003         LM    #4,#5,DWORK          Load integer part of flon
   05370003         D     #4,=F'1000000000'    Divide by 10^9   ˇ
     05380003* We know that the quotient cannot be greater than 21474836
     05390003* a program check is not possible.
     05400003*                                   #4 = remainder

       05420003         CVD   #5,ZLCDBL            Convert quotient to d
       05430003         UNPK  DNUMAREA(9),ZLCDBL   Get 9 digits of decim
r      0544000ˇ
         05450003         CVD   #4,ZLCDBL            Convert remainder t
l        05460003         UNPK  DNUMAREA+9(9),ZLCDBL Get 9 digits of dec
ber      05470003         OI ˇ
           05480003*
           05490003* Now the dumped integer part of the flonum is at DNU
           05500003* We have 18 digits.  Nowˇ
ow           05510003* that the entire number will not be zero.
             05520003*
             05530003         LA    #1,DNUMAREA         Staˇ
 of digits     05540003         LA    #15,18              Set loop count
               05550003DLZLOOP  CLI   0(#1),C'0'          Loop until non
it found       05560003         BNE   DLZEND
                 05570003         LA    #1,1(,#1)
                 05580003         BCT   #15,DLZLOOP
                 05590003DLZEND   DS    0H
         +
signifiˇ
#1 points to num     05620003         BCTR  #15,0               Reduce l
r execute            05630003         EX    #15,MVCNUMI         Move dum
ger part             0ˇ
ped integer part       05650003         MVI   0(#2),C'.'          Move i
mal point              05660003         SPACE 1
                       05670003******ˇ
************************ 05680003*
                       * 05690003* (2) Isolate the fractional part of th
 and convert that.     * 05700003*     To get it, weˇ
er part from the         * 05710003*     original (abs flonum).
                         * 05720003*
                         * 05730003********************************ˇ
**************************** 05740003         SPACE 1
                             05750003         AD    #F4,=D'0'
e integer flonum             05760003         SDR   #F2,#F4
 =ˇ
fractional part in workarea    05780003         SPACE 1
                               05790003DCVFRAC  DS    0H
                 ˇ
                                 05810003*
                                 05820003* Convert fractional part of fl
a decimal representation by     ˇ
action's magnitude is so small     05840003* that this would result in l
ignificance, then switch to        05850003* scientific notation.
                                   05860003*   ˇ
                                     05870003         LTDR  #F2,#F2
If zero                              05880003         BZ    DFRAC0
then print a zero fractional part    05890003         BM    FLˇ
  If less than zero, error - lose      05900003         MD    #F2,=D'10E
  Multiply by 10**16 (for 16 places)   05910003         AD    #F2,=D'5'
  Add rounding factor                  05920003         CD    #F2,=D'10E
    If this makes it too big             05930003         BNL   DEDUMP
    then use scientific notation         05940003         DD    #F2,=D'1
    Down to 10**15 for 16 places         05950003*
            ˇ
imal following decimal point in workarea   05970003*
                                           05980003         AW    #F2,=X
000000000' Unnormalize to g et integer part 05990003ˇÁ
  #F2,DWORK            Store it                            06000003
  DWORK,X'4E'          If characteristic isn't what we     06010003
  FLOBARF               expected, go blow up.              06020003 ˇ
I   DWORK,X'00'          Clear characteristic                06030003
    #4,#5,DWORK         Load integer part of flonum          06040003
    #4,=F'1000000000'   Divide by 10^9                       06050003* W
hatˇ
am check is not possible.                                      06070003*
                          #4 = remainder                       06080003*
                  ˇ
  CVD   #5,ZLCDBL           Convert quotient to decimal          0610000
  UNPK  DNUMAREA(9),ZLCDBL  Get 9 digits of decimal number       0611000
  OI    DNUMAREA+8,X'F0'    Fix uˇ
    CVD   #4,ZLCDBL           Convert remainder to decimal         06130
    UNPK  DNUMAREA+9(9),ZLCDBL Get 9 digits of decimal number      06140
    OI    DNUMAREA+9+8,X'F0'  Fix up sign       ˇ
                                                                     061
ow the dumped fractional part of the flonum is at DNUMAREA.          061
e have 18 digits.  However, we expect a maximum of 16 digits   ˇ
 to be significant.  Plus, get rid of trailing blanks.  We know        0
 that the entire number will not be zero.                              0
                                                                       0
3         LA    #1,DNUMAREA+9+8     Start pointer at end of digits
3         LA    #15,16              Set loop count
3DTZLOOP  CLI   0(#1),C'0'          Loop until nonzero digit found
3         BNEˇ
003         BCTR  #1,0
003         BCT   #15,DTZLOOP
003DTZEND   DS    0H        ˇ
80003*                                  #15 contains # of significant
90003*                                  decimal digits
00003         LA    #1,DNUMAREA+2          ˇ
6310003         BCTR  #15,0               Reduce length for execute
6320003         EX    #15,MVCNUMF         Move dumped fractional part
6330003         LA    #4,2(#15,#2)        Point to end of ˇ
 06340003         B     DFLORDY             Go to finish up flonum
 06350003         SPACE 1
 06360003DFRAC0   DS    0H                  Here if fractional part is z
   06370003         SPACE 1                                            ˇ
     06380003         MVI   1(#2),C'0'          Make it xxx.0
     06390003         LA    #4,2(,#2)           Point to the end
     06400003******** B     DFLORDY
     0ˇ
       06420003DFLORDY  DS    0H                  Flonum converted excep
gn     06430003*                                  and double-float marke
       06440003******ˇ
arker    06450003*******  LA    #4,1(,#4)           Add to length
         06460003         BCTR  #4,0
         06470003         SR    #4,#ˇ
           06480003         LTER  #F0,#F0             If original number
ative      06490003         BNM   DFNMINUS            then
           06500003         MVI   0(#3),C'-'       ˇ
             06510003         LA    #0,1(,#4)            adjust length a
ly           06520003         LR    #1,#3                point to minus
             06530003         B     RETURN                        ˇ
               06540003DFNMINUS DS    0H                  else
               06550003         LA    #1,1(,#3)            point to data
               06560003         LR    #0,#4                adjust length
nˇ
                 06580003         SPACE 1
                 06590003DPRINT00 DS    0H                  Print a doub
 zero           ˇ
                   06610003         LA    #0,3
                   06620003         B     RETURN
                   06630003    ˇ
                     06640003DEDUMP   DS    0H                  Print fl
ng sci. notation     06650003*                                  FP reg 2
s absolute value     06660003         SPACE 1 ˇ
                       06670003         XR    #6,#6               Initia
l exponent to zero     06680003DCOMP10  DS    0H                  Make v
ween 0.1 and 1.0       06690003         LTDR  #F2,#F2        ˇ
zero,                    06700003         BZ    DOKNOW               the
k for formatting         06710003         CD    #F2,=D'1.'          If v
ater than 1              06720003         BNL   DGE1                 the
ust divide until LT 1      06730003         CD    #F2,=D'.1'          If
an 0.1                     06740003         BL    DLTP1                t
ust multiply until GE 0.1  06750003         B     DOKNOW              El
r formattin g               06760003ˇÁ
                                           06770003         DD    #F2,=D
      Divide until LT 1.0                  06780003         AH    #6,=H'
      Increment decimal exponent           06790003 ˇ
        Continue testing                     06800003DLTP1    DS    0H
                                             06810003         MD    #F2,
        Multiply until GE 0.1                06820003         BCTR ˇ
          Decrement decimal exponent           06830003         B     DC
          Continue testing                     06840003DOKNOW   DS    0H
          Now number is ready to format        06850003         MD    #F
15ˇ
'           Add rounding factor (show 16 places) 06870003         CD
0E15'       If this makes it bigger again        06880003         BL
            then ˇ
'10'           divide by 10 again                  06900003         AH
1'             and adjust exponent accordingly.    06910003DRNDEDOK DS
                                ˇ
=X'4E00000000000000' Unnormalize to get integer part 06930003         ST
ZLCDBL          Store result in work area            06940003         CL
BL,X'4E'        If characteristic isn't what weˇ
OBARF              expected, go blow up.               06960003
CDBL,X'00'        Clear characteristic                 06970003
,#5,ZLCDBL        Pick up integer part, now isolated   0698000ˇ
#F0,#F0             If original flonum was negative      06990003
DOUTMNUS            then put a minus sign                07000003
0(#3),C'+'          else put a plus sign                 07010003
  DAFTMNUS                                                 07020003DOUTM
  0(#3),C'-'                                               07030003DAFTM
  0H                                                       07040003*
            ˇ
onvert representation from .mmmF+nn to m.mmF+(nn-1)          07060003*
                                                             07070003
TR  #6,0                Adjˇ
MVI   1(#3),C'.'          Put decimal point                    07090003
D     #4,=F'1000000000'   Divide by 10^9                       07100003*
 that the quotient cannot be greater than ˇ
gram check is not possible.                                      0712000
                            #4 = remainder                       0713000
                            #5 = quotient                +
    CVD   #5,ZLCDBL           Convert quotient to decimˇ
      UNPK  2(7,#3),ZLCDBL      Get 9 digits of decimal number       071
      OI    8(#3),X'F0'         Fix up sign                          071
      CVD   #4,ZLCDBL           Convert remainder to decimal         0ˇ
        UNPK  9(9,#3),ZLCDBL      Get 9 digits of decimal number       0
        OI    17(#3),X'F0'        Fix up sign                          0
 Ignore last digit (used for rounding only)                            0
     ˇ
3         MVI   2(#3),C'.'           Insert decimal point
3         LA    #1,3(,#3)            Point to digit following "."
3         LA    #15,ˇ
003DBS1     DS    0H                   Scan off trailing zeroes
003         CR    #15,#1               Loop until we have to stop
003         BNH   DBS2             ˇ
80003         CLI   0(#15),C'0'            until we find a nonzero digit
90003         BNE   DBS2                    at which point go finish up
00003         BCT   #15,DBS1             Decrementˇ
7310003DBS2     DS    0H
7320003         MVI   1(#15),C'D'         Overlay rounding digit with ex
7330003         LTR   #6,#6               Check sign of decimal eˇ
 07340003         BM    DEXPMNUS
 07350003         MVI   2(#15),C'+'
 07360003         B     DAFTEXPM
ˇ
   07380003DAFTEXPM DS    0H
   07390003         CVD   #6,ZLCDBL           Decimal characteristic
   07400003    ˇ
     07410003         OI    4(#15),X'F0'
     07420003* If it starts with a plus sign, remove the plus sign.
     07430003         CLI   0(ˇ
       07440003         BNE   DFNPLUS             then
       07450003         LA    #1,1(,#3)            point past plus sign
       07460003         B     DFAPLUS        ˇ
         07470003DFNPLUS  DS    0H                  else
         07480003         LR    #1,#3                get pointer to the
         07490003DFAPLUS  DS    0H                          ˇ
           07500003         LA    #0,5(,#15)          Get length of dump
m          07510003         SR    #0,#1               = end - start
           07520003         B     RETURN
             07530003ˇÁ
                           07540003NOTFLOAT DS    0H
                           07550003         SPACE
                           07560003 ˇ
M                            07570003         BNE   NOTFIXED
                             07580003         SPACE
                             07590003         L    ˇ
E FIXED VALUE OF THE ATOM      07600003         CVD   #1,ZLCDBL
CIMAL NUMERIC VALUE            07610003         MVC   NUMAREA(12),PATTER
LIZE EDIT PATTERN              07620003         LA    #1,NUMAREA+1ˇ
IALIZE MARK REGISTER             07630003         EDMK  NUMAREA(12),ZLCD
T PACKED DATA INTO PATTERN       07640003         BNM   *+10
ESULT IS NEGATIVE, THEN...       07650003         BCTR  #1,0
Pˇ
ND MOVE A MINUS SIGN IN FRONT.     07670003         LA    #0,NUMAREA+12
MPUTE LENGTH OF SIGNIFICANT PART   07680003         SR    #0,#1
NGTH OF CONVERTEˇ
SET LENGTH OF CONVERTED NUMBER       07700003         BCTR  #15,0
REDUCE FOR EXECUTE                   07710003         EX    #15,MVCNUMA
MOVE OUR DATA TO CALLER'S AREA ˇ
  GET POINTER TO THE STUFF             07730003         B     RETURN
                                       07740003         SPACE
                                       0775000ˇ
    MOVE CHAR TEXT TO USER AREA          07760003MVCNUMI  MVC   1(0,#3),
    MOVE CHAR TEXT TO USER AREA          07770003MVCNUMF  MVC   1(0,#2),
    MOVE CHAR TEXT TO USER AREA          07780003         EJEˇ
                                           07790003NOTFIXED DS    0H
      IT'S NOT A FIXNUM                    07800003         SPACE
                                           07810003         CLI   ##TYPE
#BIGNUM IF A BIGNUM                          07820003         BNE   NOTB
        THEN...                              07830003         SPACE
                                             07840003*******************
***********ˇ
                                             * 07860003*     R3 = POINTE
LL WORK AREA                                 * 07870003*     R4 = POINTE
NUM                       ˇ
************************************************ 07890003*ON RETURN
                                               * 07900003*     R4 = ACTU
T ON RETURN (MUST INCLUDE MINUS SIGN, IF +
(EXACT NUMER OF BYTES)                 ˇ
ETURNED WITH A FEW LEADING ZEROS                   * 07930003* NEGATIVE
ETURNED WITH MINUS SIGN A POSSIBLE LEADING ZEROES  * 07940003***********
**************************************************** 0ˇ
- DURING PROCESSING                                  * 07960003*     R0
000,000                                              * 07970003*     R1
S TEMPORARY JUNK REGISTER                            * 07980003*     ˇ
TH OF BIGNUM, LENGTH OF BIGNUM - 1                     * 07990003*     R
TER TO BEGINNING OF WORK AREA                          * 08000003*     R
UM POINTER                                             * 08010003*     R
SIZEˇ
PER DIVIDEND REGISTER, REMAINDER AFTER DIVIDE            * 08030003*
WER DIVIDEND REGISTER, QUOTIENT AFTER DIVIDE             * 08040003*
FFSET POINTER WITHIˇ
 CVD RESULT POINTER (LONGBIG ONLY)                         * 08060003***
************************************************************ 08070003
ECT                               ˇ
TM    3(#4),B'00000011'   TEST FOR UNMULTIPLE OF 4             08090003
BNZ   NOMULT4             BIGNUM LENGTH IS NOT MULTIPLE OF 4   08100003
XR    #2,#2               NEED 0 IN HIGH ORDER BYˇ
  ICM   #2,7,1(#4)          GET THREE BYTE LENGTH OF BIGNUM      0812000
  LA    #5,4                BYTE SIZE OF ONE WORD                0813000
  SR    #2,#5               ZERO-ORIGIN THE BIGNUM BYTE-LENGTH  ˇ
    CR    #2,#5               IS BIGNUM TWO WORDS LONG?            08150
    BH    LONGBIG             TWO WORD BIGNUM -NO WORK AREA NEEDED 08160
    BL    SIZEBAD             ****TAKE THIS OUT AFTER DEBUGGING    08170

***** L     #6,8(,#4)           MS WORD INTO LS DIVIDEND             081
      ICM   #6,15,8(#4)         *** DELETE AFTER DEBUGGING           082
      BM    BIˇ
        BZ    BADZERO             *** DELETE AFTER DEBUGGING           0
        CR    #6,#0               MS WORD GREATER THAN BILLION (RARE)? 0
        BNL   BIG2           ˇ
3         CLC   0(12,#4),BADTWO31   IS BIGNUM -2**31 ?
3         BE    BAD31MSG            YES, ISSUE MESSAGE
3         L     #7,4(,#4)           MS WORD ˇ
003         SLL   #7,1                MASH OUT SIGN BIT (31-BIT-RADIX)
003         SRDL  #6,1                SQUEEZE HIGHER WORD DOWN
003         DR    #6,#0               DIVIDE TO GET REMAIND ER
00003ˇÁ
REA        08310003         UNPK  11(9,#3),ZLCDBL+3(5) UNPACK LS 9 DIGIT
           08320003         OI    19(#3),X'F0'        GET RID OF DUMB UN
           08330003 ˇ
 MS 10 DIG   08340003         UNPK  1(10,#3),ZLCDBL+2(6) UNPACK MS 10 DI
0,1,2        08350003         OI    10(#3),X'F0'        GET RID OF DUMB
N            08360003         LR   ˇ
F STRING       08370003         LA    #15,20(,#3)         POINTER PAST E
XT             08380003         B     BIGDONE             GO SCAN FOR LE
ROES           08390003*                          ˇ
                 08400003BIG2     SRDL  #6,32               DIV IN RIGHT
EAR LEFT         08410003         DR    #6,#0               DIVIDE MS WO
LLION            08420003         LR    #15,#7              STOREˇ
N ONLY BE 1 OR 2)  08430003         L     #7,4(,#4)           MS WORD OF
BIGNUM             08440003         SLL   #7,1                MASH OUT S
(31-BIT-RADIX)     08450003         SRDL  #6,1                SQUEEZE HI
ˇ
MAINDER              08470003         CVD   #6,ZLCDBL           PACKED D
NTO WORK AREA        08480003         UNPK  11(9,#3),ZLCDBL+3(5) UNPACK
ITS            ˇ
B UNPK SIGN            08500003         LR    #6,#15
                       08510003         SLL   #7,1                MASH O
BIT (31-BIT-RADIX)     0852000ˇ
ER WORD DOWN             08530003         DR    #6,#0
                         08540003         CVD   #6,ZLCDBL           DECI
UOT. TO GIVE MS 10 DIG   08550003         UNPˇ
IGITS                      08560003         OI    10(#3),X'F0'         G
F DUMB UNPK SIGN           08570003         CR    #7,#5               **
 AFTER DEBUGGING           08580003         BH    DIG19ERR  ˇ
TE AFTER DEBUGGING           08590003         LA    #7,C'0'(,#7)
IT IS 2,3,4, PREP FOR EBCDIC 08600003         STC   #7,1(,#3)
TH DIGIT IN EBCDIC           08610003         LR    #1,#3
R TO BEGINNING TEXT            08620003         LA    #15,20(,#3)
R PAST END OF TEXT             08630003         B     BIGDONE
N FOR LEADING ZEROES           08640003         SPACE 1
          ˇ
                                 08660003         LA    #7,24(#2,#2)
 24 + 2*R2                       08670003         AR    #7,#2
R7 = 24 + 3*R2           +
 IT IS TOO BIG FOR CURRˇ
THEN                                 08700003         ICM   #1,15,ZLCDWA
 GET CURRENT WORKAREA ADDRESS        08710003         BZ    NOFREE
 IF NONE, SKIP FREEMAIN              0ˇ
   GET LENGTH OF CURRENT WORKAREA      08730003         FREEMAIN R,LV=(0
   FREE IT                             08740003NOFREE   DS    0H
  NOW PREPARE TO GET A BIGGER ONE      08750003******ˇ
    ROUND (DOWN) TO DOUBLEWORD BOUNDARY  08760003         N     #7,=X'FF
    (IT'S ALREADY >=4 MORE THAN WE NEED) 08770003         #GETMAIN RC,LV
C=BELOW GET NEW WORKAREA                 08780003         LTR   #15,ˇ
      IF STORAGE NOT AVAILABLE             08790003         BNZ   ERROR2
      THEN ERROR                           08800003         ST    #7,ZLC
      SAVE NEW WORKAREA LENGTH             08810003         ST    #1,ZLC
   ˇ
        OK, GET WORKAREA ADDRESS             08830003         LCR   #5,#
        GENERATE -4                          08840003         L     #0,=
0000'   ONE BILLIOˇ
                                               08860003         LR    #1
          START AT NEXT LEAST SIG WORD         08870003         LA    #1
          PREP TO COPY WHOLE LENGˇ
DAT(,#4)    START AT LEAST SIGNFICANT WORD       08890003         LR
            LENGTH OF BIGNUM                     08900003         MVCL
            MOVE BIGNUM TO WORK AREA            ˇ
              THE SIGN WILL GET SQUEEZED OUT       08920003*
                                                   08930003         L
DWALN         GET LENGTH OF WORKAREA               08940003    ˇ
3               POINT PAST END OF WORKAREA           08950003         AR
5               #2 IS 8 LESS THAN DIVIDEND LENGTH    08960003         LR
#1              SAVE POINTER PAST END OF WORKAREA    08970003*
                                                       08980003CVDLOOP
4,4(,#2)          #14 SHOULD ONLY BE 4 LESS THAN LEN   08990003
,9                WE DO 9 DECIMAL DIGITS AT A TIME     09000003
,#6          ˇ
                                                         09020003
#6,0(#14,#3)        GET MS WORD OF DIVIDEND              09030003
#6,#6               *** DELEˇ
  BIGBAD              *** DELETE AFTER DEBUGGING           09050003
  BADZERO             *** DELETE AFTER DEBUGGING           09060003
  #6,#0               LESS THAN A BILLION?                  09070003ˇÁ

003         SRDL  #6,32               NOP, PUT IT IN #7 AND CLEAR #6
003         DR    #6,#0               DIVIDE BY A BILLION
003 ˇ
10003         SR    #2,#5               BUMP UP SO IT'S SAME AFTER BXH
20003*
30003NODIV    DS   ˇ
9140003         AR    #14,#5              DECREMENT TO NEXT DIVIDEND WOR
9150003*
9160003DIVLOOP  L     #7,0(#14,#3)ˇ
 09170003         SLL   #7,1                MASH OUT SIGN BIT
 09180003         SRDL  #6,1                MASH BOTH WORDS RIGHT
 09190003         DR    #6,#0               DIVIDˇ
   09200003         ST    #7,0(#14,#3)        STORE QUOTIENT IN SAME PLA
   09210003         BXH   #14,#5,DIVLOOP      DO WE HAVE ANOTHER DIVIDEN
   09220003*                                                    ˇ
     09230003         CVD   #6,ZLCDBL           CONVERT REMAINDER TO GEN
S    09240003         UNPK  0(9,#1),ZLCDBL+3(5) UNPACK INTO EBCDIC
     09250003         OI    8(#1),X'F0'         STAMP OUT DUMB SIGN CODE

S?     09270003*
       09280003         LA    #6,11               ROOM FOR 10 DIGITS AND
       0929000ˇ
OUNT     09300003*
         09310003         CVD   #7,ZLCDBL           LAST ONE, SIMPLY CVD
T        09320003         UNPˇ
           09330003         OI    10(#1),X'F0'        STAMP OUT DUMB SIG
           09340003*
           09350003******** B     BIGDONE   ˇ
ES           09360003         SPACE 1
             09370003BIGDONE  DS    0H                  OK, NOW CHOP OFF
 ZEROES      09380003*                                  #1 ˇ
D'D STRING     09390003*                                  #15 POINT PAST
STRING         09400003LZLOOP   CLI   1(#1),C'0'          IS IT A ZERO C
?              09410003         BNE   GOTFNZ              NOP, WE GOT TH
T REAL DIGIT     09420003         LA    #1,1(,#1)           BUMP UP THE
                 09430003         B     LZLOOP              GO BACK AND
HIS IS ZERO      09440003GOTFNZ   DS    0H
         +
 THE BIˇ
                     09470003         MVI   0(#1),C'-'          IT'S MIN
IN THE MINUS SIGN    09480003         LR    #0,#15              POINTER
 OF STRING           0ˇ
NING TO GET LENGTH     09500003         B     RETURN
                       09510003BNOTM    DS    0H
                       09520003      ˇ
 END OF STRING           09530003         LA    #1,1(,#1)           NO S
P UP BEGINNING POINTER   09540003         SR    #0,#1               SUBT
INNING TO GET LENGTH     09550003         B     RETUˇ
                           09560003         SPACE 1
                           09570003*************************************
************************** 09580003         EJECT                  ˇ
                             09590003NOTBIG   DS    0H
 A BIGNUM...                 09600003         SPACE 1
                             09610003         TM    ##TYPE(#4),##VEC
ISˇ
R, FUNARG OR STRUCTURE), ERROR 09630003*
ONE OF THE ABOVE               09640003         LA    #1,DUMPUNK
TO UNKNOWN-OBJECTˇ
LENGTH                           09660003         B     RETURN
                                 09670003         EJECT
                                ˇ
ASHIFY OR COPY A STRING            09690003         SPACE 1
                                   09700003         #BAS  #14,GETSLWA
T SLASHIFICATION WORK AREA         09710003    ˇ
IF SLASHIFICATION NOT REQUESTED      09720003         BZ    STRCOPY
THEN JUST DO STRING COPY             09730003*
ELSE SLASHIFY THE STRING             09740003         MVI   0(ˇ
  START OUT WITH A DOUBLE QUOTE        09750003         LA    #14,1(,#3)
  BUMP OUTPUT POINTER                  09760003         LTR   #7,#7
  GET LENGTH OF STRING DATA            09770003         BZ    SLSTREND
    SKIP DUMP IF NULL STRING             09780003         LA    #15,##VE
)   POINT TO PRINT NAME TEXT             09790003SLSTRLOP DS    0H
                                         09800003         CLI   0(#15),C
    IF THIS ˇ
       SLASHED BECAUSE IT IS A             09820003         CLI   0(#15)
        DOUBLE QUOTE OR A BACKSLASH,       09830003         BNE   SLSTRN
         THEN...                            09840003ˇÁ
  0(#14),C'\'          ADD A BACKSLASH (SINGLE ESCAPE)     09850003
  #14,1(,#14)          AND BUMP OUTPUT POINTER             09860003SLSTR
  0(1,#14),0(#15)     MOVE STRING CHARACTER                09870003 ˇ
    #14,1(,#14)         BUMP OUTPUT POINTER                  09880003
    #15,1(,#15)         BUMP INPUT POINTER                   09890003
T   #7,SLSTRLOP         CONTINUE UNTIL STRING LENGTH ZERO    09900003SLS
   ˇ
MVI   0(#14),C'"'         END UP WITH A DOUBLE QUOTE           09920003
LR    #1,#3               GET POINTER TO START OF OUTPUT TEXT  09930003
LA    #0,1(,#14)  ˇ
  SR    #0,#1               DIFFERENCE GIVES LENGTH OF TEXT      0995000
  B     RETURN                                                   0996000
  EJECT                          ˇ
BOL DS    0H                  SLASHIFY OR COPY A SYMBOL            09980
    SPACE 1                                                        09990
    L     #2,##PNAME(,#2)     GET PRINT NAME OF ˇ
      LA    #2,0(,#2)           CLEAR HIGH ORDER BITS                100
      #BAS  #14,GETSLWA         GET SLASHIFICATION WORK AREA         100
      TM    ZLCDFLGS,ZLCDSLSH   IF SLASHIFICATION NOT REQUESTEDˇ
        BZ    STRCOPY             THEN JUST DO SYMBOL COPY             1
                                  ELSE SLASHIFY THE STRING             1
                                                                       1
3* SLASHIFY THE ATOM TEXT.  POTENTIALLY PUT VERTICAL BARS AROUND IT.
3*
3         LTR   #7,#7               CHECK LENGTH OF PRINT NAME
3         BZ ˇ
003         LA    #14,##VECDAT(,#4)   POINT TO BEGINNING OF STRING TEXT
003         LR    #15,#7              GET SYMBOL PRINT NAME LENGTH
003         LA    #5,256    ˇ
30003SCANLOOP DS    0H
40003         CR    #15,#5              IF LENGTH IS 256 OR LESS
50003         BNH   DOTRT               THEˇ
0160003         TRT   0(256,#14),SYMTR0   ELSE SCAN FIRST 256 CHARACTERS
0170003         BNZ   SLSYM               IF WE GOT ANY, PREPARE TO SLAS
0180003         SR    #15,#5              BUMP LENGTH DOWNˇ
 10190003         BNP   TRTCHAR1            IF ALL SCANNED OK, GO CK 1ST
 10200003         LA    #14,256(,#14)       BUMP UP POINTER TO DATA TO S
 10210003         B     SCANLOOP
   10220003DOTRT    DS    0H                                           ˇ
     10230003         BCTR  #15,0               REDUCE LENGTH FOR EXECUT
     10240003         EX    #15,SYMTR           SCAN FOR FUNNY CHARACTER
     10250003         BNZ   SLSYM               IF WE GOT ANY, PREPARE T
FY   1ˇ
       10270003         TRT   ##VECDAT(1,#4),SYMTR1 SCAN FIRST CHAR FOR
S      10280003         BZ    NOSLSYM             IF NOT FUNNY, NO NEED
IFY    10290003* AT Tˇ
RIC.     10300003* IF THIS IS STILL OK, WE MAY NOT HAVE TO SLASHIFY.
         10310003         CH    #7,=H'1'            IF LENGTH OF ATOM IS
         10320003         BH    CHECˇ
           10330003         CLI   ##VECDAT(#4),C'0'    IF OFFENDING 1ST/
R NUMERIC  10340003         BNL   SLSYM                 OR
           10350003         CLI   ##VECDAT(#4),C'.'ˇ
             10360003         BE    SLSYM                   THEN WE MUST
Y            10370003         B     NOSLSYM              ELSE NO NEED TO
Y            10380003CHECK$   DS    0H                  ELSE LENGTˇ
EATER THAN 1   10390003         CLI   ##VECDAT(#4),C'$'   IF STARTS WITH
               10400003         BNE   SL1NOT$             THEN...
               10410003         CLI   ##VECDAT+1(#4),C'$' IF STARTS WITH
 ˇ
                 10430003         B     NOSLSYM             ELSE $X, DON
TO SLASHIFY      10440003SL1NOT$  DS    0H
                ˇ
SLASHIFY           10460003         BE    NOSLSYM
                   10470003         CLI   ##VECDAT+1(#4),C'-' IF _-, NO
SLASHIFY           10480003    ˇ
                     10490003SLSYM    DS    0H                  SLASHIFY
BOL PRINT NAME       10500003         MVI   0(#3),C'◊'          START OU
 DOUBLE ESCAPE       10510003         LA    #1ˇ
INTER                  10520003         LTR   #7,#7               GET LE
STRING DATA            10530003         BZ    SLSYMEND            SKIP D
ULL PRINT NAME         10540003         LA    #15,##VECDAT(,#ˇ
NT NAME TEXT             10550003SLSYMLOP DS    0H
                         10560003         CLI   0(#15),C'◊'         IF T
ACTER NEEDS TO BE        10570003         BE    SLSYMBS              SLA
ECAUSE IT IS A             10580003         CLI   0(#15),C'\'
R SINGLE ESCAPE,           10590003         BNE   SLSYMNS
                           10600003SLSYMBS  MVI   0(#14),C'\'          A
KSLASH (SIN GLE ESCAPE)     10610003ˇÁ
       AND BUMP OUTPUT POINTER             10620003SLSYMNS  MVC   0(1,#1
)     MOVE PRINT NAME CHARACTER            10630003         LA    #14,1(
      BUMP OUTPUT POINTER                  10640003 ˇ
        BUMP INPUT POINTER                   10650003         BCT   #7,S
        CONTINUE TILL PRINT NAME LENGTH ZERO 10660003SLSYMEND DS    0H
                                             10670003         MVI  ˇ
'         END UP WITH A DOUBLE ESCAPE          10680003         LR    #1
          GET POINTER TO START OF OUTPUT TEXT  10690003         LA    #0
          GET POINTER TO END OF OUTPUT TEXT    10700003         SR    #0
  ˇ
                                                 10720003         SPACE
                                                 10730003NOSLSYM  DS
            STRINˇ
                                                   10750003         LA
ECDAT(,#4)    POINT TO STRING TEXT                 10760003         XR
                                ˇ
,1(#4)          GET STRING LENGTH                    10780003         B
RN                                                   10790003         SP
                                               ˇ
*-*,#14),SYMTR0   SCAN SYMBOL PRINT NAME               10810003
                                                       10820003STRCOPY
                  COPY STRING OR SYMBOL PRINT NAME     1083000ˇ
1                                                        10840003
#14,##VECDAT(,#4)   SOURCE ADDRESS = STRING TEXT         10850003
#15,#15                                                  10860003
  #15,7,1(#4)         SOURCE LENGTH = STRING TEXT LEN      10870003
  #0,#3               DESTINATION ADDRESS = SL WORK AREA   10880003
  #1,#15              DESTINATION LENGTH = STRING TEXT LEN 10890003
  #0,#14    ˇ
    #1,#3               GET POINTER TO START OF OUTPUT TEXT  10910003
    #0,#1               COMPUTE LENGTH OF OUTPUT TEXT        10920003
    RETURN                 ˇ
EJECT                                                          10940003G
DS    0H                                                       10950003
SPACE 1                                   ˇ
**************************************************************** 1097000
                                                               * 1098000
ROUTINE INSURES A WORKAREA FOR THE STRING POINTED TO BY #+
 ADDRESS OF THE WORKAREA IS RETURNED IN #3 AND THE LENGˇ
HE INPUT STRING IS IN #7.  THE ADDRESS OF THE INPUT STRING IS      * 110
UT IN #4.                                                          * 110
                                                                   * 1ˇ
********************************************************************** 1
        SPACE 1                                                        1
        LR    #4,#2               GET STRING ADDRESS                   1
     ˇ
3         ICM   #7,7,1(#4)          GET STRING LENGTH
3         LR    #6,#7               COMPUTE MAXIMUM LENGTH OF
3         SLA   #6,2ˇ
003         LA    #6,2(,#6)             (2 * LENGTH) + 2
003         C     #6,ZLCDWALN         IF LENGTH NOT AVAILABLE
003         BNH   SLWALOK          ˇ
30003         ICM   #1,15,ZLCDWA         GET CURRENT WORKAREA ADDRESS
40003         BZ    NOSLFREE             IF NONE, SKIP FREEMAIN
50003         L     #0,ZLCDWALN          GET LENGTˇ
1160003         FREEMAIN R,LV=(0),A=(1)    FREE IT
1170003NOSLFREE DS    0H                  NOW PREPARE TO GET A BIGGER ON
1180003         LA    #6,7(,#6)           ROUND UP TO DOUBLEWORD ˇ
 11190003         N     #6,=X'FFFFFFF8'
 11200003         #GETMAIN RC,LV=(#6),LOC=BELOW GET NEW WORKAREA
 11210003         LTR   #15,#15             IF STORAGE NOT AVAILABLE
ˇ
   11230003         ST    #6,ZLCDWALN         SAVE NEW WORKAREA LENGTH
   11240003         ST    #1,ZLCDWA           SAVE NEW WORKAREA ADDRESS
   11250003SLWAˇ
     11260003         BR    #14
     11270003         EJECT
     11280003RETURN   DS    0Hˇ
       11290003*
       11300003* AT THIS POINT #1 POINTS TO THE TEXT TO BE RETURNED, #0
ENGTH  11310003*                             ˇ
         11320003         NI    ZLCDFLGS,255-ZLCDCOPY-ZLCDSLSH  TURN OFF
         11330003         LM    #2,#7,ADMPSAVE+24   RESTORE REGISTERS
         11340003         LM    #12,#15,ADMPSAVE    RESTORE ˇ
           11350003         BR    #14                 RETURN TO CALLER
           11360003         EJECT
           11370003BAD31MSG DS    0H                  ILLEGAL BIGNUM DET
-2**31       11380003ˇÁ
 A FIXNUM                  11390003         SPACE 2
                           11400003ERROR0   DS    0H                  ER
LIST                       11410003 ˇ
                             11420003         SPACE 2
                             11430003ERRORV   DS    0H
A VECTOR                     11440003         DMPERˇ
                               11450003         SPACE 2
                               11460003ERROR2   DS    0H
- NOT ENOUGH MEMORY            11470003         XR    #0,#0       ˇ
R WORK AREA FIELDS               11480003         ST    #0,ZLCDWA
HAT NEXT ATTEMPT GETS NEW W/A    11490003         ST    #0,ZLCDWALN
                                 11500003         DMPER ERR2202
 ˇ
                                   11520003ERROR8   DS    0H
ROR - NOT ENOUGH MEMORY            11530003         XR    #0,#0
EAR WORK AREA FIˇ
SO THAT NEXT ATTEMPT GETS NEW W/A    11550003         ST    #0,ZLCDWALN
                                     11560003         DMPER ERR2208
                               ˇ
                                       11580003NOMULT4  DS    0H
  BUG - BIGNUM LENGTH IS NOT MULTIPLE  11590003         DMPER ERR2210
  OF 4                                 1160000ˇ
                                         11610003SIZEBAD  DS    0H
    BUG - BIGNUM LENGTH LESS THAN 2      11620003         DMPER ERR2203
                                         11630003         SPAˇ
                                           11640003DIG19ERR DS    0H
      BUG - 1ST DD OF 2WD BIG > 4Q         11650003         DMPER ERR220
                                           11660003         SPACE 2
                                             11670003BIGBAD   DS    0H
        BUG - WORD OTHER THAN LSW NOT +      11680003         DMPER ERR2
                                             11690003         SPACE 2
           ˇ
          BUG - WORD OTHER THAN LSW NOT +      11710003         DMPER ER
                                               11720003         SPACE 2
                          ˇ
            BUG - FLONUM FRACTIONAL PART BAD     11740003         DMPER
                                                 11750003         SPACE
                                         +
                                       ˇ
FLGS,ZLCPRINT   IF CALLED BY ZILPRIN                 11780003         BZ
OR              THEN...                              11790003         #T
),(0)            DISPLAY ERROR MESSAGE               1ˇ
,DUMPERR           POINT TO ERROR-OBJECT IDENTIFIER    11810003
,L'DUMPERR         SET LENGTH                          11820003
TURN               RETURN WITH UNKNOWN OBJECT          11830003ZERRORˇ
#15,ZLCERR          ELSE ERROR OUT                       11840003
#15                 BY BRANCHING TO ZILERR               11850003
2                                                        11860003ADMPSAV
12A ˇ
E                                                          11880003ATOMA
  CL64                AREA TO DUMP NON-STRING ATOMS        11890003
E                  ˇ
    C'#<?>'             HOW TO DUMP UNKNOWN ATOMS            11910003DUM
    C'#<ERROR>'         HOW TO DUMP ERRORS                   11920003
ACE                               ˇ
DC    X'F02020202020202020202020'  PATTERN MASK FOR EDITS      11940003N
DS    CL12                TEMP TO HOLD CONVERTED NUMBER        11950003D
DS    CL40                Temp to hold converted ˇ
  SPACE                                                          1197000
  DS    D                   Area for double float conversions    1198000
  SPACE                                                         ˇ
0   DC    256YL1(0)           TABLE TO SCAN FOR SLASHIFIABILITY    12000
    ORG   SYMTR0+C' '                                              12010
    DC    YL1(1)              INVALID - MUST BE SLASHED            12020

      DC    YL1(1)              INVALID - MUST BE SLASHED            120
      ORG   SYMTR0+C'`'                                              120
      DC    YLˇ
        ORG   SYMTR0+C'◊'                                              1
        DC    YL1(1)              INVALID - MUST BE SLASHED            1
        ORG   SYMTR0+C'#'    ˇ
3         DC    YL1(1)              INVALID - MUST BE SLASHED
3         ORG   SYMTR0+C'('
3         DC    YL1(1)              INVALID ˇ
003         ORG   SYMTR0+C')'
003         DC    YL1(1)              INVALID - MUST BE SLASHED
003         ORG   SYMTR0+C'\'                              
50003ˇÁ
           12160003         ORG   SYMTR0+C';'
           12170003         DC    YL1(1)              INVALID - MUST BE
           12180003 ˇ
             12190003         DC    YL1(1)              INVALID - MUST B
D            12200003         ORG   SYMTR0+C''''
             12210003         DC   ˇ
HED            12220003         ORG   SYMTR0+C'÷'
               12230003         DC    YL1(1)              INVALID - MUST
HED            12240003*                          ˇ
                 12250003* The following 2 table entries are to be activ
n                12260003* packages and rationals (respectively) are imp
.                12270003*                                       ˇ
                   12280003*        ORG   SYMTR0+C':'         (for packa
                   12290003*        DC    YL1(1)              INVALID -
SLASHED            12300003*        ORG   SYMTR0+C'/'         (for ratio
ˇ
E SLASHED            12320003*
                     12330003         ORG   SYMTR0+C'A'-X'40'
               ˇ
 BE SLASHED            12350003         ORG   SYMTR0+C'J'-X'40'
                       12360003         DC    9YL1(1)             INVALI
 BE SLASHED            1237000ˇ
                         12380003         DC    8YL1(1)             INVA
ST BE SLASHED            12390003         ORG
                         12400003         SPAˇ
                           12410003SYMTR1   DC    256YL1(0)           TR
TABLE TO SCAN FOR FIRST CH 12420003         ORG   SYMTR1+C'+'
                           12430003         DC    1YL1(1)   ˇ
ITH PLUS SIGN - SUSPICIOUS   12440003         ORG   SYMTR1+C'-'
                             12450003         DC    1YL1(1)
ITH MINUS SIGN - SUSPICIOUS  12460003         ORG   SYMTR1+C'.'
                               12470003         DC    1YL1(1)
 WITH PERIOD - SUSPICIOUS      12480003         ORG   SYMTR1+C'$'
                               12490003         DC    1YL1(1)
 WITH DOLLˇ
                                 12510003         DC    10YL1(1)
NS WITH NUMERIC - SUSPICIOUS     12520003         ORG
                         +
                       ˇ
,X'80000000',F'1'                    12550003         SPACE
                                     12560003FRMASK   DS    0F
                                     1ˇ
  40xxxxxx                             12580003         DC    X'0000000F
  3Fxxxxx0                             12590003         DC    X'000000FF
  3Exxxx00                             12600003      ˇ
    3Dxxx000                             12610003         DC    X'0000FF
    3Cxx0000                             12620003         DC    X'000FFF
    3Bx00000                             12630003         SPACE 1   ˇ
                                           12640003DFRMASK  DS    0F
                                           12650003         DC    X'0000
0000' 40xxxxxx xxxxxxxx                    12660003         DC    X'0000
000ˇ
0000FF' 3Exxxxxx xxxxxx00                    12680003         DC    X'00
000FFF' 3Dxxxxxx xxxxx000                    12690003         DC    X'00
00FFFF' 3Cxxxxxx xˇ
000FFFFF' 3Bxxxxxx xxx00000                    12710003         DC    X'
00FFFFFF' 3Axxxxxx xx000000                    12720003         DC    X'
0FFFFFFF' 39xxxxxx x0000000      ˇ
00FFFFFFFF' 38xxxxxx 00000000                    12740003         DC
0FFFFFFFFF' 37xxxxx0 00000000                    12750003         DC
FFFFFFFFFF' 36xxxx00 00000000                   ˇ
0FFFFFFFFFFF' 35xxx000 00000000                    12770003         DC
FFFFFFFFFFFF' 34xx0000 00000000                    12780003         DC
FFFFFFFFFFFF' 33x00000 00000000                    12790003    ˇ
                                                     12800003         LT
                                                     12810003         SP
                                                     12820003ERR2200  DC
ZIL2200 ZILADMP: OBJECT TO BE DUMPED IS A LIST, NOT ANX12830003
TOM.'                                                  12840003ERR2201
ZIL2201 ZILADMP: OBJECT TO BE DUMPED IS A VECTOR, FUNAX12850003
 (LEXICAL CLOˇ
C'ZIL2202 ZILADMP: NOT ENOUGH MEMORY TO DUMP BIGNUM.'    12870003ERR2203
C'ZIL2203 ZILADMP: BIGNUM LENGTH LESS THAN 2 WORDS.'     12880003ERR2204
C'ZIL2204 ZILADMP: SEVERE LOˇ
  '                                                        12900003ERR22
  C'ZIL2205 ZILADMP: A WORD OTHER THAN THE LEAST SIGNIFICAX12910003
  NT WORD OF A BIGNUM IS NEGATIVE.'                         12920003ˇÁ

003                IS ZERO (I.E. NOT NORMALIZED).'
003ERR2208  DC    C'ZIL2208 ZILADMP: NOT ENOUGH MEMORY TO DUMP STRING TE
003 ˇ
60003ERR2209  DC    C'ZIL2209 ZILADMP: THE MOST NEGATIVE FIXNUM, -2**31,
70003                REPRESENTED AS A BIGNUM - SERIOUS BUG, PLEASE REPOR
80003ERR2210  DC   ˇ
2990003ERR2211  DC    C'ZIL2211 ZILADMP: INTERNAL ERROR FORMATTING FLONU
3000003         SPACE
3010003         END               Ñ
 13020003
ATION ROUTINES'            00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00017002* THIS SUBROUTINE HANDLES REQUEST
SSEMBLER LANGUAGE PROGRAMS   * 00018002* FOR BIGNUM SPACE.        ˇ
                               * 00019002*
                               * 00020002* THIS ROUTINE PERFORMS THE FOL
UNCTIONS:                      * 00030002*
 ˇ
RESENT IN VECTOR/STRING SPACE.   * 00050002*  IF NOT, FORCES A GARBAGE C
N AND RECHECKS.                  * 00060002*
                ˇ
 TYPE BITS ONLY.                   * 00080002*
                                   * 00090002*  THIS ROUTINE DOES NOT FI
Y OF THE REST OF THE BIGNUM AREˇ
USED-VSS POINTER.  IT IS THE         * 00110002*  RESPONSIBILITY OF THE
O FILL IN THE LENGTH AND SET THE     * 00120002*  "ZLCVSNXT" FIELD AS SO
E TRUE LENGTH IS KNOWN.  THIS ALSO   * 0013000ˇ
NITY OF USING THE BIGNUM AREA AS A     * 00140002*  TEMPORARY WORK AREA
LL NEVER BECOME A PERMANENT OBJECT.    * 00150002*
                                       * 00160002*  THIS ROUTˇ
N ERROR IF NO SPACE IS AVAILABLE TO      * 00170002*  BUILD THE BIGNUM.
ED, NO VALIDITY CHECKING OF THE INPUT    * 00180002*  IS DONE.
                                         * 00190002*
                                           * 00200002*  ON ENTRY:
                                           * 00210002*
                                           * 00220002*  REGISTER 0 POINT
 CURRENT STˇ
.                                            * 00240002*  REGISTER 2 CON
E LENGTH IN BYTES OF THE BIGNUM SPACE.       * 00250002*             THA
ES THE 4-BYTE HEADER!!!   ˇ
RE MUST ALLOW FOR THE MAXIMUM POSSIBLE SPACE   * 00270002*             T
BIGNUM MAY OCCUPY (THERE IS NO "SLUSH FUND").  * 00280002*
                                         +
5 HAVE THEIR STEREOTYPICAL VALUES ON ENˇ
                                                   * 00310002*  ON RETUR
                                                   * 00320002*
                                                   * 0ˇ
INTS TO THE HEADER OF THE BIGNUM OBJECT, WHICH HAS   * 00340002*
E BIGNUM TYPE BITS SET AND NOTHING ELSE.             * 00350002*
                                                     * 00360002*  THIˇ
 CLOBBERS REGISTERS 1 AND 4.  HOWEVER, REGISTERS       * 00370002*  0 AN
THE SAME UPON RETURN.                                  * 00380002*
                                                       * 00390002*******
****ˇ
E 1                                                        00410002ZILBI
T                                                          00420002
E 1                ˇ
    #4,#15                                                   00440002
ING ZILBIG,#4                                                00450002
ING ZLCOMMON,#13                  ˇ
SPACE 1                                                        00470002R
DS    0H                                                       00480002
L     #1,ZLCVSADR         GET ADDRESS OF V/S SPACˇ
  L     #15,ZLCVSNXT        GET ADDRESS OF AVAILABLE SLOT        0050000
  A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO END OF SPACE  0051000
  SR    #1,#15              GET LENGTH OF SPACE NOW AVAILABLE   ˇ
    CR    #2,#1               IF SPACE REQUESTED IS LARGER         00530
    BH    ZBIGGC              THEN GO TO GC AND RETRY. ELSE        00540
    DS    0H                                                       00550

      BR    #14                 RETURN TO CALLER                     005
      SPACE 1                                                        005
GGC   DS    0Hˇ
        SPACE 1                                                        0
********************************************************************** 0
                             ˇ
2* THIS ROUTINE IS EXECUTED WHEN THERE ISN'T ENOUGH ROOM TO            *
2* PERFORM THE REQUESTED OPERATION AND A GARBAGE COLLECTION IS TO      *
2* BE ATTEMPTED SO THAT ENOUGH ROOM WILL BE ˇ
002*
002*********************************************************************
002         SPACE 1                                        
80002ˇÁ
           00690002*
           00700002* NOW DO SOME DUMMY CONS TO FORCE A GARBAGE COLLECTIO
UR.        00710002*ˇ
             00720002         STM   #14,#2,ZBIGSAVE     SAVE VOLATILE RE
             00730002         LR    #1,#10              SET CONS ARG 1 T
AR-TO-BE)    00740002         LR   ˇ
(CAR-TO-BE)    00750002         L     #15,ZLCCONS         GET ADDRESS OF
               00760002         #BASR #14,#15             CALL CONS TO D
E COLLECTION   00770002         LM    #14,#2,ZBIGSˇ
S                00780002*
                 00790002* START OVER...
                 00800002*                                       ˇ
                   00810002         L     #1,ZLCVSADR         GET ADDRES
 SPACE             00820002         L     #15,ZLCVSNXT        GET ADDRES
ILABLE SLOT        00830002         A     #1,ZLCVSLEN         ADD LENGTH
ˇ
ACE NOW AVAILABLE    00850002         CR    #2,#1               IF SPACE
ED IS LARGER         00860002         BNH   DOIT                THEN FAI
WE GOT IT, GO Tˇ
                       00880002         #ERR  'ZIL3101 ZILBIG: No vector
space available for biX00890002               gnum.',PREFIX=NO
                       0090000ˇ
                         00910002ZBIGSAVE DS    5A                  SAVE
ROSS GC                  00920002         SPACE 1
                         00930002         LTOˇ
                           00940002         SPACE 1
                           00950002         #ZEQU ,
                           00960002         SPACE 1         V
                             00970002         #ZCOM ,
                             00980002         END
                             00990002
ILBOOL - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

                                                           00017002* ZIL
ES 3 INTEGER ARGUMENTS. CURRENTLY THEY MUST BE FIXNUMS.    00018002*
              ˇ
************************************************************ 00020002ZIL
BEG MINARGS=3,MAXARGS=3,NAME='ZILBOOL'                       00030002
PDS 3*4+12+0 (= 24)     DEFINˇ
#ZSAV ,                   SAVE REGISTERS                       00050002
SPACE                                                          00060002
LM    #5,#7,0(#11)        LOAD ARGUMENTS    ˇ
  CLI   ##TYPE(#5),##FIXNUM FIRST ARGUMENT MUST BE A FIXNUM      0008000
  BNE   ERROR1                                                   0009000
  CLI   ##TYPE(#6),##FIXNUM SECOND ARGUMENT MUST BE A FIXNUˇ
    BNE   ERROR2                                                   00110
    CLI   ##TYPE(#7),##FIXNUM THIRD ARGUMENT MUST BE A FIXNUM      00120
    BNE   ERROR3                                                   00130
      ICM   #14,15,##CDR(#5)    GET VALUE OF ARG1                    001
      BM    ERROR1              IF LESS THAN ZERO, ERROR             001
      CH    #14,=H'15'          IF GREATER THAN 15, ERROR            001
      BH ˇ
        SLA   #14,2               CONVERT TO BRANCH INDEX              0
        B     GO(#14)                                                  0
O       DS    0H        ˇ
2         B     BOOLE0
2         B     BOOLE1
2         B     BOOLE2                 ˇ
002         B     BOOLE3
002         B     BOOLE4
002         B     BOOLE5                              ˇ
60002         B     BOOLE6
70002         B     BOOLE7
80002         B     BOOLE8                                           +
0290002         B     BOOLE9                                       ˇ
 00300002         B     BOOLE10
 00310002         B     BOOLE11
 00320002         B     BOOLE12
 0ˇ
   00340002         B     BOOLE14
   00350002         B     BOOLE15
   00360002      ˇ
     00370002BOOLE0   DS    0H                  (BOOLE 0 X Y) = 0
     00380002         SPACE 1
     00390002         LA    #15,ˇ
       00400002         B     RETURN
       00410002         SPACE 1
       00420002BOOLE1   DS    0H               ˇ
         00430002         SPACE 1
         00440002         L     #2,##CDR(,#6)       GET VALUE 1
         00450002         N     #2,##CDR(,#7)       DO LOGICALˇ
2          00460002         B     MAKEIT              GO MAKE A FIXNUM
           00470002         SPACE 1
           00480002BOOLE2   DS    0H                  (BOOLE 2 X Y) =
             00490002*                                   (LOGAND (LOGNOT
             00500002         SPACE 1
             00510002         L     #2,##CDR(,#6)       GET VALUE 1
            ˇ
E 1            00530002         N     #2,##CDR(,#7)       DO LOGICAL AND
LUE 2          00540002         B     MAKEIT              GO MAKE A FIXN
               00550002    ˇ
                 00560002BOOLE3   DS    0H                  (BOOLE 3 X Y
                 00570002         SPACE 1
                 00580002         LR    #1ˇ
                   00590002         B     RETURN
                   00600002         SPACE 1
                   00610002BOOLE4   DS    0H             ˇ
                     00620002*                                   (LOGAND
OT Y))               00630002         SPACE 1
                     00640002         L     #2,##CDR(,#7)       GET VALU
                       00650002         X     #2,NOT              DO LOG
 OF VALUE 2            00660002         N     #2,##CDR(,#6)       DO LOG
 WITH VALUE 1          00670002         B     MAKEIT              GO MAK
UM                      00680002ˇÁ
                                       00690002BOOLE5   DS    0H
  (BOOLE 5 X Y) = X                    00700002         SPACE 1
                                       00710002 ˇ
    GET ARG 1                            00720002         B     RETURN
                                         00730002         SPACE 1
                                         00740002BOOLE6   DS   ˇ
      (BOOLE 6 X Y) = (LOGXOR X Y)         00750002         SPACE 1
                                           00760002         L     #2,##C
      GET VALUE 1                          00770002         X     #2,##C
)       DO LOGICAL XOR WITH VALUE 2          00780002         B     MAKE
        GO MAKE A FIXNUM                     00790002         SPACE 1
                                             00800002BOOLE7   DS    0H
        (BOOLˇ
                                               00820002         L     #2
#6)       GET VALUE 1                          00830002         O     #2
#7)       DO LOGICAL OR WITHˇ
            GO MAKE A FIXNUM                     00850002         SPACE
                                                 00860002BOOLE8   DS
            (BOOLE 8 X Y) =                ˇ
               (LOGNOT (LOGIOR X Y))               00880002         SPAC
                                                   00890002         L
DR(,#6)       GET VALUE 1                          0090000ˇ
#CDR(,#7)       DO LOGICAL OR WITH VALUE 2           00910002         X
OT              DO LOGICAL NOT                       00920002         B
IT              GO MAKE A FIXNUM                     00930002         SP
                                                       00940002BOOLE9
                  (BOOLE 9 X Y) =                      00950002*
                   (LOGNOT (LOGXOR X Y))               00960002
        ˇ
#2,##CDR(,#6)       GET VALUE 1                          00980002
#2,##CDR(,#7)       DO LOGICAL XOR WITH VALUE 2          00990002
#2,NOT              DO ˇ
  MAKEIT              GO MAKE A FIXNUM                     01010002
E 1                                                        01020002BOOLE
  0H                  (BOOLE 10 X Y) =ˇ
ACE 1                                                        01040002
    #2,##CDR(,#6)       GET VALUE 1                          01050002
    #2,NOT              DO LOGICAL NOT               +
B     MAKEIT              GO MAKE A FIXNUM         ˇ
  SPACE 1                                                        0108000
  DS    0H                  (BOOLE 11 X Y) =                     0109000
                             (LOGIOR (LOGNOT X) Y)               0ˇ
    SPACE 1                                                        01110
    L     #2,##CDR(,#6)       GET VALUE 1                          01120
    X     #2,NOT              DO LOGICAL NOT OF VALUE 1            01130
 ˇ
      B     MAKEIT              GO MAKE A FIXNUM                     011
      SPACE 1                                                        011
LE12  DS    0H  ˇ
        SPACE 1                                                        0
        L     #2,##CDR(,#7)       GET VALUE 2                          0
        X     #2,NOT           ˇ
2         B     MAKEIT              GO MAKE A FIXNUM
2         SPACE 1
2BOOLE13  DS    0H                  (BOOLE 13 ˇ
002*                                   (LOGIOR X (LOGNOT Y))
002         SPACE 1
002         L     #2,##CDR(,#7)       GET VALUE 2            ˇ
60002         X     #2,NOT              DO LOGICAL NOT
70002         O     #2,##CDR(,#6)       DO LOGICAL OR WITH VALUE 1
80002         B     MAKEIT              GO MAKE A FIXNUM
1290002         SPACE 1
1300002BOOLE14  DS    0H                  (BOOLE 14 X Y) =
1310002*                                   (LOGNOT (LOGAND X Y))
1320002    ˇ
 01330002         L     #2,##CDR(,#6)       GET VALUE 1
 01340002         N     #2,##CDR(,#7)       DO LOGICAL AND WITH VALUE 2
 01350002         X     #2ˇ
   01360002         B     MAKEIT              GO MAKE A FIXNUM
   01370002         SPACE 1
   01380002BOOLE15  DS    0H             ˇ
     01390002         SPACE 1
     01400002         LA    #15,#SFTM1          RETURN CONSTANT FIXNUM -
     01410002         B     RETURN                      ˇ
       01420002         SPACE 1
       01430002         EJECT
       01440002MAKEIT   DS    0H                  OK, #2 CONTAINS RESUL
TURN     01450002ˇÁ
                       01460002         LA    #0,24(,#11)         PASS C
TACK LOCATION TO CONS  01470002         #MKAT FIXED               MAKE A
                       01480002 ˇ
                         01490002RETURN   DS    0H
                         01500002         SPACE 1
                         01510002         #ZRETˇ
                           01520002         SPACE 1
                           01530002NOT      EQU   #SFWM1              HE
FF                         01540002         SPACE 1           ˇ
                             01550002ERROR1   #ERR  'Argument 1 to ZILBO
 fixnum between 0 and 15 - 'X01560002               ,(#5)
                             01570002ERROR2   #ERR  'Argument 2 to ZILBO
 a fixnum - ',(#6)             01580002ERROR3   #ERR  'Argument 3 to ZIL
 a fixnum - ',(#7)             01590002         SPACE 1
                               01600002         LTORG
            `                    01610002         END
                                 01620002
E 'ZILCLOSE - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010000*****
********************************************************** 00011002*
                                                         * 00012002*ˇ
on 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
           All rights reserved.                            * 00014002*
                                                           * 00015002***
***ˇ
                                                             * 00017002*
E TAKES TWO ARGUMENTS - (1) FILE NAME, (2) FIXNUM-MODE.      * 00018002*
                  ˇ
**************************************************************** 0002000
  GBLB  &ZILXA                                                   0003000
  #ZSYS                          ˇ
    SPACE 1                                                        00050
OSE #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILCLOSE'                      00060
    #ZPDS 2*4+12              DEFINE STACK SIZE ˇ
      #ZSAV ARGS=2              SAVE REGISTERS                       000
      SPACE 1                                                        000
      LM    #2,#3,0(#11)        LOAD ARGUMENTS                 ˇ
        TM    ##CDR+##MODEB3(#3),##OUTPUT  If output mode              0
        BO    SETOUT              then go to close output file         0
******* BZ    SETIN               else go to close input file          0
2         SPACE 1
2SETIN    DS    0H                  INDICATE INPUT MODE
2         MVI   DDCHAR,C'I'         SET FILE NAME TO ZILI....
2         L  ˇ
002         B     CHKFILE
002SETOUT   DS    0H                  INDICATE OUTPUT MODE
002         MVI   DDCHAR,C'Oˇ
00002         L     #7,ZLCOFBAD         START SEARCHING INPUT FILE CHAIN
10002******** B     CHKFILE
20002         EJECT                        ˇ
0230002CHKFILE  DS    0H
0240002*
0250002* GET THE FILE NAME.                               ˇ
 00260002*
 00270002         CR    #2,#10              IF FILE NAME IS NIL
 00280002         BE    NILERROR            THEN ERROR - CANNOT CLOSE NI
   00290002         CR    #2,#8               IF FILE NAME IS T        ˇ
     00300002         BE    NILERROR            THEN ERROR - CANNOT CLOS
     00310002         SPACE 1
     00320002NOTNIL   DS    0H
     0ˇ
       00340002         BNE   INVALID             THEN ERROR - INVALID A
       00350002         XR    #4,#4               CLEAR PREVIOUS-FILE-BL
TER    00360002*     ˇ
         00370002* GET THE FILE BLOCK TO CLOSE (RETURNED IN #7).
         00380002*
         00390002         USING ZLFIˇ
           00400002FILLOOP  DS    0H
           00410002         LTR   #7,#7               IF AT END OF FILE
AIN        00420002         BZ    NOTFOUND         ˇ
             00430002         C     #2,ZLFATOM          IF FILE ATOMS AR
             00440002         BE    GOTIT               THEN THIS IS THE
             00450002         LR    #4,#7               ELSE SAVE ˇ
 FILE BLOCK    00460002         L     #7,ZLFCHAIN         GET NEXT FILE
               00470002         B     FILLOOP             AND CONTINUE
               00480002         SPACE 1
 ˇ
EV               00500002         EJECT
                 00510002*
                ˇ
                   00530002*
                   00540002         TM    ZLFFLAG1,ZLFTERM    IF IT'S A
 FILE              00550002    ˇ
 CLOSE               00560002         TM    ZLFFLAG2,ZLFOPEN    IF IT'S
 (SOMEHOW?)          00570002         BZ    NOCLOSE             THEN DON
 CLOSE               00580002         LA    #1ˇ
 DCB FOR FILE          00590002         TM    X'30'(#1),X'10'     IF DCB
T IS NOT ON            00600002         BZ    NOCLOSE             THEN D
UE CLOSE               00610002         ST    #1,CLOSEL      ˇ
S OF DCB                 00620002         MVI   CLOSEL,X'80'        IN C
AMETER LIST              00630002         SPACE 1
                         00640002         CLI   DDCHAR,C'O'         IF A
UT FILE                    00650002         BNE   AFTUNPUT            TH
                           00660002*
                           00670002* IF THERE IS ANY DATA PRINTED TO THE
 LINE THAT  HAS NOT BEEN    00680002ˇÁ
PRI, WRITE OUT THE LINE NOW.               00690002* OTHERWISE BUMP BACK
 POINTER, A LA COBOL, SO THAT A LINE       00700002* OF GARBAGE DOESN'T
TEN OUT.                                   00710002*ˇ
                                             00720002* NOTE: THIS DOESN'
OR RECFM=V FILES - AT LEAST I HAVEN'T        00730002* FIGURED OUT HOW T
T WORK.  SO WE LET THE LAST RECORD           00740002* (HOPEFULLY Aˇ
D) GET WRITTEN OUT IN THAT CASE.               00750002*
                                               00760002         TM    ZL
LFNEWLN   IF NO UNPROCESSED OUTPUT DATA        00770002         BO    NO
  ˇ
,ZLFRECV      THIS IS A RECFM=F FILE             00790002         BO
               THEN                              00800002         L
B+76          TAKˇ
DCB+82          SUBTRACT ONE LRECL                 00820002         ST
DCB+76          RESET CURRENT RECORD POINTER       00830002         B
UT             ELSE             ˇ
                THERE IS UNPROCESSED OUTPUT DATA     00850002         TM
LAG2,ZLFRECV    IF THIS IS A RECFM=V FILE            00860002         BZ
NPUT            THEN                           ˇ
,ZLFCARD           GET ADDRESS OF START OF RECORD      00880002
,=H'4'             BUMP BACK TO RDW                    00890002
,ZLFCHAR           GET CURRENT CHARACTER POINTER       0090000ˇ
#2,4-1(,#2)          ADJUST BY 1, ADD 4 TO INCLUDE RDW   00910002
#2,16                SHIFT LENGTH INTO LEFT HALF         00920002
#2,0(,#1)            STORE THE RDW                       00930002AFTUNPU
  0H                                                       00940002
E 1                                                        00950002
  (NOT &ZILXA).SKIP1                                       00960002*----
------------ˇ
    #1,CODE24           ADDRESS OF THIS CODE                 00980002
    #2,CODE24E          RETURN ADDRESS                       00990002
M   #2,#1                  ˇ
DS    0H                                                       01010002*
-------------------------THE AMODE IS NOW 24                   01020002.
ANOP                                      ˇ
  SPACE 1                                                        0104000
  LA    #1,CLOSEL                                                0105000
  CLOSE MF=(E,(1))          CLOSE THE FILE               +
                                                       ˇ
OR LIBRARY FILE, INSTEAD OF FREEPOOL FREE THE READ BUFFER.           010
HAT IS, WHEN WE HAVE SUPPORT FOR LIBRARY FILES.                      010
                                                                     0ˇ
        LA    #1,ZLFDCB                                                0
        FREEPOOL (1)                                                   0
        SPACE 1                                                        0
     ˇ
2*---------------------------------SWITCH FROM AMODE 24 TO CURRENT AMODE
2         BSM   0,#2
2CODE24E  DS    0H  ˇ
002*---------------------------------THE AMODE IS NOW SAME AS ON ENTRY
002.SKIP2   ANOP
002NOCLOSE  DS    0H               ˇ
00002         EJECT
10002*
20002* NOW UNCHAIN AND FREE THIS FILE BLOCK       ˇ
1230002*
1240002         NI    ZLFFLAG2,255-ZLFOPEN MARK FILE NOT OPEN
1250002         ICM   #2,15,ZLFECHO       GET POINTER TO ECHO FILˇ
 01260002         BZ    NOECHO              IF THERE IS ONE, THEN...
 01270002         LH    #0,ZLFECCNT-ZLFILBLK(,#2)
 01280002         BCTR  #0,0                 DECREMENT ITS ECHO REFERENC
ˇ
   01300002NOECHO   DS    0H
   01310002         ICM   #0,B'0011',ZLFECCNT IF ECHO REFERENCE COUNT NO
   01320002    ˇ
     01330002*
     01340002* MOVE FILE CHAIN POINTER TO PREVIOUS FILE BLOCK TO CONNECT
     01350002*                ˇ
       01360002         L     #2,ZLFCHAIN         GET CURRENT CHAIN POIN
       01370002         LTR   #4,#4               IF THIS WAS 1ST FILE I
       01380002         BNZ   RECHAIN        ˇ
         01390002         CLI   DDCHAR,C'I'          IF THIS IS AN INPUT
         01400002         BNE   CHNOTIN              THEN...
         01410002         ST    #2,ZLCIFBAD           UPDATEˇ
HEADER     01420002         L     #4,ZLCSTDIN           POINT TO STANDAR
BLOCK      01430002         L     #6,ZLCIFTRM           POINT TO "TRUE"
 FILBLK    01440002         B     RECHAIN              ELSE...
             01450002ˇÁ
AN OUTPUT FILE)...         01460002         ST    #2,ZLCOFBAD
ILE BLOCK CHAIN HEADER     01470002         L     #4,ZLCSTDOU
 STANDARD INPUT BLOCK      01480002 ˇ
TO "TRUE" TERMINAL FILBLK    01490002RECHAIN  DS    0H
                             01500002         ST    #2,ZLFCHAIN-ZLFILBLK
NNECT NEXT TO PREVIOUS       01510002         LR   ˇ
DR OF FILE BLOCK TO BE FREED   01520002         CR    #1,#6
S IS THE "REAL" TERM FIL BLK   01530002         BE    NOFREE
ON'T FREE IT                   01540002         LH    #0,ZLCFBLEN ˇ
LENGTH OF FILE BLOCK             01550002         FREEMAIN R,LV=(0),A=(1
 THE FILE BLOCK                  01560002NOFREE   DS    0H
                                 01570002         SPACE 1
 ˇ
TURN NIL                           01590002         SPACE 1
                                   01600002         #ZRET ,
STORE REGISTERS ˇ
                                     01620002NILERROR DS    0H
                                     01630002         SPACE 1
                               ˇ
le is not closable - ',0(#11),PREFIX=NX01650002               O
                                       01660002         SPACE 1
                                       0167000ˇ
                                         01680002         SPACE 1
                                         01690002         #ERR  'ZIL0009
File name not a 1-4 character symbol - 'X01700002            ˇ
=NO                                        01710002         SPACE 1
                                           01720002NOTFOUND DS    0H
                                           01730002         SPACE 1
                                             01740002         CLI   DDCH
                                             01750002         BNE   ERRN
                                             01760002         LA    #2,$
           ˇ
                                               01780002ERRNOTCI LA    #2
                                               01790002ERR23    #ERR  'Z
LOSE: Not a currently openˇ
                                                X01810002
 ',                                             X01820002
                                         +
=NO                                    ˇ
L1              Align string to non-halfword         01850002$INPUT   #S
ut'                                                  01860002         DS
L1              Align string to non-halfword         0ˇ
utput'                                                 01880002
                                                       01890002DDCHAR
 '                I (FOR INPUT), OR O (FOR OUTPUT)     01900002      ˇ
2                                                        01910002CLOSEL
(*-*),MF=L          LIST FORM FOR CLOSE                  01920002
                                                         01930002
    ˇ
T                                                          01950002
DES ,                 Equate OPEN/CLOSE file modes         01960002
                                                            01970002{

'        00010000*******************************************************
******** 00011002*
       * 00012002*ˇ
y Inc.   * 00013002*                     All rights reserved.
         * 00014002*
         * 00015002**************ˇ
************ 00016002*
           * 00016303* Change activity:
           * 00016403*                          ˇ
             * 00016503* 02/10/90 - SEB1525 - Fixed bug when lots of mem
d for.       * 00016603*
             * 00016703****************************************ˇ
**************** 00016803*
               * 00017002* THIS SOURCE MODULE CONTAINS CONDITIONAL ASSEM
 WHICH         * 00018002* UTILIZES THE IBM SYSTEM/370 VECTOR FACILITY F
ANCED            * 00019002* PERFORMANCE.  SUCH CODE IS ACTIVATED VIA IN
 OF THE          * 00020002* ASSEMBLER WITH THE FOLLOWING SPECIFIED:
                 * 00030002*
             ˇ
                   * 00050002*
                   * 00060002*******************************************
******************** 0007000ˇ
OS'                    00080002         MACRO
                       00090002&SYM     MARK  &REG
                       00100002.*          ˇ
                         00110002.* THIS MACRO SETS THE GARBAGE COLLECTI
ON IN THE CELL POINTED   00120002.* TO BY THE SPECIFIED REGISTER.
                         00130002.*                       ˇ
                           00140002&SYM     OI    3(&REG),B'00000001'  S
GE COLLECTION MARK         00150002         MEND
                           00160002         EJECT
                             00170002         MACRO
                             00180002&SYM     MARK2 &REG
                             00190002.*
        ˇ
ON MARK ON IN THE CELL POINTED 00210002.* TO BY THE SPECIFIED REGISTER.
 USED IN THE POINTER-REVERSAL  00220002.* ALGORITHM TO PREVENT DOUBLE SC
F CIRCULAR AND STRANGE +
                     ˇ
ET TEMP COLLECTION MARK            00250002         MEND
                                   00260002         EJECT
                                   0ˇ
                                     00280002&SYM     UNMK  &REG
                                     00290002.*
                                     00300002.* THIˇ
LLECTION MARKS OFF IN THE CELL POINTED 00310002.* TO BY THE SPECIFIED RE
                                       00320002.*
                                       00330002&SYM     NI    3(&Rˇ
00'  SET GARBAGE COLLECTION MARKS OFF    00340002         MEND
                                         00350002         EJECT
                                         00360002         MACRO
 ˇ
=                                          00380002.*
                                           00390002.* THIS MACRO TESTS O
GE COLLECTION MAˇ
STER.                                        00410002.* IT IS USED ONLY
OINTER-REVERSAL ALGORITHM WHEN CLIMBING      00420002.* BACK UP A CHAIN
SED POINTERS.                  ˇ
                                               00440002&SYM     TM    3(
00000001'  TEST GARBAGE COLLECTION MARK        00450002         AIF   ('
 '').NOYES                                    ˇ
             IF MARKED, BRANCH TO LABEL          00470002         MEXIT
                                                 00480002.NOYES   ANOP
                                                 00490002    ˇ
               IF NOT MARKED, BRANCH TO LABEL      00500002         MEND
                                                   00510002         EJEC
                                                   00520002         MACR
                                                     00530002&SYM     IF
,&YES=,&NO=                                          00540002.*
                                                     00550002.* THIS MAC
 TWO GARBAGˇ
IFIED REGISTER.                                        00570002.*
                                                       00580002&SYM
&REG),B'00000011'  TEST GAˇ
('&YES' EQ '').NOYES                                     00600002
&YES                 IF MARKED, BRANCH TO LABEL          00610002
                                                          00620002ˇÁ
.NOYES   ANOP
2         BZ    &NO                  IF NOT MARKED, BRANCH TO LABEL
2         MEND
2 ˇ
002         MACRO
002&SYM     GCDR  &VALREG,&CONSREG
002.*            ˇ
90002.* THIS MACRO LOADS THE FIRST SPECIFIED REGISTER WITH THE CONTENTS
00002.* THE "CDR" FIELD OF THE SECOND SPECIFIED REGISTER.
10002.*                         ˇ
0720002&SYM     L     &VALREG,##CDR(,&CONSREG)     (SETQ REG1 (CDR REG2)
0730002         MEND
0740002         EJECT                          ˇ
 00750002         MACRO
 00760002&SYM     GCAR  &VALREG,&CONSREG
 00770002.*                                                   ˇ
   00780002.* THIS MACRO LOADS THE FIRST SPECIFIED REGISTER WITH THE CON
   00790002.* THE "CAR" FIELD OF THE SECOND SPECIFIED REGISTER.
   00800002.*
     00810002.* NOTE THAT THIS IS NOT A SIMPLE LOAD OPERATION.  THE "CAR
     00820002.* MAY HAVE HAD GARBAGE COLLECTION MARKS SET IN IT, AND THE
     00830002.* WE MUST "AND" OUT THE MARKS TO PRESERVE A VALID ADDRESS.
     0084000ˇ
       00850002&SYM     L     &VALREG,##CAR(,&CONSREG)     (SETQ REG1 (C
)      00860002         N     &VALREG,=X'FFFFFFFC'         REMOVE GC MAR
       00870002         MENˇ
         00880002         MACRO
         00890002&SYM     RCDR  &CONSREG,&VALREG
         00900002.*                       ˇ
           00910002.* THIS MACRO DOES A "RPLACD" OPERATION.  THE CONTENT
 SECOND    00920002.* SPECIFIED REGISTER ARE STORED INTO THE "CDR" FIELD
CELL       00930002.* POINTED TO BY THE FIRST SPECIFIED Rˇ
             00940002.*
             00950002&SYM     ST    &VALREG,##CDR(,&CONSREG)      (RPLAC
EG2)         00960002         MEND
               00970002         EJECT
               00980002         MACRO
               00990002&SYM     RCAR  &CONSREG,&VALREG
       +
     ˇ
S OF THE SECOND    01020002.* SPECIFIED REGISTER ARE STORED INTO THE "CA
 OF THE CELL       01030002.* POINTED TO BY THE FIRST SPECIFIED REGISTER
                   0ˇ
                     01050002.* NOTE THAT THIS IS NOT A SIMPLE STORE OPE
 THE "CAR" FIELD     01060002.* MAY HAVE HAD GARBAGE COLLECTION MARKS SE
 AND THEREFORE       01070002.* WE ˇ
 MARKS ARE PRESERVED.  01080002.*
                       01090002.* NOTE USE OF REGISTER 0 AS A WORK REGIS
                       01100002.*                 ˇ
                         01110002&SYM     LA    #0,3
                         01120002         N     #0,##CAR(,&CONSREG)   GE
KS INTO REG              01130002         OR    #0,&VALREG       ˇ
WITH ARGUMENT REG          01140002         ST    #0,##CAR(,&CONSREG)
REG1 REG2)                 01150002         MEND
                           01160002         EJECT
ˇ
                             01180002&SYM     RCHK  &REG,&LBL
                             01190002.*
               ˇ
TO SEE IF THE CELL POINTED     01210002.* TO BY THE SPECIFIED REGISTER L
IN CONS SPACE (THE FREE LIST). 01220002.* IF IT DOES NOT (MEANING THAT I
T BE MARKED), A BRANCH TO     ˇ
BEL MAY BE A PARENTHESIZED       01240002.* REGISTER NUMBER, IN WHICH CA
NCH TO THE ADDRESS IN THE        01250002.* REGISTER IS EFFECTED.
                                 01260002.*  ˇ
                                   01270002.* 11/84 - CHECKING IS NOW DO
RIFY THAT THE REGISTER             01280002.* REFERENCES A CELL ON A DOU
BOUNDARY.  THE READ FUNCTION       01290002.* PUTS SUCH NON-ˇ
 ON THE STACK.                       01300002.* THIS IS IMPORTANT IF THE
CTURE LEAVES OPEN THE RISK           01310002.* OF NUMERIC QUANTITIES WH
FALL INTO THE CONS SPACE RANGE.      01320002.*
                                       01330002.* 07/85 - THAT CHECKING
 TAKEN OUT, SINCE WE CAN'T             01340002.* GUARANTEE A SIMILAR CO
Y FOR POINTERS INTO VECTOR/STRING      01350002.* SPACE.  INSTEAD, ALL Z
MUST PROMIˇ
SOLUTE NUMERIC VALUES OR POINTERS        01370002.* INTO ONE OF THE GCAB
S THAT DON'T POINT TO THE BEGINNING      01380002.* OF AN OBJECT.  THE O
RIT WAS "READ", AND WE FI XED HIM.        01390002ˇÁ
                                                         01400002.* IN A
 THIS MACRO NOW GENERATES A BAL TO THE ROUTINE THAT      01410002.* DOES
CKING FOR BOTH SPACES, AND DOES A RELOCATION PLUS        01420002.ˇ
 IF THE OBJECT ACTUALLY IS IN VECTOR/STRING SPACE.         01430002.*
                                                           01440002
  ('&REG' EQ '#0' OR '&REG' EQ '0').SKIPLR                 01450002
 ˇ
OP                                                           01470002
AS  #14,RCHECK            CALL RANGE CHECKER                 01480002
F   ('&LBL'(1,1)ˇ
B     &LBL                  BRANCH WHEN NOT IN CONS SPACE      01500002
AGO   .MEND                                                    01510002.
ANOP                           ˇ
  BR    &LBL(1)               BRANCH WHEN NOT IN CONS SPACE      0153000
  NOPR  0                     FILLER                             0154000
  MEND                                        ˇ
    EJECT                                                          01560
    MACRO                                                          01570
    MARKOBJ &OBJECT                                          ˇ
                                                                     015
THIS MACRO INVOKES THE GC MARKING ROUTINE ON A SINGLE OBJECT WHOSE   016
POINTER IS CONTAINED IN THE COMMON AREA.  THIS RESULTS IN ALL THE    016
* LISP OBJECTS POINTED TO BY THAT OBJECT BEING MARKED.                 0
*                                                                      0
        LA    #15,&OBJECT         POINT TO COMMON AREA OBJECT          0
        L  ˇ
2         #BAS  #14,MARKLIST        INVOKE MAIN GC ROUTINE ON IT
2         MEND
2         TITLE 'ZILCONS -ˇ
002         GBLB  &ZILXA,&ZILVF
002         #ZSYS
002ZILCONS  CSECT ,                      ˇ
10002         USING CONS,#15
20002         USING ZLCOMMON,#13
30002         SPACE                                     ˇ
1740002*****************************************************************
1750002*
1760002* CONS TAKES TWO ARGUMENTS.  NO STACK SPACE IS REQUIRED.        +
 01770002*                                                           ˇ
   01780002* REG 1 CONTAINS THE CAR-TO-BE, REG 2 THE CDR-TO-BE.
   01790002*
   01800002* REG 15 RETURNS WITH THE NEWLY ALLOCATED CELL.  IF NO CELLS
   0ˇ
     01820002* CALLED BY ZILINIT TO PERFORM INITIALIZATION FUNCTIONS - I
     01830002* CASE REG 15 IS SET TO ZERO TO INDICATE NOT ENOUGH CELLS A
     01840002* FOR ˇ
       01850002*
       01860002* THE FREE LIST IS ACCESSED SEQUENTIALLY UNTIL A GARBAGE
ON     01870002* IS DONE, AT WHICHˇ
E AND    01880002* THE ENTRY POINT FOR CONS (STORED IN COMMON) IS ALTERE
NT TO    01890002* THE CODE WHICH ACCESSES THE NEW STRUCTURE.
         01900002*                               ˇ
           01910002* BE CAREFUL WITH REG 15!!! IT IS THE BASE REGISTER A
S RETURN.  01920002*
           01930002* NOTE THAT REG 12 AT ENTRY IS THE BASE REGISˇ
NCTION       01940002* THAT INVOKED CONS.  THIS IS USED BY THE GARBAGE C
 TO          01950002* VERIFY THE CURRENT STACK POINTER ENVIRONMENT.
             01960002*

************** 01980002         EJECT
               01990002         #ZEQU
              ˇ
                 02010002         #ZCOM
                 02020002         EJECT
                 02030002    ˇ
                   02040002         EJECT
                   02050002ZILCONS  CSECT ,
                   02060002         SPACE   ˇ
                     02070002*******************************************
******************** 02080002*
                     02090002* VIRGIN ENTRY POINT - NO GARBˇ
E OCCURRED             02100002*
                       02110002*****************************************
********************** 02120002         SPACE
                         02130002CONS     DS    0H
                         02140002         CR    #9,#10              IF E
EE LIST                  02150002         BNL   GARBCOLL-CONS(,#15) THEN
AGE COLLE CTION           02160002ˇÁ
    ALLOCATE CURRENT CELL IN FREE LIST   02170002         LA    #9,8(,#9
    ELSE GET NEXT SEQUENTIAL LIST        02180002         STM   #1,#2,##
    STORE CAR AND CDR IN NEW CELL        02190002 ˇ
      RETURN TO CALLER                     02200002         SPACE 2
                                           02210002*********************
****************************************** 02220002*             ˇ
                                             02230002* ENTRY POINT AFTER
 COLLECTION HAS ORDERED THE FREE LIST        02240002*
                                             02250002*******************
ˇ
                                               02270002GCCONS   DS    0H
                                               02280002         LTR   #9
          IF FRˇ
-GCCONS(,#15) THEN DO GARBAGE COLLECTION         02300002         LR
            ALLOCATE CURRENT CELL IN FREE LIST   02310002         L
(,#9)       GET NEXT CELL IN Fˇ
##CAR(#15)    STORE CAR AND CDR IN NEW CELL        02330002         BR
              RETURN TO CALLER                     02340002         EJEC
                                             ˇ
**************************************************** 02360002*
                                                     02370002* GARBAGE C
N REQUIRED - NO MORE FREE CELLS                      0238000ˇ
                                                       02390002*********
****************************************************** 02400002
                                                       02410002GARBCOLL
0H                  GARBAGE COLLECTION                   02420002
#15,#15             PRELIMINARILY SET RETURN TO ZEROES   02430002
ZLCGCFLG,ZLCGCINT   IF CONS CALLED BY ZILINIT            02440002
#14       ˇ
                       TO INDICATE INITIALIZATION FAILURE  02460002
  #15,0               ELSE BOOTSTRAP ADDRESSABILITY        02470002
G GCBASE,#15             ˇ
U   *                                                        02490002
M   #0,#14,ZSAVREGS     SAVE ALL REGISTERS BUT USELESS #15   02500002
    #12,#15             SET NEW BASE REGˇ
USING GCBASE,#12                                               02520002
DROP  #15                                                      02530002
SPACE                                                  +
*****************************************************ˇ
                                                                   02560
 ALGORITHM USED HERE IS BASICALLY FLOYD'S MARK-AND-SWEEP           02570
-RECURSIVE POINTER-CLOBBERING TECHNIQUE AS ILLUSTRATED IN          0ˇ
LISP" (FIRST EDITION), BY WINSTON AND HORN, PAGE 117.                025
                                                                     026
OME MODIFICATION HAD TO BE MADE TO SUPPORT THE COLLECTING OF         026
ROPˇ
 BASICALLY BY TREATING SYMBOLS AND CLOSURES AS EQUIVALENT TO CONSES    0
 OF SOME NON-LIST ENTITY (WHICH IS THE PRINT NAME OR COMPILED CODE     0
 OBJECT) WITH A PRˇ
2* CLOSURE GETS TO PARTICIPATE IN THE COLLECTION AS IF IT WERE A LIST.
2*
2* NOTE THAT IN-LINE LISTS MAY NOˇ
002* PROCESS.  THIS MEANS THAT IF AN IN-LINE LIST WAS MODIFIED AT RUN
002* TIME, THE OBJECTS IN CONS SPACE THAT ARE REFERENCED ONLY BY IN-LINE
002* STRUCTURES WILL NOT BE COLLECTED!  THIS CANˇ
10002* AND IT IS THEREFORE STRESSED THAT IN-LINE LISTS, CREATED BY COMPI
20002* THE CONSTRUCT '(FORM FORM FORM ...), SHOULD NOT BE USED IF THERE
30002* ANY CHANCE THAT THEY MIGHT BE MODIFIED DURING EXECUTION ˇ
2740002*
2750002* AN EXCEPTION TO THIS IS THAT IN-LINE ATOMS DO PARTICIPATE IN TH
2760002* GARBAGE COLLECTION PROCESS, SINCE THEIR PROPERTY LISTS MUST BE
 02770002* COLLECTED.  SINCE ALL IN-LINE ATOMS ARE INTERNED ON THE OBLIS
 02780002* IS SUFFICIENT TO GO THROUGH THE OBLIST AND PROCESS ALL ATOMS
 02790002* THEREON TO EFFECT THIS.  THE PRINT NAMES AND OTHER PIECES OF
 02800002* THˇ
   02810002* THESE GENERALLY DO NOT POINT TO OTHER LISP OBJECTS, THIS NO
   02820002* PRESENTS NO PROBLEM UNLESS YOU DO "ILLEGAL" THINGS TO ATOMS
   02830002*                ˇ
     02840002* THE ALGORITHM ALSO HAD TO BE SLIGHTLY MODIFIED TO HANDLE
TH   02850002* ELEMENTS THAT POINT TO THEMSELVES (AN UNUSUAL CASE, ADMIT
     02860002* TO DO THIS, WE HAD TO GO BACˇ
NOTE   02870002* THAT IT IS NOT NECESSARY TO UNDO BOTH OF THE MARKING BI
E      02880002* THE SWEEP PHASE WILL RESET BOTH OF THEM.
       02890002*                                          ˇ
         02900002* THE MARKING BITS ARE THE TWO LOW-ORDER BITS OF THE CA
WHICH    02910002* ARE ALWAYS AVAILABLE SINCE ALL POINTERS ARE GUARANTEE
AT       02920002* LEAST ON A FULLWORD BOUNDARY, MAKING THE ADDRESSES CO
D          02930002ˇÁ
                         02940002*
                         02950002* OBJECTS IN VECTOR/STRING SPACE ARE TR
ECIALLY (THEY ARE        02960002*ˇ
 ALGORITHM) BY THE         02970002* COMPONENT OF THE GC WHICH DOES RELO
ND FORWARDING.  THE        02980002* FINAL PHASE OF THE GC (BEFORE THE S
 THE COLLECTION OF         02990002* OBJECTS IN Vˇ
 TO OTHER OBJECTS, AND       03000002* SWAPPING OF THE OLD AND NEW SPACE
                             03010002*
                             03020002* SPECIAL THANKS TO GEORGE ˇ
 NIL AND LMI FAME FOR HIS      03030002* TECHNICAL ASSISTANCE AND ENCOUR
WRT THE RELOCATING GC.         03040002*
                               03050002*********************************

                                 03070002*******************************
******************************** 03080002*
              ˇ
S FOLLOWS:                         03100002*
                                   03110002* #0  - WORK REGISTER
                             ˇ
 GC SUBROUTINES                      03130002* #2  - WORK REGISTER
                                     03140002* #3  - LOWER BOUND OF CONS
                                     0315000ˇ
                                       03160002* #5  - THE "N" VARIABLE
YD'S ALGORITHM AS IN WINSTON & HORN    03170002* #6  - THE "P" VARIABLE
YD'S ALGORITHM AS IN WINSTON & HORN    03180002* #7  - THE ˇ
LOYD'S ALGORITHM AS IN WINSTON & HORN    03190002* #8  - THE ATOM T, AS
EAL WORLD                                03200002* #9  - USED TO REBUILD
E LIST                                   03210002* #10 - THE ATOM NIL, A
HE REAL WORLD                              03220002* #11 - POSSIBLY BUT
SSARILY USED FOR STACK PROCESSING          03230002* #12 - LOCAL BASE RE
OR THIS ROUTINE                            03240002* #13 - THE COMMON AR
N THE REAˇ
ISTER FOR GC SUBROUTINES                     03260002* #15 - POINTER TO
O STORE RELOCATED-OBJECT POINTERS            03270002*
                        ˇ
********************************************** 03290002         SPACE
                                               03300002*****************
***************************************+
                                     ˇ
ING IS AS FOLLOWS:                               * 03330002*
                                                 * 03340002* (1) GC THE
ACRO CHAIN.  NOTE THAT NO OTHER LISP OBJECTS     * 0ˇ
READER MACRO CELLS, SINCE THEY DO NOT HAVE         * 03360002*     STAND
 CONFIGURATIONS INSIDE THEM.                       * 03370002*
                                                   * 03380002* (2) ˇ
BJECTS POINTED TO BY THE COMMON AREA.  THESE INCLUDE * 03390002*     * T
T AND ALL ATOMS THEREON, INCLUDING THEIR PLISTS.     * 03400002*     * T
S AND THE OBJECTS TO WHICH THEY POINT.               * 03410002*     * T
M ˇ
                                                       * 03430002* (2.5)
OBJECTS POINTED TO BY THE CELLS OF THE T AND NIL       * 03440002*
.                ˇ
                                                         * 03460002* (3)
INLINE COMPILED CODE OBJECTS POINTED TO BY THE HEADERS   * 03470002*
LOADED COMPILED CODE MODULES REFˇ
ER VECTOR" OF INLINE COMPILED CODE HEADERS.                * 03490002*
                                                           * 03500002* (
E ATOMS REFERENCED BY THE FILE BLOCK CHAINS.   ˇ
                                                             * 03520002*
OVER ALL VALID THINGS POINTED TO BY THE CURRENT STACK.       * 03530002*
EFULLY REGISTER 0 AT ENTRY TO CONS POINTED TO THE CURRENT    *ˇ
TACK OFFSET.  IF NOT, WE'LL TRY TO APPROXIMATE IT.             * 0355000
                                                               * 0356000
C THE THINGS POINTED TO BY REGISTERS 1 AND 2 AT ENTRY TO CONS  * 0357000
 (WHICH WE WERE TRYING TO USE IN THE FIRST PLACE).               * 03580
                                                                 * 03590
 THEN, GO OVER THE RELOCATED (NEW) VECTOR/STRING SPACE,          * 03600
 COLLECTING ˇ
   SWAP THE OLD AND NEW VECTOR/STRING SPACES, FOR ALL OBJECTS      * 036
   THEREIN WILL HAVE BEEN RELOCATED.                               * 036
                           ˇ
 (8) GO THROUGH THE OBLIST HASH ARRAY AND RELOCATE ALL THE NONZERO   * 0
     SYMBOL POINTERS THEREIN.  SINCE ALL OF SYMBOLS HAVE ALREADY     * 0
     BEEN COLLECTED (WHEN THE OBLIST ITSELˇ
2*     THEY'VE ALL BEEN FORWARDED, SO JUST LOAD THE FORWARDING PTRS.   *
2*                                                                     *
2* (9) WHEN ALL IS DONE, GO THROUGH THE FREE LIST AND CHA IN ALL THE
002ˇÁ
CONS   * 03710002*     FREE LIST.  CHANGE THE ENTRY POINT OF CONS TO REF
 NEW   * 03720002*     FREE LIST ACCESS TECHNIQUE.
       * 03730002*ˇ
         * 03740002*(10) IF STILL NO FREE CELLS ARE AVAILABLE, THERE IS
 ERROR.  * 03750002*
         * 03760002**************ˇ
************ 03770002         EJECT
             03780002*
             03790002* LET THE USER KNOW WHAT'S ˇ
               03800002*
               03810002         TM    ZLCGCFLG,ZLCGCMSG   IF MESSAGES AR
SHOWN,         03820002         BZ    AFTMSG1             THEN.ˇ
                 03830002         L     #3,ZSAVED12         GET BASE REG
THAT CALLED US   03840002         CLC   0(3,#3),=X'47F0F0'  CHECK VALID
E                03850002         BNE   DUNNO               CAN'T VERIFY
 IF WRONG CODE     03860002         MVI   ZIL1100B,C' '       CLEAR FUNC
E TO BLANKS        03870002         MVC   ZIL1100B+1(L'ZIL1100B-1),ZIL11
                   03880002         XR    #15,#15             CLEAR INSE
TER          ˇ
DULE IDENTIFIER      03900002         SH    #15,=H'16'          REDUCE B
 OF DATE/TIME INFO   03910002         BNP   DUNNO               IF NO NA
                     0392000ˇ
ELY, BUT JUST IN CASE  03930002         BNH   *+8                  LIMIT
ELEN) CHARACTERS       03940002         LA    #15,L'ZIL1100B
                       03950002         BCTˇ
XECUTE                   03960002         EX    #15,MVCNAME         MOVE
N NAME TO MESSAGE        03970002         LA    #2,ZIL1100B+1(#15)  POIN
UNCTION NAME             03980002         B     SET1100   ˇ
                           03990002MVCNAME  MVC   ZIL1100B(0),5(#3)   EX
MOVE FUNCTION NAME TO MSG  04000002ZIL1100U DC    C'SOMEWHERE IN ZIL'
                           04010002DUNNO    DS    0H
                             04020002         MVC   ZIL1100B(L'ZIL1100U)
U                            04030002         LA    #2,ZIL1100B+L'ZIL110
                             04040002SET1100  DS    0H
        ˇ
N A PERIOD                     04060002         LA    #0,1(,#2)
TO END OF MESSAGE              04070002         LA    #1,ZIL1100A
TO BEGINNING OF MESSAGE+
LENGTH OF MESSAGE    ˇ
Y GARBAGE COLLECTION IN PROGRESS   04100002AFTMSG1  DS    0H
                                   04110002*
                                   0ˇ
                                     04130002*
                                     04140002         STIMER TASK,BINTVL
DO DUMMY TO FORCE OS TIMER UPDATE    04150002      ˇ
  GET ADDRESS OF ASCB                  04160002         MVC   GCTIME1,X'
  GET JOB STEP ELAPSED TIME (ASCBEJST) 04170002*
                                       04180002* SET BOUNDS OF CONˇ
RANGE CHECKING                           04190002*
                                         04200002         L     #3,ZLCGC
    Address of bottom of active cons sp  04210002         LR    #4,#10
 ˇ
OSER1                                      04230002*
                                           04240002* Pre-load virtual pa
paces to be collˇ
                                             04260002* Note: We specify
o get asynchronous processing, but we        04270002*       don't actua
 for the page loading to compleˇ
maybe we should...?)                           04290002*
                                               04300002         XC    PG
GSERECB   Clear ECB                           ˇ
=(#3),EA=(#4),ECB=PGSERECB                       04320002*
            Load CONS pages and page with NIL    04330002         XC
,PGSERVSA   Preset page address to zero          04340002    ˇ
VSADR         Bottom of active V/S space           04350002         L
CVSNXT        Pointer past last used object        04360002         BCTR
              Adjust to last byte in used area     04370002         LA
095(,#1)                                             04380002         CR
#0              Skip unless at least 4k bytes in use 04390002         BN
PGLD                                                 04400002         ST
GSERVSA    ˇ
5,PGSERVSE         page release operation              04420002
SERECB,PGSERECB   Clear ECB                            04430002
LOAD,A=(1),EA=(15),ECB=PGSˇ
                    Load vector/string space pages       04450002NOVSPGL
0H                                                       04460002.NOSER1
                                                          04470002ˇÁ
*
2* SET VECTOR/STRING SPACE POINTER
2*
2 ˇ
002         ST    #1,VSPTR            THIS IS WHERE WE'LL RELOCATE TO.
002*
002* START NON-INˇ
40002*
50002         OI    ZLCIFLGS,ZLCISMC    SET NON-INTERRUPTIBLE PROCESS
60002*                          ˇ
4570002* MARK ALL CELLS ON THE READER MACRO CHAIN.
4580002*
4590002         LA    #15,ZLCRMCHN        @ HEAˇ
 04600002         L     #2,0(,#15)          GET HEADER OF READER MACRO C
 04610002GCRMLOOP DS    0H                  NOTE #15 -> WHAT'S POINTING.
 04620002         LTR   #2,#2               UNTIL END OF CHAINˇ
   04630002         BZ    GCENDRM             (WHETHER ZEROES OR NIL)
   04640002         CR    #2,#10
   04650002         BE    GCENDRM
     04660002         LA    #2,0(,#2)           POINT TO OBJECT, CLEARIN
YTE  04670002         RCHK  #2,GCRMNEXT         CHECK RANGE
     04680002         MARK  #2                  MARK IT
     0469000ˇ
       04700002         LR    #15,#2              SAVE POINTER TO THIS E
       04710002         GCDR  #2,#15              GET NEXT ELEMENT IN CH
       04720002         LA ˇ
         04730002         B     GCRMLOOP            AND CONTINUE.
         04740002GCENDRM  DS    0H
         04750002*                        ˇ
           04760002* MARK OBJECTS POINTED TO BY THE COMMON AREA.
           04770002*
           04780002         MARKOBJ ZLCOBLST          MARˇ
             04790002         MARKOBJ ZLCSALST          MARK THE SPECIAL
             04800002         MARKOBJ ZLCFALST          MARK THE FLUID A
             04810002         MARKOBJ ZLCGSPRE          MARK THE GENSYM
 IF ANY        04820002*
               04830002* GO OVER THE T AND NIL SYMBOLS AND MARK THEIR CO
               04840002*
       +
OF T ˇ
                   04870002         ST    #0,ENDVEC           SAVE IT
                   04880002TLOOP    DS    0H
                   0ˇ
OF T                 04900002         BNL   TEND
                     04910002         LA    #15,0(,#2)          POINT TO
                     04920002      ˇ
                       04930002         #BAS  #14,MARKLIST        MARK I
                       04940002         LA    #2,4(,#2)           BUMP T
ELL                    04950002         B     TLOOˇ
                         04960002TEND     DS    0H
                         04970002         LA    #2,##VECDAT(,#10)   POIN
ST CELL OF NIL           04980002         LA    #0,##SYMLEN(,#10)ˇ
ND OF NIL                  04990002         ST    #0,ENDVEC           SA
                           05000002NILLOOP  DS    0H
                           05010002         C     #2,ENDVEC           LO
ˇ
                             05030002         LA    #15,0(,#2)
 CELL                        05040002         L     #1,0(,#15)
L              ˇ
T                              05060002         LA    #2,4(,#2)
O NEXT CELL                    05070002         B     NILLOOP
                              ˇ
                                 05090002*
                                 05100002* MARK ALL INLINE COMPILED CODE
.  NOTE THAT OBJECTS WHICH ARE   05110002* PHˇ
ARE NOT MARKED, BUT ANY OBJECTS    05120002* IN A COLLECTIBLE SPACE TO W
Y POINT DO GET MARKED.  THESE      05130002* ARE CREATED (PRIMARILY) IN
:                                  05140002* (1) INTERNMENT ˇ
                                     05150002* (2) BASHING OF CONSTANTS
                                     05160002*
                                     05170002* Note: If GC is invoked wh
LSINT is calling ZILINTN, there are a  05180002*       pair of pointers
e-code-pointers-set-so-far-while-      05190002*       processing-this-c
function that we must check, because   05200002*       no inline-code-ve
 yet been ˇ
                                         05220002         ICM   #2,15,ZL
    Get pointer to ZILSINT temp stuff    05230002         BZ    SINEND
    If none, skip                         05240002ˇÁ
0H                                                       05250002
#2,ZLCSIN2          Loop until end of these pointers     05260002
SINEND                                                   05270002 ˇ
  #15,0(,#2)          Point to pointer                     05280002
  #1,0(,#15)          Load pointer                         05290002
  #14,MARKLIST        Call main GC routine on it           05300002
 ˇ
    SINLOOP             Continue                             05320002SIN
    0H                                                       05330002*
                ˇ
 process all the inline code vectors.                          05350002*
                                                               05360002
L     #2,ZLCICPA          GET Aˇ
  L     #0,ZLCICPU          GET LENGTH OF USED PORTION           0538000
  AR    #0,#2               COMPUTE POINTER TO END OF USED       0539000
  ST    #0,ENDICP           SAVE IT           ˇ
OP  DS    0H                                                       05410
    C     #2,ENDICP           LOOP UNTIL END OF "MASTER VECTOR"    05420
    BNL   ICPEND                                             ˇ
      ST    #2,SAVEICP          SAVE WHERE WE ARE IN "MASTER VECTOR" 054
      L     #1,0(,#2)           GET COMPILED CODE HEADER POINTER     054
      ST    #1,SAVEHDR          SAVE IT                              054
        USING ZLHEADER,#1                                              0
        ICM   #2,15,ZLHATOMA      GET POINTER TO INLINE ATOMS VECTOR   0
        BZ    ILAEND              IF NONE, SKIP                        0
        LA ˇ
2         L     #0,ZLHATOME         GET POINTER TO END THEREOF
2         ST    #0,ILEND            SAVE IT
2ILALOOP  DS    0H        ˇ
002         C     #2,ILEND            LOOP UNTIL END OF INLINE ATOMS
002         BNL   ILAEND
002         LA    #15,0(,#2)          POIˇ
60002         L     #1,0(,#15)          LOAD POINTER
70002         #BAS  #14,MARKLIST        CALL MAIN GC ROUTINE ON IT
80002         LA    #2,4(,#2)           BUMP TO NEXT INLˇ
5590002         B     ILALOOP             CONTINUE
5600002ILAEND   DS    0H
5610002         L     #1,SAVEHDR          RELOAD HEADER PTR FOR ADDR'BI+
 05620002         ICM   #2,15,ZLHLISTA      GET POINTER TO INLINE LISˇ
   05630002         BZ    ILLEND              IF NONE, SKIP
   05640002         LA    #2,0(,#2)           CLEAR HIGH ORDER BIT
   05650002         L     #0,ZLHLISTE         GET POINTER TO END THEREOF
   0ˇ
     05670002ILLLOOP  DS    0H
     05680002         C     #2,ILEND            LOOP UNTIL END OF INLINE
     05690002      ˇ
       05700002         LA    #15,0(,#2)          POINT TO POINTER
       05710002         L     #1,0(,#15)          LOAD POINTER
       05720002         #BAS  #14,ˇ
         05730002         LA    #2,4(,#2)           BUMP TO NEXT INLINE
         05740002         B     ILLLOOP             CONTINUE
         05750002ILLEND   DS    0H               ˇ
           05760002         L     #2,SAVEICP          GET "MASTER VECTOR
OLDER      05770002         LA    #2,4(,#2)           BUMP TO NEXT ENTRY
           05780002         B     ICPLOOP             CONTINUE Lˇ
             05790002         DROP  #1
             05800002         SPACE 1
             05810002* Constants used by this loop are here for locality

               05830002ENDICP   DS    A                   PTR TO END OF
STER VECTOR"   05840002SAVEICP  DS    A                   "MASTER VECTOR
OLDER         ˇ
 POINTER         05860002ILEND    DS    A                   PTR TO END O
BEING SCANNED    05870002         SPACE 1
                 05880002ICPEˇ
G ALL INLINE STUFF 05890002*
                   05900002* MARK ATOMS CONTAINED IN FILE BLOCK POINTERS
                   05910002*                ˇ
                     05920002         L     #2,ZLCIFBAD         GET ADDR
ST INPUT FILE BLOCK  05930002IFLOOP   DS    0H
                     05940002         LTR   #2,#2          ˇ
MORE FILE BLOCKS       05950002         BZ    IFEND
                       05960002         LA    #15,ZLFATOM-ZLFILBLK(,#2)
 POINTER TO FILE ATOM  05970002         L     #1,0(,#15)          GET PO
TO FILE ATOM             05980002         #BAS  #14,MARKLIST        INVO
GC ROUTINE ON IT         05990002         L     #2,ZLFCHAIN-ZLFILBLK(,#2
INTER TO NEXT FILE BLOCK 06000002         B     IFLOOP              CONT
                          06010002ˇÁ
                                         06020002         L     #2,ZLCOF
    GET ADDRESS OF 1ST OUTPUT FILE BLOCK 06030002OFLOOP   DS    0H
                                         06040002 ˇ
      LOOP UNTIL NO MORE FILE BLOCKS       06050002         BZ    OFEND
                                           06060002         LA    #15,ZL
FILBLK(,#2) POINT TO POINTER TO FILE ATOM  06070002         L    ˇ
        GET POINTER TO FILE ATOM             06080002         #BAS  #14,
        INVOKE MAIN GC ROUTINE ON IT         06090002         L     #2,Z
ZLFILBLK(,#2) GET POINTER TO NEXT FILE BLOCK 06100002         B     OFLO
ˇ
                                               06120002*
                                               06130002* LOOP OVER ALL S
ATIONS.        ˇ
                                                 06150002         L
DADR        POINT TO BOTTOM OF PUSH DOWN STACK   06160002         L
D0          GET REG 0 AT ENTRYˇ
LG,ZLCGCBLD   IF WE WERE TOLD TO RELY ON #0        06180002         BO
              THEN WE HAVE TO ASSUME REG0 IS OK.   06190002         L
VED12         GET BASE REG OF FUN THAT CALLEDˇ
#1),=X'47F0F0'  CHECK VALID LISP CODE                06210002         BN
R               CAN'T VERIFY REG 0 IF WRONG CODE     06220002         XR
2                                                    0623000ˇ
,3(,#1)           GET B2D2 OF INITIAL BRANCH INSTR.    06240002
,#2               POINT TO NEXT EXECUTABLE INSTR.      06250002
2,#1),=X'4100'    CHECK VALID (EXPECTED) LISP CODE     06260002
MAYBLEX             IF NOT WHAT IS EXPECTED, MAYBE LEXPR 06270002
#2,2(,#1)           GET B2D2 OF STACK SIZE LA INSTR.     06280002
#2,20               SHIFT OUT BASE REG AND               06290002
#2,20     ˇ
  #1,ZSAVED11         GET STACK PTR AT ENTRY TO CONS       06310002
  #2,#1               ADD TO GET MAX STACK ADDRESS         06320002
  #0,#1               IF ˇ
    BADREG0             THEN CAN'T USE IT                    06340002
    #0,#2               IF REG 0 GREATER THAN MAX STACK PTR  06350002
    BADREG0             THEN CAN'T USE Iˇ
B     REG0OK              OTHERWISE USE REG 0 AS TOP OF STACK  06370002M
DS    0H                  MAYBE IT'S A LEXPR...                06380002
CLC   0(L'LCODE,#1),LCODE SEE IF IT'S COMPILED LEXPR PR+
  BNE   GCERR               IF NOT, CAN'T VERIFY #0, ˇ
    LH    #2,L'LCODE(,#1)     GET B2D2 OF STACK SIZE LA INSTR.     06410
    SLA   #2,20               SHIFT OUT BASE REG AND               06420
    SRA   #2,20               ISOLATE THE MAXIMUM STACK SIZE       0ˇ
      SH    #2,=H'4'            ADJUST IT                            064
      L     #1,ZSAVED11         ELSE GET STACK PTR AT ENTRY TO CONS  064
      AR    #2,#1               ADD TO GET MAX STACK ADDRESS         064
   ˇ
        BL    BADREG0             THEN CAN'T USE IT                    0
        CR    #0,#2               IF REG 0 GREATER THAN MAX STACK PTR  0
******* BH    BADRˇ
2         BNH   REG0OK              OTHERWISE USE REG 0 AS TOP OF STACK
2BADREG0  DS    0H
2********************************ˇ
002*        TM    ZLCGCFLG,ZLCGCMSG   IF MESSAGES ARE TO BE SHOWN,
002*        BZ    AFTMSG0              AND MSGLEVEL IS < 1, THEN...
002*        #TPUT 0,ZIL1103             TELL USEˇ
60002*FTMSG0  DS    0H                  --- naaah, don't bother with thi
70002*******************************************************************
80002         LR    #11,#2              CONTINUE, USING MAX STAˇ
6590002         B     GOSTACK
6600002REG0OK   DS    0H
6610002         LR    #11,#0              PUT INTO A USEABLE REGISTER
 06620002GOSTACK  DS    0H
 06630002         L     #2,ZLCPDADR         LOAD UP BOTTOM OF STACK AGAI
 06640002GCPDLOOP DS    0H
 06650002    ˇ
   06660002         BNL   GCENDPD
   06670002         LR    #15,#2              POINT TO WHAT'S DOING THE
   06680002         L     #1ˇ
     06690002         #BAS  #14,MARKLIST        INVOKE MAIN GC ROUTINE O
     06700002NOMKPD   DS    0H
     06710002         LA    #2,4(,#2)      ˇ
       06720002         B     GCPDLOOP            AND CONTINUE.
       06730002GCENDPD  DS    0H
       06740002*                                          ˇ
         06750002* NOW PROCESS INPUT PARAMETERS TO CONS.
         06760002*
         06770002* SINCE THIS IS A CONS-TO-BE, WE DON'T MARK IT AS SUCH,
E          06780002ˇÁ
                         06790002*
                         06800002         LA    #15,ZSAVED1          POI
VED REG 1 ON ENTRY       06810002 ˇ
A NUMBER                   06820002         BNL   GCVS                 T
, NO POINTERS TO MARK      06830002         L     #1,0(,#15)           E
CAR-TO-BE                  06840002         #BAS ˇ
MAIN GC ROUTINE ON IT        06850002         LA    #15,ZSAVED2
O SAVED REG 2 ON ENTRY       06860002         L     #1,0(,#15)
-TO-BE                       06870002         #BAS  #14,MARKLISTˇ
E MAIN GC ROUTINE ON IT        06880002******** B     GCVS
                               06890002         EJECT
                               06900002GCVS     DS    0H

                                 06920002* NOW WE GO THROUGH ALL THE OBJ
T HAVE BEEN RELOCATED (SO FAR)   06930002* FROM THE OLD VECTOR/STRING SP
HE NEW VECTOR/ˇ
 SIMILAR OBJECTS HERE THAT         06950002* POINT TO STILL OTHER OBJECT
VE TO GO THROUGH THEM (THEY MAY    06960002* EVEN RELOCATE OTHER VECTOR/
PACE OBJECTS THAT WILL END UPˇ
WE'RE CONSTANTLY CHASING A MOVING    06980002* END-OF-SPACE POINTER).  W
INALLY REACH THE END (PANT PANT),    06990002* WE'RE FINISHED, SO SWAP S
THE FIRST ONE NOW WILL LATER BE      0700000ˇ
COLLECTED.                             07010002*
                                       07020002* ZLCVSOTH POINTS TO NEW
ILL BECOME THE OLD SPACE)              07030002* VSPTR POINˇ
LOCATED NEW SPACE (IT'S VOLATILE)        07040002*
                                         07050002         L     #2,ZLCVS
    GET POINTER TO NEW V/S SPACE         07060002GCVSLOOP DS    0H
                                           07070002         C     #2,VSP
      DO UNTIL NO MORE NEW V/S OBJECTS     07080002         BNL   GCVSEN
                                           07090002         CLI   ##TYPE
YMBOL IF ˇ
        THEN GO COLLECT LIKE A VECTOR        07110002         CLI   ##TY
#DFLOAT IF OBJECT IS A DOUBLE-FLOAT          07120002         BE    DFCO
        THEN GO COLLECT ˇ
,##ATOM+##VSS IF ATOM AND VSS BITS NOT ON      07140002         BNO   BA
          THEN FORWARDED OBJECT OR WORSE ERROR 07150002         TM    ##
,##VEC    IF THIS IS NOT A VECTOR-TYPE +
            THEN COLLECT AS A STRING ˇ
L             ELSE GO COLLECT LIKE A VECTOR        07180002         SPAC
                                                   07190002SYMCOLL  DS
              COLLECT SYMBOL IN V/S SPACE          0ˇ
                USE SYMBOL LENGTH (IGNORE LEN FLD)   07210002         LA
#SYMLEN(,#2)    PASS ADDRESS OF END OF SYMBOL        07220002         B
CAN             AND COLLECT LIKE A VECTOR            07230002      ˇ
                                                       07240002DFCOLL
                  COLLECT DOUBLE FLOAT IN V/S SPACE    07250002*
                  USE OBJECT LENGTH (IGNORE LEN FLD)   07260002
,1ˇ
GCVSLOOP            SKIP OVER IT, NO POINTERS TO COLLECT 07280002
1                                                        07290002VECCOLL
0H               ˇ
                                                           07310002* COL
TOR OR SYMBOL BY PROCESSING ALL ITEMS POINTED TO THEREIN.  07320002*
                                ˇ
    #1,#1               CLEAR INSERT REGISTER                07340002
M   #1,7,1(#2)          GET VECTOR LENGTH                    07350002
Z   *+8                 IF ZERO (YOU NEVER KNOWˇ
LA    #1,1                 FORCE POSITIVE LENGTH               07370002
LA    #0,4+3(#1,#2)       LENGTH + 4 FOR PREFIX AND...         07380002
N     #0,=X'FFFFFFFC'      ROUND UP TO FULLWORD BOUNDARY      ˇ
  DS    0H                  #0 POINTS TO END OF OBJECT           0740000
  LA    #15,##VECDAT(,#2)   <== this was a bug!!!!  fixed below  0741000
  LA    #2,##VECDAT(,#2)    POINT TO START OF VECTOR DATA        0741100
    ST    #0,ENDVEC           STORE ADDRESS OF END OF VECTOR       07420
OP  DS    0H                  LOOP FOR ALL ELEMENTS OF VECTOR      07430
    C     #2,ENDVEC           UNTIL LAST VECTOR SLOT               07440
    BNL   VEˇ
      LR    #15,#2              POINT TO POINTER TO LISP OBJECT      074
      L     #1,0(,#15)          LOAD POINT TO OBJECT                 074
      #BAS  #14,MARKLIST   ˇ
        LA    #2,4(,#2)           BUMP TO NEXT VECTOR ELEMENT          0
        B     VECLOOP             CONTINUE LOOPING                     0
ECEND   EQU   GCVSLOOP            END OF Vˇ
2         SPACE 1
2GCVSSTR  DS    0H                  GC THIS (RELOCATED) STRING
2*                                  (WE DON'T DO NUTHIN W ITH IT)
002ˇÁ
         07550002         XR    #1,#1               CLEAR INSERT REGISTE
         07560002         ICM   #1,7,1(#2)          GET LENGTH OF THIS O
         07570002 ˇ
           07580002         LA    #1,1                IF ZERO, ASSUME SO
H          07590002GCVSADIT DS    0H                  ADD LENGTH TO ADDR
BJECT      07600002         LA   ˇ
             07610002         N     #2,=X'FFFFFFFC'      ROUND UP TO FUL
UNDARY       07620002         B     GCVSLOOP            CONTINUE LOOPING
             07630002GCVSEND  DS    0H          ˇ
 SPACES        07640002         L     #1,VSPTR            END-OF-USED-SP
TER            07650002         ST    #1,ZLCVSNXT         WILL BE @ AVAI
OT             07660002         L     #1,ZLCVSADR              ˇ
                 07670002         L     #2,ZLCVSOTH
                 07680002         ST    #2,ZLCVSADR         OLD BECOMES
                 07690002         ST    #1,ZLCVSOTH         AND NEW BECO
D                  07700002*
                   07710002* NOTE THAT WE HAVEN'T CLOBBERED THE OLD (NOW
ACE, AT LEAST      07720002* THE PART FOLLOWING THE OLD ZLCVSNXT POINTER
EDLY, WE DID ˇ
.  THIS IS VERY      07740002* IMPORTANT, SINCE STRING-BUILDING CODE MAY
HE MIDDLE OF         07750002* SOMETHING THERE AND WE WANT TO LET THEM S
R AGAIN.  SEE READ.  0776000ˇ
                       07770002         EJECT
                       07780002FIXHASH  DS    0H
                       07790002*           ˇ
                       * 07800002*   GO THROUGH THE OBLIST HASH ARRAY AN
TE ALL THE NONZERO     * 07810002*   SYMBOL POINTERS THEREIN.  SINCE ALL
OLS HAVE ALREADY       * 07820002*   BEEN COLLECTED (WHEN ˇ
S COLLECTED), WE KNOW    * 07830002*   THEY'VE ALL BEEN FORWARDED, SO JU
THE FORWARDING POINTERS. * 07840002*
                           07850002*------------------------------------
---------------------------- 07860002         AIF   (&ZILVF).VFH
                             07870002*----------------------------------
---------------------------- 07880002         L     #2,ZLCOBHSH
ess of oˇ
of slots in array              07900002         SLA   #0,2
t to size of hash array        07910002         AR    #0,#2
t to address of end of +
e address of end     ˇ
op through hash table entries      07940002         CR    #2,#0
til end of hash array              07950002         BNL   FHEND
                                   0ˇ
Get symbol pointer from hash array   07970002         BZ    FHCONT
If zero, skip                        07980002         TM    ##TYPE(#2),#
If atom bit on,                      07990002      ˇ
  then symbol wasn't forwarded, error  08000002         L     #14,##VECD
  else get forwarding pointer          08010002         ST    #14,0(,#2)
  and store back into hash array       08020002FHCONT   LA    #2,4ˇ
    Bump to next hash table entry        08030002         B     FHLOOP
    Continue looping                     08040002FHEND    DS    0H
    End of hasl table loop               08050002*----------------------
-ˇ
                                           08070002*--------------------
------------------------------------------ 08080002.VFH     ANOP
                ˇ
-------------------------------------------- 08100002         SPACE 1
                                             08110002*******************
*******************************ˇ
                                             * 08130002*
 vector code here! ***                       * 08140002*
                                             *ˇ
ll the symbol pointers in the oblist hash      * 08160002* array by repl
ch nonzero pointer with the contents of        * 08170002* the symbol fo
 pointer.  Currently the VLI (load indirect)   * 08180002* inˇ
 to perform the pointer loading.                 * 08190002*
                                                 * 08200002* The method
ing zero entries in the (usually sparse) array   * 08210002* (since VLI
t honor the vector mask mode or otherwise have a   * 08220002* means of
essing certain elements) is currently to compare   * 08230002* the vecto
ts with zero, generating a vector mask, and doing  * 08240002* a LOAD MA
at replacesˇ
value that, when relocated by VLI, does the "right   * 08260002* thing",
ts a zero back into the vector.  This value is the   * 08270002* address
eld in this module whose #ˇ
ould do a STORE MATCHED, I suppose, but that might be  * 08290002* slowe
 and besides, we don't want to depend on the data      * 08300002* point
 zero being available.)                                 * 08310002ˇÁ
*                                                                     *
2* A better approach might be to build a 65536-bit bit vector, use     *
2* VLBIX to create a mask describing nonzero hash array elements, and  *
2*ˇ
002* words, we'd be using a VLI in its intended mode followed by a VLI
002* in its unintended mode.  But I don't feel like allocating yet
002* another chunˇ
80002*
90002* Also:  VLVCU could be used to control the looping through the
00002* vector processing, but weˇ
8410002* be faster (is that why SKH does it that way in the sweep???),
8420002* and we don't need the functionality because we know that the
8430002* oblist hash array, like the section siˇ
 08440002* of 2 in length.
 08450002*
 08460002* Note: No validity checking of symbol forwardedness ˇ
 * 08470002* code.  Hopefully this was adequately checked out while we w
 * 08480002* operating with the scalar version of the algorithm!
 * 08490002*
   * 08500002***********************************************************
**** 08510002         SPACE 1
     08520002         L     #2,ZLCOBHSH         Get address of oblist ha
     0853000ˇ
       08540002         LR    #5,#2               Another copy of addres
       08550002         SLA   #0,2                Convert to size of has
       08560002         AR ˇ
 array   08570002         LA    #1,##VECDAT         Constant offset to g
rdg ptrs 08580002         LA    #14,VFHFAKE         Constant fakeout to
 zero's  08590002         XR    #15,#15   ˇ
           08600002         VSVMM 0                   Set vector mask mo
for VSRL)  08610002         VLVCA 512                 Set maximum sectio
           08620002VFHLOOP  DS    0H                     ˇ
             08630002         VL    #V0,#2              Load 128 hash ar
ents         08640002         VCQ   #VE,#15,#V0         Vector mask = 1'
ro elements  08650002         VLMQ  #V0,#14             Replace zeroes w
ake" in vector 08660002         VSRL  #V1,#V0,2           Convert addres
ffsets (/ 4)   08670002         VLI   #V2,#V1,0(#1)       Load symbol fo
 pointers      08680002         VST   #V2,#5              Store 128 ptrs
to hash+
ble eˇ
array              08710002         B     VFHEND              End loop (
round data)        08720002         SPACE 1
                   0ˇ
zero from here       08740002VFHFAKE  EQU   VFHZERO-##VECDAT    Fakeout
cating zero elements 08750002         SPACE 1
                     08760002VFHENDˇ
ble loop               08770002         SPACE 1
                       08780002*----------------------------------------
---------------------- 08790002.VFHEND  ANOP      ˇ
                         08800002*--------------------------------------
------------------------ 08810002         EJECT
                         08820002         SPACE 1                ˇ
                           08830002         AIF   (NOT &ZILXA).NOSER2
                           08840002*************************************
************************** 08850002*
ˇ
ring space, or at least as * 08870002* much as we care to.
                           * 08880002*
               ˇ
****************************** 08900002         SPACE 1
                               08910002         ICM   #1,15,PGSERVSA
re was enough old VSS to      ˇ
eload, now release it.           08930002         L     #15,PGSERVSE
t addresses for PGSER            08940002         PGSER R,RELEASE,A=(1),
Release old used space           08950002NOPGˇ
                                   08960002.NOSER2  ANOP
                                   08970002         EJECT
                                   08980002SWEEP    DS    0Hˇ
                                     08990002*
                                     09000002* NOW WE ARE FINISHED WITH
ING PHASE.  NOW BUILD NEW FREE LIST  09010002*
                                       09020002*------------------------
-------------------------------------- 09030002         AIF   (&ZILVF).V
                                       09040002*------------------------
----------ˇ
    CLEAR FREE CELL COUNT                09060002         XR    #6,#6
    CLEAR FREE LIST POINTER              09070002         LR    #7,#3
    GET ADDRESS OF CONS S PACE            09080002ˇÁ
0H                                                       09090002
#7,#4               DO UNTIL END OF CONS SPACE           09100002
ENDSW                                                    09110002 ˇ
  #7,NO=SWFREE        IF THIS CELL IS MARKED, THEN...      09120002
  #7                  REMOVE MARK                          09130002
  SWINCR              ELSE                                 09140002SWFRE
 ˇ
    #5,1(,#5)           INCREASE COUNT OF FREE CELLS         09160002
R   #6,#6               IF FREE LIST POINTER NOT SET YET     09170002
Z   SWFRESET    ˇ
LR    #9,#7                SET INITIAL FREE CELL POINTER       09190002
B     SWARESET            ELSE...                              09200002S
ST    #7,##CDR(,#6)        SET ˇ
T DS    0H                                                       0922000
  L     #0,=X'FF404040'     PUT JUNK IN FIRST HALF 4 DEBUGGING   0923000
  XR    #1,#1               SET LINK TO ZERO  ˇ
    STM   #0,#1,##CAR(#7)     INITIALIZE FREE CELL CONTENTS        09250
    LR    #6,#7               NEW LATEST FREE CELL = THIS ONE      09260
R   DS    0H                                                 ˇ
      LA    #7,8(,#7)                                                092
      B     SWLOOP                                                   092
SW    DS    0H                                                       093
                                                                       0
 Code to expand dynamically growing CONS space in SCALAR assembly      0
                                                                       0
-----------ˇ
2* If the amount of free space remaining is below the threshold        *
2* (currently 1/2), then we dynamically expand the cons space by       *
2* bringing in another secˇ
002* space (equal in size to what we already have active) and
002* chaining it to the existing free list.
002*                                     ˇ
00002* At this point, register 3 = ZLCGCACP which is the pointer to the
10002* bottom of the active CONS space.
20002*--------------------------------------------------ˇ
9430002         STM   #14,#11,VSAVE       Store registers
9440002         L     #7,ZLCGCACD         Total # of CONS cells in activ
9450002         SRL   #7,1                Divide this number by 2      +
 09460002         CR    #5,#7               Compare free # found withˇ
l  09470002         BH    SCNOMORE            More than half is still fr
   09480002         C     #3,ZLCCSADR         Compare with absolute bott
   09490002         BNH   SCNOMORE            Can't expand if it's alrea
   0ˇ
tes  09510002         LR    #8,#4               Compute address of botto
     09520002         SR    #8,#7                active size (top - new
     09530002      ˇ
d      09540002         BNL   SCEXPOK             then
       09550002         L     #8,ZLCCSADR          use total allocated
       09560002SCEXPOK  ST    #8,Zˇ
         09570002         ST    #8,VSAVE+5*4        Set saved #3 to CONS
ound     09580002         LR    #7,#4               (don't change live #
d)       09590002         SR    #7,#8            ˇ
ew active  09600002         SRL   #7,3                 CONS space and co
 number of 09610002         ST    #7,ZLCGCACD           doublewords, and
is value   09620002*                                            ˇ
             09630002         LR    #7,#3               Get old bottom-o
ddress       09640002         SR    #7,#8               Subtract new low
m-of-CONS    09650002         SRL   #7,3                Divide by 8 to g

free count     09670002         LR    #1,#8               Point to first
 new block     09680002         L     #14,=X'FF404040'    PUT JUNK IN FI
 4 DEBUGGING  ˇ
                 09700002         CR    #1,#3               Loop until e
w block          09710002         BNL   SCFEND
                 09720002    ˇ
t-initialized cell 09730002         STM   #14,#15,##CAR(#1)   Initialize
ll contents        09740002         LR    #1,#15              Get next c
e made free        09750002         B     SCˇ
 cells in block      09760002SCFEND   DS    0H                  #1 point
 of new block        09770002         SH    #1,=H'8'            Bump bac
t cell in new block  09780002         XR    #2,#2          ˇ
ter to zero            09790002         ST    #2,##CDR(,#1)        (i.e.
 end of new free list) 09800002         L     #1,ZLCGCACP         Get pt
 active space again    09810002         LTR   #6,#6               Get po
to old last free cell    09820002         BZ    SCXNFREE            If t
 one, then               09830002         ST    #8,##CDR(,#6)        hoo
ee list to end of old    09840002         B     SCXAF               else
e cells i n old space)    09850002ˇÁ
     set saved #9 to 1st new free cell   09860002SCXAF    DS    0H
    Now we have one good free list.      09870002         ST    #5,VSAVE
    SET NEW VALUE OF #5 (FREE COUNT)     09880002*ˇ
                                           09890002* Not required, but i
e ever use ZLCGCACF...                     09900002*
                                           09910002         ST   ˇ
        Save last-uncovered # of free cells  09920002*
                                             09930002* End of code that
GCACF                                        09940002*
ˇ
AVE       RELOAD SAVED REGS AND UPDATED #5     09960002*              #9
nts to the beginning of the free list.         09970002         B     GC
               ˇ
                                                 09990002SCNOMORE ST
+7*4        SET NEW VALUE OF #5 (FREE COUNT)     10000002         LM
VSAVE       RELOAD SAVED REGS ˇ
                                                   10020002         BNZ
K                                                  10030002         L
GCEND         NO CELLS FOUND, ZERO REG 9     ˇ
ECK             Jump out of here                     10050002*----------
---------------------------------------------------- 10060002         AG
EEP                                                  1007000ˇ
------------------------------------------------------ 10080002.VSWEEP
                                                       10090002*--------
-----------------------------------------------------* 10100002*   VECTO
ESSOR OPTION FOR THE GARBAGE COLLECTOR SWEEP PHASE     * 10110002*
                                                       * 10120002*  Ther
ree versions so far of the sweep phase for this        * 10130002*  vers
he garbageˇ
h it runs very fast.  It creates a free-list which       * 10150002*  ju
ultiples of 128 words, which results in catastrophic     * 10160002*  de
on of the cache updating ˇ
ht be remedied by using 127-word vectors, but the other    * 10180002*
ms are cleaner and at least almost as fast.                * 10190002*
                                        ˇ
 algorithm B is a precursor to vector algorithm C.           * 10210002*
thm B first does the sweep, and then creates the free-list.  * 10220002*
equires going through the CONS space twice.  Algorithm +
oves on this by sweeping only about as far as is neceˇ
 create a full vector section of 128 free-cells.  This results   * 10250
 a sweep phase speed improvement of about 20%.                   * 10260
other advantage of algorithm C over A is that it leaves the      * 1ˇ
free-list in the same form as the scalar version does, which is    * 102
the best, namely, ascending and contiguous when possible.          * 102
                                                                   * 103
Algˇ
  of the bit vector and simply buffering up a dozen or so sections   * 1
  of pointers to free cells, and then doing indirect stores          * 1
  (creating the frˇ
2*                                                                     *
2*  But we drop work on Version D to explore more interesting          *
2*  mark and copy, mark and compaˇ
002*  and threaded copying and updating GC possibilities for the
002*  Vector Facility.
002*--------------------------------------------ˇ
00002         AGO   .VECTORC
10002         B     VBSTART             ---TEMPORARY---
20002*                                                         ˇ
0430002         STM   #14,#7,VSAVE
0440002         SR    #4,#3
0450002         SRL   #4,4
 10460002         CL    #4,LASTFREE
 10470002         BH    BVA
 10480002         LM    #14,#7,VSAVE
 10490002    ˇ
   10500002BVA      LM    #14,#7,VSAVE
   10510002         EJECT
   10520002*----------------ˇ
---* 10530002*      VECTOR SWEEP "A" ROUTINE
   * 10540002*
   * 10550002*  IN THE FOLLOWING DISCUSSIONˇ
     * 10560002*  128 REFERS TO THE SECTION SIZE OF A 3090 VECTOR FACILI
     * 10570002*  A SECTION SIZE OF 128.  ACCORDING TO THE IBM SYSTEM/37
     * 10580002*  OPERATIONS MANUAL, THE SECTION SIZE MAY ˇ
E      * 10590002*  MODEL FROM 8 TO 512.  ANY REFERENCE HERE TO A SECTIO
F      * 10600002*  128 CAN BE SUBSTITUTED WITH THE SECTION SIZE OF A PA
       * 10610002*  MODEL OF THE VECTOR FACILITY.  THE VECTOR SWEEP ALGO
 ARE     * 10620002ˇÁ
                       * 10630002*
                       * 10640002*  THIS VECTOR SWEEP ALGORITHM IS PERFO
ONE PASS.  MARKED      * 10650002*ˇ
 THE VECTOR MASK IS      * 10660002*  SET TO INDICATE WHICH CELLS ARE FR
ONDITIONAL, VECTOR-      * 10670002*  MASK-CONTROLLED INSTRUCTIONS STORE
E FREE CELLS THE         * 10680002*  ADDRESSES Oˇ
ELLS.  THEN                * 10690002*  THE ADDRESSES OF THE CURRENT FRE
ARE GENERATED AND          * 10700002*  ARE USED TO UPDATE THE ADDRESSES
"LAST ENCOUNTERED"         * 10710002*  FREE CELLS.  THESE OPERAˇ
ICALLY CONSTITUTE THE        * 10720002*  MAJORITY OF THE PROCESSING TIM
HERE IS MOSTLY COLLECTIBLE   * 10730002*  MATERIAL.  A SIMPLE EXAMPLE OF
M THE FREE LIST MIGHT TAKE   * 10740002*  IS ILLUSTRATED HERE.

                               * 10760002*  A VECTOR SECTION SIZE OF 4 I
D FOR ILLUSTRATIVE             * 10770002*  CONVENIENCE.  CELLS MARKED W
R AND A CDR WEˇ
 CAR SET, INDICATING THAT THEY   * 10790002*  CANNOT BE ADDED TO THE FRE
 THE REST WERE COLLECTED INTO    * 10800002*  A FREE LIST WHICH MAKES "R
AN" THROUGH MEMORY.  THAT IS,ˇ
S OF SECTION SIZE ARE LINKED       * 10820002*  TOGETHER FROM TOP TO BOT
HE CONS SPACE.  THE LAST CELL      * 10830002*  IN THIS CHAIN IS LINKED
IGHEST FREE CELL WHICH IS AT       * 1084000ˇ
 OF THE SECTION SIZE + 1.  THE       * 10850002*  LINKED LIST BELOW ILLU
THIS.  REGISTER 9 IN THIS CASE       * 10860002*  WOULD CONTAIN 296, THE
N OF THE FIRST FREE CELL.  THE       * 10870002*  CONS CELLˇ
 THE LAST CELL IN THE FREE LIST.       * 10880002*
                                       * 10890002*  IN THIS EXAMPLE, YOU
NK OF THE VECTOR FACILITY AS SWEEPING  * 10900002*  DOWN ACROSS THESE CE
E WAY A HORIZONTAL RULER PULLED DOWN     * 10910002*  THE PAGE WOULD SWE
THESE CELLS.  THE INDIVIDUAL INCH        * 10920002*  MARKERS ON THE RUL
 CORRESPOND TO THE VECTOR ELEMENTS.      * 10930002*  EACH ELEMENT IN TH
 PROCESSOˇ
HENCE, ONE ROW IS PROCESSED BY THE         * 10950002*  VECTOR FACILITY
Y PASS THROUGH THE LOOP.                   * 10960002*
                        ˇ
                                             * 10980002*
                                             * 10990002*
                                       +
                                     ˇ
                                                 * 11020002*  +---+
                                                 * 11030002*  ◊296◊
                                                 * 1ˇ
                                                   * 11050002*
                                                   * 11060002*
                                                   * 11070002*  200ˇ
   208 212          216 220          224 228         * 11080002*  +---+-
   +---+---+        +---+---+        +---+---+       * 11090002*  ◊CAR◊C
   ◊   ◊312◊        ◊CAR◊CDR◊        ◊CAR◊CDR◊       * 11100002*  +---+-
  ˇ
                                                       * 11120002*
                                                       * 11130002*
                 ˇ
       240 244          248 252          256 260         * 11150002*  +-
       +---+---+        +---+---+        +---+---+       * 11160002*  ◊C
       ◊CAR◊CDR◊        ◊CAR◊CDRˇ
+        +---+---+        +---+---+        +---+---+       * 11180002*
                                                           * 11190002*
                                               ˇ
                                                             * 11210002*
8          272 276          280 284          288 292         * 11220002*
--+        +---+---+        +---+---+        +---+---+       *ˇ
◊CDR◊        ◊   ◊208◊        ◊CAR◊CDR◊        ◊CAR◊CDR◊       * 1124000
+---+        +---+---+        +---+---+        +---+---+       * 1125000
                                                               * 1126000
                                                                 * 11270
                                                                 * 11280
6 300          304 308          312 316          320 324         * 11290
--+---+     ˇ
◊   ◊232◊        ◊   ◊272◊        ◊   ◊352◊        ◊   ◊  0◊       * 113
+---+---+        +---+---+        +---+---+        +---+---+       * 113
                           ˇ
                                                                     * 1
                                                                     * 1
  328 332          336 340          344 34ˇ
2*  +---+---+        +---+---+        +---+---+        +---+---+       *
2*  ◊CAR◊CDR◊        ◊   ◊304◊        ◊CAR◊CDR◊        ◊   ◊320◊       *
2*  +---+---+        +---+---+        +---+---+        +- --+---+
002ˇÁ
       * 11400002*  THE MAIN LOOP (VA3) IN THE THIS VECTOR ALGORITHM IS
HORT,  * 11410002*  CONSISTING OF ONLY 6 MAIN VECTOR INSTRUCTIONS AND SO
R      * 11420002*ˇ
INED     * 11430002*  WITH THE FACT THAT THIS ALGORITHM MAKES ONLY ONE P
IMIZING  * 11440002*  LOAD ON THE CACHE), MAKES IT QUITE FAST.
         * 11450002*             ˇ
           * 11460002*  MOST OF THE COMPLEXITY OF THE ALGORITHM STEMS FR
           * 11470002*  THE NEED TO KEEP TRACK OF THE BEGINNING AND END
           * 11480002*  FREE LIST (ONE MADE BY Eˇ
) AND        * 11490002*  LINKING THE ENDS TOGETHER TO MAKE ONE FREE LIS
 OF THE      * 11500002*  SHORTER FREE LISTS MAY HAVE ONLY ONE ELEMENT,
ELEMENTS MAY * 11510002*  HAVE FAILED TO ENCOUNTER ANY FREE CELˇ
NK MUST BE     * 11520002*  MADE TO JUMP ACROSS SUCH A COLUMN.  THIS IS
NTLY DONE VIA  * 11530002*  STORE-COMPRESSED VECTOR INSTRUCTIONS (VSTK).
               * 11540002*
                 * 11550002* REGISTER USAGE FOR VECTOR SWEEP "A":
                 * 11560002*
                 * 11570002* #0  - POINTER FOR VNS VECTOR INSSTRUCTION
             ˇ
                   * 11590002* #2  - POINTER FOR VST VECTOR INSTRUCTION
                   * 11600002* #3  - POINTER FOR VSTMD VECTOR INSTRUCTIO
                   * 1161000ˇ
                     * 11620002* #5  - FREE CELL COUNT
                     * 11630002* #6  - CONSTANT 2 = STRIDE OF CONS CELL
E WORDS              * 11640002* #7  - POINˇ
                       * 11650002* #8  - (SEC SIZE - 1) CELLS LESS THAN
ONS SPACE              * 11660002*       TO HELP DETECT WHEN THE END OF
NG LOOP OCCURS         * 11670002* #9  - USED TO REBUILD Tˇ
                         * 11680002* #10 - ONE LESS THAN THE SECTION SIZ
N IBM 3090)              * 11690002* #11 - POSSIBLY BUT NOT NECESSARILY
 STACK PROCESSING        * 11700002* #12 - LOCAL BASE REGISTER FOR THIS
E                          * 11710002* #13 - THE COMMON AREA, AS IN THE
LD                         * 11720002* #14 - CONSTANT 8 = STRIDE OF CONS
TES                        * 11730002* #15 -
        ˇ
                             * 11750002* VECTOR REGISTER USAGE
                             * 11760002*
                       +
                     ˇ
LS                               * 11790002* #V2 - PATTERN X'FF404040' S
 CAR OF FREE LIST CELLS          * 11800002* #V3 - ADDRESS OF LAST FREE
ND BY VECTOR ELEMENT             * 1ˇ
                                   * 11820002* #V5 - ADDRESS OF FIRST FR
FOUND BY VECTOR ELEMENT            * 11830002*--------------------------
-----------------------------------* 11840002VASTARˇ
                                       11850002         SPACE 1
                                       11860002*
                                       11870002* ===> SEB1525 - GEˇ
                                         11880002*
                                         11890002         ICM   #1,15,ZL
    GET ADDRESS OF GC SWEEP WORK AREA    11900002         BNZ   VAGOTWA
 ˇ
       GET LENGTH OF WORK AREA NEEDED      11920002         ST    #0,ZLC
       SAVE LENGTH                         11930002         #GETMAIN RC,
OC=ANY TRY TO GEˇ
         IF FAILED                           11950002         BNZ   GERR
         THEN DISASTER                       11960002         ST    #1,Z
         ELSE STORE ADDRESS OF ˇ
                                               11980002         SPACE 1
                                               11990002         STM   #1
VE        SAVE REGISTERS DURING VECTOR SWEEP  ˇ
            VECTOR MASK MODE NOT WANTED          12010002*
                                                 12020002         VSTVP
            GET SECTION SIZE (= MAX VEC COUNT)   12030002    ˇ
              RIGHT JUSTIFY THE SECTION SIZE       12040002         BCTR
              WE NEED ONE LESS THAN MULTIPLE OF    12050002         VLVC
              SET VECTOR COUNT TO MAX-1            12060002*
                                                     12070002         L
X'FF404040'     FREE-LIST CAR PATTERN FOR DEBUGGING  12080002         VR
111111'         CLEAR ALL VECTOR REGS, ZERO THE VIX  12090002         VL
#1         ˇ
,#3               ADDRESS OF FRST CAR TO LOAD AND MASK 12110002
,#3               ADDRESS OF FIRST CAR TO COMPARE      12120002
,#3               ADDRESS ˇ
#5,#5               CLEAR COUNT OF FREE CELLS            12140002
#6,2                STRIDE TO SAME HALF OF NEXT CONS     12150002
#7,#3               ADDRESS FOR GENERATIN G VEC OF POINTR 12160002ˇÁ
*
2         SLL   #10,3               VECTOR COUNT IN EQUIV. CONS BYTES
2         LR    #8,#4               GET TOP OF CONS SPACE
2 ˇ
002         SRL   #10,3               RESTORE VECTOR COUNT TO # OF ELEMN
002*
002         L    ˇ
30002         LA    #14,8               CONS-CELL-STRIDE IN BYTES
40002         LA    #15,VMASK           ADDRESS FOR VECTOR MASK
50002*--------------------------ˇ
2260002*      PROCESS THE FIRST VECTOR SECTION OF CONS CELLS
2270002*----------------------------------------------------------------
2280002         VNS   #V0,#9,#0(#6)       LOAD ˇ
 12290002         VC    #VE,#V0,#1(#6)      SET MASK BITS AT UNMARKED CE
 12300002         VST   #V0,#2(#6)          STORE ALL 128 GC-BIT-CLEARED
 12310002         VSTMD #V2,#3              NOT MUCH STORED, Bˇ
   12320002         VCOVM #5                  UPDATE COUNT OF FREE CELLS
   12330002         VLINT #V1,#7(#14)         LOAD ADDRESSES OF THESE 12
   12340002         VLMR  #V3,#V1             UPDATE ONLY FREED POINTER
TS   12350002         VLMR  #V5,#V1             UPDATE POINTERS TO FIRST
LLS  12360002         BO    VA3GO               FREE CELL FOUND IN ALL E
     12370002         VCVM                      CONVERT BITS OF FOUND TO
ND   1238000ˇ
EE     12390002         CLR   #0,#4               COMPARE WITH END OF CO
       12400002         BNL   VAEND               ALL CONS CELLS PROCESS
       12410002*-----------ˇ
-------* 12420002*      CONTINUE CLEARING GC BITS AND FINDING FIRST FREE
       * 12430002*------------------------------------------------------
-------* 12440002VA2LOOP  LA    #15,VMASK ˇ
           12450002         VNS   #V0,#9,#0(#6)       LOAD 128 CDRS & CL
ITS        12460002         VC    #VE,#V0,#1(#6)      SET MASK BITS AT U
CELLS      12470002         VST   #V0,#2(#6)          STOˇ
ARED CDRS    12480002         VSTMD #V2,#3              STORE PATTERN, U
INTERS LATER 12490002         VCOVM #5                  UPDATE COUNT OF
LS           12500002         VLINT #V1,#7(#14)         LOAD ADDRESSES O
E 128 CELLS    12510002         VLMR  #V3,#V1             UPDATE ONLY FR
TER ELEMENTS   12520002         VNVM  #15                 AND FREE-FOUND
T-FOUND        12530002         LA    #15,VMASK           REINITIALIZE F
R MASK +
IRST ˇ
FREE WITH NO-FOUND 12560002         LA    #15,VMASK           REINITIALI
ECTOR MASK         12570002         VTVM                      TEST VECTO
SK                 1ˇ
 IN ALL ELEMENTS     12590002         VSTVM #15                 STORE NE
F NOT-FOUND FREE     12600002         CLR   #0,#4               COMPARE
 OF CONS SPACE       12610002      ˇ
S LEFT, CONTINUE       12620002*----------------------------------------
---------------------* 12630002*      TERMINATE WITH AN INCOMPLETE SECTI
F FREE CELLS AND     * 12640002*      LINK TOGETHEˇ
LISTS                  * 12650002*--------------------------------------
-----------------------* 12660002         VCVM                      MAKE
OUND FREE CELLS"         12670002* ===> SEB1525                  ˇ
                           12680002         L     #1,ZLCGCBVA         PO
VTEMP" WORK AREA           12690002         VSTK  #V3,#1              ST
FIRST FREE-CELL ADDRESSES  12700002*
ˇ
ORE VSTK, THEN L #9,0(,#2)?  12720002*
                             12730002         L     #1,ZLCGCBVA
 "VTEMP" WORK Aˇ
DDRESS OF FIRST FREE CELL      12750002*
                               12760002* ===> SEB1525 CHANGED THE XC - Y
HANGE IT BACK IF YOU WANT     ˇ
                                 12780002******** XC    0(4,#1),0(#1)
 ONE FREE-CELL WILL BE 0         12790002         XR    #2,#2
R TO FOR COUNT-ALL-ONES          12800002    ˇ
ST ONE FREE-CELL WILL BE 0         12810002         VCOVM #2
UNT LISTS WITH FREE CELLS          12820002         BZ    VABZERO9
 FREE CELLS FOUND                  12830002*                ˇ
                                     12840002* ===> SEB1525 ASSUMES #1 S
NTS TO "VTEMP" HERE.  IS THIS TRUE?  12850002*
                                     12860002         LA    #1,4(,#1)
  OFFSET 1 WORD FOR ELEMENT-SHIFT      12870002         VLVCA 0(#2)
                                       12880002         VL    #V3,#1
                                       12890002* ===> SEB1525
          ˇ
                                         12910002         VLVCA 512
                                         12920002         VSTK  #V5,#1
                                          12930002ˇÁ
                                                         12940002
#1,ZLCGCBVA                                              12950002
0(#2)                                                    12960002 ˇ
  #V5,#1                                                   12970002
  #V5,#V5,3                                                12980002
D #V2,#V5,0                                                12990002
 ˇ
-----------------------------------------------------------* 13010002*
 BITS AND LINK FREE CELLS IN ALL ELEMENTS OF SECTION       * 13020002*
CASES, MOST OF Tˇ
-------------------------------------------------------------* 13040002V
CLR   #0,#4               ---THIS PATH HARD TO TEST---         13050002
BH    VAEND                    ˇ
                                                                 1307000
  VNS   #V0,#9,#0(#6)       LOAD 128 CDRS & CLEAR GC BITS        1308000
  VC    #VE,#V0,#1(#6)      SET MASK BITS AT Uˇ
    VST   #V0,#2(#6)          STORE ALL 128 GC-BIT-CLEARED CDRS    13100
    VSTMD #V2,#3              STORE PATTERN & POINTER TO LAST FREE 13110
    VCOVM #5                  UPDATE COUNT OF FREE CELLS     ˇ
      VLINT #V1,#7(#14)         LOAD ADDRESSES OF THESE 128 CELLS    131
      VLMR  #V3,#V1             UPDATE ONLY FREED POINTER ELEMENTS   131
      CLR   #0,#4                                                    131
        BL    VA3LOOP                                                  1
---------------------------------------------------------------------* 1
  TERMINATION - LINK TOGETHER ALL THE FREE LISTS                     * 1
-----------ˇ
2VAEND    DS    0H
2* ===> SEB1525
2         L     #1,ZLCGCBVˇ
002         VST   #V3,#1
002*
002* ===> SEB1525 - MAYBE YOU CAN LR #2,#ˇ
50002*
60002         L     #1,ZLCGCBVA
70002         L     #9,0(,#1)           SAVE POINTER TO ˇ
3280002         XC    0(4,#1),0(#1)       LAST FREE CELL MUST HAVE CDR=0
3290002* ===> SEB1525
3300002         LA    #1,4(,#1)           OFFSET 1 WORD FOR ELEMENT-SHI+
 13310002         VL    #V3,#1                                       ˇ
   13320002         VSRL  #V5,#V5,3
   13330002         VSTID #V2,#V5,0
   13340002         B     VARETURN
   1ˇ
     13360002.VECTORB ANOP
     13370002         EJECT
     13380002*- - -ˇ
- - -* 13390002* REGISTER USAGE FOR VECTOR SWEEP "B":
     * 13400002*
     * 13410002* #0  - POINTER FORˇ
       * 13420002* #1  - POINTER FOR VC VECTOR INSTRUCTION
       * 13430002* #2  - POINTER FOR VST VECTOR INSTRUCTION
       * 13440002* #3  - LOWER BOUND OF CONS SPACˇ
         * 13450002* #4  - UPPER BOUND OF CONS SPACE
         * 13460002* #5  - FREE CELL COUNT
         * 13470002* #6  - CONSTANT 2 = STRIDE OF CONS CELL IN 4ˇ
           * 13480002* #7  - TEMPORARY
           * 13490002* #8  - ADDRESS OF BIT VECTOR
           * 13500002* #9  - FFFFFFFC MASK, POINTER TO FREE LIST

             * 13520002* #11 - POSSIBLY BUT NOT NECESSARILY USED FOR STA
SSING        * 13530002* #12 - LOCAL BASE REGISTER FOR THIS ROUTINE
             *ˇ
               * 13550002* #14 - INDEX FOR VLBIX VECTOR INSTRUCTION
               * 13560002* #15 - BITVECTOR STORE POINTER, COUNT FOR VLBI
 INSTRUCTION   * 13570002*   ˇ
                 * 13580002* VECTOR REGISTER USAGE
                 * 13590002*
                 * 13600002* #V0 - MASKED CAˇ
                   * 13610002* #V1 - FREE CELL ELEMENT COUNTS * 8
                   * 13620002* #V2 - PATTERN X'FF404040' STORED AS CAR O
IST CELLS          * 13630002* #V3 - ADDRESS OF LAST FREE Cˇ
 ELEMENT             * 13640002*----------------------------------------
---------------------* 13650002VBSTART  DS    0H
                       13660002         ICM   #1,15,ZLCGCBVA      GET AD
OF GC SWEEP WORK AREA    13670002         BNZ   VBGOTWA             IF Z
N...                     13680002*--------------------------------------
-----------------------* 13690002* COMPUTE SIZE OF BIT VECTOR NEEDED.  T
NE BIT PE R CONS CELL,  * 13700002ˇÁ
BLEWORD.  THUS, THE TOTAL NUMBER OF    * 13710002* BYTES IN CONS SPACE,
BY 8 TO GET # OF DOUBLEWORDS, AND      * 13720002* DIVIDED AGAIN BY 8 TO
F BYTES TO HOLD THAT MANY BITS,        * 13730002*ˇ
F THE BIT VECTOR IN BYTES.               * 13740002*--------------------
-----------------------------------------* 13750002         VSTVP ZLCGCB
       Store vector parameters             13760002         LA   ˇ
         An extra double-word for tie        13770002         AH    #1,Z
         Add the section sizen size          13780002         SLL   #1,3
         Multiply by 8 - bytes for VTEMP     13790002         ST    #1,V
ˇ
E          get size of CONS space in dblwrds   13810002*
           the same as # of bits in bitvector  13820002         SRL   #0
           Convˇ
             Add for total length required       13840002*
                                                 13850002         LA
)                             ˇ
FFFFFFF8'      ROUND UPWN TO NEXT DOUBLEWORD       13870002         ST
GCBVL          SAVE LENGTH                         13880002         #GET
LV=(0),LOC=ANY TRY TO GET IT                 ˇ
#15              IF FAILED                           13900002         BN
OR               THEN DISASTER                       13910002         ST
LCGCBVA          ELSE STORE ADDRESS OF GC WA         1392000ˇ
4,#8,VSAVE        SAVE REGISTERS DURING VECTOR SWEEP   13930002
                  VECTOR MASK MODE NOT WANTED          13940002
2                 SET VECTOR COUNT TO MAXIMUM          13950002*
                                                         13960002
#8,ZLCGCBVA         GET ADDRESS OF GC WORK AREA          13970002
#8,VTEMPSZ          POINT TO OFFSET OF LONG BIT-VECTOR   13980002*
          ˇ
  #1,=X'FF404040'     FREE-LIST CAR PATTERN FOR DEBUGGING  14000002
  B'11111111'         CLEAR ALL VECTOR REGS, ZERO THE VIX  14010002
  #V2,#1              SPRˇ
    #9,=X'FFFFFFFC'     AND-MASK FOR CLEARING GC BITS        14030002
    #0,#3               ADDRESS OF FRST CAR TO LOAD AND MASK 14040002
    #1,#3               ADDRESS OF FIRSTˇ
LR    #2,#3               ADDRESS OF FIRST CAR TO STORE        14060002
XR    #5,#5               CLEAR COUNT OF FREE CELLS            14070002
LA    #6,2                STRIDE TO SAME HALF OF NEXT C+
  LR    #15,#8              GET ADDRESS OF LONG BIT-Vˇ
                                                                   14100
OP  VNS   #V0,#9,#0(#6)       LOAD 128 CARS & CLEAR GC BITS        14110
    VC    #VE,#V0,#1(#6)      SET MASK BITS AT UNMARKED CELLS      1ˇ
      VST   #V0,#2(#6)          STORE ALL 128 GC-BIT-CLEARED CARS    141
      VCOVM #5                  UPDATE COUNT OF FREE CELLS           141
      CLR   #0,#4               COMPARE WITH END OF CONS SPACE       141
   ˇ
        BL    VB1LOOP             NOT ALL CONS CELLS CLEARED           1
                                                                       1
        XR    #14,ˇ
2         L     #15,ZLCNFREE        Get number of cons cells
2         VLBIX #V0,#14,0(#8)       GENERATE OFFSET NUMBERS FOR SET BITS
2         VSLL  #V1,#V0,3        ˇ
002         L     #1,ZLCGCBVA         LOAD ADDRESS OF TEMP FREE POINTERS
002         LR    #9,#1               Save address of first element
002         VST   #V1,#1              STORE FREEˇ
50002         L     #9,0(,#9)           LOAD OFFSET TO FIRST FREE CELL
60002         LA    #9,0(#9,#3)         ADD TO BOTTOM TO GET ACTUAL POIN
70002         BO    VB2ONCE             ONLY ONE SECTION OF FREˇ
4280002         BZ    VABZERO9            NO FREE CELLS FOUND
4290002*
4300002VB2LOOP  L     #7,ZLCGCBVA         LOAD ADDRESS OF TEMP FREE POIN
 14310002         SH    #1,=H'4'            BACK UP ONE POINTER
 14320002         LA    #0,4(,#7)           GET SKEWED (BY 1) POINTER OF
 14330002         L     #7,0(,#1)           OFFSET OF FREE CELL TO BE UP
 14340002    ˇ
RS 14350002         VSTID #V2,#V0,0(#3)       CREATE A SECTION OF THE FR
   14360002         VLBIX #V0,#14,0(#8)       GEN MORE OFFSET NUMBERS OF
S  14370002         BZ    VBˇ
     14380002         L     #1,ZLCGCBVA         LOAD ADDRESS OF TEMP FRE
RS   14390002         VSLL  #V1,#V0,3           ELEMENT OFFSETS X 8 = BY
TS   14400002         LR    #2,#1          ˇ
ers    14410002         VST   #V1,#1              STORE FREE POINTERS IN
EA     14420002         L     #2,0(,#2)           GET OFFSET TO STORE IN
LL     14430002         LA    #2,0(#2,#3)         CALCULATˇ
N CELL   14440002         ST    #2,##CDR(#7,#3)     STORE INTO LINK FROM
CTOR     14450002         BP    VB2LOOP             (COND CODE FROM VLBI
ER SECT  14460002*
           14470002ˇÁ
POINTER                  14480002         L     #2,ZLCGCBVA         LOAD
 OF TEMP FREE POINTERS   14490002         L     #7,0(,#1)           OFFS
EE CELL TO BE UPDATED    14500002 ˇ
 (BY 1) POINTER OFFSETS    14510002         VAS   #V3,#3,#0           AD
TOM TO GET ACTUAL POINTERS 14520002         VSTID #V2,#V0,0(#3)       CR
ECTION OF THE FREE LIST    14530002*             ˇ
                             14540002VB2ZERO  XR    #2,#2
 0                           14550002         ST    #2,##CDR(#7,#3)
IN CDR OF LAST FREE CELL     14560002*                          ˇ
                               14570002         B     VBRETURN
                               14580002VABZERO9 L     #9,ZLCGCEND
LS FOUND, ZERO REG 9           14590002*

                                 14610002VARETURN ST    #5,VSAVE+7*4
NEW VALUE OF #5 (FREE COUNT)     14620002         LM    #14,#8,VSAVE
AD SAVED REGS ˇ
                                   14640002*----------------------------
---------------------------------- 14650002* VECTOR-C algorithm
                             ˇ
------------------------------------ 14670002.VECTORC ANOP
                                     14680002         EJECT
                                     1469000ˇ
- - - - - - - - - - - - - - - - - - -* 14700002* REGISTER USAGE FOR VECT
 "C":                                * 14710002*
                                     * 14720002* #0  - POINˇ
INSTRUCTION                            * 14730002* #1  - POINTER FOR VC
NSTRUCTION                             * 14740002* #2  - POINTER FOR VST
INSTRUCTION                            * 14750002* #3  - LOWER BOUND OF
PACE                                     * 14760002* #4  - UPPER BOUND O
PACE                                     * 14770002* #5  - FREE CELL COU
                                         * 14780002* #6  - CONSTANT 2 =
F CONS CEˇ
                                           * 14800002* #8  - ADDRESS OF
OR                                         * 14810002* #9  - FFFFFFFC MA
TER TO FREE LIST        ˇ
ls to reach before VLBIX can go              * 14830002* #11 - Bitvector
ointer                                       * 14840002* #12 - LOCAL BAS
ER FOR THIS ROUTINE                    +
, AS IN THE REAL WORLD               ˇ
IX VECTOR INSTRUCTION                            * 14870002* #15 - Count
IX vector instruction                            * 14880002*
                                                 * 1ˇ
SAGE                                               * 14900002*
                                                   * 14910002* #V0 - MAS
 OF CONS CELLS, also free cell index in VLBIX      * 14920002* #V1 ˇ
 ELEMENT COUNTS * 8                                  * 14930002* #V2 - P
'FF404040' STORED AS CAR OF FREE LIST CELLS          * 14940002* #V3 - A
F LAST FREE CELL FOUND BY VECTOR ELEMENT             * 14950002*
  ˇ
OF BIT VECTOR NEEDED.  THIS IS ONE BIT PER CONS CELL,  * 14970002* WHERE
NS CELL IS A DOUBLEWORD.  THUS, THE TOTAL NUMBER OF    * 14980002* BYTES
 SPACE, DIVIDED Bˇ
IN BY 8 TO GET # OF BYTES TO HOLD THAT MANY BITS,        * 15000002* GIV
EQUIRED LENGTH OF THE BIT VECTOR IN BYTES.               * 15010002*
                                ˇ
the first 130 words of the GETMAINED area.  All words      * 15030002* s
at #8 pointer (130th word = 129 by zero-based count).      * 15040002* S
he address pointer storages are indicated belowˇ
n indicates exactly where these storage locations point.     * 15060002*
                                                             * 15070002*
-----+-----+-----+-----+-----+-----//-----+-----+-----+-----+*ˇ
 ◊   1 ◊   2 ◊   3 ◊   4 ◊   5 ◊   6    126 ◊ 127 ◊blank◊bitv>◊* 1509000
-+-----+-----+-----+-----+-----+-----//-----+-----+-----+-----+* 1510000
GCBVA                                       @ VTEMPTOP  @ #8   * 1511000
   @ VTEMP4                                                      * 15120
                                                                 * 15130
this version of the sweep phase, washing of the cache is         * 15140
uced by doinˇ
he innermost loop, VC3LOOP, is performed only as many times        * 151
s is needed by the outer loop, VC2LOOP, so that it will have       * 151
nother 128 free-cells to chˇ
 the inner loop will spin many times for each iteration of the       * 1
 outer loop with the VLBIX instruction.  In areas where almost all   * 1
 cells are free, the inner loop will probaˇ
2* such that there is no extra looping in VC3LOOP when compared with   *
2* VC2LOOP.  VC3LOOP only spins extra when the outer loop is not       *
2* getting enough free cells.                            
002ˇÁ
-------* 15250002VCSTART  ICM   #1,15,ZLCGCBVA      GET ADDRESS OF GC SW
 AREA    15260002         BNZ   VCGOTWA             IF ZERO, THEN...
         15270002*ˇ
           15280002         VSTVP VGCVP                Store vector para
           15290002         LA    #1,1                 An extra word for
           15300002         AH   ˇ
 elements    15310002         SLL   #1,2                 Multiply by 4 -
or VTEMP     15320002         ST    #1,VTEMPSZ           Stor VTEMP size
             15330002         L     #0,ZLCNFREE ˇ
e in dblwrds   15340002*                                   the same as #
 in bitvector  15350002         SRL   #0,3                 Convert to #
 in bitvector  15360002         ALR   #1,#0                Add ˇ
h required       15370002*
                 15380002         LA    #0,7(,#1)
                 15390002         N     #0,=X'FFFFFFF8'      ROUND UP TO
DOUBLEWORD         15400002         ST    #0,ZLCGCBVL          SAVE LENG
                   15410002         #GETMAIN RC,LV=(0),LOC=ANY TRY TO GE
                   15420002         LTR   #15,#15              IF FAILED
             ˇ
                     15440002         ST    #1,ZLCGCBVA          ELSE ST
ESS OF GC WA         15450002VCGOTWA  STM   #14,#11,VSAVE       SAVE REG
URING VECTOR SWEEP   1546000ˇ
                       15470002         VSVMM 0                   VECTOR
DE NOT WANTED          15480002         VLVCA 512                 SET VE
NT TO MAXIMUM          15490002         L  ˇ
OF GC WORK AREA          15500002         LA    #7,4(,#8)           gene
ress for VTEMP4          15510002         AL    #8,VTEMPSZ          Poin
ress of long bitvector   15520002         ST    #7,VTEMP4 ˇ
ess for temporary load     15530002*
                           15540002         L     #1,=X'FF404040'     FR
CAR PATTERN FOR DEBUGGING  15550002         VRCL  B'11111111'         CL
L VECTOR REGS, ZERO THE VIX  15560002         VLQ   #V2,#1
ATTERN TO VECTOR OF CARS     15570002         L     #9,=X'FFFFFFFC'
 FOR CLEARING GC BITS        15580002         LR    #0,#3
OF FRST ˇ
S OF FIRST CAR TO COMPARE      15600002         LR    #2,#3
S OF FIRST CAR TO STORE        15610002         XR    #5,#5
COUNT OF FREE CELLS    +
DE TO SAME HALF OF NEˇ
rst half of VGCVP is section size  15640002         LR    #11,#8
T ADDRESS OF LONG BIT-VECTOR       15650002*
                                   1ˇ
LOAD 128 CARS & CLEAR GC BITS        15670002         VC    #VE,#V0,#1(#
SET MASK BITS AT UNMARKED CELLS      15680002         VST   #V0,#2(#6)
STORE ALL 128 GC-BIT-CLEARED CARS    15690002      ˇ
  UPDATE COUNT OF FREE CELLS           15700002         CLR   #0,#4
  COMPARE WITH END OF CONS SPACE       15710002         VSTVM #11
  STORE BIT MASK OF NOT FOUND FREE     15720002         BNL   VC1Dˇ
    NOT ALL CONS CELLS CLEARED           15730002         CLR   #5,#10
    Not 128 free cells found?            15740002         BL    VC1LOOP
    Try to find enough for at least 128  15750002*
 ˇ
      CLEAR BIT INDEX                      15770002         L     #15,ZL
      Get number of cons cells             15780002         VLBIX #V0,#1
      GENERATE Oˇ
        ELEMENT OFFSETS X 8 = BYTE OFFSETS   15800002         L     #2,Z
        LOAD ADDRESS OF TEMP FREE POINTERS   15810002         VST   #V1,
        STORE FREE POINTERS IN ˇ
A         LOAD ADDRESS OF TEMP FREE POINTERS   15830002         L     #6
          LOAD OFFSET TO FIRST FREE CELL       15840002         LA    #6
)         ADD TO BOTTOM TO GET ACTUAL POINTER ˇ
+11*4       Pointer to first free cell ret in #9 15860002         BO
            ONLY ONE SECTION OF FREE CELLS       15870002         BZ
            NO FREE CELLS FOUND                  15880002*   ˇ
                                                   15890002VC2LOOP  L
MP4           LOAD ADDRESS OF TEMP FREE POINTERS   15900002         SH
4'            Back up to pointer to last free cell 15910002         VAS
#3,#7           ADD TO BOTTOM TO GET ACTUAL POINTERS 15920002         L
(,#2)           Get offset pointer to last free cell 15930002         VS
#V0,0(#3)       CREATE A SECTION OF THE FREE LIST    15940002         AH
VGCVP      ˇ
,#4               COMPARE WITH END OF CONS SPACE       15960002
3DONE             NOT ALL CONS CELLS CLEARED           15970002
,2                STRIDE Tˇ
#V0,#9,#0(#6)       LOAD 128 CARS & CLEAR GC BITS        15990002
#0,#1               Reload same address for VST          16000002
#VE,#V0,#1(#6)      SET MASK BITS AT UNMA RKED CELLS      16010002ˇÁ
         VST   #V0,#0(#6)          STORE ALL 128 GC-BIT-CLEARED CARS
2         VCOVM #5                  UPDATE COUNT OF FREE CELLS
2         VSTVM #11                 STORE BIT MASK OF NOT FOUND FREE
2 ˇ
002         BL    VC3LOOP             Try to get enough for at least 128
002VC3DONE  VLBIX #V0,#14,0(#8)       GEN MORE OFFSET NUMBERS OF SET BIT
002         BZ   ˇ
80002         L     #2,ZLCGCBVA         LOAD ADDRESS OF TEMP FREE POINTE
90002         VSLL  #V1,#V0,3           ELEMENT OFFSETS X 8 = BYTE OFFSE
00002         VST   #V1,#2      ˇ
6110002         L     #6,ZLCGCBVA         LOAD ADDRESS OF TEMP FREE POIN
6120002         L     #6,0(,#6)           GET OFFSET TO STORE IN FREE CE
6130002         LA    #6,0(#6,#3)         CALCUˇ
 16140002         ST    #6,##CDR(#7,#3)     STORE INTO LINK FROM PREV VE
 16150002         BP    VC2LOOP             (COND CODE FROM VLBIX) ANOTH
 16160002*                               ***BZ could be moved ˇ
   16170002*
   16180002VC2ONCE  L     #7,VTEMP4           LOAD ADDRESS OF TEMP FREE
   16190002         SH    #2,=H'4'            Back up to pointer to last
cell 16200002         VAS   #V3,#3,#7           ADD TO BOTTOM TO GET ACT
TERS 16210002         L     #7,0(,#2)           Get offset pointer to la
cell 16220002         VSTID #V2,#V0,0(#3)       CREATE A SECTION OF THE
T    1623000ˇ
       16240002         ST    #2,##CDR(#7,#3)     STORE 0 IN CDR OF LAST
LL     16250002         LA    #0,0(#7,#3)         Point to that there la
cell   16260002         ST ˇ
         16270002         B     VCEXPCHK
         16280002VCZERO9  DS    0H
         16290002         XR    #7,#7     ˇ
t new=0    16300002         ST    #7,VSAVE+11*4       Set saved #9 to ze
           16310002         ST    #7,LASTFREE         Pointer to last fr
= null     16320002*-------------------------------------ˇ
-----------* 16330002* If the amount of free space remaining is below th
old        * 16340002* (currently 1/2), then we dynamically expand the c
e by       * 16350002* bringing in another section of allocated-but-not-
 cons        * 16360002* space (equal in size to what we already have ac
d            * 16370002* chaining it to the existing free list.
             * 16380002*
       +
nter ˇ
                 * 16410002*--------------------------------------------
-----------------* 16420002VCEXPCHK L     #7,ZLCGCACD         Total # of
lls in active      1ˇ
er by 2              16440002         CR    #5,#7               Compare
ound with 1/2 total  16450002         BH    VCNOMORE            More tha
s still free?        16460002      ˇ
bsolute bottom         16470002         BNH   VCNOMORE            Can't
f it's already max     16480002         SLL   #7,5                8*2*2*
/2) = 2*size in bytes  16490002         LR    #8,#ˇ
ess of bottom of new     16500002         SR    #8,#7                act
 (top - new length)      16510002         C     #8,ZLCCSADR         If l
 total CS allocated      16520002         BNL   VCEXPOK          ˇ
                           16530002         L     #8,ZLCCSADR          u
 allocated                 16540002VCEXPOK  ST    #8,ZLCGCACP         Sa
ctive CS pointer           16550002         ST    #8,VSAVE+5*4        Se
ˇ
hange live #3, -> old)       16570002         SR    #7,#8
e true length of new active  16580002         SRL   #7,3
ace and convertˇ
lewords, and save this value   16600002*
                               16610002         LR    #7,#3
d bottom-of-CONS address      ˇ
ract new lower bottom-of-CONS    16630002         SRL   #7,3
de by 8 to get cnt of new cells  16640002         AR    #5,#7
count to existing free count     16650002*   ˇ
                                   16660002         VLVCA 512
t section size                     16670002         LR    #1,#8
t address of new active CS block   16680002         LA    #8ˇ
Set stride for doublewords           16690002         LA    #0,8(,#1)
Set pointer to first indirect value  16700002VCFREE   VLINT #V3,#0(#8)
Load a vector of pointers to cells   16710002         VSTD  #V2,#1
  Store CARs (pattern) & CDRs (chain)  16720002         CLR   #1,#3
  Loop until we hit previously active  16730002         BL    VCFREE
   CS block (i.e. end of new block)    16740002         SH    #1,=H'8'
  Bump bacˇ
    Set chain pointer to zero            16760002         ST    #2,##CDR
     (i.e. will be end of new free list) 16770002         L     #1,ZLCGC
    Get ptr to new active  space again    16780002ˇÁ
#2,15,LASTFREE      Get pointer to old last free cell    16790002
VCXNFREE            If there was one, then               16800002
#1,##CDR(,#2)        hook new free list to end of old    16810002 ˇ
  VCXAF               else (no free cells in old space)    16820002VCXNF
  #1,VSAVE+11*4        set saved #9 to 1st new free cell   16830002VCXAF
  0H                  Now we have one good free list.      16840002
 ˇ
                                                             16860002* N
red, but in case we ever use ZLCGCACF...                     16870002*
                ˇ
ST    #5,ZLCGCACF         Save last-uncovered # of free cells  16890002*
                                                               16900002*
code that sets ZLCGCACF        ˇ
                                                                 1692000
  LM    #14,#11,VSAVE       RELOAD SAVED REGS AND UPDATED #5     1693000
        #9 now points to the beginning of the ˇ
    B     GCCHECK                                                  16950
                                                                   16960
ORE ST    #5,VSAVE+7*4        SET NEW VALUE OF #5 (FREE COUNTˇ
      LM    #14,#11,VSAVE       RELOAD SAVED REGS AND UPDATED #5     169
      LTR   #5,#5                                                    169
      BNZ   GCCHECK                                                  170
        L     #9,ZLCGCEND         NO CELLS FOUND, ZERO REG 9           1
        B     GCCHECK             Jump out of here                     1
        EJECT                                                          1
-----------ˇ
2.ASWEEP  ANOP  ,
2*----------------------------------------------------------------------
2*------------------------ˇ
002*  Optional test code for doing a thorough check on the structure of
002*  the free-list.  Use for debugging and system testing only.
002*                                     ˇ
00002* To activate, decomment the code following GCCHECK and comment out
10002* the "GCCCHECK EQU GCDONE" statement.
20002*                                                  ˇ
7130002* Currently, we activate this check for scalar code only.
7140002*
7150002*---------------------------------------------------------------+
 17160002*-----------------------------------------------------------ˇ
-- 17170002         AIF   (&ZILVF).NOGCCK
   17180002         AGO   .NOGCCK             Actually, always bypass th
   17190002*------------------------------------------------------------
-- 1ˇ
     17210002GCCHECK  DS    0H
     17220002         CL    #9,ZLCGCEND         Are we at the end
     17230002      ˇ
       17240002         STM   #14,#11,VSAVE       More work needed, save
rs     17250002         XR    #2,#2               Clear toggle for free-
ck     17260002         LA    #6,1ˇ
         17270002CHKMORE  CLR   #9,#3               Free cell higher tha
bottom?  17280002         BL    CHKERR1             No, then error in fr
         17290002         CLR   #9,#4            ˇ
f space?   17300002         BNL   CHKERR2             No, then error in
t          17310002         LR    #7,#9               Make extra copy of
 to cell   17320002         N     #7,=X'00000007'     Leave onlyˇ
ig. bits     17330002         BNZ   CHKERR3             They better be z
we go to err 17340002         LR    #7,#9               Save pointer to
t cell       17350002         L     #9,##CDR(,#9)       Chain down free

               17370002         BZ    CHKEND              If zero, yes i
 of free list  17380002         LA    #6,1(,#6)           Passed most ch
d one to countˇ
 reported?       17400002         BH    CHKERR4             Count can't
r, report error  17410002         CLR   #9,#7               This cell hi
mem than last?   17420002    ˇ
ell in free list   17430002         X     #2,=F'1'            Toggle fre
rop-down flag      17440002         BNZ   CHKMORE             Toggling i
, right?           17450002         B     CHˇ
downwards twice!     17460002CHKERR1  LA    #2,1111
                     17470002         B     CHKERR
                     17480002CHKERR2  LA    #2,1112        ˇ
                       17490002         B     CHKERR
                       17500002CHKERR3  LA    #2,1113
                       17510002         B     CHKERR
                         17520002CHKERR4  LA    #2,1114
                         17530002         B     CHKERR
                         17540002CHKERR5  LA    #2,1115
                          17550002ˇÁ
                                         17560002CHKERR6  LA    #2,1116
                                         17570002         B     CHKERR
                                         17580002Cˇ
                                           17590002         LM    #14,#1
                                           17600002         NI    ZLCIFL
LCISMC                                     17610002         TM   ˇ
IATTN   If attention interrupt occurred      17620002         BOR   #13
        then go to handle it                 17630002         LA    #1,F
                                             17640002         LA    #0,L
ˇ
                                               17660002         L     #2
*4                                             17670002         ABEND (2
               ˇ
                                                 17690002FLERR    DC
S VECTOR-C FREE LIST ERROR!!!'                   17700002         SPACE
                              ˇ
                                                   17720002         BNE
6                                                  17730002         LM
1,VSAVE                                      ˇ
NE                                                   17750002*----------
---------------------------------------------------- 17760002         AG
GCCK                                                 1777000ˇ
------------------------------------------------------ 17780002*--------
------------------------------------------------------ 17790002.NOGCCK
                                                       17800002*--------
-------------------------------------------------------- 17810002GCCHECK
GCDONE              No free list checking done.          17820002*------
-------------------------------------------------------- 17830002.ENDGCC
          ˇ
---------------------------------------------------------- 17850002
T                                                          17860002GCDON
  0H                  GARˇ
    ZLCGCFLG,ZLCGCDNE   SAY A GARBAGE COLLECTION WAS DONE    17880002*
                                                             17890002* C
TRY POINT OF CONS TO REFER TO POST-COLLEˇ
                                                               17910002
XR    #0,#0               SET NEW END-OF-FREE-LIST POINTER     17920002
ST    #0,ZLCGCEND         TO ZERO                      +
  L     #15,=A(GCCONS)      LOAD POST-GARB-COLL ENTRYˇ
    ST    #15,ZLCCONS         UPDATE CONS POINTER IN COMMON        17950
                                                                   17960
ORD CURRENT CPU TIME                                               1ˇ
                                                                     179
      STIMER TASK,BINTVL=DUMS   DO DUMMY TO FORCE OS TIMER UPDATE    179
      L     #2,X'224'           GET ADDRESS OF ASCB                  180
   ˇ
                                                                       1
 UPDATE TOTAL GC TIME SO FAR FROM RECORDED CPU TIMES                   1
                  ˇ
2         LM    #2,#3,GCTIME1       GET ELAPSED TIME AT START OF GC
2         SRDL  #2,12               CONVERT FROM MICROSECONDS
2         D     #2,=F'1000'      ˇ
002         LR    #0,#3               GET RESULT INTO REGISTER
002         LM    #2,#3,GCTIME2       GET ELAPSED TIME AT END OF GC
002         SRDL  #2,12               CONVERT FRˇ
00002         D     #2,=F'1000'         TO THOUSANDTHS OF A SECOND
10002         LR    #1,#3               GET RESULT INTO REGISTER
20002         SR    #1,#0               SUBTRACT TO GET CPU TIMˇ
8130002         A     #1,ZLCGCTIM         ADD TO TOTAL GC TIME SO FAR
8140002         ST    #1,ZLCGCTIM         UPDATE TOTAL GC TIME SO FAR
8150002*
 18160002* END NON-INTERRUPTIBLE PART OF CODE
 18170002*
 18180002         NI    ZLCIFLGS,255-ZLCISMC    INTERRUPTIBLE NOW
 18190002    ˇ
   18200002         BOR   #13                 then go to handle it
   18210002*
   18220002* TELL USER HOW Mˇ
     18230002*
     18240002         LTR   #5,#5               IF NO FREE CELLS FOUND
     18250002         BZ    GCFULL         ˇ
       18260002         SPACE 1
       18270002******** #TPUT 1,ZIL1102 ***********
       18280002         SPACE 1                           ˇ
         18290002         TM    ZLCGCFLG,ZLCGCMSG   IF MESSAGES ARE NOT
OWN,     18300002         BZ    AFTMSG2             THEN SKIP THIS SECTI
         18310002         SPACE 1
           18320002ˇÁ
IRST PART OF MESSAGE     18330002         CVD   #5,ZLCDBL
UMBER OF FREE CELLS      18340002         UNPK  ZIL1102+L'ZIL1102A(10),Z
NTO MESSAGE AREA         18350002 ˇ
                           18360002         LA    #1,ZIL1102+L'ZIL1102A
O CONVERTED # AREA         18370002         LA    #2,9                IN
 DECREMENT REGISTER        18380002LOOP1102 DS   ˇ
OR FIRST NONZERO             18390002         CLI   0(#1),C'0'
                             18400002         BNE   END1102
                             18410002         LA    #1,1(,#1)   ˇ
                               18420002         BCT   #2,LOOP1102
                               18430002END1102  DS    0H
UMBER LENGTH - 1               18440002         EX    #2,MVC1102

#2)  POINT PAST END OF NUMBER    18460002         MVI   0(#3),C'/'
 IN A SLASH                      18470002         L     #0,ZLCGCACD
NUMBER OF ACTIˇ
                                   18490002         UNPK  1(10,#3),ZLCDB
                                   18500002         OI    10(#3),X'F0'
                             ˇ
POINT TO CONVERTED # AREA            18520002         LA    #2,9
INITIALIZE DECREMENT REGISTER        18530002LOOQ1102 DS    0H
SEARCH FOR FIRST NONZERO             1854000ˇ
                                       18550002         BNE   ENE1102
                                       18560002         LA    #1,1(,#1)
                                       18570002         BCTˇ
                                         18580002ENE1102  DS    0H
    #2 = NUMBER LENGTH - 1               18590002         EX    #2,MVD11
    LEFT JUSTIFY THE NUMBER IN PLACE     18600002         LA    #1,2(#3,
      POINT PAST END OF NUMBER             18610002         MVC   0(L'ZI
1),ZIL1102B    MOVE IN REST OF MESSAGE     18620002         LA    #15,L'
(,#1)  POINT TO NEXT SEGMENT OF MESSAGE    18630002         LR    #1,#15
         ˇ
        ADDRESS OF START OF V/S SPACE...     18650002         A     #2,Z
        PLUS LENGTH OF V/S SPACE...          18660002         S     #2,Z
        MINUS ADDRESS OFˇ
          GIVES LENGTH OF AVAILABLE V/S SPACE  18680002         UNPK  0(
LCDBL     CONVERT TO DISPLAY                   18690002         OI    9(
'                                      +
            INITIALIZE DECREMENT REGIˇ
C'0'          SEARCH FOR FIRST NONZERO             18720002         BNE
2C                                                 18730002         LA
#1)                                                1ˇ
P1102C                                               18750002END1102C DS
                #2 = NUMBER LENGTH - 1               18760002         EX
VC1102C         LEFT JUSTIFY THE NUMBER IN PLACE     18770002      ˇ
,1(#15,#2)        POINT PAST END OF NUMBER             18780002
L'ZIL1102C,#1),ZIL1102C  MOVE IN REST OF MESSAGE       18790002
,L'ZIL1102C(,#1)  GET TOTAL LENGTH OF MESSAGE          18800002
,Zˇ
#0,#1                 FROM BEGINNING OF MESSAGE          18820002
*,(1),(0)              ISSUE THE MESSAGE                 18830002AFTMSG2
0H               ˇ
E 1                                                        18850002*
                                                           18860002* REL
METER REGISTERS                 ˇ
                                                             18880002
    #0,#8,ZSAVED0       DON'T RESTORE REGISTER 15            18890002
    #10,#14,ZSAVED10    DON'T RESTORE REGISTER ˇ
L     #15,ZLCCONS         GET ADDRESS OF NEW CONS ROUTINE      18910002
BR    #15                 START OVER                           18920002
SPACE 2                                                       ˇ
  MVC   ZIL1102+L'ZIL1102A(0),0(#1)  EXECUTED                    1894000
  MVC   1(*-*,#3),0(#1)              EXECUTED                    1895000
C MVC   0(*-*,#15),0(#1)             EXECUTED                    1896000
    SPACE 2                                                        18970
                                                                   18980
BAGE COLLECTION SEVERE ERROR - CANNOT RECOVER                      18990
            ˇ
RR    DS    0H                                                       190
      #TPUT ZIL1104                                                  190
      ABEND 1104,DUMP      ˇ
        SPACE                                                          1
                                                                       1
 GARBAGE COLLECTION FOUND NO FREE CELLS - ˇ
2*
2GCFULL   DS    0H                  NO MORE FREE CELLS
2*        #TPUT ZIL1101                                  
002ˇÁ
         19100002         XR    #9,#9               SET NEXT-CONS-CELL P
O        19110002*                                   "NO MORE CONS CELLS
         19120002 ˇ
OR         19130002         SPACE
           19140002*
           19150002* INVALID OBJEˇ
             19160002*
             19170002BADVSOBJ DS    0H
             19180002         #TPUT ZIL1107     ˇ
               19190002         ABEND 1107,DUMP
               19200002         EJECT
               19210002*                                       ˇ
                 19220002* NON-FORWARDED SYMBOL POINTER FOUND IN OBLIST
AY               19230002*
                 19240002FHERROR  DS    0H
                   19250002         #TPUT ZIL1110
                   19260002         ABEND 1110,DUMP
                   19270002         EJECT
             ˇ
                     19290002*
                     19300002* UNABLE TO GETMAIN GC WORK AREA
                     1931000ˇ
                       19320002GERROR   DS    0H
                       19330002         #TPUT ZIL1109
                       19340002         ABEˇ
                         19350002.NOGERR  ANOP
                         19360002         EJECT
                         19370002MARKLIST DS    0H        ˇ
                           19380002         SPACE
                           19390002*************************************
************************** 19400002*
                           * 19410002* THIS IS THE MAIN ROUTINE TO GO TH
LISP OBJECT AND MARK ALL   * 19420002* PARTS OF IT.  FOR THE PURPOSES OF
UTINE A SYMBOL IS TREATED  * 19430002* AS A LIST WHOSE CAR IS A STRING (
 PRINT Nˇ
IMILARLY, A CLOSURE IS       * 19450002* TREATED AS A LIST WHOSE CAR IS
L OBJECT (ACTUALLY A PIECE   * 19460002* OF COMPILED CODE) AND WHOSE CDR
ST, NAMELY THE ALIST.  +
 POINTER IS ZEROES, Oˇ
UBR NOT A CLOSURE), THIS WILL    * 19490002* FAIL THE "IN-CONS-SPACE-RAN
 AND STILL WORK WITHIN THE LOGIC * 19500002* OF THIS ROUTINE.  NOTE ALSO
HER TYPES OF CONSED ATOMS (I.E.  * 1ˇ
IDERED LISTS IN THIS FASHION;      * 19520002* INSTEAD, THEY ARE SPECIAL
CTED (THEY CONSIST OF 1 CONS WHICH * 19530002* IS INDIVIDUALLY MARKED),
OBLEM THERE.                       * 19540002*     ˇ
                                     * 19550002* ON ENTRY REGISTER 1 POI
HE OBJECT TO BE COLLECTED.           * 19560002*          REGISTER 15 PO
THE CELL TO BE UPDATED IF THAT CELL  * 19570002*          POINTS Tˇ
WHICH IS RELOCATED.                    * 19580002*
                                       * 19590002***********************
**************************************** 19600002         SPACE
 ˇ
      SEE WINSTON & HORN 2ND ED. P. 148    19620002P        EQU   #6
      SEE WINSTON & HORN 2ND ED. P. 148    19630002Q        EQU   #7
      SEE WINSTOˇ
                                             19650002*
                                             19660002* INITIAL CHECK FOR
VED UP TO EXPEDITE DEGENERATE-Cˇ
                                               19680002         CR    #1
          IF (NULL P)                          19690002         BER   #1
          THEN RETURN, NOTHING TO DO          ˇ
                                                 19710002         ST
SAVE        SAVE RETURN ADDRESS                  19720002         LR
            INIT P = ENTRY VALUE                 19730002    ˇ
              INIT N = NIL                         19740002         LR
              INIT Q = NIL                         19750002         LA
P)            CLEAR HIGH ORDER BYTE OF P           19760002         RCHK
ARKRET          IF NOT IN CONS SPACE, SKIP COLLECT   19770002         CL
PE(P),##FLONUM  IF P IS A NUMBER                     19780002         BL
IST             THEN...                              19790002         MA
           ˇ
RKRET              AND RETURN DOING NO MORE.           19810002ISALIST
                  ELSE INVOKE LIST MARKING ALGORITHM   19820002
                          ˇ
0H                  TRACK DOWN CAR.                      19840002
                                                         19850002* NOTE
THE ONLY POINT WHERE IT IS NECESSARY TO T URN ON THE      19860002ˇÁ
* SECONDARY MARKING BIT.  THIS INDICATES THAT THIS CELL, WHILE NOT
2* YET OFFICIALLY MARKED, IS NOW PARTICIPATING IN THE COLLECTION
2* PROCESS AND SHOULD NOT BE PROCESSED IF ENCOUNTERED WHILE GOING
2*ˇ
002         SPACE
002         MARK2 P                                    SET TEMP GC MARK
002         CLI  ˇ
30002         BH    LOOPCDR             THEN CONTENTS OF CAR CELL NOT VA
40002         GCAR  Q,P                 (SETQ Q (CAR P))
50002         LR    #15,P       ˇ
9960002         LA    #0,0(,Q)                             CLEAR TYPE BI
9970002         CR    #0,#10              IF (NULL Q)
9980002         BE    LOOPCDR                  ˇ
 19990002         RCHK  #0,LOOPCDR          IF NOT IN CONS SPACE, DO NOT
 20000002         IFMK  Q,YES=LOOPCDR       IF (MARKEDP Q)   THEN DO NOT
 20010002         CLI   ##TYPE(Q),##FLONUM  IF Q IS A NUMBER  ˇ
   20020002         BL    REVCAR              THEN...
   20030002         MARK  Q                    IT'S A NUMERIC ATOM - MAR
   20040002         B     LOOPCDR              AND DO NOTHING (AS IF NUL
     20050002REVCAR   DS    0H                  ELSE...
     20060002         RCAR  P,N                 (RPLACA P N)     REVERSE
.    20070002         LR    N,P                 (SETQ N P)
     2008000ˇ
       20090002         B     LOOPCAR             (GO LOOPCAR)     CONTI
 CAR.  20100002         SPACE
       20110002LOOPCDR  DS ˇ
         20120002         SPACE
         20130002         MARK  P                   (MARKIT P)
         20140002         GCDR  Q,P       ˇ
N CDR.     20150002         LA    #15,##CDR(,P)                        P
POINTER    20160002         LA    #0,0(,Q)                             C
E BITS     20170002         CR    #0,#10              IF ˇ
             20180002         BE    LOOPCONS
 NOTHING.    20190002         RCHK  #0,LOOPCONS         IF NOT IN CONS S
 NOTHING     20200002         IFMK  Q,YES=LOOPCONS      IF (MARKEDP Q)
DO NOTHING     20210002         CLI   ##TYPE(Q),##FLONUM  IF Q IS A NUMB
               20220002         BL    REVCDR              THEN...
               20230002         MARK  Q                    IT'S A NUMERI
 MARK I+
IF NUˇ
                   20260002         RCDR  P,N                 (RPLACD P
EVERSE POINTER.    20270002         LR    N,P                 (SETQ N P)
                   2ˇ
                     20290002         B     LOOPCAR             (GO LOOP
                     20300002         SPACE
                     20310002LOOPCOˇ
                       20320002         SPACE
                       20330002         LA    #0,0(,N)
   CLEAR TYPE BITS     20340002         CR    #0,#ˇ
     FINISHED MARKING?   20350002         BE    MARKRET             THEN
)    THEN END. ELSE...   20360002         LR    Q,N                 (SET
     WAS CAR OF THIS     20370002         IFMK1 Q,NO=REVCON      ˇ
P Q)    DONE? IF SO...     20380002         GCDR  N,Q                 (S
DR Q)) UNDO                20390002         RCDR  Q,P                 (R
P)      POINTER            20400002         LR    P,Q                 (S
ˇ
CONS)    CONTINUE UPWARDS.   20420002REVCON   DS    0H
         ELSE...             20430002         MARK  Q
Q)             ˇ
N (CAR Q)) UNDO                20450002         RCAR  Q,P
A Q P)      POINTER            20460002         LR    P,Q
P Q)         REVERSAL.        ˇ
LOOPCDR)     STILL GOTTA DO CDR. 20480002         SPACE 1
                                 20490002MARKRET  DS    0H
                                 20500002    ˇ
STORE RETURN ADDRESS               20510002         BR    #14
TURN                               20520002         EJECT
                                   20530002RCHECK   DS    0Hˇ
                                     20540002*
                                     20550002* THIS ROUTINE CHECKS THE O
SSED IN #0 TO SEE IF IT IS IN        20560002* CONS SPACE, AND RETURNS T
F IT ISN'T.  IF IT IS IN CONS          20570002* SPACE, IT IS TO BE COLL
ND THIS ROUTINE RETURNS +4.            20580002*
                                       20590002* ONE THING, THOUGH: IF T
 IS IN VECˇ
ING/FORWARDING GC BEFORE WE RETURN       20610002* SAYING THAT IT AIN'T
SPACE.  IN THIS WAY THINGS IN V/S        20620002* SPACE GET GC'D WITHOU
ST KNOWING OR CARING.                     20630002ˇÁ
                                                         20640002* REGIS
S THE RETURN ADDRESS.                                    20650002* REGIS
OINTS TO THE POINTER TO BE UPDATED IF RELOCATION.        20660002*ˇ
                                                           20670002
  #0,#3               IF LT LOWER BOUND OF CONS SPACE      20680002
  RTRYVS              THEN NOT IN CONS SPACE               20690002
 ˇ
L   RTRYVS              THEN NOT IN CONS SPACE               20710002
    4(,#14)             ELSE IN CONS SPACE, RETURN SO.       20720002RTR
    0H          ˇ
S     #0,ZLCVSADR         SEE IF LESS THAN V/S SPACE ADDRESS   20740002
BMR   #14                 IF SO, IN NO SPACE, RETURN SO        20750002
C     #0,ZLCVSLEN         SEE Iˇ
  BNLR  #14                 IF NOT, IN NO SPACE, RETURN SO       2077000
IN VECTOR/STRING SPACE - COLLECT IT.                             2078000
  STM   #1,#4,VSSAVE        SAVE REGISTERS USEˇ
    LR    #2,#0                                                    20800
    A     #2,ZLCVSADR         POINT TO THE OBJECT AGAIN            20810
    TM    ##TYPE(#2),##ATOM   IF OBJECT HAS ALREADY BEEN RELOˇ
      BO    RNOTREL             THEN...                              208
                                 STORE FORWARDED PTR INTO PLACE      208
      LA    #0,3                 UPDATE POINTER WITH FORWARDED ONE:  208
        N     #0,0(,#15)            GET POSSIBLE GC MARKS INTO REG     2
        O     #0,##VECDAT(,#2)      COMBINE WITH POINTER VALUE         2
        ST    #0,0(,#15)           STORE BACK IN WITH GC MARKS INTACT  2
           ˇ
2         L     #2,VSSAVE+4          RESTORE THE ONLY CLOBBERED REGISTER
2         BR    #14                  RETURN
2RNOTREL  DS    0H        ˇ
002         LA    #1,##SYMLEN         Get length of a symbol
002*                                  (in case it is a symbol.  If it
002*                                  isnˇ
50002*                                  cleared the high-order byte, whi
60002*                                  is good for loading the length)
70002         CLI   ##TYPE(#2),##SYMBOL If this is a symˇ
0980002         BE    RGOTLEN             then we have the length.  Else
0990002         LA    #1,16               length would be 16 if double f
1000002         CLI   ##TYPE(#2),##DFLOAT If this is a double float,   +
 21010002         BE    RGOTLEN             then we have the length. ˇ
   21020002*                                  Not a symbol - a VEC-type
   21030002         ICM   #1,7,1(#2)          GET LENGTH OF DATA OF THIS
   21040002         BNZ   RADDIT              IF POSITIVE, NO PROBLEM
   2ˇ
     21060002RADDIT   LA    #1,4+3(,#1)         ADD 4 FOR PREFIX AND...
     21070002         N     #1,=X'FFFFFFFC'     ROUND UP TO FULLWORD
     21080002RGOTLEˇ
       21090002         LR    #3,#1               THIS GIVES LENGTH TO M
       21100002*                                  STORE RELOCATED PTR IN
       21110002         LA    #0,3ˇ
D ONE:   21120002         N     #0,0(,#15)           GET POSSIBLE GC MAR
REG      21130002         O     #0,VSPTR             COMBINE WITH POINTE
         21140002         ST    #0,0(,#15)       ˇ
KS INTACT  21150002*
           21160002         L     #0,VSPTR            PLACE TO MOVE IT T
 SPACE     21170002         LR    #15,#2              SAVE ADDREˇ
CT           21180002         LR    #4,#0               SAVE ADDRESS OF
CT           21190002         MVCL  #0,#2               MOVE FROM OLD SP
EW SPACE     21200002*

ACE AREA       21220002*
               21230002         L     #1,ZLCVSOTH
              ˇ
F NEW SPACE      21250002         CR    #0,#1               IF WE PASSED
                 21260002         BH    ABEND0C3            THEN SOMETHI
NG.              21270002*   ˇ
                   21280002* END CODE ADDED TO CHECK IF VSPTR SHOULD GO
 OF VSSPACE AREA   21290002*
                   21300002         ST    #0ˇ
CE SLOT              21310002         NI    ##TYPE(#15),255-##ATOM INDIC
CT FORWARDED         21320002         ST    #4,##VECDAT(,#15)   SET OBJE
WARDING POINTER      21330002         LM    #1,#4,VSSAVE   ˇ
ERS                    21340002         BR    #14                 RETURN
                       21350002         SPACE 1
                       21360002ABEND0C3 EX    0,*                 FORCE
END IF WE REALLY BLEW IT 21370002         EJECT
                         21380002*
                         21390002* DATA AREAS USED BY THE GC
                          21400002ˇÁ
                                         21410002VSPTR    DS    A
    @ AVAILABLE SLOT IN NEW V/S SPACE    21420002VSSAVE   DS    4A
    REGISTER SAVE AREA                   21430002Mˇ
      REGISTER SAVE AREA                   21440002ENDVEC   DS    A
      @ END OF VECTOR BEING PROCESSED      21450002         SPACE 1
                                           21460002ZSAVREGS DS   ˇ
                                             21470002*
                                             21480002* THE FOLLOWING EQU
 USED TO RELOAD PASSED REGISTER VALUES.      21490002*
ˇ
                                               21510002ZSAVED1  EQU   ZS
                                               21520002ZSAVED2  EQU   ZS
               ˇ
+12                                              21540002ZSAVED4  EQU
+16                                              21550002ZSAVED5  EQU
+20                           ˇ
GS+24                                              21570002ZSAVED7  EQU
GS+28                                              21580002ZSAVED8  EQU
GS+32                                        ˇ
REGS+36                                              21600002ZSAVED10 EQ
REGS+40                                              21610002ZSAVED11 EQ
REGS+44                                              2162000ˇ
AVREGS+48                                              21630002ZSAVED13
AVREGS+52                                              21640002ZSAVED14
AVREGS+56                                              21650002
                                                         21660002LCODE1
0A                                                       21670002
1                                                        21680002*******
**********ˇ
                                                         * 21700002*  TH
HAT FOLLOWS IS USED TO COMPARE WITH LEXPR HEADER CODE.   * 21710002*  SE
IN.  IF THIS CODE IS CHANˇ
ED HERE.                                                   * 21730002*
                                                           * 21740002***
****************************************ˇ
SPACE 1                                                        21760002
L     #2,0(,#1)           GET POINTER TO LEXPR ARG ON STACK    21770002
L     #2,##CDR(,#2)       GET FIXNUM VALUE THEREOF     +
  SLA   #2,2                MULTIPLY IT BY 4 TO GET Sˇ
    LA    #0,*-*(#2,#1)       HALF OF THE EXPECTED LA INSTRUCTION  21800
    ORG   *-2                 THROW AWAY THE OTHER HALF            21810
    EQU   LCODE1,*-LCODE1     LENGTH OF THIS CODE                  2ˇ
      SPACE 1                                                        218
IME1  DS    D                   CPU TIME AT START OF GC              218
IME2  DS    D                   CPU TIME AT END OF GC                218
S  ˇ
MASK    DS    8D                                                       2
SAVE    DS    8D                  SAVE AREA FOR REG 14 THROUGH 8       2
ESTTEMP DS    1D  ˇ
2LASTFREE DS    1F
2FREE1ST  DS    1F
2         AIF   (NOT &ZILVF).NOVDˇ
002VTEMPSZ  DS    1F                  Size of vector of free pointers +
002VGCVP    DS    1F                  Vector section size & partial sum
002VTEMP4   DS    1F                            ˇ
50002VTEMPTOP DS    1F
60002.NOVDS   ANOP
70002         AIF   (NOT &ZILXA).NOPDS                         ˇ
1980002PGSERECB DS    F                   ECB for PGSER requests
1990002PGSERVSA DS    F                   Address of VS pages to be rele
2000002PGSERVSE DS    F                   Address of end of above
 22010002.NOPDS   ANOP
 22020002         EJECT
 22030002         LTORG
 22040002    ˇ
   22050002         AIF   (&ZILVF).VEC1100
   22060002ZIL1100A DC    C'ZIL1100 SCALAR GARBAGE COLLECTION INVOKED FR
   22070002         AGO   .Aˇ
     22080002.VEC1100 ANOP  ,
     22090002ZIL1100A DC    C'ZIL1100 GARBAGE COLLECTION (VECTOR-C) INVO
 '   22100002.AFT1100 ANOP  ,              ˇ
       22110002ZIL1100B DC    CL64' '
       22120002         DS    C                   FILLER
       22130002ZIL1101  DC    C'ZIL1101 GARBAGE COLLECTIONˇ
S CELLS X22140002               AVAILABLE.'
         22150002ZIL1102A DC    C'ZIL1102 GARBAGE COLLECTED, '
         22160002ZIL1102B DC    C' CONS CELLS AND '
           22170002ˇÁ
                         22180002ZIL1102  DS    CL(L'ZIL1102A+11+L'ZIL11
'ZIL1102C)               22190002ZIL1104  DC    C'ZIL1104 SEVERE ERROR,
COLLECTION CANNOT CONTINX22200002 ˇ
                           22210002ZIL1107  DC    C'ZIL1107 INVALID OBJE
CTOR/STRING SPACE, GARBAGEX22220002                COLLECTION TERMINATED
                           22230002         AIF  ˇ
                             22240002ZIL1109  DC    C'ZIL1109 NOT ENOUGH
FOR VECTOR SWEEP WORK AREA, X22250002               GARBAGE COLLECTION T
D.'                          22260002.NO1109  ANOP              ˇ
                               22270002ZIL1110  DC    C'ZIL1110 NON-FORW
MBOL IN OBLIST HASH ARRAY, GARX22280002               BAGE COLLECTION TE
.'                             22290002         SPACE 1

******************************** 22310002*
                               * 22320002* Obsolete (at least no longer
ssages        ˇ
                                 * 22340002*****************************
********************************** 22350002         SPACE 1
                             ˇ
 NOT SET ON ENTRY TO CONS FOR GARBAGX22370002               E COLLECTION
                                     22380002*ZIL1105 DC    C'ZIL1105 OB
OBLIST NOT A SYMBOL, GARBAGE COLLECTX2239000ˇ
                                       22400002*ZIL1108 DC    C'ZIL1108
RINT NAME IS NOT A STRING, GARBAGE COLX22410002               LECTION TE
.'                                     22420002         ENDà
                                         22430002
    TITLE 'ZILCVBF - ZIL 1.3 BIGNUM-TO-FLOAT CONVERSION ROUTINE'   00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 This subroutine is invoked from arithmetic functions that need      * 0
 to convert a bignum to a ˇ
2*                                                                     *
2*    L  #5,<pointer to bignum>                                        *
2*    L  #15,ZLCCVBF                     ˇ
002*    BALR #14,#15
002*    <flonum value is in FPR0)
002*                                                    ˇ
70002* On entry #5 points to the bignum to be converted.
80002* The flonum value is returned in FPR0 (no consing of flonums).
90002*                                                                 ˇ
0100002* If #5 is negative, a double-float is to be built; otherwise a
0110002* single-float will be built.
0120002*
013000ˇ
 00140002* 15 are the "branch and link" registers.
 00150002*
 00160002* Note:  #15ˇ
 * 00170002*        be signalled for floating-point overflow.
 * 00180002*
 * 00190002* Logic:  See the similarˇ
   * 00200002*
   * 00210002***********************************************************
**** 00220002         SPACE 1                      ˇ
       00230002ZILCVBF  #ZBEG NAME='ZILCVBF'
       00240002         SPACE 1
       00250002         USING ZILCVBF,#15                         ˇ
         00260002         SPACE 1
         00270002*******************************************************
******** 00280002*
 +

           * 00310002***************************************************
************ 00320002         SPACE 1
             0ˇ
               00340002         BM    B2D                 then go proces
-float code    00350002         SPACE 1
               00360002******ˇ
**************** 00370002*
               * 00380002* Bignum to float conversion routine.
               * 00390002*                  ˇ
                 * 00400002* This code is based on the observation that
-precision       * 00410002* flonum has only 24 bits of actual precision
 Therefore,      * 00420002* we need only take the high-ordˇ
ignum (well,       * 00430002* maybe we should consider the 25th bit for
g purposes)        * 00440002* and set the exponent of the flonum to rep
he bit size        * 00450002* of the bignum.  To do this, we need the f
ng 2 pieces          * 00460002* of information:
                     * 00470002*
                     * 00480002* (a) the number of significant bits in t
m (HAULONˇ
PART)                  * 00500002*
                       * 00510002* We then determine the characteristic
lonum to be (a)/4,     *ˇ
re, we may have to       * 00530002* shift (b) over to the right by (4-r
) bits to make it        * 00540002* a valid mantissa for the flonum who
ent is that many bits    * 00550002* shˇ
                           * 00560002*
                           * 00570002***********************************
**************************** 00580002*                ˇ
                             * 00590002* First, get the number of signif
ts in the bignum (HAULONG).  * 00600002* At the same time we extract the
der 24 bits (HAIPART).       * 00610002*                             ˇ
                               * 00620002*******************************
******************************** 00630002         SPACE 1
                                 00640002         STM   #0,#4,ZSAVE
 regˇ
                                   00660002         XR    #4,#4
ear insert register                00670002         ICM   #4,7,1(#5)
t length of bignum  text            00680002ˇÁ
8'            Bump down by 2 words                 00690002         LA
#4)           Save length of bignum minus 4        00700002         LA
ECDAT(#4,#5)  Point to 2 MSW's of bignum           00710002 ˇ
(,#4)           Get most significant word of bignum  00720002         L
(,#4)           Get next most sig. word of bignum    00730002         N
X'7FFFFFFF'     Zero possible sign bit to make ABS   00740002         SL
,1                Bring halves together                00750002
,1                Shift 62-bit number into reg pair    00760002
,2                Divide length by 4 to get # of bytes 00770002
,#0       ˇ
#1,5                Multiply by 31 (32X - X = 31X)       00790002
#1,#0               to get number of bits in these words 00800002
#1,32(,#1)          Set pˇ
                       plus 1 because we shifted #2 right  00820002HAULO
  0H                  Loop until we determine # of bits    00830002
  #2,1                Shift out leftmostˇ
R   #2,#2               Test sign to see if we hit a 1-bit   00850002*
    ...                 (can never be zero, from a bignum)   00860002
    GOTIT               If 1-bit leftmost, we got it   ˇ
BCT   #1,HAULOOP          Reduce bit count and continue        00880002G
DS    0H                  Now #1 contains (HAULONG bignum)     00890002*
     and #2 contains (HAIPART bignum 24) in high-order 24 bits 0090000ˇ
  SPACE 1                                                        0091000
**************************************************************** 0092000
                                                               * 0093000
en deˇ
ept that a is a multiple of 31.  Therefore, we may have to       * 00950
ft (#2) over to the right by (4-remainder) bits to make it       * 00960
alid mantissa for thˇ
hort of representing (#1).                                         * 009
                                                                   * 009
***********************************ˇ
        SPACE 1                                                        0
        SRL   #2,8                Make 24-bit HAIPART value = mantissa 0
        LA    #4,4                 compute shift aˇ
2*                                  #1 contains (HAULONG bignum)
2         XR    #0,#0               Clear other half of reg pair
2         DR    #0,#4               #0 = remainder, #1 = quotient+
002         LTR   #0,#0               If remainder is nonzero, ˇ
70002         BZ    RZERO               then...
80002         LA    #1,1(,#1)            bump quotient (represents expon
90002         SR    #4,#0                = 4 minus remainder
1100002         SRL   #2,0(#4)             shift mantissa right by that
1110002RZERO    DS    0H
1120002         CH    #1,=H'63'           If exponent too high, error
1130002      ˇ
 01140002         LA    #1,64(,#1)          Convert characteristic to ex
 01150002         SLL   #1,24               Shift into high-order 8 bits
 01160002         OR    #2,#ˇ
sa 01170002         ST    #2,ZLCWORK          Store into work area
   01180002         TM    ##VECDAT(#5),X'80'  If original bignum was neg
   01190002         BZ    BNOTNEG          ˇ
     01200002         OI    ZLCWORK,X'80'        make flonum negative
     01210002BNOTNEG  DS    0H
     01220002         LE    #F0,ZLCWORK         Load singlˇ
lue    01230002         LM    #0,#4,ZSAVE         Restore saved regs
       01240002         BR    #14                 Return with it in FPR0
       01250002         EJECT
         01260002B2D      DS    0H                  Convert bignum to do
at       01270002         SPACE 1
         01280002         LPR   #5,#5               Make address good
        ˇ
           01300002         SPACE 1
           01310002*****************************************************
********** 01320002*   ˇ
           * 01330002* This routine is similar to the single-float conve
utine,     * 01340002* except (of course) that we need to extract the fi
its, not   * 01350002* the first 24.  ˇ
ted in that  * 01360002* we must manage a register "triple" (3-register
to hold      * 01370002* (HAIPART bignum 56).  However, we can simplify
omewhat by   * 01380002* breaking down the processingˇ
               * 01390002*
               * 01400002*   Case 1  -  a 2-word bignum with (HAULONG bi
 56 bits       * 01410002*                                          ˇ
                 * 01420002*              For this case, we can take the
d make a         * 01430002*              flonum out of them directly, a
verting          * 01440002*              the bigits to a 63-bit (actual
t)  doubleword.   * 01450002ˇÁ
                                 * 01460002*   Case 2  -  a 2-word bignu
HAULONG bignum) > 56 bits        * 01470002*
                                 * 01480002*ˇ
AULONG bignum) will be > 62 bits.  * 01490002*
                                   * 01500002* In both case 2 and case 3
ract (HAIPART bignum 56) and       * 01510002* then processˇ
e register triple by finding the     * 01520002* proper amount(s) to shi
r the single-float algorithm         * 01530002* described above.
                                     * 01540002*
                                       * 01550002***********************
**************************************** 01560002         SPACE 1
                                         01570002         STM   #0,#4,ZS
    Save ˇ
      Clear insert register                01590002         ICM   #4,7,1
      Get length of bignum                 01600002         CH    #4,=H'
      If length greater ˇ
        then more than 2 words in bignum     01620002         TM    ##VE
5),B'01111110' If more than 31+25=56 bits on 01630002         BNZ   CASE
        then process slightly-long bignˇ
          Else 56 bits or less in bignum       01650002         L     #2
T+4(,#5)  Load MSW                             01660002         L     #3
T+0(,#5)  Load (M-1)SW                         0167000ˇ
FFFFFF'     Clear sign bit                       01680002         SLL
            Convert from bigits                  01690002         SRDL
            to 62-bit value in register pair     01700002*           ˇ
              Note hi-order 8 bits of #2 must be 0 01710002         STM
ZLCWORK       Store 56-bit mantissa-to-be          01720002         MVI
K,X'4E'       Assign characteristic                01730002         TM
AT(#ˇ
                then...                              01750002         OI
ORK,X'80'        set flonum negative                 01760002C1NM     DS
                   ˇ
0,#F0             Normalize flonum value               01780002
0,ZLCWORK          by adding to normalized double zero 01790002
,#4,ZSAVE         Restore caller'sˇ
#14                 Return with value in #F0             01810002
1                                                        01820002CASE2
0H                  2-word bignum with more than +
E 1                                            ˇ
M   #0,#7,ZSAVE         Save registers used in this code     01850002
    #0,4                Set length of bignum minus 4         01860002
    #2,##VECDAT+4(,#5)  Load MSW                             0ˇ
L     #3,##VECDAT+0(,#5)  Load (M-1)SW                         01880002
N     #3,=X'7FFFFFFF'     Clear sign bit                       01890002
XR    #7,#7               Set (M-2)SW to zeroes                01900002
  B     C3PROC              Process like a Case 3 bignum         0191000
  SPACE 1                                                        0192000
  DS    0H                  Bignum of 3 words or more            0193000
  SPACE 1   ˇ
****************************************************************** 01950
                                                                 * 01960
st, get the number of signiˇ
t the same time we extract the high-order 56 bits (HAIPART).       * 019
o manage this in a register "triple", we do some clever shifting.  * 019
                                          ˇ
********************************************************************** 0
        SPACE 1                                                        0
        STM   #0,#7,ZSAVE         Save regs              ˇ
2         SPACE 1
2         XR    #4,#4               Clear insert register
2         ICM   #4,7,1(#5)          Get length of bignum text
002         SH    #4,=H'12'           Bump down by 3 words
002         LA    #0,8(,#4)           Save length of bignum minus 4
002         LA    #4,##VECDAT(#4,#5)  Point to 3 MSW's of bignum
002    ˇ
00002         L     #3,4(,#4)           Get next most sig. word of bignu
10002         L     #7,0(,#4)           Get third most sig. word of bign
20002         N     #7ˇ
2130002C3PROC   DS    0H                  Cases 2 and 3 come together he
2140002         SPACE 1
2150002******************************ˇ
 02160002*
 02170002* Convert bigits in register triple #2+#3+#7 to 93-bit number.
 02180002*                                          ˇ
 * 02190002*************************************************************
** 02200002         SPACE 1
   02210002         LR    #6,#3               Set up auxiliary regi ste
     02220002ˇÁ
                   02230002         SRDL  #6,1
                   02240002         LR    #3,#6
                   02250002 ˇ
                     02260002         SRDL  #2,2
                     02270002         SPACE 1
                     02280002**************ˇ
********************** 02290002*
                     * 02300002* Now register triple #2+#3+#7 (also #2+#
s 93-bit bigit.      * 02310002* Compute HAULONG value whiˇ
 to shift all words.   * 02320002*
                       * 02330002***************************************
************************ 02340002         SPACE 1
                           02350002         LR    #6,#3               Pr
r HAIPART computation      02360002         SRA   #0,2                Di
gth by 4 to get # of bytes 02370002         LR    #1,#0               th
of bigitˇ
 by 31 (32X - X = 31X)       02390002         SR    #1,#0
umber of bits in these words 02400002         LA    #1,33(,#1)
umed bit count so far, ˇ
2 because of 3 leading 0-bits  02420002         XR    #4,#4
shift counter                  02430002C3HAULP  DS    0H
ntil we determine # of bits    0244000ˇ
e increment shift counter        02450002         SLDL  #2,1
t out leftmost bit               02460002         LTR   #2,#2
 sign to see if we hit a 1-bit   02470002*        BZ ˇ
an never be zero, from a bignum)   02480002         BM    C3GOTIT
 1-bit leftmost, we got it         02490002         BCT   #1,C3HAULP
duce bit count and continue        02500002C3GOTIT  DS    0H        ˇ
Now #1 contains (HAULONG bignum)     02510002*             and #4 contai
t to shift to complete HAIPART oper. 02520002         SLDL  #6,0(#4)
Shift rest of triple by that amount  02530002         LR    #3,#6
Getˇ
                                       02550002*************************
************************************** 02560002*
                  ˇ
ntains (HAIPART bignum 56) in the      * 02580002* high-order 56 bits.
ns that we no longer care about        * 02590002* what's in #7, so we h
gister pair #2+#3 that contains  +
                               ˇ
                                           * 02620002* We then determine
racteristic of the flonum to be (#1)/4,    * 02630002* except that a is
le of 31.  Therefore, we may have to       * 0ˇ
he right by (4-remainder) bits to make it    * 02650002* a valid mantiss
e flonum whose exponent is that many bits    * 02660002* short of repres
#1).                                         * 02670002*     ˇ
                                               * 02680002***************
************************************************ 02690002         SPACE
                                                 02700002         SRDL
              Make 56-bit HAIPART value = mantissa 02710002         LA
               compute shift amount                02720002*
              #1 contains (HAULONG bignum)         02730002         XR
           ˇ
4               #0 = remainder, #1 = quotient        02750002         LT
0               If remainder is nonzero,             02760002         BZ
ERO             then...   ˇ
,1(,#1)            bump quotient (represents exponent) 02780002
,#0                = 4 minus remainder                 02790002
,0(#4)             shift mantissa right bˇ
0H                                                       02810002
#1,=H'63'           If exponent too high, error          02820002
ERROR                                                   ˇ
  #1,64(,#1)          Convert characteristic to excess-64  02840002
  #1,24               Shift into high-order 8 bits         02850002
  #2,#1               Combine characteristic with mantissa 02860002    ˇ
M   #2,#3,ZLCWORK       Store into work area                 02870002
    ##VECDAT(#5),X'80'  If original bignum was negative      02880002
    C3NOTNEG            then                                 02890002
    ZLˇ
DS    0H                                                       02910002
SDR   #F0,#F0             Normalize (just in case we f*ed up)  02920002
AD    #F0,ZLCWORK    ˇ
  LM    #0,#7,ZSAVE         Restore saved regs                   0294000
  BR    #14                 Return with it in FPR0               0295000
  EJECT                             ˇ
    DS    0H                  Floating-point overflow would occur  02970
    SPACE 1                                                        02980
    USING ZILCVBF,#15                                               029

   03000002*************************************************************
** 03010002*
 * 03020002*ˇ
   * 03030002* the only callers thereof will have a "normal" function he
   * 03040002* and a function name of reasonable length (i.e. 8 bytes or
   * 03050002*             ˇ
     * 03060002*********************************************************
****** 03070002         SPACE 1
       03080002         MVC   Z+4(8),5(#12ˇ
tring    03090002         XR    #0,#0
         03100002         IC    #0,4(,#12)          Get length of functi
         03110002         SH    #0,=H'16'                ˇ
           03120002         STCM  #0,7,Z+1            Store length of fu
ame        03130002         LR    #4,#15
           03140002         USING ZILCVBF,#4
             03150002         DROP  #15
             03160002         #ERR  'ZIL4102 ',Z,': Floating-point overf
erting ',   X03170002               (#5),' to float.',PREFIX=NO
       ˇ
               03190002ZSAVE    DS    8A                  Register save
               03200002         SPACE 1
               0321000ˇ
d boundary       03220002Z        DC    YL1(##STRING),AL3(0) Place to bu
tion name string 03230002         DS    CL12
                 03240002         SPAˇ
                   03250002         LTORG
                   03260002         SPACE 1
                   03270002         END             †
                     03280002
BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*****************
********************************************** 00011002*
                                             * 00012002*ˇ
989 The Charles Stark Draper Laboratory Inc.   * 00013002*
ll rights reserved.                            * 00014002*
                                               * 00015002**************ˇ
************************************************** 00016002*      ZILDIV
wo arguments. Both must be numeric atoms         * 00017002*
                                                 * 00018002* Conversion
e as fˇ
                                                   * 00020002* 1. Both a
d         - perform integer division.              * 00030002* 2. Both a
t         - perform rˇ
ne float    - convert the fixed argument to          * 00050002*
              float and perform real division.       * 00060002*
                                    ˇ
 causes an error.                                      * 00080002*
                                                       * 00090002* Exten
ision divide not used for bignum operations becauseˇ
slow on the 3090 hardware.                               * 00110002*
                                                         * 00120002*
                                                         * 0013000ˇ
provements:                                                * 00140002*
                                                           * 00150002* =
mization for lower zero bigits in the divisor.             * 00160002*
 ˇ
timization with fast check on remainder (see Knuth).         * 00180002*
tually, since addition is much faster than multiplication    * 00190002*
 typical hardwarˇ
a full "quotient-bigit x divisor" correction which can be      * 0021000
done by addition or subtraction when the quotient-bigit        * 0022000
correction is an increment or dˇ
  fast check is probably only faster for bignums of length       * 00240
  10 bigits and more.                                            * 00250
                                              ˇ
==> Eliminate the paths that check the remainder to see if it's    * 002
    larger than the divisor so that the quotient must be           * 002
    incremented.  It will never need to be incremented, as pr+
      in Knuth.  You will also understand it intuivitely ifˇ
2*      to construct a counterexample.                                 *
2***********************************************************************
2         SPACE 1
002ZILDIV   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILDIV'
002         #ZPDS 20                  DEFINE STACK SIZE
002         #ZSAV ,                   SAVE REGISTERS
002      ˇ
70002         LM    #6,#7,0(#11)        LOAD ARGUMENTS
80002         CLI   ##TYPE(#6),##FIXNUM IS ARG 1 A FIXNUM?
90002         BNE   NFX1ˇ
0400002         CLI   ##TYPE(#7),##FIXNUM IS ARG 2 A FIXNUM?
0410002         BNE   FX1NFX2             BRANCH IF 1 IS FIXNUM AND 2 NO
0420002*===============================ˇ
 00430002*            FIXNUM BY FIXNUM DIVIDE
 00440002*==============================================================
 00450002         ICM   #1,15,##CDR(#7)     CHECK ARGUˇ
   00460002         L     #2,##CDR(,#6)       GET ARG1
   00470002         BZ    FFDIVBY0            IF ZERO, ERROR
   00480002         LCR   #3,#2               TEST COMPLEMENT OF NUMBˇ
     00490002         BO    FFTM31              RESULT WILL BE BIG IF DI
     00500002FFTM31NO SRDA  #2,32               SHIFT INTO REGISTERS FOR
     00510002         DR    #2,#1               DIVIDE THEM
    ˇ
       00530002         #MKAT FIXED               MAKE A FIXNUM
       00540002******** B     RETURN
       00550002RETUˇ
         00560002         SPACE
         00570002         #ZRET ,                   RESTORE REGISTERS AN
         00580002*                ˇ
           00590002FFTM31   CH    #1,=H'-1'           WE MUST CHECK FOR
           00600002         BNE   FFTM31NO            IT'S NOT, CONTINUE
XNUM WORK  00610002         LA    #15,TWO31      ˇ
^31 BIGNUM   00620002         B     RETURN
             00630002*
             00640002FX1NFX2  DS    0H                          ˇ
               00650002*------------------------------------------------
-------------* 00660002*            ARG 1 IS A FIXNUM, ARG 2 IS NOT A FI
             * 00670002*------------------------------------------------
 --------------* 00680002ˇÁ
 2 A BIGNUM?                   00690002         BNE   FX1NBF2
, BRANCH TO FLONUM CHECK       00700002*================================
=============================* 00710002*ˇ
                               * 00720002*==============================
===============================* 00730002         L     #1,##CDR(,#6)
ARG 1                            00740002         LCR  ˇ
ECK FOR -2**31                     00750002         BO    FT31MB
OK AT BIGNUM TOO                   00760002         LA    #15,#SFT0
X/BIG MUST BE 0                    00770002         B     RETURN      ˇ
                                     00780002*
                                     00790002FT31MB   CLC   TWO31,0(#7)
IS BIGNUM DIVIDEND = 2^31 /          00800002         BE    M1
YES, ˇ
  ELSE QUOTIENT IS 0                   00820002         B     RETURN
                                       00830002*
                    ˇ
    RESULT IS -1                         00850002         B     RETURN
                                         00860002*
                                   ˇ
                                           00880002*--------------------
-----------------------------------------* 00890002*            ARG 1 IS
IXNUM                                    * 0090000ˇ
-------------------------------------------* 00910002         CLI   ##TY
#BIGNUM WELL, IS IT A BIGNUM?                00920002         BNE   NBFX
        IT'S NEITHER FIXED NOR BIG           00930002*-----------ˇ
---------------------------------------------* 00940002*            ARG
IGNUM                                        * 00950002*----------------
---------------------------------------------* 00960002         CLI   ##
ˇ
            WE HAVE BIGNUM BY BIGNUM             00980002         CLI
7),##FIXNUM                                      00990002         BNE
            ARGˇ
=================================================* 01010002*
Y FIXNUM DIVIDE                                  * 01020002*============
==============================ˇ
#CDR(#7)        LOAD FIXNUM                          01040002         XR
2               CLEAR FOR ICM OF LENGTH              01050002         CH
H'1'            DIVIDING BY 1?               +
TURN6             THEN RETURN POINTER TO DIˇ
#7,=H'-1'           DIVIDING BY -1?                      01080002
BFM1                YES, THEN CHECK SPECIAL CASE         01090002
#7,FDIVISOR         STORE DIVISOR WITH ORIGINAL SIGN     0ˇ
  #7,#7               TAKE POSITIVE VALUE FOR DIVISOR      01110002
  #3,4                MULTIPURPOSE CONSTANT 4              01120002
  BFDIVBY0            ATTEMPTED TO DIVIDE BIGNUM BY 0      01130002
    BFMT31              DIVISOR IS MOST NEGATIVE FIXNUM      01140002
M   #2,7,1(#6)          GET BIGNUM LENGTH                    01150002
    #15,ZLCBIG          GET ADDRESS OF ZILBIG                01160002
    #2,#ˇ
#BASR #14,#15             CALL ZILBIG                          01180002
L     #6,0(#11)           GC MAY HAVE MOVED BIGNUM POINTER     01190002
LR    #1,#2            ˇ
  LCR   #3,#3               GENERATE MULTIPURPOSE -4             0121000
  AR    #1,#3               #1 = LENGTH                          0122000
  L     #4,##VECDAT-4(#1,#6) LOAD MS Wˇ
    SRDL  #4,32               SHIFT RIGHT AND CLEAR                01240
    DR    #4,#7               DO FIRST DIVIDE INTO HI WORD         01250
    LTR   #5,#5               IS FIRST QUOTIENT 0?   ˇ
      BZ    BF1LESS             RESULT IS ONE WORD SHORTER           012
      ST    #5,##VECDAT-4(#1,#15) STORE MS WORD OF QUOTIENT          012
      STCM  #1,7,1(#15)         SET LENGTH IN RESULT HEADER         ˇ
        AR    #1,#3               #1 = LENGTH - 1 WORD                 0
        AR    #1,#3               #1 = LENGTH - 2 WORDS                0
FLOOP   L     #5,##VECDAT(#1,#6)  LOAD NEXT WORD OF DIVIDEND           0
   ˇ
2         SRDL  #4,1                RIGHT JUSTIFY 64-BIT DIVIDEND
2         DR    #4,#7               DIVIDE FOR THIS SIGNIFICANCE
2         ST    #5ˇ
002         BXH   #1,#3,BFLOOP        ANY MORE DIVIDEND WORDS LEFT?
002         AR    #2,#15              POINT TO END OF BIGNUM
002         L     #7,FDIVISOR    ˇ
90002         X     #7,##VECDAT(,#6)    combine with sign of dividend
00002         N     #7,=X'80000000'     retain only the sign
10002         O     #7,##VECDAT(,#15)   combine ˇ
1420002         ST    #7,##VECDAT(,#15)   store sign and least bignum wo
1430002         CLC   TWO31MX,0(#15)      check for illegal bignum -2^31
1440002         BE    RETT31M             if it's there, issue  -2^31 f
 01450002ˇÁ
Y POINTER      01460002         B     RETURN
               01470002*
               01480002Bˇ
1)=-2^31?        01490002         BE    RETT31M             YES, THEN RE
T NEG FIXNUM     01500002         ICM   #2,7,1(#6)          OTHERWISE IT
M, GET LEN       01510002         L    ˇ
CE SERVICE ROUTINE 01520002         LA    #2,##VECDAT(,#2)    MUST ASK F
R SPACE TOO        01530002         #BASR #14,#15             ALLOCATE T
T BIGNUM SPACE     01540002         L     #6,0(#11)   ˇ
IN CASE OF GC)       01550002         LR    #7,#2               LENGTH O
 FOR MVCL            01560002         LR    #4,#15              DESTINAT
T FOR MVCL           01570002         LR    #5,#2               LENGTˇ
INATION FOR MVCL       01580002         MVCL  #4,#6               MOVE T
M                      01590002         XI    ##VECDAT(#15),X'80' FLIP T
IN THE RESULT          01600002         ST    #4,ZLCVSNXT
    ˇ
                         01620002*
                         01630002BFMT31   CLC   0(4,#6),BIG8        CHEC
ULT WILL BE FIXNUM ˇ
T BE A FIXNUM              01650002         L     #15,ZLCBIG          GE
S OF ZILBIG                01660002         ICM   #2,7,1(#6)          GE
 LENGTH                    0167000ˇ
BIG                          01680002         L     #6,0(#11)
AVE MOVED BIGNUM POINTER     01690002         LA    #0,##VECDAT+4(,#6)
 POINT FOR MVCL COPY         01700002         LR ˇ
urce length into reg 1         01710002         SLR   #1,#3
ct 1 word from source length   01720002         LA    #4,##VECDAT(,#15)
ATION FOR MVCL                 01730002         STCM  #1,7,1(#15ˇ
LENGTH IN RESULT HEADER          01740002         LR    #5,#1
 LENGTH                          01750002         MVCL  #4,#0
 TO ANSWER                       01760002         TM    ##VECDAT(#6),X'8

KE THE RESULT BIGNUM NEGATIVE      01780002         ST    #4,ZLCVSNXT
DATE VSS AVAILABILITY POINTER      01790002         B     RETURN
              ˇ
                                     01810002RETT31M  LA    #15,TWO31M
ANSWER MUST BE -2^31, A FIXNUM       01820002         B     RETURN
                             +
                           ˇ
6)  GET UPPER WORD WHICH WILL BE ANSWER  01850002         TM    ##VECDAT
0'  TEST DIVISOR FOR MINUS SIGN          01860002         BO    NOCOMPL
    DON'T NEED TO COMPLEMENT FIXNUM      0ˇ
      NEED TO COMPLEMENT FIXNUM            01880002NOCOMPL  #MKAT FIXED
      CONS UP A FIXNUM FOR ANSWER          01890002         B     RETURN
                                           01900002*     ˇ
                                             01910002BMFP     OI    ##VE
),X'80' PUT MINUS SIGN INTO ANSWER           01920002         CLC   TWO3
5)      check for illegal bignum -2^31       01930002         BE    RETT
          if it's there, issue -2^31 fixnum    01940002         ST    #4
T         UPDATE VSS AVAILABILITY POINTER      01950002         B     RE
                                               01960002*
       ˇ
            RETURN DIVIDEND AS RESULT            01980002         B
                                                 01990002*
                      ˇ
              #1 = LENGTH - 1 WORD                 02010002         STCM
(#15)         SET LENGTH IN HEADER OF RESULT       02020002         AR
              #1 = LENGTH - 2 WORDS  ˇ
OP              is result not going to be fixnum?    02040002         L
DIVISOR         PICK UP DIVISOR WITH SIGN            02050002         IC
5,##VECDAT(#6)  GET LS WORD OF ARG1, TEST SIGN      ˇ
1LFXNM            RESULT WILL NOT BE MINUS FIXNUM      02070002
,#7               THIS WILL ENSURE THAT SIGN COMES OUT 02080002BF1LFXNM
,1                SQUEEZE OUT SIGN BIT                 02090002    ˇ
#4,1                RIGHT JUSTIFY 64-BIT DIVIDEND        02100002
#4,#7               DIVIDE TO GET FIXNUM RESULT          02110002
#2,#5               POSITION QUOTIENT FOR FIXNUM CONS    02120002
FIˇ
  RETURN                                                   02140002*====
=========================================================* 02150002*
BIGNUM BY BIGNUM ˇ
===========================================================* 02170002BIG
C   1(3,#6),1(#7)       COMPARE LENGTHS IN BIGNUM HEADERS    02180002
    B1B2                QUOTIENTˇ
BL    RETURN0             LENGTH OF ARG1 IS SMALLER, RETURN 0  02200002
XR    #5,#5               CLEAR FOR INSERTION OF 3-BYTE LENGTH 02210002
ICM   #5,7,1(#6)          GET BIGNUM LENGTHS -  BOTH SAME NOW   0222000
≈
2230002         CL    #0,##VECDAT-4(#5,#6) COMPARE WITH MS WORD OF ARG1
2240002         BH    RETURN0             ARG1 MAGNITUDE SMALLER, RETURN
2250002 ˇ
 02260002*--------------------------------------------------------------
 02270002*    MS WORD OF DIVIDEND IS LARGER, SAME LENGTH, ONLY 1 TRIAL D
 02280002*    NEEDED BEˇ
 * 02290002*------------------------------------------------------------
-* 02300002         SH    #5,=H'8'            FINDING OUT MORE ABOUT THE
   02310002         BZ    MSH2        ˇ
     02320002         #BAS  #14,LJSHIFT         get negative of left jus
unt  02330002*
     02340002         L     #0,##VECDAT+4(#5,#7) GET ˇ
       02350002         L     #1,##VECDAT(#5,#7)  GET NEXT MS WORD OF DI
       02360002         SLL   #1,1                SQUEEZE OUT JUNK BIT
       02370002         SRDL  #0,32(#4)           LEFT JUSTIFY 31 DIˇ
 IN #1   02380002*
         02390002         L     #2,##VECDAT+4(#5,#6) GET MS WORD OF DIVI
         02400002         L     #3,##VECDAT(#5,#6)  GET NEXT WORD OF DIV
   ˇ
           02420002         SRDL  #2,32(#4)           ALIGN DIVIDEND WIT
R IN #1    02430002*
           0244000ˇ
             02450002*--------------------------------------------------
-----------* 02460002* Compute required size of work area.  Then if more
s needed,  * 02470002* ask for abˇ
any requests * 02480002* for progressively slightly larger spaces will n
 require     * 02490002* a new FREEMAIN-GETMAIN combination.
             * 02500002*                        ˇ
               * 02510002* The workarea is here only needed for the rema
Since only     * 02520002* one quotient bigit is used, only one remainde
puted, and     * 02530002* is only needed for comparison with tˇ
is workarea      * 02540002* is actually not needed if we depend on Knut
rvation the      * 02550002* quotient bigit will never be estimated too
 it is too high  * 02560002* there will always be a borrow left over whe
uting the          * 02570002* remainder, which tells us it's too high.
                   * 02580002*------------------------------------------
-------------------* 02590002         LA    #14,16(,#5)         Required
 work area   +
karea is biˇ
it                       02620002         L     #1,ZLCWA            Else
ress of current workarea 02630002         L     #0,ZLCWALEN         Get
workarea size            0ˇ
ld workarea                02650002         LA    #14,1023(,#14)      Ro
nd ask for extra           02660002         N     #14,=X'FFFFFFF8'     t
ultiple of 8               02670002      ˇ
 length ready for GETMAIN    02680002         #GETMAIN RC,LV=(0),LOC=BEL
 new work area               02690002         LTR   #15,#15
in failed                    02700002         BNZ   GERRˇ
rror - not enough storage      02710002         ST    #1,ZLCWA
tore new work area address     02720002         ST    #14,ZLCWALEN
ore new work area length       02730002WAOK1    DS    0H               ˇ
enough workarea now available    02740002         L     #14,ZLCWA
address of workarea              02750002*
                                 02760002         STM   #8,#11,ZLCISAVE
 MORE ˇ
DICATE THERE ARE REGISTERS SAVED   02780002*
                                   02790002         EJECT
                     ˇ
-----------------------------------* 02810002*    MS WORD OF DIVIDEND IS
 SAME LENGTH, ONLY 1 TRIAL DIVIDE  * 02820002*    NEEDED BECAUSE RESULT
A FIXNUM                           *ˇ
                                     * 02840002*
                    quotient         * 02850002*
                    +------+         * 02860002*   ˇ
                      ◊  #3  ◊         * 02870002*
                      +------+         * 02880002*                    di
      +-----------------------         * 02890002*             +--ˇ
s-----+ ◊ +------+------+s-----+         * 02900002*             ◊
#1    ◊ ◊ ◊      ◊      ◊#8    ◊ dividend* 02910002*             +------
------+ ◊ +------+------+------+         * 02920002*
 ˇ
   + ◊      ◊      ◊    #8◊        carry   * 02940002*
     +------+------+------+                * 02950002*
     +------+---ˇ
     - ◊      ◊      ◊  #0  ◊        mult hi * 02970002*
       +------+------+------+                * 02980002*
              +------+------+-- ----+         * 02990002ˇÁ
                            - ◊      ◊      ◊  #1  ◊ mult lo * 03000002*
                              +------+------+------+         * 03010002*
                      -------------------------------        * 03020002*
                                +------+------+------+         * 0303000
                                ◊      ◊      ◊  #8  ◊ remaindr* 0304000
                                +------+------+------+         * 0305000
       ˇ
lusive range of possible results are indicated for operations    * 03070
re it is important to track the possibility of overflow.         * 03080
 example, a result canˇ
ange between A and B inclusive, would be indicated by {A,B}        * 031
n the comment field.  {0,2^31-1}, for example, is the full         * 031
ange of positive, 32-bit signed integˇ
 notation.                                                           * 0
---------------------------------------------------------------------* 0
SHCHK   L     #1,##VECDAT(,#7)    load divisor leastˇ
2         N     #1,=X'7FFFFFFF'     {0,2^31-1} mask out the sign bit
2         MR    #0,#3               multiply quotient and divisor word
2         SLDL  #0,1                {0,2^31-2} shift for 31-bit radˇ
002         SRL   #1,1                {0,2^31-1} restore lower word
002         L     #8,##VECDAT(,#6)    load dividend word
002         N     #8,=X'7FFFFFFF'     {0,2^31-1} mask out the sign bit
00ˇ
20002         SRDA  #8,31               {-1,0} shift out all but carry
30002         SRL   #9,1                {0,2^31-1} right-justify the 31
40002         ST ˇ
3250002         EJECT
3260002*----------------------------------------------------------------
3270002* When we enter here, regˇ
 03280002* multiplication, and reg 8 holds the carry from the previous
 03290002* remainder word computation.
 03300002*                                     ˇ
 * 03310002*                                                    +------+
 * 03320002*                                                    ◊  #3  ◊
 * 03330002*                                                  ˇ
   * 03340002*                    divisor         +---------------------
   * 03350002*             +------+------+s-----+ ◊ +------+------+s----
6) * 03360002*    (#2,#7)  ◊      ◊#1    ◊      ◊ ◊ ◊      ◊      ◊
idend* 03370002*             +------+------+------+ ◊ +------+------+---
       * 03380002*                               +------+------+------+
       * 03390002*                             + ◊      ◊    #8◊#8    ◊
arry   * 03400002*                               +------+------+------+
       * 0ˇ
         * 03420002*                             - ◊      ◊  #0  ◊#0
 mult hi * 03430002* BXLE registers:               +------+------+------
         * 03440002*   #4ˇ
-+         * 03450002*   #5 = length - 8                  - ◊      ◊  #1
 ◊ mult lo * 03460002*                                      +------+----
-+         * 03470002*                  ˇ
-----        * 03480002*                                      +------+--
---+         * 03490002*                             (#2,#14) ◊      ◊
ne ◊ remaindr* 03500002*                               ˇ
-----+         * 03510002*
               * 03520002*----------------------------------------------
---------------* 03530002         XR    #2,#2               INITIALIZEˇ
ON BXLE COUNTER    03540002         LA    #4,4                INCREMENT
F BXLE LOOP        03550002MSHLOOPM L     #1,##VECDAT+4(#2,#7) load divi
                   03560002         SLR   #8,#0               {-(2^31-1)
hi-muˇ
t and divisor words  03580002         SLDL  #0,1                {0,2^31-
 for 31-bit radix    03590002         SRL   #1,1                {0,2^31-
re lower word       ˇ
31-1} add dividend wrd 03610002         SR    #8,#1               {-(2^3
1-1} sub lo-mul        03620002         BO    MSHMC               double
f overflow             03630002    ˇ
 all but carry amount    03640002         SRL   #9,1                {0,2
ight-justify the 31 bits 03650002         ST    #9,##VECDAT+4(#2,#14) st
inder word in work area  03660002         BXLE  #2ˇ
 next word?                03670002*------------------------------------
-------------------------* 03680002* Compare remainder to divisor.  Rema
ould be positive but     * 03690002* less than the divisor.  If iˇ
 we decrement the quotient.* 03700002* If it's positive, we increment th
nt.                        * 03710002*----------------------------------
---------------------------* 03720002         CR    #8,#0
ˇ
, then quotient is too high    03740002*--------------------------------
-----------------------------* 03750002* The comparison with the divisor
an theoreticall y be          * 03760002ˇÁ
uotient bigit can never bee too low (see     * 03770002* Knuth, Vol 2).
, we keep it in here a little longer to      * 03780002* catch any bugs
ode that leads to this point.  At the same   * 03790002*ˇ
 more reliable divide since it has such a      * 03800002* self check.
                                               * 03810002*
                                               * 03820002* That is, allˇ
below which never lead to an MSHDQ can simply    * 03830002* be replaced
rect branch to MSHOK.                            * 03840002*------------
-------------------------------------------------* 03850002         C
ECDAT(ˇ
Q               if so, inc quotient & check it again 03870002         LC
4               generate a -4 for the BXH            03880002         LR
5               initiˇ
,##VECDAT+4(#2,#14) get remainder word                 03900002
,##VECDAT+4(#2,#7) compare with dividend word          03910002
HIQ               remainder to high,ˇ
MSHOK               remainder is lower than divisor, ok  03930002
#2,#1,MSHCMPR       not reached next to last word?       03940002*
                                                   ˇ
  #9,##VECDAT(,#7)    least significant word of divisor    03960002
  #9,=X'7FFFFFFF'     mask out the sign bit                03970002
  #9,##VECDAT(,#14)   compare these words                  0398000ˇ
    MSHOK               divisor is bigger than remainder, ok 03990002*
                                                             04000002***
    #3,=H'1'            increment the quotient               04010002***
 ˇ
B     BUG3                MSHIQ should never happen, see Knuth 04030002*
                                                               04040002*
                ˇ
  SRDA  #8,31               {-1,0} shift all but carry amount    0406000
  BM    BUG5             DIVSRDA,BM,SRL,SH>LR #9,#8;LH #8,=H'-2' 0407000
  SRL   #9,1                {0,ˇ
    SH    #8,=H'2'            subtract the double carry            04090
    ST    #9,##VECDAT+4(#2,#14) store remainder word in work area  04100
    BXLE  #2,#4,MSHLOOPM      iterate to next ˇ
                                                                     041
DQ    BCT   #3,MSHCHK           decrement quotient and check it      041
      B     BUG4                can't happen! quotient always+
                                                           ˇ
2MSHOK    LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS
2         NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED
2         LR    #2,#3               get result into register for #MKAT
002         TM    ##VECDAT(#6),X'80'  test sign of dividend
002         BNO   *+6
002         LCR   #2,#2               incorporate sign into answer
002      ˇ
20002         BNO   *+6
30002         LCR   #2,#2               incorporate sign into answer
40002         LA    #0,2ˇ
4250002         #MKAT FIXED               create the fixnum answer
4260002         B     RETURN
4270002*-------------------------------ˇ
 04280002*    MS WORD OF DIVIDEND AND DIVISOR ARE THE SAME, ANSWER WILL
 04290002*    -1, 0, OR 1.  TRIAL DIVISION NOT NECESSARY
 04300002*--------------------------------------------ˇ
-* 04310002MSE      SH    #5,=H'12'           SETUP COUNT FOR BXH
   04320002         BM    MSE2                2-WORD/2-WORD DIVIDE
   04330002         LH    #3,=H'-4'           DECREMENT COUNT FOR BXHˇ
     04340002MSEBXH   L     #0,##VECDAT+4(#5,#6) GET WORD OF DIVIDEND FO
E    04350002         CL    #0,##VECDAT+4(#5,#7) COMPARE WITH SAME WORD
OR   04360002         BNE   MSEBXHNE            STOP LOOP IF PAIR IS NOT
    ˇ
       04380002*
       04390002MSE2     L     #0,##VECDAT(,#6)    DOWN TO LAST PAIR OF W
       04400002    ˇ
         04410002         LR    #2,#0               SAVE FOR COMPUTATION
         04420002         XR    #2,#1               COMPUTE SIGN OF RESU
         04430002         SLL   #0ˇ
           04440002         SLL   #1,1                SHIFT OUT THE SIGN
           04450002         CLR   #0,#1               COMPARE THE TWO LS
           04460002         BL    RETURN0        ˇ
 0           04470002         LTR   #2,#2               TEST SIGN OF RES
             04480002         BM    MSEFM1              RESULT IS -1 /
             04490002         LA    #15,#SFT1           RESULT Iˇ
               04500002         B     RETURN
               04510002MSEFM1   LA    #15,#SFTM1          RESULT IS -1
               04520002         B     RETURN
                 04530002ˇÁ
                               04540002MSEBXHNE BL    RETURN0
TOR SMALLER, RETURN 0          04550002         L     #0,##VECDAT(,#6)
GN OF DIVIDEND                 04560002 ˇ
INE WITH SIGN OF DIVISOR         04570002         LTR   #0,#0
 SIGN OF RESULT                  04580002         BM    MSEFM1
LT IS -1                         04590002         LA   ˇ
SULT IS 1                          04600002         B     RETURN
                                   04610002         SPACE
                                   04620002RETURN0  LA    #15,#SFT0   ˇ
RETURN POINTER TO 0                  04630002         B     RETURN
                                     04640002         SPACE
                                     04650002*--------------------------
-----ˇ
 fixnum when we get here, because    * 04670002*    the bignums are of t
length in terms of 31-bit "bigits".  * 04680002*------------------------
--------------------ˇ
    GET NEGATIVE OF LEFT JUSTIFY AMOUNT  04700002*
                                         04710002         L     #0,##VEC
7)  GET MS WORD OF DIVISOR         ˇ
7)    GET LS WORD OF DIVISOR               04730002         SLL   #1,1
      SQUEEZE OUT SIGN BIT                 04740002         SRDL  #0,32(
      LEFT JUSTIFY 31 DIVISOR BITS IN #1   0475000ˇ
                                             04760002         L     #2,#
4(,#6)  GET MS WORD OF DIVIDEND              04770002         L     #3,#
,#6)    GET LS WORD OF DIVIDEND              04780002         SLLˇ
          SQUEEZE OUT SIGN BIT                 04790002         SRDL  #2
          ALIGN DIVIDEND WITH DIVISOR IN #1    04800002*
                                               04810002         DR    #2
ˇ
                                                 04830002MSH2CHK  L
DAT(,#7)    GENERATE TRIAL QUOTIENT * DIVISOR    04840002         N
FFFFFF'     MASˇ
              QUOTIENT * LS WORD OF DIVISOR        04860002         L
ECDAT+4(,#7)  GET MS WORD OF DIVISOR               04870002         MR
              QUOTIENT * MS WOˇ
                MOVE OVER 1 BIT FOR 31-BIT RADIX     04890002         SL
                MOVE OVER 1 BIT FOR 31-BIT RADIX     04900002         SR
                RESTORE POSITION OF LS WORD  +
,1                RESOTRE POSITION OF LS WOˇ
                    SUBTRACT FROM DIVISOR                04930002
#0,#0               TEST MS WORD OF HIGHER PRODUCT       04940002
MSH2DQ              GO AND DECREMENT QUOTIENT IF NOT 0   0ˇ
  #2,#1                                                    04960002
  #1,##VECDAT(,#6)    GET LS WORD OF DIVIDEND              04970002
  #1,=X'7FFFFFFF'     MASK OUT SIGN BIT                    04980002
    #1,#5               COMPUTE LS WORD OF REMAINDER         04990002
    #0,#0               CLEAR REG                            05000002
DL  #0,1                SLIP IN THE SUBTRACT CARRY BIT       05010002
L   #1,1ˇ
L     #14,##VECDAT+4(,#6) GET MS WORD OF DIVIDEND              05030002
SR    #14,#0              SUBTRACT THE CARRY BIT               05040002
SR    #14,#4           ˇ
  BM    MSH2DQ              SUBTRACTING TOO MUCH, DECREMENT QUO  0506000
  SR    #14,#2              SUBTRACT LS WORD OF HIGHER PRODUCT   0507000
  BM    MSH2DQ              SUBTRACTINˇ
                                                                   05090
    CL    #14,##VECDAT+4(,#7) COMPARE REMAINDER AND DIVISOR MS WRD 05100
    BH    MSH2IQ              REMAINDER TOO BIG, INCRˇ
      BL    RETURNR3            QUOTIENT IS GOOD, IT'S IN REGISTER 3 051
      L     #5,##VECDAT(,#7)    GET LS WORD OF DIVISOR               051
      N     #5,=X'7FFFFFFF'     MASK OUT THE SIGN BIT               ˇ
        CLR   #1,#5               COMPARE REMAINDER AND DIVISOR LS WRD 0
        BNL   MSH2IQ       DIV    REMAINDER TOO BIG, INCREMENT QUO     0
                                                                       0
ETUˇ
2         TM    ##VECDAT(#6),X'80'  test sign of dividend
2         BNO   *+6
2         LCR   #2ˇ
002         TM    ##VECDAT(#7),X'80'  test sign of divisor
002         BNO   *+6
002         LCR   #2,#2          ˇ
40002         LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO C
50002         #MKAT FIXED               create the fixnum answer
60002         B     RETURN                      ˇ
5270002*
5280002MSH2DQ   BCT   #3,MSH2CHK
5290002         B     BUG1                #3 should never decre ment to
 05300002ˇÁ
               05310002**MSH2IQ AH    #3,=H'1'            increment the
               05320002**       BP    MSH2CHK
               05330002Mˇ
ppen, see Knuth  05340002*==============================================
===============* 05350002*  General bignum by bignum divide.  Here we kn
ndicated       * 05360002*  length of tˇ
 divisor.        * 05370002*  So the magnitude of the answer must be 1 o
r.               * 05380002*============================================
=================* 05390002B1B2     XR    #3,#3       ˇ
for next operations  05400002         XR    #5,#5               "
                     05410002         ICM   #3,B'0111',1(#6)    get leng
vidend bignum        05420002         ICM   #5,B'0111',1(#7)    get lˇ
divisor bignum         05430002         LA    #2,8(,#3)           result
8 greater than diff    05440002         L     #15,ZLCBIG          get ad
LBIG                   05450002         SLR   #2,#5               subtra
wo bˇ
r possible bignum        05470002         LM    #6,#7,0(#11)        relo
- moved if there was GC  05480002*--------------------------------------
-------------------ˇ
f more space is needed,  * 05500002* ask for about 1024 bytes more.  Thi
nsure that many requests * 05510002* for progressively slightly larger s
ll not often require     * 0552000ˇ
                           * 05530002*
                           * 05540002* The workarea is here needed for b
remainder at each quotient * 05550002* bigit but ˇ
ted full remainder, which    * 05560002* is the new dividend for each ne
nt bigit calculation.        * 05570002*--------------------------------
-----------------------------* 05580002         LA    #14,16(#3,ˇ
ired size of work area           05590002         C     #14,ZLCWALEN
urrent workarea is big enough    05600002         BNH   WAOK2
 go use it                       05610002         STM   #15,#0,SAVE1500

se get address of current workarea 05630002         L     #0,ZLCWALEN
t current workarea size            05640002         FREEMAIN R,LV=(0),A=
ee the old worˇ
Round up and get extra to stop trash 05660002         N     #14,=X'FFFFF
 to next multiple of 8               05670002         LR    #0,#14
Get that length ready for GET+
ELOW Get a new work area   ˇ
    If getmain failed                    05700002         BNZ   GERROR
    then error - not enough storage      05710002         ST    #1,ZLCWA
    Else store new work area address     0ˇ
      and store new work area length       05730002         LM    #15,#0
0     Restore regs that got clobbered      05740002WAOK2    DS    0H
      Big enough workarea now available    05750002      ˇ
        Address of workarea - divident pntr  05760002*
                                             05770002         STM   #8,#
AVE     NEED MORE REGISTERS (NOT #12,#13)    05780002         OI    ZLCI
LCISVD    INDICATE THERE ARE REGISTERS SAVED   05790002*
                                               05800002         LR    #1
          we need reg 3 for other purposes     05810002*
       ˇ
DAT(,#6)    source starting point of dividend    05830002         LR
            length to copy from source           05840002         LA
DAT(,#14)   destinatioˇ
#3)           pad an extra word=0 at end           05860002         MVCL
              make a copy of the dividend          05870002         NI
AT(#14),X'7F' mask sign in work area ˇ
                                                     05890002         SH
=H'8'           dividend offset the length by 8      05900002         ST
EMPTR           REMAINDER work area (left by MVCL)  ˇ
0,#11             get set to compute dividend offset   05920002
,=H'8'            divisor offset the length by 8       05930002
0,#5              dividend offset                      05940002    ˇ
#10,BIGLDIFF        save the length difference for later 05950002*
                                                         05960002
#0,##VECDAT+4(#5,#7) DIVcheck that reg 0 clobber OK      05970002
#1ˇ
  #4,RSHIFT           store the shift amount (negative)    05990002*
                                                           06000002
  #0,##VECDAT+4(#ˇ
    #1,##VECDAT(#5,#7)  next most highest word               06020002
L   #1,1                sqeeze out junk bit                  06030002
DL  #0,32(#4)           justify ˇ
ST    #1,FDIVISOR                                              06050002*
                                                               06060002
L     #6,ZLCWA            load dividend pointer                 0607000
≈
6080002         L     #3,##VECDAT(#11,#6) next most highest word
6090002         SLL   #3,1                squeeze out junk bit
6100002 ˇ
 06110002*
 06120002         DR    #2,#1               divide to get best guess
 06130002*             ˇ
   06140002         LA    #6,0(#10,#6)        offset to fake dividend
   06150002         L     #14,REMPTR          load pointer to remainder
   06160002         B     BBCHK       ˇ
     06170002*----------------------------------------------------------
---* 06180002* Start processing for next bigit.
   * 06190002*---------------------------------------ˇ
-----* 06200002QBIGIT   L     #6,ZLCWA            load dividend pointer
       06210002         L     #4,RSHIFT           recall shift amount
       06220002         LA    #6,0(#10,#6)        offset to fake divˇ
         06230002*
         06240002         L     #0,##VECDAT+8(#5,#6) highest word of div
         06250002         L     #2,##VECDAT+4(#5,#6) next word of divide
   ˇ
           06270002         LR    #1,#2               to avoid another m
ad         06280002         SLL   #3,1                squeeze out junk b
           0629000ˇ
             06300002         SRDL  #2,31(#4)           do shift amount
             06310002         SRDL  #0,32(#4)           do shift amount
             06320002         LR ˇ
arts           06330002         CL    #1,FDIVISOR         is division go
verflow?       06340002         BL    QDIV                no, go ahead a
e              06350002         L     #3,=X'7FFFˇ
ut in max        06360002         B     BBCHK               then check t
f we divided     06370002*
                 06380002QDIV     SRDL  #2,1                finˇ
                   06390002         D     #2,FDIVISOR         divide to
 guess             06400002         EJECT
                   06410002*--------------------------------------------
-------------------* 06420002* Register usage:
                   * 06430002*
                   * 06440002*   #0 = stack pointer and misc
             +
           ˇ
                       * 06470002*   #3 = quotient bigit
                       * 06480002*   #4 = 4
                       * 0ˇ
                         * 06500002*   #6 = (fake B1) - full remainder (
 for next bigit)         * 06510002*   #7 = (B2)
                         * 06520002*   #8ˇ
                           * 06530002*   #9 = misc
                           * 06540002*  #10 = offset in dividend = (L1 -
less                       * 06550002*  #11 = L1 (lengthˇ
                             * 06560002*  #12 = --base register for this
-                            * 06570002*  #13 = --common area pointer--
                             * 06580002*  #14 = temporary remainder (reˇ
 by from bigit times divisor)  * 06590002*  #15 = pointer to result vect
                               * 06600002*
                               * 06610002*  The temporary registers are
followˇ
                                 * 06630002*
                quotient         * 06640002*
         +------+    ˇ
           ◊    #3◊                * 06660002*
           +------+                * 06670002*                    diviso
  +-----------------------         *ˇ
--+ ◊ +------+------+------+ (#2,#6) * 06690002*   (#2,#7)          ◊
  ◊ ◊ ◊      ◊#8    ◊      ◊ dividend* 06700002*                    +---
--+ ◊ +------+------+------+         * 06710002*   ˇ
 +------+------+                       * 06720002*
 ◊      ◊    #8◊               carry   * 06730002*
 +------+------+                       * 06740002*                ˇ
   +------+------+                       * 06750002* BXLE registers:
 - ◊      ◊  #0  ◊               mult hi * 06760002*   #4 = increment
   +------+------+                       * 06770002*   #5 = length - 8
 ˇ
          - ◊      ◊  #1  ◊        mult lo * 06790002*
            +------+------+                * 06800002*
    ------------ˇ
              +------+------+                * 06820002*            (#2,
new dividend  ◊      ◊  #8  ◊        remaindr* 06830002*
              +------+------+                 * 06840002ˇÁ
                                                             * 06850002*
ve range of possible results are indicated for operations    * 06860002*
t is important to track the possibility of overflow.         * 06870002*
xample, a result can be known to be limited to a certain       * 0688000
 between A and B inclusive, would be indicated by {A,B}        * 0689000
e comment field.  {0,2^31-1}, for example, is the full         * 0690000
 of posˇ
ation.                                                           * 06920
-----------------------------------------------------------------* 06930
    EJECT             ˇ
HK    L     #1,##VECDAT(,#7)    load divisor least-significant word  069
      N     #1,=X'7FFFFFFF'     {0,2^31-1} mask out the sign bit     069
      MR    #0,#3               multiˇ
        SLDL  #0,1                {0,2^31-2} shift for 31-bit radix    0
        SRL   #1,1                {0,2^31-1} restore lower word        0
        L     #8,##VECDAT(,#6)    load dividend wordˇ
2         SR    #8,#1               {-(2^31-1),2^31-1} subtract mult lo
2         SRDA  #8,31               {-1,0} shift out all but carry
2         SRL   #9,1                {0,2^31-1} right-justify the 31ˇ
002         ST    #9,##VECDAT(,#14)   store remainder in word in work ar
002*--------------------------------------------------------------------
002* When we enter here, reg 0 contains the hi word from the previous
00ˇ
70002* remainder word computation.
80002*------------------------------------------------------------------
90002         XR ˇ
7100002         LA    #4,4                INCREMENT AMOUNT OF BXLE LOOP
7110002BBLOOPM  L     #1,##VECDAT+4(#2,#7) load divisor word
7120002         SLR   #8,#0     ˇ
 07130002         MR    #0,#3               multiply quotient and diviso
 07140002         SLDL  #0,1                {0,2^31-2} shift for 31-bit
 07150002         SRL   #1,1                {0,ˇ
   07160002         A     #8,##VECDAT+4(#2,#6) {-(2^31-1),2^31-1} add di
rd 07170002         SR    #8,#1               {-(2^32-2),2^31-1} sub lo-
   07180002         BO    BBMC                double carry if ˇ
     07190002         SRDA  #8,31               {-1,0} shift all but car
t    07200002         SRL   #9,1                {0,2^31-1} right-justify
bits 07210002         ST    #9,##VECDAT+4(#2,#14) store remainder word i
 area  07220002         BXLE  #2,#4,BBLOOPM       iterate to next word?
         07230002         EJECT
         07240002*------------------------------------------------------
-------* 07250002* Compare remainder to divisor.  Remainder should be po
ut     * 0ˇ
quotient.* 07270002* The remainder will never be greater than the diviso
ver,     * 07280002* traps (BUG# labels) have been inserted to catch ins
here this* 07290002* appeˇ
 a bug     * 07300002* in the algorithm which generated the trial diviso
 the code  * 07310002* that determined that it was greater than the divi
           * 07320002*                  ˇ
             * 07330002* The comparison with the divisor below can theor
 be          * 07340002* eliminated, since the quotient bigit can never
ow (see      * 07350002* Knuth, Vol 2).  However, we keˇ
longer to      * 07360002* catch any bugs in the code that leads to this
 At the same   * 07370002* time, this provides a more reliable divide si
as such a      * 07380002* self check.                                ˇ
                 * 07390002*
                 * 07400002* That is, all paths below which never lead t
Q can simply     * 07410002* be replaced by a direct branch to BBQOK.
     ˇ
-------------------* 07430002BBENDCHK SLR   #8,#0               {-(2^31-
b hi-mul from carry  07440002         A     #8,##VECDAT+4(#2,#6) {-(2^31
-1} add dividend wrdˇ
uotient is too high    07460002         BP    BBIQ                if not
uotient is too low     07470002*
                       07480002    ˇ
ord of remainder to big? 07490002         BH    BBIQ                if s
uotient & check it again 07500002         LCR   #1,#4               gene
4 for the BXH            07510002         LR    #2ˇ
 the count to the top      07520002BBCMPR   L     #9,##VECDAT+4(#2,#14)
inder word                 07530002         C     #9,##VECDAT+4(#2,#7) c
ith dividend word          07540002         BH    BBIQ           ˇ
r to high, inc. quotient     07550002         BL    BBQOK
r is lower than divisor, ok  07560002         BXH   #2,#1,BBCMPR
hed next to last word?       07570002*
ˇ
significant word of divisor    07590002         N     #9,=X'7FFFFFFF'
ut the sign bit                07600002         C     #9,##VECDAT(,#14)
e these words                   07610002ˇÁ
          divisor is bigger than remainder, ok 07620002*
                                               07630002***BBIQ  AH    #3
          increment the quotient               07640002*ˇ
            check the incremented quotient       07650002BBIQ     B
            BBIQ should never happen, see Knuth  07660002*
                                                 07670002*             ˇ
              really part of BBLOOPM above         07680002BBMC     SRDA
              {-1,0} shift all but carry amount    07690002         BM
           DIVSRDA,BM,SRL,SH>LR #9,#8;LH #8,=H'-2' 07700002         SRL
      ˇ
H'2'            subtract the double carry            07720002         ST
#VECDAT+4(#2,#14) store remainder word in work area  07730002         BX
4,BBLOOPM       iteraˇ
ENDCHK            check the carry position at end      07750002*
                                                       07760002BBDQ
,=H'1'            decrement quotientˇ
BBCHK                                                    07780002
BUG7                can't happen! quotient never < 0     07790002*
                                                   ˇ
  #3,##VECDAT(#10,#15) store result quotient               07810002
  #0,##VECDAT(,#14)   address of remainder for MVCL        07820002
  #1,8(,#5)           length of temp remainder             0783000ˇ
    #2,##VECDAT(,#6)    destination - fake dividend          07840002
    #3,12(,#5)          pad out higest rem word to 0         07850002
CL  #2,#0               stuff remainder into dividend        07860002
 ˇ
BNM   QBIGIT              go compute another quotient bigit    07880002*
                                                               07890002
LM    #8,#11,ZLCˇ
  NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED   0791000
  L     #1,BIGLDIFF         length is this or 4 more             0792000
  CR    #1,#4                  ˇ
    L     #0,##VECDAT(#1,#15) Get higest word of result            07940
    BNE   BBLONG              Result may be a long bignum          07950
    LTR   #0,#0               Leading bigit=0?ˇ
      BNZ   BB2WRD              Result is a two-word bignum          079
      L     #2,##VECDAT(,#15)   get ls word of bignum-to-be-fixnum   079
      L     #6,0(,#11)          load address of original divi+
        TM    ##VECDAT(#6),X'80'  test sign of dividend    ˇ
2         BNO   *+6                 not negative, don't include sign
2         LCR   #2,#2               incorporate sign into answer
2         TM    ##VECDAT(#7),X'80'  test sign of divisor
002         BNO   *+6                 not negative, don't include sign
002         LCR   #2,#2               incorporate sign into answer
002         LA    #0,20(,#11)         PASS CURRENT STACK LOCATION TO CON
002      ˇ
70002         B     RETURN
80002*
90002BB2WRD   L     #2,#ˇ
8100002         L     #6,0(#11)           Get pointer to real dividend
8110002         MVC   1(3,#15),=X'000008' Insert length of two word bign
8120002         X     #2,##VECDAT(,#6) ˇ
 08130002         N     #2,=X'80000000'     retain only the sign
 08140002         O     #2,##VECDAT(,#15)   combine with least word of b
 08150002         LA    #1,##VECDAT+8(,#15) point to eˇ
   08160002         ST    #2,##VECDAT(,#15)   store sign and least bignu
   08170002         CLC   TWO31MX,0(#15)      check for illegal bignum -
   08180002         BE    RETT31M             if it's there, issue -2ˇ
m    08190002         ST    #1,ZLCVSNXT         UPDATE VSS AVAILABILITY
     08200002         B     RETURN
     08210002*
    ˇ
       08230002         L     #2,##VECDAT(,#7)    load signed word of di
       08240002         L     #6,0(#11)           Get pointer to real di
       08250002    ˇ
ct       08260002         LA    #1,4(,#1)           Length is one more w
         08270002BBLONG0  X     #2,##VECDAT(,#6)    combine with sign of
d        08280002         STCM  #1ˇ
eader      08290002         N     #2,=X'80000000'     retain only the si
           08300002         O     #2,##VECDAT(,#15)   combine with least
 bignum    08310002         LA    #1,##VECDAT(#1,ˇ
n storage    08320002         ST    #2,##VECDAT(,#15)   store sign and l
num word     08330002         CLC   TWO31MX,0(#15)      check for illega
 -2^31       08340002         BE    RETT31M             if it's ˇ
2^31 fixnum    08350002         ST    #1,ZLCVSNXT         UPDATE VSS AVA
Y POINTER      08360002         B     RETURN
               08370002*================================================
 ==============* 08380002ˇÁ
FICATION SHIFT FOR TRIAL     * 08390002*  DIVISION.  ANSWER IN REG 4 IS
, REG 0 IS DESTROYED.        * 08400002*  The shift amount in reg 4 can
-30 to 0.                    * 08410002*ˇ
===============================* 08420002LJSHIFT  LTR   #0,#0
                                 08430002         BM    BUG9
ing bignum bigit is 0, error!    08440002         CL   ˇ
SUMES HIGH TWO WORDS IN #0,#1      08450002         BNH   BYTE0
L BITS ARE IN BYTE 0               08460002         CL    #0,=X'0000FFFF
L BITS IN LOWER HALF?              08470002         BNH   BYTE1       ˇ
YES, ALL BITS IN LOWER HALF          08480002         CL    #0,=X'00FFFF
ALL BITS IN LOWER THREE BYTES?       08490002         BNH   BYTE2
YES, ALLB ITS IN LOWER 3 BYTES       08500002*
     ˇ
  SET INITIAL SHIFT NEGATIVE COUNT     08520002         SLA   #0,1
  DO FIRST SHIFT AND TEST HIGH BIT     08530002         BOR   #14
  HIGH BIT IS A ONE ˇ
    INCREMENT SHIFT NEGATIVE COUNT       08550002         SLA   #0,1
    SHIFT ONE MORE AND TEST HIGH BIT     08560002         BNO   AGAIN3
    HIGH BIT IS NOT A ONE          ˇ
      RETURN TO CALLING POINT              08580002*
                                           08590002BYTE2    LH    #4,=H'
      SET INITIAL SHIFT NEGATIVE COUNT     0860000ˇ
        DO FIRST SHIFT AND TEST HIGH BIT     08610002         BOR   #14
        HIGH BIT IS A ONE                    08620002AGAIN2   BCTR  #4,0
        INCREMENT SHIFT NEGATIVE COUNT       08630002         SLAˇ
          SHIFT ONE MORE AND TEST HIGH BIT     08640002         BNO   AG
          HIGH BIT IS NOT A ONE                08650002         BR    #1
          RETURN TO CALLING POINT              08660002*
ˇ
5'          SET INITIAL SHIFT NEGATIVE COUNT     08680002         SLA
            DO FIRST SHIFT AND TEST HIGH BIT     08690002         BOR
            HIGˇ
              INCREMENT SHIFT NEGATIVE COUNT       08710002         SLA
              SHIFT ONE MORE AND TEST HIGH BIT     08720002         BNO
              HIGH BIT IS NOT ˇ
                RETURN TO CALLING POINT              08740002*
                                                     08750002BYTE0    LH
H'-23'          SET INITIAL SHIFT NEGATIVE CO+
,24               DO FIRST SHIFT AND TEST Hˇ
#14                 HIGH BIT IS A ONE                    08780002AGAIN0
#4,0                INCREMENT SHIFT NEGATIVE COUNT       08790002
#0,1                SHIFT ONE MORE AND TEST HIGH BIT     0ˇ
  AGAIN0              HIGH BIT IS NOT A ONE                08810002
  #14                 RETURN TO CALLING POINT              08820002
T                                                          08830002*====
===========================================================* 08840002* A
A BIGNUM                                                   * 08850002* A
NOT A BIGNUM OR A FIXNUM                                   * 08860002*==
========ˇ
DS    0H                                                       08880002
CLI   ##TYPE(#7),##SFLOAT IS ARG 2 A SINGLE FLOAT?             08890002
BE    BIGSFLO          ˇ
  CLI   ##TYPE(#7),##DFLOAT IS ARG 2 A DOUBLE FLOAT?             0891000
  BE    BIGDFLO                                                  0892000
  B     ERROR2              IF NEITHERˇ
LO  DS    0H                  Bignum / single-float                08940
    L     #15,ZLCCVBF         Get address of ZILCVBF               08950
    LR    #5,#6               Arg1 is bignum, arg2 isˇ
      #BASR #14,#15             Convert bignum to float              089
      LER   #F2,#F0             Get float value for arg1             089
      B     DIVSFLO1            Go to divide arg1 by float arg2     ˇ
IGDFLO  DS    0H                  Bignum / double-float                0
        L     #15,ZLCCVBF         Get address of ZILCVBF               0
        LNR   #5,#6               Arg1 is bignum, arg2 is float        0
   ˇ
2         LDR   #F2,#F0             Get float value for arg1
2         B     DIVDFLO1            Go to divide arg1 by float arg2
2*                ˇ
002* ARG 1 IS NEITHER A FIXNUM NOR A BIGNUM
002*
002NBFX1    DS    0H             ˇ
90002         CLI   ##TYPE(#6),##SFLOAT IS ARG 1 A SINGLE FLOAT?
00002         BE    ARG1SFLO
10002         CLI   ##TYPE(#6),##DFLOAT IS ARG 1ˇ
9120002         BE    ARG1DFLO
9130002         B     ERROR1              IF NOT, ERROR
9140002*                                                       
 09150002ˇÁ
               09160002* ARG 1 IS A FIXNUM
               09170002* ARG 2 IS NEITHER A FIXNUM NOR A BIGNUM
               09180002*ˇ
                 09190002FX1NBF2  DS    0H                  ARG 1 IS FIX
RG2 IS NOT       09200002         SPACE
                 09210002*             ˇ
                 * 09220002*--------------------------------------------
-----------------* 09230002*                      CHECK TYPE OF ARG 2
                 * 09240002*--------------------------ˇ
-------------------* 09250002         CLI   ##TYPE(#7),##SFLOAT
                     09260002         BE    FIXSFLO             FIXED /
 SFLOAT              09270002         CLI   ##TYPE(#7),##DFLOAT      ˇ
                       09280002         BE    FIXDFLO             FIXED
 = DFLOAT              09290002         B     ERROR2              FIXED
= ERROR                09300002FIXSFLO  L     #0,##CDR(,#6)       GET FI
E 1 ˇ
D TO FLOAT               09320002         LRER  #F2,#F0             GET
LOAT VALUE 1             09330002         B     DIVSFLO1
                   ˇ
VALUE 1                    09350002         #BAS  #14,FIX2FLO         CO
XED TO FLOAT               09360002         LDR   #F2,#F0             GE
 FLOAT VALUE 1             0937000ˇ
                             09380002         SPACE
                             09390002ARG1SFLO DS    0H
 SINGLE FLOAT                09400002         SPAˇ
                               09410002*--------------------------------
-----------------------------* 09420002*                      CHECK TYPE
2                            * 09430002*------------------------ˇ
-------------------------------* 09440002         CLI   ##TYPE(#7),##SFL
                                 09450002         BE    SDIVSFLO
AT / SFLOAT = SFLOAT             09460002         CLI   ##TYPE(#7),##DFL

LOAT / DFLOAT = DFLOAT             09480002         CLI   ##TYPE(#7),##F
                                   09490002         BE    SFLOPFIX
LOAT / FIXED =ˇ
                                     09510002         BNE   ERROR2
SFLOAT / NONUM = ERROR               09520002         LE    #F2,##CDR(,#
Get single float value 1     +
  Get address of ZILCVBF   ˇ
    Arg1 is float, arg2 is bignum        09550002         #BASR #14,#15
    Convert bignum to float              09560002         LER   #F4,#F0
    Get float value for arg2             0ˇ
                                           09580002         SPACE 1
                                           09590002*--------------------
-----------------------------------------* 09600002*     ˇ
UM TO SINGLE FLOAT                         * 09610002*------------------
-------------------------------------------* 09620002SFLOPFIX LE    #F2,
6)      Get single float value 1             09630002         L     #0,#
#7)       GET FIXED VALUE 2                    09640002         #BAS  #1
O         CONVERT FIXED TO FLOAT               09650002         LRER  #F
          GET FLOAT VALUE 2                    09660002         B     DI
       ˇ
                                                 09680002ARG1DFLO DS
            ARG 1 IS DOUBLE FLOAT                09690002         SPACE
                      ˇ
,#6)          GET FLOAT VALUE 1                    09710002*------------
-------------------------------------------------* 09720002*
  CHECK TYPE OF ARG 2                ˇ
---------------------------------------------------* 09740002         CL
PE(#7),##DFLOAT                                      09750002         BE
FLO1            DFLOAT / DFLOAT = DFLOAT            ˇ
TYPE(#7),##SFLOAT                                      09770002
IVSFLO            DFLOAT / SFLOAT = DFLOAT             09780002
TYPE(#7),##FIXNUM                                      09790002    ˇ
DFLOPFIX            DFLOAT / FIXED = DFLOAT              09800002
##TYPE(#7),##BIGNUM                                      09810002
ERROR2              DFLOAT / NONUM = ERROR               09820002
#1ˇ
  #5,#7               Arg1 is float, arg2 is bignum        09840002
R #14,#15             Convert bignum to float              09850002
  #F4,#F0        ˇ
    DIVDFLO2            Go to DIV float arg1 to arg2         09870002
ACE 1                                                        09880002*--
--------------------------------ˇ
              FIXNUM TO DOUBLE FLOAT                         * 09900002*
-------------------------------------------------------------* 09910002D
L     #0,##CDR(,#7)       GET FIXED VALUE 2                     0992000
≈
9930002         LDR   #F4,#F0             GET FLOAT VALUE 2
9940002         B     DIVDFLO2            FLOAT / FIXED = FLOAT
9950002 ˇ
 09960002*--------------------------------------------------------------
 09970002*                       SINGLE FLOAT DIV
 09980002*-------------ˇ
-* 09990002SDIVSFLO DS    0H
   10000002         LE    #F2,##CDR(,#6)      Get single float value 1
   10010002DIVSFLO1 DS    0H          ˇ
     10020002         LE    #F4,##CDR(,#7)      Get single float value 2
     10030002DIVSFLO2 DS    0H
     10040002         LTER  #F4,#F4             CHECKˇ
       10050002         BZ    FLDIVBY0            IF ZERO, ERROR
       10060002         DER   #F2,#F4             DIVIDE THEM
       10070002         STE   #F2,ZLCWORK         PUT RESULT IN REG ˇ
AKING    10080002         L     #2,ZLCWORK
         10090002         LA    #0,20(,#11)         SET STACK LOCATION F
         10100002         #MKAT FLOAT               MAKE A FLONUM
   ˇ
           10120002         SPACE 1
           10130002*----------------------------------------------------
---------* 1014000ˇ
           * 10150002*--------------------------------------------------
-----------* 10160002DDIVSFLO DS    0H
             10170002         SDRˇ
               10180002         LE    #F4,##CDR(,#7)      Get double flo
 2             10190002         B     DIVDFLO2
               10200002SDIVDFLO DS    0H        ˇ
                 10210002         SDR   #F2,#F2
                 10220002         LE    #F2,##CDR(,#6)      Get double f
ue 1             10230002DIVDFLO1 DS    0H                     ˇ
                   10240002         LD    #F4,8(,#7)          Get double
alue 2             10250002DIVDFLO2 DS    0H
                   10260002         LTDR  #F4,#F4             CHECK ARGU
                     10270002         BZ    FLDIVBY0            IF ZERO,
                     10280002         DDR   #F2,#F4             DIVIDE T
                     10290002         LDR   #F0,#F2
             +
 ZILMDF    ˇ
to make a double-float   10320002         B     RETURN              AND
ITH IT                   10330002         SPACE
                         1ˇ
LOAT CONVERSION SUBROUTINE 10350002         SPACE
                           10360002FDIVISOR DS    F                   TE
STORAGE FOR FIXNUM DIVISOR 10370002RSHIFTˇ
Y STORAGE FOR SHIFT AMOUNT   10380002REMPTR   DS    F
Y STORAGE REMAINDER POINTER  10390002BIGLDIFF DS    F
ce in lengths of two bignums 10400002SAVE1500 DS    2A  ˇ
aved across FREEMAIN/GETMAIN   10410002         DS    0A
                               10420002TWO31M   #IATM -2147483648
E MOST NEGATIVE FIXNUM (-2^31) 10430002*        DS    0A               ˇ
N FIXNUM TO FULLWORD             10440002*TWO31M  DC    YL1(##FIXNUM),AL
2147483648'  MOST NEG FIXNUM     10450002         DS    0A
N BIGNUM TO FULLWORD             10460002ZTWO31   DC    YL1(##BIGNUM),AL
,1' 2*ˇ
BEL AND LENGTH FOR TWO31           10480002ZTWO31MX DC    YL1(##BIGNUM),
'80000000',F'1' -2**31 bad BIGNUM  10490002TWO31MX  EQU   ZTWO31MX,*-ZTW
BEL AND LENGTH FOR twˇ
 LENGTH OF SHORT BIGNUM              10510002         SPACE
                                     10520002FFDIVBY0 EQU   *
                                    ˇ
                                       10540002BFDIVBY0 EQU   *
                                       10550002         #ERR  'Attempted
de ',0(#11),' by ',4(#11)              10560002ERROˇ
ivide not a number - ',0(#11)            10570002ERROR2   #ERR  'Argumen
ivide not a number - ',4(#11)            10580002BUG1     LA    #2,1
                                         10590002         B     BUˇ
                                           10600002BUG2     LA    #2,2
                                           10610002         B     BUGERR
                                           10620002BUG3     LA    #2,3
 ˇ
                                             10640002BUG4     LA    #2,4
                                             10650002         B     BUGE
                ˇ
                                               10670002         B     BU
                                               10680002BUG6     LM    #8
ISAVE     RESTORE THE SAVED REG ISTERS          10690002ˇÁ
NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED   10700002
LA    #2,6                                                     10710002
B     BUGERR                                                   10720002B
  LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS          1073000
  NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED   1074000
  LA    #2,7                                                     1075000
  B    ˇ
    LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS          10770
    NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT REGISTERS RESTORED   10780
    LA    #2,8        ˇ
      B     BUGERR                                                   108
9     LA    #2,9                                                     108
***** B     BUGERR                   ˇ
UGERR   #ERR  'Bignum/bignum divide, internal bug #',#2,' for ',      X1
              0(#11),' and ',4(#11),' - please report.'                1
        SPACE 1                                     ˇ
2GERROR   DS    0H                  Error - not enough work area
2         XR    #0,#0               Clear work area address and length
2         ST    #0,ZLCWA                                           ˇ
002         ST    #0,ZLCWALEN
002         #ERR  PREFIX=NO,
002               'ZIL3102 ZILDIV: Not enough memory to perform trial di
00ˇ
20002         SPACE 1
30002         LTORG
40002         ENDà
0950002
OUTINE'                  00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002*
                           * 00017002* (ZILDSNI inputfilespec) returns t
l data set name to which   * 00018002* the input file spec inputˇ
located.  If inputfilespec   * 00019002* is the terminal, * is returned.
                             * 00020002*
                             * 00030002*********************************

                                 00050002ZILDSNI  #ZBEG MINARGS=1,MAXARG
='ZILDSNI'                       00060002         #ZPDS 16
NE STACK SIZE ˇ
VE REGISTERS                       00080002         SPACE 1
                                   00090002         #IFIL 1
G 1 = INPUT FILE SPEC        ˇ
                                     00110002         USING ZLFILBLK,#7
                                     00120002         TM    ZLFFLAG1,ZLF
If this is a terminal file           0013000ˇ
  then return "*" for dsname           00140002         TM    ZLFDCB+X'3
  If DCB is not open                   00150002         BNO   NOTOPEN
  then error - this shouldn't happen   00160002         XR ˇ
    Clear register for insert            00170002         ICM   #3,B'001
B+X'28'  Get TIOT offset                 00180002         L     #15,540
    Get TCB address                      00190002         L     #15,12(,
      Get TIOT address                     00200002         ALR   #3,#15
      Add TIOT offset                      00210002         USING TIOENT
      Address the TIOT entry               00220002         TM    TIOELI
ERM   If ˇ
        then return "*" for terminal         00240002*
                                             00250002* The following wil
rk if SWA is above the lˇ
                                               00270002*
                                               00280002         XR    #5
          Prepare register for 24-bit a+
EJFCB       Get address of JFCB      ˇ
,#5)          Point past SWA prefix                00310002         MVI
,C' '         Clear dsname(member) to blanks       00320002         MVC
+1(L'DSNAME-1),DSNAME                              0ˇ
ME(44),0(#5)    Copy data set name                   00340002         CL
ME,C' '         If it is all blank                   00350002         BE
ULL             (very unlikely, but) return ""       00360002      ˇ
,DSNAME+44-1      Search for last nonblank             00370002DSNLOOP
#1),C' '                                               00380002
NLEND                                                  00390002
,Dˇ
0H                  #1 -> last nonblank in DSN           00410002
#2,1(,#1)           Point where to put possible member   00420002
44(#5),C' '      ˇ
  NOMEMBER            then...                              00440002
  0(#2),C'('           put a left paren there              00450002
  1(8,#2),44(#5)       move membˇ
    #1,8-1(,#2)          Search for last nonblank            00470002MEM
I   0(#1),C' '                                               00480002
E   MEMLEND                                    ˇ
BCT   #1,MEMLOOP                                               00500002M
DS    0H                   #1 -> last nonblank in DSN          00510002
MVI   1(#1),C')'           put a right paren there            ˇ
  LA    #2,2(,#1)           Point to end of dsname(member)       0053000
R DS    0H                  #2 -> end of name                    0054000
  LA    #0,DSNAME                                                0055000
    SR    #2,#0               Length of string                     00560
    XR    #1,#1               Set ZILVSS entry code for new space  00570
    L     #15,ZLCVSS          Get address of ZILVSS                00580
    LA    #0ˇ
      #BASR #14,#15             Call ZILVSS to create a string       006
      LTR   #15,#15             If string build failed               006
      BZ    ERROR          ˇ
        LH    #2,2(,#15)          Get length (from built string)       0
        BCTR  #2,0                Reduce for execute                   0
        EX    #2,MOVEIT           Move dsnˇ
2         B     RETURN              Return with string
2         SPACE 1
2MOVEIT   MVC   ##VECDAT(*-*,#15),DSNAME Executed: move d ata to string
002ˇÁ
         00690002RETNULL  DS    0H
         00700002         LA    #15,NULLSTR
         00710002 ˇ
           00720002RETTERM  DS    0H
           00730002         LA    #15,STAR
           00740002         B    ˇ
             00750002         SPACE
             00760002RETURN   DS    0H
             00770002         SPACE 1           ˇ
               00780002         #ZRET ,                   RESTORE REGIST
RETURN         00790002         SPACE 1
               00800002DSNAME   DS    CL(44+8+1+1)        Spaceˇ
e(member)        00810002NULLSTR  #SATM ''                  String ""
                 00820002STAR     #SATM '*'                 String "*"
                 00830002         SPACE 1
                   00840002NOTOPEN  DS    0H
                   00850002         L     #2,ZLFATOM
                   00860002         #ERR  'ZILDSNI: Input file is not op
#2)          ˇ
                     00880002ERROR    #ERR  PREFIX=NO,'ZIL4010 ZILDSNI:
gh vector/string spaX00890002               ce to build string.'
                     0090000ˇ
                       00910002         LTORG
                       00920002         SPACE 1
                       00930002         IEF2 TIOT1
                         00940002         SPACE 1
                         00950002         END
                         00960002
NO - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*************
************************************************** 00011001*
                                                 * 00012001*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013001*
   All rights reserved.                            * 00014001*
                                                   * 00015001***********
****************************************************** 00016001*
                                                     * 00017001* (ZILDSN
filespec) returns the actual data set name to which  * 00018001* the out
 spec outpˇ
al, * is returned.                                     * 00020001*
                                                       * 00030001*******
*************************ˇ
E                                                          00050001ZILDS
G MINARGS=1,MAXARGS=1,NAME='ZILDSNO'                       00060001
S 16                  DEFINE STACK SIZE ˇ
SAV ,                   SAVE REGISTERS                       00080001
ACE 1                                                        00090001
FIL 1                   ARG 1 = OUTPUT FILE SPEC       ˇ
SPACE 1                                                        00110001
USING ZLFILBLK,#7                                              00120001
TM    ZLFFLAG1,ZLFTERM    If this is a terminal file           0013000ˇ
  BO    RETTERM             then return "*" for dsname           0014000
  TM    ZLFDCB+X'30',X'10'  If DCB is not open                   0015000
  BNO   NOTOPEN             then error - this shouldn't happen   0016000
  XR ˇ
    ICM   #3,B'0011',ZLFDCB+X'28'  Get TIOT offset                 00180
    L     #15,540             Get TCB address                      00190
    L     #15,12(,#1ˇ
      ALR   #3,#15              Add TIOT offset                      002
      USING TIOENTRY,#3         Address the TIOT entry               002
      TM    TIOELINK,TIOTTERM   If ˇ
        BO    RETTERM             then return "*" for terminal         0
                                                                       0
 The following will not work if SWA is above the lˇ
1* MVS/SP2.2 system.
1*
1         XR    #5,#5               Prepare register for 24-bit a+
001         ICM   #5,7,TIOEJFCB       Get address of JFCB      ˇ
00001         LA    #5,16(,#5)          Point past SWA prefix
10001         MVI   DSNAME,C' '         Clear dsname(member) to blanks
20001         MVC   DSNAME+1(L'DSNAME-1),DSNAME
0330001         MVC   DSNAME(44),0(#5)    Copy data set name
0340001         CLI   DSNAME,C' '         If it is all blank
0350001         BE    RETNULL             (very unlikely, but) return ""
0360001      ˇ
 00370001DSNLOOP  CLI   0(#1),C' '
 00380001         BNE   DSNLEND
 00390001         BCT   #1,Dˇ
   00400001DSNLEND  DS    0H                  #1 -> last nonblank in DSN
   00410001         LA    #2,1(,#1)           Point where to put possibl
   00420001         CLI   44(#5),C' '      ˇ
     00430001         BE    NOMEMBER            then...
     00440001         MVI   0(#2),C'('           put a left paren there
     00450001         MVC   1(8,#2),44(#5)       move membˇ
       00460001         LA    #1,8-1(,#2)          Search for last nonbl
       00470001MEMLOOP  CLI   0(#1),C' '
       00480001         BNE   MEMLEND
         00490001         BCT   #1,MEMLOOP
         00500001MEMLEND  DS    0H                   #1 -> last nonblank
         00510001         MVI   1(#1),C')'           put a right paren t
        ˇ
ber)       00530001NOMEMBER DS    0H                  #2 -> end of name
           00540001         LA    #0,DSNAME
           00550001    ˇ
             00560001         XR    #1,#1               Set ZILVSS entry
r new space  00570001         L     #15,ZLCVSS          Get address of Z
             00580001         LA    #0ˇ
ter            00590001         #BASR #14,#15             Call ZILVSS to
a string       00600001         LTR   #15,#15             If string buil
               00610001         BZ    ERROR          ˇ
                 00620001         LH    #2,2(,#15)          Get length (
lt string)       00630001         BCTR  #2,0                Reduce for e
                 00640001         EX    #2,MOVEIT           Move dsnˇ
 string            00650001         B     RETURN              Return wit
                   00660001         SPACE 1
                   00670001MOVEIT   MVC   ##VECDAT(*-*,#15),DSNAME Execu
e d ata to string   00680001ˇÁ
                                   00690001RETNULL  DS    0H
                                   00700001         LA    #15,NULLSTR
                                   00710001 ˇ
                                     00720001RETTERM  DS    0H
                                     00730001         LA    #15,STAR
                                     00740001         B    ˇ
                                       00750001         SPACE
                                       00760001RETURN   DS    0H
                                       00770001         SPACE 1
                                         00780001         #ZRET ,
    RESTORE REGISTERS AND RETURN         00790001         SPACE 1
                                         00800001DSNAME   DS    CL(44+8+
    Spaceˇ
      String ""                            00820001STAR     #SATM '*'
      String "*"                           00830001         SPACE 1
                        ˇ
                                             00850001         L     #2,Z
                                             00860001         #ERR  'ZIL
tput file is not open - ',(#2)         ˇ
                                               00880001ERROR    #ERR  PR
'ZIL4010 ZILDSNO: Not enough vector/string spaX00890001               ce
d string.'                                     0090000ˇ
                                                 00910001         LTORG
                                                 00920001         SPACE
                                                 00930001         IEF2 T
                                                   00940001         SPAC
                                                   00950001         END
                                                   00960001
	
10002*
11002* ZIL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.
12002*ˇ
0013002*
0013102*****************************************************************
0013202         TITLEˇ
 00013302         MACRO
 00013402&SYM     $SPFC
 00013502&SYM     DS    0H          ˇ
   00013602         L     #15,@ISPLINK          GET ADDRESS OF ISPLINK
   00013702         OI    ZLCIFLGS,ZLCISYS      INDICATE NON-ZIL CODE RU
   00013802         #BASR #14,#15               CALˇ
     00013902         TM    ZLCIFLGS,ZLCIATTN     IF ATTENTION INTERRUPT
D    00014002         BOR   #13                   THEN GO TO HANDLE IT
     00014102         NI    ZLCIFLGS,255-ZLCISYS  INDICATE ZIL CODˇ
AIN    00015002         MEND
       00016002         TITLE 'ZILEDIT - BUILT-IN ZIL 1.3 SUBROUTINE'
       00017002*********************************************************
*ˇ
       * 00030002* THIS FUNCTION INVOKES THE ISPF EDITOR ON A SPECIFIED
       * 00040002*
       * 0005000ˇ
OF THE   * 00060002* DATA SET TO BE EDITED.
         * 00070002*
         * 00080002* RESULT IS ˇ
ERVICE.    * 00090002*
           * 00100002*   0 - RETURN T (DATASET WAS SAVED)
           * 00110002*   4 - RETURN NIL (DATASˇ
             * 00120002*   OTHER - SIGNAL ERROR
             * 00130002*
             * 00140002**************************************ˇ
**************** 00150002*
               * 00160002* NOTE THAT THE MAXIMUM LENGTH OF A DSNAME FOR
T IS 56.       * 00170002*
                 * 00180002*********************************************
****************** 00190002         SPACE 1
                   00200002ZILEDIT  #ZBEG MINARGS=1,MAXARGS=1,NAME='ZILE
           +
E        ˇ
                       00230002         SPACE 1
                       00240002         MVI   $DSNAME,C' '        CLEAR
O BLANKS               0ˇ
                         00260002         L     #2,0(,#11)          LOAD
 THE ATOM TO BE DUMPED   00270002         CLI   ##TYPE(#2),##STRING IF I
TRING, OK                00280002      ˇ
                           00290002         CLI   ##TYPE(#2),##SYMBOL IF
 SYMBOL - WELL, OK         00300002         BNE   ERROR1              AN
LSE - BAD DSNAME           00310002         L     #2,#ˇ
BOL, GET THE PRINT NAME      00320002OK       DS    0H
                             00330002         XR    #3,#3
SERT REGISTER                00340002         ICM   #3,7,1(#2)       ˇ
NGTH OF STRING                 00350002         BZ    ERROR1
O, BAD DSNAME                  00360002         CH    #3,=H'56'
ATER THAN MAXIMUM LENGTH       00370002         BH    ERROR1
AD Dˇ
 REDUCE FOR EXECUTE              00390002         EX    #3,MOVEDSN
 DATA SET NAME TO AREA           00400002         EX    #3,TRDSN
SLATE TO UPPER CASEˇ
                                   00420002* GET ISPLINK
                                   00430002*
                                  ˇ
ERRET=ERROR2                         00450002         ST    #0,@ISPLINK
                                     00460002*
                                     00470002* SAˇ
OR OTHER INTERRUPT                     00480002*
                                       00490002         ST    #9,ZLCISV0
                                       00500002*                ˇ
                                         00510002* ISPEXEC CONTROL ERROR
                                         00520002*
                                         00530002         LA    #1,ISPCR

      CALL ISPLINK                         00550002         LTR   #15,#1
      IF IT FAILED (ISPF SERVICES N/A)     00560002         BZ    CERROK
      THEN... ˇ
ISPLINK'                                     00580002         B     ERRO
         BLOW UP                             00590002CERROK   DS    0H
                                              00600002ˇÁ
                                                             00610002* I
ONTROL DISPLAY REFRESH                                       00620002*
                                                             00630002 ˇ
LA    #1,ISPCREF          POINT TO PARAMETER LIST FOR ISPLINK  00640002
$SPFC ,                   CALL ISPLINK                         00650002*
                                                               00660002*
 EDITˇ
                                                                 0068000
  LA    #1,ISPEDIT          POINT TO PARAMETER LIST FOR ISPLINK  0069000
  $SPFC ,           ˇ
    LTR   #15,#15             IF RC=0 (DATA SET SAVED)             00710
    BZ    RETT                THEN PREPARE TO RETURN T             00720
    CH    #15,=H'4'           IF RCˇ
      BE    RETNIL              THEN PREPARE TO RETURN NIL           007
                                                                     007
LSE EDIT FAILED - REPORT TO USER                  ˇ
                                                                       0
                                                                       0
 ISPEXEC CONTROL ERRORS CANCEL                                   ˇ
2*
2         LA    #1,ISPCCAN          POINT TO PARAMETER LIST FOR ISPLINK
2         $SPFC ,                   CALL ISPLINK
ˇ
002* ISPEXEC DISPLAY PANEL(ISPTERM)
002*
002         LA ˇ
60002         $SPFC ,                   CALL ISPLINK
70002*
80002* ISPEXEC CONTROL DISPLAYˇ
0890002*
0900002         LA    #1,ISPCLIN          POINT TO PARAMETER LIST FOR IS
0910002         $SPFC ,                   CALˇ
 00920002         SPACE 1
 00930002         DELETE EPLOC==CL8'ISPLINK'
 00940002         SPACE 1                                   ˇ
   00950002         B     ERROR3              GO BLOW UP
   00960002*
   00970002* EVERYTHING OK - RETURN A DECENT RETURN VALUE
     00980002*
       00990002RETT     DS    0H
       01000002         LR    #4,#8               RETURN T
       01010002         B     CLEANUP
       0ˇ
         01030002         LR    #4,#10              RETURN NIL
         01040002         B     CLEANUP
         01050002*     ˇ
           01060002* CLEAN UP ISPF PROCESSING
           01070002*
           01080002CLEANUP  DS    0H  ˇ
             01090002*
             01100002* ISPEXEC CONTROL DISPLAY LINE START(1)
             01110002*                               ˇ
               01120002         LA    #1,ISPCLIN          POINT TO PARAM
T FOR ISPLINK  01130002         $SPFC ,                   CALL ISPLINK
               01140002*                                            ˇ
                 01150002* RELEASE ISPLINK
                 01160002*
                 01170002         DELETE EPLOC==CL8'ISPLINK'
   ˇ
                   01190002*
                   01200002* RESTORE REGISTERS AND COMMON AREA POINTER
                  ˇ
                     01220002RETURN   DS    0H
                     01230002         LR    #15,#4              LOAD RET
E                    01240002    ˇ
ERS AND RETURN         01250002         SPACE 3
                       01260002MOVEDSN  MVC   $DSNAME(*-*),##VECDAT(#2)
ING TO DSNAME AREA     01270002TRDSN    TR    $Dˇ
 UPPER CASE              01280002         SPACE 3
                         01290002ERROR1   #ERR  'Argument to ZILEDIT not
 dataset name - ',0(#11) 01300002ERROR2   #ERR  'ZIL0025 ZILEDIˇ
services not available, caX01310002               nnot edit dataset - ',
REFIX=NO                   01320002ERROR3   #ERR  'ZIL0026 ZILEDIT: Erro
ed by ISPF EDIT, could notX01330002                edit dataset - ',0(#1
FIX=NO                       01340002         SPACE 3
                             01350002ISPCRET  DS    0A
                             01360002         DC    A($CONTROL)
                              01370002ˇÁ
                                             01380002         DC    A($R
80000000')                                   01390002         SPACE 1
                                             01400002Iˇ
                                               01410002         DC    A(
)                                              01420002         DC    A(
                                               01430002         DC   ˇ
L+X'80000000')                                   01440002         SPACE
                                                 01450002ISPCREF  DS
                                                 01460002         DC
OL) ˇ
PLAY)                                              01480002         DC
RESH+X'80000000')                                  01490002         SPAC
                   ˇ
                                                     01510002         DC
ONTROL)                                              01520002         DC
ISPLAY)                           ˇ
$LINE)                                                 01540002
$START+X'80000000')                                    01550002
                                                 ˇ
0A                                                       01570002
A($EDIT)                                                 01580002
A($DSNAME+X'80000000')                                   0159000ˇ
E 1                                                        01600002ISPTE
  0A                                                       01610002
  A($DISPLAY)                                              01620002

ACE 1                                                        01640002@IS
    A                   ADDRESS OF ISPLINK (NOT IN SUBRS!)   01650002
ACE 1         ˇ
DC    CL8'CONTROL'                                             01670002$
DC    CL8'ERRORS'                                              01680002$
DC    CL8'RETURN'            ˇ
  DC    CL8'CANCEL'                                              0170000
Y DC    CL8'DISPLAY'                                             0171000
M DC    CL8'ISPTERM'                        ˇ
ESH DC    CL8'REFRESH'                                             01730
    DC    CL8'LINE'                                                01740
T   DC    F'1'                                             +
IT    DC    CL8'EDIT'                                    ˇ
DSNAME  DC    CL56' '                                                  0
        SPACE 1                                                        0
PTBL    DC    256YL1(*-UPTBL)     TABLE TO TRANSLATE TO UPPER CASE     0
2         ORG   UPTBL+X'00'
2         DC    C' '                (ALSO NULLS TO BLANKS)
2         ORG   UPTBL+C'A'-X'40'
2      ˇ
002         ORG   UPTBL+C'J'-X'40'
002         DC    C'JKLMNOPQR'
002         ORG   UPTBˇ
60002         DC    C'STUVWXYZ'
70002         ORG
80002         SPACE 1                K
1890002         LTORG
1900002         END
1910002{
UBROUTINE'                 00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00018002* THIS IS THE "=" FUNCTION.
                             * 00019002*                          ˇ
                               * 00020002* "EQUALP" CALLS THIS FUNCTION
RE ATOMS.                      * 00030002*
                               * 00040002*******************************
*ˇ
                                 * 00060002* CONVERSION RULES ARE AS FOL
                                 * 00070002*
                ˇ
ORM INTEGER COMPARISON.            * 00090002* 2. BOTH ARGS FLOAT
ORM REAL COMPARISON.               * 00100002* 3. ONE FIXED, ONE FLOAT
ERT THE FIXED ARGUMENT TO      ˇ
OAT AND PERFORM REAL COMPARISON.     * 00120002* 7. BOTH ARGS ALPHA
RFORM CHARACTER COMPARISON.          * 00130002* 8. ONE ALPHA, ONE NUMER
GNALS AN ERROR.                      * 0014000ˇ
                                       * 00150002* ANY OTHER TYPES SIGNA
OR.                                    * 00160002*
                                       * 00170002************ˇ
****************************************** 00180002*
                                         * 00190002* THIS MODULE IS NOT
E AND USES NO STACK SPACE.               * 00200002*
                                           * 00210002*******************
******************************************** 00220002*
                                           * 00230002* SUPPORT FOR STRIN
MBOL COMPARˇ
                                             * 00250002*
                                             * 00260002*  SYMBOL TO SYMB
                          ˇ
                                               * 00280002*  SYMBOL TO ST
                                               * 00290002*  STRING TO SY
                                         +
                                       ˇ
D FOR FULL COMMON LISP.                            * 00320002*
                                                   * 00330002***********
**************************************************** 0ˇ
                                                       00350002ZILEQUAL
NARGS=2,MAXARGS=2,NAME='ZILEQUAL'                      00360002
                                                       00370002      ˇ
#3,#15                                                   00380002
#15                                                      00390002
ZILEQUAL,#3                                              00400002
    ˇ
  #1,#2,0(#1)         LOAD ARGUMENTS                       00420002
  #1,#2               IF ARGS ARE "EQ"                     00430002
  TRUE             ˇ
                                                             00450002* C
E OF ARG 1                                                   00460002*
                                  ˇ
CLI   ##TYPE(#1),##FIXNUM                                      00480002
BE    ARG1FIX                                                  00490002
CLI   ##TYPE(#1),##SFLOAT                        ˇ
  BE    ARG1SFLO                                                 0051000
  CLI   ##TYPE(#1),##BIGNUM                                      0052000
  BE    ARG1BIG                                                 ˇ
    CLI   ##TYPE(#1),##DFLOAT                                      00540
    BE    ARG1DFLO                                                 00550
                                                                   00560

                                                                     005
      CLI   ##TYPE(#1),##STRING                                      005
      BE    ARˇ
        CLI   ##TYPE(#1),##SYMBOL                                      0
        BE    ARG1ALF                                                  0
                             ˇ
2*--- END OF CODE TO BE DELETED FOR FULL COMMON LISP
2*
2         B     ERROR               ALL OTHEˇ
002         SPACE
002ARG1FIX  DS    0H                  ARG 1 IS FIXED
002         SPACE                                          
90002ˇÁ
           00700002*
           00710002* CHECK TYPE OF ARG 2
           00720002*ˇ
             00730002         CLI   ##TYPE(#2),##FIXNUM
             00740002         BE    COMFIX              FIXED - FIXED =
             00750002         CLI  ˇ
               00760002         BE    FIXPSFLO            FIXED - SFLOAT
               00770002         CLI   ##TYPE(#2),##DFLOAT
               00780002         BE    FIXPDFLO    ˇ
                 00790002         CLI   ##TYPE(#2),##BIGNUM
                 00800002         BE    FALSE               FIXED - BIGN
SE               00810002         CR    #2,#10              Speciˇ
acsyma:            00820002         BE    FALSE               FIXED - NI
E                  00830002         B     ERROR               ALL OTHERS
S ERROR            00840002         SPACE
ˇ
UMS                  00860002         C     #0,##CDR(,#2)       TEST FOR
Y                    00870002         BE    TRUE
               ˇ
                       00890002         SPACE
                       00900002FIXPSFLO DS    0H                  FIXED
ALREADY IN #0          0091000ˇ
ADDRESS                  00920002         #BAS  #14,FIX2FLO         CONV
D TO FLOAT               00930002         LR    #14,#7              REST
RN ADDRESS               00940002         LREˇ
VALUE 1                    00950002         B     COMSFLO1            CO
XED TO SINGLE FLOAT        00960002         SPACE
                           00970002FIXPDFLO DS    0H        ˇ
LUE 1 ALREADY IN #0          00980002         LR    #7,#14
URN ADDRESS                  00990002         #BAS  #14,FIX2FLO
FIXED TO FLOAT               01000002         LR    #14,#7
E RETURN ADDRESS               01010002         LDR   #F2,#F0
OAT VALUE 1                    01020002         B     COMDFLO1
E FIXED TO DOUBLE FLOAT        01030002         SPACE
          ˇ
1 IS SINGLE FLOAT                01050002         SPACE
                                 01060002*
                         +
                       ˇ
                                     01090002         CLI   ##TYPE(#2),#
                                     01100002         BE    SCOMSFL1
SFLOAT - SFLOAT = OK                 0ˇ
T                                      01120002         BE    SCOMDFL1
  SFLOAT - DFLOAT = OK                 01130002         CLI   ##TYPE(#2)
M                                      01140002      ˇ
    SFLOAT - FIXED = OK                  01150002         CLI   ##TYPE(#
NUM                                      01160002         BE    WARNBF
    SFLOAT - BIGNUM = ???                01170002         CR    #2,#ˇ
      Special case for Macsyma:            01180002         BE    FALSE
      SFLOAT - NIL = FALSE                 01190002         B     ERROR
      ALL OTHERS - ALWAYS ERROR            01200002SFLOPFIX LE    #F2,##
   ˇ
)       GET FIXED VALUE 2                    01220002         LR    #7,#
        SAVE RETURN ADDRESS                  01230002         #BAS  #14,
        CONVERT FIˇ
          RESTORE RETURN ADDRESS               01250002         LRER  #F
          GET FLOAT VALUE 2                    01260002         B     CO
          FLOAT - FIXED = FLOAT  ˇ
                                                 01280002ARG1DFLO DS
            ARG 1 IS DOUBLE FLOAT                01290002         SPACE
                                                ˇ
,#1)          GET FLOAT VALUE 1                    01310002*
                                                   01320002* CHECK TYPE
                                                   01330002*   ˇ
                                                     01340002         CL
PE(#2),##DFLOAT                                      01350002         BE
FLO1            DFLOAT - DFLOAT = OK                 01360002         CL
TYPE(#2),##SFLOAT                                      01370002
OMSFL1            DFLOAT - SFLOAT = OK                 01380002
TYPE(#2),##FIXNUM                                      01390002
LOPFIX       ˇ
##TYPE(#2),##BIGNUM                                      01410002
WARNBF              DFLOAT - BIGNUM = ???                01420002
#2,#10              Special ˇ
  FALSE               DFLOAT - NIL = FALSE                 01440002
  ERROR               ALL OTHERS - ALWAYS ERROR            01450002DFLOP
  #0,##CDR(,#2)       GET FIXED VALUE 2                     01460002ˇÁ

002         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
002         LR    #14,#7              RESTORE RETURN ADDRESS
002 ˇ
00002         B     COMDFLO2            GO COMPARE FLONUMS IN REGISTERS
10002         SPACE
20002SCOMDFL1 DS   ˇ
1530002         SDR   #F2,#F2
1540002         LE    #F2,##CDR(,#1)
1550002         B     COMDFLO1    ˇ
 01560002DCOMSFL1 DS    0H                  LOAD DOUBLE FROM SINGLE FLOA
 01570002         SDR   #F4,#F4
 01580002         LE    #F4,##CDR(,#2)           ˇ
   01590002         B     COMDFLO2
   01600002COMDFLO1 DS    0H                  LOAD DOUBLE FROM DOUBLE FL
2  01610002         LD    #F4,8(,#2)                            ˇ
     01620002COMDFLO2 DS    0H
     01630002         CDR   #F2,#F4             TEST FOR EQUALITY
     01640002         BE    TRUE

       01660002         SPACE
       01670002SCOMSFL1 DS    0H                  LOAD SINGLE FROM SINGL
ARG 1  0168000ˇ
         01690002COMSFLO1 DS    0H                  LOAD SINGLE FROM SIN
T ARG 2  01700002         LE    #F4,##CDR(,#2)
         01710002COMSFLO2 DS ˇ
           01720002         CER   #F2,#F4             TEST FOR EQUALITY
           01730002         BE    TRUE
           01740002         B     FALSE     ˇ
             01750002         EJECT
             01760002ARG1BIG  DS    0H
             01770002         SPACE                        ˇ
               01780002         CLI   ##TYPE(#2),##BIGNUM BOTH MUST BE B
               01790002         BE    COMPSS              IF SO, COMPARE
               01800002         CLI   ##TYPE(#2),##FIXNUM BIGNUM - FIXNU
LSE              01810002         BE    FALSE
                 01820002         TM    ##TYPE(#2),##FLONUM BIGNUM - ?FL
?                01830002         BO    WARNBF
         +
acsyma:ˇ
ALSE                 01860002         B     ERROR               ALL OTHE
AYS ERROR            01870002         EJECT
                     0ˇ
                       01890002* DELETE THIS CODE FOR FULL COMMON LISP
                       01900002*
                       01910002ARG1STˇ
ING                      01920002*
                         01930002* CHECK TYPE OF ARG 2
                         01940002*                  ˇ
                           01950002         CLI   ##TYPE(#2),##STRING
                           01960002         BE    COMPSS              ST
TRING = OK                 01970002         CLI   ##TYPE(#2),##SYMBˇ
                             01980002         BE    COMPSA
 SYMBOL = OK                 01990002         B     ERROR
RS - ALWAYS ERROR            02000002         SPACE
  ˇ
IS SYMBOL                      02020002*
                               02030002* CHECK TYPE OF ARG 2
                 ˇ
                                 02050002         CLI   ##TYPE(#2),##SYM
                                 02060002         BE    COMPAA
OL - SYMBOL = OK                ˇ
                                   02080002         BE    COMPAS
MBOL - STRING = OK                 02090002         CR    #1,#10
ecial case for Macsyma:            02100002    ˇ
NIL - NUMBER = FALSE                 02110002         B     ERROR
ALL OTHERS - ALWAYS ERROR            02120002         SPACE
                                     02130002COMPAS   DS    0Hˇ
  SYMBOL-TO-STRING COMPARE             02140002         L     #1,##PNAME
  GET PRINT NAME OF SYMBOL 1           02150002         B     COMPSS
  COMPARE STRINGS                      02160002         SPACE
                                         02170002COMPSA   DS    0H
    STRING-TO-SYMBOL COMPARE             02180002         L     #2,##PNA
    GET PRINT NAME OF SYMBOL 2           02190002         B     COMPSS
    COMPARE ˇ
                                           02210002COMPAA   DS    0H
      SYMBOL-TO-SYMBOL COMPARE             02220002         L     #1,##P
)     GET PRINT NAME OF SYM BOL 1           02230002ˇÁ
  #2,##PNAME(,#2)     GET PRINT NAME OF SYMBOL 2           02240002*
                                                           02250002*---
ODE TO BE DELETED FOR FULL COMMON LISP                     02260002*ˇ
                                                             02270002***
    COMPSS              COMPARE STRINGS                      02280002
ACE                                                          02290002COM
   ˇ
SPACE 1                                                        02310002
L     #5,0(,#1)           GET STRING HEADER 1                  02320002
CL    #5,0(,#2)   ˇ
  BNE   FALSE                TO DO COMPARE, ELSE NOT EQUAL       0234000
  N     #5,=X'00FFFFFF'     ISOLATE STRING LENGTH 1              0235000
  LA    #4,##VECDAT(,#1)    POINTˇ
    LA    #6,##VECDAT(,#2)    POINT TO STRING TEXT 2               02370
    LR    #7,#5               GET STRING LENGTH 2                  02380
    CLCL  #4,#6               DO COMPARE        ˇ
      BNE   FALSE               NOT EQUAL: RETURN NIL                024
***** B     TRUE                EQUAL: RETURN T                      024
      EJECT                                                    ˇ
RUE     DS    0H                                                       0
        LR    #15,#8              TRUE... RESULT IS T                  0
        BR    #14                                                      0
2         SPACE
2FALSE    DS    0H
2         LR    #15,#10             FALSE... RESULT IS NIL
2         BR ˇ
002         SPACE
002WARNBF   DS    0H                  Bignums and floats can't be compar
002         SPACE           ˇ
20002         #ERR  2,'ZIL4101 ZILEQUAL: Float-to-bignum compare not sup
30002               ed.',PREFIX=NO,SIGNAL=NO
40002         B     FALSE               So ˇ
2550002         EJECT
2560002         COPY  FIX2FLO             FIXED TO FLOAT CONVERSION ROUT
2570002         SPACE                                     ˇ
 02580002ERROR    LR    #5,#1
 02590002         LR    #6,#2
 02600002         #ERR  'Type conflict, ZILEQUAL cannot compare ',
  X02610002               0(#5),' and ',0(#6)                          ∂
     02620002         LTORG
     02630002         END
     02640002{
PROCESSOR'                       00010000*******************************
******************************** 00011002*
                               * 00012002*ˇ
s Stark Draper Laboratory Inc.   * 00013002*                     All rig
rved.                            * 00014002*
                                 * 00015002**************ˇ
************************************ 00016002*
                                   * 00017002* THIS ROUTINE IS INVOKED F
MBLER LANGUAGE SUBROUTINES THAT    * 00018002* DETECT AN ERROR.  IT DISP
N ERROR MESSAGE AND THEN ISSUES A    * 00019002* THROW TO THE TAG NIL, W
CAUGHT BY THE INTERPRETER; IF NO NIL * 00020002* TAG EXISTS THEN THROW W
D THE PROGRAM WITH A USER CODE       * 00030002* SPECIFIED BY THE MESSAG
, IF THˇ
NUMERICS.                              * 00050002*
                                       * 00060002* ON ENTRY TO THIS SUBR
REGISTER 1 CONTAINS THˇ
; REGISTER 0 CONTAINS ITS LENGTH.        * 00080002*
                                         * 00090002* THIS ROUTINE USES N
SPACE.  FURTHERMORE, SINCE IT WILL NEˇ
 REGISTER 14 NEED NOT BE SAVED.            * 00110002*
                                           * 00120002*******************
******************************************** 0013000ˇ
                                               00140002*****************
********************************************** 00150002*
                                             * 00160002* 11/18/86 -ˇ
RFACE HAS BEEN ADDED TO THIS MODULE.           * 00170002*
                                               * 00180002* IF REGISTER 1
, THEN REGISTER 0 IS A POINTER TO A            * 00190002* PARAMETER LIS
 Pˇ
ED IN SUCCESSION TO THE STANDARD OUTPUT FILE,    * 00210002* WHICH WILL
TE THE ERROR MESSAGE.                            * 00220002*
                 ˇ
IC:                                                * 00240002*
                                                   * 00250002* REGISTER
◊-----------◊                   ˇ
  ◊SIGNAL BIT ◊   X'80' MEANS SIGNAL AN ERROR        * 00270002*
1 ◊           ◊                                      * 00280002*
  ◊ SEV CODE  ◊   0,1,2,3,4                    +
 +2 ◊-----------◊                            ˇ
      ◊-> OBJECT3 ◊  FOR EACH OBJECT, IF ITS ADDRESS IS  * 00310002*
   +4 ◊-----------◊  ON AN ODD BOUNDARY (NON-HALFWORD-   * 00320002*
      ◊-> OBJECT2 ◊  ALIGNED), IT IS PRINTED WITHOUT     * 0ˇ
     +6 ◊-----------◊  SLASHIFICATION; OTHERWISE IT IS     * 00340002*
        ◊-> OBJECT3 ◊  SLASHIFICATION.                     * 00350002*
     ...◊-----------◊                                      * 00360002*
          ◊    ...    ◊                                      * 00370002*
          ◊-----------◊                                      * 00380002*
          ◊  X'0FFF'  ◊                                      * 00390002*
          ˇ
                                                               * 0041000
**************************************************************** 0042000
  SPACE 1                ˇ
R   #ZBEG NAME='ZILERR'                                            00440
    SPACE 1                                                        00450
    LTR   #1,#1               IF REGISTEˇ
      BZ    MULTERR             THEN GO TO PROCESS NEW INTERFACE     004
      SPACE 1                                                        004
      LR    #12,#15                                    ˇ
        USING ZILERR,#12                                               0
        DROP  #15                                                      0
        SPACE 1                                                       ˇ
2         LR    #3,#1               SAVE MESSAGE ADDRESS
2         LR    #4,#0               SAVE MESSAGE LENGTH
2         SPACE 1
2    ˇ
002         SPACE 1
002         SPACE 1
002         L     #1ˇ
90002         ICM   #15,15,X'3C'(#15)   TSB ADDRESS
00002         BZ    NOTTSO              IF NO TSB, NOT UNDER TSO
10002* ON TSO, SEND MESSAGE TO TERMˇ
0620002* THE SEVERITY LEVEL IS 2 (ERROR).
0630002         #TPUT 2,(1),(0)            USE TPUT TO DISPLAY THE MESSA
0640002         B     AFTTSO                      ˇ
 00650002         SPACE 1
 00660002NOTTSO   DS    0H                  ELSE...
 00670002         SPACE 1                                        
   00680002ˇÁ
                 00690002         SPACE 1
                 00700002         MVI   WTPTEXT,C' '        CLEAR MESSAG
O BLANKS         00710002 ˇ
                   00720002         LR    #15,#0              GET LENGTH
AGE                00730002         CH    #15,WTPLEN          IF LONGER
 WTP LENGTH        00740002         BNH  ˇ
                     00750002         LA    #15,WTPLEN            USE MA
NGTH                 00760002         BCTR  #15,0               REDUCE T
TH FOR EXECUTE       00770002         EX    #15,WTPMOVE ˇ
EXT                    00780002         WTO   MF=(E,WTPMSG),ROUTCDE=11 W
PROGRAMMER MESSAGE     00790002         SPACE 1
                       00800002AFTTSO   DS    0H                  WHICHˇ
Y IT WAS DISPLAYED...    00810002         SPACE 1
                         00820002*
                         00830002* TRY TO EXTRACT MESSAGE ID FROM MESSAG
ZILNNNˇ
 IT AS AN ABEND CODE.      00850002*
                           00860002         XR    #1,#1               IN
 THROW NUMBER TO ZEROˇ
H IS AT LEAST 7              00880002         BL    THROW
                             00890002         CLC   0(3,#3),=C'ZIL'
 BEGINS WITH ZIL....         0090000ˇ
                               00910002         LA    #2,3(,#3)
 TO NEXT 4 POSITIONS           00920002         LA    #0,4
                               00930002TNUMLOOP DS ˇ
 FOR 4 NUMERICS                  00940002         CLI   0(#2),X'F0'
                                 00950002         BL    THROW
                                 00960002         CLI   0(#2),X'F9ˇ
                                   00970002         BH    THROW
                                   00980002         LA    #2,1(,#2)
                                   00990002         BCT   #0,TNUMLOOP
 ˇ
CONVERT MESSAGE NUMBER TO DECIMAL    01010002         CVB   #1,ZLCDBL
AND THEN TO BINARY                   01020002THROW    DS    0H
NOW WE HAVE NUMBˇ
  STORE INTO USER ABEND CODE NUMBER    01040002         OI    ZLCERFLG,Z
  INDICATE USER ABEND CODE SET         01050002         SPACE 1
                               +
    SET THROW TAG TO NIL     ˇ
      SET THROW RESULT TO NIL              01080002         L     #15,ZL
      GET ADDRESS OF THROW PROCESSOR       01090002         BR    #15
      INVOKE THROW TO TAG NIL              0ˇ
                                             01110002WTPMOVE  MVC   WTPT
,0(#1)  EXECUTED = MOVE ERROR TO MSG TEXT    01120002WTPMSG   WTO   '
                                            X01130002      ˇ
                                              X01140002
         ',ROUTCDE=11,MF=L                     01150002WTPEND   EQU   *
                                               01160002WTPTEXT  EQU   WT
                                                 01170002WTPLEN   EQU
TPTEXT                                           01180002         SPACE
                                                 01190002MULTERR  DS
         ˇ
              #0 -> PARAMETER LIST                 01210002         LR
                                                   01220002         USIN
,#1                     ˇ
                                                     01240002         ST
14,MSAVE        SAVE ALL REGISTERS ON ENTRY          01250002         LR
#1              SET UP OUR BASE REGISTEˇ
LERR,#12                                               01270002
                                                       01280002
,#0               POINT TO BEGINNING OF PARAMETER LISTˇ
#6,#6                                                    01300002
#6,1(,#3)           #4 = SEVERITY LEVEL                  01310002
#6,MSEV             SAVE SEVERITY LEVEL                  01320002    ˇ
E 1                                                        01330002
  #5,2(,#3)           POINT TO BEGINNING OF PARAMETER LIST 01340002
  #7,ZLCSTDOU         GET STANDARD OUTPUT FILE POINTER     01350002
G ZLˇ
    ZLFFLAG1,ZLFNEWLN   IF OUTPUT DATA WAITING ON THIS LINE  01370002
    SKIPTERP            THEN...                              01380002
    #3,SAVEPARM    ˇ
L     #15,ZLCTERP          GET ADDRESS OF ZILTERP              01400002
#BASR #14,#15              CALL ZILTERP TO GET A NEW LINE      01410002
L     #3,SAVEPARM          RESTOREˇ
P DS    0H                                                       0143000
  CLC   MSEV(1),ZLCMSLVL    IF SEVERITY CODE LESS THAN MSGLEVEL  0144000
  BL    MSKIP               THEN SKIP PRINTING TH IS ITEM         01450

 01460002         BE    NOHEADER            THEN DON'T PREFIX MESSAGE HE
 01470002         TM    0(#3),X'40'         IF SUPPRESS-PREFIX BIT IS ON
 01480002 ˇ
   01490002         SLA   #6,2                CONVERT SEVERITY CODE TO I
   01500002         L     #4,MSTRINGS(#6)     LOAD APPROPRIATE MESSAGE H
   01510002         NI   ˇ
ONE  01520002         L     #15,ZLCPRIN         GET ADDRESS OF ZILPRIN
     01530002         #BASR #14,#15             CALL ZILPRIN TO PRINT ME
ADER 01540002NOHEADER DS    0H          ˇ
       01550002MLOOP    DS    0H                  PROCESS EACH PARAMETER
       01560002         CLI   0(#5),X'0F'         IF THIS IS THE END OF
       01570002         BE    MLOOPEND            THEN ˇ
         01580002         SPACE 1
         01590002         CLC   MSEV(1),ZLCMSLVL    IF SEVERITY CODE LES
SGLEVEL  01600002         BL    MSKIP               THEN SKIP PRINTINGˇ
EM         01610002         SPACE 1
           01620002         XR    #2,#2               START GENERATING A
F THE      01630002         XR    #3,#3                DATA TO BE PRINTE
     ˇ
'BDDD0000'   01650002         SLDL  #2,4                #2 = X'0000000B'
'DDD00000'   01660002         SRL   #3,20               #2 = X'0000000B'
'00000DDD'   0167000ˇ
               01680002         LTR   #2,#2               IF BASE REGIST
RO             01690002         BNE   NOTZERO             THEN...
               01700002         SLAˇ
T (REG) TO INDEX 01710002         L     #4,MSAVE(#3)         LOAD CONTEN
AT REGISTER      01720002         ST    #4,MFIXNUM+4         SAVE INTO P
NUM              01730002         LA    #4,MFIXNUMˇ
XNUM               01740002         B     AFTSETSL             AND PRINT
FIC'N IRRELEVANT)  01750002NOTZERO  DS    0H                  ELSE...
                   01760002         SLA   #2,2                 COˇ
X INTO MSAVE         01770002         L     #4,MSAVE(#2)         LOAD CO
F THAT BASE REGISTER 01780002         ALR   #4,#3                ADD DIS
T                    01790002         CLI   MBASE,11             IF BASE
ˇ
INDIRECT STACK POINTER 01810002         L     #4,0(,#4)            SO GE
T POINTS TO            01820002NOT11    DS    0H
               +
S OF DATA    ˇ
 IS ON ODD BOUNDARY        01850002         BZ    DOSETSL              T
                           01860002         NI    ZLCPFLGS,255-ZLCPSLSH
NO SLASHIFICATION BE DONE  0ˇ
                             01880002DOSETSL  OI    ZLCPFLGS,ZLCPSLSH
 SLASHIFICATION BE DONE      01890002AFTSETSL DS    0H
S TO DATA TO BE PRINTED      01900002      ˇ
DRESS OF ZILPRIN               01910002         #BASR #14,#15
ILPRIN TO PRINT THE THING      01920002MSKIP    DS    0H
                               01930002         LA    #5,2ˇ
 BUMP TO NEXT PARAMETER          01940002         B     MLOOP
CONTINUE                         01950002MLOOPEND DS    0H
                                 01960002         TM    ZLFFLAG1,ZLFNEWL
 OUTPUT DATA WAITING ON THIS LINE  01970002         BZ    SKIPTER2
EN...                              01980002         L     #15,ZLCTERP
T ADDRESS OF ZILTERP               01990002         #BASR #14,#15
LL ZILTEˇ
                                     02010002         SPACE 1
                                     02020002         L     #1,MSAVE0
GET POINTER TO ORIGINALˇ
  IF WE ARE TO SIGNAL AN ERROR         02040002         BNO   MDONE
  THEN...                              02050002         XR    #1,#1
   SET ABEND CODE TO 000              ˇ
     GO TO THROW TO SIGNAL ERROR         02070002MDONE    DS    0H
    ELSE...                              02080002         LA    #15,2(,#
    RETURN ADDRESS AFTER LAST PARAMETER  02090002    ˇ
      RESTORE ALL REGS THAT WERE SAVED     02100002         BR    #15
      RETURN TO CALLER                     02110002         SPACE 2
                                           02120002MSAVE    DS    14ˇ
        SAVE AREA FOR REGS 0-14              02130002         ORG   MSAV
                                             02140002MSAVE0   DS    A
                                             02150002         DS    A
   ˇ
                                               02170002MSAVE3   DS    A
                                               02180002MSAVE4   DS    A
                  ˇ
                                                 02200002MSAVE6   DS
                                                 02210002MSAVE7   DS
                                                  02220002ˇÁ
  DS    A                                                        0223000
  DS    A                                                        0224000
  DS    A                                                        0225000
11  DS    A                                                        02260
12  DS    A                                                        02270
13  DS    A                                                        02280
14  DS   ˇ
      ORG   ,                                                        023
XNUM  #IATM 0                   PHONY FIXNUM FOR PRINTING VALUES     023
DRESS DS    A           ˇ
AVEPARM DS    A                   PLACE TO SAVE REGISTER               0
SEV     DS    X                   SEVERITY CODE                        0
BASE    DS    X                   BASE ˇ
2         SPACE 1
2MSTRINGS DC    A(MSTRING0,MSTRING1,MSTRING2,MSTRING3,MSTRING4)
2         SPACE 1                                     ˇ
002MSTRING0 #SATM 'ZIL4000 '
002MSTRING1 #SATM 'ZIL4001 Warning: '
002MSTRING2 #SATM 'ZIL4002 Error: '                                  ˇ
10002MSTRING3 #SATM 'ZIL4003 '
20002MSTRING4 #SATM 'ZIL4004 '
30002         SPACE 1
4000ˇ 2         LTORG
2450002         SPACE 1
2460002         END
2470002
OUTINE'                  00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002* ZILEXPL TAKES 3 ARGUMENTS, OF WHI
THE 1ST IS REQUIRED.       * 00017002* THE FIRST IS THE ATOM TO BE EXPLO
CIFICATION OF A LIST IS    * 00018002*  ERRONEOUS AND WILL BE FLˇ
ROR).                        * 00019002* THE SECOND SPECIFIES WHETHER (N
OR NOT (NIL) TO INTERN THE   * 00020002*  GENERATED ATOMS ON THE OBJECT
TE DEFAULT IS NOT TO).       * 00030002* THE THIRD SPECIFIES WHETHER (NO

                               * 00050002*
                               * 00060002* THE SECOND ARG MAY BE T, NIL
NUM; IF IT IS ˇ
 (CHARACTERS) RATHER THAN        * 00080002* SYMBOLS.  THIS IS TO SUPPOR
EN.                              * 00090002*
                             ˇ
************************************ 00110002         SPACE
                                     00120002ZILEXPL  #ZBEG MINARGS=1,MA
NAME='ZILEXPL'                       0013000ˇ
  DEFINE STACK SIZE                    00140002         #ZSAV ,
  SAVE REGISTERS                       00150002         SPACE
                                       00160002*           ˇ
                                         00170002* CHECK INPUT ARGUMENT
E AN ATOM                                00180002*
                                         00190002         L     #2,0(,#1
      GET ATOM (ARG 1 TO ZILEXPL)          00200002         TM    ##TYPE
TOM   MUST BE AN ATOM                      00210002         BZ    ERROR1
      OR ELSE                              00220002         TM    ##TYPE
EC    MUSˇ
        OR ELSE                              00240002*
                                             00250002* CALL ZILADMP TO D
ENTIRE ATOM INTO OUR WORˇ
TOM.                                           00270002*
                                               00280002         OI    ZL
LCDCOPY   FORCE COPY OF TEXT DATA      +
DMP         GET ADDRESS OF ZILADMP   ˇ
#11)          SET SLASHIFY OPTION FROM ARG 3       00310002         #BAS
5             CALL ZILADMP TO DUMP ATOM            00320002*
                                                   0ˇ
R IN THE DUMPED TEXT, MAKE AN ATOM OUT OF IT.        00340002* WE GO BAC
O FACILITATE CONSING THEM TOGETHER TO MAKE A LIST.   00350002*
                                                     00360002      ˇ
5,#10             INITIALIZE RETURN VALUE TO NIL       00370002
,#0               SAVE LENGTH OF DUMPED ATOM           00380002
TURN              IF ZERO, RETURN NIL                  00390002
,#ˇ
#7,#1               POINT TO RETURNED ATOM AREA          00410002
#6,0                SET BXLE INCREMENT REG = -1          00420002
#7,0             ˇ
  #4,#7               POINT TO LAST CHAR OF DUMPED ATOM    00440002
E 1                                                        00450002
  #3,4(,#11)          GET ARG 2 ˇ
I   ##TYPE(#3),##FIXNUM IF ARG 2 IS A FIXNUM                 00470002
E   LOOPC               THEN THIS IS EXPLODEN, ELSE EXPLODEC 00480002
    #0,28(,#11)         PASS CURRENT STACK LOCAˇ
SPACE 1                                                        00500002L
DS    0H                  LOOP USING BXLE REGS #4, #6, #7      00510002
XR    #3,#3               CLEAR INSERT REGISTER FOR CHARACTERSˇ
  IC    #3,0(,#4)           GET CHARACTER FROM DUMPED ATOM       0053000
  LR    #2,#15              ARG 2 TO CONS = LIST SO FAR          0054000
  SLA   #3,3                PREPARE TO MAKE A FIXNUM OUT OF IT   0055000
    L     #15,ZLCCONS         GET ADDRESS OF ZILCONS               00560
    LA    #1,#SFT(#3)         ARG 1 TO CONS = CHARACTER FIXNUM     00570
    #BASR #14,#15             CALL CONS TO ADD NEW FIXNUM TO LIST  00580
    BXH   #4ˇ
      B     RETURN              THEN RETURN THE LIST                 006
                                                                     006
                           ˇ
                                                                       0
OOPC    DS    0H                  LOOP USING BXLE REGS #4, #6, #7      0
        LR    #5,#15              SAVE POIˇ
2         ST    #15,24(,#11)        PUT LIST PTR ON STACK IN CASE OF GC!
2         STM   #4,#7,SAVE47        SAVE VOLATILE REGS
2         LA    #0,1                SET LENGTH = 1       
002ˇÁ
MIZED    00690002         L     #2,4(,#11)          SET INTERN FLAG = AR
ILEXPL   00700002         LR    #3,#10              SET FORMAT FLAG = NI
         00710002 ˇ
           00720002         LA    #4,28(,#11)         SET CURRENT STACK
FOR CONS   00730002         #BASR #14,#15             CALL ZILABLD TO MA
OM FROM IT 00740002         LM   ˇ
             00750002         LR    #1,#15              ARG 1 TO CONS =
OM           00760002         LR    #2,#5               ARG 2 TO CONS =
FAR          00770002         L     #15,ZLCCONS ˇ
               00780002         LA    #0,28(,#11)         PASS CURRENT S
ATION TO CONS  00790002         #BASR #14,#15             CALL CONS TO A
TOM TO LIST    00800002         BXH   #4,#6,LOOPC         CONTIˇ
TART OF ATOM     00810002******** B     RETURN              THEN RETURN
                 00820002         SPACE
                 00830002RETURN   DS    0H
                   00840002         SPACE
                   00850002         #ZRET ,                   RESTORE RE
AND RETURN         00860002         SPACE 2
             ˇ
                     00880002         #ERR  'Argument to be exploded by
cannot be a list or X00890002               vector-type structure - ',(#
                     0090000ˇ
                       00910002SAVE47   DS    4A                  SAVE A
                       00920002         SPACE 1
                       00930002         LTOs RG
                         00940002         END
                         00950002
ND - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002*
                                                     * 00017002*  THIS F
IS CALLED BY ALL COMPILED ZIL PROGRAMS WHICH HAVE TO * 00018002*  PUT TH
LLY BOUND ˇ
                                                       * 00020002*  This
n, along with ZILSBND, replaces the old ZIL 1.2        * 00030002*  "ZIL
nction.                  ˇ
                                                         * 00050002*  RE
 IS THE ATOM WHICH IS TO BE BOUND.                       * 00060002*  RE
 IS THE VALUE WHICH IS BOUND TO ATOM 1. ˇ
 1 ON RETURN IS THE CONS CELL WHICH HOLDS THE BINDING.     * 00080002*
                                                           * 00090002*
esponding LISP definition would look something like thiˇ
                                                             * 00110002*
zilfbnd (a b)                                                * 00120002*
(x (cons a b)))                                              * 0013000ˇ
  (push x (lexical-alist))  ; except that this doesn't exist!  * 0014000
  x))                                                          * 0015000
                                                               * 0016000
ROUTIˇ
ADDITION, IT NEEDS NO BASE REGISTER.                             * 00180
                                                                 * 00190
E: THE INTERFACE TO ˇ
     COMPILED CODE INVOKES IT AS FOLLOWS:                          * 002
                                                                   * 002
LA   0,CURRENT STACK LOCATION FOR Cˇ
  L    1,ADDRESS OF FREE VARIABLE SYMBOL                             * 0
  L    2,STACK LOCATION OF VALUE                                     * 0
  L    15,=A(ZILFBND)                             ˇ
2*  BALR 3,15                                                          *
2*  ST   1,STACK LOCATION OF VALUE                                     *
2*                                                               +
002************************************************************ˇ
00002         SPACE 1
10002ZILFBND  CSECT ,
20002         SPACE 1
0330002         USING ZLCOMMON,#13
0340002         SPACE 1
0350002         L     #15,ZLCCONS         CALL CONS TO CONS ARGS TOGETHE
0360002      ˇ
 00370002         LR    #1,#15              ARG1=RESULT OF CONS (ALSO RE
 00380002         L     #15,ZLCCONS         GET ADDRESS OF CONS ROUTINE
 00390002         L     #2,Zˇ
   00400002         #BASR #14,#15             CALL CONS TO CONS THEM TOG
   00410002         ST    #15,ZLCFALST        UPDATE ALIST WITH NEW BIND
   00420002         BR    #3               ˇ
 1   00430002         SPACE 1
     00440002         #ZEQU ,
     00450002         SPACE 1                             E
       00460002         #ZCOM ,
       00470002         END
       00480002{
ETO'                               00010002         TITLE 'ZILFGET - ZIL
E LOCATOR MODULE'                  00020000*****************************
********************************** 00020103*ˇ
                                   * 00020203* ZIL Version 1.3 (c) 1989
les Stark Draper Laboratory Inc.   * 00020303*                     All r
served.                            * 00020403*             ˇ
                                     * 00020503*************************
************************************** 00020603*
                                     * 00020703* THIS MODULE IS INVOKED
LR FROM ASSEMBLER-LANGUAGE FUNCTIONS   * 00020803* WHICH REQUIRE THE USE
S.  TWO ENTRY POINTS EXIST:            * 00020903*
                                       * 00021003*  ZILFGETI - LOCATES A
OCK ON THˇ
BLOCK ON THE CHAIN OF OUTPUT FILE BLOCKS.* 00023003*
                                         * 00024003* THIS MODULE USES NO
PACE,  SINCE IT'S NOT REˇ
                                           * 00026003* ON ENTRY REG 1 CO
HE PASSED (ATOMIC) ARGUMENT SPECIFYING THE * 00027003* FILE TO BE ACCESS
REG 7 IS SET ON RETURN TO POINT TO THE ˇ
                                             * 00029003*
                                             * 00030003*****************
********************************************** 0004000ˇ
                                                 00050003         #ZSYS
                                                 00060003         EJECT
                                                 00070003ZILFGET  CSEˇ
                                                   00080003         ENTR
TI                                                 00090003         ENTR
TO                                                 00100003         USIN
ON,#ˇ
                                                     00120003         L
LCIFBAD         USE INPUT FILE BLOCK CHAIN           00130003         L
LCSTDIN         SETˇ
,INPUT            SET TYPE = INPUT                     00150003
ART-ZILFGETI(,#15)                                     00160003ZILFGETO
                                  ˇ
#2,ZLCOFBAD         USE OUTPUT FILE BLOCK CHAIN          00180003
#7,ZLCSTDOU         SET STANDARD OUTPUT IN CASE OF NIL   00190003
#3,OUTPUT           SET TYPE = OUTPUT            +
  START-ZILFGETO(,#15)                         ˇ
ECT                                                          00220003ZIL
BEG NAME='ZILFGET'                                           00230003
ACE 1                                                        0ˇ
#BASR #15,0               SET BASE REGISTER                    00250003
USING *,#15                                                    00260003U
EQU   *                                                        00270003
  CR    #1,#10              IF FILE SPEC IS NIL                  0028000
  BER   #14                 THEN RETURN WITH STANDARD FILE       0029000
  CR    #1,#13              IF FILE SPEC IS UNSUPPLIED OPTIONAL  0030000
  BER   #14 ˇ
L   DS    0H                  ELSE NON-NIL FILE SPECIFIED          00320
    CLI   ##TYPE(#1),##SYMBOL IF NOT A SYMBOL                      00330
    BNE   INVALID          ˇ
      LTR   #7,#2               ELSE TRY FIRST FILE IN CHAIN         003
      USING ZLFILBLK,#7                                              003
LOOP  DS    0H                            ˇ
        BZ    ERROR1              IF NO MORE FILES IN CHAIN, ERROR     0
        C     #1,ZLFATOM          IF FILE NAMES MATCH                  0
        BE    FOUNDIT             THEN RETURN WITH FILE Bˇ
3         LR    #2,#7               SAVE ADDRESS OF PREVIOUS FILE BLOCK
3         ICM   #7,15,ZLFCHAIN      ELSE GET NEXT FILE BLOCK
3         BNZ   FILLOOP             AND CONTINUE
003         B     ERROR1              IF NO MORE, THEN FILE NOT FOUND
003         SPACE 1
003FOUNDIT  DS    0H                  FOUND FILE BLOCK (FOR NON-NIL ONLY
003    ˇ
70003         BO    GETTERM             IF SO, DON'T CHECK DCB
80003         TM    ZLFDCB+48,X'10'     IF FILE IS OPEN
90003         BOR   #1ˇ
0500003         B     UNUSABLE            ELSE FILE IS UNUSABLE.
0510003         SPACE
0520003GETTERM  DS    0H             ˇ
 00530003         L     #7,ZLFTFPTR         GET POINTER TO TRUE FILE BLO
 00540003         BR    #14                 AND RETURN WITH IT.
 00550003         SPACE 1                           ˇ
   00560003         DROP  #15
   00570003         SPACE 1
   00580003INVALID  DS    0H                  File arg is invalid  
     00590003ˇÁ
                   00600003         LR    #4,#15
                   00610003         USING USING15,#4
                   00620003 ˇ
nt                   00630003         STC   #3,TYPE             Set file
                     00640003         LR    #1,#12              Get poin
alling function      00650003         #BAS ˇ
lling function         00660003         #ERR  PREFIX=NO,          FILE N
LID                   X00670003               'ZIL0009 ',CALLER,': ',TYP
                      X00680003               ' file name ˇ
symbol - ',(#6)          00690003         SPACE 1
                         00700003UNUSABLE DS    0H                  FILE
ENT BUT NOT OPEN         00710003         SPACE 1
                           00720003         LR    #4,#15
                           00730003         USING USING15,#4
                           00740003         LR    #6,#1               Sa
argumentˇ
 type                        00760003         LR    #1,#12
ter to calling function      00770003         #BAS  #14,GETCALR
 of calling function   ˇ
AME INVALID                   X00790003               'ZIL0031 ',CALLER,
ESTR,                         X00800003               ' file ',(#6),
                              X0081000ˇ
osing it first.'                 00820003         SPACE 1
                                 00830003ERROR1   DS    0H
 NOT FOUND                       00840003         SPAˇ
                                   00850003         USING USING15,#15
                                   00860003         SPACE 1
                                   00870003* VALIDATE FILE NAME     ˇ
                                     00880003         ST    #1,FILEATOM
SAVE FILE ATOM                       00890003         L     #1,##PNAME(,
GET POINTER TO SYMBOL PRINT NAME     00900003         XR    #4,#4
CLEˇ
  GET LENGTH OF PRINT NAME             00920003         BZ    INVALID
  IF ZERO, ERROR - BAD FILE NAME       00930003         CH    #4,=H'4'
  MUST BE 1-4 IN Lˇ
    ELSE ERROR - BAD FILE NAME           00950003         MVC   FNAME,=C
    PRESET BLANKS                        00960003         BCTR  #4,0
    REDUCE LENGTH FOR EXECUTE    +
      MOVE FILE NAME TO FNAME  ˇ
        BRANCH AROUND EXECUTED INSTR         00990003         SPACE
                                             01000003MVCFNAME MVC   FNAM
#VECDAT(#1)   MOVE PRINT NAME TO FILE NAME   0ˇ
                                               01020003AROUNDEX DS    0H
                                               01030003         SPACE
                                               01040003******ˇ
************************************************ 01050003*
                                                 01060003* IF A FILE NAM
 FOUND, WE SEARCH THE TIOT TO SEE IF IT IS       01070003* CURRENTLY ALL
.  IF SO, WE BUILD A FILE BLOCK FOR IT AND         01080003* ATTEMPT TO
(FOR INPUT OR OUTPUT, DEPENDING ON THE REQUEST     01090003* TYPE).  IF
UCCESSFUL, WE RETURN WITH THE ADDRESS OF THE       01100003* NEWLY OPENE
LOCK.  IF Wˇ
                                                     01120003***********
**************************************************** 01130003         SP
                          ˇ
4,#12,ZLCSAVE2    SAVE REGISTERS                       01150003
,#12              Save caller's register 12            01160003
2,0                                      ˇ
*                                                        01180003
USING12,#12                                              01190003
#15                                                     ˇ
E 1                                                        01210003
  #3,TYPE             STORE TYPE (INPUT OR OUTPUT)         01220003
  #6,#2               Save file block pointer              01230003****ˇ
                        #1 = caller's #12                    01240003
AS  #14,GETCALR         Get calling function name            01250003
C   DDNAME(3),=C'ZIL'   SET UP DDNAME                        01260003
C   #3ˇ
MVC   DDNAME+4(4),FNAME   LAST 4 CHARS = FILE NAME             01280003
LA    #4,DDNAME+7         Loop searching for last nonblank     01290003
LA    #0,8           ˇ
  DS    0H                                                       0131000
  CLI   0(#4),C' '                                               0132000
  BNE   DDSEND                      ˇ
    BCTR  #4,0                                                     01340
    BCT   #0,DDSLOOP                                               01350
D   DS    0H                                                        013

g  01370003*
   01380003* NOW LOCATE A USER SPECIFIED FILE ALLOCATION, CREATE A FILE
   01390003*ˇ
     01400003* SEARCH THE TASK INPUT/OUTPUT TABLE (TIOT) FOR A FILE ALLO
F    01410003* THE DDNAME ZILI____ (FOR INPUT FILES) AND ZILO____ (FOR O
LES) 01420003*             ˇ
       01430003         XR    #4,#4               CLEAR INSERT REGISTER
       01440003         L     #3,540              TCB ADDRESS
       01450003         L     #3,12(,#3)  ˇ
         01460003         LA    #3,24(,#3)          POINT TO FIRST TIOT
         01470003TIOTLOOP DS    0H
         01480003         TM    1(#3),X'80'         IF THˇ
E          01490003         BO    TIOTNEXT            THEN SKIP IT
           01500003         CLC   4(8,#3),DDNAME      IF THIS IS OUR FIL
           01510003         BE    TIOTFILE            THEN PROCESS IT
             01520003TIOTNEXT IC    #4,0(,#3)           ELSE GET LENGTH
ENTRY        01530003         ALR   #3,#4               BUMP TO NEXT ENT
             01540003         CLI   0(#3),0             IF NOT END OF TI
       ˇ
THRU TIOT      01560003NOTFOUND DS    0H                  ELSE END OF TI
E NOT FOUND    01570003         XR    #3,#3               INDICATE NO TI
 FOR FILE      0158000ˇ
 NOT T           01590003         BNE   TIOTEND             THEN ERROR -
ES NOT EXIST     01600003*                                  ELSE FILE IS
UME TERMINAL     01610003         CLIˇ
D TO BE INPUT FILE 01620003         BNE   FNDTRMOU            THEN...
                   01630003         ICM   #7,15,ZLCIFTRM       GET @ OF
RMINAL FILE BLOCK  01640003         BNZ   TIOTEND   ˇ
, THEN USE IT        01650003         B     TIOTFILE             IF THER
ONE, BUILD ONE NOW   01660003FNDTRMOU DS    0H                  ELSE...
                     01670003         ICM   #7,15,ZLCOFTRM       GEˇ
UT TERMINAL FILE BLOCK 01680003         BNZ   TIOTEND              IF TH
NE, THEN USE IT        01690003*
                       01700003* Experimental addition 08/27/87.  If thi
e ˇ
 block, and this is a    01720003* batch environment (no wonder there's
nal file block!), then   01730003* let file T be identical to file NIL (
 output).        +
               ˇ
ress                         01760003         ICM   #15,15,X'3C'(#15)
ess                          01770003         BNZ   TIOTFILE
s, TSO env., use terminal    0ˇ
of standard output file block  01790003         B     TIOTEND
e that.                        01800003         SPACE 1
                               01810003TIOTFIˇ
OUND OUR FILE TO PROCESS         01820003         LH    #0,ZLCFBLEN
LENGTH OF A FILE BLOCK           01830003         #GETMAIN RC,LV=(0),LOC
ET STORAGE FOR A FILE BLOCK      01840003         LTR   #15,ˇ
 GETMAIN FAILED,                   01850003         BNZ   FBERROR
EN ERROR                           01860003         LR    #7,#1
INT TO FILE BLOCK                  01870003         LH    #1,ZLCFBLEN
GET LENGTH OF A FILE BLOCK           01880003         BCTR  #1,0
                                     01890003         EX    #1,CLRFB
CLEAR FILE BLOCK TO ZEROES           01900003         MVC   ZLFPDDN(8),D
SET UP DDNˇ
M SET UP FILE ATOM FOR ZIL TO USE      01920003         LTR   #3,#3
  IF FILE NOT IN TIOT (MEANS TERMINAL) 01930003         BZ    ISTERM
   OR                    ˇ
      IF TIOT ENTRY SAYS IT'S A TERMINAL 01950003         BZ    NOTTERM
       THEN                              01960003ISTERM   OI    ZLFFLAG,
        INDICATE SO IN FILE BLOCK       ˇ
                                           01980003* FOUND THE FILE - NO
IT ONTO THE FILE BLOCK                     01990003         LTR   #2,#6
      IF NO FILE BLOCK CHAIN EXISTED,      02000003    ˇ
        THEN...                              02010003NOCURFIL DS    0H
        START A NEW CHAIN                    02020003         CLI   TYPE
        IF TYPE IS INPUT                     02030003         BNE   CHˇ
          THEN...                              02040003         ST    #7
D          MAKE NEW INPUT FILE BLOCK CHAIN     02050003         L     #2
N          CHAIN THIS TO STANDARD INPUT        02060003         B     CH
     ˇ
BAD          MAKE NEW OUTPUT FILE BLOCK CHAIN    02080003         L
DOU          CHAIN THIS TO STANDARD OUTPUT       02090003CHAINIT  DS
                    ˇ
CHAIN-ZLFILBLK(,#2)  CHAIN THIS TO PREV FILE BLOCK 02110003CHAINED  DS
                                                   02120003         CLI
NPUT          IF TYPE IS INPUT                      02130003ˇÁ
    BNE   NOTINPUT            THEN...                              02140
    OI    ZLFFLAG,ZLFINPUT    FLAG AS AN INPUT FILE                02150
    XR    #1,#1               SET CHARACTER POSITION = -1          02160
      BCTR  #1,0                 (NEGATIVE SO FIRST READ(CH)         021
      ST    #1,ZLFCHAR            WILL FORCE READ OF FIRST RECORD)   021
      TM    ZLFFLAG,ZLFTERM     IF THIS IS NOT A TERMINAL FILE       021
      BO   ˇ
        MVC   ZLFDCB(96),INDDDCB   SET UP DCB                          0
        MVI   OPENL,X'80'          SET TO OPEN FOR INPUT               0
        B     OPENIT      ˇ
3         SPACE 1
3CLRFB    XC    ZLFILBLK(*-*),ZLFILBLK  EXECUTED: CLEAR BLOCK TO ZEROES
3         SPACE 1                        ˇ
003FITERM   DS    0H                  ELSE (TERMINAL FILE)...
003         ICM   #1,15,ZLCIFTRM       GET @ OF INPUT TERMINAL FILE BLOC
003         BNZ   GOTIFTRM             IF NONE YET, THENˇ
90003         ST    #7,ZLCIFTRM           THIS IS THE FIRST. SET IT NOW
00003         LR    #1,#7                 FOR FUTURE TERMINAL FILES
10003GOTIFTRM DS    0H                  ANYHOW...                      ˇ
2320003         ST    #1,ZLFTFPTR          SET INDIRECT POINTER TO TRUE
2330003         OI    ZLFFLAG2,ZLFTABS     SET TABS MODE ON BY DEFAULT
2340003         LA    #0,80                SET RECORD LENGTH TO 80
235000ˇ
 02360003         LA    #1,ZLFLINE
 02370003         ST    #1,ZLFCARD           SET POINTER TO RECORD AREA
 02380003         ALRˇ
   02390003         ST    #1,ZLFEND            SET END-OF-RECORD ADDRESS
   02400003         B     FILOPEND             CONSIDER THE FILE OPEN
   02410003NOTINPUT DS    0H        ˇ
     02420003         LA    #1,1
     02430003         ST    #1,ZLFCHAR          CHARACTER POSITION = 1
     02440003         TM    ZLFFLAG,ZLFTERM     IF ˇ
       02450003         BO    FOTERM              THEN...
       02460003         MVC   ZLFDCB(96),OUTDDDCB  SET UP DCB
       02470003         MVI   OPENL,X'8F'          SET TO OPEN FORˇ
         02480003         B     OPENIT               GO TO OPEN THE FILE
         02490003FOTERM   DS    0H                  ELSE (TERMINAL FILE)
         02500003         ICM   #1,15,ZLCOFTRM       GET @ OF OUTPUT TER
L+

 IT NOW      02530003         LR    #1,#7                 FOR FUTURE TER
LES          02540003GOTOFTRM DS    0H                  ANYHOW...
             0ˇ
TO TRUE FILBLK 02560003         LA    #0,78                SET RECORD LE
78             02570003         LA    #1,ZLFLINE           (NO PRINT CON
RACTER)        02580003      ˇ
ARAMETERS        02590003OPENIT   DS    0H
                 02600003         MVC   ZLFDCB+40(8),ZLFPDDN SET DDNAME
                 02610003         SPACE 1   ˇ
                   02620003         LA    #0,STARETRY         SET ADDRES
RY ROUTINE         02630003         ST    #0,STAERTRY
                   02640003         XC    STAECOMP,STAECOMPˇ
 CODE                02650003         STM   #7,#13,STAEREGS     SAVE REG
OR ESTAE RETRY       02660003         ESTAE STAEEXIT,PARAM=STAEPARM ESTA
TAE EXIT             02670003         LTR   #15,#15             IF ESTAE
D                      02680003         BNZ   ESTAEERR            THEN E
                       02690003         OI    STAEOK,X'FF'        ELSE S
-SET FLAG ON           02700003ESTAEERR DS    0H
         ˇ
                         02720003         AIF   (NOT &ZILXA).SKIP1
                         02730003*---------------------------------SWITC
URRENT AMODE TO AMODE 24ˇ
 THIS CODE                 02750003         LA    #2,OPEN24E          RE
RESS                       02760003         BSM   #2,#1
                           02770003OPENˇ
                             02780003*---------------------------------T
 IS NOW 24                   02790003.SKIP1   ANOP
                             02800003         SPACE 1 ˇ
                               02810003         LA    #1,ZLFDCB
TO DCB                         02820003         STCM  #1,7,OPENL+1
 OPEN LIST FORM                02830003         OPEN  MF=(E,OPENL)   ˇ
 THE INPUT OR OUTPUT FILE        02840003         SPACE 1
                                 02850003         AIF   (NOT &ZILXA).SKI
                                 02860003*------------------------------
H FRˇ
                                   02880003OPEN24E  DS    0H
                                   02890003*----------------------------
 AMODE IS NOW SAME  AS ON ENTRY     02900003ˇÁ
                                                   02910003         SPAC
                                                   02920003         TM
,X'FF'        IF ESTAE WAS SUCCESSFULLY SET        02930003 ˇ
TOFF            THEN                                 02940003         ES
                CANCEL ESTAE EXIT                    02950003NOESTOFF DS
                                                     02960003         SP
                                                       02970003
FDCB+48,X'10'     IF FILE SUCCESSFULLY OPENED          02980003
TSTNUM            THEN PROCEED. ELSE...                02990003OPENFAIL
          ˇ
#6,FILEATOM         Get file argument                    03010003
#1,ZLCSAVE2+56      Load saved #12                       03020003
3,PREFIX=NO,SIGNAL=NO,   ˇ
  'ZIL0007 ',CALLER,': ',TYPESTR,                         X03040003
  ' file ',(#6),' open failed.'                            03050003
T                                       ˇ
    #7,#7               CLEAR FILE BLOCK POINTER - ERROR     03070003
    TIOTEND             RETURN                               03080003
ACE 1                                                  ˇ
DS    0H                  FILE BLOCK ALLOCATION ERROR          03100003
#ERR  3,PREFIX=NO,SIGNAL=NO,                                  X03110003
      'ZIL0032 ZILFGET: Not enough memory available for file bX0312000ˇ
        lock.'                                                   0313000
  B     OPENFAIL            FILE OPEN FAILED                     0314000
  SPACE 1                                                        0315000
M DS ˇ
                                                                   03170
FILE IS OPEN FOR INPUT AND NOT THE TERMINAL, IT MAY BE NUMBERED    03180
UNNUMBERED. DETERMINˇ
ECORD FROM THE FILE AND CHECKING THE SEQUENCE NUMBER FIELD.          032
                                                                     032
      TM    ZLFFLAG,ZLFINPUT    IF ˇ
        BZ    FNOUTPUT            THEN                                 0
        TM    ZLFFLAG,ZLFTERM      IF THIS IS NOT THE TERMINAL         0
        BO    TIOTNEXT             THEN           ˇ
3         TM    ZLFDCB+36,X'C0'       IF RECFM = U
3         BNO   NRECFMU               THEN...
3         OI    ZLFFLAG2,ZLFRECU       INDICATE A RECFM=U FILE   +
003         B     RECFMF                ELSE...                ˇ
90003NRECFMU  DS    0H
00003         TM    ZLFDCB+36,X'80'       IF RECFM = V...
10003         BO    RECFMF                THEN...
3320003         OI    ZLFFLAG2,ZLFRECV       INDICATE A RECFM=V FILE
3330003RECFMF   DS    0H
3340003         LA    #1,FIRSTEOF           SET TEMPORARY EODAD ROUTINE
3350003      ˇ
 03360003         AIF   (NOT &ZILXA).SKIP3
 03370003         LA    #15,EOFCONT           GET ADDR OF EOF CONTINUATI
 03380003         BSM   #15,ˇ
   03390003         ST    #15,AEOFCONT          STORE THIS VALUE
   03400003.SKIP3   ANOP
   03410003         AIF   (NOT &ZILXA).SKIPˇ
     03420003*---------------------------------SWITCH FROM CURRENT AMODE
E 24 03430003         LA    #1,GET24            ADDRESS OF THIS CODE
     03440003         LA    #2,GET24E           RETURN ADDˇ
       03450003         BSM   #2,#1
       03460003GET24    DS    0H
       03470003*---------------------------------THE AMODE IS NOW 24
         03480003.SKIP4   ANOP
         03490003         ST    #9,ZLCISV09            SAVE ZIL REGISTER
         03500003         OI    ZLCIFLGS,ZLCISYS       INDICATE NON-ZIL
NING    ˇ
           03520003         NI    ZLCIFLGS,255-ZLCISYS
           03530003         AIF   (NOT &ZILXA).SKIP5
           03540003*---ˇ
URRENT AMODE 03550003         BSM   0,#2
             03560003GET24E   DS    0H
             03570003*----------------ˇ
S ON ENTRY     03580003.SKIP5   ANOP
               03590003         TM    ZLCIFLGS,ZLCIATTN      IF ATTENTIO
UPT OCCURRED   03600003         BOR   #13            ˇ
 IT              03610003         OI    ZLFFLAG1,ZLFSTART      SHOW FIRS
EAD DONE         03620003         ST    #1,ZLFREC1            SAVE ADDR
AL RECORD READ   03630003         XR    #0,#0                       ˇ
                   03640003         BCTR  #0,0
                   03650003         ST    #0,ZLFCHAR            SET CHAR
INTER TO -1 (NL)   03660003         TM    ZLFFLAG2,ZLFRECV      IF RECFM
                    03670003ˇÁ
THEN...                            03680003         LH    #0,0(,#1)
 GET LRECL FROM RDW OF RECORD      03690003         LA    #15,4
                                   03700003 ˇ
   BUMP RECORD POINTER UP 4          03710003         SR    #0,#15
   DECREASE LENGTH BY 4              03720003         ST    #1,ZLFCARD
   SET RECORD POINTER                03730003         LR   ˇ
                                       03740003         AR    #14,#0
     SET END-OF-RECORD POINTER         03750003         CH    #0,=H'8'
     IF RECORD SHORTER THAN 8 BYTES    03760003         BL    VCHKREC
       THEN CAN'T BE LINE NUMBERED       03770003         TRT   0(8,#1),
       SCAN FOR NUMERICS                 03780003         BNZ   VCHKREC
       IF ALL NUMERICS, IT'S NUMBERED    03790003VNUMBERD DS    0H
      RECˇ
M       SHOW THAT FILE IS LINE NUMBERED    03810003         LA    #1,8(,
        POINT TO TEXT (TRT DIDN'T BASH R1) 03820003         ST    #1,ZLF
        SET RECORD POINTˇ
                                             03840003VCHKREC  DS    0H
          OK, NOW CHECK FOR NULL RECORD      03850003         LTR   #0,#
          IF RECLEN ZERO OR NEGATIVE   ˇ
            THEN                               03870003         XR    #1
             SET CHAR PTR TO -1                03880003         BCTR  #1
                                               0389000ˇ
AR                                               03900003         B
                                                 03910003NOTRECV  DS
              RECFM NOT V, MUST BE F OR U        03920003         TM ˇ
G2,ZLFRECU      IF RECFM = U                       03930003         BZ
U               THEN...                            03940003         ST
CARD             SET RECORD POINTER                03950003         LH
FDCBˇ
14                 USE IT AS RECORD LENGTH           03970003         BN
CLOK               UNLESS IT'S ZERO, IN WHICH CASE   03980003         LH
ZLFDCB+52          ˇ
,#14                 USE IT AS RECORD LENGTH           04000003ULRECLOK
                                                       04010003
4,#1                 COMPUTE END Oˇ
SETINFIL               AND GO USE THEM                   04030003NOTRECU
0H                    RECFM NOT U, MUST BE F             04040003
#1,ZLFCARD            SET RECORD POINTER         +
  #0,ZLFDCB+82          GET LRECL FROM DCB     ˇ
    #14,#1                                                   04070003
    #14,#0                POINT TO END OF RECORD             04080003
    #14,=H'8'             BUMP BACK TO SEQUENCE NUMBER FIELD 0ˇ
TRT   0(8,#14),NUMTBL       SCAN FOR NUMERICS                  04100003
BZ    NUMBERED              IF ALL NUMERICS, IT'S NUMBERED     04110003N
DS    0H                    ELSE ASSUME UNNUMBERED             04120003
  LA    #14,8(,#14)           SET END-OF-RECORD POINTER          0413000
  B     SETINFIL                                                 0414000
D DS    0H                   OTHERWISE                           0415000
  OI    ZLFFˇ
    SH    #0,=H'8'              ASSUME NUMBERED, DECR REC LENGTH   04170
FIL DS    0H                   NOW RESET FILE FIELDS ACCORDINGLY   04180
    STH   #0,ZLFLRECL      ˇ
      ST    #14,ZLFEND           SET END-OF-RECORD ADDRESS           042
      B     FILOPEND             FILE IS NOW OK                      042
      SPACE 2                             ˇ
IRSTEOF DS    0H                  HERE IF EOF ON INPUT FILE (EMPTY)    0
                                  NOTE: THIS GETS CONTROL IN AMODE24!  0
        NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE-RUNˇ
3         AIF   (NOT &ZILXA).SKIP6
3         L     #15,AEOFCONT        GET ADDRESS OF EOF CONTINUATION
3         BSM   0,#15               GO TO IT IN CALLER'S AMODE
003AEOFCONT DS    A
003.SKIP6   ANOP
003EOFCONT  DS    0H
003    ˇ
20003         BOR   #13                  THEN GO TO HANDLE IT
30003         XR    #1,#1               INDICATE END OF FILE BY
40003         ST    #1ˇ
4350003         ST    #1,ZLFCHAR          SETTING CHARACTER POINTER TO Z
4360003         LH    #0,ZLFDCB+82        PICK UP LRECL (IN CASE SOMEONE
4370003         STH   #0,ZLFLRECL    ˇ
 04380003         AR    #1,#0                POINT TO END OF RECORD
 04390003         ST    #1,ZLFEND            SET END-OF-RECORD ADDRESS
 04400003         B     FILOPEND             FILE ISˇ
   04410003         SPACE 2
   04420003FNOUTPUT DS    0H                  THIS IS AN OPEN OUTPUT FIL
   04430003         TM    ZLFDCB+36,X'40'     IF RECFM = V...      
     04440003ˇÁ
                   04450003         TM    ZLFDCB+36,X'80'
                   04460003         BO    FNOUTOK
                   04470003 ˇ
FILE BLOCK           04480003FNOUTOK  DS    0H
                     04490003         AIF   (NOT &ZILXA).SKIP7
                     04500003*-------------ˇ
RENT AMODE TO AMODE 24 04510003         LA    #1,PUT24            ADDRES
S CODE                 04520003         LA    #2,PUT24E           RETURN
                       04530003         BSM   #2,#1       ˇ
                         04540003PUT24    DS    0H
                         04550003*---------------------------------THE A
NOW 24                   04560003.SKIP7   ANOP
                           04570003         ST    #9,ZLCISV09         SA
EGISTERS                   04580003         OI    ZLCIFLGS,ZLCISYS    IN
ON-ZIL CODE RUNNING        04590003         LA    #1,ZLFDCB           DO
TIAL PUTˇ
 TO CURRENT LINE)            04610003         NI    ZLCIFLGS,255-ZLCISYS
                             04620003         AIF   (NOT &ZILXA).SKIP8
                       ˇ
FROM AMODE 24 TO CURRENT AMODE 04640003         BSM   0,#2
                               04650003PUT24E   DS    0H
                               0466000ˇ
MODE IS NOW SAME AS ON ENTRY     04670003.SKIP8   ANOP
                                 04680003         TM    ZLCIFLGS,ZLCIATT
ATTENTION INTERRUPT OCCURRED     04690003         BORˇ
HEN GO TO HANDLE IT                04700003         LH    #0,ZLFDCB+82
T DCB LRECL                        04710003         TM    ZLFFLAG2,ZLFRE
 RECFM=V FILE                      04720003         BZ    NOTRECVO  ˇ
THEN...                              04730003         TM    ZLFDCB+36,X'
 IF RECFM = V.A                      04740003         BZ    NOTRECVA
 THEN...                             04750003         STH   #0,0(,#1)
  Iˇ
                                       04770003         MVI   4(#1),C'1'
    INITIALIZE PRINT CONTROL CHAR      04780003         LA    #1,5(,#1)
    BUMP PAST RDW ˇ
      SET LENGTH OF ACTUAL TEXT          04800003         B     NOTRECFA
                                         04810003NOTRECVA DS    0H
     RECFM = V(B), NOT A         +
       INITIALIZE RDW          ˇ
)                                            04840003         LA    #1,4
         BUMP PAST RDW TO TEXT               04850003         SH    #0,=
         SET LENGTH OF ACTUAL TEXT           0ˇ
                                               04870003NOTRECVO DS    0H
                                               04880003         TM    ZL
X'04'     IF RECFM = ..A                       04890003      ˇ
            THEN...                              04900003         MVI
1'           INITIALIZE PRINT CONTROL CHAR       04910003         LA
)            BUMP POINTER PAST CONTROL CHAR      04920003         BCTR
               SUBTRACT 1 FOR PRINT CONTROL CHAR   04930003NOTRECFA DS
                                                   04940003         STH
LRECL         STORE RECORD LENGTH                  04950003         ST
CARD       ˇ
0               RECORD ADDRESS + LRECL GIVES...      04970003         ST
LFEND           NEW END-OF-RECORD POINTER            04980003         LA
X'40'           SOURCE LENˇ
5,24              FILL = BLANK                         05000003
,ZLFCARD          TARGET = OUTPUT AREA                 05010003
,ZLFLRECL         LENGTH = LENGTH OF OUTPˇ
#14,#14             SOURCE = NULL                        05030003
#0,#14              CLEAR OUTPUT AREA TO BLANKS          05040003FILOPEN
0H                  FILE OPEN COMPLETE...               ˇ
  ZLFFLAG2,ZLFOPEN    INDICATE FILE OPEN                   05060003
  ZLCMSLVL,0                                               05070003
  NONOTIFY                                                 05080003    ˇ
I   ZIL0006,C' '        CLEAR MESSAGE TO BLANKS              05090003
C   ZIL0006+1(L'ZIL0006-1),ZIL0006                           05100003
C   ZIL0006(L'FM1MSG),FM1MSG                                 05110003
C   FMˇ
LA    #1,FM1NAME          SEARCH FOR TERMINATING WHITESPACE    05130003
LA    #0,4                IN FILE NAME                         05140003G
CLI   0(#1),X'40'    ˇ
  BNH   GOTFM1                                                   0516000
  LA    1,1(,#1)                                                 0517000
  BCT   #0,GETFM1                   ˇ
1   DS    0H                                                       05190
    MVC   0(L'FM1REST,#1),FM1REST                                  05200
    CLI   TYPE,INPUT                                                052

   05220003         MVC   L'FM1REST(6,#1),=CL6'INPUT.'
   05230003         B     FM1AFTIN
   05240003Fˇ
     05250003FM1AFTIN DS    0H
     05260003         #TPUT 0,ZIL0006           FILE OPEN SUCCESSFUL
     05270003NONOTIFY DS   ˇ
       05280003         SPACE 1
       05290003         TM    ZLFFLAG1,ZLFTERM    IF THIS IS A TERMINAL
       05300003         BZ    TIOTEND     ˇ
         05310003         L     #7,ZLFTFPTR          LOAD PTR TO TRUE TE
ILBLK    05320003         SPACE
         05330003TIOTEND  DS    0H                  TIOT ˇ
           05340003         SPACE
           05350003         LM    #14,#6,ZLCSAVE2     RESTORE REGISTERS
           05360003         LM    #8,#12,ZLCSAVE2+40  EXCEPT FOR REGISTE
             05370003         DROP  #12
             05380003         SPACE 1
             05390003         LTR   #7,#7               IF A FILE BLOCK
ULLY FOˇ
LSE ERROR      05410003         SPACE 1
               05420003*************************************************
************** 0543000ˇ
                 05440003* FILE NOT FOUND, SIGNAL ERROR
                 05450003*
                 05460003************ˇ
****************** 05470003         SPACE 1
                   05480003         #BASR #4,0
                   05490003         USING *,#4      ˇ
                     05500003         TM    ZLCERFLG,ZLCERCFA   IF THIS
ESS IS CONDITIONAL   05510003         BZ    FNFERROR            THEN...
                     05520003         XR    #7,#7                SEˇ
K POINTER TO ZERO      05530003         BR    #14                  AND R
                       05540003FNFERROR DS    0H                  ELSE F
FOUND ERROR            05550003         L     #6,FILEATOM         Get fi
enˇ
,TYPESTR,               X05570003               ' file ',(#6),' does not
DDNAME ',               X05580003               DDSTR,' not found).'
                 +
               ˇ
                             05610003         EJECT
                             05620003GETCALR  DS    0H
                             0ˇ
                               05640003*********************************
****************************** 05650003*
                             * 05660003* Thisˇ
the calling function, as       * 05670003* pointed to by register 12 on
nd builds a "fake string"      * 05680003* out of it to pass to the erro
e handler.                     * 05690003*                  ˇ
                                 * 05700003* It also sets the file type
o INPUT or OUTPUT.               * 05710003*
                                 * 05720003* On entry register 1 points
 compiled function code (#12).     * 05730003*
                                   * 05740003***************************
************************************ 05750003         SPACE 1
          ˇ
                                       05770003         #BASR #2,0
                                       05780003         USING *,#2
                         ˇ
                                         05800003         CLI   TYPE,C'I
    IF FILE TYPE IS INPUT                05810003         BNE   GETCNI
    then                                ˇ
NPUT),STRINPUT                             05830003         B     AFTGCE
      else                                 05840003GETCNI   MVC   TYPEST
UTPT),STROUTPT                             05850003AFTGˇ
                                             05860003         SPACE 1
                                             05870003         XR    #15,
        Clear insert register                05880003         IC    #1ˇ
          Get length of module identifier      05890003         SH    #1
          Reduce by length of date/time info   05900003         BNP   DU
          If no name, generate dummy name      05910003         CH    #1
ALLTEˇ
            then                                 05930003         LA
LLTEXT       use our maximum length              05940003         STCM
LLLEN       Store leˇ
              Reduce length for execute            05960003         EX
CCALL         Move caller's name to fake string    05970003         BR
              Return to caller                      05980003ˇÁ
    DS    0H                  Can't figure out function name?      05990
    MVC   CALLER(CALLDUML),CALLDUM Then use this...                06000
    BR    #14                 Return to caller                     06010
      SPACE 1                                                        060
CALL  MVC   CALLTEXT(*-*),5(#1) Executed: Move caller name to string 060
      SPACE 1                                                        060
      DS   ˇ
ALLER   DC    YL1(##STRING)       Fake string header                   0
ALLLEN  DC    AL3(0)              Fake string length                   0
ALLTEXT DS    CL64        ˇ
3         DS    0H,XL1              Align string to non-halfword
3TYPESTR  #SATM '      '            Room for file type
3         SPACE 1                        ˇ
003         DS    0H,XL1              Align string to non-halfword
003STRINPS  #SATM 'Input'             Possible file type
003STRINPUT EQU   STRINPS,*-STRINPS                     ˇ
40003         DS    0H,XL1              Align string to non-halfword
50003STROUPS  #SATM 'Output'            Possible file type
60003STROUTPT EQU   STROUPS,*-STROUPS                                  ˇ
6170003         SPACE 1
6180003         DS    0H,XL1              Align string to non-halfword
6190003CALLDUM  #SATM 'ZILFGET'           Use this if can't figure out c
620000ˇ
 06210003         SPACE 1
 06220003FM1MSG   DC    C'ZIL0006 FILE '
 06230003FM1REST  DC ˇ
   06240003FM1TYPE  DC    C'       '
   06250003ZIL0006  DS    CL(L'FM1MSG+4+L'FM1REST+7)
   06260003FM1NAME  EQU   ZIL0006+L'ˇ
     06270003         SPACE 1
     06280003         DC    C'0123456789ABCDEF'
     06290003HEXTBL   EQU   *-256                  ˇ
       06300003         SPACE 1
       06310003         POP   USING
       06320003         EJECT                                     ˇ
         06330003STAEOK   DC    X'00'               Flag set if ESTAE su
         06340003         SPACE 1
         06350003STAEPARM DS    0A                  ESTAE PARAM AREA
 +

             06380003STAERTRY DS    A                   ADDRESS OF RETRY
             06390003STAEREGS DS    7A                  SAVE AREA FOR RE
             0ˇ
               06410003STARETRY DS    0H
               06420003         SPACE 1
               06430003******ˇ
**************** 06440003*
               * 06450003* RETRY ROUTINE TO RECEIVE CONTROL WHEN ESTAE E
CTED AN ABEND  * 06460003* IN THE OPEN ROUTIˇ
RETURN TO THE    * 06470003* MAINLINE CODE FOR THE PURPOSE OF DISPLAYING
R MESSAGE.       * 06480003*
                 * 06490003*  ON ENTRY TO THIS ROUTINE:    ˇ
                   * 06500003*
                   * 06510003*  IF AN SDWA WAS AVAILABLE (REGISTER 0 = O
N 12 IN STAEEXIT)  * 06520003*  THEN (ASSUMING DEFAULTS OF RETREGS=NO AN
DWA=NO):             * 06530003*
                     * 06540003*    REGISTER  0 = 0
                     * 06550003*    REGISTER  1 = ADDRESS OF THE SDWA
         ˇ
ION (EXIT)             * 06570003*    REGISTER 15 = ENTRY POINT ADDRESS
RETRY ROUTINE          * 06580003*
                       *ˇ
                         * 06600003*
                         * 06610003*    REGISTER  0 = 12
                         * 06620003*   ˇ
AMETER LIST (PARAM)        * 06630003*    REGISTER  2 = ADDRESS OF THE P
 LIST OR 0                 * 06640003*    REGISTER 14 = ADDRESS OF AN SV
RUCTION (EXIT)             * 06650003*    REGISTER 15 ˇ
 THIS RETRY ROUTINE          * 06660003*
                             * 06670003*  OTHER REGISTER CONTENTS ARE UN
BLE (UNLESS RETREGS=YES      * 06680003*  WAS SPECIFIED IN THE ESTAE ˇ
                               * 06690003*
                               * 06700003*******************************
******************************** 06710003         SPACE 1
    ˇ
                                   06730003         USING STARETRY,#6
                                   06740003         LA    #3,12
ECK IF REGISTER 0 =  12             06750003ˇÁ
              IF AN SDWA IS AVAILABLE              06760003         BE
R             THEN...                              06770003         USIN
1                                                  06780003 ˇ
DWAPARM          #4 -> WORKAREA                      06790003         B
DWAR                                                 06800003NOSDWAR  DS
                ELSE...                              06810003         LR
,#1                #4 -> WORKAREA                      06820003AFTSDWAR
                                                       06830003
                  CANCEL ESTAE                         06840003
,#13,STAERˇ
USING12,#12                                              06860003
ABENDF(4),FNAME                                          06870003
#0,STAECOMP-STAEPARM(,#4)ˇ
  #0,4                SHIFT OUT HIGH ORDER BYTE            06890003
  #0,ZLCDBL                                                06900003
  ABENDC(4),ZLCDBL(3)                   ˇ
    ABENDC(4),HEXTBL                                         06920003
I   ABENDC+3,C','                                            06930003
    #0,STAEREAS-STAEPARM(,#4)      GET REASON CODE     ˇ
SLL   #0,16               ONLY CARE ABOUT LAST 3 NIBBLES       06950003
ST    #0,ZLCDBL                                                06960003
UNPK  ABENDR(4),ZLCDBL(3)                                      0697000ˇ
  TR    ABENDR(4),HEXTBL                                         0698000
  MVI   ABENDR+3,C'.'                                            0699000
  #ERR  PREFIX=NO,          FILE NAME INVALID                   X0700000
     ˇ
          ' file ',ABENDFS,' open failed, ABEND code ',ABENDCS,   X07020
          ' reason code ',ABENDRS                                  07030
    SPACE 1         ˇ
      DS    0H,XL1                                                   070
NDFS  #SATM '    '                                                   070
NDF   EQU   ABENDFS+4,4,C'C'       ˇ
        DS    0H,XL1                                                   0
BENDCS  #SATM '   ,'                                                   0
BENDC   EQU   ABENDCS+4,4,C'C'                    ˇ
3         DS    0H,XL1
3ABENDRS  #SATM '   .'
3ABENDR   EQU   ABENDRS+4,4,C'C'                                 +
003         SPACE 1                                            ˇ
40003         DROP  #6,#12
50003         SPACE 1
60003         EJECT
7170003STAEEXIT DS    0H
7180003         SPACE 1
7190003*****************************************************************
7200003*     ˇ
 07210003* ESTAE EXIT THAT GETS CONTROL IF AN ABEND OCCURS DURING OPEN.
 07220003*
 07230003*  ON ENTRY TO THISˇ
 * 07240003*
 * 07250003*  REGISTER 0 = 12 - NO SWDA AVAILABLE
 * 07260003*               OTHER - SDWA AVAˇ
   * 07270003*
   * 07280003*  IF REGISTER 0 = 12:
   * 07290003*                                            ˇ
     * 07300003*     REGISTER 1  = ABEND COMPLETION CODE
     * 07310003*     REGISTER 2  = ADDRESS OF THE ESTAE PARAMETER LIST (
     * 07320003*     REGISTER 14 = RETURN ADDRESS TO RTM
       * 07330003*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS ESTAE E
INE    * 07340003*
       * 07350003*  OTHERWISE:
       *ˇ
         * 07370003*     REGISTER 1  = ADDRESS OF THE SDWA
         * 07380003*     REGISTER 13 = ADDRESS OF A 72-BYTE SAVE AREA
         * 07390003*   ˇ
           * 07400003*     REGISTER 15 = ENTRY POINT ADDRESS OF THIS EST
ROUTINE    * 07410003*
           * 07420003*****************ˇ
************** 07430003         SPACE 1
               07440003         PUSH  USING
               07450003         LR    #7,#15         ˇ
EGISTER          07460003         USING STAEEXIT,#7
                 07470003         LA    #3,12               CHECK IF REG
= 12             07480003         CR    #0,#3               IF AN SDˇ
LABLE              07490003         BE    NOSDWAE             THEN...
                   07500003         USING SDWA,#1
                   07510003         L     #4,SDWAPARM          #4 -> WOR
                    07520003ˇÁ
                                   07530003         ICM   #5,7,SDWACMPC
5 = COMPLETION CODE                07540003         ST    #5,STAECOMP-ST
#4) STORE COMPLETION CODE          07550003 ˇ
 #6 = REASON CODE FROM ABEND MACRO   07560003         ST    #6,STAEREAS-
(,#4) STORE REASON CODE              07570003         L     #2,STAERTRY-
(,#4) ADDRESS OF RETRY ROUTINE       07580003         SETRPˇ
NO,RC=4  INDICATE RETRY                07590003         BR    #14
  AND RETURN                           07600003         SPACE 1
                                       07610003NOSDWAE  DS    0H
    NO SDWA AVAILABLE...                 07620003         LR    #4,#2
     #4 -> WORKAREA                      07630003         LR    #5,#1
     #5 = COMPLETION CODE                07640003         ST    #5,STAEC
PARM(,#4)ˇ
       #6 = REASON CODE ZERO (UNKNOWN)     07660003         ST    #6,STA
AEPARM(,#4) STORE REASON CODE              07670003         L     #0,STA
AEPARM(,#4) ADDRESS OF Rˇ
        INDICATE RETRY TO BE ATTEMPTED       07690003         BR    #14
        AND RETURN                           07700003         POP   USIN
                                       ˇ
                                               07720003OUTEXIT  DS    0H
                                               07730003         SPACE 1
                                               0774000ˇ
************************************************ 07750003*
                                               * 07760003* DCB OPEN EXIT
 OUTPUT FILES.  THIS FILLS IN DCB INFO.        * 07770003*           ˇ
                                                 * 07780003* NOTE: THIS
EXECUTES IN AMODE 24 (I THINK).                  * 07790003*
                                                 * 07800003*************
****ˇ
                                                     07820003         US
TUFF,#1                                              07830003DCBSTUFF DS
                   ˇ
BSTUFF+X'1A',2,C'X'                                    07850004RECFM
BSTUFF+X'24',1,C'X'                                    07860003LRECL
BSTUFF+X'52',2,C'H'               ˇ
DCBSTUFF+X'3E',2,C'H'                                    07880003
1                                                        07890003ZILFGET
                                                 +
E 1                                            ˇ
ING OUTEXIT,#15                                              07920003
    DSORG,DSORG         IF NO DSORG PRESENT                  07930003
Z   OXGOTDS             THEN                                 0ˇ
MVI   DSORG,X'40'          SET DSORG = PS                      07950003O
DS    0H                                                       07960003
CLI   RECFM,X'00'         IF NO RECFM PRESENT                  07970003
  BNE   OXGOTRF             THEN                                 0798000
  MVI   RECFM,X'90'          SET RECFM = FB                      0799000
  B     OXFIXED              AND PROCESS FIXED LRECL.            0800000
  DS    0H  ˇ
    TM    RECFM,X'80'         IF RECFM = V..                       08020
    BO    OXFIXED             THEN                                 08030
    OC    LRECL,LRECL      ˇ
      BNZ   OXGOTLR              THEN                                080
      LA    #15,255               SET LRECL = 255                    080
      STH   #15,LRECL                     ˇ
        LA    #15,4095                                                 0
        LA    #15,6233-4095(,#15)   SET BLKSIZE = 6233                 0
        STH   #15,BLKSIZE                                ˇ
3         BR    #14                   AND RETURN.
3OXFIXED  DS    0H
3         OC    LRECL,LRECL         IF LRECL IS ZERO
003         BZ    OXSETF              THEN SET LRECL AND BLKSIZE
003OXGOTLR  OC    BLKSIZE,BLKSIZE     IF BLOCK SIZE EXISTS
003         BNZR  #14                 THEN WE ARE ALL SET
003    ˇ
70003         MH    #15,LRECL           MULTIPLY BY LRECL
80003         STH   #15,BLKSIZE         SET BLOCKSIZE
90003         BR    #1ˇ
8200003OXSETF   LA    #15,80               SET LRECL = 80
8210003         STH   #15,LRECL
8220003         LA    #15,4095       ˇ
 08230003         LA    #15,6160-4095(,#15)  SET BLKSIZE = 6160
 08240003         STH   #15,BLKSIZE
 08250003         BR    #14                  AND RETˇ
   08260003         SPACE 1
   08270003         DROP  #1,#15
   08280003         EJECT                                          
     08290003ˇÁ
                   08300003OUTPUT   EQU   C'O'
                   08310003         SPACE 1
                   08320003 ˇ
g to non-halfword    08330003DDSTR    DC    YL1(##STRING)
                     08340003DDLEN    DC    AL3(8)
                     08350003DDNAME   DS   ˇ
                       08360003TYPE     EQU   DDNAME+3,1,C'C'
                       08370003FILEATOM DS    A
                       08380003FNAME    DS    CL4         ˇ
                         08390003         SPACE 1
                         08400003OPENL    OPEN  (*-*),MF=L
                         08410003         SPACE 1
                           08420003XLOUT    DC    0F'0',X'85',AL3(OUTEXI
LIST FOR OUTPUT DCB        08430003         EJECT
                           08440003NUMTBL   DC    256YL1(1)           TA
CAN FOR ˇ
                             08460003         DC    10YL1(0)
                             08470003         ORG
                       ˇ
                               08490003INDDDCB  DCB   DDNAME=X,
                              X08500003               MACRF=GL,
                              X0851000ˇ
AD. THIS IS SET DYNAMICALLY.     08520003         EJECT
                                 08530003OUTDDDCB DCB   DDNAME=X,
                                X08540003            ˇ
                                  X08550003               DSORG=PS,
                                  X08560003               EXLST=XLOUT
                                   08570003         EJECT           ˇ
                                     08580003         #ZHDR ,
                                     08590003         EJECT
                                     08600003         IHASDWA  ,
   h                                   08610003         END
                                       08620003
  TITLE 'ZILFINT - ZIL 1.3 FORTRAN INTERFACE SUBROUTINE'         0001000
**************************************************************** 0001100
                                                               * 0001200
 Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013
                 All rights reserved.                            * 00014
                                                                 * 00015
*********ˇ
      SPACE 1                                                        000
******************************************************************** 000
                        ˇ
                                                                     * 0
  THIS ROUTINE, LINKEDITED WITH ZILSUBS AND ACCESSIBLE VIA THE       * 0
  ZLCFINT POINTER IN THE ZIL COMMON AREˇ
2*  INTERFACE.  THIS ROUTINE IS CALLED THE FIRST TIME ANY ZIL          *
2*  FUNCTION THAT REQUIRES THE FORTRAN INTERFACE GETS EXECUTED,        *
2*  E.G. SQRT.  IT SHOULD NOT BE CALLED MORE THAN ONCEˇ
002*  FUNCTION, BUT MAY BE CALLED FOR SEVERAL FUNCTIONS.
002*
002*  THE FIRST TIME THIS ROUTINE IS CALLED BY ANYBODY, IT SETS UP   ˇ
00002*  THE FORTRAN INTERFACE BY ALLOCATING THE FORTRAN INTERFACE
10002*  CONTROL BLOCK AND PLACING ITS ADDRESS IN THE ZIL COMMON AREA.
20002*
3000ˇ
0140002*
0150002*  #1  CONTAINS ZERO IF THIS ROUTINE IS BEING CALLED TO TERMINATE
0160002*      THE Fˇ
 00170002*  #1  NONZERO IF A FORTRAN SUBROUTINE IS TO BE LOADED
 00180002*
 00190002*  ON EXIT FROM THIS ROUTˇ
 * 00200002*
 * 00210002*  #15 CONTAINS THE ADDRESS OF THE FORTRAN INTERFACE CONTROL
 * 00220002*                                     ˇ
   * 00230002*  SAVE AREA CONVENTIONS:
   * 00240002*
   * 00250002*  THIS ROUTINE SETS UP A SPECIAL SAVE AREA FOR FORˇ
     * 00260002*  FUNCTIONS THAT CALL FORTRAN CODE SHOULD SET REGISTER 1
     * 00270002*  POINT TO THIS SAVE AREA BY DOING THE FOLLOWING:
     * 00280002*

 OF ATTN * 00300002*       OI   ZLCIFLGS,ZLCISYS       INDICATE NON-ZIL
NING     * 00310002*       L    #13,ZLCFTCBA           POINT TO FORTRAN
A        * 00320002*
         * 0ˇ
L BLOCK    * 00340002*  ARE THE SAVE AREA FOR USE BY FORTRAN CODE.  TO R
13 AFTER   * 00350002*  THE CALL, DO:
           * 00360002*     ˇ
             * 00370002*       L    #13,4(,#13)            POINT BACK TO
MON AREA     * 00380002*       NI   ZLCIFLGS,255-ZLCISYS   TURN OFF NON-
 FLAG        * 00390002*       TM   ZLCIFLˇ
UPT OCCURRED   * 00400002*       BOR  #13                    THEN GO TO
T              * 00410002*
               * 00420002*                               ˇ
                 * 00430002*********************************************
****************** 00440002         SPACE 1
                   00450002ZILFINT  #ZBEG NAME='ZILFINT'
                     00460002         DROP  #15
                     00470002         STM   #12,#7,SAVEREGS-ZILFINT(#15)
GS IN OUR OWN PLACE  00480002         LR    #12,#15
       ˇ
                       00500002         SPACE 1
                       00510002         LTR   #3,#1               SAVE I
AMETER                ˇ
S A TERMINATION REQUEST  00530002         SPACE 1
                         00540002         L     #4,ZLCFTCBA         GET
OF FORTRAN INTERFACE CB  00550002    ˇ
T GOT ONE YET,             00560002         BNZ   GOTIT               TH
                           00570002         #GETMAIN RC,LV=ZIFLEN,LOC=BE
ONE                        00580002         LTR   #1ˇ
OULDN'T GET ONE              00590002         BNZ   ERRORG
RF                           00600002         ST    #1,ZLCFTCBA
TS ADDRESS                   00610002         LR    #4,#1          ˇ
LISH ADDRESSABILITY            00620002         USING ZIF,#4
                               00630002*
                               00640002* FILL IN FORTRAN INTERFACE CONTR
 Fˇ
                                 00660002         LOAD  EP=ZIFINIT,ERRET
LOAD FORTRAN INTERFACE PROCESSOR 00670002         LR    #5,#0
 ENTRY POINT                      00680002ˇÁ
A+4         SET HSA POINTER IN FTCB SAVE AREA    00690002         SPACE
                                                 00700002         ST
A+4         SET HSA POINTER IN FTCB SAVE AREA    00710002 ˇ
                                                   00720002         LR
              GET ADDRESS OF ZIFINIT               00730002         LR
              POINT TO ZIF AREA                    00740002         OI
FLGS,ZLCISMC    CAN'T INTERRUPT WHILE INIT'ING FTN   00750002         #B
#15             CALL ZIFINIT TO INITIALIZE FTN ENV   00760002         NI
FLGS,255-ZLCISMC                                     00770002         TM
FLGS,ZLCˇ
3                 then go to handle it                 00790002
                                                       00800002GOTIT
                       ˇ
1                                                        00820002
#4,SAVEREGS+12      SAVE IN WHAT WILL BE RETURNED #15    00830002
1                                     ˇ
  0H                                                       00850002
  #12,#7,SAVEREGS     RESTORE REGS                         00860002
  #14                 RETURN TO CALLER               ˇ
ACE 1                                                        00880002CLE
    0H                                                       00890002
M   #4,15,ZLCFTCBA      GET FTCB ADDRESS                     0090000ˇ
BZ    NOCLN               IF NONE, NO CLEANUP TO DO            00910002
DELETE EP=ZIFINIT                                              00920002
LR    #1,#4                                                    00930002
LA ˇ
  FREEMAIN R,LV=(0),A=(1)   FREE THE CONTROL BLOCK               0095000
  DS    0H                                                       0096000
  LM    #12,#7,SAVˇ
    BR    #14                 RETURN TO CALLER                     00980
    SPACE 2                                                        00990
EGS DS    12A                 REGˇ
      SPACE 2                                                        010
ORG   #ERR  PREFIX=NO,                                              X010
            'ZIL0060 ZILFINT: No storage availabˇ
              face.'                                                   0
        SPACE 1                                                        0
RRORI   #ERR  PREFIX=NO,                                       +
2               'ZIL0061 ZILFINT: FORTRAN interface initializˇ
002               d, module ZIFINIT could not be loaded.'
002         SPACE 1
002         LTORG
00002         EJECT
10002         #ZIF  ,                   FORTRAN INTERFACE CONTROL BLOCK
20002         EJECT
30002      <    END
1140002{
ROUTINE'                   00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00017002* ZILFIX TAKES TWO ARGUMENTS:  (1
er, (2) a fixnum.            * 00018002*                          ˇ
                               * 00019002* Arg 2 determines which kind o
sion-to-integer to perform,    * 00020002* as follows:
                               * 00030002*
 ˇ
                                 * 00050002*             4   ==>  FLOOR
                                 * 00060002*             8   ==>  CEILIN
                ˇ
                                   * 00080002*
                                   * 00090002***************************
*******************************ˇ
                                     * 00110002* CONVERSION RULES ARE AS
:                                    * 00120002*
                                     * 0013000ˇ
RETURN FIXNUM ITSELF.                  * 00140002* 2. ARG BIG
RETURN BIGNUM ITSELF.                  * 00150002* 3. ARG FLOAT
CONVERT TO FIXED AND RETURN.           * 00160002*           ˇ
                                         * 00170002* ANY OTHER TYPES CAU
ROR.                                     * 00180002*
                                         * 00190002*********************
******************************************** 00200002         SPACE 1
                                             00210002ZILFIX   #ZBEG MINA
XARGS=2,NAME='ZILFIX'                        00220002         #ZPDS 20
        DEFˇ
          SAVE REGISTERS                       00240002         SPACE
                                               00250002         L     #1
)         Load argument 1 ˇ
15),##INT   IF FIXNUM OR BIGNUM, RETURN SELF     00270002         BO
                                                 00280002         CLI
15),##SFLOAT IF SINGLE FLOAT, CONVERT IT +
RT                                     ˇ
PE(#15),##DFLOAT IF DOUBLE FLOAT, CONVERT IT         00310002         BE
VERT                                                 00320002         B
R1              ALL OTHER TYPES: ERROR               0ˇ
                                                       00340002SCONVERT
                  FLOAT TO BE CONVERTED TO FIX         00350002
                                                       00360002      ˇ
#F0,#F0                                                  00370002
#F0,##CDR(,#15)     GET FLONUM VALUE                     00380002
CONVERT                                                  00390002DCONVER
0H  ˇ
E 1                                                        00410002
  #F0,8(,#15)         GET FLONUM VALUE                     00420002CONVE
  0H               ˇ
    #14,4(,#11)         Load argument 2                      00440002
    #14,##CDR(,#14)     Get value of arg2                    00450002
DR  #F2,#F0             Get absoluˇ
B     PROCESS1(#14)       Branch based on request              00470002P
B     TRUNC1               0 = TRUNCATE                        00480002
B     FLOOR1               4 = FLOOR             ˇ
  B     CEIL1                8 = CEILING                         0050000
  B     ROUND1              12 = ROUND                           0051000
  SPACE 1                                                       ˇ
1   DS    0H                  Adjust for TRUNCATE...               00530
    SPACE 1                                                        00540
    AW    #F2,W0              UNNORMALIZE TO GET INTEGER PART      00550

      B     NOADJUST            otherwise don't adjust               005
      SPACE 1                                                        005
ND1   DS    0Hˇ
        SPACE 1                                                        0
        AD    #F2,DHALF           Add 0.5 to it                        0
        LDR   #F4,#F2        ˇ
2         AW    #F2,W0              Unnormalize to get integer part
2         BZ    RET0                If integer part zero, return zero
2         STD   #F2,ZLCWORK         Store inˇ
002         CLC   ZLCWORK(4),W0       IF DOESN'T START WITH 4E000000
002         BNE   FLT2BIG             THEN DO FLOAT-TO-BIGNUM CONVERSION
002         LDR   #F6,#F2             Get normalized versio n of un...
80002ˇÁ
 integer   00690002         BNE   NOADJUSR             and
           00700002         TM    ZLCWORK+7,X'01'       this is an odd i
           00710002 ˇ
             00720002         SW    #F2,W1                  subtract an
ized 1       00730002         BZ    RET0                If integer part
turn zero    00740002         B    ˇ
number         00750002         SPACE 1
               00760002CEIL1    DS    0H                  Adjust for CEI
               00770002         SPACE 1           ˇ
                 00780002         AW    #F2,W0              UNNORMALIZE
NTEGER PART      00790002         BZ    CEIL2               IF INTEGER P
, RETURN ZERO    00800002         LTDR  #F0,#F0             If nuˇ
ive                00810002         BNP   NOADJUST             and
                   00820002         CDR   #F0,#F2               integer
 equal to orig $   00830002         BE    NOADJUST               then (n
ˇ
EILING by +1         00850002         B     NOADJUST
                     00860002         SPACE 1
               ˇ
OR                     00880002         SPACE 1
                       00890002         AW    #F2,W0              UNNORM
 GET INTEGER PART      0090000ˇ
ART ZERO, RETURN ZERO    00910002         LTDR  #F0,#F0             If n
 negative                00920002         BNM   NOADJUST             and
                         00930002         LPDˇ
lute value's               00940002         CDR   #F4,#F2
part not equal to orig $   00950002         BE    NOADJUST
eg with fractional part)   00960002         AW    #F2,W1    ˇ
st for FLOOR by -1           00970002******** B     NOADJUST
                             00980002         SPACE 1
                             00990002NOADJUST DS    0H
                               01000002         STD   #F2,ZLCWORK
INTO WORKAREA                  01010002         CLC   ZLCWORK(4),W0
SN'T START WITH 4E000000       01020002         BNE   FLT2BIG
O FLOAT-TOˇ
                                 01040002         ICM   #2,15,ZLCWORK+4
 GET INTEGER PART INTO REGISTER  01050002         BM    FLT2BIG
T 7FFFFFFF, MUST BE BIGNU+
 ORIGINAL NUMBER WAS NEˇ
THEN                                 01080002         LCR   #2,#2
 MAKE THIS ONE NEGATIVE              01090002         SPACE 1
                                     0ˇ
  MAKE A FIXNUM FROM FLOAT             01110002         LA    #0,20(,#11
  SET STACK LOCATION FOR CONS          01120002         #MKAT FIXED
  MAKE A FIXED ATOM                    01130002      ˇ
    RETURN IT                            01140002         SPACE 1
                                         01150002CEIL2    DS    0H
    Process zero for CEILING             01160002         LTDR  #F0,ˇ
      If original flonum was not positive  01170002         BNP   RET0
      then return fixnum zero              01180002         LA    #15,#S
      Else get fixnum 1                    01190002         B     RETURN
   ˇ
                                             01210002FLOOR2   DS    0H
        Process zero for FLOOR               01220002         LTDR  #F0,
        If originaˇ
          then return fixnum zero              01240002         LA    #1
          Else get fixnum -1                   01250002         B     RE
          and return it          ˇ
                                                 01270002RET0     DS
            Process zero for TRUNCATE and ROUND  01280002         LA
0           Get fixnum zero                     ˇ
              and return it                        01300002         SPAC
                                                   01310002FLT2BIG  DS
              Float-to-bignum conversion           01320002    ˇ
                                                     01330002         LT
#F0             If original float negative           01340002         BN
NFIX            and                                  01350002         CL
CWORK(8),=X'4E00000080000000' abs(val) = 2147483648    01360002
TMNFIX            then                                 01370002
5,MTWO31           get fixnum -2147483648              01380002
TURN         ˇ
0H                  Else a real bignum                   01400002
1                                                        01410002
##TYPE(#15),##DFLOAT        ˇ
  DFLT2BIG            If double, go convert double to big  01430002
E 1                                                        01440002*****
******************************************* *************** 01450002ˇÁ

002* Single-float-to-bignum conversion logic:  Since we are dealing with
002* single-precision flonums, a flonum that is larger than the
002*ˇ
90002* Therefore, we view the equivalent (bignum) integer as a number of
00002* bits where N is 4*(characteristic-64), of which the leftmost 24
10002* bits are theˇ
1520002*
1530002* Logically, we add 0-bits on the left until the number of bits i
1540002* multiple of 31.  In realiˇ
 01550002* 24-bit mantissa into a register pair, left justified, and rig
 01560002* shifting it by the difference between N and the next higher
 01570002* multiple of 31.                       ˇ
 * 01580002*
 * 01590002* Call the new number of bits B.  We allocate a bignum of B/3
 * 01600002* and make the register pair the 2 most significant wˇ
   * 01610002*
   * 01620002* Then check the sign of the original flonum, and pass it o
   * 01630002* the bignum.

     * 01650002*********************************************************
****** 01660002         SPACE 1
       0167000ˇ
         01680002*                                  #15 -> arg 1
         01690002*                                  #F0 = single float v
         01700002*           ˇ
           01710002         LPER  #F2,#F0             #F2 = abs (single
lue)       01720002         STE   #F2,ZLCWORK         Store flonum value
           01730002         XR    #0,#0     ˇ
             01740002         XR    #1,#1
             01750002         XR    #6,#6               Clear register p
             01760002         XR    #7,#7                  ˇ
               01770002         ICM   #6,B'1110',ZLCWORK+1 Load mantissa
gister pair    01780002         SRL   #6,2                Pretend it's a
register pair  01790002         IC    #1,ZLCWORK          Get characteri
                 01800002         SH    #1,=H'64'           Convert from
64 notation      01810002         SLA   #1,2                Multiply by
 # of bits       01820002         D     #0,=F'31'           #0 = remaind
 quotient+
 of bigˇ
zero,                01850002         BZ    NOREM                then by
ft                   01860002         LA    #1,1(,#1)           Else inc
uotient by 1         0ˇ
amount                 01880002         SR    #14,#0               = 31
mainder                01890002         SRDL  #6,0(#14)           Shift
 right by this amount  01900002NOREM ˇ
                         01910002         SLDL  #6,1                Conv
it register pair to      01920002         SRL   #7,1                 a p
igits                    01930002         LTR   #6,#ˇ
t bigit is zero,           01940002         BNZ   NBZERO              th
                           01950002         SLDL  #6,32                s
#7, #7 = zeroes            01960002         BCTR  #1,0             ˇ
uce bignum word count by 1   01970002NBZERO   DS    0H
                             01980002         LTR   #1,#1
gnum word count              01990002         BNP   DISASTER
atˇ
nt = 1                         02010002         BNE   BNOT1
.                              02020002         LTR   #7,#7
st have at least ˇ
e disaster                       02040002         LR    #2,#6
d value                          02050002         #MKAT FIXED
e a fixnum out of it            ˇ
nd return                          02070002BNOT1    DS    0H
                                   02080002         LR    #2,#1
t number of words for bignum       02090002    ˇ
Multiply by 4 to get # of bytes      02100002         LR    #3,#2
Save this length                     02110002         LA    #2,##VECDAT(
Add header length                    02120002         L     #1ˇ
  Get address of ZILBIG                02130002         #BASR #14,#15
  Call ZILBIG to allocate a bignum     02140002         STCM  #3,7,1(#15
  Store length                         02150002*
                                         02160002* We can use an EX here
, at least for single-precision          02170002* flonums, the bignum l
n't ever get anywhere near 256 bytes.    02180002*
            ˇ
      Get bignum text length               02200002         BCTR  #14,0
      Reduce for execute                   02210002         EX    #14,CL
      Clear bignum text to  zeroes          02220002ˇÁ
  #1,##VECDAT(#3,#15) Point to end of bignum               02230002
  #1,=H'8'            Bump back to two MSW's               02240002
  #6,4(,#1)           Store left half of reg into MSW      02250002 ˇ
    #7,0(,#1)           Store right half of reg into (M-1)SW 02260002
ACE 1                                                        02270002
ER  #F0,#F0             If original bignum was negative      02280002
M  ˇ
CLC   0(12,#15),TWO31      if bignum so far is 2**31           02300002
BNE   BNEG                 then...                             02310002M
DS    0H          ˇ
  LA    #15,MTWO31            return -2147483648                 0233000
  B     RETURN                                                   0234000
  DS    0H                  else ˇ
    OI    ##VECDAT(#15),X'80'  turn on negative sign bit           02360
RN  DS    0H                                                       02370
    LA    #1,##VECDAT(#3,#15) Get address of endˇ
      ST    #1,ZLCVSNXT         Update VSS pointer                   023
      B     RETURN              Return with it                       024
      EJECT                                                    ˇ
FLT2BIG DS    0H                                                       0
        SPACE 1                                                        0
********************************************************************** 0
2*                                                                     *
2* Double-float-to-bignum conversion logic:  This is similar to        *
2* the single-float-to-bignum conversion above, but is different       *
2* in that, fˇ
002* in a double-float, it is possible for there to be a fractional part
002* with an integer part that is more than 31 bits.  Therefore, we must
002* work with the unnormaliˇ
10002* into two cases, then.
20002*
30002* In case 1, the value after adding unˇ
2540002* characteristic, meaning that the entire contents of the floatin
2550002* point register is the integer part as is.  If so, we can just b
2560002* a two-word bignum and dump the mantissa into it. ˇ
 02570002*
 02580002* In case 2, the characteristic is greater than X'4E', meaning
 02590002* there are implied low-order zero bits in the integer part.  W
 * 02600002* compute the shift value to get the number of bits to be a ˇ
e  * 02610002* of 31, as above, but in this case we have to process 3 wo
   * 02620002* integer instead of 2.  For a single-precision flonum, the
   * 02630002* number of "visible" bits is 24+30 = 54, which fits into 2
   * 0ˇ
bits * 02650002* is 56+30 = 86, which fits into 3 words.  Therefore, we
     * 02660002* simulate a triple shift.
     * 02670002*     ˇ
       * 02680002* Note that a characteristic less than X'4E' is not pos
ue to  * 02690002* the unnormalized zero add.
       * 02700002*                  ˇ
         * 02710002* As above, we view the equivalent (bignum) integer a
er of N  * 02720002* bits where N is 4*(characteristic-64), of which the
t 56     * 02730002* bits are the mantissa and the ˇ
ro.        * 02740002*
           * 02750002* Logically, we add 0-bits on the left until the nu
bits is a  * 02760002* multiple of 31.  In reality, we accomplish ˇ
ing the      * 02770002* 56-bit mantissa into a register triple, left ju
 and right   * 02780002* shifting it by the difference between N and the
gher         * 02790002* multiple of 31.  We can implement the triple sh
sˇ
erlap.         * 02810002*
               * 02820002* Call the new number of bits B.  We allocate a
of B/31 words  *ˇ
 words thereof.  * 02840002*
                 * 02850002* If the high-order word of the bignum ends u
reduce the       * 02860002* leˇ
                   * 02870002*
                   * 02880002* Then check the sign of the original flonu
ass it on to       * 02890002* the bignum.    ˇ
                     * 02900002*
                     * 02910002*****************************************
********************** 02920002         SPACE 1              ˇ
                         02930002*
                         02940002*                                  #F0
 float value             02950002*                                  #F2
 unnormalized integer part 02960002*                                  ZL
contents of #F2            02970002         SPACE 1
                           02980002         CLI   ZLCWORK,X'4E'
                            02990002ˇÁ
      If 4E, simple 56-bit bignum          03000002         BH    CASE2
      If higher, time to shift             03010002         BL    DISAST
      Can't be lower - can it???           03020002 ˇ
                                             03030002CASE1    DS    0H
                                             03040002         SPACE 1
                                             03050002**************ˇ
********************************************** 03060002*
                                             * 03070002* In case 1, the
ter adding unnormalized zero has an X'4E'    * 03080002* characteristic,
 tˇ
 integer part as is.  If so, we can just build * 03100002* a two-word bi
 dump the mantissa into it.                    * 03110002*
                 ˇ
************************************************** 03130002         SPAC
                                                   03140002* Note that t
of -2**31 was handled above.    ˇ
ixnums.)                                             03160002         SP
                                                     03170002         LM
7,ZLCWORK       Load mantissa parts            ˇ
,8                Shift out characteristic             03190002
,7                Shift back, but not sign bit of #7   03200002
,1                Shift right register correctly       0321000ˇ
0H                                                       03220002
#2,##VECDAT+8       Set size for a 2-word bignum         03230002
#15,ZLCBIG          Get address of ZILBIG                03240002
R #14,#15             Call ZILBIG to allocate a bignum     03250002
  1(3,#15),=AL3(8)    Set bignum length                    03260002
  #7,##VECDAT+0(#15)  Store low-order word                 03270002
  #6,##VECDAˇ
DR  #F0,#F0             If original bignum was negative      03290002
M   C1RETURN            then...                              03300002
    ##VECDAT(#15),X'80'  tuˇ
DS    0H                                                       03320002
LA    #1,##VECDAT+8(,#15) Get address of end of bignum         03330002
ST    #1,ZLCVSNXT         Update VSS pointˇ
  B     RETURN              Return with new bignum               0335000
  SPACE 1                                                        0336000
  DS    0H                                               +
    SPACE 1                                            ˇ
******************************************************************** 033
                                                                   * 034
n case 2, the characteristic is greater than X'4E', meaning that   * 0ˇ
 there are implied low-order zero bits in the integer part.          * 0
                                                                     * 0
********************************************************************** 0
     ˇ
2*
2* If the flonum has 62 bits or less in it already, make a 2-word bignum
2*                  ˇ
002         CD    #F2,=X'503FFFFFFFFFFFFF'
002         BH    C2WORD3
002         LM    #6,#7,ZLCWORK    ˇ
10002         SLDL  #6,8                Shift out characteristic
20002*
30002* We know that the characteristic is greater ˇ
3540002* only X'4F' or X'50'.  If it is X'50', we already shifted left 8
3550002* to get rid of the characteristic.  If it is X'4F', we counterac
3560002* that by shifting right 4, because we want a shifted-leftˇ
 03570002*
 03580002         CLI   ZLCWORK,X'4F'
 03590002         BNE   C22SHIFT
ˇ
   03610002C22SHIFT DS    0H
   03620002         SLDL  #6,1                Convert to bigits
   03630002    ˇ
     03640002         B     C1BIGNUM            Go make a 2-word bignum
     03650002         SPACE 1
     03660002C2WORD3  DS    0Hˇ
um...  03670002         SPACE 1
       03680002         XR    #0,#0               Clear register pair
       03690002         XR    #1,#1          ˇ
         03700002*
         03710002* First we construct a 93-bit number, since that will t
 into    03720002* a 3-bigit bignum.  Thus we left-justify tˇ
bits.      03730002*
           03740002         LM    #6,#7,ZLCWORK       Load mantissa into
r pair     03750002         SLDL  #6,8                Shift out characte
             03760002ˇÁ
gh-order zero bits         03770002         IC    #1,ZLCWORK          Ge
teristic                   03780002         SH    #1,=H'64'           Co
om excess-64 notation      03790002 ˇ
 by 4 to get # of bits       03800002         D     #0,=F'31'
ainder, #1 = quotient        03810002*
 be number of bignum words)  03820002         LTR  ˇ
ainder is zero,                03830002         BZ    C2NOREM
bypass shift                   03840002         LA    #1,1(,#1)
ncrement quotient by 1         03850002         LA    #14,31      ˇ
ute shift amount                 03860002         SR    #14,#0
1 minus remainder                03870002*
                                 03880002* Shift mantissa right by the a
dˇ
triple is contained in             03900002* registers #6+#7+#5.
                                   03910002*
                ˇ
Load into second register pair       03930002         XR    #5,#5
Clear other half of register pair    03940002         SRDL  #6,0(#14)
Shift right by amount          ˇ
  Shift right by amount                03960002C2NOREM  DS    0H
                                       03970002*
                                       0398000ˇ
e to 3 "bigits".                         03990002*
                                         04000002         SLDL  #6,2
                                         04010002         SRLˇ
                                           04020002         LR    #4,#7
                                           04030002         SLDL  #4,1
                                           04040002         SRL   #5,1
                                             04050002         LR    #3,#
                                             04060002*
                                             04070002* The bigits are co
in the regiˇ
                                               04090002         LTR   #3
          If leftmost bigit is zero,           04100002         BNZ   C2
          then...         ˇ
             set #3 = #4                         04120002         SLDL
             set #4 = #5, #5 = zeroes            04130002         BCTR
             reduce bignum length by 1   +
                                       ˇ
H'3'            If bignum length is not at least 3   04160002         BL
STER            then something is wrong.             04170002         ST
5,C2SAVE        Store contents                       0ˇ
,#1               Get number of words for bignum       04190002
,2                Multiply by 4 to get # of bytes      04200002
,#2               Save this length                     04210002      ˇ
#2,##VECDAT(,#2)    Add header length                    04220002
#15,ZLCBIG          Get address of ZILBIG                04230002
#14,#15             Call ZILBIG to allocate a bignum     04240002
#3,7ˇ
                                                           04260002* We
an EX here because, at least for double-precision          04270002* flo
e bignum length wonˇ
                                                             04290002
    #14,#3              Get bignum text length               04300002
TR  #14,0               Reduce forˇ
EX    #14,CLEARBIG        Clear bignum text to zeroes          04320002
LA    #1,##VECDAT(#3,#15) Point to end of bignum               04330002
LM    #5,#7,C2SAVE        Get bignum contents    ˇ
  SH    #1,=H'12'            Bump back to three MSW's            0435000
  ST    #5,8(,#1)            Store MSW                           0436000
  ST    #6,4(,#1)           Store (M-1)SW                       ˇ
    ST    #7,0(,#1)           Store (M-2)SW                        04380
IGN DS    0H                                                       04390
    LTDR  #F0,#F0             If original bignum was negative      04400

      OI    ##VECDAT(#15),X'80'  turn on negative sign bit           044
ETURN DS    0H                                                       044
      LA    #1ˇ
        ST    #1,ZLCVSNXT         Update VSS pointer                   0
******* B     RETURN              Return with it                       0
        SPACE 1              ˇ
2RETURN   DS    0H
2         SPACE 1
2         #ZRET ,                   RESTORE ˇ
002         SPACE 1
002C2SAVE   DS    3A
002         SPACE 1                                        
30002ˇÁ
r bignum   04540002         SPACE 1
           04550002         DS    0D
           04560002Wˇ
t zero       04570002W1       DC    X'4E00000000000001' Unnormalized dou
t one        04580002DHALF    DC    D'0.5'              1/2 to add for r
             04590002         SPACEˇ
               04600002MTWO31   #IATM -2147483648         Most negative
               04610002         SPACE 1
               04620002TWO31    DC    YL1(##BIGNUMˇ
1                04630002         SPACE 1
                 04640002ERROR1   DS    0H                  NOT A NUMERI
                 04650002         L     #14,4(,#11)              ˇ
                   04660002         L     #14,##CDR(,#14)
                   04670002         L     #2,FUNNAME(#14)
                   04680002         #ERR  'Argument 1 to ',0(#2),' not a
ˇ
                     04700002DISASTER DS    0H
                     04710002         #ERR  'Internal error in ZILFIX co
bignum value foˇ
                       04730002         SPACE 1
                       04740002FUNNAME  DC    A(MSGTRUNC,MSGFLOOR,MSGCEI
ND)                    0475000ˇ
                         04760002         DS    0H,XL1              Alig
 to non-halfword         04770002MSGTRUNC #SATM 'TRUNCATE'
                         04780002         DS ˇ
ng to non-halfword         04790002MSGFLOOR #SATM 'FLOOR'
                           04800002         DS    0H,XL1              Al
ng to non-halfword         04810002MSGCEIL  #SATM 'CEILING' ˇ
                             04820002         DS    0H,XL1
ring to non-halfword         04830002MSGROUND #SATM 'ROUND'
                             04840002         SPACE 1
                               04850002         LTORG
                               04860002         END
                               04870002
'ZILGCD - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
                                                           * 00017002* T
ixnum-by-fixnum GCD, implemented in assembler for speed.   * 00018002*
                ˇ
by GCD2 when both arguments are fixnums only.                * 00020002*
                                                             * 00030002*
*******************************ˇ
                                                               * 0005000
D TAKES TWO ARGUMENTS. BOTH MUST BE INTEGERS.                  * 0006000
                                              ˇ
 OTHER TYPES CAUSE AN ERROR.                                     * 00080
                                                                 * 00090
> BIGNUM ARGUMENTS NOT YET IMPLEMENTED                       ˇ
                                                                   * 001
ALGORITHM FOR FIXNUM ARGUMENTS IS EUCLID'S ALGORITHM.              * 001
SPECIAL BRANCHES ARE NECESSARY TO HANDLE SPECIAL CASES INVOLVING   * 001
  NEGATIVE ARGUMENTS, ZERO ARGUMENTS, AND THE FACT THAT THE          * 0
  ABSOLUTE VALUE OF THE MOST NEGATIVE FIXNUM BECOMES A POSITIVE      * 0
  BIGNUM.                                                            * 0
           ˇ
2*  BASIC IDEA OF EUCLIDS ALGORITHM:                                   *
2*                                                                     *
2*  REM  = MOD(ARG ,ARG ) ˇ
002*     1          1    2
002*
002*  REM  = MOD(ARG ,REM )              ˇ
30002*     2          2    1
40002*
50002*  REM  = MOD(REM ,REM )                           ˇ
0260002*     3          1    2
0270002*
0280002*  REM  = MOD(REM ,REM )                                        +
 00290002*     4 .        2    3                                     ˇ
 * 00300002*       .
 * 00310002*       .
 * 00320002*  (UNTIL REM  = 0, THEN ANSWER IS REM   )
 * 0ˇ
   * 00340002*
   * 00350002***********************************************************
**** 00360002      ˇ
       00370002ZILGCD   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILGCD'
       00380002         #ZPDS 20                  DEFINE STACK SIZE
       00390002         #ZSAV ,   ˇ
         00400002         SPACE
         00410002         LM    #2,#3,0(#11)        LOAD ARGUMENTS
         00420002         CLI   ##TYPE(#2),##FIXNˇ
           00430002         BNE   ERROR1
           00440002         CLI   ##TYPE(#3),##FIXNUM
           00450002         BNE   ERROR2                        ˇ
             00460002*--------------------------------------------------
-----------* 00470002*           FIXNUM BY FIXNUM GCD
           * 00480002*--------------------------------------------------

 SIGN          00500002         BZ    FIXFIX0             ARG2 IS ZERO
               00510002         L     #6,##CDR(,#3)       GET ARG1
              ˇ
IVIDE            00530002         DR    #6,#4               DO FIRST DIV
                 00540002         LPR   #7,#6               TEST FOR ZER
                 00550002    ˇ
VIDE IS ZERO       00560002         SRDA  #4,32               EXTEND SIG
EAR FOR NEXT DIV   00570002         DR    #4,#7               DIVIDE SEC
                   00580002         LPR   #5ˇ
                     00590002         BZ    FFX                 ANSWER I
                     00600002         XR    #6,#6               CLEAR FO
IVIDE                00610002         DR    #6,#5          ˇ
EP                     00620002         SRDA  #6,32               REG 6
7, CLEAR 6 FOR NXT DIV 00630002         BZ    FFY                 ANSWER
5                      00640002         XR    #4,#4               ANSWER
G 5                      00650002         DR    #4,#7               ANOT
STEP                     00660002         SRDA  #4,32               REG
G 5, CLEAR 4 FOR NXT DIV 00670002         BZ    FFX                 ANSW
G 7                       00680002ˇÁ
    ANOTHER GCD STEP                     00690002         SRDA  #6,32
    REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV 00700002         BZ    FFY
    ANSWER IN REG 5                      00710002 ˇ
      ANOTHER GCD STEP                     00720002         SRDA  #4,32
      REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV 00730002         BZ    FFX
      ANSWER IN REG 7                      00740002         DR   ˇ
        ANOTHER GCD STEP                     00750002         SRDA  #6,3
        REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV 00760002         BZ    FFY
        ANSWER IN REG 5                      00770002         DR    #4,#
ˇ
          REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV 00790002         BZ    FF
          ANSWER IN REG 7                      00800002         DR    #6
          ANOTHˇ
            REG 6 ==> REG 7, CLEAR 6 FOR NXT DIV 00820002         BZ
            ANSWER IN REG 5                      00830002         DR
            ANOTHER GCD STEP  ˇ
              REG 4 ==> REG 5, CLEAR 4 FOR NXT DIV 00850002         BNZ
              MUST DO MORE, BUT LET'S SAVE SPACE   00860002FFX      LR
                                             ˇ
D               MAKE A FIXNUM                        00880002         B
RN              AND RETURN WITH IT                   00890002*
                                                     0090000ˇ
,#5                                                    00910002
XED               MAKE A FIXNUM                        00920002
TURN              AND RETURN WITH IT                   00930002*
                                                         00940002FIXFIX0
#7,15,##CDR(#3)     LOAD ARG1 AND TEST SIGN              00950002
FIXMFIX0            ARG2 IS NEGATIVE                     00960002
#15,#3    ˇ
  RETURN                                                   00980002*
                                                           00990002FIXMF
  #2,#7               TAKˇ
    TWO31               ANSWER MUST BE POSITIVE 2**31 BIGNUM 01010002
KAT FIXED               MAKE A FIXNUM                        01020002
    RETURN                              ˇ
                                                               01040002F
LCR   #4,#4                                                    01050002
BC    3,FFD0PO            POSITIVE OR OVERFLOW         +
  LR    #15,#2              RETURN WITH ARG2         ˇ
    B     RETURN                                                   01080
                                                                   01090
O   BO    TWO31               ANSWER MUST BE POSITIVE 2**31 BIGNUM 0ˇ
      LR    #2,#4               MAKE POSITIVE VERSION OF ARG1        011
      #MKAT FIXED               MAKE A FIXNUM                        011
      B     RETURN                                                   011
   ˇ
WO31    LA    #15,#TWO31          RETURN POINTER TO INLINE BIGNUM      0
******* B     RETURN                                                   0
                  ˇ
2RETURN   DS    0H                  RETURN WITH NEW ATOM
2         #ZRET ,                   RESTORE REGISTERS AND RETURN
2*                               ˇ
002         DS    0A                  ALIGN BIGNUM TO FULLWORD
002#TWO31   DC    YL1(##BIGNUM),AL3(8),F'0,1'    2**31 SMALLEST BIGNUM
002         SPACE 1                             ˇ
30002ERROR1   DS    0H                  NOT A FIXNUM
40002         #ERR  'Argument 1 to ZILGCD not a fixnum - ',0(#11)
50002         SPACE 1                                          ˇ
1260002ERROR2   DS    0H                  NOT A FIXNUM
1270002         #ERR  'Argument 2 to ZILGCD not a fixnum - ',4(#11)
1280002         SPACE 1
 01290002         LTORG
 01300002         END
 01310002{
ROUTINE'                     00010000***********************************
**************************** 00011003*
                           * 00012003*ˇ
ark Draper Laboratory Inc.   * 00013003*                     All rights
.                            * 00014003*
                             * 00015003**************ˇ
******************************** 00016003*
                               * 00017003* THIS ROUTINE IS INVOKED BY RE
EADCH.  THE INTERFACE IS       * 00018003* NON-STANDARD, AS FOLLOWS:ˇ
                                 * 00019003*
                                 * 00020003*     L    2,=V(ZILGETC)
                                 * 00030003*     BALR 14,2
   ˇ
                                   * 00050003* ZILGETC RETURNS ONE CHARA
M THE INPUT FILE POINTED TO BY     * 00060003* REGISTER 7.  IT HANDLES A
 FILE I/O.  ON ENTˇ
POINTER (CONTENTS OF ZLFCHAR),       * 00080003* AND ON RETURN REGISTER
NS THE ADDRESS OF THE ACTUAL         * 00090003* CHARACTER RETURNED, UNL
INE OR EOF IS ENCOUNTERED.       ˇ
                                       * 00110003* ON RETURN REGISTER 3
 ONE OF THE FOLLOWING:                 * 00120003*
                                       * 0013000ˇ
ERED                                     * 00140003*    EQ 0 ... EOF ENC
                                         * 00150003*    GT 0 ... CURRENT
ER POINTER (REGISTER 6 POINTS TO IT)     * 00160003*           ˇ
                                           * 00170003* NOTE THAT FOR EFF
S SAKE, THIS ROUTINE DOES NOT UPDATE       * 00180003* ZLFCHAR ITSELF (U
NEW LINE IS READ).  THE CALLER IS          * 00190003* RESPONSIBLE FOR M
NING THE CORRESPONDENCE BETWEEN REGISTER 3   * 00200003* AND ZLFCHAR AT
S.                                           * 00210003*
                                             * 00220003* ALSO NOTE THAT
TINE DOES NOTˇ
BY THE READ AND READCH ROUTINES.  THE STATUS   * 00240003* OF THE VALUE
N TO THE CALLER IS DETERMINED BY THE SIGN OF   * 00250003* ZLFCHAR, I.E.
R 3.                        ˇ
                                                 * 00270003* THIS ROUTIN
EGS 2 (RETURN), 3, 6.                            * 00280003* NOTE THAT R
ST BE PRESERVED ACROSS A CALL TO THIS ROUTI+
 MAY BE HOLDING A RETURN VALUE IN IT.    ˇ
                                                     * 00310003*********
****************************************************** 00320003*
                                                     * 0ˇ
W THAT WE HAVE SUPPORT FOR COMMONALITY OF TERMINAL I/O * 00340003*
 CAN IMPLEMENT THIS ENHANCEMENT:  IF THERE IS PENDING  * 00350003*
RMINAL OUTPUT (PRIN1), WE DO A TPUT ASIS TO SEND IT    * 00360003*     ˇ
OUT WITHOUT A CARRIAGE RETURN.  GIVES NICE PROMPT DATA.  * 00370003*
                                                         * 00380003*****
********************************************************** 00390003*
      ˇ
************************************************************ 00410003*
                                                           * 00420003* C
tivity:              ˇ
                                                             * 00440003*
88 - Fix problem of putting out TPUT ASIS prompts even when  * 00450003*
     an input-longer-than-80-charactˇ
                                                               * 0045200
**************************************************************** 0045300
                                                   ˇ
    GBLB  &ZILXA                                                   00455
    #ZSYS                                                          00456
    EJECT                                                         ˇ
      #ZEQU ,                                                        004
      EJECT                                                          004
      #ZCOM ,                                                        004
 ˇ
        EJECT                                                          0
        USING ZILGETC,#2          ESTABLISH BASE REGISTER              0
        USING ZLˇ
3         #ZUSING ,                 ESTABLISH ADDR'Y TO COMMON & SFT
3         EJECT
3ZILGETC  CSECT ,              ˇ
003         SPACE 1
003         LTR   #6,#3               TEST CURRENT CHARACTER POINTER
003         BM    GET                 IF NEWLIˇ
60003         BZR   #14                 IF EOF, RETURN WITHOUT READING
70003*                                  ELSE CONVERT CHARACTER POINTER
80003         A     #6,ZLFCARD          FROM RELATIVE COLUMN  TO ABSOLU
0590003ˇÁ
 BY 1        00600003         C     #6,ZLFEND           IF NOT AT END OF
YET          00610003         BLR   #14                 THEN PROCESS THI
ELSE...      00620003Gˇ
..             00630003         TM    ZLFFLAG2,ZLFTGT12   IF TERMINAL AN
GET INCOMPLETE 00640003         BO    GET                 THEN DO ANOTHE
NO NEWLINES)   00650003         XR   ˇ
OINTER TO -1     00660003         BCTR  #3,0                (NEGATIVE VA
S NEWLINE)       00670003         BR    #14                 AND RETURN W
 VALUE.          00680003         SPACE 2           ˇ
                   00690003GET      DS    0H                  GET AN INP
D                  00700003         SPACE 1
                   00710003         STM   #14,#7,ZLCSAVE2     SAVE ˇ
GISTERS              00720003         TM    ZLFFLAG1,ZLFTERM    IF INPUT
 TERMINAL            00730003         BZ    NOTTERM             THEN
                     00740003*
  ˇ
E IS ANY PENDING       00760003* TERMINAL OUTPUT THEN WE SEND IT TO THE
 WITHOUT A CARRIAGE    00770003* RETURN SO THAT THE FOLLOWING READ HAS T
R POSITIONED ON Tˇ
                         00790003*
                         00800003         TM    ZLFFLAG2,ZLFTGT12   If c
g an incomplete TGET     0081000ˇ
                           00820003         LR    #5,#7               SA
ILE BLOCK ADDRESS          00830003         ICM   #7,15,ZLCOFTRM      @
 OUTPUT FILE BLOCK         00840003         BZ ˇ
 SKIP                        00850003         TM    ZLFFLAG1,ZLFNEWLN
TA WAITING TO BE PRINTED     00860003         BZ    NOWRITE
P                            00870003         L     #1,ZLFCARDˇ
DRESS OF OUTPUT BUFFER         00880003         L     #14,ZLFCHAR
RRENT CHARACTER POSITION       00890003         BCTR  #14,0
CT 1 TO CONVERT TO LENGTH      00900003         LTR   #0,#14
ENGTH ZERO OR LESS               00910003         BNP   NOWRITE
 SKIP                            00920003         BCTR  #14,0
 REDUCE LENGTH FOR EXECUTE       00930003         L     #15,ZLCTRMTR
TERMINAL OUTˇ
ANSLATE THE OUTPUT LINE            00950003         #TPUT *,(1),(0),ASIS
UT WITHOUT CARRIAGE RETURN         00960003         LA    #0,1
T CHARACTER POSITION       +
TO ONE                   ˇ
WLN CLEAR NEW LINE INDICATION          00990003         LA    #15,X'40'
  SOURCE LENGTH = 0                    01000003         SLL   #15,24
  FILL = BLANK                         0ˇ
    SOURCE = NULL                        01020003         LH    #1,ZLFLR
    LENGTH = LENGTH OF OUTPUT AREA       01030003         L     #0,ZLFCA
    TARGET = OUTPUT AREA                 01040003      ˇ
      CLEAR OUTPUT AREA TO BLANKS          01050003NOWRITE  DS    0H
                                           01060003         LR    #7,#5
      RESTORE OUR FILE BLOCK ADDRESS       01070003NOWRITEA DS    0H  ˇ
                                             01080003*
                                             01090003* OK, GO AHEAD AND
M THE TERMINAL.                              01100003*
     ˇ
55-ZLFTGT12 CLEAR INCOMPLETE-TGET FLAG         01120003TGETRTRY DS    0H
                                               01130003*
                    ˇ
ssary due to bug in PIE/Sessions PA2 processing  01150003*
                                                 01160003         XC
80),ZLFLINE  CLEAR TGET INPUT BUFFEˇ
                                                   01180003         TGET
E,80           DO A TGET                           01190003         CH
'8'            IF TGET RC WAS 8 (ATTENTION)       ˇ
RTRY             THEN RETRY THE TGET                 01210003         ST
LFLRECL          STORE COUNT OF TGOTTEN INPUT DATA   01220003         LT
1                IF DATA LENGTH IS NONZERO,          01230003    ˇ
TGTRAN             THEN...                             01240003
,0                  REDUCE LENGTH FOR EXECUTE          01250003
,INTRANS            TRANSLATE TERMINAL INPUT           01260003NOTGTRAN
ˇ
#15,=H'12'           IF TGET RC WAS 12 (DATA PENDING)    01280003
NOTRC12              THEN                                01290003
ZLFFLAG2,ZLFTGTˇ
  0H                   ELSE ASSUME TGET WAS OK             01310003
  #1,15,ZLCDRIBL       IF THERE'S A DRIBBLE FILE           01320003
  NODRIBI              THEN...ˇ
F   (NOT &ZILXA).SKIP1                                       01340003*--
-----------------------SWITCH FROM CURRENT AMODE TO AMODE 24 01350003
    #15,PUT24           ADDRESS OF THIS CODE                  01360003ˇ
±ß
70003         BSM   #4,#15
80003PUT24    DS    0H
90003*ˇ
1400003.SKIP1   ANOP
1410003         ST    #9,ZLCISV09           SAVE ZIL REGS
1420003         OI   ˇ
 01430003         PUT   (1)                   DO PUT LOCATE
 01440003         NI    ZLCIFLGS,255-ZLCISYS
 01450003         AIF   (NOT &ZILXA)ˇ
   01460003*---------------------------------SWITCH FROM AMODE 24 TO CUR
DE 01470003         BSM   0,#4
   01480003PUT24E   DS    0H                       ˇ
     01490003*---------------------------------THE AMODE IS NOW SAME AS
     01500003.SKIP2   ANOP
     01510003         TM    ZLCIFLGS,ZLCIATTN    IF ATTENTION INTEˇ
ED     01520003         BOR   #13                  THEN GO TO HANDLE IT
       01530003         MVC   0(80,#1),ZLFLINE      MOVE DATA TO DRIBBLE
BUFFER 01540003NODRIBI  DS    0H
 ˇ
         01560003         LH    #0,ZLFLRECL          CHECK LENGTH OF INP
TERMINAL 01570003         LTR   #0,#0                IF INPUT FROM TERMI
ULL      0158000ˇ
 INPUT)    01590003         LA    #3,1                 ELSE SET CHARACTE
 = 1       01600003         B     GETSET               GO SET REST OF FI
ETERS      01610003NOTTERM  DS ˇ
             01620003         TM    ZLFFLAG1,ZLFSTART    IF FIRST RECORD
 WAS READ    01630003         BZ    NOTGOT1              THEN SKIP THIS
             01640003         NI    ZLFFLAG1,2ˇ
D-READ FLAG    01650003         L     #1,ZLFREC1            GET ADDRESS
RECORD         01660003         B     GOT1                 AND SKIP THIS
               01670003NOTGOT1  DS    0H                  ELSˇ
                 01680003         LA    #1,GETEODAD          ADDRESS OF
ILE ROUTINE      01690003         STCM  #1,7,ZLFDCB+33       SET EODAD R
DDRESS IN DCB    01700003         AIF   (NOT &ZILXA).SKIP3
                   01710003         LA    #15,GETSET           GET ADDRE
F CONTINUATION     01720003         BSM   #15,0                ROUTINE A
HE CURRENT AMODE   01730003         ST    #15,AGETSET          STORE THI
           +
         ˇ
                       01760003*---------------------------------SWITCH
RENT AMODE TO AMODE 24 01770003         LA    #15,GET24           ADDRES
S CODE                 0ˇ
SS                       01790003         BSM   #4,#15
                         01800003GET24    DS    0H
                         01810003*-----ˇ
S NOW 24                   01820003.SKIP4   ANOP
                           01830003         ST    #9,ZLCISV09          S
REGS                       01840003         OI    ZLCIˇ
E NON-ZIL CODE RUNNING       01850003         LA    #1,ZLFDCB
T LOCATE                     01860003         GET   (1)
ECORD, GET LOCATE MODE       01870003         NI    ZLCIFLGS,255-ZLCIˇ
                               01880003         AIF   (NOT &ZILXA).SKIP5
                               01890003*--------------------------------
FROM AMODE 24 TO CURRENT AMODE 01900003         BSM   0,#4
    ˇ
                                 01920003*------------------------------
MODE IS NOW SAME AS ON ENTRY     01930003.SKIP5   ANOP
                   ˇ
F ATTENTION INTERRUPT OCCURRED     01950003         BOR   #13
HEN GO TO HANDLE IT                01960003GOT1     DS    0H
                                  ˇ
 SET CHARACTER COLUMN = 1            01980003         TM    ZLFFLAG2,ZLF
 IF RECFM=V(B)...                    01990003         BZ    SEEIFU
 THEN...                             02000003    ˇ
    PICK UP CURRENT RECORD LENGTH      02010003         LA    #15,4
    LENGTH OF RDW TO SUBTRACT          02020003         TM    ZLFFLAG2,Z
    IF FILE IS LINE NUMBERED           02030003         BZ    NOˇ
      THEN...                            02040003         LA    #15,8(,#
       ADD 8 FOR LINE NUMBER FIELD       02050003NOTLN    SR    #0,#15
      COMPUTE LENGTH OF TEXT IN RECORD   02060003         STH   #0,ZLFLR

        IF NO TEXT, IGNORE THIS RECORD     02080003         AR    #1,#15
        BUMP POINTER UP TO TEXT            02090003         B     GETSET
        GO TO ˇ
         VARIABLE-LENGTH RECORD TOO SHORT... 02110003         L     #3,#
         SET CURRENT CHARACTER POINTER TO -1 02120003*
         (NEGATIVE VALUE MEAN S NEWLINE)      02130003ˇÁ
    GETSET              GO SET REST OF FILE PARAMETERS       02140003
ACE 1                                                        02150003SEE
    0H                  RECFM NOT V, MAYBE IT'S U            02160003 ˇ
TM    ZLFFLAG2,ZLFRECU    IF RECFM = U                         02170003
BZ    GETSET              THEN...                              02180003
LH    #0,ZLFDCB+82         GET DCB LRECL                       02190003
STH  ˇ
  B     GETSET                                                   0221000
  SPACE 1                                                        0222000
D DS    0H          ˇ
                              NOTE: THIS GETS CONTROL IN AMODE24!  02240
    NI    ZLCIFLGS,255-ZLCISYS RESET NON-ZIL-CODE RUNNING FLAG     02250
    XR    #1,#1               CLEARˇ
      XR    #3,#3               CLEAR CHARACTER POINTER              022
      AIF   (NOT &ZILXA).SKIP6                                       022
      L     #15,AGETSET         GO SET REST OF FILˇ
        BSM   0,#15               (RETURNING TO AMODE OF CALLER)       0
GETSET  DS    A                   POINTER DEFINED LINKAGE FOR GETSET   0
SKIP6   ANOP                                                     ˇ
3         SPACE 1
3GETSET   DS    0H                  GET EITHER WORKED OR DIDN'T
3         SPACE 1
ˇ
003         BOR   #13                  THEN GO TO HANDLE IT
003         SPACE 1
003* AT THIS POˇ
90003* AT THIS POINT #3 = CURRENT CHARACTER POINTER (0=EOF, -1=NEWLINE)
00003         SPACE 1
10003         LR    #6,#1     ˇ
2420003         ST    #6,ZLFCARD          SET ADDRESS OF RECORD
2430003         ST    #3,ZLFCHAR          SET ADDRESS OF RECORD
2440003         LH    #0,ZLFLRECL         GETˇ
 02450003         ALR   #0,#6               ADD RECORD ADDRESS
 02460003         ST    #0,ZLFEND           GIVING ADDRESS OF END OF REC
 02470003         SPACE 1                                   ˇ
   02480003*
   02490003* CODE ADDED 11/17/86 TO SUPPORT ECHO FILES
   02500003*
     02510003         LTR   #6,#6               IF NO INPUT RECORD (E.G.
       02520003         BNP   NOECHO              THEN NO ECHO
       02530003         ICM   #0,15,ZLFECHO       GET ECHO FILE BLOCK
       02540003         BZ    NOECHO              IF NONE, NO ECHO
       0ˇ
         02560003         LR    #7,#0               GET ECHO FILE BLOCK
         02570003         TM    ZLFFLAG2,ZLFOPEN    IF ECHO FILE IS NOT
         02580003      ˇ
           02590003         TM    ZLFFLAG1,ZLFTERM    IF OUTPUT IS TO TE
           02600003         BZ    OKTOECHO             AND
           02610003         TM    ZLFFˇ
 TERMINAL    02620003         BZ    OKTOECHO               THEN
             02630003         TM    ZLFFLAG2,ZLFETIO        IF NOT OK TO
RM-TO-TERM   02640003         BZ    NOECHO2          ˇ
               02650003OKTOECHO DS    0H
               02660003         LH    #1,ZLFLRECL         GET OUTPUT REC
TH             02670003         L     #0,ZLFCHAR          GET CURRENˇ
HAR POSITION     02680003         BCTR  #0,0                CONVERT FROM
TO OFFSET        02690003         SR    #1,#0               OUTPUT LENGT
ING              02700003         A     #0,ZLFCARD          ADD RECORD A
TIOˇ
 DATA IN OUTPUT    02720003         BZ    NOASIS              THEN
                   02730003         AH    #0,=H'1'             BUMP OUTP
NATION UP BY 1    ˇ
GTH DOWN BY 1        02750003NOASIS   DS    0H
                     02760003         LR    #14,#6              INPUT AD
                     02770003    ˇ
                       02780003         SLL   #15,24
                       02790003         AH    #15,ZLFLRECL-ZLFILBLK(,#5)
ENGTH                  02800003MOVELOOP DS    0Hˇ
                         02810003         LTR   #1,#1               IF L
 BE MOVED NOT POSITIVE   02820003         BNP   SKIPMVCL            THEN
VE. ELSE                 02830003         MVCL  #0,#14         ˇ
FROM INPUT TO OUTPUT       02840003         S     #0,ZLFCARD          AD
 END OF MOVED DATA MINUS   02850003         AH    #0,=H'1'             S
S 1                        02860003         ST    #0,ZLFCHAR
NEW CHARACTER POSITION       02870003SKIPMVCL DS    0H
                             02880003         CLM   #15,B'0111',=X'00000
L TO BE MOVED WAS MOVED      02890003         BE    MOVEDONE
ISHED. ELSE.. .               02900003ˇÁ
MVCL    SAVE OTHER PARAMETERS                02910003         L     #15,
        GET ADDRESS OF ZILTERP               02920003         #BASR #14,
        CALL ZILTERP TO PRINT THE NEW LINE   02930003 ˇ
2+16      RELOAD BASE REGISTER                 02940003         LM    #1
VEMVCL    GET MVCL REGISTERS                   02950003         L     #0
          GET NEXT NEW OUTPUT ADDRESS          02960003         LH   ˇ
ECL         GET NEXT NEW OUTPUT LENGTH           02970003         B
            GO MOVE SOME MORE DATA               02980003MOVEDONE DS
            WHEN FINISHED MOVING DATA...         02990003         L
ERP ˇ
5             CALL ZILTERP TO PRINT THE NEW LINE   03010003         L
SAVE2+16      RELOAD BASE REGISTER                 03020003NOECHO2  DS
                   ˇ
5               RESTORE OUR FILE BLOCK ADDRESS       03040003         L
LFCARD          GET ADDRESS OF RECORD                03050003         L
LFCHAR          GET ADDRESS OF RECˇ
                                                       03070003*
                                                       03080003* END ECH
                                                 ˇ
                                                         03100003
1                                                        03110003
#14,#2,ZLCSAVE2     RESTORE VOLATILE REGISTERS           0312000ˇ
  #4,#5,ZLCSAVE2+24   EXCEPT #3 AND #6                     03130003
  #7,ZLCSAVE2+36      WHICH MUST BE RETURNED TO CALLER     03140003
E 1                                                        03150003

ACE 1                                                        03170003TRA
    0(*-*,#1),0(#15)    TRANSLATE OUTPUT LINE                03180003INT
    ZLFLINE(*-ˇ
SPACE 1                                                        03200003*
                                                               03210003*
L INPUT TRANSLATE TABLE.  THEˇ
Y TO INSURE THAT VARIOUS KINDS OF INPUT GET INTERPRETED AS       0323000
E BRACKETS.                                                      0324000
                                            ˇ
NTB DC    256YL1(*-INTRANTB)                                       03260
    ORG   INTRANTB+X'41'                                           03270
    DC    X'AD'               LEFT BRACKET                 +
      ORG   INTRANTB+X'42'                               ˇ
        DC    X'BD'               RIGHT BRACKET                        0
        ORG   INTRANTB+X'BA'                                           0
        DC    X'AD'               LEFT BRACKET                         0
3         ORG   INTRANTB+X'BB'
3         DC    X'BD'               RIGHT BRACKET
3         ORG   ,
3      ˇ
003SAVEMVCL DS    4A                  MVCL REGISTER SAVE AREA
003         LTORG
003         SPACE 1   Ï
90003         END
00003{
OUTINE'                  00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002*
                           * 00017002* THIS IS THE PRIMITIVE ATOM-HASHER
 SXHASH.                   * 00018002*                          ˇ
                             * 00019002*********************************
****************************** 00020002*
                             * 00030002* Note: This calls the hashing al

 The hash code returned by     * 00050002*       this interface is a raw
de, unadjusted for the size    * 00060002*       of any hash table.
              ˇ
                                 * 00080002*****************************
********************************** 00090002         SPACE
                             ˇ
NAME='ZILHASH'                       00110002         #ZPDS 16
                                     00120002         #ZSAV ARGS=1
                                     0013000ˇ
                                       00140002*
                                       00150002* CHECK TYPE OF ARG 1
                                       00160002*           ˇ
                                         00170002         L     #6,0(,#1
    LOAD ARG                             00180002         CLI   ##TYPE(#
BOL                                      00190002         BE    ARG1SYM
                                           00200002         CLI   ##TYPE
TRING                                      00210002         BE    ARG1ST
                                           00220002         CLI   ##TYPE
IXNUM    ˇ
                                             00240002         CLI   ##TY
#SFLOAT                                      00250002         BE    ARG1
                        ˇ
,##BIGNUM                                      00270002         BE    AR
                                               00280002         CLI   ##
,##DFLOAT                              +
                                     ˇ
(#6),##SUBR                                        00310002         BE
B                                                  00320002         CLI
(#6),##CLOSUR                                      0ˇ
CLO                                                  00340002         B
R               ALL OTHER TYPES ARE INVALID.         00350002         SP
                                                     00360002ARG1SYˇ
                  ARG 1 IS SYMBOL                      00370002
                                                       00380002
,##PNAME(,#6)     GET POINTER TO PRINT NAME            00390002********
G1ˇ
1                                                        00410002ARG1STR
0H                  ARG 1 IS STRING                      00420002
1                ˇ
  #5,#5               Clear length register                00440002
  #4,##VECDAT(,#6)    Set address of string text           00450002
  #5,7,1(#6)          Set lengthˇ
    #7,#SFWM1           Set #7 to a negative value to        00470002*
                         tell ZILINTN to return hash code    00480002
    #15,ZLCINTN         Get address of ZILINTN ˇ
#BASR #14,#15             Call ZILINTN to get hash code        00500002
LR    #2,#15              Get hash code into register          00510002
B     RETURN                                                  ˇ
  SPACE 1                                                        0053000
  DS    0H                  ARG 1 IS FIXNUM                      0054000
  SPACE 1                                                        0055000
    L     #2,##CDR(,#6)       GET FIXNUM OR FLONUM VALUE           00560
    B     RETURN                                                   00570
    SPACE 1                                                        00580
FL  EQU   ARˇ
      SPACE 1                                                        006
1DFL  DS    0H                  ARG 1 IS DOUBLE FLOAT                006
      SPACE 1              ˇ
        L     #2,8(,#6)           (XOR WORD1 WORD2)                    0
        X     #2,12(,#6)                                               0
        B     RETURN                      ˇ
2         SPACE 1
2ARG1BIG  EQU   ARG1STR             ARG 1 IS BIGNUM
2         SPACE 1                                        
002ˇÁ
         00690002         SPACE 1
         00700002ARG1CLO  EQU   ARG1SUB             ARG 1 IS CLOSURE
         00710002 ˇ
           00720002ARG1SUB  DS    0H                  ARG 1 IS SUBR
           00730002         SPACE 1
           00740002         L    ˇ
             00750002******** B     RETURN
             00760002         SPACE 1
             00770002RETURN   DS    0H          ˇ
               00780002         SPACE 1
               00790002         N     #2,=X'7FFFFFFF'     FORCE NON-NEGA
               00800002         #MKAT FIXED               MAKE ˇ
 IT              00810002         #ZRET ,
                 00820002         EJECT
                 00830002         DS    0F
                   00840002CODEHASH DC    XL4'7FFFFFFF'       SOMETHING
 FOR COMPILED CODE 00850002         SPACE 1
                   00860002ERROR    DS    0H
             ˇ
LHASH - ',(#6)       00880002         SPACE 1
                     00890002         LTORG
                     0090000^ 2         END
                       00910002
 - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002* ZILIMPL T
RGUMENTS, OF WHICH THE LAST 2 ARE OPTIONAL.        * 00017002* THE FIRST
ST OF ATOMS TO BE IMPLODED INTO A SINGLE ATOM.     * 00018002*  SPECIFIC
 AN ATOMˇ
WILL BE FLAGGED AS AN ERROR BY ZILADMP OR ZILABLD.   * 00020002* THE SEC
IFIES WHETHER (NON-NIL) OR NOT (NIL) TO INTERN THE   * 00030002*  GENERA
 ON THE OBLIST (NOTE THˇ
CIFIES WHETHER (NON-NIL) OR NOT (NIL) TO FORMAT THE    * 00050002*  ATOM
RIC WHERE POSSIBLE (DEFAULT IS TO ASSUME ALPHA).       * 00060002* THIS
IS NOT RECURSIVE AND USES NO EXTRA STAˇ
********************************************************** 00080002*
                                                         * 00090002* ZIL
CALLED TO DUMP EACH ATOM IN THE LIST INTO OUR WORK ARˇ
                                                           * 00110002***
************************************************************ 00120002
ACE                                                          0013000ˇ
#ZBEG MINARGS=1,MAXARGS=3,NAME='ZILIMPL'                       00140002
#ZPDS 24                  DEFINE STACK SIZE                    00150002
#ZSAV ,                   SAVE REGISTERS                       00160002
SPAˇ
  L     #6,0(,#11)          GET FIRST ARGUMENT                   0018000
  XR    #5,#5               INIT LENGTH SO FAR TO ZERO           0019000
  CR    #6,#10    ˇ
    BE    NOMORE              THEN END LOOP                        00210
    DS    0H                                                       00220
    ICM   #2,15,##CAR(#6)     GETˇ
      BM    ERROR1              IF ARG 1 WAS AN ATOM, ERROR          002
      TM    ##TYPE(#2),##ATOM   IF IT'S NOT AN ATOM                  002
      BZ    ERROR2              THEN ERROR      ˇ
        TM    ##TYPE(#2),##VEC    IF IT'S A VECTOR                     0
        BO    ERROR2              THEN ERROR                           0
        L     #15,ZLCADMP         GET ADDRESS OF ZILADMP       +
2         LR    #1,#10              SET #1 FOR ZILADMP       ˇ
002         #BASR #14,#15             CALL ZILADMP TO DUMP ATOM
002         LR    #7,#1               SAVE ADDRESS OF DUMPED ATOM
002         LTR   #4,#0               GET LENGTH OF DUMPED ATOM
30002         BNP   AFTMOVE             IF ZERO LENGTH, SKIP THIS ONE
40002         AR    #0,#5               GET DUMPED-ATOM LENGTH PLUS TOTA
50002         C     #0,ZLCWALEN         IF EXCEEDS CURRENT WORKAREA LENG
60002      ˇ
0370002*
0380002* (1) GETMAIN A NEW WORKAREA WHOSE SIZE IS >= #0.
0390002* (2) COPY CONTENTSˇ
 00400002* (3) FREEMAIN THE OLD WORKAREA.
 00410002*
 00420002* #0 = TOTAL LENGTH NEEDED SO FAˇ
   00430002* #1 = NOT IN USE
   00440002* #2 = NOT IN USE, WILL CONTAIN NEW WORK AREA LENGTH
   00450002* #3 = NOT IN USE, WILL CONTAIN NEW WORK AREAˇ
     00460002* #4 = LENGTH OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
     00470002* #5 = TOTAL LENGTH DUMPED SO FAR, NOT INCLUDING THIS STUFF
     00480002* #6 = ADDRESS OF THE SUBLIST CURRENTLY BEING PROCESSED   ˇ
       00490002* #7 = ADDRESS OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
       00500002*
       00510002         LR    #2,#0                SAVE LENGTH TO BE NEE
      ˇ
         00530002         N     #2,=X'FFFFFFF8'      ROUNDED UP TO MULTI
         00540002         LR    #0,#2                SAVE THE NEW WORK A
TH       00550002    ˇ
           00560002         LTR   #15,#15              IF GETMAIN FAILED
           00570002         BNZ   ERROR3               THEN ERROR - NOT
TORAGE     00580002         LR    #3ˇ
SS           00590002         ICM   #14,15,ZLCWA         #14 = ADDRESS O
EA           00600002         BZ    NOFREE               IF NONE, THEN S
 & FREE      00610002         LR    #0,#3          ˇ
REA            00620002         LR    #1,#5                #1 = LENGTH O
 TEXT          00630002         LR    #15,#1               #15 = LENGTH
D TEXT         00640002         MVCL  #0,#14               COPY DAˇ
AREA TO NEW AREA 00650002         L     #1,ZLCWA             GET CURRENT
EA ADDRESS       00660002         L     #0,ZLCWALEN          GET CURRENT
EA LENGTH        00670002         FREEMAIN R,LV=(0),A=(1)    FREE THE OL
R EA              00680002ˇÁ
                                 00690002         ST    #3,ZLCWA
 NEW ZIL WORKAREA ADDRESS        00700002         ST    #2,ZLCWALEN
 NEW ZIL WORKAREA LENGTH         00710002 ˇ
                                   00720002LENOK    DS    0H
HERWISE - STILL ROOM               00730002         L     #0,ZLCWA
RKAREA ADDRESS + WORK AREA LENGTH  00740002         AR   ˇ
POINTS TO WHERE TO MOVE DUMPED ATOM  00750002         LR    #1,#4
SOURCE LENGTH = DUMPED ATOM LENGTH   00760002         LR    #15,#4
TARGET LENGTH = DUMPED ATOM LENGTH   00770002         LR    #14,#7
  SOURCE ADDRESS = WHERE DUMPED ATOM   00780002         MVCL  #0,#14
  MOVE DUMPED ATOM TO WORK AREA        00790002         AR    #5,#4
  INCREMENT TOTAL LENGTH SO FAR        00800002AFTMOVE  DS    0H
       ˇ
    GET REST OF LIST                     00820002         CR    #6,#10
    WHILE LIST IS NOT NIL,               00830002         BNE   LOOP
    CONTINUE.         ˇ
      LIST HAS BEEN PROCESSED              00850002         L     #1,ZLC
      POINT TO GIANT ATOM DATA             00860002         LR    #0,#5
      SET LENGTH OF GIANT ATOM       ˇ
        SET INTERN FLAG = ARG 2 TO ZILIMPL   00880002         LA    #4,2
        SET CURRENT STACK POINTER FOR CONS   00890002*
        SET FORMAT FLAG = ARG 3 TO ZILIMPL   0090000ˇ
D         CALL ZILABLD TO MAKE AN ATOM FROM IT 00910002         #BASR #1
          (RETURNS ATOM IN #15)                00920002         SPACE
                                               00930002         #ZRˇ
            RESTORE REGISTERS AND RETURN         00940002         SPACE
                                                 00950002SAVE56   DS
            SAVE AREA                            00960002         SPACE
  ˇ
ent 1 to ZILIMPL not a proper list - ',0(#11)      00980002ERROR2   #ERR
ent 1 to ZILIMPL contains nested list or vector-tyX00990002
ucture - ',(#2),Xˇ
not implode list - ',0(#11)                          01010002ERROR3   DS
                ERROR - NOT ENOUGH STORAGE           01020002         XR
0               CLEAR WORK AREA ˇ
,ZLCWA                                                 01040002
,ZLCWALEN                                              01050002
EFIX=NO,                                       +
'ZIL2007 ZILIMPL: Not enough memory to build ˇ
   from list - ',0(#11)                                    01080002
E 1                                                        01090002
G                                                          0ÿ 1100002
D                                                            01110002{

         00010000*******************************************************
******** 00011007*
       * 00012007*ˇ
y Inc.   * 00013007*                     All rights reserved.
         * 00014007*
         * 00015007**************ˇ
************ 00016007*
           * 00017007* THIS MODULE IS INVOKED VIA LINK FROM THE MAINLINE
ZILMAIN    * 00018007* WHENEVER A COMPILED ZIL Mˇ
S STORAGE    * 00019007* FOR ALL REQUIRED USAGES, PROCESSES OPTION SPECI
S IF ANY,    * 00020007* AND HANDLES THE OPENING OF ANY RELEVANT FILES.
AT ZILTERM   * 00030007* UNDOES ALL THESE THINGS.              ˇ
               * 00040007*
               * 00050007***********************************************
**************** 00060007*
                 * 00070007* MODIFIED 09/84 SO THAT IT DOES NOT OPEN ALL
 IT STILL LOOKS  * 00080007* FOR ALL FILE NAMES OF THE ZIL FORMAT, SO TH
OWS HOW MUCH     * 00090007* SYSTEM MEMORY TO RESERVE, BUT IT DOES NOT A
OPEN THEM.   ˇ
N WHEN ACCESS TO   * 00110007* THE FILE IS REQUESTED (VIA READ, PRINT, E
                   * 00120007*
                   * 0013000ˇ
********************** 00140007*
                     * 00150007* MODIFIED 11/86.  CONS SPACE SIZE MINIMU
 IN FIELD MINCSS,    * 00160007* WHICH IS Cˇ
TIMAL CODING OF THE    * 00170007* VECTORIZED GARBAGE COLLECTOR.  ALSO,
 SPACE SIZE IS ROUNDED * 00180007* UP TO THE NEXT 4K BOUNDARY, NOT THE N
LEWORD AS BEFORE;      * 00190007* HOWEVER, CODE TO INSUREˇ
UP WITH A MULTIPLE OF    * 00200007* 4K FOR CONS SPACE HAS NOT BEEN ADDE
                         * 00210007*
                         * 00220007*************************************
**************************** 00230007*
                           * 00240007* 06/01/88 - Added ZILVALS.  See #Z
#ZSUB.                     * 00250007* 11/23/88 - New file block support
YI-stuffˇ
 for uninterned symbols.     * 00270007*
                             * 00280007*********************************
***********************+
                     ˇ
                                   00310007         EJECT
                                   00320007         #ZEQU ,
FINE ALL EQUATES HERE              0ˇ
                                     00340007ZILINIT  CSECT
                                     00350007         AIF   (NOT &ZILXA)
                                     00360007ZILINIˇ
                                       00370007ZILINIT  AMODE 31
                                       00380007.NOMODES ANOP
                                       00390007         B     ZLARˇ
                                         00400007         DC    YL1(ZLAR
ZILINIT &SYSDATE &SYSTIME'               00410007ZLAR     EQU   *
    END OF IDENTIFIER                    00420007ZLAROUND DS    0H
 ˇ
                                           00440007         USING ZLHEAD
                                           00450007         USING ZLHOPT
                ˇ
                                             00470007         STM   #14,
13)     SAVE REGISTERS                       00480007         LR    #12,
        SET UP BASE REGISTER   ˇ
          INPUT PARM +4 --> HEADER OF POINTERS 00500007         L     #2
          POINT TO OPTIONS LIST                00510007         ST    #1
          SAVE ADDRESS OF PROGRAM HEADER      ˇ
R           SAVE ADDRESS OF OPTIONS              00530007         ST
R           SAVE ADDRESS OF MAIN MODULE          00540007         EJECT
                                                 00550007*   ˇ
                                                   00560007* SET UP A TE
SAVE AREA FOR SYSTEM FUNCTIONS                     00570007*
                                                   00580007         LA
EMPSAVE                                              00590007         ST
(,#13)                                               00600007         ST
4(,#1)                                               00610007         LR
#1         ˇ
                                                       00630007*********
****************************************************** 00640007*
                          ˇ
 STORAGE IS AS FOLLOWS:                                * 00660007*
                                                       * 00670007*
......................................... .....         * 00680007ˇÁ
*        .                                                  .         *
7*        . AREA RETURNED TO OPERATING SYSTEM                .         *
7*        .                                                  .         *
7*ˇ
007*        ◊                                                  ◊
007*        ◊ THE PRINT NAME OF THE ATOM "NIL" (8 BYTES)       ◊
007*        ◊    ˇ
50007*        ◊--------------------------------------------------◊
60007*        ◊                                                  ◊
70007*        ◊ THE PRINT NAME Oˇ
0780007*        ◊                                                  ◊
0790007*        ◊==================================================◊
0800007*        ◊                              ˇ
 00810007*        ◊ COMMON AREA (ADDRESSED BY REG 13, INCLUDES SA)   ◊
 00820007*        ◊                                                  ◊
 00830007* #13 -->◊-------------------------------------------ˇ
 * 00840007*
 * 00850007*************************************************************
** 00860007         EJECT
     00870007***********************************************************
**** 00880007*
   * 00890007* MAP OF 31-BIT STORAGE IS AS FOLLOWS:
   * 0090000ˇ
     * 00910007*
     * 00920007*        ◊===============================================
     * 00930007*        ◊  ˇ
       * 00940007*        ◊ OBLIST HASH ARRAY
       * 00950007*        ◊
       * 00960007*        ◊===============ˇ
         * 00970007*        ◊
         * 00980007*        ◊ PRINT STACK
         * 00990007*        ◊                            ˇ
 ◊         * 01000007*        ◊=========================================
=◊         * 01010007*        ◊
 ◊         * 01020007*        ◊ THE SYMBOL "NIL" (24 BYTES RESERVED FOR
   ◊         * 01030007*        ◊
   ◊         * 01040007* #10 -->◊=======================================
===◊         * 01050007*        ◊
   ◊   +
     ˇ
       ◊         * 01080007*        ◊===================================
=======◊         * 01090007*        ◊
       ◊         * 0ˇ
 GC)     ◊         * 01110007*        ◊_________________________________
_________◊         * 01120007*        ◊
         ◊         * 01130007*     ˇ
ZLCVSADR)  ◊         * 01140007*        ◊
           ◊         * 01150007*        ◊===============================
===========◊         * 01160007*        ◊         ˇ
             ◊         * 01170007*        ◊ SMALL FIXNUM TABLE (256*8=20
)            ◊         * 01180007*        ◊
             ◊         * 01190007*        ◊======================ˇ
===============◊         * 01200007*        ◊
               ◊         * 01210007*        ◊ THE SYMBOL "T" (24 BYTES R
FOR IT)        ◊         * 01220007*        ◊
ˇ
=================◊         * 01240007*        ◊
                 ◊         * 01250007*        ◊ PUSH DOWN STACK (REG 11
ROUND IN HERE) ˇ
                   ◊         * 01270007*        ◊-----------------------
-------------------◊         * 01280007*
                             *ˇ
******************************** 01300007         SPACE 1
                                 01310007*******************************
******************************** 01320007*   ˇ
                                 * 01330007* NOTE:  ALL STORAGE IS ACQUI
 AFTER SPACE NEEDS HAVE BEEN     * 01340007* DETERMINED FOR ALL FILES.
WAY THE STORAGE REQUIREMENTS     * 01350007* FOR I/O ARE INDˇ
IN PROGRAM'S SPECIFICATIONS.       * 01360007*
                                   * 01370007***************************
************************************ 01380007         EJECT
                                       01390007*
                                       01400007* LOCATE ALL USER SPECIFI
ALLOCATIONS AND RESERVE 32K FOR        01410007* EACH OF THEM.  THEY WIL
 OPENED ATˇ
THEY ARE REFERENCED.  IN THIS WAY WE     01430007* AVOID CLOBBERING UNUS
T FILES, AND ALSO PROVIDE A KLUDGEY      01440007* MECHANISM FOR RESERVI
S OF 32K SYSTEM STORAGE.                  01450007ˇÁ
                                                         01460007* *** E
 this code as soon as we can get major spaces like VSS   01470007*     a
 line and we overhaul the ancient file system! ***       01480007*ˇ
                                                           01490007* SEA
TASK INPUT/OUTPUT TABLE (TIOT) FOR FILE ALLOCATIONS OF     01500007* THE
ZILI____ (FOR INPUT FILES) AND ZILO____ (FOR OUTPUT FILES) 01510007*
 ˇ
    #6,#6               INITIALIZE I/O MEMORY SIZE REQUIRED  01530007
    #4,#4               CLEAR INSERT REGISTER                01540007
    #3,540      ˇ
L     #3,12(,#3)          TIOT ADDRESS                         01560007
LA    #3,24(,#3)          POINT TO FIRST TIOT ENTRY            01570007T
DS    0H                       ˇ
  TM    1(#3),X'80'         IF THIS ENTRY IS NOT IN USE          0159000
  BO    TIOTNEXT            THEN SKIP IT                         0160000
  CLC   4(4,#3),=C'ZILI'    IF THIS IS A ZIL Iˇ
    BE    TIOTFILE            THEN PROCESS IT                      01620
    CLC   4(4,#3),=C'ZILO'    IF THIS IS A ZIL OUTPUT FILE         01630
    BE    TIOTFILE            THEN PROCESS IT                ˇ
      CLC   4(8,#3),DRIBLDD     IF THIS IS THE ZIL DRIBBLE FILE      016
      BE    DRIBLFIL            THEN PROCESS IT                      016
TNEXT IC    #4,0(,#3)           ELSE GET LENGTH OF THIS ENTRY        016
        ALR   #3,#4               BUMP TO NEXT ENTRY                   0
        CLI   0(#3),0             IF END OF TIOT                       0
        BE    TIOTEND             THEN WE'RE THROUGH (NO MORE FILES)   0
        B  ˇ
7TIOTFILE DS    0H                  WE FOUND A FILE TO PROCESS
7         CLI   8(#3),C' '          IF NOT DDNAMES "ZILI" AND "ZILO"
7         BNE   ADD32K    ˇ
007         CLI   7(#3),C'I'          IF THIS IS DDNAME ZILI
007         BNE   NOTZILI             THEN
007         ST    #3,TIOTZILI          SAˇ
70007         B     TIOTNEXT
80007NOTZILI  DS    0H
90007         CLI   7(#3),C'O'          IF THIS IS DDNAMˇ
1800007         BNE   TIOTNEXT            THEN
1810007         ST    #3,TIOTZILO          SAVE TIOT ENTRY POINTER FOR Z
1820007         B     TIOTNEXT                                         +
 01830007         SPACE 1                                            ˇ
   01840007DRIBLFIL DS    0H                  IF THIS IS THE DRIBBLE DDN
   01850007         ST    #3,TIOTDRIB         INDICATE DRIBBLE FILE PRES
   01860007******** B     ADD32K              AND RESERVE STORAGE TO PRO
   0ˇ
     01880007ADD32K   DS    0H                  OTHERWISE NOT A STANDARD
     01890007         A     #6,=F'32768'        ADD APPROXIMATE MEMORY R
     01900007      ˇ
       01910007         SPACE 2
       01920007TIOTEND  DS    0H                  ALL DDNAMES PROCESSED
       01930007         EJECT     ˇ
         01940007*
         01950007* INITIALIZE FILE BLOCKS FOR ZILIN AND ZILOUT
         01960007*                               ˇ
           01970007         SPACE 1
           01980007*
           01990007* OPEN THE STANDARD OUTPUT FILE              ˇ
             02000007*
             02010007         LA    #0,ZLFBLEN          GET LENGTH OF AN
ILE BLOCK    02020007         #GETMAIN RU,LV=(0),LOC=BELOW

               02040007         ST    #7,OFPTR            STORE PTR TO F
PUT FILE BLOCK 02050007         XC    ZLFILBLK(ZLFBLEN),ZLFILBLK
              ˇ
                 02070007         MVC   ZLFPDDN(8),OUTDD
                 02080007         LA    #1,1
                 02090007    ˇ
 = 1               02100007         MVC   ZLFDCB(96),OUTDDDCB SET UP DCB
                   02110007         ICM   #15,15,TIOTZILO     GET ADDRES
T ENTRY FOR ZILO   02120007         BZ    TEˇ
MINAL OUTPUT         02130007         TM    3(#15),X'20'        IF TIOT
YS IT'S A TERMINAL   02140007         BO    TERMZILO            IF NONE,
MINAL OUTPUT         02150007         LA    #1,ZLFDCB      ˇ
                       02160007         ST    #1,OPENL
                       02170007         MVI   OPENL,X'8F'         OPEN F
T                      02180007         AIF   (NOT &ZILXA).SKIP1
                         02190007*---------------------------------SWITC
URRENT AMODE TO AMODE 24 02200007         LA    #1,OPENO24          ADDR
HIS CODE                 02210007         LA    #2,OPENO24E         RETU
SS                        02220007ˇÁ
                                         02230007OPENO24  DS    0H
                                         02240007*----------------------
---THE AMODE IS NOW 24                   02250007.ˇ
                                           02260007         LA    #1,OPE
                                           02270007         OPEN  MF=(E,
                                           02280007         AIF  ˇ
.SKIP2                                       02290007*------------------
-------SWITCH FROM AMODE 24 TO CURRENT AMODE 02300007         BSM   0,#2
                                             02310007OPENO24E DS    0H
ˇ
---------THE AMODE IS NOW SAME AS ON ENTRY     02330007.SKIP2   ANOP
                                               02340007         TM    ZL
0',X'10'       ˇ
                                                 02360007*
            CHECK RECFM OF OPEN OUTPUT FILE      02370007         TM
6,X'40'     IF RECFM = V....  ˇ
K             THEN...                              02390007         TM
+36,X'80'                                          02400007         BO
K                                            ˇ
LAG2,ZLFRECV     INDICATE SO IN FILE BLOCK           02420007FNOUTOK  DS
                                                     02430007         AI
 &ZILXA).SKIP3                                       0244000ˇ
-----------------SWITCH FROM CURRENT AMODE TO AMODE 24 02450007
,PUTO24           ADDRESS OF THIS CODE                 02460007
,PUTO24E          RETURN ADDRESS                       02470007
#2,#1                                                    02480007PUTO24
0H                                                       02490007*------
-------------------THE AMODE IS NOW 24                   02500007.SKIP3
          ˇ
  #1,ZLFDCB                                                02520007
  (1)                 DO THE INITIAL PUT LOCATE            02530007
  (NOT &ZILXA).SKIP4     ˇ
-----------------------SWITCH FROM AMODE 24 TO CURRENT AMODE 02550007
M   0,#2                                                     02560007PUT
    0H                                  ˇ
-------------------------THE AMODE IS NOW SAME AS ON ENTRY     02580007.
ANOP                                                           02590007
LH    #0,ZLFDCB+82        GET DCB LRECL                +
  TM    ZLFFLAG2,ZLFRECV    IF RECFM=V FILE          ˇ
    BZ    NOTRECVO            THEN...                              02620
    TM    ZLFDCB+36,X'04'      IF RECFM = V.A                      02630
    BZ    NOTRECVA             THEN...                             0ˇ
      STH   #0,0(,#1)            INITIALIZE RDW                      026
      XC    2(2,#1),2(#1)                                            026
      MVI   4(#1),C'1'           INITIALIZE PRINT CONTROL CHAR       026
   ˇ
        SH    #0,=H'5'             SET LENGTH OF ACTUAL TEXT           0
        B     NOTRECFA                                                 0
OTRECVA DS    0H  ˇ
7         STH   #0,0(,#1)            INITIALIZE RDW
7         XC    2(2,#1),2(#1)
7         LA    #1,4(,#1)        ˇ
007         SH    #0,=H'4'             SET LENGTH OF ACTUAL TEXT
007         B     NOTRECFA
007NOTRECVO DS    0H                            ˇ
70007         TM    ZLFDCB+36,X'04'     IF RECFM = F.A
80007         BZ    NOTRECFA            THEN...
90007         MVI   0(#1),C'1'           INITIALIZE PRINT CONTRˇ
2800007         LA    #1,1(,#1)            BUMP POINTER PAST CONTROL CHA
2810007         BCTR  #0,0                 SUBTRACT 1 FOR PRINT CONTROL
2820007NOTRECFA DS    0H
 02830007         ST    #1,ZLFCARD          STORE CURRENT RECORD ADDRESS
 02840007         STH   #0,ZLFLRECL         STORE RECORD LENGTH
 02850007         B     CLEAROUT
 02860007TERMˇ
)  02870007         L     #15,X'224'          ASCB ADDRESS
   02880007         ICM   #15,15,X'3C'(#15)   TSB ADDRESS
   02890007         BZ    OUˇ
ILE  02900007         OI    ZLFFLAG,ZLFTERM     INDICATE SO IN FILE BLOC
     02910007         OI    ZLFFLAG2,ZLFTABS    SET TABS MODE ON FOR FIL
     02920007         LA    #1,ZLFLINE     ˇ
       02930007         ST    #1,ZLFCARD          RESET ADDRESS OF RECOR
       02940007         LA    #0,78               RESET RECORD LENGTH TO
       02950007         STH   #0,ZLFLRECL         RESET LIˇ
         02960007CLEAROUT DS    0H
         02970007         ALR   #1,#0               ZLFCARD + ZLFLRECL .
         02980007         ST    #1,ZLFEND           RESET END-OF-RECORD
R          02990007ˇÁ
H = 0                    03000007         SLL   #15,24              FILL
                         03010007         XR    #14,#14             SOUR
L                        03020007 ˇ
UTPUT AREA                 03030007         LH    #1,ZLFLRECL         LE
ENGTH OF OUTPUT AREA       03040007         MVCL  #0,#14              CL
UT AREA TO BLANKS          03050007STDOUNT  DS   ˇ
                             03060007         OI    ZLFFLAG2,ZLFOPEN
E OPEN                       03070007         EJECT
                             03080007*                          ˇ
                               03090007* OPEN THE STANDARD INPUT FILE
                               03100007*
                               03110007         LA    #0,ZLFBLEN

                                 03130007         LR    #7,#1
                                 03140007         ST    #7,IFPTR
E PTR TO FIRSTˇ
LBLK                               03160007         OI    ZLFFLAG,ZLFINP
SIN                                03170007         MVC   ZLFPDDN(8),IND
                             ˇ
TO ENABLE ZILGETC TO READ THE        03190007         BCTR  #1,0
FIRST RECORD WHEN CALLED FIRST,      03200007         ST    #1,ZLFCHAR
SET CHARACTER POSITION = -1          0321000ˇ
  SET UP DCB                           03220007         ICM   #15,15,TIO
  GET ADDRESS OF TIOT ENTRY FOR ZILI   03230007         BZ    TERMZILI
  IF NONE, USE TERMINAL INPUT          03240007         TM ˇ
    IF TIOT ENTRY SAYS IT'S A TERMINAL   03250007         BO    TERMZILI
    IF NONE, USE TERMINAL INPUT          03260007         LA    #1,ZLFDC
                                         03270007         ST    #1,OPENL
                                           03280007         MVI   OPENL,
      OPEN FOR INPUT                       03290007         AIF   (NOT &
KIP5                                       03300007*--------------------
-----SWITˇ
        ADDRESS OF THIS CODE                 03320007         LA    #2,O
        RETURN ADDRESS                       03330007         BSM   #2,#
                        ˇ
                                               03350007*----------------
---------THE AMODE IS NOW 24                   03360007.SKIP5   ANOP
                                       +
                                     ˇ
(1))                                               03390007*------------
-------------SWITCH FROM AMODE 24 TO CURRENT AMODE 03400007         AIF
ZILXA).SKIP6                                       0ˇ
                                                     03420007OPENI24E DS
                                                     03430007*----------
---------------THE AMODE IS NOW SAME AS ON ENTRY     03440007.SKIP6ˇ
                                                       03450007
FDCB+X'30',X'10'                                       03460007
NOPEN                                                  03470007
,Zˇ
#0,=H'8'            SUBTRACT 8 FOR LINE NUMBER FIELD     03490007*
                    (ZLFCARD/ZLFEND NOT SET UNTIL READ)  03500007
STDINNT          ˇ
  0H                  (STANDARD INPUT IS TO THE TERMINAL)  03520007
  #15,X'224'          ASCB ADDRESS                         03530007
  #15,15,X'3C'(#15)   TSB ADDRESˇ
    INNOPEN             IF NO TSB, NOT UNDER TSO, NEED FILE  03550007
    ZLFFLAG,ZLFTERM     INDICATE SO IN FILE BLOCK            03560007
    #0,80               SET LINE LENGTH TO 80  ˇ
LA    #1,ZLFLINE          FOR TERMINAL, RECORD AREA EXISTS     03580007
ST    #1,ZLFCARD          SO POINT TO RECORD AREA              03590007
ALR   #1,#0               ADD LINE LENGTH                     ˇ
  ST    #1,ZLFEND           SET END-OF-RECORD POINTER            0361000
  DS    0H                                                       0362000
  STH   #0,ZLFLRECL         SET RECORD LENGTH FOR FILE           0363000
    OI    ZLFFLAG2,ZLFOPEN    MARK FILE OPEN                       03640
    EJECT                                                          03650
                                                                   03660
N THE DRIBBLˇ
                                                                     036
      ICM   #1,15,TIOTDRIB      IF THERE IS A DRIBBLE FILE,          036
      BZ    NODRIB         ˇ
        LA    #0,96               GET LENGTH OF A DCB                  0
        #GETMAIN RU,LV=(0),LOC=BELOW                                   0
        ST    #1,TIOTDRIB         SAVE DCBˇ
7         MVC   0(96,#1),DRIBLDCB   SET UP DCB
7         ST    #1,OPENL
7         MVI   OPENL,X'8F'         OPEN FOR OUTPUT      
007ˇÁ
         03770007*---------------------------------SWITCH FROM CURRENT A
AMODE 24 03780007         LA    #1,DRIB24           ADDRESS OF THIS CODE
         03790007 ˇ
           03800007         BSM   #2,#1
           03810007DRIB24   DS    0H
           03820007*-------------ˇ
             03830007.SKIP7   ANOP
             03840007         LA    #1,OPENL
             03850007         OPEN  MF=(E,(1))  ˇ
               03860007         AIF   (NOT &ZILXA).SKIP8
               03870007*---------------------------------SWITCH FROM AMO
 CURRENT AMODE 03880007         BSM   0,#2                     ˇ
                 03890007DRIB24E  DS    0H
                 03900007*---------------------------------THE AMODE IS
 AS ON ENTRY     03910007.SKIP8   ANOP
                   03920007         SPACE 1
                   03930007NODRIB   DS    0H
                   03940007         SPACE 1
             ˇ
Y SAVEAREA           03960007         EJECT
                     03970007*******************************************
******************** 0398000ˇ
                     * 03990007* COMPUTE THE AMOUNT OF STORAGE NEEDED FO
LLOWING AREAS:       * 04000007*    PUSH-DOWN STACK
                     * 04010007*    CONS SPˇ
                       * 04020007*    VECTOR/STRING SPACE
                       * 04030007*    OTHER MISCELLANEOUS SPACES (FIXED
                       * 04040007* LEAVE SOME OVER FOR THEˇ
T LEAST 32K)             * 04050007*
                         * 04060007* FIRST, AS MUCH STORAGE AS WILL BE N
 ALLOCATED BELOW 16MB.   * 04070007* THIS STORAGE IS DIVIDED UP AS FOLLO
                           * 04080007*    (1) COMMON AREA - LENGTH IS TH
NT VALUE "ZLCCOMLN"        * 04090007*    (2) THE PRINT NAME OF THE ATOM
ENGTH IS 8 BYTES           * 04100007*    (3) THE PRINT NAME OF THE ATOM
 LENGTH ˇ
M - MINIMUM LENGTH IS 32K    * 04120007*   THE VALUE IN (4) IS SUBTRACTE
HE TOTAL GETMAINED LENGTH    * 04130007* AND FREEMAINED.  THEN THE LENGT
E COMMON AREA AND THE P+
NG TOTAL AND ADDRESSEˇ
GTH OF VECTOR/STRING SPACE.      * 04160007*
                                 * 04170007* THEN, AS MUCH STORAGE AS WI
EDED IS ALLOCATED ABOVE 16MB.    * 0ˇ
LOWS:                              * 04190007*    (1) PUSH DOWN STACK -
S FROM OPTIONS, DEFAULT IS (DEFPDS)* 04200007*    (2) THE SYMBOL "T" - W
E (TSIZE) BYTES                    * 04210007*    (ˇ
GTH IS (MINCSS), DEFAULT IS (DEFCSS) * 04220007*    (4) THE SYMBOL "NIL"
SERVE (##SYMLEN) BYTES               * 04230007*    (5) PRINT STACK - LE
VALUE OF "PSSIZE"                    * 04240007*    (6) OBLIST HASˇ
NGTH IS 64K*4 = 256K                   * 04250007*    (7) SMALL FIXNUM T
ENGTH IS 256*8 = 2048 (2K)             * 04260007*    (8) VECTOR/STRING
2) - MINIMUM LENGTH OF EACH IS 4K      * 04270007* THEN THE LENGTHS OF T
Dˇ
AINING TOTAL AND ADDRESSES ARE ASSIGNED. * 04290007* THE REMAINDER IS TH
 OF CONS SPACE, WHICH IS NOT             * 04300007* INITIALIZED UNTIL G
OLLECTION TIME. ˇ
                                           * 04320007* NOTE THAT THE LEN
LL AREAS MUST BE ROUNDED UP TO MULTIPLES   * 04330007* OF 8 TO INSURE A
EE LIST.                       ˇ
                                             * 04350007*****************
********************************************** 04360007         EJECT
                                              ˇ
************************************************ 04380007*
                                               * 04390007* PROCESS INITI
N SPECS FROM PARM FIELD                        * 04400007*   ˇ
                                                 * 04410007*************
************************************************** 04420007         SPAC
                                                   04430007         L
(,#13)          GET ADDRESS OF ZILMAIN'S SAVE AREA   04440007         L
4(,#1)          GET ORIGINAL PARM POINTER            04450007         AI
 &ZILTSO).PGMCALL                                    04460007*----------
-----------ˇ
                                                       04480007*--------
------------------------------------------------------ 04490007
#1),X'80'         IF THEREˇ
PGMCALL              THEN WE WERE CALLED AS A PROGRAM    04510007
4(#1),X'80'         IF THERE ARE 2 PARAMETERS            04520007
PGMCALL              THEN WE WERE CALLED  AS A PROGRAM    04530007ˇÁ
         TM    8(#1),X'80'         IF THERE ARE 3 PARAMETERS
7         BO    PGMCALL              THEN WE WERE CALLED AS A PROGRAM
7*                                  ELSE WE WERE CALLED AS A COMMAND
7 ˇ
007         L     #2,CPPLCBUF         GET ADDRESS OF COMMAND BUFFER
007         LH    #0,0(,#2)           GET LENGTH OF COMMAND BUFFER
007         AR   ˇ
00007         LH    #1,2(,#2)           GET OFFSET OF COMMAND TEXT
10007         LA    #1,4(#1,#2)         POINT TO START OF COMMAND TEXT
20007         SR    #0,#1       ˇ
4630007         B     GOTIT
4640007*----------------------------------------------------------------
4650007* END TSO ONLY                          ˇ
 04660007*--------------------------------------------------------------
 04670007.PGMCALL ANOP
 04680007PGMCALL  DS    0H                                    ˇ
   04690007         L     #1,0(,#1)           GET ADDRESS OF PARM STRING
   04700007         LH    #0,0(,#1)           GET LENGTH OF PARM STRING
   04710007         LA    #1,2(,#1)           POINT TO TEXT OF PARM
     04720007GOTIT    DS    0H                  #1 = ADDRESS, #0 = LENGT
     04730007* GET THE TRUE PARM, NOT INCLUDING LEADING DATA ENCLOSED IN
SHES 04740007         LTR   #0,#0               IF PARM LENGTH IS ALREAD
     0475000ˇ
       04760007         CLI   0(#1),C'\'          IF PARM DOESN'T BEGIN
KSLASH 04770007         BNE   NOPARM              THEN NOTHING TO PROCES
       04780007         AR ˇ
 STRING  04790007         LA    #1,1(,#1)           POINT TO FIRST CHARA
SPECS    04800007         LR    #2,#1               SET KEYWORD POINTER
         04810007         XR    #3,#3     ˇ
           04820007         XR    #4,#4               SET VALUE POINTER
           04830007         XR    #5,#5               SET VALUE LENGTH T
           04840007         SPACE 1                      ˇ
             04850007***************************************************
************ 04860007*
           * 04870007* START SCANNING FOR INITIALIZATION PARAMETERS.
             * 04880007*
             * 04890007* NOTE: DON'T USE REGISTER 6!
             * 04900007*
       +
*****ˇ
                   04930007PLOOP    DS    0H
                   04940007         CR    #1,#0               IF END OF
ING                0ˇ
H UP PARM SPECS      04960007         CLI   0(#1),C'\'          IF END O
                     04970007         BE    PFINISH             THEN GO
H UP PARM SPECS      04980007      ˇ
                       04990007         BE    PCOMMA              THEN P
OMMA                   05000007         CLI   0(#1),C'='          IF EQU
                       05010007         BE    PEQUˇ
 EQUAL SIGN              05020007         CH    #3,=Y(L'PKEY)       IF K
ENGTH EXCEEDS MAX        05030007         BH    PERROR              THEN
                         05040007         LA    #3,1(,#3)        ˇ
 KEYWORD LENGTH            05050007         LA    #1,1(,#1)
                           05060007         B     PLOOP               CO
CAN                        05070007PEQUAL   DS    0H                  EQ
ˇ
RD LENGTH IS ZERO (NO KWD)   05090007         BZ    PERROR
TAX ERROR                    05100007         BCTR  #3,0
UCE LENGTH FOR ˇ
KEYWORD AREA TO BLANKS         05120007         MVC   PKEY+1(L'PKEY-1),P
                               05130007         EX    #3,MVCPKEY
EYWORD FROM PARM FIELD TO OURSˇ
T TO KEYWORD TABLE               05150007PTLOOP   DS    0H
                                 05160007         CLI   0(#14),X'FF'
EYWORD NOT FOUND IN TABLE        05170007    ˇ
EN SYNTAX ERROR                    05180007         EX    #3,CLCPKEY
MPARE KEYWORD WITH TABLE ENTRY     05190007         BE    PKGOT
 MATCH, THEN GOT IT                05200007         LA    #1ˇ
ELSE TRY NEXT TABLE ENTRY            05210007         B     PTLOOP
                                     05220007PKGOT    DS    0H
FOUND THE RIGHT KEYWORD              05230007         L     #14,8(,#14)
  LOAD POINTER TO WHERE TO STORE VAL   05240007         LA    #1,1(,#1)
  POINT TO CHARACTER FOLLOWING =       05250007         XR    #2,#2
  CLEAR KEYWORD POINTER                05260007         XR    #3,#3
  CLEAR KEˇ
    SET VALUE POINTER                    05280007         XR    #5,#5
    SET VALUE LENGTH                     05290007PLOOP2   DS    0H
    NOW SCAN VALUE                        05300007ˇÁ
#1,#0               IF END OF PARM STRING                05310007
PFINISH             THEN GO TO FINISH UP PARM SPECS      05320007
0(#1),C'\'          IF END OF PARM                       05330007 ˇ
  PFINISH             THEN GO TO FINISH UP PARM SPECS      05340007
  0(#1),C','          IF COMMA                             05350007
  PCOMMA              THEN PROCESS COMMA                   05360007
 ˇ
    PERROR              THEN ERROR                           05380007
    #5,1(,#5)           ELSE INCREMENT LENGTH                05390007
    #1,1(,#1)   ˇ
B     PLOOP2              CONTINUE SCAN                        05410007P
DS    0H                                                       05420007
LR    #1,#0               MAKE ˇ
  DS    0H                  COMMA - PROCESS KEYWORD=VALUE PAIR   0544000
  LTR   #3,#3               IF WE ARE CURRENTLY IN A KEYWORD     0545000
  BNZ   PERROR              THEN SYNTAX ERROR ˇ
    LTR   #5,#5               IF THERE IS NO VALUE                 05470
    BZ    PAFTCOM             THEN JUST SKIP THIS                  05480
    BCTR  #5,0                ELSE REDUCE LENGTH FOR EXECUTE ˇ
      MVI   PVAL,C' '           CLEAR VALUE AREA TO BLANKS           055
      MVC   PVAL+1(L'PVAL-1),PVAL                                    055
      EX    #5,MVCPVAL          MOVE VALUE FROM PARM FIELD TO OURS   055
        XR    #3,#3               SET MULTIPLIER SHIFT TO 0: 2**0=1    0
        LA    #15,PVAL+1-1(#5)    POINT TO LAST CHARACTER OF VALUE     0
        CLI   0(#15),C'K'         IF VALUE ENDS IN K                   0
        BNEˇ
7         LA    #3,10               SET MULTIPLIER SHIFT TO 10: 2**10=1K
7         BCTR  #5,0                DECREMENT LENGTH
7         B     PAFTM     ˇ
007PNOTK    CLI   0(#15),C'M'         IF VALUE ENDS IN M
007         BNE   PAFTM               THEN
007         LA    #3,20               SETˇ
20007         BCTR  #5,0                DECREMENT LENGTH
30007         B     PAFTM               ELSE
40007PAFTM    DS    0H                  #5 = LENGTH OF Aˇ
5650007         LTR   #5,#5               GET (LENGTH-1) OF NUMERIC
5660007         BM    PERROR              IF LESS THAN ZERO, ERROR
5670007         CH    #5,=H'9'            IF GREATER THAN 2**31-1, ERRO+
 05680007         BH    PERROR                                       ˇ
   05690007         BL    PNCHECK
   05700007         CLC   PVAL(10),=C'2147483647'
   05710007         BH    PERROR
   0ˇ
     05730007         BNZ   PERROR
     05740007         EX    #5,PACKVAL          CONVERT TO PACKED DECIMA
     05750007      ˇ
       05760007         SLA   #4,0(#3)            SHIFT FOR POSSIBLE K O
IPLIER 05770007         BO    PERROR              IF OVERFLOW, ERROR
       05780007         ST    #4,0ˇ
O TABLE  05790007PAFTCOM  DS    0H                  FINISHED PROCESSING
ROCEED   05800007         LA    #2,1(,#1)           SET KEYWORD POINTER
         05810007         XR    #3,#3            ˇ
           05820007         MVI   PVAL,C' '           CLEAR VALUE AREA T
           05830007         MVC   PVAL+1(L'PVAL-1),PVAL
           05840007         LA    #4,PVAL             SET VALUE ˇ
             05850007         XR    #5,#5               SET VALUE LENGTH
             05860007         B     PNEXT               CONTINUE SCAN
             05870007PNEXT    DS    0H                  CONTINUE SCAN

               05890007         BNL   NOPARM              THEN FINISHED
               05900007         LA    #1,1(,#1)           ELSE GET NEXT
R             ˇ
                 05920007         SPACE 1
                 05930007PERROR   DS    0H                  ERROR IN PAR
                 05940007    ˇ
                   05950007         WTO   MF=(E,(1)),ROUTCDE=11
                   05960007         B     NOPARM
                   05970007         SPACE 2 ˇ
                     05980007MVCPKEY  OC    PKEY(*-*),0(#2)     MOVE KEY
M PARM FIELD TO OURS 05990007MVCPVAL  OC    PVAL(*-*),0(#4)     MOVE VAL
PARM FIELD TO OURS   06000007CLCPKEY  CLC   PKEY(*-*),0(#14ˇ
D WITH TABLE ENTRY     06010007TRTVAL   TRT   PVAL(*-*),PTRTTBL   EXECUT
 FOR ALL NUMERICS      06020007PACKVAL  PACK  PDBL(8),PVAL(*-*)   EXECUT
ERT TO PACKED DECIMAL  06030007         SPACE 2
                         06040007PDBL     DS    D                   PLAC
VERT NUMERICS            06050007PKEY     DS    CL8                 PLAC
RE KEYWORD               06060007PVAL     DS    CL11                PLAC
RE VALUE                  06070007ˇÁ
                                         06080007PTABLE   DS    0A
    TABLE OF KEYWORDS                    06090007         DC    C'PDSIZE
SIZE)                                    06100007 ˇ
CSSIZE)                                    06110007         DC    C'VSSI
VSSIZE)                                    06120007         DC    C'ACSI
ACSIZE)                                    06130007         DC   ˇ
        END OF TABLE                         06140007         SPACE 2
                                             06150007PTRTTBL  DC    256Y
                                             06160007         ORG   PTRT
ˇ
                                               06180007         ORG   ,
                                               06190007NOPARM   DS    0H
               ˇ
                                                 06210007***************
************************************************ 06220007* COMPUTE STORA
 AREA24 = COMMON + PNAME(T) + ˇ
   AREA31 = STACK + SYMBOL(T) + CONS + FIXNUMS + * 06240007*
            VSS(1) + VSS(2) +                    * 06250007*
            SYMBOL(NIL) + PRINTSTACK + OBHASHˇ
**************************************************** 06270007         SP
                                                     06280007         A
F'32768'        TOTAL AMOUNT RESERVED FOR OS         0629000ˇ
,OPTPTR           GET ADDRESS OF OPTIONS               06300007
,COMLEN           GET LENGTH OF COMMON AREA            06310007
,LMODELT+LMODELNL(#6,#8) ADD LENGTHS OF T/NIL PNAMES   06320007*
                    PLUS OS SIZE                         06330007*
                    THAT GIVES THE LENGTH OF AREA24      06340007
1                                                        06350007
IN RC,LV=(ˇ
  #15,#15                                                  06370007
  ERR0001                                                  06380007
  #1,AREA24A          STOˇ
    #4,AREA24L          STORE ADDRESS OF 24-BIT AREA         06400007
    #9,#1               SAVE ADDRESS OF 24-BIT AREA (COMMON) 06410007
    #14,#4              PICK UP LENGTH Oˇ
SR    #14,#6              SUBTRACT AMOUNT RESERVED FOR OS      06430007
AR    #1,#14              POINT TO AREA TO BE GIVEN BACK TO OS 06440007
LR    #0,#6               LOAD LENGTH TO BE FREED      +
  FREEMAIN RU,LV=(0),A=(1)  FREE THE AREA FOR THE OS ˇ
    ST    #14,AREA24L         ADJUST LENGTH, NO MORE OS MEM ALLOC  06470
                                                                   06480
AR THE COMMON AREA TO ZEROES                                       0ˇ
                                                                     065
      LR    #14,#9              MVCL ADDRESS OF COMMON AREA          065
      LR    #15,#8              MVCL LENGTH OF COMMON AREA           065
   ˇ
        XR    #1,#1               MVCL LENGTH OF DATA TO MOVE (NONE)   0
        MVCL  #14,#0              MOVE HEX ZEROES TO COMMON AREA       0
                  ˇ
7* CHAIN THE COMMON AREA SAVE AREA.   NOW WE CAN CALL SYSTEM FUNCTIONS
7*
7         ST    #9,8(,#13)       ˇ
007         ST    #13,4(,#9)
007         LR    #13,#9
007         USING ZLCOMMON,#13                  ˇ
20007*
30007* NOW GET AREA31: MINIMUM SIZE = PDSIZE + 16 + MINCSS + PRINTSTACKS
40007*                                + VSSIZE                 ˇ
6650007*                                + 256K FOR OBLIST HASH ARRAY
6660007*                                + 2K FOR SMALL FIXNUM TABLE
6670007*                 MAXIMUM SIZE = PDSIZE + 16 + CSSIZE + PRINTSTAC
 06680007*                                + VSSIZE
 06690007*                                + 256K FOR OBLIST HASH ARRAY
 06700007*                                + 2K FOR SMALL FIXNUM TABLE
 06710007*   ˇ
   06720007         ICM   #6,15,PDSIZE        GET INIT PUSH DOWN STACK S
   06730007         BNZ   USEPD               IF SPECIFIED, USED IT
   06740007         ICM   #6ˇ
SIZE 06750007         BNZ   USEPD               IF SPECIFIED, USED IT
     06760007         L     #6,DEFPDS           ELSE USE DEFAULT FOR PDS
     06770007USEPD    LA    #6,7(,#6)      ˇ
Y      06780007         N     #6,=X'FFFFFFF8'
       06790007         LA    #3,##SYMLEN+TSIZE(,#6) STACK SIZE + LENGTH
NIL    06800007         A     #3,PSSIZE            + PRINTˇ
         06810007         A     #3,OHSIZE            + OBLIST HASH ARRAY
         06820007         A     #3,SFSIZE            + SMALL FIXNUM TABL
         06830007*
           06840007ˇÁ
IZE AND CSSIZE...        06850007*
                         06860007         L     #4,MINVSS           ADD
4K FOR MINIMUM VSS       06870007 ˇ
M CONS SPACE SIZE          06880007         AR    #4,#3               TH
IMUM LEN OF AREA31         06890007*
                           06900007* ADD REQUESTEˇ
 SO FAR TO GET MAXIMUM       06910007*
                             06920007         ICM   #1,15,VSSIZE
 VECTOR/STRING SPACE SIZE    06930007         BNZ   USEVS       ˇ
CIFIED, USED IT                06940007         ICM   #1,15,ZLHVSSIZ
ET MODULE VECTOR/STRING SIZE   06950007         BNZ   USEVS
CIFIED, USED IT                06960007         L     #1,=A(1024*1024)

D UP TO DOUBLEWORD BOUNDARY      06980007         N     #14,=X'FFFFFFF8'
                                 06990007         SLA   #14,1
IPLY BY 2 FOR ˇ
D TO TOTAL SIZE SO FAR             07010007         SRA   #14,1
T LENGTH OF SINGLE V/S SPACE       07020007         ST    #14,VSSIZE
T TOTAL VECTOR/STRING SPACE Sˇ
GET INIT CONS SPACE SIZE             07040007         BNZ   USECS
IF SPECIFIED, USED IT                07050007         ICM   #1,15,ZLHCSS
ELSE GET MODULE CONS SPACE SIZE      0706000ˇ
  IF SPECIFIED, USED IT                07070007         L     #1,DEFCSS
  ELSE USE DEFAULT FOR CSSIZE          07080007USECS    LA    #1,4095(,#
  ROUND UP TO 4K BOUNDARY              07090007         N  ˇ
                                         07100007         LA    #5,0(#1,
    SET MAX LEN OF AREA31                07110007         #GETMAIN VRC,L
(#4)),LOC=ANY GET STORAGE ABOVE 16MB     07120007         LTR   #15,#15
                                           07130007         BNZ   ERR000
                                           07140007         ST    #1,ARE
      SAVE ADDRESS OF 31-BIT AREA          07150007         ST    #0,ARE
      SAVˇ
        COMPUTE SIZE LEFT FOR CONSES =       07170007         SR    #3,#
        AREA31 LENGTH MINUS STACK SIZE       07180007         SH    #3,=
EN+TSIZE) MINUS LENGTHS ˇ
           MINUS LENGTH OF PRINT STACK         07200007         S     #3
           MINUS LENGTH OF OBLIST HASH ARRAY   07210007         S     #3
           MINUS LENGTH OF SMALL FIXNUM+
E            MINUS LENGTH OF V/S SPACˇ
IZE            (TWO TIMES, ONE FOR EACH SPACE)     07240007*
                                                   07250007* NOW #3 CONT
TEVER IS LEFT OVER FOR CSSIZE.                     0ˇ
                                                     07270007* IF THE LE
CONS SPACE (AFTER ALL THE OTHER LENGTHS HAVE BEEN    07280007* SUBTRACTE
T A MULTIPLE OF 4K, THEN WE MUST ADJUST IT TO A      07290007* MULTˇ
(REQUIRED BY VECTOR GC ALGORITHM).  THEREFORE, WE      07300007* REMOVE
SS AND GIVE IT TO SOMEONE ELSE - NAMELY,               07310007* THE CON
CK.                                                    07320007*
  ˇ
#14,#3              SAVE UNROUNDED CSSIZE                07340007
#3,=F'-4096'        ROUND CSSIZE DOWN TO 4K BOUNDARY     07350007
#14,#3           ˇ
  #6,#14              ADD IT TO PUSH DOWN STACK SIZE       07370007*
                                                           07380007* NOW
AINS CSSIZE ROUNDED DOWN TO MULTˇ
                                                             07400007* M
 TRUE CSSIZE IS ENOUGH.  AS LONG AS IT IS, STORE IT.         07410007*
                                               ˇ
C     #3,MINCSS           IF THIS IS LESS THAN MINIMUM LEN     07430007
BL    ERR0001             THEN ERROR                           07440007
ST    #3,CSSIZE           ELSE SAVE TRUE CONS SPACE SIZE      ˇ
                                                                 0746000
 PUSH DOWN STACK- NEEDED TO PREVENT POTENTIAL GC ANOMALIES       0747000
                                                                 0748000
    DROP  #2,#11                                                   07490
    LR    #11,#1              ADDRESS OF 31-BIT AREA = STACK ADDR  07500
    LR    #14,#1              MVCL ADDRESS OF PUSHDOWN STACK       07510
    LR    #1ˇ
      XR    #0,#0               MVCL ADDRESS TO MOVE FROM = NONE     075
      XR    #1,#1               MVCL LENGTH TO MOVE = ZERO           075
      MVCL  #14,#0         ˇ
                                                                       0
 NOW THAT WE KNOW WHERE THE COMMON AREA IS, STORE ALL OUR VALUES THERE 0
                                          ˇ
7         L     #2,HDRPTR           GET ADDRESS OF HEADER
7         ST    #2,ZLCHDADR         STORE ADDRESS OF HEADER
7         L     #2,OPTPTR           GET ADDRESS OF OPTION S
007ˇÁ
         07620007         LM    #0,#1,AREA24A       GET ADDRESS & LENGTH
IT AREA  07630007         STM   #0,#1,ZLC24ADR      STORE IN COMMON AREA
         07640007 ˇ
-BIT AREA  07650007         STM   #0,#1,ZLC31ADR      STORE IN COMMON AR
           07660007         ST    #13,ZLCCMADR        STORE ADDRESS OF C
EA         07670007         ST   ˇ
A            07680007         ST    #6,ZLCPDSIZ         STORE SIZE OF PU
STACK        07690007         ST    #11,ZLCPDADR        STORE ADDRESS OF
WN STACK     07700007*                          ˇ
               07710007* HAVING STORED REGISTERS, WE CAN NOW SET ADDRESS
ANDARD ATOMS   07720007*
               07730007         LA    #8,0(#11,#6)        COMPUˇ
TOM T =          07740007*                                   PUSH DOWN A
SH DOWN SIZE     07750007         LA    #7,TSIZE(,#8)       COMPUTE ADDR
IXNUM TABLE =    07760007*                                   ADDRESS OF
NGTH OF T + JUNK   07770007         LR    #1,#7               COMPUTE AD
 VSS #1 =          07780007         A     #1,SFSIZE            ADDRESS O
FIXNUM TABLE       07790007         ST    #1,ZLCVSADR          + LENGTH
 FIXNUM TABLEˇ
 AVAILABLE SLOT      07810007         L     #0,VSSIZE           GET LENG
E HALF OF IT         07820007         ST    #0,ZLCVSLEN         SET LENG
                     0783000ˇ
S OF VSS #2 =          07840007         ST    #1,ZLCVSOTH          ADDRE
S #1 +                 07850007         AR    #1,#0                + LEN
SS #1                  07860007         LR ˇ
ESS OF CONS SPACE =      07870007*                                   ADD
VSS #2 +                 07880007*                                   + L
 VSS #2                  07890007         LA    #10,0(#9,#ˇ
DRESS OF ATOM NIL =        07900007*                                   A
F CONS SPACE + ITS LENGTH  07910007         ST    #7,ZLCSFTBL         ST
ESS OF SMALL FIXNUM TABLE  07920007         ST    #8,ZLCT             ST
DRESS OF ATOM T              07930007         ST    #9,ZLCCSADR
DRESS OF CONS SPACE          07940007         ST    #10,ZLCNIL
DRESS OF ATOM NIL            07950007*
        ˇ
                               07970007*
                               07980007         LA    #1,##SYMLEN(,#10)
TO JUST ABOVE NIL      +
'S ADDRESS OF PRINT Sˇ
T LENGTH OF PRINT STACK            08010007         ST    #1,ZLCPSSIZ
AT'S SIZE OF PRINT STACK           08020007         A     #1,ZLCPSADR
D IN THE ADDRESS                   0ˇ
THAT'S THE END OF THE PRINT STACK    08040007         ST    #1,ZLCOBHSH
AND THE @ OF THE OBLIST HASH ARRAY   08050007         L     #1,OHSIZE
GET SIZE OF OBLIST HASH ARRAY        08060007      ˇ
  DIVIDE BY 4 TO GET...                08070007         ST    #1,ZLCOBDI
  COUNT OF ENTRIES IN OBHASH           08080007         ST    #3,ZLCCSSI
  STORE SIZE OF CONS SPACE             08090007         SRA   #3,3ˇ
    DIVIDE BY 8 TO GET...                08100007         ST    #3,ZLCNF
    TOTAL CONS CELL COUNT                08110007*
                                         08120007* CLEAR OBLIST HASH ARR
 ˇ
                                           08140007         L     #14,ZL
      MVCL ADDRESS OF OBLIST HASH ARRAY    08150007         L     #15,OH
      MVCL LENGTˇ
        MVCL ADDRESS TO MOVE FROM = NONE     08170007         XR    #1,#
        MVCL LENGTH TO MOVE = ZERO           08180007         MVCL  #14,
        SET OBLIST HASH ARRAY Tˇ
                                               08200007* Initialize smal
 table                                         08210007*
                                              ˇ
                                                 08230007*--------------
------------------------------------------------ 08240007         AIF
.VFIX                                            08250007*---ˇ
-------------------------------------------------- 08260007         LA
FIXNUM        Get fixnum type bit code             08270007         SLL
              Shift into high-order byte           08280007         LA
                Get BXLE increment                   08290007         XR
15              Initialize fixnum value to zero      08300007         ST
ZLCSFTLO        Save lowest value                    08310007         LA
SFTPFX     ˇ
5,0               Initialize fixnum value to -1        08330007
,255              Get highest fixnum to be generated   08340007SFLOOP
                          ˇ
#14,#15,0(#7)       Store fixnum words into table        08360007
#7,8(,#7)           Bump fixnum table pointer            08370007
#15,#0,SFLOOP       Do for I = 0 to 255                   08380007ˇÁ
         ST    #1,ZLCSFTHI         Save highest value
7*----------------------------------------------------------------------
7         AGO   .VFIXEND
7*ˇ
007.VFIX    ANOP
007*--------------------------------------------------------------------
007         SPACEˇ
50007*
60007* This code initializes the small fixnum table with a series of
70007* contiguous fixnums (8-bytˇ
8480007* assumes a section size of 128, meaning that the process takes
8490007* 2 vector operations (if the section size were 256, we could do
8500007* it in 1 vector operation).  Fixnums -1ˇ
 08510007* through vector operations (making use of the VLINT instructio
 08520007* to create a vector of consecutive integer values), and fixnum
 08530007* 255 is created scalarly afterward.                 ˇ
   08540007*
   08550007         SPACE 1
   08560007         VLVCA 128                 Section size to 128 (not m
)    08570007         LA    #14,##FIXNUM        Get fixnum type bit code
     08580007         SLL   #14,24              Shift into high-order by
     08590007         XR    #15,15              Initialize fixnum value
     0860000ˇ
       08610007         BCTR  #15,0               Make first fixnum valu
       08620007         LA    #7,#SFTPFX          Address table location
       08630007         VLQˇ
t halves 08640007         VLINT #V1,#15             Right vector = integ
hru 126  08650007         VSTD  #V0,#7              Store vector doublew
table    08660007*                        ˇ
 of table  08670007*                                  #15 now contains (
= 127      08680007         VLINT #V1,#15             Right vector = int
7 thru 254 08690007         VSTD  #V0,#7              Stoˇ
 doublewords 08700007*                                  #7 now points to
ot in table  08710007*                                  #15 now contains
8) = 255     08720007         STM   #14,#15,0(#7)       Store last entry
xnum table     08730007         ST    #15,ZLCSFTHI        Save highest f
lue            08740007*------------------------------------------------
-------------- 08750007.VFIXEND ANOP
       +
-----ˇ
                   08780007* THE FREE LIST IS INITIALIZED ONLY WHEN A GA
LLECTION OCCURS.   08790007* OTHERWISE IT IS ACCESSED SEQUENTIALLY BY CO
                   0ˇ
NG CELLS TOGETHER.   08810007*
                     08820007* INITIALIZE FILE BLOCK POINTERS
                     08830007* (NOTˇ
TERS REMAIN ZERO)      08840007*
                       08850007         L     #7,OFPTR            GET AD
 STD OUTPUT FILE BLOCK 08860007         ST    #7,Zˇ
OF STD OUTPUT FILE BLOCK 08870007         L     #7,ZLFCHAIN         GET
OF FIRST OUTPUT FILE BLK 08880007         ST    #7,ZLCOFBAD         SET
OF FIRST OUTPUT FILE BLK 08890007         L     #7,IFPTR         ˇ
S OF STD INPUT FILE BLOCK  08900007         ST    #7,ZLCSTDIN         SE
S OF STD INPUT FILE BLOCK  08910007         L     #7,ZLFCHAIN         GE
S OF FIRST INPUT FILE BLK  08920007         ST    #7,ZLCIFBAD         SE
ˇ
 OF STANDARD INPUT FILE BLK  08940007         TM    ZLFFLAG1,ZLFTERM
ARD INPUT IS A TERMINAL FILE 08950007         BZ    *+8
               ˇ
NPUT TERMINAL FILE BLK PTR     08970007         L     #7,ZLCSTDOU
DR OF STANDARD OUTPUT FILE BLK 08980007         TM    ZLFFLAG1,ZLFTERM
NDARD OUTPUT IS A TERM FILE   ˇ
                                 09000007         ST    #7,ZLCOFTRM
 OUTPUT TERMINAL FILE BLK PTR    09010007         SPACE 1
                                 09020007****ˇ
********************************** 09030007*
                                 * 09040007* The following section of co
een removed, because we think    * 09050007* that we WILL beˇ
pplications under themselves       * 09060007* (e.g. via the TSO functio
 omit this check.                  * 09070007*
                                   * 09080007***************************
************************************** 09090007         SPACE 1
                                       09100007         AGO   .NCKSUBS
                                       09110007*------------------------
----------ˇ
                                         09130007*
                                         09140007* SEE IF ZILSUBS IS ALR
DED.  IF SO, ZIL ALREADY  ACTIVE          09150007ˇÁ
                                                         09160007* NOTE:
N'T WORK IF ZILSUBS IS IN THE LPA, WHICH IT CAN'T BE     09170007*
IT'S NOT REENTRANT ANYHOW.                               09180007*ˇ
                                                           09190007
  #15,X'21C'          ADDRESS OF CURRENT TCB               09200007
  #15,X'7C'(,#15)     TCBJSTCB: CURRENT JOB STEP TCB       09210007
 ˇ
    0H                  IF NO MORE JOB PACK ENTRIES          09230007
    NOTLDED             THEN ZILSUBS IS NOT IN STORAGE       09240007
C   8(8,#14),$ZIˇ
BE    INSTOR              THEN ZILSUBS IS ALREADY IN STORAGE   09260007
ICM   #14,15,0(#14)       ELSE GET NEXT JOB PACK QUEUE ENTRY   09270007
B     JPQLOOP             AND Cˇ
  DS    0H                  ZILSUBS NOT LOADED...                0929000
  SPACE 1                                                        0930000
----------------------------------------------ˇ
UBS ANOP  ,                                                        09320
    SPACE 1                                                        09330
                                                             ˇ
ET UP INTERFACES TO RESIDENT ROUTINES                                093
                                                                     093
      LOAD  EPLOC=$ZILSUBS      LOAD SUBROUTINE MODULE               093
        ST    #0,ZLCSUBS          SAVE ITS ADDRESS                     0
        LR    #15,#0                                                   0
        L     #15,0(,#15)         GET POINTER TO SUBROUTINE ADDRESSES  0
        USIˇ
7         L     #0,ZSACONS          CONS PLUS GARBAGE COLLECTOR
7         ST    #0,ZLCCONS
7         L     #0,ZSAFGETˇ
007         ST    #0,ZLCFGETI
007         L     #0,ZSAFGETO         OUTPUT FILE BLOCK ACCESSOR
007         ST    #0,ZLCFGETO            ˇ
70007         L     #0,ZSAPDSO          STACK OVERFLOW ERROR ROUTINE
80007         ST    #0,ZLCPDSO
90007         L     #0,ZSAERR           GENERAL ERROR ROˇ
9500007         ST    #0,ZLCERR
9510007         L     #0,ZSATHROW         THROW PROCESSOR
9520007         ST    #0,ZLCTHROW                                      +
 09530007         L     #0,ZSATPUT          TPUT PROCESSOR           ˇ
   09540007         ST    #0,ZLCTPUT
   09550007         L     #0,ZSABIG           BIGNUM ALLOCATION ROUTINE
   09560007         ST    #0,ZLCBIG
   0ˇ
     09580007         ST    #0,ZLCINTN
     09590007         L     #0,ZSAABLD          ATOM BUILDING ROUTINE
     09600007      ˇ
       09610007         L     #0,ZSAADMP          ATOM DUMPING ROUTINE
       09620007         ST    #0,ZLCADMP
       09630007         L     #0,Zˇ
R        09640007         ST    #0,ZLCVSS
         09650007         L     #0,ZSAGETC          CHARACTER INPUT ROUT
         09660007         ST    #0,ZLCGETC       ˇ
           09670007         L     #0,ZSAPRIN          PRINT ROUTINE
           09680007         ST    #0,ZLCPRIN
           09690007         L     #0,ZSATERP          TERPRI ROUˇ
             09700007         ST    #0,ZLCTERP
             09710007         L     #0,ZSAFINT          FORTRAN INTERFAC
E            09720007         ST    #0,ZLCFINT

DLER           09740007         ST    #0,ZLCKERR
               09750007         L     #0,ZSACVBF          BIGNUM-TO-FLOA
SION          ˇ
                 09770007         L     #0,ZSASINT          COMPILED COD
 INITIALIZATION  09780007         ST    #0,ZLCSINT
                 09790007    ˇ
INDING             09800007         ST    #0,ZLCSBND
                   09810007         L     #0,ZSAFBND          LEXICAL VA
INDING             09820007         ST    #0ˇ
                     09830007         L     #0,ZSAMDF           DOUBLE F
SING                 09840007         ST    #0,ZLCMDF
                     09850007         L     #0,ZSAVALS     ˇ
 returning             09860007         ST    #0,ZLCVALS
                       09870007         DROP  #15
                       09880007*
                         09890007* SET UP INTERFACE TO PUSHDOWN STACK OV
OUTINE                   09900007*
                         09910007         MVC   0(4,#13),PDSCODE1
                          09920007ˇÁ
L),PDSCODE2                              09930007*
                                         09940007* SET UP INTERFACE TO Z
ES TABLE                                 09950007*ˇ
                                           09960007         L     #15,HD
                                           09970007         USING ZLHEAD
                                           09980007         L    ˇ
        GET ADDRESS OF ZILMODS               09990007         DROP  #15
                                             10000007         ST    #15,
        STORE ADDRESS OF ZILMODS             10010007*
ˇ
PLAYING SQUARE BRACKETS WHEN PRINC IS DONE     10030007* TO A FILE IN TA
  USED BY MACSYMA.                             10040007*
               ˇ
C0'         USE LEFT CURLY BRACE "{"             10060007         MVI
D0'         USE RIGHT CURLY BRACE "}"            10070007*
                              ˇ
NTS DEFINED IN THE TABLE BELOW ARE USED WHEN A     10090007* PRIN1 IS DO
E TERMINAL, OR WHEN A PRINC IS DONE TO THE         10100007* TERMINAL AN
ODE HAS BEEN TURNED OFF.                     ˇ
                                                     10120007* ALLOCATE
INAL OUTPUT TRANSLATE TABLE                          10130007*
                                                     1014000ˇ
,256              GET A 256-BYTE BUFFER                10150007
R,LV=(0)                                               10160007
4,#1                                                   10170007
#14,ZLCTRMTR        SET ADDRESS OF TRANSLATE TABLE       10180007
0(256,#14),TRMTRTBL SET UP THE DEFAULT TRANSLATE TABLE   10190007
X'AD'(#14),X'41'     DISPLAY LEFT BRACKET AS HEX 41      10200007
X'BD'(#14)ˇ
ZE ,                  GET TERMINAL LINE SIZE               10220007
  #15,#15             SKIP TRANSLATE TABLE ALTERATION IF   10230007
  NOTRCHG              SVˇ
    #0,=H'32'           IF THIS IS A 32-LINE TERMINAL        10250007
E   NOTRCHG             THEN (ASSUME 3179, NOT 3279)         10260007
I   X'AD'(#14),X'BA'     DISPLAY LEFT BRˇ
MVI   X'BD'(#14),X'BB'     DISPLAY RIGHT BRACKET AS HEX BB     10280007N
DS    0H                                                       10290007*
                                                       +
E THE "RMNIL" OBJECT RETURNED BY THE (RMNIL) FUNCTIONˇ
                                                                   10320
    LA    #15,ZLCRMNIL                                             10330
    LR    #0,#15                                                   1ˇ
      STM   #15,#0,ZLCRMNIL     (CAR(RMNIL))=(CDR(RMNIL))=(RMNIL)    103
                                                                     103
REATE THE "UNBOUND" OBJECT                                           103
   ˇ
        LA    #15,ZLCUNBND                                             1
        LR    #0,#15                                                   1
        STM   #15,ˇ
7*
7* INITIALIZE GARBAGE COLLECTION FLAGS
7*                               ˇ
007         MVI   ZLCGCFLG,ZLCGCINT+ZLCGCMSG
007*
007* INITIALIZE OTHER COMMON AREA FIELDS        ˇ
70007* NOTE THAT ZLCMSLVL (MESSAGE LEVEL) IS INITIALLY ONE
80007* (I.E. INITIALLY DISPLAY ALL BUT INFORMATIONAL MESSAGES)
90007*                                                         ˇ
0500007         MVI   ZLCMSLVL,1          SET MSGLEVEL TO 1
0510007         L     #1,TIOTDRIB
0520007         ST    #1,ZLCDRIBL         SET ADDRESS OF DRIBBLE DCB IF
 10530007         ST    #10,ZLCGCEND        SET END-OF-FREE-LIST POINTER
 10540007         L     #1,X'21C'           GET CURRENT TCB ADDRESS
 10550007         L     #1,0(,#1)           GET CURRENT PRB ADDRESS
 10560007    ˇ
)  10570007         AIF   (&ZILXA).IPM
   10580007*
   10590007* In a non-XA sysˇ
     10600007* program mask we just look at the PSW.
     10610007*
     10620007         BALR  #1,0           ˇ
       10630007         AGO   .AFTIPM
       10640007.IPM     ANOP
       10650007*                                          ˇ
         10660007* In an XA system BALR won't get the PSW, but we have t
         10670007* instruction to access the program mask.
         10680007*
           10690007ˇÁ
AM MASK FROM PSW         10700007.AFTIPM  ANOP
                         10710007         STCM  #1,8,ZLCPMASK       SAVE
 PROGRAM MASK            10720007 ˇ
 OBHASH THRESHOLD COUNT    10730007         LA    #1,ZLFBLEN          GE
 OF A FILE BLOCK           10740007         STH   #1,ZLCFBLEN         ST
 BLOCK LENGTH              10750007*             ˇ
                             10760007* DETERMINE THE VALUE OF ACTIVE CON
SIZE TO USE                  10770007*
                             10780007*                          ˇ
                               10790007         L     #2,OPTPTR
S ZIL HEADER OPTIONS           10800007         USING ZLHOPTS,#2
                               10810007         ICM   #6,15,ACSIZE

PECIFIED, USED IT                10830007         ICM   #6,15,ZLHACSIZ
 GET MODULE ACTIVE CONS SIZE     10840007         BNZ   USEAC
PECIFIED, USEDˇ
SE USE DEFAULT FOR ACSIZE          10860007USEAC    LA    #6,7(,#6)
UND UP TO DOUBLEWORD BOUNDARY      10870007         N     #6,=X'FFFFFFF8
                             ˇ
IF ACSIZE EXCEEDS TOTAL CSSIZE       10890007         BNH   ACSIZOK
THEN                                 10900007         L     #6,ZLCCSSIZ
 SET ACSIZE TO TOTAL CSSIZE          1091000ˇ
                                       10920007         DROP  #2
                                       10930007*
                                       10940007* RESET #9 Tˇ
F ACTIVE CONS SPACE RATHER THAN          10950007* BOTTOM OF TOTAL CONS
ALSO SET OTHER FIELDS RELATING TO        10960007* DYNAMICALLY EXPANDING
ACE.                                     10970007*
                                           10980007         LR    #9,#10
      GET NIL, WHICH IS AT TOP OF CONS SP  10990007         SR    #9,#6
      BUMP DOWN TO BOTTOM OF ACTIVE CONSES 11000007         C     #9,ZLC
      IF ˇ
        THEN                                 11020007         L     #9,Z
         USE TOTAL CSSIZE BOTTOM POINTER     11030007CSGE1M   ST    #9,Z
        THAT'S NOW POINTˇ
          GET INITIAL ACTIVE CONS SPACE SIZE   11050007         SRL   #0
          MINIMUM NUMBER OF CONS CELLS         11060007         ST    #0
D         STORE MINIMUM NUMBER OF DOUBL+
ACF         THIS IS ALSO THE FREE COUˇ
                                                   11090007*
                                                   11100007* INITIALIZE
OL TEMPLATE                                        1ˇ
                                                     11120007* ##PNAME I
T - MUST ALWAYS BE FILLED BY CREATOR                 11130007*
                                                     11140007      ˇ
CNSYM+##TYPE,##SYMBOL SET SYMBOL TYPE BITS             11150007
CNSYM+3,##SYMLEN      SET SYMBOL LENGTH (REST IS X'')  11160007
0,ZLCNSYM+##PLIST     SET PROPERTY LIST TO NIL         11170007
,Zˇ
#0,ZLCNSYM+##PVALUE     SET VALUE CELL TO UNBOUND        11190007
#0,ZLCNSYM+##PFUNC      SET FUNCTION CELL TO UNBOUND     11200007*
                 ˇ
  #10,ZLCNSYM+##PPKG      SET PACKAGE CELL TO NIL          11220007*
                                                           11230007* BUI
 T AND NIL                      ˇ
                                                             11250007
C   PNAMET(LMODELT,#13),MODELT       BUILD T'S PRINT NAME    11260007
C   PNAMENIL(LMODELNL,#13),MODELNIL  BUILD NIL'ˇ
MVC   0(##SYMLEN,#8),ZLCNSYM MOVE NEW SYMBOL TEMPLATE TO T     11280007
MVC   0(##SYMLEN,#10),ZLCNSYM MOVE NEW SYMBOL TEMPLATE TO NIL  11290007
LA    #0,PNAMET(,#13)     POINT TO WHERE T'S PRINT NAME'LL BE ˇ
  ST    #0,##PNAME(,#8)     SET PRINT NAME POINTER OF T          1131000
  LA    #0,PNAMENIL(,#13)   POINT TO WHERE NIL'S PNAME WILL BE   1132000
  ST    #0,##PNAME(,#10)    SET PRINT NAME POINTER OF NIL        1133000
                                                                   11340
Y IMPORTANT THAT ##PVALUE AND ##CDR ARE IDENTICAL, BECAUSE IN THE  11350
E OF NIL BOTH (SYMBOL-VALUE NIL) AND (CDR NIL) MUST BE NIL!!!!!!!  11360
            ˇ
      ST    #10,##PVALUE(,#10)  VALUE CELL OF NIL POINTS TO NIL      113
      ST    #8,##PVALUE(,#8)    VALUE CELL OF T POINTS TO T          113
 and NIL are interned - setˇ
        ST    #8,##PPKG(,#8)      SET T'S PACKAGE CELL                 1
        ST    #8,##PPKG(,#10)     SET NIL'S PACKAGE CELL               1
                                          ˇ
7*
7* SET FILE ATOMS TO NIL FOR STANDARD INPUT AND OUTPUT
7*                                                       
007ˇÁ
         11470007         ST    #10,ZLFATOM
         11480007         L     #7,ZLCSTDOU
         11490007 ˇ
           11500007*
           11510007* INITIALIZE STANDARD VARIABLES
           11520007*             ˇ
             11530007         ST    #10,ZLCSALST        SET INITIAL SPEC
T TO NIL     11540007         ST    #10,ZLCFALST        SET INITIAL LEXI
T TO NIL     11550007         ST    #10,ZLCOBLSTˇ
NIL            11560007         LR    #6,#10              GET ADDRESS OF
               11570007         EJECT
               11580007*                                       ˇ
                 11590007* OBJECT LIST INITIALIZATION
                 11600007*
                 11610007* NOTE THAT ALTHOUGH WE ARE ADDING SYMBOLS TO T
IST, THESE         11620007* SYMBOLS DO NOT GET ENTERED IN THE HASH TABL
 MUST BE           11630007* TAKEN INTO ACCOUNT WHEN USING THE VALUE IN
, WHICH            11640007* REPRESENTS THE MAXIMUM NUMBER OF HASH ENTRI
ABLE FOR     ˇ
                     11660007*
                     11670007* (SETQ OBLIST (CONS NIL OBLIST)
                     1168000ˇ
                       11690007         LR    #1,#10              GET AD
 NIL                   11700007         LR    #2,#6               GET AD
 OBLIST                11710007         L  ˇ
                         11720007         #BASR #14,#15
                         11730007         LTR   #6,#15              LOAD
IST POINTER              11740007         BZ    IACONSNG  ˇ
                           11750007*
                           11760007* (SETQ OBLIST (CONS T OBLIST)
                           11770007*
                             11780007         LR    #1,#8
ESS OF T                     11790007         LR    #2,#6
ESS OF OBLIST                11800007         L     #15,ZLCCONS
        ˇ
                               11820007         LTR   #6,#15
EW OBLIST POINTER              11830007         BZ    IACONSNG
                       +
NEW OBLIST POINTER   ˇ
                                   11860007* Initialize the current ZIL
to "ZDPRINT", the default          11870007* ZIL printer, and the curren
ader to "ZDREAD", the default      1ˇ
                                     11890007*
                                     11900007         L     #15,ZLCMODS
Get address of ZILMODS               11910007      ˇ
                                       11920007         L     #14,Z@ZDPR
  Get address of ZDPRINT pointer       11930007         L     #14,0(,#14
  Get address of ZDPRINT               11940007         ST    #14,ˇ
    Set current printer address          11950007         L     #14,Z@ZD
    Get address of ZDREAD pointer        11960007         L     #14,0(,#
    Get address of ZDREAD                11970007         ST    #14,ZLCC
 ˇ
                                           11990007*
                                           12000007* INITIALIZE ALL OBJE
ERS IN THE LOAD ˇ
                                             12020007* Note that since Z
xpects #12 to be the entry point of the      12030007* module we're usin
ocate objects, we must set #12 ˇ
 program function.  This means that we can     12050007* not use #12 as
egister in this segment of code.               12060007*
                                              ˇ
BASE        Save base register                   12080007         L
TR          Get address of code's entry point    12090007         DROP
                                                 12100007    ˇ
HDADR         Get address of compiled code header  12110007         L
CSINT         Get address of ZILSINT               12120007         XR
              Can't have CONS GC from this env.    12130007         #BAS
#15             Call ZILSINT to init code objects    12140007         US
4               ON return #14 points here, right?    12150007         L
SAVEBASE        Restore base register                12160007         DR
           ˇ
LINIT,#12                                              12180007*
                                                       12190007* OBJECT
TIALIZATION IS COMPLETE.  ˇ
                                                         12210007* IF TH
YTHING ELSE TO DO, DO IT HERE.                           12220007*
                                                          12230007ˇÁ
         NI    ZLCGCFLG,255-ZLCGCINT TURN OFF ZILINIT FLAG
7*
7* NOW PERFORM MISCELLANEOUS ZIL INITIALIZATION.
7*ˇ
007         L     #15,ZLCMODS         Get address of ZILMODS
007         USING ZMOD,#15
007         L    ˇ
00007         DROP  #15
10007         L     #15,0(,#15)         Get address of ZEVINIT
20007         LA    #1,0(,#11)  ˇ
2330007         #BASR #14,#15             Call ZEVINIT
2340007*
2350007* ZIL INITIALIZATION IS COMPLETE.       ˇ
 12360007*
 12370007         EJECT
 12380007ZLRETURN DS    0H                  RETURN TO MAIN LINˇ
   12390007         SPACE 1
   12400007         L     #13,4(,#13)         RESTORE SAVE AREA
   12410007         DROP  #13
     12420007         SAVE  (8,11)              STORE REQUIRED ZIL REGS
REA  12430007         LM    #14,#12,12(#13)
     12440007         XR    #15,#15             SET RETURN CODE TO ZERO
     1245000ˇ
       12460007         EJECT
       12470007IACONSNG DS    0H                  WHAT HAPPENS WHEN FREE
ED UP  12480007ERR0001  DS ˇ
         12490007         L     #1,=A(ZIL0001)
         12500007         WTO   MF=(E,(1)),ROUTCDE=11
         12510007         ABEND 0001,DUMP ˇ
           12520007         EJECT
           12530007OUTNOPEN DS    0H                  STANDARD OUTPUT (Z
 THERE     12540007         SPACE 1                      ˇ
             12550007         L     #1,=A(ZIL0005)
             12560007         WTO   MF=(E,(1)),ROUTCDE=11
             12570007         ABEND 0005,DUMP
               12580007         SPACE 1
               12590007INNOPEN  DS    0H                  STANDARD INPUT
NOT THERE      12600007         L     #1,=A(ZIL0004)
       +
     ˇ
                   12630007         SPACE 1
                   12640007INSTOR   DS    0H                  ZILSUBS AL
ADED...            1ˇ
                     12660007         WTO   MF=(E,(1)),ROUTCDE=11
                     12670007         ABEND 0003,DUMP
                     12680007      ˇ
                       12690007OUTEXIT  DS    0H
                       12700007         SPACE 1
                       12710007*******************ˇ
************************ 12720007*
                       * 12730007* DCB OPEN EXIT FOR ZIL OUTPUT FILE.  T
S IN DCB INFO.         * 12740007*                               ˇ
                         * 12750007* NOTE: THIS EXECUTES IN AMODE 24 (I
                         * 12760007*
                         * 12770007*************************************
ˇ
                             12790007         PUSH  USING
                             12800007         USING DCBSTUFF,#1
               ˇ
                               12820007DSORG    EQU   DCBSTUFF+X'18',2,C
                               12830007RECFM    EQU   DCBSTUFF+X'24',1,C
                              ˇ
                                 12850007BLKSIZE  EQU   DCBSTUFF+X'3E',2
                                 12860007         SPACE 1
                                 12870007ZILIˇ
                                   12880007         SPACE 1
                                   12890007         USING OUTEXIT,#15
                                   12900007         OC    DSˇ
IF NO DSORG PRESENT                  12910007         BNZ   OXGOTDS
THEN                                 12920007         MVI   DSORG,X'40'
 SET DSORG = PS                      12930007OXGOTDS  DS    0H
                                       12940007         CLI   RECFM,X'00
  IF NO RECFM PRESENT                  12950007         BNE   OXGOTRF
  THEN                                 12960007         MVI   RECFM,X'94
   SET RECˇ
     AND PROCESS FIXED LRECL.            12980007OXGOTRF  DS    0H
    ELSE THERE IS A RECFM                12990007         TM    RECFM,X'
    IF RECFM = V..                        13000007ˇÁ
OXFIXED             THEN                                 13010007
LRECL,LRECL          IF THERE'S NO LRECL                 13020007
OXGOTLR              THEN                                13030007 ˇ
  #15,255               SET LRECL = 255                    13040007
  #15,LRECL                                                13050007
  #15,3120              SET BLKSIZE = 3120                 13060007
 ˇ
    #14                   AND RETURN.                        13080007OXF
    0H                                                       13090007
    LRECL,LRECL ˇ
BZ    OXSETF              THEN SET LRECL AND BLKSIZE           13110007O
OC    BLKSIZE,BLKSIZE     IF BLOCK SIZE EXISTS                 13120007
BNZR  #14                 THEN ˇ
  LA    #15,3120/80         ELSE GET DEFAULT BLOCKING FACTOR     1314000
  MH    #15,LRECL           MULTIPLY BY LRECL                    1315000
  STH   #15,BLKSIZE         SET BLOCKSIZE     ˇ
    BR    #14                                                      13170
F   DS    0H                  SET LRECL AND BLOCKSIZE              13180
    TM    RECFM,X'04'         IF RECFM = ..A                 ˇ
      BO    OXSETFA             THEN GO TO SET VALUES FOR RECFM=FBA  132
      LA    #15,80              ELSE SET LRECL = 80                  132
      STH   #15,LRECL                                                132
        LA    #15,3120            AND SET BLKSIZE = 3120               1
        STH   #15,BLKSIZE                                              1
        BR    #14                                                      1
XSETFA  DS ˇ
7         LA    #15,81               SET LRECL = 81
7         STH   #15,LRECL
7         LA    #15,3078  ˇ
007         STH   #15,BLKSIZE
007         BR    #14                  AND RETURN.
007         SPACE 1                      ˇ
20007         POP   USING
30007         EJECT
40007*                                                  ˇ
3350007* CONSTANTS, ETC.
3360007*
3370007PDSIZE   DC    A(0)                SIZE OF PUSH DOWN STACK      +
 13380007VSSIZE   DC    A(0)                SIZE OF EACH STRING/VECTOˇ
   13390007CSSIZE   DC    A(0)                SIZE OF CONS SPACE
   13400007ACSIZE   DC    A(0)                SIZE OF ACTIVE CONS SPACE
   13410007PSSIZE   DC    A(8192)             SIZE OF PRINT STACK
   1ˇ
ORDS 13430007SFSIZE   DC    A(256*8)            SIZE OF SMALL FIXNUM TAB
#'S  13440007OBTHRESH DC    A(50000)            MAX # OF SYMBOLS YOU CAN
     13450007MINCSSˇ
       13460007MINVSS   DC    A(2*4096)           MINIMUM V/S SPACE SIZE
*4K    13470007DEFCSS   DC    A(4*1024*1024)      DEFAULT CONS SPACE SIZ
       13480007DEFPDS   DC    A(64ˇ
 = 64K   13490007DEFACS   DC    A(2*1024*1024)      DEFAULT ACTIVE CONS
M        13500007IFPTR    DC    A(0)                ADDRESS OF INPUT FIL
CHAIN    13510007OFPTR    DC    A(0)             ˇ
CK CHAIN   13520007HDRPTR   DS    A                   ADDRESS OF PROGRAM
           13530007OPTPTR   DS    A                   ADDRESS OF OPTIONS
           13540007MODPTR   DS    A                   ADDRESS OFˇ
             13550007SAVEBASE DS    A                   Place to store b
             13560007TIOTZILI DC    A(0)                ADDRESS OF TIOT
R DD ZILI    13570007TIOTZILO DC    A(0)                ADDRESS OF TIOT

FOR DRIBBLE    13590007AREA24A  DS    A                   ADDRESS OF 24-
RY AREA        13600007AREA24L  DS    A                   LENGTH OF 24-B
Y AREA        ˇ
MORY AREA        13620007AREA31L  DS    A                   LENGTH OF 31
ORY AREA         13630007$ZILSUBS DC    CL8'ZILSUBS'
                 13640007    ˇ
                   13650007         DS    0F                  Model prin
tring for T        13660007MODELT   DC    YL1(##STRING),AL3(1),C'T',XL3'
                   13670007LMODELT  EQU   *-ˇ
print name string    13680007         SPACE 1
                     13690007         DS    0F                  Model pr
 string for NIL      13700007MODELNIL DC    YL1(##STRING),Aˇ
                       13710007LMODELNL EQU   *-MODELNIL          Length
l print name string    13720007         SPACE 1
                       13730007TNILLEN  EQU   LMODELT+LMODELNL
                         13740007         SPACE 1
                         13750007XLOUT    DC    0F'0',X'85',AL3(OUTEXIT)
ST FOR OUTPUT DCB        13760007         SPACE 1
                          13770007ˇÁ
                                         13780007         SPACE 1
                                         13790007         USING ZLCOMMON
                                         13800007Pˇ
      FIRST-LEVEL INTERFACE TO STACK OVFLO 13810007PDSCODE2 L     #2,ZLC
      SECOND-LEVEL INTERFACE TO            13820007         BR    #2
       PUSH DOWN STACK OVERFLOW ROUTINE    13830007         DROP ˇ
                                             13840007         SPACE 1
                                             13850007         LTORG
                                             13860007         SPACE 1
ˇ
          TEMPORARY SAVE AREA                  13880007         SPACE 1
                                               13890007*
               ˇ
UT TRANSLATE TABLE                               13910007* NOTE: THIS IS
INTO A BUFFER ACCESSIBLE FROM THE                13920007* COMMON AREA.
E MODIFIED AT ANY TIME.       ˇ
                                                   13940007TRMTRTBL DC
7A7A7A7A7A7A7A7A7A7A7A7A7A7A'                      13950007         DC
7A7A7A7A7A7A7A7A7A7A7A7A1E7A'                ˇ
7A7A7A247A7A7A7A7A7A7A7A7A7A7A'                      13970007         DC
7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A'                      13980007         DC
4142434445464748494A4B4C4D4E4F'                      1399000ˇ
505152535455565758595A5B5C5D5E5F'                      14000007
606162636465666768696A6B6C6D6E6F'                      14010007
707172737475767778797A7B7C7D7E7F'                      14020007
X'808182838485868788898A8B8C8D8E8F'                      14030007
X'909192939495969798999A9B9C9D9E9F'                      14040007
X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'                      14050007
X'B0B1B2B3ˇ
  X'C0C1C2C3C4C5C6C7C8C9CACBCCCD7A7A'                      14070007
  X'D0D1D2D3D4D5D6D7D8D9DADBDC7A7A7A'                      14080007
  X'E0E1E2E3E4E5E6E7E8E9Eˇ
    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFD7A7A'                      14100007
ACE 1                                                        14110007IND
B   DDNAME=ZILI,                        ˇ
      MACRF=GL,                                               X14130007
      DSORG=PS,                                               X14140007
      RECFM=FB                                         +
                   NOTE - NO EODAD. THIS IS SET BY EXˇ
DCB DCB   DDNAME=ZILO,                                            X14170
          MACRF=PL,                                               X14180
          DSORG=PS,                                               X1ˇ
            EXLST=XLOUT                                              142
BLDCB DCB   DDNAME=ZILDRIBL,                                        X142
            MACRF=PL,                                               X142
   ˇ
              RECFM=FB,                                               X1
              LRECL=80,                                               X1
              BLKSˇ
7INDD     EQU   INDDDCB+40,8,C'C'   DDNAME OF STANDARD INPUT FILE
7OUTDD    EQU   OUTDDDCB+40,8,C'C'  DDNAME OF STANDARD OUTPUT FILE
7DRIBLDD  EQU   DRIBLDCB+40,8,C'Cˇ
007         SPACE 1
007ZIL0001  WTO   ROUTCDE=11,MF=L,
007               'ZIL0001 NO STORAGE AVAILABLE ˇ
20007ZIL0002  WTO   ROUTCDE=11,MF=L,
30007               'ZIL0002 SYNTAX ERROR IN PARAMETER FIELD, INITIALIZA
40007                PARAMETERS IGNORED.'                      ˇ
4350007ZIL0003  WTO   ROUTCDE=11,MF=L,
4360007               'ZIL0003 ZIL ALREADY LOADED, RECURSIVE INVOCATION
4370007               LOWED.'
 14380007ZIL0004  WTO   ROUTCDE=11,MF=L,
X14390007               'ZIL0004 STANDARD INPUT FILE "ZILI" NOT AVAILABL
X14400007               T BE OPENED.'
 14410007ZIL0ˇ
  X14420007               'ZIL0005 STANDARD OUTPUT FILE "ZILO" NOT AVAIL
NNX14430007               OT BE OPENED.'
   14440007         SPACE 1 ˇ
     14450007         #ZCOM   ,                 MAP THE COMMON AREA
     14460007         #ZSFT   ,                 MAP THE SMALL FIXNUM TAB
     14470007         #ZHDR   ,            ˇ
CEDURE 14480007         #ZSUB   ,                 MAP THE SUBROUTINE POI
       14490007         #ZMOD   ,                 MAP THE ZIL MODULES TA
       14500007         EJECT                             ˇ
         14510007* MORE EQUATES
         14520007COMLEN   EQU   (ZLCCOMLN+7)/8*8    LENGTH OF COMMON ARE
DOUBLEWD 14530007PNAMET   EQU   COMLEN              OFFSET OF PRINT NAME
           14540007ˇÁ
INT NAME OF NIL          14550007VSSOFF   EQU   PNAMENIL+LMODELNL   OFFS
CTOR/STRING SPACE        14560007MIN24    EQU   VSSOFF+2*4096       MINI
TH FOR 24-BIT STORAGE    14570007Tˇ
DR OF T AND SMALL FIXNUMS  14580007         EJECT
                           14590007         AIF   (NOT &ZILTSO).NOCPPL
                           14600007         IKJCP0 PL ,
                             14610007.NOCPPL  ANOP
                             14620007         END
                             14630007
ILINTLN - BUILT-IN ZIL 1.3 SUBROUTINE'                 00010019*********
****************************************************** 00020019*
                                                     * 00030019*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00040019*
       All rights reserved.                            * 00050019*
                                                       * 00060019*******

                                                         * 00080019* ZIL
kes one integer argument.  Alias for INTEGER-LENGTH.     * 00090019*
              ˇ
sp complete.                                               * 00110019*
                                                           * 00120019* S
d vector versions.           ˇ
                                                             * 00140019*
************************************************************** 00150019
GBLB  &ZILVF                                ˇ
N #ZBEG MINARGS=1,MAXARGS=1,NAME='INTEGER-LENGTH'                0017001
---------------------------------------------------------------* 0018001
late the number of significant bits in the integer.  For   ˇ
itive integers, this is the number of bits up to and including   * 00200
 leftmost "1" bit.  For negative numbers in 2's complement, it   * 00210
the number of bits up to and including the leftmost "0" bit.     * 00220
n this scheme, the integers 0 and -1 are held to have 0 length.    * 002
                                                                   * 002
n the scalar version, speed is biased towards the smaller fixnums  * 002
y searchiˇ
 the right.                                                          * 0
                                                                     * 0
 Two observations will eˇ
9* First, by inverting all the bits in a negative 2's complement       *
9* number, the problem is converted into a positive number which will  *
9* always have the same INTEGER-LENGTH.ˇ
019* of a negative number can be determined from the sign-and-magnitude
019* representation if you note the simple exception that a number that
019* is a power of 2 has an INTEGER-LENGTH one less thˇ
50019* number of the same magnitude.
60019*
70019* The difference in speed between the vector and scalar versions+
0380019* is always marginal on an IBM 3090.  For small fixnums, theˇ
 00390019* version is actually a tiny bit faster, due to the bias to sma
 00400019* numbers, but the vector version should generally be implement
 00410019* for machines that have IBM/370 Vector Facilities because the
 0ˇ
 * 00430019* greater than the speedup of the scalar instructions used to
 * 00440019* job, which are already fast 1-cycle instructions on the IBM
 * 00450019*     ˇ
   * 00460019* The vector instruction VCZVM does exactly what we want.
d  * 00470019* stick to that rather than second-guessing hardware bottle
   * 00480019* and programming aˇ
e    * 00490019* IBM 3084 to the IBM 3090, the double-shift scalar instr
     * 00500019* speeded up from about 5 cycles to 1 cycle, while the si
ft   * 00510019* instructions were the same numˇ
o      * 00520019* simulated certain uses of double shifts in alternate
ause   * 00530019* of the slow speed of the double-shift, got screwed an
get    * 00540019* the benefit now that the double-shifts are ˇ
e IBM    * 00550019* 3090.
         * 00560019*----------------------------------------------------
---------* 00570019         AIF   (&ZILVF).VFIX
             00580019*--------------------------------------------------
-----------* 00590019* Scalar version.
           * 00600019*--------------------------------------------------
-----------*ˇ
               00620019         XR    #5,#5               Clear, need th
any paths      00630019         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnu
               00640019    ˇ
                 00650019*
                 00660019F        ICM   #6,B'1111',##CDR(#7) Load fixnum
ck sign          00670019         BP    FPˇ
 processing        00680019         BZ    FZ                  Fixnum is
 count             00690019FM       X     #6,#SFWM1           It's negat
ert bits           00700019         BZ    FZ             ˇ
 count               00710019FPLOOP   SRA   #6,1                Have at
e 1, pop it out      00720019         LA    #5,8(,#5)           Count by
all fixnum table     00730019         BNZ   FPLOOP              We have
its to count           00740019         LA    #15,#SFT(#5)        Point
ct number in SFT       00750019         BR    #14                 Return
er                     00760019*
                        00770019ˇÁ
  Point to 0 in SFT                    00780019         BR    #14
  Return to caller                     00790019*------------------------
-------------------------------------* 00800019*ˇ
e if not a fixnum.  Note that a faulty * 00810019* bignum with a leading
will loop forever at label MORE.       * 00820019*----------------------
---------------------------------------* 00830019NF       CLI  ˇ
IGNUM Is arg a bignum?                     00840019         BNE   ERROR1
      Branch if not fixed                  00850019         ICM   #5,B'0
7)    Load bignum length                   00860019         LR    #2,#5
        Make extra copy of bignum length     00870019         L     #6,#
4(#5,#7) Get most significant word           00880019         SRA   #2,2
        /4, change bytes to words            00890019         MH    #2,=
        *31, ˇ
          Shift out a bit on the left          00910019         BO    CO
          Most significant bit shifted out     00920019MORE     SLA   #6
          Shift out another ˇ
            Decrease count of bits               00940019         BNO
            More bits need to be examined        00950019COUNTED  TM
(#7),X'80'  Test sign of bignum            ˇ
              Bignum is positive, continue         00970019         LTR
              Was 1-bit the only 1-bit?            00980019         BZ
R2            Negative bignum is power of 2        0099001ˇ
                                                     01000019RETNUM   CL
LCSFTHI         Is answer in small fixnum table?     01010019         BH
S               No?  Must cons up a new fixnum       01020019         SL
,3                *8 for offset in SFT                 01030019
5,#SFT(#2)        Calculate small fixnum table addr    01040019
4                 Return to caller                     01050019*
        ˇ
#6,#14              Save return address                  01070019
FIXED               Cons up a fixnum                     01080019
#6                  Retˇ
                                                           01100019BMPOW
  #4,##VECDAT(,#7)    Address of bignum data area          01110019
  #5,=H'4'            Bignum length leˇ
    #6,=X'80'           First byte for compare               01130019
    #7,1                Length of first byte before 0 pad    01140019
CL  #4,#6               Are all lower words 0 in bign+
BNE   RETNUM              Was 1-bit found below higˇ
  BCTR  #2,0                Decrease count by 1 if power of 2    0117001
  B     RETNUM              OK, compensated for power of 2       0118001
===============================================================* 0ˇ
    AGO   .CONTIN1                                                 01200
    ANOP                                                           01210
-----------------------------------------------------------------* 01220
cˇ
                                                                   * 012
The vector mask instructions are used to count the zeroes to the   * 012
left of the leftˇ
  This is then subtracted from the maximum number of bits the        * 0
  word could have contained (highest word for bignum).  (For         * 0
  bignums, the number of bits bˇ
9*  and added to the count.  For negative bignums, a check is made in  *
9*  the same was as in the scalar version, for an exact multiple of 2, *
9*  in which case the bit count must be reduceˇ
019*  fixnums, the vector mask is complemented as it is loaded, to
019*  convert the problem to being the same as the positive case.
019*---------------------------------------------------------ˇ
50019         L     #7,0(,#1)           Load argument
60019         XR    #5,#5               Clear, need this for many paths
70019         CLI   ##TYPE(#7),##FIXNUM Is arg a fixnum?
1380019         VRCL  0                   Clear vector interrupt index
1390019         BNE   NF                  Branch if not fixed
1400019*
1410019F   ˇ
 01420019         LA    #4,32               Number of bits to test in ve
 01430019         LA    #6,##CDR(,#7)       Make pointer to fixnum quant
 01440019         BO    FMˇ
iv 01450019         VLVCU #4                  Set vector count to # of b
   01460019FPZLOOP  VLVM  #6                  Load a section of bits
   01470019         VCZVM #5             ˇ
     01480019         VLVCU #4                  Update vector count
     01490019         BC    3,FPZLOOP           More bits?
     01500019         LCR   #5,#5               Take negˇ
       01510019         SLA   #5,3                Convert to displacemen
       01520019         LA    #15,#SFT+32*8(#5)   Add to address of 32 (
ts)    01530019         BR    #14                 Return position of le
1        01540019ˇÁ
                       01550019FM       VLVCU #4                  Set ve
nt to # of bits        01560019FMLOOP   VLCVM #6                  Load c
t of section of bits   01570019 ˇ
ft contiguous 0-bits     01580019         VLVCU #4                  Upda
r count                  01590019         BC    3,FMLOOP            More
                         01600019         LCR  ˇ
ive, need 32-(#5)          01610019         SLA   #5,3                Co
 displacement in SFT       01620019         LA    #15,#SFT+32*8(#5)   Ad
ress of 32 (total bits)    01630019         BR    #14         ˇ
osition of leftmost 0        01640019*
                             01650019NF       CLI   ##TYPE(#7),##BIGNUM
 bignum?                     01660019         BNE   ERROR1
 if not fixed                  01670019         XR    #2,#2
for loading 3-byte length      01680019         ICM   #2,B'0111',1(#7)
ignum length                   01690019         LA    #4,32
 of bits to ˇ
 bignum length for later         01710019         LA    #6,##VECDAT-4(#2
 most significant word           01720019         VLVCU #4
vector count to # of bits  ˇ
ad a section of bits               01740019         VCZVM #5
unt the left contiguous 0-bits     01750019         VLVCU #4
date vector count                  0176001ˇ
More bits?                           01770019         SRA   #2,2
/4, change bytes to words            01780019         L     #6,##VECDAT-
 Get most significant word           01790019         BCTˇ
  Don't include bit 0 of VCZVM count   01800019         MH    #2,=H'31'
  *31, words to bits, max possible     01810019         SLL   #6,2(#5)
  Shift out the leftmost 1 to left     01820019         SLR   #2,#5
    Position of leftmost 1 in bignum     01830019COUNTED  TM    ##VECDAT
0'  Test sign of bignum                  01840019         BZ    RETNUM
    Bignum is positive, continue         01850019         LTR   #6,#6
    Wasˇ
      Is negative bignum power of 2?       01870019*
                                           01880019RETNUM   CL    #2,ZLC
      Is answer in smaˇ
        No?  Must cons up a new fixnum       01900019         SLA   #2,3
        *8 for offset in SFT                 01910019         LA    #15,
        Small fixnum                 +
          Return to caller         ˇ
                                                 01940019FCONS    LR
            Save return address                  01950019         #MKAT
            Cons up a fixnum                     0ˇ
              Return to caller                     01970019*
                                                   01980019BMPOWER2 LA
ECDAT(,#7)    Address of bignum data area          01990019      ˇ
3               Get bignum length for CLCL           02000019         IC
'0111',1(#7)    Load bignum length                   02010019         SH
H'4'            Bignum length less highest word      02020019         LA
ˇ
,1                Length of first byte before 0 pad    02040019
,#6               Are all lower words 0 in bignum?     02050019
TNUM           ˇ
#2,0                Decrease count by 1 if power of 2    02070019
RETNUM              OK, compensated for power of 2       02080019*======
==============================ˇ
                                                           02100019*
                                                           02110019
  #15                                        ˇ
ING ZILINTLN,#3                                              02130019
ACE 1                                                        02140019ERR
    #3,#15                                                  ˇ
#ERR  'Argument to INTEGER-LENGTH not an integer - ',(#7)      02160019
SPACE 1                                                        02170019
LTORG                                                          02180019
  END                                                            0219001
≈
TINE'        00010006***************************************************
************ 00020006*
           * 00030006*ˇ
atory Inc.   * 00040006*                     All rights reserved.
             * 00050006*
             * 00060006**************ˇ
**************** 00070006*
               * 00080006*  THIS SUBROUTINE INTERNS SYMBOLS ON THE OBLIS
               * 00090006*                          ˇ
                 * 00100006*  THERE ARE SEVERAL CALLERS OF THIS ROUTINE
                 * 00110006*     ZILSINT
                 * 00120006*     ZILABLD                           ˇ
                   * 00130006*     MAKE-SYMBOL (?)
                   * 00140006*  EACH HAS ITS OWN REQUIREMENTS FOR THIS R
                   * 00150006*
  ˇ
ANENT SOLUTION       * 00170006*  TO THE EXCEEDINGLY LONG INTERNING TIME
ABLE HAS 65536       * 00180006*  ENTRIES.  SPACE IS FOUND FOR NEW ITEMS
LY INCREMENTING  ˇ
CH IS STOPPED AT THE   * 00200006*  FIRST FREE SLOT.  THIS WORKS BECAUSE
RE ADDED TO THE TABLE  * 00210006*  BUT NEVER REMOVED.
                       * 0022000ˇ
                         * 00230006*  ===> INCLUDE MORE IN RETURNST, UPD
T BEFORE STORE           * 00240006*
                         * 00250006*  ===> INCLˇ
ROR MESSAGE                * 00260006*
                           * 00270006***********************************
**************************** 00280006*                        ˇ
                               00290006*********************************
****************************** 00300006*
                             * 00310006* Change activity:
                               * 00320006*
                               * 00330006* 05/22/89 - New bit in compile
ymbol header means that the    * 00340006*            symbol is not to b
ed.  This roˇ
r such symbols.                  * 00360006*
                                 * 00370006* 10/29/91 - Fix bug causing
object in VSS.  Occurs when+
 symbol after print name ˇ
involves a novel technique for       * 00400006*            insuring tha
int name pointer gets relocated,     * 00410006*            since it wou
hassle to come up with a stack slot. * 0ˇ
                                       * 00430006***********************
**************************************** 00440006*
                                         00450006ZILINTˇ
                                           00460006         DROP  #15
                                           00470006         STM   #12,#7
S-ZILINTN(#15) SAVE REGS IN OUR OWN PLACE  00480006         LR    #12,ˇ
                                             00490006         USING ZILI
                                             00500006         OI    ZLCG
GCBLD   TELL CONS WE'RE OK                   00510006*------------------
-----ˇ
RS.                                          * 00530006*
                                             * 00540006* #0 IS ASSUMED T
 UP PROPERLY FOR CONˇ
                                               * 00560006* IF #7 IS <= 0
 #4 --> TEXT OF STRING TO BE INTERNED          * 00570006*
 #5 = LENGTH OF STRING TO BE INTERNˇ
                                                 * 00590006* IF #7 IS NE
THEN JUST RETURN THE PRINT NAME'S HASH CODE.     * 00600006* IF #7 IS ZE
 ACTUALLY INTERN THE SYMBOL, MAKING A COPY OF    *ˇ
 A STRING.                                         * 00620006*
                                                   * 00630006* (THAT'S H
LD CALLS ME)                                       * 00640006*   ˇ
                                                     * 00650006* OTHERWI
OINTS TO A PAIR OF FULLWORDS IN MEMORY, OF WHICH     * 00660006*
SECOND COULD CONTAIN A PRESET HASH CODE IF THE       * 00670006*
ˇ
                                                       * 00690006*
 --> THE ALREADY-PRPEPARED PRINT NAME                  * 00700006*
               ˇ
 ZILSINT CALLS ME)                                       * 00720006*
                                                         * 00730006* RET
 POINTER TO SYMBOL IN #15 (OR ˇ
                                                           * 00750006*--
-----------------------------------------------------------* 00760006*
                                                              00770006ˇ

80006         BNP   HASH                then...
90006         XR    #5,#5                 CLEAR INSERT REGISTER
00006 ˇ
0810006         ICM   #5,7,1(#6)            SET LENGTH-OF-TEXT REGISTER
0820006         TM    ##FWBYTE(#7),##FWGSYM If this symbol not to be int
0830006         BO   ˇ
 00840006         TM    ##FWBYTE(#7),##FWHASH if there's a preset hash c
 00850006         BZ    HASH                  then
 00860006*                          ˇ
   00870006* Wait! Don't you have to check the version number of the has
   00880006* algorithm first?
   00890006*                                       ˇ
     00900006         L     #6,##FWWD2(,#7)        load it
     00910006         B     COOKHASH               and go use it
     00920006HASH     DS    0H                  #4 AND #5 SET UP Fˇ
E HASH 00930006         SPACE 1
       00940006*********************************************************
****** 00950006*
 ˇ
 using * 00970006* this by calling SXHASH, which MUST call ZILINTN to ge
rrect  * 00980006* hash value for a print name.  Therefore, don't change
shing  * 0099000ˇ
n of the * 01000006* algorithm that generated the hash code, so that cod
ed with  * 01010006* hash algorithm A can still work with a ZILINTN usin
thm B.   * 01020006*           ˇ
           * 01030006***************************************************
************ 01040006         SPACE 1
             01050006         LH    #15,=H'-4'ˇ
XH             01060006         LR    #2,#5               MAKE ANOTHER C
TR LENGTH      01070006         AR    #2,#15              INDEX TO LAST
STRING         01080006         LR    #14,#5              COMˇ
H * 32           01090006         SLL   #14,5                SO THAT IF
S 4 OR LESS WE   01100006         BNP   LEN01234(#14)         DO COMPUTE
 BASED ON LENGTH 01110006         L     #6,0(#2,#4)         ELSE GET LAS
TES OF STRING      01120006         NR    #2,#15              MAKE LENGT
IPLE OF 4          01130006         SLL   #6,1                SO THAT XO
H ITSELF NOT 0     01140006XLOOP    X     #6,0(#2,#4)         XOR NEXT W
           +
FIRST WORˇ
OPY                    01170006         SRL   #2,12               MOVE D
 SIGNIFICANT CHARS.    01180006         SLL   #6,2                MAKE I
IPLE OF 4              0ˇ
 0,1 AND 2,3             01200006         B     COOKHASH            #6 H
ASH CODE, GO FIX IT UP   01210006*
                         01220006* COMPˇ
                           01230006*
                           01240006LEN01234 DS    0H
                           01250006E0       DS    0H  ˇ
AME LENGTH = 0               01260006*
                             01270006         XR    #6,#6
H CODE 0 FOR NO LENGTH       01280006         B     COOKHASH         ˇ
MPLEST HASH CODE OF ALL!       01290006*
                               01300006         ORG   LEN01234+32
                               01310006E1       DS    0H
 NAMˇ
                                 01330006         XR    #6,#6
R FOR INSERT OF SINGLE LETTER    01340006         ICM   #6,B'0010',0(#4)
 POSITION THAT WORKˇ
SH CODE GENERATED, SIMPLE EH?      01360006*
                                   01370006         ORG   LEN01234+64
                                  ˇ
SYMBOL NAME LENGTH = 2               01390006*
                                     01400006         L     #6,0(,#4)
LOAD TWO BYTES                       01410006    ˇ
  SQUEEZE OUT UNKNOWN BYTES            01420006         SLL   #6,2
  MUST BE MULTIPLE OF 4                01430006         B     COOKHASH
  HASH CODE GENERATED, STRAIGHT VALUE  01440006*                ˇ
                                         01450006         ORG   LEN01234
                                         01460006E3       DS    0H
    SYMBOL NAME LENGTH = 3               01470006*

      CLEAR FOR INSERT OF 3 LETTERS        01490006         SRL   #6,8
      MUST BE MULT OF 4 AND < 2**18        01500006         LR    #14,#6
      MAKE TEMˇ
        SHIFT BY STRANGE AMOUNT              01520006         XR    #6,#
        COMBINE UPPER CHAR WITH LOW CHARS    01530006         SLL   #6,2
        MAKE IT A MULTIPLE OF  4              01540006ˇÁ
    COOKHASH                                                 01550006*
                                                             01560006
G   LEN01234+128                                             01570006Eˇ
DS    0H                  SYMBOL NAME LENGTH = 4               01580006*
                                                               01590006
L     #6,0(,#4)           LOAD ALL 4 LETTERS                   01600006
LR   ˇ
  SRL   #2,14               SHIFT UPPER 2 BYTES TO LOWER POS.    0162000
  XR    #6,#2               HASH THE TWO                         0163000
  SLL   #6,2        ˇ
                                                                   01650
CONTAINS THE RAW HASH CODE. MUST BE MULTIPLE OF 4 AND < 2**18      01660
                                   ˇ
KHASH DS    0H                                                       016
      LTR   #7,#7               If #7<0 (called for hash code only)  016
      BNM   NOTJUSTH            then...           ˇ
        LR    #15,#6               put raw hash code in #15            0
        B     RETURN               and return with it                  0
OTJUSTH DS    0H                  Else using hash code           ˇ
6         SPACE 1
6***********************************************************************
6*                                                                     *
ˇ
006* we are assuming it to be.  If not, then this system is bogus.
006*
006************ˇ
00006         SPACE 1
10006         CLC   =F'65536',ZLCOBDIM  DO WE AGREE WITH COMMON AREA?
20006         BNE   ERROR2    ˇ
1830006         N     #6,=X'0003FFFC'     Make it modulo 64K, assuming o
1840006         L     #7,ZLCOBHSH         GET BEGINNING OF HASH TABLE
1850006         TM    ZLCGCFLG,ZLCGCINT   IF ˇ
 01860006         BO    CONSIT2             THEN NO SEARCH REQUIRED
 01870006*
 01880006*--------------------------------------------------ˇ
-* 01890006* #4 -> TEXT
 * 01900006* #5 = LENGTH
 * 01910006*
   * 01920006* NOTE: NO PRE-CHECK FOR T OR NIL REQUIRED.  WE ARE GUARANT
VER  * 01930006*       TO BE CALLED TO INTERN T OR NIL.
     * 01940006*--------------------------------------------------------
-----* 01950006         LR    #14,#5              GET LENGTH OF TEXT TO
OR     0ˇ
AME HDR  01970006         CH    #5,=H'256'          IF LENGTH GREATER TH
         01980006         BH    OBLOOP2             THEN DO CLCL-BASED S
         01990006      ˇ
RCH FOR    02000006         BZ    OBLOOP0             IF ZERO, DO SEARCH
L SYMBOL   02010006         BCTR  #15,0               ELSE REDUCE LENGTH
 INSTR.    02020006         STC   #15,ˇ
 THAT LENGTH 02030006         B     OBLOOP1             GO DO CLC LOOP F
T SEARCH     02040006*
             02050006OBLOOP0X LA    #6,4(,#6)        ˇ
R              02060006         N     #6,=X'0003FFFC'     ENSURE ARRAY W
D              02070006OBLOOP0  L     #15,0(#6,#7)        LOAD SYMBOL PO
OM HASH ARRAY  02080006         LTR   #15,#15             ZERO INDICˇ
H CAN STOP       02090006         BZ    NOTONOB             THEN THIS AT
T INTERNED YET   02100006         L     #2,##PNAME(,#15)    GET PRINT NA
AT SYMBOL        02110006         CL    #14,0(,#2)          TEST LENGTH
RINˇ
, CONTINUE         02130006         B     RETURN              IF = OURS,
MBOL IS INTERNED   02140006*
                  ˇ
RRAY POINTER         02160006         N     #6,=X'0003FFFC'     ENSURE A
PAROUND              02170006OBLOOP1  L     #15,0(#6,#7)        LOAD SYM
TER FROM HASH ARRAY  02180006    ˇ
 SEARCH CAN STOP       02190006         BZ    NOTONOB             THEN T
 IS NOT INTERNED YET   02200006         L     #2,##PNAME(,#15)    GET PR
 OF THAT SYMBOL        02210006         CL    #1ˇ
ESN'T MATCH OURS         02220006         BNE   OBLOOP1X            THEN
IS ONE, CONTINUE         02230006CLCPNAME CLC   ##VECDAT(*-*,#2),0(#4) C
RINT NAME TEXT           02240006         BNE   OBLOOP1X       ˇ
 WASN'T IDENTICAL          02250006         B     RETURN              IF
SYMBOL ALREADY INTERNED    02260006*
                           02270006OBLOOP2X LA    #6,4(,#6)           IN
T HASH ARRAY POINTER         02280006         N     #6,=X'0003FFFC'
RRAY WRAPAROUND              02290006OBLOOP2  L     #15,0(#6,#7)
BOL POINTER FROM HASH ARRAY  02300006         LTR   #15,#15
ICATES SEARCH  CAN STOP       02310006ˇÁ
        THEN THIS ATOM IS NOT INTERNED YET   02320006         L     #2,#
#15)    GET PRINT NAME OF THAT SYMBOL        02330006         CL    #14,
        IF LENGTH DOESN'T MATCH OURS         02340006 ˇ
          THEN SKIP THIS ONE, CONTINUE         02350006         LR    #3
          GET LENGTH FOR CLCL                  02360006         LA    #2
T(,#2)    ELSE POINT TO TEXT OF SYMBOL'S NAME  02370006         LR   ˇ
            GET LENGTH FOR CLCL                  02380006         LR
            GET ADDRESS FOR CLCL                 02390006         CLCL
            COMPARE PRINT NAMES                  02400006         BNE
    ˇ
              IF EQUAL, SYMBOL ALREADY INTERNED    02420006         SPAC
                                                   02430006*************
*******************ˇ
                                                   * 02450006* This sect
ode gets executed when it is determined that no    * 02460006* search fo
sting symbol is required (i.e. calˇ
ing).  Just find the first zero slot in the hash     * 02480006* table s
from the location determined by the hash code.       * 02490006* A new s
ll always have to be consed up.                  ˇ
                                                       * 02510006* Note:
nch-in is to CONSIT2; CONSIT2X is looped back to only. * 02520006*
                                                       * 0253000ˇ
********************************************************** 02540006
E 1                                                        02550006*----
---------------------------------------------------------* 02560006* FIN

                                                           * 02580006*--
-----------------------------------------------------------* 02590006CON
    #6,4(,#6) ˇ
N     #6,=X'0003FFFC'     ENSURE HASH ARRAY WRAPAROUND         02610006C
L     #15,0(#6,#7)        LOAD SYMBOL POINTER FROM HASH ARRAY  02620006
LTR   #15,#15             ZERˇ
  BNZ   CONSIT2X            NOT AN EMPTY SLOT, CHECK NEXT ONE    0264000
                            When empty slot found, use it        0265000
  DS    0H                                  ˇ
    SPACE 1                                                        02670
****************************************************************** 02680
                                                           +
ymbol determined to be not on oblist - build a new symbolˇ
                                                                     * 0
********************************************************************** 0
        SPACE 1                                                        0
6*---------------------------------------------------------------------*
6* IF #3 (I.E.#7 ON INPUT) = 0, WE MUST CONS UP A STRING AND A SYMBOL. *
6* OTHERWISE, WE MUST CONS UP A SYMBOL ONLY - THE STRING EXISTS.       *
6*-----ˇ
006         ICM   #3,B'1111',SAVER7   #3 = #7 on input
006         BP    GETPNAME            If positive, we have a print name
006*                  ˇ
00006*------------------------------------------------------------------
10006* MAKE A NEW PRINTNAME
20006* CONS UP A PRINT NAME STRING. Rˇ
2830006*----------------------------------------------------------------
2840006NEWPNAME L     #0,SAVER0           GET #0, STACK POINTER FOR CONS
2850006         LTR   #5,#5               IF TEXT ISˇ
 02860006         BNZ   GETPNLEN            THEN...
 02870006         LA    #3,4                 SET STRING LENGTH TO 8
 02880006         B     GOTPNLEN            ELSE...                ˇ
   02890006GETPNLEN LA    #3,3(,#5)           GET LENGTH NEEDED FOR STRI
   02900006         N     #3,=X'FFFFFFFC'     ROUND UP TO FULLWORD BOUND
   02910006GOTPNLEN L     #15,ZLCVSADR        GET ADDRESS OF VECTOR/STRI
  ˇ
     02930006         L     #2,ZLCVSNXT         GET ADDRESS OF NEXT AVAI
OT   02940006         LA    #1,4(#3,#2)         GET POINTER TO WHERE OUR
ND   02950006    ˇ
EA     02960006         BH    NOROOM              THEN NO ROOM - GO TO F
 MORE  02970006         ST    #14,0(,#2)          SET TYPE AND LENGTH OF
ING    02980006         ST    #1ˇ
AFT OURS 02990006         LA    #14,##VECDAT(,#2)   POINT TO TEXT OF NEW
         03000006         LR    #15,#3              GET LENGTH OF NEW ST
A        03010006         MVCL  #14,#4         ˇ
G          03020006         LR    #4,#2               Make #4 point to p
e string   03030006         B     GOTPNAME            Go with newly buil
name       03040006         SPACE 1                           ˇ
             03050006GETPNAME DS    0H                  Here if PNAME pr
y caller     03060006         L     #4,SAVER6           Load address of
 print name  03070006GOTPNAME DS    0H                  Now we have PNAM
4              03080006ˇÁ
k pointer for consing        03090006GOTPN2   DS    0H
int in case GC necessary     03100006         L     #15,ZLCVSADR
ess of vector/string space   03110006 ˇ
ength = address of end of it   03120006         L     #2,ZLCVSNXT
dress of next available slot   03130006         LA    #5,##SYMLEN(,#2)
inter to slot + symbol length  03140006         CR   ˇ
vailable area not big enough     03150006         BH    NOROOM2
 no room - go to find some more  03160006         MVC   0(##SYMLEN,#2),Z
nitialize symbol from template   03170006         ST    #4,##PNAME(,ˇ
AME word = address of PNAME string 03180006*
                                   03190006* debug
                                   03191006*
   ˇ
If print name is not a string        03200006*        BNE   BADPNAM2
then error                           03210006*
                  ˇ
                                       03212006*
                                       03213006*
                                 ˇ
er must be passed to ZILINTN somehow!)   03230006*
                                         03240006         ST    #8,##PPK
    Set package cell to T (interned)     0325000ˇ
                                           03260006* Also, if it's the k
ackage, set value cell to self (#2)        03270006*
                                           03280006* For the cuˇ
ation, if the print name of the smnbol       03290006* begins with a col
me it's a "keyword" and set the binding      03300006* cell of the symbo
elf, so that it will be constant.            03310006* Don't know who, i
ne, checks for this, but it could be           03320006* useful for some
                                               03330006*
                                               03340006         CLI   ##
4),C':'   If ˇ
            then                                 03360006         ST
LUE(,#2)     set binding (value) cell to self    03370006NOTKWD   DS
                            ˇ
VSNXT         Update slot ptr to past symbol       03390006         LR
              Arg 1 to CONS = new symbol           03400006         L
OBCNT         Get count of hash slots left +
ETCONS          Go to add to oblist if coˇ
ROR3              If count went to 0, error - no slots 03430006*--------
-----------------------------------------------------* 03440006*
 ADD NEW SYMBOL TO THE "OBLIST"                        0ˇ
-------------------------------------------------------* 03460006RETCONS
#2,ZLCOBCNT         STORE DECREMENTED SLOT-AVAIL COUNT   03470006
#0,SAVER0           Get stack pointer for consing        03480006      ˇ
  #15,ZLCCONS         GET ADDRESS OF CONS                  03490006
  #2,ZLCOBLST         ARG 2 TO CONS = CURRENT OBLIST       03500006
R #14,#15             CALL CONS TO ADD SYMBOL TO OBLIST    03510006
  #15,ˇ
    #1,0(#6,#7)         STORE NEW SYMBOL IN HASH ARRAY       03530006
    #15,#1              GET POINTER TO SYMBOL BACK AS RETVAL 03540006*--
---------------------ˇ
         PREPARE FOR RETURN TO CALLER                          03560006*
-------------------------------------------------------------* 03570006R
DS    0H                            ˇ
  NI    ZLCGCFLG,255-ZLCGCBLD TURN OFF SPECIAL FLAG FOR CONS     0359000
  ST    #15,SAVER15         RESTORE REGS EXCEPT FOR #15,         0360000
  LM    #12,#7,SAVEREGS      WHICH POINTS TO THE INˇ
    BR    #14                 RETURN TO CALLER                     03602
                                                                   03610
ug - replace above 2 lines with:                                  ˇ
                                                                     036
      ST    #15,ZLCDBL                                               036
      UNPK  MESSAGEX(9),ZLCDBL(5)                                    036
 ˇ
        MVI   MESSAGEX+8,C'.'                                          0
        L     #0,##PNAME(,#15)                                         0
        ST    #0ˇ
6*        UNPK  MESSAGEQ(9),ZLCDBL(5)
6*        TR    MESSAGEQ(8),HEXTBL
6*        MVI   MESSAGEQ+8,C'.'ˇ
006*        LA    #1,MESSAGE
006*        LA    #0,MESSAGEL
006*        #TPUT *,(1),(0)                   ˇ
50006*        L     #15,SAVER15
60006*
70006* end debug                                             
3780006ˇÁ
             03790006*        LM    #12,#7,SAVEREGS      WHICH POINTS TO
ERNED SYMBOL 03800006*        BR    #14                 RETURN TO CALLER
             03810006*ˇ
               03820006* debug
               03830006*
               03840006*MESSAGE  DC  ˇ
                 03850006*MESSAGEX DC    C'XXXXXXXX'
                 03860006*         DC    C' '
                 03870006*MESSAGEP DC    C' Print naˇ
                   03880006*MESSAGEQ DC    C'XXXXXXXX'
                   03890006*         DC    C' '
                   03900006*MESSAGEL EQU   *-MESSAGE               ˇ
                     03910006*         DC    C'0123456789ABCDEF'
                     03920006*HEXTBL   EQU   *-256
                     03930006*
  ˇ
                       03950006*
                       03960006*----------------------------------------
-----------------ˇ
erned...               * 03980006*--------------------------------------
-----------------------* 03990006NOINTERN DS    0H
                         0400000ˇ
 input                     04010006         L     #4,SAVER6           Lo
ss of caller's print name  04020006         L     #0,SAVER0           Ge
pointer for consing        04030006GOTPN3   DS ˇ
int in case GC necessary     04040006         L     #15,ZLCVSADR
ess of vector/string space   04050006         A     #15,ZLCVSLEN
gth = address of end of it   04060006         L     #2,ZLCVSNXˇ
dress of next available slot   04070006         LA    #5,##SYMLEN(,#2)
inter to slot + symbol length  04080006         CR    #5,#15
ilable area not big enough     04090006         BH    NOROOM3
 no room - go to find some more  04100006         MVC   0(##SYMLEN,#2),Z
nitialize symbol from template   04110006         ST    #4,##PNAME(,#2)
E word = address of PNAME string 04120006*
            ˇ
                                   04132006*
                                   04133006*        CLI   0(#4),##STRING
 print name is not a string+
then error               ˇ
                                       04136006* end debug
                                       04137006*
                                       0ˇ
    Set package cell = NIL               04170006         ST    #5,ZLCVS
    Update slot ptr to past symbol       04180006         LR    #15,#2
    Get address of new symbol            04190006      ˇ
      Go to return with newly built symbol 04200006*--------------------
-----------------------------------------* 04210006*           BUT WHAT
'S NO ROOM FOR NEW STRING?               * 04220006*------------------ˇ
-------------------------------------------* 04230006NOROOM   LTR   #0,#
        IF GC ALREADY TRIED                  04240006         BZ    ERRO
        THEN ERROR - NO V/S SPACE AVAILABLE  04250006         L     #9,Z
     ˇ
          DUMMY ARG 1 TO CONS = NIL            04270006         LR    #2
          DUMMY ARG 2 TO CONS = NIL            04280006         L     #1
S         GET ADDRESˇ
            CALL CONS TO FORCE A GC              04300006         XR
            CLEAR STACK POINTER TO PREVENT RETRY 04310006         LR
            GET LENGTH OF TEXT     ˇ
1000',=YL1(##STRING) MAKE #14 LOOK LIKE PNAME HDR  04330006         B
EN            GO TRY AGAIN                         04340006*------------
-------------------------------------------------*ˇ
T IF THERE'S NO ROOM FOR NEW SYMBOL?               * 04360006* Note that
the print name pointer in #4 as part of the dummy  * 04370006* argument,
re that it gets updated by GC if necessary.        * 04380006*---ˇ
-----------------------------------------------------* 04390006NOROOM2
,#0               IF GC ALREADY TRIED                  04400006
ROR1              THEN ERROR - NO V/S SPACE AVAILABLE  04410006
ˇ
#1,#4               DUMMY ARG 1 TO CONS = PRINT NAME     04430006
#2,#10              DUMMY ARG 2 TO CONS = NIL            04440006
#15,ZLCCONS    ˇ
R #14,#15             CALL CONS TO FORCE A GC              04460006
  #0,#0               CLEAR STACK POINTER TO PREVENT RETRY 04470006
  #4,0(,#15)          RELOAD Pˇ
    GOTPN2              GO TRY AGAIN                         04490006*--
-----------------------------------------------------------* 04500006*
 BUT WHAT IF THERE'S NO ROOM FOR NEW UNINTERN ED SYMBOL?    * 04510006ˇ

20006NOROOM3  LTR   #0,#0               IF GC ALREADY TRIED
30006         BZ    ERROR1N             THEN ERROR - NO V/S SPACE AVAILA
40006 ˇ
4550006         LR    #1,#10              DUMMY ARG 1 TO CONS = NIL
4560006         LR    #2,#10              DUMMY ARG 2 TO CONS = NIL
4570006         L    ˇ
 04580006         #BASR #14,#15             CALL CONS TO FORCE A GC
 04590006         XR    #0,#0               CLEAR STACK POINTER TO PREVE
 04600006         B     GOTPN3      ˇ
   04610006*
   04620006         DS    0D                  FORCE DOUBLEWORD ALIGNMENT
.  04630006         SPACE 1                        ˇ
     04640006SAVEREGS DS    12A                 REGISTER SAVE AREA
     04650006         ORG   SAVEREGS
     04660006SAVER12  DS    A                   REGISTER SAVE AREAˇ
       04670006SAVER13  DS    A                   REGISTER SAVE AREA
       04680006SAVER14  DS    A                   REGISTER SAVE AREA
       04690006SAVER15  DS    A                   REGISTER SAVE AREA
 ˇ
         04710006SAVER1   DS    A                   REGISTER SAVE AREA
         04720006SAVER2   DS    A                   REGISTER SAVE AREA
         0473000ˇ
           04740006SAVER4   DS    A                   REGISTER SAVE AREA
           04750006SAVER5   DS    A                   REGISTER SAVE AREA
           04760006SAVER6   DS ˇ
             04770006SAVER7   DS    A                   REGISTER SAVE AR
             04780006         ORG   ,
             04790006*                        ˇ
               04800006ERROR1   #ERR  PREFIX=NO,
              X04810006               'ZIL2300 ZILINTN: No vector/string
vailable to inX04820006               tern symbol.'          ˇ
                 04830006ERROR1N  #ERR  PREFIX=NO,
                X04840006               'ZIL2300 ZILINTN: No vector/stri
 available to buX04850006               ild uninterned symbol.'
                   04860006ERROR2   L     #2,ZLCOBDIM
                   04870006         #ERR  PREFIX=NO,
                  X04880006               'ZIL2301 ZILINTN: Internal err
't handle o+
         ˇ
                      X04910006               'ZIL2302 ZILINTN: More tha
 interned symbols.',  X04920006               X'0D',
                      X0ˇ
 hash table limit reacheX04940006               d.'
                         04950006*
                         04951006* debuˇ
                           04952006*
                           04953006*ADPNAM2 #ERR  PREFIX=NO,
                          X04960006               'ZILˇ
 of interned symbol is not aX04970006                string - ',#4
                             04980006*ADPNAM3 #ERR  PREFIX=NO,
                            X04990006               'ZIL2303 ZILINTN:ˇ
me of uninterned symbol is notX05000006                a string - ',#4
                               05010006*
                               05011006* end debug
    ˇ
                                 05013006*
                                 05020006         LTORG
                   ´               05030006*
                                   05040006         END
                                   05050006{
TITLE 'ZILKERR - ZIL 1.3 KEYWORD ERROR HANDLING SUBROUTINE'    00010001*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
IS MODULE IS INVOKED FROM COMPILED CODE TO HANDLE ERRORS THAT    * 00018
E DETECTED WHILE PROCEˇ
                                                                   * 000
REGISTERS ARE SET UP AS FOLLOWS ON ENTRY TO THIS ROUTINE:          * 000
                                     ˇ
  #0 - ONE OF THE FOLLOWING:                                         * 0
       ZERO - IF THIS ROUTINE WAS CALLED TO SIGNAL AN INVALID LIST   * 0
              (I.E. ODD NUMBER OF VALUES IN &REST ARˇ
2*       OTHERWISE, THE ADDRESS OF THE :ALLOW-OTHER-KEYS SYMBOL.       *
2*  #1 - IRRELEVANT EXCEPT THAT ITS CONTENTS MUST BE PRESERVED!        *
2*  #2 - THE ADDRESS OF THE KEYWORD SYMBOL THAT WAS NOT RECOGNIZED ˇ
002*  #3 - THE ADDRESS OF THE &REST ARG PASSED TO THE FUNCTION.
002*
002* REGISTERS #4 THROUGH #7 SHOULD NOT BE ALTERED.  IN THIS WAY THE
00ˇ
40002* CALL TO THIS ROUTINE.
50002*
60002* LOGIC:    ˇ
0170002*
0180002* IF #0 IS ZERO, AN "INVALID KEYWORD LIST PASSED" ERROR IS SIGNAL
0190002* CONTROL NEVER RETURNS. ˇ
 00200002*
 00210002* IF #0 IS NONZERO, THEN THE &REST LIST IS SEARCHED A LA GETK F
 00220002* THE :ALLOW-OTHER-KEYS KEYWORD.  IF Tˇ
 * 00230002* FOUND AND IS NON-NIL, THE ERROR IS IGNORED AND CONTROL IS R
 * 00240002* TO THE CALLER TO PROCEED.  OTHERWISE AN ERROR IS SIGNALLED
 * 00250002* CONTROL NEVER RETURNS.                           ˇ
   * 00260002*
   * 00270002* NOTE: THE LATTER CASE WILL NEVER INVOKE THIS ROUTINE IF T
   * 00280002* LAMBDA LIST OF THE COMPILED FUNCTION CONTAINED &ALLOW-OTH
S.   * 00290002* THE COMPILER DOES NOT GENERATE A CALL TO THIS ROUTINE I
 CASE. * 00300002*
       * 00310002*******************************************************
******** 00320002         SPACE 1
         0ˇ
           00340002         SPACE 1
           00350002         USING ZILKERR,#15
           00360002      ˇ
             00370002         LTR   #0,#0               IF CALLED BECAUS
 &REST LIST  00380002         BZ    ERROR2              THEN GO SIGNAL T
 OF ERROR    00390002         SPACE 1   ˇ
               00400002*                                  #3 = LIST, #0
D              00410002         SPACE 1
               00420002LOOP     DS    0H               ˇ
                 00430002         CR    #3,#10              IF END OF KE
ST (NULL)        00440002         BE    ERROR1              THEN :ALLOW-
YS NOT FOUND     00450002         TM    ##TYPE(#3),##ATOM   IF KEYWORDˇ
ST ATOMIC          00460002         BO    ERROR2              THEN ERROR
EYWORD LIST        00470002         C     #0,##CAR(,#3)       IF (CAR SU
S "EQ" TO KEYWORD  00480002         BNE   NEXT                THEN...
     ˇ
ORD (SUB)LIST        00500002         TM    ##TYPE(#3),##ATOM   IF KEYWO
LIST ATOMIC          00510002         BO    ERROR2              THEN ERR
 KEYWORD LIST       ˇ
T) IS NIL              00530002         BE    ERROR1              THEN O
S NOT ALLOWED          00540002*                                  ELSE O
S ARE ALLOWED, SO...   00550002    ˇ
LLER                     00560002         SPACE 1
                         00570002NEXT     DS    0H                  ELSE
 ONE - CONTINUE          00580002         L     #3ˇ
F KEYWORD (SUB)LIST        00590002         TM    ##TYPE(#3),##ATOM   IF
 (SUB)LIST ATOMIC          00600002         BO    ERROR2              TH
 - BAD KEYWORD LIST        00610002         L     #3,##CDR(,#3)  ˇ
OF KEYWORD (SUB)LIST         00620002         B     LOOP
 PROCESSING                  00630002         SPACE 1
                             00640002ERROR1   DS    0H
ˇ
te error number 1              00660002         B     ERRORS
                               00670002ERROR2   DS    0H
                                00680002ˇÁ
          Indicate error number 2              00690002******** B     ER
                                               00700002ERRORS   DS    0H
                                               00710002 ˇ
                                                 00720002         LR
                                                 00730002         USING
#3                                               00740002*             ˇ
                                                   00750002* DUMP THE FU
AME                                                00760002*
                                                   00770002         XR
      ˇ
,FUNLEN         Initialize fake string length to 0   00790002         IC
(,#12)          Get length of module identifier      00800002         SH
H'16'           Subtrˇ
IPNAME            If no name, skip move                00820002
,=Y(L'FUNTEXT)    If longer than maximum               00830002
8                 then              ˇ
#1,L'FUNTEXT         use maximum length                  00850002
#1,7,FUNLEN         Store length into fake string        00860002
#1,0                Reduce for execute             ˇ
  #1,MVCNAME          Move function name to fake string    00880002SKIPN
  0H                                                       00890002
  THEERROR(#14)                                            0090000ˇ
    THEERR1                                                  00910002
    THEERR2                                                  00920002
ACE 1                                                        00930002THE
Rˇ
      ,FUNSTR,'.',PREFIX=NO                                    00950002T
#ERR  'ZIL1305 Invalid keyword list passed to function ',     X00960002
      FUNSTR,'.'ˇ
                                                                 0098000
, can't display the bad keyword list at this time.  To do so     0099000
res adding stuff to the generatˇ
                                                                   01010
    SPACE 1                                                        01020
    SPACE 1                                   ˇ
NAME  MVC   FUNTEXT(*-*),5(#12) Executed: move function name to str  010
      SPACE 1                                                        010
      DS    0H,XL1                                           +
UNSTR   DC    YL1(##STRING)                                ˇ
2FUNLEN   DS    AL3
2FUNTEXT  DS    CL64
2         SPACE 1
002         LTORG
002         END
002{
ER'                    00010000*****************************************
********************** 00011003*
                     * 00012003*ˇ
aper Laboratory Inc.   * 00013003*                     All rights reserv
                       * 00014003*
                       * 00015003**************ˇ
************************** 00016003*
                         * 00017003* THIS MODULE IS INVOKED BY THE EVAL/
OCESS WHEN A FUNCTION    * 00018003* NAME DOES NOT HAVE A FUNCˇ
ASSOCIATED WITH IT.  IT    * 00019003* ISSUES A SYSTEM LOAD FOR THE FUNC
 OF THE TASK LIBRARY       * 00020003* ASSOCIATED WITH IT AND RETURNS A
 CODE OBJECT AS THE VALUE  * 00030003* (THIS IS A SPECIAL TYPE OF LISP E
WHICH IS PROCESSED VIA THE   * 00040003* ZILXSUB AND ZILXFUN FUNCTIONS A
NERALLY STORED AS THE VALUE  * 00050003* OF THE "SUBR" PROPERTY).
                             * 00060003*
            ˇ
******************************** 00080003*
                               * 00090003* TWO ALTERNATE ENTRY POINTS EX
THIS MODULE (THESE ARE ONLYˇ
IRED TO BE MADE KNOWN TO THE     * 00110003* LINKAGE EDITOR):
                                 * 00120003*
                                 * 0013000ˇ
ER MODULE NAME IS PASSED AND THE   * 00140003*            LOAD MODULE MU
ADED.                              * 00150003*
                                   * 00160003* ZILLOADA -ˇ
ODULE ADDRESS IS KNOWN AND THE       * 00170003*            EXTERNAL REF
MUST BE RESOLVED.                    * 00180003*
                                     * 00190003*************************
**************************************** 00200003*
                                       * 00210003* THIS ROUTINE IS RECUR
 THEREFORE USES STACK SPACE.           * 00220003*
       ˇ
 IS REUSABLE.                            * 00240003*
                                         * 00250003*********************
**********************ˇ
                                           * 00270003* A vector table of
y used functions (most likely to be linked * 00280003* in with the inter
used to be incorporated into this mod+
dule ZILMODS.                      ˇ
                                               * 00310003***************
************************************************ 00320003         GBLB
                                                 0ˇ
                                                   00340003         EJEC
                                                   00350003ZILLOAD  #ZBE
S=1,MAXARGS=1,NAME='ZILLOAD'                       00360003      ˇ
                DEFINE INITIAL STACK SPACE           00370003         #Z
                SAVE REGISTERS                       00380003         SP
                                                     00390003         L
ˇ
,16(,#11)         STORE AS ARG                         00410003
5,@LOAD1          GET ADDRESS OF MAIN LOADER           00420003
,16(,#11)      ˇ
ZLCIFLGS,ZLCISMC    INDICATE NON-INTERRUPTIBLE ZIL CODE  00440003
#14,#15             CALL THE MAIN LOADER                 00450003
ZLCIFLGS,255-ZLCISMC TURN OFF ˇ
  ZLCIFLGS,ZLCIATTN   If attention interrupt occurred      00470003
  #13                 then go to handle it                 00480003
E 1                                          ˇ
    #15,#10             IF WE'RE RETURNING NIL,              00500003
    JUSTRET             THEN DON'T CONS UP ANYTHING.         00510003
    #1,#15              ARG 1 TO CONS = POINTER TO CODE     ˇ
XR    #2,#2               ARG 2 TO CONS = ZEROES               00530003
L     #15,ZLCCONS         GET ADDRESS OF CONS                  00540003
LA    #0,16(,#11)         SET CURRENT STACK POINTER FOR CONS   00550003
  #BASR #14,#15             CALL CONS TO MAKE A SUBR OBJECT      0056000
  MVI   ##TYPE(#15),##SUBR  SET TYPE = ATOMIC AND SUBR           0057000
                                                                 0058000
TURE, SET ˇ
ECT IS SUBR, FSUBR, MSUBR, OR LSUBR.  IGNORE FOR NOW.              00600
                                                                   00610
ET  DS    0H             ˇ
      SPACE 1                                                        006
      #ZRET ,                   RESTORE REGISTERS AND RETURN         006
      SPACE 2                           ˇ
LOAD1   DC    A(ZILLOAD1)         ADDRESS OF MAIN LOADER               0
        EJECT                                                          0
ILLOAD1 DS    0H                                       
3ˇÁ
RY     00690003         LR    #15,#12             COPY BASE REG FROM FIR
       00700003         B     START-ZILLOAD(,#15)
       00710003 ˇ
         00720003ZILLOADN DS    0H
         00730003         OI    ZLCLDFLG,ZLCLDGNM   INDICATE ENTRY VIA Z
W.NAME   00740003         NI   ˇ
           00750003         LR    #15,#12             COPY BASE REG FROM
EVEL       00760003         B     START-ZILLOAD(,#15)
           00770003         SPACE 2           ˇ
             00780003ZILLOADA DS    0H
             00790003         OI    ZLCLDFLG,ZLCLDGAD   INDICATE ENTRY V
ADA W.ADDR   00800003         NI    ZLCLDFLG,255-ZLCLDGNM    ˇ
               00810003         LR    #15,#12             COPY BASE REG
ST LEVEL       00820003         B     START-ZILLOAD(,#15)
               00830003         EJECT
                 00840003START    DS    0H                  NOTE REG 15
ENTRY POINT      00850003         USING *,15 DUMMY DUMMY... DUMMY USING
V MACRO          00860003         #ZPDS 32                  DEFINE STACK
EQUIRED    ˇ
                   00880003         SPACE 2
                   00890003         TM    ZLCLDFLG,ZLCLDGAD   IF ENTRY V
ADA (GOT ADDRESS)  0090000ˇ
OAD ADDRESS          00910003         TM    ZLCLDFLG,ZLCLDGNM   IF ENTRY
LOADN (GOT NAME)     00920003         BO    GOTNAME2            THEN PAR
AME                  00930003         SPAˇ
                       00940003         L     #2,0(,#11)          GET AD
 ARG 1 = ALPHA ATOM    00950003         CLI   ##TYPE(#2),##STRING IF ARG
STRING                 00960003         BE    ISALPHA   ˇ
                         00970003         CLI   ##TYPE(#2),##SYMBOL IF A
A SYMBOL                 00980003         BNE   BADARG1             THEN
                         00990003         L     #2,##PNAME(,#2)      GEˇ
RINT NAME                  01000003ISALPHA  DS    0H
                           01010003         XR    #15,#15             CL
RT REGISTER                01020003         MVI   LNAME,C' '          CL
 MODULˇ
                             01040003         ICM   #15,7,1(#2)
TH OF STRING                 01050003         BZ    FINDIT
 USE ALL-BLANK NAME  +
E THAN 8 CHARACTER ˇ
 ERROR                           01080003         BCTR  #15,0
CE FOR EXECUTE                   01090003         EX    #15,MOVENAME
 STRING TO LOAD MODULE NAME      0ˇ
                                   01110003         SPACE 1
                                   01120003MOVENAME MVC   LNAME(0),##VEC
EXECUTED - MOVE STRING TO NAME     01130003      ˇ
                                     01140003BADARG1  DS    0H
ARG NOT A STRING OR SYMBOL           01150003         #TPUT 1,ZIL1009
                                     01160003         LR    #15,ˇ
                                       01170003         B     RETURN
                                       01180003         SPACE 1
                                       01190003BADNAME  DS    0H

                                         01210003         LR    #15,#10
                                         01220003         B     RETURN
              ˇ
                                           01240003GOTNAME2 DS    0H
      ENTRY VIA ZILLOADN - PARM1 -> NAME   01250003         L     #2,0(,
      GET POINTER TO NAME    ˇ
2)      MOVE NAME TO BLDL LIST               01270003         SPACE 1
                                             01280003FINDIT   DS    0H
                                            ˇ
                                               01300003*****************
********************************************** 01310003*
                                             * 01320003* FIˇ
E OF IN-LINE CODE AND LINKED-IN MODULES TO SEE * 01330003* IF THE REQUES
LE IS THERE.                                   * 01340003*
                                               * 01350003* Note: This is
ary search that assumes that the length of each  * 01360003*       table
s 16.                                            * 01370003*
                                                 * 01380003*************
*********ˇ
                                                     01400003         XR
3               Clear entry table pointer            01410003         L
X'FFFFFFF0'     Constantˇ
5,ZLCMODS         Address of ZILMODS table             01430003
OD,#15                                                 01440003
,ZMODSTB          Address of first modu le table entry  01450003ˇÁ
        L     #15,ZMODETB         Address of end of module table       0
        DROP  #15                                                      0
ODLOOP  DS    0H                                                       0
ˇ
3         SR    #2,#1               Get distance between first & last
3         BM    MODNF               If negative, search over, not found
3         SRL  ˇ
003         NR    #2,#0               Round down to multiple of 16
003         BZ    MODCOMP             If zero, only 1 entry, compare it
003         AR    #2,#1       ˇ
50003         CLC   LNAME(8),4(#2)      Compare our name with entry
60003         BE    MODGOT              If equal, we got the module alre
70003******** BL    MODLT               If leˇ
1580003         BH    MODGT               If greater, repeat with upper
1590003MODLT    DS    0H                  Here if our name less than ent
1600003         LR    #15,#2              Reset upper bound ˇ
 01610003         B     MODLOOP             Continue search
 01620003MODGT    DS    0H                  Here if our name greater tha
 01630003         LR    #1,#2               Reset lower bound of search
   01640003         B     MODLOOP             Continue search
   01650003MODCOMP  DS    0H                  Here if only one entry in
   01660003         LR    #2,#1               Point to the only entry
   0167000ˇ
     01680003         BNE   MODNF               If not equal, it's not f
     01690003MODGOT   DS    0H                  FOUND IN TABLE - WE MIGH
T    01700003         ICMˇ
       01710003         BNZ   RESOLVE             IF RESOLVED, GO PROCES
LSE... 01720003* Entry found but no module loaded...
       01730003         LR    #3,#2     ˇ
illed in 01740003MODNF    DS    0H                  NOT FOUND IN TABLE -
SYSTEM   01750003         EJECT
         01760003**************************************ˇ
********** 01770003*
         * 01780003* THEN, SEARCH THE LOAD LIST OF THE CURRENT TASK TO S
E MODULE * 01790003* IS ALREADY LOADED.                               ˇ
           * 01800003*
           * 01810003***************************************************
************ 01820003*
     +
ed ˇ
cess           * 01850003* recursively without fear of failure, even if
asking.        * 01860003*
               * 0ˇ
****************** 01880003         SPACE 1
                   01890003         L     #15,X'21C'          ADDRESS OF
 TCB               01900003      ˇ
OF LOAD LIST         01910003LLSLOOP  DS    0H                  IF NO MO
LIST ENTRIES         01920003         BZ    NOTLDED             THEN EXI
IN STORAGE           01930003         L     #14,ˇ
 CDE FOR LLS ENTRY     01940003         CLC   8(8,#14),LNAME      IF MOD
 MATCHES               01950003         BE    INSTOR              THEN M
 IN STORAGE            01960003         ICM   #15,15,0(#15)    ˇ
T LOAD LIST ENTRY        01970003         B     LLSLOOP
                         01980003INSTOR   DS    0H                  #14
NTRY FOR MODULE          01990003         L     #4,X'10'(,#14)      PICK
TRY POINT                  02000003         B     RESOLVE             GO
LVE EXTERNAL REFERENCES    02010003NOTLDED  DS    0H                  NO
D LIST - TRY BLDL          02020003*
             ˇ
NOTE THAT THE MODULE         02040003* MUST BE FOUND IN THE CURRENT TASK
 (OR STEPLIB IN BATCH).      02050003* ON TSO THIS WILL BE THE LIBRARY S
 ON THE CALL COMMAND.       ˇ
                               02070003         BLDL  0,BLDLLIST
                               02080003         B     BLDLRET(#15)
                               02090003BLDLˇ
                                 02100003         B     BLDL4
                                 02110003* BLDL RETURN CODE 8 - SOMETHIN
NG                               02120003         NI    ZLˇ
CAN'T BE NONINTERRUPTIBLE ANYMORE  02130003         TM    ZLCIFLGS,ZLCIA
 attention interrupt occurred      02140003         BOR   #13
en go to handle it                 02150003         LR    #2,#0
GET REASON CODE IN REG 2             02160003         B     BLDL8(#2)
                                     02170003BLDL8    B     BLDL8R0
                                     02180003         B     BLDL8R4
        ˇ
  BLDL RC=8, REASON=8                  02200003         B     BLOWUP
                                       02210003BLDL8R0  #TPUT 2,ZIL1006
  BLDL RC=8, REASON=0                   02220003ˇÁ
OWUP                                                   02230003BLDL8R4
ZIL1007           BLDL RC=8, REASON=4                  02240003
OWUP                                                   02250003 ˇ
1                                                        02260003BLDL4
0H                  BLDL RC=4 - LOAD MODULE NOT FOUND    02270003
ZLCLDFLG,ZLCLDGNM   IF  ENTRY VIA ZILLOADN W.NAME        02280003

  ZIL1002+8(8),LNAME  MOVE FUNCTION NAME INTO MESSAGE      02300003
T 2,ZIL1002           SAY FUNCTION NOT FOUND               02310003
  RETNIL      ˇ
    0H                                                       02330003
C   ZIL1001+8(8),LNAME  MOVE FUNCTION NAME INTO MESSAGE      02340003
PUT 1,ZIL1001           SAY Fˇ
B     RETNIL              RETURN NIL                           02360003B
DS    0H                                                       02370003
AIF   (&ZILVPS).NCLIZ2                      ˇ
  CLI   Z,2                 MODULE MUST BE IN JOB-/STEP-/TASKLIB 0239000
  BNE   BLDL4               OTHERWISE PRETEND IT WASN'T FOUND    0240000
  ANOP                                                     ˇ
    LOAD  DE=LNAME,ERRET=LOADERR                                   02420
    LR    #4,#0               GET ENTRY POINT                      02430
PLAY MESSAGE UPON SUCCESSFUL LOADING                               02440
      MVC   NAME1010(8),LNAME                                        024
      STCM  #4,15,ADDR1010                                           024
      NI    ADDR1010,B'01111111' CLEAR HIGH ORDER BIT OF ADDRESS     024
      UNPˇ
        TR    ADDR1010(8),TRTBL                                        0
        MVI   ADDR1010+8,C'.'                                          0
        #TPUT 0,ZIL1010 ˇ
3         B     RESOLVE             GO TO RESOLVE EXTERNAL REFERENCES
3         SPACE
3GOTADDR1 DS    0H                  ENTˇ
003         L     #4,0(,#11)          PARM IS POINTER TO CODE
003******** B     RESOLVE             GO TO RESOLVE EXTERNAL REFERENCES
003         SPACE                                     ˇ
70003RESOLVE  DS    0H                  RESOLVE EXTERNAL REFERENCES
80003         STCM  #4,B'1000',TESTBYTE TEST HIGH-ORDER BYTE OF LOAD MOD
90003         NI    TESTBYTE,X'7F'      TURN OFF AMODE BIT           +
2600003         BNZ   BADRMODE            IF RMODE=ANY, ERROR      ˇ
 02610003         SPACE 1
 02620003         LTR   #3,#3               If there is a module entry t
 02630003         BZ    NOFILLEN            then
 0ˇ
   02650003NOFILLEN DS    0H
   02660003         SPACE 1
   02670003*     ˇ
     02680003* FOR EACH LOADED MODULE, IF THERE ARE ANY UNRESOLVED EXTER
     02690003* REFERENCES THEY ARE TO BE RESOLVED DYNAMICALLY.  THIS IS
     02700003* RECURSIVE PROCESSˇ
       02710003* LIST OF SUBROUTINE ADDRESSES IS SET ON TO PREVENT INFIN
       02720003* RECURSION IN THE CASE OF MODULES THAT REFER TO EACH OTH
       02730003* TO THEMSELVES DIRECTLY OR INDIˇ
         02740003*
         02750003         XR    #14,#14             CLEAR INSERT REG
         02760003         IC    #14,4(,#4)          GET LENGTHˇ
           02770003         LA    #5,5+3(#14,#4)      POINT TO MODULE CO
IDENTIFIER 02780003         N     #5,=X'FFFFFFFC'     ROUNDING UP TO NEX
RD         02790003         USING ZINT,#5             TO POINT TO "ZINT"
             02800003         TM    ZINFLAGS,ZINGSUBR   IF NO SUBRS ARE
             02810003         BZ    NORES               THEN EXIT WITHOU
ING          02820003         TM    ZINSUBRA,X'80'      ELSE IF MODULE A
ESOLVED     ˇ
LVING          02840003         L     #3,ZINSUBRA         ELSE POINT TO
D OF SUBRS     02850003         OI    ZINSUBRA,X'80'      INDICATE THIS
PROCESSED      02860003RESLˇ
LIST             02870003         C     #3,ZINSUBRE         UNTIL FINISH
LIST             02880003         BNL   ENDRES
                 02890003         ICM   #2ˇ
ROUTINE            02900003         BZ    MUSTLOAD            IF ZERO, I
E LOADED           02910003         LA    #15,ZILLOADA        ELSE GET A
F ZILLOADA         02920003         B     RESCALL        ˇ
                     02930003MUSTLOAD DS    0H                  EXTERNAL
MUST BE LOADED       02940003         LA    #2,4(,#3)           POINT TO
E OF THE MODULE      02950003         LA    #15,ZILLOADN        GET ADDR
 ZILLOADN              02960003RESCALL  DS    0H
                       02970003         STM   #3,#5,16(#11)       PUSH C
OINTERS ONTO STACK     02980003         ST    #2,28(,#11)         PUT AR
N STACK                 02990003ˇÁ
  POINT TO NEW STACK LOCATION          03000003         #BASR #14,#15
  RECURSIVE INVOCATION TO RESOLVE      03010003         LM    #3,#5,16(#
  RESTORE VALUES FROM STACK            03020003 ˇ
    IF NOT RESOLVED (RESULT = NIL),      03030003         BNE   STOREIT
    THEN                                 03040003         L     #15,=A(Z
     SET ADDRESS OF ERROR ROUTINE        03050003STOREIT  DS   ˇ
      ELSE (RESOLVED)...                   03060003         ST    #15,0(
       SET ADDRESS OF SUBROUTINE           03070003         LA    #3,12(
      BUMP TO NEXT IN LIST                 03080003         B     RESLOO
        CONTINUE                             03090003ENDRES   DS    0H
        END RESOLVING CODE                   03100003NORES    DS    0H
        NO RESOLVING CODE                    03110003         SPACE
             ˇ
                                               03130003         LR    #1
          GET ENTRY POINT INTO RETURN REG      03140003         B     RE
          RETURN WITH IT AS ˇ
                                                 03160003LOADERR  DS
                                                 03170003         CH
106')       IF ABEND CODE WAS 106          ˇ
C             AND                                  03190003         CH
'12'          REASON CODE WAS C                    03200003         BNE
C             THEN                                 0321000ˇ
IL1003           ERROR = INSUFFICIENT STORAGE        03220003         LA
'ZIL1003                                             03230003         B
ERR                                                  03240003NOT106C  DS
                  ELSE                                 03250003
,ZIL1004           ERROR = SOMETHING ELSE              03260003
,L'ZIL1004                                             03270003
OWERR   ˇ
0H                  MODULE LOADED ABOVE 16MB LINE        03290003
#1,ZIL1012           ERROR = SOMETHING ELSE              03300003
#0,L'ZIL1012           ˇ
  0H                                                       03320003
  8(8,#1),LNAME       MOVE FUNCTION NAME INTO MESSAGE      03330003
T 3,(1),(0)           DISPLAY SEVERE Eˇ
    0H                                                       03350003
    #15,#10             SET RETURN TO NIL                    03360003***
    RETURN                                           +
SPACE                                              ˇ
  DS    0H                                                       0339000
  #ZRET ,                   RESTORE REGISTERS AND RETURN         0340000
  SPACE                                                          0ˇ
P   DS    0H                                                       03420
    NI    ZLCIFLGS,255-ZLCISMC Turn off non-interruptibility flag  03430
    TM    ZLCIFLGS,ZLCIATTN   If attention interrupt occurred      03440
 ˇ
      MVC   NAMETXT,LNAME                                            034
      #ERR  'ZIL1014 ZILLOAD: Unable to load compiled function ',   X034
            NAMEˇ
        SPACE 1                                                        0
        DS    0H,XL1                                                   0
AMESTR  DC    YL1(##STRING),AL3ˇ
3NAMETXT  DS    CL8
3         SPACE 1
3BLDLLIST DC    H'1',H'58'          BLDL LIST ˇ
003LNAME    DC    CL8' '              NAME OF FUNCTION FOR BLDL AND LOAD
003TTR      DS    CL3
003K        DS    CL1                                        ˇ
70003Z        DS    CL1
80003C        DS    CL1
90003         DS    CL44
3600003         DC    C'0123456789ABCDEF'
3610003TRTBL    EQU   *-256
3620003         SPACE 1
3630003TESTˇ
 03640003         SPACE 1
 03650003ZIL1001  DC    C'ZIL1001 ________ NOT FOUND ON ZIL LOAD MODULE
X03660003               ' ˇ
   03670003ZIL1002  DC    C'ZIL1002 ________ NOT FOUND, FUNCTION REFEREN
ESX03680003               OLVED.'
   03690003ZIL1003  DC    C'ZIL1003 _____ˇ
ORAGX03700003               E.'
     03710003ZIL1004  DC    C'ZIL1004 ________ LOAD FAILED, CHECK SYSTEM
S FOX03720003               R REASON.'                  ˇ
       03730003ZIL1005  DC    C'ZIL1005 CANNOT LOAD FUNCTION, NAME LONGE
 CHARAX03740003               CTERS.'
       03750003ZIL1006  DC    C'ZIL1006 BLDL ERROR - INVALID TASK LIBRA
TEPLIB DX03760003ˇÁ
                       03770003ZIL1007  DC    C'ZIL1007 BLDL ERROR - NOT
SYSTEM STORAGE.'       03780003ZIL1008  DC    C'ZIL1008 BLDL ERROR - RET
 8, REASON CODE 8.'    03790003Zˇ
NAME NOT A STRING OR SYMX03800003               BOL.'
                         03810003ZIL1012  DC    C'ZIL1012 ________ LOAD
RMODE=ANY MODULE LOADED X03820003              ˇ
                           03830003MSG1010  DC    C'ZIL1010 '
                           03840003NAME1010 DC    CL8'________'
                           03850003         DC    C' LOADED ATˇ
                             03860003ADDR1010 DC    CL8'________'
                             03870003         DC    C'.'
                             03880003ZIL1010  EQU   MSG1010,*-MSG1010,C'
                               03890003         EJECT
                               03900003         LTORG
                               03910003         EJECT
            ˇ
                                 03930003         SPACE 1
                                 03940003*******************************
***************************ˇ
                                 * 03960003* THIS IS A ROUTINE WHOSE ADD
S PLUGGED INTO COMPILED CODE     * 03970003* WHEREVER AN UNRESOLVED COMP
E FUNCTION REFERENCE OCCURS.     * 0398000ˇ
ISSUES A THROW TO TAG NIL.         * 03990003*
                                   * 04000003***************************
************************************ 04010003         SPAˇ
                                       04020003         B     ZLERR2-*(,
                                       04030003         DC    YL1(ZLERR1
                                       04040003         DC    C'#<UNRESO
OMPILED FUNCTION>'                       04050003         DC    CL16' '
                                         04060003ZLERR1   EQU   *
                                         04070003ZLERR2   DS    0H
       ˇ
                                           04090003         USING ZLERR,
                                           04100003         #ERR  'ZIL12
to unresolved compiledˇ
                                             04120003         SPACE 1
                                             04130003         DROP  #3
                                     +
                                   ˇ
                                                 04160003         EJECT
                                                 04170003         #ZMOD
                                                 0ÿ 4180003         END
                                                   04190003{
∆
0010000*****************************************************************
0011002*
0012002*ˇ
 00013002*                     All rights reserved.
 00014002*
 00015002**************ˇ
** 00016002*
 * 00017002* This subroutine conses up a double-float.
 * 00018002* On entry, FPR0 contains tˇ
   * 00019002*           GPR0 is set for CONS as usual (stack pointer).
   * 00020002* On exit, GPR15 points to the newly consed flonum object.
   * 00030002*                                       ˇ
     * 00040002* This routine uses and destroys registers 14 thru 4.
     * 00050002*
     * 00060002* Note:  #15 is the base reg throughout, except when ˇ
ust    * 00070002*        be signalled for floating-point overflow, or w
ing.   * 00080002*
       * 00090002*******************************************************
***ˇ
         * 00110002* The format of a double-float is:
         * 00120002*
         * 0013000ˇ
           * 00140002*
           * 00150002*  A8000000 4218abab 4218abab cdcdefef
           * 00160002*           ˇ
             * 00170002* Note that the left half of the flonum is duplic
the second   * 00180002* word (word 1) of the object.  This enables fast
ZEROP hacks. * 00190002* If you ever decide to sˇ
 change the    * 00200002* functions like MINUSP that depend on that hac
               * 00210002*
               * 00220002**************************************ˇ
****************** 00230002         SPACE 1
                   00240002         #ZEQU
                   00250002         #ZCOM
                     00260002         USING ZLCOMMON,#13
                     00270002ZILMDF   CSECT
                     00280002         SPACE 1
             +
           ˇ
                         00310002FDFRETRY DS    0H
                         00320002         SPACE 1
                         0ˇ
#2 = LEN, #3 = NXT         00340002         LA    #4,16(,#3)          Po
 end of new object         00350002         AR    #2,#1               Co
dress of end of VSS        00360002      ˇ
n't have room                00370002         BH    FDFNORM
can't build it just yet      00380002         MVC   0(4,#3),HEADER
 bits and zeroes in word 0   00390002         STE   #F0,ˇ
sign info, etc. in word 1      00400002         STD   #F0,8(,#3)
double-float                   00410002         LR    #15,#3
et pointer to slot             00420002         ST    #4,ZLCVSNXT      ˇ
te next-VSS-slot pointer         00430002         BR    #14
rn with double float             00440002         SPACE 1
                                 00450002         DS    0A
      ˇ
eader for double float             00470002         SPACE 1
                                   00480002FDFNORM  DS    0H
 room to cons up new ˇ
                                     00500002         LTR   #0,#0
If we already tried to get more room 00510002         BZ    ERRORG
then error                          ˇ
  Else force end of "free list"        00530002         LR    #1,#10
  Set dummy arg 1 to CONS = NIL        00540002         LR    #2,#10
  Set dummy arg 2 to CONS = NIL        00550002    ˇ
    Save base register                   00560002         LR    #4,#14
    Save return register                 00570002         L     #15,ZLCC
    Get address of ZILCONS               00580002         #BASR #1ˇ
      Call CONS to force a GC              00590002         LR    #15,#3
      Restore base register                00600002         LR    #14,#4
      Restore return register              00610002         XR    #0,#0
 ˇ
        and try it again                     00630002         SPACE 1
                                             00640002ERRORG   DS    0H
        Not enouˇ
                                               00660002*****************
********************************************** 00670002*
                                              * 00680002ˇÁ
 purposes of this routine (and laziness), we assume that     * 00690002*
y callers thereof will have a "normal" function header       * 00700002*
unction name of reasonable length (i.e. 24 bytes or less).   * 00710002*
                                                               * 0072000
**************************************************************** 0073000
  SPACE 1                                                        0074000
  MVC  ˇ
    XR    #0,#0                                                    00760
    IC    #0,4(,#12)          Get length of function name          00770
    SH    #0,=H'16'   ˇ
      STCM  #0,7,Z+1            Store length of function name        007
      LR    #4,#15                                                   008
      USING ZILMDF,#4                ˇ
        DROP  #15                                                      0
        #ERR  'ZIL4103 ',Z,': Not enough vector/string space to build X0
              double-float.',PREFIX=NO              ˇ
2         SPACE 1
2         DS    0H,XL1              Align to non-halfword boundary
2Z        DC    YL1(##STRING),AL3(0) Place to build function name sˇ
002         DS    CL24
002         SPACE 1
002         LTORG
00¯ 2         SPACE 1
10002         END
20002
LE TABLE'              00010000*****************************************
********************** 00020032*
                     * 00030032*ˇ
aper Laboratory Inc.   * 00040032*                     All rights reserv
                       * 00050032*
                       * 00060032**************ˇ
************************** 00070032         TITLE 'ZILMODS - INSTREAM MA
                           00080032         MACRO
                           00090032&SYM     MODEXT &NAME      ˇ
                             00100032         WXTRN &NAME
                             00110032&SYM     DC    V(&NAME),CL8'&NAME',
                             00120032         MEND
                               00130032         SPACE 2
                               00140032         MACRO
                               00150032&SYM     MODINT &NAME
            ˇ
                                 00170032         MEND
                                 00180032         TITLE 'ZILMODS - ZIL 1
UTINE MODULE TABLE'        ˇ
********************************** 00200032*
                                 * 00210032* A VECTOR TABLE OF COMMONLY
CTIONS (MOST LIKELY TO BE LINKED * 0022003ˇ
PORATED AS A "LOOKASIDE" LIST IN   * 00230032* ORDER TO PREVENT LOADING
CATE CODE AND WASTING OF OPERATING * 00240032* SYSTEM MEMORY.
                                   * 00250032*           ˇ
                                     * 00260032* The in-line table of su
s has been extended with most        * 00270032* built-in ZIL functions,
 or not they are actually linked     * 00280032* with the mainline.  Thi
one by means of weak external          * 00290032* references for those
 don't want resolved unless they're    * 00300032* already there.  A bin
ch is done by ZILLOAD to locate        * 00310032* entries in this table
       ˇ
                                         * 00330032*********************
****************************************** 00340032*
                      ˇ
******************************************** 00360032*
                                           * 00370032* Change activity:
                                     +
                                   ˇ
r enhanced ZIL reader.  See macro #ZMOD.       * 00400032*
                                               * 00410032***************
************************************************ 0ˇ
                                                   00430032         EJEC
                                                   00440032ZILMODS  CSEC
                                                   00450032      ˇ
ABLE)           Address of start of table            00460032         DC
ABLE)           Address of end of table              00470032         SP
                                                     00480032*
ˇ
he table to locate commonly needed modules follow.     00500032*
                                                       00510032
               ˇ
A(@ZEVINIT)         Pointer to address of ZEVINIT        00530032@@ZDPRI
A(@ZDPRINT)         Pointer to address of ZDPRINT        00540032@@ZDREA
A(@ZDREAD)          Pointer toˇ
E 1                                                        00560032STABL
  0A                  Start of table                       00570032
E 1                                          ˇ
************************************************************ 00590032*
                                                           * 00600032* I
ODE MODULE TABLE                                           *ˇ
                                                             * 00620032*
BLE IS A LIST OF MODULES WHICH ARE, IN GENERAL, LINKEDITED   * 00630032*
IS MODULE (E.G. AS PART OF THE INTERPRETER) AND SHOULD BE    * 00640032*
VED WITH THE ADDRESSES OF CODE THAT IS ALREADY IN MEMORY.      * 0065003
                                                               * 0066003
NAL REFERENCES WHICH MUST BE RESOLVED ARE                      * 0067003
IFIED BY "ˇ
                                                                 * 00690
K EXTERNAL REFERENCES (WHICH MAY OR MAY NOT BE RESOLVED) ARE     * 00700
NTIFIED BY "MODEXT" MACROˇ
                                                                   * 007
OTE: THIS TABLE *MUST* BE IN ALPHABETICAL ORDER!!!                 * 007
                                        ˇ
 SOME MODULES ARE INCLUDED EVEN THOUGH THEY WOULD NOT BE PART OF     * 0
 THE INTERPRETER OTHERWISE, EITHER TO PREVENT MASSIVE LOADING OF     * 0
 EVALUATOR MODULES (APPLY), BECAUSE OF FREQUENT OR QUIC K USE         *
2ˇÁ
     * 00780032*
     * 00790032*********************************************************
****** 00800032 ˇ
         00810032         MODEXT ABS
         00820032         MODEXT ACSIZE
         00830032         MODINˇ
           00840032         MODEXT ALPHACP
           00850032         MODINT APPEND
           00860032         MODINT APPEND2    ˇ
             00870032         MODEXT APPLY
             00880032         MODEXT APROPOS
             00890032         MODEXT ARGS                    ˇ
               00900032         MODEXT ASH
               00910032         MODEXT ASSOC
               00920032         MODINT ASSQ
                 00930032         MODEXT ASSQL
                 00940032         MODEXT ASSQUAL
                 00950032         MODINT ATOM
           ˇ
                   00970032         MODEXT BIGNUM
                   00980032         MODINT BIGP
                   0099003ˇ
                     01000032         MODEXT BOUNDP
                     01010032         MODEXT BUTLAST
                     01020032         MODˇ
                       01030032         MODINT CDR
                       01040032         MODEXT CEILING
                       01050032         MODEXT CHAR     ˇ
                         01060032         MODEXT CHARDOWN
                         01070032         MODINT CHARP
                         01080032         MODEXT CHARUP                ˇ
                           01090032         MODINT CLOSE
                           01100032         MODINT CLOSUREP
                           01110032         MODEXT CLRSCRN
      ˇ
                             01130032         MODEXT CONCAT
                             01140032         MODINT CONS
                     +
                   ˇ
                                 01170032         MODEXT COPYSYM
                                 01180032         MODEXT COPYTREE
                                 0ˇ
                                   01200032         MODINT CTERPRI
                                   01210032         MODEXT CURDATE
                                   01220032      ˇ
                                     01230032         MODEXT CURTIME
                                     01240032         MODEXT DEFRDMAC
                                     01250032         MODEXT DELˇ
                                       01260032         MODEXT DELQL
                                       01270032         MODEXT DELQUAL
                                       01280032         MODINT DFLOATP

                                         01300032         MODEXT DOWNCAS
                                         01310032         MODINT EBCDIC
              ˇ
                                           01330032         MODEXT ED
                                           01340032         MODEXT ENDP
                             ˇ
                                             01360032         MODINT EOF
                                             01370032         MODINT EQ
                                            ˇ
                                               01390032         MODINT E
                                               01400032         MODEXT E
                                               01410032    ˇ
                                                 01420032         MODEXT
                                                 01430032         MODINT
                                                 01440032         MODEXT
                                                   01450032         MODI
                                                   01460032         MODE
DE                                                 01470032         MODE
DEC      ˇ
LODEN                                                01490032         MO
T                                                    01500032         MO
UNDP                    ˇ
EATUREP                                                01520032
EXPAND                                                 01530032
IRSTN                                                   01540032ˇÁ
        MODEXT FIX                                                     0
        MODINT FIXNUMP                                                 0
        MODEXT FLOAT                                                   0
ˇ
2         MODEXT FLOOR
2         MODEXT FMAKUNBO
2         MODEXˇ
032         MODINT FUNARGP
032         MODINT FUNCALL
032         MODINT FUNENV     ˇ
40032         MODINT FUNFUN
50032         MODEXT GC
60032         MODEXT GCD2                    ˇ
1670032         MODEXT GCMSG
1680032         MODEXT GCTIME
1690032         MODINT GENSYM                               ˇ
 01700032         MODEXT GENTEMP
 01710032         MODINT GET
 01720032         MODEXT GETCHAR
   01730032         MODEXT GETCHARN
   01740032         MODINT GETK
   01750032         MODEXT GETL
   0176003ˇ
     01770032         MODINT GREATERP
     01780032         MODEXT HAIPART
     01790032         MODˇ
       01800032         MODEXT IFILEP
       01810032         MODEXT IMPLODE
       01820032         MODEXT INDEX    ˇ
         01830032         MODINT INTEGERP
         01840032         MODEXT INTERSEC
         01850032         MODEXT INTRPRET              ˇ
           01860032         MODEXT INTRQ
           01870032         MODEXT INVOKE
           01880032         MODEXT ISPFP                              ˇ
             01890032         MODINT KEYWORDP
             01900032         MODEXT KWDIFY
             01910032         MODEXT LAND
     +
   ˇ
                 01940032         MODEXT LDIFF
                 01950032         MODINT LENGTH
                 0ˇ
                   01970032         MODINT LIST
                   01980032         MODINT LISTP
                   01990032      ˇ
                     02000032         MODEXT LLVARS
                     02010032         MODINT LOAD
                     02020032         MODEXT LOGˇ
                       02030032         MODEXT LOGBITP
                       02040032         MODEXT LOGCOUNT
                       02050032         MODEXT LOGNOT          ˇ
                         02060032         MODEXT LOGTEST
                         02070032         MODEXT LOR
                         02080032         MODEXT LSH
                           02090032         MODEXT LXOR
                           02100032         MODEXT MAKNAM
                           02110032         MODEXT MAKNUM
             ˇ
                             02130032         MODEXT MAPAND
                             02140032         MODEXT MAPC
                            ˇ
                               02160032         MODEXT MAPCAR
                               02170032         MODEXT MAPCON
                               02180032    ˇ
                                 02190032         MODEXT MAPLIST
                                 02200032         MODEXT MAPOR
                                 02210032         MODEXT Mˇ
                                   02220032         MODEXT MAX2
                                   02230032         MODEXT MEMBER
                                   02240032         MODINT MEMQ
                                     02250032         MODEXT MEMQL
                                     02260032         MODEXT MEMQUAL
                                     02270032         MODEXT MEXPAND
        ˇ
                                       02290032         MODEXT MINARGS
                                       02300032         MODINT MINUS
                                        02310032ˇÁ
INUSP                                                  02320032
IN2                                                    02330032
KATOM                                                  02340032 ˇ
 MKBIGNUM                                                02350032
 MKFIXNUM                                                02360032
 MKFLONUM                                                02370032

XT MKLIST                                                  02390032
XT MKNEWENV                                                02400032
XT MKSTRUCT   ˇ
DEXT MKVECTOR                                                02420032
DINT MSGLEVEL                                                02430032
DINT NCONC                   ˇ
MODINT NCONC2                                                  02450032
MODEXT NEWLINEP                                                02460032
MODINT NOT                                  ˇ
  MODEXT NOTANY                                                  0248003
  MODEXT NOTEVERY                                                0249003
  MODEXT NRECONC                                           ˇ
    MODINT NREVERSE                                                02510
    MODEXT NTH                                                     02520
    MODEXT NTHCDR                                                  02530
      MODINT NULL                                                    025
      MODINT NUMBERP                                                 025
      MODINT OBLIST                                                  025
      MODˇ
        MODEXT OFILEP                                                  0
        MODINT OPEN                                                    0
        MODEXT PAIRLIS  ˇ
2         MODEXT PARSBODY
2         MODINT PBIND
2         MODEXT PDSIZE                ˇ
032         MODEXT PEEK
032         MODEXT PEEKB
032         MODEXT PEEKC                              ˇ
60032         MODEXT PEEKCH
70032         MODEXT PEEKL
80032         MODINT PLIST                                           +
2690032         MODINT PLUSP                                       ˇ
 02700032         MODEXT PM
 02710032         MODEXT PM1
 02720032         MODINT PNAME
 0ˇ
   02740032         MODEXT PPRINT
   02750032         MODEXT PPTIME
   02760032      ˇ
     02770032         MODINT PRINC
     02780032         MODINT PRINT
     02790032         MODEXT PRIˇ
       02800032         MODEXT PRINTS
       02810032         MODINT PRIN1
       02820032         MODEXT PROBEF          ˇ
         02830032         MODINT PUTPROP
         02840032         MODINT QUIT
         02850032         MODEXT RANDOM                       ˇ
           02860032         MODEXT RDRMACRO
           02870032         MODINT READ
           02880032         MODEXT READCH
             02890032         MODEXT READLINE
             02900032         MODEXT REMDUPQ
             02910032         MODEXT REMDUPQL
            ˇ
               02930032         MODINT REMPROP
               02940032         MODEXT REMQ
               02950032    ˇ
                 02960032         MODEXT REMQUAL
                 02970032         MODEXT RESTARG
                 02980032         MODEXT Rˇ
                   02990032         MODEXT REVERSAL
                   03000032         MODEXT REVERSE
                   03010032         MODEXT RMCHAR        ˇ
                     03020032         MODEXT RMINIT
                     03030032         MODEXT RMMAC
                     03040032         MODINT RMNIL
                       03050032         MODEXT ROT
                       03060032         MODEXT ROUND
                       03070032         MODINT RPLACA
                        03080032ˇÁ
                                       03090032         MODEXT RUNTIME
                                       03100032         MODINT SALIST
                                       03110032 ˇ
                                         03120032         MODEXT SAPPEND
                                         03130032         MODEXT SCAPITA
                                         03140032         MODEXˇ
                                           03150032         MODEXT SET
                                           03160032         MODEXT SETAB
                                           03170032         MODEXT SETAS
                                             03180034         MODEXT SET
                                             03190032         MODEXT SET
                                             03200032         MODEXT SET
             ˇ
                                               03220032         MODEXT S
                                               03230032         MODINT S
                            ˇ
T                                                03250032         MODEXT
                                                 03260032         MODEXT
                                           ˇ
LST                                                03280032         MODE
NTA                                                03290032         MODI
TP                                                 0330003ˇ
EP                                                   03310032         MO
NGTH                                                 03320032         MO
RIM                                                  03330032         MO
OME                                                    03340032
ORT                                                    03350032
ORTCAR                                                 03360032
REMOVE  ˇ
 SREVERSE                                                03380032
 SRTRIM                                                  03390032
 SSCAN                 ˇ
XT STRIM                                                   03410032
XT STRING                                                  03420032
NT STRINGP                            ˇ
DINT STRUCTP                                                 03440032
DEXT STRUCTUR                                                03450032
DEXT SUBLIS                                          +
MODEXT SUBLISQ                                     ˇ
  MODINT SUBRP                                                   0348003
  MODEXT SUBSTQ                                                  0349003
  MODEXT SUBSTQL                                                 0ˇ
    MODEXT SUBSTQUA                                                03510
    MODEXT SUBSTR                                                  03520
    MODINT SUB1                                                    03530
 ˇ
      MODINT SYMBOLP                                                 035
      MODEXT SYMEVAL                                                 035
      MODEXT TABˇ
        MODINT TERPRI                                                  0
        MODEXT TOSTRING                                                0
        MODEXT TRUNCATE        ˇ
2         MODEXT TSO
2         MODEXT TYI
2         MODEXT TYIPEEK                      ˇ
032         MODEXT TYO
032         MODEXT TYPEP
032         MODEXT UCONCAT                                   ˇ
60032         MODINT UNEBCDIC
70032         MODEXT UNION
80032         MODEXT UNIONQ
3690032         MODEXT UNKWDIFY
3700032         MODEXT UNTYI
3710032         MODEXT UNWORD
3720032    ˇ
 03730032         MODEXT USERID
 03740032         MODEXT VALUES
 03750032         MODEXT Vˇ
   03760032         MODEXT VCOPY
   03770032         MODINT VECP
   03780032         MODEXT VECTOR        ˇ
     03790032         MODINT VECTORP
     03800032         MODEXT VERIFY
     03810032         MODEXT VFILL                      ˇ
       03820032         MODEXT VLENGTH
       03830032         MODEXT VLIST
       03840032         MODINT VREF                                    
         03850032ˇÁ
                       03860032         MODEXT VSSIZE
                       03870032         MODEXT WARN
                       03880032 ˇ
                         03890032         MODEXT XCONS
                         03900032         MODEXT XINCLUDE
                         03910032         MODEXˇ
                           03920032         MODINT ZCAR
                           03930032         MODINT ZCPRINT
                           03940032         MODINT ZCREAD     ˇ
                             03950032         MODEXT ZCREXEC
                             03960032         MODEXT ZCSRDL
                             03970032         MODEXT ZCSRFS
                               03980032@ZDPRINT MODINT ZDPRINT
                               03990032@ZDREAD  MODINT ZDREAD
                               04000032         MODINT ZEROP
            ˇ
                                 04020032         MODINT ZEVAUTO
                                 04030032         MODINT ZEVDEFLD
                           ˇ
                                   04050032         MODINT ZEVDSUB
                                   04060032         MODEXT ZEVDVAR
                                   0407003ˇ
                                     04080032         MODEXT ZEVLIST
                                     04090032         MODEXT ZEVMAPP
                                     04100032         MODˇ
                                       04110032         MODEXT ZEVSYM
                                       04120032         MODINT ZEVXVAR
                                       04130032         MODEXT ZFMEXEC
                                         04140032         MODEXT ZFMPARS
                                         04150032         MODEXT ZFSEXEC
                                         04160032         MODEXT ZGETFPI
       ˇ
                                           04180032         MODEXT ZIFAC
                                           04190032         MODEXT ZIFAS
                      ˇ
                                             04210032         MODEXT ZIF
                                             04220032         MODEXT ZIF
                                     +
                                   ˇ
                                                 04250032         MODEXT
                                                 04260032         MODEXT
                                                 0ˇ
D                                                  04280032         MODE
PLY                                                04290032         MODE
OL                                                 04300032      ˇ
CLOSE                                                04310032         MO
DIV                                                  04320032         MO
DSNI                                                 04330032         MO
ˇ
ILDUMP                                                 04350032
ILEDIT                                                 04360032
ILEQUAL        ˇ
 ZILEVAL                                                 04380032
 ZILEXPL                                                 04390032
 ZILFIX                       ˇ
XT ZILFLAT                                                 04410032
XT ZILGCD                                                  04420032
XT ZILHASH                                   ˇ
DEXT ZILHELP                                                 04440032
DEXT ZILIMPL                                                 04450032
DEXT ZILINTLN                                               ˇ
MODINT ZILLOAD                                                 04470032
MODINT ZILMUL                                                  04480032
MODINT ZILOPEN                                                 04490032
  MODEXT ZILPKCH                                                 0450003
  MODEXT ZILPP                                                   0451003
  MODEXT ZILPROGV                                                0452003
  MODEXT Zˇ
    MODINT ZILREM                                                  04540
    MODEXT ZILSPAD                                                 04550
    MODEXT ZILSPKG       ˇ
      MODEXT ZILSPRT                                                 045
      MODEXT ZILSRD                                                  045
      MODINT ZILSUB                     ˇ
        MODEXT ZILTEST                                                 0
        MODEXT ZILTRACE                                                0
        MODEXT ZILTSO                                  
2ˇÁ
       04630032         MODEXT ZILVSET
       04640032         MODEXT ZILVSYM
       04650032 ˇ
         04660032         MODINT ZILXCLO
         04670032         MODINT ZILXDEF
         04680032         MODINˇ
           04690032         MODEXT ZILXLFY
           04700032         MODINT ZILXSUB
           04710032         MODEXT ZISEXEC    ˇ
             04720032         MODEXT ZISGET
             04730032         MODEXT ZISPUT
             04740032         MODEXT ZMADD                   ˇ
               04750032         MODEXT ZMDIV
               04760032         MODEXT ZMGCD
               04770032         MODEXT ZMMAX
                 04780032         MODEXT ZMMIN
                 04790032         MODEXT ZMMUL
                 04800032         MODEXT ZMREM
           ˇ
                   04820034         MODEXT ZMSASCII           Hack for M
                   04830034         MODEXT ZMSASSQ            Hack for M
                   0484003ˇ
                     04850032         MODEXT ZMSCLOS            Hack for
                     04860032         MODEXT ZMSCURS            Hack for
                     04870032         MODˇ
ma                     04880032         MODEXT ZMSDOW             Hack f
ma                     04890032         MODEXT ZMSDREM            Hack f
ma                     04900032         MODEXT ZMSEQ    ˇ
syma                     04910032         MODEXT ZMSERROR           Hack
syma                     04920032         MODEXT ZMSLOAD            Hack
syma                     04930032         MODEXT ZMSMEMQ            Hacˇ
acsyma                     04940032         MODEXT ZMSMMOD            Ha
acsyma                     04950032         MODEXT ZMSOPEN            Ha
acsyma                     04960032         MODEXT ZMSPRINT           Ha
acsymaˇ
 Macsyma                     04980032         MODEXT ZMSREADL
 Macsyma                     04990032         MODEXT ZMSREMQ
 Macsyma             +
                   ˇ
 for Macsyma                     05020032         MODEXT ZMSTYPF
 for Macsyma                     05030032         MODEXT ZMSUB
                                 0ˇ
                                   05050032         MODEXT ZPUTFPI
                                   05060032         MODEXT ZPUTFPO
                                   05070032      ˇ
                                     05080032         MODEXT ZRMBQ
                                     05090032         MODEXT ZRMCOMMA
                                     05100032         MODEXT ZRMˇ
                                       05110032         MODEXT ZRMQUOTE
                                       05120032         MODEXT ZRMSELF
                                       05130032         MODEXT ZRMSHARP

                                         05150032ETABLE   DS    0A
    End of table                         05160032         SPACE 1
              „                            05170032         END
                                           05180032{
        TITLE 'ZILMUL - BUILT-IN ZIL 1.3 SUBROUTINE'                   0
********************************************************************** 0
                                                                     * 0
ˇ
2*                     All rights reserved.                            *
2*                                                                     *
2**************ˇ
002*
002* ZILMUL TAKES TWO ARGUMENTS. BOTH MUST BE NUMERIC ATOMS.
002*                          ˇ
19002* CONVERSION RULES ARE AS FOLLOWS: (INTEGERS ARE FIXNUMS AND BIGNUM
20002*
30002* 1. BOTH ARGS INTEGER       - PERFORM Iˇ
0040002* 2. BOTH ARGS FLOAT         - PERFORM REAL MULTIPLICATION.
0050002* 3. ONE INTEGER, ONE FLOAT  - CONVERT INTEGER ARGUMENT TO
0060002*                              FLOAT AND PERFORM REALˇ
 00070002*
 00080002* ANY OTHER TYPES CAUSE AN ERROR.
 00090002*
 * 00100002*************************************************************
** 00110002         SPACE
   00120002ZILMUL   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILMUL'
   0013000ˇ
     00140002         #ZSAV ,                   SAVE REGISTERS
     00150002         SPACE
     00160002         LM ˇ
       00170002         CLI   ##TYPE(#6),##FIXNUM
       00180002         BNE   ARG1NFIX
       00190002         CLI   ##TYPE(#7)ˇ
         00200002         BNE   FX1NFX2
         00210002*------------------------------------------------------
-------* 00220002*           FIXNUM BY FIXNUM MULTIPLY ˇ
         * 00230002*----------------------------------------------------
---------* 00240002         L     #3,##CDR(,#6)       GET FIXED VALUE 1
           00250002         M     #2,##CDR(,#7)       MULTIPLY THEM   ˇ
             00260002         SLDA  #2,32               SQUEEZE TO SIGNE
S            00270002         BO    FFBIG               FIXNUM OVERFLOW?
KE BIGNUM    00280002         #MKAT FIXED               MAKE A FIXNUM
     +
   ˇ
                 00310002RETURN   DS    0H                  RETURN WITH
                 00320002         SPACE
                 0ˇ
AND RETURN         00340002         SPACE
                   00350002*--------------------------------------------
-----------------* 00360002*     ˇ
 A BIGNUM          * 00370002*------------------------------------------
-------------------* 00380002FFBIG    LTR   #2,#2               TEST FOR
                     00390002         BM    FFBIˇ
E BIGNUM               00400002         L     #7,##CDR(,#7)       LOAD A
                       00410002         M     #6,##CDR(,#6)       MULTIP
G1                     00420002         SLDA  #6,1             ˇ
 31-BIT RADIX            00430002         BO    FFBIG3              MUST
2, 3-WORD BIGNUM!        00440002         SRL   #7,1                REST
FTER #6 ALIGNMENT        00450002         L     #15,ZLCBIG          GET
S OF ZILBIG                00460002         LA    #2,##VECDAT+8       GE
O PASS TO ZILBIG           00470002         #BASR #14,#15             GE
 SPACE FROM STRING SPACE   00480002         L     #4,BIG8             PR
AND LENGTH WOˇ
ST SIGNIFICANT WORD FOR STM  00500002         LA    #1,##VECDAT+8(,#15)
 END OF BIGNUM               00510002         STM   #4,#6,0(#15)
OLE WORD                    ˇ
T A PERMANENT OBJECT           00530002         B     RETURN
                               00540002         SPACE
                               00550002FFBIˇ
FIRST MULTIPLICAND               00560002         L     #7,##CDR(,#7)
SECOND MULTIPLICAND              00570002         LNR   #5,#5
 SURE WE CAN MULT THESE          00580002         LNR   #7ˇ
T WE DONT KNOW WHICH IS NEG        00590002         MR    #6,#5
LTIPLY TO GET POS RESULT           00600002         SLDA  #6,1
IFT TO RADIX-31                    00610002         SRL   #7,1
RESTORE LS WORD                      00620002         O     #7,=X'800000
IF 0 WE REALLY WANT -0               00630002         L     #15,ZLCBIG
GET ADDRESS FOR ZILBIG               00640002         LA    #2,##VECDAT+
GET SIZEˇ
  CALL ZILBIG                          00660002         LM    #4,#5,BIG8
  LOAD HEADER AND MINUS SIGN           00670002         OR    #5,#7
  MOVE LS WORD TO #5 AN D SET SIGN      00680002ˇÁ
,##VECDAT+8(,#15) POINT TO END OF BIGNUM               00690002
,#6,0(#15)        STORE BIGNUM, INCLUDING HEADER       00700002
,ZLCVSNXT         MAKE IT A PERMANENT OBJECT           00710002 ˇ
RETURN                                                   00720002
                                                         00730002FFBIG3
#15,TWO62           GET ADDRESS OF IN-LINE 2**62 BIGNUM  00740002

E 1                                                        00760002*----
---------------------------------------------------------* 00770002* ARG
XED BUT ARG 2 ˇ
-----------------------------------------------------------* 00790002
ACE 1                                                        00800002FX1
I   ##TYPE(#7),##BIGNUM      ˇ
BE    FIXBIG              FIXED * BIG   = BIG                  00820002
BNE   FX1NBF2                                                  00830002
SPACE                                       ˇ
---------------------------------------------------------------* 0085000
M BY BIGNUM MULTIPLY                                           * 0086000
-----------------------------------------------------------ˇ
G   ST    #7,0(,#11)          EXCHANGE POINTERS IN #6 AND #7       00880
    ST    #6,4(,#11)           AND ALSO IN THE STACK               00890
    LM    #6,#7,0(#11)        LOAD EXCHANGED REGS FROM STACK       00900
                                                                     009
FIX   ICM   #7,15,##CDR(#7)     LOAD FIXNUM AND SIGN TEST            009
      BZ    BIGFIX0             RESULT IS 0                          009
      BM ˇ
        XR    #5,#5               CLEAR FOR ICM OF LENGTH              0
        ICM   #5,7,1(#6)          GET BIGNUM LENGTH                    0
                        ˇ
2         L     #15,ZLCBIG          GET ADDRESS OF ZILBIG
2         LA    #2,##VECDAT+4(,#5)  GET SIZE TO PASS TO ZILBIG
2         #BASR #14,#15             CALˇ
002*
002         L     #6,0(,#11)          GC MAY HAVE MOVED BIGNUM POINTER
002         ICM   #3,15,##VECDAT(#6)  GET LS WORD OF Bˇ
30002         BM    BIGMFIXP            IT'S A NEG BIGNUM AND POS FIXNUM
40002*
50002PBIGFIX  LA    #4,4                WORD SIZE - BXLE INCREMENT SI+
1060002         MR    #2,#7                                        ˇ
 01070002         SLDL  #2,1
 01080002         SRL   #3,1
 01090002         LR    #1,#4               SHOULD BE SET TO ##VECDAT
 0ˇ
   01110002         LR    #14,#2
   01120002         AR    #1,#4
   01130002      ˇ
     01140002BFLOOP   L     #3,##VECDAT-4(#1,#6)
     01150002         MR    #2,#7
     01160002         ALR   #3,#ˇ
       01170002         BC    12,BFNCARRY         NO CARRY NEEDED
       01180002         AR    #2,#0               ADD 1 TO HIGHER WORD
       01190002BFNCARRY SLDA  #2,1             ˇ
         01200002         BO    BFBUG        *****  SHOULDN'T OVERFLOW H
         01210002         SRL   #3,1                RESTORE POSITION OF
         01220002         ST    #3,##VECDAT-4(#1,#15) STORE REˇ
           01230002         LR    #14,#2              STORE CARRY WORD
           01240002         BXLE  #1,#4,BFLOOP        ANOTHER WORD TO DO
           01250002*
             01260002         LTR   #2,#2
             01270002         BZ    BFRETURN
             01280002         ST    #2,##VECDAT-4(#1,#15)
            ˇ
 L'HEADER      01300002         STCM  #1,7,1(#15)         STORE BIGNUM L
               01310002         ST    #2,ZLCVSNXT         MAKE IT PERMAN
               01320002    ˇ
                 01330002BFRETURN LA    #2,##VECDAT-4(#1,#15)
                 01340002         SR    #1,#4
                 01350002         STCM  #1ˇ
                   01360002         ST    #2,ZLCVSNXT
                   01370002         B     RETURN
                   01380002         SPACE                ˇ
                     01390002BIGFIX0  L     #15,4(,#11)         GET POIN
 FROM STACK          01400002         B     RETURN              RETURN W
TER TO 0             01410002         SPACE
                       01420002BIGFIXM  LPR   #7,#7
                       01430002         BO    BIGFIXMC
                       01440002         CL    #7,=F'1'
                        01450002ˇÁ
  (* 2**31 -1) IS FIXNUM               01460002         XR    #5,#5
                                       01470002         ICM   #5,7,1(#6)
                                       01480002 ˇ
                                         01490002         LA    #2,##VEC
5)  GET SIZE TO PASS TO ZILBIG           01500002         #BASR #14,#15
                                         01510002         L    ˇ
                                           01520002         ICM   #3,15,
(#6)                                       01530002         BM    BIGMFI
                                           01540002         LA    #4,4
                                             01550002         MR    #2,#
                                             01560002         SLDL  #2,1
                                             01570002         SRL   #3,1
             ˇ
                                               01590002         O     #3
0000'                                          01600002         B     BF
                            ˇ
                                                 01620002BIGFIXM1 CLC
),0(#6)     COMPARE BIGNUM TO 2**31              01630002         BE
            ANSWER IS MOST NEG FIXNUM      ˇ
                                                   01650002         ICM
(#6)          GET BIGNUM LENGTH                    01660002         LA
ECDAT(,#7)    TOTAL LENGTH OF RESULT BIGNUM        0167000ˇ
ZLCBIG          GET ADDRESS OF ZILBIG                01680002         LR
7               DESIRED LENGTH FOR ZILBIG            01690002         #B
#15             CALL ZILBIG                          01700002*
                                                       01710002
,0(,#11)          RESTORE BIGNUM POINTER AFTER GC      01720002
,#15              PREP DESTINATION FOR MVCL            01730002
,#7     ˇ
#4,#6               MOVE BIGNUM                          01750002
##VECDAT(#15),X'80' TOGGLE SIGN OF RESULT                01760002
#4,ZLCVSNXT         BUMˇ
  RETURN                                                   01780002MTWO3
  #15,TWO31M          RETURN MOST NEGATIVE FIXNUM          01790002
  RETURN                              ˇ
ACE                                                          01810002BIG
    #3,=X'7FFFFFFF'                                          01820002
    #4,4                                             +
MR    #2,#7                                        ˇ
  SLDL  #2,1                                                     0185000
  SRL   #3,1                                                     0186000
  LR    #1,#4                                                    0ˇ
    O     #3,=X'80000000'                                          01880
    B     BFCONT                                                   01890
    SPACE                                                          01900
Iˇ
      B     PBIGFIX                                                  019
      SPACE                                                          019
FIXMC XR    #5,#ˇ
        ICM   #5,7,1(#6)          GET LENGTH OF BIGNUM                 0
        L     #15,ZLCBIG          RESULT MUST BE ONE WORD LONGER       0
        LA    #2,##VECDAT+4(,#5ˇ
2         #BASR #14,#15             MAKE NEW BIGNUM SPACE
2         L     #6,0(,#11)          RECOVER BIGNUM ARG IN CASE OF GC
2         L     #2,=X'80000000'     PREP TO MAˇ
002         L     #3,##VECDAT(,#6)    BRING IN THE BIGNUM LS WORD + SIGN
002         NR    #2,#3               EXTRACT SIGN FROM BIGNUM LS WORD
002         LA    #1,4(,#5)           CALCULATE LENGTH OF RESˇ
30002         X     #2,=X'80000000'     COMPLEMENT THE SIGN
40002         STCM  #1,7,1(#15)         STORE NEW BIGNUM LENGTH
50002         N     #3,=X'7FFFFFFF'     MASK OUT THE SIGN IN THE LS WORD
2060002         STM   #2,#3,##VECDAT(#15) STORE LS AND 2ND LS WORDS OF R
2070002         LA    #4,##VECDAT+8(,#15) POINT TO NEXT WORD IN RESULT T
2080002         LA    #6,##VECDAT+4(,#6)  POINT TO NEXT WORD IN ARG TO C
2090002    ˇ
 02100002         LR    #7,#5                OLD BIGNUM TO NEW BIGNUM
 02110002         MVCL  #4,#6               COPY BIGNUM TO ONE WORD MORE
 02120002         ST    #4ˇ
R  02130002         B     RETURN
   02140002         SPACE
   02150002ARG1NFIX CLI   ##TYPE(#6),##SFˇ
     02160002         BE    ARG1SFLO
     02170002         CLI   ##TYPE(#6),##BIGNUM
     02180002         BE    ARG1BIG                     ˇ
       02190002         CLI   ##TYPE(#6),##DFLOAT
       02200002         BE    ARG1DFLO
       02210002         B     ERROR1                                   
         02220002ˇÁ
                       02230002*
                       02240002* ARG 1 IS A BIGNUM - NOW CHECK ARG2
                       02250002*ˇ
                         02260002         CLI   ##TYPE(#7),##FIXNUM
                         02270002         BE    BIGFIX              BIGN
NUM                      02280002         CLI  ˇ
                           02290002         BE    BIGBIG              BI
IGNUM                      02300002         CLI   ##TYPE(#7),##SFLOAT
                           02310002         BE    BIGSFLO     ˇ
 SINGLE FLOAT                02320002         CLI   ##TYPE(#7),##DFLOAT
                             02330002         BE    BIGDFLO
 DOUBLE FLOAT                02340002         B     ERROR2
                               02350002         SPACE 1
                               02360002BIGBIG   DS    0H
                               02370002         SPACE 1
            ˇ
******************************** 02390002* BIGNUM BY BIGNUM MULTIPLY ROU
1-BIT RADIX IS ASSUMED         * 02400002* FOR THE "DIGITS" OF THE BIGNU
DIGIT IS A 31-BIT WORD).   ˇ
 MAGNITUDE.                      * 02420002* THE SIGN IS REPRESENTED BY
MOST BIT OF THE LS WORD.         * 02430002*
                                 * 0244000ˇ
NDICATING LENGTH OF VECTOR, WHICH  * 02450002* STARTS IN THE NEXT WORD.
 WORD VECTOR WOULD BE REPRESENTED  * 02460002* IN 4 WORDS (32 BITS/WORD)
OWS:                               * 02470002*           ˇ
                                     * 02480002*       -----------------
--------------------------------     * 02490002*       ◊ C8 00 00 0C ◊ 7
FF ◊ 72 34 56 78 ◊ 7F FF FF 23 ◊     * 02500002*       --==-========----
----------------------------------     * 02510002*        TYPE LENGTH
RD       NEXT WORD     MS WORD         * 02520002*
                                       * 02530002* HELPFUL DIAGRAM WITH
 LABELLˇ
 LOCATIONS). "===" LINES INDICATE        * 02550002* SIZE WHICH AN INDEX
) REGISTER WILL NEVER GO UNDER.          * 02560002* "---" LINES INDICAT
(OFFSET) VALUES WHICH ˇ
CATES AREAS WHICH ABSOLUTE POINTERS        * 02580002* (BASE REGISTERS)
VERSE IN THE COURSE OF THE COMPUTATION.    * 02590002* REGISTERS WITH ON
" OR NO OTHER PUNCTUATION ON THE SAME+
T INDEX VALUES OR ABSOLUTE POINTERSˇ
N THE COURSE OF THE COMPUTATION.  E.G.,        * 02620002* THE FOLLOWING
 INDICATES THAT REGISTER 11 IS A CONSTANT      * 02630002* BASE POINTER,
R 6 IS A MOVING BASE POINTER, REGISTER         * 0ˇ
REGISTER, REGISTER 14 IS A MOVING INDEX          * 02650002* REGISTER, E
 NOTATION IS NOT LOGICALLY COMPLETE AND IS       * 02660002* INTENDED ON
VISUAL AID IN UNDERSTANDING THE ASSEMBLER        * 02670002* CODEˇ
S.                                                 * 02680002*
                                                   * 02690002*
                                                   * 02700002*
ˇ
6                                                    * 02720002* -------
------                                               * 02730002* ◊    ◊
◊ MS ◊         ˇ
--------                                               * 02750002*
                                                       * 02760002*
                              ˇ
------------14>                                          * 02780002* ===
=============5>                                          * 02790002* 7
                                             ˇ
----------------------                                     * 02810002* ◊
 ◊    ◊    ◊    ◊ MS ◊                 BIGNUM2             * 02820002* -
----------------------                                     *ˇ
                                                             * 02840002*
                                                             * 02850002*
...1=========-------------14>                                * 02860002*
                                                               * 0287000
-----------------------------------------                      * 0288000
◊ LS ◊    ◊    ◊    ◊    ◊    ◊    ◊ ?? ◊  RESULT BIGNUM       * 0289000
----------ˇ
                                                                 * 02910
                                                                 * 02920
                         ˇ
                               ------                              * 029
                               ◊  0 ◊                              * 029
                               ------   ˇ
                                 ------                              * 0
                            X    ◊  3 ◊                              * 0
                                 ------                               *
2ˇÁ
     * 03000002*                          ------ ------
     * 03010002*                          ◊  2 ◊ ◊  3 ◊
     * 03020002*ˇ
       * 03030002*
       * 03040002* PROOF THAT CARRY TO NEXT LOOP IS NEVER GREATER THAN 2
       * 03050002* EACH ITERATIˇ
:        * 03060002*
         * 03070002* ASSUME     B = 2**31 (WORD RADIX)
         * 03080002*            C = MAXIMUM CAˇ
           * 03090002*
           * 03100002* THEN       B - 1  = MAXIMUM POSSIBLE WORD VALUE
           * 03110002*            B - 2  = MAXIMUM POSSIBLE Vˇ
NIFICANT     * 03120002*                     WORD IN A MULTIPLY SINCE (B
=(B-2)B+1    * 03130002*
             * 03140002*  SINCE THE LARGEST POSSIBLE SUM IN EACH ITERATI
THE INNER      * 03150002*  LOOP CAN ONLY OCCUR WHEN EACH COMPONENT OF T
AS ITS         * 03160002*  MAXIMUM POSSIBLE VALUE, WE TRY IT AND SEE WH
ESULT          * 03170002*  WOULD BE.  WE MUST SUM THE CARRY FROM THE PR
OLUMN,     ˇ
LY, THE          * 03190002*  LEAST SIGNIFICANT WORD FROM THE PRESENT MU
AND THE          * 03200002*  WORD REPRESENTING THE SUM (FOR THIS PLACE
FICANCE) OF      * 0321000ˇ
 BIGNUM AND        * 03220002*  BECOMES THE CORRECT ANSWER WHEN ALL ITER
AVE COMPLETED).    * 03230002*  WE THEN HAVE:
                   * 03240002*           ˇ
                     * 03250002*     C + (B - 2) + (B - 1) + (B - 1)
                     * 03260002*
                     * 03270002*  =  C + 3 B - 4        ˇ
                       * 03280002*
                       * 03290002*  =  C + 2 B + (B - 4)
                       * 03300002*                                     ˇ
                         * 03310002*  =  (2)B + (B - 4 + C)
                         * 03320002*
                         * 03330002*  WE CAN SEE THAT THIS WILL BE CONSI
D NOT ˇ
CAUSED AN OVERFLOW IN THIS * 03350002*  CASE.  BUT WE CONCLUDE THAT C =
 MAXIMUM CARRY BECAUSE     * 03360002*  IT APPEARS AS THE COEFFICIENT TO
THE LAST EQUATION.  T+
TERM A POSITIVE VALˇ
ONLY HOLD POSITIVE TWO'S       * 03390002*  COMPLEMENT NUMBERS OF 32 BIT
LTING IN THE UPPER BIT ALWAYS  * 03400002*  BEING ZERO AND EFFECTIVELY B
A 31-BIT RADIX.  31-BIT RADIX  * 0ˇ
PRIMARILY BECAUSE OF HARDWARE    * 03420002*  LIMITATIONS IN THE DIVIDE
IPLY INSTRUCTIONS (THERE IS NO   * 03430002*  UNSIGNED MULTIPLY AND DIVI
E IBM/370.)  ADD LOGICAL IS      * 03440002*  USEˇ
ONVENIENTLY USE THE UPPER BIT      * 03450002*  AS A CARRY POSITION FOR
R ORDER BIT OF THE POSSIBLE TWO-   * 03460002*  BIT CARRY.
                                   * 03470002*                  ˇ
                                     * 03480002*  AN ADDITIONAL REFINEME
ALYZING THE MAXIMUM VALUES THAT      * 03490002*  CAN BE CARRIED IS TO O
HAT IF THE HIGHER ORDER WORD         * 03500002*  OF A MULTIPLY (AFTER 3

ME MULTIPLY MUST BE 1, SINCE THE       * 03520002*  PROBLEM MUST HAVE BE
ULTIPLICATION (B-1) * (B-1).           * 03530002***********************
**************ˇ
      ZERO LEFT BYTE FOR ICM               03550002         XR    #5,#5
      ZERO LEFT BYTE FOR ICM               03560002         ICM   #3,7,1
      GET LENGTH OF FIRST BIGˇ
        GET LENGTH OF SECOND BIGNUM          03580002         L     #15,
        GET ADDRESS OF ZILBIG SERVICE        03590002         LA    #2,#
#3,#5)  PRODUCT MAY BE SUM OF LENGTHS       ˇ
          CALL ZILBIG - GET SPACE FOR RESULT   03610002*
                                               03620002         STM   #8
ISAVE     NEED MORE REGISTERS (NOT #12,#13)    03630002    ˇ
,ZLCISVD    INDICATE THERE ARE REGISTERS SAVED   03640002*
                                                 03650002         LR
            SET UP BASE POINTER IN RESULT        03660002         LM
0(#11)        RESTORE BIGNUM POINTERS MOVED BY GC  03670002         LA
VECDAT-4(#3,#6) POINT TO LAST WORD OF BIGNUM1      03680002         LA
              NEED QUANTITY 4 FOR GENERAL USE      03690002         LA
         ˇ
#4              NEED QUANTITY 4 FOR FOR BXLE         03710002         LA
##VECDAT+4      PREPARE INDEX FOR 2ND LS WORD        03720002         LA
#VECDAT(,#6)    #6 POINTˇ
-----------------------------------------------------* 03740002*    INIT
ON COMPLETE - NOW PROCESS LS WORD OF BOTH BIGNUMS    * 03750002*--------
--------------------------------------- --------------* 03760002ˇÁ
BGO     ICM   #0,15,0(#6)         LOAD LS WORD OF BIGNUM1, CHECK SIGN  0
        BM    BBM1                BIGNUM1 IS NEGATIVE                  0
        ICM   #3,15,##VECDAT(#7)  LOAD LS WORD OF BIGNUM2, CHECK SIGN  0
ˇ
2         MR    #2,#0               MULTIPLY TWO POSITIVE LS WORDS
2         SLDL  #2,1                MAKE UPPER WORD 31-RADIX
2         SRL  ˇ
002         LR    #9,#2               SAVE CARRY WORD
002         ST    #3,##VECDAT(,#15)   STORE IN LS WORD OF RESULT
002*--------------------------ˇ
60002*    FIRST TIME LOOP - NO PREVIOUS ROW TO ADD IN
70002*------------------------------------------------------------------
80002ILOOP1   L     #3,0(#14,#7)        GET Nˇ
3890002         MR    #2,#0               MULTIPLY BY LS WORD OF BIGNUM1
3900002         ALR   #3,#9               INCLUDE CARRY WORD FROM LAST M
3910002         BC    12,NCI1             BRANCH IF NO CARRYˇ
 03920002         AR    #2,#8               ADD 1 IF THERE WAS A CARRY
 03930002NCI1     SLDL  #2,1                IT'S RADIX 31, YOU KNOW
 03940002         SRL   #3,1                MOVE 31 BITS BACK TO THE RIG
   03950002         LR    #9,#2               CARRY HIGHER WORD TO NEXT
N  03960002         ST    #3,0(#14,#1)        STORE RESULT
   03970002         BXLE  #14,#4,ILOOP1       DO NEXT WORD IN BIGNUM2?
   0398000ˇ
LS   03990002*
     04000002         AR    #6,#4               INCREMENT BIGNUM1 INDEX
     04010002         B  ˇ
       04020002*--------------------------------------------------------
-----* 04030002*    SPECIAL INITIALIZATIONS FOR SIGNS BEFORE THE FIRST T
     * 04040002*------------------------ˇ
-------* 04050002BBM1     ICM   #3,15,##VECDAT(#7)  GET LS WORD OF BIGNU
         04060002         BNM   BBM1P2              BIGNUM2 IS POSITIVE
 + TOO)  04070002         N     #0,=X'7FFFFFFF'     MAKˇ
POSITIVE   04080002         N     #3,=X'7FFFFFFF'     MAKE BOTH BIGNUM L
POSITIVE   04090002         MR    #2,#0               MULTIPLY LS WORDS
           04100002         SLDL  #2,1                CONVERT TO 31-BIˇ
             04110002         SRL   #3,1                CONVERT TO 31-BI
             04120002         LR    #9,#2               SAVE CARRY WORD
             04130002         ST    #3,##VECDAT(,#15)   STORE LS WORD IN
VECTO+
GH ˇ
                 04160002BBP1M2   N     #3,=X'7FFFFFFF'     TAKE POSITIV
FOR MULTIPLY     04170002         MR    #2,#0               MULT TWO POS
MBERS            0ˇ
X                  04190002         SRL   #3,1                CONVERT TO
X                  04200002         LR    #9,#2               SAVE CARRY
                   04210002      ˇ
EGATIVE              04220002         ST    #3,##VECDAT(,#15)   STORE IN
 OF RESULT           04230002         B     ILOOP1              GO TO FI
 OF LOOP             04240002*                  ˇ
                       04250002BBM1P2   N     #0,=X'7FFFFFFF'     TAKE P
VALUE FOR MULTIPLY     04260002         MR    #2,#0               MULT T
IVE NUMBERS            04270002         SLDL  #2,1             ˇ
1-RADIX                  04280002         SRL   #3,1                CONV
1-RADIX                  04290002         LR    #9,#2               SAVE
ORD                      04300002         O     #3,=X'80000000'     SET
D TO NEGATIVE              04310002         ST    #3,##VECDAT(,#15)   ST
S WORD OF RESULT           04320002         B     ILOOP1              GO
T PART OF LOOP             04330002*------------------------------------
-------------ˇ
LTIPLY                     * 04350002*----------------------------------
---------------------------* 04360002OLOOP    AR    #1,#4
T BASE FOR RESULT BIGNUM    ˇ
E INDEX FOR 2ND LS WORD        04380002         L     #3,4(,#7)
 WORD OF BIGNUM2               04390002         L     #0,0(,#6)
XT WORD OF BIGNUM1             04400002    ˇ
 POSITIVE VALUE                  04410002         MR    #2,#0
HE MULTIPLICATION                04420002         AL    #3,4(,#1)
FROM PREVIOUS ROW                04430002         BC    12ˇ
 CARRY?                            04440002         AR    #2,#8
S, ADD 1 TO HIGHER WORD            04450002NCO      SLDL  #2,1
-BIT RADIX, YOU KNOW               04460002         SRL   #3,1
RESTORE LEFT 31 BITS                 04470002         LR    #9,#2
CARRY WORD TO NEXT ITERATION         04480002         ST    #3,4(,#1)
STORE RESULT                         04490002*--------------------------
--------ˇ
UM MULTIPLY - OPTIMIZED FOR SPEED    * 04510002*------------------------
-------------------------------------* 04520002ILOOP    L     #3,0(#14,#
  GET NEXT WORD IN BIGN UM2             04530002ˇÁ
,0(#14,#1)        CARRY+LAST ROW, WON'T OVERFLOW!      04540002
BUG2        ***** NOT EXPECTED - DELETE WHEN DEBUGGED  04550002
,#0               MULTIPLY, NO NEGATIVES ENCOUNTERED   04560002 ˇ
#3,#9               ADD TO PRESENT MULT RESULT           04570002
12,NCI              NO CARRY?                            04580002
#2,#8               ADD 1 TO WORD TO BE CARRIED          04590002NCI

  #3,1                RESTORE 31 BITS IN RIGHT WORD        04610002
  #9,#2               SO CARRY WON'T BE BASHED BY MR       04620002
  #3,0(#14,#1)ˇ
LE  #14,#4,ILOOP        NOT AT END OF BIGNUM2 YET?           04640002*
                                                             04650002
    #2,0(#14,#1)        STOREˇ
BXLE  #6,#10,OLOOP        NOT END OF BIGNUM1 YET?              04670002*
-------------------------------------------------------------* 04680002*
D OF INNER AND OUTER LOOPS FOR BIGNUM X BIGNˇ
---------------------------------------------------------------* 0470000
                                                                 0471000
  LTR   #2,#2               IF HIGHEST WORD IS 0           ˇ
    BNZ   BBEXTRA             THEN...                              04730
    AR    #14,#1               REDUCE BY 4 TO CHOP OFF LEADING 0   04740
    ST    #14,ZLCVSNXT        STORE ADDRESS FOR NEXT VSS OBJ       04750
      SR    #14,#15             CALCULATE LENGTH OF BIGNUM           047
      SR    #14,#4              IT'S ONE WORD SHORTER HERE           047
      STCM  #14,7,1(#15)        STORE INTO LENGTH FIELD OF RESULT    047
      B  ˇ
                                                                       0
BEXTRA  AR    #14,#1               MAKE THE BIGNUM PERMANENT           0
        AR    #4,#14    ˇ
2         SR    #14,#15
2         STCM  #14,7,1(#15)        STORE LENGTH OF DATA PORTION
2         ST    #4,ZLCVSNXT            ˇ
002*
002LRETURN  LM    #8,#11,ZLCISAVE     RESTORE THE SAVED REGISTERS
002         NI    ZLCIFLGS,255-ZLCISVD  INDICATE THAT ˇ
80002         B     RETURN
90002         SPACE 1
00002BIGSFLO  DS    0H                  BIGNUM * SINGLE FLOAT        +
4910002         L     #15,ZLCCVBF         Get address of ZILCVBF   ˇ
 04920002         LR    #5,#6               Arg1 is bignum, arg2 is floa
 04930002         #BASR #14,#15             Convert bignum to float
 04940002         LER   #F2,#F0             Get float value for arg1
 0ˇ
   04960002BIGDFLO  DS    0H                  BIGNUM * DOUBLE FLOAT
   04970002         L     #15,ZLCCVBF         Get address of ZILCVBF
   04980002      ˇ
     04990002         #BASR #14,#15             Convert bignum to float
     05000002         LDR   #F2,#F0             Get float value for arg1
     05010002         B     MULDˇ
rg2    05020002         SPACE 1
       05030002FX1NBF2  DS    0H                  ARG 1 IS FIXED BUT ARG
       05040002         SPACE                  ˇ
         05050002*------------------------------------------------------
-------* 05060002*                      CHECK TYPE OF ARG 2
       * 05070002*--------------------------------------------ˇ
---------* 05080002         CLI   ##TYPE(#7),##SFLOAT
           05090002         BE    FIXSFLO             FIXED * SFLOAT = S
           05100002         CLI   ##TYPE(#7),##DFLOAT
             05110002         BE    FIXDFLO             FIXED * DFLOAT =
             05120002         B     ERROR2              FIXED * NONUM =
             05130002FIXSFLO  L     #0,##CDR(,#6)       GET FIXED VALUE
            ˇ
               05150002         LRER  #F2,#F0             GET SINGLE FLO
 1             05160002         B     MULSFLO1
               05170002FIXDˇ
                 05180002         #BAS  #14,FIX2FLO         CONVERT FIXE
AT               05190002         LDR   #F2,#F0             GET DOUBLE F
UE 1             05200002         B     MUˇ
                   05210002         SPACE
                   05220002ARG1SFLO DS    0H                  ARG 1 IS S
OAT                05230002         SPACE                ˇ
                     05240002*------------------------------------------
-------------------* 05250002*                      CHECK TYPE OF ARG 2
                   * 05260002*------------------------------------------
---------------------* 05270002         CLI   ##TYPE(#7),##SFLOAT
                       05280002         BE    SMULSFLO            SFLOAT
T = SFLOAT             05290002         CLI   ##TYPE(#7),##DFLOAT
                        05300002ˇÁ
  SFLOAT * DFLOAT = DFLOAT             05310002         CLI   ##TYPE(#7)
M                                      05320002         BE    SFLOPFIX
  SFLOAT * FIXED = SFLOAT              05330002 ˇ
NUM                                      05340002         BNE   ERROR2
    SFLOAT * NONUM = ERROR               05350002         LE    #F2,##CD
    Get single float value 1             05360002         L    ˇ
      Get address of ZILCVBF               05370002         LR    #5,#7
      Arg1 is float, arg2 is bignum        05380002         #BASR #14,#1
      Convert bignum to float              05390002         LER   #F4,#F
        Get float value for arg2             05400002         B     MULS
        Go to MUL float arg1 to arg2         05410002         SPACE 1
                                             05420002*------------------
-------------ˇ
XNUM TO SINGLE FLOAT                         * 05440002*----------------
---------------------------------------------* 05450002SFLOPFIX LE    #F
,#6)      Get single float vˇ
(,#7)       GET FIXED VALUE 2                    05470002         #BAS
FLO         CONVERT FIXED TO FLOAT               05480002         LRER
            GET FLOAT VALUE 2              ˇ
O2            FLOAT * FIXED = FLOAT                05500002         SPAC
                                                   05510002ARG1DFLO DS
              ARG 1 IS DOUBLE FLOAT                0552000ˇ
                                                     05530002         LD
8(,#6)          GET FLOAT VALUE 1                    05540002*----------
---------------------------------------------------* 05550002*
      CHECK TYPE OF ARG 2                            * 05560002*--------
-----------------------------------------------------* 05570002
TYPE(#7),##DFLOAT                                      05580002
LDFLO1  ˇ
##TYPE(#7),##SFLOAT                                      05600002
DMULSFLO            DFLOAT * SFLOAT = DFLOAT             05610002
##TYPE(#7),##FIXNUM    ˇ
  DFLOPFIX            DFLOAT * FIXED = DFLOAT              05630002
  ##TYPE(#7),##BIGNUM                                      05640002
  ERROR2              DFLOAT * NONUM =ˇ
    #15,ZLCCVBF         Get address of ZILCVBF               05660002
R   #5,#7               Arg1 is float, arg2 is bignum        05670002
ASR #14,#15             Convert bignum to float      +
LDR   #F4,#F0             Get float value for arg2 ˇ
  B     MULDFLO2            Go to MUL float arg1 to arg2         0570000
  SPACE 1                                                        0571000
---------------------------------------------------------------* 0ˇ
                  FIXNUM TO DOUBLE FLOAT                         * 05730
-----------------------------------------------------------------* 05740
FIX L     #0,##CDR(,#7)       GET FIXED VALUE 2                    05750
 ˇ
      LDR   #F4,#F0             GET FLOAT VALUE 2                    057
      B     MULDFLO2            FLOAT * FIXED = FLOAT                057
      SPACE     ˇ
---------------------------------------------------------------------* 0
                       SINGLE FLOAT MULTIPLY                         * 0
-------------------------------ˇ
2SMULSFLO DS    0H
2         LE    #F2,##CDR(,#6)      Get single float value 1
2MULSFLO1 DS    0H                            ˇ
002         LE    #F4,##CDR(,#7)      Get single float value 2
002MULSFLO2 DS    0H
002*                                                         ˇ
80002* Warning: result of single-precision multiply is DOUBLE PRECISION.
90002*
00002         MER   #F2,#F4             MULTIPLY THEM
5910002         LRER  #F2,#F2             ROUND DOUBLE DOWN TO SINGLE
5920002         STE   #F2,ZLCWORK         PUT RESULT IN REG FOR ATOM-MAK
5930002         L     #2,ZLCWORK
5940002    ˇ
 05950002         #MKAT FLOAT               MAKE A FLONUM
 05960002         B     RETURN              AND RETURN WITH IT
 05970002         SPACE 1 ˇ
   05980002*------------------------------------------------------------
-* 05990002*                       DOUBLE FLOAT MULTIPLY
 * 06000002*-----------------------------ˇ
---* 06010002DMULSFLO DS    0H
     06020002         SDR   #F4,#F4
     06030002         LE    #F4,##CDR(,#7)      Get doubˇ
       06040002         B     MULDFLO2
       06050002SMULDFLO DS    0H
       06060002         SDR   #F2,#F2                                  
         06070002ˇÁ
at value 1             06080002MULDFLO1 DS    0H
                       06090002         LD    #F4,8(,#7)          Get do
at value 2             06100002Mˇ
                         06110002         MDR   #F2,#F4             MULT
M                        06120002         LDR   #F0,#F2
                         06130002         L    ˇ
s of ZILMDF                06140002         #BASR #14,#15             Ca
F to make a double-float   06150002         B     RETURN              AN
 WITH IT                   06160002         EJECT             ˇ
                             06170002         COPY  FIX2FLO
 FLOAT CONVERSION SUBROUTINE 06180002         EJECT
                             06190002         PUSH  PRINT
                               06200002         PRINT DATA
                               06210002         SPACE 1
                               06220002         DS    0A
FIXNUM TO FUˇ
2147483648'  MOST NEG FIXNUM     06240002         SPACE 1
                                 06250002         DS    0A
N BIGNUM TO FULLWORD       ˇ
'0,1'    2**31 SMALLEST BIGNUM     06270002         SPACE 1
                                   06280002         DS    0A
IGN BIGNUM TO FULLWORD             0629000ˇ
),F'0,0,1' 2**62 BIGNUM              06300002         SPACE 1
                                     06310002         DS    0A
ALIGN BIGNUM TO FULLWORD             06320002BIG8M    DC ˇ
8),X'80000000'                         06330002BIG8     EQU   BIG8M,4
                                       06340002         SPACE 1
                                       06350002         POP   PRINT
                                         06360002         SPACE 1
                                         06370002ERROR1   #ERR  'Argumen
ultiply not a number - ',0(#11)          06380002ERROR2   #ERR  'Argumen
ultiplyˇ
in ZILMUL BLFOOP routine multiplying ',   X06400002               0(#11)
,4(#11)                                    06410002BUG2     DS    0H
      BUG             ˇ
AVE     RESTORE THE SAVED REGISTERS          06430002         NI    ZLCI
-ZLCISVD  INDICATE THAT REGISTERS RESTORED   06440002         #ERR  'Int
g in ZILMUL',                        +
          carriage return          ˇ
w on add logical when adding previous sum to carX06470002
 multiplying ',                                 X06480002
 and ',4(#11)                                    09 6490002         SPAC
                                                   06500002         LTOR
                                                   06510002         END
                                                   06520002{
∆
0010000*****************************************************************
0011004*
0012004*ˇ
 00013004*                     All rights reserved.
 00014004*
 00015004**************ˇ
** 00016004*
 * 00017004* ZILOPEN TAKES TWO ARGUMENTS - (1) DATA SET NAME, (2) TYPE.
 * 00018004*                          ˇ
   * 00019004***********************************************************
**** 00020004         SPACE
     00030004ZILOPEN  #ZBEG MINARGS=1,MAXARGS=2,NAME=ˇ
       00040004         #ZPDS 2*4+12              DEFINE STACK SIZE
       00050004         #ZSAV ARGS=2              SAVE REGISTERS
       00060004         SPACE 1                                     ˇ
         00070004         NI    FLAGS,255-PROBEFLG-APPFLAG INITIALIZE FL
         00080004         LM    #1,#2,0(#11)        LOAD ARGUMENTS
         00090004*                           Assume arg 2 is fixnum and
de ˇ
           00110004         BO    SETPROBE            PROBE mode, don't
st probe   00120004         TM    ##CDR+##MODEB3(#2),##APPEND
           0013000ˇ
pend         00140004         TM    ##CDR+##MODEB3(#2),##OUTPUT
             00150004         BO    SETOUT              OUTPUT mode, ope
tput         00160004******** B  ˇ
               00170004SETIN    DS    0H                  INDICATE INPUT
               00180004         MVI   DDCHAR,C'I'         SET FILE NAME
...            00190004         MVI   STATUS99,Xˇ
R                00200004         MVI   DISP99,X'08'        SET SVC 99 D
EP               00210004         B     MODESET
                 00220004SETOUT   DS    0H                  INDˇ
DE                 00230004         MVI   DDCHAR,C'O'         SET FILE N
ILO....            00240004         MVI   STATUS99,X'01'      SET SVC 99
OLD                00250004         MVI   DISP99,X'08'        SET SVC 99
= KEEP               00260004         B     MODESET
                     00270004SETAPP   DS    0H                  INDICATE
MODE                 00280004         OI    FLAGS,APPFLAG       SET APPE
             +
TO ZILO....ˇ
ISP = MOD                00310004         MVI   DISP99,X'02'        SET
ISP = CATLG              00320004         B     MODESET
                         0ˇ
UTPUT MODE                 00340004         OI    FLAGS,PROBEFLG      SE
E NAME, JUST PROBE         00350004         MVI   DDCHAR,C'I'         TR
F INPUT FILE               00360004      ˇ
99 DISP = SHR                00370004         MVI   DISP99,X'08'
99 DISP = KEEP               00380004******** B     MODESET
                             00390004         SPACE 1   ˇ
                               00400004MODESET  DS    0H
                               00410004         NI    FLAGS,255-ALFLAG
LIZE ALLOCATION FLAG           00420004*                               ˇ
                                 00430004* SET THE FILE NAME WE WILL BE
R THIS OPEN.                     00440004*
                                 00450004         LH    #3,ZLCFILNO
CURRENˇ
D 1                                00470004         STH   #3,ZLCFILNO
DATE FILE NUMBER                   00480004         CVD   #3,ZLCDBL
NVERT TO DECIMAL     ˇ
                                     00500004         OI    FILENAME+3,X
MAKE IT PRINTABLE                    00510004*
                                    ˇ
ADY CONTAINS ATOM TO BE DUMPED.        00530004*
                                       00540004         CLI   ##TYPE(#1)
G IF ARG1 IS ALREADY A STRING          00550004    ˇ
    THEN JUST USE IT.  ELSE...           00560004         CLI   ##TYPE(#
BOL IF ARG1 IS A SYMBOL                  00570004         BNE   BADARG1
    THEN...                              00580004         L     #1ˇ
)      GET THE PRINT NAME                  00590004GOODARG1 DS    0H
      (ELSE ERROR - BAD DSNAME ARG)        00600004         XR    #6,#6
                                           00610004         ICM   #6,7,1
 ˇ
,#1)    POINT TO TEXT OF DSNAME              00630004*
                                             00640004* PARSE DSNAME AND
N SVC99 FIELDS. ˇ
E.                                             00660004*
                                               00670004         NI    FL
MEMFLAG-FREEFLAG  INITIALIZE FL AGS             00680004ˇÁ
LA    #15,TUPLALLC        SET TEXT UNIT PTRS FOR ALLOCATION    00690004
ST    #15,S99TXTPP        STORE ADDR OF TEXT UNIT POINTERS     00700004
MVI   S99VERB,S99VRBAL    INDICATE ALLOCATION                  00710004
  MVI   DALMEMBR+1,X'00'    INITIALLY DON'T ALLOCATE MEMBER      0072000
  MVI   DALTRK+1,X'00'       AND                                 0073000
  MVI   DALPRIME+1,X'00'      NO                                 0074000
  MVI  ˇ
    MVI   DALDIR+1,X'00'          SPECIFICATIONS                   00760
    XC    MEMLEN99,MEMLEN99   SET MEMBER LENGTH TO ZERO            00770
    MVI   MEMBER99,C' ˇ
      MVC   MEMBER99+1(7),MEMBER99                                   007
      XC    DSLEN99,DSLEN99     SET DSNAME LENGTH TO ZERO            008
      MVI   DSNAME99,C' '       SET Dˇ
        MVC   DSNAME99+1(43),DSNAME99                                  0
        XC    DSNSLEN,DSNSLEN     CLEAR FAKE STRING LENGTHS            0
        XC    MEMSLEN,MEMSLEN     CLEAR FAKE STRING ˇ
4         LA    #7,DSNAME           POINT TO WHERE TO MOVE DSNAME
4         LA    #4,0(#1,#6)         POINT TO END OF DUMPED NAME
4         BCTR  #4,0                POINT TO LAST CHARACTER IN NAMEˇ
004         CLI   0(#1),C''''         SEE IF NAME IS QUOTED
004         BNE   NOQUOTE             IF IT STARTS WITH A QUOTE, THEN...
004         LA    #5,1(,#1)           POINT TO START OF TRUE DSNAME
00ˇ
10004         CLI   0(#4),C''''         IF IT DOES NOT END WITH A QUOTE
20004         BNE   AFTQUOTE            AND IF THE LAST CHARACTER =  QUO
30004         BCTˇ
0940004         B     AFTQUOTE            (THAT'S HOW LAST QUOTE IS OPTI
0950004NOQUOTE  DS    0H                  ELSE IF DSNAME HAS NO QUOTES
0960004         LR    #5,#1     ˇ
 00970004         L     #15,540             GET TCB ADDRESS
 00980004         L     #15,X'B4'(,#15)     JSCB ADDRESS
 00990004         L     #15,X'15C'(,#15)    CURˇ
   01000004         L     #15,X'108'(,#15)    PSCB ADDRESS
   01010004         LTR   #15,#15             IF NO PSCB
   01020004         BZ    AFTQUOTE            THEN NO TSO ENV,ˇ
X    01030004         USING PSCB,#15
     01040004         L     #15,PSCBUPT         UPT ADDRESS
     01050004         DROP  #15
       01060004         USING UPT,#15
         01070004         XR    #14,#14             CLEAR INSERT REG
         01080004         ICM   #14,1,UPTPREFL      GET LENGTH OF TSO PR
         01090004         BZ    AFTQUOTE            IF NONZERO, THEN...
         0ˇ
           01110004         EX    #14,MVCPREF          MOVE PREFIX TO SV
ME AREA    01120004         DROP  #15
           01130004      ˇ
REST OF NAME 01140004         MVI   0(#7),C'.'           MOVE IN A PERIO
             01150004         LA    #7,1(,#7)            POINT TO WHERE
DSNAME       01160004AFTQUOTE DS    0H  ˇ
               01170004*
               01180004* NOW #5 --> DSNAME WITHOUT QUOTES
               01190004*     #6 IS ITS LENGTH          ˇ
NCLUDED)         01200004*     #7 IS WHERE TO MOVE THE NAME (IN "DSNAME"
                 01210004*
                 01220004         LTR   #6,#6               IF LENGTH ˇ
E IS ZERO          01230004         BNP   BADARG1             THEN SYNTA
                   01240004         CH    #6,=H'56'           IF TOO LON
                   01250004         BH    BADARG1             THEN SYNTA
     ˇ
EXECUTE              01270004         EX    #6,MVCNAME          MOVE IT,
NAME & ALL           01280004         EX    #6,TRNAME           TRANSLAT
ER CASE             ˇ
CHARACTER OF DSNAME    01300004         CLI   0(#4),C')'          IF DSN
 IN RIGHT PARENTHESIS  01310004         BE    EXTRACTM            THEN E
EMBER NAME             01320004    ˇ
O TRUE END               01330004         NI    FLAGS,255-MEMFLAG   SHOW
ER REQUESTED             01340004         B     SETDSN
                         01350004         SPACE 1 ˇ
                           01360004EXTRACTM DS    0H                  GE
: #7 -> START OF DSNAME    01370004         LA    #2,0(,#4)           PO
 TERMINATING MEMBER NAME   01380004MEMLOOP  CR    #4,#7          ˇ
FOUND, OR 1ST CHAR IS (,     01390004         BNH   BADARG1
TAX ERROR IN DSNAME          01400004         CLI   0(#4),C'('
OR LEFT PARENTHESIS          01410004         BE    GOTMEM
ˇ
                               01430004GOTMEM   DS    0H
MBER NAME, #4 --> (            01440004         LA    #6,1(,#4)
TO MEMBER NAME  ITSELF          01450004ˇÁ
          GET LENGTH OF MEMBER NAME            01460004         BNP   BA
          IF ZERO, SYNTAX ERROR                01470004         CH    #2
          IF TOO LONG, SYNTAX ERROR            01480004 ˇ
                                                 01490004         STH
N99         ELSE SET MEMBER NAME LENGTH          01500004         STCM
1',MEMSLEN  STORE MEMBER LENGTH FOR FAKE STRING  01510004         BCTR ˇ
              ELSE REDUCE FOR EXECUTE              01520004         EX
MEM           MOVE MEMBER NAME TO S99 AREA         01530004         MVC
T(8),MEMBER99 MOVE MEMBER NAME TO FAKE STRING      01540004         OI
MEMFLAˇ
AR,C'O'         IF THIS IS AN OUTPUT REQUEST         01560004         BN
MAL             THEN...                              01570004         TM
S,APPFLAG        IF Tˇ
DAPP               THEN WE CAN'T HONOR IT              01590004
LMEMBR+1,X'03'     SET UP TO ALLOCATE THE MEMBER       01600004NOMEMAL
                  ELSE ALLOCATE WITHˇ
1                                                        01620004SETDSN
0H                                                       01630004
#0,DSNAME                                          ˇ
  #4,#0               #4 = LENGTH OF ACTUAL DSNAME         01650004
  BADARG1                                                  01660004
  #4,=H'44'                                                0167000ˇ
    BADARG1                                                  01680004
CM  #4,B'0111',DSNSLEN  STORE DSNAME LENGTH FOR FAKE STRING  01690004
TR  #4,0                REDUCE FOR EXECUTE                   01700004
 ˇ
LA    #4,1(,#4)           MAKE IT THE ACTUAL LENGTH            01720004
STH   #4,DSLEN99          SET DSNAME LENGTH                    01730004
EJECT           ˇ
                                                                 0175000
RM DYNAMIC ALLOCATION.                                           0176000
                               ˇ
    DS    0H                                                       01780
    SPACE 1                                                        01790
    LA    #1,S99RBP           POINT TO SVC 99 ˇ
      DYNALLOC ,                DYNAMICALLY ALLOCATE THE DATASET     018
      SPACE 1                                                        018
      LTR   #15,#15             IF ALLOCATION FAILED,        +
        BZ    CHKDSORG            THEN                     ˇ
4*
4* ALLOCATION FAILURE...
4*  IF OUTPUT REQUEST AND NOT-CATALOGED, TRY AS NEW DATASET.
004*   IF FILE IN USE, FREE FILE AND RETRY REQUEST.
004*   OTHERWISE REPORT ERROR.
004*
004      ˇ
10004         MVC   DERROR,S99ERROR      STORE SVC 99 ERROR CODE
20004         MVC   DINFO,S99INFO        STORE SVC 99 INFO CODE
30004         CLC   DRETˇ
1940004         BE    DFNOTCAT              THEN HANDLE IT
1950004         CLC   DRETCODE(8),ERBADDSN  IF ERROR = SYNTAX ERROR IN D
1960004         BE    DFBADDSN         ˇ
 01970004         CLC   DRETCODE(8),ERBADMEM  IF ERROR = SYNTAX ERROR IN
 01980004         BE    DFBADMEM              THEN HANDLE IT
 01990004         CLC   DRETCODE(6),ERFINUSE  IF ERRORˇ
   02000004         BE    DFFINUSE              THEN HANDLE IT
   02010004         B     TRUERROR             ELSE TRUE ERROR - CALL DA
   02020004         SPACE 1                                          ˇ
     02030004DFNOTCAT DS    0H                  DATA SET NOT CATALOGED
     02040004         TM    FLAGS,PROBEFLG      IF PROBE ONLY
     02050004         BO    RETNIL              THEN RETURN NIL FROM THI
ON  ˇ
       02070004         BNE   TRUERROR            THEN IT'S A TRUE ERROR
       02080004         MVI   STATUS99,X'04'      ELSE RESET STATUS AND
ION    02090004    ˇ
         02100004         MVI   DALTRK+1,X'07'        AND
         02110004         MVI   DALPRIME+1,X'0A'       DEFINE
         02120004         MVI   DAˇ
           02130004         MVI   DALDIR+1,X'00'           SPECIFICATION
           02140004         TM    FLAGS,MEMFLAG       IF A MEMBER NAME W
FIED       02150004         BZ    TRYIT          ˇ
             02160004         MVI   DALDIR+1,X'0C'       SET NUMBER OF D
 BLOCKS      02170004         B     TRYIT               AND TRY DYNAMIC
ON AGAIN     02180004         SPACE 1                           ˇ
               02190004DFFINUSE DS    0H                  FILE NAME ALRE
SE             02200004*
               02210004* RESET THE FILE NAME WE WILL BE USING FOR THIS O
                 02220004ˇÁ
                               02230004         LH    #1,ZLCFILNO
RRENT FILE NUMBER              02240004         LA    #1,1(,#1)
                               02250004 ˇ
TE FILE NUMBER                   02260004         CVD   #1,ZLCDBL
ERT TO DECIMAL                   02270004         UNPK  FILENAME(4),ZLCD
                                 02280004         OI   ˇ
KE IT PRINTABLE                    02290004         B     TRYIT
D TRY THE NEXT FILE NUMBER         02300004         EJECT
                                   02310004TRUERROR DS    0H          ˇ
                                     02320004         LA    #1,DFPARMS
 POINT TO DAIRFAIL PARAMETER LIST    02330004         LINK  EP=IKJEFF18
 CALL DAIRFAIL                       02340004         LTR   #0,#15
 CHECˇ
   IF OK, SHOW MESSAGE                 02360004DFOK     DS    0H
                                       02370004         L     #15,X'224'
  ASCB ADDRESS      ˇ
)   TSB ADDRESS                          02390004         BZ    NOTTSO
    IF NO TSB, NOT UNDER TSO             02400004* ON TSO, SEND MESSAGE
NAL REGARDLESS OF OUTPUT DEST.     ˇ
                                           02420004         LH    #2,DFB
                                           02430004         SH    #2,=H'
                                           0244000ˇ
                                             02450004         #TPUT *,(1
         USE TPUT TO DISPLAY 1ST MESSAGE     02460004         OC    DFBU
BUF2     IF THERE IS A SECOND MESSAGE        02470004         BZ ˇ
           THEN                                02480004         LA    #1
4                                              02490004         LH    #2
0                                              02500004         SH    #2
ˇ
                                                 02520004         #TPUT
)            USE TPUT TO DISPLAY 2ND MESSAGE     02530004         B
               ˇ
                                                   02550004NOTTSO   DS
              ELSE...                              02560004*
                              ˇ
RITE-TO-PROGRAMMER MESSAGE.                          02580004*
                                                     02590004         WT
E,DFBUF1),ROUTCDE=11 SHOW MESSAGE 1          +
BUF2(2),DFBUF2     IF THERE IS A SECOND MESˇ
ERROR12              THEN                                02620004
MF=(E,DFBUF2),ROUTCDE=11 SHOW IT                         02630004
ERROR12              THEN                                0ˇ
T                                                          02650004CHKDS
  0H                  ALLOC OK, NOW CHECK DSORG            02660004
  FLAGS,FREEFLAG      IF THIS WAS A FREE REQUEST           02670004
    SETALLCD            THEN                                 02680004
    FLAGS,255-ALFLAG     INDICATE DATASET UNALLOCATED        02690004
    AFTALLCD            ELSE                                 02700004SET
    FLAGˇ
DS    0H                                                       02720004*
                                                               02730004*
G = PS THEN IF MEMBER Wˇ
ORG - PO THEN IF MEMBER WAS OMITTED, ERROR                       0275000
 FOR INPUT FILE, CHECK THAT MEMBER REALLY EXISTS                 0276000
                                      ˇ
    TM    FLAGS,FREEFLAG      IF THIS WAS AN UNALLOCATION          02780
    BO    FREEDONE            THEN PROCEED.                        02790
    TM    DSORG99,X'40'       IF DSORG = PS (SEQUENTIˇ
      BO    DSORGPS             THEN HANDLE IT                       028
      TM    DSORG99,X'02'       IF DSORG = PO (PARTITIONED)          028
      BO    DSORGPO             THEN HANDLE IT                      ˇ
        CLI   DDCHAR,C'I'         IF THIS IS AN INPUT REQUEST          0
        BE    ERROR20             THEN ERROR - INVALID DSORG           0
        OC    DSORG99,DSORG99     IF THIS IS AN OUTPUT REQUEST         0
   ˇ
4DSORGPS  DS    0H                  ELSE ASSUME PS (AT LEAST NOT PO)
4         TM    FLAGS,MEMFLAG       IF A MEMBER NAME WAS SPECIFIED
4         BO    ERˇ
004         B     OK                  ELSE FINISHED CHECKING DSORG
004         SPACE 1
004DSORGPO  DS    0H             ˇ
30004         CLI   DDCHAR,C'O'         IF THIS IS AN OUTPUT REQUEST
40004         BE    POOUT               THEN HANDLE IT
50004         CLI   DALMEMBR+1,X'00'    IF WE ALˇ
2960004         BNE   OK                  THEN WE'VE CHECKED ALREADY - O
2970004         TM    FLAGS,MEMFLAG       IF A MEMBER NAME WAS NOT SPECI
2980004         BZ    ERROR17             THEN ERROR - MEMBER R EQUIRED
 02990004ˇÁ
OUR DCB        03000004         OPEN  PODCB               OPEN IT
               03010004         TM    PODCB+X'30',X'10'   IF OPEN FAILED
               03020004 ˇ
                 03030004         MVC   BLDLMEM,MEMBER99    SET UP BLDL
CHECK MEMBER     03040004         BLDL  PODCB,BLDLLIST      SEE IF MEMBE
XISTS            03050004         LR   ˇ
                   03060004         CLOSE PODCB               CLOSE DATA
                   03070004         LTR   #2,#2               IF BLDL FA
                   03080004         BNZ   ERROR18     ˇ
ER NOT FOUND         03090004         LA    #1,TUPLUNAL         SET TEXT
INTERS FOR           03100004         ST    #1,S99TXTPP          UNALLOC
                     03110004         MVI   S99VERB,S99VRBUN    INDICˇ
OCATION                03120004         MVC   UNDDNAME,DDNAME     MOVE D
 TEXT UNIT FIELDS      03130004         OI    FLAGS,FREEFLAG      INDICA
 DOING AN UNALLOCATION 03140004         B     TRYIT               GO TO
REE ˇ
                         03160004POOUT    DS    0H                  PDS
D FOR OUTPUT             03170004         SPACE 1
                   ˇ
R NAME WAS NOT SPECIFIED   03190004         BZ    ERROR17             TH
 - MEMBER REQUIRED         03200004         B     OK                  EL
ED                         0321000ˇ
                             03220004FREEDONE DS    0H
 FREE, NOW REALLOC W/MEMBER  03230004         SPACE 1
                             03240004         TM ˇ
S WAS A PROBE                  03250004         BO    OPENED
ROCEED.                        03260004         NI    FLAGS,255-FREEFLAG
TE ALLOCATION THIS TIME        03270004         LA    #1,TUPLALLˇ
TEXT UNIT POINTERS FOR           03280004         ST    #1,S99TXTPP
OCATION                          03290004         MVI   S99VERB,S99VRBAL
CATE ALLOCATION                  03300004         MVI   DALMEMBR+1,X'03'

D RE-ALLOCATE THE DATA SET         03320004         EJECT
                                   03330004OK       DS    0H
              ˇ
IF THIS WAS A PROBE                  03350004         BO    OPENED
THEN PROCEED.                        03360004*
                             +
ME                         ˇ
                                         03390004         LA    #0,4
    SET LENGTH OF 4-CHARACTER FILENAME   03400004         LA    #1,FILEN
    POINT TO ZIL FILE NAME FOR ATOM      0ˇ
      INTERN IT                            03420004         LR    #3,#10
      KEEP IT A SYMBOL                     03430004         LA    #4,20(
      SET CURRENT STACK POINTER FOR CONS   03440004      ˇ
        CALL ZILABLD TO MAKE AN ATOM FROM IT 03450004         #BASR #14,
        (RETURNS ATOM IN #15)                03460004         ST    #15,
        STORE INTO STACK FOR #_FIL MACRO     03470004*
                                               03480004* ALLOCATE THE RE
DATA SET TO THE FILE                           03490004*
                                               03500004         CLI   DD
'      ˇ
                                                 03520004         #IFIL
            CALL ZILFGET TO OPEN INPUT FILE      03530004         B
                      ˇ
                                                   03550004         #OFI
              CALL ZILFGET TO OPEN OUTPUT FILE     03560004         SPAC
                                     ˇ
                FILE IS NOW OPEN                     03580004*
                                                     03590004* RETURN WI
ATOM IN REG 15                                      ˇ
                                                       03610004* IF PROB
WILL STILL CONTAIN THE INPUT ARG 1.                    03620004*
                                                       03630004    ˇ
FLAGS,PROBEFLG+ALFLAG IF PROBE AND DATASET ALLOCATED     03640004
RETTNA              THEN                                 03650004
#14,PFREE            FREE THE PROBED DATASET             03660004RETTNA
0Hˇ
  #15,0(,#11)         PICK UP FILE ATOM WE STORED          03680004
  RETURN                                                   03690004
E 1              ˇ
    0H                  HERE IF PROBE AND FILE NOT FOUND     03710004
ACE 1                                                        03720004
    FLAGS,ALFLAG        IF DATASˇ
BZ    RETNILNA            THEN                                 03740004
#BAS  #14,PFREE            FREE THE PROBED DATASET             03750004R
DS    0H                                                        0376000
∆
3770004******** B     RETURN
3780004         SPACE 1
3790004Rˇ
 03800004         SPACE 1
 03810004         #ZRET ,                   RESTORE REGISTERS AND RETURN
 03820004         EJECTˇ
   03830004BADARG1  DS    0H                  ELSE...
   03840004         SPACE 1
   03850004         TM    FLAGS,PROBEFˇ
     03860004         BO    RETNIL              THEN TREAT AS FILE NOT F
     03870004         SPACE 1
     03880004         #ERR  'ZIL0010 OPEN: Invalid daˇ
      X03890004               PREFIX=NO
       03900004         SPACE 1
       03910004BADAPP   DS    0H                  ELSE...           ˇ
         03920004         SPACE 1
         03930004         #ERR  'ZIL0015 OPEN: Cannot process partitione
et ',   x03940004               0(#11),' in APPEND mode.',PREFIX=NO
   ˇ
           03960004BADDSN   DS    0H                  DSNAME SYNTAX ERRO
           03970004         SPACE 1
           0398000ˇ
             03990004         BO    RETNIL              THEN TREAT AS FI
OUND         04000004         SPACE 1
             04010004         #ERˇ
me ',DSNSTR,  X04020004               PREFIX=NO
               04030004         SPACE 1
               04040004BADMEM   DS    0H        ˇ
RROR             04050004         SPACE 1
                 04060004         TM    FLAGS,PROBEFLG      IF PROBE
                 04070004         BO    RETNIL              THEˇ
 NOT FOUND         04080004         SPACE 1
                   04090004         #ERR  'ZIL0013 OPEN: Syntax error in
name ',           X04100004               DSNSTR,'(',MEMSTR,')',PREFIX=N
                     04110004         SPACE 1
                     04120004DFBADDSN EQU   BADDSN              SYNTAX E
DATA SET NAME        04130004         SPACE 1
             +
N MEMBER NAˇ
                         04160004ERROR14  DS    0H                  REPO
BLE DISASTER             04170004         SPACE 1
                         0ˇ
 error - unable to displayX04190004                allocation failure me
SIGNAL=NO,PREFIX=NO        04200004******** B     ERROR12
                           04210004      ˇ
                             04220004ERROR12  DS    0H
ON FAILED                    04230004         SPACE 1
                             04240004         #ERR  'ZILˇ
failed for ',DSNSTR,          X04250004               PREFIX=NO
                               04260004         SPACE 1
                               04270004ERROR16  DS    0H               ˇ
R INSIDE OS STUFF                04280004         SPACE 1
                                 04290004         #BAS  #14,PFREE
 DATASET IF ALLOCATED            04300004         SPACE 1
      ˇ
 PROBE                             04320004         BO    RETNIL
EN TREAT AS FILE NOT FOUND         04330004         SPACE 1
                     ˇ
r ',MEMSTR,                         X04350004               ' specified
 set ',                             X04360004               DSNSTR,' not
oned.',PREFIX=NO                    ˇ
                                       04380004ERROR17  DS    0H
  ERROR INSIDE OS STUFF                04390004         SPACE 1
                                       04400004    ˇ
    FREE DATASET IF ALLOCATED            04410004         SPACE 1
                                         04420004         #ERR  'ZIL0017
 member name must be specified for data X04430004               seˇ
REFIX=NO                                   04440004         SPACE 1
                                           04450004ERROR18  DS    0H
      ERROR INSIDE OS STUFF                04460004         SPACE 1
 ˇ
LG      IF PROBE                             04480004         BO    RETN
        THEN TREAT AS FILE NOT FOUND         04490004         SPACE 1
                ˇ
          FREE DATASET IF ALLOCATED            04510004         SPACE 1
                                               04520004         #ERR  'Z
PEN: Member ',MEMSTR,                          X04530004ˇÁ
      ' not found in data set ',DSNSTR,PREFIX=NO               04540004
SPACE 1                                                        04550004E
DS    0H                  ERROR INSIDE OS STUFF                04560004
  SPACE 1                                                        0457000
  #BAS  #14,PFREE           FREE DATASET IF ALLOCATED            0458000
  SPACE 1                                                        0459000
  #ERR ˇ
          r ',MEMSTR,PREFIX=NO                                     04610
    SPACE 1                                                        04620
20  DS    0H          ˇ
      SPACE 1                                                        046
      #BAS  #14,PFREE           FREE DATASET IF ALLOCATED            046
      SPACE 1                        ˇ
        #ERR  'ZIL0020 OPEN: Data set ',DSNSTR,' not sequential or parX0
              titioned, or is empty.',PREFIX=NO                        0
        EJECT                                       ˇ
4PFREE    DS    0H                   FREE PROBED DATASET
4         SPACE 1
4         LA    #1,TUPLUNAL          SET TEXT UNIT POINTERS FOR    ˇ
004         ST    #1,S99TXTPP           UNALLOCATION
004         MVI   S99VERB,S99VRBUN     INDICATE UNALLOCATION
004         MVC   UNDDNAME,DDNAME      MOVE DDNAME TO TEXT UNIT FIELDS
00ˇ
60004         DYNALLOC ,                DYNAMICALLY UNALLOCATE THE DATAS
70004*                                  (IGNORE FREE ERRORS FOR NOW)
80004         BR ˇ
4790004         EJECT
4800004*
4810004* EXECUTED INSTRUCTIONS  ˇ
 04820004*
 04830004MVCNAME  MVC   0(*-*,#7),0(#5)     MOVE ATOM TO DSNAME AREA
 04840004TRNAME   TR    0(*-*,#7),TRTBL     FOLˇ
   04850004         USING UPT,#15
   04860004MVCPREF  MVC   0(*-*,#7),UPTPREFX  MOVE TSO PREFIX TO DSNAME
   04870004         DROP  #15                                 ˇ
     04880004MVCDSN   MVC   DSNAME99(*-*),DSNAME MOVE DSNAME TO SVC 99 A
     04890004MVCMEM   MVC   MEMBER99(*-*),0(#6)  MOVE MEMBER TO SVC 99 A
     04900004         EJECT
       04910004*
         04920004* CONSTANTS FOR COMPARING DYNAMIC ALLOCATION ERRORS.
         04930004*
         04940004ERNOTCAT DC    FL4'04',X'1708'         DATA SET NOT CAT
         0ˇ
ET NAME    04960004ERBADMEM DC    FL4'12',X'035C',X'0003' SYNTAX ERROR I
 NAME      04970004ERFINUSE DC    FL4'04',X'0410'         FILE NAME IN U
           04980004      ˇ
             04990004*
             05000004* CHARACTER WORK AREAS
             05010004*                  ˇ
               05020004         DS    0H,XL1              Align to non-h
boundary       05030004DSNSTR   DC    YL1(##STRING)       String header
               05040004DSNSLEN  DC    AL3(0)           ˇ
                 05050004DSNAME   DC    CL64' '             String text
                 05060004         DS    0H,XL1              Align to non
d boundary       05070004MEMSTR   DC    YL1(##STRING)       String heaˇ
                   05080004MEMSLEN  DC    AL3(0)              String len
                   05090004MEMSTXT  DC    CL8' '              String tex
                   05100004         EJECT
     ˇ
******************** 05120004* DYNAMIC ALLOCATION CONTROL BLOCKS
                   * 05130004*******************************************
********************ˇ
                       05150004*****************************************
********************** 05160004* *** COPIED FROM 'SYS1.MACLIB(IEFZB4D0)'
******************** * 05170004****ˇ
************************ 05180004         SPACE 1
                         05190004***************************************
************************ 05200004*                ˇ
                           05210004*************************************
************************** 05220004         SPACE 1
                           05230004S99RBP   DS    0D             ˇ
                             05240004S99RBPTR DC    A(S99RB+X'80000000')
EST BLOCK POINTER            05250004S99RB    DS    0D
EST BLOCK                    05260004S99RBLN  DC    YL1(20)
ˇ
RB CODE = ALLOCATION           05280004*              YL1(S99VRBUN)
RB CODE = ALLOCATION           05290004S99VRBAL EQU   X'01'
LLOCATION                       05300004ˇÁ
               UNALLOCATION                    05310004S99FLAG1 DS    0C
              FLAGS                            05320004S99FLG11 DC    XL
              FIRST FLAGS BYTE                 05330004Sˇ
                SECOND BYTE OF FLAGS             05340004S99RSC   DS
                REASON CODE FIELDS               05350004S99ERROR DC
'               ERROR REASON CODE                05360004S99INFO  DC   ˇ
00'               INFORMATION REASON CODE          05370004S99TXTPP DC
ALLC)             ->LIST OF ALLOC TEXT UNIT PTRS   05380004*
UNAL)             ->LIST OF UNALC TEXT UNIT PTRS   05390004*
ALLP) ˇ
                    RESERVED                         05410004S99FLAG2 DS
                    FLAGS FOR AUTHORIZED FUNCTIONS   05420004S99FLG21 DC
00'                 Fˇ
1'00'                 SECOND BYTE OF FLAGS             05440004S99FLG23
1'00'                 THIRD BYTE OF FLAGS              05450004S99FLG24
1'00'                 FOURTH BYTE OFˇ
 *                      END MARKER                       05470004
1                                                        05480004*******
***************************************************ˇ
 UNIT POINTER LIST FOR ALLOCATION FUNCTIONS                05500004*****
********************************************************** 05510004
E 1                                                        0552000ˇ
    0F                      TEXT UNIT POINTER LIST FOR OPEN  05530004
    A(DALDDNAM)             DDNAME                           05540004
    A(DALDSNAM)             DSNAME                           05550004
 ˇ
DC    A(DALSTATS)             STATUS                           05570004
DC    A(DALNDISP)             NORMAL DISPOSITION               05580004
DC    A(DALTRK) ˇ
  DC    A(DALPRIME)             PRIMARY SPACE QUANTITY           0560000
  DC    A(DALSECND)             SECONDARY SPACE QUANTITY         0561000
  DC    A(DALDIR)              ˇ
    DC    A(DALRTORG+X'80000000') RETURN DSORG                     05630
    SPACE 1                                                        05640
**********************************************ˇ
VC 99 TEXT UNIT POINTER LIST FOR UNALLOCATION FUNCTIONS              056
******************************************************************** 056
      SPACE 1                                                +
UPLUNAL DS    0F                      TEXT UNIT POINTER LISˇ
4         DC    A(DUNDDNAM+X'80000000') DDNAME
4         SPACE 1
4***********************************************************************
004* SVC 99 TEXT UNIT FOR ALLOCATION OF A DDNAME FOR DSNAME
004*********************************************************************
004         SPACE 1
004DALDDNˇ
60004         DC    XL2'0001'               KEY
70004         DC    XL2'0001'               # OF LENGTH+PARAMETER ENTRIE
80004         DC    XL2'ˇ
5790004DDNAME   DC    CL8'ZIL     '
5800004         ORG   DDNAME
5810004         DS    CL3              ˇ
 05820004DDCHAR   DC    C' '                I OR O
 05830004FILENAME DS    CL4
 05840004         ORG                                 ˇ
   05850004         SPACE 1
   05860004*************************************************************
** 05870004* SVC 99 TEXT UNIT FOR ALLOCATION BY DSNAME               ˇ
     05880004***********************************************************
**** 05890004         SPACE 1
     05900004DALDSNAM DS    0H                      TEXT UNIT
    ˇ
       05920004         DC    XL2'0001'               # OF LENGTH+PARAME
IES    05930004DSLEN99  DC    XL2'0000'               LENGTH OF DSNAME
       05940004DSNAˇ
         05950004         SPACE 1
         05960004*******************************************************
******** 05970004* SVC 99 TEXT UNIˇ
           05980004*****************************************************
********** 05990004         SPACE 1
           06000004DALMEMBR DS    0H             ˇ
             06010004         DC    XL2'0003'               KEY
             06020004         DC    XL2'0001'               # OF LENGTH+
R ENTRIES    06030004MEMLEN99 DC    XL2'0000'               LENGˇ
AME            06040004MEMBER99 DC    CL8' '                  MEMBER NAM
               06050004         SPACE 1
               06060004*************************************************
 *************** 06070004ˇÁ
                               06080004*********************************
****************************** 06090004         SPACE 1
                               06100004Dˇ
TEXT UNIT                        06110004         DC    XL2'0004'
KEY                              06120004         DC    XL2'0001'
# OF LENGTH+PARAMETER ENTRIES    06130004         DC   ˇ
  LENGTH OF STATUS                 06140004STATUS99 DC    X'08'
  STATUS = SHR                     06150004*              X'04'
  STATUS = NEW                     06160004*              X'02'       ˇ
    STATUS = MOD                     06170004*              X'01'
    STATUS = OLD                     06180004         SPACE 1
                                     06190004***************************
*****ˇ
POSITION                               06210004*************************
************************************** 06220004         SPACE 1
                    ˇ
        TEXT UNIT                        06240004         DC    XL2'0005
        KEY                              06250004         DC    XL2'0001
        # OF LENGTH+PARAMETER ENTRIˇ
          LENGTH OF NORMAL DISPOSITION     06270004DISP99   DC    X'08'
          DISP = KEEP                      06280004*              X'04'
          STATUS = DELETE                  0629000ˇ
            STATUS = CATALOG                 06300004*              X'01
            STATUS = UNCATALOG               06310004         SPACE 1
                                             06320004************ˇ
********************************************** 06330004* SVC 99 TEXT UNI
LOCATION IN TRACKS                             06340004*****************
********************************************** 06350004         SPACE 1
ˇ
                TEXT UNIT                        06370004         DC
'               KEY                              06380004         DC
'              ˇ
00'               LENGTH                           06400004         SPAC
                                                   06410004*************
******************************ˇ
FOR PRIMARY SPACE ALLOCATION                         06430004***********
**************************************************** 06440004         SP
                                             +
                      TEXT UNIT            ˇ
XL2'000A'               KEY                              06470004
XL2'0001'               # OF LENGTH+PARAMETER ENTRIES    06480004
XL2'0003'               LENGTH                           0ˇ
  AL3(10)                 DEFAULT PRIMARY # OF TRACKS      06500004
E 1                                                        06510004*****
********************************************************** 06520004* SVC
XT UNIT FOR SECONDARY SPACE ALLOCATION                       06530004***
************************************************************ 06540004
ACE 1                                                        06550004DAL
    0H  ˇ
DC    XL2'000B'               KEY                              06570004
DC    XL2'0001'               # OF LENGTH+PARAMETER ENTRIES    06580004
DC    XL2'0003'        ˇ
  DC    AL3(10)                 DEFAULT SECONDARY # OF TRACKS    0660000
  SPACE 1                                                        0661000
**************************************ˇ
 99 TEXT UNIT FOR NUMBER OF DIRECTORY BLOCKS                       06630
****************************************************************** 06640
    SPACE 1                                          ˇ
DIR   DS    0H                      TEXT UNIT                        066
      DC    XL2'000C'               KEY                              066
      DC    XL2'0001'               # OF LENGTH+PARAMETER ENTRIES   ˇ
        DC    XL2'0003'               LENGTH                           0
        DC    AL3(35)                 DEFAULT # OF DIRECTORY BLOCKS    0
                                  (NOTE: NOT THE SAME AS IBM DEFAULT)  0
   ˇ
4***********************************************************************
4* SVC 99 TEXT UNIT FOR RETURN DSORG
4*****************ˇ
004         SPACE 1
004DALRTORG DS    0H                      TEXT UNIT
004         DC    XL2'0057'      ˇ
80004         DC    XL2'0001'               # OF LENGTH+PARAMETER ENTRIE
90004         DC    XL2'0002'               LENGTH OF DSORG
00004DSORG99  DS    XL2                     DSORˇ
6810004         SPACE 1
6820004*****************************************************************
6830004* SVC 99 TEXT UNIT FOR UNALLOCATION OF A DDNAME         
 06840004ˇÁ
************** 06850004         SPACE 1
               06860004DUNDDNAM DS    0H                      TEXT UNIT
               06870004 ˇ
                 06880004         DC    XL2'0001'               # OF LEN
METER ENTRIES    06890004         DC    XL2'0008'               LENGTH O
                 06900004UNDDNAME DS   ˇ
                   06910004         EJECT
                   06920004*********************************************
****************** 06930004* DAIRFAIL (IKJEFF18) PARAMˇ
                   * 06940004*******************************************
******************** 06950004         SPACE 1
                     06960004DFPARMS  DS    0A                       ˇ
                       06970004         SPACE 1
                       06980004DFS99RBP DC    A(S99RB)            ADDRES
 99 REQUEST BLOCK      06990004DFRCP    DC    A(DRETCODE)         ADDRES
 99 ˇ
P OF IKJEFF02 OR ZEROES  07010004DFIDP    DC    A(DFID)             ADDR
-BYTE ID AREA            07020004DFCPPLP  DC    A(0)                ADDR
PPL NOT NEEDED     ˇ
 BUFFER FOR MSG EXTRACTION 07040004         SPACE 1
                           07050004DFBUFS   DS    0A                  AR
XTRACTED MESSAGE           0706000ˇ
VEL MESSAGE AREA             07070004DFBUF2   DS    2H,CL251
EVEL MESSAGE AREA            07080004         EJECT
                             07090004*           ˇ
                               07100004* OTHER FIELDS
                               07110004*
                               07120004         DS    0A        ˇ
                                 07130004DRETCODE DS    XL4
RN CODE FROM SVC99               07140004DERROR   DS    XL2
 OF S99ERROR                     07150004DINFO    DS    XL2

                                   07170004DFID     DC    B'01000000',X'
TRACT MSG ONLY, CALLER = SVC99     07180004         SPACE 1
              ˇ
BLDL LIST TO CHECK ONE MEMBER        07200004BLDLMEM  DS    CL8
                                     07210004         DS    CL4
                             +
                           ˇ
                                         07240004MEMFLAG  EQU   B'100000
    1 = A MEMBER WAS REQUSTED            07250004FREEFLAG EQU   B'010000
    1 = UNALLOCATION TO BE DONE          0ˇ
      1 = JUST PROBING                     07270004ALFLAG   EQU   B'0001
      1 = DATASET IS ALLOCATED             07280004APPFLAG  EQU   B'0000
      1 = APPEND SPECIFIED                 07290004      ˇ
                                             07300004TRTBL    DC    256Y
BL)     TABLE TO FOLD TO UPPER CASE          07310004         ORG   TRTB
                                             07320004         DC    C'AB
I'                                             07330004         ORG   TR
'                                              07340004         DC    C'
R'                                             07350004         ORG   TR
'      ˇ
YZ'                                              07370004         ORG
                                                 07380004         EJECT
                      ˇ
=X,DSORG=PO,MACRF=R                                07400004         EJEC
                                                   07410004         LTOR
                                     ˇ
                                                     07430004         #Z
                Define OPEN/CLOSE file modes         07440004         EJ
                                                    ˇ
                                                       07460004
                                                       07470004
                                                       07480004    +
                                                         07490004{
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002*
       * 00017002* PDSO originally stood for "PUSH DOWN STACK OVERFLOW".
       * 00018002*                          ˇ
         * 00019002* THIS MODULE IS INVOKED WHEN A COMPILED ZIL FUNCTION
RS THAT  * 00020002* THERE IS NOT ENOUGH ROOM ON THE PUSH DOWN STACK TO
  THIS   * 00030002* CATCHES INFINITE RECURSION ERRORS.    ˇ
           * 00040002*
           * 00050002* NOTE: ENTRY TO THIS MODULE IS NOT VIA REGISTER 15
A          * 00060002*       REGISTER 2.  THIS INSURES THAT THE ENTRY PO
 THE         * 00070002*       FUNCTION WHICH DETECTED THE STACK OVERFLO
ION          * 00080002*       IS RETAINED.
             * 00090002*
         ˇ
RSIVE.         * 00110002*
               * 00120002***********************************************
**************** 0013000ˇ
                 * 00140002* FOR ZIL 1.1, THIS MODULE TRAPS TWO KINDS OF
                 * 00150002*
                 * 00160002*   IF REGISˇ
RFLOW ERROR.       * 00170002*   IF REGISTER 1 IS NIL, AN UNBOUND-VARIAB
.                  * 00180002*
                   * 00190002* BOTH OF THESE ARE DETECˇ
 THE COMPILER.       * 00200002*
                     * 00210002*****************************************
********************** 00220002*                                     ˇ
                       * 00230002* FOR ZIL 1.2, THIS MODULE TRAPS THREE
 ERRORS - THE TWO      * 00240002* DESCRIBED ABOVE, PLUS ATTENTION INTER
HICH ARE DETECTED BY   * 00250002* VIRTUE OF THE ZLCIATTN BIT BEING ON.
    ˇ
                         * 00270002*************************************
************************** 00280002         SPACE 1
                   +
                 ˇ
                               00310002         BALR  #3,0
 LOCAL BASE REGISTER           00320002         USING *,#3
                               0ˇ
                                 00340002         TM    ZLCIFLGS,ZLCIATT
ALLED FOR ATTENTION INTERRUPT    00350002         BO    ATTN
 GO DEAL WITH IT                 00360002      ˇ
                                   00370002         LR    #2,#15
VE EP OF CALLER                    00380002         LR    #4,#1
VE REGISTER 1                      00390002         CR    #4,#ˇ
IF REGISTER 1 = NIL                  00400002         BNE   EPIN15
THEN...                              00410002         LR    #2,#12
 EP OF CALLER IS IN REG 2            00420002EPIN15   DS    0H
                                       00430002         SPACE 1
                                       00440002*
                                       00450002* Extract function name f
tion into meˇ
                                         00470002         SPACE 1
                                         00480002         XR    #1,#1
    Clear insert register  ˇ
      Initialize fake string length to 0   00500002         IC    #1,4(,
      Get length of module identifier      00510002         SH    #1,=H'
      Subtract length of date/time info   ˇ
        If no name, skip move                00530002         CH    #1,=
EXT)    If longer than our maximum           00540002         BNH   *+8
        then                                 00550002    ˇ
XT         use our maximum length              00560002         STCM  #1
N         Store length into fake string        00570002         BCTR  #1
          Reduce for execute                   00580002         EX    #1
ME          Move function name to fake string    00590002SKIPNAME DS
                                                 00600002*
                                                 00610002* Determine wha
f errorˇ
                                                   00630002         CR
              IF REGISTER 1 IS ZERO                00640002         BE
R             THEN THIˇ
                ELSE THIS IS STACK OVERFLOW ERROR    00660002         #E
IX=NO,          DISPLAY ERROR MESSAGE               X00670002
1000 ',FUNSTR,': Control stack overfl ow.  Possible iX00680002ˇÁ
            nfinite recursion.'                                      006
      SPACE 1                                                        007
RROR  DS    0H                  UNBOUND VARIABLE ERROR               007
                                  TRY TO FIND WHICH VARIABLE IT IS     0
                                  #2 -> START OF MODULE CODE           0
        XR    #15,#15                                                  0
        IC   ˇ
2         LA    #2,5+3(#15,#2)      POINT PAST MODULE HEADER
2         N     #2,=X'FFFFFFFC'     ROUND UP TO FULLWORD BOUNDARY
2         LA    #2,12(,#2)  ˇ
002         LA    #0,4
002GETATOMS L     #15,0(,#2)          LOAD POSSIBLE POINTER TO ATOMS
002         N     #15,=X'7FFFFFFF'    CLEARˇ
10002         LTR   #15,#15             IF POINTER IS NONZERO,
20002         BNZ   GOTATOMS            THEN THIS POINTS TO SYMBOLS
30002         LA    #2,4(,#2)           ELSE TRY NEXT ONE ˇ
0840002         BCT   #0,GETATOMS         OUT OF 4 POSSIBLE POINTERS
0850002         B     GIVEUP              IF NONE, JUST GIVE UP
0860002GOTATOMS DS    0H                  NOW #15 POINTS TO ATOM POINTER
 00870002FINDSYM  DS    0H                  BUT WE GOTTA BUMP TO 1ST SYM
 00880002         L     #1,0(,#15)
 00890002         CLI   ##TYPE(#1),##SYMBOL
 0090000ˇ
   00910002         LA    #15,4(,#15)
   00920002         B     FINDSYM
   00930002GOTSYM   DS ˇ
     00940002         SPACE 1
     00950002***********************************************************
**** 00960002*                        ˇ
     * 00970002* IT IS ASSUMED THAT THE SYMBOL POINTERS START OUT WITH T
LS   * 00980002* REPRESENTING FREE VARIABLES, IN THE SAME ORDER AS THE C
S    * 00990002* TO FILL THEM IN.  THE COMPILER INSURˇ
       * 01000002*
       * 01010002*******************************************************
******** 01020002         SPACE 1                                   ˇ
           01030002FINDXC   CR    #2,#15              GOT TO STOP SEARCH
WHERE      01040002         BNL   GIVEUP              SO ABANDON ALL HOP
T ZLBPTRS  01050002         CLI   0(#2),X'D7'         WHEN WE FOUND ONE
   +
 ˇ
ME             01080002         B     FINDXC
               01090002GOTXC    DS    0H                  NOW #2 -> AN X
CTION          0ˇ
MENT OF THE      01110002         N     #1,0(,#2)           STACK POINTE
EE VARIABLES     01120002         AR    #1,#11              CONVERT TO P
O STACK SLOTS    01130002      ˇ
                   01140002         IC    #0,1(,#2)           GET LENGTH
K FROM XC INSTR    01150002         AR    #0,#1               CONVERT TO
F STACK SLOTS      01160002FINDUV   CR    #1,#ˇ
                     01170002         BNL   GIVEUP              IF NOT F
VE UP                01180002         ICM   #14,15,0(#1)        CHECK TH
 SLOT                01190002         BZ    GOTUV            ˇ
IS THE UNBOUND VAR     01200002         LA    #15,4(,#15)         ELSE B
EXT SYMBOL POINTER     01210002         LA    #1,4(,#1)           TRY NE
 SLOT                  01220002         B     FINDUV
                         01230002GOTUV    DS    0H
                         01240002         L     #6,0(,#15)          GET
TO SYMBOL                01250002GIVEUP   DS    0H
           ˇ
ROR MESSAGE               X01270002               'ZIL1300 ',FUNSTR,': U
exical variable - ',(#6)   01280002         EJECT
                          ˇ
: Move function name to str  01300002         SPACE 1
                             01310002         DS    0H,XL1
ke string to non-halfword    01320002FUNSˇ
                               01330002FUNLEN   DS    AL3
                               01340002FUNTEXT  DS    CL64
                               01350002         EJECT   ˇ
                                 01360002ATTN     DS    0H
                                 01370002         SPACE 1
                                 01380002******************************ˇ
********************************** 01390002*
                                 * 01400002* THIS ROUTINE RECEIVES CONTR
THE ZIL USER HITS ATTENTION AND  * 01410002* PROCESSING IS FORCED THROUG
ATH VIˇ
 WHERE THE ATTENTION WAS DETECTED, * 01430002* OR VIA AN EXPLICIT CHECK
-LEVEL ZIL ROUTINE.  PROCESSING:   * 01440002*
                                    * 01450002ˇÁ
S BIT IS ON, INDICATING THAT ATTENTION WAS HIT     * 01460002*     WHILE
 CODE WAS RUNNING, THEN ZIL REGISTERS HAVE TO BE   * 01470002*     RESTO
D REMEMBER TO SET ZLCISYS OFF.  OTHERWISE, IF      * 01480002*ˇ
ION HAD TO BE OVERLAID TO GET US UP HERE, THEN       * 01490002*     RES
 ORIGINAL INSTRUCTION.  THEN ISSUE A NOP (BC 0,0)    * 01500002*     TO
IZE THE PROCESSOR JUST IN CASE THE OVERLAID          * 01510002*     INS
ON WAS, LIKE, REAL CLOSE TO THIS CODE.  THEN PROCEED   * 01520002*     T
TO THE APPROPRIATE CATCH TAG (I.E. T) TO RETURN THE    * 01530002*     Z
TO PERCEIVED "TOP LEVEL".  WHILE AN INSTRUCTION IS     * 01540002*     O
 BIT ZLCIOVEˇ
FTER RESTORING THE INSTRUCTION.  THIS BIT IS USED TO     * 01560002*
 THE OVERLAYING OF CODE IN THIS RECOVERY ROUTINE ITSELF  * 01570002*
 ATTENTION SHOULD BE HIT DUˇ
                                                           * 01590002***
************************************************************ 01600002
ACE 1                                     ˇ
TM    ZLCIFLGS,ZLCISYS    IF NON-ZIL CODE WAS RUNNING          01620002
BZ    NOTSYS              THEN...                              01630002
NI    ZLCIFLGS,255-ZLCISYS RESTORE THE BIT               ˇ
  L     #8,ZLCT              RESTORE #8                          0165000
  L     #9,ZLCISV09          RESTORE #9                          0166000
  L     #10,ZLCNIL           RESTORE #10                         0167000
    B     ATTNDOIT            ELSE...                              01680
S   DS    0H                   (ZIL CODE WAS RUNNING)              01690
    TM    ZLCIFLGS,ZLCISVD    IF CODE IN PROGRESS ZAPPED REGS 8-11 01700
    BZ ˇ
      LM    #8,#10,ZLCISAVE      RESTORE THEM FROM WHERE THEY SAVED  017
      NI    ZLCIFLGS,255-ZLCISVD                                     017
SOK   DS    0H        ˇ
        TM    ZLCIFLGS,ZLCIOVER   IF AN INSTRUCTION WAS OVERLAID       0
        BZ    ATTNDOIT            THEN...                              0
        L     #1,ZLCINSTA         POIˇ
2         LH    #0,ZLCINSTR         GET ORIGINAL PIECE OF INSTRUCTION
2         STH   #0,0(,#1)           RESTORE ORIGINAL INSTRUCTION
2         BC    0,0                 SYNCHRONIZE INSTˇ
002         NI    ZLCIFLGS,255-ZLCIOVER RESET ZAPPED-INSTRUCTION FLAG
002ATTNDOIT DS    0H
002         NI    ZLCIFLGS,255-ZLCIATTN RESET ATTN-IN-PROGRESS FLAG+
30002*                                                           ˇ
1840002* WE DON'T REALLY NEED THIS DUMB MESSAGE, BUT...
1850002*
1860002         #TPUT *,ATTNMSG           ISSUE MESSAGE
ˇ
 01880002         LR    #1,#8               SET THROW TAG TO T
 01890002         LR    #2,#10              SET THROW RESULT TO NIL
 01900002      ˇ
   01910002         BR    #15                 INVOKE THROW TO TAG T
   01920002         SPACE 1
   01930002ATTNMSG  DC    C'ZIˇ
     01940002         SPACE
     01950002         LTORG
     01960002         SPACE                  ˇ
       01970002         #ZEQU
       01980002         SPACE
       01990002         #ZCOM                               ˇ
         02000002         SPACE
         02010002         #ZINT
         02020002         END
           02030002{
N ZIL 1.3 SUBROUTINE'                  00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* ZILPKCH TAKES THREE
AL) ARGUMENTS:                           * 00018002*
                                           * 00019002* (1) INPUT FILE SP
ION                                        * 00020002* (2) WHETHER (T) O
IL) TO INTERN THE RESULTING ATOM.          * 00030002* (3) WHETHER (T) O
IL) TO FOLD Tˇ
                                             * 00050002* ZILPKCH IS IDEN
 READCH EXCEPT THAT IT DOES NOT ADVANCE THE  * 00060002* CURRENT CHARACT
ER.  COMPARE COMMON LISP PEEˇ
                                               * 00080002* THIS FUNCTION
NDED FOR USE IN SYSTEMS WHERE FUNCTIONS LIKE   * 00090002* TYIPEEK ARE R
                                           ˇ
                                                 * 00110002*************
************************************************** 00120002*
                                                 * 0013000ˇ
unction was called PEEKCH.  The syntax of PEEKCH   * 00140002* has been
to be compatible with Maclisp READCH (READCH was   * 00150002* changed t
H similarly).  Common LISP READ-CHAR and PEEK-CHAR * 00160002* should be
instead of these functions.  Also TYI and TYIPEEK.   * 00170002*
                                                     * 00180002*********
****************************************************** 00190002
        ˇ
MINARGS=0,MAXARGS=3,NAME='ZILPKCH'                       00210002
24                  DEFINE STACK SIZE                    00220002
,                   SAVˇ
E                                                          00240002
L 1                   ARG 1 = INPUT FILE SPEC              00250002
E                                     ˇ
    ZLFFLAG1,ZLFEOF     IF END OF FILE ALREADY HIT           00270002
    RDAFTEOF            THEN ERROR - READ AFTER EOF          00280002
ACE                                                  +
ICM   #3,15,ZLFCHAR       GET CURRENT POSITION     ˇ
  BP    INPUTOK             IF POSITIVE, WE HAVE GOOD STUFF      0031000
  LR    #15,#10             RETURN NIL IF EOF OR NEWLINE         0032000
  B     RETURN                                                   0ˇ
    SPACE                                                          00340
OK  DS    0H                  REG 3 LOCATES CURRENT CHARACTER      00350
    SPACE                                                          00360
 ˇ
      BCTR  #1,0                 ABSOLUTE LOCATION IN LINE           003
      A     #1,ZLFCARD            AND PASS IT TO ATOM BUILD RTE      003
      C     #10,ˇ
        BE    DONTFOLD             OR                                  0
        C     #13,8(,#11)           ARG 3 IS NOT SUPPLIED              0
        BE    DONTFOLD         ˇ
2         TR    0(1,#1),UPTBL        FOLD CHARACTER TO UPPER CASE.
2DONTFOLD DS    0H
2         ST    #3,ZLFCHAR          SAVE CHARAˇ
002         LA    #0,1                LENGTH OF ATOM TO BE BUILT = 1
002         L     #2,4(,#11)          GET ARG 2 = WHETHER TO INTERN IT
002         LR    #3,#10              SET FORMAT FLAG = NIL  ˇ
90002         L     #15,ZLCABLD         GET ADDRESS OF ZILABLD
00002         LA    #4,24(,#11)         SET CURRENT STACK POINTER FOR CO
10002         #BASR #14,#15             CALL ZILABLD TO BUILD THE ATOM
0520002         SPACE
0530002RETURN   DS    0H                   MAKING #15 POINT TO NEW ATOM
0540002         SPACE 1
0550002    ˇ
 00560002         SPACE 1
 00570002RDAFTEOF DS    0H                  IF NEGATIVE, EOF WAS ALREADY
 00580002         L     #2ˇ
   00590002         #ERR  'ZIL2003 ZILPKCH: Read after end of file ',(#2
  X00600002               PREFIX=NO
   00610002         SPACE 1              ˇ
     00620002         LTORG
     00630002         SPACE 1
     00640002UPTBL    DC    256YL1(*-UPTBL)     TABLE TOˇ
       00650002         ORG   UPTBL+X'81'
       00660002         DC    C'ABCDEFGHI'
       00670002         ORG   UPTBL+X'91'                              
         00680002ˇÁ
                       00690002         ORG   UPTBL+X'A2'
                       00700002         DC    C'STUVWXYZ'
                       00710002 [         ORG
                         00720002         END
                         00730002
IN - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*************
************************************************** 00011002*
                                                 * 00012002*ˇ
c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
   All rights reserved.                            * 00014002*
                                                   * 00015002***********
****************************************************** 00016002*
                                                     * 00017002* THIS SU
 HANDLES ALL PRINTING REQUESTS.                      * 00018002*
          ˇ
CALLER MUST SET THE FOLLOWING REGISTERS:               * 00020002*
                                                       * 00030002*   #4
-EXPRESSION TO BE PRINTEDˇ
FILE POINTER TO BE USED FOR THE PRINTING.                * 00050002*
                                                         * 00060002* THE
MUST ALSO SET THE FOLLOWING BITS IN ZLCPˇ
                                                           * 00080002*
LSH = 1 IF SLASHIFICATION IS REQUESTED, ELSE 0             * 00090002*
                                                       ˇ
************************************************************** 00110002
SPACE 1                                                        00120002Z
#ZBEG NAME='ZILPRIN'                                           0013000ˇ
  USING ZILPRIN,#15                                              0014000
  USING ZLFILBLK,#7                                              0015000
  SPACE 1                                                        0016000
  OI ˇ
    SPACE 1                                                        00180
    L     #6,ZLCPSADR         SET INITIAL PRINT STACK POINTER      00190
    ST    #14,0(,#6)ˇ
      ST    #5,4(,#6)           SAVE REGISTER 5 (PARAMETER REGISTER) 002
      ST    #12,8(,#6)          SAVE REGISTER 12 (BASE REGISTER)     002
      LA    #6,12(,#6)          BUMˇ
        LA    #12,ZPCALL          CALL PRINTING ROUTINE                0
        #BASR #14,#12                                                  0
        DROP  #15                                 ˇ
2         SPACE 1
2         NI    ZLCPFLGS,255-ZLCPRINT NO MORE ZILPRIN ACTIVE
2         SPACE 1                                                +
002         LA    #14,12                                       ˇ
00002         SR    #6,#14              BUMP DOWN STACK POINTER
10002         L     #14,0(,#6)          RESTORE REGISTER 14
20002         L     #5,4(,#6)           RESTORE REGISTER 5
0330002         L     #12,8(,#6)          RESTORE REGISTER 12
0340002         LR    #15,#4              SET RETURN VALUE TO THING PRIN
0350002         BR    #14                 RELOAD REGISTERS AND RETURN
0360002      ˇ
 00370002ZP14     DS    A
 00380002         EJECT
 00390002ZPCALL   DS    0H  ˇ
   00400002         SPACE 1
   00410002*************************************************************
** 00420002*                               ˇ
   * 00430002* #3 = THE CURRENT CHARACTER OFFSET
   * 00440002* #4 = THE THING TO BE PRINTED
   * 00450002* #5 = NOTHING MUCH                          ˇ
     * 00460002* #6 = THE CURRENT CHARACTER POINTER
     * 00470002* #7 = THE FILE POINTER
     * 00480002*
       * 00490002*******************************************************
******** 00500002         SPACE 1
         00510002         USING ZPCALL,#12
        ˇ
TACK SPACE 00530002         C     #0,ZLCPSEND         IF NOT,
           00540002         BNL   STKOVFLO            THEN CANNOT PRINT
           00550002    ˇ
             00560002         SPACE 1
             00570002         CR    #4,#13              IF EQUAL TO #13
             00580002         BE    ISˇ
PTIONAL ARG    00590002         C     #4,ZLCUNBND         IF EQUAL TO TH
D OBJECT       00600002         BE    ISUNB               THEN IT'S THE
OBJECT         00610002         C     #4,ZLCRMNIL    ˇ
                 00620002         BE    ISRMN               THEN IT'S RM
                 00630002         TM    ##TYPE(#4),##ATOM   IF NOT AN AT
                 00640002         BZ    ISALIST             THEN IT ˇ
LIST               00650002         CLI   ##TYPE(#4),##VECTOR IF IT IS A
                   00660002         BE    ISAVEC              THEN WE HA
INT IT AS A VECTOR 00670002         CLI   ##TYPE(#4),##FUNARG IF IT IS A
                    00680002ˇÁ
EN WE HAVE TO PRINT IT AS A FUNARG 00690002         CLI   ##TYPE(#4),##S
 IT IS A STRUCTURE                 00700002         BE    ISASTR
EN WE HAVE TO PRINT IT AS A STRUCT 00710002 ˇ
IF SLASHIFICATION REQUESTED          00720002         BNO   NOSLASH
THEN...                              00730002         LR    #1,#8
 SET #1 TO GET SLASHIFICATION        00740002         B    ˇ
  ELSE...                              00750002NOSLASH  LR    #1,#10
   SET #1 NOT TO GET SLASHIFICATION    00760002AFTSLASH LR    #2,#4
  SET ATOM TO BE DUMPED                00770002         L     #15,ZLCADM
    CALL ZILADMP TO DUMP FORMATTED ATOM  00780002         #BASR #14,#15
    INTO OUTPUT AREA                     00790002         SPACE 1
                                         00800002***********************
*********ˇ
                                         * 00820002* IF WRITING TO A FIL
ABS MODE ON, AND NOT SLASHIFYING,        * 00830002* SCAN THE DATA FOR T
NEWLINES, AND REFORMAT Iˇ
'0D') AND NEWLINES (X'15') ARE TREATED     * 00850002*       THE SAME WA
                                           * 00860002*
                                       ˇ
DATA TO BE PRINTED                           * 00880002* #1 --> THE DATA
RINTED                                       * 00890002*
                                             * 0090000ˇ
************************************************ 00910002         SPACE
                                                 00920002         LR
            GET ADDRESS OF INPUT STRING          00930002         LTRˇ
              GET ITS LENGTH.  IF NOT POSITIVE,    00940002         BNP
              THEN RETURN WITHOUT PRINTING.        00950002         TM
GS,ZLCPSLSH   IF SLASHIFYING,                      00960002         BO
S   ˇ
LAG2,ZLFTABS    IF NOT EXPANDING TABS/NEWLINES,      00980002         BZ
SIS             THEN WRITE IT AS IS                  00990002         LR
#4              GETˇ
5,#3              GET INITIAL LENGTH FOR SCAN          01010002TRTLONG
                                                       01020002
5,=H'256'         IF LENGTH EXCEEDˇ
TRTSHORT            THEN...                              01040002
#1,#1                PRIME TRT REGISTER                  01050002
0(256,#14),TRTABLE   SCAN FOR TABS OR NEWLINES   +
  REFORMAT             IF WE FOUND ONE, GO REFOˇ
    #14,256(,#14)        ELSE BUMP POINTER TO SCAN           01080002
    #15,=H'256'          BUMP DOWN SCAN LENGTH               01090002
    PUTASIS              IF NO MORE TO SCAN, PRINT ASIS      0ˇ
B     TRTLONG              ELSE CONTINUE SCANNING              01110002T
DS    0H                  SCAN 256 CHARACTERS OR LESS          01120002
BCTR  #15,0               REDUCE SCAN LENGTH FOR EXECUTE       01130002
  EX    #15,TRT1            SCAN FOR TABS OR NEWLINES            0114000
  BZ    PUTASIS             IF NONE FOUND, PRINT IT ASIS. ELSE   0115000
T DS    0H                  WE HAVE TO DEAL WITH TABS/NEWLINES   0116000
            ˇ
                              #4 --> DATA                          01180
                              #1 --> FIRST TAB OR NEWLINE CHAR     01190
    LA    #0,0(#3,#4)      ˇ
      ST    #0,INPUTEND         SAVE IT                              012
      LR    #5,#4               POINT TO INPUT TEXT                  012
                                COMPUTE TAˇ
        L     #0,ZLFCHAR          GET CURRENT CHARACTER POSITION       0
        BCTR  #0,0                CONVERT FROM COLUMN TO OFFSET        0
        N     #0,=X'00000007'     CONVERT TO MODULO 8    ˇ
2         ST    #0,TABOFF           STORE AS COMPUTED OFFSET FOR TABBING
2*
2* GET A TAB EXPANSION WORKAREA.  MAX NEEDED = CONTENTS(#3) * 8.
002*
002         LA    #1,16(,#3)          LENGTH OF DATA PLUS FUDGE FACTOR
002         SLA   #1,3                MULTIPLY BY (TABSIZE) 8
002    ˇ
30002         BNH   LENOK               THEN...
40002         LA    #2,7(,#1)            SAVE LENGTH TO BE NEEDED,
50002         N     #2ˇ
1360002         ICM   #0,15,ZLCTWALN       GET LENGTH OF CURRENT WORKARE
1370002         BZ    NOFRETWA             IF ZERO, THERE IS NONE RIGHT
1380002         L     #1,ZLCTWA      ˇ
 01390002         FREEMAIN R,LV=(0),A=(1)    FREE IT
 01400002NOFRETWA DS    0H
 01410002         LR    #0,#2                GET LENˇ
   01420002         #GETMAIN RC,LV=(0),LOC=BELOW GET STORAGE FOR TAB WOR
   01430002         LTR   #15,#15             IF GETMAIN FAILED,
   01440002         BNZ   NOTENUF             THEN ERROR - NOT ENOU GH
     01450002ˇÁ
ADDRESS            01460002         ST    #2,ZLCTWALN         SAVE LENGT
 WORKAREA          01470002LENOK    DS    0H                  OK, NOW WE
WORKAREA           01480002Mˇ
                     01490002         C     #5,INPUTEND         WHEN REA
 OF DATA             01500002         BNL   RETURN              RETURN
                     01510002         L    ˇ
 START OF WORKAREA     01520002SCANLOOP DS    0H
                       01530002         L     #1,INPUTEND         PRIME
INATOR                 01540002         LR    #15,#1      ˇ
TH OF DATA TO BE SCANNED 01550002         SR    #15,#5              IF N
ATA TO SCAN,             01560002         BNP   FINISHED             THE
S WHAT WE HAVE           01570002SCAN256  DS    0H
                           01580002         CH    #15,=H'256'         IF
EXCEEDS MAX TRT LENGTH     01590002         BNH   STRTSHRT            TH
                           01600002         XR    #2,#2                C
 REGISTEˇ
R NEXT TAB OR NEWLINE        01620002         BNZ   SAFTTRT
OUND ONE, GO PROCESS IT      01630002         MVC   0(256,#14),0(#5)
VE REAL DATA TO WORK ARˇ
OUTPUT POINTER BY LENGTH       01650002         LA    #5,256(,#5)
INPUT POINTER TO SCAN          01660002         SH    #15,=H'256'
DOWN SCAN LENGTH               0167000ˇ
NO MORE TO SCAN, FINISHED        01680002         B     SCAN256
E CONTINUE SCANNING              01690002STRTSHRT DS    0H
 256 CHARACTERS OR LESS          01700002         BCTˇ
SE REDUCE FOR EXECUTE              01710002         XR    #2,#2
EAR TRT REGISTER                   01720002         EX    #15,TRT2
AN FOR NEXT TAB OR NEWLINE         01730002SAFTTRT  DS    0H        ˇ
                                     01740002*
                                     01750002* BEFORE PROCESSING FUNNY C
, MOVE NORMAL DATA TO TAB WORKAREA   01760002*
   ˇ
NY CHARACTER WHERE WE STOP             01780002* #5 POINTS TO "NORMAL" I
A TO BE MOVED TO WORKAREA              01790002* #6 POINTS TO CURRENT LO
N WORKAREA TO MOVEˇ
                                         01810002         LR    #15,#1
                                         01820002         SR    #15,#5
    GET LENGTH OF DATA TO MOVE   +
      SKIP IF ZERO             ˇ
        REDUCE FOR EXECUTE                   01850002         EX    #15,
        MOVE DATA FROM INPUT TO WORKAREA     01860002         LA    #14,
4)      BUMP OUTPUT POINTER BY LENGTH        0ˇ
          BUMP INPUT POINTER PAST FUNNY CHAR   01880002         B     CO
2)        NOW BRANCH DEPENDING ON FUNNY CHAR   01890002CONTINUE B     FI
          END OF STRING - FINISH UP            01900002      ˇ
            FOUND TAB CHARACTER                  01910002         B
            FOUND NEWLINE CHARACTER              01920002         B
            FOUND LEFT BRACKET                   01930002         B
              FOUND RIGHT BRACKET                  01940002         SPAC
                                                   01950002HT       DS
              PROCESS TAB                          01960002         LA
#14)       ˇ
X'FFFFFFF8'     ALIGN TO NEXT HIGHER DOUBLEWORD      01980002         S
ABOFF           ADJUST FOR CHARACTER POSITION        01990002         CR
#1              IF THIS ISˇ
ABLOOP            THEN                                 02010002
,8(,#1)            BUMP IT UP 8 MORE BYTES             02020002MTABLOOP
4,#1              LOOP TO MOVE DATA UNTILˇ
SCANLOOP             IS HIT                              02040002
0(#14),X'40'        MOVE BLANK TO WORKAREA               02050002
#14,1(,#14)         BUMP OUTPUT WORKAREA POINTER        ˇ
  MTABLOOP                                                 02070002
E 1                                                        02080002NL
  0H                  PROCESS NEWLINE                      02090002    ˇ
    #15,#14             COMPUTE LENGTH OF EXPANDED TEXT      02100002
    #14,ZLCTWA          USING ADDRESS OF EXPANDED TEXT       02110002
    #15,#14             (= CURRENT POINTER - START POINTER)  02120002
P   NOˇ
C     #15,ZLCTWALN        IF LONGER THAN WORK AREA LENGTH      02140002
BH    DISASTER            THEN WE REALLY BLEW IT               02150002
#BAS  #2,PRINTIT     ˇ
  DS    0H                  THEN FORCE A TERPRI FOR THE NEWLINE  0217000
  L     #15,ZLCTERP         GET ADDRESS OF ZILTERP               0218000
  BALR  #14,#15             CALL ZILˇ
    XC    TABOFF,TABOFF       RESET TAB OFFSET TO ZERO             02200
    B     MORE                CONTINUE PROCESSING                  02210
    SPACE 1                                                         022

   02230002         MVC   0(1,#14),ZLCLB      REPLACE WITH COMMON AREA B
   02240002         LA    #14,1(,#14)         BUMP OUTPUT POINTER
   02250002 ˇ
     02260002         SPACE 1
     02270002RB       DS    0H                  PROCESS RIGHT SQUARE BRA
     02280002         MVC  ˇ
ET     02290002         LA    #14,1(,#14)         BUMP OUTPUT POINTER
       02300002         B     SCANLOOP            CONTINUE PROCESSING
       02310002         SPACE 1           ˇ
         02320002FINISHED DS    0H
         02330002         LR    #15,#14             COMPUTE LENGTH OF EX
EXT      02340002         L     #14,ZLCTWA          USINGˇ
TEXT       02350002         SR    #15,#14             (= CURRENT POINTER
 POINTER)  02360002         BNP   MORE                IF NONE LEFT, CONT
           02370002         #BAS  #2,PRINTIT          PRINT WHAT'S LEFT
             02380002         B     MORE                CONTINUE PROCESS
             02390002         SPACE 1
             02400002NOTENUF  DS    0H                  NO STORAGE FOR W
       ˇ
               02420002         B     PUTASIS             GO TO PRINT WI
FORMATTING     02430002         SPACE 1
               0244000ˇ
WORKAREA         02450002         #TPUT *,DEMSG,L'DEMSG     TELL THE USE
                 02460002******** B     PUTASIS             GO TO PRINT
REFORMATTING     02470002         SPAˇ
                   02480002PUTASIS  DS    0H                  PRINT WITH
RMATTING           02490002         LR    #14,#4              GET ADDRES
A                  02500002         LR    #15,#3    ˇ
TA                   02510002         B     TRYPRINT            GO TO PR
                     02520002         SPACE 1
                     02530002TRT1     TRT   0(*-*,#14),TRTABLE  SCAˇ
ABS OR NEWLINES        02540002TRT2     TRT   0(*-*,#5),TRTABLE   SCAN F
TAB OR NEWLINE         02550002MVCDATA  MVC   0(*-*,#14),0(#5)    MOVE F
 TO WORK AREA          02560002         EJECT
  ˇ
PRINTED IS A LIST        02580002         SPACE
                         02590002         LA    #14,=C'('
                 +
               ˇ
LEFT PARENTHESIS             02620002PRINTCAR DS    0H
                             02630002         ST    #4,4(,#6)
ISTER ON STACK               0ˇ
AR LIST)                       02650002         LA    #6,8(,#6)
TACK POINTER UP                02660002         #BASR #14,#12
ILPRIN RECURSIVELY             02670002      ˇ
 STACK POINTER DOWN              02680002         L     #4,4(,#6)
ORE OUR REGISTER                 02690002         L     #14,##CDR(,#4)
 AT (CDR LIST)                   02700002         CR    #14,ˇ
 CDR IS NIL                        02710002         BE    LISTEND
EN END OF LIST                     02720002         CR    #14,#13
 EQUAL TO #13                      02730002         BE    DOTP
OR                                   02740002         C     #14,ZLCUNBND
IF EQUAL TO THE UNBOUND OBJECT       02750002         BE    DOTP
OR                                   02760002         C     #14,ZLCRMNIL
IF EQUAL Tˇ
  OR                                   02780002         TM    ##TYPE(#14
  IF THE CDR IS AN ATOM                02790002         BZ    NOTDOTP
  THEN THIS IS A DOTTED Pˇ
    SO PRINT SPACES AND A PERIOD         02810002         LA    #15,3
                                         02820002         #BAS  #2,PRINT
                                        ˇ
      GET (CDR LIST)                       02840002         LA    #6,4(,
      BUMP STACK POINTER UP                02850002         #BASR #14,#1
      CALL ZILPRIN RECURSIVELY             02860002    ˇ
        BUMP STACK POINTER DOWN              02870002         B     LIST
        THEN GO TO PRINT END OF LIST         02880002NOTDOTP  DS    0H
        LIST NOT A DOTTED PAIR               02890002         LA    #1ˇ
          PRINT SPACE                          02900002         LA    #1
                                               02910002         #BAS  #2
                                               02920002         L     #4
#4)  ˇ
            THEN CONTINUE PRINTING LIST          02940002LISTEND  DS
                                                 02950002         LA
'           PRINT A ˇ
              AND THEN RETURN                      02970002         B
NT                                                 02980002         EJEC
                                                    02990002ˇÁ
R   DS    0H                  THING TO BE PRINTED IS A STRUCTURE   03000
    SPACE                                                          03010
    LA    #14,=C'#<STRUCT '                                        03020
      LA    #15,9                                                    030
      #BAS  #2,PRINTIT          PRINT THE BEGINNING OF A STRUCTURE   030
      XR    #5,#5               CLEAR INSERT REGISTER                030
      ICM  ˇ
        LA    #5,##VECDAT-4(#5,#4) POINT TO LAST STRUCTURE ELEMENT     0
        LA    #4,##VECDAT(,#4)    POINT TO FIRST STRUCTURE ELEMENT     0
RINTELS DS    0H          ˇ
2         STM   #4,#5,4(#6)         SAVE REGISTERS ON STACK
2         L     #4,0(,#4)           GET ELEMENT OF STRUCTURE
2         LA    #6,12(,#6)          BUMP ˇ
002         #BASR #14,#12             CALL ZILPRIN RECURSIVELY
002         SH    #6,=H'12'           BUMP STACK POINTER DOWN
002         LM    #4,#5,4(#6)         RESTORE OUR REGISTˇ
50002         CR    #4,#5               IF THIS IS THE LAST STRUCT ELEME
60002         BNL   STRUCEND            THEN FINISH PRINTING
70002         LA    #14,=C' '           ELSE PRINT SPACE               ˇ
3180002         LA    #15,1
3190002         #BAS  #2,PRINTIT
3200002         LA    #4,4(,#4)           BUMP TO NEXT STRUCTURE ELEMENT
321000ˇ
 03220002STRUCEND DS    0H
 03230002         LA    #14,=C'>'           PRINT END-OF-STRUCTURE
 03240002         LA ˇ
   03250002         B     TRYPRINT
   03260002         EJECT
   03270002ISAVEC   DS    0H        ˇ
     03280002         SPACE
     03290002         LA    #14,=C'#('
     03300002         LA    #15,2                  ˇ
       03310002         #BAS  #2,PRINTIT          PRINT A LEFT VECTOR-PA
S      03320002         XR    #5,#5               CLEAR INSERT REGISTER
       03330002         ICM   #5,7,1(#4)          GET LENGTH OF VEˇ
         03340002         BZ    VECEND              IF NULL VECTOR, SKIP
 PRINT   03350002         LA    #5,##VECDAT-4(#5,#4) POINT TO LAST VECTO
T        03360002         LA    #4,##VECDAT(,#4)    POINT TO FIRST VECTO
T+

             03390002         L     #4,0(,#4)           GET ELEMENT OF V
             03400002         LA    #6,12(,#6)          BUMP STACK POINT
             0ˇ
LY             03420002         SH    #6,=H'12'           BUMP STACK POI
N              03430002         LM    #4,#5,4(#6)         RESTORE OUR RE
               03440002      ˇ
VECTOR ELEMENT   03450002         BNL   VECEND              THEN FINISH
                 03460002         LA    #14,=C' '           ELSE PRINT S
                 03470002         LA    #15,ˇ
                   03480002         #BAS  #2,PRINTIT
                   03490002         LA    #4,4(,#4)           BUMP TO NE
R ELEMENT          03500002         B     PRINTEL          ˇ
INTING VECTOR        03510002VECEND   DS    0H
                     03520002         LA    #14,=C')'           PRINT A
RENTHESIS            03530002         LA    #15,1               AND THEN
N                      03540002         B     TRYPRINT
                       03550002         EJECT
                       03560002ISAFUN   DS    0H                  THING
INTED IS ˇ
                         03580002         LA    #15,9
                         03590002         #BAS  #2,PRINTIT          PRIN
GINNING OF A FUNARG     ˇ
ON COMPONENT OF FUNARG     03610002         LA    #6,4(,#6)           BU
 POINTER UP                03620002         #BASR #14,#12             CA
IN RECURSIVELY             03630002    ˇ
CK POINTER DOWN              03640002         LA    #14,=C'>'
E ENDING OF IT AND RETURN    03650002         LA    #15,1
                             03660002         B     TRˇ
                               03670002         EJECT
                               03680002ISUOA    DS    0H
TO BE PRINTED IS AN            03690002*                             ˇ
PPLIED OPTIONAL ARGUMENT (#13)   03700002         LA    #14,$UOA
                                 03710002         LA    #15,L'$UOA
                                 03720002         B     TRYPRINT
T UNˇ
                                   03740002ISUNB    DS    0H
ING TO BE PRINTED IS THE           03750002*
BOUND OBJECT                        03760002ˇÁ
NB                                                 03770002         LA
$UNB                                               03780002         B
NT            PRINT IT                             03790002 ˇ
                                                     03800002ISRMN    DS
                THING TO BE PRINTED IS THE           03810002*
                "NOTHING" READER MACRO OBJECT        03820002         LA
4,$RMN                                                 03830002
5,L'$RMN                                               03840002
YPRINT            PRINT IT                             03850002
          ˇ
0H                  NO ROOM ON STACK TO PRINT THING      03870002
1                                                        03880002
#14,OF14            SAVE ˇ
  #14,OFTHING                                              03900002
  #15,L'OFTHING                                            03910002
  #2,PRINTIT          PRINT WHAT WE GOT ˇ
    #14,OF14                                                 03930002
    #14                 RETURN                               03940002
ACE 1                                                  ˇ
DS    A                                                        03960002O
DC    C'...#<PRINT STACK OVERFLOW>...'                         03970002$
DC    C'#<UNSUPPLIED OPTIONAL ARGUMENT>'                       0398000ˇ
  DC    C'#<UNBOUND>'                                            0399000
  DC    C'#<RMNIL>'                                              0400000
  EJECT                                                          0401000
T DS ˇ
    #BAS  #2,PRINTIT          PRINT WHAT WE GOT                    04030
    SPACE 1                                                        04040
N   L     #14,0(,#6)ˇ
      BR    #14                 RETURN                               040
      EJECT                                                          040
NTIT  DS    0H                     ˇ
                                                                       0
 #14 --> DATA TO BE PRINTED                                            0
 #15 = LENGTH OF DATA TO BE PRINTED               ˇ
2*
2         LTR   #15,#15             IF LENGTH TO BE PRINTED IS ZERO
2         BZR   #2                  THEN PRINT NOTHING           +
002         SPACE 1                                            ˇ
50002         ST    #2,SAVERET
60002         L     #2,ZLFCHAR          GET CURRENT CHARACTER POSITION
70002         BCTR  #2,0                CONVERT FROM COLUMN TO OFFSET
4180002         LR    #0,#2               SAVE FOR CHARPOS TEST
4190002         A     #2,ZLFCARD          ADD RECORD AREA LOCATION
4200002         AR    #2,#15              ADD LENGTH OF DATA
4210002      ˇ
 04220002         BNH   OK                   AND
 04230002         TM    ZLFFLAG1,ZLFNEWLN     THERE IS ALREADY DATA ON T
 04240002         BO    PT  ˇ
   04250002         LTR   #0,#0                   CHARACTER POSITION PAS
   04260002         BNP   OK                       THEN...
   04270002PT       DS    0H               ˇ
     04280002         SPACE 1
     04290002* IF WE ARE CURRENTLY PRINTING A STACK TRACE, WE PRINT ONLY
E    04300002* OF OUTPUT TO PREVENT INFINITE LOOPING.     ˇ
       04310002         SPACE 1
       04320002         TM    ZLCERFLG,ZLCERTRC   IF STACK TRACING IS AC
       04330002         BZ    PRTNEWLN            THEN...
         04340002         NI    ZLCPFLGS,255-ZLCPRINT NO MORE ZILPRIN AC
         04350002         L     #6,ZLCPSADR          SET INITIAL PRINT S
NTER     04360002         L     #14,0(,#6)           RESTORE REGISTER 14
        ˇ
           04380002         L     #12,8(,#6)           RESTORE REGISTER
           04390002         BR    #14                  RELOAD REGISTERS
RN         04400002    ˇ
             04410002PRTNEWLN DS    0H
             04420002         STM   #14,#15,P1SAVE       SAVE VOLATILE R
             04430002         L     #1ˇ
P              04440002         #BASR #14,#15              CALL ZILTERP
 PRINT OUTPUT  04450002         LM    #14,#15,P1SAVE       RESTORE VOLAT
               04460002         SPACE 1              ˇ
                 04470002OK       DS    0H
                 04480002         OI    ZLFFLAG1,ZLFNEWLN   SET NEW LINE
ION ON           04490002         L     #3,ZLFCHAR          GET CURRˇ
TER POSITION       04500002         LR    #2,#3               GET CURREN
TER POSITION       04510002         BCTR  #2,0                CONVERT FR
N TO OFFSET        04520002         A     #2,ZLFCARD          ADD RECORD
CAT ION             04530002ˇÁ
 LENGTH EXCEEDS PRINT LENGTH       04540002         BNH   OKLRECL
EN                                 04550002         LH    #1,ZLFLRECL
INT FOR THAT LENGTH ONLY           04560002 ˇ
Reduce for continuation character    04570002         CH    #1,=H'256'
If length exceeds 256                04580002         BNH   OKNOMVCL
then...                              04590002         STM  ˇ
   Save registers                      04600002******** LR    #2,#2
   Destination address = output ptr    04610002         LR    #3,#1
   Length to move                      04620002         LR    #4,#14
     Source address = input pointer      04630002         LR    #5,#3
     Length to move                      04640002         MVCL  #2,#4
     Move data to output record area     04650002         LM    #2,#5,MV
     Restˇ
      Else...                              04670002OKNOMVCL DS    0H
       Length 256 or less                  04680002         BCTR  #1,0
       REDUCE FOR EXECUTˇ
         MOVE DATA TO OUTPUT RECORD AREA     04700002         LA    #1,1
         Restore after execute               04710002OKAFMVCL DS    0H
        Move done                      ˇ
          SUBTRACT PRINT LENGTH FROM TOTAL     04730002         AR    #1
          BUMP DATA POINTER ACCORDINGLY        04740002         AR    #2
          BUMP DATA POINTER ACCORDINGLY        0475000ˇ
÷'          Move in continuation character       04760002         LA
)           Restore to ZLFLRECL+1                04770002         ST
AR          RESET CHARACTER POINTER              04780002         B  ˇ
LN            GO TO TERPRI AND PRINT REST OF IT    04790002OKLRECL  DS
              ELSE ATOM WILL FIT ON ONE RECORD     04800002         CH
'256'         If length exceeds 256                04810002         BNH
CL  ˇ
5,MVCLSAVE       Save registers                      04830002******** LR
2                Destination address = output ptr    04840002         LR
15               Leˇ
,#14               Source address = input pointer      04860002
,#3                Length to move                      04870002
,#4                Move data to ouˇ
#2,#5,MVCLSAVE       Restore registers                   04890002
OKLAMVCL            Else...                              04900002OKLNMVC
0H                   Length 256 or less          +
  #1,#15              GET LENGTH               ˇ
TR  #1,0                REDUCE FOR EXECUTE                   04930002
    #1,MVDATA           MOVE DATA TO OUTPUT RECORD AREA      04940002OKL
    0H                  Move done                            0ˇ
AR    #3,#15                                                   04960002
ST    #3,ZLFCHAR          UPDATE CURRENT CHAR POSITION         04970002
L     #2,SAVERET                                               04980002
  BR    #2                                                       0499000
  MVC   0(0,#2),0(#14)      MOVE DATA TO OUTPUT                  0500000
  SPACE                                                          0501000
  DS    2A  ˇ
ET  DS    1A                  SAVE AREA                            05030
AVE DS    4A                  Save area                            05040
END DS    A                ˇ
OFF   DS    F                   COMPUTED TAB OFFSET                  050
      SPACE 1                                                        050
ABLE  DC    256X'00'            TABLE TO Sˇ
        ORG   TRTABLE+X'05'       HT                                   0
        DC    YL1(4)                                                   0
        ORG   TRTABLE+X'0D'       CR                     ˇ
2         DC    YL1(8)
2         ORG   TRTABLE+X'15'       NL
2         DC    YL1(8)
002         ORG   TRTABLE+X'AD'       LEFT SQUARE BRACKET
002         DC    YL1(12)
002         ORG   TRTABLE+X'BD'       RIGHT SQUARE BRACKET
002    ˇ
80002         ORG   ,
90002         SPACE
00002NEMSG    DC    C'ˇ
5210002DEMSG    DC    C'ZILXXXX ZILPRIN WENT PAST END OF WORKAREA, POSSI
5220002               SS OF DATA INTEGRITY OR OTHER SEVERE ERROR WILL RE
5230002         SPACE 1              M
 05240002         LTORG
 05250002         END
 05260002{
SUBROUTINE'                  00010000***********************************
**************************** 00011002*
                           * 00012002*ˇ
ark Draper Laboratory Inc.   * 00013002*                     All rights
.                            * 00014002*
                             * 00015002**************ˇ
******************************** 00016002*
                               * 00017002* ZILRDCH TAKES THREE (OPTIONAL
NTS:                           * 00018002*                          ˇ
                                 * 00019002* (1) INPUT FILE SPECIFICATIO
                                 * 00020002* (2) WHETHER (T) OR NOT (NIL
ERN THE RESULTING ATOM.          * 00030002* (3) WHETHER (T) OR NOT (NIL
D Tˇ
                                   * 00050002***************************
************************************ 00060002*
                  ˇ
lled READCH.  The syntax of READCH   * 00080002* has been changed to be
le with Maclisp READCH (PEEKCH was   * 00090002* changed to ZILPKCH simi
 Common LISP READ-CHAR and PEEK-Cˇ
se functions.  Also TYI and TYIPEEK.   * 00110002*
                                       * 00120002***********************
**************************************** 0013000ˇ
                                           00140002ZILRDCH  #ZBEG MINARG
RGS=3,NAME='ZILRDCH'                       00150002         #ZPDS 24
      DEFINE STACK SIZE                    00160002         #ZSˇ
        SAVE REGISTERS                       00170002         SPACE
                                             00180002         #IFIL 1
        ARG 1 = INPUT FILE SPEC              00190002         SPACE
                                               00200002         TM    ZL
LFEOF     IF END OF FILE ALREADY HIT           00210002         BO    RD
          THEN ERROR - READ AFTER EOF          00220002         SPACE
             ˇ
AR          GET CURRENT POSITION                 00240002GOTINPUT DS
                                                 00250002         LTR
            CHECK INPUT POINˇ
K             IF POSITIVE, WE HAVE GOOD STUFF      00270002         BM
              IF NEGATIVE, RETURN AS A NEWLINE     00280002******** BZ
              IF ZERO, EOF ENCOUNTERED     +
                                         ˇ
                  EOF HIT ON LAST READ                 00310002
FFLAG1,ZLFEOF     INDICATE EOF FOR NEXT CALL           00320002
FFLAG1,255-ZLFNEWLN TURN NEWLINE OFF                   0ˇ
#15,#10             RETURN NIL                           00340002
RETURN                                                   00350002
                                                         00360002RDNL  ˇ
  0H                  NEWLINE HIT ON LAST READ             00370002*
                                                           00380002* THE
NG IS TO PREVENT AN EXTRA KEYBOARD UNLOCK WHEN THE         00390002* INP
IS A Tˇ
THAT "READ" IGNORES END-OF-LINE IT IT IS THE FIRST           00410002* T
T IT SEES - IF THIS WERE NOT THE CASE, READ WOULD            00420002* H
E CHANGED AS WELL.   ˇ
                                                               00440002
TM    ZLFFLAG1,ZLFNEWLN   IF WE ALREADY RETURNED NEWLINE/NIL,  00450002
BZ    RDNLNEW1            THEN...   ˇ
  NI    ZLFFLAG1,255-ZLFNEWLN SET IT OFF AGAIN                   0047000
  #GETC ,                    READ IN THE NEXT CHARACTER          0048000
  B     GOTINPUT             AND TRY TO PROCESS IT ˇ
EW1 DS    0H                  ELSE...                              00500
    OI    ZLFFLAG1,ZLFNEWLN   INDICATE NEWLINE                     00510
    LR    #15,#10             RETURN NIL                          ˇ
      B     RETURN                                                   005
      SPACE                                                          005
UTOK  DS    0H                  REG 3 LOCATES CURRENT CHARACTER      005
 ˇ
        NI    ZLFFLAG1,255-ZLFNEWLN TURN NEWLINE INDICATOR OFF         0
        LR    #1,#3               CONVERT RELATIVE COLUMN TO           0
        BCTR  #1ˇ
2         A     #1,ZLFCARD            AND PASS IT TO ATOM BUILD RTE
2         C     #10,8(,#11)         IF ARG 3 IS NOT NIL
2         BE    DONTFOLD       ˇ
002         C     #13,8(,#11)           ARG 3 IS NOT SUPPLIED
002         BE    DONTFOLD               THEN
002         TR    0(1,#1),UPTBL        FOLD CHˇ
50002DONTFOLD DS    0H
60002         ST    #3,ZLFCHAR          SAVE CHARACTER POINTER
70002         LA    #0,1                LENGTH OF ATOM TO BE  BUILT = 1
0680002ˇÁ
NTERN IT     00690002         LR    #3,#10              SET FORMAT FLAG
             00700002         L     #15,ZLCABLD         GET ADDRESS OF Z
             00710002 ˇ
TER FOR CONS   00720002         #BASR #14,#15             CALL ZILABLD T
THE ATOM       00730002*                                  MAKING #15 POI
W ATOM         00740002         L    ˇ
NTER             00750002         #GETC ,                   GET NEXT CHA
EFORE RETURN     00760002         SPACE
                 00770002RETURN   DS    0H          ˇ
                   00780002         ST    #3,ZLFCHAR          RESET CHAR
INTER              00790002         SPACE
                   00800002         #ZRET ,                   RESTOˇ
S AND RETURN         00810002         SPACE
                     00820002RDAFTEOF DS    0H                  IF NEGAT
 WAS ALREADY HIT     00830002         L     #2,ZLFATOM          Load fil
orˇ
f file ',(#2),        X00850002               PREFIX=NO
                       00860002         SPACE
                 ˇ
                         00880002         SPACE
                         00890002UPTBL    DC    256YL1(*-UPTBL)     TABL
D TO UPPER CASE          0090000ˇ
                           00910002         DC    C'ABCDEFGHI'
                           00920002         ORG   UPTBL+X'91'
                           00930002         DC ˇ
                             00940002         ORG   UPTBL+X'A2'
                             00950002         DC    C'STUVWXYZ'
                             00960002         ORG             n
                               00970002         END
                               00980002
'ZILREM - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*******
******************************************************** 00011002*
                                                       * 00012002*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
         All rights reserved.                            * 00014002*
                                                         * 00015002*****
*ˇ
       SIGNED INTEGER REMAINDER                            * 00017002*
                                                           * 00018002*
 INTEGER1  INTEGˇ
                                                             * 00020002*
GN OF THE REMAINDER IS ALWAYS THE SAME AS THE SIGN OF THE    * 00030002*
ARGUMENT.  ARGUMENTS OTHER THANˇ
HE SECOND ARGUMENT IS 0 AN ERROR IS SIGNALED.                  * 0005000
                                                               * 0006000
ILREM NOT YET IMPLEMENTED FOR ALL COMBINATIONSˇ
                                                                 * 00080
****************************************************************** 00090
                                                             ˇ
his routine currently calls ZILDIV, ZILMUL and ZILSUB to compute   * 001
ignum-by-bignum remainder.                                         * 001
                                                                   * 001
********************************************************************** 0
ILREM   #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILREM',SUBRS=ZILSUBR          0
        #ZPDS 32                  DEFINE STACK SIZE                    0
        #ZSˇ
2*---------------------------------------------------------------------*
2*         BOTH ARGUMENTS ARE FIXNUMS - WE WANT SPEED HERE             *
2*------------------------ˇ
002         LM    #6,#7,0(#11)        LOAD ARGUMENTS
002         CLI   ##TYPE(#6),##FIXNUM CHECK TYPE OF ARG1
002         BNE   NFX1                   ˇ
30002         CLI   ##TYPE(#7),##FIXNUM CHECK TYPE OF ARG2
40002         BNE   F1NF2
50002         L     #2,##CDR(,#6)       GET FIXED VALUE ˇ
0260002         ICM   #1,15,##CDR(#7)     GET FIXED VALUE 2
0270002         BZ    DIVBY0              IF ZERO, ERROR
0280002         SRDA  #2,32               SHIFT INTO REGS FOR DIVIDE   +
 00290002         DR    #2,#1               REMAINDER IN #2, QUOTIENTˇ
   00300002MKAT     #MKAT FIXED               MAKE A FIXNUM
   00310002*
   00320002RETURN   #ZRET ,                   RESTORE REGISTERS AND RETU
   0ˇ
---* 00340002*      ARGUMENT 1 IS NOT A FIXNUM
   * 00350002*----------------------------------------------------------
---* 00360002NFX1  ˇ
       00370002         BNE   ERROR1
       00380002         CLI   ##TYPE(#7),##FIXNUM
       00390002         BNE   B1NFˇ
         00400002         XR    #1,#1               CLEAR FOR LOADING BI
GTH      00410002         LA    #5,4                GENERAL PURPOSE 4
         00420002         ICM   #1,7,1(#6)       ˇ
           00430002         LCR   #5,#5               GENERATE GENERAL P
4          00440002         L     #3,##VECDAT-4(#1,#6) LOAD MS WORD OF D
           00450002         XR    #2,#2               CLEAR UPPEˇ
IDE          00460002         L     #7,##CDR(,#7)       LOAD DIVISOR AND
             00470002         LTR   #7,#7               0?, DON'T CARE A
N OF DIVISOR 00480002         BZ    DIVBY0              ERROR, CAN'T DIV

               00500002         AR    #1,#5               REDUCE INDEX B
RD             00510002         AR    #1,#5               REDUCE INDEX B
R WORD        ˇ
                 00530002BFLOOP   L     #3,##VECDAT(#1,#6)  LOAD NEXT LO
UM WORD          00540002         SLL   #3,1                SHIFT OUT JU
DELETES LSW SIGN 00550002    ˇ
IT DIVIDEND        00560002         DR    #2,#7               DIVIDE AGA
                   00570002         BXH   #1,#5,BFLOOP        ANOTHER WO
                   00580002*                ˇ
                     00590002         TM    ##VECDAT(#6),X'80'  TEST SIG
NUM                  00600002         BNO   MKAT
                     00610002         LCR   #2,#2          ˇ
BEFORE STORING         00620002         #MKAT FIXED               ARG1 W
SO RETURN MUST BE NEG  00630002         B     RETURN
                       00640002*----------------------------------------
-----------------------* 00650002*      ARGUMENT 1 IS A FIXNUM, ARGUMENT
T A FIXNUM             * 00660002*--------------------------------------
-----------------------* 00670002F1NF2    CLI   ##TYPE(#7),##BIGNUM FIX/
OBABLY JU ST RETURN ARG1  00680002ˇÁ
    ARGUMENT 2 ISN'T A BIGNUM EITHER     00690002         L     #4,##CDR
    GET ARG1 FIXNUM                      00700002         LR    #15,#6
    GET ARG1 POINTER,#15 IN CASE OF RET  00710002 ˇ
      TEST FOR -2147483648 = -2**31        00720002         BNO   RETURN
      NO OVERFLOW, RETURN WITH ARG1        00730002         CLC   TWO31(
)     COMPARE BIGNUM TO 2**31              00740002         BNE  ˇ
        BIG MAGNITUDE ARG2, RETURN WITH ARG1 00750002         LA    #15,
        (ZILREM -2147483648 2147483648) = 0  00760002         B     RETU
        RETURN WITH INLINE 0                 00770002*------------------
ˇ
GNUM, ARGUMENT 2 IS NOT A FIXNUM             * 00790002*----------------
---------------------------------------------* 00800002B1NF2    CLI   ##
,##BIGNUM      ˇ
            ARG2 IS NOT AN INTEGER               00820002*--------------
-----------------------------------------------* 00830002*      BOTH ARG
RE BIGNUMS                    ˇ
-------------------------------------------------* 00850002         CLC
),1(#7)       COMPARE LENGTHS IN BIGNUM HEADERS    00860002         BH
              BIGNUM/BIGNUM DIVIDE NEEDED    ˇ
#6              IN CASE ARG2 MAGNITUDE IS GREATER    00880002         BL
RN              LENGTH OF ARG1 IS SMALLER, RETURN IT 00890002         XR
5               CLEAR FOR INSERTION OF 3-BYTE LENGTH 0090000ˇ
,7,1(#6)          GET BIGNUM LENGTHS - BOTH SAME NOW   00910002
,##VECDAT-4(#5,#6) LOAD MS WORD OF ARG 1 BIGNUM        00920002
,##VECDAT-4(#5,#7) COMPARE WITH MS WORD OF ARG 2 BIGN  00930002
RETURN              ARG 1 IS SMALLER, RETURN WITH IT     00940002*******
XXXXXX              QUOTIENT WOULD BE 0 OR 1             00950002**SHOUL
L CASE ABOVE - DO COMPARE AND: SUBTRACT OR RETURN***     00960002
1         ˇ
  0H                  Big/by/big remainder                 00980002
E 1                                                        00990002*****
*************************ˇ
                                                           * 01010002* F
ode for bignum remainder cases that aren't handled here.   * 01020002*
                                        ˇ
tion of LISP code (- arg1 (* (/ arg1 arg2) arg2))            * 01040002*
                                                             * 01050002*
*******************************************************+
  SPACE 1                                            ˇ
    L     #0,0(,#11)           Get function argument arg1          01080
    ST    #0,20(,#11)          Store into argument 1               01090
*** L     #0,0(,#11)           Get function argument arg1          0ˇ
      ST    #0,24(,#11)          Store into argument 1               011
      L     #0,4(,#11)           Get function argument arg2          011
      ST    #0,28(,#11)          Store into argument 2               011
   ˇ
        LA    #1,24(,#11)          Set pointer to arguments in stack.  0
        #BASR #14,#15              Call ZILDIV                         0
        ST    #15,ˇ
2         L     #0,4(,#11)           Get function argument arg2
2         ST    #0,28(,#11)          Store into argument 2
2         L     #15,@ZILMUL      ˇ
002         LA    #1,24(,#11)          Set pointer to arguments in stack
002         #BASR #14,#15              Call ZILMUL
002         ST    #15,24(,#11)         Store intˇ
30002         L     #15,@ZILSUB          Get address of ZILSUB
40002         LA    #1,20(,#11)          Set pointer to arguments in sta
50002         #BASR #14,#15              Call ZILSUB           ˇ
1260002         B     RETURN               Return with value
1270002         SPACE 1
1280002ZILSUBRS DS    0A                   Subroutine pointers.
 01290002@ZILDIV  DC    V(ZILDIV)            Entry point for ZILDIV
 01300002         DC    CL8'ZILDIV'
 01310002@ZILMUL  DC    V(ZILMUL)            Entry point for ZILMUL
 01320002    ˇ
   01330002@ZILSUB  DC    V(ZILSUB)            Entry point for ZILSUB
   01340002         DC    CL8'ZILSUB'
   01350002ZILSUBRE EQU   * ˇ
     01360002         SPACE 1
     01370002*----------------------------------------------------------
---* 01380002*      INLINE CONSTANTS       ˇ
     * 01390002*--------------------------------------------------------
-----* 01400002         DS    0F                  WORD ALIGN
       01410002TWO31    DC    YL1(##BIGNUM),AL3(8),F'0,1' ˇ
GNUM     01420002*
         01430002*------------------------------------------------------
-------* 01440002*      MESSAGES
         * 01450002ˇÁ
-----------------------* 01460002DIVBY0   #ERR  'Divide by zero attempte
 remainder of ',0(#11)   01470002ERROR1   #ERR  'Argument 1 to remainder
integer - ',0(#11)       01480002Eˇ
n integer - ',4(#11)       01490002***XXX   #ERR  'Bignum/bignum remaind
mplemented by ZILREM for 'X01500002               ,0(#11),' and ',4(#11)
                           01510002         SPACE0  1
                             01520002         LTORG
                             01530002         END
                             01540002
ILSBND - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

                                                         * 00017002*  TH
ION IS CALLED BY ALL COMPILED ZIL PROGRAMS WHICH HAVE TO * 00018002*  PU
LOCALLY BOUND ˇ
                                                           * 00020002*
ction, along with ZILFBND, replaces the old ZIL 1.2        * 00030002*
" function.                  ˇ
                                                             * 00050002*
ER 1 IS THE ATOM WHICH IS TO BE BOUND.                       * 00060002*
ER 2 IS THE VALUE WHICH IS BOUND TO ATOM 1. ˇ
STER 1 ON RETURN IS THE CONS CELL WHICH HOLDS THE BINDING.     * 0008000
                                                               * 0009000
corresponding LISP definition would look something like thiˇ
                                                                 * 00110
fun zilsbnd (a b)                                                * 00120
et ((x (cons a b)))                                              * 00130
      (push x (special-alist))                                     * 001
      x))                                                          * 001
                                                                   * 001
HIS ROUTIˇ
 IN ADDITION, IT NEEDS NO BASE REGISTER.                             * 0
                                                                     * 0
 NOTE: THE INTERFACE TO ˇ
2*       COMPILED CODE INVOKES IT AS FOLLOWS:                          *
2*                                                                     *
2*  LA   0,CURRENT STACK LOCATION FOR Cˇ
002*  L    1,ADDRESS OF FREE VARIABLE SYMBOL
002*  L    2,STACK LOCATION OF VALUE
002*  L    15,=A(ZILSBND)                             ˇ
60002*  BALR 3,15
70002*  ST   1,STACK LOCATION OF VALUE
80002*                                                               +
0290002************************************************************ˇ
 00300002         SPACE 1
 00310002ZILSBND  CSECT
 00320002         SPACE 1
 0ˇ
   00340002         SPACE 1
   00350002         L     #15,ZLCCONS         CALL CONS TO CONS ARGS TOG
   00360002      ˇ
     00370002         LR    #1,#15              ARG1=RESULT OF CONS (ALS
ED)  00380002         L     #15,ZLCCONS         GET ADDRESS OF CONS ROUT
     00390002         L     #2,Zˇ
       00400002         #BASR #14,#15             CALL CONS TO CONS THEM
R      00410002         ST    #15,ZLCSALST        UPDATE ALIST WITH NEW
       00420002         BR    #3               ˇ
 REG 1   00430002         SPACE 1
         00440002         #ZEQU ,
         00450002         SPACE 1                             E
           00460002         #ZCOM ,
           00470002         END
           00480002{
 COMPILED CODE OBJECT INITIALIZATION'  00010000*************************
************************************** 00011002*
                                     * 00012002*ˇ
Charles Stark Draper Laboratory Inc.   * 00013002*                     A
s reserved.                            * 00014002*
                                       * 00015002**************ˇ
****************************************** 00016002*
                                         * 00017002* THIS MODULE IS INVO
BALR FROM EXTERNAL FUNCTIONS WHICH HAVE  * 00018002* ATOMS OR LISTS WITH
M, ONE TIME ONLY.  IT RELOCATES ATOMS,     * 00019002* INTERNS SYMBOLS A
RTS 0 AND 1 POINTERS TO NIL AND T.         * 00020002*
                                           * 00030002* THIS MODULE USES
 SPACE,  SINCˇ
                                             * 00050002* ON ENTRY REG 1
O THE BEGINNING OF THE AREA CONTAINING THE   * 00060002* LISTS AND ATOMS
ROCESSED.                   ˇ
                                               * 00080002***************
************************************************ 00090002*
                                           ˇ
IS PROGRAM MUST NOT CONTAIN ANY ATOMS OR LISTS.  * 00110002*
                                                 * 00120002*************
************************************************** 0013000ˇ
                                                     00140002ZILSINT  #Z
='ZILSINT'                                           00150002         SP
                                                     00160002         ST
2,#14,AINTSAVE    SAVE REGISTERS                       00170002
2,#15             SET UP BASE REGISTER                 00180002
LSINT,#12         ESTABLISH ADDRESSABILITY             00190002
HEADER,#ˇ
15                                                       00210002
1                                                        00220002*******
***********************ˇ
                                                         * 00240002* INI
THE PARAMETERS USED TO SCAN THE ATOMS TO BE INITIALIZED  * 00250002*
                                      ˇ
OM POINTERS ARE ZERO, THEN THIS IS A CALL FROM A NON-MAIN  * 00270002* F
 SO ONLY POINTER RELOCATION IS TO BE PERFORMED; FURTHER,   * 00280002* I
ASE THE OFFSETS ARE NEGATIVE SO THEY ARE TO BE SUBTRA+
                                                   ˇ
**************************************************************** 0031000
  SPACE 1                                                        0032000
**************************************************************** 0ˇ
                                                                 * 00340
CASE THIS ROUTINE WAS INTERRUPTED AND GETS ENTERED AGAIN         * 00350
AUSE THE CALLER NEVER GOT TO ZAP ITS BRANCH-AROUND, SET THE      * 00360
Hˇ
S EVER CALLED BY THIS MODULE AGAIN.                                * 003
                                                                   * 003
****************ˇ
        SPACE 1                                                        0
        OI    ZLCGCFLG,ZLCGCBLD   TURN ON SPECIAL CONSING FLAG         0
        OI    ZLCIFLGS,ZLCISMC ˇ
2         L     #3,ZLHATOMA         START FROM BEGINNING OF ATOMS
2         OI    ZLHATOMA,X'80'      ZAP IT SO IT'S NEVER GOOD AGAIN
2         L     #5,ZLHLISTE         END WITH Eˇ
002         LTR   #3,#3               IF ATOMS POINTER IS ZEROES
002         BZ    MRELOC              THEN DO SUBFUNCTIONAL RELOCATION
002         CLR   #3,#5               COMPARE POINTERS       ˇ
90002         BNL   ENDLISTS            SKIP IF NO LISTS OR ATOMS
00002*
10002* Start to pass over main-function pointers.  We have to set a
0520002* pointer to the inline pointers that we have processed so far,
0530002* so that in case of a GC during our processing (before we have
0540002* built a vector to reference this stuff) the pointers we have
0550002* reˇ
 00560002*
 00570002         ST    #3,ZLCSIN1          Set pointer to start of poin
 00580002         LA    #4ˇ
   00590002         BCTR  #5,0                ADJUST END PTR FOR BXLE
   00600002         LA    #2,1                MAKE A 1 FOR COMPARES
   00610002         DROP  1              ˇ
     00620002*
     00630002* IN THE MODULE, ALL REFERENCES TO NIL AND T IN LISTS ARE A
 AS  00640002* FULLWORD VALUES OF 0 AND 1 RESPECTIVELY. ˇ
       00650002* THIS CODE CONVERTS THESE TO THE ACTUAL ATOMS NIL AND T.
       00660002* IN ADDITION, ALL POINTERS HEREIN ARE RELATIVE AND MUST
ATED.  00670002*                                                       
         00680002ˇÁ
 ADD IT TO OBJECT LIST 00690002* AFTER RELOCATING IT
                       00700002*
                       00710002Lˇ
T AND NIL POINTERS       00720002         SPACE 1
                         00730002         L     #7,0(,#3)           PICK
ENTS                     00740002         LTR  ˇ
                           00750002         BZ    MAKENIL             TH
E TO NIL                   00760002         CR    #7,#2               EL
E                          00770002         BE    MAKET       ˇ
NGE TO T                     00780002         A     #7,AINTSAVE+0
OCATE BY ADDING ENTRY POINT  00790002         ST    #7,0(,#3)
OINTER IN MODULE             00800002         B     ISITATOM
UE                             00810002MAKENIL  DS    0H
                               00820002         ST    #10,0(,#3)
                               00830002         B     NEXTLIST
            ˇ
                                 00850002         ST    #8,0(,#3)
                                 00860002         B     NEXTLIST
                           ˇ
                                   00880002ISITATOM DS    0H
                                   00890002         SPACE 1
                                   0090000ˇ
************************************ 00910002*
                                   * 00920002* OBJECT LIST INITIALIZATIO
                                   * 00930002*           ˇ
                                     * 00940002* GO THROUGH ALL ATOM POI
                                     * 00950002* SYMBOLS ARE RELOCATED A
D ON THE OBJECT LIST.                * 00960002* OTHER KINDS OF ATOMS AR
RED.                                   * 00970002*
                                       * 00980002* #7 POINTS TO THE ATOM
TION.                                  * 00990002*
       ˇ
****************************************** 01010002*
                                         * 01020002*  LOGIC IS AS FOLLOW
OLS ARE STORED IN COMPˇ
OL TYPE BITS FOLLOWED BY 3 BYTES OF ZEROES * 01040002*  AND A HASH CODE)
 SYMBOL IS INTERNED (DUE TO ITS NOT BEING  * 01050002*  FOUND ON THE OBL
, ITS POINTER IS RETURNED BY ZILINTN;+
 IS FOUND ON THE OBLIST, THE FORWARˇ
S SET TO 1 AND THE TRUE ADDRESS OF THE SYMBOL  * 01080002*  (AS FOUND ON
IST) IS STORED BACK IN THE SYMBOL POINTER.     * 01090002*  A FORWARDING
 IS DEPOSITED IN THE SYMBOL AREA, BUT NOT THE  * 0ˇ
UAL SYMBOL (BECAUSE THAT WILL BE INACCESSIBLE    * 01110002*  AFTER THE
ATES THE SYMBOL).  THEREFORE, WE STORE THE       * 01120002*  POINTER TO
GINAL POINTER, WHICH CAN BE FOUND AS THE         * 01130002*  FORˇ
ER.  THUS, WHEN ZILSINT SCANS ATOM POINTERS AND    * 01140002*  FINDS A
IT ACTS APPROPRIATELY DEPENDING ON THE CONTENTS    * 01150002*  OF THE F
 SECOND WORDS.                                     * 01160002*
ˇ
****************************************************** 01180002
                                                       01190002
TYPE(#7),##SYMBˇ
NEXTLIST            THEN DON'T PROCESS IT                01210002
1                                                        01220002
##FWBYTE(#7),##FWBIT IF SYMBOLˇ
  OBSEARCH            THEN NEW SYMBOL, GO SEARCH OBLIST    01240002
  #7,##FWWD2(,#7)     ELSE GET IT VIA FORWARDING POINTER   01250002
  #7,0(,#7)           FOLLOW POINTER TO TRUE ˇ
    #7,0(,#3)           STORE TRUE SYMBOL POINTER BACK       01270002
    NEXTLIST            CONTINUE PROCESSING WITH NEXT ATOM   01280002
ACE 1                                                       ˇ
DS    0H                  SEARCH THE OBLIST FOR THIS SYMBOL    01300002
SPACE 1                                                        01310002*
************************************************************** 01320002*
                                                               * 0133000
ve that #7 is greater than zero, being a pointer to a pair of  * 0134000
 in the load module, and that there may be a preset hash code  * 0135000
ined thereˇ
                                                                 * 01370
****************************************************************** 01380
    SPACE 1              ˇ
      ST    #3,ZLCSIN2          Point to end of pointers so far      014
                                in case of GC during internment      014
      L     #15,ZLCINTN         GET ADDRˇ
        LA    #6,8(,#7)           ADDRESS OF PRINT NAME STRING         0
        #BASR #14,#15             CALL ZILINTN TO INTERN THE SYMBOL    0
        ST    #15,0(,#3)          CHANGE PTR TO POINT T O OBLIST SYMBOL
2ˇÁ
TER    01460002         ST    #14,##FWWD2(,#7)    SET FORWARDING POINTER
SYMBOL 01470002         OI    ##FWBYTE(#7),##FWBIT SET FORWARDING BIT IN
BOL    01480002Nˇ
         01490002         BXLE  #3,#4,LISTLOOP      CONTINUE FOR ALL LIS
         01500002         SPACE 1
         01510002ENDLISTS DS   ˇ
           01520002         SPACE 1
           01530002         XR    #3,#3               Clear temporary po
inters     01540002         ST    #3,ZLCSIN1  ˇ
f GC         01550002******** ST    #3,ZLCSIN2          (we really don't
 clear #2)   01560002         SPACE 1
             01570002****************************************ˇ
************** 01580002*
             * 01590002* At this point, add the compiled code header poi
the ZIL      * 01600002* "master vector" of compiled code headers, used
 GC to collect * 01610002* all inline compiled code objects.  All the co
allocates and  * 01620002* maintains this data structure is contained he
               * 01630002*
           ˇ
****************** 01650002         SPACE 1
                   01660002         LR    #6,#1               Save point
dule header        0167000ˇ
master vector"       01680002         BNZ   GOTICPA             If zero,
                     01690002         LA    #3,2048              load a
tial length          01700002         LR ˇ
tmain                  01710002         #GETMAIN RC,LV=(0),LOC=ANY get s
or it                  01720002         LTR   #15,#15              if ge
iled                   01730002         BNZ   GERROR    ˇ
er                       01740002         ST    #3,ZLCICPL           sto
h                        01750002         ST    #1,ZLCICPA           sto
ss                       01760002         LR    #4,#1                loˇ
ess of "master vector"     01770002         XR    #0,#0                s
h used (zero so far)       01780002         ST    #0,ZLCICPU           s
                           01790002GOTICPA  DS    0H                  No
nts toˇ
th used so far               01810002         C     #5,ZLCICPL
ntire length used up         01820002         BL    ICPOK
we can proceed.  Else+
ent length by a gooˇ
it for getmain                   01850002         #GETMAIN RC,LV=(0),LOC
 storage for new space           01860002         LTR   #15,#15
etmain failed                    0ˇ
en disaster                        01880002         ST    #3,ZLCICPL
ore new length                     01890002         LR    #2,#1
ve address of new space            01900002      ˇ
Store it                             01910002         LR    #0,#4
Address of old space                 01920002         LR    #1,#5
Used length of old space             01930002         MVCL  #2,#ˇ
  Copy pointers from old space to new  01940002         LR    #1,#4
  Get address of old space             01950002         LR    #0,#5
  Get old length (assume used EQUALS)  01960002         FREEMAIN RU,LV=(

    Get address of new space             01980002ICPOK    DS    0H
    Now we know there's enough room      01990002         ST    #6,0(#5,
    Store headˇ
      Increment used length                02010002         ST    #5,ZLC
      Store it                             02020002         SPACE 1
                             ˇ
                                             02040002         SPACE 1
                                             02050002         NI    ZLCG
-ZLCGCBLD TURN OFF SPECIAL CONSING FLAG     ˇ
55-ZLCISMC  TURN OFF NON-INTERRUPTIBLE FLAG    02070002         TM    ZL
LCIATTN   If attention interrupt occurred      02080002         BOR   #1
          then go to handle it                 02090002    ˇ
AINTSAVE    RESTORE REGISTERS                    02100002         BR
            RETURN TO CALLER                     02110002         EJECT
                                                 02120002MRELOC   DS
              RELOCATE SUBFUNCTION LIST POINTERS   02130002         SPAC
                                                   02140002         USIN
ER,#1                                              02150002         L
LISTA    ˇ
LHLISTE         POINT TO END OF POINTERS             02170002         CR
3               IF NO LISTS                          02180002         BN
ISTS            THEN DO ˇ
,4                SET UP BXH INCREMENT REGISTER        02200002
,0                ADJUST BXH TERMINATION REGISTER      02210002
,AINTSAVE+0       GET SAVED #12 = FUNCT ION CODE ADDR   02220002ˇÁ
        B     MLOOPF              SKIP FIRST INCREMENT                 0
LOOP    BXH   #5,#2,ENDLISTS      EXIT AT END OF LIST OF POINTERS      0
LOOPF   LR    #7,#6               FUNCTION ADDR MINUS OFFSET OF OBJ    0
ˇ
2         CLI   ##TYPE(#7),##SYMBOL IF THIS IS NOT A SYMBOL
2         BNE   MSTORE              THEN JUST UPDATE POINTER. ELSE...
2         TM   ˇ
002         BZ    MERROR              ELSE ERROR
002         L     #7,##FWWD2(,#7)     LOAD FORWARDING POINTER FROM SYMBO
002         L     #7,0(,#7)   ˇ
20002MSTORE   ST    #7,0(,#5)           STORE TRUE POINTER BACK INTO COD
30002         B     MLOOP               CONTINUE FOR ALL POINTERS
40002         SPACE 1                        ˇ
2350002AINTSAVE DS    3A                  SAVE AREA FOR REGISTERS 12-14
2360002         EJECT
2370002GERROR   DS    0H                                    ˇ
 02380002         #ERR  PREFIX=NO,
X02390002               'ZIL0071 ZILSINT: Not enough memory for inline c
X02400002               object storage.'
   02410002MERROR   DS    0H
   02420002         WTO   'ZIL0070: INDIRECT SYMBOL POINTER NOT FORWARDE
  X02430002               ROUTCDE=11
   0244000ˇ
     02450002         SPACE
     02460002         LTORG
     02470002         SPAˇ
       02480002         #ZHDR ,
       02490002         SPACE
       02500002         END             †
         02510002
L 1.3 SUBROUTINE'                  00010000*****************************
********************************** 00011003*
                                 * 00012003*ˇ
les Stark Draper Laboratory Inc.   * 00013003*                     All r
served.                            * 00014003*
                                   * 00015003**************ˇ
************************************** 00016003*
                                     * 00017003* (ZILSPAD string1 length
r3 truncatep4 wherepad5)             * 00018003*
                                       * 00019003*  string1    - a strin
                                       * 00020003*  length2    - the len
ad to                                  * 00030003*  padchar3   - the pad
racter   ˇ
uncate of string1 longer than length2    * 00050003*  wherepad5  -  1 =
ight                                     * 00060003*               -1 =
eft                     ˇ
 both sides (center)                       * 00080003*
                                           * 00090003* This function is
y the following user-visible functions:ˇ
                                             * 00110003* (defun string-r
                                             * 00120003*        (string
optional (padchar " ") (truncatep nil))      * 0013000ˇ
th padchar truncatep 1))                       * 00140003*
                                               * 00150003* (defun string
d                                              * 00160003*        (stˇ
th &optional (padchar " ") (truncatep nil))      * 00170003*  (zilspad s
ngth padchar truncatep -1))                      * 00180003*
                                                 * 00190003* (defun stri
r   ˇ
ngth &optional (padchar " ") (truncatep nil))      * 00210003*  (zilspad
length padchar truncatep 0))                       * 00220003*
                   ˇ
                                                     * 00240003*
                                                     * 00250003* (defun
ing (size &key (initial-element " ˇ
size initial-element nil 1))                           * 00270003*
                                                       * 00280003*******
*************************************************+
G MINARGS=5,MAXARGS=5,NAME='ZILSPAD'           ˇ
PDS 5*4+12+0 = 32       DEFINE STACK SIZE                    00310003
SAV ,                   SAVE REGISTERS                       00320003*
                                                             0ˇ
rg 1 - must be string (or symbol).                             00340003*
                                                               00350003
LM    #5,#7,0(#11)        Get args 1, 2, and 3                 00360003
  CLI   ##TYPE(#5),##STRING IF ARGUMENT IS A STRING              0037000
  BE    ARG1OK              THEN OK                              0038000
  CLI   ##TYPE(#5),##SYMBOL IF ARGUMENT IS A SYMBOL              0039000
  BNE   ERROˇ
    L     #5,##PNAME(,#5)      TAKE THE PRINT NAME, ELSE ERROR     00410
K   DS    0H                                                       00420
    LR    #15,#5           ˇ
      ST    #5,0(,#11)          Store string back on stack           004
                                                                     004
heck arg 2 - must be fixnum.              ˇ
                                                                       0
        CLI   ##TYPE(#6),##FIXNUM Arg 2 (length) must be a fixnum      0
        BNE   ERROR2              else error             ˇ
3         L     #6,##CDR(,#6)       Get numeric length value
3*
3* Check arg 3 - must be one-character string or character.
003*
003         CLI   ##TYPE(#7),##FIXNUM If arg 3 (padchar) is a fixnum
003         BE    ARG3FIX             then extract character from fixnum
003    ˇ
60003         BNE   ERROR3                length 1, else error
70003         MVC   PADCHAR(1),##VECDAT(#7) Extract pad char from string
80003         B     ARˇ
0590003ARG3FIX  DS    0H
0600003         L     #7,##CDR(,#7)       Get numeric value
0610003         CL    #7,#SFW255     ˇ
 00620003         BH    ERROR3              then error
 00630003         STC   #7,PADCHAR          Store pad character
 00640003ARG3OK   DS    0H                          ˇ
   00650003         XR    #5,#5
   00660003         ICM   #5,7,1(#15)         Get length of arg 1 string
   00670003*                                                       
     00680003ˇÁ
h of arg 1),       00690003* then just return the original string.
                   00700003*                                  #5 = old-l
                   00710003*ˇ
                     00720003         CR    #5,#6               If lengt
lready equal         00730003         BE    RETURN              then jus
 the string          00740003         BL   ˇ
LT new-length, OK      00750003*
                       00760003* If old-length is greater than new-lengt
we need to check arg4  00770003* (the truncatep parameter)ˇ
                         00780003* If arg4 is NIL, then length of new st
old-length, so we can    00790003* just return it.  Otherwise length of
ng is always arg 2.      00800003*
                           00810003         C     #10,12(,#11)        If
s NIL (don't truncate)     00820003         BE    RETURN              th
return the string          00830003USENEWLN DS    0H                  el
ew-lengtˇ
                             00850003* Check length of string to be crea
 negative, error.            00860003* If zero, just return the null str
                       ˇ
                               00880003         LTR   #6,#6
new-length                     00890003         BM    ERROR2
ative, error                   0090000ˇ
ero, return null string          00910003*
                                 00920003* Allocate space for string, us
length.                          00930003*           ˇ
                                   00940003         LR    #2,#6
ngth for ZILVSS = new-length       00950003         XR    #1,#1
TRY CODE 0 = ALLOCATE NEW SPACE    00960003         L     #15,ZLCVSSˇ
GET ADDRESS OF ZILVSS                00970003         LA    #0,32(,#11)
SET CURRENT STACK POINTER FOR GC     00980003         #BASR #14,#15
CALL ZILVSS TO CREATE A STRING       00990003         LTR   #4,#15
IF ˇ
  THEN ERROR                           01010003*
                                       01020003* Preset offset to move o
to new string.    ˇ
                                         01040003         XR    #3,#3
    Set offset of moved data to 0        01050003*
                                 +
old-length, then set offset of ˇ
ring to 0 and bypass padding.                01080003*
                                             01090003         CR    #5,#
        If old-length exceeds new-length     0ˇ
          then process with truncation         01110003*
                                               01120003* Depending on si
sumed-fixnum arg 5, set offset of              01130003* striˇ
w string as follows:                             01140003*   negative -
th minus old-length                              01150003*   zero     -
gth minus old-length) divided by 2               01160003*   positive -
                                                   01170003*
                                                   01180003         L
,#11)         Get arg 5 (assume fixnum)            01190003         L
DR(,#2)    ˇ
2               Test sign                            01210003         BP
IGHT            Positive = padding on right          01220003         BZ
ER              Zero = padˇ
DLEFT             Negative = padding on left           01240003PADLEFT
                  Padding on left, set offset          01250003
,#6               Offset = new-length - oˇ
#3,#5                                                    01270003
MOVEPAD                                                  01280003CENTER
0H                  Padding on left, set offset         ˇ
  #3,#6               Offset = (new-length - old-length)/2 01300003
  #3,#5                                                    01310003
  #3,1                                                     01320003    ˇ
    MOVEPAD                                                  01330003MOV
    0H                                                       01340003*
                                                             01350003* P
tring ˇ
at this is skipped if the offset is zero (when padding         01370003*
t or truncating).                                              01380003*
                     ˇ
  XR    #0,#0               Source address = 0                   0140000
  LA    #14,##VECDAT(,#4)   Destination address = new-string     0141000
  XR    #1,#1               Source lˇ
    ICM   #1,B'1000',PADCHAR  Fill character = pad character       01430
    LR    #15,#3              Destination length = offset          01440
    MVCL  #14,#0              Pad new string with p ad character    014

   01460003TRUNCATE DS    0H                  Truncating, leave offset 0
   01470003MOVEIT   DS    0H
   01480003*ˇ
     01490003* Move string data to new string using above offset.
     01500003*
     01510003         L    ˇ
       01520003         LA    #0,##VECDAT(,#1)    Source address =  old-
ext    01530003         LA    #14,##VECDAT(#3,#4) Dest. address = new-st
ffset  01540003         LR    #1,#5       ˇ
         01550003         ICM   #1,B'1000',PADCHAR  Fill character = pad
er       01560003         LR    #15,#6              Destination length =
gth      01570003         MVCL  #14,#0              Move ˇ
w-string   01580003         LR    #15,#4              Point to new-strin
           01590003         B     RETURN              Return new-string
           01600003         SPACE 1
             01610003RETNULL  DS    0H                  Requested length
             01620003         LA    #15,NULLSTR         Return null stri
             01630003         SPACE 1
       ˇ
               01650003         SPACE 1
               01660003         #ZRET ,                   RESTORE REGIST
RETURN         0167000ˇ
                 01680003NULLSTR  DS    0A                  Align null s
 fullword        01690003         DC    YL1(##STRING),AL3(0),XL4'00'  St
                 01700003         SPAˇ
                   01710003STRLEN1  DC    YL1(##STRING),AL3(1) Header fo
ng of length 1     01720003PADCHAR  DS    XL1                 Pad charac
                   01730003         SPACE 1         ˇ
                     01740003ERROR1   #ERR  'Argument 1 to ZILSPAD not a
- ',0(#11)           01750003ERROR2   #ERR  'Argument 2 to ZILSPAD not a
ative fixnum - ',   X01760003               4(#11)                 ˇ
                       01770003ERROR3   #ERR  'Argument 3 to ZILSPAD not
 pad character - ',   X01780003               8(#11)
                       01790003ERROR4   #ERR  'ZIL4010 ZILSPAD: Not enou
r/ˇ
                         01810003         SPACE 1
                         01820003         LTORG
                 +
                            01840003{
'ZILSPKG - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*******
******************************************************** 00011001*
                                                       * 00012001*ˇ
 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013001*
         All rights reserved.                            * 00014001*
                                                         * 00015001*****
*ˇ
ACE 1                                                        00017001ZIL
BEG MINARGS=1,MAXARGS=1,NAME='ZILSPKG'                       00018001
ACE 1           ˇ
USING ZILSPKG,#15                                              00020001
SPACE 1                                                        00030001
L     #2,0(,#1)                ˇ
  CLI   ##TYPE(#2),##SYMBOL                                      0005000
  BNE   PKERROR                                                  0006000
  L     #15,##PPKG(,#2)                       ˇ
    BR    #14                                                      00080
    SPACE 1                                                        00090
OR  DS    0H                                                 ˇ
      LR    #3,#15                                                   001
      USING ZILSPKG,#3                                               001
      DROP  #15                                                      001
        #ERR  'Argument to ZILSPKG not a symbol - ',(#2)               0
        SPACE 1                                                        0
        END                                                            0

                 00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* This function takes one required argument
                   * 00018002* the compiled code SUBR toˇ
IL printer.          * 00019002* A lexical closure is not acceptable.  T
 lexical closure     * 00020002* the current printer, use the ZIL "SETPR
ion.                 * 00030002*                                       ˇ
                       * 00040002***************************************
************************ 00050002         SPACE 1
                         00060002ZILSPRT  #ZBEG MINARGS=1,MAXARGS=1,NAME
T'    ˇ
CK SIZE USED               00080002         #ZSAV ,                   SA
TERS                       00090002         SPACE 1
                     ˇ
argument                     00110002         CLI   ##TYPE(#3),##SUBR
s not a compiled SUBR        00120002         BNE   ERROR
or                           0013000ˇ
lear insert register           00140002         ICM   #15,7,##CAR+1(#3)
dress of SUBR code             00150002         ST    #15,ZLCCPRT
rrent printer address          00160002         LR ˇ
rn the subr                      00170002         #ZRET ,
ORE REGISTERS AND RETURN         00180002         SPACE 2
                                 00190002ERROR    #ERR  'Argument ˇ
ot a compiled code SUBR - ',(#3)   00200002         SPACE 1
                                   00210002         LTORG
                                   00220002         SPACE 1
 h                                   00230002         END
                                     00240002
TITLE 'ZILSRD - BUILT-IN ZIL 1.3 SUBROUTINE'                   00010000*
************************************************************** 00011001*
                                                             * 00012001*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
s function takes one required argument:                          * 00018
 compiled code SUBR toˇ
 lexical closure is not acceptable.  To make a lexical closure     * 000
he current reader, use the ZIL "SETREAD" function.                 * 000
                                     ˇ
********************************************************************** 0
        SPACE 1                                                        0
ILSRD   #ZBEG MINARGS=1,MAXARGS=1,NAME='ZILSRD'     ˇ
1         #ZPDS 16                  DEFINE STACK SIZE USED
1         #ZSAV ,                   SAVE REGISTERS
1         SPACE 1                                                  ˇ
001         L     #3,0(,#11)          Get the argument
001         CLI   ##TYPE(#3),##SUBR   If arg is not a compiled SUBR
001         BNE   ERROR               then error
00ˇ
40001         ICM   #15,7,##CAR+1(#3)   Get address of SUBR code
50001         ST    #15,ZLCCRDR         Set current reader address
60001         LR ˇ
0170001         #ZRET ,                   RESTORE REGISTERS AND RETURN
0180001         SPACE 2
0190001ERROR    #ERR  'Argument ˇ
 00200001         SPACE 1
 00210001         LTORG
 00220001         SPACE 1                      h
   00230001         END
   00240001
UBROUTINE'                   00010000***********************************
**************************** 00011002*
                           * 00012002*ˇ
ark Draper Laboratory Inc.   * 00013002*                     All rights
.                            * 00014002*
                             * 00015002**************ˇ
******************************** 00016002*
                               * 00017002* ZILSUB TAKES TWO ARGUMENTS. B
 BE NUMERIC ATOMS.             * 00018002*                          ˇ
                                 * 00019002*****************************
********************************** 00020002*
                                 * 00030002* CONVERSION RULES ARE AS FOL
   ˇ
                                   * 00050002* 1. BOTH ARGS FIXED
ORM INTEGER SUBTRACTION.           * 00060002* 2. BOTH ARGS FLOAT
ORM REAL SUBTRACTIˇ
NVERT THE FIXED ARGUMENT TO          * 00080002*
OAT AND PERFORM REAL SUBTRACTION.    * 00090002*
                                 ˇ
THE ARGS IS A BIGNUM, THE SECOND ARG   * 00110002*            IS NEGATED
ADD IS INVOKED TO DO BIGNUM ADD.       * 00120002*
                                       * 0013000ˇ
ROR.                                     * 00140002*
                                         * 00150002*********************
****************************************** 00160002*           ˇ
                                           * 00170002* Note: At present,
calls MINUS and ZILADD to do subtraction   * 00180002*       if one or b
he arguments is a bignum.                  * 00190002*
                                             * 00200002*****************
********************************************** 00210002         SPACE
                                               00220002ZILSUB   #ZBEG MI
MAXARGS=2,NAMˇ
            DEFINE STACK SIZE                    00240002         #ZSAV
            SAVE REGISTERS                       00250002         SPACE
                            ˇ
0(#11)        LOAD ARGUMENTS                       00270002*
                                                   00280002* CHECK TYPE
                                           +
                                         ˇ
TYPE(#6),##FIXNUM IF ARG1 IS NOT FIXED                 00310002
G1NFIX            THEN TRY OTHER TYPE                  00320002
TYPE(#7),##FIXNUM IF ARG2 IS NOT FIXED                 0ˇ
ARG2NFIX            THEN TRY OTHER TYPE                  00340002*
                    FIXED - FIXED = FIXED                00350002
#2,##CDR(,#6)       GET FIXED VALUE 1                    00360002      ˇ
  #2,##CDR(,#7)       SUBTRACT FIXED VALUE 2               00370002
  BIGSTUFF            IF OVERFLOW OCCURRED, DO BIGNUM ADD  00380002
  #0,20(,#11)         PASS CURRENT STACK LOCATION TO CONS  00390002
T FIXEˇ
    RETURN              AND RETURN WITH IT                   00410002
ACE                                                          00420002RET
    0H               ˇ
SPACE                                                          00440002
#ZRET ,                   RESTORE REGISTERS AND RETURN         00450002
SPACE 1                             ˇ
X DS    0H                  ARG 1 IS FIXED, BUT ARG 2 IS NOT     0047000
  CLI   ##TYPE(#7),##BIGNUM                                      0048000
  BE    BIGSTUFF            FIXED - BIG            ˇ
    CLI   ##TYPE(#7),##SFLOAT                                      00500
    BE    FIXSFLO             FIXED - SFLOAT                       00510
    CLI   ##TYPE(#7),##DFLOAT                                     ˇ
      BE    FIXDFLO             FIXED - DFLOAT                       005
      B     ERROR2              FIXED - NONUM = ERROR                005
SFLO  L     #0,##CDR(,#6)       GET FIXED VALUE 1                    005
 ˇ
        LRER  #F2,#F0             GET FLOAT VALUE 1                    0
        B     SUBSFLO1            FIXED - FLOAT = FLOAT                0
IXDFLO  L     #0ˇ
2         #BAS  #14,FIX2FLO         CONVERT FIXED TO FLOAT
2         LDR   #F2,#F0             GET FLOAT VALUE 1
2         B     SUBDFLO1       ˇ
002         SPACE
002ARG1NFIX DS    0H                  ARG1 is not fixed
002         CLI   ##TYPE(#6),##BIGNUM         ˇ
50002         BE    BIGSTUFF
60002         CLI   ##TYPE(#6),##SFLOAT
70002         BE    ARG1SFLO                                 
0680002ˇÁ
             00690002         BE    ARG1DFLO
             00700002         B     ERROR1
             00710002 ˇ
               00720002ARG1SFLO DS    0H                  ARG 1 IS SINGL
               00730002         SPACE
               00740002*-------------ˇ
---------------* 00750002*                      CHECK TYPE OF ARG 2
               * 00760002*----------------------------------------------
---------------* 00770002         CLI   ##TYPE(#7),#ˇ
                   00780002         BE    SSUBSFLO            SFLOAT - S
SFLOAT             00790002         CLI   ##TYPE(#7),##DFLOAT
                   00800002         BE    SSUBDFLO            SFLOAˇ
= DFLOAT             00810002         CLI   ##TYPE(#7),##FIXNUM
                     00820002         BE    SFLOPFIX            SFLOAT -
 SFLOAT              00830002         CLI   ##TYPE(#7),##BIGNUM
  ˇ
                       00850002         B     ERROR2              FLOAT
= ERROR                00860002         SPACE 1
                 ˇ
-----------------------* 00880002*                      FIXNUM TO SINGLE
                       * 00890002*--------------------------------------
-----------------------* 0090000ˇ
 float value 1             00910002         L     #0,##CDR(,#7)       GE
VALUE 2                    00920002         #BAS  #14,FIX2FLO         CO
XED TO FLOAT               00930002         LREˇ
T VALUE 2                    00940002         B     SUBSFLO2
FIXED = FLOAT                00950002         SPACE
                             00960002ARG1DFLO DS    0H        ˇ
IS DOUBLE FLOAT                00970002         SPACE
                               00980002         LD    #F2,8(,#6)
OAT VALUE 1                    00990002*--------------------------------
-------------------------------* 01000002*                      CHECK TY
G 2                            * 01010002*------------------------------
-------------------------------* 01020002         CLI   ##TYPE(#7),##DFL
            ˇ
LOAT - DFLOAT = DFLOAT             01040002         CLI   ##TYPE(#7),##S
                                   01050002         BE    DSUBSFLO
LOAT - SFLOAT = DFLOAT     +
                         ˇ
  DFLOAT - FIXED = DFLOAT              01080002         CLI   ##TYPE(#7)
M                                      01090002         BE    BIGSTUFF
  DFLOAT - BIG                         0ˇ
    DFLOAT - NONUM = ERROR               01110002         SPACE 1
                                         01120002*----------------------
---------------------------------------* 01130002*     ˇ
 TO DOUBLE FLOAT                         * 01140002*--------------------
-----------------------------------------* 01150002DFLOPFIX L     #0,##C
      GET FIXED VALUE 2                    01160002         #BAS  #14,ˇ
        CONVERT FIXED TO FLOAT               01170002         LDR   #F4,
        GET FLOAT VALUE 2                    01180002         B     SUBD
                                             01190002         SPACE
     ˇ
---------------------------------------------* 01210002*
INGLE FLOAT SUBTRACT                         * 01220002*----------------
--------------------ˇ
                                                 01240002         LE
R(,#6)      Get single float value 1             01250002SUBSFLO1 DS
                                   ˇ
CDR(,#7)      Get single float value 2             01270002SUBSFLO2 DS
                                                   01280002         SER
4             SUBTRACT THEM                       ˇ
ZLCWORK         PUT RESULT IN REG FOR ATOM-MAKING    01300002         L
LCWORK                                               01310002         LA
0(,#11)         SET STACK LOCATION FOR CONS          01320002    ˇ
OAT               MAKE A FLONUM                        01330002
TURN              AND RETURN WITH IT                   01340002
                                                       01350002*--------
ˇ
         DOUBLE FLOAT SUBTRACT                         * 01370002*------
-------------------------------------------------------* 01380002DSUBSFL
0H             ˇ
  #F4,#F4                                                  01400002
  #F4,##CDR(,#7)      Get double float value 2             01410002
  SUBDFLO2                    ˇ
    0H                                                       01430002
R   #F2,#F2                                                  01440002
    #F2,##CDR(,#6)      Get double float valu e 1             01450002ˇ
∞
60002         LD    #F4,8(,#7)          Get double float value 2
70002SUBDFLO2 DS    0H
80002 ˇ
1490002         LDR   #F0,#F2
1500002         L     #15,ZLCMDF          Get address of ZILMDF
1510002         #BASRˇ
 01520002         B     RETURN              AND RETURN WITH IT
 01530002         SPACE 1
 01540002BIGSTUFF DS    0H          ˇ
   01550002         SPACE
   01560002         ST    #7,20(,#11)         PASS ARG 2 TO MINUS
   01570002         L     #15,@MINUS          GET Aˇ
     01580002         LA    #1,20(,#11)         POINT TO ARGS ON STACK
     01590002         #BASR #14,#15             CALL MINUS TO NEGATE ARG
     01600002         ST    #15,4(,#11)         STORE RESULT IN ARˇ
       01610002         LR    #1,#11              RELOAD STACK POINTER
       01620002         L     #15,@ZILADD         GET ADDRESS OF ZILADD
       01630002         LM    #11,#12,8(#1)       RELOAD REGS AS IF RETU
 ˇ
         01650002         BR    #15                 BRANCH TO ZILADD TO
M ADD    01660002         EJECT
         0167000ˇ
ROUTINE    01680002         EJECT
           01690002ZILSUBRS DS    0A
           01700002@MINUS   DC ˇ
             01710002         DC    CL8'MINUS'
             01720002@ZILADD  DC    V(ZILADD)           ADDRESS OF SUBRO
             01730002         DC    CL8'ZILADDˇ
               01740002ZILSUBRE EQU   *
               01750002         EJECT
               01760002ERROR1   #ERR  'Argument 1 to subtractˇ
,0(#11)          01770002ERROR2   #ERR  'Argument 2 to subtract not a nu
,4(#11)          01780002         SPACE 1
                 01790002         LTORG
                   01800002         END
                   01810002
IL 1.3 SUBROUTINE VECTOR MODULE'             00010000*******************
******************************************** 00011003*
                                           * 00012003*ˇ
9 The Charles Stark Draper Laboratory Inc.   * 00013003*
 rights reserved.                            * 00014003*
                                             * 00015003**************ˇ
************************************************ 00016003*
                                               * 00017003* THIS MODULE I
ITED WITH THE SUBROUTINES INDICATED HEREIN BY  * 00018003* V-CON'S, WHIC
E SUˇ
ZATION TIME AND WHOSE ADDRESSES ARE TO BE PLACED * 00020003* IN THE COMM
  ROUTINES WHICH REQUIRE THESE SUBROUTINES WILL  * 00030003* CALL THEM B
VING THEIR ADDRESSEˇ
DITED WITH THE LOAD MODULES.                       * 00050003* THE REASO
LACING MODULES IN HERE VARY, BUT THEY INCLUDE      * 00060003* ESTABLISH
DARD (AND POSSIBLY VARYING OVER TIˇ
QUIRE FULL-FLEDGED MODULES TO BE CODED, OR TO        * 00080003* PROVIDE
ED INTERFACES TO COMMONLY INVOKED FUNCTIONS.  THE    * 00090003* INTERPR
LUATOR SUPPORT CODE ALSO WILL BENEFIT FROM THESE.ˇ
                                                       * 00110003* THIS
S NOT EXECUTABLE, ALTHOUGH ITS EXTERNAL ROUTINES ARE.  * 00120003*
                                                       * 0013000ˇ
********************************************************** 00140003*
                                                         * 00150003* Cha
vity:                                                    * 00160003*

- Added ZILVALS.  Reassembly required.  See #ZSUB, #ZCOM.  * 00180003*
                                                           * 00190003***
**************ˇ
CSECT                                                          00210003
DC    A(ZSASUBS)          ADDRESS OF SUBROUTINE POINTERS       00220003
#ZSUB ,                   DEFh INE EXTERNAL SUBROUTINE VCONS     0023000
  END                                                            0024000

           00010001*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002*
             * 00017002* THIS MODULE IS INVOKED VIA LINK FROM THE MAINLI
E ZILMAIN    * 00018002* WHENEVER A COMPILED LISP ˇ
S THE STORAGE  * 00019002* ALLOCATED BY ZILINIT, CLOSES ALL RELEVANT FIL
HANDLES ANY    * 00020002* OTHER CLEANUP FUNCTIONS THAT MAY BE REQUIRED.
               * 00030002*                                       ˇ
                 * 00040002*********************************************
****************** 00050002         GBLB  &ZILXA
                   00060002         #ZSYS
ˇ
                     00080002ZILTERM  CSECT
                     00090002         AIF   (NOT &ZILXA).NOMODES
               ˇ
                       00110002ZILTERM  AMODE 31
                       00120002.NOMODES ANOP
                       0013000ˇ
IME                      00140003         LR    #12,#15             SET
REGISTER                 00150002         L     #1,8(,#13)          CHAI
MON AREA                 00160002         ST ˇ
                           00170002         LR    #13,#1
                           00180002         USING ZILTERM,#12
                           00190002         USING ZLCOMMON,#ˇ
                             00200002         USING ZLFILBLK,#7
                             00210002         SPACE 1
                             00220002         OI    ZLCEFLGS,ZLCETERM
TE TERMINATION IN PROGRESS     00230002*
                               00240002* CANCEL ESTAE AND/OR STAX ENVIRO
F ANY.                         00250002* (CAN'T CANCEL ESTAE FROM THIS R
N'T EVEN Tˇ
                                 00270002*        TM    ZLCEFLGS,ZLCESTA
                                 00280002*        BZ    NOESTAE
                         +
NCEL ABEND HANDLER     ˇ
                                     00310002         TM    ZLCEFLGS,ZLC
                                     00320002         BZ    NOSTAX
                                     0ˇ
  CANCEL ATTENTION HANDLER             00340002NOSTAX   DS    0H
                                       00350002*
                                       00360002* FREEˇ
.                                        00370002*
                                         00380002         ICM   #1,15,ZL
    IF FORTRAN INTERFACE ROUTINE PRESENT 00390002         BZ    NOFTˇ
      THEN                                 00400002         ICM   #15,15
                                           00410002         BZ    NOFTCB
                                           00420002         XR    #1,#1
   ˇ
         CALL ZILFINT TO CLEAN UP INTERFACE  00440002NOFTCB   DS    0H
                                             00450002*
                  ˇ
Y.                                             00470002*
                                               00480002         ICM   #1
CBVA                             ˇ
                                                 00500002         L
BVL                                              00510002         FREEMA
=(0),A=(1)                                      ˇ
                                                   00530002*
                                                   00540002* FREE "MASTE
" OF INLINE COMPILED CODE POINTERS IF ANY          00550002*   ˇ
                                                     00560002         IC
5,ZLCICPA                                            00570002         BZ
ICPA                                                 00580002         L
,ZLCICPL                                               00590002
 RU,LV=(0),A=(1)                                       00600002NOFRICPA
                                                       00610002*
             ˇ
WORK AREA IF ANY.                                        00630002*
                                                         00640002
#1,15,ZLCDWA                ˇ
  NOFRDWA                                                  00660002
  #0,ZLCDWALN                                              00670002
MAIN R,LV=(0),A=(1)                                         00680002ˇÁ

002*
002* FREE PRINC/REFORMAT WORK AREA IF ANY.
002*ˇ
20002         ICM   #1,15,ZLCTWA
30002         BZ    NOFRTWA
40002         L    ˇ
0750002         FREEMAIN R,LV=(0),A=(1)
0760002NOFRTWA  DS    0H
0770002*                          ˇ
 00780002* FREE ZIL WORK AREA IF ANY.
 00790002*
 00800002         ICM   #1,15,ZLCWA              ˇ
   00810002         BZ    NOFRWA
   00820002         L     #0,ZLCWALEN
   00830002         FREEMAIN R,LV=(0),A=(1)                     ˇ
     00840002NOFRWA   DS    0H
     00850002*
     00860002* DELETE READ TABLE(S) IF ANY.

       00880002         ICM   #1,15,ZLCRDTBL
       00890002         BZ    NOFRDTBL
       0090000ˇ
         00910002         FREEMAIN RU,LV=(0),A=(1)
         00920002NOFRDTBL DS    0H
         00930002*           ˇ
           00940002* FREE TERMINAL OUTPUT TRANSLATE TABLE IF ANY.
           00950002*
           00960002         ICM   #1,15,ZLCTˇ
             00970002         BZ    NOFREETT
             00980002         LA    #0,256
             00990002         FREEMAIN RU,LV=(0),A=(1)     ˇ
               01000002NOFREETT DS    0H
               01010002*
               01020002* CLOSE DRIBBLE FILE IF ALLOCATED.
                 01030002*
                 01040002         ICM   #4,15,ZLCDRIBL
                 01050002         BZ    NODRIB
         +
       ˇ
                     01080002         ST    #4,CLOSEL
                     01090002         MVI   CLOSEL,X'80'
                     0ˇ
                       01110002*---------------------------------SWITCH
RENT AMODE TO AMODE 24 01120002         LA    #1,DRIB24           ADDRES
S CODE                 01130002      ˇ
SS                       01140002         BSM   #2,#1
                         01150002DRIB24   DS    0H
                         01160002*------------------ˇ
S NOW 24                   01170002.SKIP1   ANOP
                           01180002         LA    #1,CLOSEL
                           01190002         CLOSE MF=(E,(1))       ˇ
                             01200002         AIF   (NOT &ZILXA).SKIP2
                             01210002*---------------------------------S
OM AMODE 24 TO CURRENT AMODE 01220002         BSM   0,#2
  ˇ
                               01240002*--------------------------------
DE IS NOW SAME AS ON ENTRY     01250002.SKIP2   ANOP
                 ˇ
ADDRESS OF THE DRIBBLE DCB       01270002         LA    #0,96
LENGTH OF THE DRIBBLE DCB        01280002         FREEMAIN R,LV=(0),A=(1
 THE DCB                        ˇ
                                   01300002*
                                   01310002* CLOSE ALL OPEN FILES.
                                   01320002*   ˇ
                                     01330002         L     #5,ZLCSTDIN
                                     01340002         L     #6,ZLCSTDOU
                                     01350002*                ˇ
                                       01360002* CLOSE ALL OPEN INPUT FI
                                       01370002*
                                       01380002CLOSEIN  DS    0H
                                         01390002         LR    #7,#5
                                         01400002CINLOOP  DS    0H
                                         01410002         LTR   #7,#7
            ˇ
                                           01430002         TM    ZLFFLA
RM                                         01440002         BO    NOCLOS
                                            01450002ˇÁ
  ZLFFLAG2,ZLFOPEN                                         01460002
  NOCLOSEI                                                 01470002
  #1,ZLFDCB                                                01480002 ˇ
    X'30'(#1),X'10'                                          01490002
    NOCLOSEI                                                 01500002
    #1,CLOSEL                                                01510002
I  ˇ
AIF   (NOT &ZILXA).SKIP3                                       01530002*
-------------------------SWITCH FROM CURRENT AMODE TO AMODE 24 01540002
LA    #1,CLOSI24  ˇ
  LA    #2,CLOSI24E         RETURN ADDRESS                       0156000
  BSM   #2,#1                                                    0157000
  DS    0H                       ˇ
-----------------------------THE AMODE IS NOW 24                   01590
3   ANOP                                                           01600
    LA    #1,CLOSEL                             ˇ
      CLOSE MF=(E,(1))                                               016
                                                                     016
OR LIBRARY FILE, INSTEAD OF FREEPOOL FREE THE READ BUFFER.     ˇ
 THAT IS, WHEN WE HAVE SUPPORT FOR LIBRARY FILES.                      0
                                                                       0
        LA    #1,ZLFDCB                                                0
2         FREEPOOL (1)
2         AIF   (NOT &ZILXA).SKIP4
2*---------------------------------SWITCH FROM AMODE 24 TO CURRENT AMODE
2         BSMˇ
002CLOSI24E DS    0H
002*---------------------------------THE AMODE IS NOW SAME AS ON ENTRY
002.SKIP4   ANOP            ˇ
40002NOCLOSEI DS    0H
50002         LR    #1,#7
60002         L     #7,ZLFCHAIN            ˇ
1770002         C     #1,ZLCIFTRM         DON'T FREE IF IT'S THE TERM FI
1780002         BE    CINLOOP
1790002         LH    #0,ZLCFBLEN         FREE THE FILE BLˇ
 01800002         FREEMAIN R,LV=(0),A=(1)
 01810002         B     CINLOOP
 01820002*
   01830002* CLOSE ALL OPEN OUTPUT FILES.                              ˇ
     01840002*
     01850002CLOSEOUT DS    0H
     01860002         LR    #7,#6
     0ˇ
       01880002         LTR   #7,#7
       01890002         BZ    FINISHED
       01900002      ˇ
         01910002         BO    NOCLOSEO
         01920002         TM    ZLFFLAG2,ZLFOPEN
         01930002         BZ    NOCLˇ
           01940002         LA    #1,ZLFDCB
           01950002         TM    X'30'(#1),X'10'
           01960002         BZ    NOCLOSEO         ˇ
             01970002         ST    #1,CLOSEL
             01980002         MVI   CLOSEL,X'80'
             01990002*                                            ˇ
               02000002* IF THERE IS ANY DATA PRINTED TO THE CURRENT LIN
AS NOT BEEN    02010002* SENT TO THE DATA SET BY TERPRI, WRITE OUT THE L
               02020002* OTHERWISE BUMP BACK THE DCB POINTER, A LA COBOL
Tˇ
                 02040002*
                 02050002* NOTE: THIS DOESN'T WORK FOR RECFM=V FILES - A
I HAVEN'T       ˇ
T RECORD           02070002* (HOPEFULLY A NULL RECORD) GET WRITTEN OUT I
ASE.               02080002*
                   02090002    ˇ
D OUTPUT DATA        02100002         BO    NOUNPUT              AND
                     02110002         TM    ZLFFLAG2,ZLFRECV      THIS I
M=F FILE             02120002         BO    AFˇ
                       02130002         L     #1,ZLFDCB+76          TAKE
 RECORD POINTER        02140002         SH    #1,ZLFDCB+82          SUBT
 LRECL                 02150002         ST    #1,ZLFDCB+76   ˇ
ENT RECORD POINTER       02160002         B     AFTUNPUT             ELS
                         02170002NOUNPUT  DS    0H                  THER
ROCESSED OUTPUT DATA     02180002         TM    ZLFFLAG2,ZLFRECV    IF T
 A RECFM=V FILE            02190002         BZ    AFTUNPUT            TH
                           02200002         L     #1,ZLFCARD           G
SS OF START OF RECORD      02210002         SH    #1,=H'4'             B
 TO RDW                     02220002ˇÁ
       GET CURRENT CHARACTER POINTER       02230002         LA    #2,4-1
       ADJUST BY 1, ADD 4 TO INCLUDE RDW   02240002         SLL   #2,16
       SHIFT LENGTH INTO LEFT HALF         02250002 ˇ
         STORE THE RDW                       02260002AFTUNPUT DS    0H
                                             02270002         AIF   (NOT
.SKIP5                                       02280002*-------------ˇ
---------SWITCH FROM CURRENT AMODE TO AMODE 24 02290002         LA    #1
          ADDRESS OF THIS CODE                 02300002         LA    #2
E         RETURN ADDRESS                       02310002         BSM   #2
  ˇ
                                                 02330002*--------------
-----------THE AMODE IS NOW 24                   02340002.SKIP5   ANOP
                 ˇ
SEL                                                02360002         CLOS
(1))                                               02370002*
                                ˇ
 INSTEAD OF FREEPOOL FREE THE READ BUFFER.           02390002* THAT IS,
HAVE SUPPORT FOR LIBRARY FILES.                      02400002*
                                               ˇ
,ZLFDCB                                                02420002
 (1)                                                   02430002
OT &ZILXA).SKIP6                                       0244000ˇ
-------------------SWITCH FROM AMODE 24 TO CURRENT AMODE 02450002
0,#2                                                     02460002CLOSO24
0H                                                       02470002*------
---------------------THE AMODE IS NOW SAME AS ON ENTRY     02480002.SKIP
                                                           02490002NOCLO
  0H                                                       02500002
  #1,#7     ˇ
    #7,ZLFCHAIN                                              02520002
    #1,ZLCOFTRM         DON'T FREE IF IT'S THE TERM FILBLK   02530002
    COUTLOOP               ˇ
LH    #0,ZLCFBLEN                                              02550002
FREEMAIN R,LV=(0),A=(1)                                        02560002
B     COUTLOOP                            ˇ
D DS    0H                                                       0258000
                                                                 0259000
ERE'S "REAL" TERMINAL INPUT OR OUTPUT FILE BLOCK(S),     +
N FREE THEM NOW.  WE HAVE TO DO IT HERE BECAUSE MAYBE Aˇ
ERMINAL FILE WAS EXPLICITLY CLOSED, LEAVING THIS STRANDED.           026
                                                                     026
      ICM   #1,15,ZLCIFTRM                                           0ˇ
        BZ    NOFREEIF                                                 0
        LH    #0,ZLCFBLEN                                              0
        FREEMAIN R,LV=(0),A=(1)                                        0
OFREEˇ
2         ICM   #1,15,ZLCOFTRM
2         BZ    NOFREEOF
2         LH    #0,Zˇ
002         FREEMAIN R,LV=(0),A=(1)
002NOFREEOF DS    0H
002*                               ˇ
40002* DELETE LOADED MODULES.
50002*
60002         DELETE EP=ZILSUBS         DELETE SUBˇ
2770002*
2780002* NOW WE ARE REALLY FINISHED.
2790002*                                                         ˇ
 02800002         L     #1,ZLC31ADR         GET ADDRESS OF 31-BIT AREA
 02810002         L     #0,ZLC31SIZ         GET LENGTH OF 31-BIT AREA
 02820002         FREEMAIN RU,LV=(0),A=(1)  FREE IT UP
ˇ
   02840002         L     #1,ZLC24ADR         FREE ALL REMAINING 24-BIT
   02850002         L     #0,ZLC24SIZ
   02860002    ˇ
     02870002         FREEMAIN RU,LV=(0),A=(1)
     02880002         SPACE 1
     02890002         LM    #1ˇ
       02900002         XR    #15,#15
       02910002         BR    #14                 RETURN TO MAIN LINE CO
       02920002         SPACE                ˇ
         02930002CLOSEL   CLOSE (*-*),MF=L
         02940002         SPACE
         02950002         LTORG                             ˇ
           02960002         SPACE
           02970002         #ZCOM ,                   MAP THE COMMON ARE
           02980002         END
             02990002{
-IN ZIL 1.3 SUBROUTINE'                  00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00018002* THIS MODULE PROCE
PRI REQUESTS, I.E. IT FORCES OUTPUT.       * 00019002*
ˇ
                                             * 00030002*
                                             * 00040002*  #7 = FILE POIN
               ˇ
                                               * 00060002* THIS ROUTINE
 REGISTERS 14,15,0,1,2,3.                      * 00070002*
                              ˇ
 7 (OF COURSE) ARE UNCHANGED                     * 00090002* (DON'T WORR
T SAVES ALL THE REGISTERS).                      * 00100002*
                                             ˇ
**************************************************** 00120002         GB
XA                                                   00130002         #Z
                                                     0014000ˇ
                                                       00150002ZILTERP
ME='ZILTERP'                                           00160002
                                                       00170002
#12,SAVE12          SAVE CALLER'S BASE REGISTER          00180002
#3,#14              SAVE CALLER'S RETURN REGISTER        00190002
#12,#15             SET UP OWR BASE REGISTER             00200002
ZILTERP,#1ˇ
  #15                                                      00220002
G ZLFILBLK,#7         ASSUME #7 CONTAINS FILE POINTER      00230002
E 1                      ˇ
    ZLFFLAG,ZLFTERM     IF OUTPUT FILE ALLOCATED TO TERMINAL 00250002
    NOTTERM             THEN                                 00260002
    #1,ZLFCARD           GET ADDRESS OF ˇ
LH    #2,ZLFLRECL          GET LENGTH OF OUTPUT AREA           00280002*
SINCE WE'RE GONNA STICK A NEWLINE ONTO THE END OF THIS LINE,   00290002*
REG 2 CONTAINS LENGTH MINUS 1 - SUITABLE FOR EXECUTE   +
  L     #14,ZLCTRMTR         GET TERMINAL OUTPUT TRANˇ
    EX    #2,TRANS             TRANSLATE THE LINE                  00320
    LA    #14,0(#2,#1)         POINT TO CHARACTER FOLLOWING OUTPUT 00330
    MVI   0(#14),X'15'         MOVE IN A NEWLINE CHARACTER         0ˇ
      LR    #15,#14              POINT TO CHAR FOLLOWING LAST CHAR   003
      BCTR  #15,0                POINT TO LAST CHARACTER             003
      CLI   0(#15),C' '          IF LAST CHARACTER IS NOT A BLANK    003
   ˇ
        BCTR  #15,0                POINT TO LAST CHARACTER BUT 1       0
NLOOP   DS    0H                                                       0
        CR    #15,ˇ
2         BL    BNEND
2         CLI   0(#15),C' '          REPLACE TRAILING BLANKS WITH NULLS
2         BNE   BNEND            ˇ
002         MVI   1(#15),X'00'           LEFT FOLLOWING LAST NONBLANK
002         BCT   #15,BNLOOP
002BNEND    DS    0H                            ˇ
70002         LA    #0,1(,#2)            SET LENGTH INCLUDING NEWLINE
80002         #TPUT *,(1),(0),ASIS       DO TPUT
90002         B     AFTOUT                                     ˇ
0500002         SPACE 1
0510002TRANS    TR    0(*-*,#1),0(#14)    TRANSLATE LINE TO DECENT CHARA
0520002         SPACE 1
 00530002NOTTERM  DS    0H                  ELSE
 00540002         TM    ZLFFLAG2,ZLFRECV    IF THIS IS A RECFM=V FILE,
 00550002         BZ    NOTVB               THEN...
 00560002    ˇ
   00570002         SH    #1,=H'4'             BUMP BACK TO RDW
   00580002         L     #2,ZLFCHAR           GET CURRENT CHARACTER POI
   00590002         LA    #2ˇ
DW   00600002         TM    ZLFDCB+36,X'04'      IF RECFM = V.A
     00610002         BZ    NOTTRCVA             THEN...
     00620002         LA    #2,1(,#2)      ˇ
R      00630002         BCTR  #1,0                  BUMP BACK FOR PRINT
CHAR   00640002NOTTRCVA DS    0H
       00650002         SLL   #2,16                SHIFT Lˇ
         00660002         ST    #2,0(,#1)            STORE THE RDW
         00670002NOTVB    DS    0H
         00680002         AIF   (NOT &ZILXA).SKIP1
           00690002ˇÁ
URRENT AMODE TO AMODE 24 00700002         LA    #1,CODE24           ADDR
HIS CODE                 00710002         LA    #2,CODE24E          RETU
SS                       00720002 ˇ
                           00730002CODE24   DS    0H
                           00740002*---------------------------------THE
S NOW 24                   00750002.SKIP1   ANOP ˇ
                             00760002         ST    #9,ZLCISV09
 REGS                        00770002         OI    ZLCIFLGS,ZLCISYS
 NON-ZIL-CODE RUNNING        00780002         LA    #1,ZLFDCB   ˇ
TO DCB                         00790002         PUT   (1)
 LOCATE                        00800002         NI    ZLCIFLGS,255-ZLCIS
ATE ZIL CODE RUNNING AGAIN     00810002         AIF   (NOT &ZILXA).SKIP2

H FROM AMODE 24 TO CURRENT AMODE 00830002         BSM   0,#2
                                 00840002CODE24E  DS    0H
              ˇ
 AMODE IS NOW SAME AS ON ENTRY     00860002.SKIP2   ANOP
                                   00870002         TM    ZLCIFLGS,ZLCIA
F ATTENTION INTERRUPT OCCURREˇ
 THEN GO TO HANDLE IT                00890002         LH    #0,ZLFDCB+82
GET DCB LRECL                        00900002         TM    ZLFFLAG2,ZLF
IF THIS IS A RECFM=V FILE            0091000ˇ
  THEN...                              00920002         TM    ZLFDCB+36,
   IF RECFM = V.A                      00930002         BZ    NOTRECVA
   THEN...                             00940002         MVCˇ
      SET THIS RECORD'S RDW              00950002         LA    #1,5(,#1
      BUMP PAST RDW                      00960002         SH    #0,=H'5'
     ADJUST LENGTH OF ACTUAL RECORD TEXT 00970002         B     NOTRECFA
                                           00980002NOTRECVA DS    0H
      ELSE RECFM = V(B), NO A              00990002         MVC   0(4,#1
W       SET THIS RECORD'S RDW              01000002         LA    #1,4(,
        Bˇ
         ADJUST LENGTH OF ACTUAL RECORD TEXT 01020002         B     NOTR
                                             01030002NOTRECFV DS    0H
        ELSE            ˇ
X'04'     IF RECFM = F.A                       01050002         BZ    NO
          THEN...                              01060002         MVI   0(
           INITIALIZE PRINT CONTROL CHA+
)            BUMP POINTER PAST CONTROˇ
               SUBTRACT 1 FOR PRINT CONTROL CHAR   01090002NOTRECFA DS
                                                   01100002         ST
CARD          STORE CURRENT RECORD ADDRESS         0ˇ
LFLRECL         STORE RECORD LENGTH                  01120002         AL
0               ADDRESS + LENGTH GIVES...            01130002         ST
LFEND           NEW END-OF-RECORD POSITION           01140002AFTOUTˇ
                                                       01150002
,1                SET CHARACTER POSITION               01160002
,ZLFCHAR          TO ONE                               01170002
FFˇ
#15,X'40'           SOURCE LENGTH = 0                    01190002
#15,24              FILL = BLANK                         01200002
#14,#14          ˇ
  #1,ZLFLRECL         LENGTH = LENGTH OF OUTPUT AREA       01220002
  #0,ZLFCARD          TARGET = OUTPUT AREA                 01230002
  #0,#14              CLEAR OUTPˇ
ACE 1                                                        01250002
    #12,SAVE12          RELOAD CALLER'S BASE REGISTER        01260002
    #3                  RETURN TO CALLER       ˇ
SPACE 1                                                        01280002S
DS    A                                                        01290002N
DC    Y(4,0)                                                  ˇ
A DC    Y(5,0),C' '                                              0131000
  SPACE 1                                                        0132000
  LTORG                                                          0133000
    END                                                            01340

               00010000*************************************************
************** 00011009*
             * 00012009*ˇ
oratory Inc.   * 00013009*                     All rights reserved.
               * 00014009*
               * 00015009**************ˇ
****************** 00016009*
                 * 00017009* THIS ROUTINE PROCESSES THE "THROW" FUNCTION
                 * 00018009*                          ˇ
                   * 00019009* IT TAKES TWO ARGUMENTS IN REGISTERS AS FO
                   * 00020009*
                   * 00030009* REGISTER 1 CONTAINS ARGUMENT 1, THE TAˇ
                     * 00040009* REGISTER 2 CONTAINS ARGUMENT 2, THE RES
                     * 00050009*
                     * 00060009* THIS ROUTINE SEARCHES THROUGH THE ACTIV
FRAMˇ
 IT DOES, IT SCANS     * 00080009* AGAIN THROUGH THE CHAIN OF CATCH FRAM
NG FOR UNWIND-PROTECT  * 00090009* FRAMES TO PROCESS; FOR EACH ONE IT FI
INVOKES THE CLEANUPˇ
T TO THE STATE IT WAS IN * 00110009* AT THE LEXICAL TIME OF THE CLEANUP
THIS SCAN TERMINATES     * 00120009* AT THE CATCH FRAME FOUND ABOVE (TO
 ARE THROWING), AT WHICH * 0013000ˇ
IS EFFECTED.  IT RESTORES  * 00140009* THE ENVIRONMENT FROM THE CATCH FR
CES THE RESULT ARGUMENT IN * 00150009* REGISTER 15, AND RETURNS TO THE A
ROM THE CATCH FRAME WHERE  * 00160009* THE CATCH ˇ
 BE RETURNED AND THE CATCH   * 00170009* FRAME TO BE DEACTIVATED.
                             * 00180009*
                             * 00190009* IF NO CATCH FRAME IS FOˇ
HE TAG IS NIL THE PROGRAM IS   * 00200009* ABNORMALLY TERMINATED, OTHERW
"ZILERR" FUNCTION IS INVOKED   * 00210009* TO DISPLAY AN ERROR MESSAGE A
 A THROW TO A TAG OF NIL.      * 00220009*

ISTERS NEED NOT BE SAVED.        * 00240009* REGISTER 15 IS USED AS THE
ISTER AND REGISTER 14 IS         * 00250009* IRRELEVANT SINCE CONTROL WI
 BE RETURNED Nˇ
                                   * 00270009* THE STRUCTURE OF THE CATC
IS AS FOLLOWS (NOTE THAT THE       * 00280009* COMPILER GENERATES THIS S
, SO IT MAY NOT BE CHANGED): +
                           ˇ
US CATCH FRAME (X'00000000' IF NONE)   * 00310009* +4  ... SAVED REGISTE
ACK POINTER FROM INVOKER OF CATCH)     * 00320009* +8  ... SAVED REGISTE
SE REGISTER FROM INVOKER OF CATCH)     * 0ˇ
BRANCH TO END OF CATCH CODE)             * 00340009* +16 ... SAVED SPECI
 (VARIABLE BINDING ENVIRONMENT)          * 00350009* +20 ... SAVED FLUID
VARIABLE BINDING ENVIRONMENT)            * 00360009* +24 ˇ
AG (X'00000000' FOR UNWIND-PROTECT FRAME)  * 00370009*
                                           * 00380009* ...PLUS THE FOLLO
ESENT ONLY IN UNWIND-PROTECT FRAMES:       * 00390009*
                                             * 00400009* +28 ... ADDRESS
CLEANUP FORMS CODE TO INVOKE                 * 00410009*         (DURING
 THIS CONTAINS THE TAG BEING THROWN TO)      * 00420009* +32 ... THE RET
E STOREˇ
D, THIS CONTAINS THE RETURN VALUE FROM THROW)  * 00440009*
                                               * 00450009* DURING PROCES
UNWIND-PROTECT CLEANUPˇ
ONE ESTABLISHED PREVIOUSLY TO THE UNWIND-PROTECT * 00470009* FRAME; THE
DEACTIVATE THE UNWIND-PROTECT FRAME AND TO       * 00480009* MAKE THE PR
RAME THE CURRENT CATCH FRAME IS AT THˇ
RMS CODE GENERATED BY THE COMPILER.                * 00500009* UPON RETU
THE CLEANUP FORMS, REGISTER 14 POINTS TO THE FRAME * 00510009* (WHICH HA
EN LEXICALLY POPPED FROM THE STACK, DESPITE BEING  *ˇ
HE ACTIVE CHAIN).                                    * 00530009*
                                                     * 00540009* IF THRO
TAG NIL, WHICH MEANS THAT AN ERROR IS                * 00550009* BEˇ
ED, IT DOES A BACK TRACE OF THE STACK IF DEBUG MODE    * 00560009* IS AC
                                                       * 00570009*
                                                       * 00580009*******
**ˇ
  &ZILXA                                                   00600009
S                                                          00610009
T                ˇ
BEG NAME='ZILTHROW'                                          00630009
ACE 1                                                        00640009*
                                ˇ
F ALL, RESET THE PROGRAM MASK IN CASE SOME FORTRAN ROUTINE     00660009*
 AROUND WITH IT                                                00670009*
                                                                0068000
∆
0690009         ICM   #14,8,ZLCPMASK      GET INITIAL PROGRAM MASK
0700009         SPM   #14                 SET PROGRAM MASK BACK TO NORMA
0710009*ˇ
 00720009* TURN OFF MISCELLANEOUS ZIL BITS THAT MAY HAVE BEEN LEFT ON SO
 00730009* DON'T END UP IN A WEIRD STATE
 00740009*             ˇ
   00750009         NI    ZLCGCFLG,255-ZLCGCBLD  TURN OFF SPECIAL-GC-CAL
   00760009         NI    ZLCPFLGS,255-ZLCPRINT  TURN OFF ZILPRIN-IN-PRO
G  00770009         NI    ZLCDFLGS,255ˇ
     00780009         NI    ZLCERFLG,255-ZLCERTRC  TURN OFF STACK TRACE
     00790009         NI    ZLCERFLG,255-ZLCERCFA  TURN OFF CONDITIONAL
ESS  00800009         SPACE 1                        ˇ
       00810009         L     #14,ZLCCATCH        GET POINTER TO CURRENT
RAME   00820009LOOP     DS    0H
       00830009         LTR   #14,#14             IF NO MORE CATCH Fˇ
ACTIVE   00840009         BZ    NOCATCH             THEN PROCESS THROW E
         00850009         USING CATCH,#14
         00860009         C     #1,CATCHTAG         IF TAG MATCHES
   ˇ
 PROCESS   00880009         L     #14,CATCHLNK        ELSE GET PREVIOUS
AME        00890009         B     LOOP                AND CONTINUE.
           0090000ˇ
             00910009GOTCATCH DS    0H                  WE HAVE THE CATC
..           00920009         SPACE 1
             00930009         ST ˇ
               00940009         LR    #12,#15             GET A BETTER B
STER           00950009         USING ZILTHROW,#12
               00960009         DROP  #15       ˇ
                 00970009         SPACE 1
                 00980009***********************************************
**************** 00990009*                                     ˇ
                 * 01000009* OK, TRY BACK TRACE BEFORE THROWING TO SIGNA
                 * 01010009*
                 * 01020009* Remember that the only registers that can b
tained across      * 01030009* a call to PRINT/TERPRI are #5.
                   * 01040009*
                   * 01050009* #4 must point to the object to be printed
             +
tput       ˇ
                       * 01080009***************************************
************************ 01090009         SPACE 1
                         0ˇ
ag is not NIL              01110009         BNE   NOTRACE             th
trace                      01120009         SPACE 1
                           01130009      ˇ
 mode is not active          01140009         BZ    NOTRACE
p trace                      01150009         SPACE 1
                             01160009         TM    ZLCEˇ
eady doing a back trace        01170009         BO    NOTRACE
kip trace                      01180009         SPACE 1
                               01190009         OI    ZLCERFLG,ZLCERTRCˇ
cate stack tracing active        01200009         STM   #0,#2,SAVEARGS
 args to THROW                   01210009         L     #7,ZLCSTDOU
STANDARD OUTPUT FILE POINTER     01220009         USING ZLFILBLK,#7
      ˇ
REQUEST NO SLASHIFICATION BE DONE  01240009         LA    #4,TRCMSG1
                                   01250009         L     #15,ZLCPRIN
ll ZILPRIN to print mˇ
                                     01270009         L     #15,ZLCTERP
Call ZILTERP to TERPRI               01280009         #BASR #14,#15
                                    ˇ
                                       01300009*************************
************************************** 01310009*
                                     * 01320009* Trˇ
 pointer.                              * 01330009*
                                       * 01340009***********************
**************************************** 01350009         SPACE 1 ˇ
                                           01360009         L     #0,SAV
      Get reg 0 at entry to ZILTHROW       01370009         TM    ZLCGCF
BLD   If it was set for CONS/GC            01380009         BO    REG0OK
 ˇ
        Else get base reg of who called us   01400009         CLC   0(3,
7F0F0'  Check for valid ZIL code             01410009         BNE   GIVE
        If wrongˇ
                                               01430009         IC    #2
          Get B2D2 of initial branch instr.    01440009         AR    #1
          Point to next executa ble instr.      01450009ˇÁ
CLC   0(2,#1),=X'4100'    Check valid (expected) ZIL code      01460009
BNE   MAYBLEX             If not what is expected, maybe LEXPR 01470009
LH    #2,2(,#1)           Get B2D2 of stack size LA instr.     01480009
  SLA   #2,20               Shift out base reg and               0149000
  SRA   #2,20                isolate the maximum stack size      0150000
  AR    #2,#11              Add stack ptr to get max stack addr  0151000
  CR   ˇ
    BL    BADREG0             then can't use it                    01530
    CR    #0,#2               If reg 0 greater than max stack ptr  01540
    BH    BADREG0     ˇ
      B     REG0OK              Otherwise use reg 0 as top of stack  015
BLEX  DS    0H                  Maybe it's a lexpr...                015
      CLC   0(L'LCODE,#1),LCODE See iˇ
        BNE   GIVEUP              If not, can't verify #0, wrong code  0
        LH    #2,L'LCODE(,#1)     Get B2D2 of stack size LA instr.     0
        SLA   #2,20               Shift out base regˇ
9         SRA   #2,20                isolate the maximum stack size
9         SH    #2,=H'4'            Adjust it
9         AR    #2,#11              Add stack ptr to get max stack ˇ
009         CR    #0,#11              If reg 0 less than current stack p
009         BL    BADREG0             then can't use it
009         CR    #0,#2               If reg 0 greater than max stack pt
00ˇ
80009         BNH   REG0OK              Otherwise use reg 0 as top of st
90009BADREG0  DS    0H
00009         LR ˇ
1710009         B     STKLOOP
1720009REG0OK   DS    0H
1730009         LR    #5,#0     ˇ
 01740009         B     STKLOOP
 01750009         SPACE 1
 01760009LCODE1   DS    0A                     ˇ
   01770009         SPACE 1
   01780009*************************************************************
** 01790009*                                                  ˇ
   * 01800009*  The code that follows is used to compare with LEXPR head
   * 01810009*  See ZCGBEGIN.  If this code is changed in ZCGBEGIN it mu
   * 01820009*  be changed here.
     * 01830009*
       * 01840009*******************************************************
******** 01850009         SPACE 1
         01860009         L     #2,0(,#1)           Get pointer to LEXPR
stack    0ˇ
           01880009         SLA   #2,2                Multiply it by 4 t
ack length 01890009         LA    #0,*-*(#2,#1)       Half of the expect
struction  01900009      ˇ
f            01910009LCODE    EQU   LCODE1,*-LCODE1     Length of this c
             01920009         SPACE 1
             01930009GIVEUP   DS    0H  ˇ
pointer?       01940009         SPACE 1
               01950009         LA    #5,4(,#11)          Get last stack
               01960009         SPACE 1                ˇ
                 01970009STKLOOP  DS    0H                  #5 should be
stack pointer    01980009         C     #5,ZLCPDADR         Loop until w
ttom             01990009         BL    STKEND                        ˇ
                   02000009         ICM   #4,15,0(#5)         Get pointe
ack                02010009         BNP   STKSKIP             If negativ
bly ret addr, skip 02020009         C     #4,ZLCPDADR         If it poin
the sˇ
                     02040009         CR    #4,#8
                     02050009         BL    STKBOUND
                    ˇ
                       02070009         CR    #4,#13              If uns
optional argument      02080009         BE    NOTCODE              or
                       02090009    ˇ
d marker                 02100009         BE    NOTCODE                o
                         02110009         C     #4,ZLCRMNIL
L object                 02120009         BE    NOˇ
it ought to be printed     02130009         TM    0(#4),X'80'         If
oks like a cons            02140009         BO    NOTCODE             th
y be suspicious            02150009         CLC   0(3,#4),=X'47F0ˇ
ooks like code               02160009         BE    CODE
s must be code               02170009         AIF   (&ZILXA).XACARCK
                             02180009         CLI   0(#4),0
ˇ
kip                            02200009         AGO   .NCARCK
                               02210009.XACARCK ANOP
                                02220009ˇÁ
          XA: If higher than any possible CAR  02230009         BL    ST
          then skip                            02240009.NCARCK  ANOP
                                               02250009 ˇ
=F'0'       if CAR looks like zeroes             02260009         BE
            then skip                            02270009         B
            Else print out as LISP object        02280009CODE     DS   ˇ
                                                   02290009         TM
X'80'         If invalid module identifier         02300009         BNO
ME             then...                             02310009         LA
ODE   ˇ
FLGS,255-ZLCPSLSH REQUEST NO SLASHIFICATION BE DONE  02330009         B
RIN              and go print it.                    02340009CODENAME DS
                Else.ˇ
5,#15                                                  02360009
5,4(,#4)          Get length of module identifier      02370009
5,#15             Reduce by length oˇ
STKSKIP             If no name, skip                     02390009
#15,=Y(L'FUNTEXT)   If longer than maximum length we use 02400009
*+8                 then                           ˇ
  #15,L'FUNTEXT        use maximum length                  02420009
  #15,7,FUNLEN        Store length into fake string        02430009
  #15,0               Reduce for execute                   0244000ˇ
    #15,MVCNAME         Move function name to our message    02450009
    #4,FUNSTR           Point to our fake string message     02460009
    ZLCPFLGS,255-ZLCPSLSH REQUEST NO SLASHIFICATION BE DONE  02470009
 ˇ
DS    0H                  Pointer back into stack found...     02490009
LA    #4,BOUNDSTR         Point to boundary string             02500009
NI    ZLCPFLGS,2ˇ
  B     STKPRIN                                                  0252000
  DS    0H                                                       0253000
  OI    ZLCPFLGS,ZLCPSLSH   REQˇ
IN  DS    0H                                                       02550
    L     #15,ZLCPRIN         Call ZILPRIN to print the object     02560
    #BASR #14,#15                             ˇ
      L     #15,ZLCTERP         Call ZILTERP to TERPRI               025
      #BASR #14,#15                                                  025
SKIP  DS    0H                                               +
        SH    #5,=H'4'            Bump down stack          ˇ
9         B     STKLOOP             Continue
9         SPACE 1
9STKEND   DS    0H
009         SPACE 1
009         NI    ZLCPFLGS,255-ZLCPSLSH REQUEST NO SLASHIFICATION BE DON
009         LA    #4,TRCMSG2
009      ˇ
80009         #BASR #14,#15
90009         L     #15,ZLCTERP         Call ZILTERP to TERPRI
00009         #BASR #14,ˇ
2710009         LM    #0,#2,SAVEARGS      Restore args to THROW
2720009         NI    ZLCERFLG,255-ZLCERTRC No more stack tracing
2730009         SPACE 1                ˇ
 02740009NOTRACE  DS    0H                  End tracing
 02750009         SPACE 1
 02760009         LR    #15,#12             BACK TO THˇ
   02770009         USING ZILTHROW,#15
   02780009         DROP  #12
   02790009*                                                         ˇ
     02800009* NOW THAT WE KNOW WE HAVE A CATCH TO THROW TO, SCAN FOR UN
TECT 02810009* FRAMES TO PROCESS CLEANUP FORMS.
     02820009*
    ˇ
E      02840009* FIRST SCAN WAS JUST TO MAKE SURE WE HAD A VALID TAG).
OK     02850009* BECAUSE GUY STEELE, IN CLTL, SAID WE'D PROBABLY HAVE TO
 IN    02860009* A ˇ
         02870009*
         02880009         L     #14,ZLCCATCH        START FROM THE BEGIN
IN       02890009LOOP2    DS    0Hˇ
           02900009         LTR   #14,#14             (THIS CAN'T HAPPEN
           02910009         BZ    CANTBE
           02920009         ICM   #0,15,CATCHTAG ˇ
             02930009         BZ    DOCLEAN             IF ZEROES, IT'S
D-PROTECT    02940009         CR    #0,#1               IF THIS IS THE M
TAG          02950009         BE    DOTHROW             THEN REAˇ
OW NOW         02960009         L     #14,CATCHLNK        ELSE GET PREVI
H FRAME        02970009         B     LOOP2               AND CONTINUE S
               02980009         SPACE 1
                 02990009ˇÁ
E UNWIND-PROTECT CLEANUP FORMS 03000009         SPACE 1
                               03010009         LA    #0,CLEANRET
ERE TO RETURN AFTER CLEANUP    03020009 ˇ
ETURN ADDRESS SLOT OF FRAME      03030009         L     #0,CATCHSAL
SAVED SPECIAL ALIST              03040009         ST    #0,ZLCSALST
CURRENT SPECIAL ALIST THERETO    03050009         L    ˇ
T SAVED FLUID ALIST                03060009         ST    #0,ZLCFALST
T CURRENT FLUID ALIST THERETO      03070009         LM    #11,#12,CATCHS
STORE STACK AND BASE REGS #11,#12  03080009         ST    #15,CATCHS12ˇ
SAVE OUR OWN BASE REG IN FRAME       03090009         DROP  #15
(THIS INVALIDATES OUR BASE REG)      03100009         L     #15,CATCHCLN
GET ADDRESS OF CLEANUP FORMS CODE    03110009         STM   #1,#2,CATCHC
SAVE ˇ
  BRANCH TO CLEANUP FORMS CODE         03130009         SPACE 1
                                       03140009CLEANRET DS    0H
  RETURN HERE AFTER ˇ
    (NOTE: #14 POINTS TO THE UWP FRAME)  03160009         L     #15,CATC
    RESTORE OUR OWN BASE REGISTER        03170009         USING ZILTHROW
    (LETS US HAVE A BASE AGAIN)    ˇ
      RESTORE THROW'S ARGS                 03190009         L     #14,ZL
      LOAD WHAT IS NOW CURRENT CATCH FRAME 03200009         B     LOOP2
      CONTINUE SCAN THROUGH FRAMES         0321000ˇ
                                             03220009DOTHROW  DS    0H
        NOW ACTUALLY THROW TO THE CATCH      03230009*
                                             03240009* TURN OFF Rˇ
ND, BUT LEAVE THE USER CODE SO THAT FUTURE     03250009* FUNCTIONS MAY B
O INTERROGATE IT.                              03260009*
                                               03270009         NI    ZL
ˇ
                                                 03290009* RESTORE THE A
D REGS 11 AND 12, AND                            03300009* GO TO RETURN
WITH RESULT VALˇ
                                                   03320009         L
CHSAL         GET SAVED SPECIAL ALIST              03330009         ST
SALST         RESTORE SPECIAL ˇ
ATCHFAL         GET SAVED FLUID ALIST                03350009         ST
LCFALST         RESTORE FLUID ALIST                  03360009         LM
#12,CATCHS11    RESTORE STACK AND BASE REGIST+
4,CATCHRET        GET RETURN ADDRESS (END Oˇ
#14                                                      03390009
#15,#2              SET RESULT VALUE                     03400009
#14                 GO TO RETURN POINT                   0ˇ
E 1                                                        03420009NOCAT
  0H                  NO CATCH FRAME FOUND...              03430009
  #1,#10              IF THROW TAG IS NIL,                 03440009
    DISASTER            THEN THERE'S NO HOPE FOR RECOVERY.   03450009
    #3,#15                                                   03460009
ING ZILTHROW,#3                                              03470009
OP  #15 ˇ
LR    #2,#1                                                    03490009
#ERR  'ZIL1011 THROW: No catch active for tag - ',(#2),       X03500009
      PREFIX=NO        ˇ
  SPACE 1                                                        0352000
R DS    0H                  THROW TO NIL, NO CATCH ACTIVE        0353000
  SPACE 1                             ˇ
    USING ZILTHROW,#15                                             03550
                                                                   03560
CEL ESTAE AND/OR STAX ENVIRONMENTS IF ANY.           ˇ
                                                                     035
      TM    ZLCEFLGS,ZLCESTAE   IF AN ESTAE WAS ACTIVE               035
      BZ    NOESTAE             THEN                                ˇ
        ESTAE 0                    CANCEL ABEND HANDLER                0
OESTAE  DS    0H                                                       0
        DROP  #15                                                      0
   ˇ
9         USING *,#15
9         TM    ZLCERFLG,ZLCERSET   IF A USER ABEND CODE WAS SET
9         BZ    ABˇ
009         LH    #1,ZLCABEND          GET USER ABEND CODE SET BY ZILERR
009         LTR   #1,#1                BUT MUST BE BETWEEN 1 AND 4095
009         BNP   ABEND000       ˇ
00009         CH    #1,=H'4095'
10009         BNH   ABEND                OTHERWISE
20009ABEND000 XR    #1,#1                SET USEˇ
3730009ABEND    DS    0H
3740009         ABEND (1),DUMP            ABEND WITH RESULT AS USER CODE
3750009         SPACE 1                                        
 03760009ˇÁ
               03770009         EX    0,*                 FORCE 0C3 ABEN
OR SCANNING    03780009         SPACE 1
               03790009 ˇ
                 03800009         DROP  #15
                 03810009MVCNAME  MVC   FUNTEXT(*-*),5(#4)  Executed: Mo
ion name to msg  03820009         SPACEˇ
                   03830009SAVEARGS DS    3A
                   03840009SAVE12   DS    A
                   03850009FUNSTR   DC    YL1(##STRINGˇ
                     03860009FUNLEN   DC    AL3(0)
                     03870009FUNTEXT  DS    CL64
                     03880009NNCODE   DC    YL1(##STRING)            ˇ
                       03890009         DC    AL3(L'NNTEXT)
                       03900009NNTEXT   DC    C'#<NAMELESS ZIL CODE>'
                       03910009BOUNDSTR DC    YL1(##STRING)
    ˇ
                         03930009BOUNDTXT DC    C';-------<STACK BOUNDAR
-'                       03940009TRCMSG1  #SATM 'ZIL1600 BACK TRACE OF P
 STACK FOLLOWS.'   ˇ
                           03960009         SPACE 1
                           03970009         LTORG
                           0398000ˇ
                             03990009CATCH    DSECT ,
S THE CATCH FRAME            04000009         SPACE 1
                             04010009CATCHLNK DS ˇ
DRESS OF PREVIOUS CATCH FRAME  04020009CATCHS11 DS    A
DRESS OF STACK (SAVED #11)     04030009CATCHS12 DS    A
SE REGISTER (SAVED #12)        04040009CATCHRET DS    A         ˇ
RETURN ADDRESS AFTER FORMS       04050009CATCHSAL DS    A
ADDRESS OF SAVED SPECIAL ALIST   04060009CATCHFAL DS    A
ADDRESS OF SAVED FLUID ALIST     04070009CATCHTAG DS    A

C ADDRESS OF CLEANUP FORMS CODE    04090009CATCHVAL DS    A
0 RETURN VALUE SAVED DURING CLNUP  04100009         SPACE 2
              #                      04110009         END
                                     04120009
TITLE 'ZILTPUT - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*
************************************************************** 00011002*
                                                             * 00012002*
ersion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 0001300
               All rights reserved.                            * 0001400
                                                               * 0001500
*******ˇ
                                                                 * 00017
IS FUNCTION IS CALLED BY ZIL ASSEMBLER LANGUAGE PROGRAMS WHICH   * 00018
SH TO WRITE SOMETHING ˇ
                                                                   * 000
REGISTER 1 CONTAINS THE ADDRESS OF THE DATA TO BE WRITTEN.         * 000
REGISTER 0 CONTAINS THE LENGTH OF THEˇ
                                                                     * 0
  IT IS ASSUMED THAT THE LENGTH IS 256 BYTES OR LESS.                * 0
                                                    ˇ
2*  IF REGISTER 0 IS NEGATIVE, THEN THE DATA IS TO BE SENT VIA         *
2*  TPUT ASIS; OTHERWISE TPUT EDIT IS TO BE USED.                      *
2*                                                                 ˇ
002* THIS ROUTINE IS NOT RECURSIVE AND USES NO STACK SPACE.
002*
002*********************************************************************
00ˇ
40002         #ZSYS
50002         SPACE 1
60002ZILTPUT  #ZBˇ
0170002         SPACE 1
0180002         STM   #14,#12,TPUTSAVE    SAVE ALL REGISTERS
0190002         LR    #12,#15   ˇ
 00200002         USING ZILTPUT,#12
 00210002         DROP  #15
 00220002         SPACE 1                      ˇ
   00230002         LTR   #0,#0               TEST LENGTH VALUE
   00240002         BZ    RETURN              IF ZERO, DO NOTHING
   00250002         BP    DOTPUT              IF POSITIVE, DO ˇ
     00260002         LPR   #3,#0               IF NEGATIVE, MAKE IT POS
     00270002         LR    #4,#1               SAVE ADDRESS
     00280002         TPUT  (#4),(#3),ASIS      DO TPUT ASIS (WITHOUT NE
       00290002         B     DRIBBLE             GO TO DO DRIBBLE IF RE
         00300002         SPACE 1
         00310002DOTPUT   DS    0H
         00320002         LR    #3,#0               SAVE LENGTH
         0ˇ
           00340002         TPUT  (1),(0),R           ISSUE TPUT SVC
           00350002         B     DRIBBLE             GO TO DO DRIBBLE I
ED         00360002      ˇ
             00370002DRIBBLE  DS    0H
             00380002         SPACE 1
             00390002         ICM   #2,1ˇ
 DCB           00400002         BZ    RETURN              IF NO DRIBBLE
PEN, SKIP IT   00410002         LH    #6,82(,#2)          GET DCB LRECL
               00420002*                               ˇ
 END OF TEXT     00430002*                                  AND REMOVE I
RE IS ONE        00440002         LTR   #3,#3               (SKIP IF LEN
ERO)             00450002         BZ    PUTIT                         ˇ
                   00460002         LA    #15,0(#4,#3)        POINT TO L
ACTER OF LINE      00470002         BCTR  #15,0
                   00480002         CLI   0(#15),X'15'        IF LAST CH
IS A ˇ
                     00500002         BCTR  #3,0                 DROP IT
IBBLE FILE           00510002PUTIT    DS    0H
                    ˇ
                       00530002*---------------------------------SWITCH
RENT AMODE TO AMODE 24 00540002         LA    #1,CODE24           ADDRES
S CODE                 00550002    ˇ
SS                       00560002         BSM   #2,#1
                         00570002CODE24   DS    0H
                         00580002*----------------ˇ
S NOW 24                   00590002.SKIP1   ANOP
                           00600002         ST    #9,ZLCISV09         SA
EGS                        00610002         OI    ZLCIFLGS,ZLCISYˇ
ZIL CODE RUNNING IND ON      00620002         L     #1,ZLCDRIBL
BLE DCB ADDRESS              00630002         PUT   (1)
OCATE                        00640002         NI    ZLCIFLGS,255-ZLCISYS
ˇ
                               00660002*--------------------------------
FROM AMODE 24 TO CURRENT AMODE 00670002         BSM   0,#2
                                00680002ˇÁ
                                               00690002*----------------
---------THE AMODE IS NOW SAME AS ON ENTRY     00700002.SKIP2   ANOP
                                               00710002 ˇ
,ZLCIATTN    IF ATTENTION INTERRUPT OCCURRED     00720002         BOR
             THEN GO TO HANDLE IT                00730002         LR
            SAVE ADDRESS OF NEXT OUTPUT RECORD   00740002         LA   ˇ
40'           SOURCE LENGTH = 0                    00750002         SLL
              FILL = BLANK                         00760002         OR
              SOURCE LENGTH = FILL ◊ OUTPUT LEN    00770002         LR
      ˇ
2               TARGET ADDRESS = OUTPUT AREA         00790002         LR
6               TARGET LENGTH = DRIBBLE LRECL        00800002         MV
14              MOVE ˇ
,#3               GET LENGTH OF LINE JUST MOVED        00820002
TRANS             IF ZERO, SKIP TRANSLATE              00830002
,0                ELSE REDUCE FOR EXˇ
#1,TRDRIB           TRANSLATE TO REASONABLE CHARACTERS   00850002NOTRANS
0H                                                       00860002
#4,#6               BUMP SOURCE POINTER            ˇ
  #3,#6               REDUCE LENGTH                        00880002
  PUTIT               CONTINUE WHILE STUFF TO MOVE         00890002RETUR
  0H                                                       0090000ˇ
    #14,#12,TPUTSAVE    RELOAD REGISTERS                     00910002
    #14                 RETURN                               00920002
ACE 1                                                        00930002TRD
 ˇ
SPACE 1                                                        00950002T
DS    9D                  SAVE AREA                            00960002
SPACE 1         ˇ
B DC    256YL1(*-TRDRIBTB)  TRANSLATE TABLE FOR DRIBBLED OUTPUT  0098000
  ORG   TRDRIBTB+X'00'      CHANGE NULLS BACK TO BLANKS          0099000
  DC    X'40'                  ˇ
    ORG   TRDRIBTB+X'41'      RESTORE LEFT BRACKETS                01010
    DC    X'AD'                                                    01020
    ORG   TRDRIBTB+X'42'      RESTORE RIGHT BRˇ
      DC    X'BD'                                                    010
      ORG   TRDRIBTB+X'BA'      RESTORE LEFT BRACKETS                010
      DC    X'AD'                                            +
        ORG   TRDRIBTB+X'BB'      RESTORE RIGHT BRACKETS   ˇ
2         DC    X'BD'
2         ORG   ,
2         SPACE 1
002         LTORG
002         SPACE 1
002         END
002{
UTINE'                 00010000*****************************************
********************** 00011002*
                     * 00012002*ˇ
aper Laboratory Inc.   * 00013002*                     All rights reserv
                       * 00014002*
                       * 00015002**************ˇ
************************** 00016002*
                         * 00017002* ZILUNBND TAKES NO ARGUMENTS.
                         * 00018002*                          ˇ
                           * 00019002* THIS FUNCTION RETURNS THE OBJECT
D", A SPECIAL ENTITY THAT  * 00020002* REPRESENTS AN "UNBOUND" VARIABLE
                             00030002*
                             * 00040002* MAKUNBOUND INSERTS THIS VALUE I
CDR OF A BINDING CELL.       * 00050002* ZEVSYM CHECKS FOR THIS VALUE AN
S NIL INSTEAD OF A BINDING   * 00060002* THAT CONTAINS THIS VALUE.
            ˇ
 TO THIS OBJECT.               * 00080002*
                               * 00090002* AN ATTEMPT TO PRINT THIS OBJE
BE DISASTROUS.             ˇ
                                 * 00110002* THIS MODULE USES NO STACK S
 SAVES NO REGISTERS.             * 00120002*
                                 * 0013000ˇ
************************************ 00140002*
                                   * 00150002* Note:  Presumably this wi
soleted by shallow binding.        * 00160002*        A sˇ
entation will set the value cell of  * 00170002*        a symbol to a di
"unbound" marker, which has the      * 00180002*        high-order bit t
 to facilitate compiled code checks. * 00190002*
                                       * 00200002***********************
**************************************** 00210002         SPACE 1
                                         00220002ZILUNBND #ZBEG MINARGS=
S=0,NAMˇ
                                           00240002         L     #15,ZL
      GET ADDRESS OF THE "UNBOUND" OBJECT  00250002         BR    #14
      RETURN          ˇ
                                             00270002         LTORG
                                             00280002         END
                                     ª         00290002
         TITLE 'ZILVALS - ZIL 1.3 returner of multiple values'
0***********************************************************************
4*                                                                     *
4*ˇ
004*                     All rights reserved.
004*
004**************ˇ
16004*
17004* This routine, linked with ZILSUBS, performs all returning of
18004* multiple values for ZIL. ˇ
0019004*
0020004* The LISP VALUES function will compile into a call to this routi
0030004* with the appropriate settings in the aˇ
 00040004*
 00050004***************************************************************
 00060004*                                                    ˇ
 * 00070004* On entry to this routine:
 * 00080004*
 * 00090004* ===========================================================
== * 00100004*
   * 00110004* #0 zero:  scan environment to see if multiple values are
   * 00120004*           requested and return them in the desired format
   * 0013000ˇ
     * 00140004* #0 negative: scan environment to see if multiple values
ng   * 00150004*              requested; return the number of values req
n    * 00160004*           ˇ
the    * 00170004*              stack address of the returned values (or
n #0.  * 00180004*
       * 00190004* #0 positive: return theˇ
ch is    * 00200004*              the positive value in #0, and the numb
guments  * 00210004*              in #2 (-1 if a list of values is reque
         * 00220004*                                     ˇ
           * 00230004* =================================================
========== * 00240004*
           * 00250004* #1 - when #0 is zero, points to the stack locatio
e the values * 00260004*      passed to this routine are stored in succe
ack slots.   * 00270004*
             * 00280004*      when #0 is negative, irrelevant.
       +
     ˇ
 (for CONSing).  * 00310004*
                 * 00320004* ===========================================
================ * 0ˇ
                   * 00340004* #2 - when #0 is zero, contains the number
es stored on the   * 00350004*      stack passed to this routine.  If -1
ack slot points    * 00360004*     ˇ
                     * 00370004*
                     * 00380004*      when #0 is negative, irrelevant.
                     * 00390004*                  ˇ
                       * 00400004*      when #0 is positive, the number
ple values required    * 00410004*      (-1 if a list of values must be
                       * 00420004*                               ˇ
                         * 00430004*************************************
************************** 00440004*
                         * 00450004* This routine is invoked from compil
ˇ
                           * 00470004*                   #1 -> stack loc
 arguments to VALUES       * 00480004*                   #2 = number of
s specified to ˇ
                             * 00500004* (VALUES-LIST x) - #0 = zero
                             * 00510004*                   #1 -> stack l
of list argument             *ˇ
                               * 00530004*
                               * 00540004* (Note: VALUES-LIST might not
ally handled by the compiler,  * 00550004*   ˇ
 invokes ZILVALS with the above) * 00560004*
                                 * 00570004*****************************
********************************** 00580004*                ˇ
                                   * 00590004* Multiple values are reque
the following special forms, which * 00600004* MUST be handled specially
compiler:                          * 00610004*
                                     * 00620004* (MULTIPLE-VALUE-LIST (f
                                     * 00630004*
                                     * 00640004* (MULTIPLE-VALUE-BIND (a
(form) . fˇ
                                       * 00660004* Note that these are m
 Common LISP.  The only special form   * 00670004* in Common LISP for re
 multiple values is                     * 00680004ˇÁ
E-CALL, which must be implemented in ZIL as a macro.   * 00690004*
                                                       * 00700004* The c
ence for (MULTIPLE-VALUE-LIST (form)) is:              * 00710004*ˇ
                                                         * 00720004*
    #11,xxx(,#11)       Store junk pointer in stack loc. * 00730004*
.   ... code to execute (form) ...                       * 00740004*
.ˇ
...   ... possible base register loadings here ...         * 00760004*
C     #11,xxx(,#11)       If multiple values returned,     * 00770004*
BE    G00001    ˇ
  L     #15,xxx(,#11)        load pointer to list of values  * 00790004*
  B     G00002              else...                          * 00800004*
  DS    0H                  No ˇ
    LR    #1,#15              Return value = arg 1 to CONS     * 0082000
    L     #15,ZLCCONS         Get address of ZILCONS           * 0083000
    LR    #2,#10              NIL = arg 2 to Cˇ
      BALR  #14,#15             Call ZILCONS for list of 1 value * 00850
002   DS    0H                  No multiple values returned      * 00860
                                                             ˇ
he code sequence for (MULTIPLE-VALUE-BIND (a b c) (form) ...) is:  * 008
                                                                   * 008
        ST    #11,xxx+0(,#11)     Store junk pointer in stack loc. * 009
          ...   ... code to execute (form) ...                       * 0
          ...   ... which returns something in #15 ...               * 0
          BC    0,3(#11,0)          NOP (470B) with # of arguments   * 0
          Cˇ
4*          BNE   G00001              then do nothing, values set      *
4*          ST    #15,xxx+0(,#11)     else set var A to only value     *
4*          ST    #10,xxx+ˇ
004*          ST    #10,xxx+8(,#11)     set variable C to NIL
004* G00001   DS    0H
004*                                     ˇ
00004* The NOP and the compare to #11 are extremely important, because
10004* they are signals to ZILVALS that multiple values are being
20004* requested.  ZILVALS (this routine) determines if ˇ
1030004* are needed by inspecting the instruction flow, starting with th
1040004* return address in #14, to see if:
1050004*                                                               +
 01060004* (1) multiple values are requested by the presence of the sˇ
 * 01070004*     NOP (470B....) or C (59B0....) instruction generated by
 * 01080004*     of the multiple-value-requesting special forms.
 * 01090004*
 * 0ˇ
   * 01110004*     presence of instructions that use or reset the conten
5. * 01120004*
   * 01130004* (3) ˇ
     * 01140004*     another function (e.g. BALR) or outside of LISP (e.
     * 01150004*
     * 01160004* Only in case (1) ˇ
       * 01170004* The instruction flow scanning needs to track the valu
e      * 01180004* ZIL registers #11, #12, and #14 as it goes.  If a cal
UES,   * 01190004* for example, is in tail-recursˇ
owed     * 01200004* (not necessarily immediately, since ALIST restores
ike      * 01210004* may occur) by the code sequence
         * 01220004*                                            ˇ
           * 01230004*          LR    1,11
           * 01240004*          LM    11,12,...(1)
           * 01250004*          L     14,...(1)

             * 01270004*
             * 01280004* which is the standard ZIL return sequence from
 code.       *ˇ
 must be       * 01300004* taken from the stack and instruction scanning
 until one     * 01310004* of the three cases above is encountered.
               * 01320004*   ˇ
                 * 01330004* Branch instructions must be followed as wel
 means that      * 01340004* base registers must be determined if necess
follows:         * 01350004*                ˇ
                   * 01360004* #12, the primary base register, must be k
the time.          * 01370004*
                   * 01380004* #7, if used, is either #12+4ˇ
hich it is may       * 01390004* be determined based on whether the disp
 is odd or even.     * 01400004*
                     * 01410004* #6, if used, is #12+(2*4096).
                       * 01420004* #5, if used, is #12+(3*4096).
                       * 01430004* #4, if used, is #12+(4*4096).
                       * 01440004*
                        * 01450004ˇÁ
lowed.                                 * 01460004*
                                       * 01470004* The NOP branch (4700)
gnal used by UNWIND-PROTECT.  When     * 01480004*ˇ
hing path is followed, and must take     * 01490004* you to an instructi
loads a register from the stack.  If     * 01500004* the register is 15,
e values are possible (this is one of    * 01510004* the only casˇ
ad of 15 does not rule out multiple        * 01520004* values); if a dif
egister is loaded, the value is not        * 01530004* being returned an
ore multiple values are irrelevant.        * 01540004*
ˇ
********************************************** 01560004         SPACE 1
                                               01570004ZILVALS  CSECT
               ˇ
                                                 01590004         USING
#15                                              01600004         #ZUSIN
                              ˇ
                                                   01620004*
                                                   01630004* Dispatch ba
he contents of #0.                           ˇ
al call for VALUES:  scan and return values          01650004* Negative
 only, return MV info                                01660004* Positive
rn values only, using info from previous scan call   0167000ˇ
                                                       01680004
,#0                                                    01690004
RMAL                                                   01700004
ONLYSCAN                                                 01710004
ONLYRET                                                  01720004
                                                         01730004NORMAL
0H        ˇ
  0H                  Scan environment for requestor       01750004
E 1                                                        01760004*****
*************************ˇ
                                                             01780004* R
usage:                                                       01790004*
                                        ˇ
entry code (zero, negative or positive)                        01810004*
volatile (destroyed by TRT)                                    01820004*
volatile (destroyed by TRT)                            +
- VALUES stack pointer    (#1)                       ˇ
--- VALUES number of values (#2)                                   01850
--- track stack pointer    (#11)                                   01860
--- track base register    (#12)                                   0ˇ
7 --- track return address   (#14)                                   018
14 -- ZILVALS return address. Be careful!!!                          018
15 -- ZILVALS base register.  Be careful!!!                          019
   ˇ
********************************************************************** 0
        SPACE 1                                                        0
                  ˇ
4* Save the input parameter registers (1,2).
4*
4         LR    #3,#1            ˇ
004         LR    #4,#2               Number of values on stack
004*
004* Save the contents of the three important reˇ
00004* at entry to ZILVALS.
10004*
20004         LR    #5,#11              Caller's stack pointer ˇ
2030004         LR    #6,#12              Caller's code base register
2040004         LR    #7,#14              Caller's return address
2050004         SPACE 1
 02060004CONTINUE DS    0H
 02070004         SPACE 1
 02080004         XR    #2,#2               Clear TRT flag register
 02090004    ˇ
   02100004OPLOOP   DS    0H
   02110004*
   02120004* Check the opcodˇ
     02130004*
     02140004         TRT   0(1,#7),INSTRTBL    Test the instruction opc
     02150004         BNZ   GO(#2)         ˇ
       02160004GO       B     NO                  #2=0, bad or unusual o
o MV's 02170004         B     MBMV47              #2=4
       02180004         B     MBMV59              #2=8    ˇ
         02190004         B     MBMV18              #2=12
         02200004         B     MBBALR              #2=16
         02210004         B     MBBCR               #2=20
           02220004ˇÁ
                         02230004         B     MBRR                #2=2
                         02240004         B     BUMP2               #2=3
                         02250004 ˇ
                           02260004         B     MBSTMLM             #2
                           02270004         B     MBSI                #2
                           02280004         B    ˇ
                             02290004         B     MBSS
                             02300004         SPACE 1
                             02310004TRTNO    EQU   0           ˇ
                               02320004TRTMV47  EQU   4
                               02330004TRTMV59  EQU   8
                               02340004TRTMV18  EQU   12

                                 02360004TRTBCR   EQU   20
                                 02370004TRTSVC   EQU   24
              ˇ
                                   02390004TRTBUMP2 EQU   32
                                   02400004TRTRX    EQU   36
                             ˇ
                                     02420004TRTSI    EQU   44
                                     02430004TRTMASK  EQU   48
                                     0244000ˇ
                                       02450004         SPACE 1
                                       02460004INSTRTBL DS    0X
  Table of instruction op codes        02470004*           ˇ
                                         02480004* Most opcodes are unde
 unusual, so they fall into the "nope,   02490004* no multiple values be
rned from here" category.  Also, to      02500004* keep things simple, a
truction that potentially references       02510004* register 15 implici
er than STM and LM) is considered to fall  02520004* into this category.
er words, instructions like MVCL, SRDL,    02530004* M, DR, BXLE are not
d to occuˇ
top the return of multiple values.           02550004* Instructions that
ntrol temporarily to other code (EX, BAL)    02560004* for the most part
to the same category.   ˇ
                                               02580004         DC    25
NO)                                            02590004         ORG   IN
'05'      BALR                         +
BALR)                                ˇ
BL+X'06'      BCTR                                 02620004         DC
RTBALR)                                            02630004         ORG
BL+X'07'      BCR                                  0ˇ
(TRTBCR)                                             02650004         OR
RTBL+X'0A'      SVC                                  02660004         DC
(TRTSVC)                                             02670004      ˇ
STRTBL+X'0B'      BSM                                  02680004
L1(TRTNO)                                              02690004
STRTBL+X'0C'      BASSM                                02700004
L1ˇ
INSTRTBL+X'0D'      BASR                                 02720004
1YL1(TRTBALR)                                            02730004
INSTRTBL+X'10' -1ˇ
  8YL1(TRTRR)                                              02750004
  INSTRTBL+X'18'      LR                                   02760004
  1YL1(TRTMV18)                 ˇ
G   INSTRTBL+X'19' -1B  CR,AR,SR                             02780004
    3YL1(TRTRR)                                              02790004
G   INSTRTBL+X'1E' -1F  ALR,SLR                ˇ
DC    2YL1(TRTRR)                                              02810004
ORG   INSTRTBL+X'20' -3F  Floating-point RR instructions       02820004
DC    32YL1(TRTBUMP2)                                         ˇ
  ORG   INSTRTBL+X'40' -43  STH,LA,STC,IC                        0284000
  DC    4YL1(TRTRX)                                              0285000
  ORG   INSTRTBL+X'46'      BCT                                  0286000
    DC    1YL1(TRTRX)                                              02870
    ORG   INSTRTBL+X'47'      BC                                   02880
    DC    1YL1(TRTMV47)                                            02890
    ORG   INˇ
      DC    5YL1(TRTRX)                                              029
      ORG   INSTRTBL+X'4E' -50  CVD,CVB,ST                           029
      DC    3YL1(TRTRX)    ˇ
        ORG   INSTRTBL+X'54' -58  N,CL,O,X,L                           0
        DC    5YL1(TRTRX)                                              0
        ORG   INSTRTBL+X'59'      C       ˇ
4         DC    1YL1(TRTMV59)
4         ORG   INSTRTBL+X'5A' -5B  A,S
4         DC    2YL1(TRTRX)                              
004ˇÁ
         03000004         DC    2YL1(TRTRX)
         03010004         ORG   INSTRTBL+X'60'      STD
         03020004 ˇ
           03030004         ORG   INSTRTBL+X'67' -70  More floating-poin
           03040004         DC    10YL1(TRTRX)
           03050004         ORG  ˇ
             03060004         DC    8YL1(TRTRX)
             03070004         ORG   INSTRTBL+X'88' -8B  SRL,SLL,SRA,SLA
             03080004         DC    4YL1(TRTRX) ˇ
               03090004         ORG   INSTRTBL+X'90'      STM
               03100004         DC    1YL1(TRTSTMLM)
               03110004         ORG   INSTRTBL+X'91' -92  TM,MVˇ
                 03120004         DC    2YL1(TRTSI)
                 03130004         ORG   INSTRTBL+X'94' -97  NI,CLI,OI,XI
                 03140004         DC    4YL1(TRTSI)
                   03150004         ORG   INSTRTBL+X'98'      LM
                   03160004         DC    1YL1(TRTSTMLM)
                   03170004         ORG   INSTRTBL+X'BD'      CLM,STCM,I
             ˇ
                     03190004         ORG   INSTRTBL+X'D1' -D7  MVN,MVC,
LC,OC,XC             03200004         DC    7YL1(TRTSS)
                     0321000ˇ
                       03220004         DC    4YL1(TRTSS)
                       03230004         ORG   INSTRTBL+X'F0' -F3  SRP,MV
NPK                    03240004         DC ˇ
                         03250004         ORG   INSTRTBL+X'F8' -FD  ZAP,
,MP,DP                   03260004         DC    6YL1(TRTSS)
                         03270004         ORG             ˇ
                           03280004         EJECT
                           03290004MBMV47   DS    0H
                           03300004         SPACE 1
                             03310004***********************************
**************************** 03320004*
                           * 03330004* Opcode is:
        ˇ
                             * 03350004*        X'47' BC
                             * 03360004*
                       +
                     ˇ
                                 * 03390004* Rule:
                                 * 03400004*
                                 * 0ˇ
value sentinels:                   * 03420004*
                                   * 03430004*     4700x...
                                   * 03440004*     ˇ
                                     * 03450004*
                                     * 03460004*  If it is, go to handle
se specifically.                     * 03470004*                  ˇ
                                       * 03480004*  If it is 47F0...., t
ust follow the branch, unless it       * 03490004*  goes backward, in wh
 no MV's are returned.                 * 03500004*
 ˇ
nal branch, so no MV's are returned.     * 03520004*
                                         * 03530004*  Note that 47Fx whe
nonzero is a comˇ
no MV's.  We assume that 47Fx0yyy will     * 03550004*  not occur in com
de.                                        * 03560004*
                               ˇ
********************************************** 03580004         SPACE 1
                                               03590004         CLI   1(
'         If it's 47F0....                    ˇ
            then go to follow branch             03610004         CLI
00'         If it's NOP (4700....)               03620004         BE
            then go to handle NOP                03630004    ˇ
X'0B'         If it's 470B....                     03640004         BE
              then go to handle 470B               03650004         B
              else answer is no                    03660004         SPAC
                                                     03670004MB470B   DS
                470B.... - MULTIPLE-VALUE-BIND       03680004*
                                                     03690004***********
***********ˇ
                                                     * 03710004* 470B...
t of the generated code for MULTIPLE-VALUE-BIND or   * 03720004* THROW.
 470B,8000, then it's THROˇ
                                                       * 03740004* If #0
tive, return information only.                         * 03750004* If #0
, store the multiple values here.                       * 03760004ˇÁ
* If #0 is positive - well, that will never get here.                 *
4*                                                                     *
4***********************************************************************
4*ˇ
004         LH    #2,2(,#7)           Load number of values from 470Bxxx
004         LTR   #2,#2               If negative (470B8000),
004         BM   ˇ
30004         LTR   #0,#0               If #0 is negative
40004         BM    MVBINFO             then go to return info only
50004*                          ˇ
3860004* The instruction following the 470B.... should be 59B0Bxxx, wher
3870004* Bxxx is the location of the stack slots where the values are to
3880004*                                       ˇ
 03890004         LH    #0,6(,#7)           Get Bxxx from 59B0Bxxx instr
 03900004         N     #0,=X'00000FFF'     Isolate displacement
 03910004         AR    #5,#0               Add displ. to tracˇ
s  03920004MB47VALS DS    0H
   03930004*
   03940004* In the degenerate case of MULTIPLE-VALUE-BIND with a null l
     03950004* variables to be assigned values, we will return info that
     03960004* values are being requested, but will return a single valu
     03970004* it was a non-multiple-value-returning situation.
     0398000ˇ
       03990004         LTR   #2,#2               If # of requested valu
ro     04000004         BZ    DONOVALS            then return immediate
ly     04010004         LTRˇ
eturned  04020004         BNZ   MVBPUTS             If no values being r
(VALUES) 04030004         ST    #10,0(,#5)          then store NIL into
lue slot 04040004         LA    #5,4(,#5) ˇ
           04050004         BCT   #2,MVBNILS           go put NILs in re
ots if any 04060004         B     DONOVALS             and then go to re
ed. value  04070004MVBPUTS  DS    0H                  Elsˇ
to return    04080004         LR    #7,#3               Get pointer to v
ing passed   04090004MVBPUT   DS    0H                  Loop storing val
             04100004         MVC   0(4,#5),0(#7)       Move value to re
ng stack slot  04110004         BCTR  #2,0                Decrement requ
lue count      04120004         LTR   #2,#2               If no more val
 to fill       04130004         BZ    DONOVALS            then through,
n immed+
k sloˇ
slot               04160004         BCT   #1,MVBPUT           Decrement
alue count & loop  04170004******** B     MVBNILS             When all v
ssed...            0ˇ
ots with NIL         04190004         ST    #10,0(,#5)          Store NI
equesting slot       04200004         LA    #5,4(,#5)           Bump req
slot pointer         04210004      ˇ
uestor count exhausted 04220004         B     DONOVALS            Then g
urn immediate value    04230004         SPACE 1
                       04240004MVBINFO  DS    0H  ˇ
for MULTIPLE-VALUE-BIND  04250004         SPACE 1
                         04260004*
                         04270004* Put stack pointer of values slˇ
mber of values in #2       04280004*
                           04290004* The instruction following the 470B.
ld be 59B0Bxxx, where      04300004* Bxxx is the location of the stack s
ˇ
                             04320004         LH    #0,6(,#7)
 from 59B0Bxxx instruction   04330004         N     #0,=X'00000FFF'
displacement   ˇ
spl. to tracked stack address  04350004         BR    #14
 to caller with info           04360004         SPACE 1
                              ˇ
8000 (THROW)                     04380004*
                                 04390004*******************************
******************************** 04400004*   ˇ
                                 * 04410004* When we see that we've hit
 as generated by the compiler    * 04420004* (this is why THROW has to b
ial form), we must find out      * 04430004* where we're thrˇ
on tracking.  To do this, we must  * 04440004* examine the THROW tag and
he chain of CATCH frames to see    * 04450004* where we come out.  The t
tack, base and return registers    * 04460004* must be "restored" in the
way as they would be when the        * 04470004* THROW is really execute
o this, we duplicate the search      * 04480004* for the THROW tag.  If
is not found (which will cause an    * 04490004* error to be signalled l
, we just ˇ
                                       * 04510004*
                                       * 04520004* Is the tag available
ime?  Sure is at this poi nt, because   * 04530004ˇÁ
we could have gotten this far is in the case of        * 04540004* (THRO
ultiple-value-returning-form)), at which point the     * 04550004* tag h
dy been evaluated, as you can see.                     * 04560004*ˇ
                                                         * 04570004*****
********************************************************** 04580004*
                                                         * 04590004* The
qˇ
                                                           * 04610004*
luate tag and store into xxx(,#11) ---                     * 04620004*
luate possible-mˇ
esult from above set up to go into #15 ---                   * 04640004*
BC    0,0(11,8)     470B8000 NOP to signify THROW            * 04650004*
L     #1,xxx(,#11)  5810Bxxx Loˇ
  LR    #2,#15        182F     Load return value into #2       * 0467000
  L     #15,ZLCTHROW           Get address of ZILTHROW         * 0468000
  BR    #15                    Go to ZILTHROW ˇ
                                                                 * 04700
****************************************************************** 04710
                                                             ˇ
7 -> 470B8000,5810Bxxx                                               047
                                                                     047
      LH    #1,6(,#7)           Get B2D2 of stack location of tag    047
        N     #1,=X'00000FFF'     Isolate displacement                 0
        L     #1,0(#1,#5)         Load tag from stack location         0
        L     #2,ZLCCATCH         Get pointer to current catch frame   0
AGLOOP  DS ˇ
4         LTR   #2,#2               If no more catch frames are active
4         BZ    NO                  then tag not found, assume no MV's
4         USING CATCH,#2  ˇ
004         C     #1,CATCHTAG         If tag matches
004         BE    GOTCATCH            then we found the catch to process
004         L     #2,CATCHLNK         Elsˇ
50004         B     TAGLOOP             and continue.
60004GOTCATCH DS    0H                  We have the catch frame...
70004         LM    #5,#6,CATCHS11      "Restore" trackeˇ
4880004         L     #7,CATCHRET         "Restore" tracked return addre
4890004         B     CONTINUE            Continue scanning for MV's
4900004         SPACE 1                                                +
 04910004MBBRANCH DS    0H                  4700 or 47F0             ˇ
   04920004         SPACE 1
   04930004*                                  First determine the base r
   04940004*                                  Assert #2 = X'000000xx'
   0ˇ
     04960004         SRL   #2,4                Set to base register num
     04970004         LR    #1,#6               Load tracked base regist
     04980004      ˇ
       04990004         BE    BBUPDATE            then OK, use base as i
       05000004         CH    #2,#SFT+8*7+6       If base register = 7
       05010004         BE    BB7 ˇ
         05020004         CH    #2,#SFT+8*6+6       If base register = 6
         05030004         BE    BB6                 then set base
         05040004         CH    #2,#SFT+8*5+6    ˇ
           05050004         BE    BB5                 then set base
           05060004         CH    #2,#SFT+8*4+6       If base register =
           05070005         BE    BB4                 then set bˇ
             05080004         B     NO                  Else branch to u
answer = no  05090004         SPACE 1
             05100004BB7      DS    0H                  Branch to somewh

               05120004         LA    #1,4095(,#1)        Assume using 1
lus 4095       05130004         STC   #1,ZLCDBL           Store low-orde
              ˇ
 is odd          05150004         BNO   BBUPDATE            then
                 05160004         LA    #1,1(,#1)            it's really
 plus 4096       05170004    ˇ
                   05180004         SPACE 1
                   05190004BB6      DS    0H                  Branch to
e off register 6   05200004         SPACE 1 ˇ
                     05210004         AH    #1,=Y(2*4096)       Assume u
base plus 2*4K       05220004         B     BBUPDATE            Go extra
ss                   05230004         SPACE 1              ˇ
                       05240004BB5      DS    0H                  Branch
where off register 5   05250004         SPACE 1
                       05260004         AH    #1,=Y(3*4096)       Assume
 12-base plus 3*4K       05270004         B     BBUPDATE            Go e
ddress                   05280004         SPACE 1
                         05290004BB4      DS    0H                  Bran
mewhere o ff register 4   05300004ˇÁ
                                         05310004         AH    #1,=Y(4*
    Assume using 12-base plus 4*4K       05320004         B     BBUPDATE
    Go extract address                   05330004 ˇ
                                           05340004BBUPDATE DS    0H
      #1 is the base address               05350004*
                                           05360004* Update the cˇ
 check it, and follow the code.              05370004*
                                             05380004         SPACE 1
                                             05390004         LH    #2,2
ˇ
0FFF'     Isolate displacement                 05410004         AR    #2
          Get new code address                 05420004         CR    #2
          If adˇ
            then backward branch, answer is no   05440004*
                                                 05450004* A valid forwa
h.  Now we either continue, ifˇ
ith UNWIND-PROTECT check, if it was 4700.          05470004*
                                                   05480004         CLI
X'00'         If it was 4700                 ˇ
HECK            then check UWP                       05500004         LR
2               Else load new code tracking address  05510004         B
INUE            Continue from new address            0552000ˇ
                                                       05530004UWPCHECK
                  #2 -> instruction following cleanup  05540004*
                                                       05550004* The ins
on following the cleanup form is expected to be a load   05560004* of re
5 from the stack, if multiple values are possible.       05570004* If it
hing else, values are not being returned from the        05580004* prote
m.  Note tˇ
cates MAYBE rather than NO!                                05600004*
                                                           05610004
  0(#2),X'58'         If ˇ
E   NO                  then answer is NO                    05630004
    1(#2),X'F0'                                              05640004
O   NO                                  ˇ
LA    #7,4(,#2)           Else continue with instr. past LOAD  05660004
B     CONTINUE            Continue from new address            05670004
SPACE 1                                                +
  EJECT                                              ˇ
9   DS    0H                                                       05700
    SPACE 1                                                        05710
****************************************************************** 0ˇ
                                                                   * 057
pcode is:                                                          * 057
                                                                   * 057
   ˇ
                                                                     * 0
 Format:      opcd r1 i2 b2 d2d2d2                                   * 0
                  ˇ
4* Rule:                                                               *
4*                                                                     *
4*  This may be one of the multipˇ
004*
004*     59B0....
004*                                            ˇ
50004*  If it is, go to handle that case specifically.
60004*
70004*  Otherwise, treat like a normal RX instruction.         ˇ
5880004*
5890004*****************************************************************
5900004         SPACE 1
 05910004         CLI   1(#7),X'B0'         If it's 59B0....
 05920004******** BE    MB59B0              then go to handle 59B0
 05930004         BNE   MBRX                else handle like normal RX i
 05940004    ˇ
   05950004MB59B0   DS    0H                  59B0.... - MULTIPLE-VALUE-
   05960004*
   05970004*****************ˇ
**** 05980004*
   * 05990004* 59B0Bxxx indicates that a list of all the passed values m
   * 06000004* consed up.                  ˇ
     * 06010004* Bxxx is the location of the stack slot where the list i
     * 06020004*
     * 06030004*******************************************ˇ
******** 06040004*
         06050004         LTR   #0,#0               If #0 is negative
         06060004         BNM   MB59NI              then (return info on
           06070004ˇÁ
om 59B0Bxxx instruction  06080004         N     #0,=X'00000FFF'      iso
placement                06090004         L     #2,#SFWM1            set
1                        06100004 ˇ
n with info                06110004MB59NI   DS    0H                  El
lly set the values         06120004         LH    #1,2(,#7)           Ge
rom 59B0Bxxx instruction   06130004         N    ˇ
displacement                 06140004         AR    #5,#1
l. to tracked stack address  06150004MB59VALS DS    0H
                             06160004         LTR   #1,#4       ˇ
 of values on stack            06170004         BNZ   MB59NZ
o, then...                     06180004         ST    #10,0(,#5)
 NIL as list of m. values      06190004         LR    #15,#10

 return                          06210004MB59NZ   DS    0H
 prepare to cons a list of vals  06220004         LR    #0,#3
ter to values ˇ
nvert # of values to index         06240004         AR    #1,#0
t pointer to top of stack          06250004         LA    #0,12(,#1)
more stack slots for saving  ˇ
Check for stack overflow             06270004         STM   #11,#12,0(#1
Save the usual registers             06280004         ST    #14,8(,#1)
                                     0629000ˇ
  Set up new local base register       06300004NEWUSING B     AROUND-*(,
  Set up fake header for CONS to see   06310004         DC    YL1(AROUND
                                       06320004         DC ˇ
TE &SYSTIME '                            06330004AROUND   DS    0H
                                         06340004         LR    #12,#15
    Give us a real base register         06350004         LR    #11,#1
      Save that there stack pointer        06360004         USING NEWUSI
                                           06370004         DROP  #15
                                           06380004         OI    ZLCGCF
BLD   Telˇ
        Initialize list to NIL               06400004         LR    #6,#
                                             06410004CONSLOOP DS    0H
                        ˇ
          Point to last value on stack         06430004         L     #1
          Arg 1 to CONS = value                06440004         LR    #2
          Arg 2 to CONS = list so far  +
ONS         Get address of ZILCONS   ˇ
5             Call ZILCONS                         06470004         CR
              Loop until we hit bottom             06480004         BH
OP                                                 0ˇ
0(,#5)          Store list of values in the place    06500004         NI
CFLG,255-ZLCGCBLD Turn off special consing flag      06510004         SP
                                                     06520004      ˇ
2                                                      06530004
,#11              Return sequence...                   06540004
1,#12,0(#1)       Restore the usual registers          06550004
4,ˇ
#15,0(,#3)          Load first value from stack          06570004
#14                 and return with it.                  06580004
1                ˇ
G ZILVALS,#15                                              06600004
T                                                          06610004MBMV1
  0H                            ˇ
ACE 1                                                        06630004***
************************************************************ 06640004*
                                               ˇ
is:                                                          * 06660004*
                                                             * 06670004*
X'18' LR                                                     *ˇ
                                                               * 0669000
t:      opcd r1 r2                                             * 0670000
                                                               * 0671000
e:                                                               * 06720
                                                                 * 06730
is may be the start of a function return sequence:               * 06740
            ˇ
   181B 98BC1... 58E01... 07FE                                     * 067
                                                                   * 067
or:                        ˇ
                                                                     * 0
     181B 58E01... 98BC1... 07FE                                     * 0
                                          ˇ
4*  If it is one of these, go to handle that case specifically.        *
4*                                                                     *
4*  Otherwise, treat like a normal LR instruction.       
004ˇÁ
       * 06850004*******************************************************
******** 06860004         SPACE 1
         06870004 ˇ
           06880004         BNE   MBRR                then
           06890004         L     #1,2(,#7)            get next 4 bytes
uctions    06900004         N    ˇ
             06910004         C     #1,=X'98BC1000'      If it's "LM 11,
)"           06920004         BE    MB111214             then go process
., 58E0....  06930004         C     #1,=X'58E010ˇ
               06940004         BE    MB141112             then go proce
..., 98BC....  06950004         B     MBRR                 else processs
rmal RR instr  06960004MB111214 DS    0H                       ˇ
                 06970004*
                 06980004* At this point we could assume the rest is OK.
 make sure...    06990004*
                   07000004         L     #1,6(,#7)             get next
 of instructions   07010004         N     #1,=X'FFFFF000'       mask out
e part             07020004         C     #1,=X'58E01000'       If it's
x(1)"        ˇ
                     07040004         CLI   10(#7),X'07'            next
tion is "BR 14"      07050004         BNE   MBRR
                     0706000ˇ
                       07070004         BNE   MBRR                   the
                       07080004*
                       07090004* We have a ˇ
he stack pointer,        07100004* the base register and the return regi
d follow the code.       07110004*
                         07120004         LR    #2,#5     ˇ
ed stack pointer           07130004         LH    #1,4(,#7)           Ge
f LM (1xxx)                07140004         N     #1,=X'00000FFF'     Is
splacement                 07150004         L     #5,0(#1,#2)         Up
racked stack pointer         07160004*
ng it from stack + displ     07170004         L     #6,4(#1,#2)
racked base register         07180004*
ng it frˇ
d2 of "L 14, xxx(1)" instr.    07200004         N     #1,=X'00000FFF'
e displacement                 07210004         L     #7,0(#1,#2)
 tracked return address+
oading it from stack ˇ
ear high-order bit of address      07240004         B     CONTINUE
ntinue from new address            07250004         SPACE 1
                                   0ˇ
                                     07270004*
                                     07280004* At this point we could as
 rest is OK.  But to make sure...    07290004*     ˇ
                                       07300004         L     #1,6(,#7)
    get next 4 bytes of instructions   07310004         N     #1,=X'FFFF
    mask out variable part             07320004         C     #1,=ˇ
      If it's "LM 11,12,xxx(1)"          07330004         BNE   MBRR
       and                               07340004         CLI   10(#7),X
        next instruction is "BR 14"      07350004         BNE   MBRR
 ˇ
                                           07370004         BNE   MBRR
         then                              07380004*
                ˇ
 sequence.  Update the stack pointer,        07400004* the base register
 return register, and follow the code.       07410004*
                               ˇ
          Save tracked stack pointer           07430004         LH    #1
          Get b2d2 of LM (1xxx)                07440004         N     #1
0FFF'     Isolate displacement                ˇ
#2)         Update tracked stack pointer         07460004*
            by loading it from stack + displ     07470004         L
#2)         Update tracked base register         07480004*   ˇ
              by loading it from stack + displ + 4 07490004         LH
#7)           Get b2d2 of "L 14, xxx(1)" instr.    07500004         N
00000FFF'     Isolate displacement                 07510004         L
(#1,#2)         Update tracked return address        07520004*
                by loading it from stack + displ     07530004         N
X'7FFFFFFF'     Clear high-order bit of address      07540004         B
INUE       ˇ
                                                       07560004MBRR
                                                       07570004
                          ˇ
******************************************************** 07590004*
                                                       * 07600004* Opcod
 of the following:                                      * 07610004ˇÁ
*                                                                     *
4*        X'10' LPR                                                    *
4*        X'11' LNR                                                    *
4*ˇ
004*        X'13' LCR
004*        X'14' NR
004*        X'15'ˇ
80004*        X'16' OR
90004*        X'17' XR
00004*        X'18' LR - if not ˇ
7710004*        X'19' CR
7720004*        X'1A' AR
7730004*        X'1B' SR                       ˇ
 07740004*        X'1E' ALR
 07750004*        X'1F' SLR
 07760004*                                                    ˇ
 * 07770004* Format:      opcode r1,r2
 * 07780004*
 * 07790004* Rule:
   * 07800004*
   * 07810004*  If r1 is 15, that's a set or use of #15, so no MV's retu
   * 07820004*  If r2 is 15, that's a use of #15, so no MV's returned.
   * 0783000ˇ
     * 07840004*
     * 07850004* Notes:
     * 07860004*           ˇ
       * 07870004*  X'18FF' ("LR 15,15") may be used by the compiler whe
rm     * 07880004*  (VALUES <form>) is used to force return of exactly o
.      * 07890004*                        ˇ
         * 07900004*****************************************************
********** 07910004         SPACE 1
           07920004         TM    1(#7),X'F0'         If ˇ
             07930004         BO    NO                  then answer is n
             07940004         TM    1(#7),X'0F'         If it's rrxF
             07950004         BO    NO                  then answer is n
               07960004         B     BUMP2               Otherwise cont
               07970004         EJECT
               07980004MBRX     DS    0H
       +
     ˇ
****************** 08010004*
                 * 08020004* Opcode is one of the following:
                 * 0ˇ
                   * 08040004*        X'40' STH
                   * 08050004*        X'41' LA
                   * 08060004*     ˇ
                     * 08070004*        X'43' IC
                     * 08080004*        X'46' BCT
                     * 08090004*        X'48' LH  ˇ
                       * 08100004*        X'49' CH
                       * 08110004*        X'4A' AH
                       * 08120004*        X'4B' SH               ˇ
                         * 08130004*        X'4C' MH
                         * 08140004*        X'4E' CVD
                         * 08150004*        X'4F' CVB
ˇ
                           * 08170004*        X'54' N
                           * 08180004*        X'55' CL
               ˇ
                             * 08200004*        X'57' X
                             * 08210004*        X'58' L
                             *ˇ
                               * 08230004*        X'5B' S
                               * 08240004*        X'5E' AL
                               * 08250004*   ˇ
                                 * 08260004*        X'88' SRL
                                 * 08270004*        X'89' SLL
                                 * 08280004*        X'8A' SRˇ
                                   * 08290004*        X'8B' SLA
                                   * 08300004* The following are floatin
instructions.  Note that the r1    * 08310004* field can never be X'F',
inition, so that just falls thru.    * 08320004*        X'60' STD
                                     * 08330004*        ...through...
                                     * 08340004*        X'7F' SU
          ˇ
                                       * 08360004* Format:      opcode r
d2d2d2                                 * 08370004*
                                        * 08380004ˇÁ
                                                       * 08390004*
                                                       * 08400004*  If r
 that's a set or use of #15, so no MV's returned.      * 08410004*ˇ
5, that's a use of #15, so no MV's returned.             * 08420004*  If
5, that's a use of #15, so no MV's returned.             * 08430004*  Ot
 this affects nothing, so continue.                      * 08440004*
 ˇ
************************************************************ 08460004
ACE 1                                                        08470004
    1(#7),X'F0' ˇ
BO    NO                  then answer is no                    08490004
TM    1(#7),X'0F'         If i2 is 15                          08500004
BO    NO                  then ˇ
  TM    2(#7),X'F0'         If b2 is 15                          0852000
  BO    NO                  then answer is no                    0853000
  B     BUMP4               Otherwise continueˇ
    EJECT                                                          08550
    DS    0H                                                       08560
    SPACE 1                                                  ˇ
******************************************************************** 085
                                                                   * 085
pcode is one of the following:                                     * 086
                                                                     * 0
        X'91' TM                                                     * 0
        X'92' MVI                                                    * 0
        X'9ˇ
4*        X'95' CLI                                                    *
4*        X'96' OI                                                     *
4*        X'97' XI        ˇ
004*
004* Format:      opcode immed b1 d1d1d1
004*                                     ˇ
00004* Rule:
10004*
20004*  If b1 is 15, that's a use of #15, so no MV's retˇ
8730004*  Otherwise, this affects nothing, so continue.
8740004*
8750004****************************************************************+
 08760004         SPACE 1                                            ˇ
   08770004         TM    2(#7),X'F0'         If b1 is 15
   08780004         BO    NO                  then answer is no
   08790004         B     BUMP4               Otherwise continue
   0ˇ
     08810004MBMASK   DS    0H
     08820004         SPACE 1
     08830004******ˇ
****** 08840004*
     * 08850004* Opcode is one of the following:
     * 08860004*                  ˇ
       * 08870004*        X'BD' CLM
       * 08880004*        X'BE' STCM
       * 08890004*        X'BF' ICM              ˇ
         * 08900004*
         * 08910004* Format:      opcode r1 i2 b3 d3d3d3
         * 08920004*                                            ˇ
           * 08930004* Rule:
           * 08940004*
           * 08950004*  If r1 is 15, that's a set or use of #15, so no M

             * 08970004*  Otherwise, this affects nothing, so continue.
             * 08980004*
             *ˇ
**************** 09000004         SPACE 1
                 09010004         TM    1(#7),X'F0'         If r1 is 15
                 09020004    ˇ
                   09030004         TM    2(#7),X'F0'         If b3 is 1
                   09040004         BO    NO                  then answe
                   09050004         B     BUˇ
ue                   09060004         EJECT
                     09070004MBSS     DS    0H
                     09080004         SPACE 1              ˇ
                       09090004*****************************************
********************** 09100004*
                     * 09110004* Opcode is one of the following:
                       * 09120004*
                       * 09130004*        X'D1' MVN
                       * 09140004*        X'D2' MVC
                        * 09150004ˇÁ
                                       * 09160004*        X'D4' NC
                                       * 09170004*        X'D5' CLC
                                       * 09180004*ˇ
                                         * 09190004*        X'D7' XC
                                         * 09200004*        X'DC' TR
                                         * 09210004*        X'DD'ˇ
                                           * 09220004*        X'DE' ED
                                           * 09230004*        X'DF' EDMK
                                           * 09240004*        X'F0' SRP
ˇ
                                             * 09260004*        X'F2' PA
                                             * 09270004*        X'F3' UN
               ˇ
                                               * 09290004*        X'F9'
                                               * 09300004*        X'FA'
                              ˇ
                                                 * 09320004*        X'FC
                                                 * 09330004*        X'FD
                                             ˇ
                                                   * 09350004* Format:
de ll b1 d1d1d1 b2 d2d2d2                          * 09360004*
                                                   * 0937000ˇ
                                                     * 09380004*
                                                     * 09390004*  If b1
hat's a use of #15, so no MV's returned.             * 09400004*  If b2
 that's a use of #15, so no MV's returned.             * 09410004*  Othe
his affects nothing, so continue.                      * 09420004*
                                                       * 09430004*******
**********ˇ
E 1                                                        09450004
  2(#7),X'F0'         If b1 is 15                          09460004
  NO                  theˇ
    4(#7),X'F0'         If b2 is 15                          09480004
    NO                  then answer is no                    09490004
    BUMP6               Otherwise continˇ
EJECT                                                          09510004M
DS    0H                                                       09520004
SPACE 1                                                +
*****************************************************ˇ
                                                                 * 09550
ode is one of the following:                                     * 09560
                                                                 * 0ˇ
      X'90' STM                                                    * 095
      X'98' LM                                                     * 095
                                                                   * 096
ormˇ
                                                                     * 0
 Rule:                                                               * 0
                  ˇ
4*  If r1 thru r2 includes register 15, no MV's returned.              *
4*  If i2 is 15, that's a use of #15, so no MV's returned.             *
4*  If b2 is 15, that's a use of ˇ
004*  Otherwise, this affects nothing, so continue.
004*
004* Notes:                                     ˇ
00004*
10004*  The LM that occurs as part of a function return sequence is not
20004*  processed here.  It is handled when the "LR 1,11" (181Bˇ
9730004*
9740004*****************************************************************
9750004         SPACE 1
 09760004         TM    2(#7),X'F0'         If b2 is 15
 09770004         BO    NO                  then answer is no
 09780004         TRT   1(1,#7),STMLMTBL    Else check register combinat
 09790004    ˇ
   09800004         B     BUMP4               Otherwise continue
   09810004         SPACE 1
   09820004STMLMTBL DC    25ˇ
     09830004         ORG   STMLMTBL+X'00'      00 - 0E are OK
     09840004         DC    15YL1(1)
     09850004         ORG   STMLMTBL+X'11' ˇ
       09860004         DC    14YL1(1)
       09870004         ORG   STMLMTBL+X'22'      22 - 2E are OK
       09880004         DC    13YL1(1)                    ˇ
         09890004         ORG   STMLMTBL+X'33'      33 - 3E are OK
         09900004         DC    12YL1(1)
         09910004         ORG   STMLMTBL+X'44'      44 - 4E are OK
           09920004ˇÁ
                         09930004         ORG   STMLMTBL+X'55'      55 -
OK                       09940004         DC    10YL1(1)
                         09950004 ˇ
e OK                       09960004         DC    9YL1(1)
                           09970004         ORG   STMLMTBL+X'77'      77
e OK                       09980004         DC   ˇ
                             09990004         ORG   STMLMTBL+X'88'
are OK                       10000004         DC    7YL1(1)
                             10010004         ORG   STMLMTBL+X'9ˇ
E are OK                       10020004         DC    6YL1(1)
                               10030004         ORG   STMLMTBL+X'AA'
E are OK                       10040004         DC    5YL1(1)

 BE are OK                       10060004         DC    4YL1(1)
                                 10070004         ORG   STMLMTBL+X'CC'
 CE are OK    ˇ
                                   10090004         ORG   STMLMTBL+X'DD'
 - DE are OK                       10100004         DC    2YL1(1)
                             ˇ
EE is OK                             10120004         DC    1YL1(1)
                                     10130004         ORG
                                     1014000ˇ
                                       10150004MBBALR   DS    0H
                                       10160004         SPACE 1
                                       10170004************ˇ
**************************************** 10180004*
                                       * 10190004* Opcode is one of the
g:                                     * 10200004*
                                         * 10210004*        X'05' BALR
                                         * 10220004*        X'06' BCTR
                                         * 10230004*        X'0D' BASR
         ˇ
                                           * 10250004* Format:      opco
                                           * 10260004*
                        ˇ
                                             * 10280004*
                                             * 10290004*  If r1 is 15, t
reset of #15, so no MV's returned.     +
anch takes place, so keep going.     ˇ
 a branchout, so no MV's returned.               * 10320004*
                                                 * 10330004*************
************************************************** 1ˇ
                                                     10350004         TM
),X'F0'         If it's 05FX                         10360004         BO
                then answer is no                    10370004      ˇ
#7),X'0F'         If it's 05X0                         10380004
MP2               then continue                        10390004
                  Otherwise answer is no               10400004
  ˇ
0H                                                       10420004
1                                                        10430004*******
*****************ˇ
                                                         * 10450004* Opc
ne of the following:                                     * 10460004*
                                ˇ
07' BCR                                                    * 10480004*
                                                           * 10490004* F
    opcode c1,r2                               ˇ
                                                             * 10510004*
                                                             * 10520004*
                                                             *ˇ
1 is 15, that's an unconditional branch, so no MV's returned.  * 1054000
unconditional BR 14 that is found as part of a function return * 1055000
uence won't be uncovered here, so it needn't be considered.)   * 1056000
 c1 is 0, this is a NOPR, so continue.                           * 10570
 r2 is 0, this is a NOPR, so continue.                           * 10580
 r2 is 15, that's a strange use of #15, so no MV's returned.     * 10590
herwise, thiˇ
so continue.                                                       * 106
                                                                   * 106
***************************ˇ
        SPACE 1                                                        1
        TM    1(#7),X'F0'         If c1 is 15 (07Fx)                   1
        BO    NO                  then ansˇ
4*                                  If c1 is 0  (070x)
4         BZ    BUMP2               then continue
4         TM    1(#7),X'0F'         If r2 is 0  (07x0)   
004ˇÁ
         10700004*                                  If r2 is 15 (07xF)
         10710004         BO    NO                  then answer is no
         10720004 ˇ
           10730004         EJECT
           10740004MBSVC    DS    0H
           10750004         SPACEˇ
             10760004***************************************************
************ 10770004*
           * 10780004* Opcode is one of the follˇ
             * 10790004*
             * 10800004*        X'0A' SVC
             * 10810004*                                       ˇ
               * 10820004* Format:      opcode i1
               * 10830004*
               * 10840004* Rule:
                 * 10850004*
                 * 10860004*  If i1 is 97, this is a TSO TEST breakpoint
e.               * 10870004*  Otherwise, no multiple values being return
             ˇ
                   * 10890004*******************************************
******************** 10900004         SPACE 1
                     1091000ˇ
7 (0A61)               10920004         BNE   NO                  then a
 no                    10930004         LR    #6,#0               Else s
em registers           10940004         LR ˇ
                         10950004         LA    #1,TESTWARN
                         10960004         LA    #0,L'TESTWARN
                         10970004         TPUT  (1),(0),R ˇ
ser                        10980004         LR    #0,#6               Re
stem registers             10990004         LR    #15,#7
                           11000004         B     NO                  As
o MV's                       11010004         SPACE 1
                             11020004TESTWARN DC    C'*** ZILVALS encoun
O TEST breakpoint.  AssumingX11030004                that multiple value
OT been ˇ
                               11050004BUMP2    DS    0H
oing after 2-byte opcode       11060004         LA    #7,2(,#7)
o next sequential instr+
inue                 ˇ
ep going after 4-byte opcode       11090004         LA    #7,4(,#7)
mp to next sequential instruction  11100004         B     OPLOOP
ntinue                             1ˇ
Keep going after 6-byte opcode       11120004         LA    #7,6(,#7)
Bump to next sequential instruction  11130004         B     OPLOOP
Continue                             11140004      ˇ
                                       11150004NO       DS    0H
  Here if no multiple values requested 11160004         SPACE 1
                                       11170004         LTR   #0,#ˇ
    If requesting info only,             11180004         BZ    DONOVALS
    then...                              11190004         XR    #0,#0
     set MV stack pointer to zero        11200004         LA    #2,1
 ˇ
       and return with that info           11220004         SPACE 1
                                           11230004DONOVALS DS    0H
      Here when ˇ
                                             11250004* Since we are supp
process the multiple values but there are    11260004* no MV requestors,
ly return the first value in reˇ
her there were MV's to be processed or not).   11280004*
                                               11290004         LTR   #4
          If no values to return ("(VALUES)") ˇ
            then                                 11310004         LR
             return NIL as the single value      11320004         BR
                                                 11330004RETVˇ
              Else...                              11340004         L
,#3)          load first value from stack          11350004         BR
              and return with it.                  11360004         EJEC
                                                     11370004ONLYRET  DS
                                                     11380004*
                                                     11390004***********
***********ˇ
                                                     * 11410004* Here wh
 positive, meaning that we already know that         * 11420004* multipl
 must be returned and wherˇ
number of slots to put values in (-1 if list needed).  * 11440004*
                                                       * 11450004* #3 an
ter be set up right.                                    * 11460004ˇÁ
*                                                                     *
4***********************************************************************
4*
4 ˇ
004         LR    #0,#1               Current stack pointer
004         LTR   #2,#2               If #2 is negative
004         BM   ˇ
30004         B     MB47VALS            else prepare to stick 'em on sta
40004         EJECT
50004         LTORG             ˇ
1560004         EJECT
1570004*
1580004****************************************ˇ
 11590004*
 11600004* This DSECT must match the same one in ZILTHROW.  Exactly!!!
 11610004*                                                    ˇ
 * 11620004*************************************************************
** 11630004*
   11640004CATCH    DSECT ,                   THIS MAPS THE CATCH FRAME
     11650004         SPACE 1
     11660004CATCHLNK DS    A                   +00 ADDRESS OF PREVIOUS
AME  11670004CATCHS11 DS    A                   +04 ADDRESS OF STACK (SA
     1168000ˇ
       11690004CATCHRET DS    A                   +0C RETURN ADDRESS AFT
       11700004CATCHSAL DS    A                   +10 ADDRESS OF SAVED S
LIST   11710004CATCHFAL DS ˇ
LIST     11720004CATCHTAG DS    A                   +18 THE CATCH TAG (0
)        11730004CATCHCLN DS    A                   +1C ADDRESS OF CLEAN
 CODE    11740004CATCHVAL DS    A         ˇ
ING CLNUP  11750004         EJECT
           11760004         #ZEQU
           11770004         EJECT                        ˇ
             11780004         #ZCOM
             11790004         EJECT
             11800004         #ZSFT
               11810004         EJECT
               11820004         END
               11830004
.3 SPECIAL SUBROUTINE'                   00010000***********************
**************************************** 00011002*
                                       * 00012002*ˇ
e Charles Stark Draper Laboratory Inc.   * 00013002*
hts reserved.                            * 00014002*
                                         * 00015002**************ˇ
******************************************** 00016002*
                                           * 00017002*  THIS MODULE IS I
ROM COMPILED CODE TO IMPLEMENT SET,        * 00018002*  OR, MORE PRECISE
ˇ
                                             * 00020002*  ON ENTRY, REGI
OINTS TO THE CURRENT TOP-OF-STACK LOCATION   * 00030002*            REGI
OINTS TO THE VAˇ
 POINTS TO THE VALUE                           * 00050002*
                                               * 00060002*  LOGIC:
                              ˇ
                                                 * 00080002*  THIS ROUTI
ES ZEVSET TO UPDATE A BINDING FOR THE VARIABLE,  * 00090002*  OR CREATE
 ONE IF ONE DOES NOT ALREADY EXIST.          ˇ
                                                   * 00110002***********
**************************************************** 00120002*
                                                   * 0013000ˇ
LE IS OBSOLETE IF SHALLOW BINDING IS IN EFFECT.      * 00140002*
                                                     * 00150002*********
****************************************************** 00160002
1                                                        00170002ZILVSET
MINARGS=0,MAXARGS=0,NAME='ZILVSET',SUBRS=ZILSUBR         00180002
1                                                        00190002
24        ˇ
V ,                                                        00210002
E 1                                                        00220002
  #2,#3,12(#11)       STOˇ
    #15,@ZEVSET         GET ADDRESS OF ZEVSET                00240002
    #1,12(,#11)         POINT TO WHERE TO STORE ARGS         00250002
ASR #14,#15             CALL ZEVSET TO Rˇ
#ZRET ,                   RETURN WITH NEW BINDING              00270002
SPACE 2                                                        00280002Z
DS    0A                                               +
  DC    V(ZEVSET)           ADDRESS OF SUBROUTINE    ˇ
    DC    CL8'ZEVSET'                                              00310
BRE EQU   *                                                        00320
    SPACE 2                                                        0z 03
      LTORG                                                          003
      END                                                            003

RVICES'          00010000***********************************************
**************** 00011002*
               * 00012002*ˇ
aboratory Inc.   * 00013002*                     All rights reserved.
                 * 00014002*
                 * 00015002**************ˇ
******************** 00016002*
                   * 00017002* THIS SUBROUTINE HANDLES REQUESTS FROM ASS
ANGUAGE PROGRAMS   * 00018002* FOR VECTOR SPACE OR STRINˇ
S ARE DEFINED (THE   * 00019002* ENTRY CODE IS SET IN REGISTER 1):
                     * 00020002*
                     * 00030002* REGISTER 1 = 0 ... ALLOCATE AN ENTIRE ˇ
IN V/S SPACE AND       * 00040002*                    MINIMALLY FORMAT I
                       * 00050002* REGISTER 1 = 4 ... BEGIN BUILDING A S
                       * 00060002* REGISTER 1 = 8 ... END A STRING AND M
 TRUE ˇ
ING BUILT.               * 00080002* REGISTER 1 = 16 ... CONCATENATE ANO
ING'S DATA TO THIS ONE.  * 00090002*
                     ˇ
N A LOGICAL SEQUENCE BY    * 00110002* THE SAME CALLER, AND NO OTHER VEC
NG BUILDING OR CREATION    * 00120002* MUST BE DONE WHILE THIS IS GOING
 EXAMPLE, TO BUILD A       * 0013000ˇ
NE WITH ENTRY CODE 4 TO      * 00140002* START, THEN DO SEVERAL CALLS WI
 CODE 12 OR 16 TO ADD DATA   * 00150002* TO THE STRING, THEN CALL WITH E
E 8 TO COMPLETE THE STRING.  * 00160002* THE STRINGˇ
 UNTIL ENTRY CODE 8 IS CALLED; * 00170002* IN THAT WAY THE STRING MAY BE
 AWAY" AT ANY TIME SIMPLY BY   * 00180002* FAILING TO CALL ENTRY CODE 8.
                               * 00190002*                        ˇ
                                 * 00200002* NOTE THAT ENTRY CODE 0 MAY
TO CREATE ANY TYPE OF OBJECT     * 00210002* THAT IS VALID IN VECTOR/STR
E, BUT THE OTHER ENTRY CODES     * 00220002* ARE FOR STRINGS ONLY.
 ˇ
                                   * 00240002* DETAILS ON WHAT IS EXPECT
TRY AND WHAT IS RETURNED ARE       * 00250002* GIVEN IN THE COMMENTS ON
IVIDUAL ENTRY COˇ
T CONTAIN THE CURRENT STACK          * 00270002* POINTER FOR ALL ENTRY C
SSIBLY EXCEPT 8) SO THAT THE         * 00280002* GARBAGE COLLECTOR, IF N
, CAN BE INVOKED.              +
                             ˇ
EIR STEREOTYPICAL VALUES ON ENTRY.       * 00310002*
                                         * 00320002*********************
****************************************** 0ˇ
                                           * 00340002* ZIL 1.2 - 12/24/8
W ENTRY CODE (16) ALLOWS THE CONCATENATION * 00350002* OF STRINGS.  THE
CE BETWEEN THIS AND THE ENTRY CODE THAT    * 00360002* STICˇ
RING IS THAT IF ZILVSS HAS TO DO A GC, THE   * 00370002* STRINGS WILL GE
TED, SO ZILVSS HAS TO KNOW HOW TO FIND THEM. * 00380002*
                                             * 00390002*****************
************************************************ 00400002         SPACE
                                                 00410002ZILVSS   CSECT
                                                 00420002         SPACE
         ˇ
,#15          NOTE CHEAPO BASE REGISTER!!!         00440002         USIN
ON,#13                                             00450002         SPAC
                        ˇ
O(#1)           DISPATCH ON ENTRY CODE               00470002VSSGO    B
LLOC            ENTRY CODE 0 - ALLOCATE SPACE        00480002         B
TART            ENTRY CODE 4 - START A ˇ
SEND              ENTRY CODE 8 - END A STRING          00500002
SMORE             ENTRY CODE 12 - ADD DATA TO STRING   00510002
SCONC             ENTRY CODE 16 - CONCATENATE STRING  ˇ
                                                         00530002VSSALLO
0H                  ENTRY CODE 0 - ALLOCATE SPACE        00540002
1                                                        00550002****ˇ
********************************************************** 00560002*
                                                         * 00570002* THI
CODE ALLOCATES SPACE FOR A NEW OBJECT IN VECTOR/STRING   * 00580002* SPA
INIMˇ
HE TYPE CODE (IF IT'S A STRING, NO OTHER TYPE BITS NEED    * 00600002* B
ND STICKS THE LENGTH IN THE APPROPRIATE FIELD.  THE DATA   * 00610002* I
ITIALIZED IN ANY WAˇ
 THIS IN.                                                    * 00630002*
                                                             * 00640002*
R0 = CURRENT STACK POINTER (IN CASˇ
  R1 = 0 (ENTRY CODE)                                          * 0066000
  R2 = SIZE OF OBJECT TO BE GOTTEN (NOT INCLUDING 4-BYTE HDR)  * 0067000
                                                                * 00680

 00690002*        R4 -> THE DATA PORTION OF THE OBJECT
 00700002*        R15 SAME AS R1, IN CASE IT'S TO BE RETURNED AS A VALUE
 00710002*ˇ
 * 00720002*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE
 * 00730002*        THE CALLER MUST SIGNAL AN ERROR IN THIS CASE.
 * 00740002*             ˇ
   * 00750002* NOTE:  REGISTERS 0 AND 2 ARE CLOBBERED.  DO NOT DEPEND ON
   * 00760002*
   * 00770002***************************ˇ
****** 00780002         SPACE 1
       00790002         L     #4,ZLCVSADR         GET ADDRESS OF V/S SPA
       00800002         L     #1,ZLCVSNXT         GET Aˇ
T        00810002         A     #4,ZLCVSLEN         ADD LENGTH TO POINT
F SPACE  00820002         SR    #4,#1               GET LENGTH OF SPACE
LABLE    00830002         SH    #4,=H'8'            SUBTRACT HEADER LEˇ
 COMPARE   00840002         BNP   VSSAGC              AND 4 EXTRA "SLUSH
YTES       00850002         CLR   #2,#4               IF SPACE REQUESTED
ER         00860002         BH    VSSAGC              THEN GO TO GC AND
LSE  ˇ
             00880002* IF #2 IS NEGATIVE, OR IF IT IS 16M OR GREATER, IT
WAYS TAKE    00890002* THE ABOVE BRANCH.  THIS TAKES CARE OF INVALID LEN
ESTS.        0090000ˇ
.              00910002*
               00920002         ST    #2,0(,#1)           STORE LENGTH I
CT HEADER      00930002         MVIˇ
 IN V/S SPACE    00940002         LTR   #2,#2               IF REQUESTED
IS ZERO          00950002         BNZ   *+8                  THEN
                 00960002         LA    #2,1      ˇ
ENGTH              00970002         LA    #2,##VECDAT+3(#1,#2) OBJECT+HE
GTH -> OBJECT END, 00980002         N     #2,=X'FFFFFFFC'        ROUNDED
EXT FULLWORD       00990002         ST    #2,ZLCVSNXT         UPDˇ
-SLOT POINTER        01000002         LA    #4,##VECDAT(,#1)    SET POIN
ATA PORTION          01010002         LR    #15,#1              SET RETU
 TO POINT TO OBJECT  01020002         BR    #14                 RETURN T
ˇ
                       01040002VSSAGC   DS    0H                  HERE I
M FOR OBJECT           01050002         LTR   #2,#2               IF REQ
ENGTH WAS NEGAT+
             ˇ
DDRESS OF RETRY LOCATION   01080002         B     VSSGC               GO
ARBAGE COLLECTION          01090002         EJECT
                           0ˇ
DE 4 - START A STRING        01110002         SPACE 1
                             01120002***********************************
**************************** 01130002*     ˇ
                             * 01140002* THIS ENTRY CODE STARTS BUILDING
G IN THE AVAILABLE SPACE.    * 01150002* NOTHING IS SPECIFIED EXCEPT THE
TO BEGIN MAKING A STRING.    * 01160002*                  ˇ
                               * 01170002* ENTRY: R0 = CURRENT STACK POI
 CASE GC REQUIRED)             * 01180002*        R1 = 4 (ENTRY CODE)
                               * 01190002*        R2 = NOT APPLICABLE
                                 * 01200002*
                                 * 01210002* EXIT:  R1 -> THE STRING BEI
                                 * 01220002*        R4 -> THE DATA PORTI
E STRINGˇ
GTH OF THE STRING                  * 01240002*
                                   * 01250002*        IF R4 IS ZERO ON R
HERE WAS NO ROOM AVAILAˇ
N ERROR IN THIS CASE.                * 01270002*
                                     * 01280002*************************
**************************************ˇ
                                         01300002         L     #4,ZLCVS
    GET ADDRESS OF V/S SPACE             01310002         L     #1,ZLCVS
    GET POINTER TO NEXT AVAILABLE SLOT   01320002    ˇ
      ADD LENGTH TO POINT TO END OF SPACE  01330002         SR    #4,#1
      GET LENGTH OF SPACE NOW AVAILABLE    01340002         CH    #4,=H'
      WE NEED AT LEAST 8 BYTES TO START    01350002         BL    VSˇ
        IF NOT, GO TO GC AND RETRY. ELSE     01360002*
        #1 WILL BE POINTER TO NEW STRING     01370002         LA    #5,#
        SET BITS INDICATING STRING TYPE      01380002         SLDL  #4,5
   ˇ
)         INITIALIZE HEADER AND DATA AREA      01400002         LA    #4
T(,#1)    POINT TO DATA AREA OF STRING         01410002******** XR    #5
          #5 (LENGˇ
            RETURN TO CALLER                     01430002         SPACE
                                                 01440002VSSSGC   DS
            NO ROOM                               01450002ˇÁ
  LA    #1,VSSSTART         SET ADDRESS OF RETRY LOCATION        0146000
  B     VSSGC               GO TO DO GARBAGE COLLECTION          0147000
  EJECT                                                          0148000
D   DS    0H                  ENTRY CODE 8 - END A STRING          01490
    SPACE 1                                                        01500
****************************************************************** 01510
         ˇ
HIS ENTRY CODE FINISHES BUILDING A STRING STARTED BY THE OTHER     * 015
NTRY CODES (4 AND 12).  THIS ACTUALLY MAKES THE STRING "EXIST"     * 015
Y UPDATING THE AVAILABLEˇ
                                                                     * 0
 ENTRY: R0 = NOT APPLICABLE (NO GC REQUIRED FOR THIS)                * 0
        R1 = 8 (ENTRY CODE)            ˇ
2*        R2 = NOT APPLICABLE                                          *
2*        R4 -> END OF STRING (POSITION FOLLOWING LAST USED BYTE)      *
2*        R5 = FINAL LENGTH OF STRING                 ˇ
002*
002* EXIT:  R1 -> THE STRING BEING BUILT
002*        R15 SAME, IN CASE IT'S TO BE RETURNED AS A VALUE         ˇ
40002*
50002*******************************************************************
60002         SPACE 1
7000ˇ
1680002         BZR   #14                 THEN RETURN DOING NOTHING. ELS
1690002         L     #1,ZLCVSNXT         GET ADDRESS OF STRING BEING BU
1700002*           ˇ
 01710002         STCM  #5,7,1(#1)          STORE LENGTH OF THE STRING
 01720002         LTR   #5,#5               IF REQUESTED LENGTH IS ZERO
 01730002         BNZ   *+8       ˇ
   01740002         LA    #5,1                  INSURE NONZERO LENGTH
   01750002         LA    #0,4+3(#5,#1)       POINT TO END OF STRING...
   01760002         N     #0,=X'FFFFFFFC'      ROˇ
     01770002         ST    #0,ZLCVSNXT         UPDATE AVAILABLE SLOT PO
     01780002*                                  (THIS MAKES THE STRING A
     01790002         LR    #15,#1              RETURN STRING ADˇ
NEEDED 01800002         BR    #14                 RETURN TO CALLER
       01810002         EJECT
       01820002VSSMORE  DS    0H                  ENTRY CODE 12 - ADD DA

           01840002*****************************************************
********** 01850002*
         * 01860002* THIS ENTRY CODE ADDS DATA TO A STRING CURRENTLY BEI
 VIA     * 0ˇ
           * 01880002*
           * 01890002* ENTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQ
           * 01900002*     ˇ
             * 01910002*        R2 = LENGTH OF DATA TO BE ADDED TO STRIN
             * 01920002*        R4 -> THE CURRENT END OF STRING, WHERE D
O BE ADDED   * 01930002*        R5 = THE Cˇ
               * 01940002*        R6 -> THE DATA TO BE ADDED TO STRING
               * 01950002*
               * 01960002* EXIT:                         ˇ
                 * 01970002*        R1 -> THE BEGINNING OF THE ENTIRE ST
T                * 01980002*        R4 -> THE NEW END OF THE STRING, AFT
ADDED            * 01990002*        R5 = THE NEW LENGTH OF THE STRING, A
ATA ADDED          * 02000002*
                   * 02010002*        IF R4 IS ZERO ON RETURN, THERE WAS
 AVAILABLE.        * 02020002*        THE CALLER MUST SIGNAL AN ERROR IN
SE, ALTˇ
                     * 02040002*
                     * 02050002*****************************************
**********************ˇ
                         02070002         LTR   #4,#4               IF #
STRING BUILDING FAILED)  02080002         BZR   #14                 THEN
DOING NOTHING. ELSE      02090002    ˇ
S OF V/S SPACE             02100002         A     #1,ZLCVSLEN         AD
 TO POINT TO END OF SPACE  02110002         SR    #1,#2               SU
ENGTH OF STUFF TO ADD      02120002         CR    #1ˇ
TUFF WON'T FIT IN SPACE      02130002         BL    VSSMGC
TO GC AND RETRY              02140002         AR    #5,#2
T STRING LENGTH BY NEW AMT   02150002         C     #5,=X'00FFFFFF'ˇ
S EXCEEDS MAX STRING LENGTH    02160002         BH    VSSFAIL
IGNAL ERROR                    02170002         STM   #2,#3,ZLCDBL
ARILY SAVE REGS                02180002         LR    #0,#4
R ˇ
LENGTH OF DATA TO ADD            02200002         LR    #2,#6
PTR TO NEW DATA                  02210002         LR    #3,#1
LENGTH OF NEW DAT A               02220002ˇÁ
            MOVE NEW DATA TO STRING AREA         02230002         LR
            POINT TO NEW END-OF-STRING LOC       02240002         L
NXT         GET ADDRESS OF STRING BEING BUILT    02250002 ˇ
ECDAT(,#1)    POINT TO BEGINNING OF STRING TEXT    02260002         LM
ZLCDBL        RESTORE REGS                         02270002         BR
              RETURN TO CALLER                     02280002         SPAC
                                                     02290002VSSMGC   DS
                NO ROOM                              02300002         L
LCVSNXT         SAVE ADDRESS OF AVAILABLE SLOT       02310002         ST
LDSTR   ˇ
                  RETRY LOCATION FOLLOWS...            02330002
,VSSGC            GO TO DO GARBAGE COLLECTION          02340002*
                       ˇ
E STRING FROM OLD V/S SPACE TO NEW V/S SPACE             02360002*
                                                         02370002
#0,#3,VSSSAVE2      SAVE VOLATILE REGSˇ
  #0,ZLCVSNXT         POINT TO AVAILABLE SLOT IN NEW VSS   02390002
  #2,OLDSTR           POINT TO OLD-SPACE STRING DATA       02400002
  #3,4(,#5)           STRING LENGTH + HEADER LENGTH  ˇ
    #1,#3               IS LENGTH OF STUFF TO MOVE           02420002
CL  #0,#2               MOVE STRING FROM OLD SPACE TO NEW    02430002
    #4,#0               SET NEW END-OF-STRING POINTER        0244000ˇ
LM    #0,#3,VSSSAVE2      RESTORE REGS                         02450002
B     VSSMORE             NOW RETRY                            02460002
EJECT                                                          02470002V
DS ˇ
  SPACE 1                                                        0249000
**************************************************************** 0250000
                  ˇ
S ENTRY CODE CONCATENATES THE DATA FROM ANOTHER STRING WITH THE  * 02520
ING CURRENTLY BEING BUILT VIA ENTRY CODE 4.                      * 02530
                                 ˇ
NTRY: R0 = CURRENT STACK POINTER (IN CASE GC REQUIRED)             * 025
      R1 = 16 (ENTRY CODE)                                         * 025
      R2   NOT USED                             ˇ
        R4 -> THE CURRENT END OF STRING, WHERE DATA IS TO BE ADDED   * 0
        R5 = THE CURRENT LENGTH OF THE STRING                        * 0
        R6 -> THE OTHER STRING WHOSE DATA IS TO BE ADDED TO THI+
2*                                                           ˇ
002* EXIT:
002*        R1 -> THE BEGINNING OF THE ENTIRE STRING TEXT
002*        R4 -> THE NEW END OF THE STRING, AFTER DATA ADDED
40002*        R5 = THE NEW LENGTH OF THE STRING, AFTER DATA ADDED
50002*
60002*        IF R4 IS ZERO ON RETURN, THERE WAS NO ROOM AVAILABLE.
70002*     ˇ
2680002*        THE ERROR MAY BE DEFERRED.
2690002*
2700002*******************ˇ
 02710002         SPACE 1
 02720002         LTR   #4,#4               IF #4=ZERO (STRING BUILDING
 02730002         BZR   #14              ˇ
   02740002         CLI   0(#6),##STRING      IF "OTHER" OBJECT IS NOT A
   02750002         BNE   CERROR              THEN ERROR
   02760002         L     #1,ZLCVSADR         GET ADDRESˇ
     02770002         A     #1,ZLCVSLEN         ADD LENGTH TO POINT TO E
ACE  02780002         XR    #2,#2
     02790002         ICM   #2,7,1(#6)          GET LENGTH OF TEXT OF Oˇ
RING   02800002         SR    #1,#2               SUBTRACT LENGTH OF STU
D      02810002         CR    #1,#4               IF NEW STUFF WON'T FIT
E      02820002         BL    VSSCGC              THEN GO TO GC AND RETR
      ˇ
EW AMT   02840002         C     #5,=X'00FFFFFF'     IF THIS EXCEEDS MAX
ENGTH    02850002         BH    VSSFAIL             THEN SIGNAL ERROR
         02860002    ˇ
           02870002         LR    #0,#4               GET PTR TO WHERE T
W DATA     02880002         LR    #1,#2               GET LENGTH OF DATA
           02890002         LA    #2ˇ
             02900002         LR    #3,#1               GET LENGTH OF NE
             02910002         MVCL  #0,#2               MOVE NEW DATA TO
AREA         02920002         LR    #4,#0          ˇ
RING LOC       02930002         L     #1,ZLCVSNXT         GET ADDRESS OF
BEING BUILT    02940002         LA    #1,4(,#1)           POINT TO BEGIN
STRING TEXT    02950002         LM    #2,#3,ZLCDBL        RESTORE ˇ
                 02960002         BR    #14                 RETURN TO CA
                 02970002         SPACE 1
                 02980002VSSCGC   DS    0H                  NO ROOM
                  02990002ˇÁ
                                 03000002* WE MUST PUSH THE "OTHER" STRI
E STACK SO THAT IT CAN BE GC'D   03010002* AND, IF IT HAS BEEN RELOCATED
 FIND IT AGAIN.                  03020002*ˇ
                                   03030002         L     #1,ZLCVSNXT
VE ADDRESS OF AVAILABLE SLOT       03040002         ST    #1,OLDSTR
AUSE GC WILL MOVE IT               03050002         LTR  ˇ
POINT TO CURRENT STACK TOP           03060002         BZ    VSSFAIL
IF ZEROED BY PREV GC ATTEMPT, FAIL   03070002         LA    #0,4(,#1)
BUMP STACK POINTER UP BY 4           03080002         #ZPDS (0)
  CHECK FOR STACK OVERFLOW             03090002         ST    #6,0(,#1)
  PUSH OTHER-STRING PTR FOR GC'ING     03100002         ST    #1,OLDSTAC
  SAVE ITS LOCATION                    03110002********
  RETRYˇ
                                         03130002* SINCE WE CHANGED REGI
O ACCOMMODATE THE EXTRA STACK LOCATION,  03140002* BUT REGISTER 12 POINT
 CALLER'S CODE, THIS Wˇ
PECIAL BIT.  BUT WE DON'T WANT TO UPSET    03160002* ANYBODY IN CASE THE
ALREADY ON, SO...                          03170002*
                                     ˇ
GCBLD   IF TRUST-#0 FLAG IS OFF              03190002         BO    VSSC
        THEN...                              03200002         OI    ZLCG
GCBLD    TURN IT ON                          0321000ˇ
           GO TO DO GARBAGE COLLECTION         03220002         NI    ZL
55-ZLCGCBLD TURN IT OFF AGAIN                  03230002         B     VS
                                               03240002VSSCGC1  DS ˇ
            ELSE...                              03250002         #BAS
            GO TO DO GARBAGE COLLECTION          03260002VSSCGC2  DS
                                                 03270002*
  ˇ
NG FROM OLD V/S SPACE TO NEW V/S SPACE             03290002*
                                                   03300002         STM
VSSSAVE2      SAVˇ
LCVSNXT         POINT TO AVAILABLE SLOT IN NEW VSS   03320002         L
LDSTR           POINT TO OLD-SPACE STRING DATA       03330002         LA
(,#5)           STRING LENGTH + ˇ
,#3               IS LENGTH OF STUFF TO MOVE           03350002
,#2               MOVE STRING FROM OLD SPACE TO NEW    03360002
,#0               SET NEW END-OF-STRING POINTER+
#0,#3,VSSSAVE2      RESTORE REGS             ˇ
  #6,OLDSTACK         RELOAD ORIGINAL TOP-OF-STACK PTR     03390002
  #6,0(,#6)           RELOAD STRING PTR (MAY BE RELCATED)  03400002
  VSSCONC             NOW RETRY                            0ˇ
ECT                                                          03420002VSS
    0H                                                       03430002
ACE 1                                                        03440002***
************************************************************** 03450002*
                                                             * 03460002*
UTINE IS BRANCHED TO WHEN THERE ISN'T ENOUGH ROOM TO         * 03470002*
 THE REQUEˇ
TEMPTED SO THAT ENOUGH ROOM WILL BE AVAILABLE.                 * 0349000
                                                               * 0350000
TRY #1 -> THE PLACE TO BRˇ
                                                                 * 03520
E THAT WHEN THIS ROUTINE IS FIRST ENTERED, #0 POINTS TO THE      * 03530
RENT STACK LOCATION (REQUIRED BY GC).  Wˇ
XECUTED ONCE, #0 IS SET TO ZERO SO THAT THE SECOND TIME THRU,      * 035
T'LL KNOW THAT A GC WAS ATTEMPTED ALREADY AND THERE JUST WON'T     * 035
E ENOUGH ROOM, SO A FAILURE IS DETECTED.               ˇ
                                                                     * 0
 NO ERROR IS SIGNALLED IN THIS ROUTINE.  IT IS THE CALLER'S          * 0
 RESPONSIBILITY TO SIGNAL ERRORS WHEN THERE IS NO ROOM TO BUILD      *ˇ
2* THE STRING.  IN THIS WAY, FOR EXAMPLE, A ROUTINE CAN CONTINUE TO    *
2* RETRIEVE CHARACTERS TO BUILD A STRING AND NOT CONFUSE AN INPUT      *
2* STREAM UNTIL THE EXPECTED END IS REACHED - THEN SIGNAL THE ERROR.   *
2*   ˇ
002*********************************************************************
002         SPACE 1
002         LTR   #0ˇ
70002         BZ    VSSFAIL             THEN FAILURE - NO ROOM AT ALL
80002         #BASR #4,0
90002         USING *,4            ˇ
3700002         DROP  #15
3710002         L     #9,ZLCGCEND         FORCE END OF FREE LIST
3720002         STM   #14,#2,VSSSAVE2     SAVE VOLˇ
 03730002         LR    #1,#10              SET DUMMY ARG 1 FOR CONS = N
 03740002         LR    #2,#10              SET DUMMY ARG 2 FOR CONS = N
 03750002*                                  #0 ALREADY POINTS TO  STACK
   03760002ˇÁ
NS               03770002         #BASR #14,#15             CALL CONS TO
AGE COLLECTION   03780002         LM    #14,#2,VSSSAVE2     RESTORE VOLA
S                03790002 ˇ
                   03800002         XR    #0,#0               INDICATE W
GC ALREADY         03810002         BR    #1                  GO TO RETR
E LOCATION         03820002         SPACEˇ
                     03830002VSSFAIL  DS    0H
                     03840002         XR    #4,#4               SHOW FAI
CLEARING DATA PTR    03850002         XR    #15,#15     ˇ
RN POINTER TOO         03860002         BR    #14                 RETURN
ER IN FAILURE          03870002         EJECT
                       03880002OLDSTR   DS    A                   PLACEˇ
FOR STRING SLOT          03890002OLDSTACK DS    A                   SAVE
-STACK ADDRESS           03900002VSSSAVE2 DS    5A                  SAVE
ILE CALLING GC           03910002         SPACE 1
      ˇ
                           03930002         LR    #3,#15
                           03940002         USING ZILVSS,#3
                     ˇ
                             03960002         B     BLOWUP
                             03970002         SPACE 1
                             0398000ˇ
                               03990002         LR    #3,#15
                               04000002         USING ZILVSS,#3
                               04010002         LA ˇ
                                 04020002         B     BLOWUP
                                 04030002         SPACE 1
                                 04040002BLOWUP   DS    0H        ˇ
                                   04050002         SPACE 1
                                   04060002*
                                   04070002* Extract function name for i
 ˇ
                                     04090002         SPACE 1
                                     04100002         XR    #1,#1
Clear insert regˇ
  Initialize fake string length to 0   04120002         IC    #1,4(,#12)
  Get length of module identifier      04130002         SH    #1,=H'16'
  Subtract length of date/time +
    If no name, skip move    ˇ
T)    If longer than our maximum           04160002         BNH   *+8
      then                                 04170002         LA    #1,L'F
       use our maximum length              0ˇ
        Store length into fake string        04190002         BCTR  #1,0
        Reduce for execute                   04200002         EX    #1,M
        Move function name to fake string    04210002SKIPNAˇ
                                               04220002         SPACE 1
                                               04230002         B     BO
                                               04240002BOOM     B     ER
                                                 04250002         B
                                                 04260002         SPACE
                                                 04270002ERROR1   DS
         ˇ
=NO,'ZIL2050 ',FUNSTR,': Invalid ZILVSS request foX04290002
,' bytes of vector/string space.'                  04300002         SPAC
                        ˇ
                                                     04320002         #E
IX=NO,'ZIL2051 ',FUNSTR,': Object to be concatenatedX04330002
ZILVSS is not a string.'               ˇ
                                                       04350002MVCNAME
NTEXT(*-*),5(#12) Executed: Move function name to str  04360002
                                                      ˇ
0H,XL1              Align fake string to non-halfword    04380002FUNSTR
YL1(##STRING)                                            04390002FUNLEN
AL3                                                      04400002FUNTˇ
  CL64                                                     04410002
G                                                          04420002
T                                                          04430002
U   ˇ
ECT                                                          04450002
COM                                                          04460002
ECT                d                                           04470002
END                                                            04480002

           00010000*****************************************************
********** 00011002*
         * 00012002*ˇ
ory Inc.   * 00013002*                     All rights reserved.
           * 00014002*
           * 00015002**************ˇ
************** 00016002*
             * 00017002*  THIS MODULE IS INVOKED FROM COMPILED CODE TO I
 SYMEVAL,    * 00018002*  OR, MORE PRECISELY, ACCEˇ
UES.           * 00019002*
               * 00020002*  ON ENTRY, REGISTER 1 POINTS TO THE CURRENT T
ACK LOCATION   * 00030002*            REGISTER 2 POINTS TO THE VAˇ
                 * 00040002*
                 * 00050002*  LOGIC:
                 * 00060002*
ˇ
 THE VARIABLE.     * 00080002*  IF ZEVSYM RETURNS NIL,  AN "UNBOUND VARI
ROR IS SIGNALLED.  * 00090002*
               ˇ
********************** 00110002*
                     * 00120002* NOTE: THIS MODULE IS OBSOLETE IF SHALLO
G IS IN EFFECT.      * 0013000ˇ
                       * 00140002***************************************
************************ 00150002         SPACE 1
                         00160002ZILVSYM  #ZBˇ
SYM',SUBRS=ZILSUBR         00170002         SPACE 1
                           00180002         #ZPDS 20
                           00190002         #ZSAV ,         ˇ
                             00200002         SPACE 1
                             00210002         ST    #2,12(#11)
MBOL ARG ON STACK            00220002         L     #15,@ZEVSYM
DRESS OF ZEVSYM                00230002         LA    #1,12(,#11)
TO WHERE TO STORE ARGS         00240002         #BASR #14,#15
EVSYM TO RETURN A BINDING      00250002         CR    #15,#10
BINDING WAˇ
 ERROR                           00270002         #ZRET ,
 RETURN WITH BINDING             00280002ERROR    DS    0H
                         +
                       ˇ
on into message                      00310002*
                                     00320002         SPACE 1
                                     0ˇ
  THIS IS WHERE #12 WAS SAVED...       00340002         XR    #1,#1
  Clear insert register                00350002         STCM  #1,7,FUNLE
  Initialize fake string length to 0   00360002      ˇ
    Get length of module identifier      00370002         SH    #1,=H'16
    Subtract length of date/time info    00380002         BNP   SKIPNAME
    If no name, skip move                00390002         CH    #1,=ˇ
T)    If longer than our maximum           00400002         BNH   *+8
      then                                 00410002         LA    #1,L'F
       use our maximum length              00420002         STCM  #1,7,F
   ˇ
        Reduce for execute                   00440002         EX    #1,M
        Move function name to fake string    00450002SKIPNAME DS    0H
                  ˇ
                                               00470002         #ERR  PR
          DISPLAY ERROR MESSAGE               X00480002               'Z
ILVSYM: Unbound variable ',12(#11ˇ
ion ',FUNSTR,'.'                                 00500002         SPACE
                                                 00510002MVCNAME  MVC
*-*),5(#2)  Executed: Move function name to str ˇ
                                                   00530002         DS
              Align fake string to non-halfword    00540002FUNSTR   DC
STRING)                                            00550002FUNLˇ
                                                     00560002FUNTEXT  DS
                                                     00570002         SP
                                                     00580002ZILSUBRS DS
                                                       00590002@ZEVSYM
ZEVSYM)           ADDRESS OF SUBROUTINE                00600002
8'ZEVSYM'                                              00610002ZILSUBRE
             ˇ
2                                                        00630002
                                                         00640002
                                                          00650002{

       00010000*********************************************************
****** 00011004*
     * 00012004*ˇ
Inc.   * 00013004*                     All rights reserved.
       * 00014004*
       * 00015004**************ˇ
********** 00016004*
         * 00017004* (ZILVTOS vector1 length2)
         * 00018004*                          ˇ
           * 00019004*  vector1    - a vector of characters
           * 00020004*  length2    - the number of vector elements to ma
a string   * 00030004*                                       ˇ
             * 00040004* This function is used by the new ZIL reader to
rings.       * 00050004*
             * 00060004*************************************************
**************** 00070004ZILVTOS  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZILVTO
                 00080004         #ZPDS 2*4+12+0 = 20       DEFINE STACK
                 00090004         #ZSAV ,                   SAVE REGISTE
           ˇ
                   00110004* Check arg 1 - must be vector of characters.
                   00120004*
                   0013000ˇ
                     00140004         CLI   ##TYPE(#6),##VECTOR Arg 1 mu
vector               00150004         BNE   ERROR1              else err
                     00160004         XR ˇ
egister                00170004         ICM   #5,7,1(#6)          Get le
vector arg 1           00180004         SRA   #5,2                Divide
 get # of elements     00190004*                        ˇ
                         00200004* Check arg 2 - must be fixnum and not
than length of arg 1.    00210004*
                         00220004         CLI   ##TYPE(#7),##FIXNUM Argˇ
gth) must be a fixnum      00230004         BNE   ERROR2              el
                           00240004         L     #7,##CDR(,#7)       Ge
c length value             00250004         LTR   #7,#7               If
ed lenˇ
t return null string         00270004         BM    ERROR2
sted length negative, error  00280004         CR    #7,#5
ive but longer than v+
rror               ˇ
                                 00310004* Allocate space for a string o
quested length.                  00320004*
                                 0ˇ
ngth for ZILVSS = arg 2            00340004         XR    #1,#1
TRY CODE 0 = ALLOCATE NEW SPACE    00350004         L     #15,ZLCVSS
T ADDRESS OF ZILVSS                00360004      ˇ
SET CURRENT STACK POINTER FOR GC     00370004         #BASR #14,#15
CALL ZILVSS TO CREATE A STRING       00380004         LTR   #15,#15
IF STRING BUILD FAILED               00390004         BZ    ERROˇ
  THEN ERROR                           00400004*
                                       00410004* #4 points to the text p
f the string.                          00420004*

    Reload arg 1 pointer from stack      00440004         LA    #3,##VEC
    Point to 1st element of vector arg 1 00450004VLOOP    DS    0H
              ˇ
      Get element of vector                00470004         CLI   ##TYPE
IXNUM Each element must be a character     00480004         BNE   ERROR4
      (i.e. a fixnum between ˇ
)       Get numeric value                    00500004         CL    #0,#
        If not within character range        00510004         BH    ERRO
        then error                          ˇ
          Store character into string          00530004         LA    #3
          Bump input pointer                   00540004         LA    #4
          Bump output pointer                  00550004    ˇ
            Continue (arg 2) times               00560004         B
            Return new-string                    00570004         SPACE
                                                 00580004RETNULL  DS
              Requested length is zero             00590004         LA
LLSTR         Return null string                   00600004******** B
              Return new-string                    00610004         SPAC
         ˇ
                                                     00630004         SP
                                                     00640004         #Z
                RESTORE ˇ
                                                       00660004NULLSTR
                  Align null string to fullword        00670004
1(##STRING),AL3(0),XL4'00'  String ""                   00680004ˇÁ
        SPACE 1                                                        0
RROR1   #ERR  'Argument 1 to ZILVTOS not a vector - ',0(#11)           0
RROR2   #ERR  'Argument 2 to ZILVTOS not a non-negative fixnum - ',   X0
ˇ
4ERROR3   #ERR  'Argument 2 to ZILVTOS exceeds length of argument 1 - ',
4               4(#11)
4ERROR4   #ERR ˇ
004               0(#2)
004ERRORGC  #ERR  'ZIL4010 ZILVTOS: Not enough vector/string space to bu
004               d string.',Pˇ
80004         SPACE 1
90004         LTORG
00004         END                            Õ
0810004
ER FOR FUNCTION ARGS'    00010000***************************************
************************ 00011002*
                       * 00012002*ˇ
Draper Laboratory Inc.   * 00013002*                     All rights rese
                         * 00014002*
                         * 00015002**************ˇ
**************************** 00016002*
                           * 00017002*  THIS MODULE IS INVOKED FROM COMP
E TO IMPLEMENT THE         * 00018002*  "FUNCTION" SPECIAL FORM ˇ
OWN QUANTITIES.              * 00019002*  THIS IS A NORMAL-LOOKING FUNCT
 TAKES 2 ARGUMENTS:          * 00020002*  (1) THE OBJECT OUT OF WHICH A
AL ARGUMENT IS TO BE BUILT   * 00030002*  (2) T OR NIL, DEPENDING ON WHE

E FUNARG IS TO BE BUILT.       * 00050002*
                               * 00060002*  LOGIC:
              ˇ
                                 * 00080002*  THIS ROUTINE ATTEMPTS TO R
HE FIRST ARG AS A COMPILED CODE  * 00090002*  FUNCTION (A SYMBOL WITH A
BR PROPERTY).  IF SO, A COMPIˇ
INE CODE FOR "FUNCTION" WOULD      * 00110002*  DO FOR A KNOWN FUNCTION.
ISE, AN INTERPRETED LEXICAL        * 00120002*  CLOSURE OBJECT (FUNARG)
, USING MAKE-FUNARG OR SOMETHING   * 0013000ˇ
 UNDER THE INTERPRETER.              * 00140002*
                                     * 00150002*************************
************************************** 00160002*           ˇ
                                       * 00170002* 10/87 - Since (FUNCTI
and (SUBR FOO) are equivalent in       * 00180002*         lexically sco
on Lisp - i.e. there is no lexical     * 00190002*         environment t
ure for a symbol FOO - there is no       * 00200002*         difference
ssing when arg 1 to this subroutine      * 00210002*         is a symbol
r arg 2 is T or NIL.  We found that      * 00220002*         when the SU
rty of thˇ
inal lexical environment of that           * 00240002*         closure w
 ignored in favor of the (useless)         * 00250002*         current l
nvironment, causing erroˇ
ing traced.  Therefore, when arg 1 is        * 00270002*         a symbo
ore arg 2, but we check to see if the        * 00280002*         SUBR pr
f the symbol names a lexical closure.  +
                                     ˇ
 is to see that the SUBR property is CODEP and,  * 00310002* if it is, r
at value itself.  We don't use new environment.  * 00320002*
                                                 * 0ˇ
**************************************************** 00340002*
                                                   * 00350002* HOPEFULLY
Y SUBRS WILL BE STORED IN THE FUNCTION CELL OF THE * 00360002* SYMBˇ
OF (OR IN ADDITION TO) THE PROPERTY LIST.  IF THIS   * 00370002* IS SO,
ILL THE CALL TO GET AND THE NECESSITY OF INTERNING   * 00380002* THE SYM
R" IN THIS MODULE.                                   * 00390002*
  ˇ
******************************************************** 00410002
1                                                        00420002ZILXCLO
MINARGS=2,MAXARGSˇ
  PTRS=ZLBPTRS,ATOMS=ZILATOM,LISTS=ZILLIST                 00440002
E 1                                                        00450002
S 2*4+12+12 = 32                ˇ
SAV ,                                                        00470002
ACE 1                                                        00480002*
                                               ˇ
D FIRST-TIME-ONLY CODE TO INTERN ATOMS USED BY THIS MODULE.    00500002*
                                                               00510002Z
NOP   AROUND              EXECUTE ONCE, THEN BRANCH.          ˇ
  LA    #1,ZLBPTRS          ADDRESS THE LIST OF POINTERS         0053000
  L     #15,ZLCSINT         GET ADDRESS OF ZILSINT               0054000
  LA    #0,20(,#11)         SET TOP-OF-STACK POINTER             0055000
    #BASR #14,#15             CALL ZILSINT                         00560
    OI    ZAPGO+1,X'F0'       CHANGE NOP TO BRANCH NEXT TIME       00570
D   DS    0H                                                       00580
    SPACE 1 ˇ
      L     #1,0(,#11)          PICK UP FUNCTIONAL ARG               006
      SPACE 1                                                        006
TYPE  DS    0H             ˇ
        SPACE 1                                                        0
        CLI   ##TYPE(#1),##SYMBOL                                      0
******* BE    ZSYMBOL             IF SYMBOˇ
2         BNE   MAKEFUN             ELSE MAKE INTERPRETED CLOSURE
2         SPACE 1
2ZSYMBOL  DS    0H                  IF IT IS A SYMBOL... 
002ˇÁ
         00690002*                                  ARG 1 TO GET = OUR A
         00700002         L     #2,ASUBR            ARG 2 TO GET = 'SUBR
         00710002 ˇ
           00720002         STM   #1,3,20(#11)        STORE ARGS
           00730002         L     #15,@GET
           00740002         LA   ˇ
             00750002         #BASR #14,#15             CALL GET TO (GET
'SUBR)       00760002         TM    ##TYPE(#15),##CODE  SUBR PROPERTY MU
DEP          00770002         BO    RETURN      ˇ
n it!          00780002         SPACE 1
               00790002MAKEFUN  DS    0H                  ELSE MUST BE I
IVE            00800002         SPACE 1                        ˇ
                 00810002         C     #10,4(,#11)         IF ARG 2 TO
= NIL            00820002         BNE   MAKEFUNT            THEN...
                 00830002         L     #15,0(,#11)          JUST RETURN
 ITSELF            00840002         B     RETURN              ELSE...
                   00850002MAKEFUNT DS    0H                  MAKE AN IN
VE LEXICAL CLOSURE 00860002         SPACE 1
             ˇ
******************** 00880002*
                   * 00890002* NOTE: THE SECOND ARG TO MAKE-FUNARG IS TH
NMENT, WHICH WE    * 0090000ˇ
).  WE SPECIFY THE   * 00910002* CURRENT LEXICAL ALIST FOR THIS.
                     * 00920002*
                     * 00930002************ˇ
************************ 00940002         SPACE 1
                         00950002         L     #1,ZLCFALST         GET
LEXICAL ALIST            00960002         ST    #1,20(,#11ˇ
1 TO MKNEWENV              00970002         L     #15,@MKNEWEN        GE
S OF MKNEWENV              00980002         LA    #1,20(,#11)         SE
R TO ARGS ON STACK         00990002         #BASR #14,#15             CA
EWENV 2 MAKE NEW ENVIRONMENT 01000002         ST    #15,24(,#11)
G 2 TO MAKE-FUNARG           01010002         L     #14,0(,#11)
1 TO THIS FUNCTION           01020002         ST    #14,20(,#11)
G 1 TO Mˇ
DRESS OF MKFUNARG              01040002         LA    #1,20(,#11)
INTER TO ARGS ON STACK         01050002         #BASR #14,#15
AKE-FUNARG TO BUILD A F+
RETURN WITH IT       ˇ
                                   01080002RETURN   DS    0H
TURN                               01090002         SPACE 1
                                   0ˇ
                                     01110002         SPACE 2
                                     01120002ZILSUBRS DS    0A
                                     01130002@GET  ˇ
  ADDRESS OF SUBROUTINE                01140002         DC    CL8'GET'
                                       01150002@MKNEWEN DC    V(MKNEWENV
  ADDRESS OF SUBROUTINE                01160002         DC    CL8'ˇ
                                         01170002@MKFUNAR DC    V(MKFUNA
    ADDRESS OF SUBROUTINE                01180002         DC    CL8'MKFU
                                         01190002ZILSUBRE EQU   *
 ˇ
                                           01210002ZILATOMS DS    0A
                                           01220002ASUBR    DC    A(SUBR
)     ADDRESS OFˇ
                                             01240002ZILLISTS EQU   *
                                             01250002ZILLISTE EQU   *
                               ˇ
                                               01270002SUBR     #AATM 'S
                                               01280002         SPACE 2
                                              ®  01290002         LTORG
                                                 01300002         END
                                                 01310002{

10000*******************************************************************
11002*
12002*ˇ
0013002*                     All rights reserved.
0014002*
0015002**************ˇ
 00016002*
 00017002*  THIS MODULE IS INVOKED FROM COMPILED CODE TO IMPLEMENT THE
 00018002*  COMPILER-GENERATED FORM ˇ
 * 00019002*
 * 00020002* ON ENTRY:  REGISTER 0 = CURRENT TOP-OF-STACK POINTER
 * 00030002*            REGISTER 1 --> THE FUNCTIONˇ
   * 00040002*            REGISTER 2 --> THE COMPILED CODE ITSELF
   * 00050002*
   * 00060002* ON RETURN: REGISTER 15 IS THE RETURN VALUE FROM ZEVˇ
     * 00070002*
     * 00080002*  LOGIC:
     * 00090002*
 ˇ
RTY TO * 00110002*  THE NAMED FUNCTION.  NOTE THAT DYNAMIC BINDING IS EF
 NO    * 00120002*  SUPPORT FOR LEXICAL CLOSURES DEFUNNING IS AVAILABLE
       * 0013000ˇ
         * 00140002*****************************************************
********** 00150002         SPACE 1
           00160002ZILXDEF  #ZBˇ
             00170002         SPACE 1
             00180002         LR    #3,#0               GET CURRENT TOP-
 POINTER     00190002         LA    #0,32(,#3)ˇ
               00200002         #ZPDS (0)
               00210002         STM   #5,#7,0(#3)
               00220002         STM   #11,12,12(#3)          ˇ
                 00230002         ST    #14,20(,#3)
                 00240002         LR    #12,#15
                 00250002         USING ZILXDEF,#12
                   00260002         DROP  #15
                   00270002         LR    #11,#3
                   00280002         SPACE 1
           +
         ˇ
ODE                    00310002         XR    #2,#2               SET AL
= NIL                  00320002         L     #15,ZLCCONS         GET AD
 ZILCONS               0ˇ
'RE IN CHARGE OF #0      00340002         #BASR #14,#15             CALL
 MAKE A SUBR             00350002         NI    ZLCGCFLG,255-ZLCGCBLD TU
0-HANDLING FLAG          00360002      ˇ
ITS                        00370002         ST    #15,28(,#11)        SE
TO ZEVDSUB                 00380002         L     #15,@ZEVDSUB        GE
S OF ZEVDSUB               00390002         LA    #1,2ˇ
 ARGS ON STACK               00400002         #BASR #14,#15
DSUB FOR RUN-TIME DEFUN      00410002         SPACE 1
                             00420002         LR    #3,#11           ˇ
                               00430002         LM    #5,#7,0(#3)
                               00440002         LM    #11,12,12(#3)
                               00450002         L     #14,20(,#3)
    ˇ
                                 00470002         SPACE 1
                                 00480002         #ZRET ,
                   ˇ
                                   00500002ZILSUBRS DS    0A
                                   00510002@ZEVDSUB DC    V(ZEVDSUB)
DRESS OF SUBROUTINE               ˇ
                                     00530002ZILSUBRE EQU   *
                                     00540002         SPACE 2
                                     00550002    í      LTORG
                                       00560002         END
                                       00570002{
    TITLE 'ZILXFUN - ZIL 1.3 FUNCTION EXECUTOR FOR FUNCALL'        00010
****************************************************************** 00011
                                                                 * 00012
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
  THIS MODULE IS INVOKED FROM COMPILED CODE TO IMPLEMENT FUNCALL.    * 0
  ON ENTRY, REGISTER 1 POIˇ
6*  WHICH IS SET UP AS FOLLOWS:                                        *
6*                                                                     *
6*  +0 - LEFT UNUSED SO THIS MODULE CAN Sˇ
006*  +4 - LEFT UNUSED SO THIS MODULE CAN SAVE #12 HERE
006*  +8 - LEFT UNUSED SO THIS MODULE CAN SAVE ALIST HERE
006*  +C - LEFT UNUSED SO THIS MODULE CAN SAVE #14 HERE ˇ
70006*  +10 - THE FIRST ARG TO FUNCALL, I.E. THE FUNCTION OBJECT
80006*  +14 ON - THE OTHER ARGS
90006*                                                                 ˇ
0100006*  REGISTER 2 CONTAINS THE NUMBER OF ARGS TIMES 4.  NOTE THAT
0110006*  (REG2)+20 = THE SIZE OF THE STACK IN USE AT THE TIME OF ENTRY.
0120006*
013000ˇ
 00140006*
 00150006*  THIS ROUTINE ATTEMPTS TO RESOLVE THE FIRST ARG AS A COMPILED
 00160006*  FUNCTION ˇ
 * 00170006*  PROPERTY, OR A FUNARG WHOSE FUNCTION COMPONENT IS ONE OF T
 * 00180006*  ABOVE).  IF SO, CONTROL IS PASSED DIRECTLY TO THAT CODE, S
 * 00190006*  THE ALIST IF NECESSARYˇ
   * 00200006*  (IF &OPTIONAL OR &REST ARGS ARE DEFINED, THE ADDITIONAL
   * 00210006*  NEEDED ARE PLACED ON THE STACK, AFTER MAKING SURE WE HAV
   * 00220006*  FOR THEM.)  IF NO SUCH DEFINITION Eˇ
TO   * 00230006*  A LIST AND CONTROL IS PASSED TO THE ZILAPPLY FUNCTION.
     * 00240006*
     * 00250006*  THE RETURN VALUE FROM THIS FUNCTION, OF COURSE, ˇ
       * 00260006*  OF THE FUNCTION CALL.
       * 00270006*
       * 00280006*******************************************************
*+

ELL OF THE * 00310006* SYMBOL INSTEAD OF (OR IN ADDITION TO) THE PROPERT
 IF THIS   * 00320006* IS SO, WE CAN KILL THE CALL TO ZGET AND THE NECES
INTERNING  * 0ˇ
             * 00340006*
             * 00350006*************************************************
************** 00360006*     ˇ
                 00370006***********************************************
**************** 00380006*
               * 00390006* Change activity: ˇ
                 * 00400006*
                 * 00410006* 06/14/88 - Support for multiple values.
                 * 00420006*                               ˇ
                   * 00421006*******************************************
******************** 00422006*
                     00423006         SPACE 1
                       00424006ZILXFUN  #ZBEG NAME='ZILXFUN',SUBRS=ZILSU
                      X00425006               PTRS=ZLBPTRS,ATOMS=ZILATOM
ILLIST                 00426006         SPACE 1
         ˇ
 BOTTOM OF STACK FRAME   00428006         LR    #12,#15             SET
NT BASE REGISTER         00429006         USING ZILXFUN,#12
                        ˇ
                           00440006         LR    #11,#1              SE
RENT STACK POINTER         00450006         SPACE 1
                           00460006*   ˇ
                             00470006* REQUIRED FIRST-TIME-ONLY CODE TO
TOMS USED BY THIS MODULE.    00480006*
                             00490006ZAPGO    NOP   ARˇ
E ONCE, THEN BRANCH.           00500006         ST    #2,SAVE2
EGISTER 2                      00510006         LA    #1,ZLBPTRS
S THE LIST OF POINTERS         00520006         L     #15,ZLCSINT    ˇ
ADDRESS OF ZILSINT               00530006         LA    #0,20(#2,#11)
POINTER TO TOP OF STACK USED     00540006         #BASR #14,#15
 ZILSINT                         00550006         L     #2,SAVE2
ORE ˇ
ANGE NOP TO BRANCH NEXT TIME       00570006AROUND   DS    0H
                                   00580006         SPACE 1
                                    00590006ˇÁ
,#11)         PICK UP FUNCTIONAL ARG               00600006         XR
              SET ALIST POINTER = ZERO             00610006         SPAC
                                                   00620006Cˇ
                SEE WHAT WE GOT                      00630006         SP
                                                     00640006         CL
PE(#1),##SYMBOL                                      00650006         BE
YMBOL             IF SYMBOL, PROCESS SYMBOL            00660006
TYPE(#1),##SUBR                                        00670006
UBR               IF SUBR, PROCESS SUBR                00680006
TYPE(#1),#ˇ
ZCLOSURE            IF CLOSURE, PROCESS CLOSURE          00700006
##TYPE(#1),##FUNARG                                      00710006
ZFUNARG             IF FUˇ
  TRYAPPLY            ELSE JUST APPLY IT                   00730006
T                                                          00740006ZSUBR
  0H                  IT IS A SUBR      ˇ
    #3,#3                                                    00760006
M   #3,7,##CAR+1(#1)    GET POINTER TO COMPILED CODE         00770006
    CALLIT                                             ˇ
EJECT                                                          00790006Z
DS    0H                  IT IS A COMPILED CLOSURE             00800006
XR    #3,#3                                                    0081000ˇ
  ICM   #3,7,##CAR+1(#1)    GET POINTER TO COMPILED CODE         0082000
  L     #4,##CDR(,#1)       GET ALIST POINTER                    0083000
  B     CALLIT                                                   0084000
  EJEˇ
RG  DS    0H                  IT IS AN INTERPRETED CLOSURE         00860
    LM    #3,4,##VECDAT(#1)   GET POINTERS TO FUNCTION AND ENV     00870
    L     #4,##CAR(,ˇ
      LR    #1,#3               CHECK THE FUNCTION OBJECT            008
      B     CHKTYPE             SEE WHAT WE GOT                      009
      EJECT                        ˇ
SYMBOL  DS    0H                  IT IS A SYMBOL                       0
        SPACE 1                                                        0
        LA    #5,20(#2,#11)       SET POINTER TO Tˇ
6*                                  #1 = symbol
6         L     #1,##PLIST(,#1)     Get property list pointer
6         L     #0,ASUBR            #2 = symbol 'SUBR            +
006         B     ZGETGO              Start looping            ˇ
80006ZGETLOOP DS    0H
90006         LM    #14,#15,##CAR(#1)   Get CAR+CDR of property (sub)lis
00006         CR    #0,#14              If (CAR subplist) is "EQ" to arg
1010006         BE    ZGETWIN             then win. Else...
1020006         LTR   #14,#14             If invalid property list (atom
1030006         BM    TRYAPPLY            then no SUBR property
1040006      ˇ
 01050006ZGETGO   DS    0H
 01060006         CR    #1,#10              Until end of property list (
 01070006         BNE   ZGETˇ
   01080006         B     TRYAPPLY            At end, no SUBR property f
   01090006ZGETWIN  DS    0H
   01100006         L     #1,##CAR(,#15)   ˇ
op.  01110006         TM    ##TYPE(#1),##CODE   SUBR PROPERTY MUST BE CO
     01120006         BNO   TRYAPPLY            ELSE CANNOT BE CALLED, T
     01130006         XR    #4,#4               CLEAR ALISˇ
       01140006         B     CHKTYPE             AND SEE WHAT WE GOT
       01150006         EJECT
       01160006CALLIT   DS    0H                  PREPARE TO INVOKE COMP
ODE      01170006         SPACE 1
         01180006         OI    ZLCGCFLG,ZLCGCBLD   TELL CONS WE'RE SETT
         01190006         SPACE 1
        ˇ
           01210006* #3 --> THE COMPILED CODE ITSELF
           01220006* #4 --> THE ALIST (ZERO IF NOT A CLOSURE)
           01230006*   ˇ
             01240006* EXTRACT MINIMUM AND MAXIMUM NUMBER OF ARGS FOR TH
ION          01250006*
             01260006         XR    #6ˇ
               01270006         XR    #7,#7               CLEAR INSERT R
               01280006         LA    #5,20(#2,#11)       SET POINTER TO
STACK USED     01290006         IC    #6,4(,#3)      ˇ
 IDENTIFIER      01300006         LA    #15,5+3(#6,#3)      POINT PAST M
ENTIFIER         01310006         N     #15,=X'FFFFFFFC'    ROUNDING UP
FULLWORD         01320006         USING ZINT,#15            ADDRESS ˇ
 AREA IN MODULE    01330006         TM    ZINFLAG2,ZINGLEXP   IF THIS IS
LED LEXPR          01340006         BO    LEXPR               THEN GO TO
 IT AS A LEXPR     01350006         IC    #6,ZINMINAR         GET MINIMU
 OF  ARGUMENTS      01360006ˇÁ
T MAXIMUM NUMBER OF ARGUMENTS      01370006         CR    #6,#7
 MINIMUM > MAXIMUM                 01380006         BH    BADFUNC
EN ERROR - BAD FUNCTION            01390006 ˇ
CONVERT MINARGS TO STACK FRAME SIZE  01400006         CR    #2,#6
IF ARGS PASSED ARE FEWER THAN MIN    01410006         BL    TOOFEW
THEN ERROR - TOO FEW ARGUMENTS       01420006         SLA  ˇ
  CONVERT MAXARGS TO STACK FRAME SIZE  01430006         TM    ZINFLAG2,Z
  IF THERE'S A &REST ARG               01440006         BO    MANYOK
   THEN IT'S OK TO HAVE MORE ARGS      01450006         CR    #2,#7
    OTHERWISE IF ARGS PASSED ARE MORE    01460006         BH    TOOMANY
    THEN THAT'S AN ERROR                 01470006MANYOK   DS    0H
                                         01480006*
         ˇ
NTER BASED ON MAXARGS                      01500006*
                                           01510006         LA    #6,20(
      POINT TO END OF MAˇ
GREST   IF THERE'S A &REST ARG               01530006         BZ    MAXN
        THEN INCLUDE AN EXTRA STACK SLOT     01540006         LA    #0,4
         SET TOP-OF-STACK POINTER FOR Aˇ
          ELSE INCLUDE FOR MAXARGS ONLY        01560006MAXNREST LA    #0
           SET TOP-OF-STACK POINTER FOR ARGS   01570006AFTNREST DS    0H
                                               0158000ˇ
            ERROR IF NO ROOM ON STACK            01590006*
                                                 01600006* IF MAXARGS >
 FILL IN OPTIONAL ARG SLOTS WITH "NOT SUPPLIED"  01610006*           ˇ
                                                   01620006* #5  -->  WH
TIONAL ARGS WOULD HAVE TO BE STACKED               01630006* #6  -->  WH
TOP STACKING &OPTIONAL ARGS                        01640006*
    ˇ
                                                     01660006         CR
6                                                    01670006         BN
ND                 ˇ
3,0(,#5)          FILL WITH "UNSUPPLIED" INDICATOR     01690006
,4(,#5)                                                01700006
TLOOP                             ˇ
0H                                                       01720006*
                                                         01730006* IF TH
 &REST ARG, CONS UP THE REMAINING ARGS AND DEPOSI+
THE LIST ON THE STACK.                         ˇ
                                                             01760006* #
ANY REST ARGS ON THE STACK, PAST END OF OPTIONALS            01770006* #
WHERE TO STACK THE &REST ARGLIST                             0ˇ
                                                               01790006
TM    ZINFLAGS,ZINGREST                                        01800006
BZ    NOREST                                                   01810006
  LA    #0,4(,#5)           SET OUR OWN STACK POINTER FOR CONS   0182000
  #ZPDS (0)                 ERROR IF NO ROOM ON STACK            0183000
  LR    #15,#10             INITIALIZE &REST LIST TO NIL         0184000
P DS    0H  ˇ
    ST    #15,0(,#5)          STORE WHAT WE HAVE SO FAR            01860
    SH    #5,=H'4'            BUMP DOWN ONE STACK SLOT             01870
    CR    #5,#6            ˇ
      BL    RESTEND             UNTIL BOTTOM OF REST ARGS            018
      L     #1,0(,#5)           ARG 1 TO CONS = ARG FROM STACK       019
      LR    #2,#15              ARG 2 TO Cˇ
        L     #15,ZLCCONS         GET ADDRESS OF CONS                  0
        #BASR #14,#15             CALL CONS TO BUILD UP &REST LIST     0
        B     RESTLOOP            CONTINUE               ˇ
6RESTEND  DS    0H                  AT THIS POINT 0(#6) IS THE RESTLIST
6         SPACE 1
6NOREST   DS    0H
006         SPACE 1
006         NI    ZLCGCFLG,255-ZLCGCBLD RESET FLAG FOR CONS
006         SPACE 1
006    ˇ
10006         ST    #14,8(,#11)         SAVE IT ON STACK
20006         LTR   #4,#4               IF AN ALIST IS TO BE RESET,
30006         BZ    NOˇ
2040006         ST    #4,ZLCFALST          STORE ALIST FOR THIS EXECUTIO
2050006NOALIST  DS    0H
2060006*                             ˇ
 02070006         LR    #15,#3              LOAD UP SUBROUTINE ENTRY POI
 02080006         LA    #1,20(,#11)         POINT TO ARGUMENTS ON STACK
 02090006         #BASR #14,#15             CALL THEˇ
   02100006         L     #14,8(,#11)         PICK UP SAVED ALIST FROM S
   02110006         ST    #14,ZLCFALST        RESTORE SAVED LEXICAL ALIS
   02120006*                                  RETURN VALUE IS IN RE GIS
     02130006ˇÁ
S AND RETURN       02140006         SPACE 1
                   02150006         LR    #1,#11
                   02160006 ˇ
                     02170006         L     #14,12(,#1)
                     02180006         BR    #14
                     02190006         EJECTˇ
                       02200006LEXPR    DS    0H
                       02210006         SPACE 1
                       02220006***************************ˇ
************************ 02230006*
                       * 02240006* IF THIS IS A COMPILED LEXPR, THEN WHA
IS THIS:               * 02250006*
                         * 02260006*  SHIFT ALL THE ARGS ON THE STACK UP
ACK SLOT (4 BYTES)       * 02270006*  AND STICK THE FIXNUM OBJECT REPRES
HE NUMBER OF ARGS        * 02280006*  INTO THE FIRST SLOT, WHICH WILL BE
 TO THE ˇ
                           * 02300006*
                           * 02310006***********************************
***********************ˇ
                               02330006         LA    #6,20(,#11)
TO FIRST ARG ON STACK          02340006         LA    #0,4(,#5)
PAST LAST ARG ON STACK PLUS 4  0235000ˇ
K IF SPACE AVAILABLE, ERR IF NOT 02360006         XR    #2,#2
IALIZE ARG COUNT TO ZERO         02370006LARGLOOP DS    0H
                                 02380006         SH ˇ
MP DOWN ONE STACK SLOT             02390006         CR    #5,#6
TIL WE HIT BOTTOM                  02400006         BL    ENDLARGS
 WHICH POINT WE'RE READY TO GO     02410006         MVC   4(4,#5),0(ˇ
BUMP ARG UP ONE STACK SLOT           02420006         BCT   #2,LARGLOOP
BUMP ARG COUNT, LOOP 4 ARGS ON STACK 02430006ENDLARGS DS    0H
(NOTE #0 ALREADY POINTS TO T.O.S.)   02440006         LCR   #2,#2
MAKˇ
  If within small fixnum range         02460006         BH    CONSFIX
  then                                 02470006         LA    #15,#SFT(#
   point to small ˇ
     STORE FIXNUM ON STACK AS FIRST ARG  02490006         B     NOREST
     GO TO INVOKE FUNCTION               02500006CONSFIX  DS    0H
    Else have to cons up a new fi+
      MAKE A FIXNUM FROM ARG COˇ
        STORE FIXNUM ON STACK AS FIRST ARG   02530006         B     NORE
        GO TO INVOKE FUNCTION                02540006         EJECT
                                             0ˇ
                                               02560006         SPACE 1
                                               02570006         OI    ZL
LCGCBLD   TELL CONS WE'RE SETTING #0           02580006      ˇ
                                                 02590006***************
************************************************ 02600006*
                                               * 02610006* INVOKE ZILAPP
EXECUTE FUNCTION INTERPRETIVELY.                 * 02620006*
                                                 * 02630006* (ZILAPPLY F
) WHERE FUNC IS AT 20(,#11) AND ARGS IS THE REST * 02640006* OF THE STAC
ISTIFIED.  ˇ
                                                   * 02660006***********
**************************************************** 02670006         SP
                          ˇ
,20(#2,#11)       SET POINTER TO TOP OF STACK USED     02690006
,20(,#11)         POINT TO BOTTOM OF ARGS              02700006
,12(,#5)          RESERVE JUST ENOUGH STAˇ
(0)                 ERROR IF NO ROOM ON STACK            02720006
#15,#10             INITIALIZE &REST LIST TO NIL         02730006ARGSLOO
0H                                                      ˇ
  #15,0(,#5)          STORE WHAT WE HAVE SO FAR            02750006
  #5,=H'4'            BUMP DOWN ONE STACK SLOT             02760006
  #5,#6                                                    02770006    ˇ
    ARGSEND             UNTIL BOTTOM OF REST ARGS            02780006
    #1,0(,#5)           ARG 1 TO CONS = ARG FROM STACK       02790006
    #2,#15              ARG 2 TO CONS = LIST SO FAR          02800006
    #1ˇ
#BASR #14,#15             CALL CONS TO BUILD UP &REST LIST     02820006
B     ARGSLOOP            CONTINUE                             02830006A
DS    0H             ˇ
  SPACE 1                                                        0285000
  NI    ZLCGCFLG,255-ZLCGCBLD RESET FLAG FOR CONS                0286000
  SPACE 1                           ˇ
    ST    #13,24(,#11)        SET ARG 3 TO ZILAPPLY = (UNSUPPLIED) 02880
    ST    #13,28(,#11)        SET ARG 4 TO ZILAPPLY = (UNSUPPLIED) 02890
    L     #15,@ZILAPPL        GET ADDRESS OF ZILAPP LY              029

   02910006         #BASR #14,#15             CALL ZILAPPLY
   02920006*
   02930006*ˇ
     02940006*       because it was a backward branch, which ZILVALS wou
pret 02950006*       as an indication that multiple values were to be di
     02960006*             ˇ
       02970006         LR    #1,#11              RELOAD STACKED REGS AN
       02980006         LM    #11,#12,0(#1)
       02990006         L     #14,12(,#1) ˇ
         03000006         BR    #14
         03010006         EJECT
         03020006BADFUNC  DS    0H                  ERRORˇ
           03030006         LA    #1,BADFSTR
           03040006         LA    #2,BADFNAME
           03050006         B     ERROR
             03060006TOOFEW   DS    0H
             03070006         LA    #1,FEWSTR
             03080006         LA    #2,FEWNAME
       ˇ
               03100006TOOMANY  DS    0H
               03110006         LA    #1,MANYSTR
               0312000ˇ
                 03130006******** B     ERROR
                 03140006         SPACE 1
                 03150006ERROR    DS ˇ
                   03160006         NI    ZLCGCFLG,255-ZLCGCBLD RESET FL
ONS                03170006         MVI   0(#2),C' '          CLEAR FUNC
E TO BLANKS        03180006         MVC   1(NAMELEN-ˇ
                     03190006         XR    #15,#15             CLEAR IN
ISTER                03200006         IC    #15,4(,#3)          GET LENG
DULE IDENTIFIER      03210006         SH    #15,=H'16'          REDˇ
TH OF DATE/TIME INFO   03220006         BNP   NONAME              IF NO
IP                     03230006         CH    #15,=Y(NAMELEN)     NOT BL
ELY, BUT JUST IN CASE  03240006         BNH   *+8                  LIMIT
ELˇ
                         03260006         BCTR  #15,0               REDU
XECUTE                   03270006         EX    #15,MVCNAME         MOVE
N NAME TO MESSAGE+
 FUNCTION NAME ˇ
                             03300006         MVI   0(#2),C'.'
A PERIOD                     03310006         LA    #0,1(,#2)
                             0ˇ
NGTH OF MESSAGE                03330006         SH    #0,=H'4'
 START - PREFIX LENGTH)        03340006         STCM  #0,7,1(#1)
LENGTH IN FAKE STRING          03350006      ˇ
                                 03360006         #ERR  0(#3),PREFIX=NO
AL ERROR                         03370006         SPACE 1
                                 03380006MVCNAME  MVC   0(*-ˇ
ECUTED: MOVE FUNCTION NAME TO MSG  03390006         SPACE 1
                                   03400006SAVE2    DS    A
GISTER SAVE                        03410006         SPACE 1
                                     03420006NAMELEN  EQU   64
MAX LENGTH OF FUNCTION NAME SHOWN    03430006         SPACE 2
                                     03440006         DS    0H,XL1
          ˇ
FEWLEN)                                03460006FEWMSG   DC    C'ZIL1401
arguments passed by FUNCALL to '       03470006FEWNAME  DS    CL(NAMELEN
                         ˇ
                                         03490006         SPACE 1
                                         03500006         DS    0H,XL1
                                        ˇ
AL3(MANYLEN)                               03520006MANYMSG  DC    C'ZIL1
many arguments passed by FUNCALL to '      03530006MANYNAME DS    CL(NAM
                                           03540006MANYˇ
                                             03550006         SPACE 1
                                             03560006         DS    0H,X
                                             03570006BADFSTR  DC    YLˇ
NG),AL3(BADFLEN)                               03580006BADFMSG  DC    C'
Attempt to FUNCALL invalid ZIL function '      03590006BADFNAME DS    CL
+1)                                            03600006BADFLEN  EQU   *-
     ˇ
                                                 03620006ZILSUBRS DS
                                                 03630006@ZILAPPL DC
LY)         ADDRESS ˇ
LAPPLY'                                            03650006ZILSUBRE EQU
                                                   03660006         SPAC
                                                    03670006ˇÁ
OMS DS    0A                                                       03680
    DC    A(SUBR-ZILXFUN)     ADDRESS OF ATOM SUBR                 03690
OME EQU   *                                                        03700
LISTS EQU   *                                                        037
LISTE EQU   *                                                        037
      SPACE 2                                                        037
R     #AATMˇ
        SPACE 2                                                        0
        LTORG                                                          0
        SPACE 2           T
6         #ZINT ,
6         END
6
OR COMPILED CODE'  00010000*********************************************
****************** 00011002*
                 * 00012002*ˇ
 Laboratory Inc.   * 00013002*                     All rights reserved.
                   * 00014002*
                   * 00015002**************ˇ
********************** 00016002*
                     * 00017002*  THIS MODULE IS INVOKED FROM COMPILED C
MPLEMENT THE         * 00018002*  "LISTIFY" SPECIAL FORM. ˇ
                       * 00019002*
                       * 00020002*  ON ENTRY TO THIS FUNCTION:
                       * 00030002*
                         * 00040002*  #0 = THE CURRENT TOP-OF-STACK POIN
CONS                     * 00050002*  #1 = THE ARG TO LISTIFY (MUST BE N
FIXNUM)                  * 00060002*
        ˇ
ARGS FROM THE STACK THAT   * 00080002*  WERE PASSED TO THE CALLING LEXPR
                           * 00090002*
                       ˇ
 ON THE STACK.               * 00110002*  ARG > 0   - CONS UP THE FIRST
GS ON THE STACK.             * 00120002*  ARG < 0   - CONS UP THE LAST (
S ON THE STACK.              * 0013000ˇ
                               * 00140002*
                               * 00150002*******************************
******************************** 00160002         SPAˇ
                                   00170002ZILXLFY  #ZBEG NAME='ZILXLFY'
                                   00180002         SPACE 1
                                   00190002         ST    #12,SAVE12ˇ
SAVE REGISTERS                       00200002         ST    #14,SAVE14
                                     00210002         LR    #12,#15
                                     00220002         USING ZILXLFY,#12
   ˇ
                                       00240002         SPACE 1
                                       00250002         OI    ZLCGCFLG,Z
  TELL GC OUR #0 Iˇ
                                         00270002         LR    #4,#11
    GET CURRENT STACK PTR (END OF ARGS)  00280002         L     #3,0(,#1
    GET POINTER TO BOTTOM OF LEXP+
      POINT PAST LEXPR ARG TO Sˇ
                                             00310002         CR    #1,#
        IF ARG TO LISTIFY IS NIL             00320002         BE    PROC
        THEN GO CONS UP ALL THE ARGS         0ˇ
,##FIXNUM ELSE ARG MUST BE A FIXNUM            00340002         BNE   ER
          IN WHICH CASE                        00350002         L     #1
#1)       GET ITS NUMERIC VALUE                00360002      ˇ
                                                 00370002         LR
            GET LENGTH OF STACK AREA WITH ARGS   00380002         SR
                                                 00390002         SRL
              GET THE # OF ARGS PASSED TO LEXPR    00400002         LTR
              CHECK SIGN OF ARG                    00410002         BM
              IF NEGATIVE, PROCESS NEGATIVE        00420002         BP
           ˇ
#10             ELSE (LISTIFY 0) ==> NULL LIST       00440002         B
RN              AND RETURN WITH NIL                  00450002         SP
                          ˇ
                  (LISTIFY N), N > 0                   00470002
                                                       00480002
,#15              IF ARG GREATER THAN TRUˇ
*+6                 THEN                                 00500002
#1,#15               RESET ARG TO MAX # OF ARGS          00510002*
                    #3 REMAINS THE SAME.                ˇ
  #1,2                CONVERT TO SIZE OF STACK SLOT        00530002
  #4,0(#1,#3)         SET NEW POINTER TO END OF ARGS       00540002
  PROCESS             GO CONS 'EM UP                       00550002    ˇ
ACE 1                                                        00560002NEG
    0H                  (LISTIFY N), N < 0                   00570002
ACE 1                                                        00580002
R   #1ˇ
CR    #1,#15              IF ARG GREATER THAN TRUE # OF ARGS   00600002
BNH   *+6                 THEN                                 00610002
LR    #1,#15         ˇ
                            #4 REMAINS THE SAME.                 0063000
  SLL   #1,2                CONVERT TO SIZE OF STACK SLOT        0064000
  LR    #3,#4               SET NEW ˇ
    SR    #3,#1                                                    00660
*** B     PROCESS             GO CONS 'EM UP                       00670
    SPACE 1                                                         006

   00690002         SPACE 1
   00700002*                                  #3 --> START OF ARGS TO CO
   00710002*ˇ
     00720002         LR    #6,#4               INITIALIZE PTR INTO STAC
GS   00730002         LR    #15,#10             INITIALIZE RETURNED LIST
     00740002LOOP     DS   ˇ
       00750002         SH    #6,=H'4'            LOOP DOWN UNTIL NO MOR
       00760002         CR    #6,#3                AT WHICH POINT
       00770002         BL    RETURN      ˇ
         00780002         L     #1,0(,#6)           ARG 1 TO CONS = ARG
CK       00790002         LR    #2,#15              ARG 2 TO CONS = LIST
         00800002         L     #15,ZLCCONS         GET Aˇ
           00810002         #BASR #14,#15             CALL CONS TO ADD A
ST         00820002         B     LOOP                CONTINUE LOOPING
           00830002         SPACE 1
             00840002RETURN   DS    0H                  RETURN VALUE IS
             00850002         SPACE 1
             00860002         NI    ZLCGCFLG,255-ZLCGCBLD RESTORE GC FLA
       ˇ
               00880002         L     #14,SAVE14
               00890002         L     #12,SAVE12          RESTORE REGIST
               0090000ˇ
                 00910002         SPACE 1
                 00920002ERROR    DS    0H                  INVALID ARG
                 00930002         LR ˇ
                   00940002         #ERR  'Argument to LISTIFY not a fix
IL - ',(#2)        00950002         SPACE 1
                   00960002SAVE12   DS    A         ˇ
                     00970002SAVE14   DS    A
                     00980002         SPACE 1
                     00990002         LTORG                        h
                       01000002         END
                       01010002
 - ZIL 1.3 SUBROUTINE EXECUTOR'                  00010000***************
************************************************ 00011002*
                                               * 00012002*ˇ
 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
 All rights reserved.                            * 00014002*
                                                 * 00015002*************
**************************************************** 00016002*
                                                   * 00017002* THIS MODU
ED BY EVAL AND APPLY TO EXECUTE SUBRS AND CLOSURES.* 00018002* PARAMETER
 FOLLOWSˇ
                                                     * 00020002* PARAMET
THE ENTRY POINT OBJECT (GET XXX 'SUBR).              * 00030002* PARAMET
THE LIST OF (EVALUATED)ˇ
                                                       * 00050002*******
******************************************************** 00060002
1                                     ˇ
G MINARGS=2,MAXARGS=2,NAME='ZILXSUB'                       00080002
E ,                                                        00090002
S 24                  RESERVE INITIAL MINIMAL STACK Sˇ
SAV ,                   SAVE REGISTERS                       00110002
ACE 3                                                        00120002*
                                                             0013000ˇ
 THE ARGUMENTS                                                 00140002*
                                                               00150002
LM    #1,#2,0(#11)        PICK UP ARGS                         00160002*
   ˇ
                              #2 = ARGUMENT LIST                 0018000
---------------------------------------------------------------- 0019000
PPORT FOR (ZILXSUBˇ
------------------------------------------------------------------ 00210
--- CR    #1,#10              IF ENTRY = NIL                       00220
--- BNE   NOTNIL              THEˇ
----- LR    #15,#10              SET RETURN TO NIL                   002
----- B     ZRETURN              AND DO NOTHING.                     002
NIL   DS    0H                                  ˇ
---------------------------------------------------------------------- 0
        TM    ##TYPE(#1),##CODE   ARG 1 MUST BE A COMPILED CODE OBJECT 0
        BNO   ERR3048             ELSE ERROR                   +
2OK       DS    0H                                           ˇ
002*
002* EXTRACT MINIMUM AND MAXIMUM NUMBER OF ARGS FOR THIS FUNCTION
002*
30002         XR    #3,#3               CLEAR INSERT REGISTER
40002         XR    #6,#6               CLEAR INSERT REGISTER
50002         XR    #7,#7               CLEAR INSERT REGISTER
60002      ˇ
0370002         IC    #6,4(,#3)           GET LENGTH OF MODULE IDENTIFIE
0380002         LA    #15,5+3(#6,#3)      POINT PAST MODULE IDENTIFIER
0390002         N     #15,ˇ
 00400002         USING ZINT,#15            ADDRESS THE "ZINT" AREA IN M
 00410002         TM    ZINFLAG2,ZINGLEXP   IF THIS IS A COMPILED LEXPR
 00420002         BO    LEXPR            ˇ
   00430002         IC    #6,ZINMINAR         GET MINIMUM NUMBER OF ARGU
   00440002         IC    #7,ZINMAXAR         GET MAXIMUM NUMBER OF ARGU
   00450002         CR    #6,#7               IF MINIMUMˇ
     00460002         BH    BADFUNC             THEN ERROR - BAD FUNCTIO
     00470002         LR    #3,#7               CONVERT TO INDEX INTO ST
     00480002         TM    ZINFLAG2,ZINGREST   IF A &REST ARG IS EXPECˇ
       00490002         BZ    NOREST              THEN...
       00500002         LA    #3,1(,#3)            ADD ONE MORE FOR IT.
       00510002NOREST   DS    0H                  SET ARG COUNT TO MAXAR
ALLY  ˇ
         00530002         LA    #0,24(#3,#11)       POINT TO NEW STACK L
         00540002         #ZPDS (0)                 CHECK IF SIZE IS AVA
         00550002    ˇ
ACKING     00560002STKLOOP  DS    0H
           00570002         CR    #2,#10              IF AT END OF LIST
           00580002         BE    STˇ
             00590002         LTR   #7,#7               BUT IF MORE ARGS
X ARGS       00600002         BZ    EXTRARGS            THEN CHECK FOR A
RG           00610002         L     #4,##CAR(,#2)  ˇ
 OF ARGS       00620002         ST    #4,0(,#5)           STORE ONTO STA
               00630002         LA    #5,4(,#5)           BUMP STACK LOC
               00640002         L     #2,##CDR(,#2)       GO TO NEˇ
ST               00650002         BCTR  #6,0                DECREMENT MI
UNT              00660002         BCTR  #7,0                DECREMENT MA
UNT              00670002         B     STKLOOP             AND CONTINUE
G  DOWN LIST      00680002ˇÁ
ARGS EXCEEDED AND STILL GOT SOME 00690002         TM    ZINFLAG2,ZINGRES
HERE'S A &REST ARG               00700002         BO    SETREST
 SET IT                          00710002 ˇ
SE CLEAR INSERT REGISTER           00720002         ICM   #3,7,##CAR+1(#
ROR - TOO MANY ARGS                00730002         LA    #1,MANYSTR
                                   00740002         LA   ˇ
                                     00750002         LA    #5,MANYMSG
                                     00760002         XR    #4,#4
                                     00770002         IC    #4,ZINMAXAR
                                       00780002         B     ERROR
                                       00790002STKOUT   DS    0H
  UNTIL MAX USED UP OR NO MORE ARGS    00800002         LTR   #6,#6
  IF FEˇ
    THEN ERROR                           00820002         LTR   #7,#7
    IF DOWN TO MAX                       00830002         BZ    NOARGS
    THEN FINISHED SETTˇ
      ELSE STORE (UNSUPPLIED) INTO ARG STK 00850002         LA    #5,4(,
      BUMP STACK LOCATION                  00860002         BCT   #7,STN
      CONTINUE UNTIL MAX ARGS USED UPˇ
                                             00880002         TM    ZINF
GREST   IF THERE'S A &REST ARG               00890002         BZ    NORE
        THEN SET IT                          0090000ˇ
                                               00910002         ST    #2
          SET IT TO THE REMAINING ARG LIST     00920002NOREST2  DS    0H
                                               00930002         L  ˇ
ALST        GET CURRENT FLUID ALIST              00940002         ST
#11)        SAVE IT ON STACK                     00950002         TM
1),##CLOS   IF THIS IS A CLOSURE                 00960002         BZ
  ˇ
##CDR(#1)      GET ALIST POINTER FROM CLOSURE      00980002         BZ
T              IF NONE, TREAT LIKE NORMAL SUBR     00990002         ST
FALST         STOˇ
                                                     01010002         DR
                                                     01020002         XR
#15             CLEAR INSERT REGˇ
5,7,##CAR+1(#1)   LOAD UP SUBROUTINE ENTRY POINT       01040002
,24(,#11)         POINT TO ARGUMENTS ON STACK          01050002
4,#15             CALL THE SUBROUTINE          +
#14,20(,#11)        PICK UP SAVED FLUID ALISTˇ
  #14,ZLCFALST        RESTORE SAVED FLUID ALIST            01080002*
                      RETURN VALUE IS IN REGISTER 15       01090002ZRETU
  0H                                                       0ˇ
RET ,                   RESTORE REGISTERS AND RETURN         01110002
ACE 2                                                        01120002ERR
    0H                                                       01130002
#ERR  'Argument 1 to ZILXSUB not a compiled code object (SUBR X01140002
      or closure) - ',0(#11)                                   01150002
EJECT                                                          01160002L
DS    0H  ˇ
  SPACE 1                                                        0118000
**************************************************************** 0119000
                         ˇ
THIS IS A COMPILED CODE LEXPR, THIS IS WHAT WE DO:               * 01210
                                                                 * 01220
T ARGS ON STACK AS FOLLOWS:             ˇ
                                                                   * 012
  MAKE A FIXNUM OBJECT FROM THE NUMBER OF ARGS PASSED              * 012
  PLACE THE ARGS ON THE STACK FOLLOWING THE FIXNUM OBJEˇ
                                                                     * 0
  THE NUMBER OF STACK SLOTS REQUIRED = THE NUMBER OF ARGS + 1.       * 0
                                                                     *ˇ
2***********************************************************************
2         SPACE 1
2         LA    #5,28(,#11)         POINT TO WHERE TO START PUTTING ARGS
2    ˇ
002         #ZPDS (0)                 STACK SPACE FOR THE LEXPR FIXNUM A
002         XR    #3,#3               INITIALIZE ARG COUNT TO ZERO
002LARGLOOP DS    0Hˇ
60002         CR    #2,#10              GO THRU LIST OF ARGS UNTIL END
70002         BE    ENDLARGS
80002         LA    #0,4(,#5)      ˇ
1390002         #ZPDS (0)                 STACK SPACE FOR ONE MORE ARG
1400002         LM    #1,#2,##CAR(#2)     GET #1 = ARG OFF THE ARG LIST
1410002*                                  GET #2 =ˇ
 01420002         ST    #1,0(,#5)           STORE IT ON THE STACK
 01430002         LA    #5,4(,#5)           BUMP STACK POINTER
 01440002         BCT   #3,LARGLOOP         DECREMENT ARG COUNT A ND CO
   01450002ˇÁ
                 01460002         LCR   #2,#3               GET POSITIVE
NT               01470002         CH    #2,ZLCSFTHI         If within sm
um range         01480002 ˇ
 from table        01490002         OI    ZLCGCFLG,ZLCGCBLD   Else TELL
WE'RE PROVIDING #0 01500002         #MKAT FIXED               MAKE A FIX
OF ARG COUNT       01510002         NI   ˇ
T                    01520002         B     AFTFIX
                     01530002SMALLFIX DS    0H                  Small fi
 count               01540002         LA    #15,#SFT(#2)ˇ
m small fixnum table   01550002AFTFIX   DS    0H
                       01560002         ST    #15,24(,#11)        STORE
E ARG TO THE LEXPR     01570002         LA    #3,1(,#2)           GET Aˇ
T PLUS 1                 01580002         SLA   #3,2                CONV
 OF STACK SLOTS PASSED   01590002         L     #1,0(,#11)          RELO
 FROM STACK              01600002         B     NOREST2             GO T
ONTROLˇ
                           01620002BADFUNC  DS    0H                  BA
ON                         01630002*
                     ˇ
CEIVABLY DENOTE AN FSUBR,    01650002* MSUBR OR SOME SUCH MONSTROSITY.
 WE ARE CURRENTLY USING IT   01660002* TO DENOTE A FUNCTION WHICH SHOULD
BEING CALLED FROM A LISP     0167000ˇ
__ SERIES OF INTERNAL ROUTINES 01680002*
                               01690002         XR    #3,#3
                               01700002         ICMˇ
R - BAD FUNCTION                 01710002         LA    #1,BADFSTR
                                 01720002         LA    #2,BADFNAME
                                 01730002         XR    #5,#5     ˇ
                                   01740002         B     ERROR
                                   01750002TOOFEW   DS    0H
                                   01760002         XR    #3,#3
 ˇ
ERROR - TOO FEW ARGS                 01780002         LA    #1,FEWSTR
                                     01790002         LA    #2,FEWNAME
                ˇ
                                       01810002         XR    #4,#4
                                       01820002         IC    #4,ZINMINA
#15)                           +
                             ˇ
                                           01850002ERROR    DS    0H
                                           01860002         MVI   0(#2),
      CLEAR FUNCTION NAME TO BLANKS        0ˇ
#2),0(#2)                                    01880002         XR    #15,
        CLEAR INSERT REGISTER                01890002         IC    #15,
        GET LENGTH OF MODULE IDENTIFIER      01900002      ˇ
          REDUCE BY LENGTH OF DATE/TIME INFO   01910002         BNP   NO
          IF NO NAME, SKIP                     01920002         CH    #1
ELEN)     NOT BLOODY LIKELY, BUT JUST IN CASE  01930002         BNH   *+
             LIMIT TO (NAMELEN) CHARACTERS       01940002         LA
LEN                                              01950002         BCTR
            REDUCE FOR EXECUTE                   01960002         EX
AME      ˇ
15,#2)        POINT PAST FUNCTION NAME             01980002NONAME   DS
                                                   01990002         MVI
C'.'          MOVE IN A ˇ
(,#2)                                                02010002         SR
1               GET LENGTH OF MESSAGE                02020002         SH
H'4'            (END - START - PREFIX Lˇ
,7,1(#1)          STORE LENGTH IN FAKE STRING          02040002
,#1               Get address of fake string           02050002
,#5               If this is an "invalid fun" msg     ˇ
BADFUNER            then display that message            02070002
0(#5),#4,MSG2,0(#2),PREFIX=NO                            02080002
1                                                        02090002BADFˇ
  BADFSTR,PREFIX=NO                                        02100002
E 1                                                        02110002MVCNA
  0(*-*,#2),5(#3)     EXECUTED: MOVE FUNCTION NAME TO MSG  02120002
E 2 ˇ
U   64                  MAX LENGTH OF FUNCTION NAME SHOWN    02140002
ACE 2                                                        02150002
    0H,XL1         ˇ
#SATM 'ZIL1301 Too few arguments (< '                          02170002
DS    0H,XL1                                                   02180002M
#SATM 'ZIL1302 Too many arguments ˇ
  DS    0H,XL1                                                   0220000
  #SATM ') to function '                                         0221000
  DS    0H,XL1                                                    02220

 02230002FEWNAME  DS    CL(NAMELEN+1)
 02240002         DS    0H,XL1
 02250002Mˇ
   02260002MANYNAME DS    CL(NAMELEN+1)
   02270002         DS    0H,XL1
   02280002BADFSTR  DC   ˇ
     02290002BADFMSG  DC    C'ZIL1303 Attempt to execute invalid ZIL fun
     02300002BADFNAME DS    CL(NAMELEN+1)
     02310002         SPACE 2           ˇ
       02320002         LTORG
       02330002         SPACE 2
       02340002         #ZINT ,                        f
         02350002         END
         02360002
L 1.3 SUBROUTINE'                  00010000*****************************
********************************** 00011003*
                                 * 00012003*ˇ
les Stark Draper Laboratory Inc.   * 00013003*                     All r
served.                            * 00014003*
                                   * 00015003**************ˇ
************************************** 00016003* ZISEXEC TAKES AN &REST
ST OF ATOMS TO BE CONCATENATED INTO  * 00017003* A SINGLE CHARACTER STRI
H IS THEN INVOKED AS AN ISPF DIALOG  * 00018003* SERVICE CALL.
                                       * 00019003*
                                       * 00020003* ZISEXEC RETURNS A FIX
AINING THE RETURN CODE AS RETURNED BY  * 00030003* ISPEXEC/ISPLINK.
         ˇ
                                         * 00050003* THIS ROUTINE IS NOT
VE AND USES NO EXTRA STACK SPACE.        * 00060003*********************
************************ˇ
                                           * 00080003* ZILADMP IS CALLED
 EACH ATOM IN THE LIST INTO OUR WORK AREA. * 00090003*
                                       ˇ
********************************************** 00110003*
                                             * 00120003* Change activity
                                             * 0013000ˇ
                                               * 00140003* 09/16/88 - Au
uppercasing of command buffer is not done if   * 00150003*            th
SELECT service request.                        * 00160003*           ˇ
                                                 * 00170003*************
************************************************** 00180003         SPAC
                                                   00190003ZISEXEC  #ZBE
S=0,ˇ
                DEFINE STACK SIZE                    00210003         #Z
                SAVE REGISTERS                       00220003         SP
                   ˇ
,0(,#11)          GET &REST ARGUMENT                   00240003
,#5               INIT LENGTH REQUIRED SO FAR          00250003LOOP
                                  ˇ
#6,#10              IF END OF LIST OR NULL LIST          00270003
NOMORE              THEN END LOOP                        00280003
#2,##CAR(,#6)       GET ATOM (ARG 1 TO ZISEXEC)  +
  ##TYPE(#2),##ATOM   IF IT'S NOT AN ATOM      ˇ
    BADLIST             THEN ERROR                           00310003
    ##TYPE(#2),##VEC    IF IT'S SOME KIND OF VECTOR          00320003
    BADLIST             THEN ERROR                           0ˇ
L     #15,ZLCADMP         GET ADDRESS OF ZILADMP               00340003
LR    #1,#10              SET #1 FOR ZILADMP                   00350003
#BASR #14,#15             CALL ZILADMP TO DUMP ATOM            00360003
  LR    #7,#1               SAVE ADDRESS OF DUMPED ATOM          0037000
  LTR   #4,#0               GET LENGTH OF DUMPED ATOM            0038000
  BNP   AFTMOVE             IF ZERO LENGTH, SKIP THIS ONE        0039000
  AR    #0,#ˇ
    C     #0,ZLCWALEN         IF EXCEEDS CURRENT WORKAREA LENGTH   00410
    BNH   LENOK               THEN...                              00420
                           ˇ
1) GETMAIN A NEW WORKAREA WHOSE SIZE IS >= #0.                       004
2) COPY CONTENTS OF OLD WORKAREA TO THE NEW WORKAREA, LENGTH = #5.   004
3) FREEMAIN THE OLD WORKAREA.             ˇ
                                                                       0
 #0 = TOTAL LENGTH NEEDED SO FAR, INCLUDING DUMPED-BUT-NOT-ADDED-YET   0
 #1 = NOT IN USE                                         ˇ
3* #2 = NOT IN USE, WILL CONTAIN NEW WORK AREA LENGTH
3* #3 = NOT IN USE, WILL CONTAIN NEW WORK AREA ADDRESS
3* #4 = LENGTH OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
003* #5 = TOTAL LENGTH DUMPED SO FAR, NOT INCLUDING THIS STUFF
003* #6 = ADDRESS OF THE SUBLIST CURRENTLY BEING PROCESSED
003* #7 = ADDRESS OF DUMPED ATOM TEXT THAT WE WANT TO ADD ON
003*   ˇ
60003         LR    #2,#0                SAVE LENGTH TO BE NEEDED
70003         LA    #2,7(,#2)            GET A LARGER WORK AREA
80003         N     #2ˇ
0590003         LR    #0,#2                SAVE THE NEW WORK AREA LENGTH
0600003         #GETMAIN RC,LV=(0),LOC=BELOW GET A NEW WORK AREA
0610003         LTR   #15,#15        ˇ
 00620003         BNZ   ERROR3               THEN ERROR - NOT ENOUGH STO
 00630003         LR    #3,#1                SAVE NEW WORKAREA ADDRESS
 00640003         ICM   #14,15,ZLCWA         #14 = Aˇ
   00650003         BZ    NOFREE               IF NONE, THEN SKIP MOVE &
   00660003         LR    #0,#3                #0 = ADDRESS OF NEW AREA
   00670003         LR    #1,#5                #1 = LENGTH OF DUMPE D T
     00680003ˇÁ
UMPED TEXT         00690003         MVCL  #0,#14               COPY DATA
D AREA TO NEW AREA 00700003         L     #1,ZLCWA             GET CURRE
AREA ADDRESS       00710003 ˇ
K AREA LENGTH        00720003         FREEMAIN R,LV=(0),A=(1)    FREE TH
RK AREA              00730003NOFREE   DS    0H
                     00740003         ST   ˇ
ORKAREA ADDRESS        00750003         ST    #2,ZLCWALEN          SET N
ORKAREA LENGTH         00760003         SPACE 1
                       00770003LENOK    DS    0H          ˇ
STILL ROOM               00780003         L     #0,ZLCWA            WORK
RESS + WORK AREA LENGTH  00790003         AR    #0,#5               POIN
ERE TO MOVE DUMPED ATOM  00800003         LR    #1,#4               SOUR
GTH = DUMPED ATOM LENGTH   00810003         LR    #15,#1              TA
GTH = DUMPED ATOM LENGTH   00820003         LR    #14,#7              SO
RESS = WHERE DUMPED ATOM   00830003         MVCL  #0,#14              MO
D ATOM Tˇ
T TOTAL LENGTH SO FAR        00850003AFTMOVE  DS    0H
                             00860003         L     #6,##CDR(,#6)
 OF LIST               ˇ
UE.                            00880003NOMORE   DS    0H
AS BEEN PROCESSED              00890003         SPACE 1
                               0090000ˇ
                                 00910003* Translate the entire buffer t
case                             00920003*
                                 00930003* This is skˇ
e request, since the SELECT        00940003* service doesn't require upp
eywords and often the contents     00950003* are desired to be lowercase
 services fail if lowercase        00960003* keywords are present.  ˇ
                                     00970003*
                                     00980003* For simplicity, we check
t the first 6 characters of the      00990003* buffer are "SELECT".  Too
youˇ
                                       01010003* ZLCWA -> the dialog ser
ing                                    01020003* #5 = length thereof
                  ˇ
                                         01040003         CH    #5,=Y(L'
    If too short to be SELECT            01050003         BL    NOTSEL
    then it's not a SELECT call. +
      Get address of string    ˇ
)       Move beginning to testing area       01080003         TR    SELT
L       Fold to uppercase                    01090003         CLC   SELT
ECT     If string starts with SELECT         0ˇ
          then skip translation.  Else...      01110003NOTSEL   DS    0H
          It's not a SELECT service call...    01120003         L     #1
                                               01130003      ˇ
                                                 01140003         LA
                                                 01150003TRLOOP   DS
                                                 01160003         CR
                                                   01170003         BNH
                                                   01180003         TR
#1),UPTBL                                          01190003         AR
           ˇ
0                                                    01210003         B
OP                                                   01220003TR1      DS
                          ˇ
,0                                                     01240003
,EXTR                                                  01250003DONTFOLD
                  It's translated if it sˇ
                                                         01270003* SET U
TER LIST FOR ISPEX                                       01280003*
                                                        ˇ
  #5,BUFLEN           STORE PARM LENGTH                    01300003
  #1,BUFLEN           GET ADDRESS OF COMMAND WORK AREA     01310003
  #1,PARM1            SET PARAMETER LIST POINTER           01320003    ˇ
    #1,ZLCWA            GET ADDRESS OF COMMAND WORK AREA     01330003
    #1,PARM2            SET PARAMETER LIST POINTER           01340003
    PARM2,X'80'         SET VL BIT                           01350003*
      ˇ
EX                                                             01370003*
                                                               01380003
ICM   #15,15,@ISPEX  ˇ
  BNZ   EXOK                If not loaded, then                  0140000
  LOAD  EPLOC==CL8'ISPEX',ERRET=NOSPF                            0141000
  ST    #0,@ISPEX           Save entˇ
    LR    #15,#0              Get entry point                      01430
    DS    0H                                                       01440
                                                                    014

   01460003*
   01470003         ST    #9,ZLCISV09         Save #9 in case of interru
   01480003 ˇ
X    01490003         OI    ZLCIFLGS,ZLCISYS    Indicate non-ZIL code ru
     01500003         #BASR #14,#15             Call ISPEX
     01510003         TM   ˇ
d      01520003         BOR   #13                 then go to handle it
       01530003         NI    ZLCIFLGS,255-ZLCISYS Indicate ZIL code run
in     01540003*                          ˇ
         01550003* CONVERT THE RETURN CODE FROM THE COMMAND INTO A FIXNU
         01560003*
         01570003         LR    #2,#15              GET Rˇ
OR FIXNUM  01580003         LA    #0,16(,#11)         PASS CURRENT STACK
N TO CONS  01590003         #MKAT FIXED               USING CONTENTS OF
E FIXNUM   01600003         SPACE 1
             01610003RETURN   DS    0H
             01620003         SPACE 1
             01630003         #ZRET ,                   RESTORE REGISTER
TURN   ˇ
               01650003EXTR     TR    0(*-*,#1),UPTBL
               01660003         SPACE 1
               0167000ˇ
a ISPEXEC)       01680003         SPACE 1
                 01690003PARMS    DS    0A
                 01700003PARM1    DS ˇ
                   01710003PARM2    DS    A                   BUFFER ADD
                   01720003BUFLEN   DC    F'0'
                   01730003         SPACE 1         ˇ
                     01740003$SELECT  DC    C'SELECT '
                     01750003SELTEST  DS    CL(L'$SELECT)
                     01760003         SPACE 1                      ˇ
                       01770003UPTBL    DC    256YL1(*-UPTBL)
                       01780003         ORG   UPTBL+C'a'
                       01790003         DC    C'ABCDEFGHI'
  ˇ
                         01810003         DC    C'JKLMNOPQR'
                         01820003         ORG   UPTBL+C's'
                 +
               ˇ
                             01850003         SPACE 1
                             01860003NOSPF    DS    0H
LINK FAILS                   0ˇ
                              X01880003               'ZIL2121 ISPF dial
ces not available, module ISPEX01890003               X not found in ZIL
 - ',                         X01900003      ˇ
 to print out list of strings)   01910003         SPACE 1
                                 01920003BADLIST  DS    0H
                                 01930003         #ERR  PREFˇ
                                  X01940003               'ZIL2122 ZISEX
ot convert argument to string - ',X01950003               (#2),
                                  X01960003               X'0D',
carriage return                     X01970003               '(it''s a li
or, funarg, or structure).'          01980003         SPACE 1
                                     01990003ERROR3   DS    0H
ERROR - NOˇ
  CLEAR WORK AREA ADDRESS AND LENGTH   02010003         ST    #0,ZLCWA
                                       02020003         ST    #0,ZLCWALE
                         ˇ
                                        X02040003               'ZIL2123
: Not enough memory to build ISPF dialogX02050003                service
ring',                                  ˇ
      (try to print out list of strings)   02070003         SPACE 1
                                           02080003         LTORG
                                           02090003    +      END
                                             02100003{
         TITLE 'ZISGET - BUILT-IN ZIL 1.3 SUBROUTINE'
0***********************************************************************
2*                                                                     *
2*ˇ
002*                     All rights reserved.
002*
002**************ˇ
16002*
17002* (ZISGET 'foo) or (ZISGET "foo") returns the value of the ISPF
18002* dialog variable FOO.  It ˇ
0019002* VCOPY service, which it invokes.  The value is returned as a
0020002* LISP string.
0030002*                                       ˇ
 00040002***************************************************************
 00050002         SPACE
 00060002ZISGET   #ZBEG MINARGS=1,MAXARGS=1,NAME='ZISGET'     ˇ
   00070002         #ZPDS 1*4+12+0 = 16       DEFINE STACK SIZE
   00080002         #ZSAV ,                   SAVE REGISTERS
   00090002         SPACE 1
     00100002         L     #2,0(,#11)          Get arg 1
     00110002         CLI   ##TYPE(#2),##STRING OK if string
     00120002         BE    A1TYPOK
     0013000ˇ
       00140002         BNE   ERROR1               then use print name
       00150002         L     #2,##PNAME(,#2)
       00160002A1TYPOK  DS ˇ
         00170002         XR    #3,#3
         00180002         ICM   #3,B'0111',1(#2)    Get string length
         00190002         BZ    ERROR1    ˇ
riable nm  00200002         CH    #3,=H'8'            If longer than 8 c
s,         00210002         BH    ERROR1              then invalid varia
           00220002         MVC   VARNAME,=CL8' '        ˇ
             00230002         BCTR  #3,0
             00240002         EX    #3,MVCVAR           Move variable na
ing to up.c. 00250002*
               00260002* Get ISPLINK
               00270002*
               00280002         ICM   #15,15,@ISPLINK     Get address of
       +
     ˇ
                   00310002         ST    #0,@ISPLINK         Save entry
                   00320002         LR    #15,#0              Get entry
                   0ˇ
                     00340002*
                     00350002* INVOKE THE DIALOG SERVICE VIA ISPEX
                     00360002*     ˇ
                       00370002         ST    #9,ZLCISV09         Save #
e of interrupt         00380002         LA    #1,PARMS            POINT
ETER LIST FOR ISPLINK  00390002         OI    ZLCIˇ
-ZIL code running        00400002         #BASR #14,#15             Call
                         00410002         TM    ZLCIFLGS,ZLCIATTN   If a
 interrupt occurred      00420002         BOR   #13              ˇ
 handle it                 00430002         NI    ZLCIFLGS,255-ZLCISYS I
ZIL code running again     00440002*
                           00450002* If CONTROL ERRORS RETURN is in effe
ˇ
 condition.                  00470002* We should really handle this bett
e set ZERRMSG???             00480002*
               ˇ
                               00500002         BE    VERROR
                               00510002         LTR   #15,#15
                              ˇ
                                 00530002         SPACE 1
                                 00540002         L     #5,LENGTHS
length of returned value         00550002    ˇ
t address of returned value        00560002         LR    #2,#5
t length of string to create       00570002         XR    #1,#1
try code 0 = allocate new space    00580002         L     #1ˇ
Get address of string space service  00590002         LA    #0,16(,#11)
Set current stack pointer            00600002         #BASR #14,#15
Call ZILVSS to build string          00610002         LTR   #4,#4
  If ZILVSS failed,                    00620002         BZ    NOROOM
  then error                           00630002         LR    #7,#5
  Else get length of value             00640002         MVCL  #4,#6
  Move valˇ
    Return with string ptr in #15        00660002         SPACE 1
                                         00670002NOTFOUND DS    0H
    Variable requested no t found         00680002ˇÁ
1                                                        00690002
#15,NULLSTR         Return a null string                 00700002*******
RETURN                                                   00710002 ˇ
E 1                                                        00720002RETUR
  0H                                                       00730002
E 1                                                        00740002
Tˇ
ACE 1                                                        00760002MVC
    VARNAME(*-*),##VECDAT(#2)                                00770002
ACE 1           ˇ
DC    A(0)                Address of ISPLINK                   00790002
SPACE 1                                                        00800002P
DS    0A                       ˇ
  DC    A($VCOPY)           Address of 'VCOPY'                   0082000
  DC    A(NAMELIST)         Address of variable name list        0083000
  DC    A(LENGTHS)          Address of length(ˇ
    DC    A(VALUES)           Address of value(s)                  00850
    DC    A($LOCATE+X'80000000') Addr of 'LOCATE' parm             00860
    SPACE 1                                                  ˇ
OPY   DC    CL8'VCOPY'          Dialog service name                  008
CATE  DC    C'LOCATE '          Dialog service parameter             008
ELIST DC    C'('                Start of name list                   009
ARNAME  DC    CL8' '              Variable name                        0
        DC    C')'                End of name list                     0
ENGTHS  DS    F                   Length of returned value             0
ALUES   DS ˇ
2         SPACE 1
2NULLSTR  DC    YL1(##STRING),AL3(0),XL4'00'  String ""
2         SPACE 1         ˇ
002ERROR1   #ERR  'Argument to ZISGET not a valid ISPF variable name - '
002               0(#11)
002NOSPF    #ERR  'ZISGET failed, ISPF diˇ
00002VERROR   #ERR  'ZISGET failed, ISPF dialog error doing VCOPY.'
10002NOROOM   #ERR  'ZISGET failed, not enough vector/string space to re
20002                variable value.'                   ˇ
1030002         SPACE 1
1040002         LTORG
1050002         END                                                    ª
 01060002
ROUTINE'                   00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00017002* (ZISPUT 'foo "bar") sets the va
he ISPF dialog variable      * 00018002* FOO to the value BAR.  Itˇ
EPLACE service to do this.     * 00019002* The second argument is return
e value of the function.       * 00020002*
                               * 00030002*******************************
*ˇ
                                   00050002ZISPUT   #ZBEG MINARGS=2,MAXA
ME='ZISPUT'                        00060002         #ZPDS 2*4+12+0 = 20
FINE STACK SIZE ˇ
SAVE REGISTERS                       00080002         SPACE 1
                                     00090002         LM    #1,#2,0(#11)
Get args 1 and 2               ˇ
G Arg 1 must be a string               00110002         BE    A1TYPOK
  or                                   00120002         CLI   ##TYPE(#1)
L If symbol,                           0013000ˇ
     then use print name                 00140002         L     #1,##PNA
                                         00150002A1TYPOK  DS    0H
                                         00160002         XR ˇ
                                           00170002         ICM   #4,B'0
1)    Get string length                    00180002         BZ    ERROR1
      If null string, invalid variable nm  00190002         CH    #4,=H'
        If longer than 8 characters,         00200002         BH    ERRO
        then invalid variable name           00210002         MVC   VARN
' '                                          00220002         BCTR  #4,0
           ˇ
          Move variable name, folding to up.c. 00240002*
                                               00250002* Call ZILADMP to
t the value.  Note that thˇ
ucture.                                          00270002*
                                                 00280002         TM
2),##ATOM                                +
T                                      ˇ
PE(#2),##VEC                                         00310002         BO
IST                                                  00320002         L
ZLCADMP         Get address of ZILADMP               0ˇ
,#10              Set reg 1 for ZILADMP                00340002
4,#15             Call ZILADMP to dump atom            00350002
,#0               Get length of dumped atom            00360002      ˇ
#7,#1               Save address of dumped value         00370002*
                                                         00380002* GETMA
ea of storage which will belong to ISPF to hold the      00390002* value
 diaˇ
 not freeing it - this is the only way to guarantee that   00410002* ISP
ld on to its value.                                        00420002*
                   ˇ
    #5,LENGTHS          Store length of dumped atom          00440002
ETMAIN RC,LV=(0),LOC=BELOW Get storage for this value        00450002
R   #15,#15                       ˇ
BNZ   NOROOM                                                   00470002
ST    #1,PARM4            Store address of Getmained storage   00480002
OI    PARM4,X'80'                                ˇ
  LR    #0,#1               Destination address                  0050000
  LR    #1,#5               Destination length                   0051000
  LR    #14,#7              Source address                      ˇ
    LR    #15,#5              Source length                        00530
    MVCL  #0,#14              Move our data to getmained area      00540
                                                                   00550

                                                                     005
      ICM   #15,15,@ISPLINK     Get address of ISPLINK               005
      BNZ   LOˇ
        LOAD  EPLOC==CL8'ISPLINK',ERRET=NOSPF                          0
        ST    #0,@ISPLINK         Save entry point                     0
        LR    #15,#0         ˇ
2LOADED   DS    0H
2*
2* INVOKE THE DIALOG SERVICE VIA ISPEX      ˇ
002*
002         ST    #9,ZLCISV09         Save #9 in case of interrupt
002         LA    #1,PARMS            POINT TO PARAMETER LI ST FOR ISPL
80002ˇÁ
ing        00690002         #BASR #14,#15             Call ISPLINK
           00700002         TM    ZLCIFLGS,ZLCIATTN   If attention inter
urred      00710002 ˇ
             00720002         NI    ZLCIFLGS,255-ZLCISYS Indicate ZIL co
ng again     00730002*
             00740002* If CONTROL Eˇ
ode is higher  00750002* than 8, then we should really handle this bette
 set ZERRMSG?? 00760002*
               00770002         LTR   #15,#15     ˇ
                 00780002         BNZ   VERROR
                 00790002         SPACE 1
                 00800002         L     #15,4(,#11)         Returˇ
lue                00810002         SPACE 1
                   00820002RETURN   DS    0H
                   00830002         SPACE 1
ˇ
                     00850002         SPACE 1
                     00860002MVCVAR   OC    VARNAME(*-*),##VECDAT(#1)
               ˇ
                       00880002@ISPLINK DC    A(0)                Addres
LINK                   00890002         SPACE 1
                       0090000ˇ
                         00910002PARM1    DC    A($VREPLAC)         Addr
VREPLACE'                00920002PARM2    DC    A(NAMELIST)         Addr
ariable name list        00930002PARM3    DC ˇ
 length(s)                 00940002PARM4    DS    A                   Ad
 value(s)                  00950002         SPACE 1
                           00960002$VREPLAC DC    CL8'VREPLAˇ
ervice name                  00970002NAMELIST DC    C'('
 name list                   00980002VARNAME  DC    CL8' '
 name                        00990002         DC    C')'
 name list                     01000002LENGTHS  DS    F
 of value to set               01010002         SPACE 1
                               01020002ERROR1   #ERR  'Arg 1 to ZISPUT n
id ISPF vaˇ
                                 01040002BADLIST  #ERR  'Arg 2 to ZISPUT
st, vector or structure, which cX01050002               annot be an ISPF
variable value - ',4(#11)+
ialog services not avaiˇ
 dialog error doing VREPLACE.'       01080002NOROOM   #ERR  'ZISPUT fail
le to GETMAIN storage to create variX01090002               able value f
'                                    09 1100002         SPACE 1
                                       01110002         LTORG
                                       01120002         END
                                       01130002{
    TITLE 'ZMSALTP - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010
****************************************************************** 00020
                                                                 * 00030
IL Version 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 000
                   All rights reserved.                            * 000
                                                                   * 000
***********ˇ
                                                                     * 0
 ZMSALTP takes two args.  Both must be strings or symbols.           * 0
                          ˇ
0* This is "ALPHALESSP" for Macsyma or other application that          *
0* requires ASCII collating.                                           *
0*                                       ˇ
000*********************************************************************
000*
000* THIS ROUTINE IS NOT RECURSIVE AND USES NO STACK SPAˇ
60000*
70000*******************************************************************
80000*                                                                 ˇ
0190000* SUPPORT FOR STRING AND SYMBOL COMPARES.  THE FOLLOWING COMPARIS
0200000*            ARE LEGAL:
0210000*
022000ˇ
 00230000*  STRING TO STRING
 00240000*  SYMBOL TO STRING
 00250000*  STRING TOˇ
 * 00260000*
 * 00270000* ALL MAY BE REMOVED FOR FULL COMMON LISP.
 * 00280000*                        ˇ
   * 00290000***********************************************************
**** 00300000ZMSALTP  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZMSALTP'
     00310000         SPACE                        ˇ
       00320000         LR    #3,#15
       00330000         DROP  #15
       00340000         USING ZMSALTP,#3                          ˇ
         00350000         SPACE
         00360000         LM    #1,#2,0(#1)         LOAD ARGUMENTS
         00370000         LR    #15,#10             PRESET RETURN VALUE
 +

             00400000         CLI   ##TYPE(#1),##STRING IF ARGUMENT IS A
             00410000         BE    ARG1OK              THEN OK
             0ˇ
L              00430000         BNE   ERROR1              THEN
               00440000         L     #1,##PNAME(,#1)      TAKE THE PRIN
ELSE ERROR     00450000ARG1OKˇ
                 00460000         CLI   ##TYPE(#2),##STRING IF ARGUMENT
ING              00470000         BE    ARG2OK              THEN OK
                 00480000         CLI   ##TYˇ
YMBOL              00490000         BNE   ERROR2              THEN
                   00500000         L     #2,##PNAME(,#2)      TAKE THE
ME, ELSE ERROR     00510000ARG2OK   DS    0H               ˇ
#2 -> string 2       00520000         SPACE 1
                     00530000         XR    #5,#5               Clear in
ister                00540009         XR    #7,#7               Clear in
egister                00550009         ICM   #5,7,1(#1)          Get st
gth 1                  00560009         BZ    STR1NULL            If zer
g 1 is ""              00561009         ICM   #7,7,1(#2)          Get st
gth 2    ˇ
ing 2 is ""              00571009         LA    #4,##VECDAT(,#1)    Poin
t of string arg1         00580002         LA    #6,##VECDAT(,#2)    Poin
t of string arg2        ˇ
                           00600000*                                  #4
SS OF ARG 1 DATA           00610000*                                  #5
H OF ARG 1 DATA            00620000*   ˇ
RESS OF ARG 2 DATA           00630000*
GTH OF ARG 2 DATA            00640000*
                             00650000         LR    #1ˇ
ngth of arg1                   00660000         CR    #5,#7
 arg1 is longer                00670000         BNH   *+6
ch case                        00680000         LR    #15,#7         ˇ
shorter length of arg2           00690000         LA    #0,256
up constant 256                  00700000         LA    #2,TRTBLE
ult to EBCDIC translation        00700106         TM    ZLCLDFLG,ZLCLDAS
if Aˇ
en                                 00702006         LA    #2,TRTBLA
et to ASCII translation            00703006TRLOOP   DS    0H
                                    00710000ˇÁ
              Do while length >= 256               00720000         BL
R                                                  00730000         MVC
256),0(#4)    Move arg 1 text to work area         00740002 ˇ
1(256),0(#2)    Translate to collating code          00750006         MV
2(256),0(#6)    Move arg 2 text to work area         00760002         TR
2(256),0(#2)    Translate to collating code          00770006         CL
WK1(256),TRWK2    Compare what we have so far          00780001
SS                If less, finished, return T          00790000
EATER             If greater, finished, return NIL     00800000*
          ˇ
#4,#0               Bump up pointer to arg 1 text        00820002
#6,#0               Bump up pointer to arg 2 text        00830002
#15,#0              Bump ˇ
  TRLOOP              If some left, continue translating   00850000
  EQSOFAR             If none left, args equal, check it   00860000SHORT
  0H                  Compare for args sˇ
TR  #15,0               Reduce length for execute            00880000
    #15,MVC1            Move arg 1 text to work area         00890000
    #15,TR1             Translate to collating code    ˇ
EX    #15,MVC2            Move arg 2 text to work area         00910000
EX    #15,TR2             Translate to collating code          00920000
EX    #15,CLC             Compare what we have so far          0093000ˇ
  BL    LESS                If less, finished, return T          0094000
  BH    GREATER             If greater, finished, return NIL     0095000
* B     EQSOFAR             Else equal, check what to return     0096000
  DS ˇ
    CR    #5,#7               Compare arg lengths                  00980
*** BL    LESS                arg 1 shorter than arg 2, thus LT    00990
*** BE    EQUAL     ˇ
***** B     GREATER             arg 1 longer than  arg 2, thus GT    010
      BNL   NOTLESS             If len1 < len2 then true else false  010
E     DS    0H                  (i.ˇ
        LR    #15,#8              Return T                             0
        BR    #14                                                      0
ALSE    DS    0H                  (i.e. false)    ˇ
9         LR    #15,#10             Return NIL
0         BR    #14
0STR1NULL DS    0H                  String 1 is null             +
009         ICM   #7,7,1(#2)          Get string length 2      ˇ
82009         BZ    EQUAL               If zero, strings are equal
83009         B     LESS                Otherwise, arg1 < arg2, return t
84009         SPACE 1
1085009STR2NULL EQU   FALSE               String 2 is null, but string 1
1086009*                                  i.e. arg1 > arg2, return false
1089009         SPACE 1
1089109LESS  ˇ
 01089209NOTLESS  EQU   FALSE               Arg 1 not less than arg 2: f
 01089309EQUAL    EQU   FALSE               Arg 1 equal to arg 2:      f
 01089409GREATER  EQU   FALSˇ
   01089509         SPACE 1
   01090009MVC1     MVC   TRWK1(*-*),0(#4)    Ex'd: Move arg 1 text to w
   01100002TR1      TR    TRWK1(*-*),0(#2) ˇ
e    01110006MVC2     MVC   TRWK2(*-*),0(#6)    Ex'd: Move arg 2 text to
ea   01120002TR2      TR    TRWK2(*-*),0(#2)    Ex'd: Translate to colla
e    01130006CLC      CLC   TRWK1(*-*),TRWK2    Ex'd: Compˇ
far    01140001         EJECT
       01150000TRWK1    DS    CL256
       01160000TRWK2    DS    CL256
         01170000         SPACE 1
         01180000TRTBLE   DC    256YL1(*-TRTBLE)    ebcdic -> ebcdic tra
able     01181008         SPACE 1
        ˇ
table      01183006*
           01183106TRTBLA   DC    X'000102038209837F' 00-07 NUL SOH STX
T LC DEL   01190006    ˇ
R SO SI      01200005         DC    X'1011121387880889' 10-17 DLE DC1 DC
 NL BS IL    01210005         DC    X'18198A8B1C1D1E1F' 18-1F CAN EM CC
IGS IRS IUS  01220005         DC    X'ˇ
 LF ETB ESC    01230005         DC    X'98998F9091050607' 28-2F na na SM
ENQ ACK BEL    01240005         DC    X'9A9B169C92939404' 30-37 na na SY
RS UC EOT      01250005         DC    X'9D9E9F951415Aˇ
C4 NAK na SUB    01260005         DC    X'20A1A2A3A4A5A6A7' 40-47 SP na
 na na na        01270005         DC    X'A8A9812E3C282B7C' 48-4F na na
 ( + SBAR        01280005         DC    X'26AAABACADAEAFB0' 50-57 & ˇ
a na na na         01290005         DC    X'B1B221242A293B5E' 58-5F na n
) ; ^              01300005         DC    X'2D2FB3B4B5B6B7B8' 60-67 - /
 na na na          01310005         DC    X'B9BA802C255F3E3F' 68-6F na n
 %  _ > ?           01320005ˇÁ
-77 na na na na na na na na        01330005         DC    X'C3603A234027
-7F na ` : # @ ' = "               01340005         DC    X'C46162636465
-87 na a b c d e f g               01350005 ˇ
88-8F h i na na na na na na          01360005         DC    X'CB6A6B6C6D
90-97 na j k l m n o p               01370005         DC    X'7172CCCDCE
98-9F q r na na na na na na          01380005         DC   ˇ
' A0-A7 na ~ s t u v w x               01390005         DC    X'797AD3D4
' A8-AF y z na na na LBRACK na na      01400005         DC    X'D8D9DADB
' B0-B7 na na na na na na na na        01410005         DC    X'E0E1E2E3
E6' B8-BF na na na na na RBRACK na na    01420005         DC    X'7B4142
47' C0-C7 { A B C D E F G                01430005         DC    X'4849E7
EC' C8-CF H I na na na na na na          01440005         DC    X'7D4A4B
50' D0-D7ˇ
F1F2' D8-DF Q R na na na na na na          01460005         DC    X'5CF3
5758' E0-E7 \ na S T Y V W X               01470005         DC    X'595A
F8F9' E8-EF Y Z na na naˇ
353637' F0-F7 0 1 2 3 4 5 6 7                01490005         DC    X'38
FDFEFF' F8-FF 8 9 na na na na na na          01500005         EJECT
                                       ˇ
                                               01520000         #ERR  'A
1 to ALPHALESSP not a string - ',(#4)          01530000ERROR2   LR    #4
                                               0154000ˇ
t 2 to ALPHALESSP not a string - ',(#4)          01550000         SPACE
                                                 01560000         LTORG
                                                 01570000         ENDà
                                                   01580000

10000*******************************************************************
11002*
12002*ˇ
0013002*                     All rights reserved.
0014002*
0015002**************ˇ
 00016002*
 00017002* ZMSASSQ: SAME AS ASSQ BUT WORKS ON NUMBERS AS WELL.
 00018002*                          ˇ
 * 00019002* NEEDED TO RUN MACSYMA, WHICH THINKS (ASSQ 1 '((1 . FOO))) W
 * 00020002*
 * 00030002* THIS ROUTINE IS NONRECURSIVE AND USES ˇ
   * 00040002*
   * 00050002***********************************************************
**** 00060002         SPACE 1                                     ˇ
       00070002ZMSASSQ  #ZBEG MINARGS=2,MAXARGS=2,NAME='ZMSASSQ'
       00080002         SPACE 1
       00090002         LR    #3,#15
 ˇ
         00110002         USING ZMSASSQ,#3
         00120002         SPACE 1
         0013000ˇ
           00140002         LR    #7,#6
           00150002         CLI   ##TYPE(#5),##FIXNUM IF ARG 1 IS A FIXN
           00160002         BE ˇ
             00170002*                                  ELSE DO NORMAL A
CH           00180002         SPACE 1
             00190002LOOP     DS    0H        ˇ
               00200002         CR    #7,#10              COMPARE (SUB)A
NIL            00210002         LM    #6,#7,##CAR(#7)     #6 = SUBLISTS'
7 = ITS CDR    00220002         BE    FAIL                IF ˇ
RETURN NIL       00230002         C     #5,##CAR(,#6)       IF ARG 1 NOT
CAR'S CAR        00240002         BNE   LOOP                THEN CONTINU
UBALIST'S CDR    00250002         LR    #15,#6              ELSE RETURN
UBALIST'S CAR      00260002         BR    #14
                   00270002         SPACE 1
                   00280002PFIX     DS    0H                  SEARCH FOR
NUM        +
IXNUM    ˇ
LIST TO NIL            00310002         LM    #6,#7,##CAR(#7)     #6 = S
S CAR, #7 = ITS CDR    00320002         BE    FAIL                IF SUB
 NIL, RETURN NIL       0ˇ
IT (LEFT ELT OF PAIR)    00340002         BM    FIXNLOOP            IF I
 A CONS, NO MATCH        00350002         CLC   0(8,#5),0(#4)       IF T
VALUE ARE NOT EQUAL      00360002      ˇ
NUE WITH SUBALIST'S CDR    00370002         LR    #15,#6              EL
N WITH SUBALIST'S CAR      00380002         BR    #14
                           00390002         SPACE 1   ˇ
                             00400002FAIL     DS    0H
D IN ALIST                   00410002         LR    #15,#10
IL                           00420002         BR    #14              ˇ
                               00430002         SPACE 1
                               00440002         LTORG
                               00450002         END
    
                            00460002{
TLE 'ZMSDELQ - BUILT-IN ZIL 1.3 SUBROUTINE FOR MACSYMA'      00010000***
************************************************************ 00011002*
                                                           * 00012002*ˇ
sion 1.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
             All rights reserved.                            * 00014002*
                                                             * 00015002*
*****ˇ
                                                               * 0001700
LQ: SAME AS DELQ BUT WORKS ON NUMBERS AS WELL.                 * 0001800
                    ˇ
S ROUTINE IS NONRECURSIVE AND USES NO STACK SPACE.               * 00020
                                                                 * 00030
***********************************ˇ
      SPACE 1                                                        000
DELQ  #ZBEG MINARGS=2,MAXARGS=3,NAME='ZMSDELQ'                       000
      SPACE 1                                     ˇ
        LR    #7,#15              LOCAL BASE REGISTER                  0
        USING ZMSDELQ,#7                                               0
        DROP  #15                                                ˇ
2         SPACE 1
2         LM    #1,#3,0(#1)         LOAD ARGS 1, 2, 3
2         LR    #15,#2              PRESET RETURN VALUE
ˇ
002         CR    #3,#13              IF ARG 3 NOT SUPPLIED
002         BNE   ARG3SUP             THEN
002         LR ˇ
70002         B     ARG3OK               AND GO PROCESS
80002ARG3SUP  DS    0H                  ELSE
90002         SPACE 1         ˇ
0200002         CR    #3,#10              IF ARG3 (COUNT) IS NIL
0210002         BE    ARG3OK              THEN IT'S OK
0220002         CLI   ##TYPE(#3),##FIXNUM ELSˇ
 00230002         BNE   ARG3ERR             OTHERWISE ERROR
 00240002         ICM   #6,#15,##CDR(#3)    GET FIXNUM VALUE OF ARG3 = C
 00250002         BNPR  #14                 IF NOT POSITIVE,ˇ
S  00260002ARG3OK   DS    0H
   00270002         LR    #4,#10              INITIALIZE BASHEE POINTER
   00280002         SPACE 1
     00290002         CLI   ##TYPE(#1),##FIXNUM IF ARG 1 IS A FIXNUM
       00300002         BE    FIXP                THEN GO TO DO FIXNUM D
G EQL  00310002         SPACE 1
       00320002LOOP     DS    0H                  DO WHILE LIST IS NOT N
       0ˇ
         00340002         BER   #14                 RETURN WITH VALUE IN
         00350002         TM    ##TYPE(#2),##ATOM   IF LIST ENDS WITH AT
         00360002      ˇ
           00370002         C     #1,##CAR(,#2)       IF ARG1 IS EQ TO C
UB)LIST    00380002         BNE   NOTEQ               THEN...
           00390002         L     #2,#ˇ
             00400002         CR    #4,#10               IF WE HAVE SOME
 BASH        00410002         BE    NOBASH               THEN
             00420002         ST    #2,##CDR(,#4)    ˇ
PLICE OUT CAR) 00430002         B     AFTBASH              ELSE
               00440002NOBASH   LR    #15,#2                JUST CHANGE
RN VALUE PTR   00450002AFTBASH  DS    0H                            ˇ
                 00460002         CR    #3,#10               IF THERE IS
 (ARG3 NOT NIL)  00470002         BE    LOOP                 THEN...
                 00480002         BCT   #6,LOOP               DECREMENT,
OP ˇ
H CASE RETURN      00500002NOTEQ    DS    0H                  ELSE THIS
N'T MATCH          00510002         LR    #4,#2               SET BASHEE
                  ˇ
ST                   00530002         B     LOOP                CONTINUE
                     00540002         SPACE 1
                     00550002FIXPˇ
IS A FIXNUM            00560002         SPACE 1
                       00570002FIXNLOOP DS    0H
                       00580002         CR    #2ˇ
LIST REACHED             00590002         BER   #14                 RETU
VALUE IN #15             00600002         TM    ##TYPE(#2),##ATOM   IF L
 WITH ATOM               00610002         BOR   #14            ˇ
 ENDED IN NIL              00620002         L     #5,##CAR(,#2)       LO
F (SUB)LIST                00630002         CLC   0(8,#5),0(#1)       IF
L TO CAR OF (SUB)LIST      00640002         BNE   FXNOTEQ             TH
                             00650002         L     #2,##CDR(,#2)
 FROM (SUB)LIST              00660002         CR    #4,#10
AVE SOMETHING TO BASH        00670002         BE    FXNOBASH
                              00680002ˇÁ
)         BASH IT (RPLACD TO SPLICE OUT CAR) 00690002         B     FXAF
         ELSE                                00700002FXNOBASH LR    #15,
          JUST CHANGE THE RETURN VALUE PTR   00710002Fˇ
                                               00720002         CR    #3
           IF THERE IS A COUNT (ARG3 NOT NIL)  00730002         BE    FI
           THEN...                             00740002         BCT  ˇ
OOP           DECREMENT, THEN LOOP UNLESS COUNT  00750002         BR
              REACHED, IN WHICH CASE RETURN      00760002FXNOTEQ  DS
            ELSE THIS CAR DOESN'T MATCH          00770002         LR
    ˇ
DR(,#2)       CDR DOWN (SUB)LIST                   00790002         B
OP            CONTINUE LOOPING                     00800002         SPAC
                   ˇ
alid DELQ count argument - ',(#3)                    00820002         SP
                                                     00830002         LT
                                  `                    00840002
                                                       00850002

 00010000***************************************************************
 00011002*
 00012002*ˇ
 * 00013002*                     All rights reserved.
 * 00014002*
 * 00015002**************ˇ
**** 00016002*      ZMSDREM TAKES THREE ARGUMENTS. ALL MUST BE FIXNUMS.
   * 00017002***********************************************************
**** 00018002ZMSDREM  #ZBEG MINARGS=3,MAˇ
       00019002*
       00020002         #ZPDS 24                  DEFINE STACK SIZE
       00030002         #ZSAV ,                   SAVE ˇ
         00040002         SPACE
         00050002         LM    #3,#5,0(#11)        LOAD ARGUMENTS
         00060002         CLI   ##TYPE(#3),##FIXNUM IS ARG 1 A FIXNUM?ˇ
           00070002         BNE   NFX1                IF NOT, ERROR
           00080002         CLI   ##TYPE(#4),##FIXNUM IS ARG 2 A FIXNUM?
           00090002         BNE   NFX2                IF NOT, ERROR
     ˇ
             00110002         BNE   NFX3                IF NOT, ERROR
             00120002*--------------------------------------------------
-----------* 0013000ˇ
             * 00140002*------------------------------------------------
-------------* 00150002         L     #3,##CDR(,#3)       GET ARG 1
               00160002         M  ˇ
                 00170002         D     #2,##CDR(,#5)       DIVIDE BY AR
ET REMAINDER     00180002         #MKAT FIXED               MAKE A FIXNU
                 00190002*                        ˇ
                   00200002RETURN   DS    0H                  RETURN WIT
OM                 00210002         SPACE 1
                   00220002         #ZRET ,                   RESˇ
S AND RETURN         00230002         SPACE 1
                     00240002NFX1     #ERR  'Argument 1 to *DBLREM not a
- ',(#3)             00250002NFX2     #ERR  'Argument 2 to *DBLREM not a
ˇ
m - ',(#5)             00270002         SPACE 1
                       00280002         LTORG
               +
                          00300002{
MSEQ - BUILT-IN ZIL 1.3 SUBROUTINE FOR MACSYMA'        00010000*********
****************************************************** 00011002*
                                                     * 00012002*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013002*
       All rights reserved.                            * 00014002*
                                                       * 00015002*******

E 1                                                        00017002*****
********************************************************** 00018002*
              ˇ
LIKE EQ BUT CONSIDERS EQL FIXNUMS TO BE EQ.                * 00020002*
                                                           * 00030002***
*****************************ˇ
SPACE 1                                                        00050002Z
#ZBEG MINARGS=2,MAXARGS=2,NAME='ZMSEQ'                         00060002
SPACE 1                                     ˇ
  USING ZMSEQ,#15                                                0008000
  SPACE 1                                                        0009000
  LM    #2,#3,0(#1)                                        ˇ
    CR    #2,#3                                                    00110
    BE    TRUE                                                     00120
    CLI   0(#2),##FIXNUM                                           00130
      BNE   FALSE                                                    001
      CLC   0(8,#2),0(#3)                                            001
      BNE   FALSE                                                    001
***** BE ˇ
        DROP  #15                                                      0
RUE     LR    #15,#8                                                   0
        BR    #14       ˇ
2FALSE    LR    #15,#10
2         BR    #14
2         END                          Œ
002
                     00010000*******************************************
******************** 00011002*
                   * 00012002*ˇ
er Laboratory Inc.   * 00013002*                     All rights reserved
                     * 00014002*
                     * 00015002**************ˇ
************************ 00016002*
                       * 00017002* ZMSMEMQ: SAME AS MEMQ BUT WORKS ON NU
 WELL.                 * 00018002*                          ˇ
                         * 00019002* NEEDED TO RUN MACSYMA, WHICH THINKS
XNUMS CAN BE EQ.         * 00020002*
                         * 00030002* THIS ROUTINE IS NONRECURSIVE AND US
STACK SPACE.               * 00040002*
                           * 00050002***********************************
**************************** 00060002         SPACE 1
          ˇ
ZMSMEMQ'                       00080002         SPACE 1
                               00090002         LR    #2,#15
                         ˇ
                                 00110002         DROP  #15
                                 00120002         LR    #4,#14
 RETURN ADDRESS                  0013000ˇ
AD ARGS 1 AND 2                    00140002         CLI   ##TYPE(#14),##
F ARG 1 IS A FIXNUM                00150002         BE    PFIX
EN DO FIXNUM SEARCH                00160002         SPAˇ
                                     00170002LOOP     DS    0H
ELSE DO NORMAL (EQ) SEARCH           00180002         SPACE 1
                                     00190002         CR    #15,#10   ˇ
  WHEN (SUB)LIST IS NIL                00200002         BER   #4
  THEN RETURN NIL                      00210002         LM    #5,#6,##CA
  #14 = CAR OF (SUB)LIST, #15 = CDR    00220002         LTR   #5,#5
  IF ˇ
    THEN BAD LIST, RETURN NIL            00240002         CR    #14,#5
    IF ARG1 IS EQ TO CAR OF (SUB)LIST    00250002         BER   #4
    THEN RETURN     ˇ
      ELSE GET CDR OF (SUB)LIST            00270002         B     LOOP
      AND CONTINUE.                        00280002BADLIST  DS    0H
      (SUB)LIST IS NOT ATOMIC      +
        WHAT THE HECK...         ˇ
          JUST RETURN NIL                      00310002         SPACE 1
                                               00320002PFIX     DS    0H
          SEARCH FOR EQL FIXNUM                0ˇ
                                                 00340002FIXNLOOP DS
                                                 00350002         SPACE
                                                 00360002      ˇ
0             WHEN (SUB)LIST IS NIL                00370002         BER
              THEN RETURN NIL                      00380002         LM
##CAR(#15)    #5 = CAR OF (SUB)LIST, #6 = CDR      00390002         LTR
5               IF (SUB)LIST CELL WAS REALLY ATOMIC  00400002         BM
IST             THEN BAD LIST, RETURN NIL            00410002         CL
#14),0(#5)      IF ARGS ARE EQL (BOTH FIXNA)         00420002         BE
             ˇ
5,#6              ELSE GET CDR OF (SUB)LIST            00440002
XNLOOP            AND CONTINUE.                        00450002
                            E                            00460002
                                                         00470002
                                                         00480002{
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002*
       * 00017002* ZMSREMQ: SAME AS REMQ BUT WORKS ON FIXNUMS AS WELL.
YMA.   * 00018002*                          ˇ
         * 00019002*****************************************************
********** 00020002         SPACE 1
           00030002ZMSREMQ  #ZBEG MINARGS=2,MAXARGS=3,NAME=ˇ
             00040002         #ZPDS 3*4+12+4  =     28
             00050002         #ZSAV ARGS=3
             00060002         SPACE 1
               00070002         LM    #5,#7,0(#11)        #5 = ARG1, #6
#7 = ARG3      00080002         MVI   COMPVAL,X'FF'       Set impossible
QL type        00090002         CLI   ##TYPE(#5),##FIXNUM But if arg1 is
m        ˇ
                 00110002         MVC   COMPVAL(8),0(#5)     set compare
o fixnum body    00120002ARG1NFIX DS    0H
                 0013000ˇ
                   00140002* Arg 1 is kept on stack, since CONS might re
t anyhow.          00150002         SPACE 1
                   00160002         CR ˇ
PLIED                00170002         BE    ARG3NULL             then pr
 if NIL              00180002         CR    #7,#10              IF ARG3
IS NIL               00190002         BE    ARG3NULL  ˇ
                       00200002         CLI   ##TYPE(#7),##FIXNUM ELSE A
 BE A FIXNUM           00210002         BNE   ARG3ERR             OTHERW
R                      00220002         ICM   #7,#15,##CDR(#7)    GETˇ
ALUE OF ARG3 = COUNT     00230002         BP    ARG3OK              If n
ive, then                00240002         LR    #15,#6               ret
2                        00250002         B     RETURN
    ˇ
IL (or unsupplied)         00270002         XR    #7,#7               SE
fixnum value = 0           00280002*                                  Th
T the same as speci+
3.  This value wiˇ
decremented without ever going 00310002*
o.                             00320002ARG3OK   DS    0H
 contains fixnum value of arg3 0ˇ
 eventual result to NIL          00340002         LA    #5,24-##CDR(,#11
pseudolocative for bashing list  00350002         CR    #6,#10
rg 2 is NIL                      00360002      ˇ
en return NIL.                     00370002LOOP     DS    0H
se start looping.                  00380002         ICM   #1,15,##CAR(#6
t CAR of sublist                   00390002         BM    RETUˇ
If sublist wasn't a CONS, return     00400002         C     #1,0(,#11)
If arg1 is EQ to CAR of (sub)list    00410002         BE    EQ
 or                                  00420002         CLC   COMPVAL(8),0
  arg1 is EQL to CAR (if fixnum)       00430002         BNE   NOTEQ
   then                                00440002EQ       DS    0H
                                       00450002         BCT   #7,NEXTCDR
   decrementˇ
     If count still nonzero, just        00470002*
     continue by skipping this element.  00480002*
     If count goes to zero,ˇ
        get CDR of remaining (sub)list     00500002         ST    #0,##C
        bash new list being built          00510002         B     RETURN
        return new list                   ˇ
                                             00530002NOTEQ    DS    0H
        ELSE THIS CAR DOESN'T MATCH          00540002*
        Include CAR in new list, already #1  00550002****ˇ
#6)       Arg 1 to CONS = CAR of sublist       00560002         L     #1
S         Get address of ZILCONS               00570002         LR    #2
          Arg 2 to CONS = NIL                  00580002         #BASR #1
            Call CONS to get new list element    00590002*
                                                 00600002* Note: We assu
#5 is not relocated by GC, being a CONS pointer. 00610002*       We assu
#6 is nˇ
                                                   00630002         ST
CDR(,#5)      Bash list being built with new cell  00640002         LR
              Set new ˇ
                                                     00660002NEXTCDR  DS
                                                     00670002         L
#CDR(,#6)       Bump down arg2 list.                  00680002ˇÁ
      CR    #6,#10              Until arg 2 goes to NIL              006
      BNE   LOOP                 continue.                           007
      SPACE 1                                                        007
ETURNZ  DS    0H                                                       0
        L     #15,24(,#11)        Load return value                    0
        SPACE 1                                                        0
ETURN   DS   ˇ
2         #ZRET ,
2         SPACE 1
2RETURNA  DS    0H          ˇ
002*                                  (and no count argument)
002         ST    #6,##CDR(,#5)       Bash list with atomic end of list
002         B     RETURNZ             and rˇ
10002         SPACE 1
20002COMPVAL  DS    D                   Area to compare fixnum value
30002         SPACE 1                                     ˇ
0840002ARG3ERR  #ERR  'Invalid REMQ count argument - ',(#7)
0850002         SPACE 1
0860002         LTORG
 00870002         END
 00880002
UBROUTINE'                 00010000*************************************
************************** 00011002*
                         * 00012002*ˇ
k Draper Laboratory Inc.   * 00013002*                     All rights re
                           * 00014002*
                           * 00015002**************ˇ
****************************** 00016002*
                             * 00018002* THIS SUBROUTINE MAKES A STRUCTU
F A LIST.  THE SIZE OF THE   * 00019002* STRUCT IS THE LENGTH OF Tˇ
                               * 00020002*
                               * 00030002* IT TAKES ONE REQUIRED ARGUMEN
LIST.                          * 00040002*
 ˇ
D ITS CAR MUST BE A SYMBOL.      * 00060002*
                                 * 00070002*****************************
****************ˇ
                                     00090002ZMSTRUCT #ZBEG MINARGS=1,MA
NAME='ZMSTRUCT'                      00100002         SPACE 1
                               ˇ
                                       00120002         #ZSAV ARGS=1
                                       00130002         SPACE 1
                                       0014000ˇ
    LOAD ARG1 = THE LIST                 00150002         TM    ##TYPE(#
M   IF LIST IS NIL OR ATOMIC             00160002         BO    ERROR1
    THEN ERROR                           00170002         L  ˇ
      GET CAR OF LIST                      00180002         CLI   ##TYPE
YMBOL IF NOT A SYMBOL                      00190002         BNE   ERROR3
      THEN ERROR                           00200002         XR    #7,#7
        INITIALIZE LENGTH TO ZERO            00210002LENLOOP  DS    0H
        LOOP TO DETERMINE LENGTH OF LIST     00220002         TM    ##TY
#ATOM   IF ATOM OR IMPROPER LIST             00230002         BO    ERRO
        THEˇ
          INCREMENT COUNT                      00250002         L     #1
#1)       GET NEXT CDR OF LIST                 00260002         CR    #1
          UNTIL END OF LISˇ
            CONTINUE                             00280002GOTLEN   DS
            #7 = NUMBER OF ELEMENTS IN LIST      00290002         SLA
            MULTIPLY BY 4 FOR STRUCT LENG+
              SET LENGTH FOR ZILVSS    ˇ
1               ENTRY CODE 0 = ALLOCATE NEW SPACE    00320002         L
ZLCVSS          GET ADDRESS OF STRING SPACE SERVICE  00330002         LA
6(,#11)         SET CURRENT STACK LOCATION           0ˇ
4,#15             CALL ZILVSS TO BUILD THE OBJECT      00350002
,#4               IF STRUCT BUILD FAILED               00360002
ROR4              THEN ERROR                           00370002      ˇ
##TYPE(#15),##STRUCT SET OBJECT TYPE = STRUCT            00380002
#2,0(,#11)          GET ARG 1 (THE LIST)                 00390002
#6,4                SET INCREMENT REGISTER FOR BXLE      00400002
#7,0ˇ
  #1,#1               SET INDEX REGISTER                   00420002INITL
  #0,##CAR(,#2)       GET EACH ELEMENT OF LIST             00430002
  #0,0(#1,#4)      ˇ
    #2,##CDR(,#2)       GET NEXT LIST ELEMENT                00450002
LE  #1,#6,INITLOOP                                           00460002
ACE 1                             ˇ
DS    0H                  #15 POINTS TO STRUCT BUILT           00480002
SPACE 1                                                        00490002
#ZRET ,                                          ˇ
  SPACE 1                                                        0051000
  #ERR  'Argument to ZMSTRUCT not a non-null proper list - ',   X0052000
        0(#11)                                                  ˇ
3   #ERR  'First element of structure to be allocated not a symbolX00540
           - ',0(#11)                                              00550
4   #ERR  PREFIX=NO,'ZIL4010 ZMSTRUCT: Not enough vector/string spX00560

      SPACE 1                                                        005
      LTORG                                                          005
      SPACE 1 j                                                        0
        END                                                            0
{
E'                 00010000*********************************************
****************** 00011002*
                 * 00012002*ˇ
 Laboratory Inc.   * 00013002*                     All rights reserved.
                   * 00014002*
                   * 00015002**************ˇ
********************** 00016002*
                     * 00017002* THIS SUBROUTINE MAKES A VECTOR OUT OF A
THE SIZE OF THE      * 00018002* VECTOR IS THE LENGTH OF Tˇ
                       * 00019002*
                       * 00020002* IT TAKES ONE REQUIRED ARGUMENT - THE
                       * 00030002*
                         * 00040002*************************************
************************** 00050002         SPACE 1
                           00060002ZMVECTOR #ZBEG MINARGS=1,MAXARGS=1,NA
CTOR'   ˇ
                             00080002         #ZPDS 1*4+12+0 = 16
                             00090002         #ZSAV ,
                       ˇ
                               00110002         L     #1,0(,#11)
RG1 = THE LIST                 00120002         XR    #7,#7
LIZE LENGTH TO ZERO            0013000ˇ
 TO DETERMINE LENGTH OF LIST     00140002         CR    #1,#10
 END OF LIST                     00150002         BE    GOTLEN
AVE THE LENGTH                   00160002         TM ˇ
 ATOM OR IMPROPER LIST             00170002         BO    ERROR1
EN ERROR.  ELSE...                 00180002         L     #1,##CDR(,#1)
T NEXT CDR OF LIST                 00190002         BCT   #7,LENLOOPˇ
DECREMENT COUNT AND CONTINUE         00200002GOTLEN   DS    0H
#7 = NUMBER OF ELEMENTS IN LIST      00210002         LCR   #7,#7
MAKE IT POSITIVE                     00220002         SLA   #7,2
MULˇ
  SET LENGTH FOR ZILVSS                00240002         XR    #1,#1
  ENTRY CODE 0 = ALLOCATE NEW SPACE    00250002         L     #15,ZLCVSS
  GET ADDRESS OF Sˇ
    SET CURRENT STACK LOCATION           00270002         #BASR #14,#15
    CALL ZILVSS TO BUILD THE OBJECT      00280002         LTR   #4,#4
    IF STRING BUILD FAILED       +
      THEN ERROR               ˇ
##VECTOR SET OBJECT TYPE = VECTOR            00310002         L     #2,0
        GET ARG 1 (THE LIST)                 00320002         LA    #6,4
        SET INCREMENT REGISTER FOR BXLE      0ˇ
          SET TERMINATION REGISTER FOR BXLE    00340002         XR    #1
          SET INDEX REGISTER                   00350002INITLOOP L     #0
#2)       GET EACH ELEMENT OF LIST             00360002      ˇ
#4)         INITIALIZE EACH ELEMENT IN VECTOR    00370002         L
(,#2)       GET NEXT LIST ELEMENT                00380002         BXLE
ITLOOP                                           00390002         SPACE
                                                   00400002RETURN   DS
              #15 POINTS TO VECTOR BUILT           00410002         SPAC
                                                   00420002         #ZRE
           ˇ
                                                     00440002ERROR1   #E
ument to ZMVECTOR not a proper list - ',0(#11)       00450002ERROR2   #E
IX=NO,'ZIL4010 ZMVECTOR: Nˇ
e to build vector.'                                    00470002
                                                       00480002
                                         ´               00490002
1                                                        00500002
                                                         00510002{
Á
     00010000***********************************************************
**** 00011002*
   * 00012002*ˇ
c.   * 00013002*                     All rights reserved.
     * 00014002*
     * 00015002**************ˇ
******** 00016002*
       * 00017002* THIS FUNCTION UPDATES THE CURRENT CHARACTER POSITION
       * 00018002* SPECIFIED INPUT FILE FROMˇ
ALUE.    * 00019002*
         * 00020002*****************************************************
********** 00030002*                                       ˇ
           * 00040002* ZPUTFPI TAKES TWO ARGUMENTS: ARGUMENT 1 = THE NEW
ER POINTER * 00050002*                              ARGUMENT 2 = INPUT F
 (OPT.)    * 00060002*
             * 00070002*************************************************
************** 00080002         SPACE
               00090002ZPUTFPI  #ZBEG MINARGS=1,MAXARGS=2,NAME='ZPUTFPI'
         ˇ
                 00110002         #ZSAV ,                   SAVE REGISTE
                 00120002         SPACE
                 0013000ˇ
 SPEC              00140002         SPACE
                   00150002         L     #15,0(,#11)         GET ARG 1
                   00160002         CLIˇ
                     00170002         BNE   ERR2113             THEN ERR
                     00180002         L     #14,##CDR(,#15)     GET FIXN
                     00190002         ST    #14,ZLFCHAˇ
ARACTER POINTER        00200002         SPACE
                       00210002         #ZRET ,                   RESTOR
ERS AND RETURN         00220002         SPACE                        ˇ
                         00230002ERR2113  DS    0H
                         00240002         #ERR  'Argument 1 to ZPUTFPI n
num - ',0(#11)           00250002         SPACE
    ˇ
                           00270002         SPACE
                           00280002         END
                   ª         00290002
RMINIT - BUILT-IN ZIL 1.3 SUBROUTINE'                  00010000*********
****************************************************** 00011001*
                                                     * 00012001*ˇ
.3 (c) 1989 The Charles Stark Draper Laboratory Inc.   * 00013001*
       All rights reserved.                            * 00014001*
                                                       * 00015001*******

                                                         * 00017001* THI
S CALLED BY READ OR RDRMACRO WHEN THE READTABLE IS NOT   * 00018001* YET
ED.  IT ALLOCAˇ
ING THE DEFAULT SYSTEM READER MACRO DEFINITIONS.           * 00020001*
                                                           * 00030001* I
nitializes the ZIL work area,ˇ
                                                             * 00050001*
his function may be used to reinitialize an                  * 00060001*
g readtable (e.g. after RMMAC has changed itˇ
                                                               * 0008000
ROUTINE USES REGISTERS 14 THROUGH 2.                           * 0009000
                                                           ˇ
****************************************************************** 00110
    SPACE 1                                                        00120
IT  #ZBEG MINARGS=0,MAXARGS=0,NAME='ZRMINIT',SUBRS=ZILSUBR         00130
      SPACE 1                                                        001
      DROP  #15                                                      001
      SPACE 1                                                        001
      LR ˇ
        USING ZRMINIT,#2                                               0
        ICM   #1,15,ZLCRDTBL      IF WE DON'T HAVE A READTABLE YET,    0
        BNZ   GOTIT     ˇ
1         LA    #0,256               GET LENGTH OF STORAGE FOR READTABLE
1         GETMAIN R,LV=(0)           GET STORAGE FOR IT
1         ST    #1,ZLCRDTBL          SAˇ
001GOTIT    DS    0H                  NOW INITIALIZE THE READTABLE
001         MVC   0(256,#1),READTBL   COPY CONSTANT READ TABLE TO OURS
001         L     #15,@RMQUOTE        GET ADDRESS OF Zˇ
60001         STCM  #15,7,QUOTEMAC+1    STORE INTO READER MACRO FORM
70001         L     #15,@RMSHARP        GET ADDRESS OF ZRMSHARP SUBROUTI
80001         STCM  #15,7,SHARPMAC+1    STORE INTO READER MACRO FORM +
0290001         L     #15,@RMBQ           GET ADDRESS OF ZRMBQ SUBRˇ
 00300001         STCM  #15,7,BACKQMAC+1    STORE INTO READER MACRO FORM
 00310001         L     #15,@RMCOMMA        GET ADDRESS OF ZRMCOMMA SUBR
 00320001         STCM  #15,7,COMMAMAC+1    STORE INTO READER MACRO FORM
 0ˇ
   00340001         ST    #15,ZLCRMCHN        ADD TO (EMPTY) READER MACR
   00350001         OI    C''''(#1),X'80'     IDENTIFY READER MACRO CHAR
   00360001      ˇ
     00370001         OI    C'`'(#1),X'80'      IDENTIFY READER MACRO CH
     00380001         OI    C','(#1),X'80'      IDENTIFY READER MACRO CH
     00390001         SPACE 1   ˇ
       00400001         ICM   #1,15,ZLCWA         GET ADDRESS OF ZIL WOR
       00410001         BNZ   RETURN              IF ALREADY ALLOCATED,
       00420001         LA    #0,512           ˇ
         00430001         ST    #0,ZLCWALEN         SAVE ITS LENGTH
         00440001         #GETMAIN RU,LV=(0),LOC=BELOW GETMAIN THE WORK
         00450001         ST    #1,ZLCWA            SAVE ITS Aˇ
           00460001RETURN   DS    0H
           00470001         LR    #15,#10             SET RETURN VALUE T
           00480001         BR    #14                 RETURN
             00490001         SPACE 1
             00500001ZILSUBRS DS    0A                  EXTERNAL SUBROUT
             00510001@RMQUOTE DC    V(ZRMQUOTE)         ADDRESS OF ' PRO
            ˇ
               00530001@RMSHARP DC    V(ZRMSHARP)         ADDRESS OF # P
               00540001         DC    CL8'ZRMSHARP'
               00550001@RMBˇ
OR               00560001         DC    CL8'ZRMBQ'
                 00570001@RMCOMMA DC    V(ZRMCOMMA)         ADDRESS OF ,
OR               00580001         DC    CLˇ
                   00590001ZILSUBRE DS    0A                  END OF SUB
                   00600001         SPACE 1
                   00610001*                             ˇ
                     00620001* THE (STATIC) INITIAL READER-MACRO CHAIN.
                     00630001*
                     00640001QUOTEMAC DC    C'''',AL3(*-*),A(SHARPMAC)
                       00650001SHARPMAC DC    C'#',AL3(*-*),A(BACKQMAC)
                       00660001BACKQMAC DC    C'`',AL3(*-*),A(COMMAMAC)
                       00670001COMMAMAC DC    C',',AL3(*-*),A(0)
                        00680001ˇÁ
                                       00690001READTBL  #RTBL ,
  DEFINE THE READ TABLE                00700001         SPACE 1
                                       00710001 ˘         LTORG
                                         00720001         SPACE 1
                                         00730001         END
                                         00740001
