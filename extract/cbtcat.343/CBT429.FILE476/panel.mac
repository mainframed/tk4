‹\INMR01








XZIL   
   TXZILC  
1525   TXZILF  
J  
XZILM  
   TXZILP  
EB1525   
S  
XZIL1  
25   TXZIL3  

6  
 TXZIL8  
25   

XS 
 TZFSEX2 
§

L4   
 

 
L9   
h²×



                          #  TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEF
                          !  TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(AS
                          ÿ
                            \  TYPE(TEXT) INTENS(LOW) COLOR(TURQ)
                            05 TYPE(DATAOUT) INTENS(LOW) COLOR(GREEN)
                            0D TYPE(DATAOÿ
                             )BODY
                             %------------------------- Full screen ZIL
-----------!FSMSG            %ISPF COMMAND ===>#ZCMD    ÿ
             %SCROLL ===>_AMT @!MOREMSG
                               %===>#IN
                                                                       ÿ

                                 %----+----1----+----2----+----3----+---
---5----+----6----+----7----+---\×FSDATA
      ÿ
                                   )REINIT
                                    REFRESH(FSMSG,ZCMD,AMT,MOREMSG,IN,FS
                     ÿ
                                      &XCURSOR = .CURSOR
                                      &XCSRPOS = .CSRPOS
                                    ø   &FSLVLIN = LVLINE(FSDATA)
                                       )END
                                       
                                                                  ^ TYPE
NTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE
NTENS(HIGH) COLOR(PINK)                                           ÿ
 INTENS(LOW)  COLOR(TURQ)                                           \ TY
 INTENS(HIGH) COLOR(YELLOW)                                         ! TY
 INTENS(HIGH) COLOR(RED)                                            $ TY
 ÿ
D(ÖÖ)                                                                %TU
Ö-Ö- ZIL PRIMARY OPTION MENU -Ö-Ö- TUTORIAL                          %SE
===>_ZCMD       ÿ
                                                                       #
owing topics are presented in sequence, or may be selected by number:
                               ÿ
NEWS       $- Display latest ZIL news
EDIT       $- Edit a ZIL source program or function
LISP       $- Invoke the ZIL interpreter      ÿ
\ FOREGROUND $- Compile/assemble/link ZIL program/function online
\ BATCH      $- Submit JCL to compile/assemble/link ZIL program/function
\ TSO        $- Invoke compiled ZIL program                  ÿ
%7\ TEST       $- Test the ZIL compiler
%8\ RELINK     $- Link new copy of function into existing program
%9\ ASSEMBLE   $- Assemble ZIL machine language function
INIT
PROC
  &ZSEL = TRANS(&ZCMD
           ÿ
                 2,TXZIL2
                 3,TXZIL3
                 4,TXZIL4 ÿ
                   5,TXZIL5
                   6,TXZIL6
                   7,TXZIL7              ÿ
                     8,TXZIL8
                     9,TXZIL9
                     *,'?'                              ÿ
                       )
        &UP=ISR00003
       )END                                                            »
         
                                    ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELL
TE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK
                                    ÿ
                                      \ TYPE(TEXT) INTENS(HIGH) COLOR(YE
                                      ! TYPE(TEXT) INTENS(HIGH) COLOR(RE
                                      $ TYPE(TEXT) ÿ
                                       )BODY EXPAND(ÖÖ)
                                       %TUTORIAL -Ö-Ö- ZIL - COMPILER OP
-Ö- TUTORIAL                           %SELECTION ===>_ZCMD       ÿ
                                         +
                                         %Show compiler transforms? Y or
                                         +
 ÿ
 output of the source transformation phase  of the ZIL compiler.  !N+spe
hat you do not.  (The compiler invokes the  transformations regardless o
ou specify here.ÿ
                                             \
 (continued)                                 )INIT
                               ÿ
                                               )PROC
                                               )END
                                                

PE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
PE(TEXT) INTENS(HIGH) COLOR(PINK)
TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)
TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
TYPE(TEXT) INTENS(HIGH) COLOR(RED)
TYPE(TEXT) ÿ
BODY EXPAND(ÖÖ)
TUTORIAL -Ö-Ö- ZIL - COMPILER OPTIONS -Ö-Ö- TUTORIAL
SELECTION ===>_ZCMD       ÿ
 +
 %Show TRNLIST? Y or N
 !Y+specifies that you wish to see the ouÿ
se  of the ZIL compiler.  !N+specifies that you do not.  (The compiler i
he  transformations regardless of what you specify here.)
                                                        ÿ
     %Show ZILLIST? Y or N
     !Y+specifies that you wish to browse the ZIL compiler listing. !N+s
      that you do not.  If the compilation fails, the listing will be bÿ
        regardless.

       %Show ASMLIST? Y or N
      ÿ
ler when  the output of the ZIL compiler is assembled.  !N+specifies tha
 not.     If the assembly fails, the listing will be browsed regardless.
                     ÿ
           %Show LNKLIST? Y or N
           !Y+specifies that you wish to browse the linkage editor listi
specifies   that you do not. If the ÿ
d regardless.
             \                                   (continued)
             )INIT                                 ÿ
                &ZCONT = TXZILD
               )PROC
               )END                                               Æ
                 
                                            ^ TYPE(TEXT) INTENS(HIGH) CO
OW) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) CO
)                                           ÿ
RQ)                                           \ TYPE(TEXT) INTENS(HIGH)
LLOW)                                         ! TYPE(TEXT) INTENS(HIGH)
D)                                            $ TYPE(TEXT) ÿ
GREEN)                                         )BODY EXPAND(ÖÖ)
                                               %TUTORIAL -Ö-Ö- ZIL - COM
TIONS -Ö-Ö- TUTORIAL                           %SELECTION ===>_ZCMD
                                                 +
                                                 %Overriding name

         ÿ
he ZIL function, program or module being compiled   that differs from th
f the PDS member you are compiling.  If you leave   this field blank, th
mber name becomes the naÿ
 load module created by the compilation process is    the value of this
r the PDS member name if this field is left blank).  +
                                       ÿ

                                                       !Y+requests that
iler run in#"debug mode". +The output from the        ÿ
ame, but a great deal of internal information will be     dumped to the
ion listing.
                                                         \           ÿ
         (End of compiler options)                         )INIT
                                                           )PROC
                                                           )END
                                                             
 
        ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
        @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
        ÿ
          \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
          ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
          $ TYPE(TEXT) ÿ
           )BODY EXPAND(ÖÖ)
           %TUTORIAL -Ö-Ö- ZIL - FUNCTION LOADING -Ö-Ö- TUTORIAL
           %SELECTION ===>_ZCMD       ÿ
             +

              Files containing interpretive Lisp funcÿ
ccessed         under the interpreter by loading them via the ZIL (LOAD)
n.              You can include this in your INIT file, or you can put y
tion            definitions into your INIT file directly.           ÿ
                 )INIT
                 )PROC
                 )END
   º               
                                              @ TYPE(TEXT) INTENS(LOW)
NK)                                           # TYPE(TEXT) INTENS(LOW)
RQ)                                           ÿ
YELLOW)                                         ! TYPE(TEXT) INTENS(HIGH
RED)                                            $ TYPE(TEXT) INTENS(LOW)
GREEN)                                         )BODY EXPAND(Öÿ
                                                 %TUTORIAL -Ö-Ö- ZIL - R
NTERPRETER IN BATCH -Ö-Ö- TUTORIAL               %SELECTION ===>_ZCMD
                                                ++
                                                   #To run the ZIL inter
n batch, you can use the following JCL:
                                                   \   // ------- JOB st
---        ÿ
R,DSN=PROGLIB.CMD.CNTL                               %   //MYRUN    EXEC
    @(see optional parameters below)                 %   //SYSIN    DD *
                          ÿ
nput here)                                             %   /*

                                         ÿ
 following optional parameters on the EXEC statement:
                                                         %   INIT=
 of INIT file - except for ZIL 1.2 (see below))         ÿ
nM, nnnK or nnn)                                           %   PDSIZE=
nM, nnnK or nnn)                                           %   VSSIZE=
nM, nnnK or nnn)                                           %   SUBRLIB=ÿ
load library containing compiled user functions)             %   SYS=
SYS=N for new system, SYS=O for old system)                  #
                                                                 To spec
NIT fiÿ
  DISP=SHR,DSN=userid.init.filename                            )INIT
                                                               )PROC
                     h                                           )END
                                                                 

            ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
            @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
            ÿ
              \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
              ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
              $ TYPE(TEXT) ÿ
               )BODY EXPAND(ÖÖ)
               %TUTORIAL -Ö-Ö- ZIL - MEMBER SELECTION LIST -Ö-Ö- TUTORIA
               %SELECTION ===>_ZCMD       ÿ
                 +

                  If the@OPTION+field is left blank, a meÿ
s displayed for     the specified source library name.  You may select m
or compilation or   editing by entering the appropriate code in the sele
eld:
                       !F$to compile a function
                       !M$to compile a module
                       !P$to compile a program
       ÿ
                       +
                        You may specify a different name for the resulti
module by             ÿ
t to the member name.     Any value that was present in the@OVERRIDING N
d on the XZIL option 4    panel is ignored when the member list is used.
                                     ÿ
                           )INIT
                           )PROC
                           )END                      
                             
                                                        ^ TYPE(TEXT) INT
) COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INT
) COLOR(PINK)                                           ÿ
W)  COLOR(TURQ)                                           \ TYPE(TEXT) I
GH) COLOR(YELLOW)                                         ! TYPE(TEXT) I
GH) COLOR(RED)                                            $ TYPE(TEXT) ÿ
LOW)  COLOR(GREEN)                                         )BODY EXPAND(
                                                           %TUTORIAL -Ö-
 COMPILATION MACROS -Ö-Ö- TUTORIAL                         %SELECTION ==
      ÿ
                                                              You may sp
 to four@compile-time macro files+(or none at all)            if you wis
e your own macro defiÿ
function+or\program#(options 4, 5).
                                                               +Macro fi
 be sequential data sets or PDS membÿ
ISP source code.
                                                                  Macro
ons may be accessed under the interpreter by loadinÿ
(LOAD) function.  You can include this in your INIT file,           or y
ut your macro definitions into your INIT file directly.            )INIT
                                                                  ø  )PR
                                                                     )EN
                                                                     

                ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
                @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                ÿ
                  \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                  ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                  $ TYPE(TEXT) ÿ
                   )BODY EXPAND(ÖÖ)
                   %TUTORIAL -Ö-Ö- ZIL - "DRIBBLE" FEATURE -Ö-Ö- TUTORIA
                   %SELECTION ===>_ZCMD       ÿ
                     +

                      The "dribble" facility, or session outpÿ
a means of              recording all terminal input and output during a
OPS5 session.
                        You may select this function by entering the nam
 sequential dataset or    a SYSOUT class to hold the "dribble" output.
t class H is specified,   the output will be placed on the held queue.

           ÿ
ace.  This is the default.
                            If a data set is specified, it may or may no
tly exist; but if it      ÿ
yte records.  The "dribble"   file is allocated as MOD; this means that
output will be written at     the end of any existing data.  If you wish
t a fresh "dribble" file,     you may delÿ
ay use EDIT to empty it.
                               +You must NOT specify a partitioned data
this function.                 )INIT                    ÿ
                                 )PROC
                                 )END
                                                                       Q
                                    Note: This panel is part of the tuto
 both ZIL and OPS5.
                                   
                                                              ^ TYPE(TEX
S(HIGH) COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEX
S(HIGH) COLOR(PINK)                                           ÿ
ENS(LOW)  COLOR(TURQ)                                           \ TYPE(T
ENS(HIGH) COLOR(YELLOW)                                         ! TYPE(T
ENS(HIGH) COLOR(RED)                                            $ TYPE(T
NTENS(LOW)  COLOR(GREEN)                                         )BODY E
)                                                                %TUTORI
 ZIL - COMPILATION OPTIONS -Ö-Ö- TUTORIAL                        %SELECT
_ZCMD       ÿ
                                                                    When
pile, you must specify whether you are compiling a                 %func
ogram+or%module.+          ÿ
                                                                      A%
+is a single LISP function definition, which may be brought into a    ZI
n via the autoloading process automaticallÿ
ed by name, or may be linkedited with a ZIL%program.+ The input source
mpiled must contain a definition for the function of that name.
                                                         ÿ
le+is a compiled LISP load module which is "loaded" by executing it by
s a function of no arguments (it will be automatically loaded via the
ading process).  When this is done, all of the code in the module,
uding function definitions, variable definitions and executable
essions, gets loaded into the ZIL system in compiled format.  There cann
 function of the same name as the name you are giving the input source a
dule.  ÿ

 Ö -- continued -- Ö Ö
IT                    ÿ
PROC
&ZCONT = TXZILP1
END                                  Î
 
                            ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILI
SE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                            ÿ
                              \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                              ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                              $ TYPE(TEXT) ÿ
                               )BODY EXPAND(ÖÖ)
                               %TUTORIAL -Ö-Ö- ZIL - COMPILATION OPTIONS
UED) -Ö-Ö- TUTORIAL            %SELECTION ===>_ZCMD       ÿ
                                ++
                                  A%program+is a completely linked load
hich does\not+get brought         in under the ZIL interpreter.  Rather,
 executed as a program at           the operating system level (e.g. in
the@// EXEC+statement, or           under TSO via the@CALL,@XINVOKE+or@X
and).
        ÿ
tem library (normally                 'PROGLIB.ZIL.LOAD') must be presen
TEPLIB, TASKLIB or equivalent.
                       ÿ
l as OPS5 and MACSYMA, are examples of  ZIL%programs.+

                                      ÿ
with the same name as the name you are    giving the input source progra
e compiling.
                                         %Note:+It isÿ
 create ZIL%programs,+since you will not          benefit from maintenan
L system functions, and you may even end          up with incompatible c
                                                                    ÿ



   ÿ
                                               )PROC
                                               )END
                  Æ                              

PE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
PE(TEXT) INTENS(HIGH) COLOR(PINK)
TYPE(TEXT) INTENS(HIGH) COLOR(TURQ)
TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
TYPE(TEXT) INTENS(HIGH) COLOR(RED)
TYPE(TEXT) ÿ
BODY EXPAND(ÖÖ)
TUTORIAL -Ö-Ö- ZIL - RUN-TIME OPTIONS -Ö-Ö- TUTORIAL
SELECTION ===>_ZCMD       ÿ
 +

  The following options affect the executÿ
t   to virtual storage usage.  All default to values selected by the cur
    implementation.  For more information, see member#$PARM+of 'PROGLIB.
'. +                                                    ÿ
      The values may be specified as!nnnM, nnnK,+or!nnn,+or you may leav
lank  (DEFAULT is equivalent to blank).
                                                                       ÿ
       %ACSIZE+-~Size of initially active CONS space in bytes.
       %CSSIZE+-~Total allocated CONS space in bytes.  Limits expansion
E.     %PDSIZE+-~Size of the control stack in bytes.
      ÿ

         +The following additional option may appear on the panel:
                     ÿ
           %SYSTEM#(NEW, OLD or blank)

           \SYSTEM+should be left blÿ
est) version  of ZIL, for which you would specify!NEW,+or a backup versi
which you     would specify!OLD.+
             )INIT                                 Q
               )PROC
               )END
               
                                          ^ TYPE(TEXT) INTENS(HIGH) COLO
) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLO
                                          ÿ
)                                           \ TYPE(TEXT) INTENS(HIGH) CO
OW)                                         ! TYPE(TEXT) INTENS(HIGH) CO
                                            $ TYPE(TEXT) ÿ
EEN)                                         )BODY EXPAND(ÖÖ)
                                             %TUTORIAL -Ö-Ö- ZIL - SUBRO
BRARIES -Ö-Ö- TUTORIAL                       %SELECTION ===>_ZCMD
                                              ++

                                                You may specify up to fo
utine lÿ

                                                 $  Access your own comp
ctions/modules under tÿ
unctions/modules at\compile time#(options 4, 5).   $  Include your own c
functions/modules in a ZIL\program#(options 4, 5). $  Run programs that
ecute or evaluate compiled functions/ÿ
                                                     +Subroutine librari
ot used to resolve external references when you       compile a ZIL%func
module.+ Functions and modules are always linkeditedÿ
 so that the interpreter can resolve@all+function       references compl
namically.
                                                       \ Ö Ö -- conÿ
 Ö                                                       )INIT
                                                          &ZCONT = TXZIL
                                                         )PROC
  n                                                        )END
                                                           


      ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
      @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
      ÿ
        \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
        ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
        $ TYPE(TEXT) ÿ
         )BODY EXPAND(ÖÖ)
         %TUTORIAL -Ö-Ö- ZIL - SUBROUTINE LIBRARIES (continued) -Ö-Ö- TU
         %SELECTION ===>_ZCMD       ÿ
          ++
           Ö Ö %Notes: Ö Ö
                                                   ÿ
               #ZIL option 3 will search your subroutine libraries for t
                interpreter, program name ZILIN.  Thus, you can run an a
                version of the interpreter using this facility.   ÿ

                 #ZIL options 4 and 5 will search your subroutine librar
IL                compilation time for any compiled functions or modules
aÿ
in                  (EVAL-WHEN (COMPILE) ...) forms, etc.).  It will als
 there              for the compiler, program name ZILCO.  Thus, you can
alternate       ÿ

                     #When a PROGRAM is being linkedited, the\target loa
y#is always           specifiedÿ
r resolving             external references,@AHEAD#of all subroutine lib
pecified.
                                              ÿ

                       )INIT
                       )PROC                                 h
                         )END
                         
                                                    ^ TYPE(TEXT) INTENS(
LOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(
LOR(PINK)                                           ÿ
COLOR(TURQ)                                           \ TYPE(TEXT) INTEN
COLOR(YELLOW)                                         ! TYPE(TEXT) INTEN
COLOR(RED)                                           )BODY EXPAND(Öÿ
                                                       %TUTORIAL -Ö-Ö- Z
PLAY NEWS -Ö-Ö- TUTORIAL                               %SELECTION ===>_Z
                                                      ++
  ÿ
member#$NEWS+of the ZIL documentation.
                                                            This member
periodically updaÿ
 and changes to the ZIL system.  The entries will be          in chronol
rder, the latest first.
                                ÿ
so access ZIL news via the (NEWS) function, which is                  av
in ZIL version 1.3.                                          )INIT
                                               ¼               )PROC
                                                               )END
                                                               

          ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
          @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
          ÿ
            \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
            ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
            $ TYPE(TEXT) ÿ
             )BODY EXPAND(ÖÖ)
             %TUTORIAL -Ö-Ö- ZIL - EDIT LISP SOURCE -Ö-Ö- TUTORIAL
             %SELECTION ===>_ZCMD       ÿ
              ++
                  Use this option to@EDIT+a ZIL source program or functi
                                                       ÿ
                    Your source#must+reside in a partitioned data set.

                   @Do not+enter a member name on the "source library ÿ
ne; enter             it where it says\MEMBER NAME.+ You may create eith
gram or a             function; in either case, the member name will bec
program               or function name (see options 4 and 5).
     ÿ
                        The source library may contain fixed-length or v
ength records,          numbered or unnumbered.  However, unnumbered var
gth records         ÿ
F).
                          You may create a new source library by enterin
 command line:                     ÿ
                         !  TSO XMAKEPDS xxx.LISP LISP
                         )INIT
                         )PROC                    n
                           )END
                           
                                                      ^ TYPE(TEXT) INTEN
COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INTEN
COLOR(PINK)                                           ÿ
  COLOR(TURQ)                                           \ TYPE(TEXT) INT
) COLOR(YELLOW)                                         ! TYPE(TEXT) INT
) COLOR(RED)                                            $ TYPE(TEXT) ÿ
W)  COLOR(GREEN)                                         )BODY EXPAND(ÖÖ
                                                         %TUTORIAL -Ö-Ö-
UN THE INTERPRETER -Ö-Ö- TUTORIAL                        %SELECTION ===>
    ÿ
                                                            This option
 ZIL@interpreter. +The interpreter is the part of a LISP    system with
st users are familiÿ
d enter LISP expressions to be evaluated, to see whether      they work
anner that you intended.  If you desire the increased speed   and effici
compiled code, you may compile youÿ
reter as well.
                                                                You may
the name of an@INIT file+which you have created tÿ
ive LISP environment;  this must be a sequential data set or a    member
S containing LISP source code, which is run interpretively.
                                                                ÿ
g topics will be presented only if selected by number:
                                                                    \1%-
 compiled code from subroutine libraries                            \2%-

fying session output recording ("dribble" feature)                    \4
ime options                                                           \5
o run the ZIL ÿ
                                                                       )

TRANS(&ZCMD                  ÿ
             1,*TXZILS
             2,*TXZILF
             3,*TXZILO                      ÿ
               4,*TXZILR
               5,*TXZILJ
               *,?                                         +
           )                                             Ý
END
{
                            ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILI
SE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                            ÿ
                              ~ TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)
                              \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                              ! TYPE(TEXT) ÿ
                                ? TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)
                               )BODY EXPAND(ÖÖ)
                               %TUTORIAL -Ö-Ö- ZIL - FOREGÿ
TUTORIAL                         %SELECTION ===>_ZCMD
                                ++
                                  This option compiles, assembles and li
ZIL function, program or module.   +
                                    Your source@must+reside in a partiti
a set. @Do not+enter a member name  on the "source library name" line; e
where itÿ
a program or a module;                see member#$COMPILE+of 'PROGLIB.ZI
for more information.
                       ÿ
 name of the load library into which    the function/program/module will
ed; it will have the same name as the   member name being compiled (unle
ave specified a name in the           ÿ
hat becomes the load module name).        To create a load library, ente
AKEPDS xxx.LOAD LOAD+on the\OPTION+line.
                                         ~The followiÿ
ed only if selected by number:                \1%-?FUNCTION, PROGRAM, or
option                                        \2%-?Specifying subroutine
 names                                        \3%-?Specifying compilÿ
ro file names                                   \4%-?Compiler options
                                                \5%-?ZIL run-time option
                                                \6%-?Member selection li
   ÿ
                                               )PROC
                                                &ZSEL = TRANS(&ZCMD
                  ÿ
                                                                     2,*
                                                                     3,*
                                 +
                               ÿ
LR
LL
                                              ÿ
                                                       )END
                                                        Change activity:
                                                        05/26< /88 - SEB
ember list support.                                      {

      ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
      @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
      ÿ
        ~ TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)
        \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
        ! TYPE(TEXT) ÿ
          ? TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)
         )BODY EXPAND(ÖÖ)
         %TUTORIAL -Ö-Ö- ZIL - BATCHÿ
           %SELECTION ===>_ZCMD
          ++
            This option creates JCL to compile, assÿ
ode.          It places you in EDIT on the JCL.  Enter!SUBMIT+to submit

              Your source@must+reside in a partitioned data set. @ÿ
 a member name  on the "source library name" line; enter it where it say
 NAME.+         You may compile the source as a function, a program or a
                see member#$COMPILE+of 'PROGLIB.ZIL.TEXT' for more infor
 ÿ
                  The\LOAD LIBRARY NAME+field contains the name of the l
ary into which    the function/program/module will be linked; it will ha
ame name as the ÿ
 in the            \Overriding name+field, in which case that becomes th
odule name).
                    To create aÿ
+on the\OPTION+line.
                     ~The following topics will be presented only if sel
 number:                \1%-?FUNCTION, PROGRAMÿ
                          \2%-?Specifying subroutine library names
                          \3%-?Specifying compile-time macro file names
                          \4%-?Compiler options              ÿ
                            \5%-?ZIL run-time options
                         )INIT
                         )PROC
                            &ZSEL = TRANS(&ZCMD
                                               1,*TXZILP
                                               2,*TXZILS
           +
         ÿ
                                                   5,*TXZILR
                                                   *,?
                        z                      )
                                 )END
                                 {
                                                              ^ TYPE(TEX
S(HIGH) COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEX
S(HIGH) COLOR(PINK)                                           ÿ
ENS(LOW)  COLOR(TURQ)                                           \ TYPE(T
ENS(HIGH) COLOR(YELLOW)                                         ! TYPE(T
ENS(HIGH) COLOR(RED)                                            $ TYPE(T
NTENS(LOW)  COLOR(GREEN)                                         )BODY E
)                                                                %TUTORI
 ZIL - RUN COMPILED PROGRAM -Ö-Ö- TUTORIAL                       %SELECT
_ZCMD       ÿ

ion runs a compiled LISP@program.+
                           ÿ
l allocate DD names ZILI and ZILO to your terminal, and execute the
m from the run library which you have specified, while including
ibrary and the ZIL load library in the libÿ
tion of that call.

ou need additional run libraries, you should preallocate ÿ
e TSO@ALLOCATE+command to ddname#ZILLIB.+

llowing topics will be presented only if selected by number:

$Run-time options

       ÿ
SEL = TRANS(&ZCMD
                 1,*TXZILR
                 *,?  V
             )
END

                          ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE
)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                          ÿ
                            ~ TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)
                            \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                            ! TYPE(TEXT) ÿ
                              ? TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)
                             )BODY EXPAND(ÖÖ)
                             %TUTORIAL -Ö-Ö- ZIL - TEST ÿ
L                              %SELECTION ===>_ZCMD
                              ++
                                This option runs the ZIL compiler in foÿ
d, without performing an          assembly or link.  The generated sourc
rather than being saved in a      dataset, is sent to your TSO terminal.

      ÿ
a set. @Do not+enter a member name  on the "source library name" line; e
where it says\MEMBER NAME.+         You may compile the source as a func
program or a module; ÿ
for more information.
                                      The source member name is required
u need not specify a source library ÿ
d the macro library names, the          compiler will obtain its input f
 TSO terminal.
                                        The Lisp foÿ
 input to the compiler.
                                         ~The following topics will be p
 only if selected by number:                                      ÿ
                                              \1%-?Specifying subroutine
 names                                        \2%-?Specifying macro libr
s                                             \3%-?Compiler options
 ÿ
                                             )INIT
                                             )PROC
                ÿ
                                                                   1,*TX
                                                                   2,*TX
                               +
                             ÿ
                                                                       *
                                                                 )
                                            Ø        )END
                                                     {
-)ATTR
  ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
  ÿ
    \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
    ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
    $ TYPE(TEXT) ÿ
     )BODY EXPAND(ÖÖ)
     %TUTORIAL -Ö-Ö- ZIL - RELINK FUNCTION INTO PROGRAM -Ö-Ö- TUTORIAL
     %SELECTION ===>_ZCMD       ÿ
      ++
            Use this option to relink a recompiled ZIL function into a c
            ZIL program, without having to recoÿ

              The compiled@function+load module specified by\FUNCTION NA
be            included from the library specified by\INCLUDED ÿ
n               the compiled@program+load module specified by\MAIN PROGR
is              relinked in the load library specified by\LOAD MODULE LI

                 @Do not+specify a function name as the main program nam
g it              would prevent you from being able to access the correc
ns of             functions under the interpreter.
            ÿ
                    The load library must already contain the program wh
o be                relinked using the new version of the function.  If
not,                you mayÿ

                 )INIT
                 )PROC                    n
                   )END
                   
                                              ^ TYPE(TEXT) INTENS(HIGH)
LLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH)
NK)                                           ÿ
TURQ)                                           ~ TYPE(TEXT) INTENS(LOW)
TURQ)                                           \ TYPE(TEXT) INTENS(HIGH
YELLOW)                                         ! TYPE(TEXT) ÿ
R(RED)                                            ? TYPE(TEXT) INTENS(LO
R(GREEN)                                         )BODY EXPAND(ÖÖ)
                                                 %TUTORIAL -Ö-Ö- ZIL - F
UND ASSEMBLY Ö-Ö- TUTORIAL                         %SELECTION ===>_ZCMD
                                                  ++
                                                    This option assemble
nks a ZIL fÿ
                                                      Your source@must+r
 a partitioned data set. @Do not+enter a member name  on the "source lib
e" line; enter it where itÿ
                                                        The\LOAD LIBRARY
eld contains the name of the load library into which    the assembler fu
ill be linked; it will have the same nameÿ
mbled (unless you have specified a name in the           \Overriding nam
 in which case that becomes the load module name).
                                                        ÿ
rary, enter!TSO XMAKEPDS xxx.LOAD LOAD+on the\OPTION+line.
                                                            You may leav
mber name field blank or specify a pattern containing an    asterisk (*ÿ
hich case a member list will be displayed.  You can select    members fo
ly (A) or edit (E) from this member list.  Overriding names   for the lo
es can be specified by entering them in the "LOADMOD" field   on the mem
; the ÿ
                                                               )PROC
                                                               )END
                     ÿ
                                                                  Change
y:
                                    “                               05/2
EB1525 - Added member list support.
                                                                   
ç
              ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
              @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
              ÿ
                \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                ? TYPE(TEXT) ÿ
                 )BODY EXPAND(``)
                 %TUTORIAL -`-`- Full Screen ZFSEXEC -`-`- TUTORIAL
                 %SELECTION ===>_ZCMD       ÿ
                  +%
                   +This is an ISPF-based full-screen interface for ZFSE
                                                           ÿ
                      To enter ZFSEXEC expressions, simply type them in
nd+input field        next to the arrow.  The expressions will be proces
the output            from them will be displayed in a scrollable format

                        To terminate this full-screen dialog, press the!
, or type!END+on        the%ISPF COMMAND+line (the@first+input field wit
ow).     ÿ
                         +The following topics will be presented in sequ
may be selected by        entering the appropriate number in the%SELECTI
field above:            ÿ
                            \1%-?ISPF command line commands
                            \2%-?Scrolling
                           )INIT       ÿ
                              &END = PFK(END)
                              IF (&END = &Z)
                               &END = END             ÿ
                               )PROC
                                &ZSEL = TRANS(&ZCMD
                                                   1,TZFSEX1         ÿ
                                                     2,TZFSEX2
                                                     *,?
                                               )
    #                              )END
                                   
                                                              ^ TYPE(TEX
S(HIGH) COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEX
S(HIGH) COLOR(PINK)                                           ÿ
ENS(LOW)  COLOR(TURQ)                                           ! TYPE(T
ENS(HIGH) COLOR(RED)                                            ? TYPE(T
ENS(LOW)  COLOR(GREEN)                                         )BODY EXP
)                                                                %TUTORI
 ZFSEXEC - FIND Command -`-`- TUTORIAL                           %SELECT
_ZCMD                                                           +%
            ÿ
mand (or%F+) is used to locate a%text string+in the                 disp
ll-screen scrollable output.
                           ÿ
e the%RFIND+command (&OR%&RFIN+) to repeat a FIND operation.
                                                                     #Sy
IND string/* NEXT/PREV/FIRST/LAST         ÿ
                                                                       @
s optional and defaults to@*+(meaning last-used string).               @
V/FIRST/LAST+defaults to@NEXT+.  Case is ignored.        ÿ

ing contains embedded blanks or double quotes, enclose it in
 quotes and place backslashes before "s and \', just as you
d type a Lisp or Macsyma string.

ples:
       ÿ
     F X             +finds the string X in the output display.
     FIND * PREV     +finds X again, but the previous occurrence.
     FIND "sqrt 2"   +ÿ
       FIND "\"foo\""  +finds the characters "foo" or "FOO"
INIT
&RFIN = PFK(RFIND)                   ÿ
  IF (&RFIN ^= &Z)
   &OR = 'or'
  ELSE                                              ÿ
     &RFIN = &Z
     &OR = '(no PFK defined)'
   )PROC                                                           +
     )END                                                        
       {
                                    ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELL
TE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK
                                    ÿ
                                      \ TYPE(TEXT) INTENS(HIGH) COLOR(YE
                                      ! TYPE(TEXT) INTENS(HIGH) COLOR(RE
                                      ? TYPE(TEXT) ÿ
                                       )BODY EXPAND(``)
                                       %TUTORIAL -`-`- ZFSEXEC - LOCATE
-`-`- TUTORIAL                         %SELECTION ===>_ZCMD       ÿ
                                        +%
                                         +The%LOCATE+command (or%LOC+or%
lls the output display to the             specified relative line number
 ÿ
                                           ?Examples:

                ÿ
 the top of the output display.              !       LOC 12          +sc
 line 12 of the output display.              !       LOCATE 99999    +sc
 the bottom of the output displÿ
                                               )PROC
                                               )END
                                                

PE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
PE(TEXT) INTENS(HIGH) COLOR(PINK)
TYPE(TEXT) INTENS(LOW)  COLOR(TURQ)
TYPE(TEXT) INTENS(HIGH) COLOR(RED)
TYPE(TEXT) INTENS(LOW)  COLOR(GREEN)
DY EXPAND(`ÿ
TUTORIAL -`-`- ZFSEXEC - SAVE Command -`-`- TUTORIAL
SELECTION ===>_ZCMD
                          ÿ
 +The%SAVE+command is used to copy the entire scrollable display stream
  into a data set.
                                         ÿ
   #Syntax: !SAVE dsname OLD/MOD

   @dsname+is required and must be a TSO-format data setÿ
     (no double quotes - TSO prefix assumed unless single quotes are use

     @OLD/MOD+defaults to@OLD.                                         ÿ
          #OLD - +write over the data set if it already exists.
          #MOD - +add data to the end of the data set if it exists.

      ÿ
.
         ?Examples:
                     ÿ
           !    SAVE foo.bar
           +    saves entire output stream into '&ZPREFIX..FOO.BAR'.
           !    SAVE 'SYS1.MY.DATA' ÿ
             +    writes entire output stream at the end of 'SYS1.MY.DAT
             )INIT
             )PROC                                 h
               )END
               
                                          ^ TYPE(TEXT) INTENS(HIGH) COLO
) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLO
                                          ÿ
)                                           \ TYPE(TEXT) INTENS(HIGH) CO
OW)                                         ! TYPE(TEXT) INTENS(HIGH) CO
                                            ? TYPE(TEXT) ÿ
EEN)                                         )BODY EXPAND(``)
                                             %TUTORIAL -`-`- ZFSEXEC - I
and Line Commands -`-`- TUTORIAL             %SELECTION ===>_ZCMD
                                              +%
                                               +The line marked%ISPF COM
>+near the top of your display screen           is\not+used to enter inp
ssions.ÿ
een interface.
                                                 +If you are familiar wi
 all the "ISPF commandÿ
ion, there are commands that you use that           are unique to this f
en interface.
                                     ÿ
be presented in sequence or may be selected by        entering a one-let
 in the%SELECTION ===>+field above:
                                                    ÿ
                                                        \L%-?The LOCATE
                                                        \S%-?The SAVE co
                                                                   ÿ
                                                         +The following
ill be presented only if selected by letter:
                                                          \C%-?ISPF comm
  ÿ
                                                           )PROC
                                                            &ZSEL = TRAN
                 ÿ
 F,TZFSEXF
 L,TZFSEXL
 S,TZFSEXS                      ÿ
   C,*ISP01305
   *,?
                                               +
                                                                  {

                ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
                @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                ÿ
                  \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                  ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                  ? TYPE(TEXT) ÿ
                   )BODY EXPAND(``)
                   %TUTORIAL -`-`- ZFSEXEC - Scrolling -`-`- TUTORIAL
                   %COMMAND ===>_ZCMD         ÿ
                    +%
                     +Scrolling in ZFSEXEC is similar to scrolling in IS
or browse.            You may enter scrolling commands -%UP, ÿ
+- on the ISPF command  line, or you may press one of the following PF k

                       %           &UPX  &DOX  &LEX  &RIX
                         +
                          The scroll amount is displayed in the upper ri
 corner of the ZFSEXEC    screen.  It applies to the%UP+and%DOWN+scrolli
nds only.  ÿ
                            The%LEFT+and%RIGHT+scroll commands have a sp
aning in ZFSEXEC.           Pressing the%&LEF+key retrieves the previous
xpression and places it onÿ
 to that expression).         Each time you press the%&LEF+key, ZFSEXEC
 one remembered input line.
                              Pressing thÿ
following the one last          retrieved by the%&LEF+key and scrolls th
 display accordingly.  If you   haven't pressed the%&LEF+key, the%&RIG+k
positions you to the latest     input line - a convenienÿ
self after scrolling up or down.
                                 \-`-`-continued-`-`-
                                 )INIT                                 ÿ
                                    &UPP = PFK(UP)
                                    &DOW = PFK(DOWN)
                                    &LEF = PFK(LEFT)
      ÿ
                                      &UPX = &Z
                                      &DOX = &Z
                     +
                   ÿ
                                          IF (&UPP = &Z)
                                           &UPP = UP
                                  ÿ
                                             &UPX = '&UPP.(UP)'
                                            IF (&DOW = &Z)
                                             &DOWÿ
                                              ELSE
                                               &DOX = '&DOW.(DOWN)'
                                              IF (&LEF = &Z)    ÿ
                                                 &LEF = LEFT
                                                ELSE
                                                 &LEX = '&LEF.(LEFT)'

                                                   &RIG = RIGHT
                                                  ELSE
              ÿ
                                                   )PROC
                                                    &ZCONT = ISP01420
                             €                       )END
                                                     {
})ATTR
  ^ TYPE(TEXT) INTENS(HIGH) COLOR(BLUE) HILITE(REVERSE)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
  ÿ
    \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
    ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
    $ TYPE(TEXT) ÿ
     )BODY EXPAND(ÖÖ)
     %-Ö-Ö-  ZIL PRIMARY OPTION MENU  -Ö-Ö-
     %OPTION ===>_OPT           ÿ
       +
       %         ^ ------------------------------------------------- %
       %         ^×                            ÿ
         %         ^× %ZIL - LISP on MVS - (c) 1987 C. S. Draper Lab.^×%
         %         ^×                                                 ×%
         %         ^ -----------------------------------------ÿ
           +
              %1\ NEWS       $- Display latest ZIL news
              %2\ EDIT       $- Edit a ZIL source program or function
                %3\ LISP       $- Invoke the ZIL interpreter
                %4\ FOREGROUND $- Compile/assemble/link ZIL program/func
ine             %5\ BATCH      $- Submit JCL to compile/assemble/link ZI
m/function  ÿ
                  %7\ TEST       $- Test the ZIL compiler
                  %8\ RELINK     $- Link new copy of function into exist
ram               %9\ ASSEMÿ
                    %T\ TUTORIAL   $- Display information about ZIL
                    %X\ EXIT       $- Terminate this option.
                                          ÿ
                   +Press!END+key to terminate ZIL option.
                   )INIT
                      .HELP = TXZIL                      ÿ
                     )PROC
                        &SEL = TRANS( TRUNC (&OPT,'.')
                                     1 ,'CMD(XZIL1)        MODE(FSCR)'
                                       1T,'CMD(XZIL1 XTRACE) MODE(LINE)'
                                       2 ,'CMD(XZIL2)        MODE(FSCR)'
                                       2T,'CMD(XZIL2 XTRACE) MODE(LINE)'
       +
     ÿ
                                           4 ,'CMD(XZIL4)        MODE(FS
                                           4T,'CMD(XZIL4 XTRACE) MODE(LI
                    ÿ
                                             5T,'CMD(XZIL5 XTRACE) MODE(
                                             6 ,'CMD(XZIL6)        MODE(
                                   ÿ
                                               7 ,'CMD(XZIL7)        MOD
                                               7T,'CMD(XZIL7 XTRACE) MOD
                                               8 ,ÿ
)'                                               8T,'CMD(XZIL8 XTRACE) M
)'                                               9 ,'CMD(XZIL9)        M
)'                                               9T,'CMD(XZIL9 XTÿ
NE)'                                               T ,'PGM(ISPTUTOR) PAR
'                                                  X ,'EXIT'
                                                   * ,'?'
E                                                    )
                                     )END
                                     {
********************************************************         *
                                                       *         * This
 obsolete, and has been for years.                     *         *ÿ
                                                         *         *****
**********************************************************         %----
---------  ZIL - SET UP ENVIRONMENT -------------------------------%COMM
_ÿ
                                                                     %
NE LIBRARY NAMES ===>_XZILSUB1                             +         %
                ÿ
be load libraries %===>_XZILSUB3                             +         %
ut member names)  %===>_XZILSUB4                             +
                               ÿ
r the name(s) of load libraries that contain your compiled LISP
tions, suitable for invoking from the interpreter.
need specify your own library names only if yoÿ
SP%program+that invokes EVAL or APPLY (e.g. your own interpreter)
 the ZILLOAD function, or if you have alternate run-time modules.
                                                             ÿ
Note:+Use this option ONLY if you intend to run LISP%programs+that
      you have compiled, which you would then use XINVOKE to run.
      If you wish only to use the interpreter, and compile only
        functions to run under the interpreter, you do not need to
        use this option to set up your environment.
========================================================================
WARNING: Thÿ
 =======================================================================
=+Press%END+key to return to the previous option menu.
 )INIT                    ÿ
      .HELP = TXZIL1
   )PROC
    IF (&ZCMD ^= ' ') .MSG = ISPZ001     ÿ
      VER(&XZILSUB1 DSNAME)
      VER(&XZILSUB2 DSNAME)
      VER(&XZILSUB3 DSNAME)                             ÿ
        VER(&XZILSUB4 DSNAME)
        &TEMP = TRUNC(&XZILSUB1,'(')
        IF (&TEMP ^= '&XZILSUB1')  .MSG = XZIL001                      +
          &TEMP = TRUNC(&XZILSUB2,'(')                               ÿ
            IF (&TEMP ^= '&XZILSUB2')  .MSG = XZIL001
            &TEMP = TRUNC(&XZILSUB3,'(')
            IF (&TEMP ^= '&XZILSUB3')  .MSG = XZIL001
    ÿ
              IF (&TEMP ^= '&XZILSUB4')  .MSG = XZIL001
              IF (&XZILSUB1 ^= &Z)
               &TEMÿ
                 IF (&TEMP ^= '''')
                  &XZILSUB1 = '''&ZPREFIX..&XZILSUB1'''
                IF (&XZILSUB2 ^= &ÿ
                   &TEMP = TRUNC(&XZILSUB2,1)
                   IF (&TEMP ^= '''')
                    &XZILSUB2 = '''&ZPREFIX..&XZIÿ
                    IF (&XZILSUB3 ^= &Z)
                     &TEMP = TRUNC(&XZILSUB3,1)
                     IF (&TEMP ^= '''')                         ÿ
                        &XZILSUB3 = '''&ZPREFIX..&XZILSUB3'''
                      IF (&XZILSUB4 ^= &Z)
                       &TEMP = TRUNC(&XZILSUB4,1)

                          &XZILSUB4 = '''&ZPREFIX..&XZILSUB4'''
                        VPUT (XZILSUB1 XZILSUB2 XZILSUB3 XZILSUB4) PROFI
              $          )END
                         {
                                                      ^ TYPE(TEXT) INTEN
COLOR(YELLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INTEN
COLOR(PINK)                                           ÿ
  COLOR(TURQ)                                           \ TYPE(TEXT) INT
) COLOR(YELLOW)                                         ! TYPE(TEXT) INT
) COLOR(RED)                                            $ TYPE(TEXT) ÿ
W)  COLOR(GREEN)                                         )BODY EXPAND(ÖÖ
                                                         %-Ö-Ö-  ZIL - E
 SOURCE  -Ö-Ö-                                           %COMMAND ===>_Z
    ÿ
                                                           \  MEMBER NAM
   %===>_XZILMEM # (Blank for member selection list)
                   ÿ
AME  %===>_XZILSRC                              +

                                  ÿ
st+reside in a partitioned data set.
                                                                  Do@not
 member name on the "source library name" line; eÿ
provided.  You may create either a@program+or a@function.

                                                                ÿ
key to return to the previous option menu.                         )INIT
                                                                      .H
ZIL2                                                               )PROC

^= ' ') .MSG = ISPZ001                                                VE
RC NB DSNAME)                                                         VE
EM    NAME)   ÿ
TRUNC(&XZILSRC,'(')
P ^= '&XZILSRC')  .MSG = XZIL001
ILMEM XZILSRC) PROFILE       h

¦¦
                    ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVER
                    @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                    ÿ
                      \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                      ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                      $ TYPE(TEXT) ÿ
                       )BODY EXPAND(ÖÖ)
                       %-Ö-Ö-  ZIL - RUN THE INTERPRETER  -Ö-Ö-
                       %COMMAND ===>_ZCMD         ÿ
                         +
                         @To edit a data set, type!EDIT@on the command l
move cursor to data set. +                                       ÿ
                           \  "INIT FILE"#(optional)    %===>_XZILINIT
                           +
                           \  COMPILED CODE LIBRARIES   %===>_XZILSUB1
ÿ
                     +       #   PDS libraries - don't    %===>_XZILSUB3
                     +       #   specify member names)    %===>_XZILSUB4
               ÿ
                               \  SESSION OUTPUT RECORDING ("Dribble" fi
ve both blank if not desired)
                              ÿ
                         +       $  Sysout class (held if H)  %===>_Z+

                                 \  Options: ÿ
PDSIZE_XZILPDSZ#VSSIZE_XZILVSSZ+   \  SYSTEM#(NEW, OLD or blank)%===>_Z
                           +       +
                                   +Press!END+key to return ÿ
tion menu.                           )INIT
                                      .ZVARS = '(XZILSOSC XZILSYS)'
                                      .HELP = TXZIL3
                                        IF (&XZILINIT = '''PROGLIB.ZIL.S
IT)''')                                    &XZILINIT = &Z
                                        IF (&XZILACSZ = &Z) &XZILACSZ =
          ÿ
T                                         IF (&XZILPDSZ = &Z) &XZILPDSZ
T                                         IF (&XZILVSSZ = &Z) &XZILVSSZ
T                        +
D)                     ÿ
                                              VER(&ZCMD LIST E,ED,EDI,ED
 ISPZ001)                                     IF (&ZCMD ^= '')
                                      ÿ
S)                                                &ZEDSMSG = 'Invalid cu
ition'                                            &ZEDLMSG = 'The cursor
 at a valid data set name for editing.'           .CUÿ
 believe I have to include this line!!!             .MSG = ISRZ001
                                                   &XZILCUR = .CURSOR
                                                  VER(&XZILINIT DSNAÿ
                                                    VER(&XZILSUB1 DSNAME
                                                    VER(&XZILSUB2 DSNAME
                                                    VER(&XZILSUB3 DSNAME
   ÿ
                                                      VER(&XZILSODS DSNA
                                                      VER(&XZILSOSC ALPH
                  ÿ
                                                         IF (&XZILSOSC ^
                                                          .CURSOR = XZIL
                                 ÿ
ing parameters'                                             &ZEDLMSG = '
uential dsname and sysout class may not be selected.'       .MSG = ISRZ0
                                                ÿ
UB1,'(')                                                    IF (&TEMP ^=
UB1')  .MSG = XZIL001                                       &TEMP = TRUN
UB2,'(')                                                    IF ÿ
LSUB2')  .MSG = XZIL001                                       &TEMP = TR
LSUB3,'(')                                                    IF (&TEMP
LSUB3')  .MSG = XZIL001                                       &TEMP = TR
ZILSUB4,'(')                                                    IF (&TEM
ZILSUB4')  .MSG = XZIL001                                       IF (&XZI
 &Z)                                                             &TEMP =
XZILINIT,1)  ÿ
'''')                                                                &XZ
 '''&ZPREFIX..&XZILINIT'''                                        IF (&X
^= &Z)                      ÿ
NC(&XZILSUB1,1)                                                      IF
= '''')                                                                &
 = '''&ZPREFIX..&XZILSUB1'''                                        ÿç

     &TEMP = TRUNC(&XZILSUB2,1)
     IF (&TEMP ^= '''')
    ÿ
      IF (&XZILSUB3 ^= &Z)
       &TEMP = TRUNC(&XZILSUB3,1)
       IF (&TEMP ^=ÿ
           &XZILSUB3 = '''&ZPREFIX..&XZILSUB3'''
        IF (&XZILSUB4 ^= &Z)
         &TEMP = TRUNC(&XZILSUB4,1ÿ
           IF (&TEMP ^= '''')
             &XZILSUB4 = '''&ZPREFIX..&XZILSUB4'''
          IF (&XZILSODS ^= &Z)                   ÿ
             &TEMP = TRUNC(&XZILSODS,1)
             IF (&TEMP ^= '''')
               &XZILSODS = '''&ZPREFIX..&XZILSODS'''            ÿ
              IF (&XZILACSZ = DEFAULT) &XZILACSZ = &Z
              IF (&XZILCSSZ = DEFAULT) &XZILCSSZ = &Z
              IF (&XZILPDSZ = DEFAULT) &XZILPDSZ = &Z

                &XZILSYS = TRUNC(&XZILSYS,1)
                VER (&XZILSYS LIST N,O)
              ÿ
                        XZILSUB1 XZILSUB2 XZILSUB3 XZILSUB4
                        XZILACSZ XZILCSSZ XZILPDSZ XZILVSSZ) PROFILE
                 )END        ˆ
                   
                                              ^ TYPE(TEXT) INTENS(HIGH)
LLOW) HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH)
NK)                                           ÿ
TURQ)                                           \ TYPE(TEXT) INTENS(HIGH
YELLOW)                                         ! TYPE(TEXT) INTENS(HIGH
RED)                                            $ TYPE(TEXT) ÿ
R(GREEN)                                         )BODY EXPAND(ÖÖ)
                                                 %-Ö-Ö-  ZIL - FOREGROUN
E  -Ö-Ö-                                         %OPTION ===>_XZILSEL
                                                   +
                                                   +Option: @F+function,
am,@M+module,@E+edit,@blank+member selection list  +
           ÿ
  %===>_XZILMEM %Overriding name%===>_XZILNAM +      \  LISP SOURCE LIBR
) %===>_XZILSRC                              +       \  TARGET LOAD LIBR
  %===>_XZILLNK           ÿ
                                                       \  SUBROUTINE LIB
ES  %===>_XZILSUB1                             +
    %===>_XZILSUB2                       ÿ
ies   %===>_XZILSUB3                             +       #   without mem
s)    %===>_XZILSUB4                             +
                                                        ÿ
 FILES  %===>_XZILMAC1                             +
        %===>_XZILMAC2                             +       #  (Must be s
l       %===>_XZILMAC3                             +       #   datasetsÿ
 members) %===>_XZILMAC4                             +       +
                                                             \  Options:
_XZILACSZ#CSSIZE_XZILCSSZ#PDSIZE_XZILPDSZ#VSSIZE_XZILVSSZ+   $  Debug?_Z
NLIST?ÿ
                                                               \  SYSTEM
LD or blank)%===>_Z  #                                 #       )INIT
                     ÿ
LDBG XZILTRN XZILBZL XZILBAL XZILBLL XZILSYS)'                    .HELP
                                                                  IF (&X
 ' ')                               ÿ
ZILSEL                                                              IF (
Z = &Z) &XZILACSZ = DEFAULT                                         IF (
Z = &Z) &XZILCSSZ = DEFAULT                        +
DSZ = &Z) &XZILPDSZ = DEFAULT                    ÿ
LVSSZ = &Z) &XZILVSSZ = DEFAULT
LDBG = &Z) &XZILDBG = N
LTRN = &Z) &XZILTRN = N                                         ÿ
ZILBZL = &Z) &XZILBZL = Y
ZILBAL = &Z) &XZILBAL = Y
ZILBLL = &Z) &XZILBLL = Y


&XZILSEL LIST P,F,M,E)
&XZILSEL ^= &Zÿ
ER(&XZILMEM NB NAME)
SE
TEMP = TRUNC(&XZILMEM,'*')   ÿ
 IF (&TEMP = '&XZILMEM')
  VER(&XZILMEM NAME)
VER(&XZILNAM NAME)                          ÿ
  VER(&XZILSRC NB DSNAME)
  VER(&XZILLNK NB DSNAME)
  VER(&XZILSUB1 DSNAME)                                    ÿ
    VER(&XZILSUB2 DSNAME)
    VER(&XZILSUB3 DSNAME)
    VER(&XZILSUB4 DSNAME)
      VER(&XZILMAC1 DSNAME)
      VER(&XZILMAC2 DSNAME)
      VER(&XZILMAC3 DSNAME)
      VERÿ
        &TEMP = TRUNC(&XZILSRC,'(')
        IF (&TEMP ^= '&XZILSRC')  .MSG = XZIL001
        &TEMP = TRUNC(&Xÿ
          IF (&TEMP ^= '&XZILLNK')  .MSG = XZIL001
          &TEMP = TRUNC(&XZILSUB1,'(')
          IF (&TEMP ^= '&XZILSUB1')  .Mÿ
            &TEMP = TRUNC(&XZILSUB2,'(')
            IF (&TEMP ^= '&XZILSUB2')  .MSG = XZIL001
            &TEMP = TRUNC(&XZILSUB3,'(')              ÿ
              IF (&TEMP ^= '&XZILSUB3')  .MSG = XZIL001
              &TEMP = TRUNC(&XZILSUB4,'(')
              IF (&TEMP ^= '&XZILSUB4')  .MSG = XZIL001              
               ÿç
                              IF (&XZILCSSZ = DEFAULT) &XZILCSSZ = &Z
                              IF (&XZILPDSZ = DEFAULT) &XZILPDSZ = &Z
                              ÿ
                                VER(&XZILDBG NB LIST Y,N)
                                VER(&XZILBZL NB LIST Y,N)
                                VER(&XZILTRN ÿ
                                  VER(&XZILBAL NB LIST Y,N)
                                  VER(&XZILBLL NB LIST Y,N)
                                  &XZILSYS = TRUNC(&XZILSYS,ÿ
                                    VER (&XZILSYS LIST N,O)
                                    VPUT (XZILSEL XZILMEM XZILNAM XZILSR
K XZILSYS                                 XZILSUB1 XZILSUB2 XZILSUB3 XZI
                                            XZILMAC1 XZILMAC2 XZILMAC3 X
                                            XZILACSZ XZILCSSZ XZILPDSZ X
                                            XZILTRN XZILBZL XZILBAL XZIL
FILE      ÿ

                                        Change activity:
                         ÿ
                                          05/26/88 - SEB1525 - Support f
r list.
                                          
                                                                       _
PUT) CAPS(OFF) INTENS(HIGH)                                            ×
NAMIC) SCROLL(ON) EXTEND(ON)                                          ÿ
TEXT) INTENS(LOW)
OUTPUT) INTENS(HIGH) JUST(RIGHT) PAD(0)
DATAIN) INTENS(HIGH) CAPS(ON)
DATAOÿ
E(DATAIN)  INTENS(HIGH) CAPS(ON)
E(DATAOUT)  INTENS(LOW)
E(DATAOUT)  INTENS(Hÿ
YPE(DATAOUT)  INTENS(LOW)
 WIDTH(80)
ILE --- &XZZZSRC TO &XZZZLNK ------ÿ
MMAND ===>_ZCMD                                            %SCROLL ===>_
AME    LOADMOD &XREST
ATA ----------------------------------------------ÿ

 -----------------------------------------------------------------------
INIT                                                             ÿ
   .ZVARS = 'ZSCML'         /* SCROLL AMT VARIABLE NAME  */
   .HELP = ISR01130
   &TEMP = '&ZMLCOLS'
ÿ
     &TEMP  = TRUNC(&ZMLCOLS,20)
     &XREST = .TRAIL
   )PROC       ÿ
       VPUT (ZSCML) PROFILE
     )END
                              V
        Note: To make a panel like this, just copy ISRML000 and modify.

       
                                  ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW
(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                                  ÿ
                                    \ TYPE(TEXT) INTENS(HIGH) COLOR(YELL
                                    ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                                    $ TYPE(TEXT) ÿ
                                     )BODY EXPAND(ÖÖ)
                                     %-Ö-Ö-  ZIL - BATCH COMPILE  -Ö-Ö-
                                     %OPTION ===>_XZILSEL       ÿ
                                       +
                                       +Option: @F+function,@P+program,@
,@E+edit,@blank+member selection list  +

MEM %Overriding name%===>_XZILNAM +      \  LISP SOURCE LIBRARY (PDS) %=
SRC                              +       \  TARGET LOAD LIBRARY       %=
LNK           ÿ
                                           \  SUBROUTINE LIBRARY NAMES
ILSUB1                             +
ILSUB2                       ÿ
XZILSUB3                             +       #   without member names)
XZILSUB4                             +
                                            ÿ
>_XZILMAC1                             +
>_XZILMAC2                             +       #  (Must be sequential
>_XZILMAC3                             +       #   datasetsÿ
==>_XZILMAC4                             +       +
                                                 \  Options: #ACSIZE_XZI
SIZE_XZILCSSZ#PDSIZE_XZILPDSZ#VSSIZE_XZILVSSZ+   $  Debug?_Z$Print compi
ansforms?_Z+
                                                   \ SYSTEM#(NEW, OLD or
%===>_Z  +                                         )INIT
         ÿ
N XZILSYS)'                                           .HELP = TXZIL5
                                                      IF (&XZILSEL = ' '
                        ÿ
                                                        IF (&XZILACSZ =
LACSZ = DEFAULT                                         IF (&XZILCSSZ =
LCSSZ = DEFAULT                        +
ZILPDSZ = DEFAULT                    ÿ
&XZILVSSZ = DEFAULT                                         IF (&XZILDBG
XZILDBG = N                                                 IF (&XZILCTR
&XZILCTRN = N                                       ÿ
XZILSYS N,NEW O,OLD)                                         )PROC
                                                              VER(&XZILS
P,F,M,E)                                                      IF (&ÿ
&Z)                                                              VER(&XZ
 NAME)                                                          ELSE
                                                                 &TEMP =
XZÿ
&XZILMEM')                                                          VER(
 NAME)                                                            VER(&X
AME)             ÿ
 NB DSNAME)                                                         VER(
 NB DSNAME)                                                         VER(
1 DSNAME)                       ÿ
UB2 DSNAME)                                                           VE
UB3 DSNAME)                                                           VE
UB4 DSNAME)                                    ÿ
LMAC1 DSNAME)
LMAC2 DSNAME)
LMAC3 DSNAME)                                                 ÿ
ZILMAC4 DSNAME)
= TRUNC(&XZILSRC,'(')
EMP ^= '&XZILSRC')  .MSG = XZIL001
P = TRUNC(&XZILLNK,'(')
&TEMP ^= '&XZILLNK')  .MSG = XZIL001
P = TRUNC(&XZILSUB1,'(')
&TEMP ^= '&Xÿ
EMP = TRUNC(&XZILSUB2,'(')
 (&TEMP ^= '&XZILSUB2')  .MSG = XZIL001
EMP = TRUNC(&XZILSUB3,'(') ÿ
IF (&TEMP ^= '&XZILSUB3')  .MSG = XZIL001
&TEMP = TRUNC(&XZILSUB4,'(')
IF (&TEMP ^= '&XZILSUB4')  .MSG = XZIL001 ÿ
  IF (&XZILSUB1 ^= &Z)
   &TEMP = TRUNC(&XZILSUB1,1)
   IF (&TEMP ^= '''')                                    
   ÿç
                  IF (&XZILSUB2 ^= &Z)
                   &TEMP = TRUNC(&XZILSUB2,1)
                  ÿ
                       &XZILSUB2 = '''&ZPREFIX..&XZILSUB2'''
                    IF (&XZILSUB3 ^= &Z)
                     &TEMP = TRUNÿ
                       IF (&TEMP ^= '''')
                         &XZILSUB3 = '''&ZPREFIX..&XZILSUB3'''
                      IF (&XZILSUB4 ^= &Z)      ÿ
                         &TEMP = TRUNC(&XZILSUB4,1)
                         IF (&TEMP ^= '''')
                           &XZILSUB4 = '''&ZPREFIX..&XZILSUB4''ÿ
                          IF (&XZILMAC1 ^= &Z)
                           &TEMP = TRUNC(&XZILMAC1,1)
                           IF (&TEMP ^= '''')
                               &XZILMAC1 = '''&ZPREFIX..&XZILMAC1'''
                            IF (&XZILMAC2 ^= &Z)
                             &TEMP = TRUNC(&XZILMAC2,1)
             ÿ
                                 &XZILMAC2 = '''&ZPREFIX..&XZILMAC2'''
                              IF (&XZILMAC3 ^= &Z)
                            ÿ
                                 IF (&TEMP ^= '''')
                                   &XZILMAC3 = '''&ZPREFIX..&XZILMAC3'''
                                IF (&XZILMAÿ
                                   &TEMP = TRUNC(&XZILMAC4,1)
                                   IF (&TEMP ^= '''')
                                     &XZILMAC4 = '''&ZPREFÿ
                                    IF (&XZILACSZ = DEFAULT) &XZILACSZ =
                                    IF (&XZILCSSZ = DEFAULT) &XZILCSSZ =
                                    IF (&XZILPDSZ = DEFAULT) &XZILPDSZ =
                                      IF (&XZILVSSZ = DEFAULT) &XZILVSSZ
                                      VER(&XZILDBG NB LIST Y,N)
                                      VER(&XZILCTRN NB LIST Y,N)
        ÿ
                                        VER (&XZILSYS LIST N,O)
                                        VPUT (XZILSEL XZILMEM XZILNAM XZ
ILLNK XZILSYS          +
UB4                  ÿ
LMAC4                                             XZILACSZ XZILCSSZ XZIL
LVSSZ                                             XZILCTRN) PROFILE
                                    ÿ

                                              Change activity:
                                                   ™
                                                06/21/88 - SEB1525 - Sup
 member list.
                                               {

YPE(INPUT) CAPS(OFF) INTENS(HIGH)
REA(DYNAMIC) SCROLL(ON) EXTEND(ON)
 TYPE(TEXT) INTENS(LOW)
 TYPE(OUTPUT) INTENS(HIGH) JUST(RIGHT) PAD(0)
 TYPE(DATAIN) INTENS(HIGH) CAPS(ON)
 TYPE(DATAOÿ
03 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)
04 TYPE(DATAOUT)  INTENS(LOW)
05 TYPE(DATAOUT)  INTENS(Hÿ
  06 TYPE(DATAOUT)  INTENS(LOW)
 )BODY WIDTH(80)
 %COMPILE --- &XZZZSRC TO &XZZZLNK ------ÿ
TR+%COMMAND ===>_ZCMD                                            %SCROLL
  +&XNAME    LOADMOD &XREST
   ×ZDATA ----------------------------------------------ÿ
----××
    ×× -----------------------------------------------------------------
----×)INIT                                                             ÿ
         .ZVARS = 'ZSCML'         /* SCROLL AMT VARIABLE NAME  */
         .HELP = ISR01130
         &TEMP = '&ZMLCOLS'
      ÿ
           &TEMP  = TRUNC(&ZMLCOLS,20)
           &XREST = .TRAIL
         )PROC       ÿ
             VPUT (ZSCML) PROFILE
           )END
                                    V
              Note: To make a panel like this, just copy ISRML000 and mo

             
                                        ^ TYPE(TEXT) INTENS(HIGH) COLOR(
HILITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(
                                        ÿ
                                          \ TYPE(TEXT) INTENS(HIGH) COLO
)                                         ! TYPE(TEXT) INTENS(HIGH) COLO
                                          $ TYPE(TEXT) ÿ
N)                                         )BODY EXPAND(ÖÖ)
                                           %-Ö-Ö-  ZIL - RUN COMPILED PR
Ö-Ö-                                       %COMMAND ===>_ZCMD         ÿ
                                             +
                                             \  PROGRAM NAME     %===>_X

     ÿ
                              +
                                               $  If the program takes a
er string, enter theÿ
here are any special characters.
                                                 %  ===>_XZILPRM
                                   ÿ

                                                   \  Options: #ACSIZE_X
CSSIZE_XZILCSSZ#PDSIZE_XZILPDSZ#VSSIZE_XZILVSSZ+  ÿ
                                                     \ SYSTEM#(NEW, OLD
)%===>_Z  +                                  +       )INIT
                                                      .ZVARS = '(ÿ
                                                        .HELP = TXZIL6
                                                        IF (&XZILACSZ =
LACSZ = DEFAULT                                         IF (&XZILCSSZ =
ÿ
ZILPDSZ = DEFAULT                                         IF (&XZILVSSZ
ZILVSSZ = DEFAULT                                         &XZILSYS = TRA
SYS N,NEW O,OLDÿ
                                                            IF (&ZCMD ^=
SG = ISPZ001                                                VER(&XZILLNK
ME)                           ÿ
ME)                                                           &TEMP = TR
LLNK,'(')                                                     IF (&TEMP
LLNK')  .MSG = XZIL001                       +
ZILLNK,1)                                  ÿ
''')                                                                &XZI
''&ZPREFIX..&XZILLNK'''                                           IF (&X
= DEFAULT) &XZILACSZ = &Z                                 ÿ
Z = DEFAULT) &XZILCSSZ = &Z                                         IF (
Z = DEFAULT) &XZILPDSZ = &Z                                         IF (
Z = DEFAULT) &XZILVSSZ = &Z                                         &XZI
 TRUNC(&XZILSYS,1)                                                    VE
SYS LIST N,O)                                                        )EN
                                                                     {

                  ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE
                  @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                  ÿ
                    \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                    ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                    $ TYPE(TEXT) ÿ
                     )BODY EXPAND(ÖÖ)
                     %-Ö-Ö-  ZIL - TEST THE COMPILER  -Ö-Ö-
                     %OPTION ===>_XZILSEL       ÿ
                       +
                        Option :@F+- function,@P+- program,@M+- module;
edit source member     +                                       ÿ
                         \  LISP SOURCE MEMBER NAME   %===>_XZILMEM %Ove
name%===>_XZILNAM +      %*\LISP SOURCE LIBRARY (PDS) %===>_XZILSRC
                 +
                           %*\MACRO LIBRARY NAMES       %===>_XZILMAC1
                           %*                           %===>_XZILMAC2
                           %*#(Must be sequential       %===>_XZILMAC3
             ÿ
                             +
                             %Note:$If all the fields marked%*$are left
ou may enter your           ÿ

                               \  SUBROUTINE LIBRARY NAMES  %===>_XZILSU
                       +                   ÿ
                         +       #  (Must be load libraries   %===>_XZIL
                         +       #   without member names)    %===>_XZIL
                         +                                ÿ
                                   \  Options: #ACSIZE_XZILACSZ#CSSIZE_X
PDSIZE_XZILPDSZ#VSSIZE_XZILVSSZ+   $  Debug?_Z+
                                   \ SYSTEM#(NEW, OLD or blank) %===>_Z
                                     )INIT
                                      .ZVARS = '(XZILDBG XZILSYS)'
                                      .HELP = TXZIL7
        ÿ
                                         .CURSOR = XZILSEL
                                        IF (&XZILACSZ = &Z) &XZILACSZ =
                       +
T                    ÿ
ULT                                         IF (&XZILVSSZ = &Z) &XZILVSS
ULT                                         IF (&XZILDBG = &Z) &XZILDBG
                                    ÿ
OLD)                                         )PROC
                                              VER(&XZILSEL NB LIST P,F,M
                                              VER(&ÿ
                                                VER(&XZILNAM NAME)
                                                &XZILALL = '&XZILSRC&XZI
ILMAC2&XZILMAC3&XZILMAC4'                       IF (&XZILALL ^= ''ÿ
                                                   VER(&XZILSRC DSNAME)
                                                   VER(&XZILMAC1 DSNAME)
                                                   VER(&XZILMAC2 DSNAME)
 ÿ
                                                     VER(&XZILMAC4 DSNAM
                                                     &TEMP = TRUNC(&XZIL
                ÿ
 .MSG = XZIL001                                        &TEMP = TRUNC(&XZ
')                                                     IF (&TEMP ^= '&XZ
 .MSG = XZIL001                ÿ
,'(')                                                    IF (&TEMP ^= '&
')  .MSG = XZIL001                                       &TEMP = TRUNC(&
,'(')                                         ÿ
B2')  .MSG = XZIL001                                       &TEMP = TRUNC
B3,'(')                                                    IF (&TEMP ^=
B3')  .MSG = XZIL001                                       &Tÿ
SUB4,'(')                                                    IF (&TEMP ^
SUB4')  .MSG = XZIL001                                       IF (&XZILSR
                                                              &TEMP = TR
ZILSRC,1)                                                       IF (&TEM
')                                                                &XZILS
&ZPREFIX..&XZILSRC'''                                          IF (&XZIL
&Z)        ÿ
&XZILMAC1,1)                                                      IF (&T
''')                                                                &XZI
'''&ZPREFIX..&XZILMAC1''' ÿ
 ^= &Z)                                                             &TEM
C(&XZILMAC2,1)                                                      IF (
 '''')                                                            ÿç
&     &XZILMAC2 = '''&ZPREFIX..&XZILMAC2'''
   IF (&XZILMAC3 ^= &Z)
    &TEMP = TRUNC(&XZILMAC3,1)
  ÿ
        &XZILMAC3 = '''&ZPREFIX..&XZILMAC3'''
     IF (&XZILMAC4 ^= &Z)
      &TEMP = TRUÿ
        IF (&TEMP ^= '''')
          &XZILMAC4 = '''&ZPREFIX..&XZILMAC4'''
      IF (&XZILACSZ = DEFAULT) &ÿ
        IF (&XZILCSSZ = DEFAULT) &XZILCSSZ = &Z
        IF (&XZILPDSZ = DEFAULT) &XZILPDSZ = &Z
        IF (&XZILVSSZ = DEFAULT) &XZILVSSZ = &Zÿ
          VER(&XZILDBG NB LIST Y,N)
          &XZILSYS = TRUNC(&XZILSYS,1)
          VER (&XZILSYS LIST N,O)                             `
           )END
           
                                      ^ TYPE(TEXT) INTENS(HIGH) COLOR(YE
LITE(REVERSE)                         @ TYPE(TEXT) INTENS(HIGH) COLOR(PI
                                      ÿ
                                        \ TYPE(TEXT) INTENS(HIGH) COLOR(
                                        ! TYPE(TEXT) INTENS(HIGH) COLOR(
                                        $ TYPE(TEXT) ÿ
                                         )BODY EXPAND(ÖÖ)
                                         %-Ö-Ö-  ZIL - RELINK FUNCTION I
RAM  -Ö-Ö-                               %COMMAND ===>_ZCMD         ÿ
                                           +
                                           \  FUNCTION NAME        %===>
 +
   ÿ
FL                              +

                  ÿ
L8PN +
                                               \  LOAD MODULE LIBRARY  %
L8PL                             ÿ

                                                 +Press!END+key to retur
 previous option menu.                          ÿ
                                                    .HELP = TXZIL8
                                                    IF (&XZIL8FN = '') &
= &XZILMEM                                          IF (&XZIL8Fÿ
L = &XZILLNK                                         )PROC
                                                      IF (&ZCMD ^= '') .
PZ001                                                 VER(&XZIL8FN NB NA
                                                        VER(&XZIL8FL NB
                                                        VER(&XZIL8PN NB
                                                        VER(&XZIL8PL NB
             ÿ
,'(')                                                     IF (&TEMP ^= '
')  .MSG = XZIL001                                        &TEMP = TRUNC(
,'(')                       ÿ
PL')  .MSG = XZIL001                                        IF (&XZIL8FL
                                                             &TEMP = TRU
8FL,1)                                     +
)                                        ÿ
'&ZPREFIX..&XZIL8FL'''                                          IF (&XZI
&Z)                                                              &TEMP =
XZIL8PL,1)                                              ÿ
'''')                                                                &XZ
'''&ZPREFIX..&XZIL8PL'''                                          VPUT (
XZIL8FL XZIL8PN XZIL8PL) PROFILE                                 )END  <
                                                                   {

                ^ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW) HILITE(REVERSE)
                @ TYPE(TEXT) INTENS(HIGH) COLOR(PINK)
                ÿ
                  \ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
                  ! TYPE(TEXT) INTENS(HIGH) COLOR(RED)
                  $ TYPE(TEXT) ÿ
                   )BODY EXPAND(ÖÖ)
                   %-Ö-Ö-  ZIL - FOREGROUND ASSEMBLY -Ö-Ö-
                   %OPTION ===>_XZASSEL       ÿ
                     +
                     %Option:%A+- assemble, %E+- edit source member,%bla
ber selection list   +                                       ÿ
                       \  ASM SOURCE MEMBER NAME    %===>_XZASMEM %Overr
me%===>_XZASNAM +      \  ASM SOURCE LIBRARY (PDS)  %===>_XZASSRC
               +       \  TARGET LOAD LIBRARY       %===>_XZASLNK
                 +
                         +Assembler options:

           ÿ
                           \  XREF#(FULL, SHORT, NO)    %===>_Z    +
                           \  SYSPARM#(optional)        %===>_XZASPRM +
                          ÿ
                             $Show ASMLIST?               %===>_Z+  (Get
d only if Y)                 $Show LNKLIST?               %===>_Z+  (Get
d only if Y)                 $Member nameÿ
g name applies)
                               \SYSTEM#(NEW, OLD or blank)  %===>_Z  #
                       #       )INIT                    ÿ
                                  .ZVARS = '(XZASTST XZASXRF XZASBAL XZA
SMAL XZILSYS)'                    .HELP = TXZIL9
                                  &XZASTST = TRANS(&XZASTST Y,YES *,NO)ÿ
                                    &XZASXRF = TRANS(&XZASXRF F,FULL S,S
O)                                  IF (&XZASBAL = &Z) &XZASBAL = Y
                                    IF (&XZASBLL = &Z) &XZASBLL = Y
      ÿ
                                      &XZILSYS = TRANS(&XZILSYS N,NEW O,
                                     )PROC
                     +
                   ÿ
                                           VER(&XZASMEM NB NAME)
                                          ELSE
                                  ÿ
                                             IF (&TEMP = '&XZASMEM')
                                              VER(&XZASMEM NAME)
                                            VER(&ÿ
                                              VER(&XZASSRC NB DSNAME)
                                              VER(&XZASLNK NB DSNAME)
                                              /* VER(&XZASPRM LIÿ
                                                IF (&XZASPRM = &Z)
ASPRM = VECTOR                                  &TEMP = TRUNC(&XZASSRC,'
                                                IF (&TEMP ^= '&XZASSRC')

                                                  IF (&TEMP ^= '&XZASLNK
MSG = XZIL001                                     &XZASTST = TRUNC(&XZAS
              ÿ
                                                    &XZASXRF = TRUNC(&XZ
                                                    VER(&XZASXRF NB LIST
                             ÿ
                                                      VER(&XZASBLL NB LI
                                                      VER(&XZASMAL NB LI
                                            ÿ
S,1)                                                    VER (&XZILSYS LI
                                                        VPUT (XZASMEM XZ
ASSRC XZASLNK XZASPRM                                      ÿ
XZASXRF XZASBAL XZASBLL XZASMAL) PROFILE                 )END

                                                          Change activit

                                                            05/23/88 - S
 Support for member list.                                   12/16/88 - S
 Blank med ans member list, not assemble.
                                                             {

           _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)
           × AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)
          ÿ
             Ö TYPE(OUTPUT) INTENS(HIGH) JUST(RIGHT) PAD(0)
            01 TYPE(DATAIN) INTENS(HIGH) CAPS(ON)
            02 TYPE(DATAOÿ
              03 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)
              04 TYPE(DATAOUT)  INTENS(LOW)
              05 TYPE(DATAOUT)  INTENS(Hÿ
                06 TYPE(DATAOUT)  INTENS(LOW)
               )BODY WIDTH(80)
               %ASSEMBLE -- &XZZZSRC TO &XZZZLNK ------ÿ
WÖZMLCR%OFÖZMLTR+%COMMAND ===>_ZCMD
SCROLL ===>_Z   +&XNAME    LOADMOD &XREST
                 ×ZDATA ----------------------------------------------ÿ
------------------××
                  ×× ---------------------------------------------------
------------------×)INIT
     ÿ
                       .HELP = ISR01130
                       &TEMP = '&ZMLCOLS'
                    ÿ
                         &TEMP  = TRUNC(&ZMLCOLS,20)
                         &XREST = .TRAIL
                       )PROC       ÿ
                           VPUT (ZSCML) PROFILE
                         )END
                                                  V
                            Note: To make a panel like this, just copy I
and modify.
                           
                                                      #  TYPE(INPUT) INT
) CAPS(OFF) JUST(LEFT)                                !  TYPE(OUTPUT) IN
H) CAPS(OFF) JUST(ASIS)                               ÿ
ON) SCROLL(ON)                                          \  TYPE(TEXT) IN
) COLOR(TURQ)                                           05 TYPE(DATAOUT)
LOW) COLOR(GREEN)                                       0D TYPE(DATAOÿ
S(HIGH) COLOR(YELLOW)                                    )BODY
                                                         %--------------
FSEXEC default panel ------------------!FSMSG            %ISPF COMMAND =
    ÿ
                                                           %===>#IN

                   ÿ
                                                             %----------
------------------------------------------------------------\×FSDATA
                                  ÿ
                                                                .HELP =
                                                               )REINIT
                                                 ÿ
ZCMD,AMT,MOREMSG,IN,FSDATA)                                      )PROC
                                                                  &XCURS
RSOR                                                            ÿ   &XCS
CSRPOS                                                              &FSL
VLINE(FSDATA)                                                      )END
                                                                   
\INMR06
