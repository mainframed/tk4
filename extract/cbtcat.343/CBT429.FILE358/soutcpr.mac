**************************************************************
*    THIS SUBROUTINE COMPRESSES AND DECOMPRESSES THE EXTERNAL WRITER
*    OUTPUT BEFORE GOING TO DISK OR TAPE. IT LOOKS FOR ANY OCCURRENCE
*    OF MORE THAN THREE (3) CONSECUTIVE CHARS AND REPLACES THE
*    STRING OF CHARS WITH A FLAG (X'EA'), THE CHAR BEING COMPRESSED AND
*    ONE BYTE FOR THE NUMBER OF CHARS. ON DECOMPRESSION, IT SEARCHES
*    FOR THE FLAG (X'EA') AND INSERTS THE THE CHARACTER FOLLOWING 'EA'
*    THE CORRECT NUMBER OF TIMES.
*    R1 POINTS TO A PARAMETER LIST CONTAINING THE ADDRESSES OF THE
*    FOLLOWING FIELDS.
*
*        1)  REQUEST TYPE                          - 1 BYTE
*                 X'FF' PUT REQUEST - TIME TO COMPRESS
*                 X'00' GET REQUEST - TIME TO DECOMPRESS
*        2)  INPUT RECORD
*              INPUT RECORD LAYOUT
*                > 1H - LENGTH OF INPUT RECORD
*                       (FOR COMPRESSION - DO NOT INCLUDE FIRST 4 BYTES
*                                          IN LENGTH)
*                       (FOR DE-COMPPRESSION - INCLUDE FIRST 4
*                                              BYTES IN LENGTH)
*                > 1H - PAD
*                > INPUT RECORDS DATA
*
*                (RECORD IS FORMATED LIKE A VARIABLE LENGTH RECORD)
*
*        3)  OUTPUT RECORD
*                > 1H - COMP/DE-COMP LENGTH
*                       (CALLING PROGRAM PLACES A LENGTH HERE BEFORE
*                        COMPRESSION OR EXPANSION;(DOES NOT INCLUDE
*                        THE FOUR(4) BYTE PREFIX)
*                        => COMPRESSION - MAX COMPRESSED LENGTH
*                        => DE-COMPRESS - MAX DE-COMPRESSED LENGTH)
*                       (BEFORE RETURNING, THIS ROUTINE UPDATES THIS
*                        FIELD TO THE NEW RECORD LENGTH)
*                > 1H - PAD
*                > INPUT RECORDS DATA
*
*                (RECORD IS FORMATED LIKE A VARIABLE LENGTH RECORD)
*
*
*    THE OUTPUT RECORD FIELD IS MODIFIED BY THIS PROGRAM.
*    IT WILL EITHER COMPRESS THE INPUT AREA AND PLACE IT IN THE OUTPUT
*    AREA OR DE-COMPRESS IT. THE NEW COMPRESSED OR DE-COMPRESSED LENGTH
*    WILL ALSO BE PLACED IN THE FIRST HALF WORD IN THE OUTPUT RECORD.
*
*      X'EA' WAS CHOSEN FOR THE COMPRESS FLAG BECAUSE IT IS NEITHER
*      AN INSTRUCTION NOR A PRINTABLE CHARACTER.
*      USE 'HEX ON' TO VIEW THE FOLLOWING EXAMPLE
*      EXAMPLE 'PAGE  1          EXAMPLE'  - NOT COMPRESSED LENGTH 24
*              'PAGE  1ý ±EXAMPLE'         - COMPRESSED LENGTH 17
*
*********************************************************************
*     R15 WILL HAVE RETURN CODE = 0  IF COMPRESS/DE-COMPRESS IS OK
*      OR
*     R15 WILL HAVE RETURN CODE = 16 IF COMPRESS/DE-COMPRESS ERRORED
*********************************************************************
*        REGISTERS USED:
*         R0 = WORK REG
*         R1 = WORK REG
*         R2 = WORK REG
*         R3 = WORK REG
*         R4 = INPUT RECORD POINTER
*         R5 = WORK REG
*         R6 = OUTPUT RECORD POINTER
*         R7 = WORK REG
*         R8 = WORK REG
*         R9 = WORK REG
*        R10 = UNUSED
*        R11 = WORK REG
*        R12 = BASE REG
*        R13 = SAVE AREA
*        R14 = WORK REG
*        R15 = WORK REG
*
**************************************************************
         EJECT
SOUTCPR  $PROLOG R12
         L     R4,4(R1)               INPUT RECORD
         USING INREC,R4               SET UP BASE FOR INPUT REC
         L     R6,8(R1)               OUTPUT RECORD
         USING OUTREC,R6              SET UP BASE FOR OUTPUT REC
         ST    R6,SAVE6               SAVE R6 FOR LATER STORE OF LENGTH
         L     R11,0(R1)              POINT AT FUNCTION
         CLI   0(R11),X'00'           IS THIS A UNCOMPRESS
         BE    UNCOMP                 YES GO TO GET PERFORM
         BAL   R14,COMPIT             NO, PERFORM COMPRESSION
         B     EXITIT                 SKIP NEXT STATEMENT
UNCOMP   BAL   R14,UNCOMPIT           PERFORM UN-COMPRESS
EXITIT   $EPILOG
         EJECT
COMPIT   EQU   *                      COMPRESSION ROUTINE
         SR    R3,R3                  ZERO OUT 3
         SR    R5,R5                  ZERO OUT 5
         SR    R7,R7                  ZERO OUT 7
         SR    R8,R8                  ZERO OUT 8
         SR    R9,R9                  ZERO OUT 9
         LH    R7,OUTLEN              SAVE MAX OUTPUT LENGTH
         LH    R8,INLEN               SAVE LENGTH OF INPUT RECORD
         CH    R8,=H'255'             RECORD LARGER THAN 255
         BH    NOCOMPR                YES - NO COMPRESSION
         LA    R4,4(R4)               BUMP PAST INPUT HEADER
         LA    R6,4(R6)               BUMP PAST OUTPUT HEADER
CPSETUP  MVI   SWITCH,X'01'           TURN OFF COMPRESS SWITCH
         MVC   COMPCHAR(1),0(R4)      SAVE ONE CHARACTER
         MVC   COMPCHAR+1(3),COMPCHAR EXPAND IT FOR LENGTH OF 4
COMPLP   EQU   *
         CLC   0(1,R4),COMPCHAR       DOES FIRST CHAR MATCH PREVIOUS
         BE    COMPNXT                YES - GO CHECK FOR 4
MOVEIT   TM    SWITCH,X'02'           COMPRESSING CHAR ALREADY
         BNZ   MOVELEN                YES - MOVE IN LENGTH
         CLI   0(R4),X'EA'            IS CHAR THE DELIMITING CHAR
         BE    COMPEA                 YES - EXPAND IT (RARELY HAPPENS)
         MVC   0(1,R6),0(R4)          MOVE BYTE TO OUTPUT RECORD
         LA    R6,1(R6)               BUMP R6
         AH    R5,=H'1'               ADD 1 TO NEW LENGTH COUNTER
         CR    R7,R5                  MAX COMPRESSED LENGTH HIT
         BL    NOCOMPR                ERROR DURING COMPRESSION
NEWCHAR  MVC   COMPCHAR(1),1(R4)      MOVE IN NEW CHAR
         MVC   COMPCHAR+1(3),COMPCHAR REPEAT TO LENGTH OF 4
         B     BUMPCP                 GO CHECK FOR END
COMPEA   MVC   0(3,R6),=X'EAEA01'     EXPAND 'EA' TO 3 BYTES
         LA    R6,3(R6)               BUMP R6
         AH    R5,=H'3'               ADD 3 TO NEW LENGTH COUNTER
         CR    R7,R5                  MAX COMPRESSED LENGTH HIT
         BL    NOCOMPR                ERROR DURING COMPRESSION
         B     NEWCHAR
MOVELEN  EQU   *
         STH   R9,HOLDLEN             MOVE LENGTH OF REPEATING CHARS
         MVC   2(1,R6),HOLDLEN+1      MOVE TO OUTPUT AREA
         LA    R6,3(R6)               BUMP R6 ON OUTPUT RECORD
         AH    R5,=H'3'               ADD 3 TO NEW COUNT
         CR    R7,R5                  MAX COMPRESSED LENGTH HIT
         BL    NOCOMPR                ERROR DURING COMPRESSION
         B     CPSETUP                START CHECK OVER FOR NEXT CHAR
COMPNXT  EQU   *
         TM    SWITCH,X'02'           ALREADY COMPRESSING
         BNZ   ADDONLY                YES - JUST ADD TO COUNTER
         CLC   0(4,R4),COMPCHAR       ARE THERE AT LEAST 4 REAPEATING
         BNE   MOVEIT                 NO - MOVE JUST ONE CHAR
         MVI   SWITCH,X'02'           TURN ON COMPRESSING SWITCH
         MVC   0(1,R6),=X'EA'         MOVE IN 'EA' (COMP SENSE BYTE)
         MVC   1(1,R6),COMPCHAR       MOVE COMP CHAR TO OUTPUT
         SR    R9,R9                  ZERO COUNTER
         AH    R9,=H'4'               SET TO 4 - HAVE 4 REPEATING CHARS
         LA    R4,3(R4)               BUMP R4 3 BYTES
         AH    R3,=H'3'               BUMP INPUT LENGTH COUNTER
         B     BUMPCP                 CHECK PAST END
ADDONLY  EQU   *
         AH    R9,=H'1'               ADD 1 TO REPEATING COUNTER
BUMPCP   EQU   *
         LA    R4,1(R4)               BUMP R4 1
         AH    R3,=H'1'               BUMP INPUT LENGTH COUNTER
         CR    R8,R3                  PAST END
         BH    COMPLP                 NO - GET NEXT
         TM    SWITCH,X'01'           COMPRESSING WHEN END WAS HIT
         BNZ   MOVEDONE               NO - MOVE IN NEW LENGTH
         STH   R9,HOLDLEN             MOVE REPEATING LENGTH
         MVC   2(1,R6),HOLDLEN+1      STORE ON OUTPUT RECORD
         AH    R5,=H'3'               ADD 3 TO NEW LENGTH
         CR    R7,R5                  MAX COMPRESSED LENGTH HIT
         BL    NOCOMPR                ERROR DURING COMPRESSION
MOVEDONE L     R6,SAVE6               RESTORE R6 TO BEGINNING OF OUTPUT
         AH    R5,=H'4'               ADD 4 FOR PREFIX (2 HALFWORDS)
         STH   R5,OUTLEN              MOVE IN NEW LENGTH
         SR    R15,R15
         BR    R14                    BRANCH BACK
NOCOMPR  LA    R15,=F'16'             NO COMPRESSION
         BR    R14                    BRANCH BACK
         EJECT
UNCOMPIT EQU   *                      COMPRESSION ROUTINE
         SR    R3,R3                  ZERO OUT 3
         SR    R5,R5                  ZERO OUT 5
         SR    R7,R7                  ZERO OUT 7
         SR    R8,R8                  ZERO OUT 7
         SR    R9,R9                  ZERO OUT 7
         LH    R8,INLEN               SET R8 TO INPUT LENGTH
         SH    R8,=H'4'               SUBTRACT 4 BYTES FOR PREF LENGTH
         LH    R9,OUTLEN              SET R9 TO MAX EXPAND LENGTH
         LA    R4,4(R4)               BUMP PAST INPUT HEADER
         LA    R6,4(R6)               BUMP PAST OUTPUT HEADER
UNCOMPLP EQU   *
         CR    R9,R5                  MAX LENGTH EXPANDED REACHED
         BL    ENDEXP                 JUST END EXPANSION
         CLI   0(R4),X'EA'            IS CHAR COMPRESSED
         BE    EXPANDIT               YES - EXPAND IT
         MVC   0(1,R6),0(R4)          MOVE IN CHARACTER TO OUTPUT
         LA    R4,1(R4)               BUMP INPUT POINTER
         LA    R6,1(R6)               BUMP OUTPUT POINTER
         AH    R3,=H'1'               ADD 1 TO INPUT LEN COUNTER
         AH    R5,=H'1'               ADD 1 TO NEW OUTPUT LEN
         B     BUMPUNCP               GO CHECK LENGTH
EXPANDIT EQU   *
         MVC   HOLDLEN,=X'0000'       ZERO
         MVC   HOLDLEN+1(1),2(R4)     MOVE IN REPEATING COUNTER
         LH    R7,HOLDLEN             MOVE INTO R7
EXLOOP   EQU   *
         MVC   0(1,R6),1(R4)          MOVE CHAR TO OUTPUT
         LA    R6,1(R6)               BUMP OUTPUT POINTER
         AH    R5,=H'1'               ADD 1 TO NEW LENGTH
         BCT   R7,EXLOOP              DO UNTIL REPEATED R7 TIMES
         LA    R4,3(R4)               BUMP TO NEXT CHAR
         AH    R3,=H'3'               ADD 3 TO INPUT LEN COUNTER
BUMPUNCP EQU   *
         CR    R8,R3                  END OF INPUT?
         BH    UNCOMPLP               NO - GET NEXT CHAR
         SR    R15,R15                ZERO R15
         B     FINEXP
ENDEXP   LA    R15,=F'16'             SET R15 TO 16 - BAD EXPAND
FINEXP   L     R6,SAVE6               SET TO BEGINNING OF OUTPUT LINE
         STH   R5,OUTLEN              MOVE IN NEW OUTPUT LENGTH
         BR    R14                    BRANCH BACK
         EJECT
*
SAVE6    DS    F                      R6 SAVE AREA
HOLDLEN  DS    H                      HOLD REPEATING CHAR LENGTH
SWITCH   DS    X                      COMPRESSING SWITCH
COMPCHAR DS    4C                     HOLD AREA FOR WHAT CHAR TO COMP
         LTORG
INREC    DSECT                        INPUT AREA FROM CALLING PROGRAM
INLEN    DS    H
OUTREC   DSECT                        OUTPUT AREA FROM CALLING PROGRAM
OUTLEN   DS    H
         END
