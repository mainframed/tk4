*
* $STCK MACRO FOLLOWS
*
         MACRO
&LABEL   $STCK  &NOGEN,&TODLOC=
         LCLC   &L
.**********************************************************************
.****                                                             *****
.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****
.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****
.****                                                             *****
.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****
.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****
.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****
.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****
.****    CONSTANTS.                                               *****
.****                                                             *****
.****    IF INVOKED WITH THE NOGEN OPTION AND TIME HAS BEEN       *****
.****    DEFINED TO BE EIGHT BYTES, ONLY EIGHT CHARACTERS         *****
.****    WILL BE USED AND THE YEARDATE FIELD WILL NOT BE          *****
.****    REFERENCED.                                              *****
.****                                                             *****
.****    DAY     DS   X      A BINARY NUMBER (HEX) RELATIVE TO    *****
.****                        THE DAY OF THE WEEK AS FOLLOWS       *****
.****                        0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,    *****
.****                        3=THURSDAY, 4=FRIDAY,                *****
.****                        5=SATURDAY, 6=SUNDAY                 *****
.****                                                             *****
.****    YEARDATE DS  CL4    A FOUR CHARACTER FIELD CONTAINING    *****
.****                        EITHER '19XX' OR '20XX' - NOT USED   *****
.****                        IF L'TIME EQ 8.                      *****
.****                                                             *****
.****    DATE    DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING  *****
.****                        THE DATE IN MM/DD/YY FORMAT          *****
.****                                                             *****
.****    TIME    DS   CL12   A TWELVE CHARACTER FIELD CONTAINING  *****
.****                        THE TIME IN HH:MM:SS.TTT FORMAT      *****
.****                  NOTE: IF THIS FIELD IS ONLY EIGHT CHARS    *****
.****                        IN LENGTH, ONLY EIGHT CHARS WILL BE  *****
.****                        USED - FIRST EIGHT.                  *****
.****                                                             *****
.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****
.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****
.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****
.****                                                             *****
.****    MODIFIED 02/19/81    BY  JOE MCCLOSKEY                   *****
.****                         F.W. WOOLWORTH, MILWAUKEE           *****
.****                                                             *****
.****    CHANGED TO BE ABLE TO RECEIVE A TOD LOCATION INSTEAD OF  *****
.****    USING TOD CLOCK.  IF TOD LOCATION GIVEN, TIME ZONE       *****
.****    OFFSET NOT USED.  ADDITIONLY FOUR BYTES ADDED TO TIME    *****
.****    TO INCLUDE DECIMAL AND THOUSANTH'S OF SECONDS, AND A     *****
.****    FOUR DIGIT FIELD CALLED YEARDATE TO GIVE YEAR INCLUDING  *****
.****    CENTURY.  TO BE FORWARD COMPATABLE, THE ADDED BYTES ARE  *****
.****    NOT USED IF THE TIME FIELD IS PREDEFINED AS ONLY EIGHT   *****
.****    BYTES IN LENGTH.  ALSO CHANGED LOGIC SO AS NOT TO GIVE   *****
.****    ERRONEOUS RESULTS (OFF BY 1 SECOND OCCASIONALLY).        *****
.****                                                             *****
.**********************************************************************
&L       SETC  '&SYSNDX'
&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK
         AIF   (T'&TODLOC EQ 'O').NOW SKIP IF NOT FURNISHED
         AIF   ('&TODLOC'(1,1) EQ '(').REG   DO REGISTER NOTATION
         MVC   8(8,13),&TODLOC    MOVE IN FURNISHED TOD CLOCK
         LM    0,1,8(13)          LOAD INTO WORK REGS
         AGO   .GOTTIME           SKIP TIME ZONE OFFSET
.REG     MVC   8(8,13),0&TODLOC   MOVE IN FURNISHED TOD CLOCK
         LM    0,1,8(13)          LOAD INTO WORK REGS
         AGO   .GOTTIME           SKIP TIME ZONE OFFSET
.NOW     LM    0,1,8(13)          LOAD INTO WORK REGS
         L     15,16              GET CVT ADDRESS
         A     0,304(15)          ADD LOCAL TIME DEVIATION
.GOTTIME SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS
         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES)
         LR    15,0               COPY REMAINDER OF MICS TO GET SECS
         SR    14,14              CLEAR FOR DIVIDE
         D     14,=F'1000'        DIVIDE TO GET REMAINING MILLISECONDS
         LR    14,15              COPY TO WORK REG
         CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT
         UNPK  24(5,13),11(5,13)  UNPACK SECONDS FOR PRINT
         OI    28(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+6(2),24(13)   MOVE THE SECONDS
         AIF    ('&NOGEN' NE 'NOGEN').LONG1   GENERATED TIME AS CL12?
         AIF    (L'TIME EQ 8).SHORT1  SHORT FORM SPECIFIED
.LONG1   MVC   TIME+9(3),26(13)   MOVE THE THOUSANTH'S OF SECONDS
.SHORT1  CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT
         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES
         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME+3(2),26(13)   MOVE THE MINUTES
         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS
         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS
         OI    27(13),X'F0'       SET UP FOR PRINTING
         MVC   TIME(2),26(13)     MOVE THE HOURS
         MVI   TIME+2,C':'        ADD COLON
         MVI   TIME+5,C':'        ADD COLON
         AIF    ('&NOGEN' NE 'NOGEN').LONG2   GENERATED TIME AS CL12?
         AIF    (L'TIME EQ 8).SHORT2  SHORT FORM SPECIFIED
.LONG2   MVI   TIME+8,C'.'        ADD DECIMAL
.SHORT2  ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH
         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS
         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK
         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER
         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY
         STC   0,DAY              SET RELATIVE DAY OF WEEK
         ZAP   8(8,13),16(8,13)   MOVE # DAYS TO WORK AREA
         AP    8(8,13),=P'1'      ADD ONE DAY
         DP    8(8,13),=P'1461'   DIVIDE BY # DAYS IN FOUR YEARS
         ZAP   16(8,13),8(5,13)   SAVE # FOUR YEAR PERIODS
         MP    16(8,13),=P'4'     GET TO LAST 4 YEAR PERIOD
         XC    8(5,13),8(13)      CLEAR FOR DIVIDE
         LA    15,S&L.T           LOAD TABLE ADDRESS FOR NO LEAP
         CP    16(8,13),=P'4'     IS IT PRIOR TO 1904?
         BL    S&L.C1             YES, CAN'T BE LEAP YEAR
         LA    15,S&L.TL          LOAD TABLE ADDRESS FOR LEAP YEAR
         AP    8(8,13),=P'1'      ADD ONE MORE DAY FOR 1900
         CP    8(8,13),=P'367'    IS IT LEAP YEAR?
         BL    S&L.C2             YES DON'T SUBTRACT
         LA    15,S&L.T           LOAD TABLE ADDRESS FOR NO LEAP YEAR
         AP    16(8,13),=P'1'     ADD ONE YEAR
         SP    8(8,13),=P'366'    SUBTRACT REMAINING DAYS FOR ONE LEAP
S&L.C1   CP    8(8,13),=P'366'    LESS THAN ONE YEAR REMAINING?
         BL    S&L.C2             YES, GET OUT OF LOOP
         SP    8(8,13),=P'365'    SUBTRACT REMAINING DAYS FOR ONE YEAR
         AP    16(8,13),=P'1'     ADD ONE YEAR
         B     S&L.C1             GO BACK TO COMPARE
S&L.C2   ZAP   24(8,13),=P'1900'  DEFAULT TO 1900'S
         AP    24(8,13),16(8,13)  ADD NUMBER YEARS SINCE 1900
         UNPK  32(5,13),29(3,13)  UNPACK YEAR
         OI    36(13),X'F0'       SET UP FOR PRINTING
         AIF    ('&NOGEN' NE 'NOGEN').LONG3   GENERATED TIME AS CL12?
         AIF    (L'TIME EQ 8).SHORT3  SHORT FORM SPECIFIED
.LONG3   MVC   YEARDATE,33(13)    MOVE INTO OUTPUT FIELD
.SHORT3  MP    16(8,13),=P'1000'  MAKE ROOM FOR # DAYS
         AP    16(8,13),8(8,13)   ADD IN DAYS TO FORM JULIAN DATE
         ZAP   24(4,13),16(8,13)  MOVE JUL DATE TO WORK AREA
         MVO   14(2,13),25(1,13)  MOVE YEAR PORTION
         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA
         LR    14,15              SAVE TABLE IN USE
         ZAP   8(8,13),26(2,13)   MOVE DAY PORTION
         CVB   0,8(13)            CONVERT TO BIN
         SR    1,1                CLEAR REG
         IC    1,0(15)            LOAD CHAR FROM TABLE
         LA    15,1(15)           INDEX TABLE POINTER
         SR    0,1                SUBTRACT FROM WORK VALUE
         BP    *-10               STILL POSITIVE, DO AGAIN
         AR    0,1                ELSE, ADD IT BACK
         CVD   0,8(13)            CONVERT TO DEC
         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT
         SR    15,14              FIND VALUE OF CURRENT INDEX
         CVD   15,8(13)           CONVERT TO DEC
         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT
         OI    DATE+1,C'0'        INSURE NUMERICS
         OI    DATE+4,C'0'        INSURE NUMERICS
         OI    DATE+7,C'0'        INSURE NUMERICS
         MVI   DATE+2,C'/'        ADD SLASH
         MVI   DATE+5,C'/'        ADD SLASH
         B     S&L.E              BRANCH AROUND CONSTANTS
S&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE
S&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR
         AIF    ('&NOGEN' EQ 'NOGEN').NOGEN   NOGEN SPECIFIED, SKIP
DAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK, MON.=X'00'
YEARDATE DC    C'    '            EITHER '19XX' OR '20XX'
DATE     DC    C'  /  /  '        CURRENT DATE
TIME     DC    C'  :  :  .   '    CURRENT TIME
.NOGEN   ANOP
S&L.E    DS    0H
         MEND
*
* $PROLOG MACRO FOLLOWS
*
         MACRO
&LABEL   $PROLOG &LV=0,&GM=Y
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
         GBLC  &PROGM
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         AIF   ('&GM' EQ 'N').NOGM
&PROGM   SETC  'GETMAIN'
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
         AGO   .STORE
.NOGM    ANOP
         CNOP  0,4
         LA    R1,SAVE&SYSNDX
         B     *+76
SAVE&SYSNDX DC 18F'0'
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
*
* $EPILOG MACRO FOLLOWS
*
         MACRO
&LABEL   $EPILOG &RC
         GBLC  &PROGM
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         AIF   ('&PROGM' NE 'GETMAIN').NOFREE
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         AGO   .LM
.NOFREE  ANOP
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
.LM      ANOP
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
*
* $REGS MACRO FOLLOWS
*
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
 SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
 SPACE
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
 SPACE
.MEX2    ANOP
       MEND
