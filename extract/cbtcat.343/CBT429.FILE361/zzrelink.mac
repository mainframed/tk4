RLNK     TITLE 'Z Z R E L I N K  -  ZZRELINK RE-LINK EDIT UTILITY '
*
*    AUTHOR:   J. SCULLION
*
*    DATED:    11 FEB 1973
*
*    FUNCTION: THIS IS THE MAINLINE CONTROL ROUTINE FOR THE LINK
*              UTILITY ROUTINE.
*
*              THE PURPOSE OF THIS UTILITY IS TO READ CONTROL CARDS
*              THAT ARE SIMILAR TO IEBCOPY CONTROL CARDS AND DO EITHER
*              OF:
*                   1.   GENERATE AND PUNCH A LINKAGE EDITOR JCL STREAM
*               OR
*                   2.   GENERATE A JCL STREAM AND INVOKE THE LINKAGE
*                        EDITOR
*
*              THIS MAINLINE MODULE WILL CONTROL THE ROUTINES THAT:
*             -VALIDATE THE CONTROL CARDS
*             -READ PDS DIRECTORIES
*             -GENERATE MESSAGES
*             -GENERATE JCL STREAM
*
*              THIS ROUTINE IS SIMILAR TO IEBCOPY IN THAT IT WILL ALLOW
*
*
*                   ALL MEMBERS OF A PDS TO BE RELINKED
*             OR    SELECTED MEMBERS OF A PDS TO BE RELINKED
*             OR    EXCLUDING CERTAIN MEMBERS OF A PDS FROM RELINKING
*
*         FORMAT OF CONTROL STATEMENTS ARE:
*
*              LINK      INDD=          ,OUTDD=
*              L         I=             ,O=
*
*              SELECT    MEMBER=
*              S         M=
*
*              EXCLUDE   MEMBER=
*              E         M=
*
*         THE REPLACE OPTION CAN ALSO BE SPECIFIED. IT IS CODED IN
*     THE SAME MANNER AS THE OPTION IS USED IN IEBCOPY.
*     IT CAN REPLACE SELECTED MEMBERS OF A DATA SET OR IT CAN REPLACE
*     THE WHOLE DATA SET. IF THE REPLACE OPTION IS NOT SPECIFIED, THE
*     LINK IF INVOKED WILL NOT REPLACE THE MEMBER IN THE NEW DATA SET
*     IF THE MEMBER IS PRESENT IN THE NEW DATA SET.
*
*     SEE THE WRITE-UP IN THE STANDARDS MANUAL FOR THE JCL REQUIRED.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
*
*     THIS PROGRAM IS BUILT FROM FIVE MODULES:
*
*     1.   ZZRELINK      MAIN LINE  AND  MAIN PROCESSOR
*     2.   ZZRESCAN      CONTROL CARD SCAN ROUTINE.
*     3.   ZZMESAGE      MESSAGE WRITER ROUTINE.
*     4.   ZZROVBLD      ENTRY POINT DETERMINATION AND OVERLAY TABLE
*                        BUILD ROUTINE.
*     5.   ZZROVCRD      OVERLAY CARD GENERATOR ROUTINE.
*
*     ZZRELCOM IS THE COMMUNICATIONS AREA BETWEEN MODULES.
*
*
         EJECT
         EQUREGS
         EJECT
         EQUBITS
         TITLE 'ENVIRONMENT PRESERVATION ROUTINE'
ZZRELINK CSECT
*
*         SAVE REGISTERS AND ESTABLISH ADDRESSABILITY
*
         CHAIN SAVE=(14,12),BASE=(8,10,11,12),SAVAR=SV1               $
         TITLE 'ONE TIME INITIALIZATION ROUTINE'
*
*         INITIAL PROCESSING I.E. OPENING OF FILES ETC.
*
         MVI   SZPRMSW,X'00'            TURN PARM SW OFF
         MVI   LEUSED,X'00'             LINK-EDIT WAS USED            $
         L     R1,0(R1)                 PTR T0 PARM BUFFER
         LH    R2,0(R1)                 PARM LENGTH
         STH   R2,SZPRMLTH              SAVE PARM LENGTH FOR LATER
         LTR   R2,R2                    PARM PRESENT?
         BNP   PSTPARM                  NO PARM PRESENT
         BCTR  R2,0                     DECR FOR EXEC
         EX    R2,MOVE3                 SAVE THE SIZE PARAMETER
         MVI   SZPRMSW,X'FF'            TURN PARM PRES SW ON
PSTPARM  DS    0H
         OPEN  (PRTDCB,(OUTPUT))        OPEN SYSPRINT
*
         TM    PRTDCB+48,X'10'          OPEN OK
         BO    NXTOP2                   YES
*
         MVC   NAMEFLD(8),=C'SYSPRINT'  SYSPRINT DD CARD MISSING
         OI    IOEF2,SPRNOPN            SHOW SYSPRINT OPEN FAILED
         MVI   MSGLIST,0                INITIALIZE MESSAGE LIST
         MVI   MSGLIST+1,BADPRINT       SET UP MESSAGE NUMBER
         BAL   R2,MSGWRT                GO WRITE MESSAGE
         MVI   RC,16                    SET RETURN CODE TO 16
         B     ZZRTERM                  GOTO END OF JOB
*
NXTOP2   DS    0H
         OPEN  (CARDCB,(INPUT))         OPEN SYSIN
*
         TM    CARDCB+48,X'10'          OPEN OK
         BO    NXTOP3                   YES
*
         MVC   DDNMFLD(5),=C'SYSIN'     SYSIN OPEN ERROR
OPENFAIL DS    0H
         MVI   DDNMDISP,26              NAME GOES IN +26
         MVI   MSGLIST,0                INITIALIZE MESSAGE LIST
         MVI   MSGLIST+1,OPENERRX       SHOW OPEN ERROR
         BAL   R2,MSGWRTD               WRITE MESSAGE WITH DDNAME
         MVI   RC,16                    SET RETURN CODE TO 16
         B     ZZRTERM                  GOTO END OF JOB
*
NXTOP3   DS    0H
         BAL   R7,CHKFUNC               CHECK THE FUNCTION
         CLI   LESWCH,X'FF'             PUNCH REQUIRED
         BE    NXTOP4                   NO
         OPEN  (SYSPUNCH,(OUTPUT))      OPEN SYSPUNCH
*
         TM    SYSPUNCH+48,X'10'        OPEN OK
         BO    ENDOPN                   YES
*
         MVC   DDNMFLD(8),=C'SYSPUNCH'  SHOW SYSPUNCH OPEN FAILED
         B     OPENFAIL                 PRODUCE MESSAGE AND TERMINATE
*
NXTOP4   DS    0H
         CLI   UT2,X'FF'                SYSUT2 DD PRESENT
         BE    NXTOP5
         MVC   DDNMFLD(6),=C'SYSUT2'    SHOW SYSUT2 OPEN FAILED
         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE
         MVI   RC,16                    SET RETURN CODE TO 16
         B     ZZRTERM                  TERMINATE
NXTOP5   DS    0H
         CLI   SYSLOPR,X'FF'            SYSLOUT DD PRESENT?
         BE    NXTOP6                   YES
         MVC   DDNMFLD(7),=C'SYSLOUT'   SHOW DD CARD MISSING
         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE
         MVI   RC,16                    SET RETURN CODE TO 16
         B     ZZRTERM                  TERMINATE
NXTOP6   DS    0H
         CLI   UT1,X'FF'                SYSUT1 DD PRESENT?
         BE    ENDOPN                   YES
         MVC   DDNMFLD(6),=C'SYSUT1'    SHOW SYSUT1 OPEN FAILED
         BAL   R2,NODD                  PRODUCE NO DD CARD MESSAGE
         MVI   RC,16                    SET RETURN CODE TO 16
         B     ZZRTERM                  TERMINATE
ENDOPN   DS    0H
         LA    R4,ZZRTERM               R4 = PTR TO EOJ ROUTINE
         ST    R4,VZZRTERM              SET UP COMM. PTR TO EOJ
         TITLE 'MAINLINE CONTROL ROUTINE'
*
*         THE FOLLOWING CONTROLS THE OVERALL PROCESSING. IT CONTROLS
*    THE CONTROL CARD SCAN ROUTINE, TABLE BUILDING ROUTINE, MEMBER
*    PROCESSING ROUTINE
*
         BAL   R7,INITLZ                SET UP VALUES FOR SCAN ROUTINE
BEGINLNK DS    0H
         LA    R4,ZZRELCOM              ADDR COMM AREA
         L     R15,VZZRSCN              GET ADDRESS OF ZZRESCAN
         BALR  R14,R15                  DO CONTROL CARD SCAN
         BAL   R7,ALIASSTR              BUILD ALIAS TABLE
         BAL   R7,MEMREAD               DO PROCESSING FOR DATA SET
         B     BEGINLNK                 REPEAT FOR NEXT OPERATION
         TITLE 'ZZRESCAN - WORK AREA INITIALIZATION ROUTINE'
*
*      SCAN ROUTINE INITIALIZATION
*
INITLZ   DS    0H
         MVC   CARDCB+32(4),VZZRLEOF    SET UP EODAD EXIT PTR
         MVI   CPARAMSW,X'08'           FORCE FIRST READ
         MVI   CCSWITCH,X'01'           FIRST SCAN SWITCH
         L     R5,=A(TABCOR)            R5 = PTR TO TABLE WORK AREA
         ST    R5,SEBEGIN               START OF SETAB
         ST    R5,SESTOP                END OF SETAB
         ST    R5,INBEGIN               START OF INDD TABLE
         BR    R7
         TITLE 'FUNCTION DETERMINATION ROUTINE'
*
*    THE FOLLOWING DECIDES WHETHER THE FUNCTION WILL BE TO PUNCH
*    CARDS OR ELSE TO INVOKE THE LINKAGE EDITOR.
*
*    CARDS WILL BE PUNCHED WHEN A //SYSPUNCH CARD IS PRESENT.
*
*    LINKAGE EDITOR WILL BE INVOKED WHEN THERE IS NO //SYSPUNCH CARD.
*
CHKFUNC  DS    0H
         L     R1,16(0)                 CVT
         L     R1,0(R1)                 TCBTCB
         L     R1,4(R1)                 TCB
         L     R1,12(R1)                TIOT
         LA    R1,24(R1)                LOAD PAST TIOT HEADER
         ST    R1,ADRTIOT               SAVE TIOT ADDRESS
*
*    LOOP THROUGH TIOT TO SEE WHAT DD CARDS ARE PRESENT
*
TIOTLP   DS    0H
         CLI   0(R1),X'00'              LAST ENTRY?
         BE    CHKRET                   YES
         CLC   4(8,R1),=C'SYSPUNCH'     SYSPUNCH PRESENT?
         BNE   CONTSR1                  NOT FOUND YET
         MVI   LESWCH,X'00'             TURN OFF L E FUNCTION
         B     TIOTINCR                 BUMP UP TO NEXT ENTRY
CONTSR1  DS    0H
         CLC   4(6,R1),=C'SYSUT2'       SYSUT2 PRESENT
         BNE   CONTSR2                  NOT FOUND YET
         MVI   UT2,X'FF'                SYSUT2 FOUND
         B     TIOTINCR                 BUMP UP TO NEXT ENTRY
CONTSR2  DS    0H
         CLC   4(7,R1),=C'SYSLOUT'      SYSLOUT PRESENT
         BNE   CONTSR3                  NOT FOUND YET
         MVI   SYSLOPR,X'FF'            SYSLOUT FOUND
         B     TIOTINCR                 BUMP UP TO NEXT ENTRY
CONTSR3  DS    0H
         CLC   4(6,R1),=C'SYSUT3'       SYSUT3 PRESENT
         BNE   CONTSR4                  BRANCH IF NOT SYSUT3
         MVI   UT3,X'FF'                SHOW SYSUT3 PRESENT
         B     TIOTINCR                 BUMP UP TO NEXT ENTRY
CONTSR4  DS    0H
         CLC   4(6,R1),=C'SYSUT1'       SYSUT1 PRESENT?
         BNE   TIOTINCR                 NO - CHECK NEXT TIOT ENTRY
         MVI   UT1,X'FF'                SHOW SYSUT1 PRESENT
TIOTINCR DS    0H
         SR    R2,R2                    ZERO R2
         IC    R2,0(R1)                 LENGTH OF DD ENTRY
         AR    R1,R2                    BUMPP UP TO NEXT ENTRY
         B     TIOTLP                   TEST NEXT ENTRY
CHKRET   DS    0H
         BR    R7                       RETURN
         TITLE 'MEMBER READ ROUTINE - SELECT MEMBER FROM DIRECTORY'
*
*         THE FOLLOWING GETS A MEMBER AND THEN PASSES CONTROL TO THE
*    ROUTINE THAT CONTROLS THE PROCESSING OF IT.
*
MEMREAD  DS    0H
         BAL   R9,DDSRCH                VERIFY THAT INDD AND OUTDD PRES
         LR    R6,R5                    R5=R6 WILL FORCE A READ
         MVC   DDCB+33(3),AEODAM+1      END OF DIRECTORY EXIT
         XC    PRVATTRB(3),PRVATTRB     CLEAR ATTRIBUTE INDICATORS    $
         ZAP   STEPNO,=P'0'             SET STEP NO. TO ZERO
         MVI   COPYSW,0                 RESET COPY SWITCH
         LA    R4,ZZRELCOM              PTR TO COMM AREA
         LA    R1,0                     CODE = 0 - CLOSE OPEN REQ
         L     R15,=V(ZZROVBLD)         PTR TO ROUTINE
         BALR  R14,R15                  DO THE PROCESS
         LTR   R15,R15                  TEST RETURN CODE
         BNZ   BEGINLNK                 NOT ZERO - OPEN FAILED
         CLOSE (OUTDCB)
         MVC   OUTDCB+40(8),OUTNAME      DDNAME
         OPEN  (OUTDCB)
         TM    OUTDCB+48,X'10'
         BNO   DDNMDER1                 OPEN NOT SUCCESSFULL          $
         RDJFCB (OUTDCB)                READ JFCB FOR ENQUE LOGIC     $
         MVC   QENQOUT+2(6),JFCB+118    SAVE VOLSER FOR ENQUE         $
         MVC   RENQOUT,JFCB             SAVE DSNAME FOR ENQUE         $
         B     GETMEMBR                                               $
DDNMDER1 EQU   *                                                      $
*    OPEN WAS NOT SUCESSFUL, PUT OUT MESSAGE.
         MVC   DDNMFLD(8),OUTNAME        SET UP DDNAME FOR MESSAGE
DIRERR1  DS    0H
         MVI   MSGLIST+1,NODIR           SHOW MESSAGE TO WRITE
         LA    R2,BEGINLNK               SET RETURN ADDRESS
         MVI   DDNMDISP,39               DDNAME GOES AT +39
         $SETRC 8                      SET RETURN CODE TO 8
         B     MSGWRTD                   GO WRITE MESSAGE WITH DDNAME
GETMEMBR DS    0H
         BAL   R9,MEMRDR                DO READ ROUTINE
         TM    11(R6),X'80'             IS IT AN ALIAS
         BO    MEMINCR                  YES - GET NEXT MEMBER
         MVC   MEMNAME(8),0(R6)         SAVE THE MEMBER NAME
         MVC   ADDRMAIN(3),8(R6)        SAVE TTR OF MEMBER
         IC    R4,11(R6)                PICK UP INDICATOR BYTE        $
         SLL   R4,27                    SHIFT OFF THE                 $
         SRL   R4,27                      UNWANTED BITS               $
         CH    R4,=H'11'                IS LENGTH LESS THAN OR = 34   $
         BNH   NOTAUTH                  YES - CANT HAVE AUTH CODE     $
         MVI   SETSSISW,X'00'           CLEAR SETSSISW                $
         CLI   30(R6),X'98'             DOES MEMBER HAVE SET SSI      $
         BNE   *+26                     NO                            $
         MVI   SETSSISW,X'FF'           SET SETSSI SW                 $
         MVC   SETSSIBI,34(R6)          SAVE BINARY SETSSI INFO       $
         CLI   39(R6),X'01'             IS PROGRAM AUTHORIZED         $
         BE    *+16                     YES                           $
         B     NOTAUTH                  NO                            $
         CLI   34(R6),X'01'             IS NON SET SSI                $
         BNE   NOTAUTH                    MOD AUTHORIZED              $
         OI    20(R6),X'01'             YES- USE BIT 7 OF 1ST         $
         B     *+8                        ATTRIBUTE BYTE FOR AUTH     $
NOTAUTH  EQU   *                                                      $
         NI    20(R6),X'FE'             TURN OFF AUTH BIT             $
         MVC   ATTRIB(2),20(R6)         SAVE ATTRIBUTES
         CH    R4,=H'10'                IS LENGTH LESS THAN OR = 32   $
         BNH   *+14                     NO CANT HAVE AMODE/RMODE      $
         MVC   ATTRIB+2(1),31(R6)       SAVE AMODE/RMODE INFO         $
         B     *+8                                                    $
         MVI   ATTRIB+2,X'00'           CLEAR AMODE/RMODE INFO        $
         NI    ATTRIB,X'FD'             TURN OFF PAGE ALIGN BIT       $
         CH    R4,=H'09'                IS LENGTH LESS THAN OR = 30   $
         BNH   *+16                     NO - CANT HAVE PAGE ALIGNMENT $
         TM    30(R6),X'20'             IS MODULE PAGE ALIGNED ?      $
         BNO   *+8                      NO                            $
         OI    ATTRIB,X'02'             YES USE BIT 6 OF FIRST        $
*                                         ATTRIBUTE BYTE FOR PG ALIGN $
         MVC   EPADDR(3),27(R6)         SAVE ENTRY POINT ADDRESS
         BAL   R14,MEMPRCSS             DO MEMBER PROCESSING          $
         MVI   FIRSTAL+1,0              SET UP FOR FIRST ENTRY
MEMINCR  DS    0H
         LA    R6,11(R6)                BUMP PAST CONSTANTS
         SR    R4,R4                    ZERO R4
         NI    0(R6),X'1F'              TURN OFF UNWANTED BITS
         IC    R4,0(R6)                 GET LENGTH
         SLA   R4,1                     *2 = # OF BYTES
         LA    R6,1(R4,R6)              BUMP PAST USER DATA
         B     GETMEMBR                 GET NEXT MEMBER
MEMRDR   DS    0H
         CR    R6,R5                    END OF BLOCK
         BNL   MREAD                    YES - GET NEXT BLOCK
MEMEND   DS    0H
         CLC   0(8,R6),FFF              END OF DIRECTORY
         BE    MEMRET                   YES - RETURN TO MAINLINE
         BR    R9                       NO - RETURN TO PROCESSING
MREAD    DS    0H
         READ  DDECB,SF,DDCB,DBLOCK
         CHECK DDECB
         SR    R5,R5                    ZERO R5
         AH    R5,DBLOCK                LENGTH OF BLOCK
         LA    R6,DBLOCK                START OF BLOCK
         AR    R5,R6                    END OF BLOCK
         LA    R6,2(R6)                 START OF FIRST ENTRY
         B     MEMEND                   CHECK OUT THE ENTRY
MEMRET   DS    0H
         CLOSE (SYSUT2)                 CLOSE SYSUT2
         LH    R5,COUNT                 NO. OF ENTRIES IN SELECT TABLE
         LTR   R5,R5                    ANY ENTRIES IN TABLE
         BZ    NOSELECT                 NO - LINK ALL WAS REQUESTED
         LH    R5,ENCT                  R5 = NO. OF SELECT ENTRIES
         LTR   R5,R5                   ENTRIES IN SELECT TABLE
         BZ    NOSELECT                 NO - MUST HAVE BEEN EXCLUDES
         L     R5,SEBEGIN               R5 = PTR TO SELECT TABLE
CHKSEL   DS    0H
         TM    0(R5),SEBIT5             WAS THIS MEMBER PROCESSED
         BO    SELNEXT                  YES - NO MESSAGE TO WRITE
         MVI   MSGLIST+1,SMNF           MEMBER SELECTED BUT NOT FOUND
         $SETRC 4                      SET RETURN CODE TO 4
         MVI   NAMEDISP,0               MEMBER NAME GOES AT +0
         MVC   NAMEFLD(8),2(R5)         MOVE IN MEMBER TO DISPLAY
         LA    R2,SELNEXT               SET RETURN ADDRESS
         B     MSGWRTN                  WRITE ERROR MESSAGE
SELNEXT  DS    0H
         LA    R5,10(R5)                BUMP TO NEXT ENTRY
         C     R5,SESTOP                END OF TABLE ?
         BL    CHKSEL                   NO - GET NEXT ENTRY
NOSELECT DS    0H
         CLI   ALLSET,X'FF'             READY TO DO LINK?
         MVI   ALLSET,X'00'             RESET SWITCH
         BNE   0(0,R7)                  RETURN - NO LINK REQ
         CLI   LESWCH,X'FF'             APPLICATION FUNCTION REQ
         BNE   PSTCLSE                  NO - DONT DO LINK
         BAL   R14,ENQOUT               ENQ THE FILE TO BE LINKED TO  $
         LINK  EP=IEWL,PARAM=(OPLISTL,DDNMLST),VL=1
         MVI   LEUSED,X'FF'             SHOW THAT LINK-EDIT WAS USED  $
         BAL   R14,DEQOUT               DEQ THE FILE LINKED TO        $
         BR    R7                       RETURN
PSTCLSE  DS    0H
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(2),=C'/*'         MOVE IN DELIMITER
         PUT   SYSPUNCH,CNTCRD          PUT IT OUT
         BR    R7                       RETURN TO MAINLINE
         TITLE 'MEMBER PROCESSING ROUTINE'
*
*         THE FOLLOWING CONTROLS THE FLOW OF PROCESSING FOR EACH
*    MEMBER TESTING IF LINKS ARE REQUIRED AND WHAT INFORMATION TO GET
*
MEMPRCSS DS    0H
         ST    R14,PROCRTRN             SAVE RETURN ADDRESS           $
         BAL   R9,LNKREQ                TEST IF LINK IS REQUIRED
         CLI   MEMNAME,C' '             IS NAME BLANK
         BE    PRCSSEND                 YES - RETURN LINK NOT REQ
         BAL   R9,VERPLC                REPLACE MEMBER ON OUTPUT?
         MVI   OVLYSW,X'FF'             INIT OVERLAY SW TO ON
         TM    ATTRIB,X'20'             OVERLAY PRESENT?
         BO    PATEST                   YES - LEAVE SW ON             $
         MVI   OVLYSW,X'00'             NO OVERLAY - TURN SW OFF
PATEST   EQU   *                                                      $
         TM    ATTRIB,X'02'             IS MOD MARKED PAGE ALIGN      $
         LA    R9,PAMSG                 SET TO PRODUCE MESSAGE        $
         MVC   NAMEFLD(8),MEMNAME                                     $
         BNO   NETEST                                                 $
         B     NOEDIT                                                 $
NETEST   DS    0H
         TM    ATTRIB+1,X'08'           IS MODULE MARKED N.E.
         LA    R9,NEMSG                 SET TO PRODUCE MESSAGE
         MVC   NAMEFLD(8),MEMNAME
         BO    NOEDIT                   BRANCH IF YES
*
         BAL   R9,CESDSTRT              GET CSECT NAME OF ENTRY POINT
         CLI   CSCTNAME,C' '            IS NAME BLANK
         BE    PRCSSEND                 YES - RETURN NAME NOT FOUND
*
         BAL   R9,PARMGEN               SET UP LINK OPTIONS
*
         CLI   LESWCH,X'FF'             INVOKE LINKAGE EDITOR
         BE    INVOKELE                 YES - SKIP PAST JCL GEN
         BAL   R9,JCLGENR               GENERATE THE JCL
         B     PRCSSEND                 RETURN
INVOKELE DS    0H
         CLI   ALLSET,X'FF'             EVERYTHING ALREADY SET UP
         BE    SYSUT2OP                 YES DONT DO AGAIN
         BAL   R9,GENDDLST              SET UP DDNAME LIST
         MVI   ALLSET,X'FF'             SET SET-UP SW = ON
         OPEN  (SYSUT2,OUTPUT)
         TM    SYSUT2+48,X'10'          OPEN OK
         BO    SYSUT2OP                 YES - CONTINUE
         MVC   DDNMFLD(6),=C'SYSUT2'    SHOW SYSUT2 OPEN FAILED
         B     OPENFAIL                 PRODUCE MESSAGE AND TERMINATE
SYSUT2OP DS    0H
         BAL   R4,CONTGEN               GENERATE CONTROL CARDS
         B     PRCSSEND                 RETURN
NOEDIT   DS    0H
         CLI   UT3,X'FF'                SYSUT3 DD CARD PRESENT
         BNE   0(0,R9)                  NO - CAN'T DO COPY
         TM    SYSUT3+48,BIT3           IS SYSUT3 OPEN
         BO    GENCOPY                  YES - GO GEN COPY CARD
         OPEN  (SYSUT3,OUTPUT)          OPEN IEBCOPY FILE
GENCOPY  DS    0H
         CLI   COPYSW,X'FF'             COPY CARD PUNCHED YET
         BE    SELGEN                   BRANCH IF YES - NEED SELECT
         MVI   COPYSW,X'FF'             SHOW COPY CARD GEN'D
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CONTROL CARD
         MVC   CNTCRD(L'COPYBASE),COPYBASE MOVE BASIC COPY TEXT
         L     R2,INBEGIN               POINT AT INDD TABLE
         MVC   CNTCRD+15(8),2(R2)       MOVE INPUT DDNAME TO CARD
         LA    R2,CNTCRD+16             SET PTR FOR SCAN
COPYSCAN DS    0H
         CLI   0(R2),C' '               END OF INPUT DDNAME
         BE    COPYFND1                 BRANCH IF YES
         LA    R2,1(R2)                 BUMP TO NEXT CHARACTER
         B     COPYSCAN                 CONTINUE SCAN
COPYFND1 DS    0H
         MVC   0(7,R2),=C',OUTDD='      MOVE IN OUTDD TEXT
         MVC   7(8,R2),OUTNAME          MOVE IN OUTPUT DDNAME
         PUT   SYSUT3,CNTCRD            WRITE OUT COPY CARD
SELGEN   DS    0H
         MVC   CNTCRD,CNTCRD-1          CLEAR CONTROL AREA
         MVC   CNTCRD(L'SELECT),SELECT  MOVE BASIC SELECT TEXT
         CLI   REPLACE,X'FF'            REPLACE OPTION SPECIFIED
         BNE   NRCOPY                   BRANCH IF NOT
         MVC   CNTCRD+27(2),=C'(('      SET UP REPLACE FORMAT
         MVC   CNTCRD+29(8),MEMNAME     MOVE IN MEMBER NAME
         LA    R2,CNTCRD+30             SET UP FOR SCAN
SELSCAN  DS    0H
         CLI   0(R2),C' '               END OF MEMBER NAME
         BE    SELFND1                  BRANCH IF YES
         LA    R2,1(R2)                 BUMP UPP TO NEXT CHARACTER
         B     SELSCAN                  LOOK AT NEXT CHARACTER
SELFND1  DS    0H
         MVC   0(5,R2),=C',,R))'        SET REPLACE OPTION
         B     PUTSEL                   PUNCH OUT SELECT CARD
NRCOPY   DS    0H
         MVC   CNTCRD+27(8),MEMNAME     PLACE MEMBER NAME ON CARD
PUTSEL   DS    0H
         PUT   SYSUT3,CNTCRD            PUNCH OUT  SELECT CARD
FIRSTAL  NOP   NFIRSTAL                 BRANCH IF NOT FIRST ENTRY
         LR    R15,R9                   SET FOR NO ALIAS RETURN
         BAL   R14,ALSCAN               GO SCAN ALIAS TABLE
         MVI   FIRSTAL+1,X'F0'          SHOW FIRST ALIAS DONE
         MVC   MEMNAME(8),3(R3)         SET UP ALIAS NAME AS MEMBER
         B     SELGEN                   GO PRODUCE SELECT CARD
NFIRSTAL DS    0H
         SH    R3,=H'16'                DECREMENT TO NEXT ALIAS
         CLC   0(3,R3),16(R3)           IS THE TTR THE SAME
         BNE   0(0,R9)                  BRANCH IF NO - ALIAS COMPLETE
         MVC   MEMNAME(8),3(R3)         SET UP ALIAS NAME AS MEMBER
         B     SELGEN                   GO GENERATE SELECT CARD
PAMSG    EQU   *                                                      $
NEMSG    EQU   *                                                      $
         TM    ATTRIB,X'02'             IS MOD MARKED PAGE ALIGN      $
         BNO   *+12                     NO                            $
         MVI   MSGLIST+1,PA             SET PA MESSAGE                $
         B     *+8                                                    $
         MVI   MSGLIST+1,NE             SET NE MESSAGE                $
         L     R14,PROCRTRN             RESTORE RETURN ADDRESS        $
         LR    R2,R14                   SET RETURN ADDRESS            $
         MVI   NAMEDISP,12              MODULE NAME GOES AT +12
         B     MSGWRTN                  GO WRITE MESSAGE
PRCSSEND DS    0H
         L     R14,PROCRTRN             RESTORE RETURN ADDRESS        $
         BR    R14                      RETURN                        $
PROCRTRN DS    F                                                      $
         TITLE 'REPLACE OPTION VERIFICATION ROUTINE'
*
*    IF REPLACE OPTION WAS NOT SPECIFIED, THE MEMBER CAN NOT
*    BE PRESENT ON THE OUTPUT FILE. PRODUCE AN ERROR MESSAGE IN
*    THIS CASE.
*
VERPLC   DS    0H
         CLI   REPLACE,X'FF'            REPLACE OPTION?
         BE    VERFRET                  YES - RETURN
         MVC   BLDLIST+4(8),MEMNAME     NAME FOR BLDL
         BLDL  OUTDCB,BLDLIST           BUILD LIST
         LTR   R15,R15                  RETURN CODE ZERO?
         BNZ   VERFRET                  BRANCH IF MEMBER NOT FOUND
*   MEMBER IS PRESENT AND REPLACE OPTION WAS NOT SPECIFIED.
         MVC   NAMEFLD(8),MEMNAME       SET MEMBER NAME FOR MESSAGE
         MVI   NAMEDISP,0               MEMBER NAME GOES AT +0
         MVI   MSGLIST+1,REPERR01       SET UP NO RELACE OPT. MESSAGE
         LA    R2,PRCSSEND              RETURN ADDRESS
         B     MSGWRTN                  WRITE MESSAGE WITH NAME
VERFRET  DS    0H
         BR    R9                       RETURN
         TITLE 'ALIAS TABLE BUILD ROUTINE'
*
*         THE FOLLOWING WILL BUILD A TABLE OF TTR'S AND ALIAS NAMES
*    FOR ALL ALIASES IN THE DIRECTORY. MAX WAS INCREASED FROM ORIG.   $
*    500 TO 601 AND LOGIC CHANGED TO USE GETMAIN FOR TABLE IN APR. 86 $
*    AND INCREASED TO 2000 FOR MVS/ESA(OS390) MAR 97                  $
*
*    FORMAT OF TABLE:    BYTES  1 -  3  TTR OF MAIN MEMBER NAME
*                        BYTES  4 - 11  ALIAS NAME
*
ALIASSTR DS    0H
         CLOSE (DDCB)
         L     R3,INBEGIN                START OF TABLE
         MVC   DDCB+40(8),2(R3)         DDNAME OF DATA SET
         MVC   DDCB+33(3),AEODAD+1      END OF DIRECTORY EXIT
         LM    R0,R1,TABLEN             PICK UP NO. OF ENTRIES IN     $
*                                       THE ALIAS TABLE AND THE ADD.  $
*                                       OF WORK AREA TO HOLD THE TAB. $
         LTR   R1,R1                    DO WE ALREADY HAVE WORK AREA  $
         BC    7,TABPOINT               YES - CONTINUE                $
         SLL   R0,4                     CALCULATE THE SIZE OF TABLE   $
*                                       BY MULT. NO. OF ENTRIES X 16  $
         GETMAIN R,LV=(R0)              OBTAIN A WORK AREA            $
         ST    R1,ATABS                 SAVE BEGINNING OF TABLE       $
         ST    R1,TABEND                SAVE END OF TABLE             $
         ST    R1,TABADD                SAVE ADDRESS OF TABLE         $
         AR    R1,R0                    POINT TO END OF TABLE         $
         SH    R1,=H'16'                BACK OFF ONE ENTRY            $
         ST    R1,ALEND                 SAVE POINTER TO LAST ENTRY    $
         SRL   R0,4                     RESTORE NO. OF ENTRIES        $
         ST    R0,TABLEN                SAVE NO. OF ENTRIES           $
TABPOINT EQU   *                                                      $
         L     R4,TABADD                POINT R4 TO TABLE             $
         MVI   0(R4),X'FF'              RESET 1ST TABLE ENTRY TO X'FF'
         MVC   1(15,R4),0(R4)
         ST    R4,TABEND
         MVI   JOBSW+1,X'00'            SET UP TO PUNCH JOB CARD
*                                       IF GENERATE FUNCTION
*
         OPEN  (DDCB)
         TM    DDCB+48,X'10'            OPEN SUCESSFUL?
         BNO   ALIASER1                 NO - ERROR SITUATION
         LR    R6,R5                    R5=R6 WILL FORCE A READ
ALIASBLD DS    0H
         BAL   R9,DREAD                 DO READ IF REQUIRED.
         TM    11(R6),X'80'             ALIAS?
         BZ    DIRINCR                  NO - GET NEXT ENTRY
         MVC   ALENTRY(3),8(R6)         TTR
         MVC   ALENTRY+3(8),0(R6)       ALIAS NAME
         LA    R4,ALENTRY               ADDRESS OF ENTRY FOR TABLE
         LM    R1,R2,ATABS              SET UP SEARCH TABLE
         BINSRCH ARG=(R4),FOUND=ALIASER2,BUILD=YES,AEND=ALEND,         X
               ARGLTH=11,ENTLTH=16,FULL=ALIASER3,                      X
               TBEG=(R1),TEND=(R2),TMID=(R3)
         MVC   0(11,R3),ALENTRY         PUT ENTRY INTO TABLE
DIRINCR  DS    0H
         LA    R6,11(R6)                BUMP PAST CONSTANTS
         SR    R4,R4                    ZERO R4
         NI    0(R6),X'1F'              TURN OFF UNWANTED BITS
         IC    R4,0(R6)                 GET LENGTH
         SLA   R4,1                     * 2 = # OF BYTES
         LA    R6,1(R4,R6)              BUMP PAST USER DATA
         B     ALIASBLD                 CHECK NEXT ENTRY
DREAD    DS    0H
         CR    R6,R5                    END OF BLOCK
         BNL   DIRDR                    YES - GET NEW BLOCK
DIREND   DS    0H
         CLC   0(8,R6),FFF              END OF DIRECTORY
         BE    ALIASRET                 RETURN TO MAINLINE
         BR    R9                       RETURN TO BUILD
DIRDR    DS    0H
         READ  RDECB,SF,DDCB,DBLOCK
         CHECK RDECB
         SR    R5,R5                    ZERO R5
         AH    R5,DBLOCK                LENGTH OF BLOCK
         LA    R6,DBLOCK                START OF BLOCK
         AR    R5,R6                    END OF BLOCK
         LA    R6,2(R6)                 START OF FIRST ENTRY
         B     DIREND                   CHECK OUT THE ENTRY
ALIASER1 DS    0H
         L     R3,INBEGIN               START OF TABLE
         MVC   DDNMFLD(8),2(R3)         PLACE DDNAME IN MESSAGE
         B     DIRERR1                  GO WRITE MESSAGE
ALIASER2 DS    0H
         L     R3,INBEGIN               START OF TABLE
         MVC   DDNMFLD(8),2(R3)         SET UP DDNAME FOR MESSAGE
         MVI   MSGLIST+1,DIRERR01       INDICATE MSG TO WRITE
         MVI   DDNMDISP,0               DDNAME GOES AT +0
         $SETRC 8                      SET RETURN CODE TO 8
         LA    R2,BEGINLNK              SET UP RETURN ADDRESS
         B     MSGWRTD                  WRITE MESSAGE WITH DDNAME
ALIASER3 DS    0H
         MVI   MSGLIST,LASTMSG          SHOW LAST MESSAGE             $
         MVI   MSGLIST+1,ATABFULL       SET UP MESSAGE TO WRITE
         $SETRC 8                      SET RETURN CODE TO 8
         LA    R2,BEGINLNK              SET RETURN ADDRESS
         B     MSGWRT                   WRITE MESSAGE - NO PARMS
ALIASRET DS    0H
         CLOSE (DDCB,REREAD),TYPE=T
         BR    R7                       RETURN TO MAINLINE
         TITLE 'MEMBER SELECT VERIFICATION ROUTINE'
*
*         THE FOLLOWING CHECKS TO SEE IF THE SELECTED MEMBER FROM THE
*    DIRECTORY MUST BE RELINKED.
*         IF THERE ARE NO SELECTS OR EXCLUDES, ALL MUST BE RELINKED.
*
*         IF THERE ARE SELECTS, ONLY THOSE SELECTED MUST BE RELINKED.
*
*         IF THERE ARE EXCLUDES, ALL BUT THOSE EXCLUDED MUST BE
*    RELINKED.
*
LNKREQ   DS    0H
         LH    R4,COUNT                 # ENTRIES IN SETAB
         CH    R4,=H'0'                 NO ENTRIES = FULL LINK
         L     R2,INBEGIN               START OF TABLE
         BE    TSTRPLC                  BRANCH IF FULL LINK
         LH    R4,ENCT                  # OF EXCLUDE ENTRIES
         CH    R4,=H'0'                 IS IT EXCLUSIVE LINK
         L     R4,SEBEGIN               POINT TO FIRST ENTRY IN TABLE
         BNE   SELVCPY                  NO - IT IS SELECTIVE LINK
EXCLCPY  DS    0H
         CLC   2(8,R4),MEMNAME          IS IT TO BE EXCLUDED
         BE    BLNKNME                  YES - BLANK IT OUT
         LA    R4,10(R4)                BUMP UP TO NEXT ENTRY
         C     R4,SESTOP                END OF TABLE
         BNL   TSTRPLC                  YES - RELINK MEMBER
         B     EXCLCPY                  CHECK NEXT ENTRY
SELVCPY  DS    0H
         LR    R2,R4
         CLC   2(8,R4),MEMNAME          IS IT TO BE SELECTED
         BE    TSTRPLC                  YES - RETURN
         LA    R4,10(R4)                BUMP UP TO NEXT ENTRY
         C     R4,SESTOP                END OF TABLE
         BNL   BLNKNME                  YES - DO NOT LINK MEMBER
         B     SELVCPY                  CHECK NEXT ENTRY
TSTRPLC  DS    0H
         OI    0(R2),SEBIT5             SHOW MEMBER FOUND ON INPUT DS.
         MVI   REPLACE,X'00'            INIT TO 0
         TM    0(R2),REPLACOP           REPLACE?
         BO    REPLCON                  YES
         L     R2,INBEGIN               START OF INDD TABLE
         TM    0(R2),REPLACOP           REPLACE?
         BNO   LNKREQRT                 NO
REPLCON  DS    0H
         MVI   REPLACE,X'FF'            YES
         BR    R9                       RETURN
BLNKNME  DS    0H
         MVC   MEMNAME(8),BLNK8         BLANK OUT NAME
LNKREQRT DS    0H
         BR    R9                       RETURN
         TITLE 'ENTRY POINT DETERMINATION ROUTINE'
*
*         THE FOLLOWING WILL GET THE CSECT NAME OF THE ENTRY POINT FOR
*    THE MAIN MEMBER AND BUILD OVERLAY TABLES IF REQUIRED.
*
CESDSTRT DS    0H
         LA    R4,ZZRELCOM              PTR TO COMM AREA
         MVC   WKA1(8),MEMNAME          MOVE MEMBER NAME TO COMM AREA
         MVC   WKA1+8(1),OVLYSW         OVERLAY SW
         MVC   WKA1+9(3),EPADDR         ENTRY POINT ADDRESS
         MVC   WKA1+12(4),ADDRMAIN      MAIN MEMBER ADDRESS
         LA    R1,4                     CODE 4 - REQ TO BUILD TABLES
         L     R15,=V(ZZROVBLD)         PTR TO ROUTINE
         BALR  R14,R15                  DO PROCESS
         LTR   R15,R15                  TEST RETURN CODE
         BNZ   MEMINCR                  PROCESS FAILED
         MVC   CSCTNAME(8),WKA1         SAVE CSECT NAME
         TM    OVLYSW,X'FF'             OVERLAY MODULE?
         BZ    CESDRET                  NO - CSECT NAME ONLY RETRIEVED
         MVC   SEGBFBEG(4),WKA1+8       START OF SEGTAB
         MVC   SEGUSED(4),WKA1+12       END OF SEGTAB
         MVC   CESDADR(4),WKA1+16       START OF CESD TABLE
         MVC   CESDUSED(4),WKA1+20      END OF CESD TABLE
CESDRET  DS    0H
         BR    R9                       RETURN TO CALLER
         TITLE 'LINKAGE EDITOR CONTROL CARD BUILD ROUTINE'
*
*         THE FOLLOWING WRITES TO SYSUT2 THE CONTROL CARDS REQUIRED
*    FOR LINK EDITING; WHEN THE FUNCTION IS PUNCH, IT WRITES IT OUT TO
*    SYSPUNCH
CONTGEN  DS    0H
         ST    R4,SVREG4                SAVE R4
         L     R9,INBEGIN               R9 = PTR TO INPUT DDNAME TBL
         MVC   INDCB+40(8),OUTNAME      SET UP DDNAME FOR RDJFCB
         RDJFCB (INDCB)                 READ THE JOB FILE CONTROL  BLK
*
         CLC    JFCB(11),=C'SYS1.SVCLIB' IS THIS SVCLIB
         BNE    NOTSVCS                  BRANCH IF NOT SYS1.SVCLIB
         MVI    SVCLIB,X'FF'             SHOW SVCLIB WAS ALTERED
         MVC    SVCDDNM(8),OUTNAME       SAVE PTR TO SVCLIB
NOTSVCS  DS     0H
         CLI   LESWCH,X'FF'             INVOKE LINKAGE EDITOR?
         BE    USEUT2                   YES - USE SYSUT2
         LA    R9,SYSPUNCH              NO - USE SYSPUNCH
         B     DDSETUP                  DD SET UP
USEUT2   DS    0H
         LA    R9,SYSUT2                USE SYSUT2
DDSETUP  DS    0H
         CLC   JFCB(13),=C'SYS1.NUCLEUS ' IS THIS THE NUCLEUS
         BNE   NOTNUC                   BRANCH IF NOT NUCLEUS D.S.
         MVC   CNTCRD,CNTCRD-1          CLEAR WORK AREA
         MVC   CNTCRD+20(L'NUCINS01),NUCINS01
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              'INSERT IEAANIP0'
         MVC   CNTCRD+20(L'NUCINS02),NUCINS02
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              'INSERT IEAQFX00'
         MVC   CNTCRD+20(L'NUCINS03),NUCINS03
         BAL   R1,NUMCARD               NUMBER THIS CARD
         MVI   CNTCRD+34,C' '           CLEAR EXTANEOUS BLANK
         PUT   (R9),CNTCRD              'INSERT DOSBLKS'
         MVC   CNTCRD+20(L'NUCINS04),NUCINS04
         MVI   CNTCRD+33,C' '           CLEAR EXTRANEOUS CHAR
         PUT   (R9),CNTCRD              'INSERT IGFCCH'
         B     ALCHECK                  NO ENTRY CARD FOR NUCLEUS
NOTNUC   DS    0H
         CLC   CSCTNAME,=C'$PRIVATE'    DO WE BYPASS ENTRY CARD       $
         BE    ALCHECK                  YES                           $
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD+15(5),=C'ENTRY'   MOVE IN ENTRY
         MVC   CNTCRD+25(8),CSCTNAME    MOVE IN ENTRY POINT NAME
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              WRITE OUT RECORD
ALCHECK  DS    0H
         LA    R14,PARMLOOP             SET UP FOUND ADDRESS
         LA    R15,PARMEND              SET UP NO ALIAS EXIT
ALSCAN   DS    0H
         CLC   ATABS,TABEND             ANY ALIASES?
         BE    0(0,R15)                 NO
         LM    R1,R2,ATABS              ADDR OF START AND END OF TABLE
         LA    R4,ADDRMAIN              SEARCH ARGUMENT
         BINSRCH ARG=(R4),FOUND=PARMFND,BUILD=NO,AEND=ALEND,           X
               ARGLTH=3,ENTLTH=16,TBEG=(R1),TEND=(R2),TMID=(R3)
         BR    R15                      GO TO NO ALIAS EXIT
PARMFND  DS    0H
PARMPOSL DS    0H
         C     R1,TABEND                LAST ENTRY IN TABLE
         BE    PARMPOSE                 YES - R1 IS POSITIONED
         CLC   0(3,R1),16(R1)           CURR ENTRY = NEXT ENTRY
         BNE   PARMPOSE                 R1 PTS TO LAST ENTRY FOR MEM
         AH    R1,=H'16'                POS TO NEXT ENTRY
         B     PARMPOSL                 CHECK THIS ENTRY
PARMPOSE DS    0H
         LR    R3,R1                    R3 PTS TO LAST ENTRY FOR MEM
         BR    R14                      EXIT TO CALLER WITH ALIAS PTR
PARMLOOP DS    0H
*    POSITION R3 SO THAT IT POINTS TO THE LAST ALIAS OF THE GROUP FOR
*    THE MEMBER WE ARE PROCESSING. ALL THE ALIASES FOR A MEMBER ARE
*    GROUPED TOGETHER, AND AFTER THE BINARY SEARCH, R3 COULD POINT TO
*    TO THE START, MIDDLE, OR END OF THE GROUP. THE PRECEDING WILL
*    ENSURE THAT R3 IS ALWAYS POINTING TO THE END OF THE GROUP AND
*    THEREFORE ALLOWS THE ALIASES TO BE SELECTED FROM BOTTOM OF ARRAY
*    TO START OF ARRAY.
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD+10(5),=C'ALIAS'   MOVE IN ALIAS
         MVC   CNTCRD+20(8),3(R3)       MOVE IN ALIAS NAME
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              WRITE OUT RECORD
         C     R3,ATABS                 FIRST ENTRY IN TABLE?
         BNH   PARMEND                  YES - GET OUT
         SH    R3,=H'16'                DECREMENT TO NEXT ENTRY
         CLC   0(3,R3),16(R3)           IS NEXT ENTRY EQUAL TO CURRENT
         BE    PARMLOOP                 YES - PUT THIS ALIAS OUT
PARMEND  DS    0H
         CLI   SETSSISW,X'FF'           DOES MOD HAVE SETSSI INFO     $
         BNE   GENINCCD                 NO                            $
         L     R3,SETSSIBI                                            $
         LA    R4,SETSSIDP                                            $
         LA    R1,8                                                   $
CONHEX   EQU   *                                                      $
         XR    R2,R2                    LOOP                          $
         SLDL  R2,4                       THRU                        $
         IC    R0,TRTAB(R2)                 CHANGING                  $
         STC   R0,0(R4)                       SSI FROM                $
         LA    R4,1(R4)                         HEXADECIMAL           $
         BCT   R1,CONHEX                          TO ZONED            $
         MVC   CNTCRD,CNTCRD-1          PUT OUT                       $
         MVC   CNTCRD+8(6),=C'SETSSI'     SETSSI TO                   $
         MVC   CNTCRD+18(8),SETSSIDP        CONTROL CARD              $
         BAL   R1,NUMCARD               NUMBER THIS CARD              $
         PUT   (R9),CNTCRD              WRITE OUT RECORD              $
         MVI   SETSSISW,X'00'           RESET SW                      $
GENINCCD EQU   *                                                      $
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD+5(7),=C'INCLUDE'  MOVE IN INCLUDE
         L     R3,INBEGIN               START OF TABLE
         MVC   CNTCRD+15(8),2(R3)       MOVE IN DDNAME
         LA    R2,CNTCRD+16             OFFSET OF DDNAME
PRMLP1   DS    0H
         CLI   0(R2),C' '               IS IT BLANK
         BE    FNDBLK1                  YES
         LA    R2,1(R2)                 BUMP UP ADDRESS
         B     PRMLP1                   REPEAT
FNDBLK1  DS    0H
         MVI   0(R2),C'('               MOVE IN LEFT PAREN
         LA    R2,1(R2)                 BUMP UP ADDRESS
         MVC   0(8,R2),MEMNAME          MOVE IN MEMBER NAME
PRMLP2   DS    0H
         CLI   0(R2),C' '               IS IT BLANK
         BE    FNDBLK2                  YES
         LA    R2,1(R2)                 BUMP UP ADDRESS
         B     PRMLP2                   REPEAT
FNDBLK2  DS    0H
         MVI   0(R2),C')'               MOVE IN RIGHT PAREN
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              WRITE OUT RECORD
         TM    OVLYSW,X'FF'             OVERLAY PRESENT?
         BZ    PSTOVLY                  NO - DO NOT GEN OVERLAY CARDS
         ST    R9,ADCRDOUT              ST ADDR OF CARD OUT DCB
         LA    R1,CARDNUM               PTR TO CARD # COUNTER
         ST    R1,ADCARNUM              ST THE ADDRESS
         LA    R1,SEGBFBEG              R1 POINTS TO PARMS
         L     R15,=V(ZZROVCRD)         R15 -> CARD GENERATOR
         BALR  R14,R15                  DO THE PROCESS
PSTOVLY  DS    0H
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD+1(4),=C'NAME'     MOVE IN NAME
         MVC   CNTCRD+10(8),MEMNAME     MOVE IN MEMBER NAME
         CLI   REPLACE,X'FF'            IS REPLACE OPTION REQ
         BNE   DONTREP                  NO - PUT OUT RECORD
         LA    R2,CNTCRD+10             OFFSET OF NAME
PRMLP3   DS    0H
         CLI   0(R2),C' '               IS IT BLANK
         BE    FNDBLK3                  YES
         LA    R2,1(R2)                 BUMP UP ADDRESS
         B     PRMLP3                   REPEAT
FNDBLK3  DS    0H
         MVC   0(3,R2),=C'(R)'          MOVE IN REPLACE OPTION
DONTREP  DS    0H
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   (R9),CNTCRD              WRITE OUT RECORD
         L     R4,SVREG4                RESTORE R4
         BR    R4                       RETURN
         TITLE 'LINKAGE EDITOR PARAMETER GENERATION ROUTINE'
*
*         THE FOLLOWING GENERATES THE PARAMETERS REQUIRED FOR THIS
*    LINKAGE EDIT.
*
PARMGEN  DS    0H
*
*   THE FOLLOWING CODE TESTS TO SEE IF THE MEMBER HAS THE SAME
*   ATTRIBUTES AS THE PRECEEDING ONE, IF IT DOES, A LINK IS NOT
*   DONE NOW. IF THE ATTRIBUTES ARE DIFFERENT, A LINK IS DONE AND
*   THE ATTRIBUTES ARE RECALCULATED.
*
         NI    ATTRIB,255-BIT6          TURN OFF UNWANTED BITS        $
         NI    ATTRIB+1,255-BIT1-BIT2-BIT3-BIT5-BIT6
         CLI   ALLSET,X'00'             VALUES SET UP ?
         BE    ATTR1                    NO - SET THEM UP
         CLC   ATTRIB(3),PRVATTRB       IS ATTRB = PREV ATTRB         $
         BE    PARMRET                  YES - RETURN
         CLI   LESWCH,X'FF'             L E REQUIRED
         BNE   PSTCLS2                  NO - PUCH CARDS
         CLOSE (SYSUT2)
         BAL   R14,ENQOUT               ENQ THE FILE TO BE LINKED TO  $
         LINK  EP=IEWL,PARAM=(OPLISTL,DDNMLST),VL=1
         MVI   LEUSED,X'FF'             SHOW THAT LINK-EDIT WAS USED  $
         BAL   R14,DEQOUT               DEQ THE FILE LINKED TO        $
         B     RESET                    SET UP NEW PARAMETERS
PSTCLS2  DS    0H
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(2),=C'/*'         DELIMITER
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH CARD
*
RESET    DS    0H
         MVI   ALLSET,X'00'             TURN SET-UP SW = OFF
ATTR1    DS    0H
         LA    R3,OPLISTV+18            ADDR OF STRING
         TM    SZPRMSW,X'FF'            SIZE PARM PRES?
         BZ    ATTR2                    NO - CHECK NEXT ATTRIBUTE
         MVC   0(1,R3),=C','            MOVE A COMMA INTO STRING
         LA    R3,1(R3)                 BUMP UP LENGTH
         LH    R4,SZPRMLTH              GET PARM LENGTH
         BCTR  R4,0                     DECR FOR EXEC
         EX    R4,MOVE2                 INSERT INTO STRING
         AH    R3,SZPRMLTH              BUMP UP LENGTH
ATTR2    DS    0H
         LA    R4,OPLISTV               SAVE LENGTH                   $
         LR    R2,R3                      OF BASIC PARMS              $
         SR    R2,R4                        FOR PUNCHING OF           $
         STH   R2,BLEPARML                    LE CONTROL CARDS        $
         TM    ATTRIB,X'20'             OVERLAY PRESENT?
         BZ    ATTR3                    NO - CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',OVLY'        MOVE IN OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR3    DS    0H
         TM    ATTRIB,X'80'             IS IT REENTERABLE
         BZ    ATTR4                    NO CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',RENT'        MOVE IN OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR4    DS    0H
         TM    ATTRIB,X'40'             IS IT REUSABLE
         BZ    ATTR5                    NO CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',REUS'        MOVE OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR5    DS    0H
         TM    ATTRIB+1,X'01'           IS IT REFRESHABLE
         BZ    ATTR6                    NO CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',REFR'        MOVE IN OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR6    DS    0H
         TM    ATTRIB,X'08'             IS IT ONLY LOADABLE
         BZ    ATTR7                    NO CHECK NEXT ATTRIBUTE
         MVC   0(3,R3),=C',OL'          MOVE IN OPTION
         LA    R3,3(R3)                 BUMP UP LENGTH
ATTR7    DS    0H
         TM    ATTRIB,X'04'             IS IT SCATTER FORMAT
         BZ    ATTR8                    NO CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',SCTR'        MOVE IN OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR8    DS    0H
         TM    ATTRIB,X'10'             IS IT TESTRAN
         BZ    ATTR9                    NO CHECK NEXT ATTRIBUTE
         MVC   0(5,R3),=C',TEST'        MOVE IN OPTION
         LA    R3,5(R3)                 BUMP UP LENGTH
ATTR9    DS    0H
         TM    ATTRIB+1,X'80'           IS IT DOWNWARD COMPATIBLE
         BO    ATTR10                   NO CHECK NEXT ATTRIBUTE       $
         MVC   0(3,R3),=C',DC'          MOVE IN OPTION
         LA    R3,3(R3)                 BUMP UP LENGTH
ATTR10   EQU   *                                                      $
         TM    ATTRIB,X'01'             IS IT AUTHORIZED              $
         BZ    ATTR11                   NO CHECK NEXT ATTRIBUTE       $
         MVC   0(5,R3),=C',AC=1'        MOVE IN OPTION                $
         LA    R3,5(R3)                 BUMP UP LENGTH                $
ATTR11   EQU   *                                                      $
         CLI   ATTRIB+2,X'00'           ANY AMODE/RMODE INFO          $
         BZ    ENDATTRB                 NO - END OF ATTRIBUTES        $
         TM    ATTRIB+2,X'03'           ANY AMODE IN MAIN EP          $
         BZ    ATTR11B                  NO - CHECK ALIAS/ALT EP       $
ATTR11MP EQU   *                                                      $
         BO    *+18                                                   $
         MVC   0(9,R3),=C',AMODE=31'    MOVE IN OPTION                $
         LA    R3,9(R3)                   PARM AMODE=31               $
         B     ATTR12                                                 $
         MVC   0(10,R3),=C',AMODE=ANY'  MOVE IN OPTION                $
         LA    R3,10(R3)                  PARM AMODE=ANY              $
         B     ATTR12                                                 $
ATTR11B  EQU   *                                                      $
         TM    ATTRIB+2,X'C0'           ANY AMODE IN ALIAS/ALT EP     $
         BZ    ATTR12                   NO CHECK NEXT ATTRIBUTE       $
         B     ATTR11MP                                               $
ATTR12   EQU   *                                                      $
         TM    ATTRIB+2,X'10'           ANY RMODE INFO                $
         BZ    ENDATTRB                 NO - END OF ATTRIBUTES        $
         MVC   0(10,R3),=C',RMODE=ANY'  MOVE IN RMODE OPTION          $
         LA    R3,10(R3)                                              $
ENDATTRB DS    0H
         LA    R4,OPLISTV
         SR    R3,R4
         STH   R3,OPLISTL               LENGTH OF PARAMETER STRING
         MVC   PRVATTRB(3),ATTRIB       SAVE ATTRIBUTES               $
PARMRET  DS    0H
         BR    R9                       RETURN
         TITLE 'LINKAGE EDITOR DDNAME LIST GENERATOR'
*
*         THE FOLLOWING GENERATES THE DDNAME LIST FOR THE LINKAGE
*    EDITOR WHEN REQUIRED.
*
GENDDLST DS    0H
         MVC   DDENTR3,OUTNAME          MOVE IN OUTDDNAME
         BR    R9                       RETURN
         TITLE 'JCL GENERATION ROUTINE - GENERATE FUNCTION ONLY'
*
*         THE FOLLOWING GENERATES THE JCL WHEN THE FUNCTION IS TO
*    PUNCH IT OUT.
*
JCLGENR  DS    0H
         CLI   ALLSET,X'FF'             JCL SET UP
         BE    JCLSET                   YES DONT DO AGAIN
*
JOBSW    NOP   NOJOB                    BRANCH IF NO JOB CARD TO PUNCH
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD AREA
         MVC   CNTCRD(L'JOBCARD),JOBCARD MOVE CARD TO PUNCH AREA
         AP    JOBNO,=P'1'              BUMP UP JOB NUMBER
         UNPK  CNTCRD+7(3),JOBNO        PLACE JOB NUMBER ON CARD
         OI    CNTCRD+9,X'F0'           ENSURE VALID SIGN
         BAL   R1,NUMCARD               GO NUMBER JCL CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH OUT JOB CARD
         MVI   JOBSW+1,X'F0'            SHOW JOB CARD ALREADY PUNCHED
NOJOB    DS    0H
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         AP    STEPNO,=P'1'             GET CURRENT STEP NUMBER
         UNPK  LEEXEC+6(3),STEPNO(2)    UNPACK INTO STEPNAME
         OI    LEEXEC+8,X'F0'           ENSURE VALID SIGN
         MVC   CNTCRD(L'LEEXEC),LEEXEC  SET UP L.E. EXEC CARD
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(L'BLEPARM),BLEPARM SET UP BASIC L.E. PARMS
         LH    R4,BLEPARML              LENGTH                        $
         BCTR  R4,0                     DECREMENT FOR EXECUTE
         EX    R4,MOVE1                 UPDATE STRING
         LA    R4,CNTCRD+10                                           $
         AH    R4,BLEPARML                                            $
         MVI   0(R4),C''''
         CLC   OPLISTL,BLEPARML         ADDITIONAL PARMS ?            $
         BE    *+8                      NO                            $
         MVI   1(R4),C','               YES - SHOW CONTINUATION       $
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
         CLC   OPLISTL,BLEPARML         ADDITIONAL PARMS ?            $
         BE    BYEXPARM                 NO                            $
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD                $
         MVC   CNTCRD(4),=C'// '''      BEGIN CONTINUATION CARD       $
         LH    R4,OPLISTL               GET LENGTH OF                 $
         SH    R4,BLEPARML                ADDITIONAL PARMS            $
         SH    R4,=H'2'                 REDUCE FOR COMMA AND MOVE     $
         LA    R3,OPLISTV               LOCATE ADDITIONAL             $
         AH    R3,BLEPARML                PARMS IN WHOLE LIST         $
         EX    R4,MOVE1B                MOVE ADDITIONAL PARMS         $
         LA    R3,CNTCRD+4                TO LINK EDIT PARMS ON       $
         AR    R3,R4                        CONTINUATION CARD AND     $
         MVC   1(2,R3),=C''')'                AND TERMINATE PARM LIST $
         BAL   R1,NUMCARD               NUMBER THIS CARD              $
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT                  $
BYEXPARM EQU   *                                                      $
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(L'LESYSOUT),LESYSOUT SET UP SYSPRINT DD CARD
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(L'LESYSUT1),LESYSUT1 SET UP SYSUT1 WORK FILE
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
* BYPASS UNIT LOOKUP FOR SYSUT1 DD CARD, TO ACTIVATE MAKE BRANCH A NOP
         B     BYUNIT
         LD    R2,OUTNAME               FPR2 = DDNAME
         BAL   R4,UNITGEN               DO UNIT LOOK-UP
         L     R4,UNITAB(R1)            GET PTR TO UNIT TEXT
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CONTROL CARD
         MVC   CNTCRD(24),0(R4)         MOVE IN UNIT TEXT
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH OUT THE CARD
BYUNIT   MVC   INDCB+40(8),OUTNAME      MOVE DDNAME TO DCB
         RDJFCB (INDCB)                 READ JFCB
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(L'LESYSLMD),LESYSLMD MOVE IN BASIC SYSLMOD DD
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         LD    R2,OUTNAME               FPR2 = DDNAME
         BAL   R4,UNITGEN               DO UNIT LOOK-UP
         L    R4,UNITAB(R1)             PTR TO UNIT TEXT
         MVC  CNTCRD(24),0(R4)          MOVE IN UNIT TEXT
         MVC  CNTCRD+24(9),=C',VOL=SER=' MOVE IN BASIC VOLUME TEXT
         LD   R2,OUTNAME                FLPR2 = DDNAME
         BAL  R4,VOLGEN                 DO VOLUME LOOK-UP
         MVC  CNTCRD+33(6),VOLUME       INSERT VOL ID
         MVI  CNTCRD+39,C','            CONTINUE INDICATION
         BAL  R1,NUMCARD                NUMBER THIS CARD
         PUT  SYSPUNCH,CNTCRD           PUT OUT CARD
         MVC  CNTCRD,CNTCRD-1           BLANK OUT CARD
         MVC  CNTCRD(L'LEDSNAME),LEDSNAME MOVE IN DSNAME PARAMETER
         MVC  CNTCRD+22(44),JFCB        INSERT DSN
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUT OUT CARD
         L     R3,INBEGIN               START OF TABLE
         MVC   INDCB+40(8),2(R3)        MOVE IN DDNAME TO DCB
         RDJFCB (INDCB)                 READ JFCB
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         L     R3,INBEGIN               START OF TABLE
         MVC   CNTCRD(L'LEINPUT),LEINPUT BASIC INPUT TEXT
         MVC   CNTCRD+2(8),2(R3)
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   DW,2(R3)                 MOVE TO DW BOUNDRY
         LD    R2,DW                    FLPR2 = DDNAME
         BAL   R4,UNITGEN               DO UNIT LOOK-UP
         L     R4,UNITAB(R1)            GET PTR TO UNIT TEXT
         MVC   CNTCRD(24),0(R4)         MOVE IN UNIT TEXT
         MVC   CNTCRD+24(9),=C',VOL=SER=' SET UP BASIC VOL TEXT
         MVC   DW,2(R3)                 MOVE TO DW BOUNDRY
         LD    R2,DW                    FLPR2 = DDNAME
         BAL   R4,VOLGEN                GET VOL ID
         MVC   CNTCRD+33(6),VOLUME      VOL ID
         MVI   CNTCRD+39,C','           CONTINUE INDICATION
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUT OUT CARD
         MVC   CNTCRD,CNTCRD-1          BLANK OUT CARD
         MVC   CNTCRD(L'LEDSNAME),LEDSNAME BASIC DSNAME TEXT
         MVC   CNTCRD+22(44),JFCB       DSNAME
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD         PUT OUT CARD
         MVC   CNTCRD,CNTCRD-1         BLANK OUT CARD
         MVC   CNTCRD(L'LESYSLIN),LESYSLIN MOVE IN SYSLIN DD
         BAL   R1,NUMCARD               NUMBER THIS CARD
         PUT   SYSPUNCH,CNTCRD          PUNCH IT OUT
JCLSET   DS    0H
         ST    R9,SVREG9                SAVE R9
         BAL   R4,CONTGEN               PUNCH OUT CONTROL CARDS
         L     R9,SVREG9                RESTORE R9
         MVI   ALLSET,X'FF'             TURN SET-UP SW = ON
         BR    R9                       RETURN
*
NUMCARD  DS    0H
         CLI   LESWCH,X'FF'             APPLICATION FUNCTION ?
         BE    0(0,R1)                  RETURN IF YES
         AP    CARDNUM,=P'10'           INCREMENT CARD NUMBER
         UNPK  CNTCRD+72(8),CARDNUM     NUMBER THE CARD
         OI    CNTCRD+79,X'F0'          ENSURE VALID CHARACTER
         BR    R1                       RETURN
         TITLE 'UNIT AND VOLUME DETERMINATION ROUTINE'
UNITGEN  DS    0H
         MVI   DDFND+1,X'F0'            SET BRANCH SWITCH
         B     TIOTSET                  ENTER TIOT LOOK-UP
VOLGEN   DS    0H
         MVI   DDFND+1,X'00'            INDIC VOL LOOK-UP REQ
TIOTSET  DS    0H
         L     R1,ADRTIOT               R1 PTS TO TIOT
         SR    R14,R14                  CLEAR LENGTH REG
TIOTLUP  DS    0H
         IC    R14,0(R1)                LENGTH OF ENTRY
         LTR   R14,R14                  END OF TIOT?
         BZ    TIOTER1                  NO MATCHING DD ENTRY
         MVC   DW,4(R1)                 MOVE TO BOUNDRY
         CD    R2,DW                    IS THIS THE REQ DD ENTRY
         BE    DDFND                    BRANCH IF YES
         LA    R1,0(R14,R1)             BUMP TO NEXT DD ENTRY
         B     TIOTLUP                  BRANCH TO TIOT LOOP
DDFND    DS    0H
         NOP   UNITLOOP                 BRANCH IF A UNIT GEN
         L     R1,16(R1)                R1 = PTR TO UCB
         TM    18(R1),X'20'             IS THIS A DASD DEVICE
         BZ    UCBER1                   NO - ERROR
         MVC   VOLUME(6),28(R1)         SET UP VOLUME
         BR    R4                       RETURN
UNITLOOP DS    0H
         L     R1,16(R1)                R1 = PTR TO UCB
         TM    18(R1),X'20'             DASD DEVICE?
         BZ    UCBER1                   NO - ERROR
         LR    R14,R1                   SAVE UCB PTR
         TM    19(R14),X'0F'            IS IT 3390                    $
         BNO   *+10                     NO                            $
         LA    R1,28                    YES - SET UP 3390             $
         BR    R4                       3390                          $
         LA    R1,4                     SET FOR 3330 FIRST
         TM    19(R14),X'09'            3330?
         BNO   *+16                     NO                            $
         TM    19(R14),X'04'            IS IT DUAL DENSITY            $
         BCR   8,R4                     NO - 3330                     $
         LA    R1,20                    YES - SET UP 3330-1           $
         BR    R4                       3330-1                        $
         TM    19(R14),X'0E'            IS IT 3380                    $
         BNO   *+10                     NO                            $
         LA    R1,24                    YES - SET UP 3380             $
         BR    R4                       3380                          $
         SR    R1,R1                    TRY FOR 2314
         TM    19(R14),X'08'            2314?
         BCR   1,R4                     YES - RETURN
         LA    R1,8                     TRY FOR 2301
         TM    19(R14),X'02'            2301?
         BCR   1,R4                     YES - RETURN
         LA    R1,12                    TRY FOR 2305
         TM    19(R14),X'06'            2305 M1 ?
         BCR   1,R4                     YES - RETURN
         TM    19(R14),X'07'            2305 M2 ?
         BCR   1,R4                     YES - RETURN
         LA    R1,16                    TRY FOR 2311
         TM    19(R14),X'01'            2311?
         BCR   1,R4                     YES - RETURN
         STD   R2,DDNMFLD               SET UP DDNAME
         MVI   DDNMDISP,18              DDNAME GOES AT +18
         MVI   MSGLIST+1,UNITER01       SET UP UNIT ERROR MESSAGE
         LA    R2,BEGINLNK              SET RETURN ADDRESS
         $SETRC 8                       SET RETURN CODE TO 8
         B     MSGWRTD                  WRITE MESSAGE WITH DDNAME
UCBER1   DS    0H
         MVI   MSGLIST+1,NOTDA         NOT DASD DEVICE
         LA    R2,BEGINLNK             SET RETURN ADDRESS
         $SETRC 8                       SET RETURN CODE TO 8
         B     MSGWRT                  WRITE ERROR MESSAGE
TIOTER1  DS    0H
         STD   R2,DDNMFLD              DD CARD MISSING
         $SETRC 8                     SET RETURN CODE TO 8
         LA    R2,BEGINLNK             SET RETURN ADDRESS
NODD     DS    0H
         MVI   DDNMDISP,0              DDNAME GOES AT +0
         MVI   MSGLIST+1,NODDCARD      SET UP DD CARD MISSING
         B     MSGWRTD                 WRITE MESSAGE WITH NAME
         TITLE 'I/O ERROR RECOVERY ROUTINES'
*
*        CONSTANTS AREA
*
MOVE1    MVC   CNTCRD+10(*-*),OPLISTV   MOVE IN STRING                $
*
MOVE1B   MVC   CNTCRD+4(*-*),1(R3)      MOVE IN STRING                $
*                                                                     $
MOVE2    MVC   0(*-*,R3),SZPARM         MOVE IN STRING
*
MOVE3    MVC   SZPARM(*-*),2(R1)        MOVE IN STRING
*
DDCBIOER DS    0H
         L     R3,INBEGIN               START OF TABLE
         MVC   DDNMFLD(8),2(R3)         MOVE DDNAME TO MSG AREA
DIRER2   DS    0H
         MVI   DDNMDISP,32              DDNAME GOES AT +32
         MVI   MSGLIST+1,DIRERR02       SHOW I/O ERROR ON DIRECTORY
         LA    R2,BEGINLNK              RETURN ADDRESS
         B     MSGWRTN                  WRITE MESSAGE WITH NAME
*
OUTIOER  DS    0H
         MVC   DDNMFLD(8),OUTNAME       SET NAME FOR MESSAGE
         B     DIRER2                   WRITE MESSAGE
         TITLE 'TERMINATION ROUTINE - END OF JOB AND CLEANUP'
*
*         THE FOLLOWING CONTROLS THE TERMINATION OF THIS UTILITY.
*    IT CLOSES FILES, RETURNS CONTROL TO THE OPER SYS ETC.
*
ZZRTERM  DS    0H
         TM    SYSUT3+48,BIT3           ANY COPIES TO DO
         BNO   NOCOPIES                 BRANCH IF NOT
         CLOSE (SYSUT3)                 CLOSE THE CONTROL DATA SET
*
         CLI   LESWCH,X'FF'             APPLICATION FUNCTION ?
         BNE   NOCOPIES                 BRANCH IF NOT
         LINK  EP=IEBCOPY,PARAM=(COPYOPTN,COPYDDNM),VL=1
*
NOCOPIES DS    0H
         CLI   SVCLIB,X'FF'             SCVLIB ALTERED
         BNE   NOIOSUP                  BRANCH IF NOT
*
*        ASK FOR OPERATOR VERIFICATION AND INVOKE IEHIOSUP
*
VERIOSUP DS    0H
         XC    RECB,RECB                CLEAR REPLY ECB
         WTOR  'ACTION 0571 - VERIFY REQUEST TO PERFORM IEHIOSUP ON ''SX
               YS1.SVCLIB''',REPLY,1,RECB,ROUTCDE=1,DESC=2
         WAIT  ECB=RECB                 WAIT FOR REPLY
         OI    REPLY,C' '               ENSURE UPPER CASE REPLY
         CLI   REPLY,C'T'               REPLY = 'TERMINATE'
         BE    NOIOSUP                  BRANCH IF YES
         CLI   REPLY,C'U'               OK TO GO AHEAD
         BE    IOSPLINK                 BRANCH IF YES
         WTO   'ACTION 0008 - REPLY NOT VERIFIED',ROUTCDE=1,DESC=2
         B     VERIOSUP                 GO ASK AGAIN
IOSPLINK DS    0H
         TM    OUTDCB+48,BIT3           IS DCB OPEN
         BNO   IOSPOPEN                 BRANCH IF NOT
         CLOSE (OUTDCB)
IOSPOPEN DS    0H
         MVC   OUTDCB+40(8),SVCDDNM     SET UP FOR BLDL
         MVC   IOSPDD(8),SVCDDNM        SET UP FOR IOSUP
         OPEN  (OUTDCB)                 OPEN DCB TO SVCLIB
         MVC   BLDLIST+4(8),=C'IGC0009I' TEST FOR SVC 99 ON SYSTEM
         BLDL  OUTDCB,BLDLIST           GO TO BLDL ROUTINE
         LTR   R15,R15                  TEST TO SEE IF SVC 99 FOUND
         BNZ   NOTSOSYS                 BRANCH IF NOT FOUND
         MVI   IOSUPARM+1,3             SHOW PARM=TSO PRESENT
NOTSOSYS DS    0H
         LINK  EP=IEHIOSUP,PARAM=(IOSUPARM,IOSPDDNM),VL=1
*
NOIOSUP  DS    0H
         CLOSE (PRTDCB)
         CLOSE (CARDCB)
         CLOSE (SYSPUNCH)
         LM    R0,R1,TABLEN             PICK UP NO. OF ENTRIES IN     $
*                                       THE ALIAS TABLE AND THE ADD.  $
*                                       OF WORK AREA TO HOLD THE TAB. $
         LTR   R1,R1                    DID WE OBTAIN A WORK AREA     $
         BC    8,RETURN                 NO - CONTINUE                 $
         SLL   R0,4                     CALCULATE THE SIZE OF TABLE   $
*                                       BY MULT. NO. OF ENTRIES X 16  $
         FREEMAIN R,LV=(R0),A=(R1)      FREE WORK AREA                $
         XR    R1,R1                    CLEAR POINTER                 $
         ST    R1,TABADD                  TO TABLE AREA               $
RETURN   EQU   *                                                      $
         L     R13,4(R13)
         CLI   LEUSED,X'FF'             WAS LINK-EDIT USED THIS RUN   $
         BE    *+12                     YES                           $
         LA    R15,20                   NO - SHOW A 20 RC             $
         B     *+10
         XR    R15,R15                  CLEAR R15
         IC    R15,RC                   SET RETURN CODE
         RETURN (14,12),RC=(15)
         TITLE 'INTERFACES TO MESSAGE WRITING ROUTINE'
MSGWRTD  DS    0H
         MVI   MSGLIST,PBIT+LASTMSG     SHOW PARM PRESENT & LAST MSG
         MVI   PARAMS,DDNM              SHOW DDNAME PRESENT
         B     MSGWRT                   GO WRITE MESSAGE
*
MSGWRTN  DS    0H
         MVI   MSGLIST,PBIT+LASTMSG     SHOW LAST MSG AND PARMS
         MVI   PARAMS,NAME              SHOW NAME PARM PRESENT
*
MSGWRT   DS    0H
         LA    R4,ZZRELCOM             RESET PTR TO COMMUNICATION AREA
         L     R15,VZZRLMES             GET PTR TO MESSAGE WRITER
         BALR  R14,R15                  GO WRITE MESSAGE
         BR    R2                       EXIT TO SUPPLIED RETURN POINT
         TITLE 'ROUTINE TO VERIFY PRESENCE OF INDD AND OUTDD CARDS'
*
*         THE FOLLOWING LOKS THROUGH THE TIOT TO SEE IF
*     DDCARDS ARE PRESENT FOR THE INDD DATASET AND THE OUTDD DATASET.
*
DDSRCH   DS    0H
         MVI   INDDPR,X'00'             INIT SWITCH TO ZERO
         MVI   OUTDDPR,X'00'            INIT SWITCH TO ZERO
         L     R1,ADRTIOT               R1 -> TIOT
         L     R3,INBEGIN               R3 -> INDD TABLE
SRCHLOOP DS    0H
         SR    R14,R14                  INIT R14 TO ZERO
         IC    R14,0(R1)                LENGTH OF ENTRY
         LTR   R14,R14                  ENTRY PRESENT?
         BZ    SRCHEND                  END OF TIOT
         CLC   OUTNAME(8),4(R1)         OUTNAME MATCH?
         BNE   TESTINDD                 NO - CHECK INDD
         MVI   OUTDDPR,X'FF'            SHOW OUT DD PRESENT
         B     SRCHINCR                 INCREMENT TO NEXT TIOT ENTRY
TESTINDD DS    0H
         CLC   2(8,R3),4(R1)            INNAME MATCH?
         BNE   SRCHINCR                 NO MATCH
         MVI   INDDPR,X'FF'             SHOW IN DD PRESENT
SRCHINCR DS    0H
         LA    R1,0(R14,R1)             BUMP UP TO NEXT ENTRY
         B     SRCHLOOP                 PROCESS NEXT ENTRY
SRCHEND  DS    0H
         TM    INDDPR,X'FF'             WAS IN DD PRESENT?
         BZ    NOINDDPR                 NO - ERROR
         TM    OUTDDPR,X'FF'            WAS OUT DD PRESENT?
         BZ    NOOUTDD                  NO - ERROR
         BR    R9                       RETURN - ALL PRESENT
NOINDDPR DS    0H
         MVC   DDNMFLD(8),2(R3)         STORE DD NAME FOR MSG
SETDDRET DS    0H
         LA    R2,BEGINLNK              SET THE RETURN ADDRESS
         $SETRC 8                       SET THE RETURN CODE TO 8
         B     NODD                     WRITE DD MISSING MSG
NOOUTDD  DS    0H
         MVC   DDNMFLD(8),OUTNAME       DD NAME FOR MSG
         B     SETDDRET                 SET RETURN ADDRESS
         TITLE 'DATA AREAS AND CONSTANTS'
*                                                                     $
*         THE FOLLOWING ENQUES AND DEQUEUES THE SYSLMOD TYPE DATA     $
*     SET (THE DATA SET TO BE LINKED TO) WITH A QNANE AND RNANE       $
*     COMPATABLE WITH SHARDISK AND THE PROGS. OF THE CAP SYSTEM.      $
*                                                                     $
ENQOUT   EQU   *                                                      $
         ST    R14,SVREG14              SAVE RETURN REG               $
         ENQ   (QENQOUT,RENQOUT,E,,SYSTEM)   ENQ FILE                 $
         B     ENQDEQRT                                               $
DEQOUT   EQU   *                                                      $
         ST    R14,SVREG14              SAVE RETURN REG               $
         DEQ   (QENQOUT,RENQOUT,,SYSTEM)     DEQ FILE                 $
ENQDEQRT EQU   *                                                      $
         L     R14,SVREG14              RESTORE RETURN REG            $
         BR    R14                      RETURN                        $
         EJECT                                                        $
*
*         THE FOLLOWING DEFINES THE AREAS OF STORAGE REQUIRED
*    IN THIS ROUTINE.
*
FFF      DC    8X'FF'                   8 BYTES OF 'FF'
ATTRIB   DS    CL3                      ATTRIBUTES OF MEMBER          $
PRVATTRB DC    XL3'00'                  SAVE ATTRB AREA               $
*       ATTRIBUTE BIT DEFINITIONS                                     $
*   BYTE 1         BYTE 2         BYTE 3                              $
*  80  RENT       80  DC         80  UNUSED                           $
*  40  REUS       40  UNUSED     40  UNUSED                           $
*  20  OVLY       20  UNUSED     20  UNUSED                           $
*  10  TEST       10  UNUSED     10  RMODE=ANY                        $
*  08  OL         08  NOT LE     08  AMODE=31(TRUE ALIAS OR ALT EP)   $
*  04  SCTR       04  UNUSED     0C  AMODE=ANY(TRUE ALIAS OR ALT EP)  $
*  02  PAGE ALIGN 02  UNUSED     02  AMODE=31(MAIN EP)                $
*  01  AC=1       01  REFR       03  AMODE=ANY(MAIN EP)               $
EPADDR   DS    CL3                      ENTRY POINT OF MEMBER
DW       DC    D'0'
ADDRMAIN DC    F'0'
MEMNAME  DS    CL8                      MEMBER NAME
SVCDDNM  DS    CL8                      SVCLIB DD NAME
CSCTNAME DS    CL8                      MAIN ENTRY CSECT NAME
SETSSIBI DS    F                        SETSSI BINARY                 $
SETSSIDP DS    D                        SETSSI DISPLAY                $
TRTAB    DC    CL16'0123456789ABCDEF'                                 $
BLNK8    DC    CL8' '                   FIELD OF BLANKS
DBLOCK   DC    H'00',256X'00'
         DC    50C' '
         DC    CL1' '                   USED TO BLANK OUT CARD
CNTCRD   DS    CL80                     JCL OR CONTROL CARD AREA
AEODAM   DC    A(MEMRET)                EOF EXIT
AEODAD   DC    A(ALIASRET)              EOF EXIT
UT1      DC    XL1'00'                  SYSUT1 SWITCH  FF - PRESENT
*                                                      00 - NOT PRES
UT2      DC    XL1'00'                  SYSUT2 SWITCH  FF - PRESENT
*                                                      00 - NOT PRES
LESWCH   DC    XL1'FF'                  LINK SWITCH    FF - LINK
*                                                      00 - PUNCH
LEUSED   DC    XL1'00'                  LINK-EDIT USED FF - USED-RUN  $
*                                                      00 - NOT USED  $
SETSSISW DC    XL1'00'                  SETSSI SWITCH  FF - SETSSI    $
*                                                      00 - NO SETSSI $
REPLACE  DC    XL1'00'                  REPLACE SWITCH FF - YES
*                                                      00 - NO
ALLSET   DC    XL1'00'                  SET UP SWITCH  00 - DO SET UP
*                                                      FF - DONT SET UP
SYSLOPR  DC    XL1'00'                  SYSLOUT SWITCH FF - PRESENT
*                                                      00 - NOT PRES
INDDPR   DC    XL1'00'                  INDD SWITCH    FF - PRESENT
*                                                      00 - NOT PRES
OUTDDPR  DC    XL1'00'                  OUTDD SWITCH   FF - PRESENT
*                                                      00 - NOT PRES
UT3      DC    XL1'00'                  SYSUT3 SWITCH  FF - PRESENT
*                                                      00 - NOT PRES
SVCLIB   DC    XL1'00'
COPYSW   DC    XL1'00'
RC       DC    XL1'00'                  RETURN CODE HOLD AREA
REPLY    DC    C' '
RECB     DC    F'0'
SVREG14  DS    F                                                      $
SVREG9   DS    F                        SAVE AREA FOR R9
SVREG4   DS    F                        SAVE AREA FOR R4
SVREG5   DS    F                        SAVE AREA FOR R5
ADRTIOT  DS    F                        SAVE TIOT ADDRESS
BLDLIST  DC    H'1'
         DC    H'58'
         DS    56X
JFCB     DS    44F                      JFCB
         DS    0H
QENQOUT  DC    CL8'MM      '                                          $
RENQOUT  DC    CL44' '                                                $
DDNMLST  DC    H'48'                    LIST LENGTH
         DC    C'SYSUT2  '
         DC    XL8'00'
DDENTR3  DS    CL8
         DC    C'SYSLIB  '
         DC    XL8'00'
         DC    C'SYSLOUT '
         DS    0H
OPLISTL  DS    XL2
OPLISTV  DC    CL78'LET,LIST,XREF,NCAL'                               $
COPYOPTN DC    H'0'
COPYDDNM DC    H'40'
         DC    8XL1'00'                UNUSED
         DC    8XL1'00'                UNUSED
         DC    8XL1'00'                UNUSED
         DC    8XL1'00'                UNUSED
         DC    CL8'SYSUT3'             ALTERNATE NAME FOR SYSIN
IOSUPARM DC    H'0'
         DC    C'TSO'
IOSPDDNM DC    H'64'
         DC    56XL1'00'
IOSPDD   DC    CL8' '
         DS    0F
TABLEN   DC    F'2000'                                                $
TABADD   DC    F'0'                                                   $
ALEND    DS    F                                                      $
ALENTRY  DS    CL11
ATABS    DS    F                                                      $
TABEND   DS    F                                                      $
         DS    0F
XLIST1   DC    X'87'
         DC    AL3(JFCB)
UNITAB   DC    A(T2314)
         DC    A(T3330)
         DC    A(T2301)
         DC    A(T2305)
         DC    A(T2311)
         DC    A(T3330D)                                              $
         DC    A(T3380)                                               $
         DC    A(T3390)                                               $
T2314    DC    C'//             UNIT=2314'
T3330    DC    C'//             UNIT=3330'
T2301    DC    C'//             UNIT=2301'
T2305    DC    C'//             UNIT=2305'
T2311    DC    C'//             UNIT=2311'
T3330D   DC    C'//           UNIT=3330-1'                            $
T3380    DC    C'//             UNIT=3380'                            $
T3390    DC    C'//             UNIT=3390'                            $
VOLUME   DS    CL6
JOBNO    DC    PL2'0'
STEPNO   DC    PL2'0'
CARDNUM  DC    PL5'0'
*
* THE FOLLOWING MUST STAY DEFINED IN THE ORDER SHOWN
SEGBFBEG DS    F
SEGUSED  DS    F
CESDADR  DS    F
CESDUSED DS    F
ADCARNUM DS    F
ADCRDOUT DS    F
OVLYSW   DC    XL1'0'
SZPARM   DS    CL24
SZPRMSW  DC    XL1'00'
SZPRMLTH DS    H
*
JOBCARD  DC    C'//RELNKXXX JOB 1,''JOE PROGRAMMER'''
LEEXEC   DC    C'//STEPXXX  EXEC PGM=IEWL,REGION=512K,'               $
BLEPARML DS    H                                                      $
BLEPARM  DC    C'// PARM=('''                                         $
LESYSOUT DC    C'//SYSPRINT DD  SYSOUT=A'
LESYSUT1 DC    C'//SYSUT1   DD  SPACE=(CYL,(5,1)),UNIT=SYSDA  '       $
LESYSLMD DC    C'//SYSLMOD  DD  DISP=OLD,'
LEDSNAME DC    C'//             DSNAME='
LEINPUT  DC    C'//         DD  DISP=SHR,'
LESYSLIN DC    C'//SYSLIN   DD  *'
COPYBASE DC    C'     COPY INDD='
SELECT   DC    C'          SELECT    MEMBER='
NUCINS01 DC    C'INSERT IEAANIP0'
NUCINS02 DC    C'INSERT IEAQFX00'
NUCINS03 DC    C'INSERT DOSBLKS'
NUCINS04 DC    C'INSERT IGFCCH'
         LTORG
         EJECT
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=(PM),LRECL=80,BLKSIZE=80,           X
               DSORG=PS,RECFM=FB
         EJECT
SYSUT3   DCB   DDNAME=SYSUT3,MACRF=(PM),LRECL=80,BLKSIZE=80,           X
               DSORG=PS,RECFM=FB
         EJECT
SYSPUNCH DCB   DDNAME=SYSPUNCH,MACRF=(PM),LRECL=80,                   $X
               DSORG=PS,RECFM=FB
         EJECT
DDCB     DCB    MACRF=(RP),BLKSIZE=256,DSORG=PS,RECFM=F,SYNAD=DDCBIOER
         EJECT
OUTDCB   DCB   MACRF=(RP),BLKSIZE=256,DSORG=PS,RECFM=F,SYNAD=OUTIOER, $X
               EXLST=XLIST1                                           $
         EJECT
INDCB    DCB    EXLST=XLIST1,DSORG=PO,MACRF=(R),RECFM=U,BLKSIZE=7294
         EJECT
ZZRELCOM DS    0D
         ZZRELCOM
         EJECT
         DS    0F
TABCOR   DC    16X'FF'
         DS    CL1024
         END
