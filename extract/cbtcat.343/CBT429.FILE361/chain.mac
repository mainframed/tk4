         MACRO
&NAME    CHAIN &BASE=10,&SAVE=(14,12),&SAVAR=SAVE,&PL1=NO,&SAVEPTR=13, X
               &RENT=,&MACBASE=15,&MODULE=*,&DSALTH=100,&WKREG=14,     X
               &PLICO=NO,&PARM=,&ENTRY=
         LCLC  &CHARFLD,&INTNAME
         LCLA  &COUNTER,&ROUND,&BASENO,&BDISP
         LCLB  &SAVE1
&INTNAME SETC  '&NAME'
         AIF    ('&MACBASE' NE '15').NOTB15
         AIF   ('&MODULE' EQ '').NOTB15
         AIF   ('&PLICO' EQ 'YES' AND '&MODULE' NE '*').NOTB15
         USING  *,15 .ESTABLISH TEMPORARY BASE REG
.NOTB15  ANOP
         AIF   ('&MODULE' EQ '').SCHECK
         AIF   ('&MODULE' EQ '*').CSNAME
         AIF   ('&ENTRY' EQ '').NENT01
&CHARFLD SETC  '&ENTRY'
         AGO   .ENT01
.NENT01  ANOP
&CHARFLD SETC  '&MODULE'
.ENT01   ANOP
&COUNTER SETA  1
.CHARCNT AIF   ('&CHARFLD'(1,&COUNTER) EQ '&CHARFLD').CNTEND
&COUNTER SETA &COUNTER+1
         AGO   .CHARCNT
.CNTEND  ANOP
&ROUND   SETA  ((&COUNTER+2)/2)*2+4
         AIF   ('&PLICO' NE 'YES').NPLI01
         AIF   ('&MODULE' EQ '*').NPLI01
&ROUND   SETA  7-&COUNTER
         AIF   (&ROUND LE 0).PLI01
         DC    CL&ROUND.' ' PAD MODULE NAME ON LEFT WITH BLANKS
.PLI01   ANOP
         AIF   ('&ENTRY' EQ '').NENT02
         DC    C'&ENTRY' MODULE NAME FOR CORE DUMP IDENTIFICATION
         DC    AL1(&COUNTER.) LENGTH OF ENTRY NAME
         ENTRY &ENTRY
         USING *,15
&ENTRY   DS    0H
         AGO   .SCHECK
.NENT02  ANOP
         DC    C'&MODULE' MODULE NAME FOR CORE DUMP IDENTIFICATION
         DC    AL1(&COUNTER.) LENGTH OF MODULE NAME
         ENTRY &MODULE
         USING *,15
&MODULE  DS    0H
         AGO   .SCHECK
.NPLI01  ANOP
&INTNAME B     *+&ROUND .BRANCH AROUND ID
         DC    AL1(&COUNTER) .     ID LENGTH
         DC    CL&COUNTER'&CHARFLD' .ID
&INTNAME SETC  ''                  YES
         AGO   .SCHECK
.CSNAME  AIF   ('&SYSECT' EQ '').E1
&CHARFLD SETC  '&SYSECT'
&COUNTER SETA  1
         AGO   .CHARCNT
.*       NOW CHECK FOR REG'S TO BE SAVED
.*
.*       IF CHECKOUT/OPTIMIZER PROLOGUE HAS BEEN REQUESTED THEN A
.*   STANDARD REGISTER SAVING CONVENTION MUST BE FOLLOWED.
.*
.SCHECK  AIF   ('&PLICO' NE 'YES').SCHECK2
         STM   14,11,12(13) SAVE CALLER'S REGISTERS IN CALLER'S DSA
&SAVE1   SETB  1           SHOW THAT R1 WAS SAVED
         AGO   .SCHAIN
.SCHECK2 AIF   ('&SAVE' EQ '').SCHAIN   REGS TO BE SAVED?
.SNAMEOK AIF   (T'&SAVE(1) NE 'N').E2   REGS MUST BE SELF-DEFINING
&COUNTER SETA  &SAVE(1)*4+20
         AIF   (&COUNTER LE 75).SCHK01
&COUNTER SETA  &COUNTER-64
.SCHK01  AIF   (N'&SAVE NE 2).SCHK02
&INTNAME STM   &SAVE(1),&SAVE(2),&COUNTER.(&SAVEPTR) .SAVE REQ'D REG'S
&SAVE1   SETB  (&SAVE(1) LE 1 AND &SAVE(2) GE 1)
&SAVE1   SETB  (&SAVE(1) GT 1 AND &SAVE(2) GE 1)
&INTNAME SETC  ''
         AGO   .SCHAIN
.SCHK02  AIF   (N'&SAVE NE 1).E3
&INTNAME ST    &SAVE(1),&COUNTER.(&SAVEPTR,0) .SAVE REQ'D REGISTER
&SAVE1   SETB  (&SAVE(1) EQ 1) SHOW THAT R1 WAS SAVED
&INTNAME SETC  ''
.*
.*       NOW WE CHAIN THE SAVE AREAS
.*
.SCHAIN  ANOP
         AIF   ('&ENTRY' EQ '').NENT03
         AIF   ('&MODULE' EQ '').E8
&INTNAME L     &BASE(1),=A(&MODULE.) SET UP BASE ENTRY ADDRESS
         AGO   .ENT03
.NENT03  ANOP
&INTNAME LR    &BASE(1),15 .        ESTABLISH ADDRESSIBILITY
         AIF   ('&PLICO' NE 'YES').NPLI02
         AIF   ('&MODULE' EQ '' OR '&MODULE' EQ '*').NPLI02
.ENT03   ANOP
         USING &MODULE,&BASE(1)
         AGO   .PLI02
.NPLI02  ANOP
         USING &SYSECT,&BASE(1)
.PLI02   ANOP
         SPACE 1
         AIF   (N'&BASE LE 1).BASETST
&BASENO  SETA  2
&BDISP   SETA  4096
.BASELP1 ANOP
         LA    &BASE(&BASENO),4095(&BASE(&BASENO-1))
         LA    &BASE(&BASENO),1(&BASE(&BASENO))
         AIF   ('&PLICO' NE 'YES').NPLI03
         AIF   ('&MODULE' EQ '' OR '&MODULE' EQ '*').NPLI03
         USING &MODULE+&BDISP,&BASE(&BASENO)
         AGO   .PLI03
.NPLI03  ANOP
         USING &SYSECT+&BDISP,&BASE(&BASENO)
.PLI03   ANOP
         SPACE 1
&BASENO  SETA  &BASENO+1
&BDISP   SETA  &BDISP+4096
         AIF   (&BASENO LE N'&BASE).BASELP1
.BASETST AIF   ('&MACBASE' NE '15').NOTB15F
         AIF   ('&MODULE' EQ '').NOTB15F
         DROP  15 .DROP TEMPORARY BASE
.NOTB15F ANOP
&INTNAME SETC  ''
         AIF   ('&PL1' EQ 'YES').PL1GEN  PL/1 (F) PROLOGUE REQUIRED
.*
         AIF   ('&PLICO' EQ 'YES').PLIGEN CHECKER/OPTIMIZER PROLOGUE
.*
*        NOW CHAIN THE SAVE AREAS
         SPACE 1
         AIF   ('&RENT' EQ '').SCHAIN1
         AIF   ('&RENT' NE 'YES').E6    'YES' IS THE ONLY VALID PARM
         SPACE 1
*        OBTAIN A DYNAMIC SAVE AREA TO RETAIN RE-ENTRABILITY
         SPACE 1
         GETMAIN    R,LV=&DSALTH . GET A DYNAMIC SAVE AREA (DSA)
         SPACE 1
         XC    0(&DSALTH,1),0(1) . CLEAR DSA TO ZEROES
         SPACE 1
         ST    &SAVEPTR,4(1) .     SAVE PTR TO OLD SAVE AREA IN NEW
         ST    1,8(0,&SAVEPTR) .   STORE PTR TO NEW SAVE AREA IN OLD
         LR    &SAVEPTR,1 .        SET POINTER TO NEW SAVE AREA
         SPACE 1
         AGO   .EXIT
.SCHAIN1 ANOP
         ST    &SAVEPTR,&SAVAR+4 . SAVE PTR TO SAVE AREA
         LA    &WKREG,&SAVAR .     PICK UP PTR TO NEW SAVE AREA
         ST    &WKREG,8(0,&SAVEPTR) .STORE PTR TO NEW AREA IN OLD AREA
         LR    &SAVEPTR,&WKREG .   SET SAVE PTR TO NEW SAVE AREA
         SPACE 1
.*
.*       IF PL1=YES HAS BEEN CODED WE MUST GENERATE THE APPROPRIATE
.*   PL/1 PROLOGUE FOR ERROR HANDLING
.*
.PL1GEN  ANOP
         AIF   ('&PL1' EQ 'NO').EXIT
         AIF   ('&PL1' NE 'YES').E4
         AIF   ('&SYSECT' EQ '').E5
&CHARFLD SETC  '&SYSECT' .    COUNT NUMBER OF CHARACTERS IN CSECT NAME
&COUNTER SETA  1
.CSCOUNT AIF   ('&CHARFLD'(1,&COUNTER) EQ '&CHARFLD').CSCHECK
&COUNTER SETA  &COUNTER+1
         AGO   .CSCOUNT
.CSCHECK AIF   (&COUNTER GT 7).E7  CSECT NAME > 7 CHARACTERS
&INTNAME L     15,MLMA&SYSNDX .    SET UP DSA AND CHAIN IT TO OTHERS
         LA    0,&DSALTH .         LOAD UP LENGTH OF REQ'D DSA
         BALR  14,15 .             LINK TO IHESADA - PL/1 STORAGE MGT.
&CHARFLD.B DXD A              SYMBOLIC OFFSET OF PSEUDO REGISTER
         MVI   0(13),X'80' .       SET DSA FLAG
         ST    13,0(12) .          STORE DSA ADDRESS IN PSEUDO REGISTER
         ORG   *-2
         DC    QL2(&SYSECT.B) .PLACES PR OFFSET IN ST INSTRUCTION ABOVE
         CNOP  0,4 .         ALIGN TO FULL WORD BOUNDARY
         B     *+8 .         BRANCH OVER ADCON
MLMA&SYSNDX DC   V(IHESADA) .     ADCON POINTING TO GET DSA ROUTINE
&INTNAME SETC  ''
         AGO   .EXIT
.*
.*        THE FOLLOWING CODE WILL GENERATE A PL/1 CHECKOUT/OPTIMIZER
.*   COMPATABLE PROLOGUE, UTILIZING THE LIFO STACK TO OBTAIN DSA CORE
.*
.PLIGEN  ANOP
         LA    0,&DSALTH .  R0 = LENGTH OF REQUIRED DSA
         L     1,76(13) .   R1 = ADDRESS OF FIRST AVAILABLE BYTE IN
*                                THE LIFO STACK
         ALR   0,1 .        R0 = PTR TO END OF REQUIRED DSA IF IT
*                                FIT IN LIFO STORAGE
         CL    0,12(12) .   COMPARE RESULT WITH ADDRESS OF LAST
*                           AVAILABLE BYTE IN LIFO STORAGE
         BNH   *+10 .       BRANCH IF REQUIRED DSA STORAGE IS AVAILABLE
*                           IN THE LIFO STACK
         L     15,116(12) . R15 = PTR TO PL/I STORAGE OVERFLOW ROUTINE
         BALR  14,15 .      BRANCH OUT TO GETMAIN MORE STORAGE
         ST    0,76(1) .    UPDATE ADDRESS OF NEXT AVAILABLE BYTE IN
*                           LIFO STACK
         ST    13,4(1) .    STORE PTR TO CALLER'S DSA IN OUR DSA
         MVC   72(4,1),72(13) COPY PTR TO LIBRARY WORKSPACE
         LR    13,1 .       SET UP PTR TO OUR NEW DSA
         MVI   0(13),X'80' .SET DSA FLAGS TO PRESERVE PL/I
         MVI   86(13),X'91' ERROR-HANDLING WHILE EXECUTING
         MVI   87(13),X'C0' IN THIS ASSEMBLER ROUTINE.
*
*        E N D    O F    P L / I    P R O L O G U E
*
.*
.EXIT    ANOP                      NORMAL MACRO EXIT
         AIF   (NOT &SAVE1).EXIT2    BRANCH IF R1 WAS NOT SAVED
         AIF   ('&PARM' NE 'YES').EXIT2 BRANCH IF NOT 'PARM=YES'
         L     1,4(13) .           R1 = PTR TO CALLERS' SAVE AREA
         L     1,24(1) .           RESTORE R1 TO POINT TO PARMS
.*
.EXIT2   MEXIT
.*
.*       ERROR MESSAGES
.*
.E1      MNOTE 12,'NO CSECT NAME SPECIFIED AND ''*'' CODED'
         MEXIT
.E2      MNOTE 12,'INVALID REGISTER SPECIFICATION IN SAVE RANGE'
         MEXIT
.E3      MNOTE 12,'INVALID RANGE OF REGISTERS TO BE SAVED'
         MEXIT
.E4      MNOTE 12,'INVALID ''PL1='' SPECIFICATION'
         MEXIT
.E5      MNOTE 12,'PL1=YES CODED BUT NO CSECT NAME PRESENT'
         MEXIT
.E6      MNOTE 12,'INVALID ''RENT='' SPECIFICATION'
         MEXIT
.E7      MNOTE 12,'PL1=YES CODED BUT CSECT NAME > 7 CHARACTERS'
         MEXIT
.E8      MNOTE 12,'''ENTRY='' OPERAND CODED BUT ''MODULE='' NOT SPECIFIX
               ED'
         MEXIT
.*
         MEND
