         TITLE 'ROUTINE TO BUILD OVERLAY TABLES FOR THE CARD GENERATOR'
ZZROVBLD CSECT
         EQUREGS
         EJECT
         CHAIN BASE=12
         USING ZZRELCOM,R4
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    FUNCTION TABLE FORMAT    R1 HAS CODE FOR FUNCTION REQUIRED.      *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         B     BLDRTNS(R1)
BLDRTNS  DS    0H
         B     CLSOPN                   CODE = 0
         B     BLDTAB                   CODE = 4
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    FUNCTION - CLOSE AND OPEN THE FILE                               *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CLSOPN   DS    0H
         MVI   RC,0                     SET RETURN CODE TO ZERO
         CLOSE (ESDCB)                  CLOSE PREVIOUS INPUT D.S.
         L     R3,INBEGIN               START OF TABLE
         MVC   ESDCB+40(8),2(R3)        MAIN DD NAME
         MVC   ESDCB+33(3),AEODAE+1     END OF CESD EXIT
         OPEN  (ESDCB)                  OPEN THE FILE
         TM    ESDCB+48,X'10'           OPEN SUCESSFUL?
         BO    NORMRET                  OPEN O.K. - RETURN
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    OPEN IS UNSUCESSFUL PUT OUT MESSAGE                              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         MVI   RC,12
         MVC   DDNMFLD(8),2(R3)         MOVE IN DDNAME FOR MESSAGE
         MVI   DDNMDISP,0               DDNAME GOES AT +0
         MVI   MSGLIST+1,NODDCARD       SET UP DD CARD MISSING MESSAGE
         MVI   MSGLIST,PBIT+LASTMSG     SHOW PARM PRES & LAST MSG
         MVI   PARAMS,DDNM              SHOW DDNAME PRESENT
         LA    R2,NORMRET               R2 HAS SUPPLIED RETURN POINT
MSGWRT   DS    0H
         L     R15,VZZRLMES             PTR TO MESSAGE WRITER
         BALR  R14,R15                  GO WRITE MESSAGE
         BR    R2                       EXIT TO SUPPLIED RETURN POINT
MSGWRTN  DS    0H
         MVI   MSGLIST,PBIT+LASTMSG     SHOW LAST MSG AND PARMS
         MVI   PARAMS,NAME              SHOW NAME PARM PRESENT
         B     MSGWRT                   WRITE MESSAGE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    FUNCTION - BUILD NECESSARY OVERLAY TABLES                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
BLDTAB   DS    0H
         MVI   RC,0                     SET RETURN CODE TO ZERO
         MVI   CNMEFND,X'00'            SET FOUND SWITCH OFF
         MVI   CESDSW,X'00'             SET CESD FOUND SWITCH OFF     $
         ZAP   CSECTCTR,=P'0'           CLEAR CSECT COUNTER TO 0      $
         MVI   ENDTABSW,X'00'           TURN ENDTAB SW OFF
         MVI   CSCTNAME,C' '            INIT FIRST CHAR TO BLANK
         MVC   MEMNAME(8),WKA1          GET MEMBER NAME
         MVC   OVLYSW(1),WKA1+8         GET OVERLAY SWITCH
         MVC   EPADDR(3),WKA1+9         GET EPA ADDRESS
         MVC   ADDRMAIN(4),WKA1+12      GET MAIN MEMBER ADDRESS
         LA    R6,CESDADR               R6 -> START OF CESD TABLE
         FIND  ESDCB,ADDRMAIN,C         ESTABLISH BEGINNING OF MEMBER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    SET UP TO GET NEXT RECORD                                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDGET  DS    0H
         LA    R2,CESDBFFR              PTR TO READ BUFFER
         LA    R3,256                   LENGTH OF READ
         BAL   R9,CESDREAD              READ A RECORD
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    DO WE WANT TO PROCESS THIS RECORD                                *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         CLI   0(R2),X'80'              IDR?
         BE    CESDGET                  YES - GET NEXT BLOCK
         CLI   0(R2),X'40'              SYM?
         BE    CESDGET                  YES - GET NEXT BLOCK
         CLI   0(R2),X'20'              CESD?
         BNE   *+12                     NO                            $
         MVI   CESDSW,X'FF'             INDICATE AT LEAST ONE         $
         B     CESDFND                  CESD FOUND AND PROCESS        $
         TM    OVLYSW,X'FF'             OVERLAY PROCESSING?
         BZ    CESDER1                  NO - CSECT NOT FOUND - ERROR
         CLI   0(R2),X'01'              CONTROL RECORD?
         BE    CESDCMPL                 YES - SEGTAB FOLLOWS
         B     CESDER1                  CSECT ERROR
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    SET UP TO PROCESS BLOCK                                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDFND  DS    0H
         LH    R7,6(R2)                 LENGTH OF DATA IN BLOCK
         SRL   R7,4                     / 16 = # OF ENTRIES
         LA    R5,8(R2)                 BUMP PAST BLOCK HEADER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    CHECK CESD DATA FOR WHAT WE WANT                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDCHCK DS    0H
         CLI   8(R5),X'07'              IS THIS A NULL RECORD         $
         BE    CESDINCR                 YES - SKIP                    $
         CLI   12(R5),X'00'             SEG # = ZERO?
         BNE   *+14                     NO - CONTINUE                 $
         CLC   13(3,R5),=X'000000'      YES - TREAT AS WR, NULL,      $
         BE    CESDINCR                   OR ER TYPE IF LEN. = ZERO   $
         CLI   8(R5),X'14'              SEGTAB OR ENDTAB?
         BNE   CHCKPVT                  NO - CONTINUE CHECKS
         TM    ENDTABSW,X'FF'           FIRST PC ITEM?
         BO    ENDTAB                   MUST BE ENDTAB
         MVI   ENDTABSW,X'FF'           INDICATE SEGTAB FOUND
         MVC   0(8,R5),=C'$SEGTAB '     INDICATE SEGTAB
         B     UPDTCTAB                 MOVE TO BUFFER
ENDTAB   DS    0H
         MVC   0(8,R5),=C'$ENDTAB '     INDICATE ENDTAB
         B     UPDTCTAB                 MOVE TO BUFFER
CHCKPVT  DS    0H
         CLI   8(R5),X'04'              PRIVATE CODE TYPE?
         BNE   CONTCHK1                 CONTINUE CHECKS
         MVC   0(8,R5),=C'$PRIVATE'     INDICATE PRIVATE CODE
         B     UPDTCTAB                 MOVE TO BUFFER
CONTCHK1 DS    0H
         NI    8(R5),X'0F'              TURN OFF UNWANTED BITS
         CLI   8(R5),X'00'              SD TYPE?
         BE    CNMEPRCS                 YES - CHECK FOR CSECT NAME
         CLI   8(R5),X'03'              LR TYPE?
         BE    CNMEPRCS                 YES - CHECK FOR CSECT NAME
         CLI   8(R5),X'05'              COMMON TYPE?
         BNE   CESDINCR                 NO - UNACCEPTABLE TYPE
         CLI   0(R5),X'40'              BLANK COMMON?
         BNE   UPDTCTAB                 NO - MOVE TO BUFFER
         MVC   0(8,R5),=C'$BLKCOM '     INDICATE BLANK COMMON
         B     UPDTCTAB                 MOVE TO BUFFER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    SET BUFFER TO LOOK AT NEXT ENTRY                                 *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDINCR DS    0H
         LA    R5,16(R5)                INCR TO NEXT ENTRY
         BCT   R7,CESDCHCK              CHECK NEXT ENTRY
         B     CESDGET                  GET NEXT RECORD WHEN NO ENTRY
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    THIS ROUTINE ACTUALLY DOES THE READ                              *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDREAD DS    0H
         READ  CESDECB,SF,ESDCB,(R2),(R3)    DO THE READ
         CHECK CESDECB                  WAIT FOR COMPLETION OF READ
         BR    R9                       RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    THIS PHASE READS IN THE SEGTAB AND PLACES IT IN SEGTAB BUFFER    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDCMPL DS    0H
         ST    R6,CESDUSED              PTR TO DYNAMIC END OF TABLE
         LH    R3,14(R2)                GET LENGTH FROM CCW
         LA    R2,SEGBFBEG              PTR TO START OF SEGTAB BUFFER
         LR    R8,R2                    R8 -> SEGTAB
         AR    R8,R3                    LENGTH OF SEGTAB
         BAL   R9,CESDREAD              READ THE SEGTAB
         ST    R8,SEGUSED               DYNAMIC END OF SEGTAB
         B     OVLYRET                  RETURN FROM OVERLAY ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    MOVE CESD ENTRY TO TABLE                                         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
UPDTCTAB DS    0H
         TM    OVLYSW,X'FF'             OVERLAY MODULE?
         BZ    CESDINCR                 NO - DO NOT SET UP TABLE
         MVC   0(16,R6),0(R5)           MOVE ENTRY TO BUFFER
         MVC   10(2,R6),=H'0'           ZERO OUT ADDRESS
         AH    R6,=H'16'                UPDATE BUFFER POINTER
         B     CESDINCR
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    RETRIEVE CSECT NAME OF MAIN ENTRY POINT                          *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CNMEPRCS DS    0H
         AP    CSECTCTR,=P'1'           ADD 1 TO THE COUNT OF CEST    $
*                                       NAMES FOUND IN CESD FOR MOD   $
         TM    CNMEFND,X'FF'            NAME FOUND ALREADY?
         BO    CNMERET                  YES - RETURN
         CLC   9(3,R5),EPADDR           ADDRESSES MATCH?
         BNE   CNMERET                  NO - NOT THE NAME
         MVC   CSCTNAME(8),0(R5)        SAVE THE CSECT NAME
         MVI   CNMEFND,X'FF'            SHOW FOUND
         TM    OVLYSW,X'FF'             OVERLAY MODULE?
         BZ    CSCTRET                  NO - DO NOT SET UP TABLE
CNMERET  DS    0H
         CLI   8(R5),X'03'              LR TYPE?
         BE    CESDINCR                 YES - PROCESS NEXT ENTRY
         B     UPDTCTAB                 SD TYPE - MOVE TO BUFFER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    RETURN FROM OVERLAY BUILD ROUTINE. SET UP VALUES IN COMM AREA.   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OVLYRET  DS    0H
         LA    R9,SEGBFBEG              R9 -> START OF SEGTAB
         ST    R9,WKA1+8                STORE THE ADDRESS
         MVC   WKA1+12(4),SEGUSED       MOVE END OF SEGTAB
         LA    R9,CESDADR               R9 -> START OF CESD TABLE
         ST    R9,WKA1+16               STORE THE ADDRESS
         MVC   WKA1+20(4),CESDUSED      MOVE END OF CESD TABLE
CSCTRET  DS    0H
         MVC   WKA1(8),CSCTNAME         MOVE CSECT NAME
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    RETURN TO CALLING ROUTINE                                        *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NORMRET  DS    0H
         L     R13,4(R13)               RESTORE SAVE AREA POINTER
         XR    R15,R15                  CLEAR R15
         IC    R15,RC                   SET RETURN CODE
         RETURN (14,12),RC=(15)         RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    EOF EXIT WHEN READING MEMBER LOAD MODULE. NO VALID ENTRY POINT.  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CESDER1  DS    0H
         CLI   CESDSW,X'FF'             HAVE AT LEAST 1 CESD ENTRY    $
         BNE   NOEPERR                  NO - BYPASS CHECKS FOR MOD    $
         CLC   EPADDR,=X'000000'        IF ENTRY POINT ADDRESS IS 0   $
         BNE   *+14                     BUT NO VALID EP NAME FOUND    $
         MVC   WKA1(8),=C'$PRIVATE'     PASS BACK $PRIVATE AS A SW    $
         B     NORMRET                  TO BYPASS USE OF ENTRY CARD   $
         CP    CSECTCTR,=P'1'           IF THE CESD HAS ONLY 1 CEST,  $
         BNE   NOEPERR                  THERE IS NO EP MATCH, AND     $
         MVC   WKA1(8),=C'$PRIVATE'     THERE IS A NON-ZERO EP, WE    $
         B     NORMRET                  WILL ASUME AN RPG MODULE AND  $
*                                       PASS BACK $PRIVATE AS A SW    $
*                                       TO BYPASS USE OF ENTRY CARD   $
NOEPERR  EQU   *                                                      $
         MVC   NAMEFLD(8),MEMNAME       SET MEMBER NAME FOR MSG
         MVI   NAMEDISP,28              MEMBER NAME GOES AT +28
         MVI   MSGLIST+1,EPAERR01       SET FOR EPA ERROR MSG
         MVI   RC,4                     SET RETURN CODE TO 4
         LA    R2,NORMRET               SET RETURN ADDRESS
         B     MSGWRTN                  WRITE MSG WITH NAME
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    I/O ERROR HANDLING ROUTINE SYNAD EXIT FOR ESDCB                  *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ESDIOER  DS    0H
         SYNADAF ACSMETH=BPAM           ANALYZE I/O ERRORS
         WTO   MF=(E,(1)),ROUTCDE=11,DESC=7  PUT OUT SYNAD MESSAGE
         MVC   NAMEFLD(8),MEMNAME       SET UP MEMBER NAME FOR MSG
         L     R3,INBEGIN               PTR TO INDD TABLE
         MVC   DDNMFLD(8),2(R3)         MOVE DDNAME TO MSG
         MVI   NAMEDISP,45              MEMBER NAME GOES AT +45
         MVI   DDNMDISP,13              DDNAME GOES AT +13
         MVI   MSGLIST+1,CESDIOER       I/O ERROR READING MEMBER
         LA    R2,ESDIOER1              SET RETURN ADDRESS
         B     MSGWRTN                  WRITE MSG WITH NAME
ESDIOER1 DS    0H
         SYNADRLS                       RELEASE SYNAD BUFFERS
         MVI   RC,12                    SET RETURN CODE TO 12
         B     NORMRET                  RETURN
         EJECT
ESDCB    DCB   MACRF=(R),RECFM=U,SYNAD=ESDIOER,DSORG=PO
         EJECT
ZZRELCOM DSECT
         ZZRELCOM
         EJECT
ZZROVBLD CSECT
RC       DC    XL1'00'
*
AEODAE   DC    A(CESDER1)
*
SAVE     DS    18F
*
CNMEFND  DC    XL1'00'
*
CESDSW   DC    XL1'00'                                                $
*                                                                     $
ENDTABSW DC    XL1'00'
*
OVLYSW   DC    XL1'00'
*
CSECTCTR DS    PL2                                                    $
*                                                                     $
EPADDR   DS    CL3
*
MEMNAME  DS    CL8
*
ADDRMAIN DC    F'0'
*
CSCTNAME DS    CL8
*
CESDUSED DC    F'0'
*
SEGUSED  DC    F'0'
*
CESDBFFR DC    XL256'0'
*
SEGBFBEG DS    CL1048
*
         EJECT
         LTORG
         EJECT
CESDADR  DS    CL20480
         END
