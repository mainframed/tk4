         MACRO
&LABEL   BINSRCH &TBEG=(3),&TEND=(4),&AEND=,&BUILD=NO,&ENTLTH=,        X
               &ARG=(2),&SEQ=A,&COMPARE=L,&ARGOF=0,&FULL=,&TMID=(1),   X
               &ARGLTH=,&FOUND=,&ENTOF=0
.**********************************************************************
.*       MACRO PROTOTYPE SYMBOL MEANINGS AS FOLLOWS                   *
.**********************************************************************
.*             AEND = PTR TO ABSOLUTE TABLE END (BUILD FUNCTION ONLY)
.*
.*             ARG  = PTR TO ARGUMENT WHICH IS OBJECT OF SEARCH
.*
.*             ARGLTH = LENGTH OF ARGUMENT ON WHICH COMPARISON IS BASED
.*
.*             ARGOF = OFFSET OF ARGUMENT FROM THE START OF AN ENTRY
.*
.*             BUILD = INDICATION AS TO WHETHER THE SEARCH TABLE IS TO
.*                     BE EXPANDED IF THE SEARCH ARGUMENT IS NOT FOUND
.*                     IN THE EXISTING TABLE.
.*
.*             COMPARE = INDICATION OF WHETHER THE SEARCH TABLE IS KEPT
.*                       IN ARITHMETIC OR COLLATING SEQUENCE ORDER.
.*
.*             ENTLTH = THE LENGTH OF A SINGLE TABLE ENTRY
.*
.*             TBEG = PTR TO THE START OF THE TABLE (MUST HAVE A DUMMY
.*                    ENTRY WITH X'0F' FOR 'COMPARE=A' OR X'FF' FOR
.*                    'COMPARE=L' IN THE ARGUMENT FIELD OF THE FIRST
.*                    ENTRY FOR THE 'BUILD=YES' FUNCTION).
.*
.*             TEND = PTR TO THE END OF THE TABLE (MUST HAVE THE DUMMY
.*                    ENTRY DESCRIBED ABOVE IN THE LAST ENTRY OF THE
.*                    TABLE IF 'BUILD=NO' IS IN EFFECT)
.**********************************************************************
         LCLB  &BS(7)              1 = TBEG IN REG NOTATION
.*                                 2 = TEND IN REG NOTATION
.*                                 3 = AEND IN REG NOTATION
.*                                 4 = ARG IN REG NOTATION
.*                                 5 = DESCENDING ORDER TABLE
.*                                 6 = ARITHMETIC TABLE SEARCH
.*                                 7 = FOUND ROUTINE ADDRESS PRESENT
.**********************************************************************
.*       CHECK VALIDIITY OF MACRO OPERANDS                            *
.**********************************************************************
         AIF   (T'&TBEG EQ 'O').E1    ERROR IF NOT PRESENT
&BS(1)   SETB  ('&TBEG'(1,1) EQ '(')  TBEG IN REG NOTATION
.**********************************************************************
         AIF   (T'&TEND EQ 'O').E2    ERROR IF NOT PRESENT
&BS(2)   SETB  ('&TEND'(1,1) EQ '(')  TEND IN REG NOTATION
.**********************************************************************
         AIF   ('&BUILD' EQ 'NO').BI004 TABLE BUILD REQUESTED
         AIF   ('&BUILD' NE 'YES').E3   ERROR IF NOT 'YES' OR 'NO'
.**********************************************************************
         AIF   (T'&AEND EQ 'O').E4    ERROR IF ABSOLUTE END NOT
.*                                    SPECIFIED AND BUILD = 'YES'
&BS(3)   SETB  ('&AEND'(1,1) EQ '(')  AEND IN REGISTER NOTATION
.**********************************************************************
         AIF   (T'&FULL EQ 'O').E5    ERROR IF TABLE FULL ROUTINE PTR
.*                                    NOT SPECIFIED WITH BUILD = 'YES'
.BI004   ANOP
.**********************************************************************
         AIF   (T'&ENTLTH NE 'N').E6  ERROR IF ENTRY LENGTH NOT SELF
.*                                    DEFINING
.**********************************************************************
         AIF   (T'&ARG EQ 'O').E7     ERROR IF ARG NOT SPECIFIED
&BS(4)   SETB  ('&ARG'(1,1) EQ '(')   ARG IN REG NOTATION
.**********************************************************************
         AIF   ('&TMID'(1,1) NE '(').E8 ERROR IF TMID NOT A REGISTER
.**********************************************************************
         AIF   ('&SEQ' NE 'A' AND '&SEQ' NE 'D').E9 ASCENDING
.*                                     AND DESCENDING ORDER ONLY
&BS(5)   SETB  ('&SEQ' EQ 'D')        SET SEQUENCE TO DESCENDING
.**********************************************************************
         AIF   ('&COMPARE' NE 'L' AND '&COMPARE' NE 'A').E10 ERROR
.*                                    IF NOT LOGICAL OR ARITHMETIC
.*                                    COMPARE
&BS(6)   SETB  ('&COMPARE' EQ 'A')    SET COMPARE TYPE TO ARITHMETIC
.**********************************************************************
         AIF   (T'&ARGOF NE 'N').E11  ERROR IF NOT SELF-DEFINING
.**********************************************************************
         AIF   (T'&ENTOF NE 'N').E12  ERROR IF NOT SELF-DEFINING
.**********************************************************************
         AIF   (T'&ARGLTH EQ 'O').E13 ERROR IF NO ARGUMENT LENGTH
         AIF   (T'&ARGLTH NE 'N').E14  ERROR IF NOT SELF-DEFINING
.**********************************************************************
&BS(7)   SETB  (T'&FOUND NE 'O')      FOUND ROUTINE PTR GIVEN
.**********************************************************************
***********************************************************************
*        THE FOLLOWING CODE IS A BINARY SEARCH ROUTINE. THIS ROUTINE  *
         AIF   ('&BUILD' EQ 'YES').BI008
*    WILL SEARCH THE TABLE POINTED TO BY 'TBEG' FOR THE ARGUMENT AT   *
*    'ARG'.                                                           *
         AGO   .BI012
.BI008   ANOP
*    WILL SEARCH THE EXISTING TABLE BEGINNING AT 'TBEG' AND ENDING AT *
*    'TEND' FOR THE ARGUMENT AT 'ARG'. IF THE SPECIFIED ARGUMENT IS   *
*    NOT FOUND IN THHE TABLE THEN ALL ENTRIES IN THE TABLE WILL BE    *
*    PROPAGATED UP, SPACE PERMITTING, THE TABLE TO MAKE ROOM FOR A    *
*    NEW TABLE ENTRY. IN THIS CASE 'TBEG' WILL BE SET TO POINT TO THE *
*    POSITION IN THE TABLE WHERE THE NEW ENTRY CAN BE PLACED.         *
.BI012   ANOP
***********************************************************************
         AIF   ('&LABEL' EQ '').BI016 BRANCH IF LABEL NOT CODED
&LABEL   DS    0H .
.BI016   ANOP
.**********************************************************************
         STM   14,12,12(13) .             SAVE REGISTERS
         AIF   (NOT &BS(1)).BI020         BRANCH IF SYMBOLIC
         AIF   ('&TBEG'(1,3) EQ '(3)').BI024 ALREADY IN R1
         LR    3,&TBEG .         SET PTR TO TABLE START
         AGO  .BI024
.BI020   ANOP
         L     3,&TBEG .         SET PTR TO TABLE START
.BI024   ANOP
         AIF   (NOT &BS(2)).BI028        BRANCH IF SYMBOLIC
         AIF   ('&TEND'(1,3) EQ '(4)').BI032 ALREADY IN R4
         LR    5,&TEND .         SET PTR TO TABLE END
         AGO   .BI032
.BI028   ANOP
         L     4,&TEND .         SET PTR TO TABLE END
.BI032   ANOP
         AIF   (NOT &BS(4)).BI036 IN SYMBOLIC NOTATION
         AIF   ('&ARG'(1,3) EQ '(2)').BI040 ALREADY IN R2
         LR    2,&ARG .          SET PTR TO SEARCH ARGUMENT
         AGO   .BI040
.BI036   ANOP
         LA    2,&ARG .          SET PTR TO SEARCH ARGUMENT
.BI040   ANOP
         AIF   (NOT &BS(2)).BI041          BRANCH IF SYMBOLIC
         LR    4,5                         R4 = PTR TO TABEND
.BI041   ANOP
         AIF   (NOT &BS(3)).BI044 BRANCH IF NOT IN REG NOTATION
         LR    6,&AEND .         SAVE PTR TO ABSOLUTE TABLE END PTR
.BI044   ANOP
         CLC   &ARGOF.(&ARGLTH,2),&ENTOF.(3) . NEW ENTRY FOR BEGINNING
         AIF   ('&BUILD' EQ 'NO').BI048    BRANCH IF SEARCH ONLY
         BL    MLMB&SYSNDX .               BRANCH IF YES
         AGO   .BI052
.BI048   ANOP
         BL    MLMG&SYSNDX .               BRANCH IF YES
.BI052   ANOP
MLMA&SYSNDX   DS    0H .
         LR    1,4 .             TMID = PTR TO END POLE
         SR    1,3 .             TMID = END POLE - BEGIN POLE
         SRL   1,5 .              TMID = (BEGIN-END)/(2 * ENTLTH)
         SLL   1,4 .              ROUND MID-PT OFFSET TO A MULTIPLE
*                                  OF THE LENGTH OF AN ENTRY
         AR    1,3 .             TMID = PTR TO MID ENTRY
         CLC   &ARGOF.(&ARGLTH,2),&ARGOF.(1) .CHECK FOR REQUIRED ENTRY
         BE    MLMF&SYSNDX .            BRANCH IF ENTRY FOUND
         CR    3,1 .             BEGIN = MID POLE
.*
         AIF   ('&BUILD' EQ 'NO').BI064 BRANCH IF INSERTION NOT REQ'D
.*
         BE    MLMC&SYSNDX .       BRANCH IF YES -> NEW ENTRY REQUIRED
.*
         AGO   .BI068
.*
.BI064   ANOP
.*
         BE    MLMG&SYSNDX .        BRANCH IF YES -> NEW ENTRY REQUIRED
.*
.BI068  ANOP
.*
         CLC &ARGOF.(&ARGLTH,2),&ENTOF.(1) COMPARE ARGUMENT TO ENTRY
*                                        MID POINT
         BL    MLMD&SYSNDX .         BRANCH IF ARGUMENT IS LOW
*
         LR    3,1 .         NEW BEGIN POLE = CURRENT MID POLE
         B     MLMA&SYSNDX .        LOOK AT NEXT ENTRY
MLMD&SYSNDX      DS    0H .                ARGUMENT COMPARED LOW
         LR    4,1 .           NEW END POLE = CURRENT MID POLE
         B     MLMA&SYSNDX .       LOOK AT NEXT ENTRY
.*
         AIF   ('&BUILD' EQ 'NO').BI418  BRANCH IF NOT BUILD OPERATION
*
*        AT THIS POINT WE KNOW THAT A NEW ENTRY IS TO BE INSERTED INTO
*    THE TABLE.
*
.*
MLMC&SYSNDX     DS    0H .
         LA    3,&ENTLTH.(3) .         ADJUST PTR FOR ENTRY INSERTION
.*
MLMB&SYSNDX     DS    0H .
.*
*
*     HERE TBEG POINTS TO THE TABLE LOCATION WHERE THE ENTRY IS TO BE
*    INSERTED. WE MUST, HOWEVER, CHECK TO MAKE SURE THERE IS ROOM FOR
*    BEFORE ATTEMPTING TO INSERT IT.
*
         AIF   (&BS(2)).BI404     TEND IN REG NOTATION
         L     4,&TEND .          GET PTR TO CURRENT END OF TABLE
         AGO   .BI408
.BI404   ANOP
         LR    4,5 .              GET PTR TO CURRENT TABLE END
.BI408   ANOP
         AIF   (&BS(3)).BI412     AEND IN REG NOTATION
         C     4,&AEND .         IS THERE ROOM FOR ANOTHER ENTRY
         AGO   .BI416
.BI412   ANOP
         CR    4,6               IS THERE ROOM FOR ANOTHER ENTRY
.BI416   ANOP
         BE    &FULL .        BRANCH IF NOT
         LA    1,&ENTLTH.(4) .         UPDATE POINTER TO
         ST    1,TABEND .            NEW TABLE END
         LA    1,&ENTLTH .             TMID = ENTRY LENGTH
MLME&SYSNDX   DS    0H .
*
*        IN ORDER TO MAKE ROOM FOR THE NEW ENTRY WE MUST NOW SHIFT ALL
*    EXISTING TABLE ENTRIES UP ONE ENTRY IN THE TABLE FROM THE POINT OF
*    INSERTION TO THE END OF THE TABLE.
*
         MVC   &ENTLTH.(&ENTLTH,4),0(4) . MOVE AN ENTRY UP
*                                                 ONE TABLE SLOT
         SR    4,1 .             BACK UP ONE ENTRY
         CR    4,3 .             HAVE WE MOVED ALL ENTRIES YET
         BNL   MLME&SYSNDX .       BRANCH IF NOT
         LM    5,6,40(13) .        RESTORE REGS
         B     MLMG&SYSNDX .       EXIT
.BI418   ANOP
MLMF&SYSNDX DS    0H .
         LM    5,6,40(13) .        RESTORE REGISTERS
         AIF   (&BS(7)).BI420      BRANCH IF FOUND ROUTINE PRESENT
         SR    15,15 .             SET ZERO CONDITION CODE
         LTR   15,15 .             SET HARDWARE CODE
         AGO   .BI500
.BI420   ANOP
         B     &FOUND .            GO TO FOUND ROUTINE
.BI500   ANOP
MLMG&SYSNDX DS 0H .
         AIF   ('&BUILD' EQ 'YES').EXIT
         LM    5,6,40(13) .        RESTORE REGS
         MEXIT
.E1      MLMERR 16,1,DESC=TBEG TBEG NOT SPECIFIED
         MEXIT
.E2      MLMERR 16,1,DESC=TEND TEND NOT SPECIFIED
         MEXIT
.E3      MLMERR 16,2,DESC=BUILD INVALID 'BUILD' SPECIFICATION
         MEXIT
.E4      MLMERR 16,1,DESC=AEND AEND NOT SPECIFIED BUT REQUIRED
         MEXIT
.E5      MLMERR 16,1,DESC=FULL FULL REQUIRED FOR 'BUILD' FUNCTION
         MEXIT
.E6      MNOTE  16,'&ENTLTH. IS NOT SELF-DEFINING'
         MEXIT
.E7      MLMERR 16,1,DESC=ARG  ARG OPERAND REQUIRED
         MEXIT
.E8      MNOTE  16,'TMID NOT SPECIFIED IN REGISTER NOTATION'
         MEXIT
.E9      MLMERR 16,2,DESC=SEQ SEQUENCE OPERAND INVALID
         MEXIT
.E10     MLMERR 16,2,DESC=COMPARE COMPARE OPERAND INVALID
         MEXIT
.E11     MNOTE  16,'ARGOF OPERAND NOT SELF-DEFINING'
         MEXIT
.E12     MNOTE  16,'ENTOF OPERAND NOT SELF-DEFINING'
         MEXIT
.E13     MLMERR 16,1,DESC=ARGLTH ARGLTH REQUIRED BUT NOT SPECIFIED
         MEXIT
.E14     MNOTE  16,'ARGLTH OPERAND NOT SELF-DEFINING'
         MEXIT
.EXIT    MEXIT
         MEND
