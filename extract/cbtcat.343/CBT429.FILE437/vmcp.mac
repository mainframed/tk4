./ ADD NAME=VMCP        01 07 91213 97344 101131 0553 0538 0000 IBMUSER
++USERMOD(UMODXXX) REWORK(97120201)
  /* USERMOD TO ADD CP COMMAND TO MVS */.
++VER(Z038) FMID(HBB6604).
++MAC(DIAG)     DISTLIB(DUMMY) ASSEM(VMCPSSIN,VMCPSSCM) .
         MACRO
&LBL     DIAG   &RX,&RY,&CODE
.*--------------------------------------------------------------------*
.*                                                                    *
.* DIAG macro issues DIAGNOSE instruction   J.Jaeger, PA3EFU 17/04/87 *
.*                                                                    *
.*--------------------------------------------------------------------*
&LBL     DC     0H'0',X'83',AL.4(&RX,&RY),Y(&CODE)
.*--------------------------------------------------------------------*
.*                                                                    *
.*   The machine language format of DIAGNOSE is:                      *
.*                                                                    *
.*          <------ 4 bytes ------>                                   *
.*          +---------------------+                                   *
.*          × 83 × RxRy × B × DDD ×                                   *
.*          +---------------------+                                   *
.*          0    8      16  20    31                                  *
.*                                                                    *
.*   where (in general):                                              *
.*                                                                    *
.*    83:                                                             *
.*         is X'83', the machine language operation code for the      *
.*          DIAGNOSE instruction.                                     *
.*                                                                    *
.*    RxRy:                                                           *
.*         are the general purpose registers that contain the operand *
.*         values or operand storage addresses that will be passed    *
.*         through the DIAGNOSE interface. If Rx or Ry contains an    *
.*         address, it must be a second-level address (that is, an    *
.*         address in the storage that appears real to the issuing    *
.*         virtual machine.                                           *
.*                                                                    *
.*    B:                                                              *
.*         is the base register. IBM recommends that you specify the  *
.*         base register as zero.                                     *
.*                                                                    *
.*    DDD:                                                            *
.*         is the displacement value.                                 *
.*                                                                    *
.*                                                                    *
.* Notes:                                                             *
.*    1.   The effective address is not used to address data. The     *
.*         DIAGNOSE code equals the contents of the base reg plus     *
.*         the displacement. However, if the base reg is the reg      *
.*         0, its contents are not added to the displacement; the     *
.*         wish to remain  compatible with VM/SP when you issue a     *
.*         DIAGNOSE code from a virtual machine, IBM recommands that  *
.*         you always specify the base register as register 0.        *
.*         The DIAGNOSE code, or displacement, must always be a       *
.*         multiple of four.                                          *
.*                                                                    *
.*    2.   If the guest is an XA guest, VM/XA SF processes the        *
.*         addresses that you specify in Rx, Ry, Rx+1, and Ry+1 as    *
.*         31-bit addresses. If the guest is a 370 guest and running  *
.*         in EC mode, the addresses are also processed as 31-bit     *
.*         addresses. However, if the guest is a 370 guest and        *
.*         running in BC mode, VM/XA SF processes the address as      *
.*         24-bit addresses. To determine which registers contain     *
.*         second-level addresses (that is, addresses is storage that *
.*         appears real to the guest), see descriptions of the        *
.*         individual DIAGNOSE codes.                                 *
.*                                                                    *
.*    3.   Because DIAGNOSE instructions execute differently in a     *
.*         virtual machine than in a real machine, your program       *
.*         should determine that it is operating in a virtual machine *
.*         before issuing a DIAGNOSE instruction, and prevent         *
.*         execution of a DIAGNOSE when in a real machine. The only   *
.*         exeption to this is the execution of the MSSFCALL          *
.*         DIAGNOSE X'80' instruction. Refer to the discription of    *
.*         DIAGNOSE x'80' for a complete description of its use.      *
.*                                                                    *
.*         The Store Processor ID (STIDP) instruction provides your   *
.*         program with information about the processor in wich it is *
.*         executing, including the processor version number. If      *
.*         STDIP is issued from a virtual machine, the version number *
.*         will be X'FF' in the first byte of the CPUID field.        *
.*                                                                    *
.*    4.   A virtual machine issuing an I/O DIAGNOSE instruction      *
.*         should run with interrupts disabled. This prevents the     *
.*         loss of status information pertaining to the DIAGNOSE      *
.*         operation such as condition codes and sense data.          *
.*                                                                    *
.*                                                                    *
.*   For more information regarding the DIAGNOSE Instruction, refer   *
.*   to GC19-6215 "VM/XA SF CP Command and DIAGNOSE Code Reference",  *
.*   section 3.                                                       *
.*                                                                    *
.*--------------------------------------------------------------------*
         MEND
++SRC(VMCPSSIN) DISTLIB(DUMMY) .
VMCPSSIN CSECT ,
VMCPSSIN AMODE 31
VMCPSSIN RMODE ANY
         SAVE  (14,12),,VMCPSSIN-&SYSDATE-&SYSTIME-J.JAEGER
         LR    R12,R15
         USING VMCPSSIN,R12
*
         L     R11,0(,R1)              Pointer to SSCT
         USING SSCT,R11
         L     R10,4(,R1)              Pointer to JSIPL
         USING JSIPL,R10
*
         STORAGE OBTAIN,                                               X
               LENGTH=CORELEN,                                         X
               BNDRY=PAGE,                                             X
               SP=239
         ST    R13,4(,R1)              Chain save areas
         ST    R1,8(,R13)
         LR    R13,R1
         USING CORE,R13
*
         STIDP CPUID                   Check if we are running
         CLI   CPUID,X'FF'             in a virtual machine
         BNE   NOTVM
*
         STNSM SYSMASK,255-IEMASK      Disable external, I/O interrupt
         NI    SYSMASK,IEMASK          Save only I & E bits
         LRA   R2,SEICAREA             Real address of output area
         BC    CC1+CC2+CC3,SSINLRAE
         LA    R4,SEICLEN              Length of area
         DIAG  R2,R4,SEIC              Store Extended ID code
         IC    R1,SYSMASK              Load I & E bits
         EX    R1,STOSM                Reload I & E bits is psw
*
         LOAD  EP=VMCPSSSM,            Load subsystem support module   X
               GLOBAL=(YES,F),                                         X
               EOM=YES,                                                X
               ERRET=SSINFAIL
         SLR   R1,R1                   Activate subsystem
         CS    R1,R0,SSCTSSVT
         BNE   SSINFAIL
*
         MVC   WORKWTO,CP01I           Prepare for INIT OK message
         MVC   CP01S,VMSYSNAM          Copy VM product name
         MVC   CP01U,VMUSERID          Copy guest userid
         WTO   CART=JSICART,                                           X
               CONSID=JSICNSID,                                        X
               LINKAGE=BRANCH,                                         X
               MF=(E,WORKWTO)
*
         SLR   R3,R3
         ICM   R3,B'0001',JSILGTPR     Get lenght of user parm
         BZ    NOPARM                  Does a parameter exist??
         L     R2,JSIADRPR             Get info addr
*
         MVC   WORKMGCR,MGCR00I        Initialize MGCR
         MVC   CMDTEXT(L'CPCMD),CPCMD  Insert 'CP '
         STCK  CMDCART                 Generate CART
         BCTR  R3,0                    Decrement R3 for EX/MVC
         EX    R3,CMDCOPY              Copy parm
         LA    R3,L'CPCMD+1(,R3)       Increment to cmd len + token
         STH   R3,CMDLEN               Store length
         LA    R2,CMDLEN
         MGCRE TEXT=(2),               Issue command                   X
               CONSID=JSICNSID,                                        X
               CART=CMDCART,                                           X
               CMDFLAG=NOHCPY,                                         X
               MF=(E,WORKMGCR)
NOPARM   DS    0H
*
RETURN   DS    0H
         LR    R1,R13
         L     R13,4(,R13)             Recall R13 from savearea
         STORAGE RELEASE,                                              X
               LENGTH=CORELEN,                                         X
               SP=239,                                                 X
               ADDR=(1)
         RETURN (14,12),RC=0           Recall registers & return
*
NOTVM    DS    0H
         MVC   WORKWTO(CP00Z),CP00I    Issue NOT VM message
         WTO   CART=JSICART,                                           X
               CONSID=JSICNSID,                                        X
               LINKAGE=BRANCH,                                         X
               MF=(E,WORKWTO)
         B     RETURN
*
SSINFAIL DS    0H
         SDUMP HDR='VMCP SUBSYSTEM INITIALIZATION FAILED'
         B     RETURN
*
SSINLRAE DS    0H
         IC    R1,SYSMASK              Load I & E bits
         EX    R1,STOSM                Reload I & E bits is psw
         SDUMP HDR='VMCP LRA ERROR DURING INITIALIZATION'
         B     RETURN
*
CMDCOPY  MVC   CMDTEXT+L'CPCMD(0),0(R2)
STOSM    STOSM SYSMASK,0
*
CPCMD    DC    C'CP '
*
CP00I    WTO   'VMCP00I Not running in a Virtual Machine',             X
               MCSFLAG=(BRDCST,RESP),                                  X
               DESC=(4,5),                                             X
               CART=,                                                  X
               CONSID=,                                                X
               LINKAGE=,                                               X
               MF=L
CP00Z    EQU   *-CP00I
*
CP01I    WTO   'VMCP01I Running under vmsystem as user vmuserid',      X
               MCSFLAG=(BRDCST,RESP),                                  X
               DESC=(4,5),                                             X
               CART=,                                                  X
               CONSID=,                                                X
               LINKAGE=,                                               X
               MF=L
CP01S    EQU   WORKWTO+4+22,8,C'C'
CP01U    EQU   WORKWTO+4+39,8,C'C'
CP01Z    EQU   *-CP01I
*
MGCR00I  MGCRE MF=L
MGCR00Z  EQU   *-MGCR00I
*
         LTORG ,
*
         YREGS ,
CC0      EQU   B'1000'
CC1      EQU   B'0100'
CC2      EQU   B'0010'
CC3      EQU   B'0001'
*
SEIC     EQU   0                       Store Extended ID code
*
CORE     DSECT ,
SAVEAREA DS    18F                     Savearea MUST be first in DSECT
CPUID    DS    1D
CMDCART  DS    1D                      MGCRE CART
CMDLEN   DS    1H                      Command length
CMDTEXT  DS    CL126                   Command text
WORKWTO  DS    XL(CP01Z)               WTO work area
WORKMGCR DS    XL(MGCR00Z)             MGCR work area
SYSMASK  DS    X                       Area for STxSM
IEMASK   EQU   3                       Mask external and I/O
*
         DS    0D                      Allign on double word boundary
SEICAREA EQU   *
VMSYSNAM DS    CL8                     VM/XA system name (VM/XA SF)
VMRESV   DS    3X                      Reserved
VMVERS   DS    1X                      Version code (from STIDP)
VMMCEL   DS    1H                      MCEL for 370 resv. for XA
VMPADDR  DS    1H                      Proc addr. (from STAP)
VMUSERID DS    CL8                     UserID virtual machine
VMPRODM  DS    1D                      PP map (resv IBM)
VMTIMEZ  DS    1F                      GMT offset in seconds
VMSYSV   DS    4X                      VM/XA system version
SEICLEN  EQU   *-SEICAREA
*
CORELEN  EQU   *-CORE
*
         IEFJSIPL ,
         IEFJSCVT ,
*
         END   VMCPSSIN,(JAN JAEGER,0101,91213)
++SRC(VMCPJSVT) DISTLIB(DUMMY) .
VMCPJSVT CSECT ,
VMCPJSVT AMODE 31
VMCPJSVT RMODE ANY
         EXTRN VMCPSSCM
*                                      The CSECT VMCPJSVT is not
         ENTRY VMCPSSVT                used but its entry point
*                                      VMCPSSVT is used instead
*                                      This is to provide an
*                                      eye catcher in front of
*                                      the SSVT which is usefull
*                                      for debugging purposes.
JSVTID   DC    CL4'SSVT'
*
* This CSECT is the Subsystem Vector Table, it relates functions to
* function routines. The subsystem is active from the moment the
* address of the SSVT is nonzero in the SSCVT
*
VMCPSSVT DS    0D
JSVTRSV1 DC    H'0'                    Reserved
JSVTFNUM DC    AL2(1)                  Number of functions supported
JSVTFCOD DC    XL256'00'               Function matrix
*
         ORG   JSVTFCOD+SSOBCMND-1     SVC34 (operator command)
         DC    AL1((4+JSVTSSCM-JSVTFRTN)/4)
*
         ORG   ,
JSVTFSIZ EQU   *-VMCPSSVT
JSVTFRTN DS    0F
JSVTSSCM DC    A(VMCPSSCM+X'80000000')
JSVTSIZE EQU   *-VMCPSSVT
*
         IEFJSSOB CM
*
         END   VMCPSSVT,(JAN JAEGER,0101,91213)
++SRC(VMCPSSCM) DISTLIB(DUMMY) .
VMCPSSCM CSECT ,
VMCPSSCM AMODE 31
VMCPSSCM RMODE ANY
*
* This routine is called by the subsystem interface if the function
* id in the SSOB contains 10: the master subsystem notifies all
* other subsystems of the issuance of an operator command.
* The SSOB extension contains a pointer to the command input buffer.
*
         SAVE  (14,12),,VMCPSSCM-&SYSDATE-&SYSTIME-J.JAEGER
         LR    R12,R15                 Set up our own program base
         USING VMCPSSCM,R12            and make program relocatable
*
         LR    R11,R1                  Save pointer to the SSOB
         USING SSOB,R11
*
         L     R10,SSOBINDV            Pointer to extension
         USING SSCMBGN,R10
*
         L     R9,SSCMBUFF             Pointer to MGCR parm list
         USING MGCRPL,R9
*
         CLI   MGCRLGTH,L'CPCMD+4      Is the command lenght valid
         BNH   NOCPCMD
         CLC   CPCMD,MGCRTEXT          Is this a CP command
         BNE   NOCPCMD
*
         STORAGE OBTAIN,                                               X
               LENGTH=CORELEN,                                         X
               BNDRY=PAGE,                                             X
               SP=239
         LR    R8,R1                   Obtain work area & chain
         LA    R1,2048(,R8)            save areas
         LA    R1,2048(,R1)
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING CORE,R8,R13
*
         CMDAUTH ENTITY=CPPROF,        Profile name                    X
               ATTR=READ,              ACCESS(READ)                    X
               CNTLBLK=(10),           SSCM base                       X
               CBLKTYPE=SSCM,                                          X
               MF=(E,CMDAUTH)
         LTR   R15,R15
         BZ    AUTHOK
         CH    R15,=H'4'               RACF could not determine
         BP    CMDNOTEX                Higher means no access or worse
*
         TM    SSCMDISP,SSCMMC         Test for master console
         BZ    CMDNOTEX                No master then do not execute
*
AUTHOK   DS    0H
         IC    R6,MGCRLGTH             Copy CP command to buffer
         SL    R6,=A(L'CPCMD+1+4)      Go to machine length
         EX    R6,MGCRCPY              Copy command
         LA    R6,1(,R6)               Back to real length
*
         ICM   R6,B'1110',=AL3(X'400000')  Request response
         L     R7,=A(L'RESPBUFF)       Size of response buffer
*
         STNSM SYSMASK,255-IEMASK      Issue DIAGNOSE disabled
         NI    SYSMASK,IEMASK          Save I & E bits only
         LRA   R4,CMDBUFF              Real address of cmd buff
         BC    CC1+CC2+CC3,SSCMLRAE
         LRA   R5,RESPBUFF             Real address of resp buff
         BC    CC1+CC2+CC3,SSCMLRAE
         SLR   R2,R2                   Zero to indicate buff ok
         DIAG  R4,R6,VCON              Call CP
         BZ    BUFFOK
         LA    R2,1                    Buffer overflow indicator
         L     R7,=A(L'RESPBUFF)
BUFFOK   DS    0H
*
         IC    R1,SYSMASK              Load I & E bits
         EX    R1,STOSM                Enable External & I/O ints
*
* R5 contains number of bytes lost
* R6 contains the return code from CP
* R7 contains the number of bytes is the response buffer
*
         LTR   R2,R2                   Check buffer overflow
         BNZ   BUFFOVF
         MVC   WTOWORK(CP10Z),CP10I
         WTO   CART=SSCMCART,          Issue command accepted msg      X
               CONSID=SSCMCNID,                                        X
               LINKAGE=BRANCH,                                         X
               MF=(E,WTOWORK)
         B     CLDONE
BUFFOVF  DS    0H
         MVC   WTOWORK(CP11Z),CP11I
         WTO   CART=SSCMCART,          Issue buffer overflow msg       X
               CONSID=SSCMCNID,                                        X
               LINKAGE=BRANCH,                                         X
               MF=(E,WTOWORK)
CLDONE   DS    0H
         ST    R1,WTOID                Store WTOID for MLWTO
*
         LA    R3,RESPBUFF             Virtual address of resp buff
         LA    R7,0(R7,R3)             Add length of buffer
         BCTR  R7,0                    Point to last character
WTOLOOP  DS    0H
         LR    R1,R7                   Load end-of-buff address
         SLR   R1,R3                   Subtract start-of-buffer
         CH    R1,=Y(WLEN-1)           Too long for one line?
         BL    LLENOK                  If so,
         LA    R1,WLEN-1                 then limit the length
LLENOK   DS    0H
         LA    R6,1(,R1)               Set R6 to real length
         EX    R1,EOLTRT               Find end-of-line character
         BZ    NOEOL
         SLR   R1,R3                   If end-of-line character
         LA    R6,1(,R1)                 then set R6 to line-length
         BCTR  R1,0                      and set R1 to mach length
NOEOL    DS    0H
         LTR   R1,R1                   Ignore null lines
         BM    SKIPLINE
         MVC   WTOWORK,WTOBODY         Initialize WTO work area
         EX    R1,LINECPY              Copy line
         WTO   CONNECT=WTOID,          Write to operator               X
               CART=SSCMCART,                                          X
               LINKAGE=BRANCH,                                         X
               MF=(E,WTOWORK)
SKIPLINE DS    0H
         BXLE  R3,R6,WTOLOOP           Loop thru resp buffer
*
         MVC   WTOWORK(CP12Z),CP12I
         WTO   CONNECT=WTOID,          Terminate MLWTO                 X
               CART=SSCMCART,                                          X
               LINKAGE=BRANCH,                                         X
               MF=(E,WTOWORK)
*
* Set returncode indicating command was executed.
*
CMDCMPLT DS    0H
         LA    R15,SSCMSUBC            Indicate subsystem processed cmd
         B     EXIT                    Return to caller
*
* LRA error
*
SSCMLRAE DS    0H
         IC    R1,SYSMASK              Load I & E bits
         EX    R1,STOSM                Enable External & I/O ints
         SDUMP HDR='VMCP LRA ERROR DURING COMMAND PROCESSING'
         B     SSCMNEXE
*
* Set returncode indicating command was not executed
*
CMDNOTEX DS    0H
         MVC   WTOWORK(CP13Z),CP13I
         WTO   CART=SSCMCART,          Issue no auth message           X
               CONSID=SSCMCNID,                                        X
               LINKAGE=BRANCH,                                         X
               MF=(E,WTOWORK)
SSCMNEXE DS    0H
         LA    R15,SSCMIMSG            Indicate error
         B     EXIT                    Return to caller
*
* Set returncode indicating command not CP command (let SVC34
* handle it).
*
NOCPCMD  DS    0H
         LA    R15,SSCMSCMD            Give command back to SVC34
         ST    R15,SSOBRETN            Save in SSOB
         B     RETURN                  Return to SSI caller
*
* Store the returncode in the SSOB returncode field and exit.
*
EXIT     DS    0H
         ST    R15,SSOBRETN            Put returncode in SSOB
*
OPEXIT   DS    0H
         L     R13,4(,R13)             Recall R13 from savearea
         STORAGE RELEASE,                                              X
               LENGTH=CORELEN,                                         X
               SP=239,                                                 X
               ADDR=(8)
RETURN   DS    0H
         RETURN (14,12),RC=0           Recall registers & return
*
MGCRCPY  MVC   CMDBUFF(0),MGCRTEXT+L'CPCMD
EOLTRT   TRT   0(0,R3),EOLTAB
LINECPY  MVC   WTOWORK+4(0),0(R3)
STOSM    STOSM SYSMASK,0
*
CPPROF   DC    CL39'MVS.CP'            SAF profile name
CPPREF   EQU   CPPROF,4,C'C'           SAF PREFIX
CPCMD    EQU   CPPROF+4,3,C'C'         CP command
*
CP10I    WTO   ('VMCP10I CP command accepted',C),                      X
               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L
CP10Z    EQU   *-CP10I
*
CP11I    WTO   ('VMCP11I CP response buffer overflow',C),              X
               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L
CP11Z    EQU   *-CP11I
*
CP12I    WTO   ('VMCP12I All data displayed',E),                       X
               CONNECT=,CART=,LINKAGE=,MF=L
CP12Z    EQU   *-CP12I
*
CP13I    WTO   'VMCP13I Insufficient authority',                       X
               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L
CP13Z    EQU   *-CP13I
*
WTOBODY  WTO   ('                                                      X
                                ',D),                                  X
               CONNECT=,CART=,LINKAGE=,MF=L
WTOLEN   EQU   *-WTOBODY
*
EOLTAB   DC    256X'00'                Translate table to find EOL
         ORG   EOLTAB+X'15'              character
         DC    X'15'
         ORG   ,
*
         LTORG ,
*
VCON     EQU   8                       Virtual Console Function code
WLEN     EQU   71                      Max linelength for WTO
*
CORE     DSECT ,
RESPBUFF DS    CL4096
SAVEAREA DS    18F                     Savearea MUST be at loc. 4096
CMDBUFF  DS    CL140
WTOID    DS    1F
WTOWORK  DS    XL(WTOLEN)
SYSMASK  DS    X
IEMASK   EQU   3
         CMDAUTH MF=(L,CMDAUTH,NODSECT)
CORELEN  EQU   *-CORE
*
         YREGS ,
CC0      EQU   B'1000'
CC1      EQU   B'0100'
CC2      EQU   B'0010'
CC3      EQU   B'0001'
         IEZMGCR ,
         IEFJSSOB CM
*
         END   VMCPSSCM,(JAN JAEGER,0101,91213)
++JCLIN .
//LINKSSIN JOB ,
//VMCPSSIN EXEC PGM=IEWL,
//          PARM='LIST,XREF,NCAL,REFR'
//SYSLMOD  DD  DSN=LINKLIB
//SYSLIN   DD  *
  INCLUDE SYSLIB(VMCPSSIN)
  ENTRY VMCPSSIN
  NAME VMCPSSIN(R)
//LINKSSSM EXEC PGM=IEWL,
//          PARM='LIST,XREF,NCAL,REFR,OL'
//SYSLMOD  DD  DSN=LINKLIB
//SYSLIN   DD  *
  INCLUDE SYSLIB(VMCPJSVT)
  INCLUDE SYSLIB(VMCPSSCM)
  ORDER VMCPJSVT,VMCPSSCM
  ENTRY VMCPSSVT
  NAME VMCPSSSM(R)
