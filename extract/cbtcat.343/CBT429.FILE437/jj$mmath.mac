./ ADD NAME=JJ$MMATH    01 00 94332 94339 110649 0154 0154 0000 T2JJ
 MATHFUNC: PROC(EFPLCOM,EFPLBARG,EFPLEARG,EFPLFB,EFPLARG,EFPLEVAL)
               OPTIONS(MAIN REENTRANT NOEXECOPS) ORDER;
1/********************************************************************/
 /*                                                                  */
 /*  EFPL - EXTERNAL FUNCTIONS PARAMETER LIST                        */
 /*                                                                  */
 /********************************************************************/
 DCL
   EFPLCOM  PTR,
   EFPLBARG PTR,
   EFPLEARG PTR,
   EFPLFB   PTR,
   EFPLARG  PTR,                        /* ADDRESS OF ARGTABLE_ENTRY */
   EFPLEVAL PTR;                  /* POINTER TO ADDRESS OF EVELBLOCK */
1/********************************************************************/
 /*                                                                  */
 /*  EVALBLOCK - REXX EVALUATION BLOCK                               */
 /*                                                                  */
 /********************************************************************/
 DCL
   EVALBLOCK_PTR PTR BASED(ADDR(EFPLEVAL)),
   1 EVALBLOCK BASED(EVALBLOCK_PTR),
     2 EVPAD1 FIXED BINARY(31),
     2 EVSIZE FIXED BINARY(31),              /* SIZE IN DOUBLE WORDS */
     2 EVLEN  FIXED BINARY(31),                    /* LENGTH OF DATA */
     2 EVPAD2 FIXED BINARY(31),
     2 EVDATA CHAR(250);                                   /* RESULT */
1/********************************************************************/
 /*                                                                  */
 /*  ARGTABLE_ENTRY - REXX ARGUMENT TABLE                            */
 /*                                                                  */
 /********************************************************************/
 DCL
   1 ARGTABLE_ENTRY              BASED(ADDR(EFPLARG)),
     2 ENTRY_CHAR1      CHAR(8),
     2 ENTRY_CHAR2      CHAR(8),
 %IF MATHFUNC = 'ATAN' × MATHFUNC = 'ATAND' %THEN
   %DO;
     2 ENTRY_CHAR3      CHAR(8),
   1 ENTRY1                      BASED(ADDR(ENTRY_CHAR1)),
     2 ARGSTRING_PTR1      PTR,        /* ADDRESS OF ARGUMENT STRING */
     2 ARGSTRING_LENGTH1   FIXED BINARY(31),               /* LENGTH */
   1 ENTRY2                      BASED(ADDR(ENTRY_CHAR2)),
     2 ARGSTRING_PTR2      PTR,        /* ADDRESS OF ARGUMENT STRING */
     2 ARGSTRING_LENGTH2   FIXED BINARY(31);               /* LENGTH */
   %END;
 %ELSE
   %DO;
   1 ENTRY1                      BASED(ADDR(ENTRY_CHAR1)),
     2 ARGSTRING_PTR1      PTR,        /* ADDRESS OF ARGUMENT STRING */
     2 ARGSTRING_LENGTH1   FIXED BINARY(31);               /* LENGTH */
   %END;
1/********************************************************************/
 /*                                                                  */
 /*  ARGSTRING - REXX ARGUMENT STRING                                */
 /*                                                                  */
 /********************************************************************/
 DCL
 %IF MATHFUNC = 'ATAN' × MATHFUNC = 'ATAND' %THEN
   %DO;
   ARGSTRING1   CHAR BASED(ARGSTRING_PTR1),
   ARGSTRING2   CHAR BASED(ARGSTRING_PTR2);
   %END;
 %ELSE
   %DO;
   ARGSTRING1   CHAR BASED(ARGSTRING_PTR1);
   %END;
1/********************************************************************/
 /*                                                                  */
 /*  ARGTABLE_END - REXX ARGUMENT TABLE END                          */
 /*                                                                  */
 /********************************************************************/
 DCL ARGTABLE_END CHAR(8) STATIC INIT('FFFFFFFFFFFFFFFF'X);
1/********************************************************************/
 /*                                                                  */
 /*  RUNTIME OPTIONS                                                 */
 /*                                                                  */
 /********************************************************************/
 DCL PLIXOPT CHAR(6) VAR INIT('NOSTAE') STATIC EXTERNAL;
1/********************************************************************/
 /*                                                                  */
 /*  MAINLINE VARIABLES                                              */
 /*                                                                  */
 /********************************************************************/
 DCL
   RESULT     PICTURE 'S9V.(15)9ES99',             /* RESULT OF FUNC */
   ARG1_CHAR  CHAR(ARGSTRING_LENGTH1),            /* ARGUMENT PASSED */
   ARG1_FLOAT FLOAT(16),                   /* FLOAT COPY OF ARGUMENT */
 %IF MATHFUNC = 'ATAN' × MATHFUNC = 'ATAND' %THEN
   %DO;
   ARG2_CHAR  CHAR(ARGSTRING_LENGTH2),            /* ARGUMENT PASSED */
   ARG2_FLOAT FLOAT(16),                   /* FLOAT COPY OF ARGUMENT */
   %END;
   ADDR       BUILTIN,
   LENGTH     BUILTIN,
   SUBSTR     BUILTIN,
   PLIRETC    BUILTIN,
   MATHFUNC   BUILTIN;
1/********************************************************************/
 /*                                                                  */
 /*  MAINLINE - MATHFUNC                                             */
 /*                                                                  */
 /********************************************************************/
 ON ERROR GO TO EXIT;  /* EVLEN WILL BE X'80000000' NO DATA RETURNED */
 %IF MATHFUNC = 'ATAN' × MATHFUNC = 'ATAND' %THEN
   %DO;
 IF ENTRY_CHAR1 ^= ARGTABLE_END THEN
  DO;
    ARG1_CHAR = SUBSTR(ARGSTRING1,1,ARGSTRING_LENGTH1);
    IF ENTRY_CHAR2 = ARGTABLE_END THEN
      DO;
        ARG1_FLOAT = ARG1_CHAR;
        RESULT = MATHFUNC(ARG1_FLOAT);
        IF EVSIZE*8-16 >= LENGTH(RESULT) THEN
          DO;
            SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;
            EVLEN = LENGTH(RESULT);
          END;
      END;
    ELSE
      DO;
        IF ENTRY_CHAR3 = ARGTABLE_END THEN
          DO;
            ARG2_CHAR = SUBSTR(ARGSTRING2,1,ARGSTRING_LENGTH2);
            ARG1_FLOAT = ARG1_CHAR;
            ARG2_FLOAT = ARG2_CHAR;
            RESULT = MATHFUNC(ARG1_FLOAT,ARG2_FLOAT);
            IF EVSIZE*8-16 >= LENGTH(RESULT) THEN
              DO;
                SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;
                EVLEN = LENGTH(RESULT);
              END;
          END;
        ELSE
          CALL PLIRETC(8);              /* INCORRECT CALL TO ROUTINE */
      END;
   %END;
 %ELSE
   %DO;
 IF ENTRY_CHAR1 ^= ARGTABLE_END & ENTRY_CHAR2 = ARGTABLE_END THEN
   DO;
     ARG1_CHAR = SUBSTR(ARGSTRING1,1,ARGSTRING_LENGTH1);
     ARG1_FLOAT = ARG1_CHAR;
     RESULT = MATHFUNC(ARG1_FLOAT);
     IF EVSIZE*8-16 >= LENGTH(RESULT) THEN
       DO;
         SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;
         EVLEN = LENGTH(RESULT);
       END;
   %END;
   END;
 ELSE
   CALL PLIRETC(8);                     /* INCORRECT CALL TO ROUTINE */
 EXIT: END MATHFUNC;
