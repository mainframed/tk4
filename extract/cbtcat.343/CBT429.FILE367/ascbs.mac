/* rexx **************************************************************
 *                                                                   *
 * This exec will show active address spaces and their current       *
 * storage frame counts.                                             *
 *                                                                   *
 * Matt Bressler                                                     *
 *********************************************************************/

loc = @l(16)                         /* a(cvt) */
asvt = @l(,22C,loc)                  /* a(asvt) */
asvtmaxu = x2d(@l(,204,asvt))        /* asvtmaxu */
asvt = @la(,210,asvt)                /* asvtenty */

say 'There are' asvtmaxu 'asids defined on this system'

asidtab. = 0
sorttab. = 0
do asid = 1 to asvtmaxu
   sorttab.asid = asid
   if bitand(storage(asvt,1),'80'x) <> '80'x then do
      ascb = @l(,,asvt)
      jobname = @l(,AC,ascb)
      if jobname = 0 then
         jobname = @l(,B0,ascb)
      jobname = storage(jobname,8)
      rax = @l(,16c,ascb)
      raxfmct = x2d(@l(,2C,rax))
      asidtab.asid = asid
      jobntab.asid = jobname
      fmcttab.asid = raxfmct
      say 'ASID('format(asid,3)') NAME('××,
          jobname') FMCT('raxfmct')'
   end  /* if asid is in use */
   asvt = @la(4,,asvt)   /* point to next asvtenty */
end  /* do all asids */

/* sort descending on frame count */
do outer = 1 to asvtmaxu-1
   do inner = outer+1 to asvtmaxu
      ptrinner = sorttab.inner
      ptrouter = sorttab.outer
      if fmcttab.ptrinner > fmcttab.ptrouter then do
         holder = sorttab.outer
         sorttab.outer = sorttab.inner
         sorttab.inner = holder
      end
   end
end

/* display the sorted tables */
say ' '
say 'Table displayed in sorted order, descending by framecount'
do asid = 1 to asvtmaxu
   ptr = sorttab.asid
   if asidtab.ptr <> 0 then
      say 'ASID('format(ptr,3)') NAME('××,
          jobntab.ptr') FMCT('fmcttab.ptr')'
end
exit 0
 /* C O P Y  C O D E  - level 1.5 - Matt Bressler                     */
 /*********************************************************************
  * This function mimics the assembler "LA" instruction by returning  *
  * the sum of the three passed arguments:                            *
  *    1) decimal "displacement"                                      *
  *    2) hex "index"                                                 *
  *    3) hex "base"                                                  *
  * The sum is represented in hex format which can be used as input   *
  * to the STORAGE function.                                          *
  *********************************************************************/
  @la: procedure
    return right('00000000'××addemup(arg(1),arg(2),arg(3)),8)
 /*********************************************************************
  * This function mimics the assmembler "L" instruction by returning  *
  * the fullword of storage at the address represented by the three   *
  * arguments.  See @la for a description.                            *
  *********************************************************************/
  @l: procedure
    return c2x(storage(addemup(arg(1),arg(2),arg(3)),4))
 /*********************************************************************
 * This function mimics the assmembler "LH" instruction by returning *
 * the halfword of storage at the address represented by the three   *
 * arguments.  See @la for a description.                            *
 *********************************************************************/
 @lh: procedure
   return c2x(storage(addemup(arg(1),arg(2),arg(3)),2))
/*********************************************************************
 * This function mimics the assmembler "IC" instruction by returning *
 * the byte of storage at the address represented by the three       *
 * arguments.  See @la for a description.                            *
 *********************************************************************/
 @ic: procedure
   return c2x(storage(addemup(arg(1),arg(2),arg(3)),1))
/*********************************************************************
 * This routine adds the arguments for @la, @l, @lh, and @ic.        *
 *********************************************************************/
 addemup: procedure
   numeric digits 10
   arg disp,index,base
   a = 0
   if disp <> "" then
      a = a + disp
   if index <> "" then
      a = a + x2d(index)
   if base <> "" then
      a = a + x2d(base)
   return d2x(a)
