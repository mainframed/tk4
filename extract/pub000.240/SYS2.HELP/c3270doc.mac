 Hercules
  MVS Add-Ons: Documentation by Wolfgang Schaefer


C3270 - Full Screen 3270 Output for CLISTs

This package contains only one TSO command: C3270 - this was derived fro
the KOMM command processor that I found on CBT File 300 (of the CBT249
archive). C3270 has one small modification to KOMM: if you read more tha
one field from the screen, C3270 uses a character that can be recognized
a CLIST (the vertical bar, "×"). The original KOMM left the x'11' in it
no way to find the end of the field from a MVS 3.8 CLIST then ... be awa
the vertical bar is code page sensitive! On a german keyboard (codepage)
would be the "!" ...

This documentation is not intended to be an introduction to CLISTs (I'll
write that one later in the 'tutorials' section of my website) but focus
on C3270: Produce full screen 3270 displays fast and (relative) easy!

Some more notes on this document:

When I started to write this documentation, I had to play around with C3
and since that's useful with CLISTs, I had to figure out how much of
today's CLIST features were present in MVS 3.8 - unfortunately a lot of
them are missing. CLIST has never been a real good procedure language
(that's why OS/390 people use REXX now), but in the bad old times even a
lot of the 'minimal' functions were missing. Anyway, it's much better th
CLIST under MVT :-))

Although the standard file attribute for CLIST was VB (variable blocked)
with a (maximum) record length of 255 at the MVS 3.8 time, I use FB 80
CLIST datasets - that enables me to edit them with RPF or FSE. The fixed
block/lrecl 80 approach also allows to enter CLISTs with an
IEBUPDTE/IEBGENER job on the card reader, VB would have the need for a
'tape' ...

And a last (personal) note: I got around the 3270 data stream for almost
years ... now it was the first time. that I really had to deal with it.
please forgive any mistakes that I might have taken here ...

Table of Contents

-  Installation
-  C3270 Syntax
  -'Escape Sequences'
  -Attribute Characters
-  General Usage Notes
-  Examples
  -Example 1 - Full Screen 'logo'
  -Example 2 - Output and Input
  -Example 3 - Output and Input - Parse Input Into Separate Fields
  ----------------------------------------------------------------------

Installation

The installation package contains 4 jobs. The first two jobs must be run
From the third and fourth job you may choose to run only one (see below)

 Job             Description

 01_src.txt      This jobs installs the C3270 source code into CBT300.AS
                 You may choose to create a new library. In this case,
                 review the JCL and make the appropriate changes to
                 allocate a new dataset.

 02_asm.txt      This job will assemble C3270 to CBT300.OBJ. You may
                 choose to create a new library. In this case, review th
                 JCL and make the appropriate changes to allocate a new
                 dataset.

 03_lnklink.txt  This job will link C3270 to the linklist library
                 SYS2.LINKLIB. If you chose to install C3270 into the LP
                 (which gives much better performance), you will not nee
                 to run this job. Use 04_lpalib.txt instead. Anyway: If
                 you install into the LPA and into the LINKLIST, the LPA
                 version will be found first, so it doesn't matter if yo
                 run both jobs :-)

 04_lpalib.txt   This job will link C3270 to the linklist library
                 SYS1.LPALIB. If you chose to install C3270 this way, yo
                 will not be able to use it before you do an IPL and ent
                 the 'CLPA' parameter at the system parameter prompt. If
                 you also run 03_lnklink.txt and install into the linkli
                 as well, you can start to use C3270 immeadiately. Note:
                 For performance reasons (even for a single user system)
                 highly recommend to install it into LPA.

                 Now you are ready to use the C3270 - if you installed
 *ready*         only into SYS1.LPALIB, you need to IPL your system with
                 CLPA

Start of page

  ----------------------------------------------------------------------

C3270 Syntax

I did not supply a separte help member for C3270. The syntax is the same
for KOMM from CBT300 (use HELP KOMM to look at that documentation).

First, let's look at the basic syntax:

    C3270 [WCC('CHAR')]
          [RESET('LINE')]
          [CLEAR]
          [MESSAGE('ROW','COL','MESS')]
          [CURSOR('ROW','COL')]
          [READTO('VAR')]
          [ASIS]
          [GETSIZE]
          [TRANSADD]
          [NOEDIT]


WCC      The write control character that is used to put the message to
         the terminal. Default: C, Note that the default will reset the
         MDT bit of all input fields to 'not modified' (MDT = Modified
         Data Tag) - this would enable a CLIST to tell which fields were
         changed by the user, but the actual data would not be transmitt
         back from the 3270. Use WCC(B) to prevent the 3270 from resetti
         MDT tags.

RESET    The reset parameter may be used to specify the line on which
         'normal' CLIST output is resumed after your C3270 messages. The
         default is 1. If you are using full screen displays I would
         recommend to do a 'C3270 CLEAR' at the end of full screen
         processing anyway, ...

CLEAR    If you specify the clear parameter, the 3270 screen will be
         cleared, before you message is output to the screen (and/or the
         readto request is raised). This gives you the opportunity to us
         a C3270 as a simple 'clear screen command': just use 'C3270
         CLEAR'

MESSAGE  This is the most important part of the command. With the MESSAG
         parameter you say what should be written on the screen. The (no
         optional) ROW/COL sub parameters allow you to specify the scree
         position to which the data should be written. The message may
         contain some special character sequences (explained later in th
         chapter), that can be used to get further control on the format
         of the message written to the 3270: protect data, create input
         fields, ...

CURSOR   Will position the cursor to the given row, column after the
         write, but before an (eventual) read operation.

READTO   Allows you to specify the variable name where input is stored.
         you do not specify the READTO parameter, C3270 will not request
         any input from the terminal. If you specify READTO, the user mu
         at least press enter (or hit any other key that initiates a
         transmission from the 3270).
         Note that you must 'preformat' the variable. That means C3270
         will use the current length of the variable as the maximum numb
         of bytes to transfer. The maximum length of all input fields
         transferred to this variable is limited to 256 bytes. (Yes,
         that's a restriction since the program uses MVC)

ASIS     Applies to calls where the READTO is also set: If ASIS (or AI)
         specified, C3270 will not strip of the first 3 Bytes of the inp
         (SBA - for C3270 '×' and two bytes with the input field positio
         (in 3270 format)

GETSIZE  Store the current screen dimensions in CLIST variables C3270ROW
         and C3270COL. These variables must have been initialized to
         three-character strings prior to running C3270 with the GETSIZE
         operand.

TRANSADD interpret six bytes following an SBA, EUA or RA order in the
         MESSAGE operand or the CLIST variable defined through the
         READTO operand as two three digit EBCDIC encoded numbers
         defining a row and a column. The corresponding 3270 buffer
         address for the current screen width is calculated from these
         numbers on output. On input these numbers are calculated from
         the 3270 buffer address received. It should be noted that
         specifying an address as row/column using the TRANSADD operand
         allows to address any position on screens of arbitrary
         dimensions, while the 3270 buffer address characters that are
         to be specified when TRANSADD isn't used are recalculated assum
         an 80 character screen width for compatibility with older
         c3270 versions.

NOEDIT   use TPUT NOEDIT instead of TPUT FULLSCR for output and set
         STFSMODE ON,NOEDIT=YES on input. This enables usage of the
         SFE and MF extended datastream orders. Note that on MVS 3.8j
         NOEDIT isn't supported out of the box. Usermod ZP60009
         (provided by Greg Price) enables NOEDIT support for VTAM but
         not for TCAM terminals on MVS 3.8j.

'Escape Sequences'

As noted on the MESSAGE parameter, C3270 will not always put the exact
message on the screen. By using some special characters (C/Unix people m
call them 'escape sequences'), you can get more control the appearance o
your message.

The cent sign 'Ö', X'4A' in EBCDIC - be aware of code page problems !!!
e.g. with a german code page it would be an uppercase A-Umlaut (Â) ... -
tells C3270 that the next character should be translated with the follow
table:

Char  Description        EBCDIC   3270 Order        Meaning
                         Hex      or
                                  TSO
                                  'problem-char'
_     (underscore)       x'6d'    3270 IC           Insert Cursor Order
                                                    (3270)
-     (minus)            x'60'    3270 SBA          SET BUFFER ADDRESS -
                                                    must be followed by
                                                    the 2 character 3270
                                                    buffer address
×     (vertical bar      x'6a'    3270 SF           Start field: This is
      -US CP, 'á' on                                probably the most
      german codepage)                              important one, since
                                                    you can start a new
                                                    3270 'field' with it
                                                    A 3270 field may be
                                                    input, protected, an
                                                    additonally the
                                                    display attribute
                                                    (bright, normal,
                                                    invisible). For more
                                                    information on SF
                                                    attributes see the
                                                    table below ....
*     (asterisk)         x'5c'    3270 NULL         A NULL character (th
                                                    is important for inp
                                                    fields, even if the
                                                    terminal user doesn'
                                                    see the difference t
                                                    a blank character, h
                                                    'smells' it when the
                                                    insert key is hit:
                                                    NULLs are shifted ou
                                                    spaces are not.
#     (hash, number      x'7b'    3270 RA           Repeat character ode
      sign)                                         for example 'C3270
                                                    MESS(10,40,'Ö#  Z')
                                                    would fill the scree
                                                    from line 10 col 40
                                                    the bottom of the
                                                    display with letter
                                                    'Z'
ò     (paragraph)        x'7c'    3270 EUA          ???
.     (dot)              x'4b'    3270 PT           Tab forward ('progra
                                                    tab')
<     (greater than)     x'4c'    TSO (
>     (less than)        x'6e'    TSO )
"     (apost)            x'7f'    TSO '
/     (slash)            x'61'    TSO              (hex 5f) - the 'not'
                                                    symbol for TSO
:     (colon)            x'7a'    TSO ??            ??
A                        x'c1'    TSO 'broken bar'  X'6a'
B                        x'c2'    TSO ,             comma, x'6b'

I haven't really worked with the TSO problem characters (if they are in
string, they are interpreted by TSO CLIST ...) but at least the 3270
characters work ...

Attribute Characters

After a SF (start field) order, the next byte is interpreted as a 3270
attribute. Note that the attribute takes one byte on the user's display
your actual input/output field will start one byte after it ....

The attributes are put together from five kinds of information:

   * Protection
        o Unprotected: input fields, the user may overtype any data
        o Protected: output only
   * Display type
        o NORMAL (blue for protected fields, green for input)
        o INTENS (white for protected fields, red for input)
        o NON (invisible, makes only sense for input (?))
   * Pen-detectable/Non-Pen detectable
     This comes from an old input device: the light pen, you could see t
     as an early 'point and click' device. I have no idea if any of the
     current emulators still understands it and I have only seen the lig
     pen in practice once ... PEN DETECT means that the user has 'clicke
     on this field ...
   * MDT/NOMDT
     This handles the previously mentioned 'Modified Data Tag' - normall
     applications fill the output fields with some defaults. For some
     applications it is important to see if the user has modified the in
     or not: MDT/NOMDT will allow this. If you set the MDT attribute, th
     field will be transferred back to the application, MDT OFF will cau
     the 3270 not to transfer back the content of the input field if the
     user did not change. For CLIST applications you'll probably always
     want to set MDT ON since otherwise the parsing of the input buffer
     could be a real pain.
   * ASKIP - autoskip
     This bit defines some comfort (or problem) to the user. It defines
     the cursor behaves if the data typed in by the user reaches the end
     the previous field. ASKIP says 'jump to the next input field and
     continue input there ....'. If ASKIP is not set, the screen will lo
     and the user will have to press reset (and use TAB or any other cur
     movement to move on to the next field.

The following table shows a list of some of the possible attributes. The
rightmost column in the list shows the character that you must enter aft
the <cent><sf> order - using the US codepage - (see examples) question
marks show attributes characters that I did not verify ... ???? marks
characters that I do not know how to type them in - hopefully these
attributes are not really needed.

UNPROT INTENS   PEN   MDT       1100 1001     C9 I
UNPROT INTENS   PEN NOMDT       1100 1000     C8 H
UNPROT NORMAL   PEN   MDT       1100 0101     C5 E
UNPROT NORMAL   PEN NOMDT       1100 0100     C4 D
UNPROT NORMAL NOPEN   MDT       1100 0001     C1 A
UNPROT NORMAL NOPEN NOMDT       1100 0000     C0 {?
UNPROT NON    NOPEN   MDT       1100 1101     CD ????
UNPROT NON    NOPEN NOMDT       1100 1100     CC ????
  PROT INTENS   PEN   MDT       1110 1001     E9 Z
  PROT INTENS   PEN NOMDT       1110 1000     E8 Y
  PROT NORMAL   PEN   MDT       1110 0101     E5 V
  PROT NORMAL   PEN NOMDT       1110 0100     E4 U
  PROT NORMAL NOPEN   MDT       1110 0001     E1 ????
  PROT NORMAL NOPEN NOMDT       1110 0000     E0 ????
  PROT INTENS   PEN   MDT ASKIP 1111 1001     F9 9
  PROT INTENS   PEN NOMDT ASKIP 1111 1000     F8 8
  PROT NORMAL   PEN   MDT ASKIP 1111 0101     F5 5
  PROT NORMAL   PEN NOMDT ASKIP 1111 0100     F4 4
  PROT NON    NOPEN   MDT ASKIP 1111 1101     FD ????
  PROT NORMAL NOPEN   MDT ASKIP 1111 0001     F1 1
  PROT NORMAL NOPEN NOMDT ASKIP 1111 0000     F0 0
  PROT NON    NOPEN   MDT       1110 1101     ED ????

Start of page

  ----------------------------------------------------------------------

General Usage Notes

Be aware: incorrect use of charaters in the message may leed to 'screen
lock' situations - typically with a PROGxxx message in the operator
information area (line 25 of the 3270 display). Normally these can be
solved with a 'reset' - but sometimes you may have to close the terminal
window and reconnect to the system.

Start of page

  ----------------------------------------------------------------------

Examples

This section will be an ever growing one (hopefully) ...

Note that example 3 needs the INDX CLIST from the CBT tape, file 574.

Example 1 - A full screen 'Logo'

This is an output only example.

The CLIST:

PROC 0
/*-------------------------------------------------------------------*/
/* DEMO 1 - SHOW SOME LOGO TYPE SCREEN ...                           */
/*-------------------------------------------------------------------*/
  SET INP1 = &STR(   )
SCREEN1: -
  C3270 CLEAR MESSAGE(1,1,Ö×4)                                      (*1)
  C3270 MESSAGE(10,30,'WELCOME TO THE DEMO')
  C3270 WCC(B) MESSAGE(11,25,'OF THE WONDERFULÖ×8C3270Ö×4COMMAND')  (*2)
  C3270 WCC(B) MESSAGE(12,28,'PRESS ENTER TO CONTINUE')
  C3270 WCC(B) READTO(INP1)                                         (*3)
  C3270 CLEAR
EXIT

(*1)  Clear screen and start at row 1 column 1 with an attribute ('Start
      Field') of normal, protected, askip
(*2)  The 'Ö×8' will change the display to intens (bright, white) with t
      same attribute (prot, askip), later in the same line, output is se
      back to the original attribute (normal, askip)
(*3)  Even if no input fields are defined, the user must press enter or
      any other attention key to continue.

The Output:










                             WELCOME TO THE DEMO
                        OF THE WONDERFUL C3270 COMMAND
                           PRESS ENTER TO CONTINUE













Start of page

  ----------------------------------------------------------------------

Example 2 - Output and Input

In this example we will fill the screen with a 'panel' (as the ISPFers
would call it) with 3 input fields. The unformatted input will then be
written to the terminal.

The CLIST:

PROC 0
/*-------------------------------------------------------------------*/
/* DEMO 2 - SHOW FULL SCREEN WITH SOME INPUT FIELDS                  */
/*-------------------------------------------------------------------*/
INITVARS: -
   SET INP2 = &STR(                                          )      (*1)
SCREEN1: -
  C3270 WCC(B) CLEAR                                                (*2)
  C3270 WCC(B) MESSAGE(5,5,'ENTER INPUT:Ö×A123456Ö×4<')             (*3)
  C3270 WCC(B) MESSAGE(6,5,' MORE INPUT:Ö×AABCDEFÖ×4<')
  C3270 WCC(B) MESSAGE(7,5,'THIRD INPUT:Ö×A999999Ö×4<')
  C3270 WCC(B) MESSAGE(9,5,'FILL THE FIELDS AND PRESS <ENTER> ...')
  C3270 WCC(B) READTO(INP2) CURSOR(5,18)                            (*4)
SCREENL: -
  C3270 WCC(B) CLEAR
  WRITE &STR('RESULT FROM READ:')
  WRITE &INP2                                                       (*5)
  WRITE C3270 (AKA KOMM) DEMO ENDED
EXIT

(*1)  This is important: You MUST initialize the variable that is going
      hold the whole input with at least as many characters as the input
      will have ...
(*2)  Clear screen and start at row 1 column 1 with an attribute ('Start
      Field') of normal, protected, askip
(*3)  Show prompt and define input field (with default value) - the Ö×A
      will start an input field with normal intensity (green by default)
      and the MDT bit on - be aware that you should use WCC(B) to preven
      the 3270 from resetting the MDT.
(*4)  READTO(INP2) specifies that C3270 should wait for input from the
      terminal and place that data into the variable INP2. The cursor is
      positioned at line 5 column 18

(*5)  This will show the result from the READTO operation as it came in
      ...

The Output:





    ENTER INPUT: 123456 <
     MORE INPUT: ABCDEF <
    THIRD INPUT: 999999 <

    FILL THE FIELDS AND PRESS <ENTER> ...
















Overtype the green fields with whatever you want (or leave them unchange
and you should receive the following results:

 'RESULT FROM READ:'
 123456×F/ABCDEF×G1999999
 C3270 (AKA KOMM) DEMO ENDED
 READY

As you can see the first field is right there and ends with "×" (if no m
input fields would have been on the screen it would not even have the "×
at the end ...

The next field ("ABCDEF") has 2 extra bytes in front of it. This is the
position of the field on the screen (3270 encoded ...) - just skip it. I
find some time I might modify C3270 in a way that it leaves out the addr
...

Now this opens the next question: How can I split the fields in a CLIST?
Today there is the &SYSINDEX function in CLIST, but that does not work w
MVS 3.8 (probably it was invented with TSO/E ...), so I had to find anot
way. see the next example for that one.

Start of page

  ----------------------------------------------------------------------

Example 3 - Output and Input, Parse Input Into Separate Fields

This is basically the same as example 2, but this time the input that co
back from C3270 is to be parsed in separate fields. In order to be able
do this, I had to create a helper CLIST called "INDX". This is my
replacement for the SYSINDX function which is not available in this earl
TSO.

Since I thought that I might need this more often, INDX was created as a
external subroutine. To make this example work the INDX CLIST must be fo
in the SYSPROC concatenation. The INDX CLIST is not found on this page.
I've made it a separate add-on :-))

If you are using my 'binary' distribution, you should also look into the
'PTF' area to enable a system-wide CLIST library.

Once again: The functionality relies on using WCC(B) to prevent the 'RES
MDT'!

The CLIST:

PROC 0
/*-------------------------------------------------------------------*/
/* DEMO 3 - SHOW FULL SCREEN WITH SOME (PARSED) INPUT FIELDS         */
/*-------------------------------------------------------------------*/
INITVARS: -
   SET INP2 = &STR(                                                   )
SCREEN1: -
  C3270 WCC(B) CLEAR
  C3270 WCC(B) MESSAGE(5,5,'ENTER INPUT:Ö×A123456Ö×4<')
  C3270 WCC(B) MESSAGE(6,5,' MORE INPUT:Ö×AABCDEFÖ×4<')
  C3270 WCC(B) MESSAGE(7,5,'THIRD INPUT:Ö×A999999Ö×4<')
  C3270 WCC(B) MESSAGE(9,5,'FILL THE FIELDS AND PRESS <ENTER> ...')
  C3270 WCC(B) READTO(INP2) CURSOR(5,18)
  /* -------------------------------------------------------------- */
  /* PARSE INPUT FIELDS DELIMITED BY ×XX                            */
  /* -------------------------------------------------------------- */
  SET INP2 = &STR(&INP2×)
  %INDX SR(×) TX('&STR(&INP2)') ST(1)         /* END OF FIRST FIELD */
  SET FLD1END = &LASTCC
  SET FLD1 = &SUBSTR(1:&FLD1END-1,&STR(&INP2))       /* GET FIELD 1 */
  %INDX SR(×) TX('&STR(&INP2)') ST(&FLD1END+3)   /* END OF 2. FIELD */
  SET FLD2END = &LASTCC
  SET FLD2 = &SUBSTR(&FLD1END+3:&FLD2END-1,&STR(&INP2))
  %INDX SR(×) TX('&STR(&INP2)') ST(&FLD2END+3)   /* END OF 3. FIELD */
  SET FLD3END = &LASTCC
  SET FLD3 = &SUBSTR(&FLD2END+3:&FLD3END-1,&STR(&INP2))
SCREENL: -
  C3270 WCC(B) CLEAR
  WRITE &STR(INPUT INTO FIELD 1:) &STR(&FLD1)
  WRITE &STR(INPUT INTO FIELD 2:) &STR(&FLD2)
  WRITE &STR(INPUT INTO FIELD 3:) &STR(&FLD3)
  WRITE C3270 (AKA KOMM) DEMO ENDED
EXIT

The section "PARSE INPUT FIELDS ..." takes care of parsing the input
string. However, since the INDX function is written as a CLIST, the
performance is of course degraded. But: It works - and you don't have to
an Assembler wizard to create full screen dialogs on MVS 3.8.

The Output (only last screen, because the input panel is the same as in
example 2):

 INPUT INTO FIELD 1: 123456
 INPUT INTO FIELD 2: ABCDEF
 INPUT INTO FIELD 3: 999999
 C3270 (AKA KOMM) DEMO ENDED
 READY
