 Hercules
  MVS Add-Ons: Documentation

INDX is a CLIST that 'emulates' the SYSINDX function of TSO/E.

For full documentation, visit
http://www.schaefernet.de/hercules/mvsaddon/

The INDX CLIST

Once upon a time - when I started working with CLISTs on MVS 3.8, I foun
out that the SYSINDX function is not available in TSO! But I needed the
functionality. This is the result: a small CLIST named INDX that perform
the function for me. Nothing dramatically, but useful.

The real disadvantage is that it is horribly slow. So some day I'll
probably rewrite it as an Assembler command processor. BTW: please be aw
that it is not syntax compatible with the real CLIST function.

Table of Contents

- Installation
- Syntax
- Examples
  ----------------------------------------------------------------------

Installation

The installation package contains 1 job. It should complete with conditi
code 0.

 Job         Description

 01_src.txt  This jobs places the INDX clist in SYS2.CLIST. If you have
             another CLIST library, feel free to change the output datas
             name.

             Now you are ready to use the command processors (assuming
 *ready*     that SYS2.LINKLIB did not go into any secondary extent - in
             that case you must compress and re-ipl your system).

             In order to use the 'implicit' call (%INDX ... or just INDX
 Note:       ...) the library into which INDX was installed, must be
             allocated in the SYSPROC DD concatenation of your TSO
             session.

Start of page

  ----------------------------------------------------------------------

Syntax

   ª%³INDX SR(<needle>) TX(<haystack>) ªST(<startpos>×1)

SR(<needle>) - defines what you want to search.

TX(<haystack>) - defines the string in which you would like to find
<needle>.

ST(<startpos>) - gives the position on which the search begins. If you d
not specify this parameter, the first position is assumed.

Please note that INDX does no error checking. This is for performance
reasons (it's slow enough ...). So if you do not supply the parameters
correctly, it may blow up with some nasty error messages or whatsoever .

Result: the condition code (&LASTCC) will give you the position of <need
in <haystack> or 0 if <needle> was not found.

Start of page

  ----------------------------------------------------------------------

Examples

 PROC 0
 /* EXAMPLES FOR THE INDX CLIST */

 /* EXAMPLE 1: TEST IF ANSWER CONTAINS YES */

 WRITENR &STR(PLEASE ANSWER WITH A YES SOMEWHERE)
 READ &YN
 INDX SR(YES) TX(&STR(&YN)
 IF &LASTCC > 0 THEN DO
    WRITE &STR(YOUR ANSWER CONTAINED YES)
    END
 ELSE DO
    WRITE &STR(COULD NOT FIND TEXT 'YES')
    END

 /* EXAMPLE 2: EXTRACT THE KEYWORD VALUE FOR "VOL".
 /*            SYNTAX KEYW=VALUE

  SET DATA = &STR(UNIT=3350 VOL=MVSRES LRECL=80)
  INDX SR(&STR(VOL=)) TX('&STR(&DATA)')
  SET BEGIN = &LASTCC
  IF &BEGIN = 0 THEN DO
     WRITE &STR(COULD NOT FIND VOLUME KEYWORD)
     EXIT CODE(12)
     END

  INDX SR('&STR( )') TX('&STR(&DATA)') ST(&BEGIN)
  SET END = &LASTCC
  IF &END = 0 THEN DO
     WRITE &STR(SYNTAX ERROR IN VOLUME KEYWORD)
     EXIT CODE(12)
     END
  SET END = &END - 1
  SET BEGIN = &BEGIN + 4
  SET VALUE = &SUBSTR(&BEGIN:&END,&DATA)
  WRITE &STR(YOU ARE GOING TO USE VOLUME &VALUE)

EXIT



  ----------------------------------------------------------------------

Last update: 2001-06-07 Internet URL (most recent version:
http://www.schaefernet.de/mvsaddondoc/indxcl.htx)
