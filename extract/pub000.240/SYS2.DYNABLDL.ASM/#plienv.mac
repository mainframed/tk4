         MACRO
&N       #PLIENV &ISASIZE=,&DSASIZE=,&RECOVER=LOCAL,&BASES=1,          *
               &ESDTYPE=CSECT,&PFIX=
.*
.*
.*
.* LAST CHANGE DATE - OCTOBER 18, 1983
.*                  - MAILING ADDRESS CHANGE
.*
.* THIS MACRO WAS WRITTEN - APRIL 21, 1981
.*
.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING
.* IT MAY BE ADDRESSED TO:
.*       RR#2 BOX 712
.*       AFTON, VA. 22920
.*
.*
.*
.* THIS MACRO INTERFACES TO THE 'PLIENV' PROGRAM (WRITTEN IN PLI) TO
.* CREATE A PLI ENVIRONMENT IN WHICH ASSEMBLER LANGUAGE CODE CAN RUN.
.* THE FLOW OF CONTROL IS DESCRIBED IN THE COMMENTARY GIVEN BELOW.
.*
.* THIS MACRO ACCEPTS THE FOLLOWING OPERANDS.
.*
.* THE NAME FIELD.
.*       THIS IS OPTIONAL. IT ASSIGNS A NAME TO THE FIRST SUITABLE
.*       GENERATED INSTRUCTION. NOTE, THE DEFAULT FIRST INSTRUCTION IS
.*       A 'CSECT' CARD.
.*
.* ISASIZE=
.*       THIS IS OPTIONAL. IT SPECIFIES THE DESIRED SIZE OF PLI'S
.*       "INITIAL STORAGE AREA". ITS SYNTAX IS IDENTICAL TO PLI'S
.*       ISASIZE EXECUTION TIME OPTION AS DESCRIBED IN THE PLI
.*       PROGRAMMER'S GUIDE. IF THIS OPERAND IS OMITTED, THEN THE LOCAL
.*       INSTALLATION ESTABLISHED DEFAULT ISASIZE IS OBTAINED. NOTE, A
.*       "REGISTER FORM" OF THIS OPERAND IS NOT SUPPORTED.
.*
.* DSASIZE=
.*       THIS IS OPTIONAL. IT SPECIFIES THE DESIRED DATA STORAGE AREA
.*       SIZE TO BE MADE AVAILABLE TO THE ASSEMBLER CODE FOLLOWING THIS
.*       MACRO. IF OMITTED, THEN THE MINIMUM VALUE (120 BYTES) IS
.*       OBTAINED. DSASIZE MUST SPECIFY A NON-RELOCATABLE EXPRESSION.
.*       THE SPECIFIED VALUE MUST BE EQUAL TO OR GREATER THAN 120 BYTES
.*       SINCE THE FIRST 120 BYTES ARE REQUIRED BY THE PLI SUBROUTINE
.*       LINKAGE CONVENTIONS. A "REGISTER FORM" OF THIS OPERAND IS NOT
.*       SUPPORTED.
.*
.* RECOVER={LOCAL×PLI}
.*       THIS CONTROLS WHETHER OR NOT PLI ESTABLISHES A RECOVERY
.*       ENVIRONMENT (I.E., ISSUES 'ESTAE' AND 'SPIE' MACROS).
.*
.*       RECOVER=LOCAL (THE DEFAULT)
.*       PLI WILL NOT ISSUE 'ESTAE' AND 'SPIE' MACROS. THE ASSEMBLER
.*       CODE FOLLOWING THIS MACRO EXPANSION MUST PROVIDE FOR ITS OWN
.*       RECOVERY.
.*
.*       RECOVER=PLI
.*       PLI WILL ISSUE 'ESTAE' AND 'SPIE' MACROS. ALL ABENDS MUST BE
.*       HANDLER VIA PLI "ON UNITS".
.*
.* BASES=
.*       THIS DEFINES THE REGISTERS THAT ARE TO BE USED AS PROGRAM
.*       BASES FOR THE CODE FOLLOWING THIS MACRO EXPANSION. THIS
.*       OPERAND MAY SPECIFY EITHER A SINGLE SELF-DEFINING TERM OR IT
.*       MAY GIVE A PARENTHESIZED LIST OF ONE OR MORE REGISTER NAMES.
.*
.*       BASES=<A NUMBER>   (THE DEFAULT IS "BASES=1")
.*       THIS DEFINES THE NUMBER OF BASES REGISTERS THAT ARE TO BE
.*       LOADED AND DECLARED BY THE MACRO. REGISTERS ARE SELECTED IN
.*       DESCENDING REGISTER ORDER STARTING WITH REGISTER 11. "NUMBER"
.*       MAY RANGE IN VALUE FROM 0 TO 11.
.*
.*       BASES=(<A LIST OF REGISTER NAMES>)
.*       THIS DEFINES SPECIFIC BASE REGISTERS THAT ARE TO BE LOADED AND
.*       DECLARED BY THE MACRO. ANY REGISTERS BETWEEN R1 AND R11 MAY
.*       BE CHOSEN.
.*
.* ESDTYPE={CSECT×START×ENTRY×DS×NONE×<NULL>}
.*
.*       ESDTYPE=CSECT  (THE DEFAULT)
.*       THIS CAUSES THE MACRO TO GENERATE A 'CSECT' CARD AS THE FIRST
.*       CARD OF THE EXPANSION.
.*
.*       ESDTYPE=START
.*       THIS CAUSES THE MACRO TO GENERATE A 'START' CARD AS THE FIRST
.*       CARD OF THE EXPANSION.
.*
.*       ESDTYPE=ENTRY
.*       THIS CAUSES THE MACRO TO GENERATE A 'ENTRY' CARD NAMING THE
.*       FIRST EXECUTABLE INSTRUCTION IN THE EXPANSION AS AN ENTRY
.*       POINT.
.*
.*       ESDTYPE=DS
.*       THIS CAUSES THE MACRO TO GENERATE A 'DS 0H' CARD AS THE FIRST
.*       CARD OF THE EXPANSION.
.*
.*       ESDTYPE=NONE  OR  ESDTYPE=
.*       THIS SUPPRESSES THIS FUNCTION.
.*
.* PFIX=
.*       THIS CONTROLS THE SET OF REGISTER NAMES TO BE USED BY THE
.*       MACRO EXPANSION. EXAMPLE: "PFIX=GPR" CAUSES THE MACRO TO USE
.*       "GPR1" TO REFER TO REGISTER 1. THE DEFAULT IS TO USE THE
.*       REGISTER NAME PREFIX DEFINED BY THE FIRST PRECEDING '#REGS'
.*       MACRO, IF ANY.
.*
.* INNER MACROS USED - #REGS #TEST #ENTER GETMAIN FREEMAIN LOAD DELETE
.*
         GBLC  &#TESRET(20)
         LCLC  &#,&@,&PARM,&I,&N2,&W1,&W2
&#       SETC  '&SYSNDX'
&@       SETC  '&PFIX'
         AIF   (K'&PFIX NE 0).GOTPFIX
         #TEST PFIX=
&@       SETC  '&#TESRET(1)'
         AGO   .DONPFIX
.GOTPFIX #REGS &PFIX,GEN=NO
.DONPFIX ANOP
&PARM    SETC  'NOSTAE,NOSPIE'
         AIF   ('&RECOVER' EQ '' OR '&RECOVER' EQ 'LOCAL').GOTRCVR
&PARM    SETC  ''
         AIF   ('&RECOVER'(1,1) EQ 'P').GOTRCVR
         MNOTE 4,'"&&RECOVER=&RECOVER" NOT RECOGNIZED.'
         MNOTE 4,'"&&RECOVER=PLI" ASSUMED.'
.GOTRCVR ANOP
         AIF   (K'&ISASIZE EQ 0).GOTISA
         AIF   ('&ISASIZE' NE '&ISASIZE(1)').GETPISA
&PARM    SETC  '&PARM.,ISASIZE(&ISASIZE.)'
         AGO   .GOTISA0
.GETPISA ANOP
&PARM    SETC  '&PARM.,ISASIZE&ISASIZE'
.GOTISA0 AIF   ('&PARM'(1,1) NE ',').GOTISA
&PARM    SETC  '&PARM'(2,K'&PARM-1)
.GOTISA  ANOP
&PARM    SETC  '&PARM./'
.*
         SPACE 1
*************************************************************
*        ENTRY CODE -- EXECUTED FIRST.                      *
*        - RECEIVES CONTROL FROM A CALLER.                  *
*        - SAVES REGISTERS.                                 *
*        - CONSTRUCTS A SPECIAL PARM FIELD CONTAINING:      *
*          - PLI EXECUTION TIME OPTIONS;                    *
*          - INFORMATION SPECIFIC TO THE CONTROL OF THIS    *
*            INTERFACE.                                     *
*        - LOCATES THE 'PLIENV' LOAD MODULE.                *
*        - CALLS 'PLIENV' VIA THE 'PLISTART' ENTRY POINT.   *
*        - THIS CAUSES THE CREATION OF A PLI ENVIRONMENT.   *
*        - CONTROL NEXT PASSES TO THE "INTERFACE CODE"      *
*          GENERATED BELOW.                                 *
*************************************************************
         SPACE 1
.*
&N2      SETC  '&N'
&W1      SETC  '&ESDTYPE(1)'
         AIF   ('&W1' EQ 'NONE' OR '&W1' EQ '').ESDDONE
         AIF   ('&W1' EQ 'ENTRY').ESDENT
&W2      SETC  ','
         AIF   ('&W1' EQ 'CSECT' OR '&W1' EQ 'START').ESDNCSC
&W2      SETC  '0H''0'''
.ESDNCSC ANOP
&N       &W1   &W2                 START
&N2      SETC  ''
         AGO   .ESDDONE
.ESDENT  ANOP
         ENTRY &N                  DECLARE ENTRY NAME
.ESDDONE ANOP
.*
&N2      STM   &@.14,&@.12,12(&@.13) SAVE CALLER'S REGISTERS
         BALR  &@.14,0             LOAD LOCAL BASE
         USING *,&@.14             DECLARE IT
         LA    &@.0,L'PNV&#.P+34   GET L'LCL SAVE AREA + L'PARM FIELD
         MNOTE '         GETMAIN R,LV=(0)'
         GETMAIN R,LV=(0)
         LR    &@.2,&@.1           COPY LOCAL AREA POINTER
         MVC   0(20,&@.2),12(&@.13) SAVE CALLER'S R14 THRU R2
         LA    &@.1,24(,&@.2)      --> PARM FIELD
         ST    &@.1,20(,&@.2)      BUILD 1-ENTRY PLIST
         MVI   20(&@.2),B'10000000' FLAG THE LAST ENTRY
         MVC   0(L'PNV&#.P+6,&@.1),PNV&#.P-2 COPY PARM FIELD
         MVC   L'PNV&#.P+6(4,&@.1),12(&@.2) COPY CALLER'S R1 TO PARM
         MNOTE '         LOAD  EPLOC=PNV&#.N'
         LOAD  EPLOC=PNV&#.N
         LR    &@.15,&@.0          GET PLIENV'S ENTRY ADDRESS
         LA    &@.1,20(,&@.2)      --> PARM FIELD
         BALR  &@.14,&@.15         GO ESTABLISH PLI ENVIRONMENT AND
*                                  EXECUTED THE PROGRAM STARTING AT
*                                  PNV####R.
         EJECT ,
*************************************************************
*        EXIT CODE -- EXECUTED LAST.                        *
*        - RECEIVES CONTROL BACK VIA 'PLIENV' UPON          *
*          COMPLETION OF THE ASSEMBLER CODE BELOW.          *
*        - NOTE, AT THIS POINT THE PLI ENVIRONMENT NO       *
*          LONGER EXISTS.                                   *
*        - CLEANS UP AND RESTORES REGISTERS (PRESERVING THE *
*          R15 RECEIVED FROM 'PLIENV').                     *
*        - RETURNS TO "ENTRY CODE'S" CALLER.                *
*************************************************************
         SPACE 1
         USING *,&@.14             THE PROGRAM HAS COMPLETED. DECLARE A
*                                  LOCAL BASE.
         ST    &@.15,4(,&@.2)      STORE CALLED PROGRAM'S RC
         MNOTE '         DELETE EPLOC=PNV&#.N'
         DELETE EPLOC=PNV&#.N
         MVC   12(20,&@.13),0(&@.2) RESTORE CALLER'S REGS TO SAVE AREA
         LA    &@.0,L'PNV&#.P+34   GET L'LOCAL WORK AREA
         MNOTE '         FREEMAIN R,LV=(0),A=(&@.2)'
         FREEMAIN R,LV=(0),A=(&@.2)
         LM    &@.14,&@.2,12(&@.13) RESTORE CALLER'S REGISTERS
         DROP  &@.14               RELEASE LOCAL BASE
         BR    &@.14               RETURN TO CALLER
         SPACE 3
PNV&#.N  DC    CL8'PLIENV'         ROUTINE THAT SETS UP PLI ENVIRONMENT
         DC    Y(L'PNV&#.P+8)      L'PARM FIELD
PNV&#.P  DC    C'&PARM',AL4(PNV&#.R) MOST OF PARM FIELD
         EJECT ,
*************************************************************
*        INTERFACE CODE -- EXECUTED SECOND.                 *
*        - RECEIVES CONTROL FROM 'PLIENV'.                  *
*        - NOTE, AT THIS POINT A PLI ENVIRONMENT EXISTS.    *
*        - ESTABLISHES A LOCAL DSA OF THE DESIRED SIZE.     *
*        - ESTABLISHES THE DESIRED LOCAL PROGRAM BASE       *
*          REGISTERS.                                       *
*        - RESTORES THE R1 VALUE ORIGINALLY RECEIVED BY     *
*          "ENTRY CODE" ABOVE.                              *
*        - FALLS THROUGH TO USER WRITTEN ASSEMBLER CODE.    *
*************************************************************
         SPACE 1
         AIF   ('&DSASIZE' EQ '&DSASIZE(1)').DSASOK
         MNOTE 4,'"DSASIZE=&DSASIZE" IS INVALID.'
         MNOTE 4,'THE CODE GENERATED BELOW WILL NOT FUNCTION CORRECTLY.*
               '
.DSASOK  MNOTE 'PNV&#.R #ENTER &N,SAVTYPE=(PLI,&DSASIZE),BASES=&BASES,'
         MNOTE '               ESDTYPE=NONE,PFIX=&PFIX'
PNV&#.R  #ENTER &N,SAVTYPE=(PLI,&DSASIZE),BASES=&BASES,                *
               ESDTYPE=NONE,PFIX=&PFIX
         L     &@.1,88(,&@.13)     RESTORE INITIAL PARAMETER REGISTER
         EJECT ,
*************************************************************
*        USER CODE.                                         *
*        - IF THIS CODE WISHES TO CALL SUBROUTINES USING    *
*          PLI CONVENTIONS, THEN THE CALLED SUBROUTINES     *
*          SHOULD START WITH A "#ENTER SAVTYPE=PLI" MACRO   *
*          AND END WITH A "#EXIT ((R14,R12)),RC=..." MACRO. *
*        - WHEN THIS CODE WISHES TO RETURN TO ITS CALLER,   *
*          IT SHOULD DO SO VIA A "#EXIT ((R14,R12)),RC=..." *
*          MACRO. THIS WILL CAUSE CONTROL TO RETURN TO      *
*          'PLIENV' WHICH WILL THEN CLEAN UP THE PLI        *
*          ENVIRONMENT AND THEN RETURN CONTROL TO "EXIT     *
*          CODE" ABOVE.                                     *
*************************************************************
         SPACE 1
         MEND
