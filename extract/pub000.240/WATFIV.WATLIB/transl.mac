      SUBROUTINE TRANSL(DECK,PUNCH)
C***********************************************************************
C*     THIS PROGRAM TRANSLATES WATFIV-S EXTENDED CONTROL STATEMENTS    *
C*  TO STANDARD FORTRAN.  PROGRAMS WHICH DO NOT USE ANY OTHER WATFIV   *
C*  EXTENSIONS TO FORTRAN, AND COMPILE CORRECTLY UNDER WATFIV-S MAY    *
C*  BE TRANSLATED BY THIS PROGRAM TO A FORM ACCEPTABLE TO FORTRAN-G OR *
C*  H.  THE PROGRAMS BEING TRANSLATED, HOWEVER, MUST CONFORM TO THE    *
C*  FOLLOWING TRANSLATOR RESTRICTIONS:                                 *
C*      1.   STATEMENT NUMBERS 90000-99999 RESERVED FOR TRANSLATOR.    *
C*           VARIABLE NAMES BEGINNING WITH '$' RESERVED FOR TRANSLATOR.*
C*      2.   WATFIV-S CONTROL STATEMENTS MUST BE COMPLETE ON ONE CARD, *
C*           WITH THE EXCEPTION OF IF-THEN AND WHILE-DO HEADER STATE-  *
C*           MENTS.  FOR THESE EXCEPTIONS 'IF(' AND 'WHILE(' MUST BE   *
C*           COMPLETE ON THE FIRST CARD OF THE STATEMENT.              *
C*      3.   A MAXIMUM OF 19 CONTINUATION CARDS WILL BE ALLOWED FOR    *
C*           READ STATEMENTS.                                          *
C*      4.   COMMENT CARDS BETWEEN CONTINUATION CARDS OF A STATEMENT   *
C*           ARE NOT ALLOWED.                                          *
C*      5.   ERROR CHECKING IS GENERALLY NOT PERFORMED BY THE TRANSL-  *
C*           ATOR, BUT CERTAIN ERRORS ARE DETECTED BY THE TRANSLATION  *
C*           ALGORITHM.  TRANSLATION IS TERMINATED WHEN SUCH ERRORS    *
C*           OCCUR.                                                    *
C*      6.   REMOTE BLOCK NAMES MUST BE UNIQUE IN THEIR FIRST 5 CHAR-  *
C*           ACTERS AND REMOTE BLOCK DEFINITIONS MUST FOLLOW ALL THEIR *
C*           REFERENCES.                                               *
C*      7.   'EXECUTE' AS THE OBJECT OF A DO LOOP WILL NOT TRANSLATE   *
C*           CORRECTLY.  THIS PROBLEM MAY BE CIRCUMVENTED BY USING A   *
C*           'CONTINUE' STATEMENT FOLLOWING THE EXECUTE, AS DO-OBJECT. *
C*      8.   THE GENERATED STATEMENT 'IMPLICIT INTEGER($)' MAY HAVE    *
C*           TO BE RE-POSITIONED IN THE OUTPUT DECK IF SUBPROGRAMMES   *
C*           ARE TRANSLATED SEPARATELY OR MULTIPLE MAINLINE PROGRAMMES *
C*           ARE TRANSLATED TOGETHER.  THIS IS NOT NECESSARY FOR DECKS *
C*           WITH MAINLINE FIRST, FOLLOWED BY SUBPROGRAMMES.           *
C***********************************************************************
C    INPUT AND OUTPUT UNIT NUMBERS - PASSED AS SUBROUTINE PARAMETERS,
C       DECK AND PUNCH
      INTEGER DECK,PUNCH
C
C    STACK VARIABLES TO KEEP TRACK OF NESTED BLOCKS:
C       THE DIMENSION OF THESE VARIABLES HAS BEEN ARBITRARILY SET AT
C       50.  IF A PROGRAM IS TOO LARGE TO TRANSLATE WITH THIS PROGRAM
C       CHANGE THE DIMENSIONS OF THESE VARIABLES TO A SUITABLE SIZE.
      INTEGER LABEL1(50),LABEL2(50),TYPE(50),TOP/1/
      CHARACTER*1 CASIN1(4,50),CASIN2(4,50)
      EQUIVALENCE (LABEL2,CASIN1),(TYPE,CASIN2)
C     REMOTE BLOCK TABLES - ALSO DIMENSIONED ARBITRARILY AT 50 AND
C     MAY BE  INCREASED IN SIZE IF NECESSARY
      CHARACTER BNAME*6(50),BLKNAM*6,BLKNM1*1(6)
      EQUIVALENCE  (BLKNAM,BLKNM1)
      INTEGER STRTNO(2,50),RETRNS(2,150),NTOP/0/,RTOP/0/,REMBLK/0/,
     *        LBLIST(7)
C    OTHER VARIABLES
      INTEGER CODE/0/,PRVCOD,RDEND,BCOL,BCARD,PCOL,CCOL,EOC,EOS,
     *        LABEL/89999/,ERRSW/0/,FOUND,BUFFNO,RTYPE
      CHARACTER*1 BUFFIN(80,20),PACKED(80),CARD(80),CHAR
      CHARACTER*80 BUFIN1(20),PACK1,CARD1
      EQUIVALENCE (BUFFIN,BUFIN1),(PACKED,PACK1),(CARD,CARD1)
      CHARACTER CGOTO*16,CGOTO1*56,STNO*5,CARD6*75,BUF11*11,
     *          FMT*6,FMT1*1(6),FMT2*6,CARD20*61,AGOTO1*48
      EQUIVALENCE (CARD,CGOTO),(CARD(17),CGOTO1),(CARD,STNO),
     *            (CARD(6),CARD6),(BUFFIN,BUF11),(FMT1,FMT2),
     *            (FMT,CARD(14)),(CARD(20),CARD20),(CARD(25),AGOTO1)
      CHARACTER PACK2*2,PACK4*4,PACK5*5,PACK6*6,PACK7*7,PACK8*8,
     *          PACK11*11,PACK3*3
      EQUIVALENCE (PACKED(7),PACK2,PACK4,PACK5,PACK6,PACK7,PACK8,
     *             PACK11,PACK3)
      INTEGER*2 TRAN(255)/63*0,9,9*0,3*1,2,3*1,9*0,1,8,1,3,4*1,9*0,4,
     *                4*1,10*0,3*1,5,6,1,65*0,9*8,7*0,9*8,8*0,8*8,6*0,
     *                10*7,1,5*0/
      CHARACTER*30 ERROR0/'***ERROR*** INPUT DECK MISSING'/
      CHARACTER*44 ERROR1/'***ERROR*** DEBUG THIS PROGRAM WITH WATFIVS'/
      CHARACTER*68 ERROR2/'***ERROR*** TOO MANY CONTINUATION CARDS FOR R
     *EAD STATEMENT (MAX. 19)'/
      CHARACTER*84 ERROR3/'***ERROR*** TRANSLATOR WILL ONLY ACCEPT ''WHI
     *LE(...)'' AS PART OF A WHILE-DO STATEMENT'/
      CHARACTER*120 ERROR4/'***ERROR*** INVALID USE OF ''WHILE(...)DO'',
     * OR CONTINUATION CARD FOLLOWING APPARENTLY COMPLETE ''IF(...)THEN
     *DO'' STATEMENT'/
  1   FORMAT(A80)
  2   FORMAT('      GO TO ',I5)
  3   FORMAT(I5,' CONTINUE')
C
C
      LABEL1(1)=0
      LABEL2(1)=0
      TYPE(1)=0
      READ(DECK,1) CARD1
      AT END DO
        PRINT, ERROR0
        RETURN
      END AT END
      EOF=0
      WRITE(PUNCH,11)
 11   FORMAT(6X,'IMPLICIT INTEGER($)')
C     TRANSLATE UNTIL END-OF-FILE ENCOUNTERED
      WHILE (EOF .EQ. 0) DO
C       SKIP COMMENT CARDS
        WHILE (CARD(1).EQ.'C') DO
          WRITE(PUNCH,1)CARD1
          READ(DECK,1)CARD1
          AT END DO
            RETURN
          END AT END
        END WHILE
        CCOL=7
        PCOL=7
        EOC=0
        CHAR=CARD(7)
        I=TRAN(CHAR)
C       PACK ALPHABETIC CHARACTERS ON 1ST CARD OF STMT.
C       UNTIL DIGIT OR DELIMETER
        WHILE (I.GE.8 .AND. EOC.EQ.0) DO
          IF (I.EQ.8) THEN DO
            PACKED(PCOL)=CHAR
            PCOL=PCOL+1
          END IF
          CCOL=CCOL+1
          IF (CCOL.EQ.73) THEN DO
            EOC=1
          ELSE DO
            CHAR=CARD(CCOL)
            I=TRAN(CHAR)
          END IF
        END WHILE
        PRVCOD=CODE
        CODE=0
        LENGTH=PCOL-7
        I=LENGTH-1
C     DECIDE IF WE HAVE A STATEMENT WHICH NEEDS TRANSLATING.
C      IF SO, IDENTIFY WITH UNIQUE NON-ZERO CODE & PROCESS LATER:
C              0 - NO KEYWORD MATCH
C              1 - ELSE DO
C              2 - END IF
C              3 - END WHILE
C              4 - END AT END
C              5 - DO CASE VNAME
C              6 - CASE ...
C              7 - IF NONE DO
C              8 - END CASE
C              9 - EXECUTE BNAME
C             10 - REMOTE BLOCK BNAME
C             11 - END BLOCK
C             12 - AT END DO
C             13 - IF(
C             14 - WHILE(
C             15 - READ,...
C             16 - READ(
C             17 - READ VNAME,
C             18 - READ NUMBER,
C       INDEX ON LENGTH-1 TO REDUCE # OF KEYWORD COMPARISONS
        DO CASE I
        CASE  (LENGTH 2)
          IF (PACK2.EQ.'IF' .AND. CHAR.EQ.'(')CODE=13
        CASE  (LENGTH 3)
          IF (PACK3.EQ.'END' .AND. EOC.EQ.1)CODE=-1
        CASE  (LENGTH 4)
          IF (PACK4.EQ.'READ') THEN DO
            RDEND=CCOL
            IF (CHAR.EQ.',') THEN DO
              CODE=15
            ELSE DO
              IF (CHAR.EQ.'(') THEN DO
                CODE=16
              ELSE DO
                IF (TRAN(CHAR).EQ.7) CODE=18
              END IF
            END IF
          END IF
        CASE  (LENGTH 5)
          IF (PACK5.EQ.'ENDIF' .AND. EOC.EQ.1) THEN DO
            CODE=2
          ELSE DO
            IF (PACK5.EQ.'WHILE' .AND. CHAR.EQ.'(') CODE=14
          END IF
        CASE  (LENGTH 6)
          IF (PACK6.EQ.'ELSEDO' .AND. EOC.EQ.1) CODE=1
        CASE  (LENGTH 7)
          IF (EOC .EQ. 1) THEN DO
            IF (PACK7 .EQ. 'ATENDDO') THEN DO
              CODE=12
            ELSE DO
              IF (PACK7 .EQ. 'ENDCASE')CODE=8
            END IF
          END IF
        CASE  (LENGTH 8)
          IF (EOC .EQ. 1) THEN DO
            IF (PACK8 .EQ. 'ENDWHILE') THEN DO
              CODE=3
            ELSE DO
              IF (PACK8 .EQ. 'ENDATEND') THEN DO
                CODE=4
              ELSE DO
                IF (PACK8 .EQ. 'IFNONEDO')CODE=7
              END IF
            END IF
          END IF
        END CASE
        IF (CODE.EQ.0) THEN DO
          IF (PACK6.EQ.'DOCASE' .AND. LENGTH .GT. 6) THEN DO
            CODE=5
          ELSE DO
            IF (PACK4.EQ.'CASE') THEN DO
              CODE=6
            ELSE DO
              IF (PACK4.EQ.'READ' .AND. CHAR.EQ.',') THEN DO
                CODE=17
                FMT2=' '
                N=PCOL-11
                RDEND=CCOL
                DO 89 I=1,N
 89             FMT1(I)=PACKED(I+10)
              ELSE DO
                IF (PACK7 .EQ. 'EXECUTE') THEN DO
                  CODE=9
                ELSE DO
                  IF (PACK11 .EQ. 'REMOTEBLOCK') THEN DO
                    CODE=10
                  ELSE DO
                    IF (PACK8 .EQ. 'ENDBLOCK')CODE=11
                  END IF
                END IF
              END IF
            END IF
          END IF
        END IF
C       PREVIOUS STMT. A 'READ' & CURRENT STMT. NOT 'ATENDDO'?
C         YES - DUMP BUFFER
        IF (PRVCOD.GE.15 .AND. CODE.NE.12) THEN DO
          DO 96 I=1,BUFFNO
 96       WRITE(PUNCH,1)BUFIN1(I)
        END IF
C       NOT ONE OF OUR STMTS. ? - DUMP (CONT'N. CARDS AS WELL)
        IF (CODE.LE.0) THEN DO
          EXECUTE WRRD1
          IF(PRVCOD.EQ.-1) WRITE(PUNCH,11)
          IF (CODE.EQ.-1) THEN DO
C         END OF PROGRAM SEGMENT - CHECK STACKS AND TABLES ARE IN ORDER
C         AND INITIALIZE FOR NEXT SEGMENT
            IF (TOP.GT.1) THEN DO
              ERRSW=1
            ELSE DO
              WHILE (NTOP.GT.0 .AND. ERRSW.EQ.0) DO
                IF (STRTNO(1,NTOP) .NE. 0) ERRSW=1
                NTOP=NTOP-1
              END WHILE
              NTOP=RTOP=0
              LABEL=89999
            END IF
          END IF
C       ONE OF OUR STMTS. - PROCESS IT
        ELSE DO
          IF(PRVCOD.EQ.-1) WRITE(PUNCH,11)
C         PROCESS SINGLE CARD STMTS. FIRST (IF,WHILE,READS LATER)
          IF (CODE.LE.12) THEN DO
            DO CASE CODE
            CASE 1
C           'ELSEDO' - TOP OF STACK MUST BE 'IF-THEN'
              IF (TYPE(TOP).NE.13) THEN DO
                ERRSW=1
              ELSE DO
                LABEL=LABEL+1
                WRITE(PUNCH,2)LABEL
                WRITE(PUNCH,3)LABEL1(TOP)
                LABEL1(TOP)=LABEL
                TYPE(TOP)=1
              END IF
            CASE 2
C           'ENDIF' - PROCESS WITH REMOTE BLOCK
              EXECUTE ENDIF
            CASE 3
C           'ENDWHILE' - PROCESS WITH REMOTE BLOCK
              EXECUTE ENDWH
            CASE 4
C          'ENDATEND' - TOP MUST BE 'ATENDDO'
              IF (TYPE(TOP).NE.12) THEN DO
                ERRSW=1
              ELSE DO
                WRITE(PUNCH,3)LABEL1(TOP)
                TOP=TOP-1
              END IF
            CASE 5
C           'DOCASE' - PACK REST OF CARD TO PICK UP INDEX VAR.
              EXECUTE NPACK
C             SOMETHING NON-ALPHANUMERIC FOUND - ERROR
              IF (EOC.EQ.0) THEN DO
                ERRSW=1
              ELSE DO
                LENGTH=PCOL-13
                IF (LENGTH.LT.6) THEN DO
                  DO 99 I=PCOL,18
  99              PACKED(I)=' '
                END IF
C               IF THERE WAS A STMT. NO. ON DOCASE, GEN. A CONTINUE
                IF (STNO.NE.' ') THEN DO
                  CARD6=' CONTINUE'
                  WRITE(PUNCH,1)CARD1
                END IF
                TOP=TOP+1
                LABEL=LABEL+1
                LABEL1(TOP)=LABEL
C               PLACE INDEX VAR. IN STACK FOR ENDDOCASE CODE
                DO 98 I=1,4
  98            CASIN1(I,TOP)=PACKED(12+I)
                CASIN2(1,TOP)=PACKED(17)
                CASIN2(2,TOP)=PACKED(18)
                LABEL=LABEL+1
                TOP=TOP+1
                LABEL1(TOP)=LABEL
                WRITE(PUNCH,2)LABEL
                LABEL=LABEL+1
                LABEL2(TOP)=LABEL
                TYPE(TOP)=5
                WRITE(PUNCH,3)LABEL
              END IF
            CASE 6
C           'CASE' - TOP MUST BE 'CASE' OR 'DOCASE'
              IF (TYPE(TOP).NE.5 .AND. TYPE(TOP).NE.6) THEN DO
                ERRSW=1
              ELSE DO
C               IGNORE CASE STMT. IMMEDIATELY FOLLOWIN A DOCASE
                IF (PRVCOD .NE. 5) THEN DO
                  EXECUTE XITCAS
                  LABEL=LABEL+1
                  WRITE(PUNCH,3)LABEL
                  TOP=TOP+1
                  LABEL1(TOP)=LABEL
                  TYPE(TOP)=6
                END IF
              END IF
            CASE 7
C           'IFNONEDO' - TOP MUST BE 'CASE' OR 'DOCASE'
            IF (TYPE(TOP).NE.5 .AND. TYPE(TOP).NE.6) THEN DO
              ERRSW=1
            ELSE DO
              EXECUTE XITCAS
              EXECUTE CGOTO
              TOP=TOP+1
              TYPE(TOP)=7
              LABEL1(TOP)=I
            END IF
            CASE 8
C           'ENDCASE' - TOP MUST BE 'CASE' OR 'DOCASE' OR 'IFNONEDO'
              IF (TYPE(TOP).LT.5 .OR. TYPE(TOP).GT.7) THEN DO
                ERRSW=1
              ELSE DO
                EXECUTE XITCAS
                IF (TYPE(TOP) .EQ. 7) THEN DO
                  I=LABEL1(TOP)
                ELSE DO
                  EXECUTE CGOTO
                END IF
C               BRANCH AROUND & EXIT LABEL FOR CASES
                WRITE(PUNCH,3)LABEL1(I)
                TOP=I-1
              END IF
            CASE 9
C           'EXECUTE' - PACK REST OF CARD TO PICK UP BLOCK NAME
              EXECUTE NPACK
C             PROCESS WITH REMOTE BLOCK
              EXECUTE EXEC
            CASE 10
C           'REMOTE BLOCK' - PACK REST OF CARD TO PICK UP BLOCK NAME
              EXECUTE NPACK
              IF (EOC.EQ.0) THEN DO
                ERRSW=1
              ELSE DO
                LENGTH=PCOL-18
                IF (LENGTH.LT.5)THEN DO
                  DO 77 I=PCOL,22
  77              PACKED(I)=' '
                END IF
                BLKNM1(1)='$'
                DO 76 I=2,6
  76            BLKNM1(I)=PACKED(16+I)
                EXECUTE NMSRCH
                IF (I.GT.NTOP .OR. STRTNO(1,I).EQ.0) THEN DO
                  ERRSW=1
                ELSE DO
                  REMBLK=I
                  WRITE(PUNCH,3)STRTNO(1,I)
                  STRTNO(1,I)=0
                END IF
              END IF
            CASE 11
C           'END BLOCK' - GENERATE ASSIGNED GOTO WITH RETURN LABELS
C                         FROM LINKED LIST 'RETRNS'
              IF (REMBLK.EQ.0) THEN DO
                ERRSW=1
              ELSE DO
                I=STRTNO(2,REMBLK)
                WRITE(CARD1,10)BNAME(REMBLK),RETRNS(1,I)
  10            FORMAT(6X,'GOTO ',A6,',(',I5)
                J=0
                WHILE (RETRNS(2,I) .NE. 0) DO
                  J=1
                  WHILE(J.LE.7 .AND. RETRNS(2,I).NE.0) DO
                    I=RETRNS(2,I)
                    LBLIST(J)=RETRNS(1,I)
                    J=J+1
                  END WHILE
                  J=J-1
                  WRITE(AGOTO1,5)(LBLIST(K),K=1,J)
                  IF (RETRNS(2,I) .NE. 0) THEN DO
                    WRITE(PUNCH,1)CARD1
                    CARD1=' '
                    CARD(6)='*'
                  END IF
                END WHILE
                CCOL=J*6+25
                CARD(CCOL)=')'
                WRITE(PUNCH,1)CARD1
                REMBLK=0
              END IF
            CASE 12
C           'ATENDDO' - PREVIOUS STMT. MUST BE A READ
              IF (PRVCOD.LT.15) THEN DO
                ERRSW=1
              ELSE DO
                RTYPE=PRVCOD-14
C               DIFFERENT FORMATS OF READS HANDLED SEPERATELY FOR
C               INSERTION OF 'END=NNNNN' - REST OF LINE FORMATTING
C               DONE IN COMMON CODE (AFTER END DO CASE)
                DO CASE RTYPE
                CASE  (READ,.../AT END DO)
C               FREE FORMAT READ ON STANDARD UNIT (5)
                  CARD1=' '
                  DO 95 I=1,5
  95              CARD(I)=BUFFIN(I,1)
                  LABEL=LABEL+1
                  WRITE(CARD6,6)LABEL
  6               FORMAT(' READ(5,*,END=',I5,')')
                  BCOL=RDEND+1
                  I=26
                CASE  (READ(...).../AT END DO)
C               STANDARD FORTRAN READ STMT.
                  CARD1=' '
                  DO 92 I=1,RDEND
                  CARD(I)=BUFFIN(I,1)
  92              BUFFIN(I,1)=' '
                  LEVEL=0
                  I=RDEND+1
C                 SEARCH FOR LEVEL 0 RIGHT PAREN
                  WHILE(BUFFIN(I,1).NE.')' .OR. LEVEL.NE.0) DO
                    IF (BUFFIN(I,1).EQ.'(') THEN DO
                      LEVEL=LEVEL+1
                    ELSE DO
                      IF (BUFFIN(I,1).EQ.')') LEVEL=LEVEL-1
                    END IF
                    CARD(I)=BUFFIN(I,1)
                    BUFFIN(I,1)=' '
                    I=I+1
                  END WHILE
                  BUFFIN(I,1)=' '
                  I=I+1
                  LABEL=LABEL+1
                  WRITE(BUF11,7)LABEL
  7               FORMAT(',END=',I5,')')
                  BCOL=1
                CASE  (READAAAAAA,.../AT END DO)
C                     (READNNNNN,.../AT END DO)
C               READ ON STANDARD UNIT WITH FORMAT SPECIFIED BY
C               STMT. NO. OR VARIABLE
                  DO 90 I=1,5
  90              CARD(I)=BUFFIN(I,1)
                  CARD6=' READ(5,'
                  FMT=FMT2
                  LABEL=LABEL+1
                  WRITE(CARD20,7)LABEL
                  BCOL=RDEND+1
                  I=31
                END CASE
C               COMMON CODE FOR ALL READ FORMATS
C               PACK AND FORMAT READ LIST FROM 1ST CARD
                II=BCOL
                DO 94 BCOL=II,72
                IF (BUFFIN(BCOL,1).NE.' ') THEN DO
                   CARD(I)=BUFFIN(BCOL,1)
                   I=I+1
                   IF (I.GT.72) THEN DO
                     WRITE(PUNCH,1)CARD1
                     CARD1=' '
                     CARD(6)='*'
                     I=7
                   END IF
                 END IF
  94             CONTINUE
                 IF (I.GT.7) WRITE(PUNCH,1)CARD1
C                DUMP REMAINDER OF READ LIST FROM CONT'N. CARDS, IF ANY
                 IF (BUFFNO.GT.1) THEN DO
                   DO 93 I=2,BUFFNO
  93               WRITE(PUNCH,1)BUFIN1(I)
                 END IF
                 LABEL=LABEL+1
                 WRITE(PUNCH,2)LABEL
                 WRITE(PUNCH,3)LABEL-1
                 TOP=TOP+1
                 LABEL1(TOP)=LABEL
                 TYPE(TOP)=12
               END IF
             END CASE
C            COMMON CODE FOR ALL ONE-LINE STATEMENTS
C            READ NEXT CARD - ERROR IF CONTINUATION
             EXECUTE RD2
             IF (CARD(6).NE.' '.AND.CARD(6).NE.'0'.AND.CARD(1).NE.'C')
     *          ERRSW=1
C            IF ERROR SW. HAS BEEN SET, PRINT MSG. & RETURN
             IF (ERRSW.NE.0) THEN DO
               PRINT, ERROR1
               RETURN
             END IF
C    NOW WE HANDLE CODES>12: IF & WHILE FIRST, THEN READS
           ELSE DO
             IF (CODE.LT.15) THEN DO
               IF (CODE.EQ.14) THEN DO
C                REPLACE 'WHILE' WITH 'IF' & OUTPUT LABEL FOR LOOPING
                 LABEL=LABEL+1
                 WRITE(PUNCH,3)LABEL
                 N=CCOL-1
                 CARD(7)='I'
                 CARD(8)='F'
                 DO 88 I=9,N
  88             CARD(I)=' '
               END IF
               CCOL=CCOL+1
               LEVEL=0
               HOLL=0
C              SEARCH FOR LEVEL 0 RIGHT PAREN TO END LOGICAL EXPR'N.
               WHILE(CARD(CCOL).NE.')'.OR.LEVEL.NE.0.OR.HOLL.NE.0)DO
                 IF (CARD(CCOL).EQ.'''') THEN DO
                   IF (HOLL.EQ.0)THEN DO
                     HOLL=1
                   ELSE DO
                     HOLL=0
                   END IF
                 ELSE DO
                   IF (HOLL.EQ.0) THEN DO
                     IF (CARD(CCOL).EQ.'(')THEN DO
                       LEVEL=LEVEL+1
                     ELSE DO
                       IF (CARD(CCOL).EQ.')') LEVEL=LEVEL-1
                     END IF
                   END IF
                 END IF
                 CCOL=CCOL+1
                 IF(CCOL.GT.72) THEN DO
                   EXECUTE WRRD2
                   CCOL=7
                 END IF
               END WHILE
C    LEVEL 0 RIGHT PAREN FOUND - PACK REST & CHECK FOR THENDO, DO OR
C    EXECUTE FOLLOWING
               CARD(CCOL)=' '
               J=CCOL
               WHILE(CARD(CCOL).EQ.' ' .AND. CCOL.LE.72) DO
                 CCOL=CCOL+1
               END WHILE
               CARD(J)=')'
               J=J+1
               IF (CCOL.GT.72) THEN DO
                 EXECUTE WRRD2
                 J=CCOL=7
               END IF
               PACK1=' '
               PCOL=7
               EOC=0
               CHAR=CARD(CCOL)
               EXECUTE NPACK
               MATCH=0
               IF (PACK7 .EQ. 'EXECUTE') THEN DO
                 MATCH=2
               ELSE DO
                 IF (CODE.EQ.14) THEN DO
                   IF (PACK2 .EQ.'DO' .AND. EOC.EQ.1) THEN DO
                     MATCH=1
                   ELSE DO
C                  NO MATCH - PACK IT IN - ALREADY REPLACED 'WHILE'
                     PRINT, ERROR3
                     RETURN
                   END IF
                 ELSE DO
                   IF (PACK6.EQ.'THENDO' .AND. EOC.EQ.1) MATCH=1
                 END IF
               END IF
               IF (MATCH.EQ.0) THEN DO
                 EXECUTE WRRD1
               ELSE DO
C                OUTPUT GOTO'S & CONTINUES FOR IF & WHILE
                 LABEL=LABEL+1
                 WRITE(FMT2,9)LABEL
  9              FORMAT(I5)
                 CCOL=J
                 IF (CCOL.GT.64) THEN DO
                   DO 87 I=CCOL,72
  87               CARD(I)=' '
                   WRITE(PUNCH,1)CARD1
                   CARD1='     *GOTO'
                   CCOL=11
                 ELSE DO
                   CARD(CCOL)='G'
                   CARD(CCOL+1)='O'
                   CARD(CCOL+2)='T'
                   CARD(CCOL+3)='O'
                   CCOL=CCOL+3
                 END IF
                 DO 86 I=1,5
  86             CARD(CCOL+I)=FMT1(I)
                 IF (J.LT.64) THEN DO
                   II=CCOL+6
                   DO 85 J=II,72
  85               CARD(J)=' '
                 END IF
                 WRITE(PUNCH,1)CARD1
                 LABEL=LABEL+1
                 WRITE(PUNCH,2)LABEL
                 WRITE(PUNCH,3)LABEL-1
                 TOP=TOP+1
                 LABEL1(TOP)=LABEL
                 TYPE(TOP)=CODE
                 IF (CODE.EQ.14) LABEL2(TOP)=LABEL-2
                 IF (MATCH .EQ. 2) THEN DO
C                  WHILE-EXECUTE OR IF-EXECUTE
                   EXECUTE EXEC
                   IF (CODE .EQ. 14) THEN DO
                     EXECUTE ENDWH
                   ELSE DO
                     EXECUTE ENDIF
                   END IF
                 END IF
                 EXECUTE RD2
                 IF (CARD(6).NE.' ' .AND. CARD(6).NE.'0' .AND.
     *               CARD(1).NE.'C') THEN DO
                   PRINT,ERROR4
                   RETURN
                 END IF
               END IF
             ELSE DO
C NOW WE HANDLE THE READS: CODES 15-18
               IF (CODE .EQ. 18) THEN DO
C                PICK UP FORMAT STMT. NO. & CHANGE CODE TO HANDLE
C                LATER WITH VARIABLE FORMAT NO. READ STMT.
                 PACK1=' '
                 PCOL=1
                 CODE=17
                 CHAR=CARD(CCOL)
                 I=TRAN(CHAR)
                 WHILE (I.NE.4) DO
                   IF (I.NE.9) THEN DO
                     IF (I.NE.7) THEN DO
                       PRINT,ERROR1
                       RETURN
                     ELSE DO
                       PACKED(PCOL)=CHAR
                       PCOL=PCOL+1
                     END IF
                   END IF
                   CCOL=CCOL+1
                   IF (CCOL.EQ.73) THEN DO
                     PRINT,ERROR1
                     RETURN
                   END IF
                   CHAR=CARD(CCOL)
                   I=TRAN(CHAR)
                 END WHILE
                 IF (PCOL.GT.6) THEN DO
                   PRINT, ERROR1
                   RETURN
                 END IF
                 FMT2=PACK1
                 RDEND=CCOL
               END IF
               I=1
               EOS=0
C              MOVE READ STMT. INTO BUFFERS TO BE MANIPULATED LATER
C              IF 'ATENDDO' FOLLOWS
               WHILE (EOS.EQ.0) DO
                 BUFIN1(I)=CARD1
                 EXECUTE RD1
                 I=I+1
                 IF (I.GT.21) THEN DO
                   PRINT, ERROR2
                   RETURN
                 END IF
               END WHILE
               BUFFNO=I-1
             END IF
           END IF
         END IF
C      BEFORE WE PROCESS THE NEXT STMT., CHECK IF ERRSW HAS BEEN SET.
C      IF SET, PRINT ERROR MSG. AND RETURN
         IF(ERRSW.NE.0)THEN DO
           PRINT,ERROR1
           RETURN
         END IF
       END WHILE
C      END OF TRANSLATION
C      DUMP BUFFERS IF LAST STMT. A READ
       IF (CODE.GE.15)THEN DO
         DO 84 I=1,BUFFNO
  84     WRITE(PUNCH,1)BUFIN1(I)
       END IF
       IF (TOP .GT. 1) THEN DO
         PRINT, ERROR1
       ELSE DO
         PRINT,'*** TRANSLATION COMPLETED ***'
       END IF
       RETURN
C
       REMOTE BLOCK NPACK
         IF (EOC.EQ.0) THEN DO
           I=TRAN(CHAR)
           WHILE (I.GE.7 .AND. EOC.EQ.0) DO
             IF (I.NE.9) THEN DO
               PACKED(PCOL)=CHAR
               PCOL=PCOL+1
             END IF
             CCOL=CCOL+1
             IF (CCOL.EQ.73) THEN DO
               EOC=1
             ELSE DO
               CHAR=CARD(CCOL)
               I=TRAN(CHAR)
             END IF
           END WHILE
         END IF
       END BLOCK NPACK
C
       REMOTE BLOCK WRRD1
         EOS=0
         WHILE (EOS.EQ.0) DO
           WRITE(PUNCH,1)CARD1
           EXECUTE RD1
         END WHILE
       END BLOCK WRRD1
C
       REMOTE BLOCK WRRD2
         WRITE(PUNCH,1)CARD1
         EXECUTE RD2
         IF (CARD(6).EQ.' '.OR.CARD(6).EQ.'0'.OR.
     *       CARD(1).EQ.'C') THEN DO
           PRINT, ERROR1
           RETURN
         END IF
       END BLOCK WRRD2
C
       REMOTE BLOCK RD1
         READ(DECK,1)CARD1
         AT END DO
           EOS=1
           EOF=1
         END AT END
         IF (CARD(6).EQ.' ' .OR. CARD(6).EQ.'0' .OR.
     *       CARD(1).EQ.'C') EOS=1
       END BLOCK RD1
C
       REMOTE BLOCK RD2
         READ(DECK,1)CARD1
         AT END DO
           EOF=1
           CARD(6)=' '
         END AT END
       END BLOCK RD2
C
       REMOTE BLOCK XITCAS
         I=TOP
         FOUND=0
C        FIND DO CASE ENTRY
         WHILE (FOUND.EQ.0) DO
           IF (TYPE(I).EQ.5) FOUND=1
           I=I-1
         END WHILE
C        GENERATE EXIT GOTO FOR END OF CASE BLOCK
         WRITE(PUNCH,2)LABEL1(I)
       END BLOCK XITCAS
C
       REMOTE BLOCK CGOTO
         CARD1=' '
         I=I+1
C        CONSTRUCT COMPUTED GOTO WITH DOCASE INDEX VAR.
         WRITE(CGOTO,4)LABEL1(I),LABEL2(I)
 4       FORMAT(I5,' GOTO(',I5)
         NOLBLS=TOP-I
         N=0
         J=I+1
C        WORK THROUGH STACK GETTING END CASE ENTRY LABELS
C        AND FILLING IN GOTO LIST
         WHILE (NOLBLS.GT.0) DO
           IF (NOLBLS.LE.8) THEN DO
             N=NOLBLS
             NOLBLS=0
           ELSE DO
             N=8
             NOLBLS=NOLBLS-8
           END IF
           NN=J+N-1
           WRITE(CGOTO1,5)(LABEL1(K),K=J,NN)
 5         FORMAT(8(',',I5))
           J=NN+1
           IF (NOLBLS.NE.0) THEN DO
             WRITE(PUNCH,1)CARD1
             CARD1=' '
             CARD(6)='*'
           END IF
         END WHILE
         CCOL=N*6+17
         CARD(CCOL)=')'
         CARD(CCOL+1)=','
         DO 97 K=1,4
  97     CARD(CCOL+K+1)=CASIN1(K,I-1)
         CARD(CCOL+6)=CASIN2(1,I-1)
         CARD(CCOL+7)=CASIN2(2,I-1)
         WRITE(PUNCH,1)CARD1
         I=I-1
       END BLOCK CGOTO
C
       REMOTE BLOCK ENDIF
C        'ENDIF' - TOP MUST BE 'IF-THEN' OR 'ELSEDO'
         IF (TYPE(TOP).NE.13 .AND. TYPE(TOP).NE.1) THEN DO
           ERRSW=1
         ELSE DO
           WRITE(PUNCH,3)LABEL1(TOP)
           TOP=TOP-1
         END IF
       END BLOCK ENDIF
C
       REMOTE BLOCK ENDWH
C        'ENDWHILE' - TOP MUST BE 'WHILE-DO'
         IF (TYPE(TOP).NE.14) THEN DO
           ERRSW=1
         ELSE DO
           WRITE(PUNCH,2)LABEL2(TOP)
           WRITE(PUNCH,3)LABEL1(TOP)
           TOP=TOP-1
         END IF
       END BLOCK ENDWH
C
       REMOTE BLOCK EXEC
         IF (EOC.EQ.0) THEN DO
           ERRSW=1
         ELSE DO
           LENGTH=PCOL-14
           IF (LENGTH.LT.5) THEN DO
             DO 79 I=PCOL,18
 79          PACKED(I)=' '
           END IF
           BLKNM1(1)='$'
           DO 78 I=2,6
 78        BLKNM1(I)=PACKED(12+I)
           EXECUTE NMSRCH
           IF (I.GT.NTOP) THEN DO
             NTOP=I
             LABEL=LABEL+1
             STRTNO(1,I)=LABEL
             STRTNO(2,I)=RTOP+1
           END IF
           LABEL=LABEL+1
           RTOP=RTOP+1
           RETRNS(1,RTOP)=LABEL
           IF (STRTNO(2,I).EQ.RTOP) THEN DO
             RETRNS(2,RTOP)=0
           ELSE DO
             RETRNS(2,RTOP)=STRTNO(2,I)
             STRTNO(2,I)=RTOP
           END IF
C          IF STMT. NO. ON EXECUTE, GENERATE A CONTINUE
           IF (CODE.EQ.9 .AND. STNO.NE.' ') WRITE(PUNCH,12)STNO
  12       FORMAT(A5,' CONTINUE')
C          GENERATE ASSIGN, GOTO AND RETURN STMT. NO.
           WRITE(PUNCH,8)LABEL,BLKNAM
           WRITE(PUNCH,2)STRTNO(1,I)
           WRITE(PUNCH,3)LABEL
 8         FORMAT(6X,'ASSIGN ',I5,' TO ',A6)
         END IF
       END BLOCK EXEC
C
       REMOTE BLOCK NMSRCH
         BNAME(NTOP+1)=BLKNAM
         I=1
         WHILE(BLKNAM.NE.BNAME(I))DO
           I=I+1
         END WHILE
       END BLOCK NMSRCH
      END
