         MACRO
&NAME    BEGINRPF
         GBLB  &REGSW
         AIF   (&REGSW).A01
&REGSW   SETB  1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
.A01     ANOP
&NAME    CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         USING &NAME,R15
         LA    R14,&NAME+24        SAVE AREA
         ST    R13,&NAME+28
         ST    R14,8(0,R13)
         LR    R13,R14
         CNOP  0,4
         B     *+100
         DC    18F'-1'
         DC    CL8'&NAME',CL8'&SYSDATE',CL8'&SYSTIME'
         DS    0H
         DROP  R15
         USING &NAME+24,R13        GET ADDRESSABILITY
         MEND
RPFEDIT  TITLE 'MVS F U L L S C R E E N   EDITOR'
*---------------------------------------------------------------------*
*                                                                     *
*        MODULE:        RPFEDIT.                                      *
*                                                                     *
*        FUNCTION:      LOAD THE DATASET SPECIFIED BY DDNAME RPFWORK  *
*                       INTO THE EDIT WORKSPACE AND ALLOW THE USER    *
*                       TO UPDATE THE WORKSPACE IN FULLSCREEN MODE    *
*                       A CARD IMAGE DATASET.                         *
*                                                                     *
*        SUBCOMMANDS:    1. SCF:     SCROLL FORWARD FULL/HALF/LINE/MAX*
*                        2. SCB:    SCROLL BACKWARD FULL/HALF/LINE/MAX*
*                        3. L +N:    SKIP FOREWARD N LINES.           *
*                        4. L -N:    SKIP BACKWARD N LINES.           *
*                        5. L N:    MAKE LINE N THE FIRST LINE        *
*                           ON THE SCREEN.                            *
*                        6. R M,N:  REPEAT LINE M N TIMES OR REPEAT   *
*                           CURRENT LINE IF M='*'                     *
*                        7. DEL N,M: DELETE LINES N-M                 *
*                        7. DEL *,N  DELETE N LINES STARTING WITH     *
*                           CURRENT LINE; IF N=99999999 THE CURRENT   *
*                           TILL THE END OF THE WORKSPACE WILL BE     *
*                           DELETED.                                  *
*                        8. I M,N:  INSERT N LINES AFTER LINE M OR IN *
*                           SERT AFTER CURRENT LINE IF M='*'          *
*                        9. SAVE (FORCE): SAVE WORKSPACE              *
*                       10. REN(UM) RENUMBER WORKSPACE AND GOTO 'NUM' *
*                       11. UNN(UM) REMOVE NUMBERS AND GOTO NONUM MODE*
*                       12. NUM:    SAME AS RENUMBER                  *
*                       13. NONUM:  GO TO 'NONUM' MODE                *
*                       14. SCR:    SCROLL RIGHT (COLUMNS 9-80)       *
*                       15. SCL:    SCROLL LEFT (COLUMNS 1-72)        *
*                       16. COB:    ALIGN ON COBOL  (COLUMNS 07-78)   *
*                       17. NOCOB:  REMOVE COBOL (ALIGN LEFT)         *
*                       18. SUB:    SUBMIT THE WORKSPACE.             *
*                       19. CO LN1,LN2,LN3: COPY LN1-LN2 BEHIND LN3.  *
*                       20. MO LN1,LN2,LN3: COPY LN1-LN2 BEHIND LN3   *
*                           AND DELETE THE ORIGINAL LN1-LN2           *
*                       21. F /STRING/: MAKE THE LINE, WHICH CONTAINS *
*                           THE 'STRING' THE FIRST LINE ON YOUR SCREEN*
*                       21  F /STRING/N,M FIND STRING IN RANGE N-M    *
*                       22  O /STRING/ THE OPPOSITE OF FIND (OMIT)    *
*                       23. END:    TERMINATE EDIT.                   *
*                       23. END SAVE: TERMINATE EDIT AND SAVE         *
*                       24. TOP:    DISPLAY 1ST SCREEN.               *
*                       25. BOTTOM: DISPLAY LAST SCREEN.              *
*                       26. PFK:    RESET PFK DEFINITIONS.            *
*                       27. HELP:   DISPLAY HELP SCREEN.              *
*                       28. C /AA/BBB/(A) CHANGE CHAR STRINGS.        *
*                       28. C /AA/BBB/N,M CHANGE CHAR STRINGS IN RANGE*
*                           N-M                                       *
*                       29. NULLS: REMOVE TRAILING BLANKS ON SCREEN   *
*                       30. NONULLS: RESET NULLS.                     *
*                       31. CAPS:    XLATE LOWERCASE TO CAPS          *
*                       32. ASIS:    LET WORKSPACE IN 'ASIS' MODE     *
*                       34. HAR XXXXXX N,M,<NOTITLE>,<NOEJECT>,<C=CC> *
*                           PRINT LINES N,M ON PRINTER XXXXX IF N-M   *
*                           ARE OMITTED THE SCREEN WILL BE PRINTED.   *
*                       35. SCOPE N,M SET EDIT SCOPE TO COLS N,M      *
*                       36. FILL /STRING/ FILL ED.SCOPE WITH 'STRING' *
*                           STARTING WITH CURRENT LINE TILL END       *
*                       37. FILL /STRING/N,M FILL CMD FOR LINERANGE   *
*                       38. LC N,M SET LINES N,M TO ASIS(WITHIN SCOPE)*
*                       39. UC N,M SET LINES N,M TO CAPS(WITHIN SCOPE)*
*                       40. SORT: SORT WORKSPACE (SET BY 'SCOPE')     *
*                       41. EOF KEY CAN BE USED TO DELETE LINE FROM WS*
*                       42. &: RESET PREVIOUS COMMAND IN COMMAND AREA *
*                       43. CANCEL: STOP EDIT WITHOUT SAVE            *
*                       44. RESET : RESET PENDING LINECOMMANDS.       *
*                       45. COPY: APPEND ANOTHER MEMBER OR DATASET.   *
*                       46. OUT:    INVOKE OUTPUT PROCESSOR           *
*                       47. JCL:    INVOKE JCL CHECKER                *
*                       48. =N/=N.N RETURN TO RPFMAIN AND EXEC     @RP1
*                           OPTION 'N' OR OPTION 'N.N'             @RP1
*                       49. RETRIEVE last command from buffer      @rp6
*                       50. CUT: add range of lines to 'clipboard' @rpb
*                       51. PASTE: copy 'clipboard' after line 'A' @rpb
*                           of before line-1 (TT) or after last    @rpb
*                           record (BB)                            @rpb
*                                                                     *
*        NOTES:         THE SUBCOMMANDS WILL BE REPEATED IF THE       *
*                       COMMAND IS PREFIXED WITH AN '&'               *
*                       THE CURRENT LINE IS ALLWAYS THE FIRST LINE    *
*                       ON YOUR SCREEN.                               *
*                       LINE = 0 MEANS BEFORE THE FIRST LINE.         *
*                                                                     *
*        LINECOMMANDS:   1. A ...... DESTINATION AFTER THIS LINE.     *
*                        2. BB ..... DESTINATION AFTER LAST LINE.     *
*                        3. TT ..... DESTINATION BEFORE FIRST LINE.   *
*                        4. C ...... COPY THIS LINE.                  *
*                        5. CC-CC .. COPY THESE LINES.                *
*                        6. CB ..... COPY FROM THIS LINE UNTIL AND    *
*                                    INCLUDING LAST LINE.             *
*                        7. CT ..... COPY FROM FIRST LINE UNTIL AND   *
*                                    INCLUDING THIS LINE.             *
*                        8. M ...... MOVE THIS LINE.                  *
*                        9. MM-MM .. MOVE THESE LINES.                *
*                       10. MB ..... MOVE THIS LINE UNTIL AND INCLU-  *
*                                    DING LAST LINE.                  *
*                       11. MT ..... MOVE FIRST LINE UNTIL AND INCLU- *
*                                    DING THIS LINE.                  *
*                       12. D ...... DELETE THIS LINE.                *
*                       13. DD-DD .. DELETE THESE LINES.              *
*                       14. DB ..... DELETE THIS LINE UNTIL AND IN-   *
*                                    CLUDING LAST LINE.               *
*                       15. DT ..... DELETE FIRST LINE UNTIL AND IN-  *
*                                    DING THIS LINE.                  *
*                       16. IX ..... INSERT X LINES AFTER THIS LINE.  *
*                       17. RX ..... REPEAT THIS LINE X TIMES.        *
*                       18. RR-RR... REPEAT BLOCK OF LINES            *
*                       19. UC...... XLATE LINE TO CAPITALS           *
*                       20. LC...... XLATE LINE TO ASIS               *
*                       21. UCC..UCC XLATE BLOCK OF LINES TO CAPS     *
*                       22. LCC..LCC XLATE BLOCK OF LINES TO ASIS     *
*                       23. RESET .. RESET PENDING LINECOMMANDS.      *
*                                                                     *
*        SUBROUTINES:   RPFEDITL: LOAD THE DATASET INTO THE WORKSPACE.*
*                       RPFSUB:   SUBMIT THE WORKSPACE                *
*                       RPFTSO:   TSO commands                        *
*                       RPFOUT:   Output processor                    *
*                       RPFPFK:   PFK definition module               *
*                       RPFFIND:  SUBROUTINE FOR 'F' AND 'O' SUBCOMM. *
*                       RPFFILL:  SUBROUTINE FOR 'FILL', 'LC', 'UC'   *
*                       RPFCHNG:  SUBROUTINE FOR 'C' SUBCOMMAND       *
*                       RPFHCPY:  SUBROUTINE FOR 'HAR' SUBCOMMAND     *
*                       RPFHELP:  ROUTINE FOR 'HELP' SUBCOMMAND       *
*                                                                     *
*        RETURNCODES: (SET IN RTNCODE)                                *
*                       00. EXECUTION ALRIGTH                         *
*                       04. LOAD TERMINATED AFTER END OF WORKSPACE    *
*                       08. NOTHING LOADED, WORKSPACE FULL            *
*                       12. NOTHING LOADED, FILE EMPTY                *
*                       16. EDIT CANCELED, WORKSPACE EMPTY            *
*                       20. EDIT CANCELED, DATASET/MEMBER IN USE      *
*                                                                     *
*        MODIFICATIONS:                                               *
*        2002/07/17: RPR ADD '=N'/'=N.N' COMMAND                   @RP1
*        2002/08/01: RPR PRESERVE EMPTY WORKSPACE IF ALL LINES DELETED*
*        2002/08/05: RPR Allow editing empty dataset or member     @rp3
*        2002/08/24: Block editing Variable length data            @rp4
*        2002/08/31: Positioning problems solved in Delete         @rp5
*        2002/09/30: RETRIEVE command added                        @rp6
*        2002/10/20: AUTOSAVE param checked if END command given   @rp7
*        2002/10/27: Support command 'nnnnn' together with the SCF or *
*                    SCB pfkey. (nnnnn is 1-5 figures (0-9)        @rp8
*        2003/02/06: Only MDT of changed lines set.                @rp9
*        2003/06/20: Add End of Data Marker and protect unused flds@rpa
*        2003/12/04: Cut and Paste subcommand added                @rpb
*        2004/01/04: Abend 0c4 at X'14e8' solved with trunc workspc@rpc
*        2005/02/08: "FIND" along with "F" command allowed         @rpd
*                    and set only changed flag if 'c' command is   @rpd
*                    succesful                                     @rpd
*        2005/02/12: Allow TOP and BOTTOM commands along with line    *
*                    commands                                      @rpe
*        2006/03/16: Fill end of screen with blanks instead nulls  @rpf
*        2006/09/29: Loop solved in PFK routine                    @rpg
*        2008/08/29: Loop solved in VIEWCUT if a CUT command is    @rph
*                    given with "MM" line commands                 @rph
*        2008/09/01: The line commands can be entered in any place @rpj
*                    in the line number field                      @rpj
*                                                                     *
*----------------------------------------- (C)-2008 SKYBIRD SYSTEMS --*
         SPACE 2
RPFEDIT  BEGINRPF
         LA    R12,2048(R13)
         LA    R12,2048(R12)
         LA    R10,2048(R12)
         LA    R10,2048(R10)
         LA    R9,2048(R10)
         LA    R9,2048(R9)
         USING RPFEDIT+24,R13,R12,R10,R9
         L     R11,0(R1)               ADDRESS COMMAREA INTO REG.11
         ST    R11,SUBLIST             REG.11 INTO PARMLIST
         USING COMMAREA,R11
         MVC   RTNCODE,F0000           RESET RTNCODE
         L     R15,=V(SRCHLINE)        SEARCH LINE NBR ROUTINE
         ST    R15,EPSRCH              SAVE EP IN COMMAREA
         NI    INFCODE3,255-$EDTCOPY   SET COPY FLAG OFF
*---------------------------------------------------------------------*
*        FLAG $EDTCOPY WILL BE SET IF A COPY COMMAND IS GIVEN         *
*        HERE THE FLAG WILL BE RESET UPON ENTRY OF RPFEDIT            *
*---------------------------------------------------------------------*
         NI    INFCODE4,255-$SAMEDS-$CHANGED
         MVI   MSG5,C'-'               CLEAR
         MVC   MSG5+1(L'MSG5-1),MSG5        MESSAGE
         XC    LFLAGS,LFLAGS           Reset flgs pending linecmds @rpb
         MVC   LLINES,BLANKS           RESET LINENUMBER S          @rpb
         MVC   SCR5ADDR+1(2),=X'C1D8'  R02,C09 IS DEFAULT CURSOR ADDR
         MVI   SW,X'00'                INIT SW
         MVC   SCR5ASIS,INTLOW         DEFAULT CAPS
         MVC   SCR5NULL,INTLOW         DEFAULT NONULLS
         MVC   SCR5STA(6),=C'Update'   DEFAULT NO INPUT
         MVC   SCR5NON,INTLOW          DEFAULT NUMBERED
         MVC   SCR5TRUN,INTLOW         INIT NOT TRUNCATED
         MVC   SCR5XLAT,INTLOW         INIT NOT XLATED
         MVC   ALG5TOP+7(72),TXT5LFT   MOVE DEFAULT SCALE LINE
         TM    INFCODE,$COBOL          COBOL ALIGNMENT REQUESTED ?
         BNO   START03                 NO: PROCEED
         MVC   ALG5TOP+7(72),TXT5COB   MOVE COBOL SCALE LINE
START03  EQU   *
         XC    SCOPENUM,SCOPENUM       BUILD DEFAULT SCOPE COMMAND
         BAL   R14,SCOPE               DEFAULT SCOPE INTO SCREEN
         NI    SW,255-$NULLS           DEFAULT NONULLS
         CLC   DEFNULL,=C'YES'         NULLS ???
         BNE   START09                 NO: BRANCH
         OI    SW,$NULLS               ELSE MARK NULLS
         MVC   SCR5NULL,INTHIGH        HIGHLIGHT OPTION
START09  EQU   *
         CLC   COMMSIZE,=H'24'         24 LINES GOTTEN
         BE    START19                 YES: NORMAL 24X80 DISPLAY
         CLC   COMMSIZE,=H'32'         32 LINES GOTTEN ?
         BE    START17                 YES: 3278/79 MODEL 3
         CLC   COMMSIZE,=H'43'         43 LINES GOTTEN ?
         BE    START15                 YES: 3278/79 MODEL 4
         B     START19                 NOT ONE OF ABOVE MODEL 2 DISPLAY
START15  EQU   *
         MVC   SCR1WCC(2),=X'277E'     GENERATE WRITE ALTERNATE
         MVC   SCRPAGE,=C'40  '        40 LINES TO DISPLAY
         MVC   SCRHALF,=C'20  '        20 LINES IF SCROLL IS HALF
         MVC   #LINES,=H'40'
         LA    R4,LINES40              TOTAL NUMBER OF BYTES ON SCREEN
         STH   R4,SCRLEN               STORE THE RESULT
         LA    R4,SCR543               LOAD THE TPUT LENGTH
         ST    R4,TPUTLEN              AND SAVE IT
         B     START21
START17  EQU   *
         MVC   SCR1WCC(2),=X'277E'     GENERATE WRITE ALTERNATE
         MVC   SCRPAGE,=C'29  '        29 LINES TO DISPLAY
         MVC   SCRHALF,=C'15  '        15 LINES IF SCROLL IS HALF
         MVC   #LINES,=H'29'
         LA    R4,LINES29              TOTAL NUMBER OF BYTES ON SCREEN
         STH   R4,SCRLEN               STORE THE RESULT
         LA    R4,SCR532               LOAD THE TPUT LENGTH
         ST    R4,TPUTLEN              AND SAVE IT
         B     START21                 OK BRANCH
START19  EQU   *
         MVC   SCR1WCC(2),=X'27F5'     GENERATE WRITE
         MVC   SCRPAGE,=C'21  '        21 LINES TO DISPLAY
         MVC   SCRHALF,=C'11  '        11 LINES IF SCROLL IS HALF
         MVC   #LINES,=H'21'
         LA    R4,LINES21              TOTAL NUMBER OF BYTES ON SCR.
         STH   R4,SCRLEN               STORE THE RESULT
         LA    R4,SCR524               LOAD THE TPUT LENGTH
         ST    R4,TPUTLEN              AND SAVE IT
START21  EQU   *
         MVC   FIRSTSCR,FIRSTREC
         MVC   LASTSCR,FIRSTREC
         MVC   SCROLL2+08(4),=C'CSR '  DEFAULT CURSOR SCROLL
         MVC   SCROLL5+08(4),=C'CSR '  DEFAULT CURSOR SCROLL
         MVC   SCROLNUM(4),=C'CSR '    21/29/40 LINES
         MVC   COPMEM,MEMBER           SAVE MEMBER-NAME
         MVC   COPYDSN,DSNAME          SAVE DATASET NAME
         MVC   COPYVOL,VOLUME          SAVE VOLUME
         MVC   NUMFLD(8),MEMBER        MEMBER INTO NUMFLD
         TR    NUMFLD(8),COMTRTAB      XLATE UNPRINTABLES FROM NAME
         MVC   SAVEMBR,NUMFLD          SAVE XLATED MEMBERNAME
         MVC   SCR5MEM,NUMFLD          MEMBER INTO SCREEN
         TM    INFCODE,NOTLOAD         EDIT CURRENT WORKSPACE ?
         BO    CODE00                  YES: GO TO EDITOR
         TM    INFCODE,DATAENT         DATA ENTRY ?
         BZ    LINK                    NO: LINK TO XPFEDITL
CREATE   DS    0H                                                  @rp3
         NI    INFCODE,X'FF'-DATAENT   RESET INFCODE
         MVC   FIRSTSCR,FIRSTREC       POINT TO BEGINNING OF WORKSPACE
         L     R2,FIRSTSCR             POINT TO BEGINNING OF WORKSPACE
         AH    R2,SCRLEN               POINT TO END OF SCREEN
         S     R2,RLENGTH              MINUS 1 LINE
         ST    R2,LASTSCR              POINT TO END OF SCREEN
         ST    R2,LASTREC              POINT TO END OF SCREEN
         LH    R3,#LINES               20/28/39 LINES
         L     R2,FIRSTREC             POINT TO FIRST LINE
         USING WORKSPCE,R2             ADDRESS WORKSPACE RECORD
DATA     EQU   *
         MVC   0(NEXTENT,R2),BLANKS
         XC    WORKFLGS,WORKFLGS       CLEAR FLAGS
         OI    WORKFLGS,$INSERTD       INSERTED LINE WITH NO DATA
         DROP  R2
*---------------------------------------------------------------------*
*        THE WORKSPACE RECORD CONTAINS THE FOLLOWING INFO:            *
*        1.    THE LINE NUMBER ON THE SCREEN (NOT IN DATA): 6 BYTES   *
*        2.    2 FLAGBYTES                                            *
*              FLAG 1: (X'8000') IF ON: LINE IS INSERTED BUT CONTAINS *
*                                       NO DATA                       *
*        3.    THE DATA (AT THIS MOMENT 80 BYTES                      *
*----------------------------------------- (C)-2005 SKYBIRD SYSTEMS --*
         LA    R2,NEXTENT(R2)
         BCT   R3,DATA
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         MVC   SCR5STA,=C'Create'      INPUT MODE
         B     RTN0000                                             @rp3
LINK     EQU   *
         LINK  EP=RPFEDITL,PARAM=((11))
         MVC   MEMBER,COPMEM           RESTORE MEMBER
         MVC   DSNAME,COPYDSN          RESTORE DSNAME
         MVC   VOLUME,COPYVOL          RESTORE VOLUME
CODE00   CLC   RTNCODE,F0000
         BE    INIT
CODE04   CLC   RTNCODE,F0004
         BNE   CODE08
         OI    SW,$TRUNC               INDICATE LOAD TERMINATED
         MVC   SCR5TRUN,INTHIGH        INDICATE WORKSPACE TRUNCATED
         MVC   MSG5,ERR1TXT            LOAD TERMINATED INTO SCREEN
         B     RTN0000                 CONTINUE PROCESSING
CODE08   CLC   RTNCODE,F0008
         BNE   CODE12
         B     RETURN
CODE12   CLC   RTNCODE,F0012           FILE EMPTY ?
         BNE   CODE20
         TM    INFCODE3,$EDTCOPY       COPY COMMAND OF EDIT?
         BO    RTN0000                 YES: IGNORED DATASET EMPTY
         B     CREATE                  Go to create mode           @rp3
CODE20   CLC   RTNCODE,F0020           ENQ FAILED ?
         BNE   CODE24                                              @rp4
         B     RETURN                                              @rp4
CODE24   CLC   RTNCODE,F0024           Recfm=V dataset             @rp4
         BNE   CODEXX                  Unexpected return code      @rp4
         B     RETURN
CODEXX   MVC   MSG5,ERR2TXT
RTN0000  EQU   *
         XC    RTNCODE,RTNCODE         CLEAR RETURN CODE
INIT     XC    REP5,REP5               CLEAR REPLY AREA
         CLC   FIRSTREC,LASTREC        WORKSPACE EMPTY ?
         BNH   TEST1                   NO: PROCEED
         MVC   RTNCODE,F0016           RC= 0016 WORKSPACE EMPTY
         B     RETURN                  LEAVE EDITOR
TEST1    EQU   *                       TEST IF UNPRINTABLES IN WORKSPC
         L     R4,FIRSTREC             FIRST RECORD POINTER
         LA    R6,NEXTENT              LENGTH OF LINE
         L     R7,LASTREC              LAST RECORD POINTER
         LA    R7,79(R7)               POINT TO LAST BYTE
TEST2    EQU   *
         USING WORKSPCE,R4             ADDRESS WORKSPACE RECORD
         TRT   WORKDATA(OFFSETN1),COMTRTST TEST ON UNPRINTABLES
         BZ    TEST2A                  BRANCH IF NOT
         OI    SW,$XLATED              MARK UNPRINTABLES
         MVC   SCR5XLAT,INTHIGH        MARK TEXT TRANSLATED INTO HEADER
TEST2A   TRT   WORKDATA(OFFSETN1),COMTRTXT TEST ON ASIS MODE
         BZ    TEST3                   BRANCH IF NOT
         OI    SW,$ASIS                INDICATE ASIS MODE
TEST3    EQU   *                       TEST IF DATA HAS VALID LINENBRS
         TM    INFCODE,$COBOL          IS IT COBOL ?
         BNO   TEST3A                  NO: TEST LINES IN COLS 73-80
         MVC   NUMFLD,C0000            MOVE ZEROES IN NUMFLD
         MVC   NUMFLD(6),0(R4)         TEST COLS 01-06
         B     TEST3B                  TEST IF NUMERIC
TEST3A   MVC   NUMFLD,OFFSETN1(R4)     MOVE COLS 73-80 TO NUMFLD
         DROP  R4
TEST3B   EQU   *                       TEST IF NUMERIC
         L     R15,=V(NUMTST)          ENTRY POINT NUMTST
         BALR  R14,R15                 EXEC NUMTST ROUTINE
         LTR   R15,R15                 OK ?
         BZ    TEST3C                  YES: DO NOT CHANGE ATTR.
         MVC   NUMBERED(3),=C'NO '     MARK NONUM MODE
TEST3C   BXLE  R4,R6,TEST2             LOOP
         TM    SW,$ASIS                ASIS MODE ?
         BNO   TEST4
         MVC   FOLD(3),=C'NO '         INDICATE ASIS MODE
TEST4    TM    SW,$XLATED              UNPRINTABLES DETECTED ?
         BNO   TEST11                  NO: PROCEED NORMAL EDIT
         MVC   MSG5(L'MSG3TXT),MSG3TXT TRANSLATED TEXT
TEST11   CLC   FOLD(2),=C'NO'
         BNE   TEST13
         MVC   SCR5ASIS,INTHIGH        INDICATE ASIS
TEST13   L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         CLC   NUMBERED(3),=C'YES'     LINE NUMBERS ?
         BE    PUT1
         MVC   SCR5NON,INTHIGH         INDICATE NONUM
         XC    SCOPENUM,SCOPENUM       BUILD DEFAULT SCOPE COMMAND
         BAL   R14,SCOPE               EXEC THIS COMMAND
         TITLE 'PROCESS THE SUBCOMMANDS'
PUT1     EQU   *
         TPUT  SCR1TXT,SCR1LEN,FULLSCR
VIEW     EQU   *
         MVC   CMDAREA,BLANKS          CLEAR CMDAREA FIELD
         BAL   R14,CNVOUT              CONVERT WORKAREA INTO SCREEN
         BAL   R14,CNVIN
         LTR   R15,R15
         BZ    VIEW07A
         C     R15,F0004               NO INPUT ?
         BE    VIEW
         C     R15,F0008               CLEAR KEY PRESSED ?
         BE    PUT1                    RESET SCREEN
         B     VIEWERRA                ERROR: CONVERT FAILED
VIEW07A  EQU   *
         CLI   AIDBYTE,X'7D'           ENTER KEY ?
         BE    VIEW07B
         CLI   AIDBYTE,X'6D'           CLEAR KEY ?
         BE    PUT1                    RESET SCREEN
         CLI   AIDBYTE,X'60'           NO AIDBYTE ?
         BE    PUT1                    RESET SCREEN
         BAL   R14,PFK                 SCAN PFK
         LTR   R15,R15                 RC= 0000 - CON=N ?
         BZ    VIEW07D                 YES: EXEC COMMAND
         C     R15,F0004               RC= 0004 - CON=Y ?
         BE    VIEW                    REVIEW SCREEN
         C     R15,F0012               RC= 0012 - INVALID PFK DEF.
         BE    VIEWERRD                PFK INVALID
         B     VIEWERRB                PFK NOT DEFINED
VIEW07B  CLC   FOLD(2),=C'NO'          EDIT WITH LOWERCASE ?
         BNE   VIEW07C                 NO: XLATE BUFFER TO UPPERCASE
         OC    BUFFER(2),BLANKS        XLATE ONLY FIRST 2 POS TO UPPER
         CLC   BUFFER(2),=C'C '        'C' COMMAND
         BE    VIEW07D                 YES: PROCEED
         CLC   BUFFER(3),=C'&&C '      REPEAT 'C' COMMAND ?
         BE    VIEW07D                 YES: PROCEED
         CLC   BUFFER(2),=C'F '        'F' COMMAND
         BE    VIEW07D                 YES: PROCEED
         CLC   BUFFER(3),=C'&&F '      REPEAT 'F' COMMAND ?
         BE    VIEW07D                 YES: PROCEED
         CLC   BUFFER(2),=C'O '        'O' COMMAND
         BE    VIEW07D                 YES: PROCEED
         CLC   BUFFER(3),=C'&&O '      REPEAT 'O' COMMAND ?
         BE    VIEW07D                 YES: PROCEED
VIEW07C  OC    BUFFER,BLANKS           TRANSLATE WHOLE BUFFER
VIEW07D  XC    REP5,REP5               CLEAR REPLY AREA
         CLC   BUFFER,BLANKS           NULL LINE ENTERED ?
         BE    VIEW                    YES: REVIEW CHANGED SCREEN
         CLI   BUFFER,X'00'            NULL LINE ENTERED ?
         BE    VIEW
         CLI   BUFFER,X'50'            REPEAT COMMAND ?
         BNE   VIEW07H                 NO: PROCEED
         CLI   BUFFER+1,X'40'          REPEAT PREVIOUS COMMAND ?
         BNE   VIEW07E
         MVC   REP5,SAVECMD            SET PREVIOUS COMMAND INTO
         B     VIEW                    ) COMMAND AREA
VIEW07E  MVC   BUFFER(47),BUFFER+1     SHIFT OUT X'50'
         MVI   BUFFER+47,X'40'         INSERT BLANK
         MVC   REP5+1(47),BUFFER       REPEAT COMMAND
         MVI   REP5,X'50'              INSERT X'50'
         B     VIEW07H
VIEW07H  EQU   *                       SCAN THE SUBCOMMANDS
         CALL  CMDSCAN,(BUFFER,(11))   SCAN THE SUBCOMMANDS        @rp6
         B     VIEWSCAN(15)            Go to branchlist            @rp6
VIEWSCAN B     VIEWEX                  Exec command                @rp6
         B     VIEWERR3                Command not found           @rp6
         B     VIEWRTRV                Command retrieved           @rp6
         B     VIEWERR5                Nothing to RETRIEVE         @rp6
VIEWEX   DS    0H                                                  @rp6
         LR    R14,R1                  PICKUP ROUTINE ADDRESS
         BR    R14                     EXECUTE SUBCOMMAND
*------- ----- ----------------------- SUBCOMMAND 'RETRIEVE'       @rp6
VIEWRTRV EQU   *                                                   @rp6
         MVC   REP5,0(R1)              Move gotten command         @rp6
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'I '
VIEWINP  EQU   *
         BAL   R14,INPUT
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'SCF'
VIEWFORW EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVI   BUFFER,C'L'             CREATE 'L'  COMMAND
         CLC   SCROLNUM(4),=C'CSR '    SCROLL ON CURSOR LOCATION ?
         BE    VIEWFOR2                YES: CALCULATE # OF SCROLL LINES
         MVI   BUFFER+2,C'+'           MOVE SIGN
         MVC   BUFFER+3(4),SCROLNUM    MOVE NUMBER OF LINES
         B     VIEWLINE                EXECUTE LINE COMMAND
VIEWFOR2 CALL  CSR                     FIND CURSOR POSITION
         LTR   R15,R15                 RC= 0000 ?
         BZ    VIEWFOR4                YES: LINE FOUND
VIEWFOR3 EQU   *
         MVI   BUFFER+2,C'+'           MOVE SCROLL SIGN
         B     VIEWSCRO                DEFAULT SCR.VALUE (1 SCRN - 1)
VIEWFOR4 EQU   *
         MVC   BUFFER+2(8),NUMFLD      LINE TO WHERE WE SCROLL
         B     VIEWLIN6                EXEC LOCATE COMMAND
*------- ----- ----------------------- SCROLL DEFAULT (SCROLL CSR)
VIEWSCRO EQU   *
         LH    R1,#LINES               MOVE NUMBER OF LINES/SCREEN
         BCTR  R1,0                    MINUS 1
         CVD   R1,PACKFLD              DECIMAL
         UNPK  BUFFER+3(4),PACKFLD     EBCDIC
         OI    BUFFER+6,X'F0'          CLEAR SIGN
         B     VIEWLINE                EXEC LINE COMMAND
*------- ----- ----------------------- SUBCOMMAND 'SUB'
VIEWSUB  EQU   *
         LINK  EP=RPFSUB,PARAM=SUBLIST LINK TO ROUTINE
         B     VIEWSUBX(R15)
VIEWSUBX B     VIEWSUB1                JOB SUBMITTED
         B     VIEWSUB2                SUBMIT FAILED
         B     VIEWSUB3                NO JOBSTATEMENT
VIEWSUB1 MVC   MSG5,MSG2TXT            JOB SUBMITTED
         B     PUT1                    REVIEW SCREEN
VIEWSUB2 MVC   MSG5(L'ERRITXT),ERRITXT MOVE ERROR MESSAGE
         B     VIEW                    REVIEW SCREEN
VIEWSUB3 MVC   MSG5(L'ERRATXT),ERRATXT MOVE ERROR MESSAGE
         B     VIEW                    REVIEW SCREEN
*------- ----- ----------------------- SUBCOMMAND 'SCB'
VIEWBACK EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVI   BUFFER,C'L'             CREATE 'L'  COMMAND
         CLC   SCROLNUM(4),=C'CSR '    CURSOR SCROLL ?
         BE    VIEWBAC2                YES: TRY TO FIND CURSOR
         MVI   BUFFER+2,C'-'           CREATE LINE COMMAND
         MVC   BUFFER+3(4),SCROLNUM    MOVE # OF LINES TO SCROLL
         B     VIEWLINE                EXEC LINE COMMAND
VIEWBAC2 CALL  CSR                     TRY TO FIND CURSOR
         LTR   R15,R15                 CURSOR FOUND ?
         BZ    VIEWBAC4                YES: SCROLL CURSOR
         MVI   BUFFER+2,C'-'           MOVE SCROLL SIGN
         B     VIEWSCRO                SCROLL DEFAULT
VIEWBAC4 EQU   *
         LA    R1,NUMFLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 TRY TO FIND LINE
         LTR   R15,R15                 LINE FOUND ?
         BNZ   VIEWERRC                NO: GIVE ERROR MESSAGE
         LR    R2,R1                   ADDRESS OF FOUND LINE IN REG.
         XR    R4,R4                   CLEAR REG. 4
         LH    R5,#LINES               NUMBER OF LINES ON SCREEN
         BCTR  R5,0                    MINUS 1
         M     R4,RLENGTH              MULTIPLY BY LINE LENGTH
         SR    R2,R5                   BACK # LINES
         C     R2,FIRSTREC             LOWER THAN FIRSTREC ?
         BNL   VIEWBAC6                 NO: PROCEED
         L     R2,FIRSTREC             LOAD FIRST RECORD POINTER
VIEWBAC6 EQU   *
         MVC   BUFFER+2(6),OFFSETN2(R2) MOVE LINE NUMBER
         B     VIEWLIN6                EXEC LOCATE COMMAND
*------- ----- ----------------------- SUBCOMMAND 'C'
VIEWCHNG LA    R14,BUFFER              ADDRESS OF BUFFER
         STCM  R14,R15,CMDAREA         STORE ADDRESS IN COMMAREA
         L     R15,EPCHNG              LOAD ENTRY POINT
         ST    R11,ADDRCOM             PARAMETER
         LA    R1,ADDRCOM              INTO REG 1
         BALR  R14,R15                 BRANCH TO  MODULE
         MVC   MSG5,CMDAREA            Inform user result 'c' cmd  @rpd
         CLC   RTNCODE,F0000           RC= 0000
         BNE   VIEWCH3                 YES: DO NOT REPEAT COMMAND
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     VIEW                    ERROR MESSAGE               @rpd
VIEWCH3  DS    0H                                                  @rpd
         MVC   REP5,BUFFER             REPEAT COMMAND
         XC    RTNCODE,RTNCODE         CLEAR RTNCODE FIELD
         B     VIEW                    ERROR MESSAGE
*------- ----- ----------------------- SUBCOMMAND 'CUT'            @rpb
*              form: 'CUT' in command field combined with the
*                    CT, CB or a pair of CC line commands          @rpb
*------- ----- --------------------------------------------------- @rpb
VIEWCUT  DS    0H                                                  @rpb
         MVI   CUTFLAG,X'FF'           Mark command pending        @rpb
         MVI   LCFLAG,X'FF'            Mark Line cmd pending       @rpb
         CLI   MOVEFLAG,X'FF'          Move linecmds given?        @rph
         BNE   VIEWCUT2                No: test if copy linecmd    @rph
         MVC   MSG5(22),ERR#TXT        Conflicting commands        @rph
         MVI   RESETFLG,X'FF'          Set resetflag               @rph
         XC    LFLAGS,LFLAGS           Clear all pending flags     @rph
         MVC   LLINES,BLANKS           Reset pending line nbrs     @rph
         B     PUT1                    And redislay screen         @rph
VIEWCUT2 DS    0H                                                  @rph
         CLI   COPYFLAG,X'FF'          Copy linecmds given?        @rpb
         BNE   VIEW                    No:  branch                 @rpb
         MVC   BUFFER,BLANKS           BLANK BUFFER                @rpb
         MVC   BUFFER(2),=C'CO'        Process CUT command         @rpb
         MVC   BUFFER+3(6),COMMLIN1    First  linenumber           @rpb
         MVC   BUFFER+10(6),COMMLIN2   Second linenumber           @rpb
         L     R15,=V(RPFCTPST)        Load CUT and PASTE rout.    @rpb
         LA    R1,BUFFER               Param for RPFCTPST          @rpb
         BALR  R14,R15                 Branch to routine           @rpb
         B     VIEWRES                 Reset pending commands      @rpb
*                                                                  @rpb
*------- ----- ----------------------- SUBCOMMAND 'PASTE'          @rpb
*              form: 'PASTE' in command field combined with the    @rpb
*                    TT, BB or A Linecommand                       @rpb
*------- ----- --------------------------------------------------- @rpb
VIEWPST  DS    0H                                                  @rpb
         MVI   PASTEFLG,X'FF'          Mark command pending        @rpb
         MVI   LCFLAG,X'FF'            Mark Line cmd pending       @rpb
         CLI   DESTFLAG,X'FF'          A, TT or BB line cmd given? @rpb
         BNE   VIEW                    No:  branch                 @rpb
         LA    R1,DESTLINE             Line number to paste after  @rpb
         L     R15,=V(RPFCTPST)        Load CUT and PASTE rout.    @rpb
         BALR  R14,R15                 Branch to routine           @rpb
         B     VIEWRES                 Reset all linecommands      @rpb
*------- ----- ----------------------- SUBCOMMAND 'TOP'
VIEWTOP  EQU   *
         MVC   FIRSTSCR,FIRSTREC       SET POINTERS TO
         MVC   LASTSCR,FIRSTREC        BEGINNING OF WORKSPACE
         B     VIEW                    BACK TO VIEW
*------- ----- ----------------------- SUBCOMMAND 'NULLS'
VIEWNULL EQU   *
         TM    SW,$NULLS               ALREADY NULLS ?
         BO    VIEW                    YES: NO OPERATION
         OI    SW,$NULLS               MARK NULLS ON
         MVC   SCR5NULL,INTHIGH        MARK NULLS ON
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'NONULLS'
VIEWNNU  EQU   *
         TM    SW,$NULLS                ALREADY NONULLS ?
         BNO   VIEW                    YES: NO OPERATION
         NI    SW,255-$NULLS           MARK NULLS OFF
         MVC   SCR5NULL,INTLOW         REMOVE NULLS IDENT FROM HEAD
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'BOTTOM'
VIEWBOT  EQU   *
         L     R4,LASTREC              ADDRESS LAST RECORD IN WORKSPACE
         LH    R3,SCRLEN               LENGTH SCREEN -/- NEXTENT
         S     R3,RLENGTH              MINUS 1 LINE
         S     R3,RLENGTH              -  '*** End    of data ***' @rpa
         SR    R4,R3                   ADDRESS FIRST LINE ON SCREEN
         C     R4,FIRSTREC             BEFORE FIRST RECORD ?
         BL    VIEWBOT2                RESET TO TOP
         ST    R4,FIRSTSCR             SAVE POINTER
         ST    R4,LASTSCR              SAVE POINTER
         B     VIEW                    RETURN TO VIEW
VIEWBOT2 MVC   FIRSTSCR,FIRSTREC       MOVE TO TOP
         MVC   LASTSCR,FIRSTREC
         B     VIEW                    REVIEW SCREEN
*------- ----- ----------------------- SUBCOMMAND 'SORT'
VIEWSRT  EQU   *
         CALL  SORT                    CALL THE SORT ROUTINE
         L     R15,=V(NUMBER)          RENUMBER THE WORKSPACE
         BALR  R14,R15                 RENUMBER
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     VIEW                    REDISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'TSO'
VIEWTSO  DS    0H
         MVC   AMODULE,=CL8'RPFTSO'    MOVE MODULE NAME XPFTSO
         B     VIEWSUBT                ATTACH MODULE
*------- ----- ----------------------- SUBCOMMAND 'OUT'
VIEWOUT  DS    0H
         MVC   AMODULE,=CL8'RPFOUT'     MOVE MODULE NAME RPFOUT
         B     VIEWSUBT                ATTACH MODULE
*------- ----- ----------------------- SUBCOMMAND 'JCL'
VIEWJCL  DS    0H
         MVC   AMODULE,=CL8'RPFJCL'    MOVE MODULE NAME RPFJCL
         B     VIEWSUBT                ATTACH MODULE
VIEWSUBT XC    TSOECB,TSOECB           CLEAR ECB ADDRESS
         ATTACH EPLOC=AMODULE,ECB=TSOECB,PARAM=((11))
         ST    R1,TCBADDR              SAVE TCB ADDRESS
         WAIT  ECB=TSOECB              WAIT FOR COMPLETION
         LA    R2,TCBADDR              LOAD ADR FIELD WHICH TCBADR
         DETACH (R2)                   KILL TCB
         B     PUT1                    REVIEW SCREEN
*------- ----- ----------------------- SUBCOMMAND 'RESET'
VIEWRES  EQU   *                       RESET LINE COMMANDS
         XC    LFLAGS,LFLAGS           RESET FLAGS
         MVC   LLINES,BLANKS           RESET LINENUMBER S
         B     VIEW                    BACK
*------- ----- ----------------------- SUBCOMMAND 'L +/-'
VIEWLINE EQU   *
         CLI   BUFFER+2,C'+'           LINE COMMAND ?
         BE    VIEWLIN2                YES: PROCESS THAT COMMAND
         CLI   BUFFER+2,C'-'           LINE COMMAND ?
         BNE   VIEWLIN6                NO: PROCESS LOCATE COMMAND
VIEWLIN2 MVC   NUMFLD,BUFFER+3         NUMBER FROM BUFFER INTO NUMFLD
         MVI   FILLCHAR,X'F0'          '0' INTO FILLCHAR
         BAL   R14,SHIFT               REP TRAIL. SPC WITH LEADING ZERO
         L     R15,=V(NUMTST)          LOAD EP NUMTST
         BALR  R14,R15                 EXEC NUMTST ROUTINE
         LTR   R15,R15                 RC= 0000 ?
         BNZ   VIEWERRC                NO: ERROR
         PACK  PACKFLD,NUMFLD          CONVERT NUMFLD TO
         CVB   R5,PACKFLD              BINARY INTO REG.5
         LA    R4,NEXTENT              88 INTO R4 (LENGHT 1 LINE)
         MR    R4,R4                   COMPUTE TOTAL LENGTH
         LTR   R4,R4                   OVERFLOW ?
         BNZ   VIEWERR6                YES: ERROR
         L     R3,FIRSTSCR             ADDRESS FIRST LINE
         CLI   BUFFER+2,C'+'           PAGE FOREWARD ?
         BNE   VIEWLIN3                NO: GOTO BACKWARD
         LA    R3,0(R3,R5)             ADD LENGTH TO FIRST LINE
         C     R3,LASTREC              END OF WORKSPACE ?
         BH    VIEWERR2                GIVE ERROR MESSAGE
         ST    R3,FIRSTSCR             SAVE POINTER
         B     VIEW                    BACK TO VIEW
VIEWLIN3 C     R3,FIRSTREC             BEGINNING OF WORKSPACE ?
         BNH   VIEWLIN5                YES: ISSUE TOP SUBCOMMAND
         SR    R3,R5                   SUBTRACT LNGTH OF FIRST LINE
         C     3,FIRSTREC              BEFORE FIRST RECORD ?
         BNL   VIEWLIN4                NO: BRANCH AND EXEC LINE COMMAND
         MVC   FIRSTSCR,FIRSTREC       RESET TO TOP OF WORKSPACE
         B     VIEW                    REVIEW SCREEN
VIEWLIN4 ST    R3,FIRSTSCR             SAVE POINTER
         B     VIEW                    REVIEW SCREEN
VIEWLIN5 MVC   FIRSTSCR,FIRSTREC       RESET SCREEN TO THE TOP
         B     VIEWERR2                BRANCH TO ERROR ROUTINE
*------- ----- ----------------------- SUBCOMMAND 'L '
VIEWLIN6 EQU   *
         MVC   NUMFLD,BUFFER+2         NUMBER FROM BUFFER INTO NUMFLD
         MVI   FILLCHAR,X'F0'          '0' INTO FILLCHAR
         BAL   R14,SHIFT               REP TRAIL. SPC WITH LEADING ZERO
         L     R15,=V(NUMTST)          LOAD EP NUMTST
         BALR  R14,R15                 EXEC NUMTST ROUTINE
         LTR   R15,R15                 RC= 0000 ?
         BNZ   VIEWERRC                NO: ERROR
         LA    R1,NUMFLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 TRY TO FIND LINE
         LTR   R15,R15                 LINE FOUND ?
         BNZ   VIEWERRC                NO: GIVE ERROR MESSAGE
         ST    R1,FIRSTSCR             MATCHED LINE BECOME FIRST
         ST    R1,LASTSCR              LINE ON SCREEN
         B     VIEW                    BACK TO VIEW
*------- ----- ----------------------- SUBCOMMAND 'SCOPE'
VIEWSCOP EQU   *
         XC    SCOPENUM,SCOPENUM       CLEAR WORK FIELD
         MVC   SCOPENUM,BUFFER+6       SCOPE NUMBERS INTO WORKFIELD
         BAL   R14,SCOPE               SCOPE ROUTINE
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'DEL'
VIEWDEL  EQU   *
         BAL   R14,DEL                 DELETE ROUTINE
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'HAR'
VIEWHAR  MVC   CMDAREA(4),=A(BUFFER)   PASS COMMAND
         LINK  EP=RPFHCPY,PARAM=((11))
         MVC   MSG5,CMDAREA            GET MESSAGE
         LTR   R15,R15                 HARDCOPY ALLRIGHT ?
         BZ    VIEW                    YES: REVIEW SCREEN
         MVC   REP5,BUFFER             NO: REPEAT COMMAND
         B     VIEW                    BACK TO VIEW
*------- ----- ----------------------- SUBCOMMAND '$DOC'
VIEWDOC  LINK  EP=RPFDOC,PARAM=((11)),VL=1
         LTR   R15,R15                 RC= 0000 ?
         BZ    VIEW                    MATCH FOUND
         MVC   REP5,BUFFER             NO: REPEAT COMMAND AND
         MVC   MSG5,CMDAREA            MOVE ERROR MESSAGE
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'CAPS'
VIEWCAPS MVC   FOLD(3),=C'YES'         INDICATE CAPS
         MVC   SCR5ASIS,INTLOW
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'ASIS'
VIEWASIS MVC   FOLD(3),=C'NO '         INDICATE ASIS
         MVC   SCR5ASIS,INTHIGH
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'SCL'
VIEWLEFT TM    INFCODE,$COBOL          COBOL ALIGNED ?
         BNO   VIEWLEF2                NO: PROCEED.
         MVC   MSG5(L'ERRGTXT),ERRGTXT MOVE ERROR MESSAGE
         B     VIEW                    REDISPLAY SCREEN
VIEWLEF2 TM    SW,$RIGHT               ALREADY LEFT ?
         BZ    VIEWERR2                YES: GIVE MESSAGE
         MVC   ALG5TOP+7(72),TXT5LFT
         NI    SW,255-$RIGHT           Turn off right aligned
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'SCR'
VIEWRIGH TM    INFCODE,$COBOL          COBOL ALIGNED ?
         BNO   VIEWRIG2                NO: PROCEED.
         MVC   MSG5(L'ERRGTXT),ERRGTXT MOVE ERROR MESSAGE
         B     VIEW                    REDISPLAY SCREEN
VIEWRIG2 TM    SW,$RIGHT               ALREADY RIGHT ?
         BO    VIEWERR2                YES: GIVE MESSAGE
         MVC   ALG5TOP+7(72),TXT5RGT
         OI    SW,$RIGHT               TURN ON RIGHT ALIGNED
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'NOCOB'
VIEWNCOB DS    0H
         TM    INFCODE,$COBOL          WAS IT COBOL ALIGNED ?
         BNO   VIEW                    NO: IGNORE NOCOB COMMAND
         MVC   ALG5TOP+7(72),TXT5LFT
         NI    SW,255-$RIGHT           Turn on left aligned
         NI    INFCODE,X'FF'-$COBOL    SET COBOL MARKER OFF
         XC    SCOPENUM,SCOPENUM       CLEAR SCOPE FIELD
         BAL   R14,SCOPE               SET SCOPE FOR COBOL
         CLC   NUMBERED,=C'YES'        NUMBERED EDIT ?
         BNE   VIEW                    YES: LEAVE IT NONUM
         L     R4,FIRSTREC             LOAD FIRST REC IN WORKSPACE
         LA    R6,NEXTENT              LOAD LENGTH OF ENTRY
         L     R7,LASTREC              LAST REC. IN WORKSPACE
         LA    R7,1(R7)                ADJUST OFFSET
VIEWNCO1 DS    0H
         MVC   NUMFLD(8),OFFSETN1(4)   LINE NUMBER IN FLD (COLS 73-80)
         L     R15,=V(NUMTST)          EPA NUMERIC TEST ROUTINE
         BALR  R14,R15                 EXEC THIS ROUTINE
         LTR   R15,R15                 NUMERIC ?
         BNZ   VIEWNCO3                NO: MAKE WORKSPACE NONUM
         BXLE  R4,R6,VIEWNCO1          LOOP UNTIL ALL DONE
         B     VIEW                    ALL NUMERICS, LEAVE WORKSPC NUM
VIEWNCO3 DS    0H                      MAKE WORKSPACE NONUM HERE
         XC    SCOPENUM,SCOPENUM       CLEAR SCOPE FIELD
         BAL   R14,SCOPE               SET SCOPE FOR COBOL
         MVC   NUMBERED(3),=C'NO '     MARK NONUM
         L     R15,=V(NUMBER)          EP NUMBER ROUTINE
         BALR  R14,R15                 RENUMBER SCREEN NUMBERS
         MVC   SCR5NON,INTHIGH         NO NUMBERED
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'COB'
VIEWCOB  DS    0H
         TM    INFCODE,$COBOL          ALREADY COBOL ALIGNED ?
         BO    VIEW                    YES: IGNORE COMMAND
         MVC   ALG5TOP+7(72),TXT5COB
         NI    SW,255-$RIGHT           TURN OFF EVENT. RIGHT BIT
         OI    INFCODE,$COBOL          SET COBOL MARKER ON
         XC    SCOPENUM,SCOPENUM       CLEAR SCOPE FIELD
         BAL   R14,SCOPE               SET SCOPE FOR COBOL
         CLC   NUMBERED,=C'YES'        NUMBERED EDIT ?
         BNE   VIEW                    YES: LEAVE IT NONUM
         L     R4,FIRSTREC             LOAD FIRST REC IN WORKSPACE
         LA    R6,NEXTENT              LOAD LENGTH OF ENTRY
         L     R7,LASTREC              LAST REC. IN WORKSPACE
         LA    R7,1(R7)                ADJUST OFFSET
VIEWCOB5 DS    0H
         MVC   NUMFLD(8),C0000         SET NUMFLD TO ZEROES
         MVC   NUMFLD(6),8(4)          MOVE LINE NUMBER (COLS 01-06)
         L     R15,=V(NUMTST)          EPA NUMERIC TEST ROUTINE
         BALR  R14,R15                 EXEC THIS ROUTINE
         LTR   R15,R15                 NUMERIC ?
         BNZ   VIEWCOB7                NO: MAKE WORKSPACE NONUM
         BXLE  R4,R6,VIEWCOB5          LOOP UNTIL ALL DONE
         B     VIEW                    ALL NUMERICS, LEAVE WORKSPC NUM
VIEWCOB7 DS    0H                      MAKE WORKSPACE NONUM HERE
         MVC   NUMBERED(3),=C'NO '     MARK NONUM
         L     R15,=V(NUMBER)          EP NUMBER ROUTINE
         BALR  R14,R15                 RENUMBER SCREEN NUMBERS
         MVC   SCR5NON,INTHIGH         NO NUMBERED
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'HELP'
VIEWHELP EQU   *
         TM    INFCODE2,$NOHELP        HELP DATASET AVAIL ?
         BNZ   VIEWHLPE                NO: GIVE MESSAGE
         LINK  EP=RPFHELP,PARAM=((11)) GOTO HELP
         B     PUT1
VIEWHLPE EQU   *
         MVC   MSG5,ERRBTXT            MOVE ERROR MESSAGE
         B     VIEW                    REDISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'PFK'
VIEWPFK  LINK  EP=RPFPFK,PARAM=((11))
         B     PUT1
*------- ----- ----------------------- SUBCOMMANDS 'FILL' 'UC' 'LC'
VIEWFILL EQU   *
         NI    INFCODE2,255-$LC-$UC    MARK FILL COMMAND
         B     VIEWLFIL                LINK TO XPFFILL
VIEWLC   EQU   *
         NI    INFCODE2,255-$LC-$UC    CLEAR FLAGS
         OI    INFCODE2,$LC            MARK 'LC' SUBCOMMAND
         MVC   FOLD(3),=C'NO '         INDICATE ASIS
         MVC   SCR5ASIS,INTHIGH
         B     VIEWLFIL                LINK TO XPFFILL
VIEWUC   EQU   *
         NI    INFCODE2,255-$LC-$UC    CLEAR FLAGS
         OI    INFCODE2,$UC            MARK 'UC' SUBCOMMAND
         B     VIEWLFIL                LINK TO XPFFILL
VIEWLFIL MVI   MSG5,C'-'               CLEAR
         MVC   MSG5+1(L'MSG5-1),MSG5        MESSAGE
         MVC   CMDAREA(4),=A(BUFFER)   MOVE ADDRESS OF COMMAND
         LINK  EP=RPFFILL,PARAM=((11))
         MVC   MSG5,CMDAREA            MESSAGE INTO SCREEN
         LTR   R15,R15                 RC= 0000 ?
         BNZ   VIEWLFI2                DISPLAY SCREEN
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     VIEW
VIEWLFI2 DS    0H
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'RENUMBER'
VIEWREN  EQU   *
         MVC   SCR5NON,INTLOW
         MVC   NUMBERED(3),=C'YES'
         XC    SCOPENUM,SCOPENUM       EXECUTE DEFAULT SCOPE COMMAND
         BAL   R14,SCOPE               EXEC. SCOPE COMMAND
         MVC   MSG5,MSG1TXT            MESSAGE INTO SCREEN
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'NONUM'
VIEWNON  MVC   SCR5NON,INTHIGH
         MVC   NUMBERED(3),=C'NO '
         XC    SCOPENUM,SCOPENUM       BUILD DEFAULT SCOPE COMMAND
         BAL   R14,SCOPE               EXEC. CMD (RESET SCOPE)
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'UNNUM'
VIEWUNN  DS    0H
         CLC   NUMBERED(3),=C'YES'     IS WORKSPACE LINE-NUMBERED
         BE    VIEWUNN1                YES: REMOVE LINE NUMBERS
         MVC   MSG5(L'ERR6TXT),ERR6TXT MOVE ERROR MSG
         B     VIEW                    DONT EXEC COMMAND
VIEWUNN1 DS    0H                      UNNUM WORKSPACE
         LA    R4,NEXTENT              LENGTH ONE LINE
         L     R3,FIRSTREC
         L     R5,LASTREC
         LA    R5,79(R5)               POINT TO LAST DATA BYTE
VIEWUNN3 TM    INFCODE,$COBOL          COBOL NUMBERS ?
         BNO   VIEWUNN5                NO: STD NUMBERS
         MVC   8(6,R3),BLANKS          CLEAR COBOL LINE NUMBERS
         B     VIEWUNN7                BXLE
VIEWUNN5 MVC   OFFSETN1(8,R3),BLANKS CLEAR LINE NUMBER
VIEWUNN7 BXLE  R3,R4,VIEWUNN3
         MVC   SCR5NON,INTHIGH
         MVC   NUMBERED(3),=C'NO '
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE (NOT IN DATA)
         BALR  R14,R15                 EXEC THIS ROUTINE
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         XC    SCOPENUM,SCOPENUM       BUILD DEFAULT SCOPE COMMAND
         BAL   R14,SCOPE               EXEC. THIS COMMAND
         B     VIEW
*------- ----- ----------------------- SUBCOMMAND 'CO'
VIEWCO   BAL   R14,COPY                COPY LINES
         B     VIEW                    DISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'MO'
VIEWMO   BAL   R14,MOVE                MOVE LINES
         B     VIEW                    BACK TO VIEW
*------- ----- ----------------------- SUBCOMMAND 'OSSAVE' (FOR LIBR.)
VIEWSAVP DS    0H
         OI    INFCODE3,$OSSAVE        MARK SAVE ON OS FILE
         B     VIEWSAV2                IF INVOKED BY XPFLIB
*------- ----- ----------------------- SUBCOMMAND 'SAVE'
VIEWSAVE CLC   BUFFER+5(5),=C'FORCE'   FORCED SAVE ?
         BE    VIEWSAV2                YES: PROCEED
VIEWSAV1 TM    SW,$TRUNC+$XLATED       WORKSPACE TRANSLATED/TRUNCATED ?
         BZ    VIEWSAV2                NO: PROCEED
         MVC   MSG5(L'ERRVTXT),ERRVTXT MOVE ERROR MESSAGE
         B     VIEW                    REVIEW SCREEN
VIEWSAV2 MVC   EPNEXT,EPSAVE           ENTRY POINT XPFSAVE IN EPNEXT
         MVC   CMDAREA(8),SAVEMBR      MOVE XLATED MEMBER
         B     RETURN                  BACK TO MAIN MENU
*------- ----- ----------------------- SUBCOMMAND 'COPY'
VIEWCOPY EQU   *
         MVC   COPMEM,MEMBER           SAVE ORIGIN MEMBER NAME
         MVC   COPYDSN,DSNAME          SAVE ORIGIN DATASET NAME
         MVC   COPYVOL,VOLUME          SAVE ORIGIN VOLUME
         OI    INFCODE3,$EDTCOPY
*---------------------------------------------------------------------*
*        INFORM RPFDATAL AND RPFSAVE THAT A COPY COMMAND IS GIVEN     *
*        RPFDATAL WILL BE INVOKED WITH APPEND=YES                     *
*        AND RPFEDITL WILL TEST THIS FLAG TO EXECUTE A PROPER ENQ.    *
*        IN RPFSAVE THIS FLAG WILL BE TESTED TO FORCE A REALLOCATION  *
*        OF THE DATASET(MEMBER), BECAUSE IT IS POSSIBLE TO COPY FROM  *
*        A DIFFERENT DATASET, SO THE ALLOCATION SHOULD BE RESTORED    *
*        WITH THE DATASET(MEMBER) OF THE DATA TO BE EDITED.           *
*------------------------------------- (C)-2005 SKYBIRD SYSTEMS ------*
         L     R15,EPDATAL             LOAD ENTRY POINT
         ST    R11,ADDRCOM             PARAMETER
         LA    R1,ADDRCOM              INTO REG 1
         BALR  R14,R15                 BRANCH TO  MODULE
         CLC   RTNCODE,F0000           RC= 0000 ?
         BNE   VIEWCOP2                YES: BRANCH
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     LINK                    LOAD DATA WITH RPFEDITL
VIEWCOP2 DS    0H
         NI    INFCODE3,255-$EDTCOPY   SET FLAG OFF
         XC    RTNCODE,RTNCODE         CLEAR RTNCODE
         B     PUT1                    REDISPLAY SCREEN
*------- ----- ----------------------- SUBCOMMAND 'F '
VIEWFIND DS    0H
         MVC   TSTLINE(2),=C'F '       Change "FIND" into "F"      @rpd
         MVC   TSTLINE+2(43),BUFFER+5  Move operand of "FIND"      @rpd
         MVC   TSTLINE+45(3),BLANKS    Blank last positions        @rpd
         MVC   BUFFER,TSTLINE          FIND changed into F         @rpd
VIEWFIN2 DS    0H
         MVC   CMDAREA(4),=A(BUFFER)   Pointer to command in CMDAREA
         L     R15,EPFIND              ENTRY POINT
         ST    R11,ADDRCOM             PARAMETER
         LA    R1,ADDRCOM              INTO REG 1
         BALR  R14,R15                 BRANCH TO ENTRY POINT
         LTR   R15,R15                 RC= 0000 ?
         BZ    VIEW                    YES: OK.
         MVC   MSG5,CMDAREA            MOVE ERROR MESSAGE
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     VIEW                    DISPLAY SCREEN
VIEWERR2 MVC   MSG5(L'ERR3TXT),ERR3TXT SCROLL FORWARD
         B     VIEW
VIEWERR3 MVC   MSG5(L'ERR5TXT),ERR5TXT
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     VIEW
VIEWERR4 MVC   MSG5(L'ERR7TXT),ERR7TXT
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     VIEW
VIEWERR5 MVC   MSG5(L'ERRZTXT),ERRZTXT                             @rp6
         B     VIEW                                                @rp6
VIEWERR6 MVI   ERR7TXT+21,C'3'         LOGIC ERROR RC=0303
         B     VIEWERR4                ISSUE MESSAGE
VIEWERRA MVC   MSG2(L'ERRXTXT),ERRXTXT
VIEW81A  EQU   *                       INPUT CONVERT ROUTINE FAILED
         TCLEARQ INPUT
         TPUT  SCR2TXT,SCR2LEN,FULLSCR
         L     R3,COMMSCR
         TGET  (3),250,ASIS            READ REPLY
         TCLEARQ INPUT
         OC    0(25,R3),BLANKS
         CLC   6(3,R3),=C'END'
         BE    RETURN
         CLC   6(5,R3),=C'RETRY'
         BE    VIEW
         MVC   MSG2(L'ERRYTXT),ERRYTXT
         B     VIEW81A
VIEWERRB MVC   MSG5(L'ERRLTXT),ERRLTXT
         MVC   REP5,BUFFER
         B     VIEW
VIEWERRC MVC   MSG5(L'ERRHTXT),ERRHTXT
         MVC   REP5,BUFFER
         B     VIEW
VIEWERRD MVC   MSG5(L'ERRMTXT),ERRMTXT
         MVC   REP5,BUFFER
         B     VIEW
*------- ----- ----------------------- '='    COMMAND              @RP1
VIEW#    DS    0H                                                  @RP1
         MVC   CMAINOPT(3),BUFFER+1    MOVE OPTIONS AFTER '='      @RP1
*------- ----- ----------------------- RETURN COMMAND
VIEWRET  DS    0H
         OI    INFCODE2,$RETURN        SET RETURN INDICATOR & TERMINATE
*------- ----- ----------------------- END COMMAND
VIEW99   EQU   *
         TM    INFCODE4,$CHANGED       ANY DATA CHANGED?
         BZ    RETURN                  NO: DO NOT INVOKE RPFSAVE
         CLI   DEFAUTO,C'Y'            Autosave on?                @rp7
         BE    VIEW99A                 Yes: branch                 @rp7
         MVC   MSG5(L'ERR@TXT),ERR@TXT Nothing saved               @rp7
         MVC   REP5,BLANKS             Clear command area          @rp7
         B     VIEW                    Stay in EDIT                @rp7
VIEW99A  EQU   *                                                   @rp7
         OI    INFCODE4,$SAMEDS        SAVE IN SAME DATASET/MEMBER
         B     VIEWSAV1                INVOKE RPFSAVE
         TITLE 'S U B R O U T I N E S'
*---------------------------------------------------------------------*
*                                                                     *
*        I N P U T - REPEAT/ADD LINES IN/TO WORKSPACE                 *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
INPUT    ST    R14,SAVE14I             SAVE RETURN ADDRESS
         LA    R3,BUFFER+2             POINT AFTER 'I '
         BAL   R14,LINE                SCAN FOR LINE NUMBERS
         LTR   R15,R15                 RC= 0000 - SCAN SUCCESSFUL ?
         BZ    INPUT01                 YES: PROCESS LINE NUMBERS
         C     R15,F0004               INVALID LINE(S) ?
         BE    INPUT73                 YES: GIVE MESSAGE
         C     R15,F0008               RC= 0008 - LINE(S) NOT NUMERIC ?
         BE    INPUT73                 YES: GIVE MESSAGE
         B     INPUT77                 ERR: UNEXPECTED RETURN CODE
INPUT01  CLI   LN1FLD,C'*'             * - CURRENT LINE ?
         BNE   INPUT02
         MVC   LN1FLD,LN2FLD           # LINES INTO LINE-1
         MVC   NUMFLD,LN2FLD           # LINES INTO NUMFLD
         MVC   LN2FLD,C0000            ZERO LINE-2
         CLC   NUMFLD,C0000            # LINES ZERO ?
         BNE   INPUT09                 NO: PROCEED
         MVC   NUMFLD,C0001            YES: DEFAULT 1 LINE
         B     INPUT09                 INPUT AFTER CURRENT LINE
INPUT02  MVC   NUMFLD,LN1FLD           LINE-1 INTO NUMFLD
         CLC   LN2FLD,C0000            LINE-2 ZERO ?
         BNE   INPUT04                 NO: CONTINE
         MVC   LN2FLD,C0001            INPUT 1 LINE
INPUT04  L     R3,FIRSTREC             POINT TO FIRST RECORD IN WORKSPC
         CLC   NUMFLD,CTOP             LINE-1 = TOP ?
         BNE   INPUT05                 NO.
         MVI   ERRJTXT+13,C'1'         LINE-1 INVALID
         CLI   BUFFER,C'R'             IMPOSSIBLE TO REPEAT BEFORE
         BE    INPUT73                 FIRST LINE, ONLY INPUT
         LA    R4,NEXTENT              LINE LENGTH
         SR    R3,R4                   BEFORE FIRST LINE
         B     INPUT07
INPUT05  EQU   *
         MVI   ERRPTXT+11,C'1'         LINE NUMBER INTO MESSAGE
         LA    R1,LN1FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   INPUT85                 NO: GIVE ERROR MESSAGE
         LR    R3,R1                   ADDRESS OF FOUND LINE IN REG.
INPUT07  MVI   ERRJTXT+13,C'2'         LINE 2 INVALID
         CLC   LN2FLD,CTOP             0 ?
         BE    INPUT73                 YES: ERROR.
         ST    R3,FIRSTSCR             MAKE LINE-1 CURRENT LINE
         MVC   NUMFLD,LN2FLD           LINE-2 = # LINES TO INSERT
INPUT09  PACK  PACKFLD,NUMFLD          CONVERT TO
         CVB   R5,PACKFLD              BINARY INTO R5
         LA    R4,NEXTENT              88 INTO R4 (LENGHT 1 LINE)
         MR    R4,R4                   COMPUTE TOTAL LENGTH
         LTR   R4,R4                   OVERFLOW ?
         BNZ   INPUT53                 YES: ERROR
         L     R3,LASTREC              POINT TO LAST RECORD IN WS
         LA    R3,0(R3,R5)             INCR WITH  # OF CHARS TO INSERT
         C     R3,GETMEND              END OF WORKSPACE
         BNL   INPUT00                 GIVE ERROR MESSAGE
         L     R5,LASTREC              POINT TO LAST RECORD IN WS
         ST    R3,LASTREC              SAVE UPDATED POINTER
         LA    R2,NEXTENT              NEXTENT INTO R2
         OI    INFCODE4,$CHANGED       ANY DATA CHANGED?
INPUT11  DS    0H
         C     R5,FIRSTSCR             CURRENT LINE REACHED ?
         BNH   INPUT12                 YES: BLANKS INTO WS
         MVC   0(NEXTENT,R3),0(R5)     SHIFT LINE
         SR    R3,R2                   SUBTRACT NEXTENT
         SR    R5,R2                   SUBTRACT NEXTENT
         B     INPUT11                 NEXT LINE
INPUT12  DS    0H
         LA    R5,BLANKS               POINT TO BLANK LINE
         CLC   BUFFER(2),=C'R '        REPEAT CURRENT LINE ?
         BNE   INPUT13                 NO: BLANKS INTO WS
         L     R5,FIRSTSCR             YES: POINT TO CURRENT LINE
INPUT13  DS    0H
         USING WORKSPCE,R3             ADDRESS WORKSPACE RECORD
         C     R3,FIRSTSCR             ALL DONE ?
         BNH   INPUT15                 YES: RENUMBER
         MVC   WORKDATA,8(R5)          MOVE BLANKS INTO DATA PORTION
         XC    WORKFLGS,WORKFLGS       CLEAR FLAGS
         MVC   WORKSLIN,0(R5)          BLANK NUMBER
         CLC   BUFFER(2),=C'R '        REPEAT CURRENT LINE ?
         BE    INPUT14                 YES: DO NOT SET FLAG
         OI    WORKFLGS,$INSERTD       MARK LINE INSERTED
INPUT14  DS    0H
         SR    R3,R2                   SUBTRACT NEXTENT
         B     INPUT13                 NEXT LINE
         DROP  R3
INPUT15  DS    0H
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         XC    REP5,REP5               CLEAR REPLY AREA
         CLC   LN1FLD,CTOP             INSERT BEFORE TOP
         BNE   INPUT52                 NO: BRANCH
         MVC   SCR5ADDR+1(2),=X'C3F8'  CURSOR ADRES
         B     INPUT99
INPUT52  DS    0H
         MVC   SCR5ADDR+1(2),=X'C5C8'  MOVE R05,C09 ADDRESS OF CURSOR
         B     INPUT99                 BACK TO VIEW
INPUT53  MVI   ERR7TXT+21,C'5'         LOGIC ERROR RC=0305
         B     INPUT58                 ISSUE MESSAGE
INPUT00  MVC   MSG5(L'ERR4TXT),ERR4TXT MOVE ERROR MESSAGE
         XC    REP5,REP5
         B     INPUT99
INPUT58  MVC   MSG5(L'ERR7TXT),ERR7TXT
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     INPUT99A
INPUT73  MVC   MSG5(L'ERRJTXT),ERRJTXT
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     INPUT99A
INPUT77  MVC   MSG5(L'ERR2TXT),ERR2TXT UNEXPECTED RETURN CODE
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     INPUT99A
INPUT85  MVC   MSG5(L'ERRPTXT),ERRPTXT
         MVC   REP5,BUFFER             REPEAT COMMAND
         B     INPUT99A
INPUT99  EQU   *
         CLC   LN1FLD,CTOP             INSERT BEFORE FIRST LINE ?
         BNE   INPUT99A                NO.
         L     R3,FIRSTREC             SET DISPLAY POINTER
         ST    R3,FIRSTSCR
INPUT99A L     R14,SAVE14I             RESTORE RETURN ADDRESS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        R E T U R N                                                  *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
RETURN   EQU   *
         TM    INFCODE2,ENQUED         ENQUEUE OUTSTANDING ?
         BZ    RETURN2                 RETURN
         LA    R3,QNAME
         LA    R4,RNAME
         DEQ   ((3),(4),52,SYSTEMS),RET=HAVE
         NI    INFCODE2,255-ENQUED TURN OFF FLAG
RETURN2  EQU   *
         CLC   EPNEXT,EPSAVE           RPFSAVE INVOKED ?
         BE    RETURN3                 YES: DO NOT RESET EDTCOPY FLG
         NI    INFCODE3,255-$EDTCOPY   RESET FLAG
RETURN3  EQU   *
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        C N V O U T - CONVERT WORKSPACE TO SCREEN FORMAT ROUTINE.    *
*                                                                     *
*                      INPUT:  WORKSPACE.                             *
*                      OUTPUT: SCR5TXT - SCREEN FORMAT.               *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         SPACE 2
CNVOUT   ST    R14,SAVE14              SAVE R 14
         USING WORKSPCE,R5             ADDRESS WORKSPACE RECORD
         LA    R4,LNE5                 POINT TO SCREEN
         L     R5,FIRSTSCR             POINT TO FIRST LINE ON SCREEN
         LH    R6,#LINES               NUMBER OF LINES (BCT)
         XC    LCLINES(24),LCLINES     RESET SAVE-AREA
         LA    R2,LCLINES              POINTER TO SAVE-AREA
CNVOUT01 DS    0H
         MVC   3(6,R4),WORKSLIN        NUMBER INTO SCREEN
         BCTR  R4,0                    POINT TO ATTRIBUTE BYTE
         MVI   0(R4),X'C5'             ATT. NORMAL MDT ON
         TM    WORKFLGS,$INSERTD       INSERTED EMPTY LINE?
         BNO   CNVOUTL0                NO: BRANCH
         MVI   0(R4),X'C9'             ATTR: HIGHLIGHT MDT ON
CNVOUTL0 DS    0H
         LA    R4,1(R4)                RESET REG.4
         MVC   9(2,R4),=X'1D40'        Reset attribute of data     @rpa
         CLI   LCFLAG,X'00'            COMMANDS PENDING ?
         BE    CNVOUTL9                NO: BRANCH
         CLC   DESTCOMM,WORKSLIN       LINENBR EQUAL ?
         BNE   CNVOUTL1                NO: BRANCH
         MVC   0(6,R2),3(R4)           SAVE LINENUMBER
         MVC   3(6,R4),LCDEST          DESTINATION IN LINE
         MVC   6(6,R2),3(R4)           SAVE NEW LINENUMBER
         LA    R2,12(R2)               INCREASE POINTER
         BCTR  R4,0                    POINTER TO ATTRIBUTE
         MVI   0(R4),X'C9'             INTENSIFIED FIELD
         LA    R4,1(R4)                RESET POINTER
         B     CNVOUTL9
CNVOUTL1 DS    0H
         CLC   COMMLIN1,WORKSLIN       LINENBR EQUAL ?
         BNE   CNVOUTL3                NO: BRANCH
         MVC   0(6,R2),3(R4)           SAVE LINENUMBER
         MVC   3(6,R4),LCCOM1          COMMAND IN LINE
         MVC   6(6,R2),3(R4)           SAVE NEW LINENUMBER
         LA    R2,12(R2)               INCREASE POINTER
         BCTR  R4,0                    POINTER TO ATTRIBUTE
         MVI   0(R4),X'C9'             INTENSIFIED FIELD
         LA    R4,1(R4)                RESET POINTER
         B     CNVOUTL9
CNVOUTL3 EQU   *
         CLC   COMMLIN2,OFFSETN2(R5)   LINENBR EQUAL ?
         BNE   CNVOUTL9                NO: BR
         MVC   0(6,R2),3(R4)           SAVE LINENUMBER
         MVC   3(6,R4),LCCOM2          COMMANDO IN LINE
         MVC   6(6,R2),3(R4)           SAVE NEW LINENUMBER
         LA    R2,12(R2)               INCREASE POINTER
         BCTR  R4,0                    POINTER TO ATTRIBUTE
         MVI   0(R4),X'C9'             INTENSIFIED FIELD
         LA    R4,1(R4)                RESET POINTER
CNVOUTL9 EQU   *
         TM    SW,$RIGHT               RIGHT ?
         BO    CNVOUTA1                YES: RIGHT ALIGNMENT
         TM    INFCODE,$COBOL          COBOL REQUESTED ?
         BNO   CNVOUTA0                NO: NORMAL LEFT DISPLAY
         MVC   11(72,R4),WORKDATA+6    TEXT INTO SCREEN (COBOL ALIGNED)
         B     CNVOUTB1
CNVOUTA0 MVC   11(72,R4),WORKDATA      TEXT INTO SCREEN (LEFT ALIGNED)
         B     CNVOUTB1
CNVOUTA1 MVC   11(72,R4),WORKDATA+8    TEXT INTO SCREEN (RIGHT ALIGNED)
CNVOUTB1 DS    0H
         TR    11(72,R4),COMTRTAB      XLATE UNPRINTABLES
         TM    SW,$NULLS               NULLS MARKER ON ?
         BO    CNVOUT03                YES: CLEAR TRAILING SPACES
CNVOUT02 LR    R7,R4                   SAVE CURRENT LINE
         LA    R4,85(R4)               NEXT LINE ON SCREEN
         LA    R5,NEXTENT(R5)          NEXT LINE IN WORKSPACE
         C     R5,LASTREC              END OF WORKSPACE ?
         BH    CNVOUTB2                YES: FILL WITH BLANKS
         BCT   R6,CNVOUT01             CONVERT NEXT LINE
         S     R5,RLENGTH
         ST    R5,LASTSCR              ADDRESS LAST RECORD ON SCREEN
         B     CNVOUT51                TPUT
CNVOUTB2 MVC   LASTSCR,LASTREC         SET LASTSCR                  @pw
         MVC   3(6,R4),=C'******'      FILL WITH asterisks         @rpa
         MVI   10(R4),X'F5'                                         @pw
         MVC   11(72,R4),EODTXT2         SET END OF DATA            @pw
         MVI   84(R7),X'F9'            Set output field prev line  @rpa
         MVI   84(R4),X'F5'                     "         CURR LINE @pw
         LA    R4,85(R4)               NEXT LINE ON SCREEN          @pw
         B     CNVOUTF2                                             @pw
CNVOUTD2 MVC   3(6,R4),BLANKS          FILL WITH X'40'             @rpf
         MVC   11(72,R4),BLANKS        FILL WITH X'40'             @rpf
         MVI   10(R4),X'F0'            ATTR: Protect Nomdt         @rpf
         MVI   84(R4),X'F0'            ATTR: Protect Nomdt         @rpf
         LA    R4,85(R4)               NEXT LINE ON SCREEN
CNVOUTF2 BCT   R6,CNVOUTD2
         B     CNVOUT51                TPUT
CNVOUT03 STM   R4,R7,SAVE47            SAVE REGISTERS
         LA    R4,82(R4)               POINT TO LAST BYTE IN SCRN LINE
         LA    R3,71                   BCT COUNTER
CNVOUT04 CLI   0(R4),C' '              TRAILING BLANK ?
         BNE   CNVOUT05                END OF NULLS IF NOT
         MVI   0(R4),X'00'             MOVE NULL CHAR
         BCTR  R4,0                    PREVIOUS BYTE
         BCT   R3,CNVOUT04             TEST AGAIN
CNVOUT05 LM    R4,R7,SAVE47            RESTORE REGISTERS
         B     CNVOUT02                BRANCH BACK
CNVOUT51 MVC   SCR5TOP,INTLOW
         MVC   ALG5TOP(6),=C'......'   MOVE DEFAULT INDICATOR
         CLC   FIRSTSCR,FIRSTREC       TOP ?
         BNE   CNVOUT00                No: skip                    @rpa
         MVC   SCR5TOP,INTHIGH
CNVOUT00 TM    INFCODE,$COBOL          COBOL ALIGNED ?
         BNO   CNVOUT99                NO: SKIP
         MVC   ALG5TOP(6),=C'COBOL '
CNVOUT99 EQU   *
         CLI   LCFLAG,X'FF'            COMMANDS PENDING ?
         BNE   *+10                    NO: BRANCH AROUND MOVE
         MVC   MSG5,PENDMSG            MOVE PENDING MESSAGE
         L     R4,TPUTLEN              LENGTH OF TPUT
         TPUT  SCR5TXT,(4),FULLSCR  WRITE SCREEN
         MVC   SCR5ADDR+1(2),=X'C1D8' R02,C09 CURSOR ADDRESS
         CLI   LCFLAG,X'FF'            COMMANDS PENDING ?
         BNE   CNVOUTZZ                BR IF NOT
         LA    R4,LNE5                 BEGIN SCREEN
         LH    R6,#LINES               SCREEN SIZE
         LA    R2,LCLINES              POINTER TO SAVE-AREA
CNVOUTX1 EQU   *
         CLC   3(6,R4),6(R2)           LINENUMBER CHANGED ?
         BNE   CNVOUTX2                NO
         MVC   3(6,R4),0(R2)           RESET LINENUMBER
         LA    R2,12(R2)               INCREASE POINTER
         BCTR  R4,0                    POINTER TO ATTRIBUTE
         MVI   0(R4),X'C5'             NORMAL INTENSITY
         LA    R4,1(R4)                RESET POINTER
CNVOUTX2 EQU   *
         LA    R4,85(R4)               NEXT SCREEN LINE
         BCT   R6,CNVOUTX1             PROCESS NEXT LINE
CNVOUTZZ L     R14,SAVE14              RESTORE R 14
         BR    R14                     RETURN
         DROP  R5
LCLINES  DC    4XL6'00'                SAVE-AREA
*---------------------------------------------------------------------*
*                                                                     *
*        C N V I N - CONVERT INPUT ROUTINE.                           *
*                                                                     *
*                    INPUT:  A(COMMSCR) UNFORMATTED TERMINAL INPUT.   *
*                    OUTPUT: WORKSPACE,FORMATTED INPUT, SBA-S ARE     *
*                                      REMOVED, TRAILING BLANKS ARE   *
*                                      ADDED. AID BYTE IS EXAMINED.   *
*                            REG.15, RC= 0000 - FORMAT SUCCESSFUL,    *
*                                        0004 - NO INPUT,             *
*                                        0016 - FORMAT FAILED.        *
*                            REG.5 - ADDRESS LAST LINE IN WA.         *
*                            REG.6 - ADDRESS LINE WITH UNMODIFIED DATA*
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
CNVIN    DS    0H
         ST    R14,SAVE14CI
         LA    R15,16                  RC= 0016 - CONVERT FAILED
         L     R2,FIRSTSCR
         S     R2,RLENGTH
         L     R3,COMMSCR              POINT TO INPUT BUFFER
         ST    R3,BUFFADDR             SAVE POINTER FOR TEST-MODE
         L     R5,FIRSTSCR             POINT TO WORKAREA
         LH    R4,SCRLEN               LENGTH OF SCREEN DEP. OF MODEL
         LA    R5,0(R4,R5)             END OF WORK AREA
         ST    R5,MAXLINES             SAVE POINTER
         C     R5,LASTREC              END OF WORKSPACE ?
         BNH   CNVIN01                 NO: PROCEED
         L     R5,LASTREC              ADJUST MAXLINES
         LA    R5,NEXTENT(R5)
         ST    R5,MAXLINES
CNVIN01  DS    0H
         L     R4,FIRSTSCR             POINT TO FIRST LINE IN SCREEN
         LA    R4,0(R4)                CLEAR HI-ORDER
         SR    R5,R4                   LENGTH OF SCREEN
         L     R6,COMMSCR              POINT TO SCREEN IN COMMAREA
         LA    R6,2048(R6)             POINT TO
         LA    R6,2048(R6)                     2ND PART
         LR    R7,R5                   COPY LENGTH
         STM   R4,R7,CNVINSAV          SAVE REGISTERS
         MVCL  R6,R4                   COPY SCREEN BEFORE UPDATE
         L     R4,COMMSCR              ADDRESS INPUT AREA
         LA    R5,4000                 LENGTH INPUT AREA
         LR    R6,R4                   DUMMY ADDRESS
         XR    R7,R7                   LENGTH= 0, FILL= X'00'
         MVCL  R4,R6                   CLEAR INPUT AREA
         TGET  (3),4000,ASIS
         LTR   R1,R1                   INPUT LENGTH ZERO ?
         BZ    CNVIN81                 YES: EXIT, RC= 0004 - NO INPUT
         C     1,F0003                 AID BYTE ONLY - CLEAR KEY ?
         BNH   CNVIN83                 YES: EXIT, RC= 0008 - CLEAR KEY
         MVI   MSG5,C'-'               CLEAR
         MVC   MSG5+1(L'MSG5-1),MSG5        MESSAGE
         MVC   AIDBYTE,0(R3)           SAVE AIDBYTE
         MVC   CURSOR,1(3)             SAVE CURSOR ADDRESS
         LR    R6,R1                   SAVE INPUT LENGTH
         LA    R2,0(R6,R3)             POINT TO END OF INPUT BUFFER
         ST    R2,BUFFEND              SAVE POINTER
CNVIN03  EQU   *
         CLI   0(R3),X'11'             SBA ?
         BE    CNVIN05
         LA    R3,1(R3)                NEXT BYTE
         C     R3,BUFFEND              END OF INPUT BUFFER ?
         BNL   CNVIN85                 YES: RC= 0016 - CONVERT FAILED
         B     CNVIN03                 TRY NEXT BYTE
CNVIN05  EQU   *
         CLC   0(3,R3),=X'11C1D8'      COMMAND ?
         BNE   CNVIN11                 NO: CHECK SCOPE
         LA    R4,BUFFER               POINT TO BUFFER
         LA    R3,3(R3)                POINT AFTER BUFFER ADDRESS
         MVC   BUFFER,BLANKS           CLEAR BUFFER
CNVIN07  EQU   *
         CLI   0(R3),X'11'             SBA ?
         BE    CNVIN09                 YES: TEST SBA
         MVC   0(1,R4),0(R3)           MOVE 1 CHAR OF COMMAND INTO WA
         LA    R3,1(R3)                NEXT CHAR
         LA    R4,1(R4)                NEXT CHAR
         C     R3,BUFFEND              END OF BUFFER ?
         BNL   CNVIN85                 YES: RC= 0016 CONVERT FAILED
         B     CNVIN07                 NEXT BYTE
CNVIN09  EQU   *
         CLC   BUFFER(2),=X'5040'      REPEAT PREVIOUS COMMAND ?
         BE    CNVIN11
         CLC   BUFFER(2),=X'4040'      NULL COMMAND ?
         BE    CNVIN11                 YES: SKIP SAVE
         MVC   SAVECMD,BUFFER          SAVE COMMAND
         B     CNVIN11
CNVIN11  CLC   0(3,R3),=X'11C24F'      SCOPE COMMAND ?
         BNE   CNVIN15                 NO: CHECK SCROLL COMMAND
         CLI   3(R3),X'11'             SCOPE FIELD ERASED ?
         BE    CNVIN15                 YES: DO NOT CHANGE SCOPE
         XC    SCOPENUM,SCOPENUM       CLEAR WRK FIELD
         MVC   SCOPENUM(5),3(R3)       SCOPE NUMBERS INTO WRK FIELD
         ST    R3,SAVE3CI              SAVE REG.3
         BAL   R14,SCOPE               PROCESS SCOPE
         L     R3,SAVE3CI              RESTORE REG.3
CNVIN13  LA    R3,1(R3)                SKIP 1 BYTE AFTER SCOPE
         CLI   0(R3),X'11'             NEXT FIELD IN SCR. ?
         BNE   CNVIN13                 LOOP UNTIL NEXT FIELD
CNVIN15  EQU   *
         CLC   0(3,R3),=X'11C25C'      SCROLL COMMAND ?
         BNE   CNVIN29                 NO: MOVE LINES
         CLI   3(R3),X'11'             SCROLL FIELD ERASED ?
         BE    CNVIN29                 YES: DO NOT CHANGE SCROLL
         OI    3(R3),X'40'             XLATE TO UPPER CASE
         CLI   3(R3),C'F'              FULL ?
         BE    CNVIN17                 YES: SCROLL PAGE
         CLI   3(R3),C'P'              SCROLL 'PAGE' (SAME AS FULL)
         BNE   CNVIN19                 NO: TRY OTHERS
CNVIN17  MVC   SCROLNUM(4),SCRPAGE     PAGE = 21/29/40 LINES
         MVC   SCROLL2+08(4),=C'PAGE'
         MVC   SCROLL5+08(4),=C'PAGE'
         B     CNVIN27                 FILL SCREEN
CNVIN19  CLI   3(R3),C'H'              HALF ?
         BNE   CNVIN21                 NO: TRY OTHERS
         MVC   SCROLNUM(4),SCRHALF     HALF = 11/15/20 LINES
         MVC   SCROLL2+08(4),=C'HALF'
         MVC   SCROLL5+08(4),=C'HALF'
         B     CNVIN27                 FILL SCREEN
CNVIN21  CLI   3(R3),C'L'              LINE ?
         BNE   CNVIN23                 NO: TEST OF 'CSR'
         MVC   SCROLNUM(4),=C'01  '    LINE = 01 LINES
         MVC   SCROLL2+08(4),=C'LINE'
         MVC   SCROLL5+08(4),=C'LINE'
         B     CNVIN27                 FILL SCREEN
CNVIN23  CLI   3(R3),C'C'              SCROLL 'CSR' (CURSOR)
         BNE   CNVIN25                 NO: ERROR
         MVC   SCROLL2+08(4),=C'CSR '  SCROLL CURSOR
         MVC   SCROLL5+08(4),=C'CSR '  SCROLL CURSOR
         MVC   SCROLNUM(4),=C'CSR '
         B     CNVIN27                 BRANCH
CNVIN25  MVC   MSG5(L'ERRETXT),ERRETXT GIVE MESSAGE
CNVIN27  LA    R3,1(R3)                POINT AFTER SCROLL
         CLI   0(R3),X'11'             START NEXT FIELD ?
         BNE   CNVIN27                 LOOP UNTIL THIS FIELD FOUND
CNVIN29  L     R5,FIRSTSCR             POINT TO WORKAREA
         LR    R4,R5
         S     R5,RLENGTH              POINT BEFORE WORKAREA
*---------------------------------------------------------------------*
*        Test if SBA is from a line-number                            *
*---------------------------------------------------------------------*
CNVIN31  DS    0H                                                  @rp9
         LA    R7,LNE5                 Point to SBA's (SBA scan)
         L     R1,=V(SCRSBA)           SBA table linenbr/line      @rp9
         LH    R8,#LINES               MAX 21/29/40 LINES        (BCT)
CNVIN33  CLC   0(3,R3),0(R7)           SBA FROM LINE NUMBER ?
         BE    CNVIN35                 YES: MOVE LINE NUMBER
         LA    R7,85(R7)               Next line
         LA    R1,6(R1)                Next entry in SBA table     @rp9
         BCT   R8,CNVIN33              NEXT SBA
         B     CNVIN85                 RC=0016 convert failed      @rp9
CNVIN35  LA    R3,3(R3)                POINT AFTER SBA
         C     R3,BUFFEND              End of buffer reached?      @rp9
         BE    CNVIN65                 Yes: exit                   @rp9
         ST    R1,SAVER1               Save SBA table entry        @rp9
         CLI   0(R3),X'11'             SBA ? (linenbr erased?)     @rp9
         BE    CNVIN65                 NO LINE NUMBER/Data line    @rp9
         LA    R5,NEXTENT(R5)          NEXT LINE
         C     R5,MAXLINES             END OF WORK AREA ?
         BH    CNVIN85                 YES: RC= 0016 - CONVERT FAILED
         LR    R4,R5                   POINT TO NEXT LINE
         CLC   3(6,R7),=C'******'      End of data line ?          @rpc
         BE    CNVIN65                 Yes: end of conversion      @rpc
         USING WORKSPCE,R4             ADDRESS WORKSPACE RECORD
         MVC   WORKSLIN,3(R7)          GET LINE NUMBER
         BAL   R14,LCOMMAND            PROCESS LINE COMMANDS
         LA    R3,6(R3)                POINT AFTER LINE NUMBER
         CLI   0(R3),X'11'             SBA found ?                 @rp9
         BNE   CNVIN37                 No: test buffer end         @rp9
         L     R1,SAVER1               Restore SBA table entry     @rp9
         CLC   0(3,R3),3(R1)           SBA of data?                @rp9
         BNE   CNVIN31                 No:  Test if line number SBA@rp9
         LA    R3,3(R3)                Point after SBA             @rp9
         B     CNVIN39                 Yes: Process data line      @rp9
CNVIN37  DS    0H                                                  @rp9
         C     R3,BUFFEND              End of Buffer ?             @rp9
         BE    CNVIN65                 Yes: exit, RC= 0000         @rp9
         B     CNVIN85                 No: RC= 0016 - convert fail @rp9
CNVIN39  DS    0H                                                  @rp9
         CLC   =C'YES',NUMBERED        LINE NUMBERS ?
         BNE   CNVIN45                 NO: SKIP
         TM    INFCODE,$COBOL          COBOL ALIGNMENT ?
         BNO   CNVIN43                 NO: STD NUMBERS
         MVC   WORKDATA(6),3(R7)       COPY LINE NUMBER
         B     CNVIN45                 BRANCH
CNVIN43  MVC   NUMFLD(6),3(R7)         MOVE LINE NUMBER
         MVC   NUMFLD+6(2),C0000       MOVE TRAILING ZEROES
         MVC   OFFSETN1(8,R4),NUMFLD   LINE NUMBER
CNVIN45  TM    SW,$RIGHT               RIGHT ALIGNED ?
         BO    CNVIN49                 YES: ALLIGN RIGHT
         TM    INFCODE,$COBOL          IS IT COBOL ?
         BNO   CNVIN47                 NO: CLEAR COLS 07-78
         MVC   TSTLINE(72),WORKDATA+6  SAVE DATA BEFORE BLANKING
         MVC   WORKDATA+6(72),BLANKS   CLEAR LINE (COBOL)
         B     CNVIN51                 BRANCH
CNVIN47  DS    0H                      LEFT  ALIGNED               @rp9
         MVC   TSTLINE(OFFSETN1-8),WORKDATA SAVE DATA BEFORE BLANK
         MVC   WORKDATA(OFFSETN1-8),BLANKS CLEAR LINE (LEFT)
         B     CNVIN51
CNVIN49  EQU   *                       RIGHT ALIGNED
         CLC   =C'YES',NUMBERED        LINE NUMBERED ?
         BNE   CNVIN50                 NO: CLEAR ENTIRE RECORD
         MVC   TSTLINE(OFFSETN1-16),16(R4) SAVE DATA BEFORE BLANKING
         MVC   16(OFFSETN1-16,R4),BLANKS CLEAR LINE (EXCEPT LAST 8 POS)
         B     CNVIN51                 BRANCH
CNVIN50  DS    0H
         MVC   TSTLINE(OFFSETN1-8),16(R4) SAVE DATA BEFORE BLANKING
         MVC   16(OFFSETN1-8,R4),BLANKS   CLEAR LINE (RIGHT NONUM)
         DROP  R4
CNVIN51  DS    0H
         LA    R4,8(R4)                POINT TO DATA PORTION OF LINE
         TM    SW,$RIGHT               RIGHT ALIGNED ?
         BNO   CNVIN53                 TEST IF COBOL
         LA    R4,8(R4)                RIGHT ALIGN
         B     CNVIN54                 BRANCH AWAY
CNVIN53  TM    INFCODE,$COBOL          IS IT COBOL ?
         BNO   CNVIN54                 NO: NOCOBOL
         LA    R4,6(R4)                COLS 07-78
CNVIN54  DS    0H
         LA    R6,TSTLINE              Point to unmodified line    @rp9
*---------------------------------------------------------------------*
*        Process data portion of the line
*---------------------------------------------------------------------*
CNVIN59  EQU   *
         CLI   0(R3),X'11'             SBA of Next line number     @rp9
         BE    CNVIN31                 YES: NEXT LINE              @rp9
         C     R3,BUFFEND              END OF BUFFER ?
         BNL   CNVIN65                 YES: EXIT
         MVC   0(1,R4),0(R6)           MOVE UNMODIFIED DATA
         TM    SW,$XLATED              XLATED TEXT?
         BNO   CNVIN62                 NO: BRANCH
         MVC   TSTCHAR,0(R6)           MOVE UNMODIFIED CHARACTER
         TR    TSTCHAR,COMTRTAB        XLATED CHARACTER
         CLC   TSTCHAR,0(R3)           THE SAME AFTER XLATE?
         BE    CNVIN63                 YES: BRANCH
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
CNVIN62  DS    0H
         MVC   0(1,R4),0(R3)           MOVE 1 CHAR
         CLC   FOLD(2),=C'NO'          NO XLATE TO UPPERCASE ?
         BE    CNVIN63                 NO DO NOT OC WITH X'40'
         OI    0(4),X'40'              XLATE THE MOVED CHARACTER
CNVIN63  LA    R3,1(R3)                NEXT CHAR
         LA    R4,1(R4)                NEXT CHAR
         LA    R6,1(R6)                NEXT CHAR
         B     CNVIN59                 NEXT CHAR
*---------------------------------------------------------------------*
*        Test insert flags of the lines and reset this flag if the    *
*        lines contains data                                          *
*---------------------------------------------------------------------*
CNVIN65  CLC   FIRSTSCR,LASTREC        PAST LASTREC BY ERASE EOF
         BNH   CNVIN67                 NO: OK
         MVC   FIRSTSCR,LASTREC        RESET FIRSTSCR
CNVIN67  DS    0H
         USING WORKSPCE,R4             ADDRESS WORKSPACE RECORD
         L     R4,FIRSTSCR             PICKUP FIRSTLINE ON SCREEN
         L     R5,#LINES               NUMBER OF LINES ON SCREEN
CNVIN68  DS    0H
         C     R4,LASTREC              PAST LASTREC ?
         BH    CNVIN80                 NO: BRANCH
         TM    WORKFLGS,$INSERTD       INSERTED LINE ?
         BNO   CNVIN79                 NO: BRANCH
         CLC   =C'YES',NUMBERED        LINE NUMBERED ?
         BNE   CNVIN75                 NO: BRANCH
         TM    INFCODE,$COBOL          COBOL ALIGNMENT ?
         BNO   CNVIN73                 NO: BRANCH
         CLC   WORKDATA+6(72),BLANKS   COMPLETE LINE BLANK?
         BE    CNVIN79                 YES: DO NOTHING
         NI    WORKFLGS,255-$INSERTD   RESET INSERTED FLAG
         B     CNVIN79                 BRANCH
CNVIN73  DS    0H
         CLC   WORKDATA(NEXTENT-16),BLANKS COMPLETE LINE BLANK?
         BE    CNVIN79                 YES: DO NOTHING
         NI    WORKFLGS,255-$INSERTD   RESET INSERTED FLAG
         B     CNVIN79                 BRANCH
CNVIN75  DS    0H
         CLC   WORKDATA(NEXTENT-8),BLANKS COMPLETE LINE BLANK?
         BE    CNVIN79                 YES: DO NOTHING
         NI    WORKFLGS,255-$INSERTD   RESET INSERTED FLAG
CNVIN79  DS    0H
         LA    R4,NEXTENT(R4)          NEXT LINE
         BCT   R5,CNVIN68              LOOP UNTIL SCREEN DONE
CNVIN80  DS    0H
         XR    R15,R15                 RC= 0000 - BUFFER CONVERTED
         B     CNVIN99                 EXIT
CNVIN81  LA    R15,4                   RC= 0004 - NO INPUT
         B     CNVIN999                EXIT
CNVIN83  LA    R15,8                   RC= 0008 - CLEAR KEY PRESSED
         B     CNVIN999                EXIT
CNVIN85  LA    R15,16                  RC= 0016 - CONVERT FAILED
         B     CNVIN999                EXIT
CNVIN99  DS    0H
         TM    SW,$XLATED              XLATED TEXT ?
         BO    CNVIN999                YES: BRANCH
         LM    R4,R7,CNVINSAV          RESTORE REGISTERS (FOR CLCL)
         CLCL  R6,R4                   IS NOTHING CHANGED?
         BE    CNVIN999                YES: DO NOT CHANGE $CHANGED FLAG
         OI    INFCODE4,$CHANGED       NO: MARK DATA CHANGED
CNVIN999 DS    0H
         L     R14,SAVE14CI
         XC    RESETFLG,RESETFLG       RESET RESETFLAG
         DROP  R4
         BR    R14
CNVINSAV DS    4F
*---------------------------------------------------------------------*
*                                                                     *
*        L I N E - C O M M A N D S                                    *
*        R3 SHOULD POINT TO THE CURRENT LINENUMBER ON THE SCREEN      *
*        R4 points to the current record in the edit workspace     @rpj
*                                                                     *
*------------------------------------------- (C)-2008 SKYBIRD SYSTEMS-*
LCOMMAND EQU   *
         STM   R0,R15,LSAVE            SAVE REGISTERS
         STCM  R3,15,LCMDR3            Save reg.3                  @rpj
         CLI   RESETFLG,X'FF'          RESET IN THIS SCREEN ENTERED?
         BE    LEINDE1                 YES: BRANCH
         OC    0(6,R3),BLANKS           CAPITALS
         MVC   L$LINE,BLANKS           Copy line command           @rpj
         LA    R1,L$LINE               Point to output linecmd     @rpj
         LR    R2,R3                   Point to input linecmd      @rpj
         LA    R14,6                   Loop counter                @rpj
LCMD2    DS    0H                                                  @rpj
         CLI   0(R2),X'EF'             numeric?                    @rpj
         BH    LCMD4                   Yes: skip                   @rpj
         MVC   0(1,R1),0(R2)           Move to output linecmd      @rpj
         LA    R1,1(R1)                Next byte in output linecmd @rpj
LCMD4    DS    0H                                                  @rpj
         LA    R2,1(R2)                Next byte in input linecmd  @rpj
         BCT   R14,LCMD2               Loop until all done         @rpj
         LA    R3,L$LINE               Linecommand in R3           @rpj
         CLI   0(R3),C'A'              DESTINATION "AFTER"
         BE    LDEST                   PROCESS DESTINATION
         CLC   0(2,R3),=C'BB'          DESTINATION "BEFORE LAST"
         BE    LDEST                   PROCESS DESTINATION
         CLC   0(2,R3),=C'TT'          DESTINATION "BEFORE FIRST"
         BE    LDEST                   PROCESS DESTINATION
         CLI   0(R3),C'C'              COPY LINE
         BE    LCOPY                   PROCESS COPY
         CLI   0(R3),C'D'              DELETE LINE
         BE    LDELETE                 PROCESS DELETE LINE
         CLC   0(2,R3),=C'LC'          XLATE TO ASIS ?
         BE    LTRAN                   PROCESS XLATE LINE
         CLC   0(2,R3),=C'UC'          XLATE TO CAPS ?
         BE    LTRAN                   PROCESS XLATE LINE
         CLI   0(R3),C'I'              INSERT LINE(S)
         BE    LINSERT                 PROCESS INSERT LINE(S)
         CLI   0(R3),C'M'              MOVE LINE
         BE    LMOVE                   PROCESS MOVE
         CLC   0(5,R3),=C'RESET'       RESET PENDING LINE COMMANDS
         BE    LRESET1                 PROCESS RESET
         CLI   0(R3),C'R'              REPEAT LINE
         BE    LREPEAT                 PROCESS REPEAT
         B     LEINDE                  NO LINE COMMAND PRESENT
LDEST    EQU   *
         CLI   DESTFLAG,X'00'          DESTINATION PRESENT ?
         BNE   LDESTERR                YES.
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LDESTERR                YES.                        @rpb
         CLI   REPFLAG,X'00'           REPEAT FLAG ON ?
         BNE   LCOMMERR                YES: CONFICTING
         MVC   DESTLINE,C0000          PRESET
         MVC   DESTCOMM,OFFSETN2(R4)   LINENUMBER OF DEST
         CLC   0(2,R3),=C'BB'          BB ?
         BE    LDEST00                 YES
         CLC   0(2,R3),=C'TT'          TT ?
         BE    LDEST10                 YES
         CLI   0(R3),C'A'              A ?
         BE    LDEST20                 YES
LDEST00  EQU   *
         MVC   LCDEST,OFFSETN2(4)      GET LINENUMBER
         MVC   LCDEST(2),=C'BB'        SAVE LINE COMMAND
         L     R1,LASTREC              AFTER LAST LINE
         MVC   DESTLINE,OFFSETN2(R1)   GET LINENUMBER
         B     LDEST30
LDEST10  EQU   *
         MVC   LCDEST,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCDEST(2),=C'TT'        SAVE LINE COMMAND
         B     LDEST30
LDEST20  EQU   *
         MVC   LCDEST,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCDEST(1),=C'A'         SAVE LINE COMMAND
         MVC   DESTLINE,OFFSETN2(R4)   AFTER THIS LINE
LDEST30  EQU   *
         MVI   DESTFLAG,X'FF'          SET DESTFLAG
         MVI   LCFLAG,X'FF'            COMMANDS PENDING
         CLI   COPYFLAG,X'FF'          COPY COMMAND PENDING ?
         BNE   LDEST40                 NO, BRANCH
         B     LCOPY30                 PROCESS
LDEST40  EQU   *
         CLI   MOVEFLAG,X'FF'          MOVE COMMAND PENDING ?
         BNE   LDEST50                 NO.                         @rpb
         B     LMOVE30                 PROCESS
LDEST50  DS    0H                                                  @rpb
         CLI   PASTEFLG,X'FF'          PASTE command pending       @rpb
         BNE   LEINDE                  NO: Exit                    @rpb
         MVC   BUFFER,BLANKS           Blank buffer                @rpb
         MVC   BUFFER(5),=C'PASTE'     Put PASTE cmd in buffer     @rpb
         B     LEINDE                  End of routine              @rpb
LDESTERR EQU   *
         CLC   DESTCOMM,OFFSETN2(R4)   SAME LINE
         BE    LEINDE
         B     LCOMMERR
LCOPY    EQU   *
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   DELFLAG,X'00'           DELETE COMMAND ?
         BNE   LCOMMERR                YES
         CLI   REPFLAG,X'00'           REPEAT COMMAND ?
         BNE   LCOMMERR                YES
         CLI   MOVEFLAG,X'00'          MOVE COMMAND  ?
         BNE   LCOMMERR                YES
         CLI   TRANFLAG,X'00'          UC OR LC COMMAND PENDING ?
         BNE   LCOMMERR                YES
         CLC   COMMLIN1,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   COMMLIN2,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLI   COPYFLAG,X'FF'          COPY COMMAND ?
         BE    LCOMMERR                YES
         MVI   LCFLAG,X'FF'            SET FLAG
         CLC   0(2,R3),=C'CC'          CC ?
         BE    LCOPY00                 YES
         CLC   0(2,R3),=C'CT'          COPY FROM FIRST LINE ?
         BE    LCOPY00A                YES
         CLC   0(2,R3),=C'CB'          COPY UNTIL LAST LINE
         BNE   LCOPY00Z                NO.
         MVC   LCCOM1,OFFSETN2(R4)     GET LINENUMBER
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER  1
         L     R1,LASTREC              POINTER LAST RECORD
         MVC   COMMLIN2,OFFSETN2(R1)   SAVE LINENUMBER  2
         MVC   LCCOM2,OFFSETN2(R1)     GET LINENUMBER
         MVC   LCCOM1(2),=C'CC'        SAVE COMMAND
         MVC   LCCOM2(2),=C'CC'        SAVE COMMAND
         B     LCOPY20
LCOPY00A EQU   *
         MVC   LCCOM2,OFFSETN2(R4)     GET LINENUMBER
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER  2
         L     R1,FIRSTREC             POINTER FIRST  RECORD
         MVC   COMMLIN1,OFFSETN2(R1)   SAVE LINENUMBER  1
         MVC   LCCOM1,OFFSETN2(R1)     GET LINENUMBER
         MVC   LCCOM1(2),=C'CC'        SAVE COMMAND
         MVC   LCCOM2(2),=C'CC'        SAVE COMMAND
         B     LCOPY20
LCOPY00Z EQU   *
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         MVC   LCCOM1,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCCOM1(1),=C'C'         SAVE COMMAND
         B     LCOPY20
LCOPY00  EQU   *
         CLI   COPYFLAG,X'00'          FIRST LINE ?
         BNE   LCOPY10                 YES
         MVI   COPYFLAG,X'F0'          SET FLAG
         MVC   LCCOM1,OFFSETN2(R4)     SAVE LINENUMBER
         MVC   LCCOM1(2),=C'CC'        SAVE COMMAND
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         B     LEINDE
LCOPY10  EQU   *
         CLI   COPYFLAG,X'F0'          SECOND LINE ?
         BNE   LCOMMERR                NO:  ERROR
         MVC   LCCOM2,OFFSETN2(R4)     SAVE LINENUMBER
         MVC   LCCOM2(2),=C'CC'        SAVE COMMAND
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         CLC   COMMLIN1,COMMLIN2       LINE1 > LINE2 ?
         BNH   LCOPY20
         XC    COMMLIN1,COMMLIN2       EXCHANGE LINES
         XC    COMMLIN2,COMMLIN1
         XC    COMMLIN1,COMMLIN2
LCOPY20  EQU   *
         MVI   COPYFLAG,X'FF'          SET FLAG
         CLI   CUTFLAG,X'FF'           'cut' command given?        @rpb
         BE    LCOPY30                 Yes: process cut command    @rpb
         CLI   DESTFLAG,X'FF'          DESTINATION PRESENT ?
         BNE   LEINDE                  NO.
LCOPY30  EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   BUFFER(2),=C'CO'        PROCESS LINE COMMANDS
         MVC   BUFFER+3(6),COMMLIN1    FIRST  LINENUMBER
         MVC   BUFFER+10(6),COMMLIN2   SECOND LINENUMBER
         CLI   CUTFLAG,X'FF'           'cut' command pending?      @rpb
         BNE   LCOPY32                 No: process 'CO' command    @rpb
         L     R15,=V(RPFCTPST)        Load CUT and PASTE rout.    @rpb
         LA    R1,BUFFER               Param for RPFCTPST          @rpb
         BALR  R14,R15                 Branch to routine           @rpb
         B     LRESET1                 Clear all pending commands  @rpb
LCOPY32  DS    0H                                                  @rpb
         MVC   BUFFER+17(6),DESTLINE   DESTINATION LINENUMBER
         B     LRESET1
LCOMMERR EQU   *
         MVC   MSG5(22),ERR#TXT        Conflicting commands        @rpb
         B     LRESET1
LDELETE  EQU   *
         CLI   REPFLAG,X'00'           REPEAT COMMAND ?
         BNE   LCOMMERR                YES
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   DESTFLAG,X'00'          DESTINATION ?
         BNE   LCOMMERR                YES
         CLI   COPYFLAG,X'00'          COPY PENDING  ?
         BNE   LCOMMERR                YES
         CLI   MOVEFLAG,X'00'          MOVE PENDING  ?
         BNE   LCOMMERR                YES
         CLI   TRANFLAG,X'00'          UC OR LC COMMAND PENDING ?
         BNE   LCOMMERR                YES: ERROR
         CLC   COMMLIN1,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   COMMLIN2,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   0(2,R3),=C'DD'          DD ?
         BE    LDEL00                  YES
         CLC   0(2,R3),=C'DT'          DELETE FROM FIRST LINE
         BE    LDEL00A                 YES
         CLC   0(2,R3),=C'DB'          DELETE UNTIL LAST LINE
         BNE   LDEL00Z                 NO
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER 1
         L     R1,LASTREC              POINTER LAST RECORD
         MVC   COMMLIN2,OFFSETN2(R1)   SAVE LINENUMBER 2
         B     LDEL20
LDEL00A  EQU   *
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER 2
         L     R1,FIRSTREC             POINTER FIRST RECORD
         MVC   COMMLIN1,OFFSETN2(R1)   SAVE LINENUMBER  1
         B     LDEL20
LDEL00Z  EQU   *
         CLI   DELFLAG,X'00'           DELETE COMMAND PENDING ?
         BNE   LCOMMERR                YES:
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER 1
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER 2
         B     LDEL20
LDEL00   EQU   *
         MVI   LCFLAG,X'FF'            SET FLAG
         CLI   DELFLAG,X'00'           FIRST LINE ?
         BNE   LDEL10                  NO: BRANCH
         MVI   DELFLAG,X'F0'           SET FLAG
         MVC   LCCOM1,OFFSETN2(R4)     SAVE LINENUMBER
         MVC   LCCOM1(2),=C'DD'        SAVE COMMAND
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         B     LEINDE
LDEL10   EQU   *
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         CLC   COMMLIN1,COMMLIN2       LINE1 > LINE2 ?
         BNH   LDEL20
         XC    COMMLIN1,COMMLIN2       EXCHANGE LINES
         XC    COMMLIN2,COMMLIN1
         XC    COMMLIN1,COMMLIN2
LDEL20   EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   BUFFER(3),=C'DEL'       PROCESS LINE COMMANDS
         MVC   BUFFER+4(6),COMMLIN1    FIRST  LINENUMBER
         MVC   BUFFER+11(6),COMMLIN2   SECOND LINENUMBER
         B     LRESET1
LTRAN    EQU   *
         CLI   REPFLAG,X'00'           REPEAT COMMAND ?
         BNE   LCOMMERR                YES
         CLI   DESTFLAG,X'00'          DESTINATION ?
         BNE   LCOMMERR                YES
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   COPYFLAG,X'00'          COPY PENDING  ?
         BNE   LCOMMERR                YES
         CLI   MOVEFLAG,X'00'          MOVE PENDING  ?
         BNE   LCOMMERR                YES
         CLI   DELFLAG,X'00'           DELETE COMMAND PENDING ?
         BNE   LCOMMERR                YES: ERROR
         CLC   COMMLIN1,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   COMMLIN2,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   1(2,R3),=C'CC'          'UCC' OR 'LCC'
         BE    LTRAN00                 YES: BRANCH
         CLC   1(2,R3),=C'CT'          XLATE FROM FIRST LINE
         BE    LTRAN00A                YES
         CLC   1(2,R3),=C'CB'          XLATE UNTIL LAST LINE
         BNE   LTRAN00Z                NO
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER 1
         L     R1,LASTREC              POINTER LAST RECORD
         MVC   COMMLIN2,OFFSETN2(R1)   SAVE LINENUMBER 2
         B     LTRAN20
LTRAN00A EQU   *
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER 2
         L     R1,FIRSTREC             POINTER FIRST RECORD
         MVC   COMMLIN1,OFFSETN2(R1)   SAVE LINENUMBER  1
         B     LTRAN20
LTRAN00Z EQU   *
         CLI   TRANFLAG,X'00'          XLATE (UC OR LC) CMD PENDING ?
         BNE   LCOMMERR                YES:
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER 1
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER 2
         B     LTRAN20
LTRAN00  EQU   *
         MVI   LCFLAG,X'FF'            SET FLAG
         CLI   TRANFLAG,X'00'          FIRST LINE ?
         BNE   LTRAN10                 NO: BRANCH
         MVI   TRANFLAG,X'F0'          SET FLAG
         MVC   LCCOM1,OFFSETN2(R4)     SAVE LINENUMBER
         MVC   LCCOM1(1),0(R3)         SAVE
         MVC   LCCOM1+1(2),=C'CC'           COMMAND
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         B     LEINDE
LTRAN10  EQU   *
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         CLC   COMMLIN1,COMMLIN2       LINE1 > LINE2 ?
         BNH   LTRAN20
         XC    COMMLIN1,COMMLIN2       EXCHANGE LINES
         XC    COMMLIN2,COMMLIN1
         XC    COMMLIN1,COMMLIN2
LTRAN20  EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   BUFFER(1),0(R3)         PROCESS LINE COMMANDS
         MVC   BUFFER+1(1),=C'C'       'LC' OR 'UC' COMMAND
         MVC   BUFFER+3(6),COMMLIN1    FIRST  LINENUMBER
         MVC   BUFFER+10(6),COMMLIN2   SECOND LINENUMBER
         B     LRESET1
LINSERT  EQU   *
         CLI   REPFLAG,X'00'           REPEAT COMMAND ?
         BNE   LCOMMERR                YES
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   COPYFLAG,X'00'          COPY PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         CLI   MOVEFLAG,X'00'          MOVE PENDING ?
         BNE   LCOMMERR                YES: ERROR
         CLI   DELFLAG,X'00'           DELETE PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         CLI   DESTFLAG,X'00'          DESTINATION PENDING ?
         BNE   LCOMMERR                YES: ERROR
         CLI   TRANFLAG,X'00'          LC OR UC COMMAND PENDING ?
         BNE   LCOMMERR                YES: ERROR
         MVC   BUFFER,BLANKS           GENERATE COMMAND
         MVI   BUFFER,C'I'
         MVC   BUFFER+2(6),OFFSETN2(4)
         ICM   R3,15,LCMDR3            Restore Reg.3               @rpj
         BCTR  R3,0                    POINTER TO CURSOR ADDRESS
         BCTR  R3,0
         CLC   CURSOR(1),0(R3)         SAME LINE ?
         BNE   LEINDE                  NO: INSERT 1 LINE
         MVC   WORKBYTE,CURSOR+1       GET   COLUMN
         NI    WORKBYTE,X'0F'          LAST 4 BITS
         XR    R1,R1                   REG1 := 0
         IC    R1,WORKBYTE             GET
         MVC   WORKBYTE,1(R3)          GET START FIELD
         NI    WORKBYTE,X'0F'          LAST 4 BITS
         XR    R2,R2                   REG2 := 0
         IC    R2,WORKBYTE             GET
         SR    R1,R2                   LENGTH IN BYTES
         C     R1,=F'6'                MAX. IS 6
         BH    LEINDE                  TOO LONG
         BCTR  R1,0                    - 1
         LTR   R1,R1                   ALONE AN 'I' ENTERED
         BZ    LEINDE                  YES:
         LA    R3,2(R3)                SKIP LINE/COLUMN
         LA    R2,BUFFER+8             POINTER IN COMMAND
LINSERT1 EQU   *
         LA    R2,1(R2)                INCREASE POINTER IN BUFFER
         LA    R3,1(R3)                INCREASE POINTER IN NUMBER
         CLI   0(R3),C' '              END OF COMMAND  ?
         BE    LEINDE                  YES
         MVC   0(1,R2),0(R3)           MOVE CHARACTER
         BCT   R1,LINSERT1             NEXT CHARACTER
         B     LEINDE
LMOVE    EQU   *
         CLI   REPFLAG,X'00'           REPEAT COMMAND ?
         BNE   LCOMMERR                YES
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   DELFLAG,X'00'           DELETE COMMAND  ?
         BNE   LCOMMERR                YES
         CLI   COPYFLAG,X'00'          COPY COMMAND  ?
         BNE   LCOMMERR                YES
         CLI   TRANFLAG,X'00'          UC OR LC COMMAND ?
         BNE   LCOMMERR                YES: ERROR
         CLC   COMMLIN1,OFFSETN2(4)    ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLC   COMMLIN2,OFFSETN2(4)    ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLI   MOVEFLAG,X'FF'          MOVE COMMAND  ?
         BE    LCOMMERR                YES
         MVI   LCFLAG,X'FF'            SET FLAG
         CLC   0(2,R3),=C'MM'          MM ?
         BE    LMOVE00                 YES
         CLC   0(2,R3),=C'MT'          MOVE FROM FIRST LINE
         BE    LMOVE00A                YES
         CLC   0(2,R3),=C'MB'          MOVE INCLUDING LAST LINE ?
         BNE   LMOVE00Z                NO .
         MVC   LCCOM1,OFFSETN2(4)      GET LINENUMBER
         MVC   COMMLIN1,OFFSETN2(4)    SAVE LINENUMBER  1
         L     R1,LASTREC              POINTER LAST RECORD
         MVC   COMMLIN2,OFFSETN2(R1)   SAVE LINENUMBER  2
         MVC   LCCOM2,OFFSETN2(R1)     GET LINENUMBER
         MVC   LCCOM1(2),=C'MM'        SAVE COMMAND
         MVC   LCCOM2(2),=C'MM'        SAVE COMMAND
         B     LMOVE20
LMOVE00A EQU   *
         MVC   LCCOM2,OFFSETN2(R4)     GET LINENUMBER
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER  2
         L     R1,FIRSTREC             POINTER FIRST RECORD
         MVC   COMMLIN1,OFFSETN2(R1)   SAVE LINENUMBER  1
         MVC   LCCOM1,OFFSETN2(1)      GET  LINENUMBER
         MVC   LCCOM1(2),=C'MM'        SAVE COMMAND
         MVC   LCCOM2(2),=C'MM'        SAVE COMMAND
         B     LMOVE20
LMOVE00Z EQU   *
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         MVC   LCCOM1,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCCOM1(1),=C'M'         SAVE COMMAND
         B     LMOVE20
LMOVE00  EQU   *
         CLI   MOVEFLAG,X'00'          FIRST LINE ?
         BNE   LMOVE10                 YES:
         MVI   MOVEFLAG,X'F0'          SET FLAG
         MVC   LCCOM1,OFFSETN2(4)      GET  LINENUMBER
         MVC   LCCOM1(2),=C'MM'        SAVE COMMAND
         MVC   COMMLIN1,OFFSETN2(4)    SAVE LINENUMBER
         B     LEINDE
LMOVE10  EQU   *
         CLI   MOVEFLAG,X'F0'          SECOND LINE  ?
         BNE   LCOMMERR                NO:  ERROR
         MVC   LCCOM2,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCCOM2(2),=C'MM'        SAVE COMMAND
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         CLC   COMMLIN1,COMMLIN2       LINE1  > LINE2  ?
         BNH   LMOVE20                 NO: BRANCH
         XC    COMMLIN1,COMMLIN2       SWAP
         XC    COMMLIN2,COMMLIN1           THE
         XC    COMMLIN1,COMMLIN2              LINES
LMOVE20  EQU   *
         MVI   MOVEFLAG,X'FF'          SET FLAG
         CLI   DESTFLAG,X'FF'          DESTINATION PRESENT  ?
         BNE   LEINDE                  NO .
LMOVE30  EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   BUFFER(2),=C'MO'        PROCESS LINE COMMANDS
         MVC   BUFFER+3(6),COMMLIN1    FIRST  LINENUMBER
         MVC   BUFFER+10(6),COMMLIN2   SECOND LINENUMBER
         MVC   BUFFER+17(6),DESTLINE   DESTINATION LINENUMBER
         B     LRESET1
LREPEAT  EQU   *
         CLI   CUTFLAG,X'00'           CUT command pending ?       @rpb
         BNE   LCOMMERR                YES.                        @rpb
         CLI   PASTEFLG,X'00'          Paste command ?             @rpb
         BNE   LCOMMERR                YES                         @rpb
         CLI   COPYFLAG,X'00'          COPY PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         CLI   MOVEFLAG,X'00'          MOVE PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         CLI   DELFLAG,X'00'           DELETE PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         CLI   DESTFLAG,X'00'          DESTINATION PENDING ?
         BNE   LCOMMERR                YES: ERROR.
         MVI   LCFLAG,X'FF'            SET LINE COMMAND FLAG
         CLC   0(2,R3),=C'RR'          REPEAT BLOCK COMMAND ?
         BE    LREPEAT2                YES: BRANCH
         CLI   REPFLAG,X'F0'           REPEAT BLOCK FLAG ON ?
         BE    LCOMMERR                YES: ERROR
         MVC   BUFFER,BLANKS           GENERATE COMMAND
         MVI   BUFFER,C'R'
         MVC   BUFFER+2(6),OFFSETN2(R4)
         ICM   R3,15,LCMDR3            Restore Reg.3               @rpj
         BCTR  R3,0                    POINTER TO CURSOR ADDRESS
         BCTR  R3,0
         CLC   CURSOR(1),0(R3)         SAME LINE ?
         BNE   LRESET1                 NO: REPEAT 1 LINE
         MVC   WORKBYTE,CURSOR+1       GET COLUMN
         NI    WORKBYTE,X'0F'          LAST 4 BITS
         XR    R1,R1                   REG1 := 0
         IC    R1,WORKBYTE
         MVC   WORKBYTE,1(R3)          GET START OF FIELD
         NI    WORKBYTE,X'0F'          LAST 4 BITS
         XR    R2,R2                   REG2 := 0
         IC    R2,WORKBYTE             GET
         SR    R1,R2                   LENGTH IN BYTES
         C     R1,=F'6'                MAX. IS 6
         BH    LRESET1                 TOO LONG
         BCTR  R1,0                    - 1
         LTR   R1,R1                   ALONE AN 'R' ENTERED ?
         BZ    LRESET1                 YES: BRANCH
         LA    R3,2(R3)                SKIP LINE/COLUMN
         LA    R2,BUFFER+8             POINTER IN COMMAND
LREPEAT1 EQU   *
         LA    R2,1(R2)                INCREASE POINTER IN BUFFER
         LA    R3,1(R3)                SKIP 'R'
         CLI   0(3),C' '               END OF COMMAND ?
         BE    LRESET1                 YES
         MVC   0(1,R2),0(R3)           MOVE CHARACTER
         BCT   R1,LREPEAT1             NEXT    CHARACTER
         B     LRESET1
LREPEAT2 EQU   *
         CLC   COMMLIN1,OFFSETN2(R4)   ALREADY PROCESSED ?
         BE    LEINDE                  YES
         CLI   REPFLAG,X'00'           FIRST LINE ?
         BNE   LREPEAT3                YES:
         MVI   REPFLAG,X'F0'           SET FLAG
         MVC   LCCOM1,OFFSETN2(R4)     GET LINENUMBER
         MVC   LCCOM1(2),=C'RR'        SAVE COMMAND
         MVC   COMMLIN1,OFFSETN2(R4)   SAVE LINENUMBER
         B     LEINDE
LREPEAT3 EQU   *
         CLI   REPFLAG,X'F0'           SECOND LINE  ?
         BNE   LCOMMERR                NO:  ERROR
         MVC   COMMLIN2,OFFSETN2(R4)   SAVE LINENUMBER
         CLC   COMMLIN1,COMMLIN2       LINE1  > LINE2  ?
         BNH   LREPEAT4                NO: BRANCH
         XC    COMMLIN1,COMMLIN2       SWAP
         XC    COMMLIN2,COMMLIN1             THE
         XC    COMMLIN1,COMMLIN2                LINES
LREPEAT4 EQU   *
         MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   BUFFER(2),=C'CO'        PROCESS RR COMMANDS
         MVC   BUFFER+3(6),COMMLIN1    FIRST  LINENUMBER
         MVC   BUFFER+10(6),COMMLIN2   SECOND LINENUMBER
         MVC   BUFFER+17(6),COMMLIN2   AFTER SECOND LINE NUMBER
LRESET1  EQU   *
         MVI   RESETFLG,X'FF'          SET FLAG
         XC    LFLAGS,LFLAGS           RESET FLAGS
         MVC   LLINES,BLANKS           RESET LINENUMBER S
LEINDE   EQU   *
         CLI   LCFLAG,X'00'            COMMANDS PENDING
         BE    LEINDE1                 NO
         CLI   BUFFER,X'00'            COMMANDS IN COMMAND AREA ?
         BE    LEINDE00                NO
         CLI   BUFFER,X'40'            COMMANDS IN COMMAND AREA ?
         BE    LEINDE00                NO
*---------------------------------------------------------------------*
*
*       Some primary commands are allowed along with line commands and
*       some commands not: This will be tested in the section below..
*
*------------------------------------- (c) 2005 Skybird Systems-------*
         CLI   BUFFER,C'M'             'M' in upper case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,X'94'            'M' in lower case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,C'L'             'L' in upper case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,X'93'            'L' in lower case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,C'T'             'T' in upper case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,X'A3'            'T' in lower case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,C'B'             'B' in upper case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLI   BUFFER,X'82'            'B' in lower case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLC   BUFFER(2),=C'F '        'F' command?                @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLC   BUFFER(2),=X'8640'      'F' in lower case?          @rpe
         BE    LEINDE00                Yes: allowed                @rpe
         CLC   BUFFER(4),=C'FIND'      'FIND' command?             @rpd
         BE    LEINDE00                Yes: allowed                @rpd
         CLC   BUFFER(4),=X'86899584'  'FIND' in lower case?       @rpe
         BE    LEINDE00                Yes: allowed                @rpd
         CLC   BUFFER(5),=C'RESET'     RESET ENTERED ?
         BE    LEINDE00                YES
         CLC   BUFFER(5),=X'9985A285A3' reset (LOWER CASE)
         BE    LEINDE00                YES
         CLC   BUFFER(3),=C'CUT'       'CUT' entered ?             @rpb
         BE    LEINDE00                YES                         @rpb
         CLC   BUFFER(3),=X'83A4A3'    'cut' entered (lower case)? @rpb
         BE    LEINDE00                YES                         @rpb
         CLC   BUFFER(5),=C'PASTE'     'PASTE' entered?            @rpb
         BE    LEINDE00                Ok                          @rpb
         CLC   BUFFER(5),=X'9781A2A385' 'paste' (lower case)?      @rpb
         BE    LEINDE00                YES                         @rpb
         MVC   BUFFER,BLANKS           CLEAR COMMAND AREA
         MVC   MSG5,ERR#TXT            Conflicting commands        @rpb
         B     LRESET1
LEINDE00 EQU   *
         MVC   PENDMSG,BLANKS          Blank the pending msg
         LA    R2,PENDMSG              POINTER IN MESSAGE
         CLI   DESTFLAG,X'FF'          DESTINATION PRESENT ?
         BNE   LEINDE0                 NO: BRANCH
         MVC   0(6,R2),LCDEST          COMMAND ITSELF
         LA    R2,7(R2)                INCREASE POINTER
LEINDE0  EQU   *
         CLC   LCCOM1,BLANKS           COMMAND 1 PRESENT  ?
         BE    LEINDE0X                NO
         MVC   0(6,R2),LCCOM1          COMMAND ITSELF
         LA    R2,7(R2)                INCREASE POINTER
         CLC   LCCOM2,BLANKS           COMMAND 2 PRESENT ?
         BE    LEINDE0X                NO
         MVC   0(6,R2),LCCOM2          COMMAND ITSELF
         LA    R2,7(R2)                INCREASE POINTER
LEINDE0X EQU   *
         CLI   CUTFLAG,X'FF'           CUT command pending?        @rpb
         BNE   LEINDE0Y                No                          @rpb
         MVC   0(3,R2),=C'CUT'         COMMAND ITSELF              @rpb
         LA    R2,4(R2)                INCREASE POINTER            @rpb
         B     LEINDE0Z                Branch                      @rpb
LEINDE0Y DS    0H                                                  @rpb
         CLI   PASTEFLG,X'FF'          PASTE command pending?      @rpb
         BNE   LEINDE0Z                No                          @rpb
         MVC   0(5,R2),=C'PASTE'       COMMAND ITSELF              @rpb
         LA    R2,6(R2)                INCREASE POINTER            @rpb
LEINDE0Z EQU   *
         MVC   0(7,R2),=C'pending' TEXT IN MESSAGE
LEINDE1  EQU   *
         LM    R0,R15,LSAVE
         BR    R14
LSAVE    DC    16F'0'                  SAVE AREA
RESETFLG DC    X'00'                   RESET FLAG
WORKBYTE DC    X'00'
LFLAGS   DS    0CL9                    FLAGS                       @rpb
LCFLAG   DC    X'00'                   LINE COMMAND FLAG
DESTFLAG DC    X'00'                   DESTINATION FLAG
COPYFLAG DC    X'00'                   COPY FLAG
MOVEFLAG DC    X'00'                   MOVE FLAG
DELFLAG  DC    X'00'                   DELETE FLAG
REPFLAG  DC    X'00'                   REPEAT FLAG
TRANFLAG DC    X'00'                   UC/LC FLAG
CUTFLAG  DC    X'00'                   'Cut' command pending       @rpb
PASTEFLG DC    X'00'                   'Paste' command pending     @rpb
LLINES   DS    0CL64
DESTLINE DC    CL6' '                  LINENUMBER  OF  DESTINATION
COMMLIN1 DC    CL6' '                  FIRST  LINENUMBER
COMMLIN2 DC    CL6' '                  SECOND LINENUMBER
DESTCOMM DC    CL6' '                  LINENUMBER  OF  DEST-COMMAND
LCDEST   DC    CL6' '                  DEST TEXT
LCCOM1   DC    CL6' '                  COMMAND 1 TEXT
LCCOM2   DC    CL6' '                  COMMAND 2 TEXT
PENDMSG  DS    CL22
L$LINE   DS    CL6                     Current line number         @rpj
LCMDR3   DS    CL4                     Save field R3               @rpj
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        S H I F T - SUBROUTINE, REPLACE TRAILING SPACES WITH         *
*                    FILLCHAR.                                        *
*                                                                     *
*                    INPUT:  NUMFLD, FIELD TO BE SHIFTED, MAX 8 CHAR, *
*                            FILLCHAR, FILL CHARACTER.                *
*                    OUTPUT: NUMFLD, TRAILING SPACES REPLACED WITH    *
*                                    LEADING FILLCHAR                 *
*                            REG.15, RC= 0000 - NORMAL END            *
*                                    RC= 0004 - ALL SPACES            *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
SHIFT    ST    R14,SAVE14              SAVE REG.14
         LA    R3,8                    MAX 8 CHARS
         XR    R15,R15                 RC= 0000
SHIFT01  CLI   NUMFLD+7,X'40'          LAST CHAR SPACE ?
         BNE   SHIFT99                 NO: GOTO EXIT
         MVC   WRKFLD+1(7),NUMFLD      MOVE FIRST 5 CHARS INTO WRKFLD+1
         MVC   WRKFLD(1),FILLCHAR      INSERT LEADING ZERO
         MVC   NUMFLD,WRKFLD           RESTORE NUMFLD
         BCT   R3,SHIFT01              SHIFT MAX 8 TIMES
         LA    R15,4                   RC= 0004 - ALL SPACES
SHIFT99  L     R14,SAVE14              RESTORE REG.14
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        P F K - EXAMINE PFKEY ENTERED                                *
*                Check if an M, m, nnnnn command entered along with   *
*                the SCF or SCB PFkey. Change accordingly to TOP,     *
*                BOTTOM, L -nnnnn or L +nnnnn                         *
*                If no SCF or SCB PFkey, move command from PFK to     *
*                Output buffer.                                       *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
PFK      ST    R14,SAVE14
         LA    R4,DEFPFK01
         LA    R5,24
PFK01    CLC   0(1,R4),AIDBYTE
         BE    PFK05
         LA    R4,26(R4)
         BCT   R5,PFK01
         LA    R15,8
         B     PFK99
PFK05    CLI   1(R4),C'X'
         BNE   PFK06
         LA    R15,8
         B     PFK99
PFK06    XC    REP5,REP5               CLEAR INPUT COMMAND FIELD
         MVC   BUFFER,BLANKS           CLEAR OUTPUT COMMAND FIELD
         L     R1,COMMSCR              PICKUP UNFORMATTED SCREEN
         CLI   6(R1),X'94'             MAX OPERAND (SCROLL) ?
         BE    PFK06E                  YES: BRANCH                 @rp8
         CLI   6(R1),C'M'              MAX OPERAND (SCROLL) ?
         BE    PFK06E                  NO: IGNORE                  @rp8
         CLI   6(R1),C'1'              Figures entered?            @rp8
         BL    PFK08                   Yes: branch                 @rp8
         CLI   6(R1),C'9'              Figures entered?            @rp8
         BH    PFK08                   Yes: branch                 @rp8
         LA    R5,4                    Max. 5 figures              @rp8
         LA    R1,7(R1)                Point to 2nd figure         @rp8
         XR    R14,R14                 Clear counter               @rp8
*---------------------------------------------------------------------*
*        At this point figures are detected in the command area (0-9)
*        Test if this figures are entered together with the
*        SCF or SCB pfkey. If so, form a L +nnnnn if SCF or
*        L -nnnnn if SCB
*------------------------------------- (C)-2005 Skybird Systems ------*
PFK06A   EQU   *                                                   @rp8
         CLI   0(R1),C'0'              Another figure ?            @rp8
         BL    PFK06B                  No: end of scan             @rp8
         CLI   0(R1),C'9'              Another figure ?            @rp8
         BH    PFK06B                  No: end of scan             @rp8
         LA    R1,1(R1)                Next byte to scan           @rp8
         LA    R14,1(R14)              Count figure                @rp8
         BCT   R5,PFK06A               Loop                        @rp8
PFK06B   DS    0H                                                  @rp8
         L     R1,COMMSCR              Pickup unformatted screen   @rp8
         CLC   2(3,R4),=C'SCF'         Scroll foreward?            @rp8
         BNE   PFK06C                  No: try SCB                 @rp8
         MVC   BUFFER(3),=C'L +'       Make a linecommand          @rp8
         EX    R14,MVEBFR              Move figures after cmd      @rp8
         B     PFK99                                               @rp8
PFK06C   DS    0H                                                  @rp8
         CLC   2(3,R4),=C'SCB'         Scroll backward?            @rp8
         BNE   PFK06E                  No: ignore                  @rpg
         MVC   BUFFER(3),=C'L -'       Make a linecommand          @rp8
         EX    R14,MVEBFR              Move figures after cmd      @rp8
         B     PFK99
PFK06E   EQU   *                                                   @rp8
         CLC   2(3,R4),=C'SCF'         SCROLL FORWARD ?
         BNE   PFK07                   NO: TRY SCB
         MVC   REP5(6),=C'BOTTOM'      YES: BOTTOM COMMAND
         MVC   BUFFER(6),=C'BOTTOM'    YES: BOTTOM COMMAND
         B     PFK99
PFK07    CLC   2(3,R4),=C'SCB'         SCROLL BACKWARD ?
         BNE   PFK08                   NO: IGNORE
         MVC   REP5(3),=C'TOP'         YES: TOP COMMAND
         MVC   BUFFER(3),=C'TOP'       YES: TOP COMMAND
         B     PFK99
PFK08    MVC   REP5(24),2(R4)          MOVE PFK COMMAND INTO REP AREA
         MVC   BUFFER(24),2(R4)        MOVE PFK COMMAND INTO BUFFER
         CLI   1(R4),C'N'
         BNE   PFK09
         LA    R15,0
         B     PFK99
PFK09    CLI   1(R4),C'Y'
         BNE   PFK11
         LA    R15,4
         B     PFK99
PFK11    LA    R15,12
PFK99    L     R14,SAVE14
         BR    R14
MVEBFR   MVC   BUFFER+3(0),6(R1)       Execute only                @rp8
*---------------------------------------------------------------------*
*                                                                     *
*        L I N E - SCAN INPUT BUFFER FOR LINE NUMBERS                 *
*                                                                     *
*                  INPUT:  REG.3, START ADDRESS SCAN,                 *
*                  OUTPUT: LN1FLD, LINE-1                             *
*                          LN2FLD, LINE-2                             *
*                          LN3FLD, LINE-3                             *
*                          REG.15, RC= 0000 - ALL LINES VALID,        *
*                                  RC= 0004 - INVALID LINE FOUND,     *
*                                  RC= 0008 - LINES NOT NUMERIC.      *
*                          ERRJTXT, ERROR INDICATING LINE NUMBER      *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
LINE     DS    0H
         ST    R14,SAVE14LN            SAVE REG.14
         MVI   ERRJTXT+13,C'1'         MOVE LINE ID IN ERROR MSG
         LR    R1,R3                   SET PARAMETER IN REG1
         L     R15,=V(SCAN)            LOAD EP SCAN ROUTINE
         BALR  R14,R15                 EXEC SCAN ROUTINE (LN1FLD)
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE73                  NO: LN1 INVALID
         ST    R1,SAVE3                SAVE LAST CHAR SCANNED
         CLI   NUMFLD,C'*'             * - CURRENT LINE ?
         BE    LINE04                  YES: SKIP NUMTST
         MVI   FILLCHAR,X'F0'          '0' INTO FILLCHAR
         BAL   R14,SHIFT               REP TRAIL. SPC WITH LEADING ZERO
         C     R15,F0004               RC= 0004 - ALL SPACES
         BE    LINE03
         CLC   NUMFLD,C0000            LINE-1 = 0 ?
         BNE   LINE03                  NO BRANCH
         MVC   NUMFLD,CTOP             TOP.
         B     LINE04
LINE03   L     R15,=V(NUMTST)          LOAD EP NUMTST ROUTINE
         BALR  R14,R15                 EXEC NUMTST ROUTINE
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE75                  NO: LN1 NOT NUMERIC
LINE04   MVC   LN1FLD,NUMFLD           SAVE LN1 INTO LN1FLD
         L     R3,SAVE3                RESTORE REG.3
         LA    R3,1(R3)                POINT TO LN2
         MVI   ERRJTXT+13,C'2'         MOVE LINE ID IN ERROR MSG
         LR    R1,R3                   SET PARAMETER IN REG1
         L     R15,=V(SCAN)            LOAD EP SCAN ROUTINE
         BALR  R14,R15                 EXEC SCAN ROUTINE (LN2FLD)
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE73                  NO: LN2 INVALID
         ST    R1,SAVE3                SAVE LAST CHAR SCANNED
         MVI   FILLCHAR,X'F0'          '0' INTO FILLCHAR
         BAL   R14,SHIFT               REP TRAIL. SPC WITH LEADING ZERO
         C     R15,F0004               RC= 0004 - ALL SPACES ?
         BE    LINE05
         CLC   NUMFLD,C0000            LINE-2 ZERO ?
         BNE   LINE05
         MVC   NUMFLD,CTOP             TOP.
         B     LINE06
LINE05   L     R15,=V(NUMTST)          ENTRY POINT NUMTST ROUTINE
         BALR  R14,R15                 EXEC ROUTINE
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE75                  NO: LN2 NOT NUMERIC
LINE06   EQU   *
         MVC   LN2FLD,NUMFLD           SAVE LN2 INTO LN1FLD
         L     R3,SAVE3                RESTORE REG.3
         LA    R3,1(R3)                POINT TO LN3
         MVI   ERRJTXT+13,C'3'         MOVE LINE ID IN ERROR MSG
         LR    R1,R3                   SET PARAMETER IN REG1
         L     R15,=V(SCAN)            LOAD EP SCAN ROUTINE
         BALR  R14,R15                 EXEC SCAN ROUTINE (LN3FLD)
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE73                  NO: LN3 INVALID
         MVI   FILLCHAR,X'F0'          '0' INTO FILLCHAR
         BAL   R14,SHIFT               REP TRAIL. SPC WITH LEADING ZERO
         C     R15,F0004               RC= 0004 - ALL SPACES ?
         BE    LINE07
         CLC   NUMFLD,C0000            LINE-3 ZERO ?
         BNE   LINE07
         MVC   NUMFLD,CTOP             TOP.
         B     LINE08
LINE07   L     R15,=V(NUMTST)          EP NUMTST ROUTINE
         BALR  R14,R15                 EXEC THIS ROUTINE
         LTR   R15,R15                 RC= 0000 ?
         BNZ   LINE75                  NO: LN3 NOT NUMERIC
LINE08   MVC   LN3FLD,NUMFLD           SAVE LN3 INTO LN1FLD
         LA    R15,0                   RC= 0000 - SCAN SUCCESSFUL
         B     LINE99                  EXIT
LINE73   LA    R15,4                   RC= 0004 - INVALID LINE(S) FOUND
         B     LINE99                  EXIT
LINE75   LA    R15,8                   RC= 0008 - LINE(S) NOT NUMERIC
LINE99   L     R14,SAVE14LN            RESTORE REG.14
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*                                                                     *
*        D E L E T E - DELETE FROM LN1 THROUGH LN2                    *
*                                                                     *
*                      INPUT:  BUFFER WITH DEL COMMAND                *
*                      OUTPUT: REG.15, RC= 0000 - DELETE SUCCESSFUL   *
*                                      RC= 0004 - ERROR DURING DELETE *
*                              MSG5 - ERROR MESSAGE                   *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
DEL      STM   R0,R14,SAVEDEL          SAVE REG.0 - 14
         XR    R15,R15                 CLEAR REG.15
         XC    REP5,REP5               CLEAR REPLY AREA
         LA    R3,BUFFER+4             POINT AFTER 'DEL '
         BAL   R14,LINE                SCAN FOR LINE NUMBERS
         LTR   R15,R15                 RC= 0000 - SCAN SUCCESSFUL ?
         BZ    DEL03                   YES: PROCESS LINE NUMBERS
         C     R15,F0004               RC= 0004 - INVALID LINE(S) ?
         BE    DEL73                   YES: GIVE ERROR MESSAGE
         C     R15,F0008               RC= 0008 - LINE(S) NOT NUMERIC ?
         BE    DEL73                   YES: GIVE ERROR MESSAGE
         B     DEL77                   ERR: UNEXPECTED RETURN CODE
DEL03    CLI   LN1FLD,C'*'             * - CURRENT LINE ?
         BNE   DEL05                   NO: CONTINUE
         L     R7,FIRSTSCR             LOAD FIRST LINE TO DELETE
         MVC   LN1FLD,LN2FLD           # LINES INTO LN1FLD
         MVC   NUMFLD,LN2FLD           # LINES INTO NUMFLD
         MVC   LN2FLD,C0000            ZERO LN2FLD
         CLC   NUMFLD,C0000            # LINES ZERO ?
         BNE   DEL19                   NO: PROCEED
         MVC   NUMFLD,C0001            YES: DEFAULT 1 LINE
         B     DEL19                   PROCESS LINE-1
DEL05    MVC   NUMFLD,LN1FLD           LINE-1 INTO NUMFLD
         CLC   LN2FLD,C0000            LINE-2 ZERO ?
         BNE   DEL07                   NO: CONTINUE
         MVC   LN2FLD,LN1FLD           DELETE 1 LINE
DEL07    CLC   LN2FLD,C9999            LINE-2 99999999 ?
         BNE   DEL11                   NO: COMPUTE # LINES
         L     R3,LASTREC              POINT TO LAST LINE IN WS
         MVC   LN2FLD+2(6),OFFSETN2(3)  LINE-2 = LAST LINE IN WS
         MVC   LN2FLD(2),=C'00'        INSERT LEADING ZEROES
DEL11    EQU   *
         MVI   ERRPTXT+11,C'1'         LINE NUMBER INTO MESSAGE
         LA    R1,LN1FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   DEL85                   NO: GIVE ERROR MESSAGE
         LR    R7,R1                   ADDRESS OF FOUND LINE IN REG.
         MVI   ERRPTXT+11,C'2'         LINE NUMBER INTO MESSAGE
         LA    R1,LN2FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   DEL85                   NO: GIVE ERROR MESSAGE
         LR    R8,R1                   ADDRESS OF FOUND LINE IN REG.
         LR    R5,R8                   LINE-2 INTO REG.5
         B     DEL21                   COMPUTE  # LINES
DEL19    CLC   NUMFLD,C9999            DELETE EOF ?
         BNE   DEL23                   NO: DELETE LINES
         L     R5,LASTREC              POINT TO LAST LINE IN WORKSPACE
DEL21    LA    R5,NEXTENT(R5)          POINT AFTER LAST LINE TO DEL
         LR    R4,R7                   FIRST LINE TO DELETE
         SR    R5,R4                   REG.5= # LINES TO DELETE
         B     DEL25                   DELETE LINES
DEL23    PACK  PACKFLD,NUMFLD          CONVERT NUMFLD TO
         CVB   R5,PACKFLD              BINARY INTO REG.5
         LA    R4,NEXTENT              LENGTH 1 LINE
         MR    R4,R4                   COMPUTE TOTAL LENGTH
         LTR   R4,R4                   OVERFLOW ?
         BNZ   DEL65                   YES: ERROR
DEL25    DS    0H
         LR    R4,R7                   FIRST LINE TO DELETE
         SL    R4,RLENGTH              Point before 1st deleted    @rp5
         C     R4,FIRSTREC             Before first record         @rp5
         BH    *+8                     No: branch                  @rp5
         L     R4,FIRSTREC             Yes: position to firstrec   @rp5
         ST    R4,SAVE1ST              Save this address           @rp5
         LR    R4,R7                   Restore R4                  @rp5
         LA    R6,0(R4,R5)             R6= FIRST LINE AFTER DELETE
         LA    R2,NEXTENT              R2= NEXTENT
         LR    R3,R6                   R3= FIRST LINE AFTER DELETE
         SR    R3,R2                   R3= LAST LINE TO DELETE
         C     R3,LASTREC              END OF DATA ?
         BH    DEL69                   IF YES, ERROR MESSAGE
         LR    R3,R5                   SAVE LENGTH
         L     R7,LASTREC              COMPUTE LENGTH OF LINES
         SR    R7,R6                   TO BE SHIFTED
         LA    R8,0(R4,R7)             COMPUTE NEW ADDRESS
         ST    R8,LASTREC              OF LASTREC AND SAVE
         LA    R7,NEXTENT(R7)          ADD LENGTH 1 LINE
         LR    R5,R7                   R5 = R7
         MVCL  R4,R6                   DELETE LINES
         L     R4,LASTREC              LAST DATA RECORD
         LA    R4,NEXTENT(R4)          POINT AFTER LAST DATA RECORD
         LR    R5,R3                   LENGTH DELETED LINES
         LR    R6,R4                   2ND OPERAND IS 1ST OPERAND
         XR    R7,R7                   ZERO R7
         MVCL  R4,R6                   CLEAR END OF WORKSPACE
         XC    REP5,REP5               CLEAR REPLY BUFFER
         CLC   FIRSTSCR,LASTREC        END OF WORKSPACE ?
         BNH   DEL29                   NO: compute firstscr and    @rp5
         CLC   FIRSTREC,LASTREC        WORKSPACE EMPTY ?
         BNH   DEL27                   NO: DISPLAY SCREEN
*
*        AT THIS POINT THE ENTIRE WORKSPACE IS DELETED
*        ADD 1 BLANK LINE TO PRESERVE THE 'WORKSPACE EMPTY' CONDITION
*
         L     R4,FIRSTREC             POINT TO FIRST RECORD       @RP2
         MVC   0(NEXTENT,R4),BLANKS    CLEAR THAT LINE             @RP2
         USING WORKSPCE,R4             ADDRESS DSECT OF LINE       @RP2
         XC    WORKFLGS,WORKFLGS       CLEAR FLAGS                 @RP2
         OI    WORKFLGS,$INSERTD       MARK LINE INSERTED          @RP2
         MVC   LASTREC,FIRSTREC        SET 1 LINE IN WORKSPACE     @RP2
         L     R15,=V(NUMBER)          RENUMBER THE ...            @RP2
         BALR  R14,R15                              WORKSPACE      @RP2
         B     DEL96                   RETURN                      @RP2
         DROP  R4                                                  @RP2
DEL27    MVC   FIRSTSCR,FIRSTREC       SHOW FIRST LINE
         B     DEL96                   DISPLAY SCREEN
DEL29    DS    0H                      Compute first line on scr.  @rp5
         CLC   FIRSTSCR,SAVE1ST        First rec on scr < save1st? @rp5
         BL    DEL96                   Do not alter firstscr       @rp5
         MVC   FIRSTSCR,SAVE1ST        New first line on screen    @rp5
         B     DEL96                   Branch                      @rp5
DEL65    MVI   ERR7TXT+21,C'3'
         MVC   MSG5(L'ERR7TXT),ERR7TXT
         B     DEL97
DEL69    MVC   MSG5(L'ERRDTXT),ERRDTXT
         B     DEL97
DEL73    MVC   MSG5(L'ERRJTXT),ERRJTXT
         B     DEL97
DEL77    MVC   MSG5(L'ERR2TXT),ERR2TXT
         B     DEL97
DEL85    MVC   MSG5(L'ERRPTXT),ERRPTXT
         B     DEL97
DEL96    DS    0H
         OI    INFCODE4,$CHANGED       MARK DATA CHANGED
         B     DEL99                   DELETE SUCCESSFUL
DEL97    MVC   REP5,BUFFER             REPEAT COMMAND
         LA    R15,4                   ERROR
DEL99    DS    0H
         LM    R0,R14,SAVEDEL          RESTORE REG.0 - 14
         BR    R14                     DISPLAY SCREEN
SAVE1ST  DS    F                                                   @rp5
*---------------------------------------------------------------------*
*                                                                     *
*        C O P Y - COPY LN1 THROUGH LN2 AFTER LN3                     *
*                                                                     *
*                  INPUT:  BUFFER                                     *
*                  OUTPUT: REG.15, RC= 0000 - COPY SUCCESSFUL         *
*                                      0004 - ERROR DURING COPY       *
*                          MSG5 - ERROR MESSAGE                       *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         SPACE 2
COPY     DS    0H
         ST    R14,SAVE14C             SAVE REG.14
         XR    R15,R15                 CLEAR REG.15
         XC    REP5,REP5               CLEAR REPLY AREA
         LA    R3,BUFFER+3             POINT AFTER 'CO '
         BAL   R14,LINE                SCAN FOR LINE NUMBERS
         LTR   R15,R15                 RC= 0000 ?
         BZ    COPY03                  YES: SEARCH LINES IN WORKSPACE
         C     R15,F0004               RC= 0004 INVALID LINE(S) FOUND ?
         BE    COPY73
         C     R15,F0008               RC= 0008 - LINE(S) NOT NUMERIC ?
         BE    COPY73
         B     COPY77                  ERR: UNEXPECTED RETURN CODE
COPY03   CLI   LN1FLD,C'*'             * - CURRENT LINE ?
         BNE   COPY05                  NO: CONTINUE
         L     R3,FIRSTSCR             POINT TO CURRENT LINE
         MVC   LN1FLD+2(6),OFFSETN2(R3)  NUMBER INTO LN1FLD
         MVC   LN1FLD(2),=C'00'        INSERT LEADING ZEROES
COPY05   CLC   LN3FLD,C0000            LINE-3 ZERO ?
         BNE   COPY06                  NO: PROCEED
         MVC   LN3FLD,LN2FLD           COPY LINE-1
         MVC   LN2FLD,LN1FLD           AFTER LINE-2
COPY06   EQU   *
         MVI   ERRPTXT+11,C'1'         LINE NUMBER INTO MESSAGE
         LA    R1,LN1FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   COPY85                  NO: GIVE ERROR MESSAGE
         LR    R7,R1                   ADDRESS OF FOUND LINE IN REG.
         MVI   ERRPTXT+11,C'2'         LINE NUMBER INTO MESSAGE
         LA    R1,LN2FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   COPY85                  NO: GIVE ERROR MESSAGE
         LR    R8,R1                   ADDRESS OF FOUND LINE IN REG.
         CLC   LN3FLD,CTOP             COPY BEFORE TOP ?
         BNE   COPY08                  NO: BRANCH
         L     R2,FIRSTREC             POINTER FIRST RECORD
         LA    R1,NEXTENT              LINE LENGTH
         SR    R2,R1                   POINTER BEFORE FIRST RECORD
         B     COPY11                  BRANCH
COPY08   EQU   *
         MVI   ERRPTXT+11,C'3'         MOVE LINE ID IN ERROR MSG
         LA    R1,LN3FLD+2             PARM FOR SRCHLINE
         L     R15,EPSRCH              LOAD EP ROUTINE
         BALR  R14,R15                 BRANCH
         LTR   R15,R15                 LINE FOUND ?
         BNZ   COPY85                  NO: GIVE ERROR MESSAGE
         LR    R2,R1                   ADDRESS OF FOUND LINE IN REG.
COPY11   EQU   *
         CR    R2,R8                   LN3 LT LN2 ?
         BNL   COPY15                  NO: PROCEED
         CR    R2,R7                   LN3 LT LN1 ?
         BNL   COPY95                  NO: ERROR
COPY15   STM   R7,R8,MOVEREGS          SAVE ADDRESSES FOR MOVE
         ST    R2,MOVEREGS+8           SAVE ADDRESSES FOR MOVE
         SR    R8,R7                   R8= LN2 - LN1
         LA    R8,NEXTENT(R8)          R8= R8 + NEXTENT
         L     R3,LASTREC              R3= LASTREC
         LA    R3,0(R8,R3)             R3= R3 + COPIED LINES
         C     R3,GETMEND              END OF WORKSPACE ?
         BH    COPY91                  YES: ERROR
         L     R4,LASTREC              POINT TO LASTREC
         ST    R3,LASTREC              LASTREC=LASTREC+LNTH COPIED LNES
         LA    R1,NEXTENT              R2= NEXTENT
COPY17   MVC   0(NEXTENT,R3),0(R4)     MOVE RECORD TO END OF WS
         OI    INFCODE4,$CHANGED       MARK CHANGES MADE
         SR    R3,R1                   R3= R3 - NEXTENT
         SR    R4,R1                   R4= R4 - NEXTENT
         CR    R3,R2                   LN3 REACHED ? (AFTER)
         BNH   COPY18                  YES: STOP MOVING LINES
         CR    R4,R2                   LN3 REACHED ? (BEFORE)
         BNH   COPY18                  YES: STOP MOVING LINES
         B     COPY17                  MOVE NEXT LINE
COPY18   LR    R4,R2                   POINT TO LN3
         LA    R4,NEXTENT(R4)          POINT AFTER LN3       (MVCL)
         LR    R5,R8                   LENGTH                (MVCL)
         LR    R6,R7                   COPY FROM             (MVCL)
         LR    R7,R5                   LENGTH                (MVCL)
         CR    R4,R6                   AFTER GT FROM ?
         BH    COPY19                  NO: SKIP POINTER ADJUSTMENT
         LA    R6,0(5,R6)              ADD # OF LINES TO DISPLACEMENT
COPY19   EQU   *
         MVCL  R4,R6                   COPY RECORDS
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         B     COPY99
COPY73   MVC   MSG5(L'ERRJTXT),ERRJTXT
         B     COPY97
COPY77   MVC   MSG5(L'ERR2TXT),ERR2TXT
         B     COPY97
COPY85   MVC   MSG5(L'ERRPTXT),ERRPTXT
         B     COPY97
COPY91   MVC   MSG5(L'ERR9TXT),ERR9TXT
         B     COPY97
COPY95   MVC   MSG5(L'ERRUTXT),ERRUTXT
         B     COPY97
COPY97   MVC   REP5,BUFFER             REPEAT COMMAND
         LA    R15,4                   ERROR
COPY99   L     R14,SAVE14C
         BR    R14                     DISPLAY SCREEN
*---------------------------------------------------------------------*
*                                                                     *
*        M O V E - MOVE LN1 THROUGH LN2 AFTER LN3                     *
*                                                                     *
*                  INPUT:  BUFFER                                     *
*                  OUTPUT: REG.15, RC= 0000 - MOVE SUCCESSFUL         *
*                                      0004 - ERROR DURING COPY       *
*                          MSG5 - ERROR MESSAGE                       *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
MOVE     ST    R14,SAVE14M             SAVE REG.14
         BAL   R14,COPY                COPY LINES
         LTR   15,15
         BNZ   MOVE99                  EXIT
         MVC   MOVE1SCR,FIRSTSCR       SAVE ADDRESS 1ST REC ON SCREEN
         LM    R7,R8,MOVEREGS          PICK UP LINE ADDRESSES
         L     R2,MOVEREGS+8           PICK UP LINE ADDRESSES
         LR    R1,R8                   LN2 INTO REG.2
         SR    R1,R7                   OFFSET INTO REG.2
         LA    R1,NEXTENT(R1)          ADJUST OFFSET
         CR    R7,R2                   COPY AFTER
         BNH   MOVE19                  YES: RESET FIRSTSCR
         AR    R7,R1                   RESET LN1
         AR    R8,R1                   RESET LN2
         B     MOVE21                  FORMAT DELETE COMMAND
MOVE19   L     R3,MOVE1SCR             ADDRES 1ST REC ON SCREEN
         SR    R3,R1                   RESET ADDRESS
         C     R3,FIRSTREC             BEFORE WORKSPACE ???
         BL    MOVE21                  YES: DO NOT CHANGE FIRSTSCR
         ST    R3,MOVE1SCR             SAVE ADDRESS
MOVE21   MVC   BUFFER,BLANKS           BLANK BUFFER
         MVC   LN1FLD+2(6),OFFSETN2(R7)   PICK UP LN1
         MVC   LN1FLD(2),=C'00'        INSERT LEADING ZEROES
         MVC   LN2FLD+2(6),OFFSETN2(R8)   PICK UP LN2
         MVC   LN2FLD(2),=C'00'        INSERT LEADING ZEROES
         MVC   BUFFER(4),=CL4'DEL'     FORMAT DELETE COMMAND
         MVC   BUFFER+4(8),LN1FLD      FORMAT DELETE COMMAND
         MVC   BUFFER+13(8),LN2FLD     FORMAT DELETE COMMAND
         BAL   R14,DEL                 DELETE LINES
         MVC   FIRSTSCR,MOVE1SCR       RESTORE ADDRESS 1ST REC ON SCRN
MOVE99   L     R14,SAVE14M             RESTORE REG.14
         BR    R14
*---------------------------------------------------------------------*
*                                                                     *
*        S C O P E - SET EDIT SCOPE TO COLUMNS N-M                    *
*              INPUT. SCOPENUM, WHICH WILL CONTAIN THE COLUMNS OR     *
*                     BINARY ZEROES IF DEFAULT SCOPE IS REQUESTED.    *
*             OUTPUT. SCOPE FIELD IN SCREEN.                          *
*                     SCOPES FIELD IN COMMAREA                        *
*                     SCOPEL FIELD IN COMMAREA                        *
*                     REG. 15 RETURCODE.                              *
*                             00. EXECUTION ALRIGHT                   *
*                             04. ERRORS DETECTED (ERRORMSG IN MSG5)  *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
SCOPE    ST    R14,SAVE14SC            SAVE REG.14
         XR    R15,R15                 CLEAR REG.15
         XC    REP5,REP5               CLEAR REPLY AREA
         LA    R3,SCOPENUM             POINT TO SCOPE NUMBERS
         CLI   0(R3),X'40'             OPERANDS ?
         BE    SCOPE11                 NO: TAKE DEFAULT
         CLI   0(R3),X'00'             OPERANDS ?
         BE    SCOPE11                 NO: TAKE DEFAULT
         BAL   R14,LINE                SCAN FOR NUMBERS
         LTR   R15,R15                 RC= 0000 - SCAN SUCCESSFUL ?
         BE    SCOPE03                 YES: PROCESS NUMBERS
         C     R15,F0004               RC= 0004 - INVALID NUMBER(S)
         BE    SCOPE75                 YES: GIVE ERROR MESSAGE
         C     R15,F0008               RC= 0008 - NUMERIC ?
         BE    SCOPE75                 YES: GIVE ERROR MESSAGE
         B     SCOPE77                 ERR: UNEXPECTED RETURN CODE
SCOPE03  CLC   LN1FLD(6),C0000          LEADING ZERO ?
         BNE   SCOPE75
         CLC   LN2FLD(6),C0000    '     LEADING ZERO ?
         BNE   SCOPE75
         CLC   LN1FLD,LN2FLD           LN1 .GT. LN2 ?
         BH    SCOPE75                 YES: INVALID RANGE
         CLC   LN1FLD,C0001            .LT. ZERO ?
         BL    SCOPE75
         CLC   LN1FLD,=C'00000080'     .GT. 80 ?
         BH    SCOPE75
         CLC   LN2FLD,C0001            .LT. ZERO ?
         BL    SCOPE75
         CLC   LN2FLD,=C'00000080'     .GT. 80 ?
         BH    SCOPE75
         MVC   SCOPE2+7(2),LN1FLD+6    SCOPE INTO SCREEN
         MVC   SCOPE5+7(2),LN1FLD+6    SCOPE INTO SCREEN
         MVC   SCOPE2+10(2),LN2FLD+6   SCOPE INTO SCREEN
         MVC   SCOPE5+10(2),LN2FLD+6   SCOPE INTO SCREEN
         PACK  PACKFLD,LN1FLD+6(2)     CONVERT TO DECIMAL
         CVB   R3,PACKFLD              CONVERT TO BINARY
         BCTR  R3,0                    SUBTRACT 1
         PACK  PACKFLD,LN2FLD+6(2)     CONVERT TO DECIMAL
         CVB   R4,PACKFLD              CONVERT TO BINARY
         ST    R3,SCOPES               STORE OFFSET
         SR    R4,R3                   COMPUTE LENGTH
         ST    R4,SCOPEL               STORE LENGTH
         B     SCOPE99
SCOPE11  EQU   *
         TM    INFCODE,$COBOL          COBOL ALIGNMENT ?
         BNO   SCOPE12                 NO: SET STD SCOPE
         LA    R2,6                    START SCOPE (COBOL)
         ST    R2,SCOPES               SET IN COMMAREA
         MVC   SCOPE2+7(2),=C'07'      DEFAULT SCOPE OFFSET (COBOL)
         MVC   SCOPE5+7(2),=C'07'      DEFAULT SCOPE OFFSET (COBOL)
         LA    R2,72                   LENGTH OF SCOPE
         ST    R2,SCOPEL               SET SCOPE LENGTH
         MVC   SCOPE2+10(2),=C'78'     DEFAULT SCOPE INTO SCREEN (COBOL
         MVC   SCOPE5+10(2),=C'78'     DEFAULT SCOPE INTO SCREEN (COBOL
         B     SCOPE99                 END OF SCOPE FOR COBOL
SCOPE12  EQU   *                       SCOPES FOR STD DATASETS
         XC    SCOPES,SCOPES           DEFAULT SCOPE OFFSET ZERO
         MVC   SCOPE2+7(2),=C'01'      DEFAULT SCOPE OFFSET
         MVC   SCOPE5+7(2),=C'01'      DEFAULT SCOPE OFFSET
         CLC   =C'YES',NUMBERED        LINE NUMBERS ?
         BE    SCOPE13                 YES: DEFAULT= 72
         LA    R2,80                   NO: DEFAULT= 80
         MVC   SCOPE2+10(2),=C'80'     DEFAULT SCOPE INTO SCREEN
         MVC   SCOPE5+10(2),=C'80'     DEFAULT SCOPE INTO SCREEN
         ST    R2,SCOPEL               STORE SCOPE LENGTH
         B     SCOPE99                 SKIP
SCOPE13  LA    R2,72                   DEFAULT= 72
         MVC   SCOPE2+10(2),=C'72'     DEFAULT SCOPE INTO SCREEN
         MVC   SCOPE5+10(2),=C'72'     DEFAULT SCOPE INTO SCREEN
         ST    R2,SCOPEL               STORE SCOPE LENGTH
         B     SCOPE99
SCOPE75  MVC   MSG5(L'ERR8TXT),ERR8TXT   NOT NUMERIC
         B     SCOPE97
SCOPE77  MVC   MSG5(L'ERR2TXT),ERR2TXT
         B     SCOPE97
SCOPE97  MVC   REP5,BUFFER             REPEAT COMMAND
         LA    R15,4                   ERROR
SCOPE99  L     R14,SAVE14SC            RESTORE REG.14
         BR    R14                     DISPLAY SCREEN
         TITLE 'WORKAREAS AND CONSTANTS'
SCR1TXT  DC    X'277EC21140401DF8' WRITE ERASE / R01,C00 (WAS 27F5)
SCR1WCC  EQU   SCR1TXT
SCR1LEN  EQU   *-SCR1TXT
*
SCR5TXT  DC    X'27F1C2'               WRITE NO-ERASE
SCR5ADDR DC    X'11000013'             ADDRESS OF CURSOR
         DC    X'1140401DF8'           RESET ADDRESS
SCR5STA  DC    CL06' ',C' '
SCR5MEM  DC    CL8' ',C':'
SCR5TRUN DC    X'1DF0'
         DC    C'Trunc'
SCR5XLAT DC    X'1DF0'
         DC    C'Xlate'
SCR5TOP  DC    X'1DF0'
         DC    C'Top'
SCR5NON  DC    X'1DF0'
         DC    C'Nonum'
SCR5NULL DC    X'1DF0'
         DC    C'Nulls'
SCR5ASIS DC    X'1DF0'
         DC    C'Asis'
         DC    X'1DF8'
         DC    C'-------'                                          @rpa
         ENTRY MSG5
MSG5     DC    CL22' ',X'1DF0'
         DC    X'11C150',X'1DF8',C'Cmd =>',X'1DC1'
REP5     DC    CL48' ',X'1DF0'
SCOPE5   DC    C'Scope',X'1DC8',C'XX,XX',X'1DF0'
SCROLL5  DC    C'Scroll',X'1DC8',C'XXXX',X'1DF0'
         DC    X'11C260',X'1DF8'   R03,C01
ALG5TOP  DC    CL79'...... ----+----1----+----2----+----3----+----4----C
               +----5----+----6----+----7--'
         DC    X'1DC5'
         ENTRY LNE5
LNE5     DC    X'11C3F1',CL6' ',X'1D40',CL72' ',X'1DC5' R04,C02    @rp9
         DC    X'11C5C1',CL6' ',X'1D40',CL72' ',X'1DC5' R05,C02    @rp9
         DC    X'11C6D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11C761',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11C8F1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'114AC1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'114BD1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'114C61',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'114DF1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'114FC1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'1150D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D161',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D2F1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D4C1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D5D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D661',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D7F1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11D9C1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'115AD1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'115B61',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'115CF1',CL6' ',X'1D40',CL72' '   R24,C02          @rp9
SCR524   EQU   *-SCR5TXT        3278/79 MODEL 3 SECTION
         DC    X'1DC5'
         DC    X'115EC1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'115FD1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116061',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'1161F1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11E3C1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11E4D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11E561',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11E6F1',CL6' ',X'1D40',CL72' ' R32,C02            @rp9
SCR532   EQU   *-SCR5TXT
         DC    X'1DC5'          3278/79 MODEL 4 SECTION
         DC    X'11E8C1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11E9D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116A61',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116BF1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116DC1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116ED1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'116F61',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11F0F1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11F2C1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11F3D1',CL6' ',X'1D40',CL72' ',X'1DC5'            @rp9
         DC    X'11F461',CL6' ',X'1D40',CL72' ' R43,C02            @rp9
SCR543   EQU   *-SCR5TXT
SCR2TXT  DC    X'27F1C2'
         DC    X'1140F9',X'1DF8'   R01,C58
MSG2     DC    CL22' ',X'1DF0'
         DC    X'11C150',X'1DF8',C'Cmd =>',X'1D4013'
         DC    CL048' ',X'1DF0'
SCOPE2   DC    C'Scope',X'1DC8',C'XX,XX',X'1DF0'
SCROLL2  DC    C'Scroll',X'1DC8',C'XXXX',X'1DF8'
SCR2LEN  EQU   *-SCR2TXT
TXT5SCL  DC    CL80'----+----1----+----2----+----3----+----4----+----5-C
               ---+----6----+----7----+----8'
         ORG   TXT5SCL
TXT5LFT  DS    CL72                LEFT ALIGNMENT
         ORG   TXT5SCL+6
TXT5COB  DS    CL72                COBOL ALIGNMENT
         ORG   TXT5SCL+8
TXT5RGT  DS    CL72                RIGHT ALIGNMENT
*-----------------------------------------------------------@PW START--
EODTXT2  DC    CL72'****************************** End of data ********C
               *********************'
*-----------------------------------------------------------@PW END---
         ORG ,
ERR1TXT  DC    CL22'---Workspace truncated'
ERR2TXT  DC    CL22'Unexpected return code'
ERR3TXT  DC    CL22'--Scroll had no effect'
ERR4TXT  DC    CL22'------Input terminated'
ERR5TXT  DC    CL22'-------Invalid command'
ERR6TXT  DC    CL22'Workspace not numbered'
ERR7TXT  DC    CL22'-Logic error, Rc= 030X'     21
ERR8TXT  DC    CL22'---------Invalid scope'
ERR9TXT  DC    CL22'-------Copy terminated'
ERRATXT  DC    CL22'No JOB statement found'
ERRBTXT  DC    CL22'-------No HELP dataset'
ERRDTXT  DC    CL22'---------Delete failed'
ERRETXT  DC    CL22'--Invalid scroll value'
ERRGTXT  DC    CL22'-Not valid in cob mode'
ERRHTXT  DC    CL22'---Invalid line number'
ERRITXT  DC    CL22'---------Submit failed'
ERRJTXT  DC    CL22'--------Line-X invalid'     13
ERRLTXT  DC    CL22'-------PFK not defined'
ERRMTXT  DC    CL22'PFK definition invalid'
ERRPTXT  DC    CL22'------Line-X not found'     11
ERRUTXT  DC    CL22'----Invalid copy range'
ERRVTXT  DC    CL22'------Use ''SAVE FORCE'''
ERRXTXT  DC    CL22'--Input convert failed'
ERRYTXT  DC    CL22'Enter "RETRY" or "END"'
ERRZTXT  DC    CL22'---Nothing to RETRIEVE'
ERR@TXT  DC    CL22'--Enter SAVE or CANCEL'
ERR#TXT  DC    CL22'--Conflicting commands'
SAVETXT  DC    CL22' '
MSG1TXT  DC    CL22'--Workspace renumbered'
MSG2TXT  DC    CL4'JOB '
MSG2JOBN DC    CL8' '
MSG2REST DC    CL10' submitted'
MSG3TXT  DC    CL22'--Invalid chars xlated'
SUBLIST  DS    F                       STARTADDRESS XPFCOMM
         DC    A(MSG2JOBN)             JOBNAME
ADDRCOM  DS    F
SAVER1   DS    F                       Save reg1 in CNVIN routine  @rp9
SAVEMBR  DS    CL8
SCOPENUM DS    CL18                    WORK FIELD FOR SCOPE
SCROLNUM DC    CL4'26  '               WORK FIELD FOR SCROLL
SCRPAGE  DS    CL4
SCRHALF  DS    CL4
AMODULE  DS    CL8                     MODULE TO BE ATTACHED
TSOECB   DC    F'0'
TCBADDR  DC    F'0'
F0000    DC    F'0'
F0003    DC    F'3'
F0004    DC    F'4'
F0008    DC    F'8'
F0012    DC    F'12'
F0016    DC    F'16'
F0020    DC    F'20'
F0024    DC    F'24'
COPMEM   DS    CL8
COPYDSN  DS    CL44
COPYVOL  DS    CL6
CTOP     DC    C'TOP     '
C0000    DC    C'00000000'
C0001    DC    C'00000001'
C9999    DC    C'99999999'
INTLOW   DC    X'1DF0'
INTHIGH  DC    X'1DF8'
RLENGTH  DC    A(NEXTENT)
PACKFLD  DC    D'0'
SAVE47   DS    4F
MOVEREGS DS    3F                  REGS FROM COPY TO MOVE ROUTINE
SAVE3CI  DS    F                   SAVE R3 IN CNVIN ROUTINE
MOVE1SCR DS    F                   ADDRESS 1ST REC ON SCREEN
SAVEDEL  DC    15F'0'              SAVE AREA DELETE ROUTINE
SAVE14LN DS    F                   SAVE AREA REG.14 LINE SUBROUTINE
SAVE14I  DS    F                   SAVE AREA REG.14 INPUT SUBROUTINE
SAVE14C  DS    F                   SAVE AREA REG.14 COPY SUBROUTINE
SAVE14CI DS    F                   SAVE AREA REG.14 CNVIN SUBROUTINE
SAVE14SC DS    F                   SAVE AREA REG.14 SCOPE SUBROUTINE
SAVE14M  DS    F                   SAVE AREA REG.14 MOVE SUBROUTINE
SAVE14   DS    F                   SAVE AREA REG.14 ALL SUBROUTINES
SAVE3    DS    F                   SAVE AREA REG.3 SCAN
MAXLINES DS    F
BUFFEND  DS    F
TPUTLEN  DS    F                       LENGTH OF TPUT IN CNVOUT ROUTINE
#LINES   DS    H                       NUMBER OF LINES ON THE SCREEN
SCRLEN   DS    H                       NUMBER OF LINES * NEXTENT
FILLCHAR DC    CL1' '                  FILL CHARACTER SHIFT ROUTINE.
         CNOP  2,4
NUMFLD   DS    CL8                     WORK FIELD NUMTST/SHIFT
         ENTRY NUMFLD
WRKFLD   DS    CL8                     WORK FIELD NUMTST/SHIFT
LN1FLD   DS    CL8                     LINE-1 COPY/LINE
LN2FLD   DS    CL8                     LINE-2 COPY/LINE
LN3FLD   DS    CL8                     LINE-3 COPY/LINE
CURRLINE DC    F'0'
BUFFER   DS    CL48
SAVECMD  DS    CL48
TSTLINE  DS    CL90                    CONTAINS DATA LINE WHERE
*                                      UNPRINTABLES ARE NOT XLATED
TSTCHAR  DS    C
SW       DC    X'00'
$XLATED  EQU   X'01'                   Unprintables detected
$TRUNC   EQU   X'02'                   Workspace too small
$ASIS    EQU   X'04'                   Mixed case data
$RIGHT   EQU   X'08'                   screen right aligned
$NULLS   EQU   X'10'                   Trailing blanks repl. by x'00'
         LTORG
AIDBYTE  DS    CL1                     AID BYTE
CURSOR   DS    CL2                     CURSOR ADDRESS
         ENTRY CURSOR                  PROVIDE EXTERNAL ADDRESSABILITY
*
         TITLE 'FIND CURSOR POSITION'
         DROP
*------- ----- ----------------------- FIND CURSOR LINE
*------- ----- ----------------------- AND SET LINENUM IN 'NUMFLD' (R9)
CSR      BEGINRPF
         USING COMMAREA,11             ADDRESSABILITY OF COMMAREA
         L     R9,=V(NUMFLD)           LOAD NUMFLD FIELD OF MAINLINE
         L     R1,=V(CURSOR)           LOAD CURSOR ADDRESS FROM MAINLIN
         MVC   SBAR(1),0(R1)           SBA ROW
         MVC   SBAC(1),1(R1)           SBA COL
         XC    ROW,ROW                 CLEAR ROW
         XC    COL,COL                 CLEAR COL
         BAL   R14,SBA                 SBA TO ROW/COL
         LTR   R15,R15                 RC= 0000 ?
         BNZ   CSR10                   NO: USE DEFAULT
         XR    R2,R2                   CLEAR SIGN
         L     R3,ROW                  GET ROW NUMBER
         C     R3,FF004                BEFORE LINE 4 ?
         BL    CSR10                   YES: TAKE DEFAULT
         SH    R3,=H'4'                OFFSET TO LINE 4
         M     R2,=F'85'               LENGTH 1 LINE
         L     R2,=V(LNE5)             FIRST LINE
         AR    R3,R2                   ADD OFFSET
         CLI   3(R3),C'0'              Numeric ?                   @rpa
         BL    CSR10                   No:  take default           @rpa
         CLI   3(R3),C'9'              Numeric ?                   @rpa
         BH    CSR10                   No:  take default           @rpa
         MVC   0(2,R9),=C'00'          LEADING ZERO
         MVC   2(6,R9),3(R3)           LINE NUMBER INTO NUMFLD
         XR    R15,R15                 RC= 0000 - LINE FOUND
         B     CSR99
CSR10    LA    R15,4                   RC= 0004 - USE DEFAULT
         B     CSR99
CSR99    L     R13,4(R13)              LOAD CALLERS SAVEAREA
         RETURN (14,12),RC=(15)        RETURN TO CALLER
         BR    R14                     RETURN
*------- ----- ----------------------- ROW/COL TO SBA
SBA      ST    R14,SAV14SBA            SAVE RETURN ADDRESS
         XR    R2,R2                   CLEAR SIGN
         L     R3,ROW                  ROW NUMBER (BIN)
         LTR   R3,R3                   ZERO ?
         BZ    SBA01                   YES: ASSUME SBA TO ROW/COL
         BCTR  R3,0                    MINUS 1
         L     R4,COL                  COL NUMBER (BIN)
         LTR   R4,R4                   ZERO ?
         BZ    SBA01                   YES: ASSUME SBA TO ROW/COL
         BCTR  R4,0                    MINUS 1
         M     R2,=F'80'               80 COLS PER ROW
         AR    R3,R4                   DEC.POSITION
         XR    R2,R2                   CLEAR SIGN
         D     R2,=F'64'               64 SBA'S BEFORE WRAP AROUND
         LA    R4,SBATAB               ADDRESS
         AR    R2,R4                   ADD DISPL.COL SBA
         MVC   SBAC(1),0(R2)           SBA COL
         AR    R3,R4                   ADD DISPL.ROW SBA
         MVC   SBAR(1),0(R3)           SBA ROW
         XR    R15,R15                 RC= 0000
         B     SBA99                   EXIT
*------- ----- ----------------------- SBA TO ROW/COL
SBA01    LA    R3,SBATAB               FIRST SBA
         LA    R4,1                    LENGTH 1 SBA
         LA    R5,SBATAB+SBALEN-1      LAST SBA
         XR    R7,R7                     CLEAR INDEX
SBA05    CLC   SBAR(1),0(R3)           SBA FOUND ?
         BE    SBA10                   # ROWS IN REG.7
         AH    R7,=H'1'                INCREMENT INDEX
         BXLE  R3,R4,SBA05             NEXT SBA
         LA    R15,8                   RC= 0008 - ERROR
         B     SBA99                   EXIT
SBA10    LA    R3,SBATAB               FIRST SBA
         LA    R4,1                    LENGTH 1 SBA
         LA    R5,SBATAB+SBALEN-1      LAST SBA
         XR    R8,R8                   CLEAR INDEX
SBA15    CLC   SBAC(1),0(R3)           SBA FOUND ?
         BE    SBA20                   # COLS IN REG.8
         AH    R8,=H'1'                INCREMENT INDEX
         BXLE  R3,R4,SBA15             NEXT SBA
         LA    R15,8                   RC= 0008 - ERROR
         B     SBA99                   EXIT
SBA20    XR    R6,R6                   CLEAR SIGN
         M     R6,=F'64'               64 SBA'S BEFORE WRAP AROUND
         AR    R7,R8                   DEC.POSITION
         XR    R6,R6                   CLEAR SIGN
         D     R6,=F'80'               80 COLS PER ROW
         LA    R6,1(R6)                PLUS 1
         ST    R6,COL                  COL NUMBER (BIN)
         LA    R7,1(R7)                PLUS 1
         ST    R7,ROW                  ROW NUMBER (BIN)
         XR    R15,R15                 RC= 0000
         B     SBA99                   EXIT
SBA99    L     R14,SAV14SBA            RESTORE RETURN ADDRESS
         BR    R14
*------- ----- ----------------------- WORK FIELDS
ROW      DC    F'0'                    ROW NUMBER (BIN)
COL      DC    F'0'                    COL NUMBER (BIN)
FF004    DC    F'4'
SBAR     DC    X'00'                   SBA ROW (HEX)
SBAC     DC    X'00'                   SBA COL (HEX)
SAV14SBA DC    F'-1'                   SAVE RETURN ADDRESS (REG.14)
*------- ----- ----------------------- SBA'S
SBATAB   DC    X'40C1C2C3C4C5C6C7C8C94A4B4C'
         DC    X'4D4E4F50D1D2D3D4D5D6D7D8D9'
         DC    X'5A5B5C5D5E5F6061E2E3E4E5E6'
         DC    X'E7E8E96A6B6C6D6E6FF0F1F2F3'
         DC    X'F4F5F6F7F8F97A7B7C7D7E7F'
SBALEN   EQU   *-SBATAB
         LTORG ,
         TITLE 'SUBROUTINE OF ''SORT'' COMMAND'
*---------------------------------------------------------------------*
*                                                                     *
*        S O R T                       SORT FIELDS ARE SET WITH       *
*                                      'SCOPE' COMMAND                *
* THE BUBBLE SORT TECHNIQUE IS USED                                   *
* REGISTER USAGE:   R2: WORKREGISTER.                                 *
*                   R3: WORKREGISTER.                                 *
*                   R4: ENTRY IN THE WORKSPACE STARTING WITH FIRSTREC *
*                   R5: = R4+LENGTH OF ENTRY (LENGTH=NEXTENT)         *
*                   R6: LENGTH OF SORT FIELD MINUS 1 (SCOPEL-1)       *
*                   R7: POINTS TO LAST RECORD SWAPPED                 *
*                   R8: OFFSET OF SORT FIELD WITHIN WORKSPACE ENTRY   *
*                       (SCOPES)                                      *
*                   R9: FIRST RECORD IN WORKSPACE                     *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
SORT     BEGINRPF ,                    SORT WORKSPACE
         USING COMMAREA,R11            GET ADDRESSABILITY OF COMMAREA
         L     R7,LASTREC              LAST ENTRY OF TABLE
         L     R6,SCOPEL               LENGTH OF SCOPE
         BCTR  R6,0                    MINUS 1 FOR EXECUTE
         L     R8,SCOPES               LOAD OFFSET OF SORT FIELD
         L     R9,FIRSTREC             FIRST RECORD POINTER
SORT01   EQU   *                       START SORT
         ST    R7,SWAPLAST             LAST RECORD SWAPPED
         LR    R4,R9                   1ST RECORD OF WORKSPACE
         LA    R5,NEXTENT(R4)          2ND RECORD OF WORKSPACE
SORT03   EQU   *                       YES: SORT WORKSPACE
         C     R4,SWAPLAST             LASTREC REACHED ?
         BNL   SORT07                  YES: LOOP COMPLETE
         LA    R2,8(4,R8)              ADD SCOPE OFFSET (SORT FIELDS)
         LA    R3,8(5,R8)              ADD SCOPE OFFSET
         EX    R6,SORTCLC1             COMPARE
         BNH   SORT05                  HIGH: TURN AROUND THESE RECORDS
         XC    0(NEXTENT,R4),0(R5)     SWAP
         XC    0(NEXTENT,R5),0(R4)          THE
         XC    0(NEXTENT,R4),0(R5)              RECORDS
         LR    R7,R4                   LAST RECORD SWAPPED IN R7
SORT05   EQU   *                       LOAD NEXT ENTRY
         LA    R4,NEXTENT(R4)          NEXT RECORD
         LA    R5,NEXTENT(R5)          NEXT RECORD
         B     SORT03                  COMPARE NEXT RECORD
SORT07   EQU   *                       ALL RECORDS DONE
         C     R7,SWAPLAST             ARE THERE SWAPS EXECUTED ?
         BL    SORT01                  IF YES, THEN SORT AGAIN
*                                      ELSE END OF SORT
SORT99   L     R13,4(R13)              PICKUP CALLERS SAVE AREA
         RETURN (14,12),RC=0           RETURN TO CALLER
SORTCLC1 CLC   0(0,R2),0(R3)           EXECUTE ONLY
*
SWAPLAST DC    F'0'
         LTORG ,
         TITLE 'SCAN SUBROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        S C A N - SUBROUTINE, SCANS AREA FOR ' ' OR ',' AND PUTS     *
*                              PRECEDING CHARS IN NUMFLD.             *
*                                                                     *
*                  INPUT:  REG.1,  POINTS TO FIRST CHAR TO SCAN       *
*                  OUTPUT: NUMFLD, CHARS PRECEEDING ' ' OR ','        *
*                          REG.1,  POINTS TO LAST CHAR SCANNED        *
*                          REG.15, RETURN CODE 0000 - CHARS FOUND     *
*                                              0008 - NO CHARS FOUND  *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
SCAN     BEGINRPF
         LR    R3,R1                   PICKUP PARAMETER
         LA    R15,8                   RC= 0008, INITIAL: NO CHARS FND
         LA    R4,9                    MAX 9 CHARS
         L     R5,=V(NUMFLD)           POINT TO NUMFLD
         MVI   0(R5),C' '              CLEAR NUMFLD
         MVC   1(7,R5),0(R5)           CLEAR NUMFLD
SCAN01   CLI   0(R3),X'40'             SPACE ?
         BE    SCAN03                  YES: END OF SCAN
         CLI   0(R3),X'6B'             COMMA ?
         BE    SCAN03                  YES: END OF SCAN
         CLI   0(R3),X'00'             NULL ?
         BE    SCAN03                  YES: END OF SCAN
         MVC   0(1,R5),0(R3)           MOVE 1 CHAR INTO NUMFLD
         LA    R3,1(R3)                NEXT CHAR TO SCAN
         LA    R5,1(R5)                NEXT CHAR NUMFLD
         BCT   R4,SCAN01               SCAN MAX 9 TIMES
         B     SCAN99                  GOTO EXIT, NO CHARS FOUND
SCAN03   LA    R15,0                   RC= 0000, SCAN SUCCESSFUL
         LR    R1,R3                   RET.ADDR LAST CHAR SC. IN REG1
SCAN99   L     R13,4(R13)              PICKUP CALLERS SAVEAREA
         L     R14,12(R13)             RESTORE REG14
         LM    R2,R12,28(R13)          RESTORE REG2-REG12
         BR    R14                     GOTO CALLER
         LTORG ,
         TITLE 'NUMTST ROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        N U M T S T - SUBROUTINE, NUMERIC TEST OF A 8 CHAR FIELD.    *
*                                                                     *
*                    INPUT:  NUMFLD, FIELD CONTAINS CHARS TO TEST     *
*                    OUTPUT: NUMFLD, REMAINS UNCHAINGED               *
*                            REG.15, RETURN CODE 0000 - NUMERIC       *
*                                                0008 - NOT NUMERIC   *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
NUMTST   BEGINRPF
         LA    R3,8                    LENGTH
         L     R4,=V(NUMFLD)           FIELD TO BE TESTED
NUMTST01 CLI   0(R4),X'F0'             LOW ?
         BL    NUMTST03                YES: NOT NUMERIC
         CLI   0(R4),X'F9'             HIGH ?
         BH    NUMTST03                YES: NOT NUMERIC
         LA    R4,1(R4)                NEXT CHAR.
         BCT   3,NUMTST01              TEST MAX 8 CHARS.
         LA    R15,0                   RC= 0000, NUMERIC
         B     NUMTST99                GOTO EXIT
NUMTST03 LA    R15,8                   RC= 0008, NOT NUMERIC
NUMTST99 L     R13,4(R13)              PICKUP CALLERS SAVE AREA
         RETURN (14,12),RC=(15)        RETURN
         LTORG ,
         TITLE 'RENUMBER WORKSPACE ROUTINE'
*---------------------------------------------------------------------*
*                                                                     *
*        N U M B E R - RENUMBER WORKSPACE.                            *
*                                                                     *
*                      INPUT:  WORKSPACE.                             *
*                      OUTPUT: RENUMBERED WORKSPACE.                  *
*                                                                     *
*        NOTE:  IF STD-NUMBERED SCREEN NUMBERS WILL START WITH 100    *
*               AND AN ICREMENT OF 100, DATA WILL BE NUMBERED STARTING*
*               WITH 10000 AND AN INCREMENT OF 10000, EXCEPT IF THE   *
*               DATA CONTAINS 10000 RECORD OR MORE. THEN THE SCREEN   *
*               NUMBERS START WITH 10, INCREMENT 10 AND THE DATA      *
*               NUMBERS WILL START WITH 1000, INCREMENT 1000          *
*               IF COBOL-NUMBERED SCREEN AND DATA NUMBERS WILL START  *
*               WITH 100, INCREMENT 100,  EXCEPT IF THE DATA          *
*               CONTAINS 10000 RECORDS OR MORE. THEN THE NUMBERS START*
*               WITH 10, INCREMENT 10.                                *
*               IF NONUM DATA, THE SCREEN NUMBERS START WITH 1 AND    *
*               THE INCREMENT IS 1 TOO.                               *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
NUMBER   BEGINRPF
         USING COMMAREA,11             GET ADDRESSABILITY OVE COMMAREA
         ZAP   LINECNT,=P'0'           INIT COUNTER
         CLC   =C'YES',NUMBERED        LINE NUMBERED ?
         BE    NUMBER01                YES: BRANCH
         ZAP   INCR,=P'1'              NONUM: INCREMENT NUMBERS = 1
         B     NUMBER04                RENUMBER
NUMBER01 L     R3,FIRSTREC             FIRST REC IN WORKSPACE
         XR    R4,R4                   CLEAR REG 4
         L     R5,LASTREC              LASTRECORD OF WORKSPACE
         LA    R5,NEXTENT(R5)          ADJUST OFFSET LAST RECORD
         LA    R6,NEXTENT              LENGTH OF WORKSPACE ENTRY
         SR    R5,R3                   LENGTH OF USED WORKSPACE
         DR    R4,R6                   COMPUTE NUMBER OF LINES
         C     R5,=F'100000'           100000 OR MORE LINES ?
         BNL   NUMBER02                YES: INCREMENT WILL BE 1
         C     R5,=F'10000'            10000-99999 LINES ?
         BNL   NUMBER03                YES: INCREMENT WILL BE 10
         ZAP   INCR,=P'100'            ELSE IT WILL BE 100
         B     NUMBER04                RENUMBER
NUMBER02 EQU   *                       NUMBERED > 10000 LINES
         ZAP   INCR,=P'1'              INCR=1 TO AVOID OVERFLOW
         B     NUMBER04
NUMBER03 EQU   *                       NUMBERED > 10000 LINES
         ZAP   INCR,=P'10'             INCR=10 TO AVOID OVERFLOW
NUMBER04 L     R3,FIRSTREC             SET ON FIRST RECORD POINTER
NUMBER05 AP    LINECNT,INCR
         UNPK  NUMFIRST,LINECNT        UNPACK THE RESULT
         OI    NUMFIRST+5,X'F0'        CLEAR SIGN
         MVC   OFFSETN2(6,R3),NUMFIRST MOVE IN WORKSPACE
         CLC   NUMBERED,=C'YES'        LINE NUMBERS ?
         BNE   NUMBER07
         TM    INFCODE,$COBOL          IS IT COBOL ?
         BNO   NUMBER06                NO: GO ON
         MVC   8(6,R3),NUMFIRST        MOVE LINE NUMBERS IN THE BEGIN.
         B     NUMBER07                YES: NEXT LINE TO RENUMBER
NUMBER06 MVC   OFFSETN1(8,R3),NUMWRK   MOVE LINE NUMBER IN DATA
NUMBER07 LA    R3,NEXTENT(R3)
         C     R3,LASTREC
         BNH   NUMBER05
NUMBER99 EQU   *
         L     R13,4(R13)              PICKUP CALLERS SAVEAREA
         RETURN (14,12),RC=0           RETURN TO CALLER
LINECNT  DC    PL6'0'
INCR     DC    PL2'0'
NUMWRK   DS    0CL8                    WORKFIELD FOR LINE
NUMFIRST DS    CL6
NUMLAST  DC    CL2'00'                 ALWAYS ZERO
         LTORG ,
         TITLE 'SCAN THE SUBCOMMANDS'
*---------------------------------------------------------------------*
*                                                                     *
*        This routine will investigate the entered subcommand         *
*        The commans is placed in 'BUFFER', which addres is in reg.1  *
*        If the subcommand is found in reg 1 will be set an address   *
*        of the routine, which will execute the found sucommand       *
*        If the subcommand is not fount, reg 15 will be set to 0004.  *
*                                                                     *
*        The command will be set in a retrieve table. The last        *
*        given command will be the first entry. No duplicates will    *
*        be stored in this table.                                     *
*                                                                     *
*        If the command RETRIEVE is given, the first command will be  *
*        returned. Any subsequent RETRIEVE's will return the next     *
*        command. If a command is retrieved the address will be       *
*        Returned in reg.1                                            *
*                                                                     *
*        Returncodes:                                                 *
*        0000 - Command found or RETRIEVE cmd given                   *
*        0004 - Command not found                                     *
*        0008 - Command successfully retrieved                        *
*        0012 - Nothing to RETRIEVE                                   *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
CMDSCAN  BEGINRPF
         USING COMMAREA,R11            ADDRESSABILITY XPFCOMM
         LM    R10,R11,0(R1)           Pickup 'BUFFER' and commarea
         CLC   =C'RETRIEVE',0(R10)     Retrieve command given
         BNE   CMDSC10
CMDSC01  DS    0H
         L     R4,CRETRIEV             Pickup retrieve table
         L     R5,0(R4)                Number of commands stored
         LA    R4,4(R4)                Point to first entry
         CLC   LASTRTRV,=F'0'          No last command retrieved?
         BE    CMDSC02                 Yes: start from beginning
         L     R4,LASTRTRV             Point to last retrieved cmd
         L     R5,LASTRT#              Remaining number of cmds to scan
         LTR   R5,R5                   End of command table ?
         BNZ   CMDSC04                 No: pickup
         XC    LASTRTRV(8),LASTRTRV    Wrap around in retrieve table
         B     CMDSC01                 Look from beginning
CMDSC02  DS    0H
         LTR   R5,R5                   No commands in table?
         BNZ   CMDSC04                 No: continue
         LA    R15,12                  Yes: nothing to retrieve
         B     CMDSC99                 Return
CMDSC04  DS    0H
         LR    R1,R4                   A(Retrieved command)
         LA    R4,48(R4)               Next entry in buffer
         BCTR  R5,0                    Decrease # remaining entries
         STM   R4,R5,LASTRTRV          Save the pointer + counter
         LA    R15,8                   RC = 0008
         B     CMDSC99                 Return.
CMDSC10  DS    0H
         XC    LASTRTRV(8),LASTRTRV    Reset offset last retrieved cmd
         L     R4,CRETRIEV             Point to retrieve table
         L     R5,0(R4)                First entry: # stored commands
         LTR   R5,R5                   No commands in table?
         BNZ   CMDSC12                 No: look if cmd in table
         LA    R5,1                    This is first cmd
         ST    R5,0(R4)                Set counter in table
         MVC   4(48,R4),0(R10)         and move this cmd
         B     CMDSC48                 Investigate command
CMDSC12  DS    0H
         LA    R4,4(R4)                Point to 1st command in table
         LR    R6,R4                   Copy into Reg.6
CMDSC14  DS    0H
         CLC   0(48,R6),0(R10)         Command found in table ?
         BE    CMDSC20                 Yes: command will be 1st entry
         LA    R6,48(R6)               Point to next entry in table
         BCT   R5,CMDSC14              Loop
*---------------------------------------------------------------------*
*        Command not in retrieve table, so add this command in
*        this table. The last entered command is the 1st entry
*---------------------------------------------------------------------*
         L     R5,=A(4704)             Length of table - 2 entries
         LA    R4,0(R5,R4)             Point to 2nd last entry
         LA    R6,48(R4)               Point to last entry
         LA    R7,48                   Length of entry
         LA    R5,99                   Max number cmds - 1
CMDSC16  DS    0H
         MVC   0(48,R6),0(R4)          Shift command
         SR    R6,R7                   To previous entry
         SR    R4,R7                   To previous entry
         BCT   R5,CMDSC16              Loop until all commands shifted
         L     R4,CRETRIEV             Point back to table
         MVC   4(48,R4),0(R10)         This cmd is now first entry
         L     R5,0(R4)                # commands in table
         C     R5,=F'100'              Already 100 commands ?
         BNL   CMDSC48                 Yes: do not increase
         LA    R5,1(R5)                Increase # commands
         ST    R5,0(R4)                and save
         B     CMDSC48                 Examine command
CMDSC20  DS    0H
*---------------------------------------------------------------------*
*
*        Command found in retrieve table, make this found command
*        the first entry in the table
*        and shift the rest of the commands to the found entry.
*        At this place R6 points to the found command and R4
*        points to the first entry in the retrieve table
*
*-------------------------------------- (C)-2005 Skybird Systems -----*
         CR    R4,R6                   Already the first command ?
         BE    CMDSC48                 Yes: do nothing go investigate
         LA    R7,48                   Entry length
         LR    R5,R6                   Duplicate R6
         SR    R5,R7                   Point to command before fnd cmd
CMDSC22  DS    0H
         CR    R5,R4                   Beginning of table reached
         BL    CMDSC24                 Yes: all commands shifted
         MVC   0(48,R6),0(R5)          Shift commands 1 entry down
         SR    R5,R7                   until all commands from
         SR    R6,R7                   found command until top
         B     CMDSC22                 are done.
CMDSC24  DS    0H
         MVC   0(48,R4),0(R10)         Found command is 1st entry now
*---------------------------------------------------------------------*
*        Examine and process command
*---------------------------------------------------------------------*
CMDSC48  DS    0H
         LA    R3,SUBCTBLE             LOAD THE SUBCOMMAND TABLE
         LA    R4,CMDS#                NUMBER OF POSSIBLE SUBCMDS
CMDSC50  L     R5,0(R3)                Actual Length of the subcmds
         BCTR  R5,0                    MINUS 1 FOR EXECUTE
         EX    R5,CMDCOMP              COMPARE IN BUFFER
         BNE   CMDSC52                 NO: NEXT ENTRY IN TABLE
         L     R1,12(R3)               LOAD ROUTINE ADDRESS OF SUBCMD
         LA    R15,0                   ZERO RETURN CODE.
         B     CMDSC99                 RETURN TO CALLER
CMDSC52  LA    R3,16(R3)               NEXT ENTRY IN SUBCOMMAND TABLE
         BCT   R4,CMDSC50              LOOP UNTIL ALL DONE OR CMD FOUND
         LA    R15,4                   INVALID OR UNKNOWN SUBCOMMAND
CMDSC99  L     R13,4(R13)              PICKUP CALLERS SAVEAREA
         L     R14,12(R13)             RESTORE REG 15
         LM    R2,R12,28(R13)          RELOAD REG 2-12
         BR    R14                     RETURN TO USER
CMDCOMP  CLC   4(0,R3),0(R10)          COMPARE SUBCMD *** EX ONLY ***
*---------------------------------------------------------------------*
*                                                                     *
*        THIS TABLE IS BUILT AS FOLLOWS:                              *
*        EACH ENTRY CONTAINS:                                         *
*        1.    THE ACTUAL LENGTH OF THE COMMAND                       *
*        2.    THE COMMAND (8 BYTES WITH TRAILING BLANKS)             *
*        3.    THE ADDRESS OF THE ROUTINE, THAT EXECUTES THE COMMAND  *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
SUBCTBLE DS    0F
         DC    A(2),CL8'I',A(VIEWINP)
         DC    A(2),CL8'R',A(VIEWINP)
         DC    A(2),CL8'F',A(VIEWFIN2)                             @rpd
         DC    A(4),CL8'FIND',A(VIEWFIND)                          @rpd
         DC    A(2),CL8'O',A(VIEWFIN2)                             @rpd
         DC    A(2),CL8'L',A(VIEWLINE)
         DC    A(3),CL8'SCF',A(VIEWFORW)
         DC    A(3),CL8'CUT',A(VIEWCUT)                            @rpb
         DC    A(5),CL8'PASTE',A(VIEWPST)                          @rpb
         DC    A(3),CL8'SCB',A(VIEWBACK)
         DC    A(3),CL8'DEL',A(VIEWDEL)
         DC    A(4),CL8'$DOC',A(VIEWDOC)
         DC    A(5),CL8'SCOPE',A(VIEWSCOP)
         DC    A(3),CL8'TOP',A(VIEWTOP)
         DC    A(2),CL8'T',A(VIEWTOP)
         DC    A(6),CL8'BOTTOM',A(VIEWBOT)
         DC    A(2),CL8'B',A(VIEWBOT)
         DC    A(3),CL8'HAR',A(VIEWHAR)
         DC    A(3),CL8'JCL',A(VIEWJCL)
         DC    A(2),CL8'C',A(VIEWCHNG)
         DC    A(4),CL8'SAVE',A(VIEWSAVE)
         DC    A(6),CL8'OSSAVE',A(VIEWSAVP)
         DC    A(3),CL8'OUT',A(VIEWOUT)
         DC    A(4),CL8'HELP',A(VIEWHELP)
         DC    A(4),CL8'REN',A(VIEWREN)
         DC    A(5),CL8'RENUM',A(VIEWREN)
         DC    A(8),CL8'RENUMBER',A(VIEWREN)
         DC    A(4),CL8'UNN',A(VIEWUNN)
         DC    A(5),CL8'UNNUM',A(VIEWUNN)
         DC    A(5),CL8'NONUM',A(VIEWNON)
         DC    A(3),CL8'NUM',A(VIEWREN)
         DC    A(3),CL8'PFK',A(VIEWPFK)
         DC    A(3),CL8'CO',A(VIEWCO)
         DC    A(4),CL8'COPY',A(VIEWCOPY)
         DC    A(3),CL8'MO',A(VIEWMO)
         DC    A(3),CL8'SUB',A(VIEWSUB)
         DC    A(5),CL8'NULLS',A(VIEWNULL)
         DC    A(7),CL8'NONULLS',A(VIEWNNU)
         DC    A(4),CL8'CAPS',A(VIEWCAPS)
         DC    A(4),CL8'ASIS',A(VIEWASIS)
         DC    A(4),CL8'LEFT',A(VIEWLEFT)
         DC    A(3),CL8'SCL',A(VIEWLEFT)
         DC    A(5),CL8'RIGHT',A(VIEWRIGH)
         DC    A(3),CL8'SCR',A(VIEWRIGH)
         DC    A(3),CL8'COB',A(VIEWCOB)
         DC    A(5),CL8'NOCOB',A(VIEWNCOB)
         DC    A(4),CL8'FILL',A(VIEWFILL)
         DC    A(3),CL8'TSO',A(VIEWTSO)
         DC    A(2),CL8'LC',A(VIEWLC)
         DC    A(2),CL8'UC',A(VIEWUC)
         DC    A(5),CL8'RESET',A(VIEWRES)
         DC    A(4),CL8'SORT',A(VIEWSRT)
         DC    A(3),CL8'END',A(VIEW99)
         DC    A(3),CL8'CAN',A(RETURN)
         DC    A(6),CL8'CANCEL',A(RETURN)
         DC    A(6),CL8'RETURN',A(VIEWRET)
         DC    A(1),CL8'=',A(VIEW#)                                @RP1
         DC    A(1),CL8' ',A(VIEW)
         DC    A(1),X'0040404040404040',A(VIEW)
         DC    A(1),CL8'?',A(PUT1)
CMDS#    EQU   (*-SUBCTBLE)/16
LASTRTRV DC    F'0'
LASTRT#  DC    F'0'
         LTORG ,
         TITLE 'SEARCH ROUTINE TO FIND LINENUMBERS'
*---------------------------------------------------------------------*
*                                                                     *
*        ROUTINE:      SRCHLINE.                                      *
*        FUNCTION:     SEARCH A LINENUMBER IN THE WORKSPACE USING     *
*                      THE BINARY SEARCH TECHNIQUE.                   *
*                      THE LINE NUMBERS ARE USUAL THE OPERANDS IN     *
*                      THE COMMANDS.                                  *
*        INPUT:        REG. 1. CONTAINS A(6 BYTE EBCDIC LINENUMBER)   *
*        OUTPUT:       REG. 1. A(ADDRESS OF LINE)                     *
*        RETURNCODES:                                                 *
*                      00 SUCCESSFUL, REG 1. IS LOADED                *
*                      04 LINENUMBER NOT FOUND                        *
*                                                                     *
*------------------------------------------ (C)-2005 SKYBIRD SYSTEMS -*
         DROP
SRCHLINE BEGINRPF  ,                   SEARCH LINE NUMBERS
         USING COMMAREA,R11            ADDRESSABILITY XPFCOMM
         LR    R3,R1                   SAVE A(LINENUMBER)
         L     R5,FIRSTREC             FIRST RECORD IN WORKSPACE
         L     R7,LASTREC              LAST RECORD IN WORKSPACE
         SR    R7,R5                   LENGTH OF WS -/- 1 LINE
         XR    R6,R6                   CLEAR EVEN REGISTER
         D     R6,SRCHLEN              # LINES -/- 1, UPPER LIMIT
         XR    R5,R5                   LOWER LIMIT
SRCH02   EQU   *
         CR    R5,R7                   LOWER > UPPER LIMIT ?
         BH    SRCH51                  YES: LINE NUMBER NOT FOUND
         LR    R9,R5                   LOWER LIMIT
         AR    R9,R7                   +/+ UPPER LIMIT
         SRL   R9,1                    TAKE MIDDLE
         LR    R4,R9                   AND SAVE
         M     R8,SRCHLEN              */* RECORD LENGTH
         A     R9,GETMSTRT             +/+ START ADDRESS WORKSPACE
         CLC   0(6,R3),OFFSETN2(R9)    COMPARE LINENUMBERS
         BE    SRCH96                  EQ: LINE FOUND
         BH    SRCH04                  HIGH: RESET LOWER LIMIT
         LR    R7,R4                   LOW: RESET UPPER LIMIT
         BCTR  R7,0                    MINUS 1
         B     SRCH02                  REPEAT TEST
SRCH04   EQU   *
         LR    R5,R4                   RESET LOWER LIMIT
         LA    R5,1(R5)                PLUS 1
         B     SRCH02                  REPEAT TEST
SRCH51   EQU   *
         LA    R15,4                   RC= 0004, LINE NOT FOUND
         B     SRCH99                  RETURN.
SRCH96   EQU   *
         LR    R1,R9                   A(LINE) IN REG.1
         XR    R15,R15                 RC= 0000, LINE FOUND
SRCH99   EQU   *
         L     R13,4(R13)              LOAD CALLERS SAVE AREA
         L     R14,12(R13)             RESTORE R14
         LM    R2,R12,28(R13)          RESTORE REG.2-12
         BR    R14                     RETURN
*
SRCHLEN  DC    A(NEXTENT)              RECORD LENGTH
         LTORG ,
         TITLE 'Process CUT and PASTE' subcommands'
*---------------------------------------------------------------------*
*                                                                     *
*        ROUTINE:      RPFCTPST.                                      *
*        FUNCTION:     Process the CUT and PASTE commands             *
*                      If the CUT command is given, write the lines   *
*                      which numbers are in BUFFER to the CLIPBRD     *
*                      file                                           *
*                      The address of the BUFFER is in reg.1 in case  *
*                      of a CUT command. The BUFFER contains a CO  @rph
*                      cmd, otherwise Reg.1 contains an address of @rph
*                      a 6 byte EBCDIC line number.                @rph
*                      After successful CUT the number of records are *
*                      in reg.1 and in the first record on the        *
*                      clipboard file (RPFCTPST)                      *
*                                                                     *
*                      In case of the PASTE command the clipboard     *
*                      file will be read and the records will be      *
*                      inserted after the line number pointed to by   *
*                      reg.1.                                         *
*                                                                     *
*        Returncodes   0000 -  Cut/Paste successful                   *
*                      0004 -  some error, error msg top right corner *
*                                                                     *
*-------------------------------------- (C)-2008 Skybird Systems -----*
         DROP
RPFCTPST BEGINRPF
         USING COMMAREA,R11            ADDRESSABILITY XPFCOMM
         LR    R3,R1                   Save parameter
         CLC   0(2,R3),=C'CO'          'Cut' command ?
         BNE   CTPST900                NO: process PASTE cmd
         TM    INFCODE,$NOTMP          RPFCTPST allocated?
         BO    CTPST994                No: error
         L     R4,FIRSTREC             Point to first record
         USING WORKSPCE,R4             Adress dsect
         XR    R5,R5                   Clear record counter
         OPEN  (CLIPBRD,(OUTPUT))      Open clipboard file
         ST    R5,CTREC                Save counter
*        LA    R1,CTPST004
*        BSM   0,R1                    Goto amode 24
CTPST004 PUT   CLIPBRD,CTREC           And write
*        L     R1,=A(CTPST006+X'80000000')
*        BSM   0,R1                    Goto amode 31
CTPST006 DS    0H
         CLC   3(6,R3),WORKSLIN        First line reached?
         BE    CTPST010                Yes: write lines on clipbrd
         LA    R4,NEXTENT(R4)          Point to next record
         B     CTPST006                Branch (record always present)
CTPST010 DS    0H
         CLC   10(6,R3),WORKSLIN       Line-2 reached ?
         BL    CTPST020                Yes: branch
         MVC   CTREC(NEXTENT),WORKSLIN Move record
*        LA    R1,CTPST012
*        BSM   0,R1                    Goto amode 24
CTPST012 PUT   CLIPBRD,CTREC           And write
*        L     R1,=A(CTPST014+X'80000000')
*        BSM   0,R1                    Goto amode 31
CTPST014 DS    0H                      All records written
         LA    R4,NEXTENT(R4)          Point to next record
         LA    R5,1(R5)                Count record
         C     R4,LASTREC              Past last record ?
         BH    CTPST020                Yes: all done
         B     CTPST010                And branch
CTPST020 DS    0H                      All records written
         CLOSE CLIPBRD                 Close clipboard file
         OPEN  (CLIPBRD2,(UPDAT))      Open clipboard to ....
*        LA    R1,CTPST022
*        BSM   0,R1                    Goto amode 24
CTPST022 GET   CLIPBRD2                Update first record with ...
         ST    R5,0(R1)                Number of cut records
         PUTX  CLIPBRD2                And write back
*        L     R1,=A(CTPST024+X'80000000')
*        BSM   0,R1                    Goto amode 31
CTPST024 DS    0H                      All records written
         CLOSE CLIPBRD2
         XC    0(48,R3),0(R3)          Clear command buffer
         L     R6,=V(MSG5)             Pickup message buffer
         MVC   0(L'MSG4TXT,R6),MSG4TXT Move message
         MVC   4(6,R6),=X'602020202120' Pattern
         CVD   R5,DWB                  # records cut
         ED    4(6,R6),DWB+5           Edit result
         LR    R1,R5                   Number of records in reg.1
         XR    R15,R15                 RC = 0000
         OI    SWCT,128                Set flag
         B     CTPST999                Return
*---------------------------------------------------------------------*
*                                                                     *
*        P A S T E     COMMAND                                        *
*              Shift data first and add contents of clipboard file    *
*              after the line pointed to by reg.1 (copied in reg.3)   *
*                                                                     *
*-------------------------------------- (C)-2005 Skybird Systems -----*
CTPST900 DS    0H                      PASTE command
         TM    SWCT,128                a CUT command before paste?
         BNO   CTPST990                No: error
         OPEN  CLIPBRD                 Open clipbrd
         GET   CLIPBRD,CTREC           Read first record
         L     R9,CTREC                Pickup # records in 1st rec
         ST    R9,#RECS                Save number of records
         XR    R8,R8                   Clear even reg
         M     R8,RL                   # record length
         L     R4,LASTREC              point to last record
         LA    R4,0(R4,R9)             Add number of bytes inserted
         C     R4,GETMEND              Larger than workspace?
         BH    CTPST992                Yes: error
         L     R4,FIRSTREC             Point to first record
         CLC   0(6,R3),=C'000000'      Paste before first line?
         BE    CTPST920                Yes: branch
         L     R4,LASTREC              Point to last record
         CLC   WORKSLIN,0(R3)          Pasted after last record?
         BE    CTPST940                Yes: data need not to be shifted
         L     R4,FIRSTREC             First record in workspace
CTPST904 DS    0H
         CLC   WORKSLIN,0(R3)          Does linenumbers match?
         BE    CTPST918                Yes: Branch
         LA    R4,NEXTENT(R4)          Next line in workspace
         B     CTPST904                Loop until found
CTPST918 DS    0H
         LA    R4,NEXTENT(R4)          Point after record to be pasted
CTPST920 DS    0H
         L     R6,LASTREC              Last record pointer
         LA    R7,0(R6,R9)             Add lines to paste
CTPST922 DS    0H
         CR    R6,R4                   Beyond rec. to be pasted after?
         BL    CTPST942                Branch
         MVC   0(NEXTENT,R7),0(R6)     Shift records
         SL    R7,RL
         SL    R6,RL
         B     CTPST922                Branch
CTPST940 DS    0H
         LA    R4,NEXTENT(R4)          Next line in workspace
CTPST942 DS    0H
         L     R6,LASTREC              Last record pointer
         LA    R6,0(R6,R9)             Point to new last record
         ST    R6,LASTREC              And save
CTPST944 DS    0H
*        LA    R1,CTPST945
*        BSM   0,R1                    Goto amode 24
CTPST945 GET   CLIPBRD,CTREC           Read clipboard record
*        L     R1,=A(CTPST946+X'80000000')
*        BSM   0,R1                    Goto amode 31
CTPST946 DS    0H
         MVC   WORKSLIN(NEXTENT),CTREC Move to workspace
         LA    R4,NEXTENT(R4)          Next record in workspce
         B     CTPST944                Read next record
CTPST950 DS    0H
*        L     R1,=A(CTPST952+X'80000000')
*        BSM   0,R1                    Goto amode 31
CTPST952 DS    0H
         CLOSE CLIPBRD                 Close file
         L     R15,=V(NUMBER)          RENUMBER WORKSPACE
         BALR  R14,R15                 EXEC THIS ROUTINE
         OI    INFCODE4,$CHANGED       Mark data changed
         L     R5,#RECS                Number of pasted records
         L     R6,=V(MSG5)             Pickup message buffer
         MVC   0(L'MSG5TXT,R6),MSG5TXT Move message
         MVC   1(6,R6),=X'602020202120' Pattern
         CVD   R5,DWB                  # records cut
         ED    1(6,R6),DWB+5           Edit result
         XR    R15,R15                 RC = 0000
         B     CTPST999                Return
CTPST990 DS    0H
         L     R6,=V(MSG5)             point to message buffer
         MVC   0(L'ERAATXT,R6),ERAATXT Move error message
         LA    R15,4                   Return code
         B     CTPST999                Return
CTPST992 DS    0H
         L     R6,=V(MSG5)             point to message buffer
         MVC   0(L'ERABTXT,R6),ERABTXT Move error message
         CLOSE CLIPBRD
         LA    R15,4                   Return code
         B     CTPST999                Return
CTPST994 DS    0H
         L     R6,=V(MSG5)             point to message buffer
         MVC   0(L'ERACTXT,R6),ERACTXT Move error message
         LA    R15,4                   Return code
         B     CTPST999                Return
CTPST999 DS    0H
         L     R13,4(R13)              Load callers save area
         L     R14,12(R13)             Restore R14
         LM    R2,R12,28(R13)          Restore reg.2-12
         BR    R14                     Return
CLIPBRD  DCB   DDNAME=RPFCTPST,MACRF=(GM,PM),LRECL=88,RECFM=FB,        X
               BLKSIZE=6160,EODAD=CTPST950,DSORG=PS
CLIPBRD2 DCB   DDNAME=RPFCTPST,MACRF=(GL,PL),LRECL=88,RECFM=FB,        X
               BLKSIZE=6160,DSORG=PS
SWCT     DC    X'00'                   If X'00' no previous cut cmd
DWB      DS    D
RL       DC    A(NEXTENT)
#RECS    DS    F
CTREC    DS    22F                     88 bytes
ERAATXT  DC    CL22'--Use CUT before PASTE'
ERABTXT  DC    CL22'PASTE buffer too large'
ERACTXT  DC    CL22'-----No clipboard file'
MSG4TXT  DC    CL22'----xxxxxx records cut'  +4
MSG5TXT  DC    CL22'-xxxxxx records pasted'  +1
         LTORG ,
SCRSBA   CSECT
*---------------------------------------------------------------------*
*                                                                     *
*        These SBA's are the start SBA of linenumber and the SBA of   *
*        data immediate after the linenumber.                         *
*        After the TGET of the unedited buffer,                       *
*        The appropiate SBA (Row x, Col 8), will immediately appear   *
*        after the linenumber, if the MDT is on.                      *
*        If the SBA is not after the linenumber, the line is not      *
*        changed, because the MDT is off.                             *
*        Example: The SBA of (e.g.) line-4 is 11C761. This SBA will   *
*        appear in the unedited buffer (TGET ASIS), because the MDT   *
*        of the linenumber is always on. If 11C7E8 appears after      *
*        the linenumber, the corresponding line has been changed.     *
*                                                                     *
*-------------------------------------- (C)-2005 Skybird Systems -----*
         DC    X'11C3F111C3F8'         R04,C01/R04,C08
         DC    X'11C5C111C5C8'
         DC    X'11C6D111C6D8'         thru...
         DC    X'11C76111C7E8'         (see example in comment box)
         DC    X'11C8F111C8F8'
         DC    X'114AC1114AC8'
         DC    X'114BD1114BD8'
         DC    X'114C61114CE8'
         DC    X'114DF1114DF8'
         DC    X'114FC1114FC8'
         DC    X'1150D11150D8'
         DC    X'11D16111D1E8'
         DC    X'11D2F111D2F8'
         DC    X'11D4C111D4C8'
         DC    X'11D5D111D5D8'
         DC    X'11D66111D6E8'
         DC    X'11D7F111D7F8'
         DC    X'11D9C111D9C8'
         DC    X'115AD1115AD8'
         DC    X'115B61115BE8'
         DC    X'115CF1115CF8'
         DC    X'115EC1115EC8'
         DC    X'115FD1115FD8'
         DC    X'1160611160E8'
         DC    X'1161F11161F8'
         DC    X'11E3C111E3C8'
         DC    X'11E4D111E4D8'
         DC    X'11E56111E5E8'
         DC    X'11E6F111E6F8'
         DC    X'11E8C111E8C8'
         DC    X'11E9D111E9D8'
         DC    X'116A61116AE8'
         DC    X'116BF1116BF8'
         DC    X'116DC1116DC8'
         DC    X'116ED1116ED8'
         DC    X'116F61116FE8'
         DC    X'11F0F111F0F8'
         DC    X'11F2C111F2C8'
         DC    X'11F3D111F3D8'
         DC    X'11F46111F4E8'         R43,C01/R43,C08
         TITLE 'RPFCOMM DSECT'
COMMAREA RPFCOMM
OFFSETN1 EQU   (NEXTENT-8)
OFFSETN2 EQU   0
LINES21  EQU   (21*NEXTENT)
LINES29  EQU   (29*NEXTENT)
LINES40  EQU   (40*NEXTENT)
         END
