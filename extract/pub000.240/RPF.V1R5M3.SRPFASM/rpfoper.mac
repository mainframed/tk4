RPFOPER  TITLE 'DISPLAY RUNNING TASKS AND UCBS IN THE SYSTEM'
*---------------------------------------------------------------------*
*                                                                     *
*         MODULE:       RPFOPER.                                      *
*                                                                     *
*         FUNCTION:     DISPLAY ACTIVE TASKS IN THE SYSTEM            *
*                       YOU CAN DISPLAY ALL THE TASKS,                *
*                       THE TIME SHARING USERS,                       *
*                       THE STARTABLE TASKS,                          *
*                       THE JOBS AND                                  *
*                       THE DEVICES AND VOLUME SERIALS AND            *
*                       YOU CAN DISPLAY A TASK BY ASID                *
*                                                                     *
*         NOTE:         INCLUDE SYS1.AMODGEN IN SYSLIB OF ASSEMBLY    *
*                                                                     *
*-------------------------------------------(C)-2004 SKYBIRD SYSTEMS--*
         SPACE 2
RPFOPER  CSECT
         SAVE  (14,12),,*
         USING RPFOPER,R15
         LA    R11,SAVE
         ST    R13,SAVE+4
         ST    R11,8(0,R13)
         LR    R13,R11
         B     START
         DS    0F
SAVE     DC    18F'-1'
         DC    CL8'&SYSDATE',C' ',CL8'&SYSTIME'
         TITLE 'INITIALIZATION ROUTINE'
START    DS    0H
         DROP  R15
         USING SAVE,R13,R12
         LA    R12,2048(R13)
         LA    R12,2048(R12)
         L     R11,0(R1)
         USING COMMAREA,R11            RPF COMMON AREA
         STLINENO LINE=1               CLEAR SCREEN, RESET CURSOR
         STFSMODE OFF                  TURN OFF FULLSCREEN MODE
         GTSIZE ,                      PICKUP UP # ROWS OF THE SCREEN
         LR    R3,R0                   SAVE # ROWS
         CH    R3,=H'43'               MODEL 4 SCREEN ?
         BE    WRALT                   YES: WRITE ALTERNATE
         CH    R3,=H'32'               MODEL 3 SCREEN ?
         BE    WRALT                   YES: WRITE ALTERNATE
         MVC   SCR9TXT(2),=X'27F5'     NORMAL WRITE
         B     MAIN00                  PROCEED
WRALT    EQU   *
         MVC   SCR9TXT(2),=X'277E'     WRITE ALTERNATE WCC
MAIN00   TPUT  MSG1TXT,MSG1LEN
         TPUT  MSG2TXT,MSG2LEN
MAIN01   EQU   *
GET1     TGET  BUFFER,L'BUFFER
         CLI   BUFFER,X'6E'            RESHOW CODE?
         BE    GET1                    IF YES, GO GET REPLY AGAIN.
         OC    BUFFER,BLANKS
         CLC   BUFFER(3),=C'END'
         BE    RETURN
         CLC   BUFFER(6),=C'D VOL='    DISPLAY UCB FROM VOLSER ?
         BE    CHECK01                 YES: GO CHECK IT
         CLC   BUFFER(6),=C'D UCB='    DISPLAY UCB FROM UNITADDRESS ?
         BE    CHECK02                 YES: GO CHECK IT
         CLC   BUFFER(4),=C'HELP'      HELP NEEDED?
         BE    HELP00
         CLC   BUFFER(2),=C'K '        CLEAR SCREEN ?
         BNE   MAIN02
         TPUT  SCR9TXT,SCR9LEN,FULLSCR
         TPUT  MSG1TXT,MSG1LEN
         TPUT  MSG2TXT,MSG2LEN
         B     MAIN01
HELP00   TPUT  MSG7TXT,MSG7LEN         HELP TEXT
         B     MAIN01
CHECK01  DS    0H                      CHECK VOLUME SERIAL
         MVC   VOLSER(6),BUFFER+6      MOVE VOLUME SERIAL
         MVC   DEVADR,BLANKS           CLEAR DEV ADDRES
         B     FINDUCB                 GO TO FIND UCB ROUTINE
CHECK02  DS    0H                      CHECK DEV ADDRESS
         MVC   DEVADR(3),BUFFER+6      MOVE DEV ADDRESS
         MVC   VOLSER(6),BLANKS        CLEAR VOLSER FIELD
         B     FINDUCB                 GO TO FIND UCB ROUTINE
MAIN02   L     R3,16                   -> CVT
         L     R4,556(R3)              -> ASVT
         L     R6,516(R4)              MAXIMUM OF ADDRESS SPACES
         MVI   SW1,X'00'
MAIN03   BAL   R9,ASCB                 GET ASCB INFO.
         CLI   SW2,X'FF'               ASCB VALID ?
         BE    MAIN11                  NO: NEXT ASCB
         CLC   BUFFER(5),=C'J=ALL'     ALL TASKS EXCEPT INITIATORS ?
         BNE   MAIN04                  BRANCH IF NOT.
         CLC   JOBID(8),=C'INIT    '   IS THIS ASID FOR AN INITIATOR?
         BNE   MAIN09                  NO: PROCEED
         B     MAIN11                  SKIP INITIATOR ON DISPLAY
MAIN04   CLC   BUFFER(2),=C'J='
         BNE   MAIN05
         CLC   BUFFER+2(8),JOBID
         BNE   MAIN11
         B     MAIN09
MAIN05   CLC   BUFFER(5),=C'A=ALL'
         BE    MAIN09
         CLC   BUFFER(5),=C'A=STC'
         BNE   MAIN05A
         TM    SW3,X'01'               NO-INITIATOR ? (---> STC)
         BNO   MAIN11                  NO: NEXT ASCB
         TM    SW3,X'04'               TSO USER?
         BO    MAIN11
         B     MAIN09                  YES: PRINT
MAIN05A  CLC   BUFFER(5),=C'A=TSU'
         BNE   MAIN06
         TM    SW3,X'04'               TSO USER ?     (---> TSU)
         BNO   MAIN11                  NO: NEXT ASCB
         B     MAIN09                  YES: PRINT
MAIN06   CLC   BUFFER(5),=C'A=JOB'
         BNE   MAIN07
         TM    SW3,X'02'               INITIATOR ? (---> JOB)
         BNO   MAIN11                  NO: NEXT ASCB
         B     MAIN09                  YES: PRINT
MAIN07   CLC   BUFFER(2),=C'A='        ASKS FOR AN ASIS WITH NUMBER?
         BNE   MAIN08                  IF NOT, GO ISSUE ERROR MESSAGE.
*---------------------------------------------------------------------*
* ASID IS IN HEX, MAYBE WITH TRAILING BLANKS INSTEAD OF LEADING ZEROES.
* IF THERE ARE LESS THAN 4 CHARACTERS ENTERED, MAKE IT 4.             *
*---------------------------------------------------------------------*
CLI0001  CLI   BUFFER+5,C' '           TRAILING BLANK?
         BNE   NOMORE                  NO, NO MORE SHIFTING.
         MVC   WORK+1(3),BUFFER+2  FIRST 3 OF 4 BYTES, SO TRAILING NOT.
         MVI   WORK,C'0'               PLACE A LEADING ZERO IN FRONT.
         MVC   BUFFER+2(4),WORK        AND PUT IT BACK INTO BUFFER.
         B     CLI0001                 GO CHECK IF MORE SHIFTING NEEDED
NOMORE   CLC   BUFFER+2(4),ASID        IS THIS THE ASID WE NEED?
         BNE   MAIN11                  IF NOT, GO GET NEXT ASCB.
         B     MAIN09                  IF IT IS, GO DISPLAY IT.
MAIN08   TPUT  MSG5TXT,MSG5LEN         INVALID COMMAND ENTERED
         B     MAIN01
MAIN09   BAL   9,WRITE
         MVI   SW1,X'FF'
MAIN11   LA    4,4(4)
         BCT   6,MAIN03
         CLC   BUFFER+2(3),=C'ALL'
         BE    MAIN13
         CLI   SW1,X'FF'
         BE    MAIN13
         MVC   FUNCTION(10),BUFFER
         TPUT  MSG6TXT,MSG6LEN
MAIN13   B     MAIN01
         TITLE 'ASCB SEARCH ROUTINE'
ASCB     MVI   SW2,X'00'
         L     3,528(4)                -> ASCB OR ZERO.
         LTR   3,3                     IS ASCB FREE OR ASSIGNED?
         BM    ASCB03                  BRANCH IF FREE
         L     5,172(3)                -> JOBNAME FOR INITIATED PGMS
         MVI   SW3,X'02'               SET "JOB" BIT ON.
         LTR   5,5
         BNZ   ASCB01
         L     5,176(3)                -> JOBNAME FOR START/MOUNT/LOGON
         MVI   SW3,X'01'               SET "STC" BIT ON.
ASCB01   MVC   JOBID,0(5)
         MVC   BINWORK,36(3)           ASID
         SYCONVHX IN=BINWORK,OUT=ASID,L=2  MAKE ASID PRINTABLE
         MVI   ASID+4,C' '
         MVC   DPRTY(1),X'2B'(3)       DISPATCHING PRIORITY
         MVC   SWAPPED(1),X'66'(3)     ASCBRCTF
         TM    103(3),X'80'            NO TIMING ?
         BZ    ASCB02
         OI    SW3,X'80'               TURN ON TIMING BIT
ASCB02   TM    103(3),X'01'            ADDRESS SPACE NON-SWAPPABLE?
         BZ    ASCB05                  IF NOT,BRANCH.
         OI    SW3,X'40'               TURN ON NON SWAP BIT
         B     ASCB05
ASCB03   MVI   SW2,X'FF'
         B     ASCB05
ASCB05   CLC   61(3,3),=XL3'000000'    TSB POINTER FILLED IN?
         BE    ASCB05A                 NO, BRANCH AWAY
         OI    SW3,X'04'               SET TSO BIT ON.
ASCB05A  BR    9                       RETURN TO CALLER
         TITLE 'DISPLAY ON TERMINAL ROUTINE'
WRITE    CLI   ASID,C'N'
         BE    WRITE09
         SYCONVHX IN=BINWORK,OUT=ASID,L=2 MAKE IT PRINTABLE
         MVI   ASID+4,C' '
         TM    SW3,X'02'               INITIATOR ? (---> JOB)
         BZ    WRITE01
         MVC   STATUS,=C'JOB'
         B     WRITE05
WRITE01  TM    SW3,X'01'               NO-INITIATOR ? (--->STC)
         BZ    WRITE03
         MVC   STATUS,=C'STC'          DEFAULT IT'S A TSU
         TM    SW3,X'04'               TSO USER?
         BNO   BRW05                   IF NOT, BRANCH AROUND MVC
         MVC   STATUS,=C'TSU'          INDICATE A TSO USER.
BRW05    B     WRITE05
WRITE03  MVC   STATUS,=C'N/A'
WRITE05  TM    SW3,X'80'               NO TIMING ?
         BZ    WRITE07
         MVC   MSG1,=C'N-TIMING'
WRITE07  TM    SW3,X'40'               NON SWAP ?
         BZ    WRITE09
         MVC   MSG2,=C'N-SWAP'
WRITE09  DS    0H
         SYCONVHX IN=DPRTY,OUT=DOUBLE,L=1
         MVC   TXT3(2),DOUBLE
         TM    SWAPPED,X'04'
         BZ    NOTSWAPD
         MVC   SWPDOUT(12),=CL12'SWAPPED OUT'
         B     TPUTMSG3
NOTSWAPD MVC   SWPDOUT(12),=CL12' '
*
TPUTMSG3 DS    0H
         TPUT  MSG3TXT,MSG3LEN
         XC    JOBID,JOBID
         XC    ASID,ASID
         XC    BINWORK,BINWORK
         XC    STATUS,STATUS
         XC    MSG1,MSG1
         XC    MSG2,MSG2
         XC    SW3,SW3
         BR    R9
         TITLE 'RETURN TO CALLER'
RETURN   TPUT  MSG4TXT,MSG4LEN
         STFSMODE ON                   TURN FULLSCREEN MODE ON
         L     R13,SAVE+4
         RETURN (14,12),RC=0
         TITLE 'FIND UCB ROUTINE'
FINDUCB  EQU   *
         L     R3,CVTPTR               GET CVTADRESS
         USING CVT,R3                  GET ADDRESSABILITY OF CVT
         USING UCBBLK,R4               GET ADDRESSABILITY OF UCB
         XC    WORKAREA,WORKAREA
         L     R2,CVTILK2              POINT TO START OP LOOKUP TABLE
LOOKUP   EQU   *                       FIND UCB
         CLC   0(2,R2),=X'FFFF'        END OF LOOKUP TABLE ?
         BE    LOOKERR                 YES: END OF UCBS REACHED
         CLC   0(2,R2),=X'0000'        NULL ENTRY?
         BE    NEXTUCB                 GO TO NEXT ONE
         XR    R4,R4                   CLEAR REGISTER
         ICM   R4,3,0(R2)              # HALFWORDS IN R4
*        SLL   R4,1                    *2 BECAUSE LOOKUP=HALFWORDS
         CLC   VOLSER,BLANKS           VOLUME FILLED IN ?
         BE    DEVAD                   NO COMPARE WITH UCB ADDRESS
         CLC   SRTEVOLI,VOLSER         IS THIS THE VOLSER WE NEED?
         BE    B10                     BRANCH IF YES.
         B     NEXTUCB                 GO GET NEXT UCB.
DEVAD    CLC   UCBNAME,DEVADR          DEVICE NUMBER FOUND ?
         BE    B10                     BRANCH IF FOUND
NEXTUCB  DS    0H
         LA    2,2(2)                  NEXT ENTRY IN LOOKUP TABLE
         B     LOOKUP                  SEARCH FOR NEXT UCB
*
B10      EQU   *            HERE WE FORMAT THE OUTPUT FOR TPUT.
* THE RESULT LOOKS LIKE THIS:
*
* AAAAAA:    XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX    OFFLINE/ONLINE
*            XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX    DEV= DDD
* QQQQQQQQ   XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX    VOL= VVVVVV
*
*  WHERE THE FIELDS MEAN THE FOLLOWING:
*  AAAAAA IS THE STORAGE ADDRESS WHERE WE FOUND THIS UCB (IN HEX).
*     DDD IS THE DEVICE ADDRESS IN EBCDIC FROM THE UCB.
*  VVVVVV IS THE VOLUME SERIAL NUMBER FROM THE UCB IN EBCDIC
*  XXXXXXXX IS THE HEXADECIMAL REPRESENTATION OF THE CONTENTS OF
*           THE UCB.
* QQQQQQQQ  IS THE DEVICE TYPE OF THIS UCB.
*
         MVC   UCB2TXT+60(3),UCBNAME   DEVADRESS TO BE DISPLAYED
         MVC   UCB3TXT+60(6),UCBVOLI   VOLSER TO BUFFER
         TR    UCB3TXT+60(6),VALIDCH   REMOVE UNPRINTABLE CHARACTERS
         MVC   UCB2TXT+55(4),=C'DEV='
         MVC   UCB3TXT+55(4),=C'VOL='
         MVC   UCB1TXT+55(7),=CL7'OFFLINE' DEFAULT
         TM    UCBSTAT,UCBONLI         DEVICE ONLINE ?
         BNO   OFFL                    NO: OFFLINE
         MVC   UCB1TXT+55(7),=C'ONLINE '   DEVICE IS ONLINE
OFFL     DS    0H
         LA    R7,DEVTYPE
         L     R6,#DEVTYPS             THERE ARE '#DEVTYPS' DEVICETYPES
CLCDEVT  CLC   UCBTBYT3,0(R7)          DEVICE TYPE IN TABLE ?
         BE    MVCDEVT                 BRANCH IF YES.
         LA    R7,9(R7)                NEXT ENTRY IN DEVICE TYPE TABLE
         BCT   R6,CLCDEVT
MVCDEVT  MVC   UCB3TXT(8),1(R7)        MOVE DEVTYPE DESCR INTO
         ST    R4,WORK
         SYCONVHX IN=WORK,OUT=UCB1TXT,L=4
         MVI   UCB1TXT+9,C':'
         LR    R5,R4
         SYCONVHX IN=(5),OUT=UCB1TXT+13,L=4
         LA    R5,4(R5)                NEXT 4 BYTES IN UCB
         SYCONVHX IN=(5),OUT=UCB1TXT+22,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB1TXT+31,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB1TXT+40,L=4
         LA    R5,4(R5)                NEXT 4 BYTES IN UCB
         SYCONVHX IN=(5),OUT=UCB2TXT+13,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB2TXT+22,L=4
         LA    R5,4(R5)                NEXT 4 BYTES IN UCB
         SYCONVHX IN=(5),OUT=UCB2TXT+31,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB2TXT+40,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB3TXT+13,L=4
         LA    R5,4(R5)                NEXT 4 BYTES IN UCB
         SYCONVHX IN=(5),OUT=UCB3TXT+22,L=4
         LA    R5,4(R5)
         SYCONVHX IN=(5),OUT=UCB3TXT+31,L=4
         LA    R5,4(R5)                NEXT 4 BYTES IN UCB
         SYCONVHX IN=(5),OUT=UCB3TXT+40,L=4
         LA    R5,4(R5)
         TPUT  UCB1TXT,UCB1LEN         UCB SCREEN
         B     MAIN01                  GO GET NEXT COMMAND
LOOKERR  DS    0H                      ISSUE ERROR MESSAGE
         TPUT  UCB9TXT,UCB9LEN         UCB NOT FOUND
         B     MAIN01                  GO GET NEXT COMMAND
         DROP  R3,R4
         TITLE 'VARIABLES, CONSTANTS AND CONTROL BLOCKS'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
MSG1TXT  DC    CL79'RPF-OPER V1R5M2 - VERSION &SYSDATE, &SYSTIME (C)-20X
               04 SKYBIRD SYSTEMS'
MSG1LEN  EQU   *-MSG1TXT
MSG2TXT  DC    CL79'RPFOPER: ENTER FUNCTION, ''HELP'' OR ''END'''
MSG2LEN  EQU   *-MSG2TXT
MSG3TXT  DC    C'JOBID= '
JOBID    DC    CL8' '
         DC    C', ASID= '
ASID     DC    CL4' '
         DC    CL1' '
STATUS   DC    CL3' '
         DC    CL1' '
MSG1     DC    CL8' '
         DC    CL1' '
MSG2     DC    CL6' '
         DC    CL1' '
         DC    C'DPRTY: '
TXT3     DC    CL2' '
         DC    C' '
SWPDOUT  DC    CL12' '
MSG3LEN  EQU   *-MSG3TXT
MSG4TXT  DC    CL79'RPFOPER: ALL FUNCTIONS COMPLETED'
MSG4LEN  EQU   *-MSG4TXT
MSG5TXT  DC    CL79'RPFOPER: INVALID COMMAND ENTERED'
MSG5LEN  EQU   *-MSG5TXT
MSG6TXT  EQU   *
         DC    CL09'RPFOPER: '
FUNCTION DC    CL10' '
         DC    CL60' - NOT FOUND ON ASCB CHAIN'
MSG6LEN  EQU   *-MSG6TXT
MSG7TXT  DC    CL80'RPFOPER: AVAILABLE FUNCTIONS ARE:'
    DC    CL80'         J=JOBNAME    (OR J=ALL FOR ALL ACTIVE TASKS)'
    DC    CL80'         A=ASID       (FOR SPECIFIED ASID (IN HEX))  '
    DC    CL80'         A=JOB        (FOR ALL BATCH JOBS)           '
    DC    CL80'         A=STC        (FOR ALL STARTABLE TASKS)      '
    DC    CL80'         A=TSU        (FOR ALL TIME SHARING USERS)   '
    DC    CL80'         A=ALL        (FOR JOB + STC + TSU)          '
    DC    CL80'         D VOL=VVVVVV (DISPLAY UCB WITH VOL VVVVVV)'
    DC    CL80'         D UCB=DDD    (DISPLAY UCB WITH DEVADR DDD)'
    DC    CL80'         END          (TERMINATE THIS SESSION)     '
    DC    CL80'         HELP         (DISPLAY THIS SCREEN)          '
    DC    CL80'         K            (CLEAR SCREEN)                 '
MSG7LEN  EQU   *-MSG7TXT
SCR9TXT  DC    X'27F5C2115D7E1140401D4013'
SCR9LEN  EQU   *-SCR9TXT
WORKAREA DS    CL100                   WORKAREA FOR IOSVSUCB
ADDRUCB  DS    F
PARMLIST DS    0F                      PARMLIST FOR IOSVSUCB
PARMWA   DC    A(WORKAREA)
PARMDEVT DC    A(DEVTCODE)
PARMUCB  DC    A(ADDRUCB)
DEVTCODE DC    X'00'
DEVTYPE  DC    X'04',CL8'CHAR.RDR'
         DC    X'08',CL8'UNIT REC'
         DC    X'10',CL8'DISPLAY '
         DC    X'20',CL8'DASD'
         DC    X'40',CL8'COMM.DEV'
         DC    X'80',CL8'TAPE'
DEVLAST  DC    X'FF',CL8'UNKNOWN'       UNKNOWN, SHOULD BE THE LAST
#DEVTYPS DC    A((DEVLAST-DEVTYPE)/9)   # VALID DEVICE TYPE
FRAMES   DC    H'0'
DPRTY    DC    X'00'
SWAPPED  DC    X'00'
PTRN1    DC    X'402020202120'
PTRN2    DC    X'4020202020202120'
DOUBLE   DC    D'0'
BUFFER   DS    CL80
BINWORK  DS    CL2
         DC    X'00'
SW1      DC    XL1'00'
SW2      DC    XL1'00'
SW3      DC    XL1'00'
WORK     DC    F'0'                THE NAME SAYS IT ALL.
*
         SPACE 2
VALIDCH  DC    256C'.'            ------------------------------***
         ORG   VALIDCH+C'A'       * THIS IS A TRANSLATE TABLE TO  *
         DC    C'ABCDEFGHI'       * REMOVE INVALID CHARACTERS     *
         ORG   VALIDCH+C'J'       * FROM AN EBCDIC TEXT TO BE     *
         DC    C'JKLMNOPQR'       * DISPLAYED. DO NOT CHANGE THE  *
         ORG   VALIDCH+C'S'       * TABLE AND/OR THE SEQUENCE OF  *
         DC    C'STUVWXYZ'        * THE INSTRUCTIONS.             *
         ORG   VALIDCH+C'0'       *                               *
         DC    C'0123456789'      *                               *
         ORG   VALIDCH+256        ------------------------------***
         SPACE 2
VOLSER   DC    CL6' '              VOLUME SERIAL NUMBER
DEVADR   DC    CL3' '              DEVICE ADDRESS
SWUCB    DC    X'00'               ERROR SWITCH
UCB1TXT  DC    CL80' '
UCB2TXT  DC    CL80' '
UCB3TXT  DC    CL80' '
UCB4TXT  DC    CL80' '
UCB1LEN  EQU   *-UCB1TXT
UCB9TXT  DC    CL79'RPFOPER: UCB NOT FOUND'
UCB9LEN  EQU   *-UCB9TXT
         LTORG
         TITLE 'DSECTS'
         CVT   DSECT=YES,LIST=NO
UCBBLK   DSECT
         IEFUCBOB LIST=NO
COMMAREA RPFCOMM
         END
