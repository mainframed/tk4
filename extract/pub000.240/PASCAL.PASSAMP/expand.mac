  (*$P-,F-,D-,K-,Q+,I+,M-    *)
 PROGRAM EXPAND (INPUT,OUTPUT,QRR);
  (* THIS PROGRAM IS THE COMPLEMENT OF COMPRESS. COMPRESS
     COMPACTS A FILE BY ELIMINATING DUPLICATE CHARACTERS, AND
     EXPAND RESTORES IT TO ORIGINAL FORM. FOR SPECIFICATIONS OF
     THE COMPRESSED FILE SEE COMPRESS.
     EXPAND DOES HAVE TO LOOK OUT FOR CHECKSUM ERRORS AND MUST
     DISPLAY THEM ON OUTPUT.

     UPDATE RECORD:
                   04/27/79 COMMENT CORRECTIONS. CH


                                             CURT HILL
                                             225 NEBRASKA HALL
                                             UNIVERSITY OF NEBRASKA - LI
                                             LINCOLN, NEBRASKA
                                             68588
                                             (402) 472-3701


     THIS PROGRAM IS COPYRIGHT 1979, CURT HILL

     PERMISSION IS HEREBY GRANTED FOR ANY NONPROFIT USE OF ALL OR
     PARTS OF THIS PROGRAM, PROVIDED THIS NOTICE IS DISPLAYED.
     FURTHERMORE DISTRIBUTION AND IMPROVEMENT IS ENCOURAGED.
     I WOULD LIKE TO HEAR ABOUT AND/OR RECIEVE COPIES OF ANY
     IMPROVEMENTS THAT ARE WORTH MAKING TO THIS PROGRAM. CONTACT
     ME AT ABOVE ADDRESS OR SEE PASCAL NEWS FOR AN ADDRESS UPDATE.

               FREELY YOU HAVE RECIEVED, FREELY GIVE.
                                   *)


   VAR
     SPECIALCHAR1, SPECIALCHAR2 : CHAR;
     INCOUNT,              (* INPUT CHARACTERS *)
     OUTCOUNT,             (* OUTPUT LINES *)
     CHECKSUM : INTEGER;
     INCHAR : CHAR;
     TYPECODE : CHAR;
     ENDFILE  : BOOLEAN;

   PROCEDURE GETCHAR(VAR C : CHAR);
     (* GET A CHARACTER, HANDLE EOLN, INCREMENT INCOUNT *)

     BEGIN
       READ (INPUT,C);
       IF EOLN(INPUT) THEN READLN(INPUT);
       INCOUNT := INCOUNT + 1;
       END;     (* GETCHAR *)


   PROCEDURE PROCDUPE;
     (* WE HAVE RECIEVED SPECIAL CHARACTER 1 GENERATE A DUPLICATE *)
     VAR
       COUNT, LASTLINE : INTEGER;
       COUNTCHAR : CHAR;

     BEGIN     (* PROCDUPE *)
      GETCHAR (INCHAR);
      GETCHAR (COUNTCHAR);
      IF (ORD(COUNTCHAR) = 0) AND (INCHAR = SPECIALCHAR1)
         THEN ENDFILE := TRUE
         ELSE BEGIN
              FOR COUNT := 1 TO ORD(COUNTCHAR) DO
                  WRITE (QRR, INCHAR);
              CHECKSUM := CHECKSUM + ORD(INCHAR) + ORD(COUNTCHAR) +
                            ORD (SPECIALCHAR1);
              END;
      END;   (* PROCDUPE *)


   PROCEDURE PROCCHKSUM;
       (* PROCESS CHECK SUM CHARACTER *)
      VAR
        LASTLINE,
        COUNT : INTEGER;

      BEGIN
        OUTCOUNT := OUTCOUNT + 1;
        GETCHAR (INCHAR);
        COUNT :=  ORD(INCHAR);
        IF COUNT <> (CHECKSUM MOD 256)
           THEN WRITELN (OUTPUT,'  *** CHECK SUM ERROR ***',
                        '  IN LINE ',OUTCOUNT)
           ELSE;
        CHECKSUM := 0;
        END;       (* PROCCHKSUM *)



   BEGIN   (* EXPAND *)
     INCOUNT := 3;     (* INITIALIZE VARIABLES *)
     OUTCOUNT := 0;
     READ (INPUT, SPECIALCHAR1, SPECIALCHAR2, TYPECODE);
         (* OBTAIN SPECIAL CHARACTERS AND TYPE CODE *)
     CHECKSUM := ORD(SPECIALCHAR1) + ORD(SPECIALCHAR2) + ORD(TYPECODE);
     ENDFILE := FALSE;
     REWRITE (QRR);

     WHILE (NOT EOF(INPUT)) AND (NOT ENDFILE) DO
       BEGIN
       GETCHAR (INCHAR);
       IF INCHAR = SPECIALCHAR1
          THEN PROCDUPE
          ELSE IF INCHAR = SPECIALCHAR2
                  THEN PROCCHKSUM
                  ELSE BEGIN
                       CHECKSUM := CHECKSUM + ORD(INCHAR);
                       WRITE (QRR,INCHAR)
                       END;
       END;
       WRITELN (OUTPUT,' **** EXPAND ****');
       WRITELN (OUTPUT,' TOTAL INPUT CHARACTERS : ',INCOUNT:9);
       WRITELN (OUTPUT,' TOTAL OUTPUT LINES :     ',OUTCOUNT:9);
     END.  (* EXPAND *)
