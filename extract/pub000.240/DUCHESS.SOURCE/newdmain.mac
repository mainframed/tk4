         TITLE 'DMAIN -- MAIN PROGRAM AND COMMAND INTERPRETER'
*
* CONTAINS TUCC SPECIFIC SVC 252 AND 'TUCSTORE' MACRO
* TO RECOMPILE, THIS CODE MAY NEED TO BE MODIFIED OR DELETED
* IF FILE 'LOG' IS NOT ALLOCATED, THE CODE WILL NOT BE EXECUTED
*
DMAIN    CSECT
         ENTRY $EVAL
         ENTRY $CPLX
         ENTRY $#HASHES
         ENTRY $#HITS
         ENTRY $#STOPS
         ENTRY $#EVALS
         ENTRY ANT
         ENTRY ANTNG
         ENTRY ASYNCH
         ENTRY BOARDSW
         ENTRY CHKEOF
         ENTRY CMCLOCK
         ENTRY CLOCKCHK
         ENTRY CLOCKTIM
         ENTRY CMSTATS
         ENTRY COMMANDS
         ENTRY COMPLEX
         ENTRY CPLXSET
         ENTRY FCOUNT
         ENTRY NEEDNUM
         ENTRY NOSTIMER
         ENTRY PLBLACK
         ENTRY PLBOTH
         ENTRY PLNONE
         ENTRY PLWHITE
         ENTRY PREDSW
         ENTRY PVARTBL
         ENTRY STATSLVL
         ENTRY SWITCH
         ENTRY SWSET
         ENTRY TIMAVG
         ENTRY TIMELEFT
         ENTRY TIMEOFF
         ENTRY TIMESW
         ENTRY TIMETARG
         ENTRY TIMEWISH
         ENTRY OVERHEAD
         ENTRY TIMEANT
         ENTRY TTIMEANT
         ENTRY TTIMEWAS
         ENTRY TIMEWAIT
         ENTRY TIMENEXT
         ENTRY TRACE
         ENTRY TRACESW
         ENTRY @TTABLE
         ENTRY TTABLEN
*
         EXTRN CBOARD
         EXTRN CLOSE
         EXTRN DBCHK
         EXTRN DBGEN
         EXTRN DBINIT
         EXTRN ENDLINE
         EXTRN FILETBL
         EXTRN FINDCMND
         EXTRN GETMOVE
         EXTRN GETSTRNG
         EXTRN IBFILL
         EXTRN ISALLOC
         EXTRN LINKDATE
         EXTRN MAKEMOVE
         EXTRN MVEX
         EXTRN NEWLINE
         EXTRN NLOOK
         EXTRN PRINTF
         EXTRN PROMPT
         EXTRN PUTCHAR
         EXTRN QHIST
         EXTRN SINLEFT
         EXTRN STAMP
         EXTRN TTCLEAR
         EXTRN VERSION
         EJECT
         STM   R14,R12,12(R13)    SAVE CALLING PROGS REGS
         BALR  R12,0              FIND OURSELVES
         USING *,R12              ESTABLISH ADDRESSIBILITY
         ST    R14,OSRET
*
* OBTAIN ALL AVAILABLE MEMORY
*
         GETMAIN VU,LA=GETMREQL,A=GETMADDR
*
*  ZERO MEMORY RECEIVED
*
         L     R2,GETMADDR        R2 -> AREA GOTTEN
         L     R3,GETMLEN         LENGTH (IN BYTES) OF STORAGE
         SRA   R3,8               R3 = # 256 BYTE BLOCKS OF MEMORY
         WHILE P
         XC    0(256,R2),0(R2)
         LA    R2,256(R2)
         S     R3,=F'1'
         ENDWHILE
*
*  GIVE BACK MEMORY FOR I/O BUFFERS
*
         L     R2,=A(FREEMLEN)
         FREEMAIN R,LV=(R2),A=GETMADDR
*
* SET UP STACK
*
         AR    R2,R3              R2 -> STORAGE WE STILL HAVE
         ST    R2,8(R13)          FORWARD CHAIN IN SAVEAREA
         ST    R13,4(R2)          BACKWARD CHAIN
         LR    R13,R2             R13 HAS STACK AREA ADDRESS
         LA    R2,9*8(R13)        R2 -> NEXT FREE AREA
         ST    R2,0(R13)          SAVE AS FREE POINTER
*
* STACK INITILAIZED.  SUBROUTINE CALLS ARE NOW PERMITTED.
*
         EJECT
*
*  FILE ALLOCATION LOOKUP
*
         ZERO  R3                 CONVENIENT COMPARISON VALUE
         L     R4,=A(FILETBL)
         USING FILEDSCT,R4
         LOOP
         C     R3,0(R4)
         BREAK E
         LA    R0,FILEDDNM
         SCALL ISALLOC
         TST   R15
         IF    Z
         OI    FILEFLAG,FILEALOC
         ENDIF
         LA    R4,FILETLEN(R4)
         ENDLOOP
         DROP  R4
*
* CHECK FOR ENOUGH ROOM TO EXECUTE
*
         L     R4,GETMLEN
         C     R4,GETMXEQ
         IF    L
         PRNTF '*** This memory region is too small for Duchess. ***%L'
         PRNTF '*** A region of 200K or larger is required. ***%L'
         SCALL ENDUP
         ENDIF
*
* SET UP POSITION TABLE
*
         S     R4,=A(FREEMLEN)
         S     R4,=A(STACKLEN)
         ST    R4,TTABLEN
         LR    R2,R13
         A     R2,=A(STACKLEN)
         ST    R2,@TTABLE
         ST    R2,@TTABLE         SAVE AS ADDRESS OF TRANSPO TABLE
*
         PRNTF '%P'
*
*  TUCC SYSTEM SPECIFIC INFORMATION LOGGING
*
         L     R4,=V(LOGENT)
         USING FILEDSCT,R4
         TM    FILEFLAG,FILEALOC
         IF    NZ                 IF 'LOG' FILE IS ALLOCATED
         LA    R1,TUCDSPLY
         SVC   252                GET USER LOGIN, NAME
         LA    R0,4               OUTPUT TO SYSLIST ONLY
         LA    R8,1               LOOP COUNT
         LA    R7,DISACTCD
         LOOP
         LOOP
         CLI   0(R7),C' '
         BREAK E
         LC    R1,0(R7)
         SCALL PUTCHAR
         LA    R7,1(R7)
         ENDLOOP
         NEG   R8
         BREAK H
         LA    R1,C','
         SCALL PUTCHAR
         LA    R7,DISPROGN
         ENDLOOP
         PRNTF '%L',FO=4
         ENDIF
         DROP  R4
*
*  END OF INFORMATION LOGGING
*
         SCALL STAMP
         L     R1,=A(CBOARD)
         SCALL DBINIT
         SCALL TTCLEAR
         SCALL COMMANDS           NO RETURN
         PRNTF 'DMAIN -- cannot get here!%L'
         DC    F'0'
         EJECT
*
* PROCESS COMMANDS
*
COMMANDS ENTER DSA=YES
LOOP     EQU   *
*
* IF ANTICIPATION OFF, CANCEL ANY CURRENT SEARCHES
*
         CLI   ANT,X'00'
         IF    E
         CLI   ANTNG,X'00'
         IF    NE
         MVI   ANTNG,X'00'
         LA    R15,12
         B     RET
         ENDIF
         ENDIF
         L     R0,FCOUNT
         S     R0,=F'1'
         ST    R0,FCOUNT
         IF    Z
         PRNTF 'For help, type help%L'
         ENDIF
         SCALL ENDLINE
         L     R11,=A(CBOARD)
         USING POSDB,R11
         LR    R1,R11
         SCALL DBCHK
         TST   R15
         IF    Z
         LR    R1,R11
         SCALL DBGEN
         ELSE
         SCALL PLNONE
         ENDIF
         EJECT
         CLI   COLOR,X'00'        WHITE TO MOVE?
         IF    E
         TM    MOVSWS,MOVWHITE    IS COMPUTER PLAYING WHITE?
         BO    CALLSRCH           YES, BRANCH
         LA    R1,WPROMPT
         ELSE
         TM    MOVSWS,MOVBLACK    IS COMPUTER PLAYING BLACK?
         BO    CALLSRCH           YES, BRANCH
         LA    R1,BPROMPT
         ENDIF
         CLI   PROMPTED,X'00'
         IF    E
         SCALL PROMPT
         MVI   PROMPTED,X'01'
         ENDIF
         SCALL IBFILL
         LR    R0,R15
         SCALL CHKEOF
         ST    R15,TMP
         C     R15,=F'8'
         IF    E                  IF NO DATA ...
         CLI   ANTNG,X'01'
         BE    RET0
         CLI   ANT,X'01'
         IF    E
         TM    MOVSWS,MOVWHITE+MOVBLACK
         IF    NZ
         L     R1,=V(PVARTBL)
         LH    R0,0(R1)
         TST   R0
         IF    Z
         LR    R1,R11
         SCALL NLOOK
         ZERO  R0
         TST   R15
         IF    Z
         USING NODE,R1
         LH    R0,XMOVE
         DROP  R1
         ENDIF
         ENDIF
         TST   R0
         IF    NE
         MVDB  TMPDB,0(R11)
         LA    R1,TMPDB
         SCALL MVEX
         L     R1,=V($EVAL)
         LH    R0,0(R1)
         NEG   R0
         STH   R0,0(R1)
         MVI   ANTNG,X'01'
         LA    R1,TMPDB
         SCALL MAKEMOVE
         B     LOOP
         ENDIF
         ENDIF
         ENDIF
         ENDIF
         MVI   PROMPTED,X'00'
         L     R15,TMP
         TST   R15
         IF    Z
         SCALL SINLEFT
         TST   R15
         BNP   LOOP
         ENDIF
         SCALL NEWLINE
         LR    R0,R15
         SCALL CHKEOF
         EJECT
         SCALL FINDCMND           TRY COMMAND
         C     R15,=F'4'
         BL    LOOP               COMMAND OK,  LOOP
         IF    E
         SCALL QHIST
         SCALL ENDUP
         ENDIF
         LR    R1,R11
         SCALL GETMOVE            TRY TO PARSE AS MOVE
         GSTR
         B     LOOP               AND LOOP
         DROP  R11
         SPACE 5
CALLSRCH LR    R1,R11             GET A(DATABASE)
         SCALL MAKEMOVE           MAKE THE MOVE ON THE BOARD IF ANY
         TST   R15
         IF    L
         SCALL PLNONE
         B     LOOP
         ENDIF
         BE    LOOP
         B     RET
         DROP  R12
         EJECT
*
* TERMINATE IF EOF CODE (4). R0 CONTAINS CODE
*
CHKEOF   ENTER
         C     R0,=F'4'
         IF    E
         PRNTF 'End of file on standard input%L'
         SCALL ENDUP
         ENDIF
         LR    R15,R0
         B     RET
         EJECT
*
* END DUCHESS EXECUTION
*
ENDUP   ENTER
         SCALL STAMP
         L     R2,=A(FILETBL)     ADDRESS OF FDT
         USING FILEDSCT,R2
         ZERO  R3
         LOOP
         C     R3,0(R2)           DONE CLOSING ALL FILES?
         BREAK Z                  YES, STOP
         TM    FILEFLAG,FILEOPEN  IS IT OPEN?
         IF    NZ                 IF OPEN
         L     R4,FILE@DCB        ADDRESS OF DCB FOR FILE
         LR    R0,R4
         SCALL CLOSE
         NI    FILEFLAG,255-FILEOPEN
         ENDIF
         LA    R2,FILETLEN(R2)    BUMP POINTER
         ENDLOOP
         DROP  R2
         L     R14,OSRET
         ZERO  R15
         BR    R14
         EJECT
         USING *,R15
PLWHITE  NI    MOVSWS,255-MOVBLACK-MOVWHITE
         OI    MOVSWS,MOVWHITE    SET WHITE TO MOVE.
         ZERO  R15                CLEAR RETURN CODE.
         BR    R14                AND LEAVE.
         USING *,R15
PLBLACK  NI    MOVSWS,255-MOVBLACK-MOVWHITE
         OI    MOVSWS,MOVBLACK
         ZERO  R15                CLEAR COND CODE.
         BR    R14                AND LEAVE.
         USING *,R15
PLNONE   NI    MOVSWS,255-MOVBLACK-MOVWHITE
         ZERO  R15                CLEAR RETURN CODE.
         BR    R14                AND LEAVE.
PLBOTH   ENTER
         LR    R11,R1
         SCALL NEEDNUM
         TST   R15
         IF    Z
         LTR   R10,R1
         WHILE H
         LR    R1,R11
         SCALL MAKEMOVE
         TST   R15
         BREAK NZ
         S     R10,=F'1'
         ENDWHILE
         ENDIF
         SCALL PLNONE
         B     RET0
         EJECT
TIMAVG   ENTER
         GTKN
         TST   R15
         BNZ   BADOPT
         CLC   0(5,R1),OFFSTR
         BE    OFFQUIT
         NI    TIMESW,255-CPUAVG-REALAVG-TCLOCK
         CLC   0(3,R1),CPUSTR
         IF    E
         OI    TIMESW,CPUAVG
         ELSE
         CLC   0(3,R1),REALSTR
         BNE   BADOPT
         OI    TIMESW,REALAVG
         ENDIF
         SCALL NEEDNUM
         TST   R15
         BNZ   OFFQUIT
         M     R0,=F'100'
         ST    R1,TIMEWISH
         ZERO  R0
         ST    R0,TIMEOFF
         B     RET0
BADOPT   PRNTF 'Invalid or missing option%L'
OFFQUIT  NI    TIMESW,255-CPUAVG-REALAVG-TCLOCK
         B     RET0
         EJECT
         USING *,R15
NOSTIMER MVI   TIMESW,X'00'
         BR    R14
         EJECT
*
*  CLOCK COMMAND
*
CMCLOCK  ENTER
         GTKN
         TST   R15
         IF    Z
         CLC   0(5,R1),OFFSTR
         IF    NZ
         PRNTF 'Bad option%L'
         ENDIF
         NI    TIMESW,255-TCLOCK
         ELSE
         NI    TIMESW,255-CPUAVG
         OI    TIMESW,TCLOCK+REALAVG
         SCALL CLOCK
         ENDIF
         B     RET0
         EJECT
*
*  FIND OUT HOW MANY MOVES IN HOW MANY MINUTES
*
CLOCK    ENTER
         REPEAT
         SCALL ENDLINE
         PRNTF 'How many moves to next time control?%L'
         SCALL NEWLINE
         LR    R0,R15
         SCALL CHKEOF
         SCALL NEEDNUM
         TST   R15
         UNTIL Z
         L     R2,=V(HNUM)
         LH    R2,0(R2)
         AR    R1,R1
         SH    R1,=H'1'
         AR    R2,R1
         STH   R2,CNTLNUM
         LA    R0,1000
         ST    R0,TIMEWISH
         L     R0,TIMELEFT
         A     R0,TIMEINCR        ADDITIONAL TIME FOR EACH CONTROL
         ST    R0,TIMELEFT
         SCALL CLOCKTIM
         B     RET0
         EJECT
*
*  FIND OUT HOW MANY MINUTES LEFT AND SET TIMEWISH
*
CLOCKTIM ENTER DSA=YES
         L     R0,TIMELEFT
         SRDA  R0,32
         D     R0,=F'6000'
         ST    R1,WRK
         LR    R8,R1
         LOOP
         SCALL ENDLINE
         PRNTF 'How many minutes left? (%F)%L',(WRK),PLIST=PLIST
         SCALL NEWLINE
         LR    R0,R15
         SCALL CHKEOF
         SCALL NEEDNUM
         TST   R15
         IF    Z
         CR    R8,R1
         BREAK E,2
         LR    R2,R1
         S     R2,WRK
         LPR   R2,R2
         C     R2,=F'3'
         BREAK NH,2
         LR    R8,R1
         PRNTF 'Please confirm. '
         ENDIF
         ENDLOOP
         M     R0,=F'6000'        HUNDRETHS OF SECONDS
         ST    R1,TIMELEFT
         L     R8,=V(HNUM)
         LH    R2,CNTLNUM
         SH    R2,0(R8)
         AH    R2,=H'1'
         SRA   R2,1               MOVES TO NEXT CONTROL
         IF    H
         LR    R4,R1
         LR    R5,R1
         SRA   R5,1
         C     R5,TIMESAFE
         IF    H
         L     R5,TIMESAFE
         ENDIF
         SR    R4,R5
         SRDA  R4,32
         DR    R4,R2
         S     R5,OVERHEAD
         L     R7,TIMEWISH
         SRA   R7,1
         CR    R5,R7
         IF    L
         LR    R5,R7
         ENDIF
         ST    R5,TIMEWISH
         ZERO  R4
         ST    R4,TIMEOFF
         ENDIF
         PRNTF 'time/move %T%L',(TIMEWISH),PLIST=PLIST
         B     RET0
         EJECT
*
*  CHECK HOW MUCH TIME IS ON THE CLOCK
*
CLOCKCHK ENTER
         TM    TIMESW,TCLOCK
         IF    NZ
         L     R1,=V(HNUM)
         LH    R1,0(R1)
         CH    R1,CNTLNUM
         IF    NL
         SCALL CLOCK
         ELSE
         CH    R1,=H'22'
         IF    H
         LA    R0,1(R1)
         SRDA  R0,32+1
         D     R0,=F'5'
         TST   R0
         IF    Z
         SCALL CLOCKTIM
         ENDIF
         ENDIF
         ENDIF
         ENDIF
         B     RET0
         EJECT
TRACE    ENTER
         LA    R1,TRACESW
         SCALL SWSET
         B     RET0
         EJECT
SWSET    ENTER
         LR    R2,R1
         SCALL SWITCH
         TST   R15
         IF    NZ
         PRNTF 'Invalid or missing switch%L'
         LA    R15,8
         B     RET
         ENDIF
         STC   R1,0(R2)
         B     RET0
         EJECT
SWITCH   ENTER
         GTKN
         TST   R15
         IF    Z
         LR    R2,R1
         ZERO  R1
         CLC   0(5,R2),OFFSTR
         BREAK E
         LA    R1,1
         CLC   0(4,R2),ONSTR
         BREAK E
         LA    R15,8
         ENDIF
         EXIT  RTN=(R1),RC=(R15)
         EJECT
*
*  NEXT TOKEN MUST BE NUMBER
*
NEEDNUM  ENTER
         NUMBR
         TST   R15
         IF    NZ
         PRNTF 'Invalid or missing number%L'
         LA    R15,4
         ENDIF
         EXIT  RC=(R15),RTN=(R1)
         EJECT
*
*  SET STATISTICS LEVEL
*
CMSTATS  ENTER
         SCALL NEEDNUM
         TST   R15
         IF    Z
         ST    R1,STATSLVL
         ENDIF
         B     RET0
         EJECT
CPLXSET  ENTER
         SCALL NEEDNUM
         TST   R15
         IF    Z
         STH   R1,COMPLEX
         ENDIF
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
          LTORG
@TTABLE  DC    F'0'
TTABLEN  DC    F'0'
GETMADDR DC    F'0'
GETMLEN  DC    F'0'
GETMREQL DC    A(FREEMLEN+1024)
         DC    A(12*1024*1024)    12M MAX
GETMXEQ  DC    A(FREEMLEN+STACKLEN+MINTTBLN)
FREEMLEN EQU   10*1024
STACKLEN EQU   40*1024
MINTTBLN EQU   1*1024
MOVSWS   DC    X'00'
MOVBLACK EQU   X'40'
MOVWHITE EQU   X'80'
TRACESW  DC    X'00'
BOARDSW  DC    X'00'
PREDSW   DC    X'00'
STATSLVL DC    F'1'
$EVAL    DC    H'0'
$CPLX    DC    H'0'
$#HASHES DC    F'0'
$#HITS   DC    F'0'
$#STOPS  DC    F'0'
$#EVALS  DC    F'0'
ANT      DC    X'00'
ANTNG    DC    X'00'
ASYNCH   DC    X'00'
TIMESW   DC    AL1(STIMER+CPUAVG)
STIMER   EQU   X'80'
STSET    EQU   X'40'
CPUAVG   EQU   X'20'
REALAVG  EQU   X'10'
TCLOCK   EQU   X'08'
TIMEWISH DC    F'100'
TIMELEFT DC    A(90*60*100)       MINUTES UNTIL TIME CONTROL
TIMEINCR DC    A(30*60*100)       ADDITIONAL TIME FOR EACH CONTROL
TIMEOFF  DC    F'0'
TIMETARG DC    F'0'
TIMESAFE DC    A(20*60*100)       TIME CONTROL SAFETY MARGIN
OVERHEAD DC    A(10*100)          OPERATOR OVERHEAD/MOVE
TIMEANT  DC    F'0'               TIME OF SUCCESSFUL ANTICIPATING
TTIMEANT DC    F'0'               TOTAL TIMEANT
TTIMEWAS DC    F'0'               CPU SPENT ANTICIPATING INCORRECTLY
TIMEWAIT DC    F'25'              IO CHECK TIME INTERVAL
TIMENEXT DC    F'0'               NEXT TIME TO CHECK IO IN SEARCH
PROMPTED DC    X'00'
FCOUNT   DC    F'3'               FAILURE COUNTDOWN
CNTLNUM  DC    H'0'
COMPLEX  DC    H'3000'
PVARTBL  DC    100H'0'
REALSTR  STRNG 'R'
CPUSTR   STRNG 'C'
ONSTR    STRNG 'ON'
OFFSTR   STRNG 'OFF'
WPROMPT  STRNG 'W.command:'
BPROMPT  STRNG 'B.command:'
OSRET    DS    F
WRK      DS    F
         TUCSTORE
         DSECT
         NODE
         FILEDSCT
POSDB    DSECT
         POSDB
NODE     DSECT
         NODE  X
         DSA
PLIST    DS    8F
TMP      DS    D
TMPDB    DS    CL320
         ENDDSA
         REGS
         END
