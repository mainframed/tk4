         TITLE 'SYSTEM -- SYSTEM CALLS'
SYSTEM   CSECT
         ENTRY BINTIME
         ENTRY CLOSE
         ENTRY GET
         ENTRY ISALLOC
         ENTRY MEMALLOC
         ENTRY MEMFREE
         ENTRY OPENIN
         ENTRY                    OPENOUT
         ENTRY OPENUP
         ENTRY POINT
         ENTRY PUT
         ENTRY SLEEP
         ENTRY TIMEINIT
         ENTRY TIMECHK
         ENTRY TGET
         EJECT
*
* SUSPEND EXECUTION OF TASK FOR INTERVAL
*  R0 HAS TIME TO SLEEP IN HUNDRETHS OF SECONDS
*
SLEEP    ENTER DSA=YES
         ST    R0,SLPTIME
         TTIMER CANCEL
         ST    R0,OLDSTIME
         STIMER WAIT,BINTVL=SLPTIME
         L     R2,OLDSTIME
         TST   R2
         IF    NZ
         STIMER TASK,TUINTVL=OLDSTIME
         ENDIF
         B     RET0
         EJECT
*
*  INITIALIZE TIMING INFORMATION
*
TIMEINIT ENTER
         SCALL BINTIME
         ST    R0,RSTART
         SCALL TTIMER
         ST    R0,CSTART
         B     RET0
         EJECT
*
*  RETURN ELAPSED CPU, REAL TIME (IN HUNDRETHS OF SECONDS)
*  R1 IS RETURNED POINTING TO STATIC AREA CONTAINING TIMES:
*  0(R1) IS CPU, 4(R1) IS REAL
*
TIMECHK  ENTER DSA=YES
         SCALL TTIMER
         L     R1,CSTART
         SR    R1,R0
         ZERO  R0
         D     R0,=F'384'
         ST    R1,TSTATIC
         SCALL BINTIME
         S     R0,RSTART
         IF    M
         A     R0,ONEDAY
         ENDIF
         ST    R0,TSTATIC+4
         LA    R1,TSTATIC
         EXIT  RTN=(R1)
TSTATIC  DS    2F
         EJECT
         USING *,R15
TTIMER   ZERO  R0
         L     R2,=V(TIMESW)
         TM    0(R2),STIMER
         IF    NZ
         TM    0(R2),STSET
         IF    Z
         STIMER TASK,BINTVL=ONEDAY
         OI    0(R2),STSET
         ENDIF
         TTIMER
         ENDIF
         BR    R14
         EJECT
*
* RETURN HUNDRETHS OF SECONDS IN CURRENT DAY IN R0,
* PACKED DECIMAL '00 YY DD DF' IN R1
*
         USING *,R15
BINTIME  TIME BIN
         ZERO  R15
         BR    R14
*
ONEDAY   DC    A(24*60*60*100)
RSTART   DC    F'0'
CSTART   DC    F'0'
STIMER   EQU   X'80'
STSET    EQU   X'40'
CPUAVG   EQU   X'20'
REALAVG  EQU   X'10'
         EJECT
*
* OBTAIN MEMORY
*  0(R0) = MINIMUM MEMORY NEEDED
*  4(R0) = MAXIMUM MEMORY WANTED
*  0(R1) = (RETURNED) ADDRESS OF OBTAINED MEMORY
*  4(R1) = (RETURNED) LENGTH OF OBTAINED MEMORY
*
MEMALLOC ENTER
         LR    R2,R0
         LR    R3,R1
         GETMAIN VU,LA=(R2),A=(R3)
         B     RET0
         EJECT
*
* FREE MEMORY
*  R0 = LENGTH OF AREA TO BE FREED
*  R1 = ADDRESS OF AREA TO BE FREED
*
MEMFREE  ENTER
         LR    R2,R0
         LR    R3,R1
         FREEMAIN R,A=(R3),LV=(R2)
         B     RET0
         EJECT
*
* DETERMINE IF FILE IS ALLOCATED
*  R0 -> 8 BYTE DDNAME
*
* RETURNS (R15) ZERO IF FILE IS ALLOCATED, ELSE NON-ZERO
*
ISALLOC  ENTER
         LR    R4,R0
         L     R2,16              R2 -> CVT
         L     R2,0(R2)           R2 -> -> TCB
         L     R2,0(R2)           R2 -> TCB
         L     R2,12(R2)          R2 -> TIOT
         LA    R2,24(R2)          R2 -> FIRST TIOT ENTRY
         ZERO  R3                 CONVENIENT COMPARISON REGISTER
         LOOP
         C     R3,0(R2)           AT END OF TIOT?
         BREAK E
         TM    3(R2),X'10'        DYNAM DATASET?
         IF    Z
         CLC   0(8,R4),4(R2)
         BE    RET0
         ENDIF
         LC    R0,0(R2)           OFFSET TO NEXT TIOT ENTRY
         AR    R2,R0
         ENDLOOP
         EXIT  RC=4
         EJECT
*
* OPEN FILE FOR INPUT
* R0 = DCB ADDRESS
*
OPENIN   ENTER
         LR    R2,R0
         OPEN  ((R2),(INPUT))
         TST   R15
         BZ    RET0
         UABEND 1000
         EJECT
*
* OPEN FILE FOR OUTPUT
* R0 = DCB ADDRESS
*
OPENOUT  ENTER
         LR    R2,R0
         OPEN  ((R2),(OUTPUT))
         TST   R15
         BZ    RET0
         UABEND 1001
         EJECT
*
* OPEN FILE FOR UPDATE
* R0 = DCB ADDRESS
*
OPENUP   ENTER
         LR    R2,R0
         OPEN  ((R2),(UPDAT))
         TST   R15
         BZ    RET0
         UABEND 1002
         EJECT
*
* CLOSE FILE
* R0 = DCB ADDRESS
*
CLOSE    ENTER
         LR    R2,R0
         CLOSE ((R2),)
         B     RET0
         EJECT
*
* GET FILE INPUT
* R0 = DCB ADDRESS
* R1 = BUFFER ADDRESS
*
GET      ENTER
         LR    R2,R0
         LR    R3,R1
         GET   (R2),(R3)
         B     RET0
         EJECT
*
* PUT BUFFER TO FILE
* R0 = DCB ADDRESS
* R1 = BUFFER ADDRESS
*
PUT      ENTER
         LR    R2,R0
         LR    R3,R1
         PUT   (R2),(R3)
         B     RET0
         EJECT
*
* 'TGET' INPUT FROM FILE
* R0 = MAXIMUM BUFFER LENGTH
* R1 = BUFFER ADDRESS
* RETURNS (R1) LENGTH OF INPUT
*
TGET     ENTER
         LR    R2,R0
         LR    R3,R1
         TGET  (R3),(R2),EDIT,NOWAIT
         B     RET0
         EJECT
*
* POINT TO OFFSET IN FILE
* R0 = DCB ADDRESS
* R1 = TTRZ ADDRESS
*
POINT    ENTER
         LR    R2,R0
         LR    R3,R1
         POINT (R2),(R3)
         B     RET0
         EJECT
RET0     EXIT
         DSA
PLIST    DS    8F
SLPTIME  DS    F
OLDSTIME DS    F
         ENDDSA
         REGS
         END
