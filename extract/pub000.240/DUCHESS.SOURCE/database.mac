         TITLE 'DATABASE -- DATABASE UTILITIES'
         MACRO
&LABEL   GENSTR
&LABEL   SRA   R3,1
         STH   R3,MVNUM
         LR    R3,R11
         LA    R4,0(R2,R2)
         LA    R4,HMOVES-2(R4)
         LA    R5,MVSTR
         STM   R3,R5,PLIST
         LA    R1,PLIST
         SCALL MOVECHAR
         LH    R0,0(R4)
         LR    R1,R11
         SCALL MVEX
         LA    R2,1(R2)
         MEND
DATABASE CSECT
         ENTRY BACKUP
         ENTRY DBCHK
         ENTRY DBGEN
         ENTRY DBINIT
         ENTRY DBZERO
         ENTRY HADD
         ENTRY HINIT
         ENTRY HISTORY
         ENTRY POSDBEQ
         ENTRY QHIST
*
         ENTRY CBOARD
         ENTRY HBOARD
         ENTRY HMOVES
         ENTRY HNUM
         ENTRY HCOUNT
*
         EXTRN BOARD
         EXTRN CHKEOF
         EXTRN ENDLINE
         EXTRN GETSTRNG
         EXTRN MOVECHAR
         EXTRN MVEX
         EXTRN NEWLINE
         EXTRN THRTGEN
         EXTRN PLNONE
         EJECT
*
*  DBGEN  -- GENERATE POSITION DATABASE
*  R1 -> POSDB
*  ONLY WK-WP, BK-BP, COLOR, ENPASS, AND CASTLE MUST BE INTACT
*
DBGEN    ENTER
         LR    R11,R1             ADDRESS OF POSITION DATABASE
         USING POSDB,R11
*
         LA    R9,WKO
         LA    R10,WK
         LA    R6,WSQUARES
         DO    R15,2
         LB    R2,WK-WK(R10)
         OB    R2,WQ-WK(R10)
         OB    R2,WR-WK(R10)
         OB    R2,WB-WK(R10)
         OB    R2,WN-WK(R10)
         OB    R2,WP-WK(R10)
         STB   R2,W-WK(R10)       SAVE IN TOTAL BOARD
         ZERO  R8
         STH   R8,0(R9)           CURRENT SQUARES POINTER
         DO    R14,6
         BSETB R2,63
         DO    R7,64              LOOP OVER BOARD
         LBR   R0,R2
         NB    R0,0(R10)          AND WITH CURRENT PIECE BOARD
         TSTB  R0
         IF    NZ
         LR    R0,R7
         S     R0,=F'1'           FIXUP
         STC   R0,0(R6,R8)        SQUARE OF PIECE
         LA    R0,6
         SR    R0,14
         STC   R0,16(R6,R8)       PIECE TYPE
         LA    R8,1(R8)           NEXT FREE POSITION IN SQUARES
         ENDIF
         SLDL  R2,1               MOVE THE BIT TO NEXT SQUARE
         ENDDO
         STH   R8,2(R9)           SAVE CURRENT OFFSET
         LA    R9,2(R9)           -> NEXT OFFSET
         LA    R10,8(R10)
         ENDDO
         LA    R9,BKO             NEXT COLOR
         LA    R10,BK             NEXT PIECES
         LA    R6,BSQUARES        NEXT SQUARES
         ENDDO                    LOOP FOR WHITE AND BLACK
         LR    R1,R11
         SCALL THRTGEN
         B     RET0
         EJECT
*
*  DBCHK -- CHECK FOR DATABASE LEGALITY
*  THREAT BOARDS ARE NOT CHECKED
*  CURRENTLY, SQUARES/TYPES/OFFSETS ARE NOT CHECKED
*  R1 -> POSDB
*  RC = 0 IF NORMAL, ELSE R1 -> STRING CONTAINING ERROR MESSAGE
*
DBCHK    ENTER DSA=YES
         DROP  R11
         LA    R11,POSDB
         USING POSDB,R11
         MVDB  POSDB,0(R1)
         EJECT
*
*  CHECK COLOR
*
         TM    COLOR,X'FE'
         BNZ   ERRFLG
         SPACE 5
*
* CHECK FOR PAWNS ON BACK RANK
*
         LB    R0,WP
         OB    R0,BP
         NB    R0,BACKRANK
         TSTB  R0
         BNZ   ERRPAWN
*
*  CHECK ENPASSANT CODE
*
         TM    ENPASS,X'C0'
         BNZ   ERRFLG             INVALID SQUARE CODE
         TM    ENPASS,X'FF'
         IF    NZ
         LC    R2,ENPASS
         LA    R2,8(R2)
         LC    R3,COLOR
         SLA   R3,4               TWO RANK SHIFT
         SR    R2,R3              SQUARE OF ENPASSANT PAWN
         BSETB R0,0(R2)
         LR    R2,R0
         OR    R2,R1
         N     R2,=X'FF0000FF'
         BZ    ERRFLG             ILLEGAL ENPASSANT SQUARE
         CLI   COLOR,X'00'
         IF    E
         NB    R0,BP
         ELSE
         NB    R0,WP
         ENDIF
         TSTB  R0
         BZ    ERRENP             IF NO CAPTURABLE PAWN
         ENDIF
         EJECT
*
*  COMMON PROCESSING FOR WHITE AND BLACK
*
         LA    R10,WK
         DO    R9,2
*
*  CHECK CASTLING STATUS
*
         TM    WCASTLE-WK(R10),X'FC'
         BNZ   ERRFLG             INVALID CASTLE CODE
         LB    R2,WK-WK(R10)
         BSETB R0,4
         C     R9,=F'2'           WHITE PIECE PROCESSING?
         IF    E
         BSETB R0,60              WHITE KING ORIGIN
         ENDIF
         NBR   R2,R0
         TM    WCASTLE-WK(R10),X'01'        KING SIDE?
         IF    NZ
         LB    R0,WR-WK(R10)
         SLDL  R0,3
         NBR   R0,R2
         TSTB  R0
         BZ    ERRCAS             BAD KING SIDE
         ENDIF
         TM    WCASTLE-WK(R10),X'02'        QUEEN SIDE?
         IF    NZ
         LB    R0,WR-WK(R10)
         SRDL  R0,4
         NBR   R0,R2
         TSTB  R0
         BZ    ERRCAS             BAD QUEEN SIDE
         ENDIF
         SPACE 5
*
*  CREATE MASK OF ALL PIECES, MAKING SURE NO INTERSECTIONS
*
         LB    R2,WK-WK(R10)
         LBR   R0,R2
         NB    R0,WQ-WK(R10)
         TSTB  R0
         BNZ   ERRINT
         OB    R2,WQ-WK(R10)
         LBR   R0,R2
         NB    R0,WR-WK(R10)
         TSTB  R0
         BNZ   ERRINT
         OB    R2,WR-WK(R10)
         LBR   R0,R2
         NB    R0,WB-WK(R10)
         TSTB  R0
         BNZ   ERRINT
         OB    R2,WB-WK(R10)
         LBR   R0,R2
         NB    R0,WN-WK(R10)
         TSTB  R0
         BNZ   ERRINT
         OB    R2,WN-WK(R10)
         LBR   R0,R2
         NB    R0,WP-WK(R10)
         TSTB  R0
         BNZ   ERRINT
         OB    R2,WP-WK(R10)
         STB   R2,W-WK(R10)
*
*  CHECK NUMBER OF EACH PIECE TYPE
*
         LB    R0,WK-WK(R10)
         TSTB  R0
         BZ    ERRNUM             MUST HAVE A KING
         LA    R6,WK-WK(R10)
         LA    R7,=H'1,9,10,10,10,8,16'
         DO    R8,7
         BSETB R2,0
         ZERO  R4
         DO    R5,64
         LBR   R0,R2
         NB    R0,0(R6)
         TSTB  R0
         IF    NZ
         LA    R4,1(R4)
         ENDIF
         SRDL  R2,1
         ENDDO
         CH    R4,0(R7)
         BH    ERRNUM
         LA    R6,8(R6)           NEXT PIECE BOARD
         LA    R7,2(R7)           NEXT MAX NUMBER
         ENDDO
         SPACE 5
         LA    R10,BK             NEXT COLOR
         ENDDO
*
*  MORE CHECKS
*
         LB    R0,W
         NB    R0,B
         TSTB  R0
         BNZ   ERRINT
*
         LR    R1,R11
         SCALL DBGEN
         CLI   COLOR,X'00'
         IF    E
         LB    R0,BK
         NB    R0,WT
         ELSE
         LB    R0,WK
         NB    R0,BT
         ENDIF
         TSTB  R0
         BNZ   ERRCHK
NORMAL   SR    R15,R15
         LA    R1,OKAYSTR
         B     QUIT
ERRENP   LA    R15,4
         LA    R1,ENPSTR
         B     QUIT
ERRCAS   LA    R15,8
         LA    R1,CASSTR
         B     QUIT
ERRNUM   LA    R15,12
         LA    R1,NUMSTR
         B     QUIT
ERRINT   LA    R15,16
         LA    R1,INTSTR
         B     QUIT
ERRFLG   LA    R15,20
         LA    R1,FLAGSTR
         B     QUIT
ERRCHK   LA    R15,24
         LA    R1,CHKSTR
         B     QUIT
ERRPAWN  LA    R15,28
         LA    R1,PAWNSTR
QUIT     EXIT  RC=(R15),RTN=(R1)
OKAYSTR  STRNG 'Database okay'
ENPSTR   STRNG 'Invalid enpassant flag'
CASSTR   STRNG 'Invalid castling status'
NUMSTR   STRNG 'Illegal piece count'
INTSTR   STRNG 'Different pieces on same square'
FLAGSTR  STRNG 'Illegal flag (e.g. color)'
CHKSTR   STRNG 'Side to move can capture king'
PAWNSTR  STRNG 'Pawn on impossible rank'
         DS    0D
BACKRANK DC    X'FF000000000000FF'
         EJECT
*
*  INITIALIZE HISTORY
*
HINIT    ENTER
         SCALL QHIST
         MVDB  HBOARD,CBOARD
         LA    R1,HBOARD
         SCALL DBCHK
         TST   R15
         IF    Z
         LA    R1,HBOARD
         SCALL DBGEN
         ENDIF
         ZERO  R2
         STH   R2,HNUM            NO HISTORY MOVES YET
         STH   R2,HMOVES
         L     R6,=V(PVARTBL)
         STH   R2,0(R6)           NO PREDICTION
         L     R6,=V($EVAL)
         STH   R2,0(R6)           (UNKNOWN) ZERO EVALUATION
         B     RET0
         EJECT
*
* PROMPT FOR GAME HISTORY
*
QHIST    ENTER
         LH    R0,HCOUNT
         ZERO  R1
         STH   R1,HCOUNT
         AH    R0,HNUM
         CH    R0,=H'10'
         BL    RET0
         SCALL ENDLINE
         PRNTF 'Game history?%L'
         SCALL NEWLINE
         LR    R0,R15
         SCALL CHKEOF
         GSTR
         CLI   2(R1),C'N'
         BE    RET0
         CLI   2(R1),C'0'
         BE    RET0
         SCALL HISTORY
         B     RET0
         EJECT
*
*  EXECUTE AND ADD MOVE TO HISTORY
*  R0 = MOVE TO ADD
*  R1 -> POSDB
*
HADD     ENTER
         SCALL MVEX
         LH    R2,HNUM
         LA    R2,1(R2)
         STH   R2,HNUM
         LA    R4,0(R2,R2)
         STH   R0,HMOVES-2(R4)
         ZERO  R15
         STH   R15,HMOVES(R4)
         L     R6,=V(PVARTBL)
         CH    R0,0(R6)
         IF    NE
         ZERO  R8
         STH   R8,0(R6)
         ELSE
         REPEAT
         LA    R7,2(R6)
         LH    R8,0(R7)
         STH   R8,0(R6)
         LR    R6,R7
         TST   R8
         UNTIL Z
         ENDIF
         L     R6,=V($EVAL)
         LH    R0,0(R6)
         NEG   R0
         STH   R0,0(R6)
         B     RET0
         EJECT
*
*  PRINT GAME HISTORY
*
HISTORY  ENTER DSA=YES
         DROP  R11
         LA    R11,POSDB
         LH    R1,HNUM            DEFAULT NUMBER OF MOVES TO RETRACT
         SCALL RETRACT
         TST   R15
         BNZ   RET0
         TST   R1
         IF    Z
         STH   R1,HCOUNT
         ENDIF
         LA    R2,1(R1)           FIRST MOVE IN HISTORY TO PRINT
*
*  PRINT MOVES OF HISTORY
*
         CLI   COLOR-WK(R11),X'00'
         IF    NE
         LA    R3,1(R2)
         GENSTR
         PRNTF '%L%2H.  . . .     %S',(MVNUM,MVSTR),PLIST=PLIST
         ENDIF
         CH    R2,HNUM
         WHILE NH
         LA    R3,2(R2)
         GENSTR
         CLI   COLOR-WK(R11),X'00'
         IF    NE
         PRNTF '%L%2H.',(MVNUM),PLIST=PLIST
         ENDIF
         PRNTF ' %S',(MVSTR),PLIST=PLIST
         LA    R6,10
         SH    R6,MVSTR
         WHILE H
         PRNTF ' '
         S     R6,=F'1'
         ENDWHILE
         CH    R2,HNUM
         ENDWHILE
         PRNTF '%L'
         B     RET0
         EJECT
*
*  BACKUP GAME HISTORY
*
BACKUP   ENTER
         LA    R11,CBOARD
         LA    R1,2               DEFAULT #MOVES TO RETRACT
         SCALL RETRACT
         TST   R15
         IF    Z
         STH   R1,HNUM
         L     R6,=V(PVARTBL)
         STH   R15,0(R6)
         LA    R4,0(R1,R1)
         STH   R15,HMOVES(R4)
         ENDIF
         B     RET0
         EJECT
*
*  RETRACT MOVES FROM GAME HISTORY
*  R11 -> POSDB WHICH WILL BE BACKED UP POSITION
*  R1 = DEFAULT NUMBER OF MOVES (PLY) TO RETRACT
*  IF NEXT TOKEN IS A NUMBER, IT OVERIDES THE DEFAULT
*  RC = 0 IF ANY RETRACTED, R1 = NUMBER OF MOVES EXECUTED
*
RETRACT  ENTER
         LR    R2,R1
         NUMBR
         TST   R15
         IF    Z
         LR    R2,R1
         ENDIF
         LH    R3,HNUM
         SR    R3,R2
         IF    M
         ZERO  R3
         ENDIF
*
*  R3 = NUMBER OF MOVES TO BE EXECUTED
*
         CH    R3,HNUM
         BNL   FAIL
         MVC   0(DBLEN/2,R11),HBOARD
         MVC   DBLEN/2(DBLEN/2,R11),HBOARD+DBLEN/2
*
         LA    R2,1
         CR    R2,R3
         WHILE NH
         LA    R4,0(R2,R2)
         LH    R0,HMOVES-2(R4)
         LR    R1,R11
         SCALL MVEX
         LA    R2,1(R2)
         CR    R2,R3
         ENDWHILE
         EXIT  RTN=(R3)
FAIL     EXIT  RC=8
         EJECT
*
*  CLEAR DATABASE
*  R1 -> POSDB
*
         USING *,R15
DBZERO   XC    0(DBLEN/2,R1),0(R1)
         MVC   DBLEN/2(DBLEN/2,R1),0(R1)
         L     R15,=A(HINIT)
         BR    R15                RETURN THROUGH HINIT
         EJECT
*
*  SET UP POSITION FOR START OF GAME
*  R1 -> POSDB
*
DBINIT   ENTER
         MVC   0(DBLEN/2,R1),INITDB
         MVC   DBLEN/2(DBLEN/2,R1),INITDB+DBLEN/2
         SCALL HINIT
         SCALL PLNONE
         LA    R0,5*100
         L     R1,=V(RATIO)
         ST    R0,0(R1)
         B     RET0
         EJECT
*
* COMPARE TWO POSDB-ES. RETURNS 0 IF EQUAL
*
POSDBEQ  ENTER
         LA    R15,1              ASSUME FAILURE
         LR    R2,R0
         CLC   WK-WK(6*8,R1),WK-WK(R2)
         BNE   RET
         CLC   WCASTLE-WK(2,R1),WCASTLE-WK(R2)
         BNE   RET
         CLC   BK-WK(6*8,R1),BK-WK(R2)
         BNE   RET
         CLC   BCASTLE-WK(2,R1),BCASTLE-WK(R2)
         BNE   RET
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         DSA
POSDB    POSDB
DBLEN   EQU    *-POSDB
PLIST    DS    8F
MVNUM    DS    H
MVSTR    DS    H
         DS    32XL1
         ENDDSA
DATABASE CSECT
         LTORG
         CNOP  0,8
CBOARD   DS    (DBLEN)XL1
         CNOP  0,8
INITDB   DC    X'0000000000000008'     WHITE KING
         DC    X'0000000000000010'     WHITE QUEEN
         DC    X'0000000000000081'     WHITE ROOK
         DC    X'0000000000000024'     WHITE BISHOP
         DC    X'0000000000000042'     WHITE KNIGHT
         DC    X'000000000000FF00'     WHITE PAWN
         DC    D'0'               ALL WHITE PIECES
         DC    7D'0'              WHITE THREATS
         DC    7H'0'              WHITE PIECE OFFESTS
         DC    XL32'00'           WHITE SQUARES/TYPES
         DC    X'03'                   CASTLING PRIVILEGES
         DC    X'00'                   WHITE TO MOVE
         CNOP  0,8
         DC    X'0800000000000000'     BLACK KING
         DC    X'1000000000000000'     BLACK QUEEN
         DC    X'8100000000000000'     BLACK ROOK
         DC    X'2400000000000000'     BLACK BISHOP
         DC    X'4200000000000000'     BLACK KNIGHT
         DC    X'00FF000000000000'     BLACK PAWN
         DC    D'0'
         DC    7D'0'
         DC    7H'0'
         DC    XL32'00'
         DC    X'03'
         DC    X'00'                   NO ENPASS
         CNOP  0,8
HBOARD   DS    (DBLEN)XL1
HNUM     DS    H
HMAX     DC    H'512'
HMOVES   DS    512H
         DS    H                  NULL TERMINATOR SPACE
HCOUNT   DC    H'0'               # COMPUTER MOVES SINCE LAST HISTORY
         REGS
         END
