         TITLE 'MVEX -- MOVE EXECUTOR'
*
*  MAKE MOVE BY UPDATING BIT MAPS, SQUARES, CASTLE ALLOW
*  USES R0-R4
*
         MACRO
&LABEL   MOVE  &DST,&SRC,&DB
&LABEL   LOCATE &SRC,&DB
         LC    R4,16(R1)
         SLA   R4,3
         STC   &DST,0(R1)
         BSETB R2,0(&SRC)
         BSETB R0,0(&DST)
         OBR   R2,R0
         UPDATE R2,R4,R0,&DB
         IC    R0,CASTLMAP(&SRC)
         IC    R1,CASTLMAP(&DST)
         NR    R0,R1
         IC    R1,BCASTLE
         NR    R1,R0
         STC   R1,BCASTLE
         SRL   R0,2
         IC    R1,WCASTLE
         NR    R1,R0
         STC   R1,WCASTLE
         MEND
*
*  DELETE PIECE ON SQR.  UPDATE BIT MAPS, SQUARES
*  USES R0-R5
*
         MACRO
&LABEL   DELETE &SQR,&DB
&LABEL   LOCATE &SQR,&DB
         LC    R3,16(R1)
         AR    R3,R3              TYPES * 2
         LA    R4,WKO-WK(R3,&DB)  PIECE OFFSET ADDRESS
         LA    R5,11
         SR    R5,R3              BYTE COUNT FOR TR
         EX    R5,DECR            DECREMENT OFFSETS
         LA    R4,0(R1)           -> SQUARES
         LA    R5,14+WSQUARES-WK(&DB)
         SR    R5,R4              BYTE COUNT FOR MVC
         IF    NL
         EX    R5,MVSQRS
         LA    R4,16(R4)
         EX    R5,MVSQRS
         ENDIF
         SLA   R3,2               TYPE * 8
         BSETB R4,0(&SQR)
         UPDATE R4,R3,R0,&DB
         MEND
*
*  ADD.  ADD PIECE OF TYPE TYP ON SQR.  UPDATES BIT MAPS, SQUARES
*  USES R0-R5
*
         MACRO
&LABEL   ADD   &SQR,&TYP,&DB
&LABEL   LR    R3,&TYP
         AR    R3,R3
         LA    R4,WKO-WK(R3,&DB)
         LA    R5,11
         SR    R5,R3
         EX    R5,INCR            INCREMENT OFFSETS INTO SQUARES
         LH    R4,0(R4)
         LA    R4,WSQUARES-WK(R4,&DB)  -> SQUARES
         LA    R5,WSQUARES+14-WK(&DB)
         SR    R5,R4
         EX    R5,M1
         EX    R5,M2
         LA    R4,16(R4)
         EX    R5,M1
         EX    R5,M2
         S     R4,=F'16'
         STC   &SQR,0(R4)
         STC   &TYP,16(R4)
         BSETB R4,0(&SQR)
         SLA   R3,R2
         UPDATE R4,R3,R0,&DB
         MEND
*
*  LOCATE PIECE IN SQUARES LIST
*  RETURNS LOCATION IN R1.  USES R1-R3
*
         MACRO
&LABEL   LOCATE &SQR,&DB
&LABEL   LA    R3,SRCHBD(&SQR)
         MVI   0(R3),X'01'
         TRT   WSQUARES-WK(16,&DB),SRCHBD
         BZ    NOPIECE
         MVI   0(R3),X'00'
         MEND
*
*  UPDATE BIT MAPS BY USING "DELTA BOARD"
*
         MACRO
&LABEL   UPDATE &D,&I,&W,&DB
&LABEL   LB    &W,WK-WK(&I,&DB)
         XBR   &W,&D
         STB   &W,WK-WK(&I,&DB)
         XB    &D,W-WK(&DB)
         STB   &D,W-WK(&DB)
         MEND
         EJECT
*
*  MOVE EXECUTOR
*  R0 = PSEUDO-LEGAL MOVE
*  R1 -> POSDB
*  RC = 0 IF MOVE IS LEGAL
*
MVEX     CSECT
         EXTRN THRTGEN
         ENTER DSA=YES
         LR    R11,R1
         USING POSDB,R11
         LR    R9,R11
         LR    R8,R11
         SR    R2,R2
         IC    R2,COLOR
         SLA   R2,2
         A     R8,DBOF(R2)        SIDE TO MOVE DB
         A     R9,DBOF+4(R2)      ^SIDE TO MOVE DB
         XI    COLOR,X'01'        SWAP SIDE TO MOVE
         MVI   ENPASS,X'00'       CLEAR EP FLAG
         LR    R2,R0              MOVE
         SRDL  R2,8
         SRL   R3,24
         LR    R7,R3              DESTINATION SQUARE
         SRDL  R2,6
         SRL   R3,26
         LR    R6,R3              SOURCE SQUARE
*
*  R6 = SOURCE, R7 = DEST,  R8 = STM DB, R9 = ^STM DB,  R11 = DB
*
         SRDL  R2,2
         SRL   R3,30-2
         L     R15,SWTAB(R3)
         BR    R15
         CNOP  0,4
SWTAB    DC    A(ORDINARY)
         DC    A(PAWNSP)
         DC    A(CASTLING)
         DC    A(TWOSQR)
DBOF     DC    A(WK-WK)
         DC    A(BK-WK)
         DC    A(WK-WK)
*
*  TWO SQUARE PAWN MOVE
*
TWOSQR   LR    R0,R6
         AR    R0,R7
         SRA   R0,1               SQUARE OF ENPASSANT PAWN
         STC   R0,ENPASS
*
*  ORDINARY, RUN OF THE MILL MOVE
*
ORDINARY MOVE  R7,R6,R8           MOVE PIECE
         BSETB R0,0(R7)
         NB    R0,W-WK(R9)        CHECK FOR CAPTURE
         TSTB  R0
         BZ    ENDMVEX
*
*  CAPTURE
*
         DELETE R7,R9
         B     ENDMVEX
*
*  CASTLING
*
CASTLING MOVE  R7,R6,R8
         CR    R7,R6
         IF    L                  IF QUEENSIDE
         S     R6,=F'4'
         LA    R7,3(R6)
         ELSE
         LA    R7,1(R6)
         LA    R6,3(R6)
         ENDIF
         MOVE  R7,R6,R8
         B     ENDMVEX
*
*  ENPASSANT CAPTURE OR PAWN PROMOTION
*
PAWNSP   BSETB R0,0(R6)           SOURCE SQUARE BIT BOARD
         OR    R0,R1
         N     R0,=X'00FFFF00'    PROMOTION CHECK
         IF    NZ
*
*  PAWN PROMOTION
*
         DELETE R6,R8             DELETE PAWN
         LR    R14,R7
         N     R7,=X'0000003F'
         SRL   R14,6
         LA    R14,1(R14)         NEW PIECE TYPE
         ADD   R6,R14,R8          ADD NEW PIECE
         B     ORDINARY
         ENDIF
*
*  ENPASSANT CAPTURE
*
         MOVE  R7,R6,R8           MOVE PAWN
         N     R7,=X'00000007'
         N     R6,=X'00000038'
         OR    R6,R7
         DELETE R6,R9
ENDMVEX  LR    R1,R11
         SCALL THRTGEN
         LB    R0,WK-WK(R8)
         NB    R0,BT-BK(R9)
         OR    R0,R1
         EXIT  RC=(R0)
NOPIECE  UABEND 2000
         CNOP  0,8
CASTLMAP DC    X'0D0F0F0F0C0F0F0E'
         DC    48X'0F'
         DC    X'070F0F0F030F0F0B'
MVSQRS   MVC   0(0,R4),1(R4)
         CNOP  0,8
DECR     TR    2(0,R4),DECTABLE
DECTABLE DC    X'00000102030405060708090A0B0C0D0E0F'
M1       MVC   TMP(0),0(R4)
M2       MVC   1(0,R4),TMP
INCR     TR    2(0,R4),INCTABLE
INCTABLE DC    X'0002030405060708090A0B0C0D0E0F10'
         CNOP  0,8
SRCHBD   DC    64X'00'
         DSA
TMP      DS    CL16
         ENDDSA
POSDB    DSECT
         POSDB
         REGS
         END
