         TITLE 'MAKEMOVE --  COMPUTE MOVE FOR DUCHESS'
MAKEMOVE CSECT
         ENTRY ANTADD
         ENTRY ANTSUB
         ENTRY CHKASYN
*
         EXTRN $PRINVAR
         EXTRN BOARD
         EXTRN BOOKMOVE
         EXTRN CLOCKCHK
         EXTRN COMMANDS
         EXTRN ENDGCHK
         EXTRN ENDGTST
         EXTRN HADD
         EXTRN IBFILL
         EXTRN LMVGEN
         EXTRN MOVECHAR
         EXTRN MVEX
         EXTRN POSDBEQ
         EXTRN PREDICT
         EXTRN SEARCH
         EXTRN SINREAD
         EXTRN TIMECHK
         EXTRN TIMEINIT
         ENTER DSA=YES
         LR    R11,R1
         USING POSDB,R11
*
* IF MAKEMOVE IS ALREADY ACTIVE, EXIT WITH RETURN CODE:
*  8 IF SEARCH MATCH, 12 IF SEARCH SCRAP.
*
         CLI   BUSY,X'00'
         IF    NE
         L     R1,=V($EVAL)
         LH    R0,0(R1)
         NEG   R0
         STH   R0,0(R1)
         L     R1,=V(ANTNG)
         MVI   0(R1),X'00'        NO LONGER ANTICIPATING
         L     R0,SAVE@POS
         LR    R1,R11
         SCALL POSDBEQ
         TST   R15
         IF    E
         ST    R11,SAVE@POS
         LA    R15,8
         B     RET                SEARCH MATCH
         ENDIF
         LA    R15,12             SCRAP SEARCH
         B     RET
         ENDIF
         MVI   BUSY,X'01'
         ST    R11,SAVE@POS
         SCALL ANTADD             ADD IN ANTICIPATION MOVE
         LR    R1,R11
         SCALL ENDGTST
         LR    R5,R15
         SCALL ANTSUB             DELETE MOVE, IF NECESSARY
         LNR   R5,R5
         IF    NZ
         SCALL PAUSE
         C     R15,=F'12'
         BE    QUIT
* PRINT END GAME MESSAGE
         LR    R1,R11
         SCALL ENDGCHK
         LR    R15,R5
         B     QUIT
         ENDIF
         L     R1,=V(TIMEANT)
         ZERO  R0
         ST    R0,0(R1)
         SCALL TIMEINIT
         ST    R11,PLIST          SAVE A(DATABASE) IN PARM LIST.
         LA    R10,MLIST          PICK UP A(MOVE LIST)
         ST    R10,PLIST+4        SAVE IT.
         LA    R1,PLIST           R1 = A(MOVE GEN P LIST)
         SCALL LMVGEN             GENERATE THE LEGAL MOVES.
         LR    R2,R1              RESCUE END POINTER.
         LA    R10,2(R10)         INCREMENT MOVE POINTER -- IS IT TOO
         CR    R2,R10             IF ONLY 1 MOVE, THEN MAKE IT.
         IF    Z
         LH    R0,MLIST           PICK UP ONLY LEGAL MOVE.
         B     FOUND
         ENDIF
         LR    R1,R11             GET A(DATABASE).
         SCALL BOOKMOVE           GET THE BOOK MOVE.
         LR    R0,R1              RECOVER THE MOVE POINTER.
         LTR   R15,R15            ANYTHING THERE?
         BZ    FOUND              YES -- TAKE IT.
         EJECT
         L     R1,=V(TIMESW)
         TM    0(R1),CPUAVG+REALAVG
         IF    NZ
         L     R1,=V(TIMEOFF)
         L     R0,0(R1)
         SRDA  R0,32
         D     R0,=F'10'
         L     R2,=V(TIMEWISH)
         A     R1,0(R2)
         IF    M
         ZERO  R1                 ENSURE TARGET IS NON-NEGATIVE
         ENDIF
         L     R2,=V(TIMETARG)
         ST    R1,0(R2)
         ENDIF
         LR    R1,R11
         SCALL SEARCH
         C     R15,=F'12'
         BE    QUIT
         SCALL PAUSE
         C     R15,=F'12'
         BE    QUIT
         L     R11,SAVE@POS
         L     R1,=V(PVARTBL)
         L     R2,=V($PRINVAR)
         MVC   0(2*NUMPLY,R1),0(R2)
         LH    R0,0(R1)
         LR    R1,R11
         SCALL PRMOVE
         L     R2,=V($EVAL)
         LH    R4,0(R2)
         NEG   R4
         STH   R4,0(R2)
         LPR   R5,R4
         CH    R5,=AL2(WIN-1000)
         IF    NL
         CH    R5,=AL2(WIN-2)
         IF    L
         TST   R4
         IF    P
         PRNTF 'Mate in'
         ELSE
         PRNTF 'Mated in'
         ENDIF
         CH    R5,=AL2(WIN-1000)
         IF    E
         PRNTF ' *unknown* more moves%L'
         ELSE
         LH    R4,=AL2(WIN)
         SR    R4,R5              PLY TO MATE
         SRA   R4,1               MOVES TO MATE
         ST    R4,WRK
         LA    R5,SINGULAR
         C     R4,=F'1'
         IF    H
         LA    R5,PLURAL
         ENDIF
         PRNTF ' %F more move%S%L',(WRK,(R5)),PLIST=PLIST
         ENDIF
         ENDIF
         ENDIF
         L     R3,=V($CPLX)
         PRNTF 'val %H  cplx %H  ',((R2),(R3)),PLIST=PLIST
         LH    R4,0(R2)
         NEG   R4
         STH   R4,0(R2)
         L     R2,=V(CELAPSE)
         L     R3,=V(RELAPSE)
         PRNTF 'time %T/%T  %F%%  tcpu %T%L',                          *
               ((R2),(R3),TRATIO,TCPU),PLIST=PLIST
         LA    R6,4
         L     R1,=V(STATSLVL)
         L     R1,0(R1)
         C     R1,=F'1'
         IF    NL
         LA    R6,6
         ENDIF
         L     R2,=V($#HASHES)
         PRNTF 'Pos %F',((R2)),PLIST=PLIST,FO=(R6)
         L     R3,=V($#HITS)
         SCALL PERCENT
         ST    R1,WRK
         PRNTF '  Hit %F%%',(WRK),PLIST=PLIST,FO=(R6)
         L     R3,=V($#STOPS)
         SCALL PERCENT
         ST    R1,WRK
         PRNTF '  Stop %F%%',(WRK),PLIST=PLIST,FO=(R6)
         L     R3,=V($#EVALS)
         SCALL PERCENT
         ST    R1,WRK
         PRNTF '  Eval %F%%',(WRK),PLIST=PLIST,FO=(R6)
         L     R4,=V(TTIMEANT)
         L     R5,=V(TTIMEWAS)
         L     R0,0(R4)
         A     R0,0(R5)
         IF    NZ
         PRNTF '  s %T  w %T',((R4),(R5)),PLIST=PLIST,FO=(R6)
         ENDIF
         PRNTF '%L',FO=(R6)
         L     R2,=V(TTOVER)
         L     R0,0(R2)
         TST   R0
         IF    NZ
         PRNTF 'Overflow %F%L',((R2)),PLIST=PLIST,FO=(R6)
         ZERO  R0
         ST    R0,0(R2)
         ENDIF
         B     DONE
*
*  R0 = MOVE TO MAKE
*
FOUND    SCALL PAUSE
         C     R15,=F'12'
         BE    QUIT
         L     R11,SAVE@POS
         LR    R1,R11
         SCALL PRMOVE
DONE     EQU   *
         L     R1,=V(PREDSW)
         CLI   0(R1),X'00'
         IF    NE
         LA    R0,6
         LR    R1,R11
         L     R2,=V(PVARTBL)
         SCALL PREDICT
         ENDIF
         L     R1,=V(BOARDSW)
         CLI   0(R1),X'00'
         IF    NE
         LR    R1,R11
         SCALL BOARD
         ENDIF
         LR    R1,R11
         SCALL ENDGCHK
         LNR   R15,R15
         IF    Z
         SCALL CLOCKCHK
         ZERO  R15
         ENDIF
QUIT     MVI   BUSY,X'00'
         B     RET
         EJECT
*
*        ENTER WITH:
*
*              R0 = MOVE TO MAKE
*              R1 -> DATABASE
*
PRMOVE   ENTER DSA=YES
         LR    R11,R1
         LA    R10,STRING         GET A(STRING) FOR THE OUTPUT MOVE.
         ST    R10,PLIST+8
         STH   R0,MOVE            SAVE THE INTERNAL FMT MOVE.
         ST    R11,PLIST          SET UP PARM LIST.
         LA    R10,MOVE
         ST    R10,PLIST+4
         LA    R1,PLIST           POINT TO THE PARAMETER LIST.
         SCALL MOVECHAR           TRANSLATE IT.
         L     R10,=V(HNUM)       PICK UP THE ADDRESS OF THE MOVE #
         LH    R10,0(R10)         GET THE PLY #
         LA    R10,2(R10)         INCREMENT IT.
         SRL   R10,1              COMPUTE MOVE # FROM PLY #
         ST    R10,WRK          SAVE IT
         PRNTF '%2F. ',(WRK),PLIST=PLIST
         CLI   COLOR,X'00'        WHITE?
         IF    NZ
         PRNTF '... '
         ENDIF
         PRNTF '%S%L',(STRING),PLIST=PLIST
         LR    R1,R11             GET THE MOVE.
         LH    R0,MOVE
         SCALL HADD               ADD IT TO HISTORY.
         L     R1,=V(HCOUNT)
         LH    R2,0(R1)
         LA    R2,1(R2)
         STH   R2,0(R1)
         SCALL TIMECHK
         LM    R2,R3,0(R1)
         A     R2,TCPU
         L     R14,=V(TIMESW)
         TM    0(R14),CPUAVG
         IF    NZ
         L     R15,=V(TIMEANT)
         S     R2,0(R15)
         ENDIF
         ST    R2,TCPU
         A     R3,TREAL
         ST    R3,TREAL
*
         LM    R3,R4,0(R1)
         M     R2,=F'200'
         TST   R4
         IF    NZ
         DR    R2,R4
         ENDIF
         LA    R3,1(R3)
         SRA   R3,1
         ST    R3,TRATIO
*
         LM    R2,R3,0(R1)
         L     R4,=V(ELAPSE)
         STM   R2,R3,0(R4)
         L     R4,=V(TIMEANT)
         L     R4,0(R4)
*
         L     R1,=V(TIMESW)
         TM    0(R1),CPUAVG+REALAVG
         IF    NZ
         LR    R0,R2
         TM    0(R1),REALAVG
         IF    NZ
         LR    R0,R3
         L     R14,=V(TIMELEFT)
         L     R15,0(R14)
         TM    0(R1),TCLOCK
         IF    NZ
         L     R1,=V(OVERHEAD)
         S     R15,0(R1)          REDUCE TIME LEFT BY OVERHEAD
         ENDIF
         SR    R15,R0             REDUCE BY TIME USED
         AR    R15,R4             GAIN ANTICIPATION TIME
         ST    R15,0(R14)         NEW PREDICTED TIME LEFT
         ENDIF
         SR    R0,R4              TIME USED ON OWN TIME
         L     R1,=V(TIMEWISH)
         S     R0,0(R1)           EXCESS TIME SPENT
         LCR   R0,R0              TIME CORRECTION DESIRED
         L     R1,=V(TIMEOFF)
         A     R0,0(R1)
         ST    R0,0(R1)
         ENDIF
         B     RET
         EJECT
*
* COMPUTE 0(R3) PERCENT OF 0(R2)
* RETURN VALUE IN R1
*
PERCENT  ENTER
         L     R1,0(R3)
         M     R0,=F'100'
         L     R15,0(R2)
         LTR   R14,R15
         IF NZ
         SRA   R14,1
         AR    R1,R14
         DR    R0,R15
         ENDIF
         EXIT  RTN=(R1)
         EJECT
         EJECT
*
* PAUSE UNTIL SEARCH IS CONFIRMED (8) OR CANCELLED (12)
*
PAUSE    ENTER
         LA    R15,8
         L     R2,=V(ANTNG)
         CLI   0(R2),X'00'
         IF    NE
         MVI   0(R2),X'00'
         REPEAT
         L     R2,=V(ANT)
         IC    R3,0(R2)
         MVI   0(R2),X'00'
         L     R4,=V(ASYNCH)
         IC    R5,0(R4)
         MVI   0(R4),X'00'
         SCALL COMMANDS
         STC   R3,0(R2)
         STC   R5,0(R4)
         TST   R15
         UNTIL NZ
         ENDIF
         B     RET
         EJECT
*
* ANTADD - ADD ANTICIPATION MOVE
* ANTSUB - DELETE MOVE
*
ANTADD   ENTER
         SCALL ANTSETUP
         TST   R15
         IF    Z
         L     R1,=V(PVARTBL)
         LH    R0,0(R1)
         STH   R0,0(R2)
         ZERO  R0
         STH   R0,2(R2)
         LA    R3,1(R3)
         STH   R3,0(R4)
         ENDIF
         B     RET
ANTSUB   ENTER
         SCALL ANTSETUP
         TST   R15
         IF    Z
         S     R2,=F'2'
         ZERO  R0
         STH   R0,0(R2)
         S     R3,=F'1'
         STH   R3,0(R4)
         ENDIF
         B     RET
ANTSETUP EQU   *
         USING *,R15
         LA    R0,8
         L     R1,=V(ANTNG)
         CLI   0(R1),X'00'
         IF    NE
         ZERO  R0
         L     R4,=V(HNUM)
         LH    R3,0(R4)
         L     R2,=V(HMOVES)
         AR    R2,R3
         AR    R2,R3
         ENDIF
         LR    R15,R0
         BR    R14
         EJECT
*
* CHECK FOR ASYNCHRONOUS COMMAND (GO, WHAT)
*
CHKASYN  ENTER DSA=YES
         L     R1,=V(ASYNCH)
         LC    R2,0(R1)
         L     R1,=V(ANT)
         LC    R3,0(R1)
         OR    R2,R3
         IF    NZ
         SCALL IBFILL
         TST   R15
         IF    Z
         GSTR
         TST   R15
         BNZ   RET0
         CLC   2(2,R1),=C'ME'
         BE    RET0
         CLC   0(4,R1),GOSTR
         LA    R15,4
         BE    RET
         CLC   0(6,R1),WHATSTR
         IF    E
         L     R2,=V($EVAL)
         L     R3,=V($CPLX)
         L     R4,=V($#HASHES)
         L     R5,=V($#EVALS)
         PRNTF 'val %H  cplx %H  hashes %F  evals %F%L',               *
               ((R2),(R3),(R4),(R5)),PLIST=PLIST
         LA    R0,6
         L     R1,=V(CBOARD)
         L     R2,=V($PRINVAR)
         SCALL PREDICT
         ELSE
         PRNTF 'Syntax%L'
         ENDIF
         ENDIF
         ENDIF
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
TRATIO   DS    F
TCPU     DC    F'0'
TREAL    DC    F'0'
SAVE@POS DS    F
GOSTR    STRNG 'GO'
WHATSTR  STRNG 'WHAT'
SINGULAR STRNG ''
PLURAL   STRNG 's'
WIN      EQU   30000
BUSY     DC    X'00'
CPUAVG   EQU   X'20'
REALAVG  EQU   X'10'
TCLOCK   EQU   X'08'
NUMPLY   EQU   40
         DSA
PLIST    DS    8F
MOVE     DS    F
STRING   DS    CL32
MLIST    DS    250H
WRK      DS    F
         ENDDSA
         REGS
POSDB    DSECT
         POSDB
         END
