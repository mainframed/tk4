         TITLE 'FINDMOVE -- SUBROUTINE TO CHECK MOVE LEGALITY'
FINDMOVE CSECT
         EXTRN LMVGEN
         EXTRN MVECHK
*
*        SUBROUTINE TO ANALYSE 1 MOVE DESCRIPTOR BLOCK. THE BLOCK IS
*        OF THE FOLLOWING FORMAT:
*
*              $PIECE    THE PIECE MOVED.
*              $CAPT     THE PIECE CAPTURED.
*              $SRANK    THE STARTING RANK
*              $SFILE    THE STARTING FILE.
*              $DRANK    THE DESTINATION RANK
*              $DFILE    THE DESTINATION FILE.
*              $PROM     THE PROMOTION TYPE
*              $CHECK    THE CHECK CODE.
*
*        THIS SUBROUTINE WILL RETURN A MOVE IF FOUND, OR AN ERROR
*        CODE. THE PARAMETER LIST LOOKS LIKE:
*
*              0(R1)     A(POSITION DATABASE)
*              4(R1)     MOVE DESCRIPTOR BLOCK
*              8(R1)     THE ADDRESS OF A BUFFER TO RECEIVE THE MOVE.
*
*        RETURN CODES ARE PASSED BACK IN R15. POSSIBLE VALUES ARE:
*
*              0         MOVE IS COMPLETELY LEGAL AND UNAMBIGUOUS.
*              4         MOVE IS AMBIGUOUSLY SPECIFIED.
*              8         THE MOVE IS ILLEGAL.
*
         EJECT
         ENTER DSA=YES
         L     R11,0(R1)          GET A(POSITION DATABASE)
         USING POSDB,R11          NOTE BASE REGISTER USAGE.
         L     R8,4(R1)           GET MOVE DESCRIPTOR BLOCK.
         USING MVDSCBLK,R8        NOTE BASE REGISTER USAGE.
         L     R10,8(R1)          GET A(DEST).
         SR    R9,R9              CLEAR THE POINTER TO THE MOVE.
         LA    R0,8               GET DEFAULT SEVERITY CODE.
         STH   R0,SEV             SAVE IT AWAY.
         LA    R2,MOVELIST        GET A(MOVELIST) FOR SUBR CALL
         ST    R11,PLIST          SAVE IN PARAMETER LIST.
         ST    R2,PLIST+4         SAVE IN PARAMETER LIST.
         OI    PLIST+4,X'80'      SIGNAL END OF PARAMETERS.
         LA    R1,PLIST           POINT TO PARAMETER LIST.
         SCALL LMVGEN             GENERATE LEGAL MOVES.
*
*        REGISTER USAGE:
*
*        R8 -> MOVE DESCRIPTOR BLOCK
*        R9 -> MOVE IN LIST WHICH MATCHES DESCRIPTOR BLOCK OR 0
*        R10 -> DESTINATION FOR MOVE (0(R9)
*        R11 -> POSITION DATABASE.
*
         LR    R6,R1              RECOVER LAST MOVE.
         SR    R6,R2              ADJUST R6.
         SR    R7,R7              R7 WILL BE USED TO GO THRU THE MOVES
         CR    R7,R6              DONE YET?
         WHILE L                  LOOP OVER ALL MOVES.
         EJECT
         TM    $SRANK,$SPEC       IS THE STARTING RANK SPECIFIED?
         IF    NZ                 YES.
         SR    R5,R5              CLEAR TEMP. REG.
         IC    R5,$SRANK          GET THE RANK.
         N     R5,=X'00000007'    KEEP ONLY RANK DESIGNATION.
         SR    R4,R4              CLEAR ANOTHER TEMP. REG.
         IC    R4,MOVELIST(R7)    PICK UP THE REAL RANK.
         SRL   R4,3               SHIFT RANK TO APPROPRIATE PLACE.
         N     R4,=X'00000007'    KEEP ONLY RANK.
         CR    R4,R5              IS THIS THE CORRECT RANK?
         BNZ   ENDWHILE           NO MATCH -- THIS ISN'T IT
         ENDIF
         EJECT
         TM    $SFILE,$SPEC       SOURCE FILE SPECIFIED?
         IF    NZ
         SR    R5,R5              GET A TEMP. REG.
         IC    R5,$SFILE          GET T5E SOURCE FILE.
         N     R5,=X'00000007'    AND OFF ALL BUT FILE SPEC.
         SR    R4,R4              PICK UP SRC FILE FROM MOVE LIST
         IC    R4,MOVELIST(R7)
         N     R4,=X'00000007'    KEEP ONLY RELEVANT PART.
         CR    R4,R5              FILES EQUAL?
         IF    NZ
         TM    $SFILE,$AMBIG      FILE AMBIGUOUS?
         BZ    ENDWHILE           NO
         LA    R3,7               INVERT THE FILE.
         SR    R3,R4
         CR    R3,R5              MATCH NOW?
         BNZ   ENDWHILE           NO
         ENDIF
         ENDIF
         EJECT
         TM    $DRANK,$SPEC       DEST RANK SPECIFIED?
         IF    NZ
         SR    R5,R5              CLEAR TEMP. REG.
         IC    R5,$DRANK          GET THE DESIRED RANK.
         N     R5,=X'00000007'    KEEP ONLY RELEVANT PART.
         SR    R4,R4              GET TEMP. REG.
         IC    R4,MOVELIST+1(R7)  GET THE DEST IN LIST.
         SRL   R4,3               SHIFT TO APPROPRIATE POSITION.
         N     R4,=X'00000007'    KEEP ONLY DESIRED PART.
         CR    R4,R5              IS IT A MATCH?
         BNZ   ENDWHILE           NO -- NEXT MOVE.
         ENDIF
         EJECT
         TM    $DFILE,$SPEC       DEST FILE SPECIFIED?
         IF    NZ
         SR    R5,R5              GET TEMP.
         IC    R5,$DFILE          GET THE FILE.
         N     R5,=X'00000007'    KEEP ONLY DESIRED PART.
         SR    R4,R4
         IC    R4,MOVELIST+1(R7)              GET DEST.
         N     R4,=X'00000007'    KEEP ONLY FILE.
         CR    R4,R5              THIS THE RIGHT FILE?
         IF    NE                 NO
         TM    $DFILE,$AMBIG      AMBIGUOUS?
         BZ    ENDWHILE           NO
         LA    R3,7               INVERT THE FILE.
         SR    R3,R4              INVERT THE FILE.
         CR    R3,R5              WHAT ABOUT NOW?
         BNZ   ENDWHILE           NO
         ENDIF
         ENDIF
         EJECT
         TM    $PIECE,$SPEC       THE PIECE TYPE SPECIFIED?
         IF    NZ
         SR    R5,R5              CLEAR TEMP.
         IC    R5,$PIECE          GET TEH PIECE.
         N     R5,=X'00000007'    CLEAN IT UP
         SLL   R5,3               DOUBLEWORD ADDRESSING.
         CLI   COLOR,X'00'        WHITE?
         IF    Z
         LA    R5,WK(R5)          ADDRESS BOARD OF CORRECT PIECE
         ELSE
         LA    R5,BK(R5)
         ENDIF
         SR    R4,R4              CLEAR TEMP.
         IC    R4,MOVELIST(R7)    GET TEH DEST SQUARE.
         N     R4,=X'0000003F'    KEEP MOVE SQUARE.
         BSETB R2,0(R4)           SET A PIECE ON THAT SQUARE IN TEMP.
         NB    R2,0(R5)           IS THAT A MOVE?
         TSTB  R2                 ANYTHING LEFT?
         BZ    ENDWHILE           NO -- ILLEGAL.
         ENDIF
         EJECT
         TM    $CAPT,$SPEC        IS THIS A CAPTURE?
         IF    NZ
         TM    $CAPT,$NONE        IS IT SPECIFICALLY NOT A CAPTURE?
         IF    NZ
         SR    R5,R5
         IC    R5,MOVELIST+1(R7)  GET THE DEST SQUARE.
         N     R5,=X'0000003F'    KEEP ONLY SQUARE.
         BSETB R2,0(R5)           SET THE APPROPRIATE BIT.
         CLI   COLOR,X'00'        WHITE TO MOVE?
         IF    Z
         NB    R2,B               IF SO, CHECK TO SEE IF A BLACK PIECE
         ELSE
         NB    R2,W               OTHERWISE SEE IF IT IS A WHITE PIECE
         ENDIF
         TSTB  R2                 IS IT A CAPTURE?
         BNZ   ENDWHILE           YES -- ILLEGAL MOVE.
         SR    R4,R4              CLEAR TMP REG.
         IC    R4,MOVELIST(R7)    GET THE DEST SQR
         N     R4,=X'0000003F'    KEEP ONLY GOOD STUFF.
         BSETB R2,0(R4)           SET THE APPROPRIATE BIT.
         LB    R4,WP              COMPUTE THE SUM OF ALL PAWNS.
         OB    R4,BP
         NBR   R2,R4              IS THE PIECE MOVING A PAWN?
         TSTB  R2
         IF    NZ                 YES
         SR    R4,R4
         IC    R4,ENPASS          GET ENPASS INDICATOR.
         LTR   R4,R4              SET COND CODES.
         IF    NZ
         SR    R5,R5              GET THE DEST SQR
         IC    R5,MOVELIST+1(R7)
         N     R5,=X'0000003F'    KEEP ONLY THE GOOD STUFF
         CR    R4,R5              IS THE MOVE ENPASS?
         BZ    ENDWHILE           YES -- ILLEGAL -- MUST NOT BE CAPTURE
         ENDIF
         ENDIF
         ELSE
         SR    R5,R5              TEMP. REG.
         IC    R5,$CAPT           PICK UP THE CODE.
         N     R5,=X'00000007'    KEEP CODE
         SLL   R5,3               ADDRESS DOUBLEWORDS.
         CLI   COLOR,X'00'        WHITE?
         IF    Z
         LA    R5,BK(R5)          ELSE GET THE BLACK PIECES.
         ELSE
         LA    R5,WK(R5)          PICK UP KING POINTER.
         ENDIF
         SR    R4,R4              CLEAR TEMP. REG.
         IC    R4,MOVELIST+1(R7)  GET THE DEST SQUARE.
         N     R4,=X'0000003F'    KEEP ONLY LOW ORDER.
         BSETB R2,0(R4)           SET A BIT ON THAT SQUARE.
         NB    R2,0(R5)           IS THIS A CAPTURE OF THAT PIECE?
         TSTB  R2                 SEE IF THE PIECE STILL THERE
         IF    NZ
         TM    $CAPT,$ENPASS      IS THIS TO BE ENPASSENT?
         BNZ   ENDWHILE           YES -- BUT THIS MOVE IS NOT ENPASSENT
         ELSE
         SR    R4,R4              GET THR SRC SQR
         IC    R4,MOVELIST(R7)
         N     R4,=X'0000003F'    KEEP ONLY GOOD STUFF.
         BSETB R2,0(R4)           GET A BIT ON THE SRC SQR.
         LB    R4,WP              GET ALL PAWNS.
         OB    R4,BP
         NBR   R2,R4              IS THE MOVER A PAWN?
         TSTB  R2
         BZ    ENDWHILE           NO -- NOT A PAWN MOVING.
         SR    R4,R4
         IC    R4,ENPASS          GET THE DST SQR IF AN ENPASS CAPTURE.
         LTR   R4,R4              ENPASS POSSIBLE?
         BZ    ENDWHILE           NO -- ILLEGAL MOVE.
         SR    R5,R5              CLEAR TMP REG
         IC    R5,MOVELIST+1(R7)  GET THE REAL DST SQR
         N     R5,=X'0000003F'    KEEP ONLY GOOD STUFF.
         CR    R4,R5              IS THE DST SQR THE ENPASS SQR?
         BNZ   ENDWHILE           NO -- ILLEGAL MOVE.
         ENDIF
         ENDIF
         ENDIF
         EJECT
         TM    $PROM,$SPEC        A PROMOTION SPECIFIED?
         IF    NZ
         SR    R5,R5              TEMP. REG.
         IC    R5,MOVELIST(R7)    GET THE MOVE TYPE CODE.
         N     R5,=X'000000C0'    KEEP THE TYPE CODE.
         C     R5,=X'00000040'    IS IT A SPECIAL PAWN MOVE?
         BNZ   ENDWHILE           NO -- ILLEGAL.
         IC    R5,MOVELIST+1(R7)  GET THE MOVE DEST.
         N     R5,=X'00000038'    LOOK AT THE SQUARE.
         LTR   R5,R5              A PROMOTION IF RANK IS 0
         BZ    ISPROM             OK -- IS IT THE RIGHT ONE?
         C     R5,=X'00000038'    ALSO IF THE MOVE IS TO RANK 7
         BNZ   ENDWHILE           ILLEGAL OTHERWISE.
ISPROM   IC    R5,MOVELIST+1(R7)  OTHERWISE GET THE MOVE.
         N     R5,=X'000000C0'    KEEP ONLY PROMOTION CODE.
         SRL   R5,6               SHIFT TO APPROPRIATE POSITION.
         SR    R4,R4              GET TEH REQUESTED PIECE
         IC    R4,$PROM
         N     R4,=X'00000003'    KEEP IN ONLY THE RELEVANT STUFF.
         CR    R4,R5              IDENTICAL?
         BNZ   ENDWHILE           NO -- NOT THIS ONE.
         ENDIF
         EJECT
         TM    $CHECK,$SPEC       IS THE CHECK PARAMETER SPEC?
         IF    NZ
         LR    R1,R11             GET THE DATABASE.
         LH    R0,MOVELIST(R7)    GET THE LIST OF MOVES.
         SCALL MVECHK             IS THIS MOVE A CHECK, OR A MATE?
         C     R15,=F'2'          TEST RETURN CODE - IS IT NOT CHECK?
         BL    ENDWHILE           YES -- CHECK NEXT MOVE.
         TM    $CHECK,$MATE       DID HE SAY IT WAS MATE?
         IF    NZ
         C     R15,=F'3'          MAKE SURE THAT IS MATE.
         BNZ   ENDWHILE           NO -- NEXT MOVE, PLEASE.
         ENDIF
         ENDIF
         EJECT
*
*        FOUND A LEGAL MOVE.
*
         TST   R9
         IF    NZ
         LH    R0,0(R9)
         LH    R1,MOVELIST(R7)
         XR    R0,R1
         N     R0,=X'FFFFFF3F'
         IF    NZ                 YES -- THEN IT IS AMBIGUOUS.
         EXIT  RC=4               SIGNAL AMBIGUOUS MOVE.
         ENDIF
         ELSE
         LA    R9,MOVELIST(R7)    ELSE POINT TO THE MOVE.
         ENDIF
         SR    R0,R0              GET THE SEVERITY.
         STH   R0,SEV             SAVE IT.
ENDWHILE LA    R7,2(R7)           BUMP MOVES POINTER.
         CR    R7,R6              DONE ?
         ENDWHILE
         EJECT
         LH    R0,SEV             GET RETURN CODE.
         XC    0(2,R10),0(R10)
         MVC   2(2,R10),0(R9)
         EXIT  RC=(R0)
         EJECT
         DSA
PLIST    DS    3F                 PARAMETER LIST FOR MOVE GENERATOR.
SEV      DS    H                  SEVERITY CODE
MOVELIST DS    250H               MOVE LIST ROOM.
         ENDDSA
MVDSCBLK DSECT
$PIECE   DS    X                  PIECE TYPE.
$CAPT    DS    X                  CAPTURED PIECE TYPE.
$SRANK   DS    X                  SRC RANK
$SFILE   DS    X                  SRC FILE.
$DRANK   DS    X                  DST RANK
$DFILE   DS    X                  DST FILE
$PROM    DS    X                  PROMOTION INFORMATION.
$CHECK   DS    X                  CHECK INFORMATION (NOT IMP)
$SPEC    EQU   X'80'              PARAMETER IS SPECIFIED.
$AMBIG   EQU   X'40'              FILE IS AMBIGUOUS.
$NONE    EQU   X'20'              MOVE MUST NOT BE A CAPTURE ($CAPT)
$ENPASS  EQU   X'10'              MOVE IS AN ENPASS CAPTURE ($CAPT)
$MATE    EQU   X'04'              MOVE IS MATE ($CHECK)
POSDB    DSECT
         POSDB
         REGS
         END
