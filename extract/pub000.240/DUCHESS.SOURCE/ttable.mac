         TITLE 'TTABLE -- TRANSPOSITION TABLE UTILITIES'
TTABLE   CSECT
         ENTRY TTCLEAR
         ENTRY TTCFLAGS
         ENTRY TTINIT
         ENTRY TTPREP
         ENTRY NGET
         ENTRY NLOOK
         ENTRY PHASH
         ENTRY PFTAB
         ENTRY TTOVER
*
         EXTRN MVEX
         EXTRN REVMNUM
         EXTRN MOVECHAR
         EJECT
*
* INTIALIZE AND CLEAR TTABLE
*
TTCLEAR  ENTER
         L     R8,=V(@TTABLE)
         L     R8,0(R8)
         L     R9,=V(TTABLEN)
*
* COMPUTE NSTART (USED BY NGET/NLOOK)
*
         L     R3,0(R9)
         C     R3,=A(NODELEN*(SRCHLEN+1))
         IF    L
         L     R3,=A(NODELEN*(SRCHLEN+1))
         ENDIF
         ZERO  R2
         D     R2,=A(NODELEN)
         M     R2,=A(NODELEN)     REDUCE TTABLEN TO A
         ST    R3,0(R9)           MULTIPLE OF NODELEN
         D     R2,=A(NODELEN)
         S     R3,=A(SRCHLEN-1)
         ST    R3,NSTART
*
* DIAGNOSTIC OUTPUT
*
         PRNTF 'ttable  bytes %F  entries %F%L',((R9),NSTART)
*
* ZERO TTABLE
*
         L     R9,0(R9)
         ALR   R9,R8
         CR    R8,R9
         WHILE L
         XC    0(NODELEN,R8),0(R8)
         LA    R8,NODELEN(R8)
         CR    R8,R9
         ENDWHILE
         B     RET0
         EJECT
*
* CLEAR SELECTED BITS FROM TTABLE ENTRIES
*  R0 = BITS TO BE CLEARED
*
TTCFLAGS ENTER
         X     R0,=F'-1'
         L     R8,=V(@TTABLE)
         L     R8,0(R8)
         USING NODE,R8
         L     R9,=V(TTABLEN)
         L     R9,0(R9)
         ALR   R9,R8
         CR    R8,R9
         WHILE L
         IC    R1,FLAGS
         NR    R1,R0
         STC   R1,FLAGS
         LA    R8,NODELEN(R8)
         CR    R8,R9
         ENDWHILE
         DROP  R8
         B     RET0
         EJECT
*
*  INITIALIZE TTABLE FOR USE BY SEARCH
*  RC = 0 IF NO THREEFOLD REPETITION
*
TTINIT   ENTER DSA=YES
*
* CLEAR OVERFLOW COUNT
*
         ZERO  R0
         ST    R0,TTOVER
*
* CLEAR HISTORY AND REPETITION (FROM TIME ABORT) FLAGS
*
         LA    R0,HIST1+HIST2+REP
         SCALL TTCFLAGS
*
*  INSTALL HISTORY POSITIONS
*
         L     R4,=V(HNUM)
         LH    R3,0(R4)
         L     R9,=V(HMOVES)
         LR    R7,R3
         AR    R7,R3
         AR    R7,R9              END OF HISTORY
         SCALL REVMNUM
         AR    R1,R1
         SLR   R7,R1              BEGINNING OF REVERSIBLE MOVES
         L     R10,=V(HBOARD)
         MVDB  TMPDB,0(R10)
         CR    R9,R7
         WHILE L
         LH    R0,0(R9)
         LA    R9,2(R9)
         LA    R1,TMPDB
         SCALL MVEX
         CR    R9,R7
         ENDWHILE
*
*  INSTALL REMAINING MOVES IN TTABLE
*
         LOOP
         LA    R1,TMPDB
         SCALL NGET
         USING NODE,R1
         TM    FLAGS,HIST2
         BNZ   REP3
         XI    FLAGS,HIST1
         TM    FLAGS,HIST1
         IF    Z
         OI    FLAGS,HIST2
         ENDIF
         LH    R0,0(R9)
         LA    R9,2(R9)
         TST   R0
         BREAK Z
         STH   R0,MOVE
         DROP  R1
         LA    R1,TMPDB
         SCALL MVEX
         ENDLOOP
         ZERO  R15
         B     DONE
REP3     LA    R15,4
DONE     B     RET
         EJECT
*
*  PREPARE FOR NEXT ITERATION, R1 -> POSDB
*
TTPREP   ENTER DSA=YES
*
*  INSTALL PRINCIPLE VARIATION IN TTABLE
*
         LR    R10,R1
         MVDB  TMPDB,0(R10)
         L     R9,=V($PRINVAR)
         LOOP
         LH    R0,0(R9)
         LA    R9,2(R9)
         TST   R0
         BREAK Z
         LA    R1,TMPDB
         SCALL NGET
         USING NODE,R1
         STH   R0,MOVE
         DROP  R1
         LA    R1,TMPDB
         SCALL MVEX
         ENDLOOP
         EJECT
*
* COMPUTE PIECE FREQUENCY TABLE
* 1. ZERO PFTAB
*
         LA    R7,PFTAB
         DO    R6,6
         XC    0(256,R7),0(R7)    2*64*2 BYTES
         LA    R7,256(R7)
         ENDDO
*
* 2. ACCUMULATE FREQUENCIES
*
         MVDB  TMPDB,0(R10)
         L     R9,=V($PRINVAR)
         LOOP
         LA    R1,TMPDB
         SCALL NGET
         LR    R8,R1
         USING NODE,R8
         LA    R7,PFTAB
         LB    R0,KEY+16          KBRP
         LB    R2,KEY+24          QNRP
         LBR   R4,R0
         NBR   R4,R2              RP
         OBR   R0,R2              KQRBNP
         XBR   R2,R4              QN
         STM   R2,R5,QN
         BSETB R2,0
         DO    R6,64
         LBR   R14,R0
         NBR   R14,R2
         TSTB  R14
         IF    NZ
         ZERO  R5
         NB    R14,KEY            WHITE
         TSTB  R14
         IF    Z
         LA    R5,6*64*2(R5)
         ENDIF
         LBR   R14,R2
         NB    R14,KEY+8          KQR
         TSTB  R14
         IF    Z
         LA    R5,3*64*2(R5)
         ENDIF
         LBR   R14,R2
         NB    R14,QN
         TSTB  R14
         IF    NZ
         LA    R5,64*2(R5)
         ENDIF
         LBR   R14,R2
         NB    R14,RP
         TSTB  R14
         IF    NZ
         LA    R5,2*64*2(R5)
         ENDIF
         LH    R14,0(R7,R5)
         LA    R14,1(R14)
         CH    R14,=AL2(INF)
         IF    NH
         STH   R14,0(R7,R5)
         ENDIF
         ENDIF
         LA    R7,2(R7)
         SRDL  R2,1
         ENDDO
         DROP  R8
         LH    R0,0(R9)
         LA    R9,2(R9)
         TST   R0
         BREAK Z
         LA    R1,TMPDB
         SCALL MVEX
         ENDLOOP
*
* 3. SCALE PFTAB
*
         LA    R7,PFTAB
         DO    R6,12
         LR    R5,R7
         LA    R3,1
         DO    R4,64
         CH    R3,0(R5)
         IF    L
         LH    R3,0(R5)
         ENDIF
         LA    R5,2(R5)
         ENDDO
         DO    R4,64
         LH    R0,0(R7)
         SRDA  R0,32
         SLDA  R0,3
         DR    R0,R3
         STH   R1,0(R7)
         LA    R7,2(R7)
         ENDDO
         ENDDO
*
* PRINT TABLE WEIGHTS
*
*         LA    R7,PFTAB
*         DO    R6,12
*         DO    R5,64
*         PRNTF '%2H',((R7)),FO=4
*         LA    R7,2(R7)
*         ENDDO
*         PRNTF '%L',FO=4
*         ENDDO
         EJECT
*
* DECREASE THE WORTH OF UNREFERENCED NODES
*
         L     R1,=V($#HASHES)
         L     R1,0(R1)
         SLA   R1,2
         C     R1,NSTART
         IF    H
         L     R8,=V(@TTABLE)
         L     R8,0(R8)
         USING NODE,R8
         L     R9,=V(TTABLEN)
         L     R9,0(R9)
         ALR   R9,R8
         CR    R8,R9
         WHILE L
         TM    FLAGS,REF
         IF    Z
         LH    R0,WORTH
         SH    R0,=AL2(IDELTA)
         IF    H
         STH   R0,WORTH
         ENDIF
         ENDIF
         NI    FLAGS,255-REF
         LA    R8,NODELEN(R8)
         CR    R8,R9
         ENDWHILE
         DROP R8
         ENDIF
         B     RET
PFTAB    DC    768H'0'
         EJECT
*
*  TRANSPOSITION TABLE NODE ALLOCATION
*  R1 -> POSDB
*  RC=0 IF SUCCESS, RTN -> NODE
*
NGET     ENTER
         LR    R15,R1
         USING POSDB,R15
         LM    R0,R11,WK
         OB    R0,BK
         OB    R2,BQ
         OB    R4,BR
         OB    R6,BB
         OB    R8,BN
         OB    R10,BP
*
         OBR   R10,R4             R,P
         OBR   R4,R0
         OBR   R4,R2              K,Q,R
         OBR   R6,R0
         OBR   R6,R10             K,B,R,P
         OBR   R8,R2
         OBR   R8,R10             Q,N,R,P
         LB    R2,W
         LH    R10,WCASTLE
         LH    R11,BCASTLE
         SLL   R11,20
         SLDL  R10,20
         STM   R2,R10,CMPKEY
         DROP  R15
         EJECT
*
*  R2=W, R4=KQR, R6=KBRP, R8=QNRP
*
*
*  REDUCE TO 4 WORDS
*
         XB    R2,M2
         MR    R2,R2
         SRDL  R2,16
         XB    R4,M4
         MR    R4,R4
         SRDL  R4,16
         XB    R6,M6
         MR    R6,R6
         SRDL  R6,16
         XB    R8,M8
         MR    R8,R8
         SRDL  R8,16
*
*  REDUCE TO 1 WORD, AND INCLUDE CASTLING, ENPASSENT, SIDE TO MOVE
*
         XR    R3,R5
         XR    R3,R7
         XR    R3,R9
         XR    R3,R10
         XR    R2,R2
         D     R2,NSTART          NUMBER OF SEARCH START LOCATIONS
         LR    R1,R2              0 ... NSTART-1
         M     R0,=A(NODELEN)
         L     R4,=V(@TTABLE)
         A     R1,0(R4)
*
*  R1 = LOCATION FOR BEGINNING OF SEARCH
*
         LH    R6,=H'32767'       MOST WORTHLESS NODE SO FAR
         SR    R7,R7              -> NODE TO REPLACE
         LR    R10,R1
         USING NODE,R10
         SR    R15,R15
         DO    R4,SRCHLEN
         CLC   KEY(KEYLEN),CMPKEY
         BE    QUIT               MATCH FOUND
         TM    FLAGS,REP+HIST1+HIST2
         IF    Z
         CH    R6,WORTH
         IF    H
         LH    R6,WORTH
         LR    R7,R10
         ENDIF
         ENDIF
         LA    R10,NODELEN(R10)
         ENDDO
         LTR   R10,R7
         IF    Z
         L     R0,TTOVER
         A     R0,=F'1'
         ST    R0,TTOVER
         C     R0,=F'1'
         IF    E
         PRNTF 'Position table overflow%L'
         ENDIF
         LA    R10,NULLNODE
         ENDIF
         MVC   NODE(NODELEN),INITNODE
         LA    R15,4
QUIT     OI    FLAGS,REF
         EXIT  RTN=(R10),RC=(R15)
         EJECT
*
*  TRANSPOSITION TABLE NODE LOOKUP
*  R1 -> POSDB
*  RC=0 IF SUCCESS, RTN -> NODE
*
NLOOK    ENTER
         LR    R15,R1
         USING POSDB,R15
         LM    R0,R11,WK
         OB    R0,BK
         OB    R2,BQ
         OB    R4,BR
         OB    R6,BB
         OB    R8,BN
         OB    R10,BP
*
         OBR   R10,R4             R,P
         OBR   R4,R0
         OBR   R4,R2              K,Q,R
         OBR   R6,R0
         OBR   R6,R10             K,B,R,P
         OBR   R8,R2
         OBR   R8,R10             Q,N,R,P
         LB    R2,W
         LH    R10,WCASTLE
         LH    R11,BCASTLE
         SLL   R11,20
         SLDL  R10,20
         STM   R2,R10,CMPKEY
         DROP  R15
         EJECT
*
*  R2=W, R4=KQR, R6=KBRP, R8=QNRP
*
         XB    R2,M2
         MR    R2,R2
         SRDL  R2,16
         XB    R4,M4
         MR    R4,R4
         SRDL  R4,16
         XB    R6,M6
         MR    R6,R6
         SRDL  R6,16
         XB    R8,M8
         MR    R8,R8
         SRDL  R8,16
         XR    R3,R5
         XR    R3,R7
         XR    R3,R9
         XR    R3,R10
         XR    R2,R2
         D     R2,NSTART          NUMBER OF SEARCH START LOCATIONS
         LR    R1,R2              0 ... NSTART-1
         M     R0,=A(NODELEN)
         L     R4,=V(@TTABLE)
         A     R1,0(R4)
*
*  R1 = LOCATION FOR BEGINNING OF SEARCH
*
         LR    R10,R1
         USING NODE,R10
         SR    R15,R15
         DO    R4,SRCHLEN
         CLC   KEY(KEYLEN),CMPKEY
         BE    LQUIT              MATCH FOUND
         LA    R10,NODELEN(R10)
         ENDDO
         LA    R15,4
LQUIT    EXIT  RTN=(R10),RC=(R15)
         EJECT
*
* DISPLAY POSITION TABLE INFORMATION
*  R1 -> POSDB
*
PHASH    ENTER DSA=YES
         LR    R10,R1
         USING POSDB,R10
         SCALL NLOOK
         TST   R15
         IF    Z
         LR    R9,R1
         USING NODE,R9
         ST    R9,TMP1
         LC    R1,FLAGS
         ST    R1,TMP2
         LR    R3,R10
         LA    R4,MOVE
         LA    R5,MVSTR
         STM   R3,R5,PLIST
         LA    R1,PLIST
         SCALL MOVECHAR
         PRNTF 'loc %X  flags %X  worth %H  move %S%L',                *
               (TMP1,TMP2,WORTH,MVSTR),PLIST=PLIST
         PRNTF 'lbv %H  lbc %H  ubv %H  ubc %H%L',                     *
               (LBVAL,LBCPLX,UBVAL,UBCPLX),PLIST=PLIST
         ENDIF
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
         CNOP  0,8
M2       DC    X'AA5CA3635AA9339C'
M4       DC    X'AC9969C669A9A356'
M6       DC    X'A5A6AAC95A9AC999'
M8       DC    X'A36A339369C53C66'
NSTART   DC    F'0'
TTOVER   DC    F'0'
IDELTA   EQU   100
INF      EQU   32000
SRCHLEN  EQU   5
INITNODE DS    0F
CMPKEY   DC    35X'00',X'00'
         DC    AL2(-INF),AL2(INF),AL2(INF),AL2(INF)
         DC    H'0',H'0'
NULLNODE NODE  N
NODE     DSECT
         NODE
POSDB    DSECT
         POSDB
         DSA
TMPDB    DS    XL320
QN       DS    D
RP       DS    D
PLIST    DS    8F
TMP1     DS    F
TMP2     DS    F
MVSTR    DS    32C
         ENDDSA
         REGS
         END
