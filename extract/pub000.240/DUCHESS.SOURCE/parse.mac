$PARSE   CSECT
*
*        SUBROUTINE TO PARSE SYNTAX EQUATIONS.
*
* ON ENTRY:
*
*        0(R1) A STRING TO BE PARSED.
*        4(R1) A PARSE TABLE.
*
* REGISTERS AVAILABLE IN THE LOW LEVEL ROUTINES:
*
*        R11   (UNCHANGED FROM CALL TO PARSE)
*        R10   CURRENT STRING POINTER (TERMINATED BY X'00')
*        R7    (UNCHANGED FROM CALL TO PARSE)
*        R6    POINTER TO END OF STRING (0(R6) IS THE X'00')
*        R1    POINTER TO A ONE DOUBLEWORD WORK AREA.
*
* THE LOW LEVEL ROUTINES SHOULD RETURN THE NEW STRING POINTER IN R1
* AND A COMPLETION CODE IN R15 (0 INDICATES SUCCESS, NON-ZERO FAILURE).
*
* RETURN CODES:
*
*        0     THE PARSE RECOGNISED THE STRING.
*        8     THE PARSE FAILED TO RECOGNISE THE STRING.
*
         ENTRY PARSE
STRING   EQU   10                 INTERNAL POINTER TO THE STRING.
         TITLE ' PARSE -- PARSE SYNTAX EQUATIONS FOR DUCHESS 6.0'
PARSE    ENTER DSA=YES
         L     STRING,0(R1)       GET A(STRING).
         L     R8,4(R1)           PICK UP THE ADDRESS OF THE TABLE.
         LA    R8,4(R8)           POINT TO FIRST ELEMENT IN TABLE.
         LH    R6,0(STRING)       GET THE STRING LENGTH.
         LA    STRING,2(STRING)   POINT TO REAL STRING.
         LA    R4,8(R6)           GET GET THE REQUIRED BYTE COUNT IN R4
         SRL   R4,3               COMPUTE NUMBER OF DOUBLEWORDS.
         GETC  (R4)               GET THE CORE.
         BCTR  R6,R0              ADJUST LENGTH TO CORRECT MOVE.
         EX    R6,$$$MVC          MOVE THE STRING.
         LR    STRING,R1          POINT TO NEW STRING.
         LA    R6,1(STRING,R6)    POINT TO 1 BEYOND THE STRING.
         MVI   0(R6),X'00'        FLAG IT WITH X'00'
         SR    R9,R9              SIGNAL NO TAIL TO PARSE.
         XC    MOVEDESC(8),MOVEDESC CLEAR THE DESCRIPTOR.
         LA    R1,MOVEDESC        POINT TO IT.
         SCALL PARSE0             CALL THE PARSE ROUTINE.
         EXIT  RC=(R15)           AND LEAVE.
$$$MVC   MVC   0(0,R1),0(STRING)  MOVE IN THE NEW STRING.
         EJECT
PARSE0   ENTER DSA=YES
*
*        INTERNAL SUBROUTINE TO EFFECT THE PARSING OF A TABLE. NOTE
*        THAT IT MUST BE RECURSIVE AND RE-ENTRANT.
*
* ON ENTRY:
*
*        STRING (R10) -> PARSE STRING
*        R9 -> TAIL BACK-CHAIN OF THE FORMAT:
*              0(R9) PREVIOUS POSITION IN A TABLE
*              4(R9) ADDRESS OF PREVIOUS BACK CHAIN.
*        R8 -> CURRENT POSITION IN SYNTAX TABLE.
*        R1 -> MOVE DESCRIPTOR BLOCK
*
         LR    R5,R1              SAVE
         LR    R4,R8                CURRENT
         LR    R3,R9                  POSITION
         LR    R2,STRING                OF PARSE.
         L     R15,0(R8)          GET THE CONTENTS OF THE TABLE.
         LTR   R15,R15            IS THIS A ZERO ENTRY?
         IF    Z                  IF IT IS ZERO ...
         ABEND 10,DUMP,STEP       THEN IT MUST BE AN ERROR.
         ENDIF
*
*        WE HAVE A NON-ZERO ENTRY AT 0(R8). LOOP OVER ALL LINES IN THE
*        TABLE UNTIL WE FIND ONE WHICH WORKS.
*
         REPEAT                   OVER ALL TABLE ENTRIES.
         MVC   MOVEDESC(8),0(R5)    COPY MOVE DESCRIPTOR UP FROM BELOW.
         LR    R9,R3              RESTORE CURRENT BACK CHAIN POINTER.
         LR    STRING,R2          RESTORE CURRENT STRING POINTER.
         L     R14,0(R15)         GET THE CONTENTS OF THE ADDRESS AT TB
         LTR   R14,R14            DOES THE TABLE POINT TO CODE OR TABLE
         WHILE NZ                 LOOP OVER ALL CODE FOUND.
         LA    R1,MOVEDESC        POONT TO CURRENT MOVE DESCRIPTOR.
         BALR  R14,R15            CALL THE LOWER ROUTINE.
         LTR   R15,R15            ERROR?
         BNZ   ENDSCAN            END THIS SCAN IF SO.
         LA    R8,4(R8)           POINT TO NEXT ENTRY IN TABLE.
         LR    STRING,R1          MOVE STRING POINTER TO NEW POSITION.
         L     R15,0(R8)          GET THE CONTENTS OF THE NEXT ENTRY.
         LTR   R15,R15            IS THIS THE LAST ENTRY FOR THIS TABLE
         WHILE Z                  YES -- GO UP TO NEXT LEVEL.
         LTR   R9,R9              ARE WE TRYING TO POP THE TOP LEVEL?
         IF    Z                  YES -- SUCCESS.
         EXIT  RC=0               EXIT BLISSFULLY
         ENDIF
         L     R8,0(R9)           RECOVER CURRENT POINTER THIS LEVEL.
         L     R9,4(R9)           RECOVER CURRENT BACK POINTER THIS LVL
         L     R15,0(R8)          GET THE TABLE ENTRY THIS LEVEL.
         LTR   R15,R15            LOOP UNTIL A TABLE ENTRY OR TOP FOUND
         ENDWHILE
         L     R14,0(R15)         IS THE ENTRY FOUND A TABLE OR CODE?
         LTR   R14,R14            IF ZERO THEN A TABLE.
         ENDWHILE
*
*        THE CURRENT ITEM IS A TABLE. SET UP TO RECURSIVELY CALL
*        OURSELVES.
*
         LA    R8,4(R8)           POINT TO THE NEXT ELEMENT IN TABLE.
         ST    R8,CURPTR          THIS WILL BE EXECUTED WHEN THE NEW
*                                 TABLE IS DONE.
         LA    R8,4(R15)          POINT TO THE FIRST ENTRY IN THE TABLE
*                                 WHICH NEEDS TO BE EXECUTED.
         ST    R9,PREVPTR         SET UP TO DO OUR DIRTY WORK WHEN OUR
*                                 SUCCESSOR IS DONE WITH OUR LIST AS
*                                 WELL AS HIS.
         LA    R1,MOVEDESC        POINT TO MODIFIED DESCRIPTOR BLOCK
         LA    R9,CURPTR          POINT TO THE NEWLY ENTERED BACK CHAIN
*                                 ELEMENT.
         SCALL PARSE0             AND PARSE THE NEW PROBLEM.
*
*        WE HAVE PARSED A TABLE. DID IT SUCCEED?
*
         LTR   R15,R15            TEST TABLE PARSE RETURN CODE
         IF    Z                  SUCCESS -- AT A LOWER LEVEL.
         EXIT  RC=0               EXIT BLISSFULLY
         ENDIF
*
*        A FAILURE OCCURRED EITHER HERE OR AT A LOWER LEVEL. SKIP TO
*        THE NEXT LINE IN THE CURRENT TABLE.
*
ENDSCAN  LR    R8,R4              RESTORE TO BEGINNING THIS LINE.
         REPEAT                   REPEAT UNTIL AN END FOUND.
         LA    R8,4(R8)           POINT TO NEXT ENTRY.
         L     R15,0(R8)          PICK UP THE CONTENTS.
         LTR   R15,R15            IS IT 0 (END OF LINE?)
         UNTIL Z                  LOOP UNTIL IT IS.
         LA    R8,4(R8)           INCREMENT TO THE NEXT LINE IN TABLE.
         L     R15,0(R8)          PICK UP CONTENTS OF THE LOCATION.
         LR    R4,R8              RESET THE LINE POINTER FOR THIS LINE.
         LTR   R15,R15            HAVE WE REACHED END OF TABLE (DOUBLE
*                                 ZERO'S IN A ROW)?
         UNTIL Z                  LOOP UNTIL WE HAVE FOUND IT.
         EXIT  RC=8               EXIT UNHAPPILY IF NO SUCCESSES.
         LTORG
         EJECT
         DSA
CURPTR   DS    F                  POINTER TO NEXT ELEMENT AFTER CURRENT
PREVPTR  DS    F                  A(PREVIOUS BLOCK OF BACK-CHAIN)
MOVEDESC DS    CL8                MOVE DESCRIPTOR BLOCK.
         ENDDSA
         REGS
         END
