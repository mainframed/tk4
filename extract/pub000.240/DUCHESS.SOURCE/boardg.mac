         TITLE 'BOARD -- BOARD PRINT AND MODIFICATION'
BOARD    CSECT
         ENTRY CHMAP
         ENTRY PUTBD
         ENTRY PTHREATS
         ENTRY PRINTDB
         ENTRY UPDATE
         ENTRY ALGSQR
*
         EXTRN DBCHK
         EXTRN HINIT
         EXTRN POSDBEQ
         EXTRN PUTCHAR
         EXTRN SWITCH
         ENTER DSA=YES
*
*  PRINT CHESS BOARD
*  R1 -> POSDB
*
         LR    R11,R1
         USING POSDB,R11
         MVC   BUF,INITBUF
         LA    R4,=C' K Q R B N P-K-Q-R-B-N-P'
         LA    R3,BUF
         LA    R2,WK
         DO    R5,2
         DO    R6,6
         STM   R2,R4,PLIST
         LA    R1,PLIST
         SCALL CHMAP
         LA    R4,2(R4)           NEXT CHARACTER CODE
         LA    R2,8(R2)           NEXT BIT MAP
         ENDDO
         LA    R2,BK              NEXT COLOR
         ENDDO
         LA    R0,DFLTOPTS
         LA    R1,BUF
         SCALL PUTBD
         B     RET0
         EJECT
PTHREATS ENTER DSA=YES
         LR    R11,R1             PICK UP POSITION DATABASE.
         USING POSDB,R11          NOTE REGISTER USAGE.
         GTKN                     PICK UP REST OF COMMAND LINE.
         TST   R15                DID IT EXIST?
         WHILE Z
         LR    R10,R1             POINT TO THE PARAMETER.
         LA    R1,2
         CH    R1,0(R10)          IS THE LENGTH EXACTLY 2?
         IF    NZ
         CLC   0(5,R10),ALL       IS IT 'ALL' ?
         BNE   THRERR             NO -- ERROR.
         LA    R8,BUF             POINT TO THE BUFFERS.
         LA    R9,WKT             POINT TO THE WHITE KING.
         DO    R7,2               DO FOR WHITE AND BLACK.
         DO    R6,7               DO OVER ALL PIECES.
         MVC   0(128,R8),INITBUF  INIT THE AREA.
         ST    R9,PLIST           SAVE POINTER TO BITMAP.
         ST    R8,PLIST+4         SAVE ADDRESS OF BUFFER.
         LA    R1,=C'++'          SAVE CODE.
         ST    R1,PLIST+8         POINT TO IT.
         LA    R1,PLIST           POINT TO PARM LIST.
         SCALL CHMAP              PRINT THE MAP.
         LA    R8,128(R8)         BUMP BUFFER POINTER.
         LA    R9,8(R9)           BUMP MAP POINTER.
         ENDDO
         LA    R8,BUF             RECOVER BUFFER POINTER.
         DO    R6,8               LOOP FOR ALL RANKS.
         LA    R3,OUTBUF+2        POINT TO OUTPUT BUFFER.
         LR    R5,R8              GET BUFFER POINTER.
         DO    R4,7               MOVE ALL 7 BOARDS.
         MVC   0(16,R3),0(R5)     GET THE RANK FROM THIS BOARD.
         LA    R5,128(R5)         POINT TO NEXT BOARD.
         MVI   16(R3),C' '        MOVE IN A BUFFER.
         MVI   17(R3),C' '
         LA    R3,18(R3)          INCREMENT BUFFER POINTER.
         ENDDO
         LA    R3,OUTBUF
         LA    R1,124             GET LENGTH OF OUTPUT BUFFER.
         STH   R1,OUTBUF          SAVE IT.
         PRNTF '%S%L',((R3)),FO=4,PLIST=PLIST
         LA    R8,16(R8)          POINT TO THE NEXT LINE.
         ENDDO
         LA    R9,BKT             GET BLACK THREATS THIS TIME.
         LA    R8,BUF             POINT TO A BUFFER.
         PRNTF '%L%L',FO=4        SKIP A LINE.
         ENDDO
         ELSE
         LA    R8,WKT             GET WHITE KING THREATS.
         CLI   2(R10),C'W'        ENSURE THAT IT'S CORRECT.
         IF    NZ
         CLI   2(R10),C'B'        MUST BE BLACK THEN.
         BNZ   THRERR             NO
         LA    R8,BKT             YES -- POINT TO THEM.
         ENDIF
         IC    R7,3(R10)          PICK UP THE PIECE TYPE.
         INDEX 'KQRBNPT',R7       GET THE INDEX ...
         TST   R15                DID IT EXIST?
         BNZ   THRERR             NO -- ERROR
         SLL   R1,3               ADJUST FOR DOUBLEWORDS.
         AR    R8,R1              ADD IN THE OFFSET.
         MVC   BUF,INITBUF        INITIALISE THE BUFFER.
         LA    R10,=C'++'         THREATS WILL BE ++
         LA    R9,BUF             POINT TO OUTPUT BUFFER.
         STM   R8,R10,PLIST       SAVE PARAMETERS.
         LA    R1,PLIST           POINT TO PARAMETER LIST.
         SCALL CHMAP              MAP THE THREATS.
         LA    R0,DFLTOPTS        GET THE DEFAULT OPTIONS.
         LA    R1,BUF
         SCALL PUTBD              PRINT THIS BOARD OUT.
         ENDIF
         GTKN
         TST   R15                ANYTHING PICKED UP?
         ENDWHILE                 LOOP WHILE THERE IS.
         B     RET0
THRERR   PRNTF '%S invalid piece%L',((R10)),PLIST=PLIST
         EXIT  RC=8
         EJECT
PRINTDB  ENTER DSA=YES
         LR    R11,R1             R11 -> POSITION DATABASE.
         USING POSDB,R11
         LA    R9,WHITE           POINT TO THE COLOR.
         LA    R10,WK             AND THE DATABASE SEGMENT.
         BAL   R14,PRINTSD
         LA    R9,BLACK           SWAP SIDES
         LA    R10,BK             AND DATABASES.
         BAL   R14,PRINTSD        PRINT IT.
         B     RET0
PRINTSD  ENTER
         LA    R8,KING            PRINT KING PIECES AND THREATS.
         LA    R7,WK-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,QUEEN           PRINT QUEEN PIECES.
         LA    R7,WQ-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,ROOK            PRINT ROOKS.
         LA    R7,WR-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,BISHOP
         LA    R7,WB-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,KNIGHT          PRINT KNIGHTS.
         LA    R7,WN-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,PAWN
         LA    R7,WP-WK(R10)
         BAL   R14,PRINTPC
         LA    R8,NULL
         LA    R7,W-WK(R10)
         BAL   R14,PRINTPC
         LA    R7,WKO-WK(R10)
         PRNTF '%S offsets %H %H %H %H %H %H %H%L',((R9),(R7),2(R7),   *
               4(R7),6(R7),8(R7),10(R7),12(R7)),PLIST=PLIST
         LA    R7,WSQUARES-WK(R10)
         PRNTF '%S squares %X%X%X%X%L',((R9),(R7),4(R7),8(R7),12(R7)), *
               PLIST=PLIST
         LA    R7,WTYPES-WK(R10)
         PRNTF '%S types   %X%X%X%X%L',((R9),(R7),4(R7),8(R7),12(R7)), *
               PLIST=PLIST
         GETC  1
         LH    R2,WCASTLE-WK(R10)
         ST    R2,0(R1)
         LR    R2,R1
         PRNTF '%S flags %X%L',((R9),(R2)),PLIST=PLIST
         B     RET0
PRINTPC  ENTER
         PRNTF '%S %S %X%X  %X%X%L',((R9),(R8),(R7),4(R7),WKT-WK(R7),  *
               WKT-WK+4(R7)),PLIST=PLIST
         B     RET0
WHITE    STRNG 'white'
BLACK    STRNG 'black'
KING     STRNG 'king  '
QUEEN    STRNG 'queen '
ROOK     STRNG 'rook  '
BISHOP   STRNG 'bishop'
KNIGHT   STRNG 'knight'
PAWN     STRNG 'pawn  '
NULL     STRNG '      '
         EJECT
*
*  MAP BIT STRING TO BUFFER
*
*  0(R1) -> BIT MAP
*  4(R1) -> BUFFER
*  8(R1) -> 2 BYTE CODE
*
CHMAP    ENTER
         LM    R2,R4,0(R1)
         LB    R6,0(R2)
         BSETB R8,0
         DO    R5,64
         LBR   R10,R6
         NBR   R10,R8
         TSTB  R10
         IF    NZ
         MVC   0(2,R3),0(R4)
         ENDIF
         LA    R3,2(R3)           INCREMENT BUFFER POINTER.
         SRDL  R8,1               NEXT SQUARE ON BOARD
         ENDDO
         B     RET0
         EJECT
*
*  PRINT CHARACTER BOARD
*  R0 -- FILE OPTION WORD
*  R1 -> BUFFER
*
PUTBD    ENTER
         LR    R2,R0
         LR    R3,R1
********************************* TOP OF INSERTION BLOCK 2007FEB 3270G*
         L     R15,=V(DUCH3270)   POINT TO GRAPICS MODULE        3270G*
         BALR  R14,R15            CALL DUCH3270                  3270G*
         LTR   R15,R15            SUCCESS?                       3270G*
         BZ    PUTBDX             YES                            3270G*
********************************* END OF INSERTION BLOCK 2007FEB 3270G*
         PRNTF '%L'
         DO    R4,8
         DO    R5,16
         LR    R0,R2
         ZERO  R1
         IC    R1,0(R3)
         SCALL PUTCHAR
         LA    R3,1(R3)
         ENDDO
         PRNTF '%L'
         ENDDO
PUTBDX   EQU   *                                                 3270G*
         PRNTF '%L'
         B     RET0
         EJECT
*
*  UPDATE CHESS BOARD
*  R1 -> POSDB.  USES GTKN ROUTINE
*
UPDATE   ENTER DSA=YES
         ST    R1,TMP             SAVE POSDB
         LA    R11,BUF
         USING POSDB,R11
         MVDB  POSDB,0(R1)
         XBR   R8,R8              BOARD OF CHANGED SQUARES
         GTKN
         TST   R15
         WHILE Z
         LH    R0,0(R1)           LENGTH OF STRING
         LA    R1,2(R1)           ADDRESS OF STRING
         C     R0,=F'2'
         BNE   PIECERR
         ZERO  R2
         CLC   0(2,R1),=C'ZZ'
         IF    NE                 IF PIECE CODE
         LR    R2,R11             -> WK
         CLI   0(R1),C'W'
         IF    NE
         CLI   0(R1),C'B'
         BNE   PIECERR
         LA    R2,BK
         ENDIF
         LC    R3,1(R1)           PIECE CODE
         INDEX 'KQRBNP',R3
         TST   R15
         BNZ   PIECERR
         SLA   R1,3
         AR    R2,R1
         ENDIF
*
*  R2 = 0 IF 'ZZ', ELSE POINTS TO APPROPRIATE PIECE BOARD
*
         GTKN
         TST   R15
         WHILE Z
         LR    R4,R1
         LR    R5,R15
         SCALL ALGSQR             SQUARE NUMBER RETURNED IN R1
         TST   R15
         IF    NZ
         LR    R1,R4
         LR    R15,R5
         BREAK ,2
         ENDIF
*
*  CLEAR ANY PIECE FROM DESTINATION SQUARE
*
         BSETB R4,0(R1)
         OBR   R8,R4              RECORD CHANGED SQUARE
         LA    R6,WK
         DO    R7,2
         DO    R15,6
         LB    R0,0(R6)
         NBR   R0,R4
         XB    R0,0(R6)
         STB   R0,0(R6)
         LA    R6,8(R6)           NEXT BOARD
         ENDDO
         LA    R6,BK              NEXT COLOR
         ENDDO
*
*  INSTALL NEW PIECE, IF ANY
*
         TST   R2
         IF    NZ
         LB    R0,0(R2)
         XBR   R0,R4
         STB   R0,0(R2)
         ENDIF
         GTKN
         TST   R15
         ENDWHILE
         TST   R15
         ENDWHILE
*
* FIX UP CASTLING STATUS
*
         ZERO  R4                 TABLE INDEX
         LA    R6,WK              START WITH WHITE
         DO    R7,2               FOR EACH COLOR ...
         DO    R5,2               FOR EACH SIDE ...
         LB    R0,ROOKTAB(R4)
         OB    R0,KINGTAB(R4)
         NBR   R0,R8
         TSTB  R0
         IF    NZ                 IF STATUS MAY BE AFFECTED
         LB    R0,ROOKTAB(R4)
         NB    R0,WR-WK(R6)
         ANYB  R0,R0
         LB    R2,KINGTAB(R4)
         NB    R2,WK-WK(R6)
         ANYB  R2,R2
         L     R14,BITTAB(R4)
         LC    R15,WCASTLE-WK(R6)
         NR    R0,R2
         IF    Z                  IF CASTLING DISABLED
         OR    R15,R14
         XR    R15,R14
         ELSE                     CASTLING OK
         LR    R2,R14
         NR    R2,R15
         IF    Z
         LBR   R2,R14             PROTECT R14,R15
         L     R14,BITTAB+4(R4)   GET STRING
         PRNTF '*%S-side castling enabled*%L',((R14)),PLIST=PLIST
         LBR   R14,R2
         ENDIF
         OR    R15,R14
         ENDIF
         STC   R15,WCASTLE-WK(R6)
         ENDIF
         LA    R4,8(R4)           NEXT TABLE ENTRY
         ENDDO
         LA    R6,BK              NEXT COLOR
         ENDDO
*
         ZERO  R10
         B     VALIDATE
PIECERR  PRNTF 'Invalid piece code%L'
         LA    R10,4
         B     VALIDATE
SQRERR   PRNTF 'Invalid square code%L'
         LA    R10,8
VALIDATE LR    R1,R11
         SCALL DBCHK
         TST   R15
         IF    NZ
         LA    R10,12
         LR    R2,R1
         PRNTF '%S%L',((R2)),PLIST=PLIST
         ENDIF
         LR    R0,R11
         L     R1,TMP
         SCALL POSDBEQ
         TST   R15
         IF    NE
         MVC   0(160,R1),0(R11)
         MVC   160(160,R1),160(R11)
         SCALL HINIT
         ENDIF
         EXIT  RC=(R10)
ROOKTAB  DC    X'0000000000000080'
         DC    X'0000000000000001'
         DC    X'8000000000000000'
         DC    X'0100000000000000'
KINGTAB  DC    X'0000000000000008'
         DC    X'0000000000000008'
         DC    X'0800000000000000'
         DC    X'0800000000000000'
BITTAB   DC    F'2',A(WQS)
         DC    F'1',A(WKS)
         DC    F'2',A(BQS)
         DC    F'1',A(BKS)
WQS      STRNG 'White queen'
WKS      STRNG 'White king'
BQS      STRNG 'Black queen'
BKS      STRNG 'Black king'
         EJECT
*
*  ALGSQR -- RETURNS SQUARE #
*  R1 -> STRING IN ALGEBRAIC (SUPPOSEDLY)
*
*  RETURNS R1 = SQUARE #, R15 = 0 IF NORMAL
*
ALGSQR   ENTER
         LA    R15,4              ASSUME THERE WILL BE AN ERROR
         LH    R2,0(R1)           LENGTH
         LA    R3,2(R1)           -> STRING
         C     R2,=F'2'
         BNE   QUIT
         IC    R5,0(R3)
         INDEX 'ABCDEFGH',R5
         TST   R15
         BNZ   QUIT
         LR    R4,R1              SAVE RANK INFO
         IC    R5,1(R3)
         INDEX '87654321',R5
         TST   R15
         BNZ   QUIT
         SLA   R1,3
         AR    R1,R4
QUIT     EXIT  RC=(R15),RTN=(R1)
         EJECT
RET0     EXIT
DFLTOPTS EQU   6
POSDB    DSECT
         POSDB
         DSA
PLIST    DS    8F
TMP      DS    D
BUF      DS    CL128
         DS    CL128
         DS    CL128
         DS    CL128
         DS    CL128
         DS    CL128
         DS    CL128
OUTBUF   DS    H                  LENGTH OF OUTPUT BUFFER.
         DS    CL124              AND THE BUFFER ITSELF.
         ENDDSA
BOARD    CSECT
INITBUF  DC    C' : * : * : * : *'
         DC    C' * : * : * : * :'
         DC    C' : * : * : * : *'
         DC    C' * : * : * : * :'
         DC    C' : * : * : * : *'
         DC    C' * : * : * : * :'
         DC    C' : * : * : * : *'
         DC    C' * : * : * : * :'
ALL      STRNG 'ALL'
         REGS
         END
