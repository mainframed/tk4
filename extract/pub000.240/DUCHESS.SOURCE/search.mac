         TITLE 'SEARCH -- ALPHA-BETA SEARCH ROUTINE'
         MACRO
&LABEL   INC   &REG,&COUNT
&LABEL   L     &REG,&COUNT
         A     &REG,=F'1'
         ST    &REG,&COUNT
         MEND
         EJECT
*
*  STANDARD TREE SEARCH MODULE
*  R1 -> PLYDB
*
SEARCH0  CSECT
         EXTRN CHKASYN
         EXTRN CAPGEN
         EXTRN COMMANDS
         EXTRN BDEV
         EXTRN IBFILL
         EXTRN MVEX
         EXTRN MVGEN
         EXTRN MOVESORT
         EXTRN NGET
         EXTRN REVMCHK
         EXTRN TIMECHK
         EXTRN TREND
         EXTRN TRMOVE
*
*  INTERNAL CONVENTIONS
*  R11 -> PLYDB
*  R10 -> NODE
*  R9 -> APPROPRIATE MOVE GENERATOR ( 0 IF CALLED )
*  R8 = CURRENT MOVE BEING CONSIDERED
*
* RETURNS
*   0 NORMAL
*   4 TIME ABORT
*   8 ANTICIPATION SUCCESS
*   12 SEARCH SCRAP
*
         EJECT
         ENTER DSA=YES
         LR    R11,R1
         USING PLYDB,R11
         EJECT
*
*  TIME CHECK
*
         L     R2,=V(TCOUNT)
         L     R3,0(R2)
         S     R3,=F'1'
         IF    NH
         SCALL TIMECHK
         LM    R6,R7,0(R1)
         L     R1,=V(TIMENEXT)
         C     R7,0(R1)
         IF    NL
         L     R4,=V(TIMESW)
         TM    0(R4),REALAVG
         IF    NZ
         LR    R6,R7
         ENDIF
         L     R1,=V(ANTNG)
         CLI   0(R1),X'00'
         IF    NE
         SCALL COMMANDS
         C     R15,=F'12'
         IF    E
         L     R1,=V(TTIMEWAS)
         L     R0,0(R1)
         AR    R0,R6
         ST    R0,0(R1)
         B     RET                SEARCH SCRAP
         ENDIF
         C     R15,=F'8'
         IF    E
         L     R1,=V(TIMEANT)
         ST    R6,0(R1)
         L     R1,=V(TTIMEANT)
         L     R0,0(R1)
         AR    R0,R6
         ST    R0,0(R1)
         TM    0(R4),REALAVG+CPUAVG
         IF    NZ
         L     R1,=V(TIMELAST)
         L     R1,0(R1)
         L     R14,=V(TIMETARG)
         C     R1,0(R14)
         BNL   RET                ANTICIPATION SUCCESS
         ENDIF
         PRNTF '**%L'
         ENDIF
         ELSE
         SCALL CHKASYN            CHECK FOR 'GO' AND 'WHAT' COMMANDS
         TST   R15
         BNE   RET                IF 'GO' WAS SPECIFIED
         TM    0(R4),REALAVG+CPUAVG
         IF    NZ
         L     R9,=V(TIMETARG)
         L     R9,0(R9)
         AR    R9,R9
         CR    R6,R9
         LA    R15,4
         BH    RET
         ENDIF
         ENDIF
         L     R1,=V(TIMEWAIT)
         A     R7,0(R1)
         L     R1,=V(TIMENEXT)
         ST    R7,0(R1)
         ENDIF
         LA    R3,100
         ENDIF
         ST    R3,0(R2)
         EJECT
*
*  ALLOCATE NODE IN TTABLE
*
         INC   R0,#HASHES
         LR    R1,R11
         SCALL NGET
         LR    R10,R1
         USING TNODE,R10
*
*  INITIALIZE STACK NODE AND VARIATION
*
         MVC   SNODE(SNODELEN),TNODE
         LH    CMOVE,TMOVE
         ZERO  R1
         STH   R1,PRINVAR         NULL TERMINATOR
*
*  CHECK FOR TABLE HIT
*
         TST   R15
         IF    Z
         INC   R0,#HITS
*
*  IF PLY 0, NO FAST EXIT
*
         LH    R0,PLY
         TST   R0
         IF    H
*
*  REPETITION CHECK
*
         TM    TFLAGS,TREP+THIST1+THIST2
         IF    NZ
         INC   R0,#REP
         ZERO  R0
         STH   R0,EV
         LH    R0,RCPLX
         SRDA  R0,32
         NR    R0,R1
         XR    R0,R1
         AH    R0,=AL2(2*IDELTA)
         ST    R0,SLB
         ST    R0,SUB
         B     QUIT
         ENDIF
*
*  CUTOFF CHECKS
*
         LH    R3,TLBCPLX
         CH    R3,RCPLX
         IF    NL
         LH    R2,TLBVAL
         CH    R2,MINCUT
         IF    H
         STH   R2,MINCUT
         CH    R2,MAXCUT
         IF    NL
         INC   R0,#CUTLB
         STH   R2,EV
         B     QUIT
         ENDIF
         ENDIF
         ENDIF
         LH    R3,TUBCPLX
         CH    R3,RCPLX
         IF    NL
         LH    R2,TUBVAL
         CH    R2,MAXCUT
         IF    L
         STH   R2,MAXCUT
         CH    R2,MINCUT
         IF    NH
         INC   R0,#CUTUB
         STH   R2,EV
         B     QUIT
         ENDIF
         ENDIF
         ENDIF
         ENDIF
         ENDIF
         EJECT
*
*  NODE MUST BE EVALUATED.  MARK AS REPETITION, INITIALIZE BOUNDS
*
         OI    TFLAGS,TREP
         LH    R1,=AL2(INF)
         LCR   R0,R1
         STH   R0,EV              INITIAL EVALUATION
         STH   R0,SUBVAL
         STH   R1,SUBCPLX
         LA    R0,IDELTA
         STH   R0,PCPLX
         MVI   QFLAG,X'00'
         MVI   MFLAG,X'00'        NO LEGAL MOVES YET
         L     @GEN,=V(MVGEN)
*
*  ACTIVE SIDE IN CHECK?  IF SO, HALVE PCPLX AND CONSIDER
*  SKIPPING EVAL
*
         CLI   COLOR,X'00'
         IF    E
         LB    R0,WK
         NB    R0,BT
         ELSE
         LB    R0,BK
         NB    R0,WT
         ENDIF
         TSTB  R0
         IF    NZ                 IF IN CHECK
         LH    R0,PCPLX
         SRA   R0,1
         STH   R0,PCPLX
         LH    R1,RCPLX
         CH    R1,=AL2(-7*IDELTA) SKIP BDEV IF SHALLOW
         BNL   NOEVAL
         ENDIF
         EJECT
*
*  IF QUIESENCE SEARCH, EVALUATE POSITION
*
         LH    R3,RCPLX
         TST   R3
         IF    NH
         INC   R0,#EVALS
         LR    R1,R11
         SCALL BDEV
         CH    R1,TLBVAL
         IF    L
         LH    R1,TLBVAL
         ENDIF
         CH    R1,TUBVAL
         IF    H
         LH    R1,TUBVAL
         ENDIF
         STH   R1,EV
         CH    R1,MINCUT
         IF    H
         STH   R1,MINCUT
         ENDIF
         SLA   R1,16
         ST    R1,SLB
         ST    R1,SUB
         L     R1,=V(TRACESW)
         CLI   0(R1),X'00'
         IF    NE
         LH    R1,EV
         LH    R0,PLY
         N     R0,=F'1'
         IF    NE
         NEG   R1
         ENDIF
         SCALL TREND
         ENDIF
         L     @GEN,=V(CAPGEN)
         MVI   QFLAG,X'01'
         ENDIF
NOEVAL   EQU   *
         EJECT
*
*  PANIC IF WE ARE AT MAXPLY
*
         LH    R0,PLY
         CH    R0,=AL2(NUMPLY-2)
         IF    NL
         PRNTF 'Search stack overflow%L'
         B     DROPPLY
         ENDIF
         EJECT
*
*  PROCESS MOVES WHILE ALPHA-BETA WINDOW IS OPEN
*
         LH    R0,MINCUT
         CH    R0,MAXCUT
         WHILE L
*
*  EXECUTE THE NEXT LEGAL MOVE
*
         LOOP
         TST   CMOVE              MOVE AVAILABLE?
         IF    Z                  IF NOT
         TST   @GEN               HAS GENERATOR BEEN CALLED?
         IF    NZ                 IF NOT
*
*  GENERATE LIST OF MOVES
*
         C     @GEN,=V(MVGEN)
         IF    E
         INC   R0,#MVGEN
         ENDIF
         C     @GEN,=V(CAPGEN)
         IF    E
         INC   R0,#CAPGEN
         ENDIF
         LR    R1,R11
         LA    R2,MLIST
         LR    @NXTMOVE,R2
         STM   R1,R2,PLIST
         LA    R1,PLIST
         LR    R15,@GEN
         BALR  R14,R15
         ZERO  @GEN
         STH   @GEN,0(R1)         MARK END OF MLIST
*
*  FREE UNUSED MOVE SPACE
*
         LA    R0,9(R1)
         N     R0,=X'FFFFFFF8'
         ST    R0,0(R13)
*
*  SORT MOVES
*
         LR    R3,R1
         LR    R1,R11
         LR    R2,@NXTMOVE
         STM   R1,R3,PLIST
         LA    R1,PLIST
         SCALL MOVESORT
         ENDIF
*
*  GET NEXT MOVE FROM MOVE LIST
*
         REPEAT
         LH    CMOVE,0(@NXTMOVE)
         LA    @NXTMOVE,2(@NXTMOVE)
         TST   CMOVE
         BZ    ENDMOVES
         CH    CMOVE,TMOVE
         UNTIL NE
         ENDIF
*
*  EXECUTE MOVE
*
         MVDB  POSDB+PLYLEN,POSDB
         LR    R0,CMOVE           MOVE TO EXECUTE
         LA    R1,POSDB+PLYLEN
         SCALL MVEX
         INC   R0,#MVEX
         TST   R15
         BREAK Z
         ZERO  CMOVE              BAD MOVE
         ENDLOOP
         MVI   MFLAG,X'01'        LEGAL MOVE HAS BEEN FOUND
*        INC   R0,#LMVEX
*
*  PRODUCE TRACE IF REQUESTED
*
         L     R1,=V(TRACESW)
         CLI   0(R1),X'00'
         IF    NE
         LR    R1,R11
         STH   CMOVE,PLIST+3*4
         LA    R2,PLIST+3*4
         LA    R3,PLY
         STM   R1,R3,PLIST
         LA    R1,PLIST
         SCALL TRMOVE
         ENDIF
         EJECT
*
*  CALL THE SEARCH WITH THE NEW POSITION
*
         LH    R0,MINCUT
         LCR   R0,R0
         STH   R0,MAXCUT+PLYLEN
         LH    R0,MAXCUT
         LCR   R0,R0
         STH   R0,MINCUT+PLYLEN
         LH    R0,RCPLX
         SH    R0,PCPLX
         STH   R0,RCPLX+PLYLEN
         STH   CMOVE,LASTMOVE+PLYLEN
         LH    R0,REF1M
         STH   R0,LASTREFM+2*PLYLEN
         LA    R1,POSDB+PLYLEN
         SCALL SEARCH0
         EJECT
*
*  EVALUATE RESULTS FROM SEARCH
*
         TST   R15
         BNZ   RET
*
*  LOWER BOUND ADJUDICATION
*
         LH    R2,SUBVAL+PLYLEN
         NEG   R2
         LH    R3,SUBCPLX+PLYLEN
         AH    R3,PCPLX
         CH    R3,=AL2(INF)
         IF    H
         LH    R3,=AL2(INF)
         ENDIF
         LH    R4,RCPLX
         SRDA  R4,32              R4 <- MAX(RCPLX, 0)
         NR    R4,R5
         XR    R4,R5
         LA    R4,IDELTA(R4)
         LR    R0,R3
         CR    R0,R4
         IF    H
         LR    R0,R4
         ENDIF
         LH    R1,SLBCPLX
         CR    R1,R4
         IF    H
         LR    R1,R4
         ENDIF
         SR    R0,R1              SEARCH COMPLEXITY DIFFERENCE
         SLA   R0,3
         AR    R0,R2
         SH    R0,SLBVAL
         IF    H
         STH   R2,SLBVAL
         STH   R3,SLBCPLX
         ENDIF
*
*  UPPER BOUND ADJUDICATION
*
         LH    R2,SLBVAL+PLYLEN
         NEG   R2
         CH    R2,SUBVAL
         IF    H
         STH   R2,SUBVAL
         ENDIF
         LH    R3,SLBCPLX+PLYLEN
         AH    R3,PCPLX
         CH    R3,SUBCPLX
         IF    L
         STH   R3,SUBCPLX
         ENDIF
*
*  SEARCH VALUE ADJUDICATION
*
         LH    R2,EV+PLYLEN
         NEG   R2
         CH    R2,EV
         IF    H
         STH   R2,EV
         CH    R2,MINCUT
         IF    H
         STH   R2,MINCUT
         ENDIF
         STH   CMOVE,PRINVAR
         MVC   PRINVAR+2(NUMPLY*2-2),PRINVAR+PLYLEN
         ENDIF
         EJECT
*
*  CONTINUE PROCESSING WHILE WITHIN ALPHA-BETA WINDOW
*
         ZERO  CMOVE              NO MOVE CURRENTLY AVAILABLE
         LH    R0,MINCUT
         CH    R0,MAXCUT
         ENDWHILE
*
*  CUTOFF!
*
         L     R0,TUB
         ST    R0,SUB
         B     DROPPLY
         EJECT
*
*  NO MORE MOVES TO EXECUTE AT THIS LEVEL.  IF IN REGULAR
*  SEARCH AND NO LEGAL MOVES WERE EXECUTED, THEN CHECK FOR CHECK
*
ENDMOVES CLI   QFLAG,X'00'
         IF    E
         CLI   MFLAG,X'00'
         IF    E
         CLI   COLOR,X'00'
         IF    E
         LB    R0,WK
         NB    R0,BT
         ELSE
         LB    R0,BK
         NB    R0,WT
         ENDIF
         TSTB  R0
         IF    NZ
         LH    R0,=AL2(-WIN)      CHECKMATED
         AH    R0,PLY
         LH    R2,=AL2(-WIN)      LOWER BOUND
         LH    R3,=AL2(-WIN+1000) UPPER BOUND
         ELSE
         ZERO  R0                 STALEMATED
         LR    R2,R0
         LR    R3,R0
         ENDIF
         STH   R0,EV
         STH   R2,SLBVAL
         STH   R3,SUBVAL
         LH    R1,=AL2(INF)
         STH   R1,SLBCPLX
         STH   R1,SUBCPLX
         ENDIF
         ENDIF
         EJECT
*
*  PREPARE TO EXIT THIS LEVEL OF SEARCH
*
DROPPLY  EQU   *
         LH    CMOVE,PRINVAR
         TST   CMOVE
         IF    NZ
         STH   CMOVE,SMOVE
*
*  UPDATE REFUTATION LIST
*
         LH    R0,LASTMOVE
         L     R1,=X'0000003F'
         NR    R0,R1
         NR    R1,CMOVE
         CR    R0,R1
         IF    NE
         CH    CMOVE,REF1M
         IF    E
         LH    R2,REF1W
         LA    R2,1(R2)
         CH    R2,=H'10'
         IF    NH
         STH   R2,REF1W
         ENDIF
         ELSE
         LH    R2,REF2W
         CH    CMOVE,REF2M
         IF    NE
         STH   CMOVE,REF2M
         ZERO  R2
         ENDIF
         LA    R2,1(R2)
         STH   R2,REF2W
         CH    R2,REF1W
         IF    NL
         L     R0,REF1
         L     R1,REF2
         ST    R0,REF2
         ST    R1,REF1
         ENDIF
         ENDIF
         ENDIF
         ENDIF
*
*  NODE WORTH CALCULATED HERE
*
         LH    R0,RCPLX
         SRDA  R0,32
         NR    R0,R1
         XR    R0,R1
         LA    R1,NUMPLY+2*IDELTA
         SH    R1,PLY
         AR    R1,R0
         STH   R1,SWORTH
         MVC   TNODE(TNODELEN),SNODE
         EJECT
*
*  RETURN TO PREVOUS LEVEL OF SEARCH
*
QUIT     EQU   *
         L     R1,=V(TRACESW)
         CLI   0(R1),X'00'
         IF    NE
         LH    R1,EV
         LH    R0,PLY
         N     R0,=F'1'
         IF    NE
         LCR   R1,R1
         ENDIF
         SCALL TREND
         ENDIF
         ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
CPUAVG   EQU   X'20'
REALAVG  EQU   X'10'
         DSA
PLIST    DS    6F
MLIST    DS    256H
         ENDDSA
PLYDB    DSECT
         PLYDB
TNODE    DSECT
         NODE  T
         REGS
@NXTMOVE EQU   R7
CMOVE    EQU   R8
@GEN     EQU   R9
         END
