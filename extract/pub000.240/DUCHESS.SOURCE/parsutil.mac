         TITLE 'PARSUTIL -- MOVE GENERATION / GAME TERMINATION'
PARSUTIL CSECT
         ENTRY ENDGCHK
         ENTRY ENDGTST
         ENTRY LMVGEN
         ENTRY LMVTRIM
         ENTRY MVECHK
         ENTRY POSCHK
         ENTRY REVMNUM
         ENTRY REVMCHK
*
         EXTRN MVGEN
         EXTRN MVEX
         EXTRN PLNONE
         EXTRN TTINIT
         EJECT
*
*  GENERATE EXACTLY THE LEGAL MOVES
*  0(R1) -> POSDB
*  4(R1) -> MLIST
*  RTN = NEXT FREE SLOT IN MLIST ( MORE MAY HAVE BEEN USED )
*
LMVGEN   ENTER DSA=YES
         LM    R2,R3,0(R1)
         STM   R2,R3,PLIST
         LA    R1,PLIST
         SCALL MVGEN
         ST    R1,PLIST+8
         LA    R1,PLIST
         SCALL LMVTRIM
         EXIT  RC=0,RTN=(R1)
         EJECT
*
* REMOVE ILLEGAL MOVES FROM MLIST.
*  0(R1) -> POSDB
*  4(R1) -> MLIST
*  8(R1) -> NEXT FREE SLOT IN MLIST
*
*  RTN = NEW NEXT FREE SLOT
*
LMVTRIM  ENTER DSA=YES
         L     R11,0(R1)          POSDB PTR
         L     R6,4(R1)           MLIST PTR
         L     R7,8(R1)           END PTR
         LR    R5,R6              NEXT LEGAL SLOT
         CR    R6,R7
         WHILE L
         MVDB  POSDB,0(R11)
         LH    R0,0(R6)           MOVE
         LA    R1,POSDB
         SCALL MVEX
         TST   R15
         IF    Z                  IF LEGAL
         LH    R0,0(R6)
         STH   R0,0(R5)
         LA    R5,2(R5)           NEXT LEGAL SLOT
         ENDIF
         LA    R6,2(R6)           NEXT PSEUDO-LEGAL SLOT
         CR    R6,R7
         ENDWHILE
         EXIT  RC=0,RTN=(R5)
         EJECT
*
*  CHECK FOR TERMINAL POSITION
*  RETURN CODE ( R15):  0 NON-TERMINAL, 1 STALEMATE,
*        2 CHECK, 3 CHECKMATE
*  R1 -> POSDB
*
POSCHK   ENTER DSA=YES
         LR    R11,R1
*
         SR    R2,R2
         CLI   COLOR-WK(R11),X'00'
         IF    E
         LA    R8,WK-WK(R11)
         LA    R9,BK-WK(R11)
         ELSE
         LA    R8,BK-WK(R11)
         LA    R9,WK-WK(R11)
         ENDIF
         LB    R0,WK-WK(R8)
         NB    R0,WT-WK(R9)
         TSTB  R0
         IF    NZ                 IF CHECK
         LA    R2,2
         ENDIF
         ST    R11,PLIST
         LA    R1,MLIST
         ST    R1,PLIST+4
         LA    R1,PLIST
         SCALL LMVGEN
         LA    R0,MLIST
         SR    R1,R0
         IF    Z
         LA    R2,1(R2)
         ENDIF
         EXIT  RC=(R2)
         EJECT
*
*  CHECK POSITION AFTER MOVE IS EXECUTED
*  R0 = MOVE
*  R1 -> POSDB
*
MVECHK   ENTER DSA=YES
         MVDB  POSDB,0(R1)
         LA    R1,POSDB
         SCALL MVEX
         SCALL POSCHK
         EXIT  RC=(R15)
         EJECT
*
*  CONVERT MOVE TO MOVE DESCRIPTOR BLOCK
*
*  0(R1) -> POSDB
*  4(R1) -> MOVE
*  8(R1) -> MDB
*MOVEMDB  ENTER
*         LM    R2,R4,0(R1)
*         LR    R11,R2
*         USING POSDB,R11
*         LR    R10,R4
*         USING MDB,R10
*         XC    MDB(8),MDB
*         LR    R9,R3              -> MOVE
**
**  DO FOR SOURCE, DESTINATION
**
*         LA    R8,$PIECE
*         LR    R7,R9
*         DO    R6,2
**
**  IDENTIFY PIECE ON SQUARE
**
*         IC    R5,0(R7)
*         N     R5,=X'0000003F'
*         BSETB R2,0(R5)
*         LA    R4,WK
*         SR    R15,R15            PIECE TYPE
*         DO    R14,6
*         LB    R0,WK-WK(R4)
*         OB    R0,WK-WK(R4)
*         TSTB  R0
*         IF    NZ
*         STC   R15,$PIECE-MDB(R8)
*         B     FOUND
*         ENDIF
*         LA    R4,8(R4)
*         LA    R15,1(R15)
*         ENDDO
*         MVI   $PIECE-MDB(R8),$NONE
*FOUND    EQU   *
**
**  GET RANK/FILE
**
*         LR    R2,R5
*         SRL   R2,3
*         STC   R2,$SRANK-MDB(R8)
*         N     R5,=X'00000007'
*         STC   R5,$SFILE-MDB(R8)
**
**  NOW LOOP TO PROCESS DESTINATION
**
*         LA    R8,$CAPT
*         LA    R7,1(R9)
*         ENDDO
**
**  SPECIAL CASE FOR ENPASSENT AND PROMOTION
**
*         IC    R5,0(R9)
*         N     R5,=X'000000C0'
*         C     R5,=X'00000040'
*         IF    E                  IF SPECIAL
*         IC    R5,1(R9)
*         N     R5,=X'00000038'
*         BZ    ISPROM
*         C     R5,=X'00000038'
*         IF    E                  IF PROMOTION
*ISPROM   IC    R5,1(R9)
*         SRL   R5,6
*         STC   R5,$PROM
*         ELSE                     IF ENPASSENT
*         MVI   $CAPT,$ENPASS+5
*         ENDIF
*         ENDIF
**
**  CHECK FOR CHECK/MATE
**
*         LH    R0,0(R9)           MOVE
*         LR    R1,R11             POSDB
*         SCALL MVECHK
*         C     R15,=F'2'
*         IF    E
*         MVI   $CHECK,$CH
*         ENDIF
*         C    R15,=F'3'
*         IF    E
*         MVI   $CHECK,$MATE
*         ENDIF
*         OC    MDB(8),SPECMASK
*         PRNTF 'MDB: %X%X%L',(MDB,MDB+4)
*         EXIT
*         DROP  R10
*         DROP  R11
         EJECT
*
*  RETURNS NUMBER OF MOVES SINCE LAST PAWN MOVED OR PIECE CAPTURED
*
REVMNUM  ENTER DSA=YES
         L     R10,=V(HBOARD)
         MVDB  POSDB,0(R10)
         L     R9,=V(HMOVES)
         LR    R7,R9
         LOOP
         LH    R0,0(R9)
         TST   R0
         BREAK Z
         LA    R9,2(R9)
         LA    R1,POSDB
         SCALL REVMCHK
         TST   R15
         IF    NZ
         LR    R7,R9
         ENDIF
         SCALL MVEX
         ENDLOOP
         SLR   R9,R7
         SRA   R9,1               NUMBER OF PLY
         EXIT  RTN=(R9)
         EJECT
*
*  REVERSIBLE MOVE CHECK
*  R0 = MOVE
*  R1 -> POSDB
*  RC = 0 IFF MOVE IS REVERSIBLE
*
REVMCHK  ENTER
         LA    R15,4              ASSUME IRREVERSIBLE
         LR    R10,R1
         LR    R11,R1
         LC    R2,COLOR-WK(R1)
         SLA   R2,2
         A     R10,DBOF(R2)       ACTIVE DB
         A     R11,DBOF+4(R2)     PASSIVE DB
         LR    R6,R0
         SRL   R6,8
         N     R6,=X'0000003F'
         LR    R7,R0
         N     R7,=X'0000003F'
         BSETB R0,0(R6)
         NB    R0,WP-WK(R10)
         TSTB  R0
         IF    Z                  IF NOT PAWN MOVE
         BSETB R0,0(R7)
         NB    R0,B-BK(R11)       OPPONENT PIECES
         TSTB  R0
         IF    Z
         ZERO  R15
         ENDIF
         ENDIF
         EXIT  RC=(R15)
         EJECT
*
*  CHECK FOR END OF GAME
*  RC = 0 IFF NOT END OF GAME
*  ELSE PRINTS REASON FOR END, AND CALLS PLNONE
*  R1 -> POSDB
*
ENDGCHK  ENTER DSA=YES
         SCALL ENDGTST
         TST   R15
         IF    NZ
         LR    R2,R1
         PRNTF '%S%L',((R2)),PLIST=PLIST
         SCALL PLNONE
         LA    R15,8
         ENDIF
         EXIT  RC=(R15)
         EJECT
*
*  CHECK FOR END OF GAE
*  RC = 0 IFF NOT END OF GAME
*  ELSE R1 -> STRING WHICH EXPLAINS REASON FOR END
*  CALLED WITH R1 -> POSDB
ENDGTST  ENTER
         SCALL POSCHK
         LA    R2,STALESTR
         C     R15,=F'1'
         BE    GEND
         LA    R2,MATESTR
         C     R15,=F'3'
         BE    GEND
         SCALL TTINIT
         LA    R2,REP3STR
         TST   R15
         BNZ   GEND
         SCALL REVMNUM
         LA    R15,1              SET RC, JUST IN CASE
         LA    R2,M50STR
         C     R1,=F'100'
         BNL   GEND
         ZERO  R15
GEND     EXIT  RC=(R15),RTN=(R2)
         EJECT
DBOF     DC    A(WK-WK)
         DC    A(BK-WK)
         DC    A(WK-WK)
STALESTR STRNG 'Stalemate'
MATESTR  STRNG 'Checkmate'
REP3STR  STRNG 'Threefold repetition'
M50STR   STRNG '50 moves without pawn move or piece capture'
SPECMASK DC    8AL1($SPEC)
MDB      DSECT
         MDB   $
         DSA
POSDB    POSDB
DBLEN    EQU   *-POSDB
PLIST    DS    8F
MLIST    DS    256H
         ENDDSA
         REGS
         END
