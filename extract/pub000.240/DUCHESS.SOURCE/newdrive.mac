         TITLE 'DRIVERS -- IO DRIVERS FOR QSAM, TCAM, BSAM'
*
*   CALLING CONVENTIONS:
*    R1 -> FILE DESCRIPTOR TABLE TO USE
*
*   RETURN CODES:
*     0 - NORMAL COMPLETION
*     4 - END OF FILE (INPUT ONLY)
*     8 - NO DATA YET
*
DRIVERS  CSECT
         ENTRY DREAD
         ENTRY SINREAD
         ENTRY IBFILL
*
         ENTRY QWRITE
         ENTRY REMWRITE
         ENTRY SLVWRITE
*
         ENTRY QEOF
*
         EXTRN BINTIME
         EXTRN CLOSE
         EXTRN GET
         EXTRN OPENIN
         EXTRN OPENOUT
         EXTRN OPENUP
         EXTRN POINT
         EXTRN PUT
         EXTRN TGET
         EXTRN SLEEP
         EXTRN REMOTENT
         EXTRN REMOTDCB
         EXTRN STRSTRIP
         EXTRN STRTRIM
         EXTRN STRPAD
         EJECT
*
* QSAM READ
* NEVER RETURNS "NO DATA YET"
*
QREAD    ENTER DSA=YES
         LR    R2,R1              R2 -> FILE DESCRIPTION TABLE
         USING FILEDSCT,R2
         L     R3,FILE@DCB        R3 -> DCB FOR INPUT
         L     R4,FILE@IB         R4 -> INPUT BUFFER STRING
         TM    FILEFLAG,FILEOPEN  IS FILE OPEN ALREADY?
         IF    NO
         LR    R0,R3
         SCALL OPENIN             OPEN IT
         OI    FILEFLAG,FILEOPEN  RECORD THAT FILE IS NOW OPEN
         ENDIF
         LR    R0,R3
         LA    R1,2(R4)           R1 -> AREA TO PUT DATA
         SCALL GET                GET INPUT
         LH    R6,FILEIBML        MAXIMUM LENGTH OF BUFFER
         STH   R6,0(R4)           SET STRING LENGTH
         LR    R1,R4
         SCALL STRSTRIP           REMOVE SEQUENCE NUMBER, IF ANY
         LR    R1,R4
         SCALL STRTRIM            DELETE TRAILING BLANKS
         L     R3,FILECHOD        FILE OPTION WORD FOR ECHO
         PRNTF '%S%L',((R4)),PLIST=PLIST,FO=(R3)
         DROP  R2
         B     RET0
QEOF     LA    R15,4              EOF INDICATOR
         B     RET                AND LEAVE
         EJECT
*
* QSAM WRITE
* NEVER RETURNS "NOT WRITTEN".
* THERE SHOULD BE A SEPARATE "SOUWRITE" ROUTINE
*
QWRITE   ENTER DSA=YES
         LR    R2,R1              R2 -> FILE DESCRIPTION TABLE
         USING FILEDSCT,R2
         L     R3,FILECHOD        FILE OPTION WORD FOR ECHO
         L     R4,FILE@OB         R4 -> STRING TO PRINT
         PRNTF '%S%L',((R4)),PLIST=PLIST,FO=(R3)
         CLC   FILEDDNM(8),=CL8'SYSPRINT'
         IF    E
         LR    R3,R2              SAVE POINTER TO SYSPRINT ENTRY
         L     R4,=A(REMOTENT)    ADDRESS OF REMOTE FILE TABLE ENTRY
         LR    R2,R4              CONTEXT SWAP
         TM    FILEFLAG,FILEALOC  IS REMOTE ALLOCATED?
         IF    O
         LR    R2,R3              BACK TO SYSPRINT ENTRY
         L     R5,FILE@OB         ADDRESS OF BUFFER TO DUMP
         LH    R6,0(R5)           LENGTH OF BUFFER
         LR    R2,R4              BACK TO REMOTE
         L     R7,FILE@OB         ADDRESS OF REMOTE FILE OUTPUT BUFFER
         CH    R6,FILEOBML        TOO LONG?
         IF    H
         LH    R6,FILEOBML        CEILING OF MAX LENGTH
         ENDIF
         STH   R6,0(R7)           SET LENGTH
         S     R6,=F'1'           MINUS ONE
         IF    NM
         EX    R6,MOVEREMO
         ENDIF
         LR    R1,R2              POINT TO REMOTE ENTRY
         L     R15,FILE@WR        ADDRESS OF WRITE ROUTINE
         BALR  R14,R15            CALL WRITE ROUTINE
         LR    R2,R3              BACK TO SYSPRINT
         L     R4,FILE@OB         ADDRESS OF OUTPUT BUFFER
         ZERO  R5
         STH   R5,0(R4)           ZERO LENGTH OF BUFFER
         B     RET0
MOVEREMO MVC   2(1,R7),2(R5)
         ELSE
         LR    R2,R3              SWITCH BACK TO OLD FILE ENTRY
         ENDIF
         ENDIF
         L     R3,FILE@DCB        R3 -> DCB TO USE
         L     R4,FILE@OB         R4 -> OUTPUT BUFFER STRING
         LA    R5,2(R4)           R5 -> AREA TO PRINT FROM
         LH    R0,FILEOBML        LENGTH OF BUFFER
         LR    R1,R4
         SCALL STRPAD
         TM    FILEFLAG,FILECNTL  CARRIAGE CONTROL FOR FILE?
         IF    NZ
         MVC   1(1,R4),FILECCHR   MOVE IN CONTROL BYTE
         LA    R5,1(R4)           R5 -> AREA TO PRINT FROM
         ENDIF
         TM    FILEFLAG,FILEOPEN  IS FILE OPEN?
         IF    NO
         LR    R0,R3
         SCALL OPENOUT
         OI    FILEFLAG,FILEOPEN  RECORD THAT FILE IS NOW OPEN
         ENDIF
         LR    R0,R3
         LR    R1,R5
         SCALL PUT
         ZERO  R5                 NEW BUFFER LENGTH (0)
         STH   R5,0(R4)           SAVE NEW LENGTH
         B     RET0
         EJECT
*
* TRY TO FILL STDIN BUFFER WITHOUT WAITING
* MAY RETURN WITH "NO DATA DATA YET"
*
* RETURNS
*   0 DATA READY
*   4 EOF
*   8 NO DATA YET
*
IBFILL   ENTER DSA=YES
         L     R2,=V(SINENT)
         USING FILEDSCT,R2
         ZERO  R15
         L     R3,FILE@IB
         LH    R3,0(R3)           LENGTH OF INPUT BUFFER
         TST   R3
         BP    RET                IF SOMETHING IN BUFFER
         LR    R3,R2              SAVE @SINENT
         L     R2,=V(REMOTENT)
         TM    FILEFLAG,FILEALOC
         IF    O                  IF IN REMOTE MODE
         SCALL RIBFILL
         B     RET
         ENDIF
         LR    R2,R3
         L     R3,=V(ANT)
         LC    R0,0(R3)
         L     R3,=V(ASYNCH)
         LC    R1,0(R3)
         OR    R0,R1
         IF    Z
         LR    R1,R2
         SCALL QREAD
         B     RET
         ENDIF
         L     R3,FILE@IB
         LA    R1,2(R3)
         LH    R0,FILEIBML
         SCALL TGET
         LR    R6,R1
         C     R15,=F'8'
         IF    NL
         ST    R15,SAVERC
         PRNTF 'TGET ERROR CODE %F%L',(SAVERC),PLIST=PLIST
         L     R15,SAVERC
         ENDIF
         C     R15,=F'12'
         IF    E
         ZERO  R15
         ENDIF
         TST   R15
         IF    NZ
         LA    R15,8
         B     RET
         ENDIF
         STH   R6,0(R3)
         L     R4,FILECHOD
         PRNTF '%S%L',((R3)),FO=(R4),PLIST=PLIST
         B     RET0
         EJECT
*
* GET A LINE FROM STDIN
* NEVER RETURNS "NO DATA YET"
*
SINREAD  ENTER
         LOOP
         L     R4,=V(ANT)
         LC    R5,0(R4)
         L     R6,=V(ASYNCH)
         LC    R7,0(R6)
         ZERO  R0
         STC   R0,0(R4)
         STC   R0,0(R6)
         SCALL IBFILL
         STC   R5,0(R4)
         STC   R7,0(R6)
         C     R15,=F'8'
         BREAK L
         L     R1,=V(TIMEWAIT)
         L     R0,0(R1)
         SCALL SLEEP
         ENDLOOP
         B     RET
         EJECT
*
* NEVER RETURNS "NO DATA YET".
*
DREAD    ENTER
         LR    R2,R1              GET THE ADDRESS OF THE FILE TABLE.
         USING FILEDSCT,R2        NOTE USAGE.
         L     R4,FILE@DCB        GET DCB
         L     R5,FILE@IB         GET INPUT BUFFER.
         L     R6,FILERDCT        AND DEVICE ADDRESS.
         LA    R15,4              DEFAULT TO FAILURE.
         TM    FILEFLAG,FILEALOC+FILEIPT+FILEUSE      USEABLE?
         BNO   RET
         TM    FILEFLAG,FILEERR   DOES FILE HAVE AN ERROR?
         BNE   RET
         TM    FILEFLAG,FILEOPEN  IS THE FILE OPEN?
         IF    Z                  NO -- OPEN IT.
         LR    R0,R4
         SCALL OPENIN
         OI    FILEFLAG,FILEOPEN
         ENDIF
         READ  ECB,DI,(R4),(R5),'S',0,(R6)
         CHECK ECB                WAIT FOR IT.
         B     RET0
         EJECT
*
* TRY TO GET A LINE FROM REMOTE FILE
* MAY RETURN "NO DATA YET".
*
RIBFILL  ENTER DSA=YES            LOGICAL INPUT FROM REMOTE FILE
         L     R2,=V(REMOTENT)
         USING FILEDSCT,R2
         ZERO  R1
         SCALL REMOURS
         TST   R15
         IF    Z
         LA    R3,REMBUFF+2+REMOTLEN-1 POINT TO LAST CHARACTER IN BUFFE
         LA    R4,REMBUFF+1
         REPEAT
         CLI   0(R3),C' '         A SPACE?
         BREAK NE
         ZERO  R0
         S     R3,=F'1'
         CR    R3,R4
         UNTIL NH
         SR    R3,R4              LENGTH OF DATA READ IN
         L     R2,=V(SINENT)
         CH    R3,FILEIBML        TOO LONG?
         IF    H
         LH    R3,FILEIBML        SET TO MAX LENGTH
         ENDIF
         L     R4,FILE@IB         GET POINTER TO INPUT BUFFER
         STH   R3,0(R4)           SET NEW LENGTH
         S     R3,=F'1'           MINUS 1 FOR EXECUTE
         IF    NM
         EX    R3,MOVERIB
         ENDIF
         MVI   REMOWNER,X'00'
         SCALL REMWRT1
         L     R3,FILECHOD
         PRNTF '%S%L',((R4)),FO=(R3),PLIST=PLIST
         ZERO  R15
         ENDIF
         B     RET
MOVERIB  MVC   2(1,R4),REMBUFF+2
         EJECT
*
* PRINT A LINE ON REMOTE FILE.
* NEVER RETURNS "DATA NOT WRITTEN".
*
REMWRITE ENTER                    LOGICAL I/O TO REMOTE FILE
         LR    R2,R1              R2 -> FILE TABLE ENTRY FOR REMOTE
         USING FILEDSCT,R2
         LA    R1,1
         SCALL REMWAIT            WAIT UNTIL FILE IS OURS
         MVI   REMOWNER,X'00'     CHANGE OWNER TO TSO
         L     R3,FILE@OB         ADDRESS OF OUTPUT BUFFER TO USE
         LH    R4,0(R3)           LENGTH OF CURRENT BUFFER
         CH    R4,=AL2(REMOTLEN)  TOO BIG?
         IF    H
         LH    R4,=AL2(REMOTLEN)
         ENDIF
         LR    R5,R4              LENGTH TO MOVE
         S     R5,=F'1'           MINUS 1 FOR EXECUTE
         IF    NM
         EX    R5,MOVEROB         MOVE REMOTE OUTPUT BUFFER
         ENDIF
         SR    R5,R5              ZERO
         STH   R5,0(R3)           ZERO LENGTH OF BUFFER
         LA    R5,REMOTLEN        LENGTH OF DATA AREA
         SR    R5,R4              LENGTH TO FILL WITH SPACES
         S     R5,=F'1'           LENGTH MINUS 1
         IF    NM
         LA    R6,REMBUFF+2(R4)   POINT TO START OF AREA TO FILL
         MVI   0(R6),C' '         A SPACE
         S     R5,=F'1'           MINUS ONE FOR EXECUTE
         IF    NM
         EX    R5,PADROB          PAD REMOTE OUTPUT BUFFER
         ENDIF
         ENDIF
         SCALL REMWRT1            GO DUMP THE BUFFER
         DROP  R2
         B     RET0
MOVEROB  MVC   REMBUFF+2(1),2(R3)
PADROB   MVC   1(1,R6),0(R6)
         EJECT
*
* REMOURS -- CHECK IF REMOTE FILE RECORD IS "OURS"
*  R1 = RECORD # (0 OR 1)
*  RETURNS 0 IF OURS
*
REMOURS  ENTER
         LA    R1,X'100'(R1)
         ST    R1,REMOTTRZ
         L     R2,=A(REMOTENT)    POINT TO REMOTE FILE ENTRY
         USING FILEDSCT,R2
         TM    FILEFLAG,FILEOPEN  IS REMOTE FILE OPEN?
         IF    Z                  NO
         LA    R0,100             REDUCE IO RATE
         L     R1,=V(TIMEWAIT)
         ST    R0,0(R1)
         L     R3,=A(REMOTDCB)    GET DCB ADDRESS
         LR    R0,R3
         SCALL OPENOUT
         MVI   REMOWNER,X'00'
         SCALL REMWRT1
         MVI   REMOWNER,X'01'
         SCALL REMWRT1
         LR    R0,R3
         SCALL CLOSE
         LR    R0,R3
         SCALL OPENUP
         OI    FILEFLAG,FILEOPEN
         ENDIF
         L     R2,=A(REMOTDCB)    DCB TO USE
         LR    R0,R2
         LA    R1,REMOTTRZ
         SCALL POINT              POINT TO FIRST RECORD
         READ  REMDECB1,SF,(R2),REMBUFF,'S',MF=E
         CHECK REMDECB1
         ZERO  R15
         CLI   REMOWNER,X'01'     OUR FILE?
         IF    NE
         LA    R15,8
         ENDIF
         B     RET
         DROP  R2
         EJECT
*
* WAIT UNTIL REMOTE FILE RECORD IS "OURS".
* R1 = RECORD # (0 OR 1)
*
REMWAIT  ENTER
         ZERO  R0
         LOOP
         SCALL REMOURS
         TST   R15
         BREAK Z
         A     R0,=F'15'
         C     R0,=F'100'
         IF    H
         LA    R0,100
         ENDIF
         SCALL SLEEP
         ENDLOOP
         B     RET0
         EJECT
*
* ACTUALLY WRITE REMBUFF TO REMOTE FILE.
* RECORD MUST HAVE ALREADY BEEN SPECIFIED VIA "POINT".
*
REMWRT1  ENTER                    PHYSICAL I/O TO REMOTE FILE
         L     R2,=A(REMOTDCB)    ADDRESS OF DCB TO USE
         WRITE REMDECB1,SF,(R2),REMBUFF,'S',MF=E
         CHECK REMDECB1
         B     RET0
         EJECT
REMOTLEN EQU   80
MINWAITM EQU   25
MINWAIT# EQU   8
MAXWAIT# EQU   8
REMOTTRZ DC    A(X'100')
REMBUFF  DS    0CL(REMOTLEN+2)
REMOWNER DC    X'00'
UNUSED   DC    X'00'
REMDATA  DC    CL(REMOTLEN)' '
         DC    CL40' '
         READ  REMDECB1,SF,0,0,'S',MF=L
         EJECT
*
* WRITE RECORD TO SLAVE FILE.
* **** THIS CODE HAS NOT BEEN USED AT DUKE FOR YEARS ****
SLVWRITE ENTER DSA=YES
         LR    R2,R1              R2 -> FILE DESC TABLE FOR SLAVE
         USING FILEDSCT,R2
         L     R3,FILE@OB         R3 -> OUTPUT BUFFER FOR SLAVE
         L     R4,FILECHOD        R4 HAS MAP OF FILES TO ECHO TO
         PRNTF '%S%L',((R3)),FO=(R4),PLIST=PLIST
         SCALL BINTIME
         ST    R1,SLVBDATE        SAVE DATE INTO ACTUAL OUTPUT BUFFER
         ST    R0,SLVBTIME        SAVE TIME AS WELL
         MVI   SLVBDATA,C' '
         MVC   SLVBDATA+1(SLAVELEN-1),SLVBDATA
         LH    R4,0(R3)           GET LENGTH OF LOGICAL OUTPUT BUFFER
         S     R4,=F'1'
         IF    NM
         EX    R4,MOVESLVB
         ENDIF
         SR    R4,R4              ZERO R4
         STH   R4,0(R3)           ZERO LOGICAL BUFFER LENGTH
         L     R3,FILE@DCB        R3 -> SLAVE DCB
         TM    FILEFLAG,FILEOPEN  IS THE FILE OPEN?
         IF    Z                  NO,  OPEN IT
         LR    R0,R3
         SCALL OPENOUT
         DO    R5,SLV#RECS
         WRITE SLVDECB1,SF,(R3),SLVBUFF,'S',MF=E
         CHECK SLVDECB1
         ENDDO
         LR    R0,R3
         SCALL CLOSE
         LR    R0,R3
         SCALL OPENUP
         OI    FILEFLAG,FILEOPEN  FLAG FILE AS OPEN NOW
         ENDIF
         L     R5,FILEWRCT        WRITE COUNT TO FILE
         ST    R5,SLVBSEQ#        SAVE RECORD SEQUENCE NUMBER
         LR    R4,R5              SAVE
         A     R4,=F'1'           PLUS ONE FOR THIS RECORD
         ST    R4,FILEWRCT        UPDATE COUNT
         SR    R4,R4              ZERO FOR DIVIDE
         D     R4,=A(SLV#RECS)    MOD LENGTH OF FILE
         A     R4,=F'1'           PLUS 1
         SLL   R4,8               MOVE OVER A BYTE
         ST    R4,SLVTTRZ         SAVE RELATIVE RECORD ADDRESS
         LR    R0,R3
         LA    R1,SLVTTRZ
         SCALL POINT
         READ  SLVDECB1,SF,(R3),TMPBUFF,'S',MF=E
         CHECK SLVDECB1
         WRITE SLVDECB1,SF,(R3),SLVBUFF,'S',MF=E
         CHECK SLVDECB1
         DROP  R2
RET0     ZERO  R15
RET      EXIT  RC=(R15)
MOVESLVB MVC   SLVBDATA(1),2(R3)
SLVTTRZ  DS    F
SLAVELEN EQU   80
SLV#RECS EQU   50
SLVBUFF  DS    0CL(SLAVELEN+12)
SLVBSEQ# DC    A(0)
SLVBDATE DC    A(0)
SLVBTIME DC    A(0)
SLVBDATA DC    CL(SLAVELEN)' '
         DC    CL40' '
         READ  SLVDECB1,SF,0,0,'S',MF=L
         EJECT
         LTORG
         FILEDSCT
         DSA
PLIST    DS    8F
TMPBUFF  DS    CL(SLAVELEN+12)
SAVERC   DS    F
         ENDDSA
         REGS
         END
