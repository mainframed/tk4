         TITLE 'BOOKMOVE -- FIND A BOOK MOVE FOR DUCHESS'
BOOKMOVE CSECT
         EXTRN BDKEY
         EXTRN BINTIME
*
* R1 -> POSDB
* RETURN 0 IF BOOK MOVE FOUND, R1 CONTAINS BOOK MOVE.
* RETURN 4 IF NO BOOK MOVE.
*
BOOKBLEN EQU   6272               BLOCK LENGTH OF THE BOOK.
BOOKRLEN EQU   28                 RECORD LENGTH OF EACH BOOK ENTRY.
BOOKNREC EQU   30                 NUMBER OF RECORDS IN FILE.
BKKEYLEN EQU   22                 KEY LENGTH.
BKCH1    EQU   22                 CHOICE 1
BKCH2    EQU   24                 CHOICE 2
BKCH3    EQU   26                 CHOICE 3.
         ENTER DSA=YES
         LR    R11,R1             PICK UP A(DATABASE)
         USING POSDB,R11
         ST    R11,PLIST          SAVE IT.
         LA    R10,BKEY           POINT TO RETURNED KEY.
         ST    R10,PLIST+4        SAVE IT.
         LA    R1,PLIST           R1 -> A(PLIST)
         SCALL BDKEY              COMPUTE THE KEY FOR THIS NODE.
         L     R5,=A(BOOKBLEN/8)
         GETC  (R5)
         ST    R1,BLOCKADR
         MVC   BKEY1(BKKEYLEN),BKEY GET THE KEY INTO TEMP. AREA FOR HAS
         XC    BKEY1(BKKEYLEN/2),BKEY1+(BKKEYLEN/2)
         L     R2,BKEY1           CONTINUE EXCLUSIVE OR SOME MORE.
         L     R3,BKEY1+4
         MVC   BKEY1+12(6),BKEY1+5
         L     R4,BKEY1+12        GET THE SECOND HALF ...
         L     R5,BKEY1+16
         SLDL  R4,4               SHIFT ...
         XR    R2,R4              CONTINUE OR'ING.
         XR    R3,R5
         SRDL  R2,10              ALIGN IT AT THE LOW BIT OF THE REG.
         SRL   R3,10              SHIFT THE SECOND HALF.
         XR    R2,R3              EXCLUSIVE OR THIS TOO
         LR    R3,R2              GET BACK INTO REG.
         SRL   R3,11              THE STRING IS 22 BITS LONG NOW; HALVE
         SLL   R2,21              STRIP LEADING 1'S
         SRL   R2,21
         XR    R3,R2              CONSTRUCT FINAL KEY.
         ZERO  R2                 CLEAR A REG. FOR DIVISION.
         LR    R4,R3              SAVE HASH #
         D     R2,=A(BOOKNREC)    DIVIDE BY THE NUMBER OF RECORDS.
         SLL   R2,8               SHIFT IT TO THE RIGHT BOUNDARY.
         ST    R2,DEVADDR         SAVE RELATIVE BLOCK #
         LR    R3,R4              RECOVER HASH #
         ZERO  R2                 CLEAR REG.
         D     R2,=A(BOOKBLEN/BOOKRLEN) GET THE OFFSET IN THE RECORD.
*                                 STARTING ADDR OF THE COMPARE)
         L     R5,BLOCKADR
         LA    R6,DEVADDR         GET THE DEVICE ADDR
         L     R1,=V(BOOKENT)     GET ADDRESS OF BOOK DCB IN TABLE.
         USING FILEDSCT,R1        NOTE USAGE.
         ST    R5,FILE@IB         SAVE INPUT BUFFER ADDRESS.
         ST    R6,FILERDCT        AND POINTER TO THE DEVICE ADDRESS.
         L     R15,FILE@RD        GET ADDRESS OF READ ROUTINE.
         BALR  R14,R15            CALL IT.
         LTR   R15,R15            RETURN OK?
         BNZ   NOTFOUND           NO -- LEAVE.
         ZERO  R4                 CLEAR TMP. REG.
         LR    R5,R2              PICK UP THE INDEX INTO THE TABLE.
         M     R4,=A(BOOKRLEN)    OFFSET OURSELVES INTO THE TABLE.
         L     R10,BLOCKADR       GET BLOCK ADDRESS.
         LR    R4,R10
         AR    R4,R5              GET INTO THE CORRECT ENTRY IN TABLE.
         LR    R7,R4              REMEMBER STARTING ADDR.
         A     R10,=A(BOOKBLEN)   IN THE BLOCK.
         REPEAT
         CLC   0(BKKEYLEN,R4),BKEY IS THIS THE KEY?
         BZ    FOUND              YES -- TAKE IT.
         CLC   0(BKKEYLEN,R4),ZKEY IS IT 0 (NULL KEY)?
         BZ    NOTFOUND           YES -- LEAVE.
         A     R4,=A(BOOKRLEN)    SKIP OVER NEXT RECORD IN INDEX.
         CLR   R4,R10             OVER TOP YET?
         UNTIL NL                 LOOP UNTIL WE GET TO END.
         L     R4,BLOCKADR        PICK UP BLOCK ADDRESS.
         CLR   R4,R7              STARTING PLACE YET?
         WHILE L
         CLC   0(BKKEYLEN,R4),BKEY THIS ONE MATCH?
         BZ    FOUND              YES -- TAKE IT.
         CLC   0(BKKEYLEN,R4),ZKEY IS IT THE NULL KEY?
         BZ    NOTFOUND           YES -- LEAVE.
         A     R4,=A(BOOKRLEN)    SKIP TO NEXT ENTRY.
         CLR   R4,R7              IS IT OVER TO THE STARTING ADDR?
         ENDWHILE
NOTFOUND EXIT  RC=4               EXIT WITH FAILURE.
FOUND    ZERO  R1                 CLEAR A REG.
         LH    R0,BKCH1(R4)       COMPUTE NUMBER OF CHOICES.
         LNR   R0,R0
         SRA   R0,31
         SR    R1,R0
         LH    R0,BKCH2(R4)       GET SECOND STRUCTURE MEMBER.
         LNR   R0,R0
         SRA   R0,31
         SR    R1,R0
         LH    R0,BKCH3(R4)       GET LAST STRUCTURE MEMBER.
         LNR   R0,R0
         SRA   R0,31
         SR    R1,R0              R1 NOW HAS THE # OF CHOICES.
         ST    R1,NUMCH
         SCALL BINTIME
         LR    R1,R0
         SRL   R1,2               COMPUTE WHICH CHOICE
         ZERO  R0
         D     R0,NUMCH
         AR    R0,R0              TAKE THE REMAINDER.
         AR    R4,R0              AND INDEX INTO THE LIST.
         ZERO  R2                 WE WILL CONSTRUCT THE MOVE IN R2.
         LH    R3,BKCH1(R4)       PICK UP THE MOVE IN BOOK FORMAT.
         LR    R5,R3              SAVE IT.
         SRL   R5,10
         N     R5,=X'0000003F'    AND OFF LOW GARBAGE.
         SLL   R5,8               GET SRC SQR INTO HI BYTE.
         OR    R2,R5
         SRL   R5,8               MOVE IT BACK AGAIN.
         LB    R8,WK              GET ALL KINGS.
         OB    R8,BK
         BSETB R6,0(R5)           SET A BIT ON THE SRC SQR.
         NBR   R6,R8              IS IT A KING?
         TSTB  R6
         IF    NZ
         LR    R6,R3              GET THE MOVE.
         SRL   R6,4               GET TO A BETTER BOUNDARY.
         N     R6,=X'0000003F'    KEEP ONLY LOW ORDER.
         SR    R6,R5              COMPUTE MOVE DISTANCE.
         LPR   R6,R6
         C     R6,=F'2'           IS IT EXACTLY 2 SQRS (CASTLE ONLY)?
         IF    Z
         O     R2,=X'00008000'    NOTE IT AS SUCH.
         ENDIF
         ENDIF
         LB    R8,WP              GET ALL PAWNS.
         OB    R8,BP
         BSETB R6,0(R5)
         NBR   R6,R8              LEAVE A BIT ON IF A PAWN.
         TSTB  R6
         IF    NZ
         LR    R6,R3              GET THE MOVE.
         SRL   R6,4
         N     R6,=X'0000003F'    KEEP ONLY LOW STUFF.
         LR    R7,R6              SAVE IT.
         SR    R6,R5              COMPUTE MOVE DISTANCE.
         LPR   R6,R6              IS IT A 2-SQR PAWN MOVE?
         C     R6,=F'16'          2-SQR PAWN MOVE?
         IF    Z
         O     R2,=X'0000C000'    SIGNAL AS SUCH.
         ENDIF
         LB    R8,W               GET ALL MATERIAL.
         OB    R8,B
         LR    R5,R7
         BSETB R6,0(R5)           SET BIT ON DST SQR.
         NBR   R6,R8              IS IT EMPTY?
         TSTB  R6
         IF    Z
         LR    R7,R3              GET THE MOVE.
         SRL   R7,10              GET THE SRC SQR.
         N     R7,=X'00000007'
         LR    R6,R5
         N     R6,=X'00000007'
         CR    R7,R6              IS IT A CAPTURE ANYWAY?
         IF    NZ
         O     R2,=X'00004000'    SIGNAL AS SPC.
         ENDIF
         ENDIF
         SRL   R5,3               SHIFT TO THE RANK.
         N     R5,=X'00000007'
         LTR   R5,R5              IS IT A PROMOTION?
         BZ    PROM
         C     R5,=X'00000007'
         IF    Z
PROM     O     R2,=X'00004000'    OR IN THE PROMOTION CODE.
         LR    R4,R3              RECOVER MOVE.
         SRL   R4,2               SHIFT IT
         N     R4,=X'00000003'
         LA    R5,3               INVERT CODES FOR THE INTERNAL FORMAT.
         SR    R5,R4
         SLL   R5,6
         OR    R2,R5              OR IT INTO THE MOVE.
         ENDIF
         ENDIF
         LR    R5,R3              RECOVER MOVE.
         SRL   R5,4               SHIFT TO THE LOW ORDER.
         N     R5,=X'0000003F'    KEEP ONLY GOOD STUFF.
         OR    R2,R5              OR IT IN.
         EXIT  RC=0,RTN=(R2)      EXIT WITH THE MOVE.
ZKEY     DC    (BKKEYLEN)X'00'    NULL KEY ENTRY.
         FILEDSCT
         DSA
DEVADDR  DS    D
PLIST    DS    2F
BKEY     DS    CL(BKKEYLEN+2)
BKEY1    DS    CL(BKKEYLEN+2)
BLOCKADR DS    F
NUMCH    DS    F
         ENDDSA
POSDB    DSECT
         POSDB
         REGS
         END
