//BOOKUTIL JOB DU.D09.AB1825.TRT,'TOM TRUSCOTT',M=1,P=200,T=5,PRTY=0
// EXEC PLOCL,R.C=500K,
//  PARM.C='OPT(2),NGS,CS(48),OF,AG,ESD,MAP,NC(E)'
//C.SYSIN DD *
 BOOKUTL..PROCEDURE OPTIONS(MAIN) REORDER,.
 DCL BOOK FILE RECORD DIRECT KEYED ENV(F BLKSIZE(6272) REGIONAL(1));
 DCL TAPE FILE RECORD SEQUENTIAL ENV(F BLKSIZE(6272) CONSECUTIVE);
 DCL (I,J,K,M,N,KD,SUB,KILL,REG#,SCOL,PAGE#,CONV,ERR,TREE,
     LEGALITIES,BOARD(8,8)) FIXED BIN STATIC,.
 DCL LPRNT(3) FIXED BIN STATIC;
 DCL WARNINGS FIXED BIN STATIC;
 DCL (IIII,IWS,II,INC,JNC,MM,NN) FIXED BIN STATIC;
 DCL (NEWREC,OLDREC,#COLL,#OV)(1) FIXED BIN CONTROLLED;
 DCL (RECORD,STRING) FIXED BIN(31,0) STATIC;
 DCL (REGTMP,REGION,REGNO,RANDOM,IRWAS) FIXED DEC(8,0) STATIC;
 DCL BDKEY BIT(176) STATIC ALIGNED VARYING,.
 DCL DELPAGE(224) BIT(224) DEFINED PAGE;
 DCL INFILE(0:1,224) BIT(224) CONTROLLED;
 DCL TEMP BIT(224) STATIC ALIGNED VARYING;
 DCL CASTLE BIT(4) STATIC ALIGNED,.
 DCL (LST,CHKCARD,WRIT,UPDAT,LDISK,STOPERR,COLVAR,STRTBD,DEL,PRTBD,
     COMMA,CHKBD,TOVFL,FOVFL,BITS,LCOL,OVFL,ENDIT,TAPEIN,TAPEOUT,
     CHKJMP,LEGAL,MAP,INCORE) BIT(1) ALIGNED STATIC;
 DCL REPLACE BIT(1) STATIC ALIGNED;
 DCL CTLCHAR CHAR(1) ALIGNED STATIC,.
 DCL TMP CHAR(9) ALIGNED STATIC,.
 DCL CARD CHAR(76) STATIC ALIGNED;
 DCL (@REC,@TEMP,@MVTOP,@MOVE) POINTER STATIC;
 DCL 1 INEX STATIC,
       2 FROM FIXED BIN CPLX,
       2 TOO FIXED BIN CPLX,
       2 VALUE FIXED BIN,
       2 CHECK BIT(1),
       2 MATE BIT(1);
 DCL 1 COMPARE STATIC,
       2 FROMR BIT(3),
       2 FROMC BIT(3),
       2 TOOR BIT(3),
       2 TOOC BIT(3),
       2 PAWN BIT(2),
       2 CHECK BIT(1),
       2 MATE BIT(1);
 DCL COMPAREDEF BIT(16) DEFINED COMPARE;
 DCL 1 PAGEDEF(224) DEFINED PAGE,
       2 KEYDEF BIT(176),
       2 MOVES(3) BIT(16);
 DCL 1 PAGE(224) STATIC,
       2 KEY BIT(176),
       2 MOVES(3),
         3 FROMR BIT(3),
         3 FROMC BIT(3),
         3 TOOR BIT(3),
         3 TOOC BIT(3),
         3 PAWN BIT(2),
         3 CHECK BIT(1),
         3 MATE BIT(1);
 DCL 1 MOVELIST BASED(@MOVE),
       2 @NEXT POINTER,
       2 MVE CHAR(9);
 DCL CTLSTMT CHAR(20) STATIC VARYING,
     (NEXT,INDEX,PREFIX) CHAR(3) STATIC,
     (DATE,TIME,NULL,ALLOCATION,ONCODE,ONSOURCE,ONCHAR,ONFILE) BUILTIN,
     1 MOVE BASED(@REC),
       2 HOWMANY FIXED BIN,
       2 PLACE FIXED BIN,
       2 MOVE# FIXED BIN,
       2 @LAST POINTER,
       2 @MVLIST POINTER,
       2 COLOR BIT(1) ALIGNED,
       2 VARIED BIT(1) ALIGNED,
       2 ENPASS FIXED BIN CPLX,
       2 K_SIDE(-1:1) FIXED BIN,
       2 Q_SIDE(-1:1) FIXED BIN,
       2 BD(8,8) FIXED BIN,
       2 LINES(15),
         3 ALGEBRAIC CHAR(9),
         3 INDEXTO CHAR(3);
 /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
1        ON ERROR BEGIN;
            ERR=ERR+1;
            PUT SKIP EDIT('***** ERROR -- ONCODE=',ONCODE)(R(F3)),.
            PUT EDIT(' EXPECTED LABEL=',NEXT,' ACTUAL LABEL=',INDEX)
            (R(F3)),.
            IF STOPERR
            THEN SIGNAL ENDFILE(SYSIN);
            IF INDEX='./'
            THEN DO;
                 PUT SKIP EDIT('***** ERROR -- CONTROL STATEMENTS FOUND
 WHERE RECORD EXPECTED.')(R(F3)),.
                 PUT SKIP EDIT('TREE TERMINATED, CONTROL STATEMENTS EXEC
 UTED.')(R(F3)),.
                 DO WHILE(@REC ^= NULL);
                    @TEMP=@REC->MOVE.@LAST;
                    FREE MOVE,.
                    @REC=@TEMP;
                    END,.
                 @TEMP=@MVTOP;
                 DO WHILE(@TEMP ^= NULL);
                    @MOVE=@TEMP;
                    @TEMP=@TEMP->MOVELIST.@NEXT;
                    FREE MOVELIST;
                    END;
                 @MVTOP=NULL;
                 SIGNAL ENDPAGE(SYSPRINT);
                 GO TO STARTUP;
                 END;
            GET SKIP;
            INDEX=GETCHAR;
            GO TO ERRLOOP;
 F3:        FORMAT(A);
            END;
         ON CONVERSION BEGIN;
            CONV=CONV+1;
            IF ONSOURCE='./'
            THEN DO;
                 PUT SKIP EDIT('***** ERROR -- CONTROL STATEMENTS FOUND
 WHERE BRANCHING ORDER NUMBER EXPECTED')(R(F3)),.
                 PUT SKIP EDIT('TREE TERMINATED, CONTROL STATEMENTS EXEC
 UTED.')(R(F3)),.
                 INDEX='./';
                 SIGNAL ERROR;
                 END;
            PUT SKIP EDIT('***** CONVERSION -- ONCHAR=',ONCHAR,
            'ONSOURCE=',ONSOURCE,'ONFILE=',ONFILE)
            (A,A,X(1),A,A,X(1));
            SIGNAL ERROR;
 F3:        FORMAT(A);
            END;
         ON ENDFILE(SYSIN) BEGIN;
            @MVTOP=NULL;
            STOPERR='1'B;
            SIGNAL ENDPAGE(SYSPRINT);
            IF INCORE
            THEN DO REGION=0 TO RANDOM-1;
                 DELPAGE=INFILE(REGION,*);
                 REWRITE FILE(BOOK) FROM(PAGE) KEY(REGION);
                 END;
            IF TAPEOUT
            THEN DO,.
                 OPEN FILE(TAPE) OUTPUT TITLE('TAPEOUT'),.
                 DO REGION=0 TO RANDOM-1,.
                    READ FILE(BOOK) INTO(PAGE) KEY(REGION),.
                    WRITE FILE(TAPE) FROM(PAGE),.
                    END,.
                 CLOSE FILE(TAPE),.
                 END,.
            CLOSE FILE(BOOK),.
            PUT SKIP(2) EDIT('END OF SOURCE RECORDS')(R(F3)),.
            PUT SKIP(4) EDIT('TREE DIAGNOSTICS','____ ___________')
            (R(F6)),.
            PUT SKIP(3) EDIT('NUMBER OF COMPLETE TREES PROCESSED=',TREE)
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF OLD RECORDS=',SUM(OLDREC))
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF RECORDS WRITTEN=',SUM(NEWREC))
            (R(F5)),.
            PUT SKIP(2) EDIT('TOTAL NUMBER OF RECORDS=',SUM(OLDREC)+
            SUM(NEWREC) )
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF TRACK OVERFLOWS=',SUM(#OV))
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF COLLISIONS=',SUM(#COLL))
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF CONVERSIONS=',CONV)
            (R(F5)),.
            PUT SKIP(2) EDIT('NUMBER OF ERRORS DETECTED=',ERR)
            (R(F5)),.
            PUT SKIP(2)EDIT('NUMBER OF LEGALITY EXCEPTIONS=',LEGALITIES)
            (R(F5)),.
            IF RANDOM=0
            THEN STOP;
            PUT SKIP(2) EDIT('NUMBER OF WARNINGS DETECTED=',WARNINGS)
            (R(F5));
            PUT SKIP(2) EDIT('TOTAL FILE DENSITY=',(100*(SUM(OLDREC)+
            SUM(NEWREC)))/(224*RANDOM),'%')
            (R(F5));
            IF OVFL
            THEN PUT SKIP(2) EDIT('***** WARNING -- NO MORE SPACE ON FIL
 E')(R(F3)),.
            PUT SKIP(4) EDIT('BREAKDOWN BY REGIONS',
            '_________ __ _______')
            (R(F6)),.
            PUT SKIP(2) EDIT('REGION','OLD RECORDS','NEW RECORDS',
            'TOTAL RECORDS','COLLISIONS','OVERFLOWS','DENSITY')
            (COL(20),A,X(5),A,X(3),A,X(2),A,X(2),A,X(4),A,X(5),A),.
            PUT SKIP(2),.
            DO I=1 TO RANDOM,.
               J=I-1,.
               PUT SKIP EDIT(J,OLDREC(I),NEWREC(I),OLDREC(I)+NEWREC(I),
               #COLL(I),#OV(I),(100*(OLDREC(I)+NEWREC(I)))/(224),
               '%')
               (COL(21),F(3),COL(34),F(4),COL(48),F(4),COL(62),F(4),
               COL(76),F(4),COL(90),F(3),COL(103),F(3),A),.
               END,.
            STOP;
 F3:        FORMAT(A);
 F5:        FORMAT(A,COL(38),F(5),A);
 F6:        FORMAT(A,SKIP(0),A);
            END;
         ON ENDPAGE(SYSPRINT) BEGIN;
 DCL J FIXED BIN STATIC;
 DCL (@TEMP,@TEST) POINTER STATIC;
            @TEST=NULL;
            PUT PAGE EDIT('DUCHESS SOURCE BOOK FILE','PAGE',PAGE#)
            (R(F8)),.
            @TEMP=@MVTOP;
            IF @TEMP ^= NULL
            THEN @TEST=@TEMP->MOVELIST.@NEXT;
            DO J=1 BY 1 WHILE(@TEMP ^= NULL & @TEST ^= NULL);
               IF MOD(J,2)=1
               THEN PUT EDIT((J+1)/2,'.',@TEMP->MOVELIST.MVE)(F(2),A,A);
               ELSE PUT EDIT(@TEMP->MOVELIST.MVE)(X(1),A);
               @TEMP=@TEST;
               @TEST=@TEMP->MOVELIST.@NEXT;
               END;
            PUT SKIP(2);
            PAGE#=PAGE#+1;
 F8:        FORMAT(COL(54),A,COL(120),A,F(9));
            END;
         OPEN FILE(SYSPRINT) LINESIZE(132), FILE(SYSIN) TITLE('INPUT'),.
         PUT EDIT('DUCHESS SOURCE BOOK FILE','PAGE        1')
         (R(F8)),.
         CTLSTMT=DATE;
         PUT SKIP EDIT('DATE',SUBSTR(CTLSTMT,3,2),'/',SUBSTR(CTLSTMT,5,
         2),'/',SUBSTR(CTLSTMT,1,2))
         (COL(120),A(4),COL(125),A(2),A(1),A(2),A(1),A(2));
         CTLSTMT=TIME;
         PUT SKIP EDIT('TIME',SUBSTR(CTLSTMT,1,2),':',SUBSTR(CTLSTMT,3,
         2),':',SUBSTR(CTLSTMT,5,2),'.',SUBSTR(CTLSTMT,7,3))
         (COL(120),A(4),COL(121),A(2),A(1),A(2),A(1),A(2),A(1),A(3));
         PUT SKIP(4) EDIT('BOOKUTL SOURCE OPTION DEFAULTS --    LIST, CH
 ECK, NOWRITE, NOUPDATE, LDISK=000, NOSTOPERR, NOCHKBD, STRTBD, NODELETE
 , RANDOM=00000,')
         (R(F3)),.
         PUT SKIP EDIT('NEXT=AAA, NOPRTBD, FILEOVFL, TRKOVFL, NOTAPEIN,
 NOTAPEOUT, NOMAP, NOLEGALITY, NOINCORE,','NOREPLACE')
         (COL(38),A);
         FOVFL,TOVFL,LEGAL,MAP,OVFL,ENDIT,TAPEIN,TAPEOUT,DEL,PRTBD,
         WRIT,UPDAT,LDISK,STOPERR,CHKBD,INCORE='0'B;
         REPLACE='0'B;
         ALLOCATE NEWREC,OLDREC,#COLL,#OV;
         NEWREC,OLDREC,#COLL,#OV=0;
         STRTBD,LST,CHKCARD='1'B;
         RANDOM,CONV,ERR,TREE,LEGALITIES=0;
         WARNINGS=0;
         LPRNT=0;
         PAGE#=2;
         @REC,@MVTOP=NULL;
         GET EDIT(CTLSTMT)(R(F7)),.
 STARTUP:NEXT='AAA';
         IF CTLSTMT^='./'
         THEN GO TO TEST;
         COMMA='0'B;
         PUT SKIP(2) EDIT('OPTIONS SPECIFIED -- ')(R(F3)),.
 START:  CTLSTMT='';
 SBACK.. GET EDIT(CTLCHAR)(R(F10)),.
         IF CTLCHAR=' '
         THEN GO TO SBACK;
 CTLOOP: IF CTLCHAR=',' × CTLCHAR=' '
         THEN GO TO C_OUT;
         CTLSTMT=CTLSTMT××CTLCHAR;
         GET EDIT(CTLCHAR)(R(F10)),.
         GO TO CTLOOP;
 C_OUT:  IF COMMA
         THEN PUT EDIT(', ')(R(F3)),.
         PUT EDIT(CTLSTMT)(R(F3)),.
         COMMA='1'B;
         IF CTLSTMT='CHECK'
         THEN CHKCARD='1'B;
         ELSE IF CTLSTMT='NOCHECK'
         THEN CHKCARD='0'B;
         ELSE IF CTLSTMT='WRITE'
         THEN WRIT='1'B;
         ELSE IF CTLSTMT='NOWRITE'
         THEN WRIT='0'B;
         ELSE IF CTLSTMT='UPDATE'
         THEN UPDAT='1'B;
         ELSE IF CTLSTMT='NOUPDATE'
         THEN UPDAT='0'B;
         ELSE IF CTLSTMT='DELETE'
         THEN DEL='1'B;
         ELSE IF CTLSTMT='NODELETE'
         THEN DEL='0'B;
         ELSE IF CTLSTMT='LIST'
         THEN LST='1'B;
         ELSE IF CTLSTMT='NOLIST'
         THEN LST='0'B;
         ELSE IF CTLSTMT='STOPERR'
         THEN STOPERR='1'B;
         ELSE IF CTLSTMT='NOSTOPERR'
         THEN STOPERR='0'B;
         ELSE IF CTLSTMT='CHKBD'
         THEN CHKBD='1'B;
         ELSE IF CTLSTMT='NOCHKBD'
         THEN CHKBD='0'B;
         ELSE IF CTLSTMT='STRTBD'
         THEN STRTBD='1'B;
         ELSE IF CTLSTMT='NOSTRTBD'
         THEN STRTBD='0'B;
         ELSE IF CTLSTMT='PRTBD'
         THEN PRTBD='1'B;
         ELSE IF CTLSTMT='NOPRTBD'
         THEN PRTBD='0'B;
         ELSE IF CTLSTMT='FILEOVFL'
         THEN FOVFL='0'B;
         ELSE IF CTLSTMT='NOFILEOVFL'
         THEN FOVFL='1'B;
         ELSE IF CTLSTMT='TRKOVFL'
         THEN TOVFL='0'B;
         ELSE IF CTLSTMT='NOTRKOVFL'
         THEN TOVFL='1'B;
         ELSE IF CTLSTMT='MAP'
         THEN MAP='1'B,.
         ELSE IF CTLSTMT='NOMAP'
         THEN MAP='0'B,.
         ELSE IF CTLSTMT='LEGALITY'
         THEN LEGAL='1'B,.
         ELSE IF CTLSTMT='NOLEGALITY'
         THEN LEGAL='0'B,.
         ELSE IF CTLSTMT='INCORE'
         THEN INCORE='1'B;
         ELSE IF CTLSTMT='NOINCORE'
         THEN INCORE='0'B;
         ELSE IF CTLSTMT='TAPEIN'
         THEN TAPEIN='1'B,.
         ELSE IF CTLSTMT='NOTAPEIN'
         THEN TAPEIN='0'B,.
         ELSE IF CTLSTMT='TAPEOUT'
         THEN TAPEOUT='1'B,.
         ELSE IF CTLSTMT='NOTAPEOUT'
         THEN TAPEOUT='0'B,.
         ELSE IF CTLSTMT='REPLACE'
         THEN REPLACE='1'B;
         ELSE IF CTLSTMT='NOREPLACE'
         THEN REPLACE='0'B;
         ELSE IF CTLSTMT='ENDUP'
         THEN ENDIT='1'B,.
         ELSE IF SUBSTR(CTLSTMT,1,6)='LDISK='
         THEN DO;
              GET STRING(CTLSTMT) EDIT(LPRNT)(X(6),(3)F(1));
              LDISK='1'B;
              END;
         ELSE IF SUBSTR(CTLSTMT,1,7)='RANDOM='
         THEN GET STRING(CTLSTMT) EDIT(RANDOM)(X(7),F(5));
         ELSE IF SUBSTR(CTLSTMT,1,5)='NEXT='
         THEN GET STRING(CTLSTMT) EDIT(NEXT)(X(5),A(3));
         ELSE PUT SKIP EDIT('ERRONEOUS PARM OPTION HAS BEEN IGNORED, ',
         CTLSTMT)(R(F3)),.
         IF CTLCHAR=','
         THEN GO TO START;
         IF ^ENDIT
         THEN DO;
              GET SKIP EDIT(CTLSTMT)(R(F7));
              IF CTLSTMT='./'
              THEN GO TO START;
              END;
 TEST:   PUT SKIP(3) EDIT('BOOKUTL SOURCE OPTIONS IN EFFECT')
         (COL(50),A);
         IF LEGAL
         THEN CHKBD='1'B;
         IF WRIT
         THEN GO TO RNDMS,.
         IF UPDAT
         THEN GO TO RNDMS,.
         IF DEL
         THEN
 RNDMS..      DO,.
              CHKBD,CHKJMP='1'B,.
              IF RANDOM LE 0
              THEN DO,.
                   PUT SKIP EDIT('***** ERROR -- MUST HAVE AT LEAST ONE
 REGION TO USE FILE')
                   (R(F3)),.
                   SIGNAL ENDFILE(SYSIN),.
                   END,.
              END,.
         ELSE DO;
              IF RANDOM^=0
              THEN DO;
                   UPDAT='1'B;
                   GO TO RNDMS;
                   END;
              CHKJMP='0'B;
              END;
         IF LST
         THEN PUT SKIP(2) EDIT('LIST')
         (R(F1)),.
         ELSE PUT SKIP(2) EDIT('NOLIST')
         (R(F2)),.
         IF CHKCARD
         THEN PUT SKIP EDIT('CHECK')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOCHECK')
         (R(F2)),.
         IF WRIT
         THEN PUT SKIP EDIT('WRITE')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOWRITE')
         (R(F2)),.
         IF UPDAT
         THEN PUT SKIP EDIT('UPDATE')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOUPDATE')
         (R(F2)),.
         IF DEL
         THEN PUT SKIP EDIT('DELETE')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NODELETE')
         (R(F2)),.
         IF REPLACE
         THEN PUT SKIP EDIT('REPLACE')
         (R(F1));
         ELSE PUT SKIP EDIT('NOREPLACE')
         (R(F2));
         IF STOPERR
         THEN PUT SKIP EDIT('STOPERR')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOSTOPERR')
         (R(F2)),.
         IF CHKBD
         THEN PUT SKIP EDIT('CHKBD')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOCHKBD')
         (R(F2)),.
         IF STRTBD
         THEN PUT SKIP EDIT('STRTBD')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOSTRTBD')
         (R(F2)),.
         IF INCORE
         THEN PUT SKIP EDIT('INCORE')
         (R(F1));
         ELSE PUT SKIP EDIT('NOINCORE')
         (R(F2));
         IF PRTBD
         THEN PUT SKIP EDIT('PRTBD')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOPRTBD')
         (R(F2)),.
         IF ^FOVFL
         THEN PUT SKIP EDIT('FILEOVFL')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOFILEOVFL')
         (R(F2)),.
         IF ^TOVFL
         THEN PUT SKIP EDIT('TRKOVFL')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOTRKOVFL')
         (R(F2)),.
         IF MAP
         THEN PUT SKIP EDIT('MAP')(R(F1)),.
         ELSE PUT SKIP EDIT('NOMAP')(R(F2)),.
         IF  TAPEIN
         THEN PUT SKIP EDIT('TAPEIN')(R(F1)),.
         ELSE PUT SKIP EDIT('NOTAPEIN')(R(F2)),.
         IF TAPEOUT
         THEN PUT SKIP EDIT('TAPEOUT')
         (R(F1)),.
         ELSE PUT SKIP EDIT('NOTAPEOUT')
         (R(F2)),.
         IF LEGAL
         THEN PUT SKIP EDIT('LEGALITY')(R(F1)),.
         ELSE PUT SKIP EDIT('NOLEGALITY')(R(F2)),.
         PUT SKIP EDIT('LDISK=',LPRNT)(COL(64),A,(3)F(1));
         PUT SKIP EDIT('RANDOM=',RANDOM)(COL(64),A,P'99999');
         PUT SKIP EDIT('NEXT=',NEXT)(COL(64),A,A);
         IF DEL
         THEN IF WRIT
         THEN GO TO OPERR,.
         ELSE IF UPDAT
         THEN GO TO OPERR,.
         ELSE,.
         ELSE IF UPDAT
         THEN IF WRIT
         THEN
 OPERR..      DO,.
              PUT SKIP EDIT('***** ERROR -- MUTUALLY EXCLUSIVE OPTIONS S
 PECIFIED. JOB TERMINATED.')(R(F3)),.
              SIGNAL ENDFILE(SYSIN),.
              END;
         IF WRIT
         THEN DO;
              CLOSE FILE(BOOK);
              DO I=1 TO 224;
                 DELPAGE(I)='0'B;
                 END;
              OPEN FILE(BOOK) OUTPUT;
              DO REGION=0 TO RANDOM-1;
                 WRITE FILE(BOOK) FROM(PAGE) KEYFROM(REGION);
                 END;
              CLOSE FILE(BOOK);
              END;
         IF CHKJMP
         THEN OPEN FILE(BOOK) UPDATE;
         IF INCORE
         THEN DO;
              IF RANDOM=0
              THEN GO TO OPERR;
              IF ALLOCATION(INFILE)=0
              THEN DO;
                   ALLOCATE INFILE(0:RANDOM-1,224) BIT(224);
                   DO REGION=0 TO RANDOM-1;
                      READ FILE(BOOK) INTO(PAGE) KEY(REGION);
                      INFILE(REGION,*)=DELPAGE;
                      END;
                   END;
              ELSE DO;
                   IF HBOUND(INFILE,1)+1^=RANDOM
                   THEN DO;
                        PUT SKIP EDIT('***** ERROR -- SIZE OF INFILE INC
 OMPATIBLE WITH PREVIOUS DECLARATION. PROGRAM TERMINATED.')(A);
                        SIGNAL ENDFILE(SYSIN);
                        END;
                   END;
              END;
         IF TAPEIN
         THEN DO,.
              OPEN FILE(TAPE) INPUT TITLE('TAPEIN'),.
              DO REGION=0 TO RANDOM-1,.
                 READ FILE(TAPE) INTO(PAGE),.
                 CALL WRITER(REGION);
                 END,.
              CLOSE FILE(TAPE),.
              END,.
         IF MAP
         THEN DO,.
              SIGNAL ENDPAGE(SYSPRINT),.
              PUT SKIP(2) EDIT('MAP OF DATA FILE')(COL(59),A),.
              DO REGION=0 TO RANDOM-1,.
                 PUT SKIP(2) EDIT('REGION NUMBER',REGION)(R(F4)),.
                 PUT SKIP;
                 CALL READER(REGION);
                 DO I=1 TO 224;
                    IF PAGE.KEY(I)='0'B
                    THEN MAP='0'B,.
                    ELSE MAP='1'B,.
                    PUT EDIT(MAP)(B),.
                    IF I=112
                    THEN PUT SKIP,.
                    END,.
                 END,.
              END,.
         IF LDISK
         THEN DO REGION=0 TO RANDOM-1,.
              SIGNAL ENDPAGE(SYSPRINT);
              PUT SKIP EDIT('CONTENTS OF REGION NUMBER ',REGION)
              (A,F(8));
              CALL READER(REGION);
              DO I=1 TO 224;
                 BDKEY=KEY(I);
                 IF BDKEY^='0'B
                 THEN DO;
                      M=0;
                      DO J=1 TO 3;
                         IF (PAGE(I).FROMC(J) ^= PAGE(I).TOOC(J) ×
                            PAGE(I).FROMR(J) ^= PAGE(I).TOOR(J))
                         THEN M = M + 1;
                         END;
                      IF LPRNT(M) = 0
                      THEN GO TO NXTREC;
                      REG#=1;
                      DO M=1 TO 8,.
                      DO N=1 TO 8,.
                      BITS=SUBSTR(BDKEY,REG#,1);
                      REG#=REG#+1;
                      IF BITS='0'B
                      THEN BOARD(M,N)=0;
                      ELSE DO;
                           LCOL=SUBSTR(BDKEY,REG#,1);
                           REG#=REG#+1;
                           BITS=SUBSTR(BDKEY,REG#,1);
                           REG#=REG#+1;
                           IF ^BITS
                           THEN IF LCOL
                           THEN BOARD(M,N)=1;
                           ELSE BOARD(M,N)=-1;
                           ELSE DO;
                                CASTLE=SUBSTR(BDKEY,REG#,2);
                                REG#=REG#+2;
                                IF CASTLE='00'B
                                THEN IF LCOL
                                THEN BOARD(M,N)=2;
                                ELSE BOARD(M,N)=-2;
                                ELSE IF CASTLE='01'B
                                THEN IF LCOL
                                THEN BOARD(M,N)=3;
                                ELSE BOARD(M,N)=-3;
                                ELSE IF CASTLE='10'B
                                THEN IF LCOL
                                THEN BOARD(M,N)=4;
                                ELSE BOARD(M,N)=-4;
                                ELSE DO;
                                     BITS=SUBSTR(BDKEY,REG#,1);
                                     REG#=REG#+1;
                                     IF BITS
                                     THEN IF LCOL
                                     THEN BOARD(M,N)=6;
                                     ELSE BOARD(M,N)=-6;
                                     ELSE IF LCOL
                                     THEN BOARD(M,N)=5;
                                     ELSE BOARD(M,N)=-5;
                                     END;
                                END;
                           END;
                      END;
                      END;
                      CASTLE=SUBSTR(BDKEY,REG#,4);
                      REG#=REG#+4;
                      LCOL=SUBSTR(BDKEY,REG#,1);
                      REG#=REG#+1;
                      TEMP=SUBSTR(BDKEY,REG#,6);
                      PUT SKIP EDIT(((BOARD(M,N) DO N=1 TO 8)
                      DO M=1 TO 8))(R(F9)),.
                      PUT SKIP EDIT('CASTLE=',CASTLE,'ENPASS=',TEMP)
                      (A,B,X(1));
                      IF LCOL
                      THEN PUT EDIT(' COLOR=WHITE')(R(F3)),.
                      ELSE PUT EDIT(' COLOR=BLACK')(R(F3)),.
                      DO M=1 TO 3 WHILE(PAGE(I).FROMR(M)^=PAGE(I).TOOR
                         (M)×PAGE(I).FROMC(M)^=PAGE(I).TOOC(M));
                         PUT SKIP EDIT('FROM=(',PAGE(I).FROMR(M),',',
                         PAGE(I).FROMC(M),') TO=(',PAGE(I).TOOR(M),',',
                         PAGE(I).TOOC(M),') PAWN=',PAGE(I).PAWN(M),
                         ' MATE=',PAGE(I).MATE(M),' CHECK=',PAGE(I).
                         CHECK(M))
                         ((7)(A,B));
                         END;
                      END;
 NXTREC:         END;
            END,.
         IF ENDIT & SUM(NEWREC)^= 0
         THEN SIGNAL ENDFILE(SYSIN),.
         FREE OLDREC,NEWREC,#COLL,#OV;
         REGION=RANDOM,.
         IF REGION=0
         THEN REGION=1,.
         ALLOCATE NEWREC(REGION),OLDREC(REGION),#COLL(REGION),
         #OV(REGION);
         NEWREC,OLDREC,#COLL,#OV=0;
         IF RANDOM NE 0
         THEN DO REGION=0 TO RANDOM-1,.
            CALL READER(REGION);
            DO I=1 TO 224,.
               IF PAGE.KEY(I) NE '0'B
               THEN OLDREC(REGION+1)=OLDREC(REGION+1)+1,.
               END,.
            END,.
         IF ENDIT
         THEN SIGNAL ENDFILE(SYSIN);
         SCOL=0,.
         ALLOCATE MOVE;
         @REC->MOVE.MOVE#=1;
         @REC->MOVE.VARIED='0'B;
         @REC->MOVE.@LAST=NULL;
         IF STRTBD
         THEN DO;
         DO J=1 TO 8;
            BOARD(2,J)=-1;
            BOARD(7,J)=1;
            DO I=3 TO 6;
               BOARD(I,J)=0;
               END;
            END;
         BOARD(1,1),BOARD(1,8)=-4;
         BOARD(1,2),BOARD(1,7)=-2;
         BOARD(1,3),BOARD(1,6)=-3;
         BOARD(1,4)=-5;
         BOARD(1,5)=-6;
         BOARD(8,1),BOARD(8,8)=4;
         BOARD(8,2),BOARD(8,7)=2;
         BOARD(8,3),BOARD(8,6)=3;
         BOARD(8,4)=5;
         BOARD(8,5)=6;
         @REC->MOVE.COLOR='1'B;
         K_SIDE,Q_SIDE=1;
         ENPASS=0+0I;
         END;
         ELSE GET LIST((K_SIDE(I),Q_SIDE(I) DO I=-1,1),ENPASS,COLOR,
         BOARD);
         INDEX=CTLSTMT××GETCHAR;
         IF WRIT
         THEN CHKBD='1'B,.
         IF UPDAT
         THEN CHKBD='1'B,.
         IF DEL
         THEN CHKBD='1'B;
         SIGNAL ENDPAGE(SYSPRINT);
         ALLOCATE MOVELIST;
         @MVTOP=@MOVE;
         @MOVE->MOVELIST.@NEXT=NULL;
         @REC->MOVE.@MVLIST=@MOVE;
         GO TO LOOP2;
 LOOP..  IF NOT CHKCARD
         THEN GET SKIP EDIT(INDEX)(A(3)),.
         ELSE INDEX=GETCHAR,.
 LOOP2:  IF INDEX='***'
         THEN DO;
              GET EDIT(CARD)(A(76));
              PUT SKIP EDIT('*** ',CARD)(A,A);
              GO TO LOOP;
              END;
         IF NEXT^=INDEX
         THEN SIGNAL ERROR;
 ERRLOOP:GET LIST(@REC->MOVE.HOWMANY);
         DO I=1 TO @REC->MOVE.HOWMANY;
            @REC->MOVE.LINES.ALGEBRAIC(I)=GETCHAR;
            @REC->MOVE.LINES.INDEXTO(I)=GETCHAR;
            END;
         @REC->MOVE.PLACE=1;
         IF CHKBD
         THEN DO;
         TMP=@REC->MOVE.LINES.ALGEBRAIC(@REC->MOVE.PLACE);
         BITS=MOVE.COLOR,.
         CALL UNTRAN(TMP,INEX,BITS),.
         IF MOVE.VARIED
         THEN IF NOT COLVAR
         THEN IF MOVE.COLOR
         THEN GO TO WRITIT;
         ELSE,.
         ELSE IF NOT MOVE.COLOR
         THEN GO TO WRITIT;
         IF NOT CHKJMP
         THEN GO TO FOUND,.
         STRING=0;
         K=0;
         BDKEY='';
         DO I=1 TO 8;
            DO J=1 TO 8;
               KD=BOARD(I,J);
               IF KD=0
               THEN DO;
                    K=K+1;
                    STRING=2*STRING;
                    END;
               ELSE DO;
                    K=K+2;
                    STRING=4*STRING+2;
                    IF KD>0
                    THEN STRING=STRING+1;
                    KD=ABS(KD);
                    IF KD=1
                    THEN DO;
                         K=K+1;
                         STRING=2*STRING;
                         END;
                    ELSE IF KD=2
                    THEN DO;
                         K=K+3;
                         STRING=STRING*8+4;
                         END;
                    ELSE IF KD=3
                    THEN DO;
                         K=K+3;
                         STRING=8*STRING+5;
                         END;
                    ELSE IF KD=4
                         THEN DO;
                         K=K+3;
                         STRING=8*STRING+6;
                         END;
                    ELSE IF KD=5
                    THEN DO;
                         K=K+4;
                         STRING=STRING*16+14;
                         END;
                    ELSE DO;
                         K=K+4;
                         STRING=16*STRING+15;
                         END;
                    END;
               IF K>25
               THEN DO;
                    BDKEY=BDKEY××SUBSTR(UNSPEC(STRING),33-K,K);
                    STRING=0;
                    K=0;
                    END;
               END;
            END;
         IF K>20
         THEN DO;
              BDKEY=BDKEY××SUBSTR(UNSPEC(STRING),33-K,K);
              STRING=0;
              K=0;
              END;
         IF COLOR
         THEN J=1;
         ELSE J=-1;
         K=K+11;
         STRING=8*(8*(2*(2*(2*(2*(2*STRING+K_SIDE(1))+K_SIDE(-1))+Q_SIDE
         (1))+Q_SIDE(-1))+MAX(J,0))+REAL(ENPASS))+IMAG(ENPASS);
         BDKEY=BDKEY××SUBSTR(UNSPEC(STRING),33-K,K)××SUBSTR(REPEAT('0'B,
         176),1,176-LENGTH(BDKEY));
         CALL HASH(BDKEY,REGNO,RECORD),.
         DO REGION=REGNO TO RANDOM-1, 0 TO REGNO-1;
         CALL READER(REGION);
         DO I=RECORD TO 224,1 TO RECORD-1;
            IF PAGE.KEY(I)=BDKEY
            THEN GO TO ADDER,.
            IF KEY(I)='0'B
            THEN
 ADDER..         DO,.
                 IF DEL
                 THEN DO,.
                      NEWREC(REGION+1)=NEWREC(REGION+1)-1;
                      DELPAGE(I)='0'B;
                      IIII=I,.
                      IWS=I;
                      IRWAS=REGION;
                      DO REGNO=REGION TO RANDOM-1,0 TO REGION-1;
                         CALL READER(REGNO);
                         DO II=IIII+1 TO 224, 1 TO IIII-1;
                            BDKEY=PAGE.KEY(II);
                            IF KEY(II)='0'B
                            THEN GO TO FOUND;
                            CALL HASH(BDKEY,REGTMP,STRING);
                            J=STRING;
                            IF REGTMP^=REGNO
                            THEN GO TO DELETER;
                            IF J=II
                            THEN GO TO OUT;
                            IF IWS<II
                            THEN IF J>IWS
                            THEN IF J<II
                            THEN GO TO OUT;
                            ELSE GO TO DELETER;
                            ELSE GO TO DELETER;
                            ELSE IF J<IWS
                            THEN IF J>II
                            THEN GO TO DELETER;
                            ELSE GO TO OUT;
                            ELSE GO TO OUT;
 DELETER:                   TEMP=DELPAGE(II);
                            CALL READER(IRWAS);
                            DELPAGE(IWS)=TEMP;
                            CALL WRITER(IRWAS);
                            CALL READER(REGNO);
                            DELPAGE(II)='0'B;
                            IWS=II;
                            IRWAS=REGNO;
 OUT:                       END;
                         CALL WRITER(REGNO);
                         IIII=0;
                         END;
                      END,.
                 ELSE DO;
                      IF PAGE.KEY(I) ^= BDKEY
                      THEN DO;
                           NEWREC(REGION+1)=NEWREC(REGION+1)+1;
                           PAGE.KEY(I)=BDKEY;
                           END;
                      IF ABS(BOARD(REAL(INEX.FROM),IMAG(INEX.FROM)))=1
                      THEN IF REAL(INEX.TOO)=1
                      THEN GO TO BDCHKER,.
                      ELSE IF REAL(INEX.TOO)=8
                      THEN
 BDCHKER..                 DO,.
                           SUB=TRUNC(INEX.VALUE/8);
                           IF SUB=2
                           THEN COMPARE.PAWN='00'B;
                           ELSE IF SUB=3
                           THEN COMPARE.PAWN='01'B;
                           ELSE IF SUB=4
                           THEN COMPARE.PAWN='10'B;
                           ELSE COMPARE.PAWN='11'B;
                           END;
                      ELSE COMPARE.PAWN='00'B;
                      COMPARE.FROMR=SUBSTR(UNSPEC(REAL(INEX.FROM-1)),30,
                      3);
                      COMPARE.FROMC=SUBSTR(UNSPEC(IMAG(INEX.FROM-1I)),30
                      ,3);
                      COMPARE.TOOR=SUBSTR(UNSPEC(REAL(INEX.TOO-1)),30,3)
 ;                    COMPARE.TOOC=SUBSTR(UNSPEC(IMAG(INEX.TOO-1I)),30,
                      3);
                      COMPARE.MATE=INEX.MATE;
                      COMPARE.CHECK=INEX.CHECK;
                      IF REPLACE
                      THEN DO;
                           PAGE(I).MOVES(1)='0'B;
                           PAGE(I).MOVES(2)='0'B;
                           PAGE(I).MOVES(3)='0'B;
                           M=1;
                           END;
                      ELSE DO M=1 TO 3 WHILE(PAGE(I).FROMR(M)^=PAGE(I).
                              TOOR(M)×PAGE(I).FROMC(M)^=PAGE(I).TOOC(M))
 ;                            IF PAGEDEF(I).MOVES(M)=COMPAREDEF
                              THEN GO TO FOUND;
                              END;
                      IF M>3
                      THEN DO;
                           PUT SKIP EDIT('***** WARNING -- THIS RECORD I
 S FULL AND "NOREPLACE" SPECIFIED. NO ACTION TAKEN.')(A);
                           WARNINGS=WARNINGS+1;
                           GO TO FOUND;
                           END;
                      PAGE(I).MOVES(M)=COMPARE;
                      END;
                 CALL WRITER(REGION);
                 GO TO FOUND;
                 END;
            #COLL(REGION+1)=#COLL(REGION+1)+1;
            END;
         #OV(REGION+1)=#OV(REGION+1)+1;
         PUT SKIP EDIT('***** OVERFLOW -- REGION=',REGION)(R(F4)),.
         IF TOVFL
         THEN SIGNAL ENDFILE(SYSIN);
         RECORD=1,.
         END,.
         PUT SKIP EDIT('***** OVERFLOW -- NO MORE SPACE ON DISK')
         (R(F3)),.
         OVFL='1'B,.
         IF FOVFL
         THEN SIGNAL ENDFILE(SYSIN);
         WRIT,UPDAT,CHKJMP,DEL='0'B,.
 FOUND:  IF PRTBD
         THEN PUT SKIP EDIT(((BOARD(M,N) DO N=1 TO 8) DO M=1 TO 8))
         (R(F9)),.
         END;
 WRITIT: IF @REC->MOVE.COLOR
         THEN DO;
              PREFIX=SUBSTR(CHAR(@REC->MOVE.MOVE#),8,2)××'.';
              @REC->MOVE.MOVE#=@REC->MOVE.MOVE#+1;
              END;
         ELSE PREFIX=' ';
         @REC->MOVE.COLOR=^@REC->MOVE.COLOR;
         IF LST
         THEN PUT SKIP EDIT(PREFIX,(' ... ' DO J=1 TO SCOL),
         @REC->MOVE.LINES.ALGEBRAIC(@REC->MOVE.PLACE))
         (R(F3)),.
         IF @REC->MOVE.LINES.INDEXTO(@REC->MOVE.PLACE)^='000'
         THEN DO;
              @TEMP=@MOVE;
              @REC->MOVE.@MVLIST=@MOVE;
              ALLOCATE MOVELIST;
              @TEMP->MOVELIST.@NEXT=@MOVE;
              @MOVE->MOVELIST.@NEXT=NULL;
              @TEMP->MOVELIST.MVE=@REC->MOVE.LINES.ALGEBRAIC
              (@REC->MOVE.PLACE);
              NEXT=@REC->MOVE.LINES.INDEXTO(@REC->MOVE.PLACE);
              IF @REC->MOVE.HOWMANY>1
              THEN DO;
                   @REC->MOVE.BD=BOARD;
                   @TEMP=@REC;
                   ALLOCATE MOVE;
                   @REC->MOVE.@LAST=@TEMP;
                   @REC->MOVE.COLOR=@TEMP->MOVE.COLOR;
                   @REC->MOVE.MOVE#=@TEMP->MOVE.MOVE#;
                   @REC->MOVE.VARIED=@TEMP->MOVE.VARIED;
                   @REC->MOVE.K_SIDE=@TEMP->MOVE.K_SIDE;
                   @REC->MOVE.Q_SIDE=@TEMP->MOVE.Q_SIDE;
                   SCOL=SCOL+1;
                   END;
              IF CHKBD
              THEN DO;
                   I=BOARD(REAL(INEX.FROM),IMAG(INEX.FROM));
                   J=SIGN(I);
                   IF REAL(INEX.FROM)=8
                   THEN IF I=4
                   THEN GO TO CASTLER,.
                   ELSE IF I=6
                   THEN GO TO CASTLER,.
                   ELSE,.
                   ELSE IF REAL(INEX.FROM)=1
                   THEN IF I=-4
                   THEN GO TO CASTLER,.
                   ELSE IF I=-6
                   THEN
 CASTLER..              DO,.
                        IF IMAG(INEX.FROM)=1
                        THEN Q_SIDE(J)=0;
                        ELSE IF IMAG(INEX.FROM)=8
                        THEN K_SIDE(J)=0;
                        ELSE IF IMAG(INEX.FROM)=5
                        THEN K_SIDE(J),Q_SIDE(J)=0;
                        END;
                   I=BOARD(REAL(INEX.TOO),IMAG(INEX.TOO));
                   IIII=SIGN(I);
                   I=ABS(I);
                   IF I=4
                   THEN IF (IIII=1 & REAL(INEX.TOO)=8) × (IIII=-1 &
                   REAL(INEX.TOO)=1)
                   THEN DO;
                        IF IMAG(INEX.TOO)=1
                        THEN Q_SIDE(IIII)=0;
                        ELSE IF IMAG(INEX.TOO)=8
                        THEN K_SIDE(IIII)=0;
                        END;
                   IF ABS(BOARD(REAL(INEX.FROM),IMAG(INEX.FROM)))=1
                   THEN IF IMAG(INEX.TOO)^=IMAG(INEX.FROM)
                   THEN IF BOARD(REAL(INEX.TOO),IMAG(INEX.TOO))=0
                   THEN BOARD(REAL(INEX.FROM),IMAG(INEX.TOO))=0;
                   BOARD(REAL(INEX.TOO),IMAG(INEX.TOO))=
                   BOARD(REAL(INEX.FROM),IMAG(INEX.FROM));
                   BOARD(REAL(INEX.FROM),IMAG(INEX.FROM))=0;
                   ENPASS=0+0I;
                   IF INEX.VALUE=7
                   THEN ENPASS=CPLX(REAL(INEX.FROM-1-J),
                   IMAG(INEX.FROM-1I));
                   ELSE IF INEX.VALUE=8
                   THEN DO;
                        I=REAL(INEX.TOO);
                        IF IMAG(INEX.TOO)=3
                        THEN DO;
                             BOARD(I,4)=BOARD(I,1);
                             BOARD(I,1)=0;
                             END;
                        ELSE DO;
                             BOARD(I,6)=BOARD(I,8);
                             BOARD(I,8)=0;
                             END;
                        END;
                   ELSE IF INEX.VALUE^=0
                   THEN BOARD(REAL(INEX.TOO),IMAG(INEX.TOO))=
                   BOARD(REAL(INEX.TOO),IMAG(INEX.TOO))*INEX.VALUE;
                   END;
              GO TO LOOP;
              END;
 NEXTFREE:@TEMP=@REC->MOVE.@LAST;
         IF @TEMP=NULL
         THEN DO,.
              FREE MOVE;
              @TEMP=@MVTOP;
              DO WHILE(@TEMP ^= NULL);
                 @MOVE=@TEMP;
                 @TEMP=@TEMP->MOVELIST.@NEXT;
                 FREE MOVELIST;
                 END;
              @MVTOP=NULL;
              TREE=TREE+1,.
              PUT SKIP EDIT('END OF SOURCE RECORD TREE')(R(F3));
              GET SKIP EDIT(CTLSTMT)(R(F7)),.
              SIGNAL ENDPAGE(SYSPRINT),.
              GO TO STARTUP,.
              END,.
         FREE MOVE;
         @REC=@TEMP;
         @REC->MOVE.PLACE=@REC->MOVE.PLACE+1;
         IF @REC->MOVE.HOWMANY>1
         THEN DO;
              SCOL=SCOL-1;
              IF ^@REC->MOVE.VARIED
              THEN DO;
                   COLVAR=@REC->COLOR;
                   @REC->MOVE.VARIED='1'B;
                   END;
              END;
         IF @REC->MOVE.HOWMANY<@REC->MOVE.PLACE
         THEN GO TO NEXTFREE;
         @TEMP=@REC->MOVE.@MVLIST;
         @TEMP=@TEMP->MOVELIST.@NEXT;
         DO WHILE(@TEMP ^= NULL);
            @MOVE=@TEMP;
            @TEMP=@TEMP->MOVELIST.@NEXT;
            FREE MOVELIST;
            END;
         @MOVE=@REC->MOVE.@MVLIST;
         @MOVE->MOVELIST.@NEXT=NULL;
         PUT SKIP EDIT('*********')(COL((SCOL)*5+4),A),.
         MOVE.COLOR=^MOVE.COLOR;
         IF MOVE.COLOR
         THEN MOVE.MOVE#=MOVE.MOVE#-1;
         BOARD=@REC->MOVE.BD;
         TMP=@REC->MOVE.LINES.ALGEBRAIC(@REC->MOVE.PLACE);
         BITS=MOVE.COLOR,.
         CALL UNTRAN(TMP,INEX,BITS),.
         GO TO WRITIT;
 F1:     FORMAT(COL(64),A);
 F2:     FORMAT(COL(62),A);
 F3:     FORMAT(A);
 F4:     FORMAT(A,F(8));
 F7:     FORMAT(A(2));
 F8:     FORMAT(COL(54),A,COL(120),A,F(9));
 F9:     FORMAT((8)F(2),SKIP);
 F10:    FORMAT(A(1));
1GETCHAR:PROCEDURE RETURNS(CHAR(20));
 DCL A CHAR(1) STATIC,
     B CHAR(20) STATIC VARYING;
         B='';
 SEARCH..GET EDIT(A)(R(F10)),.
         IF A=' '
         THEN GO TO SEARCH;
 CHARLP: B=B××A;
         GET EDIT(A)(R(F10)),.
         IF A=' '
         THEN RETURN(B);
         GO TO CHARLP;
 F10:    FORMAT(A(1));
         END GETCHAR;
1HASH..  PROCEDURE(KEY,REGION,RECORD),.
 DCL KEY BIT(176) ALIGNED VARYING;
 DCL REGION FIXED DEC(8,0);
 DCL RECORD FIXED BIN(31,0);
         TEMP=BOOL(SUBSTR(KEY,1,88),SUBSTR(KEY,89,88),'0110'B);
         TEMP=BOOL(SUBSTR(TEMP,1,44),SUBSTR(TEMP,45,44),'0110'B);
         TEMP=BOOL(SUBSTR(TEMP,1,22),SUBSTR(TEMP,23,22),'0110'B);
         TEMP='00000'B××BOOL(SUBSTR(TEMP,1,11),SUBSTR(TEMP,12,11),
         '0110'B);
         UNSPEC(REG#)=SUBSTR(TEMP,1,16);
         REGION=MOD(ABS(DEC(REG#)),RANDOM);
         RECORD=MOD(ABS(REG#),224)+1;
         END HASH,.
1READER: PROCEDURE(REGION);
 DCL REGION FIXED DEC(8,0);
         IF INCORE
         THEN DELPAGE=INFILE(REGION,*);
         ELSE READ FILE(BOOK) INTO(PAGE) KEY(REGION);
         END READER;
1WRITER: PROCEDURE(REGION);
 DCL REGION FIXED DEC(8,0);
         IF INCORE
         THEN INFILE(REGION,*)=DELPAGE;
         ELSE REWRITE FILE(BOOK) FROM(PAGE) KEY(REGION);
         END WRITER;
1UNTRAN..PROCEDURE(TEMP,MVE,BITS),.
 DCL TEMP CHAR(9) ALIGNED;
 DCL (INDEX,CPLX,ABS) BUILTIN;
 DCL BITS BIT(1) ALIGNED;
 DCL (TC,FC,VA,VB,VC,PIEC) CHAR(1) STATIC;
 DCL (I,J,M,N,FR,TR,VAL,KLR,KD) FIXED BIN STATIC;
 DCL 1 MVE,
       2 FROM FIXED BIN CPLX,
       2 TOO FIXED BIN CPLX,
       2 VALUE FIXED BIN,
       2 CHECK BIT(1),
       2 MATE BIT(1);
 /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
         MVE.VALUE=0;
         GET STRING(TEMP) EDIT(PIEC,FC,FR,TC,TR,VA,VB,VC)
         (A(1),A(1),F(1),X(1),A(1),F(1),A(1),A(1),A(1)),.
         MVE.CHECK=(VA='+' × VB='+' × VC='+');
         MVE.MATE=(VA='#' × VB='#' × VC='#');
         IF FR=0
         THEN DO;
              MVE.VALUE=8;
              N=5;
              IF TC='0'
              THEN J=3;
              ELSE J=7;
              IF COLOR
              THEN M,I=8;
              ELSE M,I=1;
              MVE.FROM=CPLX(M,N);
              MVE.TOO=CPLX(I,J);
              IF NOT LEGAL
              THEN GO TO RET,.
              IF J=7
              THEN IF K_SIDE(SIGN(BOARD(M,N)))=0
              THEN GO TO LEGALITY,.
              ELSE,.
              ELSE IF Q_SIDE(SIGN(BOARD(M,N)))=0
              THEN GO TO LEGALITY,.
              PIEC='K',.
              TR=-1;
              GO TO LGLCHK,.
              END;
         M=9-FR;
         N=INDEX('ABCDEFGH',FC);
         I=9-TR;
         J=INDEX('ABCDEFGH',TC);
         MVE.TOO=CPLX(I,J);
         MVE.FROM=CPLX(M,N);
         VAL=INDEX(' NBRQ:+#',VA);
         IF VAL<6 & VAL^=1
         THEN MVE.VALUE=VAL;
         ELSE IF ABS(BOARD(M,N))=1
         THEN IF ABS(M-I)=2
         THEN MVE.VALUE=7;
         IF NOT LEGAL
         THEN GO TO RET,.
         IF I GT 8
         THEN GO TO LEGALITY,.
         IF I LT 1
         THEN GO TO LEGALITY,.
         IF J GT 8
         THEN GO TO LEGALITY,.
         IF J LT 1
         THEN GO TO LEGALITY,.
         IF M GT 8
         THEN GO TO LEGALITY,.
         IF M LT 1
         THEN GO TO LEGALITY,.
         IF N LT 1
         THEN GO TO LEGALITY,.
         IF N GT 8
         THEN GO TO LEGALITY,.
 LGLCHK: KD=BOARD(M,N);
         IF KD=0
         THEN GO TO LEGALITY,.
         KLR=SIGN(KD),.
         IF KLR=SIGN(BOARD(I,J))
         THEN GO TO LEGALITY,.
         IF BITS
         THEN IF KLR=-1
         THEN GO TO LEGALITY,.
         ELSE,.
         ELSE IF KLR=1
         THEN GO TO LEGALITY,.
         KD=ABS(KD),.
         IF KD GT 6
         THEN GO TO LEGALITY,.
         IF KD NE INDEX('PNBRQK',PIEC)
         THEN GO TO LEGALITY,.
         IF TR=-1
         THEN GO TO RET;
         IF KD=2
         THEN DO INC=-2 TO 2;
              DO JNC=-2 TO 2;
                 IF ABS(INC)^=ABS(JNC)
                 THEN IF INC^=0
                 THEN IF JNC^=0
                 THEN IF M=I+INC
                 THEN IF N=J+JNC
                 THEN GO TO RET;
                 END;
              END;
         ELSE IF KD=1
         THEN DO;
              IF N=J
              THEN DO;
                   IF BOARD(I,J)^=0
                   THEN GO TO LEGALITY;
                   IF ABS(M-I)=1
                   THEN IF I^=M-KLR
                   THEN GO TO LEGALITY;
                   ELSE;
                   ELSE DO;
                        IF BOARD(M-KLR,N)^=0
                        THEN GO TO LEGALITY;
                        IF KLR=1
                        THEN IF M^=7
                        THEN GO TO LEGALITY;
                        ELSE;
                        ELSE IF M^=2
                        THEN GO TO LEGALITY;
                        IF I^=M-2*KLR
                        THEN GO TO LEGALITY;
                        END;
                   END;
              ELSE DO;
                   IF I^=M-KLR
                   THEN GO TO LEGALITY;
                   IF ABS(N-J)^=1
                   THEN GO TO LEGALITY;
                   IF BOARD(I,J)=0
                   THEN DO;
                        VAL=BOARD(M,J);
                        IF ABS(VAL)^=1
                        THEN GO TO LEGALITY;
                        IF SIGN(VAL)=KLR
                        THEN GO TO LEGALITY;
                        END;
                   END;
              GO TO RET;
              END;
         ELSE DO INC=-1 TO 1;
              DO JNC=-1 TO 1;
                 IF INC=0
                 THEN IF JNC=0
                 THEN GO TO OUT;
                 IF KD=4
                 THEN IF MOD(INC+JNC,2)=0
                 THEN GO TO OUT;
                 IF KD=3
                 THEN IF MOD(INC+JNC,2)=1
                 THEN GO TO OUT;
                 MM=M;
                 NN=N;
                 DO VAL=1 TO 8;
                    MM=MM+INC;
                    NN=NN+JNC;
                    IF SIGN(BOARD(MM,NN))=KLR
                    THEN GO TO OUT;
                    IF MM>8
                    THEN GO TO OUT;
                    IF NN>8
                    THEN GO TO OUT;
                    IF MM<1
                    THEN GO TO OUT;
                    IF NN<1
                    THEN GO TO OUT;
                    IF MM=I
                    THEN IF NN=J
                    THEN GO TO RET;
                    IF BOARD(MM,NN)^=0
                    THEN GO TO OUT;
                    IF KD=6
                    THEN GO TO OUT;
                    END;
 OUT:            END;
              END;
 LEGALITY:
         PUT SKIP EDIT('***** LEGALITY EXCEPTION -- ILLEGAL MOVE=',
         TEMP)(R(F3));
         IF STOPERR
         THEN SIGNAL ENDFILE(SYSIN);
         LEGALITIES=LEGALITIES+1;
 F3:     FORMAT(A);
 RET:    END UNTRAN;
         END BOOKUTL;
/*
//L.SYSLMOD DD DSN=DU.D09.AB1825.DUCHESS6.LOAD(BOOKUTIL),DISP=OLD,
// UNIT=DISK,VOL=SER=DUK111
//
