         TITLE 'MOVESORT -- EFFICIENCY-DIRECTED MOVE SORTER'
*
*        LOCATE PIECE IN SQUARES LIST
*        RETURNS LOCATION IN R1
*        USES R1-R3
*
         MACRO
&LABEL   LOCATE &SQR,&DB
&LABEL   LA    R3,SRCHBD(&SQR)
         MVI   0(R3),X'01'
         TRT   WSQUARES-WK(16,&DB),SRCHBD
         BZ    NOPIECE
         MVI   0(R3),X'00'
         MEND
         SPACE 5
         MACRO
&LABEL   CAP   &T
&LABEL   DC    AL2(PVAL/3+&T.VAL*9/8)
         MEND
         TITLE 'MOVESORT -- MOVE SORTER'
MOVESORT CSECT
*
*        ENTER WITH:
*
*              0(R1)    POSITION DATABASE
*              4(R1)    LIST OF MOVES
*              8(R1)    END POINTER FOR MOVE LIST
*
         ENTER DSA=YES
         L     R11,0(R1)          A(POSITION DATABASE)
         USING PLYDB,R11
         LR    R14,R11
         LA    R15,BK
         CLI   COLOR,X'00'
         IF    NZ                 IF BLACK IS ACTIVE
         LR    R14,R15
         LR    R15,R11
         ENDIF
         L     R10,4(R1)          MOVES LIST
         L     R9,8(R1)           END POINTER
         LA    R8,2(R10)
         CR    R8,R9
         BNL   OBVQUIT            FAST EXIT IF 1 OR FEWER MOVES
         EJECT
         LR    R8,R10             ALTERNATE MOVES LIST PTR
         LA    R4,MVALUES         POINT TO MOVE VALUES LIST
         CLR   R8,R9              LOOP OVER ALL MOVES
         WHILE L
         ZERO  R5
         LH    R7,0(R8)           THE PIECE MOVING
         LR    R6,R7              PUT THE MOVE INTO R6 TOO
         SRL   R6,8               SHIFT SRC SQR INTO R6
         LR    R0,R6
         SRL   R0,6
         C     R0,=F'1'
         IF    E
         AH    R5,=AL2(SPVAL)
         ENDIF
         EJECT
*
*  REFUTATION MOVE BONUS
*
         CH    R7,REF1M
         IF    E
         AH    R5,=AL2(R1VAL)
         ENDIF
         CH    R7,REF2M
         IF    E
         AH    R5,=AL2(R2VAL)
         ENDIF
         CH    R7,LASTREFM
         IF    E
         AH    R5,=AL2(RLVAL)
         ENDIF
         EJECT
         LA    R0,X'3F'
         NR    R6,R0              SRC
         NR    R7,R0              DST
*
* CAPTURE BONUS
*
         BSETB R0,0(R7)
         NB    R0,B-BK(R15)
         TSTB  R0
         IF    NZ
         LOCATE R7,R15
         LC    R2,16(R1)
         AR    R2,R2
         AH    R5,CAPTBL(R2)      BONUS FOR CAPTURE
         ENDIF
*
* SAFETY TERM
*
         LOCATE R6,R14
         LC    R2,16(R1)
         AR    R2,R2
         LH    R3,PIECTBL(R2)     PIECE VALUE
*
         BSETB R0,0(R6)
         NB    R0,BT-BK(R15)
         ANYB  R0,R0
         NR    R0,R3
         SRA   R0,3
         AR    R5,R0              BONUS FOR MOVING OUT OF ATTACK
*
         BSETB R0,0(R7)
         NB    R0,BT-BK(R15)
         ANYB  R0,R0
         NR    R0,R3
         SR    R5,R0              PENALTY FOR MOVING INTO ATTACK
         EJECT
*
* TRANSPOSITION TROPISM TERM
*
         CLI   COLOR,X'00'
         IF    NE
         LA    R2,12(R2)
         ENDIF
         SLA   R2,6
         A     R2,=V(PFTAB)
         AR    R6,R6
         AR    R7,R7
         SH    R5,0(R2,R6)        PENALTY FOR SRC FREQUENCY
         AH    R5,0(R2,R7)        BONUS FOR DST FREQUENCY
         LA    R8,2(R8)
         STH   R5,0(R4)           SAVE IN MOVES POINTER
         LA    R4,2(R4)           BUMP MOVES POINTER
         CLR   R8,R9
         ENDWHILE
         EJECT
*
*        SORT THE MOVES BY THE VALUES GENERATED
*
         LA    R14,5              MAX # OF MOVES TO SORT
         S     R9,=F'2'           REDUCE OUTER LOOP BY 1 ITERATION
         LA    R7,MVALUES         POINT TO THE MOVE VALUES
         CLR   R10,R9             IS THE MASTER POINTER OVER THE LIMIT?
         WHILE L                  REPEAT WHILE IT IS NOT
         LA    R6,2(R7)           POINT TO FIRST ELEMENT
         LA    R8,2(R10)
         LH    R0,0(R7)           GET THE MOVE VALUE MAX THIS LEVEL
         LR    R1,R10             ALSO POINT TO IT ...
         LR    R2,R7              ... FOR BOTH LISTS.
         CLR   R8,R9              OVER MAX FOR THIS LIST?
         WHILE NH                 NO -- LOOP
         LH    R3,0(R6)           TENTATIVE NEW VALUE
         CR    R0,R3              COMPARE TO THE OLD MAX
         IF    L                  IF THE NEW ONE IS HIGHER ...
         LR    R0,R3              MOVE IN THE NEW VALUE ...
         LR    R1,R8              ALSO POINT TO THE ...
         LR    R2,R6              ... LISTS FOR THIS SLOT.
         ENDIF
         LA    R8,2(R8)
         LA    R6,2(R6)           BUMP POINTERS TOGETHER
         CLR   R8,R9              DONE YET?
         ENDWHILE
         LH    R3,0(R10)          THE OLD MOVE THIS POINT
         LH    R4,0(R7)           AND THE OLD VALUE THIS POINT
         LH    R5,0(R1)           THE NEW MOVE
         STH   R5,0(R10)          SAVE IT AT THIS POINT
         STH   R3,0(R1)           SAVE THE OLD MOVE THIS POINT WHERE
*                                 WE GOT THE BEST MOVE THIS POINT
         STH   R4,0(R2)           SAVE THE VALUE FOR THE OLD MOVE THIS
*                                 POINT INTO ITS NEW HOME
         STH   R0,0(R7)
         S     R14,=F'1'
         BNH   QUIT
         LA    R10,2(R10)         BUMP THE OTHER POINTER
         LA    R7,2(R7)           BUMP THE POINTERS
         CLR   R10,R9             DONE WITH THE LIST YET?
         ENDWHILE
QUIT     EQU   *
         LH    R0,MVALUES
         SH    R0,MVALUES+2
         CH    R0,=AL2(2*PVAL)
         BH    OBVQUIT            IF BEST MOVE SEEMS OUTSTANDING
         EXIT
OBVQUIT  EXIT  RC=1
NOPIECE  UABEND 2100
         EJECT
R1VAL    EQU   80
R2VAL    EQU   40
RLVAL    EQU   30
SPVAL    EQU   200                SPECIAL PAWN MOVE VALUE
KVAL     EQU   100
QVAL     EQU   900
RVAL     EQU   500
BVAL     EQU   330
NVAL     EQU   310
PVAL     EQU   100
PIECTBL  DC    AL2(KVAL)
         DC    AL2(QVAL)
         DC    AL2(RVAL)
         DC    AL2(BVAL)
         DC    AL2(NVAL)
         DC    AL2(PVAL)
CAPTBL   CAP   K
         CAP   Q
         CAP   R
         CAP   B
         CAP   N
         CAP   P
SRCHBD   DC    64X'00'
         DSA
MVALUES  DS    250H               VALUES FOR THE MOVES TO BE SORTED
         ENDDSA
PLYDB    DSECT
         PLYDB
         REGS
         END
