         TITLE 'SRCHUTIL -- PROGRESSIVELY DEEPENING SEARCH UTILITIES'
SRCHUTIL CSECT
         ENTRY ELAPSE
         ENTRY CELAPSE
         ENTRY RELAPSE
         ENTRY RATIO
         ENTRY SEARCH
         ENTRY TCOUNT
         ENTRY TREND
         ENTRY TRMOVE
         ENTRY $PRINVAR
         ENTRY TIMELAST
*
         EXTRN ANTADD
         EXTRN ANTSUB
         EXTRN LMVGEN
         EXTRN MOVESORT
         EXTRN PREDICT
         EXTRN REVMNUM
         EXTRN SEARCH0
         EXTRN MOVECHAR
         EXTRN TIMECHK
         EXTRN TIMEINIT
         EXTRN TTINIT
         EXTRN TTPREP
         EJECT
*
*  ITERATIVE DEEPENING ALPHA-BETA TREE SEARCH
*
SEARCH   ENTER DSA=YES
         LR    R11,R1
*
*  ALLOCATE SEARCH STACK
*
         LA    R3,PLYLEN
         M     R2,=AL4(NUMPLY)
         LA    R3,7(R3)
         SRL   R3,3
         GETC  (R3)
         LR    R9,R1
         USING PLYDB,R9
         EJECT
         L     R2,=V(TIMETARG)
         L     R1,0(R2)
         M     R0,=F'200'
         L     R3,RATIO
         LA    R3,100(R3)
         DR    R0,R3
         ST    R1,TCUTOFF
         L     R1,=V(ANTNG)
         CLI   0(R1),X'00'
         IF    E
         LA    R6,4
         L     R1,=V(STATSLVL)
         L     R1,0(R1)
         C     R1,=F'1'
         IF    NL
         LA    R6,6
         ENDIF
         LA    R0,200
         C     R0,0(R2)
         IF    H
         L     R1,=V(TIMEWISH)
         C     R0,0(R1)
         IF    H
         PRNTF '**%L',FO=(R6)
         BREAK ,3
         ENDIF
         ENDIF
         PRNTF 'targ %T  ratio %T  min %T%L',                          *
               ((R2),RATIO,TCUTOFF),FO=(R6)
         ENDIF
         ZERO  R0
         ST    R0,CELAPSE
         ST    R0,RELAPSE
         L     R1,=V(TIMEWAIT)
         L     R0,0(R1)
         L     R1,=V(TIMENEXT)
         ST    R0,0(R1)
         L     R0,=F'2001'
         ST    R0,TCOUNT
         MVI   CCHAR,C' '
*
         LA    R2,1               CLEAR ALL COUNTERS
         LR    R1,R9
         SCALL STATCLR
         SCALL ANTADD
         SCALL TTINIT             CLEAR TTABLE
         SCALL ANTSUB
         LR    R1,R9
         SCALL STINIT             INITIALIZE STACK
         ZERO  R0
         STH   R0,$PRINVAR
         EJECT
*
*  INVOKE THE TREE SEARCH
*
         L     R1,=V($EVAL)
         LH    R1,0(R1)
         STH   R1,EV
         L     R8,=V(COMPLEX)
         LH    R8,0(R8)
         ZERO  R7
         ZERO  R6
         ZERO  R0
         L     R1,=V($#HASHES)    CLEAR $#HASHES FOR USE...
         ST    R0,0(R1)           ...BY TTPREP
         REPEAT
         ST    R0,TIMELAST
         LR    R1,R11
         SCALL TTPREP             PREPARE FOR NEXT ITERATION
         STH   R7,RCPLX
         MVDB  POSDB,0(R11)
         LH    R0,EV
         LR    R1,R0
         SH    R0,=AL2(WINDOW)
         AH    R1,=AL2(WINDOW)
         STH   R0,MINWIND
         STH   R1,MAXWIND
         ZERO  R0
         STH   R0,PLY
         REPEAT
         L     R1,=V(STATSLVL)
         L     R1,0(R1)
         C     R1,=F'2'
         IF    NL
         LA    R3,4               SYSLIST
         L     R2,CELAPSE
         C     R2,=F'120'
         IF    NL
         LA    R3,6               STDOUT+SYSLIST
         ENDIF
         LR    R1,R9
         LR    R2,R6
         SCALL ITERLINE
         ENDIF
         LH    R2,MINWIND
         LH    R3,MAXWIND
         STH   R2,MINCUT
         STH   R3,MAXCUT
         LR    R1,R9
         SCALL SEARCH0
         ST    R15,RETCODE
         C     R15,=F'12'
         BE    RET
         STH   R2,MINCUT
         STH   R3,MAXCUT
         EJECT
*
*  CHECK FOR CUTOFF AGAINST WINDOW
*
         MVC   OCCHAR(1),CCHAR
         MVI   CCHAR,C' '
         LH    R1,EV
         LH    R3,=AL2(INF)
         LCR   R2,R3
         CH    R1,MINCUT
         IF    NH
         MVI   CCHAR,C'<'
         LA    R14,1
         STH   R2,MINWIND
         ENDIF
         CH    R1,MAXCUT
         IF    NL
         MVI   CCHAR,C'>'
         LA    R14,1
         STH   R3,MAXWIND
         ENDIF
*
*  CHECK FOR PRINCIPLE VARIATION
*
         CLI   CCHAR,C'<'
         IF    NE
         CLI   OCCHAR,C'<'
         IF    E
         L     R15,RETCODE
         TST   R15
         BREAK NZ,2
         ENDIF
         LH    R0,PRINVAR
         TST   R0
         IF    NZ
         MVC   $PRINVAR(NUMPLY*2),PRINVAR
         L     R1,=V($EVAL)
         LH    R0,EV
         STH   R0,0(R1)
         L     R1,=V($CPLX)
         LH    R0,RCPLX
         STH   R0,0(R1)
         ENDIF
         ENDIF
         ZERO  R3
         L     R1,=V(STATSLVL)
         L     R2,0(R1)
         C     R2,=F'2'
         C     R2,=F'4'
         IF    NL
         LA    R3,4
         ENDIF
         LR    R2,R6
         LR    R1,R9
         SCALL PRSTATS
         ZERO  R2
         SCALL STATCLR
         L     R14,RETCODE
         TST   R14
         BREAK NZ
         CLI   CCHAR,C' '
         UNTIL E
         EJECT
         SCALL TIMECHK
         LM    R2,R3,0(R1)
         ST    R2,CELAPSE
         ST    R3,RELAPSE
         L     R1,=V(TIMESW)
         TM    0(R1),CPUAVG+REALAVG
         IF    NZ
         LR    R0,R2
         TM    0(R1),REALAVG
         IF    NZ
         LR    R0,R3
         ENDIF
         LR    R2,R0
         L     R1,=V(ANTNG)
         CLI   0(R1),X'00'
         IF    NE
         ZERO  R2
         ENDIF
         C     R2,TCUTOFF
         BREAK H,2
         ENDIF
*
*  LIMIT SEARCH IF EITHER SIDE HAS FORCED WIN
*
         LH    R14,EV
         LPR   R14,R14
         LH    R15,=AL2(WIN-2)
         SR    R15,R14
         M     R14,=AL4(IDELTA)
         MIN   R14,R15,R8
         LR    R8,R14
         LA    R6,1(R6)
         LA    R7,IDELTA(R7)
         CR    R7,R8
         UNTIL H
         L     R2,TIMELAST
         TST   R2
         IF    NZ
         LR    R1,R0
         M     R0,=F'100'
         DR    R0,R2
         C     R1,=F'1000'
         IF    H
         L     R1,=F'1000'
         ENDIF
         A     R1,RATIO
         A     R1,RATIO
         A     R1,RATIO
         SRA   R1,2
         ST    R1,RATIO
         ENDIF
         EJECT
*
*  END OF THE DEEPENING SEARCH
*
         ZERO  R3
         L     R1,=V(STATSLVL)
         L     R1,0(R1)
         C     R1,=F'3'
         IF    NL
         LA    R3,4
         ENDIF
         L     R2,=F'-1'
         LR    R1,R9
         L     R4,CELAPSE
         ZERO  R0
         ST    R0,CELAPSE
         SCALL PRSTATS
         ST    R4,CELAPSE
         EJECT
*
*  ENSURE WE WILL HAVE A MOVE TO EXECUTE
*
         LA    R4,$PRINVAR
         LH    R0,0(R4)
         TST   R0
         IF    Z
         LR    R1,R11             POSDB
         LR    R2,R9              MLIST
         STM   R1,R2,PLIST
         LA    R1,PLIST
         SCALL LMVGEN
         ST    R1,PLIST+8
         LA    R1,PLIST
         SCALL MOVESORT
         LH    R0,0(R9)
         STH   R0,0(R4)
         ZERO  R0
         STH   R0,2(R4)
         L     R1,=V($CPLX)
         STH   R0,0(R1)
         L     R1,=V($EVAL)
         STH   R0,0(R1)
         ENDIF
         B     RET0
         DROP  R9
         EJECT
*
*  INITIALIZE STACK ENTIRE SEARCH
*
STINIT   ENTER
         LR    R11,R1
         USING PLYDB,R11
         ZERO  R0
         ZERO  R1
         DO    R14,NUMPLY
         STH   R0,LASTMOVE
         STH   R0,LASTREFM
         ST    R0,REF1
         ST    R0,REF2
         STH   R1,PLY
         LA    R1,1(R1)
         LA    R11,PLYLEN(R11)
         ENDDO
         B     RET0
         DROP  R11
         EJECT
*  PRINT STATISTICS TABLE
*  R1 -> STACK
*  R2 >=0  => ITER #
*  R2 < 0   => SUMMARY
*  R3 = FILE OPTION WORD
*
PRSTATS  ENTER DSA=YES
         LR    R11,R1
         LR    R10,R2
         PRNTF '%P                              ',                     *
               FO=(SYS)
         TST   R10
         IF    L
         PRNTF '     Summary ',                                        *
               FO=(SYS)
         ELSE
         STH   R10,NUM
         PRNTF 'Iteration%3H ',(NUM),                                  *
               FO=(SYS),PLIST=PLIST
         ENDIF
         L     R2,=V(VERSION)
         PRNTF 'statistics for Duchess  v %S%L%L',((R2)),              *
               FO=(SYS),PLIST=PLIST
         SCALL TIMECHK
         L     R1,0(R1)
         S     R1,CELAPSE
         ST    R1,NUM
         PRNTF 'val %H  window( %H, %H )  time %T%L%L',                *
               (EV-PLYDB(R11),MINCUT-PLYDB(R11),MAXCUT-PLYDB(R11),NUM),*
               FO=(SYS),PLIST=PLIST
         LR    R0,SYS
         LR    R1,R11
         LA    R2,$PRINVAR
         SCALL PREDICT
         PRNTF '%L  Ply',                                              *
               FO=(SYS)
         LA    R6,STATSVEC
         LOOP
         L     R7,0(R6)
         TST   R7
         BREAK Z
         PRNTF '%10S',((R7)),                                          *
               FO=(SYS),PLIST=PLIST
         LA    R6,4(R6)
         ENDLOOP
         PRNTF '%L%L',                                                 *
               FO=(SYS)
*
*  PRINT STATISTICS FOR EACH PLY
*
         XC    TOTALS(STATSLEN),TOTALS
         LR    R6,R11
         DO    R7,NUMPLY
         LA    R4,STATS+STATSLEN-PLYDB(R6)
         LA    R5,TOTALS
         TST   R10
         IF    NL
         LA    R8,STATS-PLYDB(R6)
         ELSE
         LR    R8,R4
         ZERO  R4
         ENDIF
         L     R9,#HASHES-STATS(R8)
         TST   R9
         BREAK Z
         SCALL STATLINE
         LA    R6,PLYLEN(R6)
         ENDDO
*
*  PRINT TOTAL
*
         LA    R7,TOTALS
         ZERO  R4
         ZERO  R5
         SCALL STATLINE
         L     R1,=V($#HASHES)
         L     R0,#HASHES-STATS+TOTALS
         ST    R0,0(R1)
         L     R1,=V($#HITS)
         L     R0,#HITS-STATS+TOTALS
         ST    R0,0(R1)
         L     R1,=V($#STOPS)
         L     R0,#CUTLB-STATS+TOTALS
         A     R0,#CUTUB-STATS+TOTALS
         ST    R0,0(R1)
         L     R1,=V($#EVALS)
         L     R0,#EVALS-STATS+TOTALS
         ST    R0,0(R1)
         B     RET0
         EJECT
*
*  PRINT LINE OF STATISTICS
*  R3 = FILE OPTION WORD
*  R4 -> ACCUMULATE AREA ( OR 0 )
*  R5 -> TOTAL AREA ( OR 0 )
*  R6 -> CURRENT PLYDB
*  R7 -> TOTAL AREA ( IF R5 = 0 )
*
STATLINE ENTER DSA=YES
         TST   R4
         IF    Z
         LA    R8,STATS+STATSLEN-PLYDB(R6)
         ELSE
         LA    R8,STATS-PLYDB(R6)
         ENDIF
         TST   R5
         IF    Z
         PRNTF 'Total',                                                *
               FO=(SYS)
         LR    R8,R7
         ELSE
         PRNTF '%5H',(PLY-PLYDB(R6)),                                  *
               FO=(SYS),PLIST=PLIST
         ENDIF
         LA    R2,STATSLEN/4
         TST   R2
         WHILE H
         PRNTF '%10F',((R8)),                                          *
               FO=(SYS),PLIST=PLIST
         TST   R4
         IF    NZ
         L     R9,0(R8)
         A     R9,0(R4)
         ST    R9,0(R4)
         LA    R4,4(R4)
         ENDIF
         TST   R5
         IF    NZ
         L     R9,0(R8)
         A     R9,0(R5)
         ST    R9,0(R5)
         LA    R5,4(R5)
         ENDIF
         LA    R8,4(R8)
         S     R2,=F'1'
         ENDWHILE
         PRNTF '%L%L',                                                 *
               FO=(SYS)
         B     RET0
         EJECT
*
* PRINT INFORMATION AFTER EACH ITERATION
*        R1 -> PLYDB
*        R2 = ITER #
*        R1 = FILE OPTION WORD
*
ITERLINE ENTER DSA=YES
         LR    R11,R1
         USING PLYDB,R11
         S     R2,=F'1'
         BL    RET0
         ST    R2,NUM
         L     R4,=V($#HASHES)
         PRNTF '%F.%C%3H %6F  ',(NUM,CCHAR,EV,(R4)),PLIST=PLIST,FO=(R3)
         LR    R0,R3
         LR    R1,R11
         LA    R2,$PRINVAR
         SCALL PREDICT
         B     RET0
         DROP  R11
         EJECT
*
*  CLEAR COUNTERS
*  R1 -> STACK
*  R2 = 1  => CLEAR ALL COUNTERS
*  R2 = 0  => CLEAR ONLY ITERATION COUNTERS
*
STATCLR  ENTER
         LR    R11,R1
         LA    R1,STATSLEN
         TST   R1
         IF    NZ
         DO    R14,NUMPLY
         TST   R2
         IF    Z
         XC    STATS-PLYDB(STATSLEN,R11),STATS-PLYDB(R11)
         ELSE
         XC    STATS-PLYDB(2*STATSLEN,R11),STATS-PLYDB(R11)
         ENDIF
         LA    R11,PLYLEN(R11)
         ENDDO
         ENDIF
         B     RET0
         EJECT
*
*  MAKE MOVE IN VARIATION
*  0(R1) -> POSDB
*  4(R1) -> MOVE
*  8(R1) -> PLY
*
TRMOVE   ENTER DSA=YES
         LM    R2,R4,0(R1)
         LH    R10,0(R4)          PLY
         LH    R9,TPLY
         CR    R9,R10
         WHILE L
         PRNTF '          ',FO=4
         LA    R9,1(R9)
         CR    R9,R10
         ENDWHILE
         LA    R10,1(R10)
         STH   R10,TPLY
         LA    R4,STR
         STM   R2,R4,PLIST
         LA    R1,PLIST
         SCALL MOVECHAR
         PRNTF '%S',(STR),PLIST=PLIST,FO=4
         LA    R9,10
         SH    R9,STR
         WHILE H
         PRNTF ' ',FO=4
         S     R9,=F'1'
         ENDWHILE
         B     RET0
         EJECT
*
*  MARK END OF VARIATION
*  R1 = EVALUATION
*
TREND    ENTER DSA=YES
         STH   R1,NUM
         LH    R10,TPLY
         TST   R10
         IF    H
         CH    R10,=AL2(TMAXPLY)
         WHILE L
         PRNTF '          ',FO=4
         LA    R10,1(R10)
         CH    R10,=AL2(TMAXPLY)
         ENDWHILE
         ZERO  R10
         STH   R10,TPLY
         PRNTF '%6H%L',(NUM),PLIST=PLIST,FO=4
         ENDIF
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
TIMELAST DS    F
ELAPSE   DS    0F
CELAPSE  DS    F
RELAPSE  DS    F
TCOUNT   DS    F
CPUAVG   EQU   X'20'
REALAVG  EQU   X'10'
RATIO    DS    F
TPLY     DC    H'0'
TMAXPLY  EQU   10
CCHAR    DS    C                  CUTOFF CHARACTER
OCCHAR   DS    C                  PREVIOUS CCHAR
WINDOW   EQU   60                 ONE HALF PAWN
$PRINVAR DC    100H'0'
STATSVEC DC    A(#HASTR)
         DC    A(#HISTR)
         DC    A(#LBSTR)
         DC    A(#UBSTR)
         DC    A(#RESTR)
         DC    A(#EVSTR)
         DC    A(#MVSTR)
         DC    A(#CASTR)
         DC    A(#EXSTR)
         DC    A(#LEXSTR)
         DC    A(#OHSTR)
         DC    A(#OESTR)
         DC    A(0)
#HASTR   STRNG '#hashes'
#HISTR   STRNG '#hits'
#LBSTR   STRNG '#cutlow'
#UBSTR   STRNG '#cuthigh'
#RESTR   STRNG '#rep'
#EVSTR   STRNG '#evals'
#MVSTR   STRNG '#mvgen'
#CASTR   STRNG '#capgen'
#EXSTR   STRNG '#execs'
#LEXSTR  STRNG '#lexecs'
#OHSTR   STRNG '#obvhit'
#OESTR   STRNG '#obvexec'
PLYDB    DSECT
         PLYDB
         DSA
PLIST    DS    8F
TCUTOFF  DS    F
NUM      DS    F
RETCODE  DS    F
MINWIND  DS    H
MAXWIND  DS    H
         DS    0D
TOTALS   DS    (STATSLEN)X
STR      DS    H
         DS    CL32
         ENDDSA
         REGS
SYS      EQU   R3                 SYSLIST FILE OPTION WORD
         END
