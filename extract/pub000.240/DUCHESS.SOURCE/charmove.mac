         TITLE 'CHARMOVE -- CONVERT STRING TO INTERNAL FORMAT'
         MACRO
&LABEL   BEGSTA
&LABEL   DC    A(0)
         MEND
         MACRO
&LABEL   STA   &A
         LCLA  &X,&Y
&LABEL   CEQU  *
&X       SETA  1
&Y       SETA  N'&A
.LOOP    AIF   ('&X' GT '&Y').ENDIT
         DC    A(&A(&X))
&X       SETA  &X+1
         AGO   .LOOP
.ENDIT   DC    A(0)
         MEND
         MACRO
&LABEL   ENDSTA
&LABEL   DC    A(0)
         MEND
*
* PARSE MACRO -- MATCH SINGLE CHARACTER
*
         MACRO
&LABEL   MATCH &C
&LABEL   LA    R1,C&C
         B     #MATCH-&LABEL.(R15)
         MEND
*
* CHEAP SUBROUTINE ENTRY/EXIT. USE SRET TO RETURN
*
         MACRO
&LABEL   SENTER
&LABEL   EQU   *
         USING *,R15
         MEND
         EJECT
*
*        0     MOVE IS PERFECTLY LEGAL AND UNAMBIGUOUS.
*        4     MOV5 IS AMBIGUOUS.
*        8     MOVE IS ILLEGAL
*        12    SYNTAX ERROR.
*
$CHARMOV CSECT
         EXTRN FINDMOVE
         EXTRN INDEX
         EXTRN MVEX
         EXTRN PARSE
         ENTRY CHARMOVE
CHARMOVE ENTER DSA=YES
         L     R11,0(R1)          -> POSITION DATABASE
         L     R1,4(R1)           -> STRING TO PARSE
         MVC   TMPSTR(256),0(R1)
         LA    R1,TMPSTR
         SCALL TRANSTR            SIMPLIFY INPUT
         LA    R1,TMPSTR
         ST    R1,PLIST
         LA    R1,MOVETBL         -> PARSE TABLE
         ST    R1,PLIST+4
         LA    R1,PLIST
         LA    R2,12              DEFAULT SEVERITY CODE
         STH   R2,MAXERR
         LR    R7,R13             R7 -> DSA
         SCALL PARSE              PARSE THE STRING
         LH    R15,MAXERR         GET THE MAX ERROR
         L     R1,MOVE            GET THE MOVE
         B     RET
         EJECT
*
* <LEGAL MOVE>          ::=  <ALGEBRAIC MOVE>
*                            <DESCRIPTIVE MOVE>
*                            <CASTLING MOVE>
*
MOVETBL  BEGSTA
         STA   (#ALGMOVE)
         STA   (#DSCMOVE)
         STA   (#CASTLE)
         ENDSTA
         EJECT
*
* <CASTLING MOVE>       ::=  <O0><DASH><O0><DASH><O0><CHECK>
*                            <O0><DASH><O0><CHECK>
* (FOLLOWING PRIMARILY TO IMPLEMENT 'CASTLE' REQUEST)
*                            <O0><O0><O0><O0><KSTUFF><CHECK>
*                            <O0><O0><O0><O0><QSTUFF><CHECK>
*
#CASTLE  BEGSTA
         STA   (#O0,#DASHES,#O0,#DASHES,#O0,#CHECK,#ISQSIDE,#GO)
         STA   (#O0,#DASH,#DASH,#DASHES,#O0,#CHECK,#ISQSIDE,#GO)
         STA   (#O0,#DASHES,#O0,#CHECK,#ISKSIDE,#GO)
         STA   (#O0,#O0,#O0,#O0,#KSTUFF,#CHECK,#ISKSIDE,#GO)
         STA   (#O0,#O0,#O0,#O0,#QSTUFF,#CHECK,#ISQSIDE,#GO)
         ENDSTA
#KSTUFF  BEGSTA
         STA   (#SLASH,#KSTUFF)
         STA   (#K,#KSTUFF)
         STA   (#NILL)
         ENDSTA
#QSTUFF  BEGSTA
         STA   (#SLASH,#QSTUFF)
         STA   (#Q,#QSTUFF)
         STA   (#NILL)
         ENDSTA
#O0      BEGSTA
         STA   (#O)
         STA   (#0)
         ENDSTA
#DASHES  BEGSTA
         STA   (#DASH,#DASHES)
         STA   (#NILL)
         ENDSTA
         EJECT
*
* <DESCRIPTIVE MOVE>    ::=  <DESCRIPTIVE PIECE><DASH>
*                                 <DESCRIPTIVE SQUARE>
*                                 <DESCRIPTIVE TAIL>
*                            <DESCRIPTIVE PIECE><EXPLICIT CAPTURE>
*                                 <DESCRIPTIVE PIECE><DESCRIPTIVE TAIL>
*                            <DESCRIPTIVE PIECE><DESCRIPTIVE TAIL>
*
#DSCMOVE BEGSTA
         STA   (#DSCPIEC,#DASH,#NOCAPT,#ISDEST,#DSCSQR,#DSCTAIL)
         STA   (#DSCPIEC,#CAPTCHR,#ISDEST,#ISCAPT,#DSCPIEC,#DSCTAIL)
         STA   (#DSCPIEC,#ISDEST,#DSCTAIL)
         ENDSTA
*
* <DESCRIPTIVE PIECE>   ::=  <OWNER QUALIFIER><PAWN>
*                            <PIECE><SQUARE QUALIFIER>
*                            <HISTORY QUALIFIED PIECE>
*                            <NILL>
*
#DSCPIEC BEGSTA
         STA   (#DSCFIL,#PAWN)
         STA   (#PIECE,#SQRQUAL)
         STA   (#HPIECE)
         STA   (#NILL)
         ENDSTA
*
* <SQUARE QUALIFIER>    ::=  <SLASH><DESCRIPTIVE SQUARE>
*                            <LP><DESCRIPTIVE SQUARE><RP>
*                            <DOT><DESCRIPTIVE SQUARE>
*                            <NILL>
*
#SQRQUAL BEGSTA
         STA   (#SLASH,#DSCSQR)
         STA   (#LP,#DSCSQR,#RP)
         STA   (#DOT,#DSCSQR)
         STA   (#NILL)
         ENDSTA
*
* <DESCRIPTIVE SQUARE>  ::=  <FILE QUALIFIER><RANK QUALIFIER>
*
#DSCSQR  BEGSTA
         STA   (#DSCFIL,#DSCRANK)
         ENDSTA
*
* <FILE QUALIFIER>      ::=  K <OPTIONAL FILE>
*                            Q <OPTIONAL FILE>
*                            <OPTIONAL FILE>
*                            <NILL>
*
#DSCFIL  BEGSTA
         STA   (#FKING,#OPTFILE)
         STA   (#FQUEEN,#OPTFILE)
         STA   (#OPTFILE)
         STA   (#NILL)
         ENDSTA
#OPTFILE BEGSTA
         STA   (#REQFILE)
         STA   (#NILL)
         ENDSTA
*
* <RANK QUALIFIER>      ::=  <REQUIRED RANK>
*                            <NILL>
*
#DSCRANK BEGSTA
         STA   (#REQRANK)
         STA   (#NILL)
         ENDSTA
*
* <DESCRIPTIVE TAIL>    ::=  <PROMOTED PIECE><CHECK>
*
#DSCTAIL BEGSTA
         STA   (#PROM,#CHECK,#GO)
         ENDSTA
         EJECT
*
* <ALGEBRAIC MOVE>      ::=  <ALGEBRAIC SQUARE><LONG SEPARATOR>
*                                 <ALGEBRAIC TAIL>
*                            <PIECE><ALGEBRAIC SQUARE><LONG SEPARATOR>
*                                 <ALGEBRAIC TAIL>
*                            <PIECE><ALGEBRAIC CAPTURE TAIL>
*                            <PIECE><ALGEBRAIC RANK>
*                                 <ALGEBRAIC CAPTURE TAIL>
*                            <PIECE><ALGEBRAIC FILE>
*                                 <ALGEBRAIC CAPTURE TAIL>
*                            <PAWN><DEST><ALGEBRAIC SQUARE>
*                                 <PROMOTED PIECE><CHECK>
*                            <PAWN><ALGEBRAIC FILE><CAPTURE>
*                                 <ALGEBRAIC CAPTURE TAIL>
*                            <PAWN><ALGEBRAIC FILE><CAPTURE>
*                                 <CAPTURE SEPARATOR><ALGEBRAIC FILE>
*                                 <ALGEBRAIC SUFFIX>
*
#ALGMOVE BEGSTA
         STA   (#ALGSQR,#ALGLONG,#ALGTAIL)
         STA   (#PIECE,#ALGSQR,#ALGLONG,#ALGTAIL)
         STA   (#PIECE,#ALGCTAL)
         STA   (#PIECE,#ALGRANK,#ALGCTAL)
         STA   (#PIECE,#ALGFILE,#ALGCTAL)
         STA   (#ISPAWN,#ISDEST,#ALGSQR,#PROM,#CHECK,#GO)
         STA   (#ISPAWN,#ALGFILE,#ISCAPT,#ALGCTAL)
         STA   (#ISPAWN,#ALGFILE,#ISCAPT,#CAPTSEP,#ISDEST,#ALGFILE,    *
               #SUFFIX)
         ENDSTA
*
* <ALGEBRAIC SQUARE>    ::=  <ALGEBRAIC FILE><ALGEBRAIC RANK>
*
#ALGSQR  BEGSTA
         STA   (#ALGFILE,#ALGRANK)
         ENDSTA
*
* <ALGEBRAIC CAPTURE TAIL>
*                       ::=  <CAPTURE SEPARATOR><ALGEBRAIC TAIL>
*
#ALGCTAL BEGSTA
         STA   (#CAPTSEP,#ALGTAIL)
         ENDSTA
*
* <CAPTURE SEPARATOR>   ::=  <EXPLICIT CAPTURE>
*                            <NILL>
*
#CAPTSEP BEGSTA
         STA   (#CAPTCHR,#ISCAPT)
         STA   (#NILL)
         ENDSTA
*
* <LONG SEPARATOR>      ::=  <CAPTURE SEPARATOR>
*                            <DASH>
*
#ALGLONG BEGSTA
         STA   (#CAPTSEP)
         STA   (#DASH)
         ENDSTA
*
* <ALGEBRAIC SUFFIX>    ::=  <PROMOTED PIECE><CAPTURE SEPARATOR>
*                                 <CHECK>
*
#SUFFIX  BEGSTA
         STA   (#PROM,#CAPTSEP,#CHECK,#GO)
         ENDSTA
*
* <ALGEBRAIC TAIL>      ::=  <ALGEBRAIC SQUARE><ALGEBRAIC SUFFIX>
*
#ALGTAIL BEGSTA
         STA   (#ISDEST,#ALGSQR,#SUFFIX)
         ENDSTA
*
* <PROMOTED PIECE>      ::=  <LEGALLY PROMOTED PIECE>
*                            <EQ><LEGALLY PROMOTED PIECE>
*                            <EQ><DASH><LEGALLY PROMOTED PIECE>
*                            <SLASH><LEGALLY PROMOTED PIECE>
*                            <LP><LEGALLY PROMOTED PIECE><RP>
*                            <NOTE><PROMOTED PIECE>
*                            <NILL>
*
#PROM    BEGSTA
         STA   (#PROMPC)
         STA   (#EQ,#DASHES,#PROMPC)
         STA   (#SLASH,#PROMPC)
         STA   (#LP,#PROMPC,#RP)
         STA   (#NOTE,#PROM)
         STA   (#NILL)
         ENDSTA
*
* <CHECK>               ::=  <EXPLICIT CHECK><CHECK>
*                            <NOTE><CHECK>
*                            <NILL>
#CHECK   BEGSTA
         STA   (#EXCHECK,#CHECK)
         STA   (#NOTE,#CHECK)
         STA   (#NILL)
         ENDSTA
*
* MISCELLANEOUS NOTATION
*
#NOTE    BEGSTA
         STA   (#E,#P,#ISEP)
         STA   (#DOT)
         STA   (#DASH)
         STA   (#QUES)
         STA   (#EXCL)
         STA   (#BAR)
         ENDSTA
         EJECT
*
* <PAWN>
*
#PAWN    LA    R15,8
         CLI   0(STRING),C'P'
         BNER  R14
*
* <PIECE>               ::=  P × N × B × R × Q × K
*
#PIECE   ENTER
         LR    R9,R1
         USING WORKAREA,R9
         IC    R5,0(STRING)
         INDEX 'KQRBNP',R5
         TM    $CHECK,$ISDEST
         IF    Z
         STC   R1,$PIECE
         OI    $PIECE,$SPEC
         ELSE
         STC   R1,$CAPT
         OI    $CAPT,$SPEC
         ENDIF
         LA    STRING,1(STRING)
         B     RETS
         EJECT
*
* <HISTORY QUALIFIED PIECE>  ::=  KR | KN | KB | QR | QN | QB
*
#HPIECE  ENTER DSA=YES
         LR    R9,R1
         USING WORKAREA,R9
         USING POSDB,R11
         ZERO  R2
         LC    R8,WSQUARES-WK(R11)  IMPOSSIBLE SQUARE FOR BLACK
         CLI   COLOR,X'00'
         IF    E
         TM    $CHECK,$ISDEST
         IF    Z
         LA    R2,56
         LC    R8,BSQUARES-WK(R11)  IMPOSSIBLE SQUARE FOR WHITE
         ENDIF
         ELSE
         TM    $CHECK,$ISDEST
         IF    NZ
         LA    R2,56
         ENDIF
         ENDIF
         CLI   0(STRING),X'00'
         BE    RETS8
         IC    R5,1(STRING)
         INDEX 'RNB',R5
         TST   R15
         BNZ   RETS
         CLI   0(STRING),C'K'
         IF    E
         LA    R2,7(R2)
         SR    R2,R1
         ELSE
         CLI   0(STRING),C'Q'
         BNE   RETS8
         AR    R2,R1
         ENDIF
         L     R3,=V(HBOARD)
         MVDB  TMPDB,0(R3)
         L     R3,=V(HMOVES)
         LOOP
         LH    R0,0(R3)
         LA    R3,2(R3)
         TST   R0
         BREAK Z
*
*  CHECK FOR CAPTURE
*
         LR    R5,R0
         N     R5,=X'0000003F'
         CR    R2,R5
         IF    E
         LR    R2,R8
         BREAK ,2
         ENDIF
*
*  CHECK FOR PIECE MOVING
*
         LR    R4,R0
         SRL   R4,8
         N     R4,=X'0000003F'
         CR    R2,R4
         IF    E
         LR    R2,R5
         ENDIF
*
* CHECK FOR CASTLING
*
         LR    R6,R0
         SRL   R6,14
         N     R6,=X'00000003'
         C     R6,=F'2'
         IF    E
         LR    R6,R5
         SR    R6,R4              DST - SRC
         IF    H                  KINGSIDE
         LA    R6,3(R4)
         CR    R6,R2
         IF    E
         LA    R2,1(R4)
         ENDIF
         ELSE                     QUEENSIDE
         LA    R6,4(R2)
         CR    R6,R4
         IF    E
         LA    R2,3(R2)
         ENDIF
         ENDIF
         ENDIF
         LA    R1,TMPDB
         SCALL MVEX
         ENDLOOP
*
*  FINAL SQUARE LOCATED
*
         SRDL  R2,3
         SRL   R3,32-3
         TM    $CHECK,$ISDEST
         IF    Z
         STC   R2,$SRANK
         OI    $SRANK,$SPEC
         STC   R3,$SFILE
         OI    $SFILE,$SPEC
         ELSE
         STC   R2,$DRANK
         OI    $DRANK,$SPEC
         STC   R3,$DFILE
         OI    $DFILE,$SPEC
         ENDIF
         LA    STRING,2(STRING)
         B     RETS0
         EJECT
*
* <ALGEBRAIC RANK>      ::=  1 × 2 × 3 × 4 × 5 × 6 × 7 × 8
*
#ALGRANK ENTER
         LR    R9,R1              GET WORK AREA.
         USING WORKAREA,R9
         IC    R5,0(STRING)
         INDEX '87654321',R5
         TM    $CHECK,$ISDEST     TO DEST YET?
         IF    Z
         STC   R1,$SRANK
         OI    $SRANK,$SPEC
         ELSE
         STC   R1,$DRANK
         OI    $DRANK,$SPEC
         ENDIF
         LA    STRING,1(STRING)
         B     RETS
*
* <ALGEBRAIC FILE>      ::=  A × B × C × D × E × F × G × H
*
#ALGFILE ENTER
         LR    R9,R1              GET THE WORKAREA
         USING WORKAREA,R9
         IC    R5,0(STRING)
         INDEX 'ABCDEFGH',R5
         TM    $CHECK,$ISDEST     ARE WE ON THE DEST?
         IF    Z
         STC   R1,$SFILE
         OI    $SFILE,$SPEC
         ELSE
         STC   R1,$DFILE
         OI    $DFILE,$SPEC
         ENDIF
         LA    STRING,1(STRING)
         B     RETS
*
* <EXPLICIT CAPTURE>    ::=  * × : × X
*
#CAPTCHR ENTER
         IC    R5,0(STRING)
         INDEX '*:X',R5
         LA    STRING,1(STRING)
         B     RETS
*
* <LEGALLY PROMOTED PIECE>
*                       ::=  N × B × R × Q
*
#PROMPC  ENTER
         IC    R5,0(STRING)
         LR    R9,R1              PICK UP THE WORKAREA.
         USING WORKAREA,R9
         TM    $PIECE,$SPEC+5     MAKE SURE PAWN IS BEING PROMOTED
         BM    RETS8              BRANCH ON MIXED ZEROES AND ONES
         INDEX 'QRBN',R5
         LA    STRING,1(STRING)
         STC   R1,$PROM           PIECE IS TO BE PROMOTED.
         OI    $PROM,$SPEC        MARK AS SPECIFIED.
         B     RETS
*
* <EXPLICIT CHECK>      ::=  + × #
*
#EXCHECK ENTER
         LR    R9,R1              PICK UP THE DATABASE.
         USING WORKAREA,R9        NOTE ITS USE.
         IC    R5,0(STRING)
         INDEX '+#',R5
         OI    $CHECK,$SPEC       MARK AS SPEC.
         CLI   0(STRING),C'#'     IS IT MATE?
         IF    Z
         OI    $CHECK,$MATE       AND AS MATE.
         ENDIF
         LA    STRING,1(STRING)
         B     RETS
         EJECT
*
* <REQUIRED RANK>       ::=  1 × 2 × 3 × 4 × 5 × 6 × 7 × 8
*
#REQRANK ENTER
         LR    R9,R1
         USING WORKAREA,R9
         USING POSDB,R11
         IC    R5,0(STRING)
         LA    STRING,1(STRING)
         INDEX '12345678',R5
         CLI   COLOR,X'00'        IS IT WHITE?
         IF    Z
         LA    R14,7
         SR    R14,R1
         LR    R1,R14
         ENDIF
         TM    $CHECK,$ISDEST
         IF    Z
         STC   R1,$SRANK
         OI    $SRANK,$SPEC
         ELSE
         STC   R1,$DRANK
         OI    $DRANK,$SPEC
         ENDIF
         B     RETS
         EJECT
*
* <REQUIRED FILE>       ::=  R × N × B
*
#REQFILE ENTER
         LR    R9,R1
         USING WORKAREA,R9
         IC    R5,0(STRING)
         INDEX 'RNB',R5
         TM    $CHECK,$ISDEST
         IF    Z
         TM    $SFILE,$SPEC       SOURCE SPEC. YET?
         IF    Z
         STC   R1,$SFILE
         OI    $SFILE,$SPEC+$AMBIG
         ELSE
         LA    R5,3
         SR    R5,R1
         LR    R1,R5
         CLI   $SFILE,$SPEC+3     IS IT QR, QN, QB?
         IF    Z
         LCR   R1,R1
         ENDIF
         LC    R5,$SFILE
         AR    R5,R1
         STC   R5,$SFILE
         ENDIF
         ELSE
         TM    $DFILE,$SPEC
         IF    Z
         STC   R1,$DFILE
         OI    $DFILE,$SPEC+$AMBIG
         ELSE
         LA    R5,3
         SR    R5,R1
         LR    R1,R5
         CLI   $DFILE,$SPEC+3     QR, QN, QB?
         IF    Z
         LCR   R1,R1
         ENDIF
         SR    R5,R5
         IC    R5,$DFILE
         AR    R1,R5
         STC   R1,$DFILE
         ENDIF
         ENDIF
         LA    STRING,1(STRING)
         B     RETS
*
* <FKING>               ::=  K
*
#FKING   ENTER
         LR    R9,R1
         USING WORKAREA,R9
         SR    R15,R15
         CLI   0(STRING),C'K'
         IF    NZ
         LA    R15,8
         ENDIF
         LA    STRING,1(STRING)
         TM    $CHECK,$ISDEST
         IF    Z
         MVI   $SFILE,$SPEC+4
         ELSE
         MVI   $DFILE,$SPEC+4
         ENDIF
         B     RETS
*
* <FQUEEN>              ::=  Q
*
#FQUEEN  ENTER
         LR    R9,R1
         USING WORKAREA,R9
         SR    R15,R15
         CLI   0(STRING),C'Q'
         IF    NZ
         LA    R15,8
         ENDIF
         LA    STRING,1(STRING)
         TM    $CHECK,$ISDEST
         IF    Z
         MVI   $SFILE,$SPEC+3
         ELSE
         MVI   $DFILE,$SPEC+3
         ENDIF
         B     RETS
         EJECT
         DROP  R9
         USING WORKAREA,R1
#ISPAWN  SENTER
         MVI   $CAPT,$SPEC+$NONE  FORCE NON-CAPTURE FOR NOW.
         MVI   $PIECE,$SPEC+5     FORCE THIS TO BE A PAWN.
         B     SRETS0
#ISDEST  SENTER
         OI    $CHECK,$ISDEST
         B     SRETS0
#ISEP    SENTER
         TM    $CAPT,X'7'         INFORMATION ON PIECE CAPTURED?
         IF    Z                  IF NOT
         OI    $CAPT,5            PAWN IS BEING CAPTURED
         ENDIF
         OI    $CAPT,$SPEC+$ENPASS
         B     SRETS0
#ISCAPT  SENTER
         MVI   $CAPT,$SPEC+6      ALLOW ANY PIECE TO BE CAPTURED.
         B     SRETS0
#NOCAPT  SENTER
         MVI   $CAPT,$SPEC+$NONE
         B     SRETS0
*
* <KING SIDE CASTLE>
*
#ISKSIDE SENTER
         MVI   $PIECE,$SPEC+0     FORCE TO BE A KING.
         MVI   $SFILE,$SPEC+4     FORCE SRC TO E-FILE.
         MVI   $DFILE,$SPEC+6     FORCE TO BE THE G-FILE.
         B     SRETS0
*
* <QUEEN SIDE CASTLE>
*
#ISQSIDE SENTER
         MVI   $PIECE,$SPEC+0     FORCE TO BE A KING.
         MVI   $SFILE,$SPEC+4     FORCE SRC TO E-FILE.
         MVI   $DFILE,$SPEC+2     FORCE TO BE THE C-FILE.
         B     SRETS0
         DROP  R1
*
* <NILL>   MATCHES ANYTHING
*
#NILL    EQU   *
SRETS0   ZERO  R15
         LR    R1,STRING
         BR    R14
SRETS8   LA    R15,8
         LR    R1,STRING
         BR    R14
         EJECT
#E       MATCH 'E'
#P       MATCH 'P'
#K       MATCH 'K'
#Q       MATCH 'Q'
#O       MATCH 'O'
#0       MATCH '0'
#DASH    MATCH '-'
#EQ      MATCH '='
#SLASH   MATCH '/'
#LP      MATCH '('
#RP      MATCH ')'
#DOT     MATCH '.'
#QUES    MATCH '?'
#EXCL    MATCH '×'
#BAR     MATCH '|'
*
* MATCH CHARACTER PASSED IN R1 AGAINST STRING
*
#MATCH   LC    R15,0(STRING)
         CR    R1,R15
         LA    R1,1(STRING)
         LA    R15,8
         BNER  R14
         ZERO  R15
         BR    R14
         EJECT
*
* THIS SUBROUTINE IS CALLED WHEN A MOVE IS PARSED SUCCESSFULLY.
* IT IS RESPONSIBLE FOR CHECKING ITS LEGALITY, AMBIGUITY, AND PASSING
* IT BACK TO CHARMOVE. CURRENTLY IT WILL ONLY PRINT OUT THE WORK AREA.
*
#GO      ENTER
         CLI   0(STRING),X'00'    ARE WE AT THE END OF THE STRING?
         IF    Z                  YES -- PROCESS IT.
         LR    R9,R1              RESCUE THE WORK AREA POINTER.
*        PRNTF 'AT GO. DATA = %X %X%L',(0(R9),4(R9))
         DROP  R13
         USING SAVEAREA,R7
         ST    R11,PLIST1+0
         ST    R9,PLIST1+4        -> MOVE DESCRIPTOR
         LA    R1,TSTMOVE         -> TEST MOVE
         ST    R1,PLIST1+8
         LA    R1,PLIST1          -> PLIST
         SCALL FINDMOVE
         LTR   R15,R15            ERROR?
         IF    Z                  NO -- HAS ANOTHER MOVE BEEN FOUND?
         LH    R2,MAXERR          GET PREV. MAX. ERROR.
         LTR   R2,R2
         IF    Z                  ANOTHER MOVE HAS BEEN FOUND -- IS IT
         L     R3,MOVE            THE SAME AS THIS ONE? GET THE OLD
         X     R3,TSTMOVE         MOVE AND COMPARE.
         N     R3,=X'FFFFFF3F'
         BZ    RETS8
         LA    R15,4
         STH   R15,MAXERR         MOVE BECOMES AMBIGUOUS.
         B     RETS8
         ENDIF
         L     R3,TSTMOVE         GET THE TEST MOVE.
         ST    R3,MOVE            SAVE IT AWAY.
         LH    R3,MAXERR
         C     R3,=F'4'           WAS IT AMBIGUOUS?
         IF    NZ                 NO -- WE CAN STORE ON TOP OF IT
         STH   R15,MAXERR         CLEAR MAXERR.
         ENDIF
         ELSE                     RETURN CODE NON-ZERO.
         CH    R15,MAXERR         COMPARE TO THE PREVIOUS MAX. ERROR.
         IF    L                  NOT AS SEVERE?
         STH   R15,MAXERR
         ENDIF
         ENDIF
         ENDIF
*
* NOTE WE MUST RETURN WITH FAILURE TO FIND ALL AMBIGUOUS MOVES.
* OTHERWISE THE PARSE ROUTINE WOULD FIND ONLY THE FIRST (POSSIBLY
* AMBIGUOUS) MOVE IN THE LIST.
*
         B     RETS8
         EJECT
*
*  SIMPLIFY INPUT STRING (E.G. MATE -> #)
*  R1 -> STRING
*
TRANSTR  ENTER DSA=YES
         LR    R2,R1
*
* CONVERT STRING TO UPPER CASE
*
         LH    R0,0(R1)
         TST   R0
         WHILE H
         LC    R15,2(R1)
         MKU   R15
         STC   R15,2(R1)
         LA    R1,1(R1)
         S     R0,=F'1'
         ENDWHILE
*
         LA    R3,STRTAB
         LOOP
         LH    R4,0(R3)
         S     R4,=F'1'           REDUCE FOR USE BY MVC
         BREAK L
         LA    R7,4(R4)
         N     R7,=X'FFFFFFFE'    TOTAL STRING LEN
         LOOP
         ST    R2,PLIST
         ST    R3,PLIST+4
         LA    R1,PLIST
         SCALL INDEX
         TST   R15
         BREAK NZ
         LA    R5,2(R1,R2)        -> TEXT TO BE REPLACED
         LA    R6,2(R7,R3)        -> REPLACING TEXT
         EX    R4,REPSTR
         ENDLOOP
         AR    R3,R7
         AR    R3,R7
         ENDLOOP
*
* REMOVE BLANKS
*
         LH    R3,0(R2)
         LR    R4,R2
         LR    R5,R2
         TST   R3
         WHILE H
         MVC   2(1,R4),2(R5)
         CLI   2(R5),C' '
         IF    NE
         LA    R4,1(R4)
         ENDIF
         LA    R5,1(R5)
         S     R3,=F'1'
         ENDWHILE
         SR    R4,R2
         STH   R4,0(R2)           CHOP LENGTH
RETS0    ZERO  R15
RETS     LR    R1,STRING
RET      EXIT  RC=(R15),RTN=(R1)
RETS8    EXIT  RC=8,RTN=(STRING)
REPSTR   MVC   0(0,R5),0(R6)
STRTAB   EQU   *
         STRNG 'STALEMATE'        DOES NOT UNDERSTAND STALEMATE
         STRNG '         '
         STRNG 'CHECK'
         STRNG ' +   '
         STRNG 'CH'
         STRNG '+ '
         STRNG 'MATE'
         STRNG ' #  '
         STRNG '++'
         STRNG '# '
         STRNG 'MT'
         STRNG '# '
         STRNG 'CASTLE'
         STRNG ' OOOO '
         STRNG 'LONG'
         STRNG ' Q  '             QUEENSIDE
         STRNG 'SHORT'
         STRNG ' K   '            KINGSIDE
         STRNG 'ENPASSANT'
         STRNG ' EP      '
         STRNG 'ENPASSENT'
         STRNG ' EP      '
         STRNG 'ENP'
         STRNG 'EP '
         STRNG 'E.P'
         STRNG 'EP '
         STRNG 'QUEENS'
         STRNG ' =Q   '
         STRNG 'KING'
         STRNG ' K  '
         STRNG 'QUEEN'
         STRNG ' Q   '
         STRNG 'ROOK'
         STRNG ' R  '
         STRNG 'BISHOP'
         STRNG ' B    '
         STRNG 'KNIGHT'
         STRNG ' N    '
         STRNG 'NIGHT'
         STRNG ' N   '
         STRNG 'KT'
         STRNG 'N '
         STRNG 'PAWN'
         STRNG ' P  '
         STRNG 'ONE'
         STRNG ' 1 '
         STRNG 'TWO'
         STRNG ' 2 '
         STRNG 'THREE'
         STRNG ' 3   '
         STRNG 'FOUR'
         STRNG ' 4  '
         STRNG 'FIVE'
         STRNG ' 5  '
         STRNG 'SIX'
         STRNG ' 6 '
         STRNG 'SEVEN'
         STRNG ' 7   '
         STRNG 'EIGHT'
         STRNG ' 8   '
         STRNG 'CAPTURE'
         STRNG ' X     '
         STRNG 'TAKE'
         STRNG ' X  '
         STRNG 'EQUAL'
         STRNG ' =   '
         STRNG 'BECOME'
         STRNG ' =    '
         STRNG 'PROMOTE'
         STRNG ' =     '
         STRNG 'AT'
         STRNG '/ '
         STRNG 'ON'
         STRNG '/ '
         STRNG 'TO'
         STRNG '- '
         STRNG 'FILE'
         STRNG '    '
         STRNG 'COLUMN'
         STRNG '      '
         STRNG 'RANK'
         STRNG '    '
         STRNG 'ROW'
         STRNG '   '
         STRNG 'LEVEL'
         STRNG '     '
         STRNG 'SIDE'
         STRNG '    '
         STRNG 'MOVE'
         STRNG '    '
         STRNG 'PLEASE'
         STRNG '      '
         STRNG '''S'
         STRNG '  '
         STRNG 'THE'
         STRNG '   '
         STRNG 'S'
         STRNG ' '
         STRNG 'AND'
         STRNG '   '
         STRNG 'WITH'
         STRNG '    '
         STRNG 'OF'
         STRNG '  '
         STRNG 'BOARD'
         STRNG '     '
         STRNG ','
         STRNG ' '
         STRNG ''
         EJECT
         DSA
PLIST    DS    2F
PLIST1   DS    3F
TSTMOVE  DS    F
MOVE     DS    F
MAXERR   DS    H
         CNOP  0,8
TMPSTR   DS    256C
TMPDB    DS    320X
         ENDDSA
POSDB    DSECT
         POSDB
WORKAREA DSECT
$PIECE   DS    X                  PIECE TYPE.
$CAPT    DS    X                  CAPTURED PIECE TYPE.
$SRANK   DS    X                  SOURCE RANK
$SFILE   DS    X                  SOURCE FILE
$DRANK   DS    X                  DEST RANK
$DFILE   DS    X                  DEST FILE.
$PROM    DS    X                  PROMOTED PIECE TYPE.
$CHECK   DS    X                  CHECK INFORMATION.
$SPEC    EQU   X'80'              PARAMETER SPEC.
$AMBIG   EQU   X'40'              FILE IS AMBIGUOUS (DESCRIPTIVE ONLY)
$NONE    EQU   X'20'              MOVE MUST NOT BE A CAPTURE ($CAPT)
$ENPASS  EQU   X'10'              MOVE MUST BE AN ENPASSANT CAPTURE.
$ISDEST  EQU   X'08'              CURRENTLY WORKING ON DEST ($CHECK)
$MATE    EQU   X'04'              MOVE IS MATE ($CHECK)
STRING   EQU   10
         REGS
         END
