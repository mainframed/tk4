         TITLE 'CMNDUTIL -- VARIOUS COMMANDS AND UTILITIES'
         MACRO
&LABEL   CMND  &NAME,&RTN,&CODE
         AIF   ('&CODE.' EQ '').NOVAL
&LABEL   DC    AL1(&CODE.)
         AGO   .ADDR
.NOVAL   ANOP
&LABEL   DC    AL1(X'00')
.ADDR    ANOP
         DC    AL3(&RTN.)
         DC    CL16'&NAME.'
         MEND
CMNDUTIL CSECT
         ENTRY FINDCMND
         ENTRY GETMOVE
         ENTRY PREDICT
         ENTRY STAMP
*
         EXTRN BACKUP
         EXTRN BDEV
         EXTRN BINTIME
         EXTRN BOARD
         EXTRN CAPGEN
         EXTRN CBOARD
         EXTRN CHARMOVE
         EXTRN CMCLOCK
         EXTRN CMSTATS
         EXTRN CPLXSET
         EXTRN DBCHK
         EXTRN DBINIT
         EXTRN DBZERO
         EXTRN ECHO
         EXTRN ENDGCHK
         EXTRN HADD
         EXTRN HELP
         EXTRN HISTORY
         EXTRN LINKDATE
         EXTRN LMVTRIM
         EXTRN MOVECHAR
         EXTRN MOVESORT
         EXTRN MVEX
         EXTRN MVGEN
         EXTRN NLOOK
         EXTRN NOSTIMER
         EXTRN PHASH
         EXTRN PLBLACK
         EXTRN PLBOTH
         EXTRN PLNONE
         EXTRN PLWHITE
         EXTRN PRINTDB
         EXTRN PTHREATS
         EXTRN PVARTBL
         EXTRN SWITCH
         EXTRN SWSET
         EXTRN TIMAVG
         EXTRN TTCFLAGS
         EXTRN TTCLEAR
         EXTRN TRACE
         EXTRN UNGETOKN
         EXTRN UPDATE
         EXTRN VERSION
FINDCMND ENTER DSA=YES            ROUTINE TO LOOK UP COMMANDS AND CALL
         ZERO  R2
         REPEAT
         GCHR
         TST   R15
         BREAK NZ
         LA    R3,C' '
         CR    R1,R3
         IF    E
         TST   R2
         BREAK NE,2
         ELSE
         STC   R1,TMPSTR+2(R2)
         LA    R2,1(R2)
         ENDIF
         C     R2,=F'16'
         UNTIL NL
         TST   R2
         BNH   CMNDRTNM
         STH   R2,TMPSTR
         LA    R1,TMPSTR
         LA    R2,CMNDTBL
         LH    R3,0(,R1)          R3 HAS LENGTH OF TOKEN
         S     R3,=F'1'           FOR EXECUTE
NEXTCMND EX    R3,CHKCMND         A MATCH ?
         BH    ADVNCMND           NO,  LOOP
         BL    NOCMND             ALREADY PAST IT,  LEAVE
         EX    R3,CHKNCMND        MATCH THE NEXT ONE TOO ?
         BE    CMNDAMB            YES,  AMBIGUOUS
         LR    R3,R1              SAVE -> TOKEN
         TM    0(R2),VALID
         IF    NZ
         L     R1,=A(CBOARD)
         SCALL DBCHK
         TST   R15
         IF    NE
         LR    R4,R1
         PRNTF '%S: %S%L',((R3),(R4)),PLIST=PLIST
         B     TRUNC
         ENDIF
         ENDIF
         TM    0(R2),LONG
         IF    NZ
         LH    R0,TMPSTR
         CH    R0,=H'3'
         IF    L
         PRNTF '''%S'' is too abbreviated%L',((R3)),PLIST=PLIST
         B     TRUNC
         ENDIF
         ENDIF
         L     R1,=V(FCOUNT)
         ZERO  R0
         ST    R0,0(R1)
         L     R15,0(,R2)         R15 -> ROUTINE TO CALL
         LA    R15,0(R15)
         L     R1,=A(CBOARD)      R1 -> POSITION DATA BASE
         BALR  R14,R15            CALL IT
         B     CMNDRTNM           RETURN (NORMALLY)
ADVNCMND LA    R2,20(,R2)         POINT TO NEXT COMMAND
         B     NEXTCMND
CMNDAMB  LR    R2,R1              R2 -> TOKEN THAT WAS AMBIGUOUS
         PRNTF '''%S'' is ambiguous%L',((R2)),PLIST=PLIST
TRUNC    EQU   *
         GSTR
CMNDRTNM ZERO  R15                CLEAR RC
         B     RET
NOCMND   LA    R0,1
         SCALL UNGETOKN
         LA    R15,8              COMMAND NOT FOUND
         B     RET
CMNDSTOP LA    R15,4              STOP COMMAND CODE
         B     RET
CHKCMND  CLC   2(1,R1),4(R2)      TOKEN:COMMAND TABLE
CHKNCMND CLC   2(1,R1),24(R2)     TOKEN:COMMAND TABLE + 1
         EJECT
VALID    EQU   1
LONG     EQU   2
CMNDTBL  DS    0F
         CMND  ANTICIPATION,CMANT
         CMND  ASYNCHRONOUS,CMASYN
         CMND  BACKUP,BACKUP,LONG
         CMND  BLACK,PLBLACK,VALID
         CMND  BOARD,CMBOARD
         CMND  BOTH,PLBOTH,VALID
         CMND  CLOCK,CMCLOCK
         CMND  COMPLEXITY,CPLXSET
         CMND  CONCEDES,DBINIT,LONG
         CMND  DATABASE,PRINTDB
         CMND  ECHO,ECHO,LONG
         CMND  END,CMNDSTOP,LONG
         CMND  EVALUATE,EVALUATE,VALID
         CMND  HALT,CMNDSTOP,LONG
         CMND  HASH,PHASH,VALID
         CMND  HELP,HELP
         CMND  HISTORY,HISTORY
         CMND  INITIALIZE,DBINIT
         CMND  MESSAGE,MESSAGE
         CMND  MOVES,MOVES,VALID
         CMND  NEITHER,PLNONE,LONG
         CMND  PAGEEJECT,CMPAGE,LONG
         CMND  NOSTIMER,NOSTIMER,LONG
         CMND  PREDICTION,CMPRED,LONG
         CMND  QUIT,CMNDSTOP,LONG
         CMND  RESIGNS,DBINIT,LONG
         CMND  STAMP,STAMP
         CMND  STATISTICSLEVEL,CMSTATS
         CMND  STOP,CMNDSTOP,LONG
         CMND  SWAPSIDE,SWAPSIDE
         CMND  THREATS,PTHREATS
         CMND  TIMEAVERAGE,TIMAVG
         CMND  TRACE,TRACE
         CMND  TTRESET,TTRESET,LONG
         CMND  UPDATE,UPDATE
         CMND  WHITE,PLWHITE,VALID
         CMND  ZERO,DBZERO
         DC    A(0)
         DC    16X'FF'
         EJECT
*
* TAKE MESSAGE AND IGNORE IT.
*
MESSAGE  ENTER
         GSTR
         B     RET0
         SPACE 5
*
* SKIP PAGE
*
CMPAGE   ENTER
         PRNTF '%P'
         B     RET0
         EJECT
GETMOVE  ENTER DSA=YES
         LR    R11,R1             SAVE A(BOARD).
         SCALL DBCHK              POSITION MUST BE LEGAL.
         TST   R15
         BNZ   MSGQUIT
         LR    R1,R11
         SCALL ENDGCHK
         TST   R15
         BNZ   QUIT
         GSTR
         ST    R11,PLIST          SET UP PARAMETER LIST : BOARD
         ST    R1,PLIST+4         SAVE STRING ADDR
         LA    R1,PLIST           POINT TO PARAMETERS.
         SCALL CHARMOVE           CALL THE SYNTAX ROUTINE.
         TST   R15                ERROR IN MOVE SPECIFICATION?
         IF    Z                  NO
         LR    R0,R1              R0 = MOVE.
         LR    R1,R11             R1 = POSITION DATABASE.
         SCALL HADD
         LR    R1,R11
         SCALL ENDGCHK
         L     R1,=V(FCOUNT)
         ZERO  R0
         ST    R0,0(R1)
         B     QUIT
         ENDIF
         L     R1,ERRTBL(R15)     GET RETURN MESSAGE.
MSGQUIT  LR    R2,R1
         PRNTF '%S%L',((R2)),PLIST=PLIST
         LA    R15,8
QUIT     B     RET
ERRTBL   DC    A(MVOK)
         DC    A(MVAMBIG)
         DC    A(MVILLEG)
         DC    A(MVSYNTX)
MVOK     STRNG 'Legal'
MVAMBIG  STRNG 'Ambiguous'
MVILLEG  STRNG 'Illegal'
MVSYNTX  STRNG 'Syntax'
         EJECT
STAMP    ENTER DSA=YES
         L     R2,=A(VERSION)
         L     R3,=A(LINKDATE)
         PRNTF 'Duchess  V %S  linked %S%L',((R2),(R3)),PLIST=PLIST
         SCALL BINTIME
         ST    R0,TIME
         ST    R1,DOUB
         UNPK  TMPSTR+2+1(5),DOUB+1(3)
         MVC   TMPSTR+2(2),TMPSTR+2+1
         MVI   TMPSTR+2+2,C'.'
         LA    R2,6
         STH   R2,TMPSTR
         PRNTF 'Date %S  Time %T%L',(TMPSTR,TIME),PLIST=PLIST
         B     RET0
         EJECT
         USING *,R15              NOTE BASE REGISTER USAGE.
         USING POSDB,R1
SWAPSIDE MVI   ENPASS,X'00'       ZAP EN PASSENT STATUS.
         XI    COLOR,X'01'        SWAP COLOR.
         L     R15,=V(HINIT)      INITIALISE HISTORY TO THIS POINT.
         BR    R15                RETURN THRU HISTORY.
         DROP  R1
         EJECT
MOVES    ENTER DSA=YES
         LR    R11,R1
         LA    R2,MLIST
         STM   R1,R2,PLIST
*
* DEFAULTS
*
         L     R10,=A(MVGEN)
         ZERO  R9                 DO NOT SORT
         LA    R8,1               TRIM OFF ILLEGAL MOVES
*
         LOOP
         GCHR
         TST   R15
         BREAK NZ
         STC   R1,TMPSTR
         CLI   TMPSTR,C'C'
         IF    E
         L     R10,=A(CAPGEN)
         ENDIF
         CLI   TMPSTR,C'S'
         IF    E
         LA    R9,1               SORT MOVES
         ENDIF
         CLI   TMPSTR,C'A'
         IF    E
         ZERO  R8                 DO NOT TRIM OFF ILLEGAL MOVES
         ENDIF
         ENDLOOP
*
*
         LA    R4,BK-WK(R11)
         CLI   COLOR-WK(R11),X'00'
         IF    NE
         LA    R4,WK-WK(R11)
         ENDIF
         LB    R2,W-WK(R4)
         LA    R1,PLIST
         LR    R15,R10
         BALR  R14,R15
* SORT MOVES?
         TST   R9
         IF    NZ
         ST    R1,PLIST+8
         LA    R1,PLIST
         SCALL MOVESORT
         L     R1,PLIST+8
         ENDIF
* ELIDE ILLEGAL MOVES?
         TST   R8
         IF    NZ
         ST    R1,PLIST+8
         LA    R1,PLIST
         SCALL LMVTRIM
         ENDIF
*
         LA    R2,MLIST
         LR    R3,R1
         LA    R5,MOVE
         ST    R5,PLIST+4
         LA    R4,TMPSTR
         ST    R4,PLIST+8
         LA    R4,MPL
         CR    R2,R3
         WHILE L
         LH    R5,0(R2)
         STH   R5,MOVE
         LA    R1,PLIST
         SCALL MOVECHAR
         PRNTF '%S ',(TMPSTR),PLIST=PLIST+12
         S     R4,=F'1'
         IF    NH
         PRNTF '%L'
         LA    R4,MPL
         ENDIF
         LA    R2,2(R2)
         CR    R2,R3
         ENDWHILE
         PRNTF '%L'
         B     RET0
         EJECT
EVALUATE ENTER DSA=YES
         SCALL BDEV
         L     R10,=V(BDEVTRMS)   GET THE BDEV TERMS.
         ST    R1,VALU            SAVE THE VALUE.
         LA    R3,3               GET THE # OF COLUMNS OF OUTPUT.
         REPEAT
         L     R2,0(R10)          GET A(DESCRIPTOR STRING).
         L     R5,8(R10)          GET THE WEIGHT OF THE TERM.
         M     R4,4(R10)          MULTIPLY BY THE VALUE OF TH E TERM.
         CLI   COLOR,X'00'        WHITE?
         IF    NZ
         NEG   R5
         ENDIF
         ST    R5,WEIGHT
         PRNTF '%15S%5F',((R2),WEIGHT),PLIST=PLIST
         BCTR  R3,R0
         TST   R3                 ZERO YET?
         IF    NH
         PRNTF '%L'
         LA    R3,3               RECOVER # OF COLUMNS.
         ENDIF
         LA    R10,12(R10)        GET TO NEXT ENTRY.
         L     R9,8(R10)          GET THE WEIGHT.
         TST   R9                 DONE?
         UNTIL Z
         PRNTF '%Lvalue %F%L',(VALU),PLIST=PLIST
         B     RET0
         EJECT
*
*  PRINT BOARD, OR SET SWITCH
*
CMBOARD  ENTER
         LR    R11,R1
         SCALL SWITCH
         TST   R15
         IF    Z
         L     R2,=V(BOARDSW)
         STC   R1,0(R2)
         ELSE
         LR    R1,R11
         SCALL BOARD
         ENDIF
         B     RET0
         EJECT
*
*  PRINT PREDICTION, OR SET SWITCH
*
CMPRED   ENTER
         SCALL SWITCH
         TST   R15
         IF    Z
         L     R2,=V(PREDSW)
         STC   R1,0(R2)
         ELSE
         LA    R0,6
         L     R1,=V(CBOARD)
         L     R2,=V(PVARTBL)
         SCALL PREDICT
         ENDIF
         B     RET0
         EJECT
*
* SET ANTICIPATION SWITCH
*
CMANT    ENTER
         L     R1,=V(ANT)
         SCALL SWSET
         B     RET0
         SPACE 5
*
* SET ASYNCHRONOUS SEARCH
*
CMASYN   ENTER
         L     R1,=V(ASYNCH)
         SCALL SWSET
         B     RET0
         EJECT
*
* RESET POSITION TABLE.  OPTIONAL ARG IS TTABLEN
*
TTRESET  ENTER DSA=YES
         NUMBR
         TST   R15
         IF    Z
         LR    R3,R1              PROTECT FROM PRNTF
         L     R2,=V(TTABLEN)
         PRNTF 'Old ttablen %F%L',((R2)),PLIST=PLIST
         ST    R3,0(R2)
         ENDIF
         SCALL TTCLEAR
         B     RET0
         EJECT
*
*  PRINT GAME CONTINUATION
*  R0 = FILE OPTION WORD
*  R1 -> POSDB
*  R2 -> VARIATION
*
PREDICT  ENTER DSA=YES
         LR    R9,R0
         LR    R10,R2
         MVDB  POSDB,0(R1)
         LA    R11,POSDB
         LA    R0,XVISIT
         SCALL TTCFLAGS
         LA    R4,MPL
         LH    R2,0(R10)
         TST   R2
         WHILE NZ
         LR    R1,R11
         SCALL NLOOK
         TST   R15
         IF    Z
         USING NODE,R1
         OI    XFLAGS,XVISIT
         DROP  R1
         ENDIF
         S     R4,=F'1'
         IF    M
         PRNTF '%L',FO=(R9)
         LA    R4,MPL-1
         ENDIF
         LR    R1,R11
         LR    R2,R10
         LA    R3,TMPSTR
         STM   R1,R3,PLIST
         LA    R1,PLIST
         SCALL MOVECHAR
         PRNTF '%S ',(TMPSTR),FO=(R9),PLIST=PLIST
         LH    R0,0(R10)
         LR    R1,R11
         SCALL MVEX
         LA    R10,2(R10)
         LH    R2,0(R10)
         TST   R2
         ENDWHILE
         DO    R7,20
         LR    R1,R11
         SCALL NLOOK
         TST   R15
         BREAK NZ
         LR    R8,R1
         USING NODE,R8
         TM    XFLAGS,XVISIT
         IF    NZ
         PRNTF '...',FO=(R9)
         BREAK ,2
         ENDIF
         OI    XFLAGS,XVISIT
         LH    R0,XMOVE
         TST   R0
         BREAK Z
         S     R4,=F'1'
         IF    M
         PRNTF '%L',FO=(R9)
         LA    R4,MPL-1
         ENDIF
         C     R7,=F'20'
         IF    E
         PRNTF '-- ',FO=(R9)
         ENDIF
         LR    R1,R11
         LA    R2,XMOVE
         LA    R3,TMPSTR
         STM   R1,R3,PLIST
         LA    R1,PLIST
         SCALL MOVECHAR
         PRNTF '%S ',(TMPSTR),FO=(R9),PLIST=PLIST
         LH    R0,XMOVE
         LR    R1,R11
         SCALL MVEX
         ENDDO
         PRNTF '%L',FO=(R9)
RET0     ZERO  R15
RET      EXIT  RC=(R15)
         EJECT
MPL      EQU   12                 MOVES PRINTED PER LINE
         DSA
POSDB    POSDB
PLIST    DS    8F
DOUB     DS    D
TIME     DS    F
MOVE     DS    F
RC       DS    F
TMPSTR   DS    H
         DS    CL32
MLIST    DS    256H
VALU     DS    F
WEIGHT   DS    F
         ENDDSA
NODE     DSECT
         NODE  X
INF      EQU   32000
         REGS
         END
