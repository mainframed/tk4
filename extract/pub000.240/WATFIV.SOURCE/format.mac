FRMT     TITLE     'FORMAT     FORMAT STATEMENT PROCESSOR'
         COPY      OPTIONS
         PRINT     OFF
         $PUNCH    FORMAT                                          DVS2
FORMAT   CSECT
         COPY      CDEFN
STARTA DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
&DECK    SETC      'FORMAT'
         COPY      EXTRN
         PRINT     ON
         ENTRY     FORMAT
         ENTRY     FORMATEX
         SPACE     1                                               V1L4
FMTSTACK DSECT
FMTGCNT  DS        X                   GROUP COUNT
FMTW     DS        X                   FIELD WIDTH
FMTD     DS        X                   NO. OF DECIMALS
FMTCD    DS        X                   CODE
         ORG       FMTGCNT
FMTFCNT  DS        H                   FIELD COUNT
         DS        H
FCHAR    DSECT
FCERR    EQU       X'0C'
FCHOLL   EQU       X'34'
FCX      EQU       X'30'
FCP      EQU       X'10'
FCSLASH  EQU       X'3C'
FCEND    EQU       X'44'
         SPACE 3   1                                               V1L4
FORMAT   CSECT                         COMPILE TIME ENTRY
         PRINT     GEN
         CENT      FSAVER              FOR FORMAT STATEMENTS
**********************************************************************
*        COMPILE TIME ENTRY
*        INPUT LIST IN STACK
*        OUTPUT LIST IN OBJECT CODE
**********************************************************************
         BAL       R14,CBALR11         OUTPUT A BALR               V1L2
         ST        R5,CBAR11           BEFORE BRANCH AROUND        V1L2
         LA        R3,12(,R5)
         CR        R3,R6               IS OBJECT CODE FULL
         BNL       CRET                YES SO RETURN TO SCAN
         LR        R7,R5
         OUTPUT    4,FBRANCH           OUTPUT BRANCH AROUND
         LA        R4,3(,R5)           SET OUTPUT PTR TO A
         LR        R5,R7               FULL WORD BOUNDARY
         N         R4,KM0029           AND SAVE IT
         ST        R4,XIOSAVE          SAVE FOR LATER
         OC        CSTNOLK(4),CSTNOLK  IS STATEMENT NUMBERED?      V1L2
         BNZ       FNUMBRD             BRANCH IF YES               V1L2
         $ERROR    (WARN,FM,1),FONE2                               V1L5
FNUMBRD  ST        R4,CSAVENOX                                     V1L2
FONE2    LR        R1,R9               ADDR OF STACK(FORMAT LIST)
         L         R3,FADFORM          OFF TO FORSCAN
         BALR      R14,R3                                          V1L4
         B         FONE1               ERROR RETURN
         TRT       1(256,R1),FTRAN
         CH        R2,=X'001B'         ANYTHING AFTER ')'
         BE        FONE3               NO
         $ERROR    (WARN,FT,F),FONE3                               V1L5
FONE1    L         R3,XIOSAVE          ERROR SO POINT TO BEGINNING
         MVI       7(R3),FCERR         OF OUTPUT LIST AND SET ERROR
         MVC       CSAVENOX(4),XAXBOOT SET FOR RUN=FREE            V1L2
FONE44   LA        R4,3(,R4)
         N         R4,FKM0029
         LA        R4,4(R4)            CODE
FONE3    LR        R3,R4               R4 PTS TO END OF CODE OUTPUTED
         S         R3,CBAR11           CALC DISP
         STH       R3,ZR5+2(RO)        AND STORE IN BRANCH AROUND
         AIF       ('&SNAPS' EQ 'OMIT').FCS1                       V1L2
         LR        R2,R4
         SR        R2,R5
         CSNAP     FORMOUT,0(R5),4(R2)
.FCS1    ANOP
         LR        R5,R4               UPDATE  OBJ CODE PTR
         B         CRET                RETURN
         $FREE     R13                                             V1L5
         $FREE     R11                                             V1L5
         $FREE     R14                                             V1L5
         EJECT
**********************************************************************
*        EXECUTION TIME ENTRY
*       INPUT LIST IN USER'S ARRAY
*       OUTPUT LIST IN OBJECT AREA IF ANY ROOM LEFT
**********************************************************************
FORMATEX STM       R14,R12,12(R13)
         USING     FORMATEX,R9
*        SET UP NECESSARY BASE REGISTER AND SAVE AREA
         LR        R15,R13
         LA        R13,FSAVER
         ST        R13,8(,R15)                                     V1L4
         ST        R15,4(,R13)                                     V1L4
         USING     FSAVER,R13
*        REG 4  IS ZERO IF I KNOW LENGTH AND POSITION OF ARRAY
         B         *+4(R4)
         B         FORMEX
         L         R3,ZR14+XNOFORM                                 V1L4
         BAL       R1,X1STELT         OFF TO GET ADDR
*        R3 CONTAINS ADDR OF THE FIRST BYTE OF ARRAY
*        R2 CONTAINS LENGHT IN BYTES
FORMEX   OFFSET    LR,R1,R3
         LR        R10,R1
         AR        R10,R2
         BCTR      R10,R0              ADDR OF LAST BYTE
         USING     FCHAR,R10
         MVC       FMTCHAR(1),FCHAR    SAVE LAST BYTE
         IF        (FCHAR,EQ,C')'),FGOTPAR    EBC BRACKET?
         IF        (FCHAR,EQ,X'4C'),FGOTPAR    BCD  BRACKET?
         MVI       FCHAR,ALLON         INSERT SPECIAL CHARACTER
         B         FGOTPAR1
FGOTPAR  MVI        FCHAR,X'FE'        INSERT VERY SPECIAL CHAR
HOL05R2  EQU        HOL5R2
         $FREE     R10                                             V1L5
         USING      FCHAR,R1
FGOTPAR1 L         R4,XENDDATA         ADDR FOR OUTPUT LIST
         L         R6,XENDOBJ          END OF AVAILABLE SPACE
*        DECREASE BY 16 BYTES FOR SAFETY JUST IN CASE
         S         R6,FKF16                                        V1L2
         TRT       FCHAR(256),FTRAN    GET FIRST NON-BLANK CHAR
         IF        (FCHAR,EQ,C'('),FMT1 IS 1ST CHAR A LT PAREN
         IF        (FCHAR,EQ,X'6C'),FMT1 BCD (
         LR        R2,R1
         $ERROR    (NOAC,FT,0,,HOL1R2),FERRBCK                     V1L5
FMT1     L         R3,FADFORM          OFF TO FORSCAN              V1L5
         BALR      R14,R3                                          V1L4
         B         FERRBCK             ERROR RETURN
         AIF       ('&SNAPS' EQ 'OMIT').FCS2                       V1L2
*        START OF DEBUG CODING
         L         R4,XENDDATA
         CSNAP     FMTOUT,0(R4),100
*        END OF DEBUG CODEIN
.FCS2    ANOP                                                      V1L2
         MVC       0(1,R10),FMTCHAR    RESTORE LAST CHAR
         L         R13,FSAVER+4        RESTORE SAVE REG            V1L4
         LM        R14,R12,12(R13)     AND ALL OTHER REG'S
         BR        R1                  AND RETURN
FBRANCH  ROMIT     *-*
         $FREE     R1                                              V1L5
         $FREE     R9                                              V1L5
         $FREE     R13                                             V1L5
         EJECT
FSAVER   DS        18F                 SAVE AREA
ALLON    EQU       X'FF'
FSWOFF   EQU       X'00'
FSWNUMB  EQU       X'01'
FSWCOMMA EQU       X'02'
FSWOK    EQU       X'04'
FSWCONST EQU       X'08'
FADFORM  DC        A(FORSCAN)                                      V1L4
         USING     FMTSTACK,R4
         USING     FSAVER,R13
         USING     FCHAR,R1
FERRBCK  L         R13,FSAVER+4        RESTORE SAVE REG            V1L4
         LM        14,12,12(13)        AND REST OF REG'S
         B         XTRACEBK            OFF TO TRACE BACK ROUTINE
         EJECT
**********************************************************************
*        INPUT LIST POINTED BY REGISTER 1
*        OUTPUT LIST POINTED TO BY REGISTER 4
**********************************************************************
FORSCAN  MVI       FBCNT+1,X'04'       SET UP BRACKET COUNT
         MVI       FSCOMMA,ON          NO COMMA REQ'D YET          V1L4
         ST        R4,FSAVE1           SAVE FOR BRACK BACK PTR     V1L4
         SR        R2,R2               SET UP AS CHAR REG
         L         R8,=X'01000004'     INIT ENTRY                  V1L4
         LA        R3,4(,R4)           CHECK IF THERE'S STILL ROOM
         CR        R3,R6
         BNL       FOVFLOW             NO MORE ROOM
         ST        R8,FMTSTACK         STORE AWAY INIT ENTRY
         MVI       FSW,FSWOFF          INIT SWITCH
FRET     LA        R1,1(,R1)           BUMP FOR NEXT CHAR
FRET1    LA        R4,4(,R4)           FOR NEXT ENTRY
FRET2    ST        R8,FMTSTACK         INIT NEXT ENTRY IN LIST
FTRT     TRT       FCHAR(256),FTRAN
         IF        (FSCOMMA,ON),FNEXT  BYPASS CHECK IF COMMA SW ON V1L4
         MVI       FSCOMMA,ON          COMMA REQ'D NEXT TIME       V1L4
         IF        (FCHAR,EQ,C','),FNEXT   HE READ THE NEW RULES   V1L4
         IF        (FCHAR,EQ,C'/'),FNEXT   SLASH IS LEGAL ALSO     V1L4
         IF        (FCHAR,EQ,C')'),FNEXT   DON'T FORGET GROUP FRMT V1L4
         IF        (FCHAR,EQ,C'('),FNEXT   (RIGHT & LEFT BRACKETS) V1L4
         IF        (FCHAR,EQ,X'6C'),FNEXT   LAST BUT NOT LEAST     V1L4
         IF        (FCHAR,NE,X'4C'),FBAH    ALL KP=26 USERS        V1L4
FNEXT    LA        R3,8(,R4)           AGAIN IS THERE ROOM
         CR        R3,R6
         BNL       FOVFLOW             NOPE
         SR        R3,R3
         IC        R3,FORMTAB(R2)         SO GET DISP
         B         FORMAX(R3)          AND OFF TO PROCESS CHAR
         EJECT
*********************************************************************
*       NOTE IF INSERTING CODE
*        DISTANCE FROM FORMAX TO FUNDEF MUST BE LESS THAN 256 BYTES
*********************************************************************
FORMAX   EQU       *
FRTEBC   B         FRTEBCA             EBC RIGHT )
FLTEBC   B         FLTEBCA             EBC LEFT (
FRTBCD   B         FRTEBCA             BCD RIGHT (
FLTBCD   B         FLTEBCA             BCD LEFT )
FQUTEBC  B         FQUOTEA             EBC QUOTE
FHOLL1   B         FHOLL1A             AN 'H' HOLLERITH
FQUTBCD  B         FQUOTEA             A BCD QUOTE
FNUM     B         FNUMA               A DIGIT
         EJECT
*        PROCESS THE CHARACTER PERIOD
         SPACE     2
FDOT     LR        R2,R1
         BCTR      R2,R0
         $ERROR    (NOAC,FT,A,,HOL05R2),DONE                       V1L5
         SPACE     2
FMINUS   LA        R1,1(,R1)           SO PT TO NEXT CHAR
         BAL       R15,FCOLL           OFF TO GET THE NUMBER
         IF       (FCHAR,NE,C'P'),FMIN1
         IF       (FSW,ON,FSWCONST),FMIN1 DID WE GET A CONST
         LNR       R0,R0               SET IT NEGATIVE
         B         FP1                 OFF TO 'P' ROUTINE
         SPACE     2
FMIN1    LR        R2,R1
         BCTR      R2,R0
         $ERROR    (NOAC,FT,9,,HOL05R2),DONE                       V1L5
         SPACE     2
*        PROCESS THE COMMA (IF LAST CHAR A COMMA THEN AN ERROR)
FCOMMA   IF       (FSW,OFF,FSWNUMB+FSWCOMMA),FCOM1
         LR       R2,R1
         BCTR     R2,R0
         $ERROR    (NOAC,FT,7,,HOL05R2),DONE                       V1L5
FCOM1    OI        FSW,FSWCOMMA        TURN ON COMMA SW
         LA        R1,1(,R1)           POINT TO NEXT CHAR
         B         FTRT                AND GO TO GET IT
         SPACE     2
*        PROCESS CHAR 'P' (DID A NO. PRECEDE -- IF NO THEN ERROR)
FPALIGN  IF       (FSW,NON,FSWNUMB),FMIN1  DID A NO. PRECEDE
FP1      MVI       FMTCD,FCP           SET CODE FOR P
         STH       R0,FMTFCNT          STORE FIELD COUNT
         NI        FSW,FSWOK           LEAVE HOLL AS IS
         B         FRET
         SPACE     2
*        PROCESS THE CHAR 'X'  (HAVE WE GOT A NO.)
FSPACE   IF       (FSW,NON,FSWNUMB),FERR3
FSP1     MVI       FMTCD,FCX           SET CODE
         MVI       FSCOMMA,OFF         INDICATE COMMA REQUIRED     V1L4
         B         FSL2
         SPACE     2
*        PROCESS CHAR '/'
FSLASH   IF       (FSW,ON,FSWNUMB),FERR3
FSL1     MVI       FMTCD,FCSLASH       INSERT CODE
FSL2     NI        FSW,FSWOK
         B         FRET
         SPACE     2
*        END OF SPEC LIST
FEND     BCTR      R1,R0               NO CLOSING ) ENCOUNTERED
         $ERROR    (NOAC,FT,E),DONE                                V1L5
         SPACE     2
FERROR   LR        R2,R1
         BCTR      R2,R0
         $ERROR    (NOAC,FT,1,,HOL05R2),DONE                       V1L5
FERR1    EQU       FERROR
FEND1    IF       (FSW,NOFF,FSWCOMMA+FSWNUMB),FERRD
FEND1B   IF       (FBCNT+1,EQ,X'04'),FDONE   LAST RT BRACKET
         $ERROR    (NOAC,FT,5),DONE                                V1L5
FUNDEF   $ERROR    (NOAC,UV,6),DONE                                V1L5
         EJECT
*        PROCESS AN ALPHA CHAR OF VALID FORM (A,D,E,F,ETC)
FALPHA   LR        R7,R2               SAVE TRT CODE
         IF       (FSW,NON,FSWNUMB),FA4  TEST FOR FIELD COUNT
FA1      LTR       R0,R0               IS IT ZERO
         BNP       FERR3               YES
FA2      STC       R0,FMTGCNT          STORE IT AS A GROUP COUNT
FA4      IC        R3,FORMCONS-12(R2)  GET CODE
         STC       R3,FMTCD            AND STORE IT IN OUTPUT LIST
         BAL       R9,FGETWD           OFF TO GET NUMBER FOLLOWING
         B         FALF1               W.D RETURN
         CH        R7,FKF14            W RETURN  IS IT VALID
         BH        FA3                 YES
FERR2    LR        R2,R1               YES
         BCTR      R2,R0
         $ERROR    (NOAC,FT,2,,HOL05R2),DONE                       V1L5
FALF1    C         R7,FKF16            IS IT A VALID FORM
         BNL       FERR2               NO SO AN ERROR
FA3      MVI       FSW,FSWOFF          OFF ALL SWITCHES
         IF        (FCHAR,EQ,X'FE'),FRET1  CHECK FOR )             V1L5
         MVI       FSCOMMA,OFF         INDICATE COMMA REQUIRED     V1L4
         B         FRET1               RETURN
         EJECT
*        PROCESS A DIGIT (GET WHOLE NO. , AND STORE AS A FIELD COUNT)
FNUMA    BAL       R15,FCOLL           OFF TO GET THE NUMBER
         OI        FSW,FSWNUMB         SET ON NUMB SW
         STH       R0,FMTFCNT          STORE AS A FILED COUNT
         B         FNEXT               RETURN FOR NEXT SPEC
         EJECT
*        PROCESS A RIGHT BRACKET
FRTEBCA  IF        (FSW,NOFF,FSWCOMMA+FSWNUMB),FERRD
FRT1     LH        R3,FBCNT        DECREASE BRACKET COUNT
         S         R3,KF4
         STH       R3,FBCNT            DECREASE BRACK COUNT
         BCTR      R4,R0               DECREASE PTR TO CHECK LAST CH
         BCTR      R4,0                POINT BACK SOME MORE        V1L1
         CLC       0(2,R4),=X'0050'    LAST CHAR 3RD LEVEL '('     V1L1
         BE        FERRD               NO                          V1L1
         CLC       0(2,R4),=X'0008'    LAST CHAR 2ND LEVEL '('     V1L1
         BE        FERRD               NO                          V1L1
         CLC       0(2,R4),=X'0004'    LAST CHAR 1ST LEVEL '('     V1L1
         BE        FERRD               NO                          V1L1
         LA        R4,2(R4)            RESET REGISTER 4            V1L1
         LTR       R3,R3
         BZ        FDONE               IF ZERO SHOULD BE END
         LR        R7,R4
         S         R7,KF4
         S         R7,FSAVE1-4(R3)     SAVE FOR BACK PTR
         STH       R7,FMTFCNT          SAVE FIELD COUNT
         IC        R3,FRT-4(R3)        GET CODE
         STC       R3,FMTCD
         MVI       FSW,FSWOFF          OFF ALL SWITCHES
         B         FRET
         $FREE     R4                                              V1L5
         USING     FMTSTACK,R7
FDONE    LR        R3,R4               END OF FORMAT STATEMENT
         L         R7,FSAVE1           PAREN PTR                   V1L4
         SR        R8,R8
         CH        R8,FMTFCNT          WAS THERE A GROUP COUNT?
         BNE       *+8                 IF NO --BRANCH
         S         R3,KF4              COMPENSATE
         SR        R3,R7
         $FREE     R7                                              V1L5
         USING     FMTSTACK,R4
         STH       R3,FMTFCNT          SAVE BACK PTR
         MVI       FMTCD,FCEND         END OF LIST CODE
         LA        R4,4(,R4)
         B         4(,R14)
         EJECT
         DC        0H'0'
FLTEBCA  EQU       *
FLT1     LH        R3,FBCNT
         LA        R3,4(,R3)           BUMP PAREN COUNT
         STH       R3,FBCNT
         EX        R0,FLT2-8(R3)
         IC        R3,FLT-8(R3)
         STC       R3,FMTCD
         IF       (FMTW,EQ,NIL),FLT3
         MVC       FMTGCNT(1),FMTW
FLT3     OI        FSW,FSWCOMMA        TURN ON COMMA INVALID
         NI        FSW,FSWCOMMA+FSWOK  LEAVE HOLL OFF NUMBER
         B         FRET
FLT2     ST        R4,FSAVE1                                       V1L4
         ST        R4,FSAVE2                                       V1L4
         B         *+4
         $ERROR    (NOAC,FT,B),DONE                                V1L5
FHOLL1A  ST        R1,FSTORE
         IF        (FSW,OFF,FSWNUMB),FQERR
         LA        R1,1(,R1)
         LR        R3,R0
         BCTR      R3,0
         STH       R3,FMTFCNT
         MVI       FMTCD,FCHOLL
         LR        R7,R4
         IF        (XEXECSW,NON,X'80'),*+8
         LA        R4,4(,R4)
         LA        R4,4(,R4)
         LA        R15,START(R4)
         LR        R2,R3
         AR        R2,R4
         CR        R2,R6
         BNL       FOVFLOW
         EX        R3,FHMOVE
         AR        R4,R0
         AR        R1,R3
         MVI       FSW,FSWOK
         LR        R3,R7
         B         FQHDONE
FQUOTEA  ST        R1,FSTORE
         CLC       0(1,R1),XQUOTCON
         BE        FQUTOK
         $ERROR    (NOAC,FT,G),DONE    WRONG TYPE OF QUOTE         V1L5
FQUTOK   IF       (FSW,ON,FSWNUMB),FERR3
          MVI      FMTCD,FCHOLL
         LR        R3,R4
         IF       (XEXECSW,NON,X'80'),*+8
         LA        R4,4(,R4)
         LA        R4,4(,R4)
         SR        R0,R0
FQLOOP   LA        R1,1(,R1)
         IF        (FCHAR,NON,ALLON),FQT1
         $ERROR    (NOAC,FT,6),DONE                                V1L5
FQT1     CLC       FCHAR(1),XQUOTCON
         BE        FQUO
FINSERT  IC        R2,FCHAR
         STC       R2,FMTGCNT
         CR        R4,R6
         BNL       FOVFLOW
         LA        R4,1(R4)
         A         R0,KF1
         B         FQLOOP
FQUO     CLC       FCHAR+1(1),XQUOTCON
         BNE       FQDONE
FQUO1    LA        R1,1(,R1)
         B         FINSERT
         $FREE     R4                                              V1L5
         USING     FMTSTACK,R3
FQDONE   LR        R2,R0
         C         R2,FKF256           MORE THAN 255 CHARS IN HOLL V1L2
         BNL     FTOOBIG
         BCTR      R2,0
         STH       R2,FMTFCNT
FQHDONE  IF        (XEXECSW,OFF),FQUO2
         L         R2,FSTORE
         LA        R2,1(,R2)
         ST        R2,FMTSTACK+4
         MVI       FMTD,X'01'
         $FREE     R3                                              V1L5
         USING     FMTSTACK,R4
FQUO2    SR        R2,R2
         LTR       R0,R0
         BZ        FQERR
         MVC       0(3,R4),=X'FFFFFF'
SQH1     LA        R4,3(,R4)
         N         R4,FKM0029
         LA        R1,1(,R1)
         NI        FSW,FSWOK
         MVI       FSCOMMA,OFF         INDICATE COMMA REQUIRED     V1L4
         B         FRET2
FQERR    $ERROR    (NOAC,FT,D),DONE                                V1L5
FTOOBIG  $ERROR  (NOAC,FT,H),DONE                                  V1L5
         EJECT
FCOLL    EQU       *
         OI        FSW,FSWCONST
         SR        R0,R0
FCTRT    TRT       0(256,R1),FTRAN
         BC        8,FERR2             ALL TARGET BYTES 0?YES=>ERR V1L1
         IC        R3,0(,R1)
         CLI       FCHAR,X'F0'
         BL        FG5
         IF       (FCHAR,EQ,X'FE'),FG5
         N         R3,FKF15
         C         R3,FKF9
         BH        FEND
         SLL       R0,4
         AR        R0,R3
         LA        R1,1(,R1)
         NI        FSW,X'07'
         B         FCTRT
FG5      SLL       R0,4
         O         R0,FKF12
         ST        R0,FCON1+4                                      V1L4
         CVB       R0,FCON1
         C         R0,FKF256
         BLR       R15
         LR        R2,R1
         S         R2,KF3
         $ERROR    (NOAC,FT,4,,HOL05R2),DONE                       V1L5
         EJECT
FGETWD   LA        R1,1(,R1)
         BAL       R15,FCOLL
         STC       R0,FMTW
         LTR       R0,R0
         BNP       FERR2
FG2      IF        (FCHAR,NE,C'.'),4(,R9)
         LA        R1,1(,R1)
         BAL       R15,FCOLL
         LTR       R0,R0
         BM        FERR1
FG3      STC       R0,FMTD
         BR        R9
         EJECT
FOVFLOW  $ERROR    (NOAC,FT,8),DONE                                V1L5
FERR3   LR         R2,R1
        S          R2,KF3
         $ERROR    (NOAC,FT,3,,HOL05R2),DONE                       V1L5
FERRD    LR        R2,R1
         BCTR      R2,R0
         $ERROR    (NOAC,FT,C,,HOL05R2),DONE                       V1L5
FBAH     EQU       *                   WARN IF COMMA OMMITTED      V1L4
         LR        R3,R2               SAVE R2                     V1L4
         LR        R7,R14              AND R14                     V1L4
         LR        R2,R1               PTR TO WHERE COMMA EXPECTED V1L4
         S         R2,KF3              BACK UP 3 & SHOW CHAR ERROR V1L4
         $ERROR    (WARN,FT,I,,HOL05R2) NEW FORMAT SPECIFICATIONS  V1L5
         LR        R2,R3               RESTORE R2 FOR DISP         V1L4
         LR        R14,R7              AND R14 FOR RETURN POINT    V1L4
         B         FNEXT               CONTINUE PROCCESSING FORMAT V1L4
FTRAN    DC        64X'01'
         DC        X'00'               BLANK
         DC        10X'01'
         DC        X'02'               DOT
         DC        X'03'               RT BRACK
         DC        X'04'               LT BRACK
         DC        15X'01'
         DC        X'05'               RT BRACK (BCD)
         DC        2X'01'
         DC        X'06'               MINUS
         DC        X'07'               SLASH
         DC        9X'01'
         DC        X'08'               COMMA
         DC        X'09'               LT BRACK (BCD)
         DC        15X'01'
         DC        X'0A'               QUOTE (BCD)
         DC        X'0B'               QUOTE
         DC        67X'01'                                         V1L2
         DC        X'1001010C0D0E0F1112' ABCDEFGHI
         DC        7X'01'
         DC        X'010113010101150101' JKLMNOPQR
         DC        8X'01'
         DC        X'0116010101170118' STUVWXYZ
         DC        6X'01'
         DC        X'191A1A1A1A1A1A1A1A1A'
         DC        4X'01'
         DC        X'1C'
         DC        X'1B'
         ORG       FTRAN+X'&UNDEF'                                 V1L2
         DC        X'14'               UNDEFINED CHARACTERS        V1L2
         ORG       ,                                               V1L2
         EJECT
FORMTAB  DC        AL1(FORMAX-FORMAX)
         DC        AL1(FERROR-FORMAX)
         DC        AL1(FDOT-FORMAX)
         DC        AL1(FRTEBC-FORMAX)
         DC        AL1(FLTEBC-FORMAX)
         DC        AL1(FRTBCD-FORMAX)
         DC        AL1(FMINUS-FORMAX)
         DC        AL1(FSLASH-FORMAX)
         DC        AL1(FCOMMA-FORMAX)
         DC        AL1(FLTBCD-FORMAX)
         DC        AL1(FQUTBCD-FORMAX)
         DC        AL1(FQUTEBC-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FHOLL1-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FUNDEF-FORMAX)
         DC        AL1(FPALIGN-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FSPACE-FORMAX)
         DC        AL1(FALPHA-FORMAX)
         DC        AL1(FNUM-FORMAX)
         DC        AL1(FNUM-FORMAX)
         DC        AL1(FEND-FORMAX)
         DC        AL1(FEND1-FORMAX)
FCON1    DC        D'0'
FSAVE1   DC        A(*-*)
FSAVE2   DC        A(*-*)
FSAVE14  DC        A(*-*)
FSTORE   DC        A(*-*)
FKF12    EQU       KF12
FKF16    DC        F'16'
FKF9     DC        F'9'
FKF256   DC        F'256'
FKF2     EQU       KF2
FKF10    EQU       KF10
FKF15    EQU       KF15
FKM0029  DC        X'FFFFFFFC'
FBCNT    DC        H'0'
FKF14    EQU       KF14+2
FHMOVE   MVC       0(0,R4),0(R1)
NIL      EQU       X'00'
FLT      DC        X'0800000050'
FRT      DC        X'380000004C'
FORMCONS DC        X'1C1814402800202C0000240048'
FSW      DC        AL1(*-*)
FMTCHAR  DC        AL1(*-*)
FSCOMMA  DC        AL1(*-*)       SW FOR NEW FORMAT SPECIFICATIONS V1L4
         LTORG
         END       FORMAT
