INOU     TITLE     'INOUT     INPUT/OUTPUT STATEMENT PROCESSOR'
         COPY      OPTIONS
         $PUNCH    INOUT                                           DVS2
         PRINT     OFF
&DECK    SETC      'INOUT'
         COPY      EXTRN
         COPY      CDEFN
STARTA   DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
         PRINT     ON
         PRINT     ON,&LIST
         SPACE     2
INOUT    CSECT
         SPACE
         ENTRY     GCONT
         ENTRY     ISTOP,IPAUS
         ENTRY     IBACK,IREWI,IENDF
         AIF       ('&DIRACC' NE 'USE').ICA1
         ENTRY     IDEFI,IFIND
.ICA1    ANOP
         ENTRY     IREAD,IPUNC,IWRIT,IPRIN
         ENTRY     IDATA
         SPACE     2
         EXTRN     ARITH,ARECNO
         EXTRN     DODO,DCSTN2,DOIOEND,DOIOENT
         EXTRN     FRIOSCAN,XSTART10
         SPACE     2
INFLAG   EQU       X'00'               INPUT OPERATION FLAG
IOUTFLAG EQU       X'01'               CODE FOR OUTPUT OPERATOIN
IERR     EQU       X'01'               INDICATES AN ERR= WAS FOUND
IEND     EQU       X'02'               INDICATES AN END= WAS FOUND
IHOLFLAG EQU       X'00'               HOLLERITH OPERATION FLAG
IBINFLAG EQU       X'02'               BINARY OPERATION FLAG
IFRINFLG EQU       X'04'               FREE INPUT OPERATION FLAG
IFRUTFLG EQU       X'05'               FREEOUTPUT OPERATION
INMLIST  EQU       X'06'               NAMELIST  INPUT
IBACKSPC EQU       X'10'               BACKSPACE OPERATION FLAG
IREWIND  EQU       X'11'               REWIND OPERATION FLAG
IENDFILE EQU       X'12'               ENDFILE OPERATION FLAG
IFINDC   EQU       X'20'               BIT  FOR FIND STA.
IDABIT   EQU       X'08'               DIRECT ACCESS BIT
ILITCC   EQU       X'08'               LITERAL CONSTANT IN DATA STATS
IHEXCC   EQU       X'09'               CODE FOR HEX CONSTANTS
SUDOCOMA EQU       X'84'               END-OF-DO (IMPLIED) MARK
QUOTE    EQU       X'09'
IDASWCH  EQU       CDASWCH
         SPACE     2
IREL1    EQU       X'00'
** IREL1 =SET THIS BTYE TO 0,SKIP 4 BYTES
IREL2    EQU       X'B1'
***  IREL2=REPLACE THIS BYTE WITH THE NEXT ONE,REPLACE THE NEXT 3
***      WITH THE ADDRESS OF THING POINTED TO BY BYTES 3-4
IREL3    EQU       X'B3'
***  IREL3= REPLACE THIS BYTE WITH NEXT ONE,REPLACE NEXT 3 WITH
***      ADDRESS CONSTANT POINTED TO
IREL5    EQU       X'B4'
*** IREL5=REPLACE THIS BYTE WITH NEXT ONE,REPLACE NEXT 3 WITH POINTER
*                  TO SAVEAREA FOR THIS PROGRAM SEGMENT
IREL6    EQU       X'B5'
*** IREL6=REPLACE THIS BYTE WITH NEXT ONE,REPLACE NEXT 3 WITH
*                  ADDRESS OF HOLLERITH CONSTANT POINTED TO
IREL7    EQU       X'BC'
*** IREL7=REPLACE THIS BYTE BY NEXT ONE,REPLACE NEXT THREE BY
*                 AL3(XIOERR)   (XIOEND EQU XIOERR)
IREL8    EQU       X'BA'
***  IREL8=REPLACE THIS BYTE BY NEXT ONE,REPLACE NEXT 3 BY ADDRESS OF
*        RUNTIME NAMELIST DICTIONARY POINTED TO.
         TITLE     '*****  CONTINUE STATEMENT PROCESSOR  *****'
         SPACE     2
***********************************************************************
*****    C O N T I N U E                                          *****
***********************************************************************
GCONT    CENT      IOSAVER
         USING     STAK,RS
         IF        (SCODE,NE,PHI),GCONTER1
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,EQ,TERM),CRET
         B         GCONTER2            INVALID DELIMITER
         TITLE     '*****  STOP STATEMENT PROCESSOR  *****'
         SPACE     2
***********************************************************************
*****    S T O P                                                  *****
***********************************************************************
ISTOP    CENT      IOSAVER
         OI        CDOEND,X'01'        STOP CAN'T END DO LOOP
         MVI       CIFGOTSW,X'01'      NEXT STA MUST BE #ED
         USING     STAK,RS
         LA        R8,ISIMPSTP         RETURN FROM IPWSWARN
         IF        (SCODE,NE,PHI),ITRYCON        IS IT 'STOP' ONLY
         $FREE     R11                                             V1L5
         USING     ISIMPSTP,R8
*****    SIMPLE STOP
ISIMPSTP OUTPUT    4,ISTOPJOB
         AH        RS,SLINK
         IF        (SOPTR,EQ,TERM),CRET
         B         ISTPER1             BAD SYNTAX
         SPACE     1
ITRYCON  IF        (SCODE,OFF,CCONS),ISTPER1     ERROR IF NOT CONST
*****    STOP WITH OPERATOR MESSAGE OF FORM 'STOP N'
         L         R2,SOPND            GET THE CONSTANT N
         LA        R0,1(R2,R2)         2*N+1
         B         IPAUSIM4            JOIN PAUSE CODING
         SPACE     1
***********************************************************************
*****     OBJECT CODES                                            *****
ISTOPJOB B         XSTOP               PLAIN OLE STOP
*        CNOP      2,4                 STOP N
*STOPN   L         R15,*-*             L   R15,=V(STOP#)
*        BALR      R14,R15             BALR  R14,R15
*STOPCON DC        AL1(IREL1),AL3(*-*) AL1(0),AL3(2*N+1)
***********************************************************************
         TITLE     '*****  PAUSE STATEMENT PROCESSOR *****'
         SPACE     2
***********************************************************************
*****    P A U S E                                                *****
***********************************************************************
IPAUS    CENT      IOSAVER
         OI        CDOEND,X'01'        PAUSE CANT END    DO-LOOP
         USING     STAK,RS
         L         R0,SOPND            ASSUME THERE'S A CONSTANT N
         SLL       R0,1                GET 2*N
         LA        R8,CRET             RETURN FROM IPWSWARN
         IF        (SCODE,ON,CCONS),IPAUSIM4  TEST FOR NO. AFTER PAUSE
         IF        (SCODE,NE,PHI),IPWSER2        TEST FOR ENDOFSTAT
         AH        RS,SLINK            NEXT LINE OF STACK
         SR        R0,R0               SIMULATE PAUSE0
         IF        (SOPTR,EQ,TERM),IPAUSIMP
         BH        IPWSER1             UNEXPECTED DELIMITER
***   PAUSE WITH HOLLERITH MESSAGE
         L         R15,SOPND           POINTER TO HOL-LIST TO R15
         USING     HLIST,R15
         MVC       IPWSCD+1(1),HLEN+1  PUT LENGTH   IN OBJCD
         MVI       HLEN,X'80'          FLAG THIS HOLCON FOR RELOCATER
         $FREE     R15                                             V1L5
         MVI       IPWSCD,IREL6        SET OBJCD FOR RELOCATER
         S         R15,CSYMBASE
         STH       R15,IPWSCD+2
         L         R0,IPWSCD           SET UP FOR ST INSTRN BELOW
         $FREE     R11                                             V1L5
         SPACE     2
IPAUSIM4 AH        RS,SLINK            STOP COMPILER JOINS UP HERE
IPAUSIMP BALR      R11,0               COMMON TO STOP,PAUSE
         USING     *,R11
*        NEXT INSTRN STORES 2*N OR HOLCON INFO IN OBJCODE
         ST        R0,IPWSCD           CONSTANT TO OBJCODE
         IF        (SOPTR,NE,TERM),IPWSER1
         IF        (XSTOPSW,OFF),IPWSWARN    OPRTOR MESSAGES ALLOWED ?
         LOOKUP    SPCLNAME,NAME=ISTOP#
         USING     VLIST,R15
         MVI       VB1,FUNC+REAL4      MARK AS REAL FUNCTION FOR MLIBR
         $FREE     R15                                             V1L5
         STH       R3,IPAUSE+2         SET ADDRESS IN OBJCODE
         BAL       R14,CNOP24          ALIGN OBJCODE
         OUTPUT    10,IPAUSE
         CRET
         SPACE     1
IPWSWARN $ERROR    (WARN,PS,0)                                     V1L5
         BR        R8
         SPACE
ISTOP#   DC        0F'0',CL6'STOP#'
         SPACE     1
***********************************************************************
*****     OBJECT CODE                                             *****
         CNOP      2,4
IPAUSE   L         R15,*-*                     L  R15,=V(STOP#)
         BALR      R14,R15                     BALR  R14,R15
IPWSCD   DC        AL1(*-*),AL1(*-*),AL2(*-*)  AL1(LENGTH),AL3(HOLCON)
*****   FOR 'PAUSE N' ,USE  DC AL1(0),AL3(2*N) IN PREVIOUS LINE
         SPACE     1
*******  NOTE THAT THIS CODE FOR STOP AND PAUSE DEPENDS ON THE FACT
*******       THAT SCAN ALIGNS HOLCONS ON WORD BOUNDARIES ,I.E. THE
*******       ADDRESS OF A HOLCON IS A MULTIPLE OF 2. THUS THE DC FOR
*******       A STOP IS ODD, FOR A PAUSE, ITS ODD.
***********************************************************************
         TITLE     '*****  REWIND,ENDFILE,BACKSPACE COMPILER  *****'
         SPACE     2
***********************************************************************
*****    B A C K S P A C E                                        *****
***********************************************************************
IBACK    CENT      IOSAVER
         MVI       IOBER1+1,IBACKSPC   SET OBJCODE FOR BACKSPACE
         B         IRWIN
         SPACE     2
***********************************************************************
*****    E N D F I L E                                            *****
***********************************************************************
IENDF    CENT      IOSAVER
         MVI       IOBER1+1,IENDFILE   SET OBJCODE FOR ENDFILE
         B         IRWIN
         SPACE     2
***********************************************************************
*****    R E W I N D                                              *****
***********************************************************************
IREWI    CENT      IOSAVER
         MVI       IOBER1+1,IREWIND    SET OBJCODE FOR REWIND
         SPACE     2
**  IRWIN REALLY DOES THE JOB
*        IRWIN IS COMMON TO BACKSPACE,ENDFILE,REWIND
         SPACE     2
IRWIN    BAL       R11,ICHKUNIT        GO CHECK FOR UNIT
         USING     *,R11
         USING     STAK,RS
         IF        (SOPTR,NE,TERM),IREBER1       CHK FOR ENDOFSTAT
         MVI       IOBER1,IREL7        SET RELOCATER CODE
         BAL       R14,CNOP04          ALIGN OBJCODE
         OUTPUT    8,IOBER             OUTPUT OBJECT CODE
         BAL       R1,INDFIOCS         LOOK UP FIOCS#           BSDEC11
         B         CRET
         SPACE     2
***********************************************************************
*****    OBJECT CODE                                              *****
*        CALCULATION OF UNIT
*IOBER   BAL       R14,XIOINIT
*IOBER1  DC        AL1(IREL2),AL1(*-*),AL2(0)   UNUSED HALFWORD
***********************************************************************
         SPACE     2
         AIF       ('&DIRACC' NE 'USE').IDA1
         TITLE     '*****  DEFINE FILE COMPILER  *****'
         SPACE     2
***********************************************************************
*****    D E F I N E  F I L E                                     *****
***********************************************************************
IDEFI    CENT      IOSAVER
         USING     STAK,RS
         BAL       R1,ILDDIOCS         PUT DIOCS# IN CORE          V1L1
         BAL       R14,CNOP04          ALIGN OBJECT CODE        BSDEC11
         LA        R7,IDFNERR          ERROR RETURN                V1L3
         ST        R5,IDEFPTR          STORE OBJ CODE PTR
         OUTPUT    8,IDEFCOD           PRELIMINARY OBJECT CODE  BSDEC11
         LA        R8,4                R8 CALCULATES DISP FOR B ARND
         BAL       R11,IDEFUNIT        GO AND LOOKUP UNIT NO.
         USING     *,R11
         AH        RS,SLINK            NEXT LINE STACK
         IF        (SOPTR,EQ,TERM),IDEFEND
         IF        (SOPTR,NE,COMMA),IERSX1
IDEFUNIT IF        (SCODE,EQ,PHI),IERDF0  SEARCHING FOR UNIT NO
         IF        (SCODE,OFF,CCONS),IERSX4
         BAL       R1,ICONUNIT         LOOKUP UNIT CONSTANT
         STC       R2,IDUNITVL         STORE UNIT NO. IN OBJ CODE
         AH        RS,SLINK            NEXT LINE IN STACK
         IF        (SOPTR,NE,LBRK),IERSX1
         IF        (SCODE,OFF,CCONS),IERSX4  SEARCHING INT. CONST
         LOOKUP    INTEGER             LOOKUP NO OF RECORDS CONSTANT
         STH       R3,IDNOREC          STORE NUMBER OF RECORDS
         BAL       R1,IDEFSMAL         CHECK IF SIZE OK (>0)       V1L1
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,NE,COMMA),IERSX1
         IF        (SCODE,OFF,CCONS),IERSX4  EXPECTING CONSTANT
         LOOKUP    INTEGER             LOOKUP RECORD LENGTH CONSTANT
         STH       R3,IDRECLGH         STORE PTR TO RECORD LENGTH
         BAL       R1,IDEFBGSM         CHECK IF SIZE OK            V1L1
         AH        RS,SLINK            NEXT LINE IN STACK
*        CHECK FORMAT TYPE
         CLC       SCODE(3),ILCODE
         BE        IDAFMT
         CLC       SCODE(3),IECODE
         BE        IDAFMT
         CLC       SCODE(3),IUCODE
         BNE       IERDF1              INVALID FORMAT SPEC.
IDAFMT   MVC       IDFMTSP(1),SOPND    MOVE FORMAT TYPE INTO OBJ CODE
         AH        RS,SLINK
*        LOOK AT ASSOC VARIABLE
         IF        (SOPTR,NE,COMMA),IERSX1
         IF        (SCODE,NMIX,X'0F'),IERDF2   NOT INT. VAR.
         MVI       IDTYPE,X'00'        NOT COMM OR EQV  INTEGER*4
         LOOKUP    VARIABLE            LOOKUP ASSOCIATED VARIABLE
         USING     VLIST,R15
         OI        VB2,TYPE+USAGE      USE TYPE BIT ON FOR ASSC VARV1L4
         IF        (VB1,EQ,SIMV+INT4),IDEFOK
         IF        (VB1,NE,SIMV+INT2),IERDF2
         OI        IDTYPE,X'01'        INDICATES HALF WORD
IDEFOK   STH       R3,IDASSVAR         STORE PTR TO ASSOC VARIABLE
         IF        (VB2,OFF,B2COM+B2EQV),IDEFSIMP
         OI        IDTYPE,X'02'        INDICATE EQUIV OR COMMON
IDEFSIMP AH        RS,SLINK            NEXT LINE
IDRBRK   IF        (SOPTR,NE,RBRK),IERSX1
         IF        (SCODE,NE,PHI),IERSX0
         LA        R8,12(,R8)          COUNTER FOR BRANCH STA
         OUTPUT    12,IDOBJCOD         OUTPUT OBJ CODE FOR EACH SET OF
         BR        R11                 FILES DEFINED
IDEFEND  IF        (CMOSWTCH,ON),CRET
         LR        R4,R5
         S         R4,KF4
         OI        1(R4),X'80'         LAST ITEM IN LIST
         L         R4,IDEFPTR                                      V1L5
         STH       R8,IDEFCOD1-IDEFCOD+2(R4)  FILL IN B ARND
IDFNEXT  CRET
IDFNERR  L         R5,IDEFPTR          GET OBJ CODE PTR            V1L3
         LA        R1,XBXBOOT          PUT OUT                     V1L3
         OUTPUT    4                   B XBOOT                     V1L3
         B         IDFNEXT                                         V1L3
         SPACE
***********************************************************************
*****    OBJECT CODE FOR DEFINE FILE                              *****
*             NOTE THAT THE'BAL R14,XDEFILE' IS MODIFIED AT EXECUTION
*             TIME TO 'NOPR 0 -- BALR R14,0'
         CNOP      0,4
IDEFCOD  BAL       R14,XDEFILE
IDEFCOD1 B         *-*(R14)            N*12+4(R14) N=NO. LISTS
*        EG OF A LIST BELOW
IDOBJCOD DC        AL1(IREL2)          RELOCATOR CODE
IDUNITVL DC        AL1(*-*)            UNIT VALUE
IDNOREC  DC        AL2(*-*)            NO. OF RECORDS
         DC        AL1(IREL2)          RELOCATOR CODE
IDFMTSP  DC        CL1'*-*'            FORMAT CHAR. - L,E,U
IDRECLGH DC        AL2(*-*)            RECORD LENGTH
         DC        AL1(IREL2)          RELOCATOR CODE
IDTYPE   DC        AL1(*-*)            BITS FOR LAST,HALF,COM/EQUIV
IDASSVAR DC        AL2(*-*)            ASSOCIATED VARIABLE
***********************************************************************
         SPACE
IDEFBGSM NI        SOPND,B'00000111'   GET RID OF DIGIT COUNT      V1L1
         L         R2,SOPND            GET RECORD                  V1L1
         C         R2,KM1631           RECORD LENGTH TOO BIG       V1L2
         BH        IDF3BOOT            YES, SO ISSUE ERROR         V1L1
IDEFSMCK CH        R2,KF0              RECORD SIZE OR LENGTH <= 0 ?V1L1
         BNH       IDF3BOOT            YES,SO ISSUE ERROR          V1L1
         BR        R1                  RETURN TO CALLER            V1L1
IDEFSMAL NI        SOPND,B'00000111'   GET RID OF DIGIT COUNT      V1L1
         L         R2,SOPND            GET RECORD                  V1L1
         B         IDEFSMCK            GO CHECK RECORD SIZE        V1L1
         TITLE     '*****  FIND STATEMENT COMPILER  *****'
         SPACE     2
***********************************************************************
*****    F I N D                                                  *****
***********************************************************************
IFIND    CENT      IOSAVER
         MVI       IENDERRS,X'00'      INITIALIZE SWITCH
         MVI       IOUNIT,IFINDC       MARK AS FIND STA
         MVI       IOBJBIT,X'20'       MARK AS FIND STA
         USING     STAK,RS
         IF        (SCODE,NE,PHI),IFINDER1
         MVI       CADSSW,X'82'        FOR BETTY
         AH        RS,SLINK            NEXT LINE
         B         IFINDENT            SKIP MVI AT IREADENT
         SPACE
.IDA1    ANOP
         TITLE     '*****  READ,PUNCH,PRINT,WRITE STATEMENTS  *****'
         SPACE     2
***********************************************************************
*****    P U N C H                                                *****
***********************************************************************
IPUNC    CENT      IOSAVER
         MVC       IOSTACK+7(1),INSTLPUN  SETUP PUNCH UNIT
         BAL       R1,INDFIOCS         LOOK UP FIOCS#           BSDEC11
         B         ICHKFREE
         SPACE     2
***********************************************************************
*****    P R I N T                                                *****
***********************************************************************
IPRIN    CENT      IOSAVER
         MVC       IOSTACK+7(1),INSTLOUT   SETUP OUTPUT UNIT
**  COMMON TO PRINT,PUNCH
ICHKFREE BALR      R11,0
         USING     *,R11
         USING     STAK,RS
         MVI       IOBJBIT,X'00'
         IF        (SCODE,NE,PHI),IPRINFMT       TEST FOR A FORMAT
         MVI       IOUNIT,IFRUTFLG     SET UP OBJCD FOR FREEOUTPUT
         MVI       CADSSW,X'81'
         LA        R14,IRERR39         A RETURN FROM IFREEIN1
         B         IFREEIN1            GO THERE
IPRINFMT LA        R11,IWRIT1          A RETURN FROM IFIXSTK
         B         IFIXSTK             GO FIX UP STACK
         SPACE     2
***********************************************************************
*****    W R I T E                                                *****
***********************************************************************
IWRIT    CENT      IOSAVER
         USING     STAK,RS
         IF        (SCODE,NE,PHI),IWRITER1
         AH        RS,SLINK            NEXT LINE UNIT NUMBER
**  COMMON TO PRINT,PUNCH,WRITE
IWRIT1   BALR      R11,0
         USING     *,R11
         MVI       CADSSW,X'81'
         MVI       IOUNIT,IOUTFLAG     SET OBJCD FOR OUTPUT
         B         IWRITENT
         $FREE     RS                                              V1L5
         SPACE     2
***********************************************************************
*****    R E A D                                                  *****
***********************************************************************
IREAD    CENT      IOSAVER
         MVC       IOSTACK+7(1),INSTLIN  SET UP INPUT UNIT
         MVI       IENDERRS,X'00'      INITIALIZE SWITCH
         MVI       CADSSW,X'82'        FOR BETTY
         LA        R14,IREADENT        SET RETURN IN R14
         USING     STAK,R1
         LR        R1,RS
         IF        (SCODE,NE,PHI),IRDFMTN    READ'FMT NO'
         AH        R1,SLINK
         IF        (SOPTR,EQ,COMMA),IRDNOFMT      READ,  FREE READ
         IF        (SOPTR,NE,LBRK),IRERR8     READ(1,100)
         $FREE     R1,R11                                          V1L5
         USING     STAK,RS
         LR        RS,R1
         BR        R14                 GO TO IREAD1
IRDFMTN  LR        R11,R14
         B         IFIXSTK
         SPACE
IRDNOFMT MVI       IOUNIT,IFRINFLG     SET UP OBJCD FOR FREE INPUT
*****     COME HERE FOR FREE I/O
IFREEIN1 BALR      R11,0
         USING     *,R11
         MVI       IOBJBIT,X'00'
         MVC       SCODE(5),IOSTACK+3  PUT FREE UNIT IN STACK
         MVI       SOPTR,LBRK
         $FREE     RS                                              V1L5
         LR        R1,RS               SAVE RS AT UNIT
         USING     STAK,R1
         AH        R1,SLINK            LOOK AHEAD IH STACK FOR ','
         IF        (SOPTR,NE,COMMA),ICOMIN  CHECK FOR ,
         IF        (SCODE,NE,PHI),IFREE2         TEST FOR ',''OP' CASE
         AH        R1,SLINK            LOOK AT NEXT OP
         IF        (SOPTR,EQ,TERM),IRERR8        CANNOT BE END STA
IFREE2   IC        R1,IOUNIT
         MVI       IOEND,IREL7         SET STANDARD END RETURN
         MVI       IOERR,IREL7         SET STANDARD ERR RETURN
         STC       R1,IOUNIT
         LA        R7,IFRJM            ERROR RETURN
         BAL       R1,ICONUNIT         LOOKUP UNIT CONSTANT
         STC       R2,IULA+3           STORE PTR IN LA INSTRUCTION
         OUTPUT    4,IULA              OUTPUT OBJECT CODE
         $FREE     R1                                              V1L5
         USING     STAK,RS
IFRJM    AH        RS,SLINK            BUMP RS TO ,
         B         IFREECD             GO PUT OUT SOME OBJCD
         $FREE     RS                                              V1L5
         USING     STAK,R1
ICOMIN   BR        R14
         $FREE     R1                                              V1L5
         SPACE     3
***  COMPILES I/O SPECIFICATIONS
**   COMMON TO INPUT AND OUTPUT STATEMENTS
         SPACE
IREADENT MVI       IOUNIT,INFLAG       FLAG AS INPUT OPERATION
IWRITENT MVI       IOBJBIT,X'00'
IFINDENT BALR      R11,0
         USING     *,R11
         USING     STAK,RS
         IF        (SOPTR,NE,LBRK),IERRRW0    CHK FOR '('
         MVI       IOFMT+1,X'00'       INITIALIZE
         BAL       R11,ICHKUNIT        GO TRY FOR A UNIT
         USING     *,R11
         MVI       IOEND,IREL7         SET STANDARD END RETURN
         MVI       IOERR,IREL7         SET STANDARD ERR RETURN
         MVI       IENDERRS,X'00'      INITIALIZE SWITCH        PCJAN19
         BAL       R11,IOENDERR        CHECK FOR 'END=' 'ERR='
         USING     *,R11
         B         IRBIN               RETURN FOR ')'  BINARY I/O
         IF        (IOBJBIT,ON,X'20'),IRHOL  FIND STA DONT HAVE FORMATS
*        POSSIBILITIES FOR FORMAT
*        1.   FIND STA DOESNT HAVE ONE
*        2.   CORE TO CORE I/O
*             STA NO,CHAR ARRAY OR ELEMENT,SIMPLE CHAR VARIABLE
*        3.   REGULAR I/O
*             STA NO,ARRAY NAME,NAMELIST
*        4.   DIRECT ACCESS I/O
*             STA NO,ARRAY NAME
*        5.   FREE FORMAT INDICATED BY A '*'
         CLC       STAK(8),=X'0004040000044C00'  CHK FOR '*'
         BE        IFREFMT
         IF        (SCODE,EQ,PHI),IRERR6         CHK FOR POSSIBLE FORMA
         IF        (SCODE,ON,CCONS),IRFMTSTN     CHK FOR STATNO
         IF        (SCODE,NOFF,MNAME),IRERR6     CHK FOR A SYMBOL
         IF        (IOBJBIT,ON,X'80'),ICCFMT  IS IT CORE TO CORE
         SPACE     2
**  PROCESS VARIABLE FORMAT
*        IT SHOULD BE A VARIABLE NAME
         LOOKUP    VARIABLE            LOOKUP THE SYMBOL
         USING     VLIST,R15
         IFNOT     (VB1,VAR),ICHKNML   CHECK FOR A VARIABLE
         IF        (VB1,NZ,B'01110000'),IVARFMT
IFMTERR  $ERROR    (BOOT,IO,1,NAMR15,INVAL),CRET                   V1L5
IVARFMT  OI        VB2,TYPE+USAGE      TURN ON TYPE & USAGE BITS
         OI        IOFMT+1,X'80'       INDICATES VAR FORMAT
         MVI       CVRFMTSW,ON         SET OBJECT TIME FORMAT BIT
         MVI       IOFMT,IREL2         SET RELOCATER CODE FOR VAR FMT
         THEN      (CVRFMTSW,ON)       TURN ON VAR FMT INDICATR
         B         IRFMTOK
         SPACE    1
*        SET BINARY I/O FLAG                                       V1L5
IRBIN    DS        0H                                              V1L5
         OI        IOUNIT,IBINFLAG     INDICATE BINARY I/O         V1L5
         B         IRVFMT                                          V1L5
         SPACE     1                                               V1L5
*        FREE FORMAT INDICATED BY A '*'
IFREFMT  MVI       IOFMT,IREL1         DUMMY CODE FOR RELOCATER
         OI        IOUNIT,IFRINFLG     MARK AS FREE I/O
         AIF       ('&CHARVAR' EQ 'OMIT').IFRE0                    V1L1
         IF        (IOBJBIT,OFF,X'80'),IFREFMT2  C-C I/O ?         V1L1
         OI        IOFLAG,ICCFREE      INDICATE C-C FREE I/O       V1L1
         MVI       IOFMT,IREL7         SET UP FOR C-C I/O          V1L1
IFREFMT2 EQU       *                                               V1L1
.IFRE0   ANOP                                                      V1L1
         AH        RS,SLINK
         B         IRFMTOK8
         SPACE     1
**  PROCESS NAMELIST NAME
ICHKNML  IFNOT     (VB1,NLST),IFMTERR  CHECK FOR NAMELIST NAME
         IF        (IDASWCH,EQ,X'01'),IERIO6 D.A. CANT HAVE NAMELIST
         MVI       IOFMT+1,X'FF'       SET RUNTIME NAMELIST FLAG
         MVI       IOFMT,IREL8         SET RELOCATER CODE FOR NAMELIST
         OI        IOUNIT,INMLIST      NAMELIST
         OI        IOBJBIT,X'08'         INDICATE NAMELIST VAR
         B         IRFMTOK
         SPACE     1
**  PROCESS FORMAT STATEMENT NUMBER
IRFMTSTN LOOKUP    STATNUM,,IROLDNO
         USING     NLIST,R15
         OI        NB1,FORM            IT'S NEW. TURN ON FORMAT BIT
IROLDNO  IF        (NB1,ON,FORM),IROLD1          MAKE SURE ITS A FORMAT
         $ERROR    (BOOT,IO,0,STNR15,INVAL)                        V1L5
IROLD1   MVI       IOFMT,IREL3         SET RELOCATER CODE,FIXED FMT
         OI        NB1,REF                                         V1L2
         $FREE     R15                                             V1L5
IRFMTOK  STH       R3,IOFMT+2          STORE PTR TO FORMAT
*                            THIS APPLIES TO ORDINARY,D.A.,C.C.
         OI        IOBJBIT,X'40'       MARK AS HAVING FORMAT
IRFMTOK8 AH        RS,SLINK            NEXT LINE
         BAL       R11,IOENDERR        CHECK FOR 'END='  'ERR='
         USING     *,R11
         B         IRHOL               RETURN FOR ')'
         B         IRERR7              RETURN FOR INVALID ','
ICCFMT   EQU       *
*        THE FORMAT WAS NOT STA NO AND WAS A NAME
*        LOOKUP ON UNIT INDICATED A CORE TO CORE
*        CORE TO CORE FORMAT
         AIF       ('&CHARVAR' EQ 'OMIT').ICR1
         THEN      (CVRFMTSW,ON)
         OI        IOBJBIT,X'40'+X'10' MARK AS HAVING VAR FORMAT
         OI        IOFMT+1,X'80'       MARK AS VARIABLE FORMAT
         ST        RS,IFORMAT          STORE PTR FOR FORMAT
         MVI       SOPTR,TERM          FOR ARITH
         LA        R7,CRET             ERROR RETURN
         BAL       R8,IMTSTOPS
*        SEARCH FOR NEXT , OR ) AT SAME LEVEL
         IF        (SOPTR,NE,RBRK),IERSX1
*        END=,ERR= CANNOT BE USED IN C-C I/O
         MVI       SOPTR,TERM
.ICR1    ANOP
         AIF       ('&CHARVAR' EQ 'OMIT').IRBI0                    V1L1
IRVFMT   DS        0H                                              V1L5
         BALR      R11,0               SET UP BASE REG             V1L1
         USING     *,R11               BETTER TELL THE ASSEMBLER   V1L1
         IFALL     (IOBJBIT,ON,X'80'),(IOBJBIT,OFF,X'40'),ICV2BOOT V1L1
.IRBI0   ANOP                                                      V1L1
*        THIS IS USED TO PRINT OUT IO-H ERRORS
IRHOL    BAL       R15,IRWSW           GO CHECK FOR ERROR MESSAGE
IFREECD  BAL       R14,CNOP04          ALIGN OBJECT CODE
         BALR      R11,0
         USING     *,R11
         ST        RS,ISTLIST          RS PTS AT END OF UNIT&FORMAT
         IF        (IOBJBIT,ON,X'80'),ICHARCD  IS IT CORE TO CORE
         OUTPUT    12,IOTYPE           OUTPUT OBJECT CODE
         IF        (IOBJBIT,OFF,X'40'),INOFMT  NO FORMAT
         OUTPUT    4,IOFMT             CODE FOR FORMAT IF PRESENT
INOFMT   IF        (IDASWCH,EQ,X'00'),INDAST  RETURN
*        IF DIRECT ACCESS WE NOW COMPILE CODE GIVING RECORD POSITION
         AIF       ('&DIRACC' EQ 'OMIT').IDA2
         L         RS,INDRECP          END OF RECORD POSITION
         MVI       SOPTR,TERM          FOR ARITH
         L         RS,IRECPOS          BEGINNING OF RECORD POSITION
         MVI       SOPTR,TERM          FOR ARITH
         MVC       ICADSSW1+1(1),CADSSW   SAVE CADSSW
         CLINK1    ARECNO
ICADSSW1 MVI       CADSSW,*-*          RESTORE CADSSW
*        COMPUTES REC NO
*        IF 3(RS) = X'00'  ERROR WAS FOUND
*        MUST BE INTEGER EXPRESSION
         OUTPUT    4,IORECNO
         B         INDAST              RETURN
.IDA2    ANOP
ICHARCD  EQU       *
         AIF       ('&CHARVAR' EQ 'OMIT').ICR2
*        CORE TO CORE FORMAT
         OUTPUT    8,IOCTYPE           OUTPUT OBJECT CODE
         IF        (IOBJBIT,ON,X'10'),ICHARF   VAR FORMAT
*        WE HAVE STA NO & CHAR VAR UNIT
         OUTPUT    4,IOFMT
         B         INDAST              RETURN
*        CORE TO CORE WITH VARIABLE FORMAT
ICHARF   MVC       ICADLSA+1(1),CADSSW      SAVE THE VALUE         V1L5
         MVI       CADSSW,X'82'            INDICATE NO EXPRESSIONS V1L5
         L         RS,IFORMAT
         ST        R5,IFORMAT          TEMP STORE PLACE
         OUTPUT    4,IOFMT
         CLINK1    ARITH
ICADLSA  MVI       CADSSW,*-*              RESTORE VALUE           V1L5
*        COMPILE FORMAT IF CHAR VAR
*        3(RS) = X' 00' ERROR FOUND
         IF        (SCODE,EQ,X'00'),INDAST     ERROR EXIT
         IF        (SOPND,NON,CHAR1),IERIO61
         IF        (SOPND,NZ,B'00000110'),IERIO61
         L         R2,IFORMAT
*        SET FLAG ON FORMAT WORD TO INDICATE TYPE OF FORMAT
         MVC       0(1,R2),3(RS)       MOVE IN RELOC CODE
         MVC       2(2,R2),SOPND+2     MOVE IN POINTERS
         IF        (SOPND,Z,X'70'),IABCD  TEST FOR SUBSCRIPTS
         OI        1(R2),X'02'         ARRAY OR ARRAY ELEMENT
IABCD    IF        (SCODE,NEQ,X'A8'),INDAST  TEST ARRAY ELEMENT
         OI        1(R2),X'04'         ARRAY ELEMENT
         OUTPUT    4,IOENDCC
.ICR2    ANOP
         SPACE     2
INDAST   L         RS,ISTLIST
*****    RS  NOW POINTS TO ')'
         IF        (IOBJBIT,NON,X'20'),ILGAH   NOT FIND STA
         LA        R7,CRET             ERROR RETURN
         IF        (SCODE,NE,PHI),IERSX0
         AH        RS,SLINK
*        FIND STA DONT HAVE LISTS
         IF        (SOPTR,NE,TERM),IERSXA   FIND STA WITH LIST
         B         CRET
***      GO COMPILE THE I/O LIST
ILGAH    BAL       R11,IOLISTNT
         USING     *,R11
         B         12(,R8)             STATERM VALID IN I/O STATS
         NOP       0                   '/' INSIDE IMLPIED LOOP IGNORED
         NOP       0                   '/' IGNORED IN I/O STATS
         B         IERXIT              WHAT TO DO FOR ERRORS IN I/OLST
         B         INOINIT             DONT TURN ON INIT BIT IN I/O STA
         SPACE
***  RETURN  HERE
         B         IRETURN
         TITLE     '*****  DATA STATEMENT COMPILER  *****'
         SPACE     2
***********************************************************************
*****    D A T A                                                  *****
***********************************************************************
IDATA    CENT      IOSAVER
         MVI       CADSSW,X'A2'
         CLI       CTYPESW,X'01'       FIND OUT HOW WE GOT HERE
         BL        IFRMSCAN            FROM SCAN FOR DATA STATEMENT
         BE        IFRMNED2            LAST CALL FROM TYPE STATEMENT
IFRMTYPE EQU       *                   FROM TYPE STATEMENT PROCESSOR
****   R3  POINTS TO SYMTAB ENTRY IF FROM TYPE STATEMENT
*****   RS POINTS TO STACK
         CSNAP     NEDLIST,0(R3),16
         CSNAP     NEDSTACK,0(RS),8
         S         RS,KF12
         USING     STAK,RS
         USING     VLIST,R3
         MVC       SOPND(6),VNAME      MOVE NAME INTO STACK
         MVI       SOPND+6,C' '        PUT A BLANK BEHIND IT FOR LOOKUP
         MVC       STAK(4),=X'000C0102'      NOW STACK LOOKS LIKE DATA
         CLI       CTYPESW,X'03'       HAVE WE BEEN HERE BEFORE
         BE        IMORDATA            YES
         MVI       CTYPESW,X'03'       SET SWITCH
         B         IDATAC
         SPACE
IFRMSCAN IF        (SCODE,EQ,PHI),ICHKLP    TEST FOR 'DATA''OP'
         IF        (SCODE,OFF,MNAME),IDATAC TEST FOR A SYMBOL
         B         IDERR1
ICHKLP   LR        R1,RS
         $FREE     RS                                              V1L5
         USING     STAK,R1
         AH        R1,SLINK            BUMP R1 TO CHECK NEXT OP
         IF        (SOPTR,NE,LBRK),IDERR2   IT MUST BE'('
         $FREE     R1,R3                                           V1L5
***   RS  POINTS TO STACK
IDATAC   MVI       ILISTCNT,X'00'      ZERO SUBLIST COUNT
         BAL       R14,CBALR11
         ST        R5,CBAR11
         ST        R5,IBPATCH          SAVE R5 TO PATCH LATER
         OUTPUT    4,IBRAROND          BRANCH AROUND DATA STATEMENT
         MVC       ISVBAR11(4),CBAR11  SAVE LAST SETTING OF R11
         LR        R4,R5               SAVE R4 AT ISN
         AIF       ('&PROFILE' EQ 'OMIT').IPROFA                   V1L5
         MVC       CLIFSW(1),CCNTSW    SAVE CCNTSW                 V1L5
         THEN      (CCNTSW,OFF)        TURN OFF THE COUNT SWITCH   V1L5
.IPROFA  ANOP                                                      V1L5
         BAL       R14,CISN            PUT OUT ISN CODING
         AIF       ('&PROFILE' EQ 'OMIT').IPROFI                   V1L5
         MVC       CCNTSW(1),CLIFSW    RESTORE CCNTSW              V1L5
.IPROFI  ANOP                                                      V1L5
         BAL       R14,CNOP04          ALIGN OBJECT CODE
         L         R3,CENTRYPD         POINTER TP LAST DATA STATEMENT
         IF        (CMOSWTCH,ON),ISTPTR
         ST        R4,ZR3+4            LINK IN THIS DATA STATEMENT
ISTPTR   ST        R5,CENTRYPD
         OUTPUT    12,IDATACD3
         SPACE     2
**  GO COMPILE I/O LIST
IMORDATA BAL       R11,IODATACD
         USING     *,R11
***   THE NEXT 5 INSTRUCTIONS ARE 'EX'ECUTED BY THE I/O LIST COMPILER
         B         IBADEND             STATERM INVALID BEFORE CONLIST
         BZ        12(,R8)             LEVEL-0 '/' IS DELIMITER IN DATA
         USING     STAK,RS
         CLI       SOPTR,SLASH         '/' IS DELIMITER IN DATA STATS
         B         ITUFF               WHAT TO DO FOR I/O LIST ERRORS
         NOP       0                   TURN ON INIT BIT IN DATA STATS
         SPACE
***   RETURN HERE FROM I/O LIST COMPILER
         ST        R5,ISVCNLST         SAVE R5 AT START OF CONLIST
         CSNAP     DATA,0(RS),24
         SPACE     2
***  COMPILE CONSTANT LIST
***   RS POINTS TO LEFT-'/'
         SR        R4,R4               ZERO CONLIST LENGTH COUNT
ICONLOOP LA        R2,1                ASSUME REPLN FACTOER=1
         MVI       ILOOPSW+1,X'00'     ASSUME NO REPLICATION FACTER
         LR        R1,RS               SAVE RS AT STACK
ICONLOP  AH        R1,SLINK            R1 LOOKS AHEAD IN STACK
         IF        (SCODE,NE,PHI),IDCON     CHK FOR CONST
         $FREE     RS                                              V1L5
         USING     STAK,R1
         IF        (SOPTR,EQ,MINUS),ITESTCON
         IF        (SOPTR,EQ,DEC),ITESTCON
         IF        (SOPTR,EQ,LBRK),ITSTCOMP
         IF        (SOPTR,EQ,PLUS),ITESTCON
         IF        (SCODE,NE,CLOGC),IMAYBERR
**       ITS A LOGICAL CONSTANT OF FORM .TRUE. OR .FALSE.
         LR        RS,R1
         $FREE     R1                                              V1L5
         USING     STAK,RS
         CLC       SOPND+2(2),IXFMSP2       CHK FOR .FALSE.
         BE        ITSFALSE
ITSTRUE  MVC       IDATACD2(4),ITRUE
         B         ISETLGLN
ITSFALSE MVC       IDATACD2(4),IFALSE
ISETLGLN MVI       IDATACD1+1,LOG4     SET LENGTH-1 LOR LOG CONSTS
         B         IDATAOUT
         SPACE
**       CONSTANT FOLLOWS '/' , ',' OR '*'
IDCON    IF        (SCODE,ON,CCONS),INUMCON      IS OT NUMERIC
         IF        (SCODE,EQ,CHOLL),ILITCON IS IT LITERAL
         CLC       SOPND(2),=C'T '     TEST FOR LOGICAL CONST
         BE        ITSTRUE
         CLC       SOPND(2),=C'F '     DITTO
         BE        ITSFALSE
         IF        (SOPND,NE,C'Z'),IERRDA1       TEST FOR HEX CONST
         SPACE
**       HEXADECIMAL CONSTANT ,HOPEFULLY
         IF        (SOPND+1,EQ,C' '),IERRDA1     TEST FOR 0-LENGTH HEX
***   FRIOSCAN CLOBBERS R0-R7
         STM       R1,R6,CSAVE16       SAVE R1-R6; CONLOOK WILL RESTORE
         SR        R6,R6               FRIOSCAN NEEDS THIS
         LR        R3,R6
         IC        R3,SCODE            LENGTH OF HEX FIELD IN WORDS
         SLL       R3,2                IN BYTES
         S         R3,KF2              IN BYTES-1
         LA        R1,SOPND+1          START AFTER Z
         LA        R4,0(R3,R1)
         LA        R7,16               FRIOSCAN NEEDS THIS
         L         R5,=A(FRIOSCAN)
         BALR      R5,R5               OFF TO DOYLE
         B         IHEXERR             RETURN FOR AN ERROR
         MVC       CONSTANT(16),ZR4    SETUP FOR CONSTANT LOOKUP
         MVI       CTYPE,IHEXCC        SET UP CONSTANT LOOKUP
         LA        R0,15               LENGTH-1 IN BYTES
         LA        R14,INONCOMP        RETURN FROM LOOKUP
         B         CONLOOK-4           RESTORE R1-R6 & LOOKUP
IHEXERR  LM        R5,R6,CSAVE26+12    RESTORE R5,R6
         $ERROR    (NOAC,CN,4,CHRR1,UNEX),ITUFF   BAD CHAR IS AT R1V1L5
         SPACE
**       LITERAL CONSTANT
ILITCON  L         R3,SOPND            GET HOLLIST PTR FROM STACK
         USING     HLIST,R3
         LH        R0,HLEN             GET LENGTH OF HOLCONST
         MVI       HLEN,X'80'          FLAG FOR RELOCATER TO IGNORE
         LTR       R0,R0               IS LENGTH ZERO ?
         BZ        ITUFF
         STC       R0,IDATACD1+1       STASH LENGTH IN OBJCODE
         S         R3,CSYMBASE
         MVI       IDATACD2+1,ILITCC   LIT CONST FLAG
         MVI       IDATACD2,IREL6      SET RELOCATER CODE
         B         IDATOUT1
         SPACE
**       NUMERIC CONSTANT AND POSSIBLE REPLICATION FACTOR
INUMCON  LA        R14,INONCOMP
ILOOPSW  B         COLCONST            B/NOP SWITCH
         $FREE     RS                                              V1L5
         USING     STAK,R1
         IF        (SOPTR,NE,STAR),COLCONST      CHK FOR REPN FACTER
         $FREE     R1                                              V1L5
         USING     STAK,RS
         NI        SOPND,X'07'         GET RID OF DIGIT COUNT
         L         R2,SOPND            GET THE REPN FACTER
         MVI       ILOOPSW+1,X'F0'     CHANGE SW SETTING
         LR        RS,R1               SET RS TO THE CONSTANT
         LTR       R2,R2               TEST FOR ZERO REPN FACTER
         BZ        IDAZR
         C         R2,KM1631           IS IT .LE. 15 BITS
         BNH       ICONLOP
IDAZR    L         R2,KM1631           ASSUME 32767
         $ERROR    (WARN,DA,0,SYMRS,INVAL),ICONLOP                 V1L5
         SPACE
***      IT SHOULD BE A COMPLEX CONSTANT
ITSTCOMP LA        R14,ICOMPLEX        RETURN FOR COMP CONS
         LR        RS,R1
         B         ITESTCN1
         SPACE
**       IT SHOULD BE INTEGER OR REAL
ITESTCON LA        R14,INONCOMP        RETURN FOR SUCH CONSTANTS
ITESTCN1 LA        R3,IERRDA1          SET ERROR RETURN
         B         CONTEST             GO CHECK
ICOMPLEX CLI       CTYPE,COMP8         WAS '(' START OF COMPLEX CONST.
         BL        IDELDATA            NO,INVALID DELIM '('
INONCOMP MVC       IDATACD1+1(1),CONLNGTH   SET LEN-1 OF CONST IN OBJCD
         MVC       IDATACD2+1(1),CTYPE AND TYPE CODE
         MVI       IDATACD2,IREL2      SET RELOCATER BYTE
IDATOUT1 STH       R3,IDATACD2+2
IDATAOUT STH       R2,IDATACD1+2        SET REPLCN FACTOR
         OUTPUT    8,IDATACD1
         LA        R4,1(,R4)           BUMP LENGTH COUNT
         AH        RS,SLINK
         IF        (SOPTR,EQ,COMMA),ICONLOOP     LOOP FOR ANOTHER CONST
         IF        (SOPTR,NE,SLASH),IDELDATA     IF NOT'/',ERROR
         SPACE
***      END OF CONSTANT LIST
****  RS NOW POINTS TO RIGHT-'/'
         $FREE     R3                                              V1L5
         USING     STAK,RS
INDCNLST L         R3,ISVCNLNK
         L         R2,ISVCNLST         START OF CONLIST TO R2
         SR        R2,R3               LENGTH OF I/O LIST
         IF        (CMOSWTCH,ON),ISTPTRS
         STH       R2,ZR3+2            STASH CONLIST POINTER
         STC       R4,ZR3+1            STASH LENGTH OF CONLIST
ISTPTRS  CLI       CTYPESW,X'02'       ARE WE HERE FROM TYPE STATEMENT
         BNL       INEDOUT1            EXIT WITH R1 AT '/' FOR NED
         IF        (SCODE,NE,PHI),IDER3
         AH        RS,SLINK
         IF        (SOPTR,NE,COMMA),IDTSTEND
IODATACD ST        R5,ISVCNLNK         SAVE LOCN OF CONLIST POINTER
         OUTPUT    4,IDATACD5          PTR TO CONLIST GOES HERE
         IC        R4,ILISTCNT
         LA        R4,1(,R4)           BUMP SUBLIST COUNT
         STC       R4,ILISTCNT
         B         ILISTCMP            OFF TO I/O LIST COMPILER
         SPACE     2
**  EXIT THRU ITUFF FOR CONLIST ERRORS
IERRDA1  EQU       *  NON-CONSTANT IN LIST
         $ERROR    (NOAC,SX,4,SYMRS,INVAL),ITUFF                   V1L5
IDELDATA EQU       * '(' NOT PART OF COMPLEX CONSTANT
*                     NEITHER ',' NOR '/' FOLLOWS CONSTANT IN DATA STAT
IMAYBERR EQU       *  INVALID DELIMITER IN CONSTANT LIST
         $ERROR    (BOOT,SX,1,DELRS,INVAL)                         V1L5
ITUFF    IF        (CMOSWTCH,ON),ITUFF2
         L         R3,CENTRYPD
         CLI       ZR3+16,X'07'        NOP?                        V1L3
         BNE       IDOC                NO                          V1L3
         MVC       ZR3+18(4),IDATTRZ   DOCTOR CODE AFTER NOP       V1L3
         B         ITUFF1                                          V1L3
IDOC     MVC       ZR3+16(4),IDATTRZ   DOCTOR CODE TO KICK OFF     V1L3
         B         ITUFF1
         SPACE
IDTSTEND IF        (SOPTR,NE,TERM),IDERR4
IFRMNED2 BALR      R11,0
         USING     *,R11
         IF        (CMOSWTCH,ON),ITUFF2
         L         R3,CENTRYPD
         IC        R4,ILISTCNT
         STC       R4,ZR3+9            STASH NO. OF SUBLISTS
         $FREE     R11                                             V1L5
         SPACE
***  PATCH BRANCH AROUND CODING FOR DATA STATEMENT
ITUFF1   LR        R4,R5
         L         R3,IBPATCH
         S         R4,ISVBAR11
         STH       R4,ZR3+2            STASH     BRANCH DISPLACEMENT
*****  PUT OUT A BALR R11,0  AT END OF DATA CODE
         BAL       R14,CBALR11
         ST        R5,CBAR11           SAVE AS VALUE OF LAST R11
ITUFF2   EQU       *
         AIF       ('&SNAPS' EQ 'OMIT').IC6
***** DUMP OBJECT CODE GENERATED
         L         R3,IBPATCH
         LR        R4,R5
         SR        R4,R3
         CSNAP     DATACODE,0(R3),0(R4)
.IC6     ANOP
         B         IDATXIT2
IDATTRZ  B         XDATATRZ
         TITLE     '*****  SAVE AREA AND COMMON ROUTINES  *****'
         SPACE     2
***********************************************************************
*****    S A V E A R E A  AND C O M M O N R O U T I N E S         *****
***********************************************************************
         SPACE
IOSAVER  DS        18F
         SPACE
***********************************************************************
*****    I/O LIST COMPILER                                        *****
***********************************************************************
**  SPECIAL ENTRY TO CHECK FOR READ/WRITE STATEMENTS WITH NO I/O LIST
         SPACE
         USING     STAK,RS
IOLISTNT IF        (SCODE,NE,PHI),ILISTCMP  TEST FOR ) 'OP'
         LR        R1,RS
         $FREE     RS                                              V1L5
         USING     STAK,R1
         AH        R1,SLINK            BUMP R1 DOWN STACK TO
         IFALL     (SOPTR,EQ,TERM),(IOUNIT,EQ,X'03'),IIO9BOOT      V1L1
         IF        (SOPTR,EQ,TERM),IONDLIST       CHK FOR ENDOFSTAT
         IF        (SOPTR,EQ,COMMA),ILERSEX2   NO SYMBOL           V1L4
         $FREE     R1                                              V1L5
         SPACE
****  THIS SECTION COMPILES I/O LISTS
         USING     STAK,RS
ILISTCMP MVC       IOLPENDS(2),=PL2'1'      INITIALIZE DO-LOOP COUNTER
IOLIST   LR        R2,RS               SAVE R2 AT LIST ITEM
         IF        (SCODE,NE,PHI),IOELEMNT       TEST FOR DOUBLE OP
         AH        RS,SLINK
         IF        (SOPTR,EQ,LBRK),ILFTBRKT
         IF        (SOPTR,EQ,TERM),ILERDEL       CANT BE ENDOFSTAT
         USING     STAK,R2
         $FREE     RS                                              V1L5
IOELEMNT MVI       SOPTR,TERM          PUT TERM BEFORE LIST ITEM
         $FREE     R2                                              V1L5
****   GO LOOK FOR NEXT ',' AT THIS DEPTH OF BRACKET LEVEL
         BAL       R8,ITSTOPS
         USING     STAK,R1
         CLI       SOPTR,COMMA
         BNZ       ILEREND             USED BY ITSTOPS
         BNE       ILF22               USED BY ITSTOPS
         MVC       IOSAVOP+1(1),SOPTR  SAVE OP BEFORE ITEM
         MVI       SOPTR,TERM          PUT A TERM THERE
         $FREE     R1                                              V1L5
         AIF       ('&SNAPS' EQ 'OMIT').IC7
         SR        R1,R2
         LR        R15,R1
         CSNAP     BETTY,(R2),8(R15)
.IC7     ANOP
         SPACE
***      HERES WHERE WE GOTO BETTY FOR LIST ELEMENTS
         SPACE
         MVI       IOBJBIT,X'00'       INITIALIZE FOR EACH LIST ELEMENT
         LR        RS,R2               RESET RS TO START OF ITEM
         USING     STAK,RS
         CLINK1    ARITH
         BAL       R14,CNOP04          BETTER REALIGN OBJCODE
         IF        (SCODE,EQ,X'00'),IOLISTOK     CHK FOR ERROR
         IF        (SOPND,NON,CHAR1),INOTCH
         IF        (SOPND,NZ,B'00000110'),INOTCH
         OI        IOBJBIT,X'01'       INDICATES CHAR VAR
INOTCH   LH        R15,SOPND+2
         STH       R15,IOLSTCD2+2
         EX        0,16(,R11)          WHAT ABOUT INIT BIT IN SYMT AB
         N         R15,KM1631
         A         R15,CSYMBASE
         USING     VLIST,R15
         OI        VB2,INIT
         CSNAP     INITBIT,0(R15),16
         IF        (VB2,OFF,B2COM),INOCOM
         IF        (CSRSWTCH,EQ,BDAT),INOCOM
         $ERROR    (LANG,CM,1,NAMR15)  INIT COMMON NOT IN BLOKDATA V1L5
INOCOM   EQU       *
INOINIT  MVC       IOLSTCD2(1),SCODE   MOVE IN RELOC CODE
         MVI       IOLSTCD2+1,X'0F'    SET MASK TO SAVE TYPE BITS
         IF        (SCODE,NE,X'A8'),ITSNOTSS
         IF        (IOBJBIT,ON,X'01'),ICHRVD
ICHRVD1  EQU       *                                               V1L4
         MVC       IOLSTCD1+2(2),ISUBSELT
         B         IOUTCOD
ICHRVD   IF        (SOPND,Z,X'07'),ICHRVD1       CHAR*1 VARIABLE?  V1L4
         MVC       IOLSTCD1+2(2),ICSUB                             V1L4
         B         IOUTCOD
ITSNOTSS IF        (SCODE,NE,X'A5'),ICDA3
*        SIMPLE CHARACTER VARIABLESS RELOC CODE
         MVC       IOLSTCD1+2(2),ICSIM
         B         IOUTCOD
*        SCODE IS X'A3' ARRAY OR SIMPLE NON CHARUTINE
*        SCODE IS ALSO X'A2' OR X'A9'
ICDA3    IF        (SOPND,NZ,B'01110000'),ITSARR
*        SIMPLE NON EQUIV NON CHAR VARAY   FOR CHAR VAR
         MVC       IOLSTCD1+2(2),ISIMPELT
         B         IOUTCOD
ITSARR   IF        (IOBJBIT,ON,X'01'),ICHRVA
         MVC       IOLSTCD1+2(2),IARRAY
         B         IOUTCOD
ICHRVA   IF        (SOPND,Z,X'07'),ICHAR1
         MVC       IOLSTCD1+2(2),ICARRAY
         B         IOUTCOD
*        CHARACTER*1 ARRAYS PUT OUT XARRAY
ICHAR1   MVC       IOLSTCD1+2(2),IARRAY
IOUTCOD  NC        IOLSTCD2+1(1),SOPND      AND IN VB1
         OUTPUT    8,IOLSTCD1
IOLISTOK AH        RS,SLINK
IOSAVOP  MVI       SOPTR,*-*           RESTORE OP AFTER ITEM
         SPACE     2
IWATSNXT IF        (SOPTR,EQ,COMMA),IOLIST       LOOP IF IT'S ','
         IF        (SOPTR,NE,SUDOCOMA),ITSTRM    IS IT END/FDO TIME
         SPACE
***      HERES WHERE WE GOTO DERECK FOR END OF DO CODING
         SPACE
         CSNAP     END-DO,0(RS),24
         SP        IOLPENDS(2),=PL2'1' DECREASE LOOP COUNT
         CLINK1    DOIOEND             END OF DO LOOP CODING
         AH        RS,SLINK
         B         IWATSNXT            GO SEE WATS NXT
         SPACE     2
         $FREE     RS                                              V1L5
ILFTBRKT LR        R2,RS               SAVE R2 AT '('
***   GO LOOK FOR '=' AT THIS DEPTH OF BRACKET NESTING
         BAL       R8,ITSTOPS
         USING     STAK,R1
         CLI       SOPTR,EQUAL
         $FREE     R1                                              V1L5
         B         ILEREND             USED BY ITSTOPS
         B         ILF22               USED BY ITSTOPS
         SPACE
         USING     STAK,RS
*****  COME HERE FROM ITSTOPS FOR START OF DO CODING WHEN '=' IS FOUND
         SPACE
IEQUALSN IF        (SOPTR,NE,COMMA),ILERCMA      CHK ',' BEFORE '='
         MVI       SOPTR,SUDOCOMA      ENDOFDO MARK TO ','
         AP        IOLPENDS(2),=PL2'1'    BUMP COUNT
***      HERES WHERE WE GOTO DEREK FOR START-OF-DO CODING
         CSNAP     STARTDO,0(RS),24
         IF        (CADSSW,NO,X'A2'),INODA9  IS THIS DATA STA
         $ERROR    (LANG,DA,9)                                     V1L5
INODA9   CLINK1    DOIOENT
         CSNAP     BACKDO,0(RS),24
         IF        (SCODE,NE,PHI),ILERNOFI  SHOULD BE ')''PHI'
         AH        RS,SLINK
         USING     ZSAVER,R13
         L         R1,ZSVS             RS WAS SAVED AT ENDOFDO MARK
         SR        RS,R1
         $FREE     RS                                              V1L5
         USING     STAK,R1
         STH       RS,SLINK            LINK AROUND STARTOF DO IN STACK
         $FREE     R1                                              V1L5
         L         RS,ZSV2             R2 WAS SAVED AT '('
         USING     IOSAVER,R13
         B         IOLIST              GO FOR NEXT ITEM IN LIST
         SPACE     2
         USING     STAK,RS
ITSTRM   CLI       SOPTR,TERM
         EX        0,8(,R11)           POSSIBLE CHECK FOR '/'
         BNE       ILERDEL
IONDLIST IF        (IOBJBIT,ON,X'08'),INOND  NAMELIST HAS NO ENDOFLIST
         OUTPUT    4,IOLIST5           ENDOFLIST CODING
         SPACE
****  HERES WHERE WE RETURN FROM LIST COMPILER
INOND    B         20(,R11)            RETURN
         SPACE     2
*****    THIS ROUTINE PERFORMS MAGIC
*        R0 CLOBBERED
*        R1 LOOKS AHEAD IN STACK
*        R3 CLOBBERED
*        RS STACK PTR
ITSTOPS  LR        R1,RS
         LA        R3,1                SET UP R3 FOR COUNTIMG
         LCR       R0,R3               BRACOUNT#-1
ILF23    AR        R0,R3               BRACOUNT#BRACOUNT+1
ILF22    LR        RS,R1               R1 LOOKS AHEAD IN STACK
         $FREE     RS                                              V1L5
         USING     STAK,R1
         AH        R1,SLINK
         IF        (SOPTR,NE,RBRK),ILF3
         SR        R0,R3               BRACOUNT#BRACOUNT-1
         BM        ILERBRK
         B         ILF22
ILF3     IF        (SOPTR,EQ,LBRK),ILF23
         IF        (SOPTR,EQ,SUDOCOMA),12(,R8)
         IF        (SOPTR,NE,TERM),ILF4
         LTR       R0,R0               IS IT LEVEL ZERO
         EX        0,4(,R8)
         EX        0,0(,R11)
ILF4     EX        0,0(,R8)
         BNE       ILF5
         LTR       R0,R0               IS IT LEVEL 0
         BNZ       ILF22               NO, CHECK NEXT
         B         12(,R8)             YES RETURN
ILF5     CLI       SOPTR,SLASH
         EX        0,8(,R8)            SO
         LTR       R0,R0               IS IT LEVEL ZERO
         EX        0,4(,R11)           ITS A DELIMITER IN DATA STATS
         B         ILF22
         SPACE     2
*        THIS POUTINE IS LIKE ITSTOPS
*        ONLY CHECK FOR NEXT LEVEL ZERO , OR )
*        USED IN THE UNIT OF I/O STATEMENTS
IMTSTOPS LR        R1,RS
         LA        R3,1                SET UP R3 FOR COUNTING
         LCR       R0,R3
IMLF23   AR        R0,R3               BRACNT=BRACNT+1
IMLF22   LR        RS,R1               R1 LOOKS AHEAD
         USING     STAK,R1
         AH        R1,SLINK
         IF        (SOPTR,NE,RBRK),IMLF3
         SR        R0,R3               BRACNT=BRACNT-1
         BNM       IMLF22
         LR        RS,R1
         BR        R8                  RETURN
IMLF3    IF        (SOPTR,EQ,LBRK),IMLF23
         IF        (SOPTR,NE,TERM),IMLF4
         LTR       R0,R0
         BZR       R8                  RETURN
         B         IERSXAA             HIT TERM LOOKING FOR , OR )
IMLF4    IF        (SOPTR,NE,COMMA),IMLF22
         LTR       R0,R0               IS IT LEVEL ZERO
         BNZ       IMLF22              NO , CHECK NEXT
         LR        RS,R1
         BR        R8                  RETURN
         $FREE     R1                                              V1L5
         USING     STAK,RS
         SPACE     5
***********************************************************************
****  ROUTINES TO PROCESS UNIT IN I/O STATEMENTS                   ****
*        LOOKUP AND PUT OUT OBJECT CODE FOR UNIT
*        FOR DIRECT ACCESS CHECK FOR QUOTE AND RECORD POSITION
*        FOR CORE TO CORE OUTPUT UNIT CALCULATION
*        DON'T CHECK COMMA TERMINATER OR ) FOLLOWING UNIT
*                  BUT RS IS ON THAT LINE
***********************************************************************
ICHKUNIT LR        R7,R11              ERROR RETURN
         IF        (SCODE,OFF,CCONS),IUNME   NOT A CONSTANT
         LA        R7,IUJMP            ERROR RETURN
         BAL       R1,ICONUNIT         LOOKUP CONSTANT UNIT
         STC       R2,IULA+3           STORE UNIT IN OBJECT CODE
         OUTPUT    4,IULA              OUTPUT LA OF UNIT NO.
         IF        (IDASWCH,EQ,X'01'),IUJMP
         CLC       IULA+3(1),INSTLIN        DONT NEED FIOCS FOR
         BE        IUJMP                       INPUT NOR
         CLC       IULA+3(1),INSTLOUT          OUTPUT UNITS
         BE        IUJMP
         BAL       R1,INDFIOCS         LOOK UP FIOCS#
IUJMP    LR        R7,R11              ERROR RETURN
         AH        RS,SLINK            NEXT LINE IN STACK
         IF        (IDASWCH,NE,X'01'),LOOP  RETURN IF NOT D.A.
         B         IUDAR               COMPILE DIRECT ACESS RECORD POS
IUNME    IF        (SCODE,NZ,MNAME),IERIO7 UNIT NOT CONST OR VARIABLE
         IF        (SCODE,EQ,PHI),IIERSX8  UNIT MISSING
         AIF       ('&CHARVAR' EQ 'USE').IDALA1                    V1L1
         IF        (IDASWCH,EQ,X'01'),IUNME1
         LA        R1,IUNME1
.IDALA1  ANOP                                                      V1L1
         AIF       ('&CHARVAR' EQ 'OMIT').IDALA2                   V1L1
         B         IUNME1              CHECK TYPE OF OP            V1L1
IUNSAVER DC        5F'0'               CLUGE  SAVE AREA            V1L1
.IDALA2  ANOP                                                      V1L1
         SPACE
*  ROUTINE TO PUT FIOCS# IN SYMBOL TABLE SO IT WILL BE LOADED
INDFIOCS LOOKUP    SPCLNAME,NAME=IFIOCS#  LOOKUP FIOCS#
         USING     VLIST,R15
         MVI       VB1,FUNC+REAL4      MARK AS REAL FUNCTION
         BR        R1                  RETURN
IFIOCS#  DC        0F'0',CL6'FIOCS#'
         SPACE
IUNME1   LOOKUP    VARIABLE
         USING     VLIST,R15
         AIF       ('&CHARVAR' EQ 'OMIT').IDALA3                   V1L1
*  THE FOLLOWING CLUGE (FIX?) SAVES US LOADING FIOCS FOR C-C I/O   V1L1
*  IT COST 48 BYTES BUT SAVES 4K AT RUN TIME                       V1L1
         IFANY     (IDASWCH,EQ,X'01'),(VB1,ON,CHAR),IUNME2 CV/DA?  V1L1
         STM       R15,R3,IUNSAVER     SAVE R15-R3                 V1L1
         BAL       R1,INDFIOCS         MUST LOAD FIOCS,SO DO IT    V1L1
         LM        R15,R3,IUNSAVER     RESTORE R15-R3              V1L1
IUNME2   EQU       *                   DON'T LOAD FIOCS            V1L1
.IDALA3  ANOP                                                      V1L1
         IF        (VB1,NE,SIMV+INT4),IUCHR  PERHAPS A CHARACTER VAR.
         STH       R3,IUL+2            STORE PTR TO VARIABLE
         OUTPUT    4,IUL               OUTPUT LOAD INSTRUCTION
         IF        (VB2,OFF,B2COM+B2EQV),IUA  IS IT COMMON OR EQUIV
         OUTPUT    4,IULCE             OUTPUT 2ND LOAD FOR INDIRECT ADD
*        CODE TO LOAD UNIT NUMBER IS COMPLETE 2ND LOAD FOR INDIRECT ADD
IUA      AH        RS,SLINK            PT AT ' , OR )
         IF        (IDASWCH,NE,X'01'),LOOP  RETURN IF NOT D.A. STATE
IUDAR    EQU       *
         AIF       ('&DIRACC' EQ 'OMIT').IDA4
*        WE HAVE A D.A. STATEMENT
         OI        IOUNIT,IDABIT       MARK AS DIRECT ACCESS
         IF        (SOPTR,NE,QUOTE),IERSX1
         BAL       R1,ILDDIOCS         GO LOAD DIOCS#              V1L1
*        LOOK FOR NEXT LEVEL ZERO COMMA OR ) IF THERE ARE NO COMMAS
         ST        RS,IRECPOS          STORE PTR TO RECORD NO.
         BAL       R8,IMTSTOPS         LOOK FOR NEXT LEVEL ZERO COMMA
         ST        RS,INDRECP          END OF RECORD POSITION EXPRESS.
         BR        R11                 RETURN
ILDDIOCS LOOKUP    SPCLNAME,NAME=IDIOCS# PUT DIOCS# IN CORE        V1L1
         USING     VLIST,R15           SET UP VLIST BASE           V1L1
         MVI       VB1,FUNC+REAL4      INDICATE A REAL FUNC        V1L1
         BR        R1                  RETURN TO CALLER            V1L1
IDIOCS#  DC        0F'0',CL6'DIOCS#'                               V1L1
.IDA4    ANOP
IUCHR    IF        (IDASWCH,EQ,X'01'),IERIO7  IS IT A D.A. STATEMENT
         IF        (IOUNIT,ON,X'08'),IERIO7  IS IT A CONTROL STA
         AIF       ('&CHARVAR' EQ 'OMIT').ICR3
         IF        (VB1,OFF,CHAR),IIERIO7  IT ISN'T A CHAR VAR
         MVC       IUCAD+1(1),CADSSW   SAVE CADSSW
         OI        IOBJBIT,X'80'       MARK AS CHARACTER
         LR        R2,RS               SAVE RS
         MVI       SOPTR,TERM          FOR ARITH
         BAL       R8,IMTSTOPS         LOOK FOR NEXT LEVEL ZERO , OR )
         MVC       IREST+1(1),SOPTR    SAVE SOPTR
         MVI       SOPTR,TERM          FOR ARITH
         LR        RS,R2               SAVE RS
         CLINK1    ARITH               COMPILE UNIT A CHAR VAR
IUCAD    MVI       CADSSW,*-*          RESTORE CADSSW
*        IF        SCODE IS X'00' AN ERROR WAS FOUND
         IF        (SCODE,EQ,X'00'),IUAB  ERROR EXIT
         MVC       IODOT+2(2),SOPND+2  MOVE CHAR VAR PTR TO OBJ CODE
         MVC       IODOT(1),SCODE      RELOC CODE
         LH        R15,SOPND+2         PTR TO SYMBOL TABLE
         N         R15,KM1631
         A         R15,CSYMBASE
         USING     VLIST,R15
         IC        R2,VLEN             PICK UP LENGTH OF CHAR VAR
         STC       R2,IODOT+1          STORE IN OBJ CODE
*        NOW SET FORMAT FLAG FOR READ WRITE
         IF        (IOUNIT,NON,X'01'),IUAAB
         OI        IOFMT+1,X'01'       SET READ WRITE BIT
IUAAB    IF        (SOPND,Z,X'70'),IUABC  TEST FOR SUBSCRIPTS
         OI        IOFMT+1,X'08'       INDICATE SUBSCRIPTS
IUABC    IF        (SCODE,NEQ,X'A8'),IUAB  TEST FOR ARRAY ELEMENT
         OI        IOFMT+1,X'10'       MARK AS ARRAY ELEMENT
.ICR3    ANOP
IUAB     AH        RS,SLINK            POINT AT LAST LINE
IREST    MVI       SOPTR,*-*           RESTORE SOPTR
         BR        R11                 RETURN
         SPACE     2
ICONUNIT NI        SOPND,B'00000111'   GET RID OF DIGIT COUNT
         L         R2,SOPND            PICK UP CONSTANT FROM STACK
         BNZ       IERUN6              BRANCH IF BIG UNIT
         LTR       R2,R2
         BZ        IERUN6               ERROR IN UNIT
         C         R2,IMAXUNIT
         BNHR      R1
         AIF       ('&WHOSIT' NE 'BILL').BILL7
         C         R2,=F'99'            TEST FOR TAPE 99
         BNHR      R1
.BILL7   ANOP
         B         IERUN6
         SPACE     5
***********************************************************************
***   ROUTINE TO CHECK FOR PRESENCE OF 'END=' OR 'ERR=' AFTER UNIT/FMT
***********************************************************************
IOENDERR BAL       R8,ITEST            TEST FOR ')' OR ',' OR ''''
         BAL       R8,ITSTEND          TEST FOR END AFTER ','
         B         ICHKERR
         BAL       R8,ITEST            TEST FOR ')' OR ','
         BAL       R8,ITSTERR          TEST FOR ERR=
ICHKERR1 B         IRERR4
         USING     STAK,RS
*****  RETURN TO 0(R11) IF ')' FOLLOWS END/ERR RETURN. OTHERWISE ERROR
         IF        (SOPTR,EQ,RBRK),LOOP
         B         IRERR3
ICHKERR  BAL       R8,ITSTERR          TEST FOR ERR=
         B         4(,R11)             CONTINUE PROCESSING         V1L5
         BAL       R8,ITEST
         LA        R8,ICHKERR1
         B         ITSTEND             GO TEST FOR END=
         SPACE     1
ITEST    IF        (SOPTR,EQ,RBRK),LOOP          RETURN ON R11
         CLI       SOPTR,COMMA
         BER       R8                  YES,CONTINUE PROCESSING
         B         IRERR3
         SPACE
ITSTERR  LA        R1,IOERR              POINT R1 AT OBJCODE
         CLC       SCODE(8),ISPERR     CHECK FOR ERR=
         BNER      R8                  NOPE
         OI        IENDERRS,IERR       INDICATE ERR=
         B         ITSTEND1
         SPACE     1
ITSTEND  LA        R1,IOEND            POINT R1 AT OBJCODE
         CLC       SCODE(8),ISPEND     CHECK FOR END=
         BNER      R8
         OI        IENDERRS,IEND
ITSTEND1 AH        RS,SLINK            WE'VE GOT END= OR ERR=
         IF        (SCODE,OFF,CCONS),IENDERR     CHK FOR STATNO
*****    GOTO DEREK TO CHECK THIS STATEMENT NUMBER FOR ILLEGAL TRANSFER
         CLINK1    DCSTN2              OFF TO DEREK
         USING     ZSAVER,R13
         L         R1,ZSV1             RESTIRE REGISTER 1
         L         R8,ZSV8             RESTORE REGISTER 8
         USING     IOSAVER,R13
         STH       R3,2(,R1)           FIX OBJCODE
         MVI       0(R1),IREL3         SET RELOCATER CODE FOR STATNUM
         AH        RS,SLINK
         B         4(,R8)              GO BACK,FOUND SOMETHING
IENDERR  $ERROR    (BOOT,SX,6,SYMRS,UNEX),IERRRW NO ST # AFTER END=V1L5
ISPEND   DC        AL1(CNAME+1),C'END ',X'0008',AL1(EQUAL)  STACK CONFG
ISPERR   DC        AL1(CNAME+1),C'ERR ',X'0008',AL1(EQUAL)  STACK CONFG
         SPACE
IRWSW    TM        IENDERRS,IEND+IERR
         BZR       R15
*        IS IT CORE TO CORE I/O
         IF        (IOBJBIT,ON,X'80'),IERROR
*        CORE TO CORE CANNOT HAVE END= OR ERR=
         TM        IOUNIT,IOUTFLAG     TEST FOR READ / WRITE
         BZ        IREADT
*        WRITE CANNOT HAVE END= OR ERR=
         B         IERROR
IREADT   TM        IOUNIT,IDABIT
         BZR       R15                 NOT D.A. TYPE
         TM        IOBJBIT,X'20'       IS IT FIND
         BO        IERROR              FIND CANT HAVE END=,ERR=
         TM        IENDERRS,IEND       THIS IS D.A. READ ONLY ERR=
         BZR       R15
IERROR   $ERROR    (BOOT,IO,4)                                     V1L5
         BR        R15
         SPACE     5
***********************************************************************
***  ROUTINE TO CHANGE READN INTO READ(INSTLIN,N). SAME FOR PUNCH/PRINT
***********************************************************************
IFIXSTK  LR        R1,RS               SAVE RS AT TOP OF STACK
         $FREE     RS                                              V1L5
         USING     STAK,R1
         AH        R1,SLINK            BUMP R1 DOWN STACK
         IF        (SOPTR,NE,COMMA),ICHKRM       TEST FOR ','
         MVI       SOPTR,RBRK          OVERLAY ',' WITH ')'
         IF        (SCODE,NE,PHI),IFIXOUT        TEST FOR ',''OP' CASE
         AH        R1,SLINK
         IF        (SOPTR,NE,TERM),IFIXOUT       'OP' CANT BE ENDOFSTAT
         B         IRERR8
ICHKRM   IF        (SOPTR,NE,TERM),IFIXERR       ALLOW ENDOFSTAT HERE
         MVI       SOPTR,RBRK          OVERLAY IT WITH ')'
         MVI       STAK+6,TERM         MOVE ENDOFSTAT DOWN IN STACK
         MVI       SLINK+1,X'04'       SET ITS LINK
         $FREE     R1                                              V1L5
         USING     STAK,RS
IFIXOUT  MVI       SOPTR,COMMA         PUT A ',' BEFOR STACK
         S         RS,KF8
         MVC       STAK(8),IOSTACK     PUT THE UNIT IN STACK
         MVI       SOPTR,LBRK             WITH A '(' BEFORE IT
         BR        R11                 RETURN
         $FREE     RS                                              V1L5
         SPACE     5
***********************************************************************
*****    SUNDRY ERROR MESSAGES                                    *****
***********************************************************************
         DS        0H
IDERR2   EQU       *  NO '(' AFTER 'DATA'
IERSXAA  EQU       *
         LR        RS,R1
ISTPER2  EQU       *
IPWSER1  EQU       *
IREBER1  EQU       *
**  INVALID DELIMITER IN STOP,PAUSE,REWIND,ENDFILE,BACKSPACE,DATA STATS
GCONTER2 EQU       *  INVALID DELIMITER IN CONTINUE STATEMENT
IERSXA   EQU       *
         $ERROR    (BOOT,SX,A,DELRS,UNEX),IERRRW                   V1L5
         SPACE
IWRITER1 EQU       *  SOMETHING CONCATENATED WITH WRITE
IFINDER1 EQU       *  SOMETHING CONCATENATED WITH 'FIND'
IDERR1   EQU       *  DIGIT CONCATENATED WITH 'DATA'
IPWSER2  EQU       *  CHARACTER CONCATENATED WITH 'PAUSE' NOT DIGIT
ISTPER1  EQU       *  CHARACTER CONCATENATEC WITH 'STOP' NOT DIGIT
GCONTER1 EQU       *   CHARACTERS CONCATENATED WITH CONTINUE
         $ERROR    (BOOT,CC,8,SYMRS,UNEX),IERRRW                   V1L5
         SPACE
IRERR8   EQU       *
IRERR39  EQU       *
IFIXERR  EQU       *  NO ',' AFTER FORMATTED READ,PRINT,PUNCH
         LR        RS,R1
IERRRW0  EQU       * NO '(' AFTER READ/WRITE OR TRANSFORMED READ,PRINT,
*                                      PUNCH
IRERR4   EQU       *  NO 'ERR=N' AFTER 'END=N,'
IRERR7   EQU       *  NO END,ERR RETURN AFTER '(UNIT,FMT,'
IRERR3   EQU       *  NO ',' AFTER 'PRINT' IN FREE OUTPUT
*                     NO '(' OR ',' AFTER 'READ'
*                     NO ')' AFTER 'END=N' OR 'ERR=N' , WHICHEVER LAST
*                     NO',' OR ')' AFTER '(UNIT' OR '(UNIT,FMT'
*                     MISSING I/O LIST AFTER ',' IN READ,PRINT,PUNCH
         $ERROR    (BOOT,SX,1,DELRS,UNEX),IERRRW                   V1L5
         SPACE
         SPACE
IRERR6   EQU       *  NO FORMAT AFTER '(UNIT,'
         $ERROR    (BOOT,SX,6,SYMRS,UNEX),IERRRW                   V1L5
         SPACE
IDER3    EQU       *  MISSING ',' BETWEEN '/' AND 'SYMBOL' IN DATA STAT
ILERCMA  EQU       *                   NO ',' BEFORE 'I='
ILERNOFI EQU       *  MISSING ',' AFTER ')' IN NESTED IMPLIED DO
         $ERROR    (BOOT,SX,0,SYMRS,UNEX),12(,R11)                 V1L5
         SPACE
IBADEND  EQU       *  HIT STATERM IN I/O LIST PART OF DATA STATEMENT
ILERDEL  EQU       *                   INVAL DELIN IN I/O LIST
         LR        R1,RS
IDERR4   EQU       *  NO ',' OR STATERMINATER AFTER'/' IN DATA STATEM
ILEREND  EQU       *  HIT STATERM LOOKING FOR ',' OR '=' IN I/O LIST
         $ERROR    (BOOT,SX,1,DELR1,INVAL),12(,R11)                V1L5
         SPACE
ILERBRK  EQU       *                   UNBALENCED PARENTHESIS
         $ERROR    (BOOT,PC,1),12(,R11)                            V1L5
ILERSEX2 $ERROR    (BOOT,SX,2,DELR1,INVAL),12(,R11)                V1L5
         SPACE
         AIF       ('&DIRACC' NE 'USE').IDA3
*        DF-0      UNIT NUMBER MISSING
*        DF-1      INVALID FORMAT SPEC.
*        DF-2      ASSOCIATED VARIABLE NOT SIMPLE INT VAR
IERDF0   $ERROR    (BOOT,DF,0,SYMRS,UNEX)                          V1L5
         BR        R7
IERDF1   $ERROR    (BOOT,DF,1,SYMRS,INVAL)                         V1L5
         BR        R7
IERDF2   $ERROR    (BOOT,DF,2,SYMRS,INVAL)                         V1L5
         BR        R7
.IDA3    ANOP
         SPACE
IERSX1   $ERROR    (BOOT,SX,1,DELRS,UNEX)  EXPECTING OPERATER      V1L5
         BR        R7
IERSX4   $ERROR    (BOOT,SX,4,SYMRS,UNEX)  EXPECTING CONSTANT      V1L5
         BR        R7
IERSX0   $ERROR    (BOOT,SX,0,SYMRS,UNEX)  MISSING OPERATER        V1L5
         BR        R7
IIERSX8  $ERROR    (BOOT,SX,8,SYMRS,UNEX)  AVOID SX-1 ERRORS       V1L5
         USING     STAK,RS
         AH        RS,SLINK
         BR        R7
IERSX8   $ERROR    (BOOT,SX,8,SYMRS,UNEX) MISSING CONST OR SIM VAR V1L5
         BR        R7
IERUN6   $ERROR    (BOOT,IO,5,INTR2,UNIT)                          V1L5
         BR        R7
IERIO61  $ERROR    (BOOT,IO,6,RELRS,INVAL),CRET                    V1L5
IERIO6   $ERROR    (BOOT,IO,6,SYMRS,INVAL),CRET                    V1L5
IIERIO7  $ERROR    (BOOT,IO,7,SYMRS,INVAL) AVOID SX-1 ERRORS       V1L5
         AH        RS,SLINK
         BR        R7
IERIO7   $ERROR    (BOOT,IO,7,SYMRS,INVAL)                         V1L5
         BR        R7
ICV2BOOT $ERROR    (BOOT,CV,2),IERRRW  BIN C-C NOT ALLOWED         V1L5
IIO9BOOT $ERROR    (BOOT,IO,9),IERRRW  UNFORMATED WRT MUST HAV LST V1L5
IDF3BOOT $ERROR    (BOOT,DF,3,INTR2)   NUMBR OF RCDS OR RCRD SIZE  V1L5
         BR        R7                  RETURN TO CALLER            V1L1
         SPACE     5
***********************************************************************
*****    DATA STATEMENT EXIT ROUTINE                              *****
***********************************************************************
IDATXIT2 EQU       *    MAIN EXIT FROM DATA STATEMENT
         MVI       CTYPESW,X'00'       RESET DATA/TYPE COMMUNICATION SW
IERXIT   EQU       *    ERROR EXIT FROM I/O LIST ERRORS IN I/O AND DATA
         L         R11,=A(DOIOEND)     THIS ASSUMES CRET RESTORES R11
         BALR      R14,0               UNSTACK ANY UNCLOSED LOOPS THAT
         SP        IOLPENDS(2),=PL2'1'   RESULTED FROM I/O LIST ERRORS
         BPR       R11                 GET THEE TO AN UNSTACKERY
IRETURN  EQU       CRET MAIN EXIT FROM I/O STATEMENTS
IERRRW   EQU       CRET EXIT FOR NON-LIST ERRORS IN I/O STATEMENTS
INEDOUT1 EQU       CRET ELEMENT-WISE EXIT FOR INITIALZING TYPE STATES
         B         CRET
         SPACE     5
***********************************************************************
*****    OBJECT CODE FOR I/O STATEMENTS                           *****
***********************************************************************
*        UNIT CALCULATION
         USING     ZR1,R1
IULA     LA        R1,*-*              LOAD UNIT NUMBER FOR CONST UNIT
IUL      L         R1,*-*              LOAD UNIT FOR VARIABLE UNIT
IULCE    L         R1,ZR1              INDIRECT ADDRESS
**  THIS FOR ALL I/O STATEMENTS
         CNOP       0,4
IOTYPE   BAL       R14,XIOINIT
IOEND    DC        AL1(IREL7),AL1(*-*),AL2(*-*) RELCODE,IOOP,ENDRET
IOERR    DC        AL1(IREL7),AL1(*-*),AL2(*-*) RELCOD,IOOP,ERRRET
IOBER    EQU       IOTYPE
IOBER1   EQU       IOEND
IOUNIT   EQU       IOEND+1
IOFMT     DC       AL1(IREL3),AL1(*-*),AL2(*-*)     FORMAT
IORECNO  BAL       R14,XIOINTDA
         CNOP      0,4
IOCTYPE  BAL       R14,XIOINTCC
IODOT    DC        AL1(*-*),CL1'LENGTH',AL2(*-*) ADDRESS DOT ROUTINE
*IOFMT   DC        X'FLAG',AL3(FORMAT)
IOENDCC  BAL       R14,XIOCCFRM
IOFLAG   EQU       IOFMT+1             FLAGS FOR C-C I/O           V1L1
ICCFREE  EQU       B'01000000'         C-C FREE I/O                V1L1
         SPACE
**  THIS FOR I/O LIST ELEMENTS
**  THIS FOR SUBSCRIPTED ELEMENTS
*        BAL       R14,XSUBSELT
*        DC        AL1(IREL4),AL1(*-*),2X'00'
**  THIS FOR SIMPLE ELEMENTS OR ARRAYS
*        BAL       R14,ELMNTRTN        ELMNTRTN=XARRAY OR XSIMPELT
*        SIMPLE CHAR VAR
*        BAL       R14,XCHARSIM
*        DC        AL1(*-*),CL1'FLAG',AL2(*-*)
*        CHAR ARRAYS
*        BAL       R14,XCHARARR
*        DC        AL1(*-*),CL1'FLAG',AL2(*-*)
IOLSTCD1 BAL       R14,*-*
IOLSTCD2 DC        AL1(IREL2),AL1(*-*),AL2(*-*)
**  THIS FOR END OF LIST
IOLIST5  BAL       R14,XENDLIST
         SPACE     3
***********************************************************************
*****    OBJECT CODE FOR DATA STATEMENTS                          *****
***********************************************************************
IBRAROND B         *-*(R11)            BRANCH AROUND DATA CODING
         CNOP      0,4
IDATACD3 BAL       R14,XDATA
         DC        A(XSTART10)         POINTER TO NEXT DATA STATEMENT
         DC        AL1(IREL5),AL1(*-*),AL2(*-*)  POINTER TO SAVEAREA
IDATACD5 DC        AL1(IREL1),AL1(*-*),AL2(*-*)  PTR TO CONLIST CODING
**  FOLLOWED BY I/O LIST CODING FOLLOWED BY
**   CONSTANT LIST CODING
IDATACD1 DC        AL1(IREL1),AL1(*-*),AL2(*-*)  LENGTH-1 AND REPLN FAC
IDATACD2 DC        AL1(IREL2),AL1(*-*),AL2(*-*)  TYPE AND LOCN OF CONST
         SPACE     5
*****    VARIOUS CONSTANTS                                        *****
ICARRAY  DC        S(XCHARARR)
ICSIM    DC        S(XCHARSIM)
ICSUB    DC        S(XCHARSUB)
IARRAY   DC        S(XARRAY)
ISIMPELT DC        S(XSIMPELT)
ISUBSELT DC        S(XSUBSELT)
IXFMSP2  DC        S(XFALSE)
ISVCNLNK DC        F'0'
ISVBAR11 DC        F'0'
IBPATCH  DC        F'0'
IRECPOS  DC        F'0'                PTR TO BEGIN OF RECORD POSITION
INDRECP  DC        F'0'                PTR TO END   OF RECORD POSITION
IFORMAT  DC        F'0'
ISTLIST  DC        F'0'
IDEFPTR  DC        F'0'                PTS AT LOC IN OBJ CODE
ITRUE    DC        A(XTART+XTRUE-START)
IFALSE   DC        A(XTART+XFALSE-START)
IOTEMPA  L         R0,*-*              USED FOR UNIT NO & REC POS.
         SPACE
IOSTACK  EQU       CXSTACK             SAVE SOME STORAGE
*IOSTACK DC        X'0008018100000000'       LINK,UNIT
ISVCNLST EQU       IOEND               SAVE A WORD
ILISTCNT EQU       IDATACD3+9
IMAXUNIT EQU       CMAXUNIT
INSTLIN  EQU       XINPDSRN+3          READFMT AND FREE INPUT UNIT
INSTLOUT EQU       XOUTDSRN+3          PRINTFMT AND FREE OUTPUT UNIT
INSTLPUN EQU       XPUNDSRN            PUNCHFMT AND FREE PUNCH UNIT
         SPACE
IOLPENDS DC        PL2'1'              IMPLIED DO-LOOP COUNTER
ILCODE   DC        AL1(CNAME+1),C'L '
IECODE   DC        AL1(CNAME+1),C'E '
IUCODE   DC        AL1(CNAME+1),C'U '
         SPACE
IOBJBIT  DC        X'00'
*        X'80' = CORE TO CORE
*        X'40' = FORMAT PRESENT
*        X'20' = FIND STA
*        X'10' = FORMAT IS CHAR VAR
*        X'08' = NAMELIST
*        X'01' = CHAR VAR IN I/O LIST
IENDERRS DC        X'00'
*        X'01' = ERR PRESENT
*        X'02' = END PRESENT
         SPACE     2
***********************************************************************
*****    O B J E C T  C O D E S                                   *****
***********************************************************************
         SPACE     2
*        S E Q U E N T I A L  I / O
*        CODE TO CALCULATE UNIT
*        BAL       R14,XIOINIT
*        DC        X'FLAG',AL3(XIOEND)
*        DC        A(XIOERR)
*        DC        X'FLAG',AL3(FORMAT)
         SPACE     2
*        D I R E C T  A C C E S S
*        CODE TO CALCULATE UNIT
*        BAL       R14,XIOINIT
*        DC         X'FLAG',AL3(XIOEND)
*        DC        A(XIOERR)
*        DC        X'FLAG',AL3(FORMAT)
*        CODE TO GENERATE RECORD POSITION
*        BAL       R14,XIOINTDA
         SPACE     2
*        C O R E  T O  C O R E  I / O
*        CODE TO GENERATE ADDRESS OF V1
*         BAL      R14,XIOINITCC
*        DC        X'LENGTH',AL3(.V1)
*        DC        X'FLAG',AL3(FORMAT)
*        CODE TO GENERATE ADDRESS OF V2 IF FORNAT IS NOT STA NO
*        BAL       R14,XIOCCFRM
         SPACE     2
*        N A M E L I S T
*        CODE TO CALCULATE UNIT
*        BAL       R14,XIOINIT
*        DC        X'FLAG',AL3(END)
*        DC        A(ERR)
*        DC        A(NAMELIST)
         SPACE
         LTORG
         END
