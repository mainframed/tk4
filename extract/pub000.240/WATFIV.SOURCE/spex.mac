SPEX     TITLE     '### SPEX ###     MACRO DEFINITIONS'            V1L0
*        PRINT     OFF                                             V1L0
         MACRO                                                     V1L0
&NAME    SETLINK   &FROM,&TO,&LOC,&WREG,&GEN                       V1L0
.*        THIS MACRO SETS UP SYMBOL TABLE LINKS FOR VLIST          V1L0
.*       &FROM AND &TO ARE ADDRESSES IN REGISTERS.THEY REFER       V1L0
.*       TO THE TWO ENTRIES WHICH ARE TO BE LINKED                 V1L0
.*       &LOC IS THE LOCATION IN WHICH THE LINK IS STORED          V1L0
         GBLA      &SETLNK#                                        V1L0
         LCLC      &WORK                                           V1L0
&SETLNK# SETA      &SETLNK#+1                                      V1L0
&WORK    SETC      'R15'                                           V1L0
         AIF       ('&WREG' EQ '').A                               V1L0
&WORK    SETC      '&WREG'                                         V1L0
.A       ANOP                                                      V1L0
&NAME    LR        &WORK,&FROM                                     V1L0
         SR        &WORK,&TO                                       V1L0
         STH       &WORK,&LOC                                      V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    LINK      &FROM,&LINK                                     V1L0
.*       THIS MACRO LINKS FROM ONE SYMBOL TABLE ENTRY TO ANOTHER   V1L0
&NAME    SH        &FROM,&LINK                                     V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    LINK1     &FROM,&TO,&TEMP                                 V1L0
.*       THIS MACRO IS SIMILAR TO LINK2 EXCEPT THAT THE LINK       V1L0
.*       IS ALREADY IN &TO                                         V1L0
&NAME    LR        &TEMP,&FROM                                     V1L0
         SR        &TEMP,&TO                                       V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    LINK2     &FROM,&TO,&LOC                                  V1L0
.*       THIS MACRO IS SIMILAR TO LINK EXCEPT THAT                 V1L0
.*       &FROM IS NOT DESTROYED                                    V1L0
         GBLA      &LINK2#                                         V1L0
&LINK2#  SETA      &LINK2#+1                                       V1L0
&NAME    LR        &TO,&FROM                                       V1L0
         SH        &TO,&LOC                                        V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    SLINK     &ANY                                            V1L0
.*       THIS MACRO LINKS TO THE NEXT STACK ENTRY                  V1L0
         GBLA      &SLINK#                                         V1L0
&SLINK#  SETA      &SLINK#+1                                       V1L0
&NAME    AH        RS,SLINK                                        V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    MULTSS    &OP                                             V1L0
         LCLA      &A                                              V1L0
&A       SETA      24                                              V1L0
&NAME    DS        0H                                              V1L0
.A       ANOP                                                      V1L0
         M         R2,TSS+&A                                       V1L0
&A       SETA      &A-4                                            V1L0
         AIF       (NOT (&A EQ 0 AND '&OP' EQ 'OMITLAST')).B       V1L0
         MEXIT                                                     V1L0
.B       ANOP                                                      V1L0
         AIF       (&A GE 0).A                                     V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    MULTDIM   &OP                                             V1L0
         LCLA      &A                                              V1L0
&A       SETA      24                                              V1L0
&NAME    DS        0H                                              V1L0
.A       ANOP                                                      V1L0
         M         R2,DIM1+&A                                      V1L0
&A       SETA      &A-4                                            V1L0
         AIF       (NOT (&A EQ 0 AND '&OP' EQ 'OMITLAST')).B       V1L0
         MEXIT                                                     V1L0
.B       ANOP                                                      V1L0
         AIF       (&A GE 0).A                                     V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    JUMPTAB   &INC                                            V1L0
         LCLA      &A                                              V1L0
&A       SETA      (&INC)*6                                        V1L0
&NAME    DC        AL1(*-*)                                        V1L0
.A       ANOP                                                      V1L0
         DC        AL1(&A)                                         V1L0
&A       SETA      &A-&INC                                         V1L0
         AIF       (&A GE 0).A                                     V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    BUMP      &R,&LOC,&H                                      V1L0
         LCLC      &L                                              V1L0
         LCLC      &RR                                             V1L0
         AIF       ('&SYSLIST(2)' NE '').A                         V1L0
&RR      SETC      'R3'                                            V1L0
&L       SETC      '&SYSLIST(1)'                                   V1L0
         AGO       .B                                              V1L0
.A       ANOP                                                      V1L0
&RR      SETC      '&R'                                            V1L0
&L       SETC      '&LOC'                                          V1L0
.B       ANOP                                                      V1L0
&NAME    L&H       &RR,&L                                          V1L0
         LA        &RR,1(0,&RR)                                    V1L0
         ST&H      &RR,&L                                          V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    TVNAM     &A                                              V1L0
         GBLA      &TVNAM#                                         V1L0
&TVNAM#  SETA      &TVNAM#+1                                       V1L0
         AIF       ('&A'(1,1) NE 'R').A                            V1L0
&NAME    LR        R7,&A                                           V1L0
         AGO       .B                                              V1L0
.A       ANOP                                                      V1L0
&NAME    LA        R7,&A                                           V1L0
.B       ANOP                                                      V1L0
         THEN      (DO,TVNAM)          CALL NAM TEST ROUTINE       V1L0
         MEND                                                      V1L0
         EJECT                                                     V1L0
         MACRO                                                     V1L0
&NAME    TSS
.*     SET SWITCH TO INDICATE WHETHER SUBSCIPT OR DIMENSION PRESENTV1L0
&NAME    IC        R3,SOPTR                                        V1L5
         STC       R3,TSSVABL                                      V1L5
         MEND                                                      V1L0
         EJECT                                                     V1L0
         PRINT     OFF
         TITLE     '### SPEX ###     MISCELLANEOUS DEFINITIONS'    V1L0
         COPY      OPTIONS                                         V1L0
         $PUNCH    SPEX                                            DVS2
         EJECT                                                     V1L0
         COPY      CDEFN                                           V1L0
         PRINT     ON                                              V1L0
TSTAK    DSECT                                                     V1L0
TLINK    DS        H                                               V1L0
TOPTR    DS        X                                               V1L0
TCODE    DS        X                                               V1L0
TOPND    DS        F                                               V1L0
TIMPL    DSECT                                                     V1L0
TIMPL1   DS        CL42                                            V1L0
TIMPL2   DS        CL42                                            V1L0
         PRINT     OFF                                             V1L0
         EJECT                                                     V1L0
SPEX     CSECT                                                     V1L0
STARTA   DSECT                                                     V1L0
         COPY      STARTA                                          V1L0
COMMR    DSECT                                                     V1L0
         COPY      COMMR                                           V1L0
         ERRTABLE                                                  V1L0
         PRINT     ON                                              V1L0
         EJECT                                                     V1L0
         EXTRN     IDATA                                           V1L0
&DECK    SETC      'SPEX'                                          V1L0
         COPY      EXTRN                                           V1L0
         ENTRY     TEQUIV                                          V1L0
         ENTRY     TEQUIV1                                         V1L0
         ENTRY     TCOMM                                           V1L0
         ENTRY     TIMPCIT                                         V1L0
         ENTRY     TEXTE                                           V1L0
         ENTRY     TDIME                                           V1L0
         ENTRY     TLOGCL                                          V1L0
         ENTRY     TINTGR                                          V1L0
         ENTRY     TREAL                                           V1L0
         ENTRY     TCHARAC                                         V1L0
         ENTRY     TCMPLX                                          V1L0
         ENTRY     TDBLPREC                                        V1L0
         PRINT     ON                                              V1L0
         PRINT     ON,&LIST                                        V1L0
         NOMACROS                                                  V1L0
         TITLE     '### SPEX ###     TYPE AND DIMENSION'           V1L0
*******************************************************************V1L0
*                                                                 *V1L0
SPEX     CSECT                                                     V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         SPACE     2                                               V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*********                                                 *********V1L0
*********                R E A L                          *********V1L0
*********                                                 *********V1L0
*********                I N T E G E R                    *********V1L0
*********                                                 *********V1L0
*********                L O G I C A L                    *********V1L0
*********                                                 *********V1L0
*********                C O M P L E X                    *********V1L0
*********                                                 *********V1L0
*********                C H A R A C T E R                *********V1L0
*********                                                 *********V1L0
*********                D I M E N S I O N                *********V1L0
*********                                                 *********V1L0
*********                D O U B L E   P R E C I S I O N  *********V1L0
*********                                                 *********V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
CIMLT    EQU       CIMPL1                                          V1L0
TM1SS    EQU       B'01100000'                                     V1L0
TS       EQU       R1                                              V1L0
COM      EQU       COMMA                                           V1L0
COMB     EQU       B'00110010'                                     V1L0
REAL     EQU       B'00000100'                                     V1L0
INT      EQU       B'00000010'                                     V1L0
DIM1     EQU       DLEN+4                                          V1L0
USE      EQU       B'01000000'                                     V1L0
FBIT     EQU       B'01000000'                                     V1L0
TEOL     EQU       X'01'                                           V1L0
         USING     STAK,RS                                         V1L0
         USING     VLIST,TS                                        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DIMENSION ENTRY                  *********V1L0
*******************************************************************V1L0
TDIME    CENT      TSAVER                                          V1L0
         THEN      (DO,TBEFOR)         CHECK STATEMENT SEQUENCE    V1L0
         MVI       TSTAT,C'D'          SET STATEMENT TYPE          V1L0
         B         TESTNAME            GO TO CHECK FOR NAME        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DOUBLE PRECISION ENTRY           *********V1L0
*******************************************************************V1L0
TDBLPREC CENT      TSAVER                                          V1L0
         THEN      (DO,TBEFOR)         CHECK STATEMENT SEQUENCE    V1L0
         MVI       TSTAT,C'T'          SET STATEMENT TYPE          V1L0
         MVI       TML1,REAL8          SET DEFAULT TYPE FOR VARS   V1L0
*        THE VALUE IN THE NEXT INST IS A MULTIPLE OF X'08'         V1L0
         LA        R2,15*256+8         LOAD STANDARD LENGTH        V1L0
         LA        R3,8                LOAD OPTIONAL LENGTH        V1L0
         STM       R2,R3,TOPTLEN       SAVE LENGTHS                V1L0
         ST        R2,TYPIMPLN         DEFAULT LENGTH              V1L0
         B         TESTNAME            GO TO CHECK FOR NAME        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                LOGICAL ENTRY                    *********V1L0
*******************************************************************V1L0
TLOGCL   CENT      TSAVER                                          V1L0
         MVI       TML1,LOG            SET DEFAULT TYPE FOR VARS   V1L0
         LA        R2,4                LOAD STANDARD LENGTH        V1L0
         LA        R3,1                LOAD OPTIONAL LENGTH        V1L0
         B         TESTAR              DO SYNTAX CHECKING          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                INTEGER ENTRY                    *********V1L0
*******************************************************************V1L0
TINTGR   CENT      TSAVER                                          V1L0
         MVI       TML1,INT            SET DEFAULT YPE FOR VARS    V1L0
         LA        R2,4                LOAD STANDARD LENGTH        V1L0
         LA        R3,2                LOAD OPTIONAL LENGTH        V1L0
         B         TESTAR              DO SYNATX CHECKING          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                REAL ENTRY                       *********V1L0
*******************************************************************V1L0
TREAL    CENT      TSAVER                                          V1L0
         MVI       TML1,REAL           SET DEFAULT TYPE FOR VARS   V1L0
         LA        R2,4                LOAD STANDARD LENGTH        V1L0
         LA        R3,8                LOAD OPTIONAL LENGTH        V1L0
         B         TESTAR              DO SYNTAX CHECKING          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHARACTER ENTRY                  *********V1L0
*******************************************************************V1L0
TCHARAC  CENT      TSAVER                                          V1L0
         MVI       TCHAR,C'Y'          CHARACTER STATEMENT         V1L0
         MVI       TML1,CHAR           SET DEFAULT TYPE FOR VARS   V1L0
         LA        R2,1                LOAD STANDARD LENGTH        V1L0
         LA        R3,255              LOAD MAXIMUM LENGTH         V1L0
         B         TESTAR              DO SYNTAX CHECKING          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                COMPLEX ENTRY                    *********V1L0
*******************************************************************V1L0
TCMPLX   CENT      TSAVER                                          V1L0
         MVI       TML1,COMP           SET DEFAULT TYPE FOR VARS   V1L0
         LA        R2,8                LOAD STANDARD LENGTH        V1L0
         LA        R3,16               LOAD OPTIONAL LENGTH        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                STATEMENT OPTIONAL LENGTH        *********V1L0
*******************************************************************V1L0
*        TYPIMPLN IS THE LOCATION USED TO STORE THE DEFAULT        V1L0
*        LENGTH OF A VARIABLE IF V*N IS NOT SPECIFIED              V1L0
TESTAR   BALR      R11,0                                           V1L0
         USING     *,R11                                           V1L0
         THEN      (DO,TBEFOR)         CHECK STATEMENT SEQUENCE    V1L0
         STM       R2,R3,TOPTLEN       SAVE LENGTHS                V1L0
         ST        R2,TYPIMPLN         SAVE DEFAULT LENGTH         V1L5
         MVI       TSTAT,C'T'          SET STATEMENT TYPE TO 'TYPE'V1L0
         IF        (SCODE,NE,PHI),TESTNAME  CONCATENATION ?        V1L0
         SLINK                              STEP STACK             V1L0
         IF        (SOPTR,EQ,STAR),TIZSTAR  CHECK FOR '*'          V1L0
         THEN      (DO,TSX2DL),TESTNAME     OUTPUT ERROR MESSAGE   V1L0
TIZSTAR  IF        (SCODE,EQ,CCONS+1),TISCON   CHECK FOR 1 WD CONSTV1L0
         THEN      (DO,TSX4)                                       V1L1
         L         R11,=A(TYPUSING)                                V1L1
         B         TYPEND-TYPUSING(R11)                            V1L1
TISCON   L         R4,SOPND            LOAD THE LENGTH FROM STACK  V1L5
         N         R4,TM0531           GET RID OF DIGIT COUNT      V1L0
         CR        R2,R4               IS LENGTH STANDARD ?        V1L0
         BE        TXLINK              YES                         V1L0
         CR        R3,R4               IS LENGTH OPTIONAL ?        V1L0
         BE        TSETL1              YES                         V1L0
         IF        (TCHAR,NE,C'Y'),TTIM1    CHARACTER STATEMENT ?  V1L0
         CR        R3,R4               IS LENGTH <=255 ?           V1L0
         BNL       TSETL1              YES.                        V1L0
TTIM1    THEN      (DO,TERRIM1),TXLINK OUTPUT ERROR MESSAGE        V1L0
TSETL1   OI        TML1,X'01'          SET OPTIONAL LENGTH BIT     V1L0
         ST        R4,TYPIMPLN         DEFAULT LENGTH FOR VARS     V1L5
TXLINK   SLINK                         STEP STACK                  V1L0
         IF        (SOPTR,NE,PHI),THEN,(DO,TSX1)     NULL OPERATOR ?
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                LOOK FOR SYMBOL                  *********V1L0
*******************************************************************V1L0
TESTNAME BALR      R11,0                                           V1L0
         USING     *,R11                                           V1L0
TYPUSING IC        R3,TML1             LENGTH FOR THIS VARIABLE    V1L5
         STC       R3,TML2             LENGTH FOR THIS VARIABLE    V1L5
         TVNAM     TYPEND              CHECK FOR VALID NAME        V1L0
TSTONAM  ST        RS,TSNAME           SAVE P(NAME IN STACK)       V1L5
         SLINK                         LINK TO STUFF AFTER SYMBOL  V1L0
         IF        (TSTAT,EQ,C'T'),TYPEE    TYPE STATEMENT ?       V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DIMENSION STATEMENT SYNTAX       *********V1L0
*******************************************************************V1L0
         IF        (SOPTR,EQ,LBRK),TYPLB    CHECK FOR '('          V1L0
         IF        (SOPTR,NE,COM),THEN,(DO,TSX1),TYPEND            V1L0
         L         R7,TSNAME           FOR ERROR PROCESSOR         V1L5
TERRDM0  $ERROR    (NOAC,DM,0,SYMR7),R11    OUTPUT ERROR MESSAGE   V1L5
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                TYPE STATEMENT SYNTAX            *********V1L0
*******************************************************************V1L0
TYPEE    L         R3,TYPIMPLN         SET UP CURRENT LENGTH       V1L5
         ST        R3,TYPLEN                                       V1L5
TYPTEST2 IF        (SOPTR,NE,STAR),TYPLB         CHECK FOR '*'     V1L0
TISTAR   IF        (SCODE,EQ,CCONS+1),TISCON2    IS CONST 1 WD LONGV1L0
         THEN      (DO,TSX4),TYPEND    NO,OUTPUT ERROR MESSAGE     V1L0
TISCON2  L         R4,SOPND            PICK UP LENGTH FROM STACK   V1L5
         N         R4,TM0531           GET RID OF DIGIT COUNT      V1L0
         C         R4,TOPTLEN          IS LENGTH STANDARD ?        V1L0
         BNE       TYP0002             NO                          V1L0
         NI        TML2,X'FE'          SET L=0                     V1L0
         B         TYLINK                                          V1L0
TYP0002  C         R4,TOPTLEN+4        IS LENGTH OPTIONAL ?        V1L0
         BE        TIZOPLEN            YES                         V1L0
         IF        (TCHAR,NE,C'Y'),TTIM1TOO      CHARACTER STAT ?  V1L0
         C         R4,TOPTLEN+4        IS IT  <=255 ?              V1L0
         BNH       TIZOPLEN            YES                         V1L0
TTIM1TOO THEN      (DO,TERRIM1),TYLINK2     OUTPUT ERROR MESSAGE   V1L0
TIZOPLEN OI        TML2,X'01'          SET L=1                     V1L0
TYLINK   ST        R4,TYPLEN           LENGTH FOR THIS VARIABLE    V1L5
TYLINK2  SLINK                         STEP STACK                  V1L0
TYPLB    TSS                           SAVE OPERATOR               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DO SYMBOL LOOKUP                 *********V1L0
*******************************************************************V1L0
TYPLOOK  ST        RS,TSOPTR           SAVE P(STUFF AFTER NAME)    V1L5
         L         RS,TSNAME           LOAD P(NAME IN STACK)       V1L5
         LOOKUP    VARIABLE,,TYPOLD                                V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW SYMBOLS HERE                 *********V1L0
*******************************************************************V1L0
         LR        TS,R15                                          V1L0
         IF        (TSTAT,EQ,C'D'),TESTSUB       DIMENSION STAT ?  V1L0
         THEN      (DO,TYPGEN)                   FIX UP VB1        V1L0
TESTSUB  IF        (TSSVABL,NE,LBRK),TSIMTYP     DIMENSIONS ?      V1L0
         THEN      (DO,TSUSDET),(DO,TGENDIME),TDIMTYP              V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD SYMBOLS HERE                 *********V1L0
*******************************************************************V1L0
TYPOLD   LR        TS,R15                                          V1L0
         SNAPS     SYMBOL1,VLIST,16                                V1L0
TISVAR   IF        (TSTAT,EQ,C'T'),TYPE3    TYPE STATEMENT ?       V1L0
         LA        R8,TESTPSD2         BRANCH ADDRESS              V1L0
TDIMCK   THEN      (DO,TSUSDET)        COMPILE DIMENSIONS          V1L0
         THEN      (DO,TYPTEST)        CHECK VB1,VB2,VB3           V1L0
         IF        (VB3,ON,FBIT),THEN,(DO,TERRVA8),TDIMTYP     FUNC?
         IF        (VB1,SVAR),R8       SIMPLE VARIABLE ?           V1L0
         IF        (VB3,ON),R8         PSEUDO EQUIVALENCE ?        V1L0
         THEN      (DO,TERRDM1),TDIMTYP     OUTPUT ERROR MESSAGE   V1L0
TYPE3    LA        R8,TIZITYP          BRANCH ADDRESS              V1L0
         IF        (TSSVABL,EQ,LBRK),TDIMCK DIMENSIONS ?           V1L0
TNOSS    L         RS,TSOPTR           RELOAD STACK PTR            V1L5
         THEN      (DO,TYPTEST)        CHECK VB1,VB2,VB3           V1L0
TIZITYP  IF        (VB2,OFF,TYPE),TIZNTYP   IS HE RE-TYPING        V1L0
TERRTY0  $ERROR    (NOAC,TY,0,NAMTS),TANYTYP     OUTPUT ERROR MSG  V1L5
TIZNTYP  IF        (VB2,OFF,B2EQV),TYPGENER      IS IT EQUIVALENCEDV1L0
         IF        (VB2,ON,PARM),TYPGENER        CALL BY NAME      V1L0
         IF        (VB3,OFF,FBIT),TSAMLEN        FUNCTION NAME ?   V1L0
         IF        (TSSVABL,EQ,LBRK),THEN,(DO,TERRVAA),TDIMTYP BAD V1L0
         B         TYPGENER            NOT DIMENSIONING FUNC NAME  V1L0
TSAMLEN  CLC       VLEN,TYPLEN+3       IS HE CHANGING LENGTH ?     V1L0
         BE        TYPGENER            NO.GOOD FOR HIM(HER,IT)     V1L0
TERRTY1  $ERROR    (NOAC,TY,1,NAMTS),TANYTYP     IMPLEMENT. RESTR. V1L5
TYPGENER IC        R3,VLEN             IF 'TYPE' AFTER 'DIMENSION' V1L5
         STC       R3,TOLDLEN+3                                    V1L5
         THEN      (DO,TYPGEN)         FIX UP VB1                  V1L0
         IFALL     (VB1,DVAR),(VB2,OFF,B2EQV),THEN,(DO,TCHIFT)     V1L0
TANYTYP  EQU       *                                               V1L0
TESTPSD  IF        (TSSVABL,NE,LBRK),TSIMTYP     DIMENSIONS ?      V1L0
TESTPSD2 IF        (VB3,ON),THEN,(DO,TEQVFIX),TDIMTYP FIX ELIST,DLIST
         THEN      (DO,TGENDIME)       SET UP DLIST                V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                POST VARIABLE SYNTAX CHECK       *********V1L0
*******************************************************************V1L0
TDIMTYP  EQU       *                                               V1L0
         SNAPS     SYMBOL,VLIST,16                                 V1L0
         IF        (SCODE,NOFF,MNAME),THEN,(DO,TSX0),TYPEND        V1L0
         IF        (SCODE,NE,PHI),THEN,(DO,TSX0W),LOOP             V1L1
         SLINK                         STEP STACK                  V1L0
         B         TSLINKY                                         V1L0
TSIMTYP  EQU       *                                               V1L0
         SNAPS     SYMBOL,VLIST,16                                 V1L0
TSLINK   L         RS,TSOPTR           RELOAD POINTER TO STACK     V1L5
TSLINKY  IF        (SOPTR,EQ,SLASH),TDATA   INITIALIZATION ?       V1L0
TSLANKY  IF        (SOPTR,EQ,COM),LOOP           CHECK FOR ','     V1L0
TYPTERM  IF        (SOPTR,EQ,TERM),TYPEND        END OF STAT ?     V1L0
         THEN      (DO,TSX1),LOOP                                  V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                INITIALIZATION                   *********V1L0
*******************************************************************V1L0
TDATA    IF        (TSTAT,EQ,C'D'),THEN,(DO,TSX1),TYPEND           V1L0
         OI        CTYPESW,X'02'       NOT LAST CALL               V1L0
         MVI       TCRESS1,C'Y'        INIT HAS OCCURRED           V1L0
         LR        R3,TS               PASS POINTER TO VLIST       V1L0
         L         R15,TAIDATA         LOAD ADDRESS CONSTANT       V1L5
         OFFSET    BALR,R14,R15        OFF TO INOUT                V1L0
         IF        (CTYPESW,EQ,X'00'),TNODATA    ERRORS ?          V1L0
         IF        (SCODE,EQ,PHI),TDATAOK                          V1L3
         LA        RDONE,TSLANKY       GET READY FOR RETURN        V1L3
         MVI       SOPTR,COM           PUT COMMA IN STACK          V1L3
         B         TSX0W               GIVE WARNING                V1L3
TDATAOK  EQU       *                                               V1L3
         SLINK                         STEP STACK                  V1L0
         B         TSLANKY                                         V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                END OF STATEMENT                 *********V1L0
*******************************************************************V1L0
TYPEND   IF        (TCRESS1,EQ,C'N'),TNODATA     WAS THERE INIT ?  V1L0
         MVI       CTYPESW,X'01'       LAST CALL                   V1L0
         L         R15,TAIDATA         LOAD ADDRESS CONSTANT       V1L5
         OFFSET    BALR,R14,R15        OFF TO INOUT                V1L0
         MVI       TCRESS1,C'N'        RESET SWITCH                V1L0
TNODATA  MVI       TCHAR,C'N'          RESET SWITCH                V1L0
         B         CRET                RETURN TO SCAN              V1L0
         TITLE     '### SPEX ###     EQUIVALENCE'                  V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*********                                                 *********V1L0
*********                E Q U I V A L E N C E            *********V1L0
*********                                                 *********V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                ERROR CODES                      *********V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        SV-0      WRONG NUMBER OF SUBSCIPTS                      *V1L0
*        SS-1      SUBSCIPTS OUTSIDE DIMESNION                    *V1L0
*        EV-0      ATTEMPT TO EQUIVALENCE A VARIABLE TO ITSELF    *V1L0
*        EV-1      ATTEMPT TO EQUIVALENCE A S/P PARAMETER         *V1L0
*        EV-2      LESS THAN TWO (2) MEMBERS IN AN EQV LIST       *V1L0
*        EV-4      PREVIOUSLY EQV'D VARIABLE RE-EQV'D INCORRECTLY *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********               ENTRY SEQUENCE                    *********V1L0
*******************************************************************V1L0
TEQUIV1  CENT      TSAVER              ENTRY FROM LANDR            V1L0
         MVI       TEQVBYT,X'FF'       SET FLAG                    V1L0
         B         TBUMPCK                                         V1L0
TEQUIV   CMENT     TSAVER,TEQUIV1                                  V1L0
         THEN      (DO,TBEFOR)         CHECK STATEMENT SEQUENCE    V1L0
         $FREE     R3                                              V1L5
         MVI       TSTAT,C'E'          SET  STATEMENT TYPE         V1L0
         AIF       ('&SNAPS' NE 'USE').TTTT01                      V1L0
         IF        (COPT,NE,C'S'),TNOSTR1                          V1L0
         SPRIN     TSTARS,80           MAKE OUTPUT LOOK SEXY       V1L0
TNOSTR1  EQU       *                                               V1L0
.TTTT01  ANOP                                                      V1L0
         IF        (SCODE,EQ,PHI),TEQVLINK  TEST FOR CONCATENATION V1L0
         THEN      (DO,TSX0),TBUMPCK        OUTPUT ERROR MESSAGE   V1L0
TEQVLINK SLINK                              STEP STACK             V1L0
         IF        (SOPTR,EQ,LBRK),TBUMPCK  CHECK FOR '('          V1L0
         THEN      (DO,TSX1),TEQVEND        OUTPUT ERROR MESSAGE   V1L0
TBUMPCK  BUMP      R3,CHECKINT,H
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                LOOK FOR VARIABLE NAME           *********V1L0
*******************************************************************V1L0
TNAMTEST TVNAM     TQVLNK              TEST FOR VALID NAME         V1L0
         ST        RS,TSNAME           SAVE STACK PTR TO NAME      V1L5
         SLINK                         STEP STACK                  V1L0
         BUMP      T#INLIST            INCREMENT ELEMENT COUNTER   V1L0
         TSS                           SAVE OPERATOR               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DO SYMBOL LOOKUP                 *********V1L0
*******************************************************************V1L0
         ST        RS,TSOPTR           P(STUFF AFTER NAME)         V1L5
         L         RS,TSNAME           RELOAD STACK POINTER TO NAMEV1L5
         LOOKUP    VARIABLE,,TEQVYES                               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW VARIABLES                    *********V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
         USING     ELIST,R8                                        V1L0
TEQVNO   LR        TS,R15                                          V1L0
         SNAPS     NEWSYM,VLIST,16                                 V1L0
         THEN      (DO,TELIST)         SET UP ELIST & LINK         V1L0
         LR        R8,R2               SET UP A(ELIST) IN R8       V1L0
         LH        R3,CHECKINT                                     V1L5
         STH       R3,CHECK                                        V1L5
         THEN      (DO,TQVFIRST)       IS VAR 1ST IN LIST ?        V1L0
TGT1LST  IF        (TSSVABL,NE,LBRK),TNTSUS SUBSCIPTS ?            V1L0
         THEN      (DO,TSUSDET)        COMPILE SUBSCIPTS           V1L0
TEQVGEND THEN      (DO,TSSDLIST)       SET UP DLIST                V1L0
         C         R4,KF3              IS # SS = 1                 V1L0
         BH        TEQVEND4            END OF VARIABLE PRECESSING  V1L0
         L         R3,TSS              GET SUBSCRIPT               V1L5
TALLOK   BCTR      R3,0                DECREMENT BY ONE            V1L0
TALLOK2  THEN      (DO,TELTLEN)        MULT R3 BY ELT LEN          V1L0
         LNR       R3,R3               MAKE NEGATIVE               V1L0
         A         R3,EOFF             ADD OFFSET(USUALLY ZERO)    V1L0
         ST        R3,EOFF             NEW OFFSET                  V1L5
         IF        (TSTAT,EQ,C'E'),TEQVEND4      EQV STAT ?        V1L0
         SNAPS     ELIST,ELIST,12                                  V1L0
         B         TFIXRET3                                        V1L0
TNPEQV   IF        (TSSVABL,EQ,LBRK),TEQVGEND    SUBSCRIPTS ?      V1L0
TNTSUS   L         RS,TSOPTR           RELOAD STACK POINTER        V1L5
         B         TEQVEND4            END OF VARIABLE PROCESSING  V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD VARIABLES                    *********V1L0
*******************************************************************V1L0
TEQVYES  LR        TS,R15                                          V1L0
         SNAPS     SYMBOL1,VLIST,16                                V1L0
         LA        R2,TEQVEND7         ERROR RETURN FOR TCOMEQV    V1L0
         THEN      (DO,TCOMEQV)        CHECK VB1,VB2,VB3           V1L0
TEST03   IF        (TSSVABL,NE,LBRK),TEST04 SUBSCRIPTS ?           V1L0
         THEN      (DO,TSUSDET)        COMPILE SUBSCIPTS           V1L0
TEST04   IF        (VB2,ON,B2EQV),TQVEQ1    ALREADY IN EQUIVALENCE?V1L0
*        MVI       TEQVBYT,X'00'                                   V1L0
         IF        (VB2,ON,B2COM),TGETELST  IS IT IN COMMON ?      V1L0
         THEN      (DO,TELIST)         NO,GET US AN ELIST          V1L0
         LR        R8,R2               SET UP A(ELIST) IN R8       V1L0
         B         TQVFRST                                         V1L0
TGETELST LINK2     TS,R8,VEC           GET A(ELIST) IN R8          V1L0
TQVFRST  THEN      (DO,TQVFIRST)       VAR FIRST IN NEW LIST ?     V1L0
         LH        R3,CHECKINT         UPDATE CHECKING INTGEGER    V1L5
         STH       R3,CHECK                                        V1L5
         IF        (VB1,SVAR),TNPEQV   IS IT A SIMPLE VARIABLE     V1L0
         IF        (TSSVABL,NE,LBRK),TNTSUS      SUBSCRIPTS ?      V1L0
         LINK2     TS,R15,VDIM         LINK TO DLIST               V1L0
         USING     DLIST,R15                                       V1L0
         C         R4,KF1              IS CURRENT #SS=1            V1L0
         BH        TOOMUCH                                         V1L0
         L         R15,DLEN            LENGTH OF ARRAY             V1L5
         IF        (VB1,NON,CHARN),TQNCHARN      CHARACTER*N ?
         SR        R14,R14             ZERO
         SR        R0,R0               ZERO
         IC        R0,VLEN             ELEMENT LENGTH
         N         R15,KM0931          ZAP HIGH ORDER BYTE
         DR        R14,R0              GET VECTOR LENGTH IN ELEMENTS
         B         TQDLENCK            CONTINUE
TQNCHARN SLDL      R14,8               SHIFT BYTE INTO R14
         SRL       R15,8(R14)          PRODUCT OF DIMENSIONS       V1L0
TQDLENCK L         R3,TSS              GET SUBSCRIPT               V1L5
         CR        R3,R15              IS SS > DIMS                V1L0
         BNH       TALLOK              CALCULATE OFFSET            V1L0
         LR        R2,R3                                           V1L0
         THEN      (DO,TERRSS3),TALLOK OUTPUT ERROR MESSAGE        V1L0
TOOMUCH  IC        R2,VB1              EXTRACT #DIMS               V1L0
         SRL       R2,4                DITTO                       V1L0
         N         R2,KF7              DITTO                       V1L0
         CR        R2,R4               #SS=#DIMS ?                 V1L0
         BE        T#SSISOK            YES                         V1L0
TQVERSV0 THEN      (DO,TERRSV0),TEQVEND7    OUTPUT ERROR MESSAGE   V1L0
T#SSISOK IF        (TSTAT,EQ,C'E'),T#SSOKQV EQUIVALENCE STATEMENT ?V1L0
         LA        R3,TFIXRET3         ERROR RETURN ADDRESS        V1L0
         B         *+8                                             V1L0
T#SSOKQV LA        R3,TEQVEND7         ERROR RETURN ADDRESS        V1L0
*        CHECK THAT EACH SS<=DIM AND CALCULATE OFFSET              V1L0
         THEN      (DO,TSSDIMCK),(DO,TVECTOR2),TALLOK2             V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                SERVICE ROUTINE                  *********V1L0
*******************************************************************V1L0
         USING     ELIST,R8                                        V1L0
TQVFIRST L         R0,T#INLIST                                     V1L5
         C         R0,KF1              IS THIS THE FIRST ELEMENT ? V1L0
         BHR       R14                 NO                          V1L0
         ST        TS,TBEGLIST         P(START OF EQV LIST)        V1L5
         BR        R14                 RETURN                      V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********          PREVIOUSLY EQUIVALENCED VARIABLES      *********V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
         USING     ELIST,R8                                        V1L0
TQVEQ1   LINK2     TS,R8,VEC           LINK TO ELIST               V1L0
         THEN      (DO,TQVFIRST)       IS VAR 1ST IN LIST ?        V1L0
         MVI       TEQVBYT,X'80'       PREVIOUSLY EQUIVALENCED     V1L0
         IF        (VB1,DIM),TNI11     IS IT DIMED OR SS'D         V1L0
         IF        (TSSVABL,EQ,LBRK),TNI10SS     ARE THERE SS ?    V1L0
TQVSIM0  L         RS,TSOPTR           LOAD STACK PTR (TO ',')     V1L5
         L         R0,EOFF             LOAD OFFSET                 V1L5
         LTR       R0,R0
         BZ        TX2                 IS OFFSET ZERO ?            V1L0
         LCR       R0,R0               NO                          V1L0
         B         TX2                 PROCESS OLD LIST            V1L0
TNI10SS  THEN      (DO,TSSDLIST)       SET UP DLIST                V1L0
         C         R4,KF3              IS #SS=1                    V1L0
         BNE       TERREV2                                         V1L0
         L         RS,TSS              LOAD SUBSCRIPT              V1L5
TREF1    BCTR      R3,0                DECREMENT BY 1              V1L0
TREF2    THEN      (DO,TELTLEN)        MULT R3 BY ELT LEN          V1L0
         A         R3,EOFF             ADD OFFSET                  V1L0
         LCR       R0,R3               COMPLEMENT IT               V1L0
         B         TX2                 PROCESS OLD LIST            V1L0
         EJECT                                                     V1L0
TNI11    IF        (TSSVABL,NE,LBRK),TQVSIM0     SUBSCRIPTS ?      V1L0
TNI11SS  LINK2     TS,R15,VDIM         SET UP P(DLIST)             V1L0
         IF        (VB3,OFF),TWASDIM   HAS IT BEEN DIMENSIONED ?   V1L0
         IF        (VB1,OFF,TM1SS),TOODOO1  NO:IS PREV. #SS=1 ?    V1L0
TERREV2  $ERROR    (NOAC,EV,2,NAMTS),TEQVEND7    OUPUT ERROR MSG   V1L5
TOODOO1  C         R4,KF1              IS CURRENT #SS=1            V1L0
         BNE       TERREV2                                         V1L0
         L         R3,TSS              YES,SO LOAD IT              V1L5
         C         R3,DIM1             IS SS<=DIM ?                V1L0
         BNH       TREF1               YES.                        V1L0
         ST        R3,DIM1             SAVE THE LARGER FOR LATER   V1L5
         B         TREF1                                           V1L0
TWASDIM  C         R4,KF1              IS CURRENT #SS=1            V1L0
         BNE       TEEDOO              NO                          V1L0
         L         R3,TSS              YES,SO LOAD IT              V1L5
         LR        R0,R3               SAVE SUBSCRIPT VALUE        V1L5
         THEN      (DO,TELTLEN)        MULT R3 BY ELT LEN          V1L0
         L         R2,DLEN             LOAD ARRAY LENGTH           V1L5
         N         R2,KM0931           ZERO SHIFT BYTE             V1L0
         CR        R2,R3               IS THE SS TOO LARGE ?       V1L0
         BNL       TGOLISGR                                        V1L0
         LR        R2,R0               RESTORE VALUE FOR ERROR MSG V1L5
         THEN      (DO,TERRSS3),TEQVEND7    YES,OUTPUT ERROR MSG   V1L0
TGOLISGR SR        R2,R2                                           V1L0
         IC        R2,VLEN             ELEMENT LENGTH              V1L0
         SR        R3,R2               DECREMENT SUBSCRIPT         V1L0
         A         R3,EOFF             ADD OFFSET                  V1L0
         LCR       R0,R3               COMPLEMENT IT               V1L0
         B         TX2                 PROCESS OLD LIST            V1L0
TEEDOO   IC        R3,VB1              EXTRACT #DIMS               V1L0
         SRL       R3,4                DITTO                       V1L0
         N         R3,KF7              DITTO                       V1L0
         CR        R3,R4               IS #SS EQUAL                V1L0
         BNE       TQVERSV0                                        V1L0
TCHEC    LA        R3,TEQVEND7         ERROR RETURN ADDRESS        V1L0
*        CHECK THAT EACH SS<=DIM AND CALCULATE OFFSET              V1L0
         THEN      (DO,TSSDIMCK),(DO,TVECTOR2),TREF2               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD LIST PROCESSING              *********V1L0
*******************************************************************V1L0
TX2      LR        R7,TS               SAVE PTR TO VLIST           V1L0
TX3      LH        R3,CHECK            GET ELIST CHECKING INTEGER  V1L0
         CH        R3,CHECKINT         IS HE EQUIV. A VARIABLE     V1L0
         BNE       TX35                TO ITSELF ?   NO.           V1L0
TERREV0  $ERROR    (NOAC,EV,0,NAMTS),TEQVEND6    OUTPUT ERROR MSG  V1L5
TX35     LH        R3,CHECKINT         UPDATE CHECKING INTEGER     V1L5
         STH       R3,CHECK                                        V1L5
         SNAPS     ESYMBOL,VLIST,16                                V1L0
         SNAPS     ELIST1,ELIST,12                                 V1L0
         L         R3,EOFF             LOAD OFFSET                 V1L5
         AR        R3,R0               ADD REFERENCE VALUE         V1L0
         ST        R3,EOFF             STORE NEW OFFSET            V1L5
         SNAPS     ELIST2,ELIST,12                                 V1L0
         IF        (EB2,OFF,TEOL),TX4  IS THIS THE END OF OLD LIST?V1L0
         NI        EB2,X'FF'-TEOL      TURN END OF LIST BIT OFF    V1L0
         ST        R8,TENDOLST         STORE PTR TO LAST ELIST     V1L5
         SNAPS     TPVMEMBR,VLIST,16                               V1L0
         SNAPS     TENDOLST,ELIST,12                               V1L0
         LINK2     R8,TS,ELINK         LINK TO START OF OLD LIST   V1L0
         ST        TS,TBEGOLST         SAVE THIS POINTER           V1L5
         B         TX45                                            V1L0
TX4      LINK2     R8,TS,ELINK         LINK TO NEXT MEMBER         V1L0
TX45     LINK2     TS,R8,VEC           LINK TO ELIST               V1L0
         CR        TS,R7               HAVE WE GONE THRU LIST      V1L0
         BNE       TX3                                             V1L0
         L         R0,T#INLIST         GET ELEMENT COUNTER         V1L5
         C         R0,KF1              ONLY ELEMENT SO FAR ?       V1L0
         BH        TX5                 NO                          V1L0
         L         R3,TBEGOLST         START OF NEW=START OF OLD   V1L5
         ST        R3,TBEGLIST                                     V1L5
         B         TX6                                             V1L0
TX5      L         R8,TPVEVOFF         PREV ELIST OF NEW LIST      V1L5
         L         R7,TBEGOLST         START OF OLD LIST           V1L5
         SETLINK   R8,R7,ELINK         SET UP LINK BETW LISTS      V1L0
TX6      L         R3,TENDOLST         END OF NEW=END OF OLD       V1L5
         ST        R3,TPVEVOFF                                     V1L5
         B         TEQVEND1            END OF VARIABLE PROCESSING  V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                END OF VARIABLE                  *********V1L0
*********                SYNTAX AND LINKING               *********V1L0
*******************************************************************V1L0
TEQVEND4 EQU       *                                               V1L0
         DROP      R8                                              V1L0
         L         R3,T#INLIST         LOAD ELEMENT COUNTER        V1L5
         C         R3,KF1              HAS THERE ONLY BEEN 1       V1L0
         BE        TNOLINK             YES                         V1L0
         L         R7,TPVEVOFF         NO,GET PTE TO PREV. ELIST   V1L5
         USING     ELIST,R7                                        V1L0
         SETLINK   R7,TS,ELINK         LINK PREV ELIST TO CURR MEMBV1L0
         DROP      R7                                              V1L0
         USING     ELIST,R8                                        V1L0
TNOLINK  ST        R8,TPVEVOFF         SAVE POINTER TO CURR. ELIST V1L5
         OI        VB2,B2EQV           TURN EQUIVALENCE BIT ON     V1L0
         SNAPS     SYMBOL,VLIST,16                                 V1L0
         SNAPS     ELIST,ELIST,12                                  V1L0
TEQVEND1 EQU       *                                               V1L0
TEQVEND6 IF        (SOPTR,EQ,RBRK),TESTEOSS      CHECK FOR ')'     V1L0
         IF        (SOPTR,EQ,COM),TEQVEND2       CHECK FOR ','     V1L0
         MVI       TERROR,C'Y'         SET ERROR FLAG              V1L0
         B         TQVLNK                                          V1L0
TESTEOSS IF        (TSSVABL,NE,LBRK),TQVLNK      WAS THERE A SS ?  V1L0
         IF        (SCODE,OFF,MNAME),TNXTEST                       V1L0
         MVI       TERROR,C'Y'         SET ERROR FLAG              V1L0
         THEN      (DO,TSX0),TQVLNK    OUTPUT ERROR MESSAGE        V1L0
TNXTEST  IF        (SCODE,NE,PHI),THEN,(DO,TSX0),TNAMTEST          V1L0
         SLINK                         STEP STACK                  V1L0
         IF        (SOPTR,EQ,COM),TEQVEND2  CHECK FOR ','          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                END OF LIST                      *********V1L0
*********                SYNATX AND LINKING               *********V1L0
*******************************************************************V1L0
TESTEOL  IF        (SOPTR,EQ,RBRK),TQVLNK   WERE THERE SS ?        V1L0
         THEN      (DO,TSX1)           NO.OUTPUT ERROR MESSAGE     V1L0
         MVI       TERROR,C'Y'         SET ERROR FLAG              V1L0
TQVLNK   L         R0,T#INLIST         PICK UP # VARS IN LIST      V1L5
         LTR       R0,R0               WERE THERE NO ELEMENTS      V1L0
         BZ        TERREV1             NONE                        V1L0
         L         R7,TBEGLIST         GET POINTER TO START OF LISTV1L5
         L         R8,TPVEVOFF         POINTER TO LAST ELIST       V1L5
         SETLINK   R8,R7,ELINK         LINK END OF LIST TO START   V1L0
         OI        EB2,TEOL            SET END OF LIST BIT IN ELISTV1L0
*******************************************************************V1L0
*        DEBUG CODING        SNAPS OUT THE WHOLE EQUIVALENCE LIST  V1L0
*******************************************************************V1L0
         AIF       ('&SNAPS' NE 'USE').TTTT2                       V1L0
         IF        (COPT,NE,C'S'),TNOSTR2                          V1L0
         LR        TS,R7                                           V1L0
TLOOPY   EQU       *                                               V1L0
         DROP      R8                                              V1L0
         SNAPS     ***EQSYM,VLIST,16                               V1L0
         IF        (VB1,SVAR),TNODLIST                             V1L0
         LR        R15,TS                                          V1L0
         LINK      R15,VDIM                                        V1L0
         USING     DLIST,R15                                       V1L0
         SNAPS     ***DLIST,DLIST,32                               V1L0
TNODLIST LINK      TS,VEC                                          V1L0
         USING     ELIST,TS                                        V1L0
         SNAPS     ***ELIST,ELIST,12                               V1L0
         IF        (EB2,ON,TEOL),TEQV2                             V1L0
         LINK      TS,ELINK                                        V1L0
         B         TLOOPY                                          V1L0
         USING     VLIST,TS                                        V1L0
TEQV2    SPRIN     TSTARS,80                                       V1L0
TNOSTR2  EQU       *                                               V1L0
.TTTT2   ANOP                                                      V1L0
*******************************************************************V1L0
         C         R0,KF1              WAS THERE ONLY 1 ELEMENT ?  V1L0
         BH        TMORDEN1            NO,MORE                     V1L0
         IF        (TEQVBYT,ON),TMORDEN1    WERE THERE PREV EQV VARV1L0
         NI        VB2,X'FF'-B2EQV     NO,SO TURN EQV BIT OFF      V1L0
TERREV1  EQU       *
*ERREV1  IF        (TEQVBYT,EQ,X'FF'),TMORDEN1   IS THIS KINDREE   V1L0
*        THE FOLLOWING ERROR CODE HAS BEEN DROPPED FOR EVALUATION  V1L0
*        $ERROR    (WARN,EV,1)         LESS THAN 2 VARS IN LIST    V1L5
TMORDEN1 SR        R0,R0               RESET ELEMENT COUNTER       V1L0
         ST        R0,T#INLIST         DITTO                       V1L5
         IF        (TERROR,EQ,C'Y'),TEQVEND WERE THERE ERRORS ?    V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW EQUIVALENCE LIST             *********V1L0
*******************************************************************V1L0
THOHUM   IF        (SCODE,OFF,MNAME),TEQVPHI                       V1L0
TEQVERED THEN      (DO,TSX0),TEQVEND   OUTPUT ERROR MESSAGE        V1L0
TEQVPHI  IF        (SCODE,NE,PHI),TEQVERED                         V1L0
         SLINK                         STEP STACK                  V1L0
         IF        (SOPTR,EQ,COM),TEQVLINK       ANOTHER LIST ?    V1L0
         IF        (SOPTR,EQ,TERM),TEQVEND       CHECKFOR EOS      V1L0
         THEN      (DO,TSX1)           OUTPUT ERROR MESSAGE        V1L0
         IF        (SOPTR,EQ,LBRK),TBUMPCK                         V1L0
         B         TEQVEND             QUIT                        V1L0
         EJECT                                                     V1L0
TEQVEND2 EQU       TNAMTEST                                        V1L0
TEQVEND7 L         R0,T#INLIST         LOAD ELEMENT COUNTER        V1L5
         BCTR      R0,0                DECREMENT BY ONE            V1L0
         ST        R0,T#INLIST         STORE IT                    V1L5
         L         RS,TSOPTR           RELOAD STACK POINTER        V1L5
         B         TEQVEND6            END OF VARIABLE PROCESSING  V1L0
         EJECT                                                     V1L0
TEQVEND  MVI       TERROR,C'N'         RESET ERROR FLAG            V1L0
         MVI       TEQVBYT,X'00'       RESET EQUIVALENCE FLAG      V1L0
         B         CRET                                            V1L0
         TITLE     '### SPEX ###     COMMON'                       V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*********                                                 *********V1L0
*********                C O M M O N                      *********V1L0
*********                                                 *********V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                REGISTER USEAGE                  *********V1L0
*******************************************************************V1L0
*        RS        STACK POINTER                                  *V1L0
*        TS        VLIST POINTER(FOR VARIABLES)                   *V1L0
*        R8        POINTS TO CURRENT COMMON BLOCK                 *V1L0
*        R7        STACK AND ELIST POINTER(TEMPORARY)             *V1L0
*        R15       ELIST POINTER(TEMPRARY)                        *V1L0
*        OTHERS    WORK                                           *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     BLIST,R8                                        V1L0
         USING     TSTAK,R7                                        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                ENTRY POINT SYNTAX               *********V1L0
*******************************************************************V1L0
TCOMM    CENT      TSAVER                                          V1L0
         AIF       ('&SNAPS' NE 'USE').COMM0                       V1L0
         SR        R8,R8                                           V1L0
         IF        (COPT,NE,C'S'),TCOMMIN                          V1L0
         SPRIN     TSTARS,80                                       V1L0
TCOMMIN  EQU       *                                               V1L0
.COMM0   ANOP                                                      V1L0
         THEN      (DO,TBEFOR)         CHECK STATEMENT SEQUENCE    V1L0
         MVI       TSTAT,C'C'          SET STATEMENT TYPE          V1L0
         USING     VLIST,TS                                        V1L0
         IF        (SCODE,EQ,PHI),TCUDBESH  TEST FOR CONCATENATION V1L0
TSETBCOM MVI       TBLNK,C'B'          'B'LANK COMMON              V1L0
         LR        R7,RS               KEEP POINTER TO VAR NAME    V1L0
         B         TYESBNK                                         V1L0
TCUDBESH SLINK                                                     V1L0
         IF        (SOPTR,EQ,SLASH),TLOOKGUD     CHECK FOR '/'     V1L0
         THEN      (DO,TSX2DL),TCOMMXIT          TOO BAD CHARLEY   V1L0
         EJECT                                                     V1L0
TISTSH   SLINK                                                     V1L0
         IF        (SOPTR,EQ,COM),TESTCNAM       CHECK FOR ','     V1L0
         AIF       ('&SNAPS' EQ 'USE').COMM1                       V1L0
         IF        (SOPTR,EQ,SLASH),TLOOKGUD     CHECK FOR '/'     V1L0
         AGO       .COMM2                                          V1L0
.COMM1   IF        (SOPTR,EQ,SLASH),THEN,(DO,TCOMDUMP),TLOOKGUD    V1L0
.COMM2   ANOP                                                      V1L0
         IF        (SOPTR,EQ,TERM),TCOMMXIT      CHECK FOR TERM    V1L0
         THEN      (DO,TSX2DL),TCOMMXIT          OUTPUT ERROR MSG  V1L0
TLOOKGUD LR        R7,RS                         P(COMBLOK NAME)   V1L0
         AH        R7,TLINK                      STEP STACK        V1L0
         IF        (TOPTR,EQ,SLASH),TNXT1        CHECK FOR  '/'    V1L0
         LR        R3,RS                         SAVE STACK PTR    V1L0
         LR        RS,R7                         FOR ERROR MSG     V1L0
         THEN      (DO,TSX2DL),TCOMMXIT          OUTPUT ERROR MSG  V1L0
*        LR        RS,R3                                           V1L0
TNXT1    IF        (SCODE,OFF,MNAME),TISYM       IS IT A SYMBOL    V1L0
         THEN      (DO,TSX2SY),TCOMMXIT          OUTPUT ERROR MSG  V1L0
TISYM    IF        (SCODE,NE,PHI),TLABCOM        BLANK COMMON ?    V1L0
         MVI       TBLNK,C'B'                    'B'LANK COMMON    V1L0
         B         TYESBNK                                         V1L0
TLABCOM  MVI       TBLNK,C'L'                    'L'ABELLED COMMON V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DO COMMON BLOCK LOOKUP           *********V1L0
*******************************************************************V1L0
TNOBNK   LOOKUP    VARIABLE,TNOT1,TYES1                            V1L0
TYESBNK  LOOKUP    SPCLNAME,,TCOMBXZT,NAME=BLANKCOM                V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW COMMON BLOCKS                *********V1L0
*******************************************************************V1L0
TNOT1    LR        R8,R15                                          V1L0
         MVI       BB1,COMB            SET B1 FOR COMMON BLOCK     V1L0
         OI        BB2,TYPE+USE        SET TYPE AND USAGE ESTAB.   V1L0
         MVI       11(R8),0            ZERO VLEN                   V1L0
         B         TNLFSLSH                                        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD COMMON BLOCKS                *********V1L0
*******************************************************************V1L0
TYES1    LR        R8,R15                                          V1L0
         IF        (BB1,EQ,COMB),TNLFSLSH   COMMON BLOCK NAME ?    V1L0
         LR        TS,R8                                           V1L0
TERRVA7  $ERROR    (NOAC,VA,7,NAMR8)                               V1L5
         MVI       TBLNK,C'E'          SET TO BAD COMMON BLOCK     V1L0
         B         TNLFSLSH                                        V1L0
         SPACE     2                                               V1L0
*******************************************************************V1L0
*********              OLD BLANK COMMON BLOCKS            *********V1L0
*******************************************************************V1L0
TCOMBXZT LR        R8,R15                                          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHECK FOR VARIABLE NAME          *********V1L0
*******************************************************************V1L0
TNLFSLSH LR        RS,R7               RESTORE P(VARIABLE NAME)    V1L0
TESTCNAM TVNAM     TCOMMXIT                                        V1L0
TNXT4    ST        RS,TSNAME           SAVE POINTER TO NAME        V1L5
         SLINK                         STEP STACK                  V1L0
         TSS                           SAVE OPERATOR               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DO SYMBOL LOOKUP                 *********V1L0
*******************************************************************V1L0
TSIMVARB ST        RS,TSOPTR           P(STUFF AFTER NAME)         V1L5
         L         RS,TSNAME           POINTER TO NAME IN STACK    V1L5
         MVI       TERROR,C'N'         RESET ERROR FLAG            V1L0
         LOOKUP    VARIABLE,,TCOMOLD                               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW VARIABLES                    *********V1L0
*******************************************************************V1L0
         LR        TS,R15                                          V1L0
         IF        (TSSVABL,NE,LBRK),TOOSIMPL    DIMENSIONS ?      V1L0
         THEN      (DO,TSUSDET)        YES,SO COMPILE THEM         V1L0
         THEN      (DO,TGENDIME)       SET UP DLIST                V1L0
TOOSIMPL OI        VB2,B2COM           TURN COMMON BIT ON          V1L0
         B         TBOFFS                                          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD VARIABLES                    *********V1L0
*******************************************************************V1L0
TCOMOLD  LR        TS,R15                                          V1L0
         SNAPS     SYMBOL1,VLIST,16                                V1L0
         LA        R2,TNOSUDEQ         ERROR RETURN ADDRESS        V1L0
         THEN      (DO,TCOMEQV)        CHECK VB1,VB2,VB3           V1L0
         IF        (VB2,OFF,B2COM),TNOTCOMD ALREADY IN COMMON ?    V1L0
         MVI       TERROR,C'E'         SET ERROR FLAG              V1L0
TERRCM0  $ERROR    (NOAC,CM,0,NAMTS)   IT WAS ALREADY COMMON'D     V1L5
TNOTCOMD IF        (TSSVABL,NE,LBRK),TCMSIM DIMENSIONS ?           V1L0
         THEN      (DO,TSUSDET)        YES,SO COMPILE THEM         V1L0
         IF        (VB1,SVAR),TNTARRA1 IS IT A SIMPLE VARIABLE ?   V1L0
         IF        (VB3,ON),TCMSIM     PSEUDO-EQUIV?               V1L0
         THEN      (DO,TERRDM1),TCMSIM OUTPUT ERROR MESSAGE        V1L0
TNTARRA1 THEN      (DO,TGENDIME)       SET UP DLIST                V1L0
TCMSIM   EQU       *                                               V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                FIX COMMON BLOCK                 *********V1L0
*********                SET UP ELIST AND LINKS           *********V1L0
*******************************************************************V1L0
TBOFFS   IF        (TERROR,EQ,C'E'),TNOSUDEQ     WERE THERE ERRORS?V1L0
         IF        (TBLNK,EQ,C'E'),TVERR1   INVALID COMBLOK NAME ? V1L0
         LH        R3,BPT              POINT TO PREV MEMBER OF LISTV1L0
         LTR       R3,R3               IF=0,THEN THIS IS 1ST ELT   V1L0
         BNZ       TNFICLST            NOT FIRST IN COMBLOK        V1L0
         SETLINK   R8,TS,BPH           LINK TO START OF LIST       V1L0
         B         TSETHEM                                         V1L0
         USING     ELIST,R7                                        V1L0
TNFICLST LINK1     R8,R3,R7            LINK TO END OF COMMON LIST  V1L0
         USING     VLIST,R7                                        V1L0
         LINK      R7,VEC              LINK TO ELIST               V1L0
         USING     ELIST,R7                                        V1L0
         NI        CB2,X'FF'-TEOL      TURN END-OF-LIST BIT OFF    V1L0
         SETLINK   R7,TS,CMLNK         LINK FROM ELIST TO CURR VAR V1L0
         USING     VLIST,TS                                        V1L0
TSETHEM  IF        (VB2,OFF,B2EQV),TGENELST DOES ELIST EXIST DEJA ?V1L0
         LINK2     TS,R7,VEC           POINT TO ELIST              V1L0
         B         TNCOMGEN                                        V1L0
TGENELST THEN      (DO,TELIST)         CREATE ELIST AND LINK       V1L0
         LR        R7,R2               SET UP A(ELIST) IN R7       V1L0
TNCOMGEN SETLINK   R8,TS,BPT           P(TAIL OF COMMON LIST)      V1L0
         SETLINK   R7,R8,CMLNK         LINK ELIST TO COMBLOK       V1L0
         OI        VB2,B2COM           TURN COMMON BIT ON          V1L0
         OI        CB2,TEOL            TURN END OF LIST BIT ON     V1L0
         SPACE
*TVERR1  IFALL     (VB1,DIM),(VB3,OFF),TNOSUDEQ                    V1L0
TVERR1   IFANY     (VB3,OFF),(TSSVABL,NE,LBRK),TNOSUDEQ            V1L0
         STM       R7,R8,TSAVCBEL      SAVE COMBLOK & ELIST PTR'S  V1L0
         THEN      (DO,TEQVFIX)        FIX EQUIVALENCE             V1L0
         LM        R7,R8,TSAVCBEL      RESTORE COMBLOK & ELIST     V1L0
         EJECT                                                     V1L0
TNOSUDEQ EQU       *                                               V1L0
         SNAPS     SYMBOL,VLIST,16                                 V1L0
         SNAPS     COMBLOK,BLIST,16                                V1L0
         SNAPS     ELIST,ELIST,12                                  V1L0
         IF        (TSSVABL,NE,LBRK),TISTSH WERE THERE DIMENSIONS ?V1L0
         IF        (SCODE,EQ,PHI),TISTSH    CHECK FOR NULL OPND    V1L0
         THEN      (DO,TSX0)                OUPUT ERROR MESSAGE    V1L0
         AIF       ('&SNAPS' EQ 'USE').COMM3                       V1L0
TCOMMXIT B         CRET                     RETURN TO SCAN         V1L0
         AGO       .COMM4                                          V1L0
.COMM3   AIF       ('&SNAPS' NE 'USE').COMM4                       V1L0
TCOMMXIT THEN      (DO,TCOMDUMP),CRET                              V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********          DEBUG CODING...SNAPS OUT ENTIRE COMMON BLOCK****V1L0
*******************************************************************V1L0
TCOMDUMP EQU       *                                               V1L0
         LTR       R8,R8                                           V1L0
         BZR       RDONE                                           V1L0
         IF        (TBLNK,EQ,C'E'),DONE    BAD COMMON BLOCK?       V1L0
         USING     BLIST,R8                                        V1L0
         SNAPS     ***CBLOK,BLIST,16                               V1L0
         LH        R2,BPH
         LTR       R2,R2
         BZR       RDONE
         LINK      R8,BPH                                          V1L0
         USING     VLIST,R8                                        V1L0
TCOMLOOP EQU       *                                               V1L0
         SNAPS     ***CMSYM,VLIST,16                               V1L0
         IF        (VB1,SVAR),TNDLIST                              V1L0
         LR        R15,R8                                          V1L0
         LINK      R15,VDIM                                        V1L0
         USING     DLIST,R15                                       V1L0
         SNAPS     ***DLIST,DLIST,32                               V1L0
TNDLIST  LINK      R8,VEC                                          V1L0
         USING     ELIST,R8                                        V1L0
         SNAPS     ***ELIST,ELIST,12                               V1L0
         IF        (CB2,ON,TEOL),TCOMMEND                          V1L0
         LINK      R8,CMLNK                                        V1L0
         B         TCOMLOOP                                        V1L0
TCOMMEND IF        (COPT,NE,C'S'),DONE                             V1L0
         SPRIN     TSTARS,80                                       V1L0
         BR        R14                                             V1L0
*******************************************************************V1L0
.COMM4   ANOP                                                      V1L0
         TITLE     '### SPEX ###     IMPLICIT'                     V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*********                                                 *********V1L0
*********                I M P L I C I T                  *********V1L0
*********                                                 *********V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                REGISTER USAGE                   *********V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        RS        POINTER TO STACK                               *V1L0
*        R8        POINTER TO CIMLT AND VLIST                     *V1L0
*        R1        POINTER TO CIMLT                               *V1L0
*        OTHERS    WORK                                           *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     TIMPL,R8                                        V1L0
         DROP      TS                                              V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                IMPLICIT ERROR CODES             *********V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        IM-0      INVALID MODE SPECIFIED IN IMPLICIT STATEMENT   *V1L0
*        IM-1      INVALID LENGTH SPECIFIED IN IMPLICIT OR TYPE   *V1L0
*                  STATEMENT                                      *V1L0
*        IM-3      IMPROPER ALPHABETIC SEQUENCE IN CHARACTER RANGE*V1L0
*        IM-4      SPECIFICATION WAS NOT A SINGLE CHARACTER       *V1L0
*        IM-5      IMPLICIT STATEMENT DOES NOT PRECEDE OTHER      *V1L0
*                  SPECIFICATION STATEMENTS                       *V1L0
*        IM-6      ATTEMPT TO    TYPE A CHARACTER MORE THAN ONCE  *V1L0
*        IM-7      MORE THAN ONE IMPLICIT STATEMENT PER PROGRAM   *V1L0
*                  IS NOT ALLOWED                                 *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        IMPLICIT STATEMENTS MUST BE THE FIRST IN A PROGRAM       *V1L0
*        SEGMENT.CASF1,CIMPLIT,AND CSPEX ARE USED TO CHECK THIS.  *V1L0
*        THESE SWITCHES ARE SET AS FOLLOWS:                       *V1L0
*                                                                 *V1L0
*             CASF1     X'00'     THIS STATEMENT WAS PRECEDED ONLY*V1L0
*                                 BY FUNCTION,TYPE FUNCTION,      *V1L0
*                                 BLOCK DATA OR SPECIFICATION     *V1L0
*                                 STATEMENTS.                     *V1L0
*                       X'01'     THIS STATEMENT WAS PRECEDED     *V1L0
*                                 BY AN ASF.                      *V1L0
*                       X'02'     THIS STATEMENT WAS PRECEDED     *V1L0
*                                 BY AN EXECUTABLE STATEMENT.     *V1L0
*                                                                 *V1L0
*             CIMPLIT   X'00'     THIS IS THE FIRST IMPLICIT STAT.*V1L0
*                       X'FF'     THIS IS NOT FIRST IMPLICIT STAT. V1L0
*                                                                  V1L0
*             CSPEX     X'00'     THERE WERE NO PREVIOUS SPEX     *V1L0
*                                 STATEMENTS OTHER THAN IMPLICIT. *V1L0
*                       X'FF'     THIS STATEMENT WAS PRECEDED     *V1L0
*                                 OTHER SPECIFICATION STATEMENTS. *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
TIMPCIT  CENT      TSAVER                                          V1L0
         IFALL     (CASF1,EQ,X'00'),(CSPEX,EQ,X'00'),TNOTASS1      V1L0
         $ERROR    (NOAC,IM,5)         LEARN THE SILLY RULES DAD   V1L5
TNOTASS1 IF        (CIMPLIT,EQ,X'00'),TNOTASS2                     V1L0
         $ERROR    (WARN,IM,7),TDIMWIT TUT TUT TUT                 V1L5
TNOTASS2 IC        R3,CASF1            FOR LATER TESTING           V1L5
         STC       R3,CIMPLIT          FOR LATER TESTING           V1L5
TDIMWIT  EQU       *                                               V1L0
         SNAPS     CIMPL1O,CIMPL1,42                               V1L0
         SNAPS     CIMPL2O,CIMPL2,42                               V1L0
         LA        R1,CIMLT-C'A'       ADDRESS OF IMPLICIT TABLE
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                DETERMINE TYPE                   *********V1L0
*******************************************************************V1L0
TAGOGO   TVNAM     TSTOP               TEST FOR VALID SYMBOL       V1L0
         CLC       SCODE(5),=X'01D9C5C1D3'       X'01',C'REAL'     V1L0
         BNE       TRYINTGR                                        V1L0
         MVI       TMODLEN,SIMV+REAL   SET TYPE BYTE               V1L0
         MVI       TMODLEN2,4          SET LENGTH BYTE             V1L0
         B         TALINK                                          V1L0
TRYINTGR CLC       SOPND(8),=C'INTEGER '                           V1L0
         BNE       TRYCMPLX                                        V1L0
         MVI       TMODLEN,SIMV+INT    SET TYPE BYTE               V1L0
         MVI       TMODLEN2,4          SET LENGTH BYTE             V1L0
         B         TALINK                                          V1L0
TRYCMPLX CLC       SOPND(8),=C'COMPLEX '                           V1L0
         BNE       TRYLOGCL                                        V1L0
         MVI       TMODLEN,SIMV+COMP   SET TYPE BYTE               V1L0
         MVI       TMODLEN2,8          SET LENGTH BYTE             V1L0
         B         TALINK                                          V1L0
TRYLOGCL CLC       SOPND,=C'LOGICAL '                              V1L0
         BNE       TRYCHAR                                         V1L0
         MVI       TMODLEN,SIMV+LOG    SET TYPE BYTE               V1L0
         MVI       TMODLEN2,4          SET LENGTH BYTE             V1L0
         B         TALINK                                          V1L0
TRYCHAR  CLC       SOPND(10),=C'CHARACTER '                        V1L0
         BE        TIM0OK                                          V1L0
TERRIM0  $ERROR    (NOAC,IM,0,SYMRS,INVAL),TPOSTIMP   OUPUT ERROR  V1L5
TIM0OK   MVI       TMODLEN,SIMV+CHAR   SET TYPE BYTE               V1L0
         MVI       TMODLEN2,1          SET LENGTH BYTE             V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHECK LENGTHS                    *********V1L0
*******************************************************************V1L0
TALINK   SLINK                         STEP STACK                  V1L0
         IF        (SOPTR,NE,STAR),TRYLEFBR+4    CHECK FOR '*'     V1L0
         IF        (SCODE,EQ,CCONS+1),TIMLENOK   1 WORD CONSTANT ? V1L0
         IF        (SCODE,OFF,CCONS),THEN,(DO,TSX4),TPOSTIMP       V1L0
         THEN      (DO,TERRIM1),TRYLEFBR    OUPUT ERROR MESSAGE    V1L0
TIMLENOK SR        R2,R2               ZERO GARBAGE                V1L0
         SR        R3,R3               ZERO GARBAGE                V1L0
         IC        R3,TMODLEN          GET MODEL VB1 FOR THIS TYPE V1L0
         IC        R2,TAYBLAD(R3)      GET STANDARD LENGTH         V1L0
         IC        R3,TAYBLAD+1(R3)    GET OPTIONAL LENGTH         V1L0
         L         R0,SOPND            GET LENGTH FROM STACK       V1L5
         N         R0,TM0531           GET RID OF DIGIT COUNT      V1L0
         CR        R0,R2               IS THIS A STANDARD LENGTH ? V1L0
         BE        TRYLEFBR            YES                         V1L0
         CR        R0,R3               IS THIS AN OPTIONAL LENGTH ?V1L0
         BE        TSOPTBIT            YOU BET!                    V1L0
         IF        (TMODLEN,OFF,CHAR),TIMERIM1   CHARACTER SPEC ?  V1L0
         CR        R0,R3               IS IT <=255 ?               V1L0
         BNH       TSOPTBIT            YES                         V1L0
         LR        R0,R3               NO,THE BLITHERING IDIOT     V1L0
TIMERIM1 MVI       CIMPLIT,X'0F'       SET ERROR FLAG              V1L0
         THEN      (DO,TERRIM1),TSTORIT     OUTPUT ERROR MESSAGE   V1L0
TSOPTBIT OI        TMODLEN,X'01'       SET OPTIONAL LENGTH BIT     V1L0
TSTORIT  STC       R0,TMODLEN2         PUT LENGTH IN CIMLT         V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHECK CHARACTERS                 *********V1L0
*******************************************************************V1L0
TRYLEFBR SLINK                              STEP STACK             V1L0
         IF        (SOPTR,EQ,LBRK),TIMPCITP CHECK FOR '('          V1L0
         THEN      (DO,TSX1),TPOSTIMP       OUTPUT ERROR MESSAGE   V1L0
TIMPCITP IF        (SCODE,OFF,MNAME),TNORR  IS IT A NAME ?         V1L0
         THEN      (DO,TSX2SY),TPOSTIMP     OUTPUT ERROR MESSAGE   V1L0
TNORR    IF        (SOPND,NE,C'$'),TNOTA$   IS IT A G.D. $ ?       V1L0
         MVI       SOPND,C'Z'+1             MAKE $ INTO 'Z+1'      V1L0
TNOTA$   IF        (SOPND+1,EQ,C' '),TOKBLANK    MUST BE LEN=1 CHARV1L0
         THEN      (DO,TERRIM4)        OUTPUT ERROR MESSAGE        V1L0
         IF        (SOPND,EQ,PHI),TADLNK2     , FOLLOWED BY )      V1L2
TOKBLANK SR        R8,R8               ZERO R8                     V1L0
         IC        R8,SOPND            KEEP STARTING LETTER        V1L0
         LA        R8,0(R8,R1)         GET ABS ADDR                V1L0
         SLINK                         STEP STACK                  V1L0
         IF        (SOPTR,EQ,COM),TWASERR   CHECK FOR ','          V1L0
         IF        (SOPTR,NE,RBRK),TRANGE   CHECK FOR ')'          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHANGE CIMLT FOR SINGLE CHAR     *********V1L0
*******************************************************************V1L0
TWASERR  IF        (CIMPLIT,NE,X'00'),TADLNK24   WERE THERE ERRORS?V1L0
         IF        (TIMPL1,OFF,TYPE),TIMPOK      DEJA IMPLICITED ? V1L0
         THEN      (DO,TERRIM6),TADLNK24         YES,OUTPUT ERROR  V1L0
TIMPOK   IC        R3,TMODLEN          FIX CIMPL1                  V1L5
         STC       R3,TIMPL1                                       V1L5
         IC        R3,TMODLEN2         FIX CIMPL2                  V1L5
         STC       R3,TIMPL2                                       V1L5
         B         TADLNK24                                        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHECK FOR CHAR RANGE             *********V1L0
*******************************************************************V1L0
TRANGE   IF        (SOPTR,EQ,MINUS),TISRANGE     CHECK FOR '-'     V1L0
         THEN      (DO,TSX1),TADLNK24            NO,OUTPUT ERROR   V1L0
TISRANGE IF        (SOPND+1,EQ,C' '),TUOFW       IS IT A ' '       V1L0
         THEN      (DO,TERRIM4)                  NO,OUTPUT ERROR   V1L0
TUOFW    IF        (SOPND,NE,C'$'),TNO$ERR       IS IT A G.D. '$'  V1L0
         MVI       SOPND,C'Z'+1         MAKE $ INTO 'Z+1'          V1L0
TNO$ERR  SR        R15,R15             ZERO R15                    V1L0
         IC        R15,SOPND           GET LETTER                  V1L0
         LA        R15,0(R15,R1)       GET ABS ADDR                V1L0
         CR        R8,R15              IS RANGE A CORRECT SEQUENCE V1L0
         BNH       TSEQOK                                          V1L0
         $ERROR    (NOAC,IM,3,SYMRS,INVAL)  SHOULD LEARN ALPHABET  V1L5
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                CHANGE CIMPLT FOR CHAR RANGE     *********V1L0
*******************************************************************V1L0
TSEQOK   IF        (CIMPLIT,NE,X'00'),TADLNK2    WERE THERE ERRORS?V1L0
         IC        R3,TMODLEN          LOAD TYPE                   V1L0
         IC        R4,TMODLEN2         LOAD LENGTH                 V1L0
TESTSECM IF        (TIMPL1,OFF,TYPE),TNOTSECM    DEJA IMPLICITED ? V1L0
         THEN      (DO,TERRIM6),TNSECM4     YES,OUTPUT ERROR MSG   V1L0
TNOTSECM STC       R3,TIMPL1           UPDATE TYPE PART OF TABLE   V1L0
         STC       R4,TIMPL2           UPDATE LENGTH PART OF TABLE V1L0
TNSECM4  LA        R8,1(0,R8)          BUMP POINTER                V1L0
         CR        R8,R15              HAVE WE DONE WHOLE RANGE ?  V1L0
         BNH       TESTSECM            NO                          V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                MORE SYNTAX CHECKING             *********V1L0
*******************************************************************V1L0
TADLNK2  SLINK                              YES STEP STACK         V1L0
TADLNK24 IF        (SOPTR,EQ,COM),TIMPCITP  CHECK FOR ','          V1L0
TISTRBRK IF        (SOPTR,EQ,RBRK),TENDS    CHECK FOR ')'          V1L0
         THEN      (DO,TSX1),TPOSTIMP       OUTPUT ERROR MESSAGE   V1L0
TENDS    IF        (SCODE,NE,PHI),THEN,(DO,TSX0),TPOSTIMP          V1L0
         SLINK                              STEP STACK             V1L0
         IF        (SOPTR,EQ,COM),TAGOGO    CHECK FOR ','          V1L0
TOPNOTCH EQU       *                                               V1L0
         SNAPS     CIMPL1N,CIMPL1,42                               V1L0
         SNAPS     CIMPL2N,CIMPL2,42                               V1L0
         IF        (SOPTR,EQ,TERM),TPOSTIMP CHECK FOR TERMINATOR   V1L0
         THEN      (DO,TSX1)           OUTPUT ERROR MESSAGE        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                POST IMPLICIT PROCESSING         *********V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE RESETS THE TYPE AND LENGTH BITS OF FUNCTIONS*V1L0
*        AND SUB-PROGRAM ARGUMENTS,TO REFLECT ANY CHANGES MADE    *V1L0
*        TO CIMLT BY THIS IMPLICIT STATEMENT                      *V1L0
*                                                                 *V1L0
*        R15       CVEND                                          *V1L0
*        R8        CVBEG (LATER INCREMETED)                       *V1L0
*        R1        CIMLT-193                                      *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         $FREE     R1,R2,R3                                        V1L5
         USING     VLIST,R8                                        V1L0
TPOSTIMP IF        (CIMPLIT,NE,X'00'),TSTOP WERE THERE ERRORS ?    V1L0
         L         R8,CVBEG            P(START OF VLIST)
         L         R15,CVEND           P(END OF VLIST)
         CR        R8,R15              ANY ELEMENTS?               V1L3
         BE        TENDPOST            NO                          V1L3
         SR        R3,R3               YES
*        JUST SKIP OVER SUBROUTINE NAMES.FUNCTION NAMES ARE        V1L0
*        PROCESSED.ANY OTHER KIND OF NAME AS THE FIRST SYMBOL IN   V1L0
*        LIST MEANS IT'S EITHER A MAIN PROG OR BLOCK DATA S/P      V1L0
         IF        (CSRSWTCH,SUBR),TA       ARE WE IN A SUBROUTINE?V1L0
         IFNOT     (CSRSWTCH,FUNC),TENDPOST ARE WE IN A FUNCTION ? V1L0
         IF        (VB2,ON,TYPE),TA         IS IT ALREADY TYPED ?  V1L0
TAG      IF        (VNAME,NE,C'$'),TPNOT$   IS IT A G.D. $ ?       V1L0
         LA        R2,ZR1+C'Z'+1       POINT TO $ IN CIMPL1
         B         TESTBITS            SKIP AROUND                 V1L0
TPNOT$   IC        R3,VNAME            GET FIRST BYTE OF NAME      V1L0
         LA        R2,ZR1(R3)          POINT TO LETTER IN CIMPL1
         IF        (VB1,EQ,COMB),TA    DON'T CHANGE COMBLOK NAMES  V1L2
TESTBITS IF        (ZR2,OFF,TYPE),TA   NO CHANGE                   V1L0
         MVN       VB1(1),ZR2          FIXUP IT'S TYPE BITS
         MVC       VLEN(1),ZR2+42      FIXUP IT'S LENGTH
*        ERROR     (WARN,IM,8,NAMR8)   PRODUCE WARNING
TA       LINK      R8,VLINK            LINK TO NEXT MEMBER OF VLISTV1L0
         CR        R8,R15              HAVE WE GOT ALL SYMBOLS ?   V1L0
         BNE       TAG                 NO                          V1L0
         EJECT                                                     V1L0
TENDPOST EQU       *                                               V1L0
TABNEXIT EQU       *                                               V1L0
TSTOP    EQU       *                                               V1L0
         MVI       CIMPLIT,X'FF'       WE HAVE HAD AN IMPLICIT STATV1L0
         B         CRET                RETURN TO SCAN              V1L0
         TITLE     '### SPEX ###     EXTERNAL'                     V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*********                                                 *********V1L0
*********                E X T E R N A L                  *********V1L0
*********                                                 *********V1L0
*******************************************************************V1L0
*******************************************************************V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                REGISTER USAGE                   *********V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        RS        STACK POINTER                                  *V1L0
*        R15       VLIST POINTER                                  *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        XT-1      CHARCATER VARIABLE APPEARS IN EXTERNAL STATEMENTV1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         DROP      R7,R8                                           V1L0
         USING     VLIST,R15                                       V1L0
         EJECT                                                     V1L0
TSP      EQU       B'01000000'                                     V1L0
*******************************************************************V1L0
*********                ENTRY POINT                      *********V1L0
*******************************************************************V1L0
TEXTE    CENT      TSAVER                                          V1L0
         THEN      (DO,TBEFOR)                                     V1L0
         BAL       R11,TEXT1           SET R11 FOR LOOP            V1L0
         USING     *,R11                                           V1L0
         SLINK                                                     V1L0
         IF        (SOPTR,EQ,COM),TEXT1           CHECK FOR ','    V1L0
         IF        (SOPTR,EQ,TERM),CRET         CHECK FOR TERM     V1L0
         THEN      (DO,TSX1)                                       V1L0
*                                      CHECK CODE FOR NAME         V1L0
TEXT1    TVNAM     R11                                             V1L0
         LOOKUP    VARIABLE,TXTNEW                                 V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                OLD SYMBOLS                      *********V1L0
*******************************************************************V1L0
         SNAPS     EXTERN1,VLIST,16                                V1L0
TXTOLD   IF        (VB1,SVAR),TXTSVAR  IS IT A SIMV AR             V1L0
         IFNOT     (VB1,RTN),TERXT2    IS IT NOT A ROUTINE         V1L0
         IF        (VB2,NOFF,X'03'),TERXT2                         V1L0X
                   ENTRY OR ASF IN THIS PROG IS AN ERROR           V1L0
         IF        (VB2,OFF,X'04'),TXTNEW      PREV EXTERNAL'D ?   V1L0
TXTSVAR  IF        (VB2,NOFF,X'FF'-TYPE-PARM),TERXT2               V1L0
         IF        (VB1,OFF,CHAR1),TXTNEW   CHARACTER VARIABLE     V1L1
         LR        TS,R15                                          V1L1
         THEN      (DO,TERRVAA),LOOP                               V1L1
         EJECT                                                     V1L0
*******************************************************************V1L0
*********                NEW SYMBOLS                      *********V1L0
*******************************************************************V1L0
TXTNEW   NI        VB1,X'0F'           SAVE TYPE AND LENGHT        V1L0
         OI        VB1,FUNC            ASSUME A FUNCTION           V1L0
TOKXT    OI        VB2,USAGE2+EXTRN    SET U2 & EXTRN BITS ON      V1L5
         MVC       VB3(2),XISN                                     V1L3
         SNAPS     EXTERN2,VLIST,16                                V1L0
         BR        R11                                             V1L0
TERXT2   LR        TS,R15                                          V1L0
         THEN      (DO,TERRVAA),LOOP   OUTPUT ERROR MESSAGE        V1L0
         TITLE     '### SPEX ###     DATA AREA'                    V1L0
*******************************************************************V1L0
*********                SAVE AREA                        *********V1L0
*********                DATA AREA                        *********V1L0
*********                SERVICE ROUTINES                 *********V1L0
*******************************************************************V1L0
TSAVER   DS        18F                 SAVE AREA                   V1L0
TSAVER20 DC        F'0'
TSAVER24 DC        F'0'
TSAVER28 DC        F'0'
TSAVER32 DC       7F'0'
TSUM     EQU       TSAVER+28           USED BY TVECTOR2            V1L0
TPROD    EQU       TSAVER+32           USED BY TVECTOR2            V1L0
TM0531   EQU       KM0531                                          V1L0
KM0931   DC        X'00FFFFFF'                                     V1L0
T#INLIST DC        F'0'                EQUIVALENCE LIST ELEMENT CTRV1L0
TAIDATA  OFFSET    DC,A,IDATA                                      V1L0
TAEQUIV8 OFFSET    DC,A,TEQUIV1+8                                  V1L0
TA#SSOK  OFFSET    DC,A,T#SSISOK                                   V1L0
TPVEVOFF DC        A(*-*)              P(LAST ELIST,NEW EQUIV LIST)V1L0
TBEGLIST DC        A(*-*)              P(FIRST ELT,NEW EQUIV LIST) V1L0
TBEGOLST DC        A(*-*)              P(FIRST ELT,OLD EQUIV LIST) V1L0
TENDOLST DC        A(*-*)                                          V1L0
TYPIMPLN EQU       TENDOLST                                        V1L0
TSAVCBEL EQU       TBEGOLST            DO NOT CHANGE ORDER         V1L0
TSS      DC        7F'0'               TSUSDET OUTPUT(SS OR DIMS)  V1L0
T#SS     DC        F'0'                #SS OR #DIMS(TSUSDET)       V1L0
TOLDLEN  EQU       T#SS                TYPE:OLD LENGTH OF VARIABLE V1L0
TOPTLEN  DS        2F                                              V1L0
TSNAME   DS        F                   POINTER TO NAME IN STACK    V1L0
TSOPTR   DS        F                   PTR TO STACK OPTR AFTER NAMEV1L0
TYPLEN   DS        F                                               V1L0
TSTAT    DC        C'X'                STATEMENT TYPE SWITCH       V1L0
TCHAR    DC        C'N'                CHARACTER STATEMENT SWITCH  V1L0
TMODLEN  DS        X                   TYPE BYTE,IMPLICIT          V1L0
TMODLEN2 DS        X                   LENGTH BYTE,IMPLICIT        V1L0
TCRESS1  DC        C'N'                INITIALIZATION SWITCH       V1L0
TML1     DC        X'00'                                           V1L0
TML2     DC        X'00',AL1(TYPE)                                 V1L0
TBLNK    DC        C'B'                COMBLOK TYPE SWITCH         V1L0
TSSVABL  DS        XL1                 SS OR DIM SWITCH            V1L0
TERROR   DC        C'N'                ERROR FLAG                  V1L0
TEQVBYT  DC        X'00'               PREV EQV VAR IN CURRENT LISTV1L0
TJUMPY   JUMPTAB   4                                               V1L0
TAYBL    DC        X'0401',X'0402',X'0408',X'0810',X'01FF'         V1L0
TSHIFTAB DC        X'0200',X'0201',X'0203',X'0304'                 V1L0
TAYBLAD  EQU       TAYBL-X'80'                                     V1L0
         AIF       ('&SNAPS' NE 'USE').TTTT4                       V1L0
TSTARS   DC        132CL1'*'                                       V1L0
.TTTT4   ANOP
         LTORG                                                     V1L0
         USING     DLIST,R15                                       V1L0
TFIXMVC1 MVC       TSAVER32(0),DIM1                                V1L0
TFIXMVC3 MVC       TSS(0),TSAVER32                                 V1L0
TFIXMVC2 EQU       *                                               V1L0
TMOVTSS  MVC       DIM1(0),TSS         MOVE SS INTO SYMBOL TABLE   V1L0
         USING     VLIST,TS                                        V1L0
TNUMSS   OI        VB1,X'00'           OR IN #SS                   V1L0
         DROP      R15                                             V1L0
         TITLE     '### SPEX ###     SERVICE ROUTINES'             V1L0
*******************************************************************V1L0
******************           TVNAM               ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE TESTS AN OPERAND IN THE STACK TO            *V1L0
*        VERIFY THAT IT IS A SYMBOL                               *V1L0
*                                                                 *V1L0
*        R7        ERROR RETURN                                   *V1L0
*        R14       NORMAL RETURN                                  *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
TVNAM    IF        (SCODE,NOFF,MNAME),TVNAMBAD                     V1L0
         IF        (SCODE,NE,PHI),DONE                             V1L0
         MVI       TERROR,C'E'                                     V1L0
TVNAMBAD THEN      (DO,TSX2SY),R7      OUTPUT ERROR MESSAGE        V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           TYPTEST             ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE CHECKS VB1 AND VB2 FOR CERTAIN ERRORS       *V1L0
*        THAT MAY OCCUR.IT IS CALLED ONLY FROM TYPE & DIME STATS. *V1L0
*                                                                 *V1L0
*        R2        ERROR RETURN                                   *V1L0
*        R14       NORMAL RETURN                                  *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     TYPUSING,R11                                    V1L0
         USING     VLIST,TS                                        V1L0
TYPTEST  LA        R2,TANYTYP          ERROR RETURN ADDRESS        V1L0
         IF        (VB1,VAR),TYPTEST1  VARIABLE ?                  V1L0
         LA        R3,TYPERVA9         NO. GET ERROR ADDRESS       V1L0
         IFNOT     (VB1,FUNC),R3       IS THIS A FUNCTION ?        V1L0
         IF        (TSTAT,NE,C'T'),R3  YES. IS THIS A TYPE STAT ?  V1L0
         IF        (VB2,NE,USAGE2+EXTRN),R3  YES. IS IT EXTRNL'D ? V1L5
         IF        (TML2,OFF,CHAR),TYPTEST3  CHECK FOR CHAR VAR    V1L1
         B         TYPERVAA       ILLEGAL USE OF PREV DEF NAME     V1L1
TYPTEST1 IF        (VB2,NOFF,B2AS+B2DO+INIT),THEN,(DO,TERRVA1),R2  V1L0
TYPTEST3 IF        (VB2,NON,TYPE+USE),DONE                         V1L0
TYPERVAA THEN      (DO,TERRVAA),R2     OUTPUT ERROR MESSAGE        V1L1
TYPERVA9 THEN      (DO,TERRVA9),R2          OUTPUT ERROR MESSAGE   V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           TBEFOR              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE CHECKS THAT ALL SPECIFICATION STATEMENTS    *V1L0
*        EXCEPT IMPLICIT PRECEDE ANYARITHMETIC STATEMENT FUNCTIONS*V1L0
*        AND ALL EXECUTABLE STATEMENTS.IMPLICIT STATEMENTS ARE    *V1L0
*        CHECKED IN THE IMPLICIT PROCESSOR.                       *V1L0
*                                                                 *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
TBEFOR   MVI       CSPEX,X'FF'         SET SWITCH TO:WERE SPEC STATV1L0
         IF        (CASF1,EQ,X'00'),DONE    WERE THERE ASF OR EXECSV1L0
TERRSTB  $ERROR    (WARN,ST,9),DONE    OUTPUT ERROR MESSAGE        V1L5
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           TCOMEQV             ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE CHECKS VB1 AND VB2 FOR CERTAIN ERRORS       *V1L0
*        THIS ROUTINE IS CALLED FROM COMMON AND EQUIVALENCE ONLY  *V1L0
*                                                                 *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*        R2        ERROR ADDRESS                                  *V1L0
*        R3        ERROR ADDRESS                                  *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
TCOMEQV  LA        R3,TCOMEQV2              ERROR RETURN ADDRESS   V1L0
         IFNOT     (VB1,VAR),THEN,(DO,TERRVA9),R3  VARIABLE ?      V1L0
         IF        (VB2,OFF,PARM),TCOMEQV1  S/P PARAMETER ?        V1L0
TERREC4  $ERROR    (NOAC,EC,4,NAMTS)        OUTPUT ERROR MESSAGE   V1L5
         BR        R3                       ERROR RETURN           V1L0
TCOMEQV1 IF        (VB2,NOFF,B2AS+B2DO+INIT),THEN,(DO,TERRVA1),R3  V1L0
         IF        (VB2,NON,TYPE+USE),DONE                         V1L0
         IF        (VB1,DIM),DONE           DIM'D OR SS'D ?        V1L0
         IF        (TEQVBYT,EQ,X'FF'),DONE  IS THIS KINDREE ?      V1L0
         THEN      (DO,TERRVAA)             OUTPUT ERROR MESSAGE   V1L0
TCOMEQV2 IF        (TSSVABL,NE,LBRK),R2     ARE THERE SUBSCRIPTS ? V1L0
         THEN      (DO,TSUSDET),R2          YES,SO COMPILE THEM    V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*******************          TYPGEN              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE SETS THE TYPE AND LENGTH BITS IN VB1,AND THE*V1L0
*        TYPE ESTABLISHED BIT IN VB2.                             *V1L0
*                                                                 *V1L0
*        R3        WORK                                           *V1L0
*        TS        POINTER TO VLIST                               *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
TYPGEN   NI        VB1,B'11110000'     ZERO TYPE AND LENGTH        V1L0
         OC        VB1(2),TML2         OR IN TYPE,SET TYPE ESTABL. V1L0
         L         R3,TYPLEN                                       V1L5
         STC       R3,VLEN             SET ELEMENT LENGTH          V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*******************        TGENDIME              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE PERFORMS THE FOLLOWING FUNCTIONS            *V1L0
*                                                                 *V1L0
*             1.   SET UP THE DLIST USING ROUTINE TSSDLIST.       *V1L0
*             2.   IT PUTS THE ARRAY LENGTH IN BYTES IN DLEN.     *V1L0
*                  THE SHIFT(OR VLEN FOR CHAR*N) USED TO GET THE  *V1L0
*                  LENGTH IS STORED IN THE FIRST BYTE OF DLEN     *V1L0
*                                                                 *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*        R15       POINTER TO DLIST                               *V1L0
*        R4        # OF DIMENSIONS                                *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     DLIST,R15                                       V1L0
         USING     VLIST,TS                                        V1L0
TGENDIME ST        R14,TSAVER24        SAVE RETURN REGISTER        V1L5
         IFNOT     (VB1,VAR),DONE      FOR ODD SYMBOLS             V1L0
         THEN      (DO,TVECTLEN)       GET PRODUCT OF DIMENSIONS   V1L0
         IF        (VB2,NON,CBN),TGEND2 IS THIS CALL BY NAME ?     V1L0
TERRDM2  $ERROR    (NOAC,DM,2,NAMTS),TGENRET     YES SO OUTPUT MSG V1L5
TGEND2   THEN      (DO,TSSDLIST)       GET A DLIST & FIX VB1       V1L0
TGEND5   NI        VB3,X'7F'           TURN OFF PSEUDO EQV         V1L0
TODOELT  THEN      (DO,TELTLEN)        GET ARRAY LENGTH            V1L0
         ST        R3,DLEN             STORE IN DLIST              V1L5
         IF        (VB2,ON,PARM),TGENDIMA  IS VAR S/R PARAMETER    V1L4
         IF        (VB2,ON,B2EQV),TGENDIMA  IS VAR EQUIVALENCED    V1L4
         LTR       R2,R2               DID ARRAY LENGTH OVERFLOW   V1L4
         BNZ       TGENMO1             YES -> MEMORY OVERFLOW      V1L4
         CLC       DLEN(4),MAXLEN      CHECK ARRAY SIZE            V1L4
         BH        TGENMO1             16 MEGS ENOUGH?             V1L4
         CLC       DLEN(4),KF0         ARRAY SIZE OVERFLOW 2 REGS? V1L5
         BE        TGENMO1             ISSUE MO-1 IF YES           V1L5
TGENDIMA DS        0H                                              V1L4
         STC       R7,DLEN             STORE SHIFT BYTE            V1L0
TGENDRET OI        VB2,USE             TURN USAGE BIT ON           V1L0
TGENRET  L         R14,TSAVER24                                    V1L5
         SNAPS     DLIST,DLIST,32                                  V1L0
         BR        R14                 SKEEDADDLE BACK             V1L0
TGENMO1  $ERROR    (NOEX,MO,1),TGENRET        MEM OVERFLOW -> MO-1 V1L5
MAXLEN   DC        F'16000000'         ENOUGH FOR MOST USERS       V1L4
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************         TVECTLEN              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE CALCULATES THE LENGTH(IN ELEMENTS)          *V1L0
*        OF THE ARRAY.                                            *V1L0
*                                                                 *V1L0
*        R14       RETURN                                         *V1L0
*        R7        WORK                                           *V1L0
*        R3        PRODUCT OF DIMENSIONS                          *V1L0
*        R2        WORK                                           *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
TVECTLEN SR        R2,R2               PART OF PRODUCT             V1L0
         SR        R7,R7               ZERO INDEX                  V1L0
         L         R3,TSS              GET FIRST DIMENSION(SUBSCR) V1L5
         IC        R7,TJUMPY(R4)       PICK UP INDEX               V1L0
         B         TMULT3(R7)                                      V1L0
TMULT3   MULTSS    OMITLAST            GET PRODUCT                 V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************         TSSDLIST              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE PERFORMS THE FOLLOWING OPERATIONS           *V1L0
*        ON THE DLIST.                                            *V1L0
*                                                                 *V1L0
*        1.   SET UP THE DLIST.                                   *V1L0
*        2.   PUT #SS OR #DIMS INTO VB1.                          *V1L0
*        3.   MOVE SUBSCRIPTS OR DIMENSIONS INTO DLIST.           *V1L0
*        4.   SET UP P(DLIST) IN VDIM.                            *V1L0
*        5.   TURN ON PSEUD0-EQUIVALENCE BIT.                     *V1L0
*                                                                 *V1L0
*        R15       POINTER TO DLIST                               *V1L0
*        R14       RETURN                                         *V1L0
*        R7        WORK                                           *V1L0
*        R4        #SS                                            *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
         USING     DLIST,R15                                       V1L0
TSSDLIST NI        VB1,B'10001111'     ZERO #DIMS FIELD IN VB1     V1L0
         SLL       R4,4                #DIMS*16                    V1L0
         EX        R4,TNUMSS           PUT INTO VB1                V1L0
         SRL       R4,2                #DIMS*4                     V1L0
         LA        R4,4(0,R4)          #DIMS*4+4=LENGTH OF DLIST   V1L0
         SR        R6,R4               GET SPACE FOR IT            V1L0
         C         R6,XOBJECT          SYMBOL & OBJECT OVERFLOW ?  V1L0
         BL        CERRMO2             YES                         V1L0
         OFFSET    LR,R15,R6           NO,GET ADDRESS IN R15       V1L0
         S         R4,KF5              #BYTES-1 TO MOVE INTO DLIST V1L0
         EX        R4,TMOVTSS          PUT DIMS INTO DLIST         V1L0
         SETLINK   TS,R15,VDIM,R7      SET UP 1/2 WD LINK TO DLIST V1L0
         OI        VB3,X'80'           TURN ON PSEUDO-EQUIV BIT    V1L0
         SR        R7,R7               ZERO                        V1L0
         ST        R7,DLEN             ZERO                        V1L0
         AIF       ('&SNAPS' NE 'USE').NOSNP                       V1L0
         IF        (TSTAT,NE,C'E'),DONE                            V1L0
         SNAPS     DLIST,DLIST,32                                  V1L0
.NOSNP   ANOP                                                      V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           TELIST              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        DO THE FOLLOWING FOR THE ELIST:                          *V1L0
*                                                                 *V1L0
*        1.   GENERATE AN ELIST.                                  *V1L0
*        2.   SET UP LINK TO ELIST IN VEC.                        *V1L0
*        3.   SET ELIST TO ZEROS.                                 *V1L0
*                                                                 *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*        R2        POINTER TO ELIST                               *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     ELIST,R2                                        V1L0
TELIST   S         R6,KF12             GET SYMBOL TABLE SPACE      V1L0
         C         R6,XOBJECT          OBJECT & SYMBOL OVERFLOW ?  V1L0
         BL        CERRMO2             YES.PROGRAM TOO LARGE.      V1L0
         OFFSET    LR,R2,R6            GET ABSOLUTE ADDRESS        V1L0
         SETLINK   TS,R2,VEC           SET UP LINK TO ELIST IN VEC V1L0
         MVI       ELIST,X'00'                                     V1L0
         MVC       ELIST+1(11),ELIST   ZERO ELIST                  V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         DROP      R2                                              V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************     CHANGE SHIFT AND ARRAYLEN ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        FOR TYPE STATEMENTS THAT FOLLOW DIMENSION STATEMENTS     *V1L0
*        DLEN MUST BE CHANGED TO REFLECT THE RETYPING             *V1L0
*        THE ARRAY LENGTH IS RECALCULATED AND MULTIPLIED BY THE   *V1L0
*        ELEMENT LENGTH. THE NUMBER OF SHIFTS(IF NOT A CHAR*N VAR)*V1L0
*        IS ALSO REPLACED                                         *V1L0
*                                                                 *V1L0
*        R2,R3     WORK      MULTIPLICATION                       *V1L0
*        R4        WORK                                           *V1L0
*        R15       WORK      POINTER TO DLIST                     *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
         USING     DLIST,R15                                       V1L0
TCHIFT   ST        R14,TSAVER24        SAVE RETURN ADDRESS         V1L5
         LINK2     TS,R15,VDIM         LINK TO DIMENSION LIST      V1L0
         L         R3,DLEN             GET ARRAY LEN & SHIFT BYTE  V1L5
TSCHAR   SR        R2,R2                                           V1L0
         L         R3,DLEN             GET ARRAY LENGTH            V1L5
         N         R3,KM0931           ZERO SHIFT BYTE             V1L0
         L         R4,TOLDLEN          OLD VLEN                    V1L5
         DR        R2,R4               PRODUCT OF DIMENSIONS       V1L0
         L         R4,T#SS             RELOAD # OF SS              V1L5
         B         TODOELT             GO TO FIX UP DLEN           V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           ELTLEN              ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        THIS ROUTINE EXPECTS AS INPUT AN ARRAY LENGTH IN R3      *V1L0
*        THIS IS THEN EITHER SHIFTED IF IT IS NOT A CHAR*N VAR    *V1L0
*        OR MULTIPLIED BY VLEN TO PRODUCE AN ARRAY LENGTH IN BYTES*V1L0
*                                                                 *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*        R7        SHIFT BYTE                                     *V1L0
*        R3        INPUT:ARRAY LENGTH IN ELEMENTS                 *V1L0
*                  OUTPUT:ARRAY LENGTH IN BYTES                   *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     VLIST,TS                                        V1L0
TELTLEN  IF        (VB1,OFF,CHAR),TNOTCHAR  IS THIS A CHAR VAR     V1L0
         SR        R7,R7                    ZERO SHIFT BYTE        V1L0
         IF        (VB1,OFF,X'01'),DONE     IF CHAR*1 THEN FINISHEDV1L0
         SR        R2,R2               ZERO HIGH ORDER JUNK        V1L0
         IC        R7,VLEN             ELEMENT LENGTH              V1L0
         MR        R2,R7               GET ARRAY LENGTH            V1L0
         BR        R14                 RETURN                      V1L0
TNOTCHAR IC        R7,VB1              GET B1                      V1L0
         N         R7,KF15             LEAVE ONLY TYPE AND LENGTH  V1L0
         IC        R7,TSHIFTAB(R7)     GET AMOUNT TO BE SHIFTED    V1L0
         SLL       R3,0(R7)            SHIFT TO GET ARRAY LENGTH   V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           DLIST-TSS CHECK     ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        CHECKS THAT SUBSCIPT DO NOT EXCEED DIMENSIONS            *V1L0
*                                                                 *V1L0
*        ERROR RETURN   R3                                        *V1L0
*        WORK REGS      R2,R7                                     *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     DLIST,R15                                       V1L0
TSSDIMCK SR        R2,R2                                           V1L0
         IC        R2,TJUMP(R4)        PICK UP BRANCH INDEX        V1L0
         BAL       R7,TCOMPSSD(R2)                                 V1L0
         IF        (TSTAT,NE,C'E'),TSSERR2                         V1L0
         THEN      (DO,TERRSS3),R3     OUTPUT ERROR MESSAGE        V1L0
TSSERR2  THEN      (DO,TERREC5),R3     OUTPUT ERROR MESSAGE        V1L0
TJUMP    JUMPTAB   10                                              V1L0
TCOMPSSD L         R2,TSS+24                                       V1L0
         C         R2,DIM7                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS+20                                       V1L0
         C         R2,DIM6                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS+16                                       V1L0
         C         R2,DIM5                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS+12                                       V1L0
         C         R2,DIM4                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS+8                                        V1L0
         C         R2,DIM3                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS+4                                        V1L0
         C         R2,DIM2                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         L         R2,TSS                                          V1L0
         C         R2,DIM1                                         V1L0
         BCR       ZIFH,R7             BRANCH IF HIGH              V1L0
         BR        R14                 RETURN                      V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
******************           TSUSDET             ******************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE COMPILES SUBSCIPTS AND DIMENSIONS.          *V1L0
*                                                                 *V1L0
*        R4        NO. OF SS                                      *V1L0
*        R2        INDEX                                          *V1L0
*        R14       RETURN ADDRESS                                 *V1L0
*        R15       VARIABLE DIMENSION SYMBOL POINTER              *V1L0
*        RS        STACK POINTER                                  *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         $FREE     R2                                              V1L5
         $FREE     R4                                              V1L5
TSUSDET  ST        R14,TSAVER24                                    V1L5
         OI       TSSNRENT+1,ZIFOFF*16 /***** NOT RE-ENTRANT *****/V1L0
         SR        R4,R4                                           V1L0
         SR        R2,R2                                           V1L0
         L         RS,TSOPTR                                       V1L5
TSSLOOP  C         R4,KF7                   ARE THERE TOO MANY SS  V1L0
         BE        TSSERSV2                 YES                    V1L0
         LA        R4,ZR4+1                 INCREMENT SS COUNTER   V1L0
         LA        R2,ZR2+4                 INCREMENT INDEX        V1L0
T#SSOK   IF        (SCODE,EQ,CCONS+1),TSSCON     1 WD CONST.  ?    V1L0
         IF        (SCODE,ON,CCONS),TSSERSV3     CONSTANT TOO LARGEV1L0
         IFNONE    (TSTAT,EQ,C'D'),(TSTAT,EQ,C'T'),THEN,(DO,TSX4),TSSDU*
               MMY                     MUST BE CONST FOR COM/EQV   V1L0
         TVNAM     TSSDUMMY            CHECK FOR VALID NAME        V1L0
         NI        TSSRENT1+1,X'00'    /*** NOT RE-ENTRANT ***/    V1L4
         TM        VB2,PARM            IS VARIABLE A PARAMETER     V1L0
TSSNRENT BC        ZIFOFF,TSSERSV4     IF NOT... ERROR             V1L0
TSSLOOK  LOOKUP    VARIABLE,,TSSYES         LOOKUP SYMBOL          V1L0
TSSERSV5 $ERROR    (NOAC,SV,5,NAMR15,INVAL),TSSDUMMY               V1L5
         DROP      TS                  R1 NOT NEEDED               V1L4
         USING     VLIST,R15           ADDRESSABILITY FOR NEXT SYM V1L4
*                  NO SV-5 IF SYMBOL IS S/R PARM OR IN COMMON      V1L4
TSSYES   IF        (VB2,OFF,PARM+B2COM),TSSERSV5                   V1L4
         IFNOT     (VB1,SVAR,INT4),TSSERSV5                        V1L0
TSSRENT1 BC        0,TSSDUMMY          -> TSSDUMMY IF SV-4 ISSUED  V1L4
         OI        VB2,TYPE+USE        SET TYPE AND USAGE ESTABL   V1L0
         ST        R15,TSS-4(R2)       A(SYMBOL ENTRY FOR DIM)     V1L0
         LA        R0,X'80'                                        V1L0
         STC       R0,TSS-4(R2)        CODE BYTE                   V1L0
         B         TSSLINK                                         V1L0
         DROP      R15                                             V1L0
TSSCON   L         R0,SOPND            GET CONSTANT                V1L5
         N         R0,TM0531           GET RID OF DIGIT COUNT      V1L0
         LTR       R0,R0               IS IT ZERO                  V1L0
         BNZ       TSTORSS                                         V1L0
TERRSS0  $ERROR    (NOAC,SS,0)         YES,THE DAMN FOOL           V1L5
TSSDUMMY LA        R0,1                     DUMMY SS OR DIMENSION  V1L0
TSTORSS  ST        R0,TSS-4(R2)             STORE IN TSS ARRAY     V1L0
TSSLINK  SLINK                              STEP STACK             V1L0
         IF        (SOPTR,EQ,COM),TSSLOOP   CHECK FOR ','          V1L0
         IF        (SOPTR,EQ,RBRK),TSSRET   CHECK FOR ')'          V1L0
         THEN      (DO,TSX1)                PUT OUT ERROR MESSAGE  V1L0
TSSRET   ST        R4,T#SS             # OF SUBSCRIPTS             V1L5
         ST        RS,TSOPTR           POINTER TO ')'              V1L5
         L         R14,TSAVER24        RETURN ADDRESS              V1L5
         SNAPS     TSS,TSS,32               DISPLAY SS OR DIMS     V1L0
         BR        R14                      RETURN                 V1L0
         SPACE     2                                               V1L0
TSSERSV2 $ERROR    (NOAC,SV,2,SYMRS,UNEX),T#SSOK                   V1L5
TSSERSV3 $ERROR    (NOAC,SV,3,SYMRS,INVAL),TSSCON                  V1L5
TSSERSV4 NI        TSSNRENT+1,X'0F'    /***** NOT RE-ENTRANT *****/V1L0
*                  SV-4 ISSUED => B TSSDUMMY ELSE A(SYM ENTRY FOR  V1L4
*                  DIM) & ARRAY LENGTH WILL BE CLOBBERED           V1L4
         OI        TSSRENT1+1,X'F0'    /*** NOT RE-ENTRANT ***/    V1L4
         $ERROR    (NOAC,SV,4,NAMTS,INVAL),TSSLOOK                 V1L5
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*******************          TVECTOR2              ****************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*        THIS ROUTINE CALCULATES THE OFFSET OF A MULTI-SUBSCRIPTED*V1L0
*        ARRAY ELEMENT.                                           *V1L0
*                                                                 *V1L0
*        R15       POINTER TO DLIST                               *V1L0
*        R14       RETURN                                         *V1L0
*        R7        WORK      (SS-1)                               *V1L0
*        R4        WORK      INDEX     RESTORED                   *V1L0
*        R3        WORK      MULTIPLICATION  &   ANSWER           *V1L0
*        R2        WORK      MULTIPLICATION                       *V1L0
*        R0        WORK      COUNTER                              *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     DLIST,R15                                       V1L0
TVECTOR2 EQU       *                                               V1L0
         LR        R0,R4                                           V1L0
         L         R3,TSS                                          V1L5
         BCTR      R3,0                                            V1L0
         BCTR      R0,0                                            V1L0
         ST        R3,TSUM                                         V1L5
         L         R3,DIM1                                         V1L5
         ST        R3,TPROD                                        V1L5
         LA        R4,4                                            V1L0
         B         TVFIRST                                         V1L0
TVECTLOC ST        R3,TSUM                                         V1L5
         L         R3,TPROD                                        V1L5
         SR        R2,R2                                           V1L0
         M         R2,DLIST(R4)                                    V1L0
         ST        R3,TPROD                                        V1L5
TVFIRST  L         R7,TSS(R4)                                      V1L0
         BCTR      R7,0                                            V1L0
         SR        R2,R2                                           V1L0
         MR        R2,R7                                           V1L0
         A         R3,TSUM                                         V1L0
         LA        R4,4(0,R4)                                      V1L0
         BCT       R0,TVECTLOC                                     V1L0
         L         R4,T#SS                                         V1L5
         BR        R14                                             V1L0
*******************************************************************V1L0
         EJECT                                                     V1L0
*******************************************************************V1L0
*******************          EQUIVALENCE FIXER     ****************V1L0
*******************************************************************V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*        PROCESS PSEUDO-EQUIVALENCE ENTRIES                       *V1L0
*        I.E. COME HERE TO DIMENSION AN EQUIVALENCED VARIABLE     *V1L0
*        IT ALSO CHECKS THAT SUBSCIPTS ARE WITHIN DIMENSIONS      *V1L0
*        R15       SETS UP POINTER TO DLIST                       *V1L0
*        TS        POINTER TO VLIST                               *V1L0
*                                                                 *V1L0
*                                                                 *V1L0
*******************************************************************V1L0
         USING     ELIST,R8                                        V1L0
         USING     VLIST,TS                                        V1L0
         USING     DLIST,R15                                       V1L0
TEQVFIX  ST        R14,TSAVER20                                    V1L5
         ST        R11,TSAVER28                                    V1L5
         LINK2     TS,R15,VDIM         LINK TO DLIST               V1L0
         IC        R3,VB1              GET #SS FROM VB1            V1L0
         SRL       R3,4                DITTO                       V1L0
         N         R3,KF7              DITTO                       V1L0
         C         R3,KF1              #SS=1 ?                     V1L0
         BNE       TFIXOK#1            NO                          V1L0
         L         R2,DIM1             YES.LOAD THE SUBSCRIPT      V1L5
         CR        R4,R3               IS #DIMS=1 ?                V1L0
         BH        TFIXOK#0            NO                          V1L0
         L         R3,TSS              YES,SO GET DIMENSION        V1L5
         CR        R3,R2               IS DIM<=SS ?                V1L0
         BNL       TFIXSSOK            NO                          V1L0
         THEN      (DO,TERREC5)        OUTPUT ERROR MESSAGE        V1L0
TFIXSSOK ST        R3,DIM1             STORE DIM IN DLIST          V1L5
         LA        R14,TFIXRET3        SET UP                      V1L0
         ST        R14,TSAVER24        RETURN ADDRESS              V1L5
         B         TGEND5              FIX DLIST                   V1L0
TFIXOK#0 ST        R2,TSAVER32         SAVE SUBSCRIPT              V1L5
         THEN      (DO,TGENDIME)            GENERATE NEW DLIST     V1L0
         IF        (VB1,NON,CHARN),TFIXOK00
         DR        R2,R7                GET ARRAY LENGTH IN ELTS
         B         TFIXOK01             CONTINUE
TFIXOK00 SLDL      R2,8
         SRL       R3,8(R2)            PRODUCT OF DIMENSIONS       V1L0
TFIXOK01 C         R3,TSAVER32          IS SS<= PROD OF DIMENSIONS ?
         BNL       TFIXRET3            NO                          V1L0
TFIXSS1  THEN      (DO,TERREC5)        OUTPUT ERROR MESSAGE        V1L0
TFIXRET3 L         R11,TSAVER28                                    V1L5
         L         R14,TSAVER20                                    V1L5
         BR        R14                 RETURN                      V1L0
TFIXOK#1 CR        R3,R4               IS #SS=#DIMS ?              V1L0
         BNE       TERRSV0                                         V1L0
         THEN      (DO,TVECTLEN)       GET PROD. OF DIMS           V1L0
         LR        R2,R4                                           V1L0
         SLL       R2,2                                            V1L0
         BCTR      R2,0                #BYTES-1 TO MOVE            V1L0
         EX        R2,TFIXMVC1         PUT SS'S INTO TEMP AREA     V1L0
         EX        R2,TFIXMVC2         PUT DIMS INTO DLIST         V1L0
         EX        R2,TFIXMVC3         PUT SS'S INTO TSS           V1L0
         LA        R2,TFIXRET1         LOAD RETURN ADDRESS         V1L0
         ST        R2,TSAVER24         SAVE IN RELOAD AREA         V1L5
         B         TGEND5              FIX UP DLEN                 V1L0
TFIXRET1 L         R11,TAEQUIV8                                    V1L5
         LINK2     TS,R8,VEC           LINK TO ELIST               V1L0
         OFFSET    LRAL,R7,TA#SSOK                                 V1L0
         BR        R7                                              V1L0
*******************************************************************V1L0
         TITLE     '### SPEX ###     ERROR CODES'                  V1L0
*        PRINT     NOGEN                                           V1L0
*******************************************************************V1L0
*********                ERROR CODES                      *********V1L0
*******************************************************************V1L0
TSX0     $ERROR    (NOAC,SX,0,SYMRS,UNEX),DONE,SAVE                V1L5
TSX0W    $ERROR    (WARN,SX,0,SYMRS,UNEX),DONE,SAVE                V1L5
TSX1     $ERROR    (NOAC,SX,1,DELRS,INVAL),DONE,SAVE               V1L5
TSX2DL   $ERROR    (NOAC,SX,2,DELRS,UNEX),DONE,SAVE                V1L5
TSX2SY   $ERROR    (NOAC,SX,2,SYMRS,UNEX),DONE,SAVE                V1L5
TSX4     $ERROR    (NOAC,SX,4,SYMRS,UNEX),DONE,SAVE                V1L5
TERRSS3  $ERROR    (NOAC,SS,3,NAVTS),DONE,SAVE                     V1L5
TERRDM1  $ERROR    (NOAC,DM,1,NAMTS),DONE,SAVE                     V1L5
TERREC5  $ERROR    (NOEX,EC,5,NAMTS),DONE,SAVE                     V1L5
TERRIM1  $ERROR    (NOAC,IM,1,SYMRS,INVAL),DONE,SAVE               V1L5
TERRIM4  $ERROR    (WARN,IM,4,SYMRS,INVAL),DONE,SAVE               V1L5
TERRIM6  $ERROR    (WARN,IM,6),DONE,SAVE                           V1L5
TERRVA8  $ERROR    (NOAC,VA,8,NAMTS),DONE,SAVE                     V1L5
TERRVA9  $ERROR    (NOAC,VA,9,NAMTS),DONE,SAVE                     V1L5
TERRVA1  $ERROR    (NOAC,VA,1,NAMTS),DONE,SAVE                     V1L5
TERRVAA  $ERROR    (NOAC,VA,A,NAMTS),DONE,SAVE                     V1L5
TERRSV0  $ERROR    (NOAC,SV,0,NAMTS),DONE,SAVE                     V1L5
*******************************************************************V1L0
*******************************************************************V1L0
         TITLE     '### SPEX ###    MACRO STATISTICS'              V1L0
*******************************************************************V1L0
         NOMACROS                                                  V1L0
*******************************************************************V1L0
         DC        0D'0'                                           V1L0
         END
