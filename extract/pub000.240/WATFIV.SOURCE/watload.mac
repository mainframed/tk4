WATL     TITLE     'WATLOAD     OBJECT DECK LOADER'
         PRINT     OFF
         COPY      OPTIONS
         $PUNCH    WATLOAD                                         DVS2
CDEFN    DSECT
         COPY      CDEFN
&DECK    SETC      'WATLOAD'
         COPY      EXTRN
         ENTRY     WATLOAD
STARTA   DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
         PRINT     ON
         PRINT     ON,&LIST
         EJECT
ESDLIST  DSECT
         DS        F
ESDNAME  DS        8X
ESDTYPE  DS        0X
ESDADDR  DS        F
ESDALIGN DS        0X
ESDLEN   DS        F
         EJECT
LOADSECT CSECT
*****  NOTE: WATLOAD HAS A NON-STANDARD ENTRY TO CLOODGE IT SO STACK
*****           CAN BE USED AS SAVEAREA AND WORK SPACE.
         USING     WATLOAD,RW
WATLOAD  L         R2,XSTACK       GET ADDRESS OF STACK
         ST        R2,WCENT+8      STORE IN SAVE AREA ADDRESS
         $FREE     R3                                              V1L5
WCENT    CENT      WATLOAD
         USING     LOADSAVE,R13
         SR        R2,R2
         SR        R4,R4
         IC        R4,XCARD+11         NBYTES OF DATA IN R4
         LA        R8,XCARD+15(R4)     GET ADDRESS OF LAST BYTE
         ST        R8,ENDCARD          OF DATA AT ENDCARD
         LA        R8,XCARD+16         R8 -> FIRST BYTE OF DATA
         IC        R2,STYPE
         B         JTABL(R2)    GO TO PROCESSOR FOR CARD EXPECTED
JTABL    B         ESDPROC
         B         TXTPROC
         B         RLDPROC
         EJECT
*  PROCESSING FOR BEGINNING OF OBJECT MODULE
FRSTPROC LA        R6,ZR6+52 RELEASE SPACE GOT BY GETSYMS IN LENDPROG
NEWDECK  LA        R5,ZR5+7            ALIGN R5, ON DOUBLEWORD
         N         R5,=F'-8'
         MVI       ESDTABLE+4,0        INITIALLIZE ESD TABLE
         MVC       ESDTABLE+5(255),ESDTABLE+4
         MVC     ESDTABLE+260(255),ESDTABLE+4
         MVC     ESDTABLE+515(255),ESDTABLE+4
         MVC     ESDTABLE+770(254),ESDTABLE+4
         MVC     ESDWORK2(9),ESDTABLE+4
         MVC     CXDTABLE(4),CXDTABL1
         BAL       R7,GETGVENT  GET GVLIST ENTRY FOR MODULE HEADER
         MVC       ZR6+2(2),=X'6412'   FILL IN B1 AND B2
         ST        R5,ZR6+12           FILL IN MODULE ADDRESS
         LR        R3,R5
         S         R3,=F'20480'
         ST        R3,RDATBASE    SET UP RDATBASE FOR POINTERS IN RLD'S
         CSNAP     FRST,ZR6,16
         EJECT
*  PROCESSOR FOR ESD CARDS
ESDSET   MVI       STYPE,X'00'         SET TYPE FOR ESD
ESDPROC  CLC       XCARD+1(3),=C'ESD'  IS CARD AN ESD ?
         BNE       TXTSET              NO
         CSNAP     ESD,XCARD,80
         L         R8,ENDCARD
         S         R8,KF4
         ST        R8,ENDCARD
         LA        R8,XCARD+12         SET CARD POINTER
         B         ESDLOOP
ESDEND   LA        R8,ZR8+16           GET NEXT PIECE OF DATA
         C         R8,ENDCARD          DONE ?
         BNL       CRET                YES
         USING     ESDLIST,R8
ESDLOOP  SR        R2,R2
         AIF       (      &NDVSD     ).WDS                         DVS1
         NI    ESDTYPE,X'0F'      REMOVE ZONE                      DOS2
.WDS     ANOP                                                      DOS2
         IC        R2,ESDTYPE          GET TYPE
         IC        R2,ESDTYPES(R2)
         B         ESD1(R2)            GO TO ROUTINE TO HANDLE ITEM
ESD1     DC        0H'0'
ESDSD    B         ESDSD7
ESDLD    B         ESDLD7
ESDPR    B         ESDPR7
         USING     LLIST,R15
         SPACE     2
*  PROCESSOR FOR PC ENTRIES
ESDPC    MVC       ESDNAME(8),=C'@PC@@@@@'
         LOOKUP    GLBLVAR             ENTER UNIQUE NAME IN LLIST
         MVC       LB1(3),=X'6412C1'   SET TO FUNCTION AND RESET NAME
         CSNAP     PC,LLIST,16
         B         ESDSD11
         SPACE     2
*  PROCESSOR FOR ER ENTRIES
ESDER    LOOKUP    GLBLVAR,,ESDER1     LOOK UP EXTERNAL REF. IN LLIST
         MVC       LB1(2),=X'6410'     HASN'T OCCURRED BEFORE
         MVC       LISN(2),XISN        STORE ISN IN SYMTAB
ESDER1   BAL       R14,GETESDID        GET ESD TABLE ENTRY
         IC        R3,ESDTABLE(R2)
         ST        R15,ESDTABLE(R2)    STORE P(LLIST) IN ESD TABLE
         STC       R3,ESDTABLE(R2)
         CSNAP     ER,LLIST,16
         CSNAP     ESDTAB,ESDTABLE(R2),4
ESDIGNOR DS        0H                  IGNORE NULL ITEM           V1L5
         B         ESDEND              DONE
         SPACE     2
*  PROCESSOR FOR CM ENTRIES
ESDCM    CLC       ESDNAME(8),=CL8'  '   IS IT BLANK COMMON
         BNE       ESDCM1              NO
         MVC       ESDNAME(2),BLANKCOM CHANGE NAME TO //
ESDCM1   LOOKUP    GLBLVAR,ESDCM2      LOOKUP COMMON AREA IN LLIST
         IF        (LB1,EQ,CBLK),ESDCM2  USED BEFORE AS COMMON AREA ?
LERRVA7  $ERROR    (NOAC,VA,7,NAMR15),ESDEND                       V1L5
ESDCM2   MVI       LB1,CBLK            SET TO COMMON AREA
         MVI       LLIST+13,X'FF'      SET ADDRESS NOT ASSIGNED
         CLC       ESDLEN+1(3),LLIST+10       IS LENGTH DIFFERENT
         BE        ESDCM3              NO
         BL        LERREC0             YES - LESS
         MVC       LLIST+10(3),ESDLEN+1  YES - LONGER, USE NEW ONE
LERREC0  $ERROR    (WARN,EC,0,NAMR15)                              V1L5
ESDCM3   BAL       R7,GETGVENT         GET SPACE FOR AN ENTRY IN GVLIST
         MVC       ZR6(10),LLIST       SET UP GVLIST ENTRY FOR COMMON
         MVC       ZR6+10(2),KF0       BLOCK WITH NO VARIABLES
         ST        R15,ZR6+12          PUT P(LLIST) IN GVLIST
         CSNAP     GVCOM,ZR6,16
         B         ESDER1
         SPACE     2
*  PROCESSOR FOR SD ENTRIES
ESDSD7   LOOKUP    GLBLVAR,ESDSD10
         IFNOT     (LB1,RTN),LERRVA6   IF NOT A FUNCTION ,ERROR
         IF        (LB2,NON,X'02'),ESDSD111  HAS CSECT OCCURRED ?
         MVI       ESDOMIT,2           YES
         $ERROR    (WARN,AL,1,NAMR15) PREVIOUSLY DEFINED CSECT NAMEV1L5
         B         ESDSD2
ESDSD10  MVC       LB1(2),=X'6412'     HASN'T OCCURRED BEFORE
ESDSD111 OI        LB2,X'02'           MARK AS ADDRESS ASSIGNED
ESDSD11  ST        R5,LADDR            STORE ADDRESS IN LLIST
         MVI       ESDOMIT,0
         IF        (CMOSWTCH,ON),ESDSD22  HAS A MEMORY O'FLOW OCCURRED
         A         R5,ESDLEN           RESERVE SPACE FOR TEXT
         AIF       (      &NDVSD     ).DOSNO                       DVS1
         LA    R5,ZR5+7           MAKE IT A                        DOS2
         N     R5,=F'-8'          DOUBLEWORD BOUNDARY              DOS2
         AGO       .DOSNO2                                         DVS2
.DOSNO   ANOP                                                      DOS2
         LA        R5,ZR5
.DOSNO2  ANOP                                                      DVS2
         CR        R5,R6               DOES SYMTAB OVERFLOW OBJCODE
         BL        ESDSD2              NO
         BAL       R14,ERMO0            GIVE ERROR MESSAGE
ESDSD22  MVI       ESDOMIT,2           MARK CSECT AS OMITTED
ESDSD2   BAL       R7,GETGVENT         GET GVLIST ENTRY FOR CSECT
         MVC       ZR6+2(2),=X'84C2'   MARK AS VARIABLE IN COMMON
         L         R4,LADDR            GET ADDRESS OF CSECT
         S         R4,ESDADDR          MINUS ASSEMBLED ORIGIN
         ST        R4,ZR6+12           STORE RELATIVE ADDRESS IN GVLIST
         MVC       LLIST+10(3),CGVEND+1  POINT LLIST ENTRY TO GVLIST
         BAL       R14,GETESDID        GET ESD TABLE ENTRY FOR SD
         LA        R14,ESDTABLE(R2)    R14-> ESD TABLE ENTRY FOR SD
         CSNAP     SD,LLIST,16
         IF  (ZR14,NON,X'04'),ESDSD4   IS THERE A LIST OF LD'S TO FIX
ESDSD3   L         R9,ZR14             YES, R9 -> LLIST FOR FIRST LD
         CSNAP     FIXLD,ZR9,16
         MVC       ESDWORK+1(3),ZR9+10 GET ASSEMBLED ORIGIN OF LD
         MVC       ZR14+1(3),ZR9+13    P(LLIST) FOR NEXT LD IN ESD TAB
         LR        R3,R4               RELATIVE ADDRESS IN R3
         A         R3,ESDWORK          ASSEMBLED ORIGIN OF LD
         ST        R3,ZR9+12           EQUALS ADDRESS OF LD
         BAL       R0,ESDSD34          CHECK FOR FIOCS AND DIOCS
         MVC       ZR9+10(3),LLIST+10 POINT LLIST ENTRY TO GVLIST ENTRY
         CSNAP     *,ZR9,16
         CLC       ZR14+1(3),KF0+1     ARE THERE MORE LD'S
         BNE       ESDSD3              YES
ESDSD4   ST        R15,ZR14            STORE P(LLIST) FOR SD IN ESD TAB
         MVI       ZR14,X'18'          MARK AS 'FOUND'
         OC        ZR14(1),ESDOMIT      MARK AS OMITTED IF NECESSARY
         CSNAP     ESDTAB,ZR14,4
         B         ESDEND
         SPACE     2
*  PROCESSOR FOR LD ENTRIES
ESDLD7   LOOKUP    GLBLVAR,ESDLD1      PUT LABEL IN LLIST
         IFNOT     (LB1,RTN),LERRVA6
         IFNOT    (LB2,ON,X'02'),ESDLD11   HAS STORAGE BEEN ASSIGNED ?
         CSNAP     OLDLD,LLIST,16
         $ERROR    (WARN,AL,1,NAMR15)  PREVIOUSLY DEFINED ENTRY PNTV1L5
         IF        (ESDTYPE,NON,X'02'),ESDEND  YES - DONE UNLESS LR
         BAL       R14,GETESDID        IF LR - PUT LABEL IN ESD TABLE
         ST        R15,ESDTABLE(R2)    PUT P(LLIST) IN ESD TABLE
         LA        R14,ESDTABLE(R2)
         MVI       ZR14,X'18'          MARK AS 'FOUND'
         B         ESDEND
ESDLD1   MVC       LB1(2),=X'6412'     SET B1 & B2 TO FUNCTION
ESDLD11  OI        LB2,X'02'           MARK AS ADDRESS ASSIGNED
         IC        R2,ESDLEN+3         FIND SD WHICH CONTAINS LABEL
         SLA       R2,2
         LA        R14,ESDTABLE(R2)    R14 -> ESD TABLE ENTRY FOR SD
         TM        ZR14,X'08'          HAS SD BEEN FOUND IN ESD CARDS
         BZ        ESDLD2              NO
         L         R14,ZR14            YES, R14 -> LLIST FOR SD
         MVC       ESDWORK2+1(3),ZR14+10
         L         R14,ESDWORK2        R14 -> GVLIST ENTRY FOR SD
         L         R14,ZR14+12         GET RELATIVE ADDRESS OF SD
         A         R14,ESDADDR         PLUS ASSEMBLED ORIGIN OF LD
         ST        R14,LADDR           GIVES ADDRESS OF LD
         LR        R3,R14                                        PD
         LR        R9,R15
         BAL       R0,ESDSD34          CHECK FOR FIOCS AND DIOCS
         MVC       LLIST+10(3),ESDWORK2+1 POINT LLIST ENTRY TO GVLIST
         CSNAP     NEWLD,LLIST,16
         B         ESDEND              DONE
ESDLD2   MVC       LLIST+10(3),ESDADDR+1 PUT ASSEMBLED ORIGIN OF LD
         MVC    LLIST+13(3),ZR14+1   AND P(LLIST) FOR LAST LD IN LLIST
         ST        R15,ZR14  STORE P(LLIST) FOR LD IN ESD TABLE FOR SD
         MVI       ZR14,X'04'          SET INDICATOR IN ESD TABLE
         CSNAP     SAVLD,LLIST,16
         CSNAP     ESDTAB,ZR14,4
         B         ESDEND              DONE
ESDSD34  CLC       ZR9+4(6),=C'DIOCS#'  IS ENTRY POINT DIOCS# ?
         BNE       ESDSD31             NO
         L         R2,=V(XADIOCS)      YES - LOCATION OF ADCON IN R2
         B         ESDSD33
ESDSD31  CLC       ZR9+4(6),=C'DIOCS@' IS ENTRY POINT DIOCS@ ?
         BNE       ESDSD32             NO
         L         R2,=V(XAIBCENT)    ADDRESS OF ADCON IN R2
         B         ESDSD33
ESDSD32  CLC       ZR9+4(6),=C'FIOCS#' IS ENTRY POINT FIOCS# ?
         AIF       ('&PROFILE' EQ 'OMIT').ENOPROF                  V1L5
         BNE       ESDSD32A            NO                          V1L5
         AGO       .EPROF                                          V1L5
.ENOPROF ANOP                                                      V1L5
         BNE       ESDSD35             NO
.EPROF   ANOP                                                      V1L5
         L         R2,=V(X@FIOC)       ADDRESS OF FIOCS# IN R2 ?
         AIF       ('&PROFILE' EQ 'OMIT').ENPROF2                  V1L5
         B         ESDSD33                                         V1L5
ESDSD32A DS        0H                                              V1L5
         CLC       ZR9+4(6),=C'PROF@ ' IS ENTRY POINT PROF@ ?      V1L5
         BNE       ESDSD35             NO                          V1L5
         L         R2,=V(XAPROF)       ADDR OF PROF@ IN R2         V1L5
.ENPROF2 ANOP                                                      V1L5
ESDSD33  IF        (CMOSWTCH,ON),ESDSD35  DON'T FILL IN IF YOU ARE NOT
         ST        R3,ZR2                GOING TO LOAD THE ROUTINE
ESDSD35  LR        R2,R0               RETURN ADDRESS IN R2
         BR        R2                  RETURN
         SPACE     2
*  PROCESSOR FOR PR ENTRIES
ESDPR7   LOOKUP    GLBLVAR,ESDPR1
         MVI       ESDOMIT,X'00'
         IF        (LB1,EQ,X'07'),ESDPR11    WAS IT A PR BEFORE ?
LERRVAA  $ERROR    (NOAC,VA,A,NAMR15),ESDEND                       V1L5
ESDPR1   MVC       LB1(2),=X'0700'     SET TO PR WITH NO ALIGNMENT
         MVC       LLIST+10(3),KF0+1    SET LENGTH TO ZERO
         MVI       ESDOMIT,X'0F'
ESDPR11  BAL       R14,GETESDID        GET ESD ENTRY FOR PR
         LA        R1,ESDTABLE(R2)
         ST        R15,ZR1             STORE P(LLIST) IN ESD TABLE
         MVI       ZR1,0
         OC        LB2(1),ESDALIGN     UPDATE ALIGNMENT
         CLC       ESDLEN+1(3),LLIST+10  IS LENGTH GREATER ?
         BNH       ESDPR2              NO
         MVC       LLIST+10(3),ESDLEN+1  YES, USE NEW LENGTH
ESDPR2   IF   (CXD,NON,X'01'),ESDPR3 HAVE OTHER PR'S OR CXD'S OCCURRED
         IF        (ESDOMIT,OFF,X'01'),ESDPR8
         L         R9,CXD              GET P(LLIST) FOR LAST PR
         MVC       ZR9+13(3),ZR1+1     POINT LAST PR TO THIS ONE
         B         ESDPR6
ESDPR3   IF        (CXD,NON,X'02'),ESDPR4 HAS ONLY A CXD OCCURRED ?
         L         R9,CXD              YES - GET ADDRESS OF GVLIST ENTR
         B         ESDPR5
ESDPR4   BAL       R7,GETGVENT         GET A GVLIST ENTRY FOR PRLIST
         LR        R9,R6               ADDRESS OF GVLIST ENTRY IN R9
ESDPR5   MVI       CXD,X'01'           SET SWITCH ON
         MVI       ZR9+2,X'07'         SET B1 IN GVLIST TO PR
         ST        R15,ZR9+12          SET P(FIRST PR) = P(LLIST)
ESDPR6   MVC       CXD+1(3),ZR1+1      P(LLIST) FOR PR IN CXD
         MVC      LLIST+13(3),KF0+1    SET P(NEXT PR) =0
         CSNAP     GVPR,ZR9,16
         CSNAP     CXD,CXD,4
ESDPR8   EQU       *
         CSNAP     PR,LLIST,16
         B         ESDEND
LERRVA6  $ERROR    (NOAC,VA,6,NAMR15),ESDEND                       V1L5
         EJECT
*  PROCESSOR FOR TXT CARDS
TXTSET   MVI       STYPE,X'04'
TXTPROC  CLC       XCARD+1(3),=C'TXT'  IS CARD A TXT CARD ?
         AIF       (      &NDVSD     ).NODOS                       DVS1
         BNE   REPCHK             NO                               DOS2
TXTPROCA EQU   *                                                   DOS2
         AGO       .DOS1                                           DOS2
.NODOS   BNE       RLDSET              NO                          DOS2
.DOS1    ANOP                                                      DOS2
         CSNAP     TXT,XCARD,80
         BAL       R14,GETESDID        GET ESD TABLE ENTRY FOR CSECT
         LA        R14,ESDTABLE(R2)
         IF        (ZR14,NE,X'18'),CRET DONE IF CSECT OMITTED OR ERROR
         L         R14,ZR14            GET P(LLIST) FOR CSECT
         CSNAP     CSECT,ZR14,16
         MVI       XCARD+4,0
         L         R9,XCARD+4          GET ASSEMBLED ORIGIN OF TEXT
         MVC       XCARD+5(3),ZR14+10
         L         R14,XCARD+4         GET GVLIST ENTRY
         A         R9,ZR14+12          ADD RELATIVE ADDRESS
         BCTR      R4,0                N-1 IN R4
         EX        R4,TXTMVC           MOVE N BYTES INTO CSECT
         B         CRET                DONE
TXTMVC   MVC       ZR9(1),XCARD+16
         EJECT
         AIF       (      &NDVSD     ).NODOS1                      DVS1
*PROCESSOR FOR REP CARDS                                           DOS2
*MAKE REP CARDS LOOK LIKE TXT                                      DOS2
REPCHK   CLC   XCARD+1(3),=C'REP' IS IT REP                        DOS2
         BNE   RLDSET             NO                               DOS2
         LA    R8,XCARD+4         MAKE REP LOOK LIKE TXT           DOS2
         $FREE R8                                                  DVS1
         MVC   ZR8(2),=C'00'                                       DOS2
         BAL   R14,REPFLD         CONVERT EBCDIC TO HEX            DOS2
         STH   R3,XCARD+4         ASSEMBLED ADDRESS                DOS2
         BAL   R14,REPFLD         CONVERT EBCDIC TO HEX            DOS2
         STH   R3,XCARD+6         2ND HALF OF ASSEMBLED ADDRESS    DOS2
         CLI   ZR8,C' '                                            DOS2
         BNE   REPBAD                                              DOS2
         MVI   ZR8,C'0'                                            DOS2
         BAL   R14,REPFLD         CONVERT EBCDIC TO HEX            DOS2
         STH   R3,XCARD+14        ESID NUMBER                      DOS2
         SR    R4,R4                                               DOS2
         LA    R9,XCARD+16                                         DOS2
REPLOOP  BAL   R14,REPFLD         CONVERT EBCDIC TO HEX            DOS2
         STH   R3,ZR9                                              DOS2
         CLI   ZR8,C' '                                            DOS2
         BE    TXTPROCA                                            DOS2
         CLI   ZR8,C','                                            DOS2
         BNE   REPBAD                                              DOS2
         LA    R9,ZR9+2                                            DOS2
         LA    R8,ZR8+1                                            DOS2
         B     REPLOOP                                             DOS2
*ROUTINE TO CONVERT 4 HEX CHARS IN EBCDIC TO HALFWORD HEX IN GR3   DOS2
REPFLD   SR    R3,R3                                               DOS2
         LA    R7,4                                                DOS2
REPFLDL  UNPK  REPWORK(3),ZR8(2)                                   DOS2
         SLL   R3,4                                                DOS2
         NI    REPWORK+1,X'0F'                                     DOS2
         CLI   REPWORK,X'FC'                                       DOS2
         BNE   REPDEC                                              DOS2
         CLI   REPWORK+1,6                                         DOS2
         BH    REPBAD                                              DOS2
         AH    R3,=H'9'                                            DOS2
         B     REPFLDA                                             DOS2
REPDEC   EQU   *                                                   DOS2
         CLI   REPWORK,X'FF'                                       DOS2
         BNE   REPBAD                                              DOS2
         CLI   REPWORK+1,9                                         DOS2
         BH    REPBAD                                              DOS2
REPFLDA  MVI   REPWORK,0                                           DOS2
         AH    R3,REPWORK                                          DOS2
         LA    R8,ZR8+1                                            DOS2
         BCT   R7,REPFLDL                                          DOS2
         LA    R4,ZR4+2                                            DOS2
         BR    R14                                                 DOS2
REPWORK  DC    H'0',C' '                                           DOS2
         EJECT                                                     DOS2
.NODOS1  ANOP                                                      DOS2
*  PROCESSOR FOR RLD CARDS
         $FREE     R8,R15                                          V1L5
RLDSET   MVI       STYPE,X'08'
RLDPROC  CLC       XCARD+1(3),=C'RLD'  IS IT AN RLD CARD ?
         BE        RLD2
         MVI       STYPE,X'10'         NO
         CSNAP     END,XCARD,80
         CLC       XCARD+1(3),=C'END'  IS IT AN END CARD
         BE        CRET                YES - DONE
         AIF       ('&VM' NE 'USE').VMWATL1                        VM1
         CLC       XCARD+1(3),=C'LDT'  IS IT AN LDT CARD           VM1
         BE        CRET                YES - IGNORE                VM1
.VMWATL1 ANOP                                                      VM1
LERRTX2  $ERROR    (NOAC,AL,0),CRET SEQUENCE ERROR IN A.LANG. DECK V1L5
         AIF       (      &NDVSD     ).NODOS2                      DVS1
REPBAD   EQU   LERRTX2                                             DOS2
.NODOS2  ANOP                                                      DOS2
RLDBLOOP LA        R8,ZR8+4            GET DATA PORTION OF RLD ITEM
RLD2     C         R8,ENDCARD
         BNL       CRET                DONE
         CSNAP     RLD,XCARD,80
         LH        R2,ZR8+2            GET POSITION ESD
         SLA       R2,2
         LA        R15,ESDTABLE(R2)    R15 -> ESD ENTRY FOR POSITION SD
         CSNAP     POSESD,ZR15,4
         LH        R2,ZR8              GET RELOCATION ESD
         SLA       R2,2
         LA        R9,ESDTABLE(R2)     R9-> ESD ENTRY FOR RELOCATION SD
         CSNAP     RELESD,ZR9,4
RLDLLOOP LA        R8,ZR8+4            GET DATA PORTION OF RLD ITEM
         IF  (ZR15,ON,X'02'),RLDENDLP  IGNORE IF POS. CSECT OMITTED
         IF        (ZR8,ON,X'80'),RLDENDLP   IGNORE IF ERROR
         IF        (ZR8,NON,X'30'),RLD3  IS IT A CXD ?
         IF        (CXD,EQ,X'01'),RLD3 HAVE THERE BEEN PR'S ?
         BAL       R7,GETGVENT   NO - SET UP A GVLIST ENTRY FOR PRLIST
         MVI       ZR6+2,X'07'
         CSNAP     GVCXD,ZR6,16
         ST        R6,CXD              STORE A(GVLIST) IN CXD
         MVI       CXD,X'02'           SET SWITCH
RLD3     BAL       R7,GETGVENT         GET GVLIST ENTRY FOR RLD ITEM
         MVC       ZR6+2(6),=X'64100000005A'    INITIALLIZE ENTRY
         L         R14,ZR15            GET LLIST ENTRY FOR CSECT
         MVC       ESDWORK+1(3),ZR14+10
         L         R14,ESDWORK         R14 -> GVLIST ENTRY
         L         R3,ZR14+12          GET RELATIVE ADDRESS
         LA        R3,ZR3              CLEAR OUT TOP BYTE
         A         R3,ZR8              ADD ASSEMBLED ORIGIN OF ADCON
         S         R3,RDATBASE     SUBTRACT RDATBASE TO MAKE POINTER
         STH       R3,ZR6+4      PUT IN POINTER PART OF GVLIST ENTRY
         MVC       ZR6+13(3),ZR9+1  PUT P(LLIST) FOR REL.ESD. IN RLD
         IF        (ZR9,NON,X'10'),RLD4      RELATIVE ADDRESSING ?
         L         R1,ZR9
         MVC       ZR6+13(3),ZR1+10    POINT RLD ITEM TO GVLIST ENTRY
RLD4     IC        R2,ZR8              GET FLAG BYTE
         SRA       R2,2                PICK OUT LENGTH-1 OF ADCON
         N         R2,KF3
         STC       R2,ZR6+6            STORE IN GVLIST ENTRY
         IF        (ZR8,OFF,X'02'),RLDENDLP  IS SIGN OF RELOCATION - ?
         MVI       ZR6+7,X'5B'         YES
RLDENDLP EQU       *
         CSNAP     GVRLD,ZR6,16
         IF        (ZR8,ON,X'01'),RLDLLOOP  DOES NEXT RLD USE SAME SD'S
         B         RLDBLOOP            NO - RESET SD POINTERS
         EJECT
*  ROUTINE TO GET 4*ESDID IN R2 AND UPDATE ESDID IN PLACE ON CARD
GETESDID LH        R2,XCARD+14         GET ESDID FROM COLUMNS 15-16
         LA        R3,ZR2+1            ADD 1
         STH       R3,XCARD+14         STORE NEW VALUE AT COLUMN 15-16
         SLA       R2,2                MULTIPLY ORIGINAL ESDID BY 4
         BR        R14                 RETURN
         SPACE     2
*  ROUTINE TO GET SPACE FOR A GVLIST ENTRY
GETGVENT GETSYM    16                  GET SPACE IN SYMTAB
         CLC       CGVBEG(4),KF0       ARE THERE ANY ENTRIES IN GVLIST
         BNE       ESDCM4              YES
         ST        R6,CGVBEG           NO - INITIALLIZE BEGINNING
         ST        R6,CGVEND           SET LAST ENTRY IN LIST
         BR        R7                  RETURN
ESDCM4   L         R3,CGVEND           GET LAST ENTRY IN LIST
         LCR       R4,R6               AND LINK IT
         AR        R4,R3               TO
         STH       R4,ZR3              THIS ONE
         ST        R6,CGVEND           UPDATE END OF GVLIST
         BR        R7                  RETURN
ESDTYPES DC        AL1(ESDSD-ESD1)     SD - SECTION DEFINITION
         DC        AL1(ESDLD-ESD1)     LD - LABEL DEFINITION
         DC        AL1(ESDER-ESD1)     ER - EXTERNAL REFERENCE
         DC        AL1(ESDLD-ESD1)     LR - LABEL REFERENCE
         DC        AL1(ESDPC-ESD1)     PC - UNNAMED CSECT
         DC        AL1(ESDCM-ESD1)     CM - COMMON AREA
         DC        AL1(ESDPR-ESD1)     PR - EXTERNAL DSECT
         DC        3AL1(ESDIGNOR-ESD1) NULL ITEM                   V1L5
         DC        AL1(ESDER-ESD1)     WX - WEAK EXTRN             V1L5
CXDTABL1 DC        A(KOMMR+CXD-12-COMMR)
STYPE    EQU       CADSSW
         LTORG
         EJECT
WSAVE    DSECT
*  SAVE AREA AND SWITCHES
LOADSAVE DS        18F
ENDCARD  DS        F                   ADDRESS OF LAST BYTE OF DATA
CXDTABLE DC        A(*-*)
ESDTABLE EQU       CXDTABLE
         DS        255F     SPACE FOR 255 ENTRIES IN ESD TABLE
RDATBASE DC        F'0'
ESDWORK2 DC        F'0'
ESDWORK  DC        F'0'                WORK AREA
ESDOMIT  DS        X      SWITCH FOR OMITTED CSECTS
         END
