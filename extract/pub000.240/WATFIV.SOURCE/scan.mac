SCAN     TITLE     'SCAN     FORTRAN STATEMENT SCAN ROUTINE'
         MACRO
         SETUP     &THING,&ADDR,&SWITTH,&ADDRF,&SWITTHF
         LCLC      &CH
         LCLA      &NN
&CH      SETC      '&THING'(2,4)
&NN      SETA      K'&THING-3
S$&CH    DC        AL1(&NN)
         DC        AL1(&SWITTH)
         OFFSET    DC,AL3,&ADDR
         EXTRN     &ADDR
         DC        C&THING
         AIF       (T'&ADDRF EQ 'O').END
&NN      SETA      &NN+8
         DC        AL1(&NN)
         DC        AL1(&SWITTHF)
         DC        AL3(&ADDRF)
         EXTRN     &ADDRF
.END     ANOP
         MEND
         SPACE     3
         MACRO
&NAME    SHASH     &THING
         LCLC      &CH
&CH      SETC      '&THING'(2,4)
         AIF       ('&CH' NE 'END''').PASS
&CH      SETC      '&THING'(2,3)
.PASS    ANOP
&NAME    DC        AL2(S$&CH-STAB)
         MEND
         SPACE     3
         MACRO
&NAME    SAWAYTO    &N,&M
&NAME    L          R3,SWITCK
         IC         R3,&N-1(R3)
         BAL       R14,&M.(R3)
         MEND
         SPACE     3
         MACRO
&NAME    SFIXS
&NAME    AR        R15,R8
         LA        R8,4
         MVI       SOPTR,NIL
         MEND
         SPACE     3
         MACRO
&NAME    SCODE
&NAME    LR        R0,R8
         SRA       R0,2
         BCTR      R0,R0
         AR        R0,R4
         STC       R0,SCD
         MEND
         SPACE     3
         MACRO
&NAME    LINK1
&NAME    LA        R4,STAK(R8)
         MVC       0(3,R4),KBL6
         LA        R8,3(,R8)
         N         R8,KM0029
         STH       R8,SLINK
         MEND
         SPACE     3
         MACRO
&NAME    LINK2
&NAME    STH       R8,SLINK
         MEND
         SPACE     3
         MACRO
&ANME    STORE
&ANME    A         R3,SNCOUNT
         ST        R3,STAK(R8)
         LA        R8,4(,R8)
         MEND
         SPACE     3
         MACRO
&NAME    SCONV
&NAME    SR        R2,R2
         L         R3,SNLIST
         ST        R2,SNLIST
         SLDL      R2,4
         O         R3,KF12
         STM       R2,R3,SCONV1
         CVB       R3,SCONV1
         MEND
         SPACE     3
         MACRO
&NAME    SERRON    &CODE
&NAME    OI        SERRVECT+SS&CODE,ST&CODE
         MEND
         SPACE     3
         MACRO
&NAME    SETTERR   &MESS
         GBLA      &X,&Y
SS&NAME  EQU       &X
ST&NAME  EQU       SZ&Y
&Y       SETA      &Y+1
         AIF       (&Y NE 8).END
&Y       SETA      0
&X       SETA      &X+1
.END     ANOP
&NAME    ERRCODE   &MESS
         MEND
         EJECT
         GBLA      &X,&Y
         COPY      OPTIONS
         $PUNCH    SCAN                                            DVS2
&X       SETA      0
&Y       SETA      0
SZ0      EQU       X'80'
SZ1      EQU       X'40'
SZ2      EQU       X'20'
SZ3      EQU       X'10'
SZ4      EQU       X'08'
SZ5      EQU       X'04'
SZ6      EQU       X'02'
SZ7      EQU       X'01'
SCANA    CSECT
         ENTRY     SCAN
         EXTRN     ARITH,DODO,DCSTN1,GIFIF,IFLOG,LMAIN,FORMAT
&DECK    SETC      'SCAN'
         PRINT     OFF
         COPY      EXTRN
         COPY      CDEFN
STARTA   DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
         PRINT     ON,NOGEN
         TITLE     'SCAN ROUTINE'
STABLE   DSECT               FOR KEY WORD TABLE
SWLEN    DS        X         LENGTH OF KEY WORD - 15
SWSWT    DS        X         SWITCH FOR EACH STATEMENT TYPE
SWADDR1  DS        3X        ADDRESS OF STATEMENT PROCESSOR
SWTHING  DS        X         THE ACTUAL CHARACTERS OF THE KEY WORD
SCHAR    DSECT               USED TO PICK UP EACH CHARACTER
         SPACE     3
SCANA    CSECT
CHBEG1   EQU       CHBEG
CHEND1   EQU       CHEND
         USING     STAK,R15
         USING     SCHAR,R1
         EJECT
***********************************************************************
*        ENTRY POINT FOR SCAN
***********************************************************************
         PRINT     ON,GEN                                          V1L5
SCAN     CENT      SAVER
         MVI       SIHATULS,ON                                     V1L3
         SR        R2,R2               USED AS A 1 BYTE REGISTER
         ST        R2,SERRVECT         ZERO OUT ERROR VECTOR
         IC        R2,XMODEKP          GET CHARACTER MODE          V1L5
*********  EITHER SET UP A BCDIC OR EBCDIC TABLE FOR SCANNING OR
*********  LEAVE THE TABLE AS IT WAS ON THE LAST ENTRY TO SCAN
         EX        R0,STABCHAR(R2)
         EJECT
**********************************************************************
*        MAIN HAS ALREADY READ THE JOB CARD
*        SCAN WILL READ UNTIL IT GETS     A FORTRAN STATEMENT
**********************************************************************
*        FREE      R11
*        USING     SREAD,R11
SREAD    BAL       R14,CREAD           READ ANOTHER CARD
         B         SCONTRL1            ITS A CONTROL CARD
         B         SERRCC3             A CONTINUATION CARD (ERROR)
         B         SMSTACK1            NORMAL STATEMENT            V1L3
         B         SLOADEND            OBJECT DECK CARD
         BAL       R14,SPRINT          COMMENT  CARD
         B         SREAD               GO READ ANOTHER CARD
STABCHAR MVC       SBCDEBC(20),SBCDTAB
         MVC       SBCDEBC(20),SEBCTAB
         B         SREAD
SMSTACK1 MVI       SIHATULS,OFF                                    V1L3
         B         SMSTACK                                         V1L3
         SPACE     3
*        FREE      R11
*        USING     SMREAD,R11
***********************************************************************
*        NORMAL SCAN READ OF A STATEMENT
***********************************************************************
SMREAD   BAL       R14,CREAD
         B         SCONTRL2            A CONTROL CARD
         B         SMCONTCD            A CONTINUATION CARD
         B         SXNEXT              A NEW STATEMENT
         B         SLOAD               OBJECT DECK CARD
SENDCARD BAL       R14,SPRINT          OK PRINT THE CARD
         MVI       SIHPALNE,OFF        WELL WE'LL PRINT NEXT TIME
         B         SMREAD              PRINT IT AND READ ANOTHER CARD
SPAN     EQU       SMREAD+2
         EJECT
***********************************************************************
*        READ SERVICE ROUTINES
*
***********************************************************************
SCONTRL1 EX        R0,COPENTRY         IS IT A $ENTRY CARD
         AIF       ('&CONTROL'(1,1) EQ '&CONTROL').READC           V1L4
         BE        SERRJB0                                         V1L4
         EX        R0,COPCENTR         CHECK FOR C$ENTRY           V1L4
.READC   ANOP                                                      V1L4
         BNE       SCONTRL3            NO
SERRJB0  $ERROR    (NOEX,JB,0,CHRR1,UNEX),CRET                     V1L5
SCONTRL2 EQU       *                                               V1L4
         NI        SSW,X'FF'-SLCTRL    TURN OFF CONTROL CARD SW    V1L5
         EX        R0,COPENTRY         IS IT $ENTRY                V1L4
         AIF       ('&CONTROL'(1,1) EQ '&CONTROL').CHKCENT         V1L4
         BE        CHKCC3                                          V1L4
         EX        R0,COPCENTR                                     V1L4
.CHKCENT ANOP                                                      V1L4
         BNE       SCONTRL3                                        V1L4
CHKCC3   EQU       *                                               V1L4
         IFALL   (SIHATULS,ON),(SERRVECT+SSSCC3,OFF,STSCC3),SDATA4 V1L4
SDATA3   BAL       R14,STIDY           CLEAN UP LAST STATEMENT
SDATA4   CRET                          RETURN TO CALLER
SCONTRL3 S         R14,KF4             TO RETURN TO SREAD OR SMREAD
         LA        R14,0(,R14)         OUT HIGH ORDER STUFF        V1L3
         EX        R0,COPJOB           A JOB CARD ?                V1L3
         BE        SJOBFND             BRA IF YES                  V1L3
         AIF       ('&CONTROL'(1,1) EQ '&CONTROL').CTR301          V1L4
         EX        R0,COPCJOB                                      V1L4
         BE        SJOBFND                                         V1L4
.CTR301  ANOP                                                      V1L4
         EX        R0,COPSTOP                                      V1L4
         AIF       ('&CONTROL'(1,1) EQ '&CONTROL').CTR302          V1L4
         BE        SJOBFND                                         V1L4
         EX        R0,COPCSTOP         CHECK FOR C$STOP            V1L4
.CTR302  ANOP                                                      V1L4
         BNE       SCONTRL4                                        V1L4
SJOBFND  THEN      (CIHGACRD,ON)       SET SW ON                   V1L4
         C         R14,=A(SMREAD)      FROM SMREAD?                V1L4
         BNE       SERRJB0             BRANCH IF NOT               V1L4
         IF        (SIHATULS,ON),SERRJB0   LAST STAT. TIDIED       V1L3
         BAL       R14,STIDY           TIDY UP LAST STATEMENT      V1L3
         B         SERRJB0             GO ISSUE ERROR              V1L3
SCONTRL4 IF        (SIHATULS,ON),SCONTRL5  LAST STAT. TIDIED       V1L3
         ST        R14,XCMT1           NO                          V1L3
         BAL       R14,STIDY           DO IT                       V1L3
         L         R14,XCMT1                                       V1L3
         MVI       SIHATULS,ON         INDICATE IT DONE            V1L3
SCONTRL5 EQU       *                                               V1L3
         AIF       ('&CNTLIST' EQ 'OMIT').SCONTR0                  V1L2
         OI        SSW,SLCTRL          PROCESSING CONTROL CARD     V1L5
         CLC       XCARD+L'XCONTROL(8),=C'PRINTOFF' PRINTOFF CARD? V1L1
         BNE       SAROUND1            NO                          V1L1
         LR        R15,R14             SAVE REG FOR RETURN         V1L5
         BAL       R14,SPRINT$         GO PRINT IT                 V1L5
         MVI       CLISTSW,X'00'       SET SW TO SUPPRESS PRINTING V1L5
         BR        R15                 RETURN                      V1L5
SAROUND1 CLC       XCARD+L'XCONTROL(7),=C'PRINTON' PRINTON CARD ?  V1L1
         BNE       SAROUND2            NO                          V1L1
SOKPRINT MVI       CLISTSW,B'10000000' SET LIST SW ON              V1L1
         B         SPRINT$             AND OFF TO PRINT CARD       V1L2
SAROUND2 CLC       XCARD+L'XCONTROL(5),=C'EJECT' AN EJECT CARD ?   V1L1
         BNE       SAROUND3            NO                          V1L1
         MVI       XCARD1,C' '         BLANK OUT BUFFER            V1L5
         MVC       XCARD1+1(89),XCARD1                             V1L5
         MVI       XCARD1,C'1'         SET TO SKIP TO NEW PAGE     V1L1
         B         SPRINT$             EJECT& RETURN TO SMREAD     V1L5
SAROUND3 CLC       XCARD+L'XCONTROL(5),=C'SPACE' A SPACE CARD ?    V1L1
         BNE       SAROUND5            NO                          V1L1
         OI        SSW,SPCARD          NOW PROCESSING $SPACE CARD  V1L5
         LA        R1,XCARD+L'XCONTROL+6   POINT R1 PAST $SPACE    V1L5
         LA        R2,7                SCAN NEXT 6 COLS FOR #'S    V1L5
         MVI       XCARD+13,X'FF'      SET SCAN TERMINATOR         V1L5
         LR        R15,R14             SAVE RETURN ADDRESS         V1L5
         BAL       R3,STLOOP3          SCAN & RETURN # IN R9       V1L5
         NI        SSW,X'FF'-SPCARD    TURN OFF SPACE SWITCH       V1L5
         MVI       XCARD1,C' '         BLANK OUT BUFFER            V1L5
         MVC       XCARD1+1(89),XCARD1                             V1L5
         SRDA      R8,32               PREPARE FOR DIVIDE          V1L5
         D         R8,KF3              N/3                         V1L5
         LTR       R9,R9               QUOTIENT = 0?               V1L5
         BZ        SPREM               YES -> CHECK REMAINDER      V1L5
         CH        R9,KH21             QUOTIENT > 21? (63 SP MAX)  V1L5
         BH        SPACE1              YES -> SKIP 1 LINE ONLY     V1L5
SPN      DS        0H                                              V1L5
         MVI       XCARD1,C'-'         SPACE 3 LINES               V1L5
         BAL       R14,SPRINT$         UNTIL COUNT EXHAUSTED       V1L5
         BCT       R9,SPN                                          V1L5
SPREM    DS        0H                                              V1L5
         BCTR      R8,0                REMAINDER -1                V1L5
         LTR       R8,R8               IF +VE FALL THRU            V1L5
         BNP       SPACE1              ELSE BR TO SKIP LAST LINE   V1L5
         MVI       XCARD1,C'0'         SPACE 2                     V1L5
         BAL       R14,SPRINT$                                     V1L5
         BR        R15                                             V1L5
SPACE1   DS        0H                                              V1L5
         MVI       XCARD1,C' '         SPACE 1                     V1L5
         BAL       R14,SPRINT$                                     V1L5
         BR        R15                                             V1L5
SAROUND5 EQU       *                                               V1L1
.SCONTR0 ANOP                                                      V1L2
*./      DELETE    SEQ1=01990000,SEQ2=02000000                     V1L3
         AIF       ('&CNTCODE' EQ 'OMIT').SCONTR1                  V1L2
         CLC       XCARD+L'XCONTROL(5),=C'CHECK' A CHECK CARD ?    V1L2
         BNE       SAROUND6            BRANCH IF NOT               V1L2
         THEN      (CUNDEFSW,EQU,X'0F') SET UNDEF SW TO YES        V1L2
         MVI       XNOPDEFZ+1,BE       SET FOR BRANCH EQUAL        V1L2
         MVI       XNOPDEFN+1,BE       SET FOR BRANCH EQUAL        V1L2
         B         SPRINT$             AND TO PRINT                V1L2
SAROUND6 CLC       XCARD+L'XCONTROL(7),=C'NOCHECK' A NOCHECK CARD ?V1L2
         BNE       SAROUND7            BRANCH IF NOT               V1L2
         THEN      (CUNDEFSW,EQU,NOP)   SET TO NO UNDEF            V1L2
         MVI       XNOPDEFZ+1,NOP      SET FOR NOP                 V1L2
         MVI       XNOPDEFN+1,NOP      SET FOR NOP                 V1L2
         B         SPRINT$             AND OFF TO PRINT            V1L2
SAROUND7 CLC       XCARD+L'XCONTROL(4),=C'WARN' A WARN CARD ?      V1L2
         BNE       SAROUND8            TAKE BRANCH IF NOT          V1L2
         MVI       CWARNSW,ON          SET FOR WARN                V1L2
         B         SPRINT$             OFF TO PRINT THE CARD       V1L2
SAROUND8 CLC       XCARD+L'XCONTROL(6),=C'NOWARN' A NOWARN CARD ?  V1L2
         BNE       SAROUND9            TAKE BRANCH IF NOT          V1L2
         MVI       CWARNSW,OFF         SET TO NOWARN               V1L2
         B         SPRINT$             OFF TO PRINT THE CARD       V1L2
SAROUND9 EQU       *                                               V1L2
         CLC       XCARD+L'XCONTROL(3),=C'EXT'   $EXT ?            V1L3
         BNE       SNEXT1              NO                          V1L3
         MVI       CEXTNSW,ON          SET ON                      V1L3
         B         SPRINT$             OFF TO PRINT CARD           V1L3
SNEXT1   CLC       XCARD+L'XCONTROL(5),=C'NOEXT'  $NOEXT ?         V1L3
         BNE       SNEXT2                                          V1L3
         MVI       CEXTNSW,OFF         SET OFF                     V1L3
         B         SPRINT$                                         V1L3
SNEXT2   EQU       *                                               V1L3
.SCONTR1 ANOP                                                      V1L5
         AIF       ('&PROFILE' EQ 'OMIT').SPROF40                  V1L5
         CLC       XCARD+L'XCONTROL(6),=C'PROFON'  $PROFON ?       V1L5
         BNE       SNEXT3              NO                          V1L5
         OI        CCNTSW,XPROFON      TURN ON CCNTSW              V1L5
         MVI       XPROFILE+1,NOP      SET TO FALL THRU AT XTIME   V1L5
         OI        KOMPSW,SPROF1SW     INDICATE $PROFON ENCOUNTEREDV1L5
         B         SPRINT$                                         V1L5
SNEXT3   CLC       XCARD+L'XCONTROL(7),=C'PROFOFF' $PROFOFF ?      V1L5
         BNE       SNEXT4              NO                          V1L5
         NI        CCNTSW,X'FF'-XPROFON    TURN CCNTSW OFF         V1L5
         B         SPRINT$                                         V1L5
SNEXT4   DS        0H                                              V1L5
.SPROF40 ANOP                                                      V1L5
         CLC       XCARD+L'XCONTROL(7),=C'OPTIONS'  $OPTIONS ?     V1L5
         BNE       SNEXT5              NO                          V1L5
         THEN      (C$OPTSW,ON)        YES                         V1L5
         SPRIN     XCARD1,90           PRINT THE OPTIONS CARD      V1L5
         MVI       XCARD1,C' '         RESET CC CHARACTER          V1L5
         STM       R0,R15,XPRINTS      SAVE THE REGISTERS          V1L5
         L         R15,=V(BBEGJOB)     OFF TO ACCT TO              V1L5
         BALR      R14,R15             ANALYZE THE PARAMETERS      V1L5
         SR        R2,R2               ZERO R2                     V1L5
         IC        R2,XMODEKP          GET THE KP INDICATOR        V1L5
         EX        R0,STABCHAR(R2)     MOVE IN THE CORRECT CHARS   V1L5
         LM        R0,R15,XPRINTS      RESTORE THE REGISTERS       V1L5
         BR        R14                 RETURN                      V1L5
SNEXT5   DS        0H                                              V1L5
         AIF       ('&ISNTRAC' EQ 'OMIT').SNOISN1                  V1L2
         CLC       XCARD+L'XCONTROL(3),=C'ISN'  AN ISN CARD ?      V1L2
         BNE       SAROUN10            NOPE                        V1L2
         CLI       XCARD+L'XCONTROL+5,C'F' IS IT ISNOFF ?          V1L2
         LR        R7,R14              SAVE FOR RETURN             V1L2
         BE        SISNOFFT            BRANCH IF SO                V1L2
         BAL       R1,SEGCHK           GENERATE ENTRY CODING       V1L5
         OUTPUT    4,SISNONC                                       V1L3
         BR        R7                  RETURN                      V1L2
SISNOFFT DS        0H                                              V1L5
         BAL       R1,SEGCHK           GENERATE ENTRY CODING       V1L5
         OUTPUT    4,SISNOFFC          OUTPUT OBJECT CODE          V1L5
         BR        R7                  RETURN                      V1L2
SISNONC  MVI       XISNPATC+1,NOP      THIS IS THE O B J E C T     V1L2
SISNOFFC MVI       XISNPATC+1,BRA            C O D E               V1L2
SAROUN10 EQU       *                                               V1L2
.SNOISN1 ANOP                                                      V1L2
         AIF       ('&OMR'  EQ 'OMIT').SNOOMR                      V1L2
         CLC       XCARD+L'XCONTROL(3),=C'OMR'                     V1L2
         BNE       SNOOMR              NOT AN OMR CONTROL          V1L2
         OI        KOMPSW,XOMRSW                                   V1L5
SNOOMR   CLC       XCARD+L'XCONTROL(5),=C'NOOMR' A NO OMR CARD ?   V1L2
         BNE       SAROUNDA            BRANCH IF NOT               V1L2
         NI        KOMPSW,X'FF'-XOMRSW                             V1L5
SAROUNDA EQU       *                                               V1L2
.SNOOMR  ANOP                                                      V1L2
*./      DELETE    SEQ1=02019000,SEQ2=02080000                     V1L3
         B         SPRINT$             OF TO PRINT                 V1L3
.SCNTOKR ANOP                                                      V1L3
         AIF       ('&ISNTRAC' EQ 'OMIT').SSEGCHK                  V1L5
SEGCHK   DS        0H                                              V1L5
         BAL       R14,SPRINT$         PRINT CONTROL CARD          V1L5
         IF        (CSRSWTCH,RTN),R1   RETURN IF IN PROG SEGMENT   V1L5
         $ERROR    (WARN,CC,B)         $ISNON MUST BE IN SEGMENT   V1L5
         BR        R1                  RETURN                      V1L5
.SSEGCHK ANOP                                                      V1L5
         EJECT                                                     V1L3
SERRCC3  SERRON    SCC3
         B         SNEWSTAT            OFF TO INITIALIZE THE STATEMENT
         SPACE     2
SMCONTCD LH        R0,SCC              CARD COUNT
         SR        R7,R7                                           V1L3
         S         R0,KF1              REDUCE BY ONE
         BNM       SCONT1               TOO MANY ALREADY SO SOON
         SERRON    SCC1                SO ISSUE A WARNING
         SR        R0,R0               SO SIGN WILL BE PLUS
         SPACE     2
SCONT1   STH       R0,SCC
         C         R15,STACKEND        IS THE STACK FULL
         BNL       SBOMBED1            YES SO QUIT THE STATEMENT
         SPACE     2
SCONT2   DS        0H                                              V1L5
         IF        (SSW,NZ,SLCTRL),SCCA  WARN IF CONTROL CARD      V1L5
         CLC       SCHAR(5),KBL6       IS THERE A STMT NO?         V1L4
         LA        R1,SCARD+5          ADDR OF STATEMENT - 1
         BE        SMCDINIT            NOPE SO GO PROCESS REST OF STMT
         SERRON    SCC0                OH OH SHOULDN'T BE HERE
         B         SMCDINIT            SO FORGET ABOUT IT
SCCA     EQU       *                                               V1L4
         BAL       R14,SPRINT          PRINT OFFENDING CARD        V1L4
         $ERROR    (WARN,CC,A),SMREAD  NO CONTINUATION OF CTRL STMTV1L5
         SPACE     2
         EJECT
***********************************************************************
*        WE HAVE A COMPLETE STATEMENT IN THE STACK.
***********************************************************************
SXNEXT   IF        (SIHATULS,OFF),SXNEXT01                         V1L3
         MVI       SIHATULS,OFF                                    V1L3
         B         SXNEXT02                                        V1L3
SXNEXT01 BAL       R14,STIDY                                       V1L3
SXNEXT02 EQU       *                                               V1L3
*        NOW START PROCESSING THE NEXT STATEMENT
         LA        R1,SCARD            ADDR OF CARD IMAGE
SMSTACK  MVI       CURSTNO,ALLON       ASSUME NO STMT NO. PRESENT
         NI        SSW,X'FF'-SLCTRL    NOT PROCESSING CONTROL CARD V1L5
         CLC       SCHAR(5),KBL6       WELL IS THERE A STMT NO.
         BNE       STLOOP4             YES
STLOOP0  LA        R1,SCARD+5
         B         SNEWSTAT
STLOOP4  LA        R2,5                SET UP COUNT
STLOOP3  SR        R8,R8
         BAL       R14,STLOOP2         GO AROUND FIRST TIME
STLOOP1  LA        R1,1(,R1)           BUMP CHAR COUNT
STLOOP2  IF       (SCHAR,NE,BLANK),STNEXT     IS IT BLANK
         BCTR      R2,R14              YES SO GET NEXT CHAR
         B         STDONE              ALL DONE COLLECTING
STNEXT   IF       (SCHAR,ON,X'F0'),STPOK   DOES IT HAVE A ZONE
         AIF       ('&CNTLIST' EQ 'OMIT').STP0                     V1L5
         IF        (SSW,OFF,SPCARD),STCPK BR IF NOT $SPACE CARD    V1L5
         LA        R8,1                DEFAULT TO $SPACE           V1L5
         BR        R3                  NO ERROR - JUST RETURN      V1L5
STCPK    DS        0H                                              V1L5
.STP0    ANOP                                                      V1L5
         IF        (SCHAR,NE,C':'),STP0      PACKED FORMAT?
         BCTR      R1,R0
         B         STDONE
STP0     DS        0H                                              V1L4
         IF        (SCHAR,NE,X'FF'),STP1                           V1L5
         AIF       ('&CNTLIST' EQ 'OMIT').STPC1                    V1L5
         IF        (SSW,ON,SPCARD),STDONE  BR IF $SPACE CARD       V1L5
.STPC1   ANOP                                                      V1L5
         IF        (SPCKSWT,ON),STPACK BR IF PACKED STMT           V1L5
STP1     DS        0H                                              V1L5
         SERRON    SCC9                NO -> INV CHAR MSG          V1L4
         IF        (SPCKSWT,OFF),STLOOP0  NOT A PACKED CARD
         B         SNEWSTAT            AND PROCESS REST OF STATEMENT
STPACK   DS        0H                                              V1L4
         BCTR      R1,R0               BACK UP 1                   V1L4
         $ERROR    (NOAC,ST,B)         PACKED STMT MUST HAVE COLON V1L5
         B         SNEWSTAT            NEXT CARD                   V1L4
STPOK    IF        (SCHAR,GT,C'9'),STP0      IS IT A FUNNY CHAR
         IC        R7,SCHAR            NO SO GET IT
         N         R7,KF15             REMOVE ZONE
         SLA       R8,4                SHIFT WHAT YOU HAVE
         AR        R8,R7               ADD WHAT YOU JUST GOT
         BCTR      R2,R14              AND GET NEXT CHAR
STDONE   SLA       R8,4                ALL DONE COLLECTING
         O         R8,KF12             INSERT SIGN
         ST        R8,STLIST+4         SAVE STMT NO. AWAY
         CVB       R8,STLIST           CONVERT TO BINARY
         AIF       ('&CNTLIST' EQ 'OMIT').STPC2                    V1L5
         IF        (SSW,ON,SPCARD),R3  RETURN IF $SPACE CARD       V1L5
.STPC2   ANOP                                                      V1L5
         ST        R8,CURSTNO          SAVE # FOR PROCESSOR        V1L5
         LA        R1,1(,R1)           BUMP PAST COLUMN SIX
         EJECT
**********************************************************************
*        THIS CODING INITIALIZES SCAN FOR A NEW STATEMENTF
**********************************************************************
SNEWSTAT SR        R7,R7               FOR STORING PRESENT CHAR
         SR        R2,R2               FOR TRT LOOP
         ST        R2,CSTNOLK          SYM TAB PTR TO STMT NO.
         ST        R2,SNLIST           ZEROCONSTANT COLLECTOR WORD
         ST        R2,SWITCHES
         ST        R2,SWITCHES+4
         MVI       SDASWTCH,X'00'      INITIALIZE D. A. SWITCH
         MVC       SCC+1(1),CNOCCRDS   SET CONT CARD COUNT         V1L4
         MVI       CDOEND,OFF                                      V1L2
         LA        R8,4                CHAR COUNT
         STH       R2,SBCNT            ZERO BRACKET COUNT
         ST        R2,SRT1             FIRST LEVEL 0 ')' PTR
         ST        R2,SRT2             SECOND LEVEL 0 ')' PTR
         ST        R2,SRT3             LAST   LEVEL 0 ')' PTR
         ST        R2,CSAVENOX         STATNO OBJCODE ADDR         V1L2
         LH        R0,=H'-8'
         STH       R0,SAVESRT          STORE FOR LEVEL 0 ')' PTR
         MVI       SFNDSWT,NIL
         L         R15,SSTACK          ADDR OF THE STACK
         LH        R0,XISN             BUMP ISN
         AH        R0,KF1+2
         STH       R0,XISN
         MVI       SOUTCODE+1,NOP      FOR BRANCH AROUND IN HOLL'S
         MVI       SOPTR,TERM          INITIALIZE STACK TERMINATOR
         MVI       SWITCH,SCINIT       SCAN SWITCH
         MVI       CISNCDSW,OFF
         EJECT
*********************************************************************
*   REG 1       USED FOR TRT INST
*   REG 2 CONTAINS ROUTINE ADDRESS
*   REG 7       USED TO STORE THE CHARACTER
*   REG 8   USED FOR CHARACTER COUNT
*   REG 15  ADDR      OF STACK
*********************************************************************
SMCDINIT LA        R9,SOPERTOR         ADDR OF OPERATOR ROUTINE
SRET1    LA        R1,1(,R1)           BUMP TO GET NEXT CHAR
         AIF       ('&MODEL' EQ '75').SRET1
SRET11   TRT      SCHAR(73),SJUMPC
         IC        R7,SCHAR            GET CHARACTER
.SRET1   ANOP
         AIF       ('&MODEL' NE '75').SRET2
SRET11   IC        R7,SCHAR            GET THE CHARACTER
         IC        R2,SJUMPC(R7)       GET THE CODE
.SRET2   ANOP
         LH        R14,SJUMPR(R2)      ADDR OF ROUTINE
         B         SPAN(R14)           AND AWAY WE GO
         AIF       ('&MODEL' NE '75').SBLANKC
         SPACE 2
SBLANKC  LA        R1,1(,R1)           BUMP TO NEXT CHAR
         TRT      SCHAR(73),SJUMPC
         B        SRET11
.SBLANKC ANOP
         $FREE     R1                                              V1L5
         EJECT
***********************************************************************
*        FINISH LAST ENTRY IN THE STACK
*        FIX UP BRANCH AROUND ADDRESS OF HOLLERITH CONSTANTS
*        CHECK BRACKET COUNT FOR ZERO
***********************************************************************
STIDY    ST        R14,STID14          SAVE FOR RETURN
         SR        R7,R7
         IF        (SFNDSWT,NON,SCFORM),STIDY1   IS IT FORMAT STMT
         L         R2,SADFORM          ADDR OF FORMAT PROCESSOR
         ST        R2,SAVE123          SAVE IT FOR LATER
         B         SMSET3
STIDY1   SAWAYTO   STIDT,SFIXTAB       FIX UP LAST ENTRY IN STACK
         MVC       STAK(4),SLAST       INSERT END DELIMITER IN STACK
         IF        (SHLCONS,NE,ALLON),SAWAY1     ANY HOLL CONSTANTS
         IF        (CMOSWTCH,ON,ZSWON),SAWAY1    MEMORY FULL YET
         L         R4,CBAR11           SET UP BRANCH AROUND
         LR        R0,R5               DISPLACEMENT IN THE OBJECT
         SR        R0,R4               FOR HOLLERITH CONSTANTS
         STH       R0,ZR4+2(RO)        AND STORE IT IN THE OBJECT CODE
SAWAY1   EQU       *
         AIF       ('&SNAPS' EQ 'OMIT').SSN2
         BAL       R14,PRNTSTCK        FOR TEST PURPOSES
.SSN2    ANOP
         CH        R7,SBCNT            IS BRACKET COUNT ZERO
         BZ        SFIND               NO
         SERRON    SPC0                YES SO SET ERROR FLAG
         EJECT
**********************************************************************
*        CHECK FOR IF'S AND DO'S AND ASSIGNMENT STATEMENTS FIRST
*        NEXT CHECK ALL OTHER TYPES OF STATEMENTS
*        ADDR OF STATEMENT PROCESSOR WILL BE IN 'SAVE123'
*        ADDR OF PROCESSOR OF STMT AFTER LOG IF IN SAVE123+8
*        AND NO. OF CHARS IN KEY-WORD OF STMT WILL BE IN SAVE123+4
*        KEY-WORD WILL BE ELIMINATED FROM STACK BY SETSTACK ROUTINE
***********************************************************************
SFIND    MVI       SFNDSWT,SCEXEC      ASSUME EXECUTABLE           V1L2
         MVI       CADSSW,OFF          SET FOR ARITH
         L         R15,SSTACK          ADDR OF STACK
         LA        R9,1                INITIALIZE LOGICAL IF SWT
         L         R3,SRT1             FIRST RIGHT BRACKET PTR
SFNDTYPE CLC       SOPND(3),=CL3'IF '  ARE FIRST TWO CHARS 'IF'
         BNE       SFND1               NO
*   HAVE WE HAD UN-MATCHED PARENTHESI?
         IF        (SERRVECT+SSSPC0,ON,STSPC0),SFND2
         $FREE     R15                                             V1L5
         USING     STAK,R3
         LTR       R3,R3               HAVE WE HAD A LEVEL 0 RT BRCK
         BZ        SFND2                                           V1L1
SFND9    AH        R3,0(,R3)           ADD IN LINK IN STACK
         IF        (SCD,EQ,NIL),SFND2  DOES OPERATOR FOLLOW
         IF        (SCD,NON,X'80'),SFND3  DOES A CONSTANT FOLLOW?
*    NOW WE ASSUME THE STMT TO BE AND ARITH 'IF'
         L         R8,SADIFIF          SET ADDR OF PROCESSOR
         LA        R7,1                LENGTH -1
         MVI       SOPTR,TERM          SET END DELIMITER IN STACK
         B         SMSET
SFND3    IF        (SCD,MIX,X'60'),SFND2  DOES A LETTER FOLLOW
* NOW WE HAVE A LOGICAL IF
         BXLE      R9,R9,SERRIF0       IF FIRST PART WAS IF
         LCR       R9,R9               SET 'LOG IF' SWITCH
         LR        R15,R3              SET FOR STACK
         $FREE     R3                                              V1L5
         USING     STAK,R15
         MVI       SOPTR,TERM          SET END DELIMITER IN STACK
         AIF       ('&STR' NE 'USE').SSTR1                          ST1
         CLC       SOPND(7),=C'THENDO '                             ST1
         BNE       SSKIP                                            ST1
         AH        R3,SLINK            NEXT ENTRY IN STACK          ST1
         CLI       2(R3),TERM          END DELIMETER?               ST1
         BNE       SSKIP               NO-NOT A MATCH               ST1
**   THIS IS AN IF(.......)THEN                                   **ST1
         LA        R7,5                (LENGTH OF THENDO)-1         ST1
         L         R8,SATHEN           ADDR. OF THEN ROUTINE        ST1
         MVI       SFNDSWT,X'01'                                    ST1
         B         SRET                                             ST1
SSKIP    EQU       *                                                ST1
.SSTR1   ANOP                                                       ST1
         AIF       ('&PROFILE' EQ 'OMIT').SPROF80                  V1L5
         IF        (CCNTSW,OFF),SPROF80                            V1L5
         MVI       CLIFSW,X'FF'        INDICATE LOGICAL IF         V1L5
SPROF80  DS        0H                                              V1L5
.SPROF80 ANOP                                                      V1L5
         L         R3,SRT2             SECOND PAREN PTR            V1L5
         B         SFNDTYPE
SFND1    CLC       SOPND(2),=CL2'DO'   ARE FIRST TWO CHARS 'DO'
         AIF       ('&STR' NE 'USE').SSTR2                          ST1
         BNE       SFND02              NOPE                         ST1
         AGO       .SSTR3                                           ST1
.SSTR2   ANOP                                                       ST1
         BNE       SFND2               NOPE
.SSTR3   ANOP                                                       ST1
*   HAVE WE HAD A LEVEL 0 '=' FOLLOWED BY A LEVEL 0 ','
         IF        (SWITCH1,NE,SSCOMMA+SEQUAL),SFND2
         L         R8,SADDODO          SET ADDR OF PROCESSOR
         LA        R7,1                LENGTH -1
         BXLE      R9,R9,SERRIF0       AFTER LOGICAL IF
         B         SMSET1
SERRIF0  SERRON    SIF0      INVALID AFTER LOGICAL IF
         L         R8,SADERROR         SET ADDR OF PROCESSOR
         SR        R7,R7               +LENGTH
         B         SRET
         AIF       ('&STR' NE 'USE').SSTR4                          ST1
SFND02   CLC       SOPND(6),=C'WHILE '    DO WE HAVE A WHILE?       ST1
         BNE       SFND2               NO                           ST1
*  HAVE WE HAD UNMATCHED PARENTHESI?                                ST1
         IF        (SERRVECT+SSSPC0,ON,STSPC0),SFND2                ST1
         $FREE     R15                                             V1L5
         USING     STAK,R3                                          ST1
         LTR       R3,R3               HAVE WE HAD A LEVEL 0 RT BRK?ST1
         BZ        SFND2                                            ST1
         AH        R3,0(,R3)           ADD IN LINK IN STACK         ST1
         CLC       SOPND(3),=C'DO '                                 ST1
         BNE       SFND002                                          ST1
         $FREE     R3                                              V1L5
         USING     STAK,R7                                          ST1
         LR        R7,R3                                            ST1
         AH        R7,SLINK           CHECK NEXT ENTRY              ST1
         CLI       SOPTR,TERM          END DELIMETER?               ST1
         BNE       SFND2               NO                           ST1
         $FREE     R7                                              V1L5
*   NOW WE HAVE A WHILE STATEMENT                                   ST1
         BXLE      R9,R9,SERRIF0       IF FIRST PART WAS IF         ST1
SWHPERF  LR        R15,R3                                           ST1
         USING     STAK,R15                                         ST1
         MVI       SOPTR,TERM          SET END DELIMETER IN STACK   ST1
         L         R8,SAWHILE          OFF TO WHILE PROC. FOR       ST1
         BALR      R7,R8               PSEUDO LABEL                 ST1
         LA        R7,6                PERFORM-LENGTH               ST1
         CLI       CWHPERF,X'FF'       IS IT WHILE-EXECUTE          ST1
         BE        SSKIP3              YES - AWAY                   ST1
         LA        R7,1                NO - DO-LENGTH               ST1
SSKIP3   L         R8,SAWHDO           ADDR. OF WHILE-DO            ST1
         L         R2,SADIFLOG         ADDR. OF 'LOGIF' PROC.       ST1
         ST        R2,SAVE123          SAVE IT                      ST1
         STM       R7,R8,SAVE123+4     ADDR. & LENGTH OF OUR 'DO'   ST1
         NI        SFNDSWT,ALLON-SCISN      FORCE ISN CODE          ST1
         LA        R7,4                LENGTH OF WHILE-1            ST1
         B         SMSET3                                           ST1
         $FREE     R15                                             V1L5
         USING     STAK,R3                                          ST1
SFND002  CLC       SOPND(7),S$EXEC+5   IS IT WHILE-EXECUTE?         ST1
         BNE       SFND2               NO - AWAY                    ST1
         $FREE     R3                                              V1L5
         USING     STAK,R7                                          ST1
         LR        R7,R3                                            ST1
         AH        R7,SLINK            CHECK NEXT ENTRY             ST1
         CLI       SOPTR,TERM          END DELIMETER?               ST1
         BNE       SFND2               NO                           ST1
         $FREE     R7                                              V1L5
         USING     STAK,R15                                         ST1
*   WE HAVE A WHILE-EXECUTE STMT.                                   ST1
         BXLE      R9,R9,SERRIF0       IF FIRST PART WAS AN IF      ST1
         MVI       CWHPERF,X'FF'       SET WHILE-EXECUTE SW. (COMMR)ST1
         B         SWHPERF             PROCESS IT                   ST1
.SSTR4   ANOP                                                       ST1
*   IF WE JUST HAVE HAD A LEVEL 0 '=' IT MUST BE ASSIGNMENT STMT
SFND2    IF        (SWITCH1,NE,SEQUAL),SFND5
         L         R8,SADARITH         SET ADDR
         SR        R7,R7               + LENGTH
         B         SMSET
SFND5    L         R3,SOPND            GET 1ST FOUR CHARS
         N         R3,=X'3F3F3F3F'     GET RID OF ZONES
         M         R2,SMULT            WEIGHTED SUM OF CHARS
         SLDL      R2,9                TIMES TWO
         N         R2,=X'0000007E'     MOD 64 TIMES 2
         LH        R2,SHASH(R2)        GET HASH PTR
         LTR       R2,R2               IS IT ZERO
         BZ        SERRST5             SO IT'S UNDECODEABLE
         LA        R2,STAB(R2)         POINT TO ENTRY
         USING     STABLE,R2
         SR        R3,R3
         IC        R3,SWLEN            GET NO OF CHARS
         EX        R3,SFCOMP           COMPARE  ALL CHARS
         BNE       SERRST5             AN ERROR
*    CAN 'FUNCTION' FOLLOW THE KEY WORD  E.G. REAL FUNCTION
         IF        (SWSWT,NON,SCFUNC),SFND8
         LA        R4,STAK+5(R3)       GET ADDR FOR COMPARE
         CLC       0(8,R4),S$FUNC+5    FOLLOWED BY FUNCTION
         BNE       SFND8     NO SO GO TO GET ADDR IN TABLE
         LA        R2,6(R2,R3)         YES SO POINT TO CORRECT ADDR
SFND8    MVC       SWADDR(5),SWLEN     GET INFO FROM STAB
         LM        R7,R8,SWADD         AND SAVE IT
SFND6    BXLE      R9,R9,SFND10        AFTER LOGICAL IF?
         B         SMSET1
SCIFLOG  EQU       X'01'       HAS TO BE CHANGED
SFND10   IF        (SFNDSWT,ON,SCIFLOG),SRET
         IF        (SFNDSWT,ON,SCNOGO),SERRIF0
         SERRON    SIF0
SRET     L         R2,SADIFLOG         ADDR OF 'LOG IF' PROCESSOR
         ST        R2,SAVE123          AND SAVE IT
         STM       R7,R8,SAVE123+4     AND ADDR AND LENGHT OF STMT
         NI        SFNDSWT,ALLON-SCISN FORCE ISN CODE TO BE GEN'ED
         LA        R7,1                LENGTH -1
         B         SMSET3
SMSET    BXLE      R9,R9,SRET          AFTER LOGICAL IF
SMSET1   ST        R8,SAVE123          NO SO SAVE ADDR
         N         R7,KF255            AND LENGTH
SMSET3   L         R9,SSTACK           ADDR OF STACK
         AIF       ('&STR' NE 'USE').SSTR5                          ST1
         C         R2,=A(S$READ)       IS IT A READ STMT.?          ST1
         BNE       SSKIP2              NO                           ST1
         BAL       R14,CNOP04          FULLWORD ALLIGN              ST1
         ST        R5,CREADSWT         AND SAVE OBJ. CODE PTR       ST1
         B         SSKIP1              SKIP                         ST1
SSKIP2   C         R2,=A(S$ATEN)       ATEND STMT.?                 ST1
         BE        SSKIP1              YES - SKIP                   ST1
         MVI       CREADSWT,X'FF'      NO - TURN OFF READ SW        ST1
SSKIP1   EQU       *                                                ST1
.SSTR5   ANOP                                                       ST1
         LTR       R7,R7               WAS LENGTH ZERO?            V1L2
         BZ        SAWAY               YES,IMPLIES NO KEYWORD      V1L2
         LA        R1,5(R7,R9)         PT TO FIRST CHAR AFTER KEY WD
         SETSTACK   ,           GET RID OF KEY WORD
         B         SAWAY
SDEND    SERRON    SST3                UNDECODEABLE  STMT
         LA        R0,SBACK1           SPECIAL RETURN IN SCAN      V1L2
         ST        R0,SAVE123          SAVE IT FOR LATER
         $FREE     R2                                              V1L5
         EJECT
**********************************************************************
*        ERROR CHECKING AND MISCELLANEOUS
***********************************************************************
SAWAY    IF        (CURSTNO,NE,ALLON),STNUMBRD BIF STATEMT NO'D    V1L2
         IF        (SFNDSWT,NON,SCEXEC),SPASSGO  IF ITS EXECUTABLE V1L2
         IF        (CIFGOTSW,NON,X'01'),SPASSGO  AND AFTER TRANSFERV1L2
         MVI       CIFGOTSW,NIL        THEN IT                     V1L2
         $ERROR    (WARN,ST,4),SPASSGO SHOULD BE NUMBERED          V1L5
STNUMBRD LR        R8,RS               SAVE STACK POINTER          V1L2
         LA        RS,CURSTNO-4        POINT TO STATEMENT NUMBER   V1L2
         LOOKUP    STATNUM             LOOK IT UP                  V1L2
         LR        RS,R8               RESTORE STACK POINTER       V1L2
         USING     NLIST,R15                                       V1L2
         ST        R15,CSTNOLK         SAVE SYMTAB POINTER         V1L2
         BNEW      STNEWNUM            BRANCH IF NEW NUMBER        V1L2
STOLDNUM IF        (NB1,NON,ADDR),STNOST2 PREVIOUSLY DEFINED?      V1L2
SDECST2  DS        0H                                              V1L5
         MVI       CURSTNO,ALLON       PRETEND STATMT NOT NUMBERED V1L2
         $ERROR    (BOOT,ST,2,STNR15),SPASSGO                      V1L5
STNOST2  IF        (NB1,NON,EXEC),STESTFMT  WAS IT USED AS EXECUT? V1L2
         IF        (SFNDSWT,ON,SCEXEC),STSTEXEC IF SO,AND THIS STATV1L2
         $ERROR    (NOAC,ST,5,USNR15),STBUGGER  NOT EXEC, ERROR    V1L5
STESTFMT IF        (SFNDSWT,ON,SCFORM),SETADDR IS THIS FORMAT STAT V1L2
         IF        (NB1,NON,X'02'),SDECST2                         V1L5
         $ERROR    (BOOT,IO,A,STNR15,INVAL)  ERROR IF NOT          V1L5
STBUGGER MVC       CSAVENOX(4),XAXBOOT FOR RUN=FREE                V1L2
         B         SETADDR                                         V1L2
STNEWNUM IF        (SFNDSWT,ON,SCEXEC),SETEXEC  IS THIS EXECUTABLE?V1L2
         IF        (SFNDSWT,NON,SCFORM),SPASSGO IS IT FORMAT STAT? V1L2
         OI        NB1,FORM+ADDR       YES                         V1L2
         B         SPASSGO                                         V1L2
SETEXEC  OI        NB1,EXEC                                        V1L2
STSTEXEC IF        (CIFGOTSW,NON,X'01'),SAVADDR  AFTER TRANSFER?   V1L2
         MVI       CIFGOTSW,NIL        YES                         V1L2
         OI        NB1,AFTRAN                                      V1L2
SAVADDR  ST        R5,CSAVENOX         SAVE OBJCODE ADDR FOR AFTER V1L2
SETADDR  OI        NB1,ADDR            INDICATE STATNUM DEFINED    V1L2
SPASSGO  IF        (CSRSWTCH,NE,BDAT),STOUT4  IN BLOCK DATA S/P    V1L2
         IF        (SFNDSWT,ON,SCBLOC),STOUT4
         SERRON    SBD0
         B         SBOMBED
**********************************************************************
*        HAVE WE GENERATED MAIN-LINE ENTRY CODING AS YET
*        IF STMT IS A SUBPROGRAMME TYPE DO NOT GENERATE
*        OR OF COURSE IF IT ALREADY HAS BEEN GENERATED DON'T DO AGAIN
**********************************************************************
STOUT4   IF        (CSRSWTCH,RTN),STOUT1
         IF       (SFNDSWT,ON,SCMAIN),STOUT1
         L         R3,SADMAIN          ADDR OF PROCESSOR
         BALR      R14,R3              AN AWAY TO IT
*********************************************************************
*        IF THE FIRST STMT HAD A STMT NO. ADJUST ADDR IN SYM TABLE
********************************************************************
         IF        (CURSTNO,EQ,ALLON),STOUT1
         ST        R5,CSAVENOX         SAVE OBJ CODE PTR           V1L2
         EJECT
***********************************************************************
*        GENERATE ISN CODING
*        EXECUTABLE STMT'S GO TO CISN
*        NON-EXECUTABLE STATEMENTS  NOTHING
**********************************************************************
STOUT1   IF        (SFNDSWT,ON,SCGENI),STOUTISM                    V1L2
         IF        (SFNDSWT,NON,SCEXEC),STOUT3                     V1L2
STOUTISN MVI        CASF1,X'02'        EXECUTABLE STATEMENT SWT
STOUTISM IF        (SFNDSWT,ON,SCISN),STOUT3
         AIF       ('&PROFILE' EQ 'OMIT').SPROF1                   V1L5
         MVC       XRUPTSV(4),CALINK   SAVE THE ISN LINK           V1L5
.SPROF1  ANOP                                                      V1L5
         BAL       R14,CISN            OUTPUT ISN CODING
         EJECT
***********************************************************************
*        THE SERRON MACRO SETS BITS IN SERRVECT EACH TIME AN
*        ERROR IS ENCOUNTERED
*        THIS ROUTINE CHECKS THESE BITS AND OUTPUTS THE APPROPRIATE
*        ERROR MESSAGES
**********************************************************************
STOUT3   OC        SERRVECT,SERRVECT   ANY ERRORS?                 V1L2
         BZ        SNOERRS             BIF NONE                    V1L2
         LA        R1,SERRTAB-SERLEN   SET FOR ERROR MACRO         V1L2
         L         R2,SERRVECT         GET ERROR BITS              V1L2
SERRLOOP LTR       R2,R2               1ST BIT ON?                 V1L2
         SLL       R2,1                SHIFT A BIT                 V1L2
         LA        R1,SERLEN(,R1)      BUMP R1                     V1L2
         BP        SERRLOOP            BIT IS OFF                  V1L2
         BZ        SERRDONE            NO MORE BITS ON             V1L2
         $ERROR    ,SERRLOOP           ISSUE MESSAGE VIA R1        V1L5
SERRDONE ST        R2,SERRVECT         ZAP FOR NEXT STATEMENT      V1L2
         SPACE     3                                               V1L2
**********************************************************************
*        FOR SOME ERRORS WE DO NOT GO TO STATEMENT PROCESSORS
*        RATHER WE JUST GO AND GET THE NEXT CARD
**********************************************************************
         IF        (SBOMBSW,EQ,ALLON),SOUT                         V1L2
SNOERRS  LM        R2,R4,SAVE123                                   V1L2
**********************************************************************
*        OFF  TO THE STATEMENT PROCESSORS
         BALR      R14,R2
*********************************************************************
         OC        CASF2(1),CASF1
         EJECT
**********************************************************************
*        END OF DO-LOOP CHECK
*       WAS THERE A STMT NO. AND WAS STMT EXECUTABLE
**********************************************************************
SBACK1   IF        (CURSTNO,EQ,ALLON),SOUT
         IF        (SFNDSWT,ON,SCEXEC),SOUT1
         OI        CDOEND,X'02'
         IF        (SFNDSWT,NON,SCEND),SOUT1                       V1L1
         $ERROR    (WARN,EN,2),SOUT                                V1L5
SOUT1    L         R2,SADDODO1         SO OFF TO END-OF-DO PROC
         BALR      R14,R2
*        UNTIL NOW WE HAVE HAD THE ISN IN A SYMTAB ENDTY FOR A
*        STATEMENT NUMBER(FOR ERROR MESSAGES). NOW DEFINE IT RIGHT.
         L         R2,CSAVENOX         GET  OBJ CODE PTR           V1L2
         LTR       R2,R2               HAS IT BEEN USED?
         BZ        SOUT                NO
         L         R15,CSTNOLK         GET SYMTAB ADDR             V1L2
         ST        R2,NADDR            DEFINE STATNO ADDR IN SYMTABV1L2
         AIF       ('&STR' NE 'USE').SSTR6                          ST1
         IC        R2,CPARNO           GET CURRENT PAR. NO.         ST1
         STC       R2,NPLVL            INSERT IN SYMTAB ENTRY       ST1
.SSTR6   ANOP                                                       ST1
SOUT     L         R14,STID14
         BR        R14                 GO BACK WHERE YOU CAME FROM
         EJECT
SBOMBED1 SERRON    SCC4
SBOMBED  MVI       SBOMBSW,ALLON
         B         STOUT3
SLGIFRET EQU       SDATA4    RETURN FROM 'LOG IF' IF ERROR
         $FREE     R15                                             V1L5
         USING     STAK,R15
         USING      STABLE,R2
SFCOMP   CLC       SOPND(*-*),SWTHING
         $FREE     R2                                              V1L5
         EJECT
         USING     SCHAR,R1
***********************************************************************
*   RIGHT BRACKET ROUTINE
*        DECREASE COUNT BY ONE IF A BRACKET HAS OCCURRED
**********************************************************************
SRITEERR SERRON    SCC6                SET ERROR FLAG
SRITECHG MVI      SCHAR,X'5D'          SET RIGHT CHAR FOR PRINTER
SRIGHTB  LH        R0,SBCNT            DECREASE BRACKET COUNT
         S         R0,KF1
         STH       R0,SBCNT
         BPR       R9                  BRACKET COUNT OK
         BZ        SR2PC               GO DO A LITTLE BIT EXTRA
         SERRON    SPC0                SET ERROR FLAG
         BR        R9                  RETURN
**********************************************************************
*        SET UP POINTERS TO CLOSING RIGHT BRACKETS
*        FIRST IN SRT1  SECOND IN SRT2  AND LAST IN SRT3
*        STR'S SET ZERO IF NO 1ST 2ND OR THIRD ENCOUNTERED
**********************************************************************
SR2PC    LH        R14,SAVESRT         LEVEL 0 ')' COUNTER
         ST        R15,SRT1+8(R14)     AND STORE AWAY PTR
         LTR       R14,R14             IS IT ZERO
         BZR       R9        IF YES DON'T BUMP COUNTER
         A         R14,KF4             BUMP BY 4
         STH       R14,SAVESRT         AND SAVE IT FOR LATER BRACKS
         BR        R9
         EJECT
**********************************************************************
*        LEFT BRACKET ROUTINE
***********************************************************************
SLEFTERR SERRON    SCC6
SLEFTCHG MVI       SCHAR,X'4D'
SLEFTB   IF        (SLTSW,EQ,X'01'),SLB1   HAVE WE GOT ONE ALREADY
         MVI       SLTSW,X'01'        NO SO INITIALIZE
         MVI       SBCNT+1,X'01'            BRACKET COUNT
         TM        SWITCH1,SEQUAL      HAVE WE HAD A LEVEL 0 '='
         BOR       R9                  YES
         C         R8,KF10             EXACTLY 6 CHARS
         BNER      R9                  NOPE
         $FREE     R15                                             V1L5
         USING     STAK,R14
         L         R14,SSTACK                                      V1L4
         CLC       SOPND(6),=CL6'FORMAT' ARE FISRT 6 CHRS'FORMAT'
         $FREE     R14                                             V1L5
         USING     STAK,R15
         BNER      R9                  NOPE
         B         SFORMAT             YUP
SLB1     LH        R0,SBCNT            BUMP BRACKET COUNT
         A         R0,KF1
         STH       R0,SBCNT
         BR        R9                  RETURN
         EJECT
**********************************************************************
*        DOT ROUTINE
**********************************************************************
SDOT     CLI       SWITCH,SCNUMB       ARE WE COLLECTING A CONSTANT
         BER       R9                  YES
         CLI       SOPTR,DEC           IS THE OPERATOR '.'
         BNER      R9                  NO
         C         R8,KF9              MORE THAN 5 ALPHA CHARS
         BHR       R9                  YES
         IC        R2,STABDOT-4(R8)    USE NO. OF CHARS AS INDEX
         B         SO(R2)              AND GO AND PROCESS
SO       BR        R9                  RETURN FOR 0 AND 1
SDREL    LA        R4,24          TWO CHARS (RELATIONAL OPERATORS)
         LH        R3,=H'-4'
         LH        R0,SOPND            GET THE TWO CHARS
SDLOOP   CH        R0,SRELOP(R4)       AND COMPARE TO TABLE
         BE        SDGOTOP             WE FOUND ONE
         BXH       R4,R3,SDLOOP        GO TRY AGAIN
         BR        R9                  RETURN
SDGOTOP  IC        R0,SRELOP+3(R4)     GET OPERATOR
         STC       R0,SOPTR            STORE IT IN THE STACK
SDFIX    MVI       SWITCH,SCOPTOR      SET SWITCH
         LA        R8,4               RESET CHAR COUNT
         B         SRET1
SANDNOT  CLC       SOPND(3),=CL3'AND'
         BE        SDAND
         CLC       SOPND(3),=CL3'NOT'
         BNER      R9
         MVI       SOPTR,LOGNOT        SET SWITCH
         B         SDFIX
SDAND    MVI       SOPTR,LOGAND        SET OPERATOR IN STACK
         B         SDFIX
SDTRUE   CLC       SOPND(4),=CL4'TRUE'
         BNER      R9
         LH        R3,STRUE            ADDR OF XTRUE
         B         SD1
SDFALSE  CLC       SOPND(5),=CL5'FALSE'
         BNER      R9
         LH        R3,SFALSE           ADDR OF XFALSE
SD1      N         R3,KM1631           GET RID OF GARBAGE
         ST        R3,SOPND            STORE IT IN THE STACK
         MVI       SOPTR,PHI           INSERT NULL OPERATOR
         LA        R8,8                SET CHAR COUNT
         MVI       SWITCH,SCBOOL       AND SET SWITCH
         B         SRET1
         EJECT
**********************************************************************
*   OPERATOR ROUTINE
**********************************************************************
SPLSBNO  EQU       *
SOPERTOR SAWAYTO   SFIXT,SFIXTAB
SOON     IC        R7,SOPTABLE(R7)     GET TRANSFORMED OPERATOR
         STC       R7,SOPTR            STORE IT IN THE STACK
         MVI       SWITCH,SCOPTOR      SET SWITCH
         B         SRET1
         EJECT
**********************************************************************
*   NUMBER ROUTINE
**********************************************************************
SNUMBER  SAWAYTO   SNUMT,SN2
SN2      MVI       SNCOUNT,PHI         INIT DIGIT COUNT
         MVI       SWITCH,SCNUMB       SET SWITCH
SNUMON   LM        R3,R4,SNCOUNT       GET DIGIT COUNT
         IF        (SNCOUNT,ON,X'40'),SN1 HAVE WE GOT 8 DIGITS
         A         R3,=X'08000000'     BUMP DIGIT COUNT
         SLL       R4,4                SHIFT FOR NEW DIGIT
         N         R7,KF15             GET RID OF ZONE
         AR        R4,R7               ADD IT IN
         STM       R3,R4,SNCOUNT       SAVE FOR LATER
         B         SRET1               RETURN
SN1      SCONV                         CONVERT 8 DIGITS
         STORE                         STORE IN STACK
         BR        R14
SN3      B         SHOLLFIX
SN5      B         SBOOLFIX
SNUM1    SERRON    SCC7
         BR        R14
         EJECT
**********************************************************************
*   LETTER ROUTINE
**********************************************************************
SLETTER  SAWAYTO   SLETT,SLETA
SLETA    EQU       *
SALFON   MVI       SWITCH,SCALPHA      INIT SWITCH
SALFON2  STC       R7,STAK(R8)         STORE IT IN THE STACK
         LA        R8,1(,R8)           BUMP CHAR COUNT
         C         R8,KF56             IF STACK NOT FULL           V1L4
         BL        SRET1               THEN RETURN                 V1L4
         BCT       R8,SRET1            OTHERWISE SWALLOW CHAR      V1L4
KF56     DC        F'56'                                           V1L4
SLNUMON  SCONV                         LAST ENTRY WAS A NO.
         IF        (SCHAR,EQ,C'H'),SHOLL
SL1      B         SNUMFIX2
SL2      B         SHOLLFIX
SL3      B         SBOOLFIX
         EJECT
**********************************************************************
*   STAR ROUTINE
**********************************************************************
SSTAR    CLI       SWITCH,SCOPTOR      WAS LAST 'THING' AN OPERATOR
         BNER      R9                  NOPE
         CLI       SOPTR,STAR          WAS IT '*'
         BNER      R9                  NO
         MVI       SOPTR,DSTAR         SET IT '**'
         B         SRET1
         SPACE     3
**********************************************************************
*        PROCESS AN INVALID CHARACTER
**********************************************************************
*        INVALID CHARACTER ENCOUNTERED
SERROR   SERRON    SCC2                SET ERROR FLAG
         MVC       SCHAR(1),CINVCHAR   REPLACE WITH PLUG           V1L4
         B        SRET1                RETURN FOR NEXT CHARACTER
**********************************************************************
*        SLASH ROUTINE
**********************************************************************
SSLASH   XI         SLASHSW,X'01'      REVERSE SLASH SWITCH
         BR        R9
*********************************************************************
*        COMMA ROUTINE
*********************************************************************
SCOMMA   CLI       SBCNT+1,NIL         ARE WE INSIDE BRACKETS
         BNER      R9                  YES SO AWAY
         OI        SWITCH1,SSCOMMA     NO SO SET LEVEL 0 ',' SWT
         BR        R9
         EJECT
***********************************************************************
*        PROCESS THE QUOTE
*        IT COULD BE A HOLLERITH OR A DIRECT ACCESS TYPE STMT
***********************************************************************
SQUOTE   MVI       SHLORQT+1,NOP       SET SWITCH IN SHOLL
         AIF       ('&DIRACC' EQ 'OMIT').SDD3
*        IS LAST OPERATOR A LEFT BRACKET.SDD3
         IF        (SOPTR,NE,LBRK),SOUTCODE
         IF        (SWITCH,EQ,SCOPTOR),SOUTCODE  PREV THNG OP      V1L1
         L         R3,SSTACK           ADDRESS OF STACK            V1L1
         CLC       4(3,R3),=CL3'IF '   IS IT IF                    V1L1
         BNE       SNOTIF              NO                          V1L1
         L         R3,SRT1             PTR TO 1ST LEVEL 0 ')'      V1L1
         LTR       R3,R3               IS THERE ONE?               V1L1
         BZ        SOUTCODE            NO                          V1L1
         AH        R3,0(,R3)           YES SO POINT TO KEYWORD     V1L1
SNOTIF   CLC       0(2,R3),KF12+2      IS IT READ,FIND OR WRITE    V1L1
         BH        SOUTCODE            NONE OF THEM
         BL        SFNDREAD            EITHER READ OR FIND
         $FREE     R15                                             V1L5
         USING     STAK,R3
         CLC       SOPND(5),S$WRIT+5   IS IT WRITE
         BNE       SOUTCODE            NOPE
         B         SSETDA                                          V1L3
SFNDREAD CLC       SOPND(4),S$READ+5   IS IT READ
         BE        SSETDA              YUP                         V1L3
         CLC       SOPND(4),S$FIND+5   IS IT FIND
         BNE       SOUTCODE            NOPE
SSETDA   SR        R3,R15              DOES CURRENT LBRK           V1L3
         LCR       R3,R3                                           V1L3
         C         R3,KF12             FOLLOW KEY WORD             V1L3
         BH        SOUTCODE            NO - THEN NOT D.A.          V1L3
         MVI       SDASWTCH,X'01'      INDICATE D.A.               V1L3
         BR        R9                  SO RETURN TO OPERATOR ROUT
         $FREE     R3                                              V1L5
         USING     STAK,R15
.SDD3    ANOP
         AIF       ('&DIRACC'EQ 'USE').SDD2
         B         SOUTCODE
.SDD2 ANOP
         EJECT
***********************************************************************
*        PROCESS THE EQUAL SIGN
***********************************************************************
SEQUERR  SERRON    SCC6                SET ERROR FLAG
SEQUCHG  MVI      SCHAR,X'7E'
SEQUALS  CLI       SBCNT+1,NIL         ARE WE INSIDE A SET OF BRACKS
         BNER      R9                  NO
         TM        SWITCH1,SEQUAL      HAVE WE HAD AN EQUAL SIGN
         BOR       R9                  YES
         OI        SWITCH1,SEQUAL      SET SWITCH
         TM        SWITCH1,SSCOMMA     HAVE WE HAD A COMMA
         BNOR      R9                  NO
         OI        SWITCH1,SFUNNY      SET 'FUNNY' SWITCH
         BR        R9                  AND RETURN
         EJECT
*********************************************************************
*        PROCESS THE PLUS AND AMPERSAND
*********************************************************************
SAMPENO  MVI      SCHAR,C'+'
         IC        R7,SAMPENO+1
         BR        R9
         EJECT
***********************************************************************
*        PACKED CARD ROUTINE                                          *
*                  COLON  USED TO DELIMIT STMT NUMBERS                *
*                  SEMI-COLON  TO DELIMIT STATEMENTS                  *
*        NOTE      FORMAT STMT'S CANNOT BE PACKED                     *
***********************************************************************
SPCKCARD TRT       SCHAR+1(67),SJUMPC
         IF        (SIHPALNE,EQ,ALLON),SPACK11
         BAL       R14,SPRINT          PRINT THE CARD
         MVI       SIHPALNE,ALLON      TURN ON I HAVE PRINT LINE SWT
         MVI       XCARD+72,ALLON      RESET END-OF-CARD DELIMITER
SPACK11  CLI       SCHAR,ALLON         END OF CARD
         BE        SENDCARD            YES SO AWAY
         ST        R1,SAVER1           SAVE CHAR PTR
         BAL       R14,STIDY           OFF TO FINISH STATEMENT
         MVC       SCC+1(1),CNOCCRDS   RESET CONT CARD COUNT       V1L4
         L         R1,SAVER1           RESTORE CHAR PTR
         MVI       CURSTNO,ALLON       ASSUME NO STMT NUMBER
         BCTR      R1,R0               BACK UP CHAR PTR
         TM        SCHAR+1,X'F0'       IS CHAR A DIGIT
         BNO       SNEWSTAT            NO SO NO STMT NUMBER
         LA        R2,66               JUST A BIG NUMBER
         LA        R1,1(R1)            RESTORE CHAR PTR
         THEN      (SPCKSWT,ON)
         B         STLOOP3             AND OFF TO PROC STMT NO.
         EJECT
***********************************************************************
*        PROCESS THE DOLLAR SIGN                                      *
*        IF BCD REPLACE AS AN AMPERSAND IN THE STACK                  *
*        IF EBCDIC LEAVE IT AS IT IS                                  *
****************************************************************** V1L2
SDOLLAR  IF        (XQUOTCON,EQ,C''''),SLETTER
         IC        R7,=C'&&'               GET FOR SOPERTOR
         BR        R9                  GO TO SOPERTOR
         EJECT                                                        *
**********************************************************************6
*        THIS TABLE IS USED IF 29 KEYPUNCH IS SPECIFIED               *
***********************************************************************
SEBCTAB  DC    AL2(SLEFTERR-SPAN)
         DC    AL2(SLEFTB-SPAN)
         DC    AL2(SRITEERR-SPAN)
         DC    AL2(SRIGHTB-SPAN)
         DC    AL2(SERROR-SPAN)
         DC    AL2(SQUOTE-SPAN)
         DC    AL2(SEQUERR-SPAN)
         DC    AL2(SEQUALS-SPAN)
         DC    AL2(SPLSBNO-SPAN)
         DC    AL2(SOPERTOR-SPAN)
***********************************************************************
*        THIS TABLE IS USED IF 26 KEYPUNCH IS SPECIFIED
***********************************************************************
SBCDTAB  DC    AL2(SLEFTCHG-SPAN)
         DC    AL2(SLEFTERR-SPAN)
         DC    AL2(SRITECHG-SPAN)
         DC    AL2(SRITEERR-SPAN)
         DC    AL2(SQUOTE-SPAN)
         DC    AL2(SERROR-SPAN)
         DC    AL2(SEQUCHG-SPAN)
         DC    AL2(SEQUERR-SPAN)
         DC    AL2(SAMPENO-SPAN)
         DC    AL2(SAMPENO-SPAN)
         EJECT
***********************************************************************
*        PROCESS A FORMAT STMT
*        JUST PLACE ACTUAL BCD LIST OF SPECS IN THE STACK
***********************************************************************
SFORMAT  MVI       SFNDSWT,SCFORM      SET SWT SAYING FORMAT       V1L2
         L         R9,STACKEND         END OF STACK NEARLY
         LA        R14,SCARD+72        END OF CARD
         SR        R14,R1              CHARS OBTAINED SO FAR
         EX        R14,SHMOVE          MOVE FORMAT  LIST TO STACK
         AR        R15,R14             INCREASE PTR TO END OF LIST
SFLOOP   BAL       R14,SPRINT          PRINT CARD
         MVI       SIHPALNE,OFF
         BAL       R14,CREAD           READ ANOTHER
         B         SCONTRL2            CONTROL CARD
         B         SFORM1              CONTINUATION CARD
         B         SXNEXT              A NEW STATEMENT
         B         SLOAD               OBJECT DECK COMMING
         B         SFLOOP              A COMMENTS CARD
SFORM1   CR        R9,R15              IS STACK FULL YET
         BH        SFORM2              NOPE
         SERRON    SCC4
         B         SBOMBED
SFORM2   MVC       0(67,R15),SCARD+6   MOVE IN THE CHARS TO STACK
         LA        R15,66(,R15)        AND BUMP PTR TO END OF LIST
         CLC       SCARD(5),KBL6                                   V1L1
         BE        SFLOOP                                          V1L1
         SERRON    SCC0                                            V1L1
         B         SFLOOP              AND BACK TO READ AGAIN
SHMOVE   MVC       STAK(*-*),SCHAR                                 V1L2
         EJECT
***********************************************************************
*        PROCESS HOLLERITH CONSTANTS
*        THIS INCLUDES 'H' TYPE AND QUOTE TYPE
***********************************************************************
SHOLL    IF        (SLASHSW,ON,X'01'),SHOLLOLL
         IF        (SBCNT+1,EQ,NIL),SL1
SHOLLOLL MVI       SHLORQT+1,BRANCH    SET FIRST TIME SWT
SOUTCODE B         SOUTCD1             B/NOP
         MVI       SOUTCODE+1,BRANCH   RESET SWT
         MVI       SHLCONS,ALLON       TURN ON HOLLERITH SWT
         STM       R15,R3,SAVE123      SAVE REG'S DESTROYED BY COUT
         BAL       R14,CBALR11         GENERATE A BALR 11,0 INST
         ST        R5,CBAR11
         OUTPUT    4,SBRINST           OUTPUT BRANCH AROUND
         LM        R15,R3,SAVE123      RESTORE REG'S
SOUTCD1  BAL       R14,CDS0F           ALIGN ON A FULL WORD BND
         ST        R5,SADDR2           AND SAVE ADDR FOR LATER
SHLORQT  B         SHOLL1              B/NOP
         IF        (SWITCH,EQ,SCOPTOR),SQUOP
          SAWAYTO  SFIXT,SFIXTAB
SQUOP    SR        R7,R7
*        START COLLECTING THE HOLLERITH CONSTANT
          LR       R2,R7
SQLOOP   LA        R1,1(,R1)           POINT TO NEXT CHAR
         IF        (SCHAR,NE,ALLON),SQPASS1      AT END YET
         BAL       R9,SQREAD           YES SO READ ANOTHER CARD
SQPASS1  CLC       SCHAR(1),XQUOTCON
         BE        SQQUO
SQINSERT OUTPUT
         LA        R7,1(,R7)           BUMP CHAR COUNT
         B         SQLOOP              AND GO BACK
SQQUO    LA        R1,1(,R1)           IS NEXT CHAR QUOTE
         IF        (SCHAR,NE,ALLON),SQPASS2                        V1L4
         OI        SSW,SQTE72          QUOTE IN C.C. 72            V1L5
         BAL       R9,SQREAD                                       V1L4
SQPASS2  CLC       SCHAR(1),XQUOTCON
         BE        SQINSERT
SQIN72   NI        SSW,X'FF'-SQTE72    RESET SWITCH                V1L5
         C         R7,KF255            HOW MANY CHARACTERS         V1L1
         BH        SDONHO4             TOO MANY                    V1L1
         LTR       R7,R7               HAVE WE GOT SOMETHING ALREADY
         BNZ       SDONE               YES
SDONHO1  SERRON    SHO1
SDONE    IF        (CMOSWTCH,ON,ZSWON),SYMSET
         MVC       0(3,R5),KBL6        AND PAD WITH BLANKS         V1L4
         LA        R5,3(,R5)           AND FIX UP OBJECT CODE
         N         R5,KM0029           REGISTER AS WELL
*        FIX UP SYMBOL TABLE ENTRY
SYMSET   L         R0,SADDR2           BEGINNING OF CONSTANT
         L         R4,CHEND1           LAST ENTRY PTR
         ST        R4,SOPND            PTR IN STACK
         USING     HLIST,R4
         ST        R0,HADDR            SAVE ADDRESS
         STH       R7,HLEN             SAVE LENGHT
         GETSYM    8                   GET A NEW SYM TAB ENTRY
         $FREE     R4                                              V1L5
         USING     HLIST,R6
         SR        R4,R6               CALCULATE LINK
         STH       R4,HLINK(R4)        AND STORE IT AWAY
         ST        R6,CHEND1           SAVE PTR FOR NEXT TIME
         $FREE     R6                                              V1L5
         LA        R8,8                SET LENGTH OF STACK ENTRY
         LA        R9,SOPERTOR         RESET ADDR
         MVI       SWITCH,SCHOLL       SET SWITCH
         SR        R7,R7
         B         SRET11
SHOLL1   C         R3,KF255            TOO MANY
         BH        SDONHO4             TOO MANY CHARS IN STRING    V1L1
*        PROCESS A H-TYPE  HOLLERITH
SHOLL2   LTR       R4,R3               IS COUNT ZERO
         BNZ       SHOLL3              NOPE
         SERRON    SHO1                YES SO AN ERROR
         B         SDONE
SHOLL3   LR        R7,R3               SAVE COUNT FOR LATER
         SR        R2,R2
SHLOOP   LA        R1,1(,R1)           POINT TO NEXT CHAR
         IF        (SCHAR,NE,ALLON),SHLOOP1     AT END YET
         BAL       R9,SQREAD           YUP SO READ ANOTHER CARD
SHLOOP1  OUTPUT
         BCT       R4,SHLOOP           BACK FOR NEXT CHAR
         LA        R1,1(,R1)
         B         SDONE
SQREAD   BAL       R14,SPRINT          PRINT THE LINE
         BAL       R14,CREAD           READ A CARD
         B         SQCONT
         B         SQOK
         B         SERRHO2
         B         SERRHO2             OBJECT DECK COMMING
         B         SQREAD
SERRHO2  MVI       SIHPALNE,ALLON      NOT A CONTINUATION CARD
SQCONT   MVI       CIHGACRD,ON                                     V1L2
         LA        R1,SENDCDSW
         IF        (SSW,ON,SQTE72),SQIN72      BR IF QUOTE IN CC72 V1L5
         SERRON    SHO2
         B         SDONE
SQOK     LA        R1,SCARD+6
         SR        R2,R2
         BR        R9
SDONHO4  SERRON    SFTH                TOO CHARS IN STRING         V1L1
         B         SDONE               OK CONTINUE                 V1L1
         EJECT
***********************************************************************
*        OBJECT DECK HANDLING ROUTINE                                 *
***********************************************************************
         EXTRN     LENDS,LENDPROG
         EXTRN     WATLOAD
STYPE    EQU       CADSSW
SLOAD    BAL       R14,STIDY           FIX UP LAST STATEMENT
*        WAS THERE AN END CARD?
         IF        (CSRSWTCH,EQ,X'30'),SLOADEND
         CLINK1    LENDS               NO END SO GENERATE ONE
SLOADEND MVI       STYPE,X'0C'         SET SWITCH FOR LOADER
SLOAD4   IF        (CSUBRDS,ON),SLOAD3 READING FROM LIBRARY?
         IF        (COBJLET,OFF),SLOAD5 ARE WE ALLOWING OBJ DECKS?
SLOAD3   CLINK1    WATLOAD             OFF TO LOADER
SLOAD5   BAL       R14,CREAD           READ ANOTHER CAED
         B         SLOAD2              A CONTROL CARD
         B         SLOAD1              BACK READING NORMAL CARDS
         B         SLOAD1              BACK READING NORMAL CARDS
         B         SLOAD4              OFF TO LOADER
SLOAD1   EQU       *
SLOAD2   CLINK1    LENDPROG            OFF TO INIT NEXT PROG SEGMNT
         IF        (CSUBRDS,ON),CRET   RETURN TO CALLER IF FROM LIB
         EX        R0,COPENTRY         IS IT A $ENTRY CARD?
         BE        CRET                YES SO RETURN TO CALLER
         AIF       ('&CONTROL'(1,1) EQ '&CONTROL').SLOAD20         V1L4
         EX        R0,COPCENTR         CHECK FOR C$ENTRY           V1L4
         BE        CRET                                            V1L4
.SLOAD20 ANOP                                                      V1L4
         MVI       CIHGACRD,ZSWON      SAVE THE CARD
         B         SREAD               BACK TO NORMAL PROCESSING
         EJECT
**********************************************************************
*        MACROS USED IN FOLLOWING ROUTINES
*
*        SCODE
*        LR        R0,R8        GET CHAR COUNT
*        SRA       R0,2                DIVIDE BY 4
*        BCTR      R0,R0
*        AR        R0,R4               GET CODE
*        STC       R0,SCD
*        MEND
*
*        LINK1
*        LA        R4,STAK(R8)
*        MVC       0(3,R4),KBL6        BLANK IT OUT
*        LA        R8,3(,R8)           MAKE ADDR A MULTIPLE OF 4
*        N         R3,=X'FFFFFFFC'
*        STH       R8,SLINK
*        MEND
*
*        LINK2
*        STH       R8,SLINK
*        MEND
*
*        SFIXS
*        AR        R15,R8              BUMP STACK POINTER
*        LA        R8,4                SET NEW CHAR COUNT
*        MVI       SOPTR,NIL
*        MEND
*********************************************************************
*        THESE ROUTINES PROCESS THE VARIOUS TYPES OF ENTRIES IN
*        THE STACK.  THE ROUTINE USED AT ANY TIME DEPENDS ON
*        WHAT TYPE OF CHARACTERS ARE BEING COLLECTED
*        FOR EXAMPLE IF WE GET AN OPERATOR AND THE PREVIOUS
*        THING COLLECTED WAS AN OPERATOR WE USE THE  ROUTINE SOPFIX.
*        A PROTOTYPE STACK ENTRY
*        LINK      2 BYTES
*        OPERATOR   1 BYTE
*        CODE  1  BYTE
*                  0  VARIABLE
*                  2  HOLLERITH
*                  4  BOOLEAN  PTR TO  TRUE OR FALSE
*                  8  CONSTANT
*        OPERAND   VARIABLE NO. OF BYTES DEPENDING ON ENTRY TYPE
*
*        THE CODE SUPPLIED ON CALLING IN REG 4 IS COMBINED WITH
*        THE CHAR COUNT / 4 TO FORM THE CODE PORTION OF A STACK ENTRY
*        THE LINK IS CALCULATED IN THE CASE OF ALPHABETIC CHARS
*        AND IS FOUND IN REG 8 IN ALL OTHER CASES AND STORED
*        IN THE LINK PORTION OF THE STACK
*        THE OPERATOR PART HAS BEEN STORED BY THE ROUTINE SOPERTOR
***********************************************************************
SCD      EQU       SCODE
SFIXTAB  DC        0H'0'
SBOOLFIX MVI       SCD,CLOGC
         B         SFIXUP1
SOPFIX   MVI       SCD,NIL
SFIXUP1  LINK2
SFIXUP2  SFIXS
         BR        R14
SALFFIX  LINK1
         SR        R4,R4
         SCODE
         B         SFIXUP2
SNUMFIX1 SCONV
SNUMFIX2 STORE
         LA        R4,X'80'
         LINK2
         SCODE
         B         SFIXUP2
SHOLLFIX MVI       SCD,CHOLL
         B         SFIXUP1
SERX     SERRON    SCC7
         BAL       R14,SOPFIX
         B         SOON
SBLANKCD SERRON    SCC5
         B         SBOMBED
STABLEN  EQU       12
         EJECT
         EJECT
***********************************************************************
*   RELATIONAL OPERATORS TABLE WITH CORR OPERATOR CODES
**********************************************************************
SRELOP   DC        CL2'OR'
         DC        AL2(LOGOR)
         DC        CL2'NE'
         DC        AL2(NE)
         DC        CL2'GT'
         DC        AL2(GT)
         DC        CL2'LT'
         DC        AL2(LT)
         DC        CL2'LE'
         DC        AL2(LE)
         DC        CL2'EQ'
         DC        AL2(EQ)
         DC        CL2'GE'
         DC        AL2(GE)
         EJECT
**********************************************************************
*        SERRVECT  IS THE ERROR VECTOR
*        EACH TIME SCAN FINDS AN ERROR  IT TURNS ON A PARTICULAR
*        BIT IN THE ERROR VECTOR
*        WHEN THE STATEMENT IS COMPLETELY SCANNED SERRVECT IS TESTED
*        IF ZERO        THEN NO ERROS
*        IF NOT THE APPROPRIATE ERROR MESSAGE(S) IS PRINTED
**********************************************************************
SERRVECT DC        F'0'
SERRTAB  DC        0F'0'
SCC0     SETTERR     (WARN,CC,0)
SCC1     SETTERR     (LANG,CC,1)
SCC2     SETTERR     (BOOT,CC,2)
SCC3     SETTERR     (WARN,CC,3)
SCC4     SETTERR     (BOOT,CC,4)
SCC5     SETTERR     (WARN,CC,5)
SST3     SETTERR      (BOOT,ST,3)
SCC6     SETTERR      (WARN,CC,6)
SCC7     SETTERR      (BOOT,CC,7)
SPC0     SETTERR      (BOOT,PC,0)
SIF0     SETTERR      (BOOT,IF,0)
SBD0     SETTERR      (BOOT,BD,0)
SHO0     SETTERR      (BOOT,HO,0)
SHO1     SETTERR      (BOOT,HO,1)
SHO2     SETTERR      (BOOT,HO,2)
SCC9     SETTERR      (BOOT,CC,9)
SFTH     SETTERR   (BOOT,FT,H)                                     V1L1
SERREND  EQU       *
SERRCN1  EQU       SERREND-SERRTAB
SERLEN   EQU       SCC1-SCC0
SERRCN2  EQU       SERRCN1/SERLEN
SERRCN3  EQU       SERRCN2/8+1
         EJECT
**********************************************************************
*        VARIOUS AND SUNDRY CONSTANTS
**********************************************************************
SAVER    DC        18F'0'              SAVE AREA
SCONV1   DC        D'0'                USED FOR CONVERSION OF NO.S
STLIST   DC        D'0'                STATEMENT NO. SAVED HERE
SWADD    DC        D'0'                JUST A TEMPORARY
SNCOUNT  DC        D'0'                FOR CONSTANT CONVERSION
SNLIST   EQU       SNCOUNT+4
SWADDR   EQU       SWADD+3
SMULT    DC        0F'0',X'0B273709'      HASH MULTIPLIER
SADFORM  DC           A(FORMAT)
SADDODO1 DC           A(DCSTN1)
SADMAIN  DC           A(LMAIN)
SADIFLOG DC           A(IFLOG)
SADARITH DC           A(ARITH)
SADIFIF  DC           A(GIFIF)
SADERROR DC           A(SLGIFRET)
SADDODO  DC           A(DODO)
SSTACK   EQU       XSTACK
SAVER1   DC        A(*-*)
STID14   DC        A(*-*)              SAVE A REGISTER HERE TSK TSK
SAVE123  DC        5A(*-*)             SAVE SOME MORE REGISTERS
SLAST    DC        X'00000100'         LAST ENTRY IN STACK
SRT1     EQU       CSRT1               1ST LEVEL 0 RT BRCK PTR
SRT2     EQU       CSRT2               2ND
SRT3     EQU       CSRT3               LAST
STRUE    DC        S(XTRUE)
SFALSE   DC        S(XFALSE)
SADDR2   EQU       SAVE123+4
BRANCH   EQU       X'F0'
ALLON    EQU       X'FF'
BLANK    EQU       X'40'
**********************************************************************
*        DESCRIPTION OF  'SWITCH'
*                  THIS BYTE HAS SIX DIFFERENT SETTINGS
*        1         OPERATOR
*        2         LETTER
*        3         INITIAL SETTING (I.E. FIRST CHAR MUST BE A LETTER
*        4         BOOLEAN CONSTANT
*        5         HOLLARITH CONSTANT
*        6         NUMBER
**********************************************************************
SCOPTOR  EQU       X'01'
SCALPHA  EQU       X'02'
SCINIT   EQU       X'03'
SCBOOL   EQU       X'04'
SCHOLL   EQU       X'05'
SCNUMB   EQU       X'06'
SWITCK   DC        F'0'
SWITCH   EQU       SWITCK+3
SAVESRT  DC        H'0'                NO. OF LEVEL 0 RT BRCK'S
SBRINST  ROMIT     *-*
SCC      DC        H'0'                COUNT OF CONT CARDS
SBCNT    DC        H'0'                BRACKET COUNT
KH21     DC        H'21'               MAX VALUE ON $SPACE = 21*3  V1L5
*        VARIOUS AND SUNDRY SWITCHES
SWITCHES DC        0F'0'
SBOMBSW  DC        X'00'
SLTSW    DC        X'00'
SLASHSW  DC        X'00'
SHLCONS  DC        X'00'
SWITCH1  DC        X'00'
SPCKSWT  DC        X'00'
SDASWTCH EQU       CDASWCH             INDICATES DIRECT ACCESS
         ORG       SWITCHES+8
SIHPALNE DC        X'00'
SFNDSWT  EQU       SWADD+4
SENDCDSW DC        X'FF'
SEQUAL   EQU       X'01'
SSCOMMA  EQU       X'04'
SFUNNY   EQU       X'02'
SIHATULS DC        X'00'               TIDY UP SW                  V1L3
SSW      DC        X'00'               SWITCH FOR SCAN PROCESSOR   V1L5
SQTE72   EQU       X'80'               QUOTE IN C.C. 72            V1L5
SPCARD   EQU       X'40'               NOW PROCESSING $SPACE CARD  V1L5
SLCTRL   EQU       X'20'               LAST CARD PROCESSED WAS     V1L5
*                                           A CONTROL CARD         V1L5
         EJECT
**********************************************************************
*        THESE TABLES ARE USED BY THE OPERAND AND OPERATOR
*        ROUTINES TO PROCESS THE PARTICULAR ENTRY AT HAND
*        USING 'SWITCH' (SETTINGS   1-6)  THE ROUTINES
*        INDEX DOWN THE APPROPRIATE TABLE TO GET THE ADDR
*        OF THE REQUIRED ROUTINE TO PROCESS ENTRY
**********************************************************************
STIDT    DC    AL1(SOPFIX-SFIXTAB)
         DC    AL1(SALFFIX-SFIXTAB)
         DC    AL1(SBLANKCD-SFIXTAB)
         DC    AL1(SBOOLFIX-SFIXTAB)
         DC    AL1(SHOLLFIX-SFIXTAB)
         DC    AL1(SNUMFIX1-SFIXTAB)
SFIXT    DC    AL1(SOPFIX-SFIXTAB)
         DC    AL1(SALFFIX-SFIXTAB)
         DC        AL1(SERX-SFIXTAB)
         DC    AL1(SBOOLFIX-SFIXTAB)
         DC    AL1(SHOLLFIX-SFIXTAB)
         DC    AL1(SNUMFIX1-SFIXTAB)
SNUMT    DC        AL1(SN2-SN2)
         DC        AL1(SALFON2-SN2)
         DC    AL1(SNUM1-SN2)
         DC    AL1(SN5-SN2)
         DC    AL1(SN3-SN2)
         DC    AL1(SNUMON-SN2)
SLETT    DC        AL1(SLETA-SLETA)
         DC    AL1(SALFON2-SLETA)
         DC        AL1(SALFON-SLETA)
         DC    AL1(SL3-SLETA)
         DC    AL1(SL2-SLETA)
         DC    AL1(SLNUMON-SLETA)
STABDOT  DC        AL1(SO-SO)
         DC        AL1(SO-SO)
         DC        AL1(SDREL-SO)
         DC        AL1(SANDNOT-SO)
         DC        AL1(SDTRUE-SO)
         DC        AL1(SDFALSE-SO)
         EJECT
**********************************************************************
*        TO FACILITATE THE USE OF BOTH 26 AND 29 KEY-PUNCHES
**********************************************************************
         DC        0H'0'
         AIF       ('&MODEL' NE '75').SJUMP1
SJUMPR   DC    AL2(SBLANKC-SPAN)
.SJUMP1  ANOP
         AIF       ('&MODEL' EQ '75').SJUMP2
SJUMPR   DC        H'0'
.SJUMP2  ANOP
         DC    AL2(SERROR-SPAN)
SBCDEBC  DC    AL2(*-*)                BCD LEFT BRACK
         DC    AL2(*-*)                EBC LEFT BRACK
         DC    AL2(*-*)                BCD RIGHT BRACK
         DC    AL2(*-*)                EBC RIGHT BRACK
         DC    AL2(*-*)                BCD QUOTE
         DC    AL2(*-*)                EBC QUOTE
         DC    AL2(*-*)                BCD EQUALS
         DC    AL2(*-*)                EBC EQUALS
         DC    AL2(*-*)                BCD PLUS(EBC AMPERSAND)
         DC    AL2(*-*)                EBC PLUS
         DC    AL2(SDOT-SPAN)
         DC    AL2(SDOLLAR-SPAN)
         DC    AL2(SSTAR-SPAN)
         DC    AL2(SOPERTOR-SPAN)
         DC    AL2(SSLASH-SPAN)
         DC    AL2(SCOMMA-SPAN)
         DC    AL2(SLETTER-SPAN)
         DC    AL2(SNUMBER-SPAN)
         DC    AL2(SENDCARD-SPAN)
         DC    AL2(SPCKCARD-SPAN)
**********************************************************************
*        CHARACTER JUMP TABLE
*        USED TO GET TO CORECT ROUTINE TO PROCESS CHARACTER
**********************************************************************
SJUMPC   DC        64X'02'
         DC        X'00'               BLANK
         DC        10X'02'
         DC        X'18'               DOT
         DC        X'08'               RT BRACK (BCD)
         DC        X'06'               LFT BRACK
         DC        X'14'               PLUS
         DC        X'02'
         DC        X'16'               AMPERSAND
         DC        10X'02'
         DC        X'1A'               DOLLAR SIGN ( LETTER)
         DC        X'1C'               STAR
         DC        X'0A'               RT BRACK
         DC        X'2A',X'02'
         DC        X'1E'               MINUS
         DC        X'20'               SLASH
         DC        9X'02'
         DC        X'22'               COMMA
         DC        X'04'               LF BRACK ( BCD )
         DC        13X'02'
         DC        X'02'
         DC        X'10'               EQUALS  ( BCD )
         DC        X'0C'               QUOTE ( BCD )
         DC        X'0E'               QUOTE
         DC        X'12'               EQUALS
         DC        66X'02'
         DC        9X'24'              LETTER
         DC        7X'02'
         DC        9X'24'              LETTER
         DC        8X'02'
         DC        8X'24'              LETTER
         DC        6X'02'
         DC        10X'26'             DIGIT
         DC        5X'02'
         DC        X'28'               END OF CARD DELIMITER
         EJECT
**********************************************************************
SOPTABLE EQU       *-75
***      THIS IS THE OPERATOR TABLE
**********************************************************************
         DC        X'87'               DOT
         DC        X'86'               RT BRACK  (BCD)
         DC        X'03'               LT  BRACK
         DC        X'4A'               PLUS
         DC        X'00'
         DC        X'88'               AMPERSAND
         DC        11X'00'
         DC        X'4C'               STAR
         DC        X'86'               RT BRACK
         DC        2X'00'
         DC        X'4B'               MINUS
         DC        X'4D'               SLASH
         DC        9X'00'
         DC        X'04'               COMMA
         DC        X'03'               LT BRACK  (BCD)
         DC        14X'00'
         DC        X'05'               EQUALS  (BCD)
         DC        2X'09'
         DC        X'05'               EQUALS
         EJECT
SCEXEC   EQU       X'01'
SCFUNC   EQU       X'02'
SCBLOC   EQU       X'04'
SCMAIN   EQU       X'08'
SCGENI   EQU       X'10'
SCEND    EQU       X'20'
SCFORM   EQU       X'40'
SCISN    EQU       X'80'
SCNOGO    EQU      SCEND
*        NOTE    ABOVE SETTINGS CAN BE IN COMBINATION
*
SERRST5  DC        0H'0'
         AIF       ('&STR' NE 'USE').SSTR7                          ST1
         CLC       SOPND(6),S$ELSE+5                                ST1
         BNE       SNOTELSE                                         ST1
         LA        R2,S$ELSE                                        ST1
         B         SFND8                                            ST1
SNOTELSE CLC       SOPND(5),S$ENDI+5                                ST1
         BNE       SNOTENIF                                         ST1
         LA        R2,S$ENDI                                        ST1
         B         SFND8                                            ST1
SNOTENIF CLC       SOPND(8),S$ENDW+5                                ST1
         BNE       SNOTENDW                                         ST1
         LA        R2,S$ENDW                                        ST1
         B         SFND8                                            ST1
SNOTENDW CLC       SOPND(6),S$DOCA+5                                ST1
         BNE       SNOTDOCA                                         ST1
         BXLE      R9,R9,SERRIF0           IF 1ST PART WAS IF       ST1
         LA        R2,S$DOCA                                        ST1
         B         SFND8                                            ST1
SNOTDOCA CLC       SOPND(4),S$CASE+5                               ST1
         BNE       SNOTCASE                                        ST1
         LA        R2,S$CASE                                       ST1
         B         SFND8                                           ST1
SNOTCASE CLC       SOPND(8),S$IFNO+5                               ST1
         BNE       SNOTIFNO                                        ST1
         LA        R2,S$IFNO                                       ST1
         B         SFND8                                           ST1
SNOTIFNO CLC       SOPND(7),S$ENDC+5                                ST1
         BNE       SNOTENDC                                         ST1
         LA        R2,S$ENDC                                        ST1
         B         SFND8                                            ST1
SNOTENDC CLC       SOPND(7),S$ATEN+5                                ST1
         BNE       SNOTATEN                                         ST1
         LA        R2,S$ATEN                                        ST1
         B         SFND8                                            ST1
SNOTATEN CLC       SOPND(8),S$ENDA+5                                ST1
         BNE       SNOTENDE                                         ST1
         LA        R2,S$ENDA                                        ST1
         B         SFND8                                            ST1
SNOTENDE CLC       SOPND(7),S$EXEC+5                                ST1
         BNE       SNOTPERF                                         ST1
         LA        R2,S$EXEC                                        ST1
         B         SFND8                                            ST1
SNOTPERF CLC       SOPND(11),S$REMO+5                               ST1
         BNE       SNOTPARA                                         ST1
         LA        R2,S$REMO                                        ST1
         B         SFND8                                            ST1
SNOTPARA CLC       SOPND(8),S$ENDB+5                                ST1
         BNE       SNOTENDP                                         ST1
         LA        R2,S$ENDB                                        ST1
         B         SFND8                                            ST1
SNOTENDP EQU       *                                                ST1
.SSTR7   ANOP                                                       ST1
         AIF       ('&DUMPLST' EQ 'OMIT').SDUMP1                   V1L2
         CLC       SOPND(8),S$DUMP+5
         BNE       SERRNEXT
         LA        R2,S$DUMP
         B         SFND8
SERRNEXT EQU       *
.SDUMP1  ANOP
         AIF       ('&ONERROR' EQ 'OMIT').SERR00                   V1L2
         CLC       SOPND(11),S$ONER+5  IS IT ON ERROR ?            V1L2
         BNE       SERRNONO            NO IT'S NOT                 V1L2
         LA        R2,S$ONER           YES IT IS                   V1L2
         B         SFND8                                           V1L2
SERRNONO EQU       *                                               V1L2
.SERR00  ANOP                                                      V1L2
         AIF       ('&WATTYPE' EQ 'DISTR').SSDEBUG
          BXLE     R9,R9,SDEND
         L         R14,=A(SDEND+4)
         MVI       SFNDSWT,NIL
         CLC       SOPND(4),=C'ONCO'
         BNE       SONCO1
         BAL       R14,XTRACON
         B         SBACK1
SONCO1   CLC       SOPND(4),=C'OFFC'
         BNE       SONCO2
         BAL       R14,XTRACOFF
         B         SBACK1
SONCO2   CLC       SOPND(4),=C'STAR'
         BE        STRACON
         CLC       SOPND(4),=C'ENDT'
         BE        STRACOF
         CLC       SOPND(4),=C'ONSN'
         BE        SNAPON
         CLC       SOPND(4),=C'OFFS'
         BE        SNAPOF
         CLC       SOPND(5),=C'ISNON'
         BE        SISNON
         CLC       SOPND(6),=C'ISNOFF'
         BE        SISNOFF
         CLC       SOPND(6),=C'SPIEON'
         BE        SPIEON
.SSDEBUG ANOP
         B         SDEND
         AIF       ('&TRACE' EQ 'OMIT').STN2
SISNON   OUTPUT    4,SISNON1
STRACON  OUTPUT    4,STON
         B         SBACK1
SISNOFF  OUTPUT     4,SISNOFF1
STRACOF  OUTPUT    4,STOFF
         B         SBACK1
SPIEON  OUTPUT   4,SPIEON1
         B         SBACK1
STON     BAL       R14,XTRACON
STOFF    BAL       R14,XTRACOFF
SISNON1  MVI       XISNTRAC,X'80'
SISNOFF1 MVI       XISNTRAC,X'00'
SPIEON1  MVI       XISNTRAC,X'40'
SNAPON   MVI       COPT,C'S'
         B         SBACK1
SNAPOF   MVI       COPT,C' '
         B         SBACK1
.STN2    ANOP
         EJECT
STAB     DC        X'FF'
         SETUP     'READ',IREAD,SCEXEC
         SETUP     'DIMENSION',TDIME,SCBLOC
         SETUP     'PRINT',IPRIN,SCEXEC
         SETUP     'COMPLEX',TCMPLX,SCFUNC+SCBLOC,LCOMP,SCMAIN
         SETUP     'WRITE',IWRIT,SCEXEC
         SETUP     'REAL',TREAL,SCFUNC+SCBLOC,LREAL,SCMAIN
         SETUP     'PUNCH',IPUNC,SCEXEC
         SETUP     'INTEGER',TINTGR,SCFUNC+SCBLOC,LINTE,SCMAIN
         SETUP     'GOTO',GOGO,SCEXEC
         SETUP     'DOUBLEPRECISION',TDBLPREC,SCFUNC+SCBLOC,LDOUB,     C
               SCMAIN
         SETUP     'CONTINUE',GCONT,SCEXEC+SCISN
         SETUP     'LOGICAL',TLOGCL,SCFUNC+SCBLOC,LLOGI,SCMAIN
         SETUP     'CALL',ACALL,SCEXEC
         SETUP     'EQUIVALENCE',TEQUIV,SCBLOC
         SETUP     'STOP',ISTOP,SCEXEC+SCISN
         SETUP     'COMMON',TCOMM,SCBLOC
         SETUP     'RETURN',LRETU,SCEXEC
         SETUP     'DATA',IDATA,SCBLOC
         SETUP     'PAUSE',IPAUS,SCEXEC+SCISN
         SETUP     'END ',LEND,SCBLOC+SCNOGO                       V1L1
         SETUP     'REWIND',IREWI,SCEXEC
         SETUP    'SUBROUTINE',LSUBR,SCMAIN
         SETUP     'BACKSPACE',IBACK,SCEXEC
         SETUP     'FUNCTION',LFUNC,SCMAIN
         SETUP     'ASSIGN',GASSN,SCEXEC+SCISN
         SETUP     'ENTRY',LENTR,SCMAIN
         SETUP     'ENDFILE',IENDF,SCEXEC
         SETUP     'IMPLICIT',TIMPCIT,SCBLOC
         AIF       ('&NAMLIST' EQ 'OMIT').SNAME1                   V1L2
         SETUP     'NAMELIST',GNAME,NIL
.SNAME1  ANOP                                                      V1L2
         SETUP     'BLOCKDATA ',LBLOC,SCMAIN
         SETUP     'EXTERNAL',TEXTE,NIL
         SETUP     'CHARACTER',TCHARAC,SCBLOC
         AIF       ('&DIRACC' EQ 'OMIT').STAB1
         SETUP     'FIND',IFIND,SCEXEC
         SETUP     'DEFINEFILE',IDEFI,SCBLOC+SCGENI                V1L2
.STAB1   ANOP
         AIF       ('&DUMPLST' EQ 'OMIT').SDUMP2                   V1L2
         SETUP     'DUMPLIST',GDUMP,NIL
.SDUMP2  ANOP
         AIF       ('&ONERROR' EQ 'OMIT').SERR01                   V1L2
         SETUP     'ONERRORGOTO',ONERR,NIL                         V1L2
.SERR01  ANOP                                                      V1L2
         AIF       ('&STR' NE 'USE').SSTR8                          ST1
         SETUP     'ELSEDO',STELSE,NIL                              ST1
         SETUP     'ENDIF',STENDIF,NIL                              ST1
         SETUP     'ENDWHILE',STENDWH,NIL                           ST1
         SETUP     'DOCASE',STDOCASE,SCEXEC+SCISN                   ST1
         SETUP     'CASE',STCASE,NIL                                ST1
         SETUP     'IFNONEDO',STIFNONE,NIL                          ST1
         SETUP     'ENDCASE',STENDCAS,SCGENI                        ST1
         SETUP     'ATENDDO',STATEND,NIL                            ST1
         SETUP     'ENDATEND',STENDEOF,NIL                          ST1
         SETUP     'EXECUTE',STPERFM,SCEXEC                         ST1
         SETUP     'REMOTEBLOCK',STPARAGR,SCGENI                    ST1
         SETUP     'ENDBLOCK',STENDPAR,NIL                          ST1
         EXTRN     STTHEN,STWHILE,STWHDO                            ST1
SATHEN   DC        A(STTHEN)                                        ST1
SAWHILE  DC        A(STWHILE)                                       ST1
SAWHDO   DC        A(STWHDO)                                        ST1
.SSTR8   ANOP                                                       ST1
SHASH    DC        H'0'
S$ZERO   EQU        STAB
         SHASH     'ZERO'
         SHASH     'DATA'
         SHASH     'ZERO'
         SHASH     'PAUSE'
         SHASH     'COMMON'
         AIF       ('&DIRACC' EQ 'OMIT').SHASH1
         SHASH     'DEFINEFILE'
.SHASH1  ANOP
         AIF       ('&DIRACC' EQ 'USE').SHASH2
         SHASH     'ZERO'
.SHASH2  ANOP
         SHASH     'BACKSPACE'
         SHASH     'READ'
         AIF       ('&DIRACC' EQ 'OMIT').SHASH3
         SHASH     'FIND'
.SHASH3  ANOP
         AIF       ('&DIRACC' EQ 'USE').SHASH4
         SHASH     'ZERO'
.SHASH4  ANOP
         SHASH     'ZERO'
         SHASH     'GOTO'
         SHASH     'FUNCTION'
         SHASH     'END'
         SHASH     'ZERO'
         SHASH     'CALL'
         SHASH     'ENDFILE'
         SHASH     'CHARACTER'
         SHASH     'ZERO'
         SHASH     'CONTINUE'
         SHASH     'SUBROUTINE'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'STOP'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'DIMENSION'
         SHASH     'LOGICAL'
         SHASH     'WRITE'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'RETURN'
         SHASH     'EXTERNAL'
         SHASH     'ENTRY'
         SHASH     'PUNCH'
         SHASH     'COMPLEX'
         SHASH     'BLOCKDATA '
         SHASH     'ZERO'
         SHASH     'INTEGER'
         SHASH     'REWIND'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'REAL'
         SHASH     'ZERO'
         SHASH     'ASSIGN'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'ZERO'
         SHASH     'IMPLICIT'
         SHASH     'DOUBLEPRECISION'
         SHASH     'ZERO'
         SHASH     'PRINT'
         SHASH     'ZERO'
         AIF       ('&NAMLIST' EQ 'OMIT').SHASH5                   V1L2
         SHASH     'NAMELIST'
         AGO       .SHASH6                                         V1L2
.SHASH5  SHASH     'ZERO'                                          V1L2
.SHASH6  SHASH     'EQUIVALENCE'                                   V1L2
         SHASH     'ZERO'
         SHASH     'ZERO'
         EJECT
*
SCARD    EQU       XCARD
         DC        0H'0'
SPRINT   CLI       SIHPALNE,ALLON      HAS LINE ALREADY BEEN PRINTED
         BER       R14                 YES SO RETURN
         MVC       XCARD+72(1),CFFCHAR  RESTORE  COL 73            V1L5
SPRINT$  DS        0H                                              V1L5
         CLI       CLISTSW,OFF         IS C$PRINTOFF IN EFFECT?    V1L5
         BER       R14                 YES -> RETURN               V1L5
         SPRIN     XCARD1,90
         MVI       XCARD1,C' '         RESET CC CHARACTER
         SR        R2,R2               FOR TRT OR IC INST'S
         BR        R14
         EJECT
SOPT     EQU       COPT
         AIF       ('&SNAPS' EQ 'OMIT').SSN1
         DS        0F
PRNTSTCK EQU       *
         SR        R0,R0
         SR        R3,R3
         OFFSET    LRAL,R1,SSTACK
         CLI       SOPT,C'S'
         BNE       0(R14)
PLOOP    LH        R0,0(R1)
         LR        R3,R0
         CSNAP     STACK,0(R1),0(R3)
         AH        R1,0(R1)
         CLI       2(R1),X'01'
         BNE       PLOOP
         SNAPS     STCK,SPEC,4
         LA        R1,SCARD
         SR        R2,R2
         BR        R14
SPEC     EQU       SLAST
.SSN1    ANOP
KF9      DC        F'9'
KF255    DC        F'255'
NIL      EQU       X'00'
         LTORG
         END
