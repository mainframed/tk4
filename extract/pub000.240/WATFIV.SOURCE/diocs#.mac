*        MACRO                                                     V1L2
*        IHCDIOSM                                                  V1L2
         GBLA  &ERR
&ERR     SETA      0                                               V1L2
         AIF   (&ERR EQ 0).DI83                                   24614
 TITLE 'IHCEDIOS--OS/360 FORTRAN IV OBJECT-TIME DIRECT ACCESS INPUT/OUTX
               PUT INTERFACE MODULE'                              24614
         AGO   .DI84                                              24614
.DI83    ANOP                                                     24614
 TITLE 'IHCDIOSE--OS/360 FORTRAN IV OBJECT-TIME DIRECT ACCESS INPUT/OUTX
               PUT INTERFACE MODULE'
.DI84    ANOP                                                     24614
*
*C287200,295200,296800,308800,324800                             A34420
*A294800-295600,307400-307600,317800-318000,324400-324800,332400 A34420
*A345800-346200,801800                                           A34220
*D332800-342400                                                  A34220
*D320800-324000                                                  A46146
*A320300-323300                                                  A46146
*A950000                                                         A46146
*
* STATUS - CHANGE LEVEL 05   21MAY72   RELEASE 21.6
*
*FUNCTION/OPERATION--IHCDIOSE,A MEMBER OF THE FORTRAN SYSTEM LIBRARY, *
*   PERFORMS OBJECT-TIME IMPLEMENTATION OF DIRECT ACCESS INPUT/OUTPUT *
*   STATEMENTS--DEFINE FILE,FIND,READ AND WRITE. IHCDIOSE INTERFACES  *
*   WITH BASIC SEQUENTIAL ACCESS METHOD (BSAM) AND BASIC DIRECT ACCESS*
*   METHOD (BDAM) FOR ALL DIRECT ACCESS INPUT/OUTPUT OPERATIONS.      *
*                                                                     *
*ENTRY POINTS--                                                       *
*                                                                     *
*   DIOCS#--CONTROL IS RECEIVED FROM THE FORTRAN LOAD MODULE. CODE AT *
*        THIS ENTRY POINT PROCESSES THE PARAMETER LIST OF THE DEFINE  *
*        FILE STATEMENT IN THE FORTRAN SOURCE MODULE.                 *
*        1. CHECKS FOR THE REDEFINITION OF EACH DIRECT ACCESS DATA    *
*           SET REFERENCE NUMBER (DSRN).                              *
*        2. ENTERS THE ADDRESS OF EACH DIRECT ACCESS DSRN'S PARAMETER *
*           LIST ( DEFINE FILE STATEMENT LIST) INTO THE CORRESPONDING *
*           ENTRY IN THE UNIT ASSIGNMENT TABLE (IHCUATBL)             *
*        IN ADDITION, THE ADDRESSABILITY FOR IHCDIOSE WITHIN IHCFCOME *
*        IS ALSO ESTABLISHED.                                         *
*        CALLING SEQUENCE--      LA    1,LIST                         *
*                                L     15,=V(DIOCS#)                  *
*                                BALR  14,15                          *
*                   WHERE-- LIST IS THE ADDRESS OF THE PARAMETER LIST *
*                           OF THE DEFINE FILE STATEMENT              *
*                                                                     *
*   IBCENTRY--CONTROL IS RECEIVED FROM IHCFCOME. CODE AT THIS ENTRY   *
*        POINT PROCESSES DIRECT ACCESS INPUT/OUTPUT OPERATIONS.       *
*        1. CREATES AND FORMATS NEW DATA SETS. (INTERFACING WITH BSAM)*
*        2. READS AND / OR WRITE PHYSICAL RECORDS. (INTERFACING WITH  *
*           BDAM)
*        3. UPDATES ASSOCIATED VARIABLES ACCORDINGLY.                 *
*        IN ADDITION, VARIOUS TYPE ERRORS RELATED TO DIRECT ACCESS    *
*        INPUT/OUTPUT OPERATION ARE BEING DETECTED.                   *
*        CALLING SEQUENCE--                                           *
*                                                                     *
*              FILE INITIALIZATION SECTION--                          *
*                                LA    2,DSRN      DA-DSRN            *
*                                L     1,AIBCNTRY  ADDRESS OF IBCENTRY*
*                                BALR  0,1                            *
*                                DC    AL1(0)                         *
*                                DC    AL1(IOCODE)                    *
*                   WHERE-- IOCODE=X'F0' FOR FORMATTED INPUT          *
*                                  X'FF' FOR FORMATTED OUTPUT         *
*                                  X'00' FOR NON-FORMATTED INPUT      *
*                                  X'0F' FOR NON-FORMATTED OUTPUT     *
*                                                                     *
*              READ SECTION--                                         *
*                                L     1,AIBCNTRY  ADDRESS OF IBCENTRY*
*                                BALR  0,1                            *
*                                DC    AL1(1)                         *
*                                DC    AL1(0)                         *
*                                                                     *
*              WRITE SECTION--                                        *
*                                L     1,AIBCNTRY  ADDRESS OF IBCENTRY*
*                                BALR  0,1                            *
*                                DC    AL1(2)                         *
*                                DC    AL1(0)                         *
*                                                                     *
*              TERMINATION SECTION--                                  *
*                                L     1,AIBCNTRY  ADDRESS OF IBCENTRY*
*                                BALR  0,1                            *
*                                DC    AL1(4)                         *
*                                DC    AL1(0)                         *
*                                                                     *
*INPUT--THERE ARE TWO TYPES OF INPUT TO IHCDIOSE                      *
*        1. INPUT PARAMETERS FROM THE FORTRAN LOAD MODULE AND         *
*        2. INPUT PARAMETERS FROM IHCFCOME.                           *
*                                                                     *
*OUTPUT--POINTERS TO BUFFERS, AND BUFFER LENGTHS ARE GIVEN TO         *
*        1. IHCFCOME AND                                              *
*        2. THE CONTROL PROGRAM                                       *
*                                                                     *
*EXTERNAL ROUTINES--                                                  *
*        IHCFCOME--ERROR MESSAGES, ERRORS DETECTED BY IHCDIOSE ARE    *
*                  PASSED TO IBCOM(IHCFCOME)                          *
*                                                                     *
*EXITS--                                                              *
*                                                                     *
*   NORMAL--RETURN IS TO THE CALLING ROUTINE (IHCFCOME OR THE FORTRAN *
*           LOAD MODULE).                                             *
*   ERROR--RETURN IS TO IHCFCOME TO PRINT ERROR MESSAGE.              *
*                                                                     *
*TABLES/WORK AREAS--                                                  *
*                                                                     *
*   TABLES--                                                          *
*                                                                     *
*        REFERENCED EXTERNALLY--IHCUATBL (UNIT ASSIGNMENT TABLE)      *
*              WORD ONE-FIRST HALF=DSRN BEING OPERATED ON CURRENTLY   *
*                       SECOND HALF=(NUMBER OF DSRN'S) X 16           *
*              WORD TWO-FIRST BYTE=ERROR MESSAGE DSRN                 *
*                       BYTES 1-3 NOT USED                            *
*              WORDS AND THE FOLLOWING--FOUR WORDS PER DSRN (FIRST    *
*                       WORD CONTAINS A POINTER TO THE UNIT BLOCK FOR *
*                       THAT DSRN, SECOND AND THIRD WORDS ARE UNUSED, *
*                       AND LAST WORD CONTAINS A POINTER TO THE DEFINE*
*                       FILE PARAMETER LIST FOR THE SAME DSRN).       *
*                                                                     *
*        REFERENCED INTERNALLY--UB (UNIT BLOCK)                       *
*              THERE IS ONE UNIT BLOCK CONSTRUCTED DYNAMICALLY FOR    *
*              EACH DA-DRSN. EACH SUCH BLOCK CONSISTS OF--            *
*              SIX WORDS FOR HOUSEKEEPING SECTION                     *
*              FOURTEEN WORDS FOR TWO DATA EVENT CONTROL BLOCKS (DECB)*
*              TWENTY-SIX WORDS FOR DATA CONTROL BLOCK (DCB)          *
*                                                                     *
*   WORK AREAS--                                                      *
*                                                                     *
*        JFCB (JOB FILE CONTROL BLOCK)--WORK AREA PROVIDED FOR READ   *
*              JFCB MACRO-INSTRUCTION. (44 WORDS)                     *
*                                                                     *
*        SAVEAREA--REGISTER STORAGE AREA USED TO SAVE CALLING         *
*              PROGRAM'S REGISTERS. (18 WORDS)                        *
*                                                                     *
*        BDAMSAVE--REGISTER STORAGE AREA PROVIDED FOR CONTROL PROGRAM *
*              TO SAVE IHCDIOSE REGISTERS. (18 WORDS)                 *
*                                                                     *
*ATTRIBUTES--NONE                                                     *
*                                                                     *
*NOTES--                                                              *
*                                                                     *
*    THE CALLING SEQUENCE TO IHCDIOSE AT DIOCS# IS STANDARD. THE SAVE *
*        AND RETURN ROUTINES AT THIS ENTRY POINT ARE STANDARD.        *
*                                                                     *
*    THE CALLING SEQUENCE TO IHCDIOSE AT IBCENTRY IS NON-STANDARD.    *
*        THE SAVE AND RETURN ROUTINES AT THIS ENTRY ARE NON-STANDARD. *
*                                                                     *
*    CODING WITH *** IN COLUMNS 69-71 FOR FORTRAN G ONLY              *
***********************************************************************
         AIF   (&ERR EQ 0).DI001
IHCEDIOS CSECT
         AGO   .DI002
.DI001   ANOP
IHCDIOSE CSECT
.DI002   ANOP
***********************************************************************
*                  REGISTER USAGES                                    *
***********************************************************************
LIST     EQU   4
GRX      EQU   2
GRY      EQU   3
WKA      EQU   4
WKB      EQU   5
WKC      EQU   6
DFLIST   EQU   7
LKA      EQU   8
DECBR    EQU   9
UATR     EQU   10
UBR      EQU   11
BASE     EQU   12
RTN      EQU   14
ENTRY    EQU   15
         EJECT
         ENTRY DIOCS#
*        EXTRN     FDIOCS#                                         V1L2
         EXTRN IBCOM#
*        EXTRN     IHCUATBL                                        V1L2
         EXTRN     UNIT@                                           V1L2
ASSOVCEQ EQU       X'02'                                           V1L1
         USING UAT,UATR
         USING UB,UBR
         EJECT
*                                                                     *
*                  CONTROL IS RECEIVED FROM FORTRAN LOAD MODULE       *
*                                                                     *
DIOCS#   EQU   *
         USING *,15
***********************************************************************
*                                                                     *
*              STANDARD  SAVE ROUTINE                                 *
*                                                                     *
***********************************************************************
         SAVE  (14,12),,DIOCS#
         L     BASE,AIBCNTRY
         LR    WKA,13
         LA    13,SAVEAREA
         ST    13,8(WKA)
         ST    WKA,4(13)
         L     UATR,VACONS
         LR    LIST,1                  SAVE PARAMETER LIST ADDRESS
         EJECT
***********************************************************************
*                                                                     *
*                  FILE DEFINITION SECTION                            *
*                                                                     *
*        THE FILE DEFINITION SECTION PROCESSES DEFINE FILE STATEMENTS.*
*        IT RECEIVES CONTROL FROM FORTRAN LOAD MODULES INITIALIZATION *
*        AND PERFORMS THE FOLLOWING FUNCTIONS:                        *
*          1. ENTER THE ADDRESS OF EACH DIRECT ACCESS DATA SET        *
*             REFERENCE NUMBER'S(DA-DSRN) PARAMETER LIST INTO         *
*             THE APPROPRIATE ENTRY IN THE UNIT ASSIGNMENT TABLE(UAT).*
*          2. CHECK FOR THE REDEFINITION OF EACH DA-DSRN.             *
*          3. ESTABLISH ADDRESSABILITY FOR IHCDIOSE WITHIN IHCFCOME   *
*                                                                     *
***********************************************************************
DASDEF   SR    GRX,GRX
         CLC   0(1,LIST),ERDSRN        IS DSRN FOR ERROR MESSAGE DEVICE
         BE    ILDSRN                  YES. ERROR
         IC    GRX,0(LIST)             PUT DSRN IN GRX
         BAL   LKA,GETUAT              GET UAT POINTER IN GRX
         TM    15(GRX),X'01'           HAS DSRN BEEN DEFINED PREVIOUSLY
         BZ    DETEST                  YES. IGNORE THE CURRENT DF
         TM    3(GRX),X'01'            HAS DSRN BEEN USED AS SEQ.FILE
         BZ    EDSRNRED                YES.
         ST    LIST,12(GRX)            NO. ENTER LIST ADDRESS IN UAT.
         TM        8(LIST),ASSOVCEQ    VAR IN COMMON OR EQUIV      V1L2
         BZ        DETEST              NO SO ARG LIST OK           V1L2
         IC        2,8(,LIST)          GET CODE                    V1L2
         L         3,8(,LIST)          GET ADDR                    V1L2
         L         3,0(,3)             NOW GET REAL ADDR           V1L2
         ST        3,8(,LIST)          STORE IN ARG LIST           V1L2
         STC       2,8(,LIST)          AND SAVE CODE AS WELL       V1L2
DETEST   TM    8(LIST),X'80'           IS LAST DSRN IN LIST
         BO    DELAST                  YES.
         LA    LIST,12(LIST)           NO. UPDATE LIST
         B     DASDEF                      GO TO PROCESS NEXT DSRN
         AIF   (&ERR EQ 0).DI1
EDSRNRED LA    14,PRMS235              GIVE ERROR MESSAGE 235
         LA    WKC,DETEST              SET UP RETURN REGISTER FOR
         B     COMINTFC                 COMINTFC AND BRANCH
ILDSRN   LA    14,PRMS234              GIVE ERROR MESSAGE 234
         MVC   DSRNPTR+3(1),0(LIST)    MOVE DSRN TO RIGHT PLACE
         LA    WKC,DETEST              SET UP RETURN REGISTER
         B     COMINTFC
         AGO   .DI2
.DI1     ANOP
EDSRNRED LA    1,235                   GIVE ERROR MESSAGE 235
         B     COMERHN
ILDSRN   LA    1,234                   GIVE ERROR MESSAGE 234
         B     COMERHN
.DI2     ANOP
DELAST   EQU   *                       STORE ADDRESS OF IBCENTRY
*        GRY,VFDIOCS                   INTO                        V1L2
*        ST        BASE,0(0,GRY)                                   V1L2
         EJECT
***********************************************************************
*                                                                     *
*              STANDARD  RETURN ROUTINE                               *
*                                                                     *
***********************************************************************
RETURN   L     13,SAVEAREA+4
         LM    14,12,12(13)            RESTORE REGISTERS
         MVI   12(13),FF
         BR    14
         DROP  15
         EJECT
*                                                                     *
*                  CONTROL IS RECEIVED FROM IHCFCOME                  *
*                                                                     *
         ENTRY     DIOCS@                                          V1L2
DIOCS@   EQU       *                                               V1L2
IBCENTRY EQU   *
         USING IBCENTRY,1              9
***********************************************************************
*                  NON-STANDARD SAVE ROUTINE                          *
***********************************************************************
         STM   14,12,SAVEAREA+12       SAVE REGISTERS
         LR        BASE,1                                          V1L2
         ST    13,SAVEAREA+4
         L     BASE,AIBCNTRY
         LA    13,BDAMSAVE             SET BDAM SAVE AREA PIONTER
         DROP  1
         EJECT
         USING IBCENTRY,BASE
***********************************************************************
*                                                                     *
*              DASTRA DETERMINES THE OPERATION TYPE AND TRANSFERS     *
*              CONTROL TO THE APPROPRIATE ROUTINE                     *
*                                                                     *
***********************************************************************
DASTRA   L     UATR,VACONS
         L     UBR,UBADDR
         LR    WKA,0
         SR    WKB,WKB
         IC    WKB,0(WKA)
         SLA   WKB,2
         B     TRANSFER(WKB)
TRANSFER B     DASINIT
         B     DASREAD
         B     DASWRITE
         B     DASEND                  DUMMY--BRANCH SHOULD NEVER TAKE
         B     DASTERM
         EJECT
***********************************************************************
*                                                                     *
*                  FILE INITIALIZATION SECTION                        *
*                                                                     *
*        THE FILE INITIALIZATION SECTION RECEIVES CONTROL FROM IBCOM  *
*        WHENEVER A DIRECT ACCESS I/O IS REQUESTED. IT PERFORMS THE   *
*        FOLLOWING FUNCTIONS:                                         *
*          1. GENERATES UNIT BLOCKS FOR NON-OPENED DIRECT ACCESS DATA *
*             SETS.                                                   *
*          2. CREATES AND FORMATS NEW DATA SETS.                      *
*          3. OPENS DIRECT ACCESS DATA SETS.                          *
*                                                                     *
***********************************************************************
DASINIT  LR    LIST,GRX                SET PARAMETER LIST REGISTER
         TM    0(LIST),XFIND           IS IT FIND
         BZ    INNOFIND                NO
         OI    FINDSW,XFIND            YES. SET FINDSW
INNOFIND EQU   *
         L     GRX,0(LIST)
         TM    0(LIST),VDSRN                IS IT VARIABLE DSRN
         BZ    INCONST                      NO. CONSTANT DSRN
         L     GRX,0(GRX)                   YES.
INCONST  STH   GRX,BYTES                         SAVE IT IN BYTES
         LA    GRX,0(GRX)
         BAL   LKA,GETUAT              GET UAT POINTER IN GRX
         TM    15(GRX),X'01'           IS IT DA-DSRN
         BO    NDADSRN                 NO. ERROR
         L     DFLIST,12(GRX)
         MVC   ASSOVAR(4),8(DFLIST)
         TM    3(GRX),X'01'            YES. IS IT FIRST REFERENCED
         BZ    INOLD                        NO.
         L     WKA,4(DFLIST)
         L     WKA,0(WKA)              ACCORDING TO DF
         CLI   4(DFLIST),C'U'          CONTROL CHARACTER U
         BNE   EDITDATA                NO.
         SLA   WKA,2
EDITDATA C     WKA,MAX32K              RECLEN TOO BIG
         BNL   RECTBIG                 YES, ERROR
         EJECT
***********************************************************************
GETUB    EQU   *
         GETMAIN   R,LV=184            GET STORAGE FOR UNIT BLOCK
         ST    1,0(GRX)                STORE UNIT BLOCK ADDRESS IN UAT
         LR    UBR,1                   PUT UNIT BLOCK ADDR. INRIGHT REG
         MVI   UB,X'00'                INITIALIZE UNIT BLOCK
         MVC   UB+1(79),UB
         LA    WKB,DCB                 STORE DCB ADDRESS
         ST    WKB,DECBA+8                INTO  DECBA
         ST    WKB,DECBB+8                AND   DECBB
         STH   WKA,DECBALEN            SET RECORD LENGTH IN DECBA  3439
         STH   WKA,DECBBLEN            SET RECORD LENGTH IN DECBB  3439
         MVC   DCB(104),DCBSKLTN       INITIALIZE DCB              3439
         STH   WKA,DCBBLKSI            SET BLOCK SIZE IN DCB       3439
         STH   WKA,DCBBUFL             SET BUFFER LENGTH IN DCB    3439
SETDDNM  EQU   *
         LH    WKC,BYTES
         CVD   WKC,DOUBLE
         UNPK  DOUBLE(5),DOUBLE+5(3)    SET DDNAME IN DCB
         OI    DOUBLE+4,X'F0'
         MVC   DCBDDNAM+2(2),DOUBLE+3
INITJFCB MVI   JFCB,X'00'              INITIALIZE JFCB             3439
         ST    UBR,UBRDJFCB            POINTER TO UB AT READ JFCB  3439
         EJECT
***********************************************************************
READJFCB RDJFCB   ((WKB))
         CLI   JFCB,X'00'              DD SUPPLIED
         BE    NODD                    NO. ERROR
         TM    JFCRECFM,X'20'          TEST IF TRACK OVERFLOW REQUESTED
         BZ    *+8                     NO, BRANCH
         OI    DCBRECFM,X'20'          YES, SET TR. O'FLOW BIT ON
         TM    JFCRECFM,X'20'  WAS TRK OFLOW INDICATED ON DD CARD 12408
         BNO   ONESET                                            12408
         OI    DCBRECFM,X'20'     INDICATE TRK OFLOW IN DCB       12408
ONESET   MVI   DCBBUFNO,ONE                                      12408
         CLI   JFCBUFNO,ONE            ONE BUFFER SPECIFIED
         BE    CKDISP                  YES.
         MVI   DCBBUFNO,TWO            SET BUFFER NO. TO TWO
         OI    STATUSU,X'20'
CKDISP   TM    JFCBIND2,NEW            DATA SET NEW
         BC    4,OPENDCB        NO                               A34220
***********************************************************************
CREATE   L     WKA,SAVE0
         TM    1(WKA),OUTPUT           FIRST A WRITE REQUEST
         BZ    CRNOT                   NO .
         LA    WKB,DCB                 POINTER TO DCB              3439
         C     UBR,UBRDJFCB            CHECK THAT JFCB IS IN CORE  3439
         BNE   INITJFCB                IF NOT, GO TO READ IT       3439
         NI    JFCBIND2,X'3F'          NO LONGER NEW DATA SET      4597
         OI    JFCBIND2,X'40'          INDICATE OLD DATA SET       4597
         MVI   DCBNCP,ONE       SHOW ONE DECB                    A34220
         CLI   DCBBUFNO,TWO     BUFNO=2?                         A34220
         BNE   RECFM            NO,BRANCH                        A34220
         MVI   DCBNCP,X'02'            SET NCP FOR TWO DECBS USED
RECFM    MVI   DCBDSORG,X'40'     SET DSORG=PS                   A34220
         MVI   DCBMACR,X'00'           INDICATE NORMAL BSAM WRITE  4596
         MVI   DCBMACR+1,X'20'                                     4596
         MVI   DCBOPTCD,X'00'     INDICATE NO CHAIN SCHEDULING    12408
         TM    JFCOPTCD,X'20'     IS CHAIN SCHEDULING SELECTED    12408
         BZ    BSAMOPEN                                           12408
         MVI   DCBOPTCD,X'20'          INDICATE CHAINED SCHEDULING 4596
*                                                                     *
BUILDDS  EQU   *
BSAMOPEN DS    0H                                                 12408
         OPEN  ((WKB),OUTPUT),TYPE=J   OPEN FOR OUTPUT             4597
         OI    STATUSU,XOPENSM         SET STATUS AS OPEN FOR SAM
         BAL   LKA,SETBUF              SET BUFFER ADDRESSES
         LH    WKA,DECBALEN
         CLI   DCBBUFNO,ONE       IS BUFNO =1?                   A34220
         BE    BLNKBUF            YES,BRANCH                     A34220
         AR    WKA,WKA
BLNKBUF  L     WKB,DECBABUF                                      A34220
         BAL   LKA,BLANKBUF            BLANK OUT BOTH BUFFERS
         L     WKC,0(DFLIST)           GET NO.OF RECORDS FROM DF
         L     WKC,0(WKC)
         LA    DECBR,DECBA
         ST    DECBR,CURBUF
         LA    WKB,DECBB
         ST    WKB,NXTBUF
         MVI   STATUSA,CKED            SET STATUS TO CHECK
         MVI   STATUSB,CKED            SET STATUS TO CHECK
CRWRITE  WRITE (DECBR),SF,MF=E         WRITE A BLANK RECORD        4596
         NI    STATUSA,FF-CKED         SET STATUS TO NOT CHECKED   4596
         CLI   DCBBUFNO,ONE       BUFNO=1?                       A34220
         BE    CRCKED             YES,BRANCH                     A34220
         BAL   LKA,FLIPBUF             FLIP BUFFERS
CRCKED   BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
CRBCT    BCT   WKC,CRWRITE             BRANCH IF NOT THROUGH CREATE
         SR    WKA,WKA                 CLEAR REGISTER             46146
         L     LKA,DCBDVTBL            GET DEVICE TABLE ENTRY     46146
         IC    WKA,7(LKA)              GET OVERHEAD (1 BYTE)      46146
         TM    9(LKA),X'08'            IS OVERHEAD 2 BYTES?       46146
         BZ    CONEB                   NO...USE 1 BYTE            46146
         LH    WKA,6(LKA)              GET 2 BYTE OVERHEAD        46146
CONEB    AH    WKA,DCBBLKSI            ADD OVERHEAD TO BLKSIZE    46146
         CH    WKA,DCBTRBAL            WILL ANOTHER RECORD FIT?   46146
         BH    CRFIN                   NO...THAT IS ALL           46146
         LA    WKC,1                   GET READY FOR ANOTHER      46146
         B     CRWRITE                 PASS THROUGH WRITE         46146
CRFIN    CLI   DCBBUFNO,ONE       BUFNO=1?                       A34220
         BE    CRCLOSE            YES,BRANCH                     A34220
         BAL   LKA,FLIPBUF        FLIP BUFFERS                   A34220
         BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
CRCLOSE  LA    WKB,DCB
         CLOSE ((WKB))
         NI    STATUSU,FF-XOPENSM      SET STATUS TO CLOSED
         MVI   DCBNCP,X'00'            RESET FOR BDAM
         MVI   DCBDSORG,X'20'           RESET DSORG=DA
         MVI   DCBMACR,X'29'           SET BDAM UPDATE AND CHECK   4596
         MVI   DCBMACR+1,X'28'         INDICATE BDAM WRITE BY ID   4596
         MVI   DCBOPTCD,X'01'          SET BDAM REL.BLOCK ADDR     4596
         MVI   NOBUFF,X'FF'       DON'T GET BUFFS AT BDAM OPEN   A34220
OPENDCB  EQU   *                                                   4598
         LA    WKB,DCB                 GET DCB ADDRESS             4598
         OPEN  ((WKB),UPDAT)           OPEN THE DCB                4598
         OI    STATUSU,XOPEN           SET STATUS TO OPEN
         CLI   NOBUFF,X'FF'       SHOULD I GET BUFFERS?          A34220
         BE    OPENED             IF NO GO TO OPENED             A34220
         SR    0,0                                               A34220
         IC    0,DCBBUFNO         GET BUFNO IN HI-ORDER BYTE     A34220
         SLL   0,8                HALF BYTE OF REGISTER ZERO     A34220
         IC    0,DCBBLKSI         AND BUFFER SIZE IN LOW         A34220
         SLL   0,8                ORDER HALF BYTE                A34220
         IC    0,DCBBLKSI+1                                      A34220
*        GETPOOL DCB,(0)                                         A34220
         GETPOOL DCB,(0)                                         A34220
OPENED   MVI   NOBUFF,X'00'       RESET TO GET BUFS AT BDAM OPEN A34220
         L     WKC,0(DFLIST)           GET NO.OF RECORDS FROM DF
         L     WKC,0(WKC)
         ST    WKC,RECNUM              SAVE NO.OF RECORD IN UB
         LA    WKB,DECBA
         ST    WKB,CURBUF
         LA    WKB,DECBB
         ST    WKB,NXTBUF
         BAL   LKA,SETBUF
         MVI   STATUSA,CKED            SET STATUS TO CHECK
         MVI   STATUSB,CKED            SET STATUS TO CHECK
         LA    WKB,BLKREFA+1           SET DECBA BLKREF ADDRESS
         ST    WKB,DECBAREF
         LA    WKB,BLKREFB+1           SET DECBB BLKREF ADDRESS
         ST    WKB,DECBBREF
*        B     INIOTYPE
         EJECT
INIOTYPE L     WKA,SAVE0               GET IBCOM PARAMETER LIST
         MVC   IOTYPE(1),1(WKA)        SET I/O TYPE
         L     WKB,SAVEGRX
         TM    IOTYPE,FORMAT           NO. IS IT FORMAT READ
         BZ    INONFOR                     NO. NON-FORMATTED READ/FIND
*        L         WKC,8(WKB)          YES.                        V1L2
         L         WKC,SAVER3          GET RECORD NUMBER           V1L2
INGETRN  EQU   *
         C     WKC,MAX24B              CONSTANT RECORD NUMBER      ****
         BNH   INCNSTRD                YES.                        ****
         L     WKC,0(WKC)
INTYPE   EQU   *
         LTR   WKC,WKC
         AIF   (&ERR EQ 0).DI87                                   24614
         BC    12,RDNMBIG+4            RECORD NO. IS NOT POSITIVE
         AGO   .DI88                                              24614
.DI87    BC    12,RDNMBIG              RECORD NO. IS NOT POSITIVE 24614
.DI88    ANOP                                                     24614
         BCTR  WKC,0                   DECREMENT BY 1 FOR BDAM
         TM    IOTYPE,OUTPUT           IS IT OUTPUT
         BO    WROBTNB                 YES.
         B     RD
*NONFOR  L         WKC,4(WKB)                                      V1L2
INONFOR  L         WKC,SAVER3          GET RECORD NUMBER           V1L2
         B     INGETRN
INCNSTRD LA    WKC,0(WKC)              GET RECORD NUMBER IN WKC    ****
         B     INTYPE                                              ****
CRNOT    L     WKA,SAVEGRX
         TM    0(WKA),X'40'            REQUESTED BY FIND
         BO    FINDSWOF                YES. GO TO TURN OFF FINDSW. 3439
         AIF   (&ERR EQ 0).DI7
         LA    14,PRMS236              GIVE ERROR MESSAGE 236 VIA THE
         BAL   WKC,PRCMNTFC            COMMON INTERFACE TO THE MONITOR
         B     ERRRET                  RETURN TO IBCOM TO IGNORE I/O RE
         AGO   .DI102
.DI7     ANOP
         LA    1,236                   GIVE ERROR MESSAGE 236
         B     COMERRHN
.DI102   ANOP
INOLD    L     UBR,0(0,GRX)            SET UNIT BLOCK POINTER
         TM    STATUSU,XOPEN           DATA SET OPEN
         BO    INIOTYPE                YES BRANCH
         LA    WKB,DCB                 SET ADDRESS OF DCB
         TM    STATUSU,XOPENSM         IS DATA SET OPEN FOR SAM
         BZ    SETDDNM                 NO GO TO START AGAIN
         CLOSE ((WKB))                 YES, THEN CLOSE AND START
         NI    STATUSU,FF-XOPENSM      AGAIN.( SINCE I/O ERROR MUST
         B     SETDDNM                 HAVE OCCURRED.
         EJECT
***********************************************************************
*                                                                     *
*                  READ SECTION                                       *
*        THE READ SECTION PROCESSES READ AND FIND STATEMENTS. IT      *
*        PERFORMS THE FOLLOWING FUNCTIONS:                            *
*          1.READS PHYSICAL RECORDS.                                  *
*          2.PASSES BUFFER POINTER AND LENGTH TO IHCFCOME.            *
*          3.KEEPS TRACK OF BLOCK REFERENCE NUMBER.                   *
*                                                                     *
***********************************************************************
DASREAD  L     WKC,RDNOSAVE            GET RECORD NO. FROM RDNOSAVE
         LA    WKC,1(WKC)              UPDATE BY ONE
RD       C     WKC,RECNUM              RECORD NO. TOO BIG
         BNL   RDNMBIG                 YES. ERROR
         ST    WKC,RDNOSAVE
         L     DECBR,CURBUF
         BAL   LKA,GETBLKAD            GET BLKREF NO ADDRESS IN WKA
         C     WKC,0(WKA)              RECORD IN CURBUF
         BE    RDINBUF                 YES.
         TM    STATUSU,TWOBUF          TWO BUFFERS
         BZ    RDCUR                   NO.
         BAL   LKA,FLIPBUF             FLIP BUFFERS
         BAL   LKA,GETBLKAD            GET BLKREF NO ADDRESS IN WKA
         C     WKC,0(WKA)              RECORD IN NXTBUF
         BE    RDINBUF                 YES.
         TM    STATUSA,CKED            I/O  PENDING
         BO    RDREC                   NO.
         TM    STATUSA,WROT            WRITE PENDING
         BO    RDCUR                       YES.
         TM    STATUSA,RDIN            READ PENDING
         BZ    RDREC                       NO.
         BAL   LKA,FLIPBUF             FLIP BUFFERS
         BAL   LKA,GETBLKAD            GET BLKREF NO ADDRESS IN WKA
RDCUR    BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
RDREC    ST    WKC,0(WKA)              SET BLKREF NO
READ      READ   (DECBR),DI,MF=E     READ A RECORD               MAINT
         MVI   STATUSA,RDIN            SET STATUS TO READ IN
RDFIND   TM    FINDSW,XFIND               'FIND' REQUESTED
         BO    DASEND                     YES.
         BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
         L     GRX,12(DECBR)           SET BUFFER ADDRESS IN GRX
         LH    GRY,DECBALEN            SET RECORD LENGTH IN GRY
         B     DASEND
RDINBUF  TM    STATUSA,WROT+RDIN       ACTUAL RECORD IN BUFFER
         BZ    READ                    NO. PHONEY
         B     RDFIND                  YES.
         EJECT
***********************************************************************
*                                                                     *
*                  WRITE SECTION                                      *
*        THE WRITE SECTION PROCESSES THE WRITE STATEMENTS. IT PERFORMS*
*        THE FOLLOWING FUNCTIONS:                                     *
*          1.WRITES PHYSICAL RECORDS.                                 *
*          2.PROVIDES IHCFCOME WITH BUFFER SPACE.                     *
*          3.KEEPS TRACK OF BLOCK REFERENCE NUMBER                    *
*                                                                     *
***********************************************************************
DASWRITE L     DECBR,CURBUF
         BAL   LKA,GETBLKAD            GET BLKREF NO ADDRESS IN WKA
         L     WKC,0(WKA)              GET NEXT BLKREF NO
         C     WKC,RECNUM              RECORD NO. TOO BIG
         BNL   RDNMBIG                 YES.
         ST    WKC,RDNOSAVE            SET BLKREF NO IN RDNOSAVE
          WRITE  (DECBR),DI,MF=E     WRITE A RECORD              MAINT
         MVI   STATUSA,WROT            SET STATUS TO WRITE
         LA    WKC,1(WKC)              UPDATE RECORD NO.BY 1 FOR NXTWRT
         TM    STATUSU,TWOBUF               TWO BUFFERS
         BZ    WRCUR                        NO.
         BAL   LKA,FLIPBUF             FLIP BUFFERS
WRSETBF  TM    STATUSA,CKED            BUFFER FREE
         BO    WRSETOT                 YES.
         TM    STATUSA,WROT+RDIN       ANY PENDING OPERATIONS
         BZ    WRSETOT                   NO.
WRCUR    BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
WRSETOT  BAL   LKA,GETBLKAD            GET BLKREF NO ADDRESS IN WKA
         ST    WKC,0(WKA)              SET BLKREF NO
         NI    STATUSA,FF-WROT-RDIN    INDICATE NO RECORD IN BUFFER8619
         L     GRX,12(DECBR)           SET BUFFER ADDRESS IN GRX
         LH    GRY,DECBALEN            SET RECORD LENGTH IN GRY
         LR    WKA,GRY
         LR    WKB,GRX
         TM    IOTYPE,FORMAT                FORMAT REQUESTED
         BO    WRFORMT                      YES.
         BAL   LKA,ZEROBUF                  NO. ZERO OUT BUFFER AREA
         L     WKA,SAVE0
         CLI   0(WKA),X'00'            ENTERED FROM DASINIT
         BE    NSRETURN                YES. DO NOT UPDATE ASSO.VAR.
***********************************************************************
DASEND   L     WKA,ASSOVAR             GET ASSOCIATED VARAIBLE ADDRESS
         L     WKB,RDNOSAVE            GET RECORD NO. LAST TRANSMITTED
         LA    WKB,1(WKB)              UPDATE RECORD NO. FOR FORTRAN
         TM    FINDSW,XFIND            IS IT FIND REQUESTED
         BO    UPDASSV                 YES.
         LA    WKB,1(WKB)              NO. UPDATE ASSOCIATED VAR. BY 1
UPDASSV  EQU   *
         TM    ASSOVAR,X'01'           TWO BYTES ASSSO.VAR.        ****
         BO    HALFASSV                YES.                        ****
         ST    WKB,0(WKA)              UPDATE ASSO.VAR.
FINDSWOF EQU   *
         NI    FINDSW,FF-XFIND         SET FIND SWITCH OFF
         B     NSRETURN                RETURN
HALFASSV STH   WKB,0(WKA)              UPDATE ASSO.VAR. FOR G      ****
         B     FINDSWOF                                            ****
*                                                                     *
WRFORMT  BAL   LKA,BLANKBUF                     BLANK OUT BUFFER AREA
         B     DASEND
WROBTNB  C     WKC,RECNUM              RECORD NO. TOO BIG
         BNL   RDNMBIG                 YES.
         L     DECBR,CURBUF
         ST    WKC,RDNOSAVE            SET BLKREF NO IN RDNOSAVE
         B     WRSETBF
***********************************************************************
         AIF   (&ERR EQ 0).DI5
NDADSRN  LA    14,PRMS231              GIVE ERROR MESSAGE 231
         BAL   WKC,PRCMNTFC
ERRRET   L     13,SAVEAREA+4           RESTORE REGISTERS FROM OUR
         LM    14,12,SAVEAREA+12       SAVE AREA.
         SR    GRY,GRY                 INDICATE NO RECORD PASSED
         LR    1,0
         B     2(0,1)                  RETURN AT ERROR OFFSET
NODD     LA    14,PRMS219              GIVE ERROR MESSAGE 219
         BAL   WKC,PRCMNTFC
         B     ERRRET                  RETURN; IGNORE I/O REQUEST
RDNMBIG  EQU   *
         LA    WKC,1(0,WKC)            SET RECORD NO. TO USER'S NO.
         ST    WKC,RDNOSAVE            SET IN AREA TO BE CONVERTED FROM
         LA    2,RDNOSAVE              BY THE HEX OUTPUT CONVERSION RTN
         LA    3,MSG232DT              AND GO TO THE CONVERSION RTN
         BAL   0,CNVRT                 TO
         DC    X'0406'                 CONVERT IT
         LA    14,PRMS232              GIVE ERROR MESSAGE 232
         BAL   WKC,PRCMNTFC
         B     ERRRET                  RETURN; IGNORE I/O REQUEST
RECTBIG  LA    14,PRMS233              GIVE ERROR MESSAGE 233
         LR    WKA,GRX                 SAVE REG. GRX(IN CASE STANDARD
         BAL   WKC,PRCMNTFC            FIXUP IS TAKEN ,IT HAS UAT
         LR    GRX,WKA                 ENTRY ADDRESS).
         CLI   RETCD+3,1               IF RETURN CODE IS ONE THIS MEANS
         BE    ERRRET                  THE USER DOES NOT WANT OUR
*                                      STANDARD FIXUP,SO IGNORE I/O
*                                      REQUEST AS THE ONLY OTHER
*                                      POSSIBILITY
         L     WKA,MAX32                 OTHERWISE SET RECORD LENGTH TO
         BCTR  WKA,0                   MAXIMUM POSSIBLE AND CONTINUE
         B     GETUB                   AS IF NO ERROR OCCURRED
PRCMNTFC EQU   *
         L     15,VIBCOM               SET UP USER'S SAVE AREA WITH
         L     13,THRTNUSR(0,15)       CONTENTS OF REGS. 14-1 AND LINK
         MVC   12(16,13),FRTNUSR(15)   HIS SAVE AREA TO THE ONE IN
         ST    13,IBCSV+4(0,15)        IBCOM WHICH WILL BE USED FOR THE
         LA    13,IBCSV(0,15)          CALL TO THE ERROR MONITOR.
COMINTFC EQU   *
         ST    15,SAVEAREA             SAVE REG. 15
         L     15,8(0,14)              IF I/O ERROR (218) DO NOT CONVER
         CLC   0(4,15),E218            DSRN AND PUT IN MESSAGE.
         BE    CALLERR                 SINCE SYNADAF DOES THIS.
         L     3,0(0,14)               OTHERWISE CALL THE CONVERSION
         L     15,0(0,3)               ROUTINE TO PUT THE DSRN INTO
         LA    3,0(3,15)               THE LAST FOUR BYTES OF THE MSG.
         LA    2,DSRNPTR
         BAL   0,CNVRT
         DC    XL2'0404'
CALLERR  EQU   *
         LR    1,14                    PUT PARAMETER LIST ADDRESS IN
         L     15,VIHCERRM             REGISTER 1. AND LINK TO THE
         BALR  14,15                   ERROR MONITOR
         L     15,SAVEAREA             RESTORE REGISTER 15
         BR    WKC                     RETURN TO CALLER
         AGO   .DI6
.DI5     ANOP
NDADSRN  LA    1,231                   GIVE ERROR MESSAGE 231
         B     COMERRHN
NODD     LA    1,219                   GIVE ERROR MESSAGE 219
         B     COMERRHN
RDNMBIG  LA    1,232                   GIVE ERROR MESSAGE 232
         B     COMERRHN
RECTBIG  LA    1,233                   GIVE ERROR MESSAGE 233
         B     COMERRHN
COMERRHN EQU   *
         L     15,VIBCOM               MOVE USER'S REGS. 14-1 TO HIS
         L     13,THRTNUSR(0,15)       SAVE AREA AND LINK HIS SAVE AREA
         MVC   12(16,13),FRTNUSR(15)   TO THE ONE IN IBCOM WHICH WILL
         ST    13,IBCSV+4(0,15)        BE USED IN THE CALL TO THE
         LA    13,IBCSV(0,15)          'ERROR MONITOR'.
COMERHN  ST    1,ERRORNO               SAVE ERROR NUMBER IN PARAMETER
         LA    1,ADERRNO               LIST AND PUT ADDRESS OF PARAM.
         L     15,VIHCERRM             LIST INTO REG. 1 AND LINK TO
         BR    15                      THE 'ERROR MONITOR'.
.DI6     ANOP
         EJECT
***********************************************************************
*                                                                     *
*                  TERMINATION SECTION                                *
*        THE TERMINATION SECTION PERFORMS THE FOLLOWING FUNCTIONS:    *
*          1. CHECKS PENDING I/O OPERATIONS.                          *
*          2. CLOSES DIRECT ACCESS DATA SETS.                         *
*          3. FREES UNIT BLOCKS STORAGE.                              *
*                                                                     *
***********************************************************************
DASTERM  LA    GRX,UTENTRY
         LA    WKA,16
         LH    WKB,ENDT                SET FIRST DSRN
         LA    WKB,UTENTRY-8(WKB)
DSRNUSE  TM    3(GRX),X'01'            WAS THIS DSRN USED
         BO    NXTDSRN                 NO.
         TM    15(GRX),X'01'           YES. WAS THIS DSRN USED FOR DA
         BO    NXTDSRN                      NO.
         L     UBR,0(GRX)                   YES.
         TM    STATUSU,XOPEN+XOPENSM   WAS DATA SET OPENED
         BZ    FREEUB                  NO.
         L     DECBR,CURBUF
         BAL   LKA,CHECK               CHECK FOR PENDING I/O OPERATION
         TM    STATUSU,TWOBUF+XOPENSM  TWO BUFFERS IN USE
         BZ    TERMB                   NO.
         BAL   LKA,FLIPBUF             FLIP BUFFERS
         BAL   LKA,CHECK               CHECK PENDING OPERATION
TERMB    EQU   *
         LA    WKC,DCB
         FREEPOOL (WKC)                FREE THE BUFFER POOL        4598
         CLOSE ((WKC))                 CLOSE DSRN
         NI    STATUSU,FF-XOPEN-XOPENSM SET DATA SET CLOSED
FREEUB   EQU   *
         FREEMAIN  R,LV=184,A=(UBR)    FREE UNIT BLOCKS
         OI    3(GRX),X'01'            INVALIDATE THE U.B. ADDR    4598
         OI    15(GRX),X'01'           INVALIDATE DEF. FILE ADDR   4598
NXTDSRN  BXLE  GRX,WKA,DSRNUSE         CHECK NEXT DSRN, IF ANY
         EJECT
***********************************************************************
*                                                                     *
*                  NON-STANDARD RETURN ROUTINE                        *
*                                                                     *
***********************************************************************
NSRETURN ST    UBR,UBADDR                NON-STANDARD RETURN ROUTINE
         AIF   (&ERR EQ 0).DI101
         L     15,VIBCOM               STORE THE ADDRESS OF THE BUFFER
         STM   GRX,GRY,BUFPTRS(15)     AND ITS LENGTH IN IBCOM COMMUNI-
.DI101   ANOP                          CATION AREA FOR USE BY ERROR MON
         L     13,SAVEAREA+4           RESTORE USER'S REGISTERS
         LM    14,1,SAVEAREA+12        EXCEPT FOR REGS 2 AND 3 WHICH
         LM    4,12,SAVEAREA+36        CONTAIN ADDRESS OF BUFFER AND
         LR    1,0                     ITS LENGTH.
         B     6(0,1)                  NORMAL RETURN
*                                                                     *
         EJECT
***********************************************************************
*              GETBLKAD ROUTINE GETS THE BLOCK REFERENCE NUMBER       *
*              ADDRESS INTO WKA FROM DECB SPECIFIED IN DECBR          *
*                  CALLING SEQUENCE                                   *
*                       BAL   LKA,GETBLKAD                            *
***********************************************************************
GETBLKAD L     WKA,24(DECBR)           GET BLKREF ADDRESS IN WKA
         BCTR  WKA,0
         BR    LKA
***********************************************************************
*              SETBUF ROUTINE SETS BUFFER ADDRESSES OBTAINED FROM     *
*              DCB OPENING INTO THE APPROPRIATE DECB'S                *
*                  CALLING SEQUENCE                                   *
*                       BAL   LKA,SETBUF                              *
***********************************************************************
SETBUF   L     WKB,DCBBUFCB
         LA    WKB,8(0,WKB)            GET BUFFER ADDR. FROM BUFCB 4598
         ST    WKB,DECBABUF            STORE IT IN DECBA
         CLI   DCBBUFNO,ONE            DOUBLE-BUFFERING
         BE    RSTBUFL                 NO.
         AH    WKB,DCBBUFL             YES.GET BUFFERB ADDR
         ST    WKB,DECBBBUF                STORE IT IN DECBB
RSTBUFL  MVC   DCBBUFL(2),DCBBLKSI     RESET BUFLEN IN CASE OF ADJUSTED
         BR    LKA
***********************************************************************
*                  FLIPBUF ROUTINE FLIPS BUFFERS                      *
*                  CALLING SEQUENCE                                   *
*                       BAL   LKA,FLIPBUF                             *
***********************************************************************
FLIPBUF  L     DECBR,NXTBUF
         MVC   NXTBUF(4),CURBUF        FLIP BUFFERS
         ST    DECBR,CURBUF
         BR    LKA
         EJECT
***********************************************************************
*              GETUAT ROUTINE GETS THE DSRN WHICH SPECIFIED IN GRX    *
*              ENTRY IN THE UNIT ASSIGNMENT TABLE INTO GRX            *
*                   CALLING SEQUENCE:                                 *
*                             L   GRX,DSRN                            *
*                             BAL LKA,GETUAT                          *
***********************************************************************
GETUAT   EQU   *
         AIF   (&ERR EQ 0).DI110
         ST    GRX,DSRNPTR             SAVE DSRN FOR OUR USE
         L     1,VIBCOM                AND FOR IBCOM'S USE
         ST    GRX,DSRNOF(0,1)
.DI110   ANOP
         LTR   GRX,GRX                 IS DSRN POSITIVE
         BC    12,DSRNERR              NO.  ERROR
         BCTR  GRX,0                   DECREMENT DSRN BY ONE
         SLA   GRX,4                   MULTIPLY DSRN BY 16
         CH    GRX,ENDT                IS DSRN TOO BIG
         BNL   DSRNERR                 YES. ERROR
         LA    GRX,UTENTRY(GRX)        GET UAT POINTER IN GRX
         BR    LKA                     RETURN TO CALLER
DSRNERR  LA    LKA,0(0,LKA)            CLEAR HI-ORDER BYTE
         C     LKA,AIBCNTRY            IF CALLED FROM DEFINE FILE PART
         AIF   (&ERR EQ 0).DI9
         LA    14,PRMS220
         BL    DFERR                   BRANCH
         BAL   WKC,PRCMNTFC            ELSE GO TO PRCOMINTFACE
         B     ERRRET                  THEN RETURN; IGNORE I/O REQUEST
DFERR    EQU   *
         BAL   WKC,COMINTFC            IF FROM DEFINE FILE CALL COMNTFC
         USING DIOCS#,15
         B     DETEST                  THEN RETURN TO DEFINE FILE SECT.
         DROP  15
         AGO   .DI10
.DI9     ANOP
         LA    1,220
         BL    COMERHN                 GO TO COMERHN
         B     COMERRHN                ELSE GO TO COMERRHN
.DI10    ANOP
         EJECT
***********************************************************************
*              BLANKBUF ROUTINE IS USED TO BLANK OUT A BUFFER AREA    *
*              SPECIFIED IN WKB, THE LENGTH OF THE BUFFER IS PASSED   *
*              VIA WKA.                                               *
*                  CALLING SEQUENCE                                   *
*                          L    WKA,BUFLEN                            *
*                          L    WKB,BUFADDR                           *
*                          BAL  LKA,BLANKBUF                          *
***********************************************************************
BLANKBUF MVI   0(WKB),X'40'
BLKBUF   BCTR  WKA,0
         LTR   WKA,WKA                                             4642
         BCR   8,LKA                                               4642
MOVECHAR CH    WKA,TWFVSX
         BH    MOVEMOR
         BCTR  WKA,0
         EX    WKA,MVC
         BR    LKA
MOVEMOR  MVC   1(256,WKB),0(WKB)
         SH    WKA,TWFVSX
         LA    WKB,256(WKB)
         B     MOVECHAR
MVC      MVC   1(1,WKB),0(WKB)
***********************************************************************
*              ZEROBUF ROUTINE IS USED TO ZERO OUT A BUFFER AREA      *
*              SPECIFIED IN WKB, THE LENGTH OF THE BUFFER IS PASSED   *
*              VIA WKA.                                               *
*                  CALLING SEQUENCE:                                  *
*                          L    WKA,LENGTH                            *
*                          L    WKB,BUFADDR                           *
*                          BAL  LKA,ZEROBUF                           *
***********************************************************************
ZEROBUF  MVI   0(WKB),X'00'
         B     BLKBUF
***********************************************************************
*              CHECK ROUTINE IS USED TO CHECK FOR THE COMPLETION      *
*              OF A READ OR WRITE OPERATION AND TO DETECT ERRORS      *
*                   CALLING SEQUENCE                                  *
*                             BAL LKA,CHECK                           *
***********************************************************************
CHECK    TM    STATUSA,CKED            I/O  PENDING
         BCR   1,LKA                   NO. RETURN
         LA    1,0(0,DECBR)
         CHECK (1)
         OI    STATUSA,CKED            SET STATUS TO CHECK
         TM    STATUSU,XERR            HAS ERROR OCCURED
         BO    ERRETURN                YES. ERROR RETURN
         BR    LKA
ERRETURN NI    STATUSU,FF-XERR         TURN OFF ERROR BIT
         AIF   (&ERR EQ 1).DI11
         LR    1,WKB                   GET ERROR NUMBER IN CORRECT REG.
         B     COMERRHN                THEN GO GIVE MESSAGE
         AGO   .DI12
.DI11    ANOP
         LR    14,WKB                  PUT PARAMETER LIST ADDR IN RIGHT
         BAL   WKC,PRCMNTFC            REGISTER AND OUTPUT MESSAGE
         B     ERRRET                  RETURN; IGNORE I/O REQUEST
.DI12    ANOP
SYNADR   EQU   *
         OI    STATUSU,XERR            SET ERROR BIT IN UB         4659
         TM    1(DECBR),X'40'          INCONSISTENT RECORD LENGTH
         BO    WRLEN                   YES.
         TM    2(DECBR),X'10'          REFERENCED BEYOND DATA SET
         BO    NOREC                   YES.
         TM    1(DECBR),X'80'          TRY TO ACCESS UNFORMATTED REC
         BO    NOREC                   YES.                        4659
         LR    LKA,14                  NO, SAVE RETURN REGISTER
         TM    STATUSU,XOPENSM         IF OPEN FOR BSAM GIVE
         BZ    BDAMSYN                 BSAM FORM OF SYNADAF MACRO
         SYNADAF ACSMETH=BSAM
         B     SYNCOMON                AND THEN GO TO HANDLE ITS OUTPUT
BDAMSYN  EQU   *                       ELSE GIVE BDAM FORM OF SYNADAF
         SYNADAF    ACSMETH=BDAM                                   4659
SYNCOMON EQU   *
         LR    WKB,1               SAVE ADDRESS OF SYNADAF MESSAGE 4659
         GETMAIN R,LV=112              GET STORAGE FOR MESSAGE
         AIF   (&ERR EQ 0).DI20
         ST    1,PRMS218               STORE ADDRESS OF MESSAGE IN
         AGO   .DI21                   PARAMETER LIST
.DI20    ST    1,ADERRNO               SAVE MESSAGE ADDRESS
.DI21    ANOP
         MVC   4(27,1),MSG218          MOVE HEADING TO MESSAGE
         MVC   31(77,1),50(WKB)        MOVE SYNADAF MESSAGE TO BUFFER
         LA    WKB,104                 AREA AND PUT LENGTH IN AS FIRST
         ST    WKB,0(0,1)              WORD OF MESSAGE.
         SYNADRLS                                                  4659
         AIF   (&ERR EQ 0).DI30
         LA    WKB,PRMS218             GET ADDRESS OF 218 PARAMETER LIS
         ST    DECBR,PRMS218+16        PUT DECB ADDRESS IN PARAM. LIST
         MVI   PRMS218+16,X'80'        SET LAST PARAMETER INDICATION
         AGO   .DI31
.DI30    LA    WKB,218                 INDICATE MESSAGE 218 TO BE GIVEN
.DI31    ANOP
         BR    LKA                     RETURN
         AIF   (&ERR EQ 0).DI13
NOREC    EQU   *
         L     2,24(0,DECBR)           GET RECORD NUMBER GIVEN TO BDAM
         BCTR  2,0                     DECREMENT ADDRESS OF RECORD NUMB
         L     2,0(0,2)                SO THAT IT POINTS TO A WORD BNDR
         LA    2,1(0,2)                PICK UP RECORD NUMBER AND INCR-
         ST    2,RDNOSAVE              EMENT BY ONE. SAVE IN WORK AREA
         LA    2,RDNOSAVE              GO TO CONVERSION ROUTINE TO
         LA    3,MSG232DT              PUT RECORD NUMBER INTO MESSAGE
         BAL   0,CNVRT
         DC    X'0406'
         NI    STATUSA,FF-WROT-RDIN    INDICATE NO RECORD IN BUFFER
         LA    WKB,PRMS232             SET UP TO GIVE MESSAGE 232
         BR    14                      RETURN
WRLEN    EQU   *
         ST    DECBR,PRMS237+16        STORE DECB ADDRESS IN PARAMETER
         MVI   PRMS237+16,X'80'        LIST AND RESET LAST PARAM. IND.
         LA    WKB,PRMS237             SET UP TO GIVE MESSAGE 237
         BR    14                      RETURN
CNVRT    EQU   *
         L     15,VIBCOM
         EX    0,82(0,15)
         BR    1
         AGO   .DI14
.DI13    ANOP
NOREC    LA    WKB,232                 SET UP TO GIVE MESSAGE 232
         BR    14
WRLEN    LA    WKB,237                 SET UP TO GIVE MESSAGE 237
         BR    14
.DI14    ANOP
         EJECT
***********************************************************************
*                  DCB SKELETON                                       *
***********************************************************************
DCBSKLTN DCB   DSORG=DA,MACRF=(RIC,WI),DDNAME=FTXXF001,RECFM=F,    4598X
               SYNAD=SYNADR,EXLST=EXLIST,OPTCD=R
         EJECT
***********************************************************************
JFCB     DS    0F
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL7'00'
JFCBIND2 DC    XL1'00'
JFCBUFNO DC    XL1'00'
         DC    XL1'00'
JFCBUFL  DC    XL2'00'
         DC    XL6'00'
JFCDSORG DC    XL2'00'
JFCRECFM DC    XL1'00'
JFCOPTCD DC    XL1'00'                                            12408
JFBLKSI  DC    XL2'00'
JFCLRECL DC    XL2'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL8'00'
         DC    XL6'00'
***********************************************************************
EXLIST   DC    X'87'
         DC    AL3(JFCB)
         EJECT
*                  ADDRESS CONSTANTS                                  *
*ACONS   DC        V(IHCUATBL)                                     V1L2
VACONS   DC        V(UNIT@)                                        V1L2
VIBCOM   DC    V(IBCOM#)
*FDIOCS  DC        V(FDIOCS#)                                      V1L2
AIBCNTRY DC    A(IBCENTRY)
*                  WORK AREAS                                         *
DOUBLE   DC    D'0'
SAVEAREA DC    2F'0'
         DC    A(BDAMSAVE)
         DC    15F'0'
SAVE0    EQU   SAVEAREA+20
SAVEGRX  EQU   SAVEAREA+28
SAVER3   EQU       SAVEAREA+32                                     V1L2
BDAMSAVE DC    F'0'
         DC    A(SAVEAREA)
         DC    16F'0'
UBADDR   DS    F
UBRDJFCB DS    F                       POINTER TO UB AT LAST RDJFCB3439
MAX24B   DS    0F
         DC    X'01000000'
ASSOVAR  DC    F'0'
RDNOSAVE DC    F'0'
MAX32K   DC    F'32761'
TWFVSX   DC    H'256'
MIN16    DC    H'16'
*IHCERRM DC        V(IHCERRM)                                      V1L2
VIHCERRM DC        V(IHCER@)                                       V1L2
FINDSW   DC    X'00'
NOBUFF   DC    X'00'
*                  IMMEDIATE CONSTANTS                                *
OUTPUT   EQU   X'0F'
FORMAT   EQU   X'F0'
NEW      EQU   X'C0'
ONE      EQU   X'01'
TWO      EQU   X'02'
VDSRN    EQU   X'01'
XFIND    EQU   X'40'
TWOBUF   EQU   X'20'
RDIN     EQU   X'80'
WROT     EQU   X'40'
CKED     EQU   X'20'
XOPEN    EQU   X'10'
XERR     EQU   X'40'
FF       EQU   X'FF'
XOPENSM  EQU   X'80'
THRTNUSR EQU   184
FRTNUSR  EQU   124
IBCSV    EQU   X'C4'
SYNOFFS  EQU   X'110'
BUFPTRS  EQU   X'114'
DSRNOF   EQU   60
         EJECT
         AIF   (&ERR EQ 0).DI4
*        INFORMATION NECESSARY FOR EXTENDED ERROR HANDLING
MAX32    DC    F'32000'
PRMS218  DC    A(MSG218)               ADDRESS OF MESSAGE
         DC    A(RETCD)                ADDRESS OF RETURN CODE
         DC    A(E218)                 ADDRESS OF ERROR NUMBER
         DC    A(DSRNPTR)              ADDRESS OF UNIT NUMBER
         DC    XL1'80'                 LAST PARAMETER INDICATION
         DC    AL3(0)                  ADDRESS OF DECB
PRMS219  DC    A(MSG219)
         DC    A(RETCD)
         DC    A(E219)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS220  DC    A(MSG220)
         DC    A(RETCD)
         DC    A(E220)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS231  DC    A(MSG231)
         DC    A(RETCD)
         DC    A(E231)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS232  DC    A(MSG232)
         DC    A(RETCD)
         DC    A(E232)
         DC    A(DSRNPTR)
         DC    XL1'80'
         DC    AL3(RDNOSAVE)
PRMS233  DC    A(MSG233)
         DC    A(RETCD)
         DC    A(E233)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS234  DC    A(MSG234)
         DC    A(RETCD)
         DC    A(E234)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS235  DC    A(MSG235)
         DC    A(RETCD)
         DC    A(E235)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
PRMS236  DC    A(MSG236)
         DC    A(RETCD)
         DC    A(E236)
         DC    XL1'80'
         DC    AL3(DSRNPTR)
         EJECT
PRMS237  DC    A(MSG237)
         DC    A(RETCD)
         DC    A(E237)
         DC    A(DSRNPTR)
         DC    XL1'80'
         DC    AL3(0)                  DECB POINTER
E218     DC    F'218'
E219     DC    F'219'
E220     DC    F'220'
E231     DC    F'231'
E232     DC    F'232'
E233     DC    F'233'
E234     DC    F'234'
E235     DC    F'235'
E236     DC    F'236'
E237     DC    F'237'
RETCD    DC    F'0'
DSRNPTR  DC    F'0'
         EJECT
.DI4     ANOP
MSG218   DC    C'IHC218I DIOCS - I/O ERROR  '
         AIF   (&ERR EQ 0).DI100
MSG219   DC    A(MSG219E-MSG219B)
MSG219B  DC    C'IHC219I DIOCS - MISSING DD CARD FOR UNIT'
         DC    C'    '
MSG219E  EQU   *
MSG220   DC    A(MSG220E-MSG220B)
MSG220B  DC    C'IHC220I DIOCS - UNIT NUMBER OUT OF RANGE. UNIT='
         DC    C'    '
MSG220E  EQU   *
MSG231   DC    A(MSG231E-MSG231B)
MSG231B  DC    C'IHC231I DIOCS - DIRECT ACCESS STATEMENT USED FOR SEQUEX
               NTIAL DATA SET'
         DC    C'    '
MSG231E  EQU   *
MSG232   DC    A(MSG232E-MSG232B)
MSG232B  DC    C'IHC232I DIOCS - RECORD NUMBER'
MSG232DT DC    C'      '
         DC    C' OUT OF RANGE ON UNIT'
         DC    C'    '
MSG232E  EQU   *
MSG233   DC    A(MSG233E-MSG233B)
MSG233B  DC    C'IHC233I DIOCS - RECORD LENGTH GREATER THAN 32K-1 SPECIX
               FIED FOR UNIT'
         DC    C'    '
MSG233E  EQU   *
MSG234   DC    A(MSG234E-MSG234B)
MSG234B  DC    C'IHC234I DIOCS - ATTEMPT TO DEFINE THE OBJECT ERROR UNIX
               T AS A DIRECT ACCESS DATA SET. UNIT='
         DC    C'    '
MSG234E  EQU   *
MSG235   DC    A(MSG235E-MSG235B)
MSG235B  DC    C'IHC235I DIOCS - DEFINE A DATA SET WHICH HAS BEEN USED X
               SEQUENTIALLY AS A DIRECT ACCESS DATA SET. UNIT='
         DC    C'    '
MSG235E  EQU   *
MSG236   DC    A(MSG236E-MSG236B)
MSG236B  DC    C'IHC236I DIOCS - READ REQUEST FOR AN UNCREATED DATA SETX
                ON UNIT'
         DC    C'    '
MSG236E  EQU   *
MSG237   DC    A(MSG237E-MSG237B)
MSG237B  DC    C'IHC237I DIOCS - INCORRECT RECORD LENGTH SPECIFIED FOR X
               UNIT'
         DC    C'    '
MSG237E  EQU   *
         AGO   .DI8
.DI100   ANOP
ADERRNO  DC    A(0)
         DC    F'0'
         DC    XL1'80'
         DC    AL3(ERRORNO)
ERRORNO  DC    F'0'
ERREXIT  DC    F'0'
.DI8     ANOP
         EJECT
***********************************************************************
*                  UNIT ASSIGNMENT TABLE SKELETON                     *
***********************************************************************
UAT      DSECT
BYTES    DS    H
ENDT     DS    H
ERDSRN   DS    F
UTENTRY  DS    F
         EJECT
***********************************************************************
*                  UNIT BLOCK                                         *
***********************************************************************
UB       DSECT
IOTYPE   DS    X
STATUSU  DS    X
         DS    2X
RECNUM   DS    F
CURBUF   DS    F
STATUSA  EQU   CURBUF
BLKREFA  DS    F
NXTBUF   DS    F
STATUSB  EQU   NXTBUF
BLKREFB  DS    F
*                                                                     *
DECBA    DS    7F
DECBALEN EQU   DECBA+6
DECBABUF EQU   DECBA+12
DECBAREF EQU   DECBA+24
DECBB    DS    7F
DECBBLEN EQU   DECBB+6
DECBBBUF EQU   DECBB+12
DECBBREF EQU   DECBB+24
*                                                                     *
DCB      DS    26F
DCBDDNAM EQU   DCB+40
DCBDVTBL EQU   DCB+12                                             46146
DCBTRBAL EQU   DCB+18                                             12408
DCBBUFNO EQU   DCB+20
DCBBUFCB EQU   DCB+20
DCBBUFL  EQU   DCB+24
DCBDSORG EQU   DCB+26
DCBRECFM EQU   DCB+36                                             12408
DCBMACR  EQU   DCB+50
DCBOPTCD EQU   DCB+52                                              4596
DCBBLKSI EQU   DCB+62
DCBNCP   EQU   DCB+72
*        MEND                                                      V1L2
         END
