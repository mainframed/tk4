ARTH     TITLE     'ARITH     ARITHMETIC STATEMENT PROCESSOR'
         MACRO
&NAME    ACENT     &N
         CNOP      0,4
&NAME    STM       R13+1,R13-1,12(R13)
         BAL       R11,CENT
         USING     *,R11
         OFFSET    DC,A,&N
         USING     &N,R13
         OFFSET    LRAL,R11,ADENT
         USING     ARITH+8,R11
         MEND
         MACRO
&NAME    AFILL     &OP1,&IN1,&P1,&OP2,&IN2,&P2
         GBLC      &OFFSET
         AIF       (N'&IN1+N'&P1+N'&IN2+N'&P2 EQ 0).N1
         USING     ASAND,R15
.N1      ANOP
&NAME    DC        0H'0'
         AIF       (N'&OP1 EQ 0).M2
         MVN       ZR1+&OP1.(1),ARITOP
.M2      AIF       (N'&IN1 EQ 0).M3
         AIF       ('&OFFSET' EQ 'NO').M3
         MVN       ZR1+&IN1.(1),AINDEX
.M3      AIF       (N'&P1 EQ 0).M5
         MVC       ZR1+&P1.(2),APOINTER
.M5      AIF       (N'&OP2 EQ 0).M6
         MVN       ZR1+&OP2.(1),ARITOP
.M6      AIF       (N'&IN2 EQ 0).M7
         AIF       ('&OFFSET' EQ 'NO').M7
         MVN       ZR1+&IN2.(1),AINDEX
.M7      AIF       (N'&P2 EQ 0).M8
         MVC       ZR1+&P2.(2),APOINTE2
.M8      MEND
         MACRO
&NAME    AOFFSET   &OP,&REG,&ADDR
&NAME    ST        &REG,&ADDR
         MEND
         MACRO
&NAME    AOUT1     &N
&NAME    LA        R2,&N-1
         BAL       R15,ACHKOP
         MEND
         MACRO
&NAME    AOUT2     &N,&M
&NAME    LA        R2,&N-1
         B         ACHSIGN
         MEND
         MACRO
&NAME    AOUT3     &N,&M
&NAME    LA        R2,&N-1
         B         ARITR1
         MEND
         MACRO
&NAME    AOUT6     &N
&NAME    LA        R2,&N-1
         B         ACHSIGNS
         MEND
         MACRO
&NAME    COLUMN    &A
         AIF       (K'&A LT 3).R1
&NAME    DC        XL1'FF'
         MEXIT
.R1      ANOP
&NAME    DC        AL1(&A-1)
         MEND
         MACRO
&NAME    COMB      &A
&NAME    DC        AL1(&A)
         MEND
         MACRO
         COMBINE   &N,&CODE,&RTN
         DC        AL2(ARICD&CODE-ARICD000)
         DC        AL2(ARTN&RTN-ARTN000)
         MEND
         MACRO
         LROW      &N
         DC        AL1((&N-1)*3)
         MEND
         MACRO
&NAME    ROW       &A
         AIF       (K'&A LT 3).R1
&NAME    DC        XL1'FF'
         MEXIT
.R1      ANOP
&NAME    DC        AL1((&A-1)*12)
         MEND
         PRINT     OFF
         COPY      OPTIONS
         $PUNCH    ARITH                                           DVS2
         ENTRY     ARITH
         ENTRY     ACALL
         ENTRY     GIFIF
         ENTRY     IFLOG
         ENTRY     ARECNO
         EXTRN     LASFE
         EXTRN     DCSTN2
         EXTRN     LASFR
         EXTRN     GIF
&DECK    SETC      'ARITH'
         COPY      EXTRN
         COPY      CDEFN
STARTA   DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
         PRINT     ON,NOGEN
P        EQU       0
P1       EQU       0
P2       EQU       0
I        EQU       0
I1       EQU       0
I2       EQU       0
LOGICOP  EQU       X'10'
RELOP    EQU       X'20'
ARITHOP  EQU       X'40'
COMPARE  EQU       X'09'
ARERROR  EQU       X'00'
ARBASE   EQU       X'A0'
ARTEMP   EQU       X'A2'
ARNAME   EQU       X'A3'
ARSTNOCN EQU       X'A4'
ARHOLL   EQU       X'A5'
ARCHAR   EQU       X'A5'
ARMEMBR  EQU       X'A8'
ARCONST  EQU       X'A9'
ARR1     EQU       X'AA'
ARF0     EQU       X'AB'
ARAYNAME EQU       X'AC'
U1       EQU       X'10'
ROBJ     EQU       RO
EQSW     EQU       X'80'
CALLSW   EQU       X'40'
DATASW   EQU       X'20'
ASFSW    EQU       X'10'
LOGIFSW  EQU       X'08'
ARITIFSW EQU       X'04'
INPUTSW  EQU       X'02'
OUTPUTSW EQU       X'01'
RCHAR    OFFSET    EQU,R3,R15,OBJECT
BLANK    EQU       X'40'
L1       EQU        1
L2       EQU        1
         EJECT
*        SAVE AREA CSECT - ALL NON-RE-ENTRANT STUFF IS IN HERE
DSAVER   CSECT
DLIFSAVE DS        18F
DASAVE   DS        18F
ASNXTMP  DS        D                   NEXT TEMP FOR FIXED POINT
*                                      THEN FLOATING POINT
ASTMXTMP DS        D                   STORE MAX TEMP FOR PROGRAMME
*                                      WHILE PROCESSING ASF
ASAVE1   DS        4F
ASAVE4   DS        4F
****************************************************
         AIF       ('&WATTYPE' EQ 'DISTR').ASAVE1
ASAVER9  DS        F
.ASAVE1  ANOP
****************************************************
ALOGIFST DS        F
ALOGIFS1 DS        F                   PLACE TO STORE SETSTAK CODE
ALIFSAVE DS        F
ASYMENT  DS        F
ASTEMP1  DS        F
ARITSW   DS        0F
ASWAPSW  DS        X                   SWAP SWITCH
ARITOP   DS        X                   SUFFIX OF OPERATOR
ARELOPSV DS        X                   RELATIONAL OPERATOR
ARIMODE  DS        X                   MODE OF RESULT OF ARITH OP.
ADUMCODE DS        6F
ADUMCOD2 DS        8F                                              V1L4
ASGPR1   DS        F                   STATUS OF R1.  CONTAINS
*                                      A(ENTRY USING R1 - START) IF R1
*                                      IS BUSY, AND 1 IN BIT 31 IF FREE
ASFPR0   DS        F                   GIVES STATUS OF F0 IN SAME WAY
*  OPERAND TABLE
ASAND1   DS        0F                  TABLE FOR STATUS OF OPERAND 1
ASAND1AD DS        F                   STACK ADDRESS
ASAND1CD DS        X                   CODE
ASAND1MD DS        X                   MODE
ASAND1LN DS        X                   LENGTH
AIN1     DS        X                   INDEX
APOIN1   DS        H                   PRIMARY POINTER
APOIN12  DS        H                   SECONDARY POINTER
ASANDNO1 DS        X                   NUMBER OF OPERAND (1)
ASAND2   DS        0F                  TABLE FOR OPERAND 2
ASAND2AD DS        F
ASAND2CD DS        X
ASAND2MD DS        X
ASAND2LN DS        X
AIN2     DS        X
APOIN2   DS        H
APOIN22  DS        H
ASANDNO2 DS        X                                    (2)
AMLTEQSW DS        X              SWITCH FOR MULTIPLE ASSIGNMENT
AEQUIVCD DS        2H
ASABL    DS        H                   BACKWARDS LINK
ACHARL1  DS        X
ACHARL2  DS        X
AERRSW   DS        X                   ERROR CONTINUE SWITCH
AUNDEFSW DS        X
ACALLSW  DS        X
ASFSAVE  EQU       ALOGIFST            PRINTED TWICE FOR S/R NAMES
DSAVEND  DS        0X
         EJECT
*      OTHER DSECTS USED BY ARITH
ASTACK   DSECT
ALINK    DS        H
AOP      DS        C
ACODE    DS        C
AB1      DS        C
AB2      DS        C
APTR     DS        H
         SPACE
ALTSTACK DSECT
ALTLINK  DS        H
ALTOP    DS        C
ALTCODE   DS       C
ALTB1    DS        C
ALTB2    DS        C
ALTPTR   DS        H
         SPACE
ZRCHAR   DSECT
         SPACE
ASAND    DSECT
ASANDADD DS        F
ASANDCD  DS        C
ASANDMD  DS        C
ASANDLN  DS        C
AINDEX   DS        C
APOINTER DS        H
APOINTE2 DS        H
ASANDNO  DS        C
         EJECT
ARITHCS  CSECT
*  LEFT TO RIGHT SYNTAX AND LOOKUP SCAN OF INPUT
         PRINT     ON,GEN                                          V1L5
         $FREE     R14                                             V1L5
         $FREE     R1,R2,R3,R4,R5,R6,R7,R8,R14,R15                 V1L5
ARITH    CENT      DASAVE
         USING     ASTACK,RS
         USING     DASAVE,R13
         MVI       AERRSW,0
         MVI       ACALLSW,0
ARITH1   SR        R0,R0
**********************************************************************
         AIF       ('&WATTYPE' EQ 'DISTR').ARITH2
*       DEBUG VERSION ONLY
         ST        RS,ASAVER9          SAVE BEGINNING OF STACK TO DUMP
.ARITH2  ANOP
**********************************************************************
ARITH2   LD        F0,ASATEMP
         STD       F0,ASNXTMP
         MVC       ASAND1CD(28),AINIT  INITIALLIZE SAVE AREA - NEW JOB
         MVC       AUNDEFSW(1),CUNDEFSW
ADS6     STH       R0,ASABL            SET UP 'BACKWARDS LINK'
         SR        R2,R2
ADS3     IFNOT     (AOP,OFF,LOGICOP+RELOP+ARITHOP),ADS30
         IC        R2,AOP
         N         R2,KF15
         IC        R2,AOPTB(R2)
         BAL       R14,APHI(R2)
ADS30    IF        (ACODE,OFF,CHOLL+CLOGC+CCONS),ADSNAM
         IF        (ACODE,GT,CLOGC),ADS25
         BL        ADSHOL              HOLLERITH
ADSLOG   MVI       AB1,LOG4            LOGICAL CONSTANT ROUTINE
         MVI       ACODE,ARCONST
         B         ADS1
*   HOLLERITH ROUTINE
ADSHOL   MVI       ACODE,ARCHAR
         MVI       AB1,CHARN           MAKE A CHARACTER*N CONSTANT
         LH        R0,APTR
         S         R0,CSYMBASE
         STH       R0,APTR
         B         ADS1                OK RETURN
*   CONSTANT ROUTINE
ADSCON   CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         BE        ADSCON1
         LA        R14,ADS9
         B         AERRCN6
ADSCON1  SH        RS,ASABL            BACK UP
         LH        R0,ALINK
         MVC       ALINK(2),ASABL
         STH       R0,ASABL
ADS25    IF        (AOP,EQ,PLUS),ADS24
         IF        (AOP,NE,MINUS),ADS9
ADS24    CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         BNE       ADS9
         SH        RS,ASABL
         IF        (AOP,GE,ARITHOP),ADS27
         IF        (AOP+4,NE,MINUS),ADS26
         LA        R14,ALINK+4         IF A NEGATIVE CONSTANT, CHECK
         USING     ALTSTACK,R14        FOR A ** AS ONE OF THE NEXT
         LA        R2,4                FOUR OPERATORS IN THE STACK.
ADSC2    AH        R14,ALTLINK         IF ONE EXISTS, CHANGE THE
         IF        (ALTOP,EQ,TERM),ADS26    NEGATIVE CONSTANT TO A
         IF        (ALTOP,NE,DSTAR),ADSC1  CONSTANT WITH A UNARY MINUS
ADS27    AH        RS,ASABL            RE-ADVANCE STACK POINTER
         B         ADS9
         $FREE     R14                                             V1L5
ADSC1    BCT       R2,ADSC2
ADS26    LH        R0,ALINK
         MVC       ALINK(2),ASABL
         STH       R0,ASABL
ADS9     EQU       *
         BAL       R14,COLCONST        COLLECT CONSTANT
         STC       R0,AB1
         MVI       ACODE,ARCONST
         STH       R3,APTR
         IF        (AOP,NE,PHI),ADS1
         CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         LA        R14,ADS1
         BE        ATWOPHIS
         TM        AERRSW,X'01'                                    V1L3
         BCR       1,R14               ERROR ALREADY GIVEN         V1L3
         MVI       ACODE,X'80'         FOR ERROR IN CASE           V1L3
         B         AERRSX0
*     NAME ROUTINE
ADSNAM   IF        (ACODE,EQ,PHI),ADS1 IS OPERAND PHI
         LOOKUP    VARIABLE
         USING     VLIST,R15
         MVI       ACODE,ARNAME
         LH        R4,VB1
         STH       R4,AB1              PUT B1 AND B2 IN STACK
         ST        R15,ASYMENT         STORE A(SYMTAB ENTRY)
         STH       R3,APTR
         $FREE     R15                                             V1L5
         LR        R15,RS
         AH        R15,ALINK
         USING     ALTSTACK,R15
         IF        (ALTOP,NE,LBRK),ADSNAM1
         MVI       ALTOP,FBRK
         $FREE     R15                                             V1L5
         MVI       ACODE,ARMEMBR
ADSNAM1  IFNOT     (AB1,VAR),ADSFN
         IF        (AB1,DIM),ADSARR
ADSVAR   IF        (ACODE,EQ,ARMEMBR),ADSVAR2
         IF        (AB1,ON,CHAR1),ADSCHAR
         IF        (AB2,OFF,B2COM+B2EQV),ADSVAR11          COM. OR EQ.
         MVI       ACODE,ARMEMBR       YES CHANGE CODE
ADSVAR11 IF        (AB2,OFF,B2AS),ADS2
* AS-3  WARNING  -  ASSIGNED VARIABLE USED IN AN ARITHMETIC EXPRESSION
AERRAS3  $ERROR    (WARN,GO,3,RELRS),ADS2                          V1L5
ADSVAR2  IF        (AB2,NOFF,USAGE+B2DO+INIT+B2COM+B2EQV),AERRVA8
         IF        (AB1,ON,CHAR1),AERRVA8        NO CHAR. FUNCTIONS
         NI        AB1,CHAR1+COMP16    CHANGE TO FUNCTION
         OI        AB1,FUNC
         NI        AB2,ALL-U1
         L         R15,ASYMENT                                     V1L5
         USING     VLIST,R15
         MVC       VB3(2),XISN         STORE ISN IN SYMTAB
         IF        (CADSSW,ON,EQSW),ADS21   IS EQ SW ON ?          V1L5
         IF        (AOP,NE,TERM),ADS21                             V1L5
         IF        (AB2,ON,PARM),AERRVA81
         OI        AB2,TYPE+ASF        CHANGE TO ASF
         LH        R0,AB1              UPDATE SYMTAB ENTRY
         STH       R0,VB1
         MVI       ACODE,ARMEMBR
         GETSYM    8
         LR        R4,R15              SET UP P(# TEMPS) FOR ASF
         SR        R4,R6
         STH       R4,VLIST+10         STORE IN SYMTAB
         $FREE     R15                                             V1L5
         MVC       ASTMXTMP(8),CANXTMP STORE # OF TEMPS FOR PROGRAM
         MVI       ASNXTMP+3,X'50'     SET UP # OF TEMPS FOR ASF   V1L1
         MVC       CANXTMP(8),ASNXTMP  SET UP MAX  TEMPS FOR ASF
         IF       (ALIFSW,NOFF,X'FF'),AERRSF2
ASFCH2   IF        (CURSTNO,EQ,X'FF'),ASFCH3
         OFFSET    LRAL,R15,CSTNOLK
         USING NLIST,R15
         NI        NB1,ALL-EXEC        TURN OFF EXEC BIT
         IF        (NB1,ON,REF),AERRSF1
         $FREE     R15                                             V1L5
ASFCH3   OI        CADSSW,ASFSW        TURN ON ASF BIT
         MVI       CASF1,1
         IF        (CASF2,OFF,2),ASFCH4
*  SF-4   ASF FOLLOWS FIRST EXECUTABLE STATEMENT
AERRSF4  $ERROR    (WARN,SF,4)                                     V1L5
ASFCH4   L         R3,ADLASFE
         LA        R14,ADS6
         ST        RS,ASFSAVE          SAVE VALUE OF RS            V1L5
         OFFSET    BR,R3               CALL LANDR'S ASF PROCESSOR  V1L5
ADSFN    IF        (AB1,OFF,X'C0'),AERRCM4    SHOULD BE (AB1,OTHR)
         IF        (AB2,ON,X'02'),AERRSR3
         IF        (ACODE,EQ,ARMEMBR),ADSFN1
         IF        (AB2,ON,X'01'),AERRSF5
         IF       (ACALLSW,NE,X'01'),ADSARR1
         B         ADS1
ADSFN1   NI        AB2,ALL-U1
         IFNOT    (AB1,SUBR),ADS2
         IF        (CADSSW,OFF,CALLSW),AERRVA6
         IF        (AOP,EQ,TERM),ADS1
ADSARR   IF        (ACODE,NE,ARMEMBR),ADSARR1                      V1L1
         IF        (CADSSW,OFF,DATASW),ADS2                        V1L1
         IF        (AB2,NON,PARM),ADS2                             V1L1
         IF        (AOP,NE,TERM),ADS2                              V1L1
         MVI       AERRSW,1                                        V1L1
         $ERROR    (BOOT,DA,2,RELRS),ADS2                          V1L5
ADS21    TM        AB2,TYPE            HAS THE FUNCTION BEEN TYPED V1L5
         BO        ADS2                YES                         V1L5
         USING     VLIST,R15                                       V1L5
         MVC       AFTDUMMY(6),VNAME   PUT THE NAME IN THE DUMMY   V1L5
         STM       R5,R7,XRUPTSV       SAVE R5-R7                  V1L5
         L         R6,VNAME            GET THE NAME                V1L5
         SR        R7,R7                                           V1L5
         LR        R0,R7                                           V1L5
ALHIGH   IC        R0,AFTDUMMY+8(R7)   GET THE HIGH POINTER        V1L5
         LR        R7,R0               SAVE IT                     V1L5
         MH        R7,KH12             SET UP THE INDEX            V1L5
         CL        R6,AFTDUMMY(R7)     IS THIS THE ONE ?           V1L5
         BH        ALHIGH              NO, IT'S LOWER              V1L5
         BE        ALEQUAL             YES                         V1L5
ALLOW    IC        R0,AFTDUMMY+7(R7)   GET THE LOW POINTER         V1L5
         BL        ALHIGH+4            IT'S LOWER                  V1L5
ALEQUAL  LA        R5,AFTDUMMY(R7)     POINT AT THE NAME           V1L5
         CLC       VNAME+4(2),4(R5)    CHECK THE LAST 2 CHARACTERS V1L5
         BH        ALHIGH              HIGHER                      V1L5
         BL        ALLOW               LOWER                       V1L5
         C         R5,=A(AFTDUMMY)     IS IT THE DUMMY ?           V1L5
         BE        ARESTORE            YES                         V1L5
         OC        AB1(1),6(R5)        SAVE THE TYPE               V1L5
ARESTORE LM        R5,R7,XRUPTSV       RESTORE R5-R7               V1L5
         B         ADS2                GO PROCESS THE FUNCTION     V1L5
         $FREE     R15                                             V1L5
ADSARR1  BAL       R14,ASCHCOMC
         B         AERRSV1             ERROR
          B         ADS2                OK
ADSCHAR  MVI       ACODE,ARCHAR
ADS2     OI        AB2,TYPE+USAGE      TURN ON BITS
         L         R15,ASYMENT
         USING     VLIST,R15
         LH        R0,AB1
         STH       R0,VB1              UPDATE SYMTAB ENTRY
         $FREE     R15                                             V1L5
ADS1     LH        R0,ALINK            ADVANCE TO NEXT ENTRY
         MVC       ALINK(2),ASABL
         STH       R0,ASABL
         AR        RS,R0
         IF        (AOP,NE,TERM),ADS3
         B         AUPSCAN             YES
AOPTB    DC        AL1(APHI-APHI)      PHI
         DC        AL1(ADS31-APHI)     END DELIM.
         DC        AL1(ADS31-APHI)     FN. BR.
         DC        AL1(ALBR-APHI)      (
         DC        AL1(ADS31-APHI)     ,
         DC        AL1(AEQ-APHI)       =
         DC        AL1(ARBR-APHI)      )
         DC        AL1(ADPT-APHI)      .
         DC        AL1(AMPSND-APHI)    &
         DC        AL1(AQUOTE-APHI)    SINGLE QUOTE
APHI     CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         BE        ATWOPHIS            YES REMOVE TWO PHIS FROM STACK
         B         AERRSX0
ALBR     CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         BER       R14                 YES - OK
         B         AERRSX0
AEQ      IF        (CADSSW,LT,EQSW),AEQ1             TEST SWITCHES
         BE        AERREQA             YES - WARNING
         MVI       AERRSW,1       YES - AND ALSO SOME OTHER SWITCHES
*  EQ-8  UNEXPECTED EQUALS SIGN
AERREQ8  $ERROR    (BOOT,EQ,1,DELRS,UNEX),DONE                     V1L5
*  EQ-A   WARNING   UNEXPECTED EQUALS SIGN
AERREQA  MVI       AMLTEQSW,X'FF'      SET MULTIPLE ASSIGNMENT SWITCH
         $ERROR    (LANG,EQ,2),DONE                                V1L5
AEQ1     OI        CADSSW,EQSW         TURN ON EQ SW
ADS31    BR        R14
AQUOTE   LA        R14,AQUTCHG         FOR RETURN                  V1L3
AERRSX1  $ERROR    (NOAC,SX,1,DELRS,INVAL),DONE                    V1L5
AQUTCHG  MVI       AOP,X'01'           CHANGE TO TERM.             V1L3
         B         ADS30                                           V1L3
ARBR     IF        (ACODE,EQ,PHI),ADS1
         LA        R14,ADS1
         B         AERRSX0
ADPT     IF        (ACODE,OFF,CCONS),AERRCN6  MISPLACED DECIMAL?   V1L5
         LR        R2,RS               POINT R2 TO STACK           V1L5
         SR        R2,R0               BUMP STACK PTR UP 1 ENTRY   V1L5
         USING     ALTSTACK,R2                                     V1L5
         IF        (ALTOP,ON,X'80'),AERRCN6  ISSUE CN-5 FOR )      V1L5
         $FREE     R2                                              V1L5
         B         ADSCON              ELSE CONTINUE PROCESSING    V1L5
*    STATEMENT NUMBER ROUTINE
AMPSND   IF        (ACODE,NE,CCONS+1),AERRHO4      IS OPND A CONSTANT
         CLC       ASABL(2),KH4        WAS LAST OPERAND PHI
         BNE       AERRHO4             NO - ERROR
         BAL       R14,ATWOPHIS        REMOVE PHI AND & FROM STACK
         L         R3,ADCSTN2
         OFFSET    BALR,R14,R3
         USING     NLIST,R15
         MVI       ACODE,ARSTNOCN
         MVI       AB1,STAT
         STH       R3,APTR             STORE POINTER IN STACK
         $FREE     R15                                             V1L5
         BAL       R14,ASCHCOM
         BAL       R14,AERRHO4
         IF        (CADSSW,ON,CALLSW),ADS1  CALL STATEMENT
*  ST-8  STATEMENT NUMBER CONSTANT MUST BE IN A CALL STATEMENT
AERRST8  MVI       AERRSW,1
         $ERROR    (BOOT,RE,2),ADS1                                V1L5
         AFUNCDEF  CORE=ALL                                        V1L5
         $AFTLIST  AFTBEG,AFTDUMMY                                 V1L5
         ASTATLIS                                                  V1L5
         EJECT
*  ROUTINES USED BY SYNTAX SCAN
*  GETS RID OF TWO PHIS IN STACK
ATWOPHIS S         RS,KF4
         LH        R0,ASABL
         AH        R0,ALINK
         STH       R0,ASABL
         MVC       AOP+4(1),AOP
         LA        RS,AB1
         BR        R14
*  ROUTINE TO CHECK FOR ENCLOSING COMMAS  ETC.
ASCHCOMC IF        (AOP,NE,TERM),ASCHCOM
         LR        R15,RS
         USING     ALTSTACK,R15
         AH        R15,ALTLINK
         IF        (ALTOP,NE,TERM),DONE
         IF        (CADSSW,OFF,INPUTSW+OUTPUTSW),DONE TEST I/O SWITCHES
         B         ZR14+4
         $FREE     R15                                             V1L5
ASCHCOM  LR        R15,RS
         USING     ALTSTACK,R15
         AH        R15,ALTLINK
         IF        (ALTOP,EQ,COMMA),ASCH1
         IF        (ALTOP,NE,RBRK),DONE          ERROR RETURN
ASCH1    IF        (AOP,EQ,COMMA),ZR14+4         OK RETURN
         IF        (AOP,EQ,FBRK),ZR14+4          OK RETURN
         BR        R14                 ERROR RETURN
         $FREE     R15                                             V1L5
         EJECT
*  ENTRY POINT FOR CALL STATEMENT
ACALL    ACENT     DASAVE
         SR        R2,R2
**********************************************************************
         AIF       ('&WATTYPE' EQ 'DISTR').ACALL
         ST        RS,ASAVER9
.ACALL   ANOP
**********************************************************************
         MVI       AERRSW,X'00'
         MVI       ACALLSW,X'00'       TURN OFF SPECIAL SWITCH
         OI        CADSSW,CALLSW+EQSW
         LR        R15,RS
         USING     ALTSTACK,R15
         AH        R15,ALTLINK
         IF        (ALTOP,EQ,LBRK),ACALL27
ACALL26  MVI       ACALLSW,X'01'
         B         ACALL22
ACALL27  OFFSET    LRAL,R15,CSRT1      GET CLOSING )
         CR        R15,RS
         BNH       ACALL28
          AH        R15,ALTLINK
         AH        R15,ALTLINK
         IF        (ALTOP,EQ,TERM),ACALL22
         $FREE     R15                                             V1L5
ACALL28  BAL       R14,AERRST51
ACALL22  LA        R14,CRET
         IF        (ACODE,NOFF,CHOLL+CLOGC+CCONS),AERRST51
         IF        (ACODE,EQ,PHI),AERRST51
         OI        VA0SW,X'80'         TURN ON SW TO ELIMINATE VA0 V1L4
         LOOKUP    VARIABLE            MSG IS PRINTED WHEN S/R NAME
         NI        VA0SW,X'7F'         IS LOOKED UP BY NAME RTN    V1L4
         USING     VLIST,R15
         IF        (VB1,SUBR),ARITH1
         IFNOT     (VB1,VAR),ACALL30
         IF        (VB1,DIM),AERRVAA
         IF        (VB2,NOFF,ALL-PARM),AERRVAA  TEST BITS
         MVC       VB3(2),XISN         STORE ISN IN SYMTAB
ACALL21  MVI       VB1,SUBR            MAKE NAME A SUBR
         OI        VB2,TYPE+USAGE      TURN ON BITS
         B         ARITH1
ACALL30  IF        (VB1,OFF,X'C0'),AERRVAA   SHOULD BE (VB1,OTHR)
         IF        (VB2,NOFF,B2PRM),AERRVAA     IS NAME EXTERNAL
         IF        (VB2,OFF,U1),AERRVAA     CAN IT BE CHANGED TO S/R
         NI        VB2,ALL-U1  YES - TURN OFF U1
         B         ACALL21
         $FREE     R15                                             V1L5
         EJECT
*  ENTRY POINT FOR ARITHMETIC IF STATEMENT
GIFIF    ACENT     DASAVE
         AH        RS,ALINK
**********************************************************************
         AIF       ('&WATTYPE' EQ 'DISTR').ARIF
         ST        RS,ASAVER9
.ARIF    ANOP
**********************************************************************
         IF        (AOP,NE,LBRK),AERRST52
         MVI       AOP,TERM            CHANGE ( TO TERM
         MVI       AERRSW,X'00'
         OI        CADSSW,ARITIFSW+EQSW   SET STATEMENT SWITCHES
         B         ARITH1              GO TO ARITH. PROCESSOR
         EJECT
*  ENTRY POINT FOR LOGICAL IF STATEMENT
IFLOG    ACENT     DLIFSAVE
         LA        R13,DASAVE
         USING     DASAVE,R13
         AH        RS,ALINK
**********************************************************************
         AIF       ('&WATTYPE' EQ 'DISTR').AIFLOG
         ST        RS,ASAVER9
.AIFLOG  ANOP
**********************************************************************
         IF        (AOP,NE,LBRK),AERRST52
         MVI       AOP,TERM            CHANGE ( TO TERM
         MVI       AERRSW,X'00'
         OI        CADSSW,LOGIFSW+EQSW  TURN ON LOG IF AND EQ SW
         OI  CDOEND,X'04'  SET SWITCH FOR STATEMENT NUMBER CHECKING
         ST        R4,ALOGIFST
         MVC      ALOGIFS1(3),KF0
         STC      R3,ALOGIFS1+3
         B         ARITH1
         EJECT
*  DIRECT ACCESS AND UNIT NO. ENTRY POINT
ARECNO   ACENT     DASAVE
         MVI       CADSSW,ASFSW+OUTPUTSW
         MVI       AOP,EQUAL
         OFFSET     LRAL,R1,XSYMBOL
*********************************
         AIF       ('&WATTYPE' EQ 'DISTR').ARECNO1
         ST       R1,ASAVER9    SAVE BEGINNING OF STACK TO DUMP
.ARECNO1 ANOP
*********************************
         LR       R0,RS
         SR       R0,R1
         MVI       AERRSW,0
         MVI       ACALLSW,0
         B         ARITH2
         EJECT
*  ERROR MESSAGES ISSUED ONLY BY SYNTAX SCAN
*  CM-4  ILLEGAL USE OF COMMON BLOCK OR NAMELIST NAME
AERRCM4  MVI       AERRSW,1
         $ERROR    (BOOT,CM,2,RELRS),ADS1                          V1L5
*  CN-6  UNEXPECTED DECIMAL  POINT
AERRCN6 MVI        AERRSW,1
         $ERROR    (BOOT,CN,5,DELRS,UNEX),DONE                     V1L5
*  HO-4  UNEXPECTED HOLLERITH OR STATEMENT NUMBER CONSTANT
AERRHO4  MVI       AERRSW,1
         $ERROR    (BOOT,HO,3),DONE                                V1L5
*  SF-1  PREVIOUSLY REFERENCED STATEMENT NUMBER ON ASF
AERRSF1  MVI       AERRSW,1
         $ERROR    (BOOT,SF,1,STNR15),ASFCH3                       V1L5
*  SF-2  ASF IS THE OBJECT OF A LOGICAL IF STATEMENT
AERRSF2  MVI       AERRSW,1
         $ERROR    (BOOT,SF,2),ASFCH2                              V1L5
AERRST52 LA        R14,CRET            FOR RETURN                  V1L3
AERRST51 MVI       AERRSW,X'01'
         $ERROR    (BOOT,ST,3),DONE                                V1L5
*  SR-3  ATTEMPT TO USE A SUBPROGRAMME RECURSIVELY
AERRSR3  MVI       AERRSW,X'01'
         $ERROR    (BOOT,SR,3,RELRS),ADS1                          V1L5
* SF-5  ILLEGAL USE OF AN ASF NAME
AERRSF5 MVI        AERRSW,X'01'
         $ERROR    (BOOT,SF,5,RELRS),ADS2                          V1L5
*  SV-1  ARRAY NAME OR SUBPROGRAMME NAME USED INCORRECTLY WITHOUT LIST
AERRSV1  MVI       AERRSW,1
         $ERROR    (BOOT,SV,1,RELRS),ADS2                          V1L5
*  SX-0  MISSING OPERATOR
AERRSX0  MVI       AERRSW,1
         $ERROR    (BOOT,SX,0,DELRS,UNEX),DONE                     V1L5
*  VA-6  ILLEGAL USE OF A SUBROUTINE NAME
AERRVA6  MVI       AERRSW,1
         $ERROR    (BOOT,VA,2,RELRS),ADS1                          V1L5
*  VA-8  ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A FUNCTION
AERRVA8  MVI       AERRSW,1
         $ERROR    (BOOT,VA,4,RELRS),ADS1                          V1L5
AERRVA81 MVI       AERRSW,1
         $ERROR    (BOOT,VA,4,RELRS),ADS2                          V1L5
*  VA-A  ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A SUBROUTINE
AERRVAA  MVI       AERRSW,1
         $ERROR    (BOOT,VA,5,NAMR15)                              V1L5
         LR        R15,RS
         AH        R15,ALINK
         IF        (2(R15),NE,LBRK),ADS1
         MVI       2(R15),COMMA        CHANGE ( TO , TO AVOID EXTRA
         B         ADS1                ERROR MESSAGE
         DS        0D
ASATEMP  DC        X'0000D064'         FIRST TEMP. FOR FIXED POINT
         DC        X'0000E000'         FIRST TEMP FOR FLOATING POINT
AINIT    DC        8X'00',X'01',15X'00',X'02005830'
ADCSTN2  OFFSET    DC,A,DCSTN2
ADLASFE  OFFSET    DC,A,LASFE
ADENT    OFFSET    DC,A,ARITH+8
         LTORG
         EJECT
*  RIGHT-TO-LEFT  CODE-GENERATING SCAN
AUPSCAN  DC        0H'0'
**********************************************************************
*       DEBUG VERSION ONLY
         AIF       ('&WATTYPE' EQ 'DISTR').AR1
         L         R15,ASAVER9
         LA        R2,25(,RS)
         SR        R2,R15
         CSNAP     ARITHD,0(R15)
.AR1     ANOP
**********************************************************************
         MVI       ASGPR1+3,X'01'      SET R1 TO FREE
         MVI       ASFPR0+3,X'01'      SET F0 TO FREE
         SR        R8,R8  INITIALLIZE FOR DOUBLE JUMP TABLE LOOKUP
         SR        R7,R7
         IC        R7,AOP
         LA        R11,AHOLD
         USING     AHOLD,R11
         IF        (AERRSW,ON,X'01'),ACRET2      IF ERROR, GO TO END
         IC        R7,ASEQTAB(R7)
*  COMES HERE TO MOVE UP (LEFT) ONE OPERATOR IN THE STACK
* ASSUMES R7 CONTAINS THE SEQUENTIAL NUMBER (AUPTAB1) OF THE LEFT-MOST
*  OPERATOR OF THE LAST PAIR OF OPERATORS EXAMINED
* ASSUMES ASABL CONTAINS THE REVERSE LINK TO THE PREVIOUS (TO THE LEFT)
*   ENTRY IN THE STACK
AHOLD    LH        R0,ASABL            BACK UP POINTER
         SR        RS,R0
         MVC       ASABL(2),ALINK      STORE LINK AT ASABL
         STH       R0,ALINK            RESET ALINK TO POINT FORWARD
AUPLK    IC        R8,AUPTAB2(R7)      16*R7 INTO R8
         IC        R7,AOP
         IC        R7,ASEQTAB(R7)      SEQUENTIAL NUMBER OF AOP IN R7
         AR        R8,R7
         IC        R8,AJMPTAB(R8)  ADDRESS OF PROPER ROUTINE
         B         AHOLD(R8)
ANOTER   EQU       *
AUNDEC   EQU       *
AUPPHI   EQU       *
*  SX-9  ILLEGAL SEQUENCE OF OPERATORS
AERRSX9  $ERROR    (BOOT,SX,9),ACRET                               V1L5
AEND     B         ARTT                CHECK FOR CALL STATEMENT, ETC.
APAREN   B         ACRET
AEQER    EQU       *
*  EQ-0  ILLEGAL QUANTITY ON LEFT OF EQUALS SIGN                   V1L5
AERREQ6  $ERROR    (BOOT,EQ,0),ACRET1                              V1L5
AEQ4     DS        0H                                              V1L5
*  EQ-4  ILLEGAL QUANTITY ON RIGHT OF EQUALS SIGN                  V1L5
         $ERROR    (BOOT,EQ,4),ACRET                               V1L5
ARELOPER EQU       *
* MD-2   RELATIONAL OPERATOR HAS A LOGICAL OPERAND
AERRMD2  $ERROR    (BOOT,MD,0),ACRET                               V1L5
*  SKELETON ROUTINE TO OUTPUT A CALL TO A FN, S/R, OR TO DETACH A
*  SUBSCRIPT LIST FROM THE STACK
AOUTCALL IF        (AB1,VAR),ADETSS    IF ARRAY, 'DETACH ' SUBSCRIPTS
         LA        R14,AOUTC1
         LA        R8,INT4
         B         ASTOREG
*  ROUTINE TO REMOVE  A PAIR OF BRACKETS FROM THE STACK
AREMBR   IC        R2,AOP
         AR        RS,R0
         STC       R2,AOP
         AH        R0,ASABL
         STH       R0,ASABL            INCREASE 'BACKWARDS LINK'
         LH        R3,ALINK
         AH        R3,ALINK(R3)
         STH       R3,ALINK            INCREASE LINK
         IC        R7,AOP(R3)
         IC        R7,ASEQTAB(R7)
         B         AUPLK
*  SKELETON ROUTINE TO PREPARE AN ARGUMENT IN A LIST FOR LATER OUTPUT
APCALL   SR        R2,R2
         IC        R2,ACODE
         N         R2,KF15
         IC        R2,APC2TB(R2)
         B         APC20(R2)
         EJECT
* ROUTINE TO OUTPUT CODE FOR AN ARITHMETIC OPERATOR
AOUTARIT LR        R1,RS
         AH        R1,ALINK
         USING     ALTSTACK,R1
         SR        R2,R2
         ST        R2,ARITSW           TURN OFF SWITCHES
         MVI       ASAND1MD,0
         MVI       ASAND2MD,0
         IF       (ALTOP,OFF,RELOP),ARIT1
         IC        R4,ALTOP
         SLA       R4,4
         STC       R4,ARELOPSV
         MVI       ALTOP,COMPARE
ARIT1    IC        R8,ALTOP
         N         R8,KF15
         STC       R8,ARITOP           PUT OPERATOR AT ARITOP
        AOFFSET    STS,RS,ASAND1AD     STORE STACK ADDRESS OF OPND1
        AOFFSET    STS,R1,ASAND2AD     STORE STACK ADDRESS OF OPND2
         SLA       R8,2
         L         R4,AOPTRTAB(R8)     ADDRESS OF TABLE FOR OPERATOR
*                                      IN R4
         MVN       ASAND2CD(2),ALTCODE CODE AND MODE TO OPERAND TABLE
         IC        R8,ASAND2CD
         IC        R2,AOPNDRTN(R8)     ADDR. OF ROUT. FOR CODE OF OPND2
         IC        R8,ASAND2MD
         IC        R7,AROWTAB(R8)      GET ROW OF CODE TABLE
         LA        R3,AROWTAB(R8)
         LA        R15,ASAND2
         BAL       R14,AOPNDE(R2)
         $FREE     R1                                              V1L5
         AR        R4,R7               ADD ROW OF TABLE TO ADDRESS
         IC        R2,ARITAB8(R8)      GET ROW OF MODE TABLE
         MVN       ASAND1CD(2),ACODE   CODE AND MODE TO OPERAND TABLE
         IC        R8,ASAND1CD
         IC        R7,AOPNDRTN(R8)     ADDR. OF ROUT. FOR OPND1
         LA        R14,AOPNDE(R7)
         IC        R8,ASAND1MD
         IC        R7,ACOLTAB(R8)      GET COLUMN OF CODE TABLE
         LA        R3,ACOLTAB(R8)
         LR        R1,RS
         LA        R15,ASAND1
         BALR      R14,R14             GO TO ROUT. FOR OPND1
         AR        R2,R8               ADD COLUMN OF MODE TABLE
         IC        R8,AMODETAB(R2)     LOOK UP MODE OF RESULT
         STC       R8,ARIMODE          STORE
         IF        (ARIMODE,EQ,X'FF'),AERRMD4    MIXED MODE
         IF        (ARIMODE,NON,CHAR1),ARIT101
         IF        (ARITOP,EQ,COMPARE),ACHARCOM
         IF        (ARIMODE,ON,CHARN),AOUTCHAR
         MVI       ARIMODE,LOG1
         IF        (ARITOP,NE,EQUAL),ARITCON2  CHAR*1 TESTS AS     V1L4
         IF        (AMLTEQSW,EQ,X'FF'),AERREQ3 AT 0875 & 0876      V1L4
ARIT101  IF        (ARITOP,NE,EQUAL),ARITCON2
         SPACE
AEQSPEC  IC        R8,ASAND1MD         GET MODE OF OPND1
         STC       R8,ARIMODE          SET MODE OF RESULT
         LM        R1,R3,ASAND1        SWITCH OPERANDS
         MVC       ASAND1(12),ASAND2
         STM       R1,R3,ASAND2
         IF        (ARIMODE,OFF,COMP8),AEQLOG
         IF       (CADSSW,ON,ASFSW),ARITCON1
         IFNOT     (AB1,VAR),AERREQ6
         IF        (AB1,DIM),ARITCON1
         IF        (AB2,OFF,B2DO+B2AS),ARITCON1
         IF        (AB2,ON,B2AS),AERRAS2
*  DO-4  ATTEMPT TO REDEFINE A DO-LOOP PARAMETER
AERRDO4  $ERROR    (BOOT,DO,4,RELRS),ACRET                         V1L5
*  AS-2  ATTEMPT TO REDEFINE AN ASSIGNED VARIABLE
AERRAS2  $ERROR    (BOOT,GO,2,RELRS),ACRET                         V1L5
AEQLOG   IF        (ASAND1CD,NE,ARR1-ARBASE),AEQLOG1
         OFFSET    LRAL,R14,ADEQRET0
         B         AEQRET1-AEQRET0(R14)
AEQLOG1  MVC       ADUMCODE(2),ALOGCD1
         LA        R1,ADUMCODE
         OFFSET    LRAL,R15,ADRTN000
         B         ARTN057-ARTN000(R15)
         SPACE
ARITCON2 IC        R3,ARITOP
         N         R3,KF8
         TM        ARIMODE,X'0E'
         EX        R0,AMODCHK(R3)
ARITCON1 AR        R4,R7               ADD COLUMN OF CODE TABLE
         C         R4,ADDRCOMB
         BL        ARITCON3
* EX-0  ILLEGAL COMPLEX EXPONENTIATION
AERREX0  $ERROR    (BOOT,EX,0),ACRET                               V1L5
ARITCON3 BAL       R14,ASTOREG         STORE RESULT REGISTER
ARIT17   SR        R2,R2               ZERO TOP OF R2 IF NECESSARY
         IC        R2,ZR4(RO)          GET COMBINATION NUMBER
         SLA       R2,2                MULTIPLY BY FOUR
         L         R4,ADDRCOMB
         AR        R4,R2               R4 POINTS TO ENTRY IN COMBINE
*                                      TABLE
         OFFSET    LRAL,R1,ADDRCD
         AH        R1,ZR4(RO)          R1 POINTS TO THE DUMMY CODE
         MVC       ADUMCODE(24),ZR1    MOVE DUMMY CODE TO WORK AREA
         LA        R1,ADUMCODE         SET UP R1 FOR OUTPUT ROUTINE
         L         R15,ADRTN000        GET ADDRESS OF OUTPUTTING
         AH        R15,ZR4+2(RO)       ROUTINE
         OFFSET    BR,R15              GO TO ROUTINE
AMODCHK  BNZ       AERRMD4
         NOP       *-*
         BZ        AERRMD4
         EJECT
*  ROUTINE TO TIDY UP AFTER OUTPUTTING CODE FOR AN ARITHMETIC
*  OPERATION AND RETURN TO OPERATOR SCAN
ARITR1   OUTPUT
ARITRET  IF        (ARITOP,NE,COMPARE),ARIT19
         TM        ARIMODE,X'06'
         BM        ARIT181
         BZ        AERRMD2
* MD-3   RELATIONAL OPERATOR HAS A COMPLEX OPERAND
AERRMD3  $ERROR    (BOOT,MD,1),ACRET                               V1L5
ARIT181  IF        (AOP,NE,TERM),ARIT1811
         IF        (CADSSW,OFF,LOGIFSW),ARIT1811
         LR        R15,RS
         USING     ALTSTACK,R15
         AH        R15,ALTLINK
         AH        R15,ALTLINK         GET OPERATOR AFTER RELOP
         IF        (ALTOP,NE,TERM),ARIT1811
         SR        R15,RS              FIX UP LINK
         STH       R15,ALINK
         MVC       ADUMCODE(4),ALIFCD+4
         XI        ARELOPSV,X'F0'      MAKE OPERATOR REVERSE
         MVC       ADUMCODE+1(1),ARELOPSV
         LA        R0,ZR5+2
         ST        R0,ALIFSAVE         STORE ADDRESS OF B. AROUND
         OUTPUT    4,ADUMCODE                                      V1L5
         AIF       ('&PROFILE' EQ 'OMIT').APROF30                  V1L5
         IF        (CCNTSW,OFF),ALIFR34                            V1L5
         IF        (CLIFSW,NE,X'FF'),ALIFR34                       V1L5
         OUTPUT    4,AIFOBJCD          OUTPUT BAL TO XIFOBJ        V1L5
         MVI       CLIFSW,X'00'        RESTORE CLIFSW              V1L5
.APROF30 ANOP                                                      V1L5
         B         ALIFR34             TAKE BRANCH                 V1L5
ARIT1811 LA        R8,INT4
         BAL       R14,ASTOREG
         LR        R0,R5
         S         R0,CBAR11
         A         R0,ASALIT9
         MVC       ADUMCODE(12),ARELOPCD
         MVC       ADUMCODE+5(1),ARELOPSV
         STH       R0,ADUMCODE+6
         MVI       ARIMODE,1
         OUTPUT    12,ADUMCODE
ARIT19   LH        R0,ALINK            SET UP FOR OPERATOR SCAN
         AR        RS,R0
         AH        R0,ALINK
         AH        RS,ALINK
         IC        R7,AOP
         IC        R7,ASEQTAB(R7)
         SR        RS,R0
         STH       R0,ALINK
         MVC       AB1(1),ARIMODE      PUT MODE OF RESULT IN STACK
         IF        (ARIMODE,ON,REAL4),AUSEF0
         IF        (ARIMODE,OFF,CHAR1),AUSER1
         MVI       ACODE,ARF0
         B         AUPLK
         EJECT
* ROUTINE TO OUTPUT CODE FOR CHARACTER VARIABLES IN ARITH STATEMENTS
ACHARCOM BAL       R14,ASTOREG         STORE R1 IF NECESSARY
AOUTCHAR IC        R8,ASAND1LN    GET LENGTHS
         IC        R2,ASAND2LN
         STC       R8,ACHARL1
         SR        R2,R8
         BNH       AOUTCH3
         IF        (ARITOP,NE,EQUAL),AOUTCH1
*  CV-1  WARNING - ELEMENT ON RIGHT-HAND SIDE OF CHARACTER ASSIGNMENT
AERRCV1  $ERROR    (WARN,CV,1)                                     V1L5
         SR        R2,R2
AOUTCH3  AR        R8,R2
         STC       R8,ACHARL1
         LPR       R2,R2
AOUTCH1  STC       R2,ACHARL2
         IF         (ARITOP,NE,EQUAL),AOUTCHA1
         IF        (AMLTEQSW,NE,X'FF'),AOUTCH2
AERREQ3  $ERROR    (BOOT,EQ,3),ACRET1                              V1L5
AOUTCH2  IFNOT     (AB1,VAR),AERREQ6
         BAL       R14,ANDSS1NC        OUTPUT SS CODE FOR OPND1
         OUTPUT    ACHARLRE-ACHARLR,ACHARLR      PUT ADDRESS IN R1
         BAL       R14,ANDSS2          OUTPUT SS CODE FOR OPND2
         IF        (AOP,NE,TERM),AERRSX9
         SR        R7,R7               SET UP R7 FOR OUTPUTTING
         MVC       ADUMCODE(ACHARCD3-ACHARCD),ACHARCD
         IC        R2,ACHARL2          GET NBYTES OF CODE
         IC        R2,ACHOUT1E(R2)
         IF        (ACHARL2,LE,X'01'),AOUTCHA2
         IC        R2,ACHOUT1E+2
AOUTCHA2 L         R14,ACHRETE(R7)
         LA        R1,ADUMCODE
         SR        R3,R3
         IC        R8,ACHFIL1E(R7)     SET R8 & R2 FOR FIRST SECTION OF
         IC        R3,ACHARL1          CODE
         BCTR      R3,0
         STC       R3,ZR1+1(R8)        FILL IN FIRST SECTION OF CODE
         IF        (ACHARL2,EQ,0),COUT  SHOULD BE ),OUTPUT
         IC        R8,ACHFIL2E(R7)
         LA        R3,ZR3+1
         STC       R3,ZR1+3(R8)        FILL IN 2ND SECTION OF CODE
         IF        (ACHARL2,EQ,1),COUT    SHOULD BE ),OUTPUT
         IC        R8,ACHFIL3E(R7)
         STC       R3,ZR1+5(R8)
         LA        R3,ZR3+1
         STC       R3,ZR1+3(R8)        FILL IN 3RD SECTION OF CODE
         IC        R3,ACHARL2
         S         R3,KF2
         STC       R3,ZR1+1(R8)
         THEN     (OUTPUT),DONE
AOUTCHA1 IF        (ARITOP,NE,COMPARE),AERRMD4
*  CV-0  WARNING - CHARACTER VARIABLES USED WITH RELATIONAL OPERATOR
AERRCV0  $ERROR    (LANG,CV,0)                                     V1L5
         IF        (ASAND1CD,GE,ARR1-ARBASE),AERRMD4
         IF        (ASAND2CD,GE,ARR1-ARBASE),AERRMD4
         CLC       ASAND1LN(1),ASAND2LN
         BNL       AOUTCHA3
         LM        R2,R4,ASAND1        SWITCH OPERANDS
         MVC       ASAND1(12),ASAND2
         STM       R2,R4,ASAND2
         SR        R2,R2
         TM        ARELOPSV,X'60'
         BNM       AOUTCHA3
         XI        ARELOPSV,X'60'
AOUTCHA3 BAL       R14,ANDSS1          OUTPUT SS CODE
         OUTPUT    ACHARLRE-ACHARLR,ACHARLR      PUT ADDRESS IN R1
         BAL       R14,ANDSS2          OUTPUT SS CODE FOR OPND2
         IC        R2,ACHARL2
         IC        R2,ACHOUT1R(R2)
         IF        (ACHARL2,LE,X'01'),AOUTCH30
         IC        R2,ACHOUT1R+2
AOUTCH30 LR        R3,R5
         S         R3,CBAR11
         LA        R3,ZR3+1(R2)
         A         R3,ASALIT2
         MVC       ADUMCODE(ACOMPCD3-ACOMPCD),ACOMPCD
         STH       R3,ADUMCODE+2+ACOMPCD1-ACOMPCD
         STH       R3,ADUMCODE+2+ACOMPCD2-ACOMPCD
         LA        R7,ACHADDRR-ACHADDRE
         B         AOUTCHA2
         EJECT
*  ROUTINES TO SET UP OPERAND TABLES FOR OPNDS OF ARITHMETIC OPERATORS
         USING     ALTSTACK,R1
         USING     ASAND,R15
AOPNDE   BAL       R14,AERRCP4
AOPND0   IF        (ASANDNO,NE,1),AERRSX9
         SR        R7,R7               RESET TO COLUMN 1
         IC        R8,ASAND2MD         SET MODE = MODE OF OPND2
         N         R8,KF15
         IF        (ARITOP,EQ,MINUS-ARITHOP),DONE
         IF        (ARITOP,EQ,LOGNOT-LOGICOP),DONE
         IF        (ARITOP,NE,PLUS-ARITHOP),AERRSX9
         LH        R3,ALINK            UNARY PLUS ROUTINE          V1L1
         IC        R7,AOP              PICK UP OP BEFORE UNARY PLUSV1L1
         AR        RS,R3               MOVE DOWN STACK POINTER     V1L1
         STC       R7,AOP              WIPE OUT UNARY PLUS         V1L1
         AH        R3,ASABL                                        V1L1
         STH       R3,ASABL            INCREASE BACKWARDS LINK     V1L1
         LH        R3,ALINK                                        V1L1
         LR        R0,R3
         IC        R7,AOP(R3)
         IC        R7,ASEQTAB(R7)
         B         AUPLK                                           V1L1
AOPND2   LA        R3,4                TEMPORARY
         NR        R3,R8
         LH        R0,ALTPTR
         STH       R0,ASNXTMP+2(R3)
         AIF       ('&OFFSET' EQ 'NO').AOPND1
         MVI       AINDEX,X'00'
.AOPND1  ANOP
         STH       R0,APOINTER
         IC        R3,ARITAB7(R8)
         AR        R0,R3
         STH       R0,APOINTE2
         BR        R14
AOPND9   EQU       *
AOPND3   EQU       *
         AIF       ('&OFFSET' EQ 'NO').AOPND2
         MVI      AINDEX,X'00'
.AOPND2  ANOP
         LH        R3,ALTPTR
         STH        R3,APOINTER
         LA        R3,ZR3+2
         STH       R3,APOINTE2
         BR        R14
AOPND8   IF        (ALTB1,OFF,CHAR1),AOPND81
AOPND5   LH        R3,ALTPTR
         N         R3,KM1631
         A         R3,CSYMBASE
         IC        R0,ZR3+VLEN-VLIST(RO)
         IF        (ALTB1,VAR),AOPND51
         LH        R0,ZR3+HLEN-HLIST(RO)
AOPND51  STC       R0,ASANDLN
AOPND81  EQU       *
         AIF       ('&OFFSET' EQ 'NO').AOPND3
         MVI       AINDEX,ROBJ
.AOPND3  ANOP
         L         R3,ASALIT14
         IC        R3,ARITAB7(R8)
         ST        R3,APOINTER
         BR        R14
AOPNDA   MVI       ASGPR1+3,1          SET R1 TO FREE
         B         AOPNDB1
AOPNDB   MVI       ASFPR0+3,1          SET F0 TO FREE
         IF        (ASANDMD,ON,CHAR1),DONE
AOPNDB1  IC        R7,ZR3+16         RESET COLUMN OR ROW OF CODE TABLE
         OI        ASANDMD,X'10'       RESET MODE TO INDICATE REGISTER
         BR        R14
         $FREE     R1                                              V1L5
         $FREE     R15                                             V1L5
         EJECT
*  ROUTINE TO OUTPUT SUBSCRIPT CODE, INDIRECT ADDRESS CODE, AND
*   UNDEFINED-VARIABLE CHECKING FOR OPERANDS IN AN EXPRESSION
ANDSS2NC MVI       AUNDEFSW,X'00'
ANDSS2   LA        R15,ASAND2
         B         ANDSS
ANDSS1NC MVI       AUNDEFSW,X'00'
ANDSS1   LA        R15,ASAND1
         SPACE
         USING     ASAND,R15
ANDSS    STM       R14,R1,ASAVE4
         IF        (ASANDCD,NMIX,X'09'),DONE
         IFNOT     (ASANDCD,EQ,ARNAME-ARBASE),ANDSS20
         IF        (AUNDEFSW,EQ,X'00'),ANDSS42   SVAR.
         LA        R1,AUNDEFT2
         B         ANDSS43
ANDSS20  OFFSET    LRAL,R1,ASANDADD    GET ADDRESS OF OPND IN STACK
         USING     ALTSTACK,R1
         IF        (ALTB1,DIM),ANDSSARR
         LH        R3,ALTPTR           S.EQ.VAR. OR S.CHAR.VAR.
         STH       R3,AEQUIVCD+2
         LA        R14,ANDSS21
         IF       (ALTB1,VAR),ANDSS22
         LA        R14,ANDSS41
ANDSS22  THEN      (OUTPUT,4,AEQUIVCD),DONE
         $FREE     R1                                              V1L5
ANDSS21  LA        R1,AUNDEFT3
         B         ANDSS44
ANDSSARR BAL       R14,AOUTSS          OUTPUT SS CODE
         LA        R1,AUNDEFT4
ANDSS44  CLI       AUNDEFSW,X'00'
         BE        ANDSS41
ANDSS43  SR        R2,R2               IF NECESSARY
         IC        R2,ASANDMD          GET MODE
         N         R2,KF15             IN CASE OPND IN REG         V1L3
         IC        R2,AUNDEFT1(R2)
         MVC       ADUMCOD2(2),AUNDEFCD
         LH        R3,ZR1(R2)
         STH       R3,ADUMCOD2+2
         OUTPUT    4,ADUMCOD2
ANDSS41  LM        R14,R1,ASAVE4       RESET R14 AND R1
ANDSS42  MVC       AUNDEFSW(1),CUNDEFSW           RESET AUNDEFSW
         BR        R14                 RETURN
         $FREE     R15                                             V1L5
         EJECT
*  ROUTINE TO PREPARE AN ELEMENT IN AN ARGUMENT OR SUBSCRIPT LIST
APC20    B         AERRST5             PHI    ERROR
APC21    BAL       R14,AERRCP4
APC23    IFNOT     (AB1,SVAR),LOOP
         IF        (AB2,OFF,B2DO+B2AS),LOOP
         NI        AB1,ALL-SIMV        TURN OFF DO-PAR BIT
         THEN      LOOP
APC28    MVC       ADUMCODE(8),ACHMEMCD
         MVC       ADUMCODE+6(2),APTR
         IFNOT     (AB1,DIM),APC280
         LR        R1,RS
         USING     ALTSTACK,R1
         BAL       R14,AOUTSS
         IF        (AB1,NON,CHAR1),APC285
*     ROUTINE TO SET UP ADDRESS IN TEMP. STORAGE FOR A CHARACTER ARRAY
*        MEMBER IN ARGUMENT LIST
         L         R3,ASNXTMP          GET NEXT FULL-WORD TEMP
         LA        R3,ZR3+3
         N         R3,KFM4
         STH     R3,ADUMCODE+2         PUT P(TEMP) IN ST INSTRUCTION
          LH       R15,APTR
         N         R15,KM1631
         A         R15,CSYMBASE
         USING     VLIST,R15
         MVC       ADUMCODE+5(1),VLEN  PUT LENGTH INTO MVI INSTR.
         LA        R3,ZR3+4            INCREASE NEXT TEMP
         ST        R3,ASNXTMP
         C         R3,CANXTMP          IS TEMP GT PREV MAXIMUM
         BNH     APC285                NO
         ST        R3,CANXTMP          YES - UPDATE MAXIMUM
         B       APC285
APC280   IF        (AB2,OFF,B2DO+B2AS),APC281
         NI        AB1,ALL-SIMV        TURN OFF DO-PAR BIT
APC281   LH        R0,APTR
         STH       R0,AEQUIVCD+2       PUT POINTER IN INSTR.
         OUTPUT    4,AEQUIVCD
APC285   LA        R0,ZR5+2            SET UP POINTER TO IC INSTR.
         IC        R3,AB1
         ST        R0,AB1      STORE ADDR. OF IC INSTR. IN STACK
         STC       R3,AB1
         THEN    (OUTPUT,8,ADUMCODE),LOOP
APC2AB   LR        R15,RS
         BAL       R14,ASGETEMP
APC2RET  BR        RLOOP
         $FREE     R1                                              V1L5
         EJECT
*  ROUTINE TO OUTPUT AN ARGUMENT LIST
AOUTC1   LA        R8,REAL4
         BAL       R14,ASTOREG
AOUTC11  BAL       R14,CNOP24
         AIF       ('&OFFSET' EQ 'NO').AT1
         ORG       AOUTC11
         BAL       R14,CNOP04
.AT1     ANOP
         LA        R0,ZR5+2
         ST        R0,ASTEMP1          STORE ADDRESS OF PLACE TO FILL
*                                      IN RETURN ADDRESS
         MVC       ADUMCODE(ACALLCDF-ACALLCD),ACALLCD
         LH        R3,APTR
         STH       R3,ADUMCODE+(ACALLCDF-4-ACALLCD)
         OUTPUT    ACALLCDF-ACALLCD,ADUMCODE  OUTPUT CALLING SEQUENCE
         LA        R2,3                SET R2 TO OUTPUT 4 BYTES
         IF        (ACALLSW,NE,X'01'),ACALL01  TEST SPECIAL CALLSW.
         MVI       ACALLSW,X'00'       TURN OFF SW.
         B         ACALL2
ACALL01  EQU       *
         ST        RS,ASAVE1                                       V1L5
         AH        RS,ALINK            GET NEXT ENTRY IN STACK
ANEXT    LA        R1,ACODE            SET R1 TO OUTPUT FROM ACODE
         IF        (ACODE,NE,ARMEMBR),ACALL11
         L         R3,AB1     GET ADDRESS OF IC INSTR.
         LH      R4,ZR3+4(ROBJ)        GET P(ARRAY)
         IF      (AB1,ON,CHAR1),ACALL14
         LR        R0,R5               CONSTRUCT POINTER TO ELEMENT
         S         R0,CBAR11           IN ARGUMENT LIST
         A         R0,ASALIT2
         STH     R0,ZR3(ROBJ)          STORE POINTER IN ST INSTRUCTION
         MVC       ZR3+3(1),AB1
         NI        ZR3+3,SIMV+CHAR1+COMP16
         B       ACALL13
ACALL11  IF        (ACODE,NE,ARTEMP),ACALL1
         IC        R3,AB1
         N         R3,KF4
         LH        R0,APTR
         STH       R0,ASNXTMP+2(R3)    RESET TEMPORARY TABLE
         B       ACALL1
ACALL14  LH      R0,ZR3(ROBJ)          GET P(TEMP)
         STH     R0,APTR               STORE IN OBJ CODE
         STH     R0,ASNXTMP+2          AND NEXT TEMP
         MVC     AB2(2),APTR
ACALL13  STH     R0,ZR3+4(ROBJ)        FIX UP MVI INSTRUCTION
         IFNOT     (AB1,DIM),ACALL15
         NI        AB1,SIMV+CHAR1+COMP16
         OUTPUT
         MVI     AB1,X'8C'             OUTPUT EXTRA WORD FOR XENT
         STH     R4,APTR             TO ALLOW TO BE PASSED TO AN ARRAY
ACALL1   MVC       AB2(2),APTR
ACALL15  OUTPUT
         AH        RS,ALINK            GET NEXT ENTRY
         IF        (AOP,NE,RBRK),ANEXT IF NOT DONE,  LOOP
         AH        RS,ALINK            ADVANCE TO NEXT OPERATOR
         LR        R0,RS               CONSTRUCT NEW LINK FOR STACK
         S         R0,ASAVE1
         IC        R7,AOP              SET UP R7 FOR OPERATOR SCAN
         IC        R7,ASEQTAB(R7)
         SR        RS,R0
         STH       R0,ALINK
ACALL2   NI        AB1,X'3F'  TURN OFF BITS FOR LARG - ASK KINDREE ****
         MVC       AB2(2),APTR
         OUTPUT    ,ACODE
         LR        R0,R5               CONSTRUCT RETURN ADDRESS PTR.
         S         R0,CBAR11
         A         R0,ASALIT2
         L         R3,ASTEMP1
         STH       R0,ZR3(ROBJ)        STORE POINTER IN RETURN ADDR.
         IF        (AB1,FUNC),ACALL3
         MVI       ACODE,0
         B         AUPLK
ACALL3   IF        (AB1,ON,REAL4),AUSEF0
         THEN (OUTPUT,2,ACALLFXR),AUSER1
         EJECT
*  ROUTINE TO 'DETACH' A SUBSCRIPT LIST FROM THE STACK AND LINK AROUND
ADETSS   LR        R15,RS
         USING     ALTSTACK,R15
         MVC       ALTB2(1),ALTLINK+1  MOVE LINK TO AB2 FOR USE WHEN
*                                      OUTPUTTING SUBSCRIPT CODE.
*                                      ASSUMES LINK LESS THAN 256
         IC        R3,AB1              GET AB1
         N         R3,ASALIT11         AND OUT ALL BUT # OF SS
         BALR      R14,0               SET UP BEGINNING OF LOOP
         AH        R15,ALTLINK         GET NEXT ENTRY IN STACK
         S         R3,KF16
         CLI       ALTOP,RBRK          IS OPERATOR )
         BNER      R14                 NO - LOOP
         A         R3,KF16             YES
         BNZ       AERRSV0             WRONG NO. OF SS.
         AH        R15,ALTLINK
         IC        R7,ALTOP            SET UP FOR OPERATOR SCAN
         SR        R15,RS
         STH       R15,ALINK           STORE LINK AROUND SS LIST
         IC        R7,ASEQTAB(R7)
         B         AUPLK               RETURN TO OPERATOR SCAN
         $FREE     R15                                             V1L5
         EJECT
*  ROUTINES TO GET TEMPORARY STORAGE
ASTOREG  LA        R3,4
         NR        R3,R8
         EX        R0,ASTORTM(R3)   IS REG. IN USE
         BNZR      R14                 NO - RETURN
         L         R15,ASGPR1(R3)      YES - GET ADDRESS OF ENTRY ,R15
         USING     ALTSTACK,R15
ASGETEMP IC        R8,ALTB1            GET MODE
         LA        R3,4
         NR        R3,R8
         MVI       ALTCODE,ARTEMP
         SR        R2,R2
         EX        R0,ASTORMVI(R3)     SET REG. TO FREE
         L         R0,ASNXTMP(R3)
         LCR       R0,R0
         IC        R2,KT3(R8)
         BCTR      R2,0
         NR        R0,R2
         A         R0,ASNXTMP(R3)      R0 HAS NEXT ALIGNED TEMP ADDR.
         STH       R0,ALTPTR
         LA        R2,ZR2+1            SINGLE ELEMENT LENGTH IN R2
         IC        R8,ATEMPTAB(R8)      GET ADDRESS OF CODE
         LA        R1,ATEMPCD(R8)
         MVC       ADUMCODE(6),ZR1
         STH       R0,ADUMCODE+2       STORE POINTER IN CODE
         AR        R0,R2               ADD ELEMENT LENGTH TO POINTER
         TM        ALTB1,COMP8
         BNO       ATEMP2              IF NOT COMPLEX, SKIP AHEAD
         STH       R0,ADUMCODE+6       STORE POINTER IN 2ND INSTR.
         AR        R0,R2               ADD ELEMENT LENGTH AGAIN
         LA        R2,7                PUT NBYTES IN R2
         B         ATEMP3
ATEMP2   LA        R2,3                PUT NBYTES = 4 IF NOT COMPLEX
ATEMP3   LA        R1,ADUMCODE         SET UP ADDRESS OF CODE
         ST        R0,ASNXTMP(R3)      STORE A(NEXT TEMP) IN TABLE
         C         R0,CANXTMP(R3)      IS TEMP ADDR. GT PREV. MAX.
         BNHR      RC                  NO - OUTPUT CODE
         ST        R0,CANXTMP(R3)      YES - UPDATE MAX
         BR        RC                  OUTPUT CODE
ASTORTM  TM        ASGPR1+3,1
         TM        ASFPR0+3,1
ASTORMVI MVI       ASGPR1+3,1
         MVI       ASFPR0+3,1
         $FREE     R15                                             V1L5
         EJECT
AUSER1   NI        AB1,COMP16
         AOFFSET   STS,RS,ASGPR1
         MVI       ACODE,ARR1          FIX CODE IN STACK
         B         AUPLK               GO TO OPERATOR SCAN
*
AUSEF0   NI        AB1,COMP16
         AOFFSET   STS,RS,ASFPR0
         MVI       ACODE,ARF0          SET CODE IN STACK
         B         AUPLK               RETURN TO OPERATOR SCAN
         EJECT
*  ROUTINE TO OUTPUT SS CODING
AOUTSS   STM       R14,R1,ASAVE1       SAVE REG'S.
         BAL       R14,CNOP04          OUTPUT CNOP INSTRUCTION
         IF        (CADSSW,NON,ASFSW),AOUTSS1  TEST ASF SW
         IF        (CADSSW,ON,OUTPUTSW),AOUTSS1
*  FN-4  SUBSCRIPTS USED IN AN ASF
AERRFN4  $ERROR    (LANG,FN,2),,SAVE                               V1L5
AOUTSS1  L         R1,ASAVE1+12
         USING     ALTSTACK,R1
         SR        R2,R2               SET R2=ZERO
         MVC       ADUMCOD2(2),AOSSCD
         MVC       ADUMCOD2+2(2),ALTPTR  STORE POINTER IN BAL INSTR
         IF        (ALTB1,NON,CHARN),AOUTSS11       CHARACTER*N ARRAY ?
         LA        R2,4
         L         R3,AEXTRASS         GET 'EXTRA' SS.
         ST        R3,ADUMCOD2+4  PUT IN LIST
AOUTSS11 IC        R8,ALTB2
         AR        R1,R8               GET FIRST SS.
AOUTSS2  IC        R8,ALTCODE          CHECK CODE FOR ILLEGAL TYPE
         LA        R2,ZR2+4            INCREASE R2 TO POINT TO NEXT SS
         IC        R8,ADSSTAB1-ARBASE(R8)  GET ADDRESS OF PROPER ROUT.
         B         ADSSER1(R8)
ADSSER1  BAL       R14,AERRCP4
ADSSNAM  IF        (ALTB1,SVAR),ADSSTM1     "'ECK NAME FOR FN. OR ARRAY
ADSSER2  EQU       *
ADSSER3  EQU       *
*  SS-2  SUBSCRIPT IS A STATEMENT NUMBER
*          CONSTANT,SUBPROGRAMME NAME, OR ARRAY NAME.
AERRSS2  $ERROR    (BOOT,SS,2),ACRET                               V1L5
ADSSRVM  LA        R0,ZR5(R2)          CONSTRUCT S(SUBSCRIPT IN LIST)
         S         R0,CBAR11
         A         R0,ASALIT2
         L         R3,ALTB1            GET ADDR OF IC INSTR.
         IF       (ALTB1,NON,CHAR1),ADSSRVM1
         LH        R0,ZR3(ROBJ)    GET P(TEMP)
         STH       R0,ASNXTMP+2        FIX NEXT TEMP
         STH       R0,ALTPTR           AND STACK
ADSSRVM1 STH       R0,ZR3(ROBJ)        FIX UP ST INSTRUCTION
         STH       R0,ZR3+4(ROBJ)      AND  MVI INSTRUCTION
         IC        R8,ALTB1
         N         R8,KF15
         IC        R8,ADSSTAB0(R8)
         STC       R8,ZR3+3(ROBJ)
ADSSTM1  IF        (CADSSW,NON,DATASW),ADSSTMP
*  DA-4  NON-CONSTANT SUBSCRIPTS IN A DATA STATEMENT
AERRDA4  $ERROR    (LANG,DA,3),,SAVE                               V1L5
ADSSTMP  NI        ALTB1,CHAR1+COMP16  AND OUT ALL BUT MODE IN ALTB1
         IF        (ALTB1,MIX,COMP8),ADSS3
*  MD-6  WARNING - SUBSCRIPT IS COMPLEX,LOGICAL OR CHARACTER
AERRMD6  $ERROR    (LANG,MD,3),,SAVE                               V1L5
ADSS3    IC        R8,ALTB1            PUT MODE IN R8
         LH        R0,AEXTRASS
         IC        R0,ADSSTAB0(R8)
         STH       R0,ADUMCOD2(R2)     STORE CODE IN OUTPUT AREA
         LH        R0,ALTPTR
         IF        (ALTCODE,NE,ARTEMP),ADSS4
         N         R8,KF4
         STH       R0,ASNXTMP+2(R8)    RESET TEMPORARY TABLE
ADSS4    STH       R0,ADUMCOD2+2(R2)   STORE POINTER IN OUTPUT AREA
         AH        R1,ALTLINK          ADVANCE TO NEXT ENTRY
         IF        (ALTOP,NE,RBRK),AOUTSS2        LOOP IF NOT DONE
         LA        R2,ZR2+3
         L          R14,ASAVE1         RESTORE R14
         THEN      (OUTPUT,,ADUMCOD2),DONE
         $FREE     R1                                              V1L5
         EJECT
*  END-OF-STATEMENT ROUTINE
ARTT     IF       (CADSSW,NOFF,ARITIFSW+LOGIFSW),AIFRET
         IF        (CADSSW,NOFF,INPUTSW+OUTPUTSW),ARTTIO  I/O ?
         IF        (ACALLSW,ON,X'01'),AOUTC11    TEST SP. CALL SW.
ACRET1   EQU       *
         B         CRET
ACRET2   IF        (CADSSW,ON,ASFSW),ACRASF2  TEST ASF SW
         SR        RS,R0
         STH       R0,ALINK
ACRET    IF   (CADSSW,OFF,LOGIFSW+ARITIFSW+INPUTSW+OUTPUTSW),ACRASF
         SR        R0,R0
         LR        R15,RS
         USING     ALTSTACK,R15
ACRNXT   AH        R0,ALTLINK
         AH        R15,ALTLINK
         IF        (ALTOP,NE,TERM),ACRNXT
         STH       R0,ALINK
         MVI       ACODE,ARERROR
AIFRET   IF        (CADSSW,ON,LOGIFSW),AIFLRET
         IF        (CADSSW,ON,ARITIFSW),AIFARET
         B         ACRET1
         $FREE     R15                                             V1L5
         EJECT
*  END OF ASF STATEMENT
ACRASF   IF        (CADSSW,OFF,ASFSW),ACRET1  TEST ASF SW
ACRASF2  IF        (CADSSW,ON,OUTPUTSW),ASFRET3
         MVC       ALINK(2),ASABL
         C         RS,ASFSAVE
         BE        ASFRET1
ACRASF1  SH        RS,ALINK
         C         RS,ASFSAVE
         BNE       ACRASF1
         B         ASFRET1
ASFRET   IF        (CADSSW,OFF,OUTPUTSW),ASFRET2  FROM DIRECT ACCESS ?
ASFRET3  AH        RS,ALINK            YES - RESET RS
         B         ACRET1              RETURN
ASFRET2  IF        (ASAND2MD,ON,REAL4),ASFRET1   CHECK MODE
         OUTPUT    2,ASFLR
ASFRET1  LH        R4,APTR
         N         R4,KM1631
         A         R4,CSYMBASE
         OFFSET    LR,R15,R4
         USING     VLIST,R15
         IF        (VB2,NON,USAGE),ASF4B
*  SF-3  RECURSIVE ASF
AERRSF3  $ERROR    (NOAC,SF,3)                                     V1L5
ASF4B    SH        R4,ZR4+10(RO)
         OI        VB2,TYPE+USAGE      TURN ON BITS
         $FREE     R15                                             V1L5
         MVC       ZR4(8),CANXTMP      STORE # OF TEMPS FOR ASF
         MVC       CANXTMP(8),ASTMXTMP RESET # OF TEMPS FOR PROGRAM(ME)
*      IF OFFSET ADDRESSING CHANGE TO ST  R3,ZR3, ST R4,ZR3+4
         L         R3,ADLASFR
         LA        R14,ACRET1
         OFFSET    BR,R3               GO TO ASF RETURN PROC. IN LINKR
         EJECT
*  ROUTINE TO RETURN FROM A LOGICAL IF STATEMENT
AIFLRET  IC        R8,ACODE
         N         R8,KF15
         IC        R8,ALIFTB1(R8)
         B         ALIFR0(R8)
ALIFR0   B         AERRIF3
ALIFR1   EQU       *
         BAL       R14,AOUTSSM
         IF        (ACODE,EQ,ARNAME),ALIFR2
         MVI       AB2,ROBJ+16*R1
         MVC       APTR(2),ASALIT14
         B         ALIFR21
ALIFR2   MVI       AB2,X'10'
ALIFR21  IF        (AB1,NOFF,COMP8),AERRIF3
         MVI       AB1,X'43'
         THEN      (OUTPUT,4,AB1),ALIFR32
ALIFR3   IF        (AB1,OFF,COMP8),ALIFR32
*  IF-3  ARITHMETIC OR INVALID EXPRESSION IN LOGICAL IF
AERRIF3  $ERROR    (BOOT,IF,1)                                     V1L5
ALIFR32  LA        R0,ZR5+6
         ST        R0,ALIFSAVE
         OUTPUT    8,ALIFCD
         AIF       ('&PROFILE' EQ 'OMIT').APROF31                  V1L5
         IF        (CCNTSW,OFF),APROF31                            V1L5
         IF        (CLIFSW,NE,X'FF'),APROF31                       V1L5
         OUTPUT    4,AIFOBJCD          OUTPUT BAL TO XIFOBJ        V1L5
         MVI       CLIFSW,X'00'        RESTORE CLIFSW              V1L5
APROF31  DS        0H                                              V1L5
.APROF31 ANOP                                                      V1L5
ALIFR34  S         R13,KF72
         USING     DLIFSAVE,R13
         AH        RS,ALINK
         NI        CADSSW,ALL-EQSW-LOGIFSW
         L         R3,CSRT2
         ST        R3,CSRT1
         MVI       ALIFSW,X'FF'
         IF        (ALOGIFS1+3,EQ,X'00'),ALIFR33 IS SETSTAK NECESSARY
         LA        R1,ALINK+5
         A         R1,ALOGIFS1
         SETSTACK
ALIFR33  L         R4,ALOGIFST         GET ADDRESS OF SECOND ROUTINE
         AIF       ('&STR' NE 'USE').ASTR1                          ST1
         L         R0,ALIFSAVE                                      ST1
.ASTR1   ANOP                                                       ST1
         OFFSET    BALR,R14,R4         GO TO SECOND ROUTINE
         MVI       ALIFSW,X'00'        RETURNS HERE TO RESET SWITCHES
         MVI       CIFGOTSW,X'00'
         LR        R4,R5               FILL IN BRANCH AROUND
         S         R4,CBAR11
  A      R4,ASALIT2
  L      R3,ALIFSAVE
         STH       R4,ZR3(RO)
         AIF       ('&STR' NE 'USE').ASTR2                          ST1
         CLI       CWHPERF,X'00'       ARE WE DOING A WHILE-PERFM?  ST1
         BE        CRET                NO - RETURN                  ST1
         L         R15,=V(STPERFM)     YES - FINISH PROCESSING IT   ST1
         BALR      R14,R15                                          ST1
.ASTR2   ANOP                                                       ST1
         B         CRET
         USING     DASAVE,R13
         EJECT
*  ROUTINE TO RETURN FROM ARITHMETIC IF STATEMENT
AIFARET  IC        R8,ACODE
         N         R8,KF15
         IC        R8,AIFIFTB1(R8)
         B         AIFIFR0(R8)
AIFIFR0  B         AERRIF4             ILLEGAL
AIFIFR1  EQU       *
         BAL       R14,AOUTSSM
         IF        (ACODE,EQ,ARNAME),AIFIFR2
         MVI       AB2,ROBJ
         MVC       APTR(2),ASALIT14
         B         AIFIFR21
AIFIFR2  MVI       AB2,X'00'
AIFIFR21 IF        (AB1,NMIX,COMP8),AERRIF4
         IC        R8,AB1
         N         R8,KF5
         AR        R8,R8
         LA        R1,AIFIFTB3(R8)
         MVC       ADUMCODE(6),ZR1
         LA        R1,ADUMCODE
         MVN       ZR1+1(1),AB2
         MVC       ZR1+2(2),APTR
         THEN      (OUTPUT,6),AIFIFR31
AIFIFR3  IF        (AB1,NMIX,COMP8),AERRIF4
         LA        R1,AIFIFTB4
         IF        (ACODE,OFF,ARF0-ARR1),AIFIFR32
         LA        R1,ZR1+2
AIFIFR32 OUTPUT    2
AIFIFR31 AH        RS,ALINK
         L         R3,AGIFIF
         LA        R14,ACRET1
         OFFSET    BR,R3
         EJECT
*  END OF I/O EXPRESSION
ARTTIO   IF        (CADSSW,OFF,DATASW),ARTTIO4  TEST DATA SW
AIODATA  IFNOT     (AB1,VAR),AERRIO8
         IF        (AB2,ON,PARM),AERRDA3         S/P PARAM.
ARTTIO4  IF        (ACODE,EQ,ARCHAR),ACRET1
         IF        (ACODE,NE,ARNAME),ARTTIO1
         IFNOT     (AB1,VAR),AERRIO8
         IF        (AB1,DIM),ACRET1
         IF        (AB2,ON,B2AS),AERRAS5
         IF        (CADSSW,OFF,INPUTSW),ACRET1  TEST INPUTSW
         IF        (AB2,OFF,B2DO),ACRET1
*  DO-9  ATTEMPT TO REDEFINE A DO-LOOP PARAMETER IN AN INPUT LIST
AERRDO9  MVI       ACODE,ARERROR
         $ERROR    (BOOT,DO,9,RELRS),ACRET1                        V1L5
*  AS-5  ASSIGNED VARIABLE APPEARS IN AN I/O STATEMENT
*ERRAS5  MVI       ACODE,ARERROR
*ERRAS5  $ERROR    (WARN,GO,3,RELRS),ACRET1                        V1L5
AERRAS5  EQU       *
ARTTIO1  IF        (ACODE,NE,ARMEMBR),ARTTIO3
         LA        R14,ACRET1
         MVI       AUNDEFSW,X'00'
AOUTSSM  ST        RS,ASAND1AD                                     V1L5
         MVN       ASAND1CD(2),ACODE
         B         ANDSS1
ARTTIO3  IF        (CADSSW,OFF,INPUTSW),AERRIOC
*  IO-8   NVALID ELEMENT IN INPUT,DATA OR OUTPUT LIST
AERRIO8  MVI       ACODE,ARERROR
         $ERROR    (BOOT,IO,2),ACRET1                              V1L5
*  IO-C  WARNING  -  INVALID ELEMENT IN 1N OUTPUT LIST
AERRIOC  $ERROR    (LANG,IO,3)                                     V1L5
         IF        (ACODE,LT,ARR1),ACRET1
         LA        R14,ACRET1
         LR        R15,RS
         B         ASGETEMP
         PRINT     ON,NOGEN
         EJECT
*  ERROR MESSAGES USED ONLY BY CODE-GENERATING SCAN
*  CP-4  COMPILER ERROR DETECTED IN ARITHMETIC PROCESSOR
AERRCP4  $ERROR    (NOEX,CP,0)                                     V1L5
          AIF       ('&WATTYPE' EQ 'DISTR').ACP1
          STM       R0,R15,ASYMENT
          CSNAP     REGS,ASYMENT,64
.ACP1     ANOP
          B        ACRET
*  DA-3  ATTEMPT TO INITIALLIZE A SUBPROGRAMME PARAMETER IN A DATA ST.
AERRDA3  MVI       ACODE,ARERROR
         $ERROR    (BOOT,DA,2,RELRS),ACRET1                        V1L5
*  IF-4  LOGICAL, COMPLEX, OR INVALID EXPRESSION IN ARITHMETIC IF
AERRIF4  $ERROR    (BOOT,IF,2),AIFIFR31                            V1L5
* MD-4   MIXED MODE  -  LOGICAL WITH ARITHMETIC
AERRMD4  $ERROR    (BOOT,MD,2),ACRET                               V1L5
* ST-5   UNDECODEABLE STATEMENT
AERRST5  $ERROR    (BOOT,ST,3),ACRET                               V1L5
*  SV-0  WRONG NUMBER OF SUBSCRIPTS
AERRSV0  LH       R15,APTR
         N         R15,KM1631
         A         R15,CSYMBASE
         $ERROR    (BOOT,SV,0,NAMR15),ACRET                        V1L5
         EJECT
*        DUMMY OBJECT CODE
         SPACE
*        GET L1 FOR L2=L1
ALOGCD1  IC        R1,P(I)
         ORG       *-2
         SPACE
*        CODE TO CHANGE SIGN OF ARITHMETIC RESULT
ALCR     LCR       R1,R1
ALCER    LCER      F0,F0
         LCER      F2,F2
ALCDR    DS        0H                                              DVS1
         LCDR      F0,F0                                           DVS1
         LCDR      F2,F2
*  OBJECT CODE FOR A RELATIONAL OPERATOR
ARELOPCD IC        R1,XTRUE
         BC        0,*-*
         IC        R1,XFALSE
         SPACE
ATEMPCD  STC       R1,*-*              CODE FOR STORING REGISTERS
         ORG       *-2
ATEMPCD1 ST        R1,*-*
         ORG       *-2
ATEMPCD2 STH       R1,*-*
         ORG       *-2
ATEMPCD3 STE       F0,*-*
         STE       F2,*-*
         ORG       *-2
ATEMPCD4 STD       F0,*-*
         STD       F2,*-*
         ORG       *-2
         SPACE
*        BAL INSTR. FOR SUBSCRIPT LIST OR UNDEFINED VBLE CHECK
AOSSCD EQU         *
AUNDEFCD BAL       R14,*-*
         ORG       *-2
         SPACE
*        ADDRESSES FOR UNDEFINED VARIBLE CODE
AUNDEFT2 DC        S(XROUTS1)
         DC        S(XROUTS2)
         DC        S(XROUTS4)
         DC        S(XROUTS8)
         DC        S(XROUTS16)
AUNDEFT3 DC        S(XROUTE1)
         DC        S(XROUTE2)
         DC        S(XROUTE4)
         DC        S(XROUTE8)
         DC        S(XROUTE16)
AUNDEFT4 DC        S(XROUTA1)
         DC        S(XROUTA2)
         DC        S(XROUTA4)
         DC        S(XROUTA8)
         DC        S(XROUTA16)
*        CODE TO SET COND CODE FOR ARITH. IF
AIFIFTB  EQU       *
         ORG       AMODCHK+4
AIFIFTB4 LTR       R1,R1
         LTER      F0,F0
         ORG       AIFIFTB
         SPACE
*        CODE TO LOAD VARIABLE AND SET COND CODE FOR ARITH. IF
AIFIFTB3 L         R1,P(I)
         ORG       *-2
         LH        R1,P(I)
         ORG       *-2
         LTR       R1,R1
         LTR       R1,R1
         LE        F0,P(I)
         ORG       *-2
         LD        F0,P(I)
         ORG       *-2
         LTER      F0,F0
         LTDR      F0,F0
         SPACE
ALIFCD   N         R1,XTRUESP          SET COND CODE FOR LOGICAL IF
         BZ        XSTOP
         SPACE     1                                               V1L5
         AIF       ('&PROFILE' EQ 'OMIT').APROF82                  V1L5
AIFOBJCD BAL       R14,XIFOBJ                                      V1L5
.APROF82 ANOP                                                      V1L5
         SPACE     1                                               V1L5
         SPACE
ACALLCD  LA        R14,*-*             CODE FOR CALLING SEQUENCE
         OFFSET    LRAL,R15,*-*
         BALR      R1,R15
ACALLCDF EQU       *
         SPACE
*        CODE TO STORE ADDRESS INTO ARGUMENT LIST AND REPLACE
*        FIRST BYTE OF WORD
*        AND TO STORE ADDRESS OF CHARACTER ARRAY MEMBER INTO
*        WORD IN TEMPORARY STORAGE AND PUT LENGTH IN FIRST BYTE
ACHMEMCD ST        R3,XCMT1
         MVI       XCMT1,*-*
         SPACE
ASFLR    LR        R0,R1               MOVE RESULT TO R0 BEFORE
*                                      RETURNING FROM ASF
ACALLFXR LR        R1,R0               MOVE RESULT TO R1 AFTER RET-
*                                      URNING FROM A CALL
         SPACE
*        CODE TO MOVE ADDRESS OF FIRST CH. VBLE. TO R1 WHILE CALCUL -
*        ATING THE ADDRESS OF THE SECOND
ACHARLR  OFFSET    LR,R1,R3,OBJECT
         SPACE
*        CODE FOR CHARACTER = CHARACTER
         USING     ZRCHAR,RCHAR
ACHARLRE EQU       *
ACHARCD  LA        RCHAR,0(ROBJ,R3)
         ORG       ACHARCD+4*RO/R12
ACHARCD0 MVC       ZR1(L1),ZRCHAR
ACHARCD1 MVI       ZR1+L1,BLANK
ACHARCD2 MVC       ZR1+L1+1(L2),ZR1+L1
ACHARCD3 EQU       *
         SPACE
*        CODE FOR CHARACTER .REL.OP. CHARACTER
ACOMPCD  LA        RCHAR,0(ROBJ,R3)
         ORG       ACOMPCD+4*RO/R12
ACOMPCD0 CLC       ZR1(L1),ZRCHAR
ACOMPCD1 BNE       *-*
         CLI       ZR1+L1,BLANK
ACOMPCD2 BNE       *-*
         CLC       ZR1+L1+1(L2),ZR1+L1
ACOMPCD3 EQU       *
         $FREE     R3                                              V1L5
         $FREE     R15                                             V1L5
         SPACE
AEXTRASS DS        0F                  EXTRA SS FOR CHAR*N
         DC        X'A9'
         DC        AL1(XSSI-XSSD)
         DC        S(XONE)
         EJECT
*  LITERALS, CONSTANTS, AND TABLES
ADDRCOMB OFFSET    DC,A,ACOMTAB
ADDRCD   OFFSET    DC,A,ARICD000
ADRTN000 OFFSET    DC,A,ARTN000
AGIFIF   OFFSET    DC,A,GIF
ADLASFR  OFFSET    DC,A,LASFR
ADEQRET0 OFFSET    DC,A,AEQRET0
KF72     DC        F'72'
KFM4     DC        F'-4'
ASALIT2  DC        X'0000B000'
ASALIT9  DC        X'0000B00C'
ASALIT11 DC        X'00000070'
ASALIT14 DC        X'30003000'
AUNDEFT1 DC        X'04000402040606080000'
APC2TB   DC        AL1(APC20-APC20)    PHI
         DC        AL1(APC21-APC20)    ERROR
         DC        AL1(APC2RET-APC20)  TEMPORARY
         DC        AL1(APC23-APC20)    VBLE OR S/P NAME
         DC        AL1(APC2RET-APC20)  STATEMENT NO. CONSTANT
         DC        AL1(APC2RET-APC20)  CHARACTER CONSTANT OR S.VAR.
         DC        AL1(APC21-APC20)    ERROR
         DC        AL1(APC21-APC20)    ERROR
         DC        AL1(APC28-APC20)    ARRAY MEMBER OR EQ. VBLE.
         DC        AL1(APC2RET-APC20)  CONSTANT
         DC        AL1(APC2AB-APC20)   GENERAL REGISTER
         DC        AL1(APC2AB-APC20)   FLOATING REGISTER
ADSSTAB0 DC        AL1(XSSC-XSSD)      L*4
         DC        AL1(XSSC-XSSD)      L*1
         DC        AL1(XSSI-XSSD)      I*4
         DC        AL1(XSSH-XSSD)      I*2
         DC        AL1(XSSR-XSSD)      R*4
         DC        AL1(XSSD-XSSD)      R*8
         DC        AL1(XSSR-XSSD)      C*8
         DC        AL1(XSSD-XSSD)      C*16
         DC        AL1(XSSCH-XSSD)     CHAR1
         DC        AL1(XSSCH-XSSD)     CHARN
ADSSTAB1 DC        AL1(ADSSER1-ADSSER1) A0
         DC        AL1(ADSSER1-ADSSER1) A1
         DC        AL1(ADSSTM1-ADSSER1)  A2
         DC        AL1(ADSSNAM-ADSSER1)  A3
         DC        AL1(ADSSER2-ADSSER1) A4
         DC        AL1(ADSSTMP-ADSSER1)  A5
         DC        AL1(ADSSER1-ADSSER1) A6
         DC        AL1(ADSSER1-ADSSER1) A7
         DC        AL1(ADSSRVM-ADSSER1) A8
         DC        AL1(ADSSTMP-ADSSER1) A9
         DC        AL1(ADSSER1-ADSSER1) AA
         DC        AL1(ADSSER1-ADSSER1) AB
         SPACE
ACHADDRE OFFSET    DC,A,ACHARCD
ACHRETE  OFFSET    DC,A,ARIT19
ACHOUT1E DC        AL1(ACHARCD1-ACHARCD-1)
ACHOUT2E DC        AL1(ACHARCD2-ACHARCD-1)
ACHOUT3E DC        AL1(ACHARCD3-ACHARCD-1)
ACHOUT4E DC        AL1(ACHARCD3-ACHARCD-1)
ACHFIL1E DC        AL1(ACHARCD0-ACHARCD)
ACHFIL2E DC        AL1(ACHARCD1-ACHARCD)
ACHFIL3E DC        AL1(ACHARCD2-ACHARCD)
         SPACE
ACHADDRR OFFSET    DC,A,ACOMPCD
ACHRETR  OFFSET    DC,A,ARIT181
ACHOUT1R DC        AL1(ACOMPCD1-ACOMPCD-1)
ACHOUT2R DC        AL1(ACOMPCD2-ACOMPCD-1)
ACHOUT3R DC        AL1(ACOMPCD3-ACOMPCD-1)
ACHOUT4R DC        AL1(ACOMPCD3-ACOMPCD-1)
ACHFIL1R DC        AL1(ACOMPCD0-ACOMPCD)
ACHFIL2R DC        AL1(ACOMPCD1+4-ACOMPCD)
ACHFIL3R DC        AL1(ACOMPCD2+4-ACOMPCD)
AIFIFTB1 DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR2-AIFIFR0)
         DC        AL1(AIFIFR1-AIFIFR0)
         DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR0-AIFIFR0)
         DC        AL1(AIFIFR1-AIFIFR0)
         DC        AL1(AIFIFR2-AIFIFR0)
         DC        AL1(AIFIFR3-AIFIFR0)
         DC        AL1(AIFIFR3-AIFIFR0)
ALIFTB1  DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR2-ALIFR0)
         DC        AL1(ALIFR1-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
         DC        AL1(ALIFR1-ALIFR0)
         DC        AL1(ALIFR2-ALIFR0)
         DC        AL1(ALIFR3-ALIFR0)
         DC        AL1(ALIFR0-ALIFR0)
*  SAVE AREA CONTINUED - THESE TABLES DON'T GET MODIFIED, BUT NEED TO
*    BE ADDRESSIBLE
DSAVER   CSECT
* TABLE FOR MODE OF RESULT
AMODETAB EQU       *
         DC        AL1(LOG4)
         DC        AL1(LOG4)
         DC        6X'FF'
         DC        AL1(LOG1)           CH*1,LOG4
         DC        X'FF'
         DC        AL1(LOG4)
         DC        AL1(LOG1)
         DC        6X'FF'
         DC        AL1(LOG1)           CH*1,LOG1
         DC        X'FF'
         DC        X'FF'               L*4,I*4
         DC        X'FF'               L*1,I*4
         DC        AL1(INT4)           I*4,I*4
         DC        AL1(INT4)           I*2,I*4
         DC        AL1(REAL4)          R*4,I*4
         DC        AL1(REAL8)          R*8,I*4
         DC        AL1(COMP8)          C*8,I*4
         DC        AL1(COMP16)         C*16,I*4
         DC        2X'FF'              CH,I*4
         DC        2X'FF'              L,I*2
         DC        AL1(INT4)           I*4,I*2
         DC        AL1(INT2)           I*2,I*2
         DC        AL1(REAL4)          R*4,I*2
         DC        AL1(REAL8)          R*8,I*2
         DC        AL1(COMP8)          C*8,I*2
         DC        AL1(COMP16)         C16,I*2
         DC        2X'FF'              CH,I*2
         DC        2X'FF'              L,R*4
         DC        AL1(REAL4)          I*4,R*4
         DC        AL1(REAL4)          I*2,R*4
         DC        AL1(REAL4)          R*4,R*4
         DC        AL1(REAL8)          R*8,R*4
         DC        AL1(COMP8)          C*8,R*4
         DC        AL1(COMP16)         C16,R*4
         DC        2X'FF'              CH,R*4
         DC        2X'FF'              L,R*8
         DC        AL1(REAL8)          I*4,R*8
         DC        AL1(REAL8)          I*2,R*8
         DC        AL1(REAL8)          R*4,R*8
         DC        AL1(REAL8)          R*8,R*8
         DC        AL1(COMP16)         C*8,R*8
         DC        AL1(COMP16)         C16,R*8
         DC        2X'FF'              CH,R*8
         DC        2X'FF'              L,C*8
         DC        AL1(COMP8)          I*4,C*8
         DC        AL1(COMP8)          I*2,C*8
         DC        AL1(COMP8)          R*4,C*8
         DC        AL1(COMP16)         R*8,C*8
         DC        AL1(COMP8)          C*8,C*8
         DC        AL1(COMP16)         C16,C*8
         DC        2X'FF'              CH,C*8
         DC        2X'FF'              L,C*16
         DC        AL1(COMP16)         I*4,C*16
         DC        AL1(COMP16)         I*2,C*16
         DC        AL1(COMP16)         R*4,C*16
         DC        AL1(COMP16)         R*8,C*16
         DC        AL1(COMP16)         C*8,C*16
         DC        AL1(COMP16)         C*16,C*16
         DC        2X'FF'              CH,C*16
         DC        2AL1(LOG1)          LOG,CH*1
         DC        6X'FF'              AR,CH
         DC        AL1(CHAR1)          CH*1,CH*1
         DC        AL1(CHARN)          CH*N,CH*1
         DC        2X'FF'              L,CH*N
         DC        6X'FF'              AR,CH*N
         DC        AL1(CHARN)          CH*1,CH*N
         DC        AL1(CHARN)          CH*N,CH*N
         DS        0F
AOPTRTAB EQU       *
         OFFSET    DC,A,AORTAB
         OFFSET    DC,A,AANDTAB
         OFFSET    DC,A,ANOTTAB
ASPACE21 DC        2F'0'
         OFFSET    DC,A,AEQTAB
ASPACE22 DC        2F'0'
ASPACE23 DC        F'0'
         OFFSET    DC,A,AADDTAB
         OFFSET    DC,A,AADDTAB
         OFFSET    DC,A,AADDTAB
         OFFSET    DC,A,AMPYTAB
         OFFSET    DC,A,ADIVTAB
         OFFSET    DC,A,AEXPTAB
ASEQTAB  EQU       *
         DC        XL1'00'             PHI - ERROR
         DC        XL1'01'             END DELIM.
         DC        XL1'02'             FN BR.
         DC        XL1'03'             (
         DC        XL1'04'             ,
         DC        XL1'05'             =
ASPACE1  DC        10X'00'
         DC        XL1'06'             OR
         DC        XL1'07'             AND
         DC        XL1'08'             NOT
ASPACE4  DC        6X'00'
ASPACE5  DC        6X'00'
ASPACE8  DC        3X'00'
         DC        XL1'09'             GT
         DS        XL1
         DC        XL1'09'             LT
         DS        XL2
         DC        XL1'09'             NE
         DC        XL1'09'             EQ
         DS        XL1
         DC        XL1'09'             GE
         DS        XL1
         DC        XL1'09'             LE
         DS        XL1
ASPACE6  DC        24X'00'
ASPACE7  DC        4X'00'
         DC        XL1'0A'             +
         DC        XL1'0B'             -
         DC        XL1'0C'             *
         DC        XL1'0D'             /
         DC        XL1'0E'             **
ASPACE10 DC        13X'00'
ASPACE11 DC        6F'0'
ASPACE12 DC        4F'0'
         DC        XL1'00'
         DC        XL1'00'
         DC        XL1'0F'             )
         DC        XL1'00'             .
         DC        XL1'00'             &
         DC        0H'0'   ALIGNS ON HALF-WORD FOR LATER USE
AUPTAB0S EQU       *
         ORG       ASPACE22
* TABLE FOR LENGTHS OF VARIABLES OF DIFFERENT MODES
KT3      EQU       *
ARITAB7  DC        X'04'
         DC        X'01'
         DC        X'04'
         DC        X'02'
         DC        X'04'
         DC        X'08'
         DC        X'04'
         DC        X'08'
         ORG       ASPACE12
AUPTAB2  DC        X'00'
         DC        X'10'
         DC        X'20'
         DC        X'30'
         DC        X'40'
         DC        X'50'
         DC        X'60'
         DC        X'70'
         DC        X'80'
         DC        X'90'
         DC        X'A0'
         DC        X'B0'
         DC        X'C0'
         DC        X'D0'
         DC        X'E0'
         DC        X'F0'
         ORG       ASPACE11
ACOLTAB  EQU       *
         COLUMN    3                   LOGICAL*4
         COLUMN    3                   LOGICAL*1
         COLUMN    3                   INTEGER*4
         COLUMN    4                   INTEGER*2
         COLUMN    7                   REAL*4
         COLUMN    8                   REAL*8
         COLUMN    11                  COMPLEX*8
         COLUMN    12                  COMPLEX*16
         COLUMN    3
         DC        7X'FF'
         COLUMN    2                   LOGICAL R1
         COLUMN    2                   LOGICAL R1
         COLUMN    2                   R1
         COLUMN    2                   R1
         COLUMN    5                   F0
         COLUMN    6                   DF0
         COLUMN    9                   CF0
         COLUMN    10                  CDF0
         ORG       ASPACE6
AROWTAB  EQU       *
         LROW      2                   LOGICAL*4
         LROW      2                   LOGICAL*1
         ROW       2                   INTEGER*4
         ROW       3                   INTEGER*2
         ROW       6                   REAL*4
         ROW       7                   REAL*8
         ROW       10                  COMPLEX*8
         ROW       11                  COMPLEX*16
         LROW      2
         DC        7X'FF'
         LROW      1                   LOGICALR1
         LROW      1                   LOGICALR1
         ROW       1                   R1
         ROW       1                   R1
         ROW       4                   F0
         ROW       5                   DF0
         ROW       8                   CF0
         ROW       9                   CDF0
         ORG       ASPACE1
ARITAB8  DC        AL1(0)              TABLE GIVING THE ROW IN
         DC        AL1(10)             THE MODE TABLE
         DC        AL1(20)
         DC        AL1(30)
         DC        AL1(40)
         DC        AL1(50)
         DC        AL1(60)
         DC        AL1(70)
         DC        AL1(80)
         DC        AL1(90)
         ORG       ASPACE21
ATEMPTAB DC        AL1(ATEMPCD-ATEMPCD) LOGICAL*4
         DC        AL1(ATEMPCD-ATEMPCD) LOGICAL*1
         DC        AL1(ATEMPCD1-ATEMPCD) INTEGER*4
         DC        AL1(ATEMPCD2-ATEMPCD) INTEGER*2
         DC        AL1(ATEMPCD3-ATEMPCD) REAL*4
         DC        AL1(ATEMPCD4-ATEMPCD) REAL*8
         DC        AL1(ATEMPCD3-ATEMPCD) COMPLEX*8
         DC        AL1(ATEMPCD4-ATEMPCD) COMPLEX*16
         ORG       ASPACE10
* TABLE FOR ROUTINE FOR TYPES OF OPERANDS OF A BINARY OPERATOR
AOPNDRTN DC        AL1(AOPND0-AOPNDE)
         DC        AL1(AOPNDE-AOPNDE)
         DC        AL1(AOPND2-AOPNDE)
         DC        AL1(AOPND3-AOPNDE)
         DC        AL1(AOPNDE-AOPNDE)
         DC        AL1(AOPND5-AOPNDE)
         DC        AL1(AOPNDE-AOPNDE)
         DC        AL1(AOPNDE-AOPNDE)
         DC        AL1(AOPND8-AOPNDE)
         DC        AL1(AOPND9-AOPNDE)
         DC        AL1(AOPNDA-AOPNDE)
         DC        AL1(AOPNDB-AOPNDE)
         ORG       ASPACE4
ANBYTAB  EQU       *-2
         DC        AL1(1)              INTEGER*4
         DC        AL1(1)              INTEGER*2
         DC        AL1(1)              REAL*4
         DC        AL1(1)              REAL*8
         DC        AL1(3)              COMPLEX*8
         DC        AL1(3)              COMPLEX*16
         ORG       ASPACE5
ACODETAB EQU       *-2
         DC        AL1(ALCR-ALCR)      INTEGER*4
         DC        AL1(ALCR-ALCR)      INTEGER*2
         DC        AL1(ALCER-ALCR)     REAL*4
         DC        AL1(ALCDR-ALCR)     REAL*8
         DC        AL1(ALCER-ALCR)     COMPLEX*8
         DC        AL1(ALCDR-ALCR)     COMPLEX*16
         ORG       AUPTAB0S
AJMPTAB  DC        16AL1(AUPPHI-AHOLD)
*
         DC        AL1(AUPPHI-AHOLD)   PHI       END DELIM.
         DC        AL1(AEND-AHOLD)     END DELIM END DELIM
         DC        AL1(APAREN-AHOLD)   FN BR     END DELIM
         DC        AL1(APAREN-AHOLD)   (         END DELIM
         DC        AL1(AUNDEC-AHOLD)   ,         END DELIM
         DC        AL1(AHOLD-AHOLD)    =         END DELIM
         DC        AL1(AHOLD-AHOLD)    OR        END DELIM
         DC        AL1(AHOLD-AHOLD)    AND       END DELIM.
         DC        AL1(AHOLD-AHOLD)    NOT       END DELIM.
         DC        AL1(AHOLD-AHOLD)    REL OP    END DELIM.
         DC        AL1(AHOLD-AHOLD)    +         END DELIM.
         DC        AL1(AHOLD-AHOLD)    -         END DELIM.
         DC        AL1(AHOLD-AHOLD)    *         END DELIM.
         DC        AL1(AHOLD-AHOLD)    /         END DELIM.
         DC        AL1(AHOLD-AHOLD)    **        END DELIM.
         DC        AL1(AHOLD-AHOLD)    )         END DELIM.
*
         DC        AL1(AUPPHI-AHOLD)   PHI       FN BR.
         DC        AL1(AOUTCALL-AHOLD) ENDDELIM  FN BR.
         DC        AL1(AOUTCALL-AHOLD) FN BR     FN BR.
         DC        AL1(AOUTCALL-AHOLD) (         FN BR.
         DC        AL1(AOUTCALL-AHOLD) ,         FN BR.
         DC        AL1(AOUTCALL-AHOLD) =         FN BR.
         DC        AL1(AOUTCALL-AHOLD) OR        FN BR.
         DC        AL1(AOUTCALL-AHOLD) AND       FN BR.
         DC        AL1(AOUTCALL-AHOLD) NOT       FN BR.
         DC        AL1(AOUTCALL-AHOLD) REL OP    FN BR.
         DC        AL1(AOUTCALL-AHOLD) +         FN BR.
         DC        AL1(AOUTCALL-AHOLD) -         FN BR.
         DC        AL1(AOUTCALL-AHOLD) *         FN BR.
         DC        AL1(AOUTCALL-AHOLD) /         FN BR.
         DC        AL1(AOUTCALL-AHOLD) **        FN BR.
         DC        AL1(AUPPHI-AHOLD)   )         FN BR.
*
         DC        AL1(AUPPHI-AHOLD)   PHI       (
         DC        AL1(AREMBR-AHOLD)   END DELIM. (
         DC        AL1(AREMBR-AHOLD)   FN BR     (
         DC        AL1(AREMBR-AHOLD)   (         (
         DC        AL1(AREMBR-AHOLD)   ,         (
         DC        AL1(AREMBR-AHOLD)   =         (
         DC        AL1(AREMBR-AHOLD)   OR        (
         DC        AL1(AREMBR-AHOLD)   AND       (
         DC        AL1(AREMBR-AHOLD)   NOT       (
         DC        AL1(AREMBR-AHOLD)   REL OP    (
         DC        AL1(AREMBR-AHOLD)   +         (
         DC        AL1(AREMBR-AHOLD)   -         (
         DC        AL1(AREMBR-AHOLD)   *         (
         DC        AL1(AREMBR-AHOLD)   /         (
         DC        AL1(AREMBR-AHOLD)   **        (
         DC        AL1(AUPPHI-AHOLD)   )         (
*
         DC        AL1(AUPPHI-AHOLD)   PHI       ,
         DC        AL1(AUNDEC-AHOLD)   END DELIM ,
         DC        AL1(APCALL-AHOLD)   FN BR     ,
         DC        AL1(AUNDEC-AHOLD)   (         ,
         DC        AL1(APCALL-AHOLD)   ,         ,
         DC        AL1(AUNDEC-AHOLD)   =         ,
         DC        AL1(AHOLD-AHOLD)    OR        ,
         DC        AL1(AHOLD-AHOLD)    AND       ,
         DC        AL1(AHOLD-AHOLD)    NOT       ,
         DC        AL1(AHOLD-AHOLD)    REL OP    ,
         DC        AL1(AHOLD-AHOLD)    +         ,
         DC        AL1(AHOLD-AHOLD)    -         ,
         DC        AL1(AHOLD-AHOLD)    *         ,
         DC        AL1(AHOLD-AHOLD)    /         ,
         DC        AL1(AHOLD-AHOLD)    **        ,
         DC        AL1(AHOLD-AHOLD)    )         ,
*
         DC        AL1(AUPPHI-AHOLD)   PHI       =
         DC        AL1(AOUTARIT-AHOLD) END DELIM. =
         DC        AL1(AEQER-AHOLD)    FN BR     =
         DC        AL1(AEQER-AHOLD)    (         =
         DC        AL1(AEQER-AHOLD)    ,         =
         DC        AL1(AOUTARIT-AHOLD) =         =
         DC        AL1(AEQER-AHOLD)    OR        =
         DC        AL1(AEQER-AHOLD)    AND       =
         DC        AL1(AEQER-AHOLD)    NOT       =
         DC        AL1(AEQER-AHOLD)    REL OP    =
         DC        AL1(AEQER-AHOLD)    +         =
         DC        AL1(AEQER-AHOLD)    -         =
         DC        AL1(AEQER-AHOLD)    *         =
         DC        AL1(AEQER-AHOLD)    /         =
         DC        AL1(AEQER-AHOLD)    **        =
         DC        AL1(AHOLD-AHOLD)    )         =
*
         DC        AL1(AUPPHI-AHOLD)   PHI       OR
         DC        AL1(AOUTARIT-AHOLD) END DELIM OR
         DC        AL1(AOUTARIT-AHOLD) FN BR.    OR
         DC        AL1(AOUTARIT-AHOLD) (    .    OR
         DC        AL1(AOUTARIT-AHOLD) ,         OR
         DC        AL1(AOUTARIT-AHOLD) =         OR
         DC        AL1(AOUTARIT-AHOLD) OR        OR
         DC        AL1(AHOLD-AHOLD)    AND       OR
         DC        AL1(AHOLD-AHOLD)    NOT       OR
         DC        AL1(AHOLD-AHOLD)    REL OP    OR
         DC        AL1(AHOLD-AHOLD)    +         OR
         DC        AL1(AHOLD-AHOLD)    -         OR
         DC        AL1(AHOLD-AHOLD)    *         OR
         DC        AL1(AHOLD-AHOLD)    /         OR
         DC        AL1(AHOLD-AHOLD)    **        OR
         DC        AL1(AHOLD-AHOLD)    )         OR
*
         DC        AL1(AUPPHI-AHOLD)   PHI       AND
         DC        AL1(AOUTARIT-AHOLD) END DELIM AND
         DC        AL1(AOUTARIT-AHOLD) FN BR     AND
         DC        AL1(AOUTARIT-AHOLD) (         AND
         DC        AL1(AOUTARIT-AHOLD) ,         AND
         DC        AL1(AOUTARIT-AHOLD) =         AND
         DC        AL1(AOUTARIT-AHOLD) OR        AND
         DC        AL1(AOUTARIT-AHOLD) AND       AND
         DC        AL1(AHOLD-AHOLD)    NOT       AND
         DC        AL1(AHOLD-AHOLD)    REL OP    AND
         DC        AL1(AHOLD-AHOLD)    +         AND
         DC        AL1(AHOLD-AHOLD)    -         AND
         DC        AL1(AHOLD-AHOLD)    *         AND
         DC        AL1(AHOLD-AHOLD)    /         AND
         DC        AL1(AHOLD-AHOLD)    **        AND
         DC        AL1(AHOLD-AHOLD)    )         AND
*
         DC        AL1(AUPPHI-AHOLD)   PHI       NOT
         DC        AL1(AOUTARIT-AHOLD) END DELIM NOT
         DC        AL1(AOUTARIT-AHOLD) FN BR     NOT
         DC        AL1(AOUTARIT-AHOLD) (         NOT
         DC        AL1(AOUTARIT-AHOLD) ,         NOT
         DC        AL1(AOUTARIT-AHOLD) =         NOT
         DC        AL1(AOUTARIT-AHOLD) OR        NOT
         DC        AL1(AOUTARIT-AHOLD) AND       NOT
         DC        AL1(AOUTARIT-AHOLD) NOT       NOT
         DC        AL1(ANOTER-AHOLD)   REL OP    NOT
         DC        AL1(ANOTER-AHOLD)   +         NOT
         DC        AL1(ANOTER-AHOLD)   -         NOT
         DC        AL1(ANOTER-AHOLD)   *         NOT
         DC        AL1(ANOTER-AHOLD)   /         NOT
         DC        AL1(ANOTER-AHOLD)   **        NOT
         DC        AL1(ANOTER-AHOLD)   )         NOT
*
         DC        AL1(AUPPHI-AHOLD)   PHI       REL OP
         DC        AL1(AOUTARIT-AHOLD) END DELIM RELOP
         DC        AL1(AOUTARIT-AHOLD) FN BR     RELOP
         DC        AL1(AOUTARIT-AHOLD) (         REL OP
         DC        AL1(AOUTARIT-AHOLD) ,         REL OP
         DC        AL1(AOUTARIT-AHOLD) =         RELOP
         DC        AL1(AOUTARIT-AHOLD) OR        REL OP
         DC        AL1(AOUTARIT-AHOLD) AND       REL OP
         DC        AL1(AOUTARIT-AHOLD) NOT       REL OP
         DC        AL1(ARELOPER-AHOLD) REL OP    REL OP
         DC        AL1(AHOLD-AHOLD)    +         REL OP
         DC        AL1(AHOLD-AHOLD)    -         REL OP
         DC        AL1(AHOLD-AHOLD)    *         REL OP
         DC        AL1(AHOLD-AHOLD)    /         REL OP
         DC        AL1(AHOLD-AHOLD)    **        REL OP
         DC        AL1(AHOLD-AHOLD)    EL OP
*
         DC        AL1(AUPPHI-AHOLD)   PHI       +
         DC        AL1(AOUTARIT-AHOLD) END DELIM +
         DC        AL1(AOUTARIT-AHOLD) FN BR     +
         DC        AL1(AOUTARIT-AHOLD) (         +
         DC        AL1(AOUTARIT-AHOLD) ,         +
         DC        AL1(AOUTARIT-AHOLD) =         +
         DC        AL1(AOUTARIT-AHOLD) OR        +
         DC        AL1(AOUTARIT-AHOLD) AND       +
         DC        AL1(AOUTARIT-AHOLD) NOT       +
         DC        AL1(AOUTARIT-AHOLD) REL OP    +
         DC        AL1(AHOLD-AHOLD)    +         +
         DC        AL1(AHOLD-AHOLD)    -         +
         DC        AL1(AHOLD-AHOLD)    *         +
         DC        AL1(AHOLD-AHOLD)    /         +
         DC        AL1(AHOLD-AHOLD)    **        +
         DC        AL1(AHOLD-AHOLD)    )         +
*
         DC        AL1(AUPPHI-AHOLD)   PHI       -
         DC        AL1(AOUTARIT-AHOLD) END DELIM -
         DC        AL1(AOUTARIT-AHOLD) FN BR     -
         DC        AL1(AOUTARIT-AHOLD) (         -
         DC        AL1(AOUTARIT-AHOLD) ,         -
         DC        AL1(AOUTARIT-AHOLD) =         -
         DC        AL1(AOUTARIT-AHOLD) OR        -
         DC        AL1(AOUTARIT-AHOLD) AND       -
         DC        AL1(AOUTARIT-AHOLD) NOT       -
         DC        AL1(AOUTARIT-AHOLD) REL OP    -
         DC        AL1(AHOLD-AHOLD)    +         -
         DC        AL1(AHOLD-AHOLD)    -         -
         DC        AL1(AHOLD-AHOLD)    *         -
         DC        AL1(AHOLD-AHOLD)    /         -
         DC        AL1(AHOLD-AHOLD)    **        -
         DC        AL1(AHOLD-AHOLD)    )         -
*
         DC        AL1(AUPPHI-AHOLD)   PHI       *
         DC        AL1(AOUTARIT-AHOLD) END DELIM *
         DC        AL1(AOUTARIT-AHOLD) FN BR     *
         DC        AL1(AOUTARIT-AHOLD) (         *
         DC        AL1(AOUTARIT-AHOLD) ,         *
         DC        AL1(AOUTARIT-AHOLD) =         *
         DC        AL1(AOUTARIT-AHOLD) OR        *
         DC        AL1(AOUTARIT-AHOLD) AND       *
         DC        AL1(AOUTARIT-AHOLD) NOT       *
         DC        AL1(AOUTARIT-AHOLD) REL OP    *
         DC        AL1(AOUTARIT-AHOLD) +         *
         DC        AL1(AOUTARIT-AHOLD) -         *
         DC        AL1(AHOLD-AHOLD)    *         *
         DC        AL1(AHOLD-AHOLD)    /         *
         DC        AL1(AHOLD-AHOLD)    **        *
         DC        AL1(AHOLD-AHOLD)    )         *
*
         DC        AL1(AUPPHI-AHOLD)   PHI       /
         DC        AL1(AOUTARIT-AHOLD) END DELIM /
         DC        AL1(AOUTARIT-AHOLD) FN BR     /
         DC        AL1(AOUTARIT-AHOLD) (         /
         DC        AL1(AOUTARIT-AHOLD) ,         /
         DC        AL1(AOUTARIT-AHOLD) =         /
         DC        AL1(AOUTARIT-AHOLD) OR        /
         DC        AL1(AOUTARIT-AHOLD) AND       /
         DC        AL1(AOUTARIT-AHOLD) NOT       /
         DC        AL1(AOUTARIT-AHOLD) REL OP    /
         DC        AL1(AOUTARIT-AHOLD) +         /
         DC        AL1(AOUTARIT-AHOLD) -         /
         DC        AL1(AHOLD-AHOLD)    *         /
         DC        AL1(AHOLD-AHOLD)    /         /
         DC        AL1(AHOLD-AHOLD)    **        /
         DC        AL1(AHOLD-AHOLD)    )         /
*
         DC        AL1(AUPPHI-AHOLD)   PHI       **
         DC        AL1(AOUTARIT-AHOLD) END DELIM **
         DC        AL1(AOUTARIT-AHOLD) FN BR     **
         DC        AL1(AOUTARIT-AHOLD) (         **
         DC        AL1(AOUTARIT-AHOLD) ,         **
         DC        AL1(AOUTARIT-AHOLD) =         **
         DC        AL1(AOUTARIT-AHOLD) OR        **
         DC        AL1(AOUTARIT-AHOLD) AND       **
         DC        AL1(AOUTARIT-AHOLD) NOT       **
         DC        AL1(AOUTARIT-AHOLD) REL OP    **
         DC        AL1(AOUTARIT-AHOLD) +         **
         DC        AL1(AOUTARIT-AHOLD) -         **
         DC        AL1(AOUTARIT-AHOLD) *         **
         DC        AL1(AOUTARIT-AHOLD) /         **
         DC        AL1(AOUTARIT-AHOLD) **        **
         DC        AL1(AHOLD-AHOLD)    )         **
*
         DC        AL1(AUPPHI-AHOLD)   PHI       )
         DC        AL1(APAREN-AHOLD)   END DELIM )
         DC        AL1(APCALL-AHOLD)   FN BR     )
         DC        AL1(AHOLD-AHOLD)    (         )
         DC        AL1(APCALL-AHOLD)   ,         )
         DC        AL1(AEQ4-AHOLD)     =         )                 V1L5
         DC        AL1(AHOLD-AHOLD)    OR        )
         DC        AL1(AHOLD-AHOLD)    AND       )
         DC        AL1(AHOLD-AHOLD)    NOT       )
         DC        AL1(AHOLD-AHOLD)    REL OP    )
         DC        AL1(AHOLD-AHOLD)    +         )
         DC        AL1(AHOLD-AHOLD)    -         )
         DC        AL1(AHOLD-AHOLD)    *         )
         DC        AL1(AHOLD-AHOLD)    /         )
         DC        AL1(AHOLD-AHOLD)    **        )
         DC        AL1(AHOLD-AHOLD)    )         )
*
*  THESE TABLE DON'T NEED TO BE ADDRESSIBLE
ARITHCS  CSECT
AORTAB   COMB      011                 PHI.OR.LR1
         COMB      011                 LR1.OR.LR1
         COMB      226                 L*4.OR.LR1
         COMB      011                 PHI.OR.L*4
         COMB      229                 LR1.OR.L*4
         COMB      223                 L*4.OR.L*4
AANDTAB  COMB      011                 PHI.AND.LR1
         COMB      011                 LR1.AND.LR1
         COMB      227                 L*4.AND.LR1
         COMB      011                 PHI.AND.L*4
         COMB      230                 LR1.AND.L*4
         COMB      224                 L*4.AND.L*4
ANOTTAB  COMB      228                 PHI.NOT.LR1
         COMB      011                 LR1.NOT.LR1
         COMB      222                 L*4.NOT.LR1
         COMB      225                 PHI.NOT.L*4
         COMB      222                 LR1.NOT.L*4
         COMB      222                 L*4.NOT.L*4
AEQTAB   EQU       *
         COMB      011                 PHI=R1
         COMB      011                 R1=R1
         COMB      231                 I4=R1
         COMB      231                 I2=R1
         COMB      232                 F0=R1
         COMB      232                 DF0=R1
         COMB      242                 R4=R1
         COMB      242                 R8=R1
         COMB      232                 CF0=R1
         COMB      232                 CDF0=R1
         COMB      244                 C8=R1
         COMB      240                 C16=R1
         COMB      011                 PHI=I4
         COMB      232                 R1=I4
         COMB      019                 I4=I4
         COMB      019                 I2=I4
         COMB      232                 F0=I4
         COMB      232                 DF0=I4
         COMB      021                 R4==I4
         COMB      021                 R8==I4
         COMB      232                 CF0=I4
         COMB      232                 CDF0=I4
         COMB      121                 C8=I4
         COMB      123                 C16=I4
         COMB      011                 PHI=I2
         COMB      232                 R1=I2
         COMB      025                 I4=I2
         COMB      025                 I2=I2
         COMB      232                 F0=I2
         COMB      232                 DF0=I2
         COMB      026                 R4=I2
         COMB      026                 R8=I2
         COMB      232                 CF0=I2
         COMB      232                 CDF0=I2
         COMB      122                 C8=I2
         COMB      124                 C16=I2
         COMB      011                 PHI=F0
         COMB      232                 R1=F0
         COMB      233                 I4=F0
         COMB      233                 I2=F0
         COMB      011                 F0=F0
         COMB      011                 DF0=F0
         COMB      231                 R4=F0
         COMB      034                 R8=F0
         COMB      011                 CF0=F0
         COMB      011                 CDF0=F0
         COMB      237                 C 8=F0
         COMB      243                 C16=F0
         COMB      011                 PHI=DF0
         COMB      232                 R1=DF0
         COMB      234                 I4=DF0
         COMB      234                 I2=DF0
         COMB      011                 F0=DF0
         COMB      011                 DF0=DF0
         COMB      231                 R4=DF0
         COMB      231                 R8=DF0
         COMB      011                 CF0=DF0
         COMB      011                 CDF0=DF0
         COMB      237                 C8=DF0
         COMB      238                 C16=DF0
         COMB      011                 PHI=R4
         COMB      232                 R1=R4
         COMB      235                 I4=R4
         COMB      235                 I2=R4
         COMB      232                 F0=R4
         COMB      232                 DF0=R4
         COMB      044                 R4=R4
         COMB      200                 R8=R4
         COMB      232                 CF0=R4
         COMB      232                 CDF0=R4
         COMB      239                 C8=R4
         COMB      241                 C16=R4
         COMB      011                 PHI=R8
         COMB      232                 R1=R8
         COMB      236                 I4=R8
         COMB      236                 I2=R8
         COMB      232                 F0=R8
         COMB      232                 DF0=R8
         COMB      044                 R4=R8
         COMB      048                 R8=R8
         COMB      232                 CF0=R8
         COMB      232                 CDF0=R8
         COMB      239                 C8=R8
         COMB      146                 C16=R8
         COMB      011                 PHI=CF0
         COMB      232                 R1=CF0
         COMB      233                 I4=CF0
         COMB      233                 I2=CF0
         COMB      011                 F0= CF0
         COMB      011                 DF0=CF0
         COMB      231                 R4=CF0
         COMB      034                 R8=CF0
         COMB      011                 CF0=CF0
         COMB      011                 CDF0=CF0
         COMB      231                 C8=CF0
         COMB      057                 C16=CF0
         COMB      011                 PHI=CDF0
         COMB      232                 R1=CDF0
         COMB      234                 I4=CDF0
         COMB      234                 I2=CDF0
         COMB      011                 F0=CDF0
         COMB      011                 DF0=CDF0
         COMB      231                 R4=CDF0
         COMB      231                 R8=CDF0
         COMB      011                 CF0=CDF0
         COMB      011                 CDF0=CDF0
         COMB      231                 C8=CDF0
         COMB      231                 C16=CDF0
         COMB      011                 PHI=C8
         COMB      232                 R1=C8
         COMB      235                 I4=C8
         COMB      235                 I2=C8
         COMB      232                 F0=C8
         COMB      232                 DF0=C8
         COMB      044                 R4=C8
         COMB      200                 R8=C8
         COMB      232                 CF0=C8
         COMB      232                 CDF0=C8
         COMB      065                 C8=C8
         COMB      066                 C16VC8
         COMB      011                 PHI=C16
         COMB      232                 R1=C16
         COMB      236                 I4=C16
         COMB      236                 I2=C16
         COMB      232                 F0=C16
         COMB      232                 DF0=C16
         COMB      044                 R4=C16
         COMB      048                 R8=C16
         COMB      232                 CF0=C16
         COMB      232                 CDF0=C16
         COMB      065                 C8=C16
         COMB      067                 C16=C16
AADDTAB  COMB      000                           PHI  + R1
         COMB      011                           R1   + R1
         COMB      014                           I*4  + R1
         COMB      014                           I*2  + R1
         COMB      030                           F0   + R1
         COMB      037                           DF0  + R1
         COMB      014                           R*4  + R1
         COMB      014                           R*8  + R1
         COMB      051                           CF0  + R1
         COMB      058                           CDF0 + R1
         COMB      014                           C*8  + R1
         COMB      014                           C*16 + R1
         COMB      001                           PHI  + I*4
         COMB      012                           R1   + I*4
         COMB      019                           I*4  + I*4
         COMB      014                           I*2  + I*4
         COMB      031                           F0   + I*4
         COMB      038                           DF0  + I*4
         COMB      014                           R*4  + I*4
         COMB      014                           R*8  + I*4
         COMB      052                           CF0  + I*4
         COMB      059                           CDF0 + I*4
         COMB      014                           C*8  + I*4
         COMB      014                           C*16 + I*4
         COMB      002                           PHI  + I*2
         COMB      013                           R1   + I*2
         COMB      020                           I*4  + I*2
         COMB      025                           I*2  + I*2
         COMB      032                           F0   + I*2
         COMB      039                           DF0  + I*2
         COMB      014                           R*4  + I*2
         COMB      014                           R*8  + I*2
         COMB      053                           CF0  + I*2
         COMB      060                           CDF0 + I*2
         COMB      014                           C*8  + I*2
         COMB      014                           C*16 + I*2
         COMB      003                           PHI  + F0
         COMB      014                           R1   + F0
         COMB      014                           I*4  + F0
         COMB      014                           I*2  + F0
         COMB      011                           F0   + F0
         COMB      011                           DF0  + F0
         COMB      014                           R*4  + F0
         COMB      014                           R*8  + F0
         COMB      011                           CF0  + F0
         COMB      011                           CDF0 + F0
         COMB      014                           C*8  + F0
         COMB      014                           C*16 + F0
         COMB      004                           PHI  + DF0
         COMB      014                           R1   + DF0
         COMB      014                           I*4  + DF0
         COMB      014                           I*2  + DF0
         COMB      011                           F0   + DF0
         COMB      011                           DF0  + DF0
         COMB      014                           R*4  + DF0
         COMB      014                           R*8  + DF0
         COMB      011                           CF0  + DF0
         COMB      011                           CDF0 + DF0
         COMB      014                           C*8  + DF0
         COMB      014                           C*16 + DF0
         COMB      005                           PHI  + R*4
         COMB      015                           R1   + R*4
         COMB      021                           I*4  + R*4
         COMB      026                           I*2  + R*4
         COMB      033                           F0   + R*4
         COMB      040                           DF0  + R*4
         COMB      044                           R*4  + R*4
         COMB      014                           R*8  + R*4
         COMB      054                           CF0  + R*4
         COMB      061                           CDF0 + R*4
         COMB      014                           C*8  + R*4
         COMB      014                           C*16 + R*4
         COMB      006                           PHI  + R*8
         COMB      016                           R1   + R*8
         COMB      022                           I*4  + R*8
         COMB      027                           I*2  + R*8
         COMB      034                           F0   + R*8
         COMB      041                           DF0  + R*8
         COMB      045                           R*4  + R*8
         COMB      048                           R*8  + R*8
         COMB      055                           CF0  + R*8
         COMB      062                           CDF0 + R*8
         COMB      014                           C*8  + R*8
         COMB      014                           C*16 + R*8
         COMB      007                           PHI  + CF0
         COMB      014                           R1   + CF0
         COMB      014                           I*4  + CF0
         COMB      014                           I*2  + CF0
         COMB      011                           F0   + CF0
         COMB      011                           DF0  + CF0
         COMB      014                           R*4  + CF0
         COMB      014                           R*8  + CF0
         COMB      011                           CF0  + CF0
         COMB      011                           CDF0 + CF0
         COMB      014                           C*8  + CF0
         COMB      014                           C*16 + CF0
         COMB      008                           PHI  + CDF0
         COMB      014                           R1   + CDF0
         COMB      014                           I*4  + CDF0
         COMB      014                           I*2  + CDF0
         COMB      011                           F0   + CDF0
         COMB      011                           DF0  + CDF0
         COMB      014                           R*4  + CDF0
         COMB      014                           R*8  + CDF0
         COMB      011                           CF0  + CDF0
         COMB      011                           CDF0 + CDF0
         COMB      014                           C*8  + CDF0
         COMB      014                           C*16 + CDF0
         COMB      009                           PHI  + C*8
         COMB      017                           R1   + C*8
         COMB      023                           I*4  + C*8
         COMB      028                           I*2  + C*8
         COMB      035                           F0   + C*8
         COMB      042                           DF0  + C*8
         COMB      046                           R*4  + C*8
         COMB      049                           R*8  + C*8
         COMB      056                           CF0  + C*8
         COMB      063                           CDF0 + C*8
         COMB      065                           C*8  + C*8
         COMB      014                           C*16 + C*8
         COMB      010                           PHI  + C*16
         COMB      018                           R1   + C*16
         COMB      024                           I*4  + C*16
         COMB      029                           I*2  + C*16
         COMB      036                           F0   + C*16
         COMB      043                           DF0  + C*16
         COMB      047                           R*4  + C*16
         COMB      050                           R*8  + C*16
         COMB      057                           CF0  + C*16
         COMB      064                           CDF0 + C*16
         COMB      066                           C*8  + C*16
         COMB      067                           C*16 + C*16
AMPYTAB  COMB      011                           PHI  * R1
         COMB      011                           R1   * R1
         COMB      014                           I*4  * R1
         COMB      014                           I*2  * R1
         COMB      030                           F0   * R1
         COMB      037                           DF0  * R1
         COMB      014                           R*4  * R1
         COMB      014                           R*8  * R1
         COMB      068                           CF0  * R1
         COMB      073                           CDF0 * R1
         COMB      079                           C*8  * R1
         COMB      091                           C*16 * R1
         COMB      011                           PHI  * I*4
         COMB      217                 R1  * I*4
         COMB      219                 I*4  * I*4
         COMB      014                           I*2  * I*4
         COMB      031                           F0   * I*4
         COMB      038                           DF0  * I*4
         COMB      014                           R*4  * I*4
         COMB      014                           R*8  * I*4
         COMB      069                           CF0  * I*4
         COMB      074                           CDF0 * I*4
         COMB      080                           C*8  * I*4
         COMB      092                           C*16 * I*4
         COMB      011                           PHI  * I*2
         COMB      218                 R1  * I*2
         COMB      220                 I*4  *I*2
         COMB      221                 I*2  * I*2
         COMB      032                           F0   * I*2
         COMB      039                           DF0  * I*2
         COMB      014                           R*4  * I*2
         COMB      014                           R*8  * I*2
         COMB      070                           CF0  * I*2
         COMB      075                           CDF0 * I*2
         COMB      081                           C*8  * I*2
         COMB      093                           C*16 * I*2
         COMB      011                           PHI  * F0
         COMB      014                           R1   * F0
         COMB      014                           I*4  * F0
         COMB      014                           I*2  * F0
         COMB      011                           F0   * F0
         COMB      011                           DF0  * F0
         COMB      014                           R*4  * F0
         COMB      014                           R*8  * F0
         COMB      011                           CF0  * F0
         COMB      011                           CDF0 * F0
         COMB      082                           C*8  * F0
         COMB      094                           C*16 * F0
         COMB      011                           PHI  * DF0
         COMB      014                           R1   * DF0
         COMB      014                           I*4  * DF0
         COMB      014                           I*2  * DF0
         COMB      011                           F0   * DF0
         COMB      011                           DF0  * DF0
         COMB      014                           R*4  * DF0
         COMB      014                           R*8  * DF0
         COMB      011                           CF0  * DF0
         COMB      011                           CDF0 * DF0
         COMB      083                           C*8  * DF0
         COMB      095                           C*16 * DF0
         COMB      011                           PHI  * R*4
         COMB      015                           R1   * R*4
         COMB      021                           I*4  * R*4
         COMB      026                           I*2  * R*4
         COMB      033                           F0   * R*4
         COMB      040                           DF0  * R*4
         COMB      044                           R*4  * R*4
         COMB      014                           R*8  * R*4
         COMB      086                           CF0  * R*4
         COMB      076                           CDF0 * R*4
         COMB      084                           C*8  * R*4
         COMB      096                           C*16 * R*4
         COMB      011                           PHI  * R*8
         COMB      016                           R1   * R*8
         COMB      022                           I*4  * R*8
         COMB      027                           I*2  * R*8
         COMB      034                           F0   * R*8
         COMB      041                           DF0  * R*8
         COMB      045                           R*4  * R*8
         COMB      048                           R*8  * R*8
         COMB      087                           CF0  * R*8
         COMB      088                           CDF0 * R*8
         COMB      085                           C*8  * R*8
         COMB      097                           C*16 * R*8
         COMB      011                           PHI  * CF0
         COMB      014                           R1   * CF0
         COMB      014                           I*4  * CF0
         COMB      014                           I*2  * CF0
         COMB      011                           F0   * CF0
         COMB      011                           DF0  * CF0
         COMB      014                           R*4  * CF0
         COMB      014                           R*8  * CF0
         COMB      011                           CF0  * CF0
         COMB      011                           CDF0 * CF0
         COMB      014                           C*8  * CF0
         COMB      014                           C*16 * CF0
         COMB      011                           PHI  * CDF0
         COMB      014                           R1   * CDF0
         COMB      014                           I*4  * CDF0
         COMB      014                           I*2  * CDF0
         COMB      011                           F0   * CDF0
         COMB      011                           DF0  * CDF0
         COMB      014                           R*4  * CDF0
         COMB      014                           R*8  * CDF0
         COMB      011                           CF0  * CDF0
         COMB      011                           CDF0 * CDF0
         COMB      014                           C*8  * CDF0
         COMB      014                           C*16 * CDF0
         COMB      011                           PHI  * C*8
         COMB      014                           R1   * C*8
         COMB      014                           I*4  * C*8
         COMB      014                           I*2  * C*8
         COMB      014                           F0   * C*8
         COMB      014                           DF0  * C*8
         COMB      014                           R*4  * C*8
         COMB      014                           R*8  * C*8
         COMB      071                           CF0  * C*8
         COMB      077                           CDF0 * C*8
         COMB      089                           C*8  * C*8
         COMB      014                           C*16 * C*8
         COMB      011                           PHI  * C*16
         COMB      014                           R1   * C*16
         COMB      014                           I*4  * C*16
         COMB      014                           I*2  * C*16
         COMB      014                           F0   * C*16
         COMB      014                           DF0  * C*16
         COMB      014                           R*4  * C*16
         COMB      014                           R*8  * C*16
         COMB      072                           CF0  * C*16
         COMB      078                           CDF0 * C*16
         COMB      090                           C*8  * C*16
         COMB      098                           C*16 * C*16
ADIVTAB  COMB      011                           PHI  / R1
         COMB      011                           R1   / R1
         COMB      107                           I*4  / R1
         COMB      108                           I*2  / R1
         COMB      030                           F0   / R1
         COMB      037                           DF0  / R1
         COMB      129                           R*4  / R1
         COMB      130                           R*8  / R1
         COMB      068                           CF0  / R1
         COMB      073                           CDF0 / R1
         COMB      079                           C*8  / R1
         COMB      091                           C*16 / R1
         COMB      011                           PHI  / I*4
         COMB      099                           R1   / I*4
         COMB      109                           I*4  / I*4
         COMB      110                           I*2  / I*4
         COMB      031                           F0   / I*4
         COMB      038                           DF0  / I*4
         COMB      131                           R*4  / I*4
         COMB      133                           R*8  / I*4
         COMB      069                           CF0  / I*4
         COMB      074                           CDF0 / I*4
         COMB      080                           C*8  / I*4
         COMB      092                           C*16 / I*4
         COMB      011                           PHI  / I*2
         COMB      100                           R1   / I*2
         COMB      111                           I*4  / I*2
         COMB      112                           I*2  / I*2
         COMB      032                           F0   / I*2
         COMB      039                           DF0  / I*2
         COMB      132                           R*4  / I*2
         COMB      134                           R*8  / I*2
         COMB      070                           CF06 / I*2
         COMB      075                           CDF0 / I*2
         COMB      081                           C*8  / I*2
         COMB      093                           C*16 / I*2
         COMB      011                           PHI  / F0
         COMB      101                           R1   / F0
         COMB      113                           I*4  / F0
         COMB      114                           I*2  / F0
         COMB      011                           F0   / F0
         COMB      011                           DF0  / F0
         COMB      135                           R*4  / F0
         COMB      136                           R*8  / F0
         COMB      011                           CF0  / F0
         COMB      011                           CDF0 / F0
         COMB      082                           C*8  / F0
         COMB      094                           C*16 / F0
         COMB      011                           PHI  / DF0
         COMB      102                           R1   / DF0
         COMB      115                           I*4  / DF0
         COMB      116                           I*2  / DF0
         COMB      011                           F0   / DF0
         COMB      011                           DF0  / DF0
         COMB      138                           R*4  / DF0
         COMB      137                           R*8  / DF0
         COMB      011                           CF0  / DF0
         COMB      011                           CDF0 / DF0
         COMB      083                           C*8  / DF0
         COMB      095                           C*16 / DF0
         COMB      011                           PHI  / R*4
         COMB      015                           R1   / R*4
         COMB      021                           I*4  / R*4
         COMB      026                           I*2  / R*4
         COMB      033                           F0   / R*4
         COMB      040                           DF0  / R*4
         COMB      044                           R*4  / R*4
         COMB      139                           R*8  / R*4
         COMB      086                           CF0  / R*4
         COMB      076                           CDF0 / R*4
         COMB      084                           C*8  / R*4
         COMB      096                           C*16 / R*4
         COMB      011                           PHI  / R*8
         COMB      016                           R1   / R*8
         COMB      022                           I*4  / R*8
         COMB      027                           I*2  / R*8
         COMB      034                           F0   / R*8
         COMB      041                           DF0  / R*8
         COMB      045                           R*4  / R*8
         COMB      048                           R*8  / R*8
         COMB      087                           CF0  / R*8
         COMB      088                           CDF0 / R*8
         COMB      085                           C*8  / R*8
         COMB      097                           C*16 / R*8
         COMB      011                           PHI  / CF0
         COMB      103                           R1   / CF0
         COMB      117                           I*4  / CF0
         COMB      118                           I*2  / CF0
         COMB      011                           F0   / CF0
         COMB      011                           DF0  / CF0
         COMB      140                           R*4  / CF0
         COMB      141                           R*8  / CF0
         COMB      011                           CF0  / CF0
         COMB      011                           CDF0 / CF0
         COMB      152                           C*8  / CF0
         COMB      216                           C*16 / CF0
         COMB      011                           PHI  / CDF0
         COMB      104                           R1   / CDF0
         COMB      119                           I*4  / CDF0
         COMB      120                           I*2  / CDF0
         COMB      011                           F0   / CDF0
         COMB      011                           DF0  / CDF0
         COMB      142                           R*4  / CDF0
         COMB      143                           R*8  / CDF0
         COMB      011                           CF0  / CDF0
         COMB      011                           CDF0 / CDF0
         COMB      154                           C*8  / CDF0
         COMB      153                           C*16 / CDF0
         COMB      011                           PHI  / C*8
         COMB      105                           R1   / C*8
         COMB      121                           I*4  / C*8
         COMB      122                           I*2  / C*8
         COMB      125                           F0   / C*8
         COMB      127                           DF0  / C*8
         COMB      144                           R*4  / C*8
         COMB      146                           R*8  / C*8
         COMB      148                           CF0  / C*8
         COMB      151                           CDF0 / C*8
         COMB      156                           C*8  / C*8
         COMB      155                           C*16 / C*8
         COMB      011                           PHI  / C*16
         COMB      106                           R1   / C*16
         COMB      123                           I*4  / C*16
         COMB      124                           I*2  / C*16
         COMB      126                           F0   / C*16
         COMB      128                           DF0  / C*16
         COMB      147                           R*4  / C*16
         COMB      145                           R*8  / C*16
         COMB      149                           CF0  / C*16
         COMB      150                           CDF0 / C*16
         COMB      215                           C*8  / C*16
         COMB      157                           C*16 / C*16
AEXPTAB  COMB      011                           PHI ** R1
         COMB      011                           R1  ** R1
         COMB      164                           I*4 ** R1
         COMB      165                           I*2 ** R1
         COMB      178                           F0  ** R1
         COMB      179                           DF0 ** R1
         COMB      188                           R*4 ** R1
         COMB      189                           R*8 ** R1
         COMB      202                           CF0 ** R1
         COMB      203                           CDF0** R1
         COMB      208                           C*8 ** R1
         COMB      209                           C*16** R1
         COMB      011                           PHI ** I*4
         COMB      158                           R1  ** I*4
         COMB      166                           I*4 ** I*4
         COMB      167                           I*2 ** I*4
         COMB      180                           F0  ** I*4
         COMB      182                           DF0 ** I*4
         COMB      190                           R*4 ** I*4
         COMB      192                           R*8 ** I*4
         COMB      204                           CF0 ** I*4
         COMB      206                           CDF0** I*4
         COMB      210                           C*8 ** I*4
         COMB      212                           C*16** I*4
         COMB      011                           PHI ** I*2
         COMB      159                           R1  ** I*2
         COMB      168                           I*4 ** I*2
         COMB      169                           I*2 ** I*2
         COMB      181                           F0  ** I*2
         COMB      183                           DF0 ** I*2
         COMB      191                           R*4 ** I*2
         COMB      193                           R*8 ** I*2
         COMB      205                           CF0 ** I*2
         COMB      207                           CDF0** I*2
         COMB      211                           C*8 ** I*2
         COMB      213                           C*16** I*2
         COMB      011                           PHI ** F0
         COMB      160                           R1  ** F0
         COMB      170                           I*4 ** F0
         COMB      171                           I*2 ** F0
         COMB      011                           F0  ** F0
         COMB      011                           DF0 ** F0
         COMB      194                           R*4 ** F0
         COMB      196                           R*8 ** F0
         COMB      214                           CF0 ** F0
         COMB      214                           CDF0** F0
         COMB      214                           C*8 ** F0
         COMB      214                           C*16** F0
         COMB      011                           PHI ** DF0
         COMB      161                           R1  ** DF0
         COMB      172                           I*4 ** DF0
         COMB      173                           I*2 ** DF0
         COMB      011                           F0  ** DF0
         COMB      011                           DF0 ** DF0
         COMB      195                           R*4 ** DF0
         COMB      197                           R*8 ** DF0
         COMB      214                           CF0 ** DF0
         COMB      214                           CDF0** DF0
         COMB      214                           C*8 ** DF0
         COMB      214                           C*16** DF0
         COMB      011                           PHI ** R*4
         COMB      162                           R1  ** R*4
         COMB      174                           I*4 ** R*4
         COMB      175                           I*2 ** R*4
         COMB      184                           F0  ** R*4
         COMB      186                           DF0 ** R*4
         COMB      198                           R*4 ** R*4
         COMB      199                           R*8 ** R*4
         COMB      214                           CF0 ** R*4
         COMB      214                           CDF0** R*4
         COMB      214                           C*8 ** R*4
         COMB      214                           C*16** R*4
         COMB      011                           PHI ** R*8
         COMB      163                           R1  ** R*8
         COMB      176                           I*4 ** R*8
         COMB      177                           I*2 ** R*8
         COMB      185                           F0  ** R*8
         COMB      187                           DF0 ** R*8
         COMB      200                           R*4 ** R*8
         COMB      201                           R*8 ** R*8
         COMB      214                           CF0 ** R*8
         COMB      214                           CDF0** R*8
         COMB      214                           C*8 ** R*8
         COMB      214                           C*16** R*8
         COMB      011                           PHI ** CF0
         COMB      214                           R1  ** CF0
         COMB      214                           I*4 ** CF0
         COMB      214                           I*2 ** CF0
         COMB      214                           F0  ** CF0
         COMB      214                           DF0 ** CF0
         COMB      214                           R*4 ** CF0
         COMB      214                           R*8 ** CF0
         COMB      214                           CF0 ** CF0
         COMB      214                           CDF0** CF0
         COMB      214                           C*8 ** CF0
         COMB      214                           C*16** CF0
         COMB      011                           PHI ** CDF0
         COMB      214                           R1  ** CDF0
         COMB      214                           I*4 ** CDF0
         COMB      214                           I*2 ** CDF0
         COMB      214                           F0  ** CDF0
         COMB      214                           DF0 ** CDF0
         COMB      214                           R*4 ** CDF0
         COMB      214                           R*8 ** CDF0
         COMB      214                           CF0 ** CDF0
         COMB      214                           CDF0** CDF0
         COMB      214                           C*8 ** CDF0
         COMB      214                           C*16** CDF0
         COMB      011                           PHI ** C*8
         COMB      214                           R1  ** C*8
         COMB      214                           I*4 ** C*8
         COMB      214                           I*2 ** C*8
         COMB      214                           F0  ** C*8
         COMB      214                           DF0 ** C*8
         COMB      214                           R*4 ** C*8
         COMB      214                           R*8 ** C*8
         COMB      214                           CF0 ** C*8
         COMB      214                           CDF0** C*8
         COMB      214                           C*8 ** C*8
         COMB      214                           C*16** C*8
         COMB      011                           PHI ** C*16
         COMB      214                           R1  ** C*16
         COMB      214                           I*4 ** C*16
         COMB      214                           I*2 ** C*16
         COMB      214                           F0  ** C*16
         COMB      214                           DF0 ** C*16
         COMB      214                           R*4 ** C*16
         COMB      214                           R*8 ** C*16
         COMB      214                           CF0 ** C*16
         COMB      214                           CDF0** C*16
         COMB      214                           C*8 ** C*16
         COMB      214                           C*16** C*16
ACOMTAB  DC        0H'0'               SHOULD BE HALF-WORD ANYWAY,
*                                      BUT ALIGN IT JUST IN CASE.
*                                      ACOMTAB MUST FOLLOW AEXPTAB
         COMBINE   000,000,001         PHI - R1
         COMBINE   001,001,002         PHI - I4
         COMBINE   002,002,002         PHI - I2
         COMBINE   003,000,001         PHI - F0
         COMBINE   004,000,001         PHI - DF0
         COMBINE   005,005,002         PHI - R4
         COMBINE   006,006,002         PHI - R8
         COMBINE   007,000,001         PHI-CF0
         COMBINE   008,000,001         PHI - CDF0
         COMBINE   009,005,004         PHI - C*8
         COMBINE   010,006,004         I - C*16
         COMBINE   011,000,090         R1+R1
         COMBINE   012,012,005         R1+I4
         COMBINE   013,013,005         R1+I2
         COMBINE   014,000,091
         COMBINE   015,015,006         R1+R4
         COMBINE   016,016,006         R1+R@
         COMBINE   017,015,007         R1+C8
         COMBINE   018,016,007         R1+C16
         COMBINE   019,019,008         I4+I4
         COMBINE   020,001,008         I4+I2
         COMBINE   021,021,009         I4+R4
         COMBINE   022,022,009         I4+R8
         COMBINE   023,021,010         I4+C8
         COMBINE   024,022,010         I4+C16
         COMBINE   025,001,708         I2+I2
         COMBINE   026,021,709         I2+R4
         COMBINE   027,022,709         I2+R8
         COMBINE   028,021,710         I2+C8
         COMBINE   029,022,710         I2+C16
         COMBINE   030,030,011         F0+R1
         COMBINE   031,031,112         F0+I4
         COMBINE   032,031,812         F0+I2
         COMBINE   033,033,005         F0+R4
         COMBINE   034,034,006         F0+R8
         COMBINE   035,033,013         F0+C8
         COMBINE   036,034,007         F0+C16
         COMBINE   037,037,011         DF0+R1
         COMBINE   038,038,112         DF0+I4
         COMBINE   039,038,812         DF0+I2
         COMBINE   040,040,014         DF0+R4
         COMBINE   041,041,005         DF0+R8
         COMBINE   042,040,015         DF0+C8
         COMBINE   043,041,013         DF0+C16
         COMBINE   044,044,008         R4+R4
         COMBINE   045,045,016         R4+R8
         COMBINE   046,044,017         R4+C8
         COMBINE   047,045,018         R4+C16
         COMBINE   048,048,008         R8+R8
         COMBINE   049,049,019         R8+C8
         COMBINE   050,048,017         R8+C16
         COMBINE   051,030,020         CF0+R1
         COMBINE   052,031,021         CF0+I4
         COMBINE   053,031,721         CF0+I2
         COMBINE   054,033,022         CF0+R4
         COMBINE   055,055,023         CF0+R8
         COMBINE   056,056,024         CF0+C8
         COMBINE   057,055,025         CF0+C16
         COMBINE   058,037,020         CDF0+R1
         COMBINE   059,038,021         CDF0+I4
         COMBINE   060,038,721         CDF0+I2
         COMBINE   061,040,014         CDF0+R4
         COMBINE   062,062,022         CDF0+R8
         COMBINE   063,040,027         CDF0+C8
         COMBINE   064,062,024         CDF0+C16
         COMBINE   065,005,028         C8+C8
         COMBINE   066,040,029         C8+C16
         COMBINE   067,067,028         C16+C16
         COMBINE   068,030,030         CF0*R1
         COMBINE   069,031,031,        CF0*I4
         COMBINE   070,031,731         CF0*I2
         COMBINE   071,071,032         CF0*C8
         COMBINE   072,072,100         CF0*C16
         COMBINE   073,037,030         CDF0+R1
         COMBINE   074,038,031         CDF0*I4
         COMBINE   075,038,731         CDF0*I2
         COMBINE   076,076,034         CDF0*R4
         COMBINE   077,077,035         CDF0*C8
         COMBINE   078,078,032         CDF0*C16
         COMBINE   079,079,036         C8*R1
         COMBINE   080,080,037         C8*I4
         COMBINE   081,080,737         C8*I2
         COMBINE   082,082,038         C8*F0
         COMBINE   083,083,039         C8*DF0
         COMBINE   084,005,040         C8*R4
         COMBINE   085,040,041         C8*R8
         COMBINE   086,056,042         CF0*R4
         COMBINE   087,055,043         CF0*R8
         COMBINE   088,062,042         CDF0*R8
         COMBINE   089,089,044         C8*C8
         COMBINE   090,090,045         C8*C16
         COMBINE   091,091,036         C16*R1
         COMBINE   092,092,037         C16*I4
         COMBINE   093,092,737         C16*I2
         COMBINE   094,094,038         C16*F0
         COMBINE   095,095,055         C16*DF0
         COMBINE   096,096,046         C16*R4
         COMBINE   097,067,040         C16*R8
         COMBINE   098,006,044         C16*C16
         COMBINE   099,099,047         R1/I4
         COMBINE   100,100,110         R1/I2
         COMBINE   101,101,099         R1/F0
         COMBINE   102,102,099         R1/DF0
         COMBINE   103,103,094         R1/CF0
         COMBINE   104,104,094         R1/CDF0
         COMBINE   105,105,074         R1/C8
         COMBINE   106,106,074         R1/C16
         COMBINE   107,107,049         I4/R1
         COMBINE   108,107,749         I2/R1
         COMBINE   109,109,009         I4/I4
         COMBINE   110,109,709         I2/I4
         COMBINE   111,111,109         I4/I2
         COMBINE   112,111,809         I2/I2
         COMBINE   113,113,049         I4/F0
         COMBINE   114,113,749         I2/F0
         COMBINE   115,115,049         I4/DF0
         COMBINE   116,115,749         I2/DF0
         COMBINE   117,117,050         I4/CF0
         COMBINE   118,117,750         I2/CF0
         COMBINE   119,119,050         I4/CDF0
         COMBINE   120,119,750         I2/CDF0
         COMBINE   121,121,051         I4/C8
         COMBINE   122,121,751         I2/C8
         COMBINE   123,123,051         I4/C16
         COMBINE   124,123,751         I2/C16
         COMBINE   125,125,052         F0/C8
         COMBINE   126,126,054         F0/C16
         COMBINE   127,127,053         DF0/C8
         COMBINE   128,128,052         F0/C16
         COMBINE   129,129,056         R4/R1
         COMBINE   130,130,056         R8/R1
         COMBINE   131,131,057         R4/I4
         COMBINE   132,131,757         R4/I2
         COMBINE   133,133,057         R8/I4
         COMBINE   134,133,757         R8/I2
         COMBINE   135,135,058         R4/F0
         COMBINE   136,136,058         R8/F0
         COMBINE   137,137,058         R8/DF0
         COMBINE   138,138,056         R4/DF0
         COMBINE   139,139,059         R8/R4
         COMBINE   140,140,056         R4/CF0
         COMBINE   141,141,060         R8/CF0
         COMBINE   142,142,049         R4/CDF0
         COMBINE   143,143,056         R8/CDF0
         COMBINE   144,144,085         R4/C8
         COMBINE   145,145,085         R8/C16
         COMBINE   146,146,062         R8/C8
         COMBINE   147,147,062         R4/C16
         COMBINE   148,148,032         CF0/C8
         COMBINE   149,149,063         CF0/C16
         COMBINE   150,150,032         CDF0/C16
         COMBINE   151,151,035         CDF0/C8
         COMBINE   152,152,064         C8/CF0
         COMBINE   153,153,064         C16/CDF0
         COMBINE   154,154,065         C8/CDF0
         COMBINE   155,155,066         C16/C8
         COMBINE   156,156,044         C8/C8
         COMBINE   157,157,044         C16/C16
         COMBINE   158,158,067         R1**I4
         COMBINE   159,159,067         R1**I2
         COMBINE   160,160,098         R1**F0
         COMBINE   161,161,094         R1**DF0
         COMBINE   162,162,068         R1**R4
         COMBINE   163,163,069         R1**R8
         COMBINE   164,164,049         I4**R1
         COMBINE   165,164,749         I2**R1
         COMBINE   166,166,070         I4**I4
         COMBINE   167,166,770         I2**I4
         COMBINE   168,168,070         I4**I2
         COMBINE   169,168,770         I2**I2
         COMBINE   170,170,071         I2**F0
         COMBINE   171,170,771         I2**F0
         COMBINE   172,172,050         I4**F0
         COMBINE   173,172,750         I2**DF0
         COMBINE   174,174,072         I4**R4
         COMBINE   175,174,772         I2**R4
         COMBINE   176,176,073         I4**R8
         COMBINE   177,176,773         I2**R8
         COMBINE   178,178,094         F0**R1
         COMBINE   179,179,095         DF0**R1
         COMBINE   180,180,069         F0**I4
         COMBINE   181,180,769         F0**I2
         COMBINE   182,182,067         DF0**I4
         COMBINE   183,182,767         DF0**I2
         COMBINE   184,184,068         F0**R4
         COMBINE   185,185,069         F0**R8
         COMBINE   186,186,012         DF0**R4
         COMBINE   187,187,067         DF0**R8
         COMBINE   188,188,049         R4**R1
         COMBINE   189,189,056         R8**R1
         COMBINE   190,190,075         R4**I4
         COMBINE   191,190,775         R4**I2
         COMBINE   192,192,070         R8**I4
          COMBINE  193,192,790          R8**I2
         COMBINE   194,194,076         R4**F0
         COMBINE   195,195,077         R4**DF0
         COMBINE   196,196,078         R8**F0
         COMBINE   197,197,079         R8**DF0
         COMBINE   198,198,080         R4**R4
         COMBINE   199,199,057         R8**R4
         COMBINE   200,200,075         R4**R@
         COMBINE   201,201,070         R8**R8
         COMBINE   202,202,097         CF0**R1
         COMBINE   203,203,093         CDF0**R1
         COMBINE   204,204,081         CF0**I4
         COMBINE   205,204,781         CF0**I2
         COMBINE   206,206,067         CDF0**I4
         COMBINE   207,206,767         CDF0**I2
         COMBINE   208,208,082         C8**R1
         COMBINE   209,209,101         C16**R1
         COMBINE   210,210,083         C8**I4
         COMBINE   211,210,783         C8**I2
         COMBINE   212,212,084         C16**I4
         COMBINE   213,212,784         C16**I2
         COMBINE   214,000,092
         COMBINE   215,215,045
         COMBINE   216,216,089         C16/CF0
         COMBINE   217,217,005         R1*I4
         COMBINE   218,218,005         R1*I2
         COMBINE   219,219,008         I4*I4
         COMBINE   220,220,008         I4*I2
         COMBINE   221,220,708         I2*I2
         COMBINE   222,000,102
         COMBINE   223,223,185
         COMBINE   224,224,185
         COMBINE   225,225,067
         COMBINE   226,226,088
         COMBINE   227,227,088
         COMBINE   228,228,003
         COMBINE   229,226,086
         COMBINE   230,227,086
         COMBINE   231,000,104
         COMBINE   232,000,103
         COMBINE   233,017,047
         COMBINE   234,020,007
         COMBINE   235,014,009
         COMBINE   236,018,009
         COMBINE   237,004,038
         COMBINE   238,008,038
         COMBINE   239,011,016
         COMBINE   240,007,047
         COMBINE   241,009,009
         COMBINE   242,003,007
         COMBINE   243,010,047
         COMBINE   244,003,047
         EJECT
*  DUMMY OBJECT CODE
ARICD000 EQU       *
*
ARICD002 EQU       *
         LH        R1,P(I)
         ORG       *-2
*
ARICD015 EQU       *
         BAL       R14,XFLOAT10
         AE        F0,P1(I)
         LE        F2,P2(I)
         ORG       *-2
*
ARICD016 EQU       *
         BAL       R14,XFLOAT10
         AD        F0,P1(I)
         LD        F2,P2(I)
         ORG       *-2
*
ARICD019 EQU       *
         L         R1,P(I)
ARICD012 EQU       *
         A         R1,P(I)
         ORG       *-2
*
ARICD022 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT30
         AD        F0,P(I)             2
         LD        F2,P2(I)
         ORG       *-2
*
ARICD001 EQU       *
         L         R1,P(I)             1
ARICD013 EQU       *
         AH        R1,P(I)             2
         ORG       *-2
*
ARICD021 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT30
         AE        F0,P(I)             2
         LE        F2,P(I)
         ORG       *-2
*
ARICD044 EQU       *
         LE        F0,P(I)             1
ARICD033 EQU       *
         AE        F0,P1(I)            2
         LE        F2,P2(I)
*
ARICD045 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD048 EQU       *
         LD        F0,P(I)             1
         ORG       *-2
         LDR       F0,F6
ARICD041 EQU       *
         AD        F0,P(I)             2
         LD        F2,P(I)
         ORG       *-2
*
ARICD055 EQU       *
         LER       F6,F2
         LDR       F2,F6
ARICD034 EQU       *
         LER       F6,F0
         LDR       F0,F6
         AD        F0,P1(I)            2
         LD        F2,P2(I)
         ORG       *-2
*
ARICD072 EQU       *
         LER       F6,F0
         LDR       F0,F6
         LER       F6,F2
         LDR       F2,F6
ARICD078 EQU       *
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCMULT16
*
ARICD077 EQU       *
         LE        F6,P1(I)            2
         LDR       F4,F6
         LE        F6,P2(I)
         BAL       R14,XCMULT16
*
ARICD079 EQU       *
         LE        F0,P1(I)            1
         LE        F2,P2(I)
ARICD030 EQU       *
         BAL       R14,XFLOAT14
         MER       F0,F4
         MER       F2,F4
*
ARICD080 EQU       *
         LE        F0,P1(I)            1
         LE        F2,P2(I)
ARICD031 EQU       *
         L         R3,P(I)             2
         BAL       R14,XFLOAT34
         MER       F0,F4
         MER       F2,F4
*
ARICD082 EQU       *
         LER       F6,F0
         LE        F0,P1(I)            1
         LE        F2,P2(I)
         MER       F0,F6
         MER       F2,F6
*
ARICD083 EQU       *
         LE        F6,P1(I)            1
         LDR       F4,F0
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
         MDR       F0,F4
         MDR       F2,F4
*
ARICD005 EQU       *
         LE        F0,P1(I)            1
         LE        F2,P2(I)
ARICD056 EQU       *
         AE        F0,P1(I)            2
         AE        F2,P2(I)
         ORG       *-2
*
ARICD049 EQU       *
         LD        F0,P(I)             1
ARICD040 EQU       *
         LE        F6,P1(I)            1
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
ARICD062 EQU       *
         AD        F0,P1(I)            2
         AD        F2,P2(I)
         ORG       *-2
*
ARICD089 EQU       *
         LE        F0,P1(I)            1
         LE        F2,P2(I)
ARICD071 EQU       *
         LE        F4,P1(I)            2
         LE        F6,P2(I)
         BAL       R14,XCMULT8
*
ARICD090 EQU       *
         LE        F6,P1(I)            1
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCMULT16
*
ARICD091 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
ARICD037 EQU       *
         BAL       R14,XFLOAT14
         MDR       F0,F4
         MDR       F2,F4
*
ARICD092 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
ARICD038 EQU       *
         L         R3,P(I)             2
         BAL       R14,XFLOAT34
         MDR       F0,F4
         MDR       F2,F4
*
ARICD094 EQU       *
         LER       F6,F0
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         MDR       F0,F6
         MDR       F2,F6
*
ARICD095 EQU       *
         LDR       F6,F0
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         MDR       F0,F6
         MDR       F2,F6
         SDR       F6,F6
*
ARICD096 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
ARICD076 EQU       *
         LE        F6,P(I)             2
         MDR       F0,F6
         MDR       F2,F6
*
ARICD067 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         AD        F0,P1(I)            2
         AD        F2,P2(I)
         ORG       *-2
*
ARICD006 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCMULT16
*
ARICD101 EQU       *
         LER       F4,F0
         BAL       R14,XFLOAT10
         DER       F0,F4
*
ARICD102 EQU       *
         LDR       F4,F0
         BAL       R14,XFLOAT10
         DDR       F0,F4
*
ARICD103 EQU       *
         BAL       R14,XFLOAT14
         SER       F6,F6
         BAL       R14,XCDIV28
*
ARICD104 EQU       *
         BAL       R14,XFLOAT14
         SDR       F6,F6
         BAL       R14,XCDIV216
*
ARICD105 EQU       *
         LE        F4,P1(I)
         LE        F6,P2(I)
ARICD003 BAL       R14,XFLOAT10        2
ARICD004 SER       F2,F2
         BAL       R14,XCDIV18
*
ARICD106 EQU       *
         LD        F4,P1(I)
         LD        F6,P2(I)
ARICD007 BAL       R14,XFLOAT10        2
ARICD008 SDR       F2,F2
         BAL       R14,XCDIV116
*
ARICD107 EQU       *
         L         R0,P(I)             1
         LR        R2,R1
         SRDA      R0,32
         DR        R0,R2
*
ARICD109 EQU       *
         L         R0,P(I)             1
         ORG       *-2
ARICD099 EQU       *
         LR        R0,R1
         SRDA      R0,32
         D         R0,P(I)
         ORG       *-2
*
ARICD111 EQU       *
         L         R0,P(I)             1
         ORG       *-2
ARICD100 EQU       *
         LR        R0,R1
         SRDA      R0,32
         LH        R2,P(I)
         DR        R0,R2
*
ARICD113 EQU       *
         L         R3,P(I)             1
         LER       F4,F0
         BAL       R14,XFLOAT30
         DER       F0,F4
*
ARICD115 EQU       *
         L         R3,P(I)             1
         LDR       F4,F0
         BAL       R14,XFLOAT30
         DDR       F0,F4
*
ARICD117 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT34
         SER       F6,F6
         BAL       R14,XCDIV28
*
ARICD119 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT34
         SDR       F6,F6
         BAL       R14,XCDIV216
*
ARICD121 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT30
         SER       F2,F2
         LE        F4,P1(I)            2
         LE        F6,P2(I)
         BAL       R14,XCDIV18
*
ARICD123 EQU       *
         L         R3,P(I)             1
         BAL       R14,XFLOAT30
         SDR       F2,F2
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD127 EQU       *
         LE        F6,P1(I)            2
         LDR       F4,F6
         LE        F6,P2(I)
         SDR       F2,F2
         BAL       R14,XCDIV116
*
ARICD129 EQU       *
         LE        F0,P(I)             1
         BAL       R14,XFLOAT14
         DER       F0,F4
*
ARICD130 EQU       *
         LD        F0,P(I)             1
         BAL       R14,XFLOAT14
         DDR       F0,F4
*
ARICD131 EQU       *
         LE        F0,P(I)             1
         L         R3,P(I)             2
         BAL       R14,XFLOAT34
         DER       F0,F4
*
ARICD133 EQU       *
         LD        F0,P(I)             1
         L         R3,P(I)
         BAL       R14,XFLOAT34
         DDR       F0,F4
*
ARICD135 EQU       *
         LER       F2,F0
         LE        F0,P(I)             1
         DER       F0,F2
*
ARICD136 EQU       *
         LER       F6,F0
         LD        F0,P(I)             1
         DDR       F0,F6
*
ARICD137 EQU       *
         LDR       F2,F0
         LD        F0,P(I)             1
         DDR       F0,F2
*
ARICD138 EQU       *
         LE        F6,P(I)             1
         LDR       F2,F0
         LDR       F0,F6
         DDR       F0,F2
*
ARICD139 EQU       *
         LD        F0,P(I)             1
         LE        F6,P(I)             2
         DDR       F0,F6
*
ARICD140 EQU       *
         LE        F4,P(I)             1
         SER       F6,F6
         BAL       R14,XCDIV28
*
ARICD141 EQU       *
         LER       F6,F0
         LDR       F0,F6
         LER       F6,F2
         LDR       F2,F6
ARICD143 EQU       *
         LD        F4,P(I)             1
         SDR       F6,F6
         BAL       R14,XCDIV216
*
ARICD142 EQU       *
         LE        F6,P(I)             1
         LDR       F4,F6
         SDR       F6,F6
         BAL       R14,XCDIV216
*
ARICD144 EQU       *
         LE        F0,P(I)             1
ARICD125 EQU       *
         LE        F4,P1(I)            2
         LE        F6,P2(I)
         SER       F2,F2
         BAL       R14,XCDIV18
*
ARICD145 EQU       *
         LD        F0,P(I)             1
ARICD128 EQU       *
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         SDR       F2,F2
         BAL       R14,XCDIV116
*
ARICD146 EQU       *
         LD        F0,P(I)             1
         SDR       F2,F2
ARICD151 EQU       *
         LE        F6,P1(I)            2
         LDR       F4,F6
         LE        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD147 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD126 EQU       *
         LER       F6,F0
         LDR       F0,F6
         LD        F4,P1(I)            2
         SDR       F2,F2
         LD        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD149 EQU       *
         LER       F6,F0
         LDR       F0,F6
         LER       F6,F2
         LDR       F2,F6
ARICD150 EQU       *
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD152 EQU       *
         LE        F4,P1(I)            1
         LE        F6,P2(I)
         BAL       R14,XCDIV28
*
ARICD153 EQU       *
         LD        F4,P1(I)            1
         LD        F6,P2(I)
         BAL       R14,XCDIV216
*
ARICD154 EQU       *
         LE        F6,P1(I)            1
         LDR       F4,F6
         LE        F6,P2(I)
         BAL       R14,XCDIV216
*
ARICD155 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         LE        F6,P1(I)            2
         LDR       F4,F6
         LE        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD156 EQU       *
         LE        F0,P1(I)            1
         LE        F2,P2(I)
ARICD148 EQU       *
         LE        F4,P1(I)            2
         LE        F6,P2(I)
         BAL       R14,XCDIV18
*
ARICD157 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         LD        F4,P1(I)            2
         LD        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD162 EQU       *
         LE        F6,P(I)             2
         ORG       *-2
ARICD160 EQU       *
         LER       F6,F0
         LDR       F2,F6
         BAL       R14,XFLOAT10
         BAL       R14,XR8EXPR8
*
ARICD163 EQU       *
         LD        F2,P(I)             2
         ORG       *-2
ARICD161 EQU       *
         LDR       F2,F0
         BAL       R14,XFLOAT10
         BAL       R14,XR8EXPR8
*
ARICD164 EQU       *
         L         R0,P(I)             1
         LR        R4,R1
         LR        R1,R0
         BAL       R14,XIEXPI
*
ARICD166 EQU       *
         L         R1,P(I)             1
ARICD158 EQU       *
         L         R4,P(I)             2
         BAL       R14,XIEXPI
*
ARICD168 EQU       *
         L         R1,P(I)             1
ARICD159 EQU       *
         LH        R4,P(I)             2
         BAL       R14,XIEXPI
*
ARICD170 EQU       *
         L         R3,P(I)             1
         LER       F6,F0
         LDR       F2,F6
         BAL       R14,XFLOAT30
         BAL       R14,XR8EXPR8
*
ARICD172 EQU       *
         L         R3,P(I)             1
         LDR       F2,F0
         BAL       R14,XFLOAT30
         BAL       R14,XR8EXPR8
*
ARICD174 EQU       *                                               V1L3
         LE        F6,P(I)             2                           V1L3
         ORG       *-2                                             V1L3
ARICD176 EQU       *                                               V1L3
         LD        F2,P(I)             2                           V1L3
         ORG       *-2                                             V1L3
         LDR       F2,F6                                           V1L3
         L         R3,P(I)             1                           V1L3
         BAL       R14,XFLOAT30                                    V1L3
         BAL       R14,XR8EXPR8                                    V1L3
*
ARICD180 EQU       *
         L         R4,P(I)             2
         ORG       *-2
ARICD178 LR        R4,R1
         LER       F6,F0
         LDR       F0,F6
         BAL       R14,XR8EXPI
*
ARICD182 EQU       *
         L         R4,P(I)             2
         ORG       *-2
ARICD179 EQU       *
         LR        R4,R1
         BAL       R14,XR8EXPI
*
ARICD184 EQU       *
         LE        F6,P(I)             2
         ORG       *-2
ARICD185 EQU       *
         LD        F2,P(I)             2
         ORG       *-2
         LDR       F2,F6
         LER       F6,F0
         LDR       F0,F6
         BAL       R14,XR8EXPR8
*
ARICD188 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD189 EQU       *
         LD        F0,P(I)             1
         ORG       *-2
         LDR       F0,F6
         LR        R4,R1
         BAL       R14,XR8EXPI
*
ARICD190 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD192 EQU       *
         LD        F0,P(I)             1
         ORG       *-2
         LDR       F0,F6
         L         R4,P(I)             2
         BAL       R14,XR8EXPI
*
ARICD194 EQU       *
         LER       F6,F0
         LDR       F2,F6
         LE        F6,P(I)             1
         LDR       F0,F6
         BAL       R14,XR8EXPR8
*
ARICD195 EQU       *
         LDR       F2,F0
         LE        F6,P(I)             1
         LDR       F0,F6
         BAL       R14,XR8EXPR8
*
ARICD196 EQU       *
         LER       F6,F0
         LDR       F2,F6
         LD        F0,P(I)             1
         BAL       R14,XR8EXPR8
*
ARICD197 EQU       *
         LDR       F2,F0
         LD        F0,P(I)             1
         BAL       R14,XR8EXPR8
*
ARICD198 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD199 EQU       *
         LD        F0,P(I)             1
         ORG       *-2
         LDR       F0,F6
ARICD186 EQU       *
         LE        F6,P(I)             2
         LDR       F2,F6
         BAL       R14,XR8EXPR8
*
ARICD200 EQU       *
         LE        F6,P(I)             1
         ORG       *-2
ARICD201 EQU       *
         LD        F0,P(I)             1
         ORG       *-2
         LDR       F0,F6
ARICD187 EQU       *
         LD        F2,P(I)             2
         BAL       R14,XR8EXPR8
*
ARICD204 EQU       *
         L         R4,P(I)             2
         ORG       *-2
ARICD202 EQU       *
         LR        R4,R1
         LER       F6,F0
         LDR       F0,F6
         LER       F6,F2
         LDR       F2,F6
         BAL       R14,XC16EXPI
*
ARICD208 EQU       *
         LE        F6,P1(I)            1
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
ARICD203 EQU       *
         LR        R4,R1
         BAL       R14,XC16EXPI
*
ARICD209 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         LR        R4,R1
         BAL       R14,XC16EXPI
*
ARICD210 EQU       *
         LE        F6,P1(I)            1
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
ARICD206 EQU       *
         L         R4,P(I)
         BAL       R14,XC16EXPI
*
ARICD212 EQU       *
         LD        F0,P1(I)            1
         LD        F2,P2(I)
         L         R4,P(I)             2
         BAL       R14,XC16EXPI
*
ARICD215 EQU       *
         LE        F6,P1(I)
         LDR       F0,F6
         LE        F6,P2(I)
         LDR       F2,F6
         LD        F4,P1(I)
         LD        F6,P2(I)
         BAL       R14,XCDIV116
*
ARICD216 EQU       *
         LER       F6,F0
         LDR       F0,F6
         LER       F6,F2
         LDR       F2,F6
         LD        F4,P1(I)
         LD        F6,P2(I)
         BAL       R14,XCDIV216
*
ARICD219 EQU       *
         L         R1,P(I)
ARICD217 EQU       *
         M         R0,P(I)
         ORG       *-2
*
ARICD220 EQU       *
         L         R1,P(I)             1
ARICD218 EQU       *
         MH        R1,P(I)             2
         ORG       *-2
*
ARICD009 EQU       *
         LE        F6,P(I)
         ORG       *-2
ARICD010 EQU       *
         LER       F6,F0
         LDR       F0,F6
         SDR       F2,F2
*
ARICD011 EQU       *
         LE        F0,P(I)
         SER       F2,F2
*
ARICD014 EQU       *
         LE        F6,P(I)
         ORG       *-2
ARICD017 EQU       *
         LER       F6,F0
         BAL       R14,XFIX61
*
ARICD018 LD        F0,P(I)
ARICD020 EQU       *
         BAL       R14,XFIX01
*
ARICD223 IC        R1,P(I)
ARICD226 IC        R0,P(I)
         OR        R1,R0
*
ARICD224 IC        R1,P(I)
ARICD227 IC        R0,P(I)
         NR        R1,R0
*
ARICD225 IC        R1,P(I)
ARICD228 X         R1,XTRUE
         EJECT
*  OUTPUTTING ROUTINES
         USING     ZR1,R1
         PRINT     ON,GEN
ARTN000  DC        0H'0'
         USING     *,R15
ARTN001  OI        ASWAPSW,X'01'
         L         R2,KFM1
         B         ACHSIGN
*
ARTN002  OI        ASWAPSW,X'01'
         BAL       R14,ANDSS2
         USING     *,R14
         AFILL     ,1,2
         AOUT2     4
*
ARTN004  OI        ASWAPSW,X'01'
         BAL       R14,ANDSS2
         USING     *,R14
         AFILL     ,1,2,,5,6
ARTN026  BALR      R14,0
         USING     *,R14
         AOUT2     8
*
ARTN003  DS        0C
         AOUT3     4
*
ARTN017  BAL       R14,ANDSS1
         AFILL     ,1,2
         BALR      R15,0
         USING     *,R15
ARTN007  AOUT1     4
         USING     *,R15
         B         ARTN013
*
ARTN709  NI        ADUMCODE,X'4F'
ARTN009  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     8
         USING     *,R15
         B         ARTN005
*
         USING     *,R15
ARTN011  AFILL     4,,
         B         ARTN095
*
ARTN016  BAL       R14,ANDSS1
         AFILL     ,1,2
         BALR      R15,0
         USING     *,R15
ARTN047  AOUT1     6
         USING     *,R15
         B         ARTN005
*
ARTN018  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     6
         USING     *,R15
         B         ARTN013
*
ARTN710  NI        ADUMCODE,X'4F'
ARTN010  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     8
ARTN013  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     0,1,2,,5,6
         AOUT6     8
*
ARTN019  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ARTN015  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     ,1,2,4,7,8
         AOUT6     12
*
ARTN721  NI        ADUMCODE,X'4F'
ARTN021  AFILL     8
         BAL       R14,ANDSS2
         USING     *,R14
         B         ASRTN012
*
         USING     *,R15
ARTN023  AOUT1     8
         USING     *,R15
         B         ARTN005
*
ARTN708  NI        ADUMCODE,X'4F'
ARTN008  BAL       R14,ANDSS1
         AFILL     ,1,2
         BALR      R15,0
         USING     *,R15
ARTN006  AOUT1     4
ARTN022  EQU       *
ARTN005  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     0,1,2
         AOUT2     4
*
ARTN027  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     4,1,2,10,7,8
         AOUT2     12
*
ARTN029  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1278
         USING     *,R14
         AOUT1     12
         USING     *,R15
         B         ARTN024
*
ARTN028  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         BALR      R15,0
         USING     *,R15
ARTN025  AOUT1     8
ARTN024  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     0,1,2,4,5,6
         AOUT2     8
*
ARTN046  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         AOUT1     8
ARTN034  BAL       R14,ANDSS2
         AFILL     ,1,2
         BALR      R15,0
         USING     *,R15
ARTN030  AFILL     4,,,6,,
         B         ARTN099
*
ARTN036  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         AFILL     12,,,14,,
         B         ASRTN053
*
ARTN041  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1278
         USING     *,R14
         AOUT1     12
         USING     *,R15
         B         ARTN042
*
ARTN044  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         BALR      R15,0
         USING     *,R15
ARTN100  EQU       *
         AOUT1     8
         USING     *,R15
         LA        R14,ASRTN038
         B         ANDSS2
*
ARTN749  NI        ADUMCODE,X'4F'
ARTN049  BAL       R14,ANDSS1
         USING     *,R14
         B         ASRTN031
*
ARTN751  NI        ADUMCODE,X'4F'
ARTN051  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     10
         USING     *,R15
         B         ARTN032
*
         USING     *,R15
ARTN055  AFILL     10,,,12,,
         AOUT1     2
         USING     *,R15
ARTN101  LA        R14,ASRTN052
         B         ANDSS1
*
ARTN085  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ARTN052  BAL       R14,ANDSS2
         USING     *,R14
ASRTN052 BAL       R14,ASR1256
         USING     *,R14
         B         ARTN097
*
         USING     *,R15
ARTN058  AOUT1     2
         USING     *,R15
         LA        R14,ASRTN026
         B         ANDSS1
*
ARTN059  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ARTN014  BAL       R14,ANDSS2
ASRTN026 AFILL     ,1,2
ARTN020  AFILL     4,,
ARTN095  BALR      R14,0
         USING     *,R14
         AOUT2     6
*
ARTN062  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     6
         USING     *,R15
         B         ARTN035
*
         USING     *,R15
ARTN063  AOUT1     8
         USING     *,R15
         B         ARTN032
*
ARTN045  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1278
         USING     *,R14
         AOUT1     12
ARTN032  BAL       R14,ANDSS2
         USING     *,R14
         LA        R14,ASRTN038
         BR        R14
*
         USING     *,R15
ARTN065  LA        R14,ASRTN037
         B         ANDSS1
*
ARTN066  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         AOUT1     8
         USING     *,R15
         B         ARTN035
*
ARTN772  NI        ADUMCODE+6,X'4F'                                V1L3
ARTN072  BAL       R14,ANDSS2                                      V1L3
         USING     *,R14
         AFILL     ,1,2
         AOUT1     6                                               V1L3
         USING     *,R15                                           V1L3
         B         ASRTN073                                        V1L3
         USING     *,R15
ARTN068  LA        R14,ASRTN050
         B         ANDSS2
*
ARTN750  NI        ADUMCODE,X'4F'
ARTN050  BAL       R14,ANDSS1
         USING     *,R14
ASRTN050 AFILL     ,1,2
         B         ARTN097
*
         USING     *,R15
ARTN054  AOUT1     4
ARTN035  BAL       R14,ANDSS2
         USING     *,R14
ASRTN037 BAL       R14,ASR1278
ARTN097  AOUT3     14
*
         USING     *,R15
ARTN769  NI        ADUMCODE,X'4F'
         B         ARTN069
ARTN773  NI        ADUMCODE+4,X'4F'                                V1L3
ARTN073  BAL       R14,ANDSS2                                      V1L3
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ASRTN073 BAL       R14,ANDSS1                                      V1L3
         USING     *,R14                                           V1L3
         AFILL     ,1,2                                            V1L3
         B         ARTN098                                         V1L3
ARTN069  BAL       R14,ANDSS2
         USING     *,R14
         B         ASRTN031
*
         USING     *,R15
ARTN731  NI        ADUMCODE,X'4F'
         B         ARTN031
ARTN737  NI        ADUMCODE+8,X'4F'
ARTN037  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         AOUT1     8
ARTN031  BAL       R14,ANDSS2
         AFILL     8,,,10,,
ASRTN031 AFILL     ,1,2
         BALR      R14,0
         USING     *,R14
         B         ARTN098
*
ARTN074  BAL       R14,ANDSS2
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         B         ASRTN042
*
ARTN775  NI        ADUMCODE+6,X'4F'
ARTN075  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     6
         USING     *,R15
         B         ARTN067
*
         USING     *,R15
ARTN076  AOUT1     4
         USING     *,R15
         B         ARTN056
*
         USING     *,R15
ARTN077  AOUT1     2
         USING     *,R15
         B         ARTN056
*
         USING     *,R15
ARTN060  AOUT1     8
ARTN056  BALR      R15,0
         USING     *,R15
         LA        R14,ASRTN012
         B         ANDSS1
*
         USING     *,R15
ARTN078  AOUT1     4
         USING     *,R15
         LA        R14,ASRTN067
         B         ANDSS1
*
         USING     *,R15
ARTN079  AOUT1     2
         USING     *,R15
         LA        R14,ASRTN067
         B         ANDSS1
*
ARTN080  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     6
         USING     *,R15
         B         ARTN012
*
ARTN757  NI        ADUMCODE+4,X'4F'
ARTN057  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ARTN012  BAL       R14,ANDSS2
ASRTN012 AFILL     ,1,2
ARTN094  BALR      R14,0
         USING     *,R14
         AOUT2     10
*
ARTN781  NI        ADUMCODE,X'4F'
         BALR      R15,0
         USING     *,R15
ARTN081  LA        R14,ASRTN071
         B         ANDSS2
*
ARTN771  NI        ADUMCODE,X'4F'
ARTN071  BAL       R14,ANDSS1
         USING     *,R14
ASRTN071 AFILL     ,1,2
         B         ASRTN053
*
ARTN053  BAL       R14,ANDSS2
         USING     *,R14
         BAL       R14,ASR1278
ASRTN053 AOUT3     16
*
ARTN082  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1278
         USING     *,R14
         B         ASRTN042
*
ARTN039  BAL       R14,ANDSS1
         AFILL     ,1,2,,9,10
         AFILL     14,,,16,,
ASRTN042 AOUT3     18
*
ARTN783  NI        ADUMCODE+12,X'4F'
ARTN083  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1278
         USING     *,R14
         AOUT1     12
         USING     *,R15
         B         ARTN067
*
ARTN784  NI        ADUMCODE+8,X'4F'
ARTN084  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         USING     *,R14
         AOUT1     8
         USING     *,R15
         B         ARTN067
*
         USING     *,R15
ARTN767  NI        ADUMCODE,X'4F'
         B         ARTN067
         USING     *,R15
ARTN790  NI        ADUMCODE+4,X'4F'
         B         ARTN070
ARTN770  NI        ADUMCODE,X'4F'
ARTN070  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
ARTN067  BAL       R14,ANDSS2
         USING     *,R14
ASRTN067 AFILL     ,1,2
         B         ARTN099
*
         USING     *,R15
ARTN088  LA        R14,ARTN087
         B         ANDSS1
*
ARTN185  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     4
         USING     *,R15
         B         ARTN086
*
         USING     *,R15
ARTN089  AOUT1     8
         USING     *,R15
         B         ARTN064
*
ARTN809  NI        ADUMCODE,X'4F'
ARTN109  BAL       R14,ANDSS1
         USING     *,R14
         AFILL     ,1,2
         AOUT1     8
         USING     *,R15
         B         ARTN086
*
         USING     *,R15
ARTN110  AOUT1     6
ARTN086  BAL       R14,ANDSS2
ARTN087  AFILL     ,1,2
ARTN093  AOUT3     6
         USING     *,R15
*
ARTN040  BAL       R14,ANDSS1
         USING     *,R14
         BAL       R14,ASR1256
         BALR      R15,0
         USING     *,R15
ARTN043  AOUT1     8
ARTN042  BAL       R14,ANDSS2
         AFILL     0,1,2
         AFILL     4,5,6
ARTN099  AOUT3     8
*
         USING     *,R15
ARTN038  AOUT1     2
         AFILL     8,,,10,,
ARTN064  BAL       R14,ANDSS1
         USING     *,R14
ASRTN038 BAL       R14,ASR1256
ARTN098  AOUT3     12
*
ARTN812  NI        ADUMCODE,X'4F'
ARTN112  BAL       R14,ANDSS2
         USING     *,R14
         AFILL     8,1,2
         AOUT2     10
*
ARTN090  BAL       R14,AERRCP4
ARTN091  EQU       *
ASWAP    OI        ASWAPSW,1           TURN ON SWAP SW.
         LM        R2,R4,ASAND1
         MVC       ASAND1(12),ASAND2
         STM       R2,R4,ASAND2
         IC        R8,ARITOP
         SLA       R8,2
         L         R4,AOPTRTAB(R8)
         IC        R8,ASAND1MD
         IC        R8,ACOLTAB(R8)
         AR        R4,R8
         IC        R8,ASAND2MD
         IC        R8,AROWTAB(R8)
         AR        R4,R8
         B         ARIT17
ARTN092  B         AERREX0
ARTN102  EQU       *
*  LG-0  .NOT. USED AS A BINARY OPERATOR
AERRLG0  $ERROR    (BOOT,LG,0),ACRET                               V1L5
ARTN103  B         AERREQ6
ARTN104  OFFSET    LRAL,R14,ADEQRET0
         B         AEQRET1-AEQRET0(R14)
         EJECT
*  ROUTINES USED BY OUTPUTTING ROUTINES
ASR1256  AFILL     ,1,2,,5,6
         BR        R14
*
ASR1278  AFILL     ,1,2,,7,8
         BR        R14
*        ROUTINE TO CHANGE SIGN OF ARITHMETIC RESULT IF NECESSARY
ACHSIGN  LA        R14,ARITRET
         CLI       ASWAPSW,0           WERE OPERANDS SWAPPED
         BER       RC                  NO
         BALR      R15,0
         USING    *,R15
         TM        ARELOPSV,X'60'      RELATIONAL OPERATOR
         BNM       ACHSIGN1
         XI        ARELOPSV,X'60'
         BR        RC
ACHSIGN1  CLI      ARITOP,MINUS-ARITHOP  IS OPERATOR MINUS?
         BNER      RC                  NO
         IC        R8,ARIMODE          YES - GET MODE IN R8
         IC        R7,ANBYTAB(R8)      NBYTES EXTRA CODE - 1 IN R7
         IC        R8,ACODETAB(R8)
         LA        R15,ZR1+1(R2)
         LA        R3,ALCR(R8)         ADDRESS OF CODE IN R3
         MVC       0(4,R15),ZR3        MOVE CODE
         LA        R2,ZR2+1(R7)
         BR        RC
* ROUTINE TO CHANGE SIGN OF ONE PART OF COMPLEX RESULT IF REQUIRED
ACHSIGNS CLI       ARITOP,MINUS-ARITHOP
         LA        R14,ARITRET
         BNER      RC                  NO
         IC        R8,ARIMODE          YES - GET LCER OR LCDR INSTR.
         SLA       R8,2
         LH        R3,ALCER-24(R8)
         STH       R3,*-*(R2)          AND ADD IT TO CODE
         ORG       *-2                 GIMMICK TO AVOID
         DC        S(ZR1+1)            ASSEMBLY ALIGNMENT ERROR
         LA        R2,ZR2+2
         CLI       ASWAPSW,X'01'       SHOULD SIGN BE REVERSED
*                                      FROM NORMAL ?
         BER       RC                  NO
         LA        R3,34               YES - PUT X'22' IN R3
         STC       R3,ZR1(R2)          CHANGE TO LCE(D)R F2,F2
         BR        RC
*
ACHKOP   BALR      R14,RC
         USING     *,R14
AEQRET0  EQU       *
         LA        R1,ZR1+1(R2)        INCREASE R1
         CLI       ARITOP,EQUAL
         BNER      R15
AEQRET1  IF        (CADSSW,NON,ASFSW),AEQRET13
          IF       (AOP,NE,TERM),AERREQ6
          B        ASFRET
AEQRET13 IFNOT     (AB1,VAR),AERREQ6
         BAL       R14,ANDSS2NC
         USING     *,R14
         USING     ASAND,R15
         IC        R8,ARIMODE
         IC        R8,ATEMPTAB(R8)
         LA        R1,ATEMPCD(R8)      R1 POINTS TO CODE TO BE OUTPUT
         MVC       ADUMCODE(6),ZR1
         LA        R1,ADUMCODE
*                                      TO STORE RESULT
         AFILL     ,1,2                FILL IN INDEX AND POINTER
         LA        R2,3                SET NBYTES = 4
         TM        ARIMODE,COMP8       IS RESULT COMPLEX
         BNO       AEQRET12            IF NOT - SKIP AHEAD
         AFILL     ,,,,5,6
         LA        R2,7                SET NBYTES = 7
AEQRET12 THEN      (OUTPUT),ARIT19
         $FREE     R14                                             V1L5
         EJECT
         END
