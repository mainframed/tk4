DODO     TITLE     'DODO     DO AND GO TO STSTEMENT PROCESSOR'
         MACRO
&NAME    DFIXU     &LOC
&NAME    STH       R3,&LOC(1)+2
         AIF       (N'&LOC EQ 1).END
         STH       R3,&LOC(2)+2
         AIF       (N'&LOC EQ 2).END
         STH       R3,&LOC(3)+2
         AIF       (N'&LOC EQ 3).END
         STH       R3,&LOC(4)+2
         AIF       (N'&LOC EQ 4).END
         STH       R3,&LOC(5)+2
.END     ANOP
         MEND
         SPACE     3
         MACRO
&NAME    DCSTN2
&NAME    MVC       DSVR13(4),4(R13)    SAVE POINTER BACK
         L         R14,=A(DCSTN2)
         BALR      R14,R14
         MVC       4(4,R13),DSVR13     RESTORE POINTER BACK
         MEND
         EJECT
         COPY      OPTIONS
         SPACE     1
&DECK    SETC      'DODO'
         PRINT     OFF
         $PUNCH    DODO                                            DVS2
         COPY      EXTRN
         COPY      CDEFN
STARTA   DSECT
         COPY      STARTA
COMMR    DSECT
         COPY      COMMR
         ERRTABLE
         PRINT     ON
         PRINT     ON,&LIST
         SPACE     1
         ENTRY     GASSN
         ENTRY     GIF
         ENTRY     GOGO
         ENTRY     DODO
         ENTRY     DCSTN1
         ENTRY     DCSTN2
         ENTRY     DOIOEND,DOIOENT
         SPACE     1
DOSTACK  DSECT
DOLINKB  DS        H                   LINK BACK TO PREVIOUS ENTRY
DOLINKF  DS        H                   LINK FORWARD  0 MEANS
*                  NON-EXISTENT LINK FORWARD
DOINDX   DS        H                   INFORMATION
DOINIT   DS        H                   FOR CANCELLING
DOTEST   DS        H                   DO
DOINCR   DS        H                   PARAMETERS
DOPSEUD  DS        F                   CDONO AND ADDRESS OF PSEUDO STA
DIADDR   EQU       DOPSEUD
DOSTANO  DS        F                   STA NO IN BINARY
         AIF       ('&STR' NE 'USE').DSTR1                         ST1
DOISN    DS        F                   ISN OF DO STATEMENT         ST1
.DSTR1   ANOP                                                      ST1
         SPACE     1
IHALF    EQU       B'00000001'         HALF WORD INTEGER
         SPACE     1
COM      EQU       COMMA
*        THESE OP CODES ARE USED IN OBJECT CODE
ST       EQU       X'50'
STH      EQU       X'40'
L        EQU       X'58'
LH       EQU       X'48'
C        EQU       X'59'
CH       EQU       X'49'
A        EQU       X'5A'
AH       EQU       X'4A'
         TITLE     'GOTO STATEMENT'
GODO     CSECT
         SPACE     1
***********************************************************************
*        THIS SECTION OF DODO COMPILES SIMPLE GOTO                    *
*                                      ASSIGNED GOTO                  *
*                                      COMPUTED GOTO                  *
***********************************************************************
*        1ST WE MUST DECIDE WHETHER WE ARE DEALING WITH A SIMPLE GO TO
*        ASSIGNED GO TO OR COMPUTED GOTO
*        IF A '(' FOLLOWS THE LETTERS 'GOTO' WE HAVE A COMPUTED GO TO
*        IF A NUMBER FOLLOWS 'GOTO' WE HAVE A SIMPLE GO TO
*        IF A VARIABLE FOLLOWS 'GOTO' WE HAVE ASSIGNED GOTO
***********************************************************************
         SPACE     1
DOEND    EQU       CDOEND
*        X'01' = GOTO PAUSE,STOP RETURN,ARITH IF,DO OR
*                  LOGICAL IF CONTAINING ANY OF ABOVER
*        X'02' = NON EXECUTABLE STATEMENT
*        X'04' = LOGICAL IF
         SPACE     2
GOGO     CENT      DSAVER
         USING     STAK,RS
         OI        DOEND,X'01'         INDICATE GOTO CAN'T BE END DO
         IF        (SCODE,EQ,PHI),GCSTA   TEST FOR OPERATER
         IF        (SCODE,Z,CCONS),GASTA   TEST FOR STA NO
         SPACE     2
***********************************************************************
*        S I M P L E  G O T O
***********************************************************************
         SPACE     2
         MVI       CIFGOTSW,X'01'      NEXT STAT SHOULD BE NUMBERED
         DCSTN2                        LOOKUP AND CHECK STA NO
         DFIXU     GOBJCD              STORE POINTER FOR STA NO
         AH        RS,SLINK
         IF        (SOPTR,NE,TERM),GERSX1 TEST FOR TERMINATER
         OUTPUT    GOBJCDND-GOBJCD,GOBJCD  OUTPUT OBJECT CODE
         CRET
         SPACE     1
*        OBJECT CODE FOR SIMPLE GO TO
***********************************************************************
GOBJCD   L         R3,*-*
         BR        R3
GOBJCDND EQU       *
***********************************************************************
         SPACE     5
***********************************************************************
****     C O M P U T E D  G O T O                                  ****
***********************************************************************
         SPACE     1
         USING     STAK,RS
GCSTA    MVI       GCMOD1,L            SET TO FULL WORD LOAD
*        FIX ADDRESS IN THE EX INSTRUCTION OBJ CODE
         LR        R3,R5
         S         R3,CBAR11           THIS LEAVES A DISPLACEMENT IN R3
         O         R3,=X'0000B000'     OR IN BASE REGISTER 11
         LA        R3,GCMOD6A-4-GCMOD1(R3) FINAL DISPL FOR EX INSTRUCT
         STH       R3,GCMOD6+2
*        R5  PTR TO OBJ CODE  IS IN GTEMP1 FOR LATER USE IN PATCH UP
         ST        R5,GTEMP1
         OUTPUT    GCMOD6A-GCMOD1,GCMOD1 OUTPUT INITIAL PART OF OBJ CD
         SR        R7,R7               R7 COUNTS STA NOS
         AH        RS,SLINK            NEXT LINE
         BAL       R11,GCHKLP          GO AND CHECK FOR '('
         USING     *,R11
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,NE,COM),GCRTPAR  TEST FOR COMMA
GCKSN    IF        (SCODE,NZ,CCONS),GCER3   TEST FOR STA NO
         BAL       R8,DERSX6           THE STA NO WAS MISSING
         BR        R11
GCER3    DCSTN2                        LOOKUP AND CHECK STA NO
         LR        R1,R5               GET READY TO MUCK UP OBJECT CODE
         S         R1,KF4              GO BACK 4
         CLC       0(4,R1),GCBXBT      CHECK FOR 'B XBOOT'
         BE        GCSKP
         DFIXU     GCMOD7              STORE PTR FOR STA NO IN OBJ CODE
         OUTPUT    4,GCMOD7            OUTPUT L INSTR FOR EACH STA NO
GCSKP    LA        R7,1(R7)            INCREASE COUNT OF # OF STA NOS
         BR        R11                 LOOP-LOOK AT NEXT LINE
GCHKLP   IF        (SOPTR,EQ,LBRK),GCKSN CHECK FOR '(' APPEARING RIGHT
*                                      AFTER THE 'GOTO'
         LA       R8,GCKSN
         B         DERSX1
GCRTPAR  IF        (SOPTR,NE,RBRK),GERSX1 WE HAVE HIT THE END OF THE
*                                      STATEMENT NUMBER LIST
         IF        (SCODE,EQ,PHI),GCAH  TEST FOR PHI
         BAL       R8,DERSX0           THERE IS SOMETHING BETWEEN THE
*                                      '(' AND ',' IN A COMPUTED GOTO
GCAH     AH        RS,SLINK
         IF        (SOPTR,NE,COM),GCFXER         TEST FOR COMMA    V1L2
         IF        (SCODE,Z,MNAME),GCER6  TEST FOR NAME
         L         R5,GTEMP1           IN CASE OF ERROR
         $ERROR    (BOOT,SX,2,SYMRS,UNEX),CRET NO NAME WAS FOUND   V1L5
GCER6    IF        (SOPTR,M,X'0F'),GCLOOK    TEST IF NAME LENGTH 0
         L         R5,GTEMP1           IN CASE OF ERROR
         $ERROR    (BOOT,GO,3,SYMRS,UNEX),CRET THIS MSG NOT GOOD   V1L5
*        LOOKUP OF A SIMPLE VARIABLE
GCLOOK   LA        R8,CRET             ERROR RETURN FOR DCOM
         LOOKUP    VARIABLE
         USING     VLIST,R15
         ST        R5,GTEMP2           STORE PRESENT R5
         L         R5,GTEMP1           OLD VALUE OF R5-IN CASE OF ERROR
         BAL       R14,DCOM            CHECK IF INTEGER VARIABLE
         L         R5,GTEMP2           RESTORE R5 - NO ERROR
         OI        VB2,TYPE+USAGE
         LA        R8,GCFULL           ERROR RETURN FOR DERGO3     V1L4
         IF        (VB2,ON,B2AS),DERGO3
GCFULL   IF        (CMOSWTCH,ON),GCABD IF WE HAVE HAD A MEMORY OVERFLOW
*                                      DO NOT STORE ANYTHING IN AREA
*                                      POINTED TO BY R5
         L         R14,GTEMP1          LOAD THE VALUE R5 HAD BEFORE
*                                      OBJ CODE WAS OUTPUTTED
         STH       R3,ZR14+2           STORE PTR TO INDEX
         LR        R2,R5
         S         R2,CBAR11           DISPLACEMENT
         STH       R2,ZR14+GCMOD3-GCMOD1+2
         STH       R7,ZR14+GCMOD5-GCMOD1+2
         IF        (CUNDEFSW,NEQ,X'00'),GCA
         MVC       ZR14+GCMOD4-GCMOD1(4),GCMOD8  SKIP TEST UNDEF VAR
GCA      IF        (VB2,Z,B2COM+B2EQV),GCABC TEST FOR INDIRECT ADDRESS
         LA        R14,4(R14)
         MVC       ZR14(2),=X'5822'    SET UP LOAD FOR INDIRECT ADDRESS
GCABC    IF        (VB1,Z,IHALF),GCABD   TEST HALF INTEGER
         MVI       ZR14,LH             CHANGE LOAD TO LOAD HALF
GCABD    AH        RS,SLINK            NEXT LINE IN STACK AND
         IF        (SOPTR,NE,TERM),GERSX1 TEST FOR TERMINATER
         CRET
GCFXER   L         R5,GTEMP1                                       V1L2
         B         GERSX1                                          V1L2
***********************************************************************
*        OBJECT CODE FOR COMPUTED GO TO                               *
***********************************************************************
GCMOD1   L         R2,*-*                LOAD VALUE OF INDEX
GCMOD2   NOP       0(R2,0)
         LTR       R2,R2               TEST IF POSITIVE
GCMOD3   LA        R3,*-*(R11)         ADDRESS OF NEXT FORTRAN STAT
GCMOD4   BAL       R14,XCGTEST         TEST FOR UNDEF VAR
GCMOD5   LA        R4,*-*              LOAD MAX INDEX
         CR        R2,R4
         BHR       R3                  BRANCH TO NEXT FORTRAN STA
         SLA       R2,2                SET UP FOR EX INSTR.
GCMOD6   EX        0,GCMOD6A-4(R2)     PICK PROPER STA NO
         BR        R3
GCMOD6A  EQU       *
***********************************************************************
GCMOD7   L         R3,*-*              STA NO FILLED IN BY ABOVE
***********************************************************************
*        THIS INSTRUCTION GOES IN AT GCMOD4
GCMOD8   BNPR      R3                  BRANCH TO NEXT FORTRAN STAT
         NOPR      0
***********************************************************************
GCBXBT   B         XBOOT
GTEMP1   DC        F'0'
GTEMP2   DC        F'0'
         $FREE     R11                                             V1L5
         SPACE     2
***********************************************************************
****     A S S I G N E D  G O T O                                  ****
***********************************************************************
         SPACE     1
GASTA    MVI       CIFGOTSW,X'01'      NEXT STAT SHOULD BE NUMBERED
         USING     STAK,RS
         BALR      R11,0
         USING     *,R11
*        SECTION TO ALLOW BRANCHING WITHIN OBJ CODE
         MVI       GAMOD1,L            INITIALIZE A LOAD INSTRUCTION
         MVC       GAMOD2(2),=X'4700'  FOR NO-OP CODE
         LR        R3,R5
         S         R3,CBAR11
         O         R3,=X'0000B000'     OR IN BASE REG 11
         LA        R3,GAMOD3+4-GAMOD1(R3)    INCREASE DISPL
         STH       R3,GAMOD4+2         B INSTUCTION
         LA        R3,GAMOD4+4-(GAMOD3+4)(R3)  INCREASE DISPL
         STH       R3,GAMOD3+2         LA INSTRUCTION
*        LOOKUP OF AN ASSIGNED VARIABLE
         BAL       R8,DINTA            NOTE: R8 IS ALSO ERROR RETURN
         USING     VLIST,R15
         DFIXU     GAMOD1              STORE POINTER TO VARIABLE
         IF        (VB2,Z,B2COM+B2EQV),GAABC   IS VAR COMMONED OR EQUIV
         MVC       GAMOD2(2),=X'5830'  LOAD FOR COM & EQUIV
         IF        (VB1,Z,IHALF),GAABD   TEST HALF WORD INTEGER
         MVI       GAMOD2,LH           CHANGE THE L TO LH
         B         GAABD
GAABC    IF        (VB1,Z,IHALF),GAABD  TEST HALF WORD INTEGER
         MVI       GAMOD1,LH
GAABD    OUTPUT    GAMOD4+4-GAMOD1,GAMOD1 OUTPUT INITIAL PART OF OBJ CD
         AH        RS,SLINK            NEXT LINE IN STACK
         IF        (SOPTR,EQ,COM),GAAA IS IT A COMMA
         BAL       R8,DERSX1           THE OPERATER SHOULD BE A ','
GAAA     IF        (SCODE,EQ,PHI),GALOOP  TEST FOR PHI
         BAL       R8,DERSX0           THERE IS SOMETHING BETWEEN ','
*                                      AND '(' IN ASSIGNED GO TO
GALOOP   AH        RS,SLINK            NEXT LINE OF STACK
         BAL       R11,GCHKLFBR        GO CHECK FOR '('
         USING     *,R11
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,NE,COM),GARTPAR  TEST FOR COMMA
GAB      IF        (SCODE,O,CCONS),GABAL
         BAL       R8,DERSX6           MISSING STA NO
         BR        R11                 GO TO NEXT LINE
GABAL    DCSTN2                        LOOKUP AND CHECK STA NO
         DFIXU     GAMOD5              STORE POINTER TO STA NO
         OUTPUT    4,GAMOD5            OUTPUT A LOAD FOR EACH STA NO
         BR        R11
GCHKLFBR IF        (SOPTR,EQ,LBRK),GAB CHECK FOR INITIAL '('
         LA        R8,GAB
         B         DERSX1              THE '(' WAS NOT THERE
GARTPAR  IF        (SOPTR,NE,RBRK),GERSX1
         OUTPUT    4,GAOBJ             OUTPUT BRANCH TO ERROR
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,NE,TERM),GERSX1 TEST FOR TERMINATER
         CRET
         SPACE     1
***********************************************************************
*        OBJECT FOR ASSIGNED GO TO                                    *
***********************************************************************
GAMOD1   L         R3,*-*              LOAD NAME
GAMOD2   L         R3,ZR3              FOR COMMON & EQUIV VAR
GAMOD3   LA        R15,GAMOD4+4        LOAD ADDRESS OF LIST STA NO
         EX        0,0(,R15)           PICK OUT 1 OF THE STA NO
         CR        R2,R3               SEARCH FOR REQUIRED STA NO
         BER       R3                  BRANCH IF STA NO FOUND
         LA        R15,4(,R15)         BUMP R15 FOR NEXT STA NO
GAMOD4   B         GAMOD3+4
***********************************************************************
GAMOD5   L         R2,*-*              THIS STA NO IS FILLED IN
***********************************************************************
GAOBJ    B         XERRGO4
***********************************************************************
         TITLE     'ARITHMETIC IF STATEMENT'
***********************************************************************
*        ARITHMETIC IF STATEMENT
***********************************************************************
*        LOOKS AFTER OBJECT CODE FOR ARITHMETIC-IF BRANCHING
*        THE CONDITION CODE HAS BEEN SET AND THE OBJECT CODE MUST
*        TEST THE C.C. AND BRANCH TO THE CORRECT STA NO
         SPACE     1
GIF      CENT      DSAVER
         USING     STAK,RS
         MVI       CIFGOTSW,X'01'      NEXT STA MUST BE NUMBERED
         OI        DOEND,X'01'         INDICATE IF CAN'T END DO
*        ARITH HAS CHECKED )  R1 POINTS TO STACK
         LA        R7,0                INITIALIZE INDEX
         LA        R0,GIMOD2-GIMOD1    INCREMENT
         LA        R1,GIMOD3-GIMOD1    TOPVALUE
         B         GIARDA              GO TEST FOR CONSTANT
GICOMMA  IF        (SOPTR,NE,COM),GERSX1 TEST FOR COMMA
GIARDA   IF        (SCODE,O,CCONS),GIER2  TEST FOR CONST.
         LA        R8,GILINE
         B         DERSX6              STATEMENT NUMBER MISSING
GIER2    DCSTN2                        LOOKUP AND CHECK STA NO
         USING     ZR13,R13
         LM        R0,R1,ZSV0          RESTORE REG 0 AND 1
         USING     DSAVER,R13
         STH       R3,GIMOD1+2(R7)     STORE POINTER
GILINE   AH        RS,SLINK            NEXT LINE
         BXLE      R7,R0,GICOMMA       LOOP
         IF        (SOPTR,NE,TERM),GERSX1 TEST FOR TERMINATER
         OUTPUT    GIMEND-GIMOD1,GIMOD1 OUTPUT OBJECT CODE
         CRET
*
         SPACE     1
***********************************************************************
****     OBJECT CODE                                               ****
***********************************************************************
GIMOD1   L         R2,*-*
         BLR       R2
GIMOD2   L         R2,*-*
         BER       R2
GIMOD3   L         R2,*-*
         BHR       R2
GIMEND   EQU       *
***********************************************************************
         TITLE     'ASSIGN STATEMENT'
***********************************************************************
*        ASSIGN STATEMENT
***********************************************************************
         SPACE     1
GASSN    CENT      DSAVER
         USING     STAK,RS
         MVI       GASMOD3,ST           MAKE OBJ CODE FULL WORD
         IF        (SCODE,O,CCONS),GASS1  TEST FOR CONST.
         $ERROR    (BOOT,SX,6,SYMRS,INVAL),GASOK1 NO CONSTANT FOUNDV1L5
GASS1    OI        DOSWCH,X'02'        INDICATE AN ASSIGN STA
         DCSTN2                        LOOKUP AND CHECK STA NO
         DFIXU     GASMOD1             STORE POINTER TO STA NO
GASOK1   AH        RS,SLINK            NEXT LINE
         CLC       SOPND(2),=C'TO'     CHECK FOR 'TO'
         BE        GASOK3
         $ERROR    (BOOT,ST,3,SYMRS,INVAL),CRET UNDECODABLE STAT   V1L5
GASOK3   SETSTACK  'TO'                GET RID OF 'TO' IN STACK
         LA        R8,GASER4           ERROR RETURN
         IF        (SCODE,NZ,MNAME),DERSX7  TEST FOR SYMBOL
         IF        (SCODE,Z,X'0F'),DERSX7  TEST ZERO LENGTH
*                  4(RS) NOW ADDRESSES THE VARIABLE
*        LOOKUP ASSIGNED VARIABLE
         BAL       R8,DINTA            NOTE: R8 IS ALSO THE ERROR RETRN
         USING     VLIST,R15
         DFIXU     GASMOD3             STORE POINTER TO VARIABLE
         IF        (VB1,Z,IHALF),GASER4  TEST HALF WORD VARIABLE
         $ERROR    (BOOT,GO,5,NAMR15,INVAL)  AN ASSIGNED VARIABLE  V1L5
*                                      CANNOT BE HALF WORD VARIABLE
GASER4   AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,NE,TERM),GERSX1
         OUTPUT    4,GASMOD1
         IF        (VB2,NZ,B2COM+B2EQV),GASCOMEQ  FOR COM AND EQV
         OUTPUT    4,GASMOD3
         CRET
         SPACE     1
GASCOMEQ MVC       GASMOD4+2(2),GASMOD3+2 MOVE THE PTR TO THE VARIABLE
         OUTPUT    8,GASMOD4
         CRET
         SPACE     1
***********************************************************************
****     OBJECT CODE FOR ASSIGN STATEMENT                          ****
***********************************************************************
GASMOD1  L         R3,*-*              LOAD ADDRESS OF STA NO
GASMOD3  ST        R3,*-*              STORE STA NO IN VAR.
*        OBJECT CODE FOR COMMONED OR EQUIVALENCED
*ASMOD1  L         R3,*-*              LOAD ADDRESS OF STA NO
GASMOD4  L         R2,*-*              ADDRESS OF VAR
         ST        R3,ZR2              STORE IN VAR
***********************************************************************
         TITLE     'DO ROUTINES'
***********************************************************************
****     D O  S T A T E M E N T                                    ****
***********************************************************************
         SPACE     1
DTOPSTK  EQU       CDOBEG
         SPACE     1
*        THIS SECTION HANDLES:
*             DO STATEMENTS
*             STATEMENT NO. CHECKING FOR STA NO IN COLS 1-5
*             IMPLIED DO LOOPS IN I/O STATEMENTS
         SPACE     1
DODO     CENT      DSAVER
         USING     STAK,RS
*        R7 IS A PTR TO DOSTACK OR I/O STACK DEPENDING ON WHETHER
*        COMPILING A REGULAR OR IMPLIED (I/O) DO LOOP
         BAL       R8,DINTSTK          INITIALIZE DO STACKS
*        R1 HAS ZERO IN IT DUE TO DINTSTK
         MVI       DOIO,X'00'          NOT AN I/O STATEMENT
         OI        DOEND,X'01'         INDICATE DO STA CANT END DOLOOP
*        DONO=DONO+1
         LH        R8,CDONO
         LA        R8,1(,R8)           BUMP DONO
         STH       R8,CDONO
*        WHEN  DONO .GT. 256 WILL GET CP-2 ERRORS
*        CREATE STACK ENTRY FOR THIS DO STATEMENT
         L         R7,DTOPSTK          LOAD POINTER TO DO STACK
         USING     DOSTACK,R7
         LH        R4,DOLINKF(RO)      LOAD LINK FORWARD
         CR        R1,R4               R1 IS ZERO DUE TO DINTSTK
         BNE       DOOLDL              ENTRY THERE ALREADY
         AIF       ('&STR' NE 'USE').DSTR2                         ST1
DONEWL   GETSYM    24,CHECK            GRAB 24 BYTES FOR NEW ENTRY ST1
         AGO       .DSTR3                                          ST1
.DSTR2   ANOP                                                      ST1
DONEWL   GETSYM    20,CHECK            GRAB 20 BYTES FOR NEW ENTRY
.DSTR3   ANOP                                                      ST1
         LR        R4,R6
         SR        R4,R7
         STH       R4,DOLINKF(RO)      STORE LINK FORWARD
         ST        R6,DTOPSTK          STORE NEW TOP OF STACK
         $FREE     R7                                              V1L5
         USING     DOSTACK,R6
         LPR       R4,R4               MAKE LINKS SO YOU ALWAYS ADD
         STH       R4,DOLINKB(RO)
         STH       R1,DOLINKF(RO)      ZERO LINK FORWARD
         B         DOMERG
DOOLDL   AR        R4,R7
         ST        R4,DTOPSTK          STORE NEW TOP OF STACK
DOMERG   EQU       *
         SNAPS     SYMTAB,0(RO,R6),200
         IF        (SCODE,O,CCONS),DOK1  TEST FOR STA NO
         $ERROR    (BOOT,SX,6,SYMRS,INVAL),DOK2 STA NO MISSING     V1L5
         USING     DOSTACK,R7
DOK1     L         R7,DTOPSTK          LOAD POINTER TO DO STACK INTO R7
         AIF       ('&STR' NE 'USE').DSTR4                         ST1
         LH        R0,XISN             GET ISN FOR DO STACK        ST1
         ST        R0,DOISN                                        ST1
.DSTR4   ANOP                                                      ST1
         L         R0,SOPND            LOAD STA NO
         ST        R0,DOSTANO(RO)      STORE STA NO IN DOSTACK
         STC       R8,DOPSEUD(RO)      STORE CDONO IN DO STACK
         SNAPS     DTOPSTK,DTOPSTK,4
         OI        DOSWCH,X'01'        INDICATES A DO STA
         DCSTN2                        LOOKUP AND CHECK STA NO
DOK2     AH        RS,SLINK            NEXT LINE
         B         DER4
         SPACE     1
*        ENTRY FOR DOIO STATEMENT
*        R9 POINTS TO INDEX OF IMPLIED DO
         SPACE     1
DOIOENT  CENT      DSAVER
         BAL       R8,DINTSTK          INITIALIZE STACK
*        R1 HAS ZERO DUE TO DINTSTK
         MVI       DATASTSW,X'00'      INITIALIZE THIS SWITCH
         MVI       DOIO,X'01'          INDICATE I/O STATEMENT
         L         R7,DOIOCT           LOAD PTR TO I/O DO STACK
         LH        R4,DOLINKF(RO)      LOAD LINK FORWARD
         CR        R1,R4               COMPARE TO ZERO
         BNE       DIOLDL              LINK ALREADY THERE
DINEWL   GETSYM    16,CHECK            GET 16 BYTES FOR I/O STACK
         LR        R4,R6
         SR        R4,R7
         STH       R4,DOLINKF(RO)      STORE LINK FORWARD
         ST        R6,DOIOCT           STORE NEW PTR TO TOP OF STACK
         $FREE     R7                                              V1L5
         USING     DOSTACK,R6
         LPR       R4,R4
         STH       R4,DOLINKB(RO)      LINK BACK
         STH       R1,DOLINKF(RO)      ZERO LINK FORWARD
         B         DIMERG
DIOLDL   AR        R4,R7
         ST        R4,DOIOCT           STORE NEW PTR TO TOP OF STACK
         $FREE     R6                                              V1L5
DIMERG   L         R7,DOIOCT           PTR TO TOP OF I/O STACK IN R7
         USING     DOSTACK,R7
         SNAPS     DOIOCT,DOIOCT,4
         SNAPS     SYMTB,0(RO,R6),200
DER4     BALR      R11,0
         USING     *,R11
         LA        R8,DFULL            ERROR RETURN
         IF        (SCODE,NZ,MNAME),DERSX7 TEST FOR NAME
         TM        SOPTR,X'87'         CHECK FOR INVALID OPERATOR  V1L5
         BO        DERSX7              ISSUE SX-7 IF FOUND         V1L5
         IF        (SCODE,Z,X'0F'),DERSX7   TEST LENGTH
         SPACE     3
****     I N D E X                                                 ****
         SPACE     2
*        LOOKUP DO PARAMETER
         BAL       R8,DINTCI           LOOKUP INITIAL PARAMETER
         USING     VLIST,R15
         MVI       DOPARM,X'00'        ZERO SWITCHES
         MVI       DOPARMH,X'00'
*        INITIALIZE OBJECT CODE
         MVI       DMOD1,L
         MVI       DMOD3,L
         MVI       DMOD4,L
         MVI       DMOD6,ST
         MVI       DMOD1A,L
         MVI       DMOD3A,L
         MVI       DMOD4A,L
         MVI       DMOD6B,ST
         DFIXU     (DMOD6,DMOD6A)      STORE PTR TO INDEX IN OBJ CODE
         ST        R15,DOINDXA         STORE INDEX POINTER
         IF        (VB2,Z,B2COM+B2EQV),DOHALFA TEST INDEX COM OR EQV
*        COMMONED OR EQUIVALENCED
         OI        DOPARM,X'80'
         IF        (VB1,Z,IHALF),DFULL
         MVI       DMOD6B,STH
         OI        DOPARM,X'40'
         B         DFULL
*        NOT COMMONED OR EQUIVALENCED
DOHALFA  IF        (VB1,Z,IHALF),DFULL   TEST HALF WORD INTEGER
         MVI       DMOD6,STH
         OI        DOPARM,X'40'
DFULL    STH       R3,DOINDX(RO)       STORE POINTER TO INDEX
         AH        RS,SLINK
         IF        (SOPTR,EQ,EQUAL),DER7
         $ERROR    (BOOT,ST,3,DELRS,UNEX),DOBRANCH UNDECODABLE     V1L5
         SPACE     3
****     I N I T I A L                                             ****
         SPACE     2
DER7     LA        R8,DFULLA           ERROR RETURN
         IF        (SCODE,Z,MNAME),DALPHA  TEST FOR NAME
         IF        (SCODE,Z,CCONS),DERSX5 TEST FOR CONSTANT
         LOOKUP    INTEGER             COLLECT CONSTANT
         DFIXU     DMOD4               POINTER TO INITIAL
         L         R4,CONSTANT         PUT VALUE OF INITIAL IN R4
         LTR       R4,R4               TEST IF POSITIVE
         ST        R4,DOINITVL
         BNZR      R8                  INITIAL IS NOT ZERO
         B         DERDO5              INITIAL PARAMETER WAS ZERO
DALPHA   IF        (SCODE,NM,X'0F'),DERSX8 TEST FOR ZERO LENGTH
*        X'01' IN DATASTSW MEANS WE HAD AT LEAST ONE VARIABLE PARAMETER
*        IT IS USED ONLY IN DATA STATEMENTS
         MVI       DATASTSW,X'01'
***      LOOKUP DO PARAMETER
         BAL       R8,DINTCO
         USING     VLIST,R15
         DFIXU     DMOD4               STORE POINTER TO INITIAL
         OI        DOPARMH,X'80'       INITIAL A VAR
         IF        (VB2,Z,B2COM+B2EQV),DOHALFC
*        EQUIVALENCED OR COMMONED
         OI        DOPARMH,X'40'
         IF        (VB1,Z,IHALF),DFULLA
         MVI       DMOD4A,LH
         OI        DOPARMH,X'20'
         B         DFULLA
*        NOT COMMONED OR EQUIVALENCED
DOHALFC  IF        (VB1,Z,IHALF),DFULLA
         MVI       DMOD4,LH
         OI        DOPARMH,X'20'
DFULLA   STH       R3,DOINIT(RO)       STORE POINTER IN STACK
         AH        RS,SLINK            NEXT LINE
         IF        (SOPTR,EQ,COM),DER9  TEST FOR COMMA
         LA        R8,DER9
         BNE       DERSX1              MISSING COMMA
         SPACE     3
****     T E S T  V A L U E                                        ****
         SPACE     2
DER9     LA        R8,DFULLB           ERROR RETURN
         IF        (SCODE,Z,MNAME),DALPHB  TEST FOR NAME
         IF        (SCODE,Z,CCONS),DERSX5  TEST FOR CONST.
         LOOKUP    INTEGER             COLLECT CONSTANT
         DFIXU     DMOD3               TESTVALUE
         L         R4,DOINITVL
         MVC       DOINITVL(4),CONSTANT
         TM        DOPARMH,X'80'       TEST IF INITIAL WAS CONST
         BO        DER13
         C         R4,CONSTANT
         BL        DER13
         $ERROR    (WARN,DO,8,SYMRS)   INITIAL IS GT TESTVALUE     V1L5
DER13    L         R4,CONSTANT
         LTR       R4,R4               IS TESTVALUE POSITIVE?
         BPR       R8                  TESTVALUE IS OK
         B         DERDO5              TESTVALUE IS ZERO
DALPHB   IF        (SCODE,NM,X'0F'),DERSX8 TEST LENGTH OF VARIABLE
         MVI       DATASTSW,X'01'      INDICATES A VARIABLE PARAMETER
*        LOOKUP DO PARAMETER
         BAL       R8,DINTCO
         USING     VLIST,R15
         DFIXU     DMOD3               TEST VALUE
         OI        DOPARM,X'20'        INDICATE TESTVALUE A VARIABLE
         IF        (VB2,Z,B2COM+B2EQV),DOHALFE
*        EQUIVALENCED OR COMMONED
         OI        DOPARM,X'10'
         IF        (VB1,Z,IHALF),DFULLB
         MVI       DMOD3A,LH
         OI        DOPARM,X'08'
         B         DFULLB
*        NOT COMMONED OR EQUIVALENCED
DOHALFE  IF        (VB1,Z,IHALF),DFULLB
         MVI       DMOD3,LH
         OI        DOPARM,X'08'
DFULLB   EQU       *
         STH       R3,DOTEST(RO)       STORE PTR TO TESTVALUE IN STACK
         AH        RS,SLINK            NEXT LINE
         MVI       DIMPLY+1,X'F0'      MAKE A B INSTRUCTION
         IF        (SOPTR,EQ,COM),DNIMP  THIRD PARAMETER IS NOT IMPLIED
         MVI       DIMPLY+1,X'00'      MAKE A NOP INSTUCTION
         B         DNIO
         SPACE     3
****     I N C R E M E N T                                         ****
         SPACE     2
DNIMP    LA        R8,DFULLC           ERROR RETURN
         IF        (SCODE,Z,MNAME),DALPHC  TEST FOR NAME
         IF        (SCODE,Z,CCONS),DERSX5  TEST FOR CONST.
         LOOKUP    INTEGER             COLLECT CONSTANT
         DFIXU     DMOD1
         IF        (DOPARM,ON,X'20'),DER14   TEST TESTVAL FOR CONST
         L         R4,DOINITVL
         C         R4,CONSTANT
         BH        DER14
         $ERROR    (WARN,DO,8,SYMRS)   INCREMENT GT TESTVALUE      V1L5
DER14    L         R4,CONSTANT
         LTR       R4,R4               IS INCREMENT POSITIVE?
         BPR       R8                  INCREMENT IS OK
         B         DERDO5              INCREMENT IS ZERO           V1L0
DALPHC   IF        (SCODE,NM,X'0F'),DERSX8 TEST ZERO LENGTH
         MVI       DATASTSW,X'01'
*        LOOKUP DO PARAMETER
         BAL       R8,DINTCO
         USING     VLIST,R15
         DFIXU     DMOD1               INCREMENT
         OI        DOPARM,X'04'
         IF        (VB2,Z,B2COM+B2EQV),DOHALFG
*        EQUIVALENCED OR COMMONED
         OI        DOPARM,X'02'
         IF        (VB1,Z,IHALF),DFULLC
         MVI       DMOD1A,LH
         OI        DOPARM,X'01'
         B         DFULLC
*        NOT COMMONED OR EQUIVALENCED
DOHALFG  IF        (VB1,Z,IHALF),DFULLC
         MVI       DMOD1,LH
         OI        DOPARM,X'01'
DFULLC   STH       R3,DOINCR(RO)
         AH        RS,SLINK            NEXT LINE
DNIO     LA        R8,DOBJC            ERROR RETURN
         IF        (DOIO,NE,X'01'),DOSTAT  IS THIS I/O STAEMENT
         IF        (SOPTR,NE,RBRK),DERSX1  TEST FOR )
         B         DIMPLY
DOSTAT   IF        (SOPTR,NE,TERM),DERSX1  TEST FOR TERMINATER
*        THIS INSTR IS B FOR ORDINARY DO AND NOP WHEN INCR IS IMPLIED
DIMPLY   B         DOBJC
*        THESE INSTR ARE EXECUTED WHEN THE LAST PARAMETER IS IMPLIED
         MVC       DMOD1+2(2),DCONE    PTR TO CONSTANT ONE
         MVC       DOINCR(2),KH0       ZERO PTR TO INCR IN DO-STACK
         SPACE     3
DOBJC    EQU       *
*        THIS SECTION PUTS OUT OBJ CODE FOR INITIALIZING A DO LOOP
*        OBJ CODE CAN FOLLOW
         SNAPS     DOPARM,DOPARM,1
         SNAPS     DOPARMH,DOPARMH,1
         IF        (CUNDEFSW,EQ,X'00'),DON1  INCREMENT
*        THIS TEST IF NO CHECK WAS SPECIFIED
         IF        (DOPARM,Z,X'04'),DON2  TEST CONST
         OUTPUT    4,DMOD1
         IF        (DOPARM,Z,X'02'),DNCOM3  TEST EQUIV
         OUTPUT    4,DMOD1A
DNCOM3   OUTPUT    6,DMOD2
DON2     IF        (DOPARM,Z,X'20'),DON1 TEST TEST VAL
         OUTPUT    4,DMOD3
         IF        (DOPARM,Z,X'10'),DNCOM2
         OUTPUT    4,DMOD3A
DNCOM2   OUTPUT    6,DMOD2
DON1     OUTPUT    4,DMOD4
         IF        (DOPARMH,Z,X'80'),DOINITA
         IF        (DOPARMH,Z,X'40'),DNCOM1  TEST COM & EQUIV
         OUTPUT    4,DMOD4A
         IF        (CUNDEFSW,EQ,X'00'),DOINITA                     V1L1
DNCOM1   OUTPUT    6,DMOD2
DOINITA  IF        (DOPARM,Z,X'80'),DNCOM  EQUIV
         OUTPUT    8,DMOD6A
         B         DOBRANCH
DNCOM    OUTPUT    4,DMOD6
DOBRANCH IF        (DOIO,NE,X'01'),DOORD  IS THIS I/O STATEMENT
         ST        R5,DIADDR(RO)
         MVC       DIADDR(1),DOPARM    SETTING ON TOP OF ADDRESS
*        DOPARM IS STORED IN TOP BYTE OF DIADDR
         SNAPS     DOIOSTK,DOIOCT,4
         B         DOBJOUT
*        SET UP PSEUDO STA NO
DOORD    SR        R2,R2
         L         R7,DTOPSTK
         USING     DOSTACK,R7
         IC        R2,CDONO+1          INSERT DONO
         A         R2,=F'100000'       FORM PSEUDO STA NO
         ST        R2,SOPND            SET FOR LOOKUP
         LOOKUP    PSUDSTNO,,DERCP2
         USING     NLIST,R15
DONFND   ST        R5,NADDR            STORE ADDR. IN PSEUD STA NO
         OI        NB1,REF+EXEC+ADDR
         MVC       NLEV(1),DOPARM
*        DOPARM IS STORED IN NLEV OF PSEUDO STA NO
         ST        R3,DOPSEUD(RO)
*        MOVE IN DONO
         IC        R2,CDONO+1
         STC       R2,DOPSEUD(RO)
DOBJOUT  EQU       *
*        END WITH RS AT LAST LINE
*
DEND     CRET
         SPACE     1
***********************************************************************
****     OBJ CODE FOR BEGIN OF DO                                  ****
***********************************************************************
*        OBJECT CODE WHEN ALL PARAMETERS ARE SIMPLE INTEGER
*        VARIABLES- NOT COMMONED OR EQUIVALENCED
***********************************************************************
DMOD1    L         R2,*-*              INCREMENT
DMOD2    LTR       R2,R2
         BAL       R14,XERRDO7
DMOD3    L         R2,*-*              TESTVALUE
*DMOD2   LTR       R2,R2
*        BAL       R14,XERRDO7
DMOD4    L         R2,*-*              INITIAL
*DMOD2   LTR       R2,R2
*        BAL       R14,XERRDO7
DMOD6    ST        R2,*-*              INDEX
*
*        PSUEDO STA NO HERE
*
*
*
*****************************
***********************************************************************
*        OBJECT CODE WHEN ALL PARAMETERS ARE CONSTANTS
*        OR WHEN RUN=NOCHECK IS SPECIFIED
***********************************************************************
*DMOD4   L         R2,*-*              INITIAL
*DMOD6   ST        R2,*-*              INDEX
*
*        PSUEDO STA NO HERE
*
*****************************
*****************************
*        OBJECT CODE WHEN ALL VARIABLES ARE COMMONED
*        OR EQUIVALENCED
*****************************
*DMOD1   L         R2,*-*              INCREMENT
DMOD1A   L         R2,0(R2,0)
*DMOD2   LTR       R2,R2
*        BAL       R14,XERRDO7
*DMOD3   L         R2,*-*              TESTVALUE
DMOD3A   L         R2,0(R2,0)
*DMOD2   LTR       R2,R2
*        BAL       R14,XERRDO7
*DMOD4   L         R2,*-*              INITIAL
DMOD4A   L         R2,0(R2,0)
*DMOD2   LTR       R2,R2
*        BAL       R14,XERRDO7
DMOD6A   L         R3,*-*              INDEX
DMOD6B   ST        R2,ZR3
*
*        PSEUDO STA NO HERE
*
***********************************************************************
         EJECT
DOIOEND  CENT      DSAVER
*        WERE ANY OF THE PARAMETERS VARIABLES?
         CLI       DATASTSW,X'00'
         BZ        DOIOD
         CLI       CTYPESW,X'00'       DATA STA TURNS ON
         BZ        DOIOD
         $ERROR    (LANG,DA,3)         VARIABLE IN DATA STA        V1L5
DOIOD    L         R7,DOIOCT           SET UP REG 7
         MVC       DOPARM(1),DIADDR    REESTABLISH DOPARM NON OFFSET
         L         R15,DIADDR(RO)
         LR        R3,R15
         S         R3,CBAR11           CALCULATE BRANCH ADDRESS FOR I/O
         STH       R3,DMOD20+2         DO LOOPS
         BAL       R14,DOUNP           MAKE NOT DO PARAMS
         OUTPUT    4,DMOD20            OUTPUT BRANCH TO BEGIN OF LOOP
         AH        R7,DOLINKB(RO)      DOWN STACK
*        GOING DOWN DO IO STACK
         ST        R7,DOIOCT           STORE I/O STACK POINTER
         CRET
         SPACE     1
***********************************************************************
DMOD20   BC        12,*-*(R11,0)
***********************************************************************
         EJECT
*        THIS ROUTINE HANDLES CHECKING ON STA NOS IN COLS 1-5
DCSTN1   CENT      DSAVER
         USING     NLIST,R15
*        INITIALIZE DO & IO STACKS
         BAL       R8,DINTSTK          INITIALIZE STACKS IF NECESSARY
         L         R15,CSTNOLK         SAVE A LOOKUP ON STA NO
         CR        R1,R15              DINSTK ZEROS R1
         BE        CRET      THIS OCCURS FOR MULTIPLY DEF STA NO
         L         R7,DTOPSTK          LOAD STACK POINTER
         USING     DOSTACK,R7
         IC        R2,DOPSEUD(RO)
         STC       R2,DHIGHEST         STORE HIGHEST DO NO
*        HIGHEST HAS TOP DONO AT ANY STA NO
         IF        (NB1,Z,DBIT),DSNOTIN  CANNOT BE IN DO STACK
         L         R2,CURSTNO          STA NO IN BIN. IN R2
         B         DCFIRST
DSREP    AH        R7,DOLINKB(RO)      DOWN STACK
         ST        R7,DTOPSTK
DCFIRST  C         R2,DOSTANO(RO)      COMPARE WITH CURSTANO
         BE        *+12
         L         R0,DLARGE
         B         DSLOPA
*        STA NO IS END OF DO LOOP
         IF        (DOEND,NON,X'01'),DCER2  TEST BAD END OF DO
         LA        R8,DCER2
         IF        (DOEND,ON,X'04'),DERDOA
*        THERE IS A DO-0 ON CARD 09390000
         $ERROR    (BOOT,DO,0)         IMPROPER END OF DO          V1L5
*        MAKE DO PARAM ORDINARY VAR
DCER2    BAL       R14,DOENDCD         MAKES VAR ORDINARY VAR
         B         DSREP               TAKES CARE OF SEVERAL DO LOOPS
*        ENDING ON SAME STA NO
*
*****************************
DMOD7    L         R14,*-*             ADDRESS OF PSEUDO STA NO
DMOD12   BCR       12,R14              /* NON OFFSET */
DMOEND   EQU       *
*****************************
*
DSLOP    AH        R7,DOLINKB(RO)      DOWN DO STACK
DSLOPA   L         R4,DOSTANO(RO)      LOAD STA NO
         CR        R4,R2
         BE        DFOUND              BRA IF FOUND
         CR        R4,R0               CHECK FOR ZERO-END STCK
         BE        DSNOTIN             STA NO WAS NOT IN STACK
         B         DSLOP
*        BADLY NESTED DO'S USE THIS EXIT
DFOUND   $ERROR    (BOOT,DO,3)         BADLY NESTED DO LOOPS       V1L5
         BAL       R14,DOENDCD
         ST        R7,DTOPSTK
         B         DSLOP
*        ORDINARY STA NO COMES HERE
DSNOTIN  L         R7,DTOPSTK          GET R7 READY FOR POINTING
         IF        (DOSWCH,NO,X'01'),DAROUND
         AH        R7,DOLINKB(RO)      DOWN DO STACK
         IC        R2,DOPSEUD(RO)      GET DONO
         STC       R2,DHIGHEST
DAROUND  EQU       *
         SNAPS     DONO,NLIST,12
         SNAPS     DONO,DOPSEUD,8
         SNAPS     DHIGHEST,DHIGHEST,1
         IF        (NB1,OFF,EXEC),DCER3
*        DON'T GIVE DO-1 ERRORS FOR NON EXECUTABLE STATEMENTS
         CLC       NLEV(1),DHIGHEST    CHECK LEVEL FOR BRANCH INTO LOOP
         BNL       DCER3
*        THERE IS A DO-1 ON CARD 10120000
         $ERROR    (NOAC,DO,1,LINR15)                              V1L5
DCER3    IC        R2,DHIGHEST
         STC       R2,NLEV             STORE LEVEL IN STANO
         MVI       DOSWCH,X'00'        ZERO SWITCH
         AIF       ('&STR' NE 'USE').DSTR5                         ST1
         TM        NB1,REF            HAS STMT. NO. BEEN REF'D.?   ST1
         BZ        CRET               NO - AWAY                    ST1
         TM        NB1,EXEC           DON'T GIVE SP-B'S IF IT'S    ST1
         BZ        CRET               NOT EXECUTABLE               ST1
         CLC       NPLVL(1),CPARNO    PAR. LEVELS MATCH?           ST1
         BE        CRET               YES - OK                     ST1
         LH        R14,NADDR+2        GET ISN FROM SYMTAB ENTRY    ST1
         LH        R0,XISN            SAVE CURRENT ISN IN R0       ST1
         STH       R14,XISN           ZAP XISN TO REFERENCE ISN    ST1
         $ERROR    (NOEX,SP,B,ISNR0)                               V1L5
         STH       R0,XISN            RESTORE CURRENT ISN          ST1
.DSTR5   ANOP                                                      ST1
         CRET
*
*        PUTS OUT END OF DO AND MAKES DO PARAM ORDINARY VAR
DOENDCD  STM       R14,R15,DOPSV
         AIF       ('&STR' NE 'USE').DSTR6                         ST1
*        CHECK FOR OVERLAPPING WITH STRUCTURED BLOCKS              ST1
         L         R8,DAENDOLP                                     ST1
         BALR      R14,R8                                          ST1
.DSTR6   ANOP                                                      ST1
         L         R15,DOPSEUD(RO)     LOAD POINTER TO PSEUDO STA NO
         LA        R15,0(R15)          ZERO TOP BYTE
         STH       R15,DMOD7+2
         A         R15,CSYMBASE
         MVC       DOPARM(1),NLEV      LOAD DOPARM FOR DOUNP
         IF        (DOEND,NON,X'02'),DCER4  TEST FOR NONEXEC
*        THERE'S A D0-0 ON CARD 887
         $ERROR    (BOOT,DO,0)         END DO ON NONEXEC STA       V1L5
DCER4    LR        R9,R2
         BAL       R14,DOUNP
         OUTPUT    DMOEND-DMOD7,DMOD7  OUTPUT LOAD PSEUD AND BRANCH
         AIF       ('&PROFILE' EQ 'OMIT').DPROF20                  V1L5
         IF        (CCNTSW,OFF),DPROF20    COUNT FALL THRU'S ?     V1L5
         BAL       R14,CISN            OUTPUT CODE FOR COUNTING    V1L5
         IF        (CMOSWTCH,ON),DPROF20   WAS CODE OUTPUT ?       V1L5
         MVI       8(R3),X'C4'         YES, INDICATE DO-LOOP       V1L5
DPROF20  DS        0H                                              V1L5
.DPROF20 ANOP                                                      V1L5
         LR        R2,R9
         LM        R14,R15,DOPSV
         NI        NB1,X'FF'-DBIT      ZERO DBIT IN THIS STA NO
         BR        R14                 RETURN
DOPSV    DC        2F'0'               SAVE AREA FOR R14 AND R15
         EJECT
DCSTN2   CENT      DSAVER
*
*        DEALS WITH REFERENCE TO STA NO IN CLLS 7 TO 72 (=N)
*
*        THIS ROUTINE DOES NOT HAVE A REGULAR SAVE AREA
*        THUS IT CANNOT CALL ROUTINES WHICH ASSUME A SAVE AREA
*        CLSTN DOES NOT REFER TO R13 FOR SAVING
*        CENT AND CRET USE 4(R13) TO SAVE R13
*
         USING     STAK,RS
         BAL       R8,DINTSTK          INITIALIZE STACKS IF NECESSARY
*        INITIALIZE DO & IO STACKS
         L         R2,SOPND
         LA        R2,0(R2)
         C         R2,CURSTNO
         BNE       DCER5
         IF        (DOEND,ON,X'04'),DCER1        TEST LOGICAL IF   V1L2
         $ERROR    (BOOT,GO,0),DSEND   STA BRANCHES TO ITSELF      V1L5
DCER1    $ERROR    (WARN,GO,0)                                     V1L5
DCER5    LOOKUP    STATNUM,,DSPRES
         USING     NLIST,R15
DSNPRES  MVI       NB1,EXEC+REF        MAKE EXECUTABLE & REFERENCED
         AIF       ('&STR' NE 'USE').DSTR7                         ST1
         IC        R14,CPARNO         INSERT PAR. NO. FOR REF      ST1
         STC       R14,NPLVL          IN NEW SYMTAB ENTRY          ST1
.DSTR7   ANOP                                                      ST1
*        THE STA NO APPEARS IN COLS 1-5 FIRST
         SNAPS     STANO,0(R15),12
         IF        (DOSWCH,Z,X'01'),DSENDA  IS IT A DO STA
         MVI       NLEV,X'FF'          DUMMY LEVEL FOR DO STA
         OI        NB1,DBIT            TURN ON DBIT
         B         DSEND               RETURN
DSENDA   IF        (DOSWCH,Z,X'02'),DSEND STA NO IN ASSIGN STATEMENTS
*                            ARE NOT CHECKED FOR BRANCH INTO DO LOOPS
         MVI       NLEV,X'FF'          DUMMY LEVEL
         B         DSEND               RETURN
*        HAS STA NO APPEARED IN COLS 1-5
DSPRES   EQU       *
         SNAPS     STANO,0(R15),12
         IF        (DOSWCH,O,X'01'),DCDOSTA  DO STATEMENT
         IF        (NB1,NZ,DBIT),DSCOKA TEST DBIT
         IF        (DOSWCH,Z,X'02'),DSCOK
         B         DSEND
DSCOKA   IF        (NLEV,NE,X'FF'),DSCOK  DUMMY LEVEL FOR DO STA
         MVC       NLEV(1),CDONO+1     REPLACE DUMMY LEVEL
         B         DSCOK
DCDOSTA  OI        NB1,DBIT            OR IN DBIT
DSCOK    OI        NB1,REF             REFERENCED BIT
         IF        (NB1,Z,ADDR),DFOUNDIT  TEST ADDRESS ASSIGNED
         IF        (DOSWCH,Z,X'01'),DCER6   IS IT A DO STA
         $ERROR    (BOOT,DO,2,STNR15,INVAL),DSEND OBJ OF DO FOUND  V1L5
*                                      BEFORE THE DO STATEMENT
*        SEARCH FOR LEVEL
DCER6    DC        0H'0'                                           ST1
         AIF       ('&STR' NE 'USE').DSTR8                         ST1
         CLC       NPLVL(1),CPARNO    DOES PAR. NO. MATCH DEF'N.?  ST1
         BE        DCSKIP1            YES - AWAY                   ST1
         LA        R1,KBL6            POINT TO BLANKS              ST1
         $ERROR    (BOOT,SP,B,CHRR1)    INSERT A BLANK             V1L5
DCSKIP1  DC        0H'0'                                           ST1
.DSTR8   ANOP                                                      ST1
         SR        R4,R4                                           ST1
         IC        R4,NLEV             INSERT LEVEL FROM STA NO
*        PICK UP LEVEL FROM DO STACK
         $FREE     R7                                              V1L5
         USING     DOSTACK,R2
         L         R2,DTOPSTK
         SR        R0,R0
DREP     IC        R0,DOPSEUD(RO)
         CR        R4,R0
         BE        DFOUNDIT
         BH        DNSTCK
         AH        R2,DOLINKB(RO)
         B         DREP
DFOUNDIT IF        (NB1,O,EXEC+REF),DSEND IS THE STA NO ON AN EXEC STAT
         $ERROR    (BOOT,GO,1,STNR15,INVAL),DSEND TRANS TO NON-EXECV1L5
*        THERE'S A DO-1 ON CARD 925                                V1L0
DNSTCK   DS        0H                                              V1L4
         CLC       4(4,R15),CURSTNO    CHECK IF GO TO STMT# = CUR# V1L4
         BE        DFOUNDIT            YES -> NO DO-6 (FIX NLEV)   V1L4
         $ERROR    (NOAC,DO,6,STNR15)  TRANSFER INTO DO-LOOP       V1L5
DSEND    NI        DOSWCH,X'01'        ZERO ASSIGNED BIT IN THIS SWITCH
         IF        (CURSTNO,NE,X'FF'),DCRET TEST IF STA IS NUMBERED
         MVI       DOSWCH,X'00'        ZERO DO BIT SINCE STA NOT #ED
DCRET    CRET
         EJECT
***********************************************************************
*        S A V E  A R E A  A N D  C O M M O N  R O U T I N E S
***********************************************************************
DSAVER   DC        18F'0'
DOINDXA  DC        F'0'
         AIF       ('&STR' NE 'USE').DSTR9                         ST1
KF24     DC        F'24'                                           ST1
         EXTRN     STENDOLP                                        ST1
DAENDOLP DC        A(STENDOLP)                                     ST1
         AGO       .DSTR10                                         ST1
.DSTR9   ANOP                                                      ST1
KF20     DC        F'20'
.DSTR10  ANOP                                                      ST1
DERCP2   $ERROR    (NOEX,CP,1),CRET    USED FOR MULT PSEUDO ST NOS V1L5
*        THIS ROUTINE IS FOR CANCELLING DO PARAMETERS
DOUNP    EQU       *
*        R7 HAS ADDR OF (DO) STACK - START
*        R3 CLOBBERED
         USING     DOSTACK,R7
         STM       R14,R15,DOUNPSV
*        INITIALIZE THE OBJECT CODE
         MVI       DMOD8,L
         MVI       DMOD9,A
         MVI       DMOD10,C
         MVI       DMOD11,ST
         MVI       DMOD8B,L
         MVI       DMOD9B,L
         MVI       DMOD10B,C
         MVI       DMOD11B,ST
         LH        R3,DOINIT(RO)       LOAD INITIAL VALUE ADDRESS
         BAL       R14,DOCANCEL        MAKE NOT DO PARAM
         LH        R3,DOINDX(RO)       LOAD ADDRESS OF INDEX
         DFIXU     (DMOD8,DMOD8A,DMOD11,DMOD11A)
         BAL       R14,DOCANCEL        INDEX
         IF        (DOPARM,Z,X'80'),DOSKA           INDEX
*        COMM OR EQUIV
         IF        (DOPARM,Z,X'40'),DOSKB       INDEX
         MVI       DMOD8B,LH
         MVI       DMOD11B,STH
DOSKB    OUTPUT    8,DMOD8A
         B         DOSKC
*        NOT COMM OR EQUIV             INDEX
DOSKA    IF        (DOPARM,Z,X'40'),DOSKD
         MVI       DMOD8,LH            INDEX
         MVI       DMOD11,STH
DOSKD    OUTPUT    4,DMOD8
DOSKC    LH        R3,DOINCR(RO)       INCREMENT
         C         R3,KF0
         BNE       *+8
         LH        R3,DCONE            FOR INCR WHEN IMPLIED
         DFIXU     (DMOD9,DMOD9A)
         IF        (DOPARM,Z,X'04'),DOSKH
         BAL       R14,DOCANCEL        INCREMENT
         IF        (DOPARM,Z,X'02'),DOSKE    INCR
*        EQUIV OR COMMON
         IF        (DOPARM,Z,X'01'),DOSKF      INCR
         MVI       DMOD9B,LH           INCR
DOSKF    OUTPUT    10,DMOD9A           INCR
         B         DOSKG
*        NOT COMMONED OR EQUIVALENCED
DOSKE    IF        (DOPARM,Z,X'01'),DOSKH    INCR
         MVI       DMOD9,AH
DOSKH    OUTPUT    4,DMOD9
DOSKG    LH        R3,DOTEST(RO)
         DFIXU     (DMOD10,DMOD10A)
         IF        (DOPARM,Z,X'20'),DOSKL
         BAL       R14,DOCANCEL        TESTVALUE
         IF        (DOPARM,Z,X'10'),DOSKI     TEST
*        COMMONED OR EQUIV
         IF        (DOPARM,Z,X'08'),DOSKJ    TESTVAL
         MVI       DMOD10B,CH
DOSKJ    OUTPUT    8,DMOD10A           TESTVAL
         B         DOSKK
*        NOT COMMONED
DOSKI    IF        (DOPARM,Z,X'08'),DOSKL   TESTVAL
         MVI       DMOD10,CH
DOSKL    OUTPUT    4,DMOD10
DOSKK    IF        (DOPARM,Z,X'80'),DOSKM
*        EQUIVALENCED OR COMMONED
         OUTPUT    8,DMOD11A
         B         DOSKN
DOSKM    OUTPUT    4,DMOD11
DOSKN    EQU       *
         LM        R14,R15,DOUNPSV
         BR        R14
         SPACE     2
*                  OBJ CODE FOR CALCULATION IN DO LOOP
         USING     ZR2,R2
***********************************************************************
*        OBJECT CODE WHEN PARAMETERS ARE CONSTANTS OR
*        SIMPLE INTEGER VARIABLES
***********************************************************************
DMOD8    L         R2,*-*              INDEX
DMOD9    A         R2,*-*              INCREMENT
DMOD10   C         R2,*-*              TESTVALUE
DMOD11   ST        R2,*-*              INDEX
*
*****************************
*****************************
*        OBJECT CODE WHEN ALL VARIABLES ARE COMMONED
*        OR EQUIVALENCED
*****************************
DMOD8A   L         R2,*-*              INDEX
DMOD8B   L         R2,ZR2
DMOD9A   L         R3,*-*              INCREMENT
DMOD9B   L         R3,ZR3
         AR        R2,R3
DMOD10A  L         R3,*-*              TESTVALUE
DMOD10B  C         R2,ZR3(RO)
DMOD11A  L         R3,*-*              INDEX
DMOD11B  ST        R2,ZR3
*****************************
*
         SPACE     2
*        ROUTINE TO CANCEL DO PARAMETERS
*        THIS IS USED ON INITIAL WHETHER VARIABLE OR CONSTANT
*        BUT IT IS DESIGNED FOR VARIABLES
*        R3 IS AS FROM LOOKUP
*        R3 IS CLOBBERED
DOCANCEL N         R3,KM1631
         A         R3,CSYMBASE
         C         R3,XENDOBJ          IN CASE OF ERRORS           V1L3
         BNL       *+8                                             V1L3
         NI        3(R3),X'EF'         CANCEL DO PARAMETERS
         SNAPS     DOPARAM,0(RO,R3),12
         BR        R14
         SPACE     2
****     TEST FOR INTEGER VARIABLES
         USING     VLIST,R15
DCOM     IF        (VB1,EQ,SIMV+INT4),DONE  TEST FULL INTEGER
         IF        (VB1,EQ,SIMV+INT2),DONE  TEST HALF INTEGER
         B         DERSX8              ERROR EXIT
         SPACE     2
****     LOOKUP AND TEST ASSIGNED VARIABLE
*        R8 IS BOTH NORMAL RETURN AND RETURN AFTER ERRORS
DINTA    LOOKUP    VARIABLE,,DESA
         BAL       R14,DCOM
         OI        VB2,B2AS+TYPE+USAGE  MAKE ASSIGNED
         BR        R8
DESA     BAL       R14,DCOM
         IF        (VB2,ON,B2AS),0(R8) RETURN IF ASSIGNED ALREADY
         IF        (VB2,NOFF,USAGE+PARM),DERGO3 ASSIGNED VAR MISUSED
         BR        R8                  RETURN
         SPACE     2
****     LOOKUP AND TEST DO PARAMETER
         USING     VLIST,R15
DINTCI   MVI       DINBR+1,X'F0'       CREATE A BRANCH INSTRUCTION
         B         DINTC
DINTCO   MVI       DINBR+1,X'00'       CREATE A NOP INSTRUCTION
DINTC    LOOKUP    VARIABLE,,DESB
DOB      BAL       R14,DCOM
         OI        VB2,B2DO+TYPE+USAGE    MAKE DO PARM
         BR        R8
DESB     BAL       R14,DCOM
         IF        (VB2,O,B2AS),DERGO3
         IF        (VB2,Z,B2DO),DAR  TEST DO PARM
*        IF INDEX THIS IS  B DARER
*        IF NOT INDEX THIS IS  NOP DARER
DINBR    NOP       DARER
         C         R15,DOINDXA
         BNER      R8                  RETURN
DARER    $ERROR    (BOOT,DO,4,NAMR15,INVAL) INVALID DO PARAMETER   V1L5
         BR        R8
DAR      OI        VB2,B2DO            MAKE DO PARM IF NOT ONE
         BR        R8
         SPACE     2
DINTSTK  SR        R1,R1
         C         R1,DTOPSTK
         BNER      R8                  RETURN
         S         R6,KF16             GET 16 BYTES
         ST        R6,DOIOCT           STORE PTR TO TOP OF I/O STACK
         AIF       ('&STR' NE 'USE').DSTR11                        ST1
         S         R6,KF8              GET 8 MORE                  ST1
         AGO       .DSTR12                                         ST1
.DSTR11  ANOP                                                      ST1
         S         R6,KF4              GET 4 MORE
.DSTR12  ANOP                                                      ST1
         ST        R6,DTOPSTK          STORE PTR TO TOP OF DO STACK
         GETSYM    ,CHECK              CHECK FOR SYMBOL TABLE OVERFLOW
         AIF       ('&STR' NE 'USE').DSTR13                        ST1
         MVC       0(24,R6),DSTACK     INITIAL STACK ENTRY         ST1
         AGO       .DSTR14                                         ST1
.DSTR13  ANOP                                                      ST1
         MVC       0(20,R6),DSTACK     INITIAL STACK ENTRY
.DSTR14  ANOP                                                      ST1
         BR        R8                  RETURN
*        INITIAL STACK ENTRY
*        DC        F'0'                PTR BACK AND FORWARD FOR DOSTACK
*        DC        F'0'                PTR BACK & FORWARD FOR I/O STACK
*        DC        F'0'                UNUSED
*        DC        X'00FFFFFF'         PSEUDO STA NO
*        DC        X'7FFFFFFF'         STA NO IN BINARY
         AIF       ('&STR' NE 'USE').DSTR15                        ST1
*        DC        F'0'                DO STATEMENT ISN            ST1
.DSTR15  ANOP                                                      ST1
*
DERDO5   $ERROR    (BOOT,DO,5,SYMRS,INVAL)  INVALID DO PARAMETER   V1L5
         BR        R8
DERDOA   $ERROR    (LANG,DO,A)                                     V1L5
         BR        R8
DERSX7   $ERROR    (BOOT,SX,7,DELRS,UNEX)                          V1L5
         BR        R8
DERSX5   $ERROR    (BOOT,SX,5,SYMRS,UNEX) EXPECTING SYMBOL OR CONSTV1L5
         BR        R8
DERSX6   $ERROR    (BOOT,SX,6,SYMRS,UNEX) EXPECTING STA NO         V1L5
         BR        R8
GERSX1   LA        R8,CRET
DERSX1   $ERROR    (BOOT,SX,1,DELRS,INVAL) EXPECTING OPERATER      V1L5
         BR        R8
DERSX0   $ERROR    (BOOT,SX,0,SYMRS,UNEX) MISSING OPERATER         V1L5
         BR        R8
DERSX8   $ERROR    (BOOT,SX,8,NAMR15,INVAL)  SIMPLE INT VAR OR CONSV1L5
         BR        R8
DERGO3   $ERROR    (WARN,GO,3,NAMR15,INVAL) MISUSE OF ASSIGNED VAR V1L5
         BR        R8
DSVR13   DC        F'0'
DOUNPSV  DC        2F'0'
DLARGE   DS        0F
         DC        X'7FFFFFFF'
DOINITVL DC        F'0'
DCONE    DC        0F'0',S(XONE)
DSTACK   DC        3F'0',X'00FFFFFF7FFFFFFF'     INITIAL STACK ENTRY6
         AIF       ('&STR' NE 'USE').DSTR16                        ST1
         DC        F'0'                                            ST1
.DSTR16  ANOP                                                      ST1
DOIOCT   DC        F'0'
*        X'01' = DO STATEMENT
*        X'02' = ASSIGN STATEMENT
DOSWCH   DC        X'00'               SWITCH FOR DCSTN1 AND DCSTN2
*        FOR DOSWCH,X'01'=DO STA,X'02'=ASSIGN STA
DATASTSW DC        X'00'               INDICATES VARIABLE PARM FOR DATA
DOIO     DC        X'00'               X'00'=NOT I/O , X'01'= I/O STAT
         SPACE     2
*        D O P A R M
         SPACE     2
*   INDEX      *       TESTVALUE       *      INCREMENT        *
*              *                       *                       *
*      *       *       *       *       *       *       *       *
* 0=NOT*0=FULL *0=CONST*0=NOT  *0=FULL *0=CONST*0=NOT  *0=FULL *
*      *       *       *       *       *       *       *       *
*1=EQV *1=HALF *1=VAR  *1=EQV  *1=HALF *1=VAR  *1=EQV  *1=HALF *
*      *       *       *       *       *       *       *       *
DOPARM   DC        X'00'
*        D O P A R M H       CONTAINS INFO ABOUT INITIAL
*        1ST BIT  0=CONST
*        1ST BIT 1=VARIABLE
*        2ND BIT 0=NOT COM OR EQV
*        2ND BIT  1=COM OR EQV
*        3RD BIT  0=FULL
*        3RD BIT  1=HALF
DOPARMH  DC        X'00'
DHIGHEST DC        X'00'               HIGHEST DONO IN STACK BEFORE
         LTORG
         END
