FRIO     TITLE     'FRIOSCAN     RUN-TIME INPUT SCAN ROUTINES'
         PRINT     ON,GEN
         COPY      OPTIONS
         $PUNCH    FRIOSCAN                                        DVS2
         ENTRY     FRIOTEMP
         ENTRY     FRIOSCAN
         ENTRY     FRIOCRET
         ENTRY     FRIOEND
***********************************************************************
***********************************************************************
***********************************************************************
*        THIS SECTION SCANS THE INPUT FIELD, (IN FORMAT I/O), OR THE
*        COMPLETE INPUT BUFFER, (IN FREE I/O), TO SET UP THE INPUT
*        FIELD(S) FOR CONVERSION TO THE APPROPIATE INTERNAL REPRESENT-
*        ATION. INVALID DATA CHARACTERS OR INVALID DATA FORMATS ARE  -
*        CAUGHT HERE AND RESULT IN TERMINATION OF EXECUTION OF THE   -
*        OBJECT PROGRAM
*
*        METHOD.
*        A TRANSLATE AND TEST INSTRUCTION IS USED WITH A TABLE
*        INITIALIZED FOR THE GIVEN FORMAT TYPE. ANY NON-ZERO CODE IN
*        THE TABLE STOPS THE SCAN AND IS USED TO INDEX A SET OF
*        ADDRESSES POINTING TO THE ROUTINE TO BE ENTERED.
*
***********************************************************************
***********************************************************************
***********************************************************************
         EJECT
R0       EQU       0                   TO PASS ERROR CODES
R1       EQU       1                   POINTER TO NEXT INPUT CHAR
R2       EQU       2                   CODE FROM SCAN TABLE
R3       EQU       3                   LENGTH OF FIELD
R4       EQU       4                   END OF FIELD ADDRESS
R5       EQU       5                   EXIT FOR ALL ROUTINES
R6       EQU       6                   FORMAT=4,FREE I/O=0
R7       EQU       7                   LOGICAL=0,INTEGER=4,
*                                      REAL=8,COMPLEX=C,HEX=10
R8       EQU       8                   WORK REGISTER
R9       EQU       9                   WORK REGISTER
R10      EQU       10                  STORAGE POINTER
R11      EQU       11                  PREVIOUS START ADDRESS
R12      EQU       12
R13      EQU       13                  POINTS TO SAVE AREA
R14      EQU       14
R15      EQU       15                  BASE REGISTER
         EJECT
*
*        THIS IS THE ENTRY POINT FOR THE FIRST FIELD OF ANY
*        READ STATEMENT AND FOR EACH FIELD IN FORMAT I/O
*
FRIOSECT CSECT
FRIOSCAN STM       R5,R15,12(R13)      SAVE CALLER'S REGISTERS
         BALR      R15,0               LOAD MY BASE REGISTER
         USING     *,R15               AND TELL ASSEMBLER
*
*        INITIALIZATION
*
FRIOINIT ST        R1,FRSAVER1         SAVE STARTING ADDRESS
         L         R9,FROUTNIT(R7)     GO TO ROUTINE
         MVI       BLANKSW,X'FF'       TURN ON BLANK SWITCH
         BALR      R5,R9               FOR THIS TYPE
         BC        15,*+4(R6)          BRANCH AROUND IF FORMAT
         BAL       R5,FRIOMOD          GO TO FREE I/O INITIALIZE
FRIOZERO MVC       FRIODUPL,=X'0001'   DUPLICATION =1
         MVC       FRIOTEMP-8(30),FRIOTEMP-9  CLE&R FIELDS TO NULL
         LA        R10,FRIOTEMP        SET POINTER TO START
         LA        R1,0(0,R1)          CLEAR HIGH ORDER BITS OF R1
*
*        SCAN ROUTINE
*
FREXSCAN LR        R11,R1              SAVE START ADDRESS
         MVC       LFTBRK26,LEFTBRAK   ALLOW BCD CHARACTERS
         MVC       RTBRK26,RIGHTBRK    IN SCAN GIVING
         MVC       PLUS26,PLUSSIGN     SAME CODES AS EBCDIC
         MVI       EQUALS,X'04'        EQUALS SIGN ALWAYS INVALID  V1L5
         MVI       EQU26,X'04'         EVEN 26 ONES                V1L5
         LR        R3,R4               GET LENGTH-1
         SR        R3,R1               IN REG 3
         SR        R2,R2               CLEAR R2
         EX        R3,FRIOTRT          PERFORM SCAN
         BC        8,FREXIT1           IF NO STOP EXIT
         BC        2,FRSETEX           IF LAST CHAR STOPS BRANCH
         LA        R5,FREXSCAN         MODIFY EXIT ADDRESS
FRIOLOAD L         R9,FRIOROUT(R2)     USE CODE FROM SCAN TABLE TO
*                                      SET UP PROPER ROUTINE
         LTR       R6,R6               TEST FOR FREE I/O
         BCR       2,R9                BRANCH TO ROUTINE IF FORMAT
         CLI       BLANKSW,X'00'       IS BLANK SWITCH ON
         BCR       8,R9                NO GO TO ROUTINE
         MVI       COMMA,X'20'         YES COMMA IS DELIMITER
         MVI       BLANKSW,X'00'       TURN OFF BLANK SWITCH
         BCR       15,R9               AND GO TO ROUTINE
FRIOTRT  TRT       0(1,R1),FRIOTABL    ACTUAL SCAN INSTRUCTION
*
*        THIS ROUTINE MODIFIES EXITS IF SCAN IS STOPPED IN LAST POS
*
FRSETEX  EQU       *
         LA        R5,FREXIT3          SET ROUTINE EXIT
         BC        15,FRIOLOAD         GO TO ROUTINE VIA FRIOLOAD
         EJECT
*
*        COMMUNICATION FIELDS FOR CONVERSION ROUTINE
*
         CNOP      6,8
         DC        X'0000'             CONSTANT TO CLEAR FIELDS
FRDOUBLE DS        D                   FOR CONVERTING DECIMAL TO BINARY
FRIOTEMP DC        ZL16'0'             ACTUAL VARIABLE VALUE
FRIOEXP  DC        H'0'                EXPONENT VALUE
FRIOBLNK DC        H'0'                NO OF PRECEDING BLANKS
FRIOVSGN DC        X'00'               SIGN OF VARIABLE
FRIOESGN DC        X'00'               EXPONENT SIGN AND SWITCH
FRIODUPL DC        H'1'                DUPLICATION FACTOR
*
*        SCAN TABLE
*
FRIOTABL DC        64XL1'04'           INVALID CHARACTERS
BLANK    DC        X'00'
         DC        10XL1'04'           INVALID CHARACTERS
DECPOINT DC        X'1C'               DECIMAL POINT
RTBRK26  DC        X'1C'               RIGHT BRACKET ON 26
LEFTBRAK DC        X'1C'               LEFT BRACKET
PLUSSIGN DC        X'18'
         DC        X'04'
PLUS26   DC        X'18'               PLUS SIGN ON 26
         DC        11XL1'04'
ASTERISK DC        X'1C'               ASTERISK FOR DUPLICATION IN FREE
RIGHTBRK DC        X'1C'               RIGHT BRACKET
         DC        2XL1'04'            INVALID CHARACTERS
MINUSIGN DC        X'18'               MINUS SIGN
         DC        10XL1'04'           INVALID CHARACTERS
COMMA    DC        X'24'
LFTBRK26 DC        X'1C'               LEFT BRACKET ON 26
         DC        14XL1'04'           INVALID CHARACTERS          V1L5
EQU26    DC        X'04'               EQUALS SIGN ON 26 KP        V1L5
         DC        2XL1'04'            INVALID CHARACTERS          V1L5
EQUALS   DC        X'04'               EQUALS SIGN ON 29 KP        V1L5
         DC        66XL1'04'           INVALID CHARACTERS          V1L5
ABC      DC        XL3'1C1C1C'         LETTERS A,B,C
DE       DC        XL2'1C1C'           LETTERS D,E
FALSE    DC        X'04'               LETTER F
         DC        28XL1'04'           INVALID CHARACTERS
TRUE     DC        X'04'               LETTER T
         DC        5XL1'04'            INVALID CHARACTERS
Z        DC        XL1'04'             LETTER Z
         DC        6XL1'04'            INVALID CHARACTERS
ZERO     DC        X'00'
NUMBERS  DC        X'282828282828282828'   NUMBERS 1-9
         DC        6XL1'04'            INVALID CHARACTERS
BLANKSW  DC        X'00'               BLANK SWITCH
TFSWTCH  DC        X'00'               INDICATOR AS TO WHETHER A T OR
*                                      F HAS OCCURED IN A LOGICAL VAR
FRHEXSW  DC        X'00'
         EJECT
*
*        ADDRESSS  LIST FOR INITIALIZATION ROUTINES
*
FROUTNIT DS        0F                                      HEX CODE
         DC        A(FRLOGCAL)         LOGICAL             0
         DC        A(FRINTGER)         INTEGER             4
         DC        A(FRIOREAL)         REAL                8
         DC        A(FRCOMPLX)         COMPLEX             C
         DC        A(FRHEXDEC)         HEXADECIMAL         10
*
*        ADDRESS LIST FOR PROCESSING ROUTINES
*
FRIOROUT EQU       *-4                                     HEX CODE
         DC        A(FRINVCHR)         INVALID CHARACTER   04
         DC        A(FRRTDEL)          END OF COMPLEX HALF 08      V1L4
         DC        A(FRLFTDEL)         LEFT DELIMITER      C
         DC        A(FRIOSTOR)         STORE CHARACTERS    10
         DC        A(FRDECPNT)         DECIMAL POINT       14
         DC        A(FRIOSIGN)         STORE SIGN          18
         DC        A(FRINVCHR)         INVALID CHARACTER   1C
         DC        A(FRRTDEL)          RIGHT DELIMITER     20
         DC        A(FRDETSIG)         DETECT SIGNIFIGANCE 24
         DC        A(FRDUPFCT)         DUPLICATION FACTOR  28
         DC        A(FRDETEXP)         DETECT EXPONENT     2C
         DC        A(FRALLDUP)         ALLOW DUPLICATION   30
         DC        A(FRNODUP)          DISABLE DUPLICATION 34
         DC        A(FREXPCHR)         EXPONENT CHARACTER  38
         DC        A(FRHEXSTR)         FREE HEX            3C
         DS        0F
FRSAVER1 DS        F                   SAVEAREA FOR STARTING ADDRESS
FRTEMP   DC        ZL8'0'     FOR STORING HALF OF HEX VARIABLE
*
*        ROUTINE TO INITIALIZE SCAN TABLE FOR LOGICAL VARIABLES
*
FRLOGCAL MVI       FRIOTABL,X'00'      SET UP
         MVC       FRIOTABL+1(255),FRIOTABL SCAN TABLE
         MVI       FALSE,X'24'         TO STOP FOR
         MVI       TRUE,X'24'          T OR F
         MVI       BLANK,X'24'         OR BLANK
         MVI       TFSWTCH,X'00'       INITIALIZE TFSWTCH
         MVI       PLUSSIGN,X'18'      INDICATE THE &              V1L5
         MVI       LEFTBRAK,X'04'      '(' INVALID FOR LOGICAL     V1L5
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        INITIALIZE SCAN TABLE FOR INTEGERS
*
FRINTGER ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         BAL       R5,FRIOREAL         USE REAL INITIALIZATION
         MVI       DECPOINT,X'04'      INVALID IN INTEGER
         MVC       DE,=X'0404'         INVALID IN INTEGER
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        INITIALIZE SCAN TABLE FOR REAL
*
FRIOREAL MVI       ZERO,X'24'          SET NUMBERS TO DETECT
         MVC       NUMBERS,ZERO        SIGNIFIGANCE
         MVC       DECPOINT(4),=X'14040418' SET CODES FOR OTHERS
         MVC       ASTERISK(5),=X'0404040418'   IN SCAN TABLE
         MVC       ABC(6),=X'0404041C1C04'  FOR REAL
         MVI       COMMA,X'04'         INVALID EXCEPT IN FREE I/O
         MVI       BLANK,X'00'         SCAN OUT BLANKS
         MVI       Z,X'04'             SET Z TO INVALID CHAR
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        INITIALIZE SCAN TABLE FOR COMPLEX VARIABLES IN FREE I/O
*
FRCOMPLX ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         MVI       FRIOTABL,X'1C'      SET TABLE SO THAT
         MVC       FRIOTABL+1(255),FRIOTABL    ONLY A LEFT BRACKET
         MVI       LEFTBRAK,X'0C'      AND BLANKS ARE VALID
         MVI       BLANK,X'00'         FIRST CHARACTERS
         MVI       COMMA,X'04'         COMMAS ARE INVALID
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        INITIALIZE SCAN TABLE FOR HEXADECIMAL VARIABLES
*
FRHEXDEC ST        R5,FREXSAVE+4       SAVE RETURN ADDRESS
         BAL       R5,FRINTGER         USE INTEGER INITIALIZATION
         MVC       ABC(6),NUMBERS      ALL HEX DIGITS VALID
         MVI       FRHEXSW,X'00'       INITIALIZE FRHEXSW
         MVI       PLUSSIGN,X'1C'      DO NOT ALLOW 29 PLUS        V1L1
         MVI       MINUSIGN,X'1C'      DO NOT ALLOW MINUS          V1L1
         L         R5,FREXSAVE+4       RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        INITIALIZE SCAN TABLE FOR FREE I/O
*
FRIOMOD  EQU       *
         LTR       R7,R7               TEST FOR LOGICAL
         BC        8,FRMODLOG          IF YES BRANCH
FRSETDUP MVI       ZERO,X'24'          ALLOW DEC DIGITS
         MVI       Z,X'3C'             SET Z TO START HEX FIELD
         MVC       NUMBERS,ZERO        IN DUPLICATION FACTOR
         MVI       ASTERISK,X'28'      INDICATES DUPLICATION FACTOR
FRMODUP  EQU       *
         MVI       COMMA,X'00'
         CR        R4,R1               CHECK FOR BUFFER END
         BNL       FRIOZERO            IF NOT GO BACK
FRBUFOVL L         R0,FRERRUN1         LOAD ERROR CODE
         LM        R5,R15,12(R13)       RESTORE CALLER'S REGISTERS
         BCR       15,R5               RETURN TO CALLER
         CNOP      0,4
FRERRUN1 DC        F'8'                BUFFER OVERFLOW CODE
*
         EJECT
*
**       ROUTINE TO ALLOW DUPLICATION FACTORS IN LOGICAL VARIABLES
*
FRMODLOG MVI       FRIOTABL,X'34'      SET ALL CHARS EXCEPT INTEGERS
         MVC       FRIOTABL+1(255),FRIOTABL TO DISALLOW DUP FACTOR
         MVI       ZERO,X'30'          ON INTEGERS ALLLOW
         MVC       NUMBERS,ZERO        DUPLICATION FACTOR
         MVI       FALSE,X'24'         DETECT FALSE
         MVI       TRUE,X'24'          DETECT TRUE
         MVI       BLANK,X'24'         DETECT BLANKS
         MVI       PLUSSIGN,X'18'      ALSO SHOULD BE DETECTED     V1L5
         BC        15,FRMODUP          RETURN TO MAIN ROUTINE
         EJECT
*
*        INVALID DATA CHARACTER ROUTINE
*
FRINVCHR L         R0,FRERRFM0         LOAD ERROR MESSAGE          V1L5
         CLI       0(R1),X'7E'         WAS IT EBCDIC '='?          V1L5
         BE        FMVPTR              BACKUP POINTER              V1L5
         CLI       0(R1),X'4D'         WAS IT EBCDIC '('?          V1L5
         BE        FMVPTR              RESTORE POINTER             V1L5
         CLI       0(R1),X'7B'         WAS IT BCDIC '='?           V1L5
         BE        FMVPTR              POINT TO LAST TOKEN         V1L5
         CLI       0(R1),X'6C'         WAS IT BCDIC '('?           V1L5
         BNE       FRINVCH1            REPROCESS ELEMENT           V1L5
FMVPTR   DS        0H                  RESTORE PTR TO ELEMENT      V1L5
         L         R1,FRSAVER1         AFTER LAST COMMA FOUND      V1L5
FRINVCH1 DS        0H                                              V1L5
         LM        R5,R15,12(R13)      RESTORE CALLER'S REGISTERS
         BCR       15,R5               RETURN TO CALLER
         CNOP      0,4
FRERRFM0 DC        F'0'                INVALID CHARACTER CODE
         EJECT
*
*        ROUTINE TO PROCESS HEX FIELDS IN FREE I/O
*
FRHEXSTR LA        R1,1(0,R1)          MOVE POINTER PAST Z
         LA        R7,16               SET TYPE TO HEX
         BAL       R5,FRHEXDEC         SET TABLE TO SCAN FOR HEX
         MVI       COMMA,X'20'         COMMA IS RIGHT DELIMITER
         MVI       BLANK,X'20'         BLANK IS RIGHT DELIMITER
         BC        15,FREXSCAN         RETURN TO SCAN
         EJECT
*
*        LEFT BRACKET ROUTINE FOR COMPLEX NOS IN FREE I/O
*
FRLFTDEL ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         LA        R1,1(0,R1)          MOVE POINTER TO NEXT CHAR
         BAL       R5,FRIOREAL         USE REAL INITIALIZATION
         MVI       LEFTBRAK,X'1C'      LEFT BRACKET NOW INVALID
         MVI       COMMA,X'08'         END OF FIRST FIELD
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        ROUTINE TO SCAN OVER DUPLICATION FACTOR IN FREE I/O
*
FRALLDUP MVI       ZERO,X'00'          DO NOT STOP
         MVC       NUMBERS,ZERO        ON INTEGERS
         MVI       ASTERISK,X'28'      ASTERISK IS DUPLICATION FACTOR
         MVI       COMMA,X'20'         RIGHT DELIMITER
         MVI       BLANK,X'20'         BLANK IS NOW DELIMITER
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        ROUTINE TO DISALLOW DUPLICATION FACTORS
*
FRNODUP  ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         BAL       R5,FRLOGCAL         USE LOGICAL INITIALIZATION
         MVI       COMMA,X'20'         FOR FREE I/O
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLLER
         EJECT
*
*        DETECT THE FIRST SIGNIFIGANT DIGIT
*
FRDETSIG MVI       ZERO,X'00'          SCAN OVER ZEROS
         CLI       0(R1),X'F0'         CHECK FOR ZERO
         BC        8,*+10              BRANCH AROUND IF YES
         MVC       NUMBERS,ZERO        SCAN OVER ALL DIGITS NOW
         MVI       PLUSSIGN,X'1C'      IMBEDDED PLUS IS INVALID
         MVI       MINUSIGN,X'1C'      IMBEDDED MINUS IS INVALID
         BC        15,*+4(R6)          BRANCH AROUND IF FORMAT
         MVI       BLANK,X'20'         IF FREE BLANK IS DELIMITER
         L         R9,FRSGROUT(R7)     GO TO ROUTINE FOR THIS TYPE
         BCR       15,R9               AND GO TO IT
*
*        REAL AND COMPLEX ROUTINE
*
FREALSIG EQU       *
         CLI       DECPOINT,X'1C'      HAS A DECIMAL POINT BEEN FOUND
         BC        8,FREESIG           IF YES BRANCH
         B         EXPIT               INDICATE EXPONENT AND EXIT  V1L4
FRCMPSIG LTR       R6,R6               TEST FOR FREE I/O
         BNE       BLNKINV             BRANCH AROUND IF NOT        V1L4
         CLI       LEFTBRAK,X'0C'      HAS A LEFT BRACKET BEEN FOUND
         BNE       BLNKINV             YES BRANCH AROUND           V1L4
         LR        R8,R1               SET UP R8 TO
         LA        R8,1(0,R8)          POINT TO NEXT CHARACTER
         CLI       0(R8),X'F0'         IS IT A DIGIT
         BNL       *-8                 YES CONTINUE
         CLI       0(R8),C'*'          IS IT  AN ASTERISK
         BC        7,FRINVCHR          NO INVALID CHARACTER
BLNKINV  MVI       BLANK,X'1C'         BLANK INVALID INSIDE BRACKETV1L4
         CLI       DECPOINT,X'1C'      IF DECIMAL POINT IS INVALID V1L4
         BE        FREESIG             THEN DON'T MAKE VALID       V1L4
         MVI       DECPOINT,X'14'      DECIMAL POINT NOW VALID     V1L4
FREESIG  SR        R11,R1              GET NO OF BLANKS OR ZEROS
         AH        R11,FRIOEXP         AND STORE
         STH       R11,FRIOEXP         IN FRIOEXP
EXPIT    MVI       MINUSIGN,X'2C'      SIGN INDICATES EXPONENT     V1L4
         MVI       PLUSSIGN,X'2C'      SIGN INDICATES EXPONENT
         MVC       DE,=X'2C2C'         EXPONENT NOW ALLOWED
         BC        15,FRSIGEX          AND EXIT
*
*        HEXADECIMAL ROUTINE
*
FRHEXSIG MVC       ABC(6),NUMBERS      SCAN OVER ALL HEX DIGITS
*
*        EXIT ROUTINE
*
FRSIGEX  LR        R11,R1              STORE ADDRESS OF THIS CHAR
         BCR       15,R5               RETURN TO CALLER
*
*        ADDRESSES OF ROUTINES USED FOR EACH TYPE
*
FRSGROUT DS        0F
         DC        A(FRLOGSIG)         LOGICAL ROUTINE
         DC        A(FRSIGEX)          INTEGER RETURN
         DC        A(FREALSIG)         REAL ROUTINE
         DC        A(FRCMPSIG)         COMPLEX ROUTINE
         DC        A(FRHEXSIG)         HEXADECIMAL ROUTINE
         EJECT
*
*        LOGICAL ROUTINE
*
FRLOGSIG CLI       0(R1),C'T'          CHECK IF TRUE
         BC        6,*+8               BRANCH AROUND IF NOT
         MVI       FRIOTEMP,X'FF'      SET CODE TO TRUE
         MVI       FRIOTABL,X'00'      OTHERWISE SET
         MVC       FRIOTABL+1(255),FRIOTABL   TABLE TO SCAN FOR
         LTR       R6,R6               TEST FOR FREE I/O
         BC        7,*+12              BRANCH AROUND IF NOT
         MVI       BLANK,X'20'         BLANKS AND
         MVI       COMMA,X'20'         COMMAS
         CLI       0(R1),C' '          CHECK FOR BLANKS
         BC        8,*+10              YES BRANCH AROUND
         MVI       TFSWTCH,X'FF'       SET TFSWTCH
         BCR       15,R5               RETURN TO CALLER
         MVI       BLANK,X'24'         YES SCAN ALL BLANKS
         LH        R8,FRIOBLNK         AND KEEP A COUNT OF
         AH        R8,FRHONE           THEM IN FRIOBLNK
         STH       R8,FRIOBLNK         TO TEST FOR VALID BLANK LOGICAL
         LA        R1,1(0,R1)            MOVE TO NEXT CHARACTER
         MVI       TRUE,X'24'          ALSO CONTINUE TO SCAN FOR
         MVI       FALSE,X'24'         T'S AND F'S
         MVI       PLUSSIGN,X'18'      AND &'S                     V1L5
         MVI       LEFTBRAK,X'04'      '(' INVALID FOR LOGICAL     V1L5
         BCR       15,R5               AND RETURN TO CALLER
*
         DS        0F
FRHONE   DC        H'1'                 INCREMENT CONSTANT
         EJECT
*
*        STORE     SIGN
*
FRIOSIGN EQU       *
         MVI       PLUSSIGN,X'1C'      PLUS IS NOW INVALID
         MVI       MINUSIGN,X'1C'      SO IS MINUS
         MVI       ASTERISK,X'04'      ASTERISK IS NOW INVALID
         LTR       R7,R7               IS THIS LOGICAL             V1L5
         BNZ       *+10                BRANCH AROUND IF NOT        V1L5
         MVC       DE,=X'0404'         MUST BE &END                V1L5
         TM        0(R1),X'20'         TEST FOR MINUS IN BCD
         BC        8,*+8               IF PLUS, BRANCH AROUND
         MVI       FRIOVSGN,X'80'      TURN SIGN BIT ON IF MINUS
         BC        15,*+4(R6)          BRANCH AROUND IF FORMAT
         BC        15,FRSIGNEX         IF FREE EXIT FROM HERE
         L         R9,FRSGNMOD(R7)     IF FORMAT GO TO PROCESS ROUTINE
         BCR       15,R9               FOR THIS TYPE
*
*        ROUTINE TO COUNT LEADING BLANKS OR ZEROS IN FORMAT REAL I/O
*
FREALSGN EQU       *
         BC        15,FRSIGNEX+4       AND GO TO EXIT
*
*        EXIT ROUTINE
*
FRSIGNEX MVI       BLANK,X'20'         BLANK IS NOW DELIMITER
         CR        R1,R4               IF SIGN IS IN LAST POSITION
         BE        0(0,R5)             RETURN TO CALLER
         LA        R1,1(0,R1)          OTHERWISE MOVE POINTER PAST SIGN
         BCR       15,R5               RETURN TO CALLER
*
*        ROUTINE ADDRESSES
*
         DS        0F
FRSGNMOD EQU       *-4
         DC        A(FRSIGNEX+4)       INTEGER RETURN
         DC        A(FREALSGN)         REAL ROUTINE
         DC        A(FRSIGNEX+4)       COMPLEX RETURN
         EJECT
*
*        STORE COUNT OF NUMBER OF DIGITS BEFORE DECIMAL POINT
*
FRDECPNT MVI       DECPOINT,X'1C'      ONLY ONE DECPOINT ALLOWED
         MVI       ASTERISK,X'04'      ASTERISK NOW INVALID
         MVC       DE,=X'2C2C'         CAN NOW DETECT EXPONENT
         MVI       PLUSSIGN,X'2C'      SIGN INDICATES EXPONENT
         MVI       MINUSIGN,X'2C'      SIGN INDICATES EXPONENT
         MVI       FRIOBLNK,X'80'      SET TO DEC POINT FOUND
         CLI       NUMBERS,X'24'       HAVE WE DETECTED A SIG DIGIT
         BC        8,FREALT0           IF NOT BRANCH AROUND
         ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         BCTR      R1,0                MOVE POINTER TO PREVIOUS DIGIT
         BAL       R5,FRIOSTOR         STORE DIGITS BEFORE DECIMAL
         LA        R3,1(0,R3)          GET NO OF DIGITS IN R3
         STH       R3,FRIOEXP          STORE DIGIT COUNT IN FRIOEXP
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
FREALT0  EQU       *
         CR        R1,R4               CHECK FOR FIELD END
         BCR       10,R5               QUIT IF THERE
         LA        R1,1(0,R1)          MOVE POINTER PAST DECIMAL
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        ROUTINE TO STORE CHARACTERS IN COMMUNICATION FIELDS
*
FRIOSTOR LR        R3,R1               GET LENGTH OF FIELD TO BE
         SR        R3,R11              STORED IN R3
         BC        4,FRMOVPNT          IF LENGTH NEGATIVE BYPASS
         LA        R8,0(R3,R10)        GET END ADDRESS WHEN STORED
         LA        R9,FRIOEXP-1        GET END ADDRESS ACCEPTABLE
         SR        R8,R9               GET OVERLAP
         BNP       *+10                NO OVERLAP BRANCH
         SR        R3,R8               GET NEW LENGTH
         BM        FRMOVPNT            LENGTH NEGATIVE BYPASS
*
         EX        R3,FRSTORCH         AND STORE WHERE R10 POINTS
         LA        R10,1(R3,R10)       MOVE STORAGE POINTER
FRMOVPNT LA        R1,1(0,R1)          MOVE POINTER TO NEXT CHAR
         BCR       15,R5               RETURN TO CALLER
FRSTORCH MVC       0(1,R10),0(R11)     STORE FROM POINTER R11 WITH
*                                      LENGTH IN R3 TO POINTER R10
         EJECT
*
*
*        DUPLICATION FACTOR IN FREE I/O
*
FRDUPFCT EQU       *
         CLI       NUMBERS,X'00'       CHECK IF ANY DUP FACTOR FOUND
         BC        6,FRDUPEX           IF NOT LEAVE AS 1
         BCTR      R1,0                STORE DUPLICATION FACTOR
         BAL       R5,FRINTEX          RIGHT JUSTIFIED IN FRIOTEMP
         PACK      FRDOUBLE,FRIOTEMP+11(5)  PACK AND
         CVB       R9,FRDOUBLE         CONVERT TO BINARY
         STH       R9,FRIODUPL         AND STORE IN DUPLICATION FACTOR
         L         R9,FROUTNIT(R7)     GO TO INITIALIZATION FOR
         BALR      R5,R9               THIS TYPE AND GO
FRDUPEX  MVI       COMMA,X'20'         COMMMA IS RIGHT DELIMITER
         MVI       BLANK,X'20'         BLANK IS RIGHT DELIMITER
         MVI       ASTERISK,X'04'      ASTERISK NOW INVALID
         LA        R1,1(0,R1)          MOVE POINTER PAST ASTERISK
         BC        15,FRIOZERO+6       RETURN TO SCAN
         EJECT
*
*        STORE EXPONENT TYPE
*
FRDETEXP ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         BCTR      R1,0                MOVE POINTER BACK
         CLI       0(R1),C'.'           IS THIS CHAR A DEC POINT
         BC        8,FRDTINCR           YES BRANCH AROUND
         BAL       R5,FRIOSTOR           NO STORE CHARACTEERS
         LTR       R6,R6               CHECK FOR FREE I/O
         BC        2,*+8               BRANCH AROUND IF FORMAT
         MVI       FRIOBLNK,X'80'      SET TO DECIMAL POINT FOUND
         CLI       DECPOINT,X'1C'      HAS A DECIMAL POINT BEEN FOUND
         BE        FRDTINCR+4          BRANCH AROUND IF YES
         LR        R3,R1               GET NO OF DIGITS SCANNED
         SR        R3,R11              LAST PASS IN R3
         STH       R3,FRIOEXP          STORE NO OF DIGITS AS EXPONENT
         BC        15,*+8              BRANCH AROUND NEXT INSTRUCTION
FRDTINCR LA        R1,1(0,R1)          MOVE POINTER FORWARD
         CLI       0(R1),X'60'         IS THIS EXP CHAR A -
         BC        8,FRSTEXSN          YES SET ON SIGN BIT
         BC        4,FRSTEXSN+4        IF A + BRANCH AROUND
         CR        R1,R4               CHECK FOR BUFFER END
         BC        10,FRSTEXSN+8       IF THERE QUIT
         LA        R1,1(0,R1)          OTHERWISE MOVE POINTER 1
         CLI       0(R1),C'+'          IS THIS AN EBCDIC +
         BC        8,FRSTEXSN+4        YES BRANCH AROUND
         CLI       0(R1),X'50'         IS THIS A BCD +
         BC        8,FRSTEXSN+4        YES BRANCH AROUND
         CLI       0(R1),C' '          IS IT A BLANK
         BC         8,FRSTEXSN+4       YES BRANCH AROUND
         CLI       0(R1),C'-'          IS THIS A -
         BC        6,FRSTEXSN+8        NO GO TO QUIT
FRSTEXSN OI        FRIOESGN,X'80'       SET SIGN BIT ON
         LA        R1,1(0,R1)          INCREMENT POINTER
         MVC       DE,=X'1C1C'         EXPONENTS NOW INVALID
         MVI       PLUSSIGN,X'1C'      PLUS SIGN INVALID
         MVI       MINUSIGN,X'1C'      MINUS SIGN INVALID
         MVI       ZERO,X'38'          SET NUMBERS TO
         MVC       NUMBERS,ZERO        DETECT EXPONENT
         OI        FRIOESGN,X'40'      SET EXPONENT SWITCH ON
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BCR       15,R5               RETURN TO CALLER
         EJECT
*
*        STORE EXPONENT CHARACTER ROUTINE
*
FREXPCHR EQU       *
         SR        R8,R8               ZERO REGISTER (WILL BE USED V1L4
         SR        R9,R9                             FOR EXPONENT) V1L4
         IC        R9,0(R1)            PICK UP 1ST CHAR OF EXP     V1L4
         CR        R1,R4               CHECK FOR BUFFER END
         BNL       FREXPCH3            END OF FIELD                V1L4
         CLI       0(R11),C' '         FIRST CHAR BLANK?           V1L4
         BNE       FREXPCH4            NO -> SOME OTHER CHAR       V1L4
FREXPCH5 LTR       R6,R6               FREE I/O?                   V1L4
         BZ        FREXPCH3            YES -> ENO OF FIELD         V1L4
         SLDL      R8,8                SHIFT OVER ONE CHAR         V1L4
         B         FREXPCH4            NO -> NOT FREE I/O          V1L4
FREXPCH2 EQU       *                                               V1L4
         CLI       0(R1),C' '          BLANK IS OKAY               V1L4
         BE        FREXPCH5            IT IS BLANK                 V1L4
         CLI       0(R1),C','          STOP CHAR A COMMA?          V1L4
         BE        FREXPCH7            YES -> OKAY IF FREE I/O     V1L4
         CLI       0(R1),C')'          STOP CHAR A RT PAREN?       V1L4
         BE        FREXPCH7            YES -> OKAY IF FREE I/O
         CLI       0(R1),X'4C'         STOP CHAR A BCD RT PAREN?
         BNE       FREXPCH6            NO -> SOME OTHER CHAR
FREXPCH7 LTR       R6,R6               FREE I/O CALL?
         BZ        FREXPCH3            YES -> CHAR OK              V1L4
FREXPCH6 EQU       *                   SLDL      R8,8              V1L4
         SLDL      R8,8                SHIFT OVER ONE CHAR         V1L4
         CLI       0(R1),C'9'          IS THIS CHAR GT 9
         BC        2,FRINVCHR          YES INVALID CHARACTER
         CLI       0(R1),C'0'          IS THIS CHAR LT 0
         BL        FRINVCHR            YES -> INV CHAR FOUND       V1L4
FREXPCH1 IC        R9,0(R1)            PICK UP NEXT CHAR OF EXP    V1L4
FREXPCH4 EQU       *                                               V1L4
         LA        R1,1(0,R1)          MOVE POINTER FORWARD
         CR        R1,R4               OVER THE END YET?           V1L4
         BNH       FREXPCH2                                        V1L4
FREXPCH3 STM       R8,R9,FRDOUBLE      NO STORE FOR PACK           V1L4
         OI        FRDOUBLE+7,X'F0'    MAKE SURE SIGN IS OKAY      V1L4
FREXCONV PACK      FRDOUBLE,FRDOUBLE   PACK EXPONENT DIGITS
         CVB       R8,FRDOUBLE         AND CONVERT TO BINARY
         TM        FRIOESGN,X'80'      IS EXPONENT NEGATIVE
         BC        14,*+6              NO BR&NCH AROUND
         LCR       R8,R8               YES TAKE COMPLEMENT
         AH        R8,FRIOEXP          ADD ON NO OF DEC DIGITS
         STH       R8,FRIOEXP          AND STORE AS EXPONENT
         MVI       ZERO,X'1C'          ANY FURTHER NUMBERS
         MVC       NUMBERS,ZERO        ARE INVALID
         LTR       R6,R6               CHECK FOR FREE I/O
         BCR       8,R5                RETURN TO CALLER IF FREE
         CR        R1,R4               AT END                      V1L3
         BNL       FREXIT3             YES SO QUIT                 V1L3
         MVI       BLANK,X'00'         PASS OVER BLANKS            V1L3
         LR        R3,R4               GET LENGTH-1                V1L3
         SR        R3,R1               IN R3                       V1L3
         SR        R2,R2               CLEAR FOR TRT               V1L3
         EX        R3,FRIOTRT                                      V1L3
         BC        8,FREXIT3           NO STOP SO EXIT             V1L3
         CLI       0(R1),C')'          EBCDIC BRACKET?             V1L3
         BE        FREXIT3             YES - OK                    V1L3
         CLI       0(R1),X'4C'         BCD BRACKET?                V1L3
         BE        FREXIT3             YES - OK                    V1L3
         B         FRINVCHR            MUST BE INVALID             V1L3
         EJECT
*
*        ROUTINE FOR END OF FIELD
*
*        IF SCAN DOES NOT STOP WE COME HERE
*
FREXIT1  EQU       *
         LR        R1,R11              GET END OF FIELD ADDRESS
         AR        R1,R3               IN R1
         BC        15,*+4(R6)          BRANCH AROUND IF FORMAT
         BC        15,FRBUFCHK         IF NOT CHECK FOR COMPLETE SCAN
*
*        THIS IS THE NORMAL ENTRY  POINT
*
*
FREXIT3  EQU       *
         L         R9,FRENDADD(R7)     GO TO ROUTINE FOR
         BALR      R5,R9               THIS TYPE
*
*        THIS ENTRY POINT ONLY SAVES THE REGISTERS BEFORE LEAVING
*
FREXIT4  EQU       *
         LA        R4,FRIOTEMP         LOAD ADDRESS OF FIELD
         LM        R5,R15,12(R13)      RESTORE CALLER'S REGISTERS
         BAL       R5,8(0,R5)          RETURN TO CALLER
*
FRBUFCHK CLI       0(R1),C' '          IS LAST CHAR A BLANK
         BC        8,FRBUFOVL          YES BUFFER OVERFLOW
         BC        15,FREXIT1+12       NO GO BACK
FREXSAVE DS        6F                  SAVE AREA
*
*        ADDRESSES OF ROUTINES
*
FRENDADD EQU       *
         DC        A(FRLOGEND)         LOGICAL ROUTINE
         DC        A(FRINTEX)          END OF INTEGER FIELD
         DC        A(FREALCHK)         END OF REAL FIELD
         DC        A(FREALCHK)         END OF HALF OF COMPLEX FIELD
         DC        A(FRHEXTRN)         END OF HEXADECIMAL FIELD
*
*        ROUTINE TO RESET SCAN TABLE TO NORMAL AFTER LOGICAL VARIABLES
*
FRLOGEND EQU       *
         CLI       TFSWTCH,X'FF'       WAS A T OR F FOUND
         BE        FRSETTBL            YES RESET TABLE
         LH        R8,FRIOBLNK         PUT COUNT OF BLANKS IN R8
         LR        R3,R1               CALCULATE LENGTH OF FIELD
         S         R3,FRSAVER1         USING STARTING ADDRESS
         CR        R8,R3               TEST FOR ALL BLANK VARIABLE
         BNE       FRINVCHR            NO----INVALID CHARACTER
         LTR       R6,R6               TEST FOR FREE I/O
         BC        7,FRSETTBL          RESET TABLE IF FORMAT
         CR        R1,R4               END OF CARD?
         BC        11,FRBUFOVL         YES BUFFER OVERFLOW
FRSETTBL MVI       FRIOTABL,X'04'      SET ALL CHARACTERS
         MVC       FRIOTABL+1(255),FRIOTABL  TO INVALID
         LA        R1,1(0,R1)          RESET R1
         BCR       15,R5               RETURN TO CALLER
*
*        ROUTINE TO STORE LEFTMOST CHARACTERS RIGHT JUSTIFIED IN
*        FRIOTEMP
*
FRINTEX  EQU       *
         LR        R8,R1               GET LENGTH - 1
         SR        R8,R11              IN R8
         CH        R8,BSIXTEEN         CHECK FOR MAX LENGTH
         BC        4,*+12              IF LESS BRANCH AROUND
         LH        R8,BSIXTEEN         OTHERWISE SET LENGTH
         BCT       R8,*+4              TO MAXIMUM
         LA        R9,FRIOTEMP+15      GET ADDRESS OF FIELD
         SR        R9,R8               START IN FRIOTEMP
         LTR       R8,R8               IS LENGHT ZERO?             V1L4
         BP        FRINTEX2            NO -> IT IS OKAY            V1L4
         LTR       R2,R2               WAS THERE ANY CHAR?         V1L4
         BZ        FRINTEX1            NO -> JUST END CHAR         V1L4
FRINTEX2 EQU       *                                               V1L4
         EX        R8,FRTSTORE         AND STORE
FRINTEX1 EQU       *                                               V1L4
         OI        FRIOTEMP+15,X'F0'   SET TO VALID SIGN
         C         R2,=X'00000018'     WAS LAST CHARACTER A SIGN
         BNE       *+8                 NO  CONTINUE
         MVI       FRIOTEMP+15,X'F0'     YES MOVE IN ZERO
         LA        R1,1(0,R1)          INCREMENT POINTER
         BCR       15,R5               RETURN TO CALLER
FRTSTORE MVC       0(1,R9),0(R11)      TO STORE CHARACTERS IN FRIOTEMP
*
*        ROUTINE TO ADJUST EXPONENT FOR REAL NUMBERS
*
FREALCHK EQU       *
         CLI       0(R1),C' '          IS LAST CHAR BLANK
         BC        8,*+12              BRANCH AROUND IF YES
         CLI       0(R1),X'F0'         IS LAST CHAR A DIGIT
         BC        4,FREXINCR          NO BRANCH AROUND
         CLI       NUMBERS,X'00'       MUST NUMBERS BE STORED
         BC        6,FREXINCR          NO BRANCH AROUND
         ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         BAL       R5,FRIOSTOR         GO TO STORE NUMBERS
         L         R5,FREXSAVE         RESTORE RETURN ADDRESS
         BC        15,*+8              BRANCH AROUND NEXT INSTRUCTION
FREXINCR LA        R1,1(0,R1)          MOVE POINTER FORWARD
         CR        R1,R4               ARE WE LOOKING PAST FIELD ? V1L1
         BH        FREXMISS            BRANCH IF SO                V1L1
         CLI       0(R1),C')'          IS THIS A EBCDIC BRACKET
         BE        FMOVEPTR                                        V1L5
         CLI       0(R1),X'4C'         IS THIS A BCD BRACKET
         BE        FMOVEPTR                                        V1L5
         C         R7,=X'0000000C'     WORKING ON COMPLEX          V1L5
         BNE       FREXMISS            NO SKIP SHIFT               V1L5
         CLI       0(R1),X'6B'         A COMMA                     V1L5
         BNE       *+8                 IF NOT SKIP SHIFT           V1L5
FMOVEPTR LA        R1,1(0,R1)                                      V1L5
FREXMISS EQU       *                                               V1L1
         TM        FRIOBLNK,X'80'      HAS A DECIMAL POINT BEEN FOUND
         BC        1,*+38              BRANCH AROUND IF YES
         LTR       R6,R6               TEST FOR FREE I/O
         BC         8,*+18             BRANCH AROUND IF FREE
         CLC       DE,=X'1C1C'     HAS A D, E OR EXPONENT BEEN FOUND
         BC        8,*+22              BRANCH AROUND IF YES
         BC        15,*+8              NO CONTINUE
         MVI       FRIOBLNK,X'80'      DECIMAL POINT FOUND
         LA        R3,0(0,R1)          GET NO OF DIGITS
         SR        R3,R11              IN R3
         STH       R3,FRIOEXP          STORE NO OF DIGITS AS EXPONENT
         LH        R9,FRIOEXP          SHIFT EXPONENT TO
         SH        R9,BSIXTEEN         NORMALIZE AND STORE
         STH       R9,FRIOEXP          IN FRIOEXP
         BCR       15,R5               RETURN TO CALLER
BSIXTEEN DC        H'16'               TO SHIFT DECIMAL RIGHT 16
*
*        ROUTINE TO TRANSLATE HEX TO BINARY
*
FRHEXTRN ST        R5,FREXSAVE         SAVE RETURN ADDRESS
         LA        R5,FRHXNSTR         SET UP R5
         LA        R8,15(0,R11)        CHECK FOR MAXIMUM
         CR        R1,R8               FIELD LENGTH
         BC        12,FRHXTR           NO BRANCH AROUND
         ST        R11,FRSAVER1        SAVE R11
         MVI       FRHEXSW,X'FF'       TURN ON FRHEXSW
         LR        R11,R1              YES SET TO
         SH        R11,BSIXTEEN        STORE RIGHTMOST
         LA        R11,1(0,R11)        SIXTEEN BYTES
FRHXTR   LR        R8,R1               GET FIELD LENGTH IN R8
         SR        R8,R11              BEFORE STORING
         BM        FRHXNSTR            LENGTH NEGATIVE BRANCH
         LA        R9,FRIOTEMP+15      GET START ADDRESS
         SR        R9,R8               MODIFY START ADDRESS
         EX        R8,FRTSTORE         AND STORE
         MVC       ZERO(10),=X'F0F1F2F3F4F5F6F7F8F9' SET SCAN TABLE TO
         MVC       ABC(6),=X'FAFBFCFDFEFF'  TRANSLATE TO INTERNAL
         MVI       FRIOTABL,X'00'      INCLUDING HEX ZEROS
         MVI       BLANK,X'00'         TRANSLATE BLANKS TO ZEROS
         TR        FRIOTEMP,FRIOTABL   TRANSLATE TO INTERNAL
         PACK      FRIOTEMP+1(16),FRIOTEMP+1(16) PACK THE FIELD
         MVO       FRIOTEMP+8(1),FRIOTEMP(1)  AND GET FIRST CHAR
         MVI       FRIOTEMP,X'00'      AS WELL
         CLI       FRHEXSW,X'00'       ARE THERE MORE THAN 16 DIGITS
         BER       R5                  NO FINISH UP
         MVI       FRHEXSW,X'00'       REINITIALIZE FRHEXSW
         L         R11,FRSAVER1        RESTORE R11
         MVC       FRTEMP+0(8),FRIOTEMP+8        SAVE RIGHT HALF
         MVI       FRIOTEMP,X'00'       CLEAR FRIOTEMP
         MVC       FRIOTEMP+1(15),FRIOTEMP
         SH        R1,BSIXTEEN   RESET R1 TO OBTAIN NEXT 16 DIGITS
         BAL       R5,FRHEXTRN+8       AND REPEAT CONVERSION
         MVC       FRIOTEMP+0(8),FRIOTEMP+8      SHIFT OVER
         MVC       FRIOTEMP+8(8),FRTEMP          AND MOVE IN THE REST
         AH        R1,BSIXTEEN         RESTORE R1
FRHXNSTR L         R5,FREXSAVE         RESTORE RETURN
         MVI       FRIOTABL,X'04'      RESET FRIOTABL
         LTR       R6,R6               IS THIS FREE I/O
         BC        7,FREXIT4           NO TAKE NORMAL EXIT
         LA        R4,FRIOTEMP         LOAD ADDRESS OF FIELD
         LA        R1,1(0,R1)          MOVE OVER LAST CHAR         V1L5
         LM        R5,R15,12(R13)      RESTORE CALLER'S REGISTERS
         BAL       R5,4(0,R5)          RETURN TO CALLER
         EJECT
*
*        ENTRY POINT FROM FORMCONV FOR SECOND HALF OF A COMPLEX
*        NUMBER IN FREE I/O
*
FRIOCRET STM       R5,R15,12(R13)       SAVE CALLER'S REGISTERS
         BALR      R15,0               LOAD A BASE REGISTER
         USING     *,R15               AND TELL ASSEMBLER
         L         R15,FRADDR          RELOAD REGULAR VALUE        V1L4
         USING     FRIOINIT,R15        AND TELL ASSEMBLER
         BAL       R5,FRIOREAL         USE REAL INITIALIZATION
         MVI       COMMA,X'1C'         AND MODIFY FOR COMPLEX
         MVI       RIGHTBRK,X'20'      RIGHT BRACKET IS DELIMITER
         BC        15,FRIOZERO+6            RETURN TO SCAN
FRADDR   DC        A(FRIOINIT)         ADDRESS FOR BASE ADDRESS
         EJECT
*
*        ROUTINE TO PROCESS RIGHT DELIMITER IN FREE I/O
* ROUTINE TO PROCESS COMMA BETWEEN COMPLEX NOS IN FREE I/O         V1L4
**
FRRTDEL  BCTR      R1,0                MOVE POINTER BACK ONE
         BC        15,FREXIT3          GO TO END OF FIELD ROUTINE
         EJECT
         LTORG
         DS        0D
FRIOEND  EQU       *-1
         END
