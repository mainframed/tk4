         TITLE     'FORTRAN OMR TO EBCDIC CONVERSION ROUTINE'
***********************************************************************
**WATOMR, FORTRAN CARD PROCESSING VERSION******************************
**MARCH 4, 1970********************************************************
***********************************************************************
**R15=KP INDICATOR IN HIGH ORDER BYTE, R2=ADDRESS OF BUFFER************
**R13=REGISTER SAVE AREA***********************************************
***********************************************************************
ZR1      DSECT
         USING     ZR1,R1
WATOMR   CSECT
         EQUREGS
         DS        0H
         USING     *,15
         STM       14,12,12(13)
*        TRACEON
         LR        R11,R15             GET R15
         SRL       R11,26              SET FOR 026 OR 029
         LR        R9,R2               R9=CURRENT INPUT RCD
         LR        R1,R4               R1 = CURRENT OUTPUT RCD
         LR        R10,R1
         LA        R4,2                R4 = 2
         LR        R2,R5               R2 = END OF OUTPUT BUF - 17
         MVI       EXIT,X'18'
         MVI       ZAPIT+3,X'4E'       SET AT 78
         LTR       R3,R3
         BZ        FEXT2
         MVI       ZR1,C' '
         MVC       ZR1+1(79),ZR1
FENTRY   TM        4(9),X'01'
         BZ        FIBSYS
         MVC       0(7,1),CENT         $ENTRY CARD
         B         CARDFIN
FIBSYS   TM        6(9),X'01'
         BZ        FEXT
         MVC       0(7,1),CIBS         $IBSYS CARD
         B         CARDFIN
FEXT     TM        4(R9),X'20'
         BZ        FCOMMT
         MVI       EXIT,X'1B'
FCOMMT   TM        6(R9),X'20'
         BZ        FDATA
         MVI       ZR1,C'C'
         LA        R1,7(,R1)
         B         DOIT
FDATA    TM        10(9),X'20'
         BZ        FNORA
         B         DOIT
FEXT2    TM        4(R9),X'20'
         BO        FEXTSTIL
         B         DOIT
FEXTSTIL MVI       EXIT,X'1B'
DOIT     LR        R10,R1              DATA,EXTENDED, OR COMMENT CARD
         CR        R1,R2
         BNH       STILLRM
         A         R2,KF17
         SR        R2,R1               GET LENGTH LEFT
         BNP       CARDFIN
         SLL       R2,2                MULT. BY 4
         A         R2,KF10
         STC       R2,ZAPIT+3
STILLRM  LA        3,12(9)             SET UP TO CONVERT
ZAPIT    LA        5,78(9)             CODED CHARACTERS
         BAL       12,FEBCDIC
         B         CARDFIN
FNORA    SR        6,6
         SR        7,7
         LA        8,64
         LA        10,ZR1+7         R10=1ST CHAR OF PROSE
         IC        6,2(9)
         C         6,F31
         BNH       FSTATNO
         MVI       ZR1+5,C'X'       CONTINUATION CARD
         B         FDC
FSTATNO  IC        6,FSWA(6)           R6=STATEMENT NUMBER CHAR
         CR        6,8
         BE        F1000               BR IF BLANK
         STC       6,ZR1            SET UP 10,000
         MVC       ZR1+1(4),C4C0    AND ZEROES
F1000    IC        6,4(9)
         N         6,F31
         IC        6,FSWA(6)           R6=STATEMENT NUMBER CHAR
         CR        6,8
         BE        F100                BR IF BLANK
         STC       6,ZR1+1          SET UP 1,000
         MVC       ZR1+2(3),C4C0    AND ZEROES
F100     IC        6,6(9)
         N         6,F31
         IC        6,FSWA(6)           R6=STATEMENT NUMBER CHAR
         CR        6,8
         BE        F10                 BR IF BLANK
         STC       6,ZR1+2          SET UP 100
         MVC       ZR1+3(2),C4C0    AND ZEROES
F10      IC        6,8(9)
         N         6,F31
         IC        7,FSWA(6)           R7=STATEMENT NUMB CHAR
         CR        7,8
         BE        FIMP                BR IF BLANK
         STC       7,ZR1+3          SET UP 10
         MVI       ZR1+4,C'0'       AND ZERO
FIMP     TM        8(R9),X'01'         TEST IF 'IMPLICIT' VERB    V1L3
         BZ        F1                  BR IF NOT
         MVC       0(9,10),CIMP
         LA        10,9(10)            INCRE PROSE ADDRESS
F1       IC        6,10(9)
         IC        6,FSWA(6)           R6=STATEMENT NUMB CHAR
         CR        6,8
         BE        FDC                 BR IF BLANK
         STC       6,ZR1+4          SET UP UNITS
FDC      TM        2(9),X'01'          DO?
         BNZ       DOMOVE              YES
         SR        8,8                 NO, VERB LOOK-UP LOOP
         LR        7,9
         LA        12,5
FVL      IC        6,3(7)
         LTR       6,6
         BNZ       FVFND               BR IF VERB CODED
         LA        8,12(8)             GO TO NEXT
         AR        7,4                 INCR R7 BY 2
         BCT       12,FVL
FVFIN    TM        10(9),X'01'         IS 'FUNCTION' VERB CODED
         BZ        FNFUN               BR IF NOT
         MVC       0(9,10),CFUN
         LA        10,9(10)            INCRE PROSE ADDRESS
FNFUN    LA        3,12(9)             SET UP TO CONVERT
         LA        5,78(9)             CODED CHARACTERS
         BAL       12,FEBCDIC
*        LA        R10,17(,R10)
         LA        R7,78(R1)           INCREMENT BY 78             V1L4
         B         CARDFIN
DOMOVE   MVC       0(3,10),CDO        SET UP DO
         LA        10,3(10)
         B         FVFIN
FVFND    IC        6,FVERBA(6)
         C         6,F31
         BH        FVFIN               SHOULD NOT BE GR 31
         AR        6,8
         SR        7,7
         IC        7,FVERBB(6)         R7 = LENGTH - 1
         IC        6,FVERBB+1(6)       R6 = OFFSET
         LA        8,FVERBS(6)         R8 = ADDRESS OF VERB
         EX        7,FVMV              MOVE VERB
         LA        10,2(10,7)          INCRE PROSE ADDRESS
         B         FVFIN
FVMV     MVC       0(1,10),0(8)
CARDFIN  ST        R10,36(R13)         SET R4
         LM        R14,R12,12(R13)
EXIT     LR        R15,R15
         BR        14
         EJECT
***********************************************************************
*  CONVERT FROM 2 COLUMN M/S TO EBCDIC
*  START ADDRESS OF INPUT IN R3
*  START ADDRESS OF OUTPUT IN R10
*  STOP ADDRESS OF INPUT IN R5
*  NOTE R4=2, MUST BE RESTORED AT END
***********************************************************************
FEBCDIC  DS        0H
*        TRACEON
         AR        R4,R4               GET 4 IN REG 4
         LA        R2,1
         LR        R9,R1               SAVE R1
         LM        R0,R1,MASKHASH      LOAD MASK AND HASH VALUE
LOOP17   L         R7,0(,R3)           GET 4 BYTES
         NR        R7,R0               GET RID OF COMMENT CRAP
         LTR       R8,R7               SAVE IN R8
         BZ        BLANK               BRANCH IF BLANK
         SR        R6,R6               ZERO REG 6
         DR        R6,R1               HASH HASH ...
         SLA       R6,3                X8 TO GET INTO HASH TABLE
         C         R8,HASHTABL(R6)     IT IT WHAT WE WANT ?
         BE        FOUND               YES WE FOUND IT
         AH        R6,HASHTABL+4(R6)   COLLISION PERHAPS...TRY AGAIN
         C         R8,HASHTABL(R6)     DID WE GET IT THIS TIME ?
         BNE       INVALID             NO SO INVALID
FOUND    AR        R6,R11              SET FOR 026 OR 029
         IC        R6,HASHTABL+6(R6)   GET CHARACTER
         STC       R6,0(R10)           STORE IT
BUMP     AR        R10,R2              BUMP TO NEXT CHARACTER
         BXLE      R3,R4,LOOP17        GET NEXT 4 BYTES
         LA        R4,2                SET R4 TO 2
*        TRACEOFF
         LR        R1,R9               RESTORE R1
         BR        R12                 RETURN TO CALLER
BLANK    MVI       0(R10),C' '         SET TO BLANK
         B         BUMP                RETURN TO NORMAL LOOP
INVALID  MVI       0(R10),C'?'         SET TO INVALID INDICATOR
         B         BUMP                RETURN TO LOOP
         EJECT
FSWA     DC        C'  443377226655991155448833776600'
FVERBS   DC        C'ASSIGN'
         DC        C'BACKSPACE'
         DC        C'BLOCK DATA'
         DC        C'CALL'
         DC        C'CHARACTER'
         DC        C'COMMON'
         DC        C'COMPLEX'
         DC        C'CONTINUE'
         DC        C'DATA'
         DC        C'DIMENSION'
         DC        C'DOUBLE PRECISION'
         DC        C'END'
         DC        C'ENTRY'
         DC        C'EQUIVALENCE'
         DC        C'EXTERNAL'
         DC        C'FORMAT'
         DC        C'GO TO'
         DC        C'IF'
         DC        C'INTEGER'
         DC        C'LOGICAL'
         DC        C'NAME LIST'
         DC        C'PRINT'
         DC        C'PUNCH'
         DC        C'READ'
         DC        C'REAL'
         DC        C'RETURN'
         DC        C'REWIND'
         DC        C'STOP'
         DC        C'SUBROUTINE'
         DC        C'WRITE'
CDO      DC        C'DO '
FVERBA   DC        X'FF0A08FF06FFFFFF04'
         DC        7X'FF'
         DC        X'02'
         DC        15X'FF'
         DC        X'00'
         DC        31X'FF'
FVERBB   DC        AL1(5,0)
         DC        AL1(8,6)
         DC        AL1(9,15)
         DC        AL1(3,25)
         DC        AL1(8,29)
         DC        AL1(5,38)
         DC        AL1(6,44)
         DC        AL1(7,51)
         DC        AL1(3,59)
         DC        AL1(8,63)
         DC        AL1(15,72)
         DC        AL1(2,88)
         DC        AL1(4,91)
         DC        AL1(10,96)
         DC        AL1(7,107)
         DC        AL1(5,115)
         DC        AL1(4,121)
         DC        AL1(1,126)
         DC        AL1(6,128)
         DC        AL1(6,135)
         DC        AL1(8,142)
         DC        AL1(4,151)
         DC        AL1(4,156)
         DC        AL1(3,161)
         DC        AL1(3,165)
         DC        AL1(5,169)
         DC        AL1(5,175)
         DC        AL1(3,181)
         DC        AL1(9,185)
         DC        AL1(4,195)
CIMP     DC        C'IMPLICIT  '
CFUN     DC        C'FUNCTION  '
C4C0     DC        4C'0'
CENT     DC        C'$ENTRY '
CIBS     DC        C'$IBSYS '
CL5C     DS        0CL5
         DC        C'C'
CL7      DC        CL7' '
F31      DC        F'31'
KF17     DC        F'17'
KF10     DC        F'10'
HASHTABL DC        0D'0'
HASH00   DC        D'0'
HASH01   DC        X'00000300',AL2(HASH05-HASH01),C'TT'       T -> $
HASH02   DC        X'00000600',AL2(HASH10-HASH02),C'SS'       S -> &
HASH03   DC        X'00000003',AL2(0),C'ZZ'                   Z
HASH04   DC        X'00000004',AL2(0),X'7C',C''''             '
HASH05   DC        X'00000001',AL2(0),C'$$'                   $
HASH06   DC        X'00000006',AL2(0),C'YY'                   Y
HASH07   DC        X'0C000000',AL2(HASH09-HASH07),C'AA'       A -> 7
HASH08   DC        X'00000008',AL2(0),C'..'                   .
HASH09   DC        X'00040000',AL2(0),C'77'                   7
HASH10   DC        X'00000002',AL2(0),C'&&&&'                 &
HASH11   DC        X'00040004',AL2(HASH13-HASH11),C'PP'       P -> 2
HASH12   DC        X'0000000C',AL2(0),C'XX'                   X
HASH13   DC        X'02000000',AL2(0),C'22'                   2
HASH14   DC        X'00080000',AL2(0),C'66'                   6
HASH15   DC        D'0'
HASH16   DC        X'00000010',AL2(0),X'7B',C'='              =
HASH17   DC        D'0'
HASH18   DC        D'0'
HASH19   DC        D'0'
HASH20   DC        X'00030000',AL2(HASH31-HASH20),C'II'       I -> /
HASH21   DC        X'000C0000',AL2(HASH30-HASH21),C'GG'       G -> -
HASH22   DC        X'04000000',AL2(HASH23-HASH22),C'11'       1 -> O
HASH23   DC        X'00080008',AL2(0),C'OO'                   O
HASH24   DC        X'00000018',AL2(0),C'WW'                   W
HASH25   DC        X'00001000',AL2(HASH26-HASH25),X'4C',C')'  ) -> E
HASH26   DC        X'00300000',AL2(0),C'EE'                   E
HASH27   DC        X'08000800',AL2(0),C'::'                   :
HASH28   DC        X'00100000',AL2(0),C'55'                   5
HASH29   DC        X'10000000',AL2(HASH39-HASH29),X'6C',C'('  ( -> M
HASH30   DC        X'00000400',AL2(0),C'--'                   -
HASH31   DC        X'00000100',AL2(0),C'//'                   /
HASH32   DC        X'00000020',AL2(HASH38-HASH32),C',,'       , -> D
HASH33   DC        X'00020000',AL2(HASH37-HASH33),C'88'       8 -> B
HASH34   DC        D'0'
HASH35   DC        X'01000000',AL2(HASH36-HASH35),C'33'       3 -> Q
HASH36   DC        X'00020002',AL2(0),C'QQ'                   Q
HASH37   DC        X'06000000',AL2(0),C'BB'                   B
HASH38   DC        X'01200000',AL2(0),C'DD'                   D
HASH39   DC        X'00200020',AL2(0),C'MM'                   M
HASH40   DC        X'00000200',AL2(HASH41-HASH40),C'**'       * -> H
HASH41   DC        X'00060000',AL2(0),C'HH'                   H
HASH42   DC        X'00000800',AL2(HASH45-HASH42),X'50',C'+'  + -> F
HASH43   DC        X'04000400',AL2(0),C'JJ'                   J
HASH44   DC        X'08000000',AL2(HASH50-HASH44),C'00'       0 -> N
HASH45   DC        X'00180000',AL2(0),C'FF'                   F
HASH46   DC        X'00010000',AL2(HASH49-HASH46),C'99'       9 -> C
HASH47   DC        X'00010001',AL2(0),C'RR'                   R
HASH48   DC        X'00000030',AL2(0),C'VV'                   V
HASH49   DC        X'03000000',AL2(0),C'CC'                   C
HASH50   DC        X'00100010',AL2(0),C'NN'                   N
HASH51   DC        X'02000200',AL2(0),C'KK'                   K
HASH52   DC        X'00000120',AL2(0),C'UU'                   U
HASH53   DC        D'0'
HASH54   DC        X'10001000',AL2(0),C';;'                   ;
HASH55   DC        X'01000100',AL2(0),C'LL'                   L
HASH56   DC        X'00200000',AL2(0),C'44'                   4
HASH57   DC        D'0'
HASH58   DC        D'0'
MASKHASH DC        X'DFFFDFFF',F'59'
         LTORG
         END
