         MACRO
&LABEL   XGPGEN &DIREC=G,&FETCH=NOT,&DDNUM=20
.** --> MACRO: XGPGEN  GENERATE GENERAL I/O MODULES . . . . . . . . . .
.*                                    RICHARD FOWLER NOV, 1972 V.5.0  .
.*                                                                    .
.*       ARGUMENTS:                                                   .
.*             &DIREC = P --> OUTPUT                                  .
.*                   ›= P --> INPUT                                   .
.*             &FETCH  =NOT --> NO FETCH PROTECTION                   .
.*                    ›=NOT -->    FETCH PROTECTION                   .
.*             &DDNUM = MAXIMUM NUMBER OF DD NAMES ALLOWED AT ONCE    .
.*     (**EACH DD FILE REQUIRES 3F TABLE ENTRY PLUS DCB AND BUFFER**) .
.*. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
         TITLE ' &LABEL - MODULE CREATED BY XGPGEN'
         DCBD DSORG=QS
* * * * * XIOBLOCK - CONTROL BLOCK SET UP BY XREAD/XPRNT/XPNCH  * * * *
XIOBLOCK DSECT
         DS    V .                 @ I/O ROUTINE
         DS    3F                  AREA FOR REGS 15-0 TO BE SAVED
XIOLENG  DS    AL2 .               LENGTH OF RECORD, (CODES-FUTURE USEQ
XIORETRN LM    14,0,4(14)          RETURN CODE FOR RESTORING REGISTERS
&LABEL   CSECT
*--> CSECT: EXTENDED I/O MODULE FOR GENERAL I/O . . . . . . . . . . . .
*        THIS MODULE IS CALLED TO DO GENERAL I/O WORK ON A FILE       .
*              SIMILAR IN OPERATION TO THE XIO ROUTINES, BUT CAN HANDLE
*              MANY FILES AT ONCE.                                    .
*        ENTRY CONDITIONS:                                            .
*          R14 = @ OF CONTROL BLOCK                                   .
*          R15  = ENTRY POINT ADDRESS                                 .
*          R0  = ADDRESS OF AREA TO MOVE DATA INTO                    .
*          R1  = ADDRESS OF DD NAME TO BE USED                        .
*        CONTROL BLOCK:                                               .
*      OFFSET  LENGTH        WHAT                                     .
*        0       1F        ENTRY POINT ADDRESS                        .
*        4       3F          SAVE AREA                                .
*        16      2           LENGTH OF AREA                           .
* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
         USING *,15 .              NOTE TEMPORARY ADDRESSABILITY
         USING XIOBLOCK,R14
         STM   R13,R7,X&DIREC.SAV1 SAVE REGISTERS TO BE USED          A
         CNOP  0,4 .               GET ON FULLWORD
         BAL   R13,*+76            SET UP FAKE AREA PNTR - BASE
         USING *,R13 .             NOTE NEW USING/SAVE AREA POINTER
         DS    18F .               FAKE SAVE AREA
         DROP  R15 .               KILL OLD ADDRESSING
         SPACE 2
         USING IHADCB,R1 .         SET UP ADDRESSIBILITY TO DCB S
         MVC   X&DIREC.CURENT(8),0(R1) . GET CURRENT DD NAME
*   CHECK FOR CLOSE
         SR    R1,R1               GET ZERO LENGTH INDICATOR
         CH    R1,XIOLENG          ARE THEY EQUAL?
         BE    X&DIREC.EOF .       YES-GO CLOSE AND FORGET FILE
         XXGPSRCH &DIREC
*  THE FOLLOWING CODE, IF EXECUTED, GENERATES A DCB AND TRIES AN OPEN
*
X&DIREC.MAKE C R1,=A(X&DIREC.FULL) CHECK FOR TABLE OVERFLOW
         BNL   X&DIREC.CC3         NO SPACE, DON'T TRY OPEN-RETURN    J
         ST    R1,X&DIREC.ELEM .   SAVE NEW ADDRESS, R1 ALREADY POINTIN
         MVC   0(8,R1),X&DIREC.CURENT  SAVE DD NAME FOR FUTURE CALLS
         L     0,X&DIREC.LONG
         GETMAIN R,LV=(0) .        LOAD R1 WITH ADDR OF NEW DCB
         L     R2,X&DIREC.ELEM .   GET ADDRESS OF POINTER
         ST    R1,8(R2) .          SAVE @ OF DCB
*
         ST    R1,X&DIREC.FULL     KLUDGE TO GET AROUND ADDRESSIBILITY
         MVC   X&DIREC.OPEN+1(3),X&DIREC.FULL+1  COPY OVER DCB @ INTO J
*
         MVC   0(X&DIREC.ELEM-X&DIREC.DCB,R1),X&DIREC.DCB BUILD DCB
         MVC   DCBDDNAM,X&DIREC.CURENT MOVE DD NAME INTO DCB
         OPEN  MF=(E,X&DIREC.DCBPTR)  DO REMOTE OPEN
         L     R1,X&DIREC.FULL .   FIX R1, DESTROYED IN OPEN
         TM    DCBOFLGS,X'10' .    DID OPEN GO?
         BO    X&DIREC.CONT4       YES, DO I/O
*              OPEN DIDN'T GO - CLEAN UP SO DOESN'T BOMB LATER        J
         L     R0,X&DIREC.LONG     GET LENGTH OF DCB FOR FREEMAIN     J
         FREEMAIN R,LV=(0),A=(1)   GIVE THE SPACE BACK TO OS          J
         XC    0(12,R2),0(R2)      CLEAR OUT SO WON'T THINK IT'S OPEN J
X&DIREC.CC3 TM *+1,X'FF'       SET CC=3  ==> OPEN IMPOSSIBLE          J
         B     X&DIREC.RET         RETURN TO USER
         SPACE 2
X&DIREC.CONT L R1,8(R1) .          GET DCB ADDRESS
X&DIREC.CONT4 LH R5,XIOLENG        GET LENGTH OF AREA
         AIF   ('&FETCH' EQ 'PROTECT').SKPFTCH
         L     R2,X&DIREC.SAV1+12  GET @ I/O AREA
* THE FOLLOWING CODE IS USED FOR ADDRESS ILLEGAL     ******************
*****  THIS CODE WILL NOT WORK IF MACHINE HAS FETCH PROTECT ***********
         SPACE 2
         L     R4,16 .             GET CVT PNTR FROM LOC 16
         LA    R0,0(R2,R5) .       GET ENDING ADDRESS OF I/O AREA
         C     R0,164(R4) .        COMPARE TO CVTMZ00 - HIGHEST ADDRESS
         BNL   X&DIREC.ABD3 .      GO ABEND IF HIGHER
.SKPFTCH ANOP
         AIF   ('&DIREC' EQ 'P').XOUT  SKIP IF OUTPUT
         LH    R7,DCBLRECL         GET LRECL FROM DCB                 J
         GET   IHADCB .            GET # BUFFER
         CLR   R5,R7               COMPARE REQUEST LENGTH TO LRECL    J
         BNH   *+6                 SKIP AROUND IF OK                  J
         LR    R5,R7               TOO BIG, USE LRECL INSTEAD         J
         LR    R4,R5 .             SET UP FOR SHIFT
         SRDL  R4,8 .              PUT RIGHTMOST BYTE IN R5
         SRL   R5,24 .             RIGTH JUSTIFY FOR MOVE
         LTR   R4,R4 .             ANYTHING LEFT IN R4?
         BE    *+22 .              NO - DO NORMAL MOVE
         MVC   0(256,R2),0(R1) .   GIVE USER 256 BYTES OF DATA
         LA    R2,256(R2) .        GO TO NEXT BLOCK
         LA    R1,256(R1) .        GO TO NEXT BLOCK
         BCT   R4,*-14 .           IF ANYTHING LEFT IN R4, DO ANOTHER
*              NORMAL MOVE FOLLOWS
         LTR   R5,R5 .             IS ANYTHING IN R5?
         BE    *+10 .              NO - DONT MOVE LEFTOVER BYTES
         BCTR  R5,0 .              DECREMENT LENGTH BY 1
         EX    R5,X&DIREC.MOV .    MOVE INTO RIGHT PLACE
.XCLOSE  ANOP
         SR    R0,R0 .             SET COND CODE TO 0, USER OK
         B     X&DIREC.RET .       GO TO RETURNX&DIREC.EOF CLOSE IHADCB
X&DIREC.EOF EQU *
         XXGPSRCH &DIREC,2
X&DIREC.MAKE2 B X&DIREC.RET .      GO RETURN
X&DIREC.CONT2 LR R4,R1 .           SAVE THE ADDRESS
         MVC   X&DIREC.PTR+1(3),9(R1)
         LA    R1,X&DIREC.PTR
         CLOSE MF=(E,(1))          DO REMOTE CLOSE
         L     R1,8(R4) .          POINT TO DCB TO FREE
         FREEPOOL (1)              FREE THE BUFFERS
         L     R1,8(R4)            RESET R1 IN CASE DESTROYED
         L     R0,X&DIREC.LONG     GET AMOUNT TO FREE
         FREEMAIN R,LV=(0),A=(1)
*
*   DCB NO LONGER EXISTS,  REMOVE CORRESPONDING ELEMENT FROM LIST
*
         LA    R3,X&DIREC.FULL .    GET UPPER ADDRESS OF TABLE
         SR    R3,R4   .           FIND LENGTH OF REST OF TABLE
         EX    R3,X&DIREC.WIPOUT   WIPEOUT 12 BYTES OF MEMORY
*
*      IF NO POINTERS REMAIN, SET POINTER TO LAST TO ZERO
*
         LA    R3,12
       L       R2,X&DIREC.ELEM
         SR    R2,R3
         LA    R1,X&DIREC.PNTSRT
         CR    R1,R2
         BNH   *+8
         LA    R2,0 .              SET POINTER TO ZERO
         ST    R2,X&DIREC.ELEM     SAVE POINTER
         AIF   ('&DIREC' EQ 'P').XRET
         OI    *+1,1 .             SET COND CODE FOR END OF FILE
.*       SHOULD REMOVE DCB FROM LIST NOW
         AGO   .XRET .             HAVE RETURN CODE GENERATED
.*
.XOUT    ANOP
         LH    R7,82(R1) .         GET LRECL
         PUT   IHADCB .            PRINT THE STUFF
         CLR   R5,R7               COMPARE REQUEST LENGTH TO LRECL    J
         BNH   *+6                 SKIP AROUND IF OK LENGTH           J
         LR    R5,R7               TOO BIG- USE LRECL INSTEAD         J
         LR    R4,R5 .             SET UP FOR SHIFT
         LR    R6,R5               SAVE FOR LATER
         SRDL  R4,8 .              PUT RIGHTMOST BYTE IN R5
         SRL   R5,24 .             RIGTH JUSTIFY FOR MOVE
         LTR   R4,R4 .             ANYTHING LEFT IN R4?
         BE    *+22 .              NO - DO NORMAL MOVE
         MVC   0(256,R1),0(R2) .   PUT STUFF INTO BUFFER
         LA    R2,256(R2) .        GO TO NEXT BLOCK
         LA    R1,256(R1) .        GO TO NEXT BLOCK
         BCT   R4,*-14 .           IF ANYTHING LEFT IN R4, DO ANOTHER
*              NORMAL MOVE FOLLOWS
         LTR   R5,R5 .             IS ANYTHING IN R5?
         BE    *+12
         BCTR  R5,0 .              DECREMENT LENGTH BY 1
         EX    R5,X&DIREC.MOV .    MOVE INTO RIGHT PLACE
         AR    R1,R5               GET BEGINNING @ TO BLANK
         SR    R7,R6               GET DIFFERENCE BETWEEN USER AND DCB
         BZ    *+12                NO DIFFERENCE, DO NOTHING          A
         MVI   1(R1),C' '
         EX    R7,X&DIREC.MOV2     CLEAR REST
*  ****NOTE THAT THIS ONLY WORKS FOR DIFFERENCES < 256
         AGO   .XCLOSE
.*
.XRET    ANOP
         SPACE 2
X&DIREC.RET LM R13,R7,X&DIREC.SAV1 RESTORE REGS                       A
         B     XIORETRN            RETURN
         DROP  R14
X&DIREC.ABD3 CLI  *,0              SET CC=2, SHOW EXECUTE ERROR       J
         B     X&DIREC.RET         GO RETURN, SHOWING ERROR           J
.*
         SPACE 2
X&DIREC.PTR CLOSE (X&DIREC.CONT),MF=L    GENERAL PURPOSE CLOSE
X&DIREC.WIPOUT MVC 0(1,R4),12(R4)
X&DIREC.CURENT DS  CL8  .          AREA TO HOLD CURRENT DD NAME
X&DIREC.SAV1 DS 11F                SAVE AREA FOR REGS USED            A
X&DIREC.PNTSRT DS (&DDNUM*3)F .    AREA FOR DDNUM DD NAMES & POINTERS
X&DIREC.FULL DS F
X&DIREC.OPEN DS 0F                 EXTRA LABEL
         AIF   ('&DIREC' EQ 'P').XDEFSR  SKIP IF OUTPUT
X&DIREC.DCBPTR OPEN (X&DIREC.CONT,(INPUT)),MF=L  OPEN CONTROL WORD    J
X&DIREC.DCB DCB DSORG=PS,MACRF=GL,EODAD=X&DIREC.EOF
X&DIREC.ELEM DC  F'0' .            INITIAL # OF ELEMENTS
XX&DIREC.LONG EQU X&DIREC.ELEM-X&DIREC.DCB   GET DCB LENGTH
X&DIREC.LONG DC A(XX&DIREC.LONG)   SAVE LENGTH OF DCB
X&DIREC.MOV MVC 0(1,R2),0(R1) .    GIVES USER THE DATA
         LTORG
         DROP  R13
         MEXIT                     DONE
.XDEFSR  ANOP
X&DIREC.DCBPTR OPEN (X&DIREC.CONT,(OUTPUT)),MF=L OPEN CONTROL WORD    J
X&DIREC.DCB DCB DSORG=PS,MACRF=PL
X&DIREC.ELEM DC F'0' .             INITIAL # OF ELEMENTS
XX&DIREC.LONG EQU X&DIREC.ELEM-X&DIREC.DCB   GET DCB LENGTH
X&DIREC.LONG DC A(XX&DIREC.LONG)   SAVE LENGTH OF DCB
X&DIREC.MOV MVC 0(1,R1),0(R2) .    MOVE INTO LINE
X&DIREC.MOV2 MVC 2(1,R1),1(R1)     CLEAR OUT REST OF BUFFER
         LTORG
         DROP  R13
         MEND
