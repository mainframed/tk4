         MACRO
&XLABEL  XSNAP &T=PR,&LABEL=,&STORAGE=,&IF=
.*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*--> MACRO: XSNAP      EXTENDED SNAP MACRO-DEBUGGING-DUMPING.        *
.*                                 JOHN R. MASHEY - FEB 1970 - V.4.0  *
.*       XSNAP     IS USED FOR STORING,PRINTING OF REGISTERS AND ANY  *
.*       OTHER ADDRESSIBLE AREAS. XSNAP HARMS NO REGISTERS,CAN BE USED*
.*       IN ANY NUMBER OF CSECTS IN 1 ASSEMBLY,AND PRINTS REGISTERS   *
.*       EXACTLY AS THEY ARE WHEN THE XSNAP IS CALLED.  XSNAP         *
.*       ACTION MAY BE MADE CONDITIONAL EITHER AT ASSEMBLY TIME OR    *
.*       DURING EXECUTE TIME.  SEE WRITEUP FOR OPERAND DESCRIPTION.   *
.*       USES MACROS: XLOOK                                           *
.*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         GBLA  &XXLOOK             XLOOK RETURN VALUE
         GBLB  &XSNAPST            GENERATION STATUS,ON=0,OFF=1
         LCLA  &I,&K,&L,&N         LOCAL COUNTERS
         LCLB  &XP,&XF             PRINT REGS AND PRINT FLOATING REGS
         LCLC  &NAM,&INST,&A(5)
.*                                                                    *
.*       CHECK FOR XSNAPS BEING CANCELLED. CREATE LABEL IF NEEDED.    *
.*                                                                    *
         AIF   (NOT &XSNAPST).XGOGEN   GENERATE IF STATUS=ON
         AIF   (T'&XLABEL EQ 'O').XXEXIT    SKIP IF NOTHING TO GEN
&XLABEL  DS    0H  .               LABEL USED ON NULLIFIED XSNAP
         MEXIT
.XGOGEN  SPACE 1
&NAM     SETC  'XX&SYSNDX'         SET UP MOST OF NAME FOR LABELS
&N       SETA  (N'&STORAGE/2)*2    GET ROUNDED NUMBER OF OPERANDS
&XLABEL  STM   0,15,&NAM.B  .      SAVE ALL REGISTERS
.*                                                                    *
.*       IF OPTION - IF IF OPTION IS USED AND HAS CORRECT ARGUMENTS,  *
.*       GENERATE A CLI, C, OR CR INSTRUCTION TO PERFORM APPROPRIATE  *
.*       TEST,DEPENDING ON THE KIND OF IF ARGUMENTS . NEGATE THE      *
.*       CONDITION AND CREATE THE RIGHT EXTENDED MNEMONIC BRANCH      *
.*       SO THAT THE XSNAP WILL BE SKIPPED IF THE STATED CONDTION IS  *
.*       NOT MET.  GENERATE USER'S OWN OPCODE IF HE SUPPLIED ONE.     *
.*                                                                    *
         AIF   (T'&IF EQ 'O').XNOIF          SKIP IF IF NOT REQUESTED
         AIF   (N'&IF GE 3).XOKIF  SKIP IF ENOUGH ARGUMENTS
         MNOTE 0,'**XSNAP- IF=&IF:IGNORED, LACKS REQUIRED 3-4 OPERANDS'
         AGO   .XNOIF              CANCEL IF OPTION
.XOKIF   XLOOK &IF(2),(H,L,E,O,P,M,Z,NH,NL,NE,NO,NP,NM,NZ)
         AIF   (&XXLOOK GT 0).XOKIF1        SKIP IF OK RELATION
         MNOTE 0,'**XSNAP- IF=&IF(2) UNKNOWN-CANCELLED'
         AGO   .XNOIF              SKIP GENERATION OF THIS OPTION
.XOKIF1  ANOP
&INST    SETC  '&IF(4)'            GET INSTRUCTION
         AIF   (N'&IF EQ 4).X      IF OPCODE SUPPLIED,SKIP CHECKING
&INST    SETC  'CLI'               MAKE TENTATIVE INSTRUCTION SETUP
         AIF   ('&IF(1)'(1,1) NE '(' OR '&IF(1)'(K'&IF(1),1) NE ')').X
&INST    SETC  'C'                 PROBABLY WANTS RX TYPE
         AIF   ('&IF(3)'(1,1) NE '(' OR '&IF(3)'(K'&IF(3),1) NE ')').X
&INST    SETC  'CR'                2 REGS-USER WANTS RR TYPE
.X       ANOP
         &INST &IF(1),&IF(3) .     TEST
&INST    SETC  'BN&IF(2)'          NEGATE COND, HOPE FOR 1 OF 1ST SET
         AIF   (&XXLOOK LE 7).XOKIF2        SKIP IF NOW SET UP RIGHT
&INST    SETC  'B'.'&IF(2)'(2,2)   REMOVE N FROM COND
.XOKIF2  &INST &NAM.C
.*                                                                    *
.*             CREATE BRANCH AROUND THE SAVE AREA, FLAGS, ETC.        *
.*                                                                    *
.XNOIF   XLOOK &T(1),(PR,PRINT,FL,FLOAT,NO,NOREGS,ST,STORE)
&I       SETA  72+4*&N             LENGTH FOR T=PRINT,NOREGS
         AIF   (&XXLOOK LE 6).XBRNCH        SKIP IF ILLEGAL, OR PR,NO
&I       SETA  68                  LENGTH FOR T=STORE
.XBRNCH  B     &NAM.B+&I  .        BRANCH AROUND CONSTANTS
.*                                                                    *
.*       CREATE FRONT BRACKET CHARACTER STRING FOR REGISTER AREA      *
.*                                                                    *
         DS    0F  .               ALIGN LABEL ON FULLWORD
&L       SETA  8                   SET &L FOR NO LABEL= LENGTH
         AIF   (T'&LABEL EQ 'O').XNOLAB      IF NO LABEL,SKIP GENERATIO
&L       SETA  ((K'&LABEL+1)/4)*4  ROUND LENGTH UP TO FULLWORD
         AIF   (&L LE 92).XLAB1    SKIP IF LABEL SMALL ENOUGH
         MNOTE 0,'**XSNAP- LABEL= OPERAND TRUNCATED TO 92 CHARACTERS'
&L       SETA  92                  TRUNCATE
.XLAB1   DC    CL&L&LABEL
         AGO   .XCHK1              SKIP GENRATION OF 1ST DELIMETER
.XNOLAB  DC    CL8'&NAM.B'   .     FRONT BRACKET FOR REGISTER AREA
.*                                                                    *
.*             CREATE REGISTER AREA, BRACKETS, FLAG VALUES, AS NEEDED *
.XCHK1   AIF   (&XXLOOK LT 7).XPRINT        SKIP IF PRINTED OUTPUT
&NAM.B   DC    16F'-1',4C'X' .     REGISTER SAVE AREA, BRACKET X'S
         AGO   .XIFLB              SKIP TO CHECK FOR IF LABEL
.XPRINT  AIF   (&XXLOOK GT 0).XPRINT1       SKIP IF LEGAL T=
         MNOTE 0,'**XSNAP- UNKNOWN T=&T: T=PR ASSUMED'
.XPRINT1 ANOP
&XP      SETB  (&XXLOOK LT 5)      SET TO 1 IF GP REGS NEEDED
&XF      SETB  (&XXLOOK GT 2 AND &XP)       SET TO 1 IF T=FL OR T=FLOAT
&XF      SETB  (&XF OR '&T(2)' EQ 'FL' OR '&T(2)' EQ 'FLOAT')
&NAM.B   DC    16F'-1',B'&T(3)00&XF&XP',AL1(0,&L,&N/2),V(XXXXSNAP)
.*                                                                    *
.*       GENERATE ADDRESS LIST FOR STORAGE=, WITH EITHER WORDS FOR    *
.*       STORING ADDRESSES OR A-TYPE ADDRESS CONSTANTS.               *
.*                                                                    *
         AIF   (T'&STORAGE EQ 'O').OKN      SKIP IF STORAGE= NOT USED
&I       SETA  1                   INITIALIZE AS COUNTER
         AIF   (&N EQ N'&STORAGE).LOOP1               SKIP IF LEGAL
         MNOTE 0,'**XSNAP- ODD OPERAND IGNORED: STORAGE=&STORAGE(&N)'
         AIF   (&N EQ 0).OKN
.LOOP1   AIF   ('&STORAGE(&I)'(1,1) NE '*').LOOP1E
&K       SETA  1                   INITIALIZE COUNTER
.*             PROCESS ADDRESS REQUIRING LA - ST COMBINATION          *
.LOOP1A  AIF   (&I+&K GT &N).LOOP1C         SKIP IF WE'RE AT END
         AIF   ('&STORAGE(&I+&K)'(1,1) NE '*').LOOP1C SKIP IF NOT *
&K       SETA  &K+1                INCREM # CONSECUTIVE *FORMS
         AGO   .LOOP1A             GO CHECK NEXT
.LOOP1C  DS    &K.A .              WORDS WHERE ADDRESSES WILL BE STORED
&I       SETA  &I+&K               INCREMENT
         AGO   .LOOP1G             GO FOR NEXT CHECK
.*             PROCESS ADDRESS CONSTANT TYPE OF OPERAND               *
.LOOP1E  DC    A(&STORAGE(&I))
&I       SETA  &I+1                INCREMENT # OPERANDS DONE
.LOOP1G  AIF   (&I LE &N).LOOP1    CONTINUE IF ANY MORE
.*                                                                    *
.*       CREATE LOAD ADDRESS - STORE PAIRS FOR EXPRESSION ADDRESSES   *
.*                                                                    *
&I       SETA  1
.LOOP2   AIF   ('&STORAGE(&I)'(1,1) NE '*').LOOP2E    SKIP IF NOT *
&L       SETA  K'&STORAGE(&I)-1    GET # CHARAS IN EXPRESSION
&K       SETA  1                   INIT COUNTER
         AIF    (&L LE 40).LOOP2A  SKIP IF SMALL ENOUGH
         MNOTE 8,'**XSNAP- STORAGE(&I) LONGER THAN 40 CHARACTERS'
&L       SETA  40                  TRUNCATE AND HOPE IT GOES
.*       BREAK EXPRESSION INTO 8 CHARACTER SECTIONS.                  *
.LOOP2A  ANOP
&A(&K)   SETC  '&STORAGE(&I)'(8*&K-6,8)      GET UP TO 8 NEXT CHARS
&K       SETA  &K+1                INCRMENT COUNTER
         AIF   (8*&K-8 LT &L).LOOP2A        LOOP UNTIL HAVE WHOLE OPR
         LA    0,&A(1)&A(2)&A(3)&A(4)&A(5)
         ST    0,&NAM.B+4*&I+68    STORE ADDRESS IN LIST
.LOOP2C  ANOP
&K       SETA  &K-1                DECRMENT SECTION TO NULL
&A(&K)   SETC  ''                  NULL FOR NEXT USE
         AIF   (&K GT 2).LOOP2C    CONTINUE UNTIL ALL BUT &A(1) NULL
.LOOP2E  ANOP
&I       SETA  &I+1                INCREMENT POSITION IN LIST
         AIF   (&I LE &N).LOOP2    CONTINUE WITH LIST
.*                                                                    *
.*       CREATE CODE TO SET UP REGISTERS FOR XXXXSNAP,CALL IT,AND     *
.*       RESTORE REGS ON RETURN.  XXXXSNAP RESTORES THE CONDTION CODE.*
.*                                                                    *
.OKN     LA    10,&NAM.B  .        GET ADDRESS OF REGISTER BLOCK
         L     15,68(10) .         GET V(XXXXSNAP) FOR BRANCH
         BALR  14,15 .             CALL XXXXSNAP,POINT 14 AT NEXT INST
         LM    0,15,0(10) .        RELOAD THE REGISTERS
.*             CREATE LABEL FOR IF OPTION, IF IT WAS USED.            *
.XIFLB   AIF   ('&INST' EQ '').XEXIT         SKIP GEN OF IF LABEL
&NAM.C   EQU   * .                 DEFINE LABEL FOR IF= BRANCH
.XEXIT   SPACE 2
.XXEXIT  MEND
