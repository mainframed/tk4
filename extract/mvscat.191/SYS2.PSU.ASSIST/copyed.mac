0000     TITLE 'COPYED - MULTIPLE COPY AND EDIT UTILITY PROGRAM'
         PRINT NOGEN
COPYED   CSECT
**--> CSECT: COPYED     MULTIPLE COPY AND EDIT PROGRAM  . . . . . . . .
*.       ENTRY CONDITIONS                                             .
*.  R1 = @ @ PARM FIELD, IF ANY, WITH FOLLOWING CONTROL OPTIONS:      .
*.       NCOPY=#        NUMBER OF COPIES.  1 ASSUMED IF NONE SUPPLIED..
*.       CNTRL=CHARACTERS    UP TO 10 CHARACTERS.  WHENVER THIS CHAR  .
*.             STRING APPEARS, SKIP NEXT RECORD TO NEW PAGE.          .
*.             IF NOT CODED, ASSUMES ASA CARRIAGE CONTROL EXISTS      .
*.             IN FIRST BYTE OF EACH RECORD.                          .
*.       TRANS=YES      TRANSLATE LOWER CASE TO UPPER<.               .
*.       LMARG=#        NUMBER OF COLUMS BETWEEN OUTPUT CARRIAGE CTRL .
*.             CHARACTER AND 1ST BYTE OF PRINTABLE RECORD.            .
*.             ASSUMES 0  IF NOT SUPPLIED.                            .
*.       SEQNO=PRT      ASSUME 80-CHAR CARDS, W/O ASA CARRIAGE CTRL.  .
*.             MOVE SEQNO FIELD OVER 5 BYTES AND PRINT IT THERE.      .
*.  FT08F001 : INPUT DDNAME.  RECFM=F OR FB.  TAPE OR DISK.           .
*.  FT09F001: OUTPUT DDNAME.  RECFM=F OR FB.  ANY DEVICE.             .
*.       EXIT CONDITIONS
*.  RC = 0     SUCCESSFUL RUN                                         .
*.  RC = 9     COULD NOT OPEN FT08F001 DCB                            .
*.  RC = 10    COULD NOT OPEN FT09F001 DCB.                           .
*.  RC = 11    COULD NOT OPEN EITHER FT08F001 OR FT09F001 DCBS.       .
*.       USES MACROS: CLOSE,DCB,GET,OPEN,PUT,RETURN,SAVE              .
*.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
         SPACE 1
$        EQU   0                   FOR ANY FIELD MODIFIED DURING EXEC
         SPACE 1
*              REGISTER EQUATES AND USAGE.
R0       EQU   0                   WORK, LIMIT @ PARM FIELD DURING SCN
R1       EQU   1                   SCAN PTR DURING PARM SCAN. WORK.
R2       EQU   2                   WORK REG
R8       EQU   8                   LENGTH-1 OF INPUT RECORD
R10      EQU   10                  @ WHERE INPUT RECORD MOVED
R11      EQU   11                  CONSTANT 1 FOR BXHING
R13      EQU   13                  SAVE AREA PTR, BASE REGSISTER
R14      EQU   14                  INTERNAL LINK, WORK REGISTER
R15      EQU   15                  WORK REGISTER
         SPACE 1
         USING COPYED,R15          NOTE ENTRY PT USING
         SAVE  (14,12),T,*         SAVE REGS
         LR    R14,R13             MOVE SA @ OVER
         CNOP  0,4                 ALIGN
         BAL   R13,*+76            SET R13, SKIP OVER
         USING *,R13               NEW USING
         DROP  R15                 KILL OLD ONE
         DS    18F                 SAVE AREA
         ST    R14,4(R13)          BACK LINK
         ST    R13,8(R14)          FORWARD LINK
         SPACE 1
         LA    R11,1               SRT UP USEFUL CONSTQNT IN ODD REG
         L     R1,0(R1)            GET @ LENGTH/PARM FILED
         LH    R2,0(R1)            LENGTH OF PARM FIELD
         LTR   R2,R2               WAS IT 0, I.E. NO PARM FILED
         BZ    COPARMDN            NO PARM. SKIP PARM SCAN
         EJECT
*              INITIALIZE FOR PARM FIELD ANALYSIS.
         STC   R2,*+5              STORE LENGTH FOR BLANKING
         MVC   COPARM($),COBLANK   BLANK FIELD
         BCTR  R2,0                GET LENGTH-1 OF PARM FILED
         STC   R2,*+5              STRE LENGTH-1 FOR MOVE
         MVC   COPARM($),2(R1)     MOVE PARM FIELD OVER
         SPACE 1
         LA    R0,COPARM(R2)       GET @ LAST BYTE OF PARM FIELD
         LA    R1,COPARM           SCAN PTR INIT
         SPACE 2
*              SCAN PARM FIELD, ONE OPERAND AT A TIME.
COPSEARA CR    R1,R0               HAVE WE REACHED END OF PARM FIELD
         BNL   COPARMDN            YES, QUIT SCANNING
         LA    R2,COPRMLST         @ PARM OPERAND LIST
         LA    R14,COPRMNUM        GET # DIFFERENT PARM OPERANDS
         SR    R15,R15             SET UP FOR IND%XED BRANCH
         SPACE 1
COPSEARB CLC   0(COPL,R1),0(R2)    COMPARE TO PARM OPERAND
         BE    COPARMFD            THIS WAS IT, BRANCH
         LA    R2,COPL(R2)         INCREMENT OEPRAND PTR
         LA    R15,4(R15)          INCREMRNT FOR BRANCH INDEX
         BCT   R14,COPSEARB        LOOP , SEATCH FOR OPERAND
         BXH   R1,R11,COPSEARA     BUMP SCANNER 1 CHAR AND TRY AGAIN
         SPACE 1
*              PARM OPERAND FOUND.  BRANCH TO RIGHT SECTION.
COPARMFD LA    R1,COPL+1(R1)       INDEX BEYOND = SIGN AFTER PARM
         B     *+4(R15)            BRANCH TO ROUTINE
         B     COPNCOPY            NCOPY=
         B     COPCNTRL            CNTRL=CHARACTERS
         B     COPTRANS            TRANS=YES
         B     COPLMARG            LMARG=#
         B     COPSEQNO            SEQNO=PRT
         EJECT
*              INDIVIDUAL PARM OPTION SECTIONS.
         SPACE 1
COPNCOPY BAL   R14,COPDECIN        CONVERT DECIMAL #
         STH   R2,CONCOPY          SAV E THIS VALUE, OVERRIDE 1
         BXH   R1,R11,COPSEARA     BUMP BEYOND ,.  BACK FOR NEXT
         SPACE 2
COPCNTRL SR    R2,R2               ZERO FOR LENGTH COUNTER
         LA    R14,COCNTCHR        @ FOR CHARACTER STRING
         OI    COFLAGS,COFCNT      SHOW CONTROL CHARACTER STRING EXIST
         SPACE 1
COPCNTRM MVC   0(1,R14),0(R1)      MOVE 1 CHARACTER OVER
         STC   R2,COCNTCLC+1       SAVE 6-1 INT INSTR NOW
         AR    R1,R11              INCREMENT SCAN PTR
         CLI   0(R1),C','          WAS COMMA AFTERWARD
         BE    COPCNTRN            YES, SKIP, THEN GET NEXT
         AR    R14,R11             INCREMRNT PTR
         AR    R2,R11              INCREMRNT LENGTH-1
         CR    R1,R0               COMPARE OT @ LAST CHAR
         BNH   COPCNTRM            IF MORE, CONTINUE
COPCNTRN BXH   R1,R11,COPSEARA     BUMP SCAN PTR, CONTRINUE
         SPACE 2
COPTRANS CLC   0(3,R1),=C'YES'     WAS IT RIGHT OPERAND
         BNE   COPSEARA            NO, IGNORE IT THEN
         OI    COFLAGS,COFTRA      SHOW TRANSLATE MUST BE DONE
         LA    R1,3(R1)            BUMP SCANNER BEYOND YES
         SPACE 1
*              BUILD TRANSLATE TABLE
         MVI   COTRTAB,0           ZERO FIRST BYTE
         LA    R2,255              FOR BCT LIMIT
         STC   R2,COTRTAB(R2)      STORE VALUE IN RIGHT PLACE
         BCT   R2,*-4              LOOP AND DECREMTNP
         OC    COTRTAB+X'81'(9),COBLANK     CONVERT LOWER TO UPPER
         OC    COTRTAB+X'91'(9),COBLANK     CONVERT LOWER TO UPPER
         OC    COTRTAB+X'A2'(9),COBLANK     CONVERT LOWER TO UPPER
         BXH   R1,R11,COPSEARA     BUMP BEYOND ,.  BACK FOR NEXT
         SPACE 2
COPLMARG BAL   R14,COPDECIN        GET DECIMAL #
         STH   R2,COLMARG          SAVE FOR LEFT MARGING
         BXH   R1,R11,COPSEARA     BUMP BEYOND ,.  BACK FOR NEXT
         SPACE 2
COPSEQNO CLC   0(3,R1),=C'PRT'     WAS IT SEQNO=PRT
         BNE   COPSEARA            NO, IGNORE IT
         LA    R1,3(R1)            SKIP BEYOND PRT
         OI    COFLAGS,COFPRT      SHOW THIS OPTION
         BXH   R1,R11,COPSEARA     BUMP BEYOND ,.  BACK FOR NEXT
         EJECT
**--> INSUB: COPDECIN   CONVERT DECIMAL NUMBER TO BINARY  + + + + + + +
*+       ENTRY CONDITIONS                                             +
*+  R14= RETURN @ TO CALLING SECTION                                  +
*+  R1 = SCAN PTR TO 1ST DECIMAL DIGIT (MUST BE RIGHT)                +
*+       EXIT CONDTIONS                                               +
*+  R1 = SCAN PTR TO 1ST NON DECIMAL DIGIT                            +
*+  R2 = BINARY RESULT OF CONVERSION                                  +
*+  R15  IS MODIFIED BY THIS INSUB.                                   +
*+  + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
         SPACE 1
COPDECIN SR    R2,R2               CLEAR FOR COUNTER
         LR    R15,R1              SAVE @ FIRST DEIGIT
         SPACE 1
         CLI   1(R1),C'0'          COMPARE TO DIGIT
         BL    *+10                BRANCH OUT IF NO MORE
         AR    R2,R11              INCREMRNT LENGTH-1
         BXH   R1,R11,*-10         LOOP, BUMP SCAN PTR
         SPACE 1
         EX    R2,COPDECPK         PACK VALUE
         CVB   R2,CODWORK          CONVERT IT
         BXH   R1,R11,0(R14)       BUMP SCAN PTR TO COMMAR, RTURN
COPDECPK PACK  CODWORK,0($,R15)    FOR EX
         EJECT
*              PARM SCAN DONE.  OPEN DCB'S AND TEST THEM.
COPARMDN EQU   *
         OPEN  (CODCB08,(INPUT),CODCB09,(OUTPUT))
         LA    R15,8               INIT FOR ERROR
         TM    CODCB08+48,X'10'    DID IT OPEN
         BO    *+8                 YES, SKIP
         LA    R15,1(R15)          INCRE,NT
         TM    CODCB09+48,X'10'    TEST THIS ONE
         BO    *+8                 OK,SKIP
         LA    R15,2(R15)          SHOW DID NOT OPEN
         CH    R15,=H'8'           DID BITH OPEN
         BNE   CORETN              NO, ERROR
         SPACE 1
*              DCBS OPENED OK.  INITIALIZE FPR COPYING.
         LH    R8,CODCB08+82       GET DCBLRECL
         BCTR  R8,0                GET LENGTH-1 FO INPUT RECRD
         TM    COFLAGS,COFCNT      WAS CARRIAGE CONTROL SPEC CHARAS
         BO    *+6                 YES, SO NO ASA CC, SKIP.
         BCTR  R8,0                ASA, SO MAKE LENGTH-1 INTO L-2
         STC   R8,COTRANSL+1       STORE ACTUAL L-1 FOR TRANSLATE
         STC   R8,COMOVE+1         STORE L-1 FOR MVOING OVER
         LA    R10,COCARD          @ OF BUFFER
         AH    R10,COLMARG         = @ WHERE ACTUAL RECORD STARTS
         USING COCARDIM,R10        NOTE DUMMY SECTION. MAY BE NEEDED
         EJECT
*              MAIN LOOP - GET A CARD, PROCESS IT, WRITE IT OUT.
COGET    GET   CODCB08             GET NEXT RECORD
         SPACE 1
*              CARRIAGE CONTROL PROCESSING
         TM    COFLAGS,COFCNT      WAS THERE SPEC CNTRL CHARAC
         BZ    COASCON             NO, ASA ONES ARE THERE
COCNTCLC CLC   0($,R1),COCNTCHR    WAS THIS CNTRL CHAR CARD
         BNE   CONOCON             NO, SKIP
         MVI   COCC,C'1'           MAKE NEXT ONE NEW PAGE
         B     COGET               GO GET NEXT ONE
COASCON  MVC   COCC,0(R1)          MOVE CC OVER
         AR    R1,R11              BUMP PTR BEYOND CC IN INPT RECORD
         SPACE 1
*              TRANSLATION PROCESSING.
CONOCON  TM    COFLAGS,COFTRA      SHOULD WE TRANSLATE LOWERS UP
         BZ    *+10                NO, SKIP
COTRANSL TR    0($,R1),COTRTAB     TRANSLATE
         SPACE 1
*              SEQUENCE NUMBER PROCESSING.
COMOVE   MVC   0($,R10),0(R1)      MOVE RECORD OVER
         TM    COFLAGS,COFPRT      WAS SEQNO=PRT OPTION USED
         BZ    CONOSEQ             SKIP IF NOT
         MVC   CODWORK,COSEQ1      MOVE DEQNO OVER
         MVC   COSEQ2,CODWORK      MOVE IT NEW PLACE
         MVC   COSPACE,COBLANK     BLMK SPACE IN BETWEEN
CONOSEQ  EQU   *
         SPACE 1
*              OUTPUT NEW RECORD. RESET CARRIAGE CONTROL.
         PUT   CODCB09,COCC        OUTPUT
         MVI   COCC,C' '           REBLANK CC
         B     COGET               GO FOR NEXT
         SPACE 1
*              END-O-FILE PROCESSING.
COEOF    EQU   *
         LH    R0,CONCOPY          GET COUNT REMAINING
         SR    R0,R11              SUBTRACT 1
         STH   R0,CONCOPY          STORE BACK
         BNP   COFINISH            NO MORE, QUIT
         CLOSE (CODCB08,REREAD)    CLOSE, REWIND IT
         OPEN  (CODCB08,(INPUT))            OPEN, GO FOR NEXT COPU
         MVI   COCC,C'1'           MAKE SURE STARTS ON NEW PAGE
         B     COGET               GO BACK AND DO NEXT COPY
         SPACE 1
*              FINISH - WRITE 1 MORE NEW PAGE.
COFINISH MVI   COCC,C'1'           CC FOR NEW PAGE
         MVC   COCARD,COBLANK      BLNAK REST OF IT
         PUT   CODCB09,COCC        NEW PAGE
         CLOSE (CODCB08,,CODCB09)  CLOSE BOTH DCB'S
         SPACE 1
*              SET RETURN CODE AND EXIT.
         SR    R15,R15             SUCCESS
CORETN   L     R13,4(R13)          RELOAD PREVIOUS SA @
         RETURN (14,12),T,RC=(15)      RETURN, WITH RETCODE
         EJECT
*              PARM OPTION LIST, EQUS.
COPRMLST DC    C'NCOPY',C'CNTRL',C'TRANS',C'LMARG',C'SEQNO'
COPL     EQU   L'COPRMLST          LENGTH OF SINGLE PARM
COPRMNUM EQU   5                   # DIFFERENT OPERANDS IN PARM FIELD
         SPACE 1
*              PARM VALUES AND FLAGS
COPARM   DS    CL100' '            FOR PARM FIELD
CONCOPY  DC    H'1'                # COPIES, INIT = 1
COLMARG  DC    H'0'                LEFT MARGIN, DEFAULT=0
COCNTCHR DC    CL10' '             SPACE FOR BUILTUP CARRIAGE CHARS
COFLAGS  DC    B'0'                FLAG BYTE
COFCNT   EQU   B'00000001'         (COFLAGS)- SPECIAL CC CHARACTERS
COFTRA   EQU   B'00000010'         (COFLAGS)- TRANSLATE MODE
COFPRT   EQU   B'00000100'         (COFLAGS)- SEQNO=PRT
         SPACE 1
*              OUTPUT BUFFER, CARRIAGE CONTROL.
         DS    0D                  ALIGNMENT
COCC     DC    C'1'                CARRIAGE CONTROL
COCARD   DC    CL255' '            SPACE FOR OUTPUT
         SPACE 1
*              MISC WORKAREAAS AND AREAS.
CODWORK  DS    D                   WORKAREA
COTRTAB  DS    256B                TRANSLATE TABLE
COBLANK  DC    CL256' '            BLANKS
         SPACE 1
*              INPUT AND OUTPUT DCB'S
CODCB08  DCB   DDNAME=FT08F001,DSORG=PS,MACRF=GL,EODAD=COEOF
CODCB09  DCB   DDNAME=FT09F001,DSORG=PS,MACRF=PM
         LTORG
         SPACE 2
**--> DSECT: COCARDIM   CARD IMAGE FOR PRT OPTION . . . . . . . . . . .
COCARDIM DSECT
         DS    CL72                TEST
COSEQ1   DS    CL8                 ORIG SEQNO
         ORG   COSEQ1              ORG BACK
COSPACE  DS    CL5                 SPACE
COSEQ2   DS    CL8                 NEW PLACE FOR SEQNO
         DROP  R10,R13             REMV USINGS
         END
