         TITLE 'XXXXSNAP - I/O CSECT USED BY XSNAP - VERSION 5.0'
XXSNAPC  DSECT
XXSGPRG  EQU   B'00000001'         (XXSFLAGS)=> PRINT GP REGS
XXSFLRG  EQU   B'00000010'         (XXSFLAGS)=> PRINT FL REGS
XXSRGSAV DS    16F                 REGISTER AREA, REGS SAVED BY XSNAP
XXSFLAGS DS    B                   OPTION BYTE FLAG
         DS    AL1                 **** UNUSED AS OF VERSION 4.0***
XXSLABLN DS    AL1                 LENGTH OF THE LABEL FIELD
XXSNMSTR DS    AL1                 NUMBER OF @ PAIRS IN STORAGE= LIST
         DS    V(XXXXSNAP)         ADCON FOR CALL TO XXXXSNAP ROUTINE
XXSADSTR DS    0A                  STORAGE = ADDRESS LIST(OPTIONAL)
         SPACE 2
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                       JOHN R. MASHEY - MAY 1969     *
*                                       VERSION 4.0 - FEBRUARY 1970   *
*                                                                     *
*                                  VERSION 5.0 - NOVEMBER 1972 CALLS  *
*                                  XXXXOPEN CSECT.  RICHARD FOWLER    *
*                                                                     *
*                                       IBM 360/67 ASSEMBLER 'G'      *
*                                       PENNSYLVANIA STATE UNIVERSITY *
*        ABSOLUTE REGISTER EQUATES AND USAGE                          *
R0       EQU   0                   WORK REGISTER                      *
R1       EQU   1                   USED AS WORK REGISTER              *
R2       EQU   2                   USED TO HOLD 1ST ADDRESS OF PAIR   *
R3       EQU   3                   USED TO HOLD SECOND ADDRESS OF PAIR*
R4       EQU   4                   USED AS INCREMENT FOR BXLE'S       *
R5       EQU   5                   LIMIT ADDRESS IN VARIOUS BXLE'S    *
R6       EQU   6                   WILL CONTAIN CVTMZ00(HIGHEST ADDR) *
R7       EQU   7                   OLD ADDRESS IN SAME LINE CHECK     *
R8       EQU   8                   INTERNAL LINKAGE REGISTER          *
R9       EQU   9                   ADDRESS OF CURRENT ADDRESS PAIR    *
R10      EQU   10                  POINTS TO XSNAP LABEL,REGISTER AREA*
R11      EQU   11                  UNUSED                             *
R12      EQU   12                  # STORAGE= ADDRESS PAIRS TO DO     *
R13      EQU   13                  BASE REGISTER/@ DUMMY SAVE AREA    *
R14      EQU   14                  RETURN ADDR,POINTER TO LABEL LENGTH*
R15      EQU   15                  ENTRY POINT REGISTER               *
         EQUREGS L=F,DO=(0,6,2)    SET UP FLOATING EQUS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        XSNAP CONTROL BLOCK AND POINTERS ON ENTRY TO XXXXSNAP.       *
*        FIELD     LENGTH(BYTES)   DESCRIPTION/PURPOSE                *
*        LABEL      LABLN          LABEL=, PADDED TO FULLWORD WITH ' '*
* R10===>RGSAV      64             16 FULLWORDS, WHERE REGS WERE SAVED*
*        FLAGS      1              BYTE FOR OPTION BITS               *
*              BIT 6 = 1 ==>       PRINT FP REGISTERS. IF =0, DO NOT  *
*              BIT 7 = 1 ==>       PRINT GP REGISTERS. IF =0, DO NOT  *
*        UNUSED     1              FOR FUTURE USE, NOT USED IN V.4.0  *
*        LABLN      1              LENGTH OF THE LABEL FIELD          *
*        NMSTR      1              # 8-BYTE @ PAIRS IN STORAGE= LIST  *
*        ADCON      4              V(XXXXSNAP) FOR CALL               *
*        ADSTR      NMSTR*8        STORAGE= @ LIST, IF PRESENT        *
*        INSTRUCTS  10       3 INSTRUCTIONS - LA, L, BALR             *
* R14===>LM    0,15,0(10)          RETURN POINT, RELOADS REGISTERS    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
XXXXSNAP CSECT
$CHN     EQU   0                   FOR ANY FIELD CHANGED DURING EXEC
         ENTRY XXSNDCB             SO PEOPLE CAN CHANGE,IF THEY WISH
         USING XXXXSNAP,R15        NOTE TEMPORARY ENTRY USING
         USING XXSNAPC,R10         NOTE POINTER TO BLOCK
         CNOP  0,4                 MAKE SURE ALIGNED ON FULLWORD
         BAL   R13,*+76            SET UP BASE AND SAVE AREA @
         USING *,R13               NOTE USING FOR BASE/SAVE AREA
XXSSAVE  DS    18F                 FAKE SAVE AREA FOR OS TO SAVE INTO
         ORG   XXSSAVE             ORG BACK
XXDWORK  DS    4D                  OVERLAP FLT WORK AREAS INTO FAKE SAV
         ORG
         DROP  R15                 CLEAR TEMPORARY USING
         ST    R14,XXSAVE14        SAVE RETURN ADDRESS,CC PROG MAKS
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        CALL CSECT XXXXOPEN TO OPEN THE DCB THE FIRST TIME CALLED,CHNG
*   NOP TO A BRANCH SO THAT IT WILL ONLY BE OPENED ONCE,AND MAKE CHECK*
*   TO ASSURE DCB WAS OPENED SUCCESSFULLY,ABENDING IF NOT.            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    $CHN,XXOPENOK       **CHANGED TO BRANCH BY NEXT INST****
         MVI   *-3,X'F0'           **INSTRUCTION. THUS DO ONLY 1 OPEN *
         LA    1,XXSNOPBK          GET ADDRESS OF CONTROL BLOCK
         L     15,XXSNOPAD         GET ADDRESS OF SUPER OPEN CSECT
         BALR  14,15               GO THERE, ONLY RETURNS IF FILE OPEND
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        GET ADDRESS OF LABEL FROM FIRST POSITION IN ADDRESS LIST,    *
*   AND USING REGISTER 10(THE ADDRESS OF THE REGISTER SAVE AREA)      *
*   FIND THE LENGTH OF THE LABEL AND PRINT THE LABEL& HEADER LINE.    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
XXOPENOK SR    R2,R2               CLEAR FOR INSERTION
         IC    R2,XXSLABLN         GET LENGTH OF LABEL FIELD
         LR    R1,R10              GET DUPLICATE OF XXSNAPC PTR
         SR    R1,R2               SUBTRACT TO GET START @ FOR LABEL
         BCTR  R2,0                DECREMENT TO LENGTH-1 FOR MVC
         STC   R2,*+5              STORE INTO MVC
         MVC   XXLABEL+38($CHN),0(R1)       MOVE LABEL TO PRINT AREA
         ST    R1,XXWORK1          SAVE THIS @ FOR CONVERSION
         MVC   XXWORK1(1),XXSAVE14 MOVE CCMASK OVER FOR CONVERSION
         MVC   XXLABEL+1(XXSN1B),XXSNP1ST    MOVE HEADER,PATTERN,MSG
         ED    XXLABEL+L'XXSNP1ST+1(6),XXCOUNT         EDIT CALL NUMBER
         UNPK  XXLABEL+1+XXSN1B(9),XXWORK1(5)        CONVRT CCPM,LOCN
         TR    XXLABEL+1+XXSN1B(8),XXTAB1  FINISH HEX CONVERSION
         AP    XXCOUNT,=PL1'1'     INCREMENT NUMBER OF CALLS
         LA    R0,XXLABEL          SET UP ADDR FOR PRINT ROUTINE
         BAL   R8,XXPRINT          GET THE TITLE LINE PRINTED OUT
         MVC   XXLABEL+1(L'XXLABEL-1),XXBLANKS
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        CHECK TO SEE IF THE REGISTERS SHOULD BE PRINTED.             *
*        PRINT THE HEADING FOR THE REGISTER DUMP.  CONVERT AND PRINT  *
*   THE REGISTERS IN 2 LINES. CHECK TO SEE IF ONLY THE REGISTERS      *
*   WERE DESIRED. FINISH UP AND RETURN TO CALLING XSNAP IF SO.        *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
         TM    XXSFLAGS,XXSGPRG    DOES HE WANT GP REGS PRINTED
         BZ    XXCHKFP             NO, SO DONT PRINT THEM
         LR    R2,R10              DUPLICATE @ RGSAV OVER
XXGOREG  LA    R0,XXREGLAB         ADDRESS OF REGISTER LABEL
         BAL   R8,XXPRINT          PRINT THE REGISTER LABEL
         MVC   XXREGOUT(12),=CL12'0 REGS 0-7'          LABEL-1ST REGS
         BAL   R8,XXREGS1          CONVERT 1>T REGS BLOCK,PRINT LINE
         BAL   R8,XXPRINT          HAVE LINE PRINTED
         MVC   XXREGOUT(12),=CL12'  REGS 8-15'   2ND LINE LABEL
         BAL   R8,XXREGS2          GET 2ND GROUP CONVERTED,PRINTED
         BAL   R8,XXPRINT          HAVE LINE PRINTED
XXCHKFP  TM    XXSFLAGS,XXSFLRG    DOES HE WANT FLOATING PT REGS PRINTE
         BZ    XXCHKST             NO,SO GO CHECK FOR STORAGE=
         SPACE 1
*              FOLLOWING SECTION PRINTS FLOATING POINT REGISTERS      *
         MVC   XXREGOUT(12),=CL12'0 FLTR 0-6'         MOVE LABEL IN
         STD   F0,XXDWORK          SAVE REG F0
         STD   F2,XXDWORK+8        SAVE F2
         STD   F4,XXDWORK+16       SAVE F4
         STD   F6,XXDWORK+24       SAVE F6
         LA    R2,XXDWORK          SET UP @ WORKAREA FOR XXREGS1
         BAL   R8,XXREGS1          CALL GP REG CONVERTER
         MVC   XXREGOUT+24(12),XXREGOUT+28            PUT F0 TOGETHRE
         MVC   XXREGOUT+48(12),XXREGOUT+52           PUT F2 TOGETHER
         MVC   XXREGOUT+72(12),XXREGOUT+76           PUT F4 TOGETHER
         MVC   XXREGOUT+96(12),XXREGOUT+100          PUT F6 TOGETHER
         BAL   R8,XXPRINT          PRINT THE ASSEMBLED LINE
         MVC   XXREGOUT,XXBLANKS   REBLANK LINE LIKE ITS SUPPOSED TO BE
         SPACE 1
XXCHKST  SR    R12,R12             CLEAR FOR INSERT
         IC    R12,XXSNMSTR        GET # OF ADDRESS PAIRS
         LTR   R12,R12             ARE THERE ANY @ PAIRS
         BZ    XXEXIT1             NO STORAGE=, SO QUIT
         LA    R9,XXSADSTR         INIT R9 TO @ FIRST ADDRESS PAIR
         LA    R4,4                SET UP BXLE INDEX FOR REST OF PROG
*              THE FOLLOWING 2 LINES HELP US PREVENT 0C5'S            *
         L     R6,16               GET CVT POINTER
         L     R6,164(R6)          GET CVTMZ00-HIGHEST MACHINE @
         SH    R6,=H'32'           REDUCE SO WILL NOT 0C5
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        SECTIONS XXMEMA - XXMEME SERVE TO PROCESS 1 ADDRESS PAIR     *
*   FROM THE LIST OF ADDRESS PAIRS SPECIFYING STORAGE TO BE DUMPED.   *
*   AT XXMEMF,THE 2ND ADDRESS IS TESTED TO SEE IF IT IS THE LAST ONE  *
*   AND  THE DUMP COMPLETED IF SO. OTHERWISE,A BRANCH IS TAKEN BACK   *
*   TO XXMEMA TO PROCESS THE NEXT ADDRESS PAIR.                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
XXMEMA   LM    R2,R3,0(R9)         OBTAIN NEXT ADDRESS PAIR
         UNPK  XXCOREL,1(4,R9)     1ST STEP TO CONVERT LOWER ADDR
         UNPK  XXCOREH,5(4,R9)     UST STEP TO CONVERT HIGHER ADDRESS
         TR    XXCOREL(17),XXTAB1  TRANSLATE TO COMPLETE HEX CONVERT
         MVC   XXCOREL+6(4),=C' TO '         BLANK EXTRA BYTE&ADD TO
         MVI   XXCOREH+6,C' '      BLANK OUT EXTRA BYTE
         LA    R0,XXCORETL         SET UP ADDRESS OF CORE TITLE
         BAL   R8,XXPRINT          GET CORE HEAD PRINTED
         CR    R3,R6               MAKE SURE HIGH ADDR ISN'T TOO HIGN
         BNH   *+6                 SKIP OVER IF NOT TOO HIGH
         LR    R3,R6               @ WOULD 0C5-USE HIGHEST INSTEAD
         LA    R3,31(R3)           PREPARE TO ROUND 2ND ADDR UPWARD
         SRDL  R2,5                ROUND BOTH ADDRESSES
         SLL   R2,5                NOW HAVE 1ST ADDR IN R2,ROUNDED DOWN
         SLL   R3,5                NOW HAVE HIGH ADDR IN R3,ROUNDED UP
         CR    R2,R3               WAS USER IN ERROR& LOW ADDR>HIGH ADD
         BH    XXMEMF              ADDR ERROR-PRINT NOTHING,GO TO NEXT
         CR    R2,R6               MAKE SURE IF 1ST=2ND>MEMORY SIZE
         BH    XXMEMF              PRINT NOTHING IF SO
         SPACE 2
XXMEMB   EQU   *
         ST    R2,XXWORK1          STORE BEGINNING ADDR FOR CONVERT
         LR    R7,R2               SAVE BEGINNING ADDRESS FOR SAME CHK
         UNPK  XXCORADD+1(7),XXWORK1+1(4)    GET BEGINNING ADDRESS
         MVC   XXCORE3,0(R2)       MOVE 32 BYTES OVER FOR ALPHMERIC TR
         TR    XXCORE3,XXTAB2      PERFORM ALPHAMERIC CONVERSION
         LA    R1,XXCORE1          ADDRESS FOR 1ST BLOCK CONVERSION
         BAL   R8,XXMEMP1          GET 1ST BLOCK OF 4 WORDS CONVERTED
         LA    R1,XXCORE2          ADDRESS FOR 2ND BLOCK CONVERSION
         BAL   R8,XXMEMP1          GET 2ND BLOCK CONVERTED
         TR    XXCORADD+1(84),XXTAB1         FINISH HEX CONVERSION
         LA    R0,XXCORADD         ADDRESS OF CORE OUTPUT LINE
         BAL   R8,XXPRINT          GET 1 CORE LINE PRINTED
         SPACE 2
*        XXMEMC-XXMEME CHECK FOR DUPLICATE LINES. HAVING FOUND 1 OR   *
*   MORE DUPLICATE LINES,CORE IS SCANNED UNTIL A DIFFERENT LINE IS    *
*   FOUND,OR THE BLOCK FINISHED,AND THEN PRINTS SAME LINES MESSAGE.   *
         SPACE 2
XXMEMC   CR    R2,R3               R2 HAS BEEN INCREMENTED-ARE WE DONE
         BNL   XXMEMF              YES WE'RE DONE WITH THIS SECTION
         CLC   0(32,R7),0(R2)      COMPARE PREVIOUS SECTION WITH NEXT
         BNE   XXMEMB              NOT THE SAME-WILL HAVE TO PRINT LINE
         LA    R7,32(R7)           INCREMENT SO WILL HAVE RIGHT 3
         ST    R7,XXWORK1          SAVE 1ST LINE ADDRESS OF SAME AREAS
         UNPK  XXSAML,XXWORK1+1    1ST STEP TO CONVERT
XXMEMD   LA    R2,32(R2)           INCREMENT TO LOOK AT NEXT SECTION
         CR    R2,R3               ARE WE DONE
         BNL   XXMEME              YES,WE'RE DONE-SAME LINES MESSAGE
         CLC   0(32,R7),0(R2)      CHECK NEXT SECTION WITH 1ST OF SAMES
         BE    XXMEMD              SAME-KEEP LOOPING UNTIL DIFFERENT
XXMEME   LR    R1,R2               SAVE END ADDR WHERE CAN DESTROY
         SH    R1,=H'32'           DECRMENT SO LINE ADDR RIGHT
         ST    R1,XXWORK1          SAVE FOR HEX CONVERSION
         UNPK  XXSAMH,XXWORK1+1    CONVERT-FIRST STEP
         TR    XXSAML(13),XXTAB1   FINISH HEX CONVERSION OF SAME LINES
         MVI   XXSAML+6,C'-'       PLACE DASH BETWEEN ADDRESSES
         LA    R0,XXSAME           ADDRESS OF MESSAGE FOR OUTPUT
         BAL   R8,XXPRINT          PRINT THE SAME LINE MESSAGE
         CR    R2,R3               HAVE WE MEANWHILE FINISHED BLOCK
         BL    XXMEMB              NO-KEEP GOING UNTIL BLOCK DONE
XXMEMF   LA    R9,8(R9)            INCREM R9 TO @ NEXT @ PAIR
         BCT   R12,XXMEMA          GO BACK FOR NEXT BLOCK
         B     XXEXIT2             ALL STORAGE= DONE, GO RETURN
         SPACE 2
*        XXEXIT - PRINT ENDING LINE,THEN RETURN TO CALLING XSNAP.     *
         SPACE 2
XXEXIT1  TM    XXSFLAGS,XXSGPRG+XXSFLRG     WERE EITHER REGS PRINTED
         BZ    XXEXIT3             NO OPTIONS, JUST LEAVE SINGLE LINE
XXEXIT2  LA    R0,XXLABEL          SET UP FOR BLANK LINE
         BAL   R8,XXPRINT          CALL PRINTER SECTION
XXEXIT3  L     R14,XXSAVE14        RELOAD RETURN @, CC
         SPM   R14                 RESTORE CONDITION CODE
         BR    R14                 RETURN TO CALLING XSNAP
         SPACE 2
*        ***  INTERNAL SUBROUTINE AREA ***                            *
         SPACE 2
*              XXREGS1 CONVERTS AND PRINTS 1 LINE OF 8 REGISTERS      *
         SPACE 1
XXREGS1  LA    R4,12               INCREMENT FOR BXLE
         LA    R5,XXREGOUT+16+7*12 LIMIT ADDRESS FOR BXLE
XXREGS2  LA    R3,XXREGOUT+16      START POINT,INDEX FOR COMING BXLE
XXREGS3  UNPK  0(9,R3),0(5,R2)     CONVERT 1 REGISTER VALUE
         MVI   8(R3),C' '          BLANK OUT EXTRA BYTE USED IN CONVERT
         LA    R2,4(R2)            INCRMENT POINTER TO REGISTER
         BXLE  R3,R4,XXREGS3       LOOP-DO 1 LINE OF 8 REGISTER VALUES
         TR    XXREGOUT+16(92),XXTAB1        FOR REST OF HEX CONVERT
         LA    R0,XXREGOUT         ADDRESS OF OUTPUT LINE
         BR    R8                  RETURN TO CALLER
         SPACE 2
*              XXMEMP1 CONVERTS 1 BLOCK OF 16 BYTES TO HEX.           *
         SPACE 1
XXMEMP1  LA    R5,12(R2)           SET UP LIMIT FOR BXLE
XXMEMP2  UNPK  0(9,R1),0(5,R2)     UNPACK 1 WORD OF MEMORY
         MVI   8(R1),C' '          BLANK OUT EXTRA BYTE UNPACKED
         LA    R1,9(R1)            INCREMENT POINTER TO OUTPUT AREA
         BXLE  R2,R4,XXMEMP2       CONTINUE,CONVERTING 16 BYTES
         BR    R8                  RETURN TO CALLER
         SPACE 2
*              XXPRINT PRINTS 130 CHARACTERS FROM THE ADDRESS IN R0   *
         SPACE 1
XXPRINT  PUT   XXSNDCB,(0)         PRINT SPECIFIED LINE
         BR    R8                  RETURN TO CALLER
         SPACE 4
*        *** OUTPUT LINE,CONSTANT, AND TRANSLATE TABLE AREA ***       *
         SPACE 2
XXSAVE14 DS    A                   SAVE WORD FOR RETURN @, CC,MASK
XXWORK1  DC    F'0',X'04'          FIELD + REVERSED BLANK FOR HEX CONVT
XXCOUNT  DC    PL3'1'              COUNTER FOR NUMBER OF CALLS
XXSNDCB  DCB   DSORG=PS,MACRF=PM,RECFM=FA,LRECL=130,BLKSIZE=130,       #
         DDNAME=XSNAPOUT,BUFNO=1
XXSNP1ST DC    C'BEGIN XSNAP - CALL'         HEADER TITLE
         DC    X'402020202021'     EDIT PATTERN FOR CALL NUMBER
         DC    C' AT '             FOR XSNAP LOCATION MESSAGE
XXSN1B   EQU   *-XXSNP1ST          LENGTH OF HEADER,NUMBER,LOCATION
XXSAME   DC    CL12'   LINES'      BEGINNING OF SAME LINE MESSAGE
XXSAML   DC    CL7' '              LOWEST ADDRESS AREA
XXSAMH   DC    CL7' ',CL104'   SAME AS ABOVE'          REST OF MESSG
XXLABEL  DC    CL130'0'            PRIME LABEL PRINTING AREA
XXREGLAB DC    C'0GP REGISTERS     0/8         1/9         2/10        #
               3/11        4/12        5/13        6/14        7/15'
XXBLANKS DC    CL130' '            BLANK FIELD,ALSO BLANKS FOR XXREGLAB
XXREGOUT DC    CL130' '            REGISTER PRINTING AREA
XXTAB    DC    C'0123456789ABCDEF' TR TABLE FOR HEX CONVERT
XXTAB1   EQU   XXTAB-240           TO MAKE CONSTANT TR'S EASIER FOR HEX
XXTAB2   DC    64C'.',C' ',128C'.',C'ABCDEFGHI',7C'.',C'JKLMNOPQR'
         DC    8C'.',C'STUVWXYZ',6C'.',C'0123456789',6C'.'  ALPH TR TAB
XXCORADD DC    CL7' ',CL3' '       10 BYTES - LINE ADDRESS
XXCORE1  DC    4CL9' ',CL3' '      39 BYTES - SPACE FOR 4 WORDS
XXCORE2  DC    4CL9' ',CL3'  *'    39 BYTES - SPACE FOR 2ND BLOCK
XXCORE3  DC    CL32' ',CL10'*'     32 BYTES -ALPHAMERIC + PAD TO 130 CH
XXCORETL DC    CL30'-',CL30'CORE ADDRESSES SPECIFIED-'
XXCOREL  DS    CL7,CL3             SPACE FOR LOW ADDR, 'TO '
XXCOREH  DC    CL7' ',CL53' '      SPACE FOR 2ND ADDRESS
XXSNOPAD DC V(XXXXOPEN)
XXSNOPBK XOPENBLK XXSNDCB,XXXXSNAP,(XSNAPOUT,XPRNT,SYSPRINT,FT06F001), #
               LRECL=130,BLKSIZE=130,WARN=YES,RECFM=FA
         LTORG
         END
