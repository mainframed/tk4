./ ADD LEVEL=40,SOURCE=0,NAME=XXXXDECI
         TITLE 'XXXXDECI - EXTENDED DECIMAL INPUT CONVERSION MODULE'
**--> CSECT: XXXXDECI   EXTENDED DECIMAL INPUT CONVERSION MODULE. . . .
*.       XXXXDECI IS CALLED BY MACRO XDECI TO PERFORM SCANNING AND    .
*.       CONVERSION OF DECIMAL STRINGS.                               .
*.       ENTRY CONDITIONS                                             .
*.  R14= ADDRESS OF XDECIB DSECT CREATED BY CALLING XDECI.            .
*.  R15= ENTRY POINT ADDRESS (=V(XXXXDECI)                            .
*.       EXIT CONDITIONS                                              .
*.  XDECIR1,XDECIRV VALUES ARE FILLED IN FOR REGS.                    .
*.  CC   IS SET ACCORDING TO SIGN OF RESULT, OR = 3 IF ERROR.         .
*.       USES DSECTS: XDECIB                                          .
*.       NAMES: XXDI----                                              .
*.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XXXXDECI CSECT
         USING *,R15               NOTE ENTRY PT USING FOR BASE REG
         USING XDECIB,R14          NOTE @ CONTROL BLOCK FROM XDECI
         STM   R2,R3,XXDISAVE      SAVE WORK REGISTERS
         LA    R1,1                USEFUL CONSTANT, IN ODD REGISTER
         LR    R2,R0               MOVE BEGINNING @ OVER WHERE USABLE
*              SCAN LOOP TO SKIP OVER LEADING BLANKS.
         CLI   0(R2),C' '          IS NEXT CHARACTER A BLANK
         BNE   *+8                 SKIP OUT OF LOOP IF NOT
         BXH   R2,R1,*-8           LOOP, INCREMENTING SCAN POINTE
         SPACE 1
         MVI   XXDIS,X'10'         MAKE INST A LPR FOR NOW, +
         CLI   0(R2),C'+'          IS THERE A LEADING +
         BE    XXDII               YES, BRANCH TO BUMP POINTER
         CLI   0(R2),C'-'          IS THERE A LEADING -
         BNE   XXDII2              NO,DON'T BUMP SCAN POINTER
         MVI   XXDIS,X'11'         - SIGN,SO MAKE INST AN LNR
XXDII    AR    R2,R1               BUMP SCAN PTR BY 1, LEADING SIGN
XXDII2   LR    R3,R2               MOVE INIT SCAN PTR AND SAVE IT
         SPACE 1
*              SCAN TO END OF DECIMAL DIGITS.
         CLI   0(R2),C'0'          IS NEXT CHARACTER A DIGIT
         BL    *+16                BRANCH OUT OF LOOP IF NOT DIGIT
         CLI   0(R2),C'9'          WAS IT TOO HIGH (MULTIPUNCH)
         BH    *+8                 YES, BRANCH OUT.  IDIOT OVERPUNCHRS
         BXH   R2,R1,*-16          LOOP BACK, BUMPING SCAN POINTER
         SPACE 1
         ST    R2,XDECIR1          STORE VALUE FOR RETURN AS SCAN PTR
         SR    R2,R3               OBTAIN LENGTH OF STRING
         BZ    XXDION              IF ZERO LENGTH, ERROR, BRANCH
         LA    R0,9                LIMIT FOR COMPARISON
         CR    R2,R0               COMPARE WITH LIMIT VALUE
         BNH   *+12                SKIP IF SMALL ENOUGH TO BE OK
XXDION   TM    *+1,1               SET COND CODE = 3,BAD VALUE
         B     XXDIST              GO TO RETURN TO CALLER
         SR    R2,R1               NORMAL CODE, DECREMENT LENGTH
         EX    R2,XXDIPK           PACK THE VALUE
         CVB   R0,XXDIDWOR         CONVERT VALUE
XXDIS    LPR   $+R0,R0             MAKE SIGN, SET CC RIGHT**MODIFIED***
         ST    R0,XDECIRV          SAVE AS VALUE FOR REG
XXDIST   LM    R2,R3,XXDISAVE      RESTORE EXTRA WORK REGS
         B     XDECIRET            RETURN TO CALLING XDECI MACRO
         SPACE 1
XXDIPK   PACK  XXDIDWOR,0($,R3)    PACK TO BE EXECUTED
XXDIDWOR DS    D                   DOUBLEWORD WORKAREA
XXDISAVE DS    2F                  WORK REGS SAVE AREA
         DROP  R14,R15             KILL USINGS
         SPACE 1
**--> DSECT: XDECIB     CONTROL BLOCK CREATED BY XDECI MACRO. . . . . .
*.       AN XDECIB IS CREATED BY EACH CALL TO THE XDECI MACRO, AND    .
*.       CONTAINS THE @ XXXXDECI, SAVEWORDS FOR REGS R14,R15,R0, AND  .
*.       WORDS FOR RETURN VALUES FOR REGISTER R1, AND THE ARGUMENT REG.
*.       THIS DSECT IS USED ONLY IN MODULE XXXXDECI.                  .
*.       GENERATION: XDECI                                            .
*.       NAMES: XDECI---                                              .
*.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XDECIB   DSECT
         DS    V(XXXXDECI)         ADCON TO GET HERE
         DS    3F                  REGS 14,15,0 SAVED HERE
XDECIR1  DS    A                   RETURN VALUE FOR REG 1 SCAN POINTER
XDECIRV  DS    F                   VALUE CONVERTED AND RETURNED HERE
XDECIRET LM    14,1,4(14)          RETURN POINT @
         EQUREGS
$        EQU   0                   FOR ANY FIELD MODIFIED DURING EXEC
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXDECO
         TITLE 'XXXXDECO - EXTENDED DECIMAL OUTPUT CONVERSION PROGRAM'
**--> CSECT: XXXXDECO   EXTENDED DECIMAL OUTPUT CONVERSION MODULE . . .
*.       XXXXDECO IS CALLED BY MACRO XDECO TO CONVERT A REGISTER      .
*.       VALUE TO EDITED DECIMAL, IN A 12-BYTE AREA, WITH SIGN.       .
*.       ENTRY CONDITIONS                                             .
*.  R14= ADDRESS OF XDECOB DSECT CREATED BY XDECO                     .
*.  R15= ENTRY POINT ADDRESS (=V(XXXDECO)                             .
*.       EXIT CONDITIONS                                              .
*.  EDITED 12-BYTE RESULT OF REGISTER ARGUMENT STORED AT ADDRESS ARG. .
*.       USES DSECTS: XDECOB                                          .
*.       NAMES: XXDO----                                              .
*.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XXXXDECO CSECT
         USING *,R15               NOTE ENTRY PT USING FOR BASE
         USING XDECOB,R14          NOTE XDECO CONTROL BLOCK
         STM   R1,R2,XXDOSAVE      SAVE WORK REGISTERS
         LR    R2,R0               MOVE @ AREA WHERE CAN BE USED
         L     R0,XDECOV           GET VALUE TO BE CONVERTED
         CVD   R0,XXDODWOR         CONVERT THE VALUE
         MVC   0(12,R2),XXDODECP   MOVE EDIT PATTERN IN
         LA    R1,11(R2)           SET UP FOR NEG NUMBER FOR EDMK
         EDMK  0(12,R2),XXDODWOR+2 EDIT THE VALUE OVER
         BNM   XXDORETN            SKIP INSERTION OF - IF >=0
         BCTR  R1,0                MOVE @ POINTER BACK 1
         MVI   0(R1),C'-'          INSERT - IN FRONT OF 1ST DIGIT
XXDORETN LM    R1,R2,XXDOSAVE      RESTORE WORKING REGS
         SPM   R14                 RESTORE ORIGINAL COND CODE
         B     XDECORET            RETURN TO CALLING XDECO
         SPACE 1
XXDODECP DC    X'402020202020202020202120'  EDIT PATTERN
XXDODWOR DS    D                   WORKAREA
XXDOSAVE DS    2F                  SAVE AREA FOR REGS 1-2
         DROP  R14,R15             KILL USINGS
         SPACE 1
**--> DSECT: XDECOB     CONTROL BLOCK CREATED BY XDECO. . . . . . . . .
*.       AN XDECOB  IS CREATED FOR EACH XDECO CALL, AND CONTAINS THE  .
*.       @ XXXXDECO MODULE, SAVE WORDS FOR REGS R14,R15,R0, AND   A   .
*.       WORD FOR THE VALUE TO BE CONVERTED TO DECIMAL.               .
*.       XDECOB IS USED ONLY IN CSECT XXXXDECO.                       .
*.       GENERATION: XDECO                                            .
*.       NAMES: XDECO---                                              .
*.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XDECOB   DSECT
         DS    V(XXXXDECO)         ADCON TO GET HERE
         DS    3F                  SAVE AREA FOR REGS 14,15,0
XDECOV   DS    F                   VALUE FOR CONVERSION
XDECORET LM    14,0,4(14)          RETURN POINT @
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXGET
XXXXGET XGPGEN
         EQUREGS
         END
./ ADD LEVEL=41,SOURCE=0,NAME=XXXXHEXI
         TITLE 'XXXXHEXI-MODULE CALLED BY XHEXI'
**-->CSECT: XXXXHEXI EXTENDED HEXADECIMAL INPUT CONVERSION MODULE . . .
*.       XXXXHEXI IS CALLED BY MACRO XHEXI TO SCAN THE INPUT STRING   .
*.   AND CONVERT IT TO HEXADECIMAL INPUT.                             .
*.       ENTRY CONDITIONS                                             .
*. R14= ADDRESS OF A STORAGE AREA WITH R14-R1 STORED                  .
*. R15= ENTRY POINT ADDRESS (V(XXXXHEXI))                             .
*. R0= ADDRESS OF STRING TO BE SCANNED.                               .
*.       EXIT CONDITIONS:                                             .
*.  VALUE OF CONVERTED STRING IN STORAGE  AREA POINTED TO BY R14,     .
*. STORED IN 16 PASSED R14 OR IN XHEXINUM.                            .
*. R1= ENDING ADDRESS OF STRING, I.E. FIRST NON-HEXADECIMAL DIGIT.    .
*.  CC SET=3 IF ERROR                                                 .
*.       USES DSECT XHEXIB.                                           .
*.       NAMES: XXHI____                                              .
*. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  .
         SPACE 1
XXXXHEXI CSECT
         PRINT NOGEN
         USING *,15                SET UP BASE REGISTER
         USING XHEXIB,R14         DSECT OVERLAP
         STM   R14,R6,XXHEXISA     STORE APPROPRIATE REGISTERS
         LR    R1,R0              START SCAN OF STRING
         LA    R3,1               ODD VALUE USED IN BXH INSTR
XXHILP   CLI   0(R1),C' '         SEARCH FOR FIRST NON-BLANK
         BNE   XXHIBGN            BRANCH WHEN FOUND TO START TRT
         BXH   R1,R3,XXHILP       KEEP GOING UNTIL FIND NON-BLANK
XXHIBGN  LR    R3,R1              FIRST BYTE OF STRING IN R3 AND R4
         LR    R4,R3
         LR    R6,R1               BEGINNING OF STRING
         LA    R1,8(R1)            R1 NOW HAS MAXIMUM ADDRESS IN IT
*  IF TRT DOESN'T STOP BEFORE 8TH TIME, R1 WON'T CHANGE=> NEED END
         TRT   0(8,R6),XXHITAB2    FIND LAST BYTE-8 MAXIMUM
         LR    R6,R1               SAVE ENDING ADDRESS
         SR    R1,R3              FIND  NO OF CHARACTERS
         BZ    XXHIERR            IF LENGTH ZERO SET CC TO 3
         LR    R3,R1
         MVC   XXHIDOUB(8),=12C'0'  MOVE ZEROS IN AREA TO BE CONVERTED
         LA    R5,8
         SR    R5,R3               # OF PADDED BLANKS
         LA    R5,XXHIDOUB(R5)    R5 NOW ADDRESS OF AREA CONVERTED STRI
         BCTR  R3,0
         EX    R3,XXHIMOVE        EX USED TO MOVE CONVERTED SRTING IN
         TR    XXHIDOUB(8),XXHITAB3 CONVERT C1-C6 TO FA-FF
         PACK  XXHIOUT(5),XXHIDOUB(9)  DO FUNNY PACK TO MAKE RIGHT LETS
         L     R0,XXHIOUT         CONVERTED NUMBER IN R0
         ST    R0,XHEXINUM        STOREE CONVERTED NUMBER
         B     XXHIARND           BRANCH AROUND CONSTANTS
         LTORG
XXHIMOVE MVC   0(0,R5),0(R4)      MOVE FOR STRING TO BE CONVRTED
XXHIDOUB DS    D,C                STORAGE AREA
XXHIOUT  DS    F,C                STORAGE AREA
         SPACE 1
** TAB2 STOPS ON ANYTHING BUT VALID HEX DIGITS
XXHITAB2 DC    256X'01'
         ORG   XXHITAB2+C'A'      STOPS ON ANYTHING BUT A-F
         DC    6X'00'
         ORG   XXHITAB2+C'0'      STOP NOT ON 0-9
         DC    10X'00'
         ORG
         SPACE 1
*  TAB3 USED IN TR CONVERTS FA-FF FROM CU-C6
XXHITAB3 EQU   *-C'A'             CONVERT FA-FF FROM C1-C6
         DC     X'FAFBFCFDFEFF'
         ORG   XXHITAB3+C'0'
         DC    X'F0F1F2F3F4F5F6F7F8F9'
         ORG
XXHIERR  TM    *+1,1              SET CONDITION CODE
XXHIARND LM    14,15,XXHEXISA      RESTORE REGISTERS
         LR    R1,R6              ENDING ADRESS IN SRTING
         LM    R2,R6,XXHEXISA+16
         B     XHEXIRET           RETURN TO CALLING PROG
XXHEXISA DS    9F                  SAVE AREA FOR REGISTERS
         DROP  R14,R15            CLEAN UP USINGS
         SPACE 5
*.--> DSECT: XHEXIB   CONTROL BLOCK CREATE BY XHEXI . . . . . . . . . .
*.       AN XHEXIB IS CREATED FOR XHEXI CALL, AND CONTAINS THE        .
*.@ XXXXHEXI MODULE, SAVE WORDS R14,R15, R0, AND A WORD VALUE THAT HAS.
*. BEEN CONVERTED                                                     .
*.       XHEXI IS USED ONLY IN CSECT XXXXHEXI                         .
*.       GENERATION XHEXI                                             .
*.       NAMES XHEXI___                                               .
*. . .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XHEXIB   DSECT
         DS    V(XXXXHEXI)        STORAGE OF VCON
         DS    3F                 STORAGE FOR REGISTERS
XHEXINUM DS    F                  STORAGE FOR CONVERTED NUMBER
XHEXIRET LM    R14,0,4(R14)       RESTORE REGISTERS
         EQUREGS
         END
./ ADD LEVEL=41,SOURCE=0,NAME=XXXXHEXO
         TITLE 'XXXXHEXO-MODULE CALLED BY XHEXO'
*.-->CSECT: XXXXHEXO EXTENDED HEXADECIMAL OUTPUT CONVERSION MODULE . ..
*.       XXXXHEXO IS CALLED BY MACRO XHEXO TO CONVERT A REGISTER VALUE.
*.  TO EDITED HEXADECIMAL IN AN 8-BYTE AREA.                          .
*.       ENTRY CONDITIONS:                                            .
*.  R14= ADDRESS OF SAVEAREA FOR CALLING MACRO                        .
*. R15= ENTRY POINT ADDRESS.                                          .
*.  R0 ADDRESS OF AREA WHERE CONVERTE STRING GOES                     .
*. REGISTER VALUE IN XHEXOREG                                         .
*.       EXIT CONDITIONS:                                             .
*.  8-BYTE CONVERTED NUMBER OF REGISTER ARGUMENT STORED AT ADDRESS    .
*.  ARGUMENT                                                          .
*.       USES DSECT XHEXOB.                                           .
*.    NAMES:XXHO----                                                  .
*. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  .
         SPACE 1
XXXXHEXO CSECT
         USING *,15                BASE REGISTET
         USING XHEXOB,R14         DSECT OVERLAP
         STM   R14,R1,XXHEXOSA     STORE REGISTERS
         L     R1,XHEXOREG        REGISTER TO BE CONVERTED
         ST    R1,XXHOAREA         STORE NUMBER TO BE CONVERTED
         LR    R1,R0             VALUE IN 1 OF ADDRESS TO BE MOVED TO
         L     R14,=A(XXHOTAB3-C'0')   FOR CONVERSION OF 0-9 TO F0-F9
         UNPK  XXHODOUB(9),XXHOAREA(5)  CONVERT NUMBER
         TR    XXHODOUB,0(R14)    MAKE PRINTABLE
         MVC   0(8,R1),XXHODOUB   MOVE NUMBER INTO RIGHT AREA
XXHOBACK LM    R14,R1,XXHEXOSA     RESTORE REGISTERS
         B     XHEXORET           RETURN TO CALLING PROG
XXHOTAB3 DC    C'0123456789ABCDEF'
XXHOAREA DS    F,C                STORAGE AREA
XXHODOUB DS    D,C                STORAGE
XXHEXOSA DS    4F
         LTORG
         DROP  R14,R15            CLEAN UP USINGS
         SPACE 5
*.--> DSECT: XHEXOB   CONTROL BLOCK CREATED BY XHEXO. . . . . . . . . .
*.       AN XHEXOB IS CREATED FOR XHEXO CALL, AND CONTAINS THE @      .
*.  XXXXHEXO MODULE, SAVE WORDS FOR R14-R2 AND THE PLACE TO RETURN    .
*.       XHEXOB IS USED ONLY IN CSECT XXXXHEXO.                       .
*.       GENERATION: XXXXHEXO                                         .
*.       NAMES: XHEXO----                                             .
*. . .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XHEXOB   DSECT
         DS    V(XXXXHEXO)        STORAGE OF VCON
         DS    3F
XHEXOREG DS    F              WHERE REGISTER STORED
XHEXORET LM    R14,R2,4(R14)      RESTORE REGISTERS
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXOPEN
         TITLE 'XOPENBLK DSECT, EQUS FOR XXXXOPEN ROUTINE'
         EQUREGS
**--> DSECT: XOPENBLK   USED TO CONTROL XXXXOPEN MODULE . . . . . . . .
*.             CALLING XIO MODULE PASSES @ IN R1 TO XXXXOPEN TO DO THE.
*.       GENERALIZED OPEN ROUTINE WITH MULTIPLE DDNAMES, ETC.         .
*.       GENERATION: 1 CALL TO XOPENBLK MACRO INSTRUCTION.            .
*.       NAMES: XOP-----                                              .
*.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XOPENBLK DSECT
XOPABEND EQU   B'00000001'         (XOPFLAG1) - ABEND IF CAN'T OPEN
XOPWARN  EQU   B'00000010'         (XOPFLAG1) - WARN IF 1ST DD NO GO
         SPACE 1
XOPDCBAD DS    X,AL3               OPEN/CLOSE ELEMENT (BYTE,ADDR DCB)
*              NEXT FOUR ITEMS ARE USED BY DCB EXIT TO FILL DCB, IF
*        IT HAS NOT ALREADY BEEN DONE DURING OPEN PROCESS.
XOPLRECL DS    H                   LRECL DEFAULT
XOPBLKSI DS    H                   BLKSIZE DEFAULT
XOPBUFNO DS    H                   BUFNO DEFAULT
XOPRECFM DS    B                   RECFM DEFAULT (F,FA,FB,FBA ALLOWED)
         SPACE 1
XOPFLAG1 DS    B                   FLAGS FOR CONTROL
XOPXNAME DS    CL8                 NAME OF ROUTINE CALLING, FOR MSGS
XOPDDLIM DS    H                   8 * (# DDNAMES - 1) :: BXLE LIMIT
XOPDDNAM DS    CL8                 BEGINNING OF DDNAME LIST ALLOWED
         SPACE 2
*              ADDITIONAL LOCAL REGISTER EQUATES.
RXOP     EQU   R5                  @ XOPENBLK - OPEN CONTROL BLOCK
RDCB     EQU   R6                  @ DCB TO BE OPENED (FROM XOPENBLK)
RDD1     EQU   R7                  @ 1ST DDNAME ENTRY IN TIOT
RBASE    EQU   R8                  BASE REGISTER
         TITLE 'XXXXOPEN - SPECIAL OPEN ROUTINE FOR XXXX IO SUPPORT'
**--> CSECT: XXXXOPEN   CALLED TO DO SPECIAL OPEN BY XIO MODULES  . . .
*.             THIS IS CALLED BY ROUTINES LIKE XXXXPRNT, XXXXSNAP, ETC.
*.       TO PERFROM THEIR OPEN'S FOR THEM.  ALL INPUT INFOMRATION IS  .
*.       CONTAINED IN THE XOPENBLK  AREA WHICH IS PASSED TO XXXXOPEN. .
*.             THE ROUTINE PERFORMS THE FOLLOWING ACTIONS:            .
*.       1. ATTEMPTS AN OPEN FOR EACH DDNAME (IN XOPENBLK) WHICH IT   .
*.       CAN FIND IN THE TIOT, UNTIL A SUCCESSFUL OPEN IS DONE. IT    .
*.       NEVER USES A DDNAME UNLESS IT IS IN THE TIOT.                .
*.       2. DURING A SUCCESSFUL OPEN, THE DCB EXIT IS TAKEN, AND SOME .
*.       PARTS OF THE DCB CAN BE FILLED IN THEN (LRECL, BLKSIZE,      .
*.       RECFM, BUFNO).  THIS ALLOWS VALUES TO BE FILLED IN FROM JCL. .
*.       3. IF NO OPEN COULD BE DONE, IT ISSUES A MESSAGE AND ALSO    .
*.       MAY  ABEND IF DESIRED.                                       .
*.       4. IF DESIRED, A WARNING MAY BE ISSUED IF THE FIRST CHOICE   .
*.       DDNAME COULD NOT BE USED.                                    .
*.       ENTRY CONDITIONS                                             .
*.  R13,R14,R15 : NORMAL OS/360 CONVENTIONS.                          .
*.  R1 = ADDRESS OF XOPENBLK, WITH ALL VALUES FILLED IN.              .
*.       EXIT CONDITIONS                                              .
*.       NO REGISTERS ARE CHANGED, OPEN HAS BEEN PERFORMED IF POSSIBLE.
*.       NAMES: XXOP----                                              .
*.       USES DSECTS: IHADCB,XOPENBLK                                 .
*.       USES MACROS: ABEND,DCBD,EQUREGS,OPEN,WTO                     .
*.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
XXXXOPEN CSECT
         USING *,R15               NOTE ENTRY POINT USING
         STM   R14,RBASE,XXOPSAVE  SAVE ALL REGS USED
         BALR  RBASE,0             SET UP OWN VASE REG, 15 NOT SAFE
         USING *,RBASE             NOTE THE USING
*              1-TIME HOUSEKEEPING INITIALIZATION CODE.
         LR    RXOP,R1             MOVE XOPENBLK PTR  WHERE SAFE
         USING XOPENBLK,RXOP       NOTE THE PTR
         L     RDCB,XOPDCBAD       GET @ DCB ITSELF
         USING IHADCB,RDCB         NOTE THE POINTER THERE
         SPACE 1
*              SAVE ORIGINAL VALUES FROM DCB.
         MVC   XXOPLREC,DCBLRECL   LOGICAL RECORD LENGTH
         MVC   XXOPBLKS,DCBBLKSI   BLOCK SIZE
         MVC   XXOPBUFN,DCBBUFNO   BUFFER NUMBER
         MVC   XXOPRECF,DCBRECFM   RECORD FORMAT
         SPACE 1
         MVC   DCBEXLST+1,=AL3(XXODEXLS)  @ OF OUR EXIT LIST TO USE
         SPACE 1
*              CHASE POINTERS TO @ OF 1ST DDNAME IN TIOT.
         L     R1,16               @ CVT
         L     R1,0(,R1)           @ TCB PTR
         L     R1,0(,R1)           @ TCB
         L     R1,12(,R1)          @ TIOT
         LA    RDD1,24(,R1)        8 1ST DD ENTRY IN THE TIOT
         SPACE 1
*              INIT FOR LOOP TO SEARCH TIOT FOR EACH DDNAME ALLOWED,
*              THEN ATTEMPT OPEN ON EACH FOUND UNTIL OPEN WORKS.
         LA    R2,8                BXLE INCREMENT = LENGTH OF DDNAME
         LA    R3,XOPDDNAM         @ 1ST DDNAME IN XOPENBLK LIST
         LR    R4,R3               MOVE OVER, R4 WILL BE INDEX REG
         AH    R3,XOPDDLIM         ADD OFFSET = LIMIT FOR COMING BXLE
         SPACE 1
*              OUTER LOOP: CHECK EACH DDNAME IN XOPENBLK IN ORDER.
XXOPZERO SR    R0,R0               CLEAR FOR INSERTIONS
         LR    R1,RDD1             INIT TO @ OF 1ST ONE IN TABLE
         SPACE 1
*              INNER LOOP: LOOK FOR DDNAME IN TIOT, THEN TRY OPEN.
XXOPDDSR IC    R0,0(,R1)           GET LENGTH/CODE BYTE
         LTR   R0,R0               WAS LENGTH = 0 (NO MORE DD ENTRIES)
         BZ    XXOPBXLE            YES, SO GO FOR NEXT DD IN XOPENBLK
         CLC   4(8,R1),0(R4)       WAS DDNAME IN TIOT = ONE IN XOPENBLK
         BE    *+8                 YES, SKIP OUT OF TIOT SEARCH
         BXH   R1,R0,XXOPDDSR      NO, INCREMENT TIOT PTR, BRNCH ALWAYS
         SPACE 1
*              DDNAME FOUND IN TIOT - MAKE SURE VALUES IN DCB ARE
*              CORRECT, ATTEMPT OPEN, FILL IN VALUES NEEDED.
         MVC   DCBDDNAM,0(R4)      MOVE IN DDNAME WE'VE FOUND
         MVC   DCBLRECL,XXOPLREC   MAKE SURE LRECL OK
         MVC   DCBBLKSI,XXOPBLKS   MAKE SURE BLKSIZE OK
         MVC   DCBBUFNO,XXOPBUFN   MAKE SURE BUFNO OK
         MVC   DCBRECFM,XXOPRECF   MAKE SURE RECFM OK
         SPACE 1
         OPEN  MF=(E,XOPDCBAD)     DO REMOTE OPEN
         TM    DCBOFLGS,X'10'      DID OPEN GO
         BO    XXOPNOKA            YES, WE'RE DONE - QUIT
XXOPBXLE BXLE  R4,R2,XXOPZERO      DIDN'T GO TRY AGAIN
         SPACE 1
*              NO GOOD DDNAME WAS FOUND AND OPENED - MESSAGE, ABEND.
         MVC   XXOP300B(8),XOPXNAME         MOVE IN NAME OF CALLING RT
         WTO   MF=(E,XXOP300A)     DO WRITE TO PROGRAMMER
         SPACE 1
         TM    XOPFLAG1,XOPABEND   DOES HE REALLY WANT ABEND
         BZ    XXOPRETN            NO, DONT DO IT
         ABEND 300,DUMP            YES, QUIT NOW
         SPACE 2
XXOPNOKA DS    0H                  COME HERE IF OPEN WORKED
         TM    XOPFLAG1,XOPWARN    DID HE WANT WARNING IF NOT 1ST COIC
         BZ    XXOPRETN            NO, SO DON'T BOTHER CHECKING
         CLC   XOPDDNAM,0(R4)      WAS THE FIRST DDNAME USED
         BE    XXOPRETN            YES, QUIT
         SPACE 1
*              CALLER DESIRED WARNING IF 1ST DDNAME NOT USED - GIVE IT.
         MVC   XXOP400B(8),XOPXNAME         MOVE IN ROUTINE NAME
         MVC   XXOP400C(8),0(R4)   MOVE IN ACTUAL DDNAME USED
         MVC   XXOP400D(8),XOPDDNAM    MOVE IN FIRST CHOICE DDNAME
         WTO   MF=(E,XXOP400A)     WRITE TO PROGRAMMER
         SPACE 1
XXOPRETN EQU   *                   EXIT TO CALLER
         LM    R14,RBASE,XXOPSAVE  RESTORE ALL REGS
         BR    R14                 RETURN
         SPACE 2
**--> EXIT :   DCB EXIT - WHEN EXIT IS CALLED BY SUPERVISOR, THIS CODE*
*        FILLS IN ANY FIELDS WHICH HAVE NOT BEEN FILLED IN ALREADY,   *
*        I.E., FROM ORIGINAL DCB, DD CARD, OR DATASET LABEL.          *
*        NOTE: THIS CODE DEPENDS ON REGS 2-12 BEING UNCHANGED         *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
XXOPEXIT EQU   *                   EXIT ENTRY POINT
         DROP  RDCB
         USING IHADCB,R1
         USING *,R15               NOTE LOCAL USING
         SR    R2,R2               USE FOR COMPARISON
         CH    R2,DCBLRECL         LRECL FOUND YET
         BNE   *+10                YES, SKIP
         MVC   DCBLRECL,XOPLRECL   NO, MOVE DEFAULT ONE IN
         SPACE 1
         CH    R2,DCBBLKSI         BLKSIZE FILLED IN YET
         BNE   *+10                YES, SKIP
         MVC   DCBBLKSI,XOPBLKSI   NO, MOVE DEFAULT IN
         SPACE 1
         CH    R2,DCBBUFNO         BUFNO FILLED IN YET
         BNE   *+10                YES, SKIP
         MVC   DCBBUFNO,XOPBUFNO   NO, MOVE DEFAULT IN
         SPACE 1
         CLI   DCBRECFM,B'00000000'         RECFM SPECIFIED YET
         BNE   *+10                YES, SKIP
         MVC   DCBRECFM,XOPRECFM   NO, MOVE DEFAULT VALUE IN
         BR    R14                 RETURN TO SUPERVISOR
         DROP  R15                 ZAP TEMPORARY USING
         SPACE 2
*              CONSTANTS AND WORKAREAS
XXODEXLS DC    0F'0',X'85',AL3(XXOPEXIT)     EXIT LIST FOR DCB EXIT
         SPACE 1
XXOP300A WTO   ' XXXXXXXX ABEND 300 - COULD NOT OPEN FOR ANY DDNAME:   #
               DD CARD MISSING OR MISSPELLED',MF=L,ROUTCDE=11 (WTP)
XXOP300B EQU   XXOP300A+5          OFFSET TO XXXXXXXX (XMODULE NAME)
         SPACE 1
XXOP400A WTO   ' XXXXXXXX WARNING 400 - DDNAME: YYYYYYYY USED, RATHER  #
               THAN PREFERRED: ZZZZZZZZ',MF=L,ROUTCDE=11
XXOP400B EQU   XXOP400A+5          OFFSET TO XXXXXXXX (XMODULE NAME)
XXOP400C EQU   XXOP400A+36         OFFSET TO YYYYYYYY (DDNAME USED)
XXOP400D EQU   XXOP400A+75         OFFSET TO ZZZZZZZZ (DDNAME PREFERED)
XXOPSAVE DS    (RBASE+3)F         RESERVE SPACE FOR R14,R15,R0,R1-RBASE
         SPACE 1
*              NEXT 4 AREAS USED TO SAVE ORIGINAL VALUES IN DCB SO
*              THAT EVERY OPEN BEGINS WITH SAME ONES, IF ANY FAIL.
XXOPLREC DS    H                   LRECL
XXOPBLKS DS    H                   BLKSIZE
XXOPBUFN DS    H                   BUFNO
XXOPRECF DS    B                   RECFM
         LTORG
         DROP  RXOP,RBASE          ZAP ALL USINGS
         EJECT
         DCBD  DSORG=QS            GENERATE DSECT IHADCB
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXPNCH
XXXXPNCH XIOGN DDNAME=(XPNCH,FT07F001),RECFM=F
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXPRNT
XXXXPRNT XIOGN LRECL=133,BLKSIZE=133,RECFM=FA,DDNAME=(XPRNT,FT06F001)
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXPUT
XXXXPUT XGPGEN DIREC=P
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXREAD
XXXXREAD XIOGN DDNAME=(XREAD,INPUT,FT05F001),XOP=INPUT,RECFM=F
         EQUREGS
         END
./ ADD LEVEL=40,SOURCE=0,NAME=XXXXSNAP
         TITLE 'XXXXSNAP - I/O CSECT USED BY XSNAP - VERSION 5.0'
XXSNAPC  DSECT
XXSGPRG  EQU   B'00000001'         (XXSFLAGS)=> PRINT GP REGS
XXSFLRG  EQU   B'00000010'         (XXSFLAGS)=> PRINT FL REGS
XXSRGSAV DS    16F                 REGISTER AREA, REGS SAVED BY XSNAP
XXSFLAGS DS    B                   OPTION BYTE FLAG
         DS    AL1                 **** UNUSED AS OF VERSION 4.0***
XXSLABLN DS    AL1                 LENGTH OF THE LABEL FIELD
XXSNMSTR DS    AL1                 NUMBER OF @ PAIRS IN STORAGE= LIST
         DS    V(XXXXSNAP)         ADCON FOR CALL TO XXXXSNAP ROUTINE
XXSADSTR DS    0A                  STORAGE = ADDRESS LIST(OPTIONAL)
         SPACE 2
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                       JOHN R. MASHEY - MAY 1969     *
*                                       VERSION 4.0 - FEBRUARY 1970   *
*                                                                     *
*                                  VERSION 5.0 - NOVEMBER 1972 CALLS  *
*                                  XXXXOPEN CSECT.  RICHARD FOWLER    *
*                                                                     *
*                                       IBM 360/67 ASSEMBLER 'G'      *
*                                       PENNSYLVANIA STATE UNIVERSITY *
*        ABSOLUTE REGISTER EQUATES AND USAGE                          *
R0       EQU   0                   WORK REGISTER                      *
R1       EQU   1                   USED AS WORK REGISTER              *
R2       EQU   2                   USED TO HOLD 1ST ADDRESS OF PAIR   *
R3       EQU   3                   USED TO HOLD SECOND ADDRESS OF PAIR*
R4       EQU   4                   USED AS INCREMENT FOR BXLE'S       *
R5       EQU   5                   LIMIT ADDRESS IN VARIOUS BXLE'S    *
R6       EQU   6                   WILL CONTAIN CVTMZ00(HIGHEST ADDR) *
R7       EQU   7                   OLD ADDRESS IN SAME LINE CHECK     *
R8       EQU   8                   INTERNAL LINKAGE REGISTER          *
R9       EQU   9                   ADDRESS OF CURRENT ADDRESS PAIR    *
R10      EQU   10                  POINTS TO XSNAP LABEL,REGISTER AREA*
R11      EQU   11                  UNUSED                             *
R12      EQU   12                  # STORAGE= ADDRESS PAIRS TO DO     *
R13      EQU   13                  BASE REGISTER/@ DUMMY SAVE AREA    *
R14      EQU   14                  RETURN ADDR,POINTER TO LABEL LENGTH*
R15      EQU   15                  ENTRY POINT REGISTER               *
         EQUREGS L=F,DO=(0,6,2)    SET UP FLOATING EQUS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        XSNAP CONTROL BLOCK AND POINTERS ON ENTRY TO XXXXSNAP.       *
*        FIELD     LENGTH(BYTES)   DESCRIPTION/PURPOSE                *
*        LABEL      LABLN          LABEL=, PADDED TO FULLWORD WITH ' '*
* R10===>RGSAV      64             16 FULLWORDS, WHERE REGS WERE SAVED*
*        FLAGS      1              BYTE FOR OPTION BITS               *
*              BIT 6 = 1 ==>       PRINT FP REGISTERS. IF =0, DO NOT  *
*              BIT 7 = 1 ==>       PRINT GP REGISTERS. IF =0, DO NOT  *
*        UNUSED     1              FOR FUTURE USE, NOT USED IN V.4.0  *
*        LABLN      1              LENGTH OF THE LABEL FIELD          *
*        NMSTR      1              # 8-BYTE @ PAIRS IN STORAGE= LIST  *
*        ADCON      4              V(XXXXSNAP) FOR CALL               *
*        ADSTR      NMSTR*8        STORAGE= @ LIST, IF PRESENT        *
*        INSTRUCTS  10       3 INSTRUCTIONS - LA, L, BALR             *
* R14===>LM    0,15,0(10)          RETURN POINT, RELOADS REGISTERS    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
XXXXSNAP CSECT
$CHN     EQU   0                   FOR ANY FIELD CHANGED DURING EXEC
         ENTRY XXSNDCB             SO PEOPLE CAN CHANGE,IF THEY WISH
         USING XXXXSNAP,R15        NOTE TEMPORARY ENTRY USING
         USING XXSNAPC,R10         NOTE POINTER TO BLOCK
         CNOP  0,4                 MAKE SURE ALIGNED ON FULLWORD
         BAL   R13,*+76            SET UP BASE AND SAVE AREA @
         USING *,R13               NOTE USING FOR BASE/SAVE AREA
XXSSAVE  DS    18F                 FAKE SAVE AREA FOR OS TO SAVE INTO
         ORG   XXSSAVE             ORG BACK
XXDWORK  DS    4D                  OVERLAP FLT WORK AREAS INTO FAKE SAV
         ORG
         DROP  R15                 CLEAR TEMPORARY USING
         ST    R14,XXSAVE14        SAVE RETURN ADDRESS,CC PROG MAKS
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        CALL CSECT XXXXOPEN TO OPEN THE DCB THE FIRST TIME CALLED,CHNG
*   NOP TO A BRANCH SO THAT IT WILL ONLY BE OPENED ONCE,AND MAKE CHECK*
*   TO ASSURE DCB WAS OPENED SUCCESSFULLY,ABENDING IF NOT.            *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         BC    $CHN,XXOPENOK       **CHANGED TO BRANCH BY NEXT INST****
         MVI   *-3,X'F0'           **INSTRUCTION. THUS DO ONLY 1 OPEN *
         LA    1,XXSNOPBK          GET ADDRESS OF CONTROL BLOCK
         L     15,XXSNOPAD         GET ADDRESS OF SUPER OPEN CSECT
         BALR  14,15               GO THERE, ONLY RETURNS IF FILE OPEND
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        GET ADDRESS OF LABEL FROM FIRST POSITION IN ADDRESS LIST,    *
*   AND USING REGISTER 10(THE ADDRESS OF THE REGISTER SAVE AREA)      *
*   FIND THE LENGTH OF THE LABEL AND PRINT THE LABEL& HEADER LINE.    *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
XXOPENOK SR    R2,R2               CLEAR FOR INSERTION
         IC    R2,XXSLABLN         GET LENGTH OF LABEL FIELD
         LR    R1,R10              GET DUPLICATE OF XXSNAPC PTR
         SR    R1,R2               SUBTRACT TO GET START @ FOR LABEL
         BCTR  R2,0                DECREMENT TO LENGTH-1 FOR MVC
         STC   R2,*+5              STORE INTO MVC
         MVC   XXLABEL+38($CHN),0(R1)       MOVE LABEL TO PRINT AREA
         ST    R1,XXWORK1          SAVE THIS @ FOR CONVERSION
         MVC   XXWORK1(1),XXSAVE14 MOVE CCMASK OVER FOR CONVERSION
         MVC   XXLABEL+1(XXSN1B),XXSNP1ST    MOVE HEADER,PATTERN,MSG
         ED    XXLABEL+L'XXSNP1ST+1(6),XXCOUNT         EDIT CALL NUMBER
         UNPK  XXLABEL+1+XXSN1B(9),XXWORK1(5)        CONVRT CCPM,LOCN
         TR    XXLABEL+1+XXSN1B(8),XXTAB1  FINISH HEX CONVERSION
         AP    XXCOUNT,=PL1'1'     INCREMENT NUMBER OF CALLS
         LA    R0,XXLABEL          SET UP ADDR FOR PRINT ROUTINE
         BAL   R8,XXPRINT          GET THE TITLE LINE PRINTED OUT
         MVC   XXLABEL+1(L'XXLABEL-1),XXBLANKS
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        CHECK TO SEE IF THE REGISTERS SHOULD BE PRINTED.             *
*        PRINT THE HEADING FOR THE REGISTER DUMP.  CONVERT AND PRINT  *
*   THE REGISTERS IN 2 LINES. CHECK TO SEE IF ONLY THE REGISTERS      *
*   WERE DESIRED. FINISH UP AND RETURN TO CALLING XSNAP IF SO.        *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
         TM    XXSFLAGS,XXSGPRG    DOES HE WANT GP REGS PRINTED
         BZ    XXCHKFP             NO, SO DONT PRINT THEM
         LR    R2,R10              DUPLICATE @ RGSAV OVER
XXGOREG  LA    R0,XXREGLAB         ADDRESS OF REGISTER LABEL
         BAL   R8,XXPRINT          PRINT THE REGISTER LABEL
         MVC   XXREGOUT(12),=CL12'0 REGS 0-7'          LABEL-1ST REGS
         BAL   R8,XXREGS1          CONVERT 1>T REGS BLOCK,PRINT LINE
         BAL   R8,XXPRINT          HAVE LINE PRINTED
         MVC   XXREGOUT(12),=CL12'  REGS 8-15'   2ND LINE LABEL
         BAL   R8,XXREGS2          GET 2ND GROUP CONVERTED,PRINTED
         BAL   R8,XXPRINT          HAVE LINE PRINTED
XXCHKFP  TM    XXSFLAGS,XXSFLRG    DOES HE WANT FLOATING PT REGS PRINTE
         BZ    XXCHKST             NO,SO GO CHECK FOR STORAGE=
         SPACE 1
*              FOLLOWING SECTION PRINTS FLOATING POINT REGISTERS      *
         MVC   XXREGOUT(12),=CL12'0 FLTR 0-6'         MOVE LABEL IN
         STD   F0,XXDWORK          SAVE REG F0
         STD   F2,XXDWORK+8        SAVE F2
         STD   F4,XXDWORK+16       SAVE F4
         STD   F6,XXDWORK+24       SAVE F6
         LA    R2,XXDWORK          SET UP @ WORKAREA FOR XXREGS1
         BAL   R8,XXREGS1          CALL GP REG CONVERTER
         MVC   XXREGOUT+24(12),XXREGOUT+28            PUT F0 TOGETHRE
         MVC   XXREGOUT+48(12),XXREGOUT+52           PUT F2 TOGETHER
         MVC   XXREGOUT+72(12),XXREGOUT+76           PUT F4 TOGETHER
         MVC   XXREGOUT+96(12),XXREGOUT+100          PUT F6 TOGETHER
         BAL   R8,XXPRINT          PRINT THE ASSEMBLED LINE
         MVC   XXREGOUT,XXBLANKS   REBLANK LINE LIKE ITS SUPPOSED TO BE
         SPACE 1
XXCHKST  SR    R12,R12             CLEAR FOR INSERT
         IC    R12,XXSNMSTR        GET # OF ADDRESS PAIRS
         LTR   R12,R12             ARE THERE ANY @ PAIRS
         BZ    XXEXIT1             NO STORAGE=, SO QUIT
         LA    R9,XXSADSTR         INIT R9 TO @ FIRST ADDRESS PAIR
         LA    R4,4                SET UP BXLE INDEX FOR REST OF PROG
*              THE FOLLOWING 2 LINES HELP US PREVENT 0C5'S            *
         L     R6,16               GET CVT POINTER
         L     R6,164(R6)          GET CVTMZ00-HIGHEST MACHINE @
         SH    R6,=H'32'           REDUCE SO WILL NOT 0C5
         SPACE 2
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        SECTIONS XXMEMA - XXMEME SERVE TO PROCESS 1 ADDRESS PAIR     *
*   FROM THE LIST OF ADDRESS PAIRS SPECIFYING STORAGE TO BE DUMPED.   *
*   AT XXMEMF,THE 2ND ADDRESS IS TESTED TO SEE IF IT IS THE LAST ONE  *
*   AND  THE DUMP COMPLETED IF SO. OTHERWISE,A BRANCH IS TAKEN BACK   *
*   TO XXMEMA TO PROCESS THE NEXT ADDRESS PAIR.                       *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
XXMEMA   LM    R2,R3,0(R9)         OBTAIN NEXT ADDRESS PAIR
         UNPK  XXCOREL,1(4,R9)     1ST STEP TO CONVERT LOWER ADDR
         UNPK  XXCOREH,5(4,R9)     UST STEP TO CONVERT HIGHER ADDRESS
         TR    XXCOREL(17),XXTAB1  TRANSLATE TO COMPLETE HEX CONVERT
         MVC   XXCOREL+6(4),=C' TO '         BLANK EXTRA BYTE&ADD TO
         MVI   XXCOREH+6,C' '      BLANK OUT EXTRA BYTE
         LA    R0,XXCORETL         SET UP ADDRESS OF CORE TITLE
         BAL   R8,XXPRINT          GET CORE HEAD PRINTED
         CR    R3,R6               MAKE SURE HIGH ADDR ISN'T TOO HIGN
         BNH   *+6                 SKIP OVER IF NOT TOO HIGH
         LR    R3,R6               @ WOULD 0C5-USE HIGHEST INSTEAD
         LA    R3,31(R3)           PREPARE TO ROUND 2ND ADDR UPWARD
         SRDL  R2,5                ROUND BOTH ADDRESSES
         SLL   R2,5                NOW HAVE 1ST ADDR IN R2,ROUNDED DOWN
         SLL   R3,5                NOW HAVE HIGH ADDR IN R3,ROUNDED UP
         CR    R2,R3               WAS USER IN ERROR& LOW ADDR>HIGH ADD
         BH    XXMEMF              ADDR ERROR-PRINT NOTHING,GO TO NEXT
         CR    R2,R6               MAKE SURE IF 1ST=2ND>MEMORY SIZE
         BH    XXMEMF              PRINT NOTHING IF SO
         SPACE 2
XXMEMB   EQU   *
         ST    R2,XXWORK1          STORE BEGINNING ADDR FOR CONVERT
         LR    R7,R2               SAVE BEGINNING ADDRESS FOR SAME CHK
         UNPK  XXCORADD+1(7),XXWORK1+1(4)    GET BEGINNING ADDRESS
         MVC   XXCORE3,0(R2)       MOVE 32 BYTES OVER FOR ALPHMERIC TR
         TR    XXCORE3,XXTAB2      PERFORM ALPHAMERIC CONVERSION
         LA    R1,XXCORE1          ADDRESS FOR 1ST BLOCK CONVERSION
         BAL   R8,XXMEMP1          GET 1ST BLOCK OF 4 WORDS CONVERTED
         LA    R1,XXCORE2          ADDRESS FOR 2ND BLOCK CONVERSION
         BAL   R8,XXMEMP1          GET 2ND BLOCK CONVERTED
         TR    XXCORADD+1(84),XXTAB1         FINISH HEX CONVERSION
         LA    R0,XXCORADD         ADDRESS OF CORE OUTPUT LINE
         BAL   R8,XXPRINT          GET 1 CORE LINE PRINTED
         SPACE 2
*        XXMEMC-XXMEME CHECK FOR DUPLICATE LINES. HAVING FOUND 1 OR   *
*   MORE DUPLICATE LINES,CORE IS SCANNED UNTIL A DIFFERENT LINE IS    *
*   FOUND,OR THE BLOCK FINISHED,AND THEN PRINTS SAME LINES MESSAGE.   *
         SPACE 2
XXMEMC   CR    R2,R3               R2 HAS BEEN INCREMENTED-ARE WE DONE
         BNL   XXMEMF              YES WE'RE DONE WITH THIS SECTION
         CLC   0(32,R7),0(R2)      COMPARE PREVIOUS SECTION WITH NEXT
         BNE   XXMEMB              NOT THE SAME-WILL HAVE TO PRINT LINE
         LA    R7,32(R7)           INCREMENT SO WILL HAVE RIGHT 3
         ST    R7,XXWORK1          SAVE 1ST LINE ADDRESS OF SAME AREAS
         UNPK  XXSAML,XXWORK1+1    1ST STEP TO CONVERT
XXMEMD   LA    R2,32(R2)           INCREMENT TO LOOK AT NEXT SECTION
         CR    R2,R3               ARE WE DONE
         BNL   XXMEME              YES,WE'RE DONE-SAME LINES MESSAGE
         CLC   0(32,R7),0(R2)      CHECK NEXT SECTION WITH 1ST OF SAMES
         BE    XXMEMD              SAME-KEEP LOOPING UNTIL DIFFERENT
XXMEME   LR    R1,R2               SAVE END ADDR WHERE CAN DESTROY
         SH    R1,=H'32'           DECRMENT SO LINE ADDR RIGHT
         ST    R1,XXWORK1          SAVE FOR HEX CONVERSION
         UNPK  XXSAMH,XXWORK1+1    CONVERT-FIRST STEP
         TR    XXSAML(13),XXTAB1   FINISH HEX CONVERSION OF SAME LINES
         MVI   XXSAML+6,C'-'       PLACE DASH BETWEEN ADDRESSES
         LA    R0,XXSAME           ADDRESS OF MESSAGE FOR OUTPUT
         BAL   R8,XXPRINT          PRINT THE SAME LINE MESSAGE
         CR    R2,R3               HAVE WE MEANWHILE FINISHED BLOCK
         BL    XXMEMB              NO-KEEP GOING UNTIL BLOCK DONE
XXMEMF   LA    R9,8(R9)            INCREM R9 TO @ NEXT @ PAIR
         BCT   R12,XXMEMA          GO BACK FOR NEXT BLOCK
         B     XXEXIT2             ALL STORAGE= DONE, GO RETURN
         SPACE 2
*        XXEXIT - PRINT ENDING LINE,THEN RETURN TO CALLING XSNAP.     *
         SPACE 2
XXEXIT1  TM    XXSFLAGS,XXSGPRG+XXSFLRG     WERE EITHER REGS PRINTED
         BZ    XXEXIT3             NO OPTIONS, JUST LEAVE SINGLE LINE
XXEXIT2  LA    R0,XXLABEL          SET UP FOR BLANK LINE
         BAL   R8,XXPRINT          CALL PRINTER SECTION
XXEXIT3  L     R14,XXSAVE14        RELOAD RETURN @, CC
         SPM   R14                 RESTORE CONDITION CODE
         BR    R14                 RETURN TO CALLING XSNAP
         SPACE 2
*        ***  INTERNAL SUBROUTINE AREA ***                            *
         SPACE 2
*              XXREGS1 CONVERTS AND PRINTS 1 LINE OF 8 REGISTERS      *
         SPACE 1
XXREGS1  LA    R4,12               INCREMENT FOR BXLE
         LA    R5,XXREGOUT+16+7*12 LIMIT ADDRESS FOR BXLE
XXREGS2  LA    R3,XXREGOUT+16      START POINT,INDEX FOR COMING BXLE
XXREGS3  UNPK  0(9,R3),0(5,R2)     CONVERT 1 REGISTER VALUE
         MVI   8(R3),C' '          BLANK OUT EXTRA BYTE USED IN CONVERT
         LA    R2,4(R2)            INCRMENT POINTER TO REGISTER
         BXLE  R3,R4,XXREGS3       LOOP-DO 1 LINE OF 8 REGISTER VALUES
         TR    XXREGOUT+16(92),XXTAB1        FOR REST OF HEX CONVERT
         LA    R0,XXREGOUT         ADDRESS OF OUTPUT LINE
         BR    R8                  RETURN TO CALLER
         SPACE 2
*              XXMEMP1 CONVERTS 1 BLOCK OF 16 BYTES TO HEX.           *
         SPACE 1
XXMEMP1  LA    R5,12(R2)           SET UP LIMIT FOR BXLE
XXMEMP2  UNPK  0(9,R1),0(5,R2)     UNPACK 1 WORD OF MEMORY
         MVI   8(R1),C' '          BLANK OUT EXTRA BYTE UNPACKED
         LA    R1,9(R1)            INCREMENT POINTER TO OUTPUT AREA
         BXLE  R2,R4,XXMEMP2       CONTINUE,CONVERTING 16 BYTES
         BR    R8                  RETURN TO CALLER
         SPACE 2
*              XXPRINT PRINTS 130 CHARACTERS FROM THE ADDRESS IN R0   *
         SPACE 1
XXPRINT  PUT   XXSNDCB,(0)         PRINT SPECIFIED LINE
         BR    R8                  RETURN TO CALLER
         SPACE 4
*        *** OUTPUT LINE,CONSTANT, AND TRANSLATE TABLE AREA ***       *
         SPACE 2
XXSAVE14 DS    A                   SAVE WORD FOR RETURN @, CC,MASK
XXWORK1  DC    F'0',X'04'          FIELD + REVERSED BLANK FOR HEX CONVT
XXCOUNT  DC    PL3'1'              COUNTER FOR NUMBER OF CALLS
XXSNDCB  DCB   DSORG=PS,MACRF=PM,RECFM=FA,LRECL=130,BLKSIZE=130,       #
         DDNAME=XSNAPOUT,BUFNO=1
XXSNP1ST DC    C'BEGIN XSNAP - CALL'         HEADER TITLE
         DC    X'402020202021'     EDIT PATTERN FOR CALL NUMBER
         DC    C' AT '             FOR XSNAP LOCATION MESSAGE
XXSN1B   EQU   *-XXSNP1ST          LENGTH OF HEADER,NUMBER,LOCATION
XXSAME   DC    CL12'   LINES'      BEGINNING OF SAME LINE MESSAGE
XXSAML   DC    CL7' '              LOWEST ADDRESS AREA
XXSAMH   DC    CL7' ',CL104'   SAME AS ABOVE'          REST OF MESSG
XXLABEL  DC    CL130'0'            PRIME LABEL PRINTING AREA
XXREGLAB DC    C'0GP REGISTERS     0/8         1/9         2/10        #
               3/11        4/12        5/13        6/14        7/15'
XXBLANKS DC    CL130' '            BLANK FIELD,ALSO BLANKS FOR XXREGLAB
XXREGOUT DC    CL130' '            REGISTER PRINTING AREA
XXTAB    DC    C'0123456789ABCDEF' TR TABLE FOR HEX CONVERT
XXTAB1   EQU   XXTAB-240           TO MAKE CONSTANT TR'S EASIER FOR HEX
XXTAB2   DC    64C'.',C' ',128C'.',C'ABCDEFGHI',7C'.',C'JKLMNOPQR'
         DC    8C'.',C'STUVWXYZ',6C'.',C'0123456789',6C'.'  ALPH TR TAB
XXCORADD DC    CL7' ',CL3' '       10 BYTES - LINE ADDRESS
XXCORE1  DC    4CL9' ',CL3' '      39 BYTES - SPACE FOR 4 WORDS
XXCORE2  DC    4CL9' ',CL3'  *'    39 BYTES - SPACE FOR 2ND BLOCK
XXCORE3  DC    CL32' ',CL10'*'     32 BYTES -ALPHAMERIC + PAD TO 130 CH
XXCORETL DC    CL30'-',CL30'CORE ADDRESSES SPECIFIED-'
XXCOREL  DS    CL7,CL3             SPACE FOR LOW ADDR, 'TO '
XXCOREH  DC    CL7' ',CL53' '      SPACE FOR 2ND ADDRESS
XXSNOPAD DC V(XXXXOPEN)
XXSNOPBK XOPENBLK XXSNDCB,XXXXSNAP,(XSNAPOUT,XPRNT,SYSPRINT,FT06F001), #
               LRECL=130,BLKSIZE=130,WARN=YES,RECFM=FA
         LTORG
         END
