./ ADD NAME=$$INDEX  0472-88350-06211-2359-00700-00000-00000-CBT472
 
                   .----------------------------.
                   |      CBT Tape File 183     |
                   |  Index of OSVS238J Member  |
                   '----------------------------'
 
                    http://gsf-soft.com/Freeware/
 
     ----------------- TSO and ISPF commands -------------------
 
     CLS       A 5-line "clear screen" command for TSO
 
     EXECPGM   TSO command - invoke a utility program or compiler
               with an alternate ddname list, as follows:
                  EXECPGM IEV90           +
                    PARM(NOOBJECT,NODECK,NOXREF,NORLD) +
                    SYSIN(TEMPWK2)        +
                    SYSUT1(TEMPWK1)       +
                    SYSLIB(ASMLIB)        +
                    SYSPRINT(ASMH$PRT)    +
                    STEPLIB(LINKLIST)
 
     INITKSDS  Initialize a KSDS after it's been DEFINE'd
 
               This program prevents OPEN from failing when
               opening with MACRF=(IN,OUT) or STRNO=2 a KSDS
               that has just been defined.  Can be invoked as
               a batch program, a TSO command, or a sub-routine.
 
     ------------------ Batch Programs --------------------------
 
     BLKSIZE2  Scan a PDS and print the size of each block and
               the track balance
 
               This is a batch program, for people interested
               in what a PDS looks like, from the inside.
 
     BYPASSNQ  Assembler program.  Scratch or Rename a Data Set
               without SYSDSN ENQ
 
               BYPASSNQ is a driver that allows you to run any
               utility program (such as IEHPROGM or IDCAMS) and
               bypass dsname ENQ that is normally performed by
               the DYNALLOC, SCRATCH and RENAME SVCs.
 
     CANMSGCL  Purge current job's held output after a few hours.
               Useful for those jobs that work OK 99% of the time
               (must be authorized)
 
               Example:
 
                 //MYJOB    JOB ACCT#,CLASS=A,MSGCLASS=X
                 //COPY1   EXEC PGM=IEBCOPY
                 //...      DD   ...
                 //CONDPURG EXEC PGM=CANMSGCL,PARM=2,
                 //              COND=(0,NE,COPY1)
 
                 The number in the parm is a number of hours.
                 If the 'COPY1' step ends at 10:28 with a
                 return code equal to zero, the 'CONDPURG' step
                 executes and issues the following command:
 
                   $TA,T=12.28,'$OJ01234,Q=X,CANCEL'
 
     CLEANUP   Assembler program.  Automatically searches the MVS
               catalog for non-GDG data sets that will be created
               in subsequent steps of your job and deletes them.
 
                     //MYJOB   JOB  acct#
                     //*
                     //CLEANUP EXEC PGM=CLEANUP
                     //*
                     //STEP1   EXEC PGM=MYPROG1
                     //OUTDD    DD  DSN=MY.FILE1,DISP=(,CATLG)
                     //STEP2   EXEC PGM=MYPROG2
                     //OUTDD    DD  DSN=MY.FILE2,DISP=(,CATLG)
 
               Can also be executed as the LAST step of a job to
               delete non-GDG data sets that were created during
               job execution.
 
     CMDJ      Send a JES2 command with the current job's number
               (must be authorized)
 
               Example:
 
                  //PURGEJOB EXEC PGM=CMDJES2,PARM=P
 
               If the current job's number is JOB01234,
               then the following command is issued:
 
                     $PJ  01234
 
     GSFLKED   Front-end to the linkage editor to recover
               from SD37 on SYSLMOD (must be authorized)
 
               This program may be invoked instead of the DFP
               linkage editor. It calls the linkage editor and,
               if an SD37 abend occurs, calls IEBCOPY to compress
               the SYSLMOD PDS, then calls the linkage editor
               again.
 
               Another feature of this program is to
               conditionally append a PDS member to SYSLIN,
               if that member exists.
 
     JOBRLSE   Release a job by number (must be authorized)
 
               This program issues a $A command to release a job
               previously submitted to JES2 with "TYPRUN=HOLD".
 
               To prevent "multiple jobs found" conditions,
               this program uses the sub-system interface
               to inquire about the status of homonym jobs.
               Then, it issues a $A command with the job
               number of the first job found in the input
               queue in held status (for example: $A J1234).
 
               Sample execution JCL:
 
                 //RLSENEXT EXEC PGM=JOBRLSE,PARM=PAYROL22
 
     NOTCTLG3  Prolog step to prevent "NOT CATLG 2" and verify
               VSAM data sets
 
               This program may be executed at the beginning
               of a batch job.  It scans the job's SWA to
               locate JFCBs and does two things:
 
               1. checks if any non-gdg data set with
                  DISP=(NEW,CATLG) is already cataloged.
                  If it finds at least one (i.e. a "NOT
                  CATLG 2" is about to occur), it issues a
                  message and abends the job
 
               2. Checks if any VSAM data set has been left
                  in OPEN status by an abending job.  Every
                  data set in this case is opened and closed.
                  The way this condition is detected is quite
                  interesting, look at the code.
 
     DONTFAIL  Prevent job failure caused by uncataloged data
               sets (ESA only, must be authorized)
 
               This program has been designed to prevent jobs
               that accept multiple inputs from failing in the
               middle of the night because of a "typo" in a data
               set name.  When DONTFAIL detects that an input
               data set is not cataloged, it converts it to a
               null data set and allows the job to run with
               partial input.
 
     SYSMOVE   Unload a PDS to a sequential data set in
               IEHMOVE format.
 
     UNITAFF   Dynamically sets UNIT=AFF for input tape files
               (must be authorized)
 
               This program was originally designed to reduce
               the number of tape drives used by user-submitted
               SAS steps.  It scans the SWA for the next step
               and changes some of the SIOT's fields to force
               all input tape data sets to the same drive.
 
               It must be executed immediately before the
               step to process (SAS, SORT, or any other
               program that reads a variable number of tape
               files, one at a time).
 
               Sample jcl:
 
                 //UNITAFF EXEC PGM=UNITAFF
                 //STEPLIB  DD  DSN=SYS2.AUTHLIB,DISP=SHR
                 //*
                 //STEP53  EXEC PGM=SAS
                 //OSIN     DD DSN=USER1.X,DISP=SHR
                 //         DD DSN=UPQE.DQE40530(-1),DISP=SHR
                 //OSIN2    DD DSN=UPQR.DQR02150(0),DISP=SHR
                 //OSIN3    DD DSN=USER1.X,DISP=SHR
                 //         DD DSN=UPBG.DBGA0240(-1),DISP=SHR
                 //OSIN4    DD DSN=USER1.X,DISP=SHR
                 //         DD DSN=USER1.YY,DISP=SHR
                 //         DD DSN=UPQR.DQR02140(-1),DISP=SHR
 
               The program only supports cataloged data sets;
               relative generation numbers are handled
               correctly via the GDGNT.
 
               Restriction: No distinction is made between 3420,
               3480 or 3490 device types; this will cause
               problems if the input to a step is mixed.
 
 
     ------------------ Assembler Macros ------------------------
 
     BUILDCDE  Make storage allocated with GETMAIN appear as a
               load-module in a dump.
 
               BUILDCDE uses the "loader" form of IDENTIFY to
               create a major CDE and corresponding XL, then
               issues a LOAD SVC to create an LLE and associate
               the CDE with the current TCB.  Don't worry, you
               don't have to understand how it works to use it.
 
               EXAMPLE:
 
                     GETMAIN RU,LV=20000
                     BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM20
 
               The 20K storage area will appear in a dump
               as a load-module called "DYNAM20".
 
     EASYSORT  Invoke an internal SORT with OPEN/PUT/GET logic
 
               Allows you to do internal sorts without any
               knowledge of parameter lists or exit routine
               linkage conventions.
 
               Example:
 
                         EASYSORT OPEN,
                               FIELDS=(1,22,CH,A),
                               TYPE=F,LENGTH=64,
                               OPTION='EQUALS,RESINV=500K'
                         .     .
                 READ    GET   FILEIN
                         EASYSORT PUT,(1)   pass record to SORT
                         B     READ
                         .     .
                 REWRITE EASYSORT GET,      get sorted record
                               SET=(R3),
                               EODAD=ENDSORT
                         PUT   FILEOUT,(R3)
                         B     REWRITE
                         .     .
                 ENDSORT EASYSORT CLOSE
 
     GETDIR    Read a directory sequentially with a BPAM DCB
 
               This macro offers a simple way to read directory
               entries and members with a single BPAM DCB.
 
     STRING    Provides functions similar to PL/I's
               PUT EDIT or COBOL's STRING.
 
               This is the only non-IBM macro you need to
               assemble the programs in this file.
 
               This member contains the macro, a test job,
               and the documentation.
 
 
     ---------------------- Miscellaneous -----------------------
 
     DEFGDGSR  Sub-routine - invokes SVC 26 to define a GDG base
 
               May be invoked from a COBOL program, like this:
 
                     05  DSNAME   PIC X(44) VALUE 'MY.DSNAME'.
                     05  GDGLIMIT PIC   999 VALUE 027.
 
                         CALL 'DEFGDGSR' USING DSNAME,
                                               GDGLIMIT.
 
     FILLDASD  Asm pgm to fill free DASD space with binary zeroes
 
     HANDBOOK  Job - Creates an on-line copy of the DATA AREAS
               (aka Debugging Handbook) manuals
 
               This job assembles macros from SYS1.MACLIB and
               SYS1.AMODGEN and stores the assembly listings
               into PDS members.  It is set up for over 60
               commonly used MVS control blocks (such as CVT,
               TCB, JFCB, etc) and may be easily modified to
               support other ones.
 
               The assembly listing for each macro is stored
               into the output PDS under the control block
               name.  For example, the assembly listing for
               "IKJTCB" is stored into the "TCB" member.
 
               To conserve dasd space, the LMCOPY service of
               ISPF/PDF is used to pack the output of the
               assembler.
 
     TCTDCTR   Sub-routine - Prints the EXCP count for each DD
               in the job step
 
               May be invoked at the end of a program for
               debugging or tuning purposes.
 
     TRIMMAC   Job - Creates a reduced-size MACLIB that may be
               used instead of the SYS1.MACLIB/SYS1.AMODGEN
               concatenation to improve the performance of the
               assembler.
 
               The "TRIMMAC" library is built as follows:
 
               1. selected macros are read from ddname "SYSLIB",
                  trimmed from PL/AS code and other comment
                  lines, then written to a temporary data set.
 
               2. the SORT utility is invoked to sort the macros
                  in ascending sequence of their size.
 
               3. the sorted macros are written to SYSPUNCH
                  as an IEBUPDTE sysin stream.
 
               4. IEBUPDTE is executed in the last step to
                  load the macros into the "TRIMMAC" library,
                  the smallest macros being loaded first.
 
               You may customize the member list and the input
               concatenation to add other macros and/or macro
               libraries, as needed.
 
               Use the "TRIMMAC" library instead of the
               MACLIB/AMODGEN concatenation to assemble a
               program and compare the before/after values for
               the elapsed time, excp count and I/O connect
               time.  Expect savings of 30 to 60 percent when
               "TRIMMAC" is used.
 
               My "TRIMMAC" PDS is currently allocated as
               follows:
 
                   UNIT=3390,SPACE=(CYL,(9,,18)),
                   DCB=(RECFM=FB,LRECL=80,BLKSIZE=29720)
 
 
./ ADD NAME=$$$COGSF 0100-89195-06211-2359-00030-00030-00030-FILE183
 
                         COPYRIGHT
 
     These programs are Freeware and may be freely copied.
     They may be freely distributed to any other party on condition
     that no inducement beyond reasonable handling costs is offered
     or accepted by either side for such distribution.
 
                         DISCLAIMER
 
     Gilbert Saint-Flour neither expresses nor implies any warranty
     as to the fitness of these computer programs for any function.
     The use of these programs or the results therefrom is entirely
     at the risk of the user.  Consequently, the user may modify
     these programs in any way he/she thinks fit.
 
 
                     CONTACT INFORMATION
 
     We would be interested to hear of comments and/or proposed
     enhancements.  Please e-Mail to the author at:
 
              Gilbert Saint-Flour <gsf@pobox.com>
 
     or visit my Web Sites at http://gsf-soft.com/Freeware/
                          and http://www.pobox.com/~gsf/
 
./ ADD NAME=BLKSIZE2 0106-87190-06210-1038-00160-00100-00091-CBT472
//GILBERTB JOB (ACCT#),DISPLAY.BLKSIZE,                                 00010000
// CLASS=A,MSGCLASS=X,COND=(0,NE),                                      00020000
// NOTIFY=&SYSUID,REGION=6M                                             00030006
//*                                                                     00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050006
*********************************************************************** 00070005
**                                                                   ** 00080005
**       THIS PROGRAM SCANS A PDS AND PRINTS THE SIZE                ** 00090005
**       OF EACH DATA BLOCK, AS WELL AS THE NUMBER OF                ** 00100005
**       BYTES REMAINING AT THE END OF EACH TRACK.                   ** 00110005
**                                                                   ** 00120005
**       THIS PROGRAM WAS INITIALLY DESIGNED TO STUDY HOW            ** 00130005
**       CHANGING THE BLKSIZE OF A PDS AFFECTS SPACE USAGE.          ** 00140005
**                                                                   ** 00150005
*********************************************************************** 00160005
BLKSIZE  START X'0FC010'                                                00170000
         SAVE  (14,12),,BLKSIZE.&SYSDATE                                00180000
         LR    R12,R15                                                  00190006
         USING BLKSIZE,R12                                              00200006
         ST    R13,SAVEAREA+4                                           00210000
         LA    R13,SAVEAREA                                             00220000
         OPEN  MF=(E,OPENLIST)         OPEN SYSUT1/SYSPRINT             00230000
         LTR   R15,R15                                                  00240000
         BNZ   ABEND16                                                  00250000
         LA    R8,SYSUT1                                                00260000
         USING IHADCB,R8                                                00270000
*********************************************************************** 00280000
******   READ A TRACK                                            ****** 00290000
*********************************************************************** 00300000
*LOOP                                                                   00310005
LOOP21   L     R0,DCBRELAD             GET TTRN                         00320005
         L     R1,DCBDEBAD             DEB ADDRESS                      00330003
         LA    R2,MBBCCHHR             MBBCCHHR FIELD                   00340000
         STM   R8,R13,20(R13)          SAVE R8-R13                      00350003
         LR    R8,R13                  SAVE R8-R13                      00360003
         L     R15,16                  CVTPTR                           00370003
         L     R15,28(,R15)            CVTPCNVT                         00380003
         BALR  R14,R15                 COMPUTE MBBCCHHR                 00390003
         LM    R8,R13,20(R8)           RESTORE R8-R13                   00400003
         LTR   R15,R15                 SUCCESSFUL?                      00410003
         BNZ   CLOSEUT1                END OF EXTENT, CLOSE             00420003
         EXCP  IOB1                    FULL TRACK READ                  00430000
         WAIT  1,ECB=ECB1                                               00440000
*********************************************************************** 00450000
******   SCAN TRACK                                              ****** 00460000
*********************************************************************** 00470000
         LM    R3,R4,CCW4              FIRST BUFFER                     00480000
         USING COUNT,R3                                                 00490000
         LA    R3,0(,R3)               START OF BUFFER                  00500000
         LA    R5,0(R3,R4)             END OF BUFFER                    00510000
         SLR   R0,R0                                                    00520000
         ICM   R0,B'0011',IOB1+14      RESIDUAL COUNT                   00530000
         SLR   R5,R0                                                    00540000
         BCTR  R5,0                    LAST BYTE XFERED FROM TRACK      00550000
         MVI   PRTAREA+43,C'T'         NEW TRACK                        00560001
         SLR   R6,R6                   CUMULATIVE LENGTH                00570000
*--LOOP                                                                 00580005
LOOP36C  TRKCALC FUNCTN=TRKBAL,DEVTAB=DCBDVTBL,RKDD=COUNTR,BALANCE=*    00590000
         CVD   R0,DWD                  TRKBAL                           00600001
         OI    DWD+7,15                                                 00610001
         UNPK  PRTAREA+13(5),DWD                                        00620001
         LH    R4,COUNTDL              DATA LENGTH                      00630000
         CVD   R4,DWD                                                   00640001
         OI    DWD+7,15                                                 00650001
         UNPK  PRTAREA+03(5),DWD                                        00660001
         AR    R6,R4                   CUMULATIVE LENGTH                00670000
         CVD   R6,DWD                                                   00680001
         OI    DWD+7,15                                                 00690001
         UNPK  PRTAREA+33(5),DWD                                        00700001
*                                                                       00710004
         UNPK  PRTAREA+50(9),COUNT(5)    SHOW CCHHRKDD IN HEX           00720005
         TR    PRTAREA+50(9),TABHEX-240  SHOW CCHHRKDD IN HEX           00730005
         UNPK  PRTAREA+58(9),COUNT+4(5)  SHOW CCHHRKDD IN HEX           00740005
         TR    PRTAREA+58(9),TABHEX-240  SHOW CCHHRKDD IN HEX           00750005
         MVI   PRTAREA+66,C' '           SHOW CCHHRKDD IN HEX           00760005
*                                                                       00770004
         PUT   SYSPRINT,PRTAREA        WRITE RECORD                     00780001
         MVI   PRTAREA+43,C' '         RESET "START OF TRACK" FLAG      00790001
*                                                                       00800000
         SLR   R1,R1                                                    00810000
         IC    R1,COUNTKL              KEY LENGTH                       00820000
         LA    R4,8(R1,R4)             8+KL+DL                          00830000
         BXLE  R3,R4,LOOP36C           PROCESS NEXT BLOCK               00840000
*--ENDLOOP                                                              00850005
         MVC   PRTAREA+1(79),PRTAREA                                    00860001
         PUT   SYSPRINT,PRTAREA                                         00870001
         LA    R0,X'0001'              NEXT TRACK                       00880000
         AH    R0,DCBRELAD             TTRN NEXT TRACK                  00890000
         STH   R0,DCBRELAD             TTRN NEXT TRACK                  00900000
         B     LOOP21                  PROCESS NEXT TRACK               00910002
*ENDLOOP                                                                00920005
CLOSEUT1 CLOSE MF=(E,OPENLIST)         CLOSE SYSUT1 & SYSPRINT          00930001
         L     13,4(,13)                                                00940000
         RETURN (14,12),RC=00                                           00950001
ABEND16  ABEND 0016                                                     00960000
TABHEX   DC    C'0123456789ABCDEF'                                      00970004
OPENLIST OPEN  (SYSUT1,,SYSPRINT,OUTPUT),MF=L                           00980000
SYSUT1   DCB   MACRF=E,DDNAME=SYSUT1,IOBAD=IOB1                         00990001
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FB,LRECL=80      01000001
         CNOP  0,8 -------------------- IOB1 ---------------------      01010000
         DC    CL4'IOB1'                                                01020000
ECB1     DC    A(0)                    ECB                              01030000
IOB1     DC    XL4'42000000'           FLAG1/2 SENSE1/2                 01040000
         DC    A(ECB1)                 ECBPTR                           01050000
         DC    X'00',XL7'00'           FLAG3 CSW                        01060000
         DC    A(CCW2)                 CCW ADDR                         01070000
         DC    A(SYSUT1)               DCBPTR                           01080000
         DC    2A(0)                   RESTR INCAM ERRCT                01090000
MBBCCHHR DC    XL8'01'                                                  01100000
*                   ------------------ CCW'S -------------------        01110001
CCW2     CCW   X'31',MBBCCHHR+3,X'40',5      SEARCH ID EQUAL            01120000
CCW3     CCW   X'08',*-8,0,0                 TIC                        01130000
CCW4     CCW   X'5E',COUNT,X'20',65535       READ MULTIPLE, SLI         01140002
*                                                                       01150000
SAVEAREA DS    9D                                                       01160000
DWD      DS    1D                                                       01170001
PRTAREA  DC    CL80' '                                                  01180001
*                                                                       01190000
COUNT    DS    0D                      COUNT                            01200000
COUNTCC  DS    H                                                        01210000
COUNTHH  DS    H                                                        01220000
COUNTR   DS    X                                                        01230000
COUNTKL  DS    X                                                        01240000
COUNTDL  DS    H                                                        01250000
KEY      DS    XL8                     KEY                              01260002
DATA     DS    65535X                  DATA                             01270002
         PRINT NOGEN                                                    01280000
         DCBD  DSORG=PS,DEVD=DA                                         01290000
*        YREGS                                                          01300006
R0       EQU   0                                                        01310006
R1       EQU   1                                                        01320006
R2       EQU   2                                                        01330006
R3       EQU   3                                                        01340006
R4       EQU   4                                                        01350006
R5       EQU   5                                                        01360006
R6       EQU   6                                                        01370006
R7       EQU   7                                                        01380006
R8       EQU   8                                                        01390006
R9       EQU   9                                                        01400006
R10      EQU   10                                                       01410006
R11      EQU   11                                                       01420006
R12      EQU   12                                                       01430006
R13      EQU   13                                                       01440006
R14      EQU   14                                                       01450006
R15      EQU   15                                                       01460006
         END                                                            01470005
//SYSPRINT DD SYSOUT=*                                                  01480005
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01510005
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01530006
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01540006
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01550006
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01560006
//*                                                                     01570000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  01580000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01590006
//SYSUT1   DD DSN=GILBERT.TRIMMAC,DISP=SHR                              01600005
//SYSPRINT DD SYSOUT=*                                                  01610005
//SYSUDUMP DD SYSOUT=*                                                  01620005
./ ADD NAME=BUILDCDE 0201-85325-06210-1041-00227-00231-00028-CBT472
//GILBERTL JOB (ACCT#),BUILDCDE,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040001
*********************************************************************** 00060000
*                                                                     * 00070000
* MACRO NAME = BUILDCDE                                               * 00080000
*                                                                     * 00090000
* DESCRIPTIVE NAME = BUILD A MAJOR CDE TO IDENTIFY A STORAGE AREA     * 00100000
*                                                                     * 00110000
* FUNCTION = MAKES A STORAGE AREA EASIER TO LOCATE IN A               * 00120000
*            DUMP BY MAKING IT APPEAR AS A LOAD_MODULE.               * 00130000
*                                                                     * 00140000
* STATUS = R200                                                       * 00150000
*                                                                     * 00160000
* AUTHOR = GILBERT SAINT-FLOUR <GSF@POBOX.COM>                        * 00170000
*                                                                     * 00180000
* ENVIRONMENT = SEE BELOW                                             * 00190000
*                                                                     * 00200000
*     SCP   = OS/VS2                                                  * 00210001
*     KEY   = USER                                                    * 00220000
*     MODE  = PROBLEM                                                 * 00230000
*     APF   = OFF                                                     * 00240000
*                                                                     * 00250000
* OPERATION = BUILDCDE USES THE "LOADER" FORM OF IDENTIFY TO CREATE   * 00260000
*             A MAJOR CDE AND CORRESPONDING XL, THEN ISSUES A LOAD    * 00270000
*             SVC TO CREATE AN LLE AND ASSOCIATE THE CDE WITH THE     * 00280000
*             CURRENT TCB.                                            * 00290000
*                                                                     * 00300000
* INVOCATION = SEE BELOW                                              * 00310000
*                                                                     * 00320000
*          (BEFORE)     GETMAIN RU,LV=20000                           * 00330000
*                                                                     * 00340000
*          (AFTER)      GETMAIN RU,LV=20000                           * 00350000
*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM         * 00360000
*                                                                     * 00370000
* NOTES = SEE BELOW                                                   * 00380000
*                                                                     * 00390000
*        BUILDCDE MAY BE ISSUED MORE THAN ONCE, PROVIDED THE EP       * 00400000
*        KEY-WORD HAS A DIFFERENT VALUE EACH TIME.                    * 00410000
*                                                                     * 00420000
*        IF STORAGE WAS ALLOCATED IN SUB-POOL ZERO (SP=0 IS           * 00430000
*        SPECIFIED OR DEFAULTED TO IN THE GETMAIN MACRO),             * 00440000
*        THE DELETE MACRO MAY BE ISSUED AGAINST THE SPECIFIED EP      * 00450000
*        TO DELETE THE CDE AND FREE UP THE STORAGE.                   * 00460000
*                                                                     * 00470000
*        IF GETMAIN SPECIFIES A NON-ZERO SUBPOOL, THE DELETE MACRO    * 00480000
*        DELETES THE CDE BUT DOES NOT FREE UP THE STORAGE:  YOU       * 00490000
*        MUST ISSUE FREEMAIN YOURSELF.                                * 00500000
*                                                                     * 00510000
*        IN A MAJOR CDE CREATED BY THE "LOADER" FORM OF IDENTIFY,     * 00520000
*        THE "RENT" AND "REUS" ATTRIBUTES ARE OFF.  THIS MEANS        * 00530000
*        THAT YOU MAY NOT ISSUE LOAD AGAINST THE EP NAME (BUILDCDE    * 00540000
*        HAS ALREADY ISSUED LOAD), BUT YOU MAY ISSUE LINK, ATTACH     * 00550000
*        OR XCTL IF YOU WANT TO (ONCE ONLY).  YOU MAY ALSO ISSUE      * 00560000
*        THE STANDARD FORM OF IDENTIFY TO DEFINE SECONDARY ENTRY      * 00570000
*        POINTS WHICH HAVE THE "RENT" ATTRIBUTE.                      * 00580000
*                                                                     * 00590000
*        IF THIS MACRO IS USED BY AN AUTHORIZED PROGRAM, THEN         * 00600000
*        A S306 ABEND WILL OCCUR (THE CDE CREATED HAS ITS CDSYSLIB    * 00610000
*        BIT OFF).  LOOK FOR A SECOND VERSION OF THE MACRO THAT MAY   * 00620000
*        BE USED IN AN AUTHORIZED PROGRAM AT THE END OF THIS JOB.     * 00630000
*                                                                     * 00640000
*        THE IDENTIFY MACRO SUPPLIED IN SYS1.MACLIB SUPPORTS THE      * 00650000
*        "LOADER" FORM, BUT THE FORMAT OF THE PARAMETER LIST IS       * 00660000
*        NOT DOCUMENTED, AS FAR AS I KNOW.  THE RETURN CODES X'18'    * 00670000
*        OR X'1C' MAY BE RETURNED IN R15 WHEN THE PARAMETER LIST      * 00680000
*        IS INVALID.  THESE RETURN CODES ARE DOCUMENTED ALONG WITH    * 00690000
*        THE IDENTIFY MACRO.                                          * 00700000
*                                                                     * 00710000
*        WHEN THE LOAD-LIST IS EMPTY (I.E. NO LOAD HAS BEEN ISSUED    * 00720000
*        FOR THIS TCB YET), IDENTIFY FAILS WITH A RETURN CODE 12.     * 00730000
*        THIS CAN BE CIRCUMVENTED BY ISSUING THE FOLLOWING SEQUENCE:  * 00740000
*                                                                     * 00750000
*                       LOAD    EP=IEFBR14                            * 00760000
*                       GETMAIN RU,LV=20000                           * 00770000
*                       BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM         * 00780000
*                       DELETE  EP=IEFBR14                            * 00790000
*                                                                     * 00800000
*        I'VE NOTICED THAT ON MVS SYSTEMS PRIOR TO MVS/ESA 4.3, THE   * 00810000
*        "LOADER" FORM OF IDENTIFY RETURNS THE ADDRESS OF THE CDE IT  * 00820000
*        CREATED IN REG1.  IN MVS/ESA 4.3 THIS IS NO LONGER TRUE.     * 00830000
*                                                                     * 00840000
*********************************************************************** 00850000
         MACRO                                                          00860000
&REF     BUILDCDE &LENGTH=,&ADDR=,&EP=                                  00870000
         LCLC   &EP8                   XF                               00880001
&EP8     SETC  '&EP          '(1,8)                                     00890000
&REF     IHBINNRA &ADDR,&LENGTH        SET R0,R1                        00900000
         ST    R1,0(,R1)               STORE ENTRY-POINT ADDRESS        00910000
         MVC   4(8,R1),=C'&EP8'        CDNAME                           00920000
         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15                00930000
         LA    R14,16                  LENGTH OF PSEUDO XL              00940000
         LA    R15,1                   NUMBER OF RELOCATION FACTORS     00950000
         STM   R14,R1,16(R1)           FORMAT BYTES 16-31               00960000
         MVI   24(R1),X'80'            END OF LIST                      00970000
         MNOTE *,'       IDENTIFY MF=(E,(R1))'                          00980000
         SLR   R0,R0                   LOADER-TYPE IDENTIFY             00990000
         SVC   41                      ISSUE IDENTIFY SVC               01000000
         LR    R14,R1                  PASS CDE ADDRESS                 01010000
         MNOTE *,'       LOAD EP=&EP,DCB=0'                             01020000
         LA    R0,=C'&EP8'             POINT TO EP NAME                 01030000
         SLR   R1,R1                   NO DCB FOR LOAD                  01040000
         SVC   8                       ISSUE LOAD SVC                   01050000
         LR    R1,R0                   EP ADDRESS IN R1                 01060000
         SLR   R0,R0                                                    01070000
         ICM   R0,B'0111',25(R1)       LENGTH IN R0                     01080000
         MEND                                                           01090000
*********************************************************************** 01100000
********* TEST PROGRAM ************************************************ 01110000
*********************************************************************** 01120000
TEMPNAME CSECT                                                          01130000
         BALR  R3,0                                                     01140000
         USING *,R3                                                     01150000
         OPEN  (SNAPDD,OUTPUT)                                          01160000
*                                                                       01170000
         GETMAIN R,LV=3333                                              01180000
         BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM/24                       01190000
         LR    R4,R14                                                   01200000
         LR    R5,R15                                                   01210000
         LR    R6,R0                                                    01220000
         LR    R7,R1                                                    01230000
*                                                                       01240000
         GETMAIN RU,LV=5678                                             01250001
         BUILDCDE LENGTH=(0),ADDR=(1),EP=DYNAM/31                       01260000
         LR    R8,R14                                                   01270000
         LR    R9,R15                                                   01280000
         LR    R10,R0                                                   01290000
         LR    R11,R1                                                   01300000
*                                                                       01310000
         SNAP  DCB=SNAPDD,SDATA=CB,PDATA=(REGS,JPA)                     01320000
*                                                                       01330000
         MVC   0(8,R7),=X'0A23,0A03'   SVC 35 (WTO) AND SVC 3 (EXIT)    01340000
         LA    R1,WTOL                 POINT TO WTO PARM LIST           01350000
         LINK  EP=DYNAM/24             GO EXECUTE SVC35                 01360000
*                                                                       01370000
         SNAP  DCB=SNAPDD,SDATA=CB     SHOW UPDATED CDE                 01380000
*                                                                       01390000
         SVC   3                       EXIT                             01400000
*                                                                       01410000
WTOL     WTO   'BUILDCDE - LINK WORKED!',ROUTCDE=11,MF=L                01420000
*                                                                       01430000
SNAPDD   DCB   DSORG=PS,MACRF=W,DDNAME=SNAPDD,                         X01440000
               RECFM=VBA,LRECL=125,BLKSIZE=882                          01450000
*        YREGS                                                          01460001
R0       EQU   0                                                        01470001
R1       EQU   1                                                        01480001
R2       EQU   2                                                        01490001
R3       EQU   3                                                        01500001
R4       EQU   4                                                        01510001
R5       EQU   5                                                        01520001
R6       EQU   6                                                        01530001
R7       EQU   7                                                        01540001
R8       EQU   8                                                        01550001
R9       EQU   9                                                        01560001
R10      EQU   10                                                       01570001
R11      EQU   11                                                       01580001
R12      EQU   12                                                       01590001
R13      EQU   13                                                       01600001
R14      EQU   14                                                       01610001
R15      EQU   15                                                       01620001
         END                                                            01630000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01650000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01660001
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01670001
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01680001
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01690001
//SYSPRINT DD SYSOUT=*                                                  01700000
//*                                                                     01710000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  01720000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01730001
//SNAPDD   DD SYSOUT=*                                                  01740000
//SYSUDUMP DD SYSOUT=*                                                  01750000
*********************************************************************** 01760000
********* AUTHORIZED VERSION OF THE BUILDCDE MACRO ******************** 01770000
*********************************************************************** 01780000
         MACRO (AUTHORIZED VERSION)                                     01790000
&REF     BUILDCDE &RU,&LENGTH=,&SP=0,&WORKREG=,                        X01800000
               &BNDRY=DBLWD,&EP=BUILDCDE,&LOC=                          01810000
      MNOTE *,'       GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC=' 01820000
&REF     GETMAIN &RU,LV=&LENGTH,SP=&SP,BNDRY=&BNDRY,&LOC=               01830000
         ST    R1,0(,R1)               ENTRY POINT                      01840000
         MVC   4(8,R1),=CL8'&EP'       CDNAME                           01850000
         XC    12(4,R1),12(R1)         CLEAR BYTES 12-15                01860000
         LA    R14,016                 LENGTH OF PSEUDO XL              01870000
         LA    R15,001                 NUMBER OF RELOCATION FACTORS     01880000
         STM   R14,R1,16(R1)           FORMAT SVC41 PARM                01890000
         MVI   24(R1),X'80'            END OF LIST                      01900000
         LR    R14,R1                  SAVE ADDRESS ACROSS SVC 41       01910000
         MNOTE *,'       IDENTIFY EPLOC=0,ENTRY=(R1)'                   01920000
         SLR   R0,R0                   LOADER-TYPE IDENTIFY             01930000
         SVC   41                      ISSUE IDENTIFY SVC               01940000
&LABEL   SETC  'IHB&SYSNDX'                                             01950000
&R       SETC  '&WORKREG(1)'           SHORT FORM                       01960000
         AIF   (T'&WORKREG NE 'O').WKREG2                               01970000
         MNOTE 4,'WORKREG OPERAND OMITTED, WORKREG=(R2) ASSUMED'        01980000
&R       SETC  'R2'                                                     01990000
.WKREG2  L     &R,540(,0)              PSATOLD (MY TCB)                 02000000
         L     &R,TCBJSCB-TCB(,&R)     MY JSCB                          02010000
         USING IEZJSCB,&R                                               02020000
         TM    JSCBOPTS,JSCBAUTH       CHECK AUTHORIZATION              02030000
         BZ    &LABEL.N                JUMP IF NOT AUTHORIZED           02040000
         MODESET KEY=ZERO              SWITCH TO KEY ZERO               02050000
         NI    JSCBOPTS,255-JSCBAUTH   TURN APF FLAG OFF                02060000
         SYNCH &LABEL.L                EXECUTE ROUTINE WITH TCB KEY     02070000
         OI    JSCBOPTS,JSCBAUTH       TURN APF FLAG BACK ON            02080000
         DROP  &R                                                       02090000
         LR    &R,R0                   SAVE EP ADDRESS                  02100000
         MODESET KEY=NZERO             SWITCH TO TCB KEY                02110000
         LR    R0,&R                   EP ADDRESS                       02120000
         B     &LABEL.X                                                 02130000
&LABEL.I EQU   &R-2                    WORKREG MUST BE R2-R13           02140000
&LABEL.J EQU   13-&R                   WORKREG MUST BE R2-R13           02150000
&LABEL.N LA    R14,&LABEL.X            RETURN ADDRESS                   02160000
         MNOTE *,'       LOAD EP=&EP,DCB=0'                             02170000
&LABEL.L LA    R0,=CL8'&EP'            POINT TO EP NAME                 02180000
         SLR   R1,R1                   NO DCB FOR LOAD                  02190000
         SVC   8                       ISSUE LOAD SVC                   02200000
         BR    R14                                                      02210000
&LABEL.X LR    R1,R0                   ADDRESS IN R1                    02220000
         SLR   R0,R0                                                    02230000
         ICM   R0,B'0111',25(R1)       LENGTH IN R0                     02240000
         MEND                                                           02250000
         IEZJSCB                                                        02260000
         IKJTCB                                                         02270000
./ ADD NAME=BYPASSNQ 0203-87247-06210-1128-00298-00025-00097-CBT472
//GILBERTQ JOB (ACCT#),BYPASSNQ,                                        00010000
// NOTIFY=GILBERT,                                                      00020003
//*RESTART=CREATE,                                                      00030001
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050003
*********************************************************************** 00070000
*                                                                     * 00080000
* MODULE NAME = BYPASSNQ                                              * 00090000
*                                                                     * 00100000
* DESCRIPTIVE NAME = SCRATCH/RENAME A DATA SET WITHOUT ENQ            * 00110000
*                                                                     * 00120000
* STATUS = R203                                                       * 00130003
*                                                                     * 00140000
* FUNCTION = This program was designed for systems programmers        * 00150000
*            who install a new version of MVS or another software     * 00160000
*            product.  They sometimes face a situation where they     * 00170000
*            have to delete or rename a data set not currently        * 00180000
*            allocated to anyone but which they can't delete          * 00190000
*            because it has the same name as another data set         * 00200000
*            which (1) exists on a different disk volume and          * 00210000
*            (2) is currently allocated to a long-running task.       * 00220000
*                                                                     * 00230001
*            BYPASSNQ is a driver that allows you to run any          * 00240000
*            utility program (such as IEHPROGM or IDCAMS) and         * 00250000
*            bypass dsname ENQ that is normally performed by          * 00260000
*            the DYNALLOC, SCRATCH and RENAME SVCs.                   * 00270000
*            This technique allows data sets to be deleted or         * 00280001
*            renamed using standard MVS services and is fully         * 00290001
*            compatible with indexed VTOCs and SMS.                   * 00300001
*                                                                     * 00310000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00320002
*                                                                     * 00330000
* ENVIRONMENT = SEE BELOW                                             * 00340000
*                                                                     * 00350000
*    DEPENDENCIES: OS/VS2                                             * 00360003
*                                                                     * 00370000
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               * 00380000
*                                                                     * 00390000
*    PROCESSOR = Assembler XF                                         * 00400003
*                                                                     * 00410000
*    MODULE SIZE = 2K                                                 * 00420000
*                                                                     * 00430000
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31                    * 00440000
*                 SUPERVISOR STATE, KEY 8                             * 00450000
*                 APF AUTHORIZATION: YES                              * 00460000
*                                                                     * 00470000
* SYNTAX = SEE BELOW                                                  * 00480000
*                                                                     * 00490000
*          The name of the utility program is passed in the PARM      * 00500000
*                                                                     * 00510000
*          Examples:                                                  * 00520000
*                                                                     * 00530000
*               //SCRATCH EXEC PGM=BYPASSNQ,PARM=IEHPROGM             * 00540000
*               //DD1      DD UNIT=3390,VOL=SER=OS39R3,DISP=OLD       * 00550002
*               //SYSPRINT DD SYSOUT=*                                * 00560000
*                 RENAME DSNAME=GILBERT.TEST29,VOL=3390=OS39R3,      X* 00570002
*                              NEWNAME=GILBERT.TEST29B                * 00580000
*                SCRATCH DSNAME=GILBERT.TEST29B,VOL=3390=OS39R3       * 00590002
*                                                                     * 00600000
*               //ALTER   EXEC PGM=BYPASSNQ,PARM=IDCAMS               * 00610000
*               //SYSPRINT DD SYSOUT=*                                * 00620000
*                 ALTER IBMUSER.TEST29 NEWNAME(IBMUSER.TEST29B)       * 00630000
*                 DELETE IBMUSER.TEST29B                              * 00640000
*                                                                     * 00650000
* OPERATION = SEE BELOW                                               * 00660000
*                                                                     * 00670000
*            1. Retrieve the name of the utility program              * 00680000
*               from the PARM field.                                  * 00690000
*            2. Fix myself in memory                                  * 00700002
*            3. Set up an SVC screening environment to intercept      * 00710002
*               ENQ and DEQ SVC requests                              * 00720000
*            4. Issue XCTL to pass control to the utility program     * 00730000
*                                                                     * 00740000
*         Note: Each time it is invoked, the SVC screening routine    * 00750000
*               checks the first QNAME in the ENQ/DEQ parm list.      * 00760000
*               If it is equal to SYSDSN, it changes it to SYSNOENQ.  * 00770000
*                                                                     * 00780000
*         Credits: The idea of using SVC screening to bypass          * 00790000
*                  DSN ENQ was borrowed from the SYSIEH               * 00800000
*                  utility (author unknown).                          * 00810000
*                                                                     * 00820000
* ABENDS = See below                                                  * 00830000
*                                                                     * 00840000
*            U1001  Invalid Parm                                      * 00850000
*                                                                     * 00860000
* CHANGE ACTIVITY                                                     * 00870000
*                                                                     * 00880000
*  $100 INITIAL RELEASE                                               * 00890000
*  $101 Use ASMH and ISGPEL macro                                     * 00900001
*  $102 Issue PGFIX before setting TCBSVCS                            * 00910002
*  $203 OS/VS2 Version                                                * 00920003
*                                                                     * 00930000
*********************************************************************** 00940000
BYPASSNQ CSECT                                                          00950003
         DC    C'GSF UTILITIES - BYPASSNQ R203 '                        00960003
BEGIN    LR    R10,R15                                                  00970000
         USING BEGIN,R10                                                00980000
         LR    R11,R1                  SAVE PARM ADDRESS                00990000
         USING FSA,R13                                                  01000000
         MODESET MODE=SUP              SUPERVISOR MODE                  01010000
*                                                                       01020000
*        Check that the user has update authority to SYS1.PARMLIB       01030000
*                                                                       01040000
*        Retrieve the name of the utility program from the parm         01050000
*                                                                       01060000
         L     R2,0(,R11)              addr of the PARM                 01070000
         LH    R3,0(,R2)               parm length                      01080000
         LTR   R3,R3                   parm missing?                    01090000
         BNP   ABEND1                  yes, abend                       01100000
         CH    R3,=H'8'                parm too long?                   01110000
         BH    ABEND1                  yes, abend                       01120000
         LA    R14,PGMNAME             "to" addr                        01130000
         LA    R15,L'PGMNAME           "to" length                      01140000
         LA    R2,2(,R2)               "from" address                   01150000
         ICM   R3,B'1000',=C' '        padding                          01160000
         MVCL  R14,R2                  move pgm name                    01170000
*                                                                       01180002
*        Make sure I don't disappear                                    01190002
*                                                                       01200002
         PGFIX R,                      PREVENT S07C ABEND              X01210003
               A=SVCA2,                FROM                            X01220002
               EA=SVCARRAY+255,        TO                              X01230002
               LONG=Y,                                                 X01240002
               ECB=0                                                    01250002
         LOAD  EP=BYPASSNQ             bump my own use count for XCTL   01260002
*                                                                       01270000
*        Set up the SVC screening environment                           01280000
*                                                                       01290000
         MODESET EXTKEY=ZERO                                            01300000
         L     R4,X'21C'               A(TCB) from PSATOLD              01310000
         USING TCB,R4                                                   01320000
         LA    R0,SVCA2                ADDR OF SVC SCREENING ROUTINE    01330000
         ST    R0,TCBSVCA2                                              01340000
         OI    TCBFLGS7,TCBSVCS        SVC SCREENING ON                 01350000
         MODESET KEY=NZERO,MODE=PROB                                    01360002
*                                                                       01370000
*        XCTL to utility program with PARM=''                           01380000
*                                                                       01390000
         LR    R1,R11                  restore R1                       01400000
         L     R2,0(,R1)               addr of the PARM                 01410000
         MVI   1(R2),0                 zero parm length                 01420000
         XCTL  EPLOC=PGMNAME,SF=(E,XCTLL)                               01430000
*                                                                       01440000
ABEND1   ABEND 1001                    bad parm                         01450003
*********************************************************************** 01460000
*                                                                     * 01470000
*        SVC SCREENING ARRAY                                          * 01480000
*                                                                     * 01490000
*********************************************************************** 01500000
         DC    0D'0'                                                    01510000
         EXTRN SCREEN                                                   01520000
SVCA2    DC    A(SCREEN+X'80000000')                                    01530000
         DC    X'80,00',X'0000'        SVC TYPE, LOCKS                  01540000
SVCARRAY DC    256X'80'                SVC ARRAY                        01550000
         ORG   SVCARRAY+48                                              01560000
         DC    X'00'                   DEQ                              01570000
         ORG   SVCARRAY+56                                              01580000
         DC    X'00'                   ENQ                              01590000
         ORG                                                            01600000
*********************************************************************** 01610000
*        Work area (First Save Area)                                  * 01620000
*********************************************************************** 01630000
FSA      DSECT                                                          01640000
         DS    3F                      first 3 words of FSA             01650000
PGMNAME  DS    CL8                     name of utility program          01660000
XCTLL    XCTL  EPLOC=PGMNAME,SF=L                                       01670000
*                                                                       01680000
         IKJTCB DSECT=YES                                               01690000
         YREGS                                                          01700000
         END   BEGIN                                                    01710000
*********************************************************************** 01720000
*                                                                     * 01730000
*        SVC SCREENING ROUTINE                                        * 01740000
*                                                                     * 01750000
*        This routine is invoked as a T3-SVC each time                * 01760001
*        the ENQ or DEQ SVCs are issued.                              * 01770001
*                                                                     * 01780001
*********************************************************************** 01790000
SCREEN   RSECT                                                          01800000
SCREEN   RMODE ANY                                                      01810000
         USING CVTMAP,R3               CVT                              01820001
         USING TCB,R4                  TCB                              01830001
         USING RBBASIC,R5              SVRB                             01840001
         USING SCREEN,R6               Local Base                       01850001
**       USING ASCB,R7                 ASCB                             01860001
         LR    R9,R1                   point to ENQ/DEQ parm list       01870001
         USING PELBASIC,R9                                              01880001
*---------------------------------------------------------------------* 01890000
*                                                                     * 01900000
*        If the first QNAME in the ENQ/DEQ parm list is "SYSDSN",     * 01910000
*        change it to "SYSNOENQ".                                     * 01920000
*                                                                     * 01930000
*---------------------------------------------------------------------* 01940000
         MODESET EXTKEY=RBT234,WORKREG=2 SWITCH TO CALLER'S KEY         01950000
         L     R2,PELMAJA              ADDR OF THE QNAME                01960001
         CLC   OLDQNAME,0(R2)          QNAME=SYSDSN?                    01970000
         BNE   SCREEN45                NO, IGNORE                       01980000
         LA    R2,NEWQNAME             NEW QNAME                        01990000
         ST    R2,PELMAJA              UPDATE ADDR OF THE QNAME         02000001
SCREEN45 EQU   *                                                        02010000
*---------------------------------------------------------------------* 02020000
*                                                                     * 02030000
*        XCTL TO SVC ROUTINE                                          * 02040000
*                                                                     * 02050000
*              1. LOCATE SVC ENTRY IN SVC TABLE                       * 02060000
*              2. RESTORE R15,R0,R1                                   * 02070000
*              3. BRANCH TO SVC ROUTINE                               * 02080000
*                                                                     * 02090000
*---------------------------------------------------------------------* 02100000
         L     R8,CVTABEND             SECONDARY CVT                    02110001
         USING SCVTSECT,R8                                              02120001
         LA    R2,RBBASIC-RBINTCOD     offset to interrupt code         02130001
         LNR   R2,R2                   make it negative                 02140001
         AL    R2,RBLINK               point at RBINTCOD in the PRB     02150001
         LH    R9,0(,R2)               Interrupt code (SVC num: 48,56)  02160001
         SLL   R9,3                    MULT BY 8                        02170001
         AL    R9,SCVTSVCT             ADD ORIGIN OF SVC TABLE          02180001
         USING SVCENTRY,R9                                              02190000
*                                                                       02200000
         L     R6,SVCEP                GET EP ADDR OF SVC RTNE          02210000
         DROP  R6                      MAIN BASE REG                    02220000
*---------------------------------------------------------------------* 02230001
*                                                                     * 02240001
*        Exit to the ENQ/DEQ SVC Routine                              * 02250001
*                                                                     * 02260001
*---------------------------------------------------------------------* 02270001
         MODESET EXTKEY=ZERO           switch back to key=zero          02280000
         L     R14,CVTEXP1             ADDR OF EXIT PROLOGUE            02290000
         L     R15,RBGRS15             Restore R15 from SVRB            02300001
         LM    R0,R1,RBGRS0            Restore R0,R1 from SVRB          02310001
         BSM   0,R6                    GO TO THE SVC ROUTINE            02320000
*                                                                       02330000
OLDQNAME DC    CL8'SYSDSN'             OLD QNAME                        02340000
NEWQNAME DC    CL8'SYSNOENQ'           NEW QNAME                        02350000
         PRINT NOGEN                                                    02360000
PRINT    OPSYN ANOP                                                     02370000
         CVT   DSECT=YES                                                02380000
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT                    02390000
         IHASVC                        SVC TABLE ENTRY                  02400000
         IKJTCB DSECT=YES                                               02410000
         IKJRB DSECT=YES                                                02420000
*MVS/SP  ISGPEL                        Parameter Element List           02430003
PELBASIC DSECT                                                          02440003
PELLAST  DS    X                  FLAG BYTE 1                           02450003
PELMILEN DS    X                  RNAME LENGTH                          02460003
PELFLAG  DS    X                  FLAG BYTE 2                           02470003
PELRET   DS    X                  RETURN CODE AREA IN USER PEL          02480003
PELMAJA  DS    A                  ADDRESS OF QNAME - NOT USED WHEN      02490003
PELMINA  DS    A                  ADDRESS OF RNAME - NOT USED WHEN      02500003
*        YREGS                                                          02510003
R0       EQU   0                                                        02520003
R1       EQU   1                                                        02530003
R2       EQU   2                                                        02540003
R3       EQU   3                                                        02550003
R4       EQU   4                                                        02560003
R5       EQU   5                                                        02570003
R6       EQU   6                                                        02580003
R7       EQU   7                                                        02590003
R8       EQU   8                                                        02600003
R9       EQU   9                                                        02610003
R10      EQU   10                                                       02620003
R11      EQU   11                                                       02630003
R12      EQU   12                                                       02640003
R13      EQU   13                                                       02650003
R14      EQU   14                                                       02660003
R15      EQU   15                                                       02670003
         END                                                            02680000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  02690000
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 02700003
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   02710003
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   02720003
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   02730003
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      02740003
//SYSPRINT DD SYSOUT=*                                                  02750000
//*                                                                     02760000
//LKED    EXEC PGM=HEWLKED,PARM='MAP,RENT,AC=1'                         02770000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       02780003
//SYSLMOD  DD DSN=SYS1.P390.LINKLIB(BYPASSNQ),DISP=SHR                  02790000
//SYSPRINT DD SYSOUT=*                                                  02800000
//*                                                                     02810000
//CREATE EXEC PGM=IEHMOVE                                               02820000
//SYSUT1 DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=Z5RES1                       02830003
//DD1    DD DSN=GILBERT.X80,DISP=SHR                                    02840000
//DD2    DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=Z5RES1                       02850003
//SYSPRINT DD SYSOUT=*                                                  02860000
     COPY      DSNAME=GILBERT.X80,                                     X02870000
               TO=3390=Z5RES1,                                         X02880003
               RENAME=GILBERT.TEST29                                    02890000
//*                                                                     02900000
//GO      EXEC PGM=BYPASSNQ,PARM=IEHPROGM                               02910000
//STEPLIB  DD DSN=SYS1.P390.LINKLIB,DISP=SHR                            02920000
//SYSPRINT DD SYSOUT=*                                                  02930000
  RENAME DSNAME=IBMUSER.TEST29,VOL=3390=Z5RES1,NEWNAME=GILBERT.TEST29B  02940003
 SCRATCH DSNAME=IBMUSER.TEST29B,VOL=3390=Z5RES1                         02950003
//DD1      DD UNIT=3390,VOL=SER=Z5RES1,DISP=OLD                         02960003
//ABNLTERM DD SYSOUT=*                                                  02970000
//SYSUDUMP DD SYSOUT=*                                                  02980000
./ ADD NAME=CANMSGCL 0104-88242-06210-1259-00136-00080-00050-CBT472
//GILBERTC JOB (ACCT#),CANMSGCL,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040004
*********************************************************************** 00060000
*                                                                     * 00070000
*              CANCEL JOB'S MSGCLASS AFTER NN HOURS                   * 00080000
*                                                                     * 00090000
*********************************************************************** 00100000
*                                                                     * 00110000
*        THIS PROGRAM ALLOWS YOU TO PURGE THE OUTPUT ASSOCIATED       * 00120000
*        WITH THE MSGCLASS OF THE JOB AFTER A CERTAIN NUMBER OF       * 00130000
*        HOURS THAT YOU SPECIFY IN THE PARM FIELD OF THE EXEC         * 00140000
*        STATEMENT.                                                   * 00150000
*                                                                     * 00160000
*        EXAMPLE:                                                     * 00170000
*                                                                     * 00180000
*            //MYJOB    JOB ACCT#,CLASS=A,MSGCLASS=X                  * 00190000
*            //COPY1   EXEC PGM=IEBCOPY                               * 00200000
*            //...      DD   ...                                      * 00210000
*            //CONDPURG EXEC PGM=CANMSGCL,PARM=2,COND=(0,NE,COPY1)    * 00220000
*                                                                     * 00230000
*        IF THE 'COPY1' STEP ENDS AT 10:28 AM WITH A RETURN CODE      * 00240000
*        EQUAL TO ZERO, THE 'CONDPURG' STEP EXECUTES AND ISSUES       * 00250000
*        THE FOLLOWING COMMAND:                                       * 00260000
*                                                                     * 00270000
*               $TA,T=12.28,'$OJ01234,Q=X,CANCEL'                     * 00280002
*                                                                     * 00290000
*        NOTES:                                                       * 00300000
*                                                                     * 00310000
*           1. THE PROGRAM MUST BE APF-AUTHORIZED.                    * 00320000
*                                                                     * 00330000
*           2. THE MSGCLASS MUST BE HELD.                             * 00340000
*                                                                     * 00350000
*           3. THE NUMBER OF OUTSTANDING AUTOMATIC COMMANDS IS        * 00360000
*              LIMITED BY THE 'AUTOCMD' PARAMETER IN JES2PARM.        * 00370000
*              IF EXCEEDED, THE COMMAND IS IGNORED.                   * 00380000
*                                                                     * 00390002
*           4. THE PROGRAM WORKS WITH 5-DIGIT JOB NUMBERS.            * 00400002
*                                                                     * 00410000
*********************************************************************** 00420000
CANMSGCL CSECT                                                          00430000
         SAVE  (14,12),,'GSF UTILITIES - CANMSGCL R107'                 00440003
         BALR  R12,0                                                    00450000
         USING *,R12                                                    00460000
         L     R2,0(,R1)               PARM ADDRESS                     00470000
         LH    R14,0(,R2)              PARM LENGTH                      00480000
         BCTR  R14,0                                                    00490000
         PACK  DELAY,2(*-*,R2)         PACK NUMBER OF HOURS             00500000
         EX    R14,*-6                 EXECUTE PACK INSTRUCTION         00510000
*                                                                       00520000
*        GET JOB NUMBER FROM SSIB                                       00530000
*                                                                       00540000
         L     R4,540(,0)              PSATOLD                          00550001
         L     R5,TCBJSCB-TCB(,R4)     PTR TO JSCB                      00560001
         USING IEZJSCB,R5                                               00570001
         L     R6,JSCBSSIB             PTR TO SSIB                      00580001
         USING SSIB,R6                                                  00590001
         MVC   JOBID+0(1),SSIBJBID+0   J                                00600000
         MVC   JOBID+1(5),SSIBJBID+3    01234                           00610002
         L     R8,JSCBJCT              PTR TO JCT                       00620001
         USING JCT,R8                                                   00630001
         MVC   MSGCLASS,JCTJMGPO       MSGCLASS                         00640000
         DROP  R5,R6,R8                JSCB, SSIB, JCT                  00650001
*                                                                       00660000
*        GET CURRENT TIME, MOVE IT TO "HHMM" FIELD                      00670000
*                                                                       00680000
         TIME  DEC                     HHMMSS00                         00690000
         SRL   R0,12(0)                000HHMM0                         00700000
         ST    R0,SYSTIME              000HHMM0                         00710000
         OI    SYSTIME+3,15            000HHMMF                         00720000
         UNPK  HHMM+3(2),SYSTIME+2(2)  MOVE MM                          00730000
         OI    SYSTIME+2,15            000HHF??                         00740000
         AP    SYSTIME+1(2),DELAY      ADD HOURS FROM PARM              00750000
         OI    SYSTIME+2,15            000HHF??                         00760000
         UNPK  HHMM+0(2),SYSTIME+1(2)  MOVE HH                          00770000
         MVI   HHMM+2,C'.'             HH.MM                            00780000
         MODESET KEY=ZERO,MODE=SUP                                      00790000
         SLR   R0,R0                   DUMMY CONSOLE ID                 00800000
         MGCR  MGCR1L                  ISSUE COMMAND                    00810000
         RETURN  (14,12),RC=00         GO BACK TO SYSTEM                00820000
*                                                                       00830000
MGCR1L   WTO   '$TA,T=HH.MM,''$OJ01234,Q=$,CANCEL''',MF=L               00840002
HHMM     EQU   MGCR1L+10               HH.MM                            00850000
JOBID    EQU   MGCR1L+19,6             JOB ID                           00860002
MSGCLASS EQU   MGCR1L+28,1             MESSAGE CLASS                    00870002
DELAY    DS    P'24'                   NUMBER OF HOURS, FROM PARM       00880000
SYSTIME  DS    F                       CURRENT SYSTEM TIME              00890000
*                                                                       00900000
         IKJTCB LIST=NO                TCB DSECT                        00910000
*                                                                       00920000
         IEZJSCB                       JSCB DSECT                       00930000
*                                                                       00940000
JCT      DSECT                                                          00950000
         DS    4F                      JCT PREFIX                       00960000
         IEFAJCTB                      JCT DSECT                        00970000
*                                                                       00980000
         IEFJSSIB                      SSIB DSECT                       00990000
*                                                                       01000004
*        YREGS                                                          01010004
R0       EQU   0                                                        01020004
R1       EQU   1                                                        01030004
R2       EQU   2                                                        01040004
R3       EQU   3                                                        01050004
R4       EQU   4                                                        01060004
R5       EQU   5                                                        01070004
R6       EQU   6                                                        01080004
R7       EQU   7                                                        01090004
R8       EQU   8                                                        01100004
R9       EQU   9                                                        01110004
R10      EQU   10                                                       01120004
R11      EQU   11                                                       01130004
R12      EQU   12                                                       01140004
R13      EQU   13                                                       01150004
R14      EQU   14                                                       01160004
R15      EQU   15                                                       01170004
         END                                                            01180000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01200004
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01210004
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01220004
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01230003
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 01240003
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01250004
//SYSPRINT DD SYSOUT=*                                                  01260003
//*                                                                     01270000
//LKED    EXEC PGM=HEWL,PARM='MAP,REUS,AC=1'                            01280003
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01290004
//SYSPRINT DD SYSOUT=*                                                  01300003
//SYSLMOD  DD DSN=SYS2.AUTHLIB(CANMSGCL),DISP=SHR                       01310003
//*                                                                     01320000
//GO      EXEC PGM=CANMSGCL,PARM=2                                      01330003
//STEPLIB  DD DSN=SYS2.AUTHLIB,DISP=SHR                                 01340003
//SYSUDUMP DD SYSOUT=*                                                  01350000
//ABNLNODP DD DUMMY                                                     01360000
./ ADD NAME=CLEANUP  0406-81037-06210-1313-00422-00223-00147-CBT472
//GILBERTC JOB (ACCT#),CLEANUP,                                         00010005
//*RESTART=HMIG,                                                        00020000
// NOTIFY=&SYSUID,                                                      00030000
// CLASS=A,MSGCLASS=X,COND=(1,LT)                                       00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050006
*********************************************************************** 00070000
*                                                                     * 00080000
* MODULE NAME = CLEANUP                                               * 00090003
*                                                                     * 00100003
* DESCRIPTIVE NAME = Data Set Clean-up Utility (OS/VS2)               * 00110006
*                                                                     * 00120003
* FUNCTION = The "CLEANUP" program deletes existing data sets         * 00130003
*            created and/or used in your job.  It has three modes     * 00140003
*            of operation:  Job restart, Job Clean-up, Never-open.    * 00150003
*                                                                     * 00160000
* STATUS = R506                                                       * 00170006
*                                                                     * 00180003
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00190005
*                                                                     * 00200003
* NOTES = SEE BELOW                                                   * 00210003
*                                                                     * 00220003
*    DEPENDENCIES = OS/VS2                                            * 00230006
*                                                                     * 00240003
*    AUTHORIZATION = NONE                                             * 00250003
*                                                                     * 00260003
*    RESTRICTIONS = NONE                                              * 00270003
*                                                                     * 00280003
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            * 00290003
*                                                                     * 00300003
*    PROCESSOR = IBM ASSEMBLER XF                                     * 00310006
*                                                                     * 00320003
*    MODULE SIZE = 4K                                                 * 00330003
*                                                                     * 00340003
*    ATTRIBUTES = REUSABLE, PROBLEM STATE, KEY 8                      * 00350006
*                                                                     * 00360003
* OPERATION = See Below                                               * 00370003
*                                                                     * 00380003
*        1. Job restart                                               * 00390000
*                                                                     * 00400000
*            When executed at the beginning of the job you're         * 00410000
*            re-starting or re-running, CLEANUP deletes non-gdg       * 00420000
*            data sets that were created by a previous run of the     * 00430000
*            same job.  This prevents Job failures that would         * 00440000
*            result from "NOT CATLG 2" and IGD17001I messages.        * 00450000
*                                                                     * 00460000
*            Sample JCL :                                             * 00470000
*                                                                     * 00480000
*              //MYJOB   JOB (ACCT#),'JOHN DOE', . . .                * 00490000
*              //*                                                    * 00500000
*              //CLEANUP EXEC PGM=CLEANUP                             * 00510000
*              //*                                                    * 00520000
*              //STEP1   EXEC PROC=MYPROC, . . .                      * 00530000
*                                                                     * 00540000
*            Notes:                                                   * 00550000
*                                                                     * 00560000
*              o  no DD statements, control cards or PARM are         * 00570000
*                 necessary.  CLEANUP automatically retrieves data    * 00580000
*                 set names from in-storage images of the job's JCL.  * 00590000
*                                                                     * 00600000
*              o  CLEANUP may be executed more than once in a job.    * 00610000
*                 Each execution will consider data sets created      * 00620000
*                 in subsequent steps.                                * 00630000
*                                                                     * 00640000
*              o  If PARM=RECALL is specified, CLEANUP invokes        * 00650002
*                 the RECALL utility after it has completed its       * 00660002
*                 clean-up work.                                      * 00670002
*                                                                     * 00680000
*        2. Job clean-up                                              * 00690000
*                                                                     * 00700000
*            When executed as the very last step of a job,            * 00710000
*            CLEANUP deletes non-gdg data sets that were created      * 00720000
*            during the job's execution.                              * 00730000
*                                                                     * 00740000
*            Sample JCL :                                             * 00750000
*                                                                     * 00760000
*              //MYJOB   JOB (ACCT#),'JOHN DOE', . . .                * 00770000
*              //*                                                    * 00780000
*              //STEP1   EXEC PROC=MYPROC, . . .                      * 00790000
*              //*                                                    * 00800000
*              //CLEANUP EXEC PGM=CLEANUP                             * 00810000
*              //                                                     * 00820000
*                                                                     * 00830000
*        3. Never-OPEN                                                * 00840000
*                                                                     * 00850000
*            When executed with PARM=NEVEROPEN, CLEANUP deletes       * 00860000
*            data sets that have been allocated but have not been     * 00870000
*            opened for output by any program.  DD statements must    * 00880000
*            be explicitely specified in CLEANUP's step for the       * 00890000
*            data sets to delete.                                     * 00900000
*                                                                     * 00910000
*            Sample JCL :                                             * 00920000
*                                                                     * 00930000
*              //MYJOB   JOB (ACCT#),'JOHN DOE', . . .                * 00940000
*              //*                                                    * 00950000
*              //STEP1   EXEC PGM=MYPROG1, . . .                      * 00960000
*              //OUTDD    DD  DSN=SELDOM.OPEN1(+1),DISP=(,CATLG)      * 00970000
*              //*                                                    * 00980000
*              //STEP2   EXEC PGM=MYPROG2, . . .                      * 00990000
*              //OUTDD    DD  DSN=SELDOM.OPEN2,DISP=(,CATLG)          * 01000000
*              //*                                                    * 01010000
*              //CLEANUP EXEC PGM=CLEANUP,PARM=NEVEROPEN              * 01020000
*              //DD1      DD  DSN=SELDOM.OPEN1(+1),DISP=OLD           * 01030000
*              //DD2      DD  DSN=SELDOM.OPEN2,DISP=OLD               * 01040000
*                                                                     * 01050000
* Method of Operation (functions 1 & 2)                               * 01060003
*                                                                     * 01070000
*         o  CLEANUP scans the SWA control blocks of every step       * 01080000
*            of your job for non-GDG data sets that will be           * 01090000
*            (function 1) or have been (function 2) created           * 01100000
*            with DISP=(NEW,CATLG) or DISP=(MOD,CATLG).               * 01110000
*                                                                     * 01120000
*         o  Any of these data sets currently catalogued are          * 01130000
*            dynamically allocated and deleted.                       * 01140000
*                                                                     * 01150000
* PARAMETERS = PARM=NEVEROPEN indicates that CLEANUP should only      * 01160003
*              delete those data sets that are allocated in its own   * 01170003
*              step and have a null BLKSIZE (i.e. have never been     * 01180003
*              OPEN'd for output).                                    * 01190003
*                                                                     * 01200000
* Return codes = See below                                            * 01210003
*                                                                     * 01220000
*            00     Normal end                                        * 01230000
*            16     Parm is invalid                                   * 01240000
*                                                                     * 01250000
* Messages = See below                                                * 01260003
*                                                                     * 01270000
*            PARM FIELD IS INVALID, when the PARM specifies           * 01280000
*              something other than NEVEROPEN.                        * 01290000
*                                                                     * 01300000
*            CLEANUP - data-set-name DELETED (volser)                 * 01310000
*              for each data set deleted                              * 01320000
*                                                                     * 01330000
*            CLEANUP - data-set-name DELETED (MIGRAT)                 * 01340000
*              for each migrated data set deleted with HDELETE        * 01350000
*                                                                     * 01360000
* Change Activity                                                     * 01370000
*                                                                     * 01380000
*04.02   XCTL to PGM=RECALL at EOJ if PARM=RECALL                     * 01390002
*04.03   IGNORE DISP=(MOD,DELETE) DATA SETS WITH PARM=NEVEROPEN       * 01400003
*04.04   Increase message length to 80 characters.                    * 01410004
*04.05   Pass PARM='' to RECALL program                               * 01420005
*05.06   OS/VS2                                                       * 01430006
*********************************************************************** 01440000
         LCLC  &STR                                                     01450006
CLEANUP  CSECT                                                          01460000
         SAVE  (14,12),,'GSF Utilities - CLEANUP R506'                  01470006
         LR    R12,R15                                                  01480005
         USING CLEANUP,R12                                              01490005
         GETMAIN R,LV=DYNAML                                            01500000
         ST    R13,4(,R1)                                               01510000
         ST    R1,8(,R13)                                               01520000
         LM    R13,R1,8(R13)                                            01530000
         USING DYNAM,R13                                                01540000
         L     R9,0(,R1)               SAVE THE PARM ADDR               01550000
*---------------------------------------------------------------------* 01560003
*                                                                     * 01570003
*        Set up SWA scan from first step after our own.               * 01580003
*                                                                     * 01590003
*        If we're the last step of the job, set up scan               * 01600003
*        from beginning of job.                                       * 01610003
*                                                                     * 01620003
*---------------------------------------------------------------------* 01630003
INIT50   L     R3,540(,0)              MY TCB (PSATOLD-PSA)             01640000
         L     R4,TCBJSCB-TCB(,R3)     MY JSCB                          01650000
         USING IEZJSCB,R4                                               01660000
         L     R5,JSCSCT               CURRENT STEP'S SCT PREFIX        01670000
         USING SCT,R5                                                   01680000
         MVI   MODE,C'F'               processing mode is "FIRST"       01690001
         ICM   R1,B'0111',SCTANSCT     last step of this job?           01700000
         BNZ   INIT59                  no, jump                         01710000
         L     R1,JSCBJCT              yes, point to JCT                01720000
         ICM   R5,B'0111',JCTSDKAD-JCT(R1) SCT of first step to be run  01730000
         MVI   MODE,C'L'               processing mode is "LAST"        01740001
*                                                                       01750000
INIT59   SLR   R10,R10                 SET RC=00 (NOTHING DELETED)      01760000
*---------------------------------------------------------------------* 01770003
*                                                                     * 01780003
*        FIND RESTART STEP, IF SPECIFIED IN THE PARM                  * 01790003
*                                                                     * 01800003
*---------------------------------------------------------------------* 01810003
INIT60   LTR   R9,R9                   PARM FROM JCL OR CPPL            01820001
         BNM   LOOPSCT                 no parm or TMP-INVOKED           01830000
         CLI   1(R9),0                 PARM=""                          01840000
         BE    LOOPSCT                 yes, jump                        01850000
INIT64   CLI   1(R9),9                 PARM=NEVEROPEN?                  01860001
         BNE   BADPARM                 no, parm is invalid              01870000
         CLC   =C'NEVEROPEN',2(R9)     PARM=NEVEROPEN?                  01880000
         BNE   BADPARM                 no, parm is invalid              01890000
         MVI   MODE,C'O'               processing mode is "OPEN"        01900002
         L     R5,JSCSCT               CURRENT STEP'S SCT PREFIX        01910000
         B     LOOPSCT                                                  01920000
*                                                                       01930000
BADPARM  WTO   'CLEANUP - Parm Field is invalid',ROUTCDE=(2,11)         01940000
         LA    R10,16                  RC=16                            01950000
         B     GOBACK                                                   01960000
*********************************************************************** 01970000
*                                                                     * 01980003
*        SCAN SCT/SIOT CHAINS                                         * 01990003
*                                                                     * 02000003
*           1. SELECT NON-GDG DATA SETS THAT HAVE DISP=(NEW,CATLG)    * 02010003
*              OR DISP=(MOD,CATLG)                                    * 02020003
*                                                                     * 02030003
*           2. ALLOCATE SELECTED DATA SETS WITH DISP=(OLD,DELETE)     * 02040003
*                                                                     * 02050003
*           3. UNALLOCATE DATA SETS THAT WERE SUCCESSFULLY ALLOCATED  * 02060003
*              TO DELETE THEM                                         * 02070003
*                                                                     * 02080003
*********************************************************************** 02090000
*LOOP                                                                   02100000
LOOPSCT  ICM   R1,B'0111',SCTFSIOT     SVA OF 1ST SIOT                  02110000
         BZ    NEXTSTEP                NO DD STATEMENTS, TRY NEXT SCT   02120000
*--LOOP                                                                 02130000
LOOPSIOT LA    R6,16(,R1)              PASS SIOT ADDRESS                02140006
         USING INDMSIOT,R6                                              02150000
         ICM   R1,B'0111',SCTPJFCB     SVA OF JFCB                      02160000
         LA    R7,16(,R1)              LOAD JFCB ADDRESS                02170006
         USING INFMJFCB,R7                                              02180000
*                                                                       02190000
*        Set-up message                                                 02200000
*                                                                       02210000
SETUPMSG MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE  02220000
         MVC   WTO1TEXT,WTO1TEXT-1     clear work area                  02230000
         MVC   WTO1TEXT(L'DSNAME),DSNAME  move dsname                   02240000
         LA    R2,WTO1TEXT             start of dsname                  02250000
         LA    R2,1(,R2)             - BUMP POINTER                     02260000
         CLI   0(R2),C' '            - END OF MSG?                      02270000
         BNE   *-8                   - NOT YET, TRY NEXT CHARACTER      02280000
         MVC   1(7,R2),=C'deleted'     action taken                     02290000
         CLI   MODE,C'O'               PARM=NEVEROPEN?                  02300001
         BE    NOOPEN                  yes, bypass filters              02310006
*                                                                       02320000
*        Filter data sets: DSN=A.B.C(+1),DISP=(,CATLG)                  02330000
*                                                                       02340000
FILTER   TM    SCTSDISP,SIOTCTLG       DISP=(,CATLG) ?                  02350000
         BNO   NEXTSIOT                NO, JUMP                         02360000
         TM    SCTSBYT3,SCTSNEW+SCTSMOD   DISP=NEW/MOD ?                02370000
         BZ    NEXTSIOT                NO, JUMP                         02380000
         TM    JFCBIND1,JFCGDG         CHECK FOR (+1)                   02390000
         BO    NEXTSIOT                JUMP, THIS IS A GDG              02400000
         CLI   MODE,C'L'               MODE=LAST?                       02410001
         BE    ALLOC                   yes, bypass catalog search       02420001
*                                                                       02430000
*        Look-up data set name in the catalog                           02440000
*                                                                       02450000
LOCATE   LM    R14,R1,CAMLST26         MODEL CAMLST                     02460000
         SLR   R0,R0                   no CVOL ptr                      02470000
         LA    R1,WORK265              WORK AREA                        02480000
         STM   R14,R1,CAMLST2          UPDATE CAMLST IN DYNAMIC STRGE   02490000
         LOCATE CAMLST2                GET VOLSER                       02500000
         LTR   R15,R15                 IS IT CATALOGED?                 02510000
         BNZ   NEXTSIOT                NO, IGNORE                       02520000
         MVI   09(R2),C'('             surround volser with parentheses 02530000
         MVC   10(6,R2),WORK265+6      yes, move volser                 02540000
         MVI   16(R2),C')'             surround volser with parentheses 02550000
         B     ALLOC                                                    02560006
*                                                                       02570000
*        PARM=NEVEROPEN                                                 02580000
*                                                                       02590000
NOOPEN   TM    SCTSDISP,SIOTDLET       DISP=(,DELETE)?                  02600006
         BO    NEXTSIOT                YES, JUMP                        02610003
         LM    R14,R1,CAMLST28         MODEL CAMLST                     02620003
         LA    R0,JFCBVOLS             volser                           02630000
         LA    R1,DS1FMTID             WORK AREA                        02640000
         STM   R14,R1,CAMLST2          UPDATE CAMLST IN DYNAMIC STRGE   02650000
         OBTAIN CAMLST2                GET F1-DSCB                      02660000
         LTR   R15,R15                 found on disk?                   02670000
         BNZ   NEXTSIOT                NO, IGNORE                       02680000
         OC    DS1BLKL,DS1BLKL         BLKSIZE=0?                       02690000
         BNZ   NEXTSIOT                NO, IGNORE                       02700000
         MVC   09(12,R2),=C'(Never OPEN)'                               02710000
*                                                                       02720000
*        ALLOCATE                                                       02730000
*                                                                       02740000
ALLOC    MVI   S99RB+1,1               FUNCTION=ALLOC                   02750000
         NI    S99TUPTR,255-X'80'      USE ALL OF THE KEYS              02760000
         LA    1,=A(S99RB+VL)          SVC99 REQUEST BLOCK              02770000
         SVC   99                      ALLOCATE THE DATA SET            02780000
         LTR   R15,R15                 ALLOC OK?                        02790000
         BNZ   NEXTSIOT                NO, JUMP                         02800000
*                                                                       02810000
*        UNALLOCATE                                                     02820000
*                                                                       02830000
         MVI   S99RB+1,2               FUNCTION=UNALLOC                 02840000
         OI    S99TUPTR,X'80'          KEEP ONLY THE DDNAME KEY         02850000
         LA    1,=A(S99RB+VL)          SVC99 REQUEST BLOCK              02860000
         SVC   99                      ALLOCATE THE DATA SET            02870000
*                                                                       02880000
&STR     SETC  (80)' '                                                  02890004
WTO1     WTO   'CLEANUP - &STR',ROUTCDE=11                              02900000
WTO1TEXT EQU   WTO1+18,80                                               02910004
*                                                                       02920000
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     NEXT SIOT'S PREFIX               02930000
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP     02940000
*--ENDLOOP                                                              02950000
NEXTSTEP CLI   MODE,C'O'               PARM=NEVEROPEN?                  02960001
         BE    GOBACK                  yes, we're done                  02970000
         ICM   R5,B'0111',SCTANSCT     NEXT SCT PREFIX                  02980000
         BNZ   LOOPSCT                 PROCESS NEXT STEP                02990000
*ENDLOOP                                                                03000000
         DROP  R5,R6,R7                SCT, SIOT, JFCB                  03010000
*                                                                       03020001
GOBACK   EQU   *                                                        03030006
         L     R13,4(,R13)             CALLER'S SAVE AREA               03040001
         LR    R15,R10                 RETURN CODE                      03050000
         RETURN (14,12),RC=(15)                                         03060000
*---------------------------------------------------------------------* 03070003
*                                                                     * 03080003
*        DATA, WORK AREAS                                             * 03090003
*                                                                     * 03100003
*---------------------------------------------------------------------* 03110003
VL       EQU   X'80000000'                                              03120000
S99RB    DC    A(X'14010000',0,S99TUPTR,0,0)                            03130000
S99TUPTR DC    A(S99TU01,S99TU02,S99TU04,S99TU05,S99TU6C+VL)            03140000
S99TU01  DC    AL2(X'01',1,L'DDNAME)   DDNAME KEY                       03150000
DDNAME   DC    C'$CLEANUP'                                              03160000
S99TU02  DC    AL2(X'02',1,L'DSNAME)   DSNAME KEY                       03170000
DSNAME   DS    CL44                                                     03180000
S99TU04  DC    AL2(X'04',1,1),X'01'    STATUS=OLD                       03190000
S99TU05  DC    AL2(X'05',1,1),X'04'    DISP=DELETE                      03200000
S99TU6C  DC    AL2(X'6C',0)            UNIT=(,,DEFER)                   03210000
CAMLST26 CAMLST NAME,DSNAME,,*-*       CAMLST FOR LOCATE MACRO          03220000
CAMLST28 CAMLST SEARCH,DSNAME,*-*,*-*  CAMLST FOR OBTAIN MACRO          03230000
*---------------------------------------------------------------------* 03240003
*                                                                     * 03250003
*        Dynamic storage                                              * 03260003
*                                                                     * 03270003
*---------------------------------------------------------------------* 03280003
DYNAM    DSECT                                                          03290000
         DS    18F                                                      03300000
MODE     DS    C'F'                    FIRST/LAST/OPEN                  03310001
CAMLST2  CAMLST NAME,DSNAME,,WORK265   CAMLST FOR LOCATE MACRO          03320000
WORK265  DS    CL265                   LOCATE macro                     03330001
         IECSDSL1 1                    F1-DSCB                          03340000
         DS    5X                      CCHHR                            03350000
DYNAML   EQU   *-DYNAM                                                  03360000
*---------------------------------------------------------------------* 03370003
*                                                                     * 03380003
*        DSECTS FOR VARIOUS MVS CONTROL BLOCKS                        * 03390003
*                                                                     * 03400003
*---------------------------------------------------------------------* 03410003
         PRINT NOGEN                                                    03420000
         IKJTCB LIST=NO                SYS1.AMODGEN                     03430000
         IEZJSCB ,                     SYS1.AMODGEN                     03440000
JCT      DSECT                         Job Control Table                03450000
         DS    4F                      Prefix                           03460000
         IEFAJCTB ,                    SYS1.AMODGEN                     03470000
SCT      DSECT                         Step Control Table               03480000
         DS    4F                      Prefix                           03490000
         IEFASCTB ,                    SYS1.AMODGEN                     03500000
SIOT     DSECT                         Step I/O Table                   03510000
SIOTDLET EQU   4                       BIT 5 - DELETE DATA SET          03520006
SIOTCTLG EQU   2                       BIT 6 - CATALOG THE DATA         03530006
SCTSNEW  EQU   4                       BIT 5 - NEW DATA SET             03540006
SCTSMOD  EQU   2                       BIT 6 - MODIFIED DATA SET        03550006
SCTSOLD  EQU   1                       BIT 7 - OLD DATA SET             03560006
         DS    4F                      Prefix                           03570000
         IEFASIOT ,                    SYS1.AMODGEN                     03580000
JFCB     DSECT                         Job File Control Block           03590000
         DS    4F                      Prefix                           03600000
         IEFJFCBN ,                    SYS1.AMODGEN                     03610000
         CVT   LIST=NO,DSECT=YES       COMMUNICATION VECTOR TABLE       03620000
**       IEFJESCT TYPE=DSECT           JES CONTROL TABLE                03630006
*        YREGS                         SYS1.MACLIB                      03640006
R0       EQU   0                                                        03650006
R1       EQU   1                                                        03660006
R2       EQU   2                                                        03670006
R3       EQU   3                                                        03680006
R4       EQU   4                                                        03690006
R5       EQU   5                                                        03700006
R6       EQU   6                                                        03710006
R7       EQU   7                                                        03720006
R8       EQU   8                                                        03730006
R9       EQU   9                                                        03740006
R10      EQU   10                                                       03750006
R11      EQU   11                                                       03760006
R12      EQU   12                                                       03770006
R13      EQU   13                                                       03780006
R14      EQU   14                                                       03790006
R15      EQU   15                                                       03800006
         END                                                            03810000
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR                                 03840000
//         DD DSN=SYS1.MACLIB,DISP=SHR                                  03850000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   03860006
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   03870006
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   03880006
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      03890006
//SYSPRINT DD SYSOUT=*                                                  03900000
//                                                                      03910006
//*                                                                     03920000
//LKED    EXEC PGM=IEWL,PARM=(MAP,REUS)                                 03930000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       03940006
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(CLEANUP),DISP=SHR               03950005
//SYSPRINT DD SYSOUT=*                                                  03960000
//*                                                                     03970000
//NEVROPEN EXEC PGM=CLEANUP,PARM=NEVEROPEN                              03980000
//STEPLIB  DD DSN=GSFSOFT.PRISM-CS.LOAD(CLEANUP),DISP=SHR               03990005
//NODSORG  DD DSN=GILBERT.CLEANUP2,DISP=(,CATLG),                       04000000
// UNIT=VIO,SPACE=(TRK,1)                                               04010000
//*SORGPS  DD DSN=GILBERT.CLEANUP,DISP=(,CATLG),                        04020000
//*UNIT=VIO,SPACE=(TRK,1),DSORG=PS                                      04030000
//SYSDEBUG DD SYSOUT=*                                                  04040000
//SYSUDUMP DD SYSOUT=*                                                  04050000
//*                                                                     04060000
//GO      EXEC PGM=CLEANUP                                              04070000
//STEPLIB  DD DSN=GSFSOFT.PRISM-CS.LOAD(CLEANUP),DISP=SHR               04080005
//SYSDEBUG DD SYSOUT=*                                                  04090000
//SYSUDUMP DD SYSOUT=*                                                  04100000
//*                                                                     04110000
//STEP1   EXEC PGM=IEFBR14                                              04120000
//TAPEOUT  DD DSN=GILBERT.CLEANUP,DISP=(,CATLG),                        04130000
// UNIT=VIO,SPACE=(TRK,1)                                               04140000
//*TEP2   EXEC PGM=IEFBR14                                              04150000
//*APEOUT  DD DSN=GILBERT.CLEANUP,DISP=(OLD,DELETE)                     04160000
//*                                                                     04170000
//HMIG    EXEC PGM=IKJEFT01                                             04180000
//SYSTSPRT DD SYSOUT=*                                                  04190000
//SYSTSIN  DD *                                                         04200000
HMIG 'IBMUSER.CLEANUP' WAIT                                             04210000
//*                                                                     04220000
./ ADD NAME=CLS      0300-90079-06210-1109-00028-00003-00000-CBT472
//GILBERTK JOB (ACCT#),CLS,                                             00010000
// NOTOFY=GILBERT,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040000
*---------------------------------------------------------------------* 00060000
*        TSO "CLEAR SCREEN" COMMAND - OS/VS2                          * 00070000
*---------------------------------------------------------------------* 00080000
CLEARSCR CSECT                                                          00090000
         STFSMODE ON,INITIAL=YES       CLEAR SCREEN                     00100000
         BALR  15,0                                                     00110000
         USING *,15                                                     00120000
         STIMER WAIT,BINTVL=AWHILE     WAIT FOR A WHILE                 00130000
         STFSMODE OFF                  CLEAR SCREEN                     00140000
         BR    14                      GOBACK                           00150000
AWHILE   DC    FL4'25'                 25/100 OF A SECOND               00160000
         END                                                            00170000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  00180000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   00190000
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   00200000
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   00210000
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      00220000
//SYSPRINT DD SYSOUT=*                                                  00230000
//*                                                                     00240000
//LKED    EXEC PGM=HEWL,PARM=(MAP,RENT)                                 00250000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       00260000
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(CLS),DISP=SHR                   00270000
//SYSPRINT DD SYSOUT=*                                                  00280000
./ ADD NAME=CMDJ     0101-81016-06210-1318-00077-00034-00027-CBT472
//GILBERTC JOB (ACCT#),CMDJ,                                            00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040001
*********************************************************************** 00060000
*                                                                     * 00070000
*        SEND A JES2 COMMAND FOR CURRENT JOB                          * 00080000
*                                                                     * 00090000
*        EXAMPLE:                                                     * 00100000
*                                                                     * 00110000
*           //PURGE   EXEC PGM=CMDJES2,PARM=P       PURGE THE JOB     * 00120000
*                                                                     * 00130000
*           SENDS A $PJ#### COMMAND TO JES2, WHERE #### IS THE        * 00140000
*           JOB'S OWN JOB NUMBER.                                     * 00150000
*                                                                     * 00160000
*********************************************************************** 00170000
CMDJES2  CSECT                                                          00180000
         SAVE  (14,12),,'GSF UTILITIES - CMDJ R101'                     00190001
         LR    R12,R15                                                  00200000
         USING CMDJES2,R12                                              00210000
         L     R10,0(,R1)           PARM ADDRESS                        00220000
         LH    R14,0(,R10)          PARM LENGTH                         00230000
         CH    R14,=Y(L'CMD1CMD)    TOO LONG?                           00240000
         BH    RC12                 YES, QUIT                           00250000
         BCTR  R14,0                                                    00260000
         EX    R14,*+4                                                  00270000
         MVC   CMD1CMD(*-*),2(R10)  MOVE COMMAND                        00280000
         L     R3,X'21C'            PSATOLD (CURRENT TCB)               00290000
         L     R4,X'0B4'(,R3)       JSCB                                00300000
         L     R5,X'13C'(,R4)       SSIB                                00310000
         MVC   CMD1JOBI,X'00C'(R5)  SSIBJBID=JOB01234                   00320000
         MVI   CMD1JOBI+1,C' '      O                                   00330000
         MVI   CMD1JOBI+2,C' '      B                                   00340000
         MODESET KEY=ZERO,MODE=SUP                                      00350000
         SLR   R0,R0                                                    00360000
         MGCR  CMD1              <- ISSUE $P CMD                        00370001
         MODESET KEY=NZERO,MODE=PROB                                    00380000
         STIMER WAIT,BINTVL==A(500) WAIT 5 SECONDS                      00390000
         RETURN (14,12),RC=0                                            00400000
RC12     RETURN (14,12),RC=12       PARM IS TOO LONG                    00410000
CMD1     WTO   '$                                     ',MF=L            00420000
CMD1CMD  EQU   CMD1+5,24   P                                            00430000
CMD1JOBI EQU   CMD1+6,8    JOB03210                                     00440000
*        YREGS                                                          00450001
R0       EQU   0                                                        00460001
R1       EQU   1                                                        00470001
R2       EQU   2                                                        00480001
R3       EQU   3                                                        00490001
R4       EQU   4                                                        00500001
R5       EQU   5                                                        00510001
R6       EQU   6                                                        00520001
R7       EQU   7                                                        00530001
R8       EQU   8                                                        00540001
R9       EQU   9                                                        00550001
R10      EQU   10                                                       00560001
R11      EQU   11                                                       00570001
R12      EQU   12                                                       00580001
R13      EQU   13                                                       00590001
R14      EQU   14                                                       00600001
R15      EQU   15                                                       00610001
         END                                                            00620000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  00640000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   00650001
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   00660001
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   00670001
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      00680001
//SYSPRINT DD SYSOUT=*                                                  00690000
//*                                                                     00700000
//LKED    EXEC PGM=IEWL,PARM='MAP,AC=1'                                 00710000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       00720001
//SYSPRINT DD SYSOUT=*                                                  00730000
//SYSLMOD  DD DSN=SYS1.P390.LINKLIB(CMDJES2),DISP=SHR                   00740000
//*                                                                     00750000
//GO      EXEC PGM=CMDJES2,PARM=P                     PURGE THE JOB     00760000
//STEPLIB  DD DSN=SYS1.P390.LINKLIB,DISP=SHR                            00770000
./ ADD NAME=DEFGDGSR 0200-87290-06210-1326-00265-00033-00000-CBT472
//GILBERTD JOB (ACCT#),DEFGDGSR,                                 OS/VS2 00010000
// NOTIFY=GILBERT,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00021000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00030000
*********************************************************************** 00050000
*                                                                     * 00060000
*        DEFINE GDG                 GSF - OCTOBER 1987                * 00070000
*                                                                     * 00080000
*        THIS SUBROUTINE MAY BE CALLED BY THE CZXG0DFP PDB EXIT       * 00090000
*        TO DEFINE THE GDGS.  IT REQUIRES TWO PARAMETERS:             * 00100000
*                                                                     * 00110000
*        1. A 44-BYTE FIELD, CONTAINING THE DSNAME WHICH MUST BE      * 00120000
*           LEFT-JUSTIFIED AND PADDED WITH BLANKS.                    * 00130000
*                                                                     * 00140000
*        2. A 3-DIGIT FIELD, CONTAINING THE NUMBER OF GENERATIONS     * 00150000
*           AS AN UNPACKED DECIMAL NUMBER IN THE RANGE 001 TO 255.    * 00160000
*                                                                     * 00170000
*        SAMPLE CALLING SEQUENCE:                                     * 00190000
*                                                                     * 00200000
*            CALL 'DEFGDG' USING XF-EDMDSNAM, XF-EDMGDGNB.            * 00210000
*                                                                     * 00230000
*        A RETURN CODE IS PASSED IN REGISTER 15.  A COBOL CALLING     * 00240000
*        PROGRAM MAY CHECK THE CONTENT OF THE "RETURN-CODE" FIELD,    * 00250000
*        A NON-ZERO VALUE INDICATING THAT AN ERROR HAS OCCURED.       * 00260000
*                                                                     * 00270000
*                                                                     * 00280000
*        THIS SUB-ROUTINE DOESN'T CALL IDCAMS, BUT DIRECTLY           * 00290000
*        INVOKES THE MVS CATALOG MANAGEMENT SERVICES TO PERFORM       * 00300000
*        THE FOLLOWING:                                               * 00310000
*                                                                     * 00320000
*        1. LISTCAT THE ENTRY TO CHECK IF THE GDG ALREADY EXISTS      * 00330000
*           AND, IF THIS IS THE CASE, WHAT THE CURRENT LIMIT IS.      * 00340000
*           THIS REQUEST IS EQUIVALENT TO THE IDCAMS COMMAND:         * 00350000
*              'LISTCAT MYDSN GDG ALL '.                              * 00360000
*                                                                     * 00370000
*        2. DELETE THE EXISTING GDG BASE IF THE LIMIT IS DIFFERENT    * 00380000
*           FROM THE PASSED GDGNB.  IF THE GDG BASE IS NOT EMPTY,     * 00390000
*           DELETE WILL FAIL AND DEFINE WILL NOT BE ATTEMPTED.        * 00400000
*           THIS REQUEST IS EQUIVALENT TO THE IDCAMS COMMAND:         * 00410000
*              'DELETE MYDSN GDG '.                                   * 00420000
*                                                                     * 00430000
*        3. DEFINE THE GDG WITH THE SCRATCH OPTION AND THE NUMBER     * 00440000
*           OF GENERATIONS PASSED IN THE SECOND PARAMETER.            * 00450000
*           THIS REQUEST IS EQUIVALENT TO THE IDCAMS COMMAND:         * 00460000
*              'DEFINE GDG(NAME(MYDSN) LIMIT(GDGNB) SCRATCH)'.        * 00470000
*                                                                     * 00490000
*        NOTES:                                                       * 00500000
*                                                                     * 00510000
*        THE PROGRAM IS REUSABLE, WHICH MEANS THAT IT MAY BE LOADED   * 00520000
*        ONCE AND CALLED SEVERAL TIMES, AS DURING A TSO SESSION,      * 00530000
*        A JOBSET COMPILATION OR A FILE MASS-COMPILATION.             * 00540000
*                                                                     * 00550000
*        THE PROGRAM DOESN'T DEFINE A GDG IN THE FOLLOWING CASES:     * 00560000
*                                                                     * 00570000
*        1. A '//NODEFGDG DD DUMMY' STATEMENT IS PRESENT IN THE JCL   * 00580000
*           OR THE EQUIVALENT "ALLOCATE" COMMAND HAS BEEN ISSUED      * 00590000
*           UNDER TSO.                                                * 00600000
*                                                                     * 00610000
*        2. THE FIRST LEVEL QUALIFIER OF THE DSNAME HAS NOT BEEN      * 00620000
*           DEFINED AS AN ALIAS.                                      * 00630000
*                                                                     * 00640000
*        3. THE SECOND PARAMETER IS ZERO.  IN THAT CASE, IF A GDG     * 00650000
*           BASE EXISTS FOR THAT ENTRY AND IS EMPTY, IT IS DELETED.   * 00660000
*                                                                     * 00670000
*$200 SET GDG BASE'S OWNER TO INVOKER'S RACF USER ID                  * 00680000
*********************************************************************** 00690000
DEFGDG   CSECT                                                          00700000
         SAVE  (14,12),,'GSF UTILITIES - DEFGDGSR R200'                 00710000
         LR    R12,R15                                                  00720000
         USING DEFGDG,R12                                               00730000
         LM    R3,R4,0(R1)             GDGNAME, GDGLIMIT                00740000
*LA R3,=CL44'GILBERT.GDG' ###TEST###                                    00750000
*LA R4,=C'032'            ###TEST###                                    00760000
         GETMAIN RU,LV=DYNL            GET DYNAMIC STORAGE AREA         00770000
         LR    R9,R1                   KEEP ITS ADDRESS                 00780000
         USING DYN,R9                                                   00790000
         DEVTYPE =C'NODEFGDG',WORK265  CHECK DDNAME                     00800000
         LTR   R15,R15                 CHECK DEVTYPE RETURN CODE        00810000
         BZ    RETURN                  DD PRESENT, QUIT.                00820000
         LA    R14,DYN                 CLEAR DYNAMIC STORAGE            00830000
         LA    R15,DYNL                CLEAR DYNAMIC STORAGE            00840000
         SLR   R1,R1                   CLEAR DYNAMIC STORAGE            00850000
         MVCL  R14,R0                  CLEAR DYNAMIC STORAGE            00860000
*---------------------------------------------------------------------  00870000
*        CHECK FOR AN EXISTING ALIAS                                    00880000
*---------------------------------------------------------------------  00890000
P1ALIAS  MVI   WORK265+C'.',C'.'       BUILD TABLE FOR TRT              00900000
         TRT   0(9,R3),WORK265         FIND FIRST PERIOD                00910000
         BZ    RETURN                  ERROR IF NO PERIOD FOUND         00920000
         LR    R0,R3                   POINT TO GDG NAME                00930000
         SLR   R1,R0                   COMPUTE LENGTH OF 1ST QUALIFIER  00940000
         ICM   R1,B'1000',=C' '        PADDING CHARACTER                00950000
         LA    R14,CATNAME             "TO" FIELD                       00960000
         ST    R14,LOCALIAS+4          UPDATE CAMLST                    00970000
         ST    R14,CTGCAT              UPDATE CTGPL                     00980000
         LA    R15,L'CATNAME           LENGTH                           00990000
         MVCL  R14,R0                  MOVE ALIAS TO CATNAME FIELD      01000000
         LA    R0,WORK265              GET ADDRESS OF WORK AREA         01010000
         ST    R0,LOCALIAS+12          UPDATE CAMLST                    01020000
         ST    R0,CTGWKA               UPDATE CTGPL                     01030000
         LOCATE LOCALIAS               FIND UCAT NAME                   01040000
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE         01050000
         BNZ   RETURN                  NO ALIAS, QUIT.                  01060000
         PACK  DWD,0(3,R4)             PACK 3-DIGIT GDGLIMIT            01070000
         OI    DWD+7,X'0F'             PREVENT S0C7 IF ALL SPACES       01080000
         CVB   R0,DWD                  CONVERT TO BINARY, GET S0C7      01090000
         STC   R0,GDGLIMIT             KEEP GDG LIMIT                   01100000
*---------------------------------------------------------------------  01110000
*        LISTCAT                                                        01120000
*---------------------------------------------------------------------  01130000
P2LISTC  ST    R3,CTGENT               GDGNAME                          01140000
         MVC   WORK265(4),=Y(L'WORK265,0) FORMAT WORK AREA HEADER       01150000
         MVI   CTGOPTNS,CTGLTCAT       FUNCTION = LISTCAT               01160000
         CATALOG CTGPL                 IS GDG DEFINED ALREADY?          01170000
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE         01180000
         BNZ   P3ZERO                  GDG ISN'T DEFINED, GO DO IT.     01190000
*---------------------------------------------------------------------  01200000
*        DELETE GDG IF CURRENT LIMIT IS DIFFERENT FROM THE ONE REQ'D    01210000
*---------------------------------------------------------------------  01220000
P3DELETE L     R1,CTGFLPT              POINTER TO RETURNED GDGLIMIT     01230000
         CLC   GDGLIMIT,0(R1)          COMPARE WITH PASSED VALUE        01240000
         BE    RETURN                  GDG OK ALREADY, RETURN.          01250000
         MVI   CTGOPTNS,CTGDELET       FUNCTION = DELETE                01260000
         CATALOG CTGPL                 DELETE EXISTING GDG              01270000
         LTR   R15,R15                 CHECK SVC 26 RETURN CODE         01280000
         BNZ   RETURN                  DELETE FAILED, RETURN            01290000
P3ZERO   CLI   GDGLIMIT,0              CHECK GDGLIMIT                   01300000
         BE    RETURN                  QUIT IF GDGLIMIT=0               01310000
*---------------------------------------------------------------------  01320000
*        RETRIEVE USERID FROM ACEE                                @200  01330000
*---------------------------------------------------------------------  01340000
         L     R1,PSAAOLD-PSA          MY ASCB                          01350000
         L     R1,ASCBASXB-ASCB(,R1)   MY ASXB                          01360000
         L     R1,ASXBSENV-ASXB(,R1)   MY ACEE                          01370000
         LTR   R1,R1                                                    01380000
         BNP   P4DEFINE                NO ACEE, NO OWNER                01390000
         MVC   OWNERID,ACEEUSRI-ACEE(R1)  MY RACF USER ID               01400000
         LA    R0,CTGFL2               CTGFL FOR OWNER ID               01410000
         ST    R0,CTGFV+28             SET POINTER TO OWNER ID          01420000
*---------------------------------------------------------------------  01430000
*        DEFINE GDG WITH SCRATCH OPTION.                                01440000
*---------------------------------------------------------------------  01450000
P4DEFINE LA    R1,CTGFV                ADDR OF CTGFV                    01460000
         ST    R1,CTGFVT               STORE CTGFV ADDRESS INTO CTGPL   01470000
         MVI   CTGFV+00,C'B'           SET TYPE TO "GDG BASE"           01480000
         ST    R3,CTGFV+20             ADDR OF DSNAME                   01490000
         LA    R14,GDGLIMIT            GDG LIMIT                        01500000
         LA    R15,GDGATTR             GDG ATTRIBUTES                   01510000
         STM   R14,R15,CTGFV+72        SET POINTERS TO GDGLIMIT/GDGATTR 01520000
         MVI   CTGOPTNS,CTGDEFIN       FUNCTION = DEFINE                01530000
         CATALOG CTGPL                 DEFINE GDG                       01540000
*---------------------------------------------------------------------  01550000
RETURN   SAVE  15                      STORE RETURN CODE                01560000
         FREEMAIN RU,LV=DYNL,A=(R9)    FREE DYNAMIC STORAGE AREA        01570000
         RETURN (14,12)                RETURN, PASS RETURN CODE.        01580000
*---------------------------------------------------------------------  01590000
*                                                                       01600000
*        CATALOG MANAGEMENT CONTROL BLOCKS: CTGPL, CTGFL                01610000
*                                                                       01620000
*        FOR INFORMATION ON CATALOG MANAGEMENT REQUESTS AND             01630000
*        CONTROL BLOCKS, REFER TO A DFP/370 OR DFP 2.X                  01640000
*        "DIAGNOSIS REFERENCE" MANUALS.  IF YOU FIND IT IN THE          01650000
*        DFP 3.X DOCUMENTATION, PLEASE LET ME KNOW.                     01660000
*                                                                       01670000
*---------------------------------------------------------------------  01680000
CTGPL    DS    0F                                                       01690000
CTGOPTN1 DC    AL1(CTGNAME+CTGCNAME)   FIRST OPTION BYTE:               01700000
CTGNAME  EQU   X'04'                     CTGENT POINTS TO ENTRY NAME    01710000
CTGCNAME EQU   X'02'                     CTGCAT POINTS TO CATALOG NAME  01720000
         DC    B'0'                                                     01730000
CTGFUNC  DC    AL1(CTGCMS+CTGAM0)      CALLER-REQUESTED FUNCTION        01740000
CTGCMS   EQU   X'80'                     REQUEST IS IN CTGOPTNS         01750000
CTGAM0   EQU   X'01'                     OS/VS2 CTGPL, NOT A CAMLST     01760000
         DC    B'0'                                                     01770000
CTGFVT   DS    0A(*-*)                 ADDRESS OF CTGFV FOR DEFINE      01780000
CTGENT   DC    A(*-*)                  ADDRESS OF ENTRY NAME            01790000
CTGCAT   DC    A(*-*)                  ADDRESS OF CATALOG DSNAME        01800000
CTGWKA   DC    A(*-*)                  ADDRESS OF CALLER'S WORK AREA    01810000
CTGOPTNS DC    AL1(CTGLTCAT)           REQUEST:                         01820000
CTGLTCAT EQU   X'20' 0010 0...           LISTCAT                        01830000
CTGDELET EQU   X'18' 0001 1...           DELETE                         01840000
CTGDEFIN EQU   X'08' 0000 1...           DEFINE                         01850000
         DC    B'0'                                                     01860000
CTGTYPE  DC    C'B'                    TYPE OF CAT. RECORD (GDG BASE)   01870000
CTGNOFLD DC    FL1'1'                  NUMBER OF POINTERS IN CTGFIELD   01880000
CTGFDBK  DC    XL2'0'                  FEEDBACK AREA                    01890000
CTGFBFLG DC    B'0'                                                     01900000
         DC    X'00'                   ERROR CODE                       01910000
CTGPSWD  DC    A(0)                    PASSWORD ADDRESS                 01920000
CTGFIELD DC    A(CTGFL)                POINTER(S) TO CTGFL(S)           01930000
*                                                                       01940000
CTGFL    DS    0F                   +0 FIELD DESCRIPTOR                 01950000
CTGFLDNO DC    FL1'1',5X'00'        +0 NUMBER OF FIELDS                 01960000
CTGFLDNM DC    A(FLDNM1,0)          +8 PTR TO FIELD NAME                01970000
CTGFLNG  DC    F'0'                +16 LENGTH OF RETURNED DATA          01980000
CTGFLPT  DC    A(*-*)              +20 ADDRESS OF RETURNED DATA         01990000
*                                                                       02000000
FLDNM1   DC    C'GDGLIMIT'             FIELD NAME                       02010000
GDGATTR  DC    B'01000000'             GDG ATTRIBUTES: SCRATCH, NOEMPTY 02020000
GDGLIMIT DC    FL1'0'                  BINARY GDG LIMIT                 02030000
LOCALIAS CAMLST NAME,*-*,,*-*          LOCATE ALIAS                     02040000
*                                                                       02050000
CTGFL2   DS    0F                   +0 FIELD DESCRIPTOR                 02060000
         DC    FL1'1',5X'00'        +0 NUMBER OF FIELDS                 02070000
         DC    A(FLDNM2,0)          +8 PTR TO FIELD NAME                02080000
         DC    F'8'                +16 LENGTH OF RETURNED DATA          02090000
CTGFL2PT DC    A(OWNERID)          +20 ADDRESS OF RETURNED DATA         02100000
*                                                                       02110000
FLDNM2   DC    C'OWNERID '             FIELD NAME                       02120000
OWNERID  DC    C'XXXXXXXX'             VALUE                            02130000
*---------------------------------------------------------------------  02140000
*        DYNAMIC STORAGE, BASED WITH R9.                                02150000
*---------------------------------------------------------------------  02160000
DYN      DSECT                                                          02170000
CATNAME  DS    CL44' '                 CATALOG DSNAME                   02180000
CTGFV    DS    32F                     128-BYTE CTGFV                   02190000
DWD      DS    D                       WORK                             02200000
WORK265  DS    XL265                   WORK AREA FOR LISTCAT, DELETE.   02210000
DYNL     EQU   *-DYN                                                    02220000
         PRINT NOGEN                                                    02230000
         IHAPSA DSECT=YES                                               02250000
         IHAASCB DSECT=YES                                              02260000
         IHAASXB                                                        02270000
         IHAACEE                                                        02280000
*        YREGS                         SYS1.MACLIB                      02281000
R0       EQU   0                                                        02282000
R1       EQU   1                                                        02283000
R2       EQU   2                                                        02284000
R3       EQU   3                                                        02285000
R4       EQU   4                                                        02286000
R5       EQU   5                                                        02287000
R6       EQU   6                                                        02288000
R7       EQU   7                                                        02289000
R8       EQU   8                                                        02289100
R9       EQU   9                                                        02289200
R10      EQU   10                                                       02289300
R11      EQU   11                                                       02289400
R12      EQU   12                                                       02289500
R13      EQU   13                                                       02289600
R14      EQU   14                                                       02289700
R15      EQU   15                                                       02289800
         END                                                            02290000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  02320000
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 02330000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   02340000
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   02350000
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   02360000
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      02370000
//SYSPRINT DD SYSOUT=*                                                  02380000
//*                                                                     02390000
//LKED    EXEC PGM=IEWL,PARM=REUS                                       02400000
//SYSPRINT DD SYSOUT=*                                                  02410000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         02420000
//SYSLMOD  DD DSN=GILBERT.LOAD4(DEFGDGSR),DISP=SHR                      02430000
//*                                                                     02440000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  02450000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         02460000
//SYSUDUMP DD SYSOUT=*                                                  02470000
//*                                                                     02480000
//AMS     EXEC PGM=IDCAMS                                               02490000
//SYSPRINT DD SYSOUT=*                                                  02500000
 LISTC ENT('GILBERT.GDG') ALL                                           02510000
/* DELETE    'GILBERT.GDG'                                              02520000
./ ADD NAME=DONTFAIL 0207-90216-06210-1211-00546-00357-00128-CBT472
//GILBERTF JOB (ACCT#),DONTFAIL,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040007
         LCLC  &REL,&WTO1,&DSNAME                                       00060007
*********************************************************************** 00070000
*                                                                     * 00080000
* MODULE NAME = DONTFAIL                                              * 00090000
*                                                                     * 00100000
* DESCRIPTIVE NAME = DUMMY OUT NEXT STEP'S UNCATALOGED DATA SETS      * 00110000
*                                                                     * 00120000
* FUNCTION = This program has been designed to prevent jobs that      * 00130000
*            accept multiple inputs from failing in the middle        * 00140000
*            of the night because of a "typo" in a data set name.     * 00150000
*            When DONTFAIL detects that an input data set is not      * 00160000
*            cataloged, it converts it to a null data set and         * 00170000
*            allows the job to run with partial input.                * 00180000
*                                                                     * 00190000
* STATUS = R207                                                       * 00200007
*                                                                     * 00210000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00220006
*                                                                     * 00230000
* NOTES = SEE BELOW                                                   * 00240000
*                                                                     * 00250000
*    DEPENDENCIES = MVS/ESA                                           * 00260000
*                   STRING macro R507                                 * 00270006
*                                                                     * 00280000
*    AUTHORIZATION = APF                                              * 00290000
*                                                                     * 00300000
*    RESTRICTIONS = NONE                                              * 00310000
*                                                                     * 00320000
* MODULE TYPE = PROCEDURE, (Batch Program)                            * 00330001
*                                                                     * 00340000
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      * 00350000
*                IBM HIGH LEVEL ASSEMBLER/MVS                         * 00360000
*                                                                     * 00370000
*    MODULE SIZE = 4K                                                 * 00380000
*                                                                     * 00390000
*    ATTRIBUTES = REENTERABLE, RMODE ANY, AMODE 31,                   * 00400000
*                 SUPERVISOR STATE, KEY 1                             * 00410000
*                                                                     * 00420000
* OPERATION = see below                                               * 00430000
*                                                                     * 00440000
*            DONTFAIL must be executed immediately before the job     * 00450000
*            step to "protect", as shown in the following example:    * 00460000
*                                                                     * 00470000
*              //DONTFAIL EXEC PGM=DONTFAIL                           * 00480000
*              //*                                                    * 00490000
*              //SORT53    EXEC PGM=SORT                              * 00500000
*              //SORTIN     DD DSN=USER.INPUT1,DISP=SHR               * 00510000
*              //           DD DSN=USER.INPUT2,DISP=SHR               * 00520000
*                                                                     * 00530000
*            If any input data set in step SORT52 in not cataloged,   * 00540000
*            DONTFAIL will make it a null data set, preventing the    * 00550000
*            job from failing with a DATA SET NOT FOUND error.        * 00560000
*                                                                     * 00570000
*            To detect uncataloged data sets and correct them,        * 00580000
*            DONTFAIL proceeds as follows:                            * 00590000
*                                                                     * 00600000
*            1. scan the SWA control blocks that represent            * 00610000
*               the following step's DD statements for input          * 00620000
*               data sets (i.e. DISP=OLD or DISP=SHR)                 * 00630000
*            2. check the catalog status of each input data set       * 00640000
*            3. modify SWA control blocks to convert each             * 00650000
*               non-cataloged data set to a null data set             * 00660000
*            4. set DCB attributes (optional, see below)              * 00670000
*                                                                     * 00680000
*            NOTES:                                                   * 00690000
*                                                                     * 00700000
*              a. DONTFAIL must be executed once for every            * 00710000
*                 job step that needs to be protected.                * 00720000
*                                                                     * 00730000
*              B. Prior to using DONTFAIL, you must allocate and      * 00740000
*                 catalog an empty disk data set and specify its      * 00750000
*                 name in the SETC instruction below.  You can use    * 00760000
*                 an already-defined pattern DSCB if it has been      * 00770000
*                 created with RECFM=,LRECL=0,BLKSIZE=0.              * 00780000
*                                                                     * 00790000
*              C. The last DD in a concatenation (or the only DD      * 00800000
*                 of a non-concatenated data set) is changed to       * 00810000
*                 DD DUMMY; for other DD statements, the DSN          * 00820000
*                 is changed to &DSNAME                               * 00830007
*                                                                     * 00840000
&DSNAME SETC 'SYS2.DONTFAIL'      <=== DSN of the empty data set        00850007
*                                                                     * 00860000
*            DCB ATTRIBUTES                                           * 00870000
*                                                                     * 00880000
*              When changing the DSN of a data set in a concate-      * 00890000
*              nation, DONTFAIL also carries DCB attributes (RECFM,   * 00900000
*              LRECL, BLKSIZE) from DDs previously concatenated to    * 00910000
*              the same DDname. This prevents utility programs such   * 00920000
*              as SORT or IDCAMS REPRO from failing when the empty    * 00930000
*              data set has incompatible DCB attributes or no DCB     * 00940000
*              attributes at all.                                     * 00950000
*                                                                     * 00960000
*              Example:                                               * 00970000
*                                                                     * 00980000
*                //COPY53  EXEC PGM=IDCAMS                            * 00990000
*                //DD1      DD DSN=USER.INPUT1,DISP=SHR,              * 01000000
*                //            RECFM=FB,LRECL=124                     * 01010000
*                //         DD DSN=USER.INPUT2,DISP=SHR               * 01020000
*                //         DD DSN=USER.INPUT3,DISP=SHR               * 01030000
*                //DD2      DD DSN=USER.INPUT4,DISP=SHR,              * 01040000
*                //            RECFM=FB,LRECL=124                     * 01050000
*                                                                     * 01060000
*                In this example, if USER.INPUT2 is not cataloged,    * 01070000
*                it is changed to DSN=&DSNAME, and                    * 01080007
*                RECFM=FB,LRECL=124,BLKSIZE=124 are added also.       * 01090000
*                If BLKSIZE is not specified, it is set equal to      * 01100000
*                LRECL+4 if RECFM=VB was specified, otherwise,        * 01110000
*                BLKSIZE is set equal to LRECL.  In this example      * 01120000
*                also, if USER.INPUT3 or USER.INPUT4 are not          * 01130000
*                cataloged, they are changed to DD DUMMY.             * 01140000
*                                                                     * 01150000
* CHANGE ACTIVITY                                                     * 01160000
*                                                                     * 01170000
*   $100 Program rewritten for MVS/ESA                                * 01180000
*   $101 Ignore data sets with VOL=REF to a DISP=NEW DD               * 01190001
*   $102 Force SDATA=(LSQA,SWA) in case of an abend                   * 01200002
*   $103 Change to DSN=&DSNAME instead of DD DUMMY                    * 01210003
*        if JCL specifies FREE=CLOSE                                  * 01220003
*   $104 Ignore temporary data sets                                   * 01230004
*   $105 Invoke PGM=RECALL if it's been linked with DONTFAIL          * 01240005
*   $106 Change STRING GENERATE to STRING 507 format                  * 01250006
*   $207 OS/VS2                                                       * 01260007
*                                                                     * 01270000
*********************************************************************** 01280000
&REL     SETC  '207'                                                    01290007
DONTFAIL CSECT                                                          01300000
         DC    C'GSF UTILITIES - DONTFAIL R&REL '                       01310005
BEGIN    LR    R12,R15                                                  01320007
         USING BEGIN,R12                                                01330006
         LR    R5,R1                   JCL PARM                         01340007
         MODESET MODE=SUP              SWITCH TO SUPERVISOR MODE        01350000
         ESTAE DUMPOPT,CT                                               01360002
         GETMAIN RU,LV=DYNAML,SP=230,KEY=1,BRANCH=YES                   01370007
         ST    R1,8(,R13)              chain save areas                 01380004
         MODESET EXTKEY=JES            SWITCH TO KEY=1                  01390004
         ST    R13,4(,R1)              chain save areas                 01400004
         LR    R13,R1                  ADDRESS OF DYNAMIC STORAGE AREA  01410000
         USING DYNAM,R13                                                01420000
         LA    R0,DYNAM+72             CLEAR WORKING STORAGE TO X'00'   01430000
         LA    R1,DYNAML-72            CLEAR WORKING STORAGE TO X'00'   01440000
         SLR   R15,R15                 CLEAR WORKING STORAGE TO X'00'   01450000
         MVCL  R0,R14                  CLEAR WORKING STORAGE TO X'00'   01460000
         ST    R5,PARMADDR             addr of JCL PARM                 01470007
*********************************************************************** 01480000
*                                                                     * 01490000
*        LOCATE TCB, JSCB, GDGNT.                                     * 01500000
*        LOCATE SCT AND 1ST SIOT FOR NEXT STEP.                       * 01510000
*                                                                     * 01520000
*********************************************************************** 01530000
         L     R1,540(,0)              PSATOLD                          01540000
         L     R3,TCBJSCB-TCB(,R1)     GET THE ADDRESS OF MY JSCB       01550000
         USING IEZJSCB,R3                                               01560000
         L     R4,JSCBJCT              Address of JCT prefix            01570002
         USING INJMJCT-16,R4                                            01580002
*                                                                       01590000
         ICM   R1,B'0111',JCTGDGNT     3-BYTE SVA OF GDG NAME TABLE     01600000
         BZ    OWNSCT                  JUMP IF THERE IS NO GDGN TABLE   01610007
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS    01620007
         ST    R1,GDGNTPTR             KEEP ADDRESS OF GDG NAMES TABLE  01630000
*                                                                       01640000
OWNSCT   SLR   R5,R5                                                    01650007
         ICM   R5,B'0111',JSCSCTP      3-BYTE SVA OF CURRENT STEP'S SCT 01660000
         USING INSMSCT-16,R5                                            01670002
*                                                                       01680000
NEXTSCT  ICM   R5,B'0111',SCTANSCT     LOAD 3-BYTE SVA OF NEXT SCT      01690007
         BZ    RETURN                  RETURN IF THERE IS NO NEXT STEP  01700000
         ICM   R1,B'0111',SCTFSIOT     LOAD 3-BYTE SVA OF 1ST SIOT      01710000
         BZ    RETURN                  NO DD CARDS, RETURN              01720000
*********************************************************************** 01730000
*                                                                     * 01740000
*        LOOP THRU THE SIOT BLOCKS                                    * 01750000
*                                                                     * 01760000
*********************************************************************** 01770000
*LOOP                                                                   01780000
LOOPSIOT LA    R6,16(,R1)              ADDRESS OF SIOT                  01790007
         USING SIOT,R6                                                  01800000
         IC    R1,SEQNO                INCREMENT CURRENT SEQNO          01810000
         LA    R1,1(,R1)               INCREMENT CURRENT SEQNO          01820000
         STC   R1,SEQNO                INCREMENT CURRENT SEQNO          01830000
         TM    SCTSBYT1,SIOTCCAT       CHECK FOR CONCATENATION          01840000
         BO    TESTDISP                JUMP IF NO DDNAME                01850000
         MVC   DDNAME,SCTDDNAM         KEEP DDNAME                      01860000
         MVI   SEQNO,0                 RESET DDSEQ                      01870000
         SLR   R0,R0                                                    01880000
         STCM  R0,B'0001',RECFM        zero DCB attributes              01890000
         STCM  R0,B'0011',LRECL        zero DCB attributes              01900000
         STCM  R0,B'0011',BLKSIZE      zero DCB attributes              01910000
*                                                                       01920000
TESTDISP TM    SCTSBYT3,SCTSOLD        Check for DISP=OLD (or SHR)      01930000
         BNO   NEXTSIOT                JUMP IF NOT DISP=OLD             01940000
         CLI   SCTUTYPE,C' '           CHECK UNIT NAME                  01950000
         BH    NEXTSIOT                JUMP IF THERE IS A UNIT NAME     01960000
*                                                                       01970001
*        Ignore DD with VOL=REF to a DISP=NEW data set                  01980001
*                                                                       01990001
         ICM   R1,B'0111',SIOTVRSB     LOAD 3-BYTE SVA OF VOL=REF SIOT  02000001
         BZ    LOCJFCB                 NO VOL=REF, JUMP                 02010001
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS    02020007
         TM    SCTSBYT3-SIOT(R1),SCTSNEW   VOL=REF DD has DISP=NEW?     02030001
         BO    NEXTSIOT                yes, ignore current DD           02040001
*                                                                       02050001
LOCJFCB  ICM   R1,B'0111',SCTPJFCB     LOAD 3-BYTE SVA OF JFCB          02060001
         LA    R7,16(,R1)              ADDRESS OF JFCB                  02070007
         USING JFCB,R7                                                  02080000
         TM    JFCBIND2,JFCTEMP        temporary data set?              02090004
         BO    NEXTSIOT                yes, ignore current DD           02100004
         CLI   JFCBELNM,C'+'           DSNAME(+1)  ?                    02110004
         BE    NEXTSIOT                YES, IGNORE                      02120004
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE  02130000
*                                                                       02140000
SAVEDCB  ICM   R0,B'0001',JFCRECFM     RECFM present on this DD?        02150000
         BZ    SAVEDCB2                no, jump                         02160000
         STCM  R0,B'0001',RECFM        save non-zero DCB attributes     02170000
SAVEDCB2 ICM   R0,B'0011',JFCLRECL     LRECL present on this DD?        02180000
         BZ    SAVEDCB8                no, jump                         02190000
         STCM  R0,B'0011',LRECL        save non-zero DCB attributes     02200000
         ICM   R0,B'0001',JFCRECFM     RECFM present on this DD?        02210000
         BNZ   SAVEDCB8                yes, jump                        02220000
         MVI   RECFM,JFCFIX+JFCRFB     if LRECL is present but RECFM   +02230000
                                       is not, assume RECFM=FB          02240000
SAVEDCB8 ICM   R0,B'0011',JFCBLKSI     LRECL present on this DD?        02250000
         BZ    *+8                     no, jump                         02260000
         STCM  R0,B'0011',BLKSIZE      save non-zero DCB attributes     02270000
*--------------------------------------------------------------------*  02280000
*                                                                    *  02290000
*        IF THE CURRENT DATA SET IS A GDG, SCAN THE GDG NAMES TABLE  *  02300000
*        FOR THE CURRENT APPARENT GEN (0), IF ANY.                   *  02310000
*                                                                    *  02320000
*--------------------------------------------------------------------*  02330000
GDG000   TM    JFCBIND1,JFCGDG         CHECK GDG INDICATOR              02340000
         BNO   GDG099                  JUMP IF NOT GDG                  02350000
         ICM   R1,B'1111',GDGNTPTR     LOAD ADDR OF GDG NAMES TABLE     02360000
         BZ    GDG080                  JUMP IF NO GDGNT                 02370000
         USING GDGNTABL,R1                                              02380000
*--loop                                                                 02390000
GDG010   SLR   R14,R14                 PREPARE IC                       02400000
         IC    R14,GDGNNO              GET NUMBER OF ENTRIES            02410000
*----loop                                                               02420000
GDG015   CLC   GDGNGDG,DSNAME          COMPARE TABLE ENTRY W/ DSNAME    02430000
         BE    GDG040                  JUMP IF NOT THE SAME             02440000
         LA    R1,GDGNGDG2             BUMP UP TO NEXT ENTRY IN BLOCK   02450000
         BCT   R14,GDG015              LOOP UNTIL END OF BLOCK          02460000
*----endloop                                                            02470000
         ICM   R1,B'1111',GDGNNEXT     LOAD ADDR OF NEXT GDGNT BLOCK    02480000
         BNZ   GDG010                  PROCESS NEXT BLOCK               02490000
*--endloop                                                              02500000
         NI    CTGOPTN3,255-CTGGDGL    CTGWAGB IS NOT SET               02510000
         B     GDG080                  EXIT GDGNT SCAN LOOP             02520000
*                                                                       02530000
GDG040   LA    R0,GDGNGDGZ             GET PTR TO APPARENT GEN(0)       02540000
         ST    R0,CTGWAGB              SET POINTER IN SVC 26 WORK AREA  02550000
         OI    CTGOPTN3,CTGGDGL        SHOW CTGWAGB IS SET              02560000
         DROP  R1                      GDGNTABL                         02570000
*                                                                       02580000
*        append relative gen number to end of data set name             02590000
*                                                                       02600000
GDG080   STRING (JFCBDSNM,,T),'(',(JFCBELNM,,T),')',INTO=DSNAME         02610004
GDG099   EQU   *                                                        02620004
*--------------------------------------------------------------------*  02630000
*                                                                    *  02640000
*        GET DEVICE TYPE INFORMATION FROM THE CATALOG.               *  02650000
*                                                                    *  02660000
*--------------------------------------------------------------------*  02670000
LOCATE   LA    R0,DSNAME               DATA SET NAME                    02680000
         ST    R0,CTGENT               ENTRY ADDRESS                    02690000
         OI    CTGOPTN1,CTGNAME        CTGENT POINTS TO ENTRY NAME      02700000
         LA    R0,CTGWA                WORK AREA FOR SUPERLOCATE        02710000
         ST    R0,CTGWKA               WORK AREA FOR SUPERLOCATE        02720000
         OI    CTGOPTN3,CTGSUPLT       SUPER LOCATE                     02730000
         OI    CTGOPTN3,CTGAM0         OS/VS2 CATALOG MGMT REQUEST      02740000
         LA    R0,CTGVL                GET ADDR OF VOLUME LIST          02750000
         ST    R0,CTGWAVL              UPDATE PTR                       02760000
         LA    R0,CTGVLLEN             GET LENGTH OF VOLUME LIST        02770000
         STH   R0,CTGWALV              UPDATE LENGTH                    02780000
         LOCATE CTGPL                  ISSUE SUPERLOCATE                02790000
         LTR   R15,R15                 DATA SET cataloged?              02800000
         BZ    NEXTSIOT                yes, ignore it                   02810000
*---------------------------------------------------------------------* 02820000
*                                                                     * 02830000
*        If this data set is not cataloged, modify the SIOT & JFCB    * 02840000
*                                                                     * 02850000
*          1.  if the DD has other DDs concatenated behind it,        * 02860000
*              or the DD has FREE=CLOSE,                              * 02870005
*                set DSNAME to "&DSNAME"                              * 02880000
*              else                                                   * 02890000
*                set DD DUMMY flag in SIOT                            * 02900000
*          2.  carry DCB attributes from previous DD in               * 02910000
*              concatenation                                          * 02920000
*          3.  Issue message to operator                              * 02930000
*                                                                     * 02940000
*---------------------------------------------------------------------* 02950000
MSG00    MVC   WTO1L(WTO1LL),WTO1M     move model to dynamic            02960000
         STRING '&DSNAME',INTO=DSNAME                                   02970000
*                                                                       02980000
         ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT                 02990000
         BZ    MSG12                   last DD, jump                    03000000
         LA    R1,16(,R1)              CONVERT SVA TO 24-BIT ADDRESS    03010007
         TM    SCTSBYT1-INDMSIOT(R1),SIOTCCAT   concatenated DD?        03020000
         BO    MSG20                   yes, jump                        03030000
         TM    SCTSBYT2,SIOCLUNL       FREE=CLOSE?                      03040003
         BO    MSG20                   yes, jump                        03050003
*                                                                       03060000
MSG12    STRING 'DD DUMMY',INTO=DSNAME                                  03070000
         OI    SCTSBYT1,SCTDUMMY       DD DUMMY                         03080000
*                                                                       03090000
MSG20    STRING 'DONTFAIL - ',                                         +03100000
               (JFCBDSNM,,T),' changed to ',(DSNAME,,T),               +03110000
               '  (DDN=',DDNAME,       do not close parenthesis        +03120001
               INTO=WTO1TEXT                                            03130000
         CLI   SEQNO,0                 first DD in concat?              03140000
         BE    MSG80                   yes, jump                        03150000
         STRING (WTO1TEXT,,T),'+',(SEQNO,FL1,L),                       +03160000
               INTO=WTO1TEXT                                            03170000
*                                                                       03180000
MSG80    CLC   =C'DD ',DSNAME          changed to DD DUMMY ?            03190000
         BE    MSG81                   yes, do not change JFCB          03200000
         MVC   JFCBDSNM,DSNAME         move new dsname                  03210000
*                                                                       03220000
*        Carry DCB attributes from previous DD                          03230000
*                                                                       03240000
MSG81    ICM   R0,B'0001',JFCRECFM     RECFM specified in JCL?          03250000
         BNZ   MSG88L                  yes, jump                        03260000
         MVC   JFCRECFM,RECFM          no, carry from previous DD       03270000
MSG88L   ICM   R0,B'0011',JFCLRECL     LRECL specified in JCL?          03280000
         BNZ   MSG88B                  yes, jump                        03290000
         MVC   JFCLRECL,LRECL          no, carry from previous DD       03300000
MSG88B   ICM   R1,B'0011',JFCBLKSI     BLKSIZE specified in JCL?        03310000
         BNZ   MSG90                   yes, exit                        03320000
         ICM   R1,B'0011',BLKSIZE      BLKSIZE on previous DD?          03330000
         BNZ   MSG88B4                 yes, use it                      03340000
         ICM   R1,B'0011',LRECL        LRECL on previous DD?            03350000
         BZ    MSG90                   no, exit                         03360000
         TM    JFCRECFM,JFCVAR         RECFM=V ?                        03370000
         BZ    MSG88B4                 no, set BLKSIZE=LRECL            03380000
         LA    R1,4(,R1)               yes, set BLKSIZE=LRECL+4         03390000
MSG88B4  STCM  R1,B'0011',JFCBLKSI     update BLKSIZE                   03400000
*                                                                       03410000
*        Issue message to operator                                      03420000
*                                                                       03430000
MSG90    STRING (WTO1TEXT,,T),',DCB=',(JFCRECFM,,X),'/',               X03440000
               (JFCLRECL,H,L),'/',(JFCBLKSI,H,L),')',INTO=WTO1TEXT      03450000
         WTO   MF=(E,WTO1L)            NOTIFY PROGRAMMER                03460000
*                                                                       03470000
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT                 03480000
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP     03490000
*ENDLOOP                                                                03500000
         DROP  R5,R6,R7                SCT, SIOT, JFCB                  03510000
*********************************************************************** 03520000
*                                                                     * 03530000
*        CLEAN-UP, RETURN TO CALLER.                                  * 03540000
*                                                                     * 03550000
*********************************************************************** 03560000
RETURN   LR    R1,R13                  addr of work area                03570005
         L     R5,PARMADDR             addr of JCL PARM                 03580007
         L     R13,4(,R13)             caller's save area               03590005
         FREEMAIN RU,LV=DYNAML,A=(R1),SP=230,KEY=1,BRANCH=YES           03600007
*                                                                       03610005
*        invoke PGM=RECALL                                              03620005
*                                                                       03630005
         WXTRN RECALL                  optional                         03640005
         MODESET KEY=NZERO,MODE=PROB                                    03650007
         ICM   R15,B'1111',=A(RECALL)  get addr of RECALL pgm           03660005
         BZ    RETURN99                not available, jump              03670005
         LR    R1,R5                   restore parm address             03680007
         BALR  R14,R15              <- invoke PGM=RECALL                03690005
*                                                                       03700005
         SLR   R15,R15                 RC=00                            03710000
RETURN99 EQU   *                                                        03720005
         SVC   3                       GOBACK                           03730007
*                                                                       03740000
&WTO1    SETC  (120)' '                                                 03750000
WTO1M    WTO   '&WTO1',MF=L,ROUTCDE=11                                  03760000
*---------------------------------------------------------------------  03770002
*        ESTAE routine: changed dump options                            03780002
*---------------------------------------------------------------------  03790002
         USING SDWA,R1                                                  03800002
DUMPOPT  OI    SDWASDA0,SDWALSQA+SDWASWA dump LSQA and SWA              03810002
         OI    SDWADPFS,SDWADLST       DUMP OPTIONS VALID               03820002
         BR    R14                                                      03830002
*---------------------------------------------------------------------  03840000
*        DYNAMIC STORAGE AREA, BASED BY R13.                            03850000
*---------------------------------------------------------------------  03860000
DYNAM    DSECT                                                          03870000
         DS    18F                     STANDARD SAVE AREA               03880000
GDGNTPTR DS    A(GDGNTABL)             POINTER TO GDG NAMES TABLE       03890000
PARMADDR DS    A                       JCL PARM                         03900007
TAPE1    DS    XL2                     INTERNAL DD# FOR 1ST TAPE DD     03910000
DDNAME   DS    CL8                     DDNAME                           03920000
RECFM    DS    X                       RECFM                            03930000
LRECL    DS    H                       LRECL                            03940000
BLKSIZE  DS    H                       BLKSIZE                          03950000
SEQNO    DS    FL1                     SEQNO (concatenation)            03960000
DSNAME   DS    CL44                    MODIFIABLE DSNAME                03970000
WTO1L    WTO   '&WTO1',MF=L,ROUTCDE=11                                  03980000
WTO1LL   EQU   *-WTO1L                                                  03990000
WTO1TEXT EQU   WTO1L+4,120                                              04000000
*---------------------------------------------------------------------* 04010000
*        CATALOG PARAMETER LIST                                         04020000
*---------------------------------------------------------------------* 04030000
CTGPL    DS    0D                                                       04040000
CTGOPTN1 DS    B              FIRST OPTION BYTE:                        04050000
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR   04060000
CTGOPTN2 DS    B              SECOND OPTION BYTE                        04070000
CTGOPTN3 DS    B     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION 04080000
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION                    04090000
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL 04100000
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST        04110000
CTGOPTN4 DS    B              FOURTH OPTION BYTE                        04120000
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)     04130000
CTGENT   DS    A              ADDRESS OF CATALOG RECORD IDENTIFIER      04140000
CTGCAT   DS    A              ADDRESS OF CATALOG DSNAME OR ACB          04150000
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA             04160000
CTGOPTNS DS    B              CATALOG MANAGMENT SERVICES REQUEST OPTION 04170000
         DS    B              RESERVED                                  04180000
CTGTYPE  DS    C              TYPE OF CATALOG RECORD                    04190000
CTGNOFLD DS    FL1            NUMBER OF ENTRIES IN CTGFIELD             04200000
CTGFDBK  DS    XL2            FEEDBACK AREA (IF NOT SUPERLOCATE)        04210000
CTGFBFLG DS    B              FLAGS (SUPERLOCATE)                       04220000
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT                          04230000
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP                             04240000
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED                        04250000
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)  04260000
         DS    B              RESERVED (SUPERLOCATE)                    04270000
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD       04280000
*---------------------------------------------------------------------* 04290000
*        CATALOG WORK AREA                                              04300000
*---------------------------------------------------------------------* 04310000
CTGWA    DS    0D                                                       04320000
CTGWAVL  DS    A                       PTR TO CTGVL (VOLUME LIST)       04330000
CTGWALV  DS    H                       LENGTH OF THE VOLUME LIST        04340000
CTGWAVCT DS    H                       # OF VOLSERS RETURNED IN VL      04350000
CTGWAUCT DS    H                       MINIMUM # OF VOLS TO BE MOUNTED  04360000
CTGWAGCT DS    H                       # OF GENERATIONS CATALOGED       04370000
CTGWAGB  DS    A                       PTR TO APPARENT GEN(0)           04380000
*---------------------------------------------------------------------* 04390000
*        CATALOG VOLUME LIST                                            04400000
*---------------------------------------------------------------------* 04410000
CTGVL    DS    0D                                                       04420000
CTGVLVOL DS    CL6                     VOLUME SERIAL                    04430000
CTGVLDEV DS    XL4                     DEVICE TYPE                      04440000
CTGVLSEQ DS    H                       FILE SEQNO                       04450000
CTGVLX   DS    19XL12                  VOLUME LIST EXTENSION            04460000
CTGVLLEN EQU   *-CTGVL                 LENGTH OF VOLUME LIST            04470000
DYNAML   EQU   *-DYNAM                                                  04480000
*---------------------------------------------------------------------  04490000
*        GDG NAMES TABLE MAPPING (USING IEFZB902 AS A MODEL)            04500000
*---------------------------------------------------------------------  04510000
GDGNTABL DSECT                                                          04520000
GDGNQSVA DS    XL3                     SVA OF NEXT GDGNT RECORD         04530000
GDGNTID  DS    X'23'                   GDGNT ID X'23'                   04540000
GDGNNEXT DS    A                       IN-CORE ADDRESS OF NEXT RECORD   04550000
GDGNGDG  DS    CL35                    GDG BASE                         04560000
GDGNGDGZ DS    C'1234'                 APPARENT (0) GENERATION          04570000
GDGNGDG2 DS    CL35,C'1234'            2ND GDG NAME                     04580000
         DS    CL35,C'1234'            3RD GDG NAME                     04590000
         DS    CL35,C'1234'            4TH GDG NAME                     04600000
GDGNNO   DS    FL1                     NUMBER OF ENTRIES                04610000
         DS    XL15                    FILLER                           04620000
GDGNLEN  EQU   GDGNTABL+176                                             04630000
*---------------------------------------------------------------------  04640000
*        MAPPING MACROS                                                 04650000
*---------------------------------------------------------------------  04660000
         PRINT NOGEN                                                    04670000
         IKJTCB LIST=NO                TASK CONTROL BLOCK               04680000
         IEZJSCB                       JOB STEP CONTROL BLOCK           04690000
JCT      DSECT                                                          04700000
         IEFAJCTB                      JOB CONTROL BLOCK                04710000
SCT      DSECT                                                          04720000
         IEFASCTB                      STEP CONTROL BLOCK               04730000
SCTSNEW  EQU   4                       BIT 5 - NEW DATA SET             04740007
SCTSOLD  EQU   1                       BIT 7 - OLD DATA SET             04750007
SIOT     DSECT                                                          04760000
         IEFASIOT                      STEP I/O TABLE                   04770000
JFCB     DSECT                                                          04780000
         IEFJFCBN LIST=YES             JOB FILE CONTROL BLOCK           04790000
         CVT   DSECT=YES               COMMUNICATION VECTOR TABLE       04800007
         IHASDWA                       ESTAE                            04810007
         STRING GENERATE               Generate CSECT                   04820007
*        YREGS                         REGISTER EQUATES                 04830007
R0       EQU   0                                                        04840007
R1       EQU   1                                                        04850007
R2       EQU   2                                                        04860007
R3       EQU   3                                                        04870007
R4       EQU   4                                                        04880007
R5       EQU   5                                                        04890007
R6       EQU   6                                                        04900007
R7       EQU   7                                                        04910007
R8       EQU   8                                                        04920007
R9       EQU   9                                                        04930007
R10      EQU   10                                                       04940007
R11      EQU   11                                                       04950007
R12      EQU   12                                                       04960007
R13      EQU   13                                                       04970007
R14      EQU   14                                                       04980007
R15      EQU   15                                                       04990007
         END   BEGIN                                                    05000001
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR                                 05030005
//         DD DSN=SYS1.MACLIB,DISP=SHR                                  05040005
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR      STRING macro        05050005
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   05060007
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   05070007
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   05080007
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      05090007
//SYSPRINT DD SYSOUT=*                                                  05100005
//*                                                                     05110000
//LKED    EXEC PGM=IEWL,PARM='RENT,AC=1'                                05120007
//SYSPRINT DD SYSOUT=*                                                  05130000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       05140007
//         DD *                                                         05150005
 CHANGE @STRING(@STRING2)                                               05160007
 INCLUDE SYSLMOD(RECALL)                                                05170007
//SYSLMOD  DD DSN=SYS2.AUTHLIB(DONTFAIL),DISP=SHR                       05180006
//*                                                                     05190000
//NULLFIL1 EXEC PGM=DONTFAIL                                            05200000
//SYSUDUMP DD SYSOUT=*                                                  05210000
//ABNLIGNR DD DUMMY                                                     05220005
//*                                                                     05230000
//REPRO1   EXEC PGM=IDCAMS                                              05240000
//SYSPRINT DD SYSOUT=*                                                  05250000
//INDD     DD DSN=GILBERT.UNCAT1,LRECL=80,DISP=SHR  ,RECFM=FB           05260000
//         DD DSN=GILBERT.X80,DISP=SHR                                  05270000
//         DD DSN=IBMUSER.UNCAT2,DISP=SHR                               05280000
//OUTDD    DD DUMMY,BLKSIZE=800                                         05290000
 REPRO IFILE(INDD) OFILE(OUTDD)                                         05300000
//DISPMOD  DD UNIT=SYSDA,SPACE=(TRK,0),DSN=&&REFMOD,DISP=MOD            05310006
//VOLREF1  DD VOL=REF=*.DISPMOD,DSN=*.DISPMOD,DISP=OLD                  05320001
//DISPNEW  DD UNIT=SYSDA,SPACE=(TRK,0),DSN=&&REFNEW,DISP=NEW            05330006
//VOLREF2  DD VOL=REF=*.DISPNEW,DSN=*.DISPNEW,DISP=OLD                  05340001
//*                                                                     05350000
//NULLFIL2 EXEC PGM=DONTFAIL                                            05360000
//SYSUDUMP DD SYSOUT=*                                                  05370000
//ABNLIGNR DD DUMMY                                                     05380005
//*                                                                     05390000
//SORT2   EXEC PGM=SORT                                                 05400000
//SYSOUT   DD SYSOUT=*                                                  05410000
//SORTIN   DD DSN=GILBERT.UNCAT1,LRECL=80,DISP=SHR  ,RECFM=FB           05420000
//         DD DSN=GILBERT.X80,DISP=SHR                                  05430000
//         DD DSN=GILBERT.UNCAT2,DISP=SHR                               05440000
//SORTOUT  DD DUMMY,BLKSIZE=800                                         05450000
 SORT FIELDS=(1,8,CH,A)                                                 05460000
./ ADD NAME=EASYSORT 0204-81101-06210-1249-00186-00183-00150-CBT472
//GILBERTE JOB (ACCT#),EASYSORT,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040004
         MACRO                                                          00060004
&REF     EASYSORT &FUNC,&WORKA,&EODAD=,&SET=(R1),                      X00070004
               &TYPE=F,&LENGTH=80,&FIELDS=(1,80,CH,A)                   00080004
.********************************************************************** 00090004
.*                                                                    * 00100004
.*   USAGE:                                                           * 00110004
.*                                                                    * 00120004
.*       SORT  OPEN,TYPE=F,LENGTH=64,FIELDS=(1,22,CH,A)               * 00130004
.*       SORT  PUT,(1)                                                * 00140004
.*       SORT  GET,SET=(R3),EODAD=ENDSORT                             * 00150004
.*                                                                    * 00160004
.********************************************************************** 00170004
         GBLB  &EASYSRT                                                 00180004
         LCLC  &LABEL,&LQ                                               00190004
&LABEL   SETC  'IHB&SYSNDX'                                             00200004
         AIF   ('&FUNC' EQ 'OPEN').OPEN                                 00210004
         AIF   ('&FUNC' EQ 'PUT').PUT                                   00220004
         AIF   ('&FUNC' EQ 'GET').GET                                   00230004
         MNOTE 8,'INVALID FUNCTION REQUESTED &FUNC'                     00240004
&REF     DS    0H                                                       00250004
         MEXIT                                                          00260004
.OPEN    ANOP  ,  ====== OPEN ========                                  00270004
&REF     L     R15,=A(SORT$OPN)        .                                00280004
         LA    R1,=A(&LABEL.P+X'80000000') PARM LIST ADDRESS            00290004
         BALR  R14,R15                 OPEN SORT                        00300004
SORT$XXX CSECT                                                          00310004
.********************************************************************** 00320004
         AIF   (&EASYSRT).NOOPN        JUMP IF NOT FIRST OPEN           00330004
&EASYSRT SETB  1                                                        00340004
SORT$OPN STM   R14,R12,12(R13)         SAVE REGISTERS                   00350004
         USING SORT$OPN,R15                                             00360004
         ST    R13,SORT$SAV+4          BACKWARD CHAIN                   00370004
         LA    R13,SORT$SAV            SORT SAVE AREA                   00380004
         MVI   0(R13),C'0'             PHASE 0 ENTERED                  00390004
*        LINK  SF=(E,SORT$LNK)         LINK EP=SORT,SF=L                00400004
         LINK  SF=(E,SORT$LNK)         LINK EP=SORT,SF=L                00410004
         L     R13,4(,R13)             RELOAD PROGRAM'S SAVE AREA ADDR. 00420004
         LM    R14,R12,12(R13)         RESTORE REGISTERS (GET)          00430004
         SLR   R1,R1                   INVALIDATE RECORD POINTER        00440004
         BR    R14                     GOBACK TO PROGRAM (GET)          00450004
SORT$E15 STM   R14,R12,12(R13)         SAVE REGISTERS FROM SORT         00460004
         USING SORT$E15,R15                                             00470004
.*       ST    R13,SORT$SAV+8          ESTABLISH CHAIN FOR PUT          00480004
         L     R13,SORT$SAV+4          PROGRAM'S SAVE AREA              00490004
         MVI   SORT$SAV,C'1'           PHASE 1 STARTED                  00500004
         LM    R14,R12,12(R13)         RESTORE PROGRAM'S REGISTERS      00510004
         BR    R14                     GOBACK TO PROGRAM (PUT)          00520004
SORT$PUT STM   R14,R12,12(R13)         SAVE PROGRAM'S REGISTERS         00530004
         USING SORT$OPN,R15                                             00540004
         L     R13,SORT$SAV+8          SAVE AREA FOR E15                00550004
         LM    R14,R0,12(R13)          RESTORE SORT R14-R0              00560004
         LA    R15,0012(0)             INSERT RECORD REQUEST            00570004
         LM    R2,R12,28(R13)          RESTORE SORT R2-R12              00580004
         BR    R14                     GOBACK TO SORT (E15)             00590004
SORT$E35 STM   R14,R12,12(R13)         SAVE REGISTERS FROM SORT         00600004
         USING SORT$E35,R15                                             00610004
         ICM   R1,B'1111',0(R1)        ADDR OF SORTED RECORD            00620004
         BZ    SORT$E36                NO MORE RECORDS, TERMINATE E35   00630004
.*       ST    R13,SORT$SAV+8          ESTABLISH CHAIN FOR GET          00640004
         L     R13,SORT$SAV+4          PROGRAM'S SAVE AREA              00650004
         LM    R14,R0,12(R13)          RESTORE PROGRAM'S R14-R0         00660004
         LM    R2,R12,28(R13)          RESTORE PROGRAM'S R2-R12         00670004
         BR    R14                     GOBACK TO PROGRAM, PASS R1       00680004
SORT$E36 LA    R15,0008(0)             "QUIT" RETURN CODE               00690004
         BR    R14                     GOBACK TO SORT, TERMINATE E35    00700004
SORT$GET STM   R14,R12,12(R13)         SAVE PROGRAM'S REGISTERS         00710004
         USING SORT$OPN,R15                                             00720004
         L     R13,SORT$SAV+8          SAVE AREA FOR E15/E35            00730004
         CLI   SORT$SAV,C'3'           CHECK PHASE 3 ENTERED            00740004
         BE    &LABEL.3                JUMP IF E35 STARTED ALREADY      00750004
         MVI   SORT$SAV,C'3'           SHOW PHASE 3 ENTERED             00760004
         LM    R14,R12,12(R13)         RESTORE SORT REGISTERS           00770004
         LA    R15,0008(0)             END OF E15 REQUEST               00780004
         BR    R14                     GOBACK TO SORT (E15)             00790004
&LABEL.3 LM    R14,R12,12(R13)         RESTORE REGISTERS                00800004
         LA    R15,0004(0)             DELETE RECORD                    00810004
         BR    R14                     GOBACK TO SORT (E35)             00820004
         DROP  R15                                                      00830004
SORT$LNK LINK  EP=SORT,SF=L            PARAMETER LIST FOR LINK SVC      00840004
SORT$SAV DS    18F                     SAVE AREA FOR SORT               00850004
.NOOPN   CNOP  2,4                                                      00860004
&LQ      SETC  'L'''                                                    00870004
&LABEL.P DC    Y(&LABEL.S-(*+2))       LENGTH OF PARM LIST              00880004
         DC    A(&LABEL.S,&LABEL.S+&LQ&LABEL.S-1)                       00890004
         DC    A(&LABEL.R,&LABEL.R+&LQ&LABEL.R-1)                       00900004
         DC    A(SORT$E15,SORT$E35)                                     00910004
&LABEL.S DC    C' SORT FIELDS=&FIELDS,DYNALLOC=3380 '                   00920004
&LABEL.R DC    C' RECORD TYPE=&TYPE,LENGTH=&LENGTH ',0H'0'              00930004
&SYSECT  CSECT                                                          00940004
         MEXIT                                                          00950004
.********************************************************************** 00960004
.*       PUT                                                            00970004
.********************************************************************** 00980004
.PUT     AIF   ('&WORKA'(1,1) EQ '(').PUTREG                            00990004
&REF     LA    R1,&WORKA               GET RECORD ADDRESS               01000004
         AGO   .PUTCOMM                                                 01010004
.PUTREG  AIF   ('&WORKA' EQ '(1)' OR '&WORKA' EQ '(R1)').PUTREG1        01020004
&REF     LR    R1,&WORKA(1)            GET RECORD ADDRESS               01030004
         AGO   .PUTCOMM                                                 01040004
.PUTREG1 ANOP                                                           01050004
&REF     L     R15,=A(SORT$OPN)        POINT TO SORT CSECT              01060004
         AGO   .PUTBALR                                                 01070004
.PUTCOMM L     R15,=A(SORT$OPN)        POINT TO SORT CSECT              01080004
.PUTBALR BAL   R14,SORT$PUT-SORT$OPN(,R15) CALL PUT ROUTINE             01090004
         MEXIT                                                          01100004
.********************************************************************** 01110004
.*       GET                                                            01120004
.********************************************************************** 01130004
.GET     ANOP                                                           01140004
&REF     L     R15,=A(SORT$OPN)        POINT TO SORT CSECT              01150004
         BAL   R14,SORT$GET-SORT$OPN(,R15) CALL GET ROUTINE             01160004
         LTR   &SET(1),R1              CHECK RECORD ADDRESS             01170004
         BZ    &EODAD                  END OF DATA                      01180004
.MEND    MEND                                                           01190000
*********************************************************************** 01200001
*                                                                       01210002
*        TEST PROGRAM                                                   01220002
*                                                                       01230002
*********************************************************************** 01240001
         EJECT                                                          01250000
EASYSORT CSECT                                                          01260003
         SAVE  (14,12),,TEST-EASYSORT-&SYSDATE                          01270003
         BALR  R12,0                   BASE REGISTER                    01280000
         USING *,R12                                                    01290000
         ST    R13,SAVEAREA+4          CALLER'S SAVE AREA               01300000
         LA    R13,SAVEAREA            MY OWN SAVE AREA                 01310000
*********************************************************************** 01320000
         OPEN  SYSIN                                                    01330000
         EASYSORT OPEN,TYPE=F,LENGTH=32,FIELDS=(1,12,CH,A)              01340003
GET1     GET   SYSIN                   GET A SYSIN RECORD               01350000
         EASYSORT PUT,(R1)             PASS RECORD TO THE SORT (E15)    01360003
         B     GET1                    GET NEXT RECORD                  01370000
EOD1     CLOSE SYSIN                   CLOSE INPUT FILE                 01380000
         FREEPOOL SYSIN                FREE BUFFERS                     01390000
*********************************************************************** 01400000
         OPEN  (SYSPRINT,EXTEND)                                        01410000
PUT2     EASYSORT GET,SET=R0,EODAD=EOD2 GET SORTED RECORD (E35)         01420003
         PUT   SYSPRINT,(0)            PRINT RECORD                     01430000
         B     PUT2                    LOOP UNTIL LAST RECORD RETURNED  01440000
EOD2     CLOSE SYSPRINT                CLOSE OUTPUT FILE                01450000
         FREEPOOL SYSPRINT             FREE BUFFERS                     01460000
         L     R13,4(,R13)             CALLER'S SAVE AREA               01470000
         RETURN (14,12),RC=00                                           01480000
*********************************************************************** 01490000
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,EODAD=EOD1                01500000
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FB,LRECL=32      01510000
SAVEAREA DS    9D                                                       01520000
R0       EQU   0                                                        01530004
R1       EQU   1                                                        01540004
R2       EQU   2                                                        01550004
R3       EQU   3                                                        01560004
R4       EQU   4                                                        01570004
R5       EQU   5                                                        01580004
R6       EQU   6                                                        01590004
R7       EQU   7                                                        01600004
R8       EQU   8                                                        01610004
R9       EQU   9                                                        01620004
R10      EQU   10                                                       01630004
R11      EQU   11                                                       01640004
R12      EQU   12                                                       01650004
R13      EQU   13                                                       01660004
R14      EQU   14                                                       01670004
R15      EQU   15                                                       01680004
         END                                                            01690002
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01710000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01720004
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01730004
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01740004
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01750004
//SYSPRINT DD SYSOUT=*                                                  01760000
//*                                                                     01770000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  01780000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01790004
//SORTWK01 DD UNIT=3380,SPACE=(CYL,1)                                   01800004
//SYSOUT   DD SYSOUT=*                                                  01810000
//SYSPRINT DD SYSOUT=*                                                  01820001
//SYSIN    DD *                                                         01830000
555555555                                                               01840000
444444444444                                                            01850000
333333333333                                                            01860000
./ ADD NAME=EXECPGM  1806-85326-06210-1140-00377-00428-00151-CBT472
//GILBERTE JOB (ACCT#),EXECPGM,                                         00010005
// NOTIFY=&SYSUID,                                                      00020003
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030003
//*                                                                     00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050006
*********************************************************************** 00070000
*                                                                     * 00080004
*        EXECPGM - COMMAND PROCESSOR TO INVOKE A COMPILER WITH        * 00090004
*                  AN ALTERNATE DDN LIST - OS/VS2 VERSION             * 00100006
*                                                                     * 00110004
*        EXAMPLE:                                                     * 00120004
*                                                                     * 00130004
*          EXECPGM ASMA90      +                                      * 00140005
*            PARM('NOOBJECT,NODECK,NOXREF,NORLD,ALIGN')       +       * 00150004
*            STEPLIB(LINKLIST)     +                                  * 00160004
*            SYSIN(TEMPWK2)        +                                  * 00170004
*            SYSUT1(TEMPWK1)       +                                  * 00180004
*            SYSLIB(#ASMLIB)       +                                  * 00190004
*            SYSPRINT(ASMPRINT)                                       * 00200005
*                                                                     * 00210004
*1804 INVOKE THE DEBUGGING ROUTINE AS AN ESTAI                        * 00220004
*1805 BUMP OWN USE COUNT IF DEBUGGING ROUTINE IS INVOKED              * 00230005
*     TO PREVENT S0C1 WHEN PGM INVOKED VIA XCTL ABENDS                * 00240005
*1806 OS/VS2                                                          * 00250006
*********************************************************************** 00260000
         MACRO                                                    MACRO 00270006
        @MVCL  &TO,&FROM,&DD                                      MACRO 00280006
         TM    &FROM+6,X'80'           CHECK SUBPARAMETER         MACRO 00290006
         BZ    $&SYSNDX+2              JUMP IF NOT SPECIFIED      MACRO 00300006
         AIF   (T'&DD EQ 'O').MVC                                 MACRO 00310006
         MVI   PARMDDNL+1,8*&DD        LENGTH OF DDN LIST         MACRO 00320006
.MVC     LA    R14,&TO                 44-BYTE AREA               MACRO 00330006
         LA    R15,L'&TO               GET LENGTH                 MACRO 00340006
         ICM   R0,B'1111',&FROM        GET ADDRESS                MACRO 00350006
         LH    R1,&FROM+4              ACTUAL LENGTH OF &MBR      MACRO 00360006
         ICM   R1,B'1000',=CL8' '      PADDING                    MACRO 00370006
$&SYSNDX MVCL  R14,R0                  MOVE DATA SET NAME         MACRO 00380006
         MEND                                                     MACRO 00390006
*********************************************************************** 00400006
EXECPGM  CSECT                                                          00410000
         SAVE  (14,12),,'GSF UTILITIES - EXECPGM 18.06'                 00420006
         LR    R12,R15                                                  00430005
         USING EXECPGM,R12                                              00440005
         GETMAIN R,LV=DYNAML           GET DYNAMIC STORAGE              00450005
         ST    R13,4(,R1)                                               00460000
         ST    R1,8(,R13)                                               00470000
         LA    R14,72(,R1)             CLEAR WORKING STORAGE            00480000
         LA    R15,DYNAML-72           CLEAR WORKING STORAGE            00490000
         SR    R1,R1                   CLEAR WORKING STORAGE            00500000
         MVCL  R14,R0                  CLEAR WORKING STORAGE            00510000
         LM    R13,R1,8(R13)           SET R13, RELOAD R14-R1           00520000
         USING DYNAM,R13                                                00530000
         LR    R9,R1                   POINT AT CPPL.                   00540000
         USING CPPL,R9                                                  00550000
*                                                                       00560004
*        SET UP RECOVERY ENVIRONMENT (OPTIONAL)                         00570004
*                                                                       00580004
         WXTRN SYSDEBUG                OPTIONAL DEBUGGING ROUTINE       00590004
         ICM   R15,B'1111',=A(SYSDEBUG)  DEBUGGING ROUTINE              00600004
         BZ    PARSE000                NOT PRESENT, EXIT                00610004
         BALR  R14,R15                 SET UP RECOVERY ENVIRONMENT      00620004
         STM   R15,R0,ESTAIPRM         SAVE PARAMETERS FOR ATTACH       00630004
         L     R1,540(,0)              PSATOLD (MY TCB)                 00640004
         L     R1,0(,R1)               TCBRBP (MY PRB)                  00650004
         L     R1,12(,R1)              RBCDE (MY CDE)                   00660004
         LOAD  EPLOC=8(,R1)            BUMP MY OWN USE COUNT            00670004
*********************************************************************** 00680000
*                                                                     * 00690000
*        BUILD PARSE PARM LIST, CALL IKJPARS                          * 00700000
*                                                                     * 00710000
*********************************************************************** 00720000
PARSE000 LA    R1,DYNPPL               POINT TO PPL                     00730000
         USING PPL,R1                  SET UP ADDRESSABILITY TO PPL     00740000
         L     R0,CPPLUPT              USER PROFILE TABLE               00750000
         ST    R0,PPLUPT               STORE UPT ADDRESS IN PPL         00760000
         L     R0,CPPLECT              ENVIRONMENT CONTROL TABLE        00770000
         ST    R0,PPLECT               STORE ECT IN PPL                 00780000
         LA    R0,DYNECB               EVENT CONTROL BLOCK              00790000
         ST    R0,PPLECB               STORE ECB IN PPL                 00800000
         MVC   PPLPCL,=A(PCLCSECT)     STORE PCL ADDR INTO PPL          00810000
         LA    R0,DYNANSWR             ANSWER AREA                      00820000
         ST    R0,PPLANS               STORE ANSWER ADDRESS IN PPL      00830000
         L     R0,CPPLCBUF             COMMAND BUFFER                   00840000
         ST    R0,PPLCBUF              STORE BUFFER ADDRESS IN PPL      00850000
         LA    R14,=C'IKJPARS '        NAME OF PARSE ROUTINE            00860000
         L     R15,0016(0)             CVTPTR                           00870000
         L     R15,0008(,R15)          CVTLINK                          00880000
         STM   R14,R15,DWD             BUILD LINK PARMLIST              00890000
         LINK  SF=(E,DWD)              CALL THE PARSE ROUTINE           00900000
         LTR   R15,R15                 CHECK FOR ZERO PARSE RETURN      00910000
         BNZ   ABEND33                 GO AWAY UPSET                    00920000
         DROP  R1                      WAS PPL                          00930000
*********************************************************************** 00940000
*                                                                     * 00950000
*        PROCESS PARSED PARAMETERS                                    * 00960000
*                                                                     * 00970000
*********************************************************************** 00980000
         L     R8,DYNANSWR             LOAD PDL ADDRESS                 00990000
         USING IKJPARMD,R8             SET UP ADDRESSABILITY TO PDL     01000000
         LA    R14,PARM256             256-BYTE AREA                    01010000
         LA    R2,PARMPCE2             FIRST SUB-LIST ITEM              01020000
         TM    6(R2),X'80'             DO WE HAVE A PARM?               01030000
         BZ    ENDPARM                 NO, JUMP                         01040000
*LOOP                                                                   01050000
MAKEPARM LH    R15,4(,R2)              LENGTH OF SUB_ITEM               01060000
         L     R0,0(,R2)               GET ADDRESS                      01070000
         LR    R1,R15                  PASS LENGTH                      01080000
         ICM   R1,B'1000',=CL8' '      PADDING                          01090000
         MVCL  R14,R0                  MOVE DATA SET NAME               01100000
         MVI   0(R14),C','             ADD COMMA                        01110000
         LA    R14,1(,R14)             INCREMENT POINTER                01120000
         ICM   R2,B'1111',8(R2)        IS THIS THE LAST OPERAND?        01130000
         BP    MAKEPARM                NO, LOOP                         01140000
*ENDLOOP                                                                01150000
         BCTR  R14,0                   LAST COMMA                       01160000
ENDPARM  LA    R0,PARM256              256-BYTE AREA                    01170000
         SR    R14,R0                  USED LENGTH                      01180000
         STH   R14,PARM256L            USED LENGTH                      01190000
*                                                                       01200000
         MVC   DCBDDNAM,=CL8' '        BLANK OUT DDNAME                 01210000
*                                                                       01220000
        @MVCL  PGMNM,PGMPCE            PROGRAM NAME                     01230000
        @MVCL  DCBDDNAM,LOADPCE2       STEPLIB DDNAME                   01240000
        @MVCL  PARMDD1,LINPCE2,1       SYSLIN                           01250000
        @MVCL  PARMDD2,MBRPCE2,2       MEMBER NAME                      01260000
        @MVCL  PARMDD3,MODPCE2,3       SYSLMOD                          01270000
        @MVCL  PARMDD4,LIBPCE2,4       SYSLIB                           01280000
        @MVCL  PARMDD5,INPCE2,5        SYSIN                            01290000
        @MVCL  PARMDD6,PRTPCE2,6       SYSPRINT                         01300000
        @MVCL  PARMDD7,PUNPCE2,7       SYSPUNCH                         01310000
        @MVCL  PARMDD8,UT1PCE2,8       SYSUT1                           01320000
        @MVCL  PARMDD9,UT2PCE2,9       SYSUT2                           01330000
        @MVCL  PARMDD10,UT3PCE2,10     SYSUT3                           01340000
        @MVCL  PARMDD11,UT4PCE2,11     SYSUT4                           01350000
        @MVCL  PARMDD12,TRMPCE2,12     SYSTERM                          01360000
PARSE999 IKJRLSA DYNANSWR              RELEASE PDL                      01370000
*                                                                       01380000
ATTACH   LA    R14,PARM256L            JCLPARM                          01390000
         LA    R15,PARMDDNL            DDN LIST                         01400000
         STM   R14,R15,PARMLIST        BUILD PARM                       01410000
         OI    PARMLIST+4,X'80'        END OF LIST (WITH DDN LIST)      01420000
*                                                                       01430000
         CLI   PARMDDNL+1,00           ANY ALTERNATE DDN?               01440000
         BNE   ATTACH3                 YES, JUMP                        01450000
         OI    PARMLIST+0,X'80'        END OF LIST (NO DDN LIST)        01460000
*                                                                       01470000
ATTACH3  CLI   DCBDDNAM,C' '           STEPLIB SPECIFIED?               01480000
         BNH   XCTL1                   NO, SKIP OPEN                    01490000
*                                                                       01500000
         L     R2,0016                 CVTPTR                           01510000
         L     R2,0008(,R2)            CVTLINK                          01520000
         CLC   =C'LINKLIST',DCBDDNAM   STEPLIB(LINKLIST)?               01530000
         BE    ATTACH4L                YES, JUMP                        01540000
         CLC   =C'SYSTEM  ',DCBDDNAM   STEPLIB(SYSTEM)?                 01550000
         BE    ATTACH4L                YES, JUMP                        01560000
**       MVI   DCBDSORG,X'02'          DSORG=PO                         01570000
         MVI   DCBMACR1,X'D0'          MACRF=E                          01580000
         MVI   DCBMACR2,X'08'          MACRF=E                          01590000
         MVI   DCBOFLGS,X'02'          DCB FREE FOR USE                 01600000
         LA    R2,IHADCB               BUILD OPEN PARM LIST             01610000
         ST    R2,OPENLIST             BUILD OPEN PARM LIST             01620000
         MVI   OPENLIST,X'80'          BUILD OPEN PARM LIST             01630000
         OPEN  MF=(E,OPENLIST)         OPEN TASKLIB                     01640000
*---------------------------------------------------------------------* 01650004
*                                                                     * 01660004
*        ATTACH THE PROGRAM                                           * 01670004
*                                                                     * 01680004
*---------------------------------------------------------------------* 01690004
ATTACH4L LA    R1,PARMLIST             MOD PARM ADDRESS                 01700000
         LM    R3,R4,ESTAIPRM          ESTAI ADDR, PARM                 01710004
         LTR   R3,R3                   ESTAI=0 ?                        01720004
         BZ    ATTACH4I                YES, JUMP                        01730004
         ATTACH EPLOC=PGMNM,                                           X01740004
               TASKLIB=(R2),                                           X01750004
               ESTAI=((R3),(R4)),      DEBUGGING ROUTINE               X01760004
               ECB=ECB1,                                               X01770004
               SF=(E,ATTACHL)                                           01780004
         B     ATTACH4S                                                 01790004
ATTACH4I ATTACH EPLOC=PGMNM,                                           X01800004
               TASKLIB=(R2),                                           X01810004
               ECB=ECB1,                                               X01820004
               SF=(E,ATTACHL)                                           01830004
ATTACH4S ST    R1,ECB1+4               SAVE TCB ADDRESS                 01840004
         WAIT  1,ECB=ECB1              WAIT FOR COMPLETION              01850004
         DETACH ECB1+4                 DETACH SUBTASK                   01860004
         TM    DCBOFLGS,X'10'          DCB OPEN?                        01870000
         BZ    GOBACK                  NO, JUMP                         01880000
         CLOSE MF=(E,OPENLIST)         CLOSE TASKLIB                    01890000
*                                                                       01900000
GOBACK   LR    R1,R13                                                   01910000
         LH    R2,ECB1+2               PICK UP RETURN CODE              01920004
         L     R13,4(,R13)                                              01930000
         FREEMAIN RU,LV=DYNAML,A=(R1),SP=0                              01940004
         LR    R15,R2                  PASS RETURN CODE                 01950000
         RETURN (14,12),RC=(15)                                         01960000
ABEND33  ABEND 33                      IKJPARS FAILED                   01970006
*                                                                       01980000
*---------------------------------------------------------------------* 01990000
*        INVOKE PROGRAM VIA XCTL IF NO TASKLIB SPECIFIED              * 02000000
*---------------------------------------------------------------------* 02010000
*                                                                       02020000
XCTL1    LA    R15,DWD                 XCTL SF=L                        02030000
         LA    R1,PARMLIST             MOD PARM ADDRESS                 02040000
         LA    R2,PGMNM                POINT TO PROGRAM NAME            02050000
         SR    R3,R3                   NO DCB                           02060000
         STM   R2,R3,0(R15)            XCTL SF=L                        02070000
         L     R13,4(,R13)             CALLER'S SAVE AREA               02080000
         XCTL  (2,12),SF=(E,(15))      PASS CONTROL TO SPECIFIED PGM    02090000
*                                                                       02100000
*---------------------------------------------------------------------* 02110004
*        DEFINE INPUT PARAMETERS FOR IKJPARS                          * 02120000
*---------------------------------------------------------------------* 02130004
*                                                                       02140000
PCLCSECT IKJPARM                                                        02150000
PGMPCE   IKJPOSIT DSNAME,PROMPT='PROGRAM NAME'                          02160000
PARMPCE  IKJKEYWD                                                       02170000
         IKJNAME 'PARM',SUBFLD=PARMSUBF                                 02180000
LOADPCE  IKJKEYWD                                                       02190000
         IKJNAME 'STEPLIB',SUBFLD=LOADSUBF,ALIAS=('TASKLIB')            02200000
LINPCE   IKJKEYWD                                                       02210000
         IKJNAME 'SYSLIN',SUBFLD=LINSUBF                                02220000
MBRPCE   IKJKEYWD                                                       02230000
         IKJNAME 'MEMBER',SUBFLD=MBRSUBF,ALIAS=('MBR')                  02240000
MODPCE   IKJKEYWD                                                       02250000
         IKJNAME 'SYSLMOD',SUBFLD=MODSUBF                               02260000
LIBPCE   IKJKEYWD                                                       02270000
         IKJNAME 'SYSLIB',SUBFLD=LIBSUBF                                02280000
INPCE    IKJKEYWD                                                       02290000
         IKJNAME 'SYSIN',SUBFLD=INSUBF                                  02300000
PRTPCE   IKJKEYWD                                                       02310000
         IKJNAME 'SYSPRINT',SUBFLD=PRTSUBF                              02320000
PUNPCE   IKJKEYWD                                                       02330000
         IKJNAME 'SYSPUNCH',SUBFLD=PUNSUBF                              02340000
UT1PCE   IKJKEYWD                                                       02350000
         IKJNAME 'SYSUT1',SUBFLD=UT1SUBF                                02360000
UT2PCE   IKJKEYWD                                                       02370000
         IKJNAME 'SYSUT2',SUBFLD=UT2SUBF                                02380000
UT3PCE   IKJKEYWD                                                       02390000
         IKJNAME 'SYSUT3',SUBFLD=UT3SUBF                                02400000
UT4PCE   IKJKEYWD                                                       02410000
         IKJNAME 'SYSUT4',SUBFLD=UT4SUBF                                02420000
TRMPCE   IKJKEYWD                                                       02430000
         IKJNAME 'SYSTERM',SUBFLD=TRMSUBF                               02440000
*                                                                       02450000
PARMSUBF IKJSUBF                                                        02460000
PARMPCE2 IKJIDENT 'PARM',CHAR,LIST                                      02470000
LOADSUBF IKJSUBF                                                        02480000
LOADPCE2 IKJIDENT 'STEPLIB',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM        02490000
LINSUBF  IKJSUBF                                                        02500000
LINPCE2  IKJIDENT 'SYSLIN',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02510000
MBRSUBF  IKJSUBF                                                        02520000
MBRPCE2  IKJIDENT 'MEMBER',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02530000
MODSUBF  IKJSUBF                                                        02540000
MODPCE2  IKJIDENT 'SYSLMOD',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM        02550000
LIBSUBF  IKJSUBF                                                        02560000
LIBPCE2  IKJIDENT 'SYSLIB',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02570000
INSUBF   IKJSUBF                                                        02580000
INPCE2   IKJIDENT 'SYSIN',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM          02590000
PRTSUBF  IKJSUBF                                                        02600000
PRTPCE2  IKJIDENT 'SYSPRINT',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM       02610000
PUNSUBF  IKJSUBF                                                        02620000
PUNPCE2  IKJIDENT 'SYSPUNCH',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM       02630000
UT1SUBF  IKJSUBF                                                        02640000
UT1PCE2  IKJIDENT 'SYSUT1',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02650000
UT2SUBF  IKJSUBF                                                        02660000
UT2PCE2  IKJIDENT 'SYSUT2',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02670000
UT3SUBF  IKJSUBF                                                        02680000
UT3PCE2  IKJIDENT 'SYSUT3',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02690000
UT4SUBF  IKJSUBF                                                        02700000
UT4PCE2  IKJIDENT 'SYSUT4',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM         02710000
TRMSUBF  IKJSUBF                                                        02720000
TRMPCE2  IKJIDENT 'SYSTERM',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM        02730000
         IKJENDP                                                        02740000
*********************************************************************** 02750000
*                                                                     * 02760004
*        DYNAMIC STORAGE AREA                                         * 02770006
*                                                                     * 02780004
*********************************************************************** 02790000
DYNAM    DSECT                                                          02800000
         DS    18F                     SAVE AREA                        02810000
DWD      DS    D                       WORK AREA                        02820000
DYNECB   DS    F                       ECB FOR IKJPARS                  02830000
DYNANSWR DS    F                       WORKA FOR IKJPARS                02840000
DYNPPL   DS    8F                      PPL FOR IKJPARS                  02850000
ESTAIPRM DS    A(R15,R0)               DEBUGGING ROUTINE PARAMETERS     02860004
*                                                                       02870000
*---------------------------------------------------------------------* 02880004
*        PARAMETER LIST AND DDNAME LIST                               * 02890004
*---------------------------------------------------------------------* 02900004
*                                                                       02910000
PARMLIST DS    A(PARM256L,PARMDDNL)                                     02920000
PGMNM    DS    C'ASMA90  '             NAME OF PROGRAM TO BE INVOKED    02930005
ECB1     DS    F,A                     ATTACH ECB, TCB ADDR             02940004
PARM256L DS    Y(L'PARM256)            LENGTH OF PARM                   02950000
PARM256  DS    CL256                   PARM                             02960000
         CNOP  6,8                                                      02970000
PARMDDNL DS    Y(8*12)                 LENGTH OF PARM LIST              02980003
PARMDD1  DS    C'SYSLIN  '         #1  SYSLIN                           02990003
PARMDD2  DS    C'TEMPNAME'         #2  MEMBER NAME (LKED)               03000003
PARMDD3  DS    C'SYSLMOD '         #3  SYSLMOD     (LKED)               03010003
PARMDD4  DS    C'SYSLIB  '         #4  SYSLIB                           03020003
PARMDD5  DS    C'SYSIN   '         #5  SYSIN                            03030003
PARMDD6  DS    C'SYSPRINT'         #6  SYSPRINT (OR SYSLOUT)            03040003
PARMDD7  DS    C'SYSPUNCH'         #7  SYSPUNCH                         03050003
PARMDD8  DS    C'SYSUT1  '         #8  SYSUT1                           03060003
PARMDD9  DS    C'SYSUT2  '         #9  SYSUT2                           03070003
PARMDD10 DS    C'SYSUT3  '         #10 SYSUT3                           03080003
PARMDD11 DS    C'SYSUT4  '         #11 SYSUT4                           03090003
PARMDD12 DS    C'SYSTERM '         #12 SYSTERM                          03100003
DDNAME13 DS    C'SYSUT5  '         +96 SYSUT5                           03110003
DDNAME14 DS    C'SYSUT6  '        +104 SYSUT6    SYSCIN                 03120003
DDNAME15 DS    C'SYSUT7  '        +112 SYSUT7                           03130003
DDNAME16 DS    C'DBRMLIB '        +120 DBRMLIB                          03140003
*                                                                       03150000
*---------------------------------------------------------------------* 03160004
*        TASKLIB DCB AND ITS OPEN LIST                                * 03170004
*---------------------------------------------------------------------* 03180004
*                                                                       03190000
OPENLIST OPEN  IHADCB,MF=L                                              03200000
IHADCB   DS    13F                     MINI EXCP DCB                    03210000
DCBDDNAM EQU   IHADCB+40,8             DDNAME                           03220000
DCBOFLGS EQU   IHADCB+48,1             OPEN FLAGS                       03230003
DCBMACR1 EQU   IHADCB+50,1             MACRF=E                          03240000
DCBMACR2 EQU   IHADCB+51,1             MACRF=E                          03250000
ATTACHL  ATTACH SF=L                                                    03260000
DYNAML   EQU   *-DYNAM                                                  03270000
         IKJPPL                        PARSE PARAMETER LIST             03280000
         IKJCPPL                       COMMAND PROCESSOR PARM LIST      03290000
*        YREGS                         REGISTER EQUATES                 03300006
R0       EQU   0                                                        03310006
R1       EQU   1                                                        03320006
R2       EQU   2                                                        03330006
R3       EQU   3                                                        03340006
R4       EQU   4                                                        03350006
R5       EQU   5                                                        03360006
R6       EQU   6                                                        03370006
R7       EQU   7                                                        03380006
R8       EQU   8                                                        03390006
R9       EQU   9                                                        03400006
R10      EQU   10                                                       03410006
R11      EQU   11                                                       03420006
R12      EQU   12                                                       03430006
R13      EQU   13                                                       03440006
R14      EQU   14                                                       03450006
R15      EQU   15                                                       03460006
         END   EXECPGM                                                  03470003
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  03500004
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   03510006
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   03520006
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   03530006
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      03540006
//SYSPRINT DD SYSOUT=*                                                  03550004
//*                                                                     03560000
//LKED    EXEC PGM=IEWL,PARM='MAP,RENT'                                 03570006
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         03580006
//SYSLMOD  DD UNIT=VIO,SPACE=(1,(1,,1)),DSN=&&LOADMOD(EXECPGM),         03590004
//  DISP=(,PASS)                                                        03600000
//SYSPRINT DD SYSOUT=*                                                  03610004
//*                                                                     03620000
//GO      EXEC PGM=IKJEFT01                                             03630000
//STEPLIB  DD DSN=&&LOADMOD(EXECPGM),DISP=(OLD,PASS)                    03640004
//         DD DSN=GSFSOFT.PRISM-CS.LOAD,DISP=SHR                        03650005
//SYSTSPRT DD SYSOUT=*                                                  03670004
//SYSTSIN  DD *                                                         03680004
EXECPGM PDSUTIL PARM(RESET,OUTDD=TEMPDD,DCBS)                           03690000
//SYSPRINT DD SYSOUT=*                                                  03700004
//TEMPDD   DD UNIT=VIO,SPACE=(1,(1,,1)),RECFM=U,BLKSIZE=300             03710004
//SYSUDUMP DD SYSOUT=*                                                  03720004
//*                                                                     03730000
//LKED    EXEC PGM=IEWL,PARM='MAP,RENT'                                 03740003
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         03750006
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(EXECPGM),DISP=SHR               03760005
//SYSPRINT DD SYSOUT=*                                                  03770004
./ ADD NAME=FILLDASD 0202-88087-06210-1333-00246-00048-00085-CBT472
//GILBERTF JOB (ACCT#),FILLDASD,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040002
*********************************************************************** 00060000
*                                                                     * 00070000
* MODULE NAME = FILLDASD                                              * 00080000
*                                                                     * 00090000
* DESCRIPTIVE NAME = Fill free DASD space with binary zeroes (OS/VS2) * 00100002
*                                                                     * 00110000
* STATUS = R202                                                       * 00120002
*                                                                     * 00130000
* FUNCTION = This assembler program fills the free space that exists  * 00140000
*            on DASD volumes with binary zeroes.                      * 00150000
*            FILLDASD uses DYNALLOC to allocate temporary data sets   * 00160000
*            and fills the tracks with binary zeroes.                 * 00170000
*            If a volume serial is specified in the PARM, then only   * 00180000
*            the free space of the specified volume is cleared.       * 00190000
*            Otherwise, FILLDASD tries to allocate space on all the   * 00200000
*            available volumes (i.e. PUBLIC, STORAGE, or SMS-managed).* 00210000
*                                                                     * 00220000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00230001
*                                                                     * 00240000
* NOTES = SEE BELOW                                                   * 00250000
*                                                                     * 00260000
*    DEPENDENCIES = STRINGXF macro                                    * 00270002
*                                                                     * 00280000
*    AUTHORIZATION = NONE                                             * 00290000
*                                                                     * 00300000
*    RESTRICTIONS = NONE                                              * 00310000
*                                                                     * 00320000
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               * 00330000
*                                                                     * 00340000
*    PROCESSOR = IBM Assembler XF                                     * 00350002
*                                                                     * 00360000
*    MODULE SIZE = 2K                                                 * 00370000
*                                                                     * 00380000
*    ATTRIBUTES = NOREUS, PROBLEM STATE, KEY 8                        * 00390002
*                                                                     * 00400000
* OPERATION = See Examples below:                                     * 00410000
*                                                                     * 00420000
*   Clear free space on TEMP01                                        * 00430000
*                                                                     * 00440000
*     //FILLDASD EXEC PGM=FILLDASD,PARM=TEMP01                        * 00450000
*     //SYSPRINT DD SYSOUT=*                                          * 00460000
*                                                                     * 00470000
*   Clear free space on all available packs:                          * 00480000
*                                                                     * 00490000
*     //FILLDASD EXEC PGM=FILLDASD                                    * 00500000
*     //SYSPRINT DD SYSOUT=*                                          * 00510000
*                                                                     * 00520000
* PARAMETERS = None                                                   * 00530000
*                                                                     * 00540000
* RETURN-CODES = SEE BELOW                                            * 00550000
*                                                                     * 00560000
*        0       OK                                                   * 00570000
*        8       OPEN or CLOSE failed                                 * 00580000
*                                                                     * 00590000
* CHANGE LOG = SEE BELOW                                              * 00600001
*                                                                     * 00610001
*201 SYNAD                                                            * 00620001
*202 OS/VS2                                                           * 00630002
*********************************************************************** 00640000
FILLDASD CSECT                                                          00650000
         DC    C'GSF Utilities - FILLDASD R202 ',0H'0'                  00660002
BEGIN    LR    R12,R15                 BASE REG                         00670000
         USING BEGIN,R12                                                00680000
         L     R2,0(,R1)               A(JCLPARM)                       00690000
*                                                                       00700000
*        Retrieve optional volume serial from the parm                  00710000
*                                                                       00720000
         LH    R3,0(,R2)               L'JCLPARM                        00730000
         LTR   R3,R3                   VOLSER SPECIFIED IN THE PARM?    00740000
         BZ    OPENPRT                 NO, JUMP                         00750000
         STRING (2(R2),(R3)),INTO=VOLSER SAVE VOLUME SERIAL             00760000
         MVC   RTVOL,=AL2(DALVLSER)    VOLUME SERIAL IS KNOWN           00770000
*                                                                       00780000
*        Print title line                                               00790000
*                                                                       00800000
OPENPRT  OPEN  (SYSPRINT,OUTPUT)                                        00810000
         LTR   R15,R15                 OPEN OK?                         00820000
         BNZ   EOJ                     NO, EXIT                         00830000
         TIME  DEC                     GET DATE & TIME                  00840000
         STM   R0,R1,TIMEDATE          SAVE TIME AND DATE               00850000
         STRING '1GSF Utilities - FILLDASD R200 - PARM=''',            X00860000
               (2(R2),(R3)),''' ',(TIMEDATE+4,P,YYYY-MM-DD),           X00870000
               1X,(TIMEDATE+0,1,X),'.',(TIMEDATE+1,1,X),INTO=PRTLINE    00880000
         PUT   SYSPRINT,PRTLINE        WRITE TITLE LINE                 00890000
*                                                                       00900000
*        Set up DYNALLOC request block                                  00910000
*                                                                       00920000
         LA    R8,S99RB1               DYNALLOC REQUEST BLOCK           00930000
         USING S99RB,R8                                                 00940000
         MVI   S99RBLN,S99RBEND-S99RB  LENGTH                           00950000
         MVI   S99VERB,S99VRBAL        ALLOCATE                         00960000
         LA    R0,=A(WKUNIT,TRK,PRIME,RTVOL,RTDDN,CONTIG+VL)            00970000
         ST    R0,S99TXTPP             TEXT UNIT POINTERS               00980000
*---------------------------------------------------------------------* 00990000
*        Main Loop: Allocate temporary DASD data sets                 * 01000000
*        and fill them up with X'00'                                  * 01010000
*---------------------------------------------------------------------* 01020000
*LOOP                                                                   01030000
ALLOC    LA    R1,=A(S99RB1+VL)        S99RBPTR                         01040000
         DYNALLOC                                                       01050000
         LTR   R15,R15                 dynalloc ok?                     01060000
         BNZ   HALVE                   no, try smaller size             01070000
         MVC   DCBDISK+40(8),DDNAME    MOVE DDNAME INTO DCB             01080000
         OPEN  (DCBDISK,OUTPUT)        OPEN TEMP DATA SET               01090000
         LTR   R15,R15                 OPEN OK?                         01100000
         BNZ   EOJ                     NO, EXIT                         01110000
         L     R1,DCBDISK+44           DEB                              01120000
         LH    R3,046(,R1)             # of tracks actually allocated   01130000
         STRING 1X,%TIME,'ALLOCATED DDN=',DDNAME,                      X01140000
               ' VOL=',VOLSER,                                         X01150000
               ' TRACKS=',((R3),,L),                                   X01160000
               INTO=PRTLINE                                             01170000
         PUT   SYSPRINT,PRTLINE        WRITE A PRINT LINE               01180000
         LR    R0,R3                   TALLY TRACKS                     01190000
         AL    R0,TOTTRKS              TALLY TRACKS                     01200002
         ST    R0,TOTTRKS              TALLY TRACKS                     01210002
         ALR   R3,R3                   # OF BLOCKS                      01220000
         SLR   R0,R0                                                    01230000
         LH    R1,DCBDISK+62           BLKSIZE                          01240000
         LH    R2,DCBDISK+82           LRECL                            01250000
         DR    R0,R2                   RECORDS/BLOCK                    01260000
         MR    R2,R1                   # OF RECORDS                     01270000
*--LOOP                                                                 01280000
PUTDISK  PUT   DCBDISK                 LOCATE A DISK RECORD             01290000
         BCT   R3,PUTDISK              FILL UP THE TRACKS               01300000
*--LOOP                                                                 01310000
         CLOSE DCBDISK                 CLOSE DISK DCB                   01320000
         FREEPOOL DCBDISK              free buffer pool                 01330000
         B     ALLOC                                                    01340000
HALVE    SLR   R2,R2                                                    01350000
         ICM   R2,B'0111',PRIMEQTY     # OF TRACKS                      01360000
         SRL   R2,1                    HALVE                            01370000
         STCM  R2,B'0111',PRIMEQTY     # OF TRACKS                      01380000
         LTR   R2,R2                   ZERO?                            01390000
         BP    ALLOC                   NO, CONTINUE                     01400000
*ENDLOOP                                                                01410000
         STRING '0',%TIME,'TOTAL TRACKS WRITTEN: ',(TOTTRKS,F,L),      X01420002
               INTO=PRTLINE                                             01430000
         PUT   SYSPRINT,PRTLINE        WRITE LAST PRINT LINE            01440000
         CLOSE SYSPRINT                CLOSE PRINT DCB                  01450000
EOJ      SVC   3                       EOJ                              01460000
*---------------------------------------------------------------------* 01470001
*                                                                     * 01480001
*        Error routine to trap hardware errors (EQC)                  * 01490001
*                                                                     * 01500001
*        //DD1 DD DSN=SYS1.VDATA33.CYL-01EF.TRK-000B,DISP=(,CATLG),   * 01510001
*        //  DSORG=PSU,RECFM=F,BLKSIZE=80,                            * 01520001
*        //  UNIT=3390,VOL=SER=DATA33,SPACE=(ABSTR,(1,7436))          * 01530001
*                                                                     * 01540001
*---------------------------------------------------------------------* 01550001
SYNAD1   LR    R10,R14                 return address                   01560001
         SYNADAF ACSMETH=QSAM          get error message                01570001
         LR    R2,R1                   addr of SYNAD message            01580001
         STRING '0',%TIME,(50(R2),128-50),INTO=PRTLINE                  01590001
         PUT   SYSPRINT,PRTLINE        WRITE SYNAD MESSAGE              01600001
**       STRING '0',%TIME,(DCBDISK+8,4,X),INTO=PRTLINE                  01610001
         LA    R0,8                    L'CCCCHHHH                       01620001
         LA    R1,111(,R2)             CCCCHHHH                         01630001
*LOOP                                                                   01640001
SYNAD2   CLI   0(R1),C'F'              A-F ?                            01650001
         BH    SYNAD2N                 NO, ITERATE                      01660001
         IC    R14,0(,R1)              yes, X'C1' -> X'CA'              01670001
         LA    R14,9(,R14)             yes, X'C1' -> X'CA'              01680001
         STC   R14,0(,R1)              yes, X'C1' -> X'CA'              01690001
SYNAD2N  LA    R1,1(,R1)               BUMP INDEX UP                    01700001
         BCT   R0,SYNAD2               ITERATE                          01710001
*ENDLOOP                                                                01720001
         PACK  DWD(3),111(5,R2)        CCCC..                           01730001
         LH    R4,DWD                  CCCC                             01740001
         MH    R4,=H'15'               cylinders -> tracks              01750001
         PACK  DWD+2(3),111+4(5,R2)    HHHH..                           01760001
         AH    R4,DWD+2                add tracks                       01770001
         STRING '0',%TIME,'Bad track at CCHH=',(DWD,4,X),              X01780001
               ' VOL=SER=',VOLSER,',SPACE=(ABSTR,(1,',((R4),,L),'))',  X01790001
               INTO=PRTLINE                                             01800001
         PUT   SYSPRINT,PRTLINE        WRITE CCHH                       01810001
         SYNADRLS                      free error message and save area 01820001
         BR    R10                     goback to PUT macro              01830001
*---------------------------------------------------------------------* 01840000
*        CONSTANTS AND DATA                                           * 01850000
*---------------------------------------------------------------------* 01860000
WKUNIT   DC    AL2(DALUNIT,1,8),CL8'SYSALLDA'                           01870000
TRK      DC    AL2(DALTRK,0)                                            01880000
PRIME    DC    AL2(DALPRIME,1,L'PRIMEQTY)                               01890000
PRIMEQTY DC    FL3'10000'                                               01900000
RTVOL    DC    AL2(DALRTVOL,1,L'VOLSER)                                 01910000
VOLSER   DC    C'123456'                                                01920000
RTDDN    DC    AL2(DALRTDDN,1,L'DDNAME)                                 01930000
DDNAME   DC    CL8' '                                                   01940000
CONTIG   DC    AL2(DALSPFRM,1,1),X'08'                                  01950000
DWD      DS    D                                                        01960001
DCBDISK  DCB   DSORG=PS,MACRF=PL,DDNAME=*,RECFM=FB,LRECL=80,BUFNO=10,  X01970001
               SYNAD=SYNAD1                                             01980001
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=121    01990000
S99RB1   DC    XL20'00'              XL(S99RBEND-S99RB)'00'             02000002
TIMEDATE DS    2F                    TIME MACRO                         02010000
TOTTRKS  DS    F                                                        02020002
PRTLINE  DS    CL121                                                    02030000
VL       EQU   X'80000000'           END OF LIST                        02040000
         IEFZB4D0                    S99RB                              02050000
         IEFZB4D2                    KEY TABLE                          02060000
         STRING GENERATE                                                02070000
*        YREGS                                                          02080002
R0       EQU   0                                                        02090002
R1       EQU   1                                                        02100002
R2       EQU   2                                                        02110002
R3       EQU   3                                                        02120002
R4       EQU   4                                                        02130002
R5       EQU   5                                                        02140002
R6       EQU   6                                                        02150002
R7       EQU   7                                                        02160002
R8       EQU   8                                                        02170002
R9       EQU   9                                                        02180002
R10      EQU   10                                                       02190002
R11      EQU   11                                                       02200002
R12      EQU   12                                                       02210002
R13      EQU   13                                                       02220002
R14      EQU   14                                                       02230002
R15      EQU   15                                                       02240002
         END   BEGIN                                                    02250000
//SYSPRINT DD SYSOUT=*                                                  02280000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  02290000
//         DD DSN=GILBERT.FILE999.PDS,DISP=SHR       STRINGXF           02300002
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   02310002
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   02320002
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   02330002
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      02340002
//*                                                                     02350000
//*       clear free space on VOL=OS39M1                                02360000
//*                                                                     02370000
//GO      EXEC PGM=LOADER,PARM='NOPRINT/OS39M1'                         02380000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         02390002
//SYSPRINT DD SYSOUT=*                                                  02400000
//*                                                                     02410000
//*       clear free space on public and storage volumes                02420002
//*                                                                     02430000
//GO      EXEC PGM=LOADER,PARM='NOPRINT'                                02440000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         02450002
//SYSPRINT DD SYSOUT=*                                                  02460000
./ ADD NAME=GETDIR   0101-82209-06210-1341-00143-00004-00000-CBT472
//GILBERTG JOB (ACCT#),GETDIR,
// NOTIFY=&SYSUID,
// CLASS=A,MSGCLASS=H,COND=(0,NE)
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)
*
*    THE "GETDIR" MACRO ALLOWS YOU TO READ A PDS DIRECTORY
*    SEQUENTIALLY, AS FOLLOWS:
*
*        IT WORKS IN "LOCATE" MODE; AFTER EACH INVOCATION, THE
*        ADDRESS OF A DIRECTORY ENTRY (MEMBER NAME, TTR, ETC) IS
*        RETURNED IN R1.
*
*        IT USES A BPAM DCB (DSORG=PO,MACRF=R), NOT A QSAM DCB
*        (WHICH WOULD HAVE DSORG=PS).  THIS ALLOWS YOU TO READ THE
*        DIRECTORY AND THE MEMBERS WITH THE SAME DCB.
*
*        R1 IS SET TO ZERO WHEN THE END OF THE DIRECTORY IS REACHED.
*        THE "EODAD" KEY-WORD OF THE "GETDIR" MACRO MAY BE USED TO
*        SPECIFY THE ADDRESS OF THE END-OF-DIRECTORY ROUTINE.
*        THE EODAD KEY-WORD OF THE DCB IS ONLY USED AT END-OF-MEMBER.
*
*        THE "GETDIR" MACRO ONLY PROCESSES THE FIRST PDS IN A
*        CONCATENATION, AND WILL NOT WORK WITH A PDSE.
*
         MACRO
&NAME    GETDIR &DCB,&EODAD=
         GBLB  &GETDIRB
&NAME    IHBINNRA &DCB
         L     R15,=A(@GETDIR)         ADDR OF "GETDIR" RTNE
         BALR  R14,R15                 GET A DIRECTORY ENTRY
         AIF   (T'&EODAD EQ 'O').GEN
         LTR   R1,R1                   END OF DIRECTORY?
         BZ    &EODAD                  YES, GO AWAY
.GEN     AIF   (&GETDIRB).MEND
&GETDIRB SETB  1
.**********************************************************************
.*
.*       GETDIR SUB-ROUTINE
.*
.**********************************************************************
@GETDIR  CSECT
         SAVE  (14,12),,'GETDIR 840510'
         BALR  R2,0
         USING *,R2
         LR    R3,R1                   ADRESSE DU DCB
         ST    R13,@GETDSAV+4
         LA    R13,@GETDSAV
         LA    R5,X'000100'            TT=00, R=1, N=0
         ICM   R1,B'1111',@GETDR1      CURRENT POS IN BUFFER
         BZ    @GETD22                 PICK UP PARM LIST OFFSET
         LA    R14,X'1F'               MASQUE POUR "AND"
         IC    R0,11(,R1)              "C" BYTE
         NR    R14,R0                  NOMBRE DE HALFWORDS
         LA    R14,12(R14,R14)         LONGUEUR DU POSTE DANS R14
         LH    R15,@GETDBUF            LONGUEUR UTILISEE
         LA    R15,@GETDBUF-1(R15)     ADRESSE DERNIER OCTET UTILISE
         BXLE  R1,R14,@GETD24
         AL    R5,@GETDR5              INCREMENTER LE NUMERO D'ENREG
@GETD22  ST    R5,@GETDR5              TTRN DU BLOC SUIVANT
         POINT (R3),@GETDR5            POINTER SUR LE BON BLOC
         LH    R4,62(,R3)              SAUVER DCBBLKSI
         MVI   62(R3),1                BLKSIZE=256
         MVI   63(R3),0                BLKSIZE=256
         READ  @GETDECB,SF,(R3),@GETDBUF,'S'
         STH   R4,62(,R3)              RESTAURER DCBBLKSI
         CHECK @GETDECB
         LA    R1,@GETDBUF+2           1ER POSTE
@GETD24  CLI   0(R1),X'FF'             FIN DE BLOC?
         BNE   @GETD29                 NON, RENDRE L'ADRESSE
         SLR   R1,R1                   FIN-DE-REPERTOIRE
@GETD29  ST    R1,@GETDR1              GARDER L'ADRESSE
         L     R13,4(,R13)
         L     R14,12(,R13)            ADRESSE DE RETOUR
         LM    R2,R12,28(R13)          R2-R3
         BR    R14
@GETDR1  DS    A(@GETDBUF+2)           POINTEUR COURANT DANS LE BUFFER
@GETDR5  DS    F                       TTRN DU BLOC COURANT
@GETDSAV DS    18F
@GETDBUF DS    H,254X
&SYSECT  CSECT
.MEND    MEND
**********************************************************************
**********************************************************************
********* TEST PROGRAM FOR THE 'GETDIR' MACRO ************************
**********************************************************************
**********************************************************************
TESTPGM  START 0
         BALR  R12,0
         USING *,R12
         OPEN  (SYSLIB,,SYSPRINT,OUTPUT)
*LOOP
GETD     GETDIR SYSLIB,EODAD=EOJ
         MVC   WORK80(11),0(R1)         SAVE MEMBER NAME AND TTR
         PUT   SYSPRINT,WORK80
         FIND  SYSLIB,WORK80+8,C        FIND WITH TTR0
         READ  DECB1,SF,SYSLIB,BUFF1    READ FIRST BLOCK
         CHECK DECB1
         L     R6,=A(BUFF1)
         PUT   SYSPRINT,(R6)            WRITE FIRST LINE
         B     GETD
*ENDLOOP
EOJ      SLR   R15,R15
         SVC   3                        GOBACK
SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=80
SYSLIB   DCB   DSORG=PO,DDNAME=SYSLIB,MACRF=R,EODAD=EOJ
WORK80   DS    XL80
BUFF1    CSECT
         DS    32760X
*        YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//SYSPRINT DD SYSOUT=*
//*
//GO      EXEC PGM=LOADER,PARM=NOPRINT
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)
//SYSLIB   DD DSN=SYS1.PROCLIB,DISP=SHR
//SYSPRINT DD SYSOUT=*,OUTLIM=666
//ABNLTERM DD SYSOUT=*
//ABNLDUMP DD DUMMY
//SYSUDUMP DD SYSOUT=*
./ ADD NAME=GSFLKED  0101-82019-06210-1118-00165-00037-00029-CBT472
//GILBERTL JOB (ACCT#),GSFLKED,                                         00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040001
*********************************************************************** 00060000
*                                                                     * 00070000
*    THIS PROGRAM IS A FRONT-END TO THE LINKAGE-EDITOR WHICH          * 00080000
*    PROVIDES THE FOLLOWING FACILITIES:                               * 00090000
*                                                                     * 00100000
*    1. IF THERE IS AN //INCLUDE DD THAT POINTS TO AN EXISTING        * 00110000
*       PDS MEMBER, THEN THIS MEMBER IS APPENDED TO THE SYSLIN FILE.  * 00120000
*                                                                     * 00130000
*    2. IF THERE IS A //COMPRESS DD IN THE STEP AND THE LINK-EDIT     * 00140000
*       ABENDS WITH SD37-04, THEN IEBCOPY IS INVOKED TO COMPRESS      * 00150000
*       THE SYSLMOD DATA SET AFTER WHICH THE LINK-EDIT IS INVOKED     * 00160000
*       AGAIN.  THE COMPRESS DD MUST CONTAIN THE IEBCOPY SYSIN,       * 00170000
*       AS FOLLOWS:                                                   * 00180000
*                                                                     * 00190000
*            //COMPRESS DD *                                          * 00200000
*              COPY I=SYSLMOD,O=SYSLMOD                               * 00210000
*                                                                     * 00220000
*    3. IF THERE IS AN //RC0 DD DUMMY CARD IN THE STEP'S JCL,         * 00230000
*       THE RETURN CODE OF THE STEP WILL BE RESET TO ZERO.            * 00240000
*                                                                     * 00250000
*********************************************************************** 00260000
GSFLKED  CSECT                                                          00270000
         SAVE  (14,12),,'GSF UTILITIES - GSFLKED'                       00280000
         BALR  R12,0                                                    00290000
         USING *,R12                                                    00300000
         LR    R14,R13                                                  00310000
         LA    R13,=CL72'APPEL LINK-EDIT AVEC CODE RETOUR A ZERO'       00320000
         ST    R14,4(,R13)                                              00330000
         ST    R13,8(,R14)                                              00340000
         ST    R1,@PARM                                                 00350000
*                                                                       00360000
*        TEST FOR THE //INCLUDE DD CARD.                                00370000
*        IF PRESENT, TEST FOR AN EXISTING MEMBER.                       00380000
*          IF MEMBER EXISTS, APPEND IT TO SYSLIN DD                     00390000
*                                                                       00400000
         RDJFCB MF=(E,OPLPO)             SI PRESENTE,                   00410000
         LTR   R15,R15                      CARTE DD 'INCLUDE'          00420000
         BNZ   LINK0                                                    00430000
         OPEN  MF=(E,OPLPO)               CHERCHER SI LE                00440000
         MVC   BLDLIST+4(8),EXL1+4+44      MEMBRE EST                   00450000
         BLDL  INPO,BLDLIST                 PRESENT                     00460000
         LR    R2,R15                                                   00470000
         CLOSE MF=(E,OPLPO)                                             00480000
         LTR   R2,R2                       SI PRESENT,                  00490000
         BNZ   LINK0                      LIRE SON CONTENU              00500000
         OPEN  MF=(E,OPLPS)                ET LE                        00510000
GETPS    GET   INCLUDE                      REECRIRE                    00520000
         PUTX  SYSLIN,INCLUDE                 SUR 'SYSLIN'              00530000
         B     GETPS                                                    00540000
FINPS    CLOSE MF=(E,OPLPS)                                             00550000
         FREEPOOL INCLUDE                                               00560000
         FREEPOOL SYSLIN                                                00570000
*                                                                       00580000
*        INVOKE THE LINKAGE-EDITOR                                      00590000
*                                                                       00600000
*          1. AS A SUB-TASK IF //COMPRESS DD PRESENT                    00610000
*                                                                       00620000
*          2. VIA "LINK" IF //COMPRESS DD  IS NOT PRESENT               00630000
*                                                                       00640000
LINK0    DEVTYPE =C'COMPRESS',16(,13)    COMPRESS PREVU ?               00650000
         LTR   R15,R15                      SI NON,                     00660000
         BNZ   LINK8                       PAS DE 'ATTACH'              00670000
         L     R1,@PARM                   EXEC DU LKED                  00680000
         ATTACH EP=IEWL,ECB=ECB1          COMME 'SUBTASK'               00690000
         ST    R1,ECB1+4                    POUR PIEGER                 00700000
         WAIT  ECB=ECB1                     LES ABENDS                  00710000
         DETACH ECB1+4                                                  00720000
         L     R1,ECB1                   SI LE CODE-RETOUR              00730000
         N     R1,=X'00FFF000'             EST ZERO,                    00740000
         BZ    RETURN                       RETURN                      00750000
         CL    R1,=X'00D37000'           SI ABEND                       00760000
         BNE   ABENDR1                    CODE 'SD37'                   00770000
*                                                                       00780000
*        COMPRESS SYSLMOD PDS                                           00790000
*                                                                       00800000
         MVC   INPO+40(8),=C'SYSLMOD '     PROTECTION                   00810000
         RDJFCB MF=(E,OPLPO)                DU PDS                      00820000
         ENQ   MF=(E,@ENQL1)                 ET COMPRESS                00830000
         LINK  EP=IEBCOPY,PARAM=(PARM0,COPYDD),VL=1                     00840000
         DEQ   MF=(E,@ENQL1)                                            00850000
*                                                                       00860000
LINK8    L     R1,@PARM                                                 00870000
         LINK  EP=IEWL                  EXECUTION DU LINK-EDIT          00880000
         ST    R15,ECB1                 RETURN CODE                     00890000
*                                                                       00900000
RETURN   DEVTYPE =CL8'RC0',16(,R13)                                     00910000
         LTR   R15,R15                  '//RC0   DD DUMMY'              00920000
         BNZ   RETURN2                                                  00930000
         XC    ECB1,ECB1                IF //RC0 PRESENT, RC=0          00940000
*                                                                       00950000
RETURN2  L     R15,ECB1                 RETURN CODE                     00960000
         L     R13,4(,R13)                                              00970000
         RETURN (14,12),RC=(15)                                         00980000
ABENDR1  ABEND (1)                                                      00990000
*                                                                       01000000
         PRINT NOGEN                                                    01010000
INPO     DCB   DSORG=PO,MACRF=E,DDNAME=INCLUDE,EXLST=EXL1               01020000
INCLUDE  DCB   DSORG=PS,MACRF=GL,DDNAME=INCLUDE,EODAD=FINPS             01030000
SYSLIN   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSLIN,LRECL=80,RECFM=FB        01040000
OPLPO    OPEN  MF=L,INPO                                                01050000
OPLPS    OPEN  MF=L,(INCLUDE,,SYSLIN,EXTEND)                            01060000
EXL1     DC    A(X'87000004'+*),CL176' '                                01070000
BLDLIST  DC    Y(1,14),CL14' '                                          01080000
PARM0    DC    Y(0)               PARM VIDE                             01090000
COPYDD   DC    Y(8*11)                                                  01100000
         DC    XL8'00'            1   UNUSED                            01110000
         DC    XL8'00'            2   UNUSED                            01120000
         DC    XL8'00'            3   UNUSED                            01130000
         DC    XL8'00'            4   UNUSED                            01140000
COPYDDK  DC    CL8'COMPRESS'      5   SYSIN                             01150000
         DC    XL8'00'            6   UNUSED                            01160000
         DC    XL8'00'            7   UNUSED                            01170000
         DC    XL8'00'            8   UNUSED                            01180000
         DC    XL8'00'            9   UNUSED                            01190000
         DC    CL8'SYSUT1  '     10   SYSUT3                            01200000
         DC    XL8'00'           11   UNUSED                            01210000
QLKED    DC    C'SYSIEWLP'                                              01220000
@ENQL1   ENQ   (QLKED,EXL1+4,E,44,SYSTEMS, LKED / SHARED               X01230000
               QLKED,EXL1+4,E,44,SYSTEM), LKED / NON SHARED            X01240000
               MF=L                                                     01250000
@PARM    DS    A                                                        01260000
ECB1     DS    2A                                                       01270000
*        YREGS                                                          01280001
R0       EQU   0                                                        01290001
R1       EQU   1                                                        01300001
R2       EQU   2                                                        01310001
R3       EQU   3                                                        01320001
R4       EQU   4                                                        01330001
R5       EQU   5                                                        01340001
R6       EQU   6                                                        01350001
R7       EQU   7                                                        01360001
R8       EQU   8                                                        01370001
R9       EQU   9                                                        01380001
R10      EQU   10                                                       01390001
R11      EQU   11                                                       01400001
R12      EQU   12                                                       01410001
R13      EQU   13                                                       01420001
R14      EQU   14                                                       01430001
R15      EQU   15                                                       01440001
         END                                                            01450000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01470000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01480001
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01490001
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01500001
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01510001
//SYSPRINT DD SYSOUT=*                                                  01520000
//*                                                                     01530000
//LKED    EXEC PGM=HEWL,PARM='MAP,REUS,AC=1'                            01540000
//SYSPRINT DD SYSOUT=*                                                  01550000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,PASS)                         01560001
//SYSLMOD  DD DSN=GILBERT.LOAD2(GSFLKED),DISP=SHR                       01570001
//*                                                                     01580000
//GO      EXEC PGM=GSFLKED,PARM=(LIST,XREF)                             01590000
//STEPLIB  DD DSN=GILBERT.LOAD2,DISP=SHR                                01600001
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01610001
//SYSLMOD  DD DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(1,,1))                  01620001
//SYSPRINT DD SYSOUT=*                                                  01630000
//COMPRESS DD *                                                         01640000
 COPY INDD=SYSLMOD,OUTDD=SYSLMOD,LIST=NO                                01650000
./ ADD NAME=HANDBOOK 0139-88347-06210-1112-00352-00044-00285-CBT472
//GILBERTH JOB (ACCT#),HANDBOOK,                                 OS/VS2 00010039
// NOTIFY=&SYSUID,                                                      00020039
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030035
//*                                                                     00050000
//*    THIS JOB ASSEMBLES MVS CONTROL BLOCK MACROS FROM                 00060039
//*    SYS1.MACLIB AND SYS1.AMODGEN AND STORES OUTPUT                   00070039
//*    LISTINGS INTO PDS MEMBERS FOR ON-LINE VIEWING.                   00080039
//*                                                                     00090019
//CLEANUP EXEC PGM=IEFBR14                                              00100039
//SYSPRINT DD DSN=GILBERT.HANDBOOK.OSVS2,                               00110039
// DISP=(MOD,DELETE),UNIT=SYSALLDA,SPACE=(TRK,0)                        00120039
//*                                                                     00130039
//ALLOCATE EXEC PGM=IEFBR14                                             00140039
//SYSPRINT DD DSN=GILBERT.HANDBOOK.OSVS2,                               00150039
// DISP=(NEW,CATLG,DELETE),                                             00160039
// UNIT=SYSALLDA,                                                       00170039
// SPACE=(TRK,(50,15,5),RLSE),                                          00180039
// DCB=(RECFM=FBM,LRECL=121,BLKSIZE=12100)                              00190039
//SYSUT1   DD DSN=&&SYSUT1,DISP=(,PASS),UNIT=VIO,SPACE=(CYL,20)         00200039
//SYSUT2   DD DSN=&&SYSUT2,DISP=(,PASS),UNIT=VIO,SPACE=(CYL,20)         00210039
//SYSUT3   DD DSN=&&SYSUT3,DISP=(,PASS),UNIT=VIO,SPACE=(CYL,20)         00220039
//*                                                                     00230039
//ASMMAC PROC MBR=                                                      00240027
//TMP     EXEC PGM=IFOX00,REGION=5M,                                    00250039
// PARM='NOESD,NORLD,NOOBJECT,NODECK,LINECOUNT(120),TERM'               00260039
//SYSTSPRT DD SYSOUT=*                                                  00270027
//SYSTSIN  DD DUMMY                                                     00280027
//*                                                                     00290000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  00310027
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 00320027
//SYSUT1   DD DSN=&&SYSUT1,DISP=(OLD,PASS)                              00330039
//SYSUT2   DD DSN=&&SYSUT2,DISP=(OLD,PASS)                              00340039
//SYSUT3   DD DSN=&&SYSUT3,DISP=(OLD,PASS)                              00350039
//SYSTERM  DD SYSOUT=*                                                  00360027
//*                                                                     00370000
//SYSPRINT DD DSN=GILBERT.HANDBOOK.OSVS2(&MBR),DISP=OLD                 00380039
//        PEND                                                          00390000
//*                                                                     00400000
//ACB    EXEC ASMMAC,MBR=ACB                                            00410009
         IFGACB                                                         00420034
         END                                                            00430009
//ACEE   EXEC ASMMAC,MBR=ACEE                                           00440000
         IHAACEE                                                        00450034
         END                                                            00460000
  //AMVT   EXEC ASMMAC,MBR=ASMVT                                        00470039
           ILRASMVT                                                     00480039
           END                                                          00490039
//ASCB   EXEC ASMMAC,MBR=ASCB                                           00500000
         IHAASCB DSECT=YES                                              00510039
         END                                                            00520000
//ASVT   EXEC ASMMAC,MBR=ASVT                                           00530000
         IHAASVT DSECT=YES                                              00540039
         END                                                            00550000
  //ASSB   EXEC ASMMAC,MBR=ASSB                                         00560039
           IHAASSB LIST=YES                                             00570039
           END                                                          00580039
//ASXB   EXEC ASMMAC,MBR=ASXB                                           00590000
         IHAASXB DSECT=YES                                              00600039
         END                                                            00610000
  //ATTACH EXEC ASMMAC,MBR=ATTACH                                       00620039
           IEZATTCH LIST=YES                                            00630039
           END                                                          00640039
//BASEA  EXEC ASMMAC,MBR=BASEA                                          00650033
         IEEBASEA                                                       00660033
         END                                                            00670033
//CDE    EXEC ASMMAC,MBR=CDE                                            00680000
         IHACDE                                                         00690034
         END                                                            00700000
//CSCB   EXEC ASMMAC,MBR=CSCB                                           00710011
         IEECHAIN                                                       00720034
         END                                                            00730011
  //CSD    EXEC ASMMAC,MBR=CSD                                          00740039
           IHACSD DSECT=YES                                             00750039
           END                                                          00760039
  //CTXT   EXEC ASMMAC,MBR=CTXT                                         00770039
           IEZVX100 DSECT=YES                                           00780039
           END                                                          00790039
//CVT    EXEC ASMMAC,MBR=CVT                                            00800000
         CVT DSECT=YES,LIST=YES,PREFIX=YES                              00810000
         END                                                            00820000
//DCB    EXEC ASMMAC,MBR=DCB                                            00830000
         DCBD  DSORG=PS                                                 00840006
         END                                                            00850000
//DCBDA  EXEC ASMMAC,MBR=DCBDA                                          00860006
         DCBD  DSORG=DA                                                 00870006
         END                                                            00880006
//DCE    EXEC ASMMAC,MBR=DCE                                            00890034
         IECDDCE                                                        00900034
         END                                                            00910034
//DECB   EXEC ASMMAC,MBR=DECB                                           00920012
         IHADECB DSECT=YES                                              00930012
         END                                                            00940012
//DSAB   EXEC ASMMAC,MBR=DSAB                                           00950007
         IHADSAB                                                        00960007
         END                                                            00970007
//DSCB1  EXEC ASMMAC,MBR=DSCB1                                          00980002
         IECSDSL1 1                                                     00990002
         END                                                            01000002
//DSCB4  EXEC ASMMAC,MBR=DSCB4                                          01010002
         DS    44X'04'                                                  01020002
         IECSDSL1 4                                                     01030002
         END                                                            01040002
//DYNALL EXEC ASMMAC,MBR=DYNALLOC                                       01050005
*STATUS      OLD=01   MOD=02    NEW=04    SHR=08                        01060032
*DISP    UNCATLG=01 CATLG=02 DELETE=04   KEEP=08                        01070032
*SPACE                ALX=02   MXIG=04 CONTIG=08                        01080032
*LABEL        NL=01    SL=02    NSL=04            SUL=0A                01090032
*             BLP=10  LTM=21     AL=40    AUL=48                        01100032
         IEFZB4D0                                                       01110005
         IEFZB4D2                                                       01120005
         END                                                            01130005
//DEB    EXEC ASMMAC,MBR=DEB                                            01140000
         IEZDEB LIST=YES                                                01150000
         END                                                            01160000
//DVA    EXEC ASMMAC,MBR=DVA                                            01170012
         IHADVA DSECT=YES                                               01180012
         END                                                            01190012
//DVCT   EXEC ASMMAC,MBR=DVCT                                           01200034
         IHADVCT DSECT=YES                                              01210034
         END                                                            01220034
//ECT    EXEC ASMMAC,MBR=ECT                                            01230000
         IKJECT                                                         01240000
         END                                                            01250000
//GDA    EXEC ASMMAC,MBR=GDA                                            01260020
         IHAGDA                                                         01270020
         END                                                            01280020
//IOB    EXEC ASMMAC,MBR=IOB                                            01290000
         IEZIOB DSECT=YES                                               01300000
         END                                                            01310000
//IOCOM  EXEC ASMMAC,MBR=IOCOM                                          01320033
         IECDIOCM                                                       01330033
         END                                                            01340033
//JCT    EXEC ASMMAC,MBR=JCT                                            01350001
JCT      DSECT                                                          01360001
         IEFAJCTB                                                       01370001
         END                                                            01380001
//JCTX   EXEC ASMMAC,MBR=JCTX                                           01390033
JCTX     DSECT                                                          01400033
         IEFJCTX                                                        01410033
         END                                                            01420033
//JESCT  EXEC ASMMAC,MBR=JESCT                                          01430016
         IEFJESCT                                                       01440016
         END                                                            01450016
//JFCB   EXEC ASMMAC,MBR=JFCB                                           01460000
JFCB     DSECT                                                          01470000
         IEFJFCBN LIST=YES                                              01480000
         END                                                            01490000
//JMR    EXEC ASMMAC,MBR=JMR                                            01500034
         IEFJMR                                                         01510034
         END                                                            01520034
  //JSAB   EXEC ASMMAC,MBR=JSAB                                         01530039
           IAZJSAB LIST=YES                                             01540039
           END                                                          01550039
//JSCB   EXEC ASMMAC,MBR=JSCB                                           01560000
         IEZJSCB                                                        01570034
         END                                                            01580000
//JSCVT  EXEC ASMMAC,MBR=JSCVT                                          01590021
         IEFJSCVT                                                       01600022
         END                                                            01610021
//LCCA   EXEC ASMMAC,MBR=LCCA                                           01620018
         IHALCCA DSECT=YES                                              01630018
         END                                                            01640018
//LCT    EXEC ASMMAC,MBR=LCT                                            01650003
         IEFALLCT                                                       01660003
         END                                                            01670003
//LDA    EXEC ASMMAC,MBR=LDA                                            01680033
         IHALDA                                                         01690033
         END                                                            01700033
//LLE    EXEC ASMMAC,MBR=LLE                                            01710000
         IHALLE                                                         01720000
         END                                                            01730000
//LPDE   EXEC ASMMAC,MBR=LPDE                                           01740010
         IHALPDE                                                        01750010
         END                                                            01760010
  //LWA    EXEC ASMMAC,MBR=LWA                                          01770039
           IKJEFLWA                                                     01780039
           END                                                          01790039
//OCE    EXEC ASMMAC,MBR=OCE                                            01800015
         IECDSECS                                                       01810015
         IECDSECT                                                       01820015
         END                                                            01830015
//ORE    EXEC ASMMAC,MBR=ORE                                            01840035
         IHAORE DSECT=YES                                               01850035
         END                                                            01860035
//OUCB   EXEC ASMMAC,MBR=OUCB                                           01870004
         IRAOUCB DSECT=YES                                              01880004
         END                                                            01890004
//OUXB   EXEC ASMMAC,MBR=OUXB                                           01900034
         IHAOUXB DSECT=YES                                              01910034
         IEZBITS                                                        01920034
         END                                                            01930034
  //PCCA   EXEC ASMMAC,MBR=PCCA                                         01940039
           IHAPCCA DSECT=YES                                            01950039
           END                                                          01960039
//PDS2   EXEC ASMMAC,MBR=PDS2                                           01970013
         IHAPDS DSECT=YES,PDSBLDL=YES                                   01980013
         END                                                            01990013
//PSA    EXEC ASMMAC,MBR=PSA                                            02000000
         IHAPSA DSECT=YES                                               02010039
         END                                                            02020000
//PSCB   EXEC ASMMAC,MBR=PSCB                                           02030000
         IKJPSCB                                                        02040000
         END                                                            02050000
  //RAX    EXEC ASMMAC,MBR=RAX                                          02060039
           IARRAX                 RSM ADDR SPC BLOCK EXTENSION          02070039
           END                                                          02080039
  //RCE    EXEC ASMMAC,MBR=RCE                                          02090039
           IARRCE                 RSM CONTROL AND ENUMERATION AREA      02100039
           END                                                          02110039
//RCVT   EXEC ASMMAC,MBR=RCVT                                           02120036
         ICHPRCVT               RACF CVT                                02130036
         END                                                            02140036
  //RD     EXEC ASMMAC,MBR=RD                                           02150000
           IHARD                  REGION DESCRIPTOR                     02160000
           END                                                          02170000
  //RMCT   EXEC ASMMAC,MBR=RMCT                                         02180000
           IRARMCT DSECT=YES      RESOURCE MANAGET CONTROL TABLE        02190000
           END                                                          02200000
*/SAMB   EXEC ASMMAC,MBR=SAMB                                           02210004
*        IGGSAMB DSECT=YES                                              02220004
*        END                                                            02230004
//RB     EXEC ASMMAC,MBR=RB                                             02240004
         IKJRB DSECT=YES                                                02250004
         END                                                            02260004
  //RIB    EXEC ASMMAC,MBR=RIB                                          02270039
           ISGRIB                                                       02280039
           END                                                          02290039
//RPL    EXEC ASMMAC,MBR=RPL                                            02300009
         IFGRPL                                                         02310009
         IDARMRCD ,                RECORD MGMT ERROR CODES              02320009
         END                                                            02330009
//SCA    EXEC ASMMAC,MBR=SCA                                            02340034
         IHASCA                                                         02350034
         END                                                            02360034
//SCB    EXEC ASMMAC,MBR=SCB                                            02370029
         IHASCB DSECT=YES                                               02380029
         END                                                            02390029
  //SCCB   EXEC ASMMAC,MBR=SCCB                                         02400039
           IHASCCB                                                      02410039
           END                                                          02420039
//SCT    EXEC ASMMAC,MBR=SCT                                            02430001
SCT      DSECT                                                          02440001
         IEFASCTB                                                       02450001
         END                                                            02460001
  //SCTX   EXEC ASMMAC,MBR=SCTX                                         02470039
           IEFSCTX DSECT=YES                                            02480039
           END                                                          02490039
//SCVT   EXEC ASMMAC,MBR=SCVT                                           02500014
         IHASCVT DSECT=YES,LIST=YES                                     02510014
         END                                                            02520014
//SDWA   EXEC ASMMAC,MBR=SDWA                                           02530025
         IHASDWA DSECT=YES                                              02540039
         END                                                            02550025
//SIOT   EXEC ASMMAC,MBR=SIOT                                           02560001
SIOT     DSECT                                                          02570001
         IEFASIOT                                                       02580001
         END                                                            02590001
  //SIOTX  EXEC ASMMAC,MBR=SIOTX                                        02600039
           IEFSIOTX                                                     02610039
           END                                                          02620039
//SMCA   EXEC ASMMAC,MBR=SMCA                                           02630025
         IEESMCA                                                        02640025
         END                                                            02650025
//SNAP   EXEC ASMMAC,MBR=SNAP                                           02660017
         IHASNAP DSECT=YES                                              02670017
         END                                                            02680017
//SPIE   EXEC ASMMAC,MBR=SPIE                                           02690033
         IHASCA                 SPIE/ESPIE CONTROL AREA                 02700033
*        IHAPIE                 PROGRAM INTERRUPT ELEMENT               02710039
*        IHAPICA                PROGRAM INTERRUPTION CONTROL AREA       02720039
         END                                                            02730033
//SPQE   EXEC ASMMAC,MBR=SPQE                                           02740030
         IHASPQE                SP Q ELEMENT                            02750031
*        IHAFBQE                FREE BLOCK                              02760039
*        IHASPQA                SP Q DESCRIPTOR                         02770039
*        IHADQE                 DESCRIPTOR Q ELEMENT                    02780039
*        IHAFQE                 FREE Q ELEMENT                          02790039
*        IHASPT                 CSA                                     02800039
         END                                                            02810030
//SRB    EXEC ASMMAC,MBR=SRB                                            02820037
         IHASRB                                                         02830039
         END                                                            02840037
//SSCT   EXEC ASMMAC,MBR=SSCT                                           02850038
         IEFJSCVT                                                       02860038
         END                                                            02870038
//SSOB   EXEC ASMMAC,MBR=SSOB                                           02880024
         IEFJSSOB (AL,SO)                                               02890024
         END                                                            02900024
//SSIB   EXEC ASMMAC,MBR=SSIB                                           02910008
         IEFJSSIB                                                       02920008
         END                                                            02930008
//SSVT   EXEC ASMMAC,MBR=SSVT                                           02940023
         IEFJSSVT                                                       02950023
         END                                                            02960023
  //STCB   EXEC ASMMAC,MBR=STCB                                         02970039
           IHASTCB LIST=YES                                             02980039
           END                                                          02990039
  //SVT    EXEC ASMMAC,MBR=SVT                                          03000039
           IHASVT LIST=YES                                              03010039
           END                                                          03020039
  //SWB    EXEC ASMMAC,MBR=SWB                                          03030039
           IEFSWB                                                       03040039
           END                                                          03050039
//TAXE   EXEC ASMMAC,MBR=TAXE                                           03060034
         IKJTAXE                                                        03070034
         END                                                            03080034
//TCAS   EXEC ASMMAC,MBR=TCAS                                           03090034
         IKTTCAST DSECT=YES                                             03100034
         END                                                            03110034
//TCB    EXEC ASMMAC,MBR=TCB                                            03120000
         IKJTCB DSECT=YES,LIST=YES                                      03130000
         END                                                            03140000
//TCT    EXEC ASMMAC,MBR=TCT                                            03150000
         IEFTCT                                                         03160000
         END                                                            03170000
//TIOT   EXEC ASMMAC,MBR=TIOT                                           03180000
TIOT     DSECT                                                          03190000
         IEFTIOT1                                                       03200000
         END                                                            03210000
//TMPWA  EXEC ASMMAC,MBR=TMPWA                                          03220034
         IKJTMPWA                                                       03230034
         END                                                            03240034
//TPC    EXEC ASMMAC,MBR=TPC                                            03250034
         IEAVVTPC                                                       03260034
         END                                                            03270034
  //TQE    EXEC ASMMAC,MBR=TQE                                          03280039
           IHATQE                                                       03290039
           END                                                          03300039
//TSB    EXEC ASMMAC,MBR=TSB                                            03310028
         IKJTSB LIST=YES,EXT=YES                                        03320028
         END                                                            03330028
  //TSVT   EXEC ASMMAC,MBR=TSVT                                         03340039
           IKJTSVT                                                      03350039
           END                                                          03360039
//UCB    EXEC ASMMAC,MBR=UCB                                            03370000
**       IEFUCBOB LIST=YES,PREFIX=YES,SSMD=YES                          03380034
         IEFUCBOB LIST=YES,PREFIX=YES                                   03390034
         END                                                            03400000
//UCM    EXEC ASMMAC,MBR=UCM                                            03410026
         IEECUCM DSECT=YES                                              03420039
         END                                                            03430026
//UPT    EXEC ASMMAC,MBR=UPT                                            03440000
         IKJUPT                                                         03450000
         END                                                            03460000
//WQE    EXEC ASMMAC,MBR=WQE                                            03470037
         IHAWQE                                                         03480037
         END                                                            03490037
//XL     EXEC ASMMAC,MBR=XL                                             03500000
         IHAXTLST                                                       03510000
         END                                                            03520000
./ ADD NAME=INITKSDS 0206-83243-06210-1234-00650-00036-00386-CBT472
//GILBERTI JOB (ACCT#),INITKSDS,                                        00010000
// NOTIFY=&SYSUID,                                                      00020000
//*RESTART=GO,                                                          00030000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050006
*********************************************************************** 00070000
*                                                                     * 00080000
* MODULE NAME = INITKSDS                                              * 00090002
*                                                                     * 00100002
* DESCRIPTIVE NAME = Initialize a KSDS                                * 00110002
*                                                                     * 00120002
* FUNCTION = INITKSDS switches an empty VSAM KSDS from "create" mode  * 00130005
*            to "update" mode.  INITKSDS may be invoked as a TSO      * 00140005
*            command, a batch program, or a subroutine.               * 00150005
*                                                                     * 00160002
* STATUS = R206                                                       * 00170006
*                                                                     * 00180002
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00190005
*                                                                     * 00200002
* NOTES = SEE BELOW                                                   * 00210002
*                                                                     * 00220002
*    DEPENDENCIES = OS/VS2                                            * 00230006
*                                                                     * 00240002
*    AUTHORIZATION = NONE                                             * 00250002
*                                                                     * 00260002
*    RESTRICTIONS = NONE                                              * 00270002
*                                                                     * 00280002
* MODULE TYPE = PROCEDURE, (TSO Command Processor)                    * 00290002
*                                                                     * 00300002
*    PROCESSOR = IBM ASSEMBLER XF                                     * 00310006
*                                                                     * 00320002
*    MODULE SIZE = 4K                                                 * 00330002
*                                                                     * 00340002
*    ATTRIBUTES = REENTERABLE, PROBLEM STATE, KEY 8                   * 00350006
*                                                                     * 00360002
* OPERATION = See Below                                               * 00370002
*                                                                     * 00380002
*        A KSDS is in create mode from the time it is DEFINEd         * 00390002
*        until a record is written into it.  If a program OPENs       * 00400004
*        for input, I-O or with STRNO=2 a KSDS in create mode,        * 00410002
*        OPEN fails with R15=8,ERROR=160.  "Create" mode is also      * 00420002
*        called "load" mode.                                          * 00430002
*                                                                     * 00440001
*        To change its status from "create" mode to "non-create"      * 00450001
*        mode, a KSDS must be OPEN'd for output, a record must be     * 00460001
*        written into it, then it must be CLOSEd.  From that point    * 00470001
*        on, the KSDS may be OPEN'd without restriction.              * 00480001
*                                                                     * 00490000
*        INITKSDS proceeds as follows:                                * 00500001
*                                                                     * 00510001
*        1. Dynamically ALLOCATE the data set with DISP=SHR           * 00520001
*           (unless the OLD key-word is specified in which case       * 00530001
*           DISP=OLD is used).                                        * 00540001
*                                                                     * 00550001
*        2. OPEN the data set for output (MACRF=OUT) and check        * 00560001
*           that it really is a KSDS                                  * 00570001
*                                                                     * 00580001
*        3. check that the KSDS contains no records                   * 00590001
*                                                                     * 00600001
*        4. WRITE a dummy record                                      * 00610001
*                                                                     * 00620001
*        5. CLOSE the data set                                        * 00630001
*                                                                     * 00640001
*        6. OPEN the data set again for I-O with MACRF=(IN,OUT)       * 00650001
*                                                                     * 00660001
*        7. DELETE the dummy record                                   * 00670001
*                                                                     * 00680001
*        8. CLOSE the data set and FREE it up                         * 00690001
*                                                                     * 00700001
*        If the RESET option is specified, INITKSDS proceeds          * 00710001
*        as follows:                                                  * 00720001
*                                                                     * 00730001
*        1. ALLOCATE the data set and OPENs it for I-O                * 00740001
*                                                                     * 00750001
*        2. DELETE all of the records, one by one                     * 00760002
*           (this can take a while if the KSDS is big)                * 00770002
*                                                                     * 00780001
*        3. CLOSE the data set (which is now empty and in             * 00790001
*           non-create mode).                                         * 00800001
*                                                                     * 00810002
* SYNTAX = See Below                                                  * 00820002
*                                                                     * 00830002
*        INITKSDS may be invoked as a TSO command using the           * 00840002
*        following syntax:                                            * 00850002
*                                                                     * 00860000
*            INITKSDS 'data-set-name'                                 * 00870001
*                      RESET/NORESET/ERASE/DELETE                     * 00880002
*                      SHR/OLD                                        * 00890000
*                                                                     * 00900000
*            'data-set-name' is the data set name of the KSDS.        * 00910001
*                                                                     * 00920000
*            'NORESET' specifies that the KSDS has just been          * 00930001
*            DEFINEd, contains no records, and must be converted to   * 00940002
*            "non-create" mode by adding/deleting a dummy record.     * 00950002
*            This is the default.                                     * 00960001
*                                                                     * 00970001
*            'RESET' specifies that the KSDS contains records and     * 00980001
*            that these records should be deleted.  RESET can be      * 00990002
*            used instead of DELETE/DEFINE/INITKSDS to create an      * 01000002
*            empty KSDS in non-create mode.  ERASE or DELETE are      * 01010002
*            equivalent to RESET.                                     * 01020002
*                                                                     * 01030001
*            'OLD' specifies that the data-set(s) should be           * 01040001
*            allocated with DISP=OLD instead of SHR, which is the     * 01050001
*            default.                                                 * 01060001
*                                                                     * 01070001
*        INITKSDS may be invoked as a batch program, using the        * 01080002
*        following JCL:                                               * 01090002
*                                                                     * 01100001
*            //MYJOB   JOB (ACCT#),'JOHN DOE', . . .                  * 01110001
*            //*                                                      * 01120001
*            //INITKSDS EXEC PGM=INITKSDS                             * 01130001
*            //INITKSDS  DD  DSN=my.new.vsam.ksds,DISP=SHR            * 01140001
*                                                                     * 01150000
*                                                                     * 01160002
*        INITKSDS may be also be invoked from an assembler program,   * 01170002
*        as follows:                                                  * 01180002
*                                                                     * 01190002
*                      LA    R1,MYACB                                 * 01200002
*                      LINK  EP=INITKSDS                              * 01210002
*            .  .  .  .  .  .  .  .  .  .                             * 01220002
*            MYACB     ACB   DDNAME=MYDDNAME,MACRF=(IN, . .           * 01230002
*                                                                     * 01240004
*          If the VSAM data set is allocated with FREE=CLOSE,         * 01250004
*          INITKSDS re-allocates it dynamically to initialize it.     * 01260004
*                                                                     * 01270005
* RETURN CODES                                                        * 01280005
*                                                                     * 01290005
*        RC=0     Successful Completion                               * 01300005
*        RC=4     IKJPARS error                                       * 01310005
*        RC=8     Data set is not a KSDS                              * 01320005
*        RC=12    DYNALLOC error                                      * 01330005
*                 OPEN error                                          * 01340005
*                 Data set is not empty                               * 01350005
*                 ERASE macro failed                                  * 01360005
*        RC=16    invalid PARM field                                  * 01370005
*                                                                     * 01380000
* CHANGE ACTIVITY                                                     * 01390000
*                                                                     * 01400000
*   $102 INITKSDS may be invoked as a PGM with R1 pointing to an ACB  * 01410002
*   $103 Use alternate DDname when the data set has FREE=CLOSE        * 01420003
*   $104 Complete FREE=CLOSE enhancement, fix others errors.          * 01430004
*   $105 RESET/NORESET can now be specified in the JCL PARM           * 01440005
*   $206 OS/VS2 Version                                               * 01450006
*                                                                     * 01460000
*********************************************************************** 01470002
INITKSDS CSECT                                                          01480000
         SAVE  (14,12),,'GSF UTILITIES - INITKSDS R206'                 01490006
         LR    R12,R15                 BASE REGISTER                    01500005
         USING INITKSDS,R12                                             01510005
*********************************************************************** 01520000
*        ALLOCATE DYNAMIC STORAGE AREA                                * 01530000
*********************************************************************** 01540000
         GETMAIN R,LV=DYNAML           ACQUIRE DYNAMIC STORAGE          01550004
         ST    R13,4(,R1)                                               01560000
         ST    R1,8(,R13)                                               01570000
         LM    R13,R1,8(R13)                                            01580000
         USING DYNAM,R13                                                01590004
         LR    R11,R1                  POINT AT CPPL.                   01600000
         USING CPPL,R11                                                 01610000
         LA    R14,DYNAM+72            clear dynamic storage            01620004
         LA    R15,DYNAML-72           clear dynamic storage            01630004
         SLR   R1,R1                   clear dynamic storage            01640004
         MVCL  R14,R0                  clear dynamic storage            01650004
         MVC   IFGACB(MODACBLL),MODELACB                                01660006
         MVC   IFGRPL(MODLRPLL),MODELRPL                                01670006
         MVI   RESET,C'N'              DEFAULT IS 'NORESET'             01680005
         TM    CPPL,X'80'              AM I INVOKED AS A PROGRAM?       01690000
         BO    PGM00                   YES, JUMP                        01700000
*********************************************************************** 01710000
*        BUILD PARAMETER LIST FOR IKJEFF02                            * 01720000
*********************************************************************** 01730000
         ST    R11,MTCPPLP             STORE CPPL ADDRESS IN MTPL       01740000
         LA    R0,MTCSECTP             MESSAGE SECTION                  01750000
         ST    R0,MTPLPTR              STORE ADDR IN MTPL               01760000
         LA    R0,DYNECB               EVENT CONTROL BLOCK              01770000
         ST    R0,MTECBP               STORE ECB IN MTPL                01780000
         L     R0,=A(MSGCSECT)         MESSAGE CSECT                    01790000
         ST    R0,MTCSECTP             STORE ECT IN PPL                 01800000
         OI    MTSW1,MTPUTLSW          PUTLINE IS NEEDED                01810000
         OI    MTSW1,MTNHEXSW          XLATE TO DECIMAL                 01820000
*********************************************************************** 01830000
*        BUILD PARSE PARM LIST, CALL IKJPARS                          * 01840000
*********************************************************************** 01850000
PARSE000 LA    R1,WORKAREA             POINT TO PPL                     01860004
         USING PPL,R1                  SET UP ADDRESSABILITY TO PPL     01870000
         L     R0,CPPLUPT              USER PROFILE TABLE               01880000
         ST    R0,PPLUPT               STORE UPT ADDRESS IN PPL         01890000
         L     R0,CPPLECT              ENVIRONMENT CONTROL TABLE        01900000
         ST    R0,PPLECT               STORE ECT IN PPL                 01910000
         LA    R0,DYNECB               EVENT CONTROL BLOCK              01920000
         ST    R0,PPLECB               STORE ECB IN PPL                 01930000
         MVC   PPLPCL,=A(PCLCSECT)     STORE PCL ADDR INTO PPL          01940000
         LA    R0,WORD1                ANSWER AREA                      01950004
         ST    R0,PPLANS               STORE ANSWER ADDRESS IN PPL      01960000
         L     R0,CPPLCBUF             COMMAND BUFFER                   01970000
         ST    R0,PPLCBUF              STORE BUFFER ADDRESS IN PPL      01980000
         L     R15,CVTPTR              CVTPTR                           01990004
         L     R15,CVTPARS-CVTMAP(,R15) address of IKJPARS              02000004
         SYNCH (R15)                   call IKJPARS                     02010004
         LTR   R2,R15                  CHECK FOR ZERO PARSE RETURN      02020000
         BNZ   FINISH                  GO AWAY UPSET                    02030000
         DROP  R1                      WAS PPL                          02040000
*********************************************************************** 02050000
*        PROCESS PARSED PARAMETERS                                    * 02060000
*********************************************************************** 02070000
         MVI   PGMCMD,C'C'             MODE=CMD                         02080004
         L     R8,WORD1                LOAD PDL ADDRESS                 02090004
         USING IKJPARMD,R8             SET UP ADDRESSABILITY TO PDL     02100000
PARSE100 LA    R14,DSNAME              44-BYTE AREA                     02110000
         LA    R15,L'DSNAME            GET LENGTH                       02120000
         L     R0,DSNPCE               GET ADDRESS                      02130000
         LH    R1,DSNPCE+4             ACTUAL LENGTH OF DSN             02140000
         ICM   R1,B'1000',=C' '        PADDING                          02150000
         MVCL  R14,R0                  MOVE DATA SET NAME               02160000
PARSE200 MVC   STATUS(8),=AL2(DALSTATS,1,1,X'0800') DISP=SHR KEY        02170000
         CLI   STATPCE+1,2             CHECK FOR 2ND IKJPNAME           02180000
         BNE   PARSE300                JUMP IF NOT THE 2ND              02190000
         MVI   STATUS+6,X'01'          DISP=OLD KEY                     02200000
PARSE300 EQU   *                                                        02210005
         CLI   RSTPCE+1,2              CHECK FOR 2ND IKJPNAME           02220000
         BNE   PARSE999                JUMP IF NOT THE 2ND              02230000
         MVI   RESET,C'R'              2ND IS 'RESET'                   02240000
         MVI   STATUS+6,X'01'          DISP=OLD KEY                     02250000
PARSE999 IKJRLSA WORD1                 RELEASE PDL                      02260004
         B     ALLOC000                allocate and open                02270004
*********************************************************************** 02280003
*        INITKSDS IS INVOKED AS A PROGRAM                             * 02290003
*********************************************************************** 02300003
PGM00    MVI   PGMCMD,C'P'             MODE=PGM                         02310003
         CLC   ACBID,CPPL              R1 POINTS TO AN ACB?             02320003
         BE    PGM50                   yes, jump                        02330005
*                                                                       02340005
*        Check PARM when invoked in a JCL step                          02350005
*                                                                       02360005
         L     R2,CPPL                 parm address                     02370005
         CLI   0(R2),0                 parm OK?                         02380005
         BNE   BADPARM                 no, error                        02390005
         CLI   1(R2),0                 PARM=''?                         02400005
         BE    PGM21                   yes, continue                    02410005
         CLI   1(R2),7                 PARM=NORESET?                    02420005
         BNE   PGM15                   no, jump                         02430005
         CLC   =C'NORESET',2(R2)       PARM=NORESET?                    02440005
         BE    PGM21                   no, jump                         02450005
PGM15    CLI   1(R2),5                 PARM=RESET?                      02460005
         BNE   BADPARM                 no, bad parm                     02470005
         CLC   =C'RESET',2(R2)         PARM=RESET?                      02480005
         BNE   BADPARM                 no, bad parm                     02490005
*                                                                       02500005
PGM20    MVI   RESET,C'R'              PARM='RESET'                     02510005
PGM21    BAL   R14,GETDSN           <- retrieve dsname                  02520005
         B     OPEN                    continue                         02530005
*********************************************************************** 02540005
*        INITKSDS was invoked as a sub-routine with                   * 02550005
*        the address of an ACB in R1                                  * 02560005
*                                                                     * 02570005
*        If the data set was allocated with FREE=CLOSE,               * 02580005
*        reallocate it for our own processing.                        * 02590005
*********************************************************************** 02600005
PGM50    MVC  ACBDDNM,ACBDDNM-IFGACB+CPPL MOVE DDNAME FROM CALLER'S ACB 02610003
         BAL   R14,GETDSN           <- retrieve dsname                  02620005
         LTR   R15,R15                 DD missing?                      02630005
         BNZ   OPEN                    yes, fail                        02640005
         L     R1,DSAB1                addr of the DSAB                 02650005
         TM    DSABFLG2-DSAB(R1),DSABUNAL FREE=CLOSE?                   02660005
         BZ    OPEN                    no, jump                         02670005
*********************************************************************** 02680000
*        Allocate the VSAM data set                                   * 02690005
*********************************************************************** 02700000
ALLOC000 LA    R2,WORKAREA             S99RB                            02710004
         ST    R2,DFS99RBP             S99RBPTR                         02720000
         OI    DFS99RBP,X'80'          S99RBPND                         02730000
         LA    R0,=AL1(0,DFSVC99)      PUTLINE ONLY, SVC99              02740000
         ST    R0,DFIDP                BUILD PARML FOR DAIRFAIL         02750000
         ST    R11,DFCPPLP             ADDR OF CPPL                     02760000
*                                                                       02770000
         LA    R0,DSNAME               RETURN CODE                      02780000
         ST    R0,MTINSRT              ADDRESS OF INSERT                02790006
         MVI   MTLEN,L'DSNAME          LENGTH OF INSERT                 02800006
*                                                                       02810000
         USING S99RB,R2                                                 02820000
         XC    S99RB(S99RBEND-S99RB),S99RB  CLEAR DYNALLOC WORK SPACE   02830000
         MVI   S99RBLN,S99RBEND-S99RB  RB LENGTH                        02840000
         MVI   S99VERB,S99VRBAL        VERB IS "ALLOCATE"               02850000
         LA    R0,S99RBEND             END OF RB, START OF T.U. PTRS    02860000
         ST    R0,S99TXTPP             TEXT UNIT POINTERS               02870000
*                                                                       02880000
         OI    S99FLG11,S99NOCNV       DO NOT USE EXISTING DD           02890000
         OI    S99FLG11,S99NOMNT       DO NOT MOUNT VOLUMES             02900000
         LA    R14,TU55DDN             DDNAME TEXT UNIT                 02910000
         MVC   0(6,R14),=AL2(DALRTDDN,1,L'DDNAME) RETURN DDNAME KEY     02920000
         LA    R15,TU02DSN             DSNAME TEXT UNIT                 02930000
         MVC   0(6,R15),=AL2(DALDSNAM,1,L'DSNAME) DSNAME KEY            02940000
         LA    R0,STATUS               ADDRESS OF STATUS KEY            02950000
         LA    R1,TU57ORG              RETURN DSORG                     02960000
         MVC   0(6,R1),=AL2(DALRTORG,1,L'DSORG)  DSORG                  02970000
         STM   R14,R1,S99RBEND+00      FIRST TO THIRD TEXT UNIT PTRS    02980000
         OI    S99RBEND+12,X'80'       END OF LIST                      02990000
*                                                                       03000000
         LA    R1,DFS99RBP             S99RBPTR                         03010000
         DYNALLOC ,                    ISSUE SVC 99 (ALLOCATE)          03020000
         LTR   R15,R15                                                  03030000
         BNZ   MSG99                   ALLOCATION FAILED, EXIT          03040000
         DROP  R2                      WAS S99RB                        03050000
         CLC   DSORG,=AL2(ACBDORGA)    DSORG=VS?                        03060000
         BNE   MSG99NVS                NOT A VSAM DATA SET              03070000
         MVC   ACBDDNM,DDNAME          MOVE THE RETURNED DDNAME         03080000
*********************************************************************** 03090000
*        OPEN THE VSAM DATA SET                                       * 03100000
*********************************************************************** 03110000
OPEN     LA    R2,IFGACB               POINT TO ACB                     03120000
         ST    R2,OPENLIST             MAKE OPEN LIST                   03130000
         ST    R2,RPLDACB              SET UP RPL                       03140000
         MVI   OPENLIST,X'80'          FREE=CLOSE OPTION                03150000
         OPEN  MF=(E,OPENLIST)         OPEN THE ACB                     03160000
         CH    R15,=H'4'               OPEN OK?                         03170000
         BH    MSGOPEN                 NO, QUIT                         03180000
*                                                                       03190000
         TESTCB ACB=(R2),ATRB=KSDS,    IS THIS A KSDS?                 X03200004
               MF=(G,WORKAREA,TESTCBL)                                  03210004
         BNE   MSG99NVS                NOT A VSAM DATA SET              03220000
*                                                                       03230000
         SHOWCB ACB=(R2),AREA=(S,MAXRECNO),LENGTH=08,                  X03240001
               FIELDS=(NLOGR,LRECL),MF=(G,WORKAREA,SHOWCBL)             03250004
*********************************************************************** 03260000
*        PROCESS THE OPEN'D DATA SET                                  * 03270000
*********************************************************************** 03280000
         L     R0,MAXLRECL             get lrecl                        03290004
         ST    R0,RPLRLEN              RECORD LENGTH                    03300004
         GETMAIN RU,LV=(0)             allocate record area             03310004
         ST    R0,RPLBUFL              BUFFER LENGTH                    03320004
         ST    R1,RPLAREA              SET UP THE RPL                   03330000
         ST    R1,RPLARG               SET UP THE RPL                   03340000
         CLI   RESET,C'R'              OPTION RESET SPECIFIED?          03350000
         BE    RESET00                 YES, JUMP                        03360000
*********************************************************************** 03370000
*        ADD/DELETE A DUMMY RECORD                                      03380000
*********************************************************************** 03390000
ADDDEL   ICM   R0,B'1111',MAXRECNO     DATA SET EMPTY?                  03400000
         BNZ   MSGFULL                 NO, ERROR                        03410000
         MVC   REQUEST,=C'PUT  '       SET REQUEST FOR MESSAGE          03420000
         PUT   RPL=IFGRPL              ADD A DUMMY RECORD               03430000
         LTR   R15,R15                 PUT OK?                          03440000
         BNZ   MSGREQ                  NO, QUIT                         03450000
ADDDEL9  CLOSE MF=(E,OPENLIST)         CLOSE THE ACB                    03460000
         OPEN  MF=(E,OPENLIST)         RE-OPEN THE ACB                  03470000
         LTR   R15,R15                 OPEN OK?                         03480004
         BNZ   MSGOPEN                 NO, QUIT                         03490004
*********************************************************************** 03500000
*        PROCESS THE 'RESET' FUNCTION (DELETE ALL OF THE RECORDS      * 03510000
*********************************************************************** 03520000
*LOOP                                                                   03530000
RESET00  MVC   REQUEST,=C'GET  '       SET REQUEST FOR MESSAGE          03540000
         OI    RPLOPT2,RPLUPD          OPTCD=UPD                        03550000
         GET   RPL=IFGRPL              READ THE FIRST RECORD            03560000
         LTR   R15,R15                 GET OK?                          03570000
         BNZ   MSGREQ                  NO, QUIT                         03580000
RESET20  MVC   REQUEST,=C'ERASE'       SET REQUEST FOR MESSAGE          03590000
         ERASE RPL=IFGRPL              DELETE THE FIRST RECORD          03600000
         LTR   R15,R15                 ERASE OK?                        03610000
         BNZ   MSGREQ                  NO, QUIT                         03620000
         B     RESET00                                                  03630000
*ENDLOOP                                                                03640000
*********************************************************************** 03650000
*        ISSUE MESSAGES                                               * 03660000
*********************************************************************** 03670000
MSG99    MVC   MTMSGID,=C'99  '        DYNALLOC ERROR                   03680000
         CLI   PGMCMD,C'P'             MODE=PGM ?                       03690004
         BE    ISSUEMSG                YES, DO NOT CALL DAIRFAIL        03700004
         ST    R15,RETCODE             RETURN CODE                      03710000
         LA    R0,RETCODE              RETURN CODE                      03720000
         ST    R0,DFRCP                RETURN CODE                      03730000
         LA    R0,=A(0)                NO ADDR FOR IKJEFF02             03740000
         ST    R0,DFJEFF02             RETURN CODE                      03750000
         LA    R1,DFPARMS              DAIRFAIL PARM LIST               03760000
         LINK  EP=IKJEFF18             Call the DAIRFAIL routine        03770004
         LA    R2,12                   RETURN-CODE                      03780000
         B     ISSUEMSG                ISSUE MESSAGE                    03790000
*                                                                       03800000
MSG99NVS MVC   MTMSGID,=C'NVS '        NON-KSDS                         03810001
         LA    R2,8                    RETURN-CODE = 8                  03820001
         B     ISSUEMSG                ISSUE MESSAGE                    03830000
*                                                                       03840000
MSGOPEN  MVC   MTMSGID,=C'OPEN'        "OPEN FAILED" MESSAGE            03850000
         ST    R15,RETCODE             RETURN CODE                      03860000
*                                                                       03870000
**       LA    R0,L'RETCODE            LENGTH OF INSERT           (2)   03880006
**       ST    R0,MTLEN+08             LENGTH OF INSERT                 03890006
**       OI    MTHIGHL+08,X'80'        XLATE TO DECIMAL                 03900006
**       ST    R0,MTADDR+08            ADDRESS OF INSERT                03910006
         LA    R0,RETCODE              RETURN CODE                      03920000
         ST    R0,MTINSRT+04           ADDRESS OF INSERT                03930006
         OI    MTHIGHL+04,X'80'        XLATE TO DECIMAL                 03940006
         LA    R2,12                   RETURN-CODE                      03950000
         B     ISSUEMSG                ISSUE MESSAGE                    03960000
*                                                                       03970000
MSGFULL  MVC   MTMSGID,=C'FULL'        NON-EMPTY                        03980000
         LA    R2,12                   RETURN-CODE                      03990000
         B     ISSUEMSG                ISSUE MESSAGE                    04000000
*                                                                       04010000
MSGREQ   MVC   MTMSGID,=C'REQ '        "ERASE FAILED" MESSAGE           04020000
         ST    R15,RETCODE             RETURN CODE                      04030000
*                                                                       04040000
         LA    R0,REQUEST              RETURN CODE                (1)   04050006
         ST    R0,MTINSRT+00           ADDRESS OF INSERT                04060006
         MVI   MTLEN+00,L'REQUEST      LENGTH OF INSERT                 04070006
*                                                                       04080000
         LA    R0,DSNAME               DSNAME                     (2)   04090006
         ST    R0,MTINSRT+04           ADDRESS OF INSERT                04100006
         MVI   MTLEN+00,L'DSNAME       LENGTH OF INSERT                 04110006
*                                                                       04120000
         LA    R0,RPLFDBK              RETURN CODE                (3)   04130006
         ST    R0,MTINSRT+08           ADDRESS OF INSERT                04140006
         OI    MTHIGHL+08,X'80'        XLATE NUMERIC                    04150006
         OI    MTSW1,MTHEXSW           XLATE TO HEX                     04160000
         LA    R2,12                   RETURN-CODE                      04170000
         B     ISSUEMSG                ISSUE MESSAGE                    04180004
*********************************************************************** 04190004
*        End-of-file on VSAM data set                                 * 04200004
*********************************************************************** 04210004
CLOSE    LTR   R15,R15                 CLOSE OK?                        04220004
***      BNZ   MSGCLOS                 NO, QUIT                         04230004
         MVC   MTMSGID,=C'00  '        INITKSDS SUCCESSFUL              04240004
         LA    R2,0                    RC=0                             04250004
*                                                                       04260000
ISSUEMSG CLI   PGMCMD,C'P'             MODE=PGM ?                       04270000
         BE    FINISH                  YES, IGNORE MESSAGE              04280000
         L     R15,CVTPTR              ADDR OF CVT                      04290004
         L     R15,CVTEFF02-CVTMAP(,R15) ADDR OF IKJEFF02               04300004
         LA    R1,MTPARML              POINT TO PPL                     04310000
         SYNCH (R15)                   CALL THE MESSAGE ISSUER          04320004
         B     FINISH                  GO AWAY UPSET                    04330005
*********************************************************************** 04340000
*        CLOSE THE ACB, CLEAN UP, RETURN.                             * 04350004
*********************************************************************** 04360000
BADPARM  LA    R2,16                   RC=16: bad parm                  04370005
*                                                                       04380005
FINISH   TM    ACBOFLGS,ACBOPEN        ACB OPEN?                        04390000
         BZ    FINISH2                 NO, JUMP                         04400004
         CLC   DSORG,=AL2(ACBDORGA)    DD allocated dynamically?        04410004
         BNE   FINISH1                 NO, JUMP                         04420004
         OI    OPENLIST,X'20'          yes, FREE=CLOSE                  04430004
FINISH1  CLOSE MF=(E,OPENLIST)         CLOSE/FREE                       04440004
FINISH2  ICM   R1,B'1111',RPLAREA      buffer address                   04450004
         BZ    FINISH8                 NO, JUMP                         04460004
         L     R0,RPLBUFL              BUFFER LENGTH                    04470004
         FREEMAIN RU,LV=(0),A=(1)      FREE RECORD AREA                 04480004
FINISH8  LR    R1,R13                  ADDRESS OF DYNAMIC AREA          04490004
         L     R13,4(,R13)             CALLER'S SAVE AREA               04500000
         FREEMAIN RU,LV=DYNAML,A=(1)   FREE DYNAMIC STORAGE AREA        04510004
         LR    R15,R2                  PASS RETURN CODE                 04520000
         RETURN (14,12),RC=(15)        GOBACK TO CALLER                 04530000
*********************************************************************** 04540005
*        Retrieve dsname from the JFCB                                * 04550005
*********************************************************************** 04560005
GETDSN   EQU   *                                                        04570006
         L     R2,540(,0)              PSATOLD                          04580006
         USING TCB,R2                  PSATOLD                          04590006
         L     R2,TCBJSCB              current JSCB                     04600006
         USING IEZJSCB,R2                                               04610006
         L     R2,JSCDSABQ             DSAB QDB                         04620006
         USING DSABQDB,R2                                               04630006
         ICM   R2,B'1111',DSQFRSTP     FIRST DSAB ON CHAIN              04640006
         BZ    GETDSN2X                empty, quit                      04650006
         USING DSAB,R2                                                  04660006
*loop                                                                   04670006
GETDSN2  L     R1,DSABTIOT             TIOT entry                       04680006
         USING TIOENTRY,R1                                              04690006
         CLC   TIOEDDNM,ACBDDNM        SAME DDNAME?                     04700006
         BE    GETDSN3                 yes, leave                       04710006
         ICM   R4,B'1111',DSABFCHN     NEXT DSAB                        04720006
         BNZ   GETDSN2                 NOT YET, LOOP THROUGH TIOT       04730006
*ENDLOOP                                                                04740006
GETDSN2X LA    R15,8                   DDNAME NOT FOUND                 04750006
         BR    R14                                                      04760006
*                                                                       04770006
GETDSN3  ICM   R1,B'0111',TIOEJFCB     JFCB SVA                         04780006
         MVC   DSNAME,16(R1)           move dsname from JFCB            04790006
         BR    R14                                                      04800006
         DROP  R1,R2                   TIOENTRY,DSAB                    04810006
*********************************************************************** 04820000
*        MODEL CONTROL BLOCKS, MOVED TO DYNAMIC STORAGE               * 04830000
*********************************************************************** 04840000
MODELACB ACB DDNAME=INITKSDS,MACRF=(ADR,SEQ,IN,OUT),EXLST=EXLST1        04850004
MODACBLL EQU *-MODELACB                                                 04860006
MODELRPL RPL ACB=*-*,OPTCD=(KEY,SEQ,MVE),AREA=*-*,AREALEN=*-*,ARG=*-*   04870004
MODLRPLL EQU *-MODELRPL                                                 04880006
EXLST1   EXLST EODAD=CLOSE                                              04890000
*********************************************************************** 04900000
*        DEFINE MESSAGES TO BE ISSUED VIA IKJEFF02                    * 04910000
*********************************************************************** 04920000
MSGCSECT IKJTSMSG ('MSG000 ',,' SUCCESSFULLY INITIALIZED.'),00          04930004
         IKJTSMSG ('MSG008 OPEN FAILED FOR ',,                         X04940000
               ', RETURN CODE IS ',,'.'),OPEN                           04950000
         IKJTSMSG ('MSG012 ',,' REQUEST FAILED FOR ',,                 X04960000
               ', FDBK=',,'.'),REQ                                      04970000
         IKJTSMSG ('MSG021 ',,' IS NOT A VSAM KSDS.'),NVS               04980004
         IKJTSMSG ('MSG034 ',,' IS NOT AN EMPTY VSAM DATA SET.'),FULL   04990004
         IKJTSMSG ('MSG099 DYNALLOC FAILED FOR ',,'.'),99               05000004
         IKJTSMSG                                                       05010000
*********************************************************************** 05020000
*        DEFINE INPUT PARAMETERS FOR IKJPARS                          * 05030000
*********************************************************************** 05040000
PCLCSECT IKJPARM                                                        05050000
DSNPCE   IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME'                    05060000
RSTPCE   IKJKEYWD                                                       05070000
         IKJNAME 'NORESET'                                              05080000
         IKJNAME 'RESET',ALIAS=('ERASE','DELETE')                       05090002
STATPCE  IKJKEYWD                                                       05100000
         IKJNAME 'SHR'                                                  05110000
         IKJNAME 'OLD'                                                  05120000
         IKJENDP                                                        05130000
*********************************************************************** 05140000
*        DYNAMIC STORAGE AREA                                         * 05150000
*********************************************************************** 05160000
DYNAM    DSECT                                                          05170004
         DS    18F                     SAVE AREA                        05180000
WORD1    DS    F                       ANSWER AREA                      05190004
DYNECB   DS    A                       ECB for parse, IKJEFF02          05200004
RETCODE  DS    F                       RETURN CODE                      05210000
DSAB1    DS    A(DSAB)                 addr of the DSAB                 05220005
PGMCMD   DS    C                       P=PGM C=CMD                      05230005
RESET    DS    C                       R=RESET N=NORESET                05240005
*                                                                       05250004
STATUS   DS    AL2(DALSTATS,1,1,X'0800') STATUS KEY, SHR OR OLD         05260000
TU02DSN  DS    AL2(DALDSNAM,1,44)   +0 DATA SET NAME KEY                05270000
DSNAME   DS    CL44                 +6 DATA SET NAME                    05280000
TU55DDN  DS    AL2(DALRTDDN,1,8)    +0 RETURN DDNAME                    05290000
DDNAME   DS    C'SYS45678'          +6 DDNAME                           05300000
TU57ORG  DS    AL2(DALRTORG,1,2)    +0 RETURN DSORG                     05310000
DSORG    DS    X'0000'              +6 VDSORG                           05320000
*                                                                       05330004
REQUEST  DS    C'ERASE'                VSAM REQUEST                     05340000
MAXRECNO DS    F'12345678'          +0 MAX RECORD NUMBER       (SHOWCB) 05350004
MAXLRECL DS    F'32760'             +4 MAX LRECL               (SHOWCB) 05360004
         IKJEFFMT MTDSECT=NO                                            05370006
         IKJEFFDF DFDSECT=NO,DFDSEC2=NO                                 05380000
OPENLIST OPEN   IFGACB,MF=L            OPEN LIST                        05390004
         IFGACB DSECT=NO                                                05400000
         IFGRPL DSECT=NO                                                05410000
*                                                                       05420004
WORKAREA DS    8D                      All-purpose work area            05430006
DYNAML   EQU   *-DYNAM                 LENGTH OF WORK AREA              05440004
*                                                                       05450000
*              MACROS FROM SYS1.MACLIB                                  05460000
*                                                                       05470000
         IKJPPL                        PARSE PARAMETER LIST             05480000
         IKJCPPL                       COMMAND PROCESSOR PARM LIST      05490000
         IKJTCB                        Task Control Block               05500006
         IEZJSCB                       Job Step Control Block           05510006
         IEFZB4D0                      DYNALLOC REQUEST BLOCK           05520000
         IEFZB4D2                      DYNALLOC TEXT UNIT KEYS          05530000
         IEFJESCT TYPE=DSECT           JES CONTROL TABLE                05540004
         IEFTIOT1                      TIOT DSECT                       05550004
         CVT DSECT=YES,LIST=NO                                          05560004
         IHADSAB                       DATA SET ASSOCIATION BLOCK       05570004
*        IEFZB4D5                                                       05580006
DSABQDB  DSECT                         DSAB QUEUE DESCRIPTOR BLOCK      05590006
DSQDBID  DS    C'DSAB'                 ACRONYM                          05600006
DSQATTRS DS    XL2                     ATTRIBUTES                       05610006
DSQQDBLN DS    H'32'                   QDB LENGTH                       05620006
DSQNELMS DS    F                       NUMBER OF ELEMENTS ON QUEUE      05630006
DSQFRSTP DS    A(DSAB)                 FIRST DSAB                       05640006
DSQLASTP DS    A(DSAB)                 LAST DSAB                        05650006
*        YREGS                         REGISTER EQUATES                 05660006
R0       EQU   0                                                        05670006
R1       EQU   1                                                        05680006
R2       EQU   2                                                        05690006
R3       EQU   3                                                        05700006
R4       EQU   4                                                        05710006
R5       EQU   5                                                        05720006
R6       EQU   6                                                        05730006
R7       EQU   7                                                        05740006
R8       EQU   8                                                        05750006
R9       EQU   9                                                        05760006
R10      EQU   10                                                       05770006
R11      EQU   11                                                       05780006
R12      EQU   12                                                       05790006
R13      EQU   13                                                       05800006
R14      EQU   14                                                       05810006
R15      EQU   15                                                       05820006
         END   INITKSDS                                                 05830000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  05850000
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 05860000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   05870006
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   05880006
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   05890006
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      05900006
//SYSPRINT DD SYSOUT=*                                                  05910000
//*                                                                     05920000
//LKEDTEMP EXEC PGM=IEWL,PARM=(LIST,MAP,RENT)                           05930004
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       05940006
//SYSLMOD  DD DSN=&&TEMPLOAD(INITKSDS),DISP=(,PASS),                    05950004
// UNIT=VIO,SPACE=(TRK,(1,,1))                                          05960004
//SYSPRINT DD SYSOUT=*                                                  05970000
//                                                                      05980006
//                                                                      05990006
//*                                                                     06000000
//GOPGM   EXEC PGM=INITKSDS                                             06010001
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)                            06020004
//*NITKSDS DD SPACE=(TRK,100),RECORG=ES,LRECL=100                       06030001
//INITKSDS DD SPACE=(TRK,100),RECORG=KS,KEYLEN=12,LRECL=100             06040001
//*                                                                     06050001
//GOCMD   EXEC PGM=IKJEFT01                                             06060001
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)                            06070004
//SYSTSIN  DD *                                                         06080001
DEF CL(NAME(CL)    IX)                                                  06090000
REPRO ODS(CL) IFILE(STEPLIB) COUNT(1) REPLACE                           06100000
INITKSDS CL RESET                                                       06110000
INITKSDS CL NORESET                                                     06120000
REPRO ODS(CL) IFILE(STEPLIB) COUNT(1)                                   06130000
INITKSDS CL                                                             06140000
INITKSDS CL RESET                                                       06150000
DELETE CL                                                               06160000
//SYSTSPRT DD SYSOUT=*                                                  06170000
//SYSPRINT DD SYSOUT=*                                                  06180000
//ABNLIGNR DD DUMMY                                                     06190004
//SYSUDUMP DD SYSOUT=*                                                  06200000
//*                                                                     06210004
//HLASM2 EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)        06220005
TESTPGM  CSECT                                                          06230004
         BASR  12,0                                                     06240004
         USING *,12                                                     06250004
         LA    1,ACB1                                                   06260004
         LINK  EP=INITKSDS                                              06270004
         SVC   3                                                        06280004
ACB1     ACB   DDNAME=KSDS1                                             06290004
         END                                                            06300004
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  06310004
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    06320004
//SYSPRINT DD SYSOUT=*                                                  06330004
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200      06340004
//*                                                                     06350004
//LKED2   EXEC PGM=HEWLKED                                              06360004
//SYSLIN   DD DSN=*.HLASM2.SYSLIN,DISP=(OLD,PASS)                       06370005
//SYSLMOD  DD DSN=&&TEMPLOAD(TESTPGM),DISP=(MOD,PASS)                   06380004
//SYSPRINT DD SYSOUT=*                                                  06390004
//*                                                                     06400004
//GO      EXEC PGM=TESTPGM,REGION=4M                                    06410004
//STEPLIB  DD DSN=&&TEMPLOAD,DISP=(OLD,PASS)                            06420004
//KSDS1    DD SPACE=(TRK,100),RECORG=KS,KEYLEN=12,LRECL=100             06430004
//SYSDEBUG DD SYSOUT=*                                                  06440004
//SYSUDUMP DD SYSOUT=*                                                  06450004
//*                                                                     06460004
//LKED    EXEC PGM=IEWL,PARM=(LIST,MAP,RENT)                            06470004
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        06480005
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(INITKSDS),DISP=SHR              06490005
//SYSPRINT DD SYSOUT=*                                                  06500004
./ ADD NAME=JOBRLSE  0100-83336-06210-1344-00186-00070-00000-CBT472
//GILBERTJ JOB (ACCT#),JOBRLSE,                                         00010000
// NOTIFY=&SYSUID,                                                      00020000
//*RESTART=EXEC,                                                        00030000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00040000
//*                                                                     00050000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00060000
*********************************************************************** 00080000
*                                                                     * 00090000
*                       JOB RELEASE (JES2)                            * 00100000
*                                                                     * 00110000
*********************************************************************** 00120000
*                                                                     * 00130000
*        THIS PROGRAM ALLOWS YOU TO ISSUE A $A COMMAND TO RELEASE     * 00140000
*        A JOB PREVIOUSLY SUBMITTED WITH "TYPRUN=HOLD".               * 00150000
*                                                                     * 00160000
*        TO PREVENT "MULTIPLE JOBS FOUND" PROBLEMS, THIS PROGRAM      * 00170000
*        USES THE SUB-SYSTEM INTERFACE TO INQUIRE ABOUT THE STATUS    * 00180000
*        OF HOMONYM JOBS.  IT THEN ISSUES A $A COMMAND WITH THE JOB   * 00190000
*        NUMBER (FOR EXAMPLE: $A JOB01234) OF THE FIRST JOB FOUND     * 00200000
*        IN THE INPUT QUEUE IN HELD STATUS.                           * 00210000
*                                                                     * 00220000
*        SAMPLE EXECUTION JCL:                                        * 00230000
*                                                                     * 00240000
*          //RLSENEXT EXEC PGM=JOBRLSE,PARM=JOBNAME                   * 00250000
*                                                                     * 00260000
*        WARNING !!! THIS PROGRAM MUST BE APF-AUTHORIZED.             * 00270000
*                                                                     * 00280000
*********************************************************************** 00290000
JOBRLSE  CSECT                                                          00300000
MAXJOBS  EQU   200                     MAX NUMBER OF HOMONYM JOBS       00310000
         SAVE  (14,12),,'GSF UTILITIES - JOBRLSE R100'                  00320000
         LR    R12,R15                                                  00330000
         USING JOBRLSE,R12                                              00340000
         ST    R13,SAVEAREA+4                                           00350000
         LA    R13,SAVEAREA                                             00360000
*                                                                       00370000
*        VALIDATE JCL PARM                                              00380000
*                                                                       00390000
         L     R2,0(,R1)               JCL PARM ADDRESS                 00400000
         LH    R3,0(,R2)               PICK UP LENGTH                   00410000
         LTR   R3,R3                                                    00420000
         BNP   RETURN16                INVALID PARM LENGTH              00430000
         CH    R3,=H'8'                                                 00440000
         BH    RETURN16                INVALID PARM LENGTH              00450000
*                                                                       00460000
*        ALLOCATE A SSOB AND BUILD IT.                                  00470000
*                                                                       00480000
         LA    R0,SSOBHSIZ+SSCSELSZ*MAXJOBS+256                         00490000
         GETMAIN RU,LV=(0)                                              00500000
         ST    R1,SSOBPTR1                                              00510000
         OI    SSOBPTR1,X'80'                                           00520000
         LR    R11,R1                                                   00530000
         USING SSOB,R11                                                 00540000
         XC    SSOB(SSOBHSIZ),SSOB     BUILD THE SSOB                   00550000
         LA    R0,SSOBHSIZ                                              00560000
         STH   R0,SSOBLEN                                               00570000
         MVC   SSOBID,=C'SSOB'                                          00580000
         LA    R0,SSOBSTAT                                              00590000
         STH   R0,SSOBFUNC             FUNCTION CODE: CANCEL/STATUS     00600000
         LA    R0,SSOBGN                                                00610000
         ST    R0,SSOBINDV                                              00620000
         LA    R0,SSCSIZE                                               00630000
         STH   R0,SSCSLEN                                               00640000
         MVI   SSCSFLGS,0                                               00650000
         MVI   SSCSULEN,0                                               00660000
         MVC   SSCSJOBN,SPACES         INITIALIZE THE FIELD             00670000
         BCTR  R3,0                                                     00680000
         EX    R3,*+4                                                   00690000
         MVC   SSCSJOBN(*-*),2(R2)     MOVE JOBNAME FROM PARM           00700000
         MVC   SSCSJOBI,SPACES         JOB ID                           00710000
         LA    R0,SSCSELSZ*MAXJOBS                                      00720000
         STH   R0,SSCSDIMP                                              00730000
*                                                                       00740000
*        CALL JES2 VIA THE SUBSYSTEM INTERFACE                          00750000
*                                                                       00760000
         MODESET KEY=ZERO,MODE=SUP                                      00770000
         LA    R1,SSOBPTR1                                              00780000
         IEFSSREQ  ,                   <==== CALL JES2                  00790000
         LTR   R2,R15                  COPY/TEST RETURN CODE            00800000
         BZ    MODESET2                RC=0, CONTINUE                   00810000
         ABEND 2001,DUMP               IEFSSREQ ERROR                   00820000
MODESET2 MODESET KEY=NZERO,MODE=PROB                                    00830000
         ICM   R15,B'1111',SSOBRETN    PICK UP RETURN-CODE              00840000
         BZ    LOOKUP                  RC=0, CONTINUE                   00850000
         ABEND 2002,DUMP               RETURNED LENGTH IS ZERO          00860000
*                                                                       00870000
*        LOOK UP JOB ID                                                 00880000
*                                                                       00890000
LOOKUP   LA    R3,SSCSARBG             START OF ARRAY                   00900000
         LA    R4,SSCSELSZ             ELEMENT SIZE                     00910000
         LH    R5,SSCSDIMR             LENGTH OF ARRAY (IN BYTES)       00920000
         BCTR  R5,0                                                     00930000
         ALR   R5,R3                   END OF ARRAY                     00940000
         SLR   R3,R4                   1ST ENTRY                        00950000
         USING SSCSARAY,R3                                              00960000
*LOOP                                                                   00970000
LOOP1    BXH   R3,R4,RETURN04          SCAN JOB NAMES                   00980000
         TM    SSCSFLG1,SSCSEXCQ+SSCSHOLD                               00990000
         BNO   LOOP1                   TRY NEXT JOB                     01000000
*ENDLOOP                                                                01010000
         MVC   CMDJOBI,SSCSARID        JOB NUMBER: 'JOB01234'           01020000
         MODESET KEY=ZERO,MODE=SUP                                      01030000
         SLR   R0,R0                   CONSOLE ID                       01040000
         MGCR  CMD                     ISSUE 'RELEASE' COMMAND          01050000
         MODESET KEY=NZERO,MODE=PROB                                    01060000
         SLR   R2,R2                   RC=00                            01070000
         B     FREEMAIN                                                 01080000
*                                                                       01090000
*        CLEAN UP, RETURN                                               01100000
*                                                                       01110000
RETURN04 LA    R2,0004(0)              NO JOB FOUND: RC=04              01120000
*                                                                       01130000
FREEMAIN LA    R0,SSOBHSIZ+SSCSELSZ*MAXJOBS+256                         01140000
         FREEMAIN RU,LV=(0),A=(R11)    FREE DYNAMIC AREA                01150000
         LR    R15,R2                  PASS RETURN CODE                 01160000
         B     RETURN20                                                 01170000
*                                                                       01180000
RETURN16 LA    R15,0016                PARM ERROR: RC16                 01190000
RETURN20 L     R13,4(,R13)                                              01200000
         RETURN (14,12),RC=(15)        GOBACK TO SYSTEM                 01210000
*---------------------------------------------------------------------- 01220000
*                                                                       01230000
*        WORK AREA                                                      01240000
*                                                                       01250000
*---------------------------------------------------------------------- 01260000
SPACES   DC    CL8' '                                                   01270000
CMD      DC    Y(CMDL,0),C'$A '                                         01280000
CMDJOBI  DS    CL8' '                                                   01290000
CMDL     EQU   *-CMD                                                    01300000
SSOBPTR1 DS    A                                                        01310000
SAVEAREA DS    18A                                                      01320000
*---------------------------------------------------------------------- 01330000
*                                                                       01340000
*        CONTROL BLOCK DEFINITIONS                                      01350000
*                                                                       01360000
*---------------------------------------------------------------------- 01370000
         IEFJSSOB CS                                                    01380000
         CVT   DSECT=YES,PREFIX=NO                                      01390000
         IEFJESCT                                                       01400000
*        YREGS                                                          01410000
R0       EQU   0                                                        01420000
R1       EQU   1                                                        01430000
R2       EQU   2                                                        01440000
R3       EQU   3                                                        01450000
R4       EQU   4                                                        01460000
R5       EQU   5                                                        01470000
R6       EQU   6                                                        01480000
R7       EQU   7                                                        01490000
R8       EQU   8                                                        01500000
R9       EQU   9                                                        01510000
R10      EQU   10                                                       01520000
R11      EQU   11                                                       01530000
R12      EQU   12                                                       01540000
R13      EQU   13                                                       01550000
R14      EQU   14                                                       01560000
R15      EQU   15                                                       01570000
         END                                                            01580000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01610000
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 01620000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01630000
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01640000
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01650000
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01660000
//SYSPRINT DD SYSOUT=*                                                  01670000
//*                                                                     01680000
//LKED    EXEC PGM=IEWL,PARM='MAP,REUS,AC=1'                            01690000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01700000
//SYSPRINT DD SYSOUT=*                                                  01710000
//SYSLMOD  DD DSN=GILBERT.LOAD(JOBRLSE),DISP=SHR    <== APF LOADLIB     01720000
//*                                                                     01730000
//*       TEST STEP                                                     01740000
//*                                                                     01750000
//EXEC    EXEC PGM=JOBRLSE,PARM=GILBERTH                                01760000
//STEPLIB  DD DSN=*.LKED.SYSLMOD,DISP=SHR                               01770000
//EXEC    EXEC PGM=JOBRLSE,PARM=GILBERTH                                01780000
//STEPLIB  DD DSN=*.LKED.SYSLMOD,DISP=SHR                               01790000
//EXEC    EXEC PGM=JOBRLSE,PARM=GILBERTH                                01800000
//STEPLIB  DD DSN=*.LKED.SYSLMOD,DISP=SHR                               01810000
//SYSUDUMP DD SYSOUT=*                                                  01820000
//                                                                      01830000
//GILBERTH JOB (ACCT#),GILBERT,TYPRUN=HOLD,       TARGET JOB            01840000
// CLASS=A,MSGCLASS=X                             TARGET JOB            01850000
//TGT EXEC PGM=IEFBR14                            TARGET JOB            01860000
./ ADD NAME=NOTCTLG3 0202-82280-06210-1452-00227-00478-00057-CBT472
//GILBERTN JOB (ACCT#),NOTCTLG3,                                        00010000
//*RESTART=EXECPROC.FROM,                                               00020000
// NOTIFY=GILBERT,                                                      00030002
// CLASS=A,MSGCLASS=X                                                   00040002
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050002
*********************************************************************** 00070000
*                                                                     * 00080000
*        REPLACEMENT FOR CZX3PSRC                              OS/VS2 * 00090002
*                                                                     * 00100000
*        1.  PREVENTS "NOT CATLG 2" CONDITIONS                        * 00110001
*                                                                     * 00120000
*        WARNING: The detection of NOT CATLG 2 situations only        * 00130001
*        occurs when the program's own STEP name is "FROM".           * 00140001
*                                                                     * 00150001
*********************************************************************** 00160000
         LCLC  &STR                                                     00170002
NOTCTLG3 CSECT                                                          00180000
         SAVE  (14,12),,'GSF UTILITIES - NOTCTLG3 R202'                 00190002
         BALR  R11,0                                                    00200000
         USING *,R11                                                    00210000
         L     R2,0(,R1)               PARM FROM JCL                    00220000
         GETMAIN R,LV=DYNL             ALLOCATE DYNAMIC STORAGE         00230002
         ST    R13,4(,R1)              SAVE SAVE AREA ADDRESS           00240000
         LR    R13,R1                  NEW SAVE AREA                    00250000
         USING DYN,R13                                                  00260000
*                                                                       00270000
*        PROCESS PARM (GET RETURN CODE VALUE IN BINARY)                 00280000
*                                                                       00290000
         LH    R15,0(,R2)              PARM LENGTH                      00300000
         BCTR  R15,0                                                    00310000
         PACK  RETCODE,2(*-*,R2)       RETURN CODE                      00320000
         EX    R15,*-6                 EXECUTE PACK INSTRUCTION         00330000
         CVB   R10,RETCODE             GET RETCODE, CHECK FOR A S0C7    00340000
*                                                                       00350000
         L     R1,540(,0)              MY TCB (PSATOLD-PSA)             00360000
         L     R4,TCBJSCB-TCB(,R1)     MY JSCB                          00370000
         USING IEZJSCB,R4                                               00380000
         L     R5,JSCBJCT              GET JCT ADDRESS                  00390000
         USING JCT,R5                                                   00400000
         L     R6,JSCSCT               CURRENT STEP'S SCT PREFIX        00410000
         USING SCT,R6                                                   00420000
**       CLC   =C'FROM ',SCTSCLPC      PROCSTEP                         00430000
**       BE    LOOPSCT                                                  00440000
         CLC   =C'FROM ',SCTSNAME      STEP=FROM?                       00450000
         BNE   RETURN                  IT'S NOT THE RIGHT STEP, I QUIT  00460000
*LOOP                                                                   00470000
LOOPSCT  CLC   SCTSDPSA,JSCSCT+1       COND MUST REFER TO MY STEP       00480000
         BNE   NEXTSTEP                IT'S NOT THE CASE, TRY NEXT STEP 00490000
         CH    R10,SCTSDPCD            COND=(54,LT,FROM)                00500000
         BH    NEXTSTEP                STEP TO BE BYPASSED              00510000
         ICM   R1,B'0111',SCTFSIOT     PREFIX OF 1ST SIOT               00520000
         BZ    NEXTSTEP                NO MORE DDS, TRY NEXT SCT        00530000
*--LOOP                                                                 00540000
LOOPSIOT EQU   *                                                        00550002
         LA    R7,16(,R1)              PASS SIOT ADDRESS                00560002
         USING SIOT,R7                                                  00570000
         ICM   R1,B'0111',SCTPJFCB     JFCB PREFIX                      00580000
         LA    R8,16(,R1)              PASS JFCB ADDRESS                00590002
         USING JFCB,R8                 DSNAME FROM JFCB                 00600000
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE  00610000
*                                                                       00620000
         TM    SCTSDISP,2              DISP=(,CATLG) ?                  00630000
         BNO   NEXTSIOT                JUMP, DISP IS NOT CATLG          00640002
         TM    SCTSBYT3,4              DISP=NEW                         00650000
         BO    DISPOK                  JUMP IF DISP=NEW                 00660000
         TM    SCTSBYT3,2              DISP=MOD                         00670000
         BNO   NEXTSIOT                EXIT IF NOT NEW OR MOD           00680000
DISPOK   TM    JFCBIND1,JFCGDG         CHECK FOR (+1)                   00690000
         BO    NEXTSIOT                JUMP, THIS IS A GDG              00700000
         LOCATE CAML26                                                  00710000
         LTR   R15,R15                                                  00720000
         BNZ   NEXTSIOT                DATA SET NOT CATALOGED           00730000
         CLI   MSG2DSN,C' '            CHECK DSNAME                     00740000
         BNE   NOTFIRST                NOT FIRST ERROR, JUMP            00750000
         WTO   MF=(E,BLANKLNE)         BLANK LINE                       00760000
         WTO   MF=(E,BLANKLNE)         BLANK LINE                       00770000
NOTFIRST MVC   MSG2STEP,SCTSNAME       STEPNAME                         00780000
         MVC   MSG2DDN,SCTDDNAM        DDNAME                           00790000
         MVC   MSG2DSN,JFCBDSNM        DSNAME                           00800000
         WTO   MF=(E,MSG2)             ISSUE "ALREADY CATALOGED" MSG    00810000
*                                                                       00820000
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     NEXT SIOT'S PREFIX               00830000
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP     00840000
*--ENDLOOP                                                              00850000
         DROP  R7,R8                   WERE SIOT, JFCB                  00860000
NEXTSTEP ICM   R6,B'0111',SCTANSCT     NEXT SCT PREFIX                  00870000
         BNZ   LOOPSCT                 PROCESS NEXT STEP                00880000
*ENDLOOP                                                                00890000
ENDSCT   CLI   MSG2DSN,C' '            CHECK FOR AN ERROR               00900000
         BE    RETURN                  NO ERRORS, RETURN.               00910000
         WTO   MF=(E,BLANKLNE)         BLANK LINE                       00920000
         WTO   MF=(E,BLANKLNE)         BLANK LINE                       00930000
*                                                                       00940000
*        IF THE STEP IS AUTHORIZED, SET THE "JOB FAILED" BIT ON         00950000
*        IN THE JCT.  IF THE STEP ISN'T AUTHORIZED, ISSUE AN ABEND.     00960000
*        THE ADVANTAGE OF A "JOB FAILED" IS THAT COND=EVEN STEPS        00970000
*        ARE NOT EXECUTED.                                              00980000
*                                                                       00990000
         TM    JSCBOPTS,JSCBAUTH       TEST AUTHORIZATION               01000000
         BZ    ABEND88                 JUMP IF NOT AUTHORIZED.          01010000
         MODESET KEY=ZERO              CHANGE TO KEY 0                  01020000
         OI    JCTJSTAT,INCMSTS        TURN ON "JOB FAILED" BIT         01030000
*                                                                       01040000
RETURN   LR    R1,R13                  PASS ADDR FOR FREEMAIN           01050000
         L     R13,4(,R13)                                              01060000
         FREEMAIN R,LV=DYNL,A=(1)      FREE DYNAMIC STORAGE             01070002
         LR    R15,R10                 RETURN CODE FROM PARM            01080000
         RETURN (14,12),RC=(15)                                         01090000
ABEND88  ABEND 2088                    AT LEAST 1 CATALOGED DATA SET    01100000
*---------------------------------------------------------------------* 01110000
*                                                                     * 01120000
*        WORK AREAS FOR NOT-CATLG 2 FUNCTION                          * 01130000
*                                                                     * 01140000
*---------------------------------------------------------------------* 01150000
BLANKLNE WTO   '****',ROUTCDE=14,MF=L  BLANK LINE FOR READABILITY       01160000
&STR     SETC  (44)' '                                                  01170000
MSG2     WTO   '**** ALREADY CATALOGED: SSSSSSSS DDDDDDDD &STR',       X01180000
               ROUTCDE=(11,14),MF=L                                     01190000
MSG2STEP EQU   MSG2+28+00,8            STEPNAME                         01200000
MSG2DDN  EQU   MSG2+28+09,8            DDNAME                           01210000
MSG2DSN  EQU   MSG2+28+18,44           DSNAME                           01220000
CAML26   CAMLST NAME,DSNAME,,*-*                                        01230002
*---------------------------------------------------------------------* 01240000
*                                                                     * 01250000
*        DYNAMIC ALLOCATION OF A VSAM DATA SET                        * 01260000
*                                                                     * 01270000
*---------------------------------------------------------------------* 01280000
S99RB    DC    A(X'14010000',0,S99TUPL,0,0)                             01290000
S99TUPL  DC    A(S99T1,S99T2,S99T4+VL)                                  01300000
S99T1    DC    XL2'55,1,8',C'$$VERIFY' DDNAME                           01310000
S99T2    DC    AL2(2,1,44),CL44' '     DSNAME                           01320000
DSNAME   EQU   S99T2+6,44                                               01330000
S99T4    DC    AL2(4,1,1),X'08'        DISP=SHR                         01340000
*---------------------------------------------------------------------* 01350000
*                                                                     * 01360000
*        DYNAMIC STORAGE AREA                                         * 01370000
*                                                                     * 01380000
*---------------------------------------------------------------------* 01390000
DYN      DSECT                                                          01400000
SAVEAREA DS    18F                                                      01410000
RETCODE  DS    D                                                        01420000
DYNL     EQU   (((*-DYN+4095)/4096)*4096)                               01470000
*---------------------------------------------------------------------* 01480000
*                                                                     * 01490000
*        DSECTS FOR SWA/LSQA CONTROL BLOCKS                           * 01500000
*                                                                     * 01510000
*---------------------------------------------------------------------* 01520000
VL       EQU   X'80000000'                                              01530000
**       IEFJESCT TYPE=DSECT           JES CONTROL TABLE                01540002
         IKJTCB LIST=NO                SYS1.AMODGEN                     01550000
         IEZJSCB ,                     SYS1.AMODGEN                     01560000
JCT      DSECT                                                          01570000
         DS    XL16                    PREFIX                           01580000
         IEFAJCTB ,                    SYS1.AMODGEN                     01590000
SCT      DSECT                                                          01600000
         DS    XL16                    PREFIX                           01610000
         IEFASCTB ,                    SYS1.AMODGEN                     01620000
SIOT     DSECT                                                          01630000
         DS    XL16                    PREFIX                           01640000
         IEFASIOT ,                    SYS1.AMODGEN                     01650000
JFCB     DSECT                                                          01660000
         DS    XL16                    PREFIX                           01670000
         IEFJFCBN ,                    SYS1.AMODGEN                     01680000
         CVT   LIST=NO,DSECT=YES       COMMUNICATION VECTOR TABLE       01690000
*        YREGS                         SYS1.MACLIB                      01700002
R0       EQU   0                                                        01710002
R1       EQU   1                                                        01720002
R2       EQU   2                                                        01730002
R3       EQU   3                                                        01740002
R4       EQU   4                                                        01750002
R5       EQU   5                                                        01760002
R6       EQU   6                                                        01770002
R7       EQU   7                                                        01780002
R8       EQU   8                                                        01790002
R9       EQU   9                                                        01800002
R10      EQU   10                                                       01810002
R11      EQU   11                                                       01820002
R12      EQU   12                                                       01830002
R13      EQU   13                                                       01840002
R14      EQU   14                                                       01850002
R15      EQU   15                                                       01860002
         END                                                            01870000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  01890002
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 01900002
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   01910002
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   01920002
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   01930002
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      01940002
//SYSPRINT DD SYSOUT=*                                                  01950000
//*                                                                     01960000
//LKED    EXEC PGM=HEWL,PARM='MAP,AC=1',COND=(0,NE,ASMXF)               01970002
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       01980002
//SYSLMOD  DD DSN=GILBERT.LOAD2(CZX3PSRC),DISP=SHR                      01990002
//SYSPRINT DD SYSOUT=*                                                  02000000
//*                                                                     02010000
//DD2## DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0) 02020001
//DD2   DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)     02030001
//DD3   DD DISP=(MOD,DELETE),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0) 02040001
//*                                                                     02050000
//PROC    PROC                                                          02060000
//FROM    EXEC PGM=CZX3PSRC,PARM=54                                     02070000
//STEPLIB  DD DSN=GILBERT.LOAD2,DISP=SHR                                02080002
//ABNLTERM DD SYSOUT=*                                                  02090000
//SYSUDUMP DD SYSOUT=*                                                  02100000
//*                                                                     02110000
//STEP53  EXEC PGM=IEFBR14,COND=(53,LT,FROM)                            02120000
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)    02130001
//*                                                                     02140000
//STEP54  EXEC PGM=IEFBR14,COND=(54,LT,FROM)                            02150000
//DDCAT2 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2,UNIT=3380,SPACE=(1,0)    02160001
//*                                                                     02170000
//STEP55  EXEC PGM=IEFBR14,COND=(55,LT,FROM)                            02180000
//DDCAT5 DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG3,UNIT=3380,SPACE=(1,0)    02190001
//*                                                                     02200000
//STEP56  EXEC PGM=IEFBR14,COND=(56,LT,FROM)                            02210000
//DD6A DD DISP=(,CATLG),DSN=GILBERT.NOTCTLG2(+1),UNIT=3380,SPACE=(1,0)  02220001
//DD6B DD DISP=(MOD,CATLG),DSN=GILBERT.NOTCTLG2(MM),                    02230001
// UNIT=3380,SPACE=(1,0)                                                02240001
//VFY  DD DSN=PPV.VFY,DISP=SHR                                          02250000
//*                                                                     02260000
//STEP57  EXEC PGM=IEFBR14,COND=(57,LT,FROM)                            02270000
//VFY  DD DSN=GILBERT.VFY2,AMP='AMORG',DISP=SHR                         02280001
//        PEND                                                          02290000
//*                                                                     02300000
//EXECPROC EXEC PROC                                                    02310000
./ ADD NAME=STRING   0101-78239-06210-0939-01182-00025-00109-CBT472
*/GILBERTF JOB (ACCT#),STRINGXF,                                        00010001
*/ NOTIFY=&SYSUID,                                                      00020001
*/ CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030001
*/XFASM EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,ESD,NORLD,NOXREF)           00040001
*/STEPLIB DD DSN=GSFSOFT.XFASM.LOAD,DISP=SHR                            00060001
*********************************************************************** 00080000
*                                                                     * 00090000
* MACRO NAME = STRING                                                 * 00100000
*                                                                     * 00110000
* DESCRIPTIVE NAME = STRING Macro Instruction for Assembler XF        * 00120001
*                                                                     * 00130000
* FUNCTION = Provide capabilities similar to PUT EDIT (of PL/I)       * 00140000
*            or STRING (of COBOL) to assembler programs.              * 00150000
*                                                                     * 00160000
* STATUS = R101                                                       * 00170001
*                                                                     * 00180000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00190000
*                                                                     * 00200000
* ENVIRONMENT = SEE BELOW                                             * 00210000
*                                                                     * 00220000
*    AMODE  = ANY                                                     * 00230001
*    RMODE  = ANY                                                     * 00240001
*     SCP   = S/360 OS, OS/VS, MVS/370                                * 00250001
* Processor = Assembler XF, Assembler H, High-Level Assembler         * 00260001
*     KEY   = ANY                                                     * 00270000
*     MODE  = ANY                                                     * 00280000
*     APF   = ANY                                                     * 00290001
*                                                                     * 00300000
* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               * 00310000
*                                                                     * 00320000
* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              * 00330000
*                                                                     * 00340000
* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   * 00350000
*                                                                     * 00360000
* CHANGE ACTIVITY                                                     * 00370000
*                                                                     * 00380000
* $101 ASM XF version of STRING R514                                  * 00390001
*********************************************************************** 00400000
         MACRO                                                          00410000
&NAME    STRING &INTO=,&PRINT=NOGEN                                     00420000
         GBLA  &$$LIT                                                   00430001
         GBLB  &$$FEAT(16)             FEATURES                         00440000
.*                                       1 LITERALS                     00450000
.*                                       2 REGISTER (BIN)               00460000
.*                                       3 REGISTER (HEX)               00470000
.*                                       4 PACKED                       00480000
.*                                       5 JDATE                        00490000
.*                                       6 BINARY                       00500000
.*                                       7 HEX                          00510000
.*                                       8 NUMERIC                      00520000
.*                                       9 LEFT JUST (NUMERIC)          00530000
.*                                       10 LEADING ZEROES              00540000
.*                                       11 TRUNCATE (CHAR STRING)      00550000
.*                                       12 %TIME                       00560000
         GBLC  &MACVERS                                                 00570001
         GBLC  &$$LITS(9999)           LITERALS                         00580000
         LCLA  &I,&J,&L,&N,&FLAG,&LEN2,&BLANKS                          00590001
         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC,&NUMERIC 00600001
         LCLC  &LABEL,&LQ,&STR,&TO1,&TO2,&P1S,&P2C,&P2L,&P3C,&P3L       00610001
         LCLC  &LIT,&ALLFEAT                                            00620001
&MACVERS SETC '101'                    current version                  00630001
         AIF   ('&PRINT' EQ 'NOGEN').NOGEN                              00640000
         PUSH  PRINT                                                    00650000
         PRINT GEN                                                      00660000
.NOGEN   ANOP                                                           00670001
         AIF   (T'&INTO EQ 'O' AND N'&SYSLIST EQ 1                     X00680000
               AND '&SYSLIST(1)' EQ 'GENERATE').GENL                    00690001
&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS            00700000
&LQ      SETC  'L'''                   LENGTH ATTRIBUTE                 00710000
&STR     SETC  ' R&MACVERS XF '                                         00720001
&NAME    L     R15,=A(@STR002)&STR     Routine Address                  00730001
         BALR  R14,R15                 CALL @STRING Routine             00740001
         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR    00750000
         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR        00760000
         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)                00770000
         DC    AL2((&LABEL.P-@STRING)/2) OFFSET TO FIELD DESCRIPTORS    00780001
@STRING  CSECT                         NON-ADDRESSABLE CONSTANTS        00790001
&TO1     SETC  '&INTO(1)'                                               00800000
&TO2     SETC  '&LQ&INTO'                                               00810000
         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX        00820000
         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)   00830000
&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)  00840000
.PUNTO3  ANOP                                                           00850000
&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)   00860000
         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)   00870000
&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1)) 00880000
.PUNTO8  ANOP                                                           00890000
&LABEL.P DC    S(&TO1,&TO2)                                             00900000
.*--------------------------------------------------------------------* 00910000
.*-------      FIELDS       ------------------------------------------* 00920000
.*--------------------------------------------------------------------* 00930000
&I       SETA  1                                                        00940000
.*LOOP                                                                  00950000
.LOOP1   ANOP                                                           00960000
         ACTR  200                            SYSDEBUG/DIAG055          00970000
         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS     00980000
&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP                   00990000
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00                      01000000
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01         01010000
.*--------------------------------------------------------------------* 01020000
.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         * 01030000
.*--------------------------------------------------------------------* 01040000
&P1S     SETC  '&SYSLIST(&I,1)'                                         01050000
&P2L     SETC  '0'                     INPUT LENGTH                     01060000
&P3L     SETC  '0'                     OUTPUT LENGTH                    01070000
         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES               01080000
         AIF   ('&SYSLIST(&I)' EQ '%TIME').FLD190 %TIME                 01090000
         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)               01100000
         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250                         01110000
&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)             01120000
.FLD115  ANOP                                                           01130000
.*                                                                      01140000
         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200                         01150000
.*                                                                      01160000
.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)                           01170000
.*                                                                      01180000
&L       SETA  1                                                        01190000
.*--LOOP                                                                01200000
.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133                             01210000
&L       SETA  &L+1                                                     01220000
         AIF   (&L LT K'&P1S).FLD131                                    01230000
.*--ENDLOOP                                                             01240000
&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF             01250000
         AGO   .FLD134                                                  01260000
.FLD133  ANOP                                                           01270000
&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE           01280000
.FLD134  ANOP                                                           01290000
.*                                                                      01300000
.*XF     AIF   (NOT D'&P2L).FLD140                                      01310001
&P2C     SETC  T'&P2L                                                   01320000
.*MNOTE *,'&P1 &P2C'                                                    01330000
         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220 01340000
         AIF   ('&P2C' EQ 'G').FLD210  FL2                              01350000
.FLD140  ANOP                                                           01360000
.*                                                                      01370000
.*       EXTRACT PSATOLD FROM PSATOLD-PSA                               01380000
.*                                                                      01390000
&L       SETA  1                                                        01400000
.*--LOOP                                                                01410000
.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143                             01420000
         AIF   ('&P2L'(&L,1) EQ '+').FLD143                             01430000
&L       SETA  &L+1                                                     01440000
         AIF   (&L LT K'&P2L).FLD141                                    01450000
.*--ENDLOOP                                                             01460000
&P2L     SETC  '&LQ&P2L'               L'ABCDEF                         01470000
         AGO   .FLD300                                                  01480000
.FLD143  ANOP                                                           01490000
&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA       01500000
         AGO   .FLD300                                                  01510000
.*                                                                      01520000
.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800         01530000
&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12                    01540000
         AIF   (&LAST).FLD186                                           01550000
         DC    X'60',AL1(&P2L)         BLANKS                           01560000
         AGO   .LIT90                                                   01570000
.FLD186  DC    X'E0',AL1(&P2L),0S(0)   BLANKS                           01580000
         AGO   .LIT90                                                   01590000
.*                                                                      01600000
.FLD190  ANOP                          %TIME                            01610000
&P1S     SETC  '1(14)'                 %TIME                            01620000
&$$FEAT(12) SETB 1                     %TIME                            01630000
         AGO   .FLD800                                                  01640000
.*--------------------------------------------------------------------* 01650000
.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    * 01660000
.*--------------------------------------------------------------------* 01670000
.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED     01680000
&P2C     SETC  '&SYSLIST(&I,2)'                                         01690000
         AGO   .FLD220                                                  01700000
.*T'&P1=G                                                               01710000
.FLD210  ANOP                                                           01720000
&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'                      01730000
&P2C     SETC  'FL&L'                  T'&P1 = 'G'                      01740000
.*                                                                      01750000
.FLD220  ANOP                                                           01760000
&P2L     SETC  '0&P2C'                 (R2) LENGTH                      01770000
         AIF   ('&P2C'(1,1) EQ '(').FLD300                              01780000
&P2L     SETC  '&P2C'                  3(R2) LENGTH                     01790000
         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300                         01800000
&P2L     SETC  '0'                                                      01810000
&PACKED  SETB  ('&P2C' EQ 'P')                                          01820000
         AIF   (&PACKED).FLD290                                         01830000
&P2L     SETC  '1'                                                      01840000
         AIF   ('&P2C' EQ 'FL1').FLD240                                 01850000
&P2L     SETC  '3'                                                      01860000
         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240                01870000
&P2L     SETC  '7'                                                      01880000
         AIF   ('&P2C' EQ 'FL3').FLD240                                 01890000
&P2L     SETC  '15'                                                     01900000
         AIF   ('&P2C' EQ 'F').FLD240                                   01910000
&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD          01920000
         AGO   .FLD300                                                  01930000
.*                                                                      01940000
.FLD240  ANOP                          BINARY VARIABLE                  01950000
&BIN     SETB  1                                                        01960000
         AGO   .FLD300                                                  01970000
.*                                                                      01980000
.FLD250  ANOP                          REGISTER CONTENT                 01990000
&REG     SETB  1                                                        02000000
         AGO   .FLD300                                                  02010000
.*                                                                      02020000
.FLD290  ANOP                          PACKED                           02030000
&P2L     SETC  '1'                                                      02040000
.*--------------------------------------------------------------------* 02050000
.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   * 02060000
.*--------------------------------------------------------------------* 02070000
.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800                         02080000
&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL                    02090000
&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE                       02100000
         AIF   (&HEX OR &TRUNC).FLD800                                  02110000
.*                                                                      02120000
&P3C     SETC  '&SYSLIST(&I,3)'                                         02130000
&P3L     SETC  '248'                                                    02140000
         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308              02150000
&P3L     SETC  '249'                                                    02160000
         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308                02170000
&P3L     SETC  '250'                                                    02180000
         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308                02190000
&P3L     SETC  '251'                                                    02200000
         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308                02210000
&P3L     SETC  '252'                                                    02220000
         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308                02230000
&P3L     SETC  '253'                                                    02240000
         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308                02250000
&P3L     SETC  '0'                                                      02260000
         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310                         02270000
         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'       02280000
         AGO   .FLD310                                                  02290000
.FLD308  ANOP                                                           02300000
&$$FEAT(5) SETB 1                      JDATE                            02310000
         AGO   .FLD800                                                  02320000
.*--LOOP                                                                02330000
.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT                02340000
         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT                02350000
         AIF   ('&P3C'(1,1) NE 'L').FLD311                              02360000
&LEFT    SETB  1                                                        02370000
         AGO   .FLD318                                                  02380000
.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312                              02390000
&ZERO    SETB  1                                                        02400000
         AGO   .FLD318                                                  02410000
.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993       nn in RnnB is not num  02420000
         AIF   ('&P3C'(1,1) GT '9').FLD993       nn in RnnB is not num  02430000
&P3L     SETC  '&P3L'.'&P3C'(1,1)                                       02440000
.FLD318  ANOP                                                           02450000
.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'                          02460000
&P3C     SETC  '&P3C '(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER        02470001
         AIF   (K'&P3C GT 0).FLD310                                     02480000
.*--ENDLOOP                                                             02490000
         AIF   (&P3L GT 16).FLD993               nn in RnnB is too big  02500000
.*--------------------------------------------------------------------* 02510000
.FLD800  ANOP                                                           02520000
&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))                 02530000
&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))                     02540000
&LEFT    SETB  (&LEFT AND &NUMERIC)                                     02550000
         AIF   (NOT &NUMERIC).FLD810                                    02560000
         AIF   (&LEFT OR '&P3L' NE '0').FLD810                          02570000
&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))     02580000
         AIF   (&REG).FLD810                                            02590000
&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH            02600000
         AIF   ('&P2C' EQ 'FL1').FLD810                                 02610000
&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH            02620000
         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810                02630000
&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH            02640000
.FLD810  ANOP                                                           02650000
&FLAG    SETA  &HEX*8+&BIN*4+&PACKED*2+&REG*1                           02660000
&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L                       02670000
&$$FEAT(2) SETB (&$$FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)    02680000
&$$FEAT(3) SETB (&$$FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)    02690000
&$$FEAT(4) SETB (&$$FEAT(4) OR &PACKED)               PACKED            02700000
&$$FEAT(6) SETB (&$$FEAT(6) OR &BIN)                  BINARY            02710000
&$$FEAT(7) SETB (&$$FEAT(7) OR (&HEX AND NOT &REG))   HEX               02720000
&$$FEAT(8) SETB (&$$FEAT(8) OR &NUMERIC)              BIN,PACKED        02730000
&$$FEAT(9) SETB (&$$FEAT(9) OR (&LEFT AND &NUMERIC))                    02740000
&$$FEAT(10) SETB (&$$FEAT(10) OR &ZERO)                                 02750000
&$$FEAT(11) SETB (&$$FEAT(11) OR &TRUNC)                                02760000
&BIN     SETB  0                    RESET FLAGS                         02770000
&HEX     SETB  0                    RESET FLAGS                         02780000
&REG     SETB  0                    RESET FLAGS                         02790000
&PACKED  SETB  0                    RESET FLAGS                         02800000
&LEFT    SETB  0                    RESET FLAGS                         02810000
&ZERO    SETB  0                    RESET FLAGS                         02820000
&TRUNC   SETB  0                    RESET FLAGS                         02830000
         AIF   (&FLAG GE 10).FLD995                                     02840000
         AIF   (&LAST).FLD816                                           02850000
         DC    X'0&FLAG',AL1(&LEN2),SL2(&P1S,&P2L)                      02860000
         AGO   .LIT99                                                   02870000
.FLD816  DC    X'8&FLAG',AL1(&LEN2),SL2(&P1S,&P2L),0S(0)                02880000
         AGO   .LIT99                                                   02890000
.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'                02900000
         AGO   .LIT99                                                   02910000
.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''    02920000
         AGO   .LIT99                                                   02930000
.FLD995  MNOTE 8,'Invalid Combination of Attributes: &SYSLIST(&I)'      02940000
         AGO   .LIT99                                                   02950000
.*--------------------------------------------------------------------* 02960000
.*------------ LITERALS ----------------------------------------------* 02970000
.*--------------------------------------------------------------------* 02980000
.LIT00   ANOP                                                           02990000
&LIT     SETC  'C&SYSLIST(&I)'                                          03000000
         AGO   .LIT09                                                   03010000
.LIT01   ANOP                                                           03020000
&LIT     SETC  '&SYSLIST(&I)'                                           03030000
.LIT09   ANOP                              calculate length of literal  03040000
&J       SETA  3                                                        03050000
&L       SETA  0                                                        03060000
         ACTR  K'&LIT+K'&LIT+100                                        03070000
         AIF   ('&LIT'(1,1) EQ 'X').LIT11X                              03080000
.*LOOP                                                                  03090000
.LIT11C AIF ('&LIT'(&J,1) NE '''' AND '&LIT'(&J,1) NE '&&'(1,1)).LIT12C 03100000
&J       SETA  &J+1                                                     03110000
.LIT12C  ANOP                                                           03120000
&J       SETA  &J+1                                                     03130000
&L       SETA  &L+1                                                     03140000
         AIF   (&J LT K'&LIT).LIT11C                                    03150000
.*ENDLOOP                                                               03160000
         AGO   .LIT15                                                   03170000
.*LOOP                                                                  03180000
.LIT11X  AIF   ('&LIT'(&J,1) EQ ',').LIT12X                             03190000
&L       SETA  &L+1                                                     03200000
.LIT12X  ANOP                                                           03210000
&J       SETA  &J+1                                                     03220000
         AIF   (&J LT K'&LIT).LIT11X                                    03230000
.*ENDLOOP                                                               03240000
&L       SETA  (&L+1)/2                                                 03250000
.LIT15   ANOP                               generate in-line literal    03260000
         AIF   (&L GT 5).LIT40                                          03270000
         AIF   (&LAST).LIT16                                            03280000
         DC    X'4&L',&LIT                                              03290001
         AGO   .LIT90                                                   03300000
.LIT16   DC    X'C&L',&LIT,0S(0)                                        03310000
         AGO   .LIT90                                                   03320000
.LIT40   ANOP                                  check literal table      03330000
         AIF   (&$$LIT EQ 0).LIT50                                      03340000
&N       SETA  1                                                        03350000
         ACTR  &$$LIT*3+200                                             03360000
.LIT41   AIF   ('&LIT' EQ '&$$LITS(&N)').LIT80       LOOP               03370000
&N       SETA  &N+1                                  LOOP               03380000
         AIF   (&N LE &$$LIT).LIT41                  LOOP               03390000
.LIT50   ANOP                                                           03400000
&$$LIT   SETA  &$$LIT+1                                                 03410000
&$$LITS(&$$LIT) SETC '&LIT'                                             03420000
&N       SETA  &$$LIT                                                   03430000
.LIT80   ANOP                               generate remote literal     03440000
&N       SETA  &N+1000                                                  03450000
         AIF   (&LAST).LIT86                                            03460000
         DC    X'40',AL1(&L),AL2($LIT&N-*)                              03470001
         AGO   .LIT90                                                   03480000
.LIT86   DC    X'C0',AL1(&L),AL2($LIT&N-*),0S(0)                        03490001
.LIT90   ANOP                                                           03500000
&$$FEAT(1) SETB 1                      LITERAL                          03510000
.LIT99   ANOP                                                           03520000
.*--------------------------------------------------------------------* 03530000
&I       SETA  1+&I                              LOOP                   03540000
         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP                   03550000
.*ENDLOOP                                                               03560000
&SYSECT  CSECT                                                          03570001
         AGO   .MEND                                                    03580000
.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'          03590000
         AGO   .MEND                                                    03600000
.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'                   03610000
         AGO   .MEND                                                    03620000
.********************************************************************** 03630000
.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           * 03640000
.********************************************************************** 03650000
.GENL    ANOP                                                           03660000
&ALLFEAT SETC  '&$$FEAT(1)&$$FEAT(2)&$$FEAT(3)&$$FEAT(4)'               03670000
&ALLFEAT SETC  '&ALLFEAT&$$FEAT(5)&$$FEAT(7)&$$FEAT(6)&$$FEAT(8)'       03680000
&ALLFEAT SETC  '&ALLFEAT&$$FEAT(9)&$$FEAT(10)&$$FEAT(11)&$$FEAT(12)'    03690000
&BLANKS  SETA  2                                                        03700001
         MNOTE *,'STRING R&MACVERS - FEATURES GENERATED: &ALLFEAT'      03710001
@STRING  CSECT                                                          03720001
         AIF   (&$$LIT EQ 0).GENL3                                      03730000
.GENL2   ANOP                                LOOP                       03740000
&N       SETA  &N+1                          LOOP                       03750000
&I       SETA  &N+1000                       LOOP                       03760000
$LIT&I   DC    &$$LITS(&N)                                              03770000
         AIF   (&N LT &$$LIT).GENL2          LOOP                       03780000
.GENL3   DC    0H'0'                                                    03790001
.********************************************************************** 03800000
.*                                                                    * 03810000
.*       STRING SUB-ROUTINE                                           * 03820000
.*                                                                    * 03830000
.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         * 03840000
.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         * 03850000
.*                                                                    * 03860000
.********************************************************************** 03870000
@00      EQU   0                       WORK REGISTER                    03880000
@01      EQU   1                       WORK REGISTER                    03890000
@02      EQU   2                       WORK REGISTER                    03900000
@03      EQU   3                       WORK REGISTER                    03910000
@04      EQU   4                       WORK REGISTER                    03920000
@05      EQU   5                       WORK REGISTER                    03930000
@06      EQU   6                       WORK REGISTER                    03940000
@13      EQU   13                      CALLER'S SAVE AREA               03950000
@14      EQU   14                      WORK REGISTER                    03960000
@15      EQU   15                      BASE REG                         03970000
         USING @STR002,@15                                              03980001
         USING @STRSAVE,@13                                             03990000
@STR002  B     @STR011                 BRANCH AROUND EYE-CATCHER        04000001
         DC    AL1(@STR003-*),C'@STRING/XF R&MACVERS &ALLFEAT',0H'0'    04010001
@STR003  DC    Y(@STR002-@STRING)      Offset to @STRING                04020001
@STR011  STM   @14,@06,12(@13)         Save caller's registers          04030001
         SLR   @06,@06                 R6=0                             04040000
         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST 1/2 OFFSET     04050000
         ALR   @06,@06                 PICK UP PARM-LIST OFFSET         04060000
         ALR   @06,@15                 R6 NOW POINTS TO PARM LIST       04070001
         SH    @06,@STR003             R6 NOW POINTS TO PARM LIST       04080001
         USING @STRSCON,@06                                             04090000
         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)        04100000
         BAL   @14,@STRS2A             GET ADDRESS IN R2                04120000
         LA    @04,0(,@02)             KEEP ADDRESS OF "INTO" FIELD     04130000
         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO     04140000
         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD 04150000
         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)       04160000
         BAL   @14,@STRS2A             GET LENGTH IN R2                 04170000
         LR    @05,@02                 KEEP LENGTH OF "INTO" FIELD      04180000
         CR    @05,@04                 END ADDRESS?                     04190000
         BL    @STR282                 NO, JUMP                         04200000
         SR    @05,@04                 CALCULATE LENGTH                 04210000
@STR282  ST    @04,8(,@13)             SAVE ADDRESS FOR LATER           04220000
.********************************************************************** 04230000
.*       MOVE FIELDS TO OUTPUT AREA                                   * 04240000
.********************************************************************** 04250000
         LA    @06,@STRNEXT            POINT TO 1ST FIELD DESC          04260000
         USING @STRPARM,@06                                             04270000
.*LOOP                                                                  04280000
@STR310  EQU   *                                                        04290000
         AIF   (NOT &$$FEAT(1)).FEAT1A                                  04300000
         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?               04310000
         BO    @STR372                 YES, JUMP                        04320000
.FEAT1A  ANOP                                                           04330000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(3)).FEAT23A              04340000
         TM    @STRFLAG,@STRREG        REGISTER?                        04350000
         BO    @STR323                 YES, JUMP                        04360000
.FEAT23A ANOP                                                           04370000
         AIF   (NOT &$$FEAT(12)).FEAT12A                                04380000
         CLI   @STRSCON,X'E0'          IS IT %TIME ?                    04390000
         BE    @STR378                 YES, JUMP                        04400000
.FEAT12A ANOP                                                           04410000
.*                                                                      04420000
.*       IT'S A FIELD (SCON)                                            04430000
.*                                                                      04440000
         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)       04450000
         BAL   @14,@STRS2A             GET LENGTH IN R2                 04460000
         AIF   (&$$FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)    04470000
         LTR   @03,@02                 KEEP/TEST LENGTH                 04480000
         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT         04490000
         AGO   .FEAT9E2                                                 04500000
.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH                 04510000
         BP    @STR313                 LENGTH POSITIVE, JUMP            04520000
         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?              04530000
         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK        04540000
@STR313  EQU   *                                                        04550000
.FEAT9E2 ANOP                                                           04560000
         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)        04570000
         BAL   @14,@STRS2A             GET ADDRESS IN R2                04580000
         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO     04590000
         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD 04600000
         CR    @03,@02                 END ADDRESS?                     04610000
         BL    @STR314                 NO, JUMP                         04620000
         LA    @00,X'0080'             PSA ADDRESS                      04630000
         CLR   @02,@00                 PSA REFERENCE?                   04640000
         BL    @STR314                 YES, JUMP                        04650000
         SR    @03,@02                 CALCULATE LENGTH                 04660000
@STR314  EQU   *                                                        04670000
         AIF   (NOT &$$FEAT(6)).FEAT6A                                  04680000
         TM    @STRFLAG,@STRBIN        BINARY FIELD?                    04690000
         BO    @STR328                 YES, JUMP                        04700000
.FEAT6A  ANOP                                                           04710000
         AIF   (NOT &$$FEAT(4)).FEAT4A                                  04720000
         TM    @STRFLAG,@STRPACK       PACKED FIELD?                    04730000
         BO    @STR351                 YES, JUMP                        04740000
.FEAT4A  ANOP                                                           04750000
         AIF   (NOT &$$FEAT(7)).FEAT7A                                  04760000
         TM    @STRFLAG,@STRHEX        EDIT IN HEX?                     04770000
         BO    @STR376                 YES, JUMP                        04780000
.FEAT7A  ANOP                                                           04790000
.*                                                                      04800000
.*       TRUNCATE CHARACTER STRING                                      04810000
.*                                                                      04820000
         AIF   (NOT &$$FEAT(11)).FEAT11A                                04830000
         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN  04840000
         BNE   @STR390                 NO STRING TRUNCATION, JUMP       04850000
         LA    @01,0(@03,@02)          FIRST BYTE AFTER FIELD           04860000
@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP 04870000
         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP 04880000
         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP 04890000
         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP 04900000
         B     @STR398                 BLANK FIELD, DO NOT EDIT         04910000
         AGO   .FEAT11B                                                 04920000
.FEAT11A ANOP                                                           04930000
         AIF (&$$FEAT(2)+&$$FEAT(3)+&$$FEAT(4)+&$$FEAT(6) EQ 0).FEAT11B 04940000
         B     @STR390                 EDIT                             04950000
.FEAT11B ANOP                                                           04960000
.*                                                                      04970000
.*       REGISTER (R0-R13)                                              04980000
.*                                                                      04990000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(3)).FEAT23B              05000000
@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT              05010000
@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31         05020000
         EX    @01,@STR323L            COPY R7-R13 INTO R0              05030000
         CLI   @STRSCON+1,@06+1        IS THIS R7-R13?                  05040000
         BNL   @STR323T                YES, JUMP                        05050000
         SLL   @01,2                   R1= 000000BB BASE * 4            05060000
         L     @00,20(@01,@13)         PICK UP VALUE FOR R0-R6          05070000
@STR323T EQU   *                                                        05080000
         AIF   (NOT &$$FEAT(3)).FEAT3R REG,HEX                          05090000
         AIF   (NOT &$$FEAT(2)).FEAT2H REG,BIN                          05100000
         TM    @STRFLAG,@STRHEX        EDIT IN HEX?                     05110000
         BNO   @STR330                 NO, EDIT FWD                     05120000
.FEAT2H  ANOP                                                           05130000
         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK            05140000
         LA    @03,8                   OUTPUT LENGTH                    05150000
         B     @STR376X                EDIT IN HEX                      05160000
.FEAT3R  ANOP                                                           05170000
         AIF   (NOT &$$FEAT(6)).FEAT23B                                 05180000
         B     @STR330                 EDIT R0                          05190000
.FEAT23B ANOP                                                           05200000
.*                                                                      05210000
.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)           05220000
.*                                                                      05230000
         AIF   (NOT &$$FEAT(6)).FEAT6B                                  05240000
@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**         05250000
@STR328  SLR   @00,@00                                                  05260000
         EX    @03,@STR328M            LOAD THE BINARY VARIABLE         05270000
.FEAT6B  ANOP                                                           05280000
.*                                                                      05290000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(6)).FEAT6C               05300000
@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL         05310000
         AIF   (NOT &$$FEAT(4)).FEAT6C                                  05320000
         B     @STR361                 EDIT DWD                         05330000
.FEAT6C  ANOP                                                           05340000
.*                                                                      05350000
.*       PACKED FIELD                                                   05360000
.*                                                                      05370000
         AIF   (NOT &$$FEAT(4)).FEAT4B                                  05380000
@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD                  05390000
@STR351  LA    @03,0(,@02)             FIRST BYTE OF PACKED FIELD       05400000
         BALR  @14,0                                                    05410000
         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?           05420000
         LA    @03,1(,@03)              (NEXT BYTE)                     05430000
         BNOR  @14                     NO, LOOP MORE                    05440000
         SLR   @03,@02                 GET LENGTH OF PACKED FIELD       05450000
         BCTR  @03,0                                                    05460000
         EX    @03,@STRZAP             EXECUTE ZAP                      05470000
         AIF   (NOT &$$FEAT(5)).FEAT4B                                  05480000
         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?           05490000
         BNL   @STR375                 YES, JUMP                        05500000
.FEAT4B  ANOP                          PACKED                           05510000
.*                                                                      05520000
.*       EDIT @STRDWD (BIN, REG, PACKED)                                05530000
.*                                                                      05540000
         AIF   (NOT &$$FEAT(8)).FEAT8B                                  05550000
@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH                    05560000
         LA    @03,X'003F'             MASK FOR "AND"                   05570000
         NR    @03,@00                 OUTPUT LENGTH                    05580000
         MVC   @STRWK16(16),@STRMASK   EDIT MASK                        05590000
.*                                                                      05600000
.*       LEFT-JUSTIFICATION (NUMERIC)                                   05610000
.*                                                                      05620000
         AIF   (NOT &$$FEAT(9)).FEAT9B                                  05630000
         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?              05640000
         BNO   @STR367                 NO, JUMP                         05650000
         LA    @01,@STRWK16+15         PREVENT BAD R1                   05660000
         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL                    05670000
         LA    @02,0(,@01)             FIRST STRING POSITION            05680000
         LTR   @03,@03                 CHECK OUTPUT LENGTH              05690000
         BNZ   @STR363                 JUMP IF NOT ZERO                 05700000
.*       L0    (LEFT JUSTIFIED, NO PADDING)                             05710000
         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING      05720000
         SR    @03,@02                 COMPUTE STRING LENGTH            05730000
         B     @STR390                 MOVE FIELD TO OUTPUT LINE        05740000
.*       L1-L63 (LEFT JUSTIFIED, PADDING)                               05750000
@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN  05760000
         BNH   @STR364                 LARGE ENOUGH, JUMP               05770000
         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.   05780000
@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH         05790000
         LR    @00,@04                 POINTER IN OUTPUT LINE           05800000
         LR    @01,@03                 LENGTH WITH PADDING              05810000
         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING      05820000
         SR    @03,@02                 COMPUTE STRING LENGTH            05830000
         B     @STR392                 MOVE FIELD TO OUTPUT LINE        05840000
@STR367  EQU   *                                                        05850000
.FEAT9B  ANOP                                                           05860000
         AIF   (NOT &$$FEAT(10)).FEAT10B                                05870000
         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?            05880000
         BNO   @STR368                 NO, JUMP                         05890000
         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'        05900000
@STR368  EQU   *                                                        05910000
.FEAT10B ANOP                                                           05920000
         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL                    05930000
         LA    @02,@STRWK16+16         FIRST POSITION AFTER STRING      05940000
         SR    @02,@03                 FIRST STRING POSITION            05950000
.FEAT8B  ANOP                                                           05970000
.*                                                                      05980000
.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)                          05990000
.*       Short Literal (low-order 4 bits of @STRFLAG contains length)   06000000
.*       BLANKS  (@STRSCON=ZERO)                                        06010000
.*                                                                      06020000
         AIF   (NOT &$$FEAT(1)).FEAT1B                                  06030000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06040000
@STR372  LA    @01,7                   mask for NR                      06050000
         LA    @02,@STRLEN2            1st byte of short literal        06060000
         IC    @03,@STRFLAG            pick up flags+length             06070000
         NR    @03,@01                 R3 has length of short literal   06080000
         BNZ   @STR390                 short literal, go move it        06090000
         SLR   @02,@02                 Clear Address Register           06100000
         IC    @03,@STRLEN2            GET LITERAL LENGTH               06110000
         TM    @STRFLAG,@STRX40        string of spaces?                06120000
         BO    @STR390                 yes, go move them                06130000
         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET              06140000
         LA    @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS   06150000
.FEAT1B  ANOP                                                           06160000
.*                                                                      06170000
.*       CONVERT JULIAN DATE TO YYMMDD                                  06180000
.*                                                                      06190000
         AIF   (NOT &$$FEAT(5)).FEAT5F                                  06200000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06210000
@STR375  LA    @00,248                 MASK FOR 'SLR'                   06220000
         SLR   @01,@01                                                  06230000
         IC    @01,@STRLEN2            248-255                          06240000
         SLR   @01,@00                 000-007                          06250000
         LA    @00,12                  L'@STR375W                       06260000
         MR    @00,@00                 COMPUTE OFFSET                   06270000
         LA    @01,@STR375W(@01)       ENTRY IN "TR" MASK TABLE         06280000
         SLR   @03,@03                                                  06290000
         IC    @03,0(,@01)             LENGTH OF DATE (6, 8 OR 10)      06300000
         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT 06310000
         BNZ   @STR375B                NO, JUMP                    @JDT 06320000
@STR375Z LA    @02,@BLANKS             WORK AREA                        06330001
&BLANKS  SETA  10                      WE NEED AT LEAST 10 BLANKS       06340001
         B     @STR390                 MOVE FIELD TO OUTPUT LINE        06350000
@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248        06360000
         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249        06370000
         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250        06380000
         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251        06390000
         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252        06400000
         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253        06410000
.*       DC    AL1(6,C' ',6,7,4,5,2,3,8,8,8,8)  DDMMYY       254        06420000
.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255        06430000
@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'                06440000
         DC    P'999'                  Prevent S0C7 with 90366          06450000
@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?              06460000
         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)   06470000
         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20           06480000
         BE    @STR375C                CC=01, USE CC=20                 06490000
         CLI   @STRDWD+4+1,X'50'       YY<50?                           06500000
         BL    @STR375C                YES, USE CC=20                   06510000
         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19                  06520000
@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?                           06530000
         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER            06540000
         LA    @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS) 06550000
         TM    @STRDWD+4+1,X'01'       ODD YEARS                        06560000
         BO    @STR375N                  AREN'T LEAP YEARS              06570000
         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992 06580000
         BNM   @STR375L                MIXED IN 1982/1990               06590000
.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD          06600000
@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?    06610000
         BNH   @STR375L                NO, JUMP                         06620000
         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD      06630000
.*--LOOP WHILE DDD > 0                                                  06640000
@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH    06650000
         LA    @02,2(,@02)             NEXT ENTRY IN "MONTHS" TABLE     06660000
         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD       06670000
         BP    @STR375L                                                 06680000
.*--ENDLOOP                                                             06690000
         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST "SP" INSTRUCTION       06700000
         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??               06710000
         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD             06720000
         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD             06730000
         MVC   @STRWK16+8(1),1(@01)    SEPARATOR                        06740000
         LA    @02,@STRWK16+9          WORK AREA                        06750000
         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK          06760000
         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT 06770000
.FEAT5F  ANOP                          JDATE                            06780000
.*                                                                      06790000
.*       HEX STRING                                                     06800000
.*                                                                      06810000
         AIF   (NOT &$$FEAT(7)).FEAT7B                                  06820000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06830000
@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK             06840000
@STR376  LA    @00,8                   MAX LENGTH                       06850000
         CLR   @03,@00                 CHECK LENGTH                     06860000
         BNH   @STR376B                JUMP IF LE 8                     06870000
         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH       06880000
@STR376B LR    @01,@03                 INPUT LENGTH                     06890000
         BCTR  @01,0                                                    06900000
         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE        06910000
         ALR   @03,@03                 OUTPUT LENGTH                    06920000
         AGO   .FEAT37B                                                 06930000
.FEAT7B  ANOP                                                           06940000
         AIF   (NOT &$$FEAT(3)).FEAT37C                                 06950000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06960000
.FEAT37B ANOP                                                           06970000
@STR376X LA    @02,@STRWK16            WORK AREA                        06980000
         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR "TR"     06990000
         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR "TR"     07000000
         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'             07010000
.FEAT37C ANOP                                                           07020000
.*                                                                      07030000
.*       %TIME                                                          07040000
.*                                                                      07050000
         AIF   (NOT &$$FEAT(12)).FEAT12B                                07060000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       07070000
@STRTIME DC    X'4021207A20207A20207A20204000'    0X.XX.XX.XX           07080000
@STR378  LR    @02,@15                 SAVE BASE REG                    07090000
         TIME  DEC                     GET HHMMSSHH                     07100000
         LR    @15,@02                 RESTORE BASE REG                 07110000
         ST    @00,@STRDWD             STORE HHMMSSHH                   07120000
         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK                   07130000
         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS:HH                 07140000
         LA    @02,@STRWK16+1          WORK AREA                        07150000
         LA    @03,12                  HH:MM:SS:HH+ SPACE               07160000
.FEAT12B ANOP                                                           07170000
.*MOVE                                                                  07180000
@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN  07190000
         BNH   @STR391                 LARGE ENOUGH, JUMP               07200000
         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.   07210000
@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH         07220000
         LR    @00,@04                 POINTER IN OUTPUT LINE           07230000
         LR    @01,@03                 PASS REMAINING LENGTH            07240000
         LTR   @02,@02                 BLANKS?                          07250000
         BNZ   @STR392                 NO, JUMP                         07260000
         SLR   @03,@03                 YES, ZERO LENGTH                 07270000
@STR392  ICM   @03,B'1000',@BLANKS     PAD WITH BLANKS                  07280001
         MVCL  @00,@02                 MOVE FIELD TO OUTPUT LINE        07290000
         LR    @04,@00                 NEW POINTER IN OUTPUT LINE       07300000
@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR        07310000
         BO    @STR399                 Done, exit                       07320000
         AIF   (NOT &$$FEAT(1)).FEAT1C                                  07330000
         TM    @STRFLAG,@STRLIT+@STRX40 literal or spaces?              07340000
         BM    @STR398L                Literal, not spaces              07350000
         BZ    @STR398X                Neither literal nor spaces       07360000
         LA    @06,@STRSCON            2-byte entry for blank spaces    07370000
         B     @STR310                 PROCESS NEXT ENTRY               07380000
@STR398L LA    @01,7                   mask for NR                      07390000
         IC    @03,@STRFLAG            pick up flags+length             07400000
         NR    @03,@01                 R3 has length of short literal   07410000
         BZ    @STR398T                not an in-line literal, jump     07420000
         LA    @06,@STRLEN2(@03)       Skip VL parm for in-line literal 07430000
         B     @STR310                 PROCESS NEXT ENTRY               07440000
@STR398T LA    @06,@STRFLEN            4-byte parm for remote literal   07450000
         B     @STR310                 PROCESS NEXT ENTRY               07460000
.FEAT1C  ANOP                                                           07470000
@STR398X LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY            07480000
         B     @STR310                 PROCESS NEXT ENTRY               07490000
.*ENDLOOP                                                               07500000
.*                                                                      07510000
.*       END-OF-LINE PROCESSING - PAD WITH BLANKS                       07520000
.*                                                                      07530000
@STR399  SLR   @01,@01                 SET UP R1 FOR PADDING            07540000
         ICM   @01,B'1000',@BLANKS     SET UP R1 FOR PADDING            07550001
.***     DROP  @06,@13,@15                                              07560000
         LA    @14,2                   INCREMENT                        07570000
         AL    @14,12(,@13)            RETURN ADDRESS                   07580000
         LR    @15,@04                 CURRENT POINTER IN OUTPUT FIELD  07590000
         SL    @15,8(,@13)             CALCULATE LENGTH USED            07600000
         MVCL  @04,@00                 PAD WITH BLANKS                  07610000
         LM    @00,@06,20(@13)         RESTORE WORK REGISTERS           07620000
         STM   @06+1,@13-1,48(@13)     MAKE SAVE AREA LOOK NORMAL       07630000
         OI    15(@13),1               SIMULATE "T" OPTION OF RETURN    07640000
         BR    @14                     RETURN TO CALLER                 07650000
.*                                                                      07660000
         AIF   (NOT (&$$FEAT(3) OR &$$FEAT(7))).FEAT37T                 07670000
@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION         07680000
.FEAT37T ANOP                                                           07690000
         AIF   (NOT &$$FEAT(8)).FEAT8T                                  07700000
@STRMASK DC    X'4020202020202020,2020202020202120'                     07710000
.FEAT8T  ANOP                                                           07720000
.********************************************************************** 07730000
.*       Convert S-con to address                                     * 07740000
.*             Input: GPR2 points to an S-CON in the remote parm list * 07750000
.*             Output: GPR2 contains the address                      * 07760000
.********************************************************************** 07770000
@STRS2A  SLR   @00,@00                                                  07780000
         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD                    07790000
         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....      07810000
         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)     07820000
         CLI   0(@02),@06*16+15        R7-R13?                          07830000
         BH    @STRS2A3                YES, JUMP                        07840000
.*BASE REG IS R0-R6                                                     07850000
         LTR   @02,@00                 IS R0 THE BASE REG?              07860000
         BNZ   @STRS2A2                NO, JUMP                         07870000
         LTR   @02,@01                 IS THIS A PSA ADDRESS?           07880000
         BNZR  @14                     YES, GOBACK                      07890000
@STRS2A2 SLL   @02,2                   R2= 000000BB BASE * 4            07900000
         L     @02,20(@02,@13)         PICK UP BASE REG VALUE           07910000
         LA    @02,0(@02,@01)          ADD BASE REG VALUE TO DISPL      07920000
         BR    @14                                                      07930000
.*BASE REG IS R7-R13                                                    07940000
@STRS2A3 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)   07950000
         EX    @02,@STRS2A4            ADD BASE REG VALUE TO DISPL      07960000
         BR    @14                                                      07970000
@STRS2A4 LA    @02,0(*-*,@01)          ADD BASE REG VALUE TO DISPL      07980000
@BLANKS  DC    CL((((*+&BLANKS+7-@STRING)/8)*8)-(*-@STRING))' '         07990001
@STRSIZE EQU   *-@STRING               SIZE OF GENERATED CSECT          08000001
         DROP  @06,@13,@15                                              08010000
.********************************************************************** 08020000
.*       WORK AREA (CALLER'S SAVE AREA)                               * 08030000
.********************************************************************** 08040000
@STRSAVE DSECT                         24-BYTE WORK AREA                08050000
         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)               08060000
@STRWK16 DS    F'7,8,9,10'             WORK AREA                        08070000
@STRDWD  DS    D'1112'                 WORK AREA                        08080000
@STRPARM DSECT                                                          08090000
@STRFLAG DS    B                   +0  FORMAT, FLAGS                    08100000
@STRLAST EQU   X'80'                     LAST ENTRY                     08110000
@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET 08120000
@STRX40  EQU   X'20'                   String of Spaces                 08130000
.*             X'0F'                   CONVERSION REQUIRED              08140000
.*                                     or length of short literal       08150000
@STRHEX  EQU   X'08'                     HEXADECIMAL                    08160000
@STRBIN  EQU   X'04'                     BINARY                         08170000
@STRPACK EQU   X'02'                     PACKED                         08180000
@STRREG  EQU   X'01'                     REGISTER                       08190000
@STRLEN2 DS    B                   +1  FORMAT, OUTPUT LENGTH            08200000
.*                                     or start of short literal        08210000
@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION             08220000
@STRZERO EQU   X'40'                     LEADING ZEROES                 08230000
.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.  08240000
@STRSCON DS    S                   +2  FIELD ADDRESS                    08250000
@STRFLEN DS    S                   +4  FIELD LENGTH                     08260000
@STRNEXT EQU   *                   +6                                   08270000
.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99                             08280000
         POP   PRINT                                                    08290000
.MEND99  MEND                                                           08300000
         EJECT                                                          08310000
**********************************************************************  08320000
**********************************************************************  08330000
********* TEST PROGRAM FOR THE 'STRING' MACRO ************************  08340000
**********************************************************************  08350000
**********************************************************************  08360000
         MACRO                                            JDATE MACRO   08370001
        @JDATE &DATE                                      JDATE MACRO   08380001
         LA    R1,=P'&DATE'                               JDATE MACRO   08390001
*** STRING ((R1),P),2X,((R1),P),INTO=XXX                  JDATE MACRO   08400001
         STRING ((R1),P),2X,((R1),P,YYMMDD),INTO=XXX,     JDATE MACRO  X08410001
               3X,((R1),P,YY/MM/DD),                      JDATE MACRO  X08420001
               3X,((R1),P,DD/MM/YY),                      JDATE MACRO  X08430001
               3X,((R1),P,MM/DD/YY),                      JDATE MACRO  X08440001
               3X,((R1),P,YYYYMMDD),                      JDATE MACRO  X08450001
               3X,((R1),P,YYYY-MM-DD)                     JDATE MACRO   08460001
         PUT   SYSPRINT,XXX                               JDATE MACRO   08470001
         MEND                                             JDATE MACRO   08480001
**********************************************************************  08490001
         LCLC  &SYSVER,&SYSDATC                                         08500001
&SYSVER  SETC  'XF'                                                     08510001
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)       08520000
TESTPGM  START X'015000'                                                08530001
         BALR  R12,0                                                    08540000
         USING *,R12                                                    08550000
*LOAD EP=SYSDEBUG                                                       08560001
*LR R15,R0                                                              08570001
*BASSM R14,R15                                                          08580001
*STRING 1X,INTO=XXX                                                     08590000
*RC8     STRING ((R1),,R**B),((R1),,R22Z),((R1),,R16B),INTO=XXX         08600000
         OPEN  (SYSPRINT,OUTPUT)                                        08610000
         STRING 'Assembler is &SYSVER, DATE is &SYSDATC',INTO=XXX       08620000
         PUT   SYSPRINT,XXX                                             08630000
         STRING 'AMPERSAND=&& AND APOSTROPHE='' ',INTO=XXX              08640000
         PUT   SYSPRINT,XXX                                             08650000
RBPREFIX EQU   *                                                        08660000
RBINTCOD EQU   *+6,2,C'H'                                               08670000
         L     R1,PSATOLD-PSA(0,0)                                      08680000
         L     R1,0(,R1)               TCBRBP                           08690000
         L     R2,PSAAOLD-PSA(0,0)     ASCB                             08700000
         STRING 'SVC',(RBINTCOD-RBPREFIX(R1),H,R3Z),                   X08710000
               1X,(WWWW,,T),' - ',     VV.MM OF SVC RTNE               X08720000
               ((R8),,X),1X,           COM-REG ADDR                    X08730000
               'ASID=',(ASCBASID-ASCB(R2),,X),1X,                      X08740001
               PARM1,1X,               MAIN PGM NAME                   X08750000
               INTO=XXX                                                 08760000
         PUT   SYSPRINT,XXX                                             08770000
*                                                                       08780000
         LA    R2,XXX                                                   08790000
         STRING 1X,INTO=((R2),8)                                        08800000
        @JDATE 90058                                                    08810000
        @JDATE 91059                                                    08820000
        @JDATE 93060                                                    08830000
        @JDATE 94365                                                    08840000
        @JDATE 80058                                                    08850000
        @JDATE 84059                                                    08860000
        @JDATE 88060                                                    08870000
        @JDATE 92061                                                    08880000
        @JDATE 00366                                                    08890000
         LA    R2,1234                                                  08900000
         STRING 'CVTPTR=X''',(CVTPTR,4,X),'''',INTO=XXX,               X08910000
               ' 1234=',((R2),,R4Z)                                     08920000
         PUT   SYSPRINT,XXX                                             08930000
         L     R1,CVTPTR(0,0)                                           08940000
         STRING 'CVTDATE=',(56(R1),P,YYMMDD),INTO=XXX                   08950000
         PUT   SYSPRINT,XXX                                             08960000
         LA    R0,1000                                                  08970000
         LA    R3,0033                                                  08980000
         STRING 'D1=/',D1,'/,WWWW=/',WWWW,'/',                         X08990000
               ((R3),,L),'/',((R3),,X),'/',((R0),,L),'/',              X09000000
               ((R3),,R9B),'/',INTO=XXX                                 09010000
         LR    R4,R15                   LENGTH USED                     09020000
         PUT   SYSPRINT,XXX                                             09030000
         STRING WWWW,                                                  X09040000
               (4(R13),4,X),'''',(4(R13),F),'''',                      X09050000
               (4(R13),F,L),'''',                                      X09060000
               (4(R13),F,L11),'''',                                    X09070000
               (4(R13),F,Z9),'''',                                     X09080000
               8X,'R4=',((R4),,L),      LENGTH USED                    X09090000
               INTO=XXX                                                 09100000
         PUT   SYSPRINT,XXX                                             09110000
         STRING %TIME,D1,'B12345678B',5X,(CTR1,P),1X,PARM1,1X,PARM2,   X09120000
               INTO=XXX                                                 09130000
         PUT   SYSPRINT,XXX                                             09140000
         LA    R3,17                                                    09150001
         STRING INTO=XXX,'CCC1234A',(D1,(R3)),'.',(CTR1,P,R7Z)          09160000
         PUT   SYSPRINT,XXX                                             09170000
         STRING C'DDN2(',(D1,,T),')',X'40C1C2,C3C4',                   +09180000
               ' PSATOLD=',(PSATOLD-PSA,,X),                           +09190000
               INTO=XXX                                                 09200000
         PUT   SYSPRINT,XXX                                             09210000
         BALR  R0,0                                                     09220000
         STRING 'R0=',((R0),,X),'   16(R0)=',(16(R0),4,X),INTO=XXX      09230000
         PUT   SYSPRINT,XXX                                             09240000
         STRING 'R0=',((R0),,X),'   CTR1=',(CTR1,P,R5B),INTO=XXX        09250000
         PUT   SYSPRINT,XXX                                             09260000
         SLR   R0,R0                                                    09270000
         STRING 'R0=',((R0),,X),'   CTR1=',(CTR1,P,R5B),INTO=XXX        09280000
         PUT   SYSPRINT,XXX                                             09290000
*                                                                       09300000
EXIT     SLR   R15,R15                                                  09310000
         SVC   3                       GOBACK                           09320000
D1       DC    C'D1-----D1    '                                         09330000
WWWW     DC    C'WWWW'                                                  09340000
CTR1     DC    P'1'                                                     09350000
PARM1    DC    C'<-PARM1->'                                             09360000
PARM2    DC    C'<-PARM2->'                                             09370000
XXX      DS    CL132                                                    09380000
CVTPTR   EQU   0016,4,C'A'                                              09390000
SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=121     09400000
         STRING GENERATE                                                09410000
R0       EQU   0                                                        09420001
R1       EQU   1                                                        09430001
R2       EQU   2                                                        09440001
R3       EQU   3                                                        09450001
R4       EQU   4                                                        09460001
R5       EQU   5                                                        09470001
R6       EQU   6                                                        09480001
R7       EQU   7                                                        09490001
R8       EQU   8                                                        09500001
R9       EQU   9                                                        09510001
R10      EQU   10                                                       09520001
R11      EQU   11                                                       09530001
R12      EQU   12                                                       09540001
R13      EQU   13                                                       09550001
R14      EQU   14                                                       09560001
R15      EQU   15                                                       09570001
PSA      DSECT                                                          09580000
PSATOLD  EQU   *+X'21C',4,C'A'                                          09590000
PSAAOLD  EQU   *+X'224',4,C'A'                                          09600000
ASCB     DSECT                                                          09610000
ASCBASID EQU   *+36,2,C'X'                                              09620000
         END                                                            09630000
//SYSPRINT DD SYSOUT=*                                                  09640000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  09670000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    09680000
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,2)                                    09690001
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,2)                                    09700001
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      09710001
//*                                                                     09720000
//GO      EXEC PGM=LOADER,PARM=PRINT,TIME=(,2)                          09730000
//SYSLIN   DD DSN=*.XFASM.SYSGO,DISP=(OLD,DELETE)                       09740001
//SYSLOUT  DD SYSOUT=*                                                  09750000
//SYSPRINT DD SYSOUT=*                                                  09760000
//ABNLTERM DD SYSOUT=*                                                  09770000
//ABNLIGNR DD DUMMY                                                     09780000
//SYSDEBUG DD SYSOUT=*                                                  09790000
//SYSUDUMP DD SYSOUT=*                                                  09800000
                                                                        09810000
          +----------------------------------------+                    09820000
          +                                        +                    09830000
          +  Documentation for the STRINGXF macro  +                    09840001
          +                                        +                    09850000
          +       Last update: 30 July 2006        +                    09860001
          +                                        +                    09870001
          +----------------------------------------+                    09880000
                                                                        09890000
  The STRING macro is functionally similar to the COBOL DISPLAY         09900000
  or PL/I PUT EDIT instructions.                                        09910000
                                                                        09920000
  Using STRING, the assembler programmer can concatenate                09930000
  any number of fields, edit each of them if necessary,                 09940000
  and receive the result in the specified work area.                    09950000
                                                                        09960000
  Formats:                                                              09970000
                                                                        09980000
    (1) label  STRING {field_specification1}                            09990000
                      {,field_specification2}...                        10000000
                      ,INTO=workarea|(workarea,length)                  10010000
                      {,PRINT=GEN|NOGEN}                                10020000
                                                                        10030000
    (2) label  STRING GENERATE                                          10040000
                      {,PRINT=GEN|NOGEN}                                10050000
                                                                        10060000
                                                                        10070000
  field_specification                                                   10080000
                                                                        10090000
    Each field to be printed is described as a positional               10100000
    operand.  Each operand specifies the field address, its             10110000
    length, and its formatting requirements.                            10120000
                                                                        10130000
    Four field description formats are supported:                       10140000
                                                                        10150000
      1.   symbol                                                       10160000
      2.   (symbol,length,format)                                       10170000
      3.   (d(r)|(r),length,format)                                     10180000
      4.   ((r),,format)                                                10190000
      5.   'character string'                                           10200000
                                                                        10210000
  Symbol specifies the field address.  It must be an                    10220000
    S-type (relocatable) address.                                       10230000
                                                                        10240000
  d(r) may be used to specify the field address in S/370                10250000
    base-displacement format.  If d is zero, it may be omitted.         10260000
    If d(r) or (r) is used, length must also be specified.  R14         10270000
    and R15 may not be used.  If d(0) is used, it is handled the        10280000
    way the assembler does, i.e. R0 as a base register is assumed       10290000
    to contain zero: 16(0) is equivalent to 16, CVTPTR or, X'10'.       10300000
                                                                        10310000
  ((r),,format) specifies that (r) contains the value                   10320000
    itself, not an address.  R14 and R15 may not be used.               10330000
                                                                        10340000
  'character string' specifies a literal enclosed in single quotes      10350000
    as specified in a DC instruction.  Hex strings or character         10360000
    strings are supported.  The following expressions are equivalent:   10370000
    'ABC' C'ABC' X'C1C2C3'                                              10380000
                                                                        10390000
  Length specifies the length and/or the type of the input field.       10400000
    It may be specified as an integer, a symbol, a register, or a       10410000
    constant.  When used with symbol, it overrides the assembled        10420000
    length and/or type.  Length is required if field is specified       10430000
    as d(r) or (r).  If a zero length is specified, the field is        10440000
    ignored.                                                            10450000
                                                                        10460000
        nn   field length in bytes                                      10470000
        H    half-word                                                  10480000
        F    full-word                                                  10490000
        FL1  1-byte binary integer                                      10500000
        FL3  3-byte binary integer                                      10510000
        P    packed field                                               10520000
        (r)  length of character string (R0 thru R12)                   10530000
        d(r) length of character string (R1 thru R12)                   10540000
                                                                        10550000
  Notes:  If the field address is specified as a symbol that            10560000
          has been defined previously in the program, the symbol        10570000
          type is known and there is no need to specify it.             10580000
                                                                        10590000
          If the length is specified as (r) or d(r) and the value       10600000
          is greater than the address itself, (r) or d(r) is            10610000
          considered to be the end address +1 instead of the length.    10620000
                                                                        10630000
          The length is not specified for packed fields.  The           10640000
          @STRING subroutine scans the field left-to-right until it     10650000
          finds a byte with a valid sign in the low-order 4 bits.       10660000
                                                                        10670000
          If symbol is an arithmetic expression and no length is coded, 10680000
          the implicit length will be that of the first symbol in the   10690000
          expression;  for example, if symbol is coded as PSATOLD-PSA,  10700000
          then the implicit length will be L'PSATOLD.                   10710000
                                                                        10720000
          All numeric items are assumed positive.                       10730000
                                                                        10740000
  format  optionally indicates editing options that must                10750000
          be applied to a field.                                        10760000
                                                                        10770000
      L        left justified                                           10780000
      R        right justified                                          10790000
      nn       output length                                            10800000
      0        adjust length                                            10810000
      Z        leading zeroes                                           10820000
      B        leading/trailing blanks                                  10830000
      T        truncate character string after last non-blank           10840000
      X        display in hexadecimal                                   10850000
      YYMMDD   convert julian date to YYMMDD                            10860000
      YY/MM/DD convert julian date to YY/MM/DD                          10870000
      DD/MM/YY convert julian date to DD/MM/YY                          10880000
      MM/DD/YY convert julian date to MM/DD/YY                          10890000
      YYYYMMDD convert julian date to YYYYMMDD                          10900000
      YYYY-MM-DD convert julian date to YYYY-MM-DD                      10910000
                                                                        10920000
    The default format depends on the field type:                       10930000
                                                                        10940000
        Type                   Default Format                           10950000
                                                                        10960000
        character string             L                                  10970000
        FL1                          R3B                                10980000
        H or FL2                     R5B                                10990000
        other numeric fields         R7B                                11000000
                                                                        11010000
    Note: L0 and T are equivalent for character strings.                11020000
                                                                        11030000
  'character string' is any character string enclosed in                11040000
  single quotes.  Blank spaces may be specified as nnX,                 11050000
  where nn is the number of X'40' bytes you want to be                  11060000
  inserted in the output line.  %TIME may be specified to               11070000
  obtain the current time in hh.mm.ss.hh format.                        11080000
                                                                        11090000
INTO=workarea|(workarea,length)                                         11100000
                                                                        11110000
  INTO indicates the address and length of the output work area         11120000
  into which the result of the concatenation should be placed           11130000
  (left justified).  If the work area is too small, truncation          11140000
  will occur.  If it is too large, it is padded with blanks.            11150000
                                                                        11160000
  The address may be a symbol, d(r) (S-type address) or (r).            11170000
                                                                        11180000
  The length may be specified as an integer, a symbol, a register,      11190000
  or a constant; it is required if the address is coded as d(r) or      11200000
  (r).  If length is not specified for a symbol-type address, the       11210000
  assembled length of the symbol is used.                               11220000
                                                                        11230000
  Upon return from STRING, R15 contains the length actually used        11240000
  in the output work area (before padding).                             11250000
                                                                        11260000
PRINT=GEN|NOGEN                                                         11270000
                                                                        11280000
  This operand allows you to temporarily override the PRINT             11290000
  specification (GEN or NOGEN).                                         11300000
                                                                        11310000
GENERATE (format 2)                                                     11320000
                                                                        11330000
  The GENERATE format must be specified once at the end of the          11340000
  program.  It generates the @STRING sub-routine as well as all         11350000
  the literals specified in previous invocations of the macro.          11360000
                                                                        11370000
  The GENERATE format is specified as follows:                          11380001
                                                                        11390000
         STRING GENERATE                                                11400000
                                                                        11410000
Examples:                                                               11420000
                                                                        11430000
     STRING 'ERROR===>',LINE1,'<=== POS ',((R6),,L0),INTO=WORKAREA      11440000
                                                                        11450000
     STRING 8X,C'ERRORS FOUND: ',(ERRORS,,L0),INTO=((R7),44)            11460000
                                                                        11470000
     STRING 'CVT ADDR IS ',(CVTPTR,4,X),X'40C1C2C3C4',INTO=LINE         11480000
                                                                        11490000
     LA    R5,WORK+16              end addr +1                          11500000
     STRING 'R4=',((R4),,X),INTO=(WORK,(R5)),PRINT=GEN                  11510000
                                                                        11520000
     STRING '//JOBLIB DD DSN=',(DSN1,,T),',DISP=SHR',INTO=((R2),72)     11530000
                                                                        11540000
     PUT   SYSLIN                  PUT Locate                           11550000
     LH    R0,SYSLIN+82            LRECL                                11560000
     STRING '   NAME  ',(4(R3),8,T),'(R)',INTO=((R1),(R0))              11570000
                                                                        11580000
     STRING GENERATE         Generate literals and sub-routine          11590000
                                                                        11600000
                                                                        11610000
Programming Notes:                                                      11620000
                                                                        11630000
  A STRING macro generates only 8 bytes that need to be covered by      11640001
  base registers.  More code is generated at the beginning of the       11650001
  @STRING CSECT, but this code does not require addressability.         11660001
  This is particularly useful when STRING calls specify a large         11670001
  number of literals.                                                   11680001
                                                                        11690000
  Additionally, STRING does not use A-type constants (ACON), but        11700000
  S-type constants (SCON) which require symbols to be addressable       11710000
  at the point in the program where STRING is issued.                   11720000
                                                                        11730000
  While these addressing techniques reduce the number of base           11740000
  registers required to cover the program's code and make it easier     11750000
  to write reentrant programs, they will produce assembly errors in     11760000
  the following situations:                                             11770000
                                                                        11780000
  a.  the CSECT in which STRING is used is longer than 64K              11790001
                                                                        11800000
  b.  symbols are not addressable at the point in the program           11810001
      where STRING is issued                                            11820000
./ ADD NAME=SYSMOVE  0506-79086-06210-1355-00799-00435-00349-CBT472
//GILBERTM JOB (ACCT#),SYSMOVE,                                         00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00040006
*********************************************************************** 00060000
*                                                                     * 00070000
* MODULE NAME = SYSMOVE                                               * 00080003
*                                                                     * 00090000
* DESCRIPTIVE NAME = Unload a PDS in IEHMOVE format                   * 00100003
*                                                                     * 00110000
* FUNCTION = The SYSMOVE program unloads a PDS to a sequential        * 00120003
*        data set in IEHMOVE format.  The resulting data set          * 00130003
*        (which is DSORG=PS,RECFM=FB,LRECL=80) can be written to      * 00140003
*        disk or tape, and later used as input to IEHMOVE to          * 00150003
*        reload the original PDS.                                     * 00160003
*                                                                     * 00170000
* STATUS = R506                                                       * 00180006
*                                                                     * 00190000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00200004
*                                                                     * 00210000
* NOTES = SEE BELOW                                                   * 00220003
*                                                                     * 00230000
*    DEPENDENCIES = STRING Macro                                      * 00240004
*                                                                     * 00250000
*    AUTHORIZATION = NONE                                             * 00260003
*                                                                     * 00270000
*    RESTRICTIONS = NONE                                              * 00280003
*                                                                     * 00290000
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            * 00300003
*                                                                     * 00310000
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      * 00320003
*                IBM HIGH LEVEL ASSEMBLER/MVS                         * 00330003
*                                                                     * 00340000
*    MODULE SIZE = 4K                                                 * 00350003
*                                                                     * 00360000
*    ATTRIBUTES = REUSABLE, RMODE 24, AMODE 24,                       * 00370003
*                 PROBLEM STATE, KEY 8                                * 00380003
*                                                                     * 00390000
* OPERATION = See Below                                               * 00400003
*                                                                     * 00410000
*        Sample invocation JCL:                                       * 00420000
*                                                                     * 00430000
*            //UNLOAD EXEC PGM=SYSMOVE                                * 00440000
*            //SYSPRINT DD SYSOUT=*                                   * 00450000
*            //SYSUT1   DD DSN=INPUT.PDS,DISP=SHR                     * 00460000
*            //SYSUT2   DD DSN=OUTPUT.FLAT,DISP=(,CATLG),             * 00470000
*            // UNIT=SYSDA,SPACE=(TRK,(50,50),RLSE)                   * 00480000
*                                                                     * 00490000
*        Notes:                                                       * 00500000
*                                                                     * 00510000
*          1. SYSMOVE is fully compatible with SMS (which is not the  * 00520000
*             case with IEHMOVE).                                     * 00530000
*                                                                     * 00540000
*          2. SYSMOVE imposes no restriction on the BLKSIZE of SYSUT2 * 00550000
*             which can be any multiple of 80 you choose.  However,   * 00560000
*             in order for IEHMOVE to reload it successfully, the     * 00570000
*             BLKSIZE of the unloaded data set must be 800.           * 00580000
*                                                                     * 00590000
*          3. SYSMOVE does not support NOTE lists (as created by the  * 00600000
*             linkage editor for load-modules in overlay format).     * 00610000
*                                                                     * 00620000
*          4. SYSMOVE can unload a full PDS or a single member.       * 00630003
*             If you want to unload several PDS's and/or selected     * 00640003
*             members, use the merge/selection capabilities of        * 00650003
*             IEBCOPY to create a temporary PDS, then run SYSMOVE     * 00660003
*             to unload it.                                           * 00670003
*                                                                     * 00680000
*          5. SYSMOVE is a convenient way to distribute a PDS         * 00690003
*             via a network; see "usage notes", below.                * 00700003
*                                                                     * 00710000
*          6. SYSMOVE can be used recursively to distribute several   * 00720003
*             PDSs as a single FB/80 file: unload each PDS with       * 00730003
*             SYSMOVE into a temporary FB/80, unload the temporary    * 00740003
*             PDS with SYSMOVE, and ship the resulting sequential     * 00750003
*             data set.  The receiver can use IEBGENER to copy each   * 00760003
*             member to a sequential data set and feed it to          * 00770003
*             IEHMOVE to reload each of the initial PDSs.             * 00780003
*                                                                     * 00790000
*          7. unloaded PDS's in IEHMOVE format can be processed       * 00800003
*             in CMS with the TAPEMAC and TAPPDS commands.            * 00810001
*                                                                     * 00820000
*                                                                     * 00830000
* ABENDS:     U0013 OPEN Failed, probably because a DD is missing     * 00840003
*                                                                     * 00850000
* USAGE NOTES: See below                                              * 00860003
*                                                                     * 00870000
*    Using SYSMOVE to distribute a PDS on PC diskettes.               * 00880000
*                                                                     * 00890000
*        SYSMOVE provides a convenient way to distribute a PDS via    * 00900000
*        PC diskette, using the following procedure:                  * 00910000
*                                                                     * 00920000
*          1. unload the PDS with SYSMOVE                             * 00930000
*                                                                     * 00940000
*          2. download the unloaded data set to a PC in EBCDIC        * 00950000
*             using the "RECEIVE" command:                            * 00960000
*                                                                     * 00970000
*                 RECEIVE pc_file_name unloaded_data_set_name         * 00980000
*                                                                     * 00990000
*          3. pack the PC file with PKZIP (or equivalent)             * 01000000
*                                                                     * 01010000
*          4. copy the packed file to a diskette                      * 01020000
*                                                                     * 01030000
*          5. send the diskette out; whoever you send it to           * 01040000
*             does not need SYSMOVE to process it.                    * 01050000
*                                                                     * 01060000
*       On the receiving MVS system, re-create the PDS as follows:    * 01070000
*                                                                     * 01080000
*          1. unpack the diskette file (if it's been packed)          * 01090000
*                                                                     * 01100000
*          2. upload the unpacked file in EBCDIC                      * 01110000
*             using the "SEND" command:                               * 01120000
*                                                                     * 01130000
*                 SEND pc_file_name unloaded_data_set_name            * 01140000
*                      recfm(fb) lrecl(80) blksize(800)               * 01150000
*                                                                     * 01160000
*          3. load the uploaded data set into a PDS                   * 01170000
*             using IEHMOVE:                                          * 01180000
*                                                                     * 01190000
*             //RELOAD EXEC PGM=IEHMOVE,PARM='POWER=4',REGION=2M      * 01200000
*             //SYSUT1 DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       * 01210000
*             //DD1    DD DSN=GILBERT.UNLOAD,DISP=SHR   INPUT VOLUME  * 01220000
*             //DD2    DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=nonsms       * 01230000
*             //SYSPRINT DD SYSOUT=*                                  * 01240000
*                COPY      DSNAME=GILBERT.UNLOAD,                    X* 01250000
*                          TO=3380=nonsms,                           X* 01260000
*                          RENAME=GILBERT.MYPDS,                     X* 01270000
*                          CATLG                                      * 01280000
*                                                                     * 01290000
*       NOTE:  You may NOT specify SMS-managed volumes for either     * 01300001
*              SYSUT1 (work files) or the output volume (DD2 in       * 01310001
*              this example).  IEHMOVE uses SVC 32 (REALLOC), not     * 01320001
*              dynamic allocation, and SVC 32 does not support        * 01330001
*              SMS-managed volumes.                                   * 01340001
*                                                                     * 01350000
*CHANGE ACTIVITY                                                      * 01360003
*                                                                     * 01370000
*$401 Build DIRTABLE and process ALIAS entries like IEHMOVE:          * 01380001
*        1. If an ALIAS has no corresponding member, turn off         * 01390001
*           the ALIAS indicator in the directory entry                * 01400001
*        2. Do not write the data pointed to by ALIAS entries,        * 01410001
*           instead, write the directory entries immediately          * 01420001
*           after the corresponding main member's data.               * 01430001
*$402 Print number of records and bytes written to SYSUT2             * 01440002
*$403 If a member name is specified on SYSUT1, unload only this member* 01450003
*$404 Change date format to yyyy-mm-dd                                * 01460004
*$405 Zero last reference date in F1-DSCB                             * 01470005
*$506 OS/VS2                                                          * 01480006
*********************************************************************** 01490001
         LCLC  &REL                                                     01500006
&REL     SETC  '506'                   Current version/release          01510006
SYSMOVE  CSECT                                                          01520000
         SAVE  (14,12),,'GSF UTILITIES - SYSMOVE R&REL'                 01530003
         LR    R12,R15                                                  01540003
         USING SYSMOVE,R12                                              01550003
         GETMAIN R,LV=DYNAML           GET DYNAMIC STORAGE              01560000
         ST    R13,4(,R1)                                               01570000
         ST    R1,8(,R13)                                               01580000
         LA    R14,72(,R1)             CLEAR WORKING STORAGE            01590000
         LA    R15,DYNAML-72           CLEAR WORKING STORAGE            01600000
         SLR   R1,R1                   CLEAR WORKING STORAGE            01610000
         MVCL  R14,R0                  CLEAR WORKING STORAGE            01620000
         LM    R13,R1,8(R13)                                            01630000
         USING DYNAM,R13                                                01640000
         L     R2,0(,R1)               point to PARM field              01650000
*                                                                       01660000
         OPEN  MF=(E,OPENLIST)         OPEN DATA SETS                   01670001
         LTR   R15,R15                 OPEN OK?                         01680000
         BZ    TITLE1                  YES, JUMP                        01690000
         ABEND 13                   <- OPEN failed                      01700006
*********************************************************************** 01710000
*                                                                     * 01720000
*        Print the Title Line on SYSPRINT                             * 01730001
*                                                                     * 01740000
*********************************************************************** 01750000
TITLE1   TIME  DEC                     get time, date                   01760003
         STM   R0,R1,DWD               R0=HHMMSSHH,R1=00YYDDDF          01770003
         LH    R3,0(,R2)               parm length                      01780003
         STRING '1GSF Utilities - SYSMOVE R&REL  ',                    X01790004
               (DWD+4,P,YYYY-MM-DD),2X,      YYYY-MM-DD                X01800004
               (DWD+0,1,X),':',(DWD+1,1,X),  HH:MM                     X01810000
               '  PARM=''',(2(R2),(R3)),'''',                          X01820000
               INTO=LINE                                                01830000
         PUT   SYSPRINT,LINE           print title line                 01840003
*                                                                       01850000
         LA    R0,JFCB1                JFCB IN DYNAMIC STORAGE          01860003
         STCM  R0,B'0111',EXL1+1       UPDATE EXIT LIST                 01870003
         RDJFCB SYSUT2                 READ THE JFCB (SYSUT2)           01880003
         MVC   JFCB2,JFCB1             save the SYSUT2 JFCB             01890003
*                                                                       01900000
         RDJFCB MF=(E,OPENDIRL)        READ THE JFCB (SYSUT1)           01910003
*                                                                       01920000
*        Save the member name specified on the SYSUT1 DD                01930003
*                                                                       01940000
         MVI   UT1MBR,FF               no member                        01950003
         TM    JFCBIND1,JFCPDS         member name specified on sysut1? 01960003
         BNO   PASS1                   no, jump                         01970003
         NI    JFCBIND1,FF-JFCPDS      NO MEMBER                        01980003
         MVC   UT1MBR,JFCBELNM         SAVE MEMBER NAME                 01990003
*********************************************************************** 02000000
*                                                                     * 02010000
*        READ THE DIRECTORY                                           * 02020001
*                                                                     * 02030000
*           1. READ SYSUT1 DIRECTORY                                  * 02040001
*           2. COUNT DIRECTORY ENTRIES                                * 02050001
*           3. COUNT DIRECTORY BLOCKS AFTER LOGICAL END OF DIRECTORY  * 02060001
*                                                                     * 02070000
*********************************************************************** 02080000
PASS1    OPEN  MF=(E,OPENDIRL),TYPE=J  OPEN DIRECTORY                   02090003
         USING PDS2,R6                                                  02100001
*LOOP                                                                   02110000
PASS1A   BAL   R9,GETDIR            <- GET DIRECTORY ENTRY              02120000
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        02130001
         BE    PASS1F                  YES, EXIT                        02140000
         AL    R0,DIRTABLE             tally directory entry sizes      02150001
         ST    R0,DIRTABLE             tally directory entry sizes      02160001
         TM    PDS2INDC,PDS2ALIS       is this an alias?                02170001
         BO    PASS1AL                 yes, jump                        02180001
         LA    R0,1                    COUNT MEMBERS                    02190000
         AL    R0,MEMBERS              COUNT MEMBERS                    02200000
         ST    R0,MEMBERS              COUNT MEMBERS                    02210000
         B     PASS1A                                                   02220000
PASS1AL  LA    R0,1                    COUNT ALIASES                    02230001
         AL    R0,ALIASES              COUNT ALIASES                    02240001
         ST    R0,ALIASES              COUNT ALIASES                    02250001
         B     PASS1A                                                   02260001
*ENDLOOP                                                                02270000
*LOOP                                                                   02280000
PASS1F   GET   SYSUT1D              <- READ NEXT DIRECTORY BLOCK        02290000
         LTR   R1,R1                   PHYSICAL END OF DIRECTORY?       02300000
         BZ    PASS1EOD                YES, EXIT                        02310000
         LA    R0,1                    COUNT DIRECTORY BLOCKS           02320000
         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS           02330000
         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS           02340000
         B     PASS1F                                                   02350000
*ENDLOOP                                                                02360000
PASS1EOD CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY                  02370001
*********************************************************************** 02380000
*                                                                     * 02390000
*        WRITE HEADER RECORDS                                         * 02400001
*                                                                     * 02410000
*           1. read the JFCB and the F1-DSCB                          * 02420001
*           2. calculate the data set size                            * 02430001
*           3. write UNLOAD header records                            * 02440001
*                                                                     * 02450000
*********************************************************************** 02460000
         LA    R0,78                   LENGTH OF HEADER RECORD          02470000
         LA    R1,HDR1REC              ADDR OF HEADER RECORD            02480000
         BAL   R9,WRITE                WRITE FIRST RECORD               02490000
         MVC   DS1DSNAM,JFCBDSNM       MOVE DSNAME                      02500000
         MVC   DS1DSSN,JFCBVOLS        MOVE VOLSER                      02510000
         OBTAIN CAML26                 READ F1-DSCB                     02520000
         DEVTYPE DCBDDNAM-IHADCB+SYSUT1D,DVAREA,DEVTAB                  02530000
*                                                                       02540000
         MVC   UNLDDIR,DIRBLKS+2       NUMBER OF DIRECTORY BLOCKS       02550000
         MVI   UNLDFLAG,X'40'          AVG BLK                          02560000
         SLR   R1,R1                                                    02570000
         ICM   R1,B'0011',DS1LSTAR     LAST TRACK USED                  02580000
         LA    R1,1(,R1)               NUMBER OF TRACKS USED            02590000
         ST    R1,TRKSUSED             NUMBER OF TRACKS USED            02600000
         SLR   R2,R2                                                    02610000
         ICM   R2,B'0011',DVATRKLN     TRACK LENGTH                     02620000
         MR    R0,R2                   TRACKS * TRKLN                   02630000
         STCM  R1,B'1111',UNLDSIZE     STORE RESULT                     02640000
*                                                                       02650005
         XC    DS1REFD,DS1REFD         ZERO THE LAST REF DATE           02660005
*                                                                       02670000
         TM    DS1SCALO,X'80'          ALLOC IN CYLINDERS OR TRACKS?    02680000
         BZ    HDR1DEVT                NO, SET SSIZ=0                   02690000
         SLR   R1,R1                                                    02700000
         ICM   R1,B'0111',DS1SCAL3     LOAD NO OF CYLS IN R1            02710000
         TM    DS1SCALO,X'40'          AVERAGE LENGTH?                  02720000
         BZ    HDR1SQTY                NO, JUMP                         02730000
         MH    R1,DVATRK               MULTIPLY BY NO OF CYL PER TRK    02740000
HDR1SQTY MR    R0,R2                   TRACKS * TRKLN                   02750000
         STCM  R1,B'1111',UNLDSSIZ     SECONDARY SPACE IN BYTES         02760000
*                                                                       02770000
HDR1DEVT MVC   UNLDDEVT,DVAUCBTY       UCB TYPE                         02780000
         LA    R0,HDR2LEN              LENGTH                           02790000
         LA    R1,HDR2REC              BACK END                         02800000
         BAL   R9,WRITE                WRITE RECORD SEGMENT             02810000
*********************************************************************** 02820000
*                                                                     * 02830000
*        Print Characteristics of SYSUT1 & SYSUT2                     * 02840001
*                                                                     * 02850000
*          INPUT PDS:                                                 * 02860001
*            DSNAME=GILBERT.LOAD,VOL=3380=SYS157                      * 02870001
*            RECFM=U,LRECL=0,BLKSIZE=32760                            * 02880001
*            DIRECTORY_BLOCKS=11,MEMBERS=24,ALIASES=2                 * 02890001
*            TRACKS_USED=22,EXTENTS_ALLOCATED=2                       * 02900001
*                                                                     * 02910000
*          OUTPUT SDS:                                                * 02920001
*            DSNAME=GILBERT.UNLOAD,VOL=SER=STR319                     * 02930001
*            RECFM=FB,LRECL=80,BLKSIZE=800                            * 02940001
*            RECORDS=100,BYTES=8000                                   * 02950002
*                                                                     * 02960000
*********************************************************************** 02970000
PRT10    STRING '0INPUT PDS:',INTO=LINE                                 02980000
         PUT   SYSPRINT,LINE           print message                    02990000
         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X03000000
               ',VOL=SER=',(JFCBVOLS,6),                               X03010000
               INTO=LINE                                                03020000
         MVC   UNITNAME+8,DVAUCBTY     move device type                 03030000
         LINK  EP=IEFEB4UV,                                            X03040000
               PARAM=(UNITNAME,        work area                       X03050000
               =X'0100'),              function flags  "7"             X03060000
               MF=(E,DWD),VL=1                                          03070000
         LTR   R15,R15                 OK?                              03080000
         BNZ   PRT13                   no, jump                         03090000
         LINK  EP=IEFEB4UV,                                            X03100000
               PARAM=(UNITNAME,        work area                       X03110000
               =X'2000'),              function flags  "2"             X03120000
               MF=(E,DWD),VL=1                                          03130000
         LTR   R15,R15                 OK?                              03140000
         BNZ   PRT13                   no, jump                         03150000
         STRING '0  DSNAME=',(JFCBDSNM,,T),                            X03160000
               ',VOL=',(UNITNAME,,T),'=',(JFCBVOLS,6),                 X03170000
               INTO=LINE                                                03180000
PRT13    PUT   SYSPRINT,LINE           print message                    03190000
         LA    R1,RECFM                RECFM for SYSUT1                 03200000
         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'           03210000
         STRING '   RECFM=',(RECFM,,T),                                X03220000
               ',LRECL=',(DS1LRECL,H,L),                               X03230000
               ',BLKSIZE=',(DS1BLKL,H,L),                              X03240000
               INTO=LINE                                                03250000
         PUT   SYSPRINT,LINE           print message                    03260000
         STRING '   Directory_blocks=',(DIRBLKS,F,L),                  X03270002
               ',Members=',(MEMBERS,F,L),                              X03280002
               ',Aliases=',(ALIASES,F,L),                              X03290002
               INTO=LINE                                                03300000
         PUT   SYSPRINT,LINE           print message                    03310000
         STRING '   Tracks_used=',(TRKSUSED,F,L),                      X03320002
               ',Extents_allocated=',(DS1NOEPV,FL1,L),                 X03330002
               INTO=LINE                                                03340000
         PUT   SYSPRINT,LINE           print message                    03350000
*                                                                       03360000
         STRING '0OUTPUT SDS:',INTO=LINE                                03370000
         PUT   SYSPRINT,LINE           print message                    03380000
         STRING '0  DSNAME=',(JFCBDSNM-INFMJFCB+JFCB2,,L),             X03390000
               ',VOL=SER=',(JFCBVOLS-INFMJFCB+JFCB2,,L),               X03400000
               INTO=LINE                                                03410000
         PUT   SYSPRINT,LINE           print message                    03420000
         LA    R1,RECFM                RECFM for SYSUT1                 03430000
         BAL   R14,#RECFM1             B'11111111' -> C'VBSA'           03440000
         STRING '   RECFM=FB,LRECL=80',                                X03450000
               ',BLKSIZE=',(DCBBLKSI-IHADCB+SYSUT2,H,L),               X03460000
               INTO=LINE                                                03470000
         PUT   SYSPRINT,LINE           print message                    03480000
*********************************************************************** 03490001
*                                                                     * 03500000
*        BUILD TABLE OF DIRECTORY ENTRIES                             * 03510001
*                                                                     * 03520000
*********************************************************************** 03530001
         LA    R0,1                    Room for X'FF' at end of table   03540001
         AL    R0,DIRTABLE             SIZE OF DIRECTORY ENTRIES        03550001
         GETMAIN RU,LV=(0),BNDRY=PAGE  GET STORAGE FOR DIRECTRY ENTRIES 03560001
         STM   R0,R1,DIRTABLE          len/addr of dir entries          03570001
         LR    R4,R1                   point to start of table          03580001
         OPEN  MF=(E,OPENDIRL)         re-open DIRECTORY                03590001
         MVI   DIRENTRY,FF             FIRST TIME SWITCH FOR "GETDIR"   03600001
*LOOP                                                                   03610001
BLDTBL1  BAL   R9,GETDIR            <- GET DIRECTORY ENTRY              03620001
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        03630001
         BE    BLDTBL9                 YES, EXIT                        03640001
         CLI   UT1MBR,FF               select a member ?                03650003
         BE    BLDTBL6                 no, jump                         03660003
         CLC   PDS2NAME,JFCBELNM       IS IT MY MEMBER?                 03670003
         BE    BLDTBL6                 yes, jump                        03680003
BLDTBL5  ALR   R6,R0                   ignore this mbr                  03690003
         B     BLDTBL1                 next directory entry             03700003
BLDTBL6  LR    R5,R0                   size of dir entry                03710003
         LR    R7,R0                   size of dir entry                03720001
         MVCL  R4,R6                   move directory entry to table    03730001
         B     BLDTBL1                 next directory entry             03740001
*ENDLOOP                                                                03750001
BLDTBL9  MVI   0(R4),FF                mark end of table                03760001
         CLOSE MF=(E,OPENDIRL)         CLOSE DIRECTORY                  03770001
         FREEPOOL SYSUT1D              FREE BUFFERS                     03780001
         CL    R4,DIRTABLE+4           any member selected?             03790003
         BE    EOJ                     no, exit                         03800003
*********************************************************************** 03810001
*                                                                     * 03820000
*        Turn off ALIAS indicator in directory entries                * 03830001
*        for which no main member is present.                         * 03840001
*                                                                     * 03850000
*********************************************************************** 03860001
UNALIAS  ICM   R0,B'1111',ALIASES      any ALIAS?                       03870001
         BZ    GETMBR                  no, exit                         03880001
         L     R6,DIRTABLE+4           first directory entry            03890001
*LOOP                                                                   03900001
UNALIAS1 TM    PDS2INDC,PDS2ALIS       is this an alias?                03910001
         BNO   UNALIAS8                no, ignore it                    03920001
         L     R7,DIRTABLE+4           first directory entry            03930001
         USING PDS2,R7                                                  03940001
*--loop                                                                 03950001
UNALIAS2 TM    PDS2INDC,PDS2ALIS       is this an alias?                03960001
         BO    UNALIAS3                yes, ignore it                   03970001
         CLC   PDS2TTRP,PDS2TTRP-PDS2(R6)   main mbr of my alias?       03980001
         BE    UNALIAS8                yes, exit inner loop             03990001
UNALIAS3 LA    R14,PDS2LUSR            MASK                             04000001
         N     R14,PDS2TTRP            SIZE OF USER DATA                04010001
         ALR   R14,R14                 size of user data in bytes       04020001
         LA    R7,PDS2USRD(R14)        NEXT DIRECTORY ENTRY             04030001
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        04040001
         BNE   UNALIAS2                NO, NEXT MEMBER                  04050001
*--endloop                                                              04060001
         DROP  R7                      was PDS2 (local only)            04070001
         NI    PDS2INDC,FF-PDS2ALIS    turn off ALIAS indicator         04080001
*                                                                       04090000
UNALIAS8 LA    R14,PDS2LUSR            MASK                             04100001
         N     R14,PDS2TTRP            size of user data in half-words  04110001
         ALR   R14,R14                 size of user data in bytes       04120001
         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY             04130001
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        04140001
         BNE   UNALIAS1                NO, NEXT MEMBER                  04150001
*ENDLOOP                                                                04160001
*********************************************************************** 04170000
*                                                                     * 04180000
*        PROCESS DIRECTORY ENTRIES AND MEMBER DATA                    * 04190001
*                                                                     * 04200000
*          1.  READ DIRECTORY ENTRIES FROM "DIRTABLE"                 * 04210001
*          2.  READ MEMBERS FROM DDN=SYSUT1 USING BPAM                * 04220001
*          3.  PASS RECORDS TO "WRITE" ROUTINE                        * 04230001
*          4.  Write ALIAS entry after corresponding main member      * 04240001
*                                                                     * 04250000
*********************************************************************** 04260000
GETMBR   GETBUF SYSUT1M,(R3)           GET ADDR OF A BUFFER             04270001
         ST    R3,DECB1+12             UPDATE BUFFER ADDR IN DECB       04280000
         L     R6,DIRTABLE+4           first directory entry            04290001
*LOOP                                                                   04300000
GETMBR1  LA    R14,PDS2LUSR            MASK                             04310001
         N     R14,PDS2TTRP            SIZE OF USER DATA                04320001
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY          04330001
         TM    PDS2INDC,PDS2ALIS       is this an alias?                04340001
         BO    GETMBR9                 yes, ignore it                   04350001
         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY          04360000
         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY        04370000
         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK           04380000
         LA    R0,2+1+3                LENGTH,FLAGS,TTR                 04390000
         LA    R1,DWD                  002A,C8,00000A                   04400000
         BAL   R9,WRITE                WRITE RECORD SEGMENT             04410000
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY          04420000
         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY          04430001
         BAL   R9,WRITE                WRITE RECORD SEGMENT             04440000
         MVC   TTRN(3),8(R6)           TTR                              04450000
         FIND  SYSUT1M,TTRN,C          POINT TO MEMBER                  04460000
*--LOOP                                                                 04470000
GETMBR2  READ  DECB1,SF,SYSUT1M,*-*,'S'                                 04480000
         CHECK DECB1                                                    04490000
         MVC   DWD(2),DCBLRECL-IHADCB+SYSUT1M                           04500000
         MVI   DWD+2,X'E0'             DATA RECORD                      04510000
         NOTE  SYSUT1M                 GET TTR                          04520000
         STCM  R1,B'1110',DWD+3        SAVE TTR                         04530000
         LA    R0,2+1+3                LENGTH,FLAGS,TTR                 04540000
         LA    R1,DWD                  TTR                              04550000
         BAL   R9,WRITE                WRITE RECORD SEGMENT             04560000
         LH    R0,DCBLRECL-IHADCB+SYSUT1M                               04570000
         L     R1,DECB1+12             BUFFER ADDR IN DECB              04580000
         BAL   R9,WRITE                WRITE DATA                       04590000
         B     GETMBR2                 NEXT BLOCK                       04600000
*--ENDLOOP                                                              04610000
*                                                                       04620000
*        Write ALIAS directory entries corresponding to the member      04630001
*        just written                                                   04640001
*                                                                       04650000
GETMBR8  ICM   R0,B'1111',ALIASES      any ALIAS?                       04660001
         BZ    GETMBR9                 no, jump                         04670001
         L     R7,DIRTABLE+4           first directory entry            04680001
         USING PDS2,R7                                                  04690001
*--LOOP                                                                 04700001
GETMBR8B LA    R14,PDS2LUSR            MASK                             04710001
         N     R14,PDS2TTRP            SIZE OF USER DATA                04720001
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY          04730001
         TM    PDS2INDC,PDS2ALIS       is this an alias?                04740001
         BNO   GETMBR8N                no, ignore it                    04750001
         CLC   TTRN(3),PDS2TTRP        alias of member just written?    04760001
         BNE   GETMBR8N                no, ignore it                    04770001
         STH   R0,DWD                  SIZE OF DIRECTORY ENTRY          04780001
         MVI   DWD+2,X'C8'             THIS IS A DIRECTORY ENTRY        04790001
         MVC   DWD+3(3),TTRN           TTRN OF PREVIOUS BLOCK           04800001
         LA    R0,2+1+3                LENGTH,FLAGS,TTR                 04810001
         LA    R1,DWD                  002A,C8,00000A                   04820001
         BAL   R9,WRITE                WRITE RECORD SEGMENT             04830001
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY          04840001
         LA    R1,PDS2                 ADDR OF DIRECTORY ENTRY          04850001
         BAL   R9,WRITE                WRITE RECORD SEGMENT             04860001
         LH    R0,DWD                  SIZE OF DIRECTORY ENTRY          04870001
GETMBR8N ALR   R7,R0                   NEXT DIRECTORY ENTRY             04880001
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        04890001
         BNE   GETMBR8B                NO, NEXT MEMBER                  04900001
*--ENDLOOP                                                              04910001
         DROP  R7                      was PDS2 (local only)            04920001
*                                                                       04930000
GETMBR9  LA    R14,PDS2LUSR            MASK                             04940001
         N     R14,PDS2TTRP            size of user data in half-words  04950001
         ALR   R14,R14                 size of user data in bytes       04960001
         LA    R6,PDS2USRD(R14)        NEXT DIRECTORY ENTRY             04970001
         CLI   PDS2,FF                 LOGICAL END OF DIRECTORY?        04980001
         BNE   GETMBR1                 NO, NEXT MEMBER                  04990001
*ENDLOOP                                                                05000000
*********************************************************************** 05010000
*                                                                     * 05020000
*        END OF DIRECTORY                                             * 05030001
*                                                                     * 05040000
*          1.  WRITE AN EOF RECORD                                    * 05050001
*          2.  CLOSE THE FILES                                        * 05060001
*          3.  CLEAN UP                                               * 05070001
*          4.  GOBACK                                                 * 05080001
*                                                                     * 05090000
*********************************************************************** 05100000
EOJ      LA    R0,3                    L'TTR                            05110000
         LA    R1,=X'0000,01'          LENGTH=0                         05120000
         BAL   R9,WRITE                WRITE EOF RECORD                 05130000
         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH  05140000
         SLR   R15,R15                 PADDING TO X'00'                 05150000
         MVCL  R4,R14                  PAD LAST RECORD                  05160000
*                                                                       05170000
LASTMSG  LA    R1,80                   LRECL of SYSUT2 data set         05180003
         M     R0,SEQNO                calculate number of bytes        05190002
         STRING '   Records=',(SEQNO,F,L),',Bytes=',((R1),,L),INTO=LINE 05200002
         PUT   SYSPRINT,LINE           print message                    05210002
*                                                                       05220000
CLOSEALL CLOSE MF=(E,OPENLIST)         CLOSE ALL DATA SETS              05230003
         FREEPOOL SYSUT1M              FREE BUFFERS                     05240000
         FREEPOOL SYSUT2               FREE BUFFERS                     05250000
         FREEPOOL SYSPRINT             FREE BUFFERS                     05260000
*                                                                       05270000
         LM    R0,R1,DIRTABLE          len/addr of dir entries          05280001
         FREEMAIN RU,LV=(0),A=(1)      free directory entry table       05290001
*                                                                       05300000
GOBACK   LR    R1,R13                                                   05310000
         L     R13,4(,R13)                                              05320000
         FREEMAIN R,LV=DYNAML,A=(1)    FREE DYNAMIC STORAGE             05330000
         RETURN (14,12),RC=00          GOBACK                           05340000
*---------------------------------------------------------------------* 05350000
*                                                                     * 05360000
*        Read Directory Blocks from SYSUT1D and un-block them         * 05370000
*                                                                     * 05380000
*        Returns:                                                     * 05390000
*                                                                     * 05400000
*          R0 Length of the directory entry                           * 05410000
*          R6 Address of the directory entry (8X'FF' at EOF)          * 05420001
*                                                                     * 05430000
*---------------------------------------------------------------------* 05440000
GETDIR   ICM   R6,B'1111',DIRENTRY     CURRENT DIRECTORY ENTRY          05450001
         BP    GETDIR4                 NOT FIRST TIME, JUMP             05460000
*LOOP                                                                   05470000
GETDIR1  GET   SYSUT1D                 READ DIRECTORY BLOCK             05480000
         LA    R0,1                    COUNT DIRECTORY BLOCKS           05490000
         AL    R0,DIRBLKS              COUNT DIRECTORY BLOCKS           05500000
         ST    R0,DIRBLKS              COUNT DIRECTORY BLOCKS           05510000
         LA    R6,2(,R1)               FIRST ENTRY IN THIS BLOCK        05520001
         B     GETDIR9                 EXIT                             05530000
*--LOOP                                                                 05540000
GETDIR4  LA    R14,PDS2LUSR            MASK                             05550001
         N     R14,PDS2TTRP            SIZE OF USER DATA                05560001
         LA    R14,12(R14,R14)         SIZE OF DIRECTORY ENTRY          05570000
         L     R15,DCBRECAD-IHADCB+SYSUT1D  1ST BYTE OF CURR DIR BLK    05580000
         AH    R15,0(,R15)             LENGTH OF CURR DIR BLK           05590000
         BCTR  R15,0                   LIMIT FOR BXH                    05600000
         BXH   R6,R14,GETDIR1          SIZE                             05610001
*--ENDLOOP                                                              05620000
GETDIR9  ST    R6,DIRENTRY             SAVE ADDR OF CURR DIR ENTRY      05630001
         LA    R14,PDS2LUSR            MASK                             05640001
         N     R14,PDS2TTRP            SIZE OF USER DATA                05650001
         LA    R0,12(R14,R14)          SIZE OF DIRECTORY ENTRY          05660000
         BR    R9                                                       05670000
*---------------------------------------------------------------------* 05680000
*                                                                     * 05690000
*        Write Records to SYSUT2 in IEHMOVE format                    * 05700000
*                                                                     * 05710000
*---------------------------------------------------------------------* 05720000
WRITE    LR    R2,R1                   ADDRESS                          05730000
         LR    R3,R0                   LENGTH                           05740000
         LM    R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH  05750000
*LOOP                                                                   05760000
WRITE1   LTR   R5,R5                   ANY SPACE LEFT IN PREVIOUS RCD?  05770000
         BP    WRITE2                  YES, JUMP                        05780000
         PUT   SYSUT2                  NO, LOCATE ANOTHER               05790000
         LA    R0,1                    BUMP SEQNO                       05800000
         AL    R0,SEQNO                BUMP SEQNO                       05810000
         ST    R0,SEQNO                BUMP SEQNO                       05820000
         STH   R0,0(,R1)               BUMP SEQNO                       05830000
         LA    R4,2(,R1)               ADDRESS                          05840000
         LA    R5,78                   LENGTH                           05850000
WRITE2   LR    R14,R4                  "TO" ADDR                        05860000
         LR    R15,R5                  "TO" ADDR                        05870000
         CLR   R15,R3                  INREC TOO BIG?                   05880000
         BL    WRITE3                  NO, JUMP                         05890000
         LR    R15,R3                  YES, TRUNCATE                    05900000
WRITE3   ALR   R4,R15                  BUMP ADDR                        05910000
         SLR   R5,R15                  DECREASE LENGTH                  05920000
         MVCL  R14,R2                  FILL IN RECORD                   05930000
         LTR   R3,R3                   INPUT RECORD ALL MOVED?          05940000
         BP    WRITE1                  NOT YET, KEEP ON MOVING          05950000
*ENDLOOP                                                                05960000
         STM   R4,R5,CURRENT           CURRENT ADDR & REMAINING LENGTH  05970000
WRITE99  BR    R9                                                       05980000
*---------------------------------------------------------------------* 05990001
*                                                                     * 06000000
*        RECFM Edit Routine                                           * 06010001
*                                                                     * 06020000
*---------------------------------------------------------------------* 06030001
#RECFM1  MVC   RECFM,BLANKS            INITIALIZE RECFM AREA            06040001
         MVI   0(R1),C'U'                                               06050001
         TM    DS1RECFM,DS1RECFU       RECFM=U?                         06060000
         BO    #RECFM2                 YES, JUMP                        06070000
         MVI   0(R1),C'F'                                               06080000
         TM    DS1RECFM,DS1RECFF       RECFM=F?                         06090000
         BO    #RECFM2                 YES, JUMP                        06100000
         MVI   0(R1),C'V'                                               06110000
#RECFM2  TM    DS1RECFM,DS1RECFB       RECFM=.B ?                       06120000
         BNO   #RECFM3                 NO, JUMP                         06130000
         MVI   1(R1),C'B'              .B                               06140000
         LA    R1,1(,R1)                                                06150000
#RECFM3  TM    DS1RECFM,DS1RECFS       RECFM=..S ?                      06160000
         BNO   #RECFM4                 NO, JUMP                         06170000
         MVI   1(R1),C'S'              ..S                              06180000
         LA    R1,1(,R1)                                                06190000
#RECFM4  TM    DS1RECFM,DS1RECFA       RECFM=...A ?                     06200000
         BNO   #RECFM5                 NO, JUMP                         06210000
         MVI   1(R1),C'A'              ...A                             06220000
#RECFM5  TM    DS1RECFM,DS1RECMC       RECFM=...M ?                     06230000
         BNO   #RECFM6                 NO, JUMP                         06240001
         MVI   1(R1),C'M'              ...M                             06250000
#RECFM6  TM    DS1RECFM,DS1RECFT       RECFM=...T ?                     06260001
         BNOR  R14                     NO, JUMP                         06270001
         MVI   1(R1),C'T'              ...T                             06280001
         BR    R14                                                      06290000
*********************************************************************** 06300001
*                                                                     * 06310000
*        DATA AREAS                                                   * 06320001
*                                                                     * 06330000
*********************************************************************** 06340001
OPENLIST OPEN  (SYSUT1M,,SYSUT2,OUTPUT,SYSPRINT,OUTPUT),MF=L            06350001
OPENDIRL OPEN  (SYSUT1D),MF=L                                           06360001
SYSUT1D  DCB   DSORG=PS,MACRF=GL,DDNAME=SYSUT1,EODAD=ENDOFDIR,         X06370000
               EXLST=EXL1,RECFM=U,BLKSIZE=256                           06380000
EXL1     DC    A(X'87000000')          DCB EXIT LIST (SYSUT1)           06390000
ENDOFDIR SLR   R1,R1                                                    06400000
         BR    R14                                                      06410000
SYSUT1M  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=GETMBR8,           X06420001
               RECFM=U,BUFNO=1                                          06430000
SYSUT2   DCB   DSORG=PS,MACRF=PL,DDNAME=SYSUT2,                        X06440000
               EXLST=EXL1,RECFM=FB,LRECL=80                             06450000
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X06460000
               RECFM=FBA,LRECL=121                                      06470000
CAML26   CAMLST SEARCH,DS1DSNAM,DS1DSSN,DS1FMTID                        06480000
BLANKS   DC    CL6' '                  CL(L'RECFM)' '                   06490006
FF       EQU   X'FF'                                                    06500001
*                                                                       06510000
*        HEADER RECORDS (IEHMVSSX/IEHMVSXY)                             06520000
*                                                                       06530000
HDR1REC  DC    H'75',X'0E'             HEADER RECORD                    06540000
         DC    C'THIS IS AN UNLOADED DATA SET PRODUCED BY',X'80'        06550000
         DC    C'THE IBM UTILITY, SYSMOVE.'                             06560000
         DC    C'OMMBRLDWB'            WHATEVER                         06570000
*                                                                       06580000
HDR2REC  DC    AL2(HDR2LEN-3)          L'DSCB1 + 57                     06590000
         DC    X'00'                   NO FLAGS                         06600000
         IECSDSL1 1                    F1-DSCB                          06610000
DS1RECFU EQU   X'C0'                                                    06620006
DS1RECFF EQU   X'80'                                                    06630006
DS1RECFT EQU   X'20'                                                    06640006
DS1RECFB EQU   X'10'                                                    06650006
DS1RECFS EQU   X'08'                                                    06660006
DS1RECFA EQU   X'04'                                                    06670006
DS1RECMC EQU   X'02'                                                    06680006
DS1SCAL3 EQU   DS1SCALO+1,3                                             06690006
UNLDDIR  DS    XL2                     DIRECTORY QUANTITY               06700000
UNLDFLAG DS    XL1                     UNLOAD CONTROL FLAG              06710000
UNLDSIZE DS    XL4                     PRIM ALLOC OF DS (IN BYTES)      06720000
UNLDSSIZ DS    XL4                     SEC ALLOCATION OF DS (IN BYTES)  06730000
UNLDSPAR DS    XL42                    UNUSED SPARE BYTES               06740000
UNLDDEVT DS    XL4                     FROM DEVICE TYPE                 06750000
HDR2LEN  EQU   *-HDR2REC                                                06760000
*---------------------------------------------------------------------* 06770004
*                                                                     * 06780004
*        DYNAMIC STORAGE AREA                                         * 06790004
*                                                                     * 06800004
*---------------------------------------------------------------------* 06810004
DYNAM    DSECT                                                          06820000
         DS    18F                     SAVE AREA                        06830000
UT1MBR   DS    CL8                     SYSUT1 member                    06840003
DWD      DS    D                                                        06850000
UNITNAME DS    CL8,XL4,XL4,XL4,XL8     IEFEB4UV                         06860000
DIRENTRY DS    A                       DIRECTORY ENTRY                  06870000
DIRBLKS  DS    F                       NUMBER OF DIRECTORY BLOCKS       06880000
MEMBERS  DS    F                       NUMBER OF MEMBERS                06890000
ALIASES  DS    F                       NUMBER OF ALIASES                06900001
DIRTABLE DS    F,A                     addr/size of dir entry table     06910001
TRKSUSED DS    F                       NUMBER OF tracks used            06920000
CURRENT  DS    A,F                     OUTPUT ADDR, LENGTH              06930000
TTRN     DS    F                       TTRN OF FIRST/CURRENT BLOCK      06940000
SEQNO    DS    F                       SYSUT2 RECORD SEQUENCE NUMBER    06950000
RECFM    DS    C'VBSAMT'               Record Format                    06960001
LINE     DS    CL121                   print line                       06970000
         DS    0F                      ALIGN DVAREA                     06980000
         IHADVA DSECT=NO               DEVTYPE AREA                     06990000
         ORG   ,                       ALIGN DVAREA                     07000000
JFCB1    DS    0F                      First JFCB for SYSUT1            07010000
         IEFJFCBN                      JFCB for SYSUT1                  07020000
JFCB2    DS    XL(*-JFCB1)             JFCB for SYSUT2                  07030000
DYNAML   EQU   *-DYNAM                                                  07040000
*                                                                       07050000
         DCBD  DSORG=PS,DEVD=DA                                         07060000
*@@      IHAPDS DSECT=YES,PDSBLDL=NO                                    07070001
PDS2     DSECT                                                          07080001
PDS2NAME DS    CL8                     member name                      07090001
PDS2TTRP DS    XL3                     TTR                              07100001
PDS2INDC DS    X                       flags, length of user data       07110001
PDS2ALIS EQU   X'80'                   ALIAS entry                      07120001
PDS2LUSR EQU   X'1F'                   len of user data in half-words   07130001
PDS2USRD DS    0C                      start of user data               07140001
         STRING GENERATE               generate literals, routine       07150000
*---------------------------------------------------------------------* 07160004
*                                                                     * 07170004
*        FORMAT OF IEHMOVE UNLOAD RECORDS (IEHMVSRA)                  * 07180004
*                                                                     * 07190004
*    (FOR DOCUMENTATION ONLY, THIS DSECT IS NOT USED IN THE PROGRAM)  * 07200004
*                                                                     * 07210004
*---------------------------------------------------------------------* 07220004
BUFFER   DSECT                                                          07230000
         DC    H'1'                    RECORD SEQUENCE NUMBER           07240000
RECLEN   DC    H'75'                   RECORD LENGTH                    07250000
RECTYPE  DC    X'0E'                   RECORD TYPE                      07260000
RTYPTTR    EQU X'80'                   3-BYTE TTR FOLLOWS               07270006
RTYPPDS    EQU X'40'                   INPUT DATA SET IS A PDS          07280006
RTYPDATA   EQU X'20'                   MEMBER DATA                      07290006
RTYPNOTE   EQU X'10'                   NOTE LIST                        07300006
RTYPDIR    EQU X'08'                   DIRECTORY ENTRY                  07310006
RTYPDMY    EQU X'04'                   DUMMY RECORD                     07320006
RTYPHDR    EQU X'02'                   HEADER RECORD                    07330006
RTYPEOF    EQU X'01'                   EOF RECORD                       07340006
RECTTR   DS    XL3                     TTR OF THIS RECORD               07350000
RECDATA  DS    XL(BUFFER+800-*)        DATA                             07360000
*        YREGS                                                          07370006
R0       EQU   0                                                        07380006
R1       EQU   1                                                        07390006
R2       EQU   2                                                        07400006
R3       EQU   3                                                        07410006
R4       EQU   4                                                        07420006
R5       EQU   5                                                        07430006
R6       EQU   6                                                        07440006
R7       EQU   7                                                        07450006
R8       EQU   8                                                        07460006
R9       EQU   9                                                        07470006
R10      EQU   10                                                       07480006
R11      EQU   11                                                       07490006
R12      EQU   12                                                       07500006
R13      EQU   13                                                       07510006
R14      EQU   14                                                       07520006
R15      EQU   15                                                       07530006
         END                                                            07540000
//SYSPRINT DD SYSOUT=*                                                  07570000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  07580000
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR            STRINGXL      07590006
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   07600006
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   07610006
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   07620006
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      07630006
//                                                                      07640006
//*                                                                     07650003
//LKED    EXEC PGM=HEWL,PARM=REUS                                       07660003
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       07670006
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(SYSMOVE),DISP=SHR               07680004
//SYSPRINT DD SYSOUT=*                                                  07690003
//                                                                      07700003
//                                                                      07710003
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  07720000
//STEPLIB  DD DSN=GSFSOFT.PRISM-CS.LOAD,DISP=SHR                        07730004
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        07740004
//SYSPRINT DD SYSOUT=*                                                  07750000
//SYSUT1   DD DSN=GILBERT.LOAD(BLK0),DISP=SHR                           07760003
//SYSUT2   DD DSN=GILBERT.X80,BLKSIZE=800,DISP=SHR                      07770003
//SYSUDUMP DD SYSOUT=*                                                  07780000
//                                                                      07790001
//*---------------------                                                07800000
//DEL12 EXEC PGM=IEFBR14                                                07810000
//DEL12 DD DSN=GILBERT.IEB12,DISP=(MOD,DELETE),SPACE=(1,0)              07820000
//DEL12 DD DSN=GILBERT.IEB12,DISP=(OLD,DELETE),VOL=REF=SYS1.PARMLIB     07830000
//RELOAD EXEC PGM=IEHMOVE,PARM='POWER=4'                                07840000
//SYSUT1 DD DSN=SYS1.PARMLIB,DISP=SHR                                   07850000
//DD1    DD DSN=GILBERT.X80,DISP=SHR                                    07860000
//DD2    DD DSN=SYS1.PARMLIB,DISP=SHR                                   07870000
//SYSPRINT DD SYSOUT=*                                                  07880000
     COPY      DSNAME=GILBERT.X80,                                     X07890004
               TO=3380=TEST01,                                         X07900003
               RENAME=GILBERT.IEB12,                                   X07910004
               CATLG                                                    07920000
/*                                                                      07930000
//*---------------------                                                07940000
//CMPR    EXEC PGM=COMPAREX                                             07950000
//SYSUT1   DD DSN=GILBERT.IEB11,DISP=SHR                                07960000
//SYSUT2   DD DSN=GILBERT.X80,DISP=SHR                                  07970000
//SYSPRINT DD SYSOUT=*                                                  07980000
//SYSIN    DD DUMMY                                                     07990000
./ ADD NAME=TCTDCTR  0109-85118-06210-1410-00304-00126-00112-CBT472
//GILBERTT JOB (ACCT#),TCTDCTR,                                         00010000
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030000
//*                                                                     00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050009
*                                                                       00070000
*                                                                       00080000
*        EDITION DU NOMBRE D'EXCP SUR TOUS LES FICHIERS DU STEP         00090000
*                                                                       00100000
*        VERSION CHAPEAU DE TCTDCTR, XA 2.2                             00110000
*                                                                       00120000
*                                                                       00130000
$TCTDCTR START 0                                                        00140000
         SAVE  (14,12),,TCTDCTR-&SYSDATE.-&SYSTIME                      00150000
         BALR  R12,0                   LOAD BASE REGISTER               00160000
         USING *,R12                   SPECIFY IT TO ASSEMBLER          00170000
         LR    R14,R13                 SYSTEM SAVE-AREA                 00180000
         LA    R13,=18C'SAVE'          NEW SAVE-AREA                    00190000
         ST    R14,4(,R13)             FORWARD CHAIN                    00200000
         ST    R13,8(,R14)             BACKWARD CHAIN                   00210000
*                                                                       00220000
         WXTRN MEMBER                                                   00230000
         ICM   R15,B'1111',=A(MEMBER)  PROGRAM TO BE TRACED             00240000
         BZ    NOCALL                  NO PROGRAM TO CALL               00250000
         BALR  R14,R15                 CALL PROGRAM TO BE TRACED        00260000
NOCALL   STH   R15,RETCODE                                              00270000
*                                                                       00280000
         L     R4,540(,0)              PSATOLD                          00290000
         USING TCB,R4                                                   00300000
*=       C     RTCB,TCBJSTCB           CHECK IF I'M A BATCH PGM         00310000
*=       BNE   GOBACK                  QUIT IF TSO                      00320000
*                                                                       00330000
         LA    R1,=A(S99RB+X'80000000') SVC99 REQUEST BLOCK    HEADER   00340000
         SVC   99                      ALLOCATE SYSDBOUT                00350000
         OPEN  MF=(E,OPENL1)           OPEN SYSDBOUT                    00360000
         LTR   R15,R15                 CHECK OPEN RETURN CODE           00370000
         BNZ   GOBACK                  QUIT IF OPEN FAILED              00380000
         L     R5,TCBTIO               MY TIOT                          00390000
         USING TIOT1,R5                                                 00400000
         L     R6,X'0224'              MY ASCB                          00410000
         L     R6,ASCBOUCB-ASCB(,R6)   MY OUCB                          00420000
         USING OUCB,R6                                                  00430000
         L     R7,TCBJSCB              MY JSCB                          00440003
         USING IEZJSCB,R7                                               00450003
         BAL   R11,PUTDCB2         <== LOCATE OUTPUT RECORD             00460000
         STRING '1 JOB=',TIOCNJOB,'  STEP=',(TIOCSTEP+0,8),            X00470003
               '  PROCSTEP=',(TIOCSTEP+8,8),                           X00480003
               '  PGM=',JSCBPGMN,                                      X00490003
               '  PERFORM=',(OUCBNPG,H,L),                             X00500003
               INTO=((R1),121)                                          00510000
         BAL   R11,PUTDCB2             WRITE BLANK LINE                 00520003
         BAL   R11,PUTDCB2                                              00530003
         STRING '   DDNAME     DISP  VOLSER    EXCP   DATA SET NAME',  X00540003
               34X,'DEVICE     CUA    LABEL',                          X00550003
               INTO=((R1),121)                                          00560003
         BAL   R11,PUTDCB2                                              00570003
         MVI   1(R1),C'-'              LINE OF DASHES                   00580003
         MVC   2(109,R1),1(R1)         LINE OF DASHES                   00590003
*LOOP                                                                   00600000
TIOT#GET CLI   TIOEDDNM,C' '           FREED DD?                        00610009
         BL    TIOT#NXT                YES, JUMP                        00620009
         ICM   R6,B'0111',TIOEJFCB     SVA OF THE JFCB                  00630009
         LA    R6,16(,R6)              ADDRESS OF JFCB                  00640009
         USING INFMJFCB,R6                                              00650000
         MVC   WKCELL1,BLANKS          CLEAR WORK AREA                  00660000
         MVC   STATUS,BLANKS           CLEAR WORK AREA                  00670000
         MVC   UNITNAME,BLANKS         CLEAR WORK AREA                  00680000
         MVC   VOLSER,=C'JES     '     SYSIN/SYSOUT                     00690000
         SLR   R1,R1                   EXCP=0                           00700000
         SLR   R7,R7                   NO UCB                           00710000
         TM    TIOELINK,TIOESSDS       IS THIS A JES DATA SET?          00720000
         BO    TIOT61                  YES, JUMP                        00730000
         MVC   VOLSER,=C'DUMMY   '     DUMMY DATA SET                   00740000
         ICM   R7,B'0111',TIOEFSRT     UCB ADDRESS                      00750000
         BZ    TIOT64                  NO UCB, SKIP TCT SCAN            00760000
         USING UCBOB,R7                                                 00770000
         MVC   UNITNAME+8(4),UCBTYP    DEVICE TYPE                      00780000
         BAL   R14,GETUNIT         <== GET UNITNAME                     00790000
         MVC   VOLSER,=C'VIO     '     UNIT=VIO                         00800000
         TM    UCBOB,UCBVRDEV          IS THIS A VIO DATA SET?          00810000
         BO    TIOT41                  YES, JUMP                        00820000
         MVC   VOLSER,JFCBVOLS         NO, MOVE FIRST VOLSER            00830000
*                                                                       00840000
TIOT41   BAL   R1,TIOT41IC                                              00850009
         DC    C'NEW',AL1(JFCNEW)                                       00860000
         DC    C'MOD',AL1(JFCMOD)                                       00870000
         DC    C'SHR',AL1(JFCOLD+JFCSHARE)                              00880000
         DC    C'OLD',AL1(JFCOLD)                                       00890000
         DC    C'???',0H'0'                                             00900000
TIOT41TM TM    JFCBIND2,*-*            TEST LABEL TYPE FLAGS            00910000
*--LOOP                                                                 00920000
TIOT41IC IC    R15,3(,R1)              PICK UP MASK FOR "TM"            00930000
         EX    R15,TIOT41TM                                             00940000
         BO    TIOT41X                                                  00950000
         LA    R1,3+1(,R1)             BUMP TABLE PTR                   00960000
         CLI   0(R1),C'?'              END OF TABLE?                    00970000
         BNE   TIOT41IC                NEXT TABLE ENTRY                 00980000
*--ENDLOOP                                                              00990000
TIOT41X  MVC   STATUS,0(R1)            DISP                             01000000
*                                                                       01010000
TIOT46   CLI   UCBTBYT3,UCB3TAPE       TAPE DEVICE?                     01020000
         BNE   TIOT61                  NO, JUMP                         01030000
         BAL   R1,TIOT46IC                                              01040009
         DC    C'LTM',AL1(JFCBLTM)                                      01050000
         DC    C'BLP',AL1(JFCBLP)                                       01060000
         DC    C'SUL',AL1(JFCSUL)                                       01070000
         DC    C'AUL',AL1(JFCSUL+JFCBAL)                                01080000
         DC    C'AL ',AL1(JFCBAL)                                       01090000
         DC    C'NSL',AL1(JFCNSL)                                       01100000
         DC    C'SL ',AL1(JFCSL)                                        01110000
         DC    C'NL ',AL1(JFCNL)                                        01120000
         DC    C'???',0H'0'                                             01130000
TIOT46TM TM    JFCBLTYP,*-*            TEST LABEL TYPE FLAGS            01140000
*--LOOP                                                                 01150000
TIOT46IC IC    R15,3(,R1)              PICK UP MASK FOR "TM"            01160000
         EX    R15,TIOT46TM                                             01170000
         BO    TIOT46X                                                  01180000
         LA    R1,3+1(,R1)             BUMP TABLE PTR                   01190000
         CLI   0(R1),C'?'              END OF TABLE?                    01200000
         BNE   TIOT46IC                NEXT TABLE ENTRY                 01210000
*--ENDLOOP                                                              01220000
TIOT46X  LH    R0,JFCBFLSQ             PICK UP FILE SEQUENCE NUMBER     01230000
         LTR   R0,R0                   LABEL=0?                         01240000
         BNZ   TIOT46Y                 NO, JUMP                         01250000
         LA    R0,0001                 YES, CHANGE TO LABEL=1           01260000
TIOT46Y  STRING ((R0),,L),',',((R1),3),INTO=WKCELL1                     01270000
*                                                                       01280000
TIOT61   LA    R0,TIOENTRY             POINT TO CURRENT TIOT ENTRY      01290000
         SL    R0,TCBTIO               CHANGE ADDRESS TO OFFSET         01300000
         BAL   R14,EXCP00          <== GET EXCP COUNT IN R1             01310000
         STRING ((R1),,R5B),INTO=WKCELL2                                01320000
         CL    R1,=F'100000'           OVER 100K?                       01330000
         BL    TIOT64                  NO, JUMP                         01340000
         SLR   R0,R0                   YES, DIVIDE BY 1000              01350006
         LA    R1,500(,R1)             YES, DIVIDE BY 1000              01360006
         D     R0,=F'1000'             YES, DIVIDE BY 1000              01370006
         STRING ((R1),,R4B),'K',INTO=WKCELL2                            01380000
*                                                                       01390000
TIOT64   LTR   R7,R7                   DO WE HAVE AN UCB?               01400000
         BNZ   TIOT#PRT                YES, JUMP                        01410009
         LA    R7,BLANKS               NO, POINT TO A DUMMY UCB         01420000
TIOT#PRT BAL   R11,PUTDCB2         <== LOCATE OUTPUT RECORD             01430009
         STRING $$$,TIOEDDNM,$$$,STATUS,$$$,                          XX01440003
               VOLSER,$$$,(WKCELL2,5),$$$,JFCBDSNM,$$$,               XX01450003
               UNITNAME,$$$,UCBNAME,$$$,WKCELL1,$$$,                  XX01460003
               INTO=((R1),121)                                          01470003
*                                                                       01480000
TIOT#NXT SLR   R0,R0                   PREPARE IC                       01490009
         IC    R0,TIOELNGH             LOAD LENGTH OF CURRENT ENTRY     01500002
         ALR   R5,R0                   BUMP UP TO NEXT ENTRY            01510002
         CLI   TIOELNGH,0              IS THIS THE END?                 01520002
         BNZ   TIOT#GET                NOT YET, LOOP THROUGH TIOT       01530009
*ENDLOOP                                                                01540000
         BAL   R11,PUTDCB2             WRITE BLANK LINE                 01550003
         MVI   1(R1),C'-'              LINE OF DASHES                   01560003
         MVC   2(109,R1),1(R1)         LINE OF DASHES                   01570003
         BAL   R11,PUTDCB2             WRITE BLANK LINE                 01580003
         CLOSE MF=(E,OPENL1)           CLOSE SYSDBOUT (IF NECESSARY)    01590000
         FREEPOOL DCB2                                                  01600000
*                                                                       01610000
GOBACK   L     R13,4(,R13)                                              01620000
         L     R14,12(,R13)            RESTORE REGISTERS                01630005
         LH    R15,RETCODE                                              01640002
         LM    R0,R12,20(R13)          RESTORE REGISTERS                01650005
         BR    R14                     GOBACK TO CALLER                 01660009
*---------------------------------------------------------------------- 01670001
*        ISSUE PUT WITH AMODE=24                                      * 01680008
*---------------------------------------------------------------------* 01690008
PUTDCB2  PUT   DCB2                    WRITE SYSPRINT RECORD            01700009
         MVI   0(R1),C' '              ALL SPACES                       01710003
         MVC   1(120,R1),0(R1)         ALL SPACES                       01720003
         BR    R11                     GOBACK, RESET AMODE              01730009
*---------------------------------------------------------------------* 01740008
*        EXCP00: RETRIEVE EXCP COUNT IN TCTIOTSD AREA                 * 01750008
*---------------------------------------------------------------------* 01760008
EXCP00   L     R1,540(,0)              MY TCB                           01770000
         L     R1,TCBTCT-TCB(,R1)      TCBTCT                           01780000
         L     R1,TCTIOTBL-SMFTCT(,R1) START OF I/O MEASUREMENT TABLE   01790000
         LA    R1,TCTIODSP-TCTTIOT(,R1) FIRST DD ENTRY                  01800000
         USING TCTDCBTD,R1                                              01810000
*LOOP                                                                   01820000
EXCP11   CL    R0,TCTDCBTD             SAME TIOT OFFSET?                01830000
         BE    EXCP21                  YES, EXIT LOOP                   01840000
         ICM   R15,B'1111',TCTDCBLE    END OF TABLE ?                   01850000
         LA    R1,TCTDCBLE             NEXT LOOKUP TABLE ENTRY          01860008
         BNZ   EXCP11                  NOT YET, TRY NEXT DD ENTRY       01870000
*ENDLOOP                                                                01880000
         SLR   R0,R0                   EXCP COUNT IS ZERO               01890000
         B     EXCP99                                                   01900000
*                                                                       01910000
EXCP21   LH    R1,TCTIOTSD             OFFSET IN I/O MEASURE. TABLE     01920009
         L     R15,540(,0)             MY TCB                           01930000
         L     R15,TCBTCT-TCB(,R15)    MY TCT                           01940000
         A     R1,TCTIOTBL-SMFTCT(,R15) START OF I/O MEASUREMENT TABLE  01950000
         USING TCTDDENT,R1                                              01960000
         ICM   R0,B'1111',TCTDCTR      EXCP COUNT IN R0                 01970000
EXCP99   LR    R1,R0                   EXCP COUNT IN R1 TOO             01980000
         BR    R14                                                      01990000
         DROP  R1                                                       02000000
*---------------------------------------------------------------------* 02010008
*        CONVERT UCBTYP TO UNITNAME                                   * 02020008
*---------------------------------------------------------------------* 02030008
GETUNIT  ST    R14,TENWORDS+32         SAVE R14                         02040000
         MVI   TENWORDS+20,X'01'       RETURN A LOOK-UP VALUE (BIT7)    02050000
         MVI   TENWORDS+21,X'00'       CLEAR UNUSED BYTE                02060000
         LA    R14,UNITNAME            UNITNAME+DEVTYPE                 02070000
         LA    R15,TENWORDS+20         FLAGS                            02080000
         STM   R14,R15,TENWORDS                                         02090000
         OI    TENWORDS+4,X'80'        END-OF-LIST FLAG                 02100000
         LA    R1,TENWORDS             PARM LIST ADDRESS                02110000
         L     R14,CVTPTR              POINT TO CVT                     02120000
         L     R14,CVTLINK-CVTMAP(,R14) POINT TO LINKLIST DCB           02130000
         LINK  SF=(E,IEFEB4UV),DCB=(R14)   GET UNIT NAME                02140000
         LTR   R15,R15                                                  02150000
         BNZ   GETUNIT6                BAD RETURN CODE, QUIT            02160000
         MVI   TENWORDS+20,X'20'       RETURN A UNIT NAME (BIT2)        02170000
         LA    R1,TENWORDS             PARM LIST ADDRESS                02180000
         LINK  SF=(E,IEFEB4UV)         GET UNIT NAME                    02190001
         LTR   R15,R15                                                  02200000
         BZ    GETUNIT9                GOOD RETURN CODE, GOBACK         02210000
GETUNIT6 MVC   UNITNAME,BLANKS         CONVERSION DID NOT WORK          02220000
GETUNIT9 L     R14,TENWORDS+32         RESTORE R14                      02230000
         BR    R14                                                      02240000
*---------------------------------------------------------------------* 02250008
*        WORK AREAS                                                   * 02260008
*---------------------------------------------------------------------* 02270008
BLANKS   DC    CL40' '                                                  02280003
$$$      DC    C' | '                                                   02290003
         PRINT NOGEN                                                    02300001
IEFEB4UV LINK  EP=IEFEB4UV,SF=L                                         02320000
DCB2     DCB   DSORG=PS,MACRF=PL,DDNAME=SYSDBOUT,RECFM=FBA,LRECL=121    02330000
OPENL1   OPEN  (DCB2,OUTPUT),MF=L                                       02340000
S99RB    DC    A(X'14010000',0,*+12,0,0)                                02350000
         DC    A(S99TXT01,X'80000000'+S99TXT18)                         02360000
S99TXT01 DC    AL2(X'01',1,8),CL8'SYSDBOUT '  DDNAME                    02370000
S99TXT18 DC    AL2(X'18',0)                   SYSOUT=*                  02380000
RETCODE  DS    H                                                        02390000
WKCELL1  DS    D                                                        02400000
WKCELL2  DS    D                                                        02410000
STATUS   DS    C'OLD'                                                   02420000
VOLSER   DS    CL6                                                      02430000
UNITNAME DS    CL8,XL4                                                  02440000
TENWORDS DS    10F                                                      02450000
*-------------------------------------------------------------------    02460000
*        DSECTS FOR MVS SYSTEM CONTROL BLOCKS                           02470000
*               SOME OF THESE MACRO INSTRUCTION WILL BE FOUND           02480000
*               IN SYS1.AMODGEN INSTEAD OF SYS1.MACLIB.                 02490000
*-------------------------------------------------------------------    02500000
         IKJTCB LIST=NO    TCB MAPPING       TASK CONTROL BLOCK         02510000
         IEFTCT            TCT MAPPING       TIMING CONTROL TABLE       02520007
TIOT     DSECT                                                          02530000
         IEFTIOT1          TIOT MAPPING      TASK INPUT-OUTPUT TABLE    02540007
         IKJRB             PRB DSECT         PROGRAM REQUEST BLOCK      02550007
         IHACDE            CDE DSECT         CONTENTS DIRECTORY ENTRY   02560007
         IEFJFCBN                      JOB FILE CONTROL BLOCK           02570007
**       IEFJESCT                      JES COMMUNICATION TABLE          02580009
         IEZJSCB                       JOB STEP CONTROL BLOCK           02590007
         CVT   DSECT=YES                                                02600000
         IEFUCBOB LIST=NO,PREFIX=NO    UCB DSECT                        02610000
         IHAASCB                       ADDRESS SPACE CONTROL BLOCK      02620000
         IRAOUCB                       SRM PARMS                        02630000
         STRING GENERATE                                                02640007
*        YREGS             REGISTER EQUATES                             02650009
R0       EQU   0                                                        02660009
R1       EQU   1                                                        02670009
R2       EQU   2                                                        02680009
R3       EQU   3                                                        02690009
R4       EQU   4                                                        02700009
R5       EQU   5                                                        02710009
R6       EQU   6                                                        02720009
R7       EQU   7                                                        02730009
R8       EQU   8                                                        02740009
R9       EQU   9                                                        02750009
R10      EQU   10                                                       02760009
R11      EQU   11                                                       02770009
R12      EQU   12                                                       02780009
R13      EQU   13                                                       02790009
R14      EQU   14                                                       02800009
R15      EQU   15                                                       02810009
         END                                                            02820000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  02850008
//         DD DSN=SYS1.AMODGEN,DISP=SHR                                 02860007
//         DD DSN=GILBERT.FILE183.PDS,DISP=SHR          STRINGXF        02870009
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   02880009
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   02890009
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   02900009
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      02910009
//SYSPRINT DD SYSOUT=*                                                  02920007
//*                                                                     02930000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  02940007
//SYSPRINT DD SYSOUT=*                                                  02950007
//SYSUDUMP DD SYSOUT=*                                                  02960008
//SYSDBOUT DD SYSOUT=*                                                  02970008
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       02980009
//                                                                      02990008
//                                                                      03000008
//LKED    EXEC PGM=IEWL,PARM='MAP,REUS'                                 03010000
//SYSPRINT DD SYSOUT=*                                                  03020007
//SYSLIN   DD DSN=*.HLASM.SYSLIN,DISP=(OLD,PASS)                        03030008
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)                                    03040007
//SYSLMOD  DD DSN=GSFSOFT.PRISM-CS.LOAD(TCTDCTR),DISP=SHR               03050008
./ ADD NAME=TRIMMAC  0212-90102-06210-1437-00502-00050-00212-CBT472
//GILBERTT JOB (ACCT#),TRIMMAC,                        OS/VS2           00010012
// NOTIFY=&SYSUID,                                                      00020000
// CLASS=A,MSGCLASS=X,COND=(1,LT)                                       00030003
//*                                                                     00040000
//*     THIS PROGRAM CREATES A REDUCED-SIZE MACLIB THAT MAY BE          00050000
//*     USED INSTEAD OF THE SYS1.MACLIB/SYS1.AMODGEN CONCATENATION      00060000
//*     TO IMPROVE THE PERFORMANCE OF THE ASSEMBLER.                    00070009
//*                                                                     00080000
//*     THE "TRIMMAC" LIBRARY IS BUILT AS FOLLOWS:                      00090000
//*                                                                     00100000
//*        1. SELECTED MACROS ARE READ FROM DDNAME "SYSLIB",            00110000
//*           TRIMMED FROM PL/AS CODE AND OTHER COMMENT LINES,          00120000
//*           THEN COPIED TO A TEMPORARY DATA SET.                      00130000
//*                                                                     00140000
//*        2. THE SORT UTILITY IS INVOKED TO SORT THE MACROS            00150000
//*           IN ASCENDING SEQUENCE OF THEIR SIZE.                      00160000
//*                                                                     00170000
//*        3. THE SORTED MACROS ARE WRITTEN TO SYSPUNCH                 00180000
//*           AS AN IEBUPDTE SYSIN STREAM.                              00190000
//*                                                                     00200000
//*        4. IEBUPDTE IS EXECUTED IN THE LAST STEP TO                  00210000
//*           LOAD THE MACROS INTO THE "TRIMMAC" LIBRARY,               00220000
//*           THE SMALLEST MACROS BEING LOADED FIRST.                   00230000
//*                                                                     00240000
//*    YOU MAY CUSTOMIZE THE MEMBER LIST AND THE INPUT                  00250000
//*    CONCATENATION TO ADD OTHER MACROS AND/OR MACRO                   00260000
//*    LIBRARIES, AS NEEDED.                                            00270000
//*                                                                     00280000
//*    USE THE "TRIMMAC" LIBRARY INSTEAD OF THE MACLIB/AMODGEN          00290000
//*    CONCATENATION TO ASSEMBLE A PROGRAM AND COMPARE THE              00300000
//*    BEFORE/AFTER VALUES FOR THE ELAPSED TIME, EXCP COUNT AND         00310000
//*    I/O CONNECT TIME.  EXPECT SAVINGS OF 30 TO 60 PERCENT WHEN       00320000
//*    "TRIMMAC" IS USED.                                               00330000
//*                                                                     00340000
//*    MY OS/VS2 "TRIMMAC" PDS IS CURRENTLY ALLOCATED AS FOLLOWS:       00350012
//*                                                                     00360000
//*          UNIT=3390,SPACE=(CYL,(12,,12)),                            00370012
//*          DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)                      00380000
//*                                                                     00390000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00400012
TRIMMAC  CSECT                                                          00420000
         SAVE  (14,12),,'TRIMMAC &SYSDATE '                             00430000
         LR    R12,R15                                                  00440008
         USING TRIMMAC,R12                                              00450008
         GETMAIN R,LV=DYNAML                                            00460000
         ST    R1,8(,R13)                                               00470000
         ST    R13,4(,R1)                                               00480000
         LM    R13,R1,8(R13)           SET R13, RELOAD R1               00490000
         USING DYNAM,R13                                                00500000
         XC    TRTBL,TRTBL             BUILD TRT TABLE (FIRST BLANK)    00510000
         MVI   TRTBL+C' ',C' '         BUILD TRT TABLE (FIRST BLANK)    00520000
         MVI   TRTNBL,1                BUILD TRT TABLE (1ST NON-BLANK)  00530000
         MVC   TRTNBL+1(255),TRTNBL    BUILD TRT TABLE (1ST NON-BLANK)  00540000
         MVI   TRTNBL+C' ',0           BUILD TRT TABLE (1ST NON-BLANK)  00550000
*********************************************************************** 00560000
*                                                                       00570000
*        SECTION 1                                                      00580000
*                                                                       00590000
*              READ MACRO NAMES FROM DDNAME=MEMBERS                     00600000
*              READ MACRO TEXT FROM DDNAME=SYSLIB                       00610000
*              WRITE SELECTED LINES TO DDN=SORTIN                       00620000
*              BUILD TABLE WITH THE NUMBER OF LINES FOR EACH MEMBER     00630000
*                                                                       00640000
*********************************************************************** 00650000
         OPEN  (MEMBERS,,SYSLIB,,SORTIN,OUTPUT,SYSPRINT,OUTPUT)         00660000
         GETBUF SYSLIB,(R3)            GET A BUFFER FROM POOL           00670000
         ST    R3,DECB1+12             STORE ITS ADDRESS INTO DECB      00680000
         LA    R8,TABLE                START OF TABLE                   00690000
*LOOP                                                                   00700000
L1GET    GET   MEMBERS                 GET A MACRO NAME                 00710000
         CLI   0(R1),C'*'              IS THIS A COMMENT LINE?          00720000
         BE    L1GET                   YES, IGNORE IT                   00730000
         MVC   BLDLIST(4),=Y(1,12)     HEADER                           00740000
         MVC   MEMBER,0(R1)            MEMBER NAME                      00750000
         BLDL  SYSLIB,BLDLIST          LOCATE MEMBER                    00760000
         LTR   R15,R15                                                  00770000
         BNZ   L1NOTF                  NOT FOUND, ERROR                 00780000
         ZAP   RECNO,=P'0'             RESET COUNTER                    00790000
         ZAP   DWD,=P'0'               INIT COUNTER & FLAGS             00800000
         FIND  SYSLIB,TTRN,C           POINT TO START OF MEMBER         00810000
*--LOOP                                                                 00820000
L1GETB   READ  DECB1,SF,SYSLIB,*-*,'S' READ A BLOCK                     00830000
         CHECK DECB1                                                    00840000
         L     R3,DECB1+12             BUFFER ADDRESS FROM DECB         00850000
*----LOOP                                                               00860000
L1GETR   AP    RECNO,=P'1'             COUNT INPUT RECORDS              00870000
         BAL   R14,SELECT              SELECT/SKIP RECORDS              00880000
         B     L1NEXTR              +0 RECORD SHOULD BE IGNORED         00890000
         PUT   SORTIN               +4 RECORD SHOULD BE WRITTEN         00900000
         MVC   0(72,R1),0(R3)          MOVE RECORD                      00910000
         MVC   72(8,R1),MEMBER         MOVE MEMBER NAME                 00920000
         AP    DWD+4(4),=P'1'          COUNT WRITTEN RECORDS            00930000
L1NEXTR  LH    R14,SYSLIB+82           R14 CONTAINS RECORD LENGTH       00940000
         L     R15,DECB1+12            ADDRESS OF BUFFER                00950000
         AH    R15,SYSLIB+62           ADD BLKSIZE FROM DCB             00960000
         L     R1,DECB1+16             IOB ADDRESS FROM DECB            00970000
         SH    R15,14(,R1)             SUBTRACT RESIDUAL COUNT          00980000
         SLR   R15,R14                 LAST BYTE OF CURRENT BLOCK       00990000
         BXLE  R3,R14,L1GETR           LOOP UNTIL END-OF-BLOCK          01000000
*----ENDLOOP                                                            01010000
         B     L1GETB                  NEXT BLOCK                       01020000
*--ENDLOOP                                                              01030000
L1EOM    ZAP   DWD,DWD                 ANY LINES SELECTED?              01040000
         BZ    L1NOTF                  NO, IGNORE                       01050000
         MVC   MESSAGE+08(8),MEMBER    BUILD PRINT RECORD               01060000
         OI    DWD+7,15                NO SIGN                          01070000
         UNPK  MESSAGE+29(5),DWD+5(3)  BUILD PRINT RECORD               01080000
         OI    RECNO+3,15              NO SIGN                          01090000
         UNPK  MESSAGE+59(5),RECNO+1(3) BUILD PRINT RECORD              01100000
         PUT   SYSPRINT,MESSAGE        WRITE PRINT RECORD               01110000
         MVC   0(4,R8),DWD+4           MOVE NUMBER OF LINES TO TABLE    01120000
         LA    R8,4(,R8)               BUMP POINTER                     01130000
L1NOTF   B     L1GET                   NEXT SYSIN RECORD (MACRO NAME)   01140000
*ENDLOOP                                                                01150000
L1EOD    CLOSE (MEMBERS,,SYSLIB,,SORTIN)                                01160000
         FREEPOOL MEMBERS                                               01170000
         FREEPOOL SYSLIB                                                01180000
*********************************************************************** 01190000
*        SECTION 2: UPDATE RECORDS TO ADD MACRO SIZE IN POS 81-84       01200000
*********************************************************************** 01210000
         OPEN  (SORTIN,UPDAT)                                           01220000
         LA    R8,TABLE-4              START OF TABLE                   01230000
*LOOP                                                                   01240000
L2GET    GET   SORTIN                                                   01250000
         LTR   R3,R1                   PASS RECORD ADDRESS              01260000
         BZ    L2EOD                   EOJ, EXIT                        01270000
         CLC   DWD,72(R3)              SAME MEMBER?                     01280000
         BE    L2PUT                   YES, JUMP                        01290000
         MVC   DWD,72(R3)              NO, KEEP NAME                    01300000
         LA    R8,4(,R8)               NEXT ENTRY IN TABLE              01310000
L2PUT    MVC   80(4,R3),0(R8)          NUMBER OF LINES                  01320000
         PUTX  SORTIN                  REWRITE RECORD                   01330000
         B     L2GET                                                    01340000
*ENDLOOP                                                                01350000
L2EOD    CLOSE SORTIN                                                   01360000
         FREEPOOL SORTIN                                                01370000
*********************************************************************** 01380000
*        SECTION 3: SORT MACROS BY SIZE, WRITE IEBUPDTE INPUT           01390000
*********************************************************************** 01400000
         LINK  EP=SORT,PARAM=H0,VL=1   SORT WORK DATA SET               01410000
         OPEN  (SORTOUT,,SYSPUNCH,OUTPUT)                               01420000
         MVI   DWD,0                   FIRST TIME                       01430000
*LOOP                                                                   01440000
L3GET    GET   SORTOUT                                                  01450000
         LTR   R3,R1                   PASS RECORD ADDRESS              01460000
         BZ    L3EOD                   EOJ, EXIT                        01470000
         CLC   DWD,72(R1)              SAME MEMBER?                     01480000
         BE    L3PUT                   YES, JUMP                        01490000
         MVC   DWD,72(R1)              NO, KEEP NAME                    01500000
         PUT   SYSPUNCH                                                 01510000
         MVC   0(13,R1),=C'./ ADD NAME= '                               01520000
         MVC   13(67,R1),12(R1)        BLANK OUT REST OF RECORD         01530000
         MVC   12(8,R1),DWD            MOVE MEMBER NAME                 01540000
L3PUT    PUT   SYSPUNCH                                                 01550000
         MVC   0(80,R1),0(R3)          MOVE RECORD                      01560000
         B     L3GET                                                    01570000
*ENDLOOP                                                                01580000
L3EOD    CLOSE (SORTOUT,,SYSPUNCH,,SYSPRINT)                            01590000
         L     R13,4(,R13)                                              01600000
         RETURN (14,12),RC=00                                           01610000
*                                                                       01620000
*        RECORD SELECTION ROUTINE                                       01630000
*                                                                       01640000
SELECT   TM    DWD,1                   MEND CARD FOUND YET?             01650000
         BOR   R14                     YES, SKIP TEXT AFTER MEND CARD   01660000
         TM    DWD,2                   CHECK CONTINUATION FLAG          01670000
         BO    L1SKIP                  JUMP IF CONTINUED COMMENT        01680000
         TM    DWD,4                   CHECK CONTINUATION FLAG          01690000
         BO    L1CONT                  JUMP IF CONTINUED INSTRUCTION    01700000
         CLI   0(R3),C'*'              ASM COMMENT                      01710000
         BE    L1SKIP                  JUMP IF ASM COMMENT LINE         01720000
         CLI   1(R3),C'*'              MACRO COMMENT                    01730000
         BE    L1SKIP                  JUMP IF MACRO COMMENT LINE       01740000
         CLI   0(R3),C'/'              IS THIS A JCL LINE?              01750002
         BE    L1SKIP                  YES, IGNORE IT                   01760002
*                                                                       01770000
         TRT   0(16,R3),TRTBL          FIND FIRST BLANK                 01780000
         BZ    L1CONT                  FAILED, WRITE RECORD             01790000
         TRT   0(64,R1),TRTNBL         FIND FIRST NON-BLANK             01800000
         BZ    L1CONT                  FAILED, WRITE RECORD             01810000
         CLC   =C'MEND ',0(R1)         CHECK OPCODE                     01820000
         BNE   L1SPACE                 JUMP IF NOT 'MEND'               01830000
         OI    DWD,1                   REMEMBER "MEND" CARD FOUND       01840000
L1SPACE  CLI   0(R3),C' '              ANY LABEL ON THIS LINE?          01850000
         BNE   L1CONT                  YES, WRITE IT                    01860000
         CLC   =C'SPACE ',0(R1)        CHECK OPCODE                     01870000
         BE    L1SKIP                  JUMP IF 'SPACE'                  01880000
         CLC   =C'EJECT ',0(R1)        CHECK OPCODE                     01890000
         BNE   L1CONT                  RECORD SHOULD BE WRITTEN         01900000
*                                                                       01910000
L1SKIP   NI    DWD,255-2               RESET CONTINUATION FLAG          01920000
         CLI   71(R3),C' '             CHECK FOR A CONTINUATION         01930000
         BER   R14                     QUIT WITH RC4 IF NO CONTINUATION 01940000
         OI    DWD,2                   SET CONTINUATION FLAG            01950000
         BR    R14                     GOBACK                           01960000
*                                                                       01970000
L1CONT   NI    DWD,255-4               RESET CONTINUATION FLAG          01980000
         CLI   71(R3),C' '             CHECK FOR A CONTINUATION         01990000
         BE    4(,R14)                 GOBACK, WRITE RECORD             02000000
         OI    DWD,4                   SET CONTINUATION FLAG            02010000
         B     4(,R14)                 GOBACK, WRITE RECORD             02020000
H0       DC    H'0'                                                     02030000
MESSAGE  DC   C' MEMBER 12345678 PROCESSED - 12345 RECORDS SELECTED OUT+02040000
                OF 12345'                                               02050000
MEMBERS  DCB   DSORG=PS,MACRF=GL,DDNAME=MEMBERS,EODAD=L1EOD             02060000
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X02070005
               RECFM=FBA,LRECL=L'MESSAGE                                02080005
SYSPUNCH DCB   DSORG=PS,MACRF=PL,DDNAME=SYSPUNCH,RECFM=FB,LRECL=80      02090000
SORTIN   DCB   DSORG=PS,MACRF=(GL,PL),DDNAME=SORTIN,EODAD=EOD11,       X02100000
               RECFM=FB,LRECL=72+8+4                                    02110000
SORTOUT  DCB   DSORG=PS,MACRF=(GL,PL),DDNAME=SORTOUT,EODAD=EOD11        02120000
EOD11    SLR   R1,R1                                                    02130000
         BR    R14                                                      02140000
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,EODAD=L1EOM,             X02150000
               BUFNO=1,NCP=1,RECFM=FB,LRECL=80                          02160000
DYNAM    DSECT                                                          02170000
         DS    18F                                                      02180000
DWD      DS    D                                                        02190000
RECNO    DS    PL4                                                      02200000
BLDLIST  DS    Y(1,12),CL8,4X          BLDL/FIND                        02210000
MEMBER   EQU   BLDLIST+4,8             BLDL/FIND                        02220000
TTRN     EQU   MEMBER+8,4              BLDL/FIND                        02230000
TRTBL    DS    XL256                   TRT TABLE (FIND FIRST BLANK)     02240000
TRTNBL   DS    XL256                   TRT TABLE (FIND FIRST NON-BLANK) 02250000
TABLE    DS    999PL4                  RECORD NUMBERS                   02260000
DYNAML   EQU   *-DYNAM                                                  02270000
*        YREGS                                                          02280012
R0       EQU   0                                                        02290012
R1       EQU   1                                                        02300012
R2       EQU   2                                                        02310012
R3       EQU   3                                                        02320012
R4       EQU   4                                                        02330012
R5       EQU   5                                                        02340012
R6       EQU   6                                                        02350012
R7       EQU   7                                                        02360012
R8       EQU   8                                                        02370012
R9       EQU   9                                                        02380012
R10      EQU   10                                                       02390012
R11      EQU   11                                                       02400012
R12      EQU   12                                                       02410012
R13      EQU   13                                                       02420012
R14      EQU   14                                                       02430012
R15      EQU   15                                                       02440012
         END                                                            02450000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  02470000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   02480012
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   02490012
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   02500012
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      02510012
//SYSPRINT DD SYSOUT=*                                                  02520000
//*                                                                     02530000
//GO      EXEC PGM=LOADER,PARM=NOPRINT                                  02540000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       02550012
//SYSPRINT DD SYSOUT=*                                                  02560000
//SYSOUT   DD SYSOUT=*                                                  02570000
//SORTIN   DD UNIT=SYSALLDA,SPACE=(CYL,20),DSN=&&SORTIN                 02580009
//SORTOUT  DD DSN=*.SORTIN,VOL=REF=*.SORTIN,DISP=(OLD,DELETE)           02590009
//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,25),DSN=&&SORTWK01               02600009
//SYSPUNCH DD UNIT=SYSALLDA,SPACE=(CYL,20),DISP=(,PASS)                 02610009
//SYSIN    DD *                                                         02620000
 SORT FIELDS=(81,4,CH,A),EQUALS                                         02630000
/*                                                                      02640012
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR,           <== INPUT LIBRARY     02660005
// UNIT=SYSALLDA,VOL=SER=Z5RES1                                         02670012
//         DD DSN=SYS1.AMODGEN,DISP=SHR,          <== INPUT LIBRARY     02680012
// UNIT=SYSALLDA,VOL=SER=Z5RES1                                         02690012
//         DD DSN=SYS1.ATSOMAC,DISP=SHR,          <== INPUT LIBRARY     02700012
// UNIT=SYSALLDA,VOL=SER=Z5RES1                                         02710012
//         DD DSN=SYS1.SHASMAC,DISP=SHR           <== INPUT LIBRARY     02720011
//* THESE ARE MY OWN LIBRARIES                                          02730000
//         DD DSN=GILBERT.GSF.SOURCE,DISP=SHR     <== INPUT LIBRARY     02740003
//MEMBERS  DD *                                                         02750000
ABEND              MVS                                                  02760000
ACB                DFP VSAM                                             02770000
ACBVS              DFP VSAM                                             02780000
ATTACH             MVS                                                  02790007
BLDL               DFP                                                  02800007
CALL               MVS                                                  02810007
CALLTSSR           TSO/E                                                02820007
CAMLST             DFP                                                  02830007
CHECK              DFP                                                  02840007
CIRB               MVS                                                  02850007
CLOSE              DFP                                                  02860007
CVT                MVS                                                  02870007
DCB                DFP                                                  02880007
DCBD               DFP                                                  02890007
DEBCHK             DFP                                                  02900007
DELETE             MVS                                                  02910007
DEQ                MVS                                                  02920007
DETACH             MVS                                                  02930007
DEVTYPE            DFP                                                  02940007
DOM                                                                     02950007
DYNALLOC           MVS                                                  02960007
ENDREQ             DFP VSAM                                             02970007
ENQ                MVS                                                  02980007
ERASE              DFP VSAM                                             02990007
ESTAE              MVS                                                  03000007
EXCP               DFP                                                  03010007
EXLST              DFP VSAM                                             03020001
EXLVS              DFP VSAM                                             03030001
EXTRACT            BCP                                                  03040007
FEOV               DFP                                                  03050007
FIND               DFP BPAM                                             03060007
FREEMAIN           MVS                                                  03070007
FREEPOOL           DFP                                                  03080007
GET                DFP                                                  03090007
GETBUF             DFP                                                  03100007
GETLINE            TSO                                                  03110008
GETMAIN            MVS                                                  03120007
GTSIZE             TSO                                                  03130007
ICHMM                                                                   03140007
ICHPRCVT           RACF                                                 03150007
ICHSAFP            RACROUTE                                             03160007
IDACBACB           DFP VSAM                                             03170007
IDACB1             DFP VSAM                                             03180007
IDACB2             DFP VSAM                                             03190007
IDACB3             DFP VSAM                                             03200007
IDAVSACB           DFP VSAM                                             03210007
IDAVSCB3           DFP VSAM                                             03220007
IDAVSOPT           DFP VSAM                                             03230007
IDAVSRPL           DFP VSAM                                             03240007
IDENTIFY           MVS                                                  03250007
IECDDCE            MVS IOS                                              03260007
IECDIOCM           MVS IOS                                              03270007
IECDPPL            DFP PURGE PARM LIST                                  03280007
IECSDSL1           DFP                                                  03290007
IEEBASEA           MVS MASTER SCHED RES DATA AREA                       03300007
IEECHAIN           MVS CSCB                                             03310007
IEECUCM            MVS UNIT CONTROL MODULE                              03320007
IEESMCA            SMF                                                  03330007
IEFAJCTB           DFP JOB CONTROL BLOCK + ACCOUNT TABLE                03340007
IEFALLCT           MVS                                                  03350007
IEFASCTB           DFP STEP CONTROL BLOCK                               03360007
IEFASIOT           DFP STEP I/O TABLE                                   03370007
IEFJCTX            MVS JCT EXTENSION                                    03380007
IEFJESCT           MVS                                                  03390007
IEFJFCBN           DFP                                                  03400007
IEFJFCBX           DFP                                                  03410010
IEFJSCVT           MVS                                                  03420007
IEFJSSIB           MVS                                                  03430007
IEFJSSOB           MVS                                                  03440007
IEFJSSVT           MVS                                                  03450007
IEFQMNGR           MVS SWA MANAGER                                      03460007
IEFSSCS            CANCEL/STATUS                                        03470007
IEFSSOBH           MVS                                                  03480007
IEFSSREQ           MVS                                                  03490007
IEFTCT             SMF                                                  03500007
IEFTIOT1           MVS                                                  03510007
IEFUCBOB           MVS                                                  03520007
IEFZB4D0                      DYNALLOC REQUEST BLOCK                    03530007
IEFZB4D2                      DYNALLOC TEXT UNIT KEYS                   03540007
IEFZB505           DFP                                                  03550007
IEZATTCH           MVS                                                  03560007
IEZBITS            MVS BIT0-BIT7                                        03570007
IEZDEB             DFP                                                  03580007
IEZIOB             DFP                                                  03590007
IEZJSCB            MVS                                                  03600007
IFGACB             DFP VSAM                                             03610007
IFGACBVS           DFP VSAM                                             03620007
IFGRPL             DFP VSAM                                             03630007
IFGRPLVS           DFP VSAM                                             03640007
IHAACEE            RACF                                                 03650007
IHAASCB            MVS                                                  03660007
IHAASVT            MVS                                                  03670007
IHAASXB            MVS                                                  03680007
IHACDE             MVS                                                  03690007
IHADECB            DFP                                                  03700009
IHADSAB            DFP                                                  03710007
IHADVA             DFP                                                  03720007
IHAGDA             MVS CSV                                              03730007
IHALDA             MVS CSV                                              03740007
IHALLE             MVS                                                  03750007
IHALPDE            MVS                                                  03760007
IHAOUXB            SRM                                                  03770007
IHAPDS             DFP                                                  03780007
IHAPSA             MVS                                                  03790007
IHARB              MVS                                                  03800007
IHARMPL            MVS (RESMGR)                                         03810007
IHASCA             MVS SPIE/ESPIE CONTROL AREA                          03820007
IHASCB             MVS STAE CONTROL BLOCK                               03830007
IHASCVT            MVS                                                  03840007
IHASDWA            MVS                                                  03850007
IHASPQE            MVS                                                  03860007
IHAXTLST           MVS                                                  03870007
IHBERMAC           DFP                                                  03880007
IHBINNRA           MVS                                                  03890007
IHBINNRB           MVS                                                  03900007
IHBOPLST           MVS                                                  03910007
IHBRDWRD           DFP BSAM/BPAM                                        03920007
IHBRDWRS           DFP BSAM/BPAM                                        03930007
IHB01              DFP                                                  03940007
IKJCPPL            TSO/E                                                03950007
IKJECT             TSO/E                                                03960007
IKJEFFDF           TSO/E DAIRFAIL                                       03970007
IKJEFFMT           TSO/E                                                03980007
IKJENDP            TSO/E                                                03990007
IKJGTPB            TSO/E                                                04000008
IKJIDENT           TSO/E                                                04010007
IKJIOPL            TSO/E                                                04020008
IKJKEYWD           TSO/E                                                04030007
IKJLSD             TSO/E                                                04040007
IKJNAME            TSO/E                                                04050007
IKJPARM            TSO/E                                                04060007
IKJPOSIT           TSO/E                                                04070007
IKJPPL             TSO/E                                                04080007
IKJPSCB            TSO/E                                                04090007
IKJRB              MVS                                                  04100007
IKJRLGB            TSO/E                                                04110007
IKJRLSA            TSO/E                                                04120007
IKJSUBF            TSO/E                                                04130007
IKJTAXE            TSO/E                                                04140007
IKJTCB             MVS                                                  04150007
IKJTMPWA           TSO/E                                                04160007
IKJTPL             TSO/E                                                04170007
IKJTSB             TSO/E                                                04180007
IKJTSMSG           TSO/E                                                04190007
IKJUPT             TSO/E                                                04200007
IKTTCAST           TSO/VTAM                                             04210007
IKTTSBX            TSO/VTAM                                             04220007
IRAOUCB            MVS                                                  04230007
LINK               MVS                                                  04240000
LOAD               MVS                                                  04250000
LOCATE             DFP                                                  04260000
MGCR                                                                    04270004
MODESET            MVS                                                  04280000
NOTE               DFP                                                  04290000
OBTAIN             DFP                                                  04300000
OPEN               DFP                                                  04310000
POINT              DFP                                                  04320000
POST               MVS                                                  04330000
PURGE              DFP                                                  04340000
PUT                DFP                                                  04350000
PUTLINE            TSO                                                  04360001
PUTX               DFP                                                  04370000
RACHECK            RACF                                                 04380007
RACINIT            RACF                                                 04390007
RACROUTE           MVS/SAF RACF                                         04400001
RDJFCB             DFP                                                  04410000
READ               DFP                                                  04420000
RELSE              DFP                                                  04430000
RESERVE            MVS                                                  04440000
RETURN             MVS                                                  04450000
RPL                DFP VSAM                                             04460000
RPLVS              DFP VSAM                                             04470000
SAVE               MVS                                                  04480000
SETLOCK            MVS                                                  04490000
SETRP              MVS                                                  04500000
SHOWCB             DFP VSAM                                             04510000
SPIE               MVS                                                  04520000
STACK              TSO/E                                                04530004
STAE               OS/360                                               04540000
STATUS             MVS                                                  04550000
STAX               TSO/E                                                04560002
STCOM              TSO/E                                                04570006
STFSMODE           TSO/E                                                04580000
STIMER             MVS                                                  04590000
STLINENO           TSO/E                                                04600007
STTMPMD            TSO/E                                                04610000
SYNADAF            DFP                                                  04620000
SYNADRLS           DFP                                                  04630000
SYNCH              MVS                                                  04640000
SYSEVENT           SRM                                                  04650002
TCLEARQ            TSO/E                                                04660007
TESTAUTH           MVS                                                  04670007
TESTCB             DFP VSAM                                             04680007
TGET               TSO/E                                                04690006
TIME               MVS                                                  04700000
TPUT               TSO/E                                                04710000
TRKCALC            DFP                                                  04720000
TRUNC              DFP                                                  04730000
TTIMER             MVS                                                  04740000
WAIT               MVS                                                  04750000
WRITE              DFP                                                  04760000
WTO                MVS                                                  04770000
XCTL               MVS                                                  04780000
*                                                                       04790000
*        THESE ARE MACROS FROM MY OWN LIBRARIES                         04800000
*                                                                       04810000
STRING             ---                                                  04820000
//*-------------------------------------------------------------------- 04830000
//LOADPROC PROC DS='GILBERT.TRIMMAC',            <== DSNAME             04840007
//            UNIT=3390,                         <== UNIT NAME          04850000
//          VOLSER=,                             <== VOL SER            04860000
//         BLKSIZE=0                             <== BLOCK SIZE (SDB)   04870000
//DELOLD  EXEC PGM=IEFBR14                                              04880000
//DELOLD   DD DSN=&DS,UNIT=&UNIT,SPACE=(1,0),DISP=(MOD,DELETE)          04890000
//*                                                                     04900000
//LOAD    EXEC PGM=IEBUPDTE,PARM=NEW                                    04910000
//SYSIN    DD DSN=*.GO.SYSPUNCH,DISP=(OLD,PASS)                         04920000
//SYSUT2   DD DSN=&DS,DISP=(,CATLG,DELETE),                             04930000
// UNIT=&UNIT,                                                          04940000
// SPACE=(CYL,(20,1,20),RLSE,CONTIG),                                   04950008
// VOL=SER=&VOLSER,                                                     04960000
// DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=&BLKSIZE)                    04970000
//SYSPRINT DD DUMMY                                                     04980000
//LOADPROC PEND                                                         04990000
//*-------------------------------------------------------------------- 05000000
//TRIMMAC  EXEC LOADPROC                          <== EXEC PROC         05010000
//                                                                      05020004
./ ADD NAME=UNITAFF  0202-81005-06210-1156-00351-00046-00056-CBT472
//GILBERTA JOB (ACCT#),UNITAFF,                                         00010000
// NOTIFY=&SYSUID,                                                      00020000
//*RESTART=UNITAFF,                                                     00030000
// CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00040000
//ASMXF EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,NOESD,NORLD,ALIGN,NOXREF)   00050002
*********************************************************************** 00070000
*                                                                     * 00080000
* MODULE NAME = UNITAFF                                               * 00090000
*                                                                     * 00100000
* DESCRIPTIVE NAME = Dynamically set UNIT=AFF for input tape files    * 00110000
*                                                                     * 00120000
* FUNCTION = This program was originally designed to reduce the       * 00130000
*            number of tape drives used by user-submitted SAS jobs.   * 00140000
*            It scans the SWA of the next step and changes some of    * 00150000
*            the SIOT pointers to force all input tape data sets to   * 00160000
*            use the same drive.                                      * 00170000
*                                                                     * 00180000
* STATUS = R202                                                       * 00190002
*                                                                     * 00200000
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        * 00210000
*                                                                     * 00220000
* DEPENDENCIES = OS/VS2                                               * 00230002
*                                                                     * 00240000
* AUTHORIZATION = APF                                                 * 00250000
*                                                                     * 00260000
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            * 00270000
*                                                                     * 00280000
*    PROCESSOR = IBM OS/ASSEMBLER XF                                  * 00290002
*                                                                     * 00300000
*    MODULE SIZE = 3K                                                 * 00310000
*                                                                     * 00320000
*    ATTRIBUTES = NOREUS, PROBLEM STATE, KEY ZERO                     * 00330002
*                                                                     * 00340000
* OPERATION = UNITAFF must be executed immediately before the step    * 00350000
*             to process (SAS, SORT, or any other program that reads  * 00360000
*             a variable number of tape files, one at a time).        * 00370000
*                                                                     * 00380000
*             Sample JCL:                                             * 00390000
*                                                                     * 00400000
*               //UNITAFF EXEC PGM=UNITAFF                            * 00410000
*               //STEPLIB  DD DSN=SYS2.AUTHLIB,DISP=SHR               * 00420000
*               //*                                                   * 00430000
*               //STEP53  EXEC PGM=SAS                                * 00440000
*               //OSIN     DD DSN=USER1.X,DISP=SHR                    * 00450000
*               //         DD DSN=UPQE.DQE40530(-1),DISP=SHR          * 00460000
*               //OSIN2    DD DSN=UPQR.DQR02150(0),DISP=SHR           * 00470000
*               //OSIN3    DD DSN=USER1.X,DISP=SHR                    * 00480000
*               //         DD DSN=UPBG.DBGA0240(-1),DISP=SHR          * 00490000
*               //OSIN4    DD DSN=USER1.X,DISP=SHR                    * 00500000
*               //         DD DSN=USER1.YY,DISP=SHR                   * 00510000
*               //         DD DSN=UPQR.DQR02140(-1),DISP=SHR          * 00520000
*                                                                     * 00530000
*             This program only supports cataloged data sets;         * 00540000
*             relative generation numbers are handled                 * 00550000
*             correctly via the GDGNT.                                * 00560000
*                                                                     * 00570000
*             No distinction is made between 3420 and 3480 types,     * 00580000
*             which will cause incorrect results if the input to      * 00590000
*             a step is mixed.                                        * 00600000
*                                                                     * 00610000
*Changes:                                                             * 00620001
*$101 Fix SWA=BELOW bug                                               * 00630001
*$202 OS/VS2                                                          * 00640002
*********************************************************************** 00650000
         LCLC  &STR                                                     00660002
UNITAFF  CSECT                                                          00670000
         SAVE  (14,12),,'GSF UTILITIES - UNITAFF R202'                  00680002
         LR    R12,R15                 base reg                         00690001
         USING UNITAFF,R12                                              00700001
         LA    R0,DYNL                                                  00710000
         GETMAIN R,LV=(0)                                               00720000
         ST    R13,4(,R1)              CHAIN SAVE AREA                  00730000
         LR    R13,R1                  DYN ADDRESS                      00740000
         USING DYN,R13                                                  00750000
         LA    R0,DYN+72               CLEAR WORKING STORAGE TO X'00'   00760000
         LA    R1,DYNL-72              CLEAR WORKING STORAGE TO X'00'   00770000
         SLR   R15,R15                 CLEAR WORKING STORAGE TO X'00'   00780000
         MVCL  R0,R14                  CLEAR WORKING STORAGE TO X'00'   00790000
*********************************************************************** 00800000
*                                                                     * 00810000
*        LOCATE TCB, JSCB, GDGNT.                                     * 00820000
*        LOCATE SCT AND 1ST SIOT FOR NEXT STEP.                       * 00830000
*                                                                     * 00840000
*********************************************************************** 00850000
         L     R1,540(,0)              PSATOLD                          00860000
         L     R3,TCBJSCB-TCB(,R1)     GET THE ADDRESS OF MY JSCB       00870000
         USING IEZJSCB,R3                                               00880000
         L     R4,JSCBJCT              Address of JCT prefix            00890001
         USING INJMJCT-16,R4                                            00900001
         ICM   R1,B'0111',JCTGDGNT     3-BYTE SVA OF GDG NAME TABLE     00910000
         BZ    NOGDGNT                 JUMP IF THERE IS NO GDGN TABLE   00920000
         LA    R1,16(,R1)              CONVERT SVA TO 31-BIT ADDRESS    00930002
         ST    R1,GDGNTPTR             KEEP ADDRESS OF GDG NAMES TABLE  00940000
*                                                                       00950000
NOGDGNT  ICM   R1,B'0111',JSCSCTP      3-BYTE SVA OF CURRENT STEP'S SCT 00960000
         LA    R5,16(,R1)              CURRENT STEP'S SCT ADDRESS       00970002
         USING SCT,R5                                                   00980000
*                                                                       00990000
NEXTSTEP ICM   R1,B'0111',SCTANSCT     LOAD 3-BYTE SVA OF NEXT SCT      01000000
         BZ    RETURN                  RETURN IF THERE IS NO NEXT STEP  01010000
         LA    R5,16(,R1)              ADDRESS OF NEXT STEP'S SCT       01020002
         ICM   R1,B'0111',SCTFSIOT     LOAD 3-BYTE SVA OF 1ST SIOT      01030000
         BZ    RETURN                  NO DD CARDS, RETURN              01040000
*********************************************************************** 01050000
*                                                                     * 01060000
*        LOOP THRU THE SIOT BLOCKS                                    * 01070000
*                                                                     * 01080000
*********************************************************************** 01090000
LOOPSIOT LA    R6,16(,R1)              ADDRESS OF SIOT                  01100002
         USING SIOT,R6                                                  01110000
         AP    SEQ#,=P'1'              INCREMENT CURRENT SEQ#           01120000
         TM    SCTSBYT1,SIOTCCAT       CHECK FOR CONCATENATION          01130000
         BO    TESTDISP                JUMP IF NO DDNAME                01140000
         MVC   DDNAME,SCTDDNAM         KEEP DDNAME                      01150000
         SP    SEQ#,SEQ#               RESET DDSEQ                      01160000
TESTDISP OI    SEQ#+L'SEQ#-1,X'0F'     SUPPRESS SIGN                    01170000
         TM    SCTSBYT3,1              CHECK DISP=OLD                   01180000
         BNO   NEXTSIOT                JUMP IF NOT DISP=OLD             01190000
         CLI   SCTUTYPE,C' '           CHECK UNIT NAME                  01200000
         BH    NEXTSIOT                JUMP IF THERE IS A UNIT NAME     01210000
         TM    SCTSBYT1,SCTUNAFF       TEST UNIT=AFF BIT                01220000
         BO    NEXTSIOT                JUMP IF UNIT=AFF ALREADY THERE   01230000
         ICM   R1,B'0111',SCTPJFCB     LOAD 3-BYTE SVA OF JFCB          01240000
         LA    R7,16(,R1)              ADDRESS OF JFCB                  01250002
         USING JFCB,R7                 DSNAME FROM JFCB                 01260000
         MVC   DSNAME,JFCBDSNM         MOVE DSN TO UNPROTECTED STORAGE  01270000
         TM    JFCBIND1,JFCGDG         CHECK GDG INDICATOR              01280000
         BNO   LOCATE                  JUMP IF NOT GDG                  01290000
*--------------------------------------------------------------------*  01300000
*        IF THE CURRENT DATA SET IS A GDG, SCAN THE GDG NAMES TABLE     01310000
*        FOR THE CURRENT APPARENT GEN (0), IF ANY.                      01320000
*--------------------------------------------------------------------*  01330000
GDG000   ICM   R1,B'1111',GDGNTPTR     LOAD ADDR OF GDG NAMES TABLE     01340000
         BZ    GDG100                  JUMP IF NO GDGNT                 01350000
         USING GDGNTABL,R1                                              01360000
GDG010   SLR   R14,R14                 PREPARE IC                       01370000
         IC    R14,GDGNNO              GET NUMBER OF ENTRIES            01380000
GDG015   CLC   GDGNGDG,DSNAME          COMPARE TABLE ENTRY W/ DSNAME    01390000
         BNE   GDG030                  JUMP IF NOT THE SAME             01400000
         LA    R0,GDGNGDGZ             GET PTR TO APPARENT GEN(0)       01410000
         ST    R0,CTGWAGB              SET POINTER IN SVC 26 WORK AREA  01420000
         OI    CTGOPTN3,CTGGDGL        SHOW CTGWAGB IS SET              01430000
         B     GDG100                  EXIT GDGNT SCAN LOOP             01440000
GDG030   LA    R1,GDGNGDG2             BUMP UP TO NEXT ENTRY IN BLOCK   01450000
         BCT   R14,GDG015              LOOP UNTIL END OF BLOCK          01460000
         ICM   R1,B'1111',GDGNNEXT     LOAD ADDR OF NEXT GDGNT BLOCK    01470000
         BNZ   GDG010                  PROCESS NEXT BLOCK               01480000
         NI    CTGOPTN3,255-CTGGDGL    SHOW CTGWAGB IS SET              01490000
         DROP  R1                      GDGNTABL                         01500000
GDG100   LA    R1,DSNAME               1ST BYTE OF DSNAME               01510000
GDG120   LA    R1,1(,R1)               BUMP UP TO NEXT BYTE             01520000
         CLI   0(R1),C' '              CHECK FOR A SPACE                01530000
         BNE   GDG120                  LOOP UNTIL END OF DSNAME         01540000
         MVI   0(R1),C'('              DSNAME(                          01550000
         MVC   1(4,R1),JFCBELNM        DSNAME(0                         01560000
GDG125   LA    R1,1(,R1)               BUMP UP TO NEXT BYTE             01570000
         CLI   0(R1),C' '              CHECK FOR A SPACE                01580000
         BNE   GDG125                  LOOP UNTIL END OF GEN. NO.       01590000
         MVI   0(R1),C')'              DSNAME(0)                        01600000
*--------------------------------------------------------------------*  01610000
*        GET DEVICE TYPE INFORMATION FROM THE CATALOG.                  01620000
*        KEEP RELATIVE DD# IF IT IS THE FIRST TAPE DD IN THE STEP.      01630000
*--------------------------------------------------------------------*  01640000
LOCATE   LA    R0,DSNAME               DATA SET NAME                    01650000
         ST    R0,CTGENT               ENTRY ADDRESS                    01660000
         OI    CTGOPTN1,CTGNAME        CTGENT POINTS TO ENTRY NAME      01670000
         LA    R0,CTGWA                WORK AREA FOR SUPERLOCATE        01680000
         ST    R0,CTGWKA               WORK AREA FOR SUPERLOCATE        01690000
         OI    CTGOPTN3,CTGSUPLT       SUPER LOCATE                     01700000
         OI    CTGOPTN3,CTGAM0         OS/VS2 CATALOG MGMT REQUEST      01710000
         LA    R0,CTGVL                GET ADDR OF VOLUME LIST          01720000
         ST    R0,CTGWAVL              UPDATE PTR                       01730000
         LA    R0,CTGVLLEN             GET LENGTH OF VOLUME LIST        01740000
         STH   R0,CTGWALV              UPDATE LENGTH                    01750000
         LOCATE CTGPL                  ISSUE SUPERLOCATE                01760000
         LTR   R15,R15                                                  01770000
         BNZ   NEXTSIOT                JUMP IF DATA SET NOT CATALOGED   01780000
         CLI   CTGVLDEV+2,X'80'        CHECK DEVICE CLASS               01790000
         BNE   NEXTSIOT                JUMP IF NOT A TAPE               01800000
         OC    TAPE1,TAPE1             CHECK 1ST TIME                   01810000
         BNZ   NOTFIRST                JUMP IF NOT 1ST TIME             01820000
         MVC   TAPE1,SCTDDINO          KEEP DD# FOR 1ST TAPE DD         01830000
         MVC   DDNAME1,DDNAME          KEEP DDNAME                      01840000
         UNPK  DDSEQ1,SEQ#             KEEP DDSEQ                       01850000
         B     NEXTSIOT                JUMP IF 1ST TAPE DD              01860000
*--------------------------------------------------------------------*  01870000
*        UPDATE THE SIOT IF THIS IS NOT THE FIRST TAPE IN THE STEP.     01880000
*--------------------------------------------------------------------*  01890000
NOTFIRST MODESET KEY=ZERO                                               01900000
         MVC   SCTUSADD,TAPE1          MOVE DD# OF 1ST TAPE DD          01910000
         OI    SCTSBYT1,SCTUNAFF       SET UNIT=AFF BIT                 01920000
         MODESET KEY=NZERO                                              01930000
         UNPK  DDSEQ,SEQ#              MOVE DDSEQ                       01940000
         WTO   MF=(E,WTO1L)            NOTIFY PROGRAMMER                01950000
*--------------------------------------------------------------------*  01960000
*        LOCATE NEXT SIOT BLOCK, CHECK FOR LAST ONE.                    01970000
*--------------------------------------------------------------------*  01980000
NEXTSIOT ICM   R1,B'0111',SCTPSIOT     SVA OF NEXT SIOT                 01990000
         BNZ   LOOPSIOT                PROCESS NEXT DD CARD IN STEP     02000000
         DROP  R5,R6,R7                SCT, SIOT, JFCB                  02010000
*********************************************************************** 02020000
*                                                                     * 02030000
*        CLEAN-UP, RETURN TO CALLER.                                  * 02040000
*                                                                     * 02050000
*********************************************************************** 02060000
RETURN   LA    R0,DYNL                                                  02070000
         LR    R1,R13                  DYN ADDRESS                      02080000
         L     R13,4(,R13)             CALLER'S SAVE AREA               02090000
         FREEMAIN R,LV=(0),A=(1)      FREE DYNAMIC STORAGE              02100000
         RETURN (14,12),RC=0                                            02110000
*********************************************************************** 02120000
*        CONTROL BLOCKS FOR LOCATE & WTO.                             * 02130000
*********************************************************************** 02140000
&STR     SETC  (126)' '                                                 02150001
WTO1L    WTO   '&STR',MF=L,ROUTCDE=14                                   02160000
         ORG   WTO1L+4                                                  02170000
         DC    C'UNITAFF: '                                             02180000
DDNAME   DC    CL8' ',C' +'            DDNAME FOR CURRENT TAPE DD       02190000
DDSEQ    DS    C'000'                  DD SEQ# FOR CURRENT TAPE DD      02200000
         DC    C' USES SAME UNIT AS '  DDNAME FOR 1ST TAPE DD           02210000
DDNAME1  DC    CL8' ',C' +'            DDNAME FOR 1ST TAPE DD           02220000
DDSEQ1   DC    C'000'                  DD SEQ# FOR 1ST TAPE DD          02230000
         ORG   ,                                                        02240000
SEQ#     DC    P'000'                  SEQ#                             02250000
*---------------------------------------------------------------------  02260000
*        DYNAMIC STORAGE AREA, BASED BY R13.                            02270000
*---------------------------------------------------------------------  02280000
DYN      DSECT                                                          02290000
         DS    18F                                                      02300000
GDGNTPTR DS    F                       POINTER TO GDG NAMES TABLE       02310000
TAPE1    DS    XL2                     INTERNAL DD# FOR 1ST TAPE DD     02320000
DSNAME   DS    CL44                    MODIFIABLE DSNAME                02330000
*---------------------------------------------------------------------* 02340000
*        CATALOG PARAMETER LIST                                         02350000
*---------------------------------------------------------------------* 02360000
CTGPL    DS    0D                                                       02370000
CTGOPTN1 DS    B              FIRST OPTION BYTE:                        02380000
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR   02390000
CTGOPTN2 DS    B              SECOND OPTION BYTE                        02400000
CTGOPTN3 DS    B     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION 02410000
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION                    02420000
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL 02430000
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST        02440000
CTGOPTN4 DS    B              FOURTH OPTION BYTE                        02450000
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)     02460000
CTGENT   DS    A              ADDRESS OF CATALOG RECORD IDENTIFIER      02470000
CTGCAT   DS    A              ADDRESS OF CATALOG DSNAME OR ACB          02480000
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA             02490000
CTGOPTNS DS    B              CATALOG MANAGMENT SERVICES REQUEST OPTION 02500000
         DS    B              RESERVED                                  02510000
CTGTYPE  DS    C              TYPE OF CATALOG RECORD                    02520000
CTGNOFLD DS    FL1            NUMBER OF ENTRIES IN CTGFIELD             02530000
CTGFDBK  DS    XL2            FEEDBACK AREA (IF NOT SUPERLOCATE)        02540000
CTGFBFLG DS    B              FLAGS (SUPERLOCATE)                       02550000
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT                          02560000
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP                             02570000
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED                        02580000
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)  02590000
         DS    B              RESERVED (SUPERLOCATE)                    02600000
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD       02610000
*---------------------------------------------------------------------* 02620000
*        CATALOG WORK AREA                                              02630000
*---------------------------------------------------------------------* 02640000
CTGWA    DS    0D                                                       02650000
CTGWAVL  DS    A                       PTR TO CTGVL (VOLUME LIST)       02660000
CTGWALV  DS    H                       LENGTH OF THE VOLUME LIST        02670000
CTGWAVCT DS    H                       # OF VOLSERS RETURNED IN VL      02680000
CTGWAUCT DS    H                       MINIMUM # OF VOLS TO BE MOUNTED  02690000
CTGWAGCT DS    H                       # OF GENERATIONS CATALOGED       02700000
CTGWAGB  DS    A                       PTR TO APPARENT GEN(0)           02710000
*---------------------------------------------------------------------* 02720000
*        CATALOG VOLUME LIST                                            02730000
*---------------------------------------------------------------------* 02740000
CTGVL    DS    0D                                                       02750000
CTGVLVOL DS    CL6                     VOLUME SERIAL                    02760000
CTGVLDEV DS    XL4                     DEVICE TYPE                      02770000
CTGVLSEQ DS    H                       FILE SEQ#                        02780000
CTGVLX   DS    19XL12                  VOLUME LIST EXTENSION            02790000
CTGVLLEN EQU   *-CTGVL                 LENGTH OF VOLUME LIST            02800000
DYNL     EQU   *-DYN                                                    02810000
*---------------------------------------------------------------------  02820000
*        GDG NAMES TABLE MAPPING (USING IEFZB902 AS A MODEL)            02830000
*---------------------------------------------------------------------  02840000
**       SYS1.AMODGEN(IEFZB429)                                         02850001
GDGNTABL DSECT                                                          02860000
GDGNQSVA DS    XL3                     SVA OF NEXT GDGNT RECORD         02870001
GDGNTID  DS    X'23'                   GDGNT ID X'23'                   02880000
GDGNNEXT DS    A                       IN-CORE ADDRESS OF NEXT RECORD   02890001
GDGNGDG  DS    CL35                    GDG BASE                         02900000
GDGNGDGZ DS    C'1234'                 APPARENT (0) GENERATION          02910000
GDGNGDG2 DS    CL35,C'1234'            2ND GDG NAME                     02920000
         DS    CL35,C'1234'            3RD GDG NAME                     02930000
         DS    CL35,C'1234'            4TH GDG NAME                     02940000
GDGNNO   DS    FL1                     NUMBER OF ENTRIES                02950000
         DS    XL15                    FILLER                           02960000
GDGNLEN  EQU   GDGNTABL+176                                             02970000
*---------------------------------------------------------------------  02980000
*        MAPPING MACROS FROM SYS1.AMODGEN                               02990000
*---------------------------------------------------------------------  03000000
         IKJTCB LIST=YES               TASK CONTROL BLOCK               03010000
         IEZJSCB ,                     JOB STEP CONTROL BLOCK           03020000
JCT      DSECT                                                          03030000
         IEFAJCTB ,                    JOB CONTROL BLOCK                03040000
SCT      DSECT                                                          03060000
         IEFASCTB ,                    STEP CONTROL BLOCK               03070000
SIOT     DSECT                                                          03080000
         IEFASIOT ,                    STEP I/O TABLE                   03090000
JFCB     DSECT                                                          03100000
         IEFJFCBN LIST=YES             JOB FILE CONTROL BLOCK           03110000
         CVT   DSECT=YES               COMMUNICATION VECTOR TABLE       03120002
*        YREGS                         REGISTER EQUATES                 03130002
R0       EQU   0                                                        03140002
R1       EQU   1                                                        03150002
R2       EQU   2                                                        03160002
R3       EQU   3                                                        03170002
R4       EQU   4                                                        03180002
R5       EQU   5                                                        03190002
R6       EQU   6                                                        03200002
R7       EQU   7                                                        03210002
R8       EQU   8                                                        03220002
R9       EQU   9                                                        03230002
R10      EQU   10                                                       03240002
R11      EQU   11                                                       03250002
R12      EQU   12                                                       03260002
R13      EQU   13                                                       03270002
R14      EQU   14                                                       03280002
R15      EQU   15                                                       03290002
         END                                                            03300000
//SYSLIB   DD DSN=SYS1.AMODGEN,DISP=SHR                                 03320000
//         DD DSN=SYS1.MACLIB,DISP=SHR                                  03330000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,15)                                   03340002
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,15)                                   03350002
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,15)                                   03360002
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      03370002
//SYSPRINT DD SYSOUT=*                                                  03380002
//*                                                                     03390000
//LKED    EXEC PGM=HEWL,PARM='MAP,AC=1'                                 03400000
//SYSPRINT DD SYSOUT=*                                                  03410000
//SYSLIN   DD DSN=*.ASMXF.SYSGO,DISP=(OLD,DELETE)                       03420002
//SYSLMOD  DD DSN=GILBERT.LOAD(UNITAFF),DISP=SHR                        03430000
//*                                                                     03440000
//UNITAFF EXEC PGM=UNITAFF                                              03450001
//STEPLIB  DD DSN=GILBERT.LOAD,DISP=SHR                                 03460001
//SYSUDUMP DD SYSOUT=*                                                  03470001
//OSIN     DD DSN=GILBERT.UNITAFF1,DISP=SHR                             03480001
//*                                                                     03490000
//STEP53  EXEC PGM=IEFBR14                                              03500001
//OSIN     DD DSN=GILBERT.UNITAFF1,DISP=SHR                             03510001
//         DD DSN=GILBERT.UNITAFF2,DISP=SHR                             03520001
