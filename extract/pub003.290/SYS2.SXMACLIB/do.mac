         MACRO
&NAME    DO    &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,&P9,&P10,&P11,&P12,&P13,*
               &P14,&P15,&P16,&P17,&P18,&P19,&P20,&WHILE=,&FROM=,&C=,  *
               &UNTIL=                                              SLB
.*#-------------------------------------------------------------------*
.*#      DO    MACRO FOR STRUCTURED PROGRAMMING                       *
.*#
.*#   FUNCTION:    STARTS A NEW DO GROUP
.*#
.*#   CALL(1):     DO WHILE=CC
.*#                   WHILE=COND1
.*#                   WHILE=COND1,OP1,COND2
.*#                   WHILE=COND1,OP1,COND2,OP2,COND3,...,CONDN
.*#                   UNTIL=CC
.*#                   UNTIL=COND1
.*#                   UNTIL=COND1,OP1,COND2
.*#                   UNTIL=COND1,OP1,COND2,OP2,COND3,...,CONDN
.*#
.*#                -   CC    : SIMPLY TESTS THE CURRENT CONDITION CODE
.*#                            VALUE, AND MAY BE SPECIFIED AS A
.*#                            MNEMONIC CONDITION CODE OR A NUMERIC
.*#                            VALUE BETWEEN 1 AND 14. THE CC VALUE
.*#                            CAN BE COMBINED WITH CONDI EXPRESSIONS
.*#                            AS DESCRIBED BELOW.
.*#
.*#                -   CONDI : A VALID ASSEMBLER INSTRUCTION WITH
.*#                            MNEMONIC CONDITION CODE (IN PARENTHESES)
.*#                            EXAMPLE: (TM,SWITCH,X'04',O)
.*#                            FOR COMPARE OPERATIONS THE CONDITION-
.*#                            CODE WILL BE PUT BETWEEN THE OPERANDS
.*#                            EXAMPLE: (CLC,FIELD1,EQ,FIELD2)
.*#                -   OPI:    IS ONE OF THE LOGICAL OPERANDS 'AND' OR
.*#                            'OR'
.*#                            DO NOT MIX 'AND' AND 'OR' IN THE SAME
.*#                            DO GROUP.
.*#
.*#
.*#   CALL(2):     DO  FROM=(REG,INITVAL)
.*#
.*#                -   REG:    LOOP-REGISTER. IT CONTAINS THE NUMBER
.*#                            OF TIMES THE LOOP WILL BE EXECUTED
.*#                -   INITVAL: INITAL VALUE FOR THE LOOP REGISTER
.*#                            THIS PARAMETER MAY BE OMITTED. IN THIS
.*#                            CASE THE MACRO ASSUMES, THAT THE
.*#                            REGISTER IS ALREADY LOADED.
.*#
.*#
.*#   CALL(3):     DO  INF
.*#      OR        DO  FOREVER
.*#
.*#                AN INFINITE LOOP WILL BE GENERATED.
.*#                PLEASE USE THE 'EXIT', 'DOEXIT', OR 'ASMLEAVE'
.*#                TO LEAVE THE LOOP.
.*#
.*#
.*#--------------------------------------------------------------------
         LCLA  &I              INDEX FOR STRING SCANNING
         LCLC  &OPND
         COPY  IFGLO
.*--------------------------------------------------------------------*
.*       FIRST DO/IF: INIT GLOBALS                                    *
.*--------------------------------------------------------------------*
         AIF   (&IFINIT).START            INIT ALREADY DONE
&IFINIT  SETB  1
&IFLEVEL SETA  0
&DOLEVEL SETA  0
&IFLABEL SETA  0
&UNTILLB SETA  0                                                    SLB
&DOXITLB SETA  0                                                    SLB
&IFLIMIT SETA  100000
&IFPRAEF SETC  '##'                    WAR #I
&IFDEBUG SETB  0
.START   ANOP
&MACNA   SETC  'DO'
.*--------------------------------------------------------------------*
.*       FORMAL TESTS                                                 *
.*--------------------------------------------------------23-09-80-RS-*
.FOR01   ANOP
         AIF   ('&WHILE' EQ '').FOR02     NO WHILE PARAM
         AIF   ('&FROM'  NE '').FEHL12    FROM AND WHILE SPECIFIED
         AIF   ('&UNTIL' NE '').FEHL20    UNTIL AND WHILE SPECIFIED SLB
&OPND    SETC  'WHILE='
         AGO   .FOR05
.*
.FOR02   ANOP
         AIF   ('&UNTIL' NE '').FOR03     UNTIL PARAM               SLB
         AIF   ('&FROM' EQ '').FOR03      DO W/O FROM/WHILE/UNTIL   SLB
         AIF   ('&FROM'(1,1) NE '(').FEHL13 NOT IN PARENTHESIS
         AIF   ('&P1' NE '').FEHL14       EXCESIVE PARAMETERS
&OPND    SETC  'FROM='
         AGO   .FOR05
.FOR03   ANOP                                                       SLB
         AIF   ('&UNTIL' EQ '').FOR04     DO WITHOUT FROM/UNTIL     SLB
         AIF   ('&FROM'  NE '').FEHL12    FROM AND UNTIL SPECIFIED  SLB
         AIF   ('&UNTIL'(1,1) NE '(').FEHL13 NOT IN PARENTHESES     SLB
&OPND    SETC  'UNTIL='                                             SLB
         AGO   .FOR05                                               SLB
.*
.FOR04   ANOP
         AIF   ('&P1' EQ 'FOREVER').FOR04A
         AIF   ('&P1' NE 'INF').FEHL15
.FOR04A  ANOP
         AIF   ('&P2' NE '').FEHL18
.FOR05   ANOP
.*--------------------------------------------------------------------*
.*       INCREMENT LEVEL. GENERATE LABELS FOR FALSE/TRUE              *
.*--------------------------------------------------------------------*
&DOLEVEL SETA  &DOLEVEL+1
         AIF   (&DOLEVEL EQ 50).FEHL06
         AIF ('&SYSPARM' EQ '').OBR00
         AIF ('&SYSPARM'(1,2) EQ 'NO').OBR00
         AGO .OBR00
&NAME    SVDOC   COM=START,&OPND,&WHILE&FROM,C=&C,                     *
               &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,&P9,&P10,&P11,&P12,&P13,*
               &P14,&P15,&P16,&P17,&P18,&P19,&P20
.*
&OPND    SETC  ''
.*
.OBR00   ANOP
.*
&IFLABEL SETA  &IFLABEL+1
         AIF   (&IFLABEL GE &IFLIMIT).FEHL06
.*
.*--------------------------------------------------------------------*
.*       SAVE NAME OF DO-GROUP FOR EXIT AND ITERATE MACROS         SLB*
.*--------------------------------------------------------24-09-80-RS-*
&DONAME(&DOLEVEL) SETC '&NAME'
.*--------------------------------------------------------------------*
.*       FROM - CLAUSE                                                *
.*--------------------------------------------------------23-09-80-RS-*
         AIF   ('&P1' EQ 'INF').STA03     DO INFINITE
         AIF   ('&P1' EQ 'FOREVER').STA03 DO INFINITE
         AIF   ('&WHILE' NE '').STA03     WHILE SPECIFIED
&DOFROM(&DOLEVEL) SETC '&FROM'            GET LOOP REGISTER
         AIF   ('&FROM(2)' EQ '').STA03   NO INITIAL VALUE
&DOFROM(&DOLEVEL) SETC '&FROM(1)'         GET LOOP REGISTER
         AIF   ('&ASMMREL' NE 'ON').BASE01 CHECK MACRO LEVEL
         LLILF &FROM(1),&FROM(2)          GET INITAL LOOP COUNT (DO)
         AGO   .STA03
.BASE01  ANOP
         LA    &FROM(1),&FROM(2)          GET INITAL LOOP COUNT (DO)
.STA03   ANOP                                                       SLB
.*-----------------------------------------------------------------SLB*
.*       GENERATE BRANCH FOR UNTIL INITIAL ENTRY                   SLB*
.*--------------------------------------------------------23-09-80-SLB*
         AIF   ('&UNTIL' EQ '').NOUNTIL  SKIP IF NOT UNTIL          SLB
&UNTILLB SETA  &UNTILLB+1                BUMP UP UNTIL BRANCH LABEL SLB
&OPND    SETC  '##UN&UNTILLB'            MAKE UNTIL LABEL           SLB
         AIF   ('&ASMMREL' NE 'ON').BASE10 CHECK MACRO LEVEL        SLB
         J     &OPND                     SKIP OVER CONDITIONAL CODE SLB
         AGO   .NOUNTIL                                             SLB
.BASE10  ANOP                                                       SLB
         B     &OPND                     SKIP OVER CONDITIONAL CODE SLB
.NOUNTIL ANOP                                                       SLB
.*--------------------------------------------------------------------*
.*       GENERATE START AND END LABEL                                 *
.*--------------------------------------------------------23-09-80-RS-*
&DOSTART(&DOLEVEL) SETC '&IFLABEL'
&OPND    SETC  '&IFPRAEF&DOSTART(&DOLEVEL)'
&OPND    DS    0H                         TARGET FOR DO-LOOP
.*
&IFLABEL SETA  &IFLABEL+1
         AIF   (&IFLABEL GE &IFLIMIT).FEHL06
.*
&DOENDLB(&DOLEVEL) SETC '&IFLABEL'        TARGET FOR END OF DO-LOOP
         AIF    ('&FROM' NE '').MACEND    DON'T CALL IF-PROCESSOR
         AIF    ('&P1' EQ  'INF').MACEND  DON'T CALL IF-PROCESSOR
         AIF    ('&P1' EQ  'FOREVER').MACEND  DON'T CALL IF-PROCESSOR
.*--------------------------------------------------------------------*
.*       GENERATE LABEL FOR BRANCH ON TRUE                            *
.*--------------------------------------------------------23-09-80-RS-*
&IFLABEL SETA  &IFLABEL+1
         AIF   (&IFLABEL GE &IFLIMIT).FEHL06
.*
&DOTRUE  SETC  '&IFLABEL'
.*
.*--------------------------------------------------------------------*
.*       CALL IF-PROCESSOR TO ANALYZE CONDITION                       *
.*--------------------------------------------------------------------*
         AIF   ('&UNTIL' EQ '').DOWHILE  PROCESS DO UNTIL           SLB
         IFPRO &DOTRUE,&DOENDLB(&DOLEVEL),&UNTIL,                   SLB*
               &P1,&P2,&P3,&P4,&P5,&P6,&P7,                         SLB*
               &P8,&P9,&P10,&P11,&P12,&P13,&P14,&P15,&P16,&P17,     SLB*
               &P18,&P19,&P20                                       SLB
         AGO   .PRODONE                                             SLB
.DOWHILE ANOP                            PROCESS DO WHILE           SLB
         IFPRO &DOTRUE,&DOENDLB(&DOLEVEL),&WHILE,                      *
               &P1,&P2,&P3,&P4,&P5,&P6,&P7,                            *
               &P8,&P9,&P10,&P11,&P12,&P13,&P14,&P15,&P16,&P17,&P18,   *
               &P19,&P20
.PRODONE ANOP                                                       SLB
.*-----------------------------------------------------------------SLB*
.*       SET UNTIL LABEL                                           SLB*
.*-----------------------------------------------------------------SLB*
         AIF   ('&UNTIL' EQ '').NOUNLAB                             SLB
&OPND    SETC  '##UN&UNTILLB'                                       SLB
&OPND    DS    0H                        TARGET FOR DO UNTIL ENTRY  SLB
.NOUNLAB ANOP                                                       SLB
.*--------------------------------------------------------------------*
.*       SET TRUE LABEL                                               *
.*--------------------------------------------------------------------*
&OPND    SETC  '&IFPRAEF&DOTRUE'
&OPND    DS    0H                        TARGET FOR TRUE BRANCH
         AGO   .MACEND
.*
         COPY IFERR
.*
.MACEND  ANOP
         MEXIT
         MEND
