The structured programming macros provide tools that you can use to
write structured programs in assembly language. The structured
programming macros included in SXMACLIB are based on those originally
included with TK3, and have been modified to provide some of the
functionality included in the structured programming macros that are
part of the IBM HLASM Toolkit. Although the SXMACLIB macros are still
a limited subset of those provided by IBM, the changes made to these
macros bring them more in line with the design of the IBM macros.

You can use the structured programming macros in this library even
if you do not intend to use any of the new instructions provided by
the S37X module; however, if you intend to use any of the S37X
instructions in your structured programs, you MUST use the SXMACLIB
macros. The macros originally included as part of TK3 will produce
any number of nasty errors should you attempt to code an S37X
instruction with a TK3 structured programming macro, for example:

            IF (CHI,R1,EQ,17)

$ New Structured Programming Capabilities

The structured programming macros are fully documented below; this
section briefly describes new features added to the structured
prograamming macro set.

  - DO UNTIL
    This DO macro option allows you to define a DO group which will
    be executed at least one time. Essentially, the test for loop
    termination is moved to the bottom of the loop.

  - ITERATE
    The ITERATE macro allows you to end the current execution of a
    DO group and branch to the code which tests for loop termination.
    You may specify the name of the DO group to be iterated; by default,
    the current DO group is iterated.

  - DOEXIT
    This macro provides the ability to conditionally terminate the
    execution of the current DO group.

  - ASMLEAVE
    The ASMLEAVE macro unconditionally terminates the execution of
    either the current DO group, or the specified, named DO group.

  - ASMMREL
    The ON/OFF option for this macro allows you to optionally
    specify that the structured programming macros should generate
    branch relative instructions (ON), as opposed to base register
    branch instructions (OFF). The default setting is OFF.

  - Logical expressions
    It is now possible to specify just the condition code value as the
    operand of an IF, ELSEIF, DO, or DOEXIT macro. This change allows
    you to test the previously set condition code value without having
    to code an instruction which sets the condition code.

  - Numeric Condition Code Specification
    In addition to specifying a mnemonic condition code mask (e.g. EQ,
    NE, Z, etc.), you may optionally specify a decimal number between 1
    and 14.

$ Structured Programming Macro Usage

  - ASMMREL

    Controls the generation of instructions by the structured
    programming macros. By default, the macros will generate S/370
    type base register branch instructions. If you specify the ON
    option, the macros will generate z/Architecture branch relative
    (jump) instructions.

    The ON option also controls the instruction which loads the register
    specified by the DO FROM operand. If ON is specified, an LLILF
    instruction is used, allowing a maxmimum value of 2**32 - 1;
    otherwise, an LA instruction is used, and the maximum value is 4095.

      Syntax:

          ASMMREL status

                   - status : ON generates branch relative instructions
                            : OFF generates base register branch
                              instructions

  - DO

    The DO macro specifies the start of a DO group. The DO group is
    terminated by a matching ENDDO macro. Options specified on the DO
    macro determine the conditions under which execution of the
    contained loop of code will be terminated. logical-expression is
    documented below following the descriptions of the various macros
    in which it is used. Several forms of the DO macro are available:

    The DO macro may specify an optional name. If you intend to
    terminate execution of a DO group by name using the ASMLEAVE or
    EXIT macros, then you must include a name for the DO group on the
    DO statement. Note that this is not the same as specifying a DS 0H
    or EQU statement preceding the DO statement.

      Syntax:

{name}    DO WHILE=logical-expression

          Executes the code between the DO and the corresponding ENDDO.
          The code contained in the loop will not be executed if the
          logical-expression initially evaluates as true. Execution of
          the loop ends when the specified logical-expression evaluates
          as true.

{name}    DO UNTIL=logical-expression

          Executes the code between the DO and the corresponding ENDDO.
          The code contained in the loop will be executed at least once,
          and execution of the loop ends when the specified logical-
          expression evaluates as true.

{name}    DO FROM=(reg{,int})

                   - reg    : Register specification (0 - 15), used
                              in a BCT instruction generated by the
                              corresponding ENDDO.
                   - int    : Optional integer numeric value used to
                              initialize reg. If int is not specified,
                              it is assumed that reg has already been
                              loaded with the desired value.

                              The maximum value allowed for int depends
                              upon the setting of ASMMREL. If OFF, the
                              maximum value is 4095; if ON, the maximum
                              value is 2**31 - 1.
{name}    DO INF
{name}    DO FOREVER

          Executes the code between the DO and the corresponding ENDDO.
          The code contained in the loop will execute continuously until
          some instruction contained in the loop exits. The instruction
          causing the exit may be a branch instruction, or one of the
          structured programming macros: ASMLEAVE, DOEXIT, or EXIT.

  - ASMLEAVE

    Terminates execution of a DO group. Control passes to the statement
    following the ENDDO for the loop that is terminated.

      Syntax:

          ASMLEAVE {do-group}

                 - do-group : This optional operand specifies the name
                              of the DO group whose execution is to be
                              be terminated. If the do-group name is not
                              specified, execution of the current DO
                              group is terminated.

  - DOEXIT

    Terminates execution of the current DO group. Control passes to the
    statement following the ENDDO for the current loop.

      Syntax:

          DOEXIT {logical-expression}

             - logical-expression : If the logical expression evaluates
                                    as true, execution of the current
                                    loop terminates; otherwise execution
                                    of the loop continues with the
                                    instruction following the DOEXIT.

                                    If the logical-expression is not
                                    specified, execution of the loop is
                                    unconditionally terminated.

  - EXIT

    Terminates execution of a DO group. Control passes to the statement
    following the ENDDO for the loop that is terminated.

      Syntax:

          EXIT {DO=do-group}

                 - do-group : This optional operand specifies the name
                              of the DO group whose execution is to be
                              be terminated. If the do-group name is not
                              specified, execution of the current DO
                              group is terminated.

  - ITERATE

    Stops executing in the current DO group and passes control to the
    code which determines whether or not execution of the loop should
    continue. If the DO group is controlled by the FROM option, control
    is passed to the BCT generated by the corresponding ENDDO macro.

      Syntax:

          ITERATE {do-group}

                 - do-group : This optional operand specifies the name
                              of the DO group to be iterated. If the
                              do-group name is not specified, the
                              current DO group is iterated.

  - ENDDO

    Marks the end of a DO group. Each DO macro must have a corresponding
    ENDDO. The ENDDO macro has no operands.

      Syntax:

          ENDDO

  - IF

    The IF macro allows you to conditionally execute a block of code
    based upon the true/false value of the specified logical-expression.

      Syntax:

          IF logical-expression

          Executes the code between the IF and the corresponding ELSE,
          ELSEIF, or ENDIF provided that the specified logical-
          expression evaluates as true.

  - ELSE

    The ELSE macro allows you to specify the block of code to be
    executed should the logical-expression associated with the IF or
    ELSEIF macro at the same nesting level evaluate to false.

      Syntax:

          ELSE

          Marks the beginning of the block of code to be executed if
          the logical expression associated with the IF or ELSEIF macro
          at the same nesting level evaluates as false. The block of
          code must be followed by an ENDIF macro.

  - ELSEIF

    The ELSEIF macro allows you to specify the block of code to be
    executed should the logical-expression associated with the IF or
    ELSEIF macro at the same nesting level evaluate to false, and the
    logical-expression specified by the ELSEIF evaluates as true.

      Syntax:

          ELSEIF logical-expression

          Marks the beginning of the block of code to be executed if the
          logical-expression evaluates as true. The block of code must
          be followed by an ENDIF or another ELSEIF macro.

  - ENDIF

    The ENDIF macro marks the end of a block of code. The ENDIF must
    have a corresponding IF, ELSE, or ELSEIF at the same nesting level.

      Syntax:

          ENDIF

  - Logical Expressions

    Many of the structured programming macros require an operand
    consisting of a logical expression. A logical expression can take
    several forms. In general a logical expression will contain one or
    more conditional phrases each enclosed within parentheses and
    connected by AND or OR operators.

      - Mask Conditional Phrase

        In its simplist form, a logical expression consists of just a
        condition code mask. The mask specifies what is to be tested for
        in the current value of the condition code. The following
        mnemonic mask values may be specified:

          E  - Equal
          EQ - Equal
          GE - Greater than or equal
          GT - Greater than
          H  - High
          L  - Low
          LE - Less than or equal
          LT - Less than
          M  - Minus/Mixed
          NE - Not equal
          NH - Not high
          NL - Not low
          NM - Not minus/Not mixed
          NO - Not overflow/Not ones
          NP - Not plus
          NZ - Not zero
          O  - Overflow/Ones
          P  - Plus
          Z  - Zero

        Additionally, the condition code mask can be specified as a
        numeric value between 1 and 14.

        - Examples

          IF (P)
          DO WHILE=(NZ)
          DOEXIT (8)

      - Single Conditional Phrase

        This form of a logical expression consists of a single
        instruction which sets the condition code, enclosed in
        parentheses, along with a specification for the desired
        condition code mask. The condition code mask is coded following
        the operation code and its operands unless the instruction is a
        compare operation.

        For a compare instruction, the condition code mask is coded
        preceding the second comparand address. So for CLC as an
        example, the condition code mask fits naturally between the
        first and second comparands (i.e. the only two operands). But
        for some compare instructions, other operands of the instruction
        get in the way (so to speak). This is the situation with
        instructions such as CLM or CS (see the examples below). Notice
        that even for these instructions, the placement of the condition
        code mask still precedes the second comparand address.

        - Examples

          IF (TM,SW,X'10',NO)
          IF (CLC,NAME,GT,INPUT)
          IF (CLM,R5,B'1000',EQ,=C'X')
          IF (CLCLE,R2,EQ,R4,X'40')
          IF (CS,R15,R0,NE,DATQECB)
          IF (ICM,R1,B'0111',ADDR+1,NZ)
          DO UNTIL=(CHI,R3,GT,17)
          DOEXIT (CLC,NAME,EQ,=C'NONAME')
          DO WHILE=(A,R0,INCR,M)

      - Compound Conditional Phrase

        A logical expression consisting of more than one conditional
        phrase connected by AND or OR operators constitutes a compound
        conditional phrase. If the OR operator is used, the logical
        expression is true if any of the connected phrases is true.
        For the AND operator, the logical expression is true only if
        all of the connected phrases are true. The use of AND and OR
        in the same logical expression is not supported, and the result
        is undefined.

        - Examples

          IF (TM,SW1,X'10',NO),OR,
                (TM,SW2,X'04',O)
          DO WHILE=(LTR,R15,R15,Z),AND,
                (LTR,R1,R1,P)
          DO UNTIL=(LTR,R15,R15,NZ),OR,
                (CLI,CODE,EQ,C'X'),OR,
                (CLI,CODE,EQ,C'Y'),OR,
                (CLI,CODE,EQ,C'Z')
          ELSEIF (M),OR,
                (C,R7,GT,MAXVAL)

Shelby Beach
Ms. Kitty Programming Werks
