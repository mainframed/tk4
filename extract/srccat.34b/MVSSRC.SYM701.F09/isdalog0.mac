         TITLE 'SDA ROUTINE TO READ SYS1.LOGREC                        *
                        '
ISDALOG0 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(8)                                              0001
         DC    C'ISDALOG0'                                         0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         ISDAGSPC R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
*/* RETCODE=0 = OPEN AND READ SUCCESSFUL                     @Y30LB55*/
*/* RETCODE=4 = OPEN FAILED. MISSING DD CARD                 @Y30LB55*/
*/* RETCODE=8 = END OF FILE READ IN INPUT                    @Y30LB55*/
*/* RETCODE=12 = READ ERROR ON INPUT                         @Y30LB55*/
*/* RETCODE=16 = NO HEADER RECORD FOUND                      @Y30LB55*/
*/* RETCODE=20 = LAST CCHHR HAS BEEN READ                    @Y30LB55*/
*/* RETCODE=24 = NO SPACE FOR ISDALOG0 WORKAREA              @Y30LB55*/
*                                                                  0014
*   CVTPTR=WORKPTR;                 /* SET LOCAL CVT PTR     @Y30LB55*/
         L     @10,@PC00001                                        0014
         L     CVTPTR,WORKPTR(,@10)                                0014
*   RETCODE=0;                      /* INITIALIZE RETURN CODE@Y30LB55*/
         SLR   @10,@10                                             0015
         LR    RETCODE,@10                                         0015
*   /*****************************************************************/
*   /*                                                               */
*   /* GET CORE FOR ISDALOG0 WORKAREA                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0016
*   IF LOG00PTR=0 THEN              /* NO WORKAREA           @Y30LB55*/
         C     @10,LOG00PTR(,CVTPTR)                               0016
         BNE   @RF00016                                            0016
*     DO;                           /* NONE, GET IT          @Y30LB55*/
*       CORELEN=LENGTH(LOGWORK);    /* SET AREA LENGTH       @Y30LB55*/
         MVC   CORELEN(3,CVTPTR),@CF00192+1                        0018
*       SPNO=LOG0SPNO;              /* SET SUBPOOL NUMBER    @Y30LB55*/
         MVC   SPNO(1,CVTPTR),LOG0SPNO                             0019
*       RFY                                                        0020
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                                0021
*       CALL ISDAGET1;              /* GET CORE              @Y30LB55*/
         L     @15,@CV00163                                        0022
         BALR  @14,@15                                             0022
*       RFY                                                        0023
*         R15 RSTD;                                        /*@Y30LB55*/
*       RETCODE=R15;                /* SAVE GET1 RETURN CODE @Y30LB55*/
         LR    RETCODE,R15                                         0024
*       RFY                                                        0025
*        (R1,                                                      0025
*         R15) UNRSTD;              /* RELEASE REGS          @Y30LB55*/
*       LOG00PTR=COREADDR;          /* STORE ADDR IN ISDACVT @Y30LB55*/
         L     @10,COREADDR(,CVTPTR)                               0026
         ST    @10,LOG00PTR(,CVTPTR)                               0026
*       LOGWKPTR=LOG00PTR;          /* SET PTR TO LOGWORK    @Y30LB55*/
         LR    LOGWKPTR,@10                                        0027
*       IF RETCODE=0 THEN           /* GOT CORE              @Y30LB55*/
         SLR   @10,@10                                             0028
         CR    RETCODE,@10                                         0028
         BNE   @RF00028                                            0028
*         DO;                       /* YES, INITIALIZE LOGWORK     0029
*                                                            @Y30LB55*/
*           SDALOGIN=DCBSTAT;       /* MOVE DCB INTO WORKAREA@Y30LB55*/
         MVC   SDALOGIN(96,LOGWKPTR),DCBSTAT                       0030
*           OPENLIST=OPENSTAT;      /* MOVE OPEN LIST INTO WORKAREA
*                                                            @Y30LB55*/
         MVC   OPENLIST(4,LOGWKPTR),OPENSTAT                       0031
*           CLOSLIST=CLOSSTAT;      /* MOVE CLOSE LIST INTO WORKAREA
*                                                            @Y30LB55*/
         MVC   CLOSLIST(4,LOGWKPTR),CLOSSTAT                       0032
*           READLIST=READSTAT;      /* MOVE READ LIST INTO WORKAREA
*                                                            @Y30LB55*/
         MVC   READLIST(20,LOGWKPTR),READSTAT                      0033
*           SCW=''B;                /* ZERO SEGMENT CONTROL WORD   0034
*                                                            @Y30LB55*/
         SLR   @08,@08                                             0034
         ST    @08,SCW(,LOGWKPTR)                                  0034
*           NREC=''B;               /* INIT RECORD COUNT     @Y30LB55*/
         ST    @08,NREC(,LOGWKPTR)                                 0035
*           DATAPTR=0;              /* ZERO DATA POINTER     @Y30LB55*/
         ST    @10,DATAPTR(,CVTPTR)                                0036
*         END;                      /* END INITIALIZE        @Y30LB55*/
*       ELSE                        /* BAD RETURN FROM ISDAGET1    0038
*                                                            @Y30LB55*/
*         RETCODE=24;               /* SET RETURN CODE TO NO CORE  0038
*                                                            @Y30LB55*/
         B     @RC00028                                            0038
@RF00028 LA    RETCODE,24                                          0038
*     END;                          /* END GET CORE SECTION  @Y30LB55*/
*   ELSE                            /* YES, HAVE WORKAREA    @Y30LB55*/
*     LOGWKPTR=LOG00PTR;            /* SET LOCAL PTR TO LOGWORK    0040
*                                                            @Y30LB55*/
         B     @RC00016                                            0040
@RF00016 L     LOGWKPTR,LOG00PTR(,CVTPTR)                          0040
*   IF RETCODE=0 THEN               /* HAVE WORKAREA         @Y30LB55*/
@RC00016 LTR   RETCODE,RETCODE                                     0041
         BNZ   @RF00041                                            0041
*     DO;                           /* YES                   @Y30LB55*/
*       IF OFLAGS(4)^='1'B THEN     /* IS DCB OPEN           @Y30LB55*/
         TM    OFLAGS(LOGWKPTR),B'00010000'                        0043
         BO    @RF00043                                            0043
*         DO;                       /* NO, OPEN SDALOGIN     @Y30LB55*/
*                                                                  0044
*           /*********************************************************/
*           /*                                                       */
*           /* OPEN SDALOGIN                                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0045
*           RFY                                                    0045
*            (R1,                                                  0045
*             R6) RSTD;                                    /*@Y30LB55*/
*           R1=ADDR(OPENLIST);      /* R1 -> OPENLIST        @Y30LB55*/
         LR    R1,LOGWKPTR                                         0046
*           R6=ADDR(SDALOGIN);      /* R6 -> DCB             @Y30LB55*/
         LA    R6,SDALOGIN(,LOGWKPTR)                              0047
*           GEN( OPEN  ((R6),INPUT),MF=(E,(R1)));          /*@Y30LB55*/
          OPEN  ((R6),INPUT),MF=(E,(R1))
*           RFY                                                    0049
*            (R1,                                                  0049
*             R6) UNRSTD;                                  /*@Y30LB55*/
*           IF OFLAGS(4)='1'B THEN  /* WAS OPEN DONE         @Y30LB55*/
         TM    OFLAGS(LOGWKPTR),B'00010000'                        0050
         BNO   @RF00050                                            0050
*             DO;                   /* YES, GET INPUT BUFFER @Y30LB55*/
*               RETCODE=0;          /* SET RETURN CODE       @Y30LB55*/
*                                                                  0052
         SLR   RETCODE,RETCODE                                     0052
*               /*****************************************************/
*               /*                                                   */
*               /* GETMAIN SECTION                                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0053
*               CORELEN=DCBBLKSI;   /* SET LENGTH TO BLKSIZE @Y30LB55*/
         SLR   @10,@10                                             0053
         ICM   @10,3,DCBBLKSI(LOGWKPTR)                            0053
         STCM  @10,7,CORELEN(CVTPTR)                               0053
*               SPNO=LOG0SPNO;      /* SET SUBPOOL NUMBER    @Y30LB55*/
         MVC   SPNO(1,CVTPTR),LOG0SPNO                             0054
*               RFY                                                0055
*                 R1 RSTD;                                 /*@Y30LB55*/
*               R1=ADDR(WORKCALL);  /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                                0056
*               CALL ISDAGET1;      /* GET INPUT BUFFER      @Y30LB55*/
         L     @15,@CV00163                                        0057
         BALR  @14,@15                                             0057
*               RFY                                                0058
*                 R15 RSTD;                                /*@Y30LB55*/
*               RETCODE=R15;        /* SAVE RETURN CODE      @Y30LB55*/
         LR    RETCODE,R15                                         0059
*               RFY                                                0060
*                (R1,                                              0060
*                 R15) UNRSTD;                             /*@Y30LB55*/
*               IF RETCODE=0 THEN   /* GOT BUFFER            @Y30LB55*/
         LTR   RETCODE,RETCODE                                     0061
         BNZ   @RF00061                                            0061
*                 DATAPTR=COREADDR; /* YES, MOVE ADDR TO ISDACVT   0062
*                                                            @Y30LB55*/
         MVC   DATAPTR(4,CVTPTR),COREADDR(CVTPTR)                  0062
*               ELSE                /* NO BUFFER, NO CORE    @Y30LB55*/
*                 RETCODE=24;       /* SET NO CORE RETURN CODE     0063
*                                                            @Y30LB55*/
         B     @RC00061                                            0063
@RF00061 LA    RETCODE,24                                          0063
*             END;                  /* END GETMAIN SECTION   @Y30LB55*/
*           ELSE                    /* NOT OPEN, MISSING DD CARD   0065
*                                                            @Y30LB55*/
*             RETCODE=4;            /* SET RETURN CODE       @Y30LB55*/
         B     @RC00050                                            0065
@RF00050 LA    RETCODE,4                                           0065
*         END;                      /* END OPEN CODE         @Y30LB55*/
*       ELSE                        /* NOT FIRST READ, SDALOGIN OPEN
*                                                            @Y30LB55*/
*         IF DCBFDAD(2:8)=LASTTR THEN/* READ LAST RECORD WRITTEN   0067
*                                                            @Y30LB55*/
         B     @RC00043                                            0067
@RF00043 CLC   DCBFDAD+1(7,LOGWKPTR),LASTTR(LOGWKPTR)              0067
         BNE   @RF00067                                            0067
*           RETCODE=20;             /* YES, SET RETURN CODE  @Y30LB55*/
         LA    RETCODE,20                                          0068
*         ELSE                                                     0069
*           RETCODE=0;              /* NO, SET RETURN CODE   @Y30LB55*/
         B     @RC00067                                            0069
@RF00067 SLR   RETCODE,RETCODE                                     0069
*     END;                          /* END OPEN SECTION      @Y30LB55*/
*   ELSE                                                           0071
*     ;                             /* BAD RETURN FROM ISDAGET1    0071
*                                                            @Y30LB55*/
@RF00041 DS    0H                                                  0072
*   IF RETCODE=0 THEN               /* ANY ERRORS YET        @Y30LB55*/
*                                                                  0072
@RC00041 LTR   RETCODE,RETCODE                                     0072
         BNZ   @RF00072                                            0072
*     /***************************************************************/
*     /*                                                             */
*     /* READ SYS1.LOGREC                                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0073
*     DO;                           /* NO, READ SYS1.LOGREC  @Y30LB55*/
*       RFY                                                        0074
*        (R8,                                                      0074
*         R6,                                                      0074
*         R7) RSTD;                                        /*@Y30LB55*/
*       R8=ADDR(SDALOGIN);          /* R8 -> DCB             @Y30LB55*/
         LA    R8,SDALOGIN(,LOGWKPTR)                              0075
*       R7=ADDR(READLIST);          /* PTR TO READ ECB       @Y30LB55*/
         LA    R7,READLIST(,LOGWKPTR)                              0076
*       R6=DATAPTR+4;               /* SET ADDR OF DATAIN+4  @Y30LB55*/
         LA    R6,4                                                0077
         AL    R6,DATAPTR(,CVTPTR)                                 0077
*       GEN( READ  (R7),SF,(R8),(R6),'S',MF=E);            /*@Y30LB55*/
          READ  (R7),SF,(R8),(R6),'S',MF=E
*       GEN( CHECK  (R7) )                                         0079
*       FLOWS(EOF,EOD);                                    /*@Y30LB55*/
          CHECK  (R7)
*       RFY                                                        0080
*        (R8,                                                      0080
*         R6,                                                      0080
*         R7) UNRSTD;                                      /*@Y30LB55*/
*       NREC=NREC+1;                /* INC RECORD COUNT      @Y30LB55*/
         LA    @08,1                                               0081
         L     @15,NREC(,LOGWKPTR)                                 0081
         ALR   @15,@08                                             0081
         ST    @15,NREC(,LOGWKPTR)                                 0081
*       TEMPPTR=DCBIOBA;            /* MOVE PTR TO IOB       @Y30LB55*/
         L     TEMPPTR,DCBIOBA(,LOGWKPTR)                          0082
*       SCWF=DCBBLKSI-RSIDUL+4;     /* COMPUTE LRECL + 4     @Y30LB55*/
         SLR   @14,@14                                             0083
         ICM   @14,3,DCBBLKSI(LOGWKPTR)                            0083
         SH    @14,RSIDUL(,TEMPPTR)                                0083
         AH    @14,@CH00128                                        0083
         STH   @14,SCWF(,LOGWKPTR)                                 0083
*       DATAIN(1:4)=SCW;            /* BUILD VARIABLE RECORD @Y30LB55*/
         L     @10,DATAPTR(,CVTPTR)                                0084
         MVC   DATAIN(4,@10),SCW(LOGWKPTR)                         0084
*       IF NREC=1 THEN              /* IS THIS FIRST READ    @Y30LB55*/
         CR    @15,@08                                             0085
         BNE   @RF00085                                            0085
*         IF DATAIN(5:6)='FFFF'X THEN/* YES, IS RECORD LOGREC HEADER
*                                                            @Y30LB55*/
         CLC   DATAIN+4(2,@10),@CB00180                            0086
         BNE   @RF00086                                            0086
*           LOGHDR=DATAIN(5:44);    /* YES, SAVE LOGREC HEADER     0087
*                                                            @Y30LB55*/
         MVC   LOGHDR(40,LOGWKPTR),DATAIN+4(@10)                   0087
*         ELSE                      /* NO, NOT READING SYS1.LOGREC 0088
*                                                            @Y30LB55*/
*           RETCODE=16;             /* SET RETURN CODE       @Y30LB55*/
         B     @RC00086                                            0088
@RF00086 LA    RETCODE,16                                          0088
*       ELSE                                                       0089
*         ;                         /* NO, NOT FIRST READ    @Y30LB55*/
@RF00085 DS    0H                                                  0090
*     END;                          /* END READ SYS1.LOGREC CODE   0090
*                                                            @Y30LB55*/
*   ELSE                            /* YES, ERROR FOUND, RETCODE SET
*                                                            @Y30LB55*/
*     CALL FREEBUFF;                /* FREE CORE AND CLOSE DCB     0091
*                                                            @Y30LB55*/
         B     @RC00072                                            0091
@RF00072 BAL   @14,FREEBUFF                                        0091
*   RETURN CODE(RETCODE);           /* RETURN WITH CONDCODE  @Y30LB55*/
@RC00072 L     @13,4(,@13)                                         0092
         L     @00,@SIZDATD                                        0092
         LR    @01,@11                                             0092
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@09                                             0092
         L     @14,12(,@13)                                        0092
         LM    @00,@12,20(@13)                                     0092
         BR    @14                                                 0092
*                                                                  0093
*   /*****************************************************************/
*   /*                                                               */
*   /* EOF - ENTRY FOR END OF FILE READ                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0093
*EOF:                                                              0093
*   RETCODE=8;                      /* SET END OF FILE RETURN CODE 0093
*                                                            @Y30LB55*/
EOF      LA    RETCODE,8                                           0093
*   CALL FREEBUFF;                  /* FREE INPUT BUFFER     @Y30LB55*/
         BAL   @14,FREEBUFF                                        0094
*   RETURN CODE(RETCODE);                                  /*@Y30LB55*/
*                                                                  0095
         L     @13,4(,@13)                                         0095
         L     @00,@SIZDATD                                        0095
         LR    @01,@11                                             0095
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@09                                             0095
         L     @14,12(,@13)                                        0095
         LM    @00,@12,20(@13)                                     0095
         BR    @14                                                 0095
*   /*****************************************************************/
*   /*                                                               */
*   /* EOD - ENTRY FOR READ ERROR                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0096
*EOD:                                                              0096
*   RETCODE=12;                     /* SET SYNAD RETURN CODE @Y30LB55*/
EOD      LA    RETCODE,12                                          0096
*   CALL FREEBUFF;                  /* FREE INPUT BUFFER     @Y30LB55*/
         BAL   @14,FREEBUFF                                        0097
*   RETURN CODE(RETCODE);           /* RETURN TO ISDASDA0    @Y30LB55*/
         L     @13,4(,@13)                                         0098
         L     @00,@SIZDATD                                        0098
         LR    @01,@11                                             0098
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@09                                             0098
         L     @14,12(,@13)                                        0098
         LM    @00,@12,20(@13)                                     0098
         BR    @14                                                 0098
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEBUFF - CODE TO FREEMAIN INPUT BUFFER AND CLOSE SDALOGIN   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0099
*FREEBUFF:                                                         0099
*   PROC;                           /* FREEMAIN FOR OBRMDR   @Y30LB55*/
FREEBUFF STM   @14,@12,@SA00002                                    0099
*   IF LOG00PTR^=0 THEN             /* HAVE WORKAREA         @Y30LB55*/
         SLR   @10,@10                                             0100
         C     @10,LOG00PTR(,CVTPTR)                               0100
         BE    @RF00100                                            0100
*     DO;                           /* YES, CLEAN UP         @Y30LB55*/
*      IF DATAPTR^=0 THEN           /* HAVE INPUT BUFFER     @Y30LB55*/
         L     @15,DATAPTR(,CVTPTR)                                0102
         CR    @15,@10                                             0102
         BE    @RF00102                                            0102
*        DO;                        /* YES, FREE IT          @Y30LB55*/
*          CORELEN=DCBBLKSI;        /* SET LENGTH TO BLKSIZE @Y30LB55*/
         SLR   @10,@10                                             0104
         ICM   @10,3,DCBBLKSI(LOGWKPTR)                            0104
         STCM  @10,7,CORELEN(CVTPTR)                               0104
*          COREADDR=DATAPTR;        /* ADDR OF INPUT BUFFER  @Y30LB55*/
         ST    @15,COREADDR(,CVTPTR)                               0105
*          SPNO=LOG0SPNO;           /* SET SUBPOOL NUMBER    @Y30LB55*/
         MVC   SPNO(1,CVTPTR),LOG0SPNO                             0106
*          RFY                                                     0107
*            R1 RSTD;                                      /*@Y30LB55*/
*          R1=ADDR(WORKCALL);       /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                                0108
*          CALL ISDAFREE;           /* FREE INPUT BUFFER     @Y30LB55*/
         L     @15,@CV00164                                        0109
         BALR  @14,@15                                             0109
*          RFY                                                     0110
*            R1 UNRSTD;                                    /*@Y30LB55*/
*          DATAPTR=0;               /* ZERO DATA PTR IN ISDACVT    0111
*                                                            @Y30LB55*/
         SLR   @10,@10                                             0111
         ST    @10,DATAPTR(,CVTPTR)                                0111
*        END;                       /* END FREE DATA AREA    @Y30LB55*/
*      ELSE;                        /* NO DATA AREA TO FREE  @Y30LB55*/
@RF00102 DS    0H                                                  0114
*      IF OFLAGS(4)='1'B THEN       /* DCB OPEN              @Y30LB55*/
         TM    OFLAGS(LOGWKPTR),B'00010000'                        0114
         BNO   @RF00114                                            0114
*        DO;                        /* YES, CLOSE IT         @Y30LB55*/
*          RFY                                                     0116
*           (R1,                                                   0116
*            R6) RSTD;                                     /*@Y30LB55*/
*          R1=ADDR(CLOSLIST);       /* R1 -> CLOSLIST        @Y30LB55*/
         LA    R1,CLOSLIST(,LOGWKPTR)                              0117
*          R6=ADDR(SDALOGIN);       /* R6 -> DCB             @Y30LB55*/
         LA    R6,SDALOGIN(,LOGWKPTR)                              0118
*          GEN( CLOSE ((R6)),MF=(E,(R1)));                 /*@Y30LB55*/
          CLOSE ((R6)),MF=(E,(R1))
*          RFY                                                     0120
*           (R1,                                                   0120
*            R6) UNRSTD;                                   /*@Y30LB55*/
*        END;                       /* END CLOSE SECTION     @Y30LB55*/
*      ELSE                                                        0122
*        ;                          /* NOT OPEN              @Y30LB55*/
@RF00114 DS    0H                                                  0123
*       CORELEN=LENGTH(LOGWORK);    /* MOVE LENGTH OF LOGWORK@Y30LB55*/
         MVC   CORELEN(3,CVTPTR),@CF00192+1                        0123
*       SPNO=LOG0SPNO;              /* MOVE SUBPOOL NUMBER   @Y30LB55*/
         MVC   SPNO(1,CVTPTR),LOG0SPNO                             0124
*       COREADDR=LOG00PTR;          /* MOVE ADDRESS OF AREA  @Y30LB55*/
         MVC   COREADDR(4,CVTPTR),LOG00PTR(CVTPTR)                 0125
*       RFY                                                        0126
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                                0127
*       CALL ISDAFREE;              /* FREE LOGWORK          @Y30LB55*/
         L     @15,@CV00164                                        0128
         BALR  @14,@15                                             0128
*       RFY                                                        0129
*         R1 UNRSTD;                                       /*@Y30LB55*/
*       LOG00PTR=0;                 /* ZERO LOG00PTR IN ISDACVT    0130
*                                                            @Y30LB55*/
         SLR   @10,@10                                             0130
         ST    @10,LOG00PTR(,CVTPTR)                               0130
*     END;                          /* END CLEAN UP          @Y30LB55*/
*   ELSE                                                           0132
*     ;                             /* NO WORKAREA           @Y30LB55*/
@RF00100 DS    0H                                                  0133
*   END FREEBUFF;                   /* END FREEMAIN SECTION  @Y30LB55*/
@EL00002 DS    0H                                                  0133
@EF00002 DS    0H                                                  0133
@ER00002 LM    @14,@12,@SA00002                                    0133
         BR    @14                                                 0133
*                                                                  0134
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERATE LIST FORM FOR OPEN, CLOSE, READ                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0134
*   GENERATE DATA DEFS(DCBSTAT,OPENSTAT,CLOSSTAT);         /*@Y30LB55*/
*   END ISDALOG0                                           /*@Y30LB55*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ISDACVT )                                        *
*;                                                                 0135
@EL00001 L     @13,4(,@13)                                         0135
@EF00001 L     @00,@SIZDATD                                        0135
         LR    @01,@11                                             0135
         ISDAFSPC R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0135
         BR    @14                                                 0135
@DATA    DS    0H
@CH00128 DC    H'4'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00002 DS    15F
ISDALOG0 CSECT
         DS    0F
@CF00192 DC    F'172'
@DATD    DSECT
         DS    0D
ISDALOG0 CSECT
         NOPR  ((@ENDDATD-@DATD)/161*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00163 DC    V(ISDAGET1)
@CV00164 DC    V(ISDAFREE)
@CV00162 DC    V(ISDAGET0)
         DS    0D
@CB00180 DC    X'FFFF'
LOG0SPNO DC    X'00'
PATCH    DC    50X'00'
ISDALOG0 CSECT
DCBSTAT  DCB   DSORG=PS,MACRF=R,DDNAME=SDALOGIN,SYNAD=EOD,EODAD=EOF,  XX
               RECFM=U,BLKSIZE=1832,LRECL=1832
READSTAT READ  READECB,SF,MF=L
OPENSTAT OPEN  (0,INPUT),MF=L
CLOSSTAT CLOSE (0),MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISDALOG0 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEMPPTR  EQU   @10
RETCODE  EQU   @09
LOGWKPTR EQU   @03
CVTPTR   EQU   @02
R6       EQU   @06
R7       EQU   @07
R15      EQU   @15
R8       EQU   @08
R1       EQU   @01
ISDACVT  EQU   0
CVTPTRS0 EQU   ISDACVT
DATAPTR  EQU   CVTPTRS0
LOG00PTR EQU   CVTPTRS0+36
WORKCALL EQU   CVTPTRS0+96
GET0CALL EQU   ISDACVT+100
SPNOLEN  EQU   GET0CALL
SPNO     EQU   SPNOLEN
CORELEN  EQU   SPNOLEN+1
COREADDR EQU   GET0CALL+4
HEXPCALL EQU   ISDACVT+108
PRT0CALL EQU   ISDACVT+120
OUTLINE  EQU   PRT0CALL
SDADATD  EQU   ISDACVT+256
PRTDATD  EQU   ISDACVT+416
LOGWORK  EQU   0
OPENLIST EQU   LOGWORK
CLOSLIST EQU   LOGWORK+4
NREC     EQU   LOGWORK+8
SCW      EQU   LOGWORK+12
SCWF     EQU   SCW
READLIST EQU   LOGWORK+16
SDALOGIN EQU   LOGWORK+36
DCBFDAD  EQU   SDALOGIN+5
OFLAGS   EQU   SDALOGIN+48
DCBBLKSI EQU   SDALOGIN+62
DCBIOBA  EQU   SDALOGIN+68
LOGHDR   EQU   LOGWORK+132
LASTTR   EQU   LOGHDR+22
DATAIN   EQU   0
RSIDUL   EQU   22
CSW      EQU   16
WORKPTR  EQU   0
*                                      START UNREFERENCED COMPONENTS
SFTYBYTS EQU   LOGHDR+39
EWMSW    EQU   LOGHDR+38
EWMTRK   EQU   LOGHDR+34
DEVCODE  EQU   LOGHDR+33
EWMCNT   EQU   LOGHDR+31
TRKSPER  EQU   LOGHDR+29
TRKCAP   EQU   LOGHDR+20
BYTSREM  EQU   LOGHDR+18
RESTART  EQU   LOGHDR+11
@NM00013 EQU   LOGHDR+10
UPLIMIT  EQU   LOGHDR+6
LOWLIMIT EQU   LOGHDR+2
CLASRC   EQU   LOGHDR
@NM00012 EQU   SDALOGIN+84
DCBLRECL EQU   SDALOGIN+82
@NM00011 EQU   SDALOGIN+72
@NM00010 EQU   SDALOGIN+64
@NM00009 EQU   SDALOGIN+49
@NM00008 EQU   SDALOGIN+13
@NM00007 EQU   SDALOGIN
@NM00006 EQU   READLIST+16
@NM00005 EQU   READLIST+12
@NM00004 EQU   READLIST+8
@NM00003 EQU   READLIST+6
@NM00002 EQU   READLIST+4
@NM00001 EQU   READLIST
SCW2     EQU   SCW+2
PRTSA001 EQU   PRTDATD
SDATEMPS EQU   SDADATD+136
SDASA002 EQU   SDADATD+76
SDAPC001 EQU   SDADATD+72
SDASA001 EQU   SDADATD
SDARPTID EQU   PRT0CALL+133
LINE     EQU   OUTLINE+1
ANSI     EQU   OUTLINE
DUMPIDNO EQU   HEXPCALL+8
DUMPLEN  EQU   HEXPCALL+4
DUMPADDR EQU   HEXPCALL
GEN00PTR EQU   CVTPTRS0+92
CNFG0PTR EQU   CVTPTRS0+88
PWR00PTR EQU   CVTPTRS0+84
APR00PTR EQU   CVTPTRS0+80
DRC00PTR EQU   CVTPTRS0+76
DAT00PTR EQU   CVTPTRS0+72
CSB00PTR EQU   CVTPTRS0+68
DCK00PTR EQU   CVTPTRS0+64
EQC00PTR EQU   CVTPTRS0+60
FSC00PTR EQU   CVTPTRS0+56
DHE00PTR EQU   CVTPTRS0+52
SUM00PTR EQU   CVTPTRS0+48
PAD00PTR EQU   CVTPTRS0+44
DCS00PTR EQU   CVTPTRS0+40
HIST0PTR EQU   CVTPTRS0+32
PRT00PTR EQU   CVTPTRS0+28
GET00PTR EQU   CVTPTRS0+24
TYPE0PTR EQU   CVTPTRS0+20
PARM0PTR EQU   CVTPTRS0+16
SDA00PTR EQU   CVTPTRS0+12
PARMPTR  EQU   CVTPTRS0+8
SDATAPTR EQU   CVTPTRS0+4
*                                      END UNREFERENCED COMPONENTS
@RC00028 EQU   @RC00016
@RC00067 EQU   @RC00041
@RC00043 EQU   @RC00041
@RC00085 EQU   @RC00072
@RC00050 EQU   @RC00043
@RC00086 EQU   @RC00085
@RC00061 EQU   @RC00050
@ENDDATA EQU   *
         END   ISDALOG0,(C'PLS0133',0603,75313)
