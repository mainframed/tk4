         TITLE 'DATA HANDLING CHECKS BY DRC,DRD REPORT                 *
                        '
ISDADAT1 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(8)                                           01S0001
         DC    C'ISDADAT1'                                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         ISDAGSPC R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MVC   @PC00001(4),0(@01)                               01S0001
*                                                            @ZM02889*/
*                                                               01S0050
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF ISDADAT1 DECLARES                              @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0051
*   CVTPTR=WORKPTR;                 /* SAVE CALLING PARAMETER-PTR TO
*                                      SDACVT                @Y30LB50*/
         L     @15,@PC00001                                     01S0051
         L     CVTPTR,WORKPTR(,@15)                             01S0051
*   DATPTR=DAT00PTR;                /* SET LOCAL POINTER TO DAT WORK
*                                      AREA                  @Y30LB50*/
         L     DATPTR,DAT00PTR(,CVTPTR)                         01S0052
*   RETRNREG=NODATA;                /* SET RETURN CODE FOR NO DATA
*                                      ENCOUNTERED - WILL BE RESET
*                                      WHEN DATA IS ENCOUNTERED 01S0053
*                                                            @Y30LB50*/
         LA    RETRNREG,8                                       01S0053
*   RFY                                                         01S0054
*     OPTR RSTD;                    /*                       @Y30LB50*/
*   OPTR=ADDR(OUTLINE);             /* POINT TO OUTPUT LINE IN SDACVT
*                                                            @Y30LB50*/
         LA    OPTR,OUTLINE(,CVTPTR)                            01S0055
*   RFY                                                         01S0056
*     OUTPTR RSTD;                  /*                       @Y30LB50*/
*   DO I=1 TO MAXCS;                /* PROCESS ALL CS ACCUMULATORS
*                                                            @Y30LB50*/
         LA    @07,1                                            01S0057
         STH   @07,I(,DATPTR)                                   01S0057
@DL00057 DS    0H                                               01S0058
*     IF CSPTRS(I)^=0 THEN          /* IF ACCUMULATOR WAS OBTAINED
*                                                            @Y30LB50*/
         SLR   @07,@07                                          01S0058
         LH    @04,I(,DATPTR)                                   01S0058
         LR    @03,@04                                          01S0058
         SLA   @03,2                                            01S0058
         AL    @03,@CF00428                                     01S0058
         L     @03,CSPTRS(@03,DATPTR)                           01S0058
         CR    @03,@07                                          01S0058
         BE    @RF00058                                         01S0058
*                                                               02S0059
*   /*****************************************************************/
*   /*                                                               */
*   /* DATRPPT IS USED TO FORMAT AND PRINT THE DAT CHECKS REPORT FOR */
*   /* EACH ACCUMULATOR USED                                 @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0059
*   DO;                             /*                       @Y30LB50*/
*     RETRNREG=0;                   /* SET RETURN CODE TO 0  @Y30LB50*/
         LR    RETRNREG,@07                                     02S0060
*     CSPTR=CSPTRS(I);              /* INITIALIZE POINTER TO    02S0061
*                                      CARTRIDGE STORE ACCUMULATOR
*                                      BLOCK BEING PROCESSED @Y30LB50*/
         LR    CSPTR,@03                                        02S0061
*     OUTPUT=DATHEAD;               /* SET MAIN HEADING INTO OUTPUT
*                                      LINE                  @Y30LB50*/
         MVI   OUTPUT+129(OPTR),C' '                            02S0062
         MVC   OUTPUT+130(3,OPTR),OUTPUT+129(OPTR)              02S0062
         MVC   OUTPUT(129,OPTR),@CC00170                        02S0062
*     HOLD=I-1;                     /* SET CARTRIDGE STORE NUMBER
*                                      INTO OUTPUT LINE      @Y30LB50*/
         BCTR  @04,0                                            02S0063
         ST    @04,HOLD(,DATPTR)                                02S0063
*     HOLD(4)=HOLD(4)×'0';          /* MAKE PRINTABLE        @Y30LB50*/
         OI    HOLD+3(DATPTR),C'0'                              02S0064
*     CSNO=HOLD(4);                 /*                       @Y30LB50*/
         MVC   CSNO(1,OPTR),HOLD+3(DATPTR)                      02S0065
*     RFY                                                       02S0066
*       R1 RSTD;                    /*                       @Y30LB50*/
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0067
*     CALL ISDAPRT0;                /* PRINT MAIN HEADING    @Y30LB50*/
         L     @15,@CV00159                                     02S0068
         BALR  @14,@15                                          02S0068
*     OUTPUT=' ';                   /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(OPTR),C' '                              02S0069
         MVC   OUTPUT+2(131,OPTR),OUTPUT+1(OPTR)                02S0069
         MVI   OUTPUT(OPTR),C' '                                02S0069
*     CNTRL=SKIP;                   /* CONTROL CHARACTER     @Y30LB50*/
         MVI   CNTRL(OPTR),C'0'                                 02S0070
*     SSIDHD1=DRCID;                /* FIRST LINE OF SUBHEADING 02S0071
*                                                            @Y30LB50*/
         MVC   SSIDHD1(8,OPTR),@CC00206                         02S0071
*     SSIDHD2=DRDID;                /* FIRST LINE OF SUBHEADING 02S0072
*                                                            @Y30LB50*/
         MVC   SSIDHD2(8,OPTR),@CC00208                         02S0072
*     CALL ISDAPRT0;                /* PRINT FIRST LINE OF SUBHEADING
*                                                            @Y30LB50*/
         L     @15,@CV00159                                     02S0073
         BALR  @14,@15                                          02S0073
*     CNTRL=SKIP1;                  /* CONTROL CHARACTER     @Y30LB50*/
         MVI   CNTRL(OPTR),C' '                                 02S0074
*     DIVLINES=DATSUB1;             /* COLUMN HEADINGS       @Y30LB50*/
         MVC   DIVLINES(86,OPTR),@CC00199                       02S0075
*     OUTPTR=ADDR(SSID0);           /* POINTER FOR FIRST SSID'S CS
*                                                            @Y30LB50*/
         LA    OUTPTR,SSID0(,OPTR)                              02S0076
*     LOOPEND=MAXDRC;               /* PROCESS DRC SSIDS FIRST  02S0077
*                                                            @Y30LB50*/
         MVC   LOOPEND(2,DATPTR),@CH00101                       02S0077
*     DO K=1 TO 2;                  /* PROCESS DRC AND DRD SEPARATELY
*                                                            @Y30LB50*/
         LA    @07,1                                            02S0078
         STH   @07,K(,DATPTR)                                   02S0078
@DL00078 DS    0H                                               02S0079
*       DO M=1 TO LOOPEND;          /* ADD CS TO EACH SSID   @Y30LB50*/
         LA    @07,1                                            02S0079
         B     @DE00079                                         02S0079
@DL00079 DS    0H                                               02S0080
*         SSIDCS=HOLD(4);           /*                       @Y30LB50*/
         MVC   SSIDCS(1,OUTPTR),HOLD+3(DATPTR)                  02S0080
*         OUTPTR=OUTPTR+LENGTH(SSIDX);/*                        02S0081
*                                      SPACE FOR NEXT SSID   @Y30LB50*/
         AH    OUTPTR,@CH00094                                  02S0081
*       END;                        /*                       @Y30LB50*/
         LA    @07,1                                            02S0082
         AH    @07,M(,DATPTR)                                   02S0082
@DE00079 STH   @07,M(,DATPTR)                                   02S0082
         CH    @07,LOOPEND(,DATPTR)                             02S0082
         BNH   @DL00079                                         02S0082
*       OUTPTR=ADDR(SSID1);         /* POINT TO DRD SSID     @Y30LB50*/
         LA    OUTPTR,SSID1(,OPTR)                              02S0083
*       LOOPEND=MAXDRD;             /* PROCESS DRD SSIDS     @Y30LB50*/
         MVC   LOOPEND(2,DATPTR),@CH00070                       02S0084
*     END;                          /*                       @Y30LB50*/
         LA    @07,1                                            02S0085
         AH    @07,K(,DATPTR)                                   02S0085
         STH   @07,K(,DATPTR)                                   02S0085
         CH    @07,@CH00122                                     02S0085
         BNH   @DL00078                                         02S0085
*     SSID0=HOLD(4);                /* ADD CARTRIDGE STORE TO SSID
*                                                            @Y30LB50*/
         MVC   SSID0(1,OPTR),HOLD+3(DATPTR)                     02S0086
*     CALL ISDAPRT0;                /*                       @Y30LB50*/
         L     @15,@CV00159                                     02S0087
         BALR  @14,@15                                          02S0087
*     OUTPUT=DATSUB3;               /* DIVIDING LINE FOR FIRST BYTE
*                                                            @Y30LB50*/
         MVI   OUTPUT+123(OPTR),C' '                            02S0088
         MVC   OUTPUT+124(9,OPTR),OUTPUT+123(OPTR)              02S0088
         MVC   OUTPUT(123,OPTR),@CC00181                        02S0088
*     CALL ISDAPRT0;                /*                       @Y30LB50*/
         L     @15,@CV00159                                     02S0089
         BALR  @14,@15                                          02S0089
*     OUTPUT=' ';                   /*                       @Y30LB50*/
         MVI   OUTPUT+1(OPTR),C' '                              02S0090
         MVC   OUTPUT+2(131,OPTR),OUTPUT+1(OPTR)                02S0090
         MVI   OUTPUT(OPTR),C' '                                02S0090
*     RFY                                                       02S0091
*       R1 UNRSTD;                  /*                       @Y30LB50*/
*     RFY                                                       02S0092
*       LINEPTR RSTD;               /*                       @Y30LB50*/
*     LINEPTR=ADDR(LINETITL);       /* SET POINTER TO BIT       02S0093
*                                      DESCRIPTIONS TO BE PRINTED
*                                      WITH THE BIT COUNTS   @Y30LB50*/
*                                                               02S0093
         LA    LINEPTR,LINETITL                                 02S0093
*   /*****************************************************************/
*   /*                                                               */
*   /* DATCVRT IS USED TO FORMAT AND PRINT ONE LINE OF OUTPUT FOR    */
*   /* EACH BIT COUNT ACCUMULATED. THE OUTPUT LINE INCLUDES ONE COUNT*/
*   /* PER EACH DRC AND DRD AND ONE TOTAL COUNT.             @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0094
*   DO K=1 TO MAXBYTE;              /* PROCESS DAT BYTES     @Y30LB50*/
         LA    @04,1                                            02S0094
         STH   @04,K(,DATPTR)                                   02S0094
@DL00094 DS    0H                                               02S0095
*     OUTPUT=LINE0;                 /* PRINT MAIN HEADING FOR THIS
*                                      BYTE                  @Y30LB50*/
         MVI   OUTPUT+37(OPTR),C' '                             02S0095
         MVC   OUTPUT+38(95,OPTR),OUTPUT+37(OPTR)               02S0095
         MVC   OUTPUT(37,OPTR),LINE0(LINEPTR)                   02S0095
*     DIVLINES=DATSUB4;             /* ADD DIVIDING LINES FOR COUNTS
*                                                            @Y30LB50*/
         MVC   DIVLINES(86,OPTR),@CC00192                       02S0096
*     RFY                                                       02S0097
*       R1 RSTD;                    /*                       @Y30LB50*/
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0098
*     CALL ISDAPRT0;                /*                       @Y30LB50*/
         L     @15,@CV00159                                     02S0099
         BALR  @14,@15                                          02S0099
*     RFY                                                       02S0100
*       R1 UNRSTD;                  /*                       @Y30LB50*/
*     LINEPTR=LINEPTR+LENGTH(LINE0);/* PTR TO FIRST BIT DESCRIPTION
*                                                            @Y30LB50*/
         AH    LINEPTR,@CH00224                                 02S0101
*     DO J=1 TO BITCNT;             /* PROCESS BITS IN ONE BYTE 02S0102
*                                                            @Y30LB50*/
         LA    @04,1                                            02S0102
         STH   @04,J(,DATPTR)                                   02S0102
@DL00102 DS    0H                                               02S0103
*       OUTPUT=' ';                 /* PREPARE BIT DESCRIPTOR LINE OF
*                                      OUTPUT                @Y30LB50*/
         MVI   OUTPUT+1(OPTR),C' '                              02S0103
         MVC   OUTPUT+2(131,OPTR),OUTPUT+1(OPTR)                02S0103
         MVI   OUTPUT(OPTR),C' '                                02S0103
*       BITBEG='×BIT';              /*                       @Y30LB50*/
         MVC   BITBEG(4,OPTR),@CC00424                          02S0104
*       HOLD=J-1;                   /* ISOLATE BIT NUMBER    @Y30LB50*/
         LH    @04,J(,DATPTR)                                   02S0105
         BCTR  @04,0                                            02S0105
         ST    @04,HOLD(,DATPTR)                                02S0105
*       BITNUMB=HOLD(4)×'0';        /*                       @Y30LB50*/
         MVC   BITNUMB(1,OPTR),HOLD+3(DATPTR)                   02S0106
         OI    BITNUMB(OPTR),C'0'                               02S0106
*       BITDESC=LINE1;              /* BIT DESCRIPTOR        @Y30LB50*/
         MVC   BITDESC(27,OPTR),LINE1(LINEPTR)                  02S0107
*       DIVLINES=DATSUB4;           /* ADD DIVIDING LINES    @Y30LB50*/
         MVC   DIVLINES(86,OPTR),@CC00192                       02S0108
*       TSUM=0;                     /* SET TOTAL FOR ALL DRCS TO 0
*                                                            @Y30LB50*/
         SLR   @04,@04                                          02S0109
         ST    @04,TSUM(,DATPTR)                                02S0109
*       OUTPTR=ADDR(CNTSECT);       /* COUNT SECTION OF OUTPUT  02S0110
*                                                            @Y30LB50*/
*                                                               02S0110
         LA    OUTPTR,CNTSECT(,OPTR)                            02S0110
*   /*****************************************************************/
*   /*                                                               */
*   /* DAT1CNT IS USED TO CONVERT THE COUNTS (ONE PER EACH DRC AND   */
*   /* EACH DRD) FOR EACH BIT , MAINTAIN THE RUNNING TOTAL FOR ALL   */
*   /* DRCS AND DRDS FOR EACH BIT AND FORMAT THE BIT COUNTS AND THE  */
*   /* TOTAL INTO THE OUTPUT LINE.                           @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0111
*   LOOPEND=MAXDRC;                 /* PROCESS DRC COUNTS FIRST 02S0111
*                                                            @Y30LB50*/
         MVC   LOOPEND(2,DATPTR),@CH00101                       02S0111
*   DO M=1 TO 2;                    /* PROCESS DRC AND DRD COUNTS
*                                      SEPARATELY            @Y30LB50*/
         LA    @04,1                                            02S0112
         STH   @04,M(,DATPTR)                                   02S0112
@DL00112 DS    0H                                               02S0113
*     DO L=1 TO LOOPEND;            /* PROCESS EACH DRC AND DRD COUNT
*                                                            @Y30LB50*/
         LA    @04,1                                            02S0113
         B     @DE00113                                         02S0113
@DL00113 DS    0H                                               02S0114
*       WORK1(3:8)=PATT2;           /* SET EDIT PATTERN INTO OUTPUT
*                                                            @Y30LB50*/
         MVC   WORK1+2(6,DATPTR),PATT2                          02S0114
*       CVD(BYTEBIT,HOLDDBL);       /* CONVERT COUNT         @Y30LB50*/
         LH    @04,BYTEBIT(,CSPTR)                              02S0115
         CVD   @04,HOLDDBL(,DATPTR)                             02S0115
*       ED(WORK1(3:8),HOLD1);       /*                       @Y30LB50*/
         ED    WORK1+2(6,DATPTR),HOLD1(DATPTR)                  02S0116
*       OCOUNT=WORK1(4:8);          /* MOVE 5 CHAR           @Y30LB55*/
         MVC   OCOUNT(5,OUTPTR),WORK1+3(DATPTR)                 02S0117
*       TSUM=TSUM+BYTEBIT;          /* ADD TO TOTAL FOR ALL DRCS,DRDS
*                                                            @Y30LB50*/
         AL    @04,TSUM(,DATPTR)                                02S0118
         ST    @04,TSUM(,DATPTR)                                02S0118
*       CSPTR=CSPTR+LENGTH(BYTEBIT);/* UP PTR TO NEXT DRC COUNT 02S0119
*                                                            @Y30LB50*/
         AH    CSPTR,@CH00122                                   02S0119
*       OUTPTR=OUTPTR+LENGTH(OUTCNTS);/*                        02S0120
*                                      UP PTR IN OUTPUT FOR NEXT CNT
*                                                            @Y30LB50*/
         AH    OUTPTR,@CH00094                                  02S0120
*     END;                          /*                       @Y30LB50*/
         LA    @04,1                                            02S0121
         AH    @04,L(,DATPTR)                                   02S0121
@DE00113 STH   @04,L(,DATPTR)                                   02S0121
         CH    @04,LOOPEND(,DATPTR)                             02S0121
         BNH   @DL00113                                         02S0121
*     WORK1(3:8)=PATT2;             /* EDIT PATTERN FOR TOTAL COUNT
*                                                            @Y30LB50*/
         MVC   WORK1+2(6,DATPTR),PATT2                          02S0122
*     CVD(TSUM,HOLDDBL);            /* CONVERT TOTAL FOR BIT @Y30LB50*/
         L     @04,TSUM(,DATPTR)                                02S0123
         CVD   @04,HOLDDBL(,DATPTR)                             02S0123
*     ED(WORK1(3:8),HOLD1);         /*                       @Y30LB50*/
         ED    WORK1+2(6,DATPTR),HOLD1(DATPTR)                  02S0124
*     TCOUNT=WORK1(4:8);            /* MOVE 5 CHAR           @Y30LB55*/
         MVC   TCOUNT(5,OUTPTR),WORK1+3(DATPTR)                 02S0125
*     OUTPTR=OUTPTR+LENGTH(TOUTCNTS);/*                         02S0126
*                                      POINT PAST TOTAL      @Y30LB50*/
         AH    OUTPTR,@CH00107                                  02S0126
*     LOOPEND=MAXDRD;               /* PROCESS DRD COUNTS LAST  02S0127
*                                                            @Y30LB50*/
         MVC   LOOPEND(2,DATPTR),@CH00070                       02S0127
*     TSUM=0;                       /* CLEAR TOTAL           @Y30LB50*/
         SLR   @04,@04                                          02S0128
         ST    @04,TSUM(,DATPTR)                                02S0128
*   END;                            /*                       @Y30LB50*/
         LA    @04,1                                            02S0129
         AH    @04,M(,DATPTR)                                   02S0129
         STH   @04,M(,DATPTR)                                   02S0129
         CH    @04,@CH00122                                     02S0129
         BNH   @DL00112                                         02S0129
*       LINEPTR=LINEPTR+LENGTH(LINE1);/*                        02S0130
*                                      NEXT BIT DESCRIPTION  @Y30LB50*/
         AH    LINEPTR,@CH00226                                 02S0130
*       RFY                                                     02S0131
*         R1 RSTD;                  /*                       @Y30LB50*/
*       R1=ADDR(WORKCALL);          /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0132
*       CALL ISDAPRT0;              /* PRINT BIT LINE OF OUTPUT 02S0133
*                                                            @Y30LB50*/
         L     @15,@CV00159                                     02S0133
         BALR  @14,@15                                          02S0133
*       RFY                                                     02S0134
*         R1 UNRSTD;                /*                       @Y30LB50*/
*     END;                          /*                       @Y30LB50*/
         LA    @04,1                                            02S0135
         AH    @04,J(,DATPTR)                                   02S0135
         STH   @04,J(,DATPTR)                                   02S0135
         CH    @04,@CH00070                                     02S0135
         BNH   @DL00102                                         02S0135
*     OUTPUT=DATSUB3;               /* LINE TO SEPARATE OUTPUT FOR
*                                      ONE BYTE              @Y30LB50*/
         MVI   OUTPUT+123(OPTR),C' '                            02S0136
         MVC   OUTPUT+124(9,OPTR),OUTPUT+123(OPTR)              02S0136
         MVC   OUTPUT(123,OPTR),@CC00181                        02S0136
*     RFY                                                       02S0137
*       R1 RSTD;                    /*                       @Y30LB50*/
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0138
*     CALL ISDAPRT0;                /*                       @Y30LB50*/
         L     @15,@CV00159                                     02S0139
         BALR  @14,@15                                          02S0139
*     RFY                                                       02S0140
*       R1 UNRSTD;                  /*                       @Y30LB50*/
*   END;                            /*                       @Y30LB50*/
         LA    @04,1                                            02S0141
         AH    @04,K(,DATPTR)                                   02S0141
         STH   @04,K(,DATPTR)                                   02S0141
         CH    @04,@CH00154                                     02S0141
         BNH   @DL00094                                         02S0141
*     COREADDR=CSPTRS(I);           /* POINT TO BLOCK FOR RELEASING
*                                                            @Y30LB50*/
         LH    @04,I(,DATPTR)                                   02S0142
         SLA   @04,2                                            02S0142
         AL    @04,@CF00428                                     02S0142
         L     @04,CSPTRS(@04,DATPTR)                           02S0142
         ST    @04,COREADDR(,CVTPTR)                            02S0142
*     SPNO=DATSPNO;                 /* SUBPOOL NUMBER        @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           02S0143
*     CORELEN=LENGTH(DATACCM);      /* LENGTH TO RELEASE     @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00427+1                     02S0144
*     RFY                                                       02S0145
*       R1 RSTD;                    /*                       @Y30LB50*/
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0146
*     CALL ISDAFREE;                /* FREE ACCUMULATOR BLOCK   02S0147
*                                                            @Y30LB50*/
         L     @15,@CV00158                                     02S0147
         BALR  @14,@15                                          02S0147
*     RFY                                                       02S0148
*      (R1,                                                     02S0148
*       LINEPTR) UNRSTD;            /*                       @Y30LB50*/
*   END;                            /*                       @Y30LB50*/
*     ELSE                                                      01S0150
*       ;                           /*                       @Y30LB50*/
@RF00058 DS    0H                                               01S0151
*   END;                            /*                       @Y30LB50*/
         LA    @07,1                                            01S0151
         AH    @07,I(,DATPTR)                                   01S0151
         STH   @07,I(,DATPTR)                                   01S0151
         CH    @07,@CH00101                                     01S0151
         BNH   @DL00057                                         01S0151
*   RFY                                                         01S0152
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0153
*   CORELEN=LENGTH(DATWORK);        /* LENGTH OF WORKAREA    @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00241+1                     01S0154
*   SPNO=DATSPNO;                   /* SUBPOOL NUMBER OF WORKAREA
*                                                            @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           01S0155
*   COREADDR=DATPTR;                /* ADDRESS OF WORKAREA   @Y30LB50*/
         ST    DATPTR,COREADDR(,CVTPTR)                         01S0156
*   CALL ISDAFREE;                  /* FREE WORKAREA         @Y30LB50*/
         L     @15,@CV00158                                     01S0157
         BALR  @14,@15                                          01S0157
*   DAT00PTR=0;                     /* ZERO WORKAREA PTR     @Y30LB50*/
         SLR   @07,@07                                          01S0158
         ST    @07,DAT00PTR(,CVTPTR)                            01S0158
*   RFY                                                         01S0159
*     R1 UNRSTD;                    /*                       @Y30LB50*/
*   RETURN CODE(RETRNREG);          /*                       @Y30LB50*/
         L     @13,4(,@13)                                      01S0160
         L     @00,@SIZDATD                                     01S0160
         LR    @01,@11                                          01S0160
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@09                                          01S0160
         L     @14,12(,@13)                                     01S0160
         LM    @00,@12,20(@13)                                  01S0160
         BR    @14                                              01S0160
*   END ISDADAT1                    /*                       @Y30LB50*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ISDACVT )                                        *
*/*%INCLUDE SYSLIB  (ISDADAT5)                                        *
*/*%INCLUDE SYSUT5  (DAT1CNST)                                        *
*/*%INCLUDE SYSUT5  (DATTITLS)                                        *
*/*%INCLUDE SYSUT5  (DATFMTS )                                        *
*/*%INCLUDE SYSUT5  (DATRPPT )                                        *
*/*%INCLUDE SYSUT5  (DATCVRT )                                        *
*/*%INCLUDE SYSUT5  (DAT1CNT )                                        *
*;                                                              01S0161
@DATA    DS    0H
@CH00122 DC    H'2'
@CH00101 DC    H'4'
@CH00154 DC    H'5'
@CH00094 DC    H'6'
@CH00107 DC    H'7'
@CH00070 DC    H'8'
@CH00226 DC    H'27'
@CH00224 DC    H'37'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
ISDADAT1 CSECT
         DS    0F
@CF00241 DC    F'48'
@CF00427 DC    F'960'
@CF00428 DC    F'-4'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISDADAT1 CSECT
         NOPR  ((@ENDDATD-@DATD)/161*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00158 DC    V(ISDAFREE)
@CV00159 DC    V(ISDAPRT0)
         DS    0D
@CC00170 DC    C'1REPORT 11 - DRC AND DRD DATA HANDLING CHECK SUMMARY  C
                            MSF                      (DATA FROM MSS FORC
               MAT 4, SA FORMAT B)'
@CC00181 DC    C' ×-----------------------------------×-----×-----×----C
               -×-----×-----××-----×-----×-----×-----×-----×-----×-----C
               ×-----×-----×'
@CC00192 DC    C'×     ×     ×     ×     ×     ××     ×     ×     ×    C
                ×     ×     ×     ×     ×     ×'
@CC00199 DC    C'×  400×  401×  402×  403×TOTAL××  200×  201×  202×  20C
               3×  204×  205×  206×  207×TOTAL×'
@CC00206 DC    C'DRC SSID'
@CC00208 DC    C'DRD SSID'
@CC00424 DC    C'×BIT'
DATSPNO  DC    X'00'
PATCH    DS    CL50
         ORG   PATCH
@NM00001 DC    50X'00'
         ORG   PATCH+50
PATT2    DC    X'402020202120'
LINETITL DS    CL1265
         ORG   LINETITL
LINEA    DC    CL37' ×SA SENSE BYTE 0 - MSS BYTE 4       '
LINE2    DC    CL27'COMMAND REJECT             '
LINE3    DC    CL27'INTERVENTION REQUIRED      '
LINEB    DC    CL27'BUS OUT PARITY             '
LINE4    DC    CL27'EQUIPMENT CHECK            '
LINE6    DC    CL27'DATA CHECK                 '
LINE7    DC    CL27'OVERRUN (NOT USED)         '
LINE8    DC    CL27'NOT USED                   '
LINE9    DC    CL27'ENVIRONMENTAL DATA         '
LINE10   DC    CL37' ×SA SENSE BYTE 1 - MSS BYTE 5       '
LINE11   DC    CL27'CE MESSAGE                 '
LINE12   DC    CL27'MEDIA FAILURE              '
LINE13   DC    CL27'READ                       '
LINE14   DC    CL27'SENSE ID                   '
LINE15   DC    CL27'NOT USED                   '
LINE16   DC    CL27'ADT STATUS                 '
LINE17   DC    CL27'CTL-I ADT (TE 4)           '
LINE18   DC    CL27'BUFFERED LOG DATA          '
LINE19   DC    CL37' ×CHECK END STATUS - MSS BYTE 13     '
LINE20   DC    CL27'NOT USED                   '
LINE21   DC    CL27'DEMARK CHECK               '
LINE22   DC    CL27'ERASED STRIPE              '
LINE23   DC    CL27'DR DATA CHECK              '
LINE24   DC    CL27'DR OVERRUN                 '
LINE25   DC    CL27'DEVICE CHECK               '
LINE26   DC    CL27'STRIPE FORMAT CHECK        '
LINE27   DC    CL27'STRIPES AVAILABLE 0        '
LINE28   DC    CL37' ×DRC SENSE BYTE 1 - MSS BYTE 14     '
LINE29   DC    CL27'WRITE CRC                  '
LINE30   DC    CL27'CRC NOT 0                  '
LINE31   DC    CL27'UNCORRECTABLE DATA         '
LINE32   DC    CL27'AMP SENSOR CHECK           '
LINE33   DC    CL27'SYNDROME CHECK             '
LINE34   DC    CL27'MULTI SECTION CHECK        '
LINE35   DC    CL27'ERASE CHECK                '
LINE36   DC    CL27'WRITE STATUS               '
LINE37   DC    CL37' ×DRC SENSE BYTE 4 - MSS BYTE 15     '
LINE38   DC    CL27'ID COMPARE CHECK ID FIELD  '
LINE39   DC    CL27'ID COMPARE CHECK DATA FIELD'
LINE40   DC    CL27'ID FIELD MARK ERROR        '
LINE41   DC    CL27'READ ID INDEX CHECK        '
LINE42   DC    CL27'DATA FIELD MARK CHECK      '
LINE43   DC    CL27'NO DATA FOUND              '
LINE44   DC    CL27'DATA GATE CHECK            '
LINE45   DC    CL27'NO ID FOUND                '
         ORG   LINETITL+1265
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CVTPTR   EQU   @02
DATPTR   EQU   @10
CSPTR    EQU   @08
RETRNREG EQU   @09
R1       EQU   @01
OUTPTR   EQU   @05
OPTR     EQU   @06
LINEPTR  EQU   @07
R0       EQU   @00
R15      EQU   @15
ISDACVT  EQU   0
CVTPTRS0 EQU   ISDACVT
DAT00PTR EQU   CVTPTRS0+72
WORKCALL EQU   CVTPTRS0+96
GET0CALL EQU   ISDACVT+100
SPNOLEN  EQU   GET0CALL
SPNO     EQU   SPNOLEN
CORELEN  EQU   SPNOLEN+1
COREADDR EQU   GET0CALL+4
HEXPCALL EQU   ISDACVT+108
PRT0CALL EQU   ISDACVT+120
OUTLINE  EQU   PRT0CALL
SDADATD  EQU   ISDACVT+256
PRTDATD  EQU   ISDACVT+416
DATWORK  EQU   0
CSPTRS   EQU   DATWORK
TSUM     EQU   DATWORK+16
WORK1    EQU   DATWORK+20
WORK2    EQU   WORK1
I        EQU   DATWORK+28
J        EQU   DATWORK+30
K        EQU   DATWORK+32
L        EQU   DATWORK+34
M        EQU   DATWORK+36
LOOPEND  EQU   DATWORK+38
HOLDDBL  EQU   DATWORK+40
HOLD     EQU   HOLDDBL+4
HOLD1    EQU   HOLD+1
CSNUMB   EQU   HOLD1
DATACCM  EQU   0
BYTEBIT  EQU   DATACCM
BYTE0    EQU   DATACCM+24
OUTCNTS  EQU   0
OCOUNT   EQU   OUTCNTS
TOUTCNTS EQU   0
TCOUNT   EQU   TOUTCNTS
OUTPUT   EQU   0
CNTRL    EQU   OUTPUT
HEADING  EQU   OUTPUT+1
CSNO     EQU   HEADING+70
LINE0    EQU   0
LINE1    EQU   0
SSIDX    EQU   0
SSIDCS   EQU   SSIDX
WORKPTR  EQU   0
DIVLINES EQU   OUTPUT+37
BITDESC  EQU   OUTPUT+9
BITNUMB  EQU   OUTPUT+6
BITBEG   EQU   OUTPUT+1
SSID0    EQU   OUTPUT+41
SSID1    EQU   OUTPUT+72
SSIDHD1  EQU   OUTPUT+47
SSIDHD2  EQU   OUTPUT+90
CNTSECT  EQU   OUTPUT+38
*                                      START UNREFERENCED COMPONENTS
SSIDCSX  EQU   SSIDX+1
TEXT2    EQU   HEADING+71
TEXT     EQU   HEADING
TSLASH   EQU   TOUTCNTS+5
OSLASH   EQU   OUTCNTS+5
BYTE4    EQU   DATACCM+768
BYTE3    EQU   DATACCM+576
BYTE2    EQU   DATACCM+384
BYTE1    EQU   DATACCM+192
BITN     EQU   BYTE0+24
BIT0     EQU   BYTE0
BYTEBIT3 EQU   DATACCM+2
XXX      EQU   HOLD1+2
SSIDWORK EQU   CSNUMB
HOLD2    EQU   HOLD
HOLD0    EQU   HOLDDBL
WORK3    EQU   WORK1+1
RESTBITS EQU   WORK2
CURRBIT  EQU   WORK2
PRTSA001 EQU   PRTDATD
SDATEMPS EQU   SDADATD+136
SDASA002 EQU   SDADATD+76
SDAPC001 EQU   SDADATD+72
SDASA001 EQU   SDADATD
SDARPTID EQU   PRT0CALL+133
LINE     EQU   OUTLINE+1
ANSI     EQU   OUTLINE
DUMPIDNO EQU   HEXPCALL+8
DUMPLEN  EQU   HEXPCALL+4
DUMPADDR EQU   HEXPCALL
GEN00PTR EQU   CVTPTRS0+92
CNFG0PTR EQU   CVTPTRS0+88
PWR00PTR EQU   CVTPTRS0+84
APR00PTR EQU   CVTPTRS0+80
DRC00PTR EQU   CVTPTRS0+76
CSB00PTR EQU   CVTPTRS0+68
DCK00PTR EQU   CVTPTRS0+64
EQC00PTR EQU   CVTPTRS0+60
FSC00PTR EQU   CVTPTRS0+56
DHE00PTR EQU   CVTPTRS0+52
SUM00PTR EQU   CVTPTRS0+48
PAD00PTR EQU   CVTPTRS0+44
DCS00PTR EQU   CVTPTRS0+40
LOG00PTR EQU   CVTPTRS0+36
HIST0PTR EQU   CVTPTRS0+32
PRT00PTR EQU   CVTPTRS0+28
GET00PTR EQU   CVTPTRS0+24
TYPE0PTR EQU   CVTPTRS0+20
PARM0PTR EQU   CVTPTRS0+16
SDA00PTR EQU   CVTPTRS0+12
PARMPTR  EQU   CVTPTRS0+8
SDATAPTR EQU   CVTPTRS0+4
DATAPTR  EQU   CVTPTRS0
*                                      END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   ISDADAT1,(C'PLS2229',0603,75312)
