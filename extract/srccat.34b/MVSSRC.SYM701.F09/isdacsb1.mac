         TITLE 'CS BUFFERED LOG/FORCED SENSE DATA REPORT MODULE        *
                        '
ISDACSB1 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'ISDACSB1  77.354'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  LA    @12,4095(,@11)                                   01S0001
         USING @PSTART,@11                                      01S0001
         USING @PSTART+4095,@12                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         ISDAGSPC R,LV=(0)
         LR    @10,@01                                          01S0001
         USING @DATD,@10                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @10,8(,@13)                                      01S0001
         LR    @13,@10                                          01S0001
         MVC   @PC00001(4),0(@01)                               01S0001
*                                      ISOLATING USAGE COUNT @Y30LB50*/
*                                                               01S0078
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF ISDACSB1 DECLARES                              @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0079
*                                                               01S0079
*   /*****************************************************************/
*   /*                                                               */
*   /* START OF ISDACSB1 MAIN PROGRAM                        @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0079
*   CVTPTR=WORKPTR;                 /* SAVE POINTER TO SDACVT   01S0079
*                                                            @Y30LB50*/
         L     @15,@PC00001                                     01S0079
         L     CVTPTR,WORKPTR(,@15)                             01S0079
*   LPARMPTR=PARMPTR;               /* SET PTR TO SDA PARMS  @ZM30983*/
         L     @15,PARMPTR(,CVTPTR)                             01S0080
         ST    @15,LPARMPTR                                     01S0080
*   RETCODE=0;                      /* ZERO RETURN CODE      @Y30LB50*/
         SLR   RETCODE,RETCODE                                  01S0081
*   LWORKPTR=CSB00PTR;              /* SET PTR TO ISDACSB0 WORKAREA
*                                                            @Y30LB50*/
         L     LWORKPTR,CSB00PTR(,CVTPTR)                       01S0082
*   RFY                                                         01S0083
*     LINEPTR RSTD;                 /*                       @Y30LB50*/
*   LINEPTR=ADDR(OUTLINE);          /* SET POINTER TO OUTPUT LINE
*                                                            @Y30LB50*/
         LA    LINEPTR,OUTLINE(,CVTPTR)                         01S0084
*   IF CCSBCSF(8)=ON THEN           /* IF CSB REPORT IS REQUESTED
*                                                            @Y30LB50*/
         TM    CCSBCSF(@15),B'00000001'                         01S0085
         BNO   @RF00085                                         01S0085
*                                                               02S0086
*   /*****************************************************************/
*   /*                                                               */
*   /* USAGERPT FORMATS ACCUMULATED USAGE BUFFERED LOG DATA INTO     */
*   /* EITHER A DETAIL REPORT OR A SUMMARY REPORT-ONE PAGE PER       */
*   /* ACCESSOR PER CARTRIDGE STORE. IF THE DATA FOR ONE ACCESSOR    */
*   /* WILL NOT FIT ON ONE PAGE OF OUTPUT AND SUMMARY IS REQUESTED, A*/
*   /* SUMMARY REPORT WILL BE FORMATTED. OTHERWISE, A DETAIL REPORT  */
*   /* WILL BE FORMATTED.                                    @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0086
*   DO;                             /*                       @Y30LB50*/
*     BRETCODE=NOCSBDAT;            /* SET RETURN CODE FOR NO CSB
*                                      DATA ENCOUNTERED -IT WILL BE
*                                      RESET TO 0 IF DATA IS    02S0087
*                                      ENCOUNTERED           @Y30LB50*/
         MVC   BRETCODE(2,LWORKPTR),@CH00034                    02S0087
*     DO L=1 TO MAXCSS;             /* PROCESS ALL CS TABLES @Y30LB50*/
         LA    @06,1                                            02S0088
         STH   @06,L(,LWORKPTR)                                 02S0088
@DL00088 DS    0H                                               02S0089
*       CSPTR=CSTPTRS(L);           /* POINT TO CS TABLE     @Y30LB50*/
         LH    @06,L(,LWORKPTR)                                 02S0089
         SLA   @06,2                                            02S0089
         L     CSPTR,CSTPTRS-4(@06,LWORKPTR)                    02S0089
*       CNTINDX=LENGTH(CSBDATA)-LENGTH(CSB1CNTS);/*             02S0090
*                                            SET INDEX FOR FIRST ACC
*                                      COUNTS                @Y30LB50*/
         MVC   CNTINDX(2,LWORKPTR),@CH00090                     02S0090
*       IF BFRCNT^=0 THEN                                       02S0091
         ICM   @06,3,BFRCNT(CSPTR)                              02S0091
         BZ    @RF00091                                         02S0091
*         DO I=1 TO MAXACC;         /* PROCESS ACCESSORS     @Y30LB50*/
         LA    @06,1                                            02S0092
         STH   @06,I(,LWORKPTR)                                 02S0092
@DL00092 DS    0H                                               02S0093
*           NEXTCSB=CSBFIRST;       /* POINT TO FIRST RECORD @Y30LB50*/
         MVC   NEXTCSB(4,CSPTR),CSBFIRST(CSPTR)                 02S0093
*           ACCTOT=0;               /* ZERO ACCESSOR COUNT   @Y30LB50*/
         SLR   @06,@06                                          02S0094
         STH   @06,ACCTOT(,LWORKPTR)                            02S0094
*           DO WHILE NEXTCSB^=0;    /*                       @Y30LB50*/
         B     @DE00095                                         02S0095
@DL00095 DS    0H                                               02S0096
*             CNTPTR=NEXTCSB+CNTINDX;/* POINT TO ACCESSOR COUNTS IN
*                                      RECORD                @Y30LB50*/
         LH    CNTPTR,CNTINDX(,LWORKPTR)                        02S0096
         AL    CNTPTR,NEXTCSB(,CSPTR)                           02S0096
*             USAGECT=USAGECT&USAGMASK;/* CLEAR STATUS BITS  @Y30LB50*/
         NC    USAGECT(2,CNTPTR),USAGMASK                       02S0097
*             IF USAGECT^=0 THEN                                02S0098
         ICM   @06,3,USAGECT(CNTPTR)                            02S0098
         BZ    @RF00098                                         02S0098
*               ACCTOT=ACCTOT+1;    /* UP COUNT OF RECORDS FOR WHICH
*                                      ACCESSOR WAS USED     @Y30LB50*/
         LA    @06,1                                            02S0099
         AH    @06,ACCTOT(,LWORKPTR)                            02S0099
         STH   @06,ACCTOT(,LWORKPTR)                            02S0099
*             ELSE                                              02S0100
*               ;                   /*                       @Y30LB50*/
@RF00098 DS    0H                                               02S0101
*             NEXTCSB=CHAINPTR;     /* POINT TO NEXT RECORD SAVED BY
*                                      TIME                  @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              02S0101
         L     @06,CHAINPTR(,@06)                               02S0101
         ST    @06,NEXTCSB(,CSPTR)                              02S0101
*           END;                    /*                       @Y30LB50*/
@DE00095 SLR   @06,@06                                          02S0102
         C     @06,NEXTCSB(,CSPTR)                              02S0102
         BNE   @DL00095                                         02S0102
*           IF ACCTOT^=0 THEN                                   02S0103
         LH    @15,ACCTOT(,LWORKPTR)                            02S0103
         CR    @15,@06                                          02S0103
         BE    @RF00103                                         02S0103
*             DO;                   /* DO REPORT PROCESSING IF DATA
*                                      WAS FOUND FOR THE ACCESSOR
*                                                            @Y30LB50*/
*               BRETCODE=0;         /* SET RETURN CODE FOR DATA 02S0105
*                                      ENCOUNTERED           @Y30LB50*/
         STH   @06,BRETCODE(,LWORKPTR)                          02S0105
*               IF(ACCTOT^>BFRPAGE)×(CSUMMARY=NO) THEN/* DO DETAIL
*                                      PROCESSING IF DATA WILL FIT ON
*                                      ONE OUTPUT PAGE OR IF SUMMARY
*                                      IS NOT REQUESTED      @Y30LB50*/
         CH    @15,@CH00219                                     02S0106
         BNH   @RT00106                                         02S0106
         L     @06,LPARMPTR                                     02S0106
         CLI   CSUMMARY(@06),C'N'                               02S0106
         BNE   @RF00106                                         02S0106
@RT00106 DS    0H                                               02S0107
*   DO;                             /*                       @Y30LB50*/
*                                                               03S0107
*     /***************************************************************/
*     /*                                                             */
*     /* DETAIL IS USED TO FORMAT USAGE BUFFERED LOG DATA FOR ONE    */
*     /* ACCESSOR INTO A DETAIL REPORT                       @Y30LB50*/
*     /*                                                             */
*     /***************************************************************/
*                                                               03S0108
*     PAGECNT=BFRPAGE;              /* INSURE FIRST PAGE HEADING
*                                                            @Y30LB50*/
         MVC   PAGECNT(2,LWORKPTR),@CH00219                     03S0108
*     NEXTCSB=CSBFIRST;             /* POINTER TO FIRST RECORD SAVED
*                                      BY TIME               @Y30LB50*/
         MVC   NEXTCSB(4,CSPTR),CSBFIRST(CSPTR)                 03S0109
*     DO WHILE NEXTCSB^=0;          /* PROCESS ALL RECORDS SAVED
*                                                            @Y30LB50*/
         B     @DE00110                                         03S0110
@DL00110 DS    0H                                               03S0111
*       CNTPTR=NEXTCSB+CNTINDX;     /* POINT TO ACCESSOR COUNTS IN IN
*                                      RECORD                @Y30LB50*/
         LH    CNTPTR,CNTINDX(,LWORKPTR)                        03S0111
         AL    CNTPTR,NEXTCSB(,CSPTR)                           03S0111
*       IF USAGECT^=0 THEN                                      03S0112
         ICM   @06,3,USAGECT(CNTPTR)                            03S0112
         BZ    @RF00112                                         03S0112
*         DO;                       /* PROCESS ONLY IF ACC COUNT IS
*                                      NOT ZERO              @Y30LB50*/
*           IF PAGECNT=BFRPAGE THEN                             03S0114
         CLC   PAGECNT(2,LWORKPTR),@CH00219                     03S0114
         BNE   @RF00114                                         03S0114
*             DO;                   /* SKIP TO NEW PAGE IF CURRENT
*                                      PAGE IS FULL          @Y30LB50*/
*               OUTPUT=DETLHEAD;    /* DETAIL REPORT MAIN HEADING
*                                                            @Y30LB50*/
         MVI   OUTPUT+132(LINEPTR),C' '                         03S0116
         MVC   OUTPUT(132,LINEPTR),@CC00347                     03S0116
*               CSNUMBER=CSNUMB;    /* PUT CS NUMBER IN OUTPUT LINE
*                                                            @Y30LB50*/
         MVC   CSNUMBER(1,LINEPTR),CSNUMB(CSPTR)                03S0117
*               IF I=1 THEN                                     03S0118
         CLC   I(2,LWORKPTR),@CH00083                           03S0118
         BNE   @RF00118                                         03S0118
*                 ACCNO=ACC1;       /* PUT ACCESSOR IN OUTPUT   03S0119
*                                                            @Y30LB50*/
         MVC   ACCNO(5,LINEPTR),@CC00465                        03S0119
*               ELSE                                            03S0120
*                 ACCNO=ACC2;       /*                       @Y30LB50*/
         B     @RC00118                                         03S0120
@RF00118 MVC   ACCNO(5,LINEPTR),@CC00467                        03S0120
*               RFY                                             03S0121
*                 R1 RSTD;          /*                       @Y30LB50*/
@RC00118 DS    0H                                               03S0122
*               R1=ADDR(WORKCALL);  /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             03S0122
*               CALL ISDAPRT0;      /* PRINT MAIN HEADING    @Y30LB50*/
         L     @15,@CV00480                                     03S0123
         BALR  @14,@15                                          03S0123
*               OUTPUT=DETLSUB1;    /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00357                     03S0124
*               CALL ISDAPRT0;      /* PRINT FIRST SUBHEADING   03S0125
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     03S0125
         BALR  @14,@15                                          03S0125
*               OUTPUT=DETLSUB2;    /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00367                     03S0126
*               CALL ISDAPRT0;      /* PRINT SECOND SUBHEADING  03S0127
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     03S0127
         BALR  @14,@15                                          03S0127
*               RFY                                             03S0128
*                 R1 UNRSTD;        /*                       @Y30LB50*/
*               OUTPUT=' ';         /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           03S0129
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          03S0129
         MVI   OUTPUT(LINEPTR),C' '                             03S0129
*               PAGECNT=0;          /* ZERO RECORDS ON PAGE  @Y30LB50*/
         SLR   @06,@06                                          03S0130
         STH   @06,PAGECNT(,LWORKPTR)                           03S0130
*             END;                  /*                       @Y30LB50*/
*           ELSE                                                03S0132
*             ;                     /*                       @Y30LB50*/
@RF00114 DS    0H                                               03S0133
*           CNTRL='0';              /* CARRIAGE CONTROL TO SKIP ONE
*                                      LINE AND PRINT        @Y30LB50*/
         MVI   CNTRL(LINEPTR),C'0'                              03S0133
*           OUTPTR=ADDR(HEADING);   /* POINTER FOR TIME FIELD IN
*                                      OUTPUT LINE           @Y30LB50*/
         LA    OUTPTR,HEADING(,LINEPTR)                         03S0134
*           CALL TIMECVRT;          /* CONVERT TIME FOR PRINTING
*                                                            @Y30LB50*/
         BAL   @14,TIMECVRT                                     03S0135
*           OUTPTR=OUTPTR+LENGTH(TIMEFLD);/*                    03S0136
*                                      UP POINTER FOR COUNT FIELDS
*                                                            @Y30LB50*/
         AH    OUTPTR,@CH00244                                  03S0136
*           CALL BFRFMT;            /* CONVERT COUNTS FOR DETAIL
*                                      REPORT                @Y30LB50*/
         BAL   @14,BFRFMT                                       03S0137
*           PAGECNT=PAGECNT+1;      /* UP RECORDS ON PAGE    @Y30LB50*/
         LA    @06,1                                            03S0138
         AH    @06,PAGECNT(,LWORKPTR)                           03S0138
         STH   @06,PAGECNT(,LWORKPTR)                           03S0138
*         END;                      /*                       @Y30LB50*/
*       ELSE                                                    03S0140
*         ;                         /*                       @Y30LB50*/
@RF00112 DS    0H                                               03S0141
*       NEXTCSB=CHAINPTR;           /* POINT TO NEXT RECORD SAVED
*                                                            @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              03S0141
         L     @06,CHAINPTR(,@06)                               03S0141
         ST    @06,NEXTCSB(,CSPTR)                              03S0141
*     END;                          /*                       @Y30LB50*/
@DE00110 ICM   @06,15,NEXTCSB(CSPTR)                            03S0142
         BNZ   @DL00110                                         03S0142
*   END;                            /*                       @Y30LB50*/
*               ELSE                /* DO SUMMARY PROCESSING IF DATA
*                                      WILL NOT FIT ON ONE PAGE AND
*                                      SUMMARY IS REQUESTED. @Y30LB50*/
*                                                               03S0144
*   /*****************************************************************/
*   /*                                                               */
*   /* SUMMRY IS USED TO FORMAT AND PRINT A SUMMARY USAGE BUFFERED   */
*   /* LOG REPORT WHEN THE BUFFERED LOG DATA COLLECTED FOR ONE       */
*   /* ACCESSOR FOR ONE CARTRIDGE STORE WILL NOT FIT ON ONE PAGE OF  */
*   /* OF OUTPUT AND SUMMARY OPTION IS REQUESTED. THE SUMMARY GROUP  */
*   /* WILL CONTAIN N RECORDS WHERE N IS THE TOTAL NUMBER OF RECORDS */
*   /* CONTAINING DATA FOR THE ACCESSOR DIVIDED BY THE NUMBER OF     */
*   /* RECORDS THAT WILL FIT ON ONE PAGE OF OUTPUT. ANY REMAINDER    */
*   /* RECORDS WILL BE SPREAD OUT, ONE PER GROUP.            @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0144
*   DO;                             /*                       @Y30LB50*/
         B     @RC00106                                         03S0144
@RF00106 DS    0H                                               03S0145
*     GROUPS=ACCTOT/BFRPAGE;        /* CALCULATE COUNT OF RECORDS TO
*                                      BE SUMMARIZED TOGETHER   03S0145
*                                                            @Y30LB50*/
         LA    @06,26                                           03S0145
         LH    @15,ACCTOT(,LWORKPTR)                            03S0145
         LR    @00,@15                                          03S0145
         SRDA  @00,32                                           03S0145
         DR    @00,@06                                          03S0145
         STH   @01,GROUPS(,LWORKPTR)                            03S0145
*     REMNDR=ACCTOT//BFRPAGE;       /* CALCULATE REMAINING RECORDS TO
*                                      BE SPREAD OUT OVER FIRST 03S0146
*                                      GROUPS                @Y30LB50*/
         LR    @00,@15                                          03S0146
         SRDA  @00,32                                           03S0146
         DR    @00,@06                                          03S0146
         STH   @00,REMNDR(,LWORKPTR)                            03S0146
*     NEXTCSB=CSBFIRST;             /* POINT TO FIRST BUFFERED LOG
*                                      RECORD SAVED BY TIME  @Y30LB50*/
         MVC   NEXTCSB(4,CSPTR),CSBFIRST(CSPTR)                 03S0147
*                                                               04S0148
*   /*****************************************************************/
*   /*                                                               */
*   /* SUMPAGE IS USED TO DO NEW PAGE PROCESSING FOR THE SUMMARY     */
*   /* BUFFERED LOG REPORT. EACH ACCESSOR FOR EACH CARTRIDGE STORE   */
*   /* WILL BE ON A NEW PAGE WITH APPROPRIATE HEADINGS.      @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0148
*   OUTPUT=SUMRHEAD;                /* MOVE MAIN HEADING TO OUTPUT
*                                      LINE                  @Y30LB50*/
         MVI   OUTPUT+132(LINEPTR),C' '                         04S0148
         MVC   OUTPUT(132,LINEPTR),@CC00377                     04S0148
*   CSNUMBER=CSNUMB;                /* ADD CS ID TO HEADING  @Y30LB50*/
         MVC   CSNUMBER(1,LINEPTR),CSNUMB(CSPTR)                04S0149
*   IF I=1 THEN                                                 04S0150
         CLC   I(2,LWORKPTR),@CH00083                           04S0150
         BNE   @RF00150                                         04S0150
*     ACCNO=ACC1;                   /* ADD ACCESSOR TO OUTPUT LINE
*                                                            @Y30LB50*/
         MVC   ACCNO(5,LINEPTR),@CC00465                        04S0151
*   ELSE                                                        04S0152
*     ACCNO=ACC2;                   /*                       @Y30LB50*/
         B     @RC00150                                         04S0152
@RF00150 MVC   ACCNO(5,LINEPTR),@CC00467                        04S0152
*   CVD(ACCTOT,HOLDDBL);            /* CONVERT TOTAL COUNT OF RECORDS
*                                      AND PUT IN OUTPUT LINE   04S0153
*                                                            @Y30LB50*/
@RC00150 LH    @06,ACCTOT(,LWORKPTR)                            04S0153
         CVD   @06,HOLDDBL(,LWORKPTR)                           04S0153
*   WORK6=PATT1;                    /* EDIT PATTERN FOR COUNT   04S0154
*                                                            @Y30LB50*/
         MVC   WORK6(6),PATT1                                   04S0154
*   ED(WORK6,HOLD);                 /* CONVERT COUNT TO EBCDIC AND
*                                      SUPPRESS LEADING ZEROS   04S0155
*                                                            @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          04S0155
*   RECDCNT=WORK6(2:6);             /* MOVE 5 CHAR           @Y30LB55*/
         MVC   RECDCNT(5,LINEPTR),WORK6+1                       04S0156
*   RFY                                                         04S0157
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             04S0158
*   CALL ISDAPRT0;                  /* PRINT MAIN HEADING    @Y30LB50*/
         L     @15,@CV00480                                     04S0159
         BALR  @14,@15                                          04S0159
*   OUTPUT=SUMRHD1;                 /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00387                     04S0160
*   CALL ISDAPRT0;                  /* PRINT FIRST SUBHEADING   04S0161
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     04S0161
         BALR  @14,@15                                          04S0161
*   OUTPUT=SUMRHD2;                 /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00397                     04S0162
*   CALL ISDAPRT0;                  /* PRINT SECOND SUBHEADING  04S0163
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     04S0163
         BALR  @14,@15                                          04S0163
*   OUTPUT=SUMRHD3;                 /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00407                     04S0164
*   CALL ISDAPRT0;                  /* PRINT THIRD SUBHEADING   04S0165
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     04S0165
         BALR  @14,@15                                          04S0165
*   OUTPUT=' ';                     /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           04S0166
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          04S0166
         MVI   OUTPUT(LINEPTR),C' '                             04S0166
*   RFY                                                         04S0167
*     R1 UNRSTD;                    /*                       @Y30LB50*/
*     DO M=1 TO BFRPAGE;            /* PROCESS ALL RECORDS SAVED
*                                                            @Y30LB50*/
         LA    @06,1                                            03S0168
         STH   @06,M(,LWORKPTR)                                 03S0168
@DL00168 DS    0H                                               03S0169
*       CNTRL='0';                  /* SET CARRIAGE CONTROL TO SKIP
*                                      ONE LINE AND PRINT    @Y30LB50*/
         MVI   CNTRL(LINEPTR),C'0'                              03S0169
*       CNTPTR=NEXTCSB+CNTINDX;     /* POINT TO ACCESSOR COUNTS 03S0170
*                                                            @Y30LB50*/
         LH    CNTPTR,CNTINDX(,LWORKPTR)                        03S0170
         AL    CNTPTR,NEXTCSB(,CSPTR)                           03S0170
*       DO WHILE USAGECT=0;         /* SPACE UP TO A RECORD WITH DATA
*                                      FOR ACCESSOR          @Y30LB50*/
         B     @DE00171                                         03S0171
@DL00171 DS    0H                                               03S0172
*         NEXTCSB=CHAINPTR;         /* NEXT RECORD BY TIME   @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              03S0172
         L     @06,CHAINPTR(,@06)                               03S0172
         ST    @06,NEXTCSB(,CSPTR)                              03S0172
*         CNTPTR=NEXTCSB+CNTINDX;   /* NEXT RECORD ACC COUNTS   03S0173
*                                                            @Y30LB50*/
         AH    @06,CNTINDX(,LWORKPTR)                           03S0173
         LR    CNTPTR,@06                                       03S0173
*       END;                        /*                       @Y30LB50*/
@DE00171 ICM   @06,3,USAGECT(CNTPTR)                            03S0174
         BZ    @DL00171                                         03S0174
*       OUTPTR=ADDR(HEADING);       /* POINT TO POSITION FOR TIME IN
*                                      OUTPUT LINE           @Y30LB50*/
         LA    OUTPTR,HEADING(,LINEPTR)                         03S0175
*       CALL TIMECVRT;              /* CONVERT TIME OF FIRST RECORD
*                                      IN SUMMARY GROUP AND PUT IN
*                                      OUTPUT LINE           @Y30LB50*/
         BAL   @14,TIMECVRT                                     03S0176
*       GINDEX=GROUPS;              /* LOOP COUNT FOR SUMMARIZING
*                                                            @Y30LB50*/
         LH    @06,GROUPS(,LWORKPTR)                            03S0177
         STH   @06,GINDEX(,LWORKPTR)                            03S0177
*       IF REMNDR^=0 THEN                                       03S0178
         LH    @15,REMNDR(,LWORKPTR)                            03S0178
         LTR   @15,@15                                          03S0178
         BZ    @RF00178                                         03S0178
*         DO;                       /* CHECK IF AN EXTRA RECORDS
*                                      SHOULD BE ADDED TO THIS GROUP
*                                                            @Y30LB50*/
*           GINDEX=GINDEX+1;        /* ADD ONE TO LOOP COUNT @Y30LB50*/
         AH    @06,@CH00083                                     03S0180
         STH   @06,GINDEX(,LWORKPTR)                            03S0180
*           REMNDR=REMNDR-1;        /* DECREMENT COUNT OF EXTRA 03S0181
*                                      RECORDS               @Y30LB50*/
         BCTR  @15,0                                            03S0181
         STH   @15,REMNDR(,LWORKPTR)                            03S0181
*         END;                      /*                       @Y30LB50*/
*       ELSE                                                    03S0183
*         ;                         /*                       @Y30LB50*/
@RF00178 DS    0H                                               03S0184
*       DO J=1 TO GINDEX;           /* PROCESS ALL RECORDS OF GROUP
*                                                            @Y30LB50*/
         LA    @06,1                                            03S0184
         B     @DE00184                                         03S0184
@DL00184 DS    0H                                               03S0185
*                                                               04S0185
*   /*****************************************************************/
*   /*                                                               */
*   /* SUMCNT IS USED TO CALCULATE THE TOTALS FOR THE ERRORS IN THE  */
*   /* BUFFERED LOG RECORDS TO BE SUMMARIZED TOGETHER.       @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0185
*   IF J^=1 THEN                                                04S0185
         CLC   J(2,LWORKPTR),@CH00083                           04S0185
         BE    @RF00185                                         04S0185
*     DO;                           /* AFTER THE FIRST RECORD OF THE
*                                      GROUP, POINT TO THE NEXT 04S0186
*                                      RECORD BY TIME        @Y30LB50*/
*       NEXTCSB=CHAINPTR;           /*                       @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              04S0187
         L     @06,CHAINPTR(,@06)                               04S0187
         ST    @06,NEXTCSB(,CSPTR)                              04S0187
*       CNTPTR=NEXTCSB+CNTINDX;     /* POINT TO THE ACCESSOR COUNTS
*                                                            @Y30LB50*/
         AH    @06,CNTINDX(,LWORKPTR)                           04S0188
         LR    CNTPTR,@06                                       04S0188
*       DO WHILE USAGECT=0;         /*                       @Y30LB50*/
         B     @DE00189                                         04S0189
@DL00189 DS    0H                                               04S0190
*         NEXTCSB=CHAINPTR;         /* SPACE UP TO NEXT RECORD WITH
*                                      DATA                  @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              04S0190
         L     @06,CHAINPTR(,@06)                               04S0190
         ST    @06,NEXTCSB(,CSPTR)                              04S0190
*         CNTPTR=NEXTCSB+CNTINDX;   /*                       @Y30LB50*/
         AH    @06,CNTINDX(,LWORKPTR)                           04S0191
         LR    CNTPTR,@06                                       04S0191
*       END;                        /*                       @Y30LB50*/
@DE00189 ICM   @06,3,USAGECT(CNTPTR)                            04S0192
         BZ    @DL00189                                         04S0192
*     END;                          /*                       @Y30LB50*/
*   ELSE                                                        04S0194
*     ;                             /*                       @Y30LB50*/
@RF00185 DS    0H                                               04S0195
*   SUMU=SUMU+USAGECT;              /* ADD USAGE COUNT TO RUNNING
*                                      TOTAL                 @Y30LB50*/
         SLR   @06,@06                                          04S0195
         ICM   @06,3,USAGECT(CNTPTR)                            04S0195
         AL    @06,SUMU(,LWORKPTR)                              04S0195
         ST    @06,SUMU(,LWORKPTR)                              04S0195
*   CWORK(1)=XYCOUNT;               /* ISOLATE THE Y STRIP COUNT
*                                                            @Y30LB50*/
         MVC   CWORK(1,LWORKPTR),XYCOUNT(CNTPTR)                04S0196
*   CWORK(1)=CWORK(1)&YMASK;        /*                       @Y30LB50*/
         NC    CWORK(1,LWORKPTR),YMASK                          04S0197
*   CWORK(2)=YCOUNT;                /*                       @Y30LB50*/
         MVC   CWORK+1(1,LWORKPTR),YCOUNT(CNTPTR)               04S0198
*   SUMY=SUMY+CWORK;                /* ADD Y STRIP COUNT TO RUNNING
*                                      TOTAL                 @Y30LB50*/
         SLR   @06,@06                                          04S0199
         ICM   @06,3,CWORK(LWORKPTR)                            04S0199
         AL    @06,SUMY(,LWORKPTR)                              04S0199
         ST    @06,SUMY(,LWORKPTR)                              04S0199
*   SRL(XYCOUNT,4);                 /* ISOLATE THE X STRIP COUNT
*                                                            @Y30LB50*/
         SLR   @06,@06                                          04S0200
         IC    @06,XYCOUNT(,CNTPTR)                             04S0200
         SRL   @06,4                                            04S0200
         STC   @06,XYCOUNT(,CNTPTR)                             04S0200
*   SUMX=SUMX+XKOUNT;               /* ADD X STRIP COUNT TO RUNNING
*                                      TOTAL                 @Y30LB50*/
         SLR   @06,@06                                          04S0201
         ICM   @06,3,XKOUNT(CNTPTR)                             04S0201
         AL    @06,SUMX(,LWORKPTR)                              04S0201
         ST    @06,SUMX(,LWORKPTR)                              04S0201
*   DO K=1 TO MAXCNTS BY MAXBYTE;   /* PROCESS COUNT BYTES   @Y30LB50*/
         LA    @06,1                                            04S0202
         STH   @06,K(,LWORKPTR)                                 04S0202
@DL00202 DS    0H                                               04S0203
*     CWORK(1)=COUNT12;             /* ISOLATE FIRST FOUR BIT COUNT
*                                                            @Y30LB50*/
         MVC   CWORK(1,LWORKPTR),COUNT12(CNTPTR)                04S0203
*     SRL(CWORK(1),4);              /*                       @Y30LB50*/
         SLR   @06,@06                                          04S0204
         IC    @06,CWORK(,LWORKPTR)                             04S0204
         SRL   @06,4                                            04S0204
         STC   @06,CWORK(,LWORKPTR)                             04S0204
*     SUMS(K)=SUMS(K)+CWORK(1);     /* ADD TO RUNNING TOTAL  @Y30LB50*/
         LH    @06,K(,LWORKPTR)                                 04S0205
         ALR   @06,@06                                          04S0205
         SLR   @15,@15                                          04S0205
         IC    @15,CWORK(,LWORKPTR)                             04S0205
         AH    @15,SUMS-2(@06,LWORKPTR)                         04S0205
         STH   @15,SUMS-2(@06,LWORKPTR)                         04S0205
*     COUNT12=COUNT12&'0F'X;        /* ISOLATE SECOND FOUR BIT COUNT
*                                                            @Y30LB50*/
         NI    COUNT12(CNTPTR),X'0F'                            04S0206
*     SUMS(K+1)=SUMS(K+1)+COUNT12;  /* ADD TO RUNNING TOTAL  @Y30LB50*/
         SLR   @15,@15                                          04S0207
         IC    @15,COUNT12(,CNTPTR)                             04S0207
         AH    @15,SUMS(@06,LWORKPTR)                           04S0207
         STH   @15,SUMS(@06,LWORKPTR)                           04S0207
*     CNTPTR=CNTPTR+1;              /* POINT TO NEXT BYTE OF COUNTS
*                                                            @Y30LB50*/
         AH    CNTPTR,@CH00083                                  04S0208
*   END;                            /*                       @Y30LB50*/
         LA    @06,2                                            04S0209
         AH    @06,K(,LWORKPTR)                                 04S0209
         STH   @06,K(,LWORKPTR)                                 04S0209
         CH    @06,@CH00034                                     04S0209
         BNH   @DL00202                                         04S0209
*       END;                        /*                       @Y30LB50*/
         LA    @06,1                                            03S0210
         AH    @06,J(,LWORKPTR)                                 03S0210
@DE00184 STH   @06,J(,LWORKPTR)                                 03S0210
         CH    @06,GINDEX(,LWORKPTR)                            03S0210
         BNH   @DL00184                                         03S0210
*       ODASH='-';                  /* SEPARATE FIRST AND LAST TIMES
*                                      OF GROUP              @Y30LB50*/
         MVI   ODASH(OUTPTR),C'-'                               03S0211
*       OUTPTR=OUTPTR+LENGTH(TIMEFLD);/*                        03S0212
*                                      SPACE UP IN OUTPUT LINE FOR
*                                      LAST TIME             @Y30LB50*/
         AH    OUTPTR,@CH00244                                  03S0212
*       CALL TIMECVRT;              /* CONVERT TIME OF LAST RECORD OF
*                                      GROUP                 @Y30LB50*/
         BAL   @14,TIMECVRT                                     03S0213
*       OUTPTR=OUTPTR+LENGTH(TIMEFLD)-1;/*                      03S0214
*                                      SPACE UP IN OUTPUT LINE FOR
*                                      COUNTS                @Y30LB50*/
         SH    OUTPTR,@CH00511                                  03S0214
*                                                               04S0215
*   /*****************************************************************/
*   /*                                                               */
*   /* SUMSOUT IS USED TO CONVERT SUMMARY COUNT TOTALS FOR USAGE     */
*   /* BUFFERED LOG RECORDS AND PRINT THE OUTPUT LINE FOR THE SUMMARY*/
*   /* GROUP. IT WILL THEN CLEAR THE OUTPUT LINE AND THE TOTALS.     */
*   /*                                                       @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0215
*   WORK6=PATT1;                    /* EDIT PATTERN          @Y30LB50*/
         MVC   WORK6(6),PATT1                                   04S0215
*   CVD(SUMU,HOLDDBL);              /* CONVERT THE USAGE TOTAL  04S0216
*                                                            @Y30LB50*/
         L     @06,SUMU(,LWORKPTR)                              04S0216
         CVD   @06,HOLDDBL(,LWORKPTR)                           04S0216
*   ED(WORK6,HOLD);                 /*                       @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          04S0217
*   SUSAGE=WORK6(2:6);              /* MOVE 5 CHAR           @Y30LB55*/
         MVC   SUSAGE(5,OUTPTR),WORK6+1                         04S0218
*   WORK6=PATT1;                    /* EDIT PATTERN          @Y30LB50*/
         MVC   WORK6(6),PATT1                                   04S0219
*   CVD(SUMX,HOLDDBL);              /* CONVERT THE X-STRIP ERRORS
*                                      TOTAL COUNT           @Y30LB50*/
         L     @06,SUMX(,LWORKPTR)                              04S0220
         CVD   @06,HOLDDBL(,LWORKPTR)                           04S0220
*   ED(WORK6,HOLD);                 /*                       @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          04S0221
*   SX=WORK6(2:6);                  /* MOVE 5 CHAR           @Y30LB55*/
         MVC   SX(5,OUTPTR),WORK6+1                             04S0222
*   WORK6=PATT1;                    /* EDIT PATTERN          @Y30LB50*/
         MVC   WORK6(6),PATT1                                   04S0223
*   CVD(SUMY,HOLDDBL);              /* CONVERT THE Y STRIP ERRORS
*                                      TOTAL COUNT           @Y30LB50*/
         L     @06,SUMY(,LWORKPTR)                              04S0224
         CVD   @06,HOLDDBL(,LWORKPTR)                           04S0224
*   ED(WORK6,HOLD);                 /*                       @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          04S0225
*   SY=WORK6(2:6);                  /* MOVE 5 CHAR           @Y30LB55*/
         MVC   SY(5,OUTPTR),WORK6+1                             04S0226
*   OUTPTR=ADDR(SCNTS);             /* SPACE UP IN OUTPUT LINE FOR
*                                      REST OF COUNTS        @Y30LB50*/
         LA    @06,SCNTS(,OUTPTR)                               04S0227
         LR    OUTPTR,@06                                       04S0227
*   DO K=1 TO MAXCNTS;              /* CONVERT EACH TOTAL,ADD TO
*                                      OUTPUT                @Y30LB50*/
         LA    @06,1                                            04S0228
         STH   @06,K(,LWORKPTR)                                 04S0228
@DL00228 DS    0H                                               04S0229
*     CVD(SUMS(K),HOLDDBL);         /*                       @Y30LB50*/
         LH    @06,K(,LWORKPTR)                                 04S0229
         ALR   @06,@06                                          04S0229
         LH    @15,SUMS-2(@06,LWORKPTR)                         04S0229
         CVD   @15,HOLDDBL(,LWORKPTR)                           04S0229
*     WORK6=PATT1;                  /* EDIT PATTERN          @Y30LB50*/
         MVC   WORK6(6),PATT1                                   04S0230
*     ED(WORK6,HOLD);               /* CONVERT COUNT AND PUT IN 04S0231
*                                      OUTPUT                @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          04S0231
*     SCNT=WORK6(2:6);              /* MOVE 5 CHAR           @Y30LB55*/
         MVC   SCNT(5,OUTPTR),WORK6+1                           04S0232
*     OUTPTR=OUTPTR+SUMSPC(K);      /* SPACE UP IN OUTPUT LINE FOR
*                                      NEXT COUNT            @Y30LB50*/
         AH    OUTPTR,SUMSPC-2(@06)                             04S0233
*   END;                            /*                       @Y30LB50*/
         LA    @06,1                                            04S0234
         AH    @06,K(,LWORKPTR)                                 04S0234
         STH   @06,K(,LWORKPTR)                                 04S0234
         CH    @06,@CH00034                                     04S0234
         BNH   @DL00228                                         04S0234
*   RFY                                                         04S0235
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             04S0236
*   CALL ISDAPRT0;                  /* PRINT SUMMARY LINE    @Y30LB50*/
         L     @15,@CV00480                                     04S0237
         BALR  @14,@15                                          04S0237
*   RFY                                                         04S0238
*     R1 UNRSTD;                    /*                       @Y30LB50*/
*   OUTPUT=' ';                     /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           04S0239
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          04S0239
         MVI   OUTPUT(LINEPTR),C' '                             04S0239
*   SUMU=0;                         /* ZERO THE USAGE TOTAL  @Y30LB50*/
         SLR   @06,@06                                          04S0240
         ST    @06,SUMU(,LWORKPTR)                              04S0240
*   SUMX=0;                         /* ZERO THE X STRIP ERROR TOTAL
*                                                            @Y30LB50*/
         ST    @06,SUMX(,LWORKPTR)                              04S0241
*   SUMY=0;                         /* ZERO THE Y STRIP ERROR TOTAL
*                                                            @Y30LB50*/
         ST    @06,SUMY(,LWORKPTR)                              04S0242
*   DO K=1 TO MAXCNTS;              /* ZERO THE OTHER TOTALS @Y30LB50*/
         LA    @06,1                                            04S0243
         STH   @06,K(,LWORKPTR)                                 04S0243
@DL00243 DS    0H                                               04S0244
*     SUMS(K)=0;                    /*                       @Y30LB50*/
         LH    @06,K(,LWORKPTR)                                 04S0244
         ALR   @06,@06                                          04S0244
         SLR   @15,@15                                          04S0244
         STH   @15,SUMS-2(@06,LWORKPTR)                         04S0244
*   END;                            /*                       @Y30LB50*/
         LA    @06,1                                            04S0245
         AH    @06,K(,LWORKPTR)                                 04S0245
         STH   @06,K(,LWORKPTR)                                 04S0245
         CH    @06,@CH00034                                     04S0245
         BNH   @DL00243                                         04S0245
*       NEXTCSB=CHAINPTR;           /* POINT TO FIRST RECORD IN NEXT
*                                      GROUP                 @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              03S0246
         L     @06,CHAINPTR(,@06)                               03S0246
         ST    @06,NEXTCSB(,CSPTR)                              03S0246
*     END;                          /*                       @Y30LB50*/
         LA    @06,1                                            03S0247
         AH    @06,M(,LWORKPTR)                                 03S0247
         STH   @06,M(,LWORKPTR)                                 03S0247
         CH    @06,@CH00219                                     03S0247
         BNH   @DL00168                                         03S0247
*   END;                            /*                       @Y30LB50*/
*             END;                  /*                       @Y30LB50*/
*           ELSE                                                02S0250
*             ;                     /*                       @Y30LB50*/
@RF00103 DS    0H                                               02S0251
*           CNTINDX=CNTINDX+LENGTH(FMT3CNTS);/*                 02S0251
*                                       UP INDEX FOR NEXT ACCESSOR'S
*                                      COUNTS                @Y30LB50*/
@RC00103 LA    @06,11                                           02S0251
         AH    @06,CNTINDX(,LWORKPTR)                           02S0251
         STH   @06,CNTINDX(,LWORKPTR)                           02S0251
*         END;                      /*                       @Y30LB50*/
         LA    @06,1                                            02S0252
         AH    @06,I(,LWORKPTR)                                 02S0252
         STH   @06,I(,LWORKPTR)                                 02S0252
         CH    @06,@CH00102                                     02S0252
         BNH   @DL00092                                         02S0252
*       ELSE                                                    02S0253
*         ;                         /*                       @Y30LB50*/
@RF00091 DS    0H                                               02S0254
*     END;                          /*                       @Y30LB50*/
         LA    @06,1                                            02S0254
         AH    @06,L(,LWORKPTR)                                 02S0254
         STH   @06,L(,LWORKPTR)                                 02S0254
         CH    @06,@CH00106                                     02S0254
         BNH   @DL00088                                         02S0254
*   END;                            /*                       @Y30LB50*/
*   ELSE                                                        01S0256
*     ;                             /*                       @Y30LB50*/
@RF00085 DS    0H                                               01S0257
*   IF CCSBCSF(7)=ON THEN           /* IF CSF REPORT IS REQUESTED
*                                      FORMAT AN ERROR BUFFERED LOG -
*                                      FORCED SENSE DATA REPORT 01S0257
*                                                            @Y30LB50*/
         L     @06,LPARMPTR                                     01S0257
         TM    CCSBCSF(@06),B'00000010'                         01S0257
         BNO   @RF00257                                         01S0257
*                                                               02S0258
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRORRPT IS USED TO FORMAT AND PRINT THE ERROR BUFFERED LOG   */
*   /* FORCED SENSE REPORT, WITH AS MANY PAGES AS NECESSARY TO PRINT */
*   /* ALL THE DATA ACCUMULATED. RETURN CODE WILL BE 12 IF NO DATA IS*/
*   /* FOUND FOR ANY CARTRIDGE STORE.                        @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0258
*   DO;                             /*                       @Y30LB50*/
*     FRETCODE=NOCSFDAT;            /* SET RETURN CODE TO NO CSF DATA
*                                      ACCUMULATED - WILL BE RESET IF
*                                      DATA IS ENCOUNTERED   @Y30LB50*/
         MVC   FRETCODE(2,LWORKPTR),@CH00244                    02S0259
*     DO I=1 TO MAXCSS;             /* PROCESS ALL CS TABLES @Y30LB50*/
         LA    @06,1                                            02S0260
         STH   @06,I(,LWORKPTR)                                 02S0260
@DL00260 DS    0H                                               02S0261
*       CSPTR=CSTPTRS(I);           /* POINT TO CS TABLE     @Y30LB50*/
         LH    @06,I(,LWORKPTR)                                 02S0261
         SLA   @06,2                                            02S0261
         L     CSPTR,CSTPTRS-4(@06,LWORKPTR)                    02S0261
*       IF FBFRCNT^=0 THEN                                      02S0262
         SLR   @06,@06                                          02S0262
         CH    @06,FBFRCNT(,CSPTR)                              02S0262
         BE    @RF00262                                         02S0262
*         DO;                       /* PROCESS ONLY IF CSF DATA 02S0263
*                                      ACCUMULATED           @Y30LB50*/
*           SDARPTID=CSFID;         /* MOVE CSF REPORT ID    @ZM30730*/
         MVC   SDARPTID(3,CVTPTR),@CC00340                      02S0264
*           PAGECNT=ERRPAGE;        /* FORCE NEW PAGE PROCESSING FOR
*                                      NEW CARTRIDGE STORE   @Y30LB50*/
         MVC   PAGECNT(2,LWORKPTR),@CH00298                     02S0265
*           NEXTCSF=CSFFIRST;       /* POINT TO FIRST CSF RECORD
*                                      SAVED                 @Y30LB50*/
         MVC   NEXTCSF(4,CSPTR),CSFFIRST(CSPTR)                 02S0266
*           FRCDLOGS=0;             /* SET NO FORCED SENSE EXPECTED
*                                                            @Y30LB50*/
         STH   @06,FRCDLOGS(,CSPTR)                             02S0267
*           DO WHILE NEXTCSF^=0;    /* PROCESS ALL CSF RECORDS SAVED
*                                                            @Y30LB50*/
         B     @DE00268                                         02S0268
@DL00268 DS    0H                                               02S0269
*             IF CSFBFRBT=ON THEN   /* PROCESS ERROR BUFFERED LOG
*                                      DATA                  @Y30LB50*/
         L     @06,NEXTCSF(,CSPTR)                              02S0269
         TM    CSFBFRBT(@06),B'00000001'                        02S0269
         BNO   @RF00269                                         02S0269
*                                                               03S0270
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRBFRD IS USED TO PROCESS AN ERROR BUFFERED LOG RECORD. IT   */
*   /* WILL SKIP TO A NEW PAGE IF NECESSARY, PRINT COLUMN HEADINGS   */
*   /* FOR THE ERROR BUFFERED LOG DATA COUNTS, PRINT ONE LINE PER    */
*   /* ACCESSOR OF BUFFERED LOG DATA COUNTS AND SET A COUNT OF FORCED*/
*   /* SENSE RECORDS NOW EXPECTED.                           @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0270
*   DO;                             /*                       @Y30LB50*/
*     FRETCODE=0;                   /* RESET RETURN CODE TO 0 FOR
*                                      DATA FOUND            @Y30LB50*/
         SLR   @06,@06                                          03S0271
         STH   @06,FRETCODE(,LWORKPTR)                          03S0271
*     IF(PAGECNT+ERRGRP)>ERRPAGE THEN                           03S0272
         LA    @06,4                                            03S0272
         AH    @06,PAGECNT(,LWORKPTR)                           03S0272
         CH    @06,@CH00298                                     03S0272
         BNH   @RF00272                                         03S0272
*       CALL FRCDPAGE;              /* IF PAGE OF OUTPUT IS FULL, DO
*                                      NEW PAGE PROCESSING   @Y30LB50*/
         BAL   @14,FRCDPAGE                                     03S0273
*     ELSE                                                      03S0274
*       ;                           /*                       @Y30LB50*/
@RF00272 DS    0H                                               03S0275
*     RFY                                                       03S0275
*       R1 RSTD;                    /*                       @Y30LB50*/
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             03S0276
*     OUTPUT=ERRSUB1;               /*                       @Y30LB50*/
         MVC   OUTPUT(133,LINEPTR),@CC00427                     03S0277
*     CALL ISDAPRT0;                /* PRINT COLUMN HEADINGS FOR
*                                      ERROR DATA            @Y30LB50*/
         L     @15,@CV00480                                     03S0278
         BALR  @14,@15                                          03S0278
*     RFY                                                       03S0279
*       R1 UNRSTD;                  /*                       @Y30LB50*/
*     OUTPUT=' ';                   /* CLEAR OUTPUT AREA     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           03S0280
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          03S0280
         MVI   OUTPUT(LINEPTR),C' '                             03S0280
*     OUTPTR=ADDR(HEADING);         /* POINT TO TIME IN OUTPUT  03S0281
*                                                            @Y30LB50*/
         LA    OUTPTR,HEADING(,LINEPTR)                         03S0281
*     NEXTCSB=NEXTCSF;              /* SET POINTER TO RECORD FOR
*                                      TIMECVRT              @Y30LB50*/
         MVC   NEXTCSB(4,CSPTR),NEXTCSF(CSPTR)                  03S0282
*     CALL TIMECVRT;                /* CALL TIME CONVERT ROUTINE
*                                                            @Y30LB50*/
         BAL   @14,TIMECVRT                                     03S0283
*     CNTPTR=ADDR(CSB1CNTS);        /* POINT TO FIRST ACCESSOR COUNTS
*                                      IN RECORD             @Y30LB50*/
         L     CNTPTR,NEXTCSB(,CSPTR)                           03S0284
         LA    CNTPTR,CSB1CNTS(,CNTPTR)                         03S0284
*     DO K=1 TO MAXACC;             /* PROCESS COUNTS FOR BOTH  03S0285
*                                      ACCESSORS             @Y30LB50*/
         LA    @06,1                                            03S0285
         STH   @06,K(,LWORKPTR)                                 03S0285
@DL00285 DS    0H                                               03S0286
*       IF K=1 THEN                                             03S0286
         CLC   K(2,LWORKPTR),@CH00083                           03S0286
         BNE   @RF00286                                         03S0286
*         FACC=ACC1;                /* SET ACCESSOR INTO OUTPUT LINE
*                                                            @Y30LB50*/
         MVC   FACC(5,OUTPTR),@CC00465                          03S0287
*       ELSE                                                    03S0288
*         FACC=ACC2;                /*                       @Y30LB50*/
         B     @RC00286                                         03S0288
@RF00286 MVC   FACC(5,OUTPTR),@CC00467                          03S0288
*       OUTPTR=OUTPTR+LENGTH(FACCSKEL);/*                       03S0289
*                                      POINTER FOR FIRST COUNT  03S0289
*                                                            @Y30LB50*/
@RC00286 AH    OUTPTR,@CH00204                                  03S0289
*       CALL BFRFMT;                /* CONVERT COUNTS FOR ACCESSOR
*                                                            @Y30LB50*/
         BAL   @14,BFRFMT                                       03S0290
*       CNTPTR=CNTPTR+LENGTH(FMT3CNTS);/*                       03S0291
*                                      POINT TO NEXT ACCESSOR COUNTS
*                                                            @Y30LB50*/
         AH    CNTPTR,@CH00033                                  03S0291
*       OUTPTR=ADDR(HEADING);       /* POINT TO START OF OUTPUT LINE
*                                                            @Y30LB50*/
         LA    OUTPTR,HEADING(,LINEPTR)                         03S0292
*     END;                          /*                       @Y30LB50*/
         LA    @06,1                                            03S0293
         AH    @06,K(,LWORKPTR)                                 03S0293
         STH   @06,K(,LWORKPTR)                                 03S0293
         CH    @06,@CH00102                                     03S0293
         BNH   @DL00285                                         03S0293
*     FRCDLOGS=NFORCED;             /* SET COUNT OF FORCED SENSE
*                                      RECORDS EXPECTED      @Y30LB50*/
         LA    @06,4                                            03S0294
         STH   @06,FRCDLOGS(,CSPTR)                             03S0294
*     PAGECNT=PAGECNT+ERRGRP;       /* UP COUNT OF LINES ON PAGE
*                                                            @Y30LB50*/
         AH    @06,PAGECNT(,LWORKPTR)                           03S0295
         STH   @06,PAGECNT(,LWORKPTR)                           03S0295
*   END;                            /*                       @Y30LB50*/
*             ELSE                  /* PROCESS FORCED SENSE DATA
*                                                            @Y30LB50*/
*                                                               03S0297
*   /*****************************************************************/
*   /*                                                               */
*   /* FRCDRPT IS USED TO PROCESS FORCED SENSE RECORDS. IT WILL      */
*   /* PROCESS THE RECORD ONLY IF IT IS EXPECTED. IT WILL PRINT      */
*   /* COLUMN HEADINGS FOR THE FORCED SENSE AND PRINT ONE LINE PER   */
*   /* FORCED RECORD.                                        @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0297
*   DO;                             /*                       @Y30LB50*/
         B     @RC00269                                         03S0297
@RF00269 DS    0H                                               03S0298
*     IF FRCDLOGS^=0 THEN                                       03S0298
         LH    @06,FRCDLOGS(,CSPTR)                             03S0298
         LTR   @06,@06                                          03S0298
         BZ    @RF00298                                         03S0298
*       DO;                         /* PROCESS ONLY IF FORCED SENSE
*                                      DATA IS NOW EXPECTED FOR AN
*                                      ERROR BUFFERED LOG RECORD
*                                      ENCOUNTERED           @Y30LB50*/
*         IF FRCDLOGS=NFORCED THEN                              03S0300
         CH    @06,@CH00106                                     03S0300
         BNE   @RF00300                                         03S0300
*           DO;                     /* FOR THE FIRST FORCED SENSE
*                                      RECORD AFTER THE ERROR   03S0301
*                                      BUFFERED LOG RECORD PRINT
*                                      COLUMN HEADINGS       @Y30LB50*/
*             IF(PAGECNT+NFORCED+FRCDHEAD)>ERRPAGE THEN         03S0302
         LA    @06,6                                            03S0302
         AH    @06,PAGECNT(,LWORKPTR)                           03S0302
         CH    @06,@CH00298                                     03S0302
         BNH   @RF00302                                         03S0302
*               CALL FRCDPAGE;      /* IF PAGE OF OUTPUT WILL NOT
*                                      HOLD ALL FORCED SENSE, DO NEW
*                                      PAGE PROCESSING       @Y30LB50*/
         BAL   @14,FRCDPAGE                                     03S0303
*             ELSE                                              03S0304
*               ;                   /*                       @Y30LB50*/
@RF00302 DS    0H                                               03S0305
*             OUTPUT=ERRSUB2;       /* SENSE SUBHEADING      @Y30LB50*/
         MVI   OUTPUT+126(LINEPTR),C' '                         03S0305
         MVC   OUTPUT+127(6,LINEPTR),OUTPUT+126(LINEPTR)        03S0305
         MVC   OUTPUT(126,LINEPTR),@CC00438                     03S0305
*             RFY                                               03S0306
*               R1 RSTD;            /*                       @Y30LB50*/
*             R1=ADDR(WORKCALL);    /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             03S0307
*             CALL ISDAPRT0;        /*                       @Y30LB50*/
         L     @15,@CV00480                                     03S0308
         BALR  @14,@15                                          03S0308
*             RFY                                               03S0309
*               R1 UNRSTD;          /*                       @Y30LB50*/
*             OUTPUT=' ';           /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           03S0310
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          03S0310
         MVI   OUTPUT(LINEPTR),C' '                             03S0310
*             PAGECNT=PAGECNT+FRCDHEAD;/* UP LINES ON PAGE   @Y30LB50*/
         LA    @06,2                                            03S0311
         AH    @06,PAGECNT(,LWORKPTR)                           03S0311
         STH   @06,PAGECNT(,LWORKPTR)                           03S0311
*           END;                    /*                       @Y30LB50*/
*         ELSE                                                  03S0313
*           ;                       /*                       @Y30LB50*/
@RF00300 DS    0H                                               03S0314
*         OUTPTR=ADDR(HEADING);     /* POINT TO POSITION IN OUTPUT
*                                      LINE FOR SSID         @Y30LB50*/
         LA    OUTPTR,HEADING(,LINEPTR)                         03S0314
*                                                               04S0315
*   /*****************************************************************/
*   /*                                                               */
*   /* FRCDFMT IS USED TO CONVERT SSID AND TIME FOR PRINTING IN THE  */
*   /* FORCED SENSE OUTPUT LINE.                             @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0315
*   FSSID(1)=CSFMSC(2);             /* ISOLATE FIRST 4 BITS OF THE
*                                      SSID                  @Y30LB50*/
         L     @06,NEXTCSF(,CSPTR)                              04S0315
         MVC   FSSID(1,OUTPTR),CSFMSC+1(@06)                    04S0315
*   FSSID(1)=FSSID(1)&'0F'X;        /*                       @Y30LB50*/
         NI    FSSID(OUTPTR),X'0F'                              04S0316
*   FSSID(2)=CSFMSC(3);             /* ISOLATE SECOND 4 BITS OF THE
*                                      SSID                  @Y30LB50*/
         MVC   FSSID+1(1,OUTPTR),CSFMSC+2(@06)                  04S0317
*   SRL(FSSID(2),4);                /*                       @Y30LB50*/
         SLR   @15,@15                                          04S0318
         IC    @15,FSSID+1(,OUTPTR)                             04S0318
         SRL   @15,4                                            04S0318
         STC   @15,FSSID+1(,OUTPTR)                             04S0318
*   FSSID(3)=CSFMSC(3);             /* ISOLATE LAST FOUR BITS OF THE
*                                      SSID                  @Y30LB50*/
         MVC   FSSID+2(1,OUTPTR),CSFMSC+2(@06)                  04S0319
*   FSSID(3)=FSSID(3)&'0F'X;        /*                       @Y30LB50*/
         NI    FSSID+2(OUTPTR),X'0F'                            04S0320
*   TR(FSSID,TRTBL2);               /* TRANSLATE SSID TO PRINTABLE
*                                      HEX                   @Y30LB50*/
         TR    FSSID(3,OUTPTR),@CC00454                         04S0321
*   OUTPTR=ADDR(FSTIME);            /* POINT TO TIME IN OUTPUT  04S0322
*                                                            @Y30LB50*/
         LA    @15,FSTIME(,OUTPTR)                              04S0322
         LR    OUTPTR,@15                                       04S0322
*   NEXTCSB=NEXTCSF;                /* SET POINTER TO TIME FOR  04S0323
*                                      TIMECVRT              @Y30LB50*/
         ST    @06,NEXTCSB(,CSPTR)                              04S0323
*   CALL TIMECVRT;                  /* CONVERT TIME OF FORCED SENSE
*                                      RECORD                @Y30LB50*/
         BAL   @14,TIMECVRT                                     04S0324
*   OUTPTR=OUTPTR+LENGTH(TIMEFLD)+26;/*                         04S0325
*                                      POINT PAST TIME IN OUTPUT
*                                                            @Y30LB50*/
         AH    OUTPTR,@CH00512                                  04S0325
*                                                               04S0326
*   /*****************************************************************/
*   /*                                                               */
*   /* FRCDBYTS IS USED TO CONVERT THE 32 BYTES OF SENSE TO 64       */
*   /* PRINTABLE HEX CHARACTERS.                             @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               04S0326
*   CNTPTR=ADDR(CSFMSC);            /* POINT TO SENSE TO BE CONVERTED
*                                                            @Y30LB50*/
         L     CNTPTR,NEXTCSF(,CSPTR)                           04S0326
         LA    CNTPTR,CSFMSC(,CNTPTR)                           04S0326
*   DO K=1 TO FRCDGRPS;             /* PROCESS FORCED SENSE DATA
*                                      BYTES IN GROUPS       @Y30LB50*/
         LA    @06,1                                            04S0327
         STH   @06,K(,LWORKPTR)                                 04S0327
@DL00327 DS    0H                                               04S0328
*     DO J=1 TO FRCDBYTE;           /* PROCESS BYTES IN ONE GROUP
*                                                            @Y30LB50*/
         LA    @06,1                                            04S0328
         STH   @06,J(,LWORKPTR)                                 04S0328
@DL00328 DS    0H                                               04S0329
*       OBYTE1=SNS1;                /* ISOLATE FIRST FOUR BITS OF
*                                      SENSE BYTE            @Y30LB50*/
         MVC   OBYTE1(1,OUTPTR),SNS1(CNTPTR)                    04S0329
*       OBYTE2=SNS1;                /* ISOLATE SECOND FOUR BITS OF
*                                      SENSE BYTE            @Y30LB50*/
         MVC   OBYTE2(1,OUTPTR),SNS1(CNTPTR)                    04S0330
*       SRL(OBYTE1,4);              /*                       @Y30LB50*/
         SLR   @06,@06                                          04S0331
         IC    @06,OBYTE1(,OUTPTR)                              04S0331
         SRL   @06,4                                            04S0331
         STC   @06,OBYTE1(,OUTPTR)                              04S0331
*       OBYTE2=OBYTE2&'0F'X;        /*                       @Y30LB50*/
         NI    OBYTE2(OUTPTR),X'0F'                             04S0332
*       TR(FOUTBYTS,TRTBL2);        /* CONVERT BYTE TO PRINTABLE HEX
*                                                            @Y30LB50*/
         TR    FOUTBYTS(2,OUTPTR),@CC00454                      04S0333
*       CNTPTR=CNTPTR+1;            /* UP POINTER TO NEXT BYTE OF
*                                      SENSE                 @Y30LB50*/
         AH    CNTPTR,@CH00083                                  04S0334
*       OUTPTR=OUTPTR+LENGTH(FOUTBYTS);/* SPACE UP IN OUTPUT @Y30LB50*/
         AH    OUTPTR,@CH00102                                  04S0335
*     END;                          /*                       @Y30LB50*/
         LA    @06,1                                            04S0336
         AH    @06,J(,LWORKPTR)                                 04S0336
         STH   @06,J(,LWORKPTR)                                 04S0336
         CH    @06,@CH00106                                     04S0336
         BNH   @DL00328                                         04S0336
*     OUTPTR=OUTPTR+FSPACES;        /* SPACE UP FOR NEXT GROUP  04S0337
*                                                            @Y30LB50*/
         AH    OUTPTR,@CH00102                                  04S0337
*   END;                            /*                       @Y30LB50*/
         LA    @06,1                                            04S0338
         AH    @06,K(,LWORKPTR)                                 04S0338
         STH   @06,K(,LWORKPTR)                                 04S0338
         CH    @06,@CH00071                                     04S0338
         BNH   @DL00327                                         04S0338
*         RFY                                                   03S0339
*           R1 RSTD;                /*                       @Y30LB50*/
*         R1=ADDR(WORKCALL);        /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             03S0340
*         CALL ISDAPRT0;            /* PRINT FORCED SENSE OUTPUT LINE
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     03S0341
         BALR  @14,@15                                          03S0341
*         RFY                                                   03S0342
*           R1 UNRSTD;              /*                       @Y30LB50*/
*         FRCDLOGS=FRCDLOGS-1;      /* DECREMENT THE COUNT OF FORCED
*                                      SENSE RECORDS EXPECTED   03S0343
*                                                            @Y30LB50*/
         LH    @06,FRCDLOGS(,CSPTR)                             03S0343
         BCTR  @06,0                                            03S0343
         STH   @06,FRCDLOGS(,CSPTR)                             03S0343
*         OUTPUT=' ';               /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           03S0344
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          03S0344
         MVI   OUTPUT(LINEPTR),C' '                             03S0344
*         PAGECNT=PAGECNT+1;        /* UP LINES ON PAGE      @Y30LB50*/
         LA    @06,1                                            03S0345
         AH    @06,PAGECNT(,LWORKPTR)                           03S0345
         STH   @06,PAGECNT(,LWORKPTR)                           03S0345
*       END;                        /*                       @Y30LB50*/
*     ELSE                                                      03S0347
*       ;                           /*                       @Y30LB50*/
@RF00298 DS    0H                                               03S0348
*   END;                            /*                       @Y30LB50*/
*             NEXTCSF=CSFCHAIN;     /* POINT TO NEXT CSF RECORD BY
*                                      TIME                  @Y30LB50*/
@RC00269 L     @06,NEXTCSF(,CSPTR)                              02S0349
         L     @06,CSFCHAIN(,@06)                               02S0349
         ST    @06,NEXTCSF(,CSPTR)                              02S0349
*           END;                    /*                       @Y30LB50*/
@DE00268 ICM   @06,15,NEXTCSF(CSPTR)                            02S0350
         BNZ   @DL00268                                         02S0350
*         END;                      /*                       @Y30LB50*/
*       ELSE                                                    02S0352
*         ;                         /*                       @Y30LB50*/
@RF00262 DS    0H                                               02S0353
*     END;                          /*                       @Y30LB50*/
         LA    @06,1                                            02S0353
         AH    @06,I(,LWORKPTR)                                 02S0353
         STH   @06,I(,LWORKPTR)                                 02S0353
         CH    @06,@CH00106                                     02S0353
         BNH   @DL00260                                         02S0353
*   END;                            /*                       @Y30LB50*/
*   ELSE                                                        01S0355
*     ;                             /*                       @Y30LB50*/
@RF00257 DS    0H                                               01S0356
*   IF(BRETCODE=NOCSBDAT)&(FRETCODE=NOCSFDAT) THEN              01S0356
         CLC   BRETCODE(2,LWORKPTR),@CH00034                    01S0356
         BNE   @RF00356                                         01S0356
         CLC   FRETCODE(2,LWORKPTR),@CH00244                    01S0356
         BNE   @RF00356                                         01S0356
*     RETCODE=NODATA;               /* IF NO CSB OR CSF DATA WAS
*                                      FOUND SET RETCODE FOR NO DATA
*                                      ACCUMULATED           @Y30LB50*/
         LA    RETCODE,8                                        01S0357
*   ELSE                                                        01S0358
*     DO;                           /*                       @Y30LB50*/
         B     @RC00356                                         01S0358
@RF00356 DS    0H                                               01S0359
*       IF BRETCODE=0 THEN                                      01S0359
         ICM   @06,3,BRETCODE(LWORKPTR)                         01S0359
         BNZ   @RF00359                                         01S0359
*         RETCODE=FRETCODE;         /* IF CSB DATA WAS FOUND SET
*                                      RETURN CODE FROM CSF     01S0360
*                                      PROCESSING AS RETURN CODE FROM
*                                      ISDACSB1--COULD BE 0 OR NO CSF
*                                      DATA ACCUMULATED      @Y30LB50*/
         SLR   RETCODE,RETCODE                                  01S0360
         ICM   RETCODE,3,FRETCODE(LWORKPTR)                     01S0360
*       ELSE                                                    01S0361
*         RETCODE=BRETCODE;         /* CSF DATA WAS FOUND BUT NO CSB
*                                      - RETURN CODE WILL BE 0 OR NO
*                                      CSB DATA ACCUMULATED  @Y30LB50*/
         B     @RC00359                                         01S0361
@RF00359 SLR   RETCODE,RETCODE                                  01S0361
         ICM   RETCODE,3,BRETCODE(LWORKPTR)                     01S0361
*       IF RETCODE>NODATA&CCSBCSF^='03'X THEN /* WAS ONE REPORT 01S0362
*                                                PRINTED     @ZM30730*/
@RC00359 LA    @06,8                                            01S0362
         CR    RETCODE,@06                                      01S0362
         BNH   @RF00362                                         01S0362
         L     @01,LPARMPTR                                     01S0362
         CLI   CCSBCSF(@01),X'03'                               01S0362
         BE    @RF00362                                         01S0362
*         RETCODE=NODATA;           /* NO, SET NO REPORTS    @ZM30730*/
         LR    RETCODE,@06                                      01S0363
*       ELSE;                       /* YES, RETCODE OK       @ZM30730*/
@RF00362 DS    0H                                               01S0365
*     END;                          /*                       @Y30LB50*/
*                                                               02S0366
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEBLKS IS USED TO FREE ALL ACCUMULATOR BLOCKS OBTAINED BY   */
*   /* ISDACSB0, THE WORKAREA OBTAINED BY ISDACSB0 AND THE WORKAREA  */
*   /* OBTAINED BY ISDACSB1                                  @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0366
*   DO I=1 TO MAXCSS;               /* RELEASE ACCUMULATOR BLOCKS
*                                      OBTAINED FOR EACH CS TABLE
*                                                            @Y30LB50*/
@RC00356 LA    @06,1                                            02S0366
         STH   @06,I(,LWORKPTR)                                 02S0366
@DL00366 DS    0H                                               02S0367
*     CSPTR=CSTPTRS(I);             /* POINT TO CS TABLE     @Y30LB50*/
         LH    @06,I(,LWORKPTR)                                 02S0367
         SLA   @06,2                                            02S0367
         L     CSPTR,CSTPTRS-4(@06,LWORKPTR)                    02S0367
*     CORELEN=LENGTH(CSBDATA)*BLOCKKNT+LENGTH(ISDAGHDR);/*      02S0368
*                                           LENGTH-CSB BLOCK @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00514+1                     02S0368
*     SPNO=CSBSPNO;                 /* SUBPOOL NUMBER OF BLOCKS 02S0369
*                                                            @Y30LB50*/
         MVI   SPNO(CVTPTR),X'01'                               02S0369
*     DO WHILE ACCUM^=0;            /* RELEASE CSB BLOCKS    @Y30LB50*/
         B     @DE00370                                         02S0370
@DL00370 DS    0H                                               02S0371
*       RFY                                                     02S0371
*         ISDAGHDR BASED(ACCUM);    /*                       @Y30LB50*/
*       ACCMPTR=NEXTPTR;            /* BLOCK CURRENT BLOCK IS CHAINED
*                                      TO                    @Y30LB50*/
         L     @06,ACCUM(,CSPTR)                                02S0372
         MVC   ACCMPTR(4,CSPTR),NEXTPTR(@06)                    02S0372
*       RFY                                                     02S0373
*         R1 RSTD;                  /*                       @Y30LB50*/
*       R1=ADDR(WORKCALL);          /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0374
*       COREADDR=ACCUM;             /* ADDRESS TO FREE       @Y30LB50*/
         ST    @06,COREADDR(,CVTPTR)                            02S0375
*       CALL ISDAFREE;              /* FREE CURRENT BLOCK    @Y30LB50*/
         L     @15,@CV00479                                     02S0376
         BALR  @14,@15                                          02S0376
*       RFY                                                     02S0377
*         R1 UNRSTD;                /*                       @Y30LB50*/
*       ACCUM=ACCMPTR;              /* POINT TO NEXT BLOCK   @Y30LB50*/
         MVC   ACCUM(4,CSPTR),ACCMPTR(CSPTR)                    02S0378
*     END;                          /*                       @Y30LB50*/
@DE00370 ICM   @06,15,ACCUM(CSPTR)                              02S0379
         BNZ   @DL00370                                         02S0379
*     CORELEN=LENGTH(CSFDATA)*BLOCKKNT+LENGTH(ISDAGHDR);/*      02S0380
*                                           LENGTH-CSF BLOCK @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00517+1                     02S0380
*     DO WHILE FACCUM^=0;           /* RELEASE CSF BLOCKS    @Y30LB50*/
         B     @DE00381                                         02S0381
@DL00381 DS    0H                                               02S0382
*       RFY                                                     02S0382
*         ISDAGHDR BASED(FACCUM);   /*                       @Y30LB50*/
*       FACCMPTR=NEXTPTR;           /* BLOCK CURRENT BLOCK IS CHAINED
*                                      TO                    @Y30LB50*/
         L     @06,FACCUM(,CSPTR)                               02S0383
         MVC   FACCMPTR(4,CSPTR),NEXTPTR(@06)                   02S0383
*       RFY                                                     02S0384
*         R1 RSTD;                  /*                       @Y30LB50*/
*       R1=ADDR(WORKCALL);          /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0385
*       COREADDR=FACCUM;            /* ADDR TO RELEASE       @Y30LB50*/
         ST    @06,COREADDR(,CVTPTR)                            02S0386
*       CALL ISDAFREE;              /* FREE CURRENT BLOCK    @Y30LB50*/
         L     @15,@CV00479                                     02S0387
         BALR  @14,@15                                          02S0387
*       RFY                                                     02S0388
*         R1 UNRSTD;                /*                       @Y30LB50*/
*       FACCUM=FACCMPTR;            /* NEXT BLOCK            @Y30LB50*/
         MVC   FACCUM(4,CSPTR),FACCMPTR(CSPTR)                  02S0389
*     END;                          /*                       @Y30LB50*/
@DE00381 ICM   @06,15,FACCUM(CSPTR)                             02S0390
         BNZ   @DL00381                                         02S0390
*   END;                            /*                       @Y30LB50*/
         LA    @06,1                                            02S0391
         AH    @06,I(,LWORKPTR)                                 02S0391
         STH   @06,I(,LWORKPTR)                                 02S0391
         CH    @06,@CH00106                                     02S0391
         BNH   @DL00366                                         02S0391
*   RFY                                                         02S0392
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0393
*   CORELEN=LENGTH(CSBWORK)+MAXCSS*LENGTH(CSTBLS);/*            02S0394
*                                      LENGTH OF WORKAREA    @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00520+1                     02S0394
*   SPNO=WORKSPNO;                  /* SUBPOOL NUMBER OF CSB WORKAREA
*                                                            @Y30LB50*/
         MVC   SPNO(1,CVTPTR),WORKSPNO                          02S0395
*   COREADDR=LWORKPTR;              /*                       @Y30LB50*/
         ST    LWORKPTR,COREADDR(,CVTPTR)                       02S0396
*   CALL ISDAFREE;                  /* FREE CSB0 WORKAREA    @Y30LB50*/
         L     @15,@CV00479                                     02S0397
         BALR  @14,@15                                          02S0397
*   RFY                                                         02S0398
*     R1 UNRSTD;                    /*                       @Y30LB50*/
*   CSB00PTR=0;                     /* ZERO ISDACSB0 WORKAREA ADDRESS
*                                                            @Y30LB50*/
         SLR   @06,@06                                          02S0399
         ST    @06,CSB00PTR(,CVTPTR)                            02S0399
*   RETURN CODE(RETCODE);           /*                       @Y30LB50*/
         L     @13,4(,@13)                                      01S0400
         L     @00,@SIZDATD                                     01S0400
         LR    @01,@10                                          01S0400
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@03                                          01S0400
         L     @14,12(,@13)                                     01S0400
         LM    @00,@12,20(@13)                                  01S0400
         BR    @14                                              01S0400
*                                                               02S0401
*   /*****************************************************************/
*   /*                                                               */
*   /* BFRFMT IS CALLED TO CONVERT ERROR COUNTS FOR PRINTING IN      */
*   /* DETAIL USAGE BUFFERED LOG REPORTS OR ERROR BUFFERED LOG       */
*   /* REPORTS. IT CONVERTS USAGE COUNT, 12 4-BIT COUNTS, X-STRIP    */
*   /* ERROR COUNT AND Y-STRIP ERROR COUNT. THE OUTPUT LINE IS       */
*   /* PRINTED AND CLEARED.                                  @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0401
*BFRFMT:                                                        02S0401
*   PROC;                           /*                       @Y30LB50*/
BFRFMT   STM   @14,@12,@SA00002                                 02S0401
*   WORK6=PATT1;                    /* SET FIELD FOR SUPPRESSING
*                                      LEADING ZEROES        @Y30LB50*/
         MVC   WORK6(6),PATT1                                   02S0402
*   USAGECT=USAGECT&USAGMASK;       /* CLEAR STATUS BITS AT BEGINNING
*                                      OF USAGE COUNT        @Y30LB50*/
         NC    USAGECT(2,CNTPTR),USAGMASK                       02S0403
*   CVD(USAGEKT,HOLDDBL);           /*                       @Y30LB50*/
         SLR   @06,@06                                          02S0404
         ICM   @06,3,USAGEKT(CNTPTR)                            02S0404
         CVD   @06,HOLDDBL(,LWORKPTR)                           02S0404
*   ED(WORK6,HOLD);                 /* USAGE COUNT INTO OUTPUT LINE
*                                                            @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          02S0405
*   OUSAGE=WORK6(2:6);              /* MOVE 5 CHAR           @Y30LB55*/
         MVC   OUSAGE(5,OUTPTR),WORK6+1                         02S0406
*   WORK6=PATT1;                    /* X-STRIP ERRORS COUNT  @Y30LB50*/
         MVC   WORK6(6),PATT1                                   02S0407
*   CWORK(1)=XYCOUNT;               /* ISOLATE X STRIP ERROR COUNT
*                                                            @Y30LB50*/
         MVC   CWORK(1,LWORKPTR),XYCOUNT(CNTPTR)                02S0408
*   SRL(CWORK(1),4);                /*                       @Y30LB50*/
         SLR   @06,@06                                          02S0409
         IC    @06,CWORK(,LWORKPTR)                             02S0409
         SRL   @06,4                                            02S0409
         STC   @06,CWORK(,LWORKPTR)                             02S0409
*   CWORK(2)=XCOUNT;                /*                       @Y30LB50*/
         MVC   CWORK+1(1,LWORKPTR),XCOUNT(CNTPTR)               02S0410
*   CVD(KWORK,HOLDDBL);             /*                       @Y30LB50*/
         SLR   @06,@06                                          02S0411
         ICM   @06,3,KWORK(LWORKPTR)                            02S0411
         CVD   @06,HOLDDBL(,LWORKPTR)                           02S0411
*   ED(WORK6,HOLD);                 /* X STRIP ERROR COUNT INTO 02S0412
*                                      OUTPUT                @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          02S0412
*   OCNT13=WORK6(2:6);              /* MOVE 5 CHAR           @Y30LB55*/
         MVC   OCNT13(5,OUTPTR),WORK6+1                         02S0413
*   WORK6=PATT1;                    /* EDIT PATTERN          @Y30LB50*/
         MVC   WORK6(6),PATT1                                   02S0414
*   CWORK(1)=XYCOUNT;               /* ISOLATE Y STRIP ERROR COUNT
*                                                            @Y30LB50*/
         MVC   CWORK(1,LWORKPTR),XYCOUNT(CNTPTR)                02S0415
*   CWORK(1)=CWORK(1)&YMASK;        /*                       @Y30LB50*/
         NC    CWORK(1,LWORKPTR),YMASK                          02S0416
*   CWORK(2)=YCOUNT;                /*                       @Y30LB50*/
         MVC   CWORK+1(1,LWORKPTR),YCOUNT(CNTPTR)               02S0417
*   CVD(KWORK,HOLDDBL);             /*                       @Y30LB50*/
         SLR   @06,@06                                          02S0418
         ICM   @06,3,KWORK(LWORKPTR)                            02S0418
         CVD   @06,HOLDDBL(,LWORKPTR)                           02S0418
*   ED(WORK6,HOLD);                 /* Y STRIP ERROR COUNT INTO 02S0419
*                                      OUTPUT                @Y30LB50*/
         ED    WORK6(6),HOLD(LWORKPTR)                          02S0419
*   OCNT14=WORK6(2:6);              /* MOVE 5 CHAR           @Y30LB55*/
         MVC   OCNT14(5,OUTPTR),WORK6+1                         02S0420
*                                                               03S0421
*   /*****************************************************************/
*   /*                                                               */
*   /* BFRCNTS IS USED TO ISOLATE EACH 4-BIT COUNTER FROM THE 6 BYTES*/
*   /* OF BUFFERED LOG , CONVERT THE COUNT TO EBCDIC DECIMAL         */
*   /* CHARACTERS AND PUT IN THE OUTPUT LIE FOR DETAIL BUFFERED LOG  */
*   /* REPORTS AND ERROR BUFFERED LOG REPORTS                @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0421
*   DO J=1 TO MAXCNTS BY MAXBYTE;   /* PROCESS COUNT BYTES   @Y30LB50*/
         LA    @06,1                                            03S0421
         STH   @06,J(,LWORKPTR)                                 03S0421
@DL00421 DS    0H                                               03S0422
*     OUTPTR=OUTPTR+CNTSPC(J);      /* SPACE UP IN OUTPUT LINE FOR
*                                      COUNT                 @Y30LB50*/
         LH    @06,J(,LWORKPTR)                                 03S0422
         ALR   @06,@06                                          03S0422
         AH    OUTPTR,CNTSPC-2(@06)                             03S0422
*     OCNT1=COUNT12;                /* ISOLATE FIRST FOUR BIT COUNTER
*                                      IN BYTE               @Y30LB50*/
         MVC   OCNT1(1,OUTPTR),COUNT12(CNTPTR)                  03S0423
*     SRL(OCNT1,4);                 /*                       @Y30LB50*/
         SLR   @06,@06                                          03S0424
         IC    @06,OCNT1(,OUTPTR)                               03S0424
         SRL   @06,4                                            03S0424
         STC   @06,OCNT1(,OUTPTR)                               03S0424
*     COUNT12=COUNT12&'0F'X;        /* ISOLATE SECOND FOUR BIT COUNT
*                                      IN BYTE               @Y30LB50*/
         NI    COUNT12(CNTPTR),X'0F'                            03S0425
*     IF OCNT1>UNITS THEN                                       03S0426
         CLC   OCNT1(1,OUTPTR),UNITS                            03S0426
         BNH   @RF00426                                         03S0426
*       OCNT0=TENS;                 /* SET TENS DIGIT IF COUNT IS
*                                      GREATER THAN UNITS DIGITS ONLY
*                                                            @Y30LB50*/
         MVI   OCNT0(OUTPTR),C'1'                               03S0427
*     ELSE                                                      03S0428
*       ;                           /* IF COUNT IS NOT GREATER THAN
*                                      10, LEAVE TENS DIGIT BLANK
*                                                            @Y30LB50*/
@RF00426 DS    0H                                               03S0429
*     TR(OCNT1,TRTBL);              /* CONVERT ONE'S DIGIT TO EBCDIC
*                                                            @Y30LB50*/
         TR    OCNT1(1,OUTPTR),@CC00449                         03S0429
*     OUTPTR=OUTPTR+CNTSPC(J+1);    /* SPACE UP IN OUTPUT LINE FOR
*                                      NEXT COUNT            @Y30LB50*/
         LH    @06,J(,LWORKPTR)                                 03S0430
         ALR   @06,@06                                          03S0430
         AH    OUTPTR,CNTSPC(@06)                               03S0430
*     OCNT1=COUNT12;                /* MOVE SECOND COUNT TO OUTPUT
*                                      LINE                  @Y30LB50*/
         MVC   OCNT1(1,OUTPTR),COUNT12(CNTPTR)                  03S0431
*     IF OCNT1>UNITS THEN                                       03S0432
         CLC   OCNT1(1,OUTPTR),UNITS                            03S0432
         BNH   @RF00432                                         03S0432
*       OCNT0=TENS;                 /* SET TENS DIGIT IF COUNT IS
*                                      GREATER THAN UNITS DIGITS ONLY
*                                                            @Y30LB50*/
         MVI   OCNT0(OUTPTR),C'1'                               03S0433
*     ELSE                                                      03S0434
*       ;                           /*                       @Y30LB50*/
@RF00432 DS    0H                                               03S0435
*     TR(OCNT1,TRTBL);              /* CONVERT ONE'S DIGIT TO EBCDIC
*                                                            @Y30LB50*/
         TR    OCNT1(1,OUTPTR),@CC00449                         03S0435
*     CNTPTR=CNTPTR+1;              /* UP POINTER TO NEXT COUNT IN
*                                      THE BUFFERED LOG LOG DATA
*                                      SAVED                 @Y30LB50*/
         AH    CNTPTR,@CH00083                                  03S0436
*   END;                            /*                       @Y30LB50*/
         LA    @06,2                                            03S0437
         AH    @06,J(,LWORKPTR)                                 03S0437
         STH   @06,J(,LWORKPTR)                                 03S0437
         CH    @06,@CH00034                                     03S0437
         BNH   @DL00421                                         03S0437
*   RFY                                                         02S0438
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0439
*   CALL ISDAPRT0;                  /* PRINT ONE LINE OF COUNTS 02S0440
*                                                            @Y30LB50*/
         L     @15,@CV00480                                     02S0440
         BALR  @14,@15                                          02S0440
*   RFY                                                         02S0441
*     R1 RSTD;                      /*                       @Y30LB50*/
*   OUTPUT=' ';                     /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           02S0442
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          02S0442
         MVI   OUTPUT(LINEPTR),C' '                             02S0442
*   END BFRFMT;                     /*                       @Y30LB50*/
@EL00002 DS    0H                                               02S0443
@EF00002 DS    0H                                               02S0443
@ER00002 LM    @14,@12,@SA00002                                 02S0443
         BR    @14                                              02S0443
*FRCDPAGE:                                                      02S0444
*   PROC;                           /*                       @Y30LB50*/
*                                                               02S0444
FRCDPAGE STM   @14,@12,@SA00003                                 02S0444
*   /*****************************************************************/
*   /*                                                               */
*   /* FRCDPAGE IS CALLED TO PRINT THE HEADING FOR A NEW ERROR       */
*   /* BUFFERED /FORCED SENSE DATA REPORT PAGE               @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0445
*   OUTPUT=ERRHEAD;                 /* MOVE MAIN HEADING TO OUTPUT
*                                      LINE                  @Y30LB50*/
         MVI   OUTPUT+132(LINEPTR),C' '                         02S0445
         MVC   OUTPUT(132,LINEPTR),@CC00417                     02S0445
*   CSNUMBER=CSNUMB;                /* SET CARTRIDGE STORE INTO 02S0446
*                                      HEADING               @Y30LB50*/
         MVC   CSNUMBER(1,LINEPTR),CSNUMB(CSPTR)                02S0446
*   RFY                                                         02S0447
*     R1 RSTD;                      /*                       @Y30LB50*/
*   R1=ADDR(WORKCALL);              /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0448
*   CALL ISDAPRT0;                  /* SKIP TO NEW PAGE AND PRINT
*                                      HEADING               @Y30LB50*/
         L     @15,@CV00480                                     02S0449
         BALR  @14,@15                                          02S0449
*   RFY                                                         02S0450
*     R1 UNRSTD;                    /*                       @Y30LB50*/
*   OUTPUT=' ';                     /* CLEAR OUTPUT LINE     @Y30LB50*/
         MVI   OUTPUT+1(LINEPTR),C' '                           02S0451
         MVC   OUTPUT+2(131,LINEPTR),OUTPUT+1(LINEPTR)          02S0451
         MVI   OUTPUT(LINEPTR),C' '                             02S0451
*   PAGECNT=0;                      /* SET LINES ON PAGE TO 0   02S0452
*                                                            @Y30LB50*/
         SLR   @06,@06                                          02S0452
         STH   @06,PAGECNT(,LWORKPTR)                           02S0452
*   END FRCDPAGE;                   /*                       @Y30LB50*/
@EL00003 DS    0H                                               02S0453
@EF00003 DS    0H                                               02S0453
@ER00003 LM    @14,@12,@SA00003                                 02S0453
         BR    @14                                              02S0453
*                                                               02S0454
*   /*****************************************************************/
*   /*                                                               */
*   /* TIMECVRT IS CALLED TO CONVERT TIME IN THE LOGREC RECORD       */
*   /* POINTED TO BY NEXTCSB TO THE FORMAT DDD/YY HH:MM:SS. THE      */
*   /* OUTPUT TIME IS STORED AT THE LOCATION POINTED TO BY OUTPTR    */
*   /*                                                       @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0454
*TIMECVRT:                                                      02S0454
*   PROC;                           /*                       @Y30LB50*/
TIMECVRT STM   @14,@12,12(@13)                                  02S0454
*   UNPK(ODAY,CSBDATE);             /* CONVERT DAY           @Y30LB50*/
         L     @06,NEXTCSB(,CSPTR)                              02S0455
         UNPK  ODAY(3,OUTPTR),CSBDATE(2,@06)                    02S0455
*   OYR(1)=CSBYR(2);                /* CONVERT YEAR          @Y30LB50*/
         MVC   OYR(1,OUTPTR),CSBYR+1(@06)                       02S0456
*   SRL(OYR(1),4);                  /*                       @Y30LB50*/
         SLR   @15,@15                                          02S0457
         IC    @15,OYR(,OUTPTR)                                 02S0457
         SRL   @15,4                                            02S0457
         STC   @15,OYR(,OUTPTR)                                 02S0457
*   OYR(2)=CSBYR(2);                /*                       @Y30LB50*/
         MVC   OYR+1(1,OUTPTR),CSBYR+1(@06)                     02S0458
*   OYR=OYR×'00';                   /*                       @Y30LB50*/
         OC    OYR(2,OUTPTR),@CC00508                           02S0459
*   OSLASH='/';                     /* SLASH BETWEEN DAY AND YEAR
*                                                            @Y30LB50*/
         MVI   OSLASH(OUTPTR),C'/'                              02S0460
*   OHR(1)=CSBHR;                   /* CONVERT HOURS         @Y30LB50*/
         MVC   OHR(1,OUTPTR),CSBHR(@06)                         02S0461
*   SRL(OHR(1),4);                  /*                       @Y30LB50*/
         SLR   @15,@15                                          02S0462
         IC    @15,OHR(,OUTPTR)                                 02S0462
         SRL   @15,4                                            02S0462
         STC   @15,OHR(,OUTPTR)                                 02S0462
*   OHR(2)=CSBHR;                   /*                       @Y30LB50*/
         MVC   OHR+1(1,OUTPTR),CSBHR(@06)                       02S0463
*   OHR=OHR×'00';                   /*                       @Y30LB50*/
         OC    OHR(2,OUTPTR),@CC00508                           02S0464
*   OCOL1=':';                      /* COLON BETWEEN HOUR AND MINUTE
*                                                            @Y30LB50*/
         MVI   OCOL1(OUTPTR),C':'                               02S0465
*   OMIN(1)=CSBMIN;                 /* CONVERT MINUTES       @Y30LB50*/
         MVC   OMIN(1,OUTPTR),CSBMIN(@06)                       02S0466
*   SRL(OMIN(1),4);                 /*                       @Y30LB50*/
         SLR   @15,@15                                          02S0467
         IC    @15,OMIN(,OUTPTR)                                02S0467
         SRL   @15,4                                            02S0467
         STC   @15,OMIN(,OUTPTR)                                02S0467
*   OMIN(2)=CSBMIN;                 /*                       @Y30LB50*/
         MVC   OMIN+1(1,OUTPTR),CSBMIN(@06)                     02S0468
*   OMIN=OMIN×'00';                 /*                       @Y30LB50*/
         OC    OMIN(2,OUTPTR),@CC00508                          02S0469
*   OCOL2=':';                      /* COLON BETWEEN MINUTES AND
*                                      SECOND                @Y30LB50*/
         MVI   OCOL2(OUTPTR),C':'                               02S0470
*   OSEC(1)=CSBSEC;                 /* CONVERT SECONDS       @Y30LB50*/
         MVC   OSEC(1,OUTPTR),CSBSEC(@06)                       02S0471
*   SRL(OSEC(1),4);                 /*                       @Y30LB50*/
         SLR   @15,@15                                          02S0472
         IC    @15,OSEC(,OUTPTR)                                02S0472
         SRL   @15,4                                            02S0472
         STC   @15,OSEC(,OUTPTR)                                02S0472
*   OSEC(2)=CSBSEC;                 /*                       @Y30LB50*/
         MVC   OSEC+1(1,OUTPTR),CSBSEC(@06)                     02S0473
*   OSEC=OSEC×'00';                 /*                       @Y30LB50*/
         OC    OSEC(2,OUTPTR),@CC00508                          02S0474
*   END TIMECVRT;                   /*                       @Y30LB50*/
@EL00004 DS    0H                                               02S0475
@EF00004 DS    0H                                               02S0475
@ER00004 LM    @14,@12,12(@13)                                  02S0475
         BR    @14                                              02S0475
*   END ISDACSB1                    /*                       @Y30LB50*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ISDACVT )                                        *
*/*%INCLUDE SYSLIB  (ISDAPRMS)                                        *
*/*%INCLUDE SYSLIB  (ISDAGHDR)                                        *
*/*%INCLUDE SYSLIB  (ISDACSB5)                                        *
*/*%INCLUDE SYSUT5  (OUTPUT  )                                        *
*/*%INCLUDE SYSUT5  (OUTFMTS )                                        *
*/*%INCLUDE SYSUT5  (FMT3CNTS)                                        *
*/*%INCLUDE SYSUT5  (TIMEFLD )                                        *
*/*%INCLUDE SYSUT5  (CSB1CNST)                                        *
*/*%INCLUDE SYSUT5  (USAGERPT)                                        *
*/*%INCLUDE SYSUT5  (DETAIL  )                                        *
*/*%INCLUDE SYSUT5  (SUMMRY  )                                        *
*/*%INCLUDE SYSUT5  (SUMPAGE )                                        *
*/*%INCLUDE SYSUT5  (SUMCNT  )                                        *
*/*%INCLUDE SYSUT5  (SUMSOUT )                                        *
*/*%INCLUDE SYSUT5  (ERRORRPT)                                        *
*/*%INCLUDE SYSUT5  (ERRBFRD )                                        *
*/*%INCLUDE SYSUT5  (FRCDRPT )                                        *
*/*%INCLUDE SYSUT5  (FRCDFMT )                                        *
*/*%INCLUDE SYSUT5  (FRCDBYTS)                                        *
*/*%INCLUDE SYSUT5  (FREEBLKS)                                        *
*/*%INCLUDE SYSUT5  (BFRFMT  )                                        *
*/*%INCLUDE SYSUT5  (BFRCNTS )                                        *
*/*%INCLUDE SYSUT5  (FRCDPAGE)                                        *
*/*%INCLUDE SYSUT5  (TIMECVRT)                                        *
*;                                                              01S0476
@DATA    DS    0H
@CH00083 DC    H'1'
@CH00102 DC    H'2'
@CH00106 DC    H'4'
@CH00071 DC    H'8'
@CH00033 DC    H'11'
@CH00034 DC    H'12'
@CH00244 DC    H'16'
@CH00090 DC    H'18'
@CH00204 DC    H'22'
@CH00219 DC    H'26'
@CH00512 DC    H'42'
@CH00298 DC    H'56'
@CH00511 DC    H'-15'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00003 DS    0F
@SA00002 DS    0F
         DS    15F
ISDACSB1 CSECT
         DS    0F
@CF00520 DC    F'288'
@CF00514 DC    F'948'
@CF00517 DC    F'1040'
@DATD    DSECT
         DS    0D
LPARMPTR DS    A
GET0PTR  DS    A
WORK6    DS    CL6
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISDACSB1 CSECT
         NOPR  ((@ENDDATD-@DATD)/161*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00479 DC    V(ISDAFREE)
@CV00480 DC    V(ISDAPRT0)
         DS    0D
@CC00357 DC    C'0    RECORD      USAGE SEL/RST SEL/RST X-TIME Y-TIME XC
               -ADDR Y-ADDR X-TACH  Y-TACH   GAP  SWIVEL SELECT  SWIVELC
                 X-STRIP Y-STRIP      '
@CC00367 DC    C'  DATE    TIME   COUNT TIMEOUT FAILURE   OUT    OUT   C
               CHECK  CHECK  CHECK   CHECK  ERROR CHECK  SEQ CHK TIMEOUC
               T  CHECKS  CHECKS      '
@CC00387 DC    C'0            PERIOD               USAGE SEL/RST SEL/RSC
               T  X-    Y-   X-    Y-    X-    Y-    GAP  SWIVEL SELECTC
                 SWIVEL   X-      Y-  '
@CC00397 DC    C'  FROM:           TO:             COUNT TIMEOUT FAILURC
               E TIME  TIME ADDR  ADDR  TACH  TACH  ERROR CHECK    SEQ C
                  TIME  STRIP   STRIP '
@CC00407 DC    C'  DATE    TIME    DATE    TIME                        C
                 OUT   OUT  CHECK CHECK CHECK CHECK               CHECKC
                  OUT   CHECKS  CHECKS'
@CC00427 DC    C'0 DATE    TIME    ACC  USAGE S/R-TO  S/R-FAIL X-TO   YC
               -TO  X-ADDR Y-ADDR X-TACH  Y-TACH   GAP SWV-CHK SEL-SEQ C
               SWV-TO  X-STRIP Y-STRIP'
@CC00347 DC    C'1REPORT 14 - CARTRIDGE STORE BUFFERED LOG - DETAIL DATC
               A FOR        ACCESSOR                         MSF     (DC
               ATA FROM MSS FORMAT 3)'
@CC00377 DC    C'1REPORT 14 - CARTRIDGE STORE BUFFERED LOG - SUMMARY DAC
               TA FOR       ACCESSOR -      RECORDS TOTAL    MSF     (DC
               ATA FROM MSS FORMAT 3)'
@CC00417 DC    C'1REPORT 15 - CARTRIDGE STORE FORCED LOG - BUFFERED LOGC
                ERROR OVERFLOW AND FORCED SENSE DATA         MSF     (DC
               ATA FROM MSS FORMAT 3)'
@CC00438 DC    C'0SSID  DATE    TIME   FORCED SENSE DATA BYTES:  00..02C
               ..  04..06..  08..10..  12..14..  16..18..  20..22..  24C
               ..26..  28..30..'
@CC00449 DC    C'0123456789012345'
@CC00454 DC    C'0123456789ABCDEF'
@CC00465 DC    C'RIGHT'
@CC00467 DC    C'LEFT '
@CC00340 DC    C'CSF'
@CC00508 DC    C'00'
WORKSPNO DC    X'00'
PATCH    DS    CL50
         ORG   PATCH
@NM00004 DC    50X'00'
         ORG   PATCH+50
PATT1    DC    X'402020202120'
UNITS    DC    X'09'
YMASK    DC    X'0F'
USAGMASK DC    X'1FFF'
CNTSPC   DC    H'8'
         DC    H'8'
         DC    H'8'
         DC    H'7'
         DC    H'7'
         DC    H'7'
         DC    H'7'
         DC    H'8'
         DC    H'7'
         DC    H'7'
         DC    H'7'
         DC    H'8'
SUMSPC   DC    H'8'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'6'
         DC    H'8'
         DC    H'7'
         DC    H'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CVTPTR   EQU   @02
RETCODE  EQU   @03
R1       EQU   @01
LWORKPTR EQU   @09
CSPTR    EQU   @08
LINEPTR  EQU   @07
OUTPTR   EQU   @05
CNTPTR   EQU   @04
R0       EQU   @00
R15      EQU   @15
ISDACVT  EQU   0
CVTPTRS0 EQU   ISDACVT
PARMPTR  EQU   CVTPTRS0+8
CSB00PTR EQU   CVTPTRS0+68
WORKCALL EQU   CVTPTRS0+96
GET0CALL EQU   ISDACVT+100
SPNOLEN  EQU   GET0CALL
SPNO     EQU   SPNOLEN
CORELEN  EQU   SPNOLEN+1
COREADDR EQU   GET0CALL+4
HEXPCALL EQU   ISDACVT+108
PRT0CALL EQU   ISDACVT+120
OUTLINE  EQU   PRT0CALL
SDARPTID EQU   PRT0CALL+133
SDADATD  EQU   ISDACVT+256
PRTDATD  EQU   ISDACVT+416
ISDAPRMS EQU   0
CINPUT   EQU   ISDAPRMS
CSTART   EQU   ISDAPRMS+2
CEND     EQU   ISDAPRMS+6
CSUMMARY EQU   ISDAPRMS+10
CFSCONLY EQU   ISDAPRMS+13
CSSIDF   EQU   ISDAPRMS+17
CSERIAL  EQU   ISDAPRMS+21
CREPORTS EQU   ISDAPRMS+33
CCSBCSF  EQU   CREPORTS+7
ISDAGHDR EQU   0
GET0SPLN EQU   ISDAGHDR+8
NEXTPTR  EQU   ISDAGHDR+12
CSTBLS   EQU   0
BFRCNT   EQU   CSTBLS
FBFRCNT  EQU   CSTBLS+2
ACCUM    EQU   CSTBLS+4
ACCMPTR  EQU   CSTBLS+8
NEXTCSB  EQU   CSTBLS+12
FRCDLOGS EQU   CSTBLS+18
CSBFIRST EQU   CSTBLS+20
FACCUM   EQU   CSTBLS+24
FACCMPTR EQU   CSTBLS+28
NEXTCSF  EQU   CSTBLS+32
CSFFIRST EQU   CSTBLS+36
CSNUMB   EQU   CSTBLS+42
CSBDATA  EQU   0
CHAINPTR EQU   CSBDATA
DAYTIME  EQU   CSBDATA+4
CSBDAY   EQU   DAYTIME
CSBYR    EQU   CSBDAY
CSBDATE  EQU   CSBDAY+2
CSBTIME  EQU   DAYTIME+4
CSBHR    EQU   CSBTIME
CSBMIN   EQU   CSBTIME+1
CSBSEC   EQU   CSBTIME+2
CSBREC   EQU   CSBDATA+16
CSB1CNTS EQU   CSBREC+2
CSFDATA  EQU   0
CSFCHAIN EQU   CSFDATA
CSFDTIM  EQU   CSFDATA+4
CSFMSC   EQU   CSFDATA+12
CSFREC   EQU   CSFDATA+16
CSFSNS2  EQU   CSFREC+1
CSFBFRBT EQU   CSFSNS2
CSBWORK  EQU   0
CSTPTRS  EQU   CSBWORK+20
I        EQU   CSBWORK+38
SUMU     EQU   CSBWORK+40
SUMX     EQU   CSBWORK+44
SUMY     EQU   CSBWORK+48
SUMS     EQU   CSBWORK+52
FRETCODE EQU   CSBWORK+76
BRETCODE EQU   CSBWORK+78
CNTINDX  EQU   CSBWORK+80
ACCTOT   EQU   CSBWORK+82
PAGECNT  EQU   CSBWORK+84
HOLDDBL  EQU   CSBWORK+86
HOLD2    EQU   HOLDDBL+4
HOLD     EQU   HOLD2+1
KWORK    EQU   CSBWORK+94
CWORK    EQU   KWORK
GROUPS   EQU   CSBWORK+96
REMNDR   EQU   CSBWORK+98
GINDEX   EQU   CSBWORK+100
J        EQU   CSBWORK+102
K        EQU   CSBWORK+104
L        EQU   CSBWORK+106
M        EQU   CSBWORK+108
OUTPUT   EQU   0
CNTRL    EQU   OUTPUT
HEADING  EQU   OUTPUT+1
ACCNO    EQU   HEADING+60
RECDCNT  EQU   HEADING+76
CSNUMBER EQU   HEADING+103
OUTSKEL  EQU   0
OUSAGE   EQU   OUTSKEL
OCNT13   EQU   OUTSKEL+96
OCNT14   EQU   OUTSKEL+104
OUTCNTS  EQU   0
OCNT0    EQU   OUTCNTS
OCNT1    EQU   OUTCNTS+1
SOUTSKEL EQU   0
SUSAGE   EQU   SOUTSKEL+2
SCNTS    EQU   SOUTSKEL+8
SX       EQU   SOUTSKEL+88
SY       EQU   SOUTSKEL+96
SOUTCNTS EQU   0
SCNT     EQU   SOUTCNTS
FOUTSKEL EQU   0
FSSID    EQU   FOUTSKEL
FSTIME   EQU   FOUTSKEL+5
FOUTBYTS EQU   0
OBYTE1   EQU   FOUTBYTS
OBYTE2   EQU   FOUTBYTS+1
FSSKEL   EQU   0
SNS1     EQU   FSSKEL
FACCSKEL EQU   0
FACC     EQU   FACCSKEL+16
FMT3CNTS EQU   0
USAGEKT  EQU   FMT3CNTS
USAGECT  EQU   USAGEKT
COUNT12  EQU   FMT3CNTS+2
COUNTDE  EQU   FMT3CNTS+8
XKOUNT   EQU   COUNTDE
XYCOUNT  EQU   XKOUNT
XCOUNT   EQU   XKOUNT+1
YCOUNT   EQU   COUNTDE+2
TIMEFLD  EQU   0
ODAY     EQU   TIMEFLD
OSLASH   EQU   TIMEFLD+3
OYR      EQU   TIMEFLD+4
OHR      EQU   TIMEFLD+7
OCOL1    EQU   TIMEFLD+9
OMIN     EQU   TIMEFLD+10
OCOL2    EQU   TIMEFLD+12
OSEC     EQU   TIMEFLD+13
ODASH    EQU   TIMEFLD+15
WORKPTR  EQU   0
*                                      START UNREFERENCED COMPONENTS
OBLANK   EQU   TIMEFLD+6
COUNTBC  EQU   FMT3CNTS+7
COUNT9A  EQU   FMT3CNTS+6
COUNT78  EQU   FMT3CNTS+5
COUNT56  EQU   FMT3CNTS+4
COUNT34  EQU   FMT3CNTS+3
USAGCNT  EQU   USAGECT
USAGBITS EQU   USAGECT
FBLK6    EQU   FACCSKEL+21
FBLK5    EQU   FACCSKEL+15
FCDTIME  EQU   FACCSKEL
FSBYTES  EQU   FOUTSKEL+21
FBLK2    EQU   FOUTSKEL+20
FBLK1    EQU   FOUTSKEL+3
SBLK6    EQU   SOUTSKEL+93
SBLK5    EQU   SOUTSKEL+84
SBLK4    EQU   SOUTSKEL+7
@NM00005 EQU   SOUTSKEL
OBLK3    EQU   OUTSKEL+101
OBLK2    EQU   OUTSKEL+91
OCNTS    EQU   OUTSKEL+8
OBLK1    EQU   OUTSKEL+5
TEXT4    EQU   HEADING+104
TEXT3    EQU   HEADING+81
TEXT2    EQU   HEADING+65
TEXT1    EQU   HEADING
FILLXX   EQU   CSBWORK+110
HOLD1    EQU   HOLD2
HOLD0    EQU   HOLDDBL
NBRWORK  EQU   CSBWORK+36
CURRADR  EQU   CSBWORK+16
STARTADR EQU   CSBWORK+12
PRECORD  EQU   CSBWORK+8
NRECORD  EQU   CSBWORK+4
LOGPTR   EQU   CSBWORK
CSFBYTES EQU   CSFREC+2
CSFBITS  EQU   CSFSNS2
CSFSNS1  EQU   CSFREC
CSFTIME  EQU   CSFDTIM+4
CSFDAY   EQU   CSFDTIM
CSBSNSBY EQU   CSBREC
CSBMSC   EQU   CSBDATA+12
CSBHSEC  EQU   CSBTIME+3
FILL2    EQU   CSTBLS+43
CSFCNT   EQU   CSTBLS+40
CSBCNT   EQU   CSTBLS+16
@NM00003 EQU   ISDAGHDR+26
BLOCKCNT EQU   ISDAGHDR+24
BLOCKID  EQU   ISDAGHDR+20
LASTPTR  EQU   ISDAGHDR+16
GET0LEN  EQU   GET0SPLN+1
GET0SPNO EQU   GET0SPLN
ENDPTR   EQU   ISDAGHDR+4
STARTPTR EQU   ISDAGHDR
CTRACE   EQU   ISDAPRMS+48
CGEN     EQU   ISDAPRMS+47
CDETAIL  EQU   ISDAPRMS+46
CPERIOD  EQU   ISDAPRMS+45
CPWR     EQU   CREPORTS+11
CAPRSUU  EQU   CREPORTS+10
CDRC     EQU   CREPORTS+9
CDAT     EQU   CREPORTS+8
CDCKTLX  EQU   CREPORTS+6
CEQC     EQU   CREPORTS+5
CFSC     EQU   CREPORTS+4
CDHEDHU  EQU   CREPORTS+3
CSUM     EQU   CREPORTS+2
CPAD     EQU   CREPORTS+1
CDCS     EQU   CREPORTS
CSERNO   EQU   CSERIAL+4
@NM00002 EQU   CSERIAL+3
CIBM     EQU   CSERIAL
CRATIO   EQU   ISDAPRMS+19
CSSID    EQU   CSSIDF
@NM00001 EQU   CSSIDF
CFSC34   EQU   CFSCONLY+2
CFSC12   EQU   CFSCONLY
CTYPE    EQU   ISDAPRMS+11
CENDDAY  EQU   CEND+2
CENDYEAR EQU   CEND
CSTDAY   EQU   CSTART+2
CSTYEAR  EQU   CSTART
CHISTIN  EQU   CINPUT+1
CLOGIN   EQU   CINPUT
PRTSA001 EQU   PRTDATD
SDATEMPS EQU   SDADATD+136
SDASA002 EQU   SDADATD+76
SDAPC001 EQU   SDADATD+72
SDASA001 EQU   SDADATD
LINE     EQU   OUTLINE+1
ANSI     EQU   OUTLINE
DUMPIDNO EQU   HEXPCALL+8
DUMPLEN  EQU   HEXPCALL+4
DUMPADDR EQU   HEXPCALL
GEN00PTR EQU   CVTPTRS0+92
CNFG0PTR EQU   CVTPTRS0+88
PWR00PTR EQU   CVTPTRS0+84
APR00PTR EQU   CVTPTRS0+80
DRC00PTR EQU   CVTPTRS0+76
DAT00PTR EQU   CVTPTRS0+72
DCK00PTR EQU   CVTPTRS0+64
EQC00PTR EQU   CVTPTRS0+60
FSC00PTR EQU   CVTPTRS0+56
DHE00PTR EQU   CVTPTRS0+52
SUM00PTR EQU   CVTPTRS0+48
PAD00PTR EQU   CVTPTRS0+44
DCS00PTR EQU   CVTPTRS0+40
LOG00PTR EQU   CVTPTRS0+36
HIST0PTR EQU   CVTPTRS0+32
PRT00PTR EQU   CVTPTRS0+28
GET00PTR EQU   CVTPTRS0+24
TYPE0PTR EQU   CVTPTRS0+20
PARM0PTR EQU   CVTPTRS0+16
SDA00PTR EQU   CVTPTRS0+12
SDATAPTR EQU   CVTPTRS0+4
DATAPTR  EQU   CVTPTRS0
*                                      END UNREFERENCED COMPONENTS
@RC00106 EQU   @RC00103
@ENDDATA EQU   *
         END   ISDACSB1,(C'PLS2114',0701,77354)
