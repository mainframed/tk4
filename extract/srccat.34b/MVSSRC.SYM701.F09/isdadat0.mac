         TITLE 'DATA HANDLING CHECKS BY DRC,DRD ACCUMULATOR            *
                        '
ISDADAT0 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(8)                                           01S0001
         DC    C'ISDADAT0'                                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         ISDAGSPC R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MVC   @PC00001(4),0(@01)                               01S0001
*                                                               01S0027
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF ISDADAT0 DECLARES                              @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0028
*                                                               01S0028
*   /*****************************************************************/
*   /*                                                               */
*   /* START OF ISDADAT0 MAIN PROGRAM                        @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0028
*   CVTPTR=WORKPTR;                 /* SAVE CALLING PARAMETER-PTR TO
*                                      SDACVT                @Y30LB50*/
         L     @05,@PC00001                                     01S0028
         L     CVTPTR,WORKPTR(,@05)                             01S0028
*   LPARMPTR=PARMPTR;               /* SET PTR TO SDA PARMS  @ZM30983*/
         L     LPARMPTR,PARMPTR(,CVTPTR)                        01S0029
*   RETRNREG=0;                     /* SET RETURN CODE REGISTER TO 0
*                                                            @Y30LB50*/
         SLR   @05,@05                                          01S0030
         LR    RETRNREG,@05                                     01S0030
*   IF DAT00PTR=0 THEN              /* IF DAT WORK POINTER IF SDACVT
*                                      IS 0, THIS IS THE INITIAL CALL
*                                                            @Y30LB50*/
         C     @05,DAT00PTR(,CVTPTR)                            01S0031
         BNE   @RF00031                                         01S0031
*                                                               02S0032
*   /*****************************************************************/
*   /*                                                               */
*   /* DATINIT IS USED TO OBTAIN AND INITIALIZE A WORKAREA FOR DAT   */
*   /* PROCESSING                                            @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0032
*   DO;                             /*                       @Y30LB50*/
*     RFY                                                       02S0033
*      (R0,                                                     02S0033
*       R1) RSTD;                   /*                       @Y30LB50*/
*     SPNO=DATSPNO;                 /* SUBPOOL NUMBER FOR DAT   02S0034
*                                      WORKAREA REQUEST      @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           02S0034
*     CORELEN=LENGTH(DATWORK);      /* LENGTH-WORKAREA FOR DAT  02S0035
*                                      PROCESSING            @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00275+1                     02S0035
*     R1=ADDR(WORKCALL);            /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0036
*     CALL ISDAGET1;                /* REQUEST WORKAREA      @Y30LB50*/
         L     @15,@CV00265                                     02S0037
         BALR  @14,@15                                          02S0037
*     RFY                                                       02S0038
*       R15 RSTD;                   /*                       @Y30LB50*/
*     RETRNREG=R15;                 /* SAVE RETURN REGISTER  @Y30LB50*/
         LR    RETRNREG,R15                                     02S0039
*     RFY                                                       02S0040
*      (R1,                                                     02S0040
*       R15) UNRSTD;                /*                       @Y30LB50*/
*     IF RETRNREG=0 THEN                                        02S0041
         LTR   RETRNREG,RETRNREG                                02S0041
         BNZ   @RF00041                                         02S0041
*       DO;                         /* CONTINUE IF WORKAREA OBTAINED
*                                                            @Y30LB50*/
*         DAT00PTR=COREADDR;        /* SET DAT WORK AREA PTR INTO
*                                      SDACVT                @Y30LB50*/
         L     @05,COREADDR(,CVTPTR)                            02S0043
         ST    @05,DAT00PTR(,CVTPTR)                            02S0043
*         DATPTR=COREADDR;          /* SET LOCAL POINTER TO DAT WORK
*                                      AREA                  @Y30LB50*/
         LR    DATPTR,@05                                       02S0044
*         DATWORK=''B;              /* ZERO THE WORKAREA     @Y30LB50*/
         XC    DATWORK(48,DATPTR),DATWORK(DATPTR)               02S0045
*       END;                        /*                       @Y30LB50*/
*     ELSE                          /* BAD RETURN FROM GET1  @ZM30983*/
*       CDAT='00'X;                 /* SET NO CALL FLAG      @ZM30983*/
         B     @RC00041                                         02S0047
@RF00041 MVI   CDAT(LPARMPTR),X'00'                             02S0047
*   END;                            /*                       @Y30LB50*/
*   ELSE                                                        01S0049
*     ;                             /*                       @Y30LB50*/
@RF00031 DS    0H                                               01S0050
*   IF RETRNREG=0 THEN                                          01S0050
@RC00031 LTR   RETRNREG,RETRNREG                                01S0050
         BNZ   @RF00050                                         01S0050
*     DO;                           /* IF WORKAREA WAS OBTAINED 01S0051
*                                                            @Y30LB50*/
*       DATPTR=DAT00PTR;            /* SET LOCAL POINTER TO DAT 01S0052
*                                      WORKAREA              @Y30LB50*/
         L     DATPTR,DAT00PTR(,CVTPTR)                         01S0052
*       SENSEPTR=SDATAPTR;          /* SAVE POINTER TO FMT4 SENSE
*                                      DATA INPUT            @Y30LB50*/
         L     SENSEPTR,SDATAPTR(,CVTPTR)                       01S0053
*       IF(SSIDTYPE=DRCSSID)×(SSIDTYPE=DRDSSID) THEN            01S0054
         TM    SSIDTYPE(SENSEPTR),B'00000100'                   01S0054
         BNO   @GL00001                                         01S0054
         TM    SSIDTYPE(SENSEPTR),B'00001011'                   01S0054
         BZ    @RT00054                                         01S0054
@GL00001 TM    SSIDTYPE(SENSEPTR),B'00000010'                   01S0054
         BNO   @RF00054                                         01S0054
         TM    SSIDTYPE(SENSEPTR),B'00001101'                   01S0054
         BNZ   @RF00054                                         01S0054
@RT00054 DS    0H                                               01S0055
*         DO;                       /* PROCESS DRC SSID OR DRD SSID
*                                      ONLY                  @Y30LB50*/
*                                                               02S0056
*   /*****************************************************************/
*   /*                                                               */
*   /* DATCSCHK IS CALLED TO INITIALIZE THE POINTER TO THE           */
*   /* ACCUMULATOR BLOCK FOR THE CARTRIDGE STORE OF THE CURRENT      */
*   /* INPUT. IT WILL ALSO CALL ISDAGET1 TO OBTAIN THE ACCUMULATOR   */
*   /* BLOCK THE FIRST TIME A CARTRIDGE STORE IS ENCOUNTERED @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0056
*   CSNUMB=SUBSYSID;                /* ISOLATE CARTRIDGE STORE OF
*                                      INPUT                 @Y30LB50*/
         MVC   CSNUMB(2,DATPTR),SUBSYSID(SENSEPTR)              02S0056
*   CSNUMB=CSNUMB&'00F0'X;          /*                       @Y30LB50*/
         NC    CSNUMB(2,DATPTR),@CB00271                        02S0057
*   SRA(CSNUMB(2),4);               /*                       @Y30LB50*/
         SLR   @05,@05                                          02S0058
         IC    @05,CSNUMB+1(,DATPTR)                            02S0058
         SRA   @05,4                                            02S0058
         STC   @05,CSNUMB+1(,DATPTR)                            02S0058
*   CSNUMB=CSNUMB+1;                /* CONVERT TO INDEX OF 1 TO 4
*                                                            @Y30LB50*/
         LA    @05,1                                            02S0059
         SLR   @01,@01                                          02S0059
         ICM   @01,3,CSNUMB(DATPTR)                             02S0059
         ALR   @05,@01                                          02S0059
         STH   @05,CSNUMB(,DATPTR)                              02S0059
*   CSPTR=CSPTRS(CSNUMB);           /* ACCUMULATOR ADDRESS FOR THIS
*                                      CS                    @Y30LB50*/
         SLA   @05,2                                            02S0060
         AL    @05,@CF00277                                     02S0060
         L     CSPTR,CSPTRS(@05,DATPTR)                         02S0060
*   IF CSPTR=0 THEN                                             02S0061
         LTR   CSPTR,CSPTR                                      02S0061
         BNZ   @RF00061                                         02S0061
*     DO;                           /* IF ADDRESS IS 0 , NO     02S0062
*                                      ACCUMULATOR HAS BEEN OBTAINED
*                                      FOR THIS CS PREVIOUSLY   02S0062
*                                                            @Y30LB50*/
*       SPNO=DATSPNO;               /* SUBPOOL NUMBER FOR DAT   02S0063
*                                      ACCUMULATOR           @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           02S0063
*       CORELEN=LENGTH(DATACCM);    /* LENGTH OF BLOCK NEEDED   02S0064
*                                                            @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00276+1                     02S0064
*       RFY                                                     02S0065
*         R1 RSTD;                  /*                       @Y30LB50*/
*       R1=ADDR(WORKCALL);          /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0066
*       CALL ISDAGET1;              /* REQUEST ACCUMULATOR BLOCK
*                                                            @Y30LB50*/
         L     @15,@CV00265                                     02S0067
         BALR  @14,@15                                          02S0067
*       RFY                                                     02S0068
*         R1 UNRSTD;                /*                       @Y30LB50*/
*       RFY                                                     02S0069
*         R15 RSTD;                 /*                       @Y30LB50*/
*       RETRNREG=R15;               /* SAVE RETURN CODE FROM ISDAGET1
*                                                            @Y30LB50*/
         LR    RETRNREG,R15                                     02S0070
*       RFY                                                     02S0071
*         R15 UNRSTD;               /*                       @Y30LB50*/
*       IF RETRNREG=0 THEN                                      02S0072
         LTR   RETRNREG,RETRNREG                                02S0072
         BNZ   @RF00072                                         02S0072
*         DO;                       /* CONTINUE IF BLOCK OBTAINED
*                                                            @Y30LB50*/
*           CSPTR=COREADDR;         /* SAVE PTR TO ACCUMULATOR IN
*                                      WORK AREA             @Y30LB50*/
         L     CSPTR,COREADDR(,CVTPTR)                          02S0074
*           CSPTRS(CSNUMB)=CSPTR;   /*                       @Y30LB50*/
         SLR   @05,@05                                          02S0075
         ICM   @05,3,CSNUMB(DATPTR)                             02S0075
         SLA   @05,2                                            02S0075
         AL    @05,@CF00277                                     02S0075
         ST    CSPTR,CSPTRS(@05,DATPTR)                         02S0075
*           BYTE0=''B;              /* ZERO THE ACCUMULATOR  @Y30LB50*/
         XC    BYTE0(168,CSPTR),BYTE0(CSPTR)                    02S0076
*           BYTEBIT=''B;            /*                       @Y30LB50*/
         SLR   @05,@05                                          02S0077
         STH   @05,BYTEBIT(,CSPTR)                              02S0077
*           BYTEBIT3=''B;           /*                       @Y30LB50*/
         XC    BYTEBIT3(22,CSPTR),BYTEBIT3(CSPTR)               02S0078
*           BYTE1=''B;              /*                       @Y30LB50*/
         XC    BYTE1(192,CSPTR),BYTE1(CSPTR)                    02S0079
*           BYTE2=''B;              /*                       @Y30LB50*/
         XC    BYTE2(192,CSPTR),BYTE2(CSPTR)                    02S0080
*           BYTE3=''B;              /*                       @Y30LB50*/
         XC    BYTE3(192,CSPTR),BYTE3(CSPTR)                    02S0081
*           BYTE4=''B;              /*                       @Y30LB50*/
         XC    BYTE4(192,CSPTR),BYTE4(CSPTR)                    02S0082
*         END;                      /*                       @Y30LB50*/
*       ELSE                                                    02S0084
*         ;                         /*                       @Y30LB50*/
@RF00072 DS    0H                                               02S0085
*     END;                          /*                       @Y30LB50*/
*   ELSE                                                        02S0086
*     ;                             /*                       @Y30LB50*/
@RF00061 DS    0H                                               02S0087
*           IF RETRNREG=0 THEN      /* IF REQUESTED ACCUMULATOR COULD
*                                      NOT BE OBTAINED, DO NOT  01S0087
*                                      PROCESS FURTHUR       @Y30LB50*/
         LTR   RETRNREG,RETRNREG                                01S0087
         BNZ   @RF00087                                         01S0087
*                                                               02S0088
*   /*****************************************************************/
*   /*                                                               */
*   /* DATCNTS IS USED TO MAINTAIN RUNNING COUNTS OF HOW MANY TIMES  */
*   /* BITS IN MSC FORMAT 4 SENSE BYTES 4, 20, 21 AND 22 ARE         */
*   /* ENCOUNTERED SET                                       @Y30LB50*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0088
*   DO;                             /*                       @Y30LB50*/
*     SSIDWORK=SUBSYSID;            /* ISOLATE THE DRC ID OR DRD ID
*                                                            @Y30LB50*/
         MVC   SSIDWORK(2,DATPTR),SUBSYSID(SENSEPTR)            02S0089
*     SSIDWORK=SSIDWORK&'000F'X;    /*                       @Y30LB50*/
         NC    SSIDWORK(2,DATPTR),@CB00273                      02S0090
*     IF SSIDTYPE=DRCSSID THEN                                  02S0091
         TM    SSIDTYPE(SENSEPTR),B'00000100'                   02S0091
         BNO   @RF00091                                         02S0091
         TM    SSIDTYPE(SENSEPTR),B'00001011'                   02S0091
         BNZ   @RF00091                                         02S0091
*       SSIDWORK=SSIDWORK*2;        /* DRC COUNTS ARE FIRST IN THE
*                                      ACCUMULATOR           @Y30LB50*/
         SLR   @01,@01                                          02S0092
         ICM   @01,3,SSIDWORK(DATPTR)                           02S0092
         ALR   @01,@01                                          02S0092
         STH   @01,SSIDWORK(,DATPTR)                            02S0092
*     ELSE                                                      02S0093
*       SSIDWORK=(SSIDWORK+MAXDRC)*2;/* DRD COUNTS FOLLOW THE DRC
*                                      COUNTS IN THE ACCUMULATOR
*                                                            @Y30LB50*/
         B     @RC00091                                         02S0093
@RF00091 LA    @01,4                                            02S0093
         SLR   @15,@15                                          02S0093
         ICM   @15,3,SSIDWORK(DATPTR)                           02S0093
         ALR   @01,@15                                          02S0093
         ALR   @01,@01                                          02S0093
         STH   @01,SSIDWORK(,DATPTR)                            02S0093
*     CSPTR=CSPTR+SSIDWORK;         /* SPACE UP IN ACCUMULATOR FOR
*                                      THIS INPUT            @Y30LB50*/
@RC00091 SLR   @01,@01                                          02S0094
         ICM   @01,3,SSIDWORK(DATPTR)                           02S0094
         ALR   CSPTR,@01                                        02S0094
*     WORK1(1)=STATUS14;            /* COMPACT SENSE BYTES TO BE
*                                      EXAMINED              @Y30LB50*/
         MVC   WORK1(1,DATPTR),STATUS14(SENSEPTR)               02S0095
*     WORK1(2)=STATUS24;            /*                       @Y30LB50*/
         MVC   WORK1+1(1,DATPTR),STATUS24(SENSEPTR)             02S0096
*     WORK1(3)=BYTE9F4;             /*                       @Y30LB50*/
         MVC   WORK1+2(1,DATPTR),BYTE9F4(SENSEPTR)              02S0097
*     WORK1(4)=BYTE10F4;            /*                       @Y30LB50*/
         MVC   WORK1+3(1,DATPTR),BYTE10F4(SENSEPTR)             02S0098
*     WORK1(5)=BYTE11F4;            /*                       @Y30LB50*/
         MVC   WORK1+4(1,DATPTR),BYTE11F4(SENSEPTR)             02S0099
*     DO I=1 TO MAXBITS;            /* EXAMINE EACH BIT OF DAT BYTES
*                                                            @Y30LB50*/
         LA    @03,1                                            02S0100
         STH   @03,I(,DATPTR)                                   02S0100
@DL00100 DS    0H                                               02S0101
*       IF CURRBIT=ON THEN                                      02S0101
         TM    CURRBIT(DATPTR),B'10000000'                      02S0101
         BNO   @RF00101                                         02S0101
*         BYTEBIT=BYTEBIT+1;        /* IF BIT IS SET, INCREMENT THE
*                                      BIT COUNT FOR THIS DRC OR DRC
*                                                            @Y30LB50*/
         LA    @03,1                                            02S0102
         AH    @03,BYTEBIT(,CSPTR)                              02S0102
         STH   @03,BYTEBIT(,CSPTR)                              02S0102
*       ELSE                                                    02S0103
*         ;                         /*                       @Y30LB50*/
@RF00101 DS    0H                                               02S0104
*       SLDL(WORK1,1);              /* POSITION NEXT BIT     @Y30LB50*/
         LM    @04,@05,WORK1(DATPTR)                            02S0104
         SLDL  @04,1                                            02S0104
         STM   @04,@05,WORK1(DATPTR)                            02S0104
*       CSPTR=CSPTR+LENGTH(BIT0);   /* UP POINTER TO BIT COUNT FOR
*                                      NEXT BIT FOR THIS DRC OR DRD
*                                                            @Y30LB50*/
         AH    CSPTR,@CH00072                                   02S0105
*     END;                          /*                       @Y30LB50*/
         LA    @03,1                                            02S0106
         AH    @03,I(,DATPTR)                                   02S0106
         STH   @03,I(,DATPTR)                                   02S0106
         CH    @03,@CH00097                                     02S0106
         BNH   @DL00100                                         02S0106
*   END;                            /*                       @Y30LB50*/
*           ELSE                                                01S0108
*                                                               02S0108
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEBLKS WILL RELEASE ALL DYNAMIC STORAGE VIA THE ISDAFREE    */
*   /* ROUTINE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0108
*   DO;                             /*                       @Y30LB50*/
         B     @RC00087                                         02S0108
@RF00087 DS    0H                                               02S0109
*     RFY                                                       02S0109
*       R1 RSTD;                    /*                       @Y30LB50*/
*     DO I=1 TO MAXCS;              /* RELEASE BLOCKS FOR ALL CS
*                                                            @Y30LB50*/
         LA    @05,1                                            02S0110
         STH   @05,I(,DATPTR)                                   02S0110
@DL00110 DS    0H                                               02S0111
*       COREADDR=CSPTRS(I);         /* ADDR OF ACCUM FOR THIS CS
*                                                            @Y30LB50*/
         LH    @05,I(,DATPTR)                                   02S0111
         SLA   @05,2                                            02S0111
         AL    @05,@CF00277                                     02S0111
         L     @05,CSPTRS(@05,DATPTR)                           02S0111
         ST    @05,COREADDR(,CVTPTR)                            02S0111
*       IF COREADDR^=0 THEN                                     02S0112
         LTR   @05,@05                                          02S0112
         BZ    @RF00112                                         02S0112
*         DO;                       /* RELEASE PROCESSING IF ACCUM
*                                      OBTAINED              @Y30LB50*/
*           SPNO=DATSPNO;           /* SUBPOOL NUMBER OF DAT ACCUM
*                                                            @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           02S0114
*           CORELEN=LENGTH(DATACCM);/* LENGTH OF DAT ACCUM   @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00276+1                     02S0115
*           R1=ADDR(WORKCALL);      /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0116
*           CALL ISDAFREE;          /* FREE ACCUM BLOCK      @Y30LB50*/
         L     @15,@CV00266                                     02S0117
         BALR  @14,@15                                          02S0117
*         END;                      /*                       @Y30LB50*/
*           ELSE                                                02S0119
*             ;                     /*                       @Y30LB50*/
@RF00112 DS    0H                                               02S0120
*         END;                      /*                       @Y30LB50*/
         LA    @05,1                                            02S0120
         AH    @05,I(,DATPTR)                                   02S0120
         STH   @05,I(,DATPTR)                                   02S0120
         CH    @05,@CH00104                                     02S0120
         BNH   @DL00110                                         02S0120
*       CDAT='00'X;                 /* SHUT OFF DAT REPORT CONTROL
*                                      FLAG                  @Y30LB50*/
         MVI   CDAT(LPARMPTR),X'00'                             02S0121
*       R1=ADDR(WORKCALL);          /*                       @Y30LB50*/
         LA    R1,WORKCALL(,CVTPTR)                             02S0122
*       CORELEN=LENGTH(DATWORK);    /* LENGTH OF WORKAREA    @Y30LB50*/
         MVC   CORELEN(3,CVTPTR),@CF00275+1                     02S0123
*       SPNO=DATSPNO;               /* SUBPOOL NUMBER OF WORKAREA
*                                                            @Y30LB50*/
         MVC   SPNO(1,CVTPTR),DATSPNO                           02S0124
*       COREADDR=DATPTR;            /* ADDR OF WORKAREA      @Y30LB50*/
         ST    DATPTR,COREADDR(,CVTPTR)                         02S0125
*       CALL ISDAFREE;              /* FREE DAT WORKAREA     @Y30LB50*/
         L     @15,@CV00266                                     02S0126
         BALR  @14,@15                                          02S0126
*       DAT00PTR=0;                 /* SET WORK PTR TO 0 FOR ISDASDA0
*                                                            @Y30LB50*/
         SLR   @03,@03                                          02S0127
         ST    @03,DAT00PTR(,CVTPTR)                            02S0127
*       RFY                                                     02S0128
*         R1 UNRSTD;                /*                       @Y30LB50*/
*     END;                          /*                       @Y30LB50*/
*         END;                      /*                       @Y30LB50*/
*       ELSE                                                    01S0131
*         ;                         /* CANNOT USE 4B WITH SA SSID
*                                                            @ZM31105*/
@RF00054 DS    0H                                               01S0132
*     END;                          /*                       @Y30LB50*/
*   ELSE                                                        01S0133
*     ;                             /*                       @Y30LB50*/
@RF00050 DS    0H                                               01S0134
*   RETURN CODE(RETRNREG);          /*                       @Y30LB50*/
@RC00050 L     @13,4(,@13)                                      01S0134
         L     @00,@SIZDATD                                     01S0134
         LR    @01,@11                                          01S0134
         ISDAFSPC R,LV=(0),A=(1)
         LR    @15,@09                                          01S0134
         L     @14,12(,@13)                                     01S0134
         LM    @00,@12,20(@13)                                  01S0134
         BR    @14                                              01S0134
*   END ISDADAT0                    /*                       @Y30LB50*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ISDACVT )                                        *
*/*%INCLUDE SYSLIB  (ISDAMSCS)                                        *
*/*%INCLUDE SYSLIB  (ISDAMSC4)                                        *
*/*%INCLUDE SYSLIB  (ISDAPRMS)                                        *
*/*%INCLUDE SYSLIB  (ISDADAT5)                                        *
*/*%INCLUDE SYSUT5  (DAT0CNST)                                        *
*/*%INCLUDE SYSUT5  (DATINIT )                                        *
*/*%INCLUDE SYSUT5  (DATCSCHK)                                        *
*/*%INCLUDE SYSUT5  (DATCNTS )                                        *
*/*%INCLUDE SYSUT5  (FREEBLKS)                                        *
*;                                                              01S0135
@DATA    DS    0H
@CH00104 DC    H'4'
@CH00072 DC    H'24'
@CH00097 DC    H'40'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
ISDADAT0 CSECT
         DS    0F
@CF00275 DC    F'48'
@CF00276 DC    F'960'
@CF00277 DC    F'-4'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISDADAT0 CSECT
         NOPR  ((@ENDDATD-@DATD)/161*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00265 DC    V(ISDAGET1)
@CV00266 DC    V(ISDAFREE)
         DS    0D
@CB00271 DC    X'00F0'
@CB00273 DC    X'000F'
DATSPNO  DC    X'00'
PATCH    DS    CL50
         ORG   PATCH
@NM00007 DC    50X'00'
         ORG   PATCH+50
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LPARMPTR EQU   @04
SENSEPTR EQU   @03
CVTPTR   EQU   @02
DATPTR   EQU   @10
CSPTR    EQU   @08
RETRNREG EQU   @09
R1       EQU   @01
R0       EQU   @00
R15      EQU   @15
ISDACVT  EQU   0
CVTPTRS0 EQU   ISDACVT
SDATAPTR EQU   CVTPTRS0+4
PARMPTR  EQU   CVTPTRS0+8
DAT00PTR EQU   CVTPTRS0+72
WORKCALL EQU   CVTPTRS0+96
GET0CALL EQU   ISDACVT+100
SPNOLEN  EQU   GET0CALL
SPNO     EQU   SPNOLEN
CORELEN  EQU   SPNOLEN+1
COREADDR EQU   GET0CALL+4
HEXPCALL EQU   ISDACVT+108
PRT0CALL EQU   ISDACVT+120
OUTLINE  EQU   PRT0CALL
SDADATD  EQU   ISDACVT+256
PRTDATD  EQU   ISDACVT+416
ISDAMSCS EQU   0
SUBSYSID EQU   ISDAMSCS+1
SSID     EQU   SUBSYSID
SSIDTYPE EQU   SSID
SUBSENSE EQU   ISDAMSCS+4
SUBFMTMG EQU   SUBSENSE+7
ISDAMSC4 EQU   4
STATUS14 EQU   ISDAMSC4
STATUS24 EQU   ISDAMSC4+1
FMTMSG4  EQU   ISDAMSC4+7
SASENSE  EQU   ISDAMSC4+8
BYTE9F4  EQU   SASENSE+1
BYTE10F4 EQU   SASENSE+2
BYTE11F4 EQU   SASENSE+3
ISDAPRMS EQU   0
CINPUT   EQU   ISDAPRMS
CSTART   EQU   ISDAPRMS+2
CEND     EQU   ISDAPRMS+6
CFSCONLY EQU   ISDAPRMS+13
CSSIDF   EQU   ISDAPRMS+17
CSERIAL  EQU   ISDAPRMS+21
CREPORTS EQU   ISDAPRMS+33
CDAT     EQU   CREPORTS+8
DATWORK  EQU   0
CSPTRS   EQU   DATWORK
WORK1    EQU   DATWORK+20
WORK2    EQU   WORK1
CURRBIT  EQU   WORK2
I        EQU   DATWORK+28
HOLDDBL  EQU   DATWORK+40
HOLD     EQU   HOLDDBL+4
HOLD1    EQU   HOLD+1
CSNUMB   EQU   HOLD1
SSIDWORK EQU   CSNUMB
DATACCM  EQU   0
BYTEBIT  EQU   DATACCM
BYTEBIT3 EQU   DATACCM+2
BYTE0    EQU   DATACCM+24
BIT0     EQU   BYTE0
BYTE1    EQU   DATACCM+192
BYTE2    EQU   DATACCM+384
BYTE3    EQU   DATACCM+576
BYTE4    EQU   DATACCM+768
WORKPTR  EQU   0
*                                      START UNREFERENCED COMPONENTS
BITN     EQU   BYTE0+24
XXX      EQU   HOLD1+2
HOLD2    EQU   HOLD
HOLD0    EQU   HOLDDBL
LOOPEND  EQU   DATWORK+38
M        EQU   DATWORK+36
L        EQU   DATWORK+34
K        EQU   DATWORK+32
J        EQU   DATWORK+30
WORK3    EQU   WORK1+1
RESTBITS EQU   WORK2
TSUM     EQU   DATWORK+16
CTRACE   EQU   ISDAPRMS+48
CGEN     EQU   ISDAPRMS+47
CDETAIL  EQU   ISDAPRMS+46
CPERIOD  EQU   ISDAPRMS+45
CPWR     EQU   CREPORTS+11
CAPRSUU  EQU   CREPORTS+10
CDRC     EQU   CREPORTS+9
CCSBCSF  EQU   CREPORTS+7
CDCKTLX  EQU   CREPORTS+6
CEQC     EQU   CREPORTS+5
CFSC     EQU   CREPORTS+4
CDHEDHU  EQU   CREPORTS+3
CSUM     EQU   CREPORTS+2
CPAD     EQU   CREPORTS+1
CDCS     EQU   CREPORTS
CSERNO   EQU   CSERIAL+4
@NM00006 EQU   CSERIAL+3
CIBM     EQU   CSERIAL
CRATIO   EQU   ISDAPRMS+19
CSSID    EQU   CSSIDF
@NM00005 EQU   CSSIDF
CFSC34   EQU   CFSCONLY+2
CFSC12   EQU   CFSCONLY
CTYPE    EQU   ISDAPRMS+11
CSUMMARY EQU   ISDAPRMS+10
CENDDAY  EQU   CEND+2
CENDYEAR EQU   CEND
CSTDAY   EQU   CSTART+2
CSTYEAR  EQU   CSTART
CHISTIN  EQU   CINPUT+1
CLOGIN   EQU   CINPUT
BYTE27F4 EQU   SASENSE+19
BYTE26F4 EQU   SASENSE+18
BYTE25F4 EQU   SASENSE+17
BYTE24F4 EQU   SASENSE+16
FSCFMT4  EQU   SASENSE+14
BYTE21F4 EQU   SASENSE+13
BYTE20F4 EQU   SASENSE+12
BYTE19F4 EQU   SASENSE+11
BYTE18F4 EQU   SASENSE+10
BYTE17F4 EQU   SASENSE+9
BYTE16F4 EQU   SASENSE+8
BYTE15F4 EQU   SASENSE+7
BYTE14F4 EQU   SASENSE+6
BYTE13F4 EQU   SASENSE+5
BYTE12F4 EQU   SASENSE+4
BYTE8F4  EQU   SASENSE
MSGCODE4 EQU   FMTMSG4
SUBFMTN4 EQU   FMTMSG4
LOWADDF4 EQU   ISDAMSC4+6
RETRYF4  EQU   ISDAMSC4+5
@NM00004 EQU   ISDAMSC4+4
CMDERRF4 EQU   ISDAMSC4+3
CHADDRF4 EQU   ISDAMSC4+2
SANOMSCD EQU   SUBSENSE+27
RCYLMSCD EQU   SUBSENSE+25
RUAMSCD  EQU   SUBSENSE+24
MSCFSC   EQU   SUBSENSE+22
@NM00003 EQU   SUBSENSE+21
RUADASD  EQU   SUBSENSE+20
DASDFSC  EQU   SUBSENSE+18
@NM00002 EQU   SUBSENSE+8
MSGCODEN EQU   SUBFMTMG
SUBFMTNO EQU   SUBFMTMG
SALOWAD2 EQU   SUBSENSE+6
SARETRY  EQU   SUBSENSE+5
@NM00001 EQU   SUBSENSE+4
DASDFMTN EQU   SUBSENSE+3
SALOWADD EQU   SUBSENSE+2
SUBSTAT5 EQU   SUBSENSE+1
SUBSTAT4 EQU   SUBSENSE
FORMATNO EQU   ISDAMSCS+3
SSIDDEVT EQU   SSID+1
SSIDLIBN EQU   SSID+1
SSIDFLAG EQU   SUBSYSID
STATUS   EQU   ISDAMSCS
PRTSA001 EQU   PRTDATD
SDATEMPS EQU   SDADATD+136
SDASA002 EQU   SDADATD+76
SDAPC001 EQU   SDADATD+72
SDASA001 EQU   SDADATD
SDARPTID EQU   PRT0CALL+133
LINE     EQU   OUTLINE+1
ANSI     EQU   OUTLINE
DUMPIDNO EQU   HEXPCALL+8
DUMPLEN  EQU   HEXPCALL+4
DUMPADDR EQU   HEXPCALL
GEN00PTR EQU   CVTPTRS0+92
CNFG0PTR EQU   CVTPTRS0+88
PWR00PTR EQU   CVTPTRS0+84
APR00PTR EQU   CVTPTRS0+80
DRC00PTR EQU   CVTPTRS0+76
CSB00PTR EQU   CVTPTRS0+68
DCK00PTR EQU   CVTPTRS0+64
EQC00PTR EQU   CVTPTRS0+60
FSC00PTR EQU   CVTPTRS0+56
DHE00PTR EQU   CVTPTRS0+52
SUM00PTR EQU   CVTPTRS0+48
PAD00PTR EQU   CVTPTRS0+44
DCS00PTR EQU   CVTPTRS0+40
LOG00PTR EQU   CVTPTRS0+36
HIST0PTR EQU   CVTPTRS0+32
PRT00PTR EQU   CVTPTRS0+28
GET00PTR EQU   CVTPTRS0+24
TYPE0PTR EQU   CVTPTRS0+20
PARM0PTR EQU   CVTPTRS0+16
SDA00PTR EQU   CVTPTRS0+12
DATAPTR  EQU   CVTPTRS0
*                                      END UNREFERENCED COMPONENTS
@RC00041 EQU   @RC00031
@RC00054 EQU   @RC00050
@RC00087 EQU   @RC00054
@ENDDATA EQU   *
         END   ISDADAT0,(C'PLS2226',0603,75312)
