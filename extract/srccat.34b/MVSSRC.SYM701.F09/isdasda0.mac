         TITLE 'SDA CONTROL PROGRAM                                    *
                        '
ISDASDA0 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'ISDASDA0  78.044'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  LA    @12,4095(,@11)                                   01S0001
         USING @PSTART,@11                                      01S0001
         USING @PSTART+4095,@12                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                          01S0001
         USING @DATD,@10                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @10,8(,@13)                                      01S0001
         LR    @13,@10                                          01S0001
*   PARMSAVE=R1;                    /* SAVE REG 1            @Y30LB55*/
         LR    PARMSAVE,R1                                      01S0029
*   R0=LENGTH(SDAWORK);             /* LENGTH OF SDAWORK     @Y30LB55*/
         LA    R0,154                                           01S0030
*   GEN( GETMAIN R,LV=(0));         /* GETMAIN               @Y30LB55*/
          GETMAIN R,LV=(0)
*   SDAWKPTR=R1;                    /* SET ADDR TO WORKAREA  @Y30LB55*/
         LR    SDAWKPTR,R1                                      01S0032
*   R0=LENGTH(ISDACVT);             /* GET ISDACVT           @Y30LB55*/
         LA    R0,576                                           01S0033
*   GEN( GETMAIN R,LV=(0));         /* GETMAIN               @Y30LB55*/
          GETMAIN R,LV=(0)
*   CVTPTR=R1;                      /* SAVE ISDACVT ADDR     @Y30LB55*/
         LR    CVTPTR,R1                                        01S0035
*   R0=LENGTH(ISDAPRMS);            /* GET ISDAPRMS          @Y30LB55*/
         LA    R0,49                                            01S0036
*   GEN( GETMAIN R,LV=(0));         /* GETMAIN               @Y30LB55*/
          GETMAIN R,LV=(0)
*   LPARMPTR=R1;                    /* SAVE ISDAPRMS ADDR    @Y30LB55*/
         LR    LPARMPTR,R1                                      01S0038
*   RFY                                                         01S0039
*    (R0,                                                       01S0039
*     R1) UNRSTD;                   /* END GETMAIN           @Y30LB55*/
*                                                               01S0039
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE SDAWORK                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0040
*   SDAWORK=''B;                    /* ZERO SDA WORK AREA    @Y30LB55*/
         XC    SDAWORK(154,SDAWKPTR),SDAWORK(SDAWKPTR)          01S0040
*   HIGHDATE='0000000F'X;           /* SET HIGH DATE TO 0    @Y30LB55*/
         MVC   HIGHDATE(4,SDAWKPTR),@CB00911                    01S0041
*   LOWDATE='0999999F'X;            /* SET LOW DATE TO 999999@Y30LB55*/
         MVC   LOWDATE(4,SDAWKPTR),@CB00912                     01S0042
*   AHIGHDAT=HIGHDATE;              /* INIT ACTUAL HIGH DATE @Y30LB55*/
         MVC   AHIGHDAT(4,SDAWKPTR),HIGHDATE(SDAWKPTR)          01S0043
*   ALOWDATE=LOWDATE;               /* INIT ACTUAL LOW DATE  @Y30LB55*/
         MVC   ALOWDATE(4,SDAWKPTR),LOWDATE(SDAWKPTR)           01S0044
*   RFY                                                         01S0045
*     R1 RSTD;                      /* GET CURRENT DATE      @Y30LB55*/
*   GEN(TIME);                      /* ISSUE TIME MACRO      @Y30LB55*/
         TIME
*   TODAYDAT=R1;                    /* MOVE DATE INTO SDAWORK@Y30LB55*/
         ST    R1,TODAYDAT(,SDAWKPTR)                           01S0047
*   RFY                                                         01S0048
*     R1 UNRSTD;                    /* RELEASE REG 1         @Y30LB55*/
*                                                               01S0048
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE ISDACVT                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0049
*   CVTPTRS0=''B;                   /* ZERO POINTERS IN ISDACVT 01S0049
*                                                            @Y30LB55*/
         XC    CVTPTRS0(100,CVTPTR),CVTPTRS0(CVTPTR)            01S0049
*   WORKCALL=ADDR(WORKPTR);         /* SET CALL PTR FOR WORKPTR 01S0050
*                                                            @Y30LB55*/
         LA    @07,WORKPTR(,SDAWKPTR)                           01S0050
         ST    @07,WORKCALL(,CVTPTR)                            01S0050
*   SDA00PTR=SDAWKPTR;              /* SET ADDR TO WORKAREA  @Y30LB55*/
         ST    SDAWKPTR,SDA00PTR(,CVTPTR)                       01S0051
*   PARMPTR=LPARMPTR;               /* SET ISDACVT PTR TO ISDAPRMS
*                                                            @Y30LB55*/
         ST    LPARMPTR,PARMPTR(,CVTPTR)                        01S0052
*   WORKPTR=CVTPTR;                 /* SET PTR TO ISDACVT    @Y30LB55*/
         ST    CVTPTR,WORKPTR(,SDAWKPTR)                        01S0053
*   SDARPTID=''B;                   /* ZERO ID TO STOP MOVE  @ZM30730*/
         XC    SDARPTID(3,CVTPTR),SDARPTID(CVTPTR)              01S0054
*                                                               02S0055
*   /*****************************************************************/
*   /*                                                               */
*   /* REG 1 FIX TO PASS EXEC PARAMETERS TO ISDAPARM                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0055
*   PARMSAVE=VSR1PTR;               /* PARMSAVE=0(0,R1)      @ZA14729*/
         L     PARMSAVE,VSR1PTR(,PARMSAVE)                      02S0055
*   DO I=1 TO R1PARML;              /* LOOP THROUGH PARMS    @ZM31107*/
         LA    I,1                                              02S0056
         B     @DE00056                                         02S0056
@DL00056 DS    0H                                               02S0057
*     R1PARMC(I)=R1PARMC(I)×'40'X;  /* FOLD TO UPPER CASE    @ZM31107*/
         LR    @07,PARMSAVE                                     02S0057
         ALR   @07,I                                            02S0057
         OI    R1PARMC-1(@07),X'40'                             02S0057
*   END;                            /* END FOLD PARMS        @ZM31107*/
         AH    I,@CH00078                                       02S0058
@DE00056 CH    I,R1PARML(,PARMSAVE)                             02S0058
         BNH   @DL00056                                         02S0058
*/* END OF REG1FIX                                           @Y30LB55*/
*                                                               02S0059
*   PARM0PTR=PARMSAVE;              /* SAVE ADDR OF PARM FIELD  01S0059
*                                                            @Y30LB55*/
*                                                               01S0059
         ST    PARMSAVE,PARM0PTR(,CVTPTR)                       01S0059
*   /*****************************************************************/
*   /*                                                               */
*   /* OPEN SYSPRINT DATA SET                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0060
*   RFY                                                         01S0060
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0061
*   CALL ISDAPRTO;                  /* CALL OPEN ENTRY IN ISDAPRT0
*                                                            @Y30LB55*/
         L     @15,@CV00901                                     01S0062
         BALR  @14,@15                                          01S0062
*   RFY                                                         01S0063
*     (R1,                                                      01S0063
*      R15) RSTD;                                          /*@Y30LB55*/
*   RETCODE=R15;                                           /*@Y30LB55*/
         STH   R15,RETCODE(,SDAWKPTR)                           01S0064
*   RFY                                                         01S0065
*     R15 UNRSTD;                   /* SAVE RETURN CODE      @Y30LB55*/
*   IF RETCODE^=0 THEN              /* WAS OPEN SUCCESSFUL   @Y30LB55*/
*                                                               01S0066
         LH    @07,RETCODE(,SDAWKPTR)                           01S0066
         LTR   @07,@07                                          01S0066
         BZ    @RF00066                                         01S0066
*     /***************************************************************/
*     /*                                                             */
*     /* ABNORMAL EXIT FROM SDA. NO SYSPRINT DATA SET                */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0067
*     DO;                           /* NO. SDA CANNOT CONTINUE  01S0067
*                                      WITHOUT SYSPRINT      @Y30LB55*/
*       RETCODE=RETCODE+100;        /* ADD 100 TO ISDAPRTO RETCODE
*                                                            @Y30LB55*/
         AH    @07,@CH00914                                     01S0068
         STH   @07,RETCODE(,SDAWKPTR)                           01S0068
*       ANSI=LSKIP1;                /* SET 1 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0069
*       IF RETCODE=104 THEN         /* SYSPRINT NOT OPEN     @Y30LB55*/
         CH    @07,@CH00915                                     01S0070
         BNE   @RF00070                                         01S0070
*         LINE=ISDA0104;            /* YES, MOVE ISDA0104    @Y30LB55*/
         MVI   LINE+33(CVTPTR),C' '                             01S0071
         MVC   LINE+34(98,CVTPTR),LINE+33(CVTPTR)               01S0071
         MVC   LINE(33,CVTPTR),ISDA0104                         01S0071
*       ELSE                        /* NO                    @Y30LB55*/
*         IF RETCODE=124 THEN       /* NO SPACE              @Y30LB55*/
         B     @RC00070                                         01S0072
@RF00070 CLC   RETCODE(2,SDAWKPTR),@CH00916                     01S0072
         BNE   @RF00072                                         01S0072
*           LINE=ISDA0124;          /* YES, MOVE ISDA0124    @Y30LB55*/
         MVI   LINE+40(CVTPTR),C' '                             01S0073
         MVC   LINE+41(91,CVTPTR),LINE+40(CVTPTR)               01S0073
         MVC   LINE(40,CVTPTR),ISDA0124                         01S0073
*         ELSE                      /* WRITE ERROR ON SYSPRINT  01S0074
*                                                            @Y30LB55*/
*           LINE=ISDA0112;          /* MOVE ISDA0112         @Y30LB55*/
         B     @RC00072                                         01S0074
@RF00072 MVI   LINE+33(CVTPTR),C' '                             01S0074
         MVC   LINE+34(98,CVTPTR),LINE+33(CVTPTR)               01S0074
         MVC   LINE(33,CVTPTR),ISDA0112                         01S0074
*       RFY                                                     01S0075
*         R1 RSTD;                                         /*@Y30LB55*/
@RC00072 DS    0H                                               01S0075
@RC00070 DS    0H                                               01S0076
*       R1=ADDR(WORKCALL);          /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0076
*       CALL ISDATYPE;              /* WRITE ISDA0104 TO SYSTERM
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0077
         BALR  @14,@15                                          01S0077
*       RFY                                                     01S0078
*         R1 UNRSTD;                                       /*@Y30LB55*/
*       RETURN CODE(RETCODE);       /* RETURN TO VS WITH RETURN CODE
*                                      104                   @Y30LB55*/
         LH    @09,RETCODE(,SDAWKPTR)                           01S0079
         L     @13,4(,@13)                                      01S0079
         L     @00,@SIZDATD                                     01S0079
         LR    @01,@10                                          01S0079
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                          01S0079
         L     @14,12(,@13)                                     01S0079
         LM    @00,@12,20(@13)                                  01S0079
         BR    @14                                              01S0079
*     END;                          /* END NO SYSPRINT EXIT  @Y30LB55*/
*   ELSE                                                        01S0081
*     ;                             /* OPEN OK, CONTINUE     @Y30LB55*/
@RF00066 DS    0H                                               01S0082
*                                                               01S0082
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD SDA PAGE TITLE FOR INPUT PHASE                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0082
*   ANSI=LSKIP1;                    /* SET LINE SKIP         @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0082
*   LINE=SDAHEADL;                  /* MOVE LEFT HEADER      @Y30LB55*/
         MVI   LINE+20(CVTPTR),C' '                             01S0083
         MVC   LINE+21(111,CVTPTR),LINE+20(CVTPTR)              01S0083
         MVC   LINE(20,CVTPTR),SDAHEADL                         01S0083
*   VTITLE=SDAVERNO;                /* MOVE SDA VERSION NO.  @Y30LB55*/
         MVC   VTITLE(12,CVTPTR),SDAVERNO                       01S0084
*   MTITLE=SDAHEADI;                /* MOVE MIDDLE HEADER FOR INPUT
*                                                            @Y30LB55*/
         MVC   MTITLE(26,CVTPTR),SDAHEADI                       01S0085
*   RTITLE=SDAHEADR;                /* MOVE RIGHT HEADER     @Y30LB55*/
         MVC   RTITLE(8,CVTPTR),SDAHEADR                        01S0086
*   RFY                                                         01S0087
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0088
*   CALL ISDAPRTH;                  /* PASS HEADER TO ISDAPRT0  01S0089
*                                                            @Y30LB55*/
         L     @15,@CV00902                                     01S0089
         BALR  @14,@15                                          01S0089
*   CALL ISDAPRT0;                  /* PRINT SDAHEADR        @Y30LB55*/
         L     @15,@CV00900                                     01S0090
         BALR  @14,@15                                          01S0090
*   RFY                                                         01S0091
*     R1 UNRSTD;                                           /*@Y30LB55*/
*                                                               01S0092
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL ISDAPARM TO BUILD ISDAPRMS. IF ISDAPARM RETURN CODE IS   */
*   /* NOT ZERO, SDA WILL ABORT. CALL ISDAOPT0 TO PRINT SDA OPTIONS. */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0092
*   RFY                                                         01S0092
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0093
*   CALL ISDAPARM;                  /* (WORKPTR) SETUP ISDAPRMS 01S0094
*                                                            @Y30LB55*/
         L     @15,@CV00896                                     01S0094
         BALR  @14,@15                                          01S0094
*   RFY                                                         01S0095
*     R15 RSTD;                                            /*@Y30LB55*/
*   RETCODE=R15;                    /* SAVE RETURN CODE      @Y30LB55*/
         STH   R15,RETCODE(,SDAWKPTR)                           01S0096
*   CALL ISDAOPT0;                  /* PRINT SDA OPTIONS     @Y30LB55*/
         L     @15,@CV00897                                     01S0097
         BALR  @14,@15                                          01S0097
*   RFY                                                         01S0098
*    (R1,                                                       01S0098
*     R15) UNRSTD;                                         /*@Y30LB55*/
*   RETCODIN=RETCODE;               /* STOP SDA IF BAD RETURN FROM
*                                      PARM0                 @Y30LB55*/
         MVC   RETCODIN(2,SDAWKPTR),RETCODE(SDAWKPTR)           01S0099
*                                                               01S0100
*   /*****************************************************************/
*   /*                                                               */
*   /* TRACE - HEX DUMP OF SDACVT, PARMSAVE, AND ISDAPRMS            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0100
*   IF CTRACE(8)='1'B THEN                                      01S0100
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0100
         BNO   @RF00100                                         01S0100
*     DO;                           /* IS TRACE PRINT FLAG ON@Y30LB55*/
*       CALL DUMPCVT;               /* TRACE - DUMP ISDACVT  @Y30LB55*/
         BAL   @14,DUMPCVT                                      01S0102
*       LINE=TRACEM02;              /* MOVE DUMP MSG         @Y30LB55*/
         MVI   LINE+31(CVTPTR),C' '                             01S0103
         MVC   LINE+32(100,CVTPTR),LINE+31(CVTPTR)              01S0103
         MVC   LINE(31,CVTPTR),TRACEM02                         01S0103
*       DUMPLEN=R1PARML+2;          /* LENGTH OF PARM FIELD  @Y30LB55*/
         LH    @07,R1PARML(,PARMSAVE)                           01S0104
         LA    @05,2                                            01S0104
         ALR   @05,@07                                          01S0104
         ST    @05,DUMPLEN(,CVTPTR)                             01S0104
*       DUMPIDNO=99992;             /* MOVE DUMP ID          @Y30LB55*/
         MVC   DUMPIDNO(4,CVTPTR),@CF00919                      01S0105
*       DUMPADDR=PARMSAVE;          /* MOVE ADDRESS PARMSAVE @Y30LB55*/
         ST    PARMSAVE,DUMPADDR(,CVTPTR)                       01S0106
*       IF R1PARML=0 THEN           /* PARM ON EXEC          @Y30LB55*/
         LTR   @07,@07                                          01S0107
         BNZ   @RF00107                                         01S0107
*         LINE(33:36)='NONE';       /* NO, SET TO NONE       @Y30LB55*/
         MVC   LINE+32(4,CVTPTR),@CC00920                       01S0108
*       ELSE                                                    01S0109
*         LINE(33:132)=R1PARMS(1:DUMPLEN);/* YES, MOVE LEN   @Y30LB55*/
         B     @RC00107                                         01S0109
@RF00107 MVI   LINE+33(CVTPTR),C' '                             01S0109
         MVC   LINE+34(98,CVTPTR),LINE+33(CVTPTR)               01S0109
         L     @07,DUMPLEN(,CVTPTR)                             01S0109
         BCTR  @07,0                                            01S0109
         EX    @07,@SM00990                                     01S0109
*       RFY                                                     01S0110
*         R1 RSTD;                                         /*@Y30LB55*/
@RC00107 DS    0H                                               01S0111
*       R1=ADDR(WORKCALL);          /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0111
*       CALL ISDAHEXP;              /* DUMP PARM FIELD       @Y30LB55*/
         L     @15,@CV00906                                     01S0112
         BALR  @14,@15                                          01S0112
*       DUMPLEN=LENGTH(ISDAPRMS);   /* MOVE LENGTH ISDAPRMS  @Y30LB55*/
         MVC   DUMPLEN(4,CVTPTR),@CF00649                       01S0113
*       LINE=TRACEM03;              /* MOVE TRACE MSG        @Y30LB55*/
         MVI   LINE+25(CVTPTR),C' '                             01S0114
         MVC   LINE+26(106,CVTPTR),LINE+25(CVTPTR)              01S0114
         MVC   LINE(25,CVTPTR),TRACEM03                         01S0114
*       DUMPADDR=PARMPTR;           /* MOVE DUMP ADDRESS     @Y30LB55*/
         MVC   DUMPADDR(4,CVTPTR),PARMPTR(CVTPTR)               01S0115
*       DUMPIDNO=99993;             /* MOVE DUMP ID          @Y30LB55*/
         MVC   DUMPIDNO(4,CVTPTR),@CF00921                      01S0116
*       CALL ISDAHEXP;              /* DUMP ISDAPRMS         @Y30LB55*/
         L     @15,@CV00906                                     01S0117
         BALR  @14,@15                                          01S0117
*       RFY                                                     01S0118
*         R1 UNRSTD;                                       /*@Y30LB55*/
*     END;                          /* END TRACE PRINT       @Y30LB55*/
*   ELSE                                                        01S0120
*     ;                             /* CTRACE NOT ON         @Y30LB55*/
*                                                               01S0120
@RF00100 DS    0H                                               01S0121
*   /*****************************************************************/
*   /*                                                               */
*   /* END TRACE                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0121
*   IF RETCODE=0 THEN               /* WAS ISDAPARM RETCODE=0@Y30LB55*/
         ICM   @07,3,RETCODE(SDAWKPTR)                          01S0121
         BNZ   @RF00121                                         01S0121
*     DO;                           /* CONTINUE              @Y30LB55*/
*                                                               01S0122
*       /*************************************************************/
*       /*                                                           */
*       /* CALL ISDACNFG TO BUILD CONFIGUATION TABLE FOR PAD AND FSC */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0123
*       RFY                                                     01S0123
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0124
*       CALL ISDACNFG;              /* (WORKPTR) CALL ISDACNFG  01S0125
*                                                            @Y30LB55*/
         L     @15,@CV00898                                     01S0125
         BALR  @14,@15                                          01S0125
*       RFY                                                     01S0126
*         R15 RSTD;                                        /*@Y30LB55*/
*       RETCODFG=R15;               /* SAVE RETURN CODE      @Y30LB55*/
         STH   R15,RETCODFG(,SDAWKPTR)                          01S0127
*       RFY                                                     01S0128
*        (R1,                                                   01S0128
*         R15) UNRSTD;                                     /*@Y30LB55*/
*       IF RETCODFG^=0 THEN         /* CHECK FOR BAD RETURN  @Y30LB55*/
         LH    @07,RETCODFG(,SDAWKPTR)                          01S0129
         LTR   @07,@07                                          01S0129
         BZ    @RF00129                                         01S0129
*         DO;                       /* BAD RETURN            @Y30LB55*/
*           I=RETCODFG;             /* MOVE ISDACNFG RETURN CODE
*                                                            @Y30LB55*/
         LR    I,@07                                            01S0131
*           SRL(I,2);               /* DEVIDE BY 4           @Y30LB55*/
         SRL   I,2                                              01S0132
*           IF(I>5)&(I<10) THEN     /* IS I 6-9              @Y30LB55*/
         CH    I,@CH00175                                       01S0133
         BNH   @RF00133                                         01S0133
         CH    I,@CH00228                                       01S0133
         BNL   @RF00133                                         01S0133
*             DO;                   /* YES                   @Y30LB55*/
*               TEMPPTR=ERRSEVER(I);/* SET PTR TO ERROR MESSAGE 01S0135
*                                                            @Y30LB55*/
         LR    @07,I                                            01S0135
         SLA   @07,2                                            01S0135
         L     TEMPPTR,ERRSEVER-4(@07)                          01S0135
*               LINE=ISDA00X3;      /* MOVE ERROR MESSAGE    @Y30LB55*/
         MVI   LINE+52(CVTPTR),C' '                             01S0136
         MVC   LINE+53(79,CVTPTR),LINE+52(CVTPTR)               01S0136
         MVC   LINE(52,CVTPTR),ISDA00X3(TEMPPTR)                01S0136
*             END;                  /* END EXPECTED RETURN CODE 01S0137
*                                                            @Y30LB55*/
*           ELSE                    /* UNEXPECTED RETURN CODE@Y30LB55*/
*             DO;                   /* PRINT RETURN CODE     @Y30LB55*/
         B     @RC00133                                         01S0138
@RF00133 DS    0H                                               01S0139
*               LINE=ISDA0004;      /* MOVE ISDA0004         @Y30LB55*/
         MVI   LINE+39(CVTPTR),C' '                             01S0139
         MVC   LINE+40(92,CVTPTR),LINE+39(CVTPTR)               01S0139
         MVC   LINE(39,CVTPTR),ISDA0004                         01S0139
*               CVD(RETCODFG,TEMP8);/* CONVERT RETURN CODE   @Y30LB55*/
         LH    @07,RETCODFG(,SDAWKPTR)                          01S0140
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0140
*               RCODE04=EDPAT03;    /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCODE04(4,CVTPTR),EDPAT03                        01S0141
*               ED(RCODE04,TEMP78); /* EDIT RETURN CODE      @Y30LB55*/
         ED    RCODE04(4,CVTPTR),TEMP78(SDAWKPTR)               01S0142
*               MSG04ID='CNF';      /* MOVE PGM ID           @Y30LB55*/
         MVC   MSG04ID(3,CVTPTR),@CC00925                       01S0143
*               MSG04ID0='G';       /* MOVE ID               @Y30LB55*/
         MVI   MSG04ID0(CVTPTR),C'G'                            01S0144
*             END;                  /* END UNEXPECTED RETURN @Y30LB55*/
*           ANSI=LSKIP2;            /* SET 2 LINE SKIP       @Y30LB55*/
@RC00133 MVI   ANSI(CVTPTR),C'0'                                01S0146
*           RFY                                                 01S0147
*             R1 RSTD;                                     /*@Y30LB55*/
*           R1=ADDR(WORKCALL);      /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0148
*           CALL ISDAPRT0;          /* WRITE MESSAGE TO SYSPRINT
*                                                            @Y30LB55*/
         L     @15,@CV00900                                     01S0149
         BALR  @14,@15                                          01S0149
*           ANSI=LSKIP1;            /* RESET TO 1 SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0150
*           CALL ISDATYPE;          /* WRITE MESSAGE TO SYSTERM 01S0151
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0151
         BALR  @14,@15                                          01S0151
*           RFY                                                 01S0152
*             R1 UNRSTD;                                   /*@Y30LB55*/
*           IF CPAD^='00'X THEN     /* WAS PATH ANALYSIS REQUESTED
*                                                            @Y30LB55*/
         CLI   CPAD(LPARMPTR),X'00'                             01S0153
         BE    @RF00153                                         01S0153
*             DO;                   /* YES, MUST SHUT IT OFF @Y30LB55*/
*               CPAD='00'X;         /* RESET PAD CALL FLAG   @Y30LB55*/
         MVI   CPAD(LPARMPTR),X'00'                             01S0155
*               LINE=ISDA0051;      /* MOVE ISDA0051         @Y30LB55*/
         MVI   LINE+64(CVTPTR),C' '                             01S0156
         MVC   LINE+65(67,CVTPTR),LINE+64(CVTPTR)               01S0156
         MVC   LINE(64,CVTPTR),ISDA0051                         01S0156
*               ANSI=LSKIP1;        /* SET 1 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0157
*               RFY                                             01S0158
*                 R1 RSTD;                                 /*@Y30LB55*/
*               R1=ADDR(WORKCALL);  /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0159
*               CALL ISDAPRT0;      /* WRITE TO SYSPRINT     @Y30LB55*/
         L     @15,@CV00900                                     01S0160
         BALR  @14,@15                                          01S0160
*               CALL ISDATYPE;      /* WRITE TO SYSTERM      @Y30LB55*/
         L     @15,@CV00904                                     01S0161
         BALR  @14,@15                                          01S0161
*               RFY                                             01S0162
*                 R1 UNRSTD;                               /*@Y30LB55*/
*             END;                  /* END NO PAD CODE       @Y30LB55*/
*           ELSE                                                01S0164
*             ;                     /* PATH ANALYSIS NOT REQUESTED
*                                                            @Y30LB55*/
@RF00153 DS    0H                                               01S0165
*         END;                      /* END NONE ZERO RETCODE FROM
*                                      ISDACNFT              @Y30LB55*/
*       ELSE                                                    01S0166
*         ;                         /* CONFIGUATION TABLE OK @Y30LB55*/
*                                                               01S0166
@RF00129 DS    0H                                               01S0167
*       /*************************************************************/
*       /*                                                           */
*       /* SET LOCAL FLAGS FROM ISDAPRMS                             */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0167
*       IF CHISTIN='Y' THEN                                     01S0167
         CLI   CHISTIN(LPARMPTR),C'Y'                           01S0167
         BNE   @RF00167                                         01S0167
*         INSOURCE='H';             /* SET HISTORY FLAG      @Y30LB55*/
         MVI   INSOURCE(SDAWKPTR),C'H'                          01S0168
*       ELSE                                                    01S0169
*         INSOURCE='L';             /* OR SET LOGREC FLAG    @Y30LB55*/
         B     @RC00167                                         01S0169
@RF00167 MVI   INSOURCE(SDAWKPTR),C'L'                          01S0169
*       IF INSOURCE='H' THEN                                    01S0170
@RC00167 CLI   INSOURCE(SDAWKPTR),C'H'                          01S0170
         BNE   @RF00170                                         01S0170
*         DDNAMEIN='SDAHISIN';      /* SDAHISIN DDNAME       @Y30LB55*/
         MVC   DDNAMEIN(8,SDAWKPTR),@CC00930                    01S0171
*       ELSE                                                    01S0172
*         DDNAMEIN='SDALOGIN';      /* SDALOGIN DDNAME       @Y30LB55*/
         B     @RC00170                                         01S0172
@RF00170 MVC   DDNAMEIN(8,SDAWKPTR),@CC00931                    01S0172
*                                                               02S0173
*   /*****************************************************************/
*   /*                                                               */
*   /* CODE TO SET REQUESTED START AND END DATES FROM CSTART, CEND,  */
*   /* AND CPERIOD IN SDAPARMS. SETS CSTART AND CEND IF ZERO.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0173
*   IF CEND<'00000010'X THEN        /* IS CEND = ZERO        @Y30LB55*/
@RC00170 CLC   CEND(4,LPARMPTR),@CB00932                        02S0173
         BNL   @RF00173                                         02S0173
*     IF CPERIOD>0 THEN             /* WAS PERIOD REQUESTED  @ZM30730*/
         CLI   CPERIOD(LPARMPTR),0                              02S0174
         BNH   @RF00174                                         02S0174
*       CEND=TODAYDAT;              /* YES, SET CEND TO TODAYS DATE
*                                                            @Y30LB55*/
         MVC   CEND(4,LPARMPTR),TODAYDAT(SDAWKPTR)              02S0175
*     ELSE                          /* NO, BOTH CEND AND PERIOD 02S0176
*                                      ARE ZERO              @ZM30730*/
*       CEND='0099999F'X;           /* SET CEND TO 99999     @ZM30730*/
         B     @RC00174                                         02S0176
@RF00174 MVC   CEND(4,LPARMPTR),@CB00933                        02S0176
*   ELSE                                                        02S0177
*     ;                             /* CEND NOT ZERO         @Y30LB55*/
@RF00173 DS    0H                                               02S0178
*   IF CSTART<'00000010'X THEN      /* WAS START REQUESTED   @Y30LB55*/
@RC00173 CLC   CSTART(4,LPARMPTR),@CB00932                      02S0178
         BNL   @RF00178                                         02S0178
*     IF CPERIOD>0 THEN             /* NO, WAS PERIOD REQUESTED 02S0179
*                                                            @Y30LB55*/
         CLI   CPERIOD(LPARMPTR),0                              02S0179
         BNH   @RF00179                                         02S0179
*       DO;                         /* YES, COMPUTE          @Y30LB55
*                                      CSTART=CEND-CPERIOD+1 @Y30LB55*/
*         CSTART=CEND;              /* INIT TO CEND          @Y30LB55*/
         MVC   CSTART(4,LPARMPTR),CEND(LPARMPTR)                02S0181
*         I=CPERIOD-1;              /* I = NDAYS TO SUBTRACT @Y30LB55*/
         SLR   I,I                                              02S0182
         IC    I,CPERIOD(,LPARMPTR)                             02S0182
         BCTR  I,0                                              02S0182
*         TEMP8=''B;                /* CLEAR TEMP8           @Y30LB55*/
         XC    TEMP8(8,SDAWKPTR),TEMP8(SDAWKPTR)                02S0183
*         TEMP78=CEND(3:4);         /* MOVE END DAY          @Y30LB55*/
         MVC   TEMP78(2,SDAWKPTR),CEND+2(LPARMPTR)              02S0184
*         CVB(J,TEMP8);             /* CONVERT DAY TO BINARY @Y30LB55*/
         CVB   J,TEMP8(,SDAWKPTR)                               02S0185
*         IF I>=J THEN              /* IS PERIOD>DAY         @Y30LB55*/
         CR    I,J                                              02S0186
         BL    @RF00186                                         02S0186
*           I=I+635;                /* YES, ADD COMPLIMENT OF 1 YEAR
*                                                            @Y30LB55*/
         AH    I,@CH00935                                       02S0187
*         ELSE                                                  02S0188
*           ;                       /* NO, I OK              @Y30LB55*/
@RF00186 DS    0H                                               02S0189
*         CVD(I,TEMP8);             /* CONVERT PERIOD TO DECIMAL
*                                                            @Y30LB55*/
         CVD   I,TEMP8(,SDAWKPTR)                               02S0189
*         SP(CSTART,TEMP78);        /* DEC SUBTRACT START-PERIOD
*                                                            @Y30LB55*/
         SP    CSTART(4,LPARMPTR),TEMP78(2,SDAWKPTR)            02S0190
*         CSTART(4)=CSTART(4)×'0F'X;/* FIX SIGN              @Y30LB55*/
         OI    CSTART+3(LPARMPTR),X'0F'                         02S0191
*       END;                        /* END COMPUTE START     @Y30LB55*/
*     ELSE                                                      02S0193
*       ;                           /* PERIOD NOT REQUESTED  @Y30LB55*/
@RF00179 DS    0H                                               02S0194
*   ELSE                                                        02S0194
*     ;                             /* START WAS REQUESTED, IGNORE
*                                      PERIOD                @Y30LB55*/
@RF00178 DS    0H                                               02S0195
*   CDETAIL(7)='1'B;                /* SET SPARE BIT FOR CTRACE 02S0195
*                                      COMPARE               @Y30LB55*/
         OI    CDETAIL(LPARMPTR),B'00000010'                    02S0195
*/* END OF STARTEND                                          @Y30LB55*/
*                                                               02S0196
*                                                               01S0196
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD SDA OUTPUT HEADER FOR ISDAPRT0 WITH REQUESTED       */
*       /* INTERVAL OF THE INPUT DATA.                               */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0196
*       IF CDETAIL(1:6)='000000'B THEN  /* DETAIL PRINT      @ZD00192*/
         TM    CDETAIL(LPARMPTR),B'11111100'                    01S0196
         BNZ   @RF00196                                         01S0196
*         LINE=SDAHEADL;            /* NO, MOVE LEFT HEADER  @ZD00192*/
         MVI   LINE+20(CVTPTR),C' '                             01S0197
         MVC   LINE+21(111,CVTPTR),LINE+20(CVTPTR)              01S0197
         MVC   LINE(20,CVTPTR),SDAHEADL                         01S0197
*       ELSE                        /* YES, DETAIL PRINT     @ZD00192*/
*         LINE=SDAHEADD;            /* MOVE DETAIL HEADER    @ZD00192*/
         B     @RC00196                                         01S0198
@RF00196 MVI   LINE+40(CVTPTR),C' '                             01S0198
         MVC   LINE+41(91,CVTPTR),LINE+40(CVTPTR)               01S0198
         MVC   LINE(40,CVTPTR),SDAHEADD                         01S0198
*       MTITLE0=SDAINHD;            /* MOVE INPUT PHASE HEADER  01S0199
*                                                            @Y30LB55*/
@RC00196 MVC   MTITLE0(9,CVTPTR),SDAINHD                        01S0199
*       MTITLE=SDAHEADM;            /* MOVE MIDDLE HEADER    @Y30LB55*/
         MVC   MTITLE(26,CVTPTR),SDAHEADM                       01S0200
*       RTITLE=SDAHEADR;            /* MOVE RIGHT HEADER     @Y30LB55*/
         MVC   RTITLE(8,CVTPTR),SDAHEADR                        01S0201
*       UNPK(TEMP7,CSTART);         /* UNPACK LOW DATE       @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),CSTART(4,LPARMPTR)             01S0202
*       HDRSDAY=TEMP7(5:7);         /* MOVE LOW DAY          @Y30LB55*/
         MVC   HDRSDAY(3,CVTPTR),TEMP7+4(SDAWKPTR)              01S0203
*       HDRSYEAR=TEMP7(3:4);        /* MOVE LOW YEAR         @Y30LB55*/
         MVC   HDRSYEAR(2,CVTPTR),TEMP7+2(SDAWKPTR)             01S0204
*       UNPK(TEMP7,CEND);           /* UNPACK HIGH DATE      @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),CEND(4,LPARMPTR)               01S0205
*       HDREDAY=TEMP7(5:7);         /* MOVE HIGH DAY         @Y30LB55*/
         MVC   HDREDAY(3,CVTPTR),TEMP7+4(SDAWKPTR)              01S0206
*       HDREYEAR=TEMP7(3:4);        /* MOVE HIGH YEAR        @Y30LB55*/
         MVC   HDREYEAR(2,CVTPTR),TEMP7+2(SDAWKPTR)             01S0207
*       RFY                                                     01S0208
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0209
*       CALL ISDAPRTH;              /* PASS HEADER TO ISDAPRT0  01S0210
*                                                            @Y30LB55*/
         L     @15,@CV00902                                     01S0210
         BALR  @14,@15                                          01S0210
*       ANSI=PSKIP;                 /* SET PAGE SKIP         @Y30LB55*/
         MVI   ANSI(CVTPTR),C'1'                                01S0211
*       LINE='';                    /* MOVE BLANK LINE TO OUTPUT
*                                                            @Y30LB55*/
         MVI   LINE(CVTPTR),C' '                                01S0212
         MVC   LINE+1(131,CVTPTR),LINE(CVTPTR)                  01S0212
*       CALL ISDAPRT0;              /* CALL PRINT PROC TO FORCE NEW
*                                      HEADER                @Y30LB55*/
         L     @15,@CV00900                                     01S0213
         BALR  @14,@15                                          01S0213
*       RFY                                                     01S0214
*         R1 UNRSTD;                                       /*@Y30LB55*/
*     END;                          /* END PARAMETER ANALYSIS CODE
*                                                            @Y30LB55*/
*   ELSE                                                        01S0216
*     ;                             /* BAD RETURN FROM ISDAPARM - SDA
*                                      WILL ABORT            @Y30LB55*/
*                                                               01S0216
@RF00121 DS    0H                                               01S0217
*   /*****************************************************************/
*   /*                                                               */
*   /* START READ INPUT LOOP                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0217
*   DO WHILE(RETCODIN=0);           /* READ LOOP             @Y30LB55*/
         B     @DE00217                                         01S0217
@DL00217 DS    0H                                               01S0218
*     RFY                                                       01S0218
*       R1 RSTD;                                           /*@Y30LB55*/
*     R1=ADDR(WORKCALL);            /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0219
*     IF INSOURCE='H' THEN                                      01S0220
         CLI   INSOURCE(SDAWKPTR),C'H'                          01S0220
         BNE   @RF00220                                         01S0220
*       CALL ISDAHIST;              /* (LOGPTR) READ HISTORY @Y30LB55*/
         L     @15,@CV00907                                     01S0221
         BALR  @14,@15                                          01S0221
*     ELSE                                                      01S0222
*       CALL ISDALOG0;              /* (LOGPTR) OR READ LOGREC  01S0222
*                                                            @Y30LB55*/
         B     @RC00220                                         01S0222
@RF00220 L     @15,@CV00908                                     01S0222
         BALR  @14,@15                                          01S0222
*     RFY                                                       01S0223
*       R15 RSTD;                                          /*@Y30LB55*/
@RC00220 DS    0H                                               01S0224
*     RETCODIN=R15;                 /* SET RETURN CODE FROM IO  01S0224
*                                      ROUTINE               @Y30LB55*/
         STH   R15,RETCODIN(,SDAWKPTR)                          01S0224
*     RFY                                                       01S0225
*      (R1,                                                     01S0225
*       R15) UNRSTD;                                       /*@Y30LB55*/
*     /***************************************************************/
*     /*                                                             */
*     /* ANALYZE INPUT DATA                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0226
*     IF RETCODIN=0 THEN                                        01S0226
         LH    @07,RETCODIN(,SDAWKPTR)                          01S0226
         LTR   @07,@07                                          01S0226
         BNZ   @RF00226                                         01S0226
*       DO;                         /* START DATA ANALYSIS CODE 01S0227
*                                                            @Y30LB55*/
*                                                               01S0227
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE LOCAL FLAGS                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0228
*                                                               02S0228
*   /*****************************************************************/
*   /*                                                               */
*   /* CODE TO INITIALIZE LOCAL FLAGS                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0228
*   LOGPTR=DATAPTR;                 /* SET LOCAL PTR TO DATA @Y30LB55*/
         L     @07,DATAPTR(,CVTPTR)                             02S0228
         ST    @07,LOGPTR(,SDAWKPTR)                            02S0228
*   SENSEPTR=LOGPTR;                /* SET SENSEPTR TO START @Y30LB55*/
         ST    @07,SENSEPTR(,SDAWKPTR)                          02S0229
*   LINE=ISDA0008;                  /* MOVE MSG08            @Y30LB55*/
         MVI   LINE+34(CVTPTR),C' '                             02S0230
         MVC   LINE+35(97,CVTPTR),LINE+34(CVTPTR)               02S0230
         MVC   LINE(34,CVTPTR),ISDA0008                         02S0230
*   XXIDSAVE='SDA';                 /* INIT REJECT MESSAGE TO SDA
*                                                            @Y30LB55*/
         MVC   XXIDSAVE(3,SDAWKPTR),@CC00941                    02S0231
*   USEFLAG=''B;                    /* SET PRINT FLAG OFF    @Y30LB55*/
         MVI   USEFLAG(SDAWKPTR),X'00'                          02S0232
*   INDEVTYP='';                    /* CLEAR DEVICE FLAG     @Y30LB55*/
         MVI   INDEVTYP(SDAWKPTR),C' '                          02S0233
*   DLENGTH=SLENGTH-4;              /* INITIALYZE SENSE LENGTH  02S0234
*                                                            @Y30LB55*/
         LH    @07,SLENGTH(,@07)                                02S0234
         SH    @07,@CH00101                                     02S0234
         STH   @07,DLENGTH(,SDAWKPTR)                           02S0234
*   CLENGTH=DLENGTH;                /* SET INPUT LENGTH FOR HEX PRINT
*                                                            @Y30LB55*/
         STH   @07,CLENGTH(,SDAWKPTR)                           02S0235
*   SDAFLAG0(8)='0'B;               /* RESET FSC BIT         @Y30LB55*/
         NI    SDAFLAG0(SDAWKPTR),B'11111110'                   02S0236
*   IF DLENGTH>8 THEN               /* VALID DATA RECORD     @ZA14729*/
         CH    @07,@CH00066                                     02S0237
         BNH   @RF00237                                         02S0237
*     NINREC=NINREC+1;              /* YES, INC RECORD COUNT @ZA14729*/
         LA    @07,1                                            02S0238
         AL    @07,NINREC(,SDAWKPTR)                            02S0238
         ST    @07,NINREC(,SDAWKPTR)                            02S0238
*   ELSE;                           /* NO, IGNORE CONCATENATE   02S0239
*                                      DATASET RECORD        @ZA14729*/
@RF00237 DS    0H                                               02S0240
*/* END OF INITRECF                                          @Y30LB55*/
*                                                               02S0240
*                                                               01S0240
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK RECORD TYPE = OBR OR MDR                          */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0240
*                                                               02S0240
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK RECORD TYPE = OBR OR MDR                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0240
*   IF CLASRC(1:4)=OBRT THEN        /* TYPE=OBR              @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0240
         TM    CLASRC(@07),B'00110000'                          02S0240
         BNO   @RF00240                                         02S0240
         TM    CLASRC(@07),B'11000000'                          02S0240
         BNZ   @RF00240                                         02S0240
*     DO;                           /* SETS USEFLAG(8)=1 IF SS1 02S0241
*                                      RECORD                @Y30LB55*/
*                                                               02S0241
*       /*************************************************************/
*       /*                                                           */
*       /* OBR RECORDS. THIS PROC ANALYZES OBR RECORDS AND SETS      */
*       /* USEFLAG(8)=1 IF THE RECORD IS FROM THE SUBSYSTEM,         */
*       /* DEVPTR=PTR TO DEVICE TYPE, SENSEPTR=PTR TO SENSE DATA,    */
*       /* DLENGTH=LENGTH OF SENSE DATA, INDEVTYP=DEVICE FLAG,       */
*       /* IRECTYPE=REC TYPE FLAG, AND INRECCUA=CUA IN THE RECORD.   */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0242
*       IRECTYPE='O';               /* SET OBR TYPE FLAG     @Y30LB55*/
         MVI   IRECTYPE(SDAWKPTR),C'O'                          02S0242
*       IF SWITCH1(3)='1'B THEN                                 02S0243
         TM    SWITCH1(@07),B'00100000'                         02S0243
         BNO   @RF00243                                         02S0243
*         DO;                       /* SHORT OBR RECORDS     @Y30LB55*/
*           DEVPTR=ADDR(DEVTYPE1);  /* SET PTR TO DEVICE TYPE@Y30LB55*/
         LA    @15,DEVTYPE1(,@07)                               02S0245
         ST    @15,DEVPTR(,SDAWKPTR)                            02S0245
*           SENSEPTR=ADDR(SDRINF);  /* ADDRESS OF SENSE      @Y30LB55*/
         LA    @15,SDRINF(,@07)                                 02S0246
         ST    @15,SENSEPTR(,SDAWKPTR)                          02S0246
*           DLENGTH=SLENGTH-36;     /* SET LENGTH OF SENSE DATA 02S0247
*                                                            @Y30LB55*/
         LH    @15,SLENGTH(,@07)                                02S0247
         SH    @15,@CH00627                                     02S0247
         STH   @15,DLENGTH(,SDAWKPTR)                           02S0247
*           INRECCUA=CUA2(2:3);     /* SAVE CUA              @Y30LB55*/
         MVC   INRECCUA(2,SDAWKPTR),CUA2+1(@07)                 02S0248
*         END;                      /* END SHORT OBR         @Y30LB55*/
*       ELSE                                                    02S0250
*         DO;                       /* LONG OBR RECORDS      @Y30LB55*/
         B     @RC00243                                         02S0250
@RF00243 DS    0H                                               02S0251
*           DEVPTR=ADDR(DEVTYPE2);  /* SET PTR TO DEVICE TYPE@Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0251
         LA    @15,DEVTYPE2(,@07)                               02S0251
         ST    @15,DEVPTR(,SDAWKPTR)                            02S0251
*           SENSEPTR=ADDR(DEVDEP2); /* SET PTR TO SENSE DATA @Y30LB55*/
         LA    @15,DEVDEP2(,@07)                                02S0252
         ST    @15,SENSEPTR(,SDAWKPTR)                          02S0252
*           SENSEPTR=SENSEPTR+DEVDEPC*8+SDRCNT2;/* DEVICE+SDR@Y30LB55*/
         SLR   @14,@14                                          02S0253
         IC    @14,DEVDEPC(,@07)                                02S0253
         SLA   @14,3                                            02S0253
         ALR   @15,@14                                          02S0253
         SLR   @14,@14                                          02S0253
         IC    @14,SDRCNT2(,@07)                                02S0253
         ALR   @15,@14                                          02S0253
         ST    @15,SENSEPTR(,SDAWKPTR)                          02S0253
*           DLENGTH=SENSCNT;        /* SET LENGTH OF SENSE DATA 02S0254
*                                                            @Y30LB55*/
         MVC   DLENGTH(2,SDAWKPTR),SENSCNT(@07)                 02S0254
*           INRECCUA=PCUA(2:3);     /* SAVE CUA              @Y30LB55*/
         MVC   INRECCUA(2,SDAWKPTR),PCUA+1(@07)                 02S0255
*         END;                      /* END LONG OBR          @Y30LB55*/
*       IF CLASTYPE=OBRMSC THEN                                 02S0257
@RC00243 L     @07,DEVPTR(,SDAWKPTR)                            02S0257
         CLC   CLASTYPE(2,@07),@CB00393                         02S0257
         BNE   @RF00257                                         02S0257
*         DO;                       /* MSC RECORD            @Y30LB55*/
*           USEFLAG(8)='1'B;        /* SET USE FLAG          @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00000001'                    02S0259
*           INDEVTYP='S';           /* SET DEVICE FLAG TO SUBSYSTEM
*                                                            @Y30LB55*/
         MVI   INDEVTYP(SDAWKPTR),C'S'                          02S0260
*         END;                      /* END CLASTYPE=OBRMSC   @Y30LB55*/
*                                                               02S0262
*       /*************************************************************/
*       /*                                                           */
*       /* 3330 RECORDS                                              */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0262
*       ELSE                                                    02S0262
*         IF CLASTYPE=OBR3330×CLASTYPE=OBR33302 THEN            02S0262
         B     @RC00257                                         02S0262
@RF00257 L     @07,DEVPTR(,SDAWKPTR)                            02S0262
         CLC   CLASTYPE(2,@07),@CB00389                         02S0262
         BE    @RT00262                                         02S0262
         CLC   CLASTYPE(2,@07),@CB00391                         02S0262
         BNE   @RF00262                                         02S0262
@RT00262 DS    0H                                               02S0263
*           DO;                     /* 3330 MOD 1 OR 11      @ZM31072*/
*                                                               02S0263
*             /*******************************************************/
*             /*                                                     */
*             /* NOTE - THIS CODE ACCEPTS ALL 3330 MOD 1 AND 11      */
*             /*                                                     */
*             /*******************************************************/
*                                                               02S0264
*/*       IF DLENGTH>24 THEN    3330 IN THE SUBSYSTEM        @Y30LB55*/
*                                                               02S0264
*             USEFLAG(8)='1'B;      /* SET USE FLAG          @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00000001'                    02S0264
*/*       ELSE   3330 NOT IN THE SUBSYSTEM                   @Y30LB55*/
*                                                               02S0265
*             IF OPTFLAGS(5)='1'B THEN/* VIRTUAL 3330        @Y30LB55*/
         L     @07,DEVPTR(,SDAWKPTR)                            02S0265
         TM    OPTFLAGS(@07),B'00001000'                        02S0265
         BNO   @RF00265                                         02S0265
*               DO;                 /* YES, SET VIRTUAL FLAGS@Y30LB55*/
*                 INDEVTYP='V';     /* SET VIRTUAL IN SDAWORK@Y30LB55*/
         MVI   INDEVTYP(SDAWKPTR),C'V'                          02S0267
*                 CUABYTE1(3:8)='000000'B;/* ZERO BITS 2-7   @Y30LB55*/
         NI    CUABYTE1(SDAWKPTR),B'11000000'                   02S0268
*                 TEMP1=RUADASD&'1F'X; /* ZERO BITS 0-1      @Y30LB55*/
         L     @07,SENSEPTR(,SDAWKPTR)                          02S0269
         MVC   TEMP1(1,SDAWKPTR),RUADASD(@07)                   02S0269
         NI    TEMP1(SDAWKPTR),X'1F'                            02S0269
*                 CUABYTE1=CUABYTE1×TEMP1; /* OR 2 TOGETHER  @Y30LB55*/
         OC    CUABYTE1(1,SDAWKPTR),TEMP1(SDAWKPTR)             02S0270
*                 IF RUADASD='FF'X THEN /* INVALID RUA       @ZA12870*/
         CLI   RUADASD(@07),X'FF'                               02S0271
         BNE   @RF00271                                         02S0271
*                   INRECCUA=SECUA(2:3); /* YES, MOVE VUA    @ZA14729*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0272
         MVC   INRECCUA(2,SDAWKPTR),SECUA+1(@07)                02S0272
*                 ELSE;             /* RUA IS OK             @ZA12870*/
@RF00271 DS    0H                                               02S0274
*               END;                /* END VIRTUAL           @Y30LB55*/
*             ELSE                                              02S0275
*               INDEVTYP='R';       /* REAL 3330             @Y30LB55*/
         B     @RC00265                                         02S0275
@RF00265 MVI   INDEVTYP(SDAWKPTR),C'R'                          02S0275
*           END;                    /* END CLASTYPE=OBR3330  @Y30LB55*/
*         ELSE                                                  02S0277
*           ;                       /* NOT MSS OR 3330 TYPE  @Y30LB55*/
@RF00262 DS    0H                                               02S0278
*     END;                          /* END OBR CODE          @Y30LB55*/
*   ELSE                                                        02S0279
*     IF CLASRC(1:4)=MDRT THEN      /* TYPE=MDR              @Y30LB55*/
         B     @RC00240                                         02S0279
@RF00240 L     @07,LOGPTR(,SDAWKPTR)                            02S0279
         TM    CLASRC(@07),B'10010000'                          02S0279
         BNO   @RF00279                                         02S0279
         TM    CLASRC(@07),B'01100000'                          02S0279
         BNZ   @RF00279                                         02S0279
*       DO;                         /* SET USEFLAG(8)=1 IF SS1 RECORD
*                                                            @Y30LB55*/
*                                                               02S0280
*         /***********************************************************/
*         /*                                                         */
*         /* MDR RECORDS. THIS PROC ANALYZES MDR RECORDS AND SETS    */
*         /* USEFLAG(8)=1 IF THE RECORD IS FROM THE SUBSYSTEM,       */
*         /* SENSEPTR=PTR TO SENSE DATA, DELNGTH=LENGTH OF SENSE     */
*         /* DATA, INDEVTYP=DEVICE FLAG, IRECTYPE=REC TYPE FLAG, AND */
*         /* INRECCUA=CUA IN THE RECORD.                             */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0281
*         IRECTYPE='M';             /* SET MDR TYPE FLAG     @Y30LB55*/
         MVI   IRECTYPE(SDAWKPTR),C'M'                          02S0281
*         INRECCUA=MDRCUA;          /* SAVE CUA              @Y30LB55*/
         MVC   INRECCUA(2,SDAWKPTR),MDRCUA(@07)                 02S0282
*         SENSEPTR=ADDR(SDRINF);    /* ADDR OF SENSE         @Y30LB55*/
         LA    @15,SDRINF(,@07)                                 02S0283
         ST    @15,SENSEPTR(,SDAWKPTR)                          02S0283
*         DLENGTH=SLENGTH-36;       /* SET LENGTH OF SENSE DATA 02S0284
*                                                            @Y30LB55*/
         LH    @15,SLENGTH(,@07)                                02S0284
         SH    @15,@CH00627                                     02S0284
         STH   @15,DLENGTH(,SDAWKPTR)                           02S0284
*         IF SWITCH2=MDRMSC THEN    /* MSS BUFFERED LOG      @Y30LB55*/
         CLI   SWITCH2(@07),X'0E'                               02S0285
         BNE   @RF00285                                         02S0285
*           DO;                     /* YES, MSS RECORD       @Y30LB55*/
*             USEFLAG(8)='1'B;      /* SET USE FLAG          @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00000001'                    02S0287
*             INDEVTYP='S';         /* SET DEVICE FLAG TO SUBSYSTEM
*                                                            @Y30LB55*/
         MVI   INDEVTYP(SDAWKPTR),C'S'                          02S0288
*           END;                    /* END MSC MDR RECORD    @Y30LB55*/
*         ELSE                      /* NOT MSS MDR RECORD    @Y30LB55*/
*             IF SWITCH2=MDR3330×SWITCH2=MDR33302 THEN /* 3330 MOD 1,11
*                                                            @ZM31072*/
         B     @RC00285                                         02S0290
@RF00285 L     @07,LOGPTR(,SDAWKPTR)                            02S0290
         CLI   SWITCH2(@07),X'01'                               02S0290
         BE    @RT00290                                         02S0290
         CLI   SWITCH2(@07),X'0A'                               02S0290
         BNE   @RF00290                                         02S0290
@RT00290 DS    0H                                               02S0291
*               DO;                 /* YES                   @Y30LB55*/
*                 USEFLAG(8)='1'B;  /* SET USE FLAG          @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00000001'                    02S0292
*                 IF DLENGTH=24 THEN /* REAL 3330 MDR        @ZA27780*/
         CLC   DLENGTH(2,SDAWKPTR),@CH00068                     02S0293
         BNE   @RF00293                                         02S0293
*                   INDEVTYP='R';   /* SET REAL 3330 FLAG    @Y30LB55*/
         MVI   INDEVTYP(SDAWKPTR),C'R'                          02S0294
*                 ELSE              /* MDR FOR VIRTUAL 3330  @YD00147*/
*                   IF DLENGTH>24 THEN /* NOT REAL 3330      @ZA27780*/
         B     @RC00293                                         02S0295
@RF00293 LH    @07,DLENGTH(,SDAWKPTR)                           02S0295
         CH    @07,@CH00068                                     02S0295
         BNH   @RF00295                                         02S0295
*                   DO;             /* CALCULATE RUA         @ZA11668*/
*                     INDEVTYP='V'; /* SET VIRTUAL 3330 FLAG @YD00147*/
         MVI   INDEVTYP(SDAWKPTR),C'V'                          02S0297
*                     CUABYTE1(3:8)='000000'B;/* ZERO 2-7    @ZA11668*/
         NI    CUABYTE1(SDAWKPTR),B'11000000'                   02S0298
*                     TEMP1=RUADASD&'1F'X; /* ZERO 0-1       @ZA11668*/
         L     @07,SENSEPTR(,SDAWKPTR)                          02S0299
         MVC   TEMP1(1,SDAWKPTR),RUADASD(@07)                   02S0299
         NI    TEMP1(SDAWKPTR),X'1F'                            02S0299
*                     CUABYTE1=CUABYTE1×TEMP1; /* OR         @ZA11668*/
         OC    CUABYTE1(1,SDAWKPTR),TEMP1(SDAWKPTR)             02S0300
*                     IF RUADASD='FF'X THEN /* INVALID RUA   @ZA11668*/
         CLI   RUADASD(@07),X'FF'                               02S0301
         BNE   @RF00301                                         02S0301
*                       INRECCUA=MDRCUA; /* YES, MOVE VUA    @ZA11668*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0302
         MVC   INRECCUA(2,SDAWKPTR),MDRCUA(@07)                 02S0302
*                     ELSE;         /* RUA IS OK             @ZA11668*/
@RF00301 DS    0H                                               02S0304
*                   END;            /* END VIRTUAL DASD      @ZA11668*/
*                 ELSE              /* LESS THAN 24 -INVALID @ZA27780*/
*                   USEFLAG(8)='0'B; /* SET FLAG TO NOT USED @ZA27780*/
         B     @RC00295                                         02S0305
@RF00295 NI    USEFLAG(SDAWKPTR),B'11111110'                    02S0305
*               END;                /* END 3330 MDR          @Y30LB55*/
*             ELSE                  /* NOT MSS OR 3330 MDR   @Y30LB55*/
*               ;                   /* NO MORE CHECKS        @Y30LB55*/
@RF00290 DS    0H                                               02S0308
*       END;                        /* END MDR CODE          @Y30LB55*/
*     ELSE                                                      02S0309
*       IRECTYPE='';                /* NOT OBR OR MDR        @Y30LB55*/
         B     @RC00279                                         02S0309
@RF00279 MVI   IRECTYPE(SDAWKPTR),C' '                          02S0309
*                                                               02S0310
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL CODE TO IGNORE REAL 3350 EMULATING 3330-1             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0310
*   IF INDEVTYP='R'×INDEVTYP='V' THEN /* HAVE DASD RECORD    @ZA17150*/
@RC00279 DS    0H                                               02S0310
@RC00240 CLI   INDEVTYP(SDAWKPTR),C'R'                          02S0310
         BE    @RT00310                                         02S0310
         CLI   INDEVTYP(SDAWKPTR),C'V'                          02S0310
         BNE   @RF00310                                         02S0310
@RT00310 DS    0H                                               02S0311
*     IF SSIDDEVT(1)='1'B THEN     /* 3350 IN COMPATABILITY MODE
*                                                            @ZA17150*/
         L     @07,SENSEPTR(,SDAWKPTR)                          02S0311
         TM    SSIDDEVT(@07),B'00001000'                        02S0311
         BNO   @RF00311                                         02S0311
*       USEFLAG(8)='0'B;           /* YES, IGNORE REAL 3350  @ZA17150*/
         NI    USEFLAG(SDAWKPTR),B'11111110'                    02S0312
*     ELSE;                        /* NO, MUST BE 3330       @ZA17150*/
@RF00311 DS    0H                                               02S0314
*   ELSE;                          /* NOT DASD               @ZA17150*/
@RF00310 DS    0H                                               02S0315
*/* END OF OBRMDRCK                                          @Y30LB55*/
*                                                               02S0315
*         SDATAPTR=SENSEPTR;        /* SET SENSE PTR IN ISDACVT 01S0315
*                                                            @Y30LB55*/
*                                                               01S0315
         MVC   SDATAPTR(4,CVTPTR),SENSEPTR(SDAWKPTR)            01S0315
*         /***********************************************************/
*         /*                                                         */
*         /* IF USEFLAG(8)=1 CONTINUE, CHECK DATA FOR ERRORS         */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0316
*         IF USEFLAG(8)='1'B THEN   /* CHECK DATA            @Y30LB55*/
         TM    USEFLAG(SDAWKPTR),B'00000001'                    01S0316
         BNO   @RF00316                                         01S0316
*           CALL DATACHEK;          /* SETS USEFLAG(8)=0 IF BAD DATA
*                                                            @Y30LB55*/
         BAL   @14,DATACHEK                                     01S0317
*         ELSE;                     /* NOT USING THIS RECORD @Y30LB55*/
*                                                               01S0318
@RF00316 DS    0H                                               01S0319
*         /***********************************************************/
*         /*                                                         */
*         /* IF USEFLAG(8)=1 CONTINUE, PASS DATA TO REPORTS          */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0319
*         IF USEFLAG(8)='1'B THEN                               01S0319
         TM    USEFLAG(SDAWKPTR),B'00000001'                    01S0319
         BNO   @RF00319                                         01S0319
*           DO;                     /* USE THIS RECORD       @Y30LB55*/
*             /*******************************************************/
*             /*                                                     */
*             /* INCLUDE SDAFMTCK TO BUILD FORMAT MASKS              */
*             /*                                                     */
*             /*******************************************************/
*                                                               02S0321
*   /*****************************************************************/
*   /*                                                               */
*   /* SDAFMTCK - CODE TO BUILD FORMAT, SUBFORMAT, MSG CODE MASKS.   */
*   /* THIS PROC CONMERTS SUBFORMAT NUMBER OR MESSAGE CODE INTO THE  */
*   /* SAVE 1 BIT CODE THAT MSC FORMAT NUMBER IS IN. BOTH SUBFORMAT  */
*   /* AND MESSAGE CODE HAVE A RANGE OF 0-15 AND ARE CONVERTED TO 16 */
*   /* BIT MASKS NAMED SUBFCHK AND MSGCDCHK. LIKE FORMAT NUMBER, IF  */
*   /* SUBFORMAT=0 THEN SUBFCHK(1)=1, IF SUBFORMAT=1 THEN            */
*   /* SUBFCHK(2)=1, ETC. THESE 3 MASKS, FMTCHK, SUBFCHK, AND        */
*   /* MSGCDCHK, ARE APPLIED TO TO THE CORRESPONDING MASKS FOR EACH  */
*   /* ACCUMULATOR PROC NAMED XXXFMT, XXXSUBF, AND XXXMSGCD WHERE XXX*/
*   /* = 1ST 3 CHARACTERS OF THE ACCUMULATOR PROC. THESE TABLES ARE  */
*   /* ALL IN RPTTABLE, THE MAIN DECISION TABLE FOR ISDASDA0.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0321
*   IF INDEVTYP='S' THEN                                        02S0321
         CLI   INDEVTYP(SDAWKPTR),C'S'                          02S0321
         BNE   @RF00321                                         02S0321
*     DO;                           /* RECORD FROM SUBSYSTEM @Y30LB55*/
*       FMTCHK=FORMATNO&'11111100'B;/* SET FORMAT MASK       @Y30LB55*/
         L     @07,SENSEPTR(,SDAWKPTR)                          02S0323
         MVC   FMTCHK(1,SDAWKPTR),FORMATNO(@07)                 02S0323
         NI    FMTCHK(SDAWKPTR),B'11111100'                     02S0323
*       SUBFSAVE=SUBFMTMG;          /* SET SUBFORMAT + MESSAGE CODE
*                                                            @Y30LB55*/
         MVC   SUBFSAVE(1,SDAWKPTR),SUBFMTMG(@07)               02S0324
*     END;                                                 /*@Y30LB55*/
*   ELSE                                                        02S0326
*     DO;                           /* RECORD FROM 3330 OBR  @Y30LB55*/
         B     @RC00321                                         02S0326
@RF00321 DS    0H                                               02S0327
*       FMTCHK='00000100'B;         /* SET FORMAT TO 5       @Y30LB55*/
         MVI   FMTCHK(SDAWKPTR),B'00000100'                     02S0327
*       SUBFSAVE=DASDFMTN;          /* SET SUBFORMAT + MESSAGE CODE
*                                                            @Y30LB55*/
         L     @07,SENSEPTR(,SDAWKPTR)                          02S0328
         MVC   SUBFSAVE(1,SDAWKPTR),DASDFMTN(@07)               02S0328
*     END;                                                 /*@Y30LB55*/
*   SUBFMSCK=''B;                   /* ZERO SUBFMT,MSG CODE MASK
*                                                            @Y30LB55*/
@RC00321 SLR   @07,@07                                          02S0330
         ST    @07,SUBFMSCK(,SDAWKPTR)                          02S0330
*   IF FMTCHK(2:4)='000'B THEN      /* IS FORMAT 0,4, OR 5   @Y30LB55*/
         TM    FMTCHK(SDAWKPTR),B'01110000'                     02S0331
         BNZ   @RF00331                                         02S0331
*     DO;                           /* YES, BUILD SUBFMT OR MSG CODE
*                                      MASK                  @Y30LB55*/
*       IF FMTCHK(1)='0'B THEN      /* FORMAT 0              @Y30LB55*/
         TM    FMTCHK(SDAWKPTR),B'10000000'                     02S0333
         BNZ   @RF00333                                         02S0333
*         L=1;                      /* NO, BUILD SUBFORMAT MASK 02S0334
*                                                            @Y30LB55*/
         MVC   L(4),@CF00078                                    02S0334
*       ELSE                        /* YES                   @Y30LB55*/
*         L=2;                      /* BUILD MSG CODE MASK   @Y30LB55*/
         B     @RC00333                                         02S0335
@RF00333 MVC   L(4),@CF00097                                    02S0335
*       K=SUBFSAVE;                 /* GET SUBFORMAT AND MSG CODE
*                                                            @Y30LB55*/
@RC00333 SLR   K,K                                              02S0336
         IC    K,SUBFSAVE(,SDAWKPTR)                            02S0336
*       IF L=1 THEN                                             02S0337
         CLC   L(4),@CF00078                                    02S0337
         BNE   @RF00337                                         02S0337
*         SRL(K,4);                 /* SHIFT OUT MSG CODE    @Y30LB55*/
         SRL   K,4                                              02S0338
*       ELSE                                                    02S0339
*         K=K&'0000000F'X;          /* MASK OUT SUBFORMAT NO.@Y30LB55*/
         B     @RC00337                                         02S0339
@RF00337 N     K,@CF00911                                       02S0339
*       J='8000'X;                  /* INITIALYZE TO 0       @Y30LB55*/
@RC00337 L     J,@CF00952                                       02S0340
*       DO I=1 TO K;                /* SHIFT LOOP            @Y30LB55*/
         LA    I,1                                              02S0341
         B     @DE00341                                         02S0341
@DL00341 DS    0H                                               02S0342
*         SRL(J,1);                 /* SHIFT ONE             @Y30LB55*/
         SRL   J,1                                              02S0342
*       END;                        /* END SHIFT LOOP        @Y30LB55*/
         AL    I,@CF00078                                       02S0343
@DE00341 CR    I,K                                              02S0343
         BNH   @DL00341                                         02S0343
*       IF L=1 THEN                                             02S0344
         CLC   L(4),@CF00078                                    02S0344
         BNE   @RF00344                                         02S0344
*         SUBFCHK=J;                /* SET SUB FORMAT MASK   @Y30LB55*/
         STH   J,SUBFCHK(,SDAWKPTR)                             02S0345
*       ELSE                                                    02S0346
*         MSGCDCHK=J;               /* OR SET MSG CODE MASK  @Y30LB55*/
         B     @RC00344                                         02S0346
@RF00344 STH   J,MSGCDCHK(,SDAWKPTR)                            02S0346
*     END;                          /* END FORMAT 0,4,5 CODE @Y30LB55*/
*   ELSE                                                        02S0348
*     ;                             /* FORMAT 1,2, OR 3 HAVE NONE
*                                                            @Y30LB55*/
@RF00331 DS    0H                                               02S0349
*/* END OF SDAFMTCK                                          @Y30LB55*/
*                                                               02S0349
*                                                               01S0349
*             /*******************************************************/
*             /*                                                     */
*             /* CALL PROC TO PASS DATA TO ACCUMULATORS              */
*             /*                                                     */
*             /*******************************************************/
*             CALL SDAACC00;        /* PASS DATA TO REPORT ROUTINES
*                                                            @Y30LB55*/
@RC00331 BAL   @14,SDAACC00                                     01S0349
*             /*******************************************************/
*             /*                                                     */
*             /* SDAACC00 SETS USEFLAG(8)=0 IF THE DATA WAS REJECTED */
*             /* BY ANY ACCUMULATOR PROC. IN THIS CASE THE PRINT     */
*             /* FLAG, USEFLAG(4)=1 TO PRINT THE BAD RECORD          */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0350
*             IF USEFLAG(8)='1'B THEN/* RECORD WAS USED      @Y30LB55*/
*                                                               01S0350
         TM    USEFLAG(SDAWKPTR),B'00000001'                    01S0350
         BNO   @RF00350                                         01S0350
*               /*****************************************************/
*               /*                                                   */
*               /* RECORD WAS USED BY SOME ACCUMULATOR               */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0351
*               NTEMPREC=NTEMPREC+1;/* INC OUT COUNT         @Y30LB55*/
         LA    @07,1                                            01S0351
         AL    @07,NTEMPREC(,SDAWKPTR)                          01S0351
         ST    @07,NTEMPREC(,SDAWKPTR)                          01S0351
*             ELSE;                 /* RECORD NOT USED       @Y30LB55*/
@RF00350 DS    0H                                               01S0353
*           END;                    /* END USE CODE          @Y30LB55*/
*         ELSE;                     /* DO NOT USE THE RECORD @Y30LB55*/
@RF00319 DS    0H                                               01S0355
*                                                               02S0355
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE LOW AND HIGH DATE FOR OUTPUT MESSAGES                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0355
*   IF USEFLAG(8)='1'B THEN         /* WAS RECORD USED       @Y30LB55*/
         TM    USEFLAG(SDAWKPTR),B'00000001'                    02S0355
         BNO   @RF00355                                         02S0355
*     DO;                           /* YES, SAVE SELECTED HIGH-LOW
*                                      DATE                  @Y30LB55*/
*       IF DATE<LOWDATE THEN        /* IS DATE LOW           @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0357
         CLC   DATE(4,@07),LOWDATE(SDAWKPTR)                    02S0357
         BNL   @RF00357                                         02S0357
*         LOWDATE=DATE;             /* SET LOW DATE FOR DATA USED
*                                                            @Y30LB55*/
         MVC   LOWDATE(4,SDAWKPTR),DATE(@07)                    02S0358
*       ELSE                                                    02S0359
*         ;                                                /*@Y30LB55*/
@RF00357 DS    0H                                               02S0360
*       IF DATE>HIGHDATE THEN       /* IS DATE HIGH          @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0360
         CLC   DATE(4,@07),HIGHDATE(SDAWKPTR)                   02S0360
         BNH   @RF00360                                         02S0360
*         HIGHDATE=DATE;            /* SET HIGH DATE FOR DATA USED
*                                                            @Y30LB55*/
         MVC   HIGHDATE(4,SDAWKPTR),DATE(@07)                   02S0361
*       ELSE                                                    02S0362
*         ;                                                /*@Y30LB55*/
@RF00360 DS    0H                                               02S0363
*     END;                          /* END SELECTED DATE     @Y30LB55*/
*   ELSE                                                        02S0364
*     ;                             /* RECORD NOT USED       @Y30LB55*/
@RF00355 DS    0H                                               02S0365
*   IF USEFLAG(1)='1'B THEN         /* VALID DATE AND TIME   @ZM31107*/
         TM    USEFLAG(SDAWKPTR),B'10000000'                    02S0365
         BNO   @RF00365                                         02S0365
*     DO;                           /* YES, SAVE HIGH-LOW DATE FOR
*                                      RECORDS READ          @Y30LB55*/
*       IF DATE<ALOWDATE THEN       /* FIND LOW DATE IN ALL INPUT
*                                                            @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0367
         CLC   DATE(4,@07),ALOWDATE(SDAWKPTR)                   02S0367
         BNL   @RF00367                                         02S0367
*         ALOWDATE=DATE;            /* SET LOW DATE FOR DATA @Y30LB55*/
         MVC   ALOWDATE(4,SDAWKPTR),DATE(@07)                   02S0368
*       ELSE                                                    02S0369
*         ;                         /* NOT LOW               @Y30LB55*/
@RF00367 DS    0H                                               02S0370
*       IF DATE>AHIGHDAT THEN       /* FIND HIGH DATE IN ALL INPUT
*                                                            @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0370
         CLC   DATE(4,@07),AHIGHDAT(SDAWKPTR)                   02S0370
         BNH   @RF00370                                         02S0370
*         AHIGHDAT=DATE;            /* SET HIGH DATE FOR DATA@Y30LB55*/
         MVC   AHIGHDAT(4,SDAWKPTR),DATE(@07)                   02S0371
*       ELSE                                                    02S0372
*         ;                         /* NOT HIGH              @Y30LB55*/
@RF00370 DS    0H                                               02S0373
*     END;                          /* END DATE SAVE         @Y30LB55*/
*   ELSE                                                        02S0374
*     ;                             /* NOT OBR OR MDR, DO NOT CHECK
*                                      DATE                  @Y30LB55*/
@RF00365 DS    0H                                               02S0375
*/* END OF DATEHILO                                          @Y30LB55*/
*                                                               02S0375
*                                                               01S0375
*         /***********************************************************/
*         /*                                                         */
*         /* IF PRINT FLAG IS ON AND SOME DETAIL REQUESTED, PRINT    */
*         /* THE INPUT RECORD IN HEX. IF A SPECIFIC DEVTYPE, FSCODE, */
*         /* OR SSID WAS REQUESTED, DO NOT PRINT THE HEX RECORD.     */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0375
*         IF CDETAIL(1:6)='000000'B×CTYPE^='  '×CFSCONLY^='00000000'X
*             ×CSSIDF^='0000'X THEN /* ANY SPECIFIC OPTIONS  @ZM31121*/
         TM    CDETAIL(LPARMPTR),B'11111100'                    01S0375
         BZ    @RT00375                                         01S0375
         CLC   CTYPE(2,LPARMPTR),@CC00954                       01S0375
         BNE   @RT00375                                         01S0375
         CLC   CFSCONLY(4,LPARMPTR),@CB00955                    01S0375
         BNE   @RT00375                                         01S0375
         CLC   CSSIDF(2,LPARMPTR),@CB00956                      01S0375
         BE    @RF00375                                         01S0375
@RT00375 DS    0H                                               01S0376
*           USEFLAG(4)='0'B;        /* YES, TURN FLAG OFF    @ZM31121*/
         NI    USEFLAG(SDAWKPTR),B'11101111'                    01S0376
*         ELSE;                     /* NO, DUMP OK           @ZM31121*/
@RF00375 DS    0H                                               01S0378
*         IF USEFLAG(4)='1'B THEN   /* IS DUMP FLAG SET      @ZM31121*/
         TM    USEFLAG(SDAWKPTR),B'00010000'                    01S0378
         BNO   @RF00378                                         01S0378
*           DO;                     /* YES, SET UP FOR HEX PRINT
*                                                            @Y30LB55*/
*             DUMPADDR=ADDR(CLASRC);/* SET ADDR OF INPUT     @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            01S0380
         LA    @07,CLASRC(,@07)                                 01S0380
         ST    @07,DUMPADDR(,CVTPTR)                            01S0380
*             DUMPLEN=CLENGTH;      /* SET LENGTH OF INPUT RECORD
*                                                            @Y30LB55*/
         LH    @07,CLENGTH(,SDAWKPTR)                           01S0381
         ST    @07,DUMPLEN(,CVTPTR)                             01S0381
*             DUMPIDNO=NINREC;      /* SET ID TO REC NUMBER  @Y30LB55*/
         MVC   DUMPIDNO(4,CVTPTR),NINREC(SDAWKPTR)              01S0382
*             RFY                                               01S0383
*               R1 RSTD;                                   /*@Y30LB55*/
*             R1=ADDR(WORKCALL);    /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0384
*             CALL ISDAHEXP;        /* DUMP RECORD           @Y30LB55*/
         L     @15,@CV00906                                     01S0385
         BALR  @14,@15                                          01S0385
*             RFY                                               01S0386
*               R1 UNRSTD;                                 /*@Y30LB55*/
*           END;                    /* END HEX PRINT         @Y30LB55*/
*         ELSE;                     /* DUMP FLAG NOT SET     @Y30LB55*/
@RF00378 DS    0H                                               01S0389
*       END;                        /* END OF ANALYSIS CODE  @Y30LB55*/
*                                                               01S0390
*     /***************************************************************/
*     /*                                                             */
*     /* EOF ON INPUT - SWITCH OR END INPUT MODE                     */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0390
*     ELSE                                                      01S0390
*       DO;                         /* END OF INPUT          @Y30LB55*/
*                                                               01S0390
         B     @RC00226                                         01S0390
@RF00226 DS    0H                                               01S0391
*         /***********************************************************/
*         /*                                                         */
*         /* PRINT ISDA0002 AND ISDA0005 CALCULATE I/O ERROR MESSAGE */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0391
*         I=RETCODIN;               /* SAVE RETURN CODE      @Y30LB55*/
         LH    I,RETCODIN(,SDAWKPTR)                            01S0391
*         SRL(I,2);                 /* DEVIDE BY 4           @Y30LB55*/
         SRL   I,2                                              01S0392
*         IF I<1×I>6 THEN           /* CHECK FOR VALID RANGE @Y30LB55*/
         LTR   I,I                                              01S0393
         BNP   @RT00393                                         01S0393
         CH    I,@CH00090                                       01S0393
         BNH   @RF00393                                         01S0393
@RT00393 DS    0H                                               01S0394
*           DO;                     /* UNEXPECTED RETURN CODE@Y30LB55*/
*             LINE=ISDA0002;        /* MOVE MSG02            @Y30LB55*/
         MVI   LINE+37(CVTPTR),C' '                             01S0395
         MVC   LINE+38(94,CVTPTR),LINE+37(CVTPTR)               01S0395
         MVC   LINE(37,CVTPTR),ISDA0002                         01S0395
*             CVD(RETCODIN,TEMP8);  /* CONVERT RETCODIN      @Y30LB55*/
         LH    @07,RETCODIN(,SDAWKPTR)                          01S0396
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0396
*             RCODE02=EDPAT03;      /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCODE02(4,CVTPTR),EDPAT03                        01S0397
*             ED(RCODE02,TEMP78);   /* EDIT RETCODE          @Y30LB55*/
         ED    RCODE02(4,CVTPTR),TEMP78(SDAWKPTR)               01S0398
*             MSG02ID=DDNAMEIN;     /* MOVE DDNAME INTO ISDA0002
*                                                            @Y30LB55*/
         MVC   MSG02ID(8,CVTPTR),DDNAMEIN(SDAWKPTR)             01S0399
*           END;                    /* END ISDA0002          @Y30LB55*/
*         ELSE                      /* RANGE OK              @Y30LB55*/
*           DO;                     /* MOVE ERROR MESSAGE    @Y30LB55*/
         B     @RC00393                                         01S0401
@RF00393 DS    0H                                               01S0402
*             TEMPPTR=ERRINPUT(I);  /* SET ADDRESS OF MESSAGE@Y30LB55*/
         LR    @07,I                                            01S0402
         SLA   @07,2                                            01S0402
         L     TEMPPTR,ERRINPUT-4(@07)                          01S0402
*             LINE=ISDA00X2;        /* MOVE ISDA0031-35      @Y30LB55*/
         MVI   LINE+38(CVTPTR),C' '                             01S0403
         MVC   LINE+39(93,CVTPTR),LINE+38(CVTPTR)               01S0403
         MVC   LINE(38,CVTPTR),ISDA00X2(TEMPPTR)                01S0403
*             MSGX2ID=DDNAMEIN;     /* MOVE DDNAME INTO MESSAGE 01S0404
*                                                            @Y30LB55*/
         MVC   MSGX2ID(8,CVTPTR),DDNAMEIN(SDAWKPTR)             01S0404
*           END;                    /* END EXPECTED RETURN CODE 01S0405
*                                                            @Y30LB55*/
*         MSG05LOC=ISDA0005;        /* MOVE MSG 05           @Y30LB55*/
@RC00393 MVC   MSG05LOC(38,CVTPTR),ISDA0005                     01S0406
*         CVD(NINREC,TEMP8);        /* CONVERT NINREC        @Y30LB55*/
         L     @07,NINREC(,SDAWKPTR)                            01S0407
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0407
*         TRECM05=EDPAT05;          /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   TRECM05(6,CVTPTR),EDPAT05                        01S0408
*         ED(TRECM05,TEMP68);       /* EDIT NO. RECORDS      @Y30LB55*/
         ED    TRECM05(6,CVTPTR),TEMP68(SDAWKPTR)               01S0409
*         CVD(NTEMPREC,TEMP8);      /* CONVERT NTEMPREC      @Y30LB55*/
         L     @07,NTEMPREC(,SDAWKPTR)                          01S0410
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0410
*         TPRECM05=EDPAT05;         /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   TPRECM05(6,CVTPTR),EDPAT05                       01S0411
*         ED(TPRECM05,TEMP68);      /* EDIT NO. RECORDS      @Y30LB55*/
         ED    TPRECM05(6,CVTPTR),TEMP68(SDAWKPTR)              01S0412
*         ANSI=LSKIP2;              /* SKIP 2 LINES          @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0413
*         RFY                                                   01S0414
*           R1 RSTD;                                       /*@Y30LB55*/
*         R1=ADDR(WORKCALL);        /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0415
*         CALL ISDAPRT0;            /* WRITE ERROR MESSAGE TO@Y30LB55
*                                      SYSPRINT              @Y30LB55*/
         L     @15,@CV00900                                     01S0416
         BALR  @14,@15                                          01S0416
*         ANSI=LSKIP1;              /* RESET TO 1 SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0417
*         CALL ISDATYPE;            /* WRITE ERROR MSG TO SYSTERM
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0418
         BALR  @14,@15                                          01S0418
*         RFY                                                   01S0419
*           R1 UNRSTD;              /* RELEASE REG 1         @Y30LB55*/
*                                                               01S0420
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK FOR SECOND INPUT                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0420
*         NOUTREC=NOUTREC+NTEMPREC; /* INC TOTAL RECORD USED COUNT
*                                                            @Y30LB55*/
         L     @07,NOUTREC(,SDAWKPTR)                           01S0420
         AL    @07,NTEMPREC(,SDAWKPTR)                          01S0420
         ST    @07,NOUTREC(,SDAWKPTR)                           01S0420
*         NINRECT=NINRECT+NINREC;   /* INC TOTAL RECORD READ COUNT
*                                                            @Y30LB55*/
         L     @07,NINRECT(,SDAWKPTR)                           01S0421
         AL    @07,NINREC(,SDAWKPTR)                            01S0421
         ST    @07,NINRECT(,SDAWKPTR)                           01S0421
*         IF INSOURCE='H' THEN                                  01S0422
         CLI   INSOURCE(SDAWKPTR),C'H'                          01S0422
         BNE   @RF00422                                         01S0422
*           DO;                     /* CHECK LOGREC          @Y30LB55*/
*             IF CLOGIN='Y' THEN                                01S0424
         CLI   CLOGIN(LPARMPTR),C'Y'                            01S0424
         BNE   @RF00424                                         01S0424
*               DO;                 /* YES                   @Y30LB55*/
*                 INSOURCE='L';     /* SET LOGREC FLAG       @Y30LB55*/
         MVI   INSOURCE(SDAWKPTR),C'L'                          01S0426
*                 DDNAMEIN='SDALOGIN';/* RESET SDALOGIN DDNAME  01S0427
*                                                            @Y30LB55*/
         MVC   DDNAMEIN(8,SDAWKPTR),@CC00931                    01S0427
*                 RETCODIN=0;       /* RESET READ LOOP FLAG  @Y30LB55*/
         SLR   @07,@07                                          01S0428
         STH   @07,RETCODIN(,SDAWKPTR)                          01S0428
*                 NINREC=0;         /* RESET RECORD COUNTER  @Y30LB55*/
         ST    @07,NINREC(,SDAWKPTR)                            01S0429
*                 NTEMPREC=0;       /* RESET OUT RECORD COUNTER 01S0430
*                                                            @Y30LB55*/
         ST    @07,NTEMPREC(,SDAWKPTR)                          01S0430
*               END;                                       /*@Y30LB55*/
*             ELSE                                              01S0432
*               ;                   /* LOGREC NOT SPECIFIED  @Y30LB55*/
@RF00424 DS    0H                                               01S0433
*           END;                    /* END INSOURCE CHECK    @Y30LB55*/
*         ELSE                                                  01S0434
*           ;                       /* ALREADY READ LOGREC   @Y30LB55*/
@RF00422 DS    0H                                               01S0435
*       END;                        /* END OF INPUT          @Y30LB55*/
*   END;                            /* END OF READ LOOP      @Y30LB55*/
@RC00226 DS    0H                                               01S0436
@DE00217 SLR   @07,@07                                          01S0436
         CH    @07,RETCODIN(,SDAWKPTR)                          01S0436
         BE    @DL00217                                         01S0436
*                                                               01S0437
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF ALL INPUT - PRINT TOTALS ABOUT ALL SDA INPUT FOR THIS  */
*   /* RUN                                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0437
*   IF NINRECT>0 THEN               /* IS RECORD COUNT ZERO  @Y30LB55*/
         L     @15,NINRECT(,SDAWKPTR)                           01S0437
         CR    @15,@07                                          01S0437
         BNH   @RF00437                                         01S0437
*     DO;                           /* NO                    @Y30LB55*/
*       ANSI=LSKIP2;                /* SET 2 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0439
*       LINE=ISDA0003;              /* MOVE ISDA0003         @Y30LB55*/
         MVI   LINE+46(CVTPTR),C' '                             01S0440
         MVC   LINE+47(85,CVTPTR),LINE+46(CVTPTR)               01S0440
         MVC   LINE(46,CVTPTR),ISDA0003                         01S0440
*       FCMSG03=READCH;             /* MOVE READ             @Y30LB55*/
         MVC   FCMSG03(4,CVTPTR),@CC00371                       01S0441
*       CVD(NINRECT,TEMP8);         /* CVD                   @Y30LB55*/
         CVD   @15,TEMP8(,SDAWKPTR)                             01S0442
*       RCMSG03=EDPAT05;            /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCMSG03(6,CVTPTR),EDPAT05                        01S0443
*       ED(RCMSG03,TEMP68);         /* EDIT RECORD COUNT     @Y30LB55*/
         ED    RCMSG03(6,CVTPTR),TEMP68(SDAWKPTR)               01S0444
*       UNPK(TEMP7,ALOWDATE);       /* UNPACK LOW DATE       @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),ALOWDATE(4,SDAWKPTR)           01S0445
*       LYMSG03=TEMP7(3:4);         /* MOVE LOW YEAR         @Y30LB55*/
         MVC   LYMSG03(2,CVTPTR),TEMP7+2(SDAWKPTR)              01S0446
*       LDMSG03=EDPAT03;            /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   LDMSG03(4,CVTPTR),EDPAT03                        01S0447
*       ED(LDMSG03,ALOWDAY);        /* EDIT LOW DAY          @ZM30730*/
         ED    LDMSG03(4,CVTPTR),ALOWDAY(SDAWKPTR)              01S0448
*       UNPK(TEMP7,AHIGHDAT);       /* UNPACK HIGH DATE      @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),AHIGHDAT(4,SDAWKPTR)           01S0449
*       HYMSG03=TEMP7(3:4);         /* MOVE HIGH YEAR        @Y30LB55*/
         MVC   HYMSG03(2,CVTPTR),TEMP7+2(SDAWKPTR)              01S0450
*       HDMSG03=EDPAT03;            /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   HDMSG03(4,CVTPTR),EDPAT03                        01S0451
*       ED(HDMSG03,AHIGHDAY);       /* EDIT HIGH DAY         @ZM30730*/
         ED    HDMSG03(4,CVTPTR),AHIGHDAY(SDAWKPTR)             01S0452
*       RFY                                                     01S0453
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1->ADDR(WORKPTR)     @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0454
*       CALL ISDAPRT0;              /* WRITE ISDA0003        @Y30LB55*/
         L     @15,@CV00900                                     01S0455
         BALR  @14,@15                                          01S0455
*       IF NOUTREC>0 THEN           /* IS OUTPUT COUNT ZERO  @Y30LB55*/
         L     @07,NOUTREC(,SDAWKPTR)                           01S0456
         LTR   @07,@07                                          01S0456
         BNP   @RF00456                                         01S0456
*         DO;                       /* NO                    @Y30LB55*/
*           FCMSG03=USEDCH;         /* MOVE READ             @Y30LB55*/
         MVC   FCMSG03(4,CVTPTR),@CC00373                       01S0458
*           CVD(NOUTREC,TEMP8);     /* CVD                   @Y30LB55*/
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0459
*           RCMSG03=EDPAT05;        /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCMSG03(6,CVTPTR),EDPAT05                        01S0460
*           ED(RCMSG03,TEMP68);     /* EDIT RECORD COUNT     @Y30LB55*/
         ED    RCMSG03(6,CVTPTR),TEMP68(SDAWKPTR)               01S0461
*           UNPK(TEMP7,LOWDATE);    /* UNPACK LOW DATE       @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),LOWDATE(4,SDAWKPTR)            01S0462
*           LYMSG03=TEMP7(3:4);     /* MOVE LOW YEAR         @Y30LB55*/
         MVC   LYMSG03(2,CVTPTR),TEMP7+2(SDAWKPTR)              01S0463
*           LDMSG03=EDPAT03;        /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   LDMSG03(4,CVTPTR),EDPAT03                        01S0464
*           ED(LDMSG03,LOWDAY);     /* EDIT LOW DAY          @ZM30730*/
         ED    LDMSG03(4,CVTPTR),LOWDAY(SDAWKPTR)               01S0465
*           UNPK(TEMP7,HIGHDATE);   /* UNPACK HIGH DATE      @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),HIGHDATE(4,SDAWKPTR)           01S0466
*           HYMSG03=TEMP7(3:4);     /* MOVE HIGH YEAR        @Y30LB55*/
         MVC   HYMSG03(2,CVTPTR),TEMP7+2(SDAWKPTR)              01S0467
*           HDMSG03=EDPAT03;        /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   HDMSG03(4,CVTPTR),EDPAT03                        01S0468
*           ED(HDMSG03,HIGHDAY);    /* EDIT HIGH DAY         @ZM30730*/
         ED    HDMSG03(4,CVTPTR),HIGHDAY(SDAWKPTR)              01S0469
*           RFY                                                 01S0470
*             R1 RSTD;                                     /*@Y30LB55*/
*           R1=ADDR(WORKCALL);      /* R1->ADDR(WORKPTR)     @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0471
*           CALL ISDAPRT0;          /* WRITE ISDA0003        @Y30LB55*/
         L     @15,@CV00900                                     01S0472
         BALR  @14,@15                                          01S0472
*           RFY                                                 01S0473
*             R1 UNRSTD;                                   /*@Y30LB55*/
*         END;                      /* END ISDA0003 FOR RECORDS USED
*                                                            @Y30LB55*/
*       ELSE                                                    01S0475
*         ;                         /* YES, NO RECORDS USED  @Y30LB55*/
@RF00456 DS    0H                                               01S0476
*     END;                          /* END ISDA0005 FOR RECORDS READ
*                                                            @Y30LB55*/
*   ELSE                                                        01S0477
*     ;                             /* NO INPUT READ         @Y30LB55*/
@RF00437 DS    0H                                               01S0478
*                                                               01S0478
*   /*****************************************************************/
*   /*                                                               */
*   /* IF RETCODE WAS NOT SET BY ISDAPARM OR ANY INTERNAL PROC       */
*   /* INDICATING A TERMINAL ERROR, THEN CALL ISDASDA1 TO PRODUCE SDA*/
*   /* REPORTS                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0478
*   IF NOUTREC=0&RETCODE=0 THEN                                 01S0478
         SLR   @07,@07                                          01S0478
         C     @07,NOUTREC(,SDAWKPTR)                           01S0478
         BNE   @RF00478                                         01S0478
         CH    @07,RETCODE(,SDAWKPTR)                           01S0478
         BNE   @RF00478                                         01S0478
*     RETCODE=20;                   /* SET RETURN CODE FOR NO INPUT
*                                                            @Y30LB55*/
         MVC   RETCODE(2,SDAWKPTR),@CH00405                     01S0479
*   ELSE                                                        01S0480
*     ;                                                    /*@Y30LB55*/
*                                                               01S0480
@RF00478 DS    0H                                               01S0481
*   /*****************************************************************/
*   /*                                                               */
*   /* TRACE                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0481
*   IF RETCODE=0 THEN                                           01S0481
         ICM   @07,3,RETCODE(SDAWKPTR)                          01S0481
         BNZ   @RF00481                                         01S0481
*     CALL DUMPCVT;                 /* DUMP ISDACVT          @Y30LB55*/
         BAL   @14,DUMPCVT                                      01S0482
*   ELSE                                                        01S0483
*     ;                             /* END OF TRACE          @Y30LB55*/
@RF00481 DS    0H                                               01S0484
*   IF RETCODE=0 THEN                                           01S0484
         ICM   @07,3,RETCODE(SDAWKPTR)                          01S0484
         BNZ   @RF00484                                         01S0484
*     CALL ISDASDA1;                /* CALL OUTPUT ROUTINE   @Y30LB55*/
         BAL   @14,ISDASDA1                                     01S0485
*   ELSE                                                        01S0486
*     DO;                           /* TERMINAL ERROR SET. NO OUTPUT
*                                      PRODUCED BY SDA       @Y30LB55*/
*                                                               01S0486
         B     @RC00484                                         01S0486
@RF00484 DS    0H                                               01S0487
*       /*************************************************************/
*       /*                                                           */
*       /* SDA TERMINAL ERRORS                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0487
*       ANSI=LSKIP2;                /* SET 2 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0487
*       I=RETCODE;                  /* MOVE SDA RETURN CODE  @Y30LB55*/
         LH    I,RETCODE(,SDAWKPTR)                             01S0488
*       SRL(I,2);                   /* DEVIDE BY 4           @Y30LB55*/
         SRL   I,2                                              01S0489
*       IF(I<1)×(I>5) THEN          /* IS I 1-5              @Y30LB55*/
         LTR   I,I                                              01S0490
         BNP   @RT00490                                         01S0490
         CH    I,@CH00175                                       01S0490
         BNH   @RF00490                                         01S0490
@RT00490 DS    0H                                               01S0491
*         I=10;                     /* NO, SET TO ISDA0045   @Y30LB55*/
         LA    I,10                                             01S0491
*       ELSE                                                    01S0492
*         ;                         /* YES, I OK             @Y30LB55*/
@RF00490 DS    0H                                               01S0493
*       TEMPPTR=ERRSEVER(I);        /* SET MESSAGE POINTER   @Y30LB55*/
         LR    @07,I                                            01S0493
         SLA   @07,2                                            01S0493
         L     TEMPPTR,ERRSEVER-4(@07)                          01S0493
*       LINE=ISDA00X3;              /* MOVE ERROR MESSAGE    @Y30LB55*/
         MVI   LINE+52(CVTPTR),C' '                             01S0494
         MVC   LINE+53(79,CVTPTR),LINE+52(CVTPTR)               01S0494
         MVC   LINE(52,CVTPTR),ISDA00X3(TEMPPTR)                01S0494
*       RFY                                                     01S0495
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0496
*       CALL ISDAPRT0;              /* PRINT ISDA0045        @Y30LB55*/
         L     @15,@CV00900                                     01S0497
         BALR  @14,@15                                          01S0497
*       ANSI=LSKIP1;                /* RESET TO 1 LINE SKIP  @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0498
*       CALL ISDATYPE;              /* PRINT ERROR MSG ON SYSTERM
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0499
         BALR  @14,@15                                          01S0499
*       RFY                                                     01S0500
*         R1 UNRSTD;                                       /*@Y30LB55*/
*     END;                          /* END ABNORMAL END PRINT@Y30LB55*/
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEANUP SECTION                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0502
*   ANSI=LSKIP2;                    /* SKIP 2 LINES          @Y30LB55*/
@RC00484 MVI   ANSI(CVTPTR),C'0'                                01S0502
*   LINE=ISDA0099;                  /* MOVE ISDA0099         @Y30LB55*/
         MVI   LINE+14(CVTPTR),C' '                             01S0503
         MVC   LINE+15(117,CVTPTR),LINE+14(CVTPTR)              01S0503
         MVC   LINE(14,CVTPTR),ISDA0099                         01S0503
*   RFY                                                         01S0504
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0505
*   CALL ISDAPRT0;                  /* PRINT ISDA0099        @Y30LB55*/
         L     @15,@CV00900                                     01S0506
         BALR  @14,@15                                          01S0506
*   IF CNFG0PTR^=0 THEN             /* WAS CONFIGURATION ALOCATED
*                                                            @Y30LB55*/
         ICM   @07,15,CNFG0PTR(CVTPTR)                          01S0507
         BZ    @RF00507                                         01S0507
*     CALL ISDACNF1;                /* CALL TO FREE CNFG WORKAREA
*                                                            @Y30LB55*/
         L     @15,@CV00899                                     01S0508
         BALR  @14,@15                                          01S0508
*   ELSE;                           /* NO TABLE TO FREE      @Y30LB55*/
@RF00507 DS    0H                                               01S0510
*   RFY                                                         01S0510
*     R1 UNRSTD;                    /* RELEASE REG 1         @Y30LB55*/
*   CALL DUMPCVT;                   /* TRACE - DUMP ISDACVT  @Y30LB55*/
         BAL   @14,DUMPCVT                                      01S0511
*   RFY                                                         01S0512
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0513
*   CALL ISDAPRTC;                  /* CLOSE SYSPRINT        @Y30LB55*/
         L     @15,@CV00903                                     01S0514
         BALR  @14,@15                                          01S0514
*   CALL ISDATYPC;                  /* CLOSE SYSTERM         @Y30LB55*/
         L     @15,@CV00905                                     01S0515
         BALR  @14,@15                                          01S0515
*   RFY                                                         01S0516
*     R1 UNRSTD;                    /* RELEASE REG 1         @Y30LB55*/
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE FREEMAIN FOR ISDAPRMS, ISDACVT, AND SDAWORK             */
*   /*                                                               */
*   /*****************************************************************/
*   RFY                                                         01S0517
*    (R0,                                                       01S0517
*     R1) RSTD;                     /* FREEMAIN SECTION      @Y30LB55*/
*   R0=LENGTH(ISDAPRMS);                                   /*@Y30LB55*/
         LA    R0,49                                            01S0518
*   R1=LPARMPTR;                    /* FREE ISDAPRMS         @Y30LB55*/
         LR    R1,LPARMPTR                                      01S0519
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREEMAIN              @Y30LB55*/
         FREEMAIN R,LV=(0),A=(1)
*   R0=LENGTH(ISDACVT);                                    /*@Y30LB55*/
         LA    R0,576                                           01S0521
*   R1=CVTPTR;                      /* FREE ISDACVT          @Y30LB55*/
         LR    R1,CVTPTR                                        01S0522
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREEMAIN              @Y30LB55*/
         FREEMAIN R,LV=(0),A=(1)
*   R0=LENGTH(SDAWORK);             /* LENGTH OF WORKAREA    @Y30LB55*/
         LA    R0,154                                           01S0524
*   R1=SDAWKPTR;                    /* ADDR OF WORKAREA      @Y30LB55*/
         LR    R1,SDAWKPTR                                      01S0525
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREEMAIN              @Y30LB55*/
         FREEMAIN R,LV=(0),A=(1)
*   RFY                                                         01S0527
*    (R0,                                                       01S0527
*     R1) UNRSTD;                   /* END FREEMAIN          @Y30LB55*/
*                                                               01S0527
*   /*****************************************************************/
*   /*                                                               */
*   /* ISDASDA0 RETURN TO VS SYSTEM WITH RETCODE                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0528
*   RETURN CODE(RETCODE);           /* RETURN TO VS          @Y30LB55*/
         LH    @09,RETCODE(,SDAWKPTR)                           01S0528
         L     @13,4(,@13)                                      01S0528
         L     @00,@SIZDATD                                     01S0528
         LR    @01,@10                                          01S0528
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                          01S0528
         L     @14,12(,@13)                                     01S0528
         LM    @00,@12,20(@13)                                  01S0528
         BR    @14                                              01S0528
*                                                               01S0529
*   /*****************************************************************/
*   /*                                                               */
*   /* DATACHEK - CHECK FOR BAD DATA THIS PROC CHECKS THE INPUT DATA */
*   /* FOR INVALID DATE, DATE NOT WITHIN REQUESTED TIME INTERVAL, NO */
*   /* FORMAT IN MSC RECORD, SSID INVALID IN MSC FORMAT 1,3,4 OR 5   */
*   /* RECORDS, SENSE DATA ALL ZERO IN MSS AND HOST 3330 RECORDS. IF */
*   /* ANY CHECK FAILS, USEFLAG(8) IS RESET TO 0 AND THE ERROR PRINT */
*   /* FLAG, USEFLAG(4), IS SET TO ONE. ALSO, ERRORMSG IS SET TO     */
*   /* ISDA0009-12 DEPENDING ON THE ERROR.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0529
*DATACHEK:                                                      01S0529
*   PROC;                           /* CHECK DATA FOR VALIDITY  01S0529
*                                                            @Y30LB55*/
@EL00001 L     @13,4(,@13)                                      01S0529
@EF00001 L     @00,@SIZDATD                                     01S0529
         LR    @01,@10                                          01S0529
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0529
         BR    @14                                              01S0529
DATACHEK STM   @14,@12,12(@13)                                  01S0529
*   I=0;                            /* ZERO ERROR FLAG       @Y30LB55*/
*                                                               01S0530
         SLR   I,I                                              01S0530
*   /*****************************************************************/
*   /*                                                               */
*   /* INVALID DATE - ISDA0009                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0531
*                                                               02S0531
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK DATE AND TIME FOR VALID PACKED DECIAML                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0531
*   IF SWITCH0(5)='1'B THEN         /* TIME MACRO USED       @ZM31107*/
         L     @07,LOGPTR(,SDAWKPTR)                            02S0531
         TM    SWITCH0(@07),B'00001000'                         02S0531
         BNO   @RF00531                                         02S0531
*     DO;                           /* CHECK IT              @ZM31107*/
*       TEMP8=DATETIME;             /* MOVE DATE AND TIME    @ZM31078*/
         MVC   TEMP8(8,SDAWKPTR),DATETIME(@07)                  02S0533
*       TEMP8(4)=TEMP8(4)&'0F'X;    /* CHECK LAST F IN DATE  @ZM31078*/
         NI    TEMP8+3(SDAWKPTR),X'0F'                          02S0534
*       IF TEMP8(4)^='0F'X×DAY(2)>'9F'X THEN/* INVALID DAY(2)@ZM31078*/
         CLI   TEMP8+3(SDAWKPTR),X'0F'                          02S0535
         BNE   @RT00535                                         02S0535
         CLI   DAY+1(@07),X'9F'                                 02S0535
         BNH   @RF00535                                         02S0535
@RT00535 DS    0H                                               02S0536
*         I=1;                      /* SET I -> ISDA0009     @ZM31078*/
         LA    I,1                                              02S0536
*       ELSE                        /* DAY(2) OK             @ZM31078*/
*         DO;                       /* CHECK THE REST        @ZM31078*/
         B     @RC00535                                         02S0537
@RF00535 DS    0H                                               02S0538
*           TEMP8(4)='00'X;         /* ZERO DAY(2)           @ZM31078*/
         MVI   TEMP8+3(SDAWKPTR),X'00'                          02S0538
*           DO J=1 TO 8;            /* CHECK ALL 8 CHAR      @ZM31078*/
         LA    J,1                                              02S0539
@DL00539 DS    0H                                               02S0540
*             IF TEMP8(J)>'99'X×(TEMP8(J)&'0F'X)>'09'X THEN /*  02S0540
*                                      DIGITS NOT PACKED DEC @ZM31078*/
         LR    @07,SDAWKPTR                                     02S0540
         ALR   @07,J                                            02S0540
         CLI   TEMP8-1(@07),X'99'                               02S0540
         BH    @RT00540                                         02S0540
         LR    @07,SDAWKPTR                                     02S0540
         ALR   @07,J                                            02S0540
         MVC   @TS00001(1),TEMP8-1(@07)                         02S0540
         NI    @TS00001,X'0F'                                   02S0540
         CLI   @TS00001,X'09'                                   02S0540
         BNH   @RF00540                                         02S0540
@RT00540 DS    0H                                               02S0541
*               I=1;                /* SET I -> ISDA0009     @ZM31078*/
         LA    I,1                                              02S0541
*             ELSE;                 /* THIS CHAR OK          @ZM31078*/
@RF00540 DS    0H                                               02S0543
*           END;                    /* END LOOP THROUGH 8    @ZM31078*/
         AL    J,@CF00078                                       02S0543
         CH    J,@CH00066                                       02S0543
         BNH   @DL00539                                         02S0543
*         END;                      /* END CHECK DATE-TIME   @ZM31078*/
*       IF I=0 THEN                 /* GOOD DATE-TIME        @ZM31078*/
@RC00535 LTR   I,I                                              02S0545
         BNZ   @RF00545                                         02S0545
*         USEFLAG(1)='1'B;          /* YES, SET VALID FLAG   @ZM31078*/
         OI    USEFLAG(SDAWKPTR),B'10000000'                    02S0546
*       ELSE;                       /* NO, DATE-TIME BAD     @ZM31078*/
@RF00545 DS    0H                                               02S0548
*     END;                          /* END CHECK DATE-TIME   @ZM31107*/
*   ELSE;                           /* TIME MACRO NOT USED   @ZM31107*/
@RF00531 DS    0H                                               02S0550
*   TEMP28=''B;                     /* ZERO MASK             @ZM31121*/
         XC    TEMP28(28,SDAWKPTR),TEMP28(SDAWKPTR)             01S0550
*   IF I=0 THEN                     /* DATE VALID            @ZM31078*/
*                                                               01S0551
         LTR   I,I                                              01S0551
         BNZ   @RF00551                                         01S0551
*     /***************************************************************/
*     /*                                                             */
*     /* CHECK IF DATE WITHIN REQUESTED INTERVAL - ISDA0014          */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0552
*     IF DATE<CSTART×DATE>CEND THEN /* IF DATE NOT IN INTERVAL  01S0552
*                                                            @Y30LB55*/
         L     @07,LOGPTR(,SDAWKPTR)                            01S0552
         CLC   DATE(4,@07),CSTART(LPARMPTR)                     01S0552
         BL    @RT00552                                         01S0552
         CLC   DATE(4,@07),CEND(LPARMPTR)                       01S0552
         BNH   @RF00552                                         01S0552
@RT00552 DS    0H                                               01S0553
*       USEFLAG(8)='0'B;            /* TURN USE FLAG OFF     @Y30LB55*/
         NI    USEFLAG(SDAWKPTR),B'11111110'                    01S0553
*     ELSE                          /* DATE OK               @Y30LB55*/
*      DO;                          /* CHECK SENSE DATA      @YD00147*/
         B     @RC00552                                         01S0554
@RF00552 DS    0H                                               01S0555
*       IF INDEVTYP='S' THEN        /* MSC RECORD            @Y30LB55*/
*                                                               01S0555
         CLI   INDEVTYP(SDAWKPTR),C'S'                          01S0555
         BNE   @RF00555                                         01S0555
*         /***********************************************************/
*         /*                                                         */
*         /* CHECKS FOR SUBSYSTEM RECORDS                            */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0556
*         DO;                       /* CHECK MSC RECORDS     @Y30LB55*/
*                                                               01S0556
*           /*********************************************************/
*           /*                                                       */
*           /* NO FORMAT NUMBER - ISDA0010                           */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0557
*           IF FORMATNO(1:6)='000000'B THEN/* NO FORMAT      @Y30LB55*/
         L     @07,SENSEPTR(,SDAWKPTR)                          01S0557
         TM    FORMATNO(@07),B'11111100'                        01S0557
         BNZ   @RF00557                                         01S0557
*             I=2;                  /* SET I -> ISDA0010     @Y30LB55*/
         LA    I,2                                              01S0558
*           ELSE                    /* FORMAT OK             @Y30LB55*/
*             DO;                   /* CHECK SSID            @Y30LB55*/
*                                                               01S0559
         B     @RC00557                                         01S0559
@RF00557 DS    0H                                               01S0560
*               /*****************************************************/
*               /*                                                   */
*               /* SSID VALIDITY CHECK - ISDA0011 - I=3              */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0560
*                                                               02S0560
*   /*****************************************************************/
*   /*                                                               */
*   /* SSID VALIDITY CHECK FOR FORMATS 1,3,4, AND 5. K=CHAR 1, L=CHAR*/
*   /* 2, J=CHAR 3                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0560
*   J=SUBSYSID;                     /* MOVE 16 BIT SSID      @Y30LB55*/
         L     @15,SENSEPTR(,SDAWKPTR)                          02S0560
         SLR   J,J                                              02S0560
         ICM   J,3,SUBSYSID(@15)                                02S0560
*   K=J&'0F00'X;                    /* MASK ALL BUT CHAR 1 OF SSID
*                                                            @Y30LB55*/
         LA    K,3840                                           02S0561
         NR    K,J                                              02S0561
*   SRL(K,8);                       /* SHIFT CHAR 1 TO LOW BITS 02S0562
*                                                            @Y30LB55*/
         SRL   K,8                                              02S0562
*   L=J&'00F0'X;                    /* MASK ALL BUT CHAR 2 OF SSID
*                                                            @Y30LB55*/
         LA    @14,240                                          02S0563
         NR    @14,J                                            02S0563
         ST    @14,L                                            02S0563
*   SRL(L,4);                       /* SHIFT CHAR 1 TO LOW BITS 02S0564
*                                                            @Y30LB55*/
         SRL   @14,4                                            02S0564
         ST    @14,L                                            02S0564
*   J=J&'000F'X;                    /* MASK ALL BUT CHAR 3 OF SSID
*                                                            @Y30LB55*/
         N     J,@CF00966                                       02S0565
*   IF FORMATNO(1)='1'B THEN        /* FORMAT 0              @ZA29141*/
         TM    FORMATNO(@15),B'10000000'                        02S0566
         BNO   @RF00566                                         02S0566
*     IF SUBFMTMG='05'X×((SUBFMTMG='06'X×SUBFMTMG='09'X)&       02S0567
*                                       SSIDFLAG(2)='1'B) THEN /*
*                                MSG 05 OR MSG 09 WITH SUU   @ZA28897*/
         CLI   SUBFMTMG(@15),X'05'                              02S0567
         BE    @RT00567                                         02S0567
         CLI   SUBFMTMG(@15),X'06'                              02S0567
         BE    @GL00015                                         02S0567
         CLI   SUBFMTMG(@15),X'09'                              02S0567
         BNE   @RF00567                                         02S0567
@GL00015 L     @01,SENSEPTR(,SDAWKPTR)                          02S0567
         TM    SSIDFLAG(@01),B'01000000'                        02S0567
         BNO   @RF00567                                         02S0567
@RT00567 DS    0H                                               02S0568
*       IF(K^=2)×(L>3)×(J>7) THEN   /* YES, IS IT DRD SSID   @Y30LB55*/
         CH    K,@CH00097                                       02S0568
         BNE   @RT00568                                         02S0568
         L     @15,L                                            02S0568
         CH    @15,@CH00082                                     02S0568
         BH    @RT00568                                         02S0568
         CH    J,@CH00294                                       02S0568
         BNH   @RF00568                                         02S0568
@RT00568 DS    0H                                               02S0569
*         I=3;                      /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0569
*       ELSE;                       /* SSID OK               @Y30LB55*/
@RF00568 DS    0H                                               02S0571
*     ELSE;                         /* NOT 05 OR 6/9 WITH SUU@ZA28897*/
@RF00567 DS    0H                                               02S0572
*   ELSE                            /* CHECH NEXT FORMAT     @Y30LB55*/
*     IF FORMATNO(4)='1'B THEN      /* FORMAT 3 CHECK        @Y30LB55*/
         B     @RC00566                                         02S0572
@RF00566 L     @01,SENSEPTR(,SDAWKPTR)                          02S0572
         TM    FORMATNO(@01),B'00010000'                        02S0572
         BNO   @RF00572                                         02S0572
*       IF(K^=1)×(L>3)×(J>2) THEN   /* BAD SSID              @Y30LB55*/
         CH    K,@CH00078                                       02S0573
         BNE   @RT00573                                         02S0573
         L     @15,L                                            02S0573
         CH    @15,@CH00082                                     02S0573
         BH    @RT00573                                         02S0573
         CH    J,@CH00097                                       02S0573
         BNH   @RF00573                                         02S0573
@RT00573 DS    0H                                               02S0574
*         I=3;                      /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0574
*       ELSE;                       /* SSID OK               @Y30LB55*/
@RF00573 DS    0H                                               02S0576
*     ELSE                                                      02S0576
*       IF FORMATNO(5)='1'B THEN    /* FORMAT 4 CHECK        @Y30LB55*/
         B     @RC00572                                         02S0576
@RF00572 L     @01,SENSEPTR(,SDAWKPTR)                          02S0576
         TM    FORMATNO(@01),B'00001000'                        02S0576
         BNO   @RF00576                                         02S0576
*         IF K=2 THEN               /* CHECK DRD SSID        @Y30LB55*/
         CH    K,@CH00097                                       02S0577
         BNE   @RF00577                                         02S0577
*           IF L>3×J>7 THEN         /* BAD SSID              @Y30LB55*/
         L     @07,L                                            02S0578
         CH    @07,@CH00082                                     02S0578
         BH    @RT00578                                         02S0578
         CH    J,@CH00294                                       02S0578
         BNH   @RF00578                                         02S0578
@RT00578 DS    0H                                               02S0579
*             I=3;                  /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0579
*           ELSE;                   /* SSID OK               @Y30LB55*/
@RF00578 DS    0H                                               02S0581
*         ELSE                                                  02S0581
*           IF K=4 THEN             /* CHECK DRC SSID        @Y30LB55*/
         B     @RC00577                                         02S0581
@RF00577 CH    K,@CH00101                                       02S0581
         BNE   @RF00581                                         02S0581
*             IF L>3×J>3 THEN       /* BAD SSID              @Y30LB55*/
         LA    @07,3                                            02S0582
         C     @07,L                                            02S0582
         BL    @RT00582                                         02S0582
         CR    J,@07                                            02S0582
         BNH   @RF00582                                         02S0582
@RT00582 DS    0H                                               02S0583
*               I=3;                /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0583
*             ELSE;                 /* SSID OK               @Y30LB55*/
@RF00582 DS    0H                                               02S0585
*           ELSE                                                02S0585
*             IF K=8 THEN           /* CHECK SA SSID         @Y30LB55*/
         B     @RC00581                                         02S0585
@RF00581 CH    K,@CH00066                                       02S0585
         BNE   @RF00585                                         02S0585
*               IF J>0 THEN         /* BAD SSID              @Y30LB55*/
         LTR   J,J                                              02S0586
         BNP   @RF00586                                         02S0586
*                 I=3;              /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0587
*               ELSE;               /* SSID OK               @Y30LB55*/
@RF00586 DS    0H                                               02S0589
*             ELSE                  /* CHECK DASD SSID       @ZA14723*/
*               IF K^=0 THEN        /* K NOT 0,2,4, OR 8     @ZA14723*/
         B     @RC00585                                         02S0589
@RF00585 LTR   K,K                                              02S0589
         BZ    @RF00589                                         02S0589
*                 I=3;              /* BAD CHAR 1, SET I->ISDA0011
*                                                            @ZA14723*/
         LA    I,3                                              02S0590
*               ELSE;               /* SSID OK               @ZA14723*/
@RF00589 DS    0H                                               02S0592
*       ELSE                                                    02S0592
*         IF FORMATNO(6)='1'B THEN  /* FORMAT 5 CHECK        @Y30LB55*/
         B     @RC00576                                         02S0592
@RF00576 L     @01,SENSEPTR(,SDAWKPTR)                          02S0592
         TM    FORMATNO(@01),B'00000100'                        02S0592
         BNO   @RF00592                                         02S0592
*           IF K=8 THEN             /* CHECK SA SSID         @Y30LB55*/
         CH    K,@CH00066                                       02S0593
         BNE   @RF00593                                         02S0593
*             IF J>0 THEN           /* BAD SSID              @Y30LB55*/
         LTR   J,J                                              02S0594
         BNP   @RF00594                                         02S0594
*               I=3;                /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0595
*             ELSE;                 /* SSID OK               @Y30LB55*/
@RF00594 DS    0H                                               02S0597
*           ELSE                    /* CKECK 3330 SSID       @Y30LB55*/
*             IF K^=0 THEN          /* BAD SSID FOR 3330     @Y30LB55*/
         B     @RC00593                                         02S0597
@RF00593 LTR   K,K                                              02S0597
         BZ    @RF00597                                         02S0597
*               I=3;                /* SET I -> ISDA0011     @Y30LB55*/
         LA    I,3                                              02S0598
*             ELSE;                 /* SSID OK               @Y30LB55*/
@RF00597 DS    0H                                               02S0600
*         ELSE;                     /* NO MORE FORMATS TO CHECK 02S0600
*                                                            @Y30LB55*/
@RF00592 DS    0H                                               02S0601
*/* END OF SSIDCHEK                                          @Y30LB55*/
*                                                               02S0601
*             END;                  /* END SSID CHECK        @Y30LB55*/
*                                                               01S0601
@RC00592 DS    0H                                               01S0601
@RC00576 DS    0H                                               01S0601
@RC00572 DS    0H                                               01S0601
@RC00566 DS    0H                                               01S0602
*           /*********************************************************/
*           /*                                                       */
*           /* BYTES 0-31 ALL ZERO IN FORMAT 0-5 - ISDA0012          */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0602
*           IF(ISDAMSCS(1:4)=TEMP4&SUBSENSE=TEMP28) THEN/* SENSE ZERO
*                                                            @ZM30730*/
@RC00557 L     @07,SENSEPTR(,SDAWKPTR)                          01S0602
         CLC   ISDAMSCS(4,@07),TEMP4(SDAWKPTR)                  01S0602
         BNE   @RF00602                                         01S0602
         CLC   SUBSENSE(28,@07),TEMP28(SDAWKPTR)                01S0602
         BNE   @RF00602                                         01S0602
*             I=4;                  /* SET I -> ISDA0012     @Y30LB55*/
         LA    I,4                                              01S0603
*           /*********************************************************/
*           /*                                                       */
*           /* I=5  ISDA0014   INVALID SA FORMAT                     */
*           /*      CHECK MSS FORMAT 4 SA FORMAT 8-F                 */
*           /*      CHECK MSS FORMAT 5 SA FORMAT 0-7                 */
*           /*                                                       */
*           /*********************************************************/
*           ELSE                    /* CHECK SA FORMATS      @Y30LB55*/
*             IF FORMATNO(5)='1'B&SUBFMTMG<'80'X THEN /*FMT 4@Y30LB55*/
         B     @RC00602                                         01S0604
@RF00602 L     @07,SENSEPTR(,SDAWKPTR)                          01S0604
         TM    FORMATNO(@07),B'00001000'                        01S0604
         BNO   @RF00604                                         01S0604
         CLI   SUBFMTMG(@07),X'80'                              01S0604
         BNL   @RF00604                                         01S0604
*               I=5;                /* INVALID SA FORMAT     @Y30LB55*/
         LA    I,5                                              01S0605
*             ELSE                  /* CHECK FORMAT 5 SUBFMT @Y30LB55*/
*               IF FORMATNO(6)='1'B&SUBFMTMG>'7F'X THEN /*   @Y30LB55*/
         B     @RC00604                                         01S0606
@RF00604 L     @07,SENSEPTR(,SDAWKPTR)                          01S0606
         TM    FORMATNO(@07),B'00000100'                        01S0606
         BNO   @RF00606                                         01S0606
         CLI   SUBFMTMG(@07),X'7F'                              01S0606
         BNH   @RF00606                                         01S0606
*                 I=5;              /* INVALID SA FORMAT     @Y30LB55*/
         LA    I,5                                              01S0607
*               ELSE                                            01S0608
*                ;                  /* END THIS ROUND OF CHECKS 01S0608
*                                                            @Y30LB55*/
@RF00606 DS    0H                                               01S0609
*         END;                      /* END MSC RECORD CHECKS @Y30LB55*/
*                                                               01S0610
*       /*************************************************************/
*       /*                                                           */
*       /* 3330 SA TO HOST - BYTES 0-23 ALL ZERO   - ISDA0012        */
*       /* 3330 SA FORMAT NOT 0-7                  - ISDA0014        */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0610
*       ELSE                                                    01S0610
*        DO;                        /* HOST 3330             @Y30LB55*/
         B     @RC00555                                         01S0610
@RF00555 DS    0H                                               01S0611
*         J=DASDFMTN&'F0'X;         /* MASK OFF MESSAGE      @Y30LB55*/
         L     @07,SENSEPTR(,SDAWKPTR)                          01S0611
         LA    J,240                                            01S0611
         SLR   @15,@15                                          01S0611
         IC    @15,DASDFMTN(,@07)                               01S0611
         NR    J,@15                                            01S0611
*         IF ISDAMSCS(1:24)=TEMP28(1:24) THEN/* ZERO SENSE   @Y30LB55*/
         CLC   ISDAMSCS(24,@07),TEMP28(SDAWKPTR)                01S0612
         BNE   @RF00612                                         01S0612
*           I=4;                    /* SET I -> ISDA0012     @Y30LB55*/
         LA    I,4                                              01S0613
*         ELSE                                                  01S0614
*           IF J>'7F'X THEN         /* FORMAT 0-7            @Y30LB55*/
         B     @RC00612                                         01S0614
@RF00612 CH    J,@CH00970                                       01S0614
         BNH   @RF00614                                         01S0614
*             I=5;                  /* NO, SET ISDA0014      @Y30LB55*/
         LA    I,5                                              01S0615
*           ELSE;                   /* NEXT 3330 CHECK       @YD00147*/
@RF00614 DS    0H                                               01S0617
*        END;                       /* END 3330 CHECKS       @Y30LB55*/
@RC00612 DS    0H                                               01S0618
*/* END HOST 3330 CHECKS                                     @Y30LB55*/
*                                                               01S0618
*       /*************************************************************/
*       /*                        I = 6                              */
*       /* CHECK FOR ZERO STATUS BYTE IN ALL OBR RECORDS  -  ISDA0015*/
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0618
*       IF I=0&IRECTYPE='O'&STATUS='00'X THEN/* IS OBR STATUS=00
*                                                            @YD00147*/
@RC00555 LTR   I,I                                              01S0618
         BNZ   @RF00618                                         01S0618
         CLI   IRECTYPE(SDAWKPTR),C'O'                          01S0618
         BNE   @RF00618                                         01S0618
         L     @07,SENSEPTR(,SDAWKPTR)                          01S0618
         CLI   STATUS(@07),X'00'                                01S0618
         BNE   @RF00618                                         01S0618
*         IF INDEVTYP='S' THEN      /* RECORD FROM MSS       @ZM31022*/
         CLI   INDEVTYP(SDAWKPTR),C'S'                          01S0619
         BNE   @RF00619                                         01S0619
*           I=6;                    /* YES, SET ISDA0015     @YD00147*/
         LA    I,6                                              01S0620
*         ELSE;                     /* NO, 3330 RECORD OK    @ZA20267*/
@RF00619 DS    0H                                               01S0622
*       ELSE;                       /* NO, STATUS NOT ZERO   @YD00147*/
@RF00618 DS    0H                                               01S0623
*       IF I=4&INDEVTYP='R' THEN    /* REAL 3330 ALL ZERO    @ZA09544*/
         CH    I,@CH00101                                       01S0623
         BNE   @RF00623                                         01S0623
         CLI   INDEVTYP(SDAWKPTR),C'R'                          01S0623
         BNE   @RF00623                                         01S0623
*         DO;                       /* YES, IGNORE RECORD    @ZA09544*/
*           I=0;                    /* RESET ERROR FLAG      @ZA09544*/
         SLR   I,I                                              01S0625
*           USEFLAG(8)='0'B;        /* TURN USE FLAG OFF     @ZA09544*/
         NI    USEFLAG(SDAWKPTR),B'11111110'                    01S0626
*         END;                      /* END 3330 REAL ZEROS   @ZA09544*/
*       ELSE;                       /* NOT ZERO 3330 REAL    @ZA09544*/
@RF00623 DS    0H                                               01S0629
*     END;                          /* END CHECK OF SENSE    @YD00147*/
*   ELSE;                           /* INVALID DATE          @ZM31078*/
@RF00551 DS    0H                                               01S0631
*   IF I>0 THEN                     /* WAS AN ERROR FOUND    @Y30LB55*/
@RC00551 LTR   I,I                                              01S0631
         BNP   @RF00631                                         01S0631
*     DO;                           /* YES, SET ERROR MESSAGE WITH I
*                                                            @Y30LB55*/
*       USEFLAG(8)='0'B;            /* TURN USE FLAG OFF     @Y30LB55*/
         NI    USEFLAG(SDAWKPTR),B'11111110'                    01S0633
*       RETDCNT=RETDCNT+1;          /* INC DATA ERRORS COUNT @Y30LB55*/
         LA    @07,1                                            01S0634
         AH    @07,RETDCNT(,SDAWKPTR)                           01S0634
         STH   @07,RETDCNT(,SDAWKPTR)                           01S0634
*       USEFLAG(4)='1'B;            /* TURN PRINT ON         @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00010000'                    01S0635
*       TEMPPTR=ERRDATAP(I);        /* SET PTR TO ERROR MESSAGE 01S0636
*                                                            @Y30LB55*/
         LR    @07,I                                            01S0636
         SLA   @07,2                                            01S0636
         L     TEMPPTR,ERRDATAP-4(@07)                          01S0636
*       ERRORMSG=ISDA00X1;          /* MOVE ERROR MESSAGE    @Y30LB55*/
         MVC   ERRORMSG(38,CVTPTR),ISDA00X1(TEMPPTR)            01S0637
*     END;                          /* END OF ERROR MESSAGE MOVE CODE
*                                                            @Y30LB55*/
*   ELSE                                                        01S0639
*     ;                             /* NO ERRORS FOUND       @Y30LB55*/
@RF00631 DS    0H                                               01S0640
*   END DATACHEK;                                          /*@Y30LB55*/
@EL00002 DS    0H                                               01S0640
@EF00002 DS    0H                                               01S0640
@ER00002 LM    @14,@12,12(@13)                                  01S0640
         BR    @14                                              01S0640
*                                                               01S0641
*   /*****************************************************************/
*   /*                                                               */
*   /* SDAACC00 - CODE TO CALL ACCUMULATORS THIS PROC CHECKS THE     */
*   /* APPROPIATE FLAGS IN RPTTABLE FOR EACH ACCUMULATOR WITH        */
*   /* ISDAPRMS AND THE 3 MASKS BUILT BY SDAFMTCK. THE MODEL         */
*   /* STRUCTURE MRPTTAB IS BASED OFF THE 1ST ENTRY IN RPTTABLE AND  */
*   /* MOVED FROM ENTRY TO ENTRY TO THE END OF THE TABLE. EACH ENTRY */
*   /* IS CHECKED FOR THE FOLLOWING: WAS REPORT XXX REQUESTED, IF SO */
*   /* HAS ISDAXXX0 EVER RETURNED AN ERROR CODE OF 4, IF NOT DOES    */
*   /* ISDAXXX0 WANT THIS MSC FORMAT, IF SO DOES ISDAXXX0 WANT THIS  */
*   /* SUBFORMAT, IF SO DOES ISDAXXX0 WANT THIS MESSAGE CODE. IF SO  */
*   /* CALL ISDAXXX0 AND SAVE THE RETURN CODE IN XXXFLAGS. IF NO     */
*   /* ACCUMULATOR WANTS THIS RECORD OR IF ANY ACCUMULATOR REJECTS   */
*   /* THE RECORD THE PRINT FLAG USEFLAG(4) IS SET. USEFLAG(8) WILL  */
*   /* BE 0 IF NO ACCUMULATOR WANTED THE RECORD.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0641
*SDAACC00:                                                      01S0641
*   PROC;                           /* CODE TO CALL ACCUMULATORS
*                                                            @Y30LB55*/
SDAACC00 STM   @14,@12,@SA00003                                 01S0641
*   MRPTTPTR=ADDR(RPTTABLE);        /* INITIALIZE PTR TO RPTTABLE
*                                                            @Y30LB55*/
         LA    MRPTTPTR,RPTTABLE                                01S0642
*   USEFLAG(8)='0'B;                /* TURN USE FLAG OFF     @Y30LB55*/
         NI    USEFLAG(SDAWKPTR),B'11111110'                    01S0643
*   DO WHILE(XXX0ADDR^=END0ADDR);   /* CALL ACCUMULATOR LOOP @ZD00192*/
         B     @DE00644                                         01S0644
@DL00644 DS    0H                                               01S0645
*     IF CXXX^='00'X&XXXFLAGS^=4&XXX0ADDR^=0 THEN /*         @ZD00192*/
         LR    @07,LPARMPTR                                     01S0645
         AL    @07,XXXPADDR(,MRPTTPTR)                          01S0645
         CLI   CXXX(@07),X'00'                                  01S0645
         BE    @RF00645                                         01S0645
         LR    @07,SDAWKPTR                                     01S0645
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0645
         CLC   XXXFLAGS(2,@07),@CH00101                         01S0645
         BE    @RF00645                                         01S0645
         ICM   @07,15,XXX0ADDR(MRPTTPTR)                        01S0645
         BZ    @RF00645                                         01S0645
*       IF((XXXFMT&FMTCHK)=FMTCHK)&((XXXSUBFG&SUBFMSCK)=SUBFMSCK) THEN
         MVC   @TS00001(1),XXXFMT(MRPTTPTR)                     01S0646
         NC    @TS00001(1),FMTCHK(SDAWKPTR)                     01S0646
         CLC   @TS00001(1),FMTCHK(SDAWKPTR)                     01S0646
         BNE   @RF00646                                         01S0646
         L     @07,SUBFMSCK(,SDAWKPTR)                          01S0646
         L     @05,XXXSUBFG(,MRPTTPTR)                          01S0646
         NR    @05,@07                                          01S0646
         CR    @05,@07                                          01S0646
         BNE   @RF00646                                         01S0646
*         DO;                       /* XXX NEEDS THIS RECORD @Y30LB55*/
*                                                               01S0647
*           /*********************************************************/
*           /*                                                       */
*           /* TRACE PRINTOUT                                        */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0648
*           IF((CDETAIL&FMTCHK)=FMTCHK)&(CTRACE(8)='1'B) THEN/* WAS
*                                      CTRACE REQUESTED AND DETAIL
*                                      PRINT ON FOR THIS FORMAT      */
         MVC   @TS00001(1),CDETAIL(LPARMPTR)                    01S0648
         NC    @TS00001(1),FMTCHK(SDAWKPTR)                     01S0648
         CLC   @TS00001(1),FMTCHK(SDAWKPTR)                     01S0648
         BNE   @RF00648                                         01S0648
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0648
         BNO   @RF00648                                         01S0648
*             DO;                   /* YES, PRINT TRACE      @Y30LB55*/
*               ANSI=LSKIP1;        /* TRACE                 @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0650
*               LINE=' CALL ';      /* TRACE                 @Y30LB55*/
         MVI   LINE+6(CVTPTR),C' '                              01S0651
         MVC   LINE+7(125,CVTPTR),LINE+6(CVTPTR)                01S0651
         MVC   LINE(6,CVTPTR),@CC00975                          01S0651
*               LINE(7:9)=XXXID;    /* TRACE                 @Y30LB55*/
         MVC   LINE+6(3,CVTPTR),XXXID(MRPTTPTR)                 01S0652
*               CALL ISDAPRT0(WORKPTR);/* TRACE              @Y30LB55*/
         LA    @07,WORKPTR(,SDAWKPTR)                           01S0653
         ST    @07,@AL00001                                     01S0653
         L     @15,@CV00900                                     01S0653
         LA    @01,@AL00001                                     01S0653
         BALR  @14,@15                                          01S0653
*             END;                  /* END TRACE PRINT       @Y30LB55*/
*           ELSE                                                01S0655
*             ;                     /* NO DETAIL, DO NOT PRINT TRACE
*                                                            @Y30LB55*/
*                                                               01S0655
@RF00648 DS    0H                                               01S0656
*           /*********************************************************/
*           /*                                                       */
*           /* CALL ACCUMULATOR PROCEDURE                            */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0656
*           RFY                                                 01S0656
*             R1 RSTD;                                     /*@Y30LB55*/
*           R1=ADDR(WORKCALL);      /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0657
*           CALL ISDAXXX0;          /* (WORKPTR) CALL XXX ACCUMULATOR
*                                                            @Y30LB55*/
         L     @15,XXX0ADDR(,MRPTTPTR)                          01S0658
         BALR  @14,@15                                          01S0658
*           RFY                                                 01S0659
*             R15 RSTD;                                    /*@Y30LB55*/
*           XXXFLAGS=R15;           /* SAVE RETURN CODE      @Y30LB55*/
         LR    @14,SDAWKPTR                                     01S0660
         AL    @14,XXXFLAGP(,MRPTTPTR)                          01S0660
         STH   R15,XXXFLAGS(,@14)                               01S0660
*           RFY                                                 01S0661
*            (R1,                                               01S0661
*             R15) UNRSTD;                                 /*@Y30LB55*/
*           IF XXXFLAGS>0 THEN      /* ERROR CODE RETURN FROM@Y30LB55
*                                      ISDAXXX0              @Y30LB55*/
*                                                               01S0662
         LR    @07,SDAWKPTR                                     01S0662
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0662
         LH    @07,XXXFLAGS(,@07)                               01S0662
         LTR   @07,@07                                          01S0662
         BNP   @RF00662                                         01S0662
*             /*******************************************************/
*             /*                                                     */
*             /* RETURN CODE FROM ISDAXXX0                           */
*             /*                                                     */
*             /*******************************************************/
*                                                               01S0663
*             DO;                   /* PRINT ERROR MESSAGES  @Y30LB55*/
*               IF XXXFLAGS=4 THEN  /* NO CORE AVAILABLE FOR XXX0
*                                                            @Y30LB55*/
         CH    @07,@CH00101                                     01S0664
         BNE   @RF00664                                         01S0664
*                 DO;               /* PRINT ISDA0006        @Y30LB55*/
*                   LINE=ISDA0006;  /* MOVE ISDA0006         @Y30LB55*/
         MVI   LINE+66(CVTPTR),C' '                             01S0666
         MVC   LINE+67(65,CVTPTR),LINE+66(CVTPTR)               01S0666
         MVC   LINE(66,CVTPTR),ISDA0006                         01S0666
*                   MSG06ID=XXXID;  /* MOVE PGM ID           @Y30LB55*/
         MVC   MSG06ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0667
*                   ANSI=LSKIP2;    /* SET 2 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0668
*                   RFY                                         01S0669
*                     R1 RSTD;                             /*@Y30LB55*/
*                   R1=ADDR(WORKCALL);/* R1 -> ADDR(WORKPTR) @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0670
*                   CALL ISDAPRT0;  /* PRINT ISDA0006        @Y30LB55*/
         L     @15,@CV00900                                     01S0671
         BALR  @14,@15                                          01S0671
*                   ANSI=LSKIP1;    /* RESET 1 LINE SKIP     @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0672
*                   CALL ISDATYPE;  /* WRITE ISDA0006 TO SYSTERM
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0673
         BALR  @14,@15                                          01S0673
*                   RFY                                         01S0674
*                     R1 UNRSTD;    /* RELEASE REG 1         @Y30LB55*/
*                 END;              /* END XXXFLAGS=4 CODE   @Y30LB55*/
*               ELSE                /* XXXFLAGS>4, RECORD REJECTED BY
*                                      XXX0                  @Y30LB55*/
*                 DO;               /* SET ERROR FLAGS       @Y30LB55*/
         B     @RC00664                                         01S0676
@RF00664 DS    0H                                               01S0677
*                   RET8CNT=RET8CNT+1;/* TRACE COUNT         @Y30LB55*/
         LA    @07,1                                            01S0677
         AH    @07,RET8CNT(,SDAWKPTR)                           01S0677
         STH   @07,RET8CNT(,SDAWKPTR)                           01S0677
*                   IF CTRACE(8)='1'B×XXXFLAGS>16 THEN/* TRACE ON
*                                            OR ILLEGAL CODE @ZM30730*/
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0678
         BO    @RT00678                                         01S0678
         LR    @07,SDAWKPTR                                     01S0678
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0678
         LH    @07,XXXFLAGS(,@07)                               01S0678
         CH    @07,@CH00202                                     01S0678
         BNH   @RF00678                                         01S0678
@RT00678 DS    0H                                               01S0679
*                     DO;           /* YES, PRINT ISDA0004   @Y30LB55*/
*                       ANSI=LSKIP2;/* SKIP 2 LINES          @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0680
*                       LINE=ISDA0004;/* MOVE MSG04          @Y30LB55*/
         MVI   LINE+39(CVTPTR),C' '                             01S0681
         MVC   LINE+40(92,CVTPTR),LINE+39(CVTPTR)               01S0681
         MVC   LINE(39,CVTPTR),ISDA0004                         01S0681
*                       CVD(XXXFLAGS,TEMP8);/* CONVERT RETURN CODE
*                                                            @Y30LB55*/
         LR    @07,SDAWKPTR                                     01S0682
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0682
         LH    @07,XXXFLAGS(,@07)                               01S0682
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0682
*                       RCODE04=EDPAT03;/* MOVE EDIT PATTERN @Y30LB55*/
         MVC   RCODE04(4,CVTPTR),EDPAT03                        01S0683
*                       ED(RCODE04,TEMP78);/* EDIT RETURN CODE  01S0684
*                                                            @Y30LB55*/
         ED    RCODE04(4,CVTPTR),TEMP78(SDAWKPTR)               01S0684
*                       IF XXXFLAGS=16 THEN /* REPORT 2 ONLY @ZM30730*/
         CH    @07,@CH00202                                     01S0685
         BNE   @RF00685                                         01S0685
*                         MSG04ID=XXXID2; /* YES, REPORT 2 ID@ZM30730*/
         MVC   MSG04ID(3,CVTPTR),XXXID2(MRPTTPTR)               01S0686
*                       ELSE              /* NOT ONLY REPORT @ZM30730*/
*                         MSG04ID=XXXID;/* MOVE PGM ID       @Y30LB55*/
         B     @RC00685                                         01S0687
@RF00685 MVC   MSG04ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0687
*                       MSG04ID0=ZEROCH;/* SET PGM ID CHAR FOR  01S0688
*                                      ISDA0004              @Y30LB55*/
@RC00685 MVI   MSG04ID0(CVTPTR),C'0'                            01S0688
*                       RFY                                     01S0689
*                         R1 RSTD;                         /*@Y30LB55*/
*                       R1=ADDR(WORKCALL);/* R1 -> ADDR(WORKPTR)
*                                                            @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0690
*                       CALL ISDAPRT0;/* PRINT ISDA0004      @Y30LB55*/
         L     @15,@CV00900                                     01S0691
         BALR  @14,@15                                          01S0691
*                       ANSI=LSKIP1;/* RESET TO 1 LINE SKIP  @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0692
*                       IF RET8CNT<6 THEN/* ONLY TYPE 5 ERRORS  01S0693
*                                                            @Y30LB55*/
         LH    @07,RET8CNT(,SDAWKPTR)                           01S0693
         CH    @07,@CH00090                                     01S0693
         BNL   @RF00693                                         01S0693
*                         CALL ISDATYPE;/* PRINT ERROR ON SYSTERM
*                                                            @Y30LB55*/
         L     @15,@CV00904                                     01S0694
         BALR  @14,@15                                          01S0694
*                       ELSE                                    01S0695
*                         ;         /* SURPRESS OUTPUT TO SYSTERM
*                                                            @Y30LB55*/
@RF00693 DS    0H                                               01S0696
*                       RFY                                     01S0696
*                         R1 UNRSTD;/* RELEASE REG 1         @Y30LB55*/
*                     END;          /* END TRACE OF RETCODE  @Y30LB55*/
*                   ELSE                                        01S0698
*                     ;             /* NO TRACE              @Y30LB55*/
@RF00678 DS    0H                                               01S0699
*                   USEFLAG(4)='1'B;/* SET PRINT FLAG ON     @Y30LB55*/
         OI    USEFLAG(SDAWKPTR),B'00010000'                    01S0699
*                   IF XXXFLAGS=16 THEN /* REPORT 2 ONLY     @ZM30730*/
         LR    @07,SDAWKPTR                                     01S0700
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0700
         CLC   XXXFLAGS(2,@07),@CH00202                         01S0700
         BNE   @RF00700                                         01S0700
*                     XXIDSAVE=XXXID2; /* YES, SAVE RPT 2 ID @ZM30730*/
         MVC   XXIDSAVE(3,SDAWKPTR),XXXID2(MRPTTPTR)            01S0701
*                   ELSE            /* NOT ONLY REPORT 2     @ZM30730*/
*                     XXIDSAVE=XXXID; /* MOVE PROC NAME      @Y30LB55*/
         B     @RC00700                                         01S0702
@RF00700 MVC   XXIDSAVE(3,SDAWKPTR),XXXID(MRPTTPTR)             01S0702
*                 END;              /* END REJECT CODE       @Y30LB55*/
*             END;                  /* END BAD RETURN CODE   @Y30LB55*/
*           ELSE                                                01S0705
*             USEFLAG(8)='1'B;      /* NORMAL RETURN - RESET USE FLAG
*                                                            @Y30LB55*/
         B     @RC00662                                         01S0705
@RF00662 OI    USEFLAG(SDAWKPTR),B'00000001'                    01S0705
*         END;                      /* END CALL XXX00 CODE   @Y30LB55*/
*       ELSE;                       /* WRONG DATA FOR XXX    @ZM31107*/
@RF00646 DS    0H                                               01S0708
*     ELSE                          /* CHECK FOR MISSING MOD @ZM31107*/
*       IF XXX0ADDR=0 THEN          /* ISDAXXX0 CODE MISSING @ZM31107*/
         B     @RC00645                                         01S0708
@RF00645 ICM   @07,15,XXX0ADDR(MRPTTPTR)                        01S0708
         BNZ   @RF00708                                         01S0708
*         XXXFLAGS=64;              /* SET ERROR CODE 64     @ZM31107*/
         LR    @07,SDAWKPTR                                     01S0709
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0709
         MVC   XXXFLAGS(2,@07),@CH00554                         01S0709
*       ELSE;                       /* XXX NOT REQUESTED     @Y30LB55*/
@RF00708 DS    0H                                               01S0711
*     MRPTTPTR=MRPTTPTR+LENGTH(MRPTTAB);/*                      01S0711
*                                      INCREMENT POINTER     @Y30LB55*/
@RC00645 AH    MRPTTPTR,@CH00989                                01S0711
*   END;                            /* END CALL ACCUMULATOR LOOP
*                                                            @Y30LB55*/
@DE00644 CLC   XXX0ADDR(4,MRPTTPTR),END0ADDR                    01S0712
         BNE   @DL00644                                         01S0712
*   LINE=ISDA0008;                  /* RESTORE ISDA0008      @Y30LB55*/
         MVI   LINE+34(CVTPTR),C' '                             01S0713
         MVC   LINE+35(97,CVTPTR),LINE+34(CVTPTR)               01S0713
         MVC   LINE(34,CVTPTR),ISDA0008                         01S0713
*   ERRORMSG=ISDA0013;              /* RESTORE ISDA0013      @Y30LB55*/
         MVC   ERRORMSG(38,CVTPTR),ISDA0013                     01S0714
*   ERRMSGID=XXIDSAVE;              /* MOVE PROC ID          @Y30LB55*/
         MVC   ERRMSGID(3,CVTPTR),XXIDSAVE(SDAWKPTR)            01S0715
*   END SDAACC00;                   /* RETURN                @Y30LB55*/
@EL00003 DS    0H                                               01S0716
@EF00003 DS    0H                                               01S0716
@ER00003 LM    @14,@12,@SA00003                                 01S0716
         BR    @14                                              01S0716
*DUMPCVT:                                                       01S0717
*   PROC;                           /* TRACE PROC TO DUMP ISDACVT
*                                                            @Y30LB55*/
*                                                               01S0717
DUMPCVT  STM   @14,@12,@SA00004                                 01S0717
*   /*****************************************************************/
*   /*                                                               */
*   /* TRACE - HEX DUMP OF POINTERS IN ISDACVT                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0718
*   IF CTRACE(8)='1'B THEN                                      01S0718
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0718
         BNO   @RF00718                                         01S0718
*     DO;                           /* CTRACE ON             @Y30LB55*/
*       DUMPLEN=LENGTH(CVTPTRS0);   /* MOVE LENGTH CVT PTRS  @Y30LB55*/
         MVC   DUMPLEN(4,CVTPTR),@CF00914                       01S0720
*       LINE=TRACEM01;              /* MOVE DUMP MSG         @Y30LB55*/
         MVI   LINE+24(CVTPTR),C' '                             01S0721
         MVC   LINE+25(107,CVTPTR),LINE+24(CVTPTR)              01S0721
         MVC   LINE(24,CVTPTR),TRACEM01                         01S0721
*       DUMPADDR=CVTPTR;            /* MOVE DUMP ADDRESS     @Y30LB55*/
         ST    CVTPTR,DUMPADDR(,CVTPTR)                         01S0722
*       DUMPIDNO=99991;             /* MOVE DUMP ID          @Y30LB55*/
         MVC   DUMPIDNO(4,CVTPTR),@CF00979                      01S0723
*       RFY                                                     01S0724
*         R1 RSTD;                                         /*@Y30LB55*/
*       R1=ADDR(WORKCALL);          /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0725
*       CALL ISDAHEXP;              /* DUMP ISDACVT          @Y30LB55*/
         L     @15,@CV00906                                     01S0726
         BALR  @14,@15                                          01S0726
*       RFY                                                     01S0727
*         R1 UNRSTD;                                       /*@Y30LB55*/
*     END;                          /* END TRACE PRINT       @Y30LB55*/
*   ELSE                                                        01S0729
*     ;                             /* CTRACE NOT ON         @Y30LB55*/
@RF00718 DS    0H                                               01S0730
*   END DUMPCVT;                                           /*@Y30LB55*/
@EL00004 DS    0H                                               01S0730
@EF00004 DS    0H                                               01S0730
@ER00004 LM    @14,@12,@SA00004                                 01S0730
         BR    @14                                              01S0730
*                                                               01S0731
*   /*****************************************************************/
*   /*                                                               */
*   /* ISDASDA1 - OUTPUT FORMAT PROC THIS PROCEDURE CALL EACH OF THE */
*   /* OUTPUT FORMAT PROC FOR WHICH INPUT DATA HAS BEEN ACCUMULATED. */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0731
*ISDASDA1:                                                      01S0731
*   PROC;                           /* OUTPUT FORMAT PROC    @Y30LB55*/
*                                                               01S0731
ISDASDA1 STM   @14,@12,@SA00005                                 01S0731
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE CONTROL FLAGS AND DATA                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0732
*   RETCODE=0;                      /* SET RETURN CODE       @Y30LB55*/
*                                                               01S0732
         SLR   @07,@07                                          01S0732
         STH   @07,RETCODE(,SDAWKPTR)                           01S0732
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD SDA OUTPUT HEADER FOR ISDAPRT0 WITH INTERVAL OF THE     */
*   /* INPUT DATA.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0733
*   LINE='';                        /* BLANK LEFT HEADER     @Y30LB55*/
         MVI   LINE(CVTPTR),C' '                                01S0733
         MVC   LINE+1(131,CVTPTR),LINE(CVTPTR)                  01S0733
*   MTITLE0=SDAOUTHD;               /* MOVE OUTPUT PHASE HEADER 01S0734
*                                                            @Y30LB55*/
         MVC   MTITLE0(9,CVTPTR),SDAOUTHD                       01S0734
*   MTITLE=SDAHEADM;                /* MOVE MIDDLE HEADER    @Y30LB55*/
         MVC   MTITLE(26,CVTPTR),SDAHEADM                       01S0735
*   RTITLE=SDAHEADR;                /* MOVE RIGHT HEADER     @Y30LB55*/
         MVC   RTITLE(8,CVTPTR),SDAHEADR                        01S0736
*   UNPK(TEMP7,LOWDATE);            /* UNPACK LOW DATE       @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),LOWDATE(4,SDAWKPTR)            01S0737
*   HDRSDAY=TEMP7(5:7);             /* MOVE LOW DAY          @Y30LB55*/
         MVC   HDRSDAY(3,CVTPTR),TEMP7+4(SDAWKPTR)              01S0738
*   HDRSYEAR=TEMP7(3:4);            /* MOVE LOW YEAR         @Y30LB55*/
         MVC   HDRSYEAR(2,CVTPTR),TEMP7+2(SDAWKPTR)             01S0739
*   UNPK(TEMP7,HIGHDATE);           /* UNPACK HIGH DATE      @Y30LB55*/
         UNPK  TEMP7(7,SDAWKPTR),HIGHDATE(4,SDAWKPTR)           01S0740
*   HDREDAY=TEMP7(5:7);             /* MOVE HIGH DAY         @Y30LB55*/
         MVC   HDREDAY(3,CVTPTR),TEMP7+4(SDAWKPTR)              01S0741
*   HDREYEAR=TEMP7(3:4);            /* MOVE HIGH YEAR        @Y30LB55*/
         MVC   HDREYEAR(2,CVTPTR),TEMP7+2(SDAWKPTR)             01S0742
*   RFY                                                         01S0743
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0744
*   CALL ISDAPRTH;                  /* PASS HEADER TO ISDAPRT0  01S0745
*                                                            @Y30LB55*/
         L     @15,@CV00902                                     01S0745
         BALR  @14,@15                                          01S0745
*   ANSI=PSKIP;                     /* SET PAGE SKIP         @Y30LB55*/
         MVI   ANSI(CVTPTR),C'1'                                01S0746
*   RFY                                                         01S0747
*     R1 UNRSTD;                    /* RELEASE REG 1         @Y30LB55*/
*                                                               01S0748
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT CALLS THE CALCULATE PROC, ISDAFSC2. THE OUTPUT   */
*   /* FROM THIS PROC IS THEN PASSED TO ISDASUM1 VIA THE ISDACVT.    */
*   /* ISDAGEN0 IS SHUTOFF. NO CLEANUP REQUIRED.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0748
*   CGEN='00'X;                     /* TURN OFF CALL FLAG FOR GEN
*                                                            @Y30LB55*/
         MVI   CGEN(LPARMPTR),X'00'                             01S0748
*   GENFLAGS=''B;                   /* RESET GEN RETCODE     @ZM31072*/
         SLR   @07,@07                                          01S0749
         STH   @07,GENFLAGS(,SDAWKPTR)                          01S0749
*   IF CFSC^='00'X&FSC00PTR^=0 THEN /* WAS FSC REQUESTED     @Y30LB55*/
         CLI   CFSC(LPARMPTR),X'00'                             01S0750
         BE    @RF00750                                         01S0750
         ICM   @07,15,FSC00PTR(CVTPTR)                          01S0750
         BZ    @RF00750                                         01S0750
*     DO;                           /* YES, CALL ISDAFSC2    @Y30LB55*/
*       MRPTTPTR=ADDR(FSC0ADDR);    /* SET PTR TO FSC ENTRY IN  01S0752
*                                      RPTTABLE              @Y30LB55*/
         LA    MRPTTPTR,FSC0ADDR                                01S0752
*       XXX2ADDR=ADDR(ISDAFSC2);    /* SET CALL ADDR FOR ISADSDA2
*                                                            @Y30LB55*/
         L     @07,@CV00364                                     01S0753
         ST    @07,XXX2ADDR(,SDAWKPTR)                          01S0753
*       CALL ISDASDA2;              /* CALL CALCULATE CODE   @Y30LB55*/
         BAL   @14,ISDASDA2                                     01S0754
*     END;                          /* END ISDAFSC2 CODE     @Y30LB55*/
*   ELSE                                                        01S0756
*     ;                                                    /*@Y30LB55*/
@RF00750 DS    0H                                               01S0757
*                                                               01S0757
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL OUTPUT CODE. THIS CODE USES THE SAVE LOGIC FOR CALLING   */
*   /* THE OUTPUT PROCEDURES AS SDAACC00 USED FOR CALLING THE        */
*   /* ACCUMULATORS. RPTTABLE IS CHECKED TO SEE IF XXX WAS REQUESTED,*/
*   /* IF SO IS THE DATA POINTER FOR XXX00 IN ISDACVT=0, IF NOT THEN */
*   /* CALL ISDAXXX1 AND PRINT ANY NON-ZERO RETURN CODE. IF THE      */
*   /* ISDACVT PTR=0 THEN PRINT ISDA0063.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0757
*   ANSI=PSKIP;                     /* SET PAGE SKIP         @Y30LB55*/
         MVI   ANSI(CVTPTR),C'1'                                01S0757
*   MRPTTPTR=ADDR(RPTTABLE);        /* INITIALZYE TABLE POINTER 01S0758
*                                                            @Y30LB55*/
         LA    MRPTTPTR,RPTTABLE                                01S0758
*   DO WHILE(XXX0ADDR^=END0ADDR);   /* CALL XXX01 LOOP       @ZD00192*/
         B     @DE00759                                         01S0759
@DL00759 DS    0H                                               01S0760
*     IF CXXX^='00'X&XXX1ADDR^=0&XXX0ADDR^=0 THEN  /* WAS XXX   01S0760
*                                      REQUESTED AND CODE OK @ZM31107*/
         LR    @07,LPARMPTR                                     01S0760
         AL    @07,XXXPADDR(,MRPTTPTR)                          01S0760
         CLI   CXXX(@07),X'00'                                  01S0760
         BE    @RF00760                                         01S0760
         SLR   @07,@07                                          01S0760
         L     @05,XXX1ADDR(,MRPTTPTR)                          01S0760
         CR    @05,@07                                          01S0760
         BE    @RF00760                                         01S0760
         C     @07,XXX0ADDR(,MRPTTPTR)                          01S0760
         BE    @RF00760                                         01S0760
*       IF XXX00PTR^=0 THEN                                     01S0761
         LR    @15,CVTPTR                                       01S0761
         AL    @15,XXXWORKP(,MRPTTPTR)                          01S0761
         C     @07,XXX00PTR(,@15)                               01S0761
         BE    @RF00761                                         01S0761
*         DO;                       /* YES AND XXX00 WAS CALLED 01S0762
*                                                            @Y30LB55*/
*                                                               01S0762
*           /*********************************************************/
*           /*                                                       */
*           /* CALL OUTPUT PROC ISDAXXX1                             */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0763
*           SDARPTID=XXXID;         /* MOVE REPORT ID        @ZM30730*/
         MVC   SDARPTID(3,CVTPTR),XXXID(MRPTTPTR)               01S0763
*           RFY                                                 01S0764
*             R1 RSTD;                                     /*@Y30LB55*/
*           R1=ADDR(WORKCALL);      /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0765
*           CALL ISDAXXX1;          /* (WORKPTR) CALL OUTPUT FORMAT
*                                      AND PRINT PROC        @Y30LB55*/
         LR    @15,@05                                          01S0766
         BALR  @14,@15                                          01S0766
*           RFY                                                 01S0767
*             R15 RSTD;                                    /*@Y30LB55*/
*           XXXFLAGS=R15;           /* SAVE RETURN CODE      @ZD00192*/
         LR    @14,SDAWKPTR                                     01S0768
         AL    @14,XXXFLAGP(,MRPTTPTR)                          01S0768
         STH   R15,XXXFLAGS(,@14)                               01S0768
*           RFY                                                 01S0769
*            (R1,                                               01S0769
*             R15) UNRSTD;                                 /*@Y30LB55*/
*         END;                      /* END CALL OUTPUT CODE  @ZD00192*/
*       ELSE                        /* REPORT NEVER CALLED   @ZD00192*/
*         XXXFLAGS=8;               /* SET NEVER CALLED FLAG @ZD00192*/
         B     @RC00761                                         01S0771
@RF00761 LR    @07,SDAWKPTR                                     01S0771
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0771
         MVC   XXXFLAGS(2,@07),@CH00066                         01S0771
*     ELSE                          /* CHECK FOR MISSING MOD @ZM31107*/
*       IF XXX1ADDR=0 THEN          /* ISDAXXX1 CODE MISSING @ZM31107*/
         B     @RC00760                                         01S0772
@RF00760 ICM   @07,15,XXX1ADDR(MRPTTPTR)                        01S0772
         BNZ   @RF00772                                         01S0772
*         XXXFLAGS=64;              /* SET ERROR CODE 64     @ZM31107*/
         LR    @07,SDAWKPTR                                     01S0773
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0773
         MVC   XXXFLAGS(2,@07),@CH00554                         01S0773
*       ELSE;                       /* XXX NOT REQUESTED     @ZD00192*/
@RF00772 DS    0H                                               01S0775
*     MRPTTPTR=MRPTTPTR+LENGTH(MRPTTAB);/*                      01S0775
*                                      INCREMENT POINTER     @ZD00192*/
@RC00760 AH    MRPTTPTR,@CH00989                                01S0775
*   END;                            /* END OF CALL REPORTS   @ZD00192*/
@DE00759 CLC   XXX0ADDR(4,MRPTTPTR),END0ADDR                    01S0776
         BNE   @DL00759                                         01S0776
*   SDARPTID=BLANKID;               /* BLANK REPORT ID       @ZM30730*/
         MVC   SDARPTID(3,CVTPTR),@CC00375                      01S0777
*   /*****************************************************************/
*   /*                                                               */
*   /*  LOOP THROUGH THE DISPATCH TABLE AND PRINT MESSAGES FOR ALL   */
*   /*  FUNCTIONS THAT RETURNED A NON-ZERO RETURN CODE.              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0778
*   ANSI=PSKIP;                     /* SET PAGE SKIP         @ZD00192*/
         MVI   ANSI(CVTPTR),C'1'                                01S0778
*   MRPTTPTR=ADDR(RPTTABLE);        /* POINT TO START        @ZD00192*/
         LA    MRPTTPTR,RPTTABLE                                01S0779
*   DO WHILE(XXX0ADDR^=END0ADDR);   /* CHECK RETCODE LOOP    @ZD00192*/
         B     @DE00780                                         01S0780
@DL00780 DS    0H                                               01S0781
*     RETCODER=XXXFLAGS;            /* MOVE RETURN CODE      @ZD00192*/
         LR    @07,SDAWKPTR                                     01S0781
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0781
         LH    @07,XXXFLAGS(,@07)                               01S0781
         STH   @07,RETCODER(,SDAWKPTR)                          01S0781
*     IF RETCODER^=0 THEN           /* RETCODE SET           @ZD00192*/
         LTR   @07,@07                                          01S0782
         BZ    @RF00782                                         01S0782
*       DO;                         /* BAD RETURN FROM OUTPUT ROUTINE
*                                                            @Y30LB55*/
*         IF RETCODER=4 THEN        /* NO CORE AVAILABLE FOR OUTPUT
*                                      XXX1                  @Y30LB55*/
         CH    @07,@CH00101                                     01S0784
         BNE   @RF00784                                         01S0784
*           DO;                     /* PRINT ISDA0065        @Y30LB55*/
*             LINE=ISDA0065;        /* MOVE ISDA0065         @Y30LB55*/
         MVI   LINE+56(CVTPTR),C' '                             01S0786
         MVC   LINE+57(75,CVTPTR),LINE+56(CVTPTR)               01S0786
         MVC   LINE(56,CVTPTR),ISDA0065                         01S0786
*             MSG65ID=XXXID;        /* MOVE PGM ID           @Y30LB55*/
         MVC   MSG65ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0787
*             RFY                                               01S0788
*               R1 RSTD;                                   /*@Y30LB55*/
*             R1=ADDR(WORKCALL);    /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0789
*             CALL ISDAPRT0;        /* PRINT ISDA0065        @ZM30730*/
         L     @15,@CV00900                                     01S0790
         BALR  @14,@15                                          01S0790
*             ANSI=LSKIP1;          /* RESET 1 LINE SKIP     @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0791
*             CALL ISDATYPE;        /* WRITE ISDA0065 TO SYSTERM
*                                                            @ZM30730*/
         L     @15,@CV00904                                     01S0792
         BALR  @14,@15                                          01S0792
*             RFY R1 UNRSTD;        /* RELEASE REG 1         @ZM30730*/
*             ANSI=LSKIP2;          /* RESET 2 LINE SKIP     @ZM30730*/
         MVI   ANSI(CVTPTR),C'0'                                01S0794
*           END;                    /* END CODE 4 PRINT      @ZM30730*/
*         ELSE;                     /* NOT CODE 4            @ZM30730*/
@RF00784 DS    0H                                               01S0797
*         IF CTRACE(8)='1'B×RETCODER>16 THEN  /* TRACE ON    @Y30LB55*/
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0797
         BO    @RT00797                                         01S0797
         LH    @07,RETCODER(,SDAWKPTR)                          01S0797
         CH    @07,@CH00202                                     01S0797
         BNH   @RF00797                                         01S0797
@RT00797 DS    0H                                               01S0798
*           DO;                     /* YES, PRINT ISDA0004   @Y30LB55*/
*             LINE=ISDA0004;        /* MOVE MSG04            @Y30LB55*/
         MVI   LINE+39(CVTPTR),C' '                             01S0799
         MVC   LINE+40(92,CVTPTR),LINE+39(CVTPTR)               01S0799
         MVC   LINE(39,CVTPTR),ISDA0004                         01S0799
*             CVD(RETCODER,TEMP8);  /* CVD RETURN CODE       @Y30LB55*/
         LH    @07,RETCODER(,SDAWKPTR)                          01S0800
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0800
*             RCODE04=EDPAT03;      /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCODE04(4,CVTPTR),EDPAT03                        01S0801
*             ED(RCODE04,TEMP78);   /* EDIT RETURN CODE      @Y30LB55*/
         ED    RCODE04(4,CVTPTR),TEMP78(SDAWKPTR)               01S0802
*             MSG04ID=XXXID;        /* MOVE PGM NAME         @Y30LB55*/
         MVC   MSG04ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0803
*             MSG04ID0=ONECH;       /* SET PGM ID CHAR FOR ISDA0004
*                                                            @Y30LB55*/
         MVI   MSG04ID0(CVTPTR),C'1'                            01S0804
*             RFY R1 RSTD;          /* GET REG 1             @ZM30730*/
*             R1=ADDR(WORKCALL);    /* R1 -> ADDR(WORKPTR)   @ZM30730*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0806
*             CALL ISDAPRT0;        /* WRITE ISDA0004        @Y30LB55*/
         L     @15,@CV00900                                     01S0807
         BALR  @14,@15                                          01S0807
*             ANSI=LSKIP1;          /* RESET TO 1 LINE SKIP  @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0808
*             CALL ISDATYPE;        /* PRINT ERROR ON SYSTERM@Y30LB55*/
         L     @15,@CV00904                                     01S0809
         BALR  @14,@15                                          01S0809
*             RFY R1 UNRSTD;        /* RELEASE REG 1         @ZM30730*/
*             ANSI=LSKIP2;          /* RESET 2 LINE SKIP     @ZM30730*/
         MVI   ANSI(CVTPTR),C'0'                                01S0811
*           END;                    /* END TRACE             @Y30LB55*/
*         ELSE;                     /* NO TRACE              @Y30LB55*/
@RF00797 DS    0H                                               01S0814
*                                                               01S0814
*         /***********************************************************/
*         /*                                                         */
*         /* PRINT REPORT REQUESTED BUT NO INPUT FOUND MESSAGE       */
*         /* FOR RETURN CODES 8, 12, AND 16                          */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0814
*         IF RETCODER>=8&RETCODER<=16 THEN /* NO REPORT      @ZM30730*/
         LA    @07,8                                            01S0814
         LH    @05,RETCODER(,SDAWKPTR)                          01S0814
         CR    @05,@07                                          01S0814
         BL    @RF00814                                         01S0814
         CH    @05,@CH00202                                     01S0814
         BH    @RF00814                                         01S0814
*           DO;                     /* PRINT NO DATA MESSAGE @ZD00192*/
*             LINE=ISDA0063;        /* MOVE MESSAGE 63       @Y30LB55*/
         MVI   LINE+51(CVTPTR),C' '                             01S0816
         MVC   LINE+52(80,CVTPTR),LINE+51(CVTPTR)               01S0816
         MVC   LINE(51,CVTPTR),ISDA0063                         01S0816
*             RFY                                               01S0817
*               R1 RSTD;                                   /*@Y30LB55*/
*             R1=ADDR(WORKCALL);    /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0818
*             IF (RETCODER=8×RETCODER=12)&CXXX(8)='1'B THEN/*@ZM30730*/
         CR    @05,@07                                          01S0819
         BE    @GL00039                                         01S0819
         CH    @05,@CH00033                                     01S0819
         BNE   @RF00819                                         01S0819
@GL00039 LR    @07,LPARMPTR                                     01S0819
         AL    @07,XXXPADDR(,MRPTTPTR)                          01S0819
         TM    CXXX(@07),B'00000001'                            01S0819
         BNO   @RF00819                                         01S0819
*               DO;                 /* REQUESTED REPORT 1    @ZM30730*/
*                 MSG63ID=XXXID;    /* MOVE REPORT 1 ID      @ZM30730*/
         MVC   MSG63ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0821
*                 CVD(XXXNUMB,TEMP8);/* CONVERT REPORT NUMB  @ZM30730*/
         SLR   @07,@07                                          01S0822
         IC    @07,XXXNUMB(,MRPTTPTR)                           01S0822
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0822
*                 TEMP4=EDPAT03;    /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   TEMP4(4,SDAWKPTR),EDPAT03                        01S0823
*                 ED(TEMP4,TEMP78); /* EDIT REPORT NUMBER    @ZM30730*/
         ED    TEMP4(4,SDAWKPTR),TEMP78(SDAWKPTR)               01S0824
*                 MSG63NUM=TEMP4(3:4);/* MOVE REPORT NUMBER  @ZM30730*/
         MVC   MSG63NUM(2,CVTPTR),TEMP4+2(SDAWKPTR)             01S0825
*                 CALL ISDAPRT0;    /* PRINT ISDA0063        @Y30LB55*/
         L     @15,@CV00900                                     01S0826
         BALR  @14,@15                                          01S0826
*                 ANSI=LSKIP2;      /* SET 2 LINE SKIP       @ZM30730*/
         MVI   ANSI(CVTPTR),C'0'                                01S0827
*               END;                /* END REPORT 1 CODE     @ZM30730*/
*             ELSE;                 /* NOT THIS CASE         @ZM30730*/
@RF00819 DS    0H                                               01S0830
*             IF (RETCODER=8×RETCODER=16)&CXXX(7)='1'B THEN/*@ZM30730*/
         LH    @07,RETCODER(,SDAWKPTR)                          01S0830
         CH    @07,@CH00066                                     01S0830
         BE    @GL00041                                         01S0830
         CH    @07,@CH00202                                     01S0830
         BNE   @RF00830                                         01S0830
@GL00041 LR    @07,LPARMPTR                                     01S0830
         AL    @07,XXXPADDR(,MRPTTPTR)                          01S0830
         TM    CXXX(@07),B'00000010'                            01S0830
         BNO   @RF00830                                         01S0830
*               DO;                 /* REQUESTED REPORT 2    @ZM30730*/
*                 MSG63ID=XXXID2;   /* MOVE REPORT 2 ID      @ZM30730*/
         MVC   MSG63ID(3,CVTPTR),XXXID2(MRPTTPTR)               01S0832
*                 I=XXXNUMB+1;      /* ADD 1 TO REPORT NUMB  @ZM30730*/
         LA    I,1                                              01S0833
         SLR   @07,@07                                          01S0833
         IC    @07,XXXNUMB(,MRPTTPTR)                           01S0833
         ALR   I,@07                                            01S0833
*                 CVD(I,TEMP8);     /* CONVERT REPORT NUMB   @ZM30730*/
         CVD   I,TEMP8(,SDAWKPTR)                               01S0834
*                 TEMP4=EDPAT03;    /* MOVE EDIT PATTERN     @ZM30730*/
         MVC   TEMP4(4,SDAWKPTR),EDPAT03                        01S0835
*                 ED(TEMP4,TEMP78); /* EDIT REPORT NUMBER    @ZM30730*/
         ED    TEMP4(4,SDAWKPTR),TEMP78(SDAWKPTR)               01S0836
*                 MSG63NUM=TEMP4(3:4);/* MOVE REPORT NUMBER  @ZM30730*/
         MVC   MSG63NUM(2,CVTPTR),TEMP4+2(SDAWKPTR)             01S0837
*                 CALL ISDAPRT0;    /* PRINT ISDA0063        @ZM30730*/
         L     @15,@CV00900                                     01S0838
         BALR  @14,@15                                          01S0838
*               END;                /* END REPORT 2 CODE     @ZM30730*/
*             ELSE;                 /* NOT THIS CASE         @ZM30730*/
@RF00830 DS    0H                                               01S0841
*             RFY                                               01S0841
*               R1 UNRSTD;                                 /*@Y30LB55*/
*             ANSI=LSKIP2;          /* SKIP 2 LINES          @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0842
*           END;                    /* END NO INPUT CODE     @Y30LB55*/
*         ELSE                      /* RETURN CODE 4 OR >16  @ZM31107*/
*                                                               01S0844
*         /***********************************************************/
*         /*                                                         */
*         /* PRINT MISSING CSECT MESSAGE FOR ERROR CODE 64           */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0844
*           IF RETCODER=64 THEN     /* MISSING SOME CODE     @ZM31107*/
         B     @RC00814                                         01S0844
@RF00814 CLC   RETCODER(2,SDAWKPTR),@CH00554                    01S0844
         BNE   @RF00844                                         01S0844
*             DO;                   /* PRINT ISDA0070        @ZM31107*/
*               LINE=ISDA0070;      /* MOVE ISDA0070         @ZM31107*/
         MVI   LINE+94(CVTPTR),C' '                             01S0846
         MVC   LINE+95(37,CVTPTR),LINE+94(CVTPTR)               01S0846
         MVC   LINE(94,CVTPTR),ISDA0070                         01S0846
*               MSG70ID1=XXXID;     /* MOVE PGM NAME         @ZM31107*/
         MVC   MSG70ID1(3,CVTPTR),XXXID(MRPTTPTR)               01S0847
*               MSG70ID2=XXXID;     /* MOVE PGM NAME         @ZM31107*/
         MVC   MSG70ID2(3,CVTPTR),XXXID(MRPTTPTR)               01S0848
*               MSG70ID3=XXXID;     /* MOVE PGM NAME         @ZM31107*/
         MVC   MSG70ID3(3,CVTPTR),XXXID(MRPTTPTR)               01S0849
*               RFY R1 RSTD;                                    01S0850
*               R1=ADDR(WORKCALL);  /* R1 -> WORKPTR         @ZM31107*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0851
*               CALL ISDAPRT0;      /* PRINT MESSAGE         @ZM31107*/
         L     @15,@CV00900                                     01S0852
         BALR  @14,@15                                          01S0852
*               ANSI=LSKIP1;        /* ONE LINE SKIP         @ZM31107*/
         MVI   ANSI(CVTPTR),C' '                                01S0853
*               CALL ISDATYPE;      /* TYPE MESSAGE          @ZM31107*/
         L     @15,@CV00904                                     01S0854
         BALR  @14,@15                                          01S0854
*               ANSI=LSKIP2;        /* SET 2 LINE SKIP       @ZM31107*/
         MVI   ANSI(CVTPTR),C'0'                                01S0855
*               RFY R1 UNRSTD;                                  01S0856
*             END;                  /* END MISSING CSECT     @ZM31107*/
*           ELSE;                   /* NOT CODE 64           @ZM31107*/
@RF00844 DS    0H                                               01S0859
*       END;                        /* END NON ZERO RETURN   @ZM30730*/
*     ELSE;                         /* NO RETURN CODE SET    @ZD00192*/
@RF00782 DS    0H                                               01S0861
*     MRPTTPTR=MRPTTPTR+LENGTH(MRPTTAB);/*                      01S0861
*                                      INCREMENT POINTER     @Y30LB55*/
@RC00782 AH    MRPTTPTR,@CH00989                                01S0861
*   END;                            /* END OF CALL OUTPUT PROC LOOP
*                                                            @Y30LB55*/
@DE00780 CLC   XXX0ADDR(4,MRPTTPTR),END0ADDR                    01S0862
         BNE   @DL00780                                         01S0862
*                                                               01S0863
*   /*****************************************************************/
*   /*                                                               */
*   /* ISDASDA2 - PROC TO CALL THE CALCULATE PROCEDURES              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0863
*ISDASDA2:                                                      01S0863
*   PROC;                           /* CALL ISDAXXX2 CODE    @Y30LB55*/
*                                                               01S0863
         B     @PB00006                                         01S0863
ISDASDA2 STM   @14,@12,@SA00006                                 01S0863
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL CALCULATE PROC ISDAXXX2                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0864
*   RFY                                                         01S0864
*     R1 RSTD;                                             /*@Y30LB55*/
*   R1=ADDR(WORKCALL);              /* R1 -> WORKPTR         @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0865
*   CALL ISDAXXX2;                  /* (WORKPTR) CALL CALCULATE PROC
*                                                            @Y30LB55*/
         L     @15,XXX2ADDR(,SDAWKPTR)                          01S0866
         BALR  @14,@15                                          01S0866
*   RFY                                                         01S0867
*     R15 RSTD;                                            /*@Y30LB55*/
*   RETCODER=R15;                   /* SAVE RETURN CODE      @Y30LB55*/
         STH   R15,RETCODER(,SDAWKPTR)                          01S0868
*   RFY                                                         01S0869
*    (R1,                                                       01S0869
*     R15) UNRSTD;                                         /*@Y30LB55*/
*   XXXFLAGS=RETCODER;              /* STORE RETURN CODE     @ZD00192*/
         LR    @07,SDAWKPTR                                     01S0870
         AL    @07,XXXFLAGP(,MRPTTPTR)                          01S0870
         LH    @05,RETCODER(,SDAWKPTR)                          01S0870
         STH   @05,XXXFLAGS(,@07)                               01S0870
*   IF RETCODER>0 THEN                                          01S0871
         LTR   @05,@05                                          01S0871
         BNP   @RF00871                                         01S0871
*     DO;                           /* BAD RETURN FROM CALCULATE
*                                      ROUTINE               @Y30LB55*/
*       IF RETCODER=4 THEN          /* NO CORE AVAILABLE FOR @Y30LB55
*                                      CALCULATE XXX2        @Y30LB55*/
         CH    @05,@CH00101                                     01S0873
         BNE   @RF00873                                         01S0873
*         DO;                       /* PRINT ISDA0065        @Y30LB55*/
*           LINE=ISDA0065;          /* MOVE ISDA0065         @Y30LB55*/
         MVI   LINE+56(CVTPTR),C' '                             01S0875
         MVC   LINE+57(75,CVTPTR),LINE+56(CVTPTR)               01S0875
         MVC   LINE(56,CVTPTR),ISDA0065                         01S0875
*           MSG65ID=XXXID;          /* MOVE PGM ID           @Y30LB55*/
         MVC   MSG65ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0876
*           ANSI=LSKIP2;            /* SET 2 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0877
*           RFY                                                 01S0878
*             R1 RSTD;                                     /*@Y30LB55*/
*           R1=ADDR(WORKCALL);      /* R1 -> ADDR(WORKPTR)   @Y30LB55*/
         LA    R1,WORKCALL(,CVTPTR)                             01S0879
*           CALL ISDAPRT0;          /* PRINT ISDA0065        @ZM30730*/
         L     @15,@CV00900                                     01S0880
         BALR  @14,@15                                          01S0880
*           ANSI=LSKIP1;            /* RESET 1 LINE SKIP     @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0881
*           CALL ISDATYPE;          /* WRITE ISDA0065 ON        01S0882
*                                      SYSTERM               @Y30LB55*/
         L     @15,@CV00904                                     01S0882
         BALR  @14,@15                                          01S0882
*         END;                      /* END CODE 4 PRINT      @ZM30730*/
*       ELSE;                       /* NOT CODE 4            @ZM30730*/
@RF00873 DS    0H                                               01S0885
*       IF CTRACE(8)='1'B×RETCODER>16 THEN      /* TRACE ON  @Y30LB55*/
         TM    CTRACE(LPARMPTR),B'00000001'                     01S0885
         BO    @RT00885                                         01S0885
         LH    @07,RETCODER(,SDAWKPTR)                          01S0885
         CH    @07,@CH00202                                     01S0885
         BNH   @RF00885                                         01S0885
@RT00885 DS    0H                                               01S0886
*         DO;                       /* YES, PRINT ISDA0004   @Y30LB55*/
*           ANSI=LSKIP2;            /* SET 2 LINE SKIP       @Y30LB55*/
         MVI   ANSI(CVTPTR),C'0'                                01S0887
*           LINE=ISDA0004;          /* MOVE MSG04            @Y30LB55*/
         MVI   LINE+39(CVTPTR),C' '                             01S0888
         MVC   LINE+40(92,CVTPTR),LINE+39(CVTPTR)               01S0888
         MVC   LINE(39,CVTPTR),ISDA0004                         01S0888
*           CVD(RETCODER,TEMP8);    /* CVD RETURN CODE       @Y30LB55*/
         LH    @07,RETCODER(,SDAWKPTR)                          01S0889
         CVD   @07,TEMP8(,SDAWKPTR)                             01S0889
*           RCODE04=EDPAT03;        /* MOVE EDIT PATTERN     @Y30LB55*/
         MVC   RCODE04(4,CVTPTR),EDPAT03                        01S0890
*           ED(RCODE04,TEMP78);     /* EDIT RETURN CODE      @Y30LB55*/
         ED    RCODE04(4,CVTPTR),TEMP78(SDAWKPTR)               01S0891
*           MSG04ID=XXXID;          /* MOVE PGM NAME         @Y30LB55*/
         MVC   MSG04ID(3,CVTPTR),XXXID(MRPTTPTR)                01S0892
*           MSG04ID0=TWOCH;         /* SET PGM ID CHAR FOR ISDA0004
*                                                            @Y30LB55*/
         MVI   MSG04ID0(CVTPTR),C'2'                            01S0893
*           CALL ISDAPRT0;          /* WRITE ISDA0004        @Y30LB55*/
         L     @15,@CV00900                                     01S0894
         BALR  @14,@15                                          01S0894
*           ANSI=LSKIP1;            /* RESET TO 1 LINE SKIP  @Y30LB55*/
         MVI   ANSI(CVTPTR),C' '                                01S0895
*           CALL ISDATYPE;          /* PRINT ERROR ON SYSTERM@Y30LB55*/
         L     @15,@CV00904                                     01S0896
         BALR  @14,@15                                          01S0896
*         END;                      /* END TRACE             @Y30LB55*/
*       ELSE                                                    01S0898
*         ;                         /* NO TRACE              @Y30LB55*/
@RF00885 DS    0H                                               01S0899
*       RFY                                                     01S0899
*         R1 UNRSTD;                /* RELEASE REG 1         @Y30LB55*/
*     END;                          /* END BAD RETURN CODE   @Y30LB55*/
*   ELSE                                                        01S0901
*     ;                             /* RETURN CODE OK        @Y30LB55*/
@RF00871 DS    0H                                               01S0902
*   END ISDASDA2;                   /* END CALL CALCULATE PROC  01S0902
*                                                            @Y30LB55*/
@EL00006 DS    0H                                               01S0902
@EF00006 DS    0H                                               01S0902
@ER00006 LM    @14,@12,@SA00006                                 01S0902
         BR    @14                                              01S0902
*   END ISDASDA1;                   /* RETURN TO ISDASDA0    @Y30LB55*/
@EL00005 DS    0H                                               01S0903
@EF00005 DS    0H                                               01S0903
@ER00005 LM    @14,@12,@SA00005                                 01S0903
         BR    @14                                              01S0903
*   END ISDASDA0                    /* END OF ISDASDA0       @Y30LB55*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ISDACVT )                                        *
*/*%INCLUDE SYSLIB  (ISDAPRMS)                                        *
*/*%INCLUDE SYSLIB  (ISDAGHDR)                                        *
*/*%INCLUDE SYSLIB  (ISDALOBR)                                        *
*/*%INCLUDE SYSLIB  (ISDAMSCS)                                        *
*/*%INCLUDE SYSUT5  (REG1FIX )                                        *
*/*%INCLUDE SYSUT5  (STARTEND)                                        *
*/*%INCLUDE SYSUT5  (INITRECF)                                        *
*/*%INCLUDE SYSUT5  (OBRMDRCK)                                        *
*/*%INCLUDE SYSUT5  (SDAFMTCK)                                        *
*/*%INCLUDE SYSUT5  (DATEHILO)                                        *
*/*%INCLUDE SYSUT5  (CHECKDT )                                        *
*/*%INCLUDE SYSUT5  (SSIDCHEK)                                        *
*;                                                              01S0904
@DATA    DS    0H
@CH00082 DC    H'3'
@CH00101 DC    H'4'
@CH00175 DC    H'5'
@CH00090 DC    H'6'
@CH00294 DC    H'7'
@CH00066 DC    H'8'
@CH00228 DC    H'10'
@CH00033 DC    H'12'
@CH00202 DC    H'16'
@CH00405 DC    H'20'
@CH00068 DC    H'24'
@CH00989 DC    H'32'
@CH00627 DC    H'36'
@CH00554 DC    H'64'
@CH00915 DC    H'104'
@CH00916 DC    H'124'
@CH00935 DC    H'635'
@CH00970 DC    XL2'7F'
@SM00990 MVC   LINE+32(0,CVTPTR),R1PARMS(PARMSAVE)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
@SA00005 DS    15F
@SA00006 DS    15F
@SA00004 DS    0F
         DS    15F
@AL00001 DS    1A
ISDASDA0 CSECT
         DS    0F
@CF00078 DC    F'1'
@CH00078 EQU   @CF00078+2
@CF00097 DC    F'2'
@CH00097 EQU   @CF00097+2
@CF00649 DC    F'49'
@CF00914 DC    F'100'
@CH00914 EQU   @CF00914+2
@CF00979 DC    F'99991'
@CF00919 DC    F'99992'
@CF00921 DC    F'99993'
@CF00911 DC    XL4'0000000F'
@CF00952 DC    XL4'8000'
@CF00966 DC    XL4'000F'
@DATD    DSECT
         DS    0D
L        DS    F
@TS00001 DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISDASDA0 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00339 DC    V(ISDADCS0)
@CV00340 DC    V(ISDAPAD0)
@CV00341 DC    V(ISDASUM0)
@CV00342 DC    V(ISDADHE0)
@CV00343 DC    V(ISDAFSC0)
@CV00344 DC    V(ISDAEQC0)
@CV00345 DC    V(ISDADCK0)
@CV00346 DC    V(ISDACSB0)
@CV00347 DC    V(ISDADAT0)
@CV00348 DC    V(ISDADRC0)
@CV00349 DC    V(ISDAGEN0)
@CV00350 DC    V(ISDAAPR0)
@CV00352 DC    V(ISDADCS1)
@CV00353 DC    V(ISDAPAD1)
@CV00354 DC    V(ISDASUM1)
@CV00355 DC    V(ISDADHE1)
@CV00356 DC    V(ISDAFSC1)
@CV00357 DC    V(ISDAEQC1)
@CV00358 DC    V(ISDADCK1)
@CV00359 DC    V(ISDACSB1)
@CV00360 DC    V(ISDADAT1)
@CV00361 DC    V(ISDADRC1)
@CV00362 DC    V(ISDAAPR1)
@CV00364 DC    V(ISDAFSC2)
@CV00896 DC    V(ISDAPARM)
@CV00897 DC    V(ISDAOPT0)
@CV00898 DC    V(ISDACNFG)
@CV00899 DC    V(ISDACNF1)
@CV00900 DC    V(ISDAPRT0)
@CV00901 DC    V(ISDAPRTO)
@CV00902 DC    V(ISDAPRTH)
@CV00903 DC    V(ISDAPRTC)
@CV00904 DC    V(ISDATYPE)
@CV00905 DC    V(ISDATYPC)
@CV00906 DC    V(ISDAHEXP)
@CV00907 DC    V(ISDAHIST)
@CV00908 DC    V(ISDALOG0)
@CV00895 DC    V(ISDAFREE)
@CV00893 DC    V(ISDAGET0)
@CV00894 DC    V(ISDAGET1)
         DS    0D
@CC00930 DC    C'SDAHISIN'
@CC00931 DC    C'SDALOGIN'
@CC00975 DC    C' CALL '
@CC00371 DC    C'READ'
@CC00373 DC    C'USED'
@CC00920 DC    C'NONE'
@CC00375 DC    C'   '
@CC00925 DC    C'CNF'
@CC00941 EQU   @CC00930
@CC00954 EQU   @CC00375
@CB00911 DC    X'0000000F'
@CB00912 DC    X'0999999F'
@CB00932 DC    X'00000010'
@CB00933 DC    X'0099999F'
@CB00955 DC    X'00000000'
@CB00389 DC    X'2009'
@CB00391 DC    X'200D'
@CB00393 DC    X'0842'
@CB00956 EQU   @CB00911
EDPAT03  DC    X'40202120'
EDPAT05  DC    X'402020202120'
SDAHEADL DC    CL20'SYSTEM DATA ANALYZER'
SDAHEADD DC    CL40'REPORT 1 - DETAIL PRINT OF INPUT RECORDS'
SDAVERNO DC    CL12'VERSION 2.1 '
SDAINHD  DC    CL9'REQUESTED'
SDAHEADI DC    CL26'CONTROL INPUT'
SDAHEADM DC    CL26'INTERVAL: DDD/YY TO DDD/YY'
SDAHEADR DC    CL8'PAGE   1'
ISDA0002 DC    CL37'ISDA0002  RETURN CODE XXX ON XXXXXXXX'
ISDA0003 DC    CL46' XXXXX RECORDS READ FOR DATES DDD/YY TO DDD/YY'
ISDA0004 DC    CL39'ISDA0004  RETURN CODE XXX FROM ISDAXXX '
ISDA0005 DC    CL38'00000 RECORDS READ, 00000 RECORDS USED'
ISDA0006 DC    CL66'ISDA0006  NO SPACE AVAILABLE FOR XXX TO CONTINUE ACC
               CUMULATING DATA'
ISDA0008 DC    CL34'ISDA0008  COMPLETE INPUT RECORD - '
ISDA0009 DC    CL38'ISDA0009  INVALID DATE'
ISDA0010 DC    CL38'ISDA0010  NO FORMAT NUMBER'
ISDA0011 DC    CL38'ISDA0011  SUBSYSTEM ID IS INVALID'
ISDA0012 DC    CL38'ISDA0012  SENSE DATA ALL ZERO'
ISDA0013 DC    CL38'ISDA0013  RECORD REJECTED BY'
ISDA0014 DC    CL38'ISDA0014  INVALID SA FORMAT'
ISDA0015 DC    CL38'ISDA0015  INVALID STATUS BYTE'
ISDA0031 DC    CL38'ISDA0031  DDNAMEIN, OPEN FAILED.'
ISDA0032 DC    CL38'          DDNAMEIN, END OF FILE.'
ISDA0033 DC    CL38'ISDA0033  DDNAMEIN, READ ERROR.'
ISDA0034 DC    CL38'ISDA0034  DDNAMEIN, NO LOGREC HEADER.'
ISDA0035 DC    CL38'          DDNAMEIN, END OF LOGREC.'
ISDA0036 DC    CL38'ISDA0036  DDNAMEIN, NO SPACE FOR I/O'
ISDA0041 DC    CL52'ISDA0041  INPUT PARAMETERS EXCEEDS ISDAPARM TABLE'
ISDA0042 DC    CL52'ISDA0042  READ ERROR ON SYSIN'
ISDA0043 DC    CL52'ISDA0043  SEVERE ERROR IN SDA PARAMETERS'
ISDA0044 DC    CL52'ISDA0044  NO VALID INPUT DATA FOUND'
ISDA0045 DC    CL52'ISDA0045  ABNORMAL TERMINATION OF SDA'
ISDA0046 DC    CL52'ISDA0046  NO SPACE AVAILABLE FOR ISDACNFG'
ISDA0047 DC    CL52'ISDA0047  INVALID OR MISSING INFORMATION IN SDACONFC
               G'
ISDA0048 DC    CL52'ISDA0048  READ ERROR ON SDACONFG'
ISDA0049 DC    CL52'ISDA0049  NO CONFIGURATION RECORDS FOUND'
ISDA0051 DC    CL64'ISDA0051  PATH ANALYSIS CANNOT BE RUN WITHOUT CONFIC
               GURATION DATA'
ISDA0099 DC    CL14'END OF SDA RUN'
ISDA0063 DC    CL51'REPORT NN - XXX - REQUESTED BUT NO INPUT DATA FOUNDC
               '
ISDA0065 DC    CL56'ISDA0065  NO SPACE AVAILABLE FOR XXX TO PRODUCE A RC
               EPORT'
ISDA0070 DC    CL94'*** ERROR *** THE CODE FOR XXX (ISDAXXX0 OR ISDAXXXC
               1) IS MISSING FROM THE LOAD MODULE ISDASDA0'
ISDA0104 DC    CL33'ISDA0104  UNABLE TO OPEN SYSPRINT'
ISDA0112 DC    CL33'ISDA0112  WRITE ERROR ON SYSPRINT'
ISDA0124 DC    CL40'ISDA0124  NO SPACE FOR SYSPRINT WORKAREA'
SDAOUTHD DC    CL9' SELECTED'
TRACEM01 DC    CL24'ISDASDA0 TRACE - ISDACVT'
TRACEM02 DC    CL31'ISDASDA0 TRACE - SDA EXEC FIELD'
TRACEM03 DC    CL25'ISDASDA0 TRACE - ISDAPRMS'
         DS    CL3
RPTTABLE DS    CL388
         ORG   RPTTABLE
GEN0ADDR DC    VL4(ISDAGEN0)
GEN1ADDR DC    VL4(ISDAGEN0)
GENPADDR DC    AL4(CGEN)
GENWORKP DC    AL4(GEN00PTR)
GENFLAGP DC    AL4(GENFLAGS)
GENINCHK DS    FL4
         ORG   GENINCHK
GENFMT   DC    B'01100100'
GENID    DC    CL3'GEN'
         ORG   RPTTABLE+24
GENR2FLG DS    FL4
         ORG   GENR2FLG
GENID2   DC    CL3'GEN'
GENNUMB  DC    AL1(0)
         ORG   RPTTABLE+28
GENSUBFG DS    FL4
         ORG   GENSUBFG
GENSUBF  DC    B'1011000000000000'
GENMSGCD DC    X'FFFF'
         ORG   RPTTABLE+32
SUM0ADDR DC    VL4(ISDASUM0)
SUM1ADDR DC    VL4(ISDASUM1)
SUMPADDR DC    AL4(CSUM)
SUMWORKP DC    AL4(SUM00PTR)
SUMFLAGP DC    AL4(SUMFLAGS)
SUMINCHK DS    FL4
         ORG   SUMINCHK
SUMFMT   DC    B'11111100'
SUMID    DC    CL3'SUM'
         ORG   RPTTABLE+56
SUMR2FLG DS    FL4
         ORG   SUMR2FLG
SUMID2   DC    CL3'SUM'
SUMNUMB  DC    AL1(2)
         ORG   RPTTABLE+60
SUMSUBFG DS    FL4
         ORG   SUMSUBFG
SUMSUBF  DC    X'FFFF'
SUMMSGCD DC    X'FFFF'
         ORG   RPTTABLE+64
APR0ADDR DC    VL4(ISDAAPR0)
APR1ADDR DC    VL4(ISDAAPR1)
APRPADDR DC    AL4(CAPRSUU)
APRWORKP DC    AL4(APR00PTR)
APRFLAGP DC    AL4(APRFLAGS)
APRINCHK DS    FL4
         ORG   APRINCHK
APRFMT   DC    B'11111100'
APRID    DC    CL3'APR'
         ORG   RPTTABLE+88
APRR2FLG DS    FL4
         ORG   APRR2FLG
APRID2   DC    CL3'SUU'
APRNUMB  DC    AL1(3)
         ORG   RPTTABLE+92
APRSUBFG DS    FL4
         ORG   APRSUBFG
APRSUBF  DC    B'1111100001111010'
APRMSGCD DC    B'1000001111100000'
         ORG   RPTTABLE+96
FSC0ADDR DC    VL4(ISDAFSC0)
FSC1ADDR DC    VL4(ISDAFSC1)
FSCPADDR DC    AL4(CFSC)
FSCWORKP DC    AL4(FSC00PTR)
FSCFLAGP DC    AL4(FSCFLAGS)
FSCINCHK DS    FL4
         ORG   FSCINCHK
FSCFMT   DC    B'01111100'
FSCID    DC    CL3'FSC'
         ORG   RPTTABLE+120
FSCR2FLG DS    FL4
         ORG   FSCR2FLG
FSCID2   DC    CL3'FSC'
FSCNUMB  DC    AL1(5)
         ORG   RPTTABLE+124
FSCSUBFG DS    FL4
         ORG   FSCSUBFG
FSCSUBF  DC    B'1111100001110010'
FSCMSGCD DC    X'FFFF'
         ORG   RPTTABLE+128
PAD0ADDR DC    VL4(ISDAPAD0)
PAD1ADDR DC    VL4(ISDAPAD1)
PADPADDR DC    AL4(CPAD)
PADWORKP DC    AL4(PAD00PTR)
PADFLAGP DC    AL4(PADFLAGS)
PADINCHK DS    FL4
         ORG   PADINCHK
PADFMT   DC    B'00001100'
PADID    DC    CL3'PAD'
         ORG   RPTTABLE+152
PADR2FLG DS    FL4
         ORG   PADR2FLG
PADID2   DC    CL3'PAD'
PADNUMB  DC    AL1(6)
         ORG   RPTTABLE+156
PADSUBFG DS    FL4
         ORG   PADSUBFG
PADSUBF  DC    B'0111000001110010'
PADMSGCD DC    X'FFFF'
         ORG   RPTTABLE+160
EQC0ADDR DC    VL4(ISDAEQC0)
EQC1ADDR DC    VL4(ISDAEQC1)
EQCPADDR DC    AL4(CEQC)
EQCWORKP DC    AL4(EQC00PTR)
EQCFLAGP DC    AL4(EQCFLAGS)
EQCINCHK DS    FL4
         ORG   EQCINCHK
EQCFMT   DC    B'01111100'
EQCID    DC    CL3'EQC'
         ORG   RPTTABLE+184
EQCR2FLG DS    FL4
         ORG   EQCR2FLG
EQCID2   DC    CL3'EQC'
EQCNUMB  DC    AL1(7)
         ORG   RPTTABLE+188
EQCSUBFG DS    FL4
         ORG   EQCSUBFG
EQCSUBF  DC    B'1111110001110010'
EQCMSGCD DC    X'FFFF'
         ORG   RPTTABLE+192
DCK0ADDR DC    VL4(ISDADCK0)
DCK1ADDR DC    VL4(ISDADCK1)
DCKPADDR DC    AL4(CDCKTLX)
DCKWORKP DC    AL4(DCK00PTR)
DCKFLAGP DC    AL4(DCKFLAGS)
DCKINCHK DS    FL4
         ORG   DCKINCHK
DCKFMT   DC    B'00001000'
DCKID    DC    CL3'DCK'
         ORG   RPTTABLE+216
DCKR2FLG DS    FL4
         ORG   DCKR2FLG
DCKID2   DC    CL3'TLX'
DCKNUMB  DC    AL1(8)
         ORG   RPTTABLE+220
DCKSUBFG DS    FL4
         ORG   DCKSUBFG
DCKSUBF  DC    B'0000000001000000'
DCKMSGCD DC    X'FFFF'
         ORG   RPTTABLE+224
DRC0ADDR DC    VL4(ISDADRC0)
DRC1ADDR DC    VL4(ISDADRC1)
DRCPADDR DC    AL4(CDRC)
DRCWORKP DC    AL4(DRC00PTR)
DRCFLAGP DC    AL4(DRCFLAGS)
DRCINCHK DS    FL4
         ORG   DRCINCHK
DRCFMT   DC    B'00001000'
DRCID    DC    CL3'DRC'
         ORG   RPTTABLE+248
DRCR2FLG DS    FL4
         ORG   DRCR2FLG
DRCID2   DC    CL3'DRC'
DRCNUMB  DC    AL1(10)
         ORG   RPTTABLE+252
DRCSUBFG DS    FL4
         ORG   DRCSUBFG
DRCSUBF  DC    B'0000000000000010'
DRCMSGCD DC    X'FFFF'
         ORG   RPTTABLE+256
DAT0ADDR DC    VL4(ISDADAT0)
DAT1ADDR DC    VL4(ISDADAT1)
DATPADDR DC    AL4(CDAT)
DATWORKP DC    AL4(DAT00PTR)
DATFLAGP DC    AL4(DATFLAGS)
DATINCHK DS    FL4
         ORG   DATINCHK
DATFMT   DC    B'00001000'
DATID    DC    CL3'DAT'
         ORG   RPTTABLE+280
DATR2FLG DS    FL4
         ORG   DATR2FLG
DATID2   DC    CL3'DAT'
DATNUMB  DC    AL1(11)
         ORG   RPTTABLE+284
DATSUBFG DS    FL4
         ORG   DATSUBFG
DATSUBF  DC    B'0000000000010000'
DATMSGCD DC    X'FFFF'
         ORG   RPTTABLE+288
DHE0ADDR DC    VL4(ISDADHE0)
DHE1ADDR DC    VL4(ISDADHE1)
DHEPADDR DC    AL4(CDHEDHU)
DHEWORKP DC    AL4(DHE00PTR)
DHEFLAGP DC    AL4(DHEFLAGS)
DHEINCHK DS    FL4
         ORG   DHEINCHK
DHEFMT   DC    B'10000000'
DHEID    DC    CL3'DHU'
         ORG   RPTTABLE+312
DHER2FLG DS    FL4
         ORG   DHER2FLG
DHEID2   DC    CL3'DHE'
DHENUMB  DC    AL1(12)
         ORG   RPTTABLE+316
DHESUBFG DS    FL4
         ORG   DHESUBFG
DHESUBF  DC    X'FFFF'
DHEMSGCD DC    B'0000010000000000'
         ORG   RPTTABLE+320
CSB0ADDR DC    VL4(ISDACSB0)
CSB1ADDR DC    VL4(ISDACSB1)
CSBPADDR DC    AL4(CCSBCSF)
CSBWORKP DC    AL4(CSB00PTR)
CSBFLAGP DC    AL4(CSBFLAGS)
CSBINCHK DS    FL4
         ORG   CSBINCHK
CSBFMT   DC    B'00010000'
CSBID    DC    CL3'CSB'
         ORG   RPTTABLE+344
CSBR2FLG DS    FL4
         ORG   CSBR2FLG
CSBID2   DC    CL3'CSF'
CSBNUMB  DC    AL1(14)
         ORG   RPTTABLE+348
CSBSUBFG DS    FL4
         ORG   CSBSUBFG
CSBSUBF  DC    X'FFFF'
CSBMSGCD DC    X'FFFF'
         ORG   RPTTABLE+352
DCS0ADDR DC    VL4(ISDADCS0)
DCS1ADDR DC    VL4(ISDADCS1)
DCSPADDR DC    AL4(CDCS)
DCSWORKP DC    AL4(DCS00PTR)
DCSFLAGP DC    AL4(DCSFLAGS)
DCSINCHK DS    FL4
         ORG   DCSINCHK
DCSFMT   DC    B'00001000'
DCSID    DC    CL3'DCS'
         ORG   RPTTABLE+376
DCSR2FLG DS    FL4
         ORG   DCSR2FLG
DCSID2   DC    CL3'DCS'
DCSNUMB  DC    AL1(16)
         ORG   RPTTABLE+380
DCSSUBFG DS    FL4
         ORG   DCSSUBFG
DCSSUBF  DC    B'0000000000000100'
DCSMSGCD DC    X'FFFF'
         ORG   RPTTABLE+384
END0ADDR DC    XL4'7FFFFFFF'
         ORG   RPTTABLE+388
ERRDATAP DC    AL4(ISDA0009)
         DC    AL4(ISDA0010)
         DC    AL4(ISDA0011)
         DC    AL4(ISDA0012)
         DC    AL4(ISDA0014)
         DC    AL4(ISDA0015)
ERRINPUT DC    AL4(ISDA0031)
         DC    AL4(ISDA0032)
         DC    AL4(ISDA0033)
         DC    AL4(ISDA0034)
         DC    AL4(ISDA0035)
         DC    AL4(ISDA0036)
ERRSEVER DC    AL4(ISDA0041)
         DC    AL4(ISDA0043)
         DC    AL4(ISDA0042)
         DC    AL4(ISDA0045)
         DC    AL4(ISDA0044)
         DC    AL4(ISDA0046)
         DC    AL4(ISDA0047)
         DC    AL4(ISDA0048)
         DC    AL4(ISDA0049)
         DC    AL4(ISDA0045)
PATCH    DC    50X'00'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
K        EQU   @07
J        EQU   @04
I        EQU   @05
TEMPPTR  EQU   @04
MRPTTPTR EQU   @04
SDAWKPTR EQU   @03
PARMSAVE EQU   @04
LPARMPTR EQU   @06
CVTPTR   EQU   @02
R0       EQU   @00
R1       EQU   @01
R15      EQU   @15
ISDACVT  EQU   0
CVTPTRS0 EQU   ISDACVT
DATAPTR  EQU   CVTPTRS0
SDATAPTR EQU   CVTPTRS0+4
PARMPTR  EQU   CVTPTRS0+8
SDA00PTR EQU   CVTPTRS0+12
PARM0PTR EQU   CVTPTRS0+16
DCS00PTR EQU   CVTPTRS0+40
PAD00PTR EQU   CVTPTRS0+44
SUM00PTR EQU   CVTPTRS0+48
DHE00PTR EQU   CVTPTRS0+52
FSC00PTR EQU   CVTPTRS0+56
EQC00PTR EQU   CVTPTRS0+60
DCK00PTR EQU   CVTPTRS0+64
CSB00PTR EQU   CVTPTRS0+68
DAT00PTR EQU   CVTPTRS0+72
DRC00PTR EQU   CVTPTRS0+76
APR00PTR EQU   CVTPTRS0+80
CNFG0PTR EQU   CVTPTRS0+88
GEN00PTR EQU   CVTPTRS0+92
WORKCALL EQU   CVTPTRS0+96
GET0CALL EQU   ISDACVT+100
SPNOLEN  EQU   GET0CALL
HEXPCALL EQU   ISDACVT+108
DUMPADDR EQU   HEXPCALL
DUMPLEN  EQU   HEXPCALL+4
DUMPIDNO EQU   HEXPCALL+8
PRT0CALL EQU   ISDACVT+120
OUTLINE  EQU   PRT0CALL
ANSI     EQU   OUTLINE
LINE     EQU   OUTLINE+1
SDARPTID EQU   PRT0CALL+133
SDADATD  EQU   ISDACVT+256
PRTDATD  EQU   ISDACVT+416
ISDAPRMS EQU   0
CINPUT   EQU   ISDAPRMS
CLOGIN   EQU   CINPUT
CHISTIN  EQU   CINPUT+1
CSTART   EQU   ISDAPRMS+2
CEND     EQU   ISDAPRMS+6
CTYPE    EQU   ISDAPRMS+11
CFSCONLY EQU   ISDAPRMS+13
CSSIDF   EQU   ISDAPRMS+17
CSERIAL  EQU   ISDAPRMS+21
CREPORTS EQU   ISDAPRMS+33
CDCS     EQU   CREPORTS
CPAD     EQU   CREPORTS+1
CSUM     EQU   CREPORTS+2
CDHEDHU  EQU   CREPORTS+3
CFSC     EQU   CREPORTS+4
CEQC     EQU   CREPORTS+5
CDCKTLX  EQU   CREPORTS+6
CCSBCSF  EQU   CREPORTS+7
CDAT     EQU   CREPORTS+8
CDRC     EQU   CREPORTS+9
CAPRSUU  EQU   CREPORTS+10
CPERIOD  EQU   ISDAPRMS+45
CDETAIL  EQU   ISDAPRMS+46
CGEN     EQU   ISDAPRMS+47
CTRACE   EQU   ISDAPRMS+48
ISDAGHDR EQU   0
GET0SPLN EQU   ISDAGHDR+8
OBRMDR   EQU   0
SCW      EQU   OBRMDR
SLENGTH  EQU   SCW
CLASRC   EQU   OBRMDR+4
SWITCHES EQU   OBRMDR+6
SWITCH0  EQU   SWITCHES
SWITCH1  EQU   SWITCHES+1
SWITCH2  EQU   SWITCHES+2
DATETIME EQU   OBRMDR+12
DATE     EQU   DATETIME
DAY      EQU   DATE+2
TIME     EQU   DATETIME+4
CPUSERID EQU   OBRMDR+21
DEVDEP1  EQU   OBRMDR+28
JOBID    EQU   DEVDEP1
DEVTYPE1 EQU   JOBID
MDRCUA   EQU   DEVTYPE1
CUA2     EQU   JOBID+5
SDRINF   EQU   DEVDEP1+8
DEVDEPC  EQU   SDRINF+16
SECUA    EQU   SDRINF+17
DEVTYPE2 EQU   SDRINF+20
SDRCNT2  EQU   SDRINF+24
PCUA     EQU   SDRINF+25
SENSCNT  EQU   SDRINF+30
DEVDEP2  EQU   SDRINF+32
DEVTYPE  EQU   0
OPTFLAGS EQU   DEVTYPE+1
CLASTYPE EQU   DEVTYPE+2
ISDAMSCS EQU   0
STATUS   EQU   ISDAMSCS
SUBSYSID EQU   ISDAMSCS+1
SSIDFLAG EQU   SUBSYSID
SSID     EQU   SUBSYSID
SSIDDEVT EQU   SSID+1
FORMATNO EQU   ISDAMSCS+3
SUBSENSE EQU   ISDAMSCS+4
DASDFMTN EQU   SUBSENSE+3
SUBFMTMG EQU   SUBSENSE+7
RUADASD  EQU   SUBSENSE+20
R1PARMS  EQU   0
R1PARML  EQU   R1PARMS
R1PARMC  EQU   R1PARMS+2
VSR1PTR  EQU   0
SDAWORK  EQU   0
SDAWORK1 EQU   SDAWORK
INFLAGS  EQU   SDAWORK1
IRECTYPE EQU   INFLAGS
INSOURCE EQU   INFLAGS+1
INDEVTYP EQU   INFLAGS+2
SDAFLAG0 EQU   INFLAGS+3
DLENGTH  EQU   SDAWORK1+4
INRECCUA EQU   SDAWORK1+6
CUABYTE1 EQU   INRECCUA+1
NINREC   EQU   SDAWORK1+8
NOUTREC  EQU   SDAWORK1+12
DEVPTR   EQU   SDAWORK1+16
NTEMPREC EQU   SDAWORK1+20
NINRECT  EQU   SDAWORK1+24
WORKPTR  EQU   SDAWORK1+28
GET0PTR  EQU   SDAWORK1+32
LOGPTR   EQU   SDAWORK1+36
SENSEPTR EQU   SDAWORK1+40
SUBFMSCK EQU   SDAWORK1+44
SUBFCHK  EQU   SUBFMSCK
MSGCDCHK EQU   SUBFMSCK+2
XXX2ADDR EQU   SDAWORK1+48
TODAYDAT EQU   SDAWORK1+52
RETCODE  EQU   SDAWORK1+56
RETCODER EQU   SDAWORK1+58
RETCODIN EQU   SDAWORK1+60
RETCODFG EQU   SDAWORK1+62
CLENGTH  EQU   SDAWORK1+64
RET8CNT  EQU   SDAWORK1+66
RETDCNT  EQU   SDAWORK1+68
PGMFLAGS EQU   SDAWORK+70
SUMFLAGS EQU   PGMFLAGS
PADFLAGS EQU   PGMFLAGS+2
DHEFLAGS EQU   PGMFLAGS+4
FSCFLAGS EQU   PGMFLAGS+6
EQCFLAGS EQU   PGMFLAGS+8
DCKFLAGS EQU   PGMFLAGS+10
CSBFLAGS EQU   PGMFLAGS+12
DATFLAGS EQU   PGMFLAGS+14
DRCFLAGS EQU   PGMFLAGS+16
DCSFLAGS EQU   PGMFLAGS+18
GENFLAGS EQU   PGMFLAGS+20
APRFLAGS EQU   PGMFLAGS+22
TEMP28   EQU   SDAWORK+96
TEMP8    EQU   TEMP28
TEMP7    EQU   TEMP8
TEMP4    EQU   TEMP7
TEMP3    EQU   TEMP4
TEMP2    EQU   TEMP3
TEMP1    EQU   TEMP2
SDAWORK2 EQU   SDAWORK+124
LOWDATE  EQU   SDAWORK2
LOWDAY   EQU   LOWDATE+2
HIGHDATE EQU   SDAWORK2+4
HIGHDAY  EQU   HIGHDATE+2
ALOWDATE EQU   SDAWORK2+8
ALOWDAY  EQU   ALOWDATE+2
AHIGHDAT EQU   SDAWORK2+12
AHIGHDAY EQU   AHIGHDAT+2
DDNAMEIN EQU   SDAWORK2+16
XXIDSAVE EQU   SDAWORK2+24
USEFLAG  EQU   SDAWORK2+27
SUBFSAVE EQU   SDAWORK2+28
FMTCHK   EQU   SDAWORK2+29
MRPTTAB  EQU   0
XXX0ADDR EQU   MRPTTAB
XXX1ADDR EQU   MRPTTAB+4
XXXPADDR EQU   MRPTTAB+8
XXXWORKP EQU   MRPTTAB+12
XXXFLAGP EQU   MRPTTAB+16
XXXINCHK EQU   MRPTTAB+20
XXXFMT   EQU   XXXINCHK
XXXID    EQU   XXXINCHK+1
XXXR2FLG EQU   MRPTTAB+24
XXXID2   EQU   XXXR2FLG
XXXNUMB  EQU   XXXR2FLG+3
XXXSUBFG EQU   MRPTTAB+28
CXXX     EQU   0
XXX00PTR EQU   0
XXXFLAGS EQU   0
ISDAXXX0 EQU   0
ISDAXXX1 EQU   0
ISDAXXX2 EQU   0
ISDA00X1 EQU   0
ISDA00X2 EQU   0
ISDA00X3 EQU   0
TEMP68   EQU   TEMP8+5
TEMP78   EQU   TEMP8+6
VTITLE   EQU   LINE+25
MTITLE   EQU   LINE+57
RTITLE   EQU   LINE+119
MTITLE0  EQU   LINE+47
HDRSDAY  EQU   LINE+67
HDRSYEAR EQU   LINE+71
HDREDAY  EQU   LINE+77
HDREYEAR EQU   LINE+81
RCODE02  EQU   LINE+21
MSG02ID  EQU   LINE+29
RCMSG03  EQU   LINE
FCMSG03  EQU   LINE+15
LDMSG03  EQU   LINE+29
LYMSG03  EQU   LINE+34
HDMSG03  EQU   LINE+39
HYMSG03  EQU   LINE+44
RCODE04  EQU   LINE+21
MSG04ID  EQU   LINE+35
MSG04ID0 EQU   LINE+38
MSG05LOC EQU   LINE+40
TRECM05  EQU   LINE+39
TPRECM05 EQU   LINE+59
MSG06ID  EQU   LINE+33
ERRORMSG EQU   LINE+34
ERRMSGID EQU   LINE+64
MSGX2ID  EQU   LINE+10
MSG63NUM EQU   LINE+7
MSG63ID  EQU   LINE+12
MSG65ID  EQU   LINE+33
MSG70ID1 EQU   LINE+27
MSG70ID2 EQU   LINE+36
MSG70ID3 EQU   LINE+48
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
XXXMSGCD EQU   XXXSUBFG+2
XXXSUBF  EQU   XXXSUBFG
AHIGHYER EQU   AHIGHDAT
ALOWYEAR EQU   ALOWDATE
HIGHYEAR EQU   HIGHDATE
LOWYEAR  EQU   LOWDATE
PWRFLAGS EQU   PGMFLAGS+24
CUABYTE0 EQU   INRECCUA
SANOMSCD EQU   SUBSENSE+27
RCYLMSCD EQU   SUBSENSE+25
RUAMSCD  EQU   SUBSENSE+24
MSCFSC   EQU   SUBSENSE+22
@NM00008 EQU   SUBSENSE+21
DASDFSC  EQU   SUBSENSE+18
@NM00007 EQU   SUBSENSE+8
MSGCODEN EQU   SUBFMTMG
SUBFMTNO EQU   SUBFMTMG
SALOWAD2 EQU   SUBSENSE+6
SARETRY  EQU   SUBSENSE+5
@NM00006 EQU   SUBSENSE+4
SALOWADD EQU   SUBSENSE+2
SUBSTAT5 EQU   SUBSENSE+1
SUBSTAT4 EQU   SUBSENSE
SSIDLIBN EQU   SSID+1
SSIDTYPE EQU   SSID
UNITTYPE EQU   CLASTYPE+1
DEVCLASS EQU   CLASTYPE
IOFLAGS  EQU   DEVTYPE
IORETRY  EQU   SDRINF+28
CSW      EQU   SDRINF+8
FAILCCW  EQU   SDRINF
@NM00005 EQU   JOBID+4
SDRCNT1  EQU   OBRMDR+26
CPUID    EQU   CPUSERID+3
CPUSER   EQU   CPUSERID
VERNO    EQU   OBRMDR+20
TENSHUND EQU   TIME+3
SECOND   EQU   TIME+2
MINUTE   EQU   TIME+1
HOUR     EQU   TIME
YEAR     EQU   DATE
RECENTRY EQU   OBRMDR+11
RCDCNT   EQU   OBRMDR+10
SWITCH3  EQU   SWITCHES+3
SYSREL   EQU   OBRMDR+5
@NM00004 EQU   SCW+3
SCODE    EQU   SCW+2
@NM00003 EQU   ISDAGHDR+26
BLOCKCNT EQU   ISDAGHDR+24
BLOCKID  EQU   ISDAGHDR+20
LASTPTR  EQU   ISDAGHDR+16
NEXTPTR  EQU   ISDAGHDR+12
GET0LEN  EQU   GET0SPLN+1
GET0SPNO EQU   GET0SPLN
ENDPTR   EQU   ISDAGHDR+4
STARTPTR EQU   ISDAGHDR
CPWR     EQU   CREPORTS+11
CSERNO   EQU   CSERIAL+4
@NM00002 EQU   CSERIAL+3
CIBM     EQU   CSERIAL
CRATIO   EQU   ISDAPRMS+19
CSSID    EQU   CSSIDF
@NM00001 EQU   CSSIDF
CFSC34   EQU   CFSCONLY+2
CFSC12   EQU   CFSCONLY
CSUMMARY EQU   ISDAPRMS+10
CENDDAY  EQU   CEND+2
CENDYEAR EQU   CEND
CSTDAY   EQU   CSTART+2
CSTYEAR  EQU   CSTART
PRTSA001 EQU   PRTDATD
SDATEMPS EQU   SDADATD+136
SDASA002 EQU   SDADATD+76
SDAPC001 EQU   SDADATD+72
SDASA001 EQU   SDADATD
COREADDR EQU   GET0CALL+4
CORELEN  EQU   SPNOLEN+1
SPNO     EQU   SPNOLEN
PWR00PTR EQU   CVTPTRS0+84
LOG00PTR EQU   CVTPTRS0+36
HIST0PTR EQU   CVTPTRS0+32
PRT00PTR EQU   CVTPTRS0+28
GET00PTR EQU   CVTPTRS0+24
TYPE0PTR EQU   CVTPTRS0+20
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00174 EQU   @RC00173
@RC00262 EQU   @RC00240
@RC00257 EQU   @RC00240
@RC00290 EQU   @RC00279
@RC00285 EQU   @RC00279
@RC00344 EQU   @RC00331
@RC00585 EQU   @RC00576
@RC00581 EQU   @RC00576
@RC00577 EQU   @RC00576
@RC00593 EQU   @RC00592
@RC00604 EQU   @RC00555
@RC00602 EQU   @RC00555
@RC00552 EQU   @RC00551
@RC00646 EQU   @RC00645
@RC00761 EQU   @RC00760
@RC00814 EQU   @RC00782
@PB00006 EQU   @EL00005
@RC00265 EQU   @RC00262
@RC00295 EQU   @RC00290
@RC00293 EQU   @RC00290
@RC00662 EQU   @RC00646
@RC00664 EQU   @RC00662
@RC00700 EQU   @RC00662
@ENDDATA EQU   *
         END   ISDASDA0,(C'PLS1755',0701,78044)
