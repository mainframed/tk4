         TITLE 'ICBVSP00 - MSVC CPU ASSOCIATION MODULE - MVS           *
                        '
ICBVSP00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICBVSP00  77.355'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*                                                            @ZA09541*/
*                                   /*                       @Y30LB27*/
*/*********************************************************************
** ICBVSP00 MAINLINE                                         @Y30LB27
**                                                                 0149
**********************************************************************/
*                                                                  0149
*                                   /*                       @Y30LB27*/
*/*********************************************************************
** SET UP ADDRESSABILITY AND INITIALIZE VARIABLES            @Y30LB27
**********************************************************************/
*                                                                  0149
*   RPLVPTR=REG1;                   /* SAVE MSVC RPLV ADDR   @Y30LB27*/
         LR    RPLVPTR,REG1                                        0149
*   VVIPTR=RPLVVICB;                /* INITIALIZE MSVC CONTROL BLOCK
*                                      PTR                   @Y30LB27*/
         L     VVIPTR,RPLVVICB(,RPLVPTR)                           0150
*   UTILPTR=ADDR(RPLVUTIL);         /* EST ADDR FOR REQUEST  @Y30LB27*/
         LA    @14,RPLVUTIL(,RPLVPTR)                              0151
         ST    @14,UTILPTR                                         0151
*   DSMCODE=RPLRCODE;               /* SAVE DSM REASON CODE  @Y30LB27*/
         LH    DSMCODE,RPLRCODE(,RPLVPTR)                          0152
         N     DSMCODE,@CF01715                                    0152
*   RPLRCODE=ZERO;                  /* SET REASON CODE       @Y30LB27*/
         SLR   @14,@14                                             0153
         STH   @14,RPLRCODE(,RPLVPTR)                              0153
*   RPLVRETC=ZERO;                  /* SET RETURN CODE       @Y30LB27*/
         STH   @14,RPLVRETC(,RPLVPTR)                              0154
*   MSGRQ=''B;                      /* CLEAR MSG REQUEST BLOCK     0155
*                                                            @Y30LB27*/
         XC    MSGRQ(32),MSGRQ                                     0155
*   MSGRPLV=RPLVPTR;                /* SET PTR TO RPLV       @Y30LB27*/
         ST    RPLVPTR,MSGRPLV                                     0156
*   HDRRPLV=RPLVPTR;                /* DITTO                 @Y30LB27*/
         ST    RPLVPTR,HDRRPLV                                     0157
*   VOLERCNT=TEN;                   /* MAXIMUM NUMBER OF VSAM I/O  0158
*                                      ERRORS ALLOWED BEFORE       0158
*                                      DISABLING MSVC        @ZM30746
*                                                            @Y30LB27*/
         LA    VOLERCNT,10                                         0158
*/*********************************************************************
** VERIFY THAT MSVC IS ENABLED                               @Y30LB27
**********************************************************************/
*                                                                  0159
*   IF RPLVVIN=OFF&VVIFLG0=ON&SUSPOP^=SUSCODE THEN/* CHECK MSVC    0159
*                                      DISABLED              @Y30LB27*/
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0159
         BNZ   @RF00159                                            0159
         TM    VVIFLG0(VVIPTR),B'10000000'                         0159
         BNO   @RF00159                                            0159
         L     @14,SUSPPTR                                         0159
         CLC   SUSPOP(1,@14),SUSCODE                               0159
         BNE   @RT00159                                            0159
*     RETURN;                       /* RETURN TO CALLER      @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
** FOR ANY ORDER EXCEPT SUSPEND FOR RE-CONFIGURATION FIRST   @Y30LB27
** CALL IS A NOP                                             @Y30LB27
**********************************************************************/
*                                                                  0161
*   IF SUSPOP^=SUSCODE THEN         /* JUST RETURN FOR ANY ORDER   0161
*                                      EXCEPT SUSPEND        @Y30LB27
*                                                            @Y30LB27*/
@RF00159 L     @14,SUSPPTR                                         0161
         CLC   SUSPOP(1,@14),SUSCODE                               0161
         BE    @RF00161                                            0161
*/*********************************************************************
** VERIFY THAT VSP HAS A VALID ORDER                         @Y30LB27
**********************************************************************/
*                                                                  0162
*     DO;                           /*                       @Y30LB27*/
*       IF RPLFTIME=OFF THEN        /* FIRST TIME FOR THIS REQUEST   */
         TM    RPLFTIME(RPLVPTR),B'10000000'                       0163
         BNZ   @RF00163                                            0163
*         IF PURGOP=PURGCODE×       /* PURGE CALL            @Y30LB27*/
*             ASDAOPC=ASCCODE&      /* ASSOCIATE CALL                */
*             (ASASSOC=ON×ASDMNT=ON)×/*                      @ZA05120*/
*             ASDAOPC=DSCCODE&      /* DISASSOCIATE CALL             */
*             (ASDASSOC=ON×ASDEINT=ON)/*                     @ZA05120*/
*           THEN                    /*                       @Y30LB27*/
         L     @14,PAIRPTR                                         0164
         CLC   PURGOP(1,@14),PURGCODE                              0164
         BE    @RT00164                                            0164
         L     @14,ASDASPTR                                        0164
         CLC   ASDAOPC(1,@14),ASCCODE                              0164
         BNE   @GL00003                                            0164
         TM    ASASSOC(@14),B'10000010'                            0164
         BNZ   @RT00164                                            0164
@GL00003 L     @14,ASDASPTR                                        0164
         CLC   ASDAOPC(1,@14),DSCCODE                              0164
         BNE   @RF00164                                            0164
         TM    ASDASSOC(@14),B'01000100'                           0164
         BNZ   @RT00164                                            0164
*           RETURN;                 /* JUST RETURN           @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
** ORDER IS INVALID - ISSUE ERROR MESSAGE                    @Y30LB27
**********************************************************************/
*                                                                  0166
*         ELSE                      /* INVALID ORDER         @Y30LB27*/
*           DO;                     /*                       @Y30LB27*/
@RF00164 DS    0H                                                  0167
*             VSPMSGID=MSGINVE;     /* INDICATE INVALID ORDER      0167
*                                                            @Y30LB27*/
         MVC   VSPMSGID(2),@CH00043                                0167
*             CNVRTWK1(ONE)=''B;    /* ORDER IS 1 CHARACTER  @Y30LB27*/
         MVI   CNVRTWK1,X'00'                                      0168
*             CNVRTWK2(TWO)=SUSPOP; /* CONVERT IT : SUSPOP USED FOR
*                                      ADDRESSABILITY        @Y30LB27*/
         L     @14,SUSPPTR                                         0169
         MVC   CNVRTWK2+1(1),SUSPOP(@14)                           0169
*             CALL VSPCNVRT;        /* CONVERT IT            @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0170
*             MSGLEN1=ONE;          /* SET CONVERSION LENGTH @Y30LB27*/
         MVI   MSGLEN1,X'01'                                       0171
*             MSGTEXT1=ADDR(CNVRTWK2)+THREE;/* SET ADDRESS   @Y30LB27*/
         LA    @14,CNVRTWK2                                        0172
         LA    @14,3(,@14)                                         0172
         STCM  @14,7,MSGTEXT1                                      0172
*             CALL VSPWTO;          /* ISSUE ERROR MESSAGE   @Y30LB27*/
         BAL   @14,VSPWTO                                          0173
*             RETURN;               /* RETURN TO CALLER      @Y30LB27*/
@EL00001 L     @13,4(,@13)                                         0174
@EF00001 DS    0H                                                  0174
@ER00001 LM    @14,@12,12(@13)                                     0174
         BR    @14                                                 0174
*           END;                    /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
** SECOND CALL - RESERVE THE INVENTORY - ALL ORDERS EXCEPT   @Y30LB27
** SUSPEND - SUSPEND DOES OWN PROCESSING                     @Y30LB27
**********************************************************************/
*                                                                  0176
*       IF DSMCODE^=ZERO THEN                                      0176
@RF00163 LTR   DSMCODE,DSMCODE                                     0176
         BNZ   @RT00176                                            0176
*         RETURN;                   /* ERROR NO ACTION REQD  @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
** IF ICBVIN00 DOES CALL - ONLY READ THE CPUID RECORD        @Y30LB27
** AND DO NOT RESERVE INVENTORY                                    0178
**********************************************************************/
*                                                                  0178
*       IF RPLVVIN=OFF THEN         /* INITIALIZATION CALL   @Y30LB27*/
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0178
         BNZ   @RF00178                                            0178
*         DO;                       /* YES                   @Y30LB27*/
*           REG0=RESINVEN;          /* INDICATE RESERVE ON INVENTORY
*                                                            @Y30LB27*/
         LA    REG0,1                                              0180
*           REG1=RPLVPTR;           /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0181
*           CALL ICBVRR00;          /* CALL ICBVRR00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01473                                        0182
         BALR  @14,@15                                             0182
*/*********************************************************************
** RESERVE FAILURE - ISSUE ERROR MESSAGE                     @Y30LB27
**********************************************************************/
*                                                                  0183
*           IF RPLVRETC^=ZERO THEN  /* RESERVE OKAY          @Y30LB27*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0183
         N     @14,@CF01715                                        0183
         LTR   @14,@14                                             0183
         BZ    @RF00183                                            0183
*             DO;                   /* IF NOT NOTIFY OPER. AND EXIT
*                                                            @Y30LB27*/
*               VSPMSGID=MSGVRRE;   /* INDICATE VRR ERROR    @Y30LB27*/
         MVC   VSPMSGID(2),@CH00041                                0185
*               CNVRTWK1(ONE:TWO)=RPLRCODE;/* CONVERT REASON CODE  0186
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0186
*               CALL VSPCNVRT;      /* CALL CONVERSION RTN   @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0187
*               CALL VSPWTO;        /* ISSUE MSG             @Y30LB27*/
         BAL   @14,VSPWTO                                          0188
*             END;                  /*                       @Y30LB27*/
*         END;                      /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00183 DS    0H                                                  0191
*/*********************************************************************
** RESERVE OKAY READ CPUID RECORD                            @Y30LB27
**********************************************************************/
*                                                                  0191
*       IF RPLVRETC=ZERO THEN                                      0191
@RF00178 LH    @14,RPLVRETC(,RPLVPTR)                              0191
         N     @14,@CF01715                                        0191
         LTR   @14,@14                                             0191
         BNZ   @RF00191                                            0191
*         DO;                       /*                       @ZM30746*/
*           RPLVTYP=RPLVREAD;       /* INDICATE READ         @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'00'                              0193
*           RPLVBUF=CPUIDPTR;       /* SET BUFFER ADDRESS    @Y30LB27*/
         L     @14,CPUIDPTR                                        0194
         ST    @14,RPLVBUF(,RPLVPTR)                               0194
*           RPLVKEY=CPUIDPTR;       /* SET KEY ADDRESS       @Y30LB27*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0195
*           RPLVRLN=LENGTH(CPUID);  /* SET BUFFER LENGTH     @Y30LB27*/
         LA    @09,151                                             0196
         ST    @09,RPLVRLN(,RPLVPTR)                               0196
*           RPLVBLN=LENGTH(CPUID);  /* SET BUFFER LENGTH     @Y30LB27*/
         ST    @09,RPLVBLN(,RPLVPTR)                               0197
*           CPUNAME=CCPUIDK;        /* SET KEY TO BE READ    @Y30LB27*/
         MVC   CPUNAME(13,@14),CCPUIDK                             0198
*           REG1=RPLVPTR;           /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0199
*           CALL ICBVIO00;          /* CALL I/O PROC         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0200
         BALR  @14,@15                                             0200
*/*********************************************************************
** READ FAILURE - ISSUE ERROR MESSAGE - DEQ DATA SET         @Y30LB27
**********************************************************************/
*                                                                  0201
*           IF RPLVRETC^=ZERO THEN                                 0201
         LH    @14,RPLVRETC(,RPLVPTR)                              0201
         N     @14,@CF01715                                        0201
         LTR   @14,@14                                             0201
         BZ    @RF00201                                            0201
*             DO;                   /* VSAM I/O ERROR        @Y30LB27*/
*               VSPMSGID=MSGVSME;   /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   VSPMSGID(2),@CH00061                                0203
*               MSGLEN1=TWELVE;     /* SET LEN OF MSG COMP   @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0204
*               MSGTEXT1=RPLVKEY;   /* SET LOC OF MSG COMP   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0205
*               CNVRTWK1(ONE:TWO)=RPLRCODE;/* CONVERT REASON CODE  0206
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0206
*               CALL VSPCNVRT;      /* CONVERT THE CODE      @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0207
*               CALL VSPWTO;        /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0208
*             END;                  /*                       @Y30LB27*/
*         END;                      /*                       @Y30LB27*/
@RF00201 DS    0H                                                  0211
*     END;                          /*                       @ZM30746
*                                                            @Y30LB27*/
@RF00191 DS    0H                                                  0212
*/*********************************************************************
** READ OKAY CALL PROCESSOR                                   @Y30LB27
**********************************************************************/
*                                                                  0212
*   IF RPLVRETC=ZERO THEN                                          0212
@RF00161 LH    @14,RPLVRETC(,RPLVPTR)                              0212
         N     @14,@CF01715                                        0212
         LTR   @14,@14                                             0212
         BNZ   @RF00212                                            0212
*     DO;                           /*                       @ZM30746*/
*       IF PURGOP=PURGCODE THEN     /* PURGE CALL            @Y30LB27*/
         L     @14,PAIRPTR                                         0214
         CLC   PURGOP(1,@14),PURGCODE                              0214
         BNE   @RF00214                                            0214
*         CALL VSPPURGE;            /* INVOKE PURGE PROC     @Y30LB27*/
         BAL   @14,VSPPURGE                                        0215
*       ELSE                        /* CHECK ASSOC           @Y30LB27*/
*         IF ASDAOPC=ASCCODE&       /* ASSOC CALL            @Y30LB27*/
*             (ASASSOC=ON×ASDMNT=ON) THEN/*                  @ZA05120*/
         B     @RC00214                                            0216
@RF00214 L     @14,ASDASPTR                                        0216
         CLC   ASDAOPC(1,@14),ASCCODE                              0216
         BNE   @RF00216                                            0216
         TM    ASASSOC(@14),B'10000010'                            0216
         BZ    @RF00216                                            0216
*           CALL VSPASSOC;          /* INVOKE ASSOCIATE PROC @Y30LB27*/
         BAL   @14,VSPASSOC                                        0217
*         ELSE                      /* CHECK DISASSOC        @Y30LB27*/
*           IF ASDAOPC=DSCCODE&     /* DISASSOC              @Y30LB27*/
*               (ASDASSOC=ON×ASDEINT=ON) THEN/*              @ZA05120*/
         B     @RC00216                                            0218
@RF00216 L     @14,ASDASPTR                                        0218
         CLC   ASDAOPC(1,@14),DSCCODE                              0218
         BNE   @RF00218                                            0218
         TM    ASDASSOC(@14),B'01000100'                           0218
         BZ    @RF00218                                            0218
*             CALL VSPDISAC;        /* INVOKE DISASSOCIATE   @Y30LB27*/
         BAL   @14,VSPDISAC                                        0219
*           ELSE                    /* CHECK SUSPEND         @Y30LB27*/
*             IF SUSPOP=SUSCODE THEN/* SUSPEND               @Y30LB27*/
         B     @RC00218                                            0220
@RF00218 L     @14,SUSPPTR                                         0220
         CLC   SUSPOP(1,@14),SUSCODE                               0220
         BNE   @RF00220                                            0220
*               CALL VSPSUS;        /* INVOKE SUSPEND PROC   @Y30LB27
*                                                            @Y30LB27*/
         BAL   @14,VSPSUS                                          0221
*/*********************************************************************
** INVALID ORDER SECOND CALL ISSUE ERROR MESSAGE             @Y30LB27
**********************************************************************/
*                                                                  0222
*             ELSE                  /* INVALID ORDER         @Y30LB27*/
*               DO;                 /*                       @Y30LB27*/
         B     @RC00220                                            0222
@RF00220 DS    0H                                                  0223
*                 VSPMSGID=MSGINVE; /* INDICATE INVALID ORDER@Y30LB27*/
         MVC   VSPMSGID(2),@CH00043                                0223
*                 CNVRTWK1(ONE)=''B;/* ORDER IS ONE BYTE     @Y30LB27*/
         MVI   CNVRTWK1,X'00'                                      0224
*                 CNVRTWK2(TWO)=SUSPOP;/* CONVERT IT         @Y30LB27*/
         L     @14,SUSPPTR                                         0225
         MVC   CNVRTWK2+1(1),SUSPOP(@14)                           0225
*                 CALL VSPCNVRT;    /* CALL CONVERSIO RTN    @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0226
*                 MSGLEN1=ONE;      /* SET CONVERTED LENGTH  @Y30LB27*/
         MVI   MSGLEN1,X'01'                                       0227
*                 MSGTEXT1=ADDR(CNVRTWK2)+THREE;/*           @Y30LB27*/
         LA    @14,CNVRTWK2                                        0228
         LA    @14,3(,@14)                                         0228
         STCM  @14,7,MSGTEXT1                                      0228
*                 MSGTEXT2=ZERO;    /* CLEAR 2ND SLOT        @Y30LB27*/
         SLR   @14,@14                                             0229
         STCM  @14,7,MSGTEXT2                                      0229
*                 CALL VSPWTO;      /* ISSUE ERROR MESSAGE   @Y30LB27*/
         BAL   @14,VSPWTO                                          0230
*               END;                /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * FOR ANY ORDER EXCEPT SUSPEND, WRITE UPDATED CPUID RECORD,      0232
* * ENDREQ THE DATA SET AND DEQ                                    0232
* ********************************************************************/
*                                                                  0232
*       IF SUSPOP^=SUSCODE THEN     /* FOR ANY ORDER EXCEPT SUSPEND
*                                                            @Y30LB27
*                                                            @Y30LB27*/
@RC00220 DS    0H                                                  0232
@RC00218 DS    0H                                                  0232
@RC00216 DS    0H                                                  0232
@RC00214 L     @14,SUSPPTR                                         0232
         CLC   SUSPOP(1,@14),SUSCODE                               0232
         BE    @RF00232                                            0232
*         DO;                       /*                       @Y30LB27*/
*/*********************************************************************
* * MODIFY RPL AND PUT THE UPDATED CPU ASSOC RECORD          @Y30LB27
* ********************************************************************/
*                                                                  0234
*           IF RPLVRETC=ZERO THEN   /* OPERATION OKAY        @Y30LB27*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0234
         N     @14,@CF01715                                        0234
         LTR   @14,@14                                             0234
         BNZ   @RF00234                                            0234
*             DO;                   /*                       @Y30LB27*/
*               RPLVTYP=RPLVREAD;   /* INDICATE READ         @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'00'                              0236
*               RPLVUPD=ON;         /* FOR UPDATE            @Y30LB27*/
         OI    RPLVUPD(RPLVPTR),B'00000010'                        0237
*               RPLVBUF=BASEVPTR;   /* SET BUFFER ADDRESS    @Y30LB27*/
         L     @14,BASEVPTR                                        0238
         ST    @14,RPLVBUF(,RPLVPTR)                               0238
*               RPLVKEY=BASEVPTR;   /* SET KEY ADDRESS       @Y30LB27*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0239
*               RPLVRLN=LENGTH(CPUID);/* SET BUFFER LENGTH   @Y30LB27*/
         LA    @09,151                                             0240
         ST    @09,RPLVRLN(,RPLVPTR)                               0240
*               RPLVBLN=LENGTH(CPUID);/* SET BUFFER LENGTH   @Y30LB27*/
         ST    @09,RPLVBLN(,RPLVPTR)                               0241
*               BASEVPTR->CPUNAME=CCPUIDK;/* SET KEY TO BE READ    0242
*                                                            @Y30LB27*/
         MVC   CPUNAME(13,@14),CCPUIDK                             0242
*               REG1=RPLVPTR;       /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0243
*               CALL ICBVIO00;      /* CALL I/O PROC         @Y30LB27*/
         L     @15,@CV01474                                        0244
         BALR  @14,@15                                             0244
*               RPLVTYP=RPLVPUT;    /* INDICATE PUT          @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'01'                              0245
*               RPLVBUF=CPUIDPTR;   /* SET BUFFER ADDRESS    @Y30LB27*/
         L     @14,CPUIDPTR                                        0246
         ST    @14,RPLVBUF(,RPLVPTR)                               0246
*               RPLVKEY=CPUIDPTR;   /* SET KEY ADDRESS       @Y30LB27*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0247
*               REG1=RPLVPTR;       /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0248
*               CALL ICBVIO00;      /* CALL I/O PROC         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0249
         BALR  @14,@15                                             0249
*/*********************************************************************
* * I/O ERROR ISSUE ERROR MSG - FALL THRU TO ENDREQ AND DEQ DATA SET
* ********************************************************************/
*                                                                  0250
*               IF RPLVRETC^=ZERO THEN/* I/O OKAY            @Y30LB27*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0250
         N     @14,@CF01715                                        0250
         LTR   @14,@14                                             0250
         BZ    @RF00250                                            0250
*                 DO;               /* I/O ERROR             @Y30LB27*/
*                   VSPMSGID=MSGVSME;/* INDICATE VSAM ERROR  @Y30LB27*/
         MVC   VSPMSGID(2),@CH00061                                0252
*                   MSGLEN1=TWELVE; /* SET LEN OF MSG COMP   @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0253
*                   MSGTEXT1=RPLVKEY;/* SET LOC OF MSG COMP  @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0254
*                   CNVRTWK1(ONE:TWO)=RPLRCODE;/* CONVERT REASON CODE
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0255
*                   CALL VSPCNVRT;  /* CALL CONVERSION RTN   @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0256
*                   CALL VSPWTO;    /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0257
*                 END;              /*                       @Y30LB27*/
*             END;                  /*                       @ZM30746*/
@RF00250 DS    0H                                                  0260
*/*********************************************************************
* * ENDREQ AND DEQ THE DATA SET                              #Y30LB27
* ********************************************************************/
*                                                                  0260
*           SAVRCODE=RPLRCODE;      /*                       @ZM30746*/
@RF00234 LH    SAVRCODE,RPLRCODE(,RPLVPTR)                         0260
         N     SAVRCODE,@CF01715                                   0260
*           SAVRETC=RPLVRETC;       /*                       @ZM30746*/
         LH    SAVRETC,RPLVRETC(,RPLVPTR)                          0261
         N     SAVRETC,@CF01715                                    0261
*           RPLVTYP=RPLVENDR;       /* INDICATE ENDREQ       @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'04'                              0262
*           REG1=RPLVPTR;           /* SET REG1 TO MSVC RPLV #Y30LB27*/
         LR    REG1,RPLVPTR                                        0263
*           CALL ICBVIO00;          /* CALL I/O PROCESSOR    #Y30LB27*/
         L     @15,@CV01474                                        0264
         BALR  @14,@15                                             0264
*           RPLVSAM=''B;            /*                       @ZM30746*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0265
*           RPLRCODE=SAVRCODE;      /*                       @ZM30746*/
         STH   SAVRCODE,RPLRCODE(,RPLVPTR)                         0266
*           RPLVRETC=SAVRETC;       /*                       @ZM30746
*                                                            #Y30LB27*/
         STH   SAVRETC,RPLVRETC(,RPLVPTR)                          0267
*           IF RPLVVIN=OFF THEN     /* VIN CALL              #Y30LB27*/
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0268
         BNZ   @RF00268                                            0268
*             DO;                   /* NO                    #Y30LB27*/
*               SAVRCODE=RPLRCODE;  /*                       @ZM30746*/
         LH    @14,RPLRCODE(,RPLVPTR)                              0270
         N     @14,@CF01715                                        0270
         LR    SAVRCODE,@14                                        0270
*               SAVRETC=RPLVRETC;   /*                       @ZM30746*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0271
         N     @14,@CF01715                                        0271
         LR    SAVRETC,@14                                         0271
*               REG0=DEQINVEN;      /* DEQ THE INVENTORY     @Y30LB27*/
         SLR   REG0,REG0                                           0272
*               REG1=RPLVPTR;       /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0273
*               CALL ICBVRR00;      /* CALL VRR PROCESSOR    @Y30LB27*/
         L     @15,@CV01473                                        0274
         BALR  @14,@15                                             0274
*               RPLRCODE=SAVRCODE;  /*                       @ZM30746*/
         STH   SAVRCODE,RPLRCODE(,RPLVPTR)                         0275
*               RPLVRETC=SAVRETC;   /*                       @ZM30746*/
         STH   SAVRETC,RPLVRETC(,RPLVPTR)                          0276
*             END;                  /*                       @Y30LB27*/
*         END;                      /*                       @Y30LB27*/
@RF00268 DS    0H                                                  0279
*     END;                          /*                       @ZM30746
*                                                            @Y30LB27*/
@RF00232 DS    0H                                                  0280
*/*********************************************************************
* * NON-ZERO RETURN CODE FROM ANY ONE OR MORE THAN 10 VSAM I/O ERRORS
* *  DISABLE MSVC                                            @Y30LB27
* ********************************************************************/
*                                                                  0280
*   IF(RPLVRETC^=ZERO×VOLERCNT=ZERO)&VVIFLG0=OFF THEN              0280
@RF00212 LH    @14,RPLVRETC(,RPLVPTR)                              0280
         N     @14,@CF01715                                        0280
         LTR   @14,@14                                             0280
         BNZ   @GL00009                                            0280
         LTR   VOLERCNT,VOLERCNT                                   0280
         BNZ   @RF00280                                            0280
@GL00009 TM    VVIFLG0(VVIPTR),B'10000000'                         0280
         BNZ   @RF00280                                            0280
*     CALL VSPDISAB;                /* DISABLE MSVC          @Y30LB27*/
         BAL   @14,VSPDISAB                                        0281
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00001                                            0282
*                                                                  0283
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPPURGE - PURGE REQUEST                       @Y30LB27
**                                                           @Y30LB27
**     INPUT = REG 1 POINTING TO THE MSVC RPL.                     0283
**     THE RPL CONTAINS THE PURGE ORDER AND THE HOSTID OF THE CPU  0283
**     TO BE PURGED.                                         @Y30LB27
**                                                           @Y30LB27
**     PROCESS = ALL VOLUMES MOUNTED FOR THE CPU SPECIFIED BY THE  0283
**     HOSTID ARE TO BE MARKED DEMOUNTED IF THE MP ATTRIBUTE IS    0283
**     NOT SPECIFIED. IF THE CPU IS ASSOCIATED  AT THE TIME THE PURGE
**     ORDER IS ISSUED AND THE MP ATTRIBUTE IS SPECIFIED, THE VOLUMES
**     ARE INDICATED AS DEMOUNTED FOR ALL THE                      0283
**     ASSOCIATED HOSTS. IF THE PURGE IS ISSUED FOR THE OTHER      0283
**     PROCESSOR OF THE MP PAIR BY THE VARY CPU COMMAND PROCESSOR, 0283
**     ONLY THE VOLUMES FOR THE OTHER PROCESSOR ARE                0283
**     DEMOUNTED. IN ADDITION, IF THE VOLUME IS NO LONGER          0283
**     MOUNTED TO ANY CPU, SPACE IS INDICATED AS BEING DOWN-LEVEL  0283
**     AND MUST BE UPDATED DURING THE NEXT MOUNT/DEMOUNT           0283
**     SEQUENCE                                                @ZA09541
**                                                                 0283
**     OUTPUT=MSVGRP AND VOLUME RECORDS IN THE INVENTORY ARE UPDATED TO
**     REFLECT CURRENT MOUNT STATUS. SPACE IS MARKED AS BEING DOWN-LEVE
**     FOR THE VOLUME INVOLVED IF IT IS NO LONGER MOUNTED TO ANY CPU.
**                                                           @ZA09543
******************************************************************** */
*                                                                  0283
*VSPPURGE:                                                         0283
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPPURGE ST    @14,@SA00002                                        0283
*/*********************************************************************
* * PURGE ORDER PROCESSOR                                    @Y30LB27
* ********************************************************************/
*/*********************************************************************
* * OBTAIN THE CPUID                                           @Y30LB27
* ********************************************************************/
*                                                                  0284
*   IDAREA=ICBCPUID;                /* GET CURRENT HOST CPUID      0284
*                                                            @G24LB05*/
         L     @14,CVTPTR                                          0284
         L     @14,CVTEXT2(,@14)                                   0284
         L     @14,CVTICB(,@14)                                    0284
         MVC   IDAREA(5),ICBCPUID(@14)                             0284
*   IF PURGHOST=BINZERO THEN        /* NO HOSTID SPECIFIED   @Y30LB27*/
         L     @14,PAIRPTR                                         0285
         CLC   PURGHOST(5,@14),BINZERO                             0285
         BNE   @RF00285                                            0285
*     PURGHOST=IDAREA;              /* LOCATE CORRECT SLOT   @G24LB05*/
         MVC   PURGHOST(5,@14),IDAREA                              0286
*/*********************************************************************
* * OBTAIN CPUID FROM MSSC PARMLIST AND LOCATE MOUNT MASK    @Y30LB27
* ********************************************************************/
*                                                                  0287
*   SAVEI=ZERO;                     /* CLEAR SAVE AREA       @Y30LB27*/
@RF00285 SLR   SAVEI,SAVEI                                         0287
*   DO I=ONE TO SIXTEEN;            /* SEARCH FOR CPUID      @Y30LB27*/
         LA    I,1                                                 0288
@DL00288 DS    0H                                                  0289
*     IF CPUIDREC(I)=PURGHOST THEN  /* CPUID FOUND           @Y30LB27*/
         L     @14,CPUIDPTR                                        0289
         LR    @09,I                                               0289
         SLA   @09,3                                               0289
         ST    @09,@TF00001                                        0289
         ALR   @09,@14                                             0289
         L     @04,PAIRPTR                                         0289
         CLC   CPUIDREC-8(5,@09),PURGHOST(@04)                     0289
         BNE   @RF00289                                            0289
*       DO;                         /*                       @Y30LB27*/
*         SAVEI=I;                  /* SAVE INDEX            @Y30LB27*/
         LR    SAVEI,I                                             0291
*         DMNTMASK=CPUMASK(I);      /* SET CPUID IN PURGE MASK     0292
*                                                            @Y30LB27*/
         AL    @14,@TF00001                                        0292
         MVC   DMNTMASK(2),CPUMASK-8(@14)                          0292
*         I=SIXTEEN;                /* END SEARCH            @Y30LB27*/
         LA    I,16                                                0293
*       END;                        /*                       @Y30LB27*/
*   END;                            /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00289 AL    I,@CF00043                                          0295
         C     I,@CF00111                                          0295
         BNH   @DL00288                                            0295
*/*********************************************************************
* * IF NOT FOUND ISSUE ERROR MESSAGE                         @Y30LB27
* ********************************************************************/
*                                                                  0296
*   IF SAVEI=ZERO THEN              /* ANY HIT               @Y30LB27*/
         LTR   SAVEI,SAVEI                                         0296
         BNZ   @RF00296                                            0296
*     DO;                           /*                       @Y30LB27*/
*       VSPMSGID=MSGCPUFE;          /* INDICATE NOT FOUND    @Y30LB27*/
         MVC   VSPMSGID(2),@CH00086                                0298
*       CNVRTWK3(1:5)=PURGHOST;     /*                       @ZM30746*/
         L     @14,PAIRPTR                                         0299
         MVC   CNVRTWK3(5),PURGHOST(@14)                           0299
*       CALL VSPCNVID;              /*                       @ZM30746*/
         BAL   @14,VSPCNVID                                        0300
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0301
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
@EL00002 DS    0H                                                  0302
@EF00002 DS    0H                                                  0302
@ER00002 L     @14,@SA00002                                        0302
         BR    @14                                                 0302
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * IF MP PURGE AND THE CPUS ARE ASSOCIATED, DEMOUNT VOLUMES FOR BOTH
* * CPUS.  IF MP PURGE AND THE CPUS ARE DISASSOCIATED, DEMOUNT ONLY THE
* * VOLUMES FOR THE OTHER PROCESSOR OF THE PAIR.              @ZA09541
* * THIS CODE IS DEPENDENT UPON THE RESTRICTION OF 2 CPU'S MAXIMUM 0304
* * IN AN MP CONFIGURATION                                    @ZA09541
******************************************************************** */
*                                                                  0304
*   IF PURGMPP=ON THEN              /* MP PURGE              @ZA09541*/
@RF00296 L     @14,PAIRPTR                                         0304
         TM    PURGMPP(@14),B'10000000'                            0304
         BNO   @RF00304                                            0304
*     DO;                           /* YES                   @ZA09541*/
*       NUMCPUS=ZERO;               /* ZERO CPU COUNTER      @ZA09541*/
         SLR   NUMCPUS,NUMCPUS                                     0306
*       REG1=MASK0080;              /* SET REG1 TO TM MASK   @ZA09541*/
         L     REG1,MASK0080                                       0307
*       DO I=ONE TO EIGHT;          /* TEST EACH BIT         @ZA09541*/
         LA    I,1                                                 0308
@DL00308 DS    0H                                                  0309
*         GEN(EX REG1,VSPTM1);      /* TEST DMNTMASK-BYTE 1  @ZA09541*/
         EX REG1,VSPTM1
*         BC(BZ,CHKVSP2);           /* BIT OFF - NO CPU      @ZA09541*/
         BC    8,CHKVSP2                                           0310
*         NUMCPUS=NUMCPUS+ONE;      /* BIT ON - ONE CPU      @ZA09541*/
         AL    NUMCPUS,@CF00043                                    0311
*CHKVSP2:                                                          0312
*         GEN(EX REG1,VSPTM2);      /* TEST DMNTMASK-BYTE2   @ZA09541*/
CHKVSP2  EX REG1,VSPTM2
*         BC(BZ,ENDCHK);            /* BIT OFF - NO CPU      @ZA09541*/
         BC    8,ENDCHK                                            0313
*         NUMCPUS=NUMCPUS+ONE;      /* BIT ON - ONE CPU      @ZA09541*/
         AL    NUMCPUS,@CF00043                                    0314
*ENDCHK:                                                           0315
*         SRL(REG1,ONE);            /* TEST NEXT BIT         @ZA09541*/
ENDCHK   SRL   REG1,1                                              0315
*       END;                        /* ALL BITS TESTED       @ZA09541*/
         AL    I,@CF00043                                          0316
         C     I,@CF00039                                          0316
         BNH   @DL00308                                            0316
*       IF NUMCPUS<=ONE THEN        /* CPUS DISASSOCIATED    @ZA09541*/
         C     NUMCPUS,@CF00043                                    0317
         BH    @RF00317                                            0317
*         DO;                       /* YES                   @ZA09541*/
*           PCCAPTR=PCCAT00P(1);    /* FIND OTHER CPUID      @ZA09541*/
         L     @14,CVTPTR                                          0319
         L     @14,CVTPCCAT(,@14)                                  0319
         L     PCCAPTR,PCCAT00P(,@14)                              0319
*           IF PCCAPTR^=ZERO THEN   /* TEST SLOT FOR ZERO    @ZA09541*/
         LTR   PCCAPTR,PCCAPTR                                     0320
         BZ    @RF00320                                            0320
*             DO;                   /* NOT ZERO SO USE IT    @ZA09541*/
*               CNVRTWK4(ONE:TEN)=PCCACPID(THREE:TWELVE);/*  @ZA09541*/
         MVC   CNVRTWK4(10),PCCACPID+2(PCCAPTR)                    0322
*               CNVRTWK4(ELEVEN)='0F'X;/*                    @ZA09541*/
         MVI   CNVRTWK4+10,X'0F'                                   0323
*               PACK(CNVRTWK3,CNVRTWK4);/*                   @ZA09541*/
         PACK  CNVRTWK3(6),CNVRTWK4(11)                            0324
*               IDAREA=CNVRTWK3(ONE:FIVE);/*                 @G24LB05*/
         MVC   IDAREA(5),CNVRTWK3                                  0325
*             END;                  /*                       @ZA09541*/
*           IF PURGHOST=IDAREA THEN /*                       @G24LB05*/
@RF00320 L     @14,PAIRPTR                                         0327
         CLC   PURGHOST(5,@14),IDAREA                              0327
         BNE   @RF00327                                            0327
*             DO;                   /* LOOK IN NEXT SLOT     @ZA09541*/
*               PCCAPTR=PCCAT00P(2);/*                       @ZA09541*/
         L     @14,CVTPTR                                          0329
         L     @14,CVTPCCAT(,@14)                                  0329
         L     PCCAPTR,PCCAT00P+4(,@14)                            0329
*               IF PCCAPTR=ZERO THEN/* IF NO OTHER CPU       @ZA09541*/
         LTR   PCCAPTR,PCCAPTR                                     0330
         BZ    @RT00330                                            0330
*                 RETURN;           /* RETURN TO CALLER      @ZA09541*/
*               CNVRTWK4(ONE:TEN)=PCCACPID(THREE:TWELVE);/*  @ZA09541*/
         MVC   CNVRTWK4(10),PCCACPID+2(PCCAPTR)                    0332
*               CNVRTWK4(ELEVEN)='0F'X;/*                    @ZA09541*/
         MVI   CNVRTWK4+10,X'0F'                                   0333
*               PACK(CNVRTWK3,CNVRTWK4);/*                   @ZA09541*/
         PACK  CNVRTWK3(6),CNVRTWK4(11)                            0334
*               IDAREA=CNVRTWK3(ONE:FIVE);/*                 @G24LB05*/
         MVC   IDAREA(5),CNVRTWK3                                  0335
*             END;                  /* TWO SLOTS MAX FOR NOW @ZA09541*/
*           SAVEJ=ZERO;             /* CLEAR SAVE AREA       @ZA09541*/
@RF00327 SLR   SAVEJ,SAVEJ                                         0337
*           DO J=ONE TO SIXTEEN;    /* SEARCH FOR CPUID      @ZA09541*/
         LA    J,1                                                 0338
@DL00338 DS    0H                                                  0339
*             IF CPUIDREC(J)=IDAREA THEN/*                   @G24LB05*/
         L     @14,CPUIDPTR                                        0339
         LR    @07,J                                               0339
         SLA   @07,3                                               0339
         ST    @07,@TF00001                                        0339
         ALR   @07,@14                                             0339
         CLC   CPUIDREC-8(5,@07),IDAREA                            0339
         BNE   @RF00339                                            0339
*               DO;                 /* FOUND CPUID           @ZA09541*/
*                 SAVEJ=J;          /* SAVE INDEX            @ZA09541*/
         LR    SAVEJ,J                                             0341
*                 DMNTMASK=CPUMASK(J);/* SAVE MOUNT MASK     @ZA09541*/
         AL    @14,@TF00001                                        0342
         MVC   DMNTMASK(2),CPUMASK-8(@14)                          0342
*                 J=SIXTEEN;        /* END SEARCH            @ZA09541*/
         LA    J,16                                                0343
*               END;                /*                       @ZA09541*/
*           END;                    /*                       @ZA09541*/
@RF00339 AL    J,@CF00043                                          0345
         C     J,@CF00111                                          0345
         BNH   @DL00338                                            0345
*           IF SAVEJ=ZERO THEN      /* CPUID NOT FOUND       @ZA09541*/
         LTR   SAVEJ,SAVEJ                                         0346
         BNZ   @RF00346                                            0346
*             DO;                   /*                       @ZA09541*/
*               VSPMSGID=MSGCPUFE;  /* INDICATE NOT FOUND    @ZA09541*/
         MVC   VSPMSGID(2),@CH00086                                0348
*               CNVRTWK3(1:5)=IDAREA;/*                      @G24LB05*/
         MVC   CNVRTWK3(5),IDAREA                                  0349
*               CALL VSPCNVID;      /*                       @ZA09541*/
         BAL   @14,VSPCNVID                                        0350
*               CALL VSPWTO;        /* ISSUE MESSAGE         @ZA09541*/
         BAL   @14,VSPWTO                                          0351
*               RETURN;             /* RETURN TO CALLER      @ZA09541*/
         B     @EL00002                                            0352
*             END;                  /*                       @ZA09541*/
*         END;                      /*                       @ZA09541*/
*     END;                          /*                       @ZA09541*/
*/*********************************************************************
* * IF NORMAL PURGE, PURGE VOLUMES FOR THIS CPU ONLY         @ZA09541
* ********************************************************************/
*                                                                  0356
*   ELSE                                                           0356
*     DMNTMASK=VSPMASK(SAVEI);      /* IF NOT MP PURGE, THEN PURGE 0356
*                                      ONLY THIS CPU         @ZA09541*/
         B     @RC00304                                            0356
@RF00304 LR    @14,SAVEI                                           0356
         ALR   @14,@14                                             0356
         LA    @09,VSPMASK-2(@14)                                  0356
         MVC   DMNTMASK(2),0(@09)                                  0356
*/*********************************************************************
* * IF ANY OTHER CPU NEED A PURGE PICK UP THOSE CPUS ALSO (VIA DISABLE)
* * CREATE THE DEMOUNT MASK  - SET NULL MOUNT MASK           @Y30LB27
* ********************************************************************/
*                                                                  0357
*   DMNTMASK=DMNTMASK×CPUPURGE;     /* PICK UP OTHER CPUS TO BE    0357
*                                      PURGED                        */
@RC00304 L     @14,CPUIDPTR                                        0357
         OC    DMNTMASK(2),CPUPURGE(@14)                           0357
*   DMNTMASK=DMNTMASK&&MASKFFFF;    /* SET DEMOUNT MASK      @Y30LB27*/
         XC    DMNTMASK(2),MASKFFFF                                0358
*   MNTMASK=MASK0000;               /* SET DUMMY MOUNT MASK  @Y30LB27*/
         MVC   MNTMASK(2),MASK0000                                 0359
*   CPUPURGE=MASK0000;              /* INDICATE ALL CPUS PURGED    0360
*                                                            @Y30LB27
*                                                            @Y30LB27*/
         MVC   CPUPURGE(2,@14),MASK0000                            0360
*/*********************************************************************
* * PROCESS THE DATA SET AND RETURN                          @Y30LB27
* ********************************************************************/
*                                                                  0361
*   CALL VSPPROC;                   /* PROCESS THE DATA SET  @Y30LB27*/
         BAL   @14,VSPPROC                                         0361
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00002                                            0362
*   END VSPPURGE;                   /*                       @Y30LB27*/
         B     @EL00002                                            0363
*                                                                  0364
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPASSOC - ASSOCIATE REQUEST                   @Y30LB27
**                                                           @Y30LB27
**     INPUT = REG 1 POINTING TO THE MSVC RPL. THE                 0364
**     RPL CONTAINS THE ASSOCIATE ORDER AND THE HOSTID TO WHICH    0364
**     THE CURRENT HOST IS TO BE COUPLED.                    @Y30LB27
**                                                           @Y30LB27
**     PROCESS = CPU ASSOCIATION RECORD  READ TO DETERMINE IF THE  0364
**     CURRENT HOST AND THE HOST TO WHICH IT IS BEING COUPLED      0364
**     ARE DEFINED TO MSVC.                                        0364
**     THE REQUIRED MOUNT, DEMOUNT, AND ASSOCIATION MASKS ARE CREATED
**     TO REFLECT THE ASSOCIATION. THE DEMOUNT MASK INCLUDES BOTH  0364
**     CPUS AND THE MOUNT MASK IS NULL IF THE ASSOCIATE ORDER SPECIFIES
**     DEMOUNT ALL VOLUMES FOR BOTH CPUS.  OTHERWISE THE DEMOUNT MASK
**     HAS ONLY THE CPU BEING ASSOCIATED TO THIS HOST AND THE MOUNT
**     MASK HAS BOTH CPUS SPECIFIED.  ALL MSVGRP AND VOLUME RECORDS ARE
**     READ, AND THE MOUNT FIELDS UPDATED TO REFLECT THE           0364
**     MOUNT STATUS OF THE VOLUMES. THE CPU ASSOCIATION RECORD IS  0364
**     ALSO UPDATED AND RE-WRITTEN TO REFLECT THE AFFINITY. THE    0364
**     ICBVVICB CONTROL BLOCK IS ALSO UPDATED TO REFLECT THE AFFINITY
**                                                           @ZA09541
**     OUTPUT = CPU ASSOCIATION RECORD AND THE ICBVVICB CONTROL BLOCK
**     UPDATED TO REFLECT THE ASSOCIATION OF THE CPUS. THE MSVGRP AND
**     VOLUME RECORDS ARE UPDATED TO REFLECT THE REQUIRED MOUNT STATUS.
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0364
*VSPASSOC:                                                         0364
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPASSOC ST    @14,@SA00003                                        0364
*/*********************************************************************
* * ASSOCIATE ORDER PROCESSING                               @Y30LB27
* ********************************************************************/
*/*********************************************************************
* * LOCATE MOUNT MASK OF CPU TO BE ASSOCIATED                #Y30LB27
* ********************************************************************/
*                                                                  0365
*   SAVEI=ZERO;                     /* CLEAR SAVE AREA       #Y30LB27*/
         SLR   SAVEI,SAVEI                                         0365
*   DO I=ONE TO SIXTEEN;            /* SEARCH FOR CPUID      @Y30LB27*/
         LA    I,1                                                 0366
@DL00366 DS    0H                                                  0367
*     IF CPUIDREC(I)=ASDACPU THEN   /* CPUID FOUND           @Y30LB27*/
         L     @14,CPUIDPTR                                        0367
         LR    @09,I                                               0367
         SLA   @09,3                                               0367
         ST    @09,@TF00001                                        0367
         ALR   @09,@14                                             0367
         L     @04,ASDASPTR                                        0367
         CLC   CPUIDREC-8(5,@09),ASDACPU(@04)                      0367
         BNE   @RF00367                                            0367
*       DO;                         /*                       @Y30LB27*/
*         SAVEI=I;                  /* SAVE ITS POSITION     @Y30LB27*/
         LR    SAVEI,I                                             0369
*         MNTMASKI=CPUMASK(I);      /* EST ITS MOUNT MASK    @Y30LB27*/
         AL    @14,@TF00001                                        0370
         MVC   MNTMASKI(2),CPUMASK-8(@14)                          0370
*         I=SIXTEEN;                /* END SEARCH            @Y30LB27*/
         LA    I,16                                                0371
*       END;                        /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * SAVE FIRST EMPTY SLOT IF FIRST TIME FOR THIS CPU         @Y30LB27
* ********************************************************************/
*                                                                  0373
*     IF CPUIDREC(I)=BLANKS(ONE:FIVE)&SAVEI=ZERO THEN/*      @Y30LB27*/
@RF00367 LR    @14,I                                               0373
         SLA   @14,3                                               0373
         L     @09,CPUIDPTR                                        0373
         ALR   @09,@14                                             0373
         CLC   CPUIDREC-8(5,@09),BLANKS                            0373
         BNE   @RF00373                                            0373
         LTR   SAVEI,SAVEI                                         0373
         BNZ   @RF00373                                            0373
*       SAVEI=I;                    /* SAVE INDEX ADDR       @Y30LB27*/
         LR    SAVEI,I                                             0374
*   END;                            /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00373 AL    I,@CF00043                                          0375
         C     I,@CF00111                                          0375
         BNH   @DL00366                                            0375
*/*********************************************************************
* * IF NOT FOUND AND NO SLOTS ISSUE ERROR MESSAGE - DEQ DONE BY OUTER
* * PROCEDURE                                                @Y30LB27
* ********************************************************************/
*                                                                  0376
*   IF SAVEI=ZERO THEN                                             0376
         LTR   SAVEI,SAVEI                                         0376
         BNZ   @RF00376                                            0376
*     DO;                           /* ANY EMPTY SLOTS       @Y30LB27*/
*       VSPMSGID=MSGCPUEE;          /* INDICATE CPUID RECORD       0378
*                                      EXHAUSTED             @Y30LB27*/
         MVC   VSPMSGID(2),@CH00037                                0378
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0379
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
@EL00003 DS    0H                                                  0380
@EF00003 DS    0H                                                  0380
@ER00003 L     @14,@SA00003                                        0380
         BR    @14                                                 0380
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * IF FIRST TIME FOR THIS CPU AND A SLOT IS AVAILABLE -     @Y30LB27
* * CREATE HIS MOUNT MASK                                    @Y30LB27
* ********************************************************************/
*                                                                  0382
*   IF CPUMASK(SAVEI)=ZERO THEN     /* IF NOT FOUND FILL NEXT SLOT 0382
*                                                            @Y30LB27*/
@RF00376 LR    @14,SAVEI                                           0382
         SLA   @14,3                                               0382
         L     @09,CPUIDPTR                                        0382
         ALR   @09,@14                                             0382
         SLR   @14,@14                                             0382
         ICM   @14,3,CPUMASK-8(@09)                                0382
         LTR   @14,@14                                             0382
         BNZ   @RF00382                                            0382
*     MNTMASKI=VSPMASK(SAVEI);      /* INIT MASK FIELD       @Y30LB27
*                                                            @Y30LB27*/
         LR    @14,SAVEI                                           0383
         ALR   @14,@14                                             0383
         LA    @09,VSPMASK-2(@14)                                  0383
         MVC   MNTMASKI(2),0(@09)                                  0383
*/*********************************************************************
* * LOOK FOR CURRENT CPUID IN CPUID RECORD                   @Y30LB27
* * THE MOUNT MASK IS IN THE MSVC CONTROL BLOCK BUT THE SLOT POSITION
* * IS REQ'D                                                 @Y30LB27
* ********************************************************************/
*                                                                  0384
*   SAVEJ=ZERO;                     /* CLEAR INDEX SAVE AREA @Y30LB27
*                                                            @Y30LB27*/
@RF00382 SLR   SAVEJ,SAVEJ                                         0384
*/*********************************************************************
* * OBTAIN THE CPUID                                          @G24LB05
* ********************************************************************/
*                                                                  0385
*   IF CSDCPUOL=ONE THEN                                           0385
         L     @14,CVTPTR                                          0385
         L     @06,CVTCSD(,@14)                                    0385
         CLC   CSDCPUOL(2,@06),@CH00043                            0385
         BNE   @RF00385                                            0385
*     IDAREA=ICBCPUID;              /* GET CURRENT HOST CPUID      0386
*                                                            @G24LB05*/
         L     @14,CVTEXT2(,@14)                                   0386
         L     @14,CVTICB(,@14)                                    0386
         MVC   IDAREA(5),ICBCPUID(@14)                             0386
*   ELSE                                                           0387
*     DO;                           /*                       @ZM31132*/
         B     @RC00385                                            0387
@RF00385 DS    0H                                                  0388
*/*********************************************************************
* * THIS CODE IS DEPENDENT UPON THE RESTRICTION OF 2 CPU'S MAXIMUM 0388
* * IN AN MP CONFIGURATION                                    @ZA09541
******************************************************************** */
*                                                                  0388
*       PCCAPTR=PCCAT00P(1);        /*                       @ZM31132*/
         L     @14,CVTPTR                                          0388
         L     @14,CVTPCCAT(,@14)                                  0388
         L     PCCAPTR,PCCAT00P(,@14)                              0388
*       CNVRTWK4(ONE:TEN)=PCCACPID(THREE:TWELVE);/*          @ZM31132*/
         MVC   CNVRTWK4(10),PCCACPID+2(PCCAPTR)                    0389
*       CNVRTWK4(ELEVEN)='0F'X;     /*                       @ZM31132*/
         MVI   CNVRTWK4+10,X'0F'                                   0390
*       PACK(CNVRTWK3,CNVRTWK4);    /*                       @ZM31132*/
         PACK  CNVRTWK3(6),CNVRTWK4(11)                            0391
*       IDAREA=CNVRTWK3(ONE:FIVE);  /*                       @G24LB05*/
         MVC   IDAREA(5),CNVRTWK3                                  0392
*       IF ASDACPU=IDAREA THEN      /*                       @G24LB05*/
         L     @06,ASDASPTR                                        0393
         CLC   ASDACPU(5,@06),IDAREA                               0393
         BNE   @RF00393                                            0393
*         DO;                       /*                       @ZM31132*/
*           PCCAPTR=PCCAT00P(2);    /*                       @ZM31132*/
         L     PCCAPTR,PCCAT00P+4(,@14)                            0395
*           CNVRTWK4(ONE:TEN)=PCCACPID(3:12);/*              @ZM31132*/
         MVC   CNVRTWK4(10),PCCACPID+2(PCCAPTR)                    0396
*           CNVRTWK4(ELEVEN)='0F'X; /*                       @ZM31132*/
         MVI   CNVRTWK4+10,X'0F'                                   0397
*           PACK(CNVRTWK3,CNVRTWK4);/*                       @ZM31132*/
         PACK  CNVRTWK3(6),CNVRTWK4(11)                            0398
*           IDAREA=CNVRTWK3(ONE:FIVE);/*                     @G24LB05*/
         MVC   IDAREA(5),CNVRTWK3                                  0399
*         END;                      /*                       @ZM31132*/
*     END;                          /*                       @ZM31132
*                                                            #Y30LB27*/
@RF00393 DS    0H                                                  0402
*/*********************************************************************
* * SEARCH FOR THE SLOT                                      #Y30LB27
* ********************************************************************/
*                                                                  0402
*   DO J=ONE TO SIXTEEN;            /* SEARCH FOR CPUID      #Y30LB27*/
@RC00385 LA    J,1                                                 0402
@DL00402 DS    0H                                                  0403
*     IF CPUIDREC(J)=IDAREA THEN    /* LOCATE CORRECT SLOT   @G24LB05*/
         L     @14,CPUIDPTR                                        0403
         LR    @04,J                                               0403
         SLA   @04,3                                               0403
         ST    @04,@TF00001                                        0403
         ALR   @04,@14                                             0403
         CLC   CPUIDREC-8(5,@04),IDAREA                            0403
         BNE   @RF00403                                            0403
*       DO;                         /*                       @Y30LB27*/
*         SAVEJ=J;                  /* SAVE INDEX VALUE      @Y30LB27*/
         LR    SAVEJ,J                                             0405
*         MNTMASKJ=CPUMASK(J);      /* GET MOUNT MASK        @Y30LB27*/
         AL    @14,@TF00001                                        0406
         MVC   MNTMASKJ(2),CPUMASK-8(@14)                          0406
*         J=SIXTEEN;                /* END SEARCH            @Y30LB27*/
         LA    J,16                                                0407
*       END;                        /*                       @Y30LB27
*                                                            @ZM31132*/
*/*********************************************************************
* * SAVE FIRST EMPTY SLOT IF FIRST TIME FOR THIS CPU         @ZM31132
* ********************************************************************/
*                                                                  0409
*     IF CPUIDREC(J)=BLANKS(ONE:FIVE)&SAVEJ=ZERO THEN/*      @ZM31132*/
@RF00403 LR    @14,J                                               0409
         SLA   @14,3                                               0409
         L     @04,CPUIDPTR                                        0409
         ALR   @04,@14                                             0409
         CLC   CPUIDREC-8(5,@04),BLANKS                            0409
         BNE   @RF00409                                            0409
         LTR   SAVEJ,SAVEJ                                         0409
         BNZ   @RF00409                                            0409
*       SAVEJ=J;                    /* SAVE INDEX ADDR       @ZM31132*/
         LR    SAVEJ,J                                             0410
*   END;                            /*                       @Y30LB27*/
@RF00409 AL    J,@CF00043                                          0411
         C     J,@CF00111                                          0411
         BNH   @DL00402                                            0411
*/*********************************************************************
* * IF NOT FOUND AND NO SLOTS ISSUE ERROR MESSAGE - DEQ DONE BY OUTER
* * PROCEDURE                                                @ZA09541
* ********************************************************************/
*                                                                  0412
*   IF SAVEJ=ZERO THEN                                             0412
         LTR   SAVEJ,SAVEJ                                         0412
         BNZ   @RF00412                                            0412
*     DO;                           /* ANY EMPTY SLOTS       @ZA09541*/
*       VSPMSGID=MSGCPUEE;          /* INDICATE CPUID RECORD       0414
*                                      EXHAUSTED             @ZA09541*/
         MVC   VSPMSGID(2),@CH00037                                0414
*       CALL VSPWTO;                /* ISSUE MESSAGE         @ZA09541*/
         BAL   @14,VSPWTO                                          0415
*       RETURN;                     /* RETURN TO CALLER      @ZA09541*/
         B     @EL00003                                            0416
*     END;                          /*                       @ZA09541
*                                                            @ZA09541
*                                                            @ZM31132*/
*/*********************************************************************
* * IF FIRST TIME FOR THIS CPU AND A SLOT IS AVAILABLE -     @ZM31132
* * CREATE HIS MOUNT MASK                                    @ZM31132
* ********************************************************************/
*                                                                  0418
*   IF CPUMASK(SAVEJ)=ZERO THEN     /* IF NOT FOUND FILL NEXT SLOT 0418
*                                                            @ZM31132*/
@RF00412 LR    @14,SAVEJ                                           0418
         SLA   @14,3                                               0418
         L     @06,CPUIDPTR                                        0418
         ALR   @06,@14                                             0418
         SLR   @14,@14                                             0418
         ICM   @14,3,CPUMASK-8(@06)                                0418
         LTR   @14,@14                                             0418
         BNZ   @RF00418                                            0418
*     MNTMASKJ=VSPMASK(SAVEJ);      /* INIT MASK FIELD       @ZM31132
*                                                            #Y30LB27
*                                                            #Y30LB27*/
         LR    @14,SAVEJ                                           0419
         ALR   @14,@14                                             0419
         LA    @06,VSPMASK-2(@14)                                  0419
         MVC   MNTMASKJ(2),0(@06)                                  0419
*/*********************************************************************
* * SLOT FOUND - CREATE NEW ASSOCIATED MOUNT MASKS - FILL SLOTS    0420
* ********************************************************************/
*                                                                  0420
*   MNTMASK=MNTMASKI×MNTMASKJ;      /* CREATE THE ASSOCIATION MASK 0420
*                                                            @Y30LB27*/
@RF00418 MVC   MNTMASK(2),MNTMASKI                                 0420
         OC    MNTMASK(2),MNTMASKJ                                 0420
*   CPUIDREC(SAVEI)=ASDACPU;        /* SAVE ASSOCIATED CPUID @Y30LB27*/
         L     @14,CPUIDPTR                                        0421
         LR    @06,SAVEI                                           0421
         SLA   @06,3                                               0421
         ST    @06,@TF00001                                        0421
         ALR   @06,@14                                             0421
         L     @04,ASDASPTR                                        0421
         MVC   CPUIDREC-8(5,@06),ASDACPU(@04)                      0421
*   CPUIDREC(SAVEJ)=IDAREA;         /* SAVE CPUID            @G24LB05*/
         LR    @06,SAVEJ                                           0422
         SLA   @06,3                                               0422
         ST    @06,@TF00002                                        0422
         ALR   @06,@14                                             0422
         MVC   CPUIDREC-8(5,@06),IDAREA                            0422
*   CPUMASK(SAVEI)=MNTMASK;         /* SAVE ASSOCIATED CPUID MOUNT 0423
*                                      MASK                  @Y30LB27*/
         LR    @06,@14                                             0423
         AL    @06,@TF00001                                        0423
         MVC   CPUMASK-8(2,@06),MNTMASK                            0423
*   CPUMASK(SAVEJ)=MNTMASK;         /* SAVE CPUID MOUNT MASK @Y30LB27
*                                                            @Y30LB27*/
         LR    @07,@14                                             0424
         AL    @07,@TF00002                                        0424
         MVC   CPUMASK-8(2,@07),MNTMASK                            0424
*/*********************************************************************
* * RESET MOUNT MASK IN CONTROL BLOCK                        @Y30LB27
* ********************************************************************/
*                                                                  0425
*   VVICPUID=MNTMASK;               /* SET NEW MOUNT MASK IN VVICB 0425
*                                      CONTROL BLOCK         @Y30LB27
*                                                            @Y30LB27*/
         MVC   VVICPUID(2,VVIPTR),MNTMASK                          0425
*/*********************************************************************
* * PURGE WITH THE ASSOCIATE ORDER                           @Y30LB27
* ********************************************************************/
*                                                                  0426
*   IF ASDMNT=ON THEN               /* PURGE WITH ASSOC      @Y30LB27*/
         TM    ASDMNT(@04),B'00000010'                             0426
         BNO   @RF00426                                            0426
*     DO;                           /*                       @Y30LB27*/
*       MNTMASK=MNTMASK×CPUPURGE;   /* PICK UP ANY OTHER CPUS TO BE
*                                      PURGED                @Y30LB27*/
         OC    MNTMASK(2),CPUPURGE(@14)                            0428
*       CPUPURGE=MASK0000;          /* INDICATE ALL CPUS PURGED      */
         MVC   CPUPURGE(2,@14),MASK0000                            0429
*       DMNTMASK=MASKFFFF&&MNTMASK; /* CREATE DEMOUNT MASK FOR BOTH
*                                      CPUS                  @Y30LB27*/
         MVC   DMNTMASK(2),MASKFFFF                                0430
         XC    DMNTMASK(2),MNTMASK                                 0430
*       MNTMASK=MASK0000;           /* INDICATE NO MOUNTS    @ZA09541*/
         MVC   MNTMASK(2),MASK0000                                 0431
*     END;                          /*                       @Y30LB27*/
*   ELSE                                                           0433
*     DO;                           /* PURGE NOT SPECIFIED   @ZA09541*/
         B     @RC00426                                            0433
@RF00426 DS    0H                                                  0434
*/*********************************************************************
* * NO PURGE ONLY THE ASSOCIATED CPU                         @ZM31132
* ********************************************************************/
*                                                                  0434
*       MNTMASKJ=MNTMASKJ×CPUPURGE; /* PICK UP ANY OTHER CPUS TO BE
*                                      PURGED                @ZA09541*/
         L     @14,CPUIDPTR                                        0434
         OC    MNTMASKJ(2),CPUPURGE(@14)                           0434
*       CPUPURGE=MASK0000;          /* INDICATE ALL CPUS PURGED    0435
*                                                            @ZA09541*/
         MVC   CPUPURGE(2,@14),MASK0000                            0435
*       DMNTMASK=MASKFFFF&&MNTMASKJ;/* CREATE DEMOUNT MASK FOR ASSOC
*                                      CPU                   @Y30LB27*/
         MVC   DMNTMASK(2),MASKFFFF                                0436
         XC    DMNTMASK(2),MNTMASKJ                                0436
*     END;                          /*                       @ZA09540
*                                                            @Y30LB27*/
*/*********************************************************************
* * PROCESS THE DATA SET                                     @Y30LB27
* ********************************************************************/
*                                                                  0438
*   CALL VSPPROC;                   /* PROCESS THE INVENTORY @Y30LB27*/
@RC00426 BAL   @14,VSPPROC                                         0438
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00003                                            0439
*   END VSPASSOC;                   /*                       @Y30LB27*/
*                                                                  0441
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPDISAC, DISASSOCIATE REQUEST                 @Y30LB27
**                                                           @Y30LB27
**     INPUT = REG1 POINTING TO THE MSVC RPL. THE                  0441
**     RPL CONTAINS THE DISASSOCIATE ORDER AND THE HOSTID OF THE   0441
**     CPU TO BE UNCOUPLED.                                  @Y30LB27
**                                                           @Y30LB27
**     PROCESS = CPU ASSOCIATION RECORD IS CHECKED, THE CORRESPONDING
**     MOUNT MASKS ARE UPDATED FOR THE CURRENT HOST AND THE CPU BEING
**     DISASSOCIATED. IN ADDITION, THE ICBVVICB CONTROL BLOCK IS UPDATE
**     TO REFLECT THE DISASSOCIATION.                        @Y30LB27
**                                                           @Y30LB27
**     OUTPUT = CPU ASSOCIATION RECORD AND ICBVVICB CONTROL BLOCK MOUNT
**     MASKS REFLECT THE DISASSOCIATION OF THE CPUS.         @Y30LB27
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0441
*VSPDISAC:                                                         0441
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPDISAC ST    @14,@SA00004                                        0441
*/*********************************************************************
* * DISASSOCIATE ORDER PROCESSING                            @Y30LB27
* ********************************************************************/
*/*********************************************************************
* * OBTAIN THE CPUID                                          @G24LB05
* ********************************************************************/
*                                                                  0442
*   IDAREA=ICBCPUID;                /* GET CURRENT HOST CPUID      0442
*                                                            @G24LB05*/
         L     @14,CVTPTR                                          0442
         L     @14,CVTEXT2(,@14)                                   0442
         L     @14,CVTICB(,@14)                                    0442
         MVC   IDAREA(5),ICBCPUID(@14)                             0442
*   SAVEID=IDAREA;                  /* SAVE CURRENT CPUID    @G24LB05*/
         MVC   SAVEID(5),IDAREA                                    0443
*/*********************************************************************
* * LOCATE SLOT FOR CPU BEING DISASSOCIATED                  #Y30LB27
* ********************************************************************/
*                                                                  0444
*   SAVEI=ZERO;                     /* CLEAR INDEX SAVE AREA #Y30LB27*/
         SLR   SAVEI,SAVEI                                         0444
*   DO I=ONE TO SIXTEEN;            /* SEARCH FOR CPUID      #Y30LB27*/
         LA    I,1                                                 0445
@DL00445 DS    0H                                                  0446
*     IF CPUIDREC(I)=ASDACPU THEN                                  0446
         LR    @14,I                                               0446
         SLA   @14,3                                               0446
         L     @09,CPUIDPTR                                        0446
         ALR   @09,@14                                             0446
         L     @14,ASDASPTR                                        0446
         CLC   CPUIDREC-8(5,@09),ASDACPU(@14)                      0446
         BNE   @RF00446                                            0446
*       DO;                         /* CPUID FOUND           @Y30LB27*/
*         SAVEI=I;                  /* SAVE THE INDEX        @Y30LB27*/
         LR    SAVEI,I                                             0448
*         I=SIXTEEN;                /* END SEARCH            @Y30LB27*/
         LA    I,16                                                0449
*       END;                        /*                       @Y30LB27*/
*   END;                            /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00446 AL    I,@CF00043                                          0451
         C     I,@CF00111                                          0451
         BNH   @DL00445                                            0451
*/*********************************************************************
* * IF NOT FOUND - INVENTORY IN ERROR - ISSUE ERROR MSG - DEQ DONE BY
* * OUTER PROCEDURE                                          @Y30LB27
* ********************************************************************/
*                                                                  0452
*   IF SAVEI=ZERO THEN              /* DISASSOC HOST FOUND   @Y30LB27*/
         LTR   SAVEI,SAVEI                                         0452
         BNZ   @RF00452                                            0452
*     DO;                           /* NOT FOUND             @Y30LB27*/
*       VSPMSGID=MSGCPUFE;          /* INDICATE ERROR        @Y30LB27*/
         MVC   VSPMSGID(2),@CH00086                                0454
*       CNVRTWK3(1:5)=ASDACPU;      /* ADD CPUID TO MSG      @ZM30746*/
         L     @14,ASDASPTR                                        0455
         MVC   CNVRTWK3(5),ASDACPU(@14)                            0455
*       CALL VSPCNVID;              /*                       @ZM30746*/
         BAL   @14,VSPCNVID                                        0456
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0457
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
@EL00004 DS    0H                                                  0458
@EF00004 DS    0H                                                  0458
@ER00004 L     @14,@SA00004                                        0458
         BR    @14                                                 0458
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * UPDATE THE HOSTID'S MOUNT MASK                          @ZA09542
******************************************************************** */
*                                                                  0460
*   DISACMSK=VSPMASK(SAVEI)&&MASKFFFF;/* GET COMPLEMENT OF HOSTID'S
*                                      DISAC MOUNT MASK      @ZA09542*/
@RF00452 LR    @14,SAVEI                                           0460
         ALR   @14,@14                                             0460
         LA    @09,VSPMASK-2(@14)                                  0460
         MVC   DISACMSK(2),0(@09)                                  0460
         XC    DISACMSK(2),MASKFFFF                                0460
*   SAVMASK=DISACMSK;               /* SAVE COMPLEMENT OF HOSTID'S 0461
*                                      DISASSOCIATED MOUNT MASK    0461
*                                                            @ZA09542*/
         MVC   SAVMASK(2),DISACMSK                                 0461
*   DISACMSK=CPUMASK(SAVEI)&DISACMSK;/* GET OTHER CPU'S MOUNT MASKS
*                                                            @ZA09542*/
         L     @09,CPUIDPTR                                        0462
         LR    @06,SAVEI                                           0462
         SLA   @06,3                                               0462
         ST    @06,@TF00001                                        0462
         ALR   @06,@09                                             0462
         NC    DISACMSK(2),CPUMASK-8(@06)                          0462
*   CPUMASK(SAVEI)=VSPMASK(SAVEI);  /* UPDATE HOSTID'S MOUNT MASK  0463
*                                                            @ZA09542*/
         LR    @06,@09                                             0463
         AL    @06,@TF00001                                        0463
         LA    @04,VSPMASK-2(@14)                                  0463
         MVC   CPUMASK-8(2,@06),0(@04)                             0463
*   IF SAVEID=CPUIDREC(SAVEI)       /* HOSTID THIS CPU       @ZA09542*/
*     THEN                                                         0464
         LR    @14,@09                                             0464
         AL    @14,@TF00001                                        0464
         CLC   SAVEID(5),CPUIDREC-8(@14)                           0464
         BNE   @RF00464                                            0464
*     VVICPUID=CPUMASK(SAVEI);      /* UPDATE MOUNT MASK IN CONTROL
*                                      BLOCK                 @ZA09542*/
         AL    @09,@TF00001                                        0465
         MVC   VVICPUID(2,VVIPTR),CPUMASK-8(@09)                   0465
*/********************************************************************
* * LOCATE ASSOCIATED CPU(S) AND UPDATE MOUNT MASK          @ZA09542
******************************************************************** */
*                                                                  0466
*   DO J=ONE TO SIXTEEN;            /* SEARCH FOR CPU        @ZA09542*/
@RF00464 LA    J,1                                                 0466
@DL00466 DS    0H                                                  0467
*     IF(DISACMSK&VSPMASK(J))^=ZERO THEN                           0467
         LR    @14,J                                               0467
         ALR   @14,@14                                             0467
         LA    @09,VSPMASK-2(@14)                                  0467
         SLR   @14,@14                                             0467
         ICM   @14,3,0(@09)                                        0467
         SLR   @09,@09                                             0467
         ICM   @09,3,DISACMSK                                      0467
         NR    @14,@09                                             0467
         LTR   @14,@14                                             0467
         BZ    @RF00467                                            0467
*       DO;                         /* LOCATE CPUID IN RECORD      0468
*                                                            @ZA09542*/
*         CPUMASK(J)=CPUMASK(J)&SAVMASK;                           0469
*                                                                  0469
         L     @14,CPUIDPTR                                        0469
         LR    @09,J                                               0469
         SLA   @09,3                                               0469
         ST    @09,@TF00001                                        0469
         ALR   @09,@14                                             0469
         NC    CPUMASK-8(2,@09),SAVMASK                            0469
*         /***********************************************************/
*         /*                                                         */
*         /* UPDATE MOUNT MASK                               @ZA09542*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0470
*         IF SAVEID=CPUIDREC(J)     /* THIS CPU IS HOST      @ZA09542*/
*           THEN                                                   0470
         LR    @09,@14                                             0470
         AL    @09,@TF00001                                        0470
         CLC   SAVEID(5),CPUIDREC-8(@09)                           0470
         BNE   @RF00470                                            0470
*           VVICPUID=CPUMASK(J);    /* UPDATE MOUNT MASK IN CONTROL
*                                      BLOCK                 @ZA09542*/
         AL    @14,@TF00001                                        0471
         MVC   VVICPUID(2,VVIPTR),CPUMASK-8(@14)                   0471
*         DISACMSK=DISACMSK&&VSPMASK(J);/* GET OTHER CPUS    @ZA09542*/
@RF00470 LR    @14,J                                               0472
         ALR   @14,@14                                             0472
         LA    @09,VSPMASK-2(@14)                                  0472
         XC    DISACMSK(2),0(@09)                                  0472
*         IF DISACMSK=ZERO          /* IF NO OTHER CPUS      @ZA09542*/
*           THEN                                                   0473
         ICM   @14,3,DISACMSK                                      0473
         BNZ   @RF00473                                            0473
*           J=SIXTEEN;              /* END SEARCH            @ZA09542*/
         LA    J,16                                                0474
*       END;                        /*                       @ZA09542*/
@RF00473 DS    0H                                                  0476
*   END;                            /*                       @ZA09542*/
@RF00467 AL    J,@CF00043                                          0476
         C     J,@CF00111                                          0476
         BNH   @DL00466                                            0476
*/********************************************************************
* * DATA SET PROCESSING NOT REQUIRED JUST RETURN TO UPDATED CPUID  0477
* * RECORD                                                   @Y30LB27
* ********************************************************************/
*                                                                  0477
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00004                                            0477
*   END VSPDISAC;                   /*                       @Y30LB27*/
*                                                                  0479
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPSUS, SUSPEND REQUEST                        @Y30LB27
**                                                           @Y30LB27
**     INPUT = REG1 CONTAINS A PTR TO THE MSVC RPL.          @Y30LB27
**     THE RPL CONTAINS THE SUSPEND ORDER AND THE            @Y30LB27
**     RECONFIGURATION INDICATOR FLAG.                       @Y30LB27
**                                                           @Y30LB27
**     PROCESS = IF ORDER IS NOT SUSPEND FOR RECONFIGURATION       0479
**     ON FIRST CALL FOR SUSPEND FOR RECONFIGURATION, ALL PURGE    0479
**     FLAGS IN THE CPU ID RECORD ARE TURNED ON.  NO OTHER         0479
**     UPDATES TO THE INVENTORY ARE DONE AT THIS TIME.             0479
**     IF THE ORDER FAILS, ON THE SECOND CALL, ICBVSP00            0479
**     RESTORES THE CPU ID RECORD.                                 0479
**     IF THE ORDER WAS SUCCESSFUL, NO ACTION IS TAKEN ON          0479
**     THE SECOND CALL. THE NEXT IPL BY ANY HOST WILL CAUSE        0479
**     ALL VOLUMES TO BE MARKED DEMOUNTED AND THE DOWN LEVEL       0479
**     SPACE FLAG WILL BE TURNED ON.                       @G24LB26
**                                                                 0479
**     NO PROCESSING OCCURS.  ON SUSPEND FOR RECONFIGURATION, THE  0479
**     CPU ASSOCIATION RECORD IS SET TO SHOW THAT ALL CPUS ARE TO  0479
**     BE PURGED.                                                  0479
**                                                                 0479
**     OUTPUT = CPU ASSOCIATION RECORD IS REINITIALIZED AND SET TO 0479
**     SHOW THAT ALL CPUS ARE TO BE PURGED IF ORDER IS A SUSPEND FOR
**     RECONFIGURATION                                             0479
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0479
*VSPSUS:                                                           0479
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPSUS   ST    @14,@SA00005                                        0479
*/********************************************************************
* * SUSPEND ORDER PROCESSING                                 @Y30LB27
* * ONLY SUSPEND-FOR-RECONFIGURATION REQUIRES PROCESSING     @Y30LB27
* ********************************************************************/
*                                                                  0480
*   IF SUPRCON=OFF THEN             /* IF NOT SUSPEND RECONF @Y30LB27*/
         L     @14,SUSPPTR                                         0480
         TM    SUPRCON(@14),B'01000000'                            0480
         BZ    @RT00480                                            0480
*     RETURN;                       /* JUST RETURN NO PROC   @Y30LB27
*                                      REQD                  @Y30LB27*/
*   IF RPLFTIME=OFF&VVIFLG0=ON THEN /* MSVC DISABLED         @Y30LB27*/
         TM    RPLFTIME(RPLVPTR),B'10000000'                       0482
         BNZ   @RF00482                                            0482
         TM    VVIFLG0(VVIPTR),B'10000000'                         0482
         BNO   @RF00482                                            0482
*     DO;                           /*                       @Y30LB27*/
*       VSPMSGID=MSGSUSE;           /* INDICATE SUSPEND ERROR        */
         MVC   VSPMSGID(2),@CH00192                                0484
*       CALL VSPWTO;                /* ISSUE ERROR MSG       @Y30LB27*/
         BAL   @14,VSPWTO                                          0485
*       RETURN;                     /*                       @Y30LB27*/
@EL00005 DS    0H                                                  0486
@EF00005 DS    0H                                                  0486
@ER00005 L     @14,@SA00005                                        0486
         BR    @14                                                 0486
*     END;                          /*                       @Y30LB27*/
*   IF RPLFTIME=ON THEN             /* IF SECOND CALL        #Y30LB27*/
@RF00482 TM    RPLFTIME(RPLVPTR),B'10000000'                       0488
         BNO   @RF00488                                            0488
*     IF DSMCODE=ZERO THEN          /* AND MSC RTNCODE IS 0  @Y30LB27*/
         LTR   DSMCODE,DSMCODE                                     0489
         BZ    @RT00489                                            0489
*       RETURN;                     /* JUST RETURN           @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
* * FIRST CALL OR SECOND CALL WITH ERROR GET THE CPUID RECORD      0491
* * SUSPEND HAS NO PROCESSING DONE BY OUTER PROCEDURE EXCEPT FOR   0491
* * DISABLE PROCESSING IN EVENT OF FAILURE                   @Y30LB27
* * RESERVE THE DATA SET                                     @Y30LB27
* ********************************************************************/
*                                                                  0491
*   IF RPLVVIN=OFF THEN             /* VIN00 CALL            @Y30LB27*/
@RF00488 TM    RPLVVIN(RPLVPTR),B'00001000'                        0491
         BNZ   @RF00491                                            0491
*     DO;                           /* NO                    @Y30LB27*/
*       REG0=RESINVEN;              /* INDICATE RESERVE ON INVEN     */
         LA    REG0,1                                              0493
*       CALL ICBVRR00;              /* CALL ICBVRR00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01473                                        0494
         BALR  @14,@15                                             0494
*/********************************************************************
* * RESERVE FAILURE - ISSUE ERROR MSG                        @Y30LB27
* ********************************************************************/
*                                                                  0495
*       IF RPLVRETC^=ZERO THEN                                     0495
         LH    @14,RPLVRETC(,RPLVPTR)                              0495
         N     @14,@CF01715                                        0495
         LTR   @14,@14                                             0495
         BZ    @RF00495                                            0495
*         DO;                       /* RESERVE FAILURE       @Y30LB27*/
*           VSPMSGID=MSGVRRE;       /* INDICATE FAILURE MSG  @Y30LB27*/
         MVC   VSPMSGID(2),@CH00041                                0497
*           CNVRTWK1(ONE:TWO)=RPLRCODE;/* CONVERT THE REASON CODE  0498
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0498
*           CALL VSPCNVRT;          /* CALL THE CONVERSION ROUTINE   */
         BAL   @14,VSPCNVRT                                        0499
*           CALL VSPWTO;            /* ISSUE THE MSG         @Y30LB27*/
         BAL   @14,VSPWTO                                          0500
*           RETURN;                 /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00005                                            0501
*         END;                      /*                       @Y30LB27*/
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00495 DS    0H                                                  0504
*/********************************************************************
* * RESERVE OKAY - GET CPUID RECORD                          @Y30LB27
* ********************************************************************/
*                                                                  0504
*   RPLVTYP=RPLVREAD;               /* INDICATE READ         @Y30LB27*/
@RF00491 MVI   RPLVTYP(RPLVPTR),X'00'                              0504
*   RPLVUPD=ON;                     /* FOR UPDATE            @Y30LB27*/
         OI    RPLVUPD(RPLVPTR),B'00000010'                        0505
*   RPLVBUF=CPUIDPTR;               /* SET BUFFER ADDRESS    @Y30LB27*/
         L     @14,CPUIDPTR                                        0506
         ST    @14,RPLVBUF(,RPLVPTR)                               0506
*   RPLVKEY=CPUIDPTR;               /* SET KEY ADDRESS       @Y30LB27*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0507
*   RPLVRLN=LENGTH(CPUID);          /* SET KEY ADDRESS       @Y30LB27*/
         LA    @09,151                                             0508
         ST    @09,RPLVRLN(,RPLVPTR)                               0508
*   RPLVBLN=LENGTH(CPUID);          /* SET KEY ADDRESS       @Y30LB27*/
         ST    @09,RPLVBLN(,RPLVPTR)                               0509
*   CPUNAME=CCPUIDK;                /* INDICATE CPUID RECORD @Y30LB27*/
         MVC   CPUNAME(13,@14),CCPUIDK                             0510
*   REG1=RPLVPTR;                   /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0511
*   CALL ICBVIO00;                  /* CALL THE I/O PROCESSOR@Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0512
         BALR  @14,@15                                             0512
*/********************************************************************
* * I/O ERROR - ISSUE ERROR MSG - ENDREQ AND DEQ DATA SET    @Y30LB27
* ********************************************************************/
*                                                                  0513
*   IF RPLVRETC^=ZERO THEN                                         0513
         LH    @14,RPLVRETC(,RPLVPTR)                              0513
         N     @14,@CF01715                                        0513
         LTR   @14,@14                                             0513
         BZ    @RF00513                                            0513
*     DO;                           /* VSAM I/O ERROR        @Y30LB27*/
*       MSGID=MSGVSME;              /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   MSGID(4),@CF00061                                   0515
*       MSGLEN1=TWELVE;             /* INDICATE WHICH RECORD @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0516
*       MSGTEXT1=RPLVKEY;           /* LOCATION OF RECORD ID @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0517
*       CNVRTWK1(ONE:TWO)=RPLRCODE; /* ERROR FLAG IS 1 BYTE  @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0518
*       CALL VSPCNVRT;              /* CALL THE CONVERTN RTN @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0519
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0520
*       SAVRCODE=RPLRCODE;          /*                       @ZM30746*/
         LH    SAVRCODE,RPLRCODE(,RPLVPTR)                         0521
         N     SAVRCODE,@CF01715                                   0521
*       SAVRETC=RPLVRETC;           /*                       @ZM30746*/
         LH    SAVRETC,RPLVRETC(,RPLVPTR)                          0522
         N     SAVRETC,@CF01715                                    0522
*       RPLVTYP=RPLVENDR;           /* INDICATE ENDREC       @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'04'                              0523
*       REG1=RPLVPTR;               /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0524
*       CALL ICBVIO00;              /* CALL I/O PROC         @Y30LB27*/
         L     @15,@CV01474                                        0525
         BALR  @14,@15                                             0525
*       RPLVSAM=''B;                /*                       @ZM30746*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0526
*       IF RPLVVIN=OFF THEN                                        0527
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0527
         BNZ   @RF00527                                            0527
*         DO;                       /*                       @ZM30746*/
*           REG0=DEQINVEN;          /* DEQ THE INVENTORY     @Y30LB27*/
         SLR   REG0,REG0                                           0529
*           REG1=RPLVPTR;           /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0530
*           CALL ICBVRR00;          /* CALL RES/REL PROC     @Y30LB27*/
         L     @15,@CV01473                                        0531
         BALR  @14,@15                                             0531
*         END;                      /*                       @ZM30746*/
*       RPLRCODE=SAVRCODE;          /*                       @ZM30746*/
@RF00527 STH   SAVRCODE,RPLRCODE(,RPLVPTR)                         0533
*       RPLVRETC=SAVRETC;           /*                       @ZM30746*/
         STH   SAVRETC,RPLVRETC(,RPLVPTR)                          0534
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00005                                            0535
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
* * ON FIRST CALL FOR SUSPEN-FOR-RECONFIGURATION SAVE OLD CPUID RECORD
* * RE-CONSRUCT NEW CPUID RECORD - INDICATING PURGE FOR ALL CPUS   0537
* ********************************************************************/
*                                                                  0537
*   IF RPLFTIME=OFF THEN            /* FIRST CALL FOR SUSPEND      0537
*                                                            @Y30LB27*/
@RF00513 TM    RPLFTIME(RPLVPTR),B'10000000'                       0537
         BNZ   @RF00537                                            0537
*     DO;                           /*                       @Y30LB27*/
*/********************************************************************
* * SAVE OLD CPUID RECORD                                    @Y30LB27
* ********************************************************************/
*                                                                  0539
*       SAVCPUID=CPUID;             /* SAVE THE OLD RECORD   @Y30LB27
*                                                            @Y30LB27*/
         L     @14,CPUIDPTR                                        0539
         MVC   SAVCPUID(151),CPUID(@14)                            0539
*/*********************************************************************
* * INITIALIZE CPU ASSOC RECORD                              @Y30LB27
* ********************************************************************/
*                                                                  0540
*       CPUID=''B;                  /* INIT. THE CPUID REC.          */
         XC    CPUID(151,@14),CPUID(@14)                           0540
*       CPUNAME=CCPUIDK;            /* SET CPUID KEY         @Y30LB27*/
         MVC   CPUNAME(13,@14),CCPUIDK                             0541
*       DO I=ONE TO SIXTEEN;        /* LOOP CONTROL, 16 SLOTS@Y30LB27*/
         LA    I,1                                                 0542
@DL00542 DS    0H                                                  0543
*         CPUIDREC(I)='';           /* BLANK THE ID AREAS    @Y30LB27*/
         L     @14,CPUIDPTR                                        0543
         LR    @09,I                                               0543
         SLA   @09,3                                               0543
         ST    @09,@TF00001                                        0543
         ALR   @09,@14                                             0543
         MVI   CPUIDREC-8(@09),C' '                                0543
         MVC   CPUIDREC-7(4,@09),CPUIDREC-8(@09)                   0543
*         CPUMASK(I)=''B;           /* ZERO THE MASK AREAS   @Y30LB27*/
         AL    @14,@TF00001                                        0544
         XC    CPUMASK-8(2,@14),CPUMASK-8(@14)                     0544
*       END;                        /*                       @Y30LB27*/
         AL    I,@CF00043                                          0545
         C     I,@CF00111                                          0545
         BNH   @DL00542                                            0545
*       CPUPURGE=MASKFFFF;          /* INDICATE ALL CPUS TO BE PURGED*/
         L     @14,CPUIDPTR                                        0546
         MVC   CPUPURGE(2,@14),MASKFFFF                            0546
*       CPUASSOC=ON;                /* INDICATE CPU RECORD   @ZA09542
*                                                            @Y30LB27*/
         OI    CPUASSOC(@14),B'00000010'                           0547
*/*********************************************************************
* * WRITE CPU ASSOC REC                                      @Y30LB27
* ********************************************************************/
*                                                                  0548
*       RPLVTYP=RPLVPUT;            /* INDICATE WRITE        @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'01'                              0548
*       REG1=RPLVPTR;               /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0549
*       CALL ICBVIO00;              /* CALL ICBVIN00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0550
         BALR  @14,@15                                             0550
*/*********************************************************************
* * IF I/O ERROR - ISSUE ERROR MSG - ENDREQ AND DEQ THE DATA SET   0551
* ********************************************************************/
*                                                                  0551
*       IF RPLVRETC^=ZERO THEN                                     0551
         LH    @14,RPLVRETC(,RPLVPTR)                              0551
         N     @14,@CF01715                                        0551
         LTR   @14,@14                                             0551
         BZ    @RF00551                                            0551
*         DO;                       /* VSAM I/O ERROR        @Y30LB27*/
*           MSGID=MSGVSME;          /* IND THE ERROR MSG     @Y30LB27*/
         MVC   MSGID(4),@CF00061                                   0553
*           MSGLEN1=TWELVE;         /* INDICATE WHICH RECORD @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0554
*           MSGTEXT1=RPLVKEY;       /* LOCATION OF RECORD ID @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0555
*           CNVRTWK1(ONE:TWO)=RPLRCODE;/* ERROR FLAG IS 1 BYTE     0556
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0556
*           CALL VSPCNVRT;          /* CALL CNVRT RTN        @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0557
*           CALL VSPWTO;            /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0558
*         END;                      /*                       @Y30LB27*/
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * ON SECOND CALL WITH FAILURE - RESTORE OLD RECORD         @Y30LB27
* ********************************************************************/
*                                                                  0561
*   ELSE                            /* SECOND CALL FAILURE   @Y30LB27*/
*     DO;                           /* RESTORE OLD CPUID REC @Y30LB27*/
         B     @RC00537                                            0561
@RF00537 DS    0H                                                  0562
*       CPUID=SAVCPUID;             /* SET SAVED REC IN            0562
*                                      BUFFER@Y30LB27                */
         L     @14,CPUIDPTR                                        0562
         MVC   CPUID(151,@14),SAVCPUID                             0562
*       RPLVTYP=RPLVPUT;            /* INDICATE READ         @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'01'                              0563
*       REG1=RPLVPTR;               /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0564
*       CALL ICBVIO00;              /* INVOKE I/O PROC       @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0565
         BALR  @14,@15                                             0565
*/*********************************************************************
* * I/O ERROR ISSUE ERROR MSG - FALL THRU TO ENDREQ AND DEQ THE DATA SE
* ********************************************************************/
*                                                                  0566
*       IF RPLVRETC^=ZERO THEN      /* WRITE OKAY            @Y30LB27*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0566
         N     @14,@CF01715                                        0566
         LTR   @14,@14                                             0566
         BZ    @RF00566                                            0566
*         DO;                       /* I/O ERROR             @Y30LB27*/
*           MSGID=MSGVSME;          /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   MSGID(4),@CF00061                                   0568
*           MSGLEN1=TWELVE;         /* INDICATE WHICH RECORD @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0569
*           MSGTEXT1=RPLVKEY;       /* LOCATION OF RECORD ID @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0570
*           CNVRTWK1(ONE:TWO)=RPLRCODE;/* ERROR FLAG IS 1 BYTE     0571
*                                                            @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0571
*           CALL VSPCNVRT;          /* CONVERT IT            @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0572
*           CALL VSPWTO;            /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0573
*         END;                      /*                       @Y30LB27*/
*     END;                          /*                       @ZM30746*/
@RF00566 DS    0H                                                  0576
*/*********************************************************************
* * ENDREQ AND DEQ THE DATA SET                              @Y30LB27
* ********************************************************************/
*                                                                  0576
*   SAVRCODE=RPLRCODE;              /*                       @ZM30746*/
@RC00537 LH    SAVRCODE,RPLRCODE(,RPLVPTR)                         0576
         N     SAVRCODE,@CF01715                                   0576
*   SAVRETC=RPLVRETC;               /*                       @ZM30746*/
         LH    SAVRETC,RPLVRETC(,RPLVPTR)                          0577
         N     SAVRETC,@CF01715                                    0577
*   RPLVTYP=RPLVENDR;               /* INDICATE ENDREQ       @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'04'                              0578
*   REG1=RPLVPTR;                   /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0579
*   CALL ICBVIO00;                  /* CALL I/O PROC         @Y30LB27*/
         L     @15,@CV01474                                        0580
         BALR  @14,@15                                             0580
*   RPLVSAM=''B;                    /*                       @ZM30746*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0581
*   RPLRCODE=SAVRCODE;              /*                       @ZM30746*/
         STH   SAVRCODE,RPLRCODE(,RPLVPTR)                         0582
*   RPLVRETC=SAVRETC;               /*                       @ZM30746
*                                                            @Y30LB27*/
         STH   SAVRETC,RPLVRETC(,RPLVPTR)                          0583
*   IF RPLVVIN=OFF THEN             /* VIN00 CALL            @Y30LB27*/
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0584
         BNZ   @RF00584                                            0584
*     DO;                           /* NO                    @Y30LB27*/
*       SAVRCODE=RPLRCODE;          /*                       @ZM30746*/
         LH    @14,RPLRCODE(,RPLVPTR)                              0586
         N     @14,@CF01715                                        0586
         LR    SAVRCODE,@14                                        0586
*       SAVRETC=RPLVRETC;           /*                       @ZM30746*/
         LH    @14,RPLVRETC(,RPLVPTR)                              0587
         N     @14,@CF01715                                        0587
         LR    SAVRETC,@14                                         0587
*       REG0=DEQINVEN;              /* INDICATE DEQ          @Y30LB27*/
         SLR   REG0,REG0                                           0588
*       REG1=RPLVPTR;               /* SET REG1 TO MSVC RPLV @Y30LB27*/
         LR    REG1,RPLVPTR                                        0589
*       CALL ICBVRR00;              /* CALL RESERVE/REL PROC @Y30LB27*/
         L     @15,@CV01473                                        0590
         BALR  @14,@15                                             0590
*       RPLRCODE=SAVRCODE;          /*                       @ZM30746*/
         STH   SAVRCODE,RPLRCODE(,RPLVPTR)                         0591
*       RPLVRETC=SAVRETC;           /*                       @ZM30746*/
         STH   SAVRETC,RPLVRETC(,RPLVPTR)                          0592
*     END;                          /*                       @Y30LB27*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00005                                            0594
*   END VSPSUS;                     /*                       @Y30LB27*/
         B     @EL00005                                            0595
*                                                                  0596
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPPROC - INVENTORY PROCESSING                 @Y30LB27
**                                                           @Y30LB27
**     INPUT = MOUNT AND DEMOUNT MASKS GENERATED BY VSPPURGE AND   0596
**     VSPASSC.                                              @Y30LB27
**                                                           @Y30LB27
**     PROCESS = VSPPROC HANDLES THE ACTUAL PROCESSING OF THE MSVGRP AN
**     VOLUME RECORDS, UPDATING THE MOUNT AND SPACE INDICATORS     0596
**     FOR THE PURGE AND THE ASSOCIATE ORDERS. FOR PURGE           0596
**     THE INPUT MOUNT MASK SHOULD BE BINARY ZEROS TO EFFECT A NOP.
**                                                           @Y30LB27
**     OUTPUT = THE MSVGRP AND VOLUME RECORDS ARE UPDATED TO REFLECT
**     THE MOUNT STATUS OF THE VOLUMES AND IN THE CASE OF A VOLUME THAT
**     WAS DEMOUNTED THAT SPACE IS DOWN-LEVEL IF THE VOLUME IS NO  0596
**     LONGER MOUNTED TO ANY CPU.                            @ZA09543
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0596
*VSPPROC:                                                          0596
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPPROC  ST    @14,@SA00006                                        0596
*/*********************************************************************
* * DATA SET PROCESSING ROUTINE                              @Y30LB27
* * READ THE VOLUME RECORDS - APPLY DEMOUNT AND MOUNT MASKS        0597
* * IF THE VOLUME IS GROUPED READ THE VVGROUP RECORD AND           0597
* * APPLY DEMOUNT AND MOUNT MASKS TO THE GROUP RECORD        @Y30LB27
* ********************************************************************/
*                                                                  0597
*   VSPNAME=CBASNAMK;               /* SAVE FIRST KEY        @Y30LB27*/
         MVC   VSPNAME(13),CBASNAMK                                0597
*   RPLVBUF=BASEVPTR;               /* SET RECORD PTR        @ZA05098*/
         L     @14,BASEVPTR                                        0598
         ST    @14,RPLVBUF(,RPLVPTR)                               0598
*   RPLVKEY=BASEVPTR;               /* SET KEY PTR           @ZA05098*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0599
*   RPLVKEY=BASEVPTR;               /* SET KEY PTR           @ZA05098*/
         ST    @14,RPLVKEY(,RPLVPTR)                               0600
*   RPLVBLN=LENGTH(RECBUF);         /* INDICATE BUFFER FOR MAXIMUM   */
         MVC   RPLVBLN(4,RPLVPTR),@CF01582                         0601
*   DO WHILE VSPVKEY=CVOL;          /* SCAN VOL RECORDS      @Y30LB27*/
         B     @DE00602                                            0602
@DL00602 DS    0H                                                  0603
*     BASNAME=VSPNAME;              /* SET FIRST KEY         @Y30LB27*/
         L     @14,BASEVPTR                                        0603
         MVC   BASNAME(13,@14),VSPNAME                             0603
*     CALL VSPSPROC;                /* PROCESS THE INVENTORY @Y30LB27
*                                      SET KEY TO NEXT       @ZA05098*/
         BAL   @14,VSPSPROC                                        0604
*     VSPSERNO(SIX)=VSPSERNO(SIX)+ONE;/* VOLSER POSSIBLE     @ZA05098*/
         LA    @14,1                                               0605
         SLR   @09,@09                                             0605
         IC    @09,VSPSERNO+5                                      0605
         ALR   @14,@09                                             0605
         STC   @14,VSPSERNO+5                                      0605
*     RPLRCODE=ZERO;                /* CLEAR REASON AND      @Y30LB27*/
         SLR   @14,@14                                             0606
         STH   @14,RPLRCODE(,RPLVPTR)                              0606
*     RPLVRETC=ZERO;                /* REASON CODES          @Y30LB27*/
         STH   @14,RPLVRETC(,RPLVPTR)                              0607
*   END;                            /*                       @Y30LB27*/
@DE00602 CLC   VSPVKEY(5),CVOL                                     0608
         BE    @DL00602                                            0608
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
@EL00006 DS    0H                                                  0609
@EF00006 DS    0H                                                  0609
@ER00006 L     @14,@SA00006                                        0609
         BR    @14                                                 0609
*   END VSPPROC;                    /*                       @Y30LB27*/
*VSPSPROC:                                                         0611
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPSPROC ST    @14,@SA00007                                        0611
*/*********************************************************************
* * SUB-PROCEDURE OF VSPSPROC                                @Y30LB27
* * ALLOWS FOR ERROR EXIT WITHOUT THE NEED OF A GOTO         @Y30LB27
* ********************************************************************/
*                                                                  0612
*                                   /*                       @Y30LB27*/
*/*********************************************************************
* * INITIALIZE VSAM RPL AND READ BASE VOLUME RECORD          @Y30LB27
* ********************************************************************/
*                                                                  0612
*   RPLVTYP=RPLVREAD;               /* INDICATE READ         @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'00'                              0612
*   RPLVUPD=ON;                     /* INDICATE READ FOR UPDATE      */
         OI    RPLVUPD(RPLVPTR),B'00000010'                        0613
*   RPLVKGE=ON;                     /* INDICATE READ NEXT    @Y30LB27*/
         OI    RPLVKGE(RPLVPTR),B'00000100'                        0614
*   REG1=RPLVPTR;                   /* SET PTR TO MSVC RPL   @Y30LB27*/
         LR    REG1,RPLVPTR                                        0615
*   CALL ICBVIO00;                  /* CALL ICBVIN00         @Y30LB27*/
         L     @15,@CV01474                                        0616
         BALR  @14,@15                                             0616
*   RPLVKGE=OFF;                    /* INDICATE READ NEXT    @Y30LB27*/
         NI    RPLVKGE(RPLVPTR),B'11111011'                        0617
*   VSPNAME=BASNAME;                /* SET NEXT KEY          @Y30LB27
*                                                            @Y30LB27*/
         L     @14,BASEVPTR                                        0618
         MVC   VSPNAME(13),BASNAME(@14)                            0618
*/*********************************************************************
* * IF I/O ERROR NOTIFY OPERATOR - NO ENDREQ OR DEQ REQ'D    @Y30LB27
* ********************************************************************/
*                                                                  0619
*   IF RPLVRETC^=ZERO THEN                                         0619
         LH    @14,RPLVRETC(,RPLVPTR)                              0619
         N     @14,@CF01715                                        0619
         LTR   @14,@14                                             0619
         BZ    @RF00619                                            0619
*     DO;                           /* VSAM I/O ERROR        @Y30LB27*/
*       IF RPLRCODE=EOD×RPLRCODE=NOREC THEN                        0621
         CLC   RPLRCODE(2,RPLVPTR),EOD                             0621
         BE    @RT00621                                            0621
         CLC   RPLRCODE(2,RPLVPTR),NOREC                           0621
         BNE   @RF00621                                            0621
@RT00621 DS    0H                                                  0622
*         DO;                       /* EODAD                 @Y30LB27*/
*           RPLVRETC=ZERO;          /* CLEAR RETURN CODE     @Y30LB27*/
         SLR   @14,@14                                             0623
         STH   @14,RPLVRETC(,RPLVPTR)                              0623
*           RPLRCODE=ZERO;          /* CLEAR REASON CODE     @Y30LB27*/
         STH   @14,RPLRCODE(,RPLVPTR)                              0624
*           VSPNAME=''B;            /* CLEAR NAME            @Y30LB27*/
         XC    VSPNAME(13),VSPNAME                                 0625
*           RETURN;                 /* RETURN TO MAINLINE    @Y30LB27*/
@EL00007 DS    0H                                                  0626
@EF00007 DS    0H                                                  0626
@ER00007 L     @14,@SA00007                                        0626
         BR    @14                                                 0626
*         END;                      /* END EODAD             @Y30LB27*/
*       VSPMSGID=MSGVSME;           /* INDICATE VSAM ERROR   @Y30LB27*/
@RF00621 MVC   VSPMSGID(2),@CH00061                                0628
*       MSGLEN1=TWELVE;             /* INDICATE RECORD       @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0629
*       MSGTEXT1=RPLVKEY;           /* LOCATION OF VOL REC   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0630
*       CNVRTWK1(ONE:TWO)=RPLRCODE; /* CNVRT RSN             @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0631
*       CALL VSPCNVRT;              /* INVOKE CONVRT RTN     @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0632
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0633
*       IF VOLERCNT^=ZERO THEN                                     0634
         LTR   VOLERCNT,VOLERCNT                                   0634
         BZ    @RF00634                                            0634
*         DO;                       /*                       @ZM30746*/
*           RPLVUPD=OFF;            /*                       @ZM30746*/
         NI    RPLVUPD(RPLVPTR),B'11111101'                        0636
*           RPLVTYP=RPLVENDR;       /*                       @ZM30746*/
         MVI   RPLVTYP(RPLVPTR),X'04'                              0637
*           REG1=RPLVPTR;           /*                       @ZM30746*/
         LR    REG1,RPLVPTR                                        0638
*           CALL ICBVIO00;          /*                       @ZM30746*/
         L     @15,@CV01474                                        0639
         BALR  @14,@15                                             0639
*           RPLVSAM=''B;            /*                       @ZM30746*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0640
*           VSPSERNO(SIX)=VSPSERNO(SIX)+ONE;/*               @ZM30746*/
         LA    @14,1                                               0641
         SLR   @09,@09                                             0641
         IC    @09,VSPSERNO+5                                      0641
         ALR   @14,@09                                             0641
         STC   @14,VSPSERNO+5                                      0641
*           VOLERCNT=VOLERCNT-ONE;  /*                       @ZM30746*/
         BCTR  VOLERCNT,0                                          0642
*         END;                      /*                       @ZM30746*/
*       ELSE                        /*                       @ZM30746*/
*         VSPNAME=''B;              /* CLEAR NAME            @ZM30746*/
         B     @RC00634                                            0644
@RF00634 XC    VSPNAME(13),VSPNAME                                 0644
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00007                                            0645
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * IS IT A VOLUME RECORD - IF NOT RETURN                    @Y30LB27
* ********************************************************************/
*                                                                  0647
*   IF BASEVKEY^=CVOL THEN          /* VOLUME RECORD         @Y30LB27*/
@RF00619 L     @14,BASEVPTR                                        0647
         CLC   BASEVKEY(5,@14),CVOL                                0647
         BNE   @RT00647                                            0647
*     RETURN;                       /* NO RETURN             @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* *  COPY VOLUME RECORD  - RETURN TO READ NEXT RECORD         @ZA05098
* ********************************************************************/
*                                                                  0649
*   IF BASZERO^=ZERO THEN           /* COPY VOLUME           @Y30LB27*/
         CLI   BASZERO(@14),0                                      0649
         BNE   @RT00649                                            0649
*     RETURN;                       /* YES - RETURN          @ZA05098*/
*/*********************************************************************
* * SET RPL TO PUT UPDATE THE RECORD                          @Y30LB27
* ********************************************************************/
*                                                                  0651
*   RPLVTYP=RPLVPUT;                /* INDICATE WRITE        @Y30LB27
*                                                            @Y30LB27*/
         MVI   RPLVTYP(RPLVPTR),X'01'                              0651
*/*********************************************************************
* * APPLY THE DEMOUNT AND MOUNT MASKS AND RE-WRITE THE RECORD@Y30LB27
* ********************************************************************/
*                                                                  0652
*   SAVMASK=BASCPUID;               /* SAVE BASCPUID         @ZA09543*/
         MVC   SAVMASK(2),BASCPUID(@14)                            0652
*   BASCPUID=DMNTMASK&BASCPUID;     /* INDICATE VOLUME DEMNT @Y30LB27*/
         NC    BASCPUID(2,@14),DMNTMASK                            0653
*   DLSFSW=OFF;                     /* TURN OFF DOWN LEVEL SPACE FLAG
*                                      SWITCH                @ZA09543*/
         NI    DLSFSW,B'11101111'                                  0654
*   IF BASCPUID^=SAVMASK THEN       /* IF DEMOUNT            @ZA09543*/
         CLC   BASCPUID(2,@14),SAVMASK                             0655
         BE    @RF00655                                            0655
*     DLSFSW=ON;                    /* INDICATE DOWN LEVEL SPACE   0656
*                                                            @ZA09543*/
         OI    DLSFSW,B'00010000'                                  0656
*/*******************************************************************
* * IF VOLUME MOUNTED TO ANY CPU  SPECIFIED BY VVICPUID, THEN      0657
* * MARK IT MOUNTED TO ALL CPUS  SPECIFIED BY VVICPUID.  TO        0657
* * DETERMINE IF THE VOLUME IS MOUNTED TO ANY CPU SPECIFIED BY     0657
* * VVICPUID, A 2 BYTE TM WITH VARIABLE FIELDS IS REQUIRED.        0657
******************************************************************** */
*                                                                  0657
*   MNTSW=OFF;                      /* TURN OFF MOUNT SWITCH @Y30LB27*/
@RF00655 NI    MNTSW,B'11011111'                                   0657
*   REG1=VVICPUID;                  /* GET THE CPUID         @Y30LB27*/
         LH    REG1,VVICPUID(,VVIPTR)                              0658
         N     REG1,@CF01715                                       0658
*   WORK1=BASCPUID;                 /* MOUNTED FOR THIS CPU  @Y39LB27*/
         L     @14,BASEVPTR                                        0659
         MVC   WORK1(2),BASCPUID(@14)                              0659
*   REG1=REG1&MASK00FF;             /* ISOLATE LOW ORDER BYTE      0660
*                                                            @Y30LB27*/
         N     REG1,MASK00FF                                       0660
*   IF REG1^=ZERO THEN              /* CPU IN FLAG           @Y30LB27*/
         LTR   REG1,REG1                                           0661
         BZ    @RF00661                                            0661
*     DO;                           /* YES                   @Y30LB27*/
*       GEN(EX REG1,VSPTML);        /* CPU TO BE PURGED      @Y30LB27*/
         EX REG1,VSPTML
*       BC(BZ,CHKVSPH);             /* HAVE A HIT            @Y30LB27*/
         BC    8,CHKVSPH                                           0664
*       MNTSW=ON;                   /* INDICATE MOUNT REQD   @Y30LB27*/
         OI    MNTSW,B'00100000'                                   0665
*     END;                          /*                       @Y30LB27*/
*CHKVSPH:                                                          0667
*   REG1=VVICPUID;                  /* GET THE CPUID         @Y30LB27*/
@RF00661 DS    0H                                                  0667
CHKVSPH  LH    REG1,VVICPUID(,VVIPTR)                              0667
         N     REG1,@CF01715                                       0667
*   SRL(REG1,EIGHT);                /* ISOLATE HIGH ORDER BYTE     0668
*                                                            @Y30LB27*/
         SRL   REG1,8                                              0668
*   IF REG1^=ZERO THEN              /* CPU IN FLAG           @Y30LB27*/
         LTR   REG1,REG1                                           0669
         BZ    @RF00669                                            0669
*     DO;                           /* YES                   @Y30LB27*/
*       GEN(EX REG1,VSPTMH);        /* CPU TO BE PURGED      @Y30LB27*/
         EX REG1,VSPTMH
*       BC(BZ,CHKVSPL);             /* HAVE A HIT            @Y30LB27*/
         BC    8,CHKVSPL                                           0672
*       MNTSW=ON;                   /* INDICATE MOUNT REQD   @Y30LB27*/
         OI    MNTSW,B'00100000'                                   0673
*     END;                          /*                       @Y30LB27*/
*CHKVSPL:                                                          0675
*   IF MNTSW=ON THEN                /* CPU TO BE MOUNTED     @Y30LB27*/
@RF00669 DS    0H                                                  0675
CHKVSPL  TM    MNTSW,B'00100000'                                   0675
         BNO   @RF00675                                            0675
*     BASCPUID=MNTMASK×BASCPUID;    /* INDICATE VOLUME MNT   #Y30LB27*/
         L     @14,BASEVPTR                                        0676
         OC    BASCPUID(2,@14),MNTMASK                             0676
*   IF BASCPUID=MASK0000 THEN       /* VOLUME NOT MOUNTED    @ZA09543*/
@RF00675 L     @14,BASEVPTR                                        0677
         CLC   BASCPUID(2,@14),MASK0000                            0677
         BNE   @RF00677                                            0677
*     IF DLSFSW=ON THEN             /* DOWN LEVEL SPACE INDICATED  0678
*                                                            @ZA09543*/
         TM    DLSFSW,B'00010000'                                  0678
         BNO   @RF00678                                            0678
*       BASDLSF=ON;                 /* SET ON DOWN LEVEL SPACE FLAG
*                                      IN BASE VOLUME RECORD @ZA09543*/
         OI    BASDLSF(@14),B'10000000'                            0679
*   REG1=RPLVPTR;                   /* SET PTR TO MSVC RPL   #Y30LB27*/
@RF00678 DS    0H                                                  0680
@RF00677 LR    REG1,RPLVPTR                                        0680
*   CALL ICBVIO00;                  /* CALL ICBVIN00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0681
         BALR  @14,@15                                             0681
*/*********************************************************************
* * I/O/ERROR ISSUE ERROR MESSAGE - PROCESSING CONTINUES     @Y30LB27
* ********************************************************************/
*                                                                  0682
*   IF RPLVRETC^=ZERO THEN                                         0682
         LH    @14,RPLVRETC(,RPLVPTR)                              0682
         N     @14,@CF01715                                        0682
         LTR   @14,@14                                             0682
         BZ    @RF00682                                            0682
*     DO;                           /* VSAM I/O ERROR        @Y30LB27*/
*       VSPMSGID=MSGVSME;           /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   VSPMSGID(2),@CH00061                                0684
*       MSGLEN1=TWELVE;             /* INDICATE RECORD       @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0685
*       MSGTEXT1=RPLVKEY;           /* LOCATION OF VOL REC   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0686
*       CNVRTWK1(ONE:TWO)=RPLRCODE; /* CNVRT RSN             @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0687
*       CALL VSPCNVRT;              /* INVOKE CONVRT RTN     @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0688
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0689
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00007                                            0690
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * IF THE VOLUME IS GROUPED READ THE VVGROUP AND EXTENSION RECORDS
* ********************************************************************/
*                                                                  0692
*   RPLVTYP=RPLVREAD;               /* INDICATE READ         @Y30LB27*/
@RF00682 MVI   RPLVTYP(RPLVPTR),X'00'                              0692
*   IF BASGRPV=OFF×BASGENUS=OFF×BASINAC=ON THEN                    0693
         L     @14,BASEVPTR                                        0693
         TM    BASINAC(@14),B'00000100'                            0693
         BNZ   @RT00693                                            0693
         TM    BASGRPV(@14),B'00110000'                            0693
         BNO   @RT00693                                            0693
*     RETURN;                       /*                       @Y30LB27*/
*   GRONAME=CGRONAMK;               /* GET GENERAL GROUP KEY @Y30LB27*/
         L     @09,GROUPPTR                                        0695
         MVC   GRONAME(13,@09),CGRONAMK                            0695
*   GROVVGRP=BASGROUP;              /* SET GROUP NAME IN KET @Y30LB27*/
         MVC   GROVVGRP(8,@09),BASGROUP(@14)                       0696
*   REG1=RPLVPTR;                   /* SET PTR TO MSVC RPL   @Y30LB27*/
         LR    REG1,RPLVPTR                                        0697
*   CALL ICBVIO00;                  /* CALL ICBVIN00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0698
         BALR  @14,@15                                             0698
*/*********************************************************************
* * I/O ERROR ISSUE ERROR MESSAGE - PROCESSING CONTINUES     @Y30LB27
* ********************************************************************/
*                                                                  0699
*   IF RPLVRETC^=ZERO THEN                                         0699
         LH    @14,RPLVRETC(,RPLVPTR)                              0699
         N     @14,@CF01715                                        0699
         LTR   @14,@14                                             0699
         BZ    @RF00699                                            0699
*     DO;                           /* VSAM I/O ERROR        @Y30LB27*/
*       IF RPLRCODE=NOREC THEN                                     0701
         CLC   RPLRCODE(2,RPLVPTR),NOREC                           0701
         BNE   @RF00701                                            0701
*         DO;                       /* GROUP REC NOT FOUND   @YM04320*/
*           VSPMSGID=MSGGRPE;       /* INDICATE GROUP ERROR  @YM04320*/
         MVC   VSPMSGID(2),@CH00039                                0703
*           MSGLEN1=SIX;            /* COMP LEN              @YM04320*/
         MVI   MSGLEN1,X'06'                                       0704
*           MSGTEXT1=ADDR(BASGROUP);/* GROUP NAME            @ZM30746*/
         L     @14,BASEVPTR                                        0705
         LA    @09,BASGROUP(,@14)                                  0705
         STCM  @09,7,MSGTEXT1                                      0705
*           MSGLEN2=SIX;            /* COMP LEN              @YM04320*/
         MVI   MSGLEN2,X'06'                                       0706
*           MSGTEXT2=ADDR(BASSERNO);/* GROUP NAME            @ZM30746*/
         LA    @14,BASSERNO(,@14)                                  0707
         STCM  @14,7,MSGTEXT2                                      0707
*         END;                      /* END GROUP REC NOT FND @YM04320*/
*       ELSE                                                       0709
*         DO;                       /* VSAM ERROR            @YM04320*/
         B     @RC00701                                            0709
@RF00701 DS    0H                                                  0710
*           VSPMSGID=MSGVSME;       /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   VSPMSGID(2),@CH00061                                0710
*           MSGLEN1=TWELVE;         /* INDICATE RECORD       @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0711
*           MSGTEXT1=RPLVKEY;       /* LOCATION OF VOL REC   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0712
*           CNVRTWK1(ONE:TWO)=RPLRCODE;/* CNVRT RSN          @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0713
*           CALL VSPCNVRT;          /* CALL CNVRT RTN        @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0714
*         END;                      /*                       @YM04320*/
*       CALL VSPWTO;                /* ISSUE MESSAGE         @Y30LB27*/
@RC00701 BAL   @14,VSPWTO                                          0716
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00007                                            0717
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * INDICATE READ NEXT FOR EXTENSION OR NEXT EXTENSION       @Y30LB27
* * WILL LOOP UNTIL VOLID IS FOUND                           @Y30LB27
* ********************************************************************/
*                                                                  0719
*   GVSEXSW=ON;                     /* INDICATE READ NEXT EXT@Y30LB27
*                                                            @Y30LB27*/
@RF00699 OI    GVSEXSW,B'10000000'                                 0719
*/*********************************************************************
* * SEARCH GROUP EXTENSION RECORDS FOR VOLUME                @Y30LB27
* ********************************************************************/
*                                                                  0720
*   DO WHILE(GVSEXSW=ON);           /* READ OF NEXT EXTENSION RECORD
*                                                            @Y30LB27*/
         B     @DE00720                                            0720
@DL00720 DS    0H                                                  0721
*     RPLVNEXT=ON;                  /* INDICATE READ NEXT    @Y30LB27*/
         OI    RPLVNEXT(RPLVPTR),B'00100000'                       0721
*     REG1=RPLVPTR;                 /* SET PTR TO MSVC RPL   @Y30LB27*/
         LR    REG1,RPLVPTR                                        0722
*     CALL ICBVIO00;                /* CALL ICBVIN00         @Y30LB27*/
         L     @15,@CV01474                                        0723
         BALR  @14,@15                                             0723
*     RPLVNEXT=OFF;                 /* INDICATE READ NEXT    @Y30LB27
*                                                            @Y30LB27*/
         NI    RPLVNEXT(RPLVPTR),B'11011111'                       0724
*/*********************************************************************
* * I/O ERROR ISSUE MSG AND CONTINUE PROCESSING              @Y30LB27
* ********************************************************************/
*                                                                  0725
*     IF RPLVRETC^=ZERO THEN                                       0725
         LH    @14,RPLVRETC(,RPLVPTR)                              0725
         N     @14,@CF01715                                        0725
         LTR   @14,@14                                             0725
         BZ    @RF00725                                            0725
*       DO;                         /* VSAM I/O ERROR        @Y30LB27*/
*         IF RPLRCODE=NOREC THEN                                   0727
         CLC   RPLRCODE(2,RPLVPTR),NOREC                           0727
         BNE   @RF00727                                            0727
*           DO;                     /* GROUP REC NOT FOUND   @ZM30746*/
*             VSPMSGID=MSGGRPE;     /* INDICATE GROUP ERROR  @ZM30746*/
         MVC   VSPMSGID(2),@CH00039                                0729
*             MSGLEN1=SIX;          /* COMP LEN              @ZM30746*/
         MVI   MSGLEN1,X'06'                                       0730
*             MSGTEXT1=ADDR(BASGROUP);/* GROUP NAME          @ZM30746*/
         L     @14,BASEVPTR                                        0731
         LA    @09,BASGROUP(,@14)                                  0731
         STCM  @09,7,MSGTEXT1                                      0731
*             MSGLEN2=SIX;          /* COMP LEN              @ZM30746*/
         MVI   MSGLEN2,X'06'                                       0732
*             MSGTEXT2=ADDR(BASSERNO);/* GROUP NAME          @ZM30746*/
         LA    @14,BASSERNO(,@14)                                  0733
         STCM  @14,7,MSGTEXT2                                      0733
*           END;                    /* END GROUP REC NOT FND @ZM30746*/
*         ELSE                                                     0735
*           DO;                     /* VSAM ERROR            @ZM30746*/
         B     @RC00727                                            0735
@RF00727 DS    0H                                                  0736
*             VSPMSGID=MSGVSME;     /* INDICATE VSAM ERROR   @ZM30746*/
         MVC   VSPMSGID(2),@CH00061                                0736
*             MSGLEN1=TWELVE;       /* INDICATE RECORD       @ZM30746*/
         MVI   MSGLEN1,X'0C'                                       0737
*             MSGTEXT1=RPLVKEY;     /* LOCATION OF VOL REC   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0738
*             CNVRTWK1(ONE:TWO)=RPLRCODE;/* CNVRT RSN        @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0739
*             CALL VSPCNVRT;        /* CALL CNVRT RTN        @ZM30746*/
         BAL   @14,VSPCNVRT                                        0740
*           END;                    /*                       @ZM30746*/
*         CALL VSPWTO;              /* ISSUE MESSAGE         @Y30LB27*/
@RC00727 BAL   @14,VSPWTO                                          0742
*         RETURN;                   /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00007                                            0743
*       END;                        /*                       @Y30LB27
*                                                            @Y30LB27*/
*/*********************************************************************
* * VOLUME IN THIS GROUP EXTENSION IF YES INDICATE VOLUME MOUNTED. IF
* * TRY NEXT EXTENSION                                       @Y30LB27
* ********************************************************************/
*                                                                  0745
*     DO I=ONE TO GVSESIND-ONE;     /* LOOP CONTROL          @Y30LB27*/
@RF00725 LA    I,1                                                 0745
         B     @DE00745                                            0745
@DL00745 DS    0H                                                  0746
*       IF VSPSERNO=GVSVOLID(I) THEN                               0746
         L     @14,GVSNEPTR                                        0746
         LR    @09,I                                               0746
         MH    @09,@CH00372                                        0746
         ST    @09,@TF00001                                        0746
         ALR   @09,@14                                             0746
         CLC   VSPSERNO(6),GVSVOLID-20(@09)                        0746
         BNE   @RF00746                                            0746
*         DO;                       /* SPECIFIED VOLID       @Y30LB27*/
*           GVSCPUBM(I)=DMNTMASK&GVSCPUBM(I);/* INDICATE VOLUME    0748
*                                      DEMOUNTED             @Y30LB27*/
         LR    @09,@14                                             0748
         AL    @09,@TF00001                                        0748
         NC    GVSCPUBM-20(2,@09),DMNTMASK                         0748
*           IF MNTSW=ON THEN        /* CPU TO BE MOUNTED     @Y30LB27*/
         TM    MNTSW,B'00100000'                                   0749
         BNO   @RF00749                                            0749
*             GVSCPUBM(I)=MNTMASK×GVSCPUBM(I);/* APPLY MOUNT MASK  0750
*                                                            @Y30LB27*/
         AL    @14,@TF00001                                        0750
         OC    GVSCPUBM-20(2,@14),MNTMASK                          0750
*           IF GVSCPUBM(I)=BIT16ZRO THEN/* IS VOL MTD TO NO  @G24LB04
*                                      HOST?                 @G24LB04*/
@RF00749 L     @14,GVSNEPTR                                        0751
         LR    @09,I                                               0751
         MH    @09,@CH00372                                        0751
         ST    @09,@TF00001                                        0751
         ALR   @09,@14                                             0751
         CLC   GVSCPUBM-20(2,@09),@CB01564                         0751
         BNE   @RF00751                                            0751
*             GVSMTNSH(I)=OFF;      /* TURN OFF MOUNTED      @G24LB04
*                                      NON-SHARE FLAG        @G24LB04*/
         AL    @14,@TF00001                                        0752
         NI    GVSMTNSH-20(@14),B'10111111'                        0752
*           RPLVTYP=RPLVPUT;        /* INDICATE PUT          @G24LB04*/
@RF00751 MVI   RPLVTYP(RPLVPTR),X'01'                              0753
*           REG1=RPLVPTR;           /* SET PTR TO MSVC RPL   @Y30LB27*/
         LR    REG1,RPLVPTR                                        0754
*           CALL ICBVIO00;          /* CALL ICBVIN00         @Y30LB27
*                                                            @Y30LB27*/
         L     @15,@CV01474                                        0755
         BALR  @14,@15                                             0755
*/*********************************************************************
* * I/O ERROR ISSUE MSG AND CONTINUE PROCESSING              @Y30LB27
* ********************************************************************/
*                                                                  0756
*           IF RPLVRETC^=ZERO THEN                                 0756
         LH    @14,RPLVRETC(,RPLVPTR)                              0756
         N     @14,@CF01715                                        0756
         LTR   @14,@14                                             0756
         BZ    @RF00756                                            0756
*             DO;                   /* VSAM I/O ERROR        @Y30LB27*/
*               VSPMSGID=MSGVSME;   /* INDICATE VSAM ERROR   @Y30LB27*/
         MVC   VSPMSGID(2),@CH00061                                0758
*               MSGLEN1=TWELVE;     /* INDICATE RECORD       @Y30LB27*/
         MVI   MSGLEN1,X'0C'                                       0759
*               MSGTEXT1=RPLVKEY;   /* LOCATION OF VOL REC   @ZM30746*/
         MVC   MSGTEXT1(3),RPLVKEY+1(RPLVPTR)                      0760
*               CNVRTWK1(ONE:TWO)=RPLRCODE;/* CNVRT RSN      @Y30LB27*/
         MVC   CNVRTWK1(2),RPLRCODE(RPLVPTR)                       0761
*               CALL VSPCNVRT;      /* ROUTINE               @Y30LB27*/
         BAL   @14,VSPCNVRT                                        0762
*               CALL VSPWTO;        /* ISSUE MESSAGE         @Y30LB27*/
         BAL   @14,VSPWTO                                          0763
*             END;                  /*                       @Y30LB27*/
*           RETURN;                 /* RETURN TO CALLER      @ZA05098*/
         B     @EL00007                                            0765
*         END;                      /*                       @Y30LB27*/
*     END;                          /*                       @Y30LB27*/
@RF00746 AL    I,@CF00043                                          0767
@DE00745 L     @14,GVSNEPTR                                        0767
         LH    @14,GVSESIND(,@14)                                  0767
         BCTR  @14,0                                               0767
         CR    I,@14                                               0767
         BNH   @DL00745                                            0767
*     IF GVSEX=ON THEN                                             0768
         L     @14,GVSNEPTR                                        0768
         TM    GVSEX(@14),B'10000000'                              0768
         BNO   @RF00768                                            0768
*       GVSEXSW=ON;                 /* ANOTHER EXTENSION REC @Y30LB27*/
         OI    GVSEXSW,B'10000000'                                 0769
*     ELSE                                                         0770
*       GVSEXSW=OFF;                /* NO                    @Y30LB27*/
         B     @RC00768                                            0770
@RF00768 NI    GVSEXSW,B'01111111'                                 0770
*   END;                            /*                       @Y30LB27*/
@RC00768 DS    0H                                                  0771
@DE00720 TM    GVSEXSW,B'10000000'                                 0771
         BO    @DL00720                                            0771
*   END VSPSPROC;                   /*                       @Y30LB27*/
         B     @EL00007                                            0772
*                                                                  0773
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPWTO, SYSTEM OPERATOR COMMUNICATION          @Y30LB27
**                                                           @Y30LB27
**     INPUT = INTERNAL WORK FLAGS.                          @Y30LB27
**                                                           @Y30LB27
**     PROCESS = VSPWTO INFORMS THE SYSTEM OPERATOR OF AN ERROR    0773
**     OCCURING DURING ICBVSP00 PROCESSING. IF THE ERROR           0773
**     OCCURS IN A VOLUME OR GROUP RECORD, THE OPERATOR IS         0773
**     INFORMED BUT THE SYSTEM CONTINUES. IF THE ERROR OCCURS IS THE CP
**     ASSOCIATION RECORD, MSVC IS DISABLED.                 @Y30LB27
**                                                           @Y30LB27
**     OUTPUT = INFORMATIONAL MESSAGE TO THE SYSTEM OPERATOR INFORMING
**     HIM OF THE STATUS OF MSVC.                            @Y30LB27
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0773
*VSPWTO:                                                           0773
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27*/
VSPWTO   ST    @14,@SA00008                                        0773
*   CNVRTWK1(ONE)=''B;              /* CONVERT ORDER         @Y30LB27*/
         MVI   CNVRTWK1,X'00'                                      0774
*   CNVRTWK1(TWO)=SUSPOP;           /* SET ORDER             @Y30LB27*/
         L     @14,SUSPPTR                                         0775
         MVC   CNVRTWK1+1(1),SUSPOP(@14)                           0775
*   CNVRTWK1(THREE)=MASK0F;         /*                       @ZM30746*/
         MVC   CNVRTWK1+2(1),MASK0F                                0776
*   UNPK(CNVRTHDR,CNVRTWK1);        /*                       @ZM30746*/
         UNPK  CNVRTHDR(5),CNVRTWK1(3)                             0777
*   TR(CNVRTHDR,TRTAB);             /*                       @ZM30746*/
         TR    CNVRTHDR(5),TRTAB                                   0778
*   REG1=ADDR(HDRRQ);               /* POINT MSG RPL         @Y30LB27*/
         LA    REG1,HDRRQ                                          0779
*   CALL ICBVOP00;                  /* INVOKE MSG PROC       @Y30LB27*/
         L     @15,@CV01475                                        0780
         BALR  @14,@15                                             0780
*   MSGID=VSPMSGTB(VSPMSGID);       /* SET INDEX             @Y30LB27*/
         LH    @14,VSPMSGID                                        0781
         ALR   @14,@14                                             0781
         LH    @14,VSPMSGTB-2(@14)                                 0781
         ST    @14,MSGID                                           0781
*   REG1=ADDR(MSGRQ);               /* POINT MSG RPL         @Y30LB27*/
         LA    REG1,MSGRQ                                          0782
*   CALL ICBVOP00;                  /* INVOKE MSG PROC       @Y30LB27*/
         L     @15,@CV01475                                        0783
         BALR  @14,@15                                             0783
*   END VSPWTO;                     /*                       @Y30LB27*/
@EL00008 DS    0H                                                  0784
@EF00008 DS    0H                                                  0784
@ER00008 L     @14,@SA00008                                        0784
         BR    @14                                                 0784
*                                                                  0785
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPCNVRT, CONVERSION ROUTINE                   @Y30LB27
**                                                           @Y30LB27
**     INPUT = CNVRTWK1                                      @Y30LB27
**                                                           @Y30LB27
**     PROCESS = CONVERT CNVRTWK1 TO PRINTABLE FORMAT VIA UNPACK AND
**     TR INSTRUCTIONS.                                      @Y30LB27
**                                                           @Y30LB27
**     OUTPUT = CNVRTWK2                                     @Y30LB27
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0785
*VSPCNVRT:                                                         0785
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPCNVRT ST    @14,12(,@13)                                        0785
*/*********************************************************************
* * VSP CONVERSION ROUTINE                                   @Y30LB27
* * CONVERT ERROR REASON CODES TO PRINTABLE FORMAT AND SET PTRS    0786
* * FOR VINWTO TO CONSTRUCT MSG COMPLETION INF               @Y30LB27
* ********************************************************************/
*                                                                  0786
*   CNVRTWK1(THREE)=MASK0F;         /* SET DUMMY VALUE FOR UNPK    0786
*                                                            @Y30LB27*/
         MVC   CNVRTWK1+2(1),MASK0F                                0786
*   UNPK(CNVRTWK2,CNVRTWK1);        /* UNPACK IT             @Y30LB27*/
         UNPK  CNVRTWK2(5),CNVRTWK1(3)                             0787
*   TR(CNVRTWK2,TRTAB);             /* TRANSLATE IT TO PRINTABLE   0788
*                                      CHARACTERS            @Y30LB27*/
         TR    CNVRTWK2(5),TRTAB                                   0788
*   IF VSPMSGID=MSGVSME THEN        /* VSAM MSG              @Y30LB27*/
         CLC   VSPMSGID(2),@CH00061                                0789
         BNE   @RF00789                                            0789
*     DO;                           /* YES                   @Y30LB27*/
*       MSGLEN2=FOUR;               /* SET CONVERTED LENGTH  @Y30LB27*/
         MVI   MSGLEN2,X'04'                                       0791
*       MSGTEXT2=ADDR(CNVRTWK2);    /* POINT TO CNVRTD AREA  @Y30LB27*/
         LA    @14,CNVRTWK2                                        0792
         STCM  @14,7,MSGTEXT2                                      0792
*     END;                          /*                       @Y30LB27*/
*   ELSE                            /* NO                    @Y30LB27*/
*     DO;                           /* YES                   @Y30LB27*/
         B     @RC00789                                            0794
@RF00789 DS    0H                                                  0795
*       MSGLEN1=FOUR;               /* SET CONVERTED LENGTH  @Y30LB27*/
         MVI   MSGLEN1,X'04'                                       0795
*       MSGTEXT1=ADDR(CNVRTWK2);    /* POINT TO CNVRTD AREA  @Y30LB27*/
         LA    @14,CNVRTWK2                                        0796
         STCM  @14,7,MSGTEXT1                                      0796
*     END;                          /*                       @Y30LB27*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
@EL00009 DS    0H                                                  0798
@EF00009 DS    0H                                                  0798
@ER00009 L     @14,12(,@13)                                        0798
         BR    @14                                                 0798
*   END VSPCNVRT;                   /*                       @Y30LB27*/
         B     @EL00009                                            0799
*                                                                  0800
*/* ******************************************************************
**                                                           @Y30LB27
**     NAME = VSPCNVID, CONVERSION ROUTINE                   @Y30LB27
**                                                           @Y30LB27
**     INPUT = CNVRTWK3                                      @Y30LB27
**                                                           @Y30LB27
**     PROCESS = CONVERT CNVRTWK3 TO PRINTABLE FORMAT VIA UNPACK AND
**     TR INSTRUCTIONS.                                      @Y30LB27
**                                                           @Y30LB27
**     OUTPUT = CNVRTWK4                                     @Y30LB27
**                                                           @Y30LB27
******************************************************************** */
*                                                                  0800
*VSPCNVID:                                                         0800
*   PROC OPTIONS(SAVE(14));         /*                       @ZM30746
*                                                            @ZM30746*/
VSPCNVID ST    @14,12(,@13)                                        0800
*/*********************************************************************
* * VSP CONVERSION ROUTINE                                   @ZM30746
* * CONVERT 5 CHARACTER HOSTID TO MAKE IT PRINTABLE                0801
* ********************************************************************/
*                                                                  0801
*   CNVRTWK3(SIX)=MASK0F;           /* SET DUMMY VALUE FOR UNPK    0801
*                                                            @ZM30746*/
         MVC   CNVRTWK3+5(1),MASK0F                                0801
*   UNPK(CNVRTWK4,CNVRTWK3);        /* UNPACK IT             @ZM30746*/
         UNPK  CNVRTWK4(11),CNVRTWK3(6)                            0802
*   TR(CNVRTWK4,TRTAB);             /* TRANSLATE IT TO PRINTABLE   0803
*                                      CHARACTERS            @ZM30746*/
         TR    CNVRTWK4(11),TRTAB                                  0803
*   MSGLEN1=TEN;                    /* SET CONVERTED LENGTH  @ZM30746*/
         MVI   MSGLEN1,X'0A'                                       0804
*   MSGTEXT1=ADDR(CNVRTWK4);        /* POINT TO CNVRTD AREA  @ZM30746*/
         LA    @14,CNVRTWK4                                        0805
         STCM  @14,7,MSGTEXT1                                      0805
*   RETURN;                         /* RETURN TO CALLER      @ZM30746*/
@EL00010 DS    0H                                                  0806
@EF00010 DS    0H                                                  0806
@ER00010 L     @14,12(,@13)                                        0806
         BR    @14                                                 0806
*   END VSPCNVID;                   /*                       @ZM30746*/
*                                                                  0808
*/* ******************************************************************
**                                                           #Y30LB27
**     NAME = VSPDISAB, DISABLE MSVC                         #Y30LB27
**                                                           #Y30LB27
**     INPUT = NONE                                          #Y30LB27
**                                                           #Y30LB27
**     PROCESS = SET SWITCHES IN MSVC CONTROL BLOCK TO INDICATE    0808
**     THAT THE MSVC IS LOGICALLY DISABLED. ALSO WRITE MESSAGE TO  0808
**     THE OPERATOR THAT MSVC IS LOGICALLY DISABLED.         @ZA09540
**                                                           #Y30LB27
**     OUTPUT = MSVC TASK LOGICALLY DISABLED                 @ZA09540
**                                                           #Y30LB27
******************************************************************** */
*                                                                  0808
*VSPDISAB:                                                         0808
*   PROC OPTIONS(SAVE(14));         /*                       #Y30LB27
*                                                            #Y30LB27*/
VSPDISAB ST    @14,@SA00011                                        0808
*/*********************************************************************
* * VSP DISABLE ROUTINE                                      #Y30LB27
* * IF VSP WAS CALLED BY ICBVIN00 JUST RETURN                #Y30LB27
* ********************************************************************/
*                                                                  0809
*   IF RPLVVIN=ON THEN                                             0809
         TM    RPLVVIN(RPLVPTR),B'00001000'                        0809
         BO    @RT00809                                            0809
*     RETURN;                       /* ICBVIN00 CALL RETURN  #Y30LB27*/
*   VVIFLG0=ON;                     /* DISABLE INVENTORY     @ZA09540*/
*   VVIFLG1=ON;                     /* INTERNAL DISABLE      @ZA09540*/
*   VVIFLG2=ON;                     /* DISABLE JOURNAL       @ZA09540*/
         OI    VVIFLG0(VVIPTR),B'11100000'                         0813
*   VSPMSGID=MSGDISAB;              /* SET UP WTO MESSAGE    @ZA09540*/
         MVC   VSPMSGID(2),@CH00161                                0814
*   CALL VSPWTO;                    /* CALL WTO ROUTINE      @ZA09540*/
         BAL   @14,VSPWTO                                          0815
*   RPLVRETC=FOUR;                  /* SET RETURN CODE       @ZA09540*/
         MVC   RPLVRETC(2,RPLVPTR),@CH00037                        0816
*   RPLRCODE=ERROR;                 /* SET REASON CODE       @ZA09540*/
         MVC   RPLRCODE(2,RPLVPTR),ERROR                           0817
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
@EL00011 DS    0H                                                  0818
@EF00011 DS    0H                                                  0818
@ER00011 L     @14,@SA00011                                        0818
         BR    @14                                                 0818
*   END VSPDISAB;                   /*                       @Y30LB27*/
         B     @EL00011                                            0819
*VSPPATCH:                                                         0820
*   PROC OPTIONS(NOSAVE);           /*                       @Y30LB27
*                                                            @Y30LB27*/
VSPPATCH DS    0H                                                  0821
*/*********************************************************************
* * VSP PATCH AREA                                           @Y30LB27
* ********************************************************************/
*                                                                  0821
*   GEN;                                                           0821
*                                   /*                       @Y30LB27*/
         DS   0F                       ALIGN FOR DC            @Y30LB27
VSPACHA  NOP  *                        LET ASEMBLER CAL DISP   @Y30LB27
         DC   10F'0'                   PATCH AREA              @Y30LB27
VSPACHB  NOP  *                        LET ASEMBLER CAL DISP   @Y30LB27
         DC   10F'0'                   PATCH AREA              @Y30LB27
VSPACHC  NOP  *                        LET ASEMBLER CAL DISP   @Y30LB27
         DC   10F'0'                   PATCH AREA              @Y30LB27
VSPACHD  NOP  *                        LET ASEMBLER CAL DISP   @Y30LB27
         DC   10F'0'                   PATCH AREA              @Y30LB27
*   END VSPPATCH;                   /*                       @Y30LB27*/
@EL00012 DS    0H                                                  0822
@EF00012 DS    0H                                                  0822
@ER00012 BR    @14                                                 0822
*   END ICBVSP00                    /*                       @Y30LB27*/
*                                                                  0823
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEZVVICB)                                       */
*/*%INCLUDE SYSLIB  (IEZRPLV )                                       */
*/*%INCLUDE SYSLIB  (IEZGROUP)                                       */
*/*%INCLUDE SYSLIB  (IEZNGVR )                                       */
*/*%INCLUDE SYSLIB  (IEZGVSNE)                                       */
*/*%INCLUDE SYSLIB  (IEZBASEV)                                       */
*/*%INCLUDE SYSLIB  (IEZCPUID)                                       */
*/*%INCLUDE SYSLIB  (IEZSSC  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCAT)                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IEZMSGRQ)                                       */
*                                                                  0823
*       ;                                                          0823
@DATA    DS    0H
@CH00041 DC    H'2'
@CH00037 DC    H'4'
@CH00086 DC    H'5'
@CH00192 DC    H'7'
@CH00161 DC    H'9'
@CH00372 DC    H'20'
         DS    0F
@SA00001 DS    18F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00004 DS    1F
@SA00005 DS    1F
@SA00006 DS    1F
@SA00007 DS    1F
@SA00011 DS    1F
@SA00008 DS    0F
         DS    1F
@TF00001 DS    F
@TF00002 DS    F
         DS    0F
@CF00043 DC    F'1'
@CH00043 EQU   @CF00043+2
@CF00061 DC    F'3'
@CH00061 EQU   @CF00061+2
@CF00039 DC    F'8'
@CH00039 EQU   @CF00039+2
@CF00111 DC    F'16'
@CF01582 DC    F'1024'
@CF01715 DC    XL4'0000FFFF'
@CV01473 DC    V(ICBVRR00)
@CV01474 DC    V(ICBVIO00)
@CV01475 DC    V(ICBVOP00)
         DS    0D
GROUPPTR DC    AL4(RECBUF)
CPUIDPTR DC    AL4(CPUBUF)
UTILPTR  DS    A
VSPMSGID DS    H
@CB01564 DC    X'0000'
CPUBUF   DS    CL151
RECBUF   DS    CL1024
SAVEID   DS    CL5
SAVMASK  DS    BL2
DISACMSK DS    BL2
IDAREA   DS    CL5
CBASNAMK DS    CL13
         ORG   CBASNAMK
@NM00046 DC    CL5'V    '
@NM00047 DC    X'000000000000'
@NM00048 DC    CL1' '
@NM00049 DC    X'00'
         ORG   CBASNAMK+13
CGRONAMK DS    CL13
         ORG   CGRONAMK
@NM00050 DC    CL12'G'
@NM00051 DC    X'00'
         ORG   CGRONAMK+13
CCPUIDK  DC    CL13'C  CPU ID'
SWITCHES DS    CL1
         ORG   SWITCHES
GVSEXSW  DS    BL1
FLG3SW   EQU   SWITCHES+0
MNTSW    EQU   SWITCHES+0
DLSFSW   EQU   SWITCHES+0
@NM00052 EQU   SWITCHES+0
         ORG   SWITCHES+1
WORK1    DS    CL2
         DS    CL1
MSGRQ    DS    CL32
         ORG   MSGRQ
MSGID    DS    FL4
MSGRPLV  DS    AL4
MSGRLEN  DS    BL1
MSGREPLY DS    AL3
MSGLEN1  DS    BL1
MSGTEXT1 DS    AL3
MSGLEN2  DS    BL1
MSGTEXT2 DS    AL3
MSGLEN3  DS    BL1
MSGTEXT3 DS    AL3
MSGLEN4  DS    BL1
MSGTEXT4 DS    AL3
MSGLEN5  DS    BL1
MSGTEXT5 DS    AL3
         ORG   MSGRQ+32
HDRRQ    DS    CL32
         ORG   HDRRQ
HDRID    DC    F'432'
HDRRPLV  DS    AL4
@NM00053 DC    A(0)
HDRLEN1  DC    AL1(2)
HDRTEXT1 DC    AL3(CNVRTHDR+2)
@NM00054 DC    A(0)
         DC    A(0)
         DC    A(0)
         DC    A(0)
         ORG   HDRRQ+32
CNVRTHDR DS    CL5
         DS    CL3
UCBDELIM DC    X'FFFFFFFF'
MASK0000 DC    X'0000'
MASK8000 DC    X'8000'
MASKFFFF DC    X'FFFF'
         DS    CL2
MASK00FF DC    X'000000FF'
MASK0080 DC    X'00000080'
MASK0F   DC    X'0F'
BINZERO  DC    X'0000000000'
BLANKS   DC    CL10' '
SAVCPUID DS    CL151
PURGCODE DC    X'14'
ASCCODE  DC    X'2C'
DSCCODE  DC    X'2C'
SUSCODE  DC    X'22'
CVOL     DC    CL5'V    '
CNVRTWK1 DS    CL3
CNVRTWK2 DS    CL5
CNVRTWK3 DS    CL6
CNVRTWK4 DS    CL11
MNTMASK  DS    CL2
MNTMASKI DS    CL2
MNTMASKJ DS    CL2
DMNTMASK DS    CL2
EOD      DC    X'020B'
NOREC    DC    X'0208'
ERROR    DC    X'0239'
VSPNAME  DS    CL13
         ORG   VSPNAME
VSPVKEY  DS    CL5
VSPSERNO DS    CL6
@NM00055 DS    CL2
         ORG   @NM00055
@NM00056 DS    CL1
VSPZERO  DS    FL1
         ORG   VSPNAME+13
VSPMASK  DC    X'8000'
         DC    X'4000'
         DC    X'2000'
         DC    X'1000'
         DC    X'0800'
         DC    X'0400'
         DC    X'0200'
         DC    X'0100'
         DC    X'0080'
         DC    X'0040'
         DC    X'0020'
         DC    X'0010'
         DC    X'0008'
         DC    X'0004'
         DC    X'0002'
         DC    X'0001'
VSPMSGTB DC    H'466'
         DC    H'447'
         DC    H'449'
         DC    H'417'
         DC    H'467'
         DC    H'432'
         DC    H'472'
         DC    H'403'
         DC    H'477'
ICBVSP00 CSECT
*                                   /*                       #Y30LB27*/
TRTAB    EQU  *-X'F0'                  UNUSED PORTION          #Y30LB27
         DC   C'0123456789ABCDEF'      TRANSLATION PORTION     #Y30LB27
ICBVSP00 CSECT
*                                  /*                        @Y30LB27*/
VSPTMH   TM   WORK1,X'00'           TARGET OF EXECUTE INST   @Y30LB27
VSPTML   TM   WORK1+1,X'00'         TARGET OF EXECUTE INST   @Y30LB27
ICBVSP00 CSECT
*                                 /*                          @ZA09541*
VSPTM1   TM    DMNTMASK,X'00'
VSPTM2   TM    DMNTMASK+1,X'00'
ICBVSP00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VOLERCNT EQU   @10
NUMCPUS  EQU   @07
SAVRCODE EQU   @06
SAVRETC  EQU   @07
DSMCODE  EQU   @06
SAVEJ    EQU   @09
SAVEI    EQU   @07
J        EQU   @06
I        EQU   @06
PCCAPTR  EQU   @06
RPLVPTR  EQU   @05
VVIPTR   EQU   @08
REG0     EQU   @00
REG1     EQU   @01
REG15    EQU   @15
ASDAR1   EQU   @01
PAIRR1   EQU   @01
SUSPR1   EQU   @01
CVTPTR   EQU   16
VVICB    EQU   0
VVICPUID EQU   VVICB+12
VVIFLGA  EQU   VVICB+15
VVIFLG0  EQU   VVIFLGA
VVIFLG1  EQU   VVIFLGA
VVIFLG2  EQU   VVIFLGA
VVIACBAD EQU   VVICB+16
RPLV     EQU   0
RPLTCBPR EQU   RPLV+8
RPLVVICB EQU   RPLV+12
RPLFLAGA EQU   RPLV+28
RPLFTIME EQU   RPLFLAGA
RPLVVIN  EQU   RPLFLAGA
RPLRCODE EQU   RPLV+32
RPLVRETC EQU   RPLV+34
RPLVSAM  EQU   RPLV+56
RPLVTYP  EQU   RPLVSAM+2
RPLVBUF  EQU   RPLVSAM+32
RPLVKEY  EQU   RPLVSAM+36
RPLVOPT  EQU   RPLVSAM+40
RPLVNEXT EQU   RPLVOPT
RPLVKGE  EQU   RPLVOPT
RPLVUPD  EQU   RPLVOPT+1
RPLVRLN  EQU   RPLVSAM+48
RPLVBLN  EQU   RPLVSAM+52
RPLVUTIL EQU   RPLV+132
GROUP    EQU   0
GRONAME  EQU   GROUP
GROVVGRP EQU   GRONAME+3
GROID    EQU   GRONAME+11
GROFLAGA EQU   GROUP+13
GROTYPE  EQU   GROFLAGA
GROERRTS EQU   GROUP+56
NGVR     EQU   0
NGVRTYPE EQU   NGVR+13
GVSNE    EQU   0
GVSHDR   EQU   GVSNE
GVSNAME  EQU   GVSHDR
GVSID    EQU   GVSNAME+11
GVSFLAGA EQU   GVSHDR+13
GVSTYPE  EQU   GVSFLAGA
GVSEX    EQU   GVSFLAGA+2
GVSESIND EQU   GVSHDR+18
GVSSLOTS EQU   GVSNE+28
GVSVOLID EQU   GVSSLOTS
GVSVOLFL EQU   GVSSLOTS+6
GVSCPUBM EQU   GVSVOLFL
GVSMTNSH EQU   GVSVOLFL+2
BASEV    EQU   0
BASNAME  EQU   BASEV
BASEVKEY EQU   BASNAME
BASSERNO EQU   BASNAME+5
BASID    EQU   BASNAME+11
BASZERO  EQU   BASID+1
BASFLAGA EQU   BASEV+14
BASTYPE  EQU   BASFLAGA
BASDLSF  EQU   BASFLAGA+2
BASGRPV  EQU   BASFLAGA+2
BASGENUS EQU   BASFLAGA+2
BASINAC  EQU   BASFLAGA+2
BASCPUID EQU   BASEV+18
BASRCVYF EQU   BASEV+20
BASSATIA EQU   BASRCVYF
BASMISCF EQU   BASRCVYF+2
BASLIB1  EQU   BASEV+36
BASLID1  EQU   BASLIB1
BASLIB2  EQU   BASEV+49
BASLID2  EQU   BASLIB2
BASKLCPY EQU   BASEV+76
BASCOPID EQU   BASKLCPY+11
BASGROUP EQU   BASEV+180
CPUID    EQU   0
CPUNAME  EQU   CPUID
CPUTYPE  EQU   CPUID+18
CPUASSOC EQU   CPUTYPE
CPUMAP   EQU   CPUID+20
CPUIDREC EQU   CPUMAP
CPUMASK  EQU   CPUMAP+6
CPUPURGE EQU   CPUID+148
ICB2SSCB EQU   0
ICBOPT   EQU   ICB2SSCB+48
ICBFLG   EQU   ICB2SSCB+52
ICBFG1   EQU   ICBFLG
ICBCPUID EQU   ICB2SSCB+112
ICBTRACE EQU   ICB2SSCB+148
LSTASDAS EQU   0
ASDAOPC  EQU   LSTASDAS+4
ASDAFLG  EQU   LSTASDAS+6
ASASSOC  EQU   ASDAFLG
ASDASSOC EQU   ASDAFLG
ASDEINT  EQU   ASDAFLG
ASDMNT   EQU   ASDAFLG
ASDACPU  EQU   LSTASDAS+8
SUSPDAS  EQU   0
SUSPOP   EQU   SUSPDAS+4
SUSPFLG  EQU   SUSPDAS+6
SUPRCON  EQU   SUSPFLG
LSTPAIR  EQU   0
PURGOP   EQU   LSTPAIR+4
PURGFLG  EQU   LSTPAIR+6
PURGMPP  EQU   PURGFLG
PURGHOST EQU   LSTPAIR+8
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTICB   EQU   CVTXTNT2+48
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDCPUOL EQU   CSD+10
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
PCCAVT   EQU   0
PCCAT00P EQU   PCCAVT
PCCA     EQU   0
PCCACPID EQU   PCCA+4
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
NGVRPTR  EQU   GROUPPTR
GVSNEPTR EQU   GROUPPTR
BASEVPTR EQU   GROUPPTR
ASDASPTR EQU   UTILPTR
SUSPPTR  EQU   UTILPTR
PAIRPTR  EQU   UTILPTR
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCSD   EQU   CVTS01+312
CVTPCCAT EQU   CVTS01+416
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
MASKFF   EQU   MASKFFFF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00045 EQU   PCCA+512
PCCACAT  EQU   PCCA+384
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCACPUM EQU   PCCA+376
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCAPSAV EQU   PCCA+24
PCCATQEP EQU   PCCA+20
PCCACAFM EQU   PCCA+18
PCCACPUA EQU   PCCA+16
PCCAPCCA EQU   PCCA
@NM00044 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00043 EQU   CVTFIX+248
@NM00042 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00041 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00040 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00039 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00038 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00037 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00036 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00035 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00034 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00033 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00032 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00031 EQU   PURGFLG
@NM00030 EQU   LSTPAIR+5
PURGLL   EQU   LSTPAIR
@NM00029 EQU   SUSPFLG
SUPPRSW  EQU   SUSPFLG
SUPIMED  EQU   SUSPFLG
@NM00028 EQU   SUSPDAS+5
SUSPLEN  EQU   SUSPDAS
ASDA002  EQU   LSTASDAS+13
@NM00027 EQU   ASDAFLG
@NM00026 EQU   ASDAFLG
ASDA001  EQU   LSTASDAS+5
ASDALEN  EQU   LSTASDAS
ICBLORD  EQU   ICBTRACE+256
ICBOTRC  EQU   ICBTRACE
ICBRESV  EQU   ICB2SSCB+128
ICBVOLST EQU   ICB2SSCB+124
ICBVSCRA EQU   ICB2SSCB+120
ICBSAMP  EQU   ICB2SSCB+118
ICBRESVD EQU   ICB2SSCB+117
ICBFAB   EQU   ICB2SSCB+108
ICBMSSC  EQU   ICB2SSCB+104
ICBRSVP  EQU   ICB2SSCB+100
ICBAEAP  EQU   ICB2SSCB+96
ICBSIOBP EQU   ICB2SSCB+92
ICBIATNA EQU   ICB2SSCB+88
ICBIPRGA EQU   ICB2SSCB+84
ICBSRBP  EQU   ICB2SSCB+80
ICBVVICB EQU   ICB2SSCB+76
ICBVVIC  EQU   ICB2SSCB+72
ICBSIOP  EQU   ICB2SSCB+68
ICBMEP   EQU   ICB2SSCB+64
ICBIORCI EQU   ICB2SSCB+60
ICB2ACTP EQU   ICB2SSCB+56
ICBFG3   EQU   ICBFLG+2
ICBFG2   EQU   ICBFLG+1
@NM00025 EQU   ICBFG1
ICBMSCA  EQU   ICBFG1
ICBMSCMP EQU   ICBFG1
ICBS     EQU   ICBFG1
ICBB     EQU   ICBFG1
ICBV     EQU   ICBFG1
ICBR     EQU   ICBFG1
ICBI     EQU   ICBFG1
ICBNVT   EQU   ICBOPT
ICBVN02P EQU   ICB2SSCB+44
ICBTCB   EQU   ICB2SSCB+40
ICBQHEAD EQU   ICB2SSCB+36
ICBAUCB  EQU   ICB2SSCB+32
ICBPUCB  EQU   ICB2SSCB+28
ICBCOMQ  EQU   ICB2SSCB+24
ICBIOR   EQU   ICB2SSCB+20
ICBCOM   EQU   ICB2SSCB+16
ICBACTV  EQU   ICB2SSCB+12
ICBECB   EQU   ICB2SSCB+8
ICBSSNAM EQU   ICB2SSCB
@NM00024 EQU   CPUID+150
@NM00023 EQU   CPUMAP+5
CPURES2  EQU   CPUTYPE
CPURES1  EQU   CPUTYPE
CPUDNEXT EQU   CPUID+16
CPUINEXT EQU   CPUID+14
@NM00022 EQU   CPUID+13
@NM00021 EQU   BASEV+192
BASXPDT2 EQU   BASEV+188
BASRECOV EQU   BASEV+174
BASDEST  EQU   BASEV+144
BASOWNER EQU   BASEV+134
BASDESCR EQU   BASEV+104
BASDTREM EQU   BASEV+100
BASEXPDT EQU   BASEV+96
BASDLMTD EQU   BASEV+92
BASRES6  EQU   BASEV+89
BASCOPNO EQU   BASCOPID+1
BASCOPBK EQU   BASCOPID
BASCOPSN EQU   BASKLCPY+5
BASCOPV  EQU   BASKLCPY
BASFREXT EQU   BASEV+72
BASLEXT  EQU   BASEV+70
BASFRESP EQU   BASEV+68
@NM00020 EQU   BASEV+65
BASBKLMT EQU   BASEV+64
BASNBKUP EQU   BASEV+63
BASNCOPY EQU   BASEV+62
BASNEXTV EQU   BASEV+56
BASPREV  EQU   BASEV+50
BAS2BIT2 EQU   BASLID2
BAS2BIT1 EQU   BASLID2
BASRES5  EQU   BASLIB2
BASCSN2  EQU   BASEV+37
BAS1BIT2 EQU   BASLID1
BAS1BIT1 EQU   BASLID1
BASRES4  EQU   BASLIB1
BASCSN1  EQU   BASEV+24
BASRES3  EQU   BASMISCF
BASHOLD  EQU   BASMISCF
BASRES8  EQU   BASSATIA
BASVSMIS EQU   BASSATIA
BASIVCPY EQU   BASSATIA
BASIVCRE EQU   BASSATIA
@NM00019 EQU   BASFLAGA+3
BASLAST  EQU   BASFLAGA+3
BASFIRST EQU   BASFLAGA+3
BASREASS EQU   BASFLAGA+3
BASRONLY EQU   BASFLAGA+3
BASDAERA EQU   BASFLAGA+3
BASEXCL  EQU   BASFLAGA+2
BASBIND  EQU   BASFLAGA+2
BASRSTD  EQU   BASFLAGA+2
BASNOCPY EQU   BASFLAGA+2
BASRES2  EQU   BASTYPE
BASBASVR EQU   BASTYPE
BASRES1  EQU   BASTYPE
BASRES7  EQU   BASEV+13
BASBLANK EQU   BASID
GVSMTDSP EQU   GVSSLOTS+18
GVSEXPDT EQU   GVSSLOTS+14
GVSLEXT  EQU   GVSSLOTS+12
GVSFRESP EQU   GVSSLOTS+10
@NM00018 EQU   GVSVOLFL+2
GVSRCFSI EQU   GVSVOLFL+2
@NM00017 EQU   GVSHDR+20
@NM00016 EQU   GVSHDR+17
@NM00015 EQU   GVSFLAGA+2
@NM00014 EQU   GVSTYPE
GVSGVSEX EQU   GVSTYPE
@NM00013 EQU   GVSTYPE
GVSNO    EQU   GVSID+1
GVSRES1  EQU   GVSID
GVSVVGRP EQU   GVSNAME+3
GVSG     EQU   GVSNAME
@NM00012 EQU   NGVR+32
NGVNOVOL EQU   NGVR+30
@NM00011 EQU   NGVR+29
NGVLVOL  EQU   NGVR+23
NGVFVOL  EQU   NGVR+17
@NM00010 EQU   NGVR+15
NGVRES2  EQU   NGVRTYPE+1
NGVHDR   EQU   NGVRTYPE
NGVRES1  EQU   NGVRTYPE
NGVNAME  EQU   NGVR
@NM00009 EQU   GROUP+136
GROADDR  EQU   GROUP+106
GROOWNER EQU   GROUP+96
GRORESSP EQU   GROUP+95
GROCONUS EQU   GROUP+94
GRODESCR EQU   GROUP+64
GROERRTM EQU   GROERRTS+4
GROERRDT EQU   GROERRTS
GRORETPD EQU   GROUP+52
GROFREXT EQU   GROUP+48
GROFRESP EQU   GROUP+44
GROSTRSH EQU   GROUP+40
GROSSPD  EQU   GROUP+38
GROPSPD  EQU   GROUP+36
GRONINAC EQU   GROUP+34
GRONRSTD EQU   GROUP+32
GRONGEN  EQU   GROUP+30
GROPCENT EQU   GROUP+29
GROLSN   EQU   GROUP+23
GROFSN   EQU   GROUP+17
@NM00008 EQU   GROFLAGA+2
GROMSG1  EQU   GROFLAGA+2
GRORETN  EQU   GROFLAGA+2
GRORLSE  EQU   GROFLAGA+2
GRORONLY EQU   GROFLAGA+2
GRODAERA EQU   GROFLAGA+2
GROEXCL  EQU   GROFLAGA+2
GROBIND  EQU   GROFLAGA+2
GRORES1  EQU   GROTYPE
GROGVR   EQU   GROTYPE
GROZERO  EQU   GROID+1
GROBLANK EQU   GROID
GROG     EQU   GRONAME
@NM00007 EQU   RPLVSAM+44
@NM00006 EQU   RPLVOPT
@NM00005 EQU   RPLVOPT
RPLVDIR  EQU   RPLVOPT
RPLVLOC  EQU   RPLVOPT
@NM00004 EQU   RPLVSAM+28
RPLVACB  EQU   RPLVSAM+24
@NM00003 EQU   RPLVSAM+3
@NM00002 EQU   RPLVSAM
@NM00001 EQU   RPLV+42
RPLVDATE EQU   RPLV+38
RPLRMSCC EQU   RPLV+36
RPLVTLEN EQU   RPLV+30
RPLVRES1 EQU   RPLFLAGA+1
RPLVJRNL EQU   RPLFLAGA
RPLJRCVY EQU   RPLFLAGA
RPLVVOP  EQU   RPLFLAGA
RPLVCOMP EQU   RPLFLAGA
RPLVPROG EQU   RPLFLAGA
RPLVPOST EQU   RPLFLAGA
RPLVRSV3 EQU   RPLV+24
RPLVRSV2 EQU   RPLV+20
RPLVRSV1 EQU   RPLV+16
RPLASCBP EQU   RPLTCBPR
RPLVECB  EQU   RPLV+4
RPLVQPTR EQU   RPLV
VVIUNUSD EQU   VVICB+116
VVINUSDC EQU   VVICB+112
VVITPFCH EQU   VVICB+108
VVIDVMEL EQU   VVICB+104
VVIVBSTF EQU   VVICB+100
VVISSOBA EQU   VVICB+96
VVIVSCRA EQU   VVICB+92
VVISTPTB EQU   VVICB+88
VVIDVMTA EQU   VVICB+84
VVIJUCB  EQU   VVICB+80
VVIIUCB  EQU   VVICB+76
VVIRES6  EQU   VVICB+72
VVIRES5  EQU   VVICB+68
VVIRES4  EQU   VVICB+64
VVIUCB   EQU   VVICB+60
VVIVJL   EQU   VVICB+56
VVIVRR   EQU   VVICB+52
VVIQLSPL EQU   VVICB+48
VVIQRPL2 EQU   VVICB+44
VVIQRPL1 EQU   VVICB+40
VVIVTRK  EQU   VVICB+37
VVIOPCD  EQU   VVICB+36
VVIVQMP  EQU   VVICB+32
VVIECB1  EQU   VVICB+28
VVICATAD EQU   VVICB+24
VVIDCBAD EQU   VVICB+20
VVIFLG7  EQU   VVIFLGA
VVIFLG6  EQU   VVIFLGA
VVIFLG5  EQU   VVIFLGA
VVIFLG4  EQU   VVIFLGA
VVIFLG3  EQU   VVIFLGA
VVIALCON EQU   VVICB+14
VVIUCAT  EQU   VVICB+4
VVICID   EQU   VVICB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00159 EQU   @EL00001
@RT00164 EQU   @EL00001
@RT00176 EQU   @EL00001
@RF00280 EQU   @EL00001
@RT00330 EQU   @EL00002
@RF00317 EQU   @RC00304
@RF00346 EQU   @RC00304
@RT00480 EQU   @EL00005
@RT00489 EQU   @EL00005
@RF00551 EQU   @RC00537
@RF00584 EQU   @EL00005
@RC00634 EQU   @EL00007
@RT00647 EQU   @EL00007
@RT00649 EQU   @EL00007
@RT00693 EQU   @EL00007
@RF00756 EQU   @EL00007
@RC00789 EQU   @EL00009
@RT00809 EQU   @EL00011
@ENDDATA EQU   *
         END   ICBVSP00,(C'PLS1706',0701,77355)
