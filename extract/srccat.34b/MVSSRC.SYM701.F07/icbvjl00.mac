         TITLE 'ICBVJL00 MSVC JOURNAL PROCESSING V1.0                  *
                        '
ICBVJL00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICBVJL00  77.049'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @10,@SA00001                                        0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
*                                   /*                       @Y30LB27*/
*/********************************************************************
** ICBVJL00 MAINLINE                                         @Y30LB27
******************************************************************** */
*                                                                  0216
*                                   /*                       @Y30LB27*/
*/********************************************************************
** EST ADDR FOR RPLVS AND CONTROL BLOCK                      @Y30LB27
******************************************************************** */
*                                                                  0216
*   RPLVPTR=REG1;                   /* SAVE RPLV ADDRESS     @Y30LB27*/
         ST    REG1,RPLVPTR                                        0216
*   INITPTR=ADDR(RPLVUTIL);         /* INIT PTR TO ORDER     @Y30LB27
*                                                            @Y30LB27*/
         L     @10,RPLVPTR                                         0217
         LA    INITPTR,RPLVUTIL(,@10)                              0217
*/********************************************************************
** CLEAR REASON RETURN CODES AND SWITCHES                    @Y30LB27
******************************************************************** */
*                                                                  0218
*   RPLRCODE=ZERO;                  /* SET REASON CODE       @Y30LB27*/
         SLR   @06,@06                                             0218
         STH   @06,RPLRCODE(,@10)                                  0218
*   RPLVRETC=ZERO;                  /* SET RETURN CODE       @Y30LB27*/
         STH   @06,RPLVRETC(,@10)                                  0219
*   VVIPTR=RPLVVICB;                /* INIT MSVC CONTROL BLOCK PTR 0220
*                                                            @Y30LB27*/
         L     VVIPTR,RPLVVICB(,@10)                               0220
*   SWITCHES=OFF;                   /* CLEAR THE SWITCHES    @Y30LB27*/
         MVI   SWITCHES+1,X'00'                                    0221
         MVI   SWITCHES,B'00000000'                                0221
*   MSGRQ=''B;                      /* CLEAR MSG AREA        @Y30LB27*/
         XC    MSGRQ(32),MSGRQ                                     0222
*   MSGRPLV=RPLVPTR;                /* SET PTR TO RPLV FOR VOP     0223
*                                                            @Y30LB27
*                                                            @Y30LB27*/
         ST    @10,MSGRPLV                                         0223
*/********************************************************************
** IF INITIALIZATION CALL SET UP WORK AREA                   @Y30LB27
******************************************************************** */
*                                                                  0224
*   IF INITOPCD=INICODE&RPLVVOP=OFF THEN/* IPL, DISABLE OR ENABLE  0224
*                                      CALL FROM ICBVIN00    @Y30LB27*/
         CLI   INITOPCD(INITPTR),X'88'                             0224
         BNE   @RF00224                                            0224
         TM    RPLVVOP(@10),B'00000100'                            0224
         BNZ   @RF00224                                            0224
*     DO;                           /* YES                   @Y30LB27*/
*       IF INIDISAB=ON THEN         /* DISABLE               @ZM30746*/
         TM    INIDISAB(INITPTR),B'00100000'                       0226
         BNO   @RF00226                                            0226
*         CALL VJLFDAD;             /*                       @ZM30746*/
         BAL   @14,VJLFDAD                                         0227
*       ELSE                        /* INIT OR ENABLE        @ZM30746*/
*         CALL VJLINIT;             /* ESTABLISH WORKAREA    @Y30LB27*/
         B     @RC00226                                            0228
@RF00226 BAL   @14,VJLINIT                                         0228
*       RETURN;                     /* AND RETURN            @Y30LB27*/
@EL00001 L     @13,4(,@13)                                         0229
@EF00001 DS    0H                                                  0229
@ER00001 LM    @14,@12,12(@13)                                     0229
         BR    @14                                                 0229
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** IF AN UN-OPENED DCB IS ENCOUNTERED, JOURNAL DATA IS LOST  @Y30LB27
** AN IPL FAILURE HAS OCCURED BUT THE MSVC DISABLE/ENABLE    @Y30LB27
** NOT EXECUTED                                              @Y30LB27
******************************************************************** */
*                                                                  0231
*   IF(RPLJRCVY=ON) THEN            /* DO NOT                @ZA09550*/
@RF00224 L     @10,RPLVPTR                                         0231
         TM    RPLJRCVY(@10),B'00000010'                           0231
         BO    @RT00231                                            0231
*     RETURN;                       /* JOURNAL MESSAGES      @Y30LB27*/
*   IF JRLDISAB=ON THEN             /* LOGICAL DISABLE       @ZA09550*/
         TM    JRLDISAB,B'10000000'                                0233
         BNO   @RF00233                                            0233
*     DO;                           /* YES                   @ZA09550*/
*       VJLMSGID=MSGLSTE;           /* SET MESSAGE ID        @ZA09550*/
         MVC   VJLMSGID(4),@CF00032                                0235
*       CALL VJLWTO;                /* WRITE THE MESSAGE     @ZA09550*/
         BAL   @14,VJLWTO                                          0236
*       RETURN;                     /* GO BACK               @ZA09550*/
         B     @EL00001                                            0237
*     END;                          /* END                   @ZA09550*/
*   IF VVIDCBAD=ZERO×DCBOFOPN=OFF THEN/* JOURNAL CLOSED      @Y30LB27*/
@RF00233 L     @10,VVIDCBAD(,VVIPTR)                               0239
         LTR   @10,@10                                             0239
         BZ    @RT00239                                            0239
         L     @10,DCBPTR(,VVIPTR)                                 0239
         TM    DCBOFOPN+40(@10),B'00010000'                        0239
         BNZ   @RF00239                                            0239
@RT00239 DS    0H                                                  0240
*     DO;                           /* YES ISSUE ERROR MSG   @Y30LB27*/
*       IF INITOPCD=INICODE THEN    /* INIT MSG              @Y30LB27*/
         CLI   INITOPCD(INITPTR),X'88'                             0241
         BE    @RT00241                                            0241
*         RETURN;                   /* JUST RETURN           @Y30LB27*/
*       VJLMSGID=MSGOPNE;           /* SET MSG COMPLETION INDEX    0243
*                                                            @Y30LB27*/
         MVC   VJLMSGID(4),@CF00457                                0243
*       CALL VJLWTO;                /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0244
*       VJLMSGID=MSGLSTE;           /* SET MSG COMPLETION INDEX    0245
*                                                            @Y30LB27*/
         MVC   VJLMSGID(4),@CF00032                                0245
*       CALL VJLWTO;                /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0246
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00001                                            0247
*     END;                          /* END DCB NOT OPEN      @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** SET READ FOR THE CONTROL RECORD                           @Y30LB27
******************************************************************** */
*                                                                  0249
*   CONTAREA=CONTPTR;               /* POINT CONTROL RECORD BUFFER 0249
*                                                            #Y30LB27*/
@RF00239 L     @10,CONTPTR                                         0249
         ST    @10,CONTAREA(,@10)                                  0249
*   REQPTR=ADDR(CONTTTR);           /* REQUEST CONTROL RECORD      0250
*                                                            #Y30LB27*/
         LA    REQPTR,CONTTTR(,@10)                                0250
*   CONTSW=ON;                      /* INDICATE THAT I/O FOR CONTROL
*                                      RECORD                @Y30LB27*/
*   READSW=ON;                      /* READ THE RECORD       @Y30LB27*/
         OI    CONTSW,B'10010000'                                  0252
*   CALL VJLIO;                     /* CALL I/O SEGMENT      @Y30LB27*/
         BAL   @14,VJLIO                                           0253
*   CONTSW=OFF;                     /* CONTROL SWITCH OFF    @Y30LB27*/
*   READSW=OFF;                     /* READ SWITCH OFF       @Y30LB27
*                                                            @Y30LB27*/
         NI    CONTSW,B'01101111'                                  0255
*/********************************************************************
** SYNAD FOR THE CONTROL RECORD RETURN                       @Y30LB27
******************************************************************** */
*                                                                  0256
*   IF RPLVRETC^=ZERO THEN          /* TERMINATING ERROR     @Y30LB27*/
         L     @10,RPLVPTR                                         0256
         LH    @06,RPLVRETC(,@10)                                  0256
         N     @06,@CF02366                                        0256
         LTR   @06,@06                                             0256
         BNZ   @RT00256                                            0256
*     RETURN;                       /* YES RETURN            @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** THE FOLLOWING AREAS MUST BE-REINITIALIZED BECAUSE         @Y30LB27
** ALTHOUGH THE CONTROL RECORD IS THE VJL CONTROL BLOCK I/O  @Y30LB27
** AREAS DIFFER FOR A MULTI-HOST SYSTEM                      @Y30LB27
******************************************************************** */
*                                                                  0258
*   CONTAREA=CONTPTR;               /* POINT CONTROL RECORD BUFFER 0258
*                                                            @Y30LB27*/
         L     @06,CONTPTR                                         0258
         ST    @06,CONTAREA(,@06)                                  0258
*   ORDRAREA=DATAPTR;               /* POINT TO RECORD BUFFER      0259
*                                                            @Y30LB27*/
         L     @09,DATAPTR                                         0259
         ST    @09,ORDRAREA(,@06)                                  0259
*   MSGAREA=DATAPTR;                /* POINT TO RECORD BUFFER      0260
*                                                            @Y30LB27
*                                                            @Y30LB27*/
         ST    @09,MSGAREA(,@06)                                   0260
*/********************************************************************
** JOURNALING LIBRARIAN MESSAGE - BUILD INTERNAL ORDER RPL   @Y30LB27
******************************************************************** */
*                                                                  0261
*   IF RPLVVOP=ON THEN                                             0261
         TM    RPLVVOP(@10),B'00000100'                            0261
         BNO   @RF00261                                            0261
*     DO;                           /* JOURNALLING A MSG     @Y30LB27*/
*       MSGSW=ON;                   /* INDICATE I/O FOR MSG RECORDS
*                                                            @Y30LB27*/
         OI    MSGSW,B'00000100'                                   0263
*       MSGLEN=RPLVRLN+THIRTEN;     /* CONSTRUCT INTERNAL REQUEST  0264
*                                      LIST FOR JOURNALING MSGS    0264
*                                                            @ZA16130*/
         L     @09,RPLVRLN(,@10)                                   0264
         LA    @08,13                                              0264
         ALR   @08,@09                                             0264
         ST    @08,MSGLEN                                          0264
*       MSG(ONE:RPLVRLN)=MSGBUF(ONE:RPLVRLN);/* SET THE LENGTH       */
         BCTR  @09,0                                               0265
         L     @10,RPLVBUF(,@10)                                   0265
         EX    @09,@SM02368                                        0265
*       GEN(STIDP SYSCPU);          /* GET CPUID             @ZA16130*/
         STIDP SYSCPU
*       MSGCPUID=CPUIDNUM;          /* STORE CPUID           @ZA16130*/
         MVC   MSGCPUID(5),CPUIDNUM                                0267
*       GEN(TIME DEC);              /* GET TIME              @ZA16130*/
         TIME DEC
*       MSGTME=REG0;                /* STORE TOD             @ZA16130*/
         ST    REG0,MSGTME                                         0269
*       MOVELEN=MSGLEN;             /* SET THE MSG LENGTH    @Y30LB27*/
         L     @10,MSGLEN                                          0270
         ST    @10,MOVELEN                                         0270
*       ORDRPTR=ADDR(MSGLST);       /* SET THE REQUEST PTR TO THE MSG
*                                      REQUEST LIST          @Y30LB27*/
         LA    @10,MSGLST                                          0271
         ST    @10,ORDRPTR                                         0271
*       REQPTR=ADDR(MSGTTR);        /* SET I/O REQUEST FOR MSG BLOCKS
*                                                            @Y30LB27*/
         L     REQPTR,CONTPTR                                      0272
         LA    REQPTR,MSGTTR(,REQPTR)                              0272
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** NO JOURNALING ORDER PARAMETER LIST                        @Y30LB27
******************************************************************** */
*                                                                  0274
*   ELSE                                                           0274
*     DO;                           /*                       @Y30LB27*/
         B     @RC00261                                            0274
@RF00261 DS    0H                                                  0275
*       ORDRSW=ON;                  /* INDICATE I/O FOR DATA RECORDS
*                                                            @Y30LB27*/
         OI    ORDRSW,B'00001000'                                  0275
*       ORDRPTR=ADDR(RPLVUTIL);     /* JOURNAL THE MSC ORDER @Y30LB27*/
         L     @10,RPLVPTR                                         0276
         LA    @09,RPLVUTIL(,@10)                                  0276
         ST    @09,ORDRPTR                                         0276
*       MOVELEN=RPLVTLEN-LENGTH(RPLV);/* SET ORDR LENGTH     @Y30LB27*/
         LH    @10,RPLVTLEN(,@10)                                  0277
         SL    @10,@CF02341                                        0277
         ST    @10,MOVELEN                                         0277
*       REQPTR=ADDR(ORDRTTR);       /* POINT I/O TO DATA BLOCKS    0278
*                                                            @Y30LB27*/
         L     REQPTR,CONTPTR                                      0278
         LA    REQPTR,ORDRTTR(,REQPTR)                             0278
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** WILL REQUEST FIT CURRENT DATA BLOCK                       @Y30LB27
** IF YES READ CURRENT DATA BLOCK                            @Y30LB27
******************************************************************** */
*                                                                  0280
*   IF MOVELEN<=REQREM-SIXTEEN THEN /* CURRENT REQUEST FIT CURRENT 0280
*                                      DATA BLOCK            @ZA13484*/
@RC00261 LH    @10,REQREM(,REQPTR)                                 0280
         SL    @10,@CF00099                                        0280
         C     @10,MOVELEN                                         0280
         BL    @RF00280                                            0280
*     DO;                           /* USE CURRENT BLOCK     @Y30LB27*/
*       READSW=ON;                  /* INDICATE READ FOR CURRENT DATA
*                                      BLOCK                 @Y30LB27*/
         OI    READSW,B'10000000'                                  0282
*       CALL VJLIO;                 /* ALL I/O PROCESSOR TO SET UP 0283
*                                      NEXT BLOCK            @Y30LB27*/
         BAL   @14,VJLIO                                           0283
*       READSW=OFF;                 /* TURN READ SW OFF      @Y30LB27*/
         NI    READSW,B'01111111'                                  0284
*       IF RPLVRETC^=ZERO THEN      /* JOURNAL ERROR - TRKS EXHAUSTED
*                                                            @Y30LB27*/
         L     @10,RPLVPTR                                         0285
         LH    @10,RPLVRETC(,@10)                                  0285
         N     @10,@CF02366                                        0285
         LTR   @10,@10                                             0285
         BNZ   @RT00285                                            0285
*         RETURN;                   /* RETURN TO CALLER      @Y30LB27*/
*     END;                          /* END READ OF CURRENT BLOCK   0287
*                                                            @Y30LB27*/
*/********************************************************************
** IF NO SET UP NEXT DATA BLOCK                              @Y30LB27
******************************************************************** */
*                                                                  0288
*   ELSE                            /*                       @Y30LB27*/
*     DO;                           /* NO NEW BLOCK REQD     @Y30LB27*/
         B     @RC00280                                            0288
@RF00280 DS    0H                                                  0289
*       CALL VJLCNVRT;              /* CONVERT NEXT TTR TO BE USED 0289
*                                                            @Y30LB27*/
         BAL   @14,VJLCNVRT                                        0289
*       IF RPLVRETC^=ZERO THEN      /* JRNL TRKS EXHAUSTED   @Y30LB27*/
         L     @10,RPLVPTR                                         0290
         LH    @10,RPLVRETC(,@10)                                  0290
         N     @10,@CF02366                                        0290
         LTR   @10,@10                                             0290
         BNZ   @RT00290                                            0290
*         RETURN;                   /* RETURN TO CALLER      @Y30LB27*/
*       REQREM=MAXREC;              /* SET NUMBER OF BYTES REMAING 0292
*                                                            @Y30LB27*/
         MVC   REQREM(2,REQPTR),@CH02038                           0292
*       REQNXT=ONE;                 /* SET DISPLACEMENT      @Y30LB27*/
         MVC   REQNXT(2,REQPTR),@CH00043                           0293
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** CALL I/O PROCESSOR AND MOVE ORDER TO DATA BLOCK           @Y30LB27
******************************************************************** */
*                                                                  0295
*   JRNLPTR=ADDR(DATAD(REQNXT));    /* SET LIST PTR          @YM02198*/
@RC00280 LH    @10,REQNXT(,REQPTR)                                 0295
         L     JRNLPTR,DATAPTR                                     0295
         LA    JRNLPTR,DATAD-1(@10,JRNLPTR)                        0295
*   JRNLLEN=MOVELEN+TWELVE;         /* SET LENGTH            @ZA13484*/
         LA    @10,12                                              0296
         AL    @10,MOVELEN                                         0296
         STCM  @10,15,JRNLLEN(JRNLPTR)                             0296
*   JRNLCODE=RPLRMSCC;              /* SET REASON CODE       @OZ09545*/
         L     @10,RPLVPTR                                         0297
         MVC   JRNLCODE(2,JRNLPTR),RPLRMSCC(@10)                   0297
*   JRNLFLGS=ZERO;                  /* CLEAR FLAGS           @YM02198*/
         SLR   @03,@03                                             0298
         STCM  @03,3,JRNLFLGS(JRNLPTR)                             0298
*   JRNLDATE=RPLVDATE;              /* SET CURRENT DATE      @ZA13484*/
         MVC   JRNLDATE(4,JRNLPTR),RPLVDATE(@10)                   0299
*   JRNLDTFG=ON;                    /* DATE PRESENT          @ZA13484*/
         OI    JRNLDTFG(JRNLPTR),B'01000000'                       0300
*   IF RPLFTIME=ON THEN             /* FIRST CALL            @YM02198*/
         TM    RPLFTIME(@10),B'10000000'                           0301
         BNO   @RF00301                                            0301
*     JRNLFTIM=ON;                  /* SET RECOVERY FLAG     @YM02198*/
         OI    JRNLFTIM(JRNLPTR),B'10000000'                       0302
*   JRNLUTIL(ONE:ONE+MOVELEN-ONE)=ORDRLST(ONE:MOVELEN-ONE);/*      0303
*                                                            @YM02198*/
@RF00301 L     @10,MOVELEN                                         0303
         LR    @03,@10                                             0303
         BCTR  @03,0                                               0303
         L     @09,ORDRPTR                                         0303
         EX    @03,@SM02374                                        0303
*   REQREM=REQREM-MOVELEN-TWELVE;   /* DECR BYTES REMAINING  @ZA13484*/
         LA    @03,12                                              0304
         LH    @09,REQREM(,REQPTR)                                 0304
         SLR   @09,@10                                             0304
         SLR   @09,@03                                             0304
         STH   @09,REQREM(,REQPTR)                                 0304
*   REQNXT=REQNXT+MOVELEN+TWELVE;   /* INCR DISPLACEMENT     @ZA13484*/
         AH    @10,REQNXT(,REQPTR)                                 0305
         ALR   @10,@03                                             0305
         STH   @10,REQNXT(,REQPTR)                                 0305
*   JRNLPTR=ADDR(DATAD(REQNXT));    /* SET LIST PTR          @YM02198*/
         L     JRNLPTR,DATAPTR                                     0306
         LA    JRNLPTR,DATAD-1(@10,JRNLPTR)                        0306
*   IF REQREM=>FOUR THEN            /* CAN END OF BLOCK BE SET     0307
*                                                            @YM02198*/
         C     @09,@CF00037                                        0307
         BL    @RF00307                                            0307
*     JRNLLEN=ZERO;                 /* SKIP REST OF BLOCK    @YM02198
*                                                            @Y30LB27*/
         SLR   @10,@10                                             0308
         STCM  @10,15,JRNLLEN(JRNLPTR)                             0308
*/********************************************************************
** INDICATE WRITE - CALL I/O PROCESSOR TO WRITE REQUEST BLOCK@Y30LB27
******************************************************************** */
*                                                                  0309
*   WRITESW=ON;                     /* INDICATE A WRITE OPERATION  0309
*                                                            @Y30LB27*/
@RF00307 OI    WRITESW,B'01000000'                                 0309
*   CALL VJLIO;                     /* CALL THE I/O PROCESSOR@Y30LB27
*                                                            @Y30LB27*/
         BAL   @14,VJLIO                                           0310
*/********************************************************************
** SET UP TO RE-WRITE CONTROL RECORD                         @Y30LB27
******************************************************************** */
*                                                                  0311
*   REQPTR=ADDR(CONTTTR);           /* POINT TO CONTROL TTR  @Y30LB27*/
         L     REQPTR,CONTPTR                                      0311
         LA    REQPTR,CONTTTR(,REQPTR)                             0311
*   CONTSW=ON;                      /* PROCESS CONTROL RECORD@Y30LB27*/
*   WRITDATA=ON;                    /* INDICATE ONLY A WRITE DATA  0313
*                                      REQD                  @Y30LB27*/
*   ORDRSW=OFF;                     /* FORGET DATA BLOCKS    @Y30LB27*/
*   MSGSW=OFF;                      /* OR MSG BLOCKS         @Y30LB27*/
         OI    CONTSW,B'00110000'                                  0315
         NI    ORDRSW,B'11110011'                                  0315
*   CALL VJLIO;                     /* CALL THE I/O SEGMENT  @Y30LB27*/
         BAL   @14,VJLIO                                           0316
*   CONTSW=OFF;                     /* PROCESS CONTROL RECORD@Y30LB27*/
*   WRITDATA=OFF;                   /* INDICATE ONLY A WRITE DATA  0318
*                                      REQD                  @Y30LB27*/
         NI    CONTSW,B'11001111'                                  0318
*   RETURN;                         /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00001                                            0319
*                                                                  0320
*/* ******************************************************************
**                                                                 0320
**     NAME = VJLINIT                                              0320
**                                                                 0320
**     INPUT = NONE                                                0320
**                                                                 0320
**     PROCESS = VJLINIT DOES THE INITIALIZATION FOR ICBVJL00. STORAGE
**     FOR AN IOB, ECB, CCW AREA, AND I/O AREAS ARE                0320
**     OBTAINED. THE AREAS ARE INITIALIZED. AN OBTAIN IS           0320
**     ISSUED FOR THE FMT1 TO DETERMINE IF THE JOURNAL HAS BEEN    0320
**     INITIALIZED WITH THE REQUIRED CONTROL RECORD. IF NOT, THE CONTRO
**     RECORD IS CONSTRUCTED AND WRITTEN TO THE DATA SET, THE DATA SET
**     IS THEN CLOSED AND RE-OPENED TO UPDATE THE VTOC.            0320
**                                                                 0320
**     OUTPUT = JOURNAL CONTROL RECORD IS FORMATTED AND WRITTEN TO THE
**     DATA SET IF REQUIRED AND THE VJL WORK AREA IS INITIALIZED.  0320
**                                                                 0320
******************************************************************** */
*                                                                  0320
*VJLINIT:                                                          0320
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VJLINIT  ST    @14,@SA00002                                        0320
*/********************************************************************
** INITIALIZATION SEGMENT                                    @Y30LB27
** IF IPL GET CORE FOR WORKAREA AND INITIALIZE               @Y30LB27
** IF ENABLE - RECONSTRUCT CONTROL RECORD IF REQUIRED        @Y30LB27
******************************************************************** */
*                                                                  0321
*   IF VVIVJL=ZERO THEN                                            0321
         L     @10,VVIVJL(,VVIPTR)                                 0321
         LTR   @10,@10                                             0321
         BNZ   @RF00321                                            0321
*     DO                            /* IPL CALL              @Y30LB27*/
*           GETMNLEN=LENGTH(IOBSTDRD)+LENGTH(IOBEXTEN)/* IOB @X04AC27*/
*           +LENGTH(ECB)            /* ECB                   @Y30LB27*/
*           +FOUR                   /* DWD                   @Y30LB27*/
*           +LENGTH(CCWCHN)         /* SEARCH CHN            @Y30LB27*/
*           +LENGTH(CONTREC)        /* CONTROL REC@Y30LB27           */
*           +LENGTH(DATAREC);       /* DATA REC              @Y30LB27*/
         LA    @10,2152                                            0322
         ST    @10,GETMNLEN                                        0322
*       REG1=ADDR(GETMNLST);        /* ADDR OF GETMAIN LIST  @Y30LB27
*                                                            @Y30LB27*/
         LA    REG1,GETMNLST                                       0323
*/********************************************************************
** GET REQUIRED STORAGE                                      @Y30LB27
******************************************************************** */
*                                                                  0324
*LGETM1:                                                           0324
*       GEN(GETMAIN EC,MF=(E,(1))); /* GET THE STORAGE       @Y30LB27*/
LGETM1   GETMAIN EC,MF=(E,(1))
*       IF REG15^=ZERO THEN         /* STORAGE OBTAINED      @Y30LB27*/
         LTR   REG15,REG15                                         0325
         BZ    @RF00325                                            0325
*         DO;                       /* NO ISSUE I/O ERROR    @Y30LB27*/
*           VJLMSGID=MSGSTGE;       /* MSG COMP ID           @Y30LB27*/
         MVC   VJLMSGID(4),@CF00043                                0327
*           CALL VJLWTO;            /* ISSUE ERROR MSG       @Y30LB27*/
         BAL   @14,VJLWTO                                          0328
*           RETURN;                 /* RETURN TO CALLER      @Y30LB27*/
@EL00002 DS    0H                                                  0329
@EF00002 DS    0H                                                  0329
@ER00002 L     @14,@SA00002                                        0329
         BR    @14                                                 0329
*         END;                      /*                       @Y30LB27*/
*       VVIVJL=STGADDR;             /* SET WORKAREA PTR      @X04AC27*/
@RF00325 L     @10,STGADDR                                         0331
         ST    @10,VVIVJL(,VVIPTR)                                 0331
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** IF ENABLE STORAGE ALREADY OBTAINED                        @Y30LB27
******************************************************************** */
*                                                                  0333
*   ECBPTR=VVIVJL;                  /* SET ECB PTR           @ZA09550*/
@RF00321 L     @10,VVIVJL(,VVIPTR)                                 0333
         ST    @10,ECBPTR                                          0333
*   CHNPTR=ECBPTR+LENGTH(ECB);      /* SET CHAIN PTR         @Y30LB27*/
         LA    @06,4                                               0334
         LR    CHNPTR,@10                                          0334
         ALR   CHNPTR,@06                                          0334
*   IOBCHN=''B;                     /* CLEAR CHAIN AREA      @Y30LB27
*                                                            @Y30LB27*/
         SLR   @03,@03                                             0335
         ST    @03,IOBCHN(,CHNPTR)                                 0335
*/********************************************************************
** INIT. IOB - WILL BE COMPLETED AS OTHER AREAS ARE          @Y30LB27
** ESTABLISHED                                               @Y30LB27
******************************************************************** */
*                                                                  0336
*   IOBSTPTR=CHNPTR+LENGTH(IOBCHN); /* INITIALIZE IOB PTR    @Y30LB27*/
         ALR   @06,CHNPTR                                          0336
         ST    @06,IOBSTPTR                                        0336
*   IOBSTDRD=''B;                   /* CLEAR IOB PROPER      @Y30LB27*/
         XC    IOBSTDRD(32,@06),IOBSTDRD(@06)                      0337
*   IOBEXTEN=''B;                   /* CLEAR IOB EXTENTION   @Y30LB27*/
         XC    IOBEXTEN(8,@06),IOBEXTEN(@06)                       0338
*   IOBFLAG1=COMDCHN;               /* INDICATE COMMAND CHAINING IN
*                                      IOB                   @Y30LB27*/
         MVC   IOBFLAG1(1,@06),COMDCHN                             0339
*   IOBECBPB=ADDR(ECB);             /* SET ECB ADDR IN IOB   @Y30LB27*/
         STCM  @10,7,IOBECBPB(@06)                                 0340
*   IOBDCBPT=VVIDCBAD;              /* SET DCB ADDR IN IOB   @Y30LB27
*                                                            @Y30LB27*/
         L     @10,VVIDCBAD(,VVIPTR)                               0341
         ST    @10,IOBDCBPT(,@06)                                  0341
*/********************************************************************
** INIT. CCW CHAINS                                          @Y30LB27
******************************************************************** */
*                                                                  0342
*   CCWPTR=IOBSTPTR+LENGTH(IOBSTDRD)/* SET ECB ADDR PTR      @Y30LB27*/
*       +LENGTH(IOBEXTEN);          /*                       @Y30LB27*/
         LA    @10,40                                              0342
         LR    @09,@06                                             0342
         ALR   @09,@10                                             0342
         ST    @09,CCWPTR                                          0342
*   CCWCHN=CCWMODEL;                /* INITIALIZE CCW CHAIN  @Y30LB27*/
         MVC   CCWCHN(40,@09),CCWMODEL                             0343
*   RPSADDR=ADDR(RPSAREA);          /* SET SECTOR BUFFER ADDR@Y30LB27*/
         LA    @08,RPSAREA                                         0344
         STCM  @08,7,RPSADDR(@09)                                  0344
*   SRCHADDR=ADDR(IOBCC);           /* INIT SEARCH CCW WITH SEARCH 0345
*                                      ADDR                  @Y30LB27*/
         LA    @08,IOBCC(,@06)                                     0345
         STCM  @08,7,SRCHADDR(@09)                                 0345
*   TICADDR=ADDR(SRCHCCW);          /* INIT TIC ADDR         @Y30LB27*/
         LA    @08,SRCHCCW(,@09)                                   0346
         STCM  @08,7,TICADDR(@09)                                  0346
*   CONTPTR=CCWPTR+LENGTH(CCWCHN);  /* SET CONTROL RECORD PTR      0347
*                                                            @Y30LB27*/
         LR    @08,@09                                             0347
         ALR   @08,@10                                             0347
         ST    @08,CONTPTR                                         0347
*   DATAPTR=CONTPTR+LENGTH(CONTREC);/* SET DATA RECORD BUFFER PTR  0348
*                                                            @Y30LB27
*                                                            @Y30LB27*/
         AL    @08,@CF01998                                        0348
         ST    @08,DATAPTR                                         0348
*/********************************************************************
** IF JOURNAL IS NOT ON A ROTATIONAL POSITION SENSING DEVICE CCW CHAIN
** MUST BE MODIFIED                                          @Y30LB27
******************************************************************** */
*                                                                  0349
*   DEBDAPTR=ADDR(DEBBASND);        /* UCB PTR BASED ON DEB  @Y30LB27*/
         AL    @10,DCBPTR(,VVIPTR)                                 0349
         L     @10,DEBPTR(,@10)                                    0349
         LA    @10,DEBBASND(,@10)                                  0349
         ST    @10,DEBDAPTR                                        0349
*   IF UCB2OPT3=ON THEN             /* DOES JVL HAVE AN RPS DEVICE 0350
*                                                            @Y30LB27*/
         L     @10,UCBPTR(,@10)                                    0350
         TM    UCB2OPT3(@10),B'00010000'                           0350
         BNO   @RF00350                                            0350
*     IOBSTART=CCWPTR;              /* SET CCW CHAIN ADDR IN IOB   0351
*                                                            @Y30LB27*/
         ST    @09,IOBSTART(,@06)                                  0351
*   ELSE                            /* NON RPS               @Y30LB27*/
*     IOBSTART=CCWPTR+EIGHT;        /* BYPASS RPS CCW        @Y30LB27
*                                                            @Y30LB27*/
         B     @RC00350                                            0352
@RF00350 LA    @10,8                                               0352
         AL    @10,CCWPTR                                          0352
         L     @06,IOBSTPTR                                        0352
         ST    @10,IOBSTART(,@06)                                  0352
*/********************************************************************
** SET UP FOR CONTROL RECORD INITIALIZATION                  @Y30LB27
******************************************************************** */
*                                                                  0353
*   DO I=ONE TO MAXREC BY 256;      /* ZERO CONTROL RECORD   @ZM30725*/
@RC00350 LA    I,1                                                 0353
@DL00353 DS    0H                                                  0354
*     CONTPTR->DATAD(I:I+255)=''B;  /* BUFFER                @ZM30725*/
         L     @10,CONTPTR                                         0354
         ALR   @10,I                                               0354
         XC    DATAD-1(256,@10),DATAD-1(@10)                       0354
*   END;                            /* END ZERO CONTROL RECORD     0355
*                                                            @ZM30725*/
         AL    I,@CF01944                                          0355
         C     I,@CF02038                                          0355
         BNH   @DL00353                                            0355
*   DO I=ONE TO MAXREC BY 256;      /* ZERO CONTROL RECORD   @ZM30725*/
         LA    I,1                                                 0356
@DL00356 DS    0H                                                  0357
*     DATAPTR->DATAD(I:I+255)=''B;  /* BUFFER                @ZM30725*/
         L     @10,DATAPTR                                         0357
         ALR   @10,I                                               0357
         XC    DATAD-1(256,@10),DATAD-1(@10)                       0357
*   END;                            /* END ZERO DATA RECORD  @ZM30725*/
         AL    I,@CF01944                                          0358
         C     I,@CF02038                                          0358
         BNH   @DL00356                                            0358
*   CONTSW=ON;                      /* INDICATE CONTROL RECORD I/O 0359
*                                                            @Y30LB27*/
         OI    CONTSW,B'00010000'                                  0359
*   CONTAREA=CONTPTR;               /* POINT CONTROL RECORD BUFFER 0360
*                                                            @Y30LB27*/
         L     @10,CONTPTR                                         0360
         ST    @10,CONTAREA(,@10)                                  0360
*/********************************************************************
** CONVERT TTR TO ABSOLUTE DISK AND SECTOR ADDRESSES         @Y30LB27
******************************************************************** */
*                                                                  0361
*   JRLDISAB=OFF;                   /* JOURNAL ENABLED       @ZA09550*/
         NI    JRLDISAB,B'01111111'                                0361
*   CONTTTR=ZERO;                   /* CONTROL RECORD IS ALWAYS ONE
*                                                            @Y30LB27*/
         SLR   @09,@09                                             0362
         ST    @09,CONTTTR(,@10)                                   0362
*   CONTR=ONE;                      /* SET RECORD ADDR       @Y30LB27*/
         MVI   CONTR(@10),X'01'                                    0363
*   REQPTR=ADDR(CONTTTR);           /* POINT TO CONTROL RECORD TTR 0364
*                                                            @Y30LB27*/
         LA    REQPTR,CONTTTR(,@10)                                0364
*   CALL VJLCNVRT;                  /* GET ABSOLUTE AND RPS ADDRESSES
*                                                            @Y30LB27*/
         BAL   @14,VJLCNVRT                                        0365
*/********************************************************************
** SET UP TO PICK UP FORMAT 1 DSCB                           @Y30LB27
******************************************************************** */
*                                                                  0366
*   DO I=ONE TO EIGHT WHILE(VVIUCAT(I)^=BLANK);/* GET USER CAT LENGTH
*                                                            @Y30LB27*/
         LA    I,1                                                 0366
@DL00366 LR    @10,VVIPTR                                          0366
         ALR   @10,I                                               0366
         CLI   VVIUCAT-1(@10),C' '                                 0366
         BE    @DC00366                                            0366
*   END;                            /*                       @Y30LB27*/
         AL    I,@CF00043                                          0367
         C     I,@CF00039                                          0367
         BNH   @DL00366                                            0367
@DC00366 DS    0H                                                  0368
*   I=I-ONE;                        /* DECR COUNT BY 1, SCAN TO BLANK
*                                                            @Y30LB27*/
         BCTR  I,0                                                 0368
*   DSCBJRNL='';                    /* CLEAR FMT 1           @Y30LB27*/
         MVI   DSCBJRNL,C' '                                       0369
         MVC   DSCBJRNL+1(43),DSCBJRNL                             0369
*   DSCBJRNL(ONE:I)=VVIUCAT;        /* SET UCAT NAME         @Y30LB27*/
         LR    @10,I                                               0370
         BCTR  @10,0                                               0370
         EX    @10,@SM02377                                        0370
*   DSCBJRNL(I+ONE)=PERIOD;         /* SET DELIMTER          @Y30LB27*/
         LA    @10,DSCBJRNL(I)                                     0371
         MVI   0(@10),C'.'                                         0371
*   DSCBJRNL(I+TWO:I+NINE)=CMSVCJRN;/* SET JOURNAL NAME      @Y30LB27*/
         LA    @10,DSCBJRNL+1(I)                                   0372
         MVC   0(8,@10),CMSVCJRN                                   0372
*   JRNLVOLI=UCBVOLI;               /* VOLID                 @Y30LB27*/
         L     @10,DEBDAPTR                                        0373
         L     @10,UCBPTR(,@10)                                    0373
         MVC   JRNLVOLI(6),UCBVOLI(@10)                            0373
*   OBTNWORK=''B;                   /* CLEAR OBTAIN WORK AREA@Y30LB27*/
         XC    OBTNWORK(148),OBTNWORK                              0374
*/********************************************************************
** ISSUE THE OBTAIN FOR THE JOURNAL DSCB                     @Y30LB27
******************************************************************** */
*                                                                  0375
*   REG1=ADDR(CAMLST);              /* SET PARAMETER LIST    @Y30LB27*/
         LA    REG1,CAMLST                                         0375
*LOBTN1:                                                           0376
*   GEN CODE REFS(DSCBJRNL,JRNLVOLI);                              0376
LOBTN1   DS    0H                                                  0376
*                                           /*               @Y30LB27*/
    OBTAIN (REG1)                      GET FORMAT 1            @Y30LB27
*   IF REG15^=ZERO THEN             /* OPEN ERROR            @Y30LB27*/
         LTR   REG15,REG15                                         0377
         BZ    @RF00377                                            0377
*     DO;                           /* YES                   @Y30LB27*/
*       VJLMSGID=MSGOBNE;           /* INDICATE OPEN ERROR   @Y30LB27*/
         MVC   VJLMSGID(4),@CF00041                                0379
*       MSGLEN1=SEVNTEEN;           /* SET LENGTH            @Y30LB27*/
         MVI   MSGLEN1,X'11'                                       0380
*       MSGTEXT1=ADDR(DSCBJRNL);    /* SET ADDR              @Y30LB27*/
         LA    @10,DSCBJRNL                                        0381
         STCM  @10,7,MSGTEXT1                                      0381
*       CNVRTWK1(ONE:TWO)=REG15;    /* SET ADDR IN CONVERT AREA    0382
*                                                            @Y30LB27*/
         STCM  REG15,3,CNVRTWK1                                    0382
*       CNVRTWK1(THREE)=MASK0F;     /* SET SIGN              @Y30LB27*/
         MVC   CNVRTWK1+2(1),MASK0F                                0383
*       UNPK(CNVRTWK2,CNVRTWK1);    /* UNPACK IT             @Y30LB27*/
         UNPK  CNVRTWK2(5),CNVRTWK1(3)                             0384
*       TR(CNVRTWK2,TRTAB);         /* TRANSLATE IT          @Y30LB27*/
         TR    CNVRTWK2(5),TRTAB                                   0385
*       MSGLEN2=FOUR;               /* SET LENGTH            @Y30LB27*/
         MVI   MSGLEN2,X'04'                                       0386
*       MSGTEXT2=ADDR(CNVRTWK2);    /* POINT TO CONVERT VALUE      0387
*                                                            @Y30LB27*/
         LA    @10,CNVRTWK2                                        0387
         STCM  @10,7,MSGTEXT2                                      0387
*       CALL VJLWTO;                /* ISSUE ERROR MSG       @Y30LB27*/
         BAL   @14,VJLWTO                                          0388
*       RETURN;                     /* RETURN TO CALLER      @Y30LB27*/
         B     @EL00002                                            0389
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** LAST BLOCK WRITTEN INDICATES NEW JOURNAL                  @Y30LB27
** CONSTRUCT CONTROL RECORD, WRITE IT, CLOSE, AND RE-OPEN DCB TO UPDATE
** DSCB                                                      @Y30LB27
******************************************************************** */
*                                                                  0391
*   IF OBTNWORK(FIFTFIVE:FIFTSEVN)=BINZERO THEN/* NULL DATA SET    0391
*                                                            @Y30LB27*/
@RF00377 CLC   OBTNWORK+54(3),BINZERO                              0391
         BNE   @RF00391                                            0391
*     DO;                           /* YES WRITE CONTROL RECORD    0392
*                                                            @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** 4 TRACKS IS MINIMUM JOURNAL INTIALIZATION BUT IT IS NOT A WORKABLE
** JOURNAL, AT LEAST 1 CYLINDER WORKING JOURNAL IS REQUIRED  @Y30LB27
******************************************************************** */
*                                                                  0393
*       VJLNMTRK=ZERO;              /* CLEAR NUMBER OF TRKS  @ZM30746*/
         SLR   @10,@10                                             0393
         STH   @10,VJLNMTRK                                        0393
*       TEMPPTR=DEBDAPTR;           /* SET PTR TO DEBDASD    @ZM30746*/
         L     TEMPPTR,DEBDAPTR                                    0394
*       DO I=ONE TO DEBNMEXT;       /* SCAN NUMBER OF EXTENTS      0395
*                                                            @ZM30746*/
         LA    I,1                                                 0395
         B     @DE00395                                            0395
@DL00395 DS    0H                                                  0396
*         VJLNMTRK=VJLNMTRK+TEMPPTR->DEBNMTRK;/* SET NUMBER OF TRKS
*                                                            @ZM30746*/
         LH    @10,DEBNMTRK(,TEMPPTR)                              0396
         N     @10,@CF02366                                        0396
         AH    @10,VJLNMTRK                                        0396
         STH   @10,VJLNMTRK                                        0396
*         TEMPPTR=TEMPPTR+LENGTH(DEBDASD);/* POINT TO NEXT EXTENT    */
         AL    TEMPPTR,@CF00099                                    0397
*       END;                        /*                       @ZM30746*/
         AL    I,@CF00043                                          0398
@DE00395 L     @10,DCBPTR(,VVIPTR)                                 0398
         L     @10,DEBPTR+40(,@10)                                 0398
         SLR   @03,@03                                             0398
         IC    @03,DEBNMEXT(,@10)                                  0398
         CR    I,@03                                               0398
         BNH   @DL00395                                            0398
*       IF VJLNMTRK<FOUR THEN       /* FOUR TRACKS IS THE MINUN    0399
*                                      ALLOCATION            #Y30LB27*/
         LH    @10,VJLNMTRK                                        0399
         C     @10,@CF00037                                        0399
         BNL   @RF00399                                            0399
*         DO;                       /* LESS THEN 4 TRKS ALLOCATED  0400
*                                                            #Y30LB27*/
*           VJLMSGID=MSGMIN;        /* SET MSG INDEX         #Y30LB27*/
         MVC   VJLMSGID(4),@CF00598                                0401
*           CALL VJLWTO;            /* ISSUE ERROR MSG       #Y30LB27*/
         BAL   @14,VJLWTO                                          0402
*           RETURN;                 /* RETURN TO CALLER      #Y30LB27*/
         B     @EL00002                                            0403
*         END;                      /*                       #Y30LB27*/
*       TRKSREM=VJLNMTRK-TWO;       /* SET NUMBER OF TRKS REMAINING
*                                                            @Y30LB27*/
@RF00399 L     @10,CONTPTR                                         0405
         LA    @09,2                                               0405
         LH    @08,VJLNMTRK                                        0405
         SLR   @08,@09                                             0405
         STH   @08,TRKSREM(,@10)                                   0405
*       TRKSTHR=TRKSREM-TWO;        /* CALCULATE THRESHOLD   @Y30LB27
*                                                            @Y30LB27*/
         SLR   @08,@09                                             0406
         STH   @08,TRKSTHR(,@10)                                   0406
*/********************************************************************
** ORDER REQUESTS ARE JOURNALLED FRONT TO BACK               @Y30LB27
******************************************************************** */
*                                                                  0407
*       ORDRTTR=ZERO;               /* FIRST DATA RECORD IS TTR = TWO
*                                                            @Y30LB27*/
         SLR   @09,@09                                             0407
         ST    @09,ORDRTTR(,@10)                                   0407
*       ORDRR=TWO;                  /* FIRST DATA RECORD IS TTR = TWO
*                                                            @Y30LB27*/
         MVI   ORDRR(@10),X'02'                                    0408
*       REQPTR=ADDR(ORDRTTR);       /* SET REQ PTR           @Y30LB27*/
         LA    REQPTR,ORDRTTR(,@10)                                0409
*       CALL VJLCNVRT;              /* GET ABSOLUTE AND SECTOR ADDR  */
         BAL   @14,VJLCNVRT                                        0410
*       ORDRREM=MAXREC;             /* FORCE WRITE OF FIRST RECORD 0411
*                                                            @Y30LB27*/
         L     @10,CONTPTR                                         0411
         MVC   ORDRREM(2,@10),@CH02038                             0411
*       ORDRNXT=ONE;                /* RECORD FULL           @Y30LB27*/
         MVC   ORDRNXT(2,@10),@CH00043                             0412
*       MSGTTR=ZERO;                /* FIRST MSG RECORD      @Y30LB27*/
         SLR   @09,@09                                             0413
         ST    @09,MSGTTR(,@10)                                    0413
*       MSGTT=VJLNMTRK-ONE;         /* GET NUMBER OF TRACKS  @ZA05132*/
         LH    @09,VJLNMTRK                                        0414
         BCTR  @09,0                                               0414
         STH   @09,MSGTT(,@10)                                     0414
*       MSGR=ONE;                   /* FIRST DATA RECORD IS TTR = ONE
*                                                            @Y30LB27*/
         MVI   MSGR(@10),X'01'                                     0415
*       REQPTR=ADDR(MSGTTR);        /* SET REQ PTR           @Y30LB27*/
         LA    REQPTR,MSGTTR(,@10)                                 0416
*       CALL VJLCNVRT;              /* GET ABSOLUTE AND SECTOR ADDR
*                                                            @Y30LB27*/
         BAL   @14,VJLCNVRT                                        0417
*       MSGREM=MAXREC;              /* FORCE WRITE OF FIRST RECORD   */
         L     @10,CONTPTR                                         0418
         MVC   MSGREM(2,@10),@CH02038                              0418
*       MSGNXT=ONE;                 /* RECORD FULL           @Y30LB27*/
         MVC   MSGNXT(2,@10),@CH00043                              0419
*       CONTRPT=ZERO;               /* CLEAR RECORDS PER TRACK       */
         SLR   @09,@09                                             0420
         STH   @09,CONTRPT(,@10)                                   0420
*       CONTID=CID;                 /* SET CONTROL RECORD ID @Y30LB27*/
         MVC   CONTID(8,@10),CID                                   0421
*/********************************************************************
** WRITE THE CONTROL RECORD - IF I/O ERROR RETURN            @Y30LB27
******************************************************************** */
*                                                                  0422
*       WRITESW=ON;                 /* INDICATE WRITE OF CONTROL   0422
*                                      RECORD                @Y30LB27*/
         OI    WRITESW,B'01000000'                                 0422
*       REQPTR=ADDR(CONTTTR);       /* POINT TO CONTROL RECORD TTR 0423
*                                                            @Y30LB27*/
         LA    REQPTR,CONTTTR(,@10)                                0423
*       CALL VJLIO;                 /* INVOKE I/O PROCESSOR  @Y30LB27
*                                                            @Y30LB27*/
         BAL   @14,VJLIO                                           0424
*       IF RPLVRETC^=ZERO THEN      /* CONTROL RECORD ERROR IS     0425
*                                      TERMINATING ERROR     @Y30LB27*/
         L     @10,RPLVPTR                                         0425
         LH    @10,RPLVRETC(,@10)                                  0425
         N     @10,@CF02366                                        0425
         LTR   @10,@10                                             0425
         BNZ   @RT00425                                            0425
*         RETURN;                   /* RETURN TO CALLER      @Y30LB27*/
*       WRITESW=OFF;                /* TURN WRITE SWITCH OFF @Y30LB27*/
*       READSW=ON;                  /* GET THE CONTROL RECORD      0428
*                                                            @Y30LB27*/
         OI    READSW,B'10000000'                                  0428
         NI    WRITESW,B'10111111'                                 0428
*       CALL VJLIO;                 /* READ OR RE-READ CONTROL RECORD
*                                                            @Y30LB27*/
         BAL   @14,VJLIO                                           0429
*       IF RPLVRETC^=ZERO THEN      /* CONTROL RECORD ERROR IS     0430
*                                      TERMINATING ERROR     @ZM30725*/
         L     @10,RPLVPTR                                         0430
         LH    @10,RPLVRETC(,@10)                                  0430
         N     @10,@CF02366                                        0430
         LTR   @10,@10                                             0430
         BNZ   @RT00430                                            0430
*         RETURN;                   /* RETURN TO CALLER      @ZM30725*/
*       READSW=OFF;                 /* CLEAR SWITCHES        @Y30LB27*/
*       CONTSW=OFF;                 /* CLEAR CONTROL SWITCH  @Y30LB27*/
         NI    READSW,B'01101111'                                  0433
*       ORDRAREA=DATAPTR;           /* POINT TO RECORD BUFFER      0434
*                                                            @Y30LB27*/
         L     @10,DATAPTR                                         0434
         L     @09,CONTPTR                                         0434
         ST    @10,ORDRAREA(,@09)                                  0434
*       MSGAREA=DATAPTR;            /* POINT TO RECORD BUFFER      0435
*                                                            @Y30LB27*/
         ST    @10,MSGAREA(,@09)                                   0435
*       DATAD(ONE:FOUR)=ZERO;       /* INDICATE EMPTY BLOCK  @Y30LB27*/
         SLR   @08,@08                                             0436
         STCM  @08,15,DATAD(@10)                                   0436
*       WRITESW=ON;                 /* INDICATE WRITE        @Y30LB27*/
*       ORDRSW=ON;                  /* WRITE ORDER DATA BLOCK        */
         OI    WRITESW,B'01001000'                                 0438
*       REQPTR=ADDR(ORDRTTR);       /* POINT TO ORDER TRAK ADDR      */
         LA    REQPTR,ORDRTTR(,@09)                                0439
*       CALL VJLIO;                 /* WRITE FIRST DATA BLOCK        */
         BAL   @14,VJLIO                                           0440
*       ORDRSW=OFF;                 /* TURN ORDER OFF        @Y30LB27*/
         NI    ORDRSW,B'11110111'                                  0441
*       DCBFDAD=REQABS;             /* SET EODAD ADDRESS     @X04AC27*/
         L     @10,DCBPTR(,VVIPTR)                                 0442
         MVC   DCBFDAD(8,@10),REQABS(REQPTR)                       0442
*       DCBTRBAL=MAXREC;            /* SET TRACK BALANCE FOR EOF   0443
*                                                            @X04AC27*/
         LA    @10,DCBFDAD(,@10)                                   0443
         MVC   DCBTRBAL+7(2,@10),@CH02038                          0443
*       MSGSW=ON;                   /* INDICATE MSG BLOCK    @Y30LB27*/
         OI    MSGSW,B'00000100'                                   0444
*       REQPTR=ADDR(MSGTTR);        /* WRITE FISRT MSG BLOCK @Y30LB27*/
         L     REQPTR,CONTPTR                                      0445
         LA    REQPTR,MSGTTR(,REQPTR)                              0445
*       CALL VJLIO;                 /* WRITE IT              @Y30LB27*/
         BAL   @14,VJLIO                                           0446
*       MSGSW=OFF;                  /* TURN OFF MSG SW       @Y30LB27*/
*       WRITESW=OFF;                /* TURN OFF WRITE SW     @X04AC27
*                                                            @X04AC27*/
         NI    MSGSW,B'10111011'                                   0448
*/********************************************************************
** UPDATE FORMAT 1 VIA A CLOSE AND RE-OPEN                   @X04AC27
******************************************************************** */
*                                                                  0449
*       CLSSTG=CLSLST;              /* INIT THE CLOSE LST    @X04AC27*/
         MVC   CLSSTG(4),CLSLST                                    0449
*       REG0=VVIDCBAD;              /* POINT TO DCB          @X04AC27*/
         L     REG0,VVIDCBAD(,VVIPTR)                              0450
*LCLOSE1:                                                          0451
*       GEN(CLOSE ((REG0),),MF=(E,CLSSTG));/* CLOSE IT       @X04AC27*/
LCLOSE1  CLOSE ((REG0),),MF=(E,CLSSTG)
*       IF DCBOFOPN=ON THEN         /* CLOSE ERROR           @X04AC27*/
         L     @10,DCBPTR(,VVIPTR)                                 0452
         TM    DCBOFOPN+40(@10),B'00010000'                        0452
         BNO   @RF00452                                            0452
*         DO;                       /* YES                   @X04AC27*/
*           VJLMSGID=MSGCLSE;       /* INDICATE CLOSE ERROR  @X04AC27*/
         MVC   VJLMSGID(4),@CF00037                                0454
*           CALL VJLWTO;            /* ISSUE ERROR MSG       @X04AC27*/
         BAL   @14,VJLWTO                                          0455
*           RETURN;                 /* RETURN TO CALLER      @X04AC27*/
         B     @EL00002                                            0456
*         END;                      /*                       @X04AC27*/
*       REG0=VVIDCBAD;              /* POINT TO DCB          @X04AC27*/
@RF00452 L     REG0,VVIDCBAD(,VVIPTR)                              0458
*       OPNSTG=OPNLST;              /* INIT OPEN LIST        @X04AC27*/
         MVC   OPNSTG(4),OPNLST                                    0459
*LOPEN1:                                                           0460
*       GEN(OPEN ((REG0),),MF=(E,OPNSTG));/* RE-OPEN DCB     @YM04327*/
LOPEN1   OPEN ((REG0),),MF=(E,OPNSTG)
*       IF DCBOFOPN^=ON THEN        /* OPEN ERROR            @X04AC27*/
         L     @10,DCBPTR(,VVIPTR)                                 0461
         TM    DCBOFOPN+40(@10),B'00010000'                        0461
         BO    @RF00461                                            0461
*         DO;                       /* YES                   @X04AC27*/
*           VJLMSGID=MSGOPNE;       /* INDICATE OPEN ERROR   @X04AC27*/
         MVC   VJLMSGID(4),@CF00457                                0463
*           CALL VJLWTO;            /* ISSUE ERROR MSG       @X04AC27*/
         BAL   @14,VJLWTO                                          0464
*           RETURN;                 /* RETURN TO CALLER      @X04AC27*/
         B     @EL00002                                            0465
*         END;                      /*                       @X04AC27*/
*       DEBDAPTR=ADDR(DEBBASND);    /* UCB PTR BASED ON DEB  @ZM30725*/
@RF00461 L     @10,DCBPTR(,VVIPTR)                                 0467
         L     @06,DEBPTR+40(,@10)                                 0467
         LA    @06,DEBBASND(,@06)                                  0467
         ST    @06,DEBDAPTR                                        0467
*       DCBFDAD=''B;                /*                       @ZM30746*/
         XC    DCBFDAD(8,@10),DCBFDAD(@10)                         0468
*     END;                          /*                       #Y30LB27*/
*                                                                  0469
*   /*****************************************************************/
*   /*                                                               */
*   /* EXISTING JOURNAL RECALCULATE INFORMATION AS JOURNAL MAY HAVE  */
*   /* BEEN MOVED OR RECREATED FROM BACKUP                   @ZA09550*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0470
*   ELSE                            /* NOT FIRST OPEN        #Y30LB27*/
*     DO;                           /* RECALCULATE NUMBER OF TRACKS  */
         B     @RC00391                                            0470
@RF00391 DS    0H                                                  0471
*       REQPTR=ADDR(CONTTTR);       /* POINT TO CONTROL RECORD TTR 0471
*                                                            @Y30LB27*/
         L     REQPTR,CONTPTR                                      0471
         LA    REQPTR,CONTTTR(,REQPTR)                             0471
*       READSW=ON;                  /* INDICATE READ         #Y30LB27*/
         OI    READSW,B'10000000'                                  0472
*       CALL VJLIO;                 /* GET CONTROL RECORD    #Y30LB27*/
         BAL   @14,VJLIO                                           0473
*       IF RPLVRETC^=ZERO THEN      /* I/O ERROR             #Y30LB27*/
         L     @10,RPLVPTR                                         0474
         LH    @10,RPLVRETC(,@10)                                  0474
         N     @10,@CF02366                                        0474
         LTR   @10,@10                                             0474
         BNZ   @RT00474                                            0474
*         RETURN;                   /* YES EXIT              #Y30LB27*/
*       READSW=OFF;                 /* TURN OFF READ         #Y30LB27*/
         NI    READSW,B'01111111'                                  0476
*       REQPTR=ADDR(CONTTTR);       /* POINT TO ORDER TTR    @ZM30725*/
         L     REQPTR,CONTPTR                                      0477
         LA    REQPTR,CONTTTR(,REQPTR)                             0477
*       CALL VJLCNVRT;              /* GET ABSOLUTE AND SECTOR ADDR  */
         BAL   @14,VJLCNVRT                                        0478
*       REQPTR=ADDR(ORDRTTR);       /* POINT TO ORDER TTR    @ZM30725*/
         L     @10,CONTPTR                                         0479
         LA    REQPTR,ORDRTTR(,@10)                                0479
*       IF REQR=ZERO THEN                                          0480
         CLI   REQR(REQPTR),0                                      0480
         BNE   @RF00480                                            0480
*         DO;                       /* FORCE EOF             @ZM30746*/
*           ORDRTT=ORDRTT-ONE;      /* DECR TT               @ZM30746*/
         LH    @09,ORDRTT(,@10)                                    0482
         N     @09,@CF02366                                        0482
         BCTR  @09,0                                               0482
         STH   @09,ORDRTT(,@10)                                    0482
*           ORDRR=CONTRPT;          /* SET RECORDS PER TRACK @ZM30746*/
         MVC   ORDRR(1,@10),CONTRPT+1(@10)                         0483
*           CALL VJLCNVRT;          /* GET ABSOLUT DISAK AND SECTOR
*                                                            @ZM30746*/
         BAL   @14,VJLCNVRT                                        0484
*           ORDRTT=ORDRTT+ONE;      /* DECR TT               @ZM30746*/
         L     @10,CONTPTR                                         0485
         LA    @06,1                                               0485
         LH    @09,ORDRTT(,@10)                                    0485
         N     @09,@CF02366                                        0485
         ALR   @06,@09                                             0485
         STH   @06,ORDRTT(,@10)                                    0485
*           ORDRR=ZERO;             /* SET RECORDS PER TRACK @ZM30746*/
         MVI   ORDRR(@10),X'00'                                    0486
*         END;                      /*                       @ZM30746*/
*       ELSE                        /*                       @ZM30746*/
*         CALL VJLCNVRT;            /* GET ABSOLUTE AND SECTOR ADDR  */
         B     @RC00480                                            0488
@RF00480 BAL   @14,VJLCNVRT                                        0488
*       REQPTR=ADDR(MSGTTR);        /* POINT TO MESSAGE TTR  @ZM30725*/
@RC00480 L     @10,CONTPTR                                         0489
         LA    REQPTR,MSGTTR(,@10)                                 0489
*       IF REQR=ZERO THEN                                          0490
         CLI   REQR(REQPTR),0                                      0490
         BNE   @RF00490                                            0490
*         DO;                       /* FORCE EOF             @ZM30746*/
*           MSGTT=MSGTT+ONE;        /* DECR TT               @ZM30746*/
         LA    @09,1                                               0492
         LH    @08,MSGTT(,@10)                                     0492
         N     @08,@CF02366                                        0492
         ALR   @09,@08                                             0492
         STH   @09,MSGTT(,@10)                                     0492
*           MSGR=CONTRPT;           /* SET RECORDS PER TRACK @ZM30746*/
         MVC   MSGR(1,@10),CONTRPT+1(@10)                          0493
*           CALL VJLCNVRT;          /* GET ABSOLUTE DISK AND SECTOR
*                                                            @ZM30746*/
         BAL   @14,VJLCNVRT                                        0494
*           MSGTT=MSGTT-ONE;        /* DECR TT               @ZM30746*/
         L     @10,CONTPTR                                         0495
         LH    @06,MSGTT(,@10)                                     0495
         N     @06,@CF02366                                        0495
         BCTR  @06,0                                               0495
         STH   @06,MSGTT(,@10)                                     0495
*           MSGR=ZERO;              /* SET RECORDS PER TRACK @ZM30746*/
         MVI   MSGR(@10),X'00'                                     0496
*         END;                      /*                       @ZM30746*/
*       ELSE                        /* RE-CALCULATE AND EOF TO THIS
*                                      TRACK                 @ZM30746*/
*         CALL VJLCNVRT;            /* GET ABSOLUTE AND SECTOR ADDR  */
         B     @RC00490                                            0498
@RF00490 BAL   @14,VJLCNVRT                                        0498
*       CONTAREA=CONTPTR;           /* RESET CONTROL REC BUFFER PTR
*                                                            #YM04327*/
@RC00490 L     @10,CONTPTR                                         0499
         ST    @10,CONTAREA(,@10)                                  0499
*       IF CONTID^=CID THEN         /* NOT THE CONTROL RECORD        */
         CLC   CONTID(8,@10),CID                                   0500
         BE    @RF00500                                            0500
*         DO;                       /* ISSUE I/O ERROR MSG   #Y30LB27*/
*           VJLMSGID=MSGCONTE;      /* CONTROL RECORD ERROR  #Y30LB27*/
         MVC   VJLMSGID(4),@CF00074                                0502
*           CALL VJLWTO;            /* ISSUE ERROR MSG       #Y30LB27*/
         BAL   @14,VJLWTO                                          0503
*           RETURN;                 /* EXIT                  #Y30LB27*/
         B     @EL00002                                            0504
*         END;                      /* END ERROR CONT RECD   #Y30LB27*/
*       VJLNMTRK=ZERO;              /*                       @ZM30746*/
@RF00500 SLR   @10,@10                                             0506
         STH   @10,VJLNMTRK                                        0506
*       TEMPPTR=DEBDAPTR;           /* SET PTR TO DEBDASD    @ZM30746*/
         L     TEMPPTR,DEBDAPTR                                    0507
*       DO I=ONE TO DEBNMEXT;       /* SCAN NUMBER OF EXTENTS      0508
*                                                            @ZM30746*/
         LA    I,1                                                 0508
         B     @DE00508                                            0508
@DL00508 DS    0H                                                  0509
*         VJLNMTRK=VJLNMTRK+TEMPPTR->DEBNMTRK;/* SET NUMBER OF TRKS
*                                                            @ZM30746*/
         LH    @10,DEBNMTRK(,TEMPPTR)                              0509
         N     @10,@CF02366                                        0509
         AH    @10,VJLNMTRK                                        0509
         STH   @10,VJLNMTRK                                        0509
*         TEMPPTR=TEMPPTR+LENGTH(DEBDASD);/* POINT TO NEXT EXTENT    */
         AL    TEMPPTR,@CF00099                                    0510
*       END;                        /*                       @ZM30746*/
         AL    I,@CF00043                                          0511
@DE00508 L     @10,DCBPTR(,VVIPTR)                                 0511
         L     @10,DEBPTR+40(,@10)                                 0511
         SLR   @03,@03                                             0511
         IC    @03,DEBNMEXT(,@10)                                  0511
         CR    I,@03                                               0511
         BNH   @DL00508                                            0511
*       TRKSREM=EVAL(VJLNMTRK-ORDRTT)-EVAL(VJLNMTRK-MSGTT)-ONE;/*  0512
*                                      NUMBER OF TRKS        #X04AC27*/
         L     @10,CONTPTR                                         0512
         LH    @06,VJLNMTRK                                        0512
         LR    @09,@06                                             0512
         LH    @08,ORDRTT(,@10)                                    0512
         N     @08,@CF02366                                        0512
         SLR   @09,@08                                             0512
         LH    @08,MSGTT(,@10)                                     0512
         N     @08,@CF02366                                        0512
         SLR   @06,@08                                             0512
         SLR   @09,@06                                             0512
         BCTR  @09,0                                               0512
         STH   @09,TRKSREM(,@10)                                   0512
*       IF ORDRR=ZERO THEN          /* NOT USED YET          @X04AC27*/
         CLI   ORDRR(@10),0                                        0513
         BNE   @RF00513                                            0513
*         TRKSREM=TRKSREM+ONE;      /* NO INCR               @X04AC27*/
         AL    @09,@CF00043                                        0514
         STH   @09,TRKSREM(,@10)                                   0514
*       IF MSGR=ZERO THEN           /* NOT USED YET          @X04AC27*/
@RF00513 L     @10,CONTPTR                                         0515
         CLI   MSGR(@10),0                                         0515
         BNE   @RF00515                                            0515
*         TRKSREM=TRKSREM+ONE;      /* NO INCR               @X04AC27*/
         LA    @06,1                                               0516
         AH    @06,TRKSREM(,@10)                                   0516
         STH   @06,TRKSREM(,@10)                                   0516
*       IF TRKSREM>TWO THEN         /* THRESHOLD OF 2 MIN    @Y30LB27*/
@RF00515 LA    @10,2                                               0517
         L     @06,CONTPTR                                         0517
         LH    @09,TRKSREM(,@06)                                   0517
         CR    @09,@10                                             0517
         BNH   @RF00517                                            0517
*         TRKSTHR=TRKSREM-TWO;      /* CALCULATE THRESHOLD   @Y30LB27*/
         SLR   @09,@10                                             0518
         STH   @09,TRKSTHR(,@06)                                   0518
*       ELSE                                                       0519
*         TRKSTHR=ZERO;             /* DITTO                 @Y30LB27*/
         B     @RC00517                                            0519
@RF00517 L     @10,CONTPTR                                         0519
         SLR   @06,@06                                             0519
         STH   @06,TRKSTHR(,@10)                                   0519
*       IF RPLVRETC^=ZERO THEN      /* CONTROL RECORD ERROR IS     0520
*                                      TERMINATING ERROR     @Y30LB27*/
@RC00517 L     @10,RPLVPTR                                         0520
         LH    @10,RPLVRETC(,@10)                                  0520
         N     @10,@CF02366                                        0520
         LTR   @10,@10                                             0520
         BNZ   @RT00520                                            0520
*         RETURN;                   /* RETURN TO CALLER      @Y30LB27*/
*/********************************************************************
** WRITE THE CONTROL RECORD - IF I/O ERROR RETURN            @Y30LB27
******************************************************************** */
*                                                                  0522
*       WRITESW=ON;                 /* INDICATE WRITE OF CONTROL   0522
*                                      RECORD                @Y30LB27*/
*       WRITDATA=ON;                /* INDICATE ONLY A WRITE DATA  0523
*                                      REQD                  @Y30LB27*/
         OI    WRITESW,B'01100000'                                 0523
*       REQPTR=ADDR(CONTTTR);       /* POINT TO CONTROL RECORD TTR 0524
*                                                            @Y30LB27*/
         L     REQPTR,CONTPTR                                      0524
         LA    REQPTR,CONTTTR(,REQPTR)                             0524
*       CALL VJLIO;                 /* INVOKE I/O PROCESSOR  @Y30LB27*/
         BAL   @14,VJLIO                                           0525
*       WRITESW=OFF;                /* TURN OFF READ         @Y30LB27*/
*       WRITDATA=OFF;               /* INDICATE ONLY A WRITE DATA  0527
*                                      REQD                  @Y30LB27*/
*       CONTSW=OFF;                 /* CLEAR SWITCHES        @ZM30725*/
         NI    WRITESW,B'10001111'                                 0528
*     END;                          /* END ENABLE CALL       @Y30LB27*/
*   END VJLINIT;                    /*                       @Y30LB27*/
         B     @EL00002                                            0530
*                                                                  0531
*/********************************************************************
* *                                                                0531
* *     NAME = VJLFDAD, SET UP JOURNAL FOR CLOSE                   0531
* *                                                                0531
* *     INPUT = NONE                                               0531
* *                                                                0531
* *     PROCESS - SET JOURNAL POINTER TO LAST ORDER WRITTEN.       0531
* *     IF ALL TRACKS HAVE DATA, WRITE THE JOURNAL EOF AFTER THE   0531
* *     LAST ORDER WRITTEN SO THAT CLOSE WILL NOT ISSUE EOF AND    0531
* *     WRITE OVER THE MESSAGE DATA ON THE NEXT TRACK.             0531
* *     IF ALL TRACKS DO NOT CONTAIN DATA, THEN                    0531
* *     LET CLOSE WRITE THE EOF (CLOSE WRITES 2 EOF'S -            0531
* *     ONE ON THE TRACK WHICH CONTAINS THE LAST DATA              0531
* *     BLOCK AND ONE AT THE BEGINNING OF THE NEXT TRACK)          0531
* *                                                                0531
* *     OUTPUT - 1) IF AN I/O ERROR OCCURRED IN READING THE CONTROL
* *                 RECORD, NO EOF WRITTEN AND NO SET UP FOR CLOSE 0531
* *                 TO WRITE EOF                                   0531
* *              2) IF ALL TRACKS IN THE JOURNAL ARE FULL, EOF IS  0531
* *                 WRITTEN TO THE JOURNAL                         0531
* *              3) IF THERE IS AT LEAST ONE AVAILABLE TRACK IN THE
* *                 JOURNAL, THE JOURNAL IS SET UP SO THAT CLOSE   0531
* *                 WILL WRITE EOF                                 0531
* *                                                                0531
* *********************************************************          */
*                                                                  0531
*VJLFDAD:                                                          0531
*   PROC OPTIONS(SAVE(14));         /*                       @ZM30746*/
VJLFDAD  ST    @14,@SA00003                                        0531
*   CONTSW=ON;                      /* SET READ FOR CONTROL RECORD   */
*   READSW=ON;                      /* READ                  @ZM30746*/
         OI    CONTSW,B'10010000'                                  0533
*   REQPTR=ADDR(CONTTTR);           /* POINT REQ TO CONTROL RECORD   */
         L     REQPTR,CONTPTR                                      0534
         LA    REQPTR,CONTTTR(,REQPTR)                             0534
*   CALL VJLIO;                     /* READ CONTROL RECORD   @ZM30746*/
         BAL   @14,VJLIO                                           0535
*   READSW=OFF;                     /* TURN READ OFF         @ZM30746*/
*   CONTSW=OFF;                     /* SET CONTROL SW OFF    @ZM30746*/
         NI    READSW,B'01101111'                                  0537
*   IF RPLVRETC=ZERO                /* READ SUCCESSFUL       @ZM30746*/
*     THEN                                                         0538
         L     @10,RPLVPTR                                         0538
         LH    @10,RPLVRETC(,@10)                                  0538
         N     @10,@CF02366                                        0538
         LTR   @10,@10                                             0538
         BNZ   @RF00538                                            0538
*     IF TRKSREM^=ZERO THEN         /* JOURNAL NOT FULL      @ZA09550*/
         SLR   @10,@10                                             0539
         L     @06,CONTPTR                                         0539
         CH    @10,TRKSREM(,@06)                                   0539
         BE    @RF00539                                            0539
*       DO;                         /* LET CLOSE WRITE EOF   @ZM30746*/
*         REQPTR=ADDR(ORDRTTR);     /* POINT TO ORDER TTR    @ZM30746*/
         L     @09,CONTPTR                                         0541
         LA    REQPTR,ORDRTTR(,@09)                                0541
*         DCBFDAD=REQABS;           /* SET FINAL DISAK ADDR  @ZM30746*/
         L     @09,DCBPTR(,VVIPTR)                                 0542
         MVC   DCBFDAD(8,@09),REQABS(REQPTR)                       0542
*         IF REQR=ZERO THEN         /* END OF TRACK          @ZM30746*/
         CLI   REQR(REQPTR),0                                      0543
         BNE   @RF00543                                            0543
*           DCBTRBAL=ZERO;          /* ZERO TRACK BAL        @ZM30746*/
         LA    @06,DCBFDAD(,@09)                                   0544
         STH   @10,DCBTRBAL+7(,@06)                                0544
*         ELSE                      /*                       @ZM30746*/
*           DCBTRBAL=MAXREC;        /* YES                   @ZM30746*/
         B     @RC00543                                            0545
@RF00543 L     @10,DCBPTR(,VVIPTR)                                 0545
         LA    @10,DCBFDAD(,@10)                                   0545
         MVC   DCBTRBAL+7(2,@10),@CH02038                          0545
*       END;                        /*                       @ZM30746*/
*     ELSE                                                         0547
*       DO;                         /* JOURNAL FULL          @ZM30746*/
         B     @RC00539                                            0547
@RF00539 DS    0H                                                  0548
*         ORDRAREA=DATAPTR;         /*                       @ZM30746*/
         L     @10,CONTPTR                                         0548
         L     @09,DATAPTR                                         0548
         ST    @09,ORDRAREA(,@10)                                  0548
*         WRITESW=ON;               /*                       @ZM30746*/
*         ORDRSW=ON;                /*                       @ZM30746*/
         OI    WRITESW,B'01001000'                                 0550
*         EOFSW=ON;                 /*                       @ZM30746*/
         OI    EOFSW,B'00100000'                                   0551
*         REQPTR=ADDR(ORDRTTR);     /*                       @ZM30746*/
         LA    REQPTR,ORDRTTR(,@10)                                0552
*         CALL VJLIO;               /* WRITE EOF             @ZM30746*/
         BAL   @14,VJLIO                                           0553
*         WRITESW=OFF;              /*                       @ZM30746*/
*         ORDRSW=OFF;               /*                       @ZM30746*/
         NI    WRITESW,B'10110111'                                 0555
*         EOFSW=OFF;                /*                       @ZM30746*/
         NI    EOFSW,B'11011111'                                   0556
*         DCBFDAD=''B;              /* SET FINAL DISAK ADDR  @ZM30746*/
         L     @10,DCBPTR(,VVIPTR)                                 0557
         XC    DCBFDAD(8,@10),DCBFDAD(@10)                         0557
*         DCBTRBAL=ZERO;            /* YES                   @ZM30746*/
         LA    @10,DCBFDAD(,@10)                                   0558
         SLR   @06,@06                                             0558
         STH   @06,DCBTRBAL+7(,@10)                                0558
*       END;                        /*                       @ZM30746*/
*   ELSE                                                           0560
*     DO;                           /* READ FAILURE          @ZA09550*/
         B     @RC00538                                            0560
@RF00538 DS    0H                                                  0561
*       DCBFDAD=''B;                /* SET FINAL DISK ADDR   @ZA09550*/
         L     @10,DCBPTR(,VVIPTR)                                 0561
         XC    DCBFDAD(8,@10),DCBFDAD(@10)                         0561
*       DCBTRBAL=ZERO;              /* NO EOF TO BE WRITTEN  @ZA09550*/
         LA    @10,DCBFDAD(,@10)                                   0562
         SLR   @06,@06                                             0562
         STH   @06,DCBTRBAL+7(,@10)                                0562
*     END;                          /*                       @ZA09550*/
*   END VJLFDAD;                    /* END FINAL DISK ADDR   @ZM30746*/
@EL00003 DS    0H                                                  0564
@EF00003 DS    0H                                                  0564
@ER00003 L     @14,@SA00003                                        0564
         BR    @14                                                 0564
*                                                                  0565
*/* ******************************************************************
**                                                                 0565
**     NAME = VJLIO, JOURNAL ACCESS SEGMENT.                       0565
**                                                                 0565
**     INPUT = INTERNAL WORK FLAGS                                 0565
**                                                                 0565
**     PROCESS = VJLIO DETERMINES IF THE ACTIVITY IS FOR READ OR WRITE
**     ACCESS, WHETHER THE DEVICE IS AN RPS DEVICE, AND WHETHER THE
**     ACCESS IS FOR THE CONTROL RECORD OR FOR A DATA RECORD, THE CCW
**     CHAIN IS UPDATED ACCORDINGLY.                               0565
**                                                                 0565
**     OUTPUT = ACCESS TO JOURNAL AS REQUESTED.                    0565
**                                                                 0565
******************************************************************** */
*                                                                  0565
*VJLIO:                                                            0565
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VJLIO    ST    @14,@SA00004                                        0565
*/********************************************************************
** I/O SEGMENT                                               @Y30LB27
******************************************************************** */
*                                                                  0566
*                                   /*                       @YM04315*/
*/********************************************************************
** LOOP UNTIL REQUEST JOURNALLED - CONTROLLED BY VJLCHKIO    @YM04315
******************************************************************** */
*                                                                  0566
*   RETRYSW=ON;                     /* FORCE FIRST I/O       @YM04315*/
         OI    RETRYSW,B'00000010'                                 0566
*   DO WHILE(RETRYSW=ON)&           /* LOOP UNTIL COMPLETION @ZA09550*/
*         (JRLDISAB=OFF);           /*                       @ZA09550
*                                                            @Y30LB27*/
         B     @DE00567                                            0567
@DL00567 DS    0H                                                  0568
*/********************************************************************
** SET THE REQUEST ABSOLUTE DISK ADDR IN IOB                 @Y30LB27
******************************************************************** */
*                                                                  0568
*     IOBSEEK=REQABS;               /* SET SEEK ADDR IN IOB  @Y30LB27*/
         L     @10,IOBSTPTR                                        0568
         MVC   IOBSEEK(8,@10),REQABS(REQPTR)                       0568
*     IF EOFSW=OFF THEN             /*                       @ZM30746*/
         TM    EOFSW,B'00100000'                                   0569
         BNZ   @RF00569                                            0569
*       IOBR=IOBR-ONE;              /* SEARCH PREV RECORD    @Y30LB27*/
         SLR   @09,@09                                             0570
         IC    @09,IOBR(,@10)                                      0570
         BCTR  @09,0                                               0570
         STC   @09,IOBR(,@10)                                      0570
*     IF CONTSW=ON THEN             /* CONTROL REC CALL      @Y30LB27*/
@RF00569 TM    CONTSW,B'00010000'                                  0571
         BNO   @RF00571                                            0571
*       DO;                         /* YES                   @Y30LB27*/
*         CONTCNT(ONE:FIVE)=REQABS(FOUR:EIGHT);/* SET COUNT FIELD  0573
*                                                            @Y30LB27*/
         L     @10,CONTPTR                                         0573
         MVC   CONTCNT(5,@10),REQABS+3(REQPTR)                     0573
*         CONTCNT(SIX)=ZERO;        /* SET COUNT FIELD       @ZM30725*/
         MVI   CONTCNT+5(@10),X'00'                                0574
*         CONTCNT(SEVEN:EIGHT)=MAXREC;/* SET COUNT FIELD     @ZM30725*/
         MVC   CONTCNT+6(2,@10),@CH02038                           0575
*       END;                        /* END CONTROL RECORD    @Y30LB27*/
*     ELSE                          /*                       @Y30LB27*/
*       DO;                         /* YES                   @Y30LB27*/
         B     @RC00571                                            0577
@RF00571 DS    0H                                                  0578
*         IF ORDRSW=OFF×EOFSW=OFF THEN                             0578
         TM    ORDRSW,B'00001000'                                  0578
         BZ    @RT00578                                            0578
         TM    EOFSW,B'00100000'                                   0578
         BNZ   @RF00578                                            0578
@RT00578 DS    0H                                                  0579
*           DO;                     /*                       @ZM30746*/
*             DATACNT(ONE:FIVE)=REQABS(FOUR:EIGHT);/* SET COUNT FIELD
*                                                            @ZM30746*/
         L     @10,DATAPTR                                         0580
         MVC   DATACNT(5,@10),REQABS+3(REQPTR)                     0580
*             DATACNT(SIX)=ZERO;    /* SET COUNT FIELD       @ZM30746*/
         MVI   DATACNT+5(@10),X'00'                                0581
*             DATACNT(SEVEN:EIGHT)=MAXREC;/* SET COUNT FIELD @ZM30746*/
         MVC   DATACNT+6(2,@10),@CH02038                           0582
*           END;                    /*                       @ZM30746*/
*         ELSE                                                     0584
*           DO;                     /*                       @ZM30746*/
         B     @RC00578                                            0584
@RF00578 DS    0H                                                  0585
*             DATACNT(ONE:FIVE)=REQABS(FOUR:EIGHT);/* SET COUNT FIELD
*                                                            @ZM30746*/
         L     @10,DATAPTR                                         0585
         MVC   DATACNT(5,@10),REQABS+3(REQPTR)                     0585
*             DATACNT(FIVE)=DATACNT(FIVE)+ONE;/*             @ZM30746*/
         LA    @09,1                                               0586
         SLR   @08,@08                                             0586
         IC    @08,DATACNT+4(,@10)                                 0586
         ALR   @09,@08                                             0586
         STC   @09,DATACNT+4(,@10)                                 0586
*             DATACNT(SIX)=ZERO;    /* SET COUNT FIELD       @ZM30746*/
         SLR   @09,@09                                             0587
         STC   @09,DATACNT+5(,@10)                                 0587
*             DATACNT(SEVEN:EIGHT)=ZERO;/* SET COUNT FIELD   @ZM30746*/
         STCM  @09,3,DATACNT+6(@10)                                0588
*           END;                    /*                       @ZM30746*/
*       END;                        /* END ORDER RECORD      @Y30LB27
*                                                            @Y30LB27*/
@RC00578 DS    0H                                                  0591
*/********************************************************************
** SET UP THE BUFFER ADDRESSES                               @Y30LB27
******************************************************************** */
*                                                                  0591
*     IF UCB2OPT3=ON THEN           /* RPS DEVICE            @X04AC27*/
@RC00571 L     @10,DEBDAPTR                                        0591
         L     @10,UCBPTR(,@10)                                    0591
         TM    UCB2OPT3(@10),B'00010000'                           0591
         BNO   @RF00591                                            0591
*       RPSAREA=REQRPS;             /* RPS DEVICE            @Y30LB27*/
         MVC   RPSAREA(1),REQRPS(REQPTR)                           0592
*     IOADDR=REQAREA;               /* SET SECTOR AREA       @Y30LB27*/
@RF00591 L     @10,CCWPTR                                          0593
         L     @09,REQAREA(,REQPTR)                                0593
         STCM  @09,7,IOADDR(@10)                                   0593
*     ERAADDR=REQAREA;              /* SET AREA ADDR FOR ERASE     0594
*                                                            @Y30LB27*/
         STCM  @09,7,ERAADDR(@10)                                  0594
*/********************************************************************
** READ REQUEST                                              @Y30LB27
******************************************************************** */
*                                                                  0595
*     IF READSW=ON THEN                                            0595
         TM    READSW,B'10000000'                                  0595
         BNO   @RF00595                                            0595
*       DO;                         /* READ OPERATION        @Y30LB27*/
*         IO=READCOMD;              /* SET READ TO READ COUNT, KEY,
*                                      AND DATA              @Y30LB27*/
         MVC   IO(1,@10),READCOMD                                  0597
*         ERA=NOPCOMD;              /* NOP THE ERASE CCW     @Y30LB27*/
         MVC   ERA(1,@10),NOPCOMD                                  0598
*       END;                        /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** WRITE REQUEST                                             @Y30LB27
******************************************************************** */
*                                                                  0600
*     IF WRITESW=ON THEN            /* WRITE OPERATION       @Y30LB27*/
@RF00595 TM    WRITESW,B'01000000'                                 0600
         BNO   @RF00600                                            0600
*       IF CONTSW=ON THEN           /* NO ERASE ON CONTROL RECORD  0601
*                                                            @Y30LB27*/
         TM    CONTSW,B'00010000'                                  0601
         BNO   @RF00601                                            0601
*         IF WRITDATA=ON THEN                                      0602
         TM    WRITDATA,B'00100000'                                0602
         BNO   @RF00602                                            0602
*           DO;                     /* WRITE DATA CMD        @Y30LB27*/
*             IO=DATACOMD;          /* WRITE COUNT, KEY, DATA@Y30LB27*/
         L     @10,CCWPTR                                          0604
         MVC   IO(1,@10),DATACOMD                                  0604
*             IOBR=IOBR+ONE;        /* RE-INCR RECD ADDR     @Y30LB27*/
         L     @09,IOBSTPTR                                        0605
         LA    @08,1                                               0605
         SLR   @05,@05                                             0605
         IC    @05,IOBR(,@09)                                      0605
         ALR   @08,@05                                             0605
         STC   @08,IOBR(,@09)                                      0605
*             IOADDR=REQAREA+EIGHT; /* UPDATE OUTPUT ADDR    @Y30LB27*/
         LA    @09,8                                               0606
         AL    @09,REQAREA(,REQPTR)                                0606
         STCM  @09,7,IOADDR(@10)                                   0606
*             ERA=NOPCOMD;          /* NOP THE ERASE CCW     @Y30LB27*/
         MVC   ERA(1,@10),NOPCOMD                                  0607
*           END;                    /* END WRITE DATA        @Y30LB27*/
*         ELSE                                                     0609
*           DO;                     /* WRITE CNT KEY DATA    @Y30LB27*/
         B     @RC00602                                            0609
@RF00602 DS    0H                                                  0610
*             IO=WRITCOMD;          /* WRITE COUNT, KEY, DATA@Y30LB27
*                                                            @Y30LB27*/
         L     @10,CCWPTR                                          0610
         MVC   IO(1,@10),WRITCOMD                                  0610
*             ERA=NOPCOMD;          /* NOP THE ERASE CCW     @Y30LB27*/
         MVC   ERA(1,@10),NOPCOMD                                  0611
*           END;                    /* END WRITE DATA        @Y30LB27*/
*       ELSE                                                       0613
*         DO;                       /* SET ERASE CCW         @Y30LB27*/
         B     @RC00601                                            0613
@RF00601 DS    0H                                                  0614
*           IO=WRITCOMD;            /* WRITE COUNT, KEY, DATA@ZM30746*/
         L     @10,CCWPTR                                          0614
         MVC   IO(1,@10),WRITCOMD                                  0614
*           IF ORDRSW=OFF×EOFSW=OFF THEN/*                   @ZM30746*/
         TM    ORDRSW,B'00001000'                                  0615
         BZ    @RT00615                                            0615
         TM    EOFSW,B'00100000'                                   0615
         BNZ   @RF00615                                            0615
@RT00615 DS    0H                                                  0616
*             ERA=ERACOMD;          /* SET ERASE COMMAND     @ZM30746*/
         L     @10,CCWPTR                                          0616
         MVC   ERA(1,@10),ERACOMD                                  0616
*           ELSE                                                   0617
*             DO;                   /*                       @ZM30746*/
         B     @RC00615                                            0617
@RF00615 DS    0H                                                  0618
*               IOCNT=EIGHT;        /*                       @ZM30746*/
         L     @10,CCWPTR                                          0618
         MVC   IOCNT(3,@10),@CF00039+1                             0618
*               ERA=NOPCOMD;        /* NOP THE ERASE CCW     @ZM30746*/
         MVC   ERA(1,@10),NOPCOMD                                  0619
*             END;                  /*                       @ZM30746*/
*         END;                      /*                       @ZM30746
*                                                            @Y30LB27*/
@RC00615 DS    0H                                                  0622
*/********************************************************************
** ISSUE EXCP AND WAIT                                       @Y30LB27
******************************************************************** */
*                                                                  0622
*     ECB=''B;                      /* CLEAR ECB             @Y30LB27*/
@RC00601 DS    0H                                                  0622
@RF00600 L     @10,ECBPTR                                          0622
         XC    ECB(4,@10),ECB(@10)                                 0622
*     REG1=ADDR(IOBSTDRD);          /* SET IOB ADDR          @Y30LB27*/
         L     REG1,IOBSTPTR                                       0623
*LEXCP1:                                                           0624
*     GEN(EXCP (REG1));             /* ISSUE THE EXCP        @Y30LB27*/
LEXCP1   EXCP (REG1)
*     REG1=ADDR(ECB);               /* SET ECB ADDR          @Y30LB27*/
         L     REG1,ECBPTR                                         0625
*LWAIT1:                                                           0626
*     GEN(WAIT ECB=(REG1));         /* WAIT FOR I/O COMPLETION     0626
*                                                            @Y30LB27
*                                                            @Y30LB27*/
LWAIT1   WAIT ECB=(REG1)
*/********************************************************************
** IF I/O SUCCESSFUL - TURN RETRY SW OFF OTHERWISE INVOKE SYNAD ROUTINE
******************************************************************** */
*                                                                  0627
*     IF ECBCC^=SUCIO THEN          /* SUCCESSFUL I/O        @Y30LB27*/
         L     @10,ECBPTR                                          0627
         CLC   ECBCC(1,@10),SUCIO                                  0627
         BE    @RF00627                                            0627
*       CALL VJLCHKIO;              /* NO ANALIZE THE ERROR  @Y30LB27*/
         BAL   @14,VJLCHKIO                                        0628
*     ELSE                                                         0629
*       DO;                         /* YES I/O REQUEST COMPLETE    0629
*                                                            @Y30LB27*/
         B     @RC00627                                            0629
@RF00627 DS    0H                                                  0630
*         RETRYSW=OFF;              /* SET RETRY SWITCH OFF  @Y30LB27*/
         NI    RETRYSW,B'11111101'                                 0630
*         IF CONTSW=OFF&WRITESW=ON&IOBCSW(ONE:THREE)=ADDR(ERACCW)+EIGHT
*             &IOBCSW(SIX:SEVEN)^=ZERO THEN/* WRITE OPERATION      0631
*                                                            @Y30LB27*/
         TM    WRITESW,B'01000000'                                 0631
         BNO   @RF00631                                            0631
         TM    CONTSW,B'00010000'                                  0631
         BNZ   @RF00631                                            0631
         L     @10,IOBSTPTR                                        0631
         L     @09,CCWPTR                                          0631
         LA    @09,ERACCW(,@09)                                    0631
         AL    @09,@CF00039                                        0631
         SLR   @08,@08                                             0631
         ICM   @08,7,IOBCSW(@10)                                   0631
         CR    @09,@08                                             0631
         BNE   @RF00631                                            0631
         ICM   @09,3,IOBCSW+5(@10)                                 0631
         BZ    @RF00631                                            0631
*           DO;                     /* END OF TRACK          @Y30LB27*/
*             IF REQREM<MAXREQ THEN /* MAX REQUEST FIX       @Y30LB27*/
         LH    @10,REQREM(,REQPTR)                                 0633
         C     @10,@CF02245                                        0633
         BNL   @RF00633                                            0633
*               DO;                 /* NO                    @Y30LB27*/
*                 IF ORDRSW=ON THEN /* ORDER                 @Y30LB27*/
         TM    ORDRSW,B'00001000'                                  0635
         BNO   @RF00635                                            0635
*                   REQTT=REQTT+ONE;/* UPDATE TRACK          @Y30LB27*/
         LA    @10,1                                               0636
         LH    @09,REQTT(,REQPTR)                                  0636
         N     @09,@CF02366                                        0636
         ALR   @10,@09                                             0636
         STH   @10,REQTT(,REQPTR)                                  0636
*                 ELSE              /* OR MSG                @Y30LB27*/
*                   REQTT=REQTT-ONE;/* UPDATE TRACK          @Y30LB27*/
         B     @RC00635                                            0637
@RF00635 LH    @10,REQTT(,REQPTR)                                  0637
         N     @10,@CF02366                                        0637
         BCTR  @10,0                                               0637
         STH   @10,REQTT(,REQPTR)                                  0637
*                 REQR=ZERO;        /* SET RECORD ONE        @Y30LB27*/
@RC00635 MVI   REQR(REQPTR),X'00'                                  0638
*                 REQREM=ZERO;      /* INDICATE BLOCK FULL   @Y30LB27*/
         SLR   @10,@10                                             0639
         STH   @10,REQREM(,REQPTR)                                 0639
*                 REQNXT=MAXREC;    /* SET DISPLACEMENT      @Y30LB27*/
         MVC   REQNXT(2,REQPTR),@CH02038                           0640
*               END;                /* END OF TRACK          @Y30LB27*/
*           END;                    /* END OF TRACK          @Y30LB27*/
@RF00633 DS    0H                                                  0643
*       END;                        /* CHECK WRITE DATA      @Y30LB27
*                                                            #Y30LB27*/
@RF00631 DS    0H                                                  0644
*/********************************************************************
** IF THIS WAS A REQUEST BLOCK WRITE UPDATE DSCB             #Y30LB27
******************************************************************** */
*                                                                  0644
*     IF ORDRSW=ON&WRITESW=ON&RPLVRETC=ZERO THEN/* DATA BLOCK      0644
*                                                            @Y30LB27*/
@RC00627 TM    ORDRSW,B'01001000'                                  0644
         BNO   @RF00644                                            0644
         L     @10,RPLVPTR                                         0644
         LH    @10,RPLVRETC(,@10)                                  0644
         N     @10,@CF02366                                        0644
         LTR   @10,@10                                             0644
         BNZ   @RF00644                                            0644
*       DCBFDAD=REQABS;             /* SET ABS ADDR IN DCB TO UPDATE
*                                      FMT 1                 #Y30LB27*/
         L     @10,DCBPTR(,VVIPTR)                                 0645
         MVC   DCBFDAD(8,@10),REQABS(REQPTR)                       0645
*   END;                            /*                       #Y30LB27*/
@RF00644 DS    0H                                                  0646
@DE00567 TM    RETRYSW,B'00000010'                                 0646
         BNO   @DC00567                                            0646
         TM    JRLDISAB,B'10000000'                                0646
         BZ    @DL00567                                            0646
@DC00567 DS    0H                                                  0647
*   RETURN;                         /* RETURN TO CALLER      #Y30LB27*/
@EL00004 DS    0H                                                  0647
@EF00004 DS    0H                                                  0647
@ER00004 L     @14,@SA00004                                        0647
         BR    @14                                                 0647
*   END VJLIO;                      /*                       #Y30LB27*/
*                                                                  0649
*/* ******************************************************************
**                                                                 0649
**     NAME = VJLCHKIO, SYNAD ERROR EXIT                           0649
**                                                                 0649
**     INPUT = NONE                                                0649
**                                                                 0649
**     PROCESS = IF AN I/O ERROR HAS OCCURED THE SYNADAF MACRO IS ISSUE
**     THE RESULT OF THE MACRO IS ISSUED TO THE LIBRARIAN AND THE  0649
**     SYSTEM OPERATOR. IF AN END OF TRACK CONDITION IS ENCOUNTERED,
**     PROCESSING CONTINUES WITH THE NEXT TRACK.                   0649
**                                                                 0649
**     OUTPUT = MESSAGE ISSUED TO LIBRARIAN AND OPERATOR. FLAGS TO THE
**     MAIN SEGMENT INDICATING THE I/O OPERATION SHOULD BE RE-ISSUED.
**                                                                 0649
******************************************************************** */
*                                                                  0649
*VJLCHKIO:                                                         0649
*   PROC OPTIONS(SAVE(14));         /*                       #Y30LB27
*                                                            #Y30LB27*/
VJLCHKIO ST    @14,@SA00005                                        0649
*/********************************************************************
** SYNAD PROCESSOR                                           #Y30LB27
******************************************************************** */
*                                                                  0650
*                                   /*                       #Y30LB27*/
*/********************************************************************
** I/O ERROR ON A CONTROL RECORD OPERATION RESULTS IN A SYNAD MSG AND
** DISABLE. I/O ERROR ON AN DATA RECORD OPERATION RESULTS IN A SYNAD
** MSG BUT PROCESSING CONTINUES WITH THE NEXT TRACK. THE INVENTORY 0650
** SHOULD BE BACKED UP AS SOON AS POSSIBLE. RECOVERY FROM THIS JOURNAL
** MAY LOSE INVENTORY   ENTRIES.                             @Y30LB27
******************************************************************** */
*                                                                  0650
*   IF CONTSW=ON THEN               /* FOR THE CONTROL RECORD@Y30LB27
*                                                            @Y30LB27*/
         TM    CONTSW,B'00010000'                                  0650
         BNO   @RF00650                                            0650
*     DO;                           /* YES SYNAD CONDITION   @Y30LB27*/
*       SYNADFSW=ON;                /* INDICATE ISSUE SYNADAF@Y30LB27*/
         OI    SYNADFSW,B'10000000'                                0652
*       RETRYSW=OFF;                /* NO RETRY ON CONTROL RECORD  0653
*                                                            @Y30LB27*/
*       TTRSW=OFF;                  /* NO TRACK SWITCH REQD          */
         NI    RETRYSW,B'11111100'                                 0654
*       VJLMSGID=MSGCONTE;          /* ISSUE ERROR MSG FOR CONTROL 0655
*                                      RECORD                @Y30LB27*/
         MVC   VJLMSGID(4),@CF00074                                0655
*     END;                          /*                       @Y30LB27*/
*   ELSE                            /* NOT CONTROL RECORD    @Y30LB27*/
*     DO;                           /* MUST BE DATA          @Y30LB27*/
         B     @RC00650                                            0657
@RF00650 DS    0H                                                  0658
*       IF WRITESW=ON THEN          /* WRITE OPERATION       #Y30LB27*/
         TM    WRITESW,B'01000000'                                 0658
         BNO   @RF00658                                            0658
*         IF IOBCSW(ONE:THREE)=ADDR(ERACCW)+EIGHT THEN             0659
*                                                                  0659
         L     @10,CCWPTR                                          0659
         LA    @10,ERACCW(,@10)                                    0659
         AL    @10,@CF00039                                        0659
         L     @09,IOBSTPTR                                        0659
         SLR   @08,@08                                             0659
         ICM   @08,7,IOBCSW(@09)                                   0659
         CR    @10,@08                                             0659
         BNE   @RF00659                                            0659
*           /*********************************************************/
*           /*                                                       */
*           /* NON-ZERO RESIDUAL READ COUNT ON ERASE COMMAND         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0660
*           DO;                     /* END OF TRACK          #Y30LB27*/
*             SYNADFSW=OFF;         /* NO MSG REQD           @YM01111*/
         NI    SYNADFSW,B'01111111'                                0661
*             RETRYSW=OFF;          /* NO RETRY REQD         @YM01111*/
*             TTRSW=OFF;            /* NO TRK SWITCH REQD    #Y30LB27*/
         NI    RETRYSW,B'11111100'                                 0663
*             DCBIFEC=''B;          /* CLEAR ERROR FLAGS     @Y30LB27*/
         L     @10,DCBPTR(,VVIPTR)                                 0664
         NI    DCBIFEC+40(@10),B'00111111'                         0664
*             IF CONTRPT=ZERO THEN  /* SET RECORDS PER TRK   @Y30LB27*/
         L     @10,CONTPTR                                         0665
         LH    @09,CONTRPT(,@10)                                   0665
         LTR   @09,@09                                             0665
         BNZ   @RF00665                                            0665
*               CONTRPT=REQR;       /* FOR RECOVERY          @Y30LB27*/
         SLR   @09,@09                                             0666
         IC    @09,REQR(,REQPTR)                                   0666
         STH   @09,CONTRPT(,@10)                                   0666
*             IF REQREM<MAXREQ THEN /* MAX REQ FIX           @Y30LB27*/
@RF00665 LH    @10,REQREM(,REQPTR)                                 0667
         C     @10,@CF02245                                        0667
         BNL   @RF00667                                            0667
*               DO;                 /* NO                    @Y30LB27*/
*                 IF ORDRSW=ON THEN /* ORDER                 #Y30LB27*/
         TM    ORDRSW,B'00001000'                                  0669
         BNO   @RF00669                                            0669
*                   REQTT=REQTT+ONE;/* UPDATE TRACK          #Y30LB27*/
         LA    @10,1                                               0670
         LH    @09,REQTT(,REQPTR)                                  0670
         N     @09,@CF02366                                        0670
         ALR   @10,@09                                             0670
         STH   @10,REQTT(,REQPTR)                                  0670
*                 ELSE              /* OR MSG                #Y30LB27*/
*                   REQTT=REQTT-ONE;/* UPDATE TRACK          #Y30LB27*/
         B     @RC00669                                            0671
@RF00669 LH    @10,REQTT(,REQPTR)                                  0671
         N     @10,@CF02366                                        0671
         BCTR  @10,0                                               0671
         STH   @10,REQTT(,REQPTR)                                  0671
*                 REQR=ZERO;        /* SET RECORD ONE        #Y30LB27*/
@RC00669 MVI   REQR(REQPTR),X'00'                                  0672
*                 REQREM=ZERO;      /* INDICATE EMPTY BUFFER @X04AC27*/
         SLR   @10,@10                                             0673
         STH   @10,REQREM(,REQPTR)                                 0673
*                 REQNXT=MAXREC;    /* SET DISPLACEMENT      @X04AC27*/
         MVC   REQNXT(2,REQPTR),@CH02038                           0674
*               END;                /*                       @Y30LB27*/
*           END;                    /*                       #Y30LB27*/
*         ELSE                      /*                       #Y30LB27*/
*           DO;                     /* A SYNAD CONDITION EXISTS    0677
*                                                            #Y30LB27*/
         B     @RC00659                                            0677
@RF00659 DS    0H                                                  0678
*             SYNADFSW=ON;          /* ISSUE SYNAD MACRO     #Y30LB27*/
         OI    SYNADFSW,B'10000000'                                0678
*             RETRYSW=ON;           /* RETRY REQD            @YM01111*/
*             TTRSW=ON;             /* NOT END OF TRACK      #Y30LB27*/
         OI    RETRYSW,B'00000011'                                 0680
*             VJLMSGID=MSGDATAE;    /* ERROR ON DATA RECORD  @Y30LB27*/
         MVC   VJLMSGID(4),@CF00383                                0681
*           END;                    /*                       @Y30LB27*/
*       IF READSW=ON THEN           /* READ OPERATION        @Y30LB27*/
@RC00659 DS    0H                                                  0683
@RF00658 TM    READSW,B'10000000'                                  0683
         BNO   @RF00683                                            0683
*         DO;                       /* A SYNAD CONDITION EXISTS    0684
*                                                            @Y30LB27*/
*           SYNADFSW=ON;            /* ISSUE SYNAD MACRO     @Y30LB27*/
         OI    SYNADFSW,B'10000000'                                0685
*           TTRSW=ON;               /* NOT END OF TRACK      @Y30LB27*/
*           RETRYSW=OFF;            /* NO RETRY              @Y30LB27*/
         OI    TTRSW,B'00000001'                                   0687
         NI    RETRYSW,B'11111101'                                 0687
*           VJLMSGID=MSGDATAE;      /* ERROR ON DATA RECORD  @Y30LB27*/
         MVC   VJLMSGID(4),@CF00383                                0688
*         END;                      /*                       @Y30LB27*/
*     END;                          /* NOT CONTROL RECORD    @Y30LB27
*                                                            @Y30LB27*/
@RF00683 DS    0H                                                  0691
*/********************************************************************
** SYNADAF TO BE ISSUED                                      @Y30LB27
******************************************************************** */
*                                                                  0691
*   DO WHILE(SYNADFSW=ON);          /* SYNADAF MACRO TO BE ISSUED  0691
*                                                            @Y30LB27*/
@RC00650 B     @DE00691                                            0691
@DL00691 DS    0H                                                  0692
*     SYNADFSW=OFF;                 /* ISSUE SYNAD MACRO     @Y30LB27*/
         NI    SYNADFSW,B'01111111'                                0692
*     CALL VJLWTO;                  /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0693
*     VJLMSGID=MSGSYNE;             /* ISSUE HEADER          @Y30LB27*/
         MVC   VJLMSGID(4),@CF00158                                0694
*     REG1=ADDR(IOBSTDRD);          /* POINT TO THE IOB      @Y30LB27*/
         L     REG1,IOBSTPTR                                       0695
*LSYNDAF1:                                                         0696
*     GEN(SYNADAF ACSMETH=EXCP,PARM1=(REG1));/* ISSUE MACRO  @Y30LB27*/
LSYNDAF1 SYNADAF ACSMETH=EXCP,PARM1=(REG1)
*     DCBIFEC='0'B;                 /* CLEAR THE DCB ERROR FLAGS   0697
*                                                            @ZA09550*/
         L     @10,DCBPTR(,VVIPTR)                                 0697
         NI    DCBIFEC+40(@10),B'00111111'                         0697
*     SYNSAVE=REG1;                 /* SAVE REG1             @Y30LB27*/
         LR    SYNSAVE,REG1                                        0698
*     MSGLEN1=SIXTY;                /* SET LENGTH            @Y30LB27*/
         MVI   MSGLEN1,X'3C'                                       0699
*     MSGTEXT1=SYNSAVE+SIXEIGHT;    /* SET ADDR              @Y30LB27*/
         LA    @10,68                                              0700
         ALR   @10,SYNSAVE                                         0700
         STCM  @10,7,MSGTEXT1                                      0700
*     CALL VJLWTO;                  /* ISSUE THE ERROR MSG   #Y30LB27
*                                                            @Y30LB27*/
         BAL   @14,VJLWTO                                          0701
*     IF CONTSW=ON THEN             /* WAS IT CONTROL RECORD @Y30LB27*/
         TM    CONTSW,B'00010000'                                  0702
         BNO   @RF00702                                            0702
*       DO;                         /* NO                    @Y30LB27*/
*         VJLMSGID=MSGLSTE;         /* ISSUE CONT MSG        @Y30LB27*/
         MVC   VJLMSGID(4),@CF00032                                0704
*         CALL VJLWTO;              /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0705
*       END;                        /*                       @Y30LB27*/
*     ELSE                          /*                       @Y30LB27*/
*       DO;                         /* NO                    @Y30LB27*/
         B     @RC00702                                            0707
@RF00702 DS    0H                                                  0708
*         VJLMSGID=MSGJCONT;        /* ISSUE CONT MSG        @Y30LB27*/
         MVC   VJLMSGID(4),@CF00039                                0708
*         CALL VJLWTO;              /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0709
*       END;                        /*                       @Y30LB27*/
*/********************************************************************
** ISSUE THE MSG AND RELEASE THE SYNAD WORK AREA             @Y30LB27
******************************************************************** */
*                                                                  0711
*LSYDRLS1:                                                         0711
*     GEN(SYNADRLS);                /* FREE THE SYNADAF WORK AREA  0711
*                                                            @Y30LB27*/
@RC00702 DS    0H                                                  0711
LSYDRLS1 SYNADRLS
*     IF WRITESW=ON&CONTSW=OFF THEN /* WAS IT A NORMAL WRITE       0712
*                                      OPERATION             @Y30LB27*/
         TM    WRITESW,B'01000000'                                 0712
         BNO   @RF00712                                            0712
         TM    CONTSW,B'00010000'                                  0712
         BNZ   @RF00712                                            0712
*       DO;                         /* YES                   @Y30LB27*/
*         IO=ERACOMD;               /* SET IO CMD TO NOP     @Y30LB27*/
         L     @10,CCWPTR                                          0714
         MVC   IO(1,@10),ERACOMD                                   0714
*         ERA=NOPCOMD;              /* FORCE ERASE CMD       @Y30LB27*/
         MVC   ERA(1,@10),NOPCOMD                                  0715
*         ECB=''B;                  /* CLEAR THE ECB         @Y30LB27*/
         L     @10,ECBPTR                                          0716
         XC    ECB(4,@10),ECB(@10)                                 0716
*         REG1=ADDR(IOBSTDRD);      /* POINT TO THE IOB      @Y30LB27*/
         L     REG1,IOBSTPTR                                       0717
*LEXCP2:                                                           0718
*         GEN(EXCP (REG1));         /* ERASE THE DATA BLOCK AND REST
*                                      OF THE TRACK          @Y30LB27*/
LEXCP2   EXCP (REG1)
*         REG1=ADDR(ECB);           /* SET ECB ADDR          @Y30LB27*/
         L     REG1,ECBPTR                                         0719
*LWAIT2:                                                           0720
*         GEN(WAIT ECB=(REG1));     /* WAIT FOR I/O TO COMPLETE    0720
*                                                            @Y30LB27*/
LWAIT2   WAIT ECB=(REG1)
*         DCBIFEC=''B;              /* CLEAR THE ERROR FLAGS @Y30LB27*/
         L     @10,DCBPTR(,VVIPTR)                                 0721
         NI    DCBIFEC+40(@10),B'00111111'                         0721
*       END;                        /*                       @Y30LB27*/
*   END;                            /*                       @Y30LB27
*                                                            @Y30LB27*/
@RF00712 DS    0H                                                  0723
@DE00691 TM    SYNADFSW,B'10000000'                                0723
         BO    @DL00691                                            0723
*/********************************************************************
** TRACK SWITCH AND RETRY                                    @Y30LB27
******************************************************************** */
*                                                                  0724
*   DO WHILE(TTRSW=ON);             /* TRACK SWITCH CONDITION@Y30LB27
*                                                            @Y30LB27*/
         B     @DE00724                                            0724
@DL00724 DS    0H                                                  0725
*     IF ORDRSW=ON THEN             /* ORDER                 @Y30LB27*/
         TM    ORDRSW,B'00001000'                                  0725
         BNO   @RF00725                                            0725
*       REQTT=REQTT+ONE;            /* UPDATE TRACK          @Y30LB27*/
         LA    @10,1                                               0726
         LH    @09,REQTT(,REQPTR)                                  0726
         N     @09,@CF02366                                        0726
         ALR   @10,@09                                             0726
         STH   @10,REQTT(,REQPTR)                                  0726
*     ELSE                          /* OR MSG                @Y30LB27*/
*       REQTT=REQTT-ONE;            /* UPDATE TRACK          @Y30LB27*/
         B     @RC00725                                            0727
@RF00725 LH    @10,REQTT(,REQPTR)                                  0727
         N     @10,@CF02366                                        0727
         BCTR  @10,0                                               0727
         STH   @10,REQTT(,REQPTR)                                  0727
*     REQR=ZERO;                    /* SET RECORD ONE        @Y30LB27*/
@RC00725 MVI   REQR(REQPTR),X'00'                                  0728
*     TTRSW=OFF;                    /* SET TRACK SWITCH INDICATOR OFF
*                                                            @Y30LB27*/
         NI    TTRSW,B'11111110'                                   0729
*     CALL VJLCNVRT;                /* CONVERT TTR           @YM01111*/
         BAL   @14,VJLCNVRT                                        0730
*     REQREM=MAXREC;                /* SET FULL BUFFER       @YM01111*/
         MVC   REQREM(2,REQPTR),@CH02038                           0731
*     REQNXT=ONE;                   /* SET INDEX             @YM01111*/
         LA    @10,1                                               0732
         STH   @10,REQNXT(,REQPTR)                                 0732
*     IF WRITESW=ON&RPLVRETC=ZERO THEN/* TRACKS EXHAUSTED    @YM01111*/
         TM    WRITESW,B'01000000'                                 0733
         BNO   @RF00733                                            0733
         L     @09,RPLVPTR                                         0733
         LH    @08,RPLVRETC(,@09)                                  0733
         N     @08,@CF02366                                        0733
         LTR   @08,@08                                             0733
         BNZ   @RF00733                                            0733
*       DO;                         /* NO                    @X04AC27
*                                                            @Y30LB27*/
*/********************************************************************
** CALL I/O PROCESSOR AND MOVE ORDER TO DATA BLOCK           @Y30LB27
******************************************************************** */
*                                                                  0735
*         JRNLPTR=ADDR(DATAD(REQNXT));/* SET LIST PTR        @Y30LB27*/
         L     JRNLPTR,DATAPTR                                     0735
         LA    JRNLPTR,DATAD-1(@10,JRNLPTR)                        0735
*         JRNLLEN=MOVELEN+TWELVE;   /* SET LENGTH            @ZA13484*/
         LA    @10,12                                              0736
         AL    @10,MOVELEN                                         0736
         STCM  @10,15,JRNLLEN(JRNLPTR)                             0736
*         JRNLCODE=RPLRMSCC;        /* SET REASON CODE       @OZ09545*/
         MVC   JRNLCODE(2,JRNLPTR),RPLRMSCC(@09)                   0737
*         JRNLFLGS=ZERO;            /* CLEAR FLAGS           @Y30LB27*/
         SLR   @10,@10                                             0738
         STCM  @10,3,JRNLFLGS(JRNLPTR)                             0738
*         JRNLDATE=RPLVDATE;        /* SET CURRENT DATE      @ZA13484*/
         MVC   JRNLDATE(4,JRNLPTR),RPLVDATE(@09)                   0739
*         JRNLDTFG=ON;              /* DATE PRESENT          @ZA13484*/
         OI    JRNLDTFG(JRNLPTR),B'01000000'                       0740
*         IF RPLFTIME=ON THEN       /* FIRST CALL            @Y30LB27*/
         TM    RPLFTIME(@09),B'10000000'                           0741
         BNO   @RF00741                                            0741
*           JRNLFTIM=ON;            /* SET RECOVERY FLAG     @Y30LB27*/
         OI    JRNLFTIM(JRNLPTR),B'10000000'                       0742
*         JRNLUTIL(ONE:ONE+MOVELEN-ONE)=ORDRLST(ONE:MOVELEN-ONE);/*
*                                                            @Y30LB27*/
@RF00741 L     @10,MOVELEN                                         0743
         LR    @03,@10                                             0743
         BCTR  @03,0                                               0743
         L     @09,ORDRPTR                                         0743
         EX    @03,@SM02374                                        0743
*         REQREM=REQREM-MOVELEN-TWELVE;/* DECR BYTES REMAINING     0744
*                                                            @ZA13484*/
         LA    @03,12                                              0744
         LH    @09,REQREM(,REQPTR)                                 0744
         SLR   @09,@10                                             0744
         SLR   @09,@03                                             0744
         STH   @09,REQREM(,REQPTR)                                 0744
*         REQNXT=REQNXT+MOVELEN+TWELVE;/* INCR DISPLACEMENT  @ZA13484*/
         AH    @10,REQNXT(,REQPTR)                                 0745
         ALR   @10,@03                                             0745
         STH   @10,REQNXT(,REQPTR)                                 0745
*         JRNLPTR=ADDR(DATAD(REQNXT));/* SET LIST PTR        @Y30LB27*/
         L     JRNLPTR,DATAPTR                                     0746
         LA    JRNLPTR,DATAD-1(@10,JRNLPTR)                        0746
*         IF REQREM=>FOUR THEN      /* CAN END OF BLOCK BE SET     0747
*                                                            @Y30LB27*/
         C     @09,@CF00037                                        0747
         BL    @RF00747                                            0747
*           JRNLLEN=ZERO;           /* SKIP REST OF BLOCK    @Y30LB27*/
         SLR   @10,@10                                             0748
         STCM  @10,15,JRNLLEN(JRNLPTR)                             0748
*       END;                        /*                       @Y30LB27*/
@RF00747 DS    0H                                                  0750
*   END;                            /*                       @Y30LB27*/
@RF00733 DS    0H                                                  0750
@DE00724 TM    TTRSW,B'00000001'                                   0750
         BO    @DL00724                                            0750
*   RETURN;                         /*                       @Y30LB27*/
@EL00005 DS    0H                                                  0751
@EF00005 DS    0H                                                  0751
@ER00005 L     @14,@SA00005                                        0751
         BR    @14                                                 0751
*   END VJLCHKIO;                   /*                       @Y30LB27*/
*                                                                  0753
*/* ******************************************************************
**                                                                 0753
**     NAME = VJLCNVRT, CONVERSION SEGMENT                         0753
**                                                                 0753
**     INPUT = REQTTR                                              0753
**                                                                 0753
**     PROCESS = THIS SEGMENT CONVERTS THE TTR ADDRESSES TO ABSOLUTE
**     DISK AND SECTOR ADDRESS, VIA IECPCNVT AND IEC0SCR1 ROUTINES.
**                                                                 0753
**     OUTPUT = REQABS AND REQRPS                                  0753
**                                                                 0753
******************************************************************** */
*                                                                  0753
*VJLCNVRT:                                                         0753
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VJLCNVRT ST    @14,@SA00006                                        0753
*/********************************************************************
** CONVERSION SEGMENT                                        @Y30LB27
******************************************************************** */
*                                                                  0754
*   IF CONTSW=OFF THEN              /* SKIP CHECK IF CONTROL RECORD
*                                      INIT                  @Y30LB27*/
         TM    CONTSW,B'00010000'                                  0754
         BNZ   @RF00754                                            0754
*     DO;                           /* CONTROL RECORD INITIALIZATION
*                                                            @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** IF ALL TRACKS EXHAUSTED ON ENTRY THE JOURNAL IS DISABLED AND    0756
** A DATA LOST MSG IS ISSUED                                 @Y30LB27
******************************************************************** */
*                                                                  0756
*       IF REQR=ZERO&TRKSREM=ZERO THEN/* JOURNAL EXHAUSTED   @Y30LB27*/
         CLI   REQR(REQPTR),0                                      0756
         BNE   @RF00756                                            0756
         L     @10,CONTPTR                                         0756
         LH    @10,TRKSREM(,@10)                                   0756
         LTR   @10,@10                                             0756
         BNZ   @RF00756                                            0756
*         DO;                       /* YES ISSUE ERROR MSG   @Y30LB27*/
*           VJLMSGID=MSGEXHE;       /* SET MSG COMPLETION INDEX    0758
*                                                            @Y30LB27*/
         MVC   VJLMSGID(4),@CF00033                                0758
*           CALL VJLWTO;            /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0759
*           VJLMSGID=MSGLSTE;       /* SET MSG COMPLETION INDEX    0760
*                                                            @Y30LB27*/
         MVC   VJLMSGID(4),@CF00032                                0760
*           CALL VJLWTO;            /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0761
*           RETURN;                 /* RETURN TO CALLER      @Y30LB27*/
@EL00006 DS    0H                                                  0762
@EF00006 DS    0H                                                  0762
@ER00006 L     @14,@SA00006                                        0762
         BR    @14                                                 0762
*         END;                      /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** IF TRACKS THRESHOLD IS EXCEEDED THE OPERATOR IS INFORMED, BUT HE
** MUST DISABLE MSVC                                         @Y30LB27
******************************************************************** */
*                                                                  0764
*       IF REQR=ZERO&TRKSTHR=ZERO&TRKSREM=TWO THEN/* AT THRESHOLD  0764
*                                                            @Y30LB27*/
@RF00756 CLI   REQR(REQPTR),0                                      0764
         BNE   @RF00764                                            0764
         L     @10,CONTPTR                                         0764
         LH    @09,TRKSTHR(,@10)                                   0764
         LTR   @09,@09                                             0764
         BNZ   @RF00764                                            0764
         CLC   TRKSREM(2,@10),@CH00041                             0764
         BNE   @RF00764                                            0764
*         DO;                       /* YES                   @Y30LB27*/
*           VJLMSGID=MSGTHRE;       /* SET THE MSG INDEX     @Y30LB27*/
         MVC   VJLMSGID(4),@CF02223                                0766
*           CALL VJLWTO;            /* INFORM THE OPERATOR   @Y30LB27*/
         BAL   @14,VJLWTO                                          0767
*         END;                      /*                       @Y30LB27
*                                                            @Y30LB27*/
*/********************************************************************
** IF ALL TRACKS EXHAUSTED THE JOURNAL IS INDICATED DISABLED       0769
******************************************************************** */
*                                                                  0769
*       IF REQR=ZERO&TRKSREM=ONE THEN/* JOURNAL EXHAUSTED    @Y30LB27*/
@RF00764 CLI   REQR(REQPTR),0                                      0769
         BNE   @RF00769                                            0769
         L     @10,CONTPTR                                         0769
         CLC   TRKSREM(2,@10),@CH00043                             0769
         BNE   @RF00769                                            0769
*         DO;                       /* YES ISSUE ERROR MSG   @Y30LB27*/
*           VJLMSGID=MSGEXHE;       /* SET MSG COMPLETION INDEX    0771
*                                                            @Y30LB27*/
         MVC   VJLMSGID(4),@CF00033                                0771
*           CALL VJLWTO;            /* ISSUE THE ERROR MSG   @Y30LB27*/
         BAL   @14,VJLWTO                                          0772
*         END;                      /*                       @Y30LB27
*                                                            @Y30LB27*/
*       REQR=REQR+ONE;              /* ORDER BLOCK           #Y30LB27*/
@RF00769 LA    @10,1                                               0774
         SLR   @09,@09                                             0774
         IC    @09,REQR(,REQPTR)                                   0774
         ALR   @10,@09                                             0774
         STC   @10,REQR(,REQPTR)                                   0774
*       IF REQR=ONE&TRKSREM^=ZERO THEN/* DO NOT DECR PAST ZERO     0775
*                                                            #Y30LB27*/
         CLI   REQR(REQPTR),1                                      0775
         BNE   @RF00775                                            0775
         L     @10,CONTPTR                                         0775
         LH    @09,TRKSREM(,@10)                                   0775
         LTR   @09,@09                                             0775
         BZ    @RF00775                                            0775
*         TRKSREM=TRKSREM-ONE;      /* DECR COUNT            #Y30LB27*/
         BCTR  @09,0                                               0776
         STH   @09,TRKSREM(,@10)                                   0776
*       IF REQR=ONE&TRKSTHR^=ZERO THEN/* DO NOT DECR PAST ZERO     0777
*                                                            #Y30LB27*/
@RF00775 CLI   REQR(REQPTR),1                                      0777
         BNE   @RF00777                                            0777
         L     @10,CONTPTR                                         0777
         LH    @09,TRKSTHR(,@10)                                   0777
         LTR   @09,@09                                             0777
         BZ    @RF00777                                            0777
*         TRKSTHR=TRKSTHR-ONE;      /* DECR COUNT            #Y30LB27*/
         BCTR  @09,0                                               0778
         STH   @09,TRKSTHR(,@10)                                   0778
*     END;                          /* END CONTROL REC INIT  @Y30LB27*/
@RF00777 DS    0H                                                  0780
*   RFY                                                            0780
*    (REG2,                                                        0780
*     REG8,                                                        0780
*     REG9) RSTD;                   /* REGISTERS REFERENCED DIRECTLY
*                                      BY THIS PROCEDURE     @Y30LB27
*                                                            @Y30LB27*/
@RF00754 DS    0H                                                  0781
*/********************************************************************
** CONVERT TTR TO ABSOLUTE DISK ADDRESS                      @Y30LB27
******************************************************************** */
*                                                                  0781
*   REG0=REQTTR;                    /* SET TTR TO BE CONVERTED     0781
*                                                            @Y30LB27*/
         L     REG0,REQTTR(,REQPTR)                                0781
*   REG1=DEBPTR;                    /* POINT TO DEB          @Y30LB27*/
         L     @10,DCBPTR(,VVIPTR)                                 0782
         L     REG1,DEBPTR+40(,@10)                                0782
*   REG2=ADDR(REQABS);              /* AREA TO RECEIVE ABS ADDR    0783
*                                                            @Y30LB27*/
         LA    REG2,REQABS(,REQPTR)                                0783
*   REG8=REG11;                     /* MAKE SURE SAVEREGS IN 1ST BASE
*                                      REG                   @Y30LB27*/
         LR    REG8,REG11                                          0784
*   STM(REG9,REG13,SAVEREGS);       /* CONVERSION RTN USES REG 9 THRU
*                                      REG13 AND DOES NOT RESTORE  0785
*                                      THEM                  @Y30LB27*/
         STM   REG9,REG13,SAVEREGS                                 0785
*   CALL IECPCNVT;                  /* CALL CONVERSION RTN   @Y30LB27*/
         L     @10,CVTPTR                                          0786
         L     @15,CVTPCNVT(,@10)                                  0786
         BALR  @14,@15                                             0786
*   REG11=REG8;                     /* RESTORE THE 1ST BASE REG    0787
*                                                            @Y30LB27*/
         LR    REG11,REG8                                          0787
*   LM(REG9,REG13,SAVEREGS);        /* RESTORE ALL MODULE DEPENDENT
*                                      REGS                  @Y30LB27
*                                                            @Y30LB27*/
         LM    REG9,REG13,SAVEREGS                                 0788
*/********************************************************************
** CONVERT BLOCK ADDRESS TO SECTOR ADDRESS FOR RPS DEVICE    @Y30LB27
******************************************************************** */
*                                                                  0789
*   IF UCB2OPT3=ON THEN             /* RPS DEVICE            @ZM30725*/
         L     @10,DEBDAPTR                                        0789
         L     @10,UCBPTR(,@10)                                    0789
         TM    UCB2OPT3(@10),B'00010000'                           0789
         BNO   @RF00789                                            0789
*     DO;                           /* YES                   @ZM30725*/
*       DDR=REQR;                   /* SET THE RECORD FOR THE RPS  0791
*                                      CONVERSION ROUTINE    @Y30LB27*/
         MVC   DDR(1),REQR(REQPTR)                                 0791
*       REG0=DDKR;                  /* SET VALUE TO BE CONVERTED   0792
*                                                            @Y30LB27*/
         ICM   REG0,15,DDKR                                        0792
*       RPSSRC(ONE)=UCBTBYT4;       /* SET UCB TYPE BYTE 1   @Y30LB27*/
         MVC   RPSSRC(1),UCBTBYT4(@10)                             0793
*       RPSSRC(TWO:FOUR)=ADDR(REQRPS);/* SET AREA ADDR TO RECEIVE THE
*                                      SECTOR ADDR           @Y30LB27*/
         LA    @10,REQRPS(,REQPTR)                                 0794
         STCM  @10,7,RPSSRC+1                                      0794
*       REG2=RPSSRC;                /* CONVERSION RTN COURCE @Y30LB27*/
         L     REG2,RPSSRC                                         0795
*       REG8=REG11;                 /* RESTORE BASE REG      @Y30LB27*/
         LR    REG8,REG11                                          0796
*       STM(REG9,REG13,SAVEREGS);   /* SAVE MODULE DEPENDENT       0797
*                                      REGISTERS             @Y30LB27*/
         STM   REG9,REG13,SAVEREGS                                 0797
*       CALL IEC0SCR1;              /* CALL SECTOR CONVERSION ROUTINE
*                                                            @Y30LB27*/
         L     @10,CVTPTR                                          0798
         L     @15,CVT0SCR1(,@10)                                  0798
         BALR  @14,@15                                             0798
*       REG11=REG8;                 /* RESTORE BASE 2ND BASE REG   0799
*                                                            @Y30LB27*/
         LR    REG11,REG8                                          0799
*       LM(REG9,REG13,SAVEREGS);    /* RESTOR ADDR REGS      @Y30LB27*/
         LM    REG9,REG13,SAVEREGS                                 0800
*     END;                          /* END RPS DEVICE        @ZM30725*/
*   RETURN;                         /*                       @Y30LB27*/
         B     @EL00006                                            0802
*   RFY                                                            0803
*    (REG2,                                                        0803
*     REG8,                                                        0803
*     REG9) UNRSTD;                 /* RELEASE THE REGS TO THE     0803
*                                      COMPILER              @Y30LB27*/
*   END VJLCNVRT;                   /*                       @Y30LB27*/
         B     @EL00006                                            0804
*                                                                  0805
*/* ******************************************************************
**                                                                 0805
**     NAME = VJLWTO, LIBRARIAN AND OPERATOR COMMUNICATION         0805
**                                                                 0805
**     INPUT = INTERNAL WORK FLAGS                                 0805
**                                                                 0805
**     PROCESS = INFORM SYSTEM OPERATOR AND THE LIBRARIAN OF THE TYPE
**     OF PROCESSING ERROR. IF LIBRARIAN MESSAGES ARE TO BE JOURNALED,
**     ICBVJL00 WILL TURN THE JOURNAL FLAG OFF TO PREVENT RECURSIVE
**     ENTRY.                                                      0805
**                                                                 0805
**     OUTPUT = INFORMATIONAL MESSAGE IS CONVEYED. REASON AND RETURN
**     CODES ARE RETRIEVED.                                        0805
**                                                                 0805
******************************************************************** */
*                                                                  0805
*VJLWTO:                                                           0805
*   PROC OPTIONS(SAVE(14));         /*                       @Y30LB27
*                                                            @Y30LB27*/
VJLWTO   ST    @14,@SA00007                                        0805
*/********************************************************************
** MESSAGE SEGMENT                                           @Y30LB27
** A COMPLETION MESSAGE IS CONSTRUCTED AND ICBVOP00 IS       @Y30LB27
** INVOKED TO ISSUE THE MSG                                  @Y30LB27
******************************************************************** */
*                                                                  0806
*                                   /*                       @Y30LB27*/
*/********************************************************************
** CALL THE MSG PROCESSOR ICBVOP00                           @Y30LB27
******************************************************************** */
*                                                                  0806
*                                   /*                       @Y30LB27*/
*/*********************************************************************
* * IF LIBRARIAN MSGS ARE TO BE JOURNALLED SAVE FLAG          @Y30LB27
* ********************************************************************/
*                                                                  0806
*   IF VVIFLG3=ON THEN              /* LIB MSGS JOURNALED    @Y30LB27*/
         TM    VVIFLG3(VVIPTR),B'00010000'                         0806
         BNO   @RF00806                                            0806
*     DO;                           /* YES                   @Y30LB27*/
*       VVIFLG3=OFF;                /* TURN JOURNALLING SWITCH OFF   */
         NI    VVIFLG3(VVIPTR),B'11101111'                         0808
*       FLG3SW=ON;                  /* REMEMBER IT FOR LATER @Y30LB27*/
         OI    FLG3SW,B'01000000'                                  0809
*     END;                          /*                       @Y30LB27
*                                                            @Y30LB27*/
*   MSGID=VJLMSGTB(VJLMSGID);       /* SET THE ID            @Y30LB27*/
@RF00806 L     @10,VJLMSGID                                        0811
         ALR   @10,@10                                             0811
         LH    @10,VJLMSGTB-2(@10)                                 0811
         ST    @10,MSGID                                           0811
*   REG1=ADDR(MSGRQ);               /* POINT TO MSG REQUEST LIST   0812
*                                                            @Y30LB27*/
         LA    REG1,MSGRQ                                          0812
*   CALL ICBVOP00;                  /* CALL MSG PROCESSOR    @Y30LB27*/
         L     @15,@CV01971                                        0813
         BALR  @14,@15                                             0813
*   MSGRQ=''B;                      /* CLEAR IT              @Y30LB27*/
         XC    MSGRQ(32),MSGRQ                                     0814
*   MSGRPLV=RPLVPTR;                /* RESET RPLV PTR        @Y30LB27*/
         L     @10,RPLVPTR                                         0815
         ST    @10,MSGRPLV                                         0815
*   IF VJLMSGID=MSGTHRE THEN        /* THRESHOLD MESSAGE     @X04AC27*/
         CLC   VJLMSGID(4),@CF02223                                0816
         BNE   @RF00816                                            0816
*     DO;                           /* YES                   @Y30LB27*/
*       RPLVRETC=ZERO;              /* CLEAR RETURN CODE     @Y30LB27*/
         SLR   @09,@09                                             0818
         STH   @09,RPLVRETC(,@10)                                  0818
*       RPLRCODE=ZERO;              /* CLEAR REASON CODE     @Y30LB27*/
         STH   @09,RPLRCODE(,@10)                                  0819
*     END;                          /* END THRESHOLD ERROR   @Y30LB27*/
*   IF VJLMSGID=MSGEXHE THEN        /* TRACKS EXHAUSTED      @X04AC27*/
@RF00816 CLC   VJLMSGID(4),@CF00033                                0821
         BNE   @RF00821                                            0821
*     DO;                           /* YES                   @X04AC27*/
*       VVIFLG2=ON;                 /* INDICATE JOURNAL DISABLE    0823
*                                                            @X04AC27*/
         OI    VVIFLG2(VVIPTR),B'00100000'                         0823
*       RPLVRETC=ZERO;              /* CLEAR RETURN CODE     @X04AC27*/
         SLR   @10,@10                                             0824
         L     @09,RPLVPTR                                         0824
         STH   @10,RPLVRETC(,@09)                                  0824
*       RPLRCODE=ZERO;              /* CLEAR REASON CODE     @X04AC27*/
         STH   @10,RPLRCODE(,@09)                                  0825
*     END;                          /* END THRESHOLD ERROR   @X04AC27
*                                                            @X04AC27*/
*   IF(VJLMSGID=MSGLSTE)&(VVIDCBAD^=ZERO)&/*                 @ZA09550*/
*       (RPLVVIN=OFF)&(JRLDISAB=OFF) THEN/*                  @ZA09550*/
*                                                                  0827
@RF00821 CLC   VJLMSGID(4),@CF00032                                0827
         BNE   @RF00827                                            0827
         L     @10,VVIDCBAD(,VVIPTR)                               0827
         LTR   @10,@10                                             0827
         BZ    @RF00827                                            0827
         L     @10,RPLVPTR                                         0827
         TM    RPLVVIN(@10),B'00001000'                            0827
         BNZ   @RF00827                                            0827
         TM    JRLDISAB,B'10000000'                                0827
         BNZ   @RF00827                                            0827
*     /***************************************************************/
*     /*                                                             */
*     /* LOGICALLY DISABLE JOURNAL WITHOUT CLOSING IT BY SETTING ON  */
*     /* THE JOURNAL DISABLE FLAG IN THE MSVC CONTROL BLOCK AND      */
*     /* WRITING A MESSAGE TO THE OPERATOR                   @ZA09550*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0828
*     DO;                           /*                       @ZA09550*/
*       VVIFLG2=ON;                 /* SET ON JOURNAL DISABLE FLAG 0829
*                                                            @ZA09550*/
         OI    VVIFLG2(VVIPTR),B'00100000'                         0829
*       JRLDISAB=ON;                /* REMEMBER IT           @ZA09550*/
         OI    JRLDISAB,B'10000000'                                0830
*       VJLMSGID=MSGDISAB;          /* JOURNAL DISABLE MSG   @ZA09550*/
         LA    @10,13                                              0831
         ST    @10,VJLMSGID                                        0831
*       MSGID=VJLMSGTB(VJLMSGID);   /* SET THE ID            @ZA09550*/
         ALR   @10,@10                                             0832
         LH    @10,VJLMSGTB-2(@10)                                 0832
         ST    @10,MSGID                                           0832
*       REG1=ADDR(MSGRQ);           /* POINT TO MSG REQUEST LIST   0833
*                                                            @ZA09550*/
         LA    REG1,MSGRQ                                          0833
*       CALL ICBVOP00;              /* CALL MSG PROCESSOR    @ZA09550*/
         L     @15,@CV01971                                        0834
         BALR  @14,@15                                             0834
*       MSGRQ=''B;                  /* CLEAR IT              @ZA09550*/
         XC    MSGRQ(32),MSGRQ                                     0835
*       MSGRPLV=RPLVPTR;            /* RESET RPLV PTR        @ZA09550*/
         L     @10,RPLVPTR                                         0836
         ST    @10,MSGRPLV                                         0836
*     END;                          /*                       @ZA09550
*                                                            #Y30LB27*/
*/*********************************************************************
* * IF LIBRARIAN MSGS ARE TO BE JOURNALLED RESTORE FLAG       @Y30LB27
* ********************************************************************/
*                                                                  0838
*   IF FLG3SW=ON THEN               /* LIB MSGS JOURNALED    @Y30LB27*/
@RF00827 TM    FLG3SW,B'01000000'                                  0838
         BNO   @RF00838                                            0838
*     DO;                           /* YES                   @Y30LB27*/
*       VVIFLG3=ON;                 /* TURN FLAG SWITCH OFF  @Y30LB27*/
         OI    VVIFLG3(VVIPTR),B'00010000'                         0840
*       FLG3SW=OFF;                 /* RESTORE JRNL SW       @Y30LB27*/
         NI    FLG3SW,B'10111111'                                  0841
*     END;                          /*                       @Y30LB27*/
*   END VJLWTO;                     /*                       @Y30LB27*/
@EL00007 DS    0H                                                  0843
@EF00007 DS    0H                                                  0843
@ER00007 L     @14,@SA00007                                        0843
         BR    @14                                                 0843
*VJLPATCH:                                                         0844
*   PROC OPTIONS(NOSAVE);           /*                       @Y30LB27
*                                                            @Y30LB27*/
VJLPATCH DS    0H                                                  0845
*/********************************************************************
** ICBVJL00 PATCH AREA                                       @Y30LB27
******************************************************************** */
*                                                                  0845
*   GEN;                                                           0845
*                                   /*                       @Y30LB27*/
         DS   0F                       ALIGNMENT FOR DC       @Y30LB27
VJLPACHA NOP     *                     LET ASSEM CALC BASE/DIS@Y30LB27
         DC   20F'0'                   PATCH AREA              @Y30LB27
VJLPACHB NOP     *                     LET ASSEM CALC BASE/DIS@Y30LB27
         DC   20F'0'                   PATCH AREA              @Y30LB27
VJLPACHC NOP     *                     LET ASSEM CALC BASE/DIS@Y30LB27
         DC   20F'0'                   PATCH AREA              @Y30LB27
VJLPACHD NOP     *                     LET ASSEM CALC BASE/DIS@Y30LB27
         DC   20F'0'                   PATCH AREA              @Y30LB27
VJLPACHE NOP     *                     LET ASSEM CALC BASE/DIS@Y30LB27
         DC   20F'0'                   PATCH AREA              @Y30LB27
*   END VJLPATCH;                   /*                       @Y30LB27*/
@EL00008 DS    0H                                                  0846
@EF00008 DS    0H                                                  0846
@ER00008 BR    @14                                                 0846
*   END ICBVJL00                    /*                       @Y30LB27*/
*                                                                  0847
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEZVVICB)                                       */
*/*%INCLUDE SYSLIB  (IEZRPLV )                                       */
*/*%INCLUDE SYSLIB  (IEZINIT )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IHAECB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZMSGRQ)                                       */
*                                                                  0847
*       ;                                                          0847
@DATA    DS    0H
@SM02368 MVC   MSG(0),MSGBUF(@10)
@SM02374 MVC   JRNLUTIL(0,JRNLPTR),ORDRLST(@09)
@SM02377 MVC   DSCBJRNL(0),VVIUCAT(VVIPTR)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    1F
@SA00004 DS    1F
@SA00005 DS    1F
@SA00006 DS    1F
@SA00003 DS    1F
@SA00007 DS    0F
         DS    1F
         DS    0F
@CF00043 DC    F'1'
@CH00043 EQU   @CF00043+2
@CF00041 DC    F'2'
@CH00041 EQU   @CF00041+2
@CF00457 DC    F'3'
@CF00037 DC    F'4'
@CF00074 DC    F'5'
@CF00383 DC    F'6'
@CF00158 DC    F'7'
@CF00039 DC    F'8'
@CF00598 DC    F'9'
@CF02223 DC    F'10'
@CF00033 DC    F'11'
@CF00032 DC    F'12'
@CF00099 DC    F'16'
@CF02341 DC    F'132'
@CF01944 DC    F'256'
@CF02245 DC    F'268'
@CF02038 DC    F'1024'
@CH02038 EQU   @CF02038+2
@CF01998 DC    F'1032'
@CF02366 DC    XL4'0000FFFF'
@CV01971 DC    V(ICBVOP00)
@CV01972 DC    V(ICBVIN00)
         DS    0D
RPLVPTR  DS    A
DEBDAPTR DS    A
DEBEXPTR DS    A
DEBSBPTR DS    A
IOBPRPTR DS    A
IOBSTPTR DS    A
ECBPTR   DS    A
CONTPTR  DS    A
DATAPTR  DS    A
ORDRPTR  DS    A
CCWPTR   DS    A
SYNPTR   DS    A
STGADDR  DS    F
VJLMSGID DS    F
MOVELEN  DS    F
INILEN   DC    AL2(20)
VJLNMTRK DS    H
SWITCHES DS    BL2
         ORG   SWITCHES
READSW   DS    BL1
WRITESW  EQU   SWITCHES+0
WRITDATA EQU   SWITCHES+0
CONTSW   EQU   SWITCHES+0
ORDRSW   EQU   SWITCHES+0
MSGSW    EQU   SWITCHES+0
RETRYSW  EQU   SWITCHES+0
TTRSW    EQU   SWITCHES+0
SYNADFSW DS    BL1
FLG3SW   EQU   SWITCHES+1
EOFSW    EQU   SWITCHES+1
@NM00035 EQU   SWITCHES+1
         ORG   SWITCHES+2
SWITCH   DS    BL1
         ORG   SWITCH
JRLDISAB DS    BL1
         ORG   SWITCH+1
         DS    CL5
SYSCPU   DS    CL8
         ORG   SYSCPU
CPUIDV   DS    CL1
CPUIDNUM DS    CL5
CPUMCEL  DS    CL2
         ORG   SYSCPU+8
MSGLST   DS    CL85
         ORG   MSGLST
MSGLEN   DS    FL4
MSGTME   DS    FL4
MSGCPUID DS    CL5
MSG      DS    CL72
         ORG   MSGLST+85
         DS    CL3
CCWMODEL DS    CL40
         ORG   CCWMODEL
RPSMOD   DS    CL8
         ORG   RPSMOD
@NM00041 DC    X'23'
@NM00042 DC    AL3(0)
@NM00043 DC    X'60'
@NM00044 DC    AL3(1)
         ORG   CCWMODEL+8
SRCHMOD  DS    CL8
         ORG   SRCHMOD
@NM00045 DC    X'31'
@NM00046 DC    AL3(0)
@NM00047 DC    X'60'
@NM00048 DC    AL3(5)
         ORG   CCWMODEL+16
TICMOD   DS    CL8
         ORG   TICMOD
@NM00049 DC    X'08'
@NM00050 DC    AL3(0)
@NM00051 DC    X'60'
@NM00052 DC    AL3(0)
         ORG   CCWMODEL+24
IOMOD    DS    CL8
         ORG   IOMOD
@NM00053 DC    X'1D'
@NM00054 DC    AL3(0)
@NM00055 DC    X'60'
@NM00056 DC    AL3(1032)
         ORG   CCWMODEL+32
ERAMOD   DS    CL8
         ORG   ERAMOD
@NM00057 DC    X'11'
@NM00058 DC    AL3(0)
@NM00059 DC    X'20'
@NM00060 DC    AL3(1032)
         ORG   CCWMODEL+40
DDKR     DS    CL4
         ORG   DDKR
DD       DC    AL2(1032)
DDK      DC    AL1(0)
DDR      DS    CL1
         ORG   DDKR+4
GETMNLST DS    CL13
         ORG   GETMNLST
GETMNLEN DS    AL4
GETADDR  DC    AL4(STGADDR)
GETMODE  DC    AL1(0)
GETPOOL  DC    AL1(241)
@NM00062 DS    CL3
         ORG   GETMNLST+13
         DS    CL3
MSGRQ    DS    CL32
         ORG   MSGRQ
MSGID    DS    FL4
MSGRPLV  DS    AL4
MSGRLEN  DS    BL1
MSGREPLY DS    AL3
MSGLEN1  DS    BL1
MSGTEXT1 DS    AL3
MSGLEN2  DS    BL1
MSGTEXT2 DS    AL3
MSGLEN3  DS    BL1
MSGTEXT3 DS    AL3
MSGLEN4  DS    BL1
MSGTEXT4 DS    AL3
MSGLEN5  DS    BL1
MSGTEXT5 DS    AL3
         ORG   MSGRQ+32
SAVEREGS DS    CL20
         ORG   SAVEREGS
@NM00063 DS    5F
         ORG   SAVEREGS+20
DSCBJRNL DS    CL44
         DS    CL4
OBTNWORK DS    CL148
JRNLVOLI DS    CL6
RPSAREA  DS    CL1
CMSVCJRN DC    CL8'MSVCJRNL'
CICBVJL  DC    CL8'ICBVJL00'
CID      DC    CL8'MSVCJRNL'
RPSCOMD  DC    X'23'
ERACOMD  DC    X'11'
READCOMD DC    X'1E'
WRITCOMD DC    X'1D'
DATACOMD DC    X'05'
CCWEND   DC    X'20'
NOPCOMD  DC    X'03'
SUCIO    DC    X'7F'
COMDCHN  DC    X'40'
MASK0F   DC    X'0F'
MASK00   DC    X'00'
CNVRTWK1 DS    CL3
CNVRTWK2 DS    CL5
BINZERO  DC    X'000000'
         DS    CL3
RPSSRC   DS    CL4
NULLDATE DC    X'00000000'
OPNSTG   DS    CL4
CLSSTG   DS    CL4
VJLMSGTB DC    H'409'
         DC    H'471'
         DC    H'446'
         DC    H'453'
         DC    H'458'
         DC    H'459'
         DC    H'460'
         DC    H'461'
         DC    H'462'
         DC    H'463'
         DC    H'464'
         DC    H'465'
         DC    H'478'
ICBVJL00 CSECT
*                                   /*                       @Y30LB27*/
TRTAB    EQU  *-X'F0'                  UNUSED SLOTS            @Y30LB27
         DC   C'0123456789ABCDEF'      TRANSLATION SLOTS       @Y30LB27
ICBVJL00 CSECT
*                                     /*                     @Y30LB27*/
OPNLST   OPEN (,(OUTPUT)),MF=L         OPEN LIST               @Y30LB27
CLSLST   OPEN (,),MF=L                 CLOSE LIST              @Y30LB27
CAMLST   CAMLST SEARCH,DSCBJRNL,JRNLVOLI,OBTNWORK OBTAIN LIST  @Y30LB27
ICBVJL00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SYNSAVE  EQU   @02
I        EQU   @02
TEMPPTR  EQU   @06
CHNPTR   EQU   @02
REQPTR   EQU   @06
JRNLPTR  EQU   @02
INITPTR  EQU   @02
VVIPTR   EQU   @07
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG8     EQU   @08
REG9     EQU   @09
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
CVTPTR   EQU   16
VVICB    EQU   0
VVIUCAT  EQU   VVICB+4
VVIFLGA  EQU   VVICB+15
VVIFLG2  EQU   VVIFLGA
VVIFLG3  EQU   VVIFLGA
VVIDCBAD EQU   VVICB+20
VVIVJL   EQU   VVICB+56
RPLV     EQU   0
RPLTCBPR EQU   RPLV+8
RPLVVICB EQU   RPLV+12
RPLFLAGA EQU   RPLV+28
RPLFTIME EQU   RPLFLAGA
RPLVVIN  EQU   RPLFLAGA
RPLVVOP  EQU   RPLFLAGA
RPLJRCVY EQU   RPLFLAGA
RPLVTLEN EQU   RPLV+30
RPLRCODE EQU   RPLV+32
RPLVRETC EQU   RPLV+34
RPLRMSCC EQU   RPLV+36
RPLVDATE EQU   RPLV+38
RPLVSAM  EQU   RPLV+56
RPLVBUF  EQU   RPLVSAM+32
RPLVOPT  EQU   RPLVSAM+40
RPLVRLN  EQU   RPLVSAM+48
RPLVUTIL EQU   RPLV+132
INITVVI  EQU   0
INITOPCD EQU   INITVVI+4
INIFLAGA EQU   INITVVI+5
INIDISAB EQU   INIFLAGA
INIFLAGB EQU   INITVVI+6
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
DCBTRBAL EQU   IHADCS01+6
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFEC  EQU   DCBIFLGS
IHADCS28 EQU   0
DCBOPTCD EQU   IHADCS28
DCBOPTZ  EQU   DCBOPTCD
IHADCS44 EQU   0
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBNMTRK EQU   DEBDASD+14
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBECBPB EQU   IOBECBPT+1
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00032 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
CVTMAP   EQU   0
CVTPCNVT EQU   CVTMAP+28
CVTPRLTV EQU   CVTMAP+32
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVT0SCR1 EQU   CVTMAP+232
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IECPCNVT EQU   0
IEC0SCR1 EQU   0
CONTREC  EQU   0
CONTCNT  EQU   CONTREC
CONTTTR  EQU   CONTREC+8
CONTR    EQU   CONTTTR+2
CONTAREA EQU   CONTREC+24
ORDRTTR  EQU   CONTREC+32
ORDRTT   EQU   ORDRTTR
ORDRR    EQU   ORDRTTR+2
ORDRREM  EQU   CONTREC+44
ORDRNXT  EQU   CONTREC+46
ORDRAREA EQU   CONTREC+48
MSGTTR   EQU   CONTREC+56
MSGTT    EQU   MSGTTR
MSGR     EQU   MSGTTR+2
MSGREM   EQU   CONTREC+68
MSGNXT   EQU   CONTREC+70
MSGAREA  EQU   CONTREC+72
TRKSREM  EQU   CONTREC+80
TRKSTHR  EQU   CONTREC+82
CONTRPT  EQU   CONTREC+84
CONTID   EQU   CONTREC+88
DATAREC  EQU   0
DATACNT  EQU   DATAREC
DATAD    EQU   DATAREC+8
REQLST   EQU   0
REQTTR   EQU   REQLST
REQTT    EQU   REQTTR
REQR     EQU   REQTTR+2
REQABS   EQU   REQLST+4
REQREM   EQU   REQLST+12
REQNXT   EQU   REQLST+14
REQAREA  EQU   REQLST+16
REQRPS   EQU   REQLST+20
ORDRLST  EQU   0
JRNLLST  EQU   0
JRNLLEN  EQU   JRNLLST
JRNLCODE EQU   JRNLLST+4
JRNLFLGS EQU   JRNLLST+6
JRNLFTIM EQU   JRNLFLGS
JRNLDTFG EQU   JRNLFLGS
JRNLDATE EQU   JRNLLST+8
JRNLUTIL EQU   JRNLLST+12
CCWCHN   EQU   0
RPSCCW   EQU   CCWCHN
RPSADDR  EQU   RPSCCW+1
SRCHCCW  EQU   CCWCHN+8
SRCHADDR EQU   SRCHCCW+1
TICCCW   EQU   CCWCHN+16
TICADDR  EQU   TICCCW+1
IOCCW    EQU   CCWCHN+24
IO       EQU   IOCCW
IOADDR   EQU   IOCCW+1
IOCNT    EQU   IOCCW+5
ERACCW   EQU   CCWCHN+32
ERA      EQU   ERACCW
ERAADDR  EQU   ERACCW+1
SYNAREA  EQU   0
IOBCHN   EQU   0
MSGBUF   EQU   0
IECPRLTV EQU   0
UCBBGN   EQU   0
DCBPTR   EQU   VVIDCBAD
DEBPTR   EQU   DCBDEBAD
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBR     EQU   IOBSEEK+7
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
UCBPTR   EQU   DEBUCBAD
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00031 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00031
UCBSKPFG EQU   @NM00031
UCBRIPND EQU   @NM00031
UCBRTIAC EQU   @NM00031
UCBRSV79 EQU   @NM00031
UCBRSV78 EQU   @NM00031
UCBRSV77 EQU   @NM00031
UCBOLTEP EQU   @NM00031
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00030 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
SYNMSG   EQU   SYNAREA+68
@NM00061 EQU   SYNAREA
ERACNT   EQU   ERACCW+5
ERAFLGS  EQU   ERACCW+4
IOFLGS   EQU   IOCCW+4
TICCNT   EQU   TICCCW+5
TICFLGS  EQU   TICCCW+4
TIC      EQU   TICCCW
SRCHCNT  EQU   SRCHCCW+5
SRCHFLGS EQU   SRCHCCW+4
SRCH     EQU   SRCHCCW
RPSCNT   EQU   RPSCCW+5
RPSFLGS  EQU   RPSCCW+4
RPS      EQU   RPSCCW
ORDRVAR  EQU   ORDRLST+8
ORDRFLGS EQU   ORDRLST+6
ORDRRES  EQU   ORDRLST+5
ORDR     EQU   ORDRLST+4
ORDRLEN  EQU   ORDRLST
@NM00040 EQU   REQLST+21
REQN     EQU   REQTTR+3
@NM00039 EQU   CONTREC+86
@NM00038 EQU   CONTREC+77
MSGRPS   EQU   CONTREC+76
MSGABS   EQU   CONTREC+60
MSGN     EQU   MSGTTR+3
@NM00037 EQU   CONTREC+53
ORDRRPS  EQU   CONTREC+52
ORDRABS  EQU   CONTREC+36
ORDRN    EQU   ORDRTTR+3
@NM00036 EQU   CONTREC+29
CONTRPS  EQU   CONTREC+28
CONTNXT  EQU   CONTREC+22
CONTREM  EQU   CONTREC+20
CONTABS  EQU   CONTREC+12
CONTN    EQU   CONTTTR+3
CONTTT   EQU   CONTTTR
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00034 EQU   CVTFIX+248
@NM00033 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00032
UCBHALI  EQU   @NM00032
UCBRSV09 EQU   @NM00032
UCBRSV08 EQU   @NM00032
UCBRSV07 EQU   @NM00032
UCBRSV06 EQU   @NM00032
UCBRSV05 EQU   @NM00032
UCBRSV04 EQU   @NM00032
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00029 EQU   UCB
ECBEVNT  EQU   ECBEXTND
@NM00028 EQU   ECBEXTND
@NM00027 EQU   ECBBYTE3
@NM00026 EQU   ECBEXTBA
@NM00025 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
DEBXRV40 EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBRSV19 EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00024 EQU   DEBACS08+12
@NM00023 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00022 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00021 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
@NM00020 EQU   IHADCS44+10
DCBXENDA EQU   IHADCS44+8
DCBCENDA EQU   IHADCS44+6
DCBSIOA  EQU   IHADCS44+4
DCBPCIA  EQU   IHADCS44+2
DCBEOEA  EQU   IHADCS44
@NM00019 EQU   IHADCS28+1
@NM00018 EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
@NM00017 EQU   DCBOPTCD
DCBDEBA  EQU   DCBDEBAD+1
@NM00016 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00015 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
@NM00014 EQU   IHADCS01+5
@NM00013 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00012 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00011 EQU   IHADCB
@NM00010 EQU   INITVVI+16
INIUCAT  EQU   INITVVI+8
INIVCODE EQU   INITVVI+7
@NM00009 EQU   INIFLAGB
INIABLE  EQU   INIFLAGB
INIJRNL  EQU   INIFLAGB
INIVERFY EQU   INIFLAGB
@NM00008 EQU   INIFLAGA
INIENABL EQU   INIFLAGA
ININIT   EQU   INIFLAGA
INILNGTH EQU   INITVVI
RPLVBLN  EQU   RPLVSAM+52
@NM00007 EQU   RPLVSAM+44
RPLVUPD  EQU   RPLVOPT+1
@NM00006 EQU   RPLVOPT
RPLVKGE  EQU   RPLVOPT
@NM00005 EQU   RPLVOPT
RPLVNEXT EQU   RPLVOPT
RPLVDIR  EQU   RPLVOPT
RPLVLOC  EQU   RPLVOPT
RPLVKEY  EQU   RPLVSAM+36
@NM00004 EQU   RPLVSAM+28
RPLVACB  EQU   RPLVSAM+24
@NM00003 EQU   RPLVSAM+3
RPLVTYP  EQU   RPLVSAM+2
@NM00002 EQU   RPLVSAM
@NM00001 EQU   RPLV+42
RPLVRES1 EQU   RPLFLAGA+1
RPLVJRNL EQU   RPLFLAGA
RPLVCOMP EQU   RPLFLAGA
RPLVPROG EQU   RPLFLAGA
RPLVPOST EQU   RPLFLAGA
RPLVRSV3 EQU   RPLV+24
RPLVRSV2 EQU   RPLV+20
RPLVRSV1 EQU   RPLV+16
RPLASCBP EQU   RPLTCBPR
RPLVECB  EQU   RPLV+4
RPLVQPTR EQU   RPLV
VVIJUCB  EQU   VVICB+80
VVIIUCB  EQU   VVICB+76
VVIRES6  EQU   VVICB+72
VVIRES5  EQU   VVICB+68
VVIRES4  EQU   VVICB+64
VVIUCB   EQU   VVICB+60
VVIVRR   EQU   VVICB+52
VVIQLSPL EQU   VVICB+48
VVIQRPL2 EQU   VVICB+44
VVIQRPL1 EQU   VVICB+40
VVIRES3  EQU   VVICB+36
VVIVQMP  EQU   VVICB+32
VVIECB1  EQU   VVICB+28
VVICATAD EQU   VVICB+24
VVIACBAD EQU   VVICB+16
VVIRES1  EQU   VVIFLGA
VVIFLG5  EQU   VVIFLGA
VVIFLG4  EQU   VVIFLGA
VVIFLG1  EQU   VVIFLGA
VVIFLG0  EQU   VVIFLGA
VVIALCON EQU   VVICB+14
VVICPUID EQU   VVICB+12
VVICID   EQU   VVICB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00226 EQU   @EL00001
@RT00231 EQU   @EL00001
@RT00241 EQU   @EL00001
@RT00256 EQU   @EL00001
@RT00285 EQU   @EL00001
@RT00290 EQU   @EL00001
@RT00425 EQU   @EL00002
@RT00430 EQU   @EL00002
@RT00474 EQU   @EL00002
@RT00520 EQU   @EL00002
@RC00391 EQU   @EL00002
@RC00538 EQU   @EL00003
@RC00602 EQU   @RC00601
@RF00667 EQU   @RC00659
@RF00789 EQU   @EL00006
@RF00838 EQU   @EL00007
@RC00539 EQU   @RC00538
@RC00543 EQU   @RC00539
@ENDDATA EQU   *
         END   ICBVJL00,(C'PLS1444',0603,77049)
