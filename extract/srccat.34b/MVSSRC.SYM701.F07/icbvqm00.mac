         TITLE 'ICBVQM00 MSVC USER TASK QUEUE MANAGER - MVS            *
                        '
ICBVQM00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICBVQM00  77.354'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @01,@12,24(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0150
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP ADDRESSABILITY                                 @Y30LB12*/
*   /*                                                       @Y30LB12*/
*   /* PARMPTR CONTAINS THE ADDRESS OF THE PARAMETER         @Y30LB12*/
*   /* LIST PASSED TO THE QUEUE MANAGER                      @Y30LB12*/
*   /* PARM0 CONTAINS EITHER THE MSC REASON CODE             @Y30LB12*/
*   /* (IF ANY) AND AN INDICATION OF FIRST OR                @Y30LB12*/
*   /* OR SECOND ENTRY, OR AN INDICATOR THAT                 @Y30LB12*/
*   /* THE THE USER'S TASK HAS ABENDED DURING                @Y30LB12*/
*   /* MSS PROCESSING                                        @Y30LB12*/
*   /* VVIPTR CONTAINS THE ADDRESS OF THE MSVC               @Y30LB12*/
*   /* CONTROL BLOCK.                                        @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0150
*   PARMPTR=REG1;                   /* SAVE PARAMETER ADDRESS      0150
*                                                            @Y30LB24*/
         LR    PARMPTR,REG1                                        0150
*   PARM0=REG0;                     /* SAVE PARAMETER REGISTER     0151
*                                                            @Y30LB24*/
         LR    PARM0,REG0                                          0151
*   VVIPTR=ICBVVICB;                /* INITIALIZE MSVC CB PTR      0152
*                                                            @Y30LB24*/
*                                                                  0152
         L     @11,CVTPTR                                          0152
         L     @11,CVTEXT2(,@11)                                   0152
         L     @11,CVTICB(,@11)                                    0152
         L     VVIPTR,ICBVVICB(,@11)                               0152
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE DEFAULT VALUES THAT WILL BE RETURNED       @Y30LB12*/
*   /* TO THE MSS-SVC.                                       @YM34322*/
*   /*                                                       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0153
*   FAILCODE=ZERO;                  /* INITIALIZE REASON CODE      0153
*                                                            @Y30LB12*/
         SLR   FAILCODE,FAILCODE                                   0153
*   REG0=SUCCES;                    /* INITIALIZE RETURN CODE      0154
*                                                            @YM34322*/
*                                                                  0154
         SLR   REG0,REG0                                           0154
*   /*****************************************************************/
*   /*                                                               */
*   /* SHIFT THE MSS REASON CODE THAT EXISTED AT ENTRY       @Y30LB12*/
*   /* TO THIS MODULE TO THE LOW-ORDER EIGHT BITS OF         @Y30LB12*/
*   /* REGISTER 1.                                           @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0155
*   REG1=PARM0;                     /* SET PARAMETER WORK REG      0155
*                                                            @Y30LB24*/
         LR    REG1,PARM0                                          0155
*   GEN(SRL REG1,M24);              /* SHIFT HIGH BYTE       @Y30LB24*/
         SRL REG1,M24
*   RESPECIFY                                                      0157
*     RVVI BASED(PARMPTR);          /* BASE LISTMSVI         @Y30LB24*/
*   RESPECIFY                                                      0158
*     INFMJFCB BASED(REG3);         /* BASE JFCB             @Y30LB24*/
*   RESPECIFY                                                      0159
*     JFCBX BASED(REG3);            /* BASE JFCB EXT         @Y30LB24*/
*                                                                  0160
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK PARAMETERS AND OPERATION CODES TO FIND WHICH SUBROUTINE */
*   /* IS REQUIRED TO PROCESS THIS ENTRY.                    @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0160
*   IF REG1=RIO×                    /* ABNORMAL TERMINATION  @Y30LB24*/
*       REG1=RNIO THEN              /* ABNORMAL TERMINATION  @Y30LB24*/
         SLR   @11,@11                                             0160
         IC    @11,RIO                                             0160
         CR    REG1,@11                                            0160
         BE    @RT00160                                            0160
         SLR   @11,@11                                             0160
         IC    @11,RNIO                                            0160
         CR    REG1,@11                                            0160
         BNE   @RF00160                                            0160
@RT00160 DS    0H                                                  0161
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMABEND;              /* CALL ABEND RTN        @Y30LB24*/
         BAL   @14,VQMABEND                                        0162
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0163
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0164
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
@EL00001 DS    0H                                                  0165
@EF00001 DS    0H                                                  0165
@ER00001 L     @14,12(,@13)                                        0165
         LM    @01,@12,24(@13)                                     0165
         BR    @14                                                 0165
*     END;                          /*                       @Y30LB24*/
*                                                                  0166
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK IF THE LENGTH OF THE PASSED PARAMETER           @YM34322*/
*   /* LIST IS VALID                                         @YM34322*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   IF PLENGTH<=ZERO×               /* INVALID REQUEST?      @Y30LB24*/
*       PLENGTH>MAXLNGTH THEN       /* INVALID REQUEST? @Y30LB 24  0167
*                                                            @YM34322*/
@RF00160 L     @11,PLENGTH(,PARMPTR)                               0167
         LTR   @11,@11                                             0167
         BNP   @RT00167                                            0167
         C     @11,@CF00129                                        0167
         BNH   @RF00167                                            0167
@RT00167 DS    0H                                                  0168
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=INVALLNG;              /* REASON CODE (216)     @YM34322*/
         LA    REG0,534                                            0169
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0170
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0171
*     END;                          /*                       @Y30LB24*/
*                                                                  0172
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE OP CODE AND DETERMINE THE PROCESSING        @YM34322*/
*   /* TO BE DONE                                            @YM34322*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*   IF OPCODE=MOUNT THEN            /* IS THIS A MOUNT       @Y30LB12*/
@RF00167 CLI   OPCODE(PARMPTR),X'08'                               0173
         BNE   @RF00173                                            0173
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMMOUNT;              /* CALL MOUNT RTN        @Y30LB24*/
         BAL   @14,VQMMOUNT                                        0175
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0176
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=DEMOUNT THEN          /* IS THIS A DEMOUNT     @Y30LB12*/
@RF00173 CLI   OPCODE(PARMPTR),X'06'                               0178
         BNE   @RF00178                                            0178
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMDEMNT;              /* CALL DEMOUNT RTN      @Y30LB24*/
         BAL   @14,VQMDEMNT                                        0180
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0181
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0182
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0183
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=MOVECART×             /* MOVE CARTRIDGE?       @Y30LB12*/
*       OPCODE=DEFVOL×              /* DEFINE VOLUME?        @Y30LB12*/
*       OPCODE=NULLC×               /* NULL CARTRIDGE?       @Z40LB25*/
*       OPCODE=COPYCART×            /* COPY CARTRIDGE?       @Y30LB12*/
*       OPCODE=COPYVOL THEN         /* COPY VOLUME?          @Y30LB12*/
@RF00178 CLI   OPCODE(PARMPTR),X'0E'                               0185
         BE    @RT00185                                            0185
         CLI   OPCODE(PARMPTR),X'18'                               0185
         BE    @RT00185                                            0185
         CLI   OPCODE(PARMPTR),X'09'                               0185
         BE    @RT00185                                            0185
         CLI   OPCODE(PARMPTR),X'28'                               0185
         BE    @RT00185                                            0185
         CLI   OPCODE(PARMPTR),X'2A'                               0185
         BNE   @RF00185                                            0185
@RT00185 DS    0H                                                  0186
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMMSSUT;              /* CALL MSS UTIL RTN     @Y30LB24*/
         BAL   @14,VQMMSSUT                                        0187
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0188
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=MSCMSG THEN           /* MSC MESSAGE?          @Y30LB12*/
@RF00185 CLI   OPCODE(PARMPTR),X'86'                               0190
         BNE   @RF00190                                            0190
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMMSSMG;              /* CALL MESSAGE RTN      @Y30LB24*/
         BAL   @14,VQMMSSMG                                        0192
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0193
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0194
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0195
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=READINV THEN          /* READ INVENTORY?       @Y30LB12*/
@RF00190 CLI   OPCODE(PARMPTR),X'87'                               0197
         BNE   @RF00197                                            0197
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMREADR;              /* CALL READ RTN         @Y30LB24*/
         BAL   @14,VQMREADR                                        0199
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0200
*     END;                                                         0201
*   IF OPCODE=REMOVVOL×             /* REMOVE VOLUME RECORD  @Y30LB12*/
*       OPCODE=CREATEG×             /* CREATE GROUP RECORD   @Y30LB12*/
*       OPCODE=MODIFYG×             /* MODIFY GROUP RECORD   @Y30LB12*/
*       OPCODE=SCRATCHG×            /* SCRATCH GROUP RECORD  @Y30LB12*/
*       OPCODE=MODIFYV THEN         /* MODIFY VOLUME RECORD  @Y30LB12*/
@RF00197 CLI   OPCODE(PARMPTR),X'81'                               0202
         BE    @RT00202                                            0202
         CLI   OPCODE(PARMPTR),X'82'                               0202
         BE    @RT00202                                            0202
         CLI   OPCODE(PARMPTR),X'83'                               0202
         BE    @RT00202                                            0202
         CLI   OPCODE(PARMPTR),X'84'                               0202
         BE    @RT00202                                            0202
         CLI   OPCODE(PARMPTR),X'85'                               0202
         BNE   @RF00202                                            0202
@RT00202 DS    0H                                                  0203
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMVVIUT;              /* CALL VVI UTIL RTN     @Y30LB24*/
         BAL   @14,VQMVVIUT                                        0204
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0205
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=SUSPEND THEN          /* SUSPEND?              @Y30LB12*/
@RF00202 CLI   OPCODE(PARMPTR),X'22'                               0207
         BNE   @RF00207                                            0207
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMMSSCM;              /* CALL MSS CM RTN       @Y30LB24*/
         BAL   @14,VQMMSSCM                                        0209
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0210
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=PURGE×                /* PURGE?                @Y30LB12*/
*       OPCODE=ASSOCDIS THEN        /* ASSOC/DISASSOC        @Y30LB12*/
@RF00207 CLI   OPCODE(PARMPTR),X'14'                               0212
         BE    @RT00212                                            0212
         CLI   OPCODE(PARMPTR),X'2C'                               0212
         BNE   @RF00212                                            0212
@RT00212 DS    0H                                                  0213
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMMSSCM;              /* CALL MSS CM RTN       @Y30LB24*/
         BAL   @14,VQMMSSCM                                        0214
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0215
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0216
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0217
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=ENABLDIS THEN         /* ENABLE/DISABLE?       @Y30LB12*/
@RF00212 CLI   OPCODE(PARMPTR),X'88'                               0219
         BNE   @RF00219                                            0219
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMVABLE;              /* CALL ENABLE/DISABLE RTN     0221
*                                                            @Y30LB24*/
         BAL   @14,VQMVABLE                                        0221
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0222
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=DSRECOV THEN          /* DATA SET RECOVERY     @Y30LB12*/
@RF00219 CLI   OPCODE(PARMPTR),X'8F'                               0224
         BNE   @RF00224                                            0224
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VQMRECVY;              /* CALL RECOVERY RTN     @Y30LB24*/
         BAL   @14,VQMRECVY                                        0226
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00001                                            0227
*     END;                          /*                       @Y30LB24*/
*                                                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE OP CODE PASSED IN THE PARAMETER LIST IS        @Y30LB12*/
*   /* UNDEFINED (NOT ONE OF THE EXPECTED CODES),            @Y30LB12*/
*   /* RETURN TO THE CALLING ROUTINE WITH A RETURN CODE      @Y30LB12*/
*   /* OF FOUR IN REGISTER 15 AND A REASON CODE OF 217       @Y30LB12*/
*   /* (INVALID REQUEST OPERATION CODE) IN REGISTER 0.       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0229
*   REG0=INVALOP;                   /* REASON CODE (217)     @YM34322*/
@RF00224 LA    REG0,535                                            0229
*   FAILCODE=FOUR;                  /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0230
*   RETURN;                         /* RETURN TO MSSC-SVC    @Y30LB24*/
*                                                                  0231
         B     @EL00001                                            0231
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF MAINLINE PROCESSING FOR ICBVQM00.              @Y30LB12*/
*   /* THE REMAINDER OF THIS MODULE CONSISTS OF              @Y30LB12*/
*   /* INTERNAL PROCEDURES FOR ICBVQM00.                     @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0232
*                                                                  0232
*/* ******************************************************************
*                                                                  0232
*     NAME = VQMABEND, INVALIDATE MSC ORDER ENTRY IN RPLV QUEUES   0232
*                                                              @Y30LB24
*                                                                  0232
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND ICBVVICB POINTING
*     TO THE RPLV QUEUES.                                      @Y30LB24
*                                                                  0232
*     PROCESS = THIS SUBROUTINE IS CALLED TO INVALIDATE REQUESTS.  0232
*     ALL REQUESTS THAT CAN BE RECOVERED ARE PUT ON MSVC REQUEST   0232
*     QUEUES IN ORDER THAT THE MSVC INVENTORY IS UPDATED TO        0232
*     MATCH THE MSS TABLES.                                    @Y30LB24
*                                                                  0232
*     OUTPUT = MSVC INVENTORY UPDATED TO MATCH MSS TABLES.         0232
*                                                              @Y30LB24
*                                                                  0232
******************************************************************** */
*/*VQMABEND: CHART                                                   */
*/*HEADER                                                          0232
*/*JUNE 14, 1974                                ICBVQM00 - SEGMENT 0232
*/*VQMABEND - INVALIDATE ENTRY IN QUEUES                             */
*/*          E                    VQMABEND                           */
*/*          D (YES,,NO,%END)     RECOVERY POSSIBLE?                 */
*/*          D (YES,,NO,%END)     VALID LENGTH PARMETER              */
*/*          D (YES,,NO,%END)     VALID REQUEST                      */
*/*          D (NO,,YES,%GET)     MSC I/O ISSUED                     */
*/*          P                    SET FAILING REASON                 */
*/*%GET:     P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          D (YES,,NO,%UTL)     MOUNT SCRATCH                      */
*/*          P                    SET SCR BIT OFF                    */
*/*%UTL:     D (YES,,NO,%ADD)     UTIL EXT.                          */
*/*          P                    ZERO UTIL EXT ADDR                 */
*/*%ADD:     S                    VQMADDRB: CHAIN RPLV               */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMABEND: END                                                     */
*                                                                  0232
*VQMABEND:                                                         0232
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0232
*                                                                  0232
VQMABEND DS    0H                                                  0233
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR THE FOLLOWING GROUP OF OP CODES, NO RECOVERY      @Y30LB12*/
*   /* ACTION IS DEFINED, SINCE THESE OP CODES DO NOT        @Y30LB12*/
*   /* CAUSE I/O TO THE MSC. THEREFORE, RETURN TO THE        @Y30LB12*/
*   /* MAINLINE OF ICBVQM00 WITHOUT MODIFYING THE            @Y30LB12*/
*   /* RETURN CODE OR THE REASON CODE.                       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0233
*   IF OPCODE=REMOVVOL×             /* REMOVE VOLUME RECORD  @Y30LB12*/
*       OPCODE=CREATEG×             /* CREATE GROUP RECORD   @Y30LB12*/
*       OPCODE=MODIFYG×             /* MODIFY GROUP RECORD   @Y30LB12*/
*       OPCODE=SCRATCHG×            /* SCRATCH GROUP RECORD  @Y30LB12*/
*       OPCODE=MODIFYV×             /* MODIFY VOLUME RECORD  @Y30LB12*/
*       OPCODE=MSCMSG×              /* MSC MESSAGE?          @Y30LB12*/
*       OPCODE=READINV×             /* READ INVENTORY?       @Y30LB12*/
*       OPCODE=ENABLDIS×            /* ENABLE/DISABLE?       @Y30LB12*/
*       OPCODE=DSRECOV THEN         /* DATA SET RECOVERY     @Y30LB12*/
         CLI   OPCODE(PARMPTR),X'81'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'82'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'83'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'84'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'85'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'86'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'87'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'88'                               0233
         BE    @RT00233                                            0233
         CLI   OPCODE(PARMPTR),X'8F'                               0233
         BNE   @RF00233                                            0233
@RT00233 DS    0H                                                  0234
*     DO;                           /* YES                   @Y30LB24*/
*       RETURN;                     /* RETURN TO ICBVQM00    @YM34322*/
@EL00002 DS    0H                                                  0235
@EF00002 DS    0H                                                  0235
@ER00002 BR    @14                                                 0235
*     END;                          /*                       @Y30LB24*/
*   IF PLENGTH<=ZERO×               /* INVALID REQUEST?      @Y30LB24*/
*       PLENGTH>MAXLNGTH THEN       /* INVALID REQUEST? @Y30LB 24  0237
*                                                            @YM34322*/
@RF00233 L     @11,PLENGTH(,PARMPTR)                               0237
         LTR   @11,@11                                             0237
         BNP   @RT00237                                            0237
         C     @11,@CF00129                                        0237
         BNH   @RF00237                                            0237
@RT00237 DS    0H                                                  0238
*     DO;                           /* YES                   @Y30LB24*/
*       RETURN;                     /* RETURN TO ICBVQM00    @YM34322*/
         B     @EL00002                                            0239
*     END;                          /*                       @Y30LB24*/
*   IF OPCODE=MOUNT×                /* IS THIS A MOUNT       @YM34322*/
*       OPCODE=DEMOUNT×             /* IS THIS A DEMOUNT     @YM34322*/
*       OPCODE=NULLC×               /* IS THIS A NULLIFYC    @Z40LB25*/
*       OPCODE=MOVECART×            /* MOVE CARTRIDGE?       @YM34322*/
*       OPCODE=DEFVOL×              /* DEFINE VOLUME?        @YM34322*/
*       OPCODE=COPYCART×            /* COPY CARTRIDGE?       @YM34322*/
*       OPCODE=COPYVOL×             /* COPY VOLUME?          @YM34322*/
*       OPCODE=SUSPEND×             /* SUSPEND?              @YM34322*/
*       OPCODE=PURGE×               /* PURGE?                @YM34322*/
*       OPCODE=ASSOCDIS THEN        /* ASSOC/DISASSOC        @YM34322*/
@RF00237 CLI   OPCODE(PARMPTR),X'08'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'06'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'09'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'0E'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'18'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'28'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'2A'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'22'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'14'                               0241
         BE    @RT00241                                            0241
         CLI   OPCODE(PARMPTR),X'2C'                               0241
         BNE   @RF00241                                            0241
@RT00241 DS    0H                                                  0242
*     DO;                           /* YES                   @Y30LB24*/
*                                                                  0242
*       /*************************************************************/
*       /*                                                           */
*       /* IF NO I/O HAS BEEN ISSUED TO THE MSC, SET         @Y30LB12*/
*       /* PARM0 TO INDICATE THAT THE USER TASK HAS          @YM34322*/
*       /* HAS ABENDED BEFORE PERFORMING I/O                 @YM34322*/
*       /* TO THE MSC.                                       @YM34322*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0243
*       IF REG1=RNIO THEN           /* NO I/O ISSUED         @Y30LB24*/
         SLR   @11,@11                                             0243
         IC    @11,RNIO                                            0243
         CR    REG1,@11                                            0243
         BNE   @RF00243                                            0243
*         DO;                       /* YES                   @Y30LB24*/
*           PARM0=ABENDED;          /* SET PARAMETER         @YM34322*/
         LA    PARM0,512                                           0245
*           GEN(ICM PARM0,M8,RNIO); /* RESTORE RNIO          @Y30LB24*/
         ICM PARM0,M8,RNIO
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
*                                                                  0248
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR ORDER TYPES OTHER THAN THOSE SPECIFICALLY         @Y30LB12*/
*   /* TESTED IN THIS 'IF' STATEMENT, RETURN TO THE          @Y30LB12*/
*   /* MAINLINE PROCEDURE OF ICBVQM00.                       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0249
*   ELSE                                                           0249
*     DO;                           /* INVALID ORDER         @Y30LB24*/
         B     @RC00241                                            0249
@RF00241 DS    0H                                                  0250
*       RETURN;                     /* RETURN TO ICBVQM00    @YM34322*/
         B     @EL00002                                            0250
*     END;                          /*                       @Y30LB24*/
*                                                                  0251
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING RECOVERY ACTION APPLIES ONLY TO         @Y30LB12*/
*   /* ORDERS -- MOUNT, DEMOUNT, MOVE CARTRIDGE, DEFINE      @Y30LB12*/
*   /* VOLUME, COPY CARTRIDGE, COPY VOLUME, SUSPEND,         @Y30LB12*/
*   /* PURGE, ASSOCIATE/DISASSOCIATE                         @YM34322*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0252
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RC00241 LR    REG8,REG14                                          0252
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0253
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0254
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0255
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0256
         BZ    @RF00256                                            0256
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0258
*       RETURN;                     /* RETURN TO CALLER      @G18MB04*/
         B     @EL00002                                            0259
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=ON;                    /* SET SECOND ENTRY      @Y30LB24*/
@RF00256 DS    0H                                                  0262
*   RPLVPOST=OFF;                   /* INDICATE NO ECB POST  @Y30LB24*/
         OI    RPLFTIME(RPLVPTR),B'10000000'                       0262
         NI    RPLVPOST(RPLVPTR),B'10111111'                       0262
*   RPLRCODE=PARM0;                 /* SET REASON CODE       @Y30LB24*/
         STH   PARM0,RPLRCODE(,RPLVPTR)                            0263
*   RPLVRETC=PARM0;                 /* SET RETURN CODE       @Y30LB24*/
         STH   PARM0,RPLVRETC(,RPLVPTR)                            0264
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0265
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0266
         BCTR  @11,0                                               0266
         EX    @11,@SM01699                                        0266
*   REG2=ADDR(RPLVUTIL);            /* SET RPLV ADDR         @Y30LB24*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0267
*   IF OPCODE=MOUNT THEN            /* IS THIS A MOUNT       @YM34322*/
         CLI   OPCODE(PARMPTR),X'08'                               0268
         BNE   @RF00268                                            0268
*     REG2->MDSRTCH=OFF;            /* SET MSVC SCR OFF      @Y30LB24*/
         NI    MDSRTCH(REG2),B'11101111'                           0269
*   IF OPCODE=MOVECART THEN         /* MOVE CARTRIDGE?       @YM34322*/
@RF00268 CLI   OPCODE(PARMPTR),X'0E'                               0270
         BNE   @RF00270                                            0270
*     REG2->MCRTVEXT=ZERO;          /* ZERO UTIL EXT.        @Y30LB24*/
         SLR   @11,@11                                             0271
         ST    @11,MCRTVEXT(,REG2)                                 0271
*   IF OPCODE=DEFVOL THEN           /* DEFINE VOLUME?        @YM34322*/
@RF00270 CLI   OPCODE(PARMPTR),X'18'                               0272
         BNE   @RF00272                                            0272
*     REG2->DEFVVEXT=ZERO;          /* ZERO UTIL EXT.        @Y30LB24*/
         SLR   @11,@11                                             0273
         ST    @11,DEFVVEXT(,REG2)                                 0273
*   IF OPCODE=COPYVOL THEN          /* COPY VOLUME?          @YM34322*/
@RF00272 CLI   OPCODE(PARMPTR),X'2A'                               0274
         BNE   @RF00274                                            0274
*     REG2->CVOLVEXT=ZERO;          /* ZERO UTIL EXT.        @Y30LB24*/
         SLR   @11,@11                                             0275
         ST    @11,CVOLVEXT(,REG2)                                 0275
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
@RF00274 BAL   @14,VQMADDRB                                        0276
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0277
*   RETURN;                         /* RETURN TO CALLER OF VQMABEND
*                                                            @G18MB04*/
         B     @EL00002                                            0278
*   END VQMABEND;                   /* END ABNORMAL TERMINATION    0279
*                                                            @Y30LB24*/
*                                                                  0280
*/* ******************************************************************
*                                                                  0280
*     NAME = VQMMOUNT,  VOLUME MOUNT PROCESSING.               @Y30LB24
*                                                                  0280
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0280
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0280
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0280
*     MOUNT SPECIFIC AND MOUNT NON-SPECIFIC (SCRATCH) REQUESTS.    0280
*     THEY WILL BE DESCRIBED SEPARATELY.                       @Y30LB24
*                                                                  0280
*     THE FOLLOWING DESCRIBES MOUNT SPECIFIC.                      0280
*     IF THE MSVC INVENTORY IS DISABLED THEN NO PROCESSING IS      0280
*     DONE AND THE REQUEST IS RETURNED WITH GOOD COMPLETION.       0280
*     IF THE MSVC INVENTORY IS NOT DISABLED THEN PROCESSING CAN    0280
*     CONTINUE.  IN VS/2 IF THE MSC FAILED THE MOUNT, IT IS        0280
*     REISSUED.  IF THE MOUNT WAS SUCCESSFUL A RETURN IS MADE TO THE
*     MSSC-SVC WITH A RETRY SUCCESSFUL REASON AND RETURN CODE.     0280
*     IF THE MOUNT WAS NOT SUCCESSFUL THEN PROCESSING CONTINUES.   0280
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE   0280
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0280
*     THE PROPER FLAGS AND ENTRIES.                                0280
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0280
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0280
*     HIGH PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0280
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH A SUCCESSFUL 0280
*     COMPLETION WHICH WILL BE RETURNED TO THE CALLER.         @Y30LB24
*                                                                  0280
*                                                                  0280
*     THE FOLLOWING DESCRIBES MOUNT NONSPECIFIC (SCRATCH).         0280
*     IF THIS IS THE SECOND ENTRY FOR THE REQUEST AND THE MSC RETURN
*      CODE IS ZERO THE REQUEST IS RETURNED WITH GOOD COMPLETION.  0280
*     IF THE MSVC INVENTORY IS DISABLED AND THIS IS THE FIRST ENTRY
*      FOR THE REQUEST, THE REQUEST IS RETURNED WITH BAD COMPLETION.
*     IF THE MOUNT PARAMETER LIST HAS A ZERO MOUNT LIST        @G18MB04
*      EXTENSION ADDRESS OR IF THE JFCB ADDRESS IN THE MOUNT   @G18MB04
*      PARAMETER LIST EXTENSION IS ZERO, THE REQUEST IS        @G18MB04
*      RETURNED WITH BAD COMPLETION.                           @G18MB04
*     IF ALL OF THE ABOVE TESTS ARE MET THEN THE AMOUNT OF     @G18MB04
*      STORAGE NEEDED FOR THE REQUEST IS CALCULATED,           @G18MB04
*      AND THROUGH THE SUBROUTINE VQMGSTOR A GETMAIN IS DONE   @G18MB04
*      FOR THE MSVC RPLV AND STORAGE FOR JES3 COMMUNICATION,   @G18MB04
*      RPLV IS ZEROED AND INITIALIZED WITH THE PROPER FLAGS    @G18MB04
*      AND ENTRIES.                                            @G18MB04
*      THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA. @G18MB04
*      FOR REQUESTS OF INTEREST TO JES3 (MOUNT NONSPECIFIC     @G18MB04
*      WITH MSVGP CODED) THE SUBROUTINE VQMJESMT IS CALLED     @G18MB04
*      TO CONTROL FIRST ENTRY PROCESSING.                      @G18MB04
*      FOR FIRST ENTRY OF REQUESTS NOT OF INTEREST TO JES3,    @G18MB04
*      THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE  0280
*     HIGH PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0280
*     IF THIS IS THE FIRST ENTRY FOR THE REQUEST THEN              0280
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0280
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0280
*     CALLED TO FREE THE REQUEST BLOCK.  A RETURN IS THEN MADE TO  0280
*     ICBVQM00 MAINLINE WITH A FUNCTION SUCCESS COMPLETION WHICH   0280
*     WILL BE RETURNED TO THE CALLER.                          @Y30LB24
*                                                                  0280
*     IF THIS THE SECOND ENTRY FOR THE REQUEST AND THE MOUNT BY THE
*     MSC WAS UNSUCCESSFUL THEN THE FOLLOWING IS DONE.             0280
*      FOR REQUESTS OF INTEREST TO JES3 (MOUNT NONSPECIFIC     @G18MB04
*      WITH MSVGP CODED), THE SUBROUTINE VQMJESMT IS CALLED    @G18MB04
*      TO CONTROL SECOND ENTRY PROCESSING.  FOR SECOND ENTRY   @G18MB04
*      FOR REQUESTS NOT OF INTEREST TO JES3, THE FOLLOWING     @G18MB04
*      HAPPENS IN VQMMOUNT --                                  @G18MB04
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0280
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, IF MSVC PROCESSING  0280
*     WAS COMPLETED SUCCESSFULLY THE MOUNT IS REISSUED.            0280
*     IF MSVC PROCESSING IS UNSUCCESSFUL THEN A SUBROUTINE IS      0280
*     CALLED TO FREE THE REQUEST BLOCK AND A RETURN IS THEN MADE TO
*     ICBVQM00 MAINLINE WITH A FUNCTION SUCCESS COMPLETION WHICH   0280
*     WILL BE RETURNED TO THE CALLER.                              0280
*     IF THE REISSUED MOUNT WAS SUCCESSFUL THEN A SUBROUTINE IS    0280
*     CALLED TO FREE THE REQUEST BLOCK.  A RETURN IS THEN MADE TO  0280
*     ICBVQM00 MAINLINE WITH A RETRY SUCCESSFUL COMPLETION WHICH   0280
*     WILL BE RETURNED TO THE CALLER.                              0280
*     IF THE REISSUED MOUNT WAS NOT SUCCESSFUL THEN THE REQUEST IS 0280
*     SET UP AGAIN AND PROCESSING STARTS OVER AGAIN UNTIL EITHER   0280
*     THE MSVC RETURNS A UNSUCCESSFUL RETURN CODE OR THE REISSUED  0280
*     MOUNT IS SUCCESSFUL.                                     @Y30LB24
*                                                                  0280
*     OUTPUT = MSSC-SVC REQUEST ENTRY ADDED TO RPLV CHAIN.     @Y30LB24
*                                                                  0280
******************************************************************** */
*/*VQMMOUNT: CHART                                                   */
*/*HEADER                                                          0280
*/*DECEMBER 8, 1975                          ICBVQM00 - SEGMENT    0280
*/*VQMMOUNT - VOLUME MOUNT PROCESSING                                */
*/*          E                    VQMMOUNT                           */
*/*          D (NO,,YES,%SCR)     MOUNT SCRATCH                      */
*/*          D (NO,,YES,%END)     MSVC DISABLED                      */
*/*          D (NO,,YES,%END)     MSC REASON CODE ZERO               */
*/*          D (NO,,YES,%GET)     INITIAL ENTRY FOR ORDER            */
*/*          W                    STIMER WAIT 5.12 SEC               */
*/*          L                    REISSUE MOUNT                      */
*/*          D (NO,,YES,%GET)     MOUNT FAIL                         */
*/*          P  (,%END)           SET NEW R/R CODES                  */
*/*%GET:     P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (YES,,NO,%BLD)     ERROR FROM GETMAIN                 */
*/*          P (,%END)            NEVER FAIL MOUNT SPECIFIC          */
*/*%BLD:     P                    BUILD REQUEST BLOCK                */
*/*          D (NO,,YES,%ADD)     INITIAL ENTRY FOR ORDER            */
*/*          P                    INDICATE SECOND ENTRY              */
*/*%ADD:     S                    VQMADDRB: CHAIN RPLV               */
*/*          P (,%END)            NEVER FAIL MOUNT SPECIFIC          */
*/*%SCR:     D (NO,,YES,%END)     MSC REASON CODE ZERO               */
*/*          D (YES,,NO,%CON)     MSVC DISABLED                      */
*/*          D (YES,,NO,%CON)     INITIAL ENTRY FOR ORDER            */
*/*          P (,%END)            INDICATE MSVC DISABLE              */
*/*%CON:     D (YES,,NO,%PRO)     JFCB ADDRESS OR PARM LIST EXTENSION
*/*ZERO                                                              */
*/*          P (,%END)            INDICATE BAD PARM                  */
*/*%PRO:     P                    SET GETMAIN LENGTH FOR RPLV AND JES3
*/*COMMUNIC. STORAGE                                                 */
*/*          S                    VQMGSTOR: GETMAIN                  */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          D (NO,,YES,%ADD1)    INITIAL ENTRY FOR ORDER            */
*/*%SEC:     D (NO,%ADD2,YES,)    WAS MSVGP SPECIFIED ?              */
*/*          S (,%END)            VQMJESMT: PROCESS MOUNT NONSPECIF,
*/*2ND ENTRY & MSVGP                                                 */
*/*%ADD2:    P                    CLEAR FLAGS & ENTRIES              */
*/*          P                    INDICATE SECOND ENTRY              */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          D (YES,,NO,%RET)     MSVC SELECTION OK                  */
*/*          L                    REISSUE MOUNT                      */
*/*          D (NO,,YES,%ADD2)    MOUNT FAIL                         */
*/*          P                    SET NEW R/R CODES                  */
*/*%RET:     P                    MOVE PARAMETERS TO USER'S LIST     */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*          P (,%END)            RETURN TO ICBVQM00                 */
*/*%ADD1:    P                    INDICATE FIRST ENTRY               */
*/*          D (NO,%ADD3,YES,)    WAS MSVGP SPECIFIED ?              */
*/*          S (,%END)            VQMJESMT: PROCESS MOUNT NONSPECIF,
*/*1ST ENTRY & MSVGP                                                 */
*/*%ADD3:    S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    MOVE PARAMETERS TO USER'S LIST     */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMMOUNT: END                                                     */
*                                                                  0280
*VQMMOUNT:                                                         0280
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0280
VQMMOUNT DS    0H                                                  0281
*   IF MDSRTCH=OFF THEN             /* MOUNT SPECIFIC?       @Y30LB24*/
         TM    MDSRTCH(PARMPTR),B'00010000'                        0281
         BNZ   @RF00281                                            0281
*     DO;                           /* YES                   @Y30LB24*/
*       IF VVIFLG0=ON×              /* TOTAL DISABLE         @Y30LB24*/
*           PARM0=RZERO THEN        /* ZERO MSC RCODE        @Y30LB24*/
         TM    VVIFLG0(VVIPTR),B'10000000'                         0283
         BO    @RT00283                                            0283
         C     PARM0,RZERO                                         0283
         BNE   @RF00283                                            0283
@RT00283 DS    0H                                                  0284
*         DO;                       /* YES                   @Y30LB24*/
*           REG0=SUCCES;            /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0285
*           FAILCODE=ZERO;          /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0286
*           RETURN;                 /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00003 DS    0H                                                  0287
@EF00003 DS    0H                                                  0287
@ER00003 BR    @14                                                 0287
*         END;                      /*                       @Y30LB24*/
*       IF PARM0^=ZERO THEN         /* BAD MSC RETURN CODE   @Y30LB24*/
@RF00283 LTR   PARM0,PARM0                                         0289
         BZ    @RF00289                                            0289
*         DO;                       /* YES                   @Y30LB24*/
*           GEN(STIMER WAIT,BINTVL=TIME);/* WAIT TO REISSUE  @Y30LB24*/
         STIMER WAIT,BINTVL=TIME
*           MDVISMNT=ON;            /* SET MSVC MNT ON       @YM34322
*                                      SO VVIC WONT BE       @YM34322
*                                      CALLED                @YM34322*/
         OI    MDVISMNT(PARMPTR),B'01000000'                       0292
*           REG1=PARMPTR;           /* SET PARM ADDRESS      @Y30LB24*/
         LR    REG1,PARMPTR                                        0293
*LMSSC1:                                                           0294
*           SVC(126);               /* INVOKE SVC 126 REISSUE MOUNT
*                                                            @Y30LB24*/
LMSSC1   SVC   126                                                 0294
*           MDVISMNT=OFF;           /* SET MSVC MNT OFF      @Y30LB24*/
         NI    MDVISMNT(PARMPTR),B'10111111'                       0295
*           IF REG15=ZERO THEN      /* MOUNT SUCCESSFUL      @Y30LB24*/
         LTR   REG15,REG15                                         0296
         BNZ   @RF00296                                            0296
*             DO;                   /* YES                   @Y30LB24*/
*               REG0=ZERO;          /* REASON CODE (000)     @Y30LB24*/
         SLR   REG0,REG0                                           0298
*               FAILCODE=EIGHT;     /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,8                                          0299
*               RETURN;             /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0300
*             END;                  /*                       @Y30LB24*/
*         END;                      /*                       @Y30LB24*/
@RF00296 DS    0H                                                  0303
*       REG8=REG14;                 /* SAVE LINKREG          @Y30LB24*/
@RF00289 LR    REG8,REG14                                          0303
*       REG2=LENGTH(RPLV);          /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0304
*       REG2=REG2+PLENGTH;          /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0305
*       CALL VQMGSTOR;              /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0306
*       IF FAILCODE^=ZERO THEN      /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0307
         BZ    @RF00307                                            0307
*         DO;                       /* NO                    @Y30LB24*/
*           REG0=SUCCES;            /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0309
*           FAILCODE=ZERO;          /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0310
*           REG14=REG8;             /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0311
*           RETURN;                 /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0312
*         END;                      /*                       @Y30LB24*/
*       RPLFTIME=ON;                /* DEFAULT SECOND ENTRY  @Y30LB24*/
@RF00307 OI    RPLFTIME(RPLVPTR),B'10000000'                       0314
*       IF PARM0=ZERO THEN          /* FIRST ENTRY?          @Y30LB24*/
         LTR   PARM0,PARM0                                         0315
         BNZ   @RF00315                                            0315
*         RPLFTIME=OFF;             /* INDICATE FIRST ENTRY  @Y30LB24*/
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0316
*       RPLVPOST=OFF;               /* INDICATE NO ECB POST  @Y30LB24*/
@RF00315 NI    RPLVPOST(RPLVPTR),B'10111111'                       0317
*       RPLRCODE=PARM0;             /* SET REASON CODE       @Y30LB24*/
         STH   PARM0,RPLRCODE(,RPLVPTR)                            0318
*       RPLVRETC=PARM0;             /* SET RETURN CODE       @Y30LB24*/
         STH   PARM0,RPLVRETC(,RPLVPTR)                            0319
*       REG1=PLENGTH;               /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0320
*       RPLVUTIL(1:REG1)=PARMLIST;  /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0321
         BCTR  @11,0                                               0321
         EX    @11,@SM01699                                        0321
*       CALL VQMADDRB;              /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0322
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0323
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0324
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0325
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0326
*     END;                          /* END MOUNT SPECIFIC    @Y30LB24*/
*                                                                  0328
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE PROCESSES MOUNT SCRATCH REQUESTS         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0328
*   IF PARM0=RZERO THEN             /* ZERO MSC RETURN CODE  @Y30LB24*/
@RF00281 C     PARM0,RZERO                                         0328
         BNE   @RF00328                                            0328
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=SUCCES;                /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0330
*       FAILCODE=ZERO;              /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0331
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0332
*     END;                          /*                       @Y30LB24*/
*   IF VVIFLG0=ON&                  /* TOTAL DISABLE AND     @Y30LB24*/
*       PARM0=ZERO THEN             /* FIRST ENTRY?          @Y30LB24*/
@RF00328 TM    VVIFLG0(VVIPTR),B'10000000'                         0334
         BNO   @RF00334                                            0334
         LTR   PARM0,PARM0                                         0334
         BNZ   @RF00334                                            0334
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=IDISABL;               /* REASON CODE (213)     @YM34322*/
         LA    REG0,531                                            0336
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0337
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0338
*     END;                          /*                       @Y30LB24*/
*   REG15=ZERO;                     /* ZERO WORK REGISTER    @ZDR2048*/
*                                                                  0340
@RF00334 SLR   REG15,REG15                                         0340
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR ADDRESSABILITY TO JFCB                      @ZDR2048*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0341
*   IF MDJFCB=REG15×(MDMEXT=ON&MNTXJFCB=REG15)/*             @ZDR2048*/
*     THEN                                                         0341
         C     REG15,MDJFCB(,PARMPTR)                              0341
         BE    @RT00341                                            0341
         TM    MDMEXT(PARMPTR),B'00001000'                         0341
         BNO   @RF00341                                            0341
         L     @11,MNTEXTP(,PARMPTR)                               0341
         C     REG15,MNTXJFCB(,@11)                                0341
         BNE   @RF00341                                            0341
@RT00341 DS    0H                                                  0342
*     DO;                           /* NOT ALLOWABLE         @G18MB04*/
*       REG0=NOJFCB;                /* REASON CODE (215)     @YM34322*/
         LA    REG0,533                                            0343
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0344
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0345
*     END;                          /*                       @Y30LB24*/
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RF00341 LR    REG8,REG14                                          0347
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0348
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0349
*   REG2=REG2+LJFCBOX;              /* ADD JFCB LENGTH       #YM34322*/
         AL    REG2,@CF00127                                       0350
*   IF MDMEXT=ON                    /* MOUNT LIST EXTENSION USED ? 0351
*                                                            @ZDR2048*/
*     THEN                                                         0351
         TM    MDMEXT(PARMPTR),B'00001000'                         0351
         BNO   @RF00351                                            0351
*     REG3=MNTXJFCB;                /* GET JFCB ADDR THERE   @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0352
         L     REG3,MNTXJFCB(,@11)                                 0352
*   ELSE                            /* JFCB ADDRESS IS IN MOUNT    0353
*                                      PARAMETER LIST        @ZDR2048*/
*     REG3=MDJFCB;                  /* SET JFCB ADDR         @G18MB04*/
         B     @RC00351                                            0353
@RF00351 L     REG3,MDJFCB(,PARMPTR)                               0353
*   REG15=NVOL;                     /* SET PARM WORK REG     @Y30LB24*/
@RC00351 SLR   REG15,REG15                                         0354
         IC    REG15,NVOL(,REG3)                                   0354
*   REG15=REG15-NVOLJFCB;           /* SUB JFCB CNT          @YM34322*/
         SL    REG15,@CF00123                                      0355
*   DO WHILE REG15>ZERO;            /* JFCBX NEEDED?         @Y30LB24*/
         B     @DE00356                                            0356
@DL00356 DS    0H                                                  0357
*     REG2=REG2+LJFCBOX;            /* ADD JFCBX LENGTH      @YM34322*/
         AL    REG2,@CF00127                                       0357
*     REG15=REG15-NVOLJX;           /* SUB JFCBX CNT         @YM34322*/
         SL    REG15,@CF00033                                      0358
*   END;                                                           0359
*                                                                  0359
@DE00356 LTR   REG15,REG15                                         0359
         BP    @DL00356                                            0359
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NONSPECIFIC-WITH-MSVGP-SPECIFIED, NEED MORE        @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*   IF JFCBMSGP=ON                  /* WAS MSVGP SPECIFIED ? @G18MB04*/
*     THEN                          /* YES                   @G18MB04*/
         TM    JFCBMSGP(REG3),B'00100000'                          0360
         BNO   @RF00360                                            0360
*     DO;                           /* READY FOR MORE STORAGE      0361
*                                                            @G18MB04*/
*       MNSWMPT=REG2;               /* SAVE SIZE OF FIRST PART     0362
*                                                            @G18MB04*/
         LR    MNSWMPT,REG2                                        0362
*       REG2=REG2+LENGTH(MNSWMSTG); /* ADD LENGTH OF ADDITIONAL    0363
*                                                            @G18MB04*/
         AL    REG2,@CF01683                                       0363
*     END;                          /*                       @G18MB04*/
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
@RF00360 BAL   @14,VQMGSTOR                                        0365
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0366
         BZ    @RF00366                                            0366
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0368
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0369
*     END;                          /*                       @Y30LB24*/
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
@RF00366 L     @11,PLENGTH(,PARMPTR)                               0371
         LR    REG1,@11                                            0371
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @07,REG1                                            0372
         BCTR  @07,0                                               0372
         EX    @07,@SM01699                                        0372
*   REG2=ADDR(RPLVUTIL);            /* SET RPLV ADDR         @Y30LB24*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0373
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         ALR   REG2,@11                                            0374
*   REG1=LJFCBOX;                   /* SET JFCB LENGTH       @YM34322*/
         LA    REG1,176                                            0375
*   IF MDMEXT=ON                    /* MOUNT LIST EXTENSION USED ? 0376
*                                                            @ZDR2048*/
*     THEN                                                         0376
         TM    MDMEXT(PARMPTR),B'00001000'                         0376
         BNO   @RF00376                                            0376
*     REG3=MNTXJFCB;                /* GET JFCB ADDR THERE   @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0377
         L     REG3,MNTXJFCB(,@11)                                 0377
*   ELSE                            /* USE JFCB ADDR FROM MOUNT PARAM
*                                      LIST                  @ZDR2048*/
*     REG3=MDJFCB;                  /* SET JFCB ADDR         @G18MB04*/
         B     @RC00376                                            0378
@RF00376 L     REG3,MDJFCB(,PARMPTR)                               0378
*   MOVELST(1:REG1)=INFMJFCB;       /* COPY JFCB             @Y30LB24*/
@RC00376 LR    @11,REG1                                            0379
         BCTR  @11,0                                               0379
         EX    @11,@SM01706                                        0379
*   REG2=REG2+LJFCBOX;              /* ADD JFCB LENGTH       @YM34322*/
         AL    REG2,@CF00127                                       0380
*   REG15=NVOL;                     /* SET PARM WORK REG     @Y30LB24*/
         SLR   REG15,REG15                                         0381
         IC    REG15,NVOL(,REG3)                                   0381
*   REG3=EXAD;                      /* SET JFCBX ADDR        @ZA05100*/
         L     @11,EXAD-1(,REG3)                                   0382
         LA    @11,0(,@11)                                         0382
         LR    REG3,@11                                            0382
*   REG15=REG15-NVOLJFCB;           /* SUB JFCB CNT          @YM34322*/
         SL    REG15,@CF00123                                      0383
*   DO WHILE REG15>ZERO;            /* JFCBX NEEDED?         @Y30LB24*/
         B     @DE00384                                            0384
@DL00384 DS    0H                                                  0385
*     REG1=LJFCBOX;                 /* SET JFCBX LENGTH      @YM34322*/
         LA    @11,176                                             0385
         LR    REG1,@11                                            0385
*     MOVELST(1:REG1)=JFCBX;        /* COPY JFCBX            @Y30LB24*/
         LR    @07,REG1                                            0386
         BCTR  @07,0                                               0386
         EX    @07,@SM01708                                        0386
*     REG3=JFCBXNXT;                /* SET JFCBX ADDR        @Y30LB24*/
         L     REG3,JFCBXNXT(,REG3)                                0387
*     REG2=REG2+LJFCBOX;            /* ADD JFCBX LENGTH      @YM34322*/
         ALR   REG2,@11                                            0388
*     REG15=REG15-NVOLJX;           /* SUB JFCBX CNT         @YM34322*/
         SL    REG15,@CF00033                                      0389
*   END;                            /*                       @Y30LB24*/
@DE00384 SLR   @11,@11                                             0390
         CR    REG15,@11                                           0390
         BH    @DL00384                                            0390
*   IF PARM0=ZERO THEN              /* FIRST ENTRY FOR REQUEST     0391
*                                                            @Y30LB24*/
         CR    PARM0,@11                                           0391
         BNE   @RF00391                                            0391
*     DO;                           /* YES                   @Y30LB24*/
*       RPLFTIME=OFF;               /* INDICATE FIRST ENTRY  @Y30LB24*/
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0393
*       IF MDMEXT=ON                /* MOUNT LIST EXTENSION USED ? 0394
*                                                            @ZDR2048*/
*         THEN                                                     0394
         TM    MDMEXT(PARMPTR),B'00001000'                         0394
         BNO   @RF00394                                            0394
*         REG3=MNTXJFCB;            /* GET JFCB ADDR THERE   @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0395
         L     REG3,MNTXJFCB(,@11)                                 0395
*       ELSE                        /* USE JFCB ADDR FROM MOUNT PARAM
*                                      LIST                  @ZDR2048*/
*         REG3=MDJFCB;              /* SET JFCB ADDR         @G18MB04*/
         B     @RC00394                                            0396
@RF00394 L     REG3,MDJFCB(,PARMPTR)                               0396
*       IF JFCBMSGP=ON&MDMEXT=ON    /* WAS MSVGP SPECIFIED   @G18MB04*/
*         THEN                      /* YES, SPECIAL PROCESS  @G18MB04*/
@RC00394 TM    JFCBMSGP(REG3),B'00100000'                          0397
         BNO   @RF00397                                            0397
         TM    MDMEXT(PARMPTR),B'00001000'                         0397
         BNO   @RF00397                                            0397
*         DO;                       /* VQMJESMT DOES IT      @G18MB04*/
*           CALL VQMJESMT;          /*                       @G18MB04*/
         BAL   @14,VQMJESMT                                        0399
*           REG14=REG8;             /* RESTORE RETURN        @G18MB04*/
         LR    REG14,REG8                                          0400
*           RETURN;                 /* VQMJESMT COMPLETE     @G18MB04*/
         B     @EL00003                                            0401
*         END;                      /*                       @G18MB04*/
*       RPLVPOST=ON;                /* INDICATE ECB POST     @Y30LB24*/
@RF00397 OI    RPLVPOST(RPLVPTR),B'01000000'                       0403
*       CALL VQMADDRB;              /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0404
*       REG1=PLENGTH;               /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0405
*       REG2=ADDR(RPLVUTIL);        /* SET RPLV ADDR         @Y30LB24*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0406
*       PARMLIST(1:REG1)=REG2->PARMLIST;/* COPY BACK         @Y30LB24*/
         LR    @11,REG1                                            0407
         BCTR  @11,0                                               0407
         EX    @11,@SM01710                                        0407
*       REG2=REG2+PLENGTH;          /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0408
*       REG1=LJFCBOX;               /* SET JFCB LENGTH       #YM34322*/
         LA    REG1,176                                            0409
*       IF MDMEXT=ON                /* MOUNT LIST EXTENSION USED ? 0410
*                                                            @ZDR2048*/
*         THEN                                                     0410
         TM    MDMEXT(PARMPTR),B'00001000'                         0410
         BNO   @RF00410                                            0410
*         REG3=MNTXJFCB;            /* GET JFCB ADDR         @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0411
         L     REG3,MNTXJFCB(,@11)                                 0411
*       ELSE                        /* GET JFCB ADDR FROM MOUNT PARAM
*                                      LIST                  @ZDR2048*/
*         REG3=MDJFCB;              /* SET JFCB ADDR         @G18MB04*/
         B     @RC00410                                            0412
@RF00410 L     REG3,MDJFCB(,PARMPTR)                               0412
*       INFMJFCB=MOVELST(1:REG1);   /* COPY JFCB BACK        @Y30LB24*/
@RC00410 MVI   INFMJFCB+1(REG3),C' '                               0413
         MVC   INFMJFCB+2(92,REG3),INFMJFCB+1(REG3)                0413
         LR    @11,REG1                                            0413
         BCTR  @11,0                                               0413
         EX    @11,@SM01712                                        0413
*       CALL VQMFSTOR;              /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0414
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0415
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0416
*     END;                          /*                       @Y30LB24*/
*                                                                  0418
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE PROCESSES MOUNT RETRY            @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0418
*   REG0=PARM0;                     /* SET PARAMETER WORK REG      0418
*                                                            @Y30LB24*/
@RF00391 LR    REG0,PARM0                                          0418
*   REG15=PARM0;                    /* SET PARAMETER WORK REG      0419
*                                                            @Y30LB24*/
         LR    REG15,PARM0                                         0419
*   IF MDMEXT=ON                    /* MOUNT LIST EXTENSION USED ? 0420
*                                                            @ZDR2048*/
*     THEN                                                         0420
         TM    MDMEXT(PARMPTR),B'00001000'                         0420
         BNO   @RF00420                                            0420
*     REG3=MNTXJFCB;                /* GET JFCB ADDR         @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0421
         L     REG3,MNTXJFCB(,@11)                                 0421
*   ELSE                            /* GET JFCB ADDR FROM MOUNT PARAM
*                                      LIST                  @ZDR2048*/
*     REG3=MDJFCB;                  /* SET JFCB ADDR         @G18MB04*/
         B     @RC00420                                            0422
@RF00420 L     REG3,MDJFCB(,PARMPTR)                               0422
*   IF JFCBMSGP=ON&MDMEXT=ON        /* WAS MSVGP SPECIFIED   @G18MB04*/
*     THEN                          /* YES, NEED SPECIAL PROCESSING
*                                                            @G18MB04*/
@RC00420 TM    JFCBMSGP(REG3),B'00100000'                          0423
         BNO   @RF00423                                            0423
         TM    MDMEXT(PARMPTR),B'00001000'                         0423
         BNO   @RF00423                                            0423
*     DO;                           /*                       @G18MB04*/
*       RPLFTIME=ON;                /* INDICATE RETRY OR 2ND TIME  0425
*                                                            @G18MB04*/
         OI    RPLFTIME(RPLVPTR),B'10000000'                       0425
*       CALL VQMJESMT;              /* LET VQMJESMT DO ALL PROCESSING
*                                                            @G18MB04*/
         BAL   @14,VQMJESMT                                        0426
*       REG14=REG8;                 /* RESTORE RETURN FOR VQMMOUNT 0427
*                                                            @G18MB04*/
         LR    REG14,REG8                                          0427
*       RETURN;                     /*                       @G18MB04*/
         B     @EL00003                                            0428
*     END;                          /* ALL NONSPECIFIC WITH MSVGP,2ND
*                                      ENTRY                 @G18MB04*/
*   DO WHILE REG15^=ZERO;           /* BAD MSC RETURN CODE   @Y30LB24*/
@RF00423 B     @DE00430                                            0430
@DL00430 DS    0H                                                  0431
*     RPLFLAGA=''B;                 /* ZERO FLAGS            @Y30LB24*/
         XC    RPLFLAGA(2,RPLVPTR),RPLFLAGA(RPLVPTR)               0431
*     RPLVSAM=''B;                  /* ZERO VSAM RPL         @Y30LB24*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0432
*     RPLFTIME=ON;                  /* INDICATE SECOND ENTRY @Y30LB24*/
*     RPLVPOST=ON;                  /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLFTIME(RPLVPTR),B'11000000'                       0434
*     RPLRCODE=REG0;                /* SET REASON CODE       @Y30LB24*/
         STH   REG0,RPLRCODE(,RPLVPTR)                             0435
*     RPLVRETC=REG0;                /* SET RETURN CODE       @Y30LB24*/
         STH   REG0,RPLVRETC(,RPLVPTR)                             0436
*     CALL VQMADDRB;                /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0437
*     IF RPLVRETC^=ZERO THEN        /* MSVC SUCCESSFUL?      @Y30LB24*/
         LH    @11,RPLVRETC(,RPLVPTR)                              0438
         N     @11,@CF01714                                        0438
         LTR   @11,@11                                             0438
         BZ    @RF00438                                            0438
*       DO;                         /* NO                    @Y30LB24*/
*         REG15=ZERO;               /* SET LOOP FAIL         @Y30LB24*/
         SLR   REG15,REG15                                         0440
*       END;                        /*                       @Y30LB24*/
*     ELSE                                                         0442
*       DO;                         /* REISSUE MOUNT         @Y30LB24*/
         B     @RC00438                                            0442
@RF00438 DS    0H                                                  0443
*         REG1=ADDR(RPLVUTIL);      /* SET RPLV ADDR         @Y30LB24*/
         LA    REG1,RPLVUTIL(,RPLVPTR)                             0443
*         REG1->MDVISMNT=ON;        /* SET MSVC MNT ON       @Y30LB24*/
         OI    MDVISMNT(REG1),B'01000000'                          0444
*LMSSC2:                                                           0445
*         SVC(126);                 /* INVOKE SVC 126 ISSUE MOUNT  0445
*                                                            @Y30LB24*/
LMSSC2   SVC   126                                                 0445
*         REG1->MDVISMNT=OFF;       /* SET MSVC MNT OFF      @Y30LB24*/
         NI    MDVISMNT(REG1),B'10111111'                          0446
*         IF REG15=ZERO THEN        /* MOUNT SUCCESSFUL      @Y30LB24*/
         SLR   @11,@11                                             0447
         CR    REG15,@11                                           0447
         BNE   @RF00447                                            0447
*           DO;                     /* YES                   @Y30LB24*/
*             RPLRCODE=ZERO;        /* REASON CODE (000)     @Y30LB24*/
         STH   @11,RPLRCODE(,RPLVPTR)                              0449
*             RPLVRETC=EIGHT;       /* SET RETURN CODE       @Y30LB24*/
         MVC   RPLVRETC(2,RPLVPTR),@CH00061                        0450
*           END;                    /*                       @Y30LB24*/
*       END;                        /*                       @Y30LB24*/
@RF00447 DS    0H                                                  0453
*   END;                            /*                       @Y30LB24*/
@RC00438 DS    0H                                                  0453
@DE00430 LTR   REG15,REG15                                         0453
         BNZ   @DL00430                                            0453
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0454
*   REG2=ADDR(RPLVUTIL);            /* SET RPLV ADDR         @Y30LB24*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0455
*   PARMLIST(1:REG1)=REG2->PARMLIST;/* COPY PARM BACK        @Y30LB24*/
         LR    @11,REG1                                            0456
         BCTR  @11,0                                               0456
         EX    @11,@SM01710                                        0456
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0457
*   REG1=LJFCBOX;                   /* SET JFCB LENGTH       #YM34322*/
         LA    REG1,176                                            0458
*   IF MDMEXT=ON                    /* MOUNT LIST EXTENSION USED ? 0459
*                                                            @ZDR2048*/
*     THEN                                                         0459
         TM    MDMEXT(PARMPTR),B'00001000'                         0459
         BNO   @RF00459                                            0459
*     REG3=MNTXJFCB;                /* GET JFCB ADDR THERE   @ZDR2048*/
         L     @11,MNTEXTP(,PARMPTR)                               0460
         L     REG3,MNTXJFCB(,@11)                                 0460
*   ELSE                            /* JFCB ADDR FROM MOUNT PARAM  0461
*                                      LIST                  @ZDR2048*/
*     REG3=MDJFCB;                  /* SET JFCB ADDR         @G18MB04*/
         B     @RC00459                                            0461
@RF00459 L     REG3,MDJFCB(,PARMPTR)                               0461
*   INFMJFCB=MOVELST(1:REG1);       /* COPY JFCB BACK        @Y30LB24*/
@RC00459 MVI   INFMJFCB+1(REG3),C' '                               0462
         MVC   INFMJFCB+2(92,REG3),INFMJFCB+1(REG3)                0462
         LR    @11,REG1                                            0462
         BCTR  @11,0                                               0462
         EX    @11,@SM01712                                        0462
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0463
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0464
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00003                                            0465
*   END VQMMOUNT;                   /* END MOUNT RTN         @Y30LB24*/
*                                                                  0467
*/* ******************************************************************
*                                                                  0467
*     NAME = VQMDEMNT,  VOLUME DEMOUNT PROCESSING.             @Y30LB24
*                                                                  0467
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0467
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0467
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0467
*     DEMOUNT REQUESTS.                                            0467
*     IF THE MSVC INVENTORY IS DISABLED THEN NO PROCESSING IS      0467
*     DONE AND THE REQUEST IS RETURNED WITH GOOD COMPLETION.       0467
*     IF THE MSVC INVENTORY IS NOT DISABLED THEN THROUGH           0467
*     A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE           0467
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0467
*     THE PROPER FLAGS AND ENTRIES.                                0467
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0467
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0467
*     HIGH PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0467
*     IF THIS IS THE FIRST ENTRY FOR THE REQUEST THEN              0467
*     A WAIT IS THEN DONE FOR THE SUBTASK TO COMPLETE THE FUNCTION.
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0467
*     CALLED TO FREE THE REQUEST BLOCK.                            0467
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH A            0467
*     SUCCESSFUL COMPLETION WHICH WILL BE RETURNED TO THE CALLER.  0467
*     IF THIS IS THE SECOND ENTRY FOR THE REQUEST THEN NO WAIT IS  0467
*     REQUIRED AND A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH 0467
*     A SUCCESSFUL COMPLETION WHICH WILL BE RETURNED TO THE CALLER.
*                                                              @Y30LB24
*                                                                  0467
*     OUTPUT = MSSC-SVC REQUEST ENTRY ADDED TO RPLV CHAIN.     @Y30LB24
*                                                                  0467
******************************************************************** */
*/*VQMDEMNT: CHART                                                   */
*/*HEADER                                                          0467
*/*DECEMBER 8, 1975                           ICBVQM00 - SEGMENT   0467
*/*VQMDEMNT - VOLUME DEMOUNT PROCESSING                              */
*/*          E                    VQMDEMNT                           */
*/*          D (NO,,YES,%END)     MSVC DISABLED                      */
*/*          P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          D (NO,,YES,%ADD)     INITIAL ENTRY FOR ORDER            */
*/*          P                    INDICATE SECOND ENTRY              */
*/*%ADD:     S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMDEMNT: END                                                     */
*                                                                  0467
*VQMDEMNT:                                                         0467
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0467
VQMDEMNT DS    0H                                                  0468
*   IF VVIFLG0=ON THEN              /* TOTAL DISABLE         @Y30LB24*/
         TM    VVIFLG0(VVIPTR),B'10000000'                         0468
         BNO   @RF00468                                            0468
*     DO;                           /* YES                   @Y30LB24*/
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00004 DS    0H                                                  0470
@EF00004 DS    0H                                                  0470
@ER00004 BR    @14                                                 0470
*     END;                          /*                       @Y30LB24*/
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RF00468 LR    REG8,REG14                                          0472
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0473
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0474
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0475
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0476
         BZ    @RF00476                                            0476
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0478
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00004                                            0479
*     END;                          /*                       @Y30LB24*/
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
@RF00476 L     REG1,PLENGTH(,PARMPTR)                              0481
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0482
         BCTR  @11,0                                               0482
         EX    @11,@SM01699                                        0482
*   IF PARM0=ZERO THEN              /* FIRST ENTRY?          @Y30LB24*/
         LTR   PARM0,PARM0                                         0483
         BNZ   @RF00483                                            0483
*     DO;                           /* YES                   @Y30LB24*/
*       RPLFTIME=OFF;               /* INDICATE FIRST ENTRY  @Y30LB24*/
*       RPLVPOST=ON;                /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0486
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0486
*       CALL VQMADDRB;              /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0487
*       CALL VQMFSTOR;              /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0488
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0489
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00004                                            0490
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=ON;                    /* INDICATE SECOND ENTRY @Y30LB24*/
@RF00483 DS    0H                                                  0493
*   RPLVPOST=OFF;                   /* INDICATE NO ECB POST  @Y30LB24*/
         OI    RPLFTIME(RPLVPTR),B'10000000'                       0493
         NI    RPLVPOST(RPLVPTR),B'10111111'                       0493
*   RPLRCODE=PARM0;                 /* SET REASON CODE       @Y30LB24*/
         STH   PARM0,RPLRCODE(,RPLVPTR)                            0494
*   RPLVRETC=PARM0;                 /* SET RETURN CODE       @Y30LB24*/
         STH   PARM0,RPLVRETC(,RPLVPTR)                            0495
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0496
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0497
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00004                                            0498
*   END VQMDEMNT;                   /* END DEMOUNT           @Y30LB24*/
*                                                                  0500
*/* ******************************************************************
*                                                                  0500
*     NAME = VQMMSSUT,  MSS UTILITY PROCESSING.                @Y30LB24
*                                                                  0500
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0500
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0500
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0500
*     MOVE CARTRIDGE, COPY CARTRIDGE, DEFINE VOLUME, AND           0500
*     COPY VOLUME REQUESTS.                                        0500
*     IF THE MSVC RPLV IS FOR A MOVE SCRATCH CARTRIDGE,            0500
*     COPY CARTRIDGE TO DASD,OR DEFINES A CE CARTRIDGE             0500
*     THEN RETURN IS MADE WITH GOOD RETURN.                        0500
*     IF THE MSVC INVENTORY OR JOURNAL IS DISABLED THEN NO         0500
*     PROCESSING IS DONE AND THE REQUEST IS FAILED.                0500
*     IF THE MSVC INVENTORY OR JOURNAL IS NOT DISABLED THEN        0500
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE   0500
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0500
*     THE PROPER FLAGS AND ENTRIES.                                0500
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0500
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0500
*     LOW PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED 0500
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0500
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0500
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0500
*     CALLED TO FREE THE REQUEST BLOCK.                            0500
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH THE RESULTS  0500
*     OF THE FUNCTION WHICH WILL BE RETURNED TO THE CALLER.    @YM34322
*                                                                  0500
*     OUTPUT = FUNCTION RESULTS WHICH ARE RETURNED TO CALLER.  @Y30LB24
*                                                                  0500
******************************************************************** */
*/*VQMMSSUT: CHART                                                   */
*/*HEADER                                                          0500
*/*DECEMBER 8, 1975                             ICBVQM00 - SEGMENT 0500
*/*VQMMSSUT - MSS UTILITY PROCESSING                                 */
*/*          E                    VQMMSSUT                           */
*/*          D (NO,,YES,%END)     MOVE SCRATCH CARTRIDGE             */
*/*          D (NO,,YES,%END)     NULLIFY SCRATCH CARTRIDGE          */
*/*          D (NO,,YES,%END)     COPY CARTRIDGE TO DASD             */
*/*          D (NO,,YES,%END)     DEFINE A CE CARTRIDGE              */
*/*          D (YES,,NO,%ENABLE)  INITIAL ENTRY FOR ORDER            */
*/*          D (YES,,NO,%CKJRNL)  MSVC DISABLED                      */
*/*          P (,%END)            INDICATE MSVC DISABLED             */
*/*%CKJRNL:  D (YES,,NO,%CKNULC)  JRNL DISABLED                      */
*/*          P (,%END)            INDICATE JRNL DISABLED             */
*/*%CKNULC:  D (YES,%END,NO,)     NULLIFYC ORDER                     */
*/*%ENABLE:  D (YES,,NO,%GET)     INVALID EXT LENGTH                 */
*/*          P (,%END)            INDICATE INVALID REQUEST           */
*/*%GET:     P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%RET)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%RET:     D (YES,,NO,%END)     ZERO MSC RETURN                    */
*/*          D (NO,,YES,%END)     ZERO MSVC RETURN                   */
*/*          P                    SET UTIL INDICATOR                 */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMMSSUT: END                                                     */
*                                                                  0500
*VQMMSSUT:                                                         0500
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0500
VQMMSSUT DS    0H                                                  0501
*   IF(OPCODE=MOVECART&             /* MOVE CARTRIDGE        @YM34322*/
*       MCRTSCT=ON)×                /* SCRATCH CARTRIDGE     @YM34322*/
*       (OPCODE=NULLC&              /* NULLIYC OF            @Z40LB25*/
*       NULSCRC=ON)×                /* SCRATCH CARTRIDGE     @Z40LB25*/
*       (OPCODE=COPYVOL&            /* COPY CARTRIDGE        @YM34322*/
*       CVOCRDAS=ON)×               /* CARTRIDGE TO DASD     @YM34322*/
*       (OPCODE=DEFVOL&             /* DEFINE VOLUME         @YM34322*/
*       DEFVCECT=ON&                /* CE CARTRIDGE          @YM34322*/
*       DEFVVFLG^=ALLON) THEN       /* NOT REPLACE VOL FLAGS @YM34322*/
         CLI   OPCODE(PARMPTR),X'0E'                               0501
         BNE   @GL00038                                            0501
         TM    MCRTSCT(PARMPTR),B'00010000'                        0501
         BO    @RT00501                                            0501
@GL00038 CLI   OPCODE(PARMPTR),X'09'                               0501
         BNE   @GL00037                                            0501
         TM    NULSCRC(PARMPTR),B'00100000'                        0501
         BO    @RT00501                                            0501
@GL00037 CLI   OPCODE(PARMPTR),X'2A'                               0501
         BNE   @GL00036                                            0501
         TM    CVOCRDAS(PARMPTR),B'01000000'                       0501
         BO    @RT00501                                            0501
@GL00036 CLI   OPCODE(PARMPTR),X'18'                               0501
         BNE   @RF00501                                            0501
         TM    DEFVCECT(PARMPTR),B'10000000'                       0501
         BNO   @RF00501                                            0501
         CLI   DEFVVFLG(PARMPTR),X'FF'                             0501
         BNE   @RT00501                                            0501
*     RETURN;                       /* RETURN TO ICBVQM00    @YM34322*/
*   IF PARM0=ZERO THEN              /* FIRST ENTRY?          @Y30LB24*/
@RF00501 LTR   PARM0,PARM0                                         0503
         BNZ   @RF00503                                            0503
*     DO;                           /* YES                   @Y30LB24*/
*       IF VVIFLG0=ON THEN          /* TOTAL DISABLE         @Y30LB24*/
         TM    VVIFLG0(VVIPTR),B'10000000'                         0505
         BNO   @RF00505                                            0505
*         DO;                       /* YES                   @Y30LB24*/
*           REG0=IDISABL;           /* REASON CODE (213)     @YM34322*/
         LA    REG0,531                                            0507
*           FAILCODE=FOUR;          /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0508
*           RETURN;                 /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00005 DS    0H                                                  0509
@EF00005 DS    0H                                                  0509
@ER00005 BR    @14                                                 0509
*         END;                      /*                       @Y30LB24*/
*       IF VVIFLG2=ON THEN          /* JOURNAL DISABLE       @Y30LB24*/
@RF00505 TM    VVIFLG2(VVIPTR),B'00100000'                         0511
         BNO   @RF00511                                            0511
*         DO;                       /* YES                   @Y30LB24*/
*           REG0=JDISABL;           /* REASON CODE (214)     @YM34322*/
         LA    REG0,532                                            0513
*           FAILCODE=FOUR;          /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0514
*           RETURN;                 /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00005                                            0515
*         END;                      /*                       @Y30LB24*/
*       IF OPCODE=NULLC THEN        /* NULL CARTRIDGE?       @Z40LB25*/
@RF00511 CLI   OPCODE(PARMPTR),X'09'                               0517
         BE    @RT00517                                            0517
*         RETURN;                   /* RETURN TO ICBVQM00    @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RF00503 LR    REG8,REG14                                          0520
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0521
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0522
*   REG1=ONE;                       /* SET DEFAULT PARM      @Y30LB24*/
         LA    REG1,1                                              0523
*   REG3=REG3-REG3;                 /* SET DEFAULT PARM      @Y30LB24*/
         SLR   REG3,REG3                                           0524
*   IF OPCODE=MOVECART THEN         /* MOVE CARTRIDGE?       @YM34322*/
         CLI   OPCODE(PARMPTR),X'0E'                               0525
         BNE   @RF00525                                            0525
*     DO;                           /* YES                   @Y30LB24*/
*       IF MCRTVEXT^=ZERO THEN      /* UTILITY EXT.          @Y30LB24*/
         L     @11,MCRTVEXT(,PARMPTR)                              0527
         LTR   @11,@11                                             0527
         BZ    @RF00527                                            0527
*         DO;                       /* YES                   @Y30LB24*/
*           REG3=MCRTVEXT;          /* SET EXT ADDRESS       @Y30LB24*/
         LR    REG3,@11                                            0529
*           REG1=REG3->PLENGTH;     /* SET EXT LENGTH        @Y30LB24*/
         L     REG1,PLENGTH(,REG3)                                 0530
*           REG2=REG2+REG1;         /* ADD EXT LENGTH        @Y30LB24*/
         ALR   REG2,REG1                                           0531
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
@RF00527 DS    0H                                                  0534
*   IF OPCODE=DEFVOL THEN           /* DEFINE VOLUME?        @YM34322*/
@RF00525 CLI   OPCODE(PARMPTR),X'18'                               0534
         BNE   @RF00534                                            0534
*     DO;                           /* YES                   @Y30LB24*/
*       IF DEFVVEXT^=ZERO THEN      /* UTILITY EXT.          @Y30LB24*/
         L     @11,DEFVVEXT(,PARMPTR)                              0536
         LTR   @11,@11                                             0536
         BZ    @RF00536                                            0536
*         DO;                       /* YES                   @Y30LB24*/
*           REG3=DEFVVEXT;          /* SET EXT ADDRESS       @Y30LB24*/
         LR    REG3,@11                                            0538
*           REG1=REG3->PLENGTH;     /* SET EXT LENGTH        @Y30LB24*/
         L     REG1,PLENGTH(,REG3)                                 0539
*           REG2=REG2+REG1;         /* ADD EXT LENGTH        @Y30LB24*/
         ALR   REG2,REG1                                           0540
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
@RF00536 DS    0H                                                  0543
*   IF OPCODE=COPYVOL THEN          /* COPY VOLUME?          @YM34322*/
@RF00534 CLI   OPCODE(PARMPTR),X'2A'                               0543
         BNE   @RF00543                                            0543
*     DO;                           /* YES                   @Y30LB24*/
*       IF CVOLVEXT^=ZERO THEN      /* UTILITY EXT.          @Y30LB24*/
         L     @11,CVOLVEXT(,PARMPTR)                              0545
         LTR   @11,@11                                             0545
         BZ    @RF00545                                            0545
*         DO;                       /* YES                   @Y30LB24*/
*           REG3=CVOLVEXT;          /* SET EXT ADDRESS       @Y30LB24*/
         LR    REG3,@11                                            0547
*           REG1=REG3->PLENGTH;     /* SET EXT LENGTH        @Y30LB24*/
         L     REG1,PLENGTH(,REG3)                                 0548
*           REG2=REG2+REG1;         /* ADD EXT LENGTH        @Y30LB24*/
         ALR   REG2,REG1                                           0549
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
@RF00545 DS    0H                                                  0552
*   IF REG1<=ZERO×                  /* INVALID REQUEST?      @Y30LB24*/
*       REG1>MAXLNGTH THEN          /* INVALID REQUEST?      @Y30LB24
*                                                            @YM34322*/
@RF00543 LTR   REG1,REG1                                           0552
         BNP   @RT00552                                            0552
         C     REG1,@CF00129                                       0552
         BNH   @RF00552                                            0552
@RT00552 DS    0H                                                  0553
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=INVALLNG;              /* REASON CODE (216)     @YM34322*/
         LA    REG0,534                                            0554
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0555
*       RETURN;                     /* RETURN TO MSSC-SVC    @Y30LB24*/
         B     @EL00005                                            0556
*     END;                          /*                       @Y30LB24*/
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
@RF00552 BAL   @14,VQMGSTOR                                        0558
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0559
         BZ    @RF00559                                            0559
*     DO;                           /* NO                    @Y30LB24*/
*       IF PARM0=RZERO THEN         /* ZERO MSC RETURN       @YD00160*/
         C     PARM0,RZERO                                         0561
         BNE   @RF00561                                            0561
*         DO;                       /* YES                   @YD00160*/
*           GEN(ICM REG0,M8,EID);   /* SET UTIL INDICATOR    @YD00160*/
         ICM REG0,M8,EID
*         END;                      /*                       @YD00160*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
@RF00561 LR    REG14,REG8                                          0565
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00005                                            0566
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=ON;                    /* DEFAULT SECOND ENTRY  @Y30LB24*/
@RF00559 OI    RPLFTIME(RPLVPTR),B'10000000'                       0568
*   IF PARM0=ZERO THEN              /* FIRST ENTRY?          @Y30LB24*/
         LTR   PARM0,PARM0                                         0569
         BNZ   @RF00569                                            0569
*     RPLFTIME=OFF;                 /* INDICATE FIRST ENTRY  @Y30LB24*/
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0570
*   RPLVPOST=ON;                    /* INDICATE ECB POST     @Y30LB24*/
@RF00569 OI    RPLVPOST(RPLVPTR),B'01000000'                       0571
*   RPLRCODE=PARM0;                 /* SET REASON CODE       @Y30LB24*/
         STH   PARM0,RPLRCODE(,RPLVPTR)                            0572
*   RPLVRETC=PARM0;                 /* SET RETURN CODE       @Y30LB24*/
         STH   PARM0,RPLVRETC(,RPLVPTR)                            0573
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     @11,PLENGTH(,PARMPTR)                               0574
         LR    REG1,@11                                            0574
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @07,REG1                                            0575
         BCTR  @07,0                                               0575
         EX    @07,@SM01699                                        0575
*   REG2=ADDR(RPLVUTIL);            /* SET RPLV ADDR         @Y30LB24*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0576
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         ALR   REG2,@11                                            0577
*   IF REG3^=ZERO THEN              /* EXT AVAILABLE?        @Y30LB24*/
         LTR   REG3,REG3                                           0578
         BZ    @RF00578                                            0578
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=REG3->PLENGTH;         /* SET EXT LENGTH        @Y30LB24*/
         L     REG1,PLENGTH(,REG3)                                 0580
*       MOVELST(1:REG1)=PARMEXT;    /* COPY EXTENSION        @Y30LB24*/
         LR    @11,REG1                                            0581
         BCTR  @11,0                                               0581
         EX    @11,@SM01715                                        0581
*     END;                          /*                       @Y30LB24*/
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
@RF00578 BAL   @14,VQMADDRB                                        0583
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0584
*   IF PARM0=RZERO THEN             /* ZERO MSC RETURN       @YD00160*/
         C     PARM0,RZERO                                         0585
         BNE   @RF00585                                            0585
*     DO;                           /* YES                   @YD00160*/
*       IF REG0^=ZERO THEN          /* ZERO MSVC RETURN      @YD00160*/
         LTR   REG0,REG0                                           0587
         BZ    @RF00587                                            0587
*         DO;                       /* NO                    @YD00160*/
*           GEN(ICM REG0,M8,EID);   /* SET UTIL INDICATOR    @YD00160*/
         ICM REG0,M8,EID
*         END;                      /*                       @YD00160*/
*     END;                          /*                       @YD00160*/
@RF00587 DS    0H                                                  0592
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
@RF00585 LR    REG14,REG8                                          0592
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00005                                            0593
*   END VQMMSSUT;                   /* END MSS UTILITY       @Y30LB24*/
         B     @EL00005                                            0594
*                                                                  0595
*/* ******************************************************************
*                                                                  0595
*     NAME = VQMMSSMG,  MSS MESSAGE PROCESSING                 @Y30LB24
*                                                                  0595
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0595
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0595
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0595
*     MSC SOLICTED AND UNSOLICTED MESSAGES.                        0595
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR       0595
*     THE MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED      0595
*     WITH THE PROPER FLAGS AND ENTRIES.                           0595
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0595
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0595
*     LOW PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED 0595
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0595
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE.              @Y30LB24
*                                                                  0595
*     OUTPUT = MSSC-SVC REQUEST ENTRY ADDED TO RPLV CHAIN.     @Y30LB24
*                                                                  0595
******************************************************************** */
*/*VQMMSSMG: CHART                                                   */
*/*HEADER                                                          0595
*/*JUNE 14, 1974                                ICBVQM00 - SEGMENT 0595
*/*VQMMSSMG - MSS MESSAGE PROCESSING                                 */
*/*          E                    VQMMSSMG                           */
*/*          P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMMSSMG: END                                                     */
*                                                                  0595
*VQMMSSMG:                                                         0595
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0595
VQMMSSMG DS    0H                                                  0596
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
         LR    REG8,REG14                                          0596
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0597
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0598
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0599
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0600
         BZ    @RF00600                                            0600
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0602
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00006 DS    0H                                                  0603
@EF00006 DS    0H                                                  0603
@ER00006 BR    @14                                                 0603
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=OFF;                   /* INDICATE FIRST ENTRY  @Y30LB24*/
@RF00600 DS    0H                                                  0606
*   RPLVPOST=OFF;                   /* INDICATE NO ECB POST  @Y30LB24*/
         NI    RPLFTIME(RPLVPTR),B'00111111'                       0606
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0607
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0608
         BCTR  @11,0                                               0608
         EX    @11,@SM01699                                        0608
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0609
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0610
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00006                                            0611
*   END VQMMSSMG;                   /* END MESSAGE PROCESSING      0612
*                                                            @Y30LB24*/
*                                                                  0613
*/* ******************************************************************
*                                                                  0613
*     NAME = VQMREADR,  READ RECORD FROM INVENTORY.            @Y30LB24
*                                                                  0613
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0613
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0613
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF READ   0613
*     MSVC RECORDS REQUESTS.                                       0613
*     IF THE MSVC INVENTORY IS DISABLED THEN NO PROCESSING IS      0613
*     DONE AND THE REQUEST IS FAILED.                              0613
*     IF THE MSVC INVENTORY IS NOT DISABLED THEN THROUGH           0613
*     A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE           0613
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0613
*     THE PROPER FLAGS AND ENTRIES.                                0613
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0613
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0613
*     LOW PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED 0613
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0613
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0613
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, IF THE READ WAS     0613
*     SUCCESSFUL THE RECORD IS MOVED TO THE USER'S BUFFER  AND     0613
*     A FREEMAIN IS DONE TO FREE THE MSVC RECORD BUFFER.           0613
*     A SUBROUTINE IS CALLED TO FREE THE REQUEST BLOCK.            0613
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH THE RESULTS  0613
*     OF THE FUNCTION WHICH WILL BE RETURNED TO THE CALLER.    @Y30LB24
*                                                                  0613
*     OUTPUT = FUNCTION RESULTS WHICH ARE RETURNED TO CALLER.  @Y30LB24
*                                                                  0613
******************************************************************** */
*/*VQMREADR: CHART                                                   */
*/*HEADER                                                          0613
*/*DECEMBER 8, 1975                              ICBVQM00 - SEGMENT
*/*VQMREADR - READ RECORD PROCESSING                                 */
*/*          E                    VQMREADR                           */
*/*          D (YES,,NO,%ENABLE)  MSVC DISABLED                      */
*/*          P  (,%END)           INDICATE MSVC DISABLED             */
*/*%ENABLE:  P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          P                    ZERO SUBTASK PARMS                 */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          D (YES,,NO,%FRPLV)   BUFFER AVAILABLE                   */
*/*          P                    MOVE RECORD TO USER BUFFER         */
*/*          P                    FREEMAIN RECORD BUFFER             */
*/*%FRPLV:   P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREE RPLV                */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMREADR: END                                                     */
*                                                                  0613
*VQMREADR:                                                         0613
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0613
VQMREADR DS    0H                                                  0614
*   IF VVIFLG0=ON THEN              /* TOTAL DISABLE         @Y30LB24*/
         TM    VVIFLG0(VVIPTR),B'10000000'                         0614
         BNO   @RF00614                                            0614
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=IDISABL;               /* REASON CODE (213)     @YM34322*/
         LA    REG0,531                                            0616
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0617
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00007 DS    0H                                                  0618
@EF00007 DS    0H                                                  0618
@ER00007 BR    @14                                                 0618
*     END;                          /*                       @Y30LB24*/
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RF00614 LR    REG8,REG14                                          0620
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0621
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0622
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0623
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0624
         BZ    @RF00624                                            0624
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0626
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00007                                            0627
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=OFF;                   /* INDICATE FIRST ENTRY  @Y30LB24*/
@RF00624 DS    0H                                                  0630
*   RPLVPOST=ON;                    /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0630
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0630
*   RVVARLN=ZERO;                   /* ZERO SUBTASK PARM     @Y30LB24*/
         SLR   @11,@11                                             0631
         STH   @11,RVVARLN(,PARMPTR)                               0631
*   RVVAREA=ZERO;                   /* ZERO SUBTASK PARM     @Y30LB24*/
         ST    @11,RVVAREA(,PARMPTR)                               0632
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0633
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0634
         BCTR  @11,0                                               0634
         EX    @11,@SM01699                                        0634
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0635
*   REG3=ADDR(RPLVUTIL);            /* SET ADDR REG          @Y30LB24*/
         LA    REG3,RPLVUTIL(,RPLVPTR)                             0636
*   IF REG3->RVVAREA^=ZERO THEN     /* BUFFER AVAILABLE      @Y30LB24*/
         L     @11,RVVAREA(,REG3)                                  0637
         LTR   @11,@11                                             0637
         BZ    @RF00637                                            0637
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=RVVRTBUF;              /* SET USER BUFFER PTR   @Y30LB24*/
         L     REG0,RVVRTBUF(,PARMPTR)                             0639
*       REG1=RPLVRLN;               /* SET MSVC RECORD LENGTH      0640
*                                                            @Y30LB24*/
         L     REG1,RPLVRLN(,RPLVPTR)                              0640
*       REG2=REG3->RVVAREA;         /* SET MSVC BUFF PTR     @Y30LB24*/
         LR    REG2,@11                                            0641
*       REG3=REG1;                  /* SET MOVE RECORD LENGTH      0642
*                                                            @Y30LB24*/
         LR    REG3,REG1                                           0642
*       GEN(MVCL REG0,REG2);        /* MOVE RECORD           @Y30LB24*/
         MVCL REG0,REG2
*       REG3=ADDR(RPLVUTIL);        /* SET ADDR REG          @Y30LB24*/
         LA    REG3,RPLVUTIL(,RPLVPTR)                             0644
*       REG0=REG3->RVVARLN;         /* SET FREEMAIN LENGTH   @Y30LB24*/
         LH    REG0,RVVARLN(,REG3)                                 0645
*       GEN(ICM REG0,M8,POOL);      /* INDICATE SUBPOOL 241  @Y30LB24*/
         ICM REG0,M8,POOL
*       REG1=REG3->RVVAREA;         /* SET FREEMAIN ADDR     @Y30LB24*/
         L     REG1,RVVAREA(,REG3)                                 0647
*LFREM1:                                                           0648
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREEMAIN             @Y30LB24*/
LFREM1   FREEMAIN R,LV=(0),A=(1)
*     END;                          /*                       @Y30LB24*/
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
@RF00637 BAL   @14,VQMFSTOR                                        0650
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0651
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00007                                            0652
*   END VQMREADR;                   /* END READ RECORD       @Y30LB24*/
*                                                                  0654
*/* ******************************************************************
*                                                                  0654
*     NAME = VQMVVIUT,  MSVC UTILITY REQUEST.                  @Y30LB24
*                                                                  0654
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0654
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0654
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF REMOVE 0654
*     VOLUME RECORD, MODIFY VOLUME RECORD, CREATE GROUP RECORD,    0654
*     MODIFY GROUP RECORD, AND SCRATCH GROUP RECORD REQUESTS.      0654
*     IF THE MSVC INVENTORY OR JOURNAL IS DISABLED THEN NO         0654
*     PROCESSING IS DONE AND THE REQUEST IS FAILED.                0654
*     IF THE MSVC INVENTORY OR JOURNAL IS NOT DISABLED THEN        0654
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE   0654
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0654
*     THE PROPER FLAGS AND ENTRIES.                                0654
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0654
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0654
*     LOW PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED 0654
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0654
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0654
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0654
*     CALLED TO FREE THE REQUEST BLOCK.                            0654
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH THE RESULTS  0654
*     OF THE FUNCTION WHICH WILL BE RETURNED TO THE CALLER.    @Y30LB24
*                                                                  0654
*     OUTPUT = FUNCTION RESULTS WHICH ARE RETURNED TO CALLER.  @Y30LB24
*                                                                  0654
******************************************************************** */
*/*VQMVVIUT: CHART                                                   */
*/*HEADER                                                          0654
*/*DECEMBER 8, 1975                              ICBVQM00 - SEGMENT
*/*VQMVVIUT - MSVC UTILITY PROCESSING                                */
*/*          E                    VQMVVIUT                           */
*/*          D (YES,,NO,%ENABLE)  MSVC DISABLED                      */
*/*          P  (,%END)           INDICATE MSVC DISABLED             */
*/*%ENABLE:  P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMVVIUT: END                                                     */
*                                                                  0654
*VQMVVIUT:                                                         0654
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0654
VQMVVIUT DS    0H                                                  0655
*   IF VVIFLG0=ON THEN              /* TOTAL DISABLE         @Y30LB24*/
         TM    VVIFLG0(VVIPTR),B'10000000'                         0655
         BNO   @RF00655                                            0655
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=IDISABL;               /* REASON CODE (213)     @YM34322*/
         LA    REG0,531                                            0657
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0658
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00008 DS    0H                                                  0659
@EF00008 DS    0H                                                  0659
@ER00008 BR    @14                                                 0659
*     END;                          /*                       @Y30LB24*/
*   IF VVIFLG2=ON THEN              /* JOURNAL DISABLE       @Y30LB24*/
@RF00655 TM    VVIFLG2(VVIPTR),B'00100000'                         0661
         BNO   @RF00661                                            0661
*     DO;                           /* YES                   @Y30LB24*/
*       REG0=JDISABL;               /* REASON CODE (214)     @YM34322*/
         LA    REG0,532                                            0663
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0664
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00008                                            0665
*     END;                          /*                       @Y30LB24*/
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
@RF00661 LR    REG8,REG14                                          0667
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0668
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0669
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0670
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0671
         BZ    @RF00671                                            0671
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0673
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00008                                            0674
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=OFF;                   /* INDICATE FIRST ENTRY  @Y30LB24*/
@RF00671 DS    0H                                                  0677
*   RPLVPOST=ON;                    /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0677
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0677
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0678
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0679
         BCTR  @11,0                                               0679
         EX    @11,@SM01699                                        0679
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0680
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0681
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0682
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00008                                            0683
*   END VQMVVIUT;                   /* END MSVC UTILITY      @Y30LB24*/
*                                                                  0685
*/* ******************************************************************
*                                                                  0685
*     NAME = VQMMSSCM,  MSS COMMUNICATIONS PROCESSING          @Y30LB24
*                                                                  0685
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0685
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0685
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0685
*     PURGE, SUSPEND, ASSOCIATE, AND DISASSOCIATE REQUESTS.        0685
*     IF GOOD COMPLETION IS RECEIVED FROM THE MSC I/O THEN NO      0685
*     PROCESSING IS DONE AND A GOOD RETURN IS MADE TO THE MSSC-SVC.
*     IF FIRST ENTRY FOR REQUEST OR A BAD RETURN CODE IS RETURNED  0685
*     FROM THE MSC I/O THEN THROUGH A SUBROUTINE A GETMAIN         0685
*     IS DONE FOR STORAGE FOR THE MSVC RPLV,  THE MSVC RPLV        0685
*     IS ZEROED AND INITIALIZED WITH THE PROPER FLAGS AND ENTRIES. 0685
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0685
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0685
*     HIGH PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED
*     IN ORDER TO HAVE THE MSVC STATUS UPDATED.                    0685
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE.              @Y30LB24
*                                                                  0685
*     OUTPUT = MSSC-SVC REQUEST ENTRY ADDED TO RPLV CHAIN.     @Y30LB24
*                                                                  0685
******************************************************************** */
*/*VQMMSSCM: CHART                                                   */
*/*HEADER                                                          0685
*/*DECEMBER 8, 1975                              ICBVQM00 - SEGMENT
*/*VQMMSSCM - MSS COMMUNICATIONS                                     */
*/*          E                    VQMMSSCM                           */
*/*          P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMMSSCM: END                                                     */
*                                                                  0685
*VQMMSSCM:                                                         0685
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0685
VQMMSSCM DS    0H                                                  0686
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
         LR    REG8,REG14                                          0686
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0687
*   IF OPCODE=SUSPEND               /* REQUEST FOR SUSPEND?  @G24LB04*/
*     THEN                                                         0688
         CLI   OPCODE(PARMPTR),X'22'                               0688
         BNE   @RF00688                                            0688
*     DO;                           /* SUSPEND REQUEST PROCESSING  0689
*                                                            @G24LB04*/
*       IF PARM0=RZERO              /* 2ND ENTRY, GOOD MSC RETURN ?
*                                                            @G24LB04*/
*         THEN                                                     0690
         C     PARM0,RZERO                                         0690
         BNE   @RF00690                                            0690
*         DO;                       /* YES, SEND BACK GOOD RETURN  0691
*                                                            @G24LB04*/
*           REG0=SUCCES;            /* REASON CODE (000)     @G24LB04*/
         SLR   REG0,REG0                                           0692
*           FAILCODE=ZERO;          /* SET RETURN CODE       @G24LB04*/
         SLR   FAILCODE,FAILCODE                                   0693
*           RETURN;                 /* RETURN TO VQM MAINLINE      0694
*                                                            @G24LB04*/
@EL00009 DS    0H                                                  0694
@EF00009 DS    0H                                                  0694
@ER00009 BR    @14                                                 0694
*         END;                      /*                       @G24LB04*/
*                                                                  0695
*       /*************************************************************/
*       /*                                                           */
*       /* HAVE SUSPEND FIRST ENTRY, OR SECOND WITH FAILURE.@G24LB04 */
*       /* NOW TURN INTO DISABLE OR ENABLE, RESPECTIVELY     @G24LB04*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0696
*       REG2=REG2+INILEN;           /* ENABLE/DISABLE LENGTH @G24LB04*/
@RF00690 AH    REG2,INILEN                                         0696
*       CALL VQMGSTOR;              /* OBTAIN STORAGE        @G24LB04*/
         BAL   @14,VQMGSTOR                                        0697
*       IF FAILCODE^=ZERO THEN                                     0698
         LTR   FAILCODE,FAILCODE                                   0698
         BZ    @RF00698                                            0698
*         DO;                       /* NO STORAGE ?          @G24LB04*/
*           REG14=REG8;             /* RESTORE RETURN ADDRESS      0700
*                                                            @G24LB04*/
         LR    REG14,REG8                                          0700
*           RETURN;                 /* BACK TO VQM MAINLINE  @G24LB04*/
         B     @EL00009                                            0701
*         END;                      /*                       @G24LB04*/
*       RPLFTIME=ON;                /* FIRST TIME FOR REQUEST      0703
*                                                            @G24LB04*/
@RF00698 DS    0H                                                  0704
*       RPLVPOST=ON;                /* INDICATE POST VQM BACK      0704
*                                                            @G24LB04*/
         OI    RPLFTIME(RPLVPTR),B'11000000'                       0704
*       RFY                                                        0705
*         INITVVI BASED(ADDR(RPLVUTIL));/* REQUEST BLOCK     @G24LB04*/
*                                                                  0705
*       /*************************************************************/
*       /*                                                           */
*       /* FILL IN REQUEST                                   @G24LB04*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0706
*       INITVVI=INITVVI&&INITVVI;   /* CLEAR REQUEST AREA    @G24LB04*/
         LA    @11,132                                             0706
         ALR   @11,RPLVPTR                                         0706
         XC    INITVVI(20,@11),INITVVI(@11)                        0706
*       INILNGTH=INILEN;            /* LENGTH OF ENABLE/DISABLE    0707
*                                                            @G24LB04*/
         LH    @07,INILEN                                          0707
         ST    @07,INILNGTH(,@11)                                  0707
*       INITOPCD=INICODE;           /* ENABLE, DISABLE SAME OP     0708
*                                                            @G24LB04*/
         MVI   INITOPCD(@11),X'88'                                 0708
*       IF PARM0=ZERO               /* 1ST ENTRY FOR SUSPEND?      0709
*                                                            @G24LB04*/
*         THEN                                                     0709
         LTR   PARM0,PARM0                                         0709
         BNZ   @RF00709                                            0709
*         DO;                       /* YES, MAKE DISABLE REQ @G24LB04*/
*           INIDISAB=ON;            /* SPECIFY DISABLE       @G24LB04*/
         OI    INIDISAB(@11),B'00100000'                           0711
*           INIJRNL=ON;             /* DISABLE JOURNAL PROCESS.    0712
*                                                            @G24LB04*/
*           INIABLE=ON;             /* DISABLE REST OF MSVC  @G24LB04*/
         OI    INIJRNL(@11),B'01100000'                            0713
*         END;                      /*                       @G24LB04*/
*       ELSE                                                       0715
*         DO;                       /*                       @G24LB04*/
         B     @RC00709                                            0715
@RF00709 DS    0H                                                  0716
*           INIENABL=ON;            /* SUSPEND FAIL INTO ENABLE    0716
*                                                            @G24LB04*/
         LA    @11,132                                             0716
         ALR   @11,RPLVPTR                                         0716
         OI    INIENABL(@11),B'01000000'                           0716
*           INIUCAT=VVIUCAT;        /* CATLG NAME FROM CONTROL BLK 0717
*                                                            @G24LB04*/
         MVC   INIUCAT(8,@11),VVIUCAT(VVIPTR)                      0717
*         END;                      /*                       @G24LB04*/
*       CALL VQMADDRB;              /* GET IT CHAINED, WAITING     0719
*                                                            @G24LB04*/
@RC00709 BAL   @14,VQMADDRB                                        0719
*       CALL VQMFSTOR;              /* FREE THE STORAGE      @G24LB04*/
         BAL   @14,VQMFSTOR                                        0720
*     END;                          /* PROCESSING FOR SUSPEND      0721
*                                                            @G24LB04*/
*   ELSE                                                           0722
*     DO;                           /* NOT A SUSPEND REQUEST @G24LB04*/
         B     @RC00688                                            0722
@RF00688 DS    0H                                                  0723
*       REG2=REG2+PLENGTH;          /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0723
*       CALL VQMGSTOR;              /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0724
*       IF FAILCODE^=ZERO THEN      /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0725
         BZ    @RF00725                                            0725
*         DO;                       /* NO                    @Y30LB24*/
*           REG14=REG8;             /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0727
*           RETURN;                 /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00009                                            0728
*         END;                      /*                       @Y30LB24*/
*       RPLFTIME=ON;                /* DEFAULT SECOND ENTRY  @Y30LB24*/
@RF00725 OI    RPLFTIME(RPLVPTR),B'10000000'                       0730
*       IF PARM0=ZERO THEN          /* FIRST ENTRY?          @Y30LB24*/
         LTR   PARM0,PARM0                                         0731
         BNZ   @RF00731                                            0731
*         RPLFTIME=OFF;             /* INDICATE FIRST ENTRY  @Y30LB24*/
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0732
*       RPLRCODE=PARM0;             /* SET REASON CODE       @Y30LB24*/
@RF00731 STH   PARM0,RPLRCODE(,RPLVPTR)                            0733
*       RPLVRETC=PARM0;             /* SET RETURN CODE       @Y30LB24*/
         STH   PARM0,RPLVRETC(,RPLVPTR)                            0734
*       REG1=PLENGTH;               /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0735
*       RPLVUTIL(1:REG1)=PARMLIST;  /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0736
         BCTR  @11,0                                               0736
         EX    @11,@SM01699                                        0736
*       CALL VQMADDRB;              /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0737
*     END;                          /*                       @G24LB04*/
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
@RC00688 LR    REG14,REG8                                          0739
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00009                                            0740
*   END VQMMSSCM;                   /* END MSS COMMUNICATIONS      0741
*                                                            @Y30LB24*/
*                                                                  0742
*/* ******************************************************************
*                                                                  0742
*     NAME = VQMVABLE,  ENABLE/DISABLE MSVC DATA SETS.         @Y30LB24
*                                                                  0742
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0742
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0742
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0742
*     ENABLING OR DISABLING THE MSVC INVENTORY OR JOURNAL DATA SETS.
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE   0742
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0742
*     THE PROPER FLAGS AND ENTRIES.                                0742
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0742
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0742
*     HIGH PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED
*     IN ORDER TO HAVE THE MSVC STATUS UPDATED.                    0742
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0742
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0742
*     CALLED TO FREE THE REQUEST BLOCK.                            0742
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH THE RESULTS  0742
*     OF THE FUNCTION WHICH WILL BE RETURNED TO THE CALLER.    @Y30LB24
*                                                                  0742
*     OUTPUT = FUNCTION RESULTS WHICH ARE RETURNED TO CALLER.  @Y30LB24
*                                                                  0742
******************************************************************** */
*/*VQMVABLE: CHART                                                   */
*/*HEADER                                                          0742
*/*DECEMBER 8, 1975                              ICBVQM00 - SEGMENT
*/*VQMVABLE - ENABLE/DISABLE PROCESSING                              */
*/*          E                    VQMVABLE                           */
*/*          P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVQM00 MAINLINE        */
*/*VQMVABLE: END                                                     */
*                                                                  0742
*VQMVABLE:                                                         0742
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0742
VQMVABLE DS    0H                                                  0743
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
         LR    REG8,REG14                                          0743
*   REG2=LENGTH(RPLV);              /* SET RPLV LENGTH       @Y30LB24*/
         LA    REG2,132                                            0744
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @Y30LB24*/
         AL    REG2,PLENGTH(,PARMPTR)                              0745
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0746
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0747
         BZ    @RF00747                                            0747
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0749
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00010 DS    0H                                                  0750
@EF00010 DS    0H                                                  0750
@ER00010 BR    @14                                                 0750
*     END;                          /*                       @Y30LB24*/
*   RPLFTIME=OFF;                   /* INDICATE FIRST ENTRY  @Y30LB24*/
@RF00747 DS    0H                                                  0753
*   RPLVPOST=ON;                    /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0753
         NI    RPLFTIME(RPLVPTR),B'01111111'                       0753
*   REG1=PLENGTH;                   /* SET PARM LENGTH       @Y30LB24*/
         L     REG1,PLENGTH(,PARMPTR)                              0754
*   RPLVUTIL(1:REG1)=PARMLIST;      /* COPY PARMS            @Y30LB24*/
         LR    @11,REG1                                            0755
         BCTR  @11,0                                               0755
         EX    @11,@SM01699                                        0755
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0756
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0757
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0758
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00010                                            0759
*   END VQMVABLE;                   /* END ENABLE/DISABLE    @Y30LB24*/
*                                                                  0761
*/* ******************************************************************
*                                                                  0761
*     NAME = VQMRECVY,  RECOVERY FROM BACK LEVEL INVENTORY.    @Y30LB24
*                                                                  0761
*     INPUT = POINTER TO THE MSSC-SVC REQUEST, AND A POINTER TO    0761
*     THE MSVC CONTROL BLOCK (ICBVVICB).                       @Y30LB24
*                                                                  0761
*     PROCESS = THIS SUBROUTINE IS CALLED FOR PROCESSING OF        0761
*     DATA SET RECOVERY REQUESTS.  THE MSVC INVENTORY IS UPDATED   0761
*     FROM JOURNALLED REQUEST LISTS AND A DOWN LEVEL MSVC INVENTORY.
*     THROUGH A SUBROUTINE A GETMAIN IS DONE FOR STORAGE FOR THE   0761
*     MSVC RPLV,  THE MSVC RPLV IS ZEROED AND INITIALIZED WITH     0761
*     THE PROPER FLAGS AND ENTRIES.                                0761
*     THE RPLV IS THEN FILLED IN WITH REQUEST DEPENDENT DATA AND   0761
*     THEN THROUGH ANOTHER SUBROUTINE THE RPLV IS CHAINED TO THE   0761
*     LOW PRIORITY QUEUE IN THE ICBVVICB AND THE SUBTASK IS POSTED 0761
*     IN ORDER TO HAVE THE MSVC INVENTORY UPDATED.                 0761
*     A WAIT IS THEN DONE FOR SUBTASK TO COMPLETE THE FUNCTION.    0761
*     WHEN CONTROL IS RETURNED AFTER THE WAIT, A SUBROUTINE IS     0761
*     CALLED TO FREE THE REQUEST BLOCK.                            0761
*     A RETURN IS THEN MADE TO ICBVQM00 MAINLINE WITH THE RESULTS  0761
*     OF THE FUNCTION WHICH WILL BE RETURNED TO THE CALLER.    @Y30LB24
*                                                                  0761
*     OUTPUT = FUNCTION RESULTS WHICH ARE RETURNED TO CALLER.  @Y30LB24
*                                                                  0761
******************************************************************** */
*/*VQMRECVY: CHART                                                   */
*/*HEADER                                                          0761
*/*DECEMBER 8, 1975                             ICBVQM00 - SEGMENT 0761
*/*VQMRECVY - DATA RECOVERY PROCESSING                               */
*/*          E                    VQMRECVY                           */
*/*%ENABLE:  P                    SET GETMAIN LENGTH                 */
*/*          S                    VQMGSTOR: GETMAIN FOR RPLV         */
*/*          D (NO,,YES,%END)     ERROR FROM GETMAIN                 */
*/*          P                    BUILD REQUEST BLOCK                */
*/*          S                    VQMADDRB: CHAIN RPLV               */
*/*          P                    SET FREEMAIN LENGTH                */
*/*          S                    VQMFSTOR: FREEMAIN RPLV            */
*/*%END:     R                    RETURN TO ICBVPI00 MAINLINE        */
*/*VQMRECVY: END                                                     */
*                                                                  0761
*VQMRECVY:                                                         0761
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0761
VQMRECVY DS    0H                                                  0762
*   REG8=REG14;                     /* SAVE LINKREG          @Y30LB24*/
         LR    REG8,REG14                                          0762
*   REG2=PARMPTR->RPLVTLEN;         /* SET GETMAIN LENGTH    @Y30LB24*/
         LH    REG2,RPLVTLEN(,PARMPTR)                             0763
*   CALL VQMGSTOR;                  /* CALL GETMAIN RTN      @Y30LB24*/
         BAL   @14,VQMGSTOR                                        0764
*   IF FAILCODE^=ZERO THEN          /* CORE AVAILABLE?       @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0765
         BZ    @RF00765                                            0765
*     DO;                           /* NO                    @Y30LB24*/
*       REG14=REG8;                 /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0767
*       RETURN;                     /* RETURN TO ICBVQM00    @Y30LB24*/
@EL00011 DS    0H                                                  0768
@EF00011 DS    0H                                                  0768
@ER00011 BR    @14                                                 0768
*     END;                          /*                       @Y30LB24*/
*   REG0=RPLVPTR;                   /* SET RPLV PTR          @Y30LB24*/
@RF00765 LR    REG0,RPLVPTR                                        0770
*   REG1=RPLVTLEN;                  /* SET PARM LENGTH       @Y30LB24*/
         LH    REG1,RPLVTLEN(,RPLVPTR)                             0771
*   REG2=PARMPTR;                   /* SET PARM PTR          @Y30LB24*/
         LR    REG2,PARMPTR                                        0772
*   REG3=REG1;                      /* SET MOVE LENGTH       @Y30LB24*/
         LR    REG3,REG1                                           0773
*   GEN(MVCL REG0,REG2);            /* MOVE PARMS            @Y30LB24*/
         MVCL REG0,REG2
*   RPLVQPTR=ZERO;                  /* ZERO CHAIN PTR        @Y30LB24*/
         SLR   @11,@11                                             0775
         ST    @11,RPLVQPTR(,RPLVPTR)                              0775
*   RPLVECB=ZERO;                   /* ZERO ECB              @Y30LB24*/
         ST    @11,RPLVECB(,RPLVPTR)                               0776
*   RPLASCBP=ASCBSAVE;              /* SET ASCB PTR          @ZA27588*/
         L     @11,CVTPTR                                          0777
         L     @11,CVTTCBP(,@11)                                   0777
         L     @11,ASCBSAVE(,@11)                                  0777
         ST    @11,RPLASCBP(,RPLVPTR)                              0777
*   RPLVPOST=ON;                    /* INDICATE ECB POST     @Y30LB24*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0778
*   RPLVSAM=''B;                    /* ZERO VSAM RPL         @Y30LB24*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0779
*   CALL VQMADDRB;                  /* CALL QUEUING RTN      @Y30LB24*/
         BAL   @14,VQMADDRB                                        0780
*   CALL VQMFSTOR;                  /* CALL FREEMAIN RTN     @Y30LB24*/
         BAL   @14,VQMFSTOR                                        0781
*   REG14=REG8;                     /* RESTORE LINKREG       @Y30LB24*/
         LR    REG14,REG8                                          0782
*   RETURN;                         /* RETURN TO ICBVQM00    @Y30LB24*/
         B     @EL00011                                            0783
*   END VQMRECVY;                   /* END INVENTORY RECOVERY      0784
*                                                            @Y30LB24*/
*                                                                  0785
*/* ******************************************************************
*                                                                  0785
*     NAME = VQMGSTOR,    ACQUIRE STORAGE AS DIRECTED.         @G18MB04
*                                                                  0785
*     INPUT = REGISTER TWO WITH THE LENGTH OF STORAGE NEEDED.  @Y30LB24
*                                                                  0785
*     PROCESS = THIS SUBROUTINE IS CALLED WHEN MAIN STORAGE IS @G18MB04
*     REQUIRED.  AN RPLV IS ALWAYS OBTAINED, AND IF THE LENGTH @G18MB04
*     OF THE STORAGE IS GREATER THAN THAT OF THE RPLV, THIS    @G18MB04
*     PROGRAM MERELY OBTAINS THE EXTRA STORAGE CONTIGUOUS TO   @G18MB04
*     THE RPLV.                                                @G18MB04
*     THE REQUEST BLOCK IS INITIALIZED WITH ZEROES AND         @G18MB04
*     ADDRESSABILITY IS SET.                                   @G18MB04
*     THE LENGTH OF THE ENTIRE STORAGE OBTAINED IS PLACED IN   @G18MB04
*     THE FIELD RPLVTLEN SO THE FREEMAIN SETUP WILL HAVE IT.   @G18MB04
*     (THE STORAGE OBTAINED IS NOT ALWAYS FREED IN ICBVQM00,   @G18MB04
*     SOMETIMES IN OTHER MSVC MODULES.)                        @G18MB04
*                                                                  0785
*                                                                  0785
*     OUTPUT = STORAGE FOR REQUEST BLOCK WITH INITIALIZED FIELDS.  0785
*          ADDITIONAL STORAGE CONTIGUOUS TO THE REQUEST BLOCK  @G18MB04
*                                                              @Y30LB24
*                                                                  0785
******************************************************************** */
*/*VQMGSTOR: CHART                                                   */
*/*HEADER                                                          0785
*/*DECEMBER 8, 1975                              ICBVQM00 - SEGMENT
*/*VQMGSTOR - ACQUIRE STORAGE                                        */
*/*          E                    VQMGSTOR                           */
*/*          D (NO,,YES,%CON)     CONTROL BLOCKS GOOD?               */
*/*          P (,%END)            SET ERROR CODES                    */
*/*%CON:     P                    SET GETMAIN REG                    */
*/*          L                    GETMAIN FOR STORAGE SPECIFIED      */
*/*          D (NO,,YES,%ERR)     ERROR FROM GETMAIN                 */
*/*          P                    SET RPLV ADDRESSABILITY            */
*/*          P                    CLEAR RPLV ONLY                    */
*/*          P (,%END)            INIT COMMON FIELDS                 */
*/*%ERR:     P                    WRITE CONSOLE ERROR MSG            */
*/*          P                    SET ERROR CODES                    */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VQMGSTOR: END                                                     */
*                                                                  0785
*VQMGSTOR:                                                         0785
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0785
VQMGSTOR DS    0H                                                  0786
*   REG15=ZERO;                     /* ZERO WORK REG         @Y30LB24*/
         SLR   REG15,REG15                                         0786
*   IF CVTPTR=REG15×                /* IS THERE A CVT        @Y30LB24*/
*       CVTEXT2=REG15×              /* IS THERE A CVT EXT    @Y30LB24*/
*       CVTICB=REG15×               /* IS THERE A MSSC CB    @Y30LB24*/
*       ICBVVICB=REG15 THEN         /* IS THERE A MSVC CB    @Y30LB24*/
         L     @11,CVTPTR                                          0787
         CR    @11,REG15                                           0787
         BE    @RT00787                                            0787
         L     @11,CVTEXT2(,@11)                                   0787
         CR    @11,REG15                                           0787
         BE    @RT00787                                            0787
         L     @11,CVTICB(,@11)                                    0787
         CR    @11,REG15                                           0787
         BE    @RT00787                                            0787
         C     REG15,ICBVVICB(,@11)                                0787
         BNE   @RF00787                                            0787
@RT00787 DS    0H                                                  0788
*     DO;                           /* NO                    @Y30LB24*/
*       REG0=INVALCBP;              /* REASON CODE (23B)     @YM34322*/
         LA    REG0,571                                            0789
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0790
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
@EL00012 DS    0H                                                  0791
@EF00012 DS    0H                                                  0791
@ER00012 BR    @14                                                 0791
*     END;                          /*                       @Y30LB24*/
*   REG0=REG2;                      /* SET GETMAIN REG0      @Y30LB24*/
@RF00787 LR    REG0,REG2                                           0793
*LGET1:                                                            0794
*   GEN(GETMAIN RC,LV=(0),SP=241);  /* PERFORM GETMAIN 241   @Y30LB24*/
LGET1    GETMAIN RC,LV=(0),SP=241
*   IF REG15^=ZERO THEN             /* CORE AVAILABLE?       @Y30LB24*/
         LTR   REG15,REG15                                         0795
         BZ    @RF00795                                            0795
*     DO;                           /* NO                    @Y30LB24*/
*       REG1=ADDR(MSG1);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG1                                           0797
*LWTO1:                                                            0798
*       GEN(WTO MF=(E,(REG1)));     /* SEND ERROR MSG1       @Y30LB24*/
LWTO1    WTO MF=(E,(REG1))
*       REG0=GMFAIL;                /* REASON CODE (22A)     @YM34322*/
         LA    REG0,554                                            0799
*       FAILCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         LA    FAILCODE,4                                          0800
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00012                                            0801
*     END;                          /*                       @Y30LB24*/
*   RPLVPTR=REG1;                   /* BASE RPLV             @Y30LB24*/
@RF00795 LR    RPLVPTR,REG1                                        0803
*   RPLV=RPLV&&RPLV;                /* ZERO RPLV             @Y30LB24*/
         XC    RPLV(132,RPLVPTR),RPLV(RPLVPTR)                     0804
*   RPLVTLEN=REG2;                  /* SET RPL LENGTH        @Y30LB24*/
         STH   REG2,RPLVTLEN(,RPLVPTR)                             0805
*   RPLASCBP=ASCBSAVE;              /* SET ASCB PTR          @G18MB04*/
         L     @11,CVTPTR                                          0806
         L     @11,CVTTCBP(,@11)                                   0806
         L     @11,ASCBSAVE(,@11)                                  0806
         ST    @11,RPLASCBP(,RPLVPTR)                              0806
*   REG0=SUCCES;                    /* REASON CODE (000)     @YM34322*/
         SLR   REG0,REG0                                           0807
*   FAILCODE=ZERO;                  /* SET RETURN CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0808
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00012                                            0809
*   END VQMGSTOR;                   /* END GETMAIN REQUEST   @Y30LB24*/
*                                                                  0811
*/* ******************************************************************
*                                                                  0811
*     NAME = VQMADDRB,  ADD REQUEST BLOCK TO QUEUES.           @Y30LB24
*                                                                  0811
*     INPUT = POINTER TO THE RPLV REQUEST BLOCK AND TO THE MSSC-SVC
*     REQUEST LIST.                                            @Y30LB24
*                                                                  0811
*     PROCESS = THIS SUBROUTINE IS CALLED WHEN A REQUEST IS TO     0811
*     BE ADDED TO THE QUEUES SO THAT FUNCTION PROCESSING CAN BE    0811
*     COMPLETED BY THE MSVC SUBTASK.                           @Y30LB24
*                                                                  0811
*     OUTPUT = REQUEST BLOCK ADDED TO QUEUE.                   @Y30LB24
*                                                                  0811
******************************************************************** */
*/*VQMADDRB: CHART                                                   */
*/*HEADER                                                          0811
*/*JUNE 14, 1974                                ICBVQM00 - SEGMENT 0811
*/*VQMADDRB - ADD REQUEST BLOCK TO QUEUE                             */
*/*          E                    VQMADDRB                           */
*/*          P                    SET CURRENT DATE                   */
*/*%CSFAIL:  D (YES,,NO,%SETLOW)  HIGH PRIORITY ITEM                 */
*/*          P  (,%ADD)           SET HIGH PRIORITY PTRS             */
*/*%SETLOW:  P                    SET LOW PRIORITY PTRS              */
*/*%ADD:     P                    SET FORWARD CHAIN PTR              */
*/*          P                    CHAIN REQUEST TO QUEUE             */
*/*          P                    ADD REQUEST TO QUEUE               */
*/*%CS:      D (NO,,YES,%CSFAIL)  DID CS ADD FAIL                    */
*/*%POST:    P                    POST SUBTASK ECB                   */
*/*          D (YES,,NO,%END)     FUNCTION WAIT REQ?                 */
*/*          P                    WAIT FOR FUNCTION TO COMPLETE      */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VQMADDRB: END                                                     */
*                                                                  0811
*VQMADDRB:                                                         0811
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0811
VQMADDRB DS    0H                                                  0812
*   REG3=ONE;                       /* SET DEFAULT PARM      @Y30LB24*/
         LA    REG3,1                                              0812
*   IF RPLVPOST=ON THEN             /* POST RPL?             @Y30LB24*/
         TM    RPLVPOST(RPLVPTR),B'01000000'                       0813
         BNO   @RF00813                                            0813
*     REG3=ZERO;                    /* SET POST PARM         @Y30LB24*/
         SLR   REG3,REG3                                           0814
*   RPLVPROG=OFF;                   /* SET RPLV FLAG OFF     @Y30LB24*/
@RF00813 DS    0H                                                  0816
*   RPLVCOMP=OFF;                   /* SET RPLV FLAG OFF     @Y30LB24*/
*   RPLVVIN=OFF;                    /* SET RPLV FLAG OFF     @Y30LB24*/
*   RPLVVOP=OFF;                    /* SET RPLV FLAG OFF     @Y30LB24*/
*   RPLVJRNL=OFF;                   /* SET RPLV FLAG OFF     @Y30LB24*/
         NI    RPLVPROG(RPLVPTR),B'11000010'                       0819
*   RPLVECB=ZERO;                   /* ZERO ECB FOR WAIT     @Y30LB24*/
         SLR   @11,@11                                             0820
         ST    @11,RPLVECB(,RPLVPTR)                               0820
*ADDRB:                                                            0821
*   IF OPCODE=DEMOUNT×              /* IS THIS DEMOUNT       @ZA13484*/
*       OPCODE=MOUNT×               /* MOUNT                 @ZA13484*/
*       OPCODE=ENABLDIS THEN        /* ENABLE/DISABLE        @ZA13484*/
ADDRB    CLI   OPCODE(PARMPTR),X'06'                               0821
         BE    @RT00821                                            0821
         CLI   OPCODE(PARMPTR),X'08'                               0821
         BE    @RT00821                                            0821
         CLI   OPCODE(PARMPTR),X'88'                               0821
         BNE   @RF00821                                            0821
@RT00821 DS    0H                                                  0822
*     DO;                           /* HIGH PRIORITY ITEM    @Y30LB24*/
*       REG2=ADDR(VVIQRPL1);        /* POINT TO QUEUE HEAD   @Y30LB24*/
         LA    REG2,VVIQRPL1(,VVIPTR)                              0823
*       REG1=VVIQRPL1;              /* POINT TO FIRST RPL    @Y30LB24*/
         L     REG1,VVIQRPL1(,VVIPTR)                              0824
*     END;                          /*                       @Y30LB24*/
*   ELSE                            /* OTHERWISE             @Y30LB24*/
*     DO;                           /* LOW PRIORITY ITEM     @Y30LB24*/
         B     @RC00821                                            0826
@RF00821 DS    0H                                                  0827
*       REG2=ADDR(VVIQRPL2);        /* POINT TO QUEUE HEAD   @Y30LB24*/
         LA    REG2,VVIQRPL2(,VVIPTR)                              0827
*       REG1=VVIQRPL2;              /* POINT TO FIRST RPL    @Y30LB24*/
         L     REG1,VVIQRPL2(,VVIPTR)                              0828
*     END;                          /*                       @Y30LB24*/
*   RPLVQPTR=REG1;                  /* SET FORWARD CHAIN PTR @Y30LB24*/
@RC00821 ST    REG1,RPLVQPTR(,RPLVPTR)                             0830
*   GEN(CS  REG1,RPLVPTR,M0(REG2)); /* COMPARE & SWAP        @Y30LB24*/
         CS  REG1,RPLVPTR,M0(REG2)
*   BC(FOUR,ADDRB);                 /* IF FAIL, BRANCH       @Y30LB24*/
         BC    4,ADDRB                                             0832
*   VVIRES4=ADDR(VVIECB1);          /* SET PARM LIST ECB     @Y30LB24*/
         LA    @11,VVIECB1(,VVIPTR)                                0833
         ST    @11,VVIRES4(,VVIPTR)                                0833
*   VVIRES5=ASVTENTY(ONE);          /* SET PARM LIST ASCB    @Y30LB24*/
         L     @11,CVTPTR                                          0834
         L     @07,ASVTPTR(,@11)                                   0834
         MVC   VVIRES5(4,VVIPTR),ASVTENTY(@07)                     0834
*   VVIRES6=ADDR(CVTBRET);          /* SET PARM LIST ERRADDR @ZA28148*/
         LA    @11,CVTBRET(,@11)                                   0835
         ST    @11,VVIRES6(,VVIPTR)                                0835
*   REG1=ADDR(VVIRES4);             /* SET PARM REG          @Y30LB24*/
         LA    REG1,VVIRES4(,VVIPTR)                               0836
*   GEN(ICM REG1,M8,EID);           /* INDICATE PARM LIST    @Y30LB24*/
         ICM REG1,M8,EID
*   REG0=ZERO;                      /* SET POST CODE         @Y30LB24*/
         SLR   REG0,REG0                                           0838
*   IF VVIECB1^=PZERO THEN          /* POST REQUIRED?        @Y30LB24*/
         CLC   VVIECB1(4,VVIPTR),PZERO                             0839
         BE    @RF00839                                            0839
*     DO;                           /* YES                   @Y30LB24*/
*LPOST1:                                                           0841
*       GEN(SVC   POST);            /* POST SUBTASK          @Y30LB24*/
LPOST1   SVC   POST
*     END;                          /*                       @Y30LB24*/
*   IF REG3=ZERO THEN               /* POST RPL?             @Y30LB24*/
@RF00839 LTR   REG3,REG3                                           0843
         BNZ   @RF00843                                            0843
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(RPLVECB);         /* SET PARM REG          @Y30LB24*/
         LA    REG1,RPLVECB(,RPLVPTR)                              0845
*LWAIT1:                                                           0846
*       GEN(WAIT  1,ECB=(REG1));    /* WAIT FOR COMPLETION   @Y30LB24*/
LWAIT1   WAIT  1,ECB=(REG1)
*     END;                          /*                       @Y30LB24*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00013 DS    0H                                                  0848
@EF00013 DS    0H                                                  0848
@ER00013 BR    @14                                                 0848
*   END VQMADDRB;                   /* END ADD TO QUEUE      @Y30LB24*/
         B     @EL00013                                            0849
*                                                                  0850
*/* ******************************************************************
*                                                                  0850
*     NAME = VQMFSTOR,  RELEASE STORAGE                        @G18MB04
*                                                                  0850
*     INPUT = POINTER TO THE STORAGE TO BE FREED               @G18MB04
*        LENGTH OF THE STORAGE TO BE FREED                     @G18MB04
*        NOTE THAT THE STORAGE MUST BEGIN WITH AN RPLV REQUEST @G18MB04
*        BLOCK                                                 @G18MB04
*                                                                  0850
*     PROCESS = THIS SUBROUTINE IS CALLED WHEN MAIN STORAGE IS TO  0850
*     BE RELEASED FOR THE RPLV REQUEST BLOCK AND POSSIBLY SOME @G18MB04
*     ADDITIONAL CONTIGUOUS STORAGE                            @G18MB04
*                                                                  0850
*     OUTPUT = FREED STORAGE ACQUIRED FOR REQUEST BLOCK AND        0850
*     CONTIGUOUS STORAGE FOR COMMUNICATION WITH JES3.          @G18MB04
*     REASON AND RETURN CODES FROM FUNCTION REQUEST.           @Y30LB24
*                                                                  0850
******************************************************************** */
*/*VQMFSTOR: CHART                                                   */
*/*HEADER                                                          0850
*/*DECEMBER 8, 1975                             ICBVQM00 - SEGMENT 0850
*/*VQMFSTOR - RELEASE STORAGE                                        */
*/*          E                    VQMFSTOR                           */
*/*          P                    SAVE R/R CODES                     */
*/*          D (YES,,NO,%CON)     UTILITY FLAG SET                   */
*/*          P                    SET REASON CODE FLAG               */
*/*%CON:     P                    SET FREEMAIN LENGTH                */
*/*          P                    SET FREEMAIN SUBPOOL               */
*/*          P                    SET FREEMAIN ADDRESS               */
*/*          L                    FREEMAIN FOR STORAGE               */
*/*          P                    RESTORE R/R CODES                  */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VQMFSTOR: END                                                     */
*                                                                  0850
*VQMFSTOR:                                                         0850
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0850
VQMFSTOR DS    0H                                                  0851
*   REG2=RPLRCODE;                  /* SAVE REASON CODE      @Y30LB24*/
         LH    REG2,RPLRCODE(,RPLVPTR)                             0851
         N     REG2,@CF01714                                       0851
*   REG3=RPLVRETC;                  /* SAVE RETURN CODE      @Y30LB24*/
         LH    REG3,RPLVRETC(,RPLVPTR)                             0852
         N     REG3,@CF01714                                       0852
*   IF RPLVJRNL=ON THEN             /* UTIL FLAG ON          @YD00160*/
         TM    RPLVJRNL(RPLVPTR),B'00000001'                       0853
         BNO   @RF00853                                            0853
*     DO;                           /* YES                   @YD00160*/
*       GEN(ICM REG2,M8,EID);       /* SET UTIL INDICATOR    @YD00160*/
         ICM REG2,M8,EID
*     END;                          /*                       @YD00160*/
*   REG0=RPLVTLEN;                  /* SET FREEMAIN LENGTH   @Y30LB24*/
@RF00853 LH    REG0,RPLVTLEN(,RPLVPTR)                             0857
*   GEN(ICM REG0,M8,POOL);          /* INDICATE SUBPOOL 241  @Y30LB24*/
         ICM REG0,M8,POOL
*   REG1=RPLVPTR;                   /* SET FREEMAIN ADDR     @Y30LB24*/
         LR    REG1,RPLVPTR                                        0859
*LFREM2:                                                           0860
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREEMAIN SUBPOOL 241  @Y30LB24*/
LFREM2   FREEMAIN R,LV=(0),A=(1)
*   REG0=REG2;                      /* SET REASON CODE       @Y30LB24*/
         LR    REG0,REG2                                           0861
*   FAILCODE=REG3;                  /* SET RETURN CODE       @Y30LB24*/
         LR    FAILCODE,REG3                                       0862
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00014 DS    0H                                                  0863
@EF00014 DS    0H                                                  0863
@ER00014 BR    @14                                                 0863
*   END VQMFSTOR;                   /* END FREEMAIN REQUEST  @Y30LB24*/
*                                                                  0865
*/* ******************************************************************
*                                                                  0865
*     NAME = VQMJESMT,  MSVC-JES3 MOUNT INTERFACE ROUTINE      @G18MB04
*      PROCESSES ENTRY TO MSVC FOR MOUNT NONSPECIFIC REQUEST   @G18MB04
*      WITH MSVGP CODED.  INCLUDES NECESSARY INTERFACE TO MAKE @G18MB04
*      MSS A JES3-MANAGED DEVICE.  THIS ROUTINE IS USED        @G18MB04
*      WHETHER OR NOT JES3 IS IN THE SYSTEM.                   @G18MB04
*                                                              @G18MB04
*     INPUT = POINTER TO AN MSSC SVC REQUEST                   @G18MB04
*             INDICATOR WHETHER FIRST OR SECOND ENTRY FOR THAT @G18MB04
*               REQUEST                                        @G18MB04
*             POINTER TO THE RPLV AND HENCE ADDRESSABILITY TO  @G18MB04
*             STORAGE PREVIOUSLY OBTAINED FOR JES3 INTERFACE   @G18MB04
*             REQUIREMENTS.  THIS CONTAINS, IN THIS ORDER --   @G18MB04
*              .RPLV AND OTHER NON-JES3 STORAGE FOR THE REQUEST@G18MB04
*              .STORAGE OBTAINED FOR JES3 INTERFACE            @G18MB04
*               THE STRUCTURE MNSWMSTG DESCRIBES JES3-STORAGE, @G18MB04
*               AND ITS LENGTH IS INCLUDED IN THE TOTAL RPLV   @G18MB04
*               LENGTH, RPLVTLEN, FOR GETMAIN AND FREEMAIN     @G18MB04
*               COMPATIBILITY                                  @G18MB04
*             POINTER TO IEFJSREQ VIA THE CVT AND JSECT        @G18MB04
*                                                              @G18MB04
*     PROCESS = VQMJESMT REPEATS THE FOLLOWING STEPS UNTIL     @G18MB04
*             A VOLUME IS CHOSEN (FOR FIRST ENTRY CASE), OR    @G18MB04
*             A SUCCESSFUL MOUNT IS ACHIEVED (FOR SECOND ENTRY @G18MB04
*             CASE), OR UNTIL AN ERROR WHICH PROHIBITS         @G18MB04
*             FURTHER PROCESSING IS ENCOUNTERED.               @G18MB04
*             0 FILL IN THE SSOB AND SSOB EXTENSION            @G18MB04
*               INFORMATION WHICH REMAINS THE SAME             @G18MB04
*             1 SEND THIS REQUEST TO MSVC TASK VIA THE         @G18MB04
*               SUBROUTINE VQMADDRB.  VQMADDRB WAITS FOR       @G18MB04
*               COMPLETION OF TASK PROCESSING FOR THIS         @G18MB04
*               REQUEST, AFTER WHICH ANY TRACES OF PRIOR       @G18MB04
*               SELECTION OF A VOLUME WHICH CANNOT BE USED     @G18MB04
*               HAVE BEEN REMOVED, AND ANOTHER VOLUME HAS      @G18MB04
*               BEEN SELECTED IF POSSIBLE                      @G18MB04
*             2 SEND THE NEXT VOLUME CANDIDATE CHOICE TO       @G18MB04
*               JES3 FOR APPROVAL VIA THE SUBSYSTEM INTERFACE  @G18MB04
*             3 CONVERSE WITH VQMADDRB AND JES3 (STEPS 1 & 2)  @G18MB04
*               UNTIL A MUTUALLY SATISFACTORY VOLUME CAN BE    @G18MB04
*               SELECTED, OR WE MUST GIVE UP AND FAIL THE      @G18MB04
*               REQUEST.  IF JES3 IS NOT IN SYSTEM WITH THIS   @G18MB04
*               FUNCTION, THE FIRST MSVC CHOICE IS USED.       @G18MB04
*             4 WHEN A VOLUME COULD BE CHOSEN, VQMJESMT        @G18MB04
*               RETURNS THAT VOLUME TO CALLER FOR FIRST ENTRY, @G18MB04
*               OR REISSUES THE MOUNT REQUEST THROUGH THE      @G18MB04
*               MSSC SVC, FOR SECOND ENTRY.                    @G18MB04
*               IF THIS MOUNT FAILS, VQMJESMT REPEATS STEPS    @G18MB04
*               BEGINNING WITH (1) ABOVE.                      @G18MB04
*               FOR SUCCESSFUL MOUNT, NEW CODES ARE SET FOR    @G18MB04
*               THE MOUNT REQUEST.                             @G18MB04
*             MOVE FINAL PARAMETERS INTO CALLERS PARAMETER LIST@G18MB04
*             FREE APPROPRIATE AMOUNT OF STORAGE VIA VQMFSTOR  @G18MB04
*                                                                  0865
*                                                                  0865
*     OUTPUT = MSSC SVC REQUEST ADDED TO RPLV CHAIN            @G18MB04
*              MOUNT ORDER TO MSC VIA MSSC SVC FOR SECOND ENTRY@G18MB04
*              CANDIDATE VOLSER IS PRESENTED TO JES3 FOR       @G18MB04
*              APPROVAL OR DISAPPROVAL                         @G18MB04
*                                                                  0865
******************************************************************** */
*/*VQMJESMT: CHART                                                   */
*/*HEADER                                                          0865
*/*JANUARY 20, 1976                             ICBVQM00 - SEGMENT 0865
*/*VQMJESMT - NONSPECIFIC MOUNT WITH MSVGP SPECIFIED                 */
*/*          E                    VQMJESMT                           */
*/*          P                    SAVE RETURN ADDRESS AND CLEAR OWN
*/*SWITCHES                                                          */
*/*          D (YES,%FRS,NO,%SEC) RPLV SHOW FIRST VQM ENTRY ?        */
*/*%FRS:     P                    SET OWN FIRST ENTRY SWITCHES       */
*/*          N                    INCLUDING NO MOUNT, FIRST VQM    0865
*/*ENTRY AND NO PRIOR CHOICE TO BACK OUT                             */
*/*%SEC:     P                    CLEAR SSOB AND EXTENSION, SET UP 0865
*/*BASIC INFORMATION                                                 */
*/*%NOVOL:   P                    SET NO VOLUME CHOSEN               */
*/*          P                    CLEAR FIELDS IN RPLV WHICH ARE REUSED
*/*                                                                  */
*/*          D (NO,%SEL,YES,%RTY) PRIOR CHOICE TO BACK OUT ?         */
*/*%RTY:     P                    SET RPLV FOR RETRY (CHOOSE NEW & BACK
*/* OUT PRIOR CHOICE OF VOLSER IN RPLV)                              */
*/*%SEL:     P                    SPECIFY WAIT FOR TASK COMPLETION OF
*/*THIS REQUEST                                                      */
*/*          S                    VQMADDRB: CHAIN RPLV FOR VOLUME  0865
*/*CHOICE & WAIT                                                     */
*/*          D (YES,%GOT,NO,%FATL)VOLUME CHOSEN ?                    */
*/*%FATL:    P (,%MNTQ)           SET FATAL ERROR ENCOUNTERED        */
*/*%GOT:     P                    PUT VOLUME SERIAL INTO CALLERS   0865
*/*ORIGINAL PARAMETER LIST                                           */
*/*          S                    IEFSSREQ: ASK JES3 IF VOLUME OK TO
*/*USE                                                               */
*/*          D (YES,%GTQ,NO,%ERS) DID JES3 GET THE QUESTION?         */
*/*%GTQ:     D (YES,%J3OK,NO,%QES)IS VOLUME OK BY JES3 ?             */
*/*%J3OK:    P (,%MNTQ)           SET VOLUME CHOSEN                  */
*/*%QES:     D (YES,%REJ,NO,%CODR)WAS VOLUME BUSY?                   */
*/*%REJ:     P                    COUNT REJECTION AND SET JES3     0865
*/*REJECTION REASON CODE                                             */
*/*           P                   PREPARE RPLV FOR REUSE. MSVC WILL BE
*/*TOLD TO BACK OUT THIS VOLUME CHOICE                               */
*/*           P (,%MNTQ)          SET PRIOR CHOICE TO BACK OUT DURING
*/*RETRY                                                             */
*/*%CODR:     P                   SET FATAL ERROR, AND MSVC MUST BACK
*/*OUT SELECTION (CLEANUP)                                           */
*/*           P (,%MNTQ)          SET JES3 REJECT REASON CODE, AND 0865
*/*APPROPRIATE RETURN CODE                                           */
*/*%ERS:      N                   FIND OUT WHY JES3 DID NOT GET REQUEST
*/*                                                                  */
*/*           D (NO,%SET,YES,%FTL)WAS JES3 - MSVC FUNCTION THERE ?   */
*/*%SET:      P (,%MNTQ)          SET VOLUME CHOSEN, SINCE NO JES3 FOR
*/*THIS FUNCTION IN SYSTEM NOW                                       */
*/*%FTL:      P                   SET FATAL ERROR, & MSVC MUST     0865
*/*BACK OUT CHOICE (CLEANUP). SET RETURN CODE                        */
*/*           P (,%MNTQ)          DETERMINE EXACT REASON FOR THIS ERROR
*/* AND SET APPROPRIATE REASON CODE                                  */
*/*%MNTQ:    D (YES,%ISS,NO,%NOM) VOLUME CHOSEN OR FATAL ERROR ?     */
*/*%ISS:      D (YES,%MOU,NO,%NOM)SHOULD MOUNT BE ISSUED ?           */
*/*%MOU:      S                   SVC 126: ISSUE MOUNT TO MSC        */
*/*           D (YES,%MOK,NO,%DEC)MOUNT OK ?                         */
*/*%MOK:      P (,%DEC)           SET SUCCESSFUL MOUNT, GOOD REASON &
*/*RETURN CODES                                                      */
*/*%NOM:      N (,%DEC)            NO MOUNT IS ISSUED FOR FIRST VQM
*/* ENTRY FOR REQUEST, OR ERROR                                      */
*/*%CLQ:      D (YES,%CLE,NO,%ITR)IS MSVC BACK OUT (CLEANUP) REQ NOW ?
*/*                                                                  */
*/*%CLE:      P                   SAVE ADDRESS OF THIS RPLV          */
*/*           N                   THIS IS NECESSARY ONLY WHEN NO RETRY
*/*WILL BE MADE                                                      */
*/*           S                   VQMABEND: GETS NEW RPLV, CHAINS FOR
*/*CLEANUP ONLY                                                      */
*/*           P (,%ITR)           READDRESS ORIGINAL RPLV            */
*/*%DEC:      N                   IF FIRST ENTRY OR SUCCESSFUL     0865
*/*MOUNT OR FATAL ERROR, HAVE FINISHED...                            */
*/*           N (,%CLQ)           UNLESS CLEANUP OF MSVC RECORDS (FOR
*/*VOLUME CHOSEN BUT NOT USED) IS NEEDED                             */
*/*%ITR:      D (YES,%NOVOL,NO,%MOV) ITERATE (RETRY) ?               */
*/*%MOV:      P                   MOVE PARAMETERS TO CALLERS ORIGINAL
*/*LIST                                                              */
*/*           P                   PICK UP RETURN ADDRESS             */
*/*          N                    FREEMAIN LENGTH IS CONTAINED IN RPLV
*/*                                                                  */
*/*          S                    VQMFSTOR: FREE STORAGE             */
*/*          R                    RETURN                             */
*/*VQMJESMT: END                                                     */
*                                                                  0865
*VQMJESMT:                                                         0865
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);/*                  @G18MB04*/
VQMJESMT DS    0H                                                  0866
*   MNSWMPT=MNSWMPT+ADDR(RPLV);     /* FIND STORAGE FOR JES3 @G18MB04*/
         ALR   MNSWMPT,RPLVPTR                                     0866
*   R14SAVE=REG14;                  /* SAVE RETURN ADDRESS   @G18MB04*/
         ST    REG14,R14SAVE(,MNSWMPT)                             0867
*   NSMFLAGS=ZERO;                  /* CLEAR OWN SWITCHES    @G18MB04*/
         MVI   NSMFLAGS(MNSWMPT),X'00'                             0868
*   IF RPLFTIME=OFF                 /* 1ST ENTRY FOR REQ?    @G18MB04*/
*     THEN                          /* FIRST ENTRY TO VQM    @G18MB04*/
         TM    RPLFTIME(RPLVPTR),B'10000000'                       0869
         BNZ   @RF00869                                            0869
*     DO;                           /* FIRST-TIME SWITCHES   @G18MB04*/
*       NSMFENTY=ON;                /* 1ST ENTRY, NOT RESET  @G18MB04*/
*       NOMOUNT=ON;                 /* NO MOUNT TO BE ISSUED @G18MB04*/
*       NOBACKOU=ON;                /* NOTHING TO BACK OUT   @G18MB04*/
         OI    NSMFENTY(MNSWMPT),B'11100000'                       0873
*     END;                          /*                       @G18MB04*/
*                                                                  0874
*   /*****************************************************************/
*   /*                                                               */
*   /* MSVC INTERFACE TO JES3 HAS SSOBMO FUNCTION NAME       @G18MB04*/
*   /* SINCE THIS MODULE EXECUTES UNDER USER TASK, NO SSIB   @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0875
*   RFY                                                            0875
*     SSOB BASED(ADDR(NSMMSSOB));   /* SUBSYS INTERFACE BLK  @G18MB04*/
@RF00869 DS    0H                                                  0876
*   RFY                                                            0876
*     SSMO BASED(ADDR(NSMMSSBX));   /* THEN SSOB EXTENSION   @G18MB04*/
*   SSOB=SSOB&&SSOB;                /* CLEAR THE SSOB        @G18MB04*/
         XC    SSOB(20,MNSWMPT),SSOB(MNSWMPT)                      0877
*   SSOBID=CHARSSOB;                /* EBCDIC LETTERS SSOB   @G18MB04*/
         MVC   SSOBID(4,MNSWMPT),CHARSSOB                          0878
*   SSOBLEN=LENGTH(SSOB);           /* LENGTH OF HEADER      @G18MB04*/
         LA    @11,20                                              0879
         STH   @11,SSOBLEN(,MNSWMPT)                               0879
*   SSOBFUNC=SSOBMSVC;              /* FUNCTION ID FOR MSVC  @G18MB04*/
         MVC   SSOBFUNC(2,MNSWMPT),@CH01311                        0880
*   SSOBINDV=ADDR(SSMO);            /* ADDRESS OF EXTENSION  @G18MB04*/
         ALR   @11,MNSWMPT                                         0881
         ST    @11,SSOBINDV(,MNSWMPT)                              0881
*   RESPECIFY                                                      0882
*     SSMO BASED(SSOBINDV);         /* ADDRESS EXTENSION     @G18MB04*/
*   SSMO=SSMO&&SSMO;                /* CLEAR EXTENSION       @G18MB04*/
         XC    SSMO(28,@11),SSMO(@11)                              0883
*   SSMOLEN=LENGTH(SSMO);           /* SSMO EXTENSION LENGTH @G18MB04*/
         MVC   SSMOLEN(2,@11),@CH01294                             0884
*   SSMOPNAM=MNTXJOBN;              /* POINTER TO JOB NAME   @G18MB04*/
         L     @07,MNTEXTP(,PARMPTR)                               0885
         MVC   SSMOPNAM(4,@11),MNTXJOBN(@07)                       0885
*   SSMOPSTN=MNTXSTEP;              /* PTR TO STEP NUMBER    @G18MB04*/
         MVC   SSMOPSTN(4,@11),MNTXSTEP(@07)                       0886
*   SSMOPUAD=ADDR(MDVUA);           /* PTR TO UNIT ADDRESS   @G18MB04*/
         LA    @07,MDVUA(,PARMPTR)                                 0887
         ST    @07,SSMOPUAD(,@11)                                  0887
*   SSMOPVOL=ADDR(MDVOL);           /* POINTER TO VOLSER     @G18MB04*/
         LA    @07,MDVOL(,PARMPTR)                                 0888
         ST    @07,SSMOPVOL(,@11)                                  0888
*                                                                  0889
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ITERATES ONCE ONLY FOR 1ST ENTRY. FOR 2ND   @G18MB04*/
*   /* ENTRY, ITERATES UNTIL SUCCESSFUL MOUNT OR FATAL ERROR @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0889
*   DO UNTIL NSMFENTY=ON×SUCCMNT=ON×FATALERR=ON;/* MAIN LOOP @G18MB04*/
@DL00889 DS    0H                                                  0890
*     VOLCHOSN=OFF;                 /* NEED DIFFERENT VOLUME @G18MB04*/
         NI    VOLCHOSN(MNSWMPT),B'11111011'                       0890
*     RPLFLAGA=''B;                 /* CLEAR RPLV FLAGS      @G18MB04*/
         XC    RPLFLAGA(2,RPLVPTR),RPLFLAGA(RPLVPTR)               0891
*     IF NOBACKOU=OFF               /* RECORDS TO BACK OUT ? @G18MB04*/
*       THEN                        /* VOL SHOWN USED -- NOT @G18MB04*/
         TM    NOBACKOU(MNSWMPT),B'00100000'                       0892
         BNZ   @RF00892                                            0892
*       RPLFTIME=ON;                /* THIS IS 2ND ENTRY     @G18MB04*/
         OI    RPLFTIME(RPLVPTR),B'10000000'                       0893
*     DO UNTIL VOLCHOSN=ON×FATALERR=ON;/* CHOOSE ANOTHER VOL @G18MB04*/
@RF00892 DS    0H                                                  0894
@DL00894 DS    0H                                                  0895
*       RPLVPOST=ON;                /* NEED ECB POST         @G18MB04*/
         OI    RPLVPOST(RPLVPTR),B'01000000'                       0895
*       RPLVSAM=''B;                /* & VSAM RPLV           @G18MB04*/
         XC    RPLVSAM(76,RPLVPTR),RPLVSAM(RPLVPTR)                0896
*       CALL VQMADDRB;              /* CALL QUEUEING ROUTINE @G18MB04*/
         BAL   @14,VQMADDRB                                        0897
*       IF RPLVRETC^=SUCCES         /* NO VOLUME CHOSEN?     @G18MB04*/
*         THEN                      /* REQUEST NOT SATISFIED @G18MB04*/
         LH    @11,RPLVRETC(,RPLVPTR)                              0898
         N     @11,@CF01714                                        0898
         LTR   @11,@11                                             0898
         BZ    @RF00898                                            0898
*         FATALERR=ON;              /* REQUEST WILL FAIL     @G18MB04*/
         OI    FATALERR(MNSWMPT),B'00010000'                       0899
*       ELSE                                                       0900
*         DO;                       /* MSVC HAS VOLUME       @G18MB04*/
         B     @RC00898                                            0900
@RF00898 DS    0H                                                  0901
*           MDVOL=ADDR(RPLVUTIL)->MDVOL;/* VOL TO ORIG LIST  @G18MB04*/
*                                                                  0901
         LA    @11,132                                             0901
         LR    @07,RPLVPTR                                         0901
         ALR   @07,@11                                             0901
         MVC   MDVOL(6,PARMPTR),MDVOL(@07)                         0901
*           /*********************************************************/
*           /*                                                       */
*           /* OFFER VOLSER TO JES3 VIA SUBSYSTEM INTERFACE  @G18MB04*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0902
*           RFY                                                    0902
*            (REG13) RSTD;          /*                       @G18MB04*/
*           R13SAVE=REG13;          /* SAVE OWN REG13        @G18MB04*/
         ST    REG13,R13SAVE(,MNSWMPT)                             0903
*           REG13=ADDR(SUBREGS);    /* REG13 HAS SAVE AREA   @G18MB04*/
         LA    REG13,SUBREGS(,MNSWMPT)                             0904
*           NSMSSOB=ADDR(SSOB);     /* NEED PTR TO SSOB ADDR @G18MB04*/
         ST    MNSWMPT,NSMSSOB(,MNSWMPT)                           0905
*           NSMPHIBT=ON;            /* HI-ORDER PARMLIST BIT @G18MB04*/
         ALR   @11,MNSWMPT                                         0906
         OI    NSMPHIBT(@11),B'10000000'                           0906
*           REG1=ADDR(NSMSSOB);     /* PROVIDE PTR TO SSOB   @G18MB04*/
*                                                                  0907
         LA    REG1,NSMSSOB(,MNSWMPT)                              0907
*           /*********************************************************/
*           /*                                                       */
*           /* MACRO ASSEM VERSION USED -- NO AUTO STORAGE   @G18MB04*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0908
*           GEN(IEFSSREQ)           /* SUBSYS INTERFACE REQ  @G18MB04*/
*           REFS(REG1,REG14,REG15,CVTPTR,CVTJESCT,JESSSREQ) SETS(REG14,
*               REG15);             /* 0,1,14,15 DESTROYED   @G18MB04*/
         IEFSSREQ
*           REG13=R13SAVE;          /* RESTORE OWN REG 13    @G18MB04*/
         L     REG13,R13SAVE(,MNSWMPT)                             0909
*           RFY                                                    0910
*            (REG13) UNRSTD;        /* REGS 2-12 SAVED       @G18MB04*/
*                                                                  0910
*           /*********************************************************/
*           /*                                                       */
*           /* REGISTER 15 HAS RETURN CODE FROM SUBSYSTEM INTERFACE  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0911
*           IF REG15=SSRTOK         /* DID FUNCTION GET REQ? @G18MB04*/
*             THEN                  /* JES3 GOT REQUEST      @G18MB04*/
         SLR   @11,@11                                             0911
         CR    REG15,@11                                           0911
         BNE   @RF00911                                            0911
*             DO;                   /* SEE CODE FROM JES3    @G18MB04*/
*               IF SSOBRETN=SSMOVOLA/* DID JES3 LIKE IT ?    @G18MB04*/
*                 THEN              /* YES, VOL AVAILABLE    @G18MB04*/
         C     @11,SSOBRETN(,MNSWMPT)                              0913
         BNE   @RF00913                                            0913
*                 VOLCHOSN=ON;      /* WE WILL USE THIS ONE  @G18MB04*/
         OI    VOLCHOSN(MNSWMPT),B'00000100'                       0914
*               ELSE                /* CODE ISNT VOL.AVAIL.  @G18MB04*/
*                 IF SSOBRETN^=SSMOVOLB/* NOT VOL BUSY?      @G18MB04*/
*                   THEN            /* BAD CODE FROM JES3    @G18MB04*/
         B     @RC00913                                            0915
@RF00913 LA    @11,4                                               0915
         C     @11,SSOBRETN(,MNSWMPT)                              0915
         BE    @RF00915                                            0915
*                   DO;             /*                       @G18MB04*/
*                     FATALERR=ON;  /* END OF THIS REQUEST   @G18MB04*/
*                     CLEANUP=ON;   /* TO GET MSVC IN SYNCH  @G18MB04*/
         OI    FATALERR(MNSWMPT),B'00011000'                       0918
*                     RPLRCODE=JES3RCUK;/* UNKNOWN CODE      @G18MB04*/
         MVC   RPLRCODE(2,RPLVPTR),@CH00117                        0919
*                     RPLVRETC=FOUR;/* END OF REQUEST        @G18MB04*/
         STH   @11,RPLVRETC(,RPLVPTR)                              0920
*                   END;            /*                       @G18MB04*/
*                 ELSE              /* JES3 SAYS VOL BUSY    @G18MB04*/
*                   DO;             /* SET UP TO TRY ANOTHER @G18MB04*/
         B     @RC00915                                            0922
@RF00915 DS    0H                                                  0923
*                     MNTXREJT=MNTXREJT+1;/* COUNT REJECTION @G18MB04*/
*                                                                  0923
         L     @11,MNTEXTP(,PARMPTR)                               0923
         LA    @07,1                                               0923
         AL    @07,MNTXREJT(,@11)                                  0923
         ST    @07,MNTXREJT(,@11)                                  0923
*                     /***********************************************/
*                     /*                                             */
*                     /* SET UP SO THAT MSVC WILL REMOVE ANY @G18MB04*/
*                     /* RECORD OF THIS CHOICE OF THIS VOLUME, WHILE */
*                     /* IT IS LOOKING FOR ANOTHER           @G18MB04*/
*                     /*                                             */
*                     /***********************************************/
*                                                                  0924
*                     RPLRCODE=JES3REJ;/* JES3 SAYS NO       @G18MB04*/
         MVC   RPLRCODE(2,RPLVPTR),@CH00109                        0924
*                     RPLVRETC=FOUR;/* BAD RETURN CODE       @G18MB04*/
         MVC   RPLVRETC(2,RPLVPTR),@CH00121                        0925
*                     RPLFLAGA=''B; /* RESET RPLV            @G18MB04*/
         XC    RPLFLAGA(2,RPLVPTR),RPLFLAGA(RPLVPTR)               0926
*                     RPLFTIME=ON;  /* THIS IS 2ND ENTRY     @G18MB04*/
         OI    RPLFTIME(RPLVPTR),B'10000000'                       0927
*                     NOBACKOU=OFF; /* SET UP TO BACK OUT    @G18MB04*/
         NI    NOBACKOU(MNSWMPT),B'11011111'                       0928
*                   END;            /* OF SETUP FOR RETRY    @G18MB04*/
*             END;                  /* MSVC FUNCTION GOT REQ @G18MB04*/
*           ELSE                    /* REQ DIDNT GET THERE   @G18MB04*/
*             DO;                   /* FIND OUT WHY          @G18MB04*/
         B     @RC00911                                            0931
@RF00911 DS    0H                                                  0932
*               IF REG15=SSRTNSUP×  /* FUNCT NOT SUPPORTED   @G18MB04*/
*                   REG15=SSRTNTUP× /* SUBSYS IS, BUT NOT UP @G18MB04*/
*                   REG15=SSRTNOSS  /* NO SUCH SUBSYSTEM     @G18MB04*/
*                 THEN              /* SKIP JES3, NOT THERE  @G18MB04*/
         C     REG15,@CF00121                                      0932
         BE    @RT00932                                            0932
         C     REG15,@CF00061                                      0932
         BE    @RT00932                                            0932
         C     REG15,@CF01307                                      0932
         BNE   @RF00932                                            0932
@RT00932 DS    0H                                                  0933
*                 VOLCHOSN=ON;      /* USE THIS VOLUME       @G18MB04*/
         OI    VOLCHOSN(MNSWMPT),B'00000100'                       0933
*               ELSE                /* ERRORS                @G18MB04*/
*                 DO;               /* INTERROGATE ERRORS    @G18MB04*/
         B     @RC00932                                            0934
@RF00932 DS    0H                                                  0935
*                   FATALERR=ON;    /* END OF THIS REQUEST   @G18MB04*/
*                   CLEANUP=ON;     /* MSVC WILL BACK OUT    @G18MB04*/
         OI    FATALERR(MNSWMPT),B'00011000'                       0936
*                   RPLVRETC=FOUR;  /*                       @G18MB04*/
         MVC   RPLVRETC(2,RPLVPTR),@CH00121                        0937
*                   IF REG15=SSRTDIST/* SUBSYS DISASTER?     @G18MB04*/
*                     THEN          /* DISASTROUS ERROR      @G18MB04*/
         C     REG15,@CF00068                                      0938
         BNE   @RF00938                                            0938
*                     RPLRCODE=SUBSYSDS;/* SUBSYS DIS.ERROR  @G18MB04*/
         MVC   RPLRCODE(2,RPLVPTR),@CH00111                        0939
*                   ELSE            /* ANOTHER ERROR         @G18MB04*/
*                     DO;           /*                       @G18MB04*/
         B     @RC00938                                            0940
@RF00938 DS    0H                                                  0941
*                       IF REG15=SSRTLERR/* LOGICAL ERROR ?  @G18MB04*/
*                         THEN      /* SUBSYS LOGICAL ERROR  @G18MB04*/
         C     REG15,@CF00187                                      0941
         BNE   @RF00941                                            0941
*                         RPLRCODE=SUBSYSLE;/* SUBSYS LOG.   @G18MB04*/
         MVC   RPLRCODE(2,RPLVPTR),@CH00113                        0942
*                       ELSE        /* REG15 CONTENT UNKNOWN @G18MB04*/
*                         RPLRCODE=SUBSYSUK;/* UNKNOWN CODE  @G18MB04*/
         B     @RC00941                                            0943
@RF00941 MVC   RPLRCODE(2,RPLVPTR),@CH00115                        0943
*                     END;          /*                       @G18MB04*/
@RC00941 DS    0H                                                  0945
*                 END;              /* ERROR INTERROGATION   @G18MB04*/
@RC00938 DS    0H                                                  0946
*             END;                  /* FINDING OUT WHY       @G18MB04*/
@RC00932 DS    0H                                                  0947
*         END;                      /* MSVC HAS VOLUME       @G18MB04*/
@RC00911 DS    0H                                                  0948
*     END;                          /* CHOOSING ANOTHER VOLUME     0948
*                                                            @G18MB04*/
@RC00898 DS    0H                                                  0948
@DE00894 TM    VOLCHOSN(MNSWMPT),B'00010100'                       0948
         BZ    @DL00894                                            0948
*     IF NOMOUNT=ON×FATALERR=ON     /* SKIP VOLUME MOUNT ?   @G18MB04*/
*       THEN                        /* WILL NOT ISSUE MOUNT  @G18MB04*/
         TM    NOMOUNT(MNSWMPT),B'01010000'                        0949
         BZ    @RF00949                                            0949
*       DO;                         /*                       @G18MB04*/
*         IF CLEANUP=ON             /* UPDATE MSVC RECORDS ? @G18MB04*/
*           THEN                    /* MSVC RECORDS SHOW UNUSED    0951
*                                      VOLUME IN USE         @G18MB04*/
         TM    CLEANUP(MNSWMPT),B'00001000'                        0951
         BNO   @RF00951                                            0951
*           DO;                     /* SEND CLEANUP RPLV     @G18MB04*/
*             NSMORPLV=RPLVPTR;     /* SAVE PTR TO ORIG RPLV @G18MB04*/
         ST    RPLVPTR,NSMORPLV(,MNSWMPT)                          0953
*             REG1=RNIO;            /* DESIGNATE RECOVERY    @G18MB04*/
         SLR   REG1,REG1                                           0954
         IC    REG1,RNIO                                           0954
*             REG8SAV=REG8;         /* SAVE AROUND VQMABEND  @G18MB04*/
         ST    REG8,REG8SAV(,MNSWMPT)                              0955
*             CALL VQMABEND;        /* NEW RPLV,QUED,NO WAIT @G18MB04*/
         BAL   @14,VQMABEND                                        0956
*             REG8=REG8SAV;         /* RESTORE AFTER VQMABEND USE  0957
*                                                            @G18MB04*/
         L     REG8,REG8SAV(,MNSWMPT)                              0957
*             RPLVPTR=NSMORPLV;     /* BACK TO ORIGINAL RPLV @G18MB04*/
         L     RPLVPTR,NSMORPLV(,MNSWMPT)                          0958
*           END;                    /* CLEANUP               @G18MB04*/
*       END;                        /*                       @G18MB04*/
*     ELSE                                                         0961
*       DO;                         /* MOUNT CHOSEN VOLUME   @G18MB04*/
         B     @RC00949                                            0961
@RF00949 DS    0H                                                  0962
*         REG1=ADDR(RPLVUTIL);      /* SET RPLV ADDR         @G18MB04*/
         LA    REG1,RPLVUTIL(,RPLVPTR)                             0962
*         REG1->MDVISMNT=ON;        /* SET MSVC MNT ON       @G18MB04*/
         OI    MDVISMNT(REG1),B'01000000'                          0963
*LMSSC3:                                                           0964
*         SVC(126);                 /* INVOKE SVC 126 MOUNT  @G18MB04*/
LMSSC3   SVC   126                                                 0964
*         REG1->MDVISMNT=OFF;       /* SET MSVC MNT OFF      @G18MB04*/
         NI    MDVISMNT(REG1),B'10111111'                          0965
*         RPLRCODE=REG0;            /* REASON CODE           @ZA26243*/
         STH   REG0,RPLRCODE(,RPLVPTR)                             0966
*         RPLVRETC=REG0;            /* RETURN CODE           @ZA26243*/
         STH   REG0,RPLVRETC(,RPLVPTR)                             0967
*         IF REG15=ZERO THEN        /* MOUNT SUCCESSFUL      @G18MB04*/
         LTR   REG15,REG15                                         0968
         BNZ   @RF00968                                            0968
*           DO;                     /* YES                   @G18MB04*/
*             RPLVRETC=EIGHT;       /* SET RETURN CODE       @G18MB04*/
         MVC   RPLVRETC(2,RPLVPTR),@CH00061                        0970
*             SUCCMNT=ON;           /* SET SUCCESSFUL MOUNT  @G18MB04*/
         OI    SUCCMNT(MNSWMPT),B'00000010'                        0971
*           END;                    /*                       @G18MB04*/
*       END;                        /* TRYING MOUNT          @G18MB04*/
@RF00968 DS    0H                                                  0974
*   END;                            /* OF VQMJESMT MAIN LOOP @G18MB04*/
@RC00949 DS    0H                                                  0974
@DE00889 TM    NSMFENTY(MNSWMPT),B'10010010'                       0974
         BZ    @DL00889                                            0974
*                                                                  0975
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW MOVE PARAMETERS TO CALLERS ORIGINAL LIST          @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0975
*   REG1=PLENGTH;                   /* SET LENGTH TO MOVE    @G18MB04*/
         L     REG1,PLENGTH(,PARMPTR)                              0975
*   REG2=ADDR(RPLVUTIL);            /* RPLV ADDRESS          @G18MB04*/
         LA    REG2,RPLVUTIL(,RPLVPTR)                             0976
*   PARMLIST(1:REG1)=REG2->PARMLIST;/*                       @G18MB04*/
         LR    @11,REG1                                            0977
         BCTR  @11,0                                               0977
         EX    @11,@SM01710                                        0977
*   REG2=REG2+PLENGTH;              /* ADD ORDER LENGTH      @G18MB04*/
         AL    REG2,PLENGTH(,PARMPTR)                              0978
*   REG1=LJFCBOX;                   /* SET JFCB LENGTH ADDR  @G18MB04*/
         LA    REG1,176                                            0979
*   REG3=MNTXJFCB;                  /* SET JFCB ADDRESS      @G18MB04*/
         L     @11,MNTEXTP(,PARMPTR)                               0980
         L     REG3,MNTXJFCB(,@11)                                 0980
*   INFMJFCB=MOVELST(1:REG1);       /* COPY JFCB BACK        @G18MB04*/
*                                                                  0981
         MVI   INFMJFCB+1(REG3),C' '                               0981
         MVC   INFMJFCB+2(92,REG3),INFMJFCB+1(REG3)                0981
         LR    @11,REG1                                            0981
         BCTR  @11,0                                               0981
         EX    @11,@SM01712                                        0981
*   /*****************************************************************/
*   /*                                                               */
*   /* PICK UP RETURN ADDRESS FOR VQMJESMT FROM STORAGE      @G18MB04*/
*   /* ABOUT TO BE FREED, AND PUT IT INTO RESTRICTED REG. WHICH WAS  */
*   /* USED FOR ADDRESSABILITY OF PART OF THAT STORAGE       @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0982
*   MNSWMPT=R14SAVE;                /*                       @G18MB04*/
*                                                                  0982
         L     MNSWMPT,R14SAVE(,MNSWMPT)                           0982
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE RPLV AND OTHER CONTIGUOUS STORAGE OBTAINED IN VQMMOUNT   */
*   /* LENGTH USED IS IN RPLVTLEN, AS SET BY VQMSTOR         @G18MB04*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0983
*   CALL VQMFSTOR;                  /*                       @G18MB04*/
         BAL   @14,VQMFSTOR                                        0983
*   REG14=MNSWMPT;                  /* RESTORE RETURN ADDR   @G18MB04*/
         LR    REG14,MNSWMPT                                       0984
*   RETURN;                         /*                       @G18MB04*/
@EL00015 DS    0H                                                  0985
@EF00015 DS    0H                                                  0985
@ER00015 BR    @14                                                 0985
*   END VQMJESMT;                   /* END VQMJESMT          @G18MB04*/
*   END ICBVQM00                    /* END ICBVQM00          @Y30LB24*/
*                                                                  0987
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEZSSC  )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IEZVVICB)                                       */
*/*%INCLUDE SYSLIB  (IEZRPLV )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                       */
*/*%INCLUDE SYSLIB  (IEFJESCT)                                       */
*/*%INCLUDE SYSLIB  (IEZRVVI )                                       */
*/*%INCLUDE SYSLIB  (IEZMNTXT)                                       */
*/*%INCLUDE SYSLIB  (IEZINIT )                                       */
*                                                                  0987
*       ;                                                          0987
@DATA    DS    0H
@CH01294 DC    H'28'
@CH01311 DC    H'35'
@CH00109 DC    H'609'
@CH00111 DC    H'610'
@CH00113 DC    H'611'
@CH00115 DC    H'612'
@CH00117 DC    H'613'
@SM01699 MVC   RPLVUTIL(0,RPLVPTR),PARMLIST(PARMPTR)
@SM01706 MVC   MOVELST(0,REG2),INFMJFCB(REG3)
@SM01708 MVC   MOVELST(0,REG2),JFCBX(REG3)
@SM01710 MVC   PARMLIST(0,PARMPTR),PARMLIST(REG2)
@SM01712 MVC   INFMJFCB(0,REG3),MOVELST(REG2)
@SM01715 MVC   MOVELST(0,REG2),PARMEXT(REG3)
@DATD    DSECT
         DS    0F
ICBVQM00 CSECT
         DS    0F
@CF00121 DC    F'4'
@CH00121 EQU   @CF00121+2
@CF00123 DC    F'5'
@CF00061 DC    F'8'
@CH00061 EQU   @CF00061+2
@CF01307 DC    F'12'
@CF00033 DC    F'15'
@CF00068 DC    F'16'
@CF00187 DC    F'20'
@CF01683 DC    F'141'
@CF00127 DC    F'176'
@CF00129 DC    F'256'
@CF01714 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
ICBVQM00 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
RZERO    DC    XL4'80000000'
PZERO    DC    XL4'40000000'
RVVLEN   DC    AL2(68)
INILEN   DC    AL2(20)
POOL     DC    AL1(241)
EID      DC    XL1'80'
RIO      DC    XL1'40'
RNIO     DC    XL1'20'
CHARSSOB DC    CL4'SSOB'
VQMPATCH DS    CL200
         ORG   VQMPATCH
@NM00003 DC    CL20'ICBVQM00 PATCH AREA '
@NM00004 DC    XL180'0'
         ORG   VQMPATCH+200
ICBVQM00 CSECT
*                                                          /*#Y30LB24*/
M0       EQU   0                    MASK                       @YM34322
M8       EQU   8                    MASK                       @YM34322
M24      EQU   24                   MASK                       @YM34322
POST     EQU   2
TIME     DC    F'5120'
ICBVQM00 CSECT
*                                                          /*#Y30LB24*/
MSG1     WTO   'ICB409I GETMAIN FAILURE IN MSVC QUEUE MANAGER',        *
               ROUTCDE=(2,11),DESC=6,MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICBVQM00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
MNSWMPT  EQU   @04
RPLVPTR  EQU   @05
VVIPTR   EQU   @06
REG8     EQU   @08
PARMPTR  EQU   @09
PARM0    EQU   @10
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
FAILCODE EQU   @15
CVOLR1   EQU   @01
DEFVR1   EQU   @01
MCR1     EQU   @01
MDREG1   EQU   @01
NULBR1   EQU   @01
REG11    EQU   @11
REG12    EQU   @12
REG7     EQU   @07
CVTPTR   EQU   16
TCBCHAN  EQU   0
ASCBSAVE EQU   TCBCHAN+12
RVVIPTR  EQU   0
JFCBPTR  EQU   0
JFCBXPTR EQU   0
INITPTR  EQU   0
ICB2SSCB EQU   0
ICBOPT   EQU   ICB2SSCB+48
ICBFLG   EQU   ICB2SSCB+52
ICBFG1   EQU   ICBFLG
ICBVVICB EQU   ICB2SSCB+76
ICBTRACE EQU   ICB2SSCB+148
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
VVICB    EQU   0
VVIUCAT  EQU   VVICB+4
VVIFLGA  EQU   VVICB+15
VVIFLG0  EQU   VVIFLGA
VVIFLG2  EQU   VVIFLGA
VVIECB1  EQU   VVICB+28
VVIQRPL1 EQU   VVICB+40
VVIQRPL2 EQU   VVICB+44
VVIRES4  EQU   VVICB+64
VVIRES5  EQU   VVICB+68
VVIRES6  EQU   VVICB+72
RPLV     EQU   0
RPLVQPTR EQU   RPLV
RPLVECB  EQU   RPLV+4
RPLTCBPR EQU   RPLV+8
RPLASCBP EQU   RPLTCBPR
RPLFLAGA EQU   RPLV+28
RPLFTIME EQU   RPLFLAGA
RPLVPOST EQU   RPLFLAGA
RPLVPROG EQU   RPLFLAGA
RPLVCOMP EQU   RPLFLAGA
RPLVVIN  EQU   RPLFLAGA
RPLVVOP  EQU   RPLFLAGA
RPLVJRNL EQU   RPLFLAGA
RPLVTLEN EQU   RPLV+30
RPLRCODE EQU   RPLV+32
RPLVRETC EQU   RPLV+34
RPLVSAM  EQU   RPLV+56
RPLVOPT  EQU   RPLVSAM+40
RPLVRLN  EQU   RPLVSAM+48
RPLVUTIL EQU   RPLV+132
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTBRET  EQU   CVTMAP+82
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTICB   EQU   CVTXTNT2+48
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
JFCBXNXT EQU   JFCBX+172
SSOB     EQU   0
SSOBID   EQU   SSOB
SSOBLEN  EQU   SSOB+4
SSOBFUNC EQU   SSOB+6
SSOBRETN EQU   SSOB+12
SSOBINDV EQU   SSOB+16
SSMO     EQU   0
SSMOLEN  EQU   SSMO
SSMOFLG1 EQU   SSMO+2
SSMOPNAM EQU   SSMO+4
SSMOPSTN EQU   SSMO+8
SSMOPUAD EQU   SSMO+12
SSMOPVOL EQU   SSMO+16
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
MNSWMSTG EQU   0
NSMMSSOB EQU   MNSWMSTG
NSMMSSBX EQU   MNSWMSTG+20
REGSAVE  EQU   MNSWMSTG+48
SUBREGS  EQU   REGSAVE
R14SAVE  EQU   REGSAVE+72
R13SAVE  EQU   REGSAVE+76
REG8SAV  EQU   REGSAVE+80
NSMSSPLS EQU   MNSWMSTG+132
NSMSSOB  EQU   NSMSSPLS
NSMORPLV EQU   MNSWMSTG+136
NSMFLAGS EQU   MNSWMSTG+140
NSMFENTY EQU   NSMFLAGS
NOMOUNT  EQU   NSMFLAGS
NOBACKOU EQU   NSMFLAGS
FATALERR EQU   NSMFLAGS
CLEANUP  EQU   NSMFLAGS
VOLCHOSN EQU   NSMFLAGS
SUCCMNT  EQU   NSMFLAGS
NSMPARBT EQU   0
NSMPHIBT EQU   NSMPARBT
RVVI     EQU   0
RVVOPCOD EQU   RVVI+4
RVVARLN  EQU   RVVI+22
RVVAREA  EQU   RVVI+24
RVVRTBUF EQU   RVVI+32
RVVFLAGA EQU   RVVI+58
RVVRMODE EQU   RVVFLAGA
RVVCHAIN EQU   RVVFLAGA+1
RVVRDRCD EQU   RVVFLAGA+2
RVVRTEST EQU   RVVFLAGA+3
RVVCPYTP EQU   RVVFLAGA+4
RVVSPEC  EQU   RVVFLAGA+5
ICBDVLST EQU   0
DEFVFLG  EQU   ICBDVLST+6
DEFVLIB  EQU   ICBDVLST+7
DEFVVFLG EQU   ICBDVLST+14
DEFVCECT EQU   DEFVVFLG
DEFVDATA EQU   ICBDVLST+56
DEFVVEXT EQU   ICBDVLST+128
ICBMCLST EQU   0
MCRTFLG  EQU   ICBMCLST+6
MCRTSCT  EQU   MCRTFLG
MCRTLIB  EQU   ICBMCLST+7
MCRTVEXT EQU   ICBMCLST+44
ICBCVLST EQU   0
CVOLFLG  EQU   ICBCVLST+6
CVOCRDAS EQU   CVOLFLG
CVOLVEXT EQU   ICBCVLST+36
LSTNULLC EQU   0
NULFLAGA EQU   LSTNULLC+6
NULSCRC  EQU   NULFLAGA
ICBMTLST EQU   0
MDFLG    EQU   ICBMTLST+6
MDVISMNT EQU   MDFLG
MDSRTCH  EQU   MDFLG
MDMEXT   EQU   MDFLG
MDVOL    EQU   ICBMTLST+8
MDVUA    EQU   ICBMTLST+14
MNTEXTP  EQU   ICBMTLST+24
MDJFCB   EQU   MNTEXTP
MNTXT    EQU   0
MNTXJFCB EQU   MNTXT
MNTXJOBN EQU   MNTXT+4
MNTXSTEP EQU   MNTXT+8
MNTXREJT EQU   MNTXT+12
INITVVI  EQU   0
INILNGTH EQU   INITVVI
INITOPCD EQU   INITVVI+4
INIFLAGA EQU   INITVVI+5
INIENABL EQU   INIFLAGA
INIDISAB EQU   INIFLAGA
INIFLAGB EQU   INITVVI+6
INIJRNL  EQU   INIFLAGB
INIABLE  EQU   INIFLAGB
INIUCAT  EQU   INITVVI+8
PARMLIST EQU   0
ORDER    EQU   PARMLIST
PLENGTH  EQU   ORDER
OPCODE   EQU   ORDER+4
MOVELIST EQU   0
MOVELST  EQU   MOVELIST
PARMLST  EQU   0
PARMEXT  EQU   PARMLST
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
SSREQ    EQU   0
SWAMGR   EQU   0
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBNVOL EQU   JFCUCSEG+9
JFCBVOLS EQU   JFCUCSEG+10
NVOL     EQU   JFCBNVOL
JFCBS001 EQU   JFCBVOLS
JFCBEXAD EQU   JFCBS001+31
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBMSGP EQU   JFCBCTRI
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
EXAD     EQU   JFCBEXAD
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTASVT  EQU   CVTS01+208
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASVTPTR  EQU   CVTASVT
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
ICBPTR   EQU   CVTICB
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBRV01 EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00019 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00018 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00017 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
@NM00051 EQU   INITVVI+16
INIVCODE EQU   INITVVI+7
@NM00050 EQU   INIFLAGB
INIRESTR EQU   INIFLAGB
INIVERFY EQU   INIFLAGB
@NM00049 EQU   INIFLAGA
ININIT   EQU   INIFLAGA
@NM00048 EQU   ICBMTLST+21
MDHOST   EQU   ICBMTLST+16
@NM00047 EQU   MDFLG
MDVSVRQ  EQU   MDFLG
@NM00046 EQU   MDFLG
@NM00045 EQU   ICBMTLST+5
MDOPCD   EQU   ICBMTLST+4
MDLEN    EQU   ICBMTLST
NULRES2  EQU   LSTNULLC+32
NULCSN   EQU   LSTNULLC+20
NULECB   EQU   LSTNULLC+16
NULASID  EQU   LSTNULLC+14
NULVOLID EQU   LSTNULLC+8
@NM00044 EQU   NULFLAGA
NULCART2 EQU   NULFLAGA
NULCART1 EQU   NULFLAGA
@NM00043 EQU   NULFLAGA
NULTRAN  EQU   NULFLAGA
NULVOL   EQU   NULFLAGA
NULRES1  EQU   LSTNULLC+5
NULORDER EQU   LSTNULLC+4
NULENGTH EQU   LSTNULLC
CVOLRES2 EQU   ICBCVLST+34
CVOLRUA  EQU   ICBCVLST+32
CVOLCSN  EQU   ICBCVLST+20
CVOLECB  EQU   ICBCVLST+16
CVOLASID EQU   ICBCVLST+14
CVOLID   EQU   ICBCVLST+8
@NM00042 EQU   CVOLFLG
CVOCRCRV EQU   CVOLFLG
CVOCRCR  EQU   CVOLFLG
CVODASCR EQU   CVOLFLG
CVOLRES1 EQU   ICBCVLST+5
CVOLOPCD EQU   ICBCVLST+4
CVOLLEN  EQU   ICBCVLST
MCRTECB  EQU   ICBMCLST+40
MCRTASID EQU   ICBMCLST+38
MCRTRES4 EQU   ICBMCLST+36
MCRTCSN  EQU   ICBMCLST+24
MCRTRES3 EQU   ICBMCLST+16
MCRTRES2 EQU   ICBMCLST+8
MCRTLD   EQU   MCRTLIB
@NM00041 EQU   MCRTLIB
@NM00040 EQU   MCRTFLG
MCRTTRAN EQU   MCRTFLG
@NM00039 EQU   MCRTFLG
MCRTRES1 EQU   ICBMCLST+5
MCRTOPCD EQU   ICBMCLST+4
MCRTLEN  EQU   ICBMCLST
DEFTLAB  EQU   DEFVDATA+71
DEFR60   EQU   DEFVDATA+43
DEFOWNID EQU   DEFVDATA+29
DEFR55   EQU   DEFVDATA+3
DEFACSEC EQU   DEFVDATA+2
DEFR50   EQU   DEFVDATA
DEFVECB  EQU   ICBDVLST+52
DEFVASID EQU   ICBDVLST+50
@NM00038 EQU   ICBDVLST+48
DEFVCSN2 EQU   ICBDVLST+36
DEFVCSN1 EQU   ICBDVLST+24
@NM00037 EQU   ICBDVLST+22
DEFVNVOL EQU   ICBDVLST+16
@NM00036 EQU   ICBDVLST+15
@NM00035 EQU   DEFVVFLG
DEFVWINH EQU   DEFVVFLG
DEFVBIND EQU   DEFVVFLG
@NM00034 EQU   DEFVVFLG
DEFVEXCL EQU   DEFVVFLG
DEFVSEC  EQU   DEFVVFLG
@NM00033 EQU   DEFVVFLG
DEFVOLD  EQU   ICBDVLST+8
DEFVLID  EQU   DEFVLIB
@NM00032 EQU   DEFVLIB
DEFVDACT EQU   DEFVFLG
DEFVACT  EQU   DEFVFLG
DEFVRNTR EQU   DEFVFLG
DEFVELTR EQU   DEFVFLG
DEFVREP  EQU   DEFVFLG
DEFVRNM  EQU   DEFVFLG
DEFVELM  EQU   DEFVFLG
DEFVCR   EQU   DEFVFLG
@NM00031 EQU   ICBDVLST+5
DEFVOPCD EQU   ICBDVLST+4
DEFVLEN  EQU   ICBDVLST
@NM00030 EQU   RVVI+64
RVVSVOL  EQU   RVVSPEC
RVVSDUP  EQU   RVVSPEC
RVVSCPY  EQU   RVVSPEC
RVVSCSN  EQU   RVVSPEC
RVVSSEQ  EQU   RVVSPEC
RVVSDTE  EQU   RVVSPEC
RVVSEXP  EQU   RVVSPEC
RVVSGRP  EQU   RVVSPEC
@NM00029 EQU   RVVCPYTP
RVVCPLHD EQU   RVVCPYTP
RVVLCOPY EQU   RVVCPYTP
RVVOBKUP EQU   RVVCPYTP
RVVLBKUP EQU   RVVCPYTP
RVVBPLHD EQU   RVVRTEST
RVVDVOL  EQU   RVVRTEST
RVVACTV  EQU   RVVRTEST
RVVINACT EQU   RVVRTEST
RVVRSTD  EQU   RVVRTEST
RVVGSVOL EQU   RVVRTEST
RVVTHOLD EQU   RVVRTEST
RVVEXPDT EQU   RVVRTEST
RVVALL   EQU   RVVRDRCD
RVVCPURC EQU   RVVRDRCD
RVVCIRCD EQU   RVVRDRCD
RVVRUNKN EQU   RVVRDRCD
RVVDUPRC EQU   RVVRDRCD
RVVCPYRC EQU   RVVRDRCD
RVVGRPRC EQU   RVVRDRCD
RVVBVRCD EQU   RVVRDRCD
@NM00028 EQU   RVVCHAIN
RVVNGVOL EQU   RVVCHAIN
RVVGPVOL EQU   RVVCHAIN
@NM00027 EQU   RVVRMODE
RVVRDCH  EQU   RVVRMODE
RVVRDNR  EQU   RVVRMODE
RVVRDR   EQU   RVVRMODE
RVVDUPID EQU   RVVI+57
RVVCPYID EQU   RVVI+56
RVVRDCSN EQU   RVVI+44
RVVRDSEQ EQU   RVVI+43
RVVBLNK1 EQU   RVVI+42
RVVCDATE EQU   RVVI+38
RVVEXPIR EQU   RVVI+36
RVVBUFLN EQU   RVVI+30
@NM00026 EQU   RVVI+28
RVVGROUP EQU   RVVI+14
RVVOLUME EQU   RVVI+8
@NM00025 EQU   RVVOPCOD+1
RVVCODE  EQU   RVVOPCOD
RVVLNGTH EQU   RVVI
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00024 EQU   JESCT
SSMOPRPN EQU   SSMO+24
SSMOPDDN EQU   SSMO+20
SSMORSV0 EQU   SSMO+3
@NM00023 EQU   SSMOFLG1
SSMOMNTD EQU   SSMOFLG1
SSMORUSE EQU   SSMOFLG1
SSMOSCR  EQU   SSMOFLG1
SSMOFINL EQU   SSMOFLG1
SSMOOPEN EQU   SSMOFLG1
SSOBSSIB EQU   SSOB+8
@NM00022 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00021 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00020 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00016 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00015 EQU   CVTFIX+248
@NM00014 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
RPLVBLN  EQU   RPLVSAM+52
@NM00013 EQU   RPLVSAM+44
RPLVUPD  EQU   RPLVOPT+1
@NM00012 EQU   RPLVOPT
RPLVKGE  EQU   RPLVOPT
@NM00011 EQU   RPLVOPT
RPLVNEXT EQU   RPLVOPT
RPLVDIR  EQU   RPLVOPT
RPLVLOC  EQU   RPLVOPT
RPLVKEY  EQU   RPLVSAM+36
RPLVBUF  EQU   RPLVSAM+32
@NM00010 EQU   RPLVSAM+28
RPLVACB  EQU   RPLVSAM+24
@NM00009 EQU   RPLVSAM+3
RPLVTYP  EQU   RPLVSAM+2
@NM00008 EQU   RPLVSAM
@NM00007 EQU   RPLV+42
RPLVDATE EQU   RPLV+38
RPLRMSCC EQU   RPLV+36
RPLVRES1 EQU   RPLFLAGA+1
RPLJRCVY EQU   RPLFLAGA
RPLVRSV3 EQU   RPLV+24
RPLVRSV2 EQU   RPLV+20
RPLVRSV1 EQU   RPLV+16
RPLVVICB EQU   RPLV+12
VVIUNUSD EQU   VVICB+116
VVINUSDC EQU   VVICB+112
VVITPFCH EQU   VVICB+108
VVIDVMEL EQU   VVICB+104
VVIVBSTF EQU   VVICB+100
VVISSOBA EQU   VVICB+96
VVIVSCRA EQU   VVICB+92
VVISTPTB EQU   VVICB+88
VVIDVMTA EQU   VVICB+84
VVIJUCB  EQU   VVICB+80
VVIIUCB  EQU   VVICB+76
VVIUCB   EQU   VVICB+60
VVIVJL   EQU   VVICB+56
VVIVRR   EQU   VVICB+52
VVIQLSPL EQU   VVICB+48
VVIVTRK  EQU   VVICB+37
VVIOPCD  EQU   VVICB+36
VVIVQMP  EQU   VVICB+32
VVICATAD EQU   VVICB+24
VVIDCBAD EQU   VVICB+20
VVIACBAD EQU   VVICB+16
VVIFLG7  EQU   VVIFLGA
VVIFLG6  EQU   VVIFLGA
VVIFLG5  EQU   VVIFLGA
VVIFLG4  EQU   VVIFLGA
VVIFLG3  EQU   VVIFLGA
VVIFLG1  EQU   VVIFLGA
VVIALCON EQU   VVICB+14
VVICPUID EQU   VVICB+12
VVICID   EQU   VVICB
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00006 EQU   ASVT
ICBLORD  EQU   ICBTRACE+256
ICBOTRC  EQU   ICBTRACE
ICBRESV  EQU   ICB2SSCB+128
ICBVOLST EQU   ICB2SSCB+124
ICBVSCRA EQU   ICB2SSCB+120
ICBSAMP  EQU   ICB2SSCB+118
ICBRESVD EQU   ICB2SSCB+117
ICBCPUID EQU   ICB2SSCB+112
ICBFAB   EQU   ICB2SSCB+108
ICBMSSC  EQU   ICB2SSCB+104
ICBRSVP  EQU   ICB2SSCB+100
ICBAEAP  EQU   ICB2SSCB+96
ICBSIOBP EQU   ICB2SSCB+92
ICBIATNA EQU   ICB2SSCB+88
ICBIPRGA EQU   ICB2SSCB+84
ICBSRBP  EQU   ICB2SSCB+80
ICBVVIC  EQU   ICB2SSCB+72
ICBSIOP  EQU   ICB2SSCB+68
ICBMEP   EQU   ICB2SSCB+64
ICBIORCI EQU   ICB2SSCB+60
ICB2ACTP EQU   ICB2SSCB+56
ICBFG3   EQU   ICBFLG+2
ICBFG2   EQU   ICBFLG+1
@NM00005 EQU   ICBFG1
ICBMSCA  EQU   ICBFG1
ICBMSCMP EQU   ICBFG1
ICBS     EQU   ICBFG1
ICBB     EQU   ICBFG1
ICBV     EQU   ICBFG1
ICBR     EQU   ICBFG1
ICBI     EQU   ICBFG1
ICBNVT   EQU   ICBOPT
ICBVN02P EQU   ICB2SSCB+44
ICBTCB   EQU   ICB2SSCB+40
ICBQHEAD EQU   ICB2SSCB+36
ICBAUCB  EQU   ICB2SSCB+32
ICBPUCB  EQU   ICB2SSCB+28
ICBCOMQ  EQU   ICB2SSCB+24
ICBIOR   EQU   ICB2SSCB+20
ICBCOM   EQU   ICB2SSCB+16
ICBACTV  EQU   ICB2SSCB+12
ICBECB   EQU   ICB2SSCB+8
ICBSSNAM EQU   ICB2SSCB
@NM00002 EQU   TCBCHAN+8
TCBSAVE  EQU   TCBCHAN+4
@NM00001 EQU   TCBCHAN
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00243 EQU   @RC00241
@RT00501 EQU   @EL00005
@RT00517 EQU   @EL00005
@RF00843 EQU   @EL00013
@RC00915 EQU   @RC00911
@RC00913 EQU   @RC00911
@RF00951 EQU   @RC00949
@ENDDATA EQU   *
         END   ICBVQM00,(C'PLS1958',0701,77354)
