         TITLE 'ICBVDR01 MSVC RECOVERY/JOURNAL UTILITY V1.0            *
                        '
ICBVDR01 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICBVDR01  78.157'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*                                                                  0198
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP ADDRESSABILITY AND INITIALIZE VARIABLES        @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0198
*   PARMPTR=LISTPTR;                /* SET EXEC PARM PTR     @Y30LB24*/
         L     PARMPTR,LISTPTR(,REG1)                              0198
*   VVIPTR=ICBVVICB;                /* INITIALIZE MSVC CB PTR      0199
*                                                            @Y30LB24*/
         L     @14,CVTPTR                                          0199
         L     @14,CVTEXT2(,@14)                                   0199
         L     @14,CVTICB(,@14)                                    0199
         L     @09,ICBVVICB(,@14)                                  0199
         ST    @09,VVIPTR                                          0199
*   OPENSW=OFF;                     /* INITIALIZE SWITCH     @Y30LB24*/
         NI    OPENSW,B'01111111'                                  0200
*   LINECNT=NEWPAGE;                /* FORCE FIRST PAGE      @Y30LB24*/
         MVC   LINECNT(4),@CF00130                                 0201
*   PAGECNT=ZERO;                   /* INITIALIZE PAGE NO    @Y30LB24*/
         SLR   @06,@06                                             0202
         ST    @06,PAGECNT                                         0202
*   REQCNT=ZERO;                    /* INITIALIZE REQUEST NO @Y30LB24*/
         SLR   REQCNT,REQCNT                                       0203
*   MSGCNT=ZERO;                    /* INITIALIZE MESSAGE CNT      0204
*                                                            @ZM31134*/
         ST    @06,MSGCNT                                          0204
*   FAILCODE=RCON0;                 /* INITIALIZE FAIL CODE  @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0205
*   TOTFCODE=RCON0;                 /* INITIALIZE FAIL CODE  @Y30LB24*/
         ST    @06,TOTFCODE                                        0206
*   RSAVE=ZERO;                     /* INIT REASON CODE      @Y30LB24*/
         ST    @06,RSAVE                                           0207
*   RETSAVE=ZERO;                   /* INIT RETURN CODE      @Y30LB24*/
         ST    @06,RETSAVE                                         0208
*                                                                  0209
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK TO SEE IF MSVC IS GENERATED IN SYSTEM           @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0209
*   IF CVTICB=ZERO×                 /* MSSC CB PTR ZERO?     @Y30LB24*/
*       ICBVVICB=ZERO THEN          /* MSVC CB PTR ZERO?     @Y30LB24*/
         CR    @14,@06                                             0209
         BE    @RT00209                                            0209
         CR    @09,@06                                             0209
         BNE   @RF00209                                            0209
@RT00209 DS    0H                                                  0210
*     DO;                           /* YES                   @Y30LB24*/
*       FAILCODE=NOCB;              /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,1                                          0211
*       CALL VDRNOTOP;              /* CALL MESSAGE ROUTINE  @Y30LB24*/
         BAL   @14,VDRNOTOP                                        0212
*       RETSAVE=FOUR;               /* SET RETURN CODE       @Y30LB24*/
         LA    @14,4                                               0213
         ST    @14,RETSAVE                                         0213
*       RETURN CODE(RETSAVE);       /* RETURN TO INITIATOR   @Y30LB24*/
         LR    @15,@14                                             0214
         L     @13,4(,@13)                                         0214
         L     @14,12(,@13)                                        0214
         LM    @00,@12,20(@13)                                     0214
         BR    @14                                                 0214
*     END;                          /*                       @Y30LB24*/
*                                                                  0215
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE ICBVDR01 PARAMETERS                         @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0216
*   IF PLENGTH^=ZERO THEN           /* EXEC PARM FIELD?      @Y30LB24*/
@RF00209 LH    @14,PLENGTH(,PARMPTR)                               0216
         LTR   @14,@14                                             0216
         BZ    @RF00216                                            0216
*     DO;                           /* YES                   @Y30LB24*/
*       REPLY='';                   /* BLANK WORK AREA       @Y30LB24*/
         MVI   REPLY,C' '                                          0218
         MVC   REPLY+1(99),REPLY                                   0218
*       REPLY=PARMS(1:PLENGTH);     /* MOVE EXEC PARMS       @Y30LB24*/
         MVI   REPLY+1,C' '                                        0219
         MVC   REPLY+2(98),REPLY+1                                 0219
         BCTR  @14,0                                               0219
         EX    @14,@SM02853                                        0219
*     END;                          /*                       @Y30LB24*/
*   ELSE                                                           0221
*     DO;                           /* NO PARM FIELD         @Y30LB24*/
         B     @RC00216                                            0221
@RF00216 DS    0H                                                  0222
*       CALL VDRCWTOR;              /* CALL WTOR ROUTINE     @Y30LB24*/
         BAL   @14,VDRCWTOR                                        0222
*     END;                          /*                       @Y30LB24*/
*   CALL VDRFTYPE;                  /* CALL TYPE ROUTINE     @Y30LB24*/
@RC00216 BAL   @14,VDRFTYPE                                        0224
*   DO WHILE FAILCODE=PARMERR;      /* GOOD REPLY?           @Y30LB24*/
         B     @DE00225                                            0225
@DL00225 DS    0H                                                  0226
*     CALL VDRNOTOP;                /* CALL MESSAGE ROUTINE  @Y30LB24*/
         BAL   @14,VDRNOTOP                                        0226
*     CALL VDRCWTOR;                /* CALL WTOR ROUTINE     @Y30LB24*/
         BAL   @14,VDRCWTOR                                        0227
*     CALL VDRFTYPE;                /* CALL TYPE ROUTINE     @Y30LB24*/
         BAL   @14,VDRFTYPE                                        0228
*   END;                            /*                       @Y30LB24*/
*                                                                  0229
@DE00225 C     FAILCODE,@CF00125                                   0229
         BE    @DL00225                                            0229
*   /*****************************************************************/
*   /*                                                               */
*   /* EXECUTE THE FUNCTIONS REQUESTED VIA PARAMETERS        @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0230
*   IF RECOVERY=ON THEN             /* RECOVERY REQUEST      @Y30LB24*/
         TM    RECOVERY,B'10000000'                                0230
         BNO   @RF00230                                            0230
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VDRRECVY;              /* CALL RECOVER ROUTINE  @Y30LB24*/
         BAL   @14,VDRRECVY                                        0232
*       PRINT=ON;                   /* SET PRINT FLAG        @Y30LB24*/
         OI    PRINT,B'10000000'                                   0233
*     END;                          /*                       @Y30LB24*/
*   IF BACKUP=ON THEN               /* BACKUP REQUEST        @Y30LB24*/
@RF00230 TM    BACKUP,B'10000000'                                  0235
         BNO   @RF00235                                            0235
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VDRBACUP;              /* CALL BACKUP ROUTINE   @Y30LB24*/
         BAL   @14,VDRBACUP                                        0237
*       CALL VDRPRINT;              /* CALL PRINT ROUTINE    @ZM31134*/
         BAL   @14,VDRPRINT                                        0238
*     END;                          /*                       @Y30LB24*/
*   IF PRINT=ON&                    /* PRINT REQUEST &       @Y30LB24*/
*       FAILCODE=ZERO THEN          /* NO OTHER FAILURE      @Y30LB24*/
@RF00235 TM    PRINT,B'10000000'                                   0240
         BNO   @RF00240                                            0240
         LTR   FAILCODE,FAILCODE                                   0240
         BNZ   @RF00240                                            0240
*     DO;                           /* YES                   @Y30LB24*/
*       CALL VDRPRINT;              /* CALL PRINT ROUTINE    @Y30LB24*/
         BAL   @14,VDRPRINT                                        0242
*     END;                          /*                       @Y30LB24*/
*                                                                  0243
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEANUP AND ISSUE ERROR MESSAGE IF FAILURE            @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0244
*   IF OPENSW=ON THEN               /* DATA SETS OPENED      @Y30LB24*/
@RF00240 TM    OPENSW,B'10000000'                                  0244
         BNO   @RF00244                                            0244
*     DO;                           /* YES                   @Y30LB24*/
*       DCBPTR=ADDR(JRNL);          /* REBASE DCB FOR JRNL   @ZM31052*/
         LA    @14,JRNL                                            0246
         ST    @14,DCBPTR                                          0246
*       IF DCBOFOPN=ON THEN         /* DCB OPEN FLAG ON?     @ZM31052*/
         TM    DCBOFOPN+40(@14),B'00010000'                        0247
         BNO   @RF00247                                            0247
*         DO;                       /* YES                   @ZM31052*/
*           REG0=ADDR(JRNL);        /* POINT TO JRNL DCB     @Y30LB24*/
         LR    REG0,@14                                            0249
*LCLOSE1:                                                          0250
*           GEN(CLOSE ((REG0),),MF=(E,CLSLST));/* CLOSE IT   @Y30LB24*/
LCLOSE1  CLOSE ((REG0),),MF=(E,CLSLST)
*         END;                      /*                       @ZM31052*/
*       DCBPTR=ADDR(PRINT);         /* REBASE DCB FOR PRINT  @ZM31052*/
@RF00247 LA    @14,PRINT                                           0252
         ST    @14,DCBPTR                                          0252
*       IF DCBOFOPN=ON THEN         /* DCB OPEN FLAG ON?     @ZM31052*/
         TM    DCBOFOPN+40(@14),B'00010000'                        0253
         BNO   @RF00253                                            0253
*         DO;                       /* YES                   @ZM31052*/
*           REG0=ADDR(PRINT);       /* POINT TO PRINT DCB    @Y30LB24*/
         LR    REG0,@14                                            0255
*LCLOSE2:                                                          0256
*           GEN(CLOSE ((REG0),),MF=(E,CLSLST));/* CLOSE IT   @Y30LB24*/
LCLOSE2  CLOSE ((REG0),),MF=(E,CLSLST)
*         END;                      /*                       @ZM31052*/
*     END;                          /*                       @Y30LB24*/
@RF00253 DS    0H                                                  0259
*   IF TOTFCODE^=ZERO THEN          /* FUNCTION SUCCESSFUL?  @Y30LB24*/
@RF00244 L     @14,TOTFCODE                                        0259
         LTR   @14,@14                                             0259
         BZ    @RF00259                                            0259
*     DO;                           /* NO                    @Y30LB24*/
*       CALL VDRNOTOP;              /* CALL MESSAGE ROUTINE  @Y30LB24*/
         BAL   @14,VDRNOTOP                                        0261
*       RETSAVE=FOUR;               /* SET RETURN CODE       @Y30LB24*/
         MVC   RETSAVE(4),@CF00058                                 0262
*     END;                          /*                       @Y30LB24*/
*   RETURN CODE(RETSAVE);           /* RETURN TO INITIATOR   @Y30LB24*/
@RF00259 L     @15,RETSAVE                                         0264
         L     @13,4(,@13)                                         0264
         L     @14,12(,@13)                                        0264
         LM    @00,@12,20(@13)                                     0264
         BR    @14                                                 0264
*                                                                  0265
*/* ******************************************************************
*                                                                  0265
*     NAME = VDRCWTOR,  WRITE TO OPERATOR FOR PARMS.           @Y30LB24
*                                                                  0265
*     INPUT = NONE.                                            @Y30LB24
*                                                                  0265
*     PROCESS = THIS SUBROUTINE IS CALLED WHEN PARMS HAVE NOT      0265
*     BEEN SPECIFIED ON THE EXEC JCL OR THE PARMS SPECIFIED        0265
*     ARE IN ERROR.                                            @Y30LB24
*                                                                  0265
*     OUTPUT = PARMS ARE READ VIA A WTOR COMMAND.              @Y30LB24
*                                                                  0265
******************************************************************** */
*/*VDRCWTOR: CHART                                                   */
*/*HEADER                                                          0265
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0265
*/*VDRCWTOR - WTOR FOR PARMS                                         */
*/*          E                    VDRCWTOR                           */
*/*          P                    CLEAR REPLY AREA                   */
*/*          P                    CLEAR ECB                          */
*/*          L                    ISSUE WTOR                         */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRCWTOR: END                                                     */
*                                                                  0265
*VDRCWTOR:                                                         0265
*   PROCEDURE OPTIONS(SAVE(14));                                   0265
@EL00001 L     @13,4(,@13)                                         0265
@EF00001 DS    0H                                                  0265
@ER00001 LM    @14,@12,12(@13)                                     0265
         BR    @14                                                 0265
VDRCWTOR ST    @14,@SA00002                                        0265
*   REPLY='';                       /* BLANK WORK AREA       @Y30LB24*/
         MVI   REPLY,C' '                                          0266
         MVC   REPLY+1(99),REPLY                                   0266
*   WTORECB=ZERO;                   /* CLEAR THE WTOR ECB    @Y30LB24*/
         SLR   @14,@14                                             0267
         ST    @14,WTORECB                                         0267
*   REG2=ADDR(REPLY);               /* SET REPLY ADDR        @Y30LB24*/
         LA    REG2,REPLY                                          0268
*   REG3=ADDR(WTORECB);             /* SET ECB ADDRESS       @Y30LB24*/
         LA    REG3,WTORECB                                        0269
*LWTOR1:                                                           0270
*   GEN REFS(REG2,REG3);                                           0270
LWTOR1   DS    0H                                                  0270
*                                         /* WTOR FOR PARMS   @Y30LB24*
         WTOR 'ICB436D ICBVDR01 PARMS REPLY (RECOVER,BACKUP,PRINT)',   *
               (REG2),N7,(REG3)
         WAIT ECB=WTORECB
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00002 DS    0H                                                  0271
@EF00002 DS    0H                                                  0271
@ER00002 L     @14,@SA00002                                        0271
         BR    @14                                                 0271
*   END VDRCWTOR;                   /* END WTOR PARMS        @Y30LB24*/
*                                                                  0273
*/* ******************************************************************
*                                                                  0273
*     NAME = VDRFTYPE,  DETERMINE TYPE OF JOURNAL UTILITY REQUESTED.
*                                                              @Y30LB24
*                                                                  0273
*     INPUT = JOURNAL UTILITY PARAMETERS FROM JCL OR A WTOR.   @Y30LB24
*                                                                  0273
*     PROCESS = THIS SUBROUTINE IS CALLED WHEN THE TYPE OF         0273
*     JOURNAL UTILITY MUST BE DETERMINED FOR ICBVDR01.         @Y30LB24
*                                                                  0273
*     OUTPUT = JOURNAL UTILITY TYPE FLAG AND/OR WORK FLAG TO INDICATE
*     THE SUCCESS OF THE SUBROUTINE.                           @Y30LB24
*                                                                  0273
******************************************************************** */
*/*VDRFTYPE: CHART                                                   */
*/*HEADER                                                          0273
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0273
*/*VDRFTYPE - DETERMINE JOURNAL UTILITY TYPE                         */
*/*          E                    VDRFTYPE                           */
*/*          M                    INITIALIZE VARIABLES               */
*/*          P                    SET PARMS UPPER CASE               */
*/*          D (YES,,NO,%BACK)    RECOVERY REQUESTED?                */
*/*          D (YES,,NO,%ERR)     PARMS VALID?                       */
*/*          M (,%END)            SET RECOVERY REQUEST FLAG          */
*/*%BACK:    D (YES,,NO,%PRT)     BACKUP REQUESTED?                  */
*/*          D (YES,,NO,%ERR)     PARMS VALID?                       */
*/*          M (,%END)            SET BACKUP REQUEST FLAG            */
*/*%PRT:     D (YES,,NO,%ERR)     PRINT REQUESTED?                   */
*/*          D (YES,,NO,%ERR)     PARMS VALID?                       */
*/*          M (,%END)            SET PRINT REQUEST FLAG             */
*/*%ERR:     M                    SET INVALID PARM CODE              */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRFTYPE: END                                                     */
*                                                                  0273
*VDRFTYPE:                                                         0273
*   PROCEDURE OPTIONS(SAVE(14));                                   0273
VDRFTYPE ST    @14,12(,@13)                                        0273
*   BACKUP=OFF;                     /* INITIALIZE SWITCH     @Y30LB24*/
         NI    BACKUP,B'01111111'                                  0274
*   PRINT=OFF;                      /* INITIALIZE SWITCH     @Y30LB24*/
         NI    PRINT,B'01111111'                                   0275
*   RECOVERY=OFF;                   /* INITIALIZE SWITCH     @Y30LB24*/
         NI    RECOVERY,B'01111111'                                0276
*   DO I=1 TO 7;                    /* UPPER CASE LOOP       @Y30LB24*/
         LA    I,1                                                 0277
@DL00277 DS    0H                                                  0278
*     CAPS(I)=CAPS(I)×BLANK;        /* SET UPPER CASE        @Y30LB24*/
         LA    @14,CAPS-1(I)                                       0278
         OC    0(1,@14),BLANK                                      0278
*   END;                            /*                       @Y30LB24*/
         AL    I,@CF00069                                          0279
         C     I,@CF00305                                          0279
         BNH   @DL00277                                            0279
*   FAILCODE=PARMERR;               /* INIT REASON CODE      @Y30LB24*/
         LA    FAILCODE,3                                          0280
*   IF REPLY(1:7)='RECOVER' THEN    /* RECOVERY?             @Y30LB24*/
         CLC   REPLY(7),@CC02416                                   0281
         BNE   @RF00281                                            0281
*     DO;                           /* YES                   @Y30LB24*/
*       RECOVERY=ON;                /* SET RECOVER FLAG      @Y30LB24*/
         OI    RECOVERY,B'10000000'                                0283
*       IF REPLY(8:8)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+7(1),BLANK                                    0284
         BNE   @RF00284                                            0284
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0285
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
@EL00003 DS    0H                                                  0286
@EF00003 DS    0H                                                  0286
@ER00003 L     @14,12(,@13)                                        0286
         BR    @14                                                 0286
*     END;                          /*                       @Y30LB24*/
*   IF REPLY(1:3)='REC' THEN        /* RECOVERY?             @Y30LB24*/
@RF00281 CLC   REPLY(3),@CC02417                                   0288
         BNE   @RF00288                                            0288
*     DO;                           /* YES                   @Y30LB24*/
*       RECOVERY=ON;                /* SET RECOVER FLAG      @Y30LB24*/
         OI    RECOVERY,B'10000000'                                0290
*       IF REPLY(4:4)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+3(1),BLANK                                    0291
         BNE   @RF00291                                            0291
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0292
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0293
*     END;                          /*                       @Y30LB24*/
*   IF REPLY(1:6)='BACKUP' THEN     /* BACKUP?               @Y30LB24*/
@RF00288 CLC   REPLY(6),@CC02418                                   0295
         BNE   @RF00295                                            0295
*     DO;                           /* YES                   @Y30LB24*/
*       BACKUP=ON;                  /* SET BACKUP FLAG       @Y30LB24*/
         OI    BACKUP,B'10000000'                                  0297
*       IF REPLY(7:7)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+6(1),BLANK                                    0298
         BNE   @RF00298                                            0298
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0299
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0300
*     END;                          /*                       @Y30LB24*/
*   IF REPLY(1:3)='BAC' THEN        /* BACKUP?               @Y30LB24*/
@RF00295 CLC   REPLY(3),@CC02419                                   0302
         BNE   @RF00302                                            0302
*     DO;                           /* YES                   @Y30LB24*/
*       BACKUP=ON;                  /* SET BACKUP FLAG       @Y30LB24*/
         OI    BACKUP,B'10000000'                                  0304
*       IF REPLY(4:4)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+3(1),BLANK                                    0305
         BNE   @RF00305                                            0305
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0306
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0307
*     END;                          /*                       @Y30LB24*/
*   IF REPLY(1:5)='PRINT' THEN      /* PRINT?                @Y30LB24*/
@RF00302 CLC   REPLY(5),@CC02420                                   0309
         BNE   @RF00309                                            0309
*     DO;                           /* YES                   @Y30LB24*/
*       PRINT=ON;                   /* SET PRINT FLAG        @Y30LB24*/
         OI    PRINT,B'10000000'                                   0311
*       IF REPLY(6:6)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+5(1),BLANK                                    0312
         BNE   @RF00312                                            0312
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0313
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0314
*     END;                          /*                       @Y30LB24*/
*   IF REPLY(1:3)='PRT' THEN        /* PRINT?                @Y30LB24*/
@RF00309 CLC   REPLY(3),@CC02421                                   0316
         BNE   @RF00316                                            0316
*     DO;                           /* YES                   @Y30LB24*/
*       PRINT=ON;                   /* SET PRINT FLAG        @Y30LB24*/
         OI    PRINT,B'10000000'                                   0318
*       IF REPLY(4:4)=BLANK THEN    /* NO MORE PARMS         @Y30LB24*/
         CLC   REPLY+3(1),BLANK                                    0319
         BNE   @RF00319                                            0319
*         FAILCODE=ZERO;            /* SET VALID PARMS       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0320
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0321
*     END;                          /*                       @Y30LB24*/
*   FAILCODE=PARMERR;               /* SET INVALID PARM      @Y30LB24*/
@RF00316 LA    FAILCODE,3                                          0323
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00003                                            0324
*   END VDRFTYPE;                   /* END DETERMINE TYPE    @Y30LB24*/
         B     @EL00003                                            0325
*                                                                  0326
*/* ******************************************************************
*                                                                  0326
*     NAME = VDRNOTOP, SYSTEM OPERATOR COMMUNICATION           @Y30LB24
*                                                                  0326
*     INPUT = INTERNAL WORK FLAG INDICATING THE TYPE OF PROCESSING 0326
*     ERROR THAT HAS OCCURRED.                                 @Y30LB24
*                                                                  0326
*     PROCESS = INFORM SYSTEM OPERATOR OF THE TYPE OF PROCESSING ERROR.
*                                                              @Y30LB24
*                                                                  0326
*     OUTPUT = INFORMATIONAL MESSAGE TO BE CONVEYED TO THE OPERATOR.
*                                                              @Y30LB24
*                                                                  0326
******************************************************************** */
*/*VDRNOTOP: CHART                                                   */
*/*HEADER                                                          0326
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0326
*/*VDRNOTOP -  OPERATOR COMMUNCATION                                 */
*/*          E                    VDRNOTOP                           */
*/*          P                    RETRIEVE MESSAGE                   */
*/*          I                    ISSUE WTO WITH ERROR MESSAGE       */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRNOTOP: END                                                     */
*                                                                  0326
*VDRNOTOP:                                                         0326
*   PROCEDURE OPTIONS(SAVE(14));                                   0326
VDRNOTOP ST    @14,@SA00004                                        0326
*   IF FAILCODE=NOCB THEN           /* CB ERROR MSG?         @Y30LB24*/
         C     FAILCODE,@CF00069                                   0327
         BNE   @RF00327                                            0327
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(MSG1);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG1                                           0329
*     END;                          /*                       @Y30LB24*/
*   IF FAILCODE=TASKERR THEN        /* TASK ERR MSG?         @Y30LB24*/
@RF00327 C     FAILCODE,@CF00067                                   0331
         BNE   @RF00331                                            0331
*     DO;                           /* YES                   @Y30LB24*/
*       WORK2(1:4)=RCHAR;           /* MOVE REASON CODE      @Y30LB24*/
         MVC   WORK2(4),RCHAR                                      0333
*       WORK2(5:5)=SIGN;            /* MOVE PACK SIGN        @Y30LB24*/
         MVC   WORK2+4(1),SIGN                                     0334
*       GEN(UNPK  WORK1(N5),WORK2+N2(N3));/* UNPK            @Y30LB24*/
         UNPK  WORK1(N5),WORK2+N2(N3)
*       GEN(TR    WORK1(N4),TRANS-N240);/* TRANSLATE         @Y30LB24*/
         TR    WORK1(N4),TRANS-N240
*       MSG2(52:55)=WORK1(1:4);     /* MOVE CODE             @Y30LB24*/
         MVC   MSG2+51(4),WORK1                                    0337
*       REG1=ADDR(MSG2);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG2                                           0338
*     END;                          /*                       @Y30LB24*/
*   IF FAILCODE=PARMERR THEN        /* PARAMETER ERR?        @Y30LB24*/
@RF00331 C     FAILCODE,@CF00125                                   0340
         BNE   @RF00340                                            0340
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(MSG3);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG3                                           0342
*     END;                          /*                       @Y30LB24*/
*   IF FAILCODE=CONTERR THEN        /* CONTROL REC ERR       @Y30LB24*/
@RF00340 C     FAILCODE,@CF00058                                   0344
         BNE   @RF00344                                            0344
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(MSG4);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG4                                           0346
*     END;                          /*                       @Y30LB24*/
*   IF FAILCODE=DATAERR THEN        /* DATA RECORD ERR       @Y30LB24*/
@RF00344 C     FAILCODE,@CF00079                                   0348
         BNE   @RF00348                                            0348
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(MSG5);            /* SET UP REG 1          @Y30LB24*/
         LA    REG1,MSG5                                           0350
*     END;                          /*                       @Y30LB24*/
*LWTO1:                                                            0352
*   GEN(WTO MF=(E,(REG1)));         /* SEND ERROR MSG        @Y30LB24*/
@RF00348 DS    0H                                                  0352
LWTO1    WTO MF=(E,(REG1))
*   END VDRNOTOP;                   /* END OPER COMM.        @Y30LB24*/
@EL00004 DS    0H                                                  0353
@EF00004 DS    0H                                                  0353
@ER00004 L     @14,@SA00004                                        0353
         BR    @14                                                 0353
*                                                                  0354
*/* ******************************************************************
*                                                                  0354
*     NAME = VDRRECVY, RECOVER MSVC INVENTORY FROM JOURNAL     @Y30LB24
*                                                                  0354
*     INPUT = NONE.                                            @Y30LB24
*                                                                  0354
*     PROCESS = MSVC REQUESTS ARE CREATED FROM A CURRENT JOURNAL AND
*     ARE ISSUED AS RECOVERY REQUESTS TO UPDATE A DOWN LEVEL MSVC  0354
*     INVENTORY.                                               @Y30LB24
*                                                                  0354
*     OUTPUT = AN UPDATED MSVC INVENTORY                       @Y30LB24
*                                                                  0354
******************************************************************** */
*/*VDRRECVY: CHART                                                   */
*/*HEADER                                                          0354
*/*MAY 5, 1975                                  ICBVDR01 - SEGMENT 0354
*/*VDRRECVY - RECOVER INVENTORY FROM JOURNAL                         */
*/*          E                    VDRRECVY                           */
*/*          D (NO,,YES,%NXT)     MSVC DISABLED?                     */
*/*          P (,%RET)            SET ERROR FLAGS                    */
*/*%NXT:     S                    VDRDINIT: INIT DATA SETS           */
*/*          D (YES,,NO,%RET)     SUCCESSFUL TO THIS POINT           */
*/*          S                    VDRDJRNL: DISABLE JOURNAL          */
*/*          D (NO,,YES,%END)     ANY ERRORS                         */
*/*          S                    VDRCONRD: READ JRNL CONTROL RECORD */
*/*          D (NO,,YES,%END)     ANY ERRORS                         */
*/*          S                    VDRUPDAT: RECOVERY BUILD RTN       */
*/*%END:     S                    VDRRMSVC: DISABLE MSVC             */
*/*%RET:     R                    RETURN TO CALLER                   */
*/*VDRRECVY: END                                                     */
*                                                                  0354
*VDRRECVY:                                                         0354
*   PROCEDURE OPTIONS(SAVE(14));                                   0354
VDRRECVY ST    @14,@SA00005                                        0354
*   IF VVIFLG0=OFF THEN             /* TOTAL DISABLE         @Y30LB24*/
         L     @14,VVIPTR                                          0355
         TM    VVIFLG0(@14),B'10000000'                            0355
         BNZ   @RF00355                                            0355
*     DO;                           /* NO                    @Y30LB24*/
*       RSAVE=ENABL;                /* REASON CODE (207)     @Y30LB24*/
         MVC   RSAVE(4),@CF00120                                   0357
*       FAILCODE=TASKERR;           /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,2                                          0358
*       TOTFCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         MVC   TOTFCODE(4),@CF00058                                0359
*       RETURN;                     /* RETURN TO ICBVDR01    @Y30LB24*/
@EL00005 DS    0H                                                  0360
@EF00005 DS    0H                                                  0360
@ER00005 L     @14,@SA00005                                        0360
         BR    @14                                                 0360
*     END;                          /*                       @Y30LB24*/
*   CALL VDRDINIT;                  /* CALL INIT ROUTINE     @Y30LB24*/
@RF00355 BAL   @14,VDRDINIT                                        0362
*   IF FAILCODE^=ZERO THEN          /* IF ERRORS             @ZM31052*/
         LTR   FAILCODE,FAILCODE                                   0363
         BNZ   @RT00363                                            0363
*     RETURN;                       /* RETURN                @ZM31052*/
*   CALL VDRDJRNL;                  /* CALL JRNL DISABLE     @Y30LB24*/
         BAL   @14,VDRDJRNL                                        0365
*   IF FAILCODE=ZERO THEN           /* IF NO ERRORS          @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0366
         BNZ   @RF00366                                            0366
*     DO;                           /* NO                    @Y30LB24*/
*       READSW=ON;                  /* SET READ SW           @Y30LB24*/
         OI    READSW,B'10000000'                                  0368
*       CALL VDRCONRD;              /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0369
*     END;                          /*                       @Y30LB24*/
*   IF FAILCODE=ZERO THEN           /* IF NO ERRORS          @Y30LB24*/
@RF00366 LTR   FAILCODE,FAILCODE                                   0371
         BNZ   @RF00371                                            0371
*     CALL VDRUPDAT;                /* CALL RECOVERY BUILD   @Y30LB24*/
         BAL   @14,VDRUPDAT                                        0372
*   RDISABLE=ON;                    /* SET DISABLE SWITCH    @Y30LB24*/
@RF00371 OI    RDISABLE,B'10000000'                                0373
*   CALL VDRRMSVC;                  /* CALL MSVC RESTORE     @Y30LB24*/
         BAL   @14,VDRRMSVC                                        0374
*   END VDRRECVY;                   /* END RECOVERY REQ      @Y30LB24*/
         B     @EL00005                                            0375
*                                                                  0376
*/* ******************************************************************
*                                                                  0376
*     NAME = VDRUPDAT, UPDATE MSVI INVENTORY FROM JRNL REQUEST @Y30LB24
*                                                                  0376
*     INPUT = JOURNAL CONTROL RECORD.                          @Y30LB24
*                                                                  0376
*     PROCESS = THE JOURNAL REQUEST DATA RECORDS ARE READ, RECOVERY
*     REQUESTS ARE BUILT AND ISSUED TO UPDATE A DOWN LEVEL INVENTORY
*                                                              @Y30LB24
*                                                                  0376
*     OUTPUT = AN UPDATED MSVC INVENTORY                       @Y30LB24
*                                                                  0376
******************************************************************** */
*/*VDRUPDAT: CHART                                                   */
*/*HEADER                                                          0376
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0376
*/*VDRUPDAT - BUILD RECOVERY REQUESTS                                */
*/*          E                    VDRUPDAT                           */
*/*          P                    SAVE DATA START AND END            */
*/*%DATA:    D (NO,,YES,%END)     ALL DATA PROCESSED                 */
*/*          S                    VDRRDATA: READ DATA RECORD         */
*/*          P                    BUILD RECOVERY REQUESTS            */
*/*          L                    ISSUE MSSC-SVC                     */
*/*          D (NO,,YES,%DATA)    GOOD COMPLETION                    */
*/*          S                    VDRERRWT: PRINT ERROR INFO         */
*/*          P (,%DATA)           SET ERROR RETURN                   */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRUPDAT: END                                                     */
*                                                                  0376
*VDRUPDAT:                                                         0376
*   PROCEDURE OPTIONS(SAVE(14));                                   0376
VDRUPDAT ST    @14,@SA00006                                        0376
*   REQTTR=ZERO;                    /* ZERO TTR              @Y30LB24*/
         SLR   @14,@14                                             0377
         ST    @14,REQTTR                                          0377
*   REQR=TWO;                       /* SET FIRST DATA TTR    @Y30LB24*/
         MVI   REQR,X'02'                                          0378
*   LIMITTTR=ORDRTTR;               /* SET LIMIT TTR         @Y30LB24*/
         L     @09,ORDRTTR                                         0379
         ST    @09,LIMITTTR                                        0379
*   REQREM=ORDRREM;                 /* SET BYTES REMAINING   @Y30LB24*/
         LH    @09,ORDRREM                                         0380
         STH   @09,REQREM                                          0380
*   QUEPTR=ZERO;                    /* ZERO DEMOUNT QUEUE    @G24LB23*/
         ST    @14,QUEPTR                                          0381
*   REQRPT=CONTRPT;                 /* SET REC PER TRACK     @Y30LB24
*                                      POINTER               @G24LB23*/
         LH    @14,CONTRPT                                         0382
         ST    @14,REQRPT                                          0382
*   QUEELEMS=(QUESIZ-LENGTH(DEMQUE))/LENGTH(ELEMENT(1));/* MAX     0383
*                                      ELEMENTS PER QUEUE    @G24LB23*/
*                                                                  0383
         MVC   QUEELEMS(2),@CH02847                                0383
*   /*****************************************************************/
*   /*                                                               */
*   /* READ AND RECOVER ALL JOURNALLED REQUESTS              @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0384
*   DO UNTIL LIMITTTR<REQTTR;       /* LOOP UNTIL DONE       @Y30LB24*/
@DL00384 DS    0H                                                  0385
*     IF LIMITTTR=REQTTR&           /* LAST TRACK &          @Y30LB24*/
*         REQREM=MAXREC THEN        /* NOT USED              @Y30LB24*/
         CLC   LIMITTTR(4),REQTTR                                  0385
         BNE   @RF00385                                            0385
         CLC   REQREM(2),@CH00128                                  0385
         BNE   @RF00385                                            0385
*       DO;                         /* YES                   @Y30LB24*/
*         RETURN;                   /* RETURN TO CALLER      @Y30LB24*/
@EL00006 DS    0H                                                  0387
@EF00006 DS    0H                                                  0387
@ER00006 L     @14,@SA00006                                        0387
         BR    @14                                                 0387
*       END;                        /*                       @Y30LB24*/
*     JRNLPTR=ADDR(DATAREC);        /* SET REQ START         @ZM31134*/
@RF00385 LA    @14,DATAREC                                         0389
         ST    @14,JRNLPTR                                         0389
*     JRNLLEN=ZERO;                 /* SET NULL START        @ZM31134*/
         SLR   @09,@09                                             0390
         ST    @09,JRNLLEN(,@14)                                   0390
*     CALL VDRRDATA;                /* CALL JRNL READ RTN    @Y30LB24*/
*                                                                  0391
         BAL   @14,VDRRDATA                                        0391
*     /***************************************************************/
*     /*                                                             */
*     /* RECOVER ALL JOURNALLED REQUESTS                     @Y30LB24*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0392
*     DO WHILE JRNLLEN^=ZERO;       /* LOOP UNTIL DONE       @Y30LB24*/
         B     @DE00392                                            0392
@DL00392 DS    0H                                                  0393
*       REQCNT=REQCNT+ONE;          /* INCRE REQCNT          @Y30LB24*/
*                                                                  0393
         AL    REQCNT,@CF00069                                     0393
*       /*************************************************************/
*       /*                                                           */
*       /* IF DEMOUNT REQUEST, QUEUE THE REQUEST FOR         @G24LB23*/
*       /* LATER PROCESSING. OTHERWISE, PROCESS THE          @G24LB23*/
*       /* REQUEST NOW.                                      @G24LB23*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0394
*       IF UTILOP(1:1)=DEMOUNT THEN /*                       @G24LB23*/
         L     @14,JRNLPTR                                         0394
         CLI   UTILOP(@14),X'06'                                   0394
         BNE   @RF00394                                            0394
*         DO;                       /*                       @G24LB23*/
*           TEMPPTR=QUEPTR;         /*                       @G24LB23*/
         L     TEMPPTR,QUEPTR                                      0396
*           GETMSW=ON;              /*                       @G24LB23*/
         OI    GETMSW,B'10000000'                                  0397
*           TEMPCHN=ADDR(QUEPTR);   /*                       @G24LB23*/
*                                                                  0398
         LA    TEMPCHN,QUEPTR                                      0398
*           /*********************************************************/
*           /*                                                       */
*           /* TEST FOR A QUEUE TO SEARCH                    @G24LB23*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0399
*           DO WHILE TEMPPTR^=ZERO&GETMSW=ON;/*              @G24LB23*/
*                                                                  0399
         B     @DE00399                                            0399
@DL00399 DS    0H                                                  0400
*             /*******************************************************/
*             /*                                                     */
*             /* TEST FOR VOLUME ALREADY IN QUEUE            @G24LB23*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0400
*             DO I=ONE TO ELEMCNT WHILE GETMSW=ON;/*         @G24LB23*/
         LA    I,1                                                 0400
         B     @DE00400                                            0400
@DL00400 TM    GETMSW,B'10000000'                                  0400
         BNO   @DC00400                                            0400
*               IF ADDR(JRNLUTIL)->DMVOL=ADDR(REQST(I))->DMVOL THEN/*
*                                                            @G24LB23*/
*                                                                  0401
         L     @14,JRNLPTR                                         0401
         LR    @06,I                                               0401
         MH    @06,@CH00089                                        0401
         LR    @05,TEMPPTR                                         0401
         AL    @05,@CF02856                                        0401
         LA    @05,REQST-10(@06,@05)                               0401
         CLC   DMVOL+12(6,@14),DMVOL(@05)                          0401
         BNE   @RF00401                                            0401
*                 /***************************************************/
*                 /*                                                 */
*                 /* OVERLAY VOLUME INFORMATION              @G24LB23*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0402
*                 DO;               /*                       @G24LB23*/
*                   GETMSW=OFF;     /*                       @G24LB23*/
         NI    GETMSW,B'01111111'                                  0403
*                   REQST(I)=JRNLUTIL(1:LENGTH(REQST(I)));/* @G24LB23*/
         ST    @06,@TF00001                                        0404
         ALR   @06,TEMPPTR                                         0404
         AL    @06,@CF02856                                        0404
         MVC   REQST-10(18,@06),JRNLUTIL(@14)                      0404
*                   REQSTNO(I)=REQCNT;/*                     @G24LB23*/
         LR    @14,TEMPPTR                                         0405
         AL    @14,@TF00001                                        0405
         AL    @14,@CF02857                                        0405
         STCM  REQCNT,15,REQSTNO-6(@14)                            0405
*                 END;              /*                       @G24LB23*/
*             END;                  /*                       @G24LB23*/
*                                                                  0407
@RF00401 AL    I,@CF00069                                          0407
@DE00400 CH    I,ELEMCNT(,TEMPPTR)                                 0407
         BNH   @DL00400                                            0407
@DC00400 DS    0H                                                  0408
*             /*******************************************************/
*             /*                                                     */
*             /* TEST FOR WHETHER ELEMENT SHOULD BE ADDED    @G24LB23*/
*             /* TO THE QUEUE                                @G24LB23*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0408
*             IF GETMSW=ON&I<=QUEELEMS THEN/*                @G24LB23*/
*                                                                  0408
         TM    GETMSW,B'10000000'                                  0408
         BNO   @RF00408                                            0408
         CH    I,QUEELEMS                                          0408
         BH    @RF00408                                            0408
*               /*****************************************************/
*               /*                                                   */
*               /* ADD VOLUME INFORMATION TO QUEUE           @G24LB23*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0409
*               DO;                 /*                       @G24LB23*/
*                 GETMSW=OFF;       /*                       @G24LB23*/
         NI    GETMSW,B'01111111'                                  0410
*                 REQST(I)=JRNLUTIL(1:LENGTH(REQST(I)));/*   @G24LB23*/
         LR    @14,I                                               0411
         MH    @14,@CH00089                                        0411
         ST    @14,@TF00001                                        0411
         ALR   @14,TEMPPTR                                         0411
         AL    @14,@CF02856                                        0411
         L     @06,JRNLPTR                                         0411
         MVC   REQST-10(18,@14),JRNLUTIL(@06)                      0411
*                 REQSTNO(I)=REQCNT;/*                       @G24LB23*/
         LR    @14,TEMPPTR                                         0412
         AL    @14,@TF00001                                        0412
         AL    @14,@CF02857                                        0412
         STCM  REQCNT,15,REQSTNO-6(@14)                            0412
*                 ELEMCNT=I;        /*                       @G24LB23*/
         STH   I,ELEMCNT(,TEMPPTR)                                 0413
*               END;                /*                       @G24LB23*/
*             TEMPCHN=TEMPPTR;      /*                       @G24LB23*/
@RF00408 LR    TEMPCHN,TEMPPTR                                     0415
*             TEMPPTR=NQUEPTR;      /*                       @G24LB23*/
         L     TEMPPTR,NQUEPTR(,TEMPPTR)                           0416
*           END;                    /*                       @G24LB23*/
*                                                                  0417
@DE00399 LTR   TEMPPTR,TEMPPTR                                     0417
         BZ    @DC00399                                            0417
         TM    GETMSW,B'10000000'                                  0417
         BO    @DL00399                                            0417
@DC00399 DS    0H                                                  0418
*           /*********************************************************/
*           /*                                                       */
*           /* GETMAIN OF A QUEUE AREA REQUIRED?             @G24LB23*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0418
*           IF GETMSW=ON THEN       /*                       @G24LB23*/
         TM    GETMSW,B'10000000'                                  0418
         BNO   @RF00418                                            0418
*             DO;                   /*                       @G24LB23*/
*               REG2=QUESIZ;        /*                       @G24LB23*/
         L     REG2,@CF00097                                       0420
*               REG3=TEMPCHN;       /*                       @G24LB23*/
         LR    REG3,TEMPCHN                                        0421
*LGETM1:                                                           0422
*               GEN(GETMAIN EU,LV=(REG2),A=(REG3),BNDRY=PAGE);     0422
*                                                                  0422
LGETM1   GETMAIN EU,LV=(REG2),A=(REG3),BNDRY=PAGE
*               /*****************************************************/
*               /*                                                   */
*               /* ADD VOLUME INFORMATION TO NEW QUEUE       @G24LB23*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0423
*               TEMPPTR=TEMPCHN->NQUEPTR;/*                  @G24LB23*/
         L     TEMPPTR,NQUEPTR(,TEMPCHN)                           0423
*               REQST(ONE)=JRNLUTIL(1:LENGTH(REQST(ONE)));/* @G24LB23*/
         L     @14,JRNLPTR                                         0424
         MVC   REQST(18,TEMPPTR),JRNLUTIL(@14)                     0424
*               REQSTNO(ONE)=REQCNT;/*                       @G24LB23*/
         STCM  REQCNT,15,REQSTNO(TEMPPTR)                          0425
*               ELEMCNT=ONE;        /*                       @G24LB23*/
         MVC   ELEMCNT(2,TEMPPTR),@CH00069                         0426
*               NQUEPTR=ZERO;       /*                       @G24LB23*/
         SLR   @14,@14                                             0427
         ST    @14,NQUEPTR(,TEMPPTR)                               0427
*             END;                  /*                       @G24LB23*/
*         END;                      /*                       @G24LB23*/
*       ELSE                        /*                       @G24LB23*/
*                                                                  0430
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS THE REQUEST NOW                         @G24LB23*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0430
*         DO;                       /*                       @G24LB23*/
         B     @RC00394                                            0430
@RF00394 DS    0H                                                  0431
*           RPLV=''B;               /* ZERO RPLV             @Y30LB24*/
         L     @14,RPLVPTR                                         0431
         XC    RPLV(132,@14),RPLV(@14)                             0431
*           RECPLEN=LENGTH(RPLV);   /* SET RPLV LENGTH       @Y30LB24*/
         MVC   RECPLEN(4,@14),@CF02848                             0432
*           ROPCODE=RECOVER;        /* SET REC OPCODE        @Y30LB24*/
         MVI   ROPCODE(@14),X'8F'                                  0433
*           RPLJRCVY=ON;            /* SET RECOVERY FLG      @Y30LB24*/
         OI    RPLJRCVY(@14),B'00000010'                           0434
*           IF JRNLFTIM=ON THEN     /* CALL FLAG ON          @Y30LB24*/
         L     @09,JRNLPTR                                         0435
         TM    JRNLFTIM(@09),B'10000000'                           0435
         BNO   @RF00435                                            0435
*             RPLFTIME=ON;          /* SET RPLV FLAG         @Y30LB24*/
         OI    RPLFTIME(@14),B'10000000'                           0436
*           RPLVTLEN=LENGTH(RPLV)+JRNLLEN;/* SET TOT LEN     @ZM30723*/
@RF00435 L     @14,RPLVPTR                                         0437
         L     @09,JRNLPTR                                         0437
         L     @05,JRNLLEN(,@09)                                   0437
         LA    @07,132                                             0437
         ALR   @07,@05                                             0437
         STH   @07,RPLVTLEN(,@14)                                  0437
*           RPLRCODE=JRNLCODE;      /* SET REASON CODE       @ZM30723*/
         MVC   RPLRCODE(2,@14),JRNLCODE(@09)                       0438
*           RPLVRETC=JRNLCODE;      /* SET RETURN CODE       @ZM30723*/
         MVC   RPLVRETC(2,@14),JRNLCODE(@09)                       0439
*           REG0=ADDR(RPLVUTIL);    /* SET RPLV PTR          @Y30LB24*/
         LA    REG0,RPLVUTIL(,@14)                                 0440
*           REG1=JRNLLEN;           /* SET MOVE LENGTH       @ZM30723*/
*                                                                  0441
         LR    REG1,@05                                            0441
*           /*********************************************************/
*           /*                                                       */
*           /* CHECK TYPE OF JOURNALLED ENTRY BEING PROCESSED,       */
*           /*                                               @ZA13484*/
*           /* OLD WITH NO DATE OR NEW WITH A DATE.          @ZA13484*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0442
*           IF JRNLDTFG=ON THEN                                    0442
         TM    JRNLDTFG(@09),B'01000000'                           0442
         BNO   @RF00442                                            0442
*             DO;                   /*                       @ZA13484*/
*               REG2=ADDR(JRNLUTIL);/* SET MOVE PTR NEW      @ZA13484*/
         LA    REG2,JRNLUTIL(,@09)                                 0444
*               RPLVDATE=JRNLDATE;  /* DATE RPLV CREATED     @ZA13484*/
         MVC   RPLVDATE(4,@14),JRNLDATE(@09)                       0445
*             END;                  /*                       @ZA13484*/
*           ELSE                                                   0447
*             REG2=ADDR(JRNLUTIO);  /* SET MOVE PTR          @Y30LB24*/
         B     @RC00442                                            0447
@RF00442 L     REG2,JRNLPTR                                        0447
         LA    REG2,JRNLUTIO(,REG2)                                0447
*           REG3=REG1;              /* SET MOVE LENGTH       @Y30LB24*/
@RC00442 LR    REG3,REG1                                           0448
*           GEN(MVCL REG0,REG2);    /* MOVE PARMS            @Y30LB24*/
         MVCL REG0,REG2
*           REG1=RPLVPTR;           /* SET PARM REG          @Y30LB24*/
         L     REG1,RPLVPTR                                        0450
*LMSSC1:                                                           0451
*           SVC(126);               /* INVOKE SVC 126 ISSUE SVC MACRO
*                                                            @Y30LB24*/
LMSSC1   SVC   126                                                 0451
*           IF REG15^=ZERO THEN     /* FUNCTION SUCCESSFUL?  @Y30LB24*/
         LTR   REG15,REG15                                         0452
         BZ    @RF00452                                            0452
*             DO;                   /* NO                    @Y30LB24*/
*               RSAVE=REG0;         /* SAVE REASON CODE      @Y30LB24*/
         ST    REG0,RSAVE                                          0454
*               RETSAVE=FOUR;       /* SET RETURN CODE       @Y30LB24*/
         MVC   RETSAVE(4),@CF00058                                 0455
*               CALL VDRERRWT;      /* CALL ERROR PRINT      @Y30LB24*/
         BAL   @14,VDRERRWT                                        0456
*             END;                  /*                       @Y30LB24*/
*         END;                      /*                       @G24LB23*/
@RF00452 DS    0H                                                  0459
*       JRNLPTR=JRNLPTR+JRNLLEN;    /* SET NEXT START        @Y30LB24*/
@RC00394 L     @14,JRNLPTR                                         0459
         LR    @09,@14                                             0459
         AL    @09,JRNLLEN(,@14)                                   0459
         ST    @09,JRNLPTR                                         0459
*     END;                          /* END PRINT LOOP        @Y30LB24*/
@DE00392 SLR   @14,@14                                             0460
         L     @09,JRNLPTR                                         0460
         C     @14,JRNLLEN(,@09)                                   0460
         BNE   @DL00392                                            0460
*     REQR=REQR+ONE;                /* INCREMENT COUNT       @Y30LB24*/
         LA    @09,1                                               0461
         SLR   @05,@05                                             0461
         IC    @05,REQR                                            0461
         ALR   @05,@09                                             0461
         STC   @05,REQR                                            0461
*     IF REQRPT^=ZERO&              /* TRACK SWITCH REQ      @Y30LB24*/
*         REQRPT<REQR THEN          /* TRACK SWITCH REQ      @Y30LB24*/
         L     @07,REQRPT                                          0462
         CR    @07,@14                                             0462
         BE    @RF00462                                            0462
         CR    @07,@05                                             0462
         BNL   @RF00462                                            0462
*       DO;                         /* YES                   @Y30LB24*/
*         REQR=ONE;                 /* RECORD ONE            @Y30LB24*/
         MVI   REQR,X'01'                                          0464
*         REQTT=REQTT+ONE;          /* INCRE COUNT           @Y30LB24*/
         AH    @09,REQTT                                           0465
         STH   @09,REQTT                                           0465
*       END;                        /*                       @Y30LB24*/
*   END;                            /* END READ LOOP         @Y30LB24*/
*                                                                  0467
@RF00462 DS    0H                                                  0467
@DE00384 CLC   LIMITTTR(4),REQTTR                                  0467
         BNL   @DL00384                                            0467
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS QUEUED DEMOUNT REQUESTS                       @G24LB23*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0468
*   TEMPPTR=QUEPTR;                 /* FIRST QUEUE           @G24LB23*/
         L     TEMPPTR,QUEPTR                                      0468
*   DO WHILE TEMPPTR^=ZERO;         /* PROCESS WHILE QUEUE   @G24LB23
*                                      EXISTS                @G24LB23*/
         B     @DE00469                                            0469
@DL00469 DS    0H                                                  0470
*     DO I=ONE TO ELEMCNT;          /* PROCESS EACH ELEMENT  @G24LB23
*                                      IN QUEUE              @G24LB23*/
         LA    I,1                                                 0470
         B     @DE00470                                            0470
@DL00470 DS    0H                                                  0471
*       RPLV=''B;                   /* ZERO RPLV             @G24LB23*/
         L     @14,RPLVPTR                                         0471
         XC    RPLV(132,@14),RPLV(@14)                             0471
*       RECPLEN=LENGTH(RPLV);       /* SET RPLV LENGTH       @G24LB23*/
         MVC   RECPLEN(4,@14),@CF02848                             0472
*       ROPCODE=RECOVER;            /* SET RECOVERY OPCODE   @G24LB23*/
         MVI   ROPCODE(@14),X'8F'                                  0473
*       RPLJRCVY=ON;                /* RECOVERY FLAG         @G24LB23*/
*       RPLFTIME=ON;                /* SECOND CALL           @G24LB23*/
         OI    RPLJRCVY(@14),B'10000010'                           0475
*       RPLVTLEN=LENGTH(RPLV)+LENGTH(REQST(I));/* SET LENGTH @G24LB23*/
         MVC   RPLVTLEN(2,@14),@CH02849                            0476
*       RPLVUTIL(1:LENGTH(DMLST))=''B;/* ZERO AN ENTIRE      @G24LB23
*                                      DEMOUNT LIST          @G24LB23*/
         XC    RPLVUTIL(28,@14),RPLVUTIL(@14)                      0477
*       REG0=ADDR(RPLVUTIL);        /* RPLV PTR              @G24LB23*/
         LA    REG0,RPLVUTIL(,@14)                                 0478
*       REG1=LENGTH(REQST(I));      /* MOVE LENGTH           @G24LB23*/
         LA    REG1,18                                             0479
*       REG2=ADDR(REQST(I));        /* MOVE POINTER          @G24LB23*/
         LR    @14,I                                               0480
         MH    @14,@CH00089                                        0480
         AL    @14,@CF02856                                        0480
         LA    REG2,REQST-10(@14,TEMPPTR)                          0480
*       REG3=REG1;                  /* MOVE LENGTH           @G24LB23*/
         LR    REG3,REG1                                           0481
*       GEN(MVCL REG0,REG2);        /* MOVE ELEMENT          @G24LB23*/
         MVCL REG0,REG2
*       REG1=RPLVPTR;               /* SET PARM REG          @G24LB23*/
         L     REG1,RPLVPTR                                        0483
*LMSSC5:                                                           0484
*       SVC(126);                   /* INVOKE SVC 126        @G24LB23*/
LMSSC5   SVC   126                                                 0484
*       IF REG15^=0 THEN            /* FUNCTION SUCCESSFUL?  @G24LB23*/
         LTR   REG15,REG15                                         0485
         BZ    @RF00485                                            0485
*         DO;                       /*                       @G24LB23*/
*           REQCNT=REQSTNO(I);      /* RESTORE REQUEST NUMBER      0487
*                                                            @G24LB23*/
         LR    @14,I                                               0487
         MH    @14,@CH00089                                        0487
         ALR   @14,TEMPPTR                                         0487
         AL    @14,@CF02857                                        0487
         ICM   REQCNT,15,REQSTNO-6(@14)                            0487
*           RSAVE=REG0;             /* SAVE REASON CODE      @G24LB23*/
         ST    REG0,RSAVE                                          0488
*           RETSAVE=FOUR;           /* SET RETURN CODE       @G24LB23*/
         MVC   RETSAVE(4),@CF00058                                 0489
*           CALL VDRERRWT;          /* CALL ERROR PRINT      @G24LB23*/
         BAL   @14,VDRERRWT                                        0490
*         END;                      /*                       @G24LB23*/
*     END;                          /*                       @G24LB23*/
@RF00485 AL    I,@CF00069                                          0492
@DE00470 CH    I,ELEMCNT(,TEMPPTR)                                 0492
         BNH   @DL00470                                            0492
*     REG1=TEMPPTR;                 /* CURRENT QUEUE         @G24LB23*/
         LR    REG1,TEMPPTR                                        0493
*     TEMPPTR=NQUEPTR;              /* NEXT QUEUE            @G24LB23*/
         L     TEMPPTR,NQUEPTR(,TEMPPTR)                           0494
*     REG0=QUESIZ;                  /* QUEUE SIZE            @G24LB23*/
         L     REG0,@CF00097                                       0495
*LFREM1:                                                           0496
*     GEN(FREEMAIN R,LV=(REG0),A=(REG1));/* FREEMAIN QUEUE   @G24LB23*/
LFREM1   FREEMAIN R,LV=(REG0),A=(REG1)
*   END;                            /*                       @G24LB23*/
@DE00469 LTR   TEMPPTR,TEMPPTR                                     0497
         BNZ   @DL00469                                            0497
*   END VDRUPDAT;                   /* END MSVI UPDATE       @Y30LB24*/
         B     @EL00006                                            0498
*                                                                  0499
*/* ******************************************************************
*                                                                  0499
*     NAME = VDRERRWT, PRINT RECOVERY REQUEST MSVC ERRORS      @Y30LB24
*                                                                  0499
*     INPUT = RECOVERY REQUEST AND FAILING REASON CODE         @Y30LB24
*                                                                  0499
*     PROCESS =  THE RECOVERY REQUEST THAT HAVE ERROR RETURNS FROM THE
*     MSVC SUBTASK ARE FORMATED FOR PRINTING AND THEY WRITTEN TO THE
*     SYSPRINT DATA SET WITH HEADINGS.                         @Y30LB24
*                                                                  0499
*     OUTPUT = PRINTED RECOVERY REQUEST ERRORS.                @Y30LB24
*                                                                  0499
******************************************************************** */
*/*VDRERRWT: CHART                                                   */
*/*HEADER                                                          0499
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0499
*/*VDRERRWT - WRITE ERROR REQUESTS TO SYSPRINT                       */
*/*          E                    VDRERRWT                           */
*/*          D (YES,,NO,%NXT)     NEW PAGE REQUIRED                  */
*/*          P                    BUILD NEW PAGE HEADINGS            */
*/*          L                    WRITE PAGE HEADINGS                */
*/*%NXT:     P                    BUILD ERROR PRT LINE               */
*/*          L                    WRITE ERROR LINE                   */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRERRWT: END                                                     */
*                                                                  0499
*VDRERRWT:                                                         0499
*   PROCEDURE OPTIONS(SAVE(14));                                   0499
*                                                                  0499
VDRERRWT ST    @14,@SA00007                                        0499
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT HEADING IF REQUIRED                             @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0500
*   IF LINECNT>=NEWPAGE THEN        /* NEW PAGE REQUIRED     @Y30LB24*/
         L     @14,LINECNT                                         0500
         C     @14,@CF00130                                        0500
         BL    @RF00500                                            0500
*     DO;                           /* YES                   @Y30LB24*/
*       H1TITLE=TITLE2;             /* INITIALIZE HEADING    @Y30LB24*/
         MVC   H1TITLE(25),TITLE2                                  0502
*       WORK2(1:4)=CVTDATE;         /* GET DATE              @Y30LB24*/
         L     @14,CVTPTR                                          0503
         MVC   WORK2(4),CVTDATE(@14)                               0503
*       GEN(UNPK  WORK1(N7),WORK2(N4));/* UNPK               @Y30LB24*/
         UNPK  WORK1(N7),WORK2(N4)
*       H1DATE=WORK1(3:7);          /* MOVE DATE             @ZA09535*/
         MVC   H1DATE(5),WORK1+2                                   0505
*       PAGECNT=PAGECNT+ONE;        /* INCRE PAGECNT         @Y30LB24*/
         LA    @14,1                                               0506
         AL    @14,PAGECNT                                         0506
         ST    @14,PAGECNT                                         0506
*       CVD(PAGECNT,WORK1);         /* CONVERT PAGE          @Y30LB24*/
         CVD   @14,WORK1                                           0507
*       WORK1(8)=WORK1(8)×SIGN;     /* SIGN PAGE             @Y30LB24*/
         OC    WORK1+7(1),SIGN                                     0508
*       GEN(UNPK  WORK2(N5),WORK1+N5(N3));/* UNPK            @Y30LB24*/
         UNPK  WORK2(N5),WORK1+N5(N3)
*       H1PAGE=WORK2;               /* MOVE PAGE             @Y30LB24*/
         MVC   H1PAGE(5),WORK2                                     0510
*       LINECNT=ZERO;               /* ZERO LINECNT          @Y30LB24*/
         SLR   @14,@14                                             0511
         ST    @14,LINECNT                                         0511
*LPUT1:                                                            0512
*       GEN(PUT PRINT,HEADING1);    /* WRITE HEADING         @Y30LB24*/
LPUT1    PUT PRINT,HEADING1
*LPUT2:                                                            0513
*       GEN(PUT PRINT,HEADING2);    /* WRITE HEADING         @Y30LB24*/
LPUT2    PUT PRINT,HEADING2
*     END;                          /*                       @Y30LB24*/
*                                                                  0514
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT ALL FAILING RECOVERY REQUESTS                   @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0515
*   PDETAIL='';                     /* CLEAR PRT AREA        @Y30LB24*/
@RF00500 MVI   PDETAIL,C' '                                        0515
         MVC   PDETAIL+1(113),PDETAIL                              0515
*   IF JRNLDTFG=ON THEN             /* DATE ?                @ZA13484*/
         L     @14,JRNLPTR                                         0516
         TM    JRNLDTFG(@14),B'01000000'                           0516
         BNO   @RF00516                                            0516
*     DO;                           /* YES                   @ZA13484*/
*       WORK2(1:4)=JRNLDATE;        /* GET DATE              @ZA13484*/
         MVC   WORK2(4),JRNLDATE(@14)                              0518
*       WORK2(4)=WORK2(4)×SIGN;     /* SET REQ SIGN          @ZA13484*/
         OC    WORK2+3(1),SIGN                                     0519
*       GEN(UNPK WORK1(N7),WORK2(N4));/* UNPACK              @ZA13484*/
         UNPK WORK1(N7),WORK2(N4)
*       PREDATE=WORK1(3:7);         /* SET DATE              @ZA13484*/
         MVC   PREDATE(5),WORK1+2                                  0521
*     END;                          /*                       @ZA13484*/
*   CVD(REQCNT,WORK1);              /* CONVERT REQUEST       @Y30LB24*/
@RF00516 CVD   REQCNT,WORK1                                        0523
*   WORK1(8)=WORK1(8)×SIGN;         /* SIGN REQ NO.          @Y30LB24*/
         OC    WORK1+7(1),SIGN                                     0524
*   GEN(UNPK  WORK2(N5),WORK1+N5(N3));/* UNPK                @Y30LB24*/
         UNPK  WORK2(N5),WORK1+N5(N3)
*   PREQNO=WORK2;                   /* MOVE REQUEST NO       @Y30LB24*/
         MVC   PREQNO(5),WORK2                                     0526
*   WORK2(3:4)=UTILOP;              /* MOVE REQUEST CD       @Y30LB24*/
         L     @14,JRNLPTR                                         0527
         MVC   WORK2+2(2),UTILOP(@14)                              0527
*   WORK2(5:5)=SIGN;                /* MOVE PACK SIGN        @Y30LB24*/
         MVC   WORK2+4(1),SIGN                                     0528
*   GEN(UNPK  WORK1(N5),WORK2+N2(N3));/* UNPK                @Y30LB24*/
         UNPK  WORK1(N5),WORK2+N2(N3)
*   GEN(TR    WORK1(N4),TRANS-N240);/* TRANSLATE             @Y30LB24*/
         TR    WORK1(N4),TRANS-N240
*   PREQCD=WORK1(1:2);              /* MOVE REQUEST CODE     @Y30LB24*/
         MVC   PREQCD(2),WORK1                                     0531
*   WORK2(1:4)=RCHAR;               /* MOVE REASON CODE      @Y30LB24*/
         MVC   WORK2(4),RCHAR                                      0532
*   WORK2(5:5)=SIGN;                /* MOVE PACK SIGN        @Y30LB24*/
         MVC   WORK2+4(1),SIGN                                     0533
*   GEN(UNPK  WORK1(N5),WORK2+N2(N3));/* UNPK                @Y30LB24*/
         UNPK  WORK1(N5),WORK2+N2(N3)
*   GEN(TR    WORK1(N4),TRANS-N240);/* TRANSLATE             @Y30LB24*/
         TR    WORK1(N4),TRANS-N240
*   PREACD=WORK1(1:4);              /* MOVE REASON CODE      @Y30LB24*/
         MVC   PREACD(4),WORK1                                     0536
*   CALL VDRANAL;                   /* ANALIZE THE REQUEST BLOCK     */
         BAL   @14,VDRANAL                                         0537
*LPUT3:                                                            0538
*   GEN(PUT PRINT,PRTAREA);         /* WRITE MESSAGE         @Y30LB24*/
LPUT3    PUT PRINT,PRTAREA
*   LINECNT=LINECNT+TWO;            /* INCRE LINECNT         @Y30LB24*/
         LA    @14,2                                               0539
         AL    @14,LINECNT                                         0539
         ST    @14,LINECNT                                         0539
*   END VDRERRWT;                   /* END ERROR MSG         @Y30LB24*/
@EL00007 DS    0H                                                  0540
@EF00007 DS    0H                                                  0540
@ER00007 L     @14,@SA00007                                        0540
         BR    @14                                                 0540
*                                                                  0541
*/* ******************************************************************
*                                                                  0541
*     NAME = VDRBACUP, NULLIFY THE JOURNAL                     @Y30LB24
*                                                                  0541
*     INPUT = NONE.                                            @Y30LB24
*                                                                  0541
*     PROCESS = THE JOURNAL CONTROL RECORD IS READ, CHANGED TO INDICATE
*     THAT THERE ARE NO UTILITY REQUESTS JOURNALLED, AND THEN IT IS
*     REWRITTEN TO THE JOURNAL.                                @Y30LB24
*                                                                  0541
*     OUTPUT = NULL JOURNAL                                    @Y30LB24
*                                                                  0541
******************************************************************** */
*/*VDRBACUP: CHART                                                   */
*/*HEADER                                                          0541
*/*MAY 5, 1975                                  ICBVDR01 - SEGMENT 0541
*/*VDRBACUP - NULLIFY THE JOURNAL                                    */
*/*          E                    VDRBACUP                           */
*/*%NXT:     S                    VDRDINIT: INIT DATA SETS           */
*/*          D (YES,,NO,%RET)     SUCCESSFUL TO THIS POINT           */
*/*          S                    VDRRJRNL: RESERVE JOURNAL          */
*/*          S                    VDRCONRD: READ JRNL CONTROL RECORD */
*/*          D (NO,,YES,%END)     VDRCONRD ERROR                     */
*/*          P                    SET NULL JOURNAL                   */
*/*          S                    VDRCNVRT: CONVERT RTA AND RPS      */
*/*          P                    SET NULL ABS AND RPS IN JOURNAL    */
*/*          S                    VDRCONRD: WRITE CONTROL RECORD     */
*/*%END:     S                    VDRRJRNL: DEQUEUE JOURNAL          */
*/*%RET:     R                    RETURN TO CALLER                   */
*/*VDRBACUP: END                                                     */
*                                                                  0541
*VDRBACUP:                                                         0541
*   PROCEDURE OPTIONS(SAVE(14));                                   0541
VDRBACUP ST    @14,@SA00008                                        0541
*   CALL VDRDINIT;                  /* CALL INIT ROUTINE     @Y30LB24*/
         BAL   @14,VDRDINIT                                        0542
*   IF FAILCODE^=ZERO THEN          /* IF ERRORS             @ZM31052*/
         LTR   FAILCODE,FAILCODE                                   0543
         BNZ   @RT00543                                            0543
*     RETURN;                       /* RETURN                @ZM31052*/
*   RSVRSW=ON;                      /* SET RESERVE SW        @Y30LB24*/
         OI    RSVRSW,B'10000000'                                  0545
*   CALL VDRRJRNL;                  /* CALL RESERVE ROUTINE  @Y30LB24*/
         BAL   @14,VDRRJRNL                                        0546
*   READSW=ON;                      /* SET READ SW           @Y30LB24*/
         OI    READSW,B'10000000'                                  0547
*   CALL VDRCONRD;                  /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0548
*   IF FAILCODE=ZERO THEN           /* IF NO ERRORS          @Y30LB24*/
         SLR   @14,@14                                             0549
         CR    FAILCODE,@14                                        0549
         BNE   @RF00549                                            0549
*     DO;                           /* NO                    @Y30LB24*/
*       ORDRTTR=ZERO;               /* ZERO TTR              @Y30LB24*/
         ST    @14,ORDRTTR                                         0551
*       ORDRR=TWO;                  /* FIRST DATA TTR = TWO  @Y30LB24*/
         MVI   ORDRR,X'02'                                         0552
*       ORDRREM=MAXREC;             /* SET NULL JRNL         @Y30LB24*/
         MVC   ORDRREM(2),@CH00128                                 0553
*       ORDRNXT=ONE;                /* RECORD FULL           @Y30LB24*/
         MVC   ORDRNXT(2),@CH00069                                 0554
*       REQTTR=ORDRTTR;             /* SET ORDER TTR         @ZM30723*/
         L     @14,ORDRTTR                                         0555
         ST    @14,REQTTR                                          0555
*       CALL VDRCNVRT;              /* CALL CONVERSION RTN   @ZM30723*/
         BAL   @14,VDRCNVRT                                        0556
*       ORDRABS=REQABS;             /* SET ORDER ABS         @ZM30723*/
         MVC   ORDRABS(8),REQABS                                   0557
*       ORDRRPS=REQRPS;             /* SET ORDER RPS         @ZM30723*/
         MVC   ORDRRPS(1),REQRPS                                   0558
*       WRITESW=ON;                 /* SET WRITE SW          @Y30LB24*/
         OI    WRITESW,B'10000000'                                 0559
*       CALL VDRCONRD;              /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0560
*     END;                          /*                       @Y30LB24*/
*   DEQSW=ON;                       /* SET DEQUEUE SW        @Y30LB24*/
@RF00549 OI    DEQSW,B'10000000'                                   0562
*   CALL VDRRJRNL;                  /* CALL RESERVE ROUTINE  @Y30LB24*/
         BAL   @14,VDRRJRNL                                        0563
*   END VDRBACUP;                   /* END BACKUP REQ        @Y30LB24*/
@EL00008 DS    0H                                                  0564
@EF00008 DS    0H                                                  0564
@ER00008 L     @14,@SA00008                                        0564
         BR    @14                                                 0564
*                                                                  0565
*/* ******************************************************************
*                                                                  0565
*     NAME = VDRPRINT, PRINT LIBRARIAN MESSAGES                @Y30LB24
*                                                                  0565
*     INPUT = NONE.                                            @Y30LB24
*                                                                  0565
*     PROCESS = THE JOURNALLED MESSAGES ARE PRINTED, AND THEN THE  0565
*     JOURNAL CONTROL RECORD IS READ, CHANGED TO INDICATE THAT THERE
*     ARE NO MESSAGES JOURNALLED, AND THEN IT IS REWRITTEN TO THE  0565
*     JOURNAL.                                                 @Y30LB24
*                                                                  0565
*     OUTPUT = NULL MESSAGE JOURNAL, AND PRINTED LIBRARIAN MESSAGES.
*                                                              @Y30LB24
*                                                                  0565
******************************************************************** */
*/*VDRPRINT: CHART                                                   */
*/*HEADER                                                          0565
*/*MAY 5, 1975                                  ICBVDR01 - SEGMENT 0565
*/*VDRPRINT - PRINT LIBRARIAN MESSAGES                               */
*/*          E                    VDRPRINT                           */
*/*          P                    SET PAGE OVERFLOW                  */
*/*          S                    VDRDINIT: INIT DATA SETS           */
*/*          D (YES,,NO,%END)     SUCCESSFUL TO THIS POINT           */
*/*          S                    VDRRJRNL: RESERVE JOURNAL          */
*/*          S                    VDRCONRD: READ JRNL CONTROL RECORD */
*/*          D (NO,,YES,%RET)     ANY ERRORS                         */
*/*          S                    VDRMSGWT: PRINT JRNL MESSAGES      */
*/*          S                    VDRCONRD: READ JRNL CONTROL RECORD */
*/*          D (NO,,YES,%RET)     VDRCONRD ERROR                     */
*/*          P                    SET NULL MESSAGE JOURNAL           */
*/*          S                    VDRCNVRT: CONVERT RTA AND RPS      */
*/*          P                    SET NULL ABS AND RPS IN JOURNAL    */
*/*          S                    VDRCONRD: WRITE CONTROL RECORD     */
*/*%RET:     S                    VDRRJRNL: DEQUEUE JOURNAL          */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRPRINT: END                                                     */
*                                                                  0565
*VDRPRINT:                                                         0565
*   PROCEDURE OPTIONS(SAVE(14));                                   0565
VDRPRINT ST    @14,@SA00009                                        0565
*   LINECNT=NEWPAGE;                /* FORCE FIRST PAGE      @Y30LB24*/
         MVC   LINECNT(4),@CF00130                                 0566
*   CALL VDRDINIT;                  /* CALL INIT ROUTINE     @Y30LB24*/
         BAL   @14,VDRDINIT                                        0567
*   IF FAILCODE^=ZERO THEN          /* IF ERRORS             @ZM31052*/
         LTR   FAILCODE,FAILCODE                                   0568
         BNZ   @RT00568                                            0568
*     RETURN;                       /* RETURN                @ZM31052*/
*   RSVRSW=ON;                      /* SET RESERVE SW        @Y30LB24*/
         OI    RSVRSW,B'10000000'                                  0570
*   CALL VDRRJRNL;                  /* CALL RESERVE ROUTINE  @Y30LB24*/
         BAL   @14,VDRRJRNL                                        0571
*   READSW=ON;                      /* SET READ SW           @Y30LB24*/
         OI    READSW,B'10000000'                                  0572
*   CALL VDRCONRD;                  /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0573
*   IF FAILCODE=ZERO THEN           /* IF NO ERRORS          @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0574
         BNZ   @RF00574                                            0574
*     CALL VDRMSGWT;                /* CALL MESSAGE PRINT    @Y30LB24*/
         BAL   @14,VDRMSGWT                                        0575
*   READSW=ON;                      /* SET READ SW           @Y30LB24*/
@RF00574 OI    READSW,B'10000000'                                  0576
*   CALL VDRCONRD;                  /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0577
*   IF FAILCODE=ZERO THEN           /* IF NO ERRORS          @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0578
         BNZ   @RF00578                                            0578
*     DO;                           /* NO                    @Y30LB24*/
*       VDRNMTRK=ZERO;              /* ZERO NUMBER OF TRACKS@ZM30746 */
         SLR   VDRNMTRK,VDRNMTRK                                   0580
*       TEMPPTR=DEBDAPTR;           /* POINT TO DASD SECTION@ZM30746 */
         L     TEMPPTR,DEBDAPTR                                    0581
*       DO I=ONE TO DEBNMEXT;       /* LOOP THROUGH EXTENTS  @ZM30746*/
         LA    I,1                                                 0582
         B     @DE00582                                            0582
@DL00582 DS    0H                                                  0583
*         VDRNMTRK=VDRNMTRK+TEMPPTR->DEBNMTRK;/*             @ZM30746*/
         LH    @14,DEBNMTRK(,TEMPPTR)                              0583
         N     @14,@CF02859                                        0583
         ALR   VDRNMTRK,@14                                        0583
*         TEMPPTR=TEMPPTR+LENGTH(DEBDASD);/*                 @ZM30746*/
         AL    TEMPPTR,@CF00045                                    0584
*       END;                        /* END OF NUMBER OF TRACK        */
         AL    I,@CF00069                                          0585
@DE00582 L     @14,DEBPTR                                          0585
         SLR   @06,@06                                             0585
         IC    @06,DEBNMEXT(,@14)                                  0585
         CR    I,@06                                               0585
         BNH   @DL00582                                            0585
*       MSGTTR=ZERO;                /* ZERO TTR              @Y30LB24*/
         SLR   @14,@14                                             0586
         ST    @14,MSGTTR                                          0586
*       MSGTT=VDRNMTRK-ONE;         /* SET FIRST MSG TTR     @Y30LB24*/
         LR    @14,VDRNMTRK                                        0587
         BCTR  @14,0                                               0587
         STH   @14,MSGTT                                           0587
*       MSGR=ONE;                   /* SET FIRST MSG TTR     @Y30LB24*/
         MVI   MSGR,X'01'                                          0588
*       MSGREM=MAXREC;              /* SET NULL MSG JRNL     @Y30LB24*/
         MVC   MSGREM(2),@CH00128                                  0589
*       MSGNXT=ONE;                 /* RECORD FULL           @Y30LB24*/
         MVC   MSGNXT(2),@CH00069                                  0590
*       REQTTR=MSGTTR;              /* SET MSG TTR           @ZM30723*/
         L     @14,MSGTTR                                          0591
         ST    @14,REQTTR                                          0591
*       CALL VDRCNVRT;              /* CALL CONVERSION RTN   @ZM30723*/
         BAL   @14,VDRCNVRT                                        0592
*       MSGABS=REQABS;              /* SET MSG ABS           @ZM30723*/
         MVC   MSGABS(8),REQABS                                    0593
*       MSGRPS=REQRPS;              /* SET MSG RPS           @ZM30723*/
         MVC   MSGRPS(1),REQRPS                                    0594
*       WRITESW=ON;                 /* SET WRITE SW          @Y30LB24*/
         OI    WRITESW,B'10000000'                                 0595
*       CALL VDRCONRD;              /* CALL CONTROL REC RTN  @Y30LB24*/
         BAL   @14,VDRCONRD                                        0596
*     END;                          /*                       @Y30LB24*/
*   DEQSW=ON;                       /* SET DEQUEUE SW        @Y30LB24*/
@RF00578 OI    DEQSW,B'10000000'                                   0598
*   CALL VDRRJRNL;                  /* CALL RESERVE ROUTINE  @Y30LB24*/
         BAL   @14,VDRRJRNL                                        0599
*   END VDRPRINT;                   /* END PRINT REQ         @Y30LB24*/
@EL00009 DS    0H                                                  0600
@EF00009 DS    0H                                                  0600
@ER00009 L     @14,@SA00009                                        0600
         BR    @14                                                 0600
*                                                                  0601
*/* ******************************************************************
*                                                                  0601
*     NAME = VDRMSGWT, PRINT JOURNALLED LIBRARIAN MESSAGES     @Y30LB24
*                                                                  0601
*     INPUT = JOURNAL CONTROL RECORD.                          @Y30LB24
*                                                                  0601
*     PROCESS = THE JOURNAL MESSAGE DATA RECORDS ARE READ, THE MESSAGES
*     ARE FORMATED FOR PRINTING AND THEY ARE WRITTEN TO THE SYSPRINT
*     DATA SET WITH HEADINGS.                                  @Y30LB24
*                                                                  0601
*     OUTPUT = PRINTED JOURNALLED LIBRARIAN MESSAGES           @Y30LB24
*                                                                  0601
******************************************************************** */
*/*VDRMSGWT: CHART                                                   */
*/*HEADER                                                          0601
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0601
*/*VDRMSGWT - WRITE MESSAGES TO SYSPRINT                             */
*/*          E                    VDRMSGWT                           */
*/*          P                    SAVE DATA START AND END            */
*/*%DATA:    D (NO,,YES,%END)     ALL DATA PROCESSED                 */
*/*          S                    VDRRDATA: READ DATA RECORD         */
*/*          D (YES,,NO,%NXT)     NEW PAGE REQUIRED                  */
*/*          P                    BUILD NEW PAGE HEADING             */
*/*          L                    WRITE PAGE HEADING                 */
*/*%NXT:     P                    BUILD MESSAGE PRT LINE             */
*/*          L (,%DATA)           WRITE ERROR LINE                   */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRMSGWT: END                                                     */
*                                                                  0601
*VDRMSGWT:                                                         0601
*   PROCEDURE OPTIONS(SAVE(14));                                   0601
VDRMSGWT ST    @14,@SA00010                                        0601
*   VDRNMTRK=ZERO;                  /* ZERO NUMBER OF TRACKS@ZM30746 */
         SLR   VDRNMTRK,VDRNMTRK                                   0602
*   TEMPPTR=DEBDAPTR;               /* POINT TO DASD SECTION@ZM30746 */
         L     TEMPPTR,DEBDAPTR                                    0603
*   DO I=ONE TO DEBNMEXT;           /* LOOP THROUGH EXTENTS  @ZM30746*/
         LA    I,1                                                 0604
         B     @DE00604                                            0604
@DL00604 DS    0H                                                  0605
*     VDRNMTRK=VDRNMTRK+TEMPPTR->DEBNMTRK;/*                 @ZM30746*/
         LH    @14,DEBNMTRK(,TEMPPTR)                              0605
         N     @14,@CF02859                                        0605
         ALR   VDRNMTRK,@14                                        0605
*     TEMPPTR=TEMPPTR+LENGTH(DEBDASD);/*                     @ZM30746*/
         AL    TEMPPTR,@CF00045                                    0606
*   END;                            /* END OF NUMBER OF TRACK        */
         AL    I,@CF00069                                          0607
@DE00604 L     @14,DEBPTR                                          0607
         SLR   @06,@06                                             0607
         IC    @06,DEBNMEXT(,@14)                                  0607
         CR    I,@06                                               0607
         BNH   @DL00604                                            0607
*   REQTTR=ZERO;                    /* ZERO TTR              @Y30LB24*/
         SLR   @14,@14                                             0608
         ST    @14,REQTTR                                          0608
*   REQTT=VDRNMTRK-ONE;             /* SET FIRST MSG TTR     @Y30LB24*/
         LR    @14,VDRNMTRK                                        0609
         BCTR  @14,0                                               0609
         STH   @14,REQTT                                           0609
*   REQR=ONE;                       /* SET FIRST MSG TTR     @Y30LB24*/
         MVI   REQR,X'01'                                          0610
*   LIMITTTR=MSGTTR;                /* SET LIMIT TTR         @Y30LB24*/
         L     @14,MSGTTR                                          0611
         ST    @14,LIMITTTR                                        0611
*   REQREM=MSGREM;                  /* SET BYTES REMAINING   @Y30LB24*/
         LH    @14,MSGREM                                          0612
         STH   @14,REQREM                                          0612
*   REQRPT=CONTRPT;                 /* SET REC PER TRACK     @Y30LB24*/
*                                                                  0613
         LH    @14,CONTRPT                                         0613
         ST    @14,REQRPT                                          0613
*   /*****************************************************************/
*   /*                                                               */
*   /* READ AND PRINT ALL JOURNALLED MESSAGES                @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0614
*   DO UNTIL LIMITTTR(1:2)=REQTT&   /* LOOP UNTIL DONE       @Y30LB24*/
*         LIMITTTR(3:3)<REQR;       /* LOOP UNTIL DONE       @Y30LB24*/
@DL00614 DS    0H                                                  0615
*     IF REQRPT^=ZERO&              /* TRACK SWITCH REQ      @ZA17147*/
*         REQRPT<REQR THEN          /* TRACK SWITCH REQ      @ZA17147*/
         L     @14,REQRPT                                          0615
         LTR   @14,@14                                             0615
         BZ    @RF00615                                            0615
         SLR   @10,@10                                             0615
         IC    @10,REQR                                            0615
         CR    @14,@10                                             0615
         BNL   @RF00615                                            0615
*       DO;                         /* YES                   @ZA17147*/
*         REQR=ONE;                 /* RECORD ONE            @ZA17147*/
         MVI   REQR,X'01'                                          0617
*         REQTT=REQTT-ONE;          /* DECRE COUNT           @ZA17147*/
         LH    @14,REQTT                                           0618
         BCTR  @14,0                                               0618
         STH   @14,REQTT                                           0618
*       END;                        /*                       @ZA17147*/
*     IF LIMITTTR=REQTTR&           /* LAST TRACK &          @Y30LB24*/
*         REQREM=MAXREC THEN        /* NOT USED              @Y30LB24*/
@RF00615 CLC   LIMITTTR(4),REQTTR                                  0620
         BNE   @RF00620                                            0620
         CLC   REQREM(2),@CH00128                                  0620
         BNE   @RF00620                                            0620
*       DO;                         /* YES                   @Y30LB24*/
*         RETURN;                   /* RETURN TO CALLER      @Y30LB24*/
@EL00010 DS    0H                                                  0622
@EF00010 DS    0H                                                  0622
@ER00010 L     @14,@SA00010                                        0622
         BR    @14                                                 0622
*       END;                        /*                       @Y30LB24*/
*     CALL VDRRDATA;                /* CALL JRNL READ RTN    @Y30LB24*/
*                                                                  0624
@RF00620 BAL   @14,VDRRDATA                                        0624
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT ALL JOURNALLED MESSAGES                       @Y30LB24*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0625
*     JRNLPTR=ADDR(DATAREC);        /* SET MSG START         @Y30LB24*/
         LA    @14,DATAREC                                         0625
         ST    @14,JRNLPTR                                         0625
*     DO WHILE JRNLLEN^=ZERO;       /* LOOP UNTIL DONE       @Y30LB24*/
         B     @DE00626                                            0626
@DL00626 DS    0H                                                  0627
*       IF LINECNT>=NEWPAGE THEN    /* NEW PAGE REQUIRED     @Y30LB24*/
         L     @14,LINECNT                                         0627
         C     @14,@CF00130                                        0627
         BL    @RF00627                                            0627
*         DO;                       /* YES                   @Y30LB24*/
*           H1TITLE=TITLE1;         /* INITIALIZE HEADING    @Y30LB24*/
         MVC   H1TITLE(25),TITLE1                                  0629
*           WORK2(1:4)=CVTDATE;     /* GET DATE              @Y30LB24*/
         L     @14,CVTPTR                                          0630
         MVC   WORK2(4),CVTDATE(@14)                               0630
*           GEN(UNPK  WORK1(N7),WORK2(N4));/* UNPK           @Y30LB24*/
         UNPK  WORK1(N7),WORK2(N4)
*           H1DATE=WORK1(3:7);      /* MOVE DATE             @ZA09535*/
         MVC   H1DATE(5),WORK1+2                                   0632
*           PAGECNT=PAGECNT+ONE;    /* INCRE PAGECNT         @Y30LB24*/
         LA    @14,1                                               0633
         AL    @14,PAGECNT                                         0633
         ST    @14,PAGECNT                                         0633
*           CVD(PAGECNT,WORK1);     /* CONVERT PAGE          @Y30LB24*/
         CVD   @14,WORK1                                           0634
*           WORK1(8)=WORK1(8)×SIGN; /* SIGN PAGE             @Y30LB24*/
         OC    WORK1+7(1),SIGN                                     0635
*           GEN(UNPK  WORK2(N5),WORK1+N5(N3));/* UNPK        @Y30LB24*/
         UNPK  WORK2(N5),WORK1+N5(N3)
*           H1PAGE=WORK2;           /* MOVE PAGE             @Y30LB24*/
         MVC   H1PAGE(5),WORK2                                     0637
*           LINECNT=ZERO;           /* ZERO LINECNT          @Y30LB24*/
         SLR   @14,@14                                             0638
         ST    @14,LINECNT                                         0638
*LPUT4:                                                            0639
*           GEN(PUT PRINT,HEADING1);/* WRITE HEADING         @Y30LB24*/
LPUT4    PUT PRINT,HEADING1
*LPUT6:                                                            0640
*           GEN(PUT PRINT,HEADING3);/* WRITE HEADING         @ZA13484*/
LPUT6    PUT PRINT,HEADING3
*         END;                      /*                       @Y30LB24*/
*       PDETAIL='';                 /* CLEAR PRT AREA        @ZA13484*/
*                                                                  0642
@RF00627 MVI   PDETAIL,C' '                                        0642
         MVC   PDETAIL+1(113),PDETAIL                              0642
*       /*************************************************************/
*       /*                                                           */
*       /* NEW JOURNALLED ENTRY - HAS DATE CPUID AND TIME    @ZA16130*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0643
*       IF JRNLDTFG=ON THEN         /* DATE ON               @ZA13484*/
         L     @14,JRNLPTR                                         0643
         TM    JRNLDTFG(@14),B'01000000'                           0643
         BNO   @RF00643                                            0643
*         DO;                       /* YES                   @ZA13484*/
*           WORK2(1:4)=JRNLDATE;    /* GET DATE              @ZA13484*/
         MVC   WORK2(4),JRNLDATE(@14)                              0645
*           WORK2(4)=WORK2(4)×SIGN; /* SIGN DATE             @ZA13484*/
         OC    WORK2+3(1),SIGN                                     0646
*           GEN(UNPK WORK1(N7),WORK2(N4));/* UNPACK          @ZA13484*/
         UNPK WORK1(N7),WORK2(N4)
*           PREDATE=WORK1(3:7);     /* SET DATE              @ZA13484*/
         MVC   PREDATE(5),WORK1+2                                  0648
*           IF JRNLTME(1:1)^=MSGICB THEN/* IS THERE A CPUID  @ZA16130*/
         L     @14,JRNLPTR                                         0649
         CLC   JRNLTME(1,@14),MSGICB                               0649
         BE    @RF00649                                            0649
*             DO;                   /* YES                   @ZA16130*/
*               WORK2(1:4)=JRNLTME; /* GET TIME              @ZA16130*/
         MVC   WORK2(4),JRNLTME(@14)                               0651
*               WORK2(4)=WORK2(4)×SIGN;/* SIGN TIME          @ZA16130*/
         OC    WORK2+3(1),SIGN                                     0652
*               GEN(UNPK WORK1(N7),WORK2(N4));/* GET TIME    @ZA16130*/
         UNPK WORK1(N7),WORK2(N4)
*               HOUR=WORK1(1:2);    /* GET HOUR              @ZA16130*/
         MVC   HOUR(2),WORK1                                       0654
*               MINUTE=WORK1(3:4);  /* GET MINUTE            @ZA16130*/
         MVC   MINUTE(2),WORK1+2                                   0655
*               SECOND=WORK1(5:6);  /* GET SECOND            @ZA16130*/
         MVC   SECOND(2),WORK1+4                                   0656
*               CPUID1=JRNLCPU;     /* GET CPUID             @ZA16130*/
         L     @14,JRNLPTR                                         0657
         MVC   CPUID1(5),JRNLCPU(@14)                              0657
*               GEN(UNPK  CPUID(11),CPUID1(6));/* XLATE CPUID      0658
*                                                            @ZA16130*/
         UNPK  CPUID(11),CPUID1(6)
*               PDETME(1:8)=TIME;   /* PRT TIME              @ZA16130*/
         MVC   PDETME(8),TIME                                      0659
*               PDECPU=CPUID(1:10); /* PRT CPUID             @ZA16130*/
         MVC   PDECPU(10),CPUID                                    0660
*               PDEMSG1=JRNLUTIL(14:UTILLEN);/* PRT MSG      @ZA16130*/
         MVI   PDEMSG1+1,C' '                                      0661
         MVC   PDEMSG1+2(10),PDEMSG1+1                             0661
         L     @14,JRNLPTR                                         0661
         L     @10,UTILLEN(,@14)                                   0661
         SL    @10,@CF01115                                        0661
         EX    @10,@SM02860                                        0661
*             END;                  /*                       @ZA16130*/
*           ELSE                    /*                       @ZA16130*/
*             PDEMSG1=JRNLUTIL(5:UTILLEN);/* MOVE MSG        @ZA16130*/
         B     @RC00649                                            0663
@RF00649 MVI   PDEMSG1+1,C' '                                      0663
         MVC   PDEMSG1+2(10),PDEMSG1+1                             0663
         L     @14,JRNLPTR                                         0663
         L     @10,UTILLEN(,@14)                                   0663
         SL    @10,@CF00079                                        0663
         EX    @10,@SM02862                                        0663
*         END;                      /*                       @ZA13484*/
*       ELSE                                                       0665
*                                                                  0665
*         /***********************************************************/
*         /*                                                         */
*         /* OLD JOURNALLLED ENTRY                           @ZA13484*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0665
*         PDEMSG1=JRNLUTIO(5:UTILLEO);/* PRT MSG             @ZA16130*/
         B     @RC00643                                            0665
@RF00643 MVI   PDEMSG1+1,C' '                                      0665
         MVC   PDEMSG1+2(10),PDEMSG1+1                             0665
         L     @14,JRNLPTR                                         0665
         L     @10,UTILLEO(,@14)                                   0665
         SL    @10,@CF00079                                        0665
         EX    @10,@SM02864                                        0665
*LPUT5:                                                            0666
*       GEN(PUT PRINT,PRTAREA);     /* WRITE MESSAGE         @Y30LB24*/
@RC00643 DS    0H                                                  0666
LPUT5    PUT PRINT,PRTAREA
*       LINECNT=LINECNT+TWO;        /* INCREMENT LINECNT     @ZA13484*/
         LA    @14,2                                               0667
         AL    @14,LINECNT                                         0667
         ST    @14,LINECNT                                         0667
*       JRNLPTR=JRNLPTR+JRNLLEN;    /* SET NEXT START        @Y30LB24*/
         L     @14,JRNLPTR                                         0668
         LR    @10,@14                                             0668
         AL    @10,JRNLLEN(,@14)                                   0668
         ST    @10,JRNLPTR                                         0668
*     END;                          /* END PRINT LOOP        @Y30LB24*/
@DE00626 L     @14,JRNLPTR                                         0669
         L     @14,JRNLLEN(,@14)                                   0669
         LTR   @14,@14                                             0669
         BNZ   @DL00626                                            0669
*     REQR=REQR+ONE;                /* INCREMENT COUNT       @Y30LB24*/
         IC    @14,REQR                                            0670
         LA    @14,1(,@14)                                         0670
         STC   @14,REQR                                            0670
*   END;                            /* END READ LOOP         @Y30LB24*/
@DE00614 SLR   @14,@14                                             0671
         ICM   @14,3,LIMITTTR                                      0671
         CH    @14,REQTT                                           0671
         BNE   @DL00614                                            0671
         CLC   LIMITTTR+2(1),REQR                                  0671
         BNL   @DL00614                                            0671
*   END VDRMSGWT;                   /* END WRITE MSG         @Y30LB24*/
         B     @EL00010                                            0672
*                                                                  0673
*/* ******************************************************************
*                                                                  0673
*     NAME = VDRDINIT, INITIALIZE ICBVDR01 DATA SETS           @Y30LB24
*                                                                  0673
*     INPUT = INTERNAL WORK FLAG INDICATING THAT DATA SET          0673
*     INITIALIZATION HAS BEEN COMPLETED.                       @Y30LB24
*                                                                  0673
*     PROCESS = IF NOT ALREADY OPEN THE JOURNAL AND SYSPRINT DATA SETS
*     ARE OPENED.  SWITCHES, POINTERS, DATA CONTROL BLOCKS, AND CCWS
*     ARE INITIALIZED IN ORDER TO DO I/O TO THE JOURNAL DATA SET.  0673
*                                                              @Y30LB24
*                                                                  0673
*     OUTPUT = OPEN DATA SETS, AND INITIALIZED POINTERS, DATA CONTROL
*     BLOCKS, AND CCW STRING.                                  @Y30LB24
*                                                                  0673
******************************************************************** */
*/*VDRDINIT: CHART                                                   */
*/*HEADER                                                          0673
*/*MAY 5, 1975                                  ICBVDR01 - SEGMENT 0673
*/*VDRDINIT - DATA SET INITIALIZATION                                */
*/*          E                    VDRDINIT                           */
*/*          D (NO,,YES,%END)     INITIALIZATION COMPLETE            */
*/*          L                    OPEN SYSPRINT                      */
*/*          D (YES,%OPN1,NO,)    OPEN SUCCESSFUL?                   */
*/*          P (,%END)            SET FAIL RETURN CODE               */
*/*%OPN1:    L                    OPEN MSVCJRNL                      */
*/*          D (YES,%OPN2,NO,)    OPEN SUCCESSFUL?                   */
*/*          P (,%END)            SET FAIL RETURN CODE               */
*/*%OPN2:    P                    INITIALIZE SWITCHES                */
*/*          P                    INITIALIZE DATA CONTROL BLOCKS     */
*/*          P                    INITIALIZE CCW STRING              */
*/*          D (YES,,NO,%END)     JRNL ON RPS DEVICE                 */
*/*          P                    INITIALIZE RPS CCW                 */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRDINIT: END                                                     */
*                                                                  0673
*VDRDINIT:                                                         0673
*   PROCEDURE OPTIONS(SAVE(14));                                   0673
*                                                                  0673
VDRDINIT ST    @14,@SA00011                                        0673
*   /*****************************************************************/
*   /*                                                               */
*   /* OPEN ICBVDR01 DATA SETS IF REQUIRED                   @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0674
*   IF OPENSW=ON THEN               /* DATA SETS OPENED      @Y30LB24*/
         TM    OPENSW,B'10000000'                                  0674
         BNO   @RF00674                                            0674
*     DO;                           /* YES                   @Y30LB24*/
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
@EL00011 DS    0H                                                  0676
@EF00011 DS    0H                                                  0676
@ER00011 L     @14,@SA00011                                        0676
         BR    @14                                                 0676
*     END;                          /*                       @Y30LB24*/
*   OPENSW=ON;                      /* SET OPEN COMPLETE     @Y30LB24*/
@RF00674 OI    OPENSW,B'10000000'                                  0678
*   DCBPTR=ADDR(PRINT);             /* INIT DCB PTR          @ZM31052*/
         LA    @14,PRINT                                           0679
         ST    @14,DCBPTR                                          0679
*   REG0=ADDR(PRINT);               /* POINT TO PRINT DCB    @ZM31052*/
         LR    REG0,@14                                            0680
*LOPEN1:                                                           0681
*   GEN(OPEN ((REG0),),MF=(E,OPNLST1));/* OPEN DCB           @ZM31052*/
LOPEN1   OPEN ((REG0),),MF=(E,OPNLST1)
*   IF DCBOFOPN=OFF THEN            /* WAS DCB OPENED OK?    @ZM31052*/
         L     @14,DCBPTR                                          0682
         TM    DCBOFOPN+40(@14),B'00010000'                        0682
         BNZ   @RF00682                                            0682
*     DO;                           /* NO                    @ZM31052*/
*       FAILCODE=FOUR;              /* SET FAIL CODE         @ZM31052*/
         LA    @14,4                                               0684
         LR    FAILCODE,@14                                        0684
*       RETSAVE=FOUR;               /* SET RETURN CODE       @ZM31052*/
         ST    @14,RETSAVE                                         0685
*       RETURN;                     /* RETURN TO CALLER      @ZM31052*/
         B     @EL00011                                            0686
*     END;                          /*                       @ZM31052*/
*   DCBPTR=ADDR(JRNL);              /* INIT DCB PTR          @Y30LB24*/
@RF00682 LA    @14,JRNL                                            0688
         ST    @14,DCBPTR                                          0688
*   REG0=ADDR(JRNL);                /* POINT TO JRNL DCB     @Y30LB24*/
         LR    REG0,@14                                            0689
*LOPEN2:                                                           0690
*   GEN(OPEN ((REG0),),MF=(E,OPNLST1));/* OPEN DCB           @ZM31052*/
LOPEN2   OPEN ((REG0),),MF=(E,OPNLST1)
*   IF DCBOFOPN=OFF THEN            /* WAS DCB OPENED OK?    @ZM31052*/
         L     @14,DCBPTR                                          0691
         TM    DCBOFOPN+40(@14),B'00010000'                        0691
         BNZ   @RF00691                                            0691
*     DO;                           /* NO                    @ZM31052*/
*       FAILCODE=FOUR;              /* SET FAIL CODE         @ZM31052*/
         LA    @14,4                                               0693
         LR    FAILCODE,@14                                        0693
*       RETSAVE=FOUR;               /* SET RETURN CODE       @ZM31052*/
         ST    @14,RETSAVE                                         0694
*       RETURN;                     /* RETURN TO CALLER      @ZM31052*/
         B     @EL00011                                            0695
*     END;                          /*                       @ZM31052*/
*                                                                  0696
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE ICBVDR01 CONTROL BLOCKS AND SWITCHES       @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0697
*   RDISABLE=OFF;                   /* INITIALIZE SWITCH     @Y30LB24*/
@RF00691 NI    RDISABLE,B'01111111'                                0697
*   RENABLE=OFF;                    /* INITIALIZE SWITCH     @Y30LB24*/
         NI    RENABLE,B'01111111'                                 0698
*   READSW=OFF;                     /* INITIALIZE SWITCH     @Y30LB24*/
         NI    READSW,B'01111111'                                  0699
*   WRITESW=OFF;                    /* INITIALIZE SWITCH     @Y30LB24*/
         NI    WRITESW,B'01111111'                                 0700
*   DEQSW=OFF;                      /* INITIALIZE SWITCH     @Y30LB24*/
         NI    DEQSW,B'01111111'                                   0701
*   RSVRSW=OFF;                     /* INITIALIZE SWITCH     @Y30LB24*/
         NI    RSVRSW,B'01111111'                                  0702
*   RPLVPTR=ADDR(REQLIST1);         /* BASE REQUEST LIST     @Y30LB24*/
         LA    @14,REQLIST1                                        0703
         ST    @14,RPLVPTR                                         0703
*   INITPTR=ADDR(RPLVUTIL);         /* BASE REQUEST LIST     @Y30LB24*/
         LA    @14,RPLVUTIL(,@14)                                  0704
         ST    @14,INITPTR                                         0704
*   DEBPTR=DCBDEBAD;                /* SET DEB PTR           @Y30LB24*/
         L     @14,DCBPTR                                          0705
         L     @14,DCBDEBAD+40(,@14)                               0705
         ST    @14,DEBPTR                                          0705
*   DEBDAPTR=ADDR(DEBBASND);        /* SET DASD DEB SECTION PTR    0706
*                                                            @Y30LB24*/
         LA    @14,DEBBASND(,@14)                                  0706
         ST    @14,DEBDAPTR                                        0706
*   JRNLIOB=''B;                    /* CLEAR IOB             @Y30LB24*/
         XC    JRNLIOB(48),JRNLIOB                                 0707
*   IOBSTPTR=ADDR(JRNLIOB)+         /* INIT IOB PTR          @Y30LB24*/
*       LENGTH(IOBCHN);             /*                       @Y30LB24*/
         LA    @09,JRNLIOB                                         0708
         AL    @09,@CF00058                                        0708
         ST    @09,IOBSTPTR                                        0708
*   IOBFLAG1=COMDCHN;               /* INDICATE CMD CHAIN    @Y30LB24*/
         MVI   IOBFLAG1(@09),X'40'                                 0709
*   ECBPTR=ADDR(JRNLECB);           /* SET ECB ADDR          @Y30LB24*/
         LA    @05,JRNLECB                                         0710
         ST    @05,ECBPTR                                          0710
*   IOBECBPB=ADDR(JRNLECB);         /* SET ECB ADDR IN IOB   @Y30LB24*/
         LA    @05,JRNLECB                                         0711
         STCM  @05,7,IOBECBPB(@09)                                 0711
*   IOBDCBPT=ADDR(JRNL);            /* SET DCB ADDR IN IOB   @Y30LB24*/
         LA    @05,JRNL                                            0712
         ST    @05,IOBDCBPT(,@09)                                  0712
*   RPSADDR=ADDR(REQRPS);           /* SET SECTOR BUFF ADDR  @Y30LB24*/
         LA    @05,REQRPS                                          0713
         STCM  @05,7,RPSADDR                                       0713
*   SRCHADDR=ADDR(IOBCC);           /* INIT SEARCH ADDR      @Y30LB24*/
         LA    @05,IOBCC(,@09)                                     0714
         STCM  @05,7,SRCHADDR                                      0714
*   TICADDR=ADDR(SRCHCCW);          /* INIT TIC ADDR         @Y30LB24*/
         LA    @05,SRCHCCW                                         0715
         STCM  @05,7,TICADDR                                       0715
*   IOADDR=ADDR(CONTREC);           /* SET RECORD ADDR       @Y30LB24*/
*                                                                  0716
         LA    @05,CONTREC                                         0716
         STCM  @05,7,IOADDR                                        0716
*   /*****************************************************************/
*   /*                                                               */
*   /* IF JOURNAL IS NOT ON A RPS DEVICE CCW CHAIN MUST BE MODIFIED  */
*   /*                                                       @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0717
*   IF UCB2OPT3=ON THEN             /* IF RPS DEVICE?        @Y30LB24*/
         L     @14,UCBPTR(,@14)                                    0717
         TM    UCB2OPT3(@14),B'00010000'                           0717
         BNO   @RF00717                                            0717
*     IOBSTART=ADDR(RPSCCW);        /* SET CCW CHAIN ADDR IN IOB   0718
*                                                            @Y30LB24*/
         LA    @14,RPSCCW                                          0718
         ST    @14,IOBSTART(,@09)                                  0718
*   ELSE                            /* NON RPS               @Y30LB24*/
*     IOBSTART=ADDR(SRCHCCW);       /* BYPASS RPS CCW        @Y30LB24*/
         B     @RC00717                                            0719
@RF00717 LA    @14,SRCHCCW                                         0719
         L     @09,IOBSTPTR                                        0719
         ST    @14,IOBSTART(,@09)                                  0719
*   END VDRDINIT;                   /* END DATA SET INIT     @Y30LB24*/
         B     @EL00011                                            0720
*                                                                  0721
*/* ******************************************************************
*                                                                  0721
*     NAME = VDRDJRNL, DISABLE JOURNAL                         @Y30LB24
*                                                                  0721
*     INPUT = INTERNAL WORK AREAS USED TO BUILD REQUESTS TO DISABLE
*     THE MSVC JOURNAL.                                        @Y30LB24
*                                                                  0721
*     PROCESS = BUILD AND ISSUE MSVC REQUESTS TO DISABLE THE JOURNAL
*                                                              @Y30LB24
*                                                                  0721
*     OUTPUT = MSVC JOURNAL DISABLED OR A FAILING COMPLETION CODE  0721
*                                                              @Y30LB24
*                                                                  0721
******************************************************************** */
*/*VDRDJRNL: CHART                                                   */
*/*HEADER                                                          0721
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0721
*/*VDRDJRNL -  DISABLE JOURNAL                                       */
*/*          E                    VDRDJRNL                           */
*/*          D (YES,,NO,%END)     SUCCESSFUL TO THIS POINT           */
*/*          P                    BUILD MSVC RECOVERY ENABLE         */
*/*          L                    ISSUE MSSC-SVC                     */
*/*          D (YES,,NO,%DISJ)    ENABLE ERROR                       */
*/*          P (,%END)            SET ERROR FLAGS                    */
*/*%DISJ:    P                    BUILD JRNL RECOVERY DISABLE        */
*/*          L                    ISSUE MSSC-SVC                     */
*/*          D (YES,,NO,%END)     DISABLE ERROR                      */
*/*          P (,%END)            SET ERROR FLAGS                    */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRDJRNL: END                                                     */
*                                                                  0721
*VDRDJRNL:                                                         0721
*   PROCEDURE OPTIONS(SAVE(14));                                   0721
*                                                                  0721
VDRDJRNL ST    @14,12(,@13)                                        0721
*   /*****************************************************************/
*   /*                                                               */
*   /* IF UNSUCCESSFUL IN OTHER ROUTINES RETURN              @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0722
*   IF FAILCODE^=ZERO THEN          /* IF ERRORS             @Y30LB24*/
         LTR   FAILCODE,FAILCODE                                   0722
         BNZ   @RT00722                                            0722
*     RETURN;                       /* RETURN                @Y30LB24*/
*                                                                  0723
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AND ISSUE MSVC RECOVERY ENABLE REQUEST          @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0724
*   IF VVIFLG0=ON THEN              /* TOTAL DISABLE         @Y30LB24*/
         L     @14,VVIPTR                                          0724
         TM    VVIFLG0(@14),B'10000000'                            0724
         BNO   @RF00724                                            0724
*     DO;                           /* YES                   @Y30LB24*/
*       RPLV=''B;                   /* ZERO RPLV             @Y30LB24*/
         L     @14,RPLVPTR                                         0726
         XC    RPLV(132,@14),RPLV(@14)                             0726
*       INITVVI=''B;                /* ZERO REQ LIST         @Y30LB24*/
         L     @09,INITPTR                                         0727
         XC    INITVVI(20,@09),INITVVI(@09)                        0727
*       RECPLEN=LENGTH(RPLV)+INILEN;/* SET RPLV LEN          @Y30LB24*/
         LH    @05,INILEN                                          0728
         LA    @07,132                                             0728
         ALR   @07,@05                                             0728
         ST    @07,RECPLEN(,@14)                                   0728
*       RPLJRCVY=ON;                /* SET RECOVERY FLG      @Y30LB24*/
         OI    RPLJRCVY(@14),B'00000010'                           0729
*       ROPCODE=RECOVER;            /* SET REC OPCODE        @Y30LB24*/
         MVI   ROPCODE(@14),X'8F'                                  0730
*       RPLVTLEN=LENGTH(RPLV)+INILEN;/* SET RPLVTLEN         @Y30LB24*/
         STH   @07,RPLVTLEN(,@14)                                  0731
*       INILNGTH=INILEN;            /* SET REQUEST LENGTH    @Y30LB24*/
         ST    @05,INILNGTH(,@09)                                  0732
*       INITOPCD=INICODE;           /* SET OP CODE           @Y30LB24*/
         MVI   INITOPCD(@09),X'88'                                 0733
*       INIENABL=ON;                /* SET ENABLE FLAG       @Y30LB24*/
         OI    INIENABL(@09),B'01000000'                           0734
*       INIABLE=ON;                 /* SET MSVI FLAG         @Y30LB24*/
*       INIJRNL=ON;                 /* SET JOURNAL FLAG      @Y30LB24*/
         OI    INIABLE(@09),B'01100000'                            0736
*       INIUCAT='';                 /* BLANK UCAT NAME       @Y30LB24*/
         MVI   INIUCAT(@09),C' '                                   0737
         MVC   INIUCAT+1(7,@09),INIUCAT(@09)                       0737
*       REG1=RPLVPTR;               /* SET PARM REG          @Y30LB24*/
         LR    REG1,@14                                            0738
*LMSSC2:                                                           0739
*       SVC(126);                   /* INVOKE SVC 126 ISSUE SVC MACRO
*                                                            @Y30LB24*/
LMSSC2   SVC   126                                                 0739
*       IF REG15^=ZERO THEN         /* FUNCTION SUCCESSFUL?  @Y30LB24*/
         LTR   REG15,REG15                                         0740
         BZ    @RF00740                                            0740
*         DO;                       /* NO                    @Y30LB24*/
*           RSAVE=REG0;             /* SAVE REASON CODE      @Y30LB24*/
         ST    REG0,RSAVE                                          0742
*           FAILCODE=TASKERR;       /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,2                                          0743
*           TOTFCODE=FOUR;          /* SET RETURN CODE       @Y30LB24*/
         MVC   TOTFCODE(4),@CF00058                                0744
*           RETURN;                 /* RETURN TO CALLER      @Y30LB24*/
@EL00012 DS    0H                                                  0745
@EF00012 DS    0H                                                  0745
@ER00012 L     @14,12(,@13)                                        0745
         BR    @14                                                 0745
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
*                                                                  0747
@RF00740 DS    0H                                                  0748
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AND ISSUE MSVC RECOVERY DISABLEJ REQUEST        @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0748
*   IF VVIFLG2=OFF THEN             /* JRNL ENABLE           @Y30LB24*/
@RF00724 L     @14,VVIPTR                                          0748
         TM    VVIFLG2(@14),B'00100000'                            0748
         BNZ   @RF00748                                            0748
*     DO;                           /* YES                   @Y30LB24*/
*       RPLV=''B;                   /* ZERO RPLV             @Y30LB24*/
         L     @14,RPLVPTR                                         0750
         XC    RPLV(132,@14),RPLV(@14)                             0750
*       INITVVI=''B;                /* ZERO REQ LIST         @Y30LB24*/
         L     @09,INITPTR                                         0751
         XC    INITVVI(20,@09),INITVVI(@09)                        0751
*       RECPLEN=LENGTH(RPLV)+INILEN;/* SET RPLV LEN          @Y30LB24*/
         LH    @05,INILEN                                          0752
         LA    @07,132                                             0752
         ALR   @07,@05                                             0752
         ST    @07,RECPLEN(,@14)                                   0752
*       RPLJRCVY=ON;                /* SET RECOVERY FLG      @Y30LB24*/
         OI    RPLJRCVY(@14),B'00000010'                           0753
*       ROPCODE=RECOVER;            /* SET REC OPCODE        @Y30LB24*/
         MVI   ROPCODE(@14),X'8F'                                  0754
*       RPLVTLEN=LENGTH(RPLV)+INILEN;/* SET RPLVTLEN         @Y30LB24*/
         STH   @07,RPLVTLEN(,@14)                                  0755
*       INILNGTH=INILEN;            /* SET REQUEST LENGTH    @Y30LB24*/
         ST    @05,INILNGTH(,@09)                                  0756
*       INITOPCD=INICODE;           /* SET OP CODE           @Y30LB24*/
         MVI   INITOPCD(@09),X'88'                                 0757
*       INIDISAB=ON;                /* SET DISABLE FLAG      @Y30LB24*/
         OI    INIDISAB(@09),B'00100000'                           0758
*       INIJRNL=ON;                 /* SET JOURNAL FLAG      @Y30LB24*/
         OI    INIJRNL(@09),B'01000000'                            0759
*       REG1=RPLVPTR;               /* SET PARM REG          @Y30LB24*/
         LR    REG1,@14                                            0760
*LMSSC3:                                                           0761
*       SVC(126);                   /* INVOKE SVC 126 ISSUE SVC MACRO
*                                                            @Y30LB24*/
LMSSC3   SVC   126                                                 0761
*       IF REG15^=ZERO THEN         /* FUNCTION SUCCESSFUL?  @Y30LB24*/
         LTR   REG15,REG15                                         0762
         BZ    @RF00762                                            0762
*         DO;                       /* NO                    @Y30LB24*/
*           RSAVE=REG0;             /* SAVE REASON CODE      @Y30LB24*/
         ST    REG0,RSAVE                                          0764
*           FAILCODE=TASKERR;       /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,2                                          0765
*           TOTFCODE=FOUR;          /* SET RETURN CODE       @Y30LB24*/
         MVC   TOTFCODE(4),@CF00058                                0766
*           RETURN;                 /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00012                                            0767
*         END;                      /*                       @Y30LB24*/
*     END;                          /*                       @Y30LB24*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00012                                            0770
*   END VDRDJRNL;                   /* END JRNL DISABLE      @Y30LB24*/
         B     @EL00012                                            0771
*                                                                  0772
*/* ******************************************************************
*                                                                  0772
*     NAME = VDRRMSVC, RESTORE MSVC TO ICBVDR01 ENTRY STATUS   @Y30LB24
*                                                                  0772
*     INPUT = INTERNAL WORK FLAG INDICATING THE TYPE OF PROCESSING 0772
*     THAT IS REQUIRED IN THIS ROUTINE.                        @Y30LB24
*                                                                  0772
*     PROCESS = BUILD AND ISSUE A REQUEST TO ENABLE OR DISABLE MSVC
*                                                              @Y30LB24
*                                                                  0772
*     OUTPUT = MSVC RESTORED TO STATUS HELD ON ENTRY TO ICBVDR01 OR
*     A FAILING COMPLETION CODE                                @Y30LB24
*                                                                  0772
******************************************************************** */
*/*VDRRMSVC: CHART                                                   */
*/*HEADER                                                          0772
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0772
*/*VDRRMSVC - RESTORE MSVC ENTRY STATUS                              */
*/*          E                    VDRRMSVC                           */
*/*          D (YES,,NO,%DIS)     ENABLE REQUIRED                    */
*/*          P (,%SVC)            BUILD MSVC ENABLE                  */
*/*%DIS:     P                    BUILD DISABLE                      */
*/*%SVC:     P                    SET RECOVERY REQUEST               */
*/*          L                    ISSUE MSSC-SVC                     */
*/*          D (YES,,NO,%END)     DISABLE ERROR                      */
*/*          P (,%END)            SET MSVC ERROR                     */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRRMSVC: END                                                     */
*                                                                  0772
*VDRRMSVC:                                                         0772
*   PROCEDURE OPTIONS(SAVE(14));                                   0772
*                                                                  0772
VDRRMSVC ST    @14,12(,@13)                                        0772
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD AND ISSUE MSVC RECOVERY ENABLE/DISABLE REQUEST DEPENDING*/
*   /* ON INTERNAL FLAG.                                     @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0773
*   RPLVPTR=ADDR(REQLIST1);         /* BASE REQUEST LIST     @Y30LB24*/
         LA    @14,REQLIST1                                        0773
         ST    @14,RPLVPTR                                         0773
*   INITPTR=ADDR(RPLVUTIL);         /* BASE REQUEST LIST     @Y30LB24*/
         LA    @10,RPLVUTIL(,@14)                                  0774
         ST    @10,INITPTR                                         0774
*   RPLV=''B;                       /* ZERO RPLV             @Y30LB24*/
         XC    RPLV(132,@14),RPLV(@14)                             0775
*   INITVVI=''B;                    /* ZERO REQ LIST         @Y30LB24*/
         XC    INITVVI(20,@10),INITVVI(@10)                        0776
*   RECPLEN=LENGTH(RPLV)+INILEN;    /* SET RPLV LENGTH       @Y30LB24*/
         LH    @09,INILEN                                          0777
         LA    @05,132                                             0777
         ALR   @05,@09                                             0777
         ST    @05,RECPLEN(,@14)                                   0777
*   RPLJRCVY=ON;                    /* SET RECOVERY FLG      @Y30LB24*/
         OI    RPLJRCVY(@14),B'00000010'                           0778
*   ROPCODE=RECOVER;                /* SET REC OPCODE        @Y30LB24*/
         MVI   ROPCODE(@14),X'8F'                                  0779
*   RPLVTLEN=LENGTH(RPLV)+INILEN;   /* SET RPLVTLEN          @Y30LB24*/
         STH   @05,RPLVTLEN(,@14)                                  0780
*   INILNGTH=INILEN;                /* SET REQUEST LENGTH    @Y30LB24*/
         ST    @09,INILNGTH(,@10)                                  0781
*   INITOPCD=INICODE;               /* SET OP CODE           @Y30LB24*/
         MVI   INITOPCD(@10),X'88'                                 0782
*   IF RENABLE=ON THEN              /* ENABLE RESTORE        @Y30LB24*/
         TM    RENABLE,B'10000000'                                 0783
         BNO   @RF00783                                            0783
*     DO;                           /* YES                   @Y30LB24*/
*       RENABLE=OFF;                /* SET SWITCH OFF        @Y30LB24*/
         NI    RENABLE,B'01111111'                                 0785
*       INIENABL=ON;                /* SET ENABLE FLAG       @Y30LB24*/
         OI    INIENABL(@10),B'01000000'                           0786
*       INIABLE=ON;                 /* SET MSVI FLAG         @Y30LB24*/
*       INIJRNL=ON;                 /* SET JOURNAL FLAG      @Y30LB24*/
         OI    INIABLE(@10),B'01100000'                            0788
*       INIUCAT='';                 /* BLANK UCAT NAME       @Y30LB24*/
         MVI   INIUCAT(@10),C' '                                   0789
         MVC   INIUCAT+1(7,@10),INIUCAT(@10)                       0789
*     END;                          /*                       @Y30LB24*/
*   IF RDISABLE=ON THEN             /* DISABLE RESTORE       @Y30LB24*/
@RF00783 TM    RDISABLE,B'10000000'                                0791
         BNO   @RF00791                                            0791
*     DO;                           /* YES                   @Y30LB24*/
*       RDISABLE=OFF;               /* SET SWITCH OFF        @Y30LB24*/
         NI    RDISABLE,B'01111111'                                0793
*       INIDISAB=ON;                /* SET DISABLE FLAG      @Y30LB24*/
         L     @14,INITPTR                                         0794
         OI    INIDISAB(@14),B'00100000'                           0794
*       INIABLE=ON;                 /* SET MSVI FLAG         @Y30LB24*/
*       INIJRNL=ON;                 /* SET JOURNAL FLAG      @Y30LB24*/
         OI    INIABLE(@14),B'01100000'                            0796
*     END;                          /*                       @Y30LB24*/
*   REG1=RPLVPTR;                   /* SET PARM REG          @Y30LB24*/
@RF00791 L     REG1,RPLVPTR                                        0798
*LMSSC4:                                                           0799
*   SVC(126);                       /* INVOKE SVC 126 ISSUE SVC MACRO
*                                                            @Y30LB24*/
LMSSC4   SVC   126                                                 0799
*   IF REG15^=ZERO THEN             /* FUNCTION SUCCESSFUL?  @Y30LB24*/
         LTR   REG15,REG15                                         0800
         BZ    @RF00800                                            0800
*     DO;                           /* NO                    @Y30LB24*/
*       RSAVE=REG0;                 /* SAVE REASON CODE      @Y30LB24*/
         ST    REG0,RSAVE                                          0802
*       FAILCODE=TASKERR;           /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,2                                          0803
*       TOTFCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         MVC   TOTFCODE(4),@CF00058                                0804
*     END;                          /*                       @Y30LB24*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00013 DS    0H                                                  0806
@EF00013 DS    0H                                                  0806
@ER00013 L     @14,12(,@13)                                        0806
         BR    @14                                                 0806
*   END VDRRMSVC;                   /* END MSVC RESTORE      @Y30LB24*/
         B     @EL00013                                            0807
*                                                                  0808
*/* ******************************************************************
*                                                                  0808
*     NAME = VDRRJRNL, RESERVE AND DEQUEUE JOURNAL DATA SET    @Y30LB24
*                                                                  0808
*     INPUT = INTERNAL WORK FLAGS INDICATING THAT EITHER A RESERVE 0808
*     OR A DEQUEUE OF THE JOURNAL DATA SET IS REQUIRED.        @Y30LB24
*                                                                  0808
*     PROCESS = ISSUE THE RESERVE OR DEQUEUE MACRO DEPENDING ON FLAG.
*                                                              @Y30LB24
*                                                                  0808
*     OUTPUT = RESERVED OR DEQUEUE JOURNAL DATA SET.           @Y30LB24
*                                                                  0808
******************************************************************** */
*/*VDRRJRNL: CHART                                                   */
*/*HEADER                                                          0808
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0808
*/*VDRRJRNL - RESERVE OR DEQUEUE JOURNAL                             */
*/*          E                    VDRRJRNL                           */
*/*          D (YES,,NO,%END)     OPEN SUCCESSFUL                    */
*/*          P                    SET JRNL UCB ADDR IN LIST          */
*/*          D (YES,,NO,%DEQ)     RESERVE REQUESTED                  */
*/*          I (,%END)            ISSUE RESERVE MACRO                */
*/*%DEQ:     D (YES,,NO,%END)     RESERVE REQUESTED                  */
*/*          I (,%END)            ISSUE DEQUEUE MACRO                */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRRJRNL: END                                                     */
*                                                                  0808
*VDRRJRNL:                                                         0808
*   PROCEDURE OPTIONS(SAVE(14));                                   0808
VDRRJRNL ST    @14,@SA00014                                        0808
*   IF DCBOFOPN^=ON THEN            /* IF OPEN ERROR         @Y30LB24*/
         L     @14,DCBPTR                                          0809
         TM    DCBOFOPN+40(@14),B'00010000'                        0809
         BNO   @RT00809                                            0809
*     RETURN;                       /* RETURN                @Y30LB24*/
*   RUCBADDR=ADDR(DEBUCBAD);        /* SET UCB ADDR IN LIST  @Y30LB24*/
         L     @14,DEBDAPTR                                        0811
         ST    @14,RUCBADDR                                        0811
*   IF RSVRSW=ON THEN               /* RESERVE REQ.          @Y30LB24*/
         TM    RSVRSW,B'10000000'                                  0812
         BNO   @RF00812                                            0812
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(RESLIST1);        /* SET UP REG 1          @Y30LB24*/
         LA    REG1,RESLIST1                                       0814
*LRES1:                                                            0815
*       GEN(RESERVE  MF=(E,(REG1)));/* ISSUE RESERVE         @Y30LB24*/
LRES1    RESERVE  MF=(E,(REG1))
*       RSVRSW=OFF;                 /* SET OFF SW            @Y30LB24*/
         NI    RSVRSW,B'01111111'                                  0816
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
@EL00014 DS    0H                                                  0817
@EF00014 DS    0H                                                  0817
@ER00014 L     @14,@SA00014                                        0817
         BR    @14                                                 0817
*     END;                          /*                       @Y30LB24*/
*   IF DEQSW=ON THEN                /* DEQ REQ.              @Y30LB24*/
@RF00812 TM    DEQSW,B'10000000'                                   0819
         BNO   @RF00819                                            0819
*     DO;                           /* YES                   @Y30LB24*/
*       REG1=ADDR(RESLIST1);        /* SET UP REG 1          @Y30LB24*/
         LA    REG1,RESLIST1                                       0821
*LDEQ1:                                                            0822
*       GEN(DEQ  MF=(E,(REG1)));    /* ISSUE DEQ             @Y30LB24*/
LDEQ1    DEQ  MF=(E,(REG1))
*       DEQSW=OFF;                  /* SET OFF SW            @Y30LB24*/
         NI    DEQSW,B'01111111'                                   0823
*       RETURN;                     /* RETURN TO CALLER      @Y30LB24*/
         B     @EL00014                                            0824
*     END;                          /*                       @Y30LB24*/
*   END VDRRJRNL;                   /* END JRNL RESERVE      @Y30LB24*/
         B     @EL00014                                            0826
*                                                                  0827
*/* ******************************************************************
*                                                                  0827
*     NAME = VDRCONRD, JOURNAL CONTROL RECORD ACCESS ROUTINE   @Y30LB24
*                                                                  0827
*     INPUT = INTERNAL WORK FLAGS                              @Y30LB24
*                                                                  0827
*     PROCESS = VDRCONRD DETERMINES IF THE ACTIVITY IS FOR READ OR 0827
*     WRITE ACCESS, WHETHER THE DEVICE IS AN RPS DEVICE, THE CCW   0827
*     CHAIN IS UPDATED ACCORDINGLY.                            @Y30LB24
*                                                                  0827
*     OUTPUT = ACCESS TO JOURNAL AS REQUESTED.                 @Y30LB24
*                                                                  0827
******************************************************************** */
*/*VDRCONRD: CHART                                                   */
*/*HEADER                                                          0827
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0827
*/*VDRCONRD - READ JOURNAL CONTROL RECORD                            */
*/*          E                    VDRCONRD                           */
*/*          S                    VDRCNVRT: CONVERT RTA AND RPS      */
*/*          P                    INIT I/O CONTROL BLOCKS            */
*/*          L                    EXCP JOURNAL                       */
*/*          D (YES,,NO,%END)     I/O ERROR                          */
*/*          P                    SET JRNL CONTROL REC FAIL          */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRCONRD: END                                                     */
*                                                                  0827
*VDRCONRD:                                                         0827
*   PROCEDURE OPTIONS(SAVE(14));                                   0827
VDRCONRD ST    @14,@SA00015                                        0827
*   REQTTR=ZERO;                    /* ZERO TTR              @Y30LB24*/
         SLR   @14,@14                                             0828
         ST    @14,REQTTR                                          0828
*   REQR=ONE;                       /* CONTROL TTR = ONE     @Y30LB24*/
         MVI   REQR,X'01'                                          0829
*   CALL VDRCNVRT;                  /* CALL CONVERSION RTN   @Y30LB24*/
         BAL   @14,VDRCNVRT                                        0830
*   IOBSEEK=REQABS;                 /* SET SEEK ADDR IN IOB  @Y30LB24*/
         L     @14,IOBSTPTR                                        0831
         MVC   IOBSEEK(8,@14),REQABS                               0831
*   IF READSW=ON THEN               /* READ OPERATION        @Y30LB24*/
         TM    READSW,B'10000000'                                  0832
         BNO   @RF00832                                            0832
*     IO=READCMD;                   /* READ DATA CMD         @Y30LB24*/
         MVI   IO,X'06'                                            0833
*   IF WRITESW=ON THEN              /* WRITE OPERATION       @Y30LB24*/
@RF00832 TM    WRITESW,B'10000000'                                 0834
         BNO   @RF00834                                            0834
*     IO=WRITCMD;                   /* WRITE DATA CMD        @Y30LB24*/
         MVI   IO,X'05'                                            0835
*   READSW=OFF;                     /* SET SWITCH OFF        @Y30LB24*/
@RF00834 NI    READSW,B'01111111'                                  0836
*   WRITESW=OFF;                    /* SET SWITCH OFF        @Y30LB24*/
*                                                                  0837
         NI    WRITESW,B'01111111'                                 0837
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE EXCP AND WAIT                                   @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0838
*   JRNLECB=ZERO;                   /* CLEAR ECB             @Y30LB24*/
         SLR   @14,@14                                             0838
         ST    @14,JRNLECB                                         0838
*   REG1=ADDR(IOBSTDRD);            /* SET IOB ADDR          @Y30LB24*/
         L     REG1,IOBSTPTR                                       0839
*LEXCP1:                                                           0840
*   GEN(EXCP (REG1));               /* ISSUE THE EXCP        @Y30LB24*/
LEXCP1   EXCP (REG1)
*   REG1=ADDR(JRNLECB);             /* SET ECB ADDR          @Y30LB24*/
         LA    REG1,JRNLECB                                        0841
*LWAIT1:                                                           0842
*   GEN(WAIT ECB=(REG1));           /* WAIT FOR COMPLETION   @Y30LB24*/
LWAIT1   WAIT ECB=(REG1)
*   IF ECBCC^=SUCIO×                /* SUCCESSFUL I/O OR     @Y30LB24*/
*       CONTID^=CREC THEN           /* JRNL CONTROL REC      @Y30LB24*/
         L     @14,ECBPTR                                          0843
         CLI   ECBCC(@14),X'7F'                                    0843
         BNE   @RT00843                                            0843
         CLC   CONTID(8),CREC                                      0843
         BE    @RF00843                                            0843
@RT00843 DS    0H                                                  0844
*     DO;                           /* NO                    @Y30LB24*/
*       DCBIFEC='0'B;               /* CLEAR ERROR FLG       @ZM31134*/
         L     @14,DCBPTR                                          0845
         NI    DCBIFEC+40(@14),B'00111111'                         0845
*       FAILCODE=CONTERR;           /* SET FAIL CODE         @Y30LB24*/
         LA    @14,4                                               0846
         LR    FAILCODE,@14                                        0846
*       TOTFCODE=FOUR;              /* SET RETURN CODE       @Y30LB24*/
         ST    @14,TOTFCODE                                        0847
*     END;                          /*                       @Y30LB24*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00015 DS    0H                                                  0849
@EF00015 DS    0H                                                  0849
@ER00015 L     @14,@SA00015                                        0849
         BR    @14                                                 0849
*   END VDRCONRD;                   /* END CONTROL RECORD    @Y30LB24*/
         B     @EL00015                                            0850
*                                                                  0851
*/* ******************************************************************
*                                                                  0851
*     NAME = VDRRDATA, READ JOURNAL DATA RECORD ROUTINE        @Y30LB24
*                                                                  0851
*     INPUT = RELATIVE TTR AND RPS ADDRESS                     @Y30LB24
*                                                                  0851
*     PROCESS = VDRRDATA INITIALIZIES THE I/O CONTROL BLOCK AS NEEDED
*     TO READ THE REQUESTED JOURNAL DATA RECORD, AND ISSUES AN EXCP
*     I/O REQUEST TO DO THE READ.                              @Y30LB24
*                                                                  0851
*     OUTPUT = JOURNAL DATA RECORD OR A FAILING INDICATOR.     @Y30LB24
*                                                                  0851
******************************************************************** */
*/*VDRRDATA: CHART                                                   */
*/*HEADER                                                          0851
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0851
*/*VDRRDATA - READ JOURNAL DATA RECORDS                              */
*/*          E                    VDRRDATA                           */
*/*          S                    VDRCNVRT: CONVERT RTA AND RPS      */
*/*          P                    INIT I/O CONTROL BLOCKS            */
*/*          L                    EXCP JOURNAL                       */
*/*          D (YES,,NO,%END)     I/O ERROR                          */
*/*          D (YES,,NO,%END)     LESS THAN THREE MSG?               */
*/*          S                    VDRNOTOP: ISSUE I/O ERROR MESSAGE  */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRRDATA: END                                                     */
*                                                                  0851
*VDRRDATA:                                                         0851
*   PROCEDURE OPTIONS(SAVE(14));                                   0851
*                                                                  0851
VDRRDATA ST    @14,@SA00016                                        0851
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD CONTROL BLOCKS AND ISSUE EXCP AND WAIT          @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0852
*   CALL VDRCNVRT;                  /* CALL CONVERSION RTN   @Y30LB24*/
         BAL   @14,VDRCNVRT                                        0852
*   IOBSEEK=REQABS;                 /* SET SEEK ADDR IN IOB  @Y30LB24*/
         L     @14,IOBSTPTR                                        0853
         MVC   IOBSEEK(8,@14),REQABS                               0853
*   IO=READCMD;                     /* READ DATA CMD         @Y30LB24*/
         MVI   IO,X'06'                                            0854
*   JRNLECB=ZERO;                   /* CLEAR ECB             @Y30LB24*/
         SLR   @14,@14                                             0855
         ST    @14,JRNLECB                                         0855
*   REG1=ADDR(IOBSTDRD);            /* SET IOB ADDR          @Y30LB24*/
         L     REG1,IOBSTPTR                                       0856
*LEXCP2:                                                           0857
*   GEN(EXCP (REG1));               /* ISSUE THE EXCP        @Y30LB24*/
LEXCP2   EXCP (REG1)
*   REG1=ADDR(JRNLECB);             /* SET ECB ADDR          @Y30LB24*/
         LA    REG1,JRNLECB                                        0858
*LWAIT2:                                                           0859
*   GEN(WAIT ECB=(REG1));           /* WAIT FOR COMPLETION   @Y30LB24*/
LWAIT2   WAIT ECB=(REG1)
*   IF ECBCC^=SUCIO THEN            /* SUCCESSFUL I/O        @Y30LB24*/
         L     @14,ECBPTR                                          0860
         CLI   ECBCC(@14),X'7F'                                    0860
         BE    @RF00860                                            0860
*     DO;                           /* NO                    @Y30LB24*/
*       FAILCODE=DATAERR;           /* SET FAIL CODE         @Y30LB24*/
         LA    FAILCODE,5                                          0862
*       MSGCNT=MSGCNT+ONE;          /* INCREMENT COUNT       @ZM31134*/
         LA    @14,1                                               0863
         AL    @14,MSGCNT                                          0863
         ST    @14,MSGCNT                                          0863
*       IF MSGCNT<THREE THEN        /* COUNT OK?             @ZM31134*/
         C     @14,@CF00125                                        0864
         BNL   @RF00864                                            0864
*         DO;                       /* YES                   @ZM31134*/
*           CALL VDRNOTOP;          /* CALL MESSAGE ROUTINE  @Y30LB24*/
         BAL   @14,VDRNOTOP                                        0866
*         END;                      /*                       @ZM31134*/
*       RETSAVE=FOUR;               /* SET RETURN CODE       @Y30LB24*/
@RF00864 MVC   RETSAVE(4),@CF00058                                 0868
*       FAILCODE=RCON0;             /* CLEAR FAIL CODE       @Y30LB24*/
         SLR   FAILCODE,FAILCODE                                   0869
*       DCBIFEC='0'B;               /* CLEAR ERROR FLG       @Y30LB24*/
         L     @14,DCBPTR                                          0870
         NI    DCBIFEC+40(@14),B'00111111'                         0870
*       JRNLPTR=ADDR(DATAREC);      /* SET REQ START         @Y30LB24*/
         LA    @14,DATAREC                                         0871
         ST    @14,JRNLPTR                                         0871
*       JRNLLEN=ZERO;               /* SET NULL RECORD       @Y30LB24*/
         SLR   @09,@09                                             0872
         ST    @09,JRNLLEN(,@14)                                   0872
*     END;                          /*                       @Y30LB24*/
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00016 DS    0H                                                  0874
@EF00016 DS    0H                                                  0874
@ER00016 L     @14,@SA00016                                        0874
         BR    @14                                                 0874
*   END VDRRDATA;                   /* END READ DATA RTN     @Y30LB24*/
         B     @EL00016                                            0875
*                                                                  0876
*/* ******************************************************************
*                                                                  0876
*     NAME = VDRCNVRT, TTR AND RPS CONVERSION ROUTINE          @Y30LB24
*                                                                  0876
*     INPUT = RELATIVE TTR AND RPS ADDRESS                     @Y30LB24
*                                                                  0876
*     PROCESS = VDRCNVRT CONVERTS THE TTR AND RPS ADDRESSES TO     0876
*     ABSOLUTE DISK AND SECTOR ADDRESS, VIA IECPCNVT AND           0876
*     IEC0SCR1 ROUTINES.                                       @Y30LB24
*                                                                  0876
*     OUTPUT = REQABS AND REQRPS.                              @Y30LB24
*                                                                  0876
******************************************************************** */
*/*VDRCNVRT: CHART                                                   */
*/*HEADER                                                          0876
*/*JULY 19, 1974                                ICBVDR01 - SEGMENT 0876
*/*VDRCNVRT - CONVERT RTA AND RPS ADDRESSES                          */
*/*          E                    VDRCNVRT                           */
*/*          P                    SET RTA VARIABLES                  */
*/*          S                    IECPCNVT: SYS RTA CONVERT RTN      */
*/*          D (YES,,NO,%END)     RPS DEVICE                         */
*/*          P                    SET RPS VARIABLES                  */
*/*          S                    IEC0SCR1: SYS RPS CONVERT RTN      */
*/*%END:     R                    RETURN TO CALLER                   */
*/*VDRCNVRT: END                                                     */
*                                                                  0876
*VDRCNVRT:                                                         0876
*   PROCEDURE OPTIONS(SAVE);                                       0876
*                                                                  0876
VDRCNVRT STM   @14,@12,@SA00017                                    0876
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT TTR TO ABSOLUTE DISK ADDRESS                  @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0877
*   REG0=REQTTR;                    /* SET RELATIVE TTR      @Y30LB24*/
         L     REG0,REQTTR                                         0877
*   REG1=DEBPTR;                    /* POINT TO DEB          @Y30LB24*/
         L     REG1,DEBPTR                                         0878
*   REG2=ADDR(REQABS);              /* AREA TO RECEIVE ABS   @Y30LB24*/
         LA    REG2,REQABS                                         0879
*   REG3=REG12;                     /* SAVE BASE REG         @Y30LB24*/
         LR    REG3,REG12                                          0880
*   REG4=REG11;                     /* SAVE BASE REG         @Y30LB24*/
         LR    REG4,REG11                                          0881
*   SAVREG13=REG13;                 /* SAVE LINK REG         @Y30LB24*/
         LR    SAVREG13,REG13                                      0882
*   CALL IECPCNVT;                  /* CALL CONVERSION RTN   @Y30LB24*/
         L     @10,CVTPTR                                          0883
         L     @15,CVTPCNVT(,@10)                                  0883
         BALR  @14,@15                                             0883
*   REG12=REG3;                     /* RESTORE BASE REG      @Y30LB24*/
         LR    REG12,REG3                                          0884
*   REG11=REG4;                     /* RESTORE BASE REG      @Y30LB24*/
         LR    REG11,REG4                                          0885
*   REG13=SAVREG13;                 /* RESTORE LINK REG      @Y30LB24*/
*                                                                  0886
         LR    REG13,SAVREG13                                      0886
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT BLOCK TO SECTOR ADDRESS IF RPS DEVICE         @Y30LB24*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0887
*   IF UCB2OPT3=OFF THEN            /* IF NOT RPS DEVICE     @Y30LB24*/
         L     @14,DEBDAPTR                                        0887
         L     @14,UCBPTR(,@14)                                    0887
         TM    UCB2OPT3(@14),B'00010000'                           0887
         BZ    @RT00887                                            0887
*     RETURN;                       /* RETURN TO CALLER      @Y30LB24*/
*   DDR=REQR;                       /* SET RECORD FOR RPS    @Y30LB24*/
         IC    @10,REQR                                            0889
         STC   @10,DDR                                             0889
*   REG0=DDKR;                      /* SET CONVERT VALUE     @Y30LB24*/
         L     REG0,DDKR                                           0890
*   RPSSRC(1:1)=UCBTBYT4;           /* SET UCB TYPE BYTE 1   @Y30LB24*/
         MVC   RPSSRC(1),UCBTBYT4(@14)                             0891
*   RPSSRC(2:4)=ADDR(REQRPS);       /* SET RECEIVER ADDR     @Y30LB24*/
         LA    @14,REQRPS                                          0892
         STCM  @14,7,RPSSRC+1                                      0892
*   REG2=RPSSRC;                    /* CONVERSION RTN COURCE @Y30LB24*/
         L     REG2,RPSSRC                                         0893
*   REG3=REG12;                     /* SAVE BASE REG         @Y30LB24*/
         LR    REG3,REG12                                          0894
*   REG4=REG11;                     /* SAVE BASE REG         @Y30LB24*/
         LR    REG4,REG11                                          0895
*   SAVREG13=REG13;                 /* SAVE LINK REG         @Y30LB24*/
         LR    SAVREG13,REG13                                      0896
*   CALL IEC0SCR1;                  /* CALL SECTOR CONVERSION ROUTINE
*                                                            @Y30LB24*/
         L     @10,CVTPTR                                          0897
         L     @15,CVT0SCR1(,@10)                                  0897
         BALR  @14,@15                                             0897
*   REG12=REG3;                     /* RESTORE BASE REG      @Y30LB24*/
         LR    REG12,REG3                                          0898
*   REG11=REG4;                     /* RESTORE BASE REG      @Y30LB24*/
         LR    REG11,REG4                                          0899
*   REG13=SAVREG13;                 /* RESTORE LINK REG      @Y30LB24*/
         LR    REG13,SAVREG13                                      0900
*   RETURN;                         /* RETURN TO CALLER      @Y30LB24*/
@EL00017 DS    0H                                                  0901
@EF00017 DS    0H                                                  0901
@ER00017 LM    @14,@12,@SA00017                                    0901
         BR    @14                                                 0901
*   END VDRCNVRT;                   /* END CONVERSION RTN    @Y30LB24*/
         B     @EL00017                                            0902
*                                                                  0903
*/********************************************************************/
*/*                                                          @YM31086*/
*/*    NAME = VDRANAL, ANALIZE REQUEST BLOCK AND EXTENSION   @YM31086*/
*/*                                                          @YM31086*/
*/*    INPUT = REQUEST BLOCK AND EXTENSION                   @YM31086*/
*/*                                                          @YM31086*/
*/*    PROCESS = VDRANAL INTERROGATES THE REQUEST BLOCK AND  @YM31086*/
*/*    EXTENSION, IF A NON-ZERO RETURN CODE IS RETURNED      @YM31086*/
*/*    DURING THE RECOVERY PROCESS. GROUP, VOLUME OR CSN     @YM31086*/
*/*    INFORMATION IS EXTRACTED AND ADDED TO THE RECOVERY    @YM31086*/
*/*    REPORT.                                               @YM31086*/
*/*                                                          @YM31086*/
*/*    OUTPUT = GROUP (PGROUP), VOLID (PVOLID) AND CSN       @YM31086*/
*/*    INFORMATION (PCSN1, PCSN2) ADDED TO THE RECOVERY      @YM31086*/
*/*    REPORT, WHEN INCLUDED IN THE REQUEST BLOCK OR REQUEST @YM31086*/
*/*    BLOCK EXTENSION.                                      @YM31086*/
*/*                                                          @YM31086*/
*/********************************************************************/
*                                                                  0903
*VDRANAL:                                                          0903
*   PROC OPTIONS(SAVE(14));         /*                       @YM31086*/
*                                                                  0903
VDRANAL  ST    @14,12(,@13)                                        0903
*   /*****************************************************************/
*   /*                                                               */
*   /* EXECUTABLE MACRO - ICBDEFV                            @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0904
*   DCL                                                            0904
*     DEFVR1 REG(1) PTR;            /* ADDRESS OF REQUEST BLOCK    0904
*                                                            @Y30LB02*/
*/*  ******************************************************** @Y30LB02
*                                                                    */
*/*       MACMEAN  MSSC DEFINE VOLUME MACRO                   @Y30LB02
*                                                                    */
*/*  VS1-4/VS2-3 VERSION--06/09/74 LEVEL 00                   @Y30LB02
*                                                                    */
*/*  THIS IS THE UNINITIALIZED LIST FORM                      @Y30LB02
*                                                                    */
*/*  ******************************************************** @Y30LB02
*                                                                    */
*                                                                  0905
*   DCL                                                            0905
*     1 LSTDEFV BASED(DEFVPTR),     /* DEFINE VOLUME REQUEST BLOCK 0905
*                                                            @Y30LB02*/
*      2 DEFVLEN FIXED(31),         /* LENGTH OF DEFINE VOLUME REQ 0905
*                                      BLK=84 HEX            @Y30LB02*/
*      2 DEFVOPCD FIXED(8),         /* DEFINE OPCODE = 18 HEX      0905
*                                                            @Y30LB02*/
*      2 * CHAR(1),                 /* RESERVED AND ZERO     @Y30LB02*/
*      2 DEFVFLG BIT(8),            /* ONE BYTE FLAGS AREA   @Y30LB02*/
*       3 DEFVCR BIT(1),            /* CREATE ATTRIBUTE      @Y30LB02*/
*       3 DEFVELM BIT(1),           /* ELIMINATE ATTRIBUTE   @Y30LB02*/
*       3 DEFVRNM BIT(1),           /* RENAME ATTRIBUTE      @Y30LB02*/
*       3 DEFVREP BIT(1),           /* REPLACE VOLUME FLAGS  @Y30LB02*/
*       3 DEFVELTR BIT(1),          /* ELIMINATE TRANSIENT VOLUME  0905
*                                      ATTRIBUTE             @Y30LB02*/
*       3 DEFVRNTR BIT(1),          /* RENAME TRANSIENT VOLUME     0905
*                                      ATTRIBUTE             @Y30LB02*/
*       3 DEFVACT BIT(1),           /* ACTIVATE TRANSIENT VOLUME   0905
*                                      ATTRIBUTE             @Y30LB02*/
*       3 DEFVDACT BIT(1),          /* DEACTIVATE VOLUME ATTRIBUTE 0905
*                                                            @Y30LB02*/
*      2 DEFVLIB BIT(8),            /* ONE BYTE LIBID        @Y30LB02*/
*       3 * BIT(6),                 /* RESERVED AND MUST BE ZERO   0905
*                                                            @Y30LB02*/
*       3 DEFVLID BIT(2),           /* BINARY NUMBER ZERO TO THREE 0905
*                                                            @Y30LB02*/
*      2 DEFVOLD CHAR(6),           /* VOLUME IDENTIFICATION @Y30LB02*/
*      2 DEFVVFLG BIT(8),           /* VOLUME FLAG ATTRIB    @Y30LB02*/
*       3 DEFVCECT BIT(1),          /* CE CARTRIDGE          @Y30LB02*/
*       3 * BIT(1),                 /* RESERVED BIT          @Y30LB02*/
*       3 DEFVSEC BIT(1),           /* SECURE VOLUME         @Y30LB02*/
*       3 DEFVEXCL BIT(1),          /* EXCLUSIVE VOLUME      @Y30LB02*/
*       3 * BIT(1),                 /* SCRATCH CARTRIDGE RESERVED FOR
*                                      SUBSYS                @Y30LB02*/
*       3 DEFVBIND BIT(1),          /* BIND VOLUME           @Y30LB02*/
*       3 DEFVWINH BIT(1),          /* WRITE INHIBIT         @Y30LB02*/
*       3 * BIT(1),                 /* RESERVED-ZERO         @Y30LB02*/
*      2 * CHAR(1),                 /* BYTE RESVD AREA       @Y30LB02*/
*      2 DEFVNVOL CHAR(6),          /* NEW VOLID             @Y30LB02*/
*      2 * CHAR(2),                 /* 2-BYTE RESERVED AREA  @Y30LB02*/
*      2 DEFVCSN1 CHAR(12),         /* CART SEQUENCE ONE     @Y30LB02*/
*      2 DEFVCSN2 CHAR(12),         /* CART SEQ TWO          @Y30LB02*/
*      2 * CHAR(2),                 /* RESERVED              @Y30LB02*/
*      2 DEFVASID CHAR(2),          /* ASID AREA             @Y30LB02*/
*      2 DEFVECB FIXED(31),         /* EVENT CONTROL BLOCK ADDRESS 0905
*                                                            @Y30LB02*/
*      2 DEFVDATA CHAR(72),         /* USER DATA ARRAY       @Y30LB02*/
*       3 DEFR50 CHAR(2),           /* RESERVED AND MUST ALWAYS BE 0905
*                                      ZERO/BLANK            @Y30LB02*/
*       3 DEFACSEC CHAR(1),         /* ACCESSIBILITY(SECURITY)     0905
*                                                            @Y30LB02*/
*       3 DEFR55 CHAR(26),          /* RESERVED AREA MUST BE       0905
*                                      ZERO/BLANK            @Y30LB02*/
*       3 DEFOWNID CHAR(14),        /* OWNER IDENTIFICATION  @Y30LB02*/
*       3 DEFR60 CHAR(28),          /* RESERVED AREA MUST BE       0905
*                                      ZERO/BLANK            @Y30LB02*/
*       3 DEFTLAB CHAR(1),          /* T LABEL STANDARD VERSION    0905
*                                                            @Y30LB02*/
*      2 DEFVVEXT FIXED(31);        /* MSVC EXTENSION AREA   @Y30LB02*/
*                                                                  0905
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                       @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0906
*                                                                  0906
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZDEFVE) MAPPING FOR DEFVE           @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0906
*/********************************************************************/
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/170/341040         @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          NAME: IEZDEFVE                                  @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          FUNCTION:                                       @Y30LB22*/
*/*          MAPS THE REQUEST BLOCK EXTENSION                @Y30LB22*/
*/*          WHICH IS USED TO PASS ADDITIONAL INFORMATION    @Y30LB22*/
*/*          TO MSVC DURING AN DEFINE VOLUME MASS STORAGE REQUEST. 0906
*/*                                                          @Y30LB22*/
*/*          STATUS: CHANGE LEVEL = 0                        @Y30LB22*/
*/*                                                          @Y30LB22*/
*/********************************************************************/
*                                                                  0906
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS FOR IEZDEFVE                                @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0906
*   DCL                                                            0906
*     DEFLEN FIXED(15) INIT(LENGTH(DEFVE));/* LENGTH         @Y30LB22
*                                      OF EXTENSION          @Y30LB22*/
*   DCL                                                            0907
*     1 DEFVE BASED(DEFVEPTR) BDY(WORD),/*                   @Y30LB22*/
*      2 DEFLNGTH FIXED(31),        /* LENGTH OF EXTENSION   @Y30LB22*/
*      2 DEFGROUP CHAR(8),          /* NAME OF USER MSVGP    @Y30LB22*/
*      2 DEFDESCR CHAR(30),         /* DESCRIPTIVE INFO      @Y30LB22*/
*      2 DEFTO CHAR(4),             /* EXPIRATION DATE       @Y30LB22*/
*      2 DEFFOR FIXED(15),          /* NO DAYS USED IN CAL-  @Y30LB22
*                                      CULATING EXP. DATE    @Y30LB22*/
*      2 DEFBKUPN FIXED(8),         /* MAX. NO. BKUP COPIES  @Y30LB22*/
*      2 DEFLABEL CHAR(6),          /* SER. NO IN SOFTWARE   @Y30LB22
*                                      LABEL                 @Y30LB22*/
*      2 DEFFLAGA BIT(8),           /* INDICATOR FLAGS       @Y30LB22*/
*       3 DEFPFOR BIT(1),           /* DEFFOR IS SPECIFIED   @Y30LB22*/
*       3 DEFPVLAB BIT(1),          /* DEFLABEL SPECIFIED    @Y30LB22*/
*       3 DEFPGRO BIT(1),           /* DEFGROUP SPECIFIED    @Y30LB22*/
*       3 DEFPDESC BIT(1),          /* DEFDESCR SPECIFIED    @Y30LB22*/
*       3 DEFPTO BIT(1),            /* DEFTO IS SPECIFIED    @Y30LB22*/
*       3 DEFPBKUP BIT(1),          /* DEFBKUPN SPECIFIED    @Y30LB22*/
*       3 * BIT(2),                 /* UNUSED                @Y30LB22*/
*      2 DEFFLAGB CHAR(4),          /* STATUS FLAGS          @Y30LB22*/
*       3 DEFSETFL BIT(8),          /* RECOVERY FLAGS        @Y30LB22
*                                      INDICATORS            @Y30LB22*/
*        4 DEFSRCVY BIT(1),         /* SET RECOVERY FLAGS    @Y30LB22*/
*        4 DEFCRCVY BIT(1),         /* CLEAR RECOVERY FLAGS  @Y30LB22*/
*        4 * BIT(6),                /* UNUSED                @Y30LB22*/
*       3 DEFRECFL BIT(8),          /* RECOVERY FLAGS        @Y30LB22*/
*        4 DEFICOPY BIT(1),         /* INCOMPLETE COPY OPER  @Y30LB22*/
*        4 DEFCREAT BIT(1),         /* INCOMPLETE CREATION   @Y30LB22*/
*        4 DEFLAMIS BIT(1),         /* VOL LABEL MISMATCH    @Y30LB22*/
*        4 * BIT(5),                /* UNUSED                @Y30LB22*/
*       3 DEFTYPFL BIT(8),          /* VOLUME TYPE FLAGS     @Y30LB22*/
*        4 DEFGENUS BIT(1),         /* GENERAL USE TYPE VOL  @Y30LB22*/
*        4 DEFRSTD BIT(1),          /* RESTRICTED TYPE VOL   @Y30LB22*/
*        4 DEFDUP BIT(1),           /* DUPLICATE TYPE VOL    @Y30LB22*/
*        4 DEFCOPY BIT(1),          /* COPY TYPE VOLUME      @Y30LB22*/
*        4 * BIT(4),                /* UNUSED                @Y30LB22*/
*       3 DEFNULFL BIT(8),          /* NULLIFY FLAGS         @Y30LB22*/
*        4 DEFNGRP BIT(1),          /* CHANGE TO NONGROUP    @Y30LB22*/
*        4 DEFNDESC BIT(1),         /* NULLIFY THE DESCR     @Y30LB22*/
*        4 DEFNEXPD BIT(1),         /* NULLIFY THE EXP DATE  @Y30LB22*/
*        4 * BIT(5),                /* UNUSED                @Y30LB22*/
*      2 * CHAR(4);                 /* UNUSED                @Y30LB22*/
*                                                                  0908
*   /*****************************************************************/
*   /*                                                               */
*   /* EXECUTABLE MACRO - ICBMCRT                            @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0908
*   DCL                                                            0908
*     MCR1 REG(1) PTR;              /* ADDRESS OF REQUEST BLOCK    0908
*                                                            @Y30LB02*/
*/*  ******************************************************** @Y30LB02
*                                                                    */
*/*     MACMEAN  MSSC MOVE CARTRIDGE MACRO                    @Y30LB02
*                                                                    */
*/*  VS1-4/VS2-3 VERSION--06/09/74 LEVEL 00                   @Y30LB02
*                                                                    */
*/*  THIS IS THE UNINITIALIZED LIST FORM                      @Y30LB02
*                                                                    */
*/*  ******************************************************** @Y30LB02
*                                                                    */
*                                                                  0909
*   DCL                                                            0909
*     1 LSTMCRT BASED(MCRTPTR),     /* MOVE CARTRIDGE REQUEST BLOCK
*                                                            @Y30LB02*/
*      2 MCRTLEN FIXED(31),         /* LENGTH OF MOVE CARTRIDGE    0909
*                                      REQUEST BLK = 30 HEX  @Y30LB02*/
*      2 MCRTOPCD FIXED(8),         /* MOVE CARTRIDGE OPCODE = 0E HEX
*                                                            @Y30LB02*/
*      2 MCRTRES1 CHAR(1),          /* RESERVED AND ZERO     @Y30LB02*/
*      2 MCRTFLG BIT(8),            /* ONE BYTE FLAGS AREA   @Y30LB02*/
*       3 * BIT(2),                 /* RESERVED AND MUST BE ZERO   0909
*                                                            @Y30LB02*/
*       3 MCRTTRAN BIT(1),          /* SOURCE WITH TRANSIENT CSN1  0909
*                                      SPECD                 @Y30LB02*/
*       3 MCRTSCT BIT(1),           /* SOURCE WITH SCRATCH ATTRIBUTE
*                                                            @Y30LB02*/
*       3 * BIT(4),                 /* RESERVED AND MUST BE ZERO   0909
*                                                            @Y30LB02*/
*      2 MCRTLIB BIT(8),            /* BYTE-LIBID            @Y30LB02*/
*       3 * BIT(6),                 /* RESERVED AND MUST BE ZERO   0909
*                                                            @Y30LB02*/
*       3 MCRTLD BIT(2),            /* BINARY NUMBER ZERO TO THREE 0909
*                                                            @Y30LB02*/
*      2 MCRTRES2 CHAR(8),          /* 8-BYTE RES            @Y30LB02*/
*      2 MCRTRES3 CHAR(8),          /* 8-BYTE RES            @Y30LB02*/
*      2 MCRTCSN CHAR(12),          /* CART SER NO           @Y30LB02*/
*      2 MCRTRES4 CHAR(2),          /* RESERVED              @Y30LB02*/
*      2 MCRTASID CHAR(2),          /* ASID AREA             @Y30LB02*/
*      2 MCRTECB FIXED(31),         /* EVENT CONTROL BLOCK ADDRESS 0909
*                                                            @Y30LB02*/
*      2 MCRTVEXT FIXED(31);        /* MSVC EXTENSION AREA   @Y30LB02*/
*                                                                  0909
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                       @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0910
*                                                                  0910
*   /*****************************************************************/
*   /*                                                               */
*   /* EXECUTABLE MACRO - ICBCOVC (CVOL)                     @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0910
*   DCL                                                            0910
*     CVOLR1 REG(1) PTR;            /* DECLARE R1 - ADDRESS OF     0910
*                                      REQUEST BLOCK         @Y30LB02*/
*/*  ******************************************************* @Y30LB02*/
*/*       MACMEAN  MSSC COPY VOLUME MACRO                    @Y30LB02*/
*/*  VS1-4/VS2-3 VERSION--06/09/74 LEVEL 00                  @Y30LB02*/
*/*  THIS IS THE UNINITIALIZED LIST FORM                     @Y30LB02*/
*/*  ******************************************************* @Y30LB02*/
*                                                                  0911
*   DCL                                                            0911
*     1 LSTCVOL BASED(CVOLPTR),     /* COPY VOLUME REQUEST BLOCK   0911
*                                                            @Y30LB02*/
*      2 CVOLLEN FIXED(31),         /* LENGTH OF REQ BLOCK = 28 BYTES
*                                      HEX                   @Y30LB02*/
*      2 CVOLOPCD CHAR(1),          /* COPY VOLUME OPCODE = 2A HEX 0911
*                                                            @Y30LB02*/
*      2 CVOLRES1 CHAR(1),          /* ONE BYTE OF ZERO      @Y30LB02*/
*      2 CVOLFLG BIT(16),           /* FLAGS AREA            @Y30LB02*/
*       3 CVODASCR BIT(1),          /* DASD TO CARTRIDGE ATTRIBUTE 0911
*                                                            @Y30LB02*/
*       3 CVOCRDAS BIT(1),          /* CARTRIDGE TO DASD ATTRIBUTE 0911
*                                                            @Y30LB02*/
*       3 CVOCRCR BIT(1),           /* CARTRIDGE TO CARTRIDGE      0911
*                                      ATTRIBUTE TRANS VOL   @Y30LB02*/
*       3 CVOCRCRV BIT(1),          /* CARTRIDGE TO CARTRIDGE      0911
*                                      ATTRIBUTE VOL INV LIST      0911
*                                                            @Y30LB02*/
*       3 * BIT(12),                /* THIRTEEN BITS RESERVED      0911
*                                                            @Y30LB02*/
*      2 CVOLID CHAR(6),            /* VOLUME ID             @Y30LB02*/
*      2 CVOLASID CHAR(2),          /* ASID AREA             @Y30LB02*/
*      2 CVOLECB FIXED(31),         /* EVENT CONTROL BLOCK   @Y30LB02*/
*      2 CVOLCSN CHAR(12),          /* CSN AREA              @Y30LB02*/
*      2 CVOLRUA FIXED(15),         /* REAL UNIT ADDRESS     @Y30LB02*/
*      2 CVOLRES2 CHAR(2),          /* RESERVED AREA         @Y30LB02*/
*      2 CVOLVEXT FIXED(31);        /* MSVC EXTENTION AREA   @Y30LB02*/
*/* @YM31086                                                         */
*                                                                  0912
*                                                                  0912
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZMESG) MAPPING FOR MESG             @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0912
*/********************************************************************/
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/170/341040         @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          NAME: IEZMESG                                   @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          FUNCTION:                                       @Y30LB22*/
*/*          MAPS THE REQUEST BLOCK FOR A REQUEST            @Y30LB22*/
*/*          TO UPDATE INVENTORY RECORDS BASED ON A          @Y30LB22*/
*/*          PARTICULAR SOLICITED OR UNSOLICITED MESSAGE.    @Y30LB22*/
*/*          REGISTER 1 MUST POINT TO THE REQUEST BLOCK      @Y30LB22*/
*/*          WHEN THE REQUEST IS EXECUTED                    @Y30LB22*/
*/*          (MACRO ICBMESG - SVC 126).                      @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          STATUS:  CHANGE LEVEL = 0                       @Y30LB22*/
*/*                                                          @Y30LB22*/
*/********************************************************************/
*                                                                  0912
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS FOR IEZMESG                                 @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0912
*   DCL                                                            0912
*     MESLEN FIXED(15) INIT(LENGTH(MESG));/*                 @Y30LB22
*                                      LENGTH OF REQUEST BLOCK     0912
*                                                            @Y30LB22*/
*   DCL                                                            0913
*     MESOP BIT(8) CONSTANT('86'X); /*                       @Y30LB22
*                                      OP CODE               @Y30LB22*/
*                                                                  0913
*   /*****************************************************************/
*   /*                                                               */
*   /* MAPPING MACRO DECLARES                                @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0914
*   DCL                                                            0914
*     1 MESG BASED(MESGPTR) BDY(WORD),/*                     @Y30LB22*/
*      2 MESLNGTH FIXED(31),        /* LENGTH OF REQ BLK     @Y30LB22*/
*      2 MESCODE CHAR(4),           /* OPERATION IDENTIFIER  @Y30LB22*/
*       3 MESOPCD BIT(8),           /* OP CODE               @Y30LB22*/
*       3 * CHAR(3),                /* UNUSED                @Y30LB22*/
*      2 MESGBUF CHAR(60);          /* MSC MESSAGE           @Y30LB22*/
*                                                                  0915
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE IDS 04 0A                                     @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0915
*   DCL                                                            0915
*     1 SMSG BASED(ADDR(MESGBUF)) BDY(WORD),/*               @YM31086
*                                      SOLICITED MSGS        @YM31086
*                                      04, 0A                @YM31086*/
*      2 LENSM CHAR(1),             /* LENGTH                @YM31086*/
*      2 CODESM CHAR(1),            /* CODE                  @YM31086*/
*      2 MSGIDSM CHAR(6),           /* MESSAGE ID            @YM31086*/
*      2 VOLIDSM CHAR(6),           /* VOLID                 @YM31086*/
*      2 VFSM CHAR(1),              /* VOL FLAGS             @YM31086*/
*       3 CECART BIT(1),            /* CE CARTRIDGE          @YM31086*/
*       3 * BIT(1),                 /* RESERVED              @YM31086*/
*       3 SECVOL BIT(1),            /* SECURE VOL            @YM31086*/
*       3 EXCLATTB BIT(1),          /* EXCLUSIVE             @YM31086*/
*       3 SCRATCH BIT(1),           /* SCRATCH CART.         @YM31086*/
*       3 BINDATTB BIT(1),          /* BIND                  @YM31086*/
*       3 RONLYATB BIT(1),          /* READ ONLY             @YM31086*/
*       3 * BIT(1),                 /* RESERVED              @YM31086*/
*      2 * CHAR(8),                 /* RESERVED              @YM31086*/
*      2 ZSM CHAR(1),               /* NUMBER OF CSNS        @YM31086*/
*      2 CSN1SM CHAR(12),           /* CSN1                  @YM31086*/
*      2 CSN2SM CHAR(12);           /* CSN2                  @YM31086*/
*                                                                  0916
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE ID 0D                                         @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0916
*   DCL                                                            0916
*     1 SMSGCOPY DEF(SMSG) BDY(WORD),/*                      @YM31086
*                                      SOLICITED MSG         @YM31086
*                                      0D                    @YM31086*/
*      2 * CHAR(8),                 /* RESERVED              @YM31086*/
*      2 POSTCD CHAR(1),            /* POST CODE             @YM31086*/
*      2 EJECTCD CHAR(1),           /* EJECT CODE            @YM31086*/
*      2 * CHAR(2),                 /* RESERVED              @YM31086*/
*      2 VOLIDCSM CHAR(6),          /* VOLID                 @YM31086*/
*      2 * CHAR(2),                 /* RESERVED              @YM31086*/
*      2 NEWCSN CHAR(12),           /* NEW CSN               @YM31086*/
*      2 OLDCSN CHAR(12);           /* OLD CSN               @YM31086*/
*                                                                  0917
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE ID 83                                         @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0917
*   DCL                                                            0917
*     1 USMSG BASED(ADDR(MESGBUF)) BDY(WORD),/*              @YM31086
*                                      UNSOLICITED MSG       @YM31086*/
*      2 LENUSM CHAR(1),            /* LENGTH                @YM31086*/
*      2 CODEUSM CHAR(1),           /* CODE                  @YM31086*/
*      2 ADDRUSM CHAR(2),           /* LIBID AND ADDRESS     @YM31086*/
*       3 LUSM BIT(2),              /* LIBID                 @YM31086*/
*        4 LUSM1 BIT(1),            /* NUMBER                @YM31086*/
*        4 LUSM2 BIT(1),            /* NUMBER                @YM31086*/
*       3 ZUSM BIT(1),              /* Z ADDR                @YM31086*/
*       3 YUSM BIT(5),              /* Y ADDR                @YM31086*/
*       3 XUSM BIT(8),              /* X ADDR                @YM31086*/
*      2 CSN1USM CHAR(12),          /* CSN1/CART ENTERED     @YM31086*/
*      2 CSN2USM CHAR(12),          /* CSN2/OTHER CART OF PAIR     0917
*                                                            @YM31086*/
*      2 VOLIDUSM CHAR(6),          /* VOLID                 @YM31086*/
*      2 SEQNUM CHAR(1),            /* VOL SEQ NUMBER        @YM31086*/
*      2 * CHAR(1);                 /* RESERVED              @YM31086*/
*                                                                  0918
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZRVR) REMOVE VOL REC                @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0918
*/********************************************************************/
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/170/341040         @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          NAME: IEZRVR                                    @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          FUNCTION:                                       @Y30LB22*/
*/*                  MAPS THE REQUEST BLOCK FOR A REMOVE     @Y30LB22*/
*/*                  BASE OR COPY VOLUME RECORD REQUEST      @Y30LB22*/
*/*                  REGISTER 1 MUST POINT TO THE REQUEST    @Y30LB22*/
*/*                  BLOCK WHEN THE REQUEST IS EXECUTED      @Y30LB22*/
*/*                  (MACRO ICBVVIC - SVC 126).              @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          STATUS:  CHANGE LEVEL = 0                       @Y30LB22*/
*/*                                                          @Y30LB22*/
*/********************************************************************/
*                                                                  0918
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS                                             @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0918
*   DCL                                                            0918
*     RVRLEN FIXED(15) INIT(LENGTH(RVR));/* LENGTH OF        @Y30LB22
*                                      REQUEST BLOCK         @Y30LB22*/
*   DCL                                                            0919
*     RVROP BIT(8) CONSTANT('81'X); /* REQUEST OP CODE       @Y30LB22*/
*/********************************************************************/
*                                                                  0920
*   /*****************************************************************/
*   /*                                                               */
*   /* MAPPING MACRO                                         @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0920
*/********************************************************************/
*                                                                  0920
*   DCL                                                            0920
*     1 RVR BASED(RVRPTR) BDY(WORD),/*                       @Y30LB22*/
*      2 RVRLNGTH FIXED(31),        /* LENGTH OF REQ BLK     @Y30LB22*/
*      2 RVRCODE CHAR(4),           /* OPERATION IDENTIFIER  @Y30LB22*/
*       3 RVROPCD BIT(8),           /* OPCODE                @Y30LB22*/
*       3 * CHAR(3),                /* UNUSED                @Y30LB22*/
*      2 RVRVOLID CHAR(6),          /* SER NO OF VOL WHOSE   @Y30LB22
*                                      REC IS TO BE REMOVED  @Y30LB22*/
*      2 RVRBLNK1 CHAR(1),          /* BLANK                 @Y30LB22*/
*      2 RVRCPYID FIXED(8),         /* ID OF A COPY RECORD   @Y30LB22*/
*      2 RVRFLAGA BIT(32),          /* INDICATOR FLAGS       @Y30LB22*/
*       3 RVRBASEV BIT(1),          /* THE BASE VOLUME REC   @Y30LB22
*                                      IS TO BE REMOVED      @Y30LB22*/
*       3 RVRCOPYV BIT(1),          /* THE COPY VOLUME REC   @Y30LB22
*                                      IS TO BE REMOVED      @Y30LB22*/
*       3 * BIT(30),                /* UNUSED                @Y30LB22*/
*      2 * CHAR(4);                 /* UNUSED                @Y30LB22*/
*                                                                  0921
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZMGP) CREA - MODIFY GRP             @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0921
*/********************************************************************/
*/*                                                                  */
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/172/341040         @Y30LB22*/
*/*                                                          @G24LB37*/
*/*          NAME: IEZMGP                                    @G24LB37*/
*/*                                                          @G24LB37*/
*/*          FUNCTION:                                       @Y30LB22*/
*/*          MAPS THE REQUEST BLOCK FOR A CREATE OR MODIFY   @Y30LB22*/
*/*          GROUP RECORD REQUEST.  REGISTER 1 MUST          @Y30LB22*/
*/*          POINT TO THE REQUEST BLOCK WHEN THE REQUEST IS  @Y30LB22*/
*/*          EXECUTED  (MACRO ICBVVIC - SVC 126).            @G24LB37*/
*/*                                                          @G24LB37*/
*/*          STATUS:  MVS                                    @G24LB37*/
*/*                                                          @G24LB37*/
*/*          CHANGE LEVEL:                                   @G24LB37*/
*/*          @G24LB37  ALLOCATE TO MOUNTED VOLUMES  06/07/76 @G24LB37*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0921
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS                                             @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0921
*   DCL                                                            0921
*     MGPCGOP BIT(8) CONSTANT('82'X);/*                      @Y30LB22*/
*                                                                  0921
*   /*****************************************************************/
*   /*                                                               */
*   /* CREATE GRP REQ. OP CODE                               @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0922
*   DCL                                                            0922
*     MGPMGOP BIT(8) CONSTANT('83'X);/*                      @Y30LB22*/
*                                                                  0922
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY GRP REQ. OP CODE                               @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0923
*   DCL                                                            0923
*     MGPLEN FIXED(15) INIT(LENGTH(MGP));/*                  @Y30LB22*/
*                                                                  0923
*   /*****************************************************************/
*   /*                                                               */
*   /* REQUEST BLOCK LENGTH                                  @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0924
*   DCL                                                            0924
*     1 MGP BASED(MGPPTR) BDY(WORD),/*                       @Y30LB22*/
*      2 MGPLNGTH FIXED(31),        /* REQ BLK LENGTH        @Y30LB22*/
*      2 MGPCODE CHAR(4),           /* OPERATION ID          @Y30LB22*/
*       3 MGPOPCD BIT(8),           /* OP CODE               @Y30LB22*/
*       3 * CHAR(3),                /* UNUSED                @Y30LB22*/
*      2 MGPGROUP CHAR(8),          /* USER DEFINED MSVGP    @Y30LB22*/
*      2 MGPOWNER CHAR(10),         /* NAME/ID OF OWNER      @Y30LB22*/
*      2 MGPRI FIXED(15),           /* PRIM SPACE DEFAULT    @Y30LB22*/
*      2 MGPSEC FIXED(15),          /* SEC SPACE DEFAULT     @Y30LB22*/
*      2 MGPRETPD FIXED(15),        /* GRP RETENTION PERIOD  @Y30LB22*/
*      2 MGPTHOLD FIXED(8),         /* GRP THREHOLD PERCENT  @Y30LB22*/
*      2 MGPCONUS FIXED(8),         /* MAXIMUM NUMBER        @G24LB37
*                                      OF CONCURRENT USERS   @G24LB37
*                                      PER HOST TO A VOLUME  @G24LB37
*                                      WITHIN A GROUP        @G24LB37*/
*      2 MGPRESSP FIXED(8),         /* PERCENT OF RESERVED   @G24LB37
*                                      SPACE PER VOLUME      @G24LB37
*                                      WITHIN A GROUP        @G24LB37*/
*      2 * CHAR(1),                 /* UNUSED                @G24LB37*/
*      2 MGPDESCR CHAR(30),         /* DESCRIPTIVE INFO      @Y30LB22*/
*      2 MGPADDR CHAR(30),          /* MAILING ADDRESS       @Y30LB22*/
*      2 MGPFLAGA BIT(32),          /* INDICATOR FLAGS       @Y30LB22*/
*       3 MGPRLSE BIT(1),           /* UNUSED SPACE TO BE    @Y30LB22
*                                      RELEASED              @Y30LB22*/
*       3 MGPNRLSE BIT(1),          /* UNUSED SPACE NOT TO   @Y30LB22
*                                      BE RELEASED           @Y30LB22*/
*       3 MGPBIND BIT(1),           /* RESERVE ENTIRE VOL    @Y30LB22*/
*       3 MGPNBIND BIT(1),          /* VOL WILL NOT BE       @Y30LB22
*                                      BOUND TO THE          @Y30LB22
*                                      STAGING VOLUME        @Y30LB22*/
*       3 MGPEXCL BIT(1),           /* EXCLUSIVE USE         @Y30LB22*/
*       3 MGPSHARE BIT(1),          /* SHAREABLE             @Y30LB22*/
*       3 MGPRONLY BIT(1),          /* READ ONLY             @Y30LB22*/
*       3 MGPRW BIT(1),             /* VOL IS READ/WRITE     @Y30LB22*/
*       3 MGPDERAS BIT(1),          /* MSS HDWR WILL ERASE   @Y30LB22
*                                      DATA ON DESTAGED VOL  @Y30LB22*/
*       3 MGPNDERA BIT(1),          /* MSS HDWR WILL NOT     @Y30LB22
*                                      ERASE DATA ON         @Y30LB22
*                                      DESTAGED VOLUME       @Y30LB22*/
*       3 MGPFLGRO BIT(1),          /* MGPGROUP SPECIFIED    @Y30LB22*/
*       3 MGPFLOWN BIT(1),          /* MGPOWNER SPECIFIED    @Y30LB22*/
*       3 MGPFLPRI BIT(1),          /* MGPPRI IS SPECIFIED   @Y30LB22*/
*       3 MGPFLSEC BIT(1),          /* MGPSEC IS SPECIFIED   @Y30LB22*/
*       3 MGPFLTHO BIT(1),          /* MGPTHOLD SPECIFIED    @Y30LB22*/
*       3 MGPFLRET BIT(1),          /* MGPRETPD SPECIFIED    @Y30LB22*/
*       3 MGPFLDES BIT(1),          /* MGPDESCR SPECIFIED    @Y30LB22*/
*       3 MGPFLADD BIT(1),          /* MGPADDR IS SPECIFIED  @Y30LB22*/
*       3 MGPNTHLD BIT(1),          /* NULLIFY THRESHOLD     @Y30LB22
*                                      PERCENT               @Y30LB22*/
*       3 MGPNOWNR BIT(1),          /* NULLIFY OWNER         @Y30LB22*/
*       3 MGPNRETP BIT(1),          /* NULLIFY RETEN PERIOD  @Y30LB22*/
*       3 MGPNDESC BIT(1),          /* NULLIFY DESCRIPTION   @Y30LB22*/
*       3 MGPNADDR BIT(1),          /* NULLIFY ADDRESS       @Y30LB22*/
*       3 MGPFLCON BIT(1),          /* MGPCONUS SPECIFIED    @G24LB37*/
*       3 MGPFLRES BIT(1),          /* MGPRESSP SPECIFIED    @G24LB37*/
*       3 * BIT(7),                 /* UNUSED                @G24LB37*/
*      2 * CHAR(4);                 /* UNUSED                @Y30LB22*/
*                                                                  0925
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZSGP) SCRATCH GROUP                 @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0925
*/********************************************************************/
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/170/341040         @Y30LB22*/
*/*                                                                  */
*/*          NAME: IEZSGP                                            */
*/*                                                                  */
*/*          FUNCTION:                                               */
*/*                  MAPS THE REQUEST BLOCK FOR A SCRATCH    @Y30LB22*/
*/*                  GROUP RECORD REQUEST.  REGISTER         @Y30LB22*/
*/*                  1 MUST POINT TO THE REQUEST BLOCK WHEN  @Y30LB22*/
*/*                  THE REQUEST IS EXECUTED (MACRO ICBVVIC  @Y30LB22*/
*/*                  - SVC 126).                             @Y30LB22*/
*/*                                                                  */
*/*          STATUS:  CHANGE LEVEL = 0                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0925
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS                                             @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0925
*   DCL                                                            0925
*     SGPLEN FIXED(15) INIT(LENGTH(SGP));/* LENGTH OF        @Y30LB22
*                                      REQUEST BLOCK         @Y30LB22*/
*   DCL                                                            0926
*     SGPOP BIT(8) CONSTANT('84'X); /* REQ. OP CODE          @Y30LB22*/
*                                                                  0926
*   /*****************************************************************/
*   /*                                                               */
*   /* MAPPING MACRO                                         @Y30LB22*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0927
*   DCL                                                            0927
*     1 SGP BASED(SGPPTR) BDY(WORD),/*                       @Y30LB22*/
*      2 SGPLNGTH FIXED(31),        /* LENGTH OF REQUEST BLOCK     0927
*                                                            @Y30LB22*/
*      2 SGPCODE CHAR(4),           /* OPERATION IDENTIFIER  @Y30LB22*/
*       3 SGPOPCD BIT(8),           /* OP CODE               @Y30LB22*/
*       3 * CHAR(3),                /* UNUSED                @Y30LB22*/
*      2 SGPGROUP CHAR(8),          /* NAME OF USER DEFINED  @Y30LB22
*                                      GROUP                 @Y30LB22*/
*      2 * CHAR(4);                 /* UNUSED                @Y30LB22*/
*                                                                  0928
*   /*****************************************************************/
*   /*                                                               */
*   /* %INCLUDE SYSLIB(IEZMVR) MOD VOL REC                   @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0928
*/********************************************************************/
*/*          MACCOMP  Y30LB22          SC1DR/BL0019          @Y30LB22*/
*/*          MACSTAT  Y30LB22          74/170/341040         @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          NAME: IEZMVR                                    @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          FUNCTION:                                       @Y30LB22*/
*/*                  MAPS THE REQUEST BLOCK FOR A MODIFY     @Y30LB22*/
*/*                  BASE OR COPY VOLUME RECORD REQUEST.     @Y30LB22*/
*/*                  REGISTER 1 MUST POINT TO THE REQUEST    @Y30LB22*/
*/*                  BLOCK WHEN THE REQUEST IS EXECUTED      @Y30LB22*/
*/*                  (MACRO ICBVVIC - SVC 126).              @Y30LB22*/
*/*                                                          @Y30LB22*/
*/*          STATUS:  CHANGE LEVEL = 0                       @Y30LB22*/
*/*                                                          @Y30LB22*/
*/********************************************************************/
*/*   CONSTANTS                                              @Y30LB22*/
*                                                                  0928
*   DCL                                                            0928
*     MVRLEN FIXED(15) INIT(LENGTH(MVR));/* LENGTH           @Y30LB22
*                                      OF REQUEST BLOCK      @Y30LB22*/
*   DCL                                                            0929
*     MVROP BIT(8) CONSTANT('85'X); /* REQUEST OP CODE       @Y30LB22*/
*/*   MAPPING MACRO                                          @Y30LB22*/
*                                                                  0930
*   DCL                                                            0930
*     1 MVR BASED(MVRPTR) BDY(WORD),/*                       @Y30LB22*/
*      2 MVRLNGTH FIXED(31),        /* LENGTH OF REQ. BLK    @Y30LB22*/
*      2 MVRCODE CHAR(4),           /* OPERATION IDENTIFIER  @Y30LB22*/
*       3 MVROPCD BIT(8),           /* OP CODE               @Y30LB22*/
*       3 * CHAR(3),                /* UNUSED                @Y30LB22*/
*      2 MVRFLAGA BIT(32),          /* INDICATOR FLAGS       @Y30LB22*/
*       3 MVRFLFOR BIT(1),          /* MVRFOR IS SPECIFIED   @Y30LB22*/
*       3 MVRFLGRO BIT(1),          /* MVRGROUP SPECIFIED    @Y30LB22*/
*       3 MVRFLBAS BIT(1),          /* MVRBVOL IS SPECIFIED  @Y30LB22*/
*       3 MVRFLDES BIT(1),          /* MVRDES IS SPECIFIED   @Y30LB22*/
*       3 MVRFLTO BIT(1),           /* MVRTO IS SPECIFIED    @Y30LB22*/
*       3 MVRFLCSN BIT(1),          /* MVRCSN IS SPECIFIED   @Y30LB22*/
*       3 MVRFLBK BIT(1),           /* MVRBKUPN SPECIFIED    @Y30LB22*/
*       3 MVRFLLAB BIT(1),          /* MVRLABEL SPECIFIED    @Y30LB22*/
*       3 MVRGEN BIT(1),            /* GENERAL VOLUME        @Y30LB22*/
*       3 MVRRSTD BIT(1),           /* RESTRICTED VOLUME     @Y30LB22*/
*       3 MVRNGRP BIT(1),           /* CHANGE VOL TO NON-    @Y30LB22
*                                      GROUPED               @Y30LB22*/
*       3 MVRBKUP BIT(1),           /* CHANGE COPY TO BCKUP  @Y30LB22*/
*       3 MVRNDESC BIT(1),          /* NULLIFY DESCRIPTION   @Y30LB22*/
*       3 MVRNEXPD BIT(1),          /* NULLIFY EXP. DATE     @Y30LB22*/
*       3 MVRSLMIS BIT(1),          /* SET VOL. LABEL        @Y30LB22
*                                      MISMATCH FLAG         @Y30LB22*/
*       3 MVRCLMIS BIT(1),          /* CLEAR VOL. LABEL      @Y30LB22
*                                      MISMATCH FLAG         @Y30LB22*/
*       3 MVRCIVCF BIT(1),          /* CLEAR INCOMPLETE VOL  @Y30LB22
*                                      CREATION FLAG         @Y30LB22*/
*       3 MVRCICPY BIT(1),          /* CLEAR INCOMPLETE VOL  @Y30LB22
*                                      COPY FLAG             @Y30LB22*/
*       3 * BIT(14),                /* UNUSED                @Y30LB22*/
*      2 MVRBVOL CHAR(6),           /* VOLID OF BASE OR      @Y30LB22
*                                      COPY RECORD           @Y30LB22
*                                      TO BE MODIFIED        @Y30LB22*/
*      2 MVRFOR FIXED(15),          /* NO. OF DAYS USED IN   @Y30LB22
*                                      CALCULATING EXP DATE  @Y30LB22*/
*      2 MVRGROUP CHAR(8),          /* USER SPECIFIED MSVGP  @Y30LB22*/
*      2 MVRDES CHAR(30),           /* DESCRIPTIVE INFO      @Y30LB22*/
*      2 MVRTO CHAR(4),             /* JULIAN EXP. DATE      @Y30LB22*/
*      2 MVRCSN CHAR(12),           /* CARTRIDGE SERIAL      @Y30LB22
*                                      NUMBER OF THE VOL     @Y30LB22*/
*      2 MVRBKUPN FIXED(8),         /* MAX NO. OF ALLOWED    @Y30LB22
*                                      BACKUP COPIES         @Y30LB22*/
*      2 MVRBLNK1 CHAR(1),          /* BLANK                 @Y30LB22*/
*      2 MVRLABEL CHAR(6),          /* SER. NO IN SOFTWARE   @Y30LB22
*                                      LABEL                 @Y30LB22*/
*      2 * CHAR(6);                 /* UNUSED                @Y30LB22*/
*                                                                  0931
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS TO TEST FOR THE MSC MACRO (ICBVUT00)        @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0931
*   DCL                                                            0931
*     MVCRT BIT(8) CONSTANT('0E'X); /* MOVE CART             @YM31086*/
*   DCL                                                            0932
*     DEFVOL BIT(8) CONSTANT('18'X);/* DEF VOL               @YM31086*/
*   DCL                                                            0933
*     CPYCART BIT(8) CONSTANT('28'X);/* COPY CART            @YM31086*/
*   DCL                                                            0934
*     CPYVOL BIT(8) CONSTANT('2A'X);/* COPY VOL              @YM31086*/
*                                                                  0934
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS TO TEST MESSAGE IDS                         @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0935
*   DCL                                                            0935
*     CRTVOL BIT(8) CONSTANT('04'X);/* CREATE VOL            @YM31086*/
*   DCL                                                            0936
*     ACTVOL BIT(8) CONSTANT('0A'X);/* ACTIVE VOL            @YM31086*/
*   DCL                                                            0937
*     CPYCRT BIT(8) CONSTANT('0D'X);/* COPY CART             @YM31086*/
*   DCL                                                            0938
*     CAS BIT(8) CONSTANT('83'X);   /* CAS                   @YM31086*/
*                                                                  0938
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS TO TEST FOR THE MSC MACRO (ICBVUT01)        @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0939
*   DCL                                                            0939
*     REMOVOL BIT(8) CONSTANT('81'X);/* REMOVE VOL           @YM31086*/
*   DCL                                                            0940
*     CREGRP BIT(8) CONSTANT('82'X);/* CREATE GP             @YM31086*/
*   DCL                                                            0941
*     MODGRP BIT(8) CONSTANT('83'X);/* MOD GROUP             @YM31086*/
*   DCL                                                            0942
*     SCRGRP BIT(8) CONSTANT('84'X);/* SCR GROUP             @YM31086*/
*   DCL                                                            0943
*     MODVOL BIT(8) CONSTANT('85'X);/* MOD VOL REC           @YM31086*/
*                                                                  0944
*   /*****************************************************************/
*   /*                                                               */
*   /* PTR DECLARATIONS                                      @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0944
*   DCL                                                            0944
*     MCRTPTR PTR(31);              /* PTR ICBMCRT           @YM31086*/
*   DCL                                                            0945
*     DEFVPTR PTR(31) DEF(MCRTPTR); /* PTR ICBDEFV           @YM31086*/
*   DCL                                                            0946
*     CVOLPTR PTR(31) DEF(MCRTPTR); /* PTR ICBCOVC VOL       @YM31086*/
*   DCL                                                            0947
*     DEFVEPTR PTR(31);             /* PTR ICBDEFVE          @YM31086*/
*   DCL                                                            0948
*     MESGPTR PTR(31) DEF(MCRTPTR); /* MSG BLOCK PTR         @YM31086*/
*   DCL                                                            0949
*     RVRPTR PTR(31) DEF(MCRTPTR);  /* PTR REQUEST BLK       @YM31086*/
*   DCL                                                            0950
*     MGPPTR PTR(31) DEF(MCRTPTR);  /* PTR REQUEST BLK       @YM31086*/
*   DCL                                                            0951
*     SGPPTR PTR(31) DEF(MCRTPTR);  /* PTR SCR GRP           @YM31086*/
*   DCL                                                            0952
*     MVRPTR PTR(31) DEF(MCRTPTR);  /* PTR MOD VOL REC       @YM31086*/
*   DCL                                                            0953
*     DMLSTPTR PTR(31) DEF(MCRTPTR);/* PTR ICBMNTDE          @G24LB23*/
*                                                                  0953
*   /*****************************************************************/
*   /*                                                               */
*   /* CHARACTER DECLARATIONS                                @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0954
*   DCL                                                            0954
*     BINZERO CHAR(12) INIT('000000000000000000000000'X);/*  @YM31086*/
*                                                                  0955
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH ADDRESSABILTY FOR MAPPING MACROS            @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0955
*   MCRTPTR=ADDR(RPLVUTIL);         /* ADDR TO ICBMCRT       @YM31086*/
*                                                                  0955
         L     @14,RPLVPTR                                         0955
         LA    @14,RPLVUTIL(,@14)                                  0955
         ST    @14,MCRTPTR                                         0955
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ICBVUT00 MSC CODES                            @YM31086*/
*   /* DEFINE VOLUME                                         @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0956
*   IF DEFVOPCD=DEFVOL THEN         /*                       @YM31086*/
         L     @14,DEFVPTR                                         0956
         CLI   DEFVOPCD(@14),24                                    0956
         BNE   @RF00956                                            0956
*     DO;                           /*                       @YM31086*/
*       DEFVEPTR=DEFVPTR+DEFVLEN;   /*                       @YM31086*/
         LR    @06,@14                                             0958
         AL    @06,DEFVLEN(,@14)                                   0958
         ST    @06,DEFVEPTR                                        0958
*       IF DEFVOLD^=BINZERO THEN                                   0959
         CLC   DEFVOLD(6,@14),BINZERO                              0959
         BE    @RF00959                                            0959
*         PVOLID=DEFVOLD;           /*                       @YM31086*/
         MVC   PVOLID(6),DEFVOLD(@14)                              0960
*       IF DEFPGRO=ON THEN          /*                       @YM31086*/
@RF00959 L     @14,DEFVEPTR                                        0961
         TM    DEFPGRO(@14),B'00100000'                            0961
         BNO   @RF00961                                            0961
*         PGROUP=DEFGROUP;          /*                       @YM31086*/
         MVC   PGROUP(8),DEFGROUP(@14)                             0962
*       IF DEFVCSN1^=BINZERO THEN                                  0963
@RF00961 L     @14,DEFVPTR                                         0963
         CLC   DEFVCSN1(12,@14),BINZERO                            0963
         BE    @RF00963                                            0963
*         PCSN1=DEFVCSN1;           /*                       @YM31086*/
         MVC   PCSN1(12),DEFVCSN1(@14)                             0964
*       IF DEFVCSN2^=BINZERO THEN                                  0965
@RF00963 L     @14,DEFVPTR                                         0965
         CLC   DEFVCSN2(12,@14),BINZERO                            0965
         BE    @RF00965                                            0965
*         PCSN2=DEFVCSN2;           /*                       @YM31086*/
         MVC   PCSN2(12),DEFVCSN2(@14)                             0966
*       RETURN;                     /*                       @YM31086*/
@EL00018 DS    0H                                                  0967
@EF00018 DS    0H                                                  0967
@ER00018 L     @14,12(,@13)                                        0967
         BR    @14                                                 0967
*     END;                          /*                       @YM31086*/
*                                                                  0968
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE CARTRIDGE                                        @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0969
*   IF MCRTOPCD=MVCRT THEN          /*                       @YM31086*/
@RF00956 L     @14,MCRTPTR                                         0969
         CLI   MCRTOPCD(@14),14                                    0969
         BNE   @RF00969                                            0969
*     DO;                           /*                       @YM31086*/
*       IF MCRTCSN^=BINZERO THEN                                   0971
         CLC   MCRTCSN(12,@14),BINZERO                             0971
         BE    @RF00971                                            0971
*         PCSN1=MCRTCSN;            /*                       @YM31086*/
         MVC   PCSN1(12),MCRTCSN(@14)                              0972
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            0973
*     END;                          /*                       @YM31086*/
*                                                                  0974
*   /*****************************************************************/
*   /*                                                               */
*   /* COPY VOLUME/CARTRIDGE                                 @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0975
*   IF CVOLOPCD=CPYVOL×CVOLOPCD=CPYCART THEN/*               @YM31086*/
@RF00969 L     @14,CVOLPTR                                         0975
         CLI   CVOLOPCD(@14),X'2A'                                 0975
         BE    @RT00975                                            0975
         CLI   CVOLOPCD(@14),X'28'                                 0975
         BNE   @RF00975                                            0975
@RT00975 DS    0H                                                  0976
*     DO;                           /*                       @YM31086*/
*       IF CVOLID^=BINZERO THEN                                    0977
         L     @14,CVOLPTR                                         0977
         CLC   CVOLID(6,@14),BINZERO                               0977
         BE    @RF00977                                            0977
*         PVOLID=CVOLID;            /*                       @YM31086*/
         MVC   PVOLID(6),CVOLID(@14)                               0978
*       IF CVOLCSN^=BINZERO THEN                                   0979
@RF00977 L     @14,CVOLPTR                                         0979
         CLC   CVOLCSN(12,@14),BINZERO                             0979
         BE    @RF00979                                            0979
*         PCSN1=CVOLCSN;            /*                       @YM31086*/
         MVC   PCSN1(12),CVOLCSN(@14)                              0980
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            0981
*     END;                          /*                       @YM31086*/
*                                                                  0983
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS DEMOUNT REQUEST                               @G24LB23*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0983
*   IF DMLSTPTR->DMOPCD=DEMOUNT THEN/*                       @G24LB23*/
@RF00975 L     @14,DMLSTPTR                                        0983
         CLI   DMOPCD(@14),6                                       0983
         BNE   @RF00983                                            0983
*     DO;                           /*                       @G24LB23*/
*       IF DMLSTPTR->DMVOL^=BINZERO THEN/*                   @G24LB23*/
         CLC   DMVOL(6,@14),BINZERO                                0985
         BE    @RF00985                                            0985
*         PVOLID=DMLSTPTR->DMVOL;   /*                       @G24LB23*/
         MVC   PVOLID(6),DMVOL(@14)                                0986
*       RETURN;                     /*                       @G24LB23*/
         B     @EL00018                                            0987
*     END;                          /*                       @G24LB23*/
*                                                                  0988
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ICBVMS00 MSC CODES                            @YM31086*/
*   /* CREATE OR ACTIVATE VOLUME                             @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0989
*   IF CODESM=CRTVOL×CODESM=ACTVOL THEN/*                    @YM31086*/
@RF00983 LA    @14,8                                               0989
         AL    @14,MESGPTR                                         0989
         CLI   CODESM(@14),X'04'                                   0989
         BE    @RT00989                                            0989
         CLI   CODESM(@14),X'0A'                                   0989
         BNE   @RF00989                                            0989
@RT00989 DS    0H                                                  0990
*     DO;                           /*                       @YM31086*/
*       IF VOLIDSM^=BINZERO THEN                                   0991
         LA    @14,8                                               0991
         AL    @14,MESGPTR                                         0991
         CLC   VOLIDSM(6,@14),BINZERO                              0991
         BE    @RF00991                                            0991
*         PVOLID=VOLIDSM;           /*                       @YM31086*/
         MVC   PVOLID(6),VOLIDSM(@14)                              0992
*       IF CSN1SM^=BINZERO THEN                                    0993
@RF00991 LA    @14,8                                               0993
         AL    @14,MESGPTR                                         0993
         CLC   CSN1SM(12,@14),BINZERO                              0993
         BE    @RF00993                                            0993
*         PCSN1=CSN1SM;             /*                       @YM31086*/
         MVC   PCSN1(12),CSN1SM(@14)                               0994
*       IF CSN2SM^=BINZERO THEN                                    0995
@RF00993 LA    @14,8                                               0995
         AL    @14,MESGPTR                                         0995
         CLC   CSN2SM(12,@14),BINZERO                              0995
         BE    @RF00995                                            0995
*         PCSN2=CSN2SM;             /*                       @YM31086*/
         MVC   PCSN2(12),CSN2SM(@14)                               0996
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            0997
*     END;                          /*                       @YM31086*/
*                                                                  0998
*   /*****************************************************************/
*   /*                                                               */
*   /* COPY CARTRIDGE                                        @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0999
*   IF CODESM=CPYCRT THEN           /*                       @YM31086*/
@RF00989 LA    @14,8                                               0999
         AL    @14,MESGPTR                                         0999
         CLI   CODESM(@14),X'0D'                                   0999
         BNE   @RF00999                                            0999
*     DO;                           /*                       @YM31086*/
*       IF VOLIDCSM^=BINZERO THEN                                  1001
         CLC   VOLIDCSM(6,@14),BINZERO                             1001
         BE    @RF01001                                            1001
*         PVOLID=VOLIDCSM;          /*                       @YM31086*/
         MVC   PVOLID(6),VOLIDCSM(@14)                             1002
*       IF NEWCSN^=BINZERO THEN                                    1003
@RF01001 LA    @14,8                                               1003
         AL    @14,MESGPTR                                         1003
         CLC   NEWCSN(12,@14),BINZERO                              1003
         BE    @RF01003                                            1003
*         PCSN1=NEWCSN;             /*                       @YM31086*/
         MVC   PCSN1(12),NEWCSN(@14)                               1004
*       IF OLDCSN^=BINZERO THEN                                    1005
@RF01003 LA    @14,8                                               1005
         AL    @14,MESGPTR                                         1005
         CLC   OLDCSN(12,@14),BINZERO                              1005
         BE    @RF01005                                            1005
*         PCSN2=OLDCSN;             /*                       @YM31086*/
         MVC   PCSN2(12),OLDCSN(@14)                               1006
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1007
*     END;                          /*                       @YM31086*/
*                                                                  1008
*   /*****************************************************************/
*   /*                                                               */
*   /* VOLUME ENTRY AT CARTRIDGE ACESS STATION               @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1009
*   IF CODESM=CAS THEN              /*                       @YM31086*/
@RF00999 LA    @14,8                                               1009
         AL    @14,MESGPTR                                         1009
         CLI   CODESM(@14),X'83'                                   1009
         BNE   @RF01009                                            1009
*     DO;                           /*                       @YM31086*/
*       IF VOLIDUSM^=BINZERO THEN                                  1011
         CLC   VOLIDUSM(6,@14),BINZERO                             1011
         BE    @RF01011                                            1011
*         PVOLID=VOLIDUSM;          /*                       @YM31086*/
         MVC   PVOLID(6),VOLIDUSM(@14)                             1012
*       IF CSN1USM^=BINZERO THEN                                   1013
@RF01011 LA    @14,8                                               1013
         AL    @14,MESGPTR                                         1013
         CLC   CSN1USM(12,@14),BINZERO                             1013
         BE    @RF01013                                            1013
*         PCSN1=CSN1USM;            /*                       @YM31086*/
         MVC   PCSN1(12),CSN1USM(@14)                              1014
*       IF CSN2USM^=BINZERO THEN                                   1015
@RF01013 LA    @14,8                                               1015
         AL    @14,MESGPTR                                         1015
         CLC   CSN2USM(12,@14),BINZERO                             1015
         BE    @RF01015                                            1015
*         PCSN2=CSN2USM;            /*                       @YM31086*/
         MVC   PCSN2(12),CSN2USM(@14)                              1016
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1017
*     END;                          /*                       @YM31086*/
*                                                                  1019
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ICBVUT01 MSC CODES                            @YM31086*/
*   /* REMOVE VOLUME RECORD                                  @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1019
*   IF RVROPCD=REMOVOL THEN         /*                       @YM31086*/
@RF01009 L     @14,RVRPTR                                          1019
         CLI   RVROPCD(@14),X'81'                                  1019
         BNE   @RF01019                                            1019
*     DO;                           /*                       @YM31086*/
*       IF RVRVOLID^=BINZERO THEN                                  1021
         CLC   RVRVOLID(6,@14),BINZERO                             1021
         BE    @RF01021                                            1021
*         PVOLID=RVRVOLID;          /*                       @YM31086*/
         MVC   PVOLID(6),RVRVOLID(@14)                             1022
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1023
*     END;                          /*                       @YM31086*/
*                                                                  1024
*   /*****************************************************************/
*   /*                                                               */
*   /* CREATE OR MODIFY GROUP                                @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1025
*   IF RVROPCD=CREGRP×RVROPCD=MODGRP THEN/*                  @YM31086*/
@RF01019 L     @14,RVRPTR                                          1025
         CLI   RVROPCD(@14),X'82'                                  1025
         BE    @RT01025                                            1025
         CLI   RVROPCD(@14),X'83'                                  1025
         BNE   @RF01025                                            1025
@RT01025 DS    0H                                                  1026
*     DO;                           /*                       @YM31086*/
*       IF MGPGROUP^=BINZERO THEN                                  1027
         L     @14,MGPPTR                                          1027
         CLC   MGPGROUP(8,@14),BINZERO                             1027
         BE    @RF01027                                            1027
*         PGROUP=MGPGROUP;          /*                       @YM31086*/
         MVC   PGROUP(8),MGPGROUP(@14)                             1028
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1029
*     END;                          /*                       @YM31086*/
*                                                                  1030
*   /*****************************************************************/
*   /*                                                               */
*   /* SCRATCH GROUP                                         @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1031
*   IF RVROPCD=SCRGRP THEN          /*                       @YM31086*/
@RF01025 L     @14,RVRPTR                                          1031
         CLI   RVROPCD(@14),X'84'                                  1031
         BNE   @RF01031                                            1031
*     DO;                           /*                       @YM31086*/
*       IF SGPGROUP^=BINZERO THEN                                  1033
         L     @14,SGPPTR                                          1033
         CLC   SGPGROUP(8,@14),BINZERO                             1033
         BE    @RF01033                                            1033
*         PGROUP=SGPGROUP;          /*                       @YM31086*/
         MVC   PGROUP(8),SGPGROUP(@14)                             1034
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1035
*     END;                          /*                       @YM31086*/
*                                                                  1036
*   /*****************************************************************/
*   /*                                                               */
*   /* MODIFY VOLUME RECORD                                  @YM31086*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1037
*   IF RVROPCD=MODVOL THEN          /*                       @YM31086*/
@RF01031 L     @14,RVRPTR                                          1037
         CLI   RVROPCD(@14),X'85'                                  1037
         BNE   @RF01037                                            1037
*     DO;                           /*                       @YM31086*/
*       IF MVRFLBAS=ON THEN         /*                       @YM31086*/
         L     @14,MVRPTR                                          1039
         TM    MVRFLBAS(@14),B'00100000'                           1039
         BNO   @RF01039                                            1039
*         PVOLID=MVRBVOL;           /*                       @YM31086*/
         MVC   PVOLID(6),MVRBVOL(@14)                              1040
*       IF MVRFLGRO=ON THEN         /*                       @YM31086*/
@RF01039 L     @14,MVRPTR                                          1041
         TM    MVRFLGRO(@14),B'01000000'                           1041
         BNO   @RF01041                                            1041
*         PGROUP=MVRGROUP;          /*                       @YM31086*/
         MVC   PGROUP(8),MVRGROUP(@14)                             1042
*       IF MVRFLCSN=ON THEN         /*                       @YM31086*/
@RF01041 L     @14,MVRPTR                                          1043
         TM    MVRFLCSN(@14),B'00000100'                           1043
         BNO   @RF01043                                            1043
*         PCSN1=MVRCSN;             /*                       @YM31086*/
         MVC   PCSN1(12),MVRCSN(@14)                               1044
*       RETURN;                     /*                       @YM31086*/
         B     @EL00018                                            1045
*     END;                          /*                       @YM31086*/
*   END VDRANAL;                    /*                       @YM31086*/
         B     @EL00018                                            1047
*   END ICBVDR01                    /* END ICBVDR01          @YM31086*/
*                                                                  1048
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZSSC  )                                       */
*/*%INCLUDE SYSLIB  (IEZVVICB)                                       */
*/*%INCLUDE SYSLIB  (IEZRPLV )                                       */
*/*%INCLUDE SYSLIB  (IEZINIT )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IHAECB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IEZDEFVE)                                       */
*/*%INCLUDE SYSLIB  (IEZMESG )                                       */
*/*%INCLUDE SYSLIB  (IEZRVR  )                                       */
*/*%INCLUDE SYSLIB  (IEZMGP  )                                       */
*/*%INCLUDE SYSLIB  (IEZSGP  )                                       */
*/*%INCLUDE SYSLIB  (IEZMVR  )                                       */
*                                                                  1048
*       ;                                                          1048
@DATA    DS    0H
@CH00089 DC    H'22'
@CH02849 DC    H'150'
@CH02847 DC    H'185'
@CH00128 DC    H'1024'
@SM02853 MVC   REPLY(0),PARMS(PARMPTR)
@SM02860 MVC   PDEMSG1(0),JRNLUTIL+13(@14)
@SM02862 MVC   PDEMSG1(0),JRNLUTIL+4(@14)
@SM02864 MVC   PDEMSG1(0),JRNLUTIO+4(@14)
         DS    0F
@SA00001 DS    18F
@SA00004 DS    1F
@SA00002 DS    1F
@SA00005 DS    1F
@SA00008 DS    1F
@SA00009 DS    1F
@SA00011 DS    1F
@SA00015 DS    1F
@SA00006 DS    1F
@SA00016 DS    1F
@SA00007 DS    1F
@SA00014 DS    1F
@SA00017 DS    15F
@SA00010 DS    1F
@TF00001 DS    F
         DS    0F
@CF00069 DC    F'1'
@CH00069 EQU   @CF00069+2
@CF00067 DC    F'2'
@CF00125 DC    F'3'
@CF00058 DC    F'4'
@CF00079 DC    F'5'
@CF00305 DC    F'7'
@CF01115 DC    F'14'
@CF00045 DC    F'16'
@CF00130 DC    F'56'
@CF02848 DC    F'132'
@CF00120 DC    F'519'
@CF00097 DC    F'4096'
@CF02857 DC    F'-16'
@CF02856 DC    F'-12'
@CF02859 DC    XL4'0000FFFF'
         DS    0D
VVIPTR   DS    A
INITPTR  DS    A
RPLVPTR  DS    A
TOTFCODE DS    A
WTORECB  DS    F
JRNLECB  DS    F
RSAVE    DS    F
RETSAVE  DS    F
QUEPTR   DS    A
MSGCNT   DS    F
LINECNT  DS    F
PAGECNT  DS    F
DCBPTR   DS    A
DEBPTR   DS    A
DEBDAPTR DS    A
DEBEXPTR DS    A
DEBSBPTR DS    A
IOBPRPTR DS    A
IOBSTPTR DS    A
ECBPTR   DS    A
JRNLPTR  DS    A
DEFVEPTR DS    A
MCRTPTR  DS    A
UCBDCPTR DS    A
QUEELEMS DS    H
INILEN   DC    AL2(20)
DEFLEN   DC    AL2(64)
MESLEN   DC    AL2(68)
RVRLEN   DC    AL2(24)
MGPLEN   DC    AL2(104)
SGPLEN   DC    AL2(20)
MVRLEN   DC    AL2(88)
@CC02416 DC    C'RECOVER'
@CC02418 DC    C'BACKUP'
@CC02420 DC    C'PRINT'
@CC02417 EQU   @CC02416
@CC02419 EQU   @CC02418
@CC02421 DC    C'PRT'
TIME     DS    CL8
         ORG   TIME
HOUR     DS    CL2
@NM00001 DC    CL1'.'
MINUTE   DS    CL2
@NM00002 DC    CL1':'
SECOND   DS    CL2
         ORG   TIME+8
CPUID    DS    CL11
CPUIDA   DS    CL6
         ORG   CPUIDA
CPUID1   DS    CL5
@NM00003 DC    AL1(15)
         ORG   CPUIDA+6
         DS    CL2
WORK1    DS    CL8
WORK2    DS    CL5
         DS    CL3
REQLIST1 DS    CL400
RECOVERY DS    BL1
BACKUP   DS    BL1
RSVRSW   DS    BL1
DEQSW    DS    BL1
OPENSW   DS    BL1
READSW   DS    BL1
WRITESW  DS    BL1
RDISABLE DS    BL1
RENABLE  DS    BL1
GETMSW   DS    BL1
QNAME    DC    CL8'SYSZMSVI'
JRNAME   DC    CL8'MSVIJRNL'
BLANK    DC    CL1' '
CREC     DC    CL8'MSVCJRNL'
MSGICB   DC    CL1'I'
SIGN     DC    X'0F'
REPLY    DS    CL100
TRANS    DC    CL16'0123456789ABCDEF'
PRTAREA  DS    CL121
         ORG   PRTAREA
PCARR    DC    CL1'0'
@NM00005 DC    CL6' '
PDETAIL  DS    CL114
         ORG   PDETAIL
PREDATE  DS    CL5
@NM00006 DS    CL2
PDETME   DS    CL2
PDEMSG   DS    CL94
         ORG   PDEMSG
PREQNO   DS    CL5
@NM00007 DS    CL3
PDECPU   DS    CL10
PREQCD   DS    CL2
PDEMSG1  DS    CL12
PREACD   DS    CL4
@NM00008 DS    CL8
PVOLID   DS    CL6
@NM00009 DS    CL4
PGROUP   DS    CL8
@NM00010 DS    CL4
PCSN1    DS    CL12
@NM00011 DS    CL4
PCSN2    DS    CL12
         ORG   PRTAREA+121
HEADING1 DS    CL121
         ORG   HEADING1
@NM00012 DC    CL1'1'
@NM00013 DC    CL5'     '
@NM00014 DC    CL8'ICBVDR01'
@NM00015 DC    CL8'        '
@NM00016 DC    CL10' '
H1TITLE  DC    CL25' '
@NM00017 DC    CL10' '
@NM00018 DC    CL6'DATE  '
H1DATE   DC    CL5' '
@NM00019 DC    CL23' '
@NM00020 DC    CL5'PAGE '
H1PAGE   DC    CL5' '
@NM00021 DC    CL10' '
         ORG   HEADING1+121
HEADING2 DS    CL121
         ORG   HEADING2
@NM00022 DC    CL1'0'
@NM00023 DC    CL6' '
@NM00024 DC    CL5'DATE '
@NM00025 DC    CL3' '
@NM00026 DC    CL11'REQUEST NO.'
@NM00027 DC    CL5' '
@NM00028 DC    CL12'REQUEST CODE'
@NM00029 DC    CL3' '
@NM00030 DC    CL11'RETURN CODE'
@NM00031 DC    CL4' '
@NM00032 DC    CL6'VOLID'
@NM00033 DC    CL5' '
@NM00034 DC    CL8'GROUP'
@NM00035 DC    CL4' '
@NM00036 DC    CL12'CSN1'
@NM00037 DC    CL4' '
@NM00038 DC    CL12'CSN2'
@NM00039 DC    CL9' '
         ORG   HEADING2+121
HEADING3 DS    CL121
         ORG   HEADING3
@NM00040 DC    CL1'0'
@NM00041 DC    CL6' '
@NM00042 DC    CL5'DATE '
@NM00043 DC    CL2' '
@NM00044 DC    CL4'TIME'
@NM00045 DC    CL6' '
@NM00046 DC    CL5'CPUID'
@NM00047 DC    CL7' '
@NM00048 DC    CL7'MESSAGE'
@NM00049 DC    CL78' '
         ORG   HEADING3+121
TITLE1   DC    CL25'JOURNALLED MESSAGE REPORT'
TITLE2   DC    CL25'INVENTORY RECOVERY REPORT'
VDRPATCH DS    CL200
         ORG   VDRPATCH
@NM00050 DC    CL20'ICBVDR01 PATCH AREA '
@NM00051 DC    XL180'0'
         ORG   VDRPATCH+200
         DS    CL1
JRNLIOB  DS    CL48
CCWCHN   DS    CL40
         ORG   CCWCHN
RPSCCW   DS    CL8
         ORG   RPSCCW
RPS      DS    BL1
         ORG   RPS
@NM00087 DC    X'23'
         ORG   RPSCCW+1
RPSADDR  DS    AL3
RPSFLGS  DS    BL1
         ORG   RPSFLGS
@NM00088 DC    X'60'
         ORG   RPSCCW+5
RPSCNT   DS    BL3
         ORG   RPSCNT
@NM00089 DC    AL3(1)
         ORG   CCWCHN+8
SRCHCCW  DS    CL8
         ORG   SRCHCCW
SRCH     DS    BL1
         ORG   SRCH
@NM00090 DC    X'31'
         ORG   SRCHCCW+1
SRCHADDR DS    AL3
SRCHFLGS DS    BL1
         ORG   SRCHFLGS
@NM00091 DC    X'60'
         ORG   SRCHCCW+5
SRCHCNT  DS    BL3
         ORG   SRCHCNT
@NM00092 DC    AL3(5)
         ORG   CCWCHN+16
TICCCW   DS    CL8
         ORG   TICCCW
TIC      DS    BL1
         ORG   TIC
@NM00093 DC    X'08'
         ORG   TICCCW+1
TICADDR  DS    AL3
TICFLGS  DS    BL1
         ORG   TICFLGS
@NM00094 DC    X'60'
         ORG   TICCCW+5
TICCNT   DS    BL3
         ORG   TICCNT
@NM00095 DC    AL3(0)
         ORG   CCWCHN+24
IOCCW    DS    CL8
         ORG   IOCCW
IO       DS    BL1
IOADDR   DS    AL3
IOFLGS   DS    BL1
         ORG   IOFLGS
@NM00096 DC    X'60'
         ORG   IOCCW+5
IOCNT    DS    BL3
         ORG   IOCNT
@NM00097 DC    AL3(1024)
         ORG   CCWCHN+32
NOPCCW   DS    CL8
         ORG   NOPCCW
@NM00098 DC    X'03'
@NM00099 DC    AL3(0)
@NM00100 DC    X'20'
@NM00101 DC    AL3(1)
         ORG   CCWCHN+40
DDKR     DS    CL4
         ORG   DDKR
DD       DC    AL2(1032)
DDK      DC    AL1(0)
DDR      DS    FL1
         ORG   DDKR+4
RPSSRC   DS    CL4
LIMITTTR DS    CL4
REQLST   DS    CL28
         ORG   REQLST
REQTTR   DS    CL4
         ORG   REQTTR
REQTT    DS    FL2
REQR     DS    FL1
REQN     DS    CL1
         ORG   REQLST+4
REQABS   DS    CL8
REQREM   DS    FL2
REQNXT   DS    FL2
REQAREA  DS    AL4
REQRPS   DS    CL1
@NM00102 DS    CL3
REQRPT   DS    FL4
         ORG   REQLST+28
CONTREC  DS    CL1032
         ORG   CONTREC
CONTTTR  DS    CL4
         ORG   CONTTTR
CONTTT   DS    CL2
CONTR    DS    CL1
CONTN    DS    CL1
         ORG   CONTREC+4
CONTABS  DS    CL8
CONTREM  DS    FL2
CONTNXT  DS    FL2
CONTAREA DS    AL4
CONTRPS  DS    CL1
@NM00103 DS    CL3
ORDRTTR  DS    CL4
         ORG   ORDRTTR
ORDRTT   DS    CL2
ORDRR    DS    CL1
ORDRN    DS    CL1
         ORG   CONTREC+28
ORDRABS  DS    CL8
ORDRREM  DS    FL2
ORDRNXT  DS    FL2
ORDRAREA DS    AL4
ORDRRPS  DS    CL1
@NM00104 DS    CL3
MSGTTR   DS    CL4
         ORG   MSGTTR
MSGTT    DS    CL2
MSGR     DS    CL1
MSGN     DS    CL1
         ORG   CONTREC+52
MSGABS   DS    CL8
MSGREM   DS    FL2
MSGNXT   DS    FL2
MSGAREA  DS    AL4
MSGRPS   DS    CL1
@NM00105 DS    CL3
TRKSREM  DS    FL2
TRKSTHR  DS    FL2
CONTRPT  DS    FL2
@NM00106 DS    CL2
CONTID   DS    CL8
         ORG   CONTREC+1032
BINZERO  DC    X'000000000000000000000000'
ICBVDR01 CSECT
M0       EQU   0
M8       EQU   8
N2       EQU   2
N3       EQU   3
N4       EQU   4
N5       EQU   5
N6       EQU   6
N7       EQU   7
N240     EQU   240
ICBVDR01 CSECT
*                                                         /*  @Y30LB24*
MSG1     WTO   'ICB416I ICBVVICB NOT INITIALIZED',                     *
               ROUTCDE=(2,11),DESC=6,MF=L
MSG2     WTO   'ICB437I ICBVDR01 ERROR SUBTASK PROCESSING CODE=XXXX',  *
               ROUTCDE=(2,11),DESC=6,MF=L
MSG3     WTO   'ICB457I PARAMETER SPECIFICATION ERROR',                *
               ROUTCDE=(2,11),DESC=6,MF=L
MSG4     WTO   'ICB458I I/O ERROR - MSVC JOURNAL CONTROL RECORD',      *
               ROUTCDE=(2,11),DESC=6,MF=L
MSG5     WTO   'ICB459I I/O ERROR - MSVC JOURNAL DATA RECORD',         *
               ROUTCDE=(2,11),DESC=6,MF=L
ICBVDR01 CSECT
RESLIST1 RESERVE (QNAME,JRNAME,E,M8,SYSTEMS),UCB=RESLIST1,MF=L
ICBVDR01 CSECT
*                                                        /*  @Y30LB24*/
JRNL     DCB   DSORG=PS,MACRF=E,RECFM=FS,DEVD=DA,                      *
               DDNAME=MSVCJRNL
PRINT    DCB   DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=121,BLKSIZE=121,      *
               DDNAME=SYSPRINT
ICBVDR01 CSECT
*                                              /*            @Y30LB24*/
OPNLST1  OPEN (,(OUTPUT)),MF=L         OPEN LIST
CLSLST   OPEN (,),MF=L                 CLOSE LIST
ICBVDR01 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REQCNT   EQU   @10
I        EQU   @09
TEMPCHN  EQU   @09
VDRNMTRK EQU   @10
TEMPPTR  EQU   @07
SAVREG13 EQU   @07
FAILCODE EQU   @08
PARMPTR  EQU   @07
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG15    EQU   @15
CVOLR1   EQU   @01
DEFVR1   EQU   @01
MCR1     EQU   @01
MDREG1   EQU   @01
CVTPTR   EQU   16
DEMQUE   EQU   0
NQUEPTR  EQU   DEMQUE
ELEMCNT  EQU   DEMQUE+4
ELEMENT  EQU   DEMQUE+6
REQSTNO  EQU   ELEMENT
REQST    EQU   ELEMENT+4
PARMLIST EQU   0
PLENGTH  EQU   PARMLIST
PARMS    EQU   PARMLIST+2
PARMLST  EQU   0
LISTPTR  EQU   PARMLST
DMLST    EQU   0
DMLEN    EQU   DMLST
DMOPCD   EQU   DMLST+4
DMNTFLAG EQU   DMLST+6
DMVOL    EQU   DMLST+8
DMHOST   EQU   DMLST+20
CVTMAP   EQU   0
CVTPCNVT EQU   CVTMAP+28
CVTDATE  EQU   CVTMAP+56
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVT0SCR1 EQU   CVTMAP+232
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTICB   EQU   CVTXTNT2+48
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ICB2SSCB EQU   0
ICBOPT   EQU   ICB2SSCB+48
ICBFLG   EQU   ICB2SSCB+52
ICBFG1   EQU   ICBFLG
ICBVVICB EQU   ICB2SSCB+76
ICBTRACE EQU   ICB2SSCB+148
VVICB    EQU   0
VVIFLGA  EQU   VVICB+15
VVIFLG0  EQU   VVIFLGA
VVIFLG2  EQU   VVIFLGA
RPLV     EQU   0
RPLVQPTR EQU   RPLV
RPLVECB  EQU   RPLV+4
RPLTCBPR EQU   RPLV+8
RPLFLAGA EQU   RPLV+28
RPLFTIME EQU   RPLFLAGA
RPLJRCVY EQU   RPLFLAGA
RPLVTLEN EQU   RPLV+30
RPLRCODE EQU   RPLV+32
RPLVRETC EQU   RPLV+34
RPLVDATE EQU   RPLV+38
RPLVSAM  EQU   RPLV+56
RPLVOPT  EQU   RPLVSAM+40
RPLVUTIL EQU   RPLV+132
INITVVI  EQU   0
INILNGTH EQU   INITVVI
INITOPCD EQU   INITVVI+4
INIFLAGA EQU   INITVVI+5
INIENABL EQU   INIFLAGA
INIDISAB EQU   INIFLAGA
INIFLAGB EQU   INITVVI+6
INIJRNL  EQU   INIFLAGB
INIABLE  EQU   INIFLAGB
INIUCAT  EQU   INITVVI+8
IECPCNVT EQU   0
IEC0SCR1 EQU   0
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFEC  EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
IHADCS28 EQU   0
DCBOPTCD EQU   IHADCS28
DCBOPTZ  EQU   DCBOPTCD
IHADCS44 EQU   0
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBECBPB EQU   IOBECBPT+1
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBNMTRK EQU   DEBDASD+14
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00086 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
JRNLLST  EQU   0
JRNLLEN  EQU   JRNLLST
JRNLCODE EQU   JRNLLST+4
JRNLFLGS EQU   JRNLLST+6
JRNLFTIM EQU   JRNLFLGS
JRNLDTFG EQU   JRNLFLGS
JRNLDATE EQU   JRNLLST+8
JRNLUTIL EQU   JRNLLST+12
UTILLEN  EQU   JRNLUTIL
UTILOP   EQU   JRNLUTIL+4
LSTDEFV  EQU   0
DEFVLEN  EQU   LSTDEFV
DEFVOPCD EQU   LSTDEFV+4
DEFVFLG  EQU   LSTDEFV+6
DEFVLIB  EQU   LSTDEFV+7
DEFVOLD  EQU   LSTDEFV+8
DEFVVFLG EQU   LSTDEFV+14
DEFVCSN1 EQU   LSTDEFV+24
DEFVCSN2 EQU   LSTDEFV+36
DEFVDATA EQU   LSTDEFV+56
DEFVE    EQU   0
DEFGROUP EQU   DEFVE+4
DEFFLAGA EQU   DEFVE+55
DEFPGRO  EQU   DEFFLAGA
DEFFLAGB EQU   DEFVE+56
DEFSETFL EQU   DEFFLAGB
DEFRECFL EQU   DEFFLAGB+1
DEFTYPFL EQU   DEFFLAGB+2
DEFNULFL EQU   DEFFLAGB+3
LSTMCRT  EQU   0
MCRTOPCD EQU   LSTMCRT+4
MCRTFLG  EQU   LSTMCRT+6
MCRTLIB  EQU   LSTMCRT+7
MCRTCSN  EQU   LSTMCRT+24
LSTCVOL  EQU   0
CVOLOPCD EQU   LSTCVOL+4
CVOLFLG  EQU   LSTCVOL+6
CVOLID   EQU   LSTCVOL+8
CVOLCSN  EQU   LSTCVOL+20
MESG     EQU   0
MESCODE  EQU   MESG+4
MESGBUF  EQU   MESG+8
SMSG     EQU   0
CODESM   EQU   SMSG+1
VOLIDSM  EQU   SMSG+8
VFSM     EQU   SMSG+14
CSN1SM   EQU   SMSG+24
CSN2SM   EQU   SMSG+36
USMSG    EQU   0
ADDRUSM  EQU   USMSG+2
LUSM     EQU   ADDRUSM
CSN1USM  EQU   USMSG+4
CSN2USM  EQU   USMSG+16
VOLIDUSM EQU   USMSG+28
RVR      EQU   0
RVRCODE  EQU   RVR+4
RVROPCD  EQU   RVRCODE
RVRVOLID EQU   RVR+8
RVRFLAGA EQU   RVR+16
MGP      EQU   0
MGPCODE  EQU   MGP+4
MGPGROUP EQU   MGP+8
MGPFLAGA EQU   MGP+96
SGP      EQU   0
SGPCODE  EQU   SGP+4
SGPGROUP EQU   SGP+8
MVR      EQU   0
MVRCODE  EQU   MVR+4
MVRFLAGA EQU   MVR+8
MVRFLGRO EQU   MVRFLAGA
MVRFLBAS EQU   MVRFLAGA
MVRFLCSN EQU   MVRFLAGA
MVRBVOL  EQU   MVR+12
MVRGROUP EQU   MVR+20
MVRCSN   EQU   MVR+62
UCBBGN   EQU   0
RCHAR    EQU   RSAVE
RUCBADDR EQU   RESLIST1+12
RECPLEN  EQU   RPLVQPTR
RECCODE  EQU   RPLVECB
ROPCODE  EQU   RECCODE
CAPS     EQU   REPLY
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
UCBPTR   EQU   DEBUCBAD
IOBCHN   EQU   JRNLIOB
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00085 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
DATAREC  EQU   CONTREC
JRNLUTIO EQU   JRNLLST+8
UTILLEO  EQU   JRNLUTIO
TIMCPU   EQU   JRNLLST
JRNLTME  EQU   TIMCPU+16
JRNLCPU  EQU   TIMCPU+20
DEFVPTR  EQU   MCRTPTR
CVOLPTR  EQU   MCRTPTR
MESGPTR  EQU   MCRTPTR
SMSGCOPY EQU   SMSG
VOLIDCSM EQU   SMSGCOPY+12
NEWCSN   EQU   SMSGCOPY+20
OLDCSN   EQU   SMSGCOPY+32
RVRPTR   EQU   MCRTPTR
MGPPTR   EQU   MCRTPTR
SGPPTR   EQU   MCRTPTR
MVRPTR   EQU   MCRTPTR
DMLSTPTR EQU   MCRTPTR
DMHOSTID EQU   DMHOST
DMNTLEN  EQU   DMLEN
DMOPCODE EQU   DMOPCD
DMVOLID  EQU   DMVOL
ICBPTR   EQU   CVTICB
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00132 EQU   SMSGCOPY+18
@NM00131 EQU   SMSGCOPY+10
EJECTCD  EQU   SMSGCOPY+9
POSTCD   EQU   SMSGCOPY+8
@NM00130 EQU   SMSGCOPY
@NM00107 EQU   TIMCPU
UTILOPO  EQU   JRNLUTIO+4
DATAD    EQU   DATAREC
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00085
UCBSKPFG EQU   @NM00085
UCBRIPND EQU   @NM00085
UCBRTIAC EQU   @NM00085
UCBRSV79 EQU   @NM00085
UCBRSV78 EQU   @NM00085
UCBRSV77 EQU   @NM00085
UCBOLTEP EQU   @NM00085
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00084 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00004 EQU   RECCODE+1
@NM00145 EQU   MVR+82
MVRLABEL EQU   MVR+76
MVRBLNK1 EQU   MVR+75
MVRBKUPN EQU   MVR+74
MVRTO    EQU   MVR+58
MVRDES   EQU   MVR+28
MVRFOR   EQU   MVR+18
@NM00144 EQU   MVRFLAGA+2
MVRCICPY EQU   MVRFLAGA+2
MVRCIVCF EQU   MVRFLAGA+2
MVRCLMIS EQU   MVRFLAGA+1
MVRSLMIS EQU   MVRFLAGA+1
MVRNEXPD EQU   MVRFLAGA+1
MVRNDESC EQU   MVRFLAGA+1
MVRBKUP  EQU   MVRFLAGA+1
MVRNGRP  EQU   MVRFLAGA+1
MVRRSTD  EQU   MVRFLAGA+1
MVRGEN   EQU   MVRFLAGA+1
MVRFLLAB EQU   MVRFLAGA
MVRFLBK  EQU   MVRFLAGA
MVRFLTO  EQU   MVRFLAGA
MVRFLDES EQU   MVRFLAGA
MVRFLFOR EQU   MVRFLAGA
@NM00143 EQU   MVRCODE+1
MVROPCD  EQU   MVRCODE
MVRLNGTH EQU   MVR
@NM00142 EQU   SGP+16
@NM00141 EQU   SGPCODE+1
SGPOPCD  EQU   SGPCODE
SGPLNGTH EQU   SGP
@NM00140 EQU   MGP+100
@NM00139 EQU   MGPFLAGA+3
MGPFLRES EQU   MGPFLAGA+3
MGPFLCON EQU   MGPFLAGA+2
MGPNADDR EQU   MGPFLAGA+2
MGPNDESC EQU   MGPFLAGA+2
MGPNRETP EQU   MGPFLAGA+2
MGPNOWNR EQU   MGPFLAGA+2
MGPNTHLD EQU   MGPFLAGA+2
MGPFLADD EQU   MGPFLAGA+2
MGPFLDES EQU   MGPFLAGA+2
MGPFLRET EQU   MGPFLAGA+1
MGPFLTHO EQU   MGPFLAGA+1
MGPFLSEC EQU   MGPFLAGA+1
MGPFLPRI EQU   MGPFLAGA+1
MGPFLOWN EQU   MGPFLAGA+1
MGPFLGRO EQU   MGPFLAGA+1
MGPNDERA EQU   MGPFLAGA+1
MGPDERAS EQU   MGPFLAGA+1
MGPRW    EQU   MGPFLAGA
MGPRONLY EQU   MGPFLAGA
MGPSHARE EQU   MGPFLAGA
MGPEXCL  EQU   MGPFLAGA
MGPNBIND EQU   MGPFLAGA
MGPBIND  EQU   MGPFLAGA
MGPNRLSE EQU   MGPFLAGA
MGPRLSE  EQU   MGPFLAGA
MGPADDR  EQU   MGP+66
MGPDESCR EQU   MGP+36
@NM00138 EQU   MGP+35
MGPRESSP EQU   MGP+34
MGPCONUS EQU   MGP+33
MGPTHOLD EQU   MGP+32
MGPRETPD EQU   MGP+30
MGPSEC   EQU   MGP+28
MGPRI    EQU   MGP+26
MGPOWNER EQU   MGP+16
@NM00137 EQU   MGPCODE+1
MGPOPCD  EQU   MGPCODE
MGPLNGTH EQU   MGP
@NM00136 EQU   RVR+20
@NM00135 EQU   RVRFLAGA
RVRCOPYV EQU   RVRFLAGA
RVRBASEV EQU   RVRFLAGA
RVRCPYID EQU   RVR+15
RVRBLNK1 EQU   RVR+14
@NM00134 EQU   RVRCODE+1
RVRLNGTH EQU   RVR
@NM00133 EQU   USMSG+35
SEQNUM   EQU   USMSG+34
XUSM     EQU   ADDRUSM+1
YUSM     EQU   ADDRUSM
ZUSM     EQU   ADDRUSM
LUSM2    EQU   LUSM
LUSM1    EQU   LUSM
CODEUSM  EQU   USMSG+1
LENUSM   EQU   USMSG
ZSM      EQU   SMSG+23
@NM00129 EQU   SMSG+15
@NM00128 EQU   VFSM
RONLYATB EQU   VFSM
BINDATTB EQU   VFSM
SCRATCH  EQU   VFSM
EXCLATTB EQU   VFSM
SECVOL   EQU   VFSM
@NM00127 EQU   VFSM
CECART   EQU   VFSM
MSGIDSM  EQU   SMSG+2
LENSM    EQU   SMSG
@NM00126 EQU   MESCODE+1
MESOPCD  EQU   MESCODE
MESLNGTH EQU   MESG
CVOLVEXT EQU   LSTCVOL+36
CVOLRES2 EQU   LSTCVOL+34
CVOLRUA  EQU   LSTCVOL+32
CVOLECB  EQU   LSTCVOL+16
CVOLASID EQU   LSTCVOL+14
@NM00125 EQU   CVOLFLG
CVOCRCRV EQU   CVOLFLG
CVOCRCR  EQU   CVOLFLG
CVOCRDAS EQU   CVOLFLG
CVODASCR EQU   CVOLFLG
CVOLRES1 EQU   LSTCVOL+5
CVOLLEN  EQU   LSTCVOL
MCRTVEXT EQU   LSTMCRT+44
MCRTECB  EQU   LSTMCRT+40
MCRTASID EQU   LSTMCRT+38
MCRTRES4 EQU   LSTMCRT+36
MCRTRES3 EQU   LSTMCRT+16
MCRTRES2 EQU   LSTMCRT+8
MCRTLD   EQU   MCRTLIB
@NM00124 EQU   MCRTLIB
@NM00123 EQU   MCRTFLG
MCRTSCT  EQU   MCRTFLG
MCRTTRAN EQU   MCRTFLG
@NM00122 EQU   MCRTFLG
MCRTRES1 EQU   LSTMCRT+5
MCRTLEN  EQU   LSTMCRT
@NM00121 EQU   DEFVE+60
@NM00120 EQU   DEFNULFL
DEFNEXPD EQU   DEFNULFL
DEFNDESC EQU   DEFNULFL
DEFNGRP  EQU   DEFNULFL
@NM00119 EQU   DEFTYPFL
DEFCOPY  EQU   DEFTYPFL
DEFDUP   EQU   DEFTYPFL
DEFRSTD  EQU   DEFTYPFL
DEFGENUS EQU   DEFTYPFL
@NM00118 EQU   DEFRECFL
DEFLAMIS EQU   DEFRECFL
DEFCREAT EQU   DEFRECFL
DEFICOPY EQU   DEFRECFL
@NM00117 EQU   DEFSETFL
DEFCRCVY EQU   DEFSETFL
DEFSRCVY EQU   DEFSETFL
@NM00116 EQU   DEFFLAGA
DEFPBKUP EQU   DEFFLAGA
DEFPTO   EQU   DEFFLAGA
DEFPDESC EQU   DEFFLAGA
DEFPVLAB EQU   DEFFLAGA
DEFPFOR  EQU   DEFFLAGA
DEFLABEL EQU   DEFVE+49
DEFBKUPN EQU   DEFVE+48
DEFFOR   EQU   DEFVE+46
DEFTO    EQU   DEFVE+42
DEFDESCR EQU   DEFVE+12
DEFLNGTH EQU   DEFVE
DEFVVEXT EQU   LSTDEFV+128
DEFTLAB  EQU   DEFVDATA+71
DEFR60   EQU   DEFVDATA+43
DEFOWNID EQU   DEFVDATA+29
DEFR55   EQU   DEFVDATA+3
DEFACSEC EQU   DEFVDATA+2
DEFR50   EQU   DEFVDATA
DEFVECB  EQU   LSTDEFV+52
DEFVASID EQU   LSTDEFV+50
@NM00115 EQU   LSTDEFV+48
@NM00114 EQU   LSTDEFV+22
DEFVNVOL EQU   LSTDEFV+16
@NM00113 EQU   LSTDEFV+15
@NM00112 EQU   DEFVVFLG
DEFVWINH EQU   DEFVVFLG
DEFVBIND EQU   DEFVVFLG
@NM00111 EQU   DEFVVFLG
DEFVEXCL EQU   DEFVVFLG
DEFVSEC  EQU   DEFVVFLG
@NM00110 EQU   DEFVVFLG
DEFVCECT EQU   DEFVVFLG
DEFVLID  EQU   DEFVLIB
@NM00109 EQU   DEFVLIB
DEFVDACT EQU   DEFVFLG
DEFVACT  EQU   DEFVFLG
DEFVRNTR EQU   DEFVFLG
DEFVELTR EQU   DEFVFLG
DEFVREP  EQU   DEFVFLG
DEFVRNM  EQU   DEFVFLG
DEFVELM  EQU   DEFVFLG
DEFVCR   EQU   DEFVFLG
@NM00108 EQU   LSTDEFV+5
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00086
UCBHALI  EQU   @NM00086
UCBRSV09 EQU   @NM00086
UCBRSV08 EQU   @NM00086
UCBRSV07 EQU   @NM00086
UCBRSV06 EQU   @NM00086
UCBRSV05 EQU   @NM00086
UCBRSV04 EQU   @NM00086
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00083 EQU   UCB
DEBXRV40 EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBRSV19 EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00082 EQU   DEBACS08+12
@NM00081 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00080 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00079 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
ECBEVNT  EQU   ECBEXTND
@NM00078 EQU   ECBEXTND
@NM00077 EQU   ECBBYTE3
@NM00076 EQU   ECBEXTBA
@NM00075 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
@NM00074 EQU   IHADCS44+10
DCBXENDA EQU   IHADCS44+8
DCBCENDA EQU   IHADCS44+6
DCBSIOA  EQU   IHADCS44+4
DCBPCIA  EQU   IHADCS44+2
DCBEOEA  EQU   IHADCS44
@NM00073 EQU   IHADCS28+1
@NM00072 EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
@NM00071 EQU   DCBOPTCD
DCBDEBA  EQU   DCBDEBAD+1
@NM00070 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00069 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBTRBAL EQU   IHADCS01+6
@NM00068 EQU   IHADCS01+5
@NM00067 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00066 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00065 EQU   IHADCB
@NM00064 EQU   INITVVI+16
INIVCODE EQU   INITVVI+7
@NM00063 EQU   INIFLAGB
INIRESTR EQU   INIFLAGB
INIVERFY EQU   INIFLAGB
@NM00062 EQU   INIFLAGA
ININIT   EQU   INIFLAGA
RPLVBLN  EQU   RPLVSAM+52
RPLVRLN  EQU   RPLVSAM+48
@NM00061 EQU   RPLVSAM+44
RPLVUPD  EQU   RPLVOPT+1
@NM00060 EQU   RPLVOPT
RPLVKGE  EQU   RPLVOPT
@NM00059 EQU   RPLVOPT
RPLVNEXT EQU   RPLVOPT
RPLVDIR  EQU   RPLVOPT
RPLVLOC  EQU   RPLVOPT
RPLVKEY  EQU   RPLVSAM+36
RPLVBUF  EQU   RPLVSAM+32
@NM00058 EQU   RPLVSAM+28
RPLVACB  EQU   RPLVSAM+24
@NM00057 EQU   RPLVSAM+3
RPLVTYP  EQU   RPLVSAM+2
@NM00056 EQU   RPLVSAM
@NM00055 EQU   RPLV+42
RPLRMSCC EQU   RPLV+36
RPLVRES1 EQU   RPLFLAGA+1
RPLVJRNL EQU   RPLFLAGA
RPLVVOP  EQU   RPLFLAGA
RPLVVIN  EQU   RPLFLAGA
RPLVCOMP EQU   RPLFLAGA
RPLVPROG EQU   RPLFLAGA
RPLVPOST EQU   RPLFLAGA
RPLVRSV3 EQU   RPLV+24
RPLVRSV2 EQU   RPLV+20
RPLVRSV1 EQU   RPLV+16
RPLVVICB EQU   RPLV+12
RPLASCBP EQU   RPLTCBPR
VVIUNUSD EQU   VVICB+116
VVINUSDC EQU   VVICB+112
VVITPFCH EQU   VVICB+108
VVIDVMEL EQU   VVICB+104
VVIVBSTF EQU   VVICB+100
VVISSOBA EQU   VVICB+96
VVIVSCRA EQU   VVICB+92
VVISTPTB EQU   VVICB+88
VVIDVMTA EQU   VVICB+84
VVIJUCB  EQU   VVICB+80
VVIIUCB  EQU   VVICB+76
VVIRES6  EQU   VVICB+72
VVIRES5  EQU   VVICB+68
VVIRES4  EQU   VVICB+64
VVIUCB   EQU   VVICB+60
VVIVJL   EQU   VVICB+56
VVIVRR   EQU   VVICB+52
VVIQLSPL EQU   VVICB+48
VVIQRPL2 EQU   VVICB+44
VVIQRPL1 EQU   VVICB+40
VVIVTRK  EQU   VVICB+37
VVIOPCD  EQU   VVICB+36
VVIVQMP  EQU   VVICB+32
VVIECB1  EQU   VVICB+28
VVICATAD EQU   VVICB+24
VVIDCBAD EQU   VVICB+20
VVIACBAD EQU   VVICB+16
VVIFLG7  EQU   VVIFLGA
VVIFLG6  EQU   VVIFLGA
VVIFLG5  EQU   VVIFLGA
VVIFLG4  EQU   VVIFLGA
VVIFLG3  EQU   VVIFLGA
VVIFLG1  EQU   VVIFLGA
VVIALCON EQU   VVICB+14
VVICPUID EQU   VVICB+12
VVIUCAT  EQU   VVICB+4
VVICID   EQU   VVICB
ICBLORD  EQU   ICBTRACE+256
ICBOTRC  EQU   ICBTRACE
ICBRESV  EQU   ICB2SSCB+128
ICBVOLST EQU   ICB2SSCB+124
ICBVSCRA EQU   ICB2SSCB+120
ICBSAMP  EQU   ICB2SSCB+118
ICBRESVD EQU   ICB2SSCB+117
ICBCPUID EQU   ICB2SSCB+112
ICBFAB   EQU   ICB2SSCB+108
ICBMSSC  EQU   ICB2SSCB+104
ICBRSVP  EQU   ICB2SSCB+100
ICBAEAP  EQU   ICB2SSCB+96
ICBSIOBP EQU   ICB2SSCB+92
ICBIATNA EQU   ICB2SSCB+88
ICBIPRGA EQU   ICB2SSCB+84
ICBSRBP  EQU   ICB2SSCB+80
ICBVVIC  EQU   ICB2SSCB+72
ICBSIOP  EQU   ICB2SSCB+68
ICBMEP   EQU   ICB2SSCB+64
ICBIORCI EQU   ICB2SSCB+60
ICB2ACTP EQU   ICB2SSCB+56
ICBFG3   EQU   ICBFLG+2
ICBFG2   EQU   ICBFLG+1
@NM00054 EQU   ICBFG1
ICBMSCA  EQU   ICBFG1
ICBMSCMP EQU   ICBFG1
ICBS     EQU   ICBFG1
ICBB     EQU   ICBFG1
ICBV     EQU   ICBFG1
ICBR     EQU   ICBFG1
ICBI     EQU   ICBFG1
ICBNVT   EQU   ICBOPT
ICBVN02P EQU   ICB2SSCB+44
ICBTCB   EQU   ICB2SSCB+40
ICBQHEAD EQU   ICB2SSCB+36
ICBAUCB  EQU   ICB2SSCB+32
ICBPUCB  EQU   ICB2SSCB+28
ICBCOMQ  EQU   ICB2SSCB+24
ICBIOR   EQU   ICB2SSCB+20
ICBCOM   EQU   ICB2SSCB+16
ICBACTV  EQU   ICB2SSCB+12
ICBECB   EQU   ICB2SSCB+8
ICBSSNAM EQU   ICB2SSCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00053 EQU   CVTFIX+248
@NM00052 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
DMNTVUA  EQU   DMLST+26
DMNTRES2 EQU   DMLST+25
DMNTECB  EQU   DMLST+16
DMNTASID EQU   DMLST+14
DMBITRES EQU   DMNTFLAG
DMVUAVAL EQU   DMNTFLAG
DMDELRSP EQU   DMNTFLAG
DMBITRE1 EQU   DMNTFLAG
DMNTRES1 EQU   DMLST+5
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00284 EQU   @EL00003
@RF00291 EQU   @EL00003
@RF00298 EQU   @EL00003
@RF00305 EQU   @EL00003
@RF00312 EQU   @EL00003
@RF00319 EQU   @EL00003
@RT00363 EQU   @EL00005
@RF00418 EQU   @RC00394
@RT00543 EQU   @EL00008
@RT00568 EQU   @EL00009
@RC00649 EQU   @RC00643
@RC00717 EQU   @EL00011
@RT00722 EQU   @EL00012
@RF00748 EQU   @EL00012
@RF00762 EQU   @EL00012
@RF00800 EQU   @EL00013
@RT00809 EQU   @EL00014
@RF00819 EQU   @EL00014
@RF00843 EQU   @EL00015
@RF00860 EQU   @EL00016
@RT00887 EQU   @EL00017
@RF00965 EQU   @EL00018
@RF00971 EQU   @EL00018
@RF00979 EQU   @EL00018
@RF00985 EQU   @EL00018
@RF00995 EQU   @EL00018
@RF01005 EQU   @EL00018
@RF01015 EQU   @EL00018
@RF01021 EQU   @EL00018
@RF01027 EQU   @EL00018
@RF01033 EQU   @EL00018
@RF01043 EQU   @EL00018
@RF01037 EQU   @EL00018
@ENDDATA EQU   *
         END   ICBVDR01,(C'PLS1607',0701,78157)
