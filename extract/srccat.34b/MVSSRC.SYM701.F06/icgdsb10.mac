         TITLE 'ICGDSB10 MSC TABLE CREATE, BLD ASSORTED NULL TABLES    *
                        '
ICGDSB10 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSB10  76.337'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0019
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/*            ICGDSB10 (MAINLINE)                           @X0DD153*/
*/*                                                          @Y30LB14*/
*/*            DETERMINE WHICH TABLE IS TO BE BUILT AND      @XD00153*/
*/*            CALL THE PROPER TABLE-BUILDER                 @Y30LB14*/
*/*                                                          @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0019
*   OUTCYL(1)=UT2VCYL;              /* STARTING CYLINDER NUMBER    0019
*                                                            @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0019
         LH    @06,@CH00436                                        0019
         ALR   @06,@10                                             0019
         MVC   OUTCYL(1,@06),UT2VCYL(@10)                          0019
*   OUTHEAD(1)=UT2VHEAD;            /* STARTING HEAD NUMBER  @Y30LB14*/
         MVC   OUTHEAD(1,@06),UT2VHEAD(@10)                        0020
*   OUTREC(1)=UT2VREC;              /* STARTING RECORD NUMBER      0021
*                                                            @Y30LB14*/
         MVC   OUTREC(1,@06),UT2VREC(@10)                          0021
*   B06DCBPT=ADDR(UT2DCB);          /*                       @Y30LB14*/
         LA    @06,UT2DCB(,@10)                                    0022
         ST    @06,B06DCBPT(,@10)                                  0022
*   B06BUFPT=ADDR(UT2BUFER);        /* ADR OF WRITE BUFFER   @Y30LB14*/
         LR    @06,@10                                             0023
         AL    @06,@CF00436                                        0023
         ST    @06,B06BUFPT(,@10)                                  0023
*   K=0;                            /* SET BLOCK CNT = 0     @Y30LB14*/
         SLR   @06,@06                                             0024
         LR    K,@06                                               0024
*   I=0;                            /* INCREMENT SET TO 0    @Y30LB14*/
         LR    I,@06                                               0025
*   ZEROS=''B;                      /* SET BLOCK TO 0'S      @Y30LB14*/
         XC    ZEROS(256),ZEROS                                    0026
*   TABLEID=UT2TABID;               /* SAVE TABLE ID         @Y30LB14*/
         SLR   TABLEID,TABLEID                                     0027
         IC    TABLEID,UT2TABID(,@10)                              0027
*   STOPSCAN='0'B;                  /*                       @Y30LB14*/
*                                                                  0028
         NI    STOPSCAN,B'01111111'                                0028
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* DETERMINE WHICH LIBRARY IS TO BE WRITTEN              @Y30LB14*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0029
*   IF UT2TABID='60'X               /* VVA/VOLID XREF TABLE  @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   UT2TABID(@10),96                                    0029
         BNE   @RF00029                                            0029
*     DO;                           /*                       @Y30LB14*/
*       CALL B10ID60X;              /* BUILD VVA/VOLID XREF TBL    0031
*                                                            @Y30LB14*/
         BAL   @14,B10ID60X                                        0031
*       RETURN;                     /* RETURN TO ICGDSBLD    @Y30LB14*/
@EL00001 L     @13,4(,@13)                                         0032
@EF00001 L     @00,@SIZDATD                                        0032
         LR    @01,@11                                             0032
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0032
         BR    @14                                                 0032
*     END;                          /*                       @Y30LB14*/
*   IF UT2TABID='80'X               /* PST TABLE             @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
@RF00029 L     @10,BUILDPTR(,R4)                                   0034
         CLI   UT2TABID(@10),128                                   0034
         BNE   @RF00034                                            0034
*     DO;                           /*                       @Y30LB14*/
*       CALL B10ID80X;              /* BUILD PST TABLE       @Y30LB14*/
         BAL   @14,B10ID80X                                        0036
*       RETURN;                     /* RETURN TO ICGDSBLD    @Y30LB14*/
         B     @EL00001                                            0037
*     END;                          /*                       @Y30LB14*/
*   IF UT2TABID='A0'X               /* VVA TABLE             @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
@RF00034 L     @10,BUILDPTR(,R4)                                   0039
         CLI   UT2TABID(@10),160                                   0039
         BNE   @RF00039                                            0039
*     DO;                           /*                       @Y30LB14*/
*       CALL B10IDA0X;              /* BUILD VVA TABLE       @Y30LB14*/
         BAL   @14,B10IDA0X                                        0041
*       RETURN;                     /* RETURN TO ICGDSBLD    @Y30LB14*/
         B     @EL00001                                            0042
*     END;                          /*                       @Y30LB14*/
*   IF UT2TABID='B0'X               /* RECOVERY JOURNAL      @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
@RF00039 L     @10,BUILDPTR(,R4)                                   0044
         CLI   UT2TABID(@10),176                                   0044
         BNE   @RF00044                                            0044
*     DO;                           /*                       @Y30LB14*/
*       CALL B10IDB0X;              /* BUILD RECOVERY JOURNAL      0046
*                                                            @Y30LB14*/
         BAL   @14,B10IDB0X                                        0046
*       RETURN;                     /* RETURN TO ICGDSBLD    @Y30LB14*/
         B     @EL00001                                            0047
*     END;                          /*                       @Y30LB14*/
*   IF UT2TABID='C0'X               /* SCHEDULE QUEUE        @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
@RF00044 L     @10,BUILDPTR(,R4)                                   0049
         CLI   UT2TABID(@10),192                                   0049
         BNE   @RF00049                                            0049
*     DO;                           /*                       @Y30LB14*/
*       CALL B10IDC0X;              /* BUILD SCHEDULE QUEUE  @Y30LB14*/
         BAL   @14,B10IDC0X                                        0051
*       RETURN;                     /* RETURN TO ICGDSBLD    @Y30LB14*/
         B     @EL00001                                            0052
*     END;                          /*                       @Y30LB14*/
*                                                                  0053
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00139*/
*   /* BUILD THE MESSAGE BUFFER AREA                         @YD00139*/
*   /* ***********************************************       @YD00139*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0054
*   IF UT2TABID='E0'X               /* MESSAGE BUFFER ID     @YD00139*/
*     THEN                          /*                       @YD00139*/
@RF00049 L     @10,BUILDPTR(,R4)                                   0054
         CLI   UT2TABID(@10),224                                   0054
         BNE   @RF00054                                            0054
*     DO;                           /*                       @YD00139*/
*       CALL B10IDE0X;              /* BUILD MSG BUFFER      @YD00139*/
         BAL   @14,B10IDE0X                                        0056
*       RETURN;                     /* RETURN TO ICGDSBLD    @YD00139*/
         B     @EL00001                                            0057
*     END;                          /*                       @YD00139*/
*                                                                  0058
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* IF NO MATCH ON TABLE ID FIELD, WRITE MESSAGE          @YD00113*/
*   /* ICG411I TABLE ID DOES NOT MATCH A TABLE               @YD00113*/
*   /* PRODUCED BY ICGDSB10.                                 @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0059
*   MSGNO=ICG411I;                  /*                       @YD00113*/
@RF00054 MVC   MSGNO(2,R4),ICG411I                                 0059
*   RETCODE=RETCODEC;               /* SET RETURN CODE = 12  @YD00113*/
         MVC   RETCODE(2,R4),@CH00128                              0060
*   CALL PUTIT2;                    /* PUT OUT THE MESSAGE   @Y30LB14*/
         BAL   @14,PUTIT2                                          0061
*   RETURN;                         /* RETURN TO ICGDSBLD    @Y30LB14
*                                                            @Y30LB14*/
         B     @EL00001                                            0062
*                                                                  0063
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/* PROCEDURE NAME - B10ID60X                                @Y30LB14*/
*/*                                                          @Y30LB14*/
*/* FUNCTION - BUILD THE VIRTUAL DEVICE ADDRESS/VOLID        @Y30LB14*/
*/*            CROSS-REFERENCE LIST.                         @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            A MAXIMUM OF 64 VIRTUAL DEVICE ADDRESSES      @Y30LB14*/
*/*            CAN BE SPECIFIED THROUGH EACH CHANNEL         @Y30LB14*/
*/*            INTERFACE OF EACH DATA STAGER.  ALTHOUGH      @Y30LB14*/
*/*            THE MAXIMUM NUMBER OF DATA STAGERS            @Y30LB14*/
*/*            SUPPORTED BY THE STORAGE SUBSYSTEM IS 14,     @Y30LB14*/
*/*            THE HIGHEST ADDRESS IS 'F' (STARTING FROM 0). @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            FOR EACH VIRTUAL DEVICE ADDRESS, A 4-BYTE     @Y30LB14*/
*/*            ENTRY IS RESERVED.  THEREFORE ALL 64 ENTRIES  @Y30LB14*/
*/*            FOR A DATA STAGER/CHANNEL INTERFACE ARE       @Y30LB14*/
*/*            CONTAINED IN ONE BLOCK (8-BYTE BLOCK HEADER   @Y30LB14*/
*/*            PLUS 256 DATA BYTES).  THERE ARE 48 POSSIBLE  @Y30LB14*/
*/*            DATA STAGER/CHANNEL INTERFACE ADDRESS (OF     @Y30LB14*/
*/*            WHICH 42 CAN BE USED).  THEREFORE, THE SIZE   @Y30LB14*/
*/*            OF THE VDA/VOLID XREF TABLE IS 48 BLOCKS.     @Y30LB14*/
*/*            THE REMAINING 16 BLOCKS NEEDED TO FILL OUT    @Y30LB14*/
*/*            THE TRACK CONTAIN 'CHR' BUT DO NOT CONTAIN    @Y30LB14*/
*/*            TABLE ID ('60'X).                             @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE DATA BYTES CONTAIN 256 BYTES OF BINARY    @Y30LB14*/
*/*            ZEROS.                                        @Y30LB14*/
*/*                                                          @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0063
*B10ID60X:                                                         0063
*   PROCEDURE;                      /*                       @Y30LB14*/
B10ID60X STM   @14,@12,@SA00002                                    0063
*   L=48;                           /* LENGTH OF TABLE IN BLOCKS   0064
*                                                            @Y30LB14*/
         LA    L,48                                                0064
*   CALL WRITELIB;                  /* PUT OUT THE TABLE     @Y30LB14*/
         BAL   @14,WRITELIB                                        0065
*   TABLEID=0;                      /* SET ID=0 FOR REST     @Y30LB14*/
         SLR   TABLEID,TABLEID                                     0066
*   L=16;                           /* REMAINDER OF TRACK    @Y30LB14*/
         LA    L,16                                                0067
*   CALL WRITELIB;                  /* FILL REMAINDER OF TRK W/O ID
*                                                            @Y30LB14*/
         BAL   @14,WRITELIB                                        0068
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00002 DS    0H                                                  0069
@EF00002 DS    0H                                                  0069
@ER00002 LM    @14,@12,@SA00002                                    0069
         BR    @14                                                 0069
*   END B10ID60X;                   /*                       @Y30LB14*/
*                                                                  0071
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/* PROCEDURE NAME - B10ID80X                                @Y30LB14*/
*/*                                                          @Y30LB14*/
*/* FUNCTION - BUILD THE DATA STAGER PAGE STATUS TABLE       @Y30LB14*/
*/*            IMAGE AREA.                                   @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE DS PST IMAGE AREA IS A WORK AREA USED     @Y30LB14*/
*/*            BY THE DSM TO READ THE PAGE STATUS TABLE      @Y30LB14*/
*/*            FROM THE DATA STAGER.                         @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE TABLE IS 8 TRACKS (256 BLOCKS) IN LENGTH. @Y30LB14*/
*/*            THE FIRST 8 BYTES OF EACH BLOCK CONTAIN THE   @Y30LB14*/
*/*            BLOCK HEADER.  THE 256 DATA BYTES OF EACH     @Y30LB14*/
*/*            BLOCK CONTAIN BINARY ZEROS WHEN THE TABLE     @Y30LB14*/
*/*            IS CREATED OR REBUILT.                        @Y30LB14*/
*/*                                                          @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0071
*B10ID80X:                                                         0071
*   PROCEDURE;                      /*                       @Y30LB14*/
B10ID80X STM   @14,@12,@SA00003                                    0071
*   L=256;                          /* SET FOR 256 BLOCKS    @Y30LB14*/
         LA    L,256                                               0072
*   CALL WRITELIB;                  /* PUT OUT THE TABLE     @Y30LB14*/
         BAL   @14,WRITELIB                                        0073
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00003 DS    0H                                                  0074
@EF00003 DS    0H                                                  0074
@ER00003 LM    @14,@12,@SA00003                                    0074
         BR    @14                                                 0074
*   END B10ID80X;                   /*                       @Y30LB14*/
*                                                                  0076
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/* PROCEDURE NAME - B10IDA0X                                @Y30LB14*/
*/*                                                          @Y30LB14*/
*/* FUNCTION - BUILD THE VIRTUAL DEVICE ADDRESS TABLE.       @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE VVA TABLE IS 16 BLOCKS IN LENGTH WITH ALL @Y30LB14*/
*/*            256 BYTES IN THE BLOCK SET TO BINARY ZEROS.   @Y30LB14*/
*/*            THE 16 BLOCKS ALL HAVE A TABLE ID.  THE RE-   @Y30LB14*/
*/*            MAINING 16 BLOCKS OF THE TRACK ARE SET TO 0'S @Y30LB14*/
*/*            WITH THE BLOCK HEADER CONTAINING THE CHR BUT  @XD00153*/
*/*            THERE IS NO TABLD ID.                         @Y30LB14*/
*/*                                                          @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0076
*B10IDA0X:                                                         0076
*   PROCEDURE;                      /*                       @Y30LB14*/
B10IDA0X STM   @14,@12,@SA00004                                    0076
*   L=16;                           /* LENGTH OF TABLE IN BLOCKS   0077
*                                                            @Y30LB14*/
         LA    L,16                                                0077
*   CALL WRITELIB;                  /* PUT OUT THE TABLE     @Y30LB14*/
         BAL   @14,WRITELIB                                        0078
*   TABLEID=0;                      /* SET ID=0 FOR REST     @Y30LB14*/
         SLR   TABLEID,TABLEID                                     0079
*   L=16;                           /* REMAINDER OF TRACK    @Y30LB14*/
         LA    L,16                                                0080
*   CALL WRITELIB;                  /* FILL REMAINDER OF TRK W/O ID
*                                                            @Y30LB14*/
         BAL   @14,WRITELIB                                        0081
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00004 DS    0H                                                  0082
@EF00004 DS    0H                                                  0082
@ER00004 LM    @14,@12,@SA00004                                    0082
         BR    @14                                                 0082
*   END B10IDA0X;                   /*                       @Y30LB14*/
*                                                                  0084
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/* PROCEDURE NAME - B10IDB0X                                @Y30LB14*/
*/*                                                          @Y30LB14*/
*/* FUNCTION - BUILD THE RECOVERY JOURNAL                    @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE RECOVERY JOURNAL IS 8 TRACKS (256 BLOCKS) @Y30LB14*/
*/*            IN LENGTH.  EVERYTHING IS WRITTEN TO ZEROS    @Y30LB14*/
*/*            INCLUDING THE TABLE ID AND CHR IN THE HEADER  @Y30LB14*/
*/*            BLOCK.                                        @Y30LB14*/
*/*                                                          @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0084
*B10IDB0X:                                                         0084
*   PROCEDURE;                      /*                       @Y30LB14*/
B10IDB0X STM   @14,@12,@SA00005                                    0084
*   DO J=1 TO 256;                  /* DO ALL 256 BLOCKS     @Y30LB14*/
         LA    J,1                                                 0085
@DL00085 DS    0H                                                  0086
*     K=K+1;                        /* INCR BLOCK COUNT      @Y30LB14*/
         AH    K,@CH00042                                          0086
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN OUTPUT BUFR    0087
*                                                            @Y30LB14*/
         LR    @10,K                                               0087
         MH    @10,@CH00437                                        0087
         LH    @07,@CH00436                                        0087
         AL    @07,BUILDPTR(,R4)                                   0087
         ST    @10,@TF00001                                        0087
         ALR   @10,@07                                             0087
         AL    @10,@CF00439                                        0087
         MVC   OBLOCK-16(256,@10),BLOCK                            0087
*     OBLKPRFX(K)=''B;              /* ZERO THE BLOCK HEADER @Y30LB14*/
         AL    @07,@TF00001                                        0088
         AL    @07,@CF00440                                        0088
         XC    OBLKPRFX-8(8,@07),OBLKPRFX-8(@07)                   0088
*     IF K=32                       /* TRACK BUFFER FULL     @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    K,@CH00309                                          0089
         BNE   @RF00089                                            0089
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITE;               /* PUT OUT THE TRACK     @Y30LB14*/
         BAL   @14,WRITE                                           0091
*         K=0;                      /* SET BLOCK COUNT TO 0  @Y30LB14*/
         SLR   K,K                                                 0092
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14*/
@RF00089 AH    J,@CH00042                                          0094
         CH    J,@CH00035                                          0094
         BNH   @DL00085                                            0094
*   END B10IDB0X;                   /*                       @Y30LB14*/
@EL00005 DS    0H                                                  0095
@EF00005 DS    0H                                                  0095
@ER00005 LM    @14,@12,@SA00005                                    0095
         BR    @14                                                 0095
*                                                                  0096
*/********************************************************** @YD00113*/
*/*                                                          @Y30LB14*/
*/* PROCEDURE NAME - B10IDC0X                                @Y30LB14*/
*/*                                                          @Y30LB14*/
*/* FUNCTION - DASD SCHEDULE QUEUE                           @Y30LB14*/
*/*                                                          @Y30LB14*/
*/*            THE TABLE IS 8 TRACKS (256 BLOCKS) IN LENGTH. @Y30LB14*/
*/*            THE FIRST 8 BYTES OF EACH BLOCK CONTAIN THE   @Y30LB14*/
*/*            BLOCK HEADER.  THE 256 DATA BYTES ARE INIT-   @Y30LB14*/
*/*            IALIZED TO '00'X EXCEPT FOR THE QCB POINTER   @XD00153*/
*/*            BYTE (BYTE '0F'X IN EACH BLOCK).  THIS BYTE   @Y30LB14*/
*/*            IS '00'X IN THE 1ST BLOCK AND IS INCREMENTED  @Y30LB14*/
*/*            BY 1 IN EACH SUBSEQUENT BLOCK.                @Y30LB14*/
*/********************************************************** @YD00113*/
*                                                                  0096
*B10IDC0X:                                                         0096
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0096
B10IDC0X STM   @14,@12,@SA00006                                    0096
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* PUT OUT THE 256 SCHEDULE QUEUE BLOCKS                 @Y30LB14*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0097
*   L=256;                          /* SET FOR 256 BLOCKS    @Y30LB14*/
         LA    L,256                                               0097
*   I=1;                            /* SET BYTE INCREMENT    @Y30LB14*/
         LA    I,1                                                 0098
*   CALL WRITELIB;                  /* SET UP OUTPUT BUFR    @Y30LB14*/
         BAL   @14,WRITELIB                                        0099
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00006 DS    0H                                                  0100
@EF00006 DS    0H                                                  0100
@ER00006 LM    @14,@12,@SA00006                                    0100
         BR    @14                                                 0100
*   END B10IDC0X;                   /*                       @Y30LB14*/
*                                                                  0102
*/********************************************************** @YD00139*/
*/*                                                          @YD00139*/
*/* PROCEDURE NAME - B10IDE0X                                @YD00139*/
*/*                                                          @YD00139*/
*/* FUNCTION - BUILD THE MESSAGE BUFFER TABLE.  THE TABLE    @YD00139*/
*/*            IS 48 BLOCKS IN LENGTH AND IS INITIALIZED     @YD00139*/
*/*            WITH TABLE ID ('E0'X) IN THE FIRST BYTE OF    @YD00139*/
*/*            PREFIX FOLLOWED BY VIRTUAL CYLINDER/HEAD/     @YD00139*/
*/*            RECORD.  THE UNUSED 16 BLOCKS ARE INITIALIZED @YD00139*/
*/*            WITH VIRTUAL CYLINDER/HEAD/RECORD ONLY.       @YD00139*/
*/*                                                          @YD00139*/
*/********************************************************** @YD00139*/
*                                                                  0102
*B10IDE0X:                                                         0102
*   PROCEDURE;                      /*                       @YD00139*/
B10IDE0X STM   @14,@12,@SA00007                                    0102
*   L=80;                           /* LENGTH OF TABLE IN BLOCKS   0103
*                                                            @YD00139*/
         LA    L,80                                                0103
*   CALL WRITELIB;                  /* PUT OUT THE TABLE     @YD00139*/
         BAL   @14,WRITELIB                                        0104
*   TABLEID=0;                      /* SET ID=0 FOR REST     @YD00139*/
         SLR   TABLEID,TABLEID                                     0105
*   L=16;                           /* REMAINDER OF TRACK    @YD00139*/
         LA    L,16                                                0106
*   CALL WRITELIB;                  /* FILL REMAINDER OF TRK W/O ID
*                                                            @YD00139*/
         BAL   @14,WRITELIB                                        0107
*   RETURN;                         /* RETURN TO CALLER      @YD00139*/
@EL00007 DS    0H                                                  0108
@EF00007 DS    0H                                                  0108
@ER00007 LM    @14,@12,@SA00007                                    0108
         BR    @14                                                 0108
*   END B10IDE0X;                   /*                       @YD00139*/
*                                                                  0110
*/********************************************************** @YD00113*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - WRITELIB                                @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS ROUTINE PLACES THE IMAGE OF THE          @YD00113*/
*/*            INITIALIZED BLOCK IN THE OUTPUT BUFFER.       @YD00113*/
*/*            WHEN 32 BLOCKS HAVE BEEN PLACED IN THE        @YD00113*/
*/*            OUTPUT BUFFER, THE PROCEDURE 'WRITETRK' IS    @YD00113*/
*/*            CALLED TO PLACE THE VIRTUAL CHR IN EACH       @YD00113*/
*/*            RECORD AND TO WRITE THE TRACK.                @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @YD00113*/
*                                                                  0110
*WRITELIB:                                                         0110
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0110
WRITELIB STM   @14,@01,@SA00008                                    0110
         STM   @03,@12,@SA00008+16                                 0110
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* PUT OUT 'L' BLOCKS                                    @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0111
*   DO J=1 TO L;                    /* DO FOR EACH BLOCK     @YD00113*/
         LA    J,1                                                 0111
         B     @DE00111                                            0111
@DL00111 DS    0H                                                  0112
*     K=K+1;                        /*                       @Y30LB14*/
         AH    K,@CH00042                                          0112
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN BUFFER   @YD00113*/
         LR    @10,K                                               0113
         MH    @10,@CH00437                                        0113
         LH    @15,@CH00436                                        0113
         AL    @15,BUILDPTR(,R4)                                   0113
         ST    @10,@TF00001                                        0113
         ALR   @10,@15                                             0113
         AL    @10,@CF00439                                        0113
         MVC   OBLOCK-16(256,@10),BLOCK                            0113
*     OUTABLID(K)=TABLEID;          /* PUT IN TABLE ID       @Y30LB14*/
         L     @10,@TF00001                                        0114
         AL    @15,@CF00440                                        0114
         STC   TABLEID,OUTABLID-8(@10,@15)                         0114
*     BYTES(16)=BYTES(16)+I;        /* SIGNIFICANT ONLY      @Y30LB14
*                                      FOR SCHEDULE QUEUE    @Y30LB14*/
         SLR   @10,@10                                             0115
         IC    @10,BYTES+15                                        0115
         ALR   @10,I                                               0115
         STC   @10,BYTES+15                                        0115
*     IF K=32                       /* TRACK IS FULL         @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    K,@CH00309                                          0116
         BNE   @RF00116                                            0116
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITETRK;            /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITETRK                                        0118
*         K=0;                      /* SET FOR START OF NEXT TRACK 0119
*                                                            @Y30LB14*/
         SLR   K,K                                                 0119
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14
*                                                            @Y30LB14*/
@RF00116 AH    J,@CH00042                                          0121
@DE00111 CR    J,L                                                 0121
         BNH   @DL00111                                            0121
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00008 DS    0H                                                  0122
@EF00008 DS    0H                                                  0122
@ER00008 LM    @14,@01,@SA00008                                    0122
         LM    @03,@12,@SA00008+16                                 0122
         BR    @14                                                 0122
*   END WRITELIB;                   /*                       @Y30LB14*/
*                                                                  0124
*/********************************************************** @YD00113*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - WRITETRK                                @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - WRITE THE VIRTUAL CHR IN EACH RECORD FOR      @YD00113*/
*/*            THIS TRACK AND CALL THE PROCEDURE 'WRITE'     @YD00113*/
*/*            TO WRITE THE 32 RECORDS.                      @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @YD00113*/
*                                                                  0124
*WRITETRK:                                                         0124
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITETRK STM   @14,@12,@SA00009                                    0124
*   DO K=1 TO 32;                   /*                       @Y30LB14*/
         LA    K,1                                                 0125
@DL00125 DS    0H                                                  0126
*     OUTREC(K)=K;                  /* SET THE PREFIX RECORD NUM   0126
*                                                            @Y30LB14*/
         LR    @10,K                                               0126
         MH    @10,@CH00437                                        0126
         LH    @05,@CH00436                                        0126
         AL    @05,BUILDPTR(,R4)                                   0126
         LA    @03,0(@10,@05)                                      0126
         AL    @03,@CF00441                                        0126
         STC   K,OUTREC-11(,@03)                                   0126
*     OUTHEAD(K)=OUTHEAD(1);        /* SET THE HEAD NUMBER   @Y30LB14*/
         SLR   @03,@03                                             0127
         IC    @03,OUTHEAD(,@05)                                   0127
         LA    @01,0(@10,@05)                                      0127
         AL    @01,@CF00442                                        0127
         STC   @03,OUTHEAD-10(,@01)                                0127
*     OUTCYL(K)=OUTCYL(1);          /* SET THE CYL NUMBER    @Y30LB14*/
         SLR   @03,@03                                             0128
         IC    @03,OUTCYL(,@05)                                    0128
         LA    @01,0(@10,@05)                                      0128
         AL    @01,@CF00443                                        0128
         STC   @03,OUTCYL-9(,@01)                                  0128
*     OUTFLR(K)=''B;                /* SET FILLER TO ZERO    @Y30LB14*/
         ALR   @05,@10                                             0129
         AL    @05,@CF00444                                        0129
         XC    OUTFLR-12(4,@05),OUTFLR-12(@05)                     0129
*   END;                            /*                       @Y30LB14*/
         AH    K,@CH00042                                          0130
         CH    K,@CH00309                                          0130
         BNH   @DL00125                                            0130
*   CALL WRITE;                     /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITE                                           0131
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00009 DS    0H                                                  0132
@EF00009 DS    0H                                                  0132
@ER00009 LM    @14,@12,@SA00009                                    0132
         BR    @14                                                 0132
*   END WRITETRK;                   /*                       @Y30LB14*/
*                                                                  0134
*/********************************************************** @YD00113*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - WRITE                                   @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - WRITE THE 32 RECORDS ON THIS TRACK AND        @YD00113*/
*/*            CALCULATE THE ADDRESS OF THE NEXT TRACK TO BE @YD00113*/
*/*            WRITTEN.                                      @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @YD00113*/
*                                                                  0134
*WRITE:                                                            0134
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITE    STM   @14,@12,@SA00010                                    0134
*   B06ADDR=OUTADDR;                /* ADDRESS OF BUFFER     @YD00113*/
         L     @10,BUILDPTR(,R4)                                   0135
         MVC   B06ADDR(3,@10),OUTADDR(@10)                         0135
*   GEN(LINK EP=ICGDSB06);          /* WRITE OUT TRACK       @Y30LB14*/
         LINK EP=ICGDSB06
*   UT2VHEAD=UT2VHEAD+1;            /* INCR TO NEXT TRACK    @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0137
         LA    @05,1                                               0137
         SLR   @15,@15                                             0137
         IC    @15,UT2VHEAD(,@10)                                  0137
         ALR   @15,@05                                             0137
         STC   @15,UT2VHEAD(,@10)                                  0137
*   IF UT2VHEAD>18                  /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   UT2VHEAD(@10),18                                    0138
         BNH   @RF00138                                            0138
*     DO;                           /*                       @Y30LB14*/
*       UT2VHEAD=0;                 /* SET TRACK TO ZERO     @Y30LB14*/
         MVI   UT2VHEAD(@10),X'00'                                 0140
*       UT2VCYL=UT2VCYL+1;          /* INCR TO NEXT CYL      @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@10)                          0141
         AL    @05,@ZT00003                                        0141
         STC   @05,UT2VCYL(,@10)                                   0141
*     END;                          /*                       @Y30LB14*/
*   OUTCYL(1)=UT2VCYL;              /* SET FOR NEXT AVAIL CYL      0143
*                                                            @Y30LB14*/
@RF00138 L     @10,BUILDPTR(,R4)                                   0143
         LH    @05,@CH00436                                        0143
         ALR   @05,@10                                             0143
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0143
*   OUTHEAD(1)=UT2VHEAD;            /* SET FOR NEXT AVAIL HEAD     0144
*                                                            @Y30LB14*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0144
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00010 DS    0H                                                  0145
@EF00010 DS    0H                                                  0145
@ER00010 LM    @14,@12,@SA00010                                    0145
         BR    @14                                                 0145
*   END WRITE;                      /*                       @Y30LB14*/
*                                                                  0147
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - PUTIT2                                  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - CALL ICGDSMSG, MESSAGE PRINT SUBROUTINE, TO   @Y30LB12*/
*/*            PUT TERMINATING MESSAGE FOR WHICH MESSAGE     @Y30LB12*/
*/*            TEXT IS IN ICGDSMSG.  'MSGNO' INDICATES THE   @Y30LB12*/
*/*            OFFSET OF THE MESSAGE TEXT.                   @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0147
*PUTIT2:                                                           0147
*   PROCEDURE;                      /*                       @Y30LB12*/
PUTIT2   STM   @14,@12,@SA00011                                    0147
*   STOPSCAN='1'B;                  /*                       @Y30LB12*/
         OI    STOPSCAN,B'10000000'                                0148
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @10,1                                               0149
         AH    @10,TERMINAT(,R4)                                   0149
         STH   @10,TERMINAT(,R4)                                   0149
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   END PUTIT2;                     /*                       @Y30LB12*/
@EL00011 DS    0H                                                  0151
@EF00011 DS    0H                                                  0151
@ER00011 LM    @14,@12,@SA00011                                    0151
         BR    @14                                                 0151
*                                                                  0152
*/********************************************************** @YD00113*/
*/*                    P A T C H   A R E A                   @YD00113*/
*/********************************************************** @YD00113*/
*                                                                  0152
*   GENERATE;                                                      0152
*                                                         /*@YD00113*/
PATCHB10 DC    32C'PATCHB10'                              /*@YD00113*/
*   END ICGDSB10                    /*                       @Y30LB14*/
*                                                                  0153
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA5)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA3)                                       */
*                                                                  0153
*       ;                                                          0153
         B     @EL00001                                            0153
@DATA    DS    0H
@CH00042 DC    H'1'
@CH00128 DC    H'12'
@CH00309 DC    H'32'
@CH00035 DC    H'256'
@CH00437 DC    H'272'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00005 DS    15F
@SA00006 DS    15F
@SA00007 DS    15F
@SA00011 DS    15F
@SA00008 DS    14F
@SA00010 DS    15F
@SA00009 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSB10 CSECT
         DS    0F
@CF00436 DC    F'13532'
@CH00436 EQU   @CF00436+2
@CF00440 DC    F'-264'
@CF00443 DC    F'-263'
@CF00442 DC    F'-262'
@CF00441 DC    F'-261'
@CF00444 DC    F'-260'
@CF00439 DC    F'-256'
@DATD    DSECT
         DS    0D
BLOCK    DS    CL256
         ORG   BLOCK
ZEROS    DS    BL256
         ORG   BLOCK+256
STOPSCAN DS    BL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSB10 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
ICG411I  DC    H'411'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TABLEID  EQU   @05
L        EQU   @03
K        EQU   @02
J        EQU   @06
I        EQU   @07
R4       EQU   @04
COMTAB   EQU   0
READER   EQU   COMTAB+256
READFLAG EQU   READER+96
PCHBF    EQU   READER+99
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
PRINTER  EQU   COMTAB+464
MESSAGES EQU   COMTAB+810
RETCODE  EQU   MESSAGES
MSGNO    EQU   MESSAGES+2
TERMINAT EQU   MESSAGES+6
SPECLMSG EQU   MESSAGES+18
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
BUILDPTR EQU   GENIO+20
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGTODS  EQU   RSG+7
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
BUILDTAB EQU   0
COMB06   EQU   BUILDTAB
B06DCBPT EQU   COMB06
B06BUFPT EQU   COMB06+4
B06ADDR  EQU   COMB06+9
COMB05   EQU   BUILDTAB+12
B05ADDR  EQU   COMB05+9
BUILDGEN EQU   BUILDTAB+24
UT2VCHR  EQU   BUILDGEN+8
UT2TABID EQU   UT2VCHR
OUTADDR  EQU   UT2VCHR+1
UT2VCYL  EQU   OUTADDR
UT2VHEAD EQU   OUTADDR+1
UT2VREC  EQU   OUTADDR+2
UT1VCHR  EQU   BUILDGEN+12
INADDR   EQU   UT1VCHR+1
UT1STUFF EQU   BUILDTAB+40
UT1FLAG  EQU   UT1STUFF+96
UT2STUFF EQU   BUILDTAB+664
UT2DCB   EQU   UT2STUFF
UT2FLAG  EQU   UT2STUFF+96
UT3STUFF EQU   BUILDTAB+1288
UT3FLAG  EQU   UT3STUFF+96
UT2BUFER EQU   BUILDTAB+13532
OUTBUFFR EQU   0
OUTBLOCK EQU   OUTBUFFR
OBLKPRFX EQU   OUTBLOCK+8
OUTABLID EQU   OBLKPRFX
OUTCYL   EQU   OBLKPRFX+1
OUTHEAD  EQU   OBLKPRFX+2
OUTREC   EQU   OBLKPRFX+3
OUTFLR   EQU   OBLKPRFX+4
OBLOCK   EQU   OUTBLOCK+16
SCANBUF  EQU   0
SCANDATA EQU   0
BLK      EQU   BLOCK
BYTES    EQU   BLK
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00024 EQU   OUTBLOCK
TEMPEND  EQU   BUILDTAB+22396
LTRTRANI EQU   BUILDTAB+22316
LTRTRANO EQU   BUILDTAB+22236
UT1BUFER EQU   BUILDTAB+5084
NVERIFY  EQU   BUILDTAB+3500
CVERIFY  EQU   BUILDTAB+1916
@NM00023 EQU   UT3STUFF+624
UT3DDN   EQU   UT3STUFF+616
UT3CCWS  EQU   UT3STUFF+320
UT3IOB   EQU   UT3STUFF+280
UT3ECB   EQU   UT3STUFF+276
UT3JFCB  EQU   UT3STUFF+100
@NM00022 EQU   UT3FLAG
UT3VWERR EQU   UT3FLAG
UT3VOERR EQU   UT3FLAG
UT3VUPDT EQU   UT3FLAG
UT3DCB   EQU   UT3STUFF
UT2DDN   EQU   UT2STUFF+616
UT2CCWS  EQU   UT2STUFF+320
UT2IOB   EQU   UT2STUFF+280
UT2ECB   EQU   UT2STUFF+276
UT2JFCB  EQU   UT2STUFF+100
@NM00021 EQU   UT2FLAG
UT2VCERR EQU   UT2FLAG
UT2VWERR EQU   UT2FLAG
UT2VOERR EQU   UT2FLAG
UT2VUPDT EQU   UT2FLAG
UT1DDN   EQU   UT1STUFF+616
UT1CCWS  EQU   UT1STUFF+320
UT1IOB   EQU   UT1STUFF+280
UT1ECB   EQU   UT1STUFF+276
UT1JFCB  EQU   UT1STUFF+100
@NM00020 EQU   UT1FLAG
UT1VWERR EQU   UT1FLAG
UT1VOERR EQU   UT1FLAG
UT1VUPDT EQU   UT1FLAG
UT1DCB   EQU   UT1STUFF
UT1VREC  EQU   INADDR+2
UT1VHEAD EQU   INADDR+1
UT1VCYL  EQU   INADDR
UT1TABID EQU   UT1VCHR
ADDRBUF2 EQU   BUILDGEN+4
ADDRBUF1 EQU   BUILDGEN
B05REC   EQU   B05ADDR+2
B05HEAD  EQU   B05ADDR+1
B05CYL   EQU   B05ADDR
B05TBLID EQU   COMB05+8
B05BUFPT EQU   COMB05+4
B05DCBPT EQU   COMB05
B06REC   EQU   B06ADDR+2
B06HEAD  EQU   B06ADDR+1
B06CYL   EQU   B06ADDR
B06TBLID EQU   COMB06+8
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
VPAGES   EQU   CREATE+1
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
UPDCREAT EQU   @NM00017
NEWCREAT EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
PABBERG2 EQU   PABFLAGS
@NM00011 EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABEXIST EQU   PABFLAGS
MAPEXIT  EQU   LIB+4
LIBMAP   EQU   LIB+3
LIBDSMID EQU   LIB+2
LIBSIZE  EQU   LIB+1
@NM00009 EQU   LIBBITS
LIBSPEC  EQU   LIBBITS
TODS2    EQU   RSGTODS+1
TODS1    EQU   RSGTODS
RSGSLICE EQU   RSG+3
RSGUDEL  EQU   RSG+2
RSGLDEL  EQU   RSG+1
@NM00008 EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
PRNTBUF2 EQU   SPECLMSG
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
PRNTCARD EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
WARNING  EQU   MESSAGES+4
OUTBUF2  EQU   PRINTER+225
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SCANLEN  EQU   READER+204
SVEODAD  EQU   READER+200
SVSYNAD2 EQU   READER+196
SAVENCOL EQU   READER+192
SAVESCOL EQU   READER+188
INBUF    EQU   READER+100
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
LASTPARM EQU   READFLAG
ENDSCAN  EQU   READFLAG
PARMBIT  EQU   READFLAG
KEYBIT   EQU   READFLAG
READTERM EQU   READFLAG
READDCB  EQU   READER
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   ICGDSB10,(C'PLS1225',0603,76337)
