         TITLE 'ICGDSB09 MSC TABLE CREATE BUILD LIBRARY CELL MAP       *
                        '
ICGDSB09 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSB09  76.337'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                            @Y30LB15*/
*                                                                  0057
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* ICGDSB09 (MAINLINE)                                      @XD00153*/
*/*                                                          @XD00153*/
*/*      DETERMINE HOW MANY CELL MAPS ARE NEEDED AND THE     @XD00153*/
*/* SIZE OF LIBRARY FOR WHICH IT SHOULD BE BUILT.  CALL      @XD00153*/
*/* THE PROPER ROUTINES TO PERFORM THIS TASK FOR 'CREATE =   @XD00153*/
*/* YES'.                                                    @XD00153*/
*/* FOR A RECONFIGURATION FOR EACH LIBRARY, DETERMINE WHAT   @XD00153*/
*/* PART OF THE OLD CELL MAP MUST BE COPIED AND HOW MUCH OF  @XD00153*/
*/* THE CELL MAP MUST BE BUILT.  CALL THE NECESSARY ROUTINES @XD00153*/
*/* TO ACCOMPLISH THESE TASKS.                               @XD00153*/
*/*                                                          @XD00153*/
*/*      CHECK FOR A VALID LIBRARY SIZE:  1, 2, 3, OR 4.     @XD00153*/
*/* IF THE LIBRARY IS DEFINED AND THE SIZE IS INCORRECT,     @Y30LB15*/
*/* WRITE TERMINATING MESSAGE ICGDS414 AND RETURN. IF THE    @Y30LB15*/
*/* SIZE IS CORRECT AND IF THE NEWCREAT BIT IS A 1, CALL     @Y30LB15*/
*/* CREATPRC. IF THE BIT IS 0 CALL RECNFPRC. IF NO           @Y30LB15*/
*/* TERMINATING ERRORS, CALL ZEROBLK 12 TIMES TO ZERO        @Y30LB15*/
*/* REMAINING BLOCKS IN THE TRACK. SET UP PARAMETERS AND     @Y30LB15*/
*/* LINK TO ICGDSBLD TO WRITE THE TRACK. RETURN TO ICGDSBLD  @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*             INITIALIZATION                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0057
*   OUTPTR=ADDR(UT2BUFER);          /* START BEG OUT BUFFER  @Y30LB15*/
         L     @09,BUILDPTR(,R4)                                   0057
         LR    OUTPTR,@09                                          0057
         AL    OUTPTR,@CF00810                                     0057
*   RECCNT=UT2VREC;                 /* GET START RECORD NUM  @Y30LB15*/
         SLR   RECCNT,RECCNT                                       0058
         IC    RECCNT,UT2VREC(,@09)                                0058
*   LIBCNT=1;                       /* INIT CNT OF LIBRARIES @Y30LB15*/
         LA    LIBCNT,1                                            0059
*   TABLID=UT2TABID;                /* GET TABLE ID          @Y30LB15*/
         MVC   TABLID(1),UT2TABID(@09)                             0060
*   BITSWTS=0;                      /* INITIALIZE SWITCHES   @Y30LB15*/
         MVI   BITSWTS,X'00'                                       0061
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  CHECK THE SIZE OF EACH LIBRARY. IF ANY ARE INVALID,     @Y30LB15*/
*/*  WRITE ERROR MESSAGE AND RETURN.                         @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0062
*DO001:                                                            0062
*   DO I=1 TO 4;                    /*                       @Y30LB15*/
DO001    LA    I,1                                                 0062
@DL00062 DS    0H                                                  0063
*     IF LIBSIZE(I)='1'×LIBSIZE(I)='2'×LIBSIZE(I)='3'/*      @Y30LB15*/
*         ×LIBSIZE(I)='4'           /* VALID LIB SIZE?       @Y30LB15*/
*       THEN                                                       0063
         LR    @05,I                                               0063
         MH    @05,@CH00033                                        0063
         ST    @05,@TF00001                                        0063
         ALR   @05,R4                                              0063
         CLI   LIBSIZE-12(@05),C'1'                                0063
         BE    @RT00063                                            0063
         LR    @05,R4                                              0063
         AL    @05,@TF00001                                        0063
         CLI   LIBSIZE-12(@05),C'2'                                0063
         BE    @RT00063                                            0063
         LR    @05,R4                                              0063
         AL    @05,@TF00001                                        0063
         CLI   LIBSIZE-12(@05),C'3'                                0063
         BE    @RT00063                                            0063
         LR    @05,R4                                              0063
         AL    @05,@TF00001                                        0063
         CLI   LIBSIZE-12(@05),C'4'                                0063
         BE    @RT00063                                            0063
*       ;                           /* YES-CONTINUE          @Y30LB15*/
*     ELSE                          /* NO                    @Y30LB15*/
*       IF LIBSPEC(I)='0'B          /* WAS LIB DEFINED?      @Y30LB15*/
*         THEN                                                     0065
         LR    @05,I                                               0065
         MH    @05,@CH00033                                        0065
         ALR   @05,R4                                              0065
         TM    LIBSPEC-12(@05),B'10000000'                         0065
         BZ    @RT00065                                            0065
*         ;                         /* NO-CONTINUE           @Y30LB15*/
*       ELSE                                                       0067
*         DO;                       /* YES INVALID SIZE LIB  @Y30LB15*/
*           I=4;                    /* FORCE EXIT FROM LOOP  @Y30LB15*/
         LA    I,4                                                 0068
*           OUTBUF2(1:45)=B09MSG2;  /* PRNT INVLD PARM MSG   @Y30LB15*/
         MVC   OUTBUF2(45,R4),B09MSG2                              0069
*           CALL PUTIT1;            /*                       @Y30LB15*/
         BAL   @14,PUTIT1                                          0070
*         END;                      /*                       @Y30LB15*/
*   END DO001;                      /*                       @Y30LB15*/
@RT00065 DS    0H                                                  0072
@RT00063 AH    I,@CH00044                                          0072
         CH    I,@CH00070                                          0072
         BNH   @DL00062                                            0072
*   IF STOPSCAN='0'B                /* LIBRARY SIZES OK?     @Y30LB15*/
*     THEN                          /* YES-CONTINUE          @Y30LB15*/
         TM    STOPSCAN,B'10000000'                                0073
         BNZ   @RF00073                                            0073
*DO002:                                                            0074
*     DO;                           /*                       @Y30LB15*/
DO002    DS    0H                                                  0075
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   DETERMINE IF A CREATE OR RECONFIGURE                   @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0075
*       IF NEWCREAT='1'B            /* IS THIS A CREATE?     @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         TM    NEWCREAT(R4),B'01000000'                            0075
         BNO   @RF00075                                            0075
*         CALL CREATPRC;            /*                       @Y30LB15*/
         BAL   @14,CREATPRC                                        0076
*       ELSE                        /* NO                    @Y30LB15*/
*         IF UPDCREAT='1'B          /* IS IT RECONFIGURE?    @Y30LB15*/
*           THEN                    /* YES                   @Y30LB15*/
         B     @RC00075                                            0077
@RF00075 TM    UPDCREAT(R4),B'00100000'                            0077
         BNO   @RF00077                                            0077
*           CALL RECNFPRC;          /*                       @Y30LB15*/
         BAL   @14,RECNFPRC                                        0078
*         ELSE                      /* ERROR                 @Y30LB15*/
*           DO;                     /*                       @Y30LB15*/
         B     @RC00077                                            0079
@RF00077 DS    0H                                                  0080
*             OUTBUF2(1:45)=B09MSG2;/* INTERNAL ERROR MSG    @Y30LB15*/
         MVC   OUTBUF2(45,R4),B09MSG2                              0080
*             CALL PUTIT1;          /* WRITE TERM MSG        @Y30LB15*/
         BAL   @14,PUTIT1                                          0081
*           END;                    /*                       @Y30LB15*/
*       IF STOPSCAN='0'B            /* TERM ERROR FOUND?     @XD00153*/
*         THEN                                                     0083
@RC00077 DS    0H                                                  0083
@RC00075 TM    STOPSCAN,B'10000000'                                0083
         BNZ   @RF00083                                            0083
*         DO;                       /* NO-PROCEED            @Y30LB15*/
*                                                                  0084
*           /*********************************************************/
*           /*                                                       */
*           /* ***********************************************       */
*           /*                                               @ZD00187*/
*           /* COPY IMAGE OF EMPTY A4/B4 TO RECORDS 21-24    @ZD00187*/
*           /* ***********************************************       */
*           /*                                               @ZD00187*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0085
*           OUTPTR=ADDR(UT2BUFER)+5440;/* ADDR OF REC 21     @ZD00187*/
         L     OUTPTR,BUILDPTR(,R4)                                0085
         AL    OUTPTR,@CF00810                                     0085
         AH    OUTPTR,@CH00638                                     0085
*           CALL WRITPRFX;          /* ID/CHR OF REC 21      @ZD00187*/
         BAL   @14,WRITPRFX                                        0086
*           OBLOCK(1:256)=BLOCK0(1:256);/* DATA FOR REC 21   @ZD00187*/
         MVC   OBLOCK(256,OUTPTR),BLOCK0                           0087
*           OUTPTR=OUTPTR+272;      /* ADDR OF REC 22        @ZD00187*/
         AH    OUTPTR,@CH00393                                     0088
*           CALL WRITPRFX;          /* ID/CHR OF REC 22      @ZD00187*/
         BAL   @14,WRITPRFX                                        0089
*           OBLOCK(1:256)=BLOCK1(1:256);/* DATA FOR REC 22   @ZD00187*/
         MVC   OBLOCK(256,OUTPTR),BLOCK1                           0090
*           OUTPTR=OUTPTR+272;      /* ADDR OF REC 23        @ZD00187*/
         AH    OUTPTR,@CH00393                                     0091
*           CALL WRITPRFX;          /* ID/CHR OF REC 23      @ZD00187*/
         BAL   @14,WRITPRFX                                        0092
*           OBLOCK(1:256)=BLOCK2(1:256);/* DATA FOR REC 23   @ZD00187*/
         MVC   OBLOCK(256,OUTPTR),BLOCK2                           0093
*           OUTPTR=OUTPTR+272;      /* ADDR OF REC 24        @ZD00187*/
         AH    OUTPTR,@CH00393                                     0094
*           CALL WRITPRFX;          /* ID/CHR OF REC 24      @ZD00187*/
         BAL   @14,WRITPRFX                                        0095
*           OBLOCK(1:32)=BLOCK3(1:32);/* DATA FOR REC 24     @ZD00187*/
         MVC   OBLOCK(32,OUTPTR),BLOCK3                            0096
*           OBLOCK(33:256)=OBLOCK(33:256)&&OBLOCK(33:256);/* @ZD00187*/
         XC    OBLOCK+32(224,OUTPTR),OBLOCK+32(OUTPTR)             0097
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* INITIALIZE REMAINING BLOCKS IN TRACKS TO ZEROS WITH      @Y30LB15*/
*/* TABLE ID OF ZERO                                         @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0098
*           OUTPTR=ADDR(UT2BUFER)+6528;/* PT PAST 1ST 24 BLKS      0098
*                                                            @ZD00187*/
         L     OUTPTR,BUILDPTR(,R4)                                0098
         AL    OUTPTR,@CF00810                                     0098
         AH    OUTPTR,@CH00641                                     0098
*           TABLID=0;               /* TABLE ID FOR FILL BLK @Y30LB15*/
         MVI   TABLID,X'00'                                        0099
*           DO I=1 TO 8;            /* 0 REMAIN BLKS IN TRAK @ZD00187*/
         LA    I,1                                                 0100
@DL00100 DS    0H                                                  0101
*             CALL ZEROBLK;         /* WRIT PREFIX & 0 BLK   @Y30LB15*/
         BAL   @14,ZEROBLK                                         0101
*           END;                    /*                       @Y30LB15*/
         AH    I,@CH00044                                          0102
         CH    I,@CH00042                                          0102
         BNH   @DL00100                                            0102
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* SET UP CALL AREA AND LINK TO WRITE MODULE TO WRITE THE   @Y30LB15*/
*/* ONE TRACK WHICH IS THE CELL MAP.                         @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0103
*           B06DCBPT=ADDR(UT2DCB);  /* SET DCB ADDR          @Y30LB15*/
         L     @05,BUILDPTR(,R4)                                   0103
         LA    @15,UT2DCB(,@05)                                    0103
         ST    @15,B06DCBPT(,@05)                                  0103
*           B06BUFPT=ADDR(UT2BUFER);/* SET BUFFER ADDR       @Y30LB15*/
         LR    @01,@05                                             0104
         AL    @01,@CF00810                                        0104
         ST    @01,B06BUFPT(,@05)                                  0104
*           B06TBLID=UT2TABID;      /* SPECIFY TABLE         @Y30LB15*/
         MVC   B06TBLID(1,@05),UT2TABID(@05)                       0105
*           B06ADDR=OUTADDR;        /* SET CYL,HEAD,REC      @Y30LB15*/
         MVC   B06ADDR(3,@05),OUTADDR(@05)                         0106
*           GEN(LINK EP=ICGDSB06);  /* WRITE NEW CELL MAP    @Y30LB15*/
         LINK EP=ICGDSB06
*         END;                      /*                       @Y30LB15*/
*       ELSE                                                       0109
*         ;                         /* ERROR FOUND RETURN    @Y30LB15*/
@RF00083 DS    0H                                                  0110
*     END DO002;                    /*                       @Y30LB15*/
*   ELSE                                                           0111
*     ;                             /* ERROR FOUND RETURN    @Y30LB15*/
@RF00073 DS    0H                                                  0112
*   RETURN;                         /*                       @Y30LB15*/
@EL00001 L     @13,4(,@13)                                         0112
@EF00001 L     @00,@SIZDATD                                        0112
         LR    @01,@10                                             0112
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0112
         BR    @14                                                 0112
*                                                                  0113
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - CREATPRC                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - NEW TABLES ARE BEING BUILT. DETERMINE FOR    @Y30LB15*/
*/*             EACH OF THE 4 POSSIBLE LIBRARIES WHETHER IT  @XD00153*/
*/*             SHOULD BE ZEROED.  CALL THE PROPER ROUTINE   @XD00153*/
*/*             TO HANDLE EACH CASE.                         @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0113
*CREATPRC:                                                         0113
*   PROCEDURE;                      /*                       @Y30LB15*/
CREATPRC STM   @14,@05,@SA00002                                    0113
         STM   @07,@12,@SA00002+32                                 0113
*   DO LIBCNT=1 TO 4;               /*                       @Y30LB15*/
         LA    LIBCNT,1                                            0114
@DL00114 DS    0H                                                  0115
*     IF LIBSPEC(LIBCNT)='1'B       /* IS THIS LIB DEFINED?  @Y30LB15*/
*       THEN                        /* YES- BUILD IT         @Y30LB15*/
         LR    @09,LIBCNT                                          0115
         MH    @09,@CH00033                                        0115
         ALR   @09,R4                                              0115
         TM    LIBSPEC-12(@09),B'10000000'                         0115
         BNO   @RF00115                                            0115
*       CALL NLIBBLD;               /*                       @Y30LB15*/
         BAL   @14,NLIBBLD                                         0116
*     ELSE                          /* NO- ZERO 5 BLOCKS     @Y30LB15*/
*       CALL ZEROLIB;               /*                       @Y30LB15*/
         B     @RC00115                                            0117
@RF00115 BAL   @14,ZEROLIB                                         0117
*     IF STOPSCAN='1'B              /* ERROR FOUND?          @Y30LB15*/
*       THEN                        /* YES                   @Y30LB15*/
@RC00115 TM    STOPSCAN,B'10000000'                                0118
         BNO   @RF00118                                            0118
*       LIBCNT=4;                   /* FORCE EXIT FRM LOOP   @Y30LB15*/
         LA    LIBCNT,4                                            0119
*     ELSE                                                         0120
*       ;                           /*                       @Y30LB15*/
@RF00118 DS    0H                                                  0121
*   END;                            /*                       @Y30LB15*/
         AH    LIBCNT,@CH00044                                     0121
         CH    LIBCNT,@CH00070                                     0121
         BNH   @DL00114                                            0121
*   RETURN;                         /*                       @Y30LB15*/
@EL00002 DS    0H                                                  0122
@EF00002 DS    0H                                                  0122
@ER00002 LM    @14,@05,@SA00002                                    0122
         LM    @07,@12,@SA00002+32                                 0122
         BR    @14                                                 0122
*   END CREATPRC;                   /*                       @Y30LB15*/
*                                                                  0124
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - RECNFPRC                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - ON A RECONFIGURE FOR EACH OF THE 4 POSSIBLE  @Y30LB15*/
*/*             LIBRARIES, DETERMINE IF THERE IS A NEW       @XD00153*/
*/*             LIBRARY BEING ADDED.  IF NOT, TEST FOR NO    @XD00153*/
*/*             LIBRARY DEFINED.                             @XD00153*/
*/*             IF A LIBRARY WAS PRESENT, DETERMINE IF NEW   @XD00153*/
*/*             LIBRARY IS SAME SIZE OR NOT.  IF NEW         @XD00153*/
*/*             LIBRARY IS SAME SIZE, CALL 'COPYLIB', IF NOT @XD00153*/
*/*             CALL 'DIFFLIB'.                              @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0124
*RECNFPRC:                                                         0124
*   PROCEDURE;                      /*                       @Y30LB15*/
RECNFPRC STM   @14,@05,@SA00003                                    0124
         STM   @07,@12,@SA00003+32                                 0124
*   CALL READUT1;                   /* READ IN OLD CELL MAP  @Y30LB15*/
         BAL   @14,READUT1                                         0125
*   IF STOPSCAN='0'B                /* ERROR FOUND?          @Y30LB15*/
*     THEN                          /* NO-CONTINUE           @Y30LB15*/
         TM    STOPSCAN,B'10000000'                                0126
         BNZ   @RF00126                                            0126
*     DO LIBCNT=1 TO 4;             /* LOOP FOR 4 LOGICL LIB @Y30LB15*/
         LA    LIBCNT,1                                            0127
@DL00127 DS    0H                                                  0128
*/*********************************************************  @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   SET POINTERS TO BEGINNING OF NEXT LIBRARY IN INPUT     @Y30LB15*/
*/*   AND OUTPUT BUFFERS                                     @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*********************************************************  @Y30LB15*/
*                                                                  0128
*       OUTPTR=ADDR(UT2BUFER)+(LIBCNT-1)*1360;/*             @Y30LB15*/
         L     @09,BUILDPTR(,R4)                                   0128
         LR    OUTPTR,@09                                          0128
         AL    OUTPTR,@CF00810                                     0128
         LR    @07,LIBCNT                                          0128
         BCTR  @07,0                                               0128
         LR    @05,@07                                             0128
         MH    @05,@CH00652                                        0128
         ALR   OUTPTR,@05                                          0128
*       INPTR=ADDR(UT1BUFER)+(LIBCNT-1)*1320;/*              @Y30LB15*/
         AL    @09,@CF00811                                        0129
         MH    @07,@CH00653                                        0129
         ALR   @09,@07                                             0129
         ST    @09,INPTR                                           0129
*       CALL OLDLIBSZ;              /* DETERMINE SIZ OLDLIB  @Y30LB15*/
         BAL   @14,OLDLIBSZ                                        0130
*       IF LIBSPEC(LIBCNT)='0'B     /* IS NEWLIB UNDEFINED?  @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0131
         MH    @09,@CH00033                                        0131
         ALR   @09,R4                                              0131
         TM    LIBSPEC-12(@09),B'10000000'                         0131
         BNZ   @RF00131                                            0131
*         CALL ZEROLIB;             /* ZERO 5 BLOCKS         @Y30LB15*/
         BAL   @14,ZEROLIB                                         0132
*       ELSE                        /* LIB WAS DEFINED       @Y30LB15*/
*         IF OLIBSIZ='0'            /* WAS LIB DEFINED?      @Y30LB15*/
*           THEN                    /* YES                   @Y30LB15*/
         B     @RC00131                                            0133
@RF00131 CLI   OLIBSIZ,C'0'                                        0133
         BNE   @RF00133                                            0133
*           CALL NLIBBLD;           /* BUILD NEWLIB CELL MAP @Y30LB15*/
         BAL   @14,NLIBBLD                                         0134
*         ELSE                      /* YES                   @Y30LB15*/
*           IF OLIBSIZ=LIBSIZE(LIBCNT)/* OLD & NEWLIB SAM SIZ?     0135
*                                                            @Y30LB15*/
*             THEN                  /* YES                   @Y30LB15*/
         B     @RC00133                                            0135
@RF00133 LR    @09,LIBCNT                                          0135
         MH    @09,@CH00033                                        0135
         ALR   @09,R4                                              0135
         CLC   OLIBSIZ(1),LIBSIZE-12(@09)                          0135
         BNE   @RF00135                                            0135
*             CALL COPYLIB;         /* COPY OLD CELL MAP OVR @Y30LB15*/
         BAL   @14,COPYLIB                                         0136
*           ELSE                    /* NO                    @Y30LB15*/
*             CALL DIFFLIB;         /* LIB SIZE DIFFERENT    @Y30LB15*/
         B     @RC00135                                            0137
@RF00135 BAL   @14,DIFFLIB                                         0137
*       IF STOPSCAN='1'B            /* ERROR FOUND?          @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
@RC00135 DS    0H                                                  0138
@RC00133 DS    0H                                                  0138
@RC00131 TM    STOPSCAN,B'10000000'                                0138
         BNO   @RF00138                                            0138
*         LIBCNT=4;                 /* FORCE EXIT FRM LOOP   @Y30LB15*/
         LA    LIBCNT,4                                            0139
*       ELSE                                                       0140
*         ;                         /*                       @Y30LB15*/
@RF00138 DS    0H                                                  0141
*     END;                          /*                       @Y30LB15*/
         AH    LIBCNT,@CH00044                                     0141
         CH    LIBCNT,@CH00070                                     0141
         BNH   @DL00127                                            0141
*   ELSE                                                           0142
*     ;                             /* YES-ERROR,RETURN      @Y30LB15*/
@RF00126 DS    0H                                                  0143
*   RETURN;                         /*                       @Y30LB15*/
@EL00003 DS    0H                                                  0143
@EF00003 DS    0H                                                  0143
@ER00003 LM    @14,@05,@SA00003                                    0143
         LM    @07,@12,@SA00003+32                                 0143
         BR    @14                                                 0143
*   END RECNFPRC;                   /*                       @Y30LB15*/
*                                                                  0145
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - NLIBBLD                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - A NEW CELL MAP IS BEING BUILT. CALL THE      @Y30LB15*/
*/*             ROUTINE (BUILDA1, BUILDA2, BUILDA3, OR       @XD00153*/
*/*             BUILDA4) TO BUILD THE CORRECT CELL MAP       @XD00153*/
*/*             ACCORDING TO THE SIZE OF THE LIBRARY.        @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0145
*NLIBBLD:                                                          0145
*   PROCEDURE;                      /*                       @Y30LB15*/
NLIBBLD  STM   @14,@02,@SA00004                                    0145
         STM   @04,@05,@SA00004+20                                 0145
         STM   @07,@12,@SA00004+28                                 0145
*   IF LIBSIZE(LIBCNT)='1'          /* IF AN A1 CALL ROUTINE @Y30LB15*/
*     THEN                          /*                       @Y30LB15*/
         LR    @09,LIBCNT                                          0146
         MH    @09,@CH00033                                        0146
         ALR   @09,R4                                              0146
         CLI   LIBSIZE-12(@09),C'1'                                0146
         BNE   @RF00146                                            0146
*     CALL BUILDA1;                 /*                       @Y30LB15*/
         BAL   @14,BUILDA1                                         0147
*   ELSE                            /*                       @Y30LB15*/
*     IF LIBSIZE(LIBCNT)='2'        /* IF AN A2 CALL ROUTINE @Y30LB15*/
*       THEN                        /*                       @Y30LB15*/
         B     @RC00146                                            0148
@RF00146 LR    @09,LIBCNT                                          0148
         MH    @09,@CH00033                                        0148
         ALR   @09,R4                                              0148
         CLI   LIBSIZE-12(@09),C'2'                                0148
         BNE   @RF00148                                            0148
*       CALL BUILDA2;               /*                       @Y30LB15*/
         BAL   @14,BUILDA2                                         0149
*     ELSE                          /*                       @Y30LB15*/
*       IF LIBSIZE(LIBCNT)='3'      /* IF AN A3 CALL ROUTINE @Y30LB15*/
*         THEN                      /*                       @Y30LB15*/
         B     @RC00148                                            0150
@RF00148 LR    @09,LIBCNT                                          0150
         MH    @09,@CH00033                                        0150
         ALR   @09,R4                                              0150
         CLI   LIBSIZE-12(@09),C'3'                                0150
         BNE   @RF00150                                            0150
*         CALL BUILDA3;             /*                       @Y30LB15*/
         BAL   @14,BUILDA3                                         0151
*       ELSE                        /* MUST BE AN A4 LIBRARY @Y30LB15*/
*         CALL BUILDA4;             /*                       @Y30LB15*/
         B     @RC00150                                            0152
@RF00150 BAL   @14,BUILDA4                                         0152
*   RETURN;                         /*                       @Y30LB15*/
@EL00004 DS    0H                                                  0153
@EF00004 DS    0H                                                  0153
@ER00004 LM    @14,@02,@SA00004                                    0153
         LM    @04,@05,@SA00004+20                                 0153
         LM    @07,@12,@SA00004+28                                 0153
         BR    @14                                                 0153
*   END NLIBBLD;                    /*                       @Y30LB15*/
         B     @EL00004                                            0154
*                                                                  0155
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - ZEROLIB                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE LIBRARY IS NOT DEFINED AND MUST BE       @Y30LB15*/
*/*             ZEROED.  A PREFIX IS WRITTEN FOR EACH OF THE @XD00153*/
*/*             5 BLOCKS, INCLUDING THE TABLE ID.            @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0155
*ZEROLIB:                                                          0155
*   PROCEDURE;                      /*                       @Y30LB15*/
ZEROLIB  STM   @14,@02,@SA00005                                    0155
         STM   @04,@05,@SA00005+20                                 0155
         STM   @07,@12,@SA00005+28                                 0155
*   DO I=1 TO 5;                    /*                       @Y30LB15*/
         LA    I,1                                                 0156
@DL00156 DS    0H                                                  0157
*     CALL ZEROBLK;                 /*                       @Y30LB15*/
         BAL   @14,ZEROBLK                                         0157
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0158
         CH    I,@CH00121                                          0158
         BNH   @DL00156                                            0158
*   RETURN;                         /*                       @Y30LB15*/
@EL00005 DS    0H                                                  0159
@EF00005 DS    0H                                                  0159
@ER00005 LM    @14,@02,@SA00005                                    0159
         LM    @04,@05,@SA00005+20                                 0159
         LM    @07,@12,@SA00005+28                                 0159
         BR    @14                                                 0159
*   END ZEROLIB;                    /*                       @Y30LB15*/
*                                                                  0161
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - ZEROBLK                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - WRITE A PREFIX FOR A BLOCK AND ZERO THE 256  @Y30LB15*/
*/*             BYTES IN THE BLOCK.                          @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0161
*ZEROBLK:                                                          0161
*   PROCEDURE;                      /*                       @Y30LB15*/
ZEROBLK  STM   @14,@02,@SA00006                                    0161
         STM   @04,@05,@SA00006+20                                 0161
         STM   @07,@12,@SA00006+28                                 0161
*   CALL WRITPRFX;                  /* WRITE RECORD PREFIX   @Y30LB15*/
         BAL   @14,WRITPRFX                                        0162
*   OBLOCK=OBLOCK&&OBLOCK;          /* ZERO DATA PART OF BLK @Y30LB15*/
         XC    OBLOCK(256,OUTPTR),OBLOCK(OUTPTR)                   0163
*   OUTPTR=OUTPTR+272;              /* UPDAT PTR TO NEXT BLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0164
*   RETURN;                         /*                       @Y30LB15*/
@EL00006 DS    0H                                                  0165
@EF00006 DS    0H                                                  0165
@ER00006 LM    @14,@02,@SA00006                                    0165
         LM    @04,@05,@SA00006+20                                 0165
         LM    @07,@12,@SA00006+28                                 0165
         BR    @14                                                 0165
*   END ZEROBLK;                    /*                       @Y30LB15*/
*                                                                  0167
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - WRITPRFX                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - FILL IN THE PREFIX OF A BLOCK WITH THE TABLE @Y30LB15*/
*/*             ID, CYLINDER, HEAD, AND RECORD ADDRESS.      @XD00153*/
*/*             ZERO THE FILLER AREA.  UPDATE THE RECORD     @XD00153*/
*/*             NUMBER FOR THE NEXT BLOCK AND SET THE DATA   @XD00153*/
*/*             POINTER PAST THE PREFIX.                     @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0167
*WRITPRFX:                                                         0167
*   PROCEDURE;                      /*                       @Y30LB15*/
WRITPRFX STM   @14,@04,12(@13)                                     0167
         STM   @07,@12,48(@13)                                     0167
*   OTABLID=TABLID;                 /* GET TABLE ID          @Y30LB15*/
         MVC   OTABLID(1,OUTPTR),TABLID                            0168
*   OCYL=UT2VCYL;                   /* GET CY OF TABLE       @Y30LB15*/
         L     @07,BUILDPTR(,R4)                                   0169
         MVC   OCYL(1,OUTPTR),UT2VCYL(@07)                         0169
*   OHEAD=UT2VHEAD;                 /* GET TRACK OF TABLE    @Y30LB15*/
         MVC   OHEAD(1,OUTPTR),UT2VHEAD(@07)                       0170
*   OREC=RECCNT;                    /* GET RECORD NUMBER     @Y30LB15*/
         STC   RECCNT,OREC(,OUTPTR)                                0171
*   OFILL=0;                        /* ZERO FILL AREA        @Y30LB15*/
         SLR   @07,@07                                             0172
         ST    @07,OFILL(,OUTPTR)                                  0172
*   RECCNT=RECCNT+1;                /* UPDATE FOR NEXT CALL  @Y30LB15*/
         AH    RECCNT,@CH00044                                     0173
*   BLKPTR=OUTPTR+16;               /* SET PTR STRT NEWBLK   @Y30LB15*/
         LA    BLKPTR,16                                           0174
         ALR   BLKPTR,OUTPTR                                       0174
*   RETURN;                         /*                       @Y30LB15*/
@EL00007 DS    0H                                                  0175
@EF00007 DS    0H                                                  0175
@ER00007 LM    @14,@04,12(@13)                                     0175
         LM    @07,@12,48(@13)                                     0175
         BR    @14                                                 0175
*   END WRITPRFX;                   /*                       @Y30LB15*/
*                                                                  0177
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - BUILDA1                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE LIBRARY HAS JUST ONE FRAME. THE CUBE     @Y30LB15*/
*/*             POINTER LIST ONLY HAS POINTERS TO CUBES IN   @XD00153*/
*/*             THE ONE FRAME AND ONLY THE CELLS IN THAT     @XD00153*/
*/*             FRAME ARE MADE AVAILABLE.                    @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0177
*BUILDA1:                                                          0177
*   PROCEDURE;                      /*                       @Y30LB15*/
BUILDA1  STM   @14,@02,@SA00008                                    0177
         STM   @04,@05,@SA00008+20                                 0177
         STM   @07,@12,@SA00008+28                                 0177
*   CALL WRITPRFX;                  /* WRIT PREFIX FOR HDR   @Y30LB15*/
         BAL   @14,WRITPRFX                                        0178
*   OBLOCK=A1HDR;                   /* WRITE A1 HEADER BLK   @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),A1HDR                            0179
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT PRESNT? @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0180
         MH    @09,@CH00033                                        0180
         ALR   @09,R4                                              0180
         CLI   LIBMAP-12(@09),C'U'                                 0180
         BNE   @RF00180                                            0180
*     CALL USEREXIT;                /*                       @Y30LB15*/
         BAL   @14,USEREXIT                                        0181
*   ELSE                                                           0182
*     ;                             /* NO-CONTINUE USE STAND @Y30LB15*/
@RF00180 DS    0H                                                  0183
*   OUTPTR=OUTPTR+272;              /* INCRMNT PTR TO BLK0   @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0183
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE PREFIX AND ZERO BLOCK FOR DATA BLOCKS 0 AND 1    @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0184
*   DO I=1 TO 2;                    /*                       @Y30LB15*/
         LA    I,1                                                 0184
@DL00184 DS    0H                                                  0185
*     CALL ZEROBLK;                 /* WRITE PREFIX AND 0BLK @Y30LB15*/
         BAL   @14,ZEROBLK                                         0185
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0186
         CH    I,@CH00052                                          0186
         BNH   @DL00184                                            0186
*   CALL WRITPRFX;                  /* WRIT PREFIX DATA BLK2 @Y30LB15*/
         BAL   @14,WRITPRFX                                        0187
*   DO I=1 TO 5;                    /* ZERO 5 CHUNKS OF BLK  @Y30LB15*/
         LA    I,1                                                 0188
@DL00188 DS    0H                                                  0189
*     CHUNK=ZEROCHNK;               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),ZEROCHNK                           0189
*     BLKPTR=BLKPTR+32;             /* UPDATE PTR NEXT CHUNK @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0190
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0191
         CH    I,@CH00121                                          0191
         BNH   @DL00188                                            0191
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* PUT A1 LIB CELL MAP IN PLACE IN END OF BLOCK 2 AND       @Y30LB15*/
*/* BEGINNING OF BLOCK 3.                                    @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0192
*   CHUNK=SUBBLK2(6);               /* COPY 1ST CHUNK        @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),SUBBLK2+160                        0192
*   CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* CE CELL UNAVAILABLE  @Y30LB15*/
         SLR   @09,@09                                             0193
         IC    @09,CHUNK(,BLKPTR)                                  0193
         MVC   @ZT00003+3(1),CUBEOR1                               0193
         N     @09,@ZT00003                                        0193
         STC   @09,CHUNK(,BLKPTR)                                  0193
*   BLKPTR=BLKPTR+32;               /* POINT TO NEXT CHUNK   @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0194
*   DO I=7 TO 8;                    /*                       @Y30LB15*/
         LA    I,7                                                 0195
@DL00195 DS    0H                                                  0196
*     CHUNK=SUBBLK2(I);             /*                       @Y30LB15*/
         LR    @09,I                                               0196
         SLA   @09,5                                               0196
         LA    @02,SUBBLK2-32(@09)                                 0196
         MVC   CHUNK(32,BLKPTR),0(@02)                             0196
*     BLKPTR=BLKPTR+32;             /*                       @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0197
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0198
         CH    I,@CH00042                                          0198
         BNH   @DL00195                                            0198
*   CALL WRITBLK3;                  /* WRIT FINAL BLK OF LIB @Y30LB15*/
         BAL   @14,WRITBLK3                                        0199
*   RETURN;                         /*                       @Y30LB15*/
@EL00008 DS    0H                                                  0200
@EF00008 DS    0H                                                  0200
@ER00008 LM    @14,@02,@SA00008                                    0200
         LM    @04,@05,@SA00008+20                                 0200
         LM    @07,@12,@SA00008+28                                 0200
         BR    @14                                                 0200
*   END BUILDA1;                    /*                       @Y30LB15*/
*                                                                  0202
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - BUILDA2                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE LIBRARY HAS TWO FRAMES. THE CUBE         @Y30LB15*/
*/*             POINTER LIST HAS POINTERS TO CUBES IN THE    @XD00153*/
*/*             TWO FRAMES AND ONLY CELLS IN THE TWO FRAMES  @XD00153*/
*/*             ARE MADE AVAILABLE.                          @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0202
*BUILDA2:                                                          0202
*   PROCEDURE;                      /*                       @Y30LB15*/
BUILDA2  STM   @14,@02,@SA00009                                    0202
         STM   @04,@05,@SA00009+20                                 0202
         STM   @07,@12,@SA00009+28                                 0202
*   CALL WRITPRFX;                  /* WRIT PREFIX FOR HDR   @Y30LB15*/
         BAL   @14,WRITPRFX                                        0203
*   OBLOCK=A2HDR;                   /* WRITE A2 HEADER BLK   @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),A2HDR                            0204
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT PRESNT? @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0205
         MH    @09,@CH00033                                        0205
         ALR   @09,R4                                              0205
         CLI   LIBMAP-12(@09),C'U'                                 0205
         BNE   @RF00205                                            0205
*     CALL USEREXIT;                /*                       @Y30LB15*/
         BAL   @14,USEREXIT                                        0206
*   ELSE                                                           0207
*     ;                             /* NO-CONTINUE USE STAND @Y30LB15*/
@RF00205 DS    0H                                                  0208
*   OUTPTR=OUTPTR+272;              /* INCRMNT PTR TO BLK0   @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0208
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE PREFIX AND ZERO DATA BLOCK 0                     @Y30LB15*/
*/*   WRITE PREFIX AND ZERO 192 BYTES OF DATA BLOCK 1        @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0209
*   CALL ZEROBLK;                   /*                       @Y30LB15*/
         BAL   @14,ZEROBLK                                         0209
*   CALL WRITPRFX;                  /*                       @Y30LB15*/
         BAL   @14,WRITPRFX                                        0210
*   DO I=1 TO 6;                    /* 1ST 6 CHUNKS 192 BYTS @Y30LB15*/
         LA    I,1                                                 0211
@DL00211 DS    0H                                                  0212
*     CHUNK=ZEROCHNK;               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),ZEROCHNK                           0212
*     BLKPTR=BLKPTR+32;             /* PTR TO NEXT CHUNK     @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0213
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0214
         CH    I,@CH00227                                          0214
         BNH   @DL00211                                            0214
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE CELL MAP FOR A2 LIBRARY                          @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0215
*   CHUNK=SUBBLK1(7);               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),SUBBLK1+192                        0215
*   CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* CE CELL UNAVAILABLE  @Y30LB15*/
         SLR   @09,@09                                             0216
         IC    @09,CHUNK(,BLKPTR)                                  0216
         MVC   @ZT00003+3(1),CUBEOR1                               0216
         N     @09,@ZT00003                                        0216
         STC   @09,CHUNK(,BLKPTR)                                  0216
*   BLKPTR=BLKPTR+32;               /*                       @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0217
*   CHUNK=SUBBLK1(8);               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),SUBBLK1+224                        0218
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0219
*   CALL WRITPRFX;                  /* WRIT PREFIX DATA BLK2 @Y30LB15*/
         BAL   @14,WRITPRFX                                        0220
*   OBLOCK=BLOCK2;                  /* COPY IN ENTIRE BLK    @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),BLOCK2                           0221
*   CALL WRITBLK3;                  /* WRIT FINAL BLK OF LIB @Y30LB15*/
         BAL   @14,WRITBLK3                                        0222
*   RETURN;                         /*                       @Y30LB15*/
@EL00009 DS    0H                                                  0223
@EF00009 DS    0H                                                  0223
@ER00009 LM    @14,@02,@SA00009                                    0223
         LM    @04,@05,@SA00009+20                                 0223
         LM    @07,@12,@SA00009+28                                 0223
         BR    @14                                                 0223
*   END BUILDA2;                    /*                       @Y30LB15*/
*                                                                  0225
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - BUILDA3                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE LIBRARY HAS THREE FRAMES. THE CUBE       @Y30LB15*/
*/*             POINTER LIST HAS POINTERS TO CUBES IN THE    @XD00153*/
*/*             THREE FRAMES AND ONLY CELLS IN THE THREE     @XD00153*/
*/*             FRAMES ARE MADE AVAILABLE.                   @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0225
*BUILDA3:                                                          0225
*   PROCEDURE;                      /*                       @Y30LB15*/
BUILDA3  STM   @14,@02,@SA00010                                    0225
         STM   @04,@05,@SA00010+20                                 0225
         STM   @07,@12,@SA00010+28                                 0225
*   CALL WRITPRFX;                  /* WRIT PREFIX FOR HDR   @Y30LB15*/
         BAL   @14,WRITPRFX                                        0226
*   OBLOCK=A3HDR;                   /* WRITE A3 HEADER BLK   @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),A3HDR                            0227
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT PRESNT? @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0228
         MH    @09,@CH00033                                        0228
         ALR   @09,R4                                              0228
         CLI   LIBMAP-12(@09),C'U'                                 0228
         BNE   @RF00228                                            0228
*     CALL USEREXIT;                /*                       @Y30LB15*/
         BAL   @14,USEREXIT                                        0229
*   ELSE                                                           0230
*     ;                             /* NO-CONTINUE USE STAND @Y30LB15*/
@RF00228 DS    0H                                                  0231
*   OUTPTR=OUTPTR+272;              /* INCRMNT PTR TO BLK0   @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0231
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE PREFIX AND ZERO 224 BYTES OF DATA BLOCK 0        @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0232
*   CALL WRITPRFX;                  /*                       @Y30LB15*/
         BAL   @14,WRITPRFX                                        0232
*   DO I=1 TO 7;                    /* 1ST 7 CHUNKS 242 BYTS @Y30LB15*/
         LA    I,1                                                 0233
@DL00233 DS    0H                                                  0234
*     CHUNK=ZEROCHNK;               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),ZEROCHNK                           0234
*     BLKPTR=BLKPTR+32;             /* PTR TO NEXT CHUNK     @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0235
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0236
         CH    I,@CH00134                                          0236
         BNH   @DL00233                                            0236
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE CELL MAP FOR A3 LIBRARY                          @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0237
*   CHUNK=SUBBLK0(8);               /* WRITE LAST CHNK BLK 0 @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),SUBBLK0+224                        0237
*   CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* CE CELL UNAVAILABLE  @Y30LB15*/
         SLR   @09,@09                                             0238
         IC    @09,CHUNK(,BLKPTR)                                  0238
         MVC   @ZT00003+3(1),CUBEOR1                               0238
         N     @09,@ZT00003                                        0238
         STC   @09,CHUNK(,BLKPTR)                                  0238
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0239
*   CALL WRITPRFX;                  /* WRIT PREFIX DATA BLK1 @Y30LB15*/
         BAL   @14,WRITPRFX                                        0240
*   OBLOCK=BLOCK1;                  /* COPY IN ENTIRE BLK    @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),BLOCK1                           0241
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0242
*   CALL WRITPRFX;                  /* WRIT PREFIX DATA BLK2 @Y30LB15*/
         BAL   @14,WRITPRFX                                        0243
*   OBLOCK=BLOCK2;                  /* COPY IN ENTIRE BLK    @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),BLOCK2                           0244
*   CALL WRITBLK3;                  /* WRIT FINAL BLK OF LIB @Y30LB15*/
         BAL   @14,WRITBLK3                                        0245
*   RETURN;                         /*                       @Y30LB15*/
@EL00010 DS    0H                                                  0246
@EF00010 DS    0H                                                  0246
@ER00010 LM    @14,@02,@SA00010                                    0246
         LM    @04,@05,@SA00010+20                                 0246
         LM    @07,@12,@SA00010+28                                 0246
         BR    @14                                                 0246
*   END BUILDA3;                    /*                       @Y30LB15*/
*                                                                  0248
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - BUILDA4                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE LIBRARY HAS FOUR FRAMES. THE CUBE        @XD00153*/
*/*             POINTER LIST IS COMPLETE AND ALL CELLS ARE   @XD00153*/
*/*             MARKED AVAILABLE.                            @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0248
*BUILDA4:                                                          0248
*   PROCEDURE;                      /*                       @Y30LB15*/
BUILDA4  STM   @14,@02,@SA00011                                    0248
         STM   @04,@05,@SA00011+20                                 0248
         STM   @07,@12,@SA00011+28                                 0248
*   CALL WRITPRFX;                  /* WRIT PREFIX FOR HDR   @Y30LB15*/
         BAL   @14,WRITPRFX                                        0249
*   OBLOCK=A4HDR;                   /* WRITE A4 HEADER BLK   @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),A4HDR                            0250
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT PRESNT? @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0251
         MH    @09,@CH00033                                        0251
         ALR   @09,R4                                              0251
         CLI   LIBMAP-12(@09),C'U'                                 0251
         BNE   @RF00251                                            0251
*     CALL USEREXIT;                /*                       @Y30LB15*/
         BAL   @14,USEREXIT                                        0252
*   ELSE                                                           0253
*     ;                             /* NO-CONTINUE USE STAND @Y30LB15*/
@RF00251 DS    0H                                                  0254
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*   WRITE PREFIX AND COPY IN ALL BLOCKS FROM CONSTANT AREA @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0254
*   DO I=1 TO 3;                    /*                       @Y30LB15*/
         LA    I,1                                                 0254
@DL00254 DS    0H                                                  0255
*     OUTPTR=OUTPTR+272;            /* INCRMNT PTR TO NXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0255
*     CALL WRITPRFX;                /*                       @Y30LB15*/
         BAL   @14,WRITPRFX                                        0256
*     IF I=1                        /* FIRST TIME THRU?      @Y30LB15*/
*       THEN                        /* YES WRITE DATA BLK 0  @Y30LB15*/
         CH    I,@CH00044                                          0257
         BNE   @RF00257                                            0257
*       OBLOCK=BLOCK0;              /*                       @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),BLOCK0                           0258
*     ELSE                                                         0259
*       IF I=2                      /* SECOND TIME?          @Y30LB15*/
*         THEN                      /* YES WRIT DATA BLK 1   @Y30LB15*/
         B     @RC00257                                            0259
@RF00257 CH    I,@CH00052                                          0259
         BNE   @RF00259                                            0259
*         OBLOCK=BLOCK1;            /*                       @Y30LB15*/
         MVC   OBLOCK(256,OUTPTR),BLOCK1                           0260
*       ELSE                        /* NO WRIT DATA BLK 2    @Y30LB15*/
*         OBLOCK=BLOCK2;            /*                       @Y30LB15*/
         B     @RC00259                                            0261
@RF00259 MVC   OBLOCK(256,OUTPTR),BLOCK2                           0261
*   END;                            /*                       @Y30LB15*/
@RC00259 DS    0H                                                  0262
@RC00257 AH    I,@CH00044                                          0262
         CH    I,@CH00050                                          0262
         BNH   @DL00254                                            0262
*   CALL WRITBLK3;                  /* WRIT FINAL BLK OF LIB @Y30LB15*/
         BAL   @14,WRITBLK3                                        0263
*   RETURN;                         /*                       @Y30LB15*/
@EL00011 DS    0H                                                  0264
@EF00011 DS    0H                                                  0264
@ER00011 LM    @14,@02,@SA00011                                    0264
         LM    @04,@05,@SA00011+20                                 0264
         LM    @07,@12,@SA00011+28                                 0264
         BR    @14                                                 0264
*   END BUILDA4;                    /*                       @Y30LB15*/
*                                                                  0266
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - WRITBLK3                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE FIFTH BLOCK FOR A DEFINED LIBRARY HAS    @Y30LB15*/
*/*             ONLY 28 BYTES OF CELLS.  THE REST OF THE     @XD00153*/
*/*             BLOCK IS ZEROS.  THE BLOCK IS WRITTEN THE    @XD00153*/
*/*             SAME WAY FOR ANY SIZE LIBRARY.               @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0266
*WRITBLK3:                                                         0266
*   PROCEDURE;                      /*                       @Y30LB15*/
WRITBLK3 STM   @14,@02,@SA00012                                    0266
         STM   @04,@05,@SA00012+20                                 0266
         STM   @07,@12,@SA00012+28                                 0266
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0267
*   CALL WRITPRFX;                  /* WRITE PREFIX BLK3     @Y30LB15*/
         BAL   @14,WRITPRFX                                        0268
*   CHUNK=BLOCK3;                   /* WRIT ONLY CHUNK INBLK @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),BLOCK3                             0269
*   DO I=1 TO 7;                    /* ZERO REST OF BLOCK 3  @Y30LB15*/
         LA    I,1                                                 0270
@DL00270 DS    0H                                                  0271
*     BLKPTR=BLKPTR+32;             /* UPDATE PTR NEXT CHUNK @Y30LB15*/
         AH    BLKPTR,@CH00309                                     0271
*     CHUNK=ZEROCHNK;               /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),ZEROCHNK                           0272
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0273
         CH    I,@CH00134                                          0273
         BNH   @DL00270                                            0273
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0274
*   RETURN;                         /*                       @Y30LB15*/
@EL00012 DS    0H                                                  0275
@EF00012 DS    0H                                                  0275
@ER00012 LM    @14,@02,@SA00012                                    0275
         LM    @04,@05,@SA00012+20                                 0275
         LM    @07,@12,@SA00012+28                                 0275
         BR    @14                                                 0275
*   END WRITBLK3;                   /*                       @Y30LB15*/
*                                                                  0277
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - OLDLIBSZ                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - PROCESS THE HEADER BLOCK OF THE INPUT CELL   @Y30LB15*/
*/*             MAP TO DETERMINE THE SIZE OF THE OLD LIBRARY @XD00153*/
*/*             SET PARAMETER OLIBSIZ TO 0 IF THE LIBRARY    @XD00153*/
*/*             WAS NOT DEFINED, OR TO 1,2,3, OR 4 IF THE    @XD00153*/
*/*             LIBRARY WAS DEFINED.                         @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0277
*OLDLIBSZ:                                                         0277
*   PROCEDURE;                      /*                       @Y30LB15*/
OLDLIBSZ STM   @14,@12,12(@13)                                     0277
*   IF A1PTR='0000'X                /* FIRST 2 PTRS ZERO?    @Y30LB15*/
*     THEN                          /* YES-LIB NOT DEFINED   @Y30LB15*/
         L     @05,INPTR                                           0278
         LH    @05,A1PTR(,@05)                                     0278
         LTR   @05,@05                                             0278
         BNZ   @RF00278                                            0278
*     OLIBSIZ='0';                  /* SET SIZE TO ZERO      @Y30LB15*/
         MVI   OLIBSIZ,C'0'                                        0279
*   ELSE                            /* NO                    @Y30LB15*/
*     IF A2PTR='FF'X                /* 1ST PTR FOR A2 DEFND? @Y30LB15*/
*       THEN                        /* NO-A1 LIBRARY         @Y30LB15*/
         B     @RC00278                                            0280
@RF00278 L     @05,INPTR                                           0280
         CLI   A2PTR(@05),255                                      0280
         BNE   @RF00280                                            0280
*       OLIBSIZ='1';                /* SET SIZE              @Y30LB15*/
         MVI   OLIBSIZ,C'1'                                        0281
*     ELSE                          /* BIGGER THAN A1        @Y30LB15*/
*       IF A3PTR='FF'X              /* 1ST PTR FOR A3 DEFND? @Y30LB15*/
*         THEN                      /* NO-A2 LIBRARY         @Y30LB15*/
         B     @RC00280                                            0282
@RF00280 L     @05,INPTR                                           0282
         CLI   A3PTR(@05),255                                      0282
         BNE   @RF00282                                            0282
*         OLIBSIZ='2';              /* SET SIZE              @Y30LB15*/
         MVI   OLIBSIZ,C'2'                                        0283
*       ELSE                        /* BIGGER THAN A2        @Y30LB15*/
*         IF A4PTR='FF'X            /* 1ST PTR FOR A4 DEFND? @Y30LB15*/
*           THEN                    /* NO-A3 LIBRARY         @Y30LB15*/
         B     @RC00282                                            0284
@RF00282 L     @05,INPTR                                           0284
         CLI   A4PTR(@05),255                                      0284
         BNE   @RF00284                                            0284
*           OLIBSIZ='3';            /* SET SIZE              @Y30LB15*/
         MVI   OLIBSIZ,C'3'                                        0285
*         ELSE                      /* YES-A4 LIBRARY        @Y30LB15*/
*           OLIBSIZ='4';            /* SET SIZE              @Y30LB15*/
         B     @RC00284                                            0286
@RF00284 MVI   OLIBSIZ,C'4'                                        0286
*   RETURN;                         /*                       @Y30LB15*/
@EL00013 DS    0H                                                  0287
@EF00013 DS    0H                                                  0287
@ER00013 LM    @14,@12,12(@13)                                     0287
         BR    @14                                                 0287
*   END OLDLIBSZ;                   /*                       @Y30LB15*/
         B     @EL00013                                            0288
*                                                                  0289
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - COPYLIB                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - WRITE PREFIX FOR EACH NEW BLOCK AND COPY     @Y30LB15*/
*/*             THE FIVE BLOCK OLD CELL MAP TO FIVE BLOCKS   @XD00153*/
*/*             OF THE NEW LIBRARY CELL MAP.                 @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0289
*COPYLIB:                                                          0289
*   PROCEDURE;                      /*                       @Y30LB15*/
COPYLIB  STM   @14,@05,@SA00014                                    0289
         STM   @07,@12,@SA00014+32                                 0289
*   CALL WRITPRFX;                  /* WRITE NEW PREFIX      @Y30LB15*/
         BAL   @14,WRITPRFX                                        0290
*   OBLOCK=IBLOCK;                  /* COPY HEADER BLOCK     @Y30LB15*/
         L     @09,INPTR                                           0291
         MVC   OBLOCK(256,OUTPTR),IBLOCK(@09)                      0291
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT PRESNT? @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0292
         MH    @09,@CH00033                                        0292
         ALR   @09,R4                                              0292
         CLI   LIBMAP-12(@09),C'U'                                 0292
         BNE   @RF00292                                            0292
*     DO;                           /*                       @Y30LB15*/
*                                                                  0293
*       /*************************************************************/
*       /*                                                           */
*       /* ************************************************* @Y30LB15*/
*       /*                                                   @Y30LB15*/
*       /* INITIALIZE CUBE BIT MAP DEPENDING ON LIBRARY SIZ  @Y30LB15*/
*       /*                                                   @Y30LB15*/
*       /* ************************************************* @Y30LB15*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0294
*       IF OLIBSIZ='1'              /*                       @Y30LB15*/
*         THEN                      /*                       @Y30LB15*/
         CLI   OLIBSIZ,C'1'                                        0294
         BNE   @RF00294                                            0294
*         OBLOCK(1:22)=A1HDR(1:22); /*                       @Y30LB15*/
         MVC   OBLOCK(22,OUTPTR),A1HDR                             0295
*       ELSE                        /*                       @Y30LB15*/
*         IF OLIBSIZ='2'            /*                       @Y30LB15*/
*           THEN                    /*                       @Y30LB15*/
         B     @RC00294                                            0296
@RF00294 CLI   OLIBSIZ,C'2'                                        0296
         BNE   @RF00296                                            0296
*           OBLOCK(1:22)=A2HDR(1:22);/*                      @Y30LB15*/
         MVC   OBLOCK(22,OUTPTR),A2HDR                             0297
*         ELSE                      /*                       @Y30LB15*/
*           IF OLIBSIZ='3'          /*                       @Y30LB15*/
*             THEN                  /*                       @Y30LB15*/
         B     @RC00296                                            0298
@RF00296 CLI   OLIBSIZ,C'3'                                        0298
         BNE   @RF00298                                            0298
*             OBLOCK(1:22)=A3HDR(1:22);/*                    @Y30LB15*/
         MVC   OBLOCK(22,OUTPTR),A3HDR                             0299
*           ELSE                    /*                       @Y30LB15*/
*             OBLOCK(1:22)=A4HDR(1:22);/*                    @Y30LB15*/
         B     @RC00298                                            0300
@RF00298 MVC   OBLOCK(22,OUTPTR),A4HDR                             0300
*       SAVOPTR=OUTPTR;             /* SAV BEG LIB ADDR      @Y30LB15*/
@RC00298 DS    0H                                                  0301
@RC00296 DS    0H                                                  0301
@RC00294 ST    OUTPTR,SAVOPTR                                      0301
*       CALL USEREXIT;              /*                       @Y30LB15*/
         BAL   @14,USEREXIT                                        0302
*     END;                          /*                       @Y30LB15*/
*   ELSE                                                           0304
*     ;                             /* NO-CONTINUE USE STAND @Y30LB15*/
@RF00292 DS    0H                                                  0305
*   OUTPTR=OUTPTR+272;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0305
*   INPTR=INPTR+264;                /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         LA    @09,264                                             0306
         AL    @09,INPTR                                           0306
         ST    @09,INPTR                                           0306
*   DO I=1 TO 4;                    /*                       @Y30LB15*/
         LA    I,1                                                 0307
@DL00307 DS    0H                                                  0308
*     CALL WRITPRFX;                /* WRITE NEW PREFIX      @Y30LB15*/
         BAL   @14,WRITPRFX                                        0308
*     OBLOCK=IBLOCK;                /* COPY 1 BLOCK DATA     @Y30LB15*/
         L     @09,INPTR                                           0309
         MVC   OBLOCK(256,OUTPTR),IBLOCK(@09)                      0309
*     OUTPTR=OUTPTR+272;            /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0310
*     INPTR=INPTR+264;              /* UPDATE PTR TO NEXTBLK @Y30LB15*/
         AH    @09,@CH00403                                        0311
         ST    @09,INPTR                                           0311
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0312
         CH    I,@CH00070                                          0312
         BNH   @DL00307                                            0312
*   IF LIBMAP(LIBCNT)='U'           /* WAS USER EXIT CALLED  @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0313
         MH    @09,@CH00033                                        0313
         ALR   @09,R4                                              0313
         CLI   LIBMAP-12(@09),C'U'                                 0313
         BNE   @RF00313                                            0313
*     DO;                           /*                       @Y30LB15*/
*       OUTPTR=SAVOPTR;             /* PT BEGIN LIB IN BUF   @Y30LB15*/
         L     OUTPTR,SAVOPTR                                      0315
*       CALL CUBECHK;               /* CHK FOR FULL CUBES    @Y30LB15*/
         BAL   @14,CUBECHK                                         0316
*     END;                          /*                       @Y30LB15*/
*   RETURN;                         /*                       @Y30LB15*/
@EL00014 DS    0H                                                  0318
@EF00014 DS    0H                                                  0318
@ER00014 LM    @14,@05,@SA00014                                    0318
         LM    @07,@12,@SA00014+32                                 0318
         BR    @14                                                 0318
*   END COPYLIB;                    /*                       @Y30LB15*/
         B     @EL00014                                            0319
*                                                                  0320
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - READUT1                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - SET UP CALL AREA WITH INFORMATION NEEDED     @Y30LB15*/
*/*             BY THE READ MODULE(ICGDSB05).  LINK TO THE   @XD00153*/
*/*             READ MODULE WHICH WILL READ THE ONE TRACK    @XD00153*/
*/*             WHERE THE CELL MAP IS.  SET UP POINTER TO    @XD00153*/
*/*             THE BUFFER HOLDING THE RECORD.               @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0320
*READUT1:                                                          0320
*   PROCEDURE;                      /*                       @Y30LB15*/
READUT1  STM   @14,@12,@SA00015                                    0320
*   B05DCBPT=ADDR(UT1DCB);          /* SET DCB ADDR          @Y30LB15*/
         L     @05,BUILDPTR(,R4)                                   0321
         LA    @15,UT1DCB(,@05)                                    0321
         ST    @15,B05DCBPT(,@05)                                  0321
*   B05BUFPT=ADDR(UT1BUFER);        /* SET BUFFER ADDR       @Y30LB15*/
         LR    @01,@05                                             0322
         AL    @01,@CF00811                                        0322
         ST    @01,B05BUFPT(,@05)                                  0322
*   B05TBLID=UT1TABID;              /* SPECIFY TABLE         @Y30LB15*/
         MVC   B05TBLID(1,@05),UT1TABID(@05)                       0323
*   B05ADDR=INADDR;                 /* SET CYL,HEAD,REC      @Y30LB15*/
         MVC   B05ADDR(3,@05),INADDR(@05)                          0324
*   GEN(LINK EP=ICGDSB05);          /* READ OLD CELL MAP     @Y30LB15*/
         LINK EP=ICGDSB05
*   INPTR=ADDR(UT1BUFER);           /*                       @Y30LB15*/
         L     @05,BUILDPTR(,R4)                                   0326
         LR    @01,@05                                             0326
         AL    @01,@CF00811                                        0326
         ST    @01,INPTR                                           0326
*   IF UT2TABID^=ITABLID            /* TABLE ID CORRECT?     @Y30LB15*/
*     THEN                                                         0327
         CLC   UT2TABID(1,@05),ITABLID(@01)                        0327
         BE    @RF00327                                            0327
*     DO;                           /* NO                    @Y30LB15*/
*       OUTBUF2(1:49)=B09MSG1;      /* WRITE MSG             @Y30LB15*/
         MVC   OUTBUF2(49,R4),B09MSG1                              0329
*       CALL PUTIT1;                /*                       @Y30LB15*/
         BAL   @14,PUTIT1                                          0330
*     END;                          /*                       @Y30LB15*/
*   ELSE                                                           0332
*     ;                             /*                       @Y30LB15*/
@RF00327 DS    0H                                                  0333
*   RETURN;                         /*                       @Y30LB15*/
@EL00015 DS    0H                                                  0333
@EF00015 DS    0H                                                  0333
@ER00015 LM    @14,@12,@SA00015                                    0333
         BR    @14                                                 0333
*   END READUT1;                    /*                       @Y30LB15*/
*                                                                  0335
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - DIFFLIB                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE OLD AND NEW LIBRARIES ARE NOT THE SAME   @Y30LB15*/
*/*             SIZE ON AN UPDATE.  CALL ROUTINES NECESSARY  @XD00153*/
*/*             DEPENDING ON WHETHER THE NEW LIBRARY IS      @XD00153*/
*/*             LARGER OR SMALLER THAN THE OLD LIBRARY.      @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0335
*DIFFLIB:                                                          0335
*   PROCEDURE;                      /*                       @Y30LB15*/
DIFFLIB  STM   @14,@05,@SA00016                                    0335
         STM   @07,@12,@SA00016+32                                 0335
*   IF OLIBSIZ<LIBSIZE(LIBCNT)      /* NEWLIB BIGGER?        @Y30LB15*/
*     THEN                                                         0336
         LR    @09,LIBCNT                                          0336
         MH    @09,@CH00033                                        0336
         ALR   @09,R4                                              0336
         CLC   OLIBSIZ(1),LIBSIZE-12(@09)                          0336
         BNL   @RF00336                                            0336
*     DO;                           /* YES                   @Y30LB15*/
*       CALL NLIBBLD;               /* 1ST BUILD AS NEWLIB   @Y30LB15*/
         BAL   @14,NLIBBLD                                         0338
*       OUTPTR=ADDR(UT2BUFER)+(LIBCNT-1)*1360;/* PTR CORRECT @Y30LB15*/
         L     OUTPTR,BUILDPTR(,R4)                                0339
         AL    OUTPTR,@CF00810                                     0339
         LR    @09,LIBCNT                                          0339
         BCTR  @09,0                                               0339
         MH    @09,@CH00652                                        0339
         ALR   OUTPTR,@09                                          0339
*       CECELL='A';                 /* CE CELL BIT TURN ON   @Y30LB15*/
         MVI   CECELL,C'A'                                         0340
*       CALL COPYPART;              /* COPY CELL MAP OLDLIB  @Y30LB15*/
         BAL   @14,COPYPART                                        0341
*       CALL CUBECHK;               /* FILL IN CUBE BITS     @Y30LB15*/
         BAL   @14,CUBECHK                                         0342
*     END;                          /*                       @Y30LB15*/
*   ELSE                                                           0344
*     DO;                           /* NEWLIB SMALLER        @Y30LB15*/
         B     @RC00336                                            0344
@RF00336 DS    0H                                                  0345
*       CALL NLIBBLD;               /* 1ST BUILD NEWLIB      @Y30LB15*/
         BAL   @14,NLIBBLD                                         0345
*       OUTPTR=ADDR(UT2BUFER)+(LIBCNT-1)*1360;/* PTR CORRECT @Y30LB15*/
         L     OUTPTR,BUILDPTR(,R4)                                0346
         AL    OUTPTR,@CF00810                                     0346
         LR    @09,LIBCNT                                          0346
         BCTR  @09,0                                               0346
         MH    @09,@CH00652                                        0346
         ALR   OUTPTR,@09                                          0346
*       CALL LIBCOMP;               /* CHK FOR FULL CELLS IN @Y30LB15
*                                      DELETED PORTION       @Y30LB15*/
         BAL   @14,LIBCOMP                                         0347
*       IF STOPSCAN='0'B            /* DELETED CELLS EMPTY?  @Y30LB15*/
*         THEN                                                     0348
         TM    STOPSCAN,B'10000000'                                0348
         BNZ   @RF00348                                            0348
*         DO;                       /* YES-CONTINUE          @Y30LB15*/
*           OLIBSIZ=LIBSIZE(LIBCNT);/* ONLY NEWSIZ PART COPY @Y30LB15*/
         LR    @09,LIBCNT                                          0350
         MH    @09,@CH00033                                        0350
         ALR   @09,R4                                              0350
         MVC   OLIBSIZ(1),LIBSIZE-12(@09)                          0350
*           CECELL='U';             /* CE CELL TURN OFF      @Y30LB15*/
         MVI   CECELL,C'U'                                         0351
*           CALL COPYPART;          /*                       @Y30LB15*/
         BAL   @14,COPYPART                                        0352
*           CALL CUBECHK;           /* FILL IN CUBE BITS     @Y30LB15*/
         BAL   @14,CUBECHK                                         0353
*         END;                      /*                       @Y30LB15*/
*       ELSE                                                       0355
*         ;                         /* NO-ERROR              @Y30LB15*/
@RF00348 DS    0H                                                  0356
*     END;                          /*                       @Y30LB15*/
*   RETURN;                         /*                       @Y30LB15*/
@EL00016 DS    0H                                                  0357
@EF00016 DS    0H                                                  0357
@ER00016 LM    @14,@05,@SA00016                                    0357
         LM    @07,@12,@SA00016+32                                 0357
         BR    @14                                                 0357
*   END DIFFLIB;                    /*                       @Y30LB15*/
         B     @EL00016                                            0358
*                                                                  0359
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - COPYPART                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - DETERMINE HOW MUCH OF THE CELL BIT MAP       @Y30LB15*/
*/*             SHOULD BE COPIED AND CALL THE ROUTINE TO DO  @XD00153*/
*/*             THE COPY.                                    @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0359
*COPYPART:                                                         0359
*   PROCEDURE;                      /*                       @Y30LB15*/
COPYPART STM   @14,@12,@SA00017                                    0359
*   BLKPTR=OUTPTR+272;              /* INCRMNT PTR PAST HDR  @Y30LB15*/
         LA    BLKPTR,272                                          0360
         ALR   BLKPTR,OUTPTR                                       0360
*   INBLKPTR=INPTR+264;             /* INCRMNT PTR PAST HDR  @Y30LB15*/
         LA    INBLKPTR,264                                        0361
         AL    INBLKPTR,INPTR                                      0361
*   IF OLIBSIZ='3'                  /* A3 LIBRARY?           @Y30LB15*/
*     THEN                                                         0362
         CLI   OLIBSIZ,C'3'                                        0362
         BNE   @RF00362                                            0362
*     DO;                           /* YES                   @Y30LB15*/
*       CALL A3PART;                /* COPY A3 CELLS ONLY    @Y30LB15*/
         BAL   @14,A3PART                                          0364
*       BLKPTR=OUTPTR+272+16+(7*32);/* PT BEGIN A3 BIT MAP   @Y30LB15*/
         LA    BLKPTR,512                                          0365
         ALR   BLKPTR,OUTPTR                                       0365
*       IF CECELL='A'               /* CE CELL BIT HERE?     @Y30LB15*/
*         THEN                      /* NO                    @Y30LB15*/
         CLI   CECELL,C'A'                                         0366
         BNE   @RF00366                                            0366
*         CHUNK(1:1)=CHUNK(1:1)×CELEMPTY;/* MARK CELL FREE   @Y30LB15*/
         OC    CHUNK(1,BLKPTR),CELEMPTY                            0367
*       ELSE                        /* YES - CE CELL HERE    @Y30LB15*/
*         CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* MARK CELL FULL @Y30LB15*/
         B     @RC00366                                            0368
@RF00366 SLR   @02,@02                                             0368
         IC    @02,CHUNK(,BLKPTR)                                  0368
         MVC   @ZT00003+3(1),CUBEOR1                               0368
         N     @02,@ZT00003                                        0368
         STC   @02,CHUNK(,BLKPTR)                                  0368
*     END;                          /*                       @Y30LB15*/
*   ELSE                            /* NO                    @Y30LB15*/
*     IF OLIBSIZ='2'                /* A2 LIBRARY?           @Y30LB15*/
*       THEN                                                       0370
         B     @RC00362                                            0370
@RF00362 CLI   OLIBSIZ,C'2'                                        0370
         BNE   @RF00370                                            0370
*       DO;                         /* YES                   @Y30LB15*/
*         BLKPTR=BLKPTR+272+16+(6*32);/*                     @Y30LB15*/
         AH    BLKPTR,@CH00794                                     0372
*         INBLKPTR=INBLKPTR+264+8+(6*32);/*                  @Y30LB15*/
         AH    INBLKPTR,@CH00795                                   0373
*         CALL A2PART;              /*                       @Y30LB15*/
         BAL   @14,A2PART                                          0374
*         BLKPTR=OUTPTR+(2*272)+16+(6*32);/* BEGIN A2 BITMAP @Y30LB15*/
         LA    BLKPTR,752                                          0375
         ALR   BLKPTR,OUTPTR                                       0375
*         IF CECELL='A'             /* CE CELL BIT HERE?     @Y30LB15*/
*           THEN                    /* NO                    @Y30LB15*/
         CLI   CECELL,C'A'                                         0376
         BNE   @RF00376                                            0376
*           CHUNK(1:1)=CHUNK(1:1)×CELEMPTY;/* MRK CELL FREE  @Y30LB15*/
         OC    CHUNK(1,BLKPTR),CELEMPTY                            0377
*         ELSE                      /* YES - CE CELL HERE    @Y30LB15*/
*           CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* MRK CELL FULL      0378
*                                                            @Y30LB15*/
         B     @RC00376                                            0378
@RF00376 SLR   @02,@02                                             0378
         IC    @02,CHUNK(,BLKPTR)                                  0378
         MVC   @ZT00003+3(1),CUBEOR1                               0378
         N     @02,@ZT00003                                        0378
         STC   @02,CHUNK(,BLKPTR)                                  0378
*       END;                        /*                       @Y30LB15*/
*     ELSE                                                         0380
*       DO;                         /*                       @Y30LB15*/
         B     @RC00370                                            0380
@RF00370 DS    0H                                                  0381
*         BLKPTR=BLKPTR+544+16+(5*32);/*                     @Y30LB15*/
         AH    BLKPTR,@CH00798                                     0381
*         INBLKPTR=INBLKPTR+528+8+(5*32);/*                  @Y30LB15*/
         AH    INBLKPTR,@CH00800                                   0382
*         CALL A1PART;              /*                       @Y30LB15*/
         BAL   @14,A1PART                                          0383
*         BLKPTR=OUTPTR+(3*272)+16+(5*32);/* BEGIN A1 BITMAP @Y30LB15*/
         LA    BLKPTR,992                                          0384
         ALR   BLKPTR,OUTPTR                                       0384
*         IF CECELL='A'             /* CE CELL BIT HERE?     @Y30LB15*/
*           THEN                    /* NO                    @Y30LB15*/
         CLI   CECELL,C'A'                                         0385
         BNE   @RF00385                                            0385
*           CHUNK(1:1)=CHUNK(1:1)×CELEMPTY;/* MRK CELL FREE  @Y30LB15*/
         OC    CHUNK(1,BLKPTR),CELEMPTY                            0386
*         ELSE                      /* YES - CE CELL HERE    @Y30LB15*/
*           CHUNK(1:1)=CHUNK(1:1)&CUBEOR1(1);/* MRK CELL FULL      0387
*                                                            @Y30LB15*/
         B     @RC00385                                            0387
@RF00385 SLR   @02,@02                                             0387
         IC    @02,CHUNK(,BLKPTR)                                  0387
         MVC   @ZT00003+3(1),CUBEOR1                               0387
         N     @02,@ZT00003                                        0387
         STC   @02,CHUNK(,BLKPTR)                                  0387
*       END;                        /*                       @Y30LB15*/
*   RETURN;                         /*                       @Y30LB15*/
@EL00017 DS    0H                                                  0389
@EF00017 DS    0H                                                  0389
@ER00017 LM    @14,@12,@SA00017                                    0389
         BR    @14                                                 0389
*   END COPYPART;                   /*                       @Y30LB15*/
         B     @EL00017                                            0390
*                                                                  0391
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - A3PART                                 @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - COPY THE PORTION OF THE CELL BIT MAP FOR     @Y30LB15*/
*/*             EACH OF THE FRAMES OF THE OLD LIBRARY THAT   @XD00153*/
*/*             WILL BE IN THE NEW LIBRARY.  THE ROUTINE IS  @XD00153*/
*/*             ENTERED AT ONE OF THREE PLACES DEPENDING ON  @XD00153*/
*/*             THE AMOUNT TO BE COPIED.                     @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0391
*A3PART:                                                           0391
*   PROCEDURE;                      /*                       @Y30LB15*/
A3PART   STM   @14,@12,@SA00018                                    0391
*   BLKPTR=BLKPTR+16+(7*32);        /* PTR LAST CHUNK BLK    @Y30LB15*/
         AH    BLKPTR,@CH00804                                     0392
*   INBLKPTR=INBLKPTR+8+(7*32);     /* PTR LAST CHUNK BLK    @Y30LB15*/
         AH    INBLKPTR,@CH00805                                   0393
*   CHUNK=INCHUNK;                  /* COPY 32 BYTES         @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),INCHUNK(INBLKPTR)                  0394
*   BLKPTR=BLKPTR+32+16;            /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    BLKPTR,@CH00236                                     0395
*   INBLKPTR=INBLKPTR+32+8;         /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    INBLKPTR,@CH00319                                   0396
*   J=6;                            /* NUM CHUNKS TO BE COPY @Y30LB15*/
         MVC   J(2),@CH00227                                       0397
*   CALL CHNKCOPY;                  /* COPY 32 BYTES AT TIME @Y30LB15*/
         BAL   @14,CHNKCOPY                                        0398
*A2PART:                                                           0399
*   ENTRY;                          /*                       @Y30LB15*/
         B     @EC00399                                            0399
A2PART   STM   @14,@12,@SA00018                                    0399
@EC00399 DS    0H                                                  0400
*   J=2;                            /* REMAIN OF BLK         @Y30LB15*/
         MVC   J(2),@CH00052                                       0400
*   CALL CHNKCOPY;                  /* COPY 32 BYTES AT TIME @Y30LB15*/
         BAL   @14,CHNKCOPY                                        0401
*   BLKPTR=BLKPTR+16;               /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    BLKPTR,@CH00163                                     0402
*   INBLKPTR=INBLKPTR+8;            /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    INBLKPTR,@CH00042                                   0403
*   J=5;                            /* CHNKS LEFT A2         @Y30LB15*/
         MVC   J(2),@CH00121                                       0404
*   CALL CHNKCOPY;                  /* COPY 32 BYTES AT TIME @Y30LB15*/
         BAL   @14,CHNKCOPY                                        0405
*A1PART:                                                           0406
*   ENTRY;                          /*                       @Y30LB15*/
         B     @EC00406                                            0406
A1PART   STM   @14,@12,@SA00018                                    0406
@EC00406 DS    0H                                                  0407
*   J=3;                            /* REMAIN OF BLK         @Y30LB15*/
         MVC   J(2),@CH00050                                       0407
*   CALL CHNKCOPY;                  /* COPY 32 BYTES AT TIME @Y30LB15*/
         BAL   @14,CHNKCOPY                                        0408
*   BLKPTR=BLKPTR+16;               /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    BLKPTR,@CH00163                                     0409
*   INBLKPTR=INBLKPTR+8;            /* PT PAST PREFIX NXTBLK @Y30LB15*/
         AH    INBLKPTR,@CH00042                                   0410
*   CHUNK=INCHUNK;                  /* ONLY VALID 32 BYTES   @Y30LB15
*                                      IN LAST BLOCK         @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),INCHUNK(INBLKPTR)                  0411
*   RETURN;                         /*                       @Y30LB15*/
@EL00018 DS    0H                                                  0412
@EF00018 DS    0H                                                  0412
@ER00018 LM    @14,@12,@SA00018                                    0412
         BR    @14                                                 0412
*   END A3PART;                     /*                       @Y30LB15*/
*                                                                  0414
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - CHNKCOPY                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - COPY ONE 32 BYTE SECTION OF A DATA BLOCK     @Y30LB15*/
*/*             AND UPDATE THE POINTERS IN THE INPUT BUFFER  @XD00153*/
*/*             AND OUT BUFFER TO THE NEXT 32 BYTE CHUNK.    @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0414
*CHNKCOPY:                                                         0414
*   PROCEDURE;                      /*                       @Y30LB15*/
CHNKCOPY STM   @14,@04,12(@13)                                     0414
         STM   @07,@12,48(@13)                                     0414
*   DO I=1 TO J;                    /*                       @Y30LB15*/
         LA    I,1                                                 0415
         B     @DE00415                                            0415
@DL00415 DS    0H                                                  0416
*     CHUNK=INCHUNK;                /*                       @Y30LB15*/
         MVC   CHUNK(32,BLKPTR),INCHUNK(INBLKPTR)                  0416
*     BLKPTR=BLKPTR+32;             /*                       @Y30LB15*/
         LA    @15,32                                              0417
         ALR   BLKPTR,@15                                          0417
*     INBLKPTR=INBLKPTR+32;         /*                       @Y30LB15*/
         ALR   INBLKPTR,@15                                        0418
*   END;                            /*                       @Y30LB15*/
         AH    I,@CH00044                                          0419
@DE00415 CH    I,J                                                 0419
         BNH   @DL00415                                            0419
*   RETURN;                         /*                       @Y30LB15*/
@EL00019 DS    0H                                                  0420
@EF00019 DS    0H                                                  0420
@ER00019 LM    @14,@04,12(@13)                                     0420
         LM    @07,@12,48(@13)                                     0420
         BR    @14                                                 0420
*   END CHNKCOPY;                   /*                       @Y30LB15*/
*                                                                  0422
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - LIBCOMP                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - ACCORDING TO THE SIZE OF THE OLD LIBRARY     @Y30LB15*/
*/*             WHICH WAS LARGER THAN THE NEW LIBRARY, BE    @XD00153*/
*/*             SURE THAT THE DELETED FRAMES TO NOT CONTAIN  @XD00153*/
*/*             CARTRIDGES.  IF THEY DO, PRINT AN ERROR      @XD00153*/
*/*             MESSAGE AND STOP PROCESSING.                 @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0422
*LIBCOMP:                                                          0422
*   PROCEDURE;                      /*                       @Y30LB15*/
LIBCOMP  STM   @14,@12,@SA00020                                    0422
*   IF OLIBSIZ='4'                  /* WAS OLD LIB AN A4?    @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         CLI   OLIBSIZ,C'4'                                        0423
         BNE   @RF00423                                            0423
*     CALL A4COMP;                  /* START COMP AT 1ST BLK @Y30LB15*/
         BAL   @14,A4COMP                                          0424
*   ELSE                            /* NOT A4                @Y30LB15*/
*     IF OLIBSIZ='3'                /* WAS OLD LIB AN A3?    @Y30LB15*/
*       THEN                                                       0425
         B     @RC00423                                            0425
@RF00423 CLI   OLIBSIZ,C'3'                                        0425
         BNE   @RF00425                                            0425
*       DO;                         /* YES                   @Y30LB15*/
*         INBLKPTR=INPTR+264+8+(7*32);/* BEGIN A3 BIT MAP    @Y30LB15*/
         LA    INBLKPTR,496                                        0427
         AL    INBLKPTR,INPTR                                      0427
*         IF INCHUNK^=SUBBLK0(1)    /* CECELL FULL REST EMPT @Y30LB15*/
*           THEN                    /* NO-ERROR              @Y30LB15*/
         CLC   INCHUNK(32,INBLKPTR),SUBBLK0                        0428
         BE    @RF00428                                            0428
*           INVLDCHK='1'B;          /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0429
*         ELSE                      /* ALL CELLS EMPTY       @Y30LB15*/
*           CALL A3COMP;            /* CHECK REST FRAME 3    @Y30LB15*/
         B     @RC00428                                            0430
@RF00428 BAL   @14,A3COMP                                          0430
*       END;                        /*                       @Y30LB15*/
*     ELSE                                                         0432
*       DO;                         /* NOT AN A3             @Y30LB15*/
         B     @RC00425                                            0432
@RF00425 DS    0H                                                  0433
*         INBLKPTR=INPTR+(2*264)+8+(6*32);/* BEGIN A2 BIT MAP      0433
*                                                            @Y30LB15*/
         LA    INBLKPTR,728                                        0433
         AL    INBLKPTR,INPTR                                      0433
*         IF INCHUNK^=SUBBLK0(1)    /* CECELL FULL REST EMPT @Y30LB15*/
*           THEN                    /* NO-ERROR              @Y30LB15*/
         CLC   INCHUNK(32,INBLKPTR),SUBBLK0                        0434
         BE    @RF00434                                            0434
*           INVLDCHK='1'B;          /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0435
*         ELSE                      /* ALL CELLS EMPTY       @Y30LB15*/
*           CALL A2COMP;            /* CHECK REST FRAME 2    @Y30LB15*/
         B     @RC00434                                            0436
@RF00434 BAL   @14,A2COMP                                          0436
*       END;                        /*                       @Y30LB15*/
@RC00434 DS    0H                                                  0438
*   IF INVLDCHK='1'B                /* ALL DELETED CELLS EMP @Y30LB15*/
*     THEN                                                         0438
@RC00425 DS    0H                                                  0438
@RC00423 TM    INVLDCHK,B'01000000'                                0438
         BNO   @RF00438                                            0438
*     DO;                           /* NO                    @Y30LB15*/
*       OUTBUF2(1:46)=B09MSG4;      /* PUT MSG IN BUFFER     @Y30LB15*/
         MVC   OUTBUF2(46,R4),B09MSG4                              0440
*       LIBCHAR=(LIBCNT-1);         /* TRANSLATE LIB#TO CHAR @Y30LB15*/
         LR    @09,LIBCNT                                          0441
         BCTR  @09,0                                               0441
         STC   @09,LIBCHAR                                         0441
*       HCHAR='1111'B;              /*                       @Y30LB15*/
         OI    HCHAR,B'11110000'                                   0442
*       OUTBUF2(46)=LIBCHAR;        /* PUT LIBNUM IN MSG     @Y30LB15*/
         MVC   OUTBUF2+45(1,R4),LIBCHAR                            0443
*       CALL PUTIT1;                /*                       @Y30LB15*/
         BAL   @14,PUTIT1                                          0444
*     END;                          /*                       @Y30LB15*/
*   RETURN;                         /*                       @Y30LB15*/
@EL00020 DS    0H                                                  0446
@EF00020 DS    0H                                                  0446
@ER00020 LM    @14,@12,@SA00020                                    0446
         BR    @14                                                 0446
*   END LIBCOMP;                    /*                       @Y30LB15*/
         B     @EL00020                                            0447
*                                                                  0448
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - A4COMP                                 @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - COMPARE CHUNKS OF THE OLD LIBRARY WHICH WAS  @Y30LB15*/
*/*             AN A4 WITH THE LIBRARY EMPTY PATTERN FOR A   @XD00153*/
*/*             NEW LIBRARY FOR THE 4TH FRAME PORTION.       @XD00153*/
*/*             ALL AVAILABLE CELLS SHOULD BE EMPTY.         @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0448
*A4COMP:                                                           0448
*   PROCEDURE;                      /*                       @Y30LB15*/
A4COMP   STM   @14,@12,@SA00021                                    0448
*   INBLKPTR=INPTR+264+8;           /* PT PAST PREFIX BLK0   @Y30LB15*/
         LA    INBLKPTR,272                                        0449
         AL    INBLKPTR,INPTR                                      0449
*   DO I=1 TO 7;                    /* COMP OLD TO EMPTY MAP @Y30LB15*/
         LA    I,1                                                 0450
@DL00450 DS    0H                                                  0451
*     IF INCHUNK^=SUBBLK0(I)        /* ALL CELLS EMPTY?      @Y30LB15*/
*       THEN                                                       0451
         LR    @09,I                                               0451
         SLA   @09,5                                               0451
         LA    @05,SUBBLK0-32(@09)                                 0451
         CLC   INCHUNK(32,INBLKPTR),0(@05)                         0451
         BE    @RF00451                                            0451
*       DO;                         /* NO-ERROR              @Y30LB15*/
*         INVLDCHK='1'B;            /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0453
*         I=7;                      /* GET OUT OF LOOP       @Y30LB15*/
         LA    I,7                                                 0454
*       END;                        /*                       @Y30LB15*/
*     ELSE                          /* YES-CELLS EMPTY       @Y30LB15*/
*       INBLKPTR=INBLKPTR+32;       /* PT NEXT CHUNK         @Y30LB15*/
         B     @RC00451                                            0456
@RF00451 AH    INBLKPTR,@CH00309                                   0456
*   END;                            /*                       @Y30LB15*/
@RC00451 AH    I,@CH00044                                          0457
         CH    I,@CH00134                                          0457
         BNH   @DL00450                                            0457
*   IF INVLDCHK='0'B                /* FRAME 4 MAP EMPTY?    @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         TM    INVLDCHK,B'01000000'                                0458
         BNZ   @RF00458                                            0458
*     IF LIBSIZE(LIBCNT)^='3'       /* NEW LIB SMALLER A3?   @Y30LB15*/
*       THEN                        /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0459
         MH    @09,@CH00033                                        0459
         ALR   @09,R4                                              0459
         CLI   LIBSIZE-12(@09),C'3'                                0459
         BE    @RF00459                                            0459
*       IF INCHUNK^=SUBBLK0(8)      /* 1ST CHUNK A3 EMPTY?   @Y30LB15*/
*         THEN                      /* NO-ERROR              @Y30LB15*/
         CLC   INCHUNK(32,INBLKPTR),SUBBLK0+224                    0460
         BE    @RF00460                                            0460
*         INVLDCHK='1'B;            /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0461
*       ELSE                        /* CELLS EMPTY           @Y30LB15*/
*         CALL A3COMP;              /* CHECK REST FRAME 3    @Y30LB15*/
         B     @RC00460                                            0462
@RF00460 BAL   @14,A3COMP                                          0462
*     ELSE                                                         0463
*       ;                           /* A3 LIB STOP COMPARE   @Y30LB15*/
@RF00459 DS    0H                                                  0464
*   ELSE                                                           0464
*     ;                             /* ERROR OCCURRED        @Y30LB15*/
@RF00458 DS    0H                                                  0465
*   END A4COMP;                     /*                       @Y30LB15*/
@EL00021 DS    0H                                                  0465
@EF00021 DS    0H                                                  0465
@ER00021 LM    @14,@12,@SA00021                                    0465
         BR    @14                                                 0465
*                                                                  0466
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - A3COMP                                 @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - COMPARE CHUNKS OF THE OLD LIBRARY WHICH WAS  @Y30LB15*/
*/*             AN A3 OR A4 WITH THE LIBRARY EMPTY PATTERN   @XD00153*/
*/*             FOR A NEW LIBRARY FOR THE 3RD FRAME PORTION. @XD00153*/
*/*             ALL AVAILABLE CELLS SHOULD BE EMPTY.         @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0466
*A3COMP:                                                           0466
*   PROCEDURE;                      /*                       @Y30LB15*/
A3COMP   STM   @14,@12,@SA00022                                    0466
*   INBLKPTR=INBLKPTR+32+8;         /* PT TO NXT BLK         @Y30LB15*/
         AH    INBLKPTR,@CH00319                                   0467
*   DO I=1 TO 6;                    /* COMP FRAM3 TO OLD MAP @Y30LB15*/
         LA    I,1                                                 0468
@DL00468 DS    0H                                                  0469
*     IF INCHUNK^=SUBBLK1(I)        /* ALL CELLS EMPTY?      @Y30LB15*/
*       THEN                                                       0469
         LR    @09,I                                               0469
         SLA   @09,5                                               0469
         LA    @05,SUBBLK1-32(@09)                                 0469
         CLC   INCHUNK(32,INBLKPTR),0(@05)                         0469
         BE    @RF00469                                            0469
*       DO;                         /* NO-ERROR              @Y30LB15*/
*         INVLDCHK='1'B;            /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0471
*         I=6;                      /* GET OUT OF LOOP       @Y30LB15*/
         LA    I,6                                                 0472
*       END;                        /*                       @Y30LB15*/
*     ELSE                          /* CELLS EMPTY-CONTINUE  @Y30LB15*/
*       INBLKPTR=INBLKPTR+32;       /* POINT TO NEXT CHUNK   @Y30LB15*/
         B     @RC00469                                            0474
@RF00469 AH    INBLKPTR,@CH00309                                   0474
*   END;                            /* END DO LOOP           @Y30LB15*/
@RC00469 AH    I,@CH00044                                          0475
         CH    I,@CH00227                                          0475
         BNH   @DL00468                                            0475
*   IF INVLDCHK='0'B                /* FRAME 3 EMPTY?        @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         TM    INVLDCHK,B'01000000'                                0476
         BNZ   @RF00476                                            0476
*     IF LIBSIZE(LIBCNT)^='2'       /* NEWLIB SMALLER A2?    @Y30LB15*/
*       THEN                        /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0477
         MH    @09,@CH00033                                        0477
         ALR   @09,R4                                              0477
         CLI   LIBSIZE-12(@09),C'2'                                0477
         BE    @RF00477                                            0477
*       IF INCHUNK^=SUBBLK1(7)      /* 1ST CHUNK A2 EMPTY?   @Y30LB15*/
*         THEN                      /* NO-ERROR              @Y30LB15*/
         CLC   INCHUNK(32,INBLKPTR),SUBBLK1+192                    0478
         BE    @RF00478                                            0478
*         INVLDCHK='1'B;            /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0479
*       ELSE                        /* CELLS EMPTY           @Y30LB15*/
*         CALL A2COMP;              /* CHECK REST FRAME 2    @Y30LB15*/
         B     @RC00478                                            0480
@RF00478 BAL   @14,A2COMP                                          0480
*     ELSE                                                         0481
*       ;                           /* A2 LIB STOP COMPARE   @Y30LB15*/
@RF00477 DS    0H                                                  0482
*   ELSE                                                           0482
*     ;                             /* ERROR OCCURRED        @Y30LB15*/
@RF00476 DS    0H                                                  0483
*   END A3COMP;                     /*                       @Y30LB15*/
@EL00022 DS    0H                                                  0483
@EF00022 DS    0H                                                  0483
@ER00022 LM    @14,@12,@SA00022                                    0483
         BR    @14                                                 0483
*                                                                  0484
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - A2COMP                                 @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - COMPARE CHUNKS OF THE OLD LIBRARY WHICH WAS  @Y30LB15*/
*/*             AN A2 OR LARGER WITH THE LIBRARY EMPTY       @XD00153*/
*/*             PATTERN FOR A NEW LIBRARY FOR THE 2ND FRAME  @XD00153*/
*/*             PORTION.  ALL AVAILABLE CELLS SHOULD BE      @XD00153*/
*/*             EMPTY.                                       @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0484
*A2COMP:                                                           0484
*   PROCEDURE;                      /*                       @Y30LB15*/
A2COMP   STM   @14,@12,12(@13)                                     0484
*   INBLKPTR=INBLKPTR+32;           /* PT 2ND CHUNK A2 FRAME @Y30LB15*/
         AH    INBLKPTR,@CH00309                                   0485
*   IF INCHUNK^=SUBBLK1(8)          /* ALL CELLS EMPTY?      @Y30LB15*/
*     THEN                          /* NO-ERROR              @Y30LB15*/
         CLC   INCHUNK(32,INBLKPTR),SUBBLK1+224                    0486
         BE    @RF00486                                            0486
*     INVLDCHK='1'B;                /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0487
*   ELSE                                                           0488
*     DO;                           /* CELLS EMPTY-CONTINUE  @Y30LB15*/
         B     @RC00486                                            0488
@RF00486 DS    0H                                                  0489
*       INBLKPTR=INBLKPTR+32+8;     /* PT TO NEXT BLOCK      @Y30LB15*/
         AH    INBLKPTR,@CH00319                                   0489
*       DO I=1 TO 5;                /*                       @Y30LB15*/
         LA    I,1                                                 0490
@DL00490 DS    0H                                                  0491
*         IF INCHUNK^=SUBBLK2(I)    /* FRAME2 CELLS EMPTY?   @Y30LB15*/
*           THEN                                                   0491
         LR    @05,I                                               0491
         SLA   @05,5                                               0491
         LA    @01,SUBBLK2-32(@05)                                 0491
         CLC   INCHUNK(32,INBLKPTR),0(@01)                         0491
         BE    @RF00491                                            0491
*           DO;                     /* NO-ERROR              @Y30LB15*/
*             INVLDCHK='1'B;        /* SET ERROR SWITCH      @Y30LB15*/
         OI    INVLDCHK,B'01000000'                                0493
*             I=5;                  /* GET OUT OF LOOP       @Y30LB15*/
         LA    I,5                                                 0494
*           END;                    /*                       @Y30LB15*/
*         ELSE                      /* CELLS EMPTY-CHECK MOR @Y30LB15*/
*           INBLKPTR=INBLKPTR+32;   /* PT TO NEXT CHUNK      @Y30LB15*/
         B     @RC00491                                            0496
@RF00491 AH    INBLKPTR,@CH00309                                   0496
*       END;                        /*                       @Y30LB15*/
@RC00491 AH    I,@CH00044                                          0497
         CH    I,@CH00121                                          0497
         BNH   @DL00490                                            0497
*     END;                          /* END ELSE DO           @Y30LB15*/
*   END A2COMP;                     /*                       @Y30LB15*/
@EL00023 DS    0H                                                  0499
@EF00023 DS    0H                                                  0499
@ER00023 LM    @14,@12,12(@13)                                     0499
         BR    @14                                                 0499
*                                                                  0500
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - CUBECHK                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - THE CELL BIT MAP HAS BEEN COPIED TO THE NEW  @Y30LB15*/
*/*             CELL MAP.  THIS ROUTINE READS EACH CUBE      @XD00153*/
*/*             POINTER AND GOES TO THE CORRESPONDING CUBE.  @XD00153*/
*/*             IF THE 32 CELLS OF THE CUBE ARE FULL, THE    @XD00153*/
*/*             CUBE BIT IN THE HEADER BLOCK IS SET TO 0.    @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0500
*CUBECHK:                                                          0500
*   PROCEDURE;                      /*                       @Y30LB15*/
CUBECHK  STM   @14,@12,12(@13)                                     0500
*   CUBEAPTR=OUTPTR+16;             /* BEGIN CUBE BIT MAP    @Y30LB15*/
         LA    CUBEAPTR,16                                         0501
         ALR   CUBEAPTR,OUTPTR                                     0501
*   BLKPTR=CUBEAPTR+22;             /* BEGIN CUBE PTR LIST   @Y30LB15*/
         LA    BLKPTR,22                                           0502
         ALR   BLKPTR,CUBEAPTR                                     0502
*   OUTPTR=OUTPTR+272;              /* BEGIN CELL BIT MAP    @Y30LB15*/
         AH    OUTPTR,@CH00393                                     0503
*DO01:                                                             0504
*   DO WHILE CBPTR^='FF'X;          /* STOP WHEN NO MOREPTRS @Y30LB15*/
DO01     B     @DE00504                                            0504
@DL00504 DS    0H                                                  0505
*DO02:                                                             0505
*     DO I=1 TO 8;                  /* ONE BYTE OF CUBE BITS @Y30LB15*/
DO02     LA    I,1                                                 0505
@DL00505 DS    0H                                                  0506
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FIND CUBE POINTED TO BY CUBE POINTER IN HEADER BLOCK.   @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0506
*       IF CBBLK='00'B              /* DATA BLOCK ZERO?      @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         TM    CBBLK(BLKPTR),B'11000000'                           0506
         BNZ   @RF00506                                            0506
*         OFSTPTR=OUTPTR+16;        /* POINT PAST PREFIX     @Y30LB15*/
         LA    OFSTPTR,16                                          0507
         ALR   OFSTPTR,OUTPTR                                      0507
*       ELSE                                                       0508
*         IF CBBLK='01'B            /* DATA BLOCK ONE?       @Y30LB15*/
*           THEN                    /* YES                   @Y30LB15*/
         B     @RC00506                                            0508
@RF00506 TM    CBBLK(BLKPTR),B'01000000'                           0508
         BNO   @RF00508                                            0508
         TM    CBBLK(BLKPTR),B'10000000'                           0508
         BNZ   @RF00508                                            0508
*           OFSTPTR=OUTPTR+272+16;  /* PT PAST PREFIX NXTBLK @Y30LB15*/
         LA    OFSTPTR,288                                         0509
         ALR   OFSTPTR,OUTPTR                                      0509
*         ELSE                                                     0510
*           IF CBBLK='10'B          /* DATA BLOCK TWO?       @Y30LB15*/
*             THEN                  /* YES                   @Y30LB15*/
         B     @RC00508                                            0510
@RF00508 TM    CBBLK(BLKPTR),B'10000000'                           0510
         BNO   @RF00510                                            0510
         TM    CBBLK(BLKPTR),B'01000000'                           0510
         BNZ   @RF00510                                            0510
*             OFSTPTR=OUTPTR+(2*272)+16;/* PT PAST PREFIX BLK2     0511
*                                                            @Y30LB15*/
         LA    OFSTPTR,560                                         0511
         ALR   OFSTPTR,OUTPTR                                      0511
*           ELSE                    /* NO-MUST BE BLOCK 3    @Y30LB15*/
*             OFSTPTR=OUTPTR+(3*272)+16;/* PT PAST PREFIX BLK3     0512
*                                                            @Y30LB15*/
         B     @RC00510                                            0512
@RF00510 LA    OFSTPTR,832                                         0512
         ALR   OFSTPTR,OUTPTR                                      0512
*       OFFSET=CBPTR;               /* PTR TO SHIFT AREA     @Y30LB15*/
@RC00510 DS    0H                                                  0513
@RC00508 DS    0H                                                  0513
@RC00506 MVC   OFFSET(1),CBPTR(BLKPTR)                             0513
*       SLL(OFFSET,2);              /* SHIFT PT ELIM BLKBITS @Y30LB15*/
         SLR   @09,@09                                             0514
         IC    @09,OFFSET                                          0514
         SLL   @09,2                                               0514
         STC   @09,OFFSET                                          0514
*       OFSTPTR=OFSTPTR+OFFSET;     /* POINT TO CUBE         @Y30LB15*/
         MVC   @ZT00003+3(1),OFFSET                                0515
         AL    OFSTPTR,@ZT00003                                    0515
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  DETERMINE IF CUBE IS FULL                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0516
*       IF CUBE='00000000'X         /* ARE ALL CELLS FULL?   @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         L     @09,CUBE(,OFSTPTR)                                  0516
         LTR   @09,@09                                             0516
         BNZ   @RF00516                                            0516
*         CUBEBYTE=CUBEBYTE&CUBEOR1(I);/* ZERO APPRP CUBE BIT      0517
*                                                            @Y30LB15*/
         SLR   @09,@09                                             0517
         IC    @09,CUBEBYTE(,CUBEAPTR)                             0517
         LA    @06,CUBEOR1-1(I)                                    0517
         MVC   @ZT00003+3(1),0(@06)                                0517
         N     @09,@ZT00003                                        0517
         STC   @09,CUBEBYTE(,CUBEAPTR)                             0517
*       ELSE                                                       0518
*         ;                         /*                       @Y30LB15*/
@RF00516 DS    0H                                                  0519
*       BLKPTR=BLKPTR+1;            /* POINT TO NEXT CUBEPTR @Y30LB15*/
         AH    BLKPTR,@CH00044                                     0519
*     END DO02;                     /*                       @Y30LB15*/
         AH    I,@CH00044                                          0520
         CH    I,@CH00042                                          0520
         BNH   @DL00505                                            0520
*     CUBEAPTR=CUBEAPTR+1;          /* PT NXT BYTE CUBEBITMP @Y30LB15*/
         AH    CUBEAPTR,@CH00044                                   0521
*   END DO01;                       /*                       @Y30LB15*/
@DE00504 CLI   CBPTR(BLKPTR),X'FF'                                 0522
         BNE   @DL00504                                            0522
*   RETURN;                         /*                       @Y30LB15*/
@EL00024 DS    0H                                                  0523
@EF00024 DS    0H                                                  0523
@ER00024 LM    @14,@12,12(@13)                                     0523
         BR    @14                                                 0523
*   END CUBECHK;                    /*                       @Y30LB15*/
*                                                                  0525
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - USEREXIT                               @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - CALL USER PROGRAM WHICH WILL SUPPLY THE CUBE @Y30LB15*/
*/*             POINTER LIST THAT IS THE LOADING PATTERN     @XD00153*/
*/*             FOR THE LIBRARY.                             @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0525
*USEREXIT:                                                         0525
*   PROCEDURE;                      /*                       @Y30LB15*/
USEREXIT STM   @14,@12,@SA00025                                    0525
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* SET LENGTH OF PARMFIELD DEPENDING ON THE SIZE OF THE LIB @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0526
*   IF LIBSIZE(LIBCNT)='1'          /* A1 LIBRARY?           @Y30LB15*/
*     THEN                          /* YES                   @Y30LB15*/
         LR    @09,LIBCNT                                          0526
         MH    @09,@CH00033                                        0526
         ALR   @09,R4                                              0526
         CLI   LIBSIZE-12(@09),C'1'                                0526
         BNE   @RF00526                                            0526
*     PRMLEN=LENGTH(A1LIST)+2;      /*                       @Y30LB15*/
         MVC   PRMLEN(2),@CH00113                                  0527
*   ELSE                            /* NO                    @Y30LB15*/
*     IF LIBSIZE(LIBCNT)='2'        /* A2 LIBRARY?           @Y30LB15*/
*       THEN                        /* YES                   @Y30LB15*/
         B     @RC00526                                            0528
@RF00526 LR    @09,LIBCNT                                          0528
         MH    @09,@CH00033                                        0528
         ALR   @09,R4                                              0528
         CLI   LIBSIZE-12(@09),C'2'                                0528
         BNE   @RF00528                                            0528
*       PRMLEN=LENGTH(A2LIST)+2;    /*                       @Y30LB15*/
         MVC   PRMLEN(2),@CH00808                                  0529
*     ELSE                          /* NO                    @Y30LB15*/
*       IF LIBSIZE(LIBCNT)='3'      /* A3 LIBRARY?           @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         B     @RC00528                                            0530
@RF00528 LR    @09,LIBCNT                                          0530
         MH    @09,@CH00033                                        0530
         ALR   @09,R4                                              0530
         CLI   LIBSIZE-12(@09),C'3'                                0530
         BNE   @RF00530                                            0530
*         PRMLEN=LENGTH(A3LIST)+2;  /*                       @Y30LB15*/
         MVC   PRMLEN(2),@CH00809                                  0531
*       ELSE                        /* NO-A4 LIB             @Y30LB15*/
*         PRMLEN=LENGTH(A4LIST)+2;  /*                       @Y30LB15*/
         B     @RC00530                                            0532
@RF00530 MVC   PRMLEN(2),@CH00426                                  0532
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/* SET UP SAVE AREA AND CALL USER EXIT ROUTINE THEN         @Y30LB15*/
*/* RESTORE REGS AND CALL ROUTINES TO CHECK LOAD LIST        @Y30LB15*/
*/* PROVIDED BY THE USER.                                    @Y30LB15*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0533
*   R1=ADDR(USERLIST);              /*                       @Y30LB15*/
@RC00530 DS    0H                                                  0533
@RC00528 DS    0H                                                  0533
@RC00526 LA    R1,USERLIST                                         0533
*   RESPECIFY                                                      0534
*     R2 RSTD;                      /* RESTRICT R2 DURNGCALL @Y30LB15*/
*   R2=ADDR(MAPEXIT(LIBCNT));       /*                       @Y30LB15*/
         LR    @09,LIBCNT                                          0535
         MH    @09,@CH00033                                        0535
         LA    R2,MAPEXIT-12(@09,R4)                               0535
*   GEN(LINK EPLOC=(R2),MF=(E,(1)));/*                       @Y30LB15*/
         LINK EPLOC=(R2),MF=(E,(1))
*   RESPECIFY                                                      0537
*     R2 UNRSTD;                    /* UNRESTRICT REG 2      @Y30LB15*/
*   IF R15=0                        /* WAS ROUTINE SUCCESFUL @Y30LB15*/
*     THEN                          /*                       @Y30LB15*/
         LTR   R15,R15                                             0538
         BNZ   @RF00538                                            0538
*     CALL CHKLIST;                 /*                       @Y30LB15*/
         BAL   @14,CHKLIST                                         0539
*   ELSE                                                           0540
*     DO;                           /*                       @Y30LB15*/
         B     @RC00538                                            0540
@RF00538 DS    0H                                                  0541
*       OUTBUF2(1:77)=B09MSG3;      /* WARN MSG IN BUFFER    @Y30LB15*/
         MVC   OUTBUF2(77,R4),B09MSG3                              0541
*       LIBCHAR=(LIBCNT-1);         /* TRANSLATE NUM TO CHAR @Y30LB15*/
         LR    @09,LIBCNT                                          0542
         BCTR  @09,0                                               0542
         STC   @09,LIBCHAR                                         0542
*       HCHAR='1111'B;              /*                       @Y30LB15*/
         OI    HCHAR,B'11110000'                                   0543
*       OUTBUF2(51)=LIBCHAR;        /* PUT LIBNUM IN MSGBUF  @Y30LB15*/
         MVC   OUTBUF2+50(1,R4),LIBCHAR                            0544
*       CALL PUTIT3;                /* WRITE WARNING MSG     @Y30LB15*/
         BAL   @14,PUTIT3                                          0545
*     END;                          /*                       @Y30LB15*/
*   END USEREXIT;                   /*                       @Y30LB15*/
@EL00025 DS    0H                                                  0547
@EF00025 DS    0H                                                  0547
@ER00025 LM    @14,@12,@SA00025                                    0547
         BR    @14                                                 0547
*                                                                  0548
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - CHKLIST                                @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - CHECK THE NUMBER OF CUBE POINTERS THAT       @XD00153*/
*/*             SHOULD BE PRESENT FOR VALIDITY DEPENDING ON  @XD00153*/
*/*             ON THE SIZE OF THE LIBRARY.                  @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0548
*CHKLIST:                                                          0548
*   PROCEDURE;                      /*                       @Y30LB15*/
CHKLIST  STM   @14,@12,@SA00026                                    0548
*   INVLDPTR='0'B;                  /* INIT SWT GOOD LIST    @Y30LB15*/
         NI    INVLDPTR,B'11011111'                                0549
*   IF LIBSIZE(LIBCNT)='1'          /* A1 LIBRARY?           @Y30LB15*/
*     THEN                                                         0550
         LR    @09,LIBCNT                                          0550
         MH    @09,@CH00033                                        0550
         ALR   @09,R4                                              0550
         CLI   LIBSIZE-12(@09),C'1'                                0550
         BNE   @RF00550                                            0550
*     DO;                           /* YES                   @Y30LB15*/
*       J=28;                       /* SHOULD BE 28 PTRS     @Y30LB15*/
         MVC   J(2),@CH00331                                       0552
*       LWLIM='A8'X;                /* NOT LESS THAN VAL     @Y30LB15*/
         LA    LWLIM,168                                           0553
*       CALL CHKPTR;                /*                       @Y30LB15*/
         BAL   @14,CHKPTR                                          0554
*       IF INVLDPTR='0'B            /* PTR OK?               @Y30LB15*/
*         THEN                      /* YES                   @Y30LB15*/
         TM    INVLDPTR,B'00100000'                                0555
         BNZ   @RF00555                                            0555
*         OBLOCK(23:50)=A1LIST;     /* PUT USRLST IN OUTBUF  @Y30LB15*/
         MVC   OBLOCK+22(28,OUTPTR),A1LIST                         0556
*       ELSE                                                       0557
*         ;                         /*                       @Y30LB15*/
@RF00555 DS    0H                                                  0558
*     END;                          /*                       @Y30LB15*/
*   ELSE                            /* NOT A1                @Y30LB15*/
*     IF LIBSIZE(LIBCNT)='2'        /* A2 LIB?               @Y30LB15*/
*       THEN                                                       0559
         B     @RC00550                                            0559
@RF00550 LR    @09,LIBCNT                                          0559
         MH    @09,@CH00033                                        0559
         ALR   @09,R4                                              0559
         CLI   LIBSIZE-12(@09),C'2'                                0559
         BNE   @RF00559                                            0559
*       DO;                         /* YES                   @Y30LB15*/
*         J=77;                     /* SHOULD BE 77 PTRS     @Y30LB15*/
         MVC   J(2),@CH00433                                       0561
*         LWLIM='70'X;              /* NOT LESS THAN VAL     @Y30LB15*/
         LA    LWLIM,112                                           0562
*         CALL CHKPTR;              /*                       @Y30LB15*/
         BAL   @14,CHKPTR                                          0563
*         IF INVLDPTR='0'B          /* PTR OK?               @Y30LB15*/
*           THEN                    /* YES                   @Y30LB15*/
         TM    INVLDPTR,B'00100000'                                0564
         BNZ   @RF00564                                            0564
*           OBLOCK(23:99)=A2LIST;   /* PUT USRLST IN OUTBUF  @Y30LB15*/
         MVC   OBLOCK+22(77,OUTPTR),A2LIST                         0565
*         ELSE                                                     0566
*           ;                       /*                       @Y30LB15*/
@RF00564 DS    0H                                                  0567
*       END;                        /*                       @Y30LB15*/
*     ELSE                          /* NOT A2                @Y30LB15*/
*       IF LIBSIZE(LIBCNT)='3'      /* A3 LIB?               @Y30LB15*/
*         THEN                                                     0568
         B     @RC00559                                            0568
@RF00559 LR    @09,LIBCNT                                          0568
         MH    @09,@CH00033                                        0568
         ALR   @09,R4                                              0568
         CLI   LIBSIZE-12(@09),C'3'                                0568
         BNE   @RF00568                                            0568
*         DO;                       /* YES                   @Y30LB15*/
*           J=126;                  /* SHOULD BE 126 PTRS    @Y30LB15*/
         MVC   J(2),@CH00431                                       0570
*           LWLIM='38'X;            /* NOT LESS THAN VAL     @Y30LB15*/
         LA    LWLIM,56                                            0571
*           CALL CHKPTR;            /*                       @Y30LB15*/
         BAL   @14,CHKPTR                                          0572
*           IF INVLDPTR='0'B        /* PTR OK?               @Y30LB15*/
*             THEN                  /* YES                   @Y30LB15*/
         TM    INVLDPTR,B'00100000'                                0573
         BNZ   @RF00573                                            0573
*             OBLOCK(23:148)=A3LIST;/* PUT USRLST IN OUTBUF  @Y30LB15*/
         MVC   OBLOCK+22(126,OUTPTR),A3LIST                        0574
*           ELSE                                                   0575
*             ;                     /*                       @Y30LB15*/
@RF00573 DS    0H                                                  0576
*         END;                      /*                       @Y30LB15*/
*       ELSE                                                       0577
*         DO;                       /* A4 LIB                @Y30LB15*/
         B     @RC00568                                            0577
@RF00568 DS    0H                                                  0578
*           J=175;                  /* SHOULD BE 175 PTRS    @Y30LB15*/
         MVC   J(2),@CH00429                                       0578
*           LWLIM='00'X;            /* VAL MUST BE > 0       @Y30LB15*/
         SLR   LWLIM,LWLIM                                         0579
*           CALL CHKPTR;            /*                       @Y30LB15*/
         BAL   @14,CHKPTR                                          0580
*           IF INVLDPTR='0'B        /* PTRS OK?              @Y30LB15*/
*             THEN                  /* YES                   @Y30LB15*/
         TM    INVLDPTR,B'00100000'                                0581
         BNZ   @RF00581                                            0581
*             OBLOCK(23:197)=A4LIST;/* PUT USRLST IN OUTBUF  @Y30LB15*/
         MVC   OBLOCK+22(175,OUTPTR),A4LIST                        0582
*           ELSE                                                   0583
*             ;                     /*                       @Y30LB15*/
@RF00581 DS    0H                                                  0584
*         END;                      /*                       @Y30LB15*/
*   IF INVLDPTR='1'B                /* WAS ERROR FOUND?      @Y30LB15*/
*     THEN                                                         0585
@RC00568 DS    0H                                                  0585
@RC00559 DS    0H                                                  0585
@RC00550 TM    INVLDPTR,B'00100000'                                0585
         BNO   @RF00585                                            0585
*     DO;                           /* YES                   @Y30LB15*/
*       OUTBUF2(1:77)=B09MSG3;      /* WARN MSG IN BUFFER    @Y30LB15*/
         MVC   OUTBUF2(77,R4),B09MSG3                              0587
*       LIBCHAR=(LIBCNT-1);         /* TRANSLATE NUM TO CHAR @Y30LB15*/
         LR    @09,LIBCNT                                          0588
         BCTR  @09,0                                               0588
         STC   @09,LIBCHAR                                         0588
*       HCHAR='1111'B;              /*                       @Y30LB15*/
         OI    HCHAR,B'11110000'                                   0589
*       OUTBUF2(51)=LIBCHAR;        /* PUT LIBNUM IN MSGBUF  @Y30LB15*/
         MVC   OUTBUF2+50(1,R4),LIBCHAR                            0590
*       CALL PUTIT3;                /* WRITE WARNING MSG     @Y30LB15*/
         BAL   @14,PUTIT3                                          0591
*     END;                          /*                       @Y30LB15*/
*   ELSE                                                           0593
*     ;                             /*                       @Y30LB15*/
@RF00585 DS    0H                                                  0594
*   END CHKLIST;                    /*                       @Y30LB15*/
@EL00026 DS    0H                                                  0594
@EF00026 DS    0H                                                  0594
@ER00026 LM    @14,@12,@SA00026                                    0594
         BR    @14                                                 0594
*                                                                  0595
*/********************************************************** @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  PROCEDURE NAME - CHKPTR                                 @Y30LB15*/
*/*                                                          @Y30LB15*/
*/*  FUNCTION - A POINTER MUST BE INSIDE THE AREA FOR A      @Y30LB15*/
*/*             SPECIFIC LIBRARY SIZE.  OF EVERY 8 WORDS,    @XD00153*/
*/*             THE 8TH WORD IS NOT A VALID CUBE AND THERE   @XD00153*/
*/*             SHOULD NOT BE A POINTER TO IT.               @XD00153*/
*/*                                                          @Y30LB15*/
*/********************************************************** @Y30LB15*/
*                                                                  0595
*CHKPTR:                                                           0595
*   PROCEDURE;                      /*                       @Y30LB15*/
CHKPTR   STM   @14,@12,12(@13)                                     0595
*   USERPTR=ADDR(A4LIST);           /* BEGIN USER LOAD LIST  @Y30LB15*/
         LA    USERPTR,A4LIST                                      0596
*   DO I=1 TO J;                    /*                       @Y30LB15*/
         LA    I,1                                                 0597
         B     @DE00597                                            0597
@DL00597 DS    0H                                                  0598
*     IF USRCBPTR>=LWLIM&USRCBPTR<='C6'X&USRCB^='0111'B&USRCB^='1111'B
*       THEN                        /* PTR OK-CONTINUE CHK   @Y30LB15*/
         MVC   @ZT00003+3(1),USRCBPTR(USERPTR)                     0598
         C     LWLIM,@ZT00003                                      0598
         BH    @RF00598                                            0598
         CLI   USRCBPTR(USERPTR),X'C6'                             0598
         BH    @RF00598                                            0598
         TM    USRCB(USERPTR),B'00000111'                          0598
         BNO   @GL00004                                            0598
         TM    USRCB(USERPTR),B'00001000'                          0598
         BZ    @RF00598                                            0598
@GL00004 TM    USRCB(USERPTR),B'00001111'                          0598
         BO    @RF00598                                            0598
*       USERPTR=USERPTR+1;          /* PT NEXT CUBE POINTER  @Y30LB15*/
         AH    USERPTR,@CH00044                                    0599
*     ELSE                                                         0600
*       DO;                         /* INVALID PTR           @Y30LB15*/
         B     @RC00598                                            0600
@RF00598 DS    0H                                                  0601
*         INVLDPTR='1'B;            /* SET INVALID SWT       @Y30LB15*/
         OI    INVLDPTR,B'00100000'                                0601
*         I=J;                      /* GET OUT OF LOOP       @Y30LB15*/
         LH    I,J                                                 0602
*       END;                        /*                       @Y30LB15*/
*   END;                            /*                       @Y30LB15*/
@RC00598 AH    I,@CH00044                                          0604
@DE00597 CH    I,J                                                 0604
         BNH   @DL00597                                            0604
*   END CHKPTR;                     /*                       @Y30LB15*/
@EL00027 DS    0H                                                  0605
@EF00027 DS    0H                                                  0605
@ER00027 LM    @14,@12,12(@13)                                     0605
         BR    @14                                                 0605
*                                                                  0606
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - PUTIT1                                  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - CALL ICGDSMSG, MESSAGE PRINT SUBROUTINE, TO   @Y30LB12*/
*/*            PUT TERMINATING MESSAGE FOR WHICH TEXT IS NOT @Y30LB12*/
*/*            IN ICGDSMSG BUT ALREADY BUILT IN 'OUTBUF2'    @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0606
*PUTIT1:                                                           0606
*   PROCEDURE;                      /*                       @Y30LB12*/
PUTIT1   STM   @14,@12,@SA00028                                    0606
*   STOPSCAN='1'B;                  /*                       @Y30LB12*/
         OI    STOPSCAN,B'10000000'                                0607
*   PRNTBUF2='1'B;                  /*                       @Y30LB12*/
         OI    PRNTBUF2(R4),B'00000001'                            0608
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @05,1                                               0609
         AH    @05,TERMINAT(,R4)                                   0609
         STH   @05,TERMINAT(,R4)                                   0609
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   PRNTBUF2='0'B;                  /*                       @Y30LB12*/
         NI    PRNTBUF2(R4),B'11111110'                            0611
*   END PUTIT1;                     /*                       @Y30LB12*/
@EL00028 DS    0H                                                  0612
@EF00028 DS    0H                                                  0612
@ER00028 LM    @14,@12,@SA00028                                    0612
         BR    @14                                                 0612
*                                                                  0613
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - PUTIT3                                  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - CALL ICGDSMSG, MESSAGE PRINT SUBROUTINE, TO   @Y30LB12*/
*/*            PUT WARNING MESSAGE FOR WHICH MESSAGE TEXT    @Y30LB12*/
*/*            IS NOT IN ICGDSMSG, BUT WHICH IS BUILT AND    @Y30LB12*/
*/*            PASSED IN 'OUTBUF2'.                          @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0613
*PUTIT3:                                                           0613
*   PROCEDURE;                      /*                       @Y30LB12*/
PUTIT3   STM   @14,@12,@SA00029                                    0613
*   PRNTBUF2='1'B;                  /*                       @Y30LB12*/
         OI    PRNTBUF2(R4),B'00000001'                            0614
*   WARNING=WARNING+1;              /*                       @Y30LB12*/
         LA    @05,1                                               0615
         AH    @05,WARNING(,R4)                                    0615
         STH   @05,WARNING(,R4)                                    0615
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   PRNTBUF2='0'B;                  /*                       @Y30LB12*/
         NI    PRNTBUF2(R4),B'11111110'                            0617
*   END PUTIT3;                     /*                       @Y30LB12*/
@EL00029 DS    0H                                                  0618
@EF00029 DS    0H                                                  0618
@ER00029 LM    @14,@12,@SA00029                                    0618
         BR    @14                                                 0618
*   GENERATE;                                                      0619
*                                                         /*@Y30LB15*/
PATCHB09 DC    32C'PATCHB09'
*   END ICGDSB09                    /*                       @Y30LB15*/
*                                                                  0620
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA5)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA2)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA4)                                       */
*                                                                  0620
*       ;                                                          0620
         B     @EL00001                                            0620
@DATA    DS    0H
@CH00044 DC    H'1'
@CH00052 DC    H'2'
@CH00050 DC    H'3'
@CH00070 DC    H'4'
@CH00121 DC    H'5'
@CH00227 DC    H'6'
@CH00134 DC    H'7'
@CH00042 DC    H'8'
@CH00033 DC    H'12'
@CH00163 DC    H'16'
@CH00331 DC    H'28'
@CH00113 DC    H'30'
@CH00309 DC    H'32'
@CH00319 DC    H'40'
@CH00236 DC    H'48'
@CH00433 DC    H'77'
@CH00808 DC    H'79'
@CH00431 DC    H'126'
@CH00809 DC    H'128'
@CH00429 DC    H'175'
@CH00426 DC    H'177'
@CH00805 DC    H'232'
@CH00804 DC    H'240'
@CH00403 DC    H'264'
@CH00393 DC    H'272'
@CH00795 DC    H'464'
@CH00794 DC    H'480'
@CH00800 DC    H'696'
@CH00798 DC    H'720'
@CH00653 DC    H'1320'
@CH00652 DC    H'1360'
@CH00638 DC    H'5440'
@CH00641 DC    H'6528'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00028 DS    15F
@SA00002 DS    14F
@SA00003 DS    14F
@SA00006 DS    13F
@SA00004 DS    13F
@SA00005 DS    13F
@SA00015 DS    15F
@SA00014 DS    14F
@SA00016 DS    14F
@SA00008 DS    13F
@SA00009 DS    13F
@SA00010 DS    13F
@SA00011 DS    13F
@SA00025 DS    15F
@SA00012 DS    13F
@SA00017 DS    15F
@SA00020 DS    15F
@SA00018 DS    15F
@SA00021 DS    15F
@SA00022 DS    15F
@SA00026 DS    15F
@SA00029 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSB09 CSECT
         DS    0F
@CF00811 DC    F'5084'
@CF00810 DC    F'13532'
@DATD    DSECT
         DS    0D
SAVOPTR  DS    A
INPTR    DS    A
J        DS    H
TABLID   DS    FL1
LIBCHAR  DS    BL1
         ORG   LIBCHAR
HCHAR    DS    BL1
         ORG   LIBCHAR+1
BITSWTS  DS    BL1
         ORG   BITSWTS
STOPSCAN DS    BL1
INVLDCHK EQU   BITSWTS+0
INVLDPTR EQU   BITSWTS+0
         ORG   BITSWTS+1
OLIBSIZ  DS    CL1
OFFSET   DS    BL1
CECELL   DS    CL1
USERLIST DS    CL177
         ORG   USERLIST
PRMLEN   DS    FL2
A4LIST   DS    CL175
         ORG   A4LIST
A3LIST   DS    CL126
         ORG   A3LIST
A2LIST   DS    CL77
         ORG   A2LIST
A1LIST   DS    CL28
         ORG   USERLIST+177
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSB09 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
CELEMPTY DC    B'10000000'
CUBEOR8  DC    X'7FBFDFEFF7FBFDFE'
         ORG   CUBEOR8
CUBEOR1  DS    8AL1
         ORG   CUBEOR8+8
ZEROCHNK DC    X'00'
         DC    XL31'0'
BLOCK0   DS    CL256
         ORG   BLOCK0
SUBBLK0  DC    X'7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFDF5FCFCFEFEFCFCFCFCFCFCFCF4FDFDFFFFFDFDFDC
               FD00000000'
         DC    X'FFFFFFFFFFFF5F5F0A0AAAAA020A020A020A020A5F5FFFFF575F57C
               5F00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         ORG   BLOCK0+256
BLOCK1   DS    CL256
         ORG   BLOCK1
SUBBLK1  DC    X'FFFFFFFFFFFFFDF5FCFCFEFEFCFCFCFCFCFCFCF4FDFDFFFFFDFDFDC
               FD00000000'
         DC    X'FFFFFFFFFFFF5F5F0A0AAAAA020A020A020A020A5F5FFFFF575F57C
               5F00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFDF5FCFCFEFEFCFCFCFCFCFCFCF4FDFDFFFFFDFDFDC
               FD00000000'
         ORG   BLOCK1+256
BLOCK2   DS    CL256
         ORG   BLOCK2
SUBBLK2  DC    X'FFFFFFFFFFFF5F5F0A0AAAAA020A020A020A020A5F5FFFFF575F57C
               5F00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FF00000000'
         DC    X'FFFFFFFFFFFFFDF5FDFDFFFFFDFDFDFDFDFDFDF5FDFDFFFFFDFDFDC
               FD00000000'
         DC    X'FFFFFFFFFFFF5F5F5F5FFFFF575F575F575F575F5F5FFFFF575F57C
               5F00000000'
         ORG   BLOCK2+256
BLOCK3   DC    X'D0D0D0D0D0D0D0D0F0F0F0F0A0A0A0A0A0A0A0A0F0F0F0F0F0F0F0C
               F000000000'
A1HDR    DS    CL256
         ORG   A1HDR
SUBA1    DC    X'FFFFFFF0000000000000000000000000000000000000BCB4C4ACBBC
               B3C3ABBDB5'
         DC    X'C5ADBAB2C2AABEB6C6AEB9B1C1A9B8B0C0A8FFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         ORG   A1HDR+256
A2HDR    DS    CL256
         ORG   A2HDR
SUBA2    DC    X'FFFFFFFFFFFFFFFFFFF80000000000000000000000009C9B9D9A9EC
               99A4A3A5A2'
         DC    X'A6A1949395929691ACABADAAAEA98C8B8D8A8E89B4B3B5B2B6B184C
               8385828681'
         DC    X'BCBBBDBABEB97C7B7D7A7E79C4C3C5C2C6C174737572767198A090C
               A888B080B8'
         DC    X'78C070FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         ORG   A2HDR+256
A3HDR    DS    CL256
         ORG   A3HDR
SUBA3    DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000000000008483858286C
               81808C8B8D'
         DC    X'8A8E89887C7B7D7A7E797894939592969190747375727671709C9BC
               9D9A9E9998'
         DC    X'6C6B6D6A6E6968A4A3A5A2A6A1A064636562666160ACABADAAAEA9C
               A85C5B5D5A'
         DC    X'5E5958B4B3B5B2B6B1B054535552565150BCBBBDBABEB9B84C4B4DC
               4A4E4948C4'
         DC    X'C3C5C2C6C1C0444345424641403C3B3D3A3E3938FFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         ORG   A3HDR+256
A4HDR    DS    CL256
         ORG   A4HDR
SUBA4    DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE6C6B6D6A6EC
               6968646365'
         DC    X'62666160747375727671705C5B5D5A5E59587C7B7D7A7E79785453C
               5552565150'
         DC    X'848385828681804C4B4D4A4E49488C8B8D8A8E8988444345424641C
               4094939592'
         DC    X'9691903C3B3D3A3E39389C9B9D9A9E999834333532363130A4A3A5C
               A2A6A1A02C'
         DC    X'2B2D2A2E2928ACABADAAAEA9A824232522262120B4B3B5B2B6B1B0C
               1C1B1D1A1E'
         DC    X'1918BCBBBDBABEB9B814131512161110C4C3C5C2C6C1C00C0B0D0AC
               0E09080403'
         DC    X'0502060100FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
               FFFFFFFFFF'
         ORG   A4HDR+256
B09MSG1  DC    CL49' ICG410I NON-MATCH ON INPUT TABLE ID FOR CELL MAP'
B09MSG2  DC    CL45' ICG414I INVALID PARAMETER PASSED TO ICGDSB09'
B09MSG3  DC    CL77' ICG413I INVALID LOADMAP SUPPLIED BY USER FOR MSF  C
               . STANDARD LOADMAP IS USED'
B09MSG4  DC    CL46' ICG412I FULL CELLS IN DELETED FRAME FOR MSF  '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RECCNT   EQU   @06
LIBCNT   EQU   @08
LWLIM    EQU   @05
CUBEAPTR EQU   @08
OFSTPTR  EQU   @06
INBLKPTR EQU   @06
BLKPTR   EQU   @05
OUTPTR   EQU   @03
USERPTR  EQU   @03
I        EQU   @07
R4       EQU   @04
R1       EQU   @01
R2       EQU   @02
R15      EQU   @15
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
COMTAB   EQU   0
READER   EQU   COMTAB+256
READFLAG EQU   READER+96
PCHBF    EQU   READER+99
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
PRINTER  EQU   COMTAB+464
OUTBUF2  EQU   PRINTER+225
MESSAGES EQU   COMTAB+810
WARNING  EQU   MESSAGES+4
TERMINAT EQU   MESSAGES+6
SPECLMSG EQU   MESSAGES+18
PRNTBUF2 EQU   SPECLMSG
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
BUILDPTR EQU   GENIO+20
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGTODS  EQU   RSG+7
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
LIBSPEC  EQU   LIBBITS
LIBSIZE  EQU   LIB+1
LIBMAP   EQU   LIB+3
MAPEXIT  EQU   LIB+4
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
NEWCREAT EQU   @NM00017
UPDCREAT EQU   @NM00017
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
BUILDTAB EQU   0
COMB06   EQU   BUILDTAB
B06DCBPT EQU   COMB06
B06BUFPT EQU   COMB06+4
B06TBLID EQU   COMB06+8
B06ADDR  EQU   COMB06+9
COMB05   EQU   BUILDTAB+12
B05DCBPT EQU   COMB05
B05BUFPT EQU   COMB05+4
B05TBLID EQU   COMB05+8
B05ADDR  EQU   COMB05+9
BUILDGEN EQU   BUILDTAB+24
UT2VCHR  EQU   BUILDGEN+8
UT2TABID EQU   UT2VCHR
OUTADDR  EQU   UT2VCHR+1
UT2VCYL  EQU   OUTADDR
UT2VHEAD EQU   OUTADDR+1
UT2VREC  EQU   OUTADDR+2
UT1VCHR  EQU   BUILDGEN+12
UT1TABID EQU   UT1VCHR
INADDR   EQU   UT1VCHR+1
UT1STUFF EQU   BUILDTAB+40
UT1DCB   EQU   UT1STUFF
UT1FLAG  EQU   UT1STUFF+96
UT2STUFF EQU   BUILDTAB+664
UT2DCB   EQU   UT2STUFF
UT2FLAG  EQU   UT2STUFF+96
UT3STUFF EQU   BUILDTAB+1288
UT3FLAG  EQU   UT3STUFF+96
UT1BUFER EQU   BUILDTAB+5084
UT2BUFER EQU   BUILDTAB+13532
USRCBPTR EQU   0
USRCB    EQU   USRCBPTR
OUTBLOCK EQU   0
OBLKPRFX EQU   OUTBLOCK+8
OTABLID  EQU   OBLKPRFX
OCYL     EQU   OBLKPRFX+1
OHEAD    EQU   OBLKPRFX+2
OREC     EQU   OBLKPRFX+3
OFILL    EQU   OBLKPRFX+4
OBLOCK   EQU   OUTBLOCK+16
INBLOCK  EQU   0
IBLKPRFX EQU   INBLOCK
ITABLID  EQU   IBLKPRFX
IBLOCK   EQU   INBLOCK+8
A1PTR    EQU   IBLOCK+22
A2PTR    EQU   IBLOCK+50
A3PTR    EQU   IBLOCK+99
A4PTR    EQU   IBLOCK+148
CHUNK    EQU   0
INCHUNK  EQU   0
CBPTR    EQU   0
CBBLK    EQU   CBPTR
CUBEBYTE EQU   0
CUBE     EQU   0
SCANBUF  EQU   0
SCANDATA EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00031 EQU   CBPTR
@NM00030 EQU   IBLOCK+100
@NM00029 EQU   IBLOCK+51
@NM00028 EQU   IBLOCK+24
@NM00027 EQU   IBLOCK
@NM00026 EQU   IBLKPRFX+1
@NM00025 EQU   OUTBLOCK
@NM00024 EQU   USRCBPTR
TEMPEND  EQU   BUILDTAB+22396
LTRTRANI EQU   BUILDTAB+22316
LTRTRANO EQU   BUILDTAB+22236
NVERIFY  EQU   BUILDTAB+3500
CVERIFY  EQU   BUILDTAB+1916
@NM00023 EQU   UT3STUFF+624
UT3DDN   EQU   UT3STUFF+616
UT3CCWS  EQU   UT3STUFF+320
UT3IOB   EQU   UT3STUFF+280
UT3ECB   EQU   UT3STUFF+276
UT3JFCB  EQU   UT3STUFF+100
@NM00022 EQU   UT3FLAG
UT3VWERR EQU   UT3FLAG
UT3VOERR EQU   UT3FLAG
UT3VUPDT EQU   UT3FLAG
UT3DCB   EQU   UT3STUFF
UT2DDN   EQU   UT2STUFF+616
UT2CCWS  EQU   UT2STUFF+320
UT2IOB   EQU   UT2STUFF+280
UT2ECB   EQU   UT2STUFF+276
UT2JFCB  EQU   UT2STUFF+100
@NM00021 EQU   UT2FLAG
UT2VCERR EQU   UT2FLAG
UT2VWERR EQU   UT2FLAG
UT2VOERR EQU   UT2FLAG
UT2VUPDT EQU   UT2FLAG
UT1DDN   EQU   UT1STUFF+616
UT1CCWS  EQU   UT1STUFF+320
UT1IOB   EQU   UT1STUFF+280
UT1ECB   EQU   UT1STUFF+276
UT1JFCB  EQU   UT1STUFF+100
@NM00020 EQU   UT1FLAG
UT1VWERR EQU   UT1FLAG
UT1VOERR EQU   UT1FLAG
UT1VUPDT EQU   UT1FLAG
UT1VREC  EQU   INADDR+2
UT1VHEAD EQU   INADDR+1
UT1VCYL  EQU   INADDR
ADDRBUF2 EQU   BUILDGEN+4
ADDRBUF1 EQU   BUILDGEN
B05REC   EQU   B05ADDR+2
B05HEAD  EQU   B05ADDR+1
B05CYL   EQU   B05ADDR
B06REC   EQU   B06ADDR+2
B06HEAD  EQU   B06ADDR+1
B06CYL   EQU   B06ADDR
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
VPAGES   EQU   CREATE+1
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
PABBERG2 EQU   PABFLAGS
@NM00011 EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABEXIST EQU   PABFLAGS
LIBDSMID EQU   LIB+2
@NM00009 EQU   LIBBITS
TODS2    EQU   RSGTODS+1
TODS1    EQU   RSGTODS
RSGSLICE EQU   RSG+3
RSGUDEL  EQU   RSG+2
RSGLDEL  EQU   RSG+1
@NM00008 EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
PRNTCARD EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
MSGNO    EQU   MESSAGES+2
RETCODE  EQU   MESSAGES
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SCANLEN  EQU   READER+204
SVEODAD  EQU   READER+200
SVSYNAD2 EQU   READER+196
SAVENCOL EQU   READER+192
SAVESCOL EQU   READER+188
INBUF    EQU   READER+100
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
LASTPARM EQU   READFLAG
ENDSCAN  EQU   READFLAG
PARMBIT  EQU   READFLAG
KEYBIT   EQU   READFLAG
READTERM EQU   READFLAG
READDCB  EQU   READER
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00150 EQU   @EL00004
@RC00148 EQU   @EL00004
@RC00146 EQU   @EL00004
@RC00284 EQU   @EL00013
@RC00282 EQU   @EL00013
@RC00280 EQU   @EL00013
@RC00278 EQU   @EL00013
@RF00313 EQU   @EL00014
@RC00336 EQU   @EL00016
@RC00370 EQU   @EL00017
@RC00362 EQU   @EL00017
@RC00385 EQU   @EL00017
@RC00428 EQU   @RC00425
@RF00438 EQU   @EL00020
@RC00458 EQU   @EL00021
@RC00476 EQU   @EL00022
@RC00486 EQU   @EL00023
@RC00538 EQU   @EL00025
@RC00366 EQU   @RC00362
@RC00376 EQU   @RC00370
@RC00459 EQU   @RC00458
@RC00477 EQU   @RC00476
@RC00460 EQU   @RC00459
@RC00478 EQU   @RC00477
@ENDDATA EQU   *
         END   ICGDSB09,(C'PLS2009',0603,76337)
