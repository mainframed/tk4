         TITLE 'ICGDSB07 DSM TABLE CREATE BUILD RSG TABLE              *
                        '
ICGDSB07 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSB07  76.336'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0023
*/********************************************************** @Y30LB14*/
*/* INITIALIZATION                                           @Y30LB14*/
*/* THIS ROUTINE SETS UP THE STARTING VIRTUAL DASD ADDRESS   @Y30LB12*/
*/* THE FIRST TRACK TO BE WRITTEN TO DASD AND INITIALIZES    @Y30LB12*/
*/* THE POINTER TO THE DCB FOR SYSUT2 AND THE POINTER TO THE @Y30LB12*/
*/* THE FIRST BYTE IN THE OUTPUT (SYSUT2) BUFFER.            @Y30LB12*/
*/********************************************************** @Y30LB14*/
*                                                                  0023
*   OUTCYL(1)=UT2VCYL;              /* STARTING CYLINDER NUMBER    0023
*                                                            @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0023
         LH    @05,@CH00457                                        0023
         ALR   @05,@10                                             0023
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0023
*   OUTHEAD(1)=UT2VHEAD;            /* STARTING HEAD NUMBER  @Y30LB14*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0024
*   OUTREC(1)=UT2VREC;              /* STARTING RECORD NUMBER      0025
*                                                            @Y30LB14*/
         MVC   OUTREC(1,@05),UT2VREC(@10)                          0025
*   B06DCBPT=ADDR(UT2DCB);          /*                       @Y30LB14*/
         LA    @05,UT2DCB(,@10)                                    0026
         ST    @05,B06DCBPT(,@10)                                  0026
*   B06BUFPT=ADDR(UT2BUFER);        /* ADDRESS OF WRITE      @Y30LB14
*                                      BUFFER                @Y30LB14*/
         LR    @05,@10                                             0027
         AL    @05,@CF00457                                        0027
         ST    @05,B06BUFPT(,@10)                                  0027
*   N=1;                            /* BLOCK POINTER IN OUTBUFFER  0028
*                                                            @Y30LB14*/
         LA    @10,1                                               0028
         LR    N,@10                                               0028
*                                                                  0029
*/********************************************************** @Y30LB14*/
*/* THIS IS THE MAINLINE FOR B07.  A BLOCK IMAGE IS SET TO   @Y30LB14*/
*/* ZERO AND PLACED IN THE FIRST 8 BLOCKS OF INBUF WHICH IS  @Y30LB14*/
*/* USED TO BUILD THE 11 BLOCK IMAGE THAT MAKES UP THE RSG.  @Y30LB14*/
*/* THE FIRST BYTE OF BLOCKS 10 AND 11 IS SET TO X'04'. VAR- @Y30LB14*/
*/* IOUS BYTES ARE SET IN THE BLOCK IMAGE AND CALLS ARE MADE @Y30LB14*/
*/* TO ROUTINES TO SET OTHER BYTES OF THE 9TH BLOCK IMAGE.   @Y30LB14*/
*/* WHEN ALL 11 BLOCKS ARE SET, THEN THEY ARE TRANSFERED TO  @Y30LB14*/
*/* THE OUTPUT BUFFER.  WHEN 32 BLOCKS HAVE BEEN TRANSFERED  @Y30LB14*/
*/* THE TRACK IS WRITTEN OUT.  WHEN THE 30 SDG GROUPS OF 11  @XD00153*/
*/* BLOCKS HAVE BEEN PRODUCED, THE LAST 22 BLOCKS OF THE     @Y30LB14*/
*/* TRACK IMAGE ARE ZEROED AND THE FINAL TRACK IS WRITTEN.   @Y30LB14*/
*/********************************************************** @Y30LB14*/
*                                                                  0029
*   ZEROS=''B;                      /* ZERO BLOCK IMAGE      @Y30LB14*/
*                                                                  0029
         XC    ZEROS(256),ZEROS                                    0029
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* ZERO THE FIRST EIGHT BLOCKS FOR EACH SDG.             @Y30LB12*/
*   /* THESE BLOCKS DESCRIBE THE CURRENT USE OF THE          @Y30LB12*/
*   /* REAL PAGES ON THE LOGICAL DEVICE. SINCE ALL           @Y30LB12*/
*   /* VIRTUAL VOLUMES ARE DEMOUNTED AND DESTAGED,           @Y30LB12*/
*   /* THESE RECORDS SHOULD CONTAIN ONLY BINARY              @Y30LB12*/
*   /* ZEROS. NOTE THAT IF THE PAGE IS TO CONTAIN            @Y30LB12*/
*   /* THE MSC TABLES, A BIT SO INDICATING WILL BE           @Y30LB12*/
*   /* IN THE PROCEDURE 'ZERO4BIT' IN THIS MODULE.           @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0030
*   DO I=1 TO 8;                    /* PUT ZEROED BLOCK IN 1ST 8 BLKS
*                                                            @Y30LB14*/
         LR    I,@10                                               0030
@DL00030 DS    0H                                                  0031
*     INBLOCK(I)=BLOCK;             /*                       @Y30LB14*/
         LR    @10,I                                               0031
         MH    @10,@CH00459                                        0031
         L     @05,BUILDPTR(,R4)                                   0031
         ALR   @05,@10                                             0031
         AL    @05,@CF00473                                        0031
         MVC   INBLOCK(256,@05),BLOCK                              0031
*   END;                            /*                       @Y30LB14*/
*                                                                  0032
         AH    I,@CH00042                                          0032
         CH    I,@CH00040                                          0032
         BNH   @DL00030                                            0032
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* THE TENTH AND ELEVENTH BLOCKS ARE THE                 @Y30LB12*/
*   /* VOLUME BLOCK AND THE LRU'ED PAGES BLOCK.              @Y30LB12*/
*   /* THESE BLOCKS ARE ALL ZEROS EXCEPT FOR A X'04'         @Y30LB12*/
*   /* IN THE FIRST BYTE OF EACH BLOCK.                      @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0033
*   BLK(1)='04'X;                   /* X'04' IN 1ST BYTE OF BLOCK  0033
*                                                            @Y30LB14*/
         MVI   BLK,X'04'                                           0033
*   INBLOCK(10)=BLOCK;              /* PLACE IN 10TH POSITION      0034
*                                                            @Y30LB14*/
         LH    @10,@CH00458                                        0034
         AL    @10,BUILDPTR(,R4)                                   0034
         MVC   INBLOCK+2376(256,@10),BLOCK                         0034
*   INBLOCK(11)=BLOCK;              /* PLACE IN 11TH POSITION      0035
*                                                            @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0035
         MVC   INBLOCK+2640(256,@10),BLOCK                         0035
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* PICK UP THE VARIABLE INFORMATION FOR THE NINTH        @Y30LB12*/
*   /* BLOCK (THE PAGE AVAILABILITY BLOCK) FOR EACH          @Y30LB12*/
*   /* OF 30 SDGS.                                           @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0036
*   DO I=1 TO 30;                   /*                       @Y30LB14*/
         LA    I,1                                                 0036
@DL00036 DS    0H                                                  0037
*     ZEROS=''B;                    /* ZERO BLOCK IMAGE      @Y30LB14*/
         XC    ZEROS(256),ZEROS                                    0037
*     BYTES(9)='33'X;               /* CONSTANT IN 9TH BYTE  @Y30LB14*/
*                                                                  0038
         MVI   BYTES+8,X'33'                                       0038
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* PICK UP THE LOWER AND UPPER DELTAS FOR THE          @Y30LB12*/
*     /* LRU ALGORITHM. THESE VALUES ARE DEVELOPED           @Y30LB12*/
*     /* FROM INPUT DATA (ACTPAGE) SUPPLIED ON THE           @XD00153*/
*     /* SDGXX CONTROL STATEMENT.                            @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0039
*     BYTES(10)=RSGUDEL(I);         /* UPPER DELTA           @Y30LB14*/
         LR    @10,I                                               0039
         MH    @10,@CH00112                                        0039
         SLR   @05,@05                                             0039
         IC    @05,RSGUDEL-9(@10,R4)                               0039
         STC   @05,BYTES+9                                         0039
*     BYTES(14)=RSGLDEL(I);         /* LOWER DELTA           @Y30LB14*/
*                                                                  0040
         SLR   @05,@05                                             0040
         IC    @05,RSGLDEL-9(@10,R4)                               0040
         STC   @05,BYTES+13                                        0040
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* OBTAIN THE ONE OR TWO (OR NONE IF THE SDG           @Y30LB12*/
*     /* IS UNUSED) STAGING ADAPTERS TO WHICH THIS           @Y30LB12*/
*     /* SDG ATTACHES.                                       @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0041
*     CALL BYTE1718;                /* SET UP BYTES 17,18 IN BLOCK 9
*                                                            @Y30LB14*/
*                                                                  0041
         BAL   @14,BYTE1718                                        0041
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* OBTAIN THE LRUGROUP INFORMATION THAT WAS            @Y30LB12*/
*     /* SUPPLIED IN THE SDGXX CONTROL STATEMENT.            @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0042
*     BLOCK(21:24)=RSGSLICE(I);     /*                       @Y30LB14*/
*                                                                  0042
         LR    @10,I                                               0042
         MH    @10,@CH00112                                        0042
         ALR   @10,R4                                              0042
         MVC   BLOCK+20(4),RSGSLICE-9(@10)                         0042
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* OBTAIN THE DEVICE INFORMATION FOR EACH OF           @Y30LB12*/
*     /* EIGHT POSSIBLE DEVICES THAT CAN BE PRESENT          @Y30LB12*/
*     /* IN THIS SDG AND MOVE THE DEVICE SECTION             @XD00153*/
*     /* OF THE PAGE AVAILABILITY BLOCK.                     @XD00153*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0043
*     CALL PABBYTES;                /* PAGE AVAILABILITY INFO      0043
*                                                            @Y30LB14*/
*                                                                  0043
         BAL   @14,PABBYTES                                        0043
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* ZERO THE TOTAL COUNT OF PAGES IN THIS SDG           @Y30LB12*/
*     /* AND CALL PABBYTES TO SET THE APPROPRIATE            @XD00153*/
*     /* BITS IN THE FREE PAGE BIT MAP FOR EACH              @Y30LB12*/
*     /* DEFINED LOGICAL STAGING DEVICE.                     @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0044
*     TOTALCNT=0;                   /*                       @Y30LB14*/
         SLR   @10,@10                                             0044
         LR    TOTALCNT,@10                                        0044
*     BOUNDCNT=0;                   /*                       @XD00168*/
         LR    BOUNDCNT,@10                                        0045
*     CALL FREEPAGE;                /* SET FREE PAGE BITS    @Y30LB14*/
*                                                                  0046
         BAL   @14,FREEPAGE                                        0046
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* CALCULATE THE LOWER AND UPPER THRESHOLDS FOR        @Y30LB12*/
*     /* ALL PAGES IN THIS SDG BY MULTIPLYING THE            @Y30LB12*/
*     /* DELTA VALUES (WHICH REPRESENT ONE DEVICE)           @Y30LB12*/
*     /* BY THE NUMBER OF DEVICES IN THE SDG.                @Y30LB12*/
*     /* MOVE IN CALCULATED TOTAL PAGES FOR ALL              @Y30LB12*/
*     /* PAGES IN THIS SDG.                                  @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0047
*     BLOCK(11:12)=VOVCNT*RSGUDEL(I);/*                      @Y30LB14*/
         LR    @10,I                                               0047
         MH    @10,@CH00112                                        0047
         SLR   @01,@01                                             0047
         IC    @01,RSGUDEL-9(@10,R4)                               0047
         MR    @00,VOVCNT                                          0047
         ST    @01,@TF00001                                        0047
         MVC   BLOCK+10(2),@TF00001+2                              0047
*     BLOCK(15:16)=VOVCNT*RSGLDEL(I);/*                      @Y30LB14*/
         SLR   @01,@01                                             0048
         IC    @01,RSGLDEL-9(@10,R4)                               0048
         MR    @00,VOVCNT                                          0048
         ST    @01,@TF00001                                        0048
         MVC   BLOCK+14(2),@TF00001+2                              0048
*     BLOCK(1:2)=TOTALCNT;          /*                       @Y30LB14*/
         ST    TOTALCNT,@TF00001                                   0049
         MVC   BLOCK(2),@TF00001+2                                 0049
*     BLOCK(7:8)=BOUNDCNT;          /*                       @XD00168*/
*                                                                  0050
         ST    BOUNDCNT,@TF00001                                   0050
         MVC   BLOCK+6(2),@TF00001+2                               0050
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* MOVE PAB BLOCK TO BUFFER.                           @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0051
*     INBLOCK(9)=BLOCK;             /* PUT 9TH BLOCK IN RSGTBL     0051
*                                                            @Y30LB14*/
*                                                                  0051
         LH    @10,@CH00458                                        0051
         AL    @10,BUILDPTR(,R4)                                   0051
         MVC   INBLOCK+2112(256,@10),BLOCK                         0051
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* FOR SDG0 ONLY, MOVE IN THE UPDATED REAL             @Y30LB12*/
*     /* PAGE USAGE BLOCKS TO INDICATE THE PAGES THAT        @Y30LB12*/
*     /* CONTAIN THE MSC TABLES.                             @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0052
*     IF I=1 THEN                   /*                       @Y30LB14*/
         CH    I,@CH00042                                          0052
         BNE   @RF00052                                            0052
*       DO;                         /*                       @Y30LB14*/
*         INBLOCK(1)=BLOCK1;        /*                       @Y30LB14*/
         MVC   INBLOCK(256,@10),BLOCK1                             0054
*         INBLOCK(3)=BLOCK1;        /*                       @Y30LB14*/
         MVC   INBLOCK+528(256,@10),BLOCK1                         0055
*         INBLOCK(5)=BLOCK1;        /*                       @XD00163*/
         MVC   INBLOCK+1056(256,@10),BLOCK1                        0056
*         INBLOCK(7)=BLOCK1;        /*                       @XD00163*/
         MVC   INBLOCK+1584(256,@10),BLOCK1                        0057
*       END;                        /*                       @Y30LB14*/
*     CALL MOVEBLOK;                /* MOVE THE 11 BLOCKS    @Y30LB14*/
*                                                                  0059
@RF00052 BAL   @14,MOVEBLOK                                        0059
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB12*/
*     /* RESET TO ZEROS THE IMAGES OF THE REAL PAGES         @Y30LB12*/
*     /* AFTER UPDATING FOR SDG0.                            @Y30LB12*/
*     /* *********************************************       @Y30LB12*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0060
*     IF I=1 THEN                   /*                       @Y30LB14*/
         CH    I,@CH00042                                          0060
         BNE   @RF00060                                            0060
*       DO;                         /*                       @Y30LB14*/
*         ZEROS1=''B;               /*                       @Y30LB14*/
         XC    ZEROS1(256),ZEROS1                                  0062
*         INBLOCK(1)=BLOCK1;        /*                       @Y30LB14*/
         LH    @10,@CH00458                                        0063
         AL    @10,BUILDPTR(,R4)                                   0063
         MVC   INBLOCK(256,@10),BLOCK1                             0063
*         INBLOCK(3)=BLOCK1;        /*                       @Y30LB14*/
         MVC   INBLOCK+528(256,@10),BLOCK1                         0064
*         INBLOCK(5)=BLOCK1;        /*                       @XD00163*/
         MVC   INBLOCK+1056(256,@10),BLOCK1                        0065
*         INBLOCK(7)=BLOCK1;        /*                       @XD00163*/
         MVC   INBLOCK+1584(256,@10),BLOCK1                        0066
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14*/
*                                                                  0068
@RF00060 AH    I,@CH00042                                          0068
         CH    I,@CH00111                                          0068
         BNH   @DL00036                                            0068
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* ZERO THE FINAL 22 BLOCKS ON THE LAST TRACK OF         @Y30LB12*/
*   /* SDG TABLE AND WRITE OUT THE LAST TRACK.               @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0069
*   ZEROS=''B;                      /*                       @Y30LB14*/
         XC    ZEROS(256),ZEROS                                    0069
*   DO N=11 TO 32;                  /*                       @Y30LB14*/
         LA    N,11                                                0070
@DL00070 DS    0H                                                  0071
*     OBLOCK(N)=BLOCK;              /*                       @Y30LB14*/
         LR    @10,N                                               0071
         MH    @10,@CH00467                                        0071
         L     @05,BUILDPTR(,R4)                                   0071
         ALR   @05,@10                                             0071
         AL    @05,@CF00474                                        0071
         MVC   OBLOCK(256,@05),BLOCK                               0071
*   END;                            /*                       @Y30LB14*/
         AH    N,@CH00042                                          0072
         CH    N,@CH00309                                          0072
         BNH   @DL00070                                            0072
*   CALL WRITETRK;                  /* PUT PREFIX INFO IN 32 BLOCKS
*                                                            @Y30LB14*/
         BAL   @14,WRITETRK                                        0073
*   RETURN;                         /* RETURN TO BUILD       @Y30LB14*/
@EL00001 L     @13,4(,@13)                                         0074
@EF00001 L     @00,@SIZDATD                                        0074
         LR    @01,@11                                             0074
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0074
         BR    @14                                                 0074
*                                                                  0075
*/********************************************************** @Y30LB14*/
*/* PROCEDURE NAME - BYTE1718                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE SETS UP BYTES 17 AND 18 OF THE   @XD00153*/
*/*            9TH BLOCK.  BIT 3 OF EACH BYTE IS SET ON IF   @XD00153*/
*/*            RSGABOX1 IS ON.  BYTES 17 AND 18 CONTAIN THE  @XD00153*/
*/*            STAGING ADAPTER(S) TO WHICH THIS SDG ATTACHES @XD00153*/
*/*            IF A STAGING ADAPTER IS SPECIFIED, THE VALID  @XD00153*/
*/*            BIT (HIGH-ORDER BIT IN THE BYTE IS SET TO 1.  @XD00153*/
*/*            IF THE SDG 'ATTACHES' TO LOGICAL A-BOX 1, THE @XD00153*/
*/*            4TH BIT (...X....) IS ALSO SET TO 1.          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0075
*BYTE1718:                                                         0075
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0075
BYTE1718 STM   @14,@12,12(@13)                                     0075
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* TODS1 IS INITIALIZED TO 'FF'X. IF A STAGING           @Y30LB12*/
*   /* ADAPTER IS SPECIFIED FOR THIS SDG, THE SA             @Y30LB12*/
*   /* NUMBER IS PLACED IN BITS 4-7 (....XXXX), THE          @Y30LB12*/
*   /* LOGICAL A-BOX IS INDICATED IN BIT 3 (...X....)        @Y30LB12*/
*   /* AND THE VALID BIT (X.......) IS SET ON.               @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0076
*   IF TODS1(I)^='FF'X THEN                                        0076
         LR    @10,I                                               0076
         MH    @10,@CH00112                                        0076
         ST    @10,@TF00001                                        0076
         ALR   @10,R4                                              0076
         CLI   TODS1-9(@10),X'FF'                                  0076
         BE    @RF00076                                            0076
*     IF RSGABOX1(I)='1'B THEN                                     0077
         LR    @10,R4                                              0077
         AL    @10,@TF00001                                        0077
         TM    RSGABOX1-9(@10),B'00100000'                         0077
         BNO   @RF00077                                            0077
*       BYTES(17)=144+TODS1(I);     /*                       @Y30LB14*/
         LA    @10,144                                             0078
         LR    @05,R4                                              0078
         AL    @05,@TF00001                                        0078
         MVC   @ZT00003+3(1),TODS1-9(@05)                          0078
         AL    @10,@ZT00003                                        0078
         STC   @10,BYTES+16                                        0078
*     ELSE                                                         0079
*       BYTES(17)=128+TODS1(I);     /*                       @Y30LB14*/
         B     @RC00077                                            0079
@RF00077 LR    @10,I                                               0079
         MH    @10,@CH00112                                        0079
         LA    @05,128                                             0079
         ALR   @10,R4                                              0079
         MVC   @ZT00003+3(1),TODS1-9(@10)                          0079
         AL    @05,@ZT00003                                        0079
         STC   @05,BYTES+16                                        0079
*   ELSE                                                           0080
*     BYTES(17)='00'X;              /*                       @Y30LB14*/
*                                                                  0080
         B     @RC00076                                            0080
@RF00076 MVI   BYTES+16,X'00'                                      0080
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* THE SAME LOGIC USED FOR THE FIRST SA FOR A            @Y30LB12*/
*   /* SDG IS USED ALSO FOR THE SECOND SA TO WHICH           @Y30LB12*/
*   /* SDG ATTACHES.                                         @Y30LB12*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0081
*   IF TODS2(I)^='FF'X THEN                                        0081
@RC00076 LR    @10,I                                               0081
         MH    @10,@CH00112                                        0081
         ST    @10,@TF00001                                        0081
         ALR   @10,R4                                              0081
         CLI   TODS2-9(@10),X'FF'                                  0081
         BE    @RF00081                                            0081
*     IF RSGABOX1(I)='1'B THEN                                     0082
         LR    @10,R4                                              0082
         AL    @10,@TF00001                                        0082
         TM    RSGABOX1-9(@10),B'00100000'                         0082
         BNO   @RF00082                                            0082
*       BYTES(18)=144+TODS2(I);     /*                       @Y30LB14*/
         LA    @10,144                                             0083
         LR    @05,R4                                              0083
         AL    @05,@TF00001                                        0083
         MVC   @ZT00003+3(1),TODS2-9(@05)                          0083
         AL    @10,@ZT00003                                        0083
         STC   @10,BYTES+17                                        0083
*     ELSE                                                         0084
*       BYTES(18)=128+TODS2(I);     /*                       @Y30LB14*/
         B     @RC00082                                            0084
@RF00082 LR    @10,I                                               0084
         MH    @10,@CH00112                                        0084
         LA    @05,128                                             0084
         ALR   @10,R4                                              0084
         MVC   @ZT00003+3(1),TODS2-9(@10)                          0084
         AL    @05,@ZT00003                                        0084
         STC   @05,BYTES+17                                        0084
*   ELSE                                                           0085
*     BYTES(18)='00'X;              /*                       @Y30LB14*/
         B     @RC00081                                            0085
@RF00081 MVI   BYTES+17,X'00'                                      0085
*   RETURN;                         /*                       @Y30LB14*/
@EL00002 DS    0H                                                  0086
@EF00002 DS    0H                                                  0086
@ER00002 LM    @14,@12,12(@13)                                     0086
         BR    @14                                                 0086
*   END BYTE1718;                   /*                       @Y30LB14*/
         B     @EL00002                                            0087
*                                                                  0088
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - PABBYTES                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - IF THE SPINDLE EXISTS, THEN THE VARIED        @XD00153*/
*/*            ON VIRTUAL BIT IS SET ON.  THE PABFLAGS ARE   @XD00153*/
*/*            THEN PUT IN THE 9TH BLOCK, BYTES 193,197,     @XD00153*/
*/*            201,- - - 221.  PABREAL IS PLACED IN BYTES    @XD00153*/
*/*            194,198,202,- - - 222.  PABAADDD IS PLACED    @XD00153*/
*/*            IN BYTES 196,200,204,- - - 224.               @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0088
*PABBYTES:                                                         0088
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0088
PABBYTES STM   @14,@12,12(@13)                                     0088
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB12*/
*   /* FOR EACH DEVICE THAT HAS BEEN SPECIFIED IN A          @Y30LB12*/
*   /* DASD CONTROL STATEMENT WITH AN SSID, SET ON           @Y30LB12*/
*   /* THE VARIED ON VIRTUAL BIT (PABVOVIR) AND              @Y30LB12*/
*   /* MOVE THE DATA ACCUMULATED IN THE STRUCTURE            @Y30LB12*/
*   /* 'PABTABLE' TO THE APPROPRIATE ENTRY (LOGICAL          @Y30LB12*/
*   /* UNIT ADDRESS) FOR THE SDG.                            @Y30LB12*/
*   /* TURN ON BITS FOR 'CONVREAL' DEVICES (BY SA            @XD00153*/
*   /* INTERFACE) - PABREAL.                                 @XD00153*/
*   /* SET REAL UNIT ADDRESS - PABAADDD                      @XD00153*/
*   /* ***********************************************       @Y30LB12*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0089
*   DO J=1 TO 8;                    /*                       @Y30LB14*/
         LA    J,1                                                 0089
@DL00089 DS    0H                                                  0090
*     IF PABEXIST(I,J)='1'B THEN                                   0090
         LR    @10,I                                               0090
         SLA   @10,3                                               0090
         ALR   @10,J                                               0090
         MH    @10,@CH00048                                        0090
         ST    @10,@TF00001                                        0090
         ALR   @10,R4                                              0090
         TM    PABEXIST-27(@10),B'10000000'                        0090
         BNO   @RF00090                                            0090
*       PABVOVIR(I,J)='1'B;         /*                       @Y30LB14*/
         LR    @10,R4                                              0091
         AL    @10,@TF00001                                        0091
         OI    PABVOVIR-27(@10),B'01000000'                        0091
*     BYTES(189+4*J)=PABFLAGS(I,J); /*                       @Y30LB14*/
@RF00090 LR    @10,J                                               0092
         SLA   @10,2                                               0092
         LR    @05,I                                               0092
         SLA   @05,3                                               0092
         ALR   @05,J                                               0092
         MH    @05,@CH00048                                        0092
         SLR   @15,@15                                             0092
         IC    @15,PABFLAGS-27(@05,R4)                             0092
         STC   @15,BYTES+188(@10)                                  0092
*     BYTES(190+4*J)=PABREAL(I,J);  /*                       @Y30LB14*/
         SLR   @15,@15                                             0093
         IC    @15,PABREAL-27(@05,R4)                              0093
         STC   @15,BYTES+189(@10)                                  0093
*     BYTES(192+4*J)=PABAADDD(I,J); /*                       @Y30LB14*/
         SLR   @15,@15                                             0094
         IC    @15,PABAADDD-27(@05,R4)                             0094
         STC   @15,BYTES+191(@10)                                  0094
*   END;                            /*                       @Y30LB14*/
         AH    J,@CH00042                                          0095
         CH    J,@CH00040                                          0095
         BNH   @DL00089                                            0095
*   RETURN;                         /*                       @Y30LB14*/
@EL00003 DS    0H                                                  0096
@EF00003 DS    0H                                                  0096
@ER00003 LM    @14,@12,12(@13)                                     0096
         BR    @14                                                 0096
*   END PABBYTES;                   /*                       @Y30LB14*/
*                                                                  0098
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - FREEPAGE                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - IF VARIED ON VIRTUAL IS SET, THEN 8 BYTES     @XD00153*/
*/*            WITH BUTS 1 THRU 52 SET ON ARE PLACED ON THE  @XD00153*/
*/*            9TH BLOCK.  PAGE 0 IS RESERVED FOR THE EXCLU- @XD00153*/
*/*            SIVE USE OF THE MSC, AND THEREFORE THE FIRST  @XD00153*/
*/*            BIT IS ALWAYS ZERO.  THE TOTAL COUNT OF BITS  @XD00153*/
*/*            SET IS INCREMENTED BY 51.  IF THE DEVICE IS   @XD00153*/
*/*            AN ICEBERG, THEN THE 52ND BIT IS ZEROED AND   @XD00153*/
*/*            THE TOTAL COUNT IS REDUCED BY ONE.  THE COUNT @XD00153*/
*/*            FOR THE INDIVIDUAL DEVICE IS ALSO PLACED IN   @XD00153*/
*/*            THE BLOCK IN BYTES 33,37,41,- - - 61.  FOR    @XD00153*/
*/*            SDG 0 AND DEVICE 0 & 2, ZERO4BIT IS CALLED TO @XD00153*/
*/*            SET THE APPROPRIATE 4 BITS OFF IN THE 51 BIT  @XD00153*/
*/*            STRING.                                       @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0098
*FREEPAGE:                                                         0098
*   PROCEDURE;                      /*                       @Y30LB14*/
FREEPAGE STM   @14,@04,@SA00004                                    0098
         STM   @08,@12,@SA00004+28                                 0098
*   VOVCNT=0;                       /*                       @Y30LB14*/
         SLR   VOVCNT,VOVCNT                                       0099
*   DO J=1 TO 8;                    /*                       @Y30LB14*/
         LA    J,1                                                 0100
@DL00100 DS    0H                                                  0101
*     IF PABVOVIR(I,J)='1'B THEN                                   0101
         LR    @10,I                                               0101
         SLA   @10,3                                               0101
         ALR   @10,J                                               0101
         MH    @10,@CH00048                                        0101
         ST    @10,@TF00001                                        0101
         ALR   @10,R4                                              0101
         TM    PABVOVIR-27(@10),B'01000000'                        0101
         BNO   @RF00101                                            0101
*       DO;                         /*                       @Y30LB14*/
*         VOVCNT=VOVCNT+1;          /*                       @Y30LB14*/
         AH    VOVCNT,@CH00042                                     0103
*         BLOCK(57+8*J:64+8*J)=B51; /*                       @Y30LB14*/
         LR    @10,J                                               0104
         SLA   @10,3                                               0104
         LA    @01,BLOCK+56(@10)                                   0104
         MVC   0(8,@01),B51                                        0104
*         BYTES(29+4*J)=51;         /*                       @Y30LB14*/
         LA    @15,51                                              0105
         LR    @14,J                                               0105
         SLA   @14,2                                               0105
         STC   @15,BYTES+28(@14)                                   0105
*         TOTALCNT=TOTALCNT+51;     /*                       @Y30LB14*/
         ALR   TOTALCNT,@15                                        0106
*         IF PABBERG2(I,J)='1'B THEN                               0107
         LR    @01,R4                                              0107
         AL    @01,@TF00001                                        0107
         TM    PABBERG2-27(@01),B'00000001'                        0107
         BNO   @RF00107                                            0107
*           DO;                     /*                       @Y30LB14*/
*             BYTES(63+8*J)='E0'X;  /*                       @Y30LB14*/
         LA    @15,224                                             0109
         STC   @15,BYTES+62(@10)                                   0109
*             BYTES(29+4*J)=50;     /*                       @Y30LB14*/
         LA    @10,50                                              0110
         STC   @10,BYTES+28(@14)                                   0110
*             TOTALCNT=TOTALCNT-1;  /*                       @Y30LB14*/
         BCTR  TOTALCNT,0                                          0111
*           END;                    /*                       @Y30LB14*/
*         IF I=1&PABDSMTL(I,J)='1'B /*                       @XD00163*/
*           THEN                                                   0113
@RF00107 CH    I,@CH00042                                          0113
         BNE   @RF00113                                            0113
         LR    @10,I                                               0113
         SLA   @10,3                                               0113
         ALR   @10,J                                               0113
         MH    @10,@CH00048                                        0113
         ALR   @10,R4                                              0113
         TM    PABDSMTL-27(@10),B'00001000'                        0113
         BNO   @RF00113                                            0113
*           CALL ZERO4BIT;          /* ZERO 4 BITS           @Y30LB14*/
         BAL   @14,ZERO4BIT                                        0114
*       END;                        /*                       @Y30LB14*/
@RF00113 DS    0H                                                  0116
*   END;                            /*                       @Y30LB14*/
@RF00101 AH    J,@CH00042                                          0116
         CH    J,@CH00040                                          0116
         BNH   @DL00100                                            0116
*   RETURN;                         /*                       @Y30LB14*/
@EL00004 DS    0H                                                  0117
@EF00004 DS    0H                                                  0117
@ER00004 LM    @14,@04,@SA00004                                    0117
         LM    @08,@12,@SA00004+28                                 0117
         BR    @14                                                 0117
*   END FREEPAGE;                   /*                       @Y30LB14*/
*                                                                  0119
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - MOVEBLOK                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE IS CALLED WHEN ALL 11 BLOCKS OF  @XD00153*/
*/*            THE SDG ARE READY TO BE TRANSFERRED TO THE    @XD00153*/
*/*            OUTPUT BUFFER WHICH IS THE TRACK IMAGE.  WHEN @XD00153*/
*/*            32 BLOCKS HAVE BEEN TRANSFERRED, THE TRACK IS @XD00153*/
*/*            WRITTEN AND THE BLOCK POINTER IS SET TO 1     @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0119
*MOVEBLOK:                                                         0119
*   PROCEDURE;                      /*                       @Y30LB14*/
MOVEBLOK STM   @14,@02,@SA00005                                    0119
         STM   @04,@12,@SA00005+20                                 0119
*   DO L=1 TO 11;                   /*                       @Y30LB14*/
         LA    L,1                                                 0120
@DL00120 DS    0H                                                  0121
*     OBLOCK(N)=INBLOCK(L);         /*                       @Y30LB14*/
         LR    @10,N                                               0121
         MH    @10,@CH00467                                        0121
         L     @05,BUILDPTR(,R4)                                   0121
         ALR   @10,@05                                             0121
         AL    @10,@CF00474                                        0121
         LR    @15,L                                               0121
         MH    @15,@CH00459                                        0121
         ALR   @05,@15                                             0121
         AL    @05,@CF00473                                        0121
         MVC   OBLOCK(256,@10),INBLOCK(@05)                        0121
*     N=N+1;                        /*                       @Y30LB14*/
         AH    N,@CH00042                                          0122
*     IF N=33 THEN                                                 0123
         CH    N,@CH00443                                          0123
         BNE   @RF00123                                            0123
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITETRK;            /* PUT PREFIX INFO IN BLKS     0125
*                                                            @Y30LB14*/
         BAL   @14,WRITETRK                                        0125
*         N=1;                      /*                       @Y30LB14*/
         LA    N,1                                                 0126
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14*/
@RF00123 AH    L,@CH00042                                          0128
         CH    L,@CH00246                                          0128
         BNH   @DL00120                                            0128
*   RETURN;                         /*                       @Y30LB14*/
@EL00005 DS    0H                                                  0129
@EF00005 DS    0H                                                  0129
@ER00005 LM    @14,@02,@SA00005                                    0129
         LM    @04,@12,@SA00005+20                                 0129
         BR    @14                                                 0129
*   END MOVEBLOK;                   /*                       @Y30LB14*/
*                                                                  0131
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - ZERO4BIT                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE ZEROS 4 BITS IN THE 51 BITS SET  @XD00153*/
*/*            BY FREEPAGE.  THE APPROPRIATE BIT PATTERN IN  @XD00153*/
*/*            TABLE IS 'ANDED' WITH THE APPROPRIATE BYTE    @XD00153*/
*/*            IN THE BIT STRING TO SHUT OFF AN INDIVIDUAL   @XD00153*/
*/*            BIT.  THE FREEPAGE COUNT IS SET TO 47 AND THE @XD00153*/
*/*            TOTAL COUNT IS REDUCED BY 4.                  @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0131
*ZERO4BIT:                                                         0131
*   PROCEDURE;                      /*                       @Y30LB14*/
ZERO4BIT STM   @14,@04,12(@13)                                     0131
         ST    @06,44(,@13)                                        0131
         STM   @08,@12,52(@13)                                     0131
*   ZEROS1=''B;                     /*                       @Y30LB14*/
         XC    ZEROS1(256),ZEROS1                                  0132
*   IF VPAGES(1)^=0&VPAGES(2)^=0&VPAGES(3)^=0&VPAGES(4)^=0 THEN    0133
         CLI   VPAGES(R4),0                                        0133
         BE    @RF00133                                            0133
         CLI   VPAGES+1(R4),0                                      0133
         BE    @RF00133                                            0133
         CLI   VPAGES+2(R4),0                                      0133
         BE    @RF00133                                            0133
         CLI   VPAGES+3(R4),0                                      0133
         BE    @RF00133                                            0133
*     DO;                           /*                       @Y30LB14*/
*       TOTALCNT=TOTALCNT-4;        /*                       @Y30LB14*/
         SH    TOTALCNT,@CH00068                                   0135
*       BYTES(29+4*J)=47;           /*                       @Y30LB14*/
         LR    @10,J                                               0136
         SLA   @10,2                                               0136
         LA    @06,47                                              0136
         STC   @06,BYTES+28(@10)                                   0136
*       DO K=1 TO 4;                /*                       @Y30LB14*/
         LA    K,1                                                 0137
@DL00137 DS    0H                                                  0138
*         BYTES(57+8*J+VPAGES(K)/8)=BYTES(57+8*J+VPAGES(K)/8)&TABLE(
*             VPAGES(K)//8+1);      /*                       @Y30LB14*/
         LR    @10,J                                               0138
         SLA   @10,3                                               0138
         AH    @10,@CH00434                                        0138
         SLR   @06,@06                                             0138
         IC    @06,VPAGES-1(K,R4)                                  0138
         LR    @15,@06                                             0138
         SRL   @15,3                                               0138
         ALR   @10,@15                                             0138
         LR    @00,@06                                             0138
         SRDA  @00,32                                              0138
         D     @00,@CF00040                                        0138
         SLR   @01,@01                                             0138
         IC    @01,BYTES-1(@10)                                    0138
         LR    @15,@00                                             0138
         LA    @14,TABLE(@15)                                      0138
         MVC   @ZT00003+3(1),0(@14)                                0138
         N     @01,@ZT00003                                        0138
         STC   @01,BYTES-1(@10)                                    0138
*         BLOCK1(VPAGES(K)*4+1)='00000010'B;/*               @Y30LB14*/
         SLA   @06,2                                               0139
         LA    @10,BLOCK1(@06)                                     0139
         MVI   0(@10),B'00000010'                                  0139
*         BLOCK1(VPAGES(K)*4+2)=K;  /*                       @Y30LB14*/
         STC   K,BLOCK1+1(@06)                                     0140
*       END;                        /*                       @Y30LB14*/
*                                                                  0141
         AH    K,@CH00042                                          0141
         CH    K,@CH00068                                          0141
         BNH   @DL00137                                            0141
*       /*************************************************************/
*       /*                                                           */
*       /* *********************************************     @XD00168*/
*       /* ADD 4 TO THE BOUND COUNT FOR THIS DEVICE          @XD00168*/
*       /* AND 4 TO THE BOUND COUNT FOR THIS STAGING         @XD00168*/
*       /* DRIVE GROUP                                       @XD00168*/
*       /* *********************************************     @XD00168*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0142
*       BYTES(32+4*J)=4;            /*                       @XD00168*/
         LA    @10,4                                               0142
         LR    @06,J                                               0142
         SLA   @06,2                                               0142
         STC   @10,BYTES+31(@06)                                   0142
*       BOUNDCNT=BOUNDCNT+4;        /*                       @XD00168*/
         ALR   BOUNDCNT,@10                                        0143
*     END;                          /*                       @Y30LB14*/
*   END ZERO4BIT;                   /*                       @Y30LB14*/
@EL00006 DS    0H                                                  0145
@EF00006 DS    0H                                                  0145
@ER00006 LM    @14,@04,12(@13)                                     0145
         L     @06,44(,@13)                                        0145
         LM    @08,@12,52(@13)                                     0145
         BR    @14                                                 0145
*                                                                  0146
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - WRITETRK                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE PUTS ON THE PREFIX INFORMATION   @XD00153*/
*/*            FOR A TRACK (32 BLOCKS WORTH) AND CALLS       @XD00153*/
*/*            ICGDSB06 TO WRITE OUT THE TRACK.              @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0146
*WRITETRK:                                                         0146
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITETRK STM   @14,@12,@SA00007                                    0146
*   DO K=1 TO 32;                   /*                       @Y30LB14*/
         LA    K,1                                                 0147
@DL00147 DS    0H                                                  0148
*     OUTREC(K)=K;                  /* SET THE PREFIX RECORD NUM   0148
*                                                            @Y30LB14*/
         LR    @10,K                                               0148
         MH    @10,@CH00467                                        0148
         LH    @05,@CH00457                                        0148
         AL    @05,BUILDPTR(,R4)                                   0148
         LA    @03,0(@10,@05)                                      0148
         AL    @03,@CF00476                                        0148
         STC   K,OUTREC-11(,@03)                                   0148
*     OUTHEAD(K)=OUTHEAD(1);        /* SET THE HEAD NUMBER   @Y30LB14*/
         SLR   @03,@03                                             0149
         IC    @03,OUTHEAD(,@05)                                   0149
         LA    @01,0(@10,@05)                                      0149
         AL    @01,@CF00477                                        0149
         STC   @03,OUTHEAD-10(,@01)                                0149
*     OUTCYL(K)=OUTCYL(1);          /* SET THE CYL NUMBER    @Y30LB14*/
         SLR   @03,@03                                             0150
         IC    @03,OUTCYL(,@05)                                    0150
         LA    @01,0(@10,@05)                                      0150
         AL    @01,@CF00478                                        0150
         STC   @03,OUTCYL-9(,@01)                                  0150
*     OUTABLID(K)='10'X;            /* TABLE ID IN PREFIX    @Y30LB14*/
         ST    @10,@TF00001                                        0151
         ALR   @10,@05                                             0151
         AL    @10,@CF00479                                        0151
         MVI   OUTABLID-8(@10),X'10'                               0151
*     OUTFLR(K)=''B;                /* SET FILLER TO ZERO    @Y30LB14*/
         AL    @05,@TF00001                                        0152
         AL    @05,@CF00480                                        0152
         XC    OUTFLR-12(4,@05),OUTFLR-12(@05)                     0152
*   END;                            /*                       @Y30LB14*/
         AH    K,@CH00042                                          0153
         CH    K,@CH00309                                          0153
         BNH   @DL00147                                            0153
*   CALL WRITE;                     /* WRITE OUT THE TRACK   @Y30LB14
*                                                            @Y30LB14*/
         BAL   @14,WRITE                                           0154
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14
*                                                            @Y30LB14*/
@EL00007 DS    0H                                                  0155
@EF00007 DS    0H                                                  0155
@ER00007 LM    @14,@12,@SA00007                                    0155
         BR    @14                                                 0155
*   END WRITETRK;                   /*                       @Y30LB14*/
*                                                                  0157
*/********************************************************** @Y30LB14*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - WRITE                                   @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE WRITES OUT THE TRACK AND UPDATES @XD00153*/
*/*            THE CYLINDER, TRACK AND RECORD FOR THE NEXT   @XD00153*/
*/*            AVAILABLE.                                    @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @Y30LB14*/
*                                                                  0157
*WRITE:                                                            0157
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITE    STM   @14,@12,@SA00008                                    0157
*   B06ADDR=OUTADDR;                /* SET OUTPUT ADDRESS FOR B06  0158
*                                                            @XD00153*/
         L     @10,BUILDPTR(,R4)                                   0158
         MVC   B06ADDR(3,@10),OUTADDR(@10)                         0158
*   GEN(LINK EP=ICGDSB06);          /* WRITE OUT TRACK       @Y30LB14*/
         LINK EP=ICGDSB06
*   UT2VHEAD=UT2VHEAD+1;            /* INCR TO NEXT TRACK    @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0160
         LA    @05,1                                               0160
         SLR   @15,@15                                             0160
         IC    @15,UT2VHEAD(,@10)                                  0160
         ALR   @15,@05                                             0160
         STC   @15,UT2VHEAD(,@10)                                  0160
*   IF UT2VHEAD>18                  /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   UT2VHEAD(@10),18                                    0161
         BNH   @RF00161                                            0161
*     DO;                           /*                       @Y30LB14*/
*       UT2VHEAD=0;                 /* SET TRACK TO ZERO     @Y30LB14*/
         MVI   UT2VHEAD(@10),X'00'                                 0163
*       UT2VCYL=UT2VCYL+1;          /* INCR TO NEXT CYL      @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@10)                          0164
         AL    @05,@ZT00003                                        0164
         STC   @05,UT2VCYL(,@10)                                   0164
*     END;                          /*                       @Y30LB14*/
*   OUTCYL(1)=UT2VCYL;              /* SET FOR NEXT AVAIL CYL      0166
*                                                            @Y30LB14*/
@RF00161 L     @10,BUILDPTR(,R4)                                   0166
         LH    @05,@CH00457                                        0166
         ALR   @05,@10                                             0166
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0166
*   OUTHEAD(1)=UT2VHEAD;            /* SET FOR NEXT AVAIL HEAD     0167
*                                                            @Y30LB14*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0167
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00008 DS    0H                                                  0168
@EF00008 DS    0H                                                  0168
@ER00008 LM    @14,@12,@SA00008                                    0168
         BR    @14                                                 0168
*   END WRITE;                      /*                       @Y30LB14*/
*                                                                  0170
*/*********************************************************  @XD00153*/
*/*                      P A T C H  A R E A                  @XD00153*/
*/*********************************************************  @XD00153*/
*                                                                  0170
*   GENERATE;                                                      0170
*                                                         /*@XD00153*/
PATCHB07 DC    32C'PATCHB07'                              /*@XD00153*/
*   END ICGDSB07                    /*                       @Y30LB14*/
*                                                                  0171
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA5)                                       */
*                                                                  0171
*       ;                                                          0171
         B     @EL00001                                            0171
@DATA    DS    0H
@CH00042 DC    H'1'
@CH00048 DC    H'3'
@CH00068 DC    H'4'
@CH00112 DC    H'9'
@CH00246 DC    H'11'
@CH00111 DC    H'30'
@CH00309 DC    H'32'
@CH00443 DC    H'33'
@CH00434 DC    H'57'
@CH00459 DC    H'264'
@CH00467 DC    H'272'
@CH00458 DC    H'5084'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00004 DS    12F
@SA00005 DS    14F
@SA00007 DS    15F
@SA00008 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSB07 CSECT
         DS    0F
@CF00040 DC    F'8'
@CH00040 EQU   @CF00040+2
@CF00473 DC    F'4820'
@CF00474 DC    F'13260'
@CF00457 DC    F'13532'
@CH00457 EQU   @CF00457+2
@CF00479 DC    F'-264'
@CF00478 DC    F'-263'
@CF00477 DC    F'-262'
@CF00476 DC    F'-261'
@CF00480 DC    F'-260'
@DATD    DSECT
         DS    0D
BLOCK    DS    CL256
         ORG   BLOCK
ZEROS    DS    BL256
         ORG   BLOCK+256
BLOCK1   DS    CL256
         ORG   BLOCK1
ZEROS1   DS    BL256
         ORG   BLOCK1+256
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSB07 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
B51      DC    X'7FFFFFFFFFFFF000'
TABLE    DC    X'7F'
         DC    X'BF'
         DC    X'DF'
         DC    X'EF'
         DC    X'F7'
         DC    X'FB'
         DC    X'FD'
         DC    X'FE'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VOVCNT   EQU   @06
BOUNDCNT EQU   @07
TOTALCNT EQU   @05
N        EQU   @03
L        EQU   @02
K        EQU   @02
J        EQU   @03
I        EQU   @02
R4       EQU   @04
COMTAB   EQU   0
READER   EQU   COMTAB+256
READFLAG EQU   READER+96
PCHBF    EQU   READER+99
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
PRINTER  EQU   COMTAB+464
MESSAGES EQU   COMTAB+810
SPECLMSG EQU   MESSAGES+18
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
BUILDPTR EQU   GENIO+20
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGLDEL  EQU   RSG+1
RSGUDEL  EQU   RSG+2
RSGSLICE EQU   RSG+3
RSGTODS  EQU   RSG+7
TODS1    EQU   RSGTODS
TODS2    EQU   RSGTODS+1
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABEXIST EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABBERG2 EQU   PABFLAGS
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
VPAGES   EQU   CREATE+1
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
BUILDTAB EQU   0
COMB06   EQU   BUILDTAB
B06DCBPT EQU   COMB06
B06BUFPT EQU   COMB06+4
B06ADDR  EQU   COMB06+9
COMB05   EQU   BUILDTAB+12
B05ADDR  EQU   COMB05+9
BUILDGEN EQU   BUILDTAB+24
UT2VCHR  EQU   BUILDGEN+8
OUTADDR  EQU   UT2VCHR+1
UT2VCYL  EQU   OUTADDR
UT2VHEAD EQU   OUTADDR+1
UT2VREC  EQU   OUTADDR+2
UT1VCHR  EQU   BUILDGEN+12
INADDR   EQU   UT1VCHR+1
UT1STUFF EQU   BUILDTAB+40
UT1FLAG  EQU   UT1STUFF+96
UT2STUFF EQU   BUILDTAB+664
UT2DCB   EQU   UT2STUFF
UT2FLAG  EQU   UT2STUFF+96
UT3STUFF EQU   BUILDTAB+1288
UT3FLAG  EQU   UT3STUFF+96
UT1BUFER EQU   BUILDTAB+5084
UT2BUFER EQU   BUILDTAB+13532
INBUFFER EQU   0
INBUFF   EQU   INBUFFER
INBLOCK  EQU   INBUFF+8
OUTBUFFR EQU   0
OUTBLOCK EQU   OUTBUFFR
OBLKPRFX EQU   OUTBLOCK+8
OUTABLID EQU   OBLKPRFX
OUTCYL   EQU   OBLKPRFX+1
OUTHEAD  EQU   OBLKPRFX+2
OUTREC   EQU   OBLKPRFX+3
OUTFLR   EQU   OBLKPRFX+4
OBLOCK   EQU   OUTBLOCK+16
SCANBUF  EQU   0
SCANDATA EQU   0
BLK      EQU   BLOCK
BYTES    EQU   BLK
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00025 EQU   OUTBLOCK
INBLK    EQU   INBLOCK
@NM00024 EQU   INBUFF
TEMPEND  EQU   BUILDTAB+22396
LTRTRANI EQU   BUILDTAB+22316
LTRTRANO EQU   BUILDTAB+22236
NVERIFY  EQU   BUILDTAB+3500
CVERIFY  EQU   BUILDTAB+1916
@NM00023 EQU   UT3STUFF+624
UT3DDN   EQU   UT3STUFF+616
UT3CCWS  EQU   UT3STUFF+320
UT3IOB   EQU   UT3STUFF+280
UT3ECB   EQU   UT3STUFF+276
UT3JFCB  EQU   UT3STUFF+100
@NM00022 EQU   UT3FLAG
UT3VWERR EQU   UT3FLAG
UT3VOERR EQU   UT3FLAG
UT3VUPDT EQU   UT3FLAG
UT3DCB   EQU   UT3STUFF
UT2DDN   EQU   UT2STUFF+616
UT2CCWS  EQU   UT2STUFF+320
UT2IOB   EQU   UT2STUFF+280
UT2ECB   EQU   UT2STUFF+276
UT2JFCB  EQU   UT2STUFF+100
@NM00021 EQU   UT2FLAG
UT2VCERR EQU   UT2FLAG
UT2VWERR EQU   UT2FLAG
UT2VOERR EQU   UT2FLAG
UT2VUPDT EQU   UT2FLAG
UT1DDN   EQU   UT1STUFF+616
UT1CCWS  EQU   UT1STUFF+320
UT1IOB   EQU   UT1STUFF+280
UT1ECB   EQU   UT1STUFF+276
UT1JFCB  EQU   UT1STUFF+100
@NM00020 EQU   UT1FLAG
UT1VWERR EQU   UT1FLAG
UT1VOERR EQU   UT1FLAG
UT1VUPDT EQU   UT1FLAG
UT1DCB   EQU   UT1STUFF
UT1VREC  EQU   INADDR+2
UT1VHEAD EQU   INADDR+1
UT1VCYL  EQU   INADDR
UT1TABID EQU   UT1VCHR
UT2TABID EQU   UT2VCHR
ADDRBUF2 EQU   BUILDGEN+4
ADDRBUF1 EQU   BUILDGEN
B05REC   EQU   B05ADDR+2
B05HEAD  EQU   B05ADDR+1
B05CYL   EQU   B05ADDR
B05TBLID EQU   COMB05+8
B05BUFPT EQU   COMB05+4
B05DCBPT EQU   COMB05
B06REC   EQU   B06ADDR+2
B06HEAD  EQU   B06ADDR+1
B06CYL   EQU   B06ADDR
B06TBLID EQU   COMB06+8
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
UPDCREAT EQU   @NM00017
NEWCREAT EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
@NM00011 EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
MAPEXIT  EQU   LIB+4
LIBMAP   EQU   LIB+3
LIBDSMID EQU   LIB+2
LIBSIZE  EQU   LIB+1
@NM00009 EQU   LIBBITS
LIBSPEC  EQU   LIBBITS
@NM00008 EQU   RSG
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
PRNTBUF2 EQU   SPECLMSG
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
PRNTCARD EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
TERMINAT EQU   MESSAGES+6
WARNING  EQU   MESSAGES+4
MSGNO    EQU   MESSAGES+2
RETCODE  EQU   MESSAGES
OUTBUF2  EQU   PRINTER+225
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SCANLEN  EQU   READER+204
SVEODAD  EQU   READER+200
SVSYNAD2 EQU   READER+196
SAVENCOL EQU   READER+192
SAVESCOL EQU   READER+188
INBUF    EQU   READER+100
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
LASTPARM EQU   READFLAG
ENDSCAN  EQU   READFLAG
PARMBIT  EQU   READFLAG
KEYBIT   EQU   READFLAG
READTERM EQU   READFLAG
READDCB  EQU   READER
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00077 EQU   @RC00076
@RC00081 EQU   @EL00002
@RF00133 EQU   @EL00006
@RC00082 EQU   @RC00081
@ENDDATA EQU   *
         END   ICGDSB07,(C'PLS1310',0603,76336)
