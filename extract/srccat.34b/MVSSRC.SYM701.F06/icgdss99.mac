         TITLE 'ICGDSS99 MSCTC, KEYWORD AND PARAMETER SCANNER          *
                        '
ICGDSS99 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSS99  76.339'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0030
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/*            ICGDSS99 (MAINLINE)                           @Y30LB12*/
*/*                                                          @Y30LB12*/
*/*            EXAMINE THE DATA IN INBUF ONE CHARACTER AT    @Y30LB12*/
*/*            A TIME TO LOCATE THE END OF THE KEYWORD OR    @Y30LB12*/
*/*            PARAMETER.  DELIMITERS THAT CAUSE A RETURN    @Y30LB12*/
*/*            TO THE CALLING PROCEDURE ARE EQUAL SIGN,      @Y30LB12*/
*/*            COMMA, OR A BLANK.                            @YD00113*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0030
*   IF ENDSCAN='1'B                 /*                       @YM32178*/
*     THEN                          /*                       @YM32178*/
         TM    ENDSCAN(R4),B'00010000'                             0030
         BNO   @RF00030                                            0030
*     DO;                           /*                       @YM32178*/
*       LASTPARM='1'B;              /*                       @YM32178*/
         OI    LASTPARM(R4),B'00001000'                            0032
*       RETURN;                     /*                       @YM32178*/
@EL00001 L     @13,4(,@13)                                         0033
@EF00001 L     @00,@SIZDATD                                        0033
         LR    @01,@11                                             0033
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0033
         BR    @14                                                 0033
*     END;                          /*                       @YM32178*/
*   DCBPTR=ADDR(READDCB);           /* SET DCB OVERLAY       @Y30LB12*/
@RF00030 LA    @10,READDCB(,R4)                                    0035
         ST    @10,DCBPTR(,R4)                                     0035
*   SVSYNAD2=DCBSYNAD;              /* SAVE ADR OF SYNAD     @Y30LB12*/
         LA    @07,52                                              0036
         ALR   @07,@10                                             0036
         MVC   SVSYNAD2(4,R4),DCBSYNAD(@07)                        0036
*   DCBSYNA=ADDR(READERR2);         /* PTR TO SYNAD HERE     @ZA14720*/
         LA    @05,READERR2                                        0037
         ST    @05,@TF00001                                        0037
         MVC   DCBSYNA(3,@07),@TF00001+1                           0037
*   SVEODAD=DCBEODAD;               /* SAVE ADR OF EODAD     @Y30LB12*/
         AH    @10,@CH00650                                        0038
         MVC   SVEODAD(4,R4),DCBEODAD(@10)                         0038
*   DCBEODAD=ADDR(ICGDS207);        /* PTR TO EODAD HERE     @Y30LB12*/
         LA    @07,ICGDS207                                        0039
         ST    @07,DCBEODAD(,@10)                                  0039
*   STARTCOL=NEXTCOL;               /* INDEX, 'SCANDATA'     @Y30LB12*/
         L     @10,NEXTCOL(,R4)                                    0040
         ST    @10,STARTCOL(,R4)                                   0040
*   R6=ADDR(INBUF)+72;              /* INVALID COL PTR       @Y30LB12*/
         LA    R6,INBUF(,R4)                                       0041
         AH    R6,@CH00272                                         0041
*   SCANLEN=0;                      /* INITIALIZE LENGTH     @Y30LB12*/
         SLR   @07,@07                                             0042
         STH   @07,SCANLEN(,R4)                                    0042
*   KEYBIT='0'B;                    /* INITIALIZE FLAG       @Y30LB12*/
*   PARMBIT='0'B;                   /* INITIALIZE FLAG       @Y30LB12*/
*   ENDSCAN='0'B;                   /* INITIALIZE FLAG       @Y30LB12*/
*                                                                  0045
         NI    KEYBIT(R4),B'10001111'                              0045
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* IF THE NEXT POSITION TO BE SCANNED CONTAINS           @Y30LB12*/
*   /* A BLANK OR IS POSITION 73, EXAMINE THE                @Y30LB12*/
*   /* PREVIOUS POSITION FOR A COMMA. IF THE                 @Y30LB12*/
*   /* PREVIOUS POSITION CONTAINS A COMMA, THE               @Y30LB12*/
*   /* STATEMENT IS CONTINUED ONTO THE NEXT RECORD.          @Y30LB12*/
*   /* GO OUT AND READ THAT RECORD.                          @Y30LB12*/
*   /*                                                       @Y30LB12*/
*   /* IF THE NEXT POSITION IS BLANK OR COLUMN 73            @Y30LB12*/
*   /* BUT THE PREVIOUS POSITION IS NOT A COMMA, WE          @Y30LB12*/
*   /* ARE FINISHED WITH THE SCAN OF THIS STATEMENT.         @Y30LB12*/
*   /* SET LASTPARM.                                         @Y30LB12*/
*   /*                                                       @Y30LB12*/
*   /* IF A COMMENT APPEARS ANYWHERE WITHIN A CONTROL        @Y30LB12*/
*   /* STATEMENT, IT MUST BE SEPARATED FROM THE DATA         @Y30LB12*/
*   /* BY AT LEAST TWO DELIMITERS (COMMA AND BLANK OR        @Y30LB12*/
*   /* TWO BLANKS.                                           @Y30LB12*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0046
*   IF SCANBUF(1)='40'X             /* CURRENT COL BLANK     @Y30LB12*/
*       ×NEXTCOL=R6                 /* OR COLUMN 72          @Y30LB12*/
*     THEN                          /*                       @Y30LB12*/
         CLI   SCANBUF(@10),X'40'                                  0046
         BE    @RT00046                                            0046
         CR    @10,R6                                              0046
         BNE   @RF00046                                            0046
@RT00046 DS    0H                                                  0047
*     DO;                                                          0047
*       WORKNEXT=NEXTCOL;                                          0048
         L     @10,NEXTCOL(,R4)                                    0048
         ST    @10,@TF00001                                        0048
         MVC   WORKNEXT(4),@TF00001                                0048
*       NEXTCOL=NEXTCOL-1;                                         0049
         BCTR  @10,0                                               0049
         ST    @10,NEXTCOL(,R4)                                    0049
*       IF SCANBUF(1)=','           /* IF COMMA              @Y30LB12*/
*         THEN                      /*                       @Y30LB12*/
         CLI   SCANBUF(@10),C','                                   0050
         BNE   @RF00050                                            0050
*         CALL READIT;              /* READ NEXT RECORD      @Y30LB12*/
         BAL   @14,READIT                                          0051
*       ELSE                        /*                       @Y30LB12*/
*         DO;                       /*                       @Y30LB12*/
         B     @RC00050                                            0052
@RF00050 DS    0H                                                  0053
*           NEXTCOL=WORKNEXT;       /* RETORE NEXTCOL        @Y30LB12*/
         MVC   NEXTCOL(4,R4),WORKNEXT                              0053
*           LASTPARM='1'B;          /* SET END OF SCAN       @Y30LB12*/
         OI    LASTPARM(R4),B'00001000'                            0054
*         END;                      /*                       @Y30LB12*/
*     END;                                                         0056
*   ELSE                                                           0057
*     ;                             /*                       @Y30LB12*/
*                                                                  0057
@RF00046 DS    0H                                                  0058
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* IF NO TERMINATING ERROR AND A KEYWORD OR              @Y30LB12*/
*   /* PARAMETER YET TO BE SCANNED, FIND KEYWORD OR          @Y30LB12*/
*   /* PARAMETER. OTHERWISE, RETURN TO CALLER WITH           @Y30LB12*/
*   /* EITHER ENDSCAN OR LASTPARM ON.                        @Y30LB12*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0058
*   IF ENDSCAN='0'B&LASTPARM='0'B   /*                       @Y30LB12*/
*     THEN                          /*                       @Y30LB12*/
@RC00046 TM    ENDSCAN(R4),B'00011000'                             0058
         BNZ   @RF00058                                            0058
*     CALL FINDDATA;                /*                       @Y30LB12*/
         BAL   @14,FINDDATA                                        0059
*   ELSE                                                           0060
*     ;                             /*                       @Y30LB12*/
*                                                                  0060
@RF00058 DS    0H                                                  0061
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* RESTORE SYNAD AND EODAD AND RETURN TO CALLER          @Y30LB12*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0061
*NORMRET:                                                          0061
*   DCBPTR=ADDR(READDCB);           /*                       @Y30LB12*/
NORMRET  LA    @10,READDCB(,R4)                                    0061
         ST    @10,DCBPTR(,R4)                                     0061
*   DCBSYNA=SVSYNAD2;               /*                       @ZA14720*/
         MVC   DCBSYNA+52(3,@10),SVSYNAD2+1(R4)                    0062
*   DCBEODAD=SVEODAD;               /*                       @Y30LB12*/
         MVC   DCBEODAD+28(4,@10),SVEODAD(R4)                      0063
*   RETURN;                         /*                       @Y30LB12*/
         B     @EL00001                                            0064
*                                                                  0065
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - FINDDATA                                @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - LOCATE THE START AND CALCULATE THE LENGTH     @Y30LB12*/
*/*            (EXCLUDING DELIMITERS) OF                     @Y30LB12*/
*/*            THE NEXT KEYWORD OR PARAMETER.  SET KEYBIT    @Y30LB12*/
*/*            IF THE VALUE SCANNED IS A KEYWORD OR SET      @Y30LB12*/
*/*            PARMBIT IF THE VALUE SCANNED IS A PARAMETER.  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0065
*FINDDATA:                                                         0065
*   PROCEDURE;                      /*                       @Y30LB12*/
*                                                                  0065
FINDDATA STM   @14,@12,@SA00002                                    0065
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* SEARCH FOR A VALID DELIMITER. EXPECTED                @Y30LB12*/
*   /* DELIMITERS ARE EQUAL SIGN (=), COMMA (,),             @Y30LB12*/
*   /* AND BLANK ( ). IF THE DELIMITER IS AN EQUAL           @Y30LB12*/
*   /* SIGN, THE AREA SCANDATA CONTAINS A KEYWORD.           @Y30LB12*/
*   /* IF THE DELIMITER CONTAINS A BLANK OR A COMMA,         @Y30LB12*/
*   /* THE AREA SCANDATA CONTAINS A PARAMETER.               @Y30LB12*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0066
*   S99FLAG='1'B;                   /* LOOP CONTROL FLAG     @Y30LB12*/
         OI    S99FLAG,B'10000000'                                 0066
*   DO WHILE(S99FLAG='1'B);         /*                       @Y30LB12*/
         B     @DE00067                                            0067
@DL00067 DS    0H                                                  0068
*     IF SCANBUF(1)='='             /* IS KEYWORD            @Y30LB12*/
*       THEN                        /*                       @Y30LB12*/
         L     @10,NEXTCOL(,R4)                                    0068
         CLI   SCANBUF(@10),C'='                                   0068
         BNE   @RF00068                                            0068
*       DO;                         /*                       @Y30LB12*/
*         S99FLAG='0'B;             /* TO EXIT LOOP          @Y30LB12*/
         NI    S99FLAG,B'01111111'                                 0070
*         NEXTCOL=NEXTCOL+1;        /* NEXT SCAN START       @Y30LB12*/
         AH    @10,@CH00042                                        0071
         ST    @10,NEXTCOL(,R4)                                    0071
*         KEYBIT='1'B;              /* SET KEYWORD BIT       @Y30LB12*/
         OI    KEYBIT(R4),B'01000000'                              0072
*       END;                        /*                       @Y30LB12*/
*     ELSE                                                         0074
*       ;                           /* NOT EQUAL SIGN        @Y30LB12*/
@RF00068 DS    0H                                                  0075
*     IF SCANBUF(1)=','&S99FLAG='1'B/*                       @Y30LB12*/
*         ×SCANBUF(1)='40'X&S99FLAG='1'B/*                   @Y30LB12*/
*       THEN                        /*                       @Y30LB12*/
         L     @10,NEXTCOL(,R4)                                    0075
         CLI   SCANBUF(@10),C','                                   0075
         BNE   @GL00002                                            0075
         TM    S99FLAG,B'10000000'                                 0075
         BO    @RT00075                                            0075
@GL00002 L     @10,NEXTCOL(,R4)                                    0075
         CLI   SCANBUF(@10),X'40'                                  0075
         BNE   @RF00075                                            0075
         TM    S99FLAG,B'10000000'                                 0075
         BNO   @RF00075                                            0075
@RT00075 DS    0H                                                  0076
*       DO;                         /*                       @Y30LB12*/
*         S99FLAG='0'B;             /* TO EXIT LOOP          @Y30LB12*/
         NI    S99FLAG,B'01111111'                                 0077
*         NEXTCOL=NEXTCOL+1;        /* NEXT SCAN START       @Y30LB12*/
         LA    @10,1                                               0078
         AL    @10,NEXTCOL(,R4)                                    0078
         ST    @10,NEXTCOL(,R4)                                    0078
*         PARMBIT='1'B;             /* SET PARAMETER BIT     @Y30LB12*/
         OI    PARMBIT(R4),B'00100000'                             0079
*       END;                        /*                       @Y30LB12*/
*     ELSE                                                         0081
*       ;                           /*                       @Y30LB12*/
*                                                                  0081
@RF00075 DS    0H                                                  0082
*     /***************************************************************/
*     /*                                                             */
*     /* ***********************************************     @YD00113*/
*     /* IF COLUMN DID NOT CONTAIN AN EQUAL SIGN, A          @Y30LB12*/
*     /* COMMA, OR A BLANK, IT CONTAINED A CHARACTER         @Y30LB12*/
*     /* OF KEYWORD OR PARAMETER. BUMP NEXTCOL AND           @Y30LB12*/
*     /* SCANLEN AND CONTINUE LOOKING FOR A DELIMITER.       @Y30LB12*/
*     /* ERROR IF INTO COLUMN 73 BEFORE DELIMITER IS         @Y30LB12*/
*     /* FOUND                                               @Y30LB12*/
*     /* ***********************************************     @YD00113*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0082
*     IF S99FLAG='1'B               /*                       @Y30LB12*/
*       THEN                        /*                       @Y30LB12*/
         TM    S99FLAG,B'10000000'                                 0082
         BNO   @RF00082                                            0082
*       DO;                         /*                       @Y30LB12*/
*         SCANLEN=SCANLEN+1;        /* BUMP LENGTH           @Y30LB12*/
         LA    @10,1                                               0084
         LH    @07,SCANLEN(,R4)                                    0084
         ALR   @07,@10                                             0084
         STH   @07,SCANLEN(,R4)                                    0084
*         NEXTCOL=NEXTCOL+1;        /* BUMP TO NEXT COL      @Y30LB12*/
         AL    @10,NEXTCOL(,R4)                                    0085
         ST    @10,NEXTCOL(,R4)                                    0085
*         IF NEXTCOL=R6             /* IF NEXT IS COL 73     @Y30LB12*/
*           THEN                    /* OVERRAN CONT COL,     @Y30LB12*/
         CR    @10,R6                                              0086
         BNE   @RF00086                                            0086
*           CALL ICGDS203;          /* WRITE ERROR MSG       @Y30LB12*/
         BAL   @14,ICGDS203                                        0087
*         ELSE                                                     0088
*           ;                       /*                       @Y30LB12*/
@RF00086 DS    0H                                                  0089
*       END;                        /*                       @Y30LB12*/
*   END;                            /* END OF DO WHILE       @Y30LB12*/
@RF00082 DS    0H                                                  0090
@DE00067 TM    S99FLAG,B'10000000'                                 0090
         BO    @DL00067                                            0090
*   END FINDDATA;                   /* RET. TO MAINLINE      @Y30LB12*/
@EL00002 DS    0H                                                  0091
@EF00002 DS    0H                                                  0091
@ER00002 LM    @14,@12,@SA00002                                    0091
         BR    @14                                                 0091
*                                                                  0092
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - READIT                                  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - READ THE CONTINUATION OF THE CONTROL          @Y30LB12*/
*/*            STATEMENT AND POSITION TO THE FIRST           @Y30LB12*/
*/*            NON-BLANK CHARACTER AFTER POSITION 1.         @Y30LB12*/
*/*            SET STARTCOL AND NEXTCOL EQUAL TO THAT        @Y30LB12*/
*/*            COLUMN AND RETURN TO THE MAINLINE.            @Y30LB12*/
*/*                                                          @Y30LB12*/
*/*           IF COLUMN 1 CONTAINS AN ASTERISK, THE          @Y30LB12*/
*/*           STATEMENT CONTAINS COMMENTS ONLY AND SHOULD    @Y30LB12*/
*/*           JUST BE READ AND PRINTED AND THE NEXT          @Y30LB12*/
*/*           RECORD READ.                                   @Y30LB12*/
*/*                                                          @Y30LB12*/
*/*           IF COLUMN 1 CONTAINS ANY OTHER NON-BLANK       @Y30LB12*/
*/*           CHARACTER, TREAT THE RECORD AS AN ERROR AND    @Y30LB12*/
*/*           TERMINATE SCAN OF THIS CONTROL STATEMENT.      @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0092
*READIT:                                                           0092
*   PROCEDURE;                      /*                       @Y30LB12*/
READIT   STM   @14,@12,@SA00003                                    0092
*   S99READ='1'B;                   /* CONTROL FLAG          @Y30LB12*/
         OI    S99READ,B'01000000'                                 0093
*   DO WHILE(S99READ='1'B);         /* CONTROL LOOP          @Y30LB12*/
         B     @DE00094                                            0094
@DL00094 DS    0H                                                  0095
*     R1=ADDR(READDCB);             /* ADDRESS OF DCB        @Y30LB12*/
         LA    R1,READDCB(,R4)                                     0095
*     R0=ADDR(INBUF);               /* ADDRESS OF BUFFER     @Y30LB12*/
         LA    R0,INBUF(,R4)                                       0096
*     GEN(GET   (1),(0));           /* READ A RECORD         @Y30LB12*/
         GET   (1),(0)
*     PRNTCARD='1'B;                /* SET PRINT RECORD      @Y30LB12*/
         OI    PRNTCARD(R4),B'00010000'                            0098
*     GEN(LINK  EP=ICGDSMSG);       /* GO PRINT IT           @Y30LB12*/
         LINK  EP=ICGDSMSG
*     PRNTCARD='0'B;                /* PRINT RECORD OFF      @Y30LB12*/
         NI    PRNTCARD(R4),B'11101111'                            0100
*     NEXTCOL=ADDR(INBUF);          /* SCANBUF OVERLAY       @Y30LB12*/
         LA    @10,INBUF(,R4)                                      0101
         ST    @10,NEXTCOL(,R4)                                    0101
*     IF INBUF(1)^='*'              /* IF COMMENTS,          @Y30LB12*/
*       THEN                        /* READ AGAIN            @Y30LB12*/
         CLI   INBUF(R4),C'*'                                      0102
         BE    @RF00102                                            0102
*       S99READ='0'B;               /* CONTROL FLAG OFF      @Y30LB12*/
         NI    S99READ,B'10111111'                                 0103
*     ELSE                                                         0104
*       ;                           /* NOT A COMMENT         @Y30LB12*/
@RF00102 DS    0H                                                  0105
*   END;                            /* END OF DO WHILE       @Y30LB12*/
@DE00094 TM    S99READ,B'01000000'                                 0105
         BO    @DL00094                                            0105
*   IF INBUF(1)='40'X               /* IF CONT RECORD,       @Y30LB12*/
*     THEN                          /* CONTAINS A LABEL      @Y30LB12*/
         CLI   INBUF(R4),X'40'                                     0106
         BNE   @RF00106                                            0106
*     DO;                           /*                       @Y30LB12*/
*       DO I=1 TO 72 WHILE(SCANBUF(I)='40'X);/*              @Y30LB12*/
         LA    I,1                                                 0108
@DL00108 L     @10,NEXTCOL(,R4)                                    0108
         ALR   @10,I                                               0108
         AL    @10,@CF00663                                        0108
         CLI   SCANBUF(@10),X'40'                                  0108
         BNE   @DC00108                                            0108
*       END;                        /*                       @Y30LB12*/
         AH    I,@CH00042                                          0109
         CH    I,@CH00272                                          0109
         BNH   @DL00108                                            0109
@DC00108 DS    0H                                                  0110
*       IF I^=73                    /*                       @Y30LB12*/
*         THEN                      /*                       @Y30LB12*/
         CH    I,@CH00640                                          0110
         BE    @RF00110                                            0110
*         DO;                       /*                       @Y30LB12*/
*           STARTCOL=ADDR(INBUF)-1+I;/*                      @Y30LB12*/
         LA    @10,INBUF(,R4)                                      0112
         BCTR  @10,0                                               0112
         ALR   @10,I                                               0112
         ST    @10,STARTCOL(,R4)                                   0112
*           NEXTCOL=STARTCOL;       /*                       @Y30LB12*/
         ST    @10,NEXTCOL(,R4)                                    0113
*           SAVESCOL=STARTCOL;      /*                       @Y30LB12*/
         ST    @10,SAVESCOL(,R4)                                   0114
*           SAVENCOL=NEXTCOL;       /*                       @Y30LB12*/
         ST    @10,SAVENCOL(,R4)                                   0115
*         END;                      /*                       @Y30LB12*/
*       ELSE                        /*                       @Y30LB12*/
*         CALL ICGDS208;            /* WRITE ERROR MSG       @Y30LB12*/
         B     @RC00110                                            0117
@RF00110 BAL   @14,ICGDS208                                        0117
*     END;                          /*                       @Y30LB12*/
*   ELSE                            /* LABEL PRESENT         @Y30LB12*/
*     CALL ICGDS208;                /* WRITE ERROR MSG       @Y30LB12*/
         B     @RC00106                                            0119
@RF00106 BAL   @14,ICGDS208                                        0119
*   END READIT;                     /* RET. TO MAINLINE      @Y30LB12*/
@EL00003 DS    0H                                                  0120
@EF00003 DS    0H                                                  0120
@ER00003 LM    @14,@12,@SA00003                                    0120
         BR    @14                                                 0120
*                                                                  0121
*/***********************************************************@Y30LB12*/
*/* SYNAD EXIT FOR SYSIN, TAKEN FOR READ ERRORS.             @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0121
*READERR2:                                                         0121
*   ;                               /*                       @Y30LB12*/
READERR2 DS    0H                                                  0122
*   GEN(SYNADAF ACSMETH=QSAM);      /*                       @Y30LB12*/
         SYNADAF ACSMETH=QSAM
*   GEN(MVC   OUTBUF2+30(79,R4),49(1));/*                    @Y30LB12*/
         MVC   OUTBUF2+30(79,R4),49(1)
*   OUTBUF2(1:30)=ICGDS201;         /*                       @YM32166*/
         MVC   OUTBUF2(30,R4),ICGDS201                             0124
*   PRNTBUF2='1'B;                  /* SET PRINT MESSAGE     @Y30LB12*/
         OI    PRNTBUF2(R4),B'00000001'                            0125
*   GEN(LINK  EP=ICGDSMSG);         /* TO MESSAGE WRITER     @Y30LB12*/
         LINK  EP=ICGDSMSG
*   GEN(SYNADRLS);                  /*                       @Y30LB12*/
         SYNADRLS
*   RETCODE=16;                     /* SET RETURN CODE       @Y30LB12*/
         MVC   RETCODE(2,R4),@CH00162                              0128
*   TERMINAT=TERMINAT+1;            /* BUMP MSG COUNT        @Y30LB12*/
         LA    @10,1                                               0129
         AH    @10,TERMINAT(,R4)                                   0129
         STH   @10,TERMINAT(,R4)                                   0129
*   ENDSCAN='1'B;                   /* SET ABTERM FLAG       @Y30LB12*/
         OI    ENDSCAN(R4),B'00010000'                             0130
*   GEN(BR    R14);                 /* RETURN TO IOS         @Y30LB12*/
         BR    R14
*                                                                  0132
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME = ICGDS208                                @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - WRITE ERROR MESSAGE ICGDS208 WHEN READING     @Y30LB12*/
*/*            INVALID CONTINUATION RECORD.  SET ENDSCAN     @Y30LB12*/
*/*            FLAG BIT AND BYPASS FURTHER PROCESSING OF     @Y30LB12*/
*/*            THE CONTROL STATEMENT.                        @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0132
*ICGDS208:                                                         0132
*   PROCEDURE;                      /*                       @Y30LB12*/
         B     @PB00004                                            0132
ICGDS208 STM   @14,@12,@SA00004                                    0132
*   MSGNO=ICG208I;                  /*                       @Y30LB12*/
         MVC   MSGNO(2,R4),ICG208I                                 0133
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @10,1                                               0134
         AH    @10,TERMINAT(,R4)                                   0134
         STH   @10,TERMINAT(,R4)                                   0134
*   ENDSCAN='1'B;                   /*                       @Y30LB12*/
         OI    ENDSCAN(R4),B'00010000'                             0135
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   END ICGDS208;                   /*                       @Y30LB12*/
@EL00004 DS    0H                                                  0137
@EF00004 DS    0H                                                  0137
@ER00004 LM    @14,@12,@SA00004                                    0137
         BR    @14                                                 0137
*                                                                  0138
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - ICGDS203                                @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - WRITE ERROR MESSAGE ICGDS203, SET ENDSCAN     @Y30LB12*/
*/*            FLAG ON AND SET S99FLAG OFF IF WE HAVE        @Y30LB12*/
*/*            RAEACHED THE END OF THE SCAN AREA             @Y30LB12*/
*/*            (2-72) WITHOUT FINDING A DELIMITER.           @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0138
*ICGDS203:                                                         0138
*   PROCEDURE;                      /*                       @Y30LB12*/
ICGDS203 STM   @14,@12,@SA00005                                    0138
*   MSGNO=ICG203I;                  /*                       @Y30LB12*/
         MVC   MSGNO(2,R4),ICG203I                                 0139
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @10,1                                               0140
         AH    @10,TERMINAT(,R4)                                   0140
         STH   @10,TERMINAT(,R4)                                   0140
*   ENDSCAN='1'B;                   /*                       @Y30LB12*/
         OI    ENDSCAN(R4),B'00010000'                             0141
*   S99FLAG='0'B;                   /*                       @Y30LB12*/
         NI    S99FLAG,B'01111111'                                 0142
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   END ICGDS203;                   /*                       @Y30LB12*/
@EL00005 DS    0H                                                  0144
@EF00005 DS    0H                                                  0144
@ER00005 LM    @14,@12,@SA00005                                    0144
         BR    @14                                                 0144
@PB00005 DS    0H                                                  0145
*                                                                  0145
*/***********************************************************@Y30LB12*/
*/* ENTER HERE IF READING A SUPPOSED CONTINUATION FORCES US  @Y30LB12*/
*/* TO END-OF-DATA.                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0145
*ICGDS207:                                                         0145
*   MSGNO=ICG207I;                  /*                       @Y30LB12*/
ICGDS207 MVC   MSGNO(2,R4),ICG207I                                 0145
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @10,1                                               0146
         AH    @10,TERMINAT(,R4)                                   0146
         STH   @10,TERMINAT(,R4)                                   0146
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   READTERM='1'B;                  /*                       @Y30LB12*/
*   ENDSCAN='1'B;                   /*                       @Y30LB12*/
         OI    READTERM(R4),B'10010000'                            0149
*   GO TO NORMRET;                  /*                       @Y30LB12*/
         B     NORMRET                                             0150
*                                                                  0151
*/***********************************************************@Y30LB12*/
*/*                     P A T C H   A R E A                  @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0151
*   GENERATE;                                                      0151
*                                                         /*@Y30LB12*/
PATCHS99 DC    32C'PATCHS99'                              /*@Y30LB12*/
*   END ICGDSS99                    /*                       @Y30LB12*/
*                                                                  0152
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0152
*       ;                                                          0152
         B     @EL00001                                            0152
@DATA    DS    0H
@CH00042 DC    H'1'
@CH00162 DC    H'16'
@CH00650 DC    H'28'
@CH00272 DC    H'72'
@CH00640 DC    H'73'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
@SA00002 DS    15F
@SA00005 DS    15F
@SA00004 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSS99 CSECT
         DS    0F
@CF00663 DC    F'-1'
@DATD    DSECT
         DS    0D
WORKNEXT DS    CL4
FLAGS    DS    CL1
         ORG   FLAGS
S99FLAG  DS    BL1
S99READ  EQU   FLAGS+0
@NM00049 EQU   FLAGS+0
         ORG   FLAGS+1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSS99 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
ICG203I  DC    H'203'
ICG207I  DC    H'207'
ICG208I  DC    H'208'
ICGDS201 DC    CL30' ICG201I I/O ERROR ON SYSIN   '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
I        EQU   @02
R4       EQU   @04
R0       EQU   @00
R1       EQU   @01
R6       EQU   @06
R14      EQU   @14
COMTAB   EQU   0
READER   EQU   COMTAB+256
READDCB  EQU   READER
READFLAG EQU   READER+96
READTERM EQU   READFLAG
KEYBIT   EQU   READFLAG
PARMBIT  EQU   READFLAG
ENDSCAN  EQU   READFLAG
LASTPARM EQU   READFLAG
PCHBF    EQU   READER+99
INBUF    EQU   READER+100
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
SAVESCOL EQU   READER+188
SAVENCOL EQU   READER+192
SVSYNAD2 EQU   READER+196
SVEODAD  EQU   READER+200
SCANLEN  EQU   READER+204
PRINTER  EQU   COMTAB+464
OUTBUF2  EQU   PRINTER+225
MESSAGES EQU   COMTAB+810
RETCODE  EQU   MESSAGES
MSGNO    EQU   MESSAGES+2
TERMINAT EQU   MESSAGES+6
SPECLMSG EQU   MESSAGES+18
PRNTCARD EQU   SPECLMSG
PRNTBUF2 EQU   SPECLMSG
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGTODS  EQU   RSG+7
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
SCANBUF  EQU   0
IHADCB   EQU   0
IHADCS05 EQU   0
DCBMODE  EQU   IHADCS05
DCBSTACK EQU   DCBMODE
DCBFUNC  EQU   IHADCS05+3
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBSYNA  EQU   DCBSYNAD+1
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00045 EQU   IHADCS40+12
DCBEROPT EQU   @NM00045
SCANDATA EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00048 EQU   IHADCS40+16
@NM00047 EQU   @NM00045+1
@NM00046 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00044 EQU   IHADCS40+10
@NM00043 EQU   IHADCS40+9
@NM00042 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00041 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
DCBLRECL EQU   IHADCS38+10
@NM00040 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00039 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00038 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00037 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00036 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00035 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00034 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
@NM00033 EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00032 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00031 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00030 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00029 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00028 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00027 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00026 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00025 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
DCBDSGMQ EQU   DCBDSRG1
DCBDSGCQ EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
@NM00024 EQU   DCBFUNC
DCBFNCBT EQU   DCBFUNC
DCBFNCBX EQU   DCBFUNC
DCBFNCBD EQU   DCBFUNC
DCBFNCBW EQU   DCBFUNC
DCBFNCBP EQU   DCBFUNC
DCBFNCBR EQU   DCBFUNC
DCBFNCBI EQU   DCBFUNC
@NM00023 EQU   IHADCS05+2
@NM00022 EQU   IHADCS05+1
DCBSTCK1 EQU   DCBSTACK
DCBSTCK2 EQU   DCBSTACK
@NM00021 EQU   DCBSTACK
DCBMODER EQU   DCBSTACK
DCBMODEO EQU   DCBSTACK
DCBMODEE EQU   DCBSTACK
DCBMODEC EQU   DCBSTACK
@NM00020 EQU   IHADCB
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
VPAGES   EQU   CREATE+1
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
UPDCREAT EQU   @NM00017
NEWCREAT EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
PABBERG2 EQU   PABFLAGS
@NM00011 EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABEXIST EQU   PABFLAGS
MAPEXIT  EQU   LIB+4
LIBMAP   EQU   LIB+3
LIBDSMID EQU   LIB+2
LIBSIZE  EQU   LIB+1
@NM00009 EQU   LIBBITS
LIBSPEC  EQU   LIBBITS
TODS2    EQU   RSGTODS+1
TODS1    EQU   RSGTODS
RSGSLICE EQU   RSG+3
RSGUDEL  EQU   RSG+2
RSGLDEL  EQU   RSG+1
@NM00008 EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
BUILDPTR EQU   GENIO+20
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
WARNING  EQU   MESSAGES+4
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00050 EQU   @RC00046
@RC00106 EQU   @EL00003
@PB00004 EQU   @PB00005
@RC00110 EQU   @RC00106
@ENDDATA EQU   *
         END   ICGDSS99,(C'PLS0723',0603,76339)
