         TITLE 'ICGDSB14 MSC TABLE CREATE, MOUNTED VOLUME TABLE        *
                        '
ICGDSB14 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSB14  76.337'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0014
*/********************************************************** @XD00153*/
*/*                                                          @XD00153*/
*/*      ICGDSB14 (MAINLINE)                                 @XD00153*/
*/*                                                          @XD00153*/
*/*      ESTABLISH DATA ADDRESS ON DASD (CCHHR) AND ADDRESS  @XD00153*/
*/*      OF OUTPUT BUFFER AND ITS ASSOCIATED DCB.  IF A NEW  @XD00153*/
*/*      TABLE IS TO BUILD, CALL 'EMPTYLIB' ROUTINE.         @XD00153*/
*/*      RETURN CONTROL TO 'BUILD'.                          @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @XD00153*/
*                                                                  0014
*   OUTCYL(1)=UT2VCYL;              /* STARTING CYLINDER NUM @XD00153*/
         L     @10,BUILDPTR(,R4)                                   0014
         LH    @05,@CH00423                                        0014
         ALR   @05,@10                                             0014
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0014
*   OUTHEAD(1)=UT2VHEAD;            /* STARTING HEAD NUMBER  @Y30LB14*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0015
*   OUTREC(1)=UT2VREC;              /* STARTING RECORD NUM   @XD00153*/
         MVC   OUTREC(1,@05),UT2VREC(@10)                          0016
*   B06DCBPT=ADDR(UT2DCB);          /*                       @Y30LB14*/
         LA    @05,UT2DCB(,@10)                                    0017
         ST    @05,B06DCBPT(,@10)                                  0017
*   B06BUFPT=ADDR(UT2BUFER);        /* ADDRESS OF WRITE      @Y30LB14
*                                      BUFFER                @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0018
         LR    @05,@10                                             0018
         AL    @05,@CF00423                                        0018
         ST    @05,B06BUFPT(,@10)                                  0018
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* IF A COMPLETELY NEW TABLE IS TO BE BUILT FROM         @Y30LB14*/
*   /* SCRATCH, THEN 'EMPTYLIB' IS CALLED.                   @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0019
*   IF NEWCREAT='1'B×UPDCREAT='1'B  /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         TM    NEWCREAT(R4),B'01100000'                            0019
         BZ    @RF00019                                            0019
*     CALL EMPTYLIB;                /* BUILD A COMPLETELY NEW LIB  0020
*                                                            @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0020
         BAL   @14,EMPTYLIB                                        0020
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* RETURN TO THE BUILD MODULE - ICGDSBLD                 @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0021
*   RETURN;                         /* RETURN TO BUILD       @Y30LB14*/
@EL00001 L     @13,4(,@13)                                         0021
@EF00001 L     @00,@SIZDATD                                        0021
         LR    @01,@11                                             0021
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0021
         BR    @14                                                 0021
*                                                                  0022
*/********************************************************** @XD00153*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - EMPTYLIB                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - BUILD ALL THE 4 TYPES OF BLOCKS, (DATA BLOCK  @XD00153*/
*/*            INDICATORS (4), INDEX BLOCKS (442), OVERFLOW  @XD00153*/
*/*            BLOCKS (180), AND DATA BLOCKS (5774).         @XD00153*/
*/*            CALL 'WRITETRK' ROUTINE TO PUT BLOCKS OUT.    @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @XD00153*/
*                                                                  0022
*EMPTYLIB:                                                         0022
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0022
EMPTYLIB STM   @14,@12,@SA00002                                    0022
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* SET UP BLOCK TO PUT OUT THE 5774 BITS FOR THE         @Y30LB14*/
*   /* DATA BLOCK INDICATORS                                 @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0023
*   DO I=1 TO 256;                  /* SET BITS IN BLOCK TO ALL 1'S
*                                                            @Y30LB14*/
         LA    I,1                                                 0023
@DL00023 DS    0H                                                  0024
*     BLK(I)='FF'X;                 /*                       @Y30LB14*/
         LA    @10,BLK-1(I)                                        0024
         MVI   0(@10),X'FF'                                        0024
*   END;                            /*                       @Y30LB14*/
         AH    I,@CH00042                                          0025
         CH    I,@CH00035                                          0025
         BNH   @DL00023                                            0025
*   DO I=1 TO 2;                    /* PUT OUT 2 FULL BLOCKS OF 1'S
*                                                            @Y30LB14*/
         LA    I,1                                                 0026
@DL00026 DS    0H                                                  0027
*     OBLOCK(I)=BLOCK;              /*                       @Y30LB14*/
         LR    @10,I                                               0027
         MH    @10,@CH00424                                        0027
         L     @05,BUILDPTR(,R4)                                   0027
         ALR   @05,@10                                             0027
         AL    @05,@CF00429                                        0027
         MVC   OBLOCK(256,@05),BLOCK                               0027
*   END;                            /*                       @Y30LB14*/
         AH    I,@CH00042                                          0028
         CH    I,@CH00050                                          0028
         BNH   @DL00026                                            0028
*   BLK(210)='FC'X;                 /* SET HIGH ORDER SIX BITS     0029
*                                                            @Y30LB14*/
         MVI   BLK+209,X'FC'                                       0029
*   DO I=211 TO 256;                /* SET REMAINDER OF BLOCK TO 0 0030
*                                                            @Y30LB14*/
         LA    I,211                                               0030
@DL00030 DS    0H                                                  0031
*     BLK(I)='00'X;                 /*                       @Y30LB14*/
         LA    @10,BLK-1(I)                                        0031
         MVI   0(@10),X'00'                                        0031
*   END;                            /*                       @Y30LB14*/
         AH    I,@CH00042                                          0032
         CH    I,@CH00035                                          0032
         BNH   @DL00030                                            0032
*   OBLOCK(3)=BLOCK;                /* PUT THE BLOCK IN TRACK      0033
*                                                            @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0033
         AL    @10,@CF00430                                        0033
         MVC   OBLOCK(256,@10),BLOCK                               0033
*   DO I=1 TO 210;                  /* SET FIRST PART OF BLK TO 0  0034
*                                                            @Y30LB14*/
         LA    I,1                                                 0034
@DL00034 DS    0H                                                  0035
*     BLK(I)='00'X;                 /*                       @Y30LB14*/
         LA    @10,BLK-1(I)                                        0035
         MVI   0(@10),X'00'                                        0035
*   END;                            /*                       @Y30LB14*/
         AH    I,@CH00042                                          0036
         CH    I,@CH00404                                          0036
         BNH   @DL00034                                            0036
*   OBLOCK(4)=BLOCK;                /* PUT 4TH BLOCK IN TRACK      0037
*                                                            @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0037
         AL    @10,@CF00431                                        0037
         MVC   OBLOCK(256,@10),BLOCK                               0037
*   K=4;                            /* ACCOUNT FOR FIRST 4 BLOCKS IN
*                                      TRACK                 @Y30LB14*/
         LA    K,4                                                 0038
*   ENTRYLEN=8;                     /* LENGTH OF EACH ENTRY IN BLOCK
*                                                            @Y30LB14*/
         MVI   ENTRYLEN,X'08'                                      0039
*   MAXENTPB=31;                    /* MAXIMUM ENTRIES PER BLOCK   0040
*                                                            @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0040
         MVI   MAXENTPB,X'1F'                                      0040
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* PUT OUT THE 442 INDEX BLOCKS                          @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0041
*   DO J=1 TO 442;                  /* DO FOR EACH BLOCK IN AREA   0041
*                                                            @Y30LB14*/
         LA    J,1                                                 0041
@DL00041 DS    0H                                                  0042
*     K=K+1;                        /*                       @Y30LB14*/
         AH    K,@CH00042                                          0042
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN OUT BUFFER     0043
*                                                            @Y30LB14*/
         LR    @10,K                                               0043
         MH    @10,@CH00424                                        0043
         L     @05,BUILDPTR(,R4)                                   0043
         ALR   @05,@10                                             0043
         AL    @05,@CF00429                                        0043
         MVC   OBLOCK(256,@05),BLOCK                               0043
*     IF K=32                       /* TRACK IS FULL         @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    K,@CH00309                                          0044
         BNE   @RF00044                                            0044
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITETRK;            /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITETRK                                        0046
*         K=0;                      /* SET FOR START OF NEXT TRACK 0047
*                                                            @Y30LB14*/
         SLR   K,K                                                 0047
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0049
@RF00044 AH    J,@CH00042                                          0049
         CH    J,@CH00408                                          0049
         BNH   @DL00041                                            0049
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* SET OVERFLOW INDICATOR 'ON' AND PUT OUT 180           @Y30LB14*/
*   /* BLOCKS OF OVERFLOW AREA                               @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0050
*   VFL='1'B;                       /* INDICATE AN OVERFLOW BLOCK  0050
*                                                            @Y30LB14*/
         OI    VFL,B'01000000'                                     0050
*   DO J=1 TO 180;                  /* DO FOR THE OVERFLOW AREA    0051
*                                                            @Y30LB14*/
         LA    J,1                                                 0051
@DL00051 DS    0H                                                  0052
*     K=K+1;                        /* INCREMENT TO THE NEXT BLOCK 0052
*                                                            @Y30LB14*/
         AH    K,@CH00042                                          0052
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN OUT BUFFER     0053
*                                                            @Y30LB14*/
         LR    @10,K                                               0053
         MH    @10,@CH00424                                        0053
         LH    @05,@CH00423                                        0053
         AL    @05,BUILDPTR(,R4)                                   0053
         ST    @10,@TF00001                                        0053
         ALR   @10,@05                                             0053
         AL    @10,@CF00433                                        0053
         MVC   OBLOCK-16(256,@10),BLOCK                            0053
*     IF J=180                      /* LAST BLOCK OF OVERFLOW      0054
*                                                            @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    J,@CH00411                                          0054
         BNE   @RF00054                                            0054
*       OLBII(K)='1'B;              /* LAST OVERFLOW BLOCK   @Y30LB14*/
         AL    @05,@TF00001                                        0055
         AL    @05,@CF00433                                        0055
         OI    OLBII-16(@05),B'00100000'                           0055
*     IF K=32                       /* TRACK FULL            @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
@RF00054 CH    K,@CH00309                                          0056
         BNE   @RF00056                                            0056
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITETRK;            /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITETRK                                        0058
*         K=0;                      /* SET FOR START OF NEXT TRACK 0059
*                                                            @Y30LB14*/
         SLR   K,K                                                 0059
*       END;                        /*                       @Y30LB14*/
*   END;                            /* END DO J LOOP         @Y30LB14*/
*                                                                  0061
@RF00056 AH    J,@CH00042                                          0061
         CH    J,@CH00411                                          0061
         BNH   @DL00051                                            0061
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @XD00153*/
*   /* SET CONTROL BITS TO ZEROS AND PUT OUT 5774            @Y30LB14*/
*   /* BLOCKS OF DATA AREA. THIS AREA ENDS ON A              @Y30LB14*/
*   /* TRACK BOUNDRY.                                        @Y30LB14*/
*   /* ***********************************************       @XD00153*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0062
*   FLAGS=0;                        /* SET FLAGS TO 0'S FOR DATA   0062
*                                      BLOCKS                @Y30LB14*/
         MVI   FLAGS,X'00'                                         0062
*   ENTRYLEN=0;                     /* SET REST OF CONTROL TO ZEROS
*                                                            @Y30LB14*/
         MVI   ENTRYLEN,X'00'                                      0063
*   MAXENTPB=0;                     /*                       @Y30LB14*/
         MVI   MAXENTPB,X'00'                                      0064
*   DO J=1 TO 5774;                 /* DO FOR EACH BLOCK IN AREA   0065
*                                                            @Y30LB14*/
         LA    J,1                                                 0065
@DL00065 DS    0H                                                  0066
*     K=K+1;                        /*                       @Y30LB14*/
         AH    K,@CH00042                                          0066
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN OUT BUFFER     0067
*                                                            @Y30LB14*/
         LR    @10,K                                               0067
         MH    @10,@CH00424                                        0067
         L     @05,BUILDPTR(,R4)                                   0067
         ALR   @05,@10                                             0067
         AL    @05,@CF00429                                        0067
         MVC   OBLOCK(256,@05),BLOCK                               0067
*     IF K=32                       /* TRACK IS FULL         @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    K,@CH00309                                          0068
         BNE   @RF00068                                            0068
*       DO;                         /*                       @Y30LB14*/
*         CALL WRITETRK;            /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITETRK                                        0070
*         K=0;                      /* SET FOR START OF NEXT TRACK 0071
*                                                            @Y30LB14*/
         SLR   K,K                                                 0071
*       END;                        /*                       @Y30LB14*/
*   END;                            /*                       @Y30LB14*/
@RF00068 AH    J,@CH00042                                          0073
         CH    J,@CH00412                                          0073
         BNH   @DL00065                                            0073
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00002 DS    0H                                                  0074
@EF00002 DS    0H                                                  0074
@ER00002 LM    @14,@12,@SA00002                                    0074
         BR    @14                                                 0074
*   END EMPTYLIB;                   /*                       @Y30LB14*/
*                                                                  0076
*/********************************************************** @XD00153*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - WRITETRK                                @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - ENTER DATA ADDRESS FOR DASD (CCHHR), 4-BYTES  @XD00153*/
*/*            OF ZEROS, AND THE TABLE ID ('00100000'B) INTO @XD00153*/
*/*            EACH OF 32 BLOCKS.  THEN CALL 'WRITE' ROUTINE @XD00153*/
*/*            TO CAUSE THE 32 BLOCKS TO BE WRITTEN OUT.     @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @XD00153*/
*                                                                  0076
*WRITETRK:                                                         0076
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITETRK STM   @14,@12,@SA00003                                    0076
*   DO K=1 TO 32;                   /*                       @Y30LB14*/
         LA    K,1                                                 0077
@DL00077 DS    0H                                                  0078
*     OUTREC(K)=K;                  /* SET THE PREFIX RECORD NUM   0078
*                                                            @Y30LB14*/
         LR    @10,K                                               0078
         MH    @10,@CH00424                                        0078
         LH    @05,@CH00423                                        0078
         AL    @05,BUILDPTR(,R4)                                   0078
         LA    @03,0(@10,@05)                                      0078
         AL    @03,@CF00434                                        0078
         STC   K,OUTREC-11(,@03)                                   0078
*     OUTHEAD(K)=OUTHEAD(1);        /* SET THE HEAD NUMBER   @Y30LB14*/
         SLR   @03,@03                                             0079
         IC    @03,OUTHEAD(,@05)                                   0079
         LA    @01,0(@10,@05)                                      0079
         AL    @01,@CF00435                                        0079
         STC   @03,OUTHEAD-10(,@01)                                0079
*     OUTCYL(K)=OUTCYL(1);          /* SET THE CYL NUMBER    @Y30LB14*/
         SLR   @03,@03                                             0080
         IC    @03,OUTCYL(,@05)                                    0080
         LA    @01,0(@10,@05)                                      0080
         AL    @01,@CF00436                                        0080
         STC   @03,OUTCYL-9(,@01)                                  0080
*     OUTFLR(K)=''B;                /* SET FILLER TO ZERO    @Y30LB14*/
         ST    @10,@TF00001                                        0081
         ALR   @10,@05                                             0081
         AL    @10,@CF00437                                        0081
         XC    OUTFLR-12(4,@10),OUTFLR-12(@10)                     0081
*     OUTABLID(K)='00100000'B;      /* SET TABLE ID          @Y30LB14*/
         AL    @05,@TF00001                                        0082
         AL    @05,@CF00438                                        0082
         MVI   OUTABLID-8(@05),B'00100000'                         0082
*   END;                            /*                       @Y30LB14*/
         AH    K,@CH00042                                          0083
         CH    K,@CH00309                                          0083
         BNH   @DL00077                                            0083
*   CALL WRITE;                     /* WRITE OUT THE TRACK   @Y30LB14
*                                                            @Y30LB14*/
         BAL   @14,WRITE                                           0084
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14
*                                                            @Y30LB14*/
@EL00003 DS    0H                                                  0085
@EF00003 DS    0H                                                  0085
@ER00003 LM    @14,@12,@SA00003                                    0085
         BR    @14                                                 0085
*   END WRITETRK;                   /*                       @Y30LB14*/
*                                                                  0087
*/********************************************************** @XD00153*/
*/*                                                          @XD00153*/
*/* PROCEDURE NAME - WRITE                                   @XD00153*/
*/*                                                          @XD00153*/
*/* FUNCTION - THIS ROUTINE LINKS TO ICGDSB06 TO WRITE OUT   @XD00153*/
*/*            THE TRACK OF DATA (32 BLOCKS) JUST SET UP.    @XD00153*/
*/*            ON RETURN, UPDATES THE DATA ADDRESS (CCHHR)   @XD00153*/
*/*            FOR DASD AND RETURNS TO CALLING ROUTINE.      @XD00153*/
*/*                                                          @XD00153*/
*/********************************************************** @XD00153*/
*                                                                  0087
*WRITE:                                                            0087
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITE    STM   @14,@12,@SA00004                                    0087
*   B06ADDR=OUTADDR;                /* SET OUTPUT ADDRESS B06      0088
*                                                            @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0088
         MVC   B06ADDR(3,@10),OUTADDR(@10)                         0088
*   GEN(LINK EP=ICGDSB06);          /* WRITE OUT TRACK       @Y30LB14*/
         LINK EP=ICGDSB06
*   UT2VHEAD=UT2VHEAD+1;            /* INCR TO NEXT TRACK    @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0090
         LA    @05,1                                               0090
         SLR   @15,@15                                             0090
         IC    @15,UT2VHEAD(,@10)                                  0090
         ALR   @15,@05                                             0090
         STC   @15,UT2VHEAD(,@10)                                  0090
*   IF UT2VHEAD>18                  /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   UT2VHEAD(@10),18                                    0091
         BNH   @RF00091                                            0091
*     DO;                           /*                       @Y30LB14*/
*       UT2VHEAD=0;                 /* SET TRACK TO ZERO     @Y30LB14*/
         MVI   UT2VHEAD(@10),X'00'                                 0093
*       UT2VCYL=UT2VCYL+1;          /* INCR TO NEXT CYL      @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@10)                          0094
         AL    @05,@ZT00003                                        0094
         STC   @05,UT2VCYL(,@10)                                   0094
*     END;                          /*                       @Y30LB14*/
*   OUTCYL(1)=UT2VCYL;              /* SET FOR NEXT AVAIL CYL      0096
*                                                            @Y30LB14*/
@RF00091 L     @10,BUILDPTR(,R4)                                   0096
         LH    @05,@CH00423                                        0096
         ALR   @05,@10                                             0096
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0096
*   OUTHEAD(1)=UT2VHEAD;            /* SET FOR NEXT AVAIL HEAD     0097
*                                                            @Y30LB14*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0097
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00004 DS    0H                                                  0098
@EF00004 DS    0H                                                  0098
@ER00004 LM    @14,@12,@SA00004                                    0098
         BR    @14                                                 0098
*   END WRITE;                      /*                       @Y30LB14*/
*                                                                  0100
*/*********************************************************  @XD00153*/
*/*                P A T C H   A R E A                       @XD00153*/
*/*********************************************************  @XD00153*/
*                                                                  0100
*   GENERATE;                                                      0100
*                                                         /*@XD00153*/
PATCHB14 DC 32C'PATCHB14'                                 /*@XD00153*/
*   END ICGDSB14                    /*                       @Y30LB14*/
*                                                                  0101
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA5)                                       */
*                                                                  0101
*       ;                                                          0101
         B     @EL00001                                            0101
@DATA    DS    0H
@CH00042 DC    H'1'
@CH00050 DC    H'2'
@CH00309 DC    H'32'
@CH00411 DC    H'180'
@CH00404 DC    H'210'
@CH00035 DC    H'256'
@CH00424 DC    H'272'
@CH00408 DC    H'442'
@CH00412 DC    H'5774'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSB14 CSECT
         DS    0F
@CF00429 DC    F'13260'
@CF00423 DC    F'13532'
@CH00423 EQU   @CF00423+2
@CF00430 DC    F'14076'
@CF00431 DC    F'14348'
@CF00438 DC    F'-264'
@CF00436 DC    F'-263'
@CF00435 DC    F'-262'
@CF00434 DC    F'-261'
@CF00437 DC    F'-260'
@CF00433 DC    F'-256'
@DATD    DSECT
         DS    0D
BLOCK    DS    CL256
         ORG   BLOCK
FLAGS    DS    FL1
         ORG   FLAGS
VFLTB    DS    BL1
VFL      EQU   FLAGS+0
LBII     EQU   FLAGS+0
ZEROS    EQU   FLAGS+0
         ORG   BLOCK+1
ENTRYLEN DS    FL1
MAXENTPB DS    FL1
USECNT   DS    FL1
RSVD     DS    BL4
REMAINDR DS    BL248
         ORG   BLOCK+256
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSB14 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
K        EQU   @02
J        EQU   @03
I        EQU   @02
R4       EQU   @04
COMTAB   EQU   0
READER   EQU   COMTAB+256
READFLAG EQU   READER+96
PCHBF    EQU   READER+99
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
PRINTER  EQU   COMTAB+464
MESSAGES EQU   COMTAB+810
SPECLMSG EQU   MESSAGES+18
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
BUILDPTR EQU   GENIO+20
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGTODS  EQU   RSG+7
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
NEWCREAT EQU   @NM00017
UPDCREAT EQU   @NM00017
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
BUILDTAB EQU   0
COMB06   EQU   BUILDTAB
B06DCBPT EQU   COMB06
B06BUFPT EQU   COMB06+4
B06ADDR  EQU   COMB06+9
COMB05   EQU   BUILDTAB+12
B05ADDR  EQU   COMB05+9
BUILDGEN EQU   BUILDTAB+24
UT2VCHR  EQU   BUILDGEN+8
OUTADDR  EQU   UT2VCHR+1
UT2VCYL  EQU   OUTADDR
UT2VHEAD EQU   OUTADDR+1
UT2VREC  EQU   OUTADDR+2
UT1VCHR  EQU   BUILDGEN+12
INADDR   EQU   UT1VCHR+1
UT1STUFF EQU   BUILDTAB+40
UT1FLAG  EQU   UT1STUFF+96
UT2STUFF EQU   BUILDTAB+664
UT2DCB   EQU   UT2STUFF
UT2FLAG  EQU   UT2STUFF+96
UT3STUFF EQU   BUILDTAB+1288
UT3FLAG  EQU   UT3STUFF+96
UT2BUFER EQU   BUILDTAB+13532
OUTBUFFR EQU   0
OUTBLOCK EQU   OUTBUFFR
OBLKPRFX EQU   OUTBLOCK+8
OUTABLID EQU   OBLKPRFX
OUTCYL   EQU   OBLKPRFX+1
OUTHEAD  EQU   OBLKPRFX+2
OUTREC   EQU   OBLKPRFX+3
OUTFLR   EQU   OBLKPRFX+4
OBLOCK   EQU   OUTBLOCK+16
OCONTROL EQU   OBLOCK
OFLAGS   EQU   OCONTROL
OLBII    EQU   OFLAGS
SCANBUF  EQU   0
SCANDATA EQU   0
BLK      EQU   BLOCK
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
OVOLID   EQU   OBLOCK+8
ORSVD    EQU   OCONTROL+4
OUSECNT  EQU   OCONTROL+3
OMAXEPB  EQU   OCONTROL+2
OENTRYLN EQU   OCONTROL+1
OZEROS   EQU   OFLAGS
OVFL     EQU   OFLAGS
OVFLTB   EQU   OFLAGS
@NM00024 EQU   OUTBLOCK
TEMPEND  EQU   BUILDTAB+22396
LTRTRANI EQU   BUILDTAB+22316
LTRTRANO EQU   BUILDTAB+22236
UT1BUFER EQU   BUILDTAB+5084
NVERIFY  EQU   BUILDTAB+3500
CVERIFY  EQU   BUILDTAB+1916
@NM00023 EQU   UT3STUFF+624
UT3DDN   EQU   UT3STUFF+616
UT3CCWS  EQU   UT3STUFF+320
UT3IOB   EQU   UT3STUFF+280
UT3ECB   EQU   UT3STUFF+276
UT3JFCB  EQU   UT3STUFF+100
@NM00022 EQU   UT3FLAG
UT3VWERR EQU   UT3FLAG
UT3VOERR EQU   UT3FLAG
UT3VUPDT EQU   UT3FLAG
UT3DCB   EQU   UT3STUFF
UT2DDN   EQU   UT2STUFF+616
UT2CCWS  EQU   UT2STUFF+320
UT2IOB   EQU   UT2STUFF+280
UT2ECB   EQU   UT2STUFF+276
UT2JFCB  EQU   UT2STUFF+100
@NM00021 EQU   UT2FLAG
UT2VCERR EQU   UT2FLAG
UT2VWERR EQU   UT2FLAG
UT2VOERR EQU   UT2FLAG
UT2VUPDT EQU   UT2FLAG
UT1DDN   EQU   UT1STUFF+616
UT1CCWS  EQU   UT1STUFF+320
UT1IOB   EQU   UT1STUFF+280
UT1ECB   EQU   UT1STUFF+276
UT1JFCB  EQU   UT1STUFF+100
@NM00020 EQU   UT1FLAG
UT1VWERR EQU   UT1FLAG
UT1VOERR EQU   UT1FLAG
UT1VUPDT EQU   UT1FLAG
UT1DCB   EQU   UT1STUFF
UT1VREC  EQU   INADDR+2
UT1VHEAD EQU   INADDR+1
UT1VCYL  EQU   INADDR
UT1TABID EQU   UT1VCHR
UT2TABID EQU   UT2VCHR
ADDRBUF2 EQU   BUILDGEN+4
ADDRBUF1 EQU   BUILDGEN
B05REC   EQU   B05ADDR+2
B05HEAD  EQU   B05ADDR+1
B05CYL   EQU   B05ADDR
B05TBLID EQU   COMB05+8
B05BUFPT EQU   COMB05+4
B05DCBPT EQU   COMB05
B06REC   EQU   B06ADDR+2
B06HEAD  EQU   B06ADDR+1
B06CYL   EQU   B06ADDR
B06TBLID EQU   COMB06+8
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
VPAGES   EQU   CREATE+1
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
PABBERG2 EQU   PABFLAGS
@NM00011 EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABEXIST EQU   PABFLAGS
MAPEXIT  EQU   LIB+4
LIBMAP   EQU   LIB+3
LIBDSMID EQU   LIB+2
LIBSIZE  EQU   LIB+1
@NM00009 EQU   LIBBITS
LIBSPEC  EQU   LIBBITS
TODS2    EQU   RSGTODS+1
TODS1    EQU   RSGTODS
RSGSLICE EQU   RSG+3
RSGUDEL  EQU   RSG+2
RSGLDEL  EQU   RSG+1
@NM00008 EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
PRNTBUF2 EQU   SPECLMSG
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
PRNTCARD EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
TERMINAT EQU   MESSAGES+6
WARNING  EQU   MESSAGES+4
MSGNO    EQU   MESSAGES+2
RETCODE  EQU   MESSAGES
OUTBUF2  EQU   PRINTER+225
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SCANLEN  EQU   READER+204
SVEODAD  EQU   READER+200
SVSYNAD2 EQU   READER+196
SAVENCOL EQU   READER+192
SAVESCOL EQU   READER+188
INBUF    EQU   READER+100
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
LASTPARM EQU   READFLAG
ENDSCAN  EQU   READFLAG
PARMBIT  EQU   READFLAG
KEYBIT   EQU   READFLAG
READTERM EQU   READFLAG
READDCB  EQU   READER
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00019 EQU   @EL00001
@ENDDATA EQU   *
         END   ICGDSB14,(C'PLS1255',0603,76337)
