         TITLE 'ICGDSB11 MSC TABLE CREATE, VOLUME INVENTORY TABLE      *
                        '
ICGDSB11 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ICGDSB11  76.337'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0017
*/********************************************************** @Y30LB14*/
*/* INITIALIZATION                                           @Y30LB14*/
*/********************************************************** @Y30LB14*/
*                                                                  0017
*   OUTCYL(1)=UT2VCYL;              /* STARTING CYLINDER     @YD00113*/
         L     @10,BUILDPTR(,R4)                                   0017
         LH    @05,@CH00484                                        0017
         ALR   @05,@10                                             0017
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0017
*   OUTHEAD(1)=UT2VHEAD;            /* STARTING HEAD         @YD00113*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0018
*   OUTREC(1)=UT2VREC;              /* STARTING RECORD       @YD00113*/
         MVC   OUTREC(1,@05),UT2VREC(@10)                          0019
*   B05DCBPT=ADDR(UT1DCB);          /* SYSUT1 DCB            @YD00113*/
         LA    @05,UT1DCB(,@10)                                    0020
         ST    @05,B05DCBPT(,@10)                                  0020
*   B06DCBPT=ADDR(UT2DCB);          /* SYSUT2 DCB            @YD00113*/
         LA    @05,UT2DCB(,@10)                                    0021
         ST    @05,B06DCBPT(,@10)                                  0021
*   B06BUFPT=ADDR(UT2BUFER);        /* WRITE BUFFER ADDR     @YD00113*/
         LR    @05,@10                                             0022
         AL    @05,@CF00484                                        0022
         ST    @05,B06BUFPT(,@10)                                  0022
*   B05BUFPT=ADDR(UT1BUFER);        /* READ BUFFER ADDR      @YD00113*/
         LR    @05,@10                                             0023
         AL    @05,@CF00486                                        0023
         ST    @05,B05BUFPT(,@10)                                  0023
*   STOPSCAN='0'B;                  /* TERMINATING ERROR     @YD00113*/
         NI    STOPSCAN,B'01111111'                                0024
*   MAX=57;                         /* SET FOR 57 TRACKS     @YD00113*/
*                                                                  0025
         LA    MAX,57                                              0025
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB14*/
*   /* IF A COMPLETELY NEW LIBRARY IS TO BE BUILT            @Y30LB14*/
*   /* FROM SCRATCH, THEN 'EMPTYLIB' IS CALLED.              @Y30LB14*/
*   /* IF A LIBRARY IS BEING UPDATED THEN THE CON-           @Y30LB14*/
*   /* TENTS OF THE OLD LIBRARY IS COPIED INTO THE           @Y30LB14*/
*   /* NEW LIBRARY.                                          @Y30LB14*/
*   /* ***********************************************       @Y30LB14*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0026
*   IF NEWCREAT='1'B                /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         TM    NEWCREAT(R4),B'01000000'                            0026
         BNO   @RF00026                                            0026
*     CALL EMPTYLIB;                /* COMPLETELY NEW LIB    @YD00113*/
         BAL   @14,EMPTYLIB                                        0027
*   IF UPDCREAT='1'B                /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
@RF00026 TM    UPDCREAT(R4),B'00100000'                            0028
         BNO   @RF00028                                            0028
*     CALL COPYLIB;                 /* COPY CURRENT LIB      @YD00113
*                                                            @Y30LB14*/
*                                                                  0029
         BAL   @14,COPYLIB                                         0029
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB14*/
*   /* RETURN TO THE BUILD MODULE - ICGDSBLD                 @Y30LB14*/
*   /* ***********************************************       @Y30LB14*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0030
*   RETURN;                         /* RETURN TO BUILD       @Y30LB14*/
@EL00001 L     @13,4(,@13)                                         0030
@EF00001 L     @00,@SIZDATD                                        0030
         LR    @01,@11                                             0030
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0030
         BR    @14                                                 0030
*                                                                  0031
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - COPYLIB                                 @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE READS THE CURRENT VOLUME       @YD00113*/
*/*            TABLE ONE TRACK AT A TIME AND COPIES THE DATA @YD00113*/
*/*            PORTION TO THE OUTPUT BUFFER.  THE CONTROL    @YD00113*/
*/*            PORTION IS ALSO COPIED - THE POINTER TO THE   @YD00113*/
*/*            NEXT OVERFLOW TRACK IS RECALCULATED.          @YD00113*/
*/*            THE PREFIX PORTION IS RECALCULATED IN THE     @YD00113*/
*/*            SUB-PROCEDURE 'WRITETRK'.                     @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0031
*COPYLIB:                                                          0031
*   PROCEDURE;                      /*                       @Y30LB14*/
COPYLIB  STM   @14,@12,@SA00002                                    0031
*   DO I=1 TO MAX;                  /*                       @Y30LB14*/
*                                                                  0032
         LA    I,1                                                 0032
         B     @DE00032                                            0032
@DL00032 DS    0H                                                  0033
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* READ IN A COMPLETE TRACK FROM THE OLD               @Y30LB14*/
*     /* LIBRARY AND CHECK IF IT IS A VOLUME                 @Y30LB14*/
*     /* INVENTORY LIST TRACK.                               @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0033
*     B05ADDR=INADDR;               /* SET READ ADDRESS      @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0033
         MVC   B05ADDR(3,@10),INADDR(@10)                          0033
*     GEN(LINK EP=ICGDSB05);        /* READ IN A TRACK       @Y30LB14*/
         LINK EP=ICGDSB05
*     CALL IDCHECK;                 /* CHECK TRACK ID        @Y30LB14*/
         BAL   @14,IDCHECK                                         0035
*     IF STOPSCAN='1'B              /*                       @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         TM    STOPSCAN,B'10000000'                                0036
         BO    @RT00036                                            0036
*       RETURN;                     /* RETURN TO CALLER      @Y30LB14*/
*                                                                  0037
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* SET TO NEXT TRACK OF OLD TABLE                      @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0038
*     UT1VHEAD=UT1VHEAD+1;          /* INCREMENT CNT +1      @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0038
         LA    @02,1                                               0038
         SLR   @15,@15                                             0038
         IC    @15,UT1VHEAD(,@10)                                  0038
         ALR   @15,@02                                             0038
         STC   @15,UT1VHEAD(,@10)                                  0038
*     IF UT1VHEAD>18                /* ON NEXT CYLINDER      @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CLI   UT1VHEAD(@10),18                                    0039
         BNH   @RF00039                                            0039
*       DO;                         /*                       @Y30LB14*/
*         UT1VHEAD=0;               /* SET TO TRACK 0        @Y30LB14*/
         MVI   UT1VHEAD(@10),X'00'                                 0041
*         UT1VCYL=UT1VCYL+1;        /* INCR TO NEXT CYL      @Y30LB14*/
         MVC   @ZT00003+3(1),UT1VCYL(@10)                          0042
         AL    @02,@ZT00003                                        0042
         STC   @02,UT1VCYL(,@10)                                   0042
*       END;                        /*                       @Y30LB14*/
*                                                                  0043
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* COPY INFORMATION FROM INPUT BUFFER TO OUTPUT        @Y30LB14*/
*     /* BUFFER                                              @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0044
*     DO J=1 TO 32;                 /*                       @Y30LB14*/
@RF00039 LA    J,1                                                 0044
@DL00044 DS    0H                                                  0045
*       OBLKPRFX(J)=INBLKPFX(J);    /* MOVE INPUT TRK        @Y30LB14*/
         LR    @10,J                                               0045
         MH    @10,@CH00485                                        0045
         L     @15,BUILDPTR(,R4)                                   0045
         LH    @14,@CH00484                                        0045
         ALR   @14,@15                                             0045
         ST    @10,@TF00001                                        0045
         ALR   @10,@14                                             0045
         AL    @10,@CF00495                                        0045
         LR    @09,J                                               0045
         MH    @09,@CH00487                                        0045
         LH    @08,@CH00486                                        0045
         ALR   @08,@15                                             0045
         ST    @09,@TF00002                                        0045
         ALR   @09,@08                                             0045
         AL    @09,@CF00495                                        0045
         MVC   OBLKPRFX-8(8,@10),INBLKPFX(@09)                     0045
*       OBLOCK(J)=IBLOCK(J);        /*                       @Y30LB14
*                                                            @Y30LB14*/
*                                                                  0046
         LR    @10,@14                                             0046
         AL    @10,@TF00001                                        0046
         AL    @10,@CF00496                                        0046
         AL    @08,@TF00002                                        0046
         AL    @08,@CF00496                                        0046
         MVC   OBLOCK-16(256,@10),IBLOCK-8(@08)                    0046
*       /*************************************************************/
*       /*                                                           */
*       /* *******************************************       @Y30LB14*/
*       /* CHECK IF THIS BLOCK IS AN OVERFLOW BLOCK.         @Y30LB14*/
*       /* IF IT IS, THEN PUT IN POINTER TO NEXT             @Y30LB14*/
*       /* TRACK IN THE NEW TABLE.                           @Y30LB14*/
*       /* *******************************************       @Y30LB14*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0047
*       IF OVERFLOW(J)='1'B         /* OVERFLOW BLOCK?       @Y30LB14*/
*         THEN                      /*                       @Y30LB14*/
         LR    @10,@14                                             0047
         AL    @10,@TF00001                                        0047
         AL    @10,@CF00496                                        0047
         TM    OVERFLOW-16(@10),B'00000001'                        0047
         BNO   @RF00047                                            0047
*         DO;                       /*                       @Y30LB14*/
*           ORECORD(J)=1;           /* SET FOR RECORD 1      @Y30LB14*/
         LA    @10,1                                               0049
         L     @01,@TF00001                                        0049
         AL    @01,@CF00497                                        0049
         STC   @10,ORECORD-23(@01,@14)                             0049
*           OHEAD(J)=UT2VHEAD+1;    /*                       @Y30LB14*/
         SLR   @09,@09                                             0050
         IC    @09,UT2VHEAD(,@15)                                  0050
         ALR   @09,@10                                             0050
         L     @08,@TF00001                                        0050
         AL    @08,@CF00498                                        0050
         STC   @09,OHEAD-22(@08,@14)                               0050
*           IF OHEAD(J)>18          /*                       @Y30LB14*/
*             THEN                  /*                       @Y30LB14*/
         CH    @09,@CH00454                                        0051
         BNH   @RF00051                                            0051
*             DO;                   /*                       @Y30LB14*/
*               OHEAD(J)=0;         /*                       @Y30LB14*/
         SLR   @09,@09                                             0053
         L     @08,@TF00001                                        0053
         AL    @08,@CF00498                                        0053
         STC   @09,OHEAD-22(@08,@14)                               0053
*               OCYL(J)=UT2VCYL+1;  /*                       @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@15)                          0054
         AL    @10,@ZT00003                                        0054
         L     @15,@TF00001                                        0054
         AL    @14,@CF00499                                        0054
         STC   @10,OCYL-21(@15,@14)                                0054
*             END;                  /*                       @Y30LB14*/
*           ELSE                    /*                       @Y30LB14*/
*             OCYL(J)=UT2VCYL;      /*                       @Y30LB14*/
         B     @RC00051                                            0056
@RF00051 LR    @10,J                                               0056
         MH    @10,@CH00485                                        0056
         L     @15,BUILDPTR(,R4)                                   0056
         SLR   @14,@14                                             0056
         IC    @14,UT2VCYL(,@15)                                   0056
         AL    @15,@CF00500                                        0056
         STC   @14,OCYL(@10,@15)                                   0056
*         END;                      /*                       @Y30LB14*/
@RC00051 DS    0H                                                  0058
*     END;                          /* END DO J LOOP         @Y30LB14*/
*                                                                  0058
@RF00047 AH    J,@CH00042                                          0058
         CH    J,@CH00309                                          0058
         BNH   @DL00044                                            0058
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* IF IT IS THE LAST TRACK IN THE LIBRARY, THEN        @Y30LB14*/
*     /* PUT OUT ZEROS IN THE POINTER TO THE NEXT            @Y30LB14*/
*     /* TRACK.                                              @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0059
*     IF I=MAX                      /* PUT OUT LAST TRACK    @Y30LB14*/
*       THEN                        /* IN THE TABLE          @Y30LB14*/
         CR    I,MAX                                               0059
         BNE   @RF00059                                            0059
*       DO J=1 TO 32;               /*                       @Y30LB14*/
         LA    J,1                                                 0060
@DL00060 DS    0H                                                  0061
*         OHEAD(J)=0;               /*                       @Y30LB14*/
         SLR   @10,@10                                             0061
         LR    @15,J                                               0061
         MH    @15,@CH00485                                        0061
         LH    @14,@CH00484                                        0061
         AL    @14,BUILDPTR(,R4)                                   0061
         LA    @01,0(@15,@14)                                      0061
         AL    @01,@CF00498                                        0061
         STC   @10,OHEAD-22(,@01)                                  0061
*         OCYL(J)=0;                /*                       @Y30LB14*/
         LA    @01,0(@15,@14)                                      0062
         AL    @01,@CF00499                                        0062
         STC   @10,OCYL-21(,@01)                                   0062
*         ORECORD(J)=0;             /*                       @Y30LB14*/
         AL    @14,@CF00497                                        0063
         STC   @10,ORECORD-23(@15,@14)                             0063
*       END;                        /*                       @Y30LB14*/
*                                                                  0064
         AH    J,@CH00042                                          0064
         CH    J,@CH00309                                          0064
         BNH   @DL00060                                            0064
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* PUT IN THE TRACK AND CYLINDER ADDRESS IN THE        @Y30LB14*/
*     /* PREFIX OF THE BLOCK IN ALL 32 BLOCKS OF THE         @Y30LB14*/
*     /* TRACK.                                              @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0065
*     DO J=1 TO 32;                 /* SET ADDR FOR ACTUAL   @Y30LB14*/
@RF00059 LA    J,1                                                 0065
@DL00065 DS    0H                                                  0066
*       OUTREC(J)=J;                /* VCHR FOR EACH BLOCK   @Y30LB14*/
         LR    @10,J                                               0066
         MH    @10,@CH00485                                        0066
         L     @15,BUILDPTR(,R4)                                   0066
         LH    @14,@CH00484                                        0066
         ALR   @14,@15                                             0066
         LA    @01,0(@10,@14)                                      0066
         AL    @01,@CF00501                                        0066
         STC   J,OUTREC-11(,@01)                                   0066
*       OUTHEAD(J)=UT2VHEAD;        /* IN THIS TRK           @Y30LB14*/
         SLR   @09,@09                                             0067
         IC    @09,UT2VHEAD(,@15)                                  0067
         LA    @08,0(@10,@14)                                      0067
         AL    @08,@CF00502                                        0067
         STC   @09,OUTHEAD-10(,@08)                                0067
*       OUTCYL(J)=UT2VCYL;          /*                       @Y30LB14*/
         SLR   @09,@09                                             0068
         IC    @09,UT2VCYL(,@15)                                   0068
         AL    @14,@CF00503                                        0068
         STC   @09,OUTCYL-9(@10,@14)                               0068
*     END;                          /*                       @Y30LB14*/
*                                                                  0069
         AH    J,@CH00042                                          0069
         CH    J,@CH00309                                          0069
         BNH   @DL00065                                            0069
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* WRITE OUT THE TRACK AND UPDATE THE TRACK AND        @Y30LB14*/
*     /* CYLINDER TO THE NEXT AVAILABLE.                     @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0070
*     CALL WRITE;                   /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITE                                           0070
*   END;                            /* END DO I LOOP         @Y30LB14*/
         AH    I,@CH00042                                          0071
@DE00032 CR    I,MAX                                               0071
         BNH   @DL00032                                            0071
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00002 DS    0H                                                  0072
@EF00002 DS    0H                                                  0072
@ER00002 LM    @14,@12,@SA00002                                    0072
         BR    @14                                                 0072
*   END COPYLIB;                    /*                       @Y30LB14*/
         B     @EL00002                                            0073
*                                                                  0074
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - EMPTYLIB                                @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE FIRST INITIALIZES 'BLOCK' IN   @YD00113*/
*/*            LOCAL STORAGE FOR THIS MODULE TO INDICATE     @YD00113*/
*/*            A COMPLETELY UNUSED VOLUME INVENTORY RECORD.  @YD00113*/
*/*            THEN, THIS BLOCK IMAGE IS COPIED 442 TIMES    @YD00113*/
*/*            FOR EACH HASH AREA TO THE OUTPUT BUFFER.      @YD00113*/
*/*            DURING THIS COPY, THE HASH AREA FLAGS ARE     @YD00113*/
*/*            MODIFIED TO INDICATE WHICH HASH AREA IS       @YD00113*/
*/*            BEING CONSTRUCTED.  FINALLY THE HASH AREA     @YD00113*/
*/*            FLAGS ARE SET OFF AND THE OVERFLOW AREA FLAG  @YD00113*/
*/*            IS SET ON AND THE IMAGE IS COPIED AN          @YD00113*/
*/*            ADDITIONAL 498 TIMES TO BUILD THE OVERFLOW    @YD00113*/
*/*            BLOCKS.  THE OVERFLOW BLOCKS CONTAIN A CHR    @YD00113*/
*/*            POINTER TO THE NEXT OVERFLOW TRACK            @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0074
*EMPTYLIB:                                                         0074
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0074
EMPTYLIB STM   @14,@12,@SA00003                                    0074
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* BUILD THE IMAGE OF A VOLUME INVENTORY RECORD          @YD00113*/
*   /* IN 'BLOCK'                                            @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0075
*   LTB='0'B;                       /* LAST TABLE BLOCK      @Y30LB14*/
*   LAB='1'B;                       /* LAST ACTIVE BLOCK     @Y30LB14*/
*   EOTB='0'B;                      /* END OF TRACK BLOCK    @Y30LB14*/
*   LTIT='1'B;                      /* LAST TRACK IN TABLE   @Y30LB14*/
*   BLKUSE='0'B;                    /* BLOCK USE BIT         @Y30LB14*/
         OI    LAB,B'01010000'                                     0079
         NI    LTB,B'01010111'                                     0079
*   HASH='00'B;                     /* HASH AREA IDENTIFIER  @Y30LB14*/
         NI    HASH,B'11111001'                                    0080
*   VERFLOW='0'B;                   /* OVERFLOW INDICATOR    @YD00113*/
         NI    VERFLOW,B'11111110'                                 0081
*   ENTRYLEN=12;                    /* LENGTH OF EACH ENTRY  @YD00113*/
         MVI   ENTRYLEN,X'0C'                                      0082
*   MAXENTPB=20;                    /* MAX ENTRIES PER BLOCK @YD00113*/
         MVI   MAXENTPB,X'14'                                      0083
*   USECNT=0;                       /* USE COUNT             @Y30LB14*/
         MVI   USECNT,X'00'                                        0084
*   ZCHR=''B;                       /* VOL, CHR SET TO ZERO  @YD00113*/
         XC    ZCHR(4),ZCHR                                        0085
*   REMAINDR=''B;                   /* ZERO ENTRY PORTION    @YD00113*/
*                                                                  0086
         XC    REMAINDR(248),REMAINDR                              0086
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* INITIALIZE THE THREE HASH AREAS (442 BLOCKS           @YD00113*/
*   /* EACH)                                                 @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0087
*   K=0;                            /*                       @Y30LB14*/
         SLR   K,K                                                 0087
*   DO I=1 TO 3;                    /* DO FOR THE THREE HASH AREAS 0088
*                                                            @Y30LB14*/
*                                                                  0088
         LA    I,1                                                 0088
@DL00088 DS    0H                                                  0089
*     /***************************************************************/
*     /*                                                             */
*     /* *********************************************       @Y30LB14*/
*     /* ADDING 2 THE THE FLAGS FIELD INCREMENTS THE         @Y30LB14*/
*     /* HASH AREA INDICATOR BY 1                            @Y30LB14*/
*     /* *********************************************       @Y30LB14*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0089
*     FLAGS=FLAGS+2;                /* SET PROPER HASH AREA  @Y30LB14*/
         LA    @10,2                                               0089
         MVC   @ZT00003+3(1),FLAGS                                 0089
         AL    @10,@ZT00003                                        0089
         STC   @10,FLAGS                                           0089
*     DO J=1 TO 442;                /* FOR EACH BLOCK IN AREA      0090
*                                                            @YD00113*/
         LA    J,1                                                 0090
@DL00090 DS    0H                                                  0091
*       K=K+1;                      /*                       @Y30LB14*/
         AH    K,@CH00042                                          0091
*       OBLOCK(K)=BLOCK;            /* BLOCK TO UT2BUFER     @YD00113*/
         LR    @10,K                                               0092
         MH    @10,@CH00485                                        0092
         L     @01,BUILDPTR(,R4)                                   0092
         ALR   @01,@10                                             0092
         AL    @01,@CF00500                                        0092
         MVC   OBLOCK(256,@01),BLOCK                               0092
*       IF K=32                     /* TRACK IS FULL         @Y30LB14*/
*         THEN                      /*                       @Y30LB14*/
         CH    K,@CH00309                                          0093
         BNE   @RF00093                                            0093
*         DO;                       /*                       @Y30LB14*/
*           CALL WRITETRK;          /* WRITE OUT THE TRACK   @Y30LB14*/
         BAL   @14,WRITETRK                                        0095
*           K=0;                    /* SET FOR NEXT TRACK    @YD00113*/
         SLR   K,K                                                 0096
*         END;                      /*                       @Y30LB14*/
*     END;                          /*                       @Y30LB14*/
@RF00093 AH    J,@CH00042                                          0098
         CH    J,@CH00463                                          0098
         BNH   @DL00090                                            0098
*   END;                            /*                       @Y30LB14*/
*                                                                  0099
         AH    I,@CH00042                                          0099
         CH    I,@CH00048                                          0099
         BNH   @DL00088                                            0099
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* MODIFY THE IMAGE IN 'BLOCK' TO INDICATE DATA          @YD00113*/
*   /* APPROPRIATE TO OVERFLOW BLOCKS.                       @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0100
*   HASH='00'B;                     /* HASH INDICATORS OFF   @YD00113*/
         NI    HASH,B'11111001'                                    0100
*   VERFLOW='1'B;                   /* TURN ON OVERFLOW BIT  @Y30LB14*/
*   LTIT='0'B;                      /* LAST TRK IN TABLE OFF @YD00113*/
         OI    VERFLOW,B'00000001'                                 0102
         NI    LTIT,B'11101111'                                    0102
*   ZERO=0;                         /* SET TO ZERO           @Y30LB14*/
         MVI   ZERO,X'00'                                          0103
*   CYLINDER=UT2VCYL;               /* SET CURRENT CYLINDER  @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0104
         MVC   CYLINDER(1),UT2VCYL(@10)                            0104
*   CALL SETTRACK;                  /* SET TO NEXT TRACK     @Y30LB14*/
         BAL   @14,SETTRACK                                        0105
*   RECORD=1;                       /* FIRST RECORD ON TRK   @Y30LB14*/
*                                                                  0106
         MVI   RECORD,X'01'                                        0106
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @Y30LB14*/
*   /* CAUTION - - THE SIZE OF THE OVERFLOW AREA IS          @Y30LB14*/
*   /* 498 BLOCKS. THIS CAUSES THE TABLE TO END ON A         @Y30LB14*/
*   /* TRACK BOUNDRY. IF THE SIZE SHOULD BE CHANGED,         @Y30LB14*/
*   /* SUCH THAT IT DOES NOT END ON A TRACK BOUNDRY,         @Y30LB14*/
*   /* THE THE FOLLOWING CODE WILL NOT WORK.                 @Y30LB14*/
*   /* ***********************************************       @Y30LB14*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0107
*   DO J=1 TO 498;                  /* FOR THE OVERFLOW AREA @YD00113*/
         LA    J,1                                                 0107
@DL00107 DS    0H                                                  0108
*     K=K+1;                        /* INCREMENT TO NEXT BLK @YD00113*/
         LA    @10,1                                               0108
         ALR   K,@10                                               0108
*     OBLOCK(K)=BLOCK;              /* PUT BLOCK IN UT2BUFER @YD00113*/
         LR    @05,K                                               0109
         MH    @05,@CH00485                                        0109
         LH    @15,@CH00484                                        0109
         AL    @15,BUILDPTR(,R4)                                   0109
         ALR   @05,@15                                             0109
         AL    @05,@CF00496                                        0109
         MVC   OBLOCK-16(256,@05),BLOCK                            0109
*     IF K=32                       /* TRACK FULL            @Y30LB14*/
*       THEN                        /*                       @Y30LB14*/
         CH    K,@CH00309                                          0110
         BNE   @RF00110                                            0110
*       DO;                         /*                       @Y30LB14*/
*         OEOTB(32)='1'B;           /* SET END OF TRK BLOCK  @YD00113*/
         AL    @15,@CF00488                                        0112
         OI    OEOTB(@15),B'00100000'                              0112
*         IF J=498                  /* LAST TRACK IN TABLE   @YD00113*/
*           THEN                    /*                       @Y30LB14*/
         CH    J,@CH00466                                          0113
         BNE   @RF00113                                            0113
*           DO;                     /*                       @Y30LB14*/
*             DO K=1 TO 32;         /* FOR ALL 32 BLOCKS     @Y30LB14*/
         LR    K,@10                                               0115
@DL00115 DS    0H                                                  0116
*               OLTIT(K)='1'B;      /* LAST TRK IN TBL       @Y30LB14*/
         LR    @10,K                                               0116
         MH    @10,@CH00485                                        0116
         LH    @05,@CH00484                                        0116
         AL    @05,BUILDPTR(,R4)                                   0116
         ST    @10,@TF00001                                        0116
         ALR   @10,@05                                             0116
         AL    @10,@CF00496                                        0116
         OI    OLTIT-16(@10),B'00010000'                           0116
*               NEXTVCHR(K)=''B;    /* 0 NEXT TRK PTR        @Y30LB14*/
         AL    @05,@TF00001                                        0117
         AL    @05,@CF00508                                        0117
         XC    NEXTVCHR-20(4,@05),NEXTVCHR-20(@05)                 0117
*             END;                  /*                       @Y30LB14*/
         AH    K,@CH00042                                          0118
         CH    K,@CH00309                                          0118
         BNH   @DL00115                                            0118
*             OLTB(32)='1'B;        /* LAST TABLE BLOCK      @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0119
         AL    @10,@CF00509                                        0119
         OI    OLTB(@10),B'10000000'                               0119
*           END;                    /*                       @Y30LB14*/
*         CALL WRITETRK;            /* WRITE OUT THE TRACK   @Y30LB14*/
@RF00113 BAL   @14,WRITETRK                                        0121
*         K=0;                      /* START OF NEXT TRACK   @YD00113*/
         SLR   K,K                                                 0122
*         CALL SETTRACK;            /* SET FOR NEXT TRACK    @Y30LB14*/
         BAL   @14,SETTRACK                                        0123
*       END;                        /*                       @Y30LB14*/
*   END;                            /* END DO J LOOP         @Y30LB14*/
@RF00110 AH    J,@CH00042                                          0125
         CH    J,@CH00466                                          0125
         BNH   @DL00107                                            0125
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00003 DS    0H                                                  0126
@EF00003 DS    0H                                                  0126
@ER00003 LM    @14,@12,@SA00003                                    0126
         BR    @14                                                 0126
*   END EMPTYLIB;                   /*                       @Y30LB14*/
*                                                                  0128
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - SETTRACK                                @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE CALCULATE THE CHR OF THE NEXT  @YD00113*/
*/*            SEQUENTIAL OVERFLAW TRACK.                    @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0128
*SETTRACK:                                                         0128
*   PROCEDURE;                      /*                       @Y30LB14*/
SETTRACK STM   @14,@12,12(@13)                                     0128
*   TRACK=UT2VHEAD+1;               /* SET FOR NEXT TRACK    @Y30LB14*/
         LA    @10,1                                               0129
         L     @05,BUILDPTR(,R4)                                   0129
         SLR   @15,@15                                             0129
         IC    @15,UT2VHEAD(,@05)                                  0129
         ALR   @15,@10                                             0129
         STC   @15,TRACK                                           0129
*   IF TRACK>18                     /* CYLINDER OVERFLOWED   @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   TRACK,18                                            0130
         BNH   @RF00130                                            0130
*     DO;                           /*                       @Y30LB14*/
*       TRACK=0;                    /* SET TRACK TO ZERO     @Y30LB14*/
         MVI   TRACK,X'00'                                         0132
*       CYLINDER=UT2VCYL+1;         /* SET TO NEXT CYL       @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@05)                          0133
         AL    @10,@ZT00003                                        0133
         STC   @10,CYLINDER                                        0133
*     END;                          /*                       @Y30LB14*/
*   END SETTRACK;                   /*                       @Y30LB14*/
@EL00004 DS    0H                                                  0135
@EF00004 DS    0H                                                  0135
@ER00004 LM    @14,@12,12(@13)                                     0135
         BR    @14                                                 0135
*                                                                  0136
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - IDCHECK                                 @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE CHECKS THE TABLE ID OF THE     @YD00113*/
*/*            INPUT TRACK JUST READ TO INSURE THAT THE      @YD00113*/
*/*            TRACK IS A TRACK OF THE TRANSIENT VOLUME      @YD00113*/
*/*            TABLE.  IF THE TRACK IS NOT A TRACK OF THE    @YD00113*/
*/*            TRANSIENT VOLUME TABLE, MESSAGE ICG410I IS    @YD00113*/
*/*            WRITTEN                                       @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0136
*IDCHECK:                                                          0136
*   PROCEDURE;                      /*                       @Y30LB14*/
*                                                                  0136
IDCHECK  STM   @14,@12,@SA00005                                    0136
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********************************************       @YD00113*/
*   /* IF THE TABLE ID OF THE INPUT TRACK JUST READ          @YD00113*/
*   /* IS NOT '40'X, WRITE MESSAGE 'ICG410I                  @YD00113*/
*   /* NON-MATCH ON INPUT TABLE ID FOR ICGDSB11'             @YD00113*/
*   /* AND SET RETURN CODE TO 12.                            @YD00113*/
*   /* ***********************************************       @YD00113*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0137
*   IF INTABLID(1)^='01000000'B     /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0137
         AL    @10,@CF00486                                        0137
         CLI   INTABLID(@10),B'01000000'                           0137
         BE    @RF00137                                            0137
*     DO;                           /*                       @Y30LB14*/
*       OUTBUF2(1:49)=MSG410I;      /*                       @Y30LB14*/
         MVC   OUTBUF2(49,R4),MSG410I                              0139
*       RETCODE=12;                 /*                       @Y30LB14*/
         MVC   RETCODE(2,R4),@CH00128                              0140
*       CALL PUTIT1;                /* PUT OUT MESSAGE       @Y30LB14*/
         BAL   @14,PUTIT1                                          0141
*     END;                          /*                       @Y30LB14*/
*   RETURN;                         /*                       @Y30LB14*/
@EL00005 DS    0H                                                  0143
@EF00005 DS    0H                                                  0143
@ER00005 LM    @14,@12,@SA00005                                    0143
         BR    @14                                                 0143
*   END IDCHECK;                    /*                       @Y30LB14*/
         B     @EL00005                                            0144
*                                                                  0145
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - WRITETRK                                @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE PLACES THE 8 BYTES OF PREFIX   @YD00113*/
*/*            INFORMATION IN THE PREFIX AREA OF EACH OF     @YD00113*/
*/*            THE 32 RECORDS THAT WILL BE WRITTEN TO THE    @YD00113*/
*/*            OUTPUT DATA SETS.  THE PREFIX INFORMATION     @YD00113*/
*/*            CONSISTS OF TABLE IDENTIFICATION ('40'X),     @YD00113*/
*/*            VIRTUAL ADDRESS TO WHICH THE RECORD IS TO BE  @YD00113*/
*/*            WRITTEN (CYLINDER AND HEAD ARE CONSTANT FOR   @YD00113*/
*/*            TRACK AND RECORD INDICATES RELATIVE RECORD    @YD00113*/
*/*            POSITION) FOLLOWED BY 4 BYTES OF BINARY       @YD00113*/
*/*            ZEROS.  THE PROCEDURE THEN CALLS THE          @YD00113*/
*/*            PROCEDURE 'WRITE' TO PERFORM THE ACTUAL WRITE @YD00113*/
*/*            OPERATION.                                    @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0145
*WRITETRK:                                                         0145
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITETRK STM   @14,@12,@SA00006                                    0145
*   DO K=1 TO 32;                   /*                       @Y30LB14*/
         LA    K,1                                                 0146
@DL00146 DS    0H                                                  0147
*     OUTREC(K)=K;                  /* SET PREFIX RECORD NUM @YD00113*/
         LR    @10,K                                               0147
         MH    @10,@CH00485                                        0147
         LH    @05,@CH00484                                        0147
         AL    @05,BUILDPTR(,R4)                                   0147
         LA    @02,0(@10,@05)                                      0147
         AL    @02,@CF00501                                        0147
         STC   K,OUTREC-11(,@02)                                   0147
*     OUTHEAD(K)=OUTHEAD(1);        /* SET THE HEAD NUMBER   @Y30LB14*/
         SLR   @02,@02                                             0148
         IC    @02,OUTHEAD(,@05)                                   0148
         LA    @01,0(@10,@05)                                      0148
         AL    @01,@CF00502                                        0148
         STC   @02,OUTHEAD-10(,@01)                                0148
*     OUTCYL(K)=OUTCYL(1);          /* SET THE CYL NUMBER    @Y30LB14*/
         SLR   @02,@02                                             0149
         IC    @02,OUTCYL(,@05)                                    0149
         LA    @01,0(@10,@05)                                      0149
         AL    @01,@CF00503                                        0149
         STC   @02,OUTCYL-9(,@01)                                  0149
*     OUTFLR(K)=''B;                /* SET FILLER TO ZERO    @Y30LB14*/
         ST    @10,@TF00001                                        0150
         ALR   @10,@05                                             0150
         AL    @10,@CF00511                                        0150
         XC    OUTFLR-12(4,@10),OUTFLR-12(@10)                     0150
*     OUTABLID(K)='01000000'B;      /* SET TABLE ID          @Y30LB14*/
         AL    @05,@TF00001                                        0151
         AL    @05,@CF00495                                        0151
         MVI   OUTABLID-8(@05),B'01000000'                         0151
*   END;                            /*                       @Y30LB14*/
         AH    K,@CH00042                                          0152
         CH    K,@CH00309                                          0152
         BNH   @DL00146                                            0152
*   CALL WRITE;                     /* WRITE OUT THE TRACK   @Y30LB14
*                                                            @Y30LB14*/
         BAL   @14,WRITE                                           0153
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14
*                                                            @Y30LB14*/
@EL00006 DS    0H                                                  0154
@EF00006 DS    0H                                                  0154
@ER00006 LM    @14,@12,@SA00006                                    0154
         BR    @14                                                 0154
*   END WRITETRK;                   /*                       @Y30LB14*/
*                                                                  0156
*/********************************************************** @Y30LB14*/
*/*                                                          @YD00113*/
*/* PROCEDURE NAME - WRITE                                   @YD00113*/
*/*                                                          @YD00113*/
*/* FUNCTION - THIS PROCEDURE INITAILIZES THE POINTER TO     @YD00113*/
*/*            THE DATA TO BE WRITTEN AND CALLS ICGDSB06 TO  @YD00113*/
*/*            PERFORM THE ACTUAL WRITE.  IT THEN CALCULATES @YD00113*/
*/*            THE CYLINDER AND TRACK ADDRESS OF THE NEXT    @YD00113*/
*/*            TRACK TO BE WRITTEN.                          @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @Y30LB14*/
*                                                                  0156
*WRITE:                                                            0156
*   PROCEDURE;                      /*                       @Y30LB14*/
WRITE    STM   @14,@12,@SA00007                                    0156
*   B06ADDR=OUTADDR;                /* OUTPUT ADDRESS FOR B06      0157
*                                                            @YD00113*/
         L     @10,BUILDPTR(,R4)                                   0157
         MVC   B06ADDR(3,@10),OUTADDR(@10)                         0157
*   GEN(LINK EP=ICGDSB06);          /* WRITE OUT TRACK       @Y30LB14*/
         LINK EP=ICGDSB06
*   UT2VHEAD=UT2VHEAD+1;            /* INCR TO NEXT TRACK    @Y30LB14*/
         L     @10,BUILDPTR(,R4)                                   0159
         LA    @05,1                                               0159
         SLR   @15,@15                                             0159
         IC    @15,UT2VHEAD(,@10)                                  0159
         ALR   @15,@05                                             0159
         STC   @15,UT2VHEAD(,@10)                                  0159
*   IF UT2VHEAD>18                  /*                       @Y30LB14*/
*     THEN                          /*                       @Y30LB14*/
         CLI   UT2VHEAD(@10),18                                    0160
         BNH   @RF00160                                            0160
*     DO;                           /*                       @Y30LB14*/
*       UT2VHEAD=0;                 /* SET TRACK TO ZERO     @Y30LB14*/
         MVI   UT2VHEAD(@10),X'00'                                 0162
*       UT2VCYL=UT2VCYL+1;          /* INCR TO NEXT CYL      @Y30LB14*/
         MVC   @ZT00003+3(1),UT2VCYL(@10)                          0163
         AL    @05,@ZT00003                                        0163
         STC   @05,UT2VCYL(,@10)                                   0163
*     END;                          /*                       @Y30LB14*/
*   OUTCYL(1)=UT2VCYL;              /* SET NEXT AVAIL CYL    @YD00113*/
@RF00160 L     @10,BUILDPTR(,R4)                                   0165
         LH    @05,@CH00484                                        0165
         ALR   @05,@10                                             0165
         MVC   OUTCYL(1,@05),UT2VCYL(@10)                          0165
*   OUTHEAD(1)=UT2VHEAD;            /* SET NEXT AVAIL HEAD   @YD00113*/
         MVC   OUTHEAD(1,@05),UT2VHEAD(@10)                        0166
*   RETURN;                         /* RETURN TO CALLER      @Y30LB14*/
@EL00007 DS    0H                                                  0167
@EF00007 DS    0H                                                  0167
@ER00007 LM    @14,@12,@SA00007                                    0167
         BR    @14                                                 0167
*   END WRITE;                      /*                       @Y30LB14*/
*                                                                  0169
*/***********************************************************@Y30LB12*/
*/*                                                          @Y30LB12*/
*/* PROCEDURE NAME - PUTIT1                                  @Y30LB12*/
*/*                                                          @Y30LB12*/
*/* FUNCTION - CALL ICGDSMSG, MESSAGE PRINT SUBROUTINE, TO   @Y30LB12*/
*/*            PUT TERMINATING MESSAGE FOR WHICH TEXT IS NOT @Y30LB12*/
*/*            IN ICGDSMSG BUT ALREADY BUILT IN 'OUTBUF2'    @Y30LB12*/
*/*                                                          @Y30LB12*/
*/***********************************************************@Y30LB12*/
*                                                                  0169
*PUTIT1:                                                           0169
*   PROCEDURE;                      /*                       @Y30LB12*/
PUTIT1   STM   @14,@12,@SA00008                                    0169
*   STOPSCAN='1'B;                  /*                       @Y30LB12*/
         OI    STOPSCAN,B'10000000'                                0170
*   PRNTBUF2='1'B;                  /*                       @Y30LB12*/
         OI    PRNTBUF2(R4),B'00000001'                            0171
*   TERMINAT=TERMINAT+1;            /*                       @Y30LB12*/
         LA    @10,1                                               0172
         AH    @10,TERMINAT(,R4)                                   0172
         STH   @10,TERMINAT(,R4)                                   0172
*   GEN(LINK  EP=ICGDSMSG);         /*                       @Y30LB12*/
         LINK  EP=ICGDSMSG
*   PRNTBUF2='0'B;                  /*                       @Y30LB12*/
         NI    PRNTBUF2(R4),B'11111110'                            0174
*   END PUTIT1;                     /*                       @Y30LB12*/
@EL00008 DS    0H                                                  0175
@EF00008 DS    0H                                                  0175
@ER00008 LM    @14,@12,@SA00008                                    0175
         BR    @14                                                 0175
*                                                                  0176
*/********************************************************** @YD00113*/
*/*                                                          @YD00113*/
*/*                 P A T C H   A R E A                      @YD00113*/
*/*                                                          @YD00113*/
*/********************************************************** @YD00113*/
*                                                                  0176
*   GENERATE;                                                      0176
*                                                         /*@YD00113*/
PATCHB11 DC    32C'PATCHB11'                              /*@YD00113*/
*   END ICGDSB11                    /*                       @Y30LB14*/
*                                                                  0177
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ICGDSMAC)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA5)                                       */
*/*%INCLUDE SYSLIB  (ICGDSMA2)                                       */
*                                                                  0177
*       ;                                                          0177
         B     @EL00001                                            0177
@DATA    DS    0H
@CH00042 DC    H'1'
@CH00048 DC    H'3'
@CH00128 DC    H'12'
@CH00454 DC    H'18'
@CH00309 DC    H'32'
@CH00487 DC    H'264'
@CH00485 DC    H'272'
@CH00463 DC    H'442'
@CH00466 DC    H'498'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
@SA00002 DS    15F
@SA00005 DS    15F
@SA00007 DS    15F
@SA00006 DS    15F
@SA00008 DS    15F
@TF00001 DS    F
@TF00002 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
ICGDSB11 CSECT
         DS    0F
@CF00486 DC    F'5084'
@CH00486 EQU   @CF00486+2
@CF00488 DC    F'8432'
@CF00500 DC    F'13260'
@CF00484 DC    F'13532'
@CH00484 EQU   @CF00484+2
@CF00509 DC    F'21964'
@CF00495 DC    F'-264'
@CF00503 DC    F'-263'
@CF00502 DC    F'-262'
@CF00501 DC    F'-261'
@CF00511 DC    F'-260'
@CF00496 DC    F'-256'
@CF00508 DC    F'-252'
@CF00499 DC    F'-251'
@CF00498 DC    F'-250'
@CF00497 DC    F'-249'
@DATD    DSECT
         DS    0D
STOPSCAN DS    BL1
BLOCK    DS    CL256
         ORG   BLOCK
FLAGS    DS    FL1
         ORG   FLAGS
LTB      DS    BL1
LAB      EQU   FLAGS+0
EOTB     EQU   FLAGS+0
LTIT     EQU   FLAGS+0
BLKUSE   EQU   FLAGS+0
HASH     EQU   FLAGS+0
VERFLOW  EQU   FLAGS+0
         ORG   BLOCK+1
ENTRYLEN DS    FL1
MAXENTPB DS    FL1
USECNT   DS    FL1
ZCHR     DS    BL4
         ORG   ZCHR
ZERO     DS    FL1
CYLINDER DS    FL1
TRACK    DS    FL1
RECORD   DS    FL1
         ORG   BLOCK+8
REMAINDR DS    BL248
         ORG   BLOCK+256
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ICGDSB11 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
MSG410I  DC    CL49' ICG410I NON-MATCH ON INPUT TABLE ID FOR ICGDSB11'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MAX      EQU   @03
K        EQU   @03
J        EQU   @02
I        EQU   @05
R4       EQU   @04
COMTAB   EQU   0
READER   EQU   COMTAB+256
READFLAG EQU   READER+96
PCHBF    EQU   READER+99
STARTCOL EQU   READER+180
NEXTCOL  EQU   READER+184
PRINTER  EQU   COMTAB+464
OUTBUF2  EQU   PRINTER+225
MESSAGES EQU   COMTAB+810
RETCODE  EQU   MESSAGES
TERMINAT EQU   MESSAGES+6
SPECLMSG EQU   MESSAGES+18
PRNTBUF2 EQU   SPECLMSG
GENIO    EQU   COMTAB+832
DCBPTR   EQU   GENIO+4
COMPTR2  EQU   GENIO+16
BUILDPTR EQU   GENIO+20
INVOKED  EQU   COMTAB+856
SAVEDDS  EQU   INVOKED+4
BUILDRSG EQU   COMTAB+900
RSGS     EQU   BUILDRSG
RSG      EQU   RSGS
RSGABOX  EQU   RSG
RSGTODS  EQU   RSG+7
LIBRARY  EQU   COMTAB+1170
LIBS     EQU   LIBRARY
LIB      EQU   LIBS
LIBBITS  EQU   LIB
PABTABLE EQU   COMTAB+1218
PABDEV   EQU   PABTABLE
PABFLAGS EQU   PABDEV
PABREAL  EQU   PABDEV+1
PABAADDD EQU   PABDEV+2
DSPAIRS  EQU   COMTAB+1938
PHYSTYPE EQU   COMTAB+2002
PHYSFLGS EQU   PHYSTYPE
MERLICEB EQU   PHYSFLGS
CPUASSOC EQU   COMTAB+3026
CPUS     EQU   CPUASSOC+2
CPU      EQU   CPUS
CPUFLAG1 EQU   CPU+6
OPSYSTYP EQU   CPUFLAG1
CPUFLAG2 EQU   CPU+7
LOWERCON EQU   COMTAB+3156
LOWDSS   EQU   LOWERCON
LOWFLGS  EQU   LOWDSS
LIBCTL   EQU   COMTAB+3284
LIBCTLS  EQU   LIBCTL
CREATE   EQU   COMTAB+3288
@NM00017 EQU   CREATE
NEWCREAT EQU   @NM00017
UPDCREAT EQU   @NM00017
COMTAB2  EQU   0
DSTORSG  EQU   COMTAB2
DSENTRY  EQU   DSTORSG
CONFGCON EQU   COMTAB2+32
RSGUCB   EQU   CONFGCON
RSGFLAGS EQU   RSGUCB
CONFGUCB EQU   COMTAB2+464
CONFGDEV EQU   CONFGUCB
USEFLAGS EQU   CONFGDEV
ALTPATH1 EQU   CONFGDEV+2
ALTPATH2 EQU   CONFGDEV+5
ALTPATH3 EQU   CONFGDEV+8
BUILDTAB EQU   0
COMB06   EQU   BUILDTAB
B06DCBPT EQU   COMB06
B06BUFPT EQU   COMB06+4
B06ADDR  EQU   COMB06+9
COMB05   EQU   BUILDTAB+12
B05DCBPT EQU   COMB05
B05BUFPT EQU   COMB05+4
B05ADDR  EQU   COMB05+9
BUILDGEN EQU   BUILDTAB+24
UT2VCHR  EQU   BUILDGEN+8
OUTADDR  EQU   UT2VCHR+1
UT2VCYL  EQU   OUTADDR
UT2VHEAD EQU   OUTADDR+1
UT2VREC  EQU   OUTADDR+2
UT1VCHR  EQU   BUILDGEN+12
INADDR   EQU   UT1VCHR+1
UT1VCYL  EQU   INADDR
UT1VHEAD EQU   INADDR+1
UT1STUFF EQU   BUILDTAB+40
UT1DCB   EQU   UT1STUFF
UT1FLAG  EQU   UT1STUFF+96
UT2STUFF EQU   BUILDTAB+664
UT2DCB   EQU   UT2STUFF
UT2FLAG  EQU   UT2STUFF+96
UT3STUFF EQU   BUILDTAB+1288
UT3FLAG  EQU   UT3STUFF+96
UT1BUFER EQU   BUILDTAB+5084
UT2BUFER EQU   BUILDTAB+13532
INBUFFER EQU   0
INBLOCK  EQU   INBUFFER
INBLKPFX EQU   INBLOCK
INTABLID EQU   INBLKPFX
IBLOCK   EQU   INBLOCK+8
INCONTRL EQU   IBLOCK
OUTBUFFR EQU   0
OUTBLOCK EQU   OUTBUFFR
OBLKPRFX EQU   OUTBLOCK+8
OUTABLID EQU   OBLKPRFX
OUTCYL   EQU   OBLKPRFX+1
OUTHEAD  EQU   OBLKPRFX+2
OUTREC   EQU   OBLKPRFX+3
OUTFLR   EQU   OBLKPRFX+4
OBLOCK   EQU   OUTBLOCK+16
OCONTROL EQU   OBLOCK
OFLAGS   EQU   OCONTROL
OLTB     EQU   OFLAGS
OEOTB    EQU   OFLAGS
OLTIT    EQU   OFLAGS
OVERFLOW EQU   OFLAGS
NEXTVCHR EQU   OCONTROL+4
OCYL     EQU   NEXTVCHR+1
OHEAD    EQU   NEXTVCHR+2
ORECORD  EQU   NEXTVCHR+3
SCANBUF  EQU   0
SCANDATA EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
OFILLER  EQU   OBLOCK+248
OCARTBLK EQU   OBLOCK+8
OVOLUME  EQU   NEXTVCHR
OUSECNT  EQU   OCONTROL+3
OMAXEPB  EQU   OCONTROL+2
OENTRYLN EQU   OCONTROL+1
OHASH    EQU   OFLAGS
OBLKUSE  EQU   OFLAGS
OLAB     EQU   OFLAGS
@NM00024 EQU   OUTBLOCK
IFILLER  EQU   IBLOCK+248
ICRTBLK  EQU   IBLOCK+8
IRECORD  EQU   INCONTRL+7
IHEAD    EQU   INCONTRL+6
ICYL     EQU   INCONTRL+5
IVOLUME  EQU   INCONTRL+4
IUSECNT  EQU   INCONTRL+3
IMAXEPB  EQU   INCONTRL+2
IENTYLN  EQU   INCONTRL+1
ICOMPLN  EQU   INCONTRL
ILTIT    EQU   INCONTRL
IEOTB    EQU   INCONTRL
ILAB     EQU   INCONTRL
ILTB     EQU   INCONTRL
INFLR    EQU   INBLKPFX+4
INREC    EQU   INBLKPFX+3
INHEAD   EQU   INBLKPFX+2
INCYL    EQU   INBLKPFX+1
TEMPEND  EQU   BUILDTAB+22396
LTRTRANI EQU   BUILDTAB+22316
LTRTRANO EQU   BUILDTAB+22236
NVERIFY  EQU   BUILDTAB+3500
CVERIFY  EQU   BUILDTAB+1916
@NM00023 EQU   UT3STUFF+624
UT3DDN   EQU   UT3STUFF+616
UT3CCWS  EQU   UT3STUFF+320
UT3IOB   EQU   UT3STUFF+280
UT3ECB   EQU   UT3STUFF+276
UT3JFCB  EQU   UT3STUFF+100
@NM00022 EQU   UT3FLAG
UT3VWERR EQU   UT3FLAG
UT3VOERR EQU   UT3FLAG
UT3VUPDT EQU   UT3FLAG
UT3DCB   EQU   UT3STUFF
UT2DDN   EQU   UT2STUFF+616
UT2CCWS  EQU   UT2STUFF+320
UT2IOB   EQU   UT2STUFF+280
UT2ECB   EQU   UT2STUFF+276
UT2JFCB  EQU   UT2STUFF+100
@NM00021 EQU   UT2FLAG
UT2VCERR EQU   UT2FLAG
UT2VWERR EQU   UT2FLAG
UT2VOERR EQU   UT2FLAG
UT2VUPDT EQU   UT2FLAG
UT1DDN   EQU   UT1STUFF+616
UT1CCWS  EQU   UT1STUFF+320
UT1IOB   EQU   UT1STUFF+280
UT1ECB   EQU   UT1STUFF+276
UT1JFCB  EQU   UT1STUFF+100
@NM00020 EQU   UT1FLAG
UT1VWERR EQU   UT1FLAG
UT1VOERR EQU   UT1FLAG
UT1VUPDT EQU   UT1FLAG
UT1VREC  EQU   INADDR+2
UT1TABID EQU   UT1VCHR
UT2TABID EQU   UT2VCHR
ADDRBUF2 EQU   BUILDGEN+4
ADDRBUF1 EQU   BUILDGEN
B05REC   EQU   B05ADDR+2
B05HEAD  EQU   B05ADDR+1
B05CYL   EQU   B05ADDR
B05TBLID EQU   COMB05+8
B06REC   EQU   B06ADDR+2
B06HEAD  EQU   B06ADDR+1
B06CYL   EQU   B06ADDR
B06TBLID EQU   COMB06+8
ALTCH3   EQU   ALTPATH3+2
ALTCI3   EQU   ALTPATH3+1
ALTDS3   EQU   ALTPATH3
ALTCH2   EQU   ALTPATH2+2
ALTCI2   EQU   ALTPATH2+1
ALTDS2   EQU   ALTPATH2
ALTCH1   EQU   ALTPATH1+2
ALTCI1   EQU   ALTPATH1+1
ALTDS1   EQU   ALTPATH1
INDEXRSG EQU   CONFGDEV+1
ICEBERG  EQU   USEFLAGS
ITISALTP EQU   USEFLAGS
USECONVR EQU   USEFLAGS
SUPPUNCH EQU   USEFLAGS
USEREAL  EQU   USEFLAGS
USEVS    EQU   USEFLAGS
USEV     EQU   USEFLAGS
USESPEC  EQU   USEFLAGS
RSGCUA   EQU   RSGUCB+8
RSGCHAN  EQU   RSGUCB+7
CPUREFNO EQU   RSGUCB+6
RSGCPUID EQU   RSGUCB+1
@NM00019 EQU   RSGFLAGS
CISPEC   EQU   RSGFLAGS
TORSG2   EQU   DSENTRY+1
TORSG1   EQU   DSENTRY
COM2BASE EQU   COMTAB+3304
LRUCLOCK EQU   CREATE+11
VOLSER   EQU   CREATE+5
VPAGES   EQU   CREATE+1
@NM00018 EQU   @NM00017
PRNTONLY EQU   @NM00017
CMDCREAT EQU   @NM00017
RW67RGHT EQU   LIBCTLS
RW67LEFT EQU   LIBCTLS
RW45RGHT EQU   LIBCTLS
RW45LEFT EQU   LIBCTLS
RW23RGHT EQU   LIBCTLS
RW23LEFT EQU   LIBCTLS
RW01RGHT EQU   LIBCTLS
RW01LEFT EQU   LIBCTLS
LOWLIB   EQU   LOWDSS+1
@NM00016 EQU   LOWFLGS
LOWRGHT  EQU   LOWFLGS
LOWLEFT  EQU   LOWFLGS
LOWRW67  EQU   LOWFLGS
LOWRW45  EQU   LOWFLGS
LOWRW23  EQU   LOWFLGS
LOWRW01  EQU   LOWFLGS
LOWSPEC  EQU   LOWFLGS
ALTMSCIN EQU   CPUFLAG2
@NM00015 EQU   CPUFLAG2
ALTMSGBF EQU   CPUFLAG2
@NM00014 EQU   CPUFLAG2
CPUSPEC  EQU   CPUFLAG2
CPUMSCIN EQU   CPUFLAG1
OPJES3   EQU   OPSYSTYP
OPVS2    EQU   OPSYSTYP
OPVS1    EQU   OPSYSTYP
CPUALTFL EQU   CPUFLAG1
CPUTIGHT EQU   CPUFLAG1
@NM00013 EQU   CPUFLAG1
TOMPCPU  EQU   CPU+5
CPUID    EQU   CPU
CPUNUM   EQU   CPUASSOC
SPNRSGNO EQU   PHYSTYPE+1
LGDEVICE EQU   PHYSFLGS
LOGABOX1 EQU   PHYSFLGS
PHYSSSID EQU   PHYSFLGS
PHYSREAL EQU   PHYSFLGS
PHYSICEB EQU   MERLICEB
PHYSMERL EQU   MERLICEB
PHYSDS2  EQU   DSPAIRS
PABDDD   EQU   PABAADDD
PABAA    EQU   PABAADDD
PABZEROS EQU   PABAADDD
PAB2D    EQU   PABREAL
PAB2C    EQU   PABREAL
PAB2B    EQU   PABREAL
@NM00012 EQU   PABREAL
PAB1D    EQU   PABREAL
PAB1C    EQU   PABREAL
PAB1B    EQU   PABREAL
PABIMPLR EQU   PABREAL
PABBERG2 EQU   PABFLAGS
@NM00011 EQU   PABFLAGS
PABDSMTL EQU   PABFLAGS
PABIBERG EQU   PABFLAGS
@NM00010 EQU   PABFLAGS
PABVOVIR EQU   PABFLAGS
PABEXIST EQU   PABFLAGS
MAPEXIT  EQU   LIB+4
LIBMAP   EQU   LIB+3
LIBDSMID EQU   LIB+2
LIBSIZE  EQU   LIB+1
@NM00009 EQU   LIBBITS
LIBSPEC  EQU   LIBBITS
TODS2    EQU   RSGTODS+1
TODS1    EQU   RSGTODS
RSGSLICE EQU   RSG+3
RSGUDEL  EQU   RSG+2
RSGLDEL  EQU   RSG+1
@NM00008 EQU   RSG
RSGABOX1 EQU   RSGABOX
RSGABOX0 EQU   RSGABOX
RSGSPEC  EQU   RSG
SVSYSUT3 EQU   SAVEDDS+32
SVSYSUT2 EQU   SAVEDDS+24
SVSYSUT1 EQU   SAVEDDS+16
SVSYSPCH EQU   SAVEDDS+8
SVSYSIN  EQU   SAVEDDS
PARMPTR  EQU   INVOKED
SAVE14   EQU   GENIO+12
EXLST    EQU   GENIO+8
@NM00007 EQU   DCBPTR+1
DCBFLAG  EQU   DCBPTR
OPENLIST EQU   GENIO
@NM00006 EQU   MESSAGES+19
NEEDEOJ  EQU   SPECLMSG
ENDPHASE EQU   SPECLMSG
@NM00005 EQU   SPECLMSG
PRNTCARD EQU   SPECLMSG
@NM00004 EQU   SPECLMSG
NEED102  EQU   SPECLMSG
NEED101  EQU   SPECLMSG
PRINTRC  EQU   MESSAGES+16
TERM     EQU   MESSAGES+12
WARN     EQU   MESSAGES+8
WARNING  EQU   MESSAGES+4
MSGNO    EQU   MESSAGES+2
OUTBUF   EQU   PRINTER+104
LINECT   EQU   PRINTER+102
LINECTR  EQU   PRINTER+100
PAGENO   EQU   PRINTER+96
DCBPRINT EQU   PRINTER
@NM00003 EQU   READER+206
SCANLEN  EQU   READER+204
SVEODAD  EQU   READER+200
SVSYNAD2 EQU   READER+196
SAVENCOL EQU   READER+192
SAVESCOL EQU   READER+188
INBUF    EQU   READER+100
SSELECT  EQU   PCHBF
@NM00002 EQU   READER+97
@NM00001 EQU   READFLAG
LASTPARM EQU   READFLAG
ENDSCAN  EQU   READFLAG
PARMBIT  EQU   READFLAG
KEYBIT   EQU   READFLAG
READTERM EQU   READFLAG
READDCB  EQU   READER
PATCH    EQU   COMTAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00028 EQU   @EL00001
@RT00036 EQU   @EL00002
@RF00130 EQU   @EL00004
@RF00137 EQU   @EL00005
@ENDDATA EQU   *
         END   ICGDSB11,(C'PLS1521',0603,76337)
