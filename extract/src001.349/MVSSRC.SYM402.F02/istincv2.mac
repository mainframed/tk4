SVTM     TITLE ' SSCP -- ISTINCV2 -- ANSWER MODE PROCESSOR             *
                        '
ISTINCV2 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTINCV2  78.012'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*                                                                  0093
*      /* MAINLINE CODE OF ISTINCV2 -- ANSWER MODE PROCESSOR*/     0094
*                                                                  0094
* DO;                                                              0094
*/***  CRRMAINT  PROCNM(ISTINCV2)COMP(VY)FUNC(SUB)RPHADD((NCSPLRPH))  *
**/                                                                0095
*                                                                  0095
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTVYCRR)  */                  0095
* RFY ISTLCCW ;                                                    0095
* RFY ISTLCPB ;                                                    0096
* RFY ISTZSAVE;                                                    0097
* RFY ISTPFCRR;                                                    0098
* RFY ISTCFCRR;                                                    0099
* RFY ISTZCRR ;                                                    0100
* RFY ISTASCRR;                                                    0101
* RFY ISTAPCRR;                                                    0102
* RFY ISTCRA  ;                                                    0103
* RFY ISTCNSTA;                                                    0104
* RFY ISTVYCRR;                                                    0105
*/* END OF ATBUILD */                                              0106
* /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                     0106
*NCSPLRPH->RPHCRR->CRACRR->NINCV2 = '1'B;                          0106
         L     @08,NCSPLRPH(,R1)                                   0106
         L     @08,RPHCRR(,@08)                                    0106
         L     @08,CRACRR(,@08)                                    0106
         OI    NINCV2(@08),B'00000001'                             0106
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                    0107
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0107
         XC    VYCCRT+1(11,@08),VYCCRT+1(@08)                      0107
         MVI   VYCCRT(@08),B'00000000'                             0107
*NCSPLRPH->RPHCRR->CRACRR->CINCV2 = '1'B;                          0108
         OI    CINCV2(@08),B'00000001'                             0108
* END;                                                             0109
*GEN REFS(CV2WAPTR) (   USING  @DATD,CV2WAPTR);                    0110
            USING  @DATD,CV2WAPTR
*RFY R15 RSTD;                                                     0111
*R15=REGSAPTR;   /* SAVE THE CALLER'S REGISTER SAVEAREA POINTER */ 0112
         LR    R15,REGSAPTR                                        0112
*REGSAPTR=REGSAPTR-LENGTH(CV2REGSV); /* DECREMENT REG 13 BY 72 */  0113
         SL    REGSAPTR,@CF01023                                   0113
*CV2SVBKP=R15;   /* POINT THIS ROUTINE'S SAVEAREA TO THE CALLER'S */
         ST    R15,CV2SVBKP(,REGSAPTR)                             0114
*CV2SVFWP=ZERO;  /* ZERO THIS ROUTINE'S SAVEAREA FORWARD POINTER */
         SLR   @08,@08                                             0115
         ST    @08,CV2SVFWP(,REGSAPTR)                             0115
*R15->CV2SVFWP=REGSAPTR; /* POINT CALLER'S SAVEAREA TO THIS SAVEAREA */
         ST    REGSAPTR,CV2SVFWP(,R15)                             0116
*CV2WAPTR=NXTAVAIL;/* GET THE NEXT AVAILABLE ADDRESS IN THE WORKAREA*/
         L     @08,NCSPLWKA(,R1)                                   0117
         L     CV2WAPTR,NXTAVAIL(,@08)                             0117
*CV2WAPTR=(CV2WAPTR+SEVEN)&MINUS8;     /*ALIGN ON DOUBLE WORD*/    0118
         LA    @07,7                                               0118
         ALR   @07,CV2WAPTR                                        0118
         N     @07,@CF00793                                        0118
         LR    CV2WAPTR,@07                                        0118
*NXTAVAIL=CV2WAPTR+@SIZDATD; /* RESET NEXT AVAILABLE BEYOND THIS   0119
*                             ROUTINE'S DYNAMIC AREA */            0119
         LR    @07,CV2WAPTR                                        0119
         AL    @07,@SIZDATD                                        0119
         ST    @07,NXTAVAIL(,@08)                                  0119
*NCSPLPTR=R1;                     /* GET THE NCSPL ADDRESS */      0120
         LR    NCSPLPTR,R1                                         0120
*RFY ISTNCSPL BASED(NCSPLPTR);                                     0121
*R1 = NCSPLRPH;                    /*GET RPH ADDR */               0122
         L     R1,NCSPLRPH(,NCSPLPTR)                              0122
*RFY ISTRPH BASED(R1);                                             0123
*                                                                  0123
*CV2SWTCH = ZERO;                  /*INITIALIZE FLAGS OFF*/        0124
         MVI   CV2SWTCH,X'00'                                      0124
*LINKRDTE = NCSPLRAD;              /* ADDR OF RDTE TO CHANGE*/     0125
*                                                                  0125
         L     LINKRDTE,NCSPLRAD(,NCSPLPTR)                        0125
*IF (NCSPLVCD = NCSPLVC1           /*VARY COMMAND AND*/            0126
*   & NCSPLVBF = NCSVANON)         /*ANSWER=YES SPECIFIED*/        0126
* × (NCSPLVCD = NCSPLVC1           /* VARY COMMAND AND */          0126
*   & NCSPLVBF = NCSVANOF)         /*ANSWER = NO SPECIFIED*/       0126
*  THEN DO;                                                        0126
         CLI   NCSPLVCD(NCSPLPTR),X'01'                            0126
         BNE   @GL00001                                            0126
         CLC   NCSPLVBF(2,NCSPLPTR),@CB01178                       0126
         BE    @RT00126                                            0126
@GL00001 CLI   NCSPLVCD(NCSPLPTR),X'01'                            0126
         BNE   @RF00126                                            0126
         CLC   NCSPLVBF(2,NCSPLPTR),@CB01179                       0126
         BNE   @RF00126                                            0126
@RT00126 DS    0H                                                  0127
*       VANSCMD = ON;              /*INDICATE VARY ANSWER COMMAND*/
         OI    VANSCMD,B'10000000'                                 0128
*       IF RPRENTRY = RPRENTLN     /*CHECK IF NODE OK-IS IT LINE*/ 0129
*         & RLNRATRN = ON          /*IS IT SDLC LINK */            0129
*         & RLNRACAT = ON          /*WITH DIAL IN CAPABILITIES */  0129
*          THEN IF RPRONLIN = ON   /*AND ACTIVE */                 0129
         CLI   RPRENTRY(LINKRDTE),X'50'                            0129
         BNE   @RF00129                                            0129
         TM    RLNRATRN(LINKRDTE),B'00000010'                      0129
         BNO   @RF00129                                            0129
         TM    RLNRACAT(LINKRDTE),B'10000000'                      0129
         BNO   @RF00129                                            0129
*               THEN DO;          /*CHECK IF ALREADY IN DESIRED STATE*/
         TM    RPRONLIN(LINKRDTE),B'00001000'                      0130
         BNO   @RF00130                                            0130
*                    IF (RLNEAM = ON   /*ENABLE ANS IN LINE*/      0132
*                        & NCSPLVBF = NCSVANON)  /*AND ANS=YES*/   0132
*                      × (RLNEAM = OFF  /*ABANDON ANS AND */       0132
*                        & NCSPLVBF = NCSVANOF)  /*ANS = NO */     0132
*                        THEN DO;  /*ALREADY IN DESIRED STATE*/    0132
         TM    RLNEAM(LINKRDTE),B'10000000'                        0132
         BNO   @GL00006                                            0132
         CLC   NCSPLVBF(2,NCSPLPTR),@CB01178                       0132
         BE    @RT00132                                            0132
@GL00006 TM    RLNEAM(LINKRDTE),B'10000000'                        0132
         BNZ   @RF00132                                            0132
         CLC   NCSPLVBF(2,NCSPLPTR),@CB01179                       0132
         BNE   @RF00132                                            0132
@RT00132 DS    0H                                                  0133
*                             CV2MSGID = ADDR(CV2MS670);  /*SET UP */
         LA    @08,@CC00806                                        0134
         ST    @08,CV2MSGID                                        0134
*                             CMD1 = CV2ANS;        /*TPMSG CALL*/ 0135
         MVC   CMD1(4),CV2ANS                                      0135
*                             NAM1 = RPRNAME;       /*LINK NAME*/  0136
         MVC   NAM1(8),RPRNAME(LINKRDTE)                           0136
*                             CALL CV2MSGRN;        /*ISSUE MSG 670 */
         BAL   @14,CV2MSGRN                                        0137
*                             RETCODE = ZERO; /*SUCCESSFUL COMPLETION*/
         SLR   @08,@08                                             0138
         ST    @08,RETCODE                                         0138
*                            END;                                  0139
*                                                                  0139
*                       ELSE DO;   /*ISSUE ENABLE/ABANDON ANSWER RU*/
         B     @RC00132                                            0140
@RF00132 DS    0H                                                  0141
*                            CALL CV2DOIO;                         0141
         BAL   @14,CV2DOIO                                         0141
*                            END;                                  0142
*                    END;          /*END ALREADY IN DESIRED STATE*/
*                                                                  0143
*           ELSE DO;               /*LINK NOT ACTIVE */            0144
         B     @RC00130                                            0144
@RF00130 DS    0H                                                  0145
*                CV2MSGID = ADDR(CV2MS691);  /*SET UP FOR MSG 691*/
         LA    @08,@CC00812                                        0145
         ST    @08,CV2MSGID                                        0145
*                NAM2 = RPRNAME;             /*LINK NAME*/         0146
         MVC   NAM2(8),RPRNAME(LINKRDTE)                           0146
*                CALL CV2MSGRN;              /*SEND MSG*/          0147
         BAL   @14,CV2MSGRN                                        0147
*                RETCODE = TWELVE;           /*NODE NOT ACTIVE */  0148
         MVC   RETCODE(4),@CF00032                                 0148
*                END;                                              0149
*                                                                  0149
*        ELSE DO;                  /*ANSWER MODE NOT APPLICABLE TO */
         B     @RC00129                                            0150
@RF00129 DS    0H                                                  0151
*             CV2MSGID = ADDR(CV2MS600); /*THIS NODE-IS INVALID*/  0151
         LA    @08,@CC00804                                        0151
         ST    @08,CV2MSGID                                        0151
*             CMD3 = CV2ANSWR;          /* SET UP FOR MSG 600 */   0152
         MVC   CMD3(6),CV2ANSWR                                    0152
*             NAM3 = RPRNAME;           /*NODENAME*/               0153
         MVC   NAM3(8),RPRNAME(LINKRDTE)                           0153
*             CALL CV2MSGRN;            /*SEND MSG*/               0154
         BAL   @14,CV2MSGRN                                        0154
*             RETCODE = EIGHT;          /*INVALID NODE */          0155
         MVC   RETCODE(4),@CF00092                                 0155
*             END;                                                 0156
*                                                                  0156
*     END;                         /* END VARY ANS COMMAND*/       0157
*                                                                  0157
*    ELSE DO;                      /* VARY ACT OR INACT WITH ANS */
         B     @RC00126                                            0158
@RF00126 DS    0H                                                  0159
*         VANSCMD = OFF;           /*NOT VARY ANS */               0159
         NI    VANSCMD,B'01111111'                                 0159
*         CALL CV2DOIO;            /*ISSUE ENABLE/ABANDODN ANSWER RU*/
         BAL   @14,CV2DOIO                                         0160
*         END;                                                     0161
*                                                                  0161
*R15 = RETCODE;                     /*SEND RETURN CODE TO CALLER */
@RC00126 L     R15,RETCODE                                         0162
*NCSVDEL = ON;                     /*DELETE NCSPL */               0163
         OI    NCSVDEL(NCSPLPTR),B'01000000'                       0163
*NXTAVAIL = CV2WAPTR;              /*RESET WORK AREA PTR*/         0164
         L     @08,NCSPLWKA(,NCSPLPTR)                             0164
         ST    CV2WAPTR,NXTAVAIL(,@08)                             0164
*REGSAPTR = CV2SVBKP;              /*RESTORE CALLERS SAVE AREA ADDR */
*                                                                  0165
         L     REGSAPTR,CV2SVBKP(,REGSAPTR)                        0165
*/**********************************************************/      0166
*/*                                                        */      0166
*/*     CV2DOIO - SUBRTN BUILDS AN ENABLE/ABANDON          */      0166
*/*               ANSWER RU AND CALLS ISTINCIO TO SEND     */      0166
*/*               IT TO THE 370X.                          */      0166
*/*                                                        */      0166
*/**********************************************************/      0166
*                                                                  0166
*CV2DOIO: PROC OPTIONS(NOSAVE NOSAVEAREA );                        0166
*                                                                  0166
         B     @PB00002                                            0166
CV2DOIO  DS    0H                                                  0167
*SAV14A = R14;                     /*SAVE RETURN ADDR*/            0167
         ST    R14,SAV14A                                          0167
*RFY (R2,WRKREG3) RSTD;                                            0168
*WRKREG3 = NCSPLRAD;               /*START WITH LINK RDTE AND SEARCH */
         L     WRKREG3,NCSPLRAD(,NCSPLPTR)                         0169
*                                  /*UNTIL FIND ITS RN RDTE*/      0170
*DO WHILE WRKREG3->RPRENTRY^= RPRENTRN;                            0170
         B     @DE00170                                            0170
@DL00170 DS    0H                                                  0171
*   WRKREG3 = WRKREG3->RPRNSNEA;    /*GET NEXT HIGHER ENTRY */     0171
         L     WRKREG3,RPRNSNEA(,WRKREG3)                          0171
*  END;                                                            0172
*                                                                  0172
@DE00170 CLI   RPRENTRY(WRKREG3),X'01'                             0172
         BNE   @DL00170                                            0172
*NCSPLSAF = ZERO;                    /*ZERO SAF-FIND NCB ONLY*/    0173
         SLR   @08,@08                                             0173
         STH   @08,NCSPLSAF(,NCSPLPTR)                             0173
*NCSPLDAF = WRKREG3->RPRDAF;         /*DAF IS DAF OF RN */         0174
         MVC   NCSPLDAF(2,NCSPLPTR),RPRDAF(WRKREG3)                0174
*RFY WRKREG3 UNRSTD;                                               0175
*                                                                  0175
*CV2RUBUF = CV2RUBUF && CV2RUBUF;   /*CLEAR RU BUFFER AREA */      0176
         XC    CV2RUBUF(6),CV2RUBUF                                0176
*CV2INBUF = CV2INBUF && CV2INBUF;   /* AND INBOUND DATA AREA @D32CKKA*/
         XC    CV2INBUF(7),CV2INBUF                                0177
*NCSPLRUO = ADDR(CV2RUBUF);        /*PUT RU INTERNAL ADDR IN NCSPL */
         LA    @08,CV2RUBUF                                        0178
         ST    @08,NCSPLRUO(,NCSPLPTR)                             0178
*NCSPLRSF = ON;                    /*SET NO QUEUE FLAG ON IN NCSPL*/
         OI    NCSPLRSF(NCSPLPTR),B'01000000'                      0179
*NCSPLRUI = ADDR(CV2INBUF);        /*GET ADDR OF INBOUND BUF @D32CKKA*/
         LA    @03,CV2INBUF                                        0180
         ST    @03,NCSPLRUI(,NCSPLPTR)                             0180
*NSRUID = NSRUNS;                  /*INITIALIZE FIELDS IN RU -TYPE,*/
         MVI   NSRUID(@08),X'01'                                   0181
*NSRUSUB = NSRUPCS;                /*NS SUB CATAGORY */            0182
         MVI   NSRUSUB(@08),X'02'                                  0182
*NSRUDAF = RPRDAF;                 /*GET LINK DAF*/                0183
*                                                                  0183
         MVC   NSRUDAF(2,@08),RPRDAF(LINKRDTE)                     0183
*IF (NCSPLVCD = NCSPLVC1           /*VARY ANS = YES CMD OR */      0184
*  & NCSPLVBF = NCSVANON)                                          0184
*  × (NCSPLANS = ON)               /*ENABLE ANSWER REQUEST?*/      0184
*  THEN  DO;                                                       0184
         CLI   NCSPLVCD(NCSPLPTR),X'01'                            0184
         BNE   @GL00009                                            0184
         CLC   NCSPLVBF(2,NCSPLPTR),@CB01178                       0184
         BE    @RT00184                                            0184
@GL00009 TM    NCSPLANS(NCSPLPTR),B'00100000'                      0184
         BNO   @RF00184                                            0184
@RT00184 DS    0H                                                  0185
*       ENABANS = ON;              /*SET ENABLE ANSWER REQUEST */  0186
         OI    ENABANS,B'01000000'                                 0186
*       NCSPLOLN = ENABLEN;        /*SET LENGTH OF RU IN NCSPL*/   0187
         MVC   NCSPLOLN(2,NCSPLPTR),@CH00786                       0187
*       NCSPLCMD=NCSCEANS;         /*SET ENABLE ANS CMD IN NCSPL*/ 0188
         MVC   NCSPLCMD(2,NCSPLPTR),@CB01342                       0188
*       NSRURCD = NSRUANS;         /*SET ENABLE ANS IN RU */       0189
         L     @08,NCSPLRUO(,NCSPLPTR)                             0189
         MVI   NSRURCD(@08),X'16'                                  0189
*      END;                                                        0190
*                                                                  0190
*  ELSE DO;                                                        0191
         B     @RC00184                                            0191
@RF00184 DS    0H                                                  0192
*       ENABANS = OFF;             /*ABANDON ANSWER REQUEST */     0192
         NI    ENABANS,B'10111111'                                 0192
*       NCSPLOLN = ABANLEN;        /*SET LENGTH IN NCSPL */        0193
         MVC   NCSPLOLN(2,NCSPLPTR),@CH00784                       0193
*       NCSPLCMD = NCSCAANS;       /*SET ABANDON ANSWER IN NCSPL */
         MVC   NCSPLCMD(2,NCSPLPTR),@CB01343                       0194
*       NSRURCD = NSRUAANS;        /*SET ABANDON ANS IN RU */      0195
         L     @08,NCSPLRUO(,NCSPLPTR)                             0195
         MVI   NSRURCD(@08),X'17'                                  0195
*       END;                                                       0196
*                                                                  0196
*R2 = NCSIOCID;                    /*SET UP FOR CALL TO CIDFIND-TO */
@RC00184 L     R2,NCSIOCID(,NCSPLPTR)                              0197
*                                  /*GET NCB ADDR AND DAFLOCK*/    0198
*                                                                  0198
*  DO; /* CIDCTL(FIND)  */                                         0198
*                                                                  0198
*  RFY (EMCR2,EMCR3) RSTD;                                         0199
*    GEN SETS(RPHWORK)                                             0200
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      0200
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*    EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                           0201
         SLR   EMCR3,EMCR3                                         0201
*    EMCR3 = '01'X; /*INDICATE SHARED LOCK*/                       0202
         LA    EMCR3,1                                             0202
*    CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/        0203
*                                                                  0203
         L     @08,ATCLCPTR                                        0203
         L     @15,ATCCDFND(,@08)                                  0203
         BALR  @14,@15                                             0203
*  RFY (EMCR2,EMCR3) UNRSTD;                                       0204
*  END; /*CIDCTL*/                                                 0205
*                                                                  0205
*R2 = R0;                          /*SAVE RETURNED NCB ADDR */     0206
         LR    R2,R0                                               0206
*R1 = NCSPLPTR;                    /*ADDR OF NCSPL */              0207
         LR    R1,NCSPLPTR                                         0207
*CALL ISTINCIO;                    /* SEND RU REQUEST TO 370X */   0208
*                                                                  0208
         L     @15,@CV00915                                        0208
         BALR  @14,@15                                             0208
*  DO;                                                             0209
*/***  CRRMAINT  PROCNM(ISTINCV2)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                0210
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   0210
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0210
         L     @08,NCSPLRPH(,NCSPLPTR)                             0210
         L     @03,RPHCRR(,@08)                                    0210
         L     @03,CRACRR(,@03)                                    0210
         XC    VYCCRT+1(11,@03),VYCCRT+1(@03)                      0210
         MVI   VYCCRT(@03),B'00000000'                             0210
*NCSPLRPH->RPHCRR->CRACRR->CINCV2 = '1'B;                          0211
         OI    CINCV2(@03),B'00000001'                             0211
*  END;                                                            0212
*                                                                  0212
*R1 = NCSPLRPH;                    /*RESTORE RPH ADDR */           0213
         LR    R1,@08                                              0213
*NCSPLRSF = OFF;                   /*TURN OFF NO Q FLAG*/          0214
*                                                                  0214
         NI    NCSPLRSF(NCSPLPTR),B'10111111'                      0214
*IF NCSIORC = NCSIOSUC             /* IF I/O WAS SUCCESSFUL OR FAILED*/
*     × SRUSENS1 = INSTATE         /*BECAUSE ALREADY IN      @D32CKKA*/
*    THEN DO;                      /*DESIRED STATE */              0215
         CLI   NCSIORC(NCSPLPTR),X'00'                             0215
         BE    @RT00215                                            0215
         LA    @08,CV2INBUF                                        0215
         CLC   SRUSENS1(2,@08),INSTATE                             0215
         BNE   @RF00215                                            0215
@RT00215 DS    0H                                                  0216
*        IF ENABANS = ON           /*UPDATE ANSWER MODE STATUS IN */
*           THEN RLNEAM = ON;      /*LINK RDTE*/                   0217
         TM    ENABANS,B'01000000'                                 0217
         BNO   @RF00217                                            0217
         OI    RLNEAM(LINKRDTE),B'10000000'                        0218
*           ELSE RLNEAM = OFF;                                     0219
         B     @RC00217                                            0219
@RF00217 NI    RLNEAM(LINKRDTE),B'01111111'                        0219
*        RETCODE = ZERO;           /*SUCCESSFUL COMPLETION           */
@RC00217 SLR   @08,@08                                             0220
         ST    @08,RETCODE                                         0220
*        IF VANSCMD = ON ×         /*VARY ANS CMD OR VARY ACTIVATE   */
*           (NCSPLVCD=NCSPLVC1 & NCSVBF16=ON &             /*@ZA29027*/
*            NCSPLRPT->RPRENTRY=RPRENTLN)    /*CMD IS AGAINST LINK   */
*          THEN DO;                                        /*@X50BHKA*/
         TM    VANSCMD,B'10000000'                                 0221
         BO    @RT00221                                            0221
         CLI   NCSPLVCD(NCSPLPTR),X'01'                            0221
         BNE   @RF00221                                            0221
         TM    NCSVBF16(NCSPLPTR),B'00000001'                      0221
         BNO   @RF00221                                            0221
         L     @08,NCSPLRPT(,NCSPLPTR)                             0221
         CLI   RPRENTRY(@08),X'50'                                 0221
         BNE   @RF00221                                            0221
@RT00221 DS    0H                                                  0222
*             IF ENABANS = ON         /*UPDATE DEFAULT TO    @X50BHKA*/
*                THEN RLNANSWR = ON;  /*REFLECT CUURENT LINK @X50BHKA*/
         TM    ENABANS,B'01000000'                                 0223
         BNO   @RF00223                                            0223
         OI    RLNANSWR(LINKRDTE),B'01000000'                      0224
*                ELSE RLNANSWR = OFF; /*STATUS               @X50BHKA*/
         B     @RC00223                                            0225
@RF00223 NI    RLNANSWR(LINKRDTE),B'10111111'                      0225
*                NCSANSMD = ON;       /*MARK STATUS CHANGE   @X50BHKA*/
@RC00223 OI    NCSANSMD(NCSPLPTR),B'10000000'                      0226
*                                 /*UPDATE C/R RECORD FOR THIS LINK */
*                                                                  0227
*/*CRIO  FUNC(UPDATE)RDT((NCSPLRAD))PROCNM(ISTINCV2)*/             0227
*                  DO;                                             0227
*                  RFY (GPR01P,GPR15P) RSTD;                       0228
*                  GPR15P = 0;                                     0229
         SLR   GPR15P,GPR15P                                       0229
*                  IF NCSPLRAD->RPRCRCPT = '1'B                    0230
*                  THEN DO;                                        0230
         L     @08,NCSPLRAD(,NCSPLPTR)                             0230
         TM    RPRCRCPT(@08),B'01000000'                           0230
         BNO   @RF00230                                            0230
*                  NCSCRDTE = NCSPLRAD;                            0232
         ST    @08,NCSCRDTE(,NCSPLPTR)                             0232
*                  NCSCRCMD = NCSCRWR;                             0233
         MVI   NCSCRCMD(NCSPLPTR),X'00'                            0233
*                  GPR01P = ADDR(ISTNCSPL);                        0234
         LR    GPR01P,NCSPLPTR                                     0234
*                  CALL ISTINCR5;                                  0235
*                                                                  0235
         L     @15,@CV00927                                        0235
         BALR  @14,@15                                             0235
*                  DO;                                             0236
*/***  CRRMAINT  RPHADD((NCSPLRPH))PROCNM(ISTINCV2)COMP(VY)FUNC(RET)  *
**/                                                                0237
*                  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/   0237
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0237
         L     @08,NCSPLRPH(,NCSPLPTR)                             0237
         L     @08,RPHCRR(,@08)                                    0237
         L     @08,CRACRR(,@08)                                    0237
         XC    VYCCRT+1(11,@08),VYCCRT+1(@08)                      0237
         MVI   VYCCRT(@08),B'00000000'                             0237
*NCSPLRPH->RPHCRR->CRACRR->CINCV2 = '1'B;                          0238
         OI    CINCV2(@08),B'00000001'                             0238
*                  END;                                            0239
*                  RFY (GPR01P,GPR15P) UNRSTD;                     0240
*                  END;                                            0241
*                  END;                                            0242
@RF00230 DS    0H                                                  0243
*                  /* END OF CRIO EXPANSION */                    /*@X5
*BHKA*/                                                            0243
*                R1 = NCSPLRPH;       /*RESTORE RPH PTR      @X50BHKA*/
         L     R1,NCSPLRPH(,NCSPLPTR)                              0243
*                END;                                      /*@X50BHKA*/
*          ELSE;                     /*DO NOT UPDATE C/R DS  @X50BHKA*/
@RF00221 DS    0H                                                  0246
*                                 /*HAVE DEACT,DIAL,OR ACT MAJOR NODE*/
*        IF VANSCMD = ON                                           0246
*           THEN DO;               /* SEND OK MSG 670 IF VARY ANS CMD*/
         TM    VANSCMD,B'10000000'                                 0246
         BNO   @RF00246                                            0246
*                CV2MSGID = ADDR(CV2MS670);                        0248
         LA    @08,@CC00806                                        0248
         ST    @08,CV2MSGID                                        0248
*                CMD1 = CV2ANS;                                    0249
         MVC   CMD1(4),CV2ANS                                      0249
*                NAM1 = RPRNAME;    /*LINK NAME */                 0250
         MVC   NAM1(8),RPRNAME(LINKRDTE)                           0250
*                CALL CV2MSGRN;    /*SEND MSG */                   0251
         BAL   @14,CV2MSGRN                                        0251
*                END;                                              0252
*           ELSE;             /*DO NOT SEND MSG */                 0253
@RF00246 DS    0H                                                  0254
*        END;                                                      0254
*                                                                  0254
*     ELSE DO;                     /*I/O FAILED */                 0255
         B     @RC00215                                            0255
@RF00215 DS    0H                                                  0256
*          RETCODE = FOUR;         /*SET I/O FAILURE */            0256
         MVC   RETCODE(4),@CF00086                                 0256
*          NAM2 = RPRNAME;         /*VARIABLE DATA IS LINK NAME */ 0257
         MVC   NAM2(8),RPRNAME(LINKRDTE)                           0257
*          IF ENABANS = ON                                         0258
*           THEN DO;                                               0258
         TM    ENABANS,B'01000000'                                 0258
         BNO   @RF00258                                            0258
*              CV2MSGID = ADDR(CV2MS671);  /*MSG 671-ENABLE ANS */ 0260
         LA    @08,@CC00808                                        0260
         ST    @08,CV2MSGID                                        0260
*              CALL CV2MSGRN;       /*SEND MSG */                  0261
         BAL   @14,CV2MSGRN                                        0261
*              IF VANSCMD = ON      /*VARY ANS CMD           @D32CKKA*/
*                THEN;              /*NOTHING HAS CHANGED    @D32CKKA*/
         TM    VANSCMD,B'10000000'                                 0262
         BO    @RT00262                                            0262
*                ELSE DO;           /*UPDATE LINK TO REFLECT @D32CKKA*/
*                   RLNEAM = OFF;   /*NOT IN ANSWER MODE     @D32CKKA*/
         NI    RLNEAM(LINKRDTE),B'01111111'                        0265
*                   RLNANSWR = OFF;  /*MARK DEFAULT MODE OFF @X50BHKA*/
         NI    RLNANSWR(LINKRDTE),B'10111111'                      0266
*                   NCSANSMD = ON;   /*MARK STATUS CHANGED   @X50BHKA*/
         OI    NCSANSMD(NCSPLPTR),B'10000000'                      0267
*                                   /*UPDATE C/R RECORD FOR THIS LINK*/
*                                                                  0268
*/*CRIO  FUNC(UPDATE)RDT((NCSPLRAD))PROCNM(ISTINCV2)*/             0268
*                     DO;                                          0268
*                     RFY (GPR01P,GPR15P) RSTD;                    0269
*                     GPR15P = 0;                                  0270
         SLR   GPR15P,GPR15P                                       0270
*                     IF NCSPLRAD->RPRCRCPT = '1'B                 0271
*                     THEN DO;                                     0271
         L     @08,NCSPLRAD(,NCSPLPTR)                             0271
         TM    RPRCRCPT(@08),B'01000000'                           0271
         BNO   @RF00271                                            0271
*                     NCSCRDTE = NCSPLRAD;                         0273
         ST    @08,NCSCRDTE(,NCSPLPTR)                             0273
*                     NCSCRCMD = NCSCRWR;                          0274
         MVI   NCSCRCMD(NCSPLPTR),X'00'                            0274
*                     GPR01P = ADDR(ISTNCSPL);                     0275
         LR    GPR01P,NCSPLPTR                                     0275
*                     CALL ISTINCR5;                               0276
*                                                                  0276
         L     @15,@CV00927                                        0276
         BALR  @14,@15                                             0276
*                     DO;                                          0277
*/***  CRRMAINT  RPHADD((NCSPLRPH))PROCNM(ISTINCV2)COMP(VY)FUNC(RET)  *
**/                                                                0278
*                     /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0278
         L     @08,NCSPLRPH(,NCSPLPTR)                             0278
         L     @08,RPHCRR(,@08)                                    0278
         L     @08,CRACRR(,@08)                                    0278
         XC    VYCCRT+1(11,@08),VYCCRT+1(@08)                      0278
         MVI   VYCCRT(@08),B'00000000'                             0278
*NCSPLRPH->RPHCRR->CRACRR->CINCV2 = '1'B;                          0279
         OI    CINCV2(@08),B'00000001'                             0279
*                     END;                                         0280
*                     RFY (GPR01P,GPR15P) UNRSTD;                  0281
*                     END;                                         0282
*                     END;                                         0283
@RF00271 DS    0H                                                  0284
*                     /* END OF CRIO EXPANSION */                 /*@X5
*BHKA*/                                                            0284
*                   R1 = NCSPLRPH;   /*RESTORE RPH PTR       @X50BHKA*/
         L     R1,NCSPLRPH(,NCSPLPTR)                              0284
*                   END;                                   /*@D32CKKA*/
*             END;                                                 0286
*           ELSE DO;                                               0287
         B     @RC00258                                            0287
@RF00258 DS    0H                                                  0288
*             CV2MSGID = ADDR(CV2MS672);  /*MSG ABANDON ANS  @D32CKKA*/
         LA    @08,@CC00810                                        0288
         ST    @08,CV2MSGID                                        0288
*             CALL CV2MSGRN;              /*SEND MSG         @D32CKKA*/
         BAL   @14,CV2MSGRN                                        0289
*             END;                                                 0290
*         END;                     /*END I/O FAILED          @D32CKKA*/
*                                                                  0291
@RC00258 DS    0H                                                  0292
*RFY R2 UNRSTD;                                                    0292
@RC00215 DS    0H                                                  0293
*R14 = SAV14A;                     /*RESTORE RETURN ADDR */        0293
         L     R14,SAV14A                                          0293
*END CV2DOIO;                                                      0294
*                                                                  0294
@EL00002 DS    0H                                                  0294
@EF00002 DS    0H                                                  0294
@ER00002 BR    @14                                                 0294
*/***********************************************************/     0295
*/*                                                         */     0295
*/*      CV2MSGRN - SUBROUTINE TO ISSUE MESSAGES            */     0295
*/*                                                         */     0295
*/***********************************************************/     0295
*                                                                  0295
*CV2MSGRN: PROC OPTIONS(NOSAVE NOSAVEAREA);                        0295
*                                                                  0295
CV2MSGRN DS    0H                                                  0296
*SAV14B = R14;                     /*SAVE RETURN ADDRESS*/         0296
         ST    R14,SAV14B                                          0296
*CV2MSGTX = ADDR(CV2VARTX);        /*PTR TO VARIABLE DATA*/        0297
         LA    @08,CV2VARTX                                        0297
         ST    @08,CV2MSGTX                                        0297
*                                  /*ISSUE MESSAGE */              0298
*/*TPMSG MSGID((CV2MSGID))MSG((CV2MSGTX))PLAREA(CV2MSGPM)OPTIONS(NCSPLS
*D)*/                                                              0298
*                                                                  0298
*  DO;                                                             0298
*    DCL REG1025  REG(1)  PTR;                                     0299
*    RFY (REG1025) RSTD;                                           0300
*                                                                  0300
*  RFY (EMCR13) RSTD;                                              0301
*    DCL 1 * BASED(REG1025),                                       0302
*        2 CMZID025 PTR(31),                                       0302
*        2 *,                                                      0302
*          3 CMZRL025 PTR(8),                                      0302
*          3 CMZRA025 PTR(24) BDY(BYTE),                           0302
*        2 CMZEA025 PTR(31),                                       0302
*        2 CMZVP025 PTR(31);                                       0302
*                                                                  0302
*/*XREGSET  PID('PLAREA')PPARM(CV2MSGPM)RREG(,REG1025)*/           0303
*  DO;                                                             0303
*    REG1025=ADDR(CV2MSGPM);             /*SET RREG SYMBOL TO ADDRESS*/
         LA    REG1025,CV2MSGPM                                    0304
*                                        /*OF PPARM OPERAND          */
*  END;  /* XREGSET */                                             0305
*    CMZID025 = 0;                                                 0306
         SLR   @07,@07                                             0306
         ST    @07,CMZID025(,REG1025)                              0306
*    CMZRL025 = 0;                                                 0307
         MVI   CMZRL025(REG1025),X'00'                             0307
*    CMZRA025 = 0;                                                 0308
         STCM  @07,7,CMZRA025(REG1025)                             0308
*    CMZEA025 = 0;                                                 0309
         ST    @07,CMZEA025(,REG1025)                              0309
*    CMZVP025 = 0;                                                 0310
         ST    @07,CMZVP025(,REG1025)                              0310
*    CMZID025=CV2MSGID;                                            0311
         L     @07,CV2MSGID                                        0311
         ST    @07,CMZID025(,REG1025)                              0311
*    CMZVP025 = CV2MSGTX;                                          0312
         ST    @08,CMZVP025(,REG1025)                              0312
*    DCL CMZSA025 (18) PTR(31) BASED(EMCR13);                      0313
*    CMZSA025(5) = ADDR(NCSPLSID);                                 0314
*                                                                  0314
         LA    @08,NCSPLSID(,NCSPLPTR)                             0314
         ST    @08,CMZSA025+16(,EMCR13)                            0314
*    DCL REG15025 REG(15) PTR;                                     0315
*    RFY REG15025 RSTD;                                            0316
*                                                                  0316
*  DO; /* LISATCVT CVTBASE(PAGEABLE,(REG15025)) */                 0317
*    REG15025 = ATCLCPTR; /*SET UP ATCVT POINTER*/                 0318
         L     REG15025,ATCLCPTR                                   0318
*  END; /*LISATCVT*/                                               0319
*    DCL CMTA025 BASED(REG15025) ENTRY VALUERANGE(*);              0320
*    REG15025 = REG15025->ATCMSGP;                                 0321
         L     REG15025,ATCMSGP(,REG15025)                         0321
*    CALL CMTA025;                                                 0322
         BALR  @14,@15                                             0322
*    RESPECIFY (REG1025,REG15025)  UNRESTRICTED;                   0323
*                                                                  0323
*  RFY (EMCR13) UNRSTD;                                            0324
*  END;                                                            0325
*                                                                  0325
*R14 = SAV14B;                     /*RESTORE RETURN ADDRESS */     0326
         L     R14,SAV14B                                          0326
*END CV2MSGRN;                                                     0327
*                                                                  0327
*                                                                  0327
*                                                                  0327
@EL00003 DS    0H                                                  0327
@EF00003 DS    0H                                                  0327
@ER00003 BR    @14                                                 0327
@PB00003 DS    0H                                                  0328
*/* TPEPILOG   */                                                  0328
*  GEN (PRINT OFF);                                                0328
*                                                                  0328
         PRINT OFF
*/*   PROGRAM OPERATOR MESSAGE HEADER                                */
*DCL  1  ISTPOHD  BDY(WORD) BASED,                                 0329
*        2 POHRSVD1 CHAR(1),       /* RESERVED                       */
*        2 POHSTAT,                /* HEADER STATUS BITS             */
*          3 POHEND   BIT(1),      /* END LINE 1=YES                 */
*          3 POHDATA  BIT(1),      /* DATA LINE 1=YES                */
*          3 POHLBL   BIT(1),      /* LABEL LINE 1=YES               */
*          3 POHCNTRL BIT(1),      /* CONTROL LINE 1=YES             */
*          3 POHRSVD2 BIT(2),      /* RESERVED                       */
*          3 POHRREQ  BIT(1),      /* REPLY REQUESTED 1=YES          */
*          3 POHGEN   BIT(1),      /* ID ORIGIN  0=GENERATED BY VTAM */
*                                  /*            1=GENERATED BY POA  */
*        2 POHID    FIXED(16);     /* MESSAGE IDENTIFIER             */
*/*            VTAM PREFIX FOR QUEUE ELEMENTS                         *
*/*  INITIAL LEVEL                                     001 03/04/75  */
*DECLARE                                                           0330
*  1 ISTPFX  BDY(WORD)  BASED,                                     0330
*   2 PFXID        CHAR(4),             /* QUEUE ACRONYM (SAME AS  0330
*                                          QABID)                     *
*     3 PFXCBID    BIT(8),              /* CONTROL BLOCK ID           *
*   2 PFXPRTY      CHAR(1),             /* PRIORITY OF ELEMENT        *
*   2 PFXLNG       CHAR(3),             /* ELEMENT LENGTH,         0330
*                                          INCLUDING PREFIX           *
*   2 PFXFWD       PTR(31),   /* POINTER TO NEXT QUEUE             0330
*                                          ELEMENT (IF LAST        0330
*                                          POINTER TO QAB)            *
*   2 PFXBCK       PTR(31) ;   /* POINTER TO PREVIOUS              0330
*                                          QUEUE ELEMENT (IF       0330
*                                          FIRST, POINTER TO QAB)     *
*DCL NCSPLTYP BIT(8) CONSTANT('60'X);   /* NCSPL CONTROL BLOCK ID     *
*   /* NETWORK CONFIGURATION SERVICES CONTROL BLOCK  */            0332
*/*  REVISIONS                                         14 07/01/75  */
*DECLARE                                                           0332
*  1 ISTNCSPL BASED BDY(DWORD),                                    0332
*   2 *      CHAR(16) BDY(WORD),                                   0332
*     3 NCSPFX CHAR(LENGTH(ISTPFX)), /* QUE ELEMENT PREFIX           */
*       4 *        CHAR(12),                                       0332
*       4 NCSCRWKA PTR(31),       /* PTR TO WORK AREA FOR C/R I/O    */
*   2 *           BIT(8),         /*RESERVED                         */
*   2 NCSPLVCD    BIT(8),         /*VERB CODE                        */
*   2 NCSPLVBF    CHAR(2),        /*VERB MODIFIER FLAGS              */
*      3 NCSVBF01 BIT(1),         /* UNUSED                          */
*      3 NCSVBF02 BIT(1),         /* UNUSED                          */
*      3 NCSVBF03 BIT(1),         /* MODIFY MSG SUP                  */
*      3 NCSVBF04 BIT(1),         /* TYPE=VTAM                       */
*      3 NCSVBF05 BIT(1),         /* LINETRACE=1                     */
*      3 NCSVBF06 BIT(1),         /* I/O TRACE=1                     */
*      3 NCSVBF07 BIT(1),         /* BUFFER TRACE=1                  */
*      3 NCSVBF08 BIT(1),         /* MODIFY TPRINT                   */
*      3 NCSVBF09 BIT(1),         /* MODIFY TEST                     */
*      3 NCSVBF10 BIT(1),         /* MODIFY TRACE=NO                 */
*      3 NCSVBF11 BIT(1),         /* VARY INTERNAL ONLY & MODIFY     */
*                                 /*  TRACE = YES                    */
*      3 NCSVBF12 BIT(1),         /* VARY IMMEDIATE  & MODIFY        */
*                                 /*  NETSOL=NO                      */
*      3 NCSVBF13 BIT(1),         /* MODIFY NETSOL=YES               */
*      3 NCSVBF14 BIT(1),         /* VARY LOGON & MODIFY             */
*                                 /*  CHANGE                         */
*      3 NCSVBF15 BIT(1),         /* VARY DEACTIVATE & VARY NORMAL   */
*                                 /*  CLOSE(ERP)                     */
*      3 NCSVBF16 BIT(1),         /* VARY ACTIVATE & ERP REQUEST     */
*                                 /*   & MODIFY DUMP                 */
*   2 NCSPLVFL    CHAR(1),        /*COMMAND FLAGS                    */
*    3 NCSVNCSA   BIT(1),         /*NCSPL IS ACTIVE                  */
*    3 NCSVDEL    BIT(1),         /*DELETE NCSPL                     */
*    3 NCSVSTAT   BIT(1),         /*INDICATE NCSPL WAS NOT GETMAINED */
*    3 NCSDCONT   BIT(1),         /* DO DISCONACT                    */
*    3 NCSABCON   BIT(1),         /* DO ABANDON CONNECTION           */
*    3 NCSDACLK   BIT(1),         /* DO ACTIVATE LINE                */
*    3 NCSRSV02   BIT(2),         /* RESERVED                        */
*   2 NCSPLVF1    CHAR(1),        /* SPECIAL PROC FLAGS              */
*    3 NCSOVFMC   BIT(1),         /* PURGE ONLY VARY'S FMCB          */
*   2 NCSPRMRC    CHAR(1),        /* PURGE MINOR RETURN CODE FIELD   */
*   2 NCSIORC     CHAR(1),        /* I/O OR RESTART RETURN CODE      */
*   2 NCSRRNPT    CHAR(4),        /* ADDR RN ENTRY FOR LINE TRACE    */
*   2 NCSPLRID    CHAR(8),        /*ID = 'NODENAME'                  */
*   2 NCSPLLID    CHAR(8),        /*LOGON = 'NODENAME'               */
*   2 NCSDLID     CHAR(6),        /* OFFHOOK ID                      */
*   2 NCSCRCMD    FIXED(8),       /* C/R I/O COMMAND CODE            */
*   2 NCSCRPID    PTR(8),         /* C/R PATH ID (PID)               */
*   2 NCSPLRPT    PTR(31),        /*ID='NODENAME' RDTE ADDRESS       */
*   2 NCSPLLPT    PTR(31),        /*LOGON/LOGOFF='NODENAME' RDTE ADDR*/
*   2 NCSPLCMD    CHAR(2),        /*3705 CONTROL COMMAND CODES       */
*     3 NCSCMDA  BIT(8),          /*RH FLAGS                         */
*       4 NCSPLSYS BIT(1),        /*ON-SYSTEM OFF-FM                 */
*       4 NCSPLCTL BIT(1),        /*ON-CONTROL OFF-DATA              */
*       4 NCSPLSYN BIT(1),        /*ON=SYNCHR OFF-ASYNCHR            */
*       4 NCSPLFLO BIT(1),        /*ON-WITH FLOW  OFF-AGAINST FLOW   */
*       4 NCSPLUFM BIT(1),        /*ON=UNFORMATTED RU,OFF=FORMATTED  */
*       4 *        BIT(3),        /*RESERVED                         */
*     3 NCSCMDB  BIT(8),          /*COMMAND FIELD                    */
*   2 NCSNCPEP    BIT(8),         /* EP SUBCHANNEL ADDR              */
*   2 NCSMSGSP    CHAR(1),        /* RESERVED FOR MESSAGE SURPRESSION*/
*   2 NCSPLUAD    CHAR(3),        /*U = 'UNIT ADDRESS'               */
*   2 NCSCRFLG    CHAR(1),        /* MISCELLANEOUS C/R FLAGS         */
*     3 NCSPLWRM    BIT(1),       /* COMMAND SPECIFIED WARM PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSPLCLD    BIT(1),       /* COMMAND SPECIFIED COLD PARAM,   */
*                                 /* 1 = YES                         */
*     3 NCSFMCLD    BIT(1),       /* 370X RESPONDED COLD TO ACTPU    */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSFMERP    BIT(1),       /* 370X RESPONDED ERP TO ACTPU     */
*                                 /* (ERP), 1 = YES                  */
*     3 NCSCRDSE    BIT(1),       /* 0=C/R DATA SET DOES NOT EXIST   */
*                                 /* OR IS NULL                      */
*                                 /* 1=C/R DATA SET EXISTS           */
*                                 /* AND IS NOT NULL                 */
*     3 NCSOPRQU    BIT(1),       /* OPERATOR REQUESTS REIPL, 1 = YES*/
*     3 NCSUSRNF    BIT(1),       /* EARLY WARNING PURGE HAS ALREADY */
*                                 /* OCCURED, 1 = YES                */
*     3 NCSSTCMD    BIT(1),       /* ACTIVATE IS A RESULT OF         */
*                                 /* START VTAM COMMAND, 1 = YES     */
*   2 NCSPLWRE    BIT(32),        /* WTOR ECB                        */
*   2 NCSPLWRF    CHAR(72),       /* WTOR REPLY AREA                 */
*   2 NCSPLRAD    PTR(31),        /* RDTE PTR FOR ALLOCATE/DEALLOCATE*/
*     3 NCSLSCMD BIT(8),          /* LINE SCHED COMMAND TYPE         */
*     3 NCSPLRCD BIT(8),          /* HEX VALUE FOR LINE SCHED PARAM  */
*   2 NCSIOCID    CHAR(4),        /* CURRENT CID FOR DAF LOCK HELD   */
*     3  NCSPLCID CHAR(4),        /* ALIAS FOR ABOVE                 */
*        4  NCSPLSAF  CHAR(2),    /* SOURCE ADDRESS                  */
*        4  NCSPLDAF  CHAR(2),    /* DESTINATION ADDRESS             */
*   2 NCSPLWKA    PTR(31),        /* NCS WORK AREA ADDRESS           */
*   2 NCSPLCVT    PTR(31),        /* POINTER TO VTAM CVT             */
*   2 NCSPLRPH    PTR(31),        /* POINTER TO RPH                  */
*   2 NCSPLECB    BIT(32),        /* ECB FOR VARY PGS                */
*   2 NCSPLFSB    PTR(31),        /* ADDRESS OF USS-FSS FSB OR RU    */
*   2 NCSPLRCR    PTR(31),        /* ADDRESS RDTE FOR CR             */
*   2 NCSPLFL1    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPL2IN  BIT(1),         /* SECOND ENTRY                    */
*     3 NCSPLSOM  BIT(1),         /* SUPRESS OP. MESSAGE             */
*     3 NCSPLEBN  BIT(1),         /* ENTRY FROM BNN SSCP             */
*     3 NCSPLREQ  BIT(1),         /* NCSPL FROM RESTORE              */
*     3 NCSPLNON  BIT(1),         /* DO NOT ADDR RDT SEGMENT         */
*     3 NCSPLAPU  BIT(1),         /* ACTIVATE PHYSICAL DONE BY LOAD  */
*     3 NCSPL2CN  BIT(1),         /* SECOND CONTACT REQUEST          */
*     3 NCSPLPOS  BIT(1),         /* BNN POSTED                      */
*   2 NCSPLFL2    CHAR(1),        /* VARY FLAGS                      */
*     3 NCSPLVDP  BIT(1),         /* NCSPL ON VARDEF PAB             */
*     3 NCSPLRSF  BIT(1),         /* NO SICK CLEAR BEFORE I/O        */
*     3 NCSPLRIO  BIT(1),         /* I/O = RESTART I/O               */
*     3 NCSOUFMC  BIT(1),         /* PURGE ONLY USER FMCB            */
*     3 NCSPLDS   BIT(1),         /* 1=CIO SAVED RESPONSE DATA       */
*     3 NCSREMPO  BIT(1),         /* REMOTE POWER OFF SPEC BY OPER   */
*     3 NCSPLVIS  BIT(1),         /* VARY IMM START CALLER OF CVP    */
*     3 NCSPLVIT  BIT(1),         /* VARY IMM TERM CALLER OF CVP     */
*   2 NCSPLFL3    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSPLMOM  BIT(1),         /* ERP CAUSED BY FAILURE OF      0332
*                                    HIGHER NODE                     */
*     3 NCSEPP    BIT(1),         /* 1=EP SUBCHANNEL PRESENT         */
*     3 NCSPLANS  BIT(1),         /* ON FOR ACT IN ANSWER MODE       */
*                                 /* OFF FOR ACT IN NON-ANSWER MODE  */
*     3 NCSGID    BIT(1),         /* ON FOR PATH WITH GID PARM       */
*     3 NCSPID    BIT(1),         /* ON FOR PATH WITH PID PARM       */
*     3 NCSANS    BIT(1),         /* ON FOR ACTIVATE WITH ANS PARM   */
*     3 NCSFINAL  BIT(1),         /* FINAL PARM EXISTS               */
*     3 NCSEND    BIT(1),         /* END PARM EXISTS                 */
*   2 NCSPLFL4    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSDLNID  BIT(1),         /* ID PRESENT IN NCSPL - OFF       */
*     3 NCSPLRSO  BIT(1),         /* RESET ONLY                      */
*     3 NCSPLVID  BIT(1),         /* ORIG CMD WAS MODIFY DUMP        */
*     3 NCSDSPE   BIT(1),         /* DISPLAY EVERY                   */
*     3 NCSDSPA   BIT(1),         /* DISPLAY ACT                     */
*     3 NCSDSPI   BIT(1),         /* DISPLAY INACT                   */
*     3 NCSDSPN   BIT(1),         /* DISPLAY NONE                    */
*     3 NCSPL2AP  BIT(1),         /* SECOND ACTPU TO 320X            */
*   2 NCSDLRSN    CHAR(1),        /* DIAL REASON CODES               */
*   2 NCSPLFL5    CHAR(1),        /* FLAG BYTE                       */
*     3 NCSSCPPS  BIT(1),         /* SSCP WORK AREA IN PVT STORAGE   */
*     3 NCSSDLK   BIT(1),         /* ON-SDLC LINK PROCESSED          */
*     3 NCSFORCE  BIT(1),         /* FORCED DEACT IN PROGRESS        */
*     3 *         BIT(5),         /* RESERVED                        */
*   2 NCSPLOLN    FIXED(15),      /* LENGTH O/B RU                   */
*   2 NCSPLP1     PTR(31),        /* ADDR VARY PAB                   */
*   2 NCSPLP2     PTR(31),        /* ADDR D/L/R PAB                  */
*   2 NCSPLP3     PTR(31),        /* ADDR ERP PAB                    */
*   2 NCSPLSPL    PTR(31),        /* ADDR ASSOC. NCSPL               */
*   2 NCSPLWEL    PTR(31),        /* ADDR POST RPH                   */
*   2 NCSPLRRP    PTR(31),        /* ADDR REMOTE RN RDTE IN LOCAL RDT*/
*   2 NCSPLRUO    PTR(31),        /* ADDR O/B RU                     */
*   2 NCSPLRUI    PTR(31),        /* ADDR BUFFER FOR I/B RU          */
*   2 NCSPLAPP    PTR(31),        /* ADDR NCSPL APPENDAGE            */
*   2 NCSRNAME    CHAR(8),        /* RNAME=FROM VARY ACTIVATE        */
*   2 NCSPLSQN    FIXED(15),      /* SEQUENCE=NR. FOR RESPONSE       */
*   2 NCSPLGID    BIT(8),         /* BINARY REP OF GID VALUE         */
*   2 NCSPLPID    BIT(8),         /* BINARY REP OF PID VALUE         */
*   2 NCSPLMID    CHAR(8),        /* LOGMODE = 'MODENAME'            */
*   2 NCSPLNSN    PTR(31),        /* RDTE NSNEA AT CLSDST            */
*   2 NCSSENSE    CHAR(4),        /* SENSE                           */
*     3 NCSSNS1  CHAR(1),         /* SENSE DATA MAJOR CODE           */
*     3 NCSSNS2  CHAR(1),         /* SENSE MODIFIER BYTE             */
*     3 NCSSENS2 CHAR(2),         /* USER SENSE DATA                 */
*   2 NCSCPWPT    PTR(31),        /* ADDRESS OF CPWA                 */
*   2 NCSMGLPT    PTR(31),        /* PTR TO USS/FSS MSG PARAM LIST   */
*   2 NCSUFMCB    PTR(31),        /* POINTER TO SSCP-LU FMCB         */
*   2 NCSPLRH     CHAR(3),        /* REQUEST RH                      */
*   2 NCSPLRTY    CHAR(1),        /* TYPE FROM RTGOH RU              */
*   2 NCSCRDTE    PTR(31),        /* PTR TO RDTE BEING PROCESSED     */
*                                 /* FOR C/R I/O                     */
*   2 NCSCRMSK,                   /* FLAGS FOR C/R CHECK POINTING    */
*     3 NCSCHKPT    CHAR(2),      /* FLAGS FOR ITEMS CHECK POINTED   */
*       4 NCSACTV     BIT(1),     /* ACTICE/INACTIVE STATUS CHANGED  */
*                                 /* 1 = YES                         */
*       4 NCSPACTV    BIT(1),     /* PORT ACT/INACTIVE STATUS CHANGED*/
*                                 /* 1 = YES                         */
*       4 NCSPOLD     BIT(1),     /* POLL DELAY VALUE CHANGED, 1=YES */
*       4 NCSNRPL     BIT(1),     /* NEGATIVE RESPONSE TO POLL       */
*                                 /* LIMIT VALUE CHANGED, 1 = YES    */
*       4 NCSESLM     BIT(1),     /* SESSION LIMIT VALUE CHANGED,1=YES*
*       4 NCSDTRLM    BIT(1),     /* DEVICE TRANSMISSION LIMIT       */
*                                 /* VALUE CHANGED, 1 = YES          */
*       4 NCSLGAPL    BIT(1),     /* APPLICATION CONTROLLER NAME     */
*                                 /* (LOGAPPL) CHANGED, 1 = YES      */
*       4 NCSLGMOD    BIT(1),     /* LOGON MODE (LOGMODE)            */
*                                 /* CHANGED, 1 = YES                */
*       4 NCSANSMD    BIT(1),     /* ANSWER MODE STATUS CHANGED,1=YES*/
*       4 NCSCUA      BIT(1),     /* CUA VALUE CHANGED, 1 = YES      */
*       4 NCSRNME     BIT(1),     /* RNAME VALUE CHANGED, 1 = YES    */
*       4 NCSPTUSE    BIT(1),     /* PATH USE/NOUSE STATUS CHANGED   */
*                                 /* 1 = YES                         */
*       4 NCSRSVD1    BIT(4),     /* RESERVED                        */
*     3 NCSCRMOD    CHAR(1),      /* NEW VALUES FOR ITEMS CHECKPOINTED*
*                                 /* NOT OBTAINED FROM RDTE          */
*       4 NCSAIMOD    BIT(1),     /* ACTIVE/INACTIVE STATUS, 1=ACTIVE*/
*       4 NCSPTMOD    BIT(1),     /* PORT ACT/INACT STATUS, 1=ACTIVE */
*       4 NCSRSVD2    BIT(6),     /* RESERVED                        */
*   2 NCSPLSID BDY(BYTE),         /* MESSAGE ROUTING INFORMATION     */
*     3 NCSPLSTA    CHAR(1),      /* STATUS FLAG BYTE                */
*       4 NCSRSVD4    BIT(7),     /* RESERVED                        */
*       4 NCSPLPO     BIT(1),     /* 0 = CONSOLE ID FOLLOWS, 1 =     */
*                                 /* PROGRAM OPERATOR HEADER FOLLOWS */
*     3 NCSPLPHD CHAR(LENGTH(ISTPOHD)), /* PO HEADER IF NCSPLPO = 01 */
*       4 NCSPLNID    FIXED(8),   /* CONSOLE ID IF NCSPLPO = 0       */
*     3 NCSPLPDB    PTR(31);      /* PTR TO PO ACDEB PREFIX          */
*/*   COMMAND VALUES FOR C/R FIELD NCSCRCMD                          */
*DCL NCSCRWR  FIXED(8) CONSTANT(0);  /* WRITE TO C/R DATA SET        */
*DCL NCSCROPN FIXED(8) CONSTANT(1);  /* OPEN C/R DATA SET            */
*DCL NCSCRCLS FIXED(8) CONSTANT(2);  /* CLOSE C/R DATA SET           */
*DCL NCSCRDEL FIXED(8) CONSTANT(3);  /* DELETE C/R DATA SET RECORD   */
*DCL NCSCROPQ FIXED(8) CONSTANT(4);  /* OPERATOR QUERY               */
*DCL NCSDCID  FIXED(8) CONSTANT(1);  /* CONSOLE ID INDICATOR         */
*DCL NCSCRIO  BIT(16) CONSTANT('0800'X); /* INDICATES REQUESTS       */
*                                        /* FOR VSAM I/O FOR C/R     */
*DCL NCSCRVIO BIT(16) CONSTANT('0C00'X); /* VSAM I/O OPERATION       */
*/* NCSPL APPENDAGE DEFINATION                                       */
*DCL  1  NCSAPP BASED(NCSPLAPP),                                   0341
*        2 NCSAPSA  CHAR(72),     /* SAVE AREA                       */
*        2 NCSAPECB CHAR(4),      /* ECB                             */
*        2 NCSAPTXT CHAR(8),      /* DUMP DATA                       */
*        2 NCSAPEND PTR(31),      /* HIGH STORAGE ADDRESS            */
*        2 NCSAPBUE CHAR(520),                                     0341
*          3 NCSRSV04 CHAR(3),    /* RESERVED                        */
*          3 NCSAPRU  CHAR(5),    /* IPL CMD RU PREFIX               */
*          3 NCSAPDAT CHAR(512),  /* RESP FOR DUMP, O/B LOAD         */
*        2 NCSAPPAB PTR(31);      /* BNN VARY PAB ADDR               */
*/*    USS/FSS RU AREA MAP                                           */
*DCL  1  NCSUSSRU BASED(NCSPLFSB),                                 0342
*        2 NCSRULEN FIXED(15),    /* LENGTH OF RU                    */
*        2 NCSRUITS CHAR(*);      /* START OF RU                     */
*/*    GENERAL CONSTANTS                                             */
*DCL NCSWASZ  FIXED(15) CONSTANT(2032);   /* NCSPL WORK AREA SIZE    */
*DCL NCSRTGOH BIT(16) CONSTANT('1000'X);  /* VBF VALUE FOR INTERNAL  */
*                                         /* COMMAND-RTGOH RECVD.    */
*/*    CONSTANTS FOR VERB CODES                                      */
*DCL NCSPLVC0 BIT(08) CONSTANT('00'X);    /* ERROR                   */
*DCL NCSPLVC1 BIT(08) CONSTANT('01'X);    /* VARY                    */
*DCL NCSPLVC2 BIT(08) CONSTANT('02'X);    /* MODIFY                  */
*DCL NCSPLVC3 BIT(08) CONSTANT('03'X);    /* ERP                     */
*DCL NCSPLVC4 BIT(08) CONSTANT('04'X);    /* DISPLAY                 */
*DCL NCSPLVC5 BIT(08) CONSTANT('05'X);    /* STATUS TO SM            */
*DCL NCSPLVC6 BIT(08) CONSTANT('06'X);    /* INTERNAL CMD            */
*DCL NCSPLVC7 BIT(08) CONSTANT('07'X);    /* INIT/TERM TUSM          */
*DCL NCSPLVC8 BIT(08) CONSTANT('08'X);    /* DIAL                    */
*/*    CONSTANTS FOR VARY COMMAND MODIFIERS                          */
*DCL NCSVACT BIT(16) CONSTANT('0001'X);   /*ACTIVATE                 */
*DCL NCSVDEA BIT(16) CONSTANT('0002'X);   /* DEACTIVATE              */
*DCL NCSVLON BIT(16) CONSTANT('0004'X);   /* LOGON                   */
*DCL NCSVVPP BIT(16) CONSTANT('0080'X);   /* VARY NORMAL CLEANUP REQST*
*DCL NCSVIMM BIT(16) CONSTANT('0010'X);   /* IMMEDIATE               */
*DCL NCSVINT BIT(16) CONSTANT('0020'X);   /* INTERNAL ONLY           */
*DCL NCSVALO BIT(16) CONSTANT('0005'X);   /* ACTIVATE WITH LOGON     */
*DCL NCSVDEI BIT(16) CONSTANT('0012'X);   /* DEACTIVATE IMMEDIATE    */
*DCL NCSVDII BIT(16) CONSTANT('0032'X);   /* DEACTIV. IMMEDIATE INTERNA
*                                            ONLY*/                0362
*DCL NCSCNOTF BIT(16) CONSTANT('FFF8'X);  /* NOTIFY REQUEST          */
*DCL NCSVANON BIT(16) CONSTANT('0008'X);  /* ANSWER = ON             */
*DCL NCSVANOF BIT(16) CONSTANT('0040'X);  /* ANSWER = OFF            */
*DCL NCSVPUSE BIT(16) CONSTANT('0100'X);  /* PATH = USABLE           */
*DCL NCSVPNUS BIT(16) CONSTANT('0200'X);  /* PATH = NOT USABLE       */
*DCL NCSVINOP BIT(16) CONSTANT('0400'X);  /* INOPERATIVE             */
*/*    CONSTANTS FOR MODIFY COMMAND MODIFIERS                        */
*DCL NCSMDUM BIT(16) CONSTANT('0001'X);   /* DUMP 3705               */
*DCL NCSMCHA BIT(16) CONSTANT('0004'X);   /* CHANGE                  */
*DCL NCSMNSY BIT(16) CONSTANT('0008'X);   /* NETSOL = YES            */
*DCL NCSMNSN BIT(16) CONSTANT('0010'X);   /* NETSOL = NO             */
*DCL NCSMTRY BIT(16) CONSTANT('0020'X);   /* TRACE = YES             */
*DCL NCSMVTRY BIT(16) CONSTANT('1020'X);                           0374
*DCL NCSMVTRN BIT(16) CONSTANT('1040'X);                           0375
*DCL NCSMTRN BIT(16) CONSTANT('0040'X);   /* TRACE = NO              */
*DCL NCSMTPR BIT(16) CONSTANT('0100'X);   /* TRACE PRINT             */
*DCL NCSMTST BIT(16) CONSTANT('0080'X);   /* MODIFY TEST             */
*DCL NCSDPF   BIT(16) CONSTANT('0000'X);  /* POTENTIAL FAIL          */
*DCL NCSDSTRT BIT(16) CONSTANT('0001'X);  /* DIAL START              */
*DCL NCSDOH1  BIT(16) CONSTANT('0002'X);  /* OFFHOOK 1               */
*DCL NCSDOH2  BIT(16) CONSTANT('0004'X);  /* OFFHOOK 2               */
*DCL NCSDDF   BIT(16) CONSTANT('0010'X);  /* DIAL FAILED             */
*DCL NCSDLKS  BIT(16) CONSTANT('0008'X);  /* LINK START              */
*DCL NCSDLKC  BIT(16) CONSTANT('0020'X);  /* LINK COMPLETION         */
*DCL NCSDHU   BIT(16) CONSTANT('0040'X);  /* HANGUP                  */
*DCL NCSDLK   BIT(16) CONSTANT('0080'X);  /* DEALLOCATE              */
*DCL NCSDGIVE BIT(16) CONSTANT('0100'X);  /* GIVE                    */
*DCL NCSDINOP BIT(16) CONSTANT('0200'X);  /* INOP                    */
*DCL NCSDLRST BIT(16) CONSTANT('0400'X);  /* RECOVERY SW LINKS       */
*                                         /* AFTER RN FAILURE        */
*/*    CONSTANTS FOR ERP COMMAND MODIFIERS                           */
*DCL NCSEERRA BIT(16) CONSTANT('0001'X);  /* ERP REQUEST          */
*DCL NCSECLOR BIT(16) CONSTANT('0002'X);  /* VARY NORMAL CLOSE REQUEST*
*DCL NCSEDACT BIT(16) CONSTANT('0004'X);  /* ERP DEACTIVATE REQUEST   *
*DCL NCSERSTR BIT(16) CONSTANT('0008'X);/* RSTRT ENTRY FROM DLR PROC */
*DCL NCSVFORC BIT(16) CONSTANT('0802'X);/* FORCED DEACT              */
*DCL NCSVRACT BIT(16) CONSTANT('1002'X);/* DEACT AND REACT           */
*/*   PURGE MINOR RETURN CODES CONSTANTS                             */
*DCL NCSAPABN BIT(8) CONSTANT('05'X),    /* APPLICATION ABEND        */
*    NCSCLDST BIT(8) CONSTANT('06'X),    /* CLOSE DEST OCCURED       */
*    NCSDDISC BIT(8) CONSTANT('08'X),    /* DIAL DISCONNECT OCCURED
*                                           - CONN NO LONGER AVAILABL*/
*    NCSBTHEX BIT(8) CONSTANT('09'X);    /* BUFFER THRESHOLD EXCEEDED*/
*/*   I/O OR RESTART RETURN CODES CONSTANTS                          */
*DCL NCSIOSUC BIT(8) CONSTANT('00'X),    /* I/O SUCCESSFUL           */
*    NCSIOERR BIT(8) CONSTANT('04'X),    /* I/O ERROR                */
*    NCSIOPRG BIT(8) CONSTANT('08'X),    /* I/O PURGED               */
*    NCSRSSUC BIT(8) CONSTANT('00'X),    /* RESTART SUCCESSFUL       */
*    NCSRSERR BIT(8) CONSTANT('04'X),    /* RESTART ERROR            */
*    NCSVAIPL BIT(8) CONSTANT('00'X),  /* IPL NO RESTART ON VARY ACTV*/
*    NCSVANRA BIT(8) CONSTANT('10'X),    /* IPL SUCCESSFUL, NO RESTART
*                                           AVAILABLE ON VARY ACTIVE  *
*    NCSVAWMF BIT(8) CONSTANT('08'X),    /* WARM START FAILURE FOR 0398
*                                           VARY ACTIVATE            */
*    NCSVAIPF BIT(8) CONSTANT('0C'X),   /* IPL FAILED ON VARY ACTIVATE*
*    NCSDSIA  BIT(8) CONSTANT('14'X),   /* INVALID ADDRESS SPECIFIED
*                                          ON DISPLAY STORAGE CMND    *
*    NCSVAISZ BIT(8) CONSTANT('08'X),   /* NCP SIZE TOO LARGE         *
*    NCSIPLSC BIT(8) CONSTANT('00'X),   /* IPL SUCCESSFUL             *
*    NCSIOER  BIT(8) CONSTANT('0C'X),   /* I/O ERROR ON REMOTE IPL    *
*    NCSNCPAC BIT(8) CONSTANT('04'X),   /* REMOTE NCP ALREADY ACTIVE  *
*    NCSNCRPF BIT(8) CONSTANT('70'X),   /* REMOTE POWER OFF           *
*    NCSCRIOS BIT(8) CONSTANT('30'X),   /* SUCCESSFUL I/O             *
*    NCSCRION BIT(8) CONSTANT('34'X),   /* NULL D.S. OPENED           *
*    NCSCRIOF BIT(8) CONSTANT('38'X);   /* FAILURE ON I/O             *
*/*           CONSTANTS FOR LIBERTY SUPPORT                           *
*DCL  NCSES   BIT(16) CONSTANT('0001'X),/* END SESSION                *
*     NCSBF   BIT(16) CONSTANT('0002'X),/* BIND FAILURE               *
*     NCSUF   BIT(16) CONSTANT('0004'X),/* UNBIND FAILURE             *
*     NCSINIT BIT(16) CONSTANT('0001'X),                           0399
*     NCSTERM BIT(16) CONSTANT('0002'X);                           0399
*DCL NCSTPPST BIT(16) CONSTANT('0001'X);/* TPPST COMMAND              *
*DCL NCSII    BIT(16) CONSTANT('0002'X);/* IPL INIT COMMAND           *
*DCL NCSIT    BIT(16) CONSTANT('0004'X);/* IPL COMMAND                *
*DCL NCSIF    BIT(16) CONSTANT('0008'X);/* IPL FINAL COMMAND          *
*DCL NCSDI    BIT(16) CONSTANT('0010'X);/* DUMP INIT COMMAND          *
*DCL NCSDT    BIT(16) CONSTANT('0020'X);/* DUMP TEXT COMMAND          *
*DCL NCSDF    BIT(16) CONSTANT('0040'X);/* DUMP FINAL COMMAND         *
*DCL NCSCON   BIT(16) CONSTANT('0080'X);/* CONTACT COMMAND            *
*DCL NCSDICON BIT(16) CONSTANT('0100'X);/* DISCONTACT COMMAND         *
*DCL NCSMSFMD BIT(16) CONSTANT('0200'X);/* SEND FMD                   *
*DCL NCSSEND  BIT(16) CONSTANT('0400'X);/* SEND                       *
*DCL NCSPURGE BIT(16) CONSTANT('0800'X);/* PAB PURGE                  *
*DCL NCSMSSUP BIT(16) CONSTANT('2000'X);/* CONSTANT FOR MSG SUP       *
*DCL NCSCRDS  BIT(16) CONSTANT('3023'X);/* RECORD DEV STATS COMMAND   *
*DCL NCSCQUIS BIT(16) CONSTANT('F01A'X);/* QUIESCE COMMAND            *
*DCL NCSSNUSS BIT(16) CONSTANT('381F'X);/* SEND USS MESSAGE           *
*/*                                                                   *
*DCL NCSNC    BIT(8)  CONSTANT('04'X);  /* NOT CONTACTED              *
*DCL NCSLD    BIT(8)  CONSTANT('00'X);  /* CONTACTED LOADED           *
*DCL NCSNLD   BIT(8)  CONSTANT('0C'X);  /* CONTACTED NEEDS LOAD       *
*DCL NCSNCD   BIT(8)  CONSTANT('08'X);  /* NOT CONTACTED DUE TO DEACT *
*DCL NCSNCE   BIT(8)  CONSTANT('10'X);  /* NOT CONTACTED DUE TO ERP   *
*DCL NCSNFME  BIT(8)  CONSTANT('24'X);  /* NEGATIVE FME               *
*/*  CONSTANTS FOR IORC FOR DISPLAY STORAGE                          */
*DCL NCSDSDEA BIT(8)  CONSTANT('0C'X);  /* PRIOR DEACT                *
*DCL NCSDSFAL BIT(8)  CONSTANT('04'X);  /* FAIL OTHER THAN PRIOR DEACT*
*/* TYPE CODES FOR CONFIGURATION RESTART                              *
*DCL NCSCTRLM BIT(8) CONSTANT('01'X);   /* CHANGE DEV TRANS LIMIT     *
*DCL NCSCNPOL BIT(8) CONSTANT('02'X);   /* CHANGE NEG POLL RESP LIMIT *
*DCL NCSCSESS BIT(8) CONSTANT('03'X);   /* CHANGE SESSION LIMIT       *
*DCL NCSCPOLL BIT(8) CONSTANT('04'X);   /* CHANGE LINE SERV SEEK PAUSE*
*/*  FM DATA COMMAND CODES                                            *
*DCL NCSCAPU  BIT(16) CONSTANT('D001'X);   /* ACT PHYS                *
*DCL NCSCDPU  BIT(16) CONSTANT('D002'X);   /* DEACT PHYS              *
*DCL NCSCALU  BIT(16) CONSTANT('D003'X);   /* ACT LOG                 *
*DCL NCSCDLU  BIT(16) CONSTANT('D004'X);   /* DEACT LOG               *
*DCL NCSCSDT  BIT(16) CONSTANT('D005'X);   /* SDT                     *
*DCL NCSCFME  BIT(16) CONSTANT('2006'X);   /* SEND POS RESP           *
*DCL NCSCEXCP BIT(16) CONSTANT('2007'X);   /* SEND NEG RESP           *
*DCL NCSCCON  BIT(16) CONSTANT('3008'X);   /* CONTACT                 *
*DCL NCSCDCON BIT(16) CONSTANT('3009'X);   /* DISCONTACT              *
*DCL NCSCIPLI BIT(16) CONSTANT('300A'X);   /* IPL INIT                *
*DCL NCSCIPLT BIT(16) CONSTANT('300B'X);   /* IPL                     *
*DCL NCSCIPLF BIT(16) CONSTANT('300C'X);   /* IPL FINAL               *
*DCL NCSCDUMI BIT(16) CONSTANT('300D'X);   /* DUMP INIT               *
*DCL NCSCDUMP BIT(16) CONSTANT('300E'X);   /* DUMP                    *
*DCL NCSCDUMF BIT(16) CONSTANT('300F'X);   /* DUMP FINAL              *
*DCL NCSCACTL BIT(16) CONSTANT('3010'X);   /* ACT LINK                *
*DCL NCSCDACL BIT(16) CONSTANT('3011'X);   /* DEACT LINK              *
*DCL NCSCSSV  BIT(16) CONSTANT('3012'X);   /* SET STATE VECTOR        *
*DCL NCSCNSP  BIT(16) CONSTANT('3013'X);   /* NS PROC ERROR           *
*DCL NCSCSTD  BIT(16) CONSTANT('3019'X);   /* SET TIME & DATE         *
*DCL NCSCSEP  BIT(16) CONSTANT('9014'X);   /* SWITCH TO EP            *
*DCL NCSCSNC  BIT(16) CONSTANT('9015'X);   /* SWITCH TO NCP           *
*DCL NCSCLSD  BIT(16) CONSTANT('3016'X);   /* LINE SCHED PARM         *
*DCL NCSCDS   BIT(16) CONSTANT('3017'X);   /* DISPLAY STORAGE         *
*DCL NCSCPWO  BIT(16) CONSTANT('3018'X);   /* REMOTE POWER OFF        *
*DCL NCSSNFMD BIT(16) CONSTANT('301C'X);   /* SEND FMD                *
*DCL NCSCDIAL BIT(16) CONSTANT('301A'X);   /* DIAL                    *
*DCL NCSCADIL BIT(16) CONSTANT('301B'X);   /* ABANDON DIAL            *
*DCL NCSCEANS BIT(16) CONSTANT('301D'X);   /* ENABLE ANS MODE         *
*DCL NCSCAANS BIT(16) CONSTANT('301E'X);   /* ABANDON ANS MODE        *
*DCL NCSCANA  BIT(16) CONSTANT('301F'X);   /* ASSIGN NET ADDRESS      *
*DCL NCSCFNA  BIT(16) CONSTANT('3020'X);   /* FREE NET ADDRESS        *
*DCL NCSCACON BIT(16) CONSTANT('3021'X);   /* ABANDON CONNECTION      *
*DCL NCSCSCV  BIT(16) CONSTANT('3022'X);   /* SET CONTROL VECTOR      *
*DCL NCSNCPPG BIT(16) CONSTANT('FFFF'X);   /* PURGE                   *
*/* NEW VALUES FOR NCSPLCMD   */                                   0463
*DCL NCSCLCND BIT(16) CONSTANT('0041'X);  /* LOAD CONDITIONALLY  */
*DCL NCSCUCND BIT(16) CONSTANT('0042'X); /* LOAD UNCONDITIONALLY */
*DCL NCSCRSRT BIT(16) CONSTANT('0043'X); /* RESTART 370X OR CLUS  */
*DCL NCSDUCMD BIT(16) CONSTANT('0044'X); /* DUMP 370X  */          0466
*DCL NCSCERPP BIT(16) CONSTANT('0045'X); /* PERFORM ERP DUMP AND   0467
*                                           RELOAD OF 370X  */     0467
*DCL NCSDOUT  BIT(16) CONSTANT('0046'X); /* DIAL OUT                 */
*DCL NCSDCNT  BIT(16) CONSTANT('0047'X); /* DIAL CONTACT             */
*DCL NCSDABDN BIT(16) CONSTANT('0048'X); /* DIAL ABANDON             */
*DCL NCSDENAS BIT(16) CONSTANT('0049'X); /* DIAL ENABLE ANSWER       */
*/*  VALUES FOR NCSCMDB                                              */
*DCL NCSBFME BIT(8) CONSTANT('06'X);     /* SEND POS RESP COMMAND    */
*DCL NCSBEXC BIT(8) CONSTANT('07'X);     /* SEND NEG RESP COMMAND    */
*/*  CONSTANTS FOR DIAL REASON CODES                                 */
*DCL NCSDLRRD BIT(8) CONSTANT('01'X);    /* REDIAL                   */
*DCL NCSDLRQT BIT(8) CONSTANT('02'X);    /* QUIT                     */
*/* NEW VALUES FOR NCSIORC   */                                    0476
*DCL NCSLDAOK BIT(8) CONSTANT('00'X);  /* COMMAND PROCESSED SUCESS */
*DCL NCSLDACT BIT(8) CONSTANT('04'X);  /* NCP ACTIVE-LOAD NOT PERF */
*DCL NCSLDCAN BIT(8) CONSTANT('04'X);  /* RELOAD DECLINED BY OPER  */
*DCL NCSLDIOP BIT(8) CONSTANT('08'X);  /* I/O PURGED               */
*DCL NCSLDNOG BIT(8) CONSTANT('0C'X);  /* COMMAND FAILED           */
*DCL NCSDUCOM BIT(8) CONSTANT('14'X);  /* DUMP COMPLETE            */
*DCL NCSHALTD BIT(8) CONSTANT('18'X);  /* CMD REJECTED,HALT IN PROG*/
*DCL NCSUNREC BIT(8) CONSTANT('1C'X);  /* COMMAND UNRECOGNIZED     */
*DCL NCSNOSTG BIT(8) CONSTANT('20'X);  /* CMD REJ,INSUFF STORAGE   */
*DCL NCSDOS   BIT(8) CONSTANT('00'X);  /* DIAL-OUT SUCCESSFUL      */
*DCL NCSDOF   BIT(8) CONSTANT('04'X);  /* DIAL-OUT UNSUCCESSFUL    */
*DCL NCSDOP   BIT(8) CONSTANT('08'X);  /* DIAL-OUT PENDING         */
*DCL NCSDCS   BIT(8) CONSTANT('00'X);  /* DIAL-CONTACT LOADED      */
*DCL NCSDCF   BIT(8) CONSTANT('0C'X);  /* DIAL-CONTACT FAILED      */
*DCL NCSDAS   BIT(8) CONSTANT('00'X);  /* DIAL-ABANDON CONN COMPLETE*/
*DCL NCSDENSO BIT(8) CONSTANT('00'X);  /* ENABLE ANSWER SUCCESSFUL  */
*DCL NCSDOFHR BIT(8) CONSTANT('04'X);  /* OFFHOOK REQUIRED          */
*DCL NCSDENSF BIT(8) CONSTANT('08'X);  /* ENABLE ANSWER FAIL        */
*/*  NEW VALUES FOR NCSPRMRC    */                                 0494
*DCL NCSFIRM  BIT(8) CONSTANT('10'X);  /* RESTART SUCC,OPENDST REQ */
*DCL NCSEWRN  BIT(8) CONSTANT('11'X);  /* CON LOST,RECOV IN  PROG  */
*/* CONSTANTS FOR TRACE                                            */
*DCL NCSACTLT BIT(16) CONSTANT('0820'X); /* ACTIVATE LINE TRACE    */
*DCL NCSDACLT BIT(16) CONSTANT('0840'X); /* DEACTIVATE LINE TRACE  */
*DCL NCSCACLT BIT(16) CONSTANT('301D'X); /* SSCP ACT LINE TRACE    */
*DCL NCSCDCLT BIT(16) CONSTANT('301E'X); /* SSCP DEACT LINE TRACE  */
*/* DISPLAY COMMAND MODIFIER CONSTANTS                             */
*DCL NCSDPATH BIT(16) CONSTANT('0001'X); /* PATHS                  */
*/* LOCKWORD FORMAT DSECT                                            */
*/*  INITIAL LEVEL                                     001 05/24/74  */
*DCL 1 ISTLOK BDY(WORD) BASED,                                     0501
*     2  LOKCT CHAR(1) BDY(WORD),       /* COUNT OF LOCK OWNERS      */
*     2  LOKCHN PTR(24),                /* ADDR OF NEXT RPH WAITING
*                                          ON LOCK                   */
*        3  LOKCHNG CHAR(3),            /* CHAIN/FLAGS               */
*           4 *        CHAR(2),                                    0501
*           4 *        BIT(8),                                     0501
*             5 *        BIT(6),                                   0501
*             5  LOKPRY BIT(1),         /* PRIORITY FLAG, 1 = ON     */
*             5  LOKXCL BIT(1);         /* EXCLUSIVE FLAG, 1 = ON    */
*DCL LOKXCL1  BIT(32) CONSTANT('00000001'X); /* CONSTANT TO TURN LOKXCL
*                                          ON                        */
*DCL LOKPRY1  BIT(32) CONSTANT('00000002'X); /* CONSTANT TO TURN LOKPRY
*                                          ON                        */
*DCL LOKCHN1  BIT(32) CONSTANT('00FFFFFC'X); /* CONSTANT TO TURN LOKXCL
*                                          AND LOKPRY OFF            */
*DCL LOKCT1   BIT(32) CONSTANT('01000000'X); /* CONSTANT TO MAKE LOKCT
*                                          = 1                       */
*DCL LOKCT255 BIT(32) CONSTANT('FF000000'X); /* CONSTANT TO CHECK FOR
*                                          MAX LOKCT (255)           */
*/*   DEVICE CHARACTERISTICS TABLE - ORIGINATES IN RDT USED TO DEFINE
*    DEVICE CHARACTERISTICS IN DNCB,FMCB AND NIB  */               0507
*/*  INITIAL LEVEL                                     001 08/07/74  */
*DCL  1  ISTDEVCH  BDY(WORD)BASED,                                 0507
*        2  DEVSHCH BIT(8),            /* DEV SCHED CHARACTERISTICS  */
*           3  DEVCHAR  BIT(8),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVINPUT  BIT(1),    /* DEVICE IS FOR INPUT        */
*              4  DEVOTPUT  BIT(1),    /* DEVICE IS FOR OUTPUT       */
*              4  DEVCONVR  BIT(1),    /* DEVICE IS CONVERSATION     */
*                                      /* RN DEFINITION              */
*              4  DEVSUBND  BIT(1),    /* DEVICE HAS SCHEDULABLE     */
*                                      /*   SUB-NODES                */
*              4  DEVSPS BIT(1),       /* DEV IS START PRINT SENSITIVE*
*              4  DEVNNSPT BIT(1),     /* NODE HAS NETWRK MNGMNT SPRT*/
*              4  DEVCCTL BIT(1),      /* NODE HAS CONN CNTRL DEPENDCS*
*              4  DEVRSV01  BIT(1),    /* RESERVED                   */
*        2  DEVTCODE BIT(8),           /* DEVICE TYPE CODES          */
*           3  DEVCHAR2  BIT(8),       /* COMPATIBILITY EXISTING CODE*/
*        2  DEVMCODE BIT(8),           /* DEVICE MODEL CODE           *
*        2  DEVFLAGS BIT(8),           /*USE DEPENDS ON DEVSHCH VALUES*
*           3  DEVFCCTL BIT(4),        /* USED IF DEVICE REQ CONN CTRL*
*              4  DEVCBSC BIT(1),      /* RESET ORDERLY, BI-SYNCH  0507
*                                         TERMINALS EXCEPT 3270'S    */
*              4  DEVCSSL BIT(1),      /*RESET AT END OF COMMAND. 3270'
*                                         AND START/STOP EXCEPT TERMS
*                                         WITH REVERSE BREAK FEATURE */
*                                                                  0507
*              4  DEVCRVB BIT(1),      /* RESET IMMEDIATE. START/STOP
*                                         TERMS WITH REVERSE BREAK 0507
*                                         FEATURE                    */
*              4  DEVCSWL BIT(1),      /* 1=HIGHER NODE IS SWITCH CON-
*                                         NECTION, 0=LEASED CONNECTION*
*           3  DEVCHAR3 BIT(4),        /* COMPATIBILITY EXISTING CODE*/
*              4  DEVCATTN BIT(1),     /* TERMINAL CAN INTERRUPT WITH
*                                         ATTENTION                  */
*              4  DEVCCHEK BIT(1),     /* TERMINAL HAS CHECKING      */
*              4  DEVCSTCL BIT(1),     /* TERMINAL HAS STATION     0507
*                                         CONTROL                    */
*              4  DEVCSLPN BIT(1),     /* TERMINAL HAS SELECTOR PEN  */
*        2  DEVPHYSA CHAR(1),          /* PHYSICAL DEVICE ADDRESS    */
*        2  DEVRSV03 CHAR(3);          /* RESERVED                   */
*/* DEVICE TYPE CODES */                                           0508
*DCL DEV2740 BIT(8) CONSTANT ('01'X);  /* DEVICE IS A 2740           */
*DCL DEV2741 BIT(8) CONSTANT ('02'X);  /* DEVICE IS A 2741           */
*DCL DEV1050 BIT(8) CONSTANT ('03'X);  /* DEVICE IS A 1050           */
*DCL DEVTWX  BIT(8) CONSTANT ('04'X);  /* DEVICE IS A TWX            */
*DCL DEVWTTY BIT(8) CONSTANT ('05'X);  /* DEVICE IS A WTTY           */
*DCL DEV115A BIT(8) CONSTANT ('06'X);  /* DEVICE IS A 115A           */
*DCL DEV83B3 BIT(8) CONSTANT ('07'X);  /* DEVICE IS AN 83B3          */
*DCL DEV2715 BIT(8) CONSTANT ('08'X);  /* DEVICE IS A 2715           */
*DCL DEV2770 BIT(8) CONSTANT ('09'X);  /* DEVICE IS A 2770           */
*DCL DEV2780 BIT(8) CONSTANT ('0A'X);  /* DEVICE IS A 2780           */
*DCL DEV3735 BIT(8) CONSTANT ('0B'X);  /* DEVICE IS A 3735           */
*DCL DEV3780 BIT(8) CONSTANT ('0C'X);  /* DEVICE IS A 3780           */
*DCL DEV1130 BIT(8) CONSTANT ('0D'X);  /* DEVICE IS AN 1130          */
*DCL DEV1800 BIT(8) CONSTANT ('0E'X);  /* DEVICE IS AN 1800          */
*DCL DEV3125 BIT(8) CONSTANT ('11'X);  /* DEVICE IS A 3125           */
*DCL DEV3135 BIT(8) CONSTANT ('12'X);  /* DEVICE IS A 3135           */
*DCL DEVSYS3 BIT(8) CONSTANT ('13'X);  /* DEVICE IS SYS 3            */
*DCL DEV2701 BIT(8) CONSTANT ('14'X);  /* DEVICE IS A 2701 OZ05270   */
*DCL DEV2703 BIT(8) CONSTANT ('15'X);  /* DEVICE IS A 2703 OZ05270   */
*DCL DEV3704 BIT(8) CONSTANT ('16'X);  /* DEVICE IS A 3704           */
*DCL DEV3705 BIT(8) CONSTANT ('17'X);  /* DEVICE IS A 3705           */
*DCL DEV2980 BIT(8) CONSTANT ('18'X);  /* DEVICE IS A 2980           */
*DCL DEV3277 BIT(8) CONSTANT ('19'X);  /* DEVICE IS A 3277           */
*DCL DEV3284 BIT(8) CONSTANT ('1A'X);  /* DEVICE IS A 3284           */
*DCL DEV3286 BIT(8) CONSTANT ('1B'X);  /* DEVICE IS A 3286           */
*DCL DEV3275 BIT(8) CONSTANT ('1C'X);  /* DEVICE IS A 3275           */
*DCL DEV3741 BIT(8) CONSTANT ('1D'X);  /* DEVICE IS A 3741           */
*DCL DEV3747 BIT(8) CONSTANT ('1E'X);  /* DEVICE IS A 3747           */
*DCL DEVMTA  BIT(8) CONSTANT ('28'X);  /* DEVICE IS AN MTA           */
*DCL DEV2972 BIT(8) CONSTANT ('33'X);  /* DEVICE IS A 2972           */
*DCL DEV3271 BIT(8) CONSTANT ('34'X);  /* DEVICE IS A 3271           */
*DCL DEV3272 BIT(8) CONSTANT ('36'X);  /* DEVICE IS A 3272           */
*DCL DEVCC   BIT(8) CONSTANT ('35'X);  /* DEVICE IS A PHYSICAL UNIT  */
*DCL DEV1052 BIT(8) CONSTANT ('64'X);  /* DEVICE IS A 1052           */
*DCL DEV1053 BIT(8) CONSTANT ('65'X);  /* DEVICE IS A 1053           */
*DCL DEV1054 BIT(8) CONSTANT ('66'X);  /* DEVICE IS A 1054           */
*DCL DEV1055 BIT(8) CONSTANT ('67'X);  /* DEVICE IS A 1055           */
*DCL DEV1056 BIT(8) CONSTANT ('68'X);  /* DEVICE IS A 1056           */
*DCL DEV1057 BIT(8) CONSTANT ('69'X);  /* DEVICE IS A 1057           */
*DCL DEV1058 BIT(8) CONSTANT ('6A'X);  /* DEVICE IS A 1058           */
*DCL DEV1092 BIT(8) CONSTANT ('6B'X);  /* DEVICE IS A 1092           */
*DCL DEV1093 BIT(8) CONSTANT ('6C'X);  /* DEVICE IS A 1093           */
*DCL DEVLU   BIT(8) CONSTANT ('6D'X);  /* DEVICE IS A LOGICAL UNIT   */
*DCL DEV545  BIT(8) CONSTANT ('78'X);  /* DEVICE IS A 545            */
*DCL DEV1017 BIT(8) CONSTANT ('79'X);  /* DEVICE IS A 1017           */
*DCL DEV1018 BIT(8) CONSTANT ('7A'X);  /* DEVICE IS A 1018           */
*DCL DEV2203 BIT(8) CONSTANT ('7B'X);  /* DEVICE IS A 2203           */
*DCL DEV2213 BIT(8) CONSTANT ('7C'X);  /* DEVICE IS A 2213           */
*DCL DEV2265 BIT(8) CONSTANT ('7D'X);  /* DEVICE IS A 2265           */
*DCL DEV2502 BIT(8) CONSTANT ('7E'X);  /* DEVICE IS A 2502           */
*DCL DEV50   BIT(8) CONSTANT ('7F'X);  /* DEVICE IS A 50             */
*DCL DEV1255 BIT(8) CONSTANT ('80'X);  /* DEVICE IS A 1255           */
*DCL DEV5496 BIT(8) CONSTANT ('81'X);  /* DEVICE IS A 5496           */
*/* MODEL CODES */                                                 0561
*DCL DEVMOD1 BIT(8) CONSTANT ('00'X);  /* MODEL 1                    */
*DCL DEVMOD2 BIT(8) CONSTANT ('01'X);  /* MODEL 2                    */
*/*              RESOURCE DEFINITION TABLE                           */
*/*  REVISIONS                                         013 07/01/75  */
*DCL                                                               0563
*1  ISTRPRE BDY(WORD) BASED,     /* COMMON PREFIX                    */
*   2  RPRNAME  CHAR(8),         /* RESOURCE NAME                    */
*   2  RPRCOMID FIXED(31),       /* COMMUNICATION ID                 */
*      3  RPRSAF BIT(16),        /* SOURCE ADDRESS FIELD             */
*      3  RPRDAF BIT(16),        /* DESTINATION ADDRESS FIELD-       */
*                             /* CONTAINS DAF OF CTERM IN PORT ENTRY */
*   2  RPRRLOCK CHAR(LENGTH(ISTLOK)),  /* RESOURCE LOCK              */
*   2  RPRELEN  FIXED(15),       /* CURRENT ENTRY LENGTH             */
*   2  RPRPELEN FIXED(15),       /* PREVIOUS ENTRY LENGTH            */
*   2  RPRENTRY BIT(8),          /* FLAG FIELD 1 (ENTRY TYPE)        */
*   2  RPRFLAGA BIT(8),                                            0563
*      3  RPRACT BIT(1),         /* ACTIVE                           */
*      3  RPRINV BIT(1),         /* INVALID                          */
*      3  RPRTIED BIT(1),        /* TIED                             */
*      3  RPRENTBF BIT(1),       /* BUFFER TRACE THIS NODE           */
*      3  RPRENTIO BIT(1),       /* RESERVED                         */
*      3  RPRENTED BIT(1),       /* LAST ENTRY IN RDT SEGMENT        */
*      3  RPRVRYPD BIT(1),       /* VARY PENDING ON ENTRY            */
*      3  RPRLIVE  BIT(1),       /* RESOURCE IS LIVE                 */
*   2  RPRFLAGB BIT(8),          /* FLAG FIELD                       */
*      3  RPRENTVH BIT(1),       /* WHEN 1, ENTRY IS A VTAM HEADER   */
*      3  RPRENTVT BIT(1),       /* WHEN 1, ENTRY IS VTAM            */
*      3  RPRAOPN BIT(1),        /* NODE OPENABLE BY APPLICATION     */
*      3  RPRVIODN BIT(1),       /* VARY I/O HAS BEEN DONE           */
*      3  RPRONLIN BIT(1),       /* NODE VARIED ONLINE               */
*      3  RPRHLVPD BIT(1),       /* VARY PENDING IN HIGHEST        0563
*                                   LEVEL NODE                       */
*      3  RPRVYIMM BIT(1),       /* VARY IMMEDAITE ISSUED FOR NODE   */
*      3  RPRINTST BIT(1),       /* DEVICE IN TEST MODE              */
*   2  RPRCAUSE BIT(8),          /* FLAGS INDICATING CAUSE OF ENTRY
*                                                      INVALIDATION  */
*      3  RPRNOSRT BIT(1),       /* RPRINV SET BECAUSE NO SRTE BUILT */
*      3  RPRCRCPT BIT(1),       /* C/R CHECKPOINT ACTIVE 1=ACTIVE   */
*      3  RPRRSYNC BIT(1),       /* C/R RE-SYNC ON FIRST I/O         */
*                                /* REQUIRED: 1=YES                  */
*      3  RPRRSV03 BIT(5),       /* RESERVED                         */
*   2  RPRPEPCT FIXED(15),       /* VARY PENDING COUNTER             */
*   2  RPRTIOCT FIXED(8),        /* I/O TRACE COUNT                  */
*   2  RPRHDTYP BIT(8),          /* HEADER TYPE                      */
*   2  RPRLGONF PTR(31),         /* SIM. LOGON CHAIN FORWARD PTR     */
*   2  RPRLGONB PTR(31),         /* SIM. LOGON CHAIN BACKWARD PTR    */
*   2  RPRNSNEA PTR(31),         /* NEXT SCHEDULABLE NODE ENTRY ADDR */
*   2  RPRNCBA PTR(31),          /* ADDR OF ASSOCIATED NCB FOR     0563
*                                    OPENED NODES                    */
*   2  RPRDEVCH CHAR(LENGTH(ISTDEVCH)),  /* DEVICE CHARACTERISTICS   */
*   2  RPRRVPT1 PTR(31),         /* RESERVED                         */
*   2  RPRSTPCT FIXED(15),       /* COUNT OF SHOULDER TAPS           */
*   2  RPRSWDAF BIT(16),         /* SWITCHED DAF                     */
*   2  RPRPTHCT FIXED(8),        /* COUNT OF AVAILABLE PATHS       0563
*                                   TO THIS DEVICE                   */
*   2  RPRFLAGD CHAR(1),         /* FLAG BYTE                        */
*      3 RPRLTASN BIT(1),        /* LINE TRACE ACTIVE = 1            */
*      3 RPRCONCT BIT(1),        /* PHYSICAL CONNECTION EXISTS       */
*      3 RPRRSON  BIT(1),        /* RESET ONLINE                     */
*      3 RPRACTP  BIT(1),        /* ACTIVATE IN PROGRESS             */
*      3 RPRCONP  BIT(1),        /* CONTACT IN PROGRESS              */
*      3 RPRRSV05 BIT(2),        /* RESERVED                         */
*      3 RPRINIMM BIT(1),        /* ON=INACTIVATE IMMED. IN PROGRESS */
*   2  RPRFLAGC BIT(8),          /* FLAG FIELD                       */
*      3  RPRCLVPD BIT(1),       /* THIS ENTRY HAS BEEN CLOSED       */
*   2  RPRCONID CHAR(9);         /* CONTROL BLOCK ID                 */
*                                                                  0563
*                                                                  0563
*/* RPRENTRY - FOLLOWING EQUATES ARE FOR THE VARIOUS ENTRY TYPES     */
*DCL RPRENTCM BIT(8) CONSTANT('90'X);  /* ENTRY IS A COMPONENT       */
*DCL RPRENTIN BIT(8) CONSTANT('82'X);  /* ENTRY IS INTERMEDIATE NODE */
*DCL RPRENTTR BIT(8) CONSTANT('80'X);  /* ENTRY IS A TERMINAL        */
*DCL RPRENTUT BIT(8) CONSTANT('75'X);  /* ENTRY IS UTERM             */
*DCL RPRENTCL BIT(8) CONSTANT('70'X);  /* ENTRY IS A CLUSTER         */
*DCL RPRENTLN BIT(8) CONSTANT('50'X);  /* ENTRY IS A LINE            */
*DCL RPRENTLH BIT(8) CONSTANT('03'X);  /* ENTRY IS A LOCAL HEADER    */
*DCL RPRENTGP BIT(8) CONSTANT('30'X);  /* ENTRY IS A GROUP           */
*DCL RPRENTLC BIT(8) CONSTANT('45'X);  /* ENTRY IS A LOCAL DEVICE    */
*DCL RPRENTAH BIT(8) CONSTANT('02'X);  /* ENTRY IS APPLICATION HEADER*/
*DCL RPRENTAP BIT(8) CONSTANT('55'X);  /* ENTRY IS APPLICATION       */
*DCL RPRENTDS BIT(8) CONSTANT('20'X);  /* ENTRY IS LCDO            0575
*                                         (DIALSET)                  */
*DCL RPRENTRN BIT(8) CONSTANT('01'X);  /* ENTRY IS THE RN            */
*DCL RPRENTCC BIT(8) CONSTANT('71'X);  /* ENTRY IS A PU              */
*DCL RPRENTLU BIT(8) CONSTANT('81'X);  /* ENTRY IS LOGICAL UNIT      */
*DCL RPRENTSW BIT(8) CONSTANT('04'X);  /* ENTRY IS SWITCHED          */
*                                      /* SUBAREA HEADER             */
*DCL RPRENTLS BIT(8) CONSTANT('05'X);  /* ENTRY IS LOCAL             */
*                                      /* SUBAREA HEADER             */
*DCL RPRENTPX BIT(8) CONSTANT('72'X);  /* ENTRY IS A PUX             */
*DCL RPRENTLX BIT(8) CONSTANT('10'X);  /* ENTRY IS A LUX             */
*DCL RPRENTDA BIT(8) CONSTANT('51'X);  /* ENTRY IS A DAN             */
*                                                                  0583
*                                                                  0583
*/* THE FOLLOWING IS A PREFIX FOR ALOCATION ENTRIES                  */
*/*   ISTRCL-CLUSTER,ISTRTR-TERMINAL,ISTRCM-COMPONENT                */
*                                                                  0584
*DCL                                                               0584
*1  ISTRCPRE BDY(WORD) BASED,    /* LEVEL 1 DECLARE                  */
*   2  RCPPRE  CHAR(LENGTH(ISTRPRE)),      /* COMMON PREFIX          */
*   2  RCPICELN PTR(31),         /* PTR LOGON ICE QUEUE              */
*   2  RCPLNAPA PTR(31),         /* PTR APLICATION ENTRY FOR SIMLOGON*/
*   2  RCPICEAQ PTR(31),         /* PTR ACQUIRE ICE QUEUE            */
*   2  RCPACETR PTR(31),         /* PTR ACE QUEUE                    */
*   2  RCPBHSI1 CHAR(1),         /* GEN'D BHSET ID                   */
*   2  RCPBHSI2 CHAR(1),         /* OVERRIDING BHSET ID SPECIFIED  0584
*                                   BY USER                          */
*   2  RCPBFLIM PTR(8),          /* BUFFER LIMIT                     */
*   2  RCPPMODE CHAR(1),         /* PERMISSABLE MODES                */
*      3 RCPRBASC BIT(1),        /* 1= BASIC OK                      */
*      3 RCPRRECD BIT(1),        /* 1= RECORD OK                     */
*      3 *        BIT(6),        /* RESERVED                         */
*   2  RCPLGNIN CHAR(20) BDY(WORD), /* INIT LOGON DATA               */
*      3 RCPLGNAP CHAR(8),       /* APPL FOR VTAM SIMLOGON           */
*      3 RCPLGNCT CHAR(8),       /* NAME OF LOGON CHAR TABLE         */
*      3 RCPINTA  PTR(31),       /* ADDR OF INTERPRET TABLE          */
*   2  RCPRSV03 PTR(31),         /* RESERVED FOR C/R                 */
*   2  RCPRSV04 PTR(31),         /* RESERVED FOR C/R                 */
*   2  RCPRSV05 PTR(31);         /* RESERVED FOR C/R                 */
*                                                                  0584
*                                                                  0584
*DCL                                                               0585
*1  ISTRDT BDY(WORD) BASED,      /* LEVEL 1 DECLARE                  */
*   2  RDTPRE CHAR(LENGTH(ISTRPRE)), /* ENTRY PREFIX                 */
*   2  RDTPLEN CHAR(4)BDY(WORD), /* PRIORITY AND LENGTH FIELD        */
*      3  RDTPRIOR,              /* DETERMINES SEGMENT TYPE          */
*         4  * BIT(3),           /*    NOT USED                      */
*         4  RDTPRIAP BIT(1),    /*    APPLICATION SEGMENT           */
*         4  RDTPRILC BIT(1),    /*    LOCAL SEGMENT                 */
*         4  RDTPRIRN BIT(1),    /*    RN SEGMENT                    */
*         4  RDTPRISW BIT(1),    /*    SWITCHED SEGMENT              */
*         4  RDTPRILS BIT(1),    /*    LOCAL SUBAREA SEGMENT         */
*      3  RDTLEN FIXED(24),      /* LENGTH OF RDT                    */
*   2  RDTFORW PTR(31),          /* FOREWARD POINTER                 */
*   2  RDTBACK PTR(31),          /* BACKWARD POINTER                 */
*   2  RDTFLAGS BIT(16),         /* SEGMENT FLAGS,UNUSED/REUSED      */
*   2  RDTCTSNT FIXED(15),       /* COUNT OF SNT ENTRIES FOR       0585
*                                   SEGMENT                          */
*   2  RDTMAXID PTR(8),          /* MAXIMUM NODE ID FOR            0585
*                                   NETWORK                          */
*   2  RDTNODID PTR(8),          /* NODE ID FOR THIS SEGMENT         */
*   2  RDTLGCT  PTR(8),          /* COUNT OF LOGONS OUTSTANDING      */
*   2  RDTFLAGB BIT(8),          /* FLAG BYTE                        */
*      3 RDTOUERP BIT(1),        /* 1 = REPEAT ERP                   */
*      3 RDTPRGDN BIT(1),        /* 1 = PURGE ISSUED                 */
*      3 RDTCTPGD BIT(1),        /* 1 = CONTACT PURGED               */
*      3 RDTCTCFL BIT(1),        /* HIGHER FAILURE-CONTACT FLUSHED   */
*      3 RDTBHSET BIT(1),        /* BHSET REQUIRED                   */
*      3 RDTRSV01 BIT(3),        /* RESERVED                         */
*   2  RDTVPAB  PTR(31),         /* ADDR OF VARY PAB                 */
*   2  RDTEPAB  PTR(31),         /* ADDR OF ERP PAB                  */
*   2  RDTDPAB  PTR(31),         /* ADDR OF DUMP/LOAD/RESTART PAB    */
*   2  RDTTPAB  PTR(31),         /* TOLTEP SSCP PAB                  */
*   2  RDTVYRPH PTR(31),         /* @ OF VARY RPH WAITING            */
*                                /* FOR RESTART COMPLETION           */
*      3 RRNVYRPH PTR(31),       /* DELETE ALIAS IN NEXT             */
*                                /* FIRST SNA/2 BUILD                */
*   2  RDTSTCNT PTR(8),          /* ACTIVE SUBNODE COUNT             */
*      3 RRNSTCNT PTR(8),        /* DELETE ALIAS IN NEXT             */
*                                /* FIRST SNA/2 BUILD                */
*   2  *        CHAR(3),         /* RESERVED                         */
*   2  RDTCRSDS CHAR(8),         /* C/R DATA SET IDENTIFIER          */
*                                /* BLANK IMPLIES NOT SPECIFIED      */
*   2  RDTCRSPW CHAR(8),         /* C/R DATASET PASSWORD             */
*                                /* BLANK IMPLIES NOT SPECIFIED      */
*   2  RDTVSRPL PTR(31);         /* C/R PTR TO VSAM RPL              */
*                                                                  0585
*                                                                  0585
*DCL                                                               0586
*1  ISTRAP BDY(WORD) BASED,      /* APPLICATION ENTRY                */
*   2  RAPPRE CHAR(LENGTH(ISTRPRE)), /*  USE ISTRPRE DSECT           */
*   2  RAPACBA PTR(31),          /*   POINTER TO ACB                 */
*   2  RAPACDEB PTR(31),         /*  POINTER TO ACBDEB               */
*   2  RAPAPPWD CHAR(8),         /* APPLICATION PASSWORD             */
*   2  RAPICELG PTR(31),         /* ANCHOR FOR LOGON ICE TO APLICATION*
*   2  RAPICEAC PTR(31),         /* ANCHOR ACEPT ICE FOR APPLICATION */
*   2  RAPICEAQ PTR(31),         /*  ANCHOR ACQUIRE ICE BY APPLI     */
*   2  RAPACEAP PTR(31),         /* ANCHOR FOR APPLICATION ACES      */
*   2  RAPTRPRE FIXED(15),       /* COUNT OF PREMPTED TERMINALS      */
*   2  RAPACEQD FIXED(15),       /* COUNT OF ACES QUEUED             */
*   2  RAPFLG BIT(8),            /*  FLAG FIELD                      */
*      3 RAPABLGN BIT(1),        /*  PERMANENTLY BLOCK LOGONS BIT    */
*      3 RAPAQUI BIT(1),         /* QUIESCE IN PROCESS               */
*      3 RAPASLGI BIT(1),        /*  APPLICATION FIRST TIME LOGON  0586
*                                    ISSUED FLAG                     */
*      3 RAPATLGN BIT(1),        /*  TEMPORARILY BLOCK LOGONS BIT    */
*      3 RAPRSV03 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV04 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV05 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV06 BIT(1),        /*  RESERVED                        */
*   2  RAPFLGB BIT(8),           /* AUTHORIZATION FLAGS              */
*      3 RAPALLF BIT(1),         /* ALL FUNCTIONS AUTH.              */
*      3 RAPABLCK BIT(1),        /* BLOCK I/O AUTH.                  */
*      3 RAPAPASS BIT(1),        /* PASS AUTH.                       */
*      3 RAPAPRMT BIT(1),        /* PREEMPT AUTH.                    */
*      3 RAPAACQ BIT(1),         /* ACQUIRE AUTH.                    */
*      3 RAPAPPO  BIT(1),        /* RNO PPO (PRIMARY PROGRAM AUTH    */
*      3 RAPASPO  BIT(1),        /* RNO SPO (SECONDARY PROGRAM AUTH  */
*      3 RAPANVPC BIT(1),        /* NO VSPACE AUTHORIZED             */
*   2  RAPFLGC BIT(8),           /* AUTHORIZATION FLAGS RESERVED     */
*      3 RAPRSV10 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV11 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV12 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV13 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV14 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV15 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV16 BIT(1),        /*  RESERVED                        */
*      3 RAPRSV17 BIT(1),        /*  RESERVED                        */
*   2  RAPBFACT PTR(8),          /* BUFFER LIMIT FACTOR              */
*   2  RAPRVPT1 PTR(31),         /*  RESERVED                        */
*   2  RAPRVPT2 PTR(31);         /*  RESERVED                        */
*                                                                  0586
*                                                                  0586
*DCL                                                               0587
*1  ISTRLC BDY(WORD) BASED,      /* LOCAL ENTRY                      */
*   2  RLCPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX               */
*   2  RLCADR PTR(31),                                             0587
*      3  RLCFLAG BIT(8),        /* FLAG BYTE                        */
*         4  RLCRSV22 BIT(1),    /* RESERVED                         */
*         4  RLCRBISA BIT(1),    /* INITIAL STATUS - 1 = ACTIVE      */
*         4  RLCRSV14 BIT(3),    /* UNUSED/RESERVED                  */
*         4  RLCACNT BIT(1),     /* MESSAGE BLOCK ACCEPTED           */
*         4  RLCRSVDE BIT(2),    /* RESERVED                         */
*      3  RLCUCBAD PTR(24),      /* UCB /PUB ADDRESS                 */
*   2 RLCLCCUA CHAR(3),          /* DEVICE CHANNEL UNIT ADDR         */
*   2 RLCRVPT1 CHAR(1),          /* RESERVED                         */
*   2 RLCRVPT2 PTR(31);          /* RESERVED                         */
*                                                                  0587
*                                                                  0587
*DCL                                                               0588
*1  ISTRRN BDY(WORD) BASED,      /* RN ENTRY                         */
*   2  RRNPRE CHAR(LENGTH(ISTRDT)),  /*  USE ISTRDT DSECT            */
*   2  RRNADR PTR(31),                                             0588
*      3  RRNFLAG BIT(8),                                          0588
*         4  RRNRSV89 BIT(1),    /* RESERVED                         */
*         4  RRNRBISA BIT(1),    /* INITIAL STATUS 1 = ACTIVE        */
*         4  RRNLCSIP BIT(1),    /* NODE BEING ACTIVATED             */
*         4  RRNLCDIE BIT(1),    /* HIGHER NODE NOT SUCCESFULLY      */
*                                /*             ACTIVATED            */
*         4  RRNLCDIP BIT(1),    /* NODE BEING DEACTIVATED           */
*         4  RRNERPIP BIT(1),    /* ERP IN PROCESS                   */
*         4  RRNDSTCT BIT(1),    /* DEACT TO DECREMENT STCNT         */
*         4  RRNRSV11 BIT(1),    /* UNUSED/RESERVED                  */
*      3  RRNUCBAD PTR(24),      /* UCB/PUB ADDR                     */
*         4 RRNCHQI  BIT(8),     /* CHANNEL QUEUE INDEX              */
*         4 RRNLUBA  PTR(16),    /* DESCRIBE ENTRY IN PUB            */
*                                /* OWNERSHIP TABLE                  */
*   2  RRNGRPA PTR(31),          /* POINTER TO FIRST GROUP ENTRY     */
*   2  RRNRNCUA CHAR(3),         /* CHANNEL UNIT ADDR                */
*   2  RRNRLDIP FIXED(8),        /* REMOTE LOAD/DUMP IN PROG. COUNT  */
*   2  RRNTRENT PTR(31),         /* ADDR TERM ENTRY IN LOCAL         */
*   2  RRNBHSET PTR(31),         /* POINTER TO TABLE OF BHSET NAMES  */
*   2  RRNCTBHS FIXED(15),       /* COUNT OF BHSET NAMES IN RRNBHSET */
*   2  RRNCTEGP FIXED(15),       /* COUNT OF GROUP ENTRIES FOR RN    */
*   2  RRNCTELI FIXED(15),       /* COUNT OF LINE ENTRIES FOR RN     */
*   2  RRNCTECL FIXED(15),       /* COUNT OF CLUSTER ENTRIES FOR RN  */
*   2  RRNCTETR FIXED(15),       /* COUNT OF TERMINAL ENTRIES FOR RN */
*   2  RRNCTEIN FIXED(15),       /* COUNT OF INT. NODE ENTRIES FOR RN*/
*   2  RRNCTECM FIXED(15),       /* CNT OF COMPONENT ENTRIES FOR RN  */
*   2  RRNCTENT FIXED(15),       /* # ALL ENTRIES IN 370X RDT SEGMENT*/
*   2  RRNRDF CHAR(4),           /*  RESOURCE DEFINITION FLAG        */
*      3  RRNRDFA  BIT(8),       /* FLAGS (WORD 1 BYTE 1)            */
*         4  RRNRASHT BIT(1),    /* AUTO NETWORK SHUTDOWN            */
*         4  RRNRAIPL BIT(1),    /* AUTO IPL ON RN FAILURE           */
*         4  RRNRADMP BIT(1),    /* AUTO DUMP ON RN FAILURE          */
*         4  RRNRASYN BIT(1),    /* C/R AUTOMATICALLY RESYNCHRONIZED */
*                                /* IF ALREADY LOADED NCP            */
*                                /* 0=NO, 1=YES                      */
*         4  RRNRAOLT BIT(1),    /* ON-LINE TERMINAL TEST            */
*         4  RRNRBREM  BIT(1),   /* REMOTE RN FLAG                   */
*         4  RRNRANCP BIT(1),    /* GENERATION TYPE NCP              */
*         4  RRNRAPEP BIT(1),    /* GENERATION TYPE PEP              */
*      3  RRNRDFB BIT(16),       /* FLAG FIELD B (RDF)               */
*         4  RRNRBMDL BIT(1),    /* (=1 IF 3705) ELSE 3704           */
*         4  RRNRSV02 BIT(1),    /* RESERVED                         */
*         4  RRNRBCCL BIT(1),    /* LOOSELY COUPLED CHANNEL          */
*         4  RRNRBCCT BIT(1),    /* TIGHTLY COUPLED CHANNEL          */
*         4  RRNRBSEC BIT(1),    /* SECONDARY CHANNEL EXIST          */
*         4  RRNRBCT1 BIT(1),    /* PRIM CHAN TYPE (0=TYPE1,1=TYPE2) */
*         4  RRNRBCT2 BIT(1),    /* SEC CHAN TYPE (0=TYPE1,1=TYPE2)  */
*         4  RRNRSV03 BIT(1),    /* RESERVED                         */
*         4  RRNRBBUP BIT(1),    /* BRINGUP IS TO BE EXERCISED     0588
*                                         FOR THIS RN DURING IPL     */
*         4  RRNVYDON BIT(1),    /* RDT SEG IS BEING FREED           */
*         4  RRNRSV01 BIT(5),    /* RESERVED                         */
*         4  RRNPTASL BIT(1),    /* SOME PORT SOLICITOR IS WAITING 0588
*                                   TO BE REDRIVEN BY CLSDST         */
*      3  RRNRSV55 CHAR(1),      /*  RESERVED                        */
*   2  RRNCMF CHAR(4),           /*  FLAG FIELDS FOR COMMANDS        */
*      3  RRNCMFA  BIT(8),       /* FLAG FIELD A -COMMANDS           */
*         4  RRNCAALL BIT(1),    /* PHYSICAL DISCONNECT              */
*         4  RRNCAATD BIT(1),    /* ACTIVATE DEVICE                  */
*         4  RRNCAATG BIT(1),    /* ACTIVATE GROUP                   */
*         4  RRNCAATI BIT(1),    /* ACTIVATE INVITES                 */
*         4  RRNCAMBH BIT(1),    /* MODIFY BLOCK HANDLER SET         */
*         4  RRNCACDT BIT(1),    /* CHANGE DATE AND TIME             */
*         4  RRNCADTD BIT(1),    /* DEACTIVATE DEVICE                */
*         4  RRNCADGO BIT(1),    /* DEACTIVATE GROUP ORDERLY         */
*      3  RRNCMFB  BIT(8),       /* FLAG FIELD B - COMMANDS          */
*         4  RRNCBDLO BIT(1),    /* DEACTIVATE LINE ORDERLY          */
*         4  RRNCBDLH BIT(1),    /* DEACTIVATE LINE HALT             */
*         4  RRNCBDLR BIT(1),    /* DISPLAY LINE RESOURCE ID         */
*         4  RRNCBRDS BIT(1),    /* REQUEST DEVICE STATUS            */
*         4  RRNCBRLS BIT(1),    /* REQUEST LINE STATUS              */
*         4  RRNCBNPL BIT(1),    /* CHANGE LINE NEG POLL RESPONSE LIM*/
*         4  RRNCBMOD BIT(1),    /* COPY/SET DESTINATION NODE        */
*         4  RRNCBALT BIT(1),    /*  ACTIVATE LINE TRACE             */
*      3  RRNCMFC  BIT(8),       /* FLAG FIELD C - COMMANDS          */
*         4  RRNCCRCN BIT(1),    /* RESET CONDITIONAL                */
*         4  RRNCCRDQ BIT(1),    /* RESET DEVICE QUEUE               */
*         4  RRNCCRST BIT(1),    /* REQUEST DEVICE STATISTICS        */
*         4  RRNCCCRC BIT(1),    /* CHANGE RETRY COUNTS              */
*         4  RRNCCRIM BIT(1),    /* RESET IMMEDIATE                  */
*         4  RRNCCRCM BIT(1),    /* RESET CONTROL MODE               */
*         4  RRNCCSIM BIT(1),    /* COPY/REPLACE SESSION INIT INFO   */
*         4  RRNCCCSL BIT(1),    /* CHANGE SESSION LIMIT             */
*      3  RRNCMFD  BIT(8),       /* FLAG FIELD D - COMMANDS          */
*         4  RRNCDCSP BIT(1),    /* CHANGE SERIVCE PAUSE             */
*         4  RRNCDSTD BIT(1),    /* DISPLAY STORAGE                  */
*         4  RRNCDDTL BIT(1),    /* CHANGE DEVICE TRANSMIT LIMIT     */
*         4  RRNCDBCK BIT(1),    /* SWITCHED NETWORK BACKUP          */
*         4  RRNCDDSI BIT(1),    /* COPY/REPLACE DEV SESSION INIT INFO*
*         4  RRNCDREC BIT(1),    /* RESET AT END OF COMMAND          */
*         4  RRNREMPO BIT(1),    /* REMOTE POWER OFF                 */
*         4 RRNRSV05  BIT(1),    /*       NOT  USED                  */
*   2  RRNFLUX  PTR(31),         /* POINTER TO FIRST LUX             */
*   2  RRNCPLUB CHAR(6),         /* SYMBOLIC UNIT NAME OF NCP DATASET*/
*   2  RRNEPADR PTR(15),         /* EP SUBCHANNEL ADDRESS            */
*   2  RRNNMDPD  CHAR(8),        /* FILENAME FOR DUMP DATA SET       */
*      3  RRNDPLUB CHAR(6),      /* LUB NAME FOR DUMP DATASET        */
*      3  RRNPUBI  BIT(8),       /* PUB INDEX                        */
*      3  RRNRSV88 CHAR(1),      /* RESERVED-DOS ONLY                */
*   2  RRNRSV04  CHAR(6),        /* RESERVED                         */
*   2  RRNDELAY  CHAR(2),        /* INITIAL VALUE FROM DELAY         */
*   2  RRNNMNCP  CHAR(8),        /* DSNAME FOR NCP LOAD MODULE       */
*   2  RRNHPRE PTR(16),          /* HOST PREFIX INFORMATION          */
*      3  RRNHLENH PTR(8),       /* LENGTH OF HOST HEADER PREFIX     */
*      3  RRNHLENT PTR(8),       /* LENGTH OF HOST TEXT PREFIX       */
*   2  RRNHBUFS FIXED(15),       /* SIZE OF BUFFER UNITS FOR HOST    */
*   2  RRNCTPCC PTR(8),          /* CNT OF BUFFERS RECEIVING PCCU DATA*
*   2  RRNNCPNM CHAR(7),         /* NAME OF NCP LOAD MOD 7 CHAR MAX  */
*   2  RRNMSIZE PTR(31),         /* MAX SIZE OF SEND                 */
*   2  RRNRPLPT PTR(31),         /* C/R POINTER TO RPL               */
*   2  RRNNCSPL PTR(31),         /* POINTER TO NCSPL                 */
*   2  RRNLASTE PTR(31),         /* PTR TO LAST ENTRY IN RN SEGMENT  */
*   2  RRNRDCUA CHAR(3),         /* DEFAULT CUA                      */
*   2  *        PTR(8),          /* RESERVED                         */
*   2  RRNRINNM CHAR(8);         /* DEFAULT INNODE NAME IN LOCAL   0588
*                                   RDT TO CONNECT REMOTE RN         */
*                                                                  0588
*DCL                                                               0589
*1  ISTRGP BDY(WORD) BASED,      /* GROUP ENTRY                      */
*   2  RGPPRE CHAR(LENGTH(ISTRPRE)),        /*  USE ISTRPRE DSECT    */
*   2  RGPFLG BIT(8),            /*  FLAG FIELD                      */
*      3  RGPADIL BIT(1),        /* =1 SWITCHED, =0 NON-SWIT         */
*      3  RGPASS  BIT(1),        /* START/STOP                       */
*      3  RGPABSC  BIT(1),       /* BINARY SYNCHRONOUS               */
*      3  RGPASDLC BIT(1),       /* DATA LINK CONTROL                */
*      3 RGPRSV02  BIT(4),       /*     NOT USED                     */
*   2  RGPRSV03 FIXED(8),        /* USED TO FORCE ALINEMENT          */
*   2  RGPCTELN FIXED(15),       /* COUNT OF LINE ENTRIES FOR GROUP  */
*   2  RGPCTECL FIXED(15),       /* CNT OF CLUSTER ENTRIES FOR GROUP */
*   2  RGPCTETR FIXED(15),       /* CNT TERMINAL ENTRIES FOR GROUP   */
*   2  RGPCTEIN FIXED(15),       /* COUNT OF INNODE ENTRIES FOR GROUP*/
*   2  RGPCTECM FIXED(15),       /* CNT COMPONENT ENTRIES FOR GROUP  */
*   2  RGPRVPT1 PTR(31),         /* RESERVED                         */
*   2  RGPRVPT2 PTR(31);         /* RESERVED                         */
*                                                                  0589
*                                                                  0589
*DCL                                                               0590
*1  ISTRLN BDY(WORD) BASED,      /* LINE ENTRY                       */
*   2  RLNPRE CHAR(LENGTH(ISTRPRE)), /* USE COMMON PREFIX            */
*   2  RLNADR PTR(31),                                             0590
*      3  RLNFLAG BIT(8),                                          0590
*         4  RLNEAM   BIT(1),    /* ENABLE ANSWER MODE DONE          */
*         4  RLNRBISA BIT(1),    /* INITIAL STATUS 1=ACTIVE          */
*         4  RLNRSV01 BIT(6),    /* RESERVED                         */
*      3  RLNUCBAD PTR(24),      /* UCB/PUB ADDRESS                  */
*         4  RLNCUA CHAR(3),     /* NOT USED                         */
*   2  RLNCTECL FIXED(15),       /* CNT OF CLUSTER ENTRIES FOR LINE  */
*   2  RLNCTETR FIXED(15),       /* CNT OF TERMINAL ENTRIES FOR LINE */
*   2  RLNCTEIN FIXED(15),       /* COUNT OF INNODE ENTRIES FOR LINE */
*   2  RLNCTECM FIXED(15),       /* CNT OF COMPONENT ENTRIES FOR LINE*/
*   2  RLNACTCT FIXED(15),       /* COUNT OF COMPONENTS, CLUSTERS  0590
*                                             AND TERMINALS ON LINE  */
*   2  RLNSTAT1 BIT(8),          /* LINK TRAP STATUS                 */
*      3 RLNTRAP  BIT(1),        /* INTERCEPT NEXT LINK OPERATION    */
*      3 RLNLRST  BIT(1),        /* LINK RESTART COND CAUSED TRAP    */
*      3 RLNINOPL BIT(1),        /* LINK INOP CONDITION CAUSED TRAP  */
*      3 RLNINOPP BIT(1),        /* PU INOP CONDITION CAUSED TRAP    */
*      3 RLNVD    BIT(1),        /* VARY INACT CONDITION CAUSED TRAP */
*      3 RLNRSV03 BIT(3),        /* RESERVED                         */
*    2 RLNSTAT2 BIT(8),          /* LINK NORMAL STATUS               */
*      3 RLNOHIN  BIT(1),        /* OFFHOOK REPORTED TO SW SUBAREA-  */
*                                /* REPLY DUE                        */
*      3 RLNINUSE BIT(1),        /* LINK RESOURCES ALLOCATED TO PU   */
*      3 RLNRSV04 BIT(6),        /* RESERVED                         */
*   2  RLNRDF CHAR(4),           /*  RESOURCE DEFINITION FLAG        */
*      3  RLNRDFA  BIT(8),       /* FLAGS FIELD A                    */
*         4  RLNRACNT BIT(2),    /*  NEXT TWO FIELDS                 */
*            5  RLNRACAT BIT(1), /* CALL INITIATOR-TERMINAL          */
*            5  RLNRACAN BIT(1), /* CALL INITIATOR-NCP               */
*         4  RLNGANSW BIT(1),    /* C/R GENNED IN ANSWER MODE, 1=YES */
*         4  RLNPORT  BIT(1),    /* THIS IS A PORT ENTRY             */
*         4  RLNIDV   BIT(1),    /* THIS IS AN ID VERIFIED PORT      */
*         4  RLNRAEP  BIT(1),    /* TYPE IS EP                       */
*         4  RLNRANCP BIT(1),    /* TYPE IS NCP                      */
*         4  RLNRAPEP BIT(1),    /* TYPE IS PEP                      */
*      3  RLNRDFB  BIT(8),       /* FLAGS FIELD B                    */
*         4  RLNRBUSE BIT(1),    /* EP/NCP USE  1=NCP                */
*         4  RLNANSWR BIT(1),    /* ON = SEND ENABLE ANSWER          */
*                                /* AT ACTIVATE                      */
*         4  RLNAUTOD BIT(1),    /* ON=AUTODIAL, OFF=MANUAL          */
*         4  RLNRSV0B BIT(1),    /* RESERVED                         */
*         4  RLNTTV   BIT(1),    /* THIS IS TERM TYPE VERIFICATION 0590
*                                   PORT                             */
*         4  RLNRAPOL BIT(1),    /* POLLED LINE                      */
*         4  RLNRATRN BIT(1),    /* SDLC LINE                        */
*         4  RLNMULTP BIT(1),    /* 0 = POINT TO POINT,            0590
*                                   1 = MULTI POINT                  */
*      3  RLNRDFC  BIT(8),       /* FLAGS FIELD C - LINE CODES       */
*                                /* SEE CONSTANTS FOR DEFINITION     */
*      3  RLNRDFD  BIT(8),       /* FLAGS FIELD D - RESERVED         */
*   2  RLNAUTOA FIXED(15),       /* AUTOCALL ADDRESS                 */
*   2  RLNRDSLM FIXED(8),        /* SCHED. LIM BASED ON LINE SPEED 2-4*
*   2  RLNCTSES FIXED(8),        /* COUNT OF CONCURRENT SESSIONS     */
*   2  RLNACTRM PTR(8),          /* COUNT OF ACTIVE REMOTES FOR THIS
*                                   TRUNK                            */
*   2  RLNRESV1 BIT(8),          /* RESERVED/UNUSED                  */
*   2  RLNACTSN FIXED(15),       /* COUNT ACTIVE NODES ON LINK       */
*   2  RLNPOLMT FIXED(8),        /* NEG POLL RESPONSE LIMIT          */
*   2  RLNPAUSE FIXED(8),        /* POLL DELAY/PAUSE                 */
*   2  RLNCRFLG BIT(8),          /* FLAG-CONFIGURATION RESTART       */
*      3 RLNACTLN BIT(1),        /* ACTIVATE LINK OK                 */
*      3 RLNSWNCP BIT(1),        /* SWITCH PEP LINE TO NCP OK        */
*      3 RLNLSCMD BIT(3),        /* LINE SCHEDULING COMMANDS       0590
*                                   ISSUED OK                        */
*        4 RLNNPRLM BIT(1),      /* CHNG NEG POLL RESP LIMIT OK      */
*        4 RLNSESLM BIT(1),      /* CHNG SESSION LIMIT OK            */
*        4 RLNSVSKP BIT(1),      /* CHNG SERVICE SEEK PAUSE OK       */
*      3 RLNSWEP  BIT(1),        /* SWITCH TO EP                     */
*      3 RLNCRRSV BIT(2),        /* RESERVED FOR CONFIG RESTART      */
*   2  *        CHAR(1),         /* RESERVED                         */
*   2  RLNX2SW  PTR(31),         /* ADDRESS OF 370X TO SWITCH        */
*                                /* COMMUNICATION NCSPL              */
*   2  RLNNCSPL PTR(31),         /* ADDRESS OF SPIN-OFF NCSPL        */
*                                /* FOR VARY DEACTIVATE              */
*   2  RLNRVPT2 PTR(31);         /* RESERVED                         */
*                                                                  0590
*                                                                  0590
*DCL RLNRCEDC BIT(8) CONSTANT('01'X);  /* EBCDIC (CONSTANTS)         */
*DCL RLNRCUSA BIT(8) CONSTANT('02'X);  /* USASCII                    */
*DCL RLNRCBCD BIT(8) CONSTANT('03'X);  /* BCD                        */
*DCL RLNRCEBC BIT(8) CONSTANT('04'X);  /* EBCD                       */
*DCL RLNRCCOR BIT(8) CONSTANT('05'X);  /* COR                        */
*DCL RLNRCKAT BIT(8) CONSTANT('06'X);  /* KATAKANA                   */
*DCL RLNRCIT2 BIT(8) CONSTANT('08'X);  /* ITA2                       */
*DCL RLNRCZS3 BIT(8) CONSTANT('09'X);  /* ZSC3                       */
*                                                                  0598
*                                                                  0598
*DCL                                                               0599
*1  ISTRPT BDY(WORD) BASED,        /* PORT ENTRY                     */
*   2 RPTLN CHAR(LENGTH(ISTRLN)),  /* INCLUDE LINE ENTRY             */
*   2 RPTLNCID BDY(WORD) CHAR(4),  /* COMM ID OF LINE                */
*     3 RPTLNSAF CHAR(2),          /* SAF                            */
*     3 RPTLNDAF CHAR(2),          /* DAF                            */
*   2 RPTCTNM CHAR(8),             /* CTERM NAME                     */
*   2 RPTDITT PTR(31),             /* POINTER TO DITT TABLE          */
*     3 RPTDIVT PTR(31),           /* POINTER TO DIVT TABLE          */
*   2 RPTATERM PTR(31),            /* POINTER TO ASSOCIATED ENTRY    */
*   2 RPTUTERM PTR(31),            /* POINTER TO UTERM ENTRY         */
*   2 RPTFLAG1 CHAR(1),            /* PORT SOLICITOR FLAGS           */
*     3  RPTASLEP BIT(1),          /* THIS PORT SOLICITOR IS WAITING
*                                     TO BE REDRIVEN BY CLSDST       */
*     3 RPTVRYPD BIT(1),           /* VARY PENDING IN THIS CTERM     */
*     3 RPTHLVPD BIT(1),           /* VARY PENDING IN HIGHER LEVEL 0599
*                                     NODE                           */
*     3 RPTONLIN BIT(1),           /* ONLINE/OFFLINE(VARY)           */
*     3 RPTVIODN BIT(1),           /* I/O DONE FOR THIS NODE         */
*     3 RPTVYIMM BIT(1),           /* VARY IMM ISSUED FOR PORT       */
*     3 RPTDYNAM BIT(1),           /* BHSET = DYNAMIC                */
*     3 RPTISTAT BIT(1),           /* CTERM(PORT) IS INITIALLY ACTIVE*/
*                                  /* 1 = YES                        */
*   2 RPTRSV01 CHAR(1),            /* RESERVED                       */
*   2 RPTDAFSV BIT(16),            /* SAVE TERMINAL DAF              */
*   2 RPTPEPCT FIXED(15),          /* PEP COUNT FOR CTERM            */
*   2 RPTPTHCT FIXED(15),          /* PATH COUNT FOR CTERM           */
*   2 RPTNSNSV PTR(31),            /* SAVE TERMINAL NEXT SCHED NODE
*                                     POINTER                        */
*   2  RPTRSV02 PTR(31),           /* RESERVED                       */
*   2  RPTRSV03 PTR(31);           /* RESERVED                       */
*                                                                  0599
*                                                                  0599
*DCL                                                               0600
*1  ISTRCL BDY(WORD) BASED,      /* CLUSTER ENTRY                    */
*   2  RCLPRE CHAR(LENGTH(ISTRPRE)),    /* USE COMMON PREFIX         */
*   2  RCLADR PTR(31),                                             0600
*      3  RCLFLAG BIT(8),                                          0600
*         4  RCLRSV22 BIT(1),    /* RESERVED                         */
*         4  RCLRBISA BIT(1),    /* INITIAL STATUS 1=ACTIVE          */
*         4  RCLBATCH BIT(1),    /* BATCHED MESSAGE INPUT          0600
*                                   FEATURE                          */
*         4  RCLRSV33 BIT(5),    /* RESERVED                         */
*      3  RCLGPADR PTR(24),      /* ADDRESSING INFORMATION POINTER 0600
*                                                  (ADDR RCLCNGP)    */
*   2  RCLCTETR FIXED(15),       /* CNT TERMINAL ENTRIES FOR CLUSTER */
*   2  RCLCTECM FIXED(15),       /* CNT COMPONENT ENTRIES FOR CLUSTER*/
*   2  RCLRSV01 FIXED(15),       /* FILLER TO FORCE ALIGNMENT        */
*   2  RCLCTNGP FIXED(15),       /* GPOLL CHARACTER COUNT            */
*   2  RCLGPOLA PTR(31),         /* GPOLL CHARACTER STRING POINTER   */
*   2  RCLRVPT1 PTR(31),         /* RESERVED                         */
*   2  RCLRVPT2 PTR(31);         /* RESERVED                         */
*                                                                  0600
*                                                                  0600
*DCL                                                               0601
*1  ISTRTR BDY(WORD) BASED,      /* TERMINAL AND/OR COMPONENT ENTRY  */
*   2  RTRCRPR CHAR(LENGTH(ISTRCPRE)),     /* USE ISTRCPRE DSECT     */
*   2  RTRADR PTR(31),                                             0601
*      3  RTRFLAG BIT(8),                                          0601
*         4  RTRRSV21 BIT (1),   /* RESERVED */                    0601
*         4  RTRRBISA BIT(1),    /* INITIAL STATUS 1 = ACITVE        */
*         4  RTRRSV51 BIT(3),    /* RESERVED                         */
*         4  RTRVTERM BIT(1),    /* VTERM TERMINAL ENTRY             */
*         4 RTRRSV22 BIT(2),     /* UNUSED                           */
*      3  RTRADRPT PTR(24),      /* TO BE USED FOR POINTER TO      0601
*                                            ADDRESSING INFORMATION  */
*   2  RTRCTECM FIXED(15),       /* COUNT OF COMPONENT             0601
*                                               ENTRIES FOR TERMINAL */
*   2  RTRRSV01 FIXED(15),       /*  FILLER TO FORCE ALINEMENT       */
*   2  RTRRSV45 CHAR(4),         /* RESERVED                         */
*   2  RTRRDFA  BIT(8),          /* FLAG FIELD A                     */
*      3  RTRRAATN BIT(1),       /* TERMINAL CAN INTERRUPT PCCU      */
*      3  RTRRAALL BIT(3),       /* 3 FLAG FIELD                     */
*         4  RTRRAPT1 BIT(1),    /* PT1 BLOCK HANDLER FLAGS          */
*         4  RTRRAPT2 BIT(1),    /* PT2                              */
*         4  RTRRAPT3 BIT(1),    /* PT3                              */
*      3  RTRRACDT BIT(1),       /* CRITICAL DATA FLAG               */
*      3  RTRRSV60 BIT(1),       /* RESERVED                         */
*      3  RTRRACTR BIT(1),       /* LOGICAL DEVICE FLAG              */
*      3  RTRRSV02 BIT(1),       /* UNUSED                           */
*   2  RTRRDFB  BIT(8),          /* FLAG FIELD B - RESOURCE DEF      */
*      3  RTRRBECT BIT(1),       /* EMBEDDED LINE CONTROL            */
*      3  RTRRBEND BIT(1),       /* EOT/EOB                          */
*      3  RTRRSV32 BIT(6),       /* RESERVED                         */
*   2  RTRRDFC  BIT(8),          /* FLAG FIELD C - RESOURCE DEF      */
*      3  RTRRCIT1 BIT(1),       /* EIB CHAR AFTER ITB ON RECV       */
*      3  RTRRCIT2 BIT(1),       /* EIB CHAR AFTER ITB ON SEND       */
*      3  RTRRCPT3 BIT(1),       /* DEVICE HAS PT3 BHSET             */
*      3  RTRRCBLK BIT(1),       /* RECORD DATA - BLOCK              */
*      3  RTRRCMSG BIT(1),       /* RECORD DATA - MESSAGE            */
*      3  RTRRCXMS BIT(1),       /* RECORD DATA - XMISSION           */
*      3  RTRRSV23 BIT(2),       /* RESERVED/UNUSED                  */
*   2  RTRRDFD  BIT(8),          /* FLAG FIELD D - RESERVED          */
*      3  RTRRDBHN  BIT(1),      /* BHSET = NONE                     */
*      3  RTRRDBHD  BIT(1),      /* BHSET = DYNAMIC                  */
*      3  RTRRDBHI  BIT(1),      /* BHSET = SETNAME AND EXECUTR      */
*      3  RTRRSV10 BIT(2),       /* RESERVED                         */
*      3  RTRRSV11 BIT(3),       /* RESERVED                         */
*   2  RTRRDFE  BIT(8),          /* FLAG FIELD E - RESOURCE DEF      */
*/*                RTRREFT1  FEATURE FLAGS  (9 BITS)                 */
*      3  RTRREBRK BIT(1),       /* TRANSMIT INTERRUPT               */
*      3  RTRRSV0A BIT(1),       /* RESERVED                         */
*      3  RTRREACR BIT(1),       /* ACCELERATED CARRIAGE RETURN      */
*      3  RTRRECHK BIT(1),       /* CHECKING FEATURE                 */
*      3  RTRREATT BIT(1),       /*  TERMINAL INTERRUPT              */
*      3  RTRRESUP BIT(1),       /*  TIMEOUT SUPPRESSION             */
*      3  RTRRESCT BIT(1),       /*  STATION CONTROL                 */
*   2  RTRRDFF  BIT(8),          /* FLAG FIELD F - RESOURCE DEF      */
*      3  RTRRFXCT BIT(1),       /* TRANSMIT CONTROL                 */
*/*                      RTRRFFT2 FEATURE 2 FLAGS (NEXT 5 BITS)      */
*      3  RTRRFPEN BIT(1),       /* SELECTOR PEN                     */
*      3  RTRRFPFK BIT(1),       /* PROGRAM FUNCTION DEYBOARD        */
*      3  RTRRFANK BIT(1),       /* STANDARD ALPHA-NUMERIC KEYBOARD  */
*      3  RTRRFDEK BIT(1),       /* DATA ENTRY KEYBOARD              */
*      3  RTRRSV24 BIT(3),       /* UNUSED/RESERVED                  */
*   2  RTRTRMAX CHAR(1),         /* MAX # TRANSMISSIONS TERM TO PCCU */
*   2  RTRCRFLG PTR(8),          /* FLAG-CONFIGURATION RESTART       */
*      3 RTRCRSV1 BIT(2),        /* RESERVED FOR CONFIG RESTART      */
*      3 RTRLSCMD BIT(1),        /* LINE SCHEDULING CMD ISSUED OK    */
*        4 RTRDTRLM BIT(1),      /* CHNG DEV TRANSMISSION LIMIT OK   */
*      3 RTRCRSV2 BIT(5),        /* RESERVED FOR CONFIG. RESTART     */
*   2  RTRBHSN1 CHAR(8),         /* DEFAULT BHSET NAME IS BHF IS ON  */
*   2  RTRRVPT1 PTR(31),         /* RESERVED                         */
*   2  RTRRSV03 FIXED(15),       /* FILLER TO FORCE ALIGNMENT        */
*   2  RTRCTDIA FIXED(15),       /* CNT OF CHARS. IN TERM DIAL NUMBER*/
*   2  RTRCTPOL FIXED(15),       /* # CHARS. IN TERM POLL STRING     */
*   2  RTRCTADR FIXED(15),       /* COUNT OF ADDRESSING CHARACTERS   */
*   2  RTRCADDR  CHAR(8),        /* COMPONENT ADDRESSING CHARS       */
*   2  RTRPOLA PTR(31),          /* POINTER TO POLLING CHARACTERS    */
*   2  RTRDIAA PTR(31),          /* POINTING TO DIAL CHARACTERS      */
*   2  RTRRDFG  BIT(8),          /* CORRESPONDENCE CODE USED BY THIS
*                                   TERM LINE. SEE CONSTANTS.        */
*   2  RTRRSVDD CHAR(7),         /* RESERVED                         */
*   2  RTRBSCID CHAR(21),        /* BSC ID FIELD                     */
*      3  RTRIDLEN FIXED(8),     /* LENGTH OF ID                     */
*      3  RTRIDCAS CHAR(20),     /* ID CHARACTER                     */
*   2  RTRLCTI BIT(8),           /* LINE CONTROL TYPE ID             */
*   2  RTRRSV04 CHAR(2);         /* RESERVED                         */
*                                                                  0601
* DCL RTRDNCBA PTR(31) DEF(ISTRTR) POS(41);  /* SCAFFOLDING          */
*/* CONSTANTS FOR FIELD RTRRDFG                                      */
*DCL RTRRCBCD BIT(8) CONSTANT('03'X); /* BCD                         */
*DCL RTRRCEBC BIT(8) CONSTANT('04'X); /* EBCD                        */
*DCL RTRRCCOR BIT(8) CONSTANT('05'X); /* COR                         */
*                                                                  0605
*/*     CONSTANTS FOR FIELD RTRLCTI                                  */
*DCL RTR2741  BIT(8) CONSTANT('00'X);  /* 2741                       */
*DCL RTR2740A BIT(8) CONSTANT('02'X);  /* 2740-1 A (BASIC)           */
*DCL RTR2740D BIT(8) CONSTANT('06'X);  /* 2740-1 D (TRANS CONTROL)   */
*DCL RTR2740E BIT(8) CONSTANT('0A'X);  /* 2740-1 E (TRANS          0609
*                                   CONTROL WITH CHECKING            */
*DCL RTR2740F BIT(8) CONSTANT('0C'X);  /* 2740-1 F (CHECKING)        */
*DCL RTR1050  BIT(8) CONSTANT('1C'X);  /* 1050                       */
*DCL RTRTWX   BIT(8) CONSTANT('22'X);  /* TWX                        */
*/*                                                                  */
*/*   ENTRY IN LOCAL RN FOR REMOTE SEGMENT                           */
*/*                                                                  */
*DCL  1  ISTRIN   BDY(WORD) BASED,   /* INNODE REMOTE ENT IN LOCAL RN*/
*        2 RINCRPRE CHAR(LENGTH(ISTRCPRE)),  /* PREFIX               */
*        2 RINDFD   BIT(8),          /* FLAG FIELD                   */
*          3 RINREMPO BIT(1),        /* REMOTE POWER OFF             */
*            4 RTRREMPO BIT(1),      /* ALIAS                        */
*          3 RINNODEF BIT(1),        /* REMOTE TERM ENTRY INV AS ENT */
*            4 RTRNODEF BIT(1),      /* ALIAS                        */
*          3 RINLDISC BIT(1),        /* DISCONNECT REMOTE REQUIRED   */
*            4 RTRLDISC BIT(1),      /* ALIAS                        */
*          3 RINRSV01 BIT(5),        /* RESERVED                     */
*        2 RINNODID PTR(8),          /* NODE ID OF REMOTE            */
*          3 RTRNODID PTR(8),        /* ALIAS                        */
*        2 RINRLDAF CHAR(2),         /* DAF OF REMOTE WHEN ACTIVE    */
*          3 RTRRLDAF CHAR(2),       /* ALIAS                        */
*        2 RINREMOT PTR(31),         /* PTR TO RN ENTRY FOR REMOTE   */
*          3 RTRREMOT PTR(31),       /* ALIAS                        */
*        2 RINVPAB  PTR(31),         /* ADDR VARY PAB FOR REMOTE     */
*          3 RTRVPAB  PTR(31),       /* ALIAS                        */
*        2 RINRPHCN PTR(31),         /* ADDR RPH WAITING FOR CONTACT */
*          3 RTRRPHCN PTR(31),       /* ALIAS                        */
*        2 RINNCSPL PTR(31),         /* ADDR FOR NCSPL FOR DEACTIVATE*/
*          3 RTRNCSPL PTR(31),       /* ALIAS                        */
*        2 RINCNCNT PTR(8),          /* CONTACT COUNT FOR REMOTE     */
*          3 RTRCNCNT PTR(8),        /* ALIAS                        */
*        2 RINRSV02 CHAR(3),         /* RESERVED                     */
*        2 RINLOCRN PTR(31),         /* PTR TO RN ENTRY OF LOCAL     */
*        2 RINRSV04 CHAR(4),         /* RESERVED                     */
*        2 RINRSV05 CHAR(4);         /* RESERVED                     */
*/*                                                                  */
*DCL                                                               0614
*1   ISTRDS BDY(WORD) BASED,       /* LCDO ENTRY                     */
*           2  RDSPRE CHAR(LENGTH(ISTRPRE)), /* ENTRY PREFIX         */
*           2  RDSCTTRM FIXED(15), /* COUNT OF ENTRY POINTERS      0614
*                                     IN DIAL OUT TABLE              */
*           2  RDSCTATR FIXED(15), /*                                */
*           2  RDSADDOT PTR(31);   /* ADDRESS OF DIAL OUT TABLE      */
*/*                                                                  */
*DCL                                                               0615
*1   ISTDOT BDY(WORD) BASED,       /* DIAL OUT TABLE                 */
*           2  DOTADTRM PTR(31);   /* PTR TO DIAL OUT OR DIAL IN/  0615
*                                     OUT TERMINAL RDTE              */
*/*                                                                  */
*DCL                                                               0616
*1 ISTRCC BDY(WORD) BASED,             /* PU ENTRY                   */
*  2 RCCPRE   CHAR(LENGTH(ISTRPRE)),   /* COMMON PREFIX              */
*  2 RCCTYPE  CHAR(1),                 /* PU TYPE                    */
*  2 RCCFLAG  BIT(8),                  /* FLAG FIELD                 */
*    3 RCCRBISA BIT(1),                /* I STATUS 1=ACTIVE          */
*    3 RCCCUDIE BIT(1),                /* CLUSTER DEACTIVATING       */
*    3 RCCERPIP BIT(1),                /* ERP IN PROCESS             */
*    3 RCCLDISC BIT(1),                /* DISCONNECT REQUEST         */
*    3 RCCOHIMM BIT(1),                /* RTGOH RECEIVED AND WAS     */
*                                      /* AN IMMEDIATE TYPE          */
*    3 RCCOUERP BIT(1),                /* REPEAT ERP                 */
*    3 RCCPRGDN BIT(1),                /* PURGE ISSUED               */
*    3 RCCCTPGD BIT(1),                /* CONTACT PURGED             */
*  2 RCCFLAGB BIT(8),                  /* FLAG FIELD                 */
*    3 RCCDSTCT BIT(1),                /* DEACT TO DECR STCNT IN HDR */
*    3 RCCDIALP BIT(1),                /* DIAL IN PROGRESS           */
*    3 RCCIRETR BIT(1),                /* IRETRY 1 = YES             */
*    3 RCCBNNSP BIT(1),                /* BNNSUP FOR 3270            */
*    3 RCCFINAL BIT(1),                /* ON = DEACT PU FINAL REQD   */
*    3 RCCRESET BIT(1),                /* ON = RESET DEACT IN PROCESS*/
*    3 RCCBRKCN BIT(1),                /* ON-DISCOUNT=YES SPECIFIED  */
*                                      /* OFF-DISCOUNT=NO SPECIFIED  */
*    3 RCCRTGOH BIT(1),                /* ON=RTGOH RECEIVED          */
*  2 RCCCNCNT  PTR(8),                 /* CONTACT COUNT              */
*  2 RCCCTELU FIXED(15),               /* COUNT OF PU LU ENTRIES     */
*  2 RCCSTAID CHAR(8),                 /* 64 BIT PU STATION ID       */
*    3 RCCIDPA1 BIT(16),               /* FILLER OF 2 BYTES OF 0     */
*    3 RCCID48,                                                    0616
*      4 RCCIDPUT BIT(8),              /* PU TYPE                    */
*      4 RCCIDPA2 BIT(8),              /* FILLER OF 1 BYTE OF 0      */
*      4 RCCIDBLK BIT(12),             /* IDBLK VALUE                */
*      4 RCCIDNUM BIT(20),             /* IDNUM VALUE                */
*  2 RCCSESCT PTR(8),                  /* SESSION COUNT              */
*  2 *        CHAR(1),                 /* RESERVED                   */
*  2  RCCVPAB PTR(31),                 /* ADDRESS OF VARY PAB        */
*  2 RCCDPAB  PTR(31),                 /* ADDR RESTART PAB           */
*  2 RCCEPAB  PTR(31),                 /* ADDR OF ERP PAB            */
*  2 RCCRPHCN PTR(31),                 /* ADDR RPH WAIT FOR CONTACT  */
*  2 RCCNCSPL PTR(31),                 /* ADDR NCSPL FOR DEACTIVATE  */
*  2 RCCCRFLG BIT(8),                  /* FLAG-CONFIGURATION RESTART */
*    3 RCCACTPU BIT(1),                /* ACTIVATE PHYSICAL          */
*    3 RCCCTCFL BIT(1),          /* HIGHER FAILURE-CONTACT FLUSHED   */
*    3 RCCCRRSV BIT(6),                /* RES. FOR CONFIG. RESTART   */
*  2 RCCRSV02 PTR(24),                 /* RESERVED                   */
*  2 RCCTPAB  PTR(31),                 /* TOLTEP SSCP PAB            */
*  2 RCCDPQ   PTR(31),                 /* DIAL PENDING NCSPL QUE PTR */
*  2 RCCPATHT PTR(31),                 /* PTR TO PATH TABLE          */
*  2 RCCPATHZ FIXED(15),               /* # ENTRIES IN PATH TABLE    */
*  2 RCCINDEX FIXED(15),               /* INDEX TO PATH TABLE        */
*  2 RCCMXDAT FIXED(15),               /* MAXDATA SIZE               */
*  2 RCCMXOUT FIXED(8),                /* MAXOUT VALUE               */
*  2 RCCPASSL FIXED(8),                /* PASSLIM VALUE              */
*  2 RCCADDR  FIXED(8),                /* STATION ADDRESS            */
*  2 RCCRSPT2 PTR(24),                 /* RESERVED                   */
*  2 RCCSWTOX PTR(31),                 /* SWITCHED TO 370X           */
*                                      /* COMMUNICATIONS NCSPL       */
*  2 RCCXTOSW PTR(31),                 /* 370X TO SWITCHED           */
*                                      /* COMMUNICATIONS NCSPL       */
*  2 RCCRVPT2 PTR(31);                 /* RESERVED                   */
*/* RCCTYPE - PU TYPE CODES                                          */
*DCL RCCPU01  BIT(8) CONSTANT('01'X);  /* PU TYPE 1                  */
*DCL RCCPU02  BIT(8) CONSTANT('02'X);  /* PU TYPE 2                  */
*DCL RCCPU03  BIT(8) CONSTANT('03'X);  /* PU TYPE 3                  */
*DCL RCCPU04  BIT(8) CONSTANT('04'X);  /* PU TYPE 4                  */
*/*                                                                  */
*DCL                                                               0621
*1 ISTRLU BDY(WORD) BASED,             /* LU ENTRY                   */
*  2 RLUCRPR CHAR(LENGTH(ISTRCPRE)),   /* COMMON PREFIX              */
*  2 RLUTYPE  CHAR(1),                 /* LU TYPE                    */
*  2 RLUFLAG  CHAR(1),                 /* RLU FLAGS                  */
*    3 RLURBISA BIT(1),                /* I STATUS 1=ACTIVE          */
*    3 RLUBATCH BIT(1),                /* 1 IF BATCH = YES           */
*    3 RLUGSTAT BIT(1),                /* C/R GENNED ISTATUS VALUE   */
*                                      /* 1 = ACTIVE                 */
*    3 RLUNDSES BIT(1),                /* SPECIAL END SESSION        */
*    3 RLURSV00 BIT(4),                /* RESERVED                   */
*  2 RLUCRFLG BIT(8),                  /* FLAG-CONFIGURATION RESTART */
*    3 RLUACTLU BIT(1),                /* ACTIVATE LOGICAL UNIT OK   */
*    3 RLUCRRSV BIT(7),                /* RESERVED FOR CONFIG RESTART*/
*  2 RLUSSCFM BIT(8),                  /* FUNCTION MANAGER TYPE      */
*  2 RLUINTA PTR(31),                  /* RESERVED                   */
*  2 RLUPACE CHAR(2),                  /* VPACING COUNTS             */
*    3 RLUPACEN CHAR(1),               /* N COUNT                    */
*    3 RLUPACEM CHAR(1),               /* M COUNT                    */
*  2 RLUNCPPC CHAR(2),                 /* NCP PACING COUNTS          */
*    3 RLUNCPPN CHAR(1),               /* N COUNT                    */
*    3 RLUNCPPM CHAR(1),               /* M COUNT                    */
*  2 RLULOCAD CHAR(1),                 /* LOCAL ADDRESS OF LU        */
*  2 RLURSV01 CHAR(3),                 /* RESERVED                   */
*  2 RLUUSSTB CHAR(12) BDY(WORD),      /* USSTAB                     */
*    3 RLUUSSNM CHAR(8),               /* USSTAB NAME                */
*    3 RLUUSSPT PTR(31),               /* USSTAB ADDRESS             */
*  2 RLUMODET CHAR(12) BDY(WORD),      /* MODETAB                    */
*    3 RLUMODEN CHAR(8),               /* MODETAB NAME               */
*    3 RLUMODEP PTR(31),               /* MODETAB ADDRESS            */
*  2 RLULGMOD CHAR(8),                 /* LOGMODE                    */
*  2 RLURSV02 PTR(31);                 /* RESERVED                   */
*/*  RLUSSCFM - FOLLOWING EQUATES ARE FOR THE VARIOUS                */
*/*             FUNCTION MANAGER TYPES                               */
*DCL RLUFSS   BIT(8) CONSTANT('01'X);  /* FORMATTED SYS SERVICES     */
*DCL RLUUSS   BIT(8) CONSTANT('02'X);  /* UNFORMATTED SYS SERVICES   */
*DCL RLUU3270 BIT(8) CONSTANT('04'X);  /* UNFORMATTED SYS SVCS 3270  */
*/*  RLUTYPE - EQUATES FOR LU TYPE                                   */
*DCL RLUTYP04 BIT(8) CONSTANT('04'X);  /* LU TYPE IS 4               */
*/*                                                                  */
*DCL 1 ISTRPX BDY(WORD) BASED,     /* SKELETON PUX ENTRY             */
*      2 RPXPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RPXFLUX  PTR(31),         /* PTR TO FIRST LUX IN CHAIN      */
*      2 RPXMAXLU PTR(8),          /* MAX NUMBER OF LU'S             */
*                                  /* FOR THIS LINK                  */
*      2 RPXRSV02 PTR(24),         /* RESERVED                       */
*      2 RPXRSV01 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRLX BDY(WORD) BASED,     /* SKELETON LUX ENTRY             */
*      2 RLXPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RLXNLUX  PTR(31),         /* PTR TO NEXT LUX IN CHAIN       */
*      2 RLXFLAGA CHAR(1),         /* FLAG BYTE                      */
*        3 RLXINUSE BIT(1),        /* ON = LUX IS IN USE             */
*        3 RLXRSV01 BIT(7),        /* RESERVED                       */
*      2 RLXRSV02 CHAR(3),         /* RESERVED                       */
*      2 RLXRSV03 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRSW BDY(WORD) BASED,     /* SWITCHED SUBAREA HDR ENTRY     */
*      2 RSWPRE CHAR(LENGTH(ISTRDT)),   /* USE ISTRDT DSECT          */
*      2 RSWDIALT PTR(31),         /* PTR TO DIAL #'S TABLE          */
*      2 RSWGRUPT PTR(31),         /* PTR TO GROUP NAMES TABLE       */
*      2 RSWDIALZ FIXED(15),       /* # ENTRIES IN DIAL NO. TABLE    */
*      2 RSWGRUPZ FIXED(15),       /* # ENTRIES IN GRP NAME TABLE    */
*      2 RSWCTELU FIXED(15),       /* COUNT OF LU ENTRIES IN THIS SEG*/
*      2 RSWRSV02 CHAR(2),         /* RESERVED                       */
*      2 RSWRSV01 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRDA BDY(WORD) BASED,     /* DAN ENTRY                      */
*      2 RDAPRE CHAR(LENGTH(ISTRPRE)),  /* COMMON PREFIX             */
*      2 RDAADR   PTR(31),                                         0629
*        3 RDAFLAG  BIT(8),        /* FLAG BYTE                      */
*          4 RDARBISA BIT(1),      /* INITIAL STATUS, 1 = ACTIVE     */
*          4 RDARSV01 BIT(7),      /* RESERVED                       */
*        3 RDAUCBAD PTR(24),       /* UCB.PUB ADDRESS                */
*          4 RDACHQI  BIT(8),      /* CHANNEL QUEUE INDEX            */
*          4 RDALUBA  BIT(16),     /* @ OF LOGICAL UNIT BLOCK        */
*      2 RDADACUA CHAR(3),         /* CHANNEL UNIT ADDRESS           */
*      2 RDACTPCC PTR(8),          /* CNT OF BUFFERS RECEIVING DATA  */
*      2 RDADFCUA CHAR(3),         /* DEFAULT CUA                    */
*      2 RDAPUBI  BIT(8),          /* PUB INDEX                      */
*      2 RDARSVPT PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL 1 ISTRLS BDY(WORD) BASED,     /* LOCAL SUBAREA HEADER ENTRY     */
*      2 RLSPRE CHAR(LENGTH(ISTRDT)),   /* USE ISTRDT DSECT          */
*      2 RLSCTELU FIXED(15),       /* COUNT OF LU ENTRIES IN THIS SEG*/
*      2 RLSRSV01 FIXED(15),       /* RESERVED                       */
*      2 RLSRSV02 PTR(31);         /* RESERVED                       */
*/*                                                                  */
*DCL  1  ISTDNT BDY(WORD) BASED,  /* DIAL NUMBER TABLE               */
*        2 DNTCTDIG FIXED(8),     /* NUMBER OF DIGITS IN TEL. NUM.   */
*        2 DNTTELNO CHAR(32);     /* TELEPHONE NUMBER                */
*/*                                                                  */
* DCL  1  ISTGNT BDY(WORD) BASED, /* GROUP NAMES TABLE               */
*         2 GNTGRPNM CHAR(8);     /* GROUP NAME ENTRY                */
*/*                                                                  */
*DCL  1  ISTPAT BDY(WORD) BASED,  /* PATH TABLE                      */
*        2 PATGINDX FIXED(15),    /* INDEX TO GROUP NAME TABLE       */
*        2 PATDINDX FIXED(15),    /* INDEX TO DIAL NUMBER TABLE      */
*        2 PATPTHID PTR(8),       /* PATH ID                         */
*        2 PATGRPID PTR(8),       /* GROUP PATH ID                   */
*        2 PATRDCNT PTR(8),       /* REDIAL COUNT                    */
*        2 PATFLAGA BIT(8),       /* FLAG BYTE                       */
*          3 PATUSEFG BIT(1),     /* ON = PATH INITIALLY USABLE      */
*          3 PATRSV01 BIT(7);     /* RESERVED                        */
*DCL  1  ISTRH     BDY(WORD) BASED,      /* REQUEST HEADER           */
*       2  RHFLAGS  CHAR(3),             /* REQUEST HEADER FLAGS     */
*        3  RH1    BIT(8),               /* FIRST RH BYTE            */
*           4  RHQS     BIT(1),          /* 0-REQUEST,1-RESPONSE     */
*           4  RHTYPE   BIT(1),          /* 0-DATA,1-CONTROL         */
*           4  RHSCI    BIT(1),          /* 0-FM,1-SYSTEM CONTROL    */
*           4  RHDIRI   BIT(1),          /* 0-WITH,1-AGAINST         */
*           4  RHFORMAT BIT(1),          /* 0-UNFORMATTED,1-FORMATTED*/
*           4  RHSENSE  BIT(1),          /* 0-NOT INCLUDED,1-INCLUDED*/
*           4  RHCHAIN  BIT(2),          /* CHAINING CONTROL         */
*                                        /* 0-MIDDLE                 */
*                                        /* 1-LAST                   */
*                                        /* 2-FIRST                  */
*                                        /* 3-ONLY                   */
*        3  RH2    BIT(8),               /* SECOND RH BYTE           */
*           4  RHFME    BIT(1),          /* Q-FME REQUESTED,S-FME    */
*           4  RHPE     BIT(1),          /* Q-PE REQUESTED,S-PE      */
*           4  RHRRN    BIT(1),          /* Q-RRN REQUESTED,S-RRN    */
*           4  RHEXCEPT BIT(1),          /* Q-EXCEPTION RESPONSES    */
*                                        /* ONLY,S-ERROR             */
*           4  RHRETRY  BIT(1),          /* Q-RETRY,                 */
*              5  RHBUSY  BIT(1),        /* S-BUSY                   */
*           4  RHRSVD1  BIT(1),          /* Q-RESERVED               */
*              5  RHINOP  BIT(1),        /* S-INOPERATIVE            */
*           4  RHRSVD2  BIT(1),          /* Q-RESERVED,S-RESERVE     */
*           4  RHPACE   BIT(1),          /* Q-PACING REQUEST,S-PACE  */
*        3  RH3    BIT(8),               /* THIRD RH BYTE            */
*           4  RHBB     BIT(1),          /* BEGIN SEQUENCE           */
*           4  RHEB     BIT(1),          /* END SEQUENCE             */
*           4  RHCDIR   BIT(1),          /* CHANGE DIRECTION         */
*           4  RHRCDIR  BIT(1),          /* REQUEST CHANGE DIRECTION */
*           4  RHRSVD3  BIT(1),          /* RESERVED                 */
*           4  RHLOG    BIT(1),          /* LOG                      */
*           4  RHRSVD4  BIT(1),          /* RESERVED                 */
*           4  RHRSVD5  BIT(1);          /* RESERVED                 */
*DCL RHFIRST  BIT(2) CONSTANT('10'B);    /* FIRST IN CHAIN           */
*DCL RHMIDLE  BIT(2) CONSTANT('00'B);    /* MIDDLE OF CHAIN          */
*DCL RHLAST   BIT(2) CONSTANT('01'B);    /* LAST IN CHAIN            */
*DCL RHONLY   BIT(2) CONSTANT('11'B);    /* ONLY ONE IN CHAIN        */
*DCL RHRESP   BIT(24) CONSTANT('938000'X); /* RH RESPONSE MASK       */
*DCL RHREQ    BIT(24) CONSTANT('030000'X); /* RH REQUEST MASK        */
*/* REQUEST RESPONSE UNIT                                            */
*/*  REVISIONS                                         010 10/14/75  */
*/*                                                                  */
*DCL 1 ISTRU BASED BDY(BYTE),      /* BASIC RU STRUCTURE             */
*     2 RUDATA CHAR(*);            /* DATA PORTION OF RU             */
*/*                                                                  */
*/* THIS PORTION DEFINES THE FIELDS WHICH ARE PRESENTED AS SENSE     */
*/* INFORMATION FOR THOSE RU'S WHICH CONTAIN SENSE. IT IS THE INITIAL*/
*/* PORTION OF THE RU.                                               */
*/*                                                                  */
*DCL 1 ISTSENRU DEF(RUDATA),       /* SENSE RU INFORMATION           */
*     2 SRUSENSE CHAR(4),          /* SENSE DATA WORD                */
*      3 SRUSENS1 CHAR(2),         /* SYSTEM SENSE BYTES             */
*       4 SRUSNS1  CHAR(1),        /* SENSE DATA MAJOR CODE          */
*       4 SRUSNST  CHAR(1),        /* SENSE MODIFIER BYTE            */
*      3 SRUSENS2 CHAR(2),         /* REMAINING SENSE BYTES          */
*       4 SRUSNS3  CHAR(1),        /* THIRD SENSE BYTE               */
*       4 SRUSNS4  CHAR(1),        /* FOURTH SENSE BYTE              */
*     2 SENRU CHAR(*);             /* REMAINDER OF RU                */
*/*                                                                  */
*/* THIS PORTION IS A DUMMY LEVEL 1 DECLARE TO ALLOW FOR EASY        */
*/* IMPLEMENTATION. ALL RU DEFINITIONS WHICH FOLLOW ARE DEFINED ON   */
*/* ISTRUB. FOR IMPLEMENTATION RESPECIFY ISTRUB BASED(RUDATA) IF NO  */
*/* SENSE AND ISTRUB BASED(SENRU) IF SENSE. THIS AVOIDS CONSTANT     */
*/* RESPECIFIES FOR EACH RU TYPE.                                    */
*/*                                                                  */
*DCL 1 ISTRUB BASED,               /* RU BASE FOR COMMON ADDRESSING  */
*     2 RUBDATA  CHAR(*);          /* DATA PORTION OF RU             */
*/*                                                                  */
*/* STANDARD RU                                                      */
*/*                                                                  */
*DCL 1 ISTSRU DEF(ISTRUB),         /* STANDARD RU                    */
*     2 SRUQSREQ CHAR(1),          /* REQUEST RESPONSE CODE          */
*     2 SRUDATA,                   /* RU DATA                        */
*       3 SRUTYPE  CHAR(1),        /* RU TYPE                        */
*         4 SRUSPAC  BIT(2),       /* S TO P ACTION CODE             */
*         4 SRUPSAC  BIT(2),       /* P TO S ACTION CODE             */
*         4 *        BIT(4),       /* RESERVED                       */
*       3 SRULDID  CHAR(8),        /* LOAD ID-ACTPU                  */
*         4 SRUSPSN  CHAR(2),      /* SEQUENCE NUMBER STOP           */
*           5 SRUDFCLV CHAR(1),    /* DFC LEVEL                      */
*         4 SRUPSSN  CHAR(2),      /* SEQUENCE NUMBER PTOS           */
*         4 SRURSV01 CHAR(4);      /* RESERVED                       */
*/*                                                                  */
*/* NETWORK SERVICES RU                                              */
*/*                                                                  */
*DCL 1 ISTNSRU DEF(ISTRUB),        /* NETWORK SERVICES RU            */
*     2 NSRUNETS CHAR(3),          /* FM DATA-NETWORK SERVICES       */
*      3 NSRUID   CHAR(1),         /* RU TYPE                        */
*      3 NSRUSUB  CHAR(1),         /* NS SUB CATEGORY                */
*      3 NSRURCD  CHAR(1),         /* REQUEST CODE                   */
*     2 NSRUDATA CHAR(*);          /* RU DATA                        */
*DCL NSRUONHK BIT(8) CONSTANT('1B'X); /* READY TO GO ON HOOK REQ CODE*/
*DCL  1  NSRUHOOK DEF(NSRUDATA),   /* RTGOH RU                       */
*        2 NSRUHKTY CHAR(1);       /* TYPE CODE                      */
*/*   CONSTANTS FOR NSRUHKTY                                         */
*DCL NSRUHKNR BIT(8) CONSTANT('00'X); /* NORMAL                      */
*DCL NSRUHKI  BIT(8) CONSTANT('80'X); /* IMMEDIATE                   */
*/*                                                                  */
*/*  DEFINATION OF SET STATE VECTOR RU'S                             */
*DCL 1 NSSSVRU  DEF(NSRUDATA),                                     0650
*      2 NSSSVDAF CHAR(2),         /* LINK DAF                       */
*      2 NSSSVT   CHAR(1),         /* VECTOR TYPE                    */
*      2 NSSSVNOD PTR(8);          /* REMOTE NCP NODE I.D.           */
*/*                                                                  */
*DCL 1 NSSSVT3  DEF(NSSSVNOD),     /* SET SWITCHED PU PARAMETERS     */
*      2 NSSSVT3A CHAR(1),         /* SDLC ADDRESS                   */
*      2 NSSSVT3B CHAR(1),         /* PU TYPE                        */
*      2 NSSSVT3C CHAR(1),                                         0651
*        3 NSSSVT3D BIT(1),        /* PU IS 3270                     */
*        3 *        BIT(7),        /* RESERVED                       */
*      2 NSSSVT3E CHAR(1),         /* MAXOUT                         */
*      2 NSSSVT3F CHAR(1),         /* PASSLIM                        */
*      2 NSSSVT3G CHAR(1),                                         0651
*        3 NSSSVT3H BIT(1),        /* IRETRY = YES                   */
*        3 *        BIT(7),        /* RESERVED                       */
*      2 NSSSVT3I CHAR(1),         /* SECOND LEVEL PAUSE             */
*      2 NSSSVT3J CHAR(1),         /* SECOND LEVEL LIMIT             */
*      2 NSSSVT3K FIXED(15) BDY(BYTE); /* MAXDATA                    */
*/*                                                                  */
*DCL 1 NSSSVT4  DEF(NSSSVNOD),     /* SET SWITCHED LU PARAMETERS     */
*      2 NSSSVT4A CHAR(1),         /* LOCAL ADDRESS                  */
*      2 NSSSVT4B PTR(8),          /* N PACING                       */
*      2 NSSSVT4C PTR(8),          /* M PACING                       */
*      2 NSSSVT4D CHAR(1);         /* SCHEDULING PARAM               */
*DCL NSBATCH BIT(8) CONSTANT('01'X); /* BATCH                        */
*DCL NSINTER BIT(8) CONSTANT('02'X); /* INTERACTIVE                  */
*/*                                                                  */
*DCL 1 NSSSVT5  DEF(NSSSVNOD),                                     0655
*      2 NSSSVT5A CHAR(2);                                         0655
*DCL NSDELAY  BIT(8) CONSTANT('05'X);                              0656
*DCL NS0DELAY BIT(16) CONSTANT('0000'X);                           0657
*/*                                                                  */
*/*  CONSTANTS FOR NSSSVT                                            */
*DCL NSTIME BIT(8) CONSTANT('01'X),  /* SET TIME AND DATE            */
*    NSNODE BIT(8) CONSTANT('02'X),  /* SET NODE I.D.                */
*    NSPU   BIT(8) CONSTANT('03'X),  /* SET PU PARAMS                */
*    NSLU   BIT(8) CONSTANT('04'X);  /* SET LU PARAMS                */
*/*                                                                  */
*/* THIS LEVEL 1 DEFINITION IS A FORM OF THE NSRU WHICH CONTAINS THE */
*/* DAF WITHIN THE DATA FIELD. IT IS AN OVERLAY OF NSRUDATA.         */
*/*                                                                  */
*DCL 1 NSRUDAT1 DEF(NSRUDATA),     /* NSRU WITH DAF                  */
*     2 NSRUDAF  CHAR(2),          /* DAF IN RU DATA FIELD           */
*     2 NSRUDAT2 CHAR(*);          /* RU DATA                        */
*/*                                                                  */
*/*   TRACE RU                                                       */
*/*                                                                  */
*DCL  1  ISTTRRU  DEF(NSRUDAT2),                                   0660
*        2 TRRTYPE  BIT(8),        /* X'01' RU IS LINE TRACE         */
*          3 *       BIT(6),       /* RESERVED                       */
*          3 TRRFMT2 BIT(1),       /* FORMAT 2 LINE TRACE FLAG       */
*          3 *       BIT(1),       /* LINE TRACE                     */
*        2 TRRTIME  BIT(8),        /* TIME OUT VALUE/TIME STAMP      */
*        2 TRRPEP   BIT(8),        /* EP SUBCHANNEL ADDRESS          */
*        2 TRRSTAT  BIT(8),        /* TRACE STATUS                   */
*        2 TRRDATA  CHAR(*);       /* TRACE DATA                     */
*/*                                                                  */
*/*   CONTACTED RU DATA                                              */
*/*                                                                  */
*DCL  1  ISTCTDRU DEF(NSRUDAT2),   /* DATA PORTION FOR CONTACTED RU  */
*        2 CTDRUSTA BIT(8);        /* STATUS                         */
*/*   VALUES FOR STATUS (CTDRUSTA) FIELD                             */
*DCL CTDRULD  BIT(8) CONSTANT('01'X),  /* LOADED                     */
*    CTDRULDR BIT(8) CONSTANT('02'X),  /* LOAD REQUIRED              */
*    CTDRUERR BIT(8) CONSTANT('03'X);  /* ERROR ON CONTACT           */
*/*                                                                  */
*/*   INOPERATIVE RU DATA                                            */
*/*                                                                  */
*DCL  1  ISTINORU DEF(NSRUDAT2),   /* DATA PORTION FOR INOPERATIVE RU*/
*        2 INORUET  BIT(8);        /* ELEMENT TYPE                   */
*/*   VALUES FOR ELEMENT TYPE FIELD (INORUET)                        */
*DCL INORUPU  BIT(8) CONSTANT('01'X),  /* PHYSICAL UNIT              */
*    INORULNK BIT(8) CONSTANT('02'X),  /* LINK                       */
*    INORURNS BIT(8) CONSTANT('FE'X),  /* SOFT FAILURE OF LOCAL RN   */
*    INORURNH BIT(8) CONSTANT('FF'X);  /* HARD FAILURE OF LOCAL RN   */
*/*                                                                  */
*DCL  1  SRUDAT1  DEF(SRUDATA),    /* ACT PHYS OR LOGICAL UNIT REQ.  */
*        2 SRUDAT1T CHAR(1),       /* TYPE ACTIVATION DESIRED        */
*        2 SRUDAT1L CHAR(1),       /* LEVEL OF CONTROL               */
*          3 SRUFMPRO BIT(4),      /* FM PROFILE                     */
*          3 SRUTSPRO BIT(4),      /* TS PROFILE                     */
*        2 SRUDAT1I CHAR(6);       /* SSCP ID                        */
*/*                                                                  */
*DCL  1  SRUDAT2 DEF(SRUDATA),     /* ACT PHYS UNIT RESPONSE         */
*        2 SRUDAT2T CHAR(1),       /* TYPE ACTIVATION                */
*        2 SRUDAT2N CHAR(8);       /* LOAD ID                        */
*/*                                                                  */
*/*  MAINTENANCE SERVICES RESPONSE UNIT                              */
*/*                                                                  */
*DCL  1  ISTMRU DEF(ISTRUB),                                       0667
*        2 MRUPREF  CHAR(2),       /* PREFIX                         */
*        2 MRUREQ   CHAR(1),       /* REQUEST = EXECUTE TEST         */
*        2 MRUDAF   CHAR(2),       /* NET ADDR OF LINK               */
*        2 MRUCMND  CHAR(1),       /* COMMAND                        */
*        2 MRUMODIF CHAR(1),       /* MODIFIER                       */
*        2 MRURESP  CHAR(2),       /* RESPONSE                       */
*        2 MRUDATA  CHAR(*);       /* DATA                           */
*/*                                                                  */
*/*   CONSTANTS FOR SRUDAT1T AND SRUDAT2T                            */
*/*                                                                  */
*DCL SRUCOLD  BIT(8) CONSTANT('01'X),  /* COLD ACTIVATION            */
*    SRUERP   BIT(8) CONSTANT('02'X),  /* ERP ACTIVATION             */
*    SRUWARM  BIT(8) CONSTANT('04'X);  /* WARM ACTIVATION            */
*/*   CONSTANTS FOR SRUDAT1L                                         */
*DCL SRUFMP0  BIT(4) CONSTANT('0000'B),/* FM PROFILW 0               */
*    SRUFMP5  BIT(4) CONSTANT('0101'B),/* FM PROFILE 5               */
*    SRUTSP0  BIT(4) CONSTANT('0000'B),/* TS PROFILE 0               */
*    SRUTSP1  BIT(4) CONSTANT('0001'B),/* TS PROFILE 1               */
*    SRUTSP2  BIT(4) CONSTANT('0010'B),/* TS PROFILE 2               */
*    SRUTSP3  BIT(4) CONSTANT('0011'B),/* TS PROFILE 3               */
*    SRUTSP4  BIT(4) CONSTANT('0100'B),/* TS PROFILE 4               */
*    SRUTSP5  BIT(4) CONSTANT('0101'B);/* TS PROFILE 5               */
*/*                                                                  */
*/*   TS PROFILE DEFINATIONS:                                        */
*/*                                                                  */
*/*       TS PROFILE  SEQ. NO.  SDT   STSN  CLEAR  PACING            */
*/*           0          N       N      N     N      N               */
*/*           1          N       N      N     N      N               */
*/*           2          Y       N      N     Y      Y               */
*/*           3          Y       Y      N     Y      Y               */
*/*           4          Y       Y      Y     Y      Y               */
*/*           5          Y       Y      N     N      N               */
*/*                                                                  */
*DCL  1  SRUDATA3 DEF(SRUDATA),    /* DEACT PHYS UNIT OR UNBND SESSN */
*        2 SRUDAT3I CHAR(1);       /* TYPE DEACTIVATION              */
*/*                                                                  */
*/*   CONSTANTS FOR SRUDAT3I                                         */
*/*                                                                  */
*DCL SRUFINAL BIT(8) CONSTANT('01'X),  /* FINAL USE                  */
*    SRUNOFIN BIT(8) CONSTANT('02'X),  /* NOT FINAL USE              */
*    SRUNORM  BIT(8) CONSTANT('01'X),  /* NORMAL END SESSION         */
*    SRUBF    BIT(8) CONSTANT('02'X),  /* BIND FAILURE               */
*    SRUVS    BIT(8) CONSTANT('04'X);  /* CLEAR SESSION PROCEDURE    */
*/*                                                                  */
*DCL  1  SRUDATA4 DEF(SRUDATA),    /* SWITCH EP OR NCB RU            */
*        2 SRUDAT4D CHAR(2);       /* DAF OF LINE                    */
*/*                                                                  */
*/*   ADDITIONAL SUBCAT VALUES                                       */
*/*                                                                  */
*DCL NSRUNCP  BIT(8) CONSTANT('00'X),  /* BASIC SUPPORT              */
*    NSRUMAT  BIT(8) CONSTANT('03'X);  /* PHYS MAINTENANCE SERVICES  */
*/*                                                                  */
*DCL  1  NSRUDAT3 DEF(NSRUDAT2),  /* CONTACTED RESPONSE              */
*        2 NSRUDA3S CHAR(1);      /* STATE                           */
*/*   CONSTANTS FOR NSRUDA3S                                         */
*DCL NSRULOAD BIT(8) CONSTANT('01'X),  /* LOADED                     */
*    NSRUNLOD BIT(8) CONSTANT('02'X),  /* LOAD REQUIRED              */
*    NSRUCERR BIT(8) CONSTANT('03'X);  /* CONTACT FAILED             */
*DCL  1  NSRUDAT4 DEF(NSRUDAT2),  /* IPL TEXT REQUIRED               */
*        2 NSRUDA4T CHAR(512);    /* TEXT                            */
*DCL  1  NSRUDAT5 DEF(NSRUDAT2),  /* IPL FINAL REQUIRED              */
*        2 NSRUDA5E CHAR(4);      /* ENTRY POINT ADDRESS             */
*DCL  1  NSRUDAT6 DEF(NSRUDAT2),  /* DUMP TEXT REQUIRED              */
*        2 NSRUDA6S CHAR(4),      /* STARTING LOCATION               */
*        2 NSRUDA6L CHAR(2);      /* LENGTH                          */
*DCL  1  NSRUDAT7 DEF(NSRUDAT2),  /* INOP                            */
*        2 NSRUDA7T CHAR(1);      /* ELEMENT TYPE                    */
*/*   CONSTANTS FOR NSRUDA7T                                         */
*DCL NSRUBOX  BIT(8) CONSTANT('01'X),  /* PHYS UNIT FAILED           */
*    NSRULINK BIT(8) CONSTANT('02'X);  /* LINK FAILED                */
*/*                                                                  */
*/*   DIAL RU                                                        */
*DCL  1  NSRUDIL  DEF(NSRUDAT2),                                   0681
*        2 NSRUDILA CHAR(1),      /* SDLC STATION ADDRESS            */
*        2 NSRUDILB CHAR(1),                                       0681
*          3 *        BIT(1),                                      0681
*          3 NSRUDILC BIT(1),     /* AUTO OR MANUAL DIAL             */
*        2 NSRUDILD PTR(8),       /* REDIAL COUNT                    */
*        2 NSRUDILE PTR(8),       /* NUMBER OF DIGITS                */
*        2 NSRUDILF CHAR(*);      /* START TELEPHONE NO.             */
*/*                                                                  */
*/*   ASSIGN FREE NETWORK ADDR RUS                                   */
*DCL  1  NSRUNA    DEF(NSRUDAT2),                                  0682
*        2 NSRUNA1  PTR(8),       /* NUMBER OF ADDRS TO ASSIGN OR FREE*
*        2 NSRUNA2  CHAR(1),                                       0682
*          3 NSRUNA3  BIT(1),     /* CONTIGUOUS OR NOT               */
*        2 NSRUNA4  CHAR(*);                                       0682
*DCL  1  NSRUNA5  BASED,                                           0683
*        2 NSRUNA6  CHAR(2);      /* NETWORK ADDR TO ASSIGN          */
*/*                                                                  */
*/*   CONSTANTS FOR NSRUNA1                                          */
*DCL NSRUFALL BIT(8) CONSTANT('00'X);  /* FREE ALL                   */
*/*                                                                  */
*/*   CHANGE LINE SCHED PARAM RU                                     */
*DCL  1  NSRUCLSP DEF(NSRUDAT2),                                   0685
*        2 NSRULSV  PTR(8);       /* VALUE OF CHANGED PARAMETER      */
*/*                                                                  */
*/*   OFFHOOK RU                                                     */
*DCL  1  NSRUOH1  DEF(NSRUDAT2),                                   0686
*        2 NSRUOHID CHAR(6);      /* STATION ID                      */
*/*                                                                  */
*DCL  1  NSRUDAT8 DEF(NSRUDATA),  /* DUMP INIT & DUMP TEXT RESP      */
*        2 NSRUDA8T CHAR(512);    /* DUMP DATA                       */
*/*                                                                  */
*/* RU CONSTANTS                                                     */
*/*                                                                  */
*DCL TRRACT   BIT(8) CONSTANT('01'X),      /* LINE TRACE ACTIVE      */
*    TRLINE   BIT(8) CONSTANT('01'X),      /* LINETRACE DESIRED      */
*    TRLNTIM1 BIT(8) CONSTANT('FF'X),      /* TIME OUT VALUE WHEN    */
*                                          /* TRACE ACTIVATED        */
*    TRLNTIM2 BIT(8) CONSTANT('00'X),      /* TIME OUT RESET WHEN    */
*                                          /* TRACE STOPPED          */
*    TRRDEACT BIT(8) CONSTANT('02'X),      /* TRACE TERMINATED BECAUSE
*                                             OF DEACTIVATE          */
*    TRRSLOW  BIT(8) CONSTANT('03'X);      /* TRACE TERMINATED BECAUSE
*                                             OF SLOWDOWN            */
*/*                                                                  */
*DCL SRUCONT  BIT(24) CONSTANT('010280'X), /* CONTACTED              */
*    SRUINOP  BIT(24) CONSTANT('010281'X), /* INOPERATIVE            */
*    SRURLNTR BIT(24) CONSTANT('010383'X); /* RECORD LINE TRACE      */
*/*                                                                  */
*DCL SRUSSEN  BIT(24) CONSTANT('010214'X), /* SYS SLOWDOWN ENTRY     */
*    SRUSSEX  BIT(24) CONSTANT('010215'X), /* SYS SLOWDOWN EXIT      */
*    SRUANSTO BIT(8) CONSTANT('02'X),      /* ANS CHAN T.O.          */
*    SRUANSPL BIT(8) CONSTANT('01'X),      /* ANS PANEL              */
*    SRUANSS  BIT(8) CONSTANT('06'X),      /* ANS START              */
*    SRUANSC  BIT(8) CONSTANT('07'X),      /* ANS COMPLETE           */
*    SRUSDCOM BIT(8) CONSTANT('C1'X),      /* SHUTDOWN COMPLETE      */
*    SRUINITC BIT(8) CONSTANT('50'X),      /* INIT COMPLETE          */
*    SRUSWNCP BIT(8) CONSTANT('51'X),      /* SW TO NCP              */
*    SRUSWEP  BIT(8) CONSTANT('52'X);      /* SW TO EP               */
*/*                                                                  */
*DCL SRIGNAC  BIT(2) CONSTANT('00'B),      /* STSN IGNORE ACTION CODE*/
*    SRSETAC  BIT(2) CONSTANT('01'B),      /* STSN SET ACTION CODE   */
*    SRINVAC  BIT(2) CONSTANT('10'B),      /* STSN INVAL ACTION CODE */
*    SRSTSAC  BIT(2) CONSTANT('11'B),      /* STSN SET/TEST ACT. CODE*/
*    SRRQRAC  BIT(2) CONSTANT('00'B),      /* STSN REQ RESET ACT CODE*/
*    SRTSPAC  BIT(2) CONSTANT('01'B),      /* STSN TEST POS. ACT CODE*/
*    SRTSNAC  BIT(2) CONSTANT('11'B);      /* STSN TEST NEG. ACT CODE*/
*/*                                                                  */
*DCL SRDFCL1  BIT(8) CONSTANT('01'X),      /* DATA FLOW CONTROL LEV-1*/
*    SRDFCL2  BIT(8) CONSTANT('02'X),      /* DATA FLOW CONTROL LEV-2*/
*    SRDFCL3  BIT(8) CONSTANT('03'X),      /* DATA FLOW CONTROL LEV-3*/
*    SRDFCL4  BIT(8) CONSTANT('04'X);      /* DATA FLOW CONTROL LEV-4*/
*/*                                                                  */
*DCL SRNETSRV  BIT(8) CONSTANT('01'X),  /* NETWORK SERVICES          */
*    SRPHYMS  BIT(8) CONSTANT('03'X),   /* PHYSICAL MAINTENANCE      */
*    SRACTPU  BIT(8) CONSTANT('11'X),   /* ACTIVATE PHYSICAL UNIT    */
*    SRDACTPU BIT(8) CONSTANT('12'X),   /* DEACTIVATE PHYSICAL UNIT  */
*    SRACTLU  BIT(8) CONSTANT('0D'X),   /* ACTIVATE LOGICAL UNIT     */
*    SRDACTLU BIT(8) CONSTANT('0E'X),   /* DEACTIVATE LOGICAL UNIT   */
*    SRBIND   BIT(8) CONSTANT('31'X),   /* BIND SESSION              */
*    SRUNBIND BIT(8) CONSTANT('32'X),   /* UNBIND SESSION            */
*    SRRMSTAT BIT(8) CONSTANT('81'X),   /* RMS REQUEST CODE          */
*    SRSDT    BIT(8) CONSTANT('A0'X),   /* START DATA TRAFFIC        */
*    SRCLEAR  BIT(8) CONSTANT('A1'X),   /* CLEAR                     */
*    SRSTSN   BIT(8) CONSTANT('A2'X);   /* SET AND TEST SEQ NUMBER   */
*/*                                                                  */
*DCL SRESYSS  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRLSYSS  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRMDR    BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRANSOP  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRANSCT  BIT(8) CONSTANT('00'X),  /* TO BE DEFINED LATER        */
*    SRCAPM   BIT(8) CONSTANT('00'X);  /* TO BE DEFINED LATER        */
*/*      FORMATTED SYSTEM SERVICES TYPE                              */
*DCL  NSRUNS  BIT(8) CONSTANT('01'X);  /* NETWORK SERVICES INDICATOR */
*/*      NS SUBCATEGORY VALUES FOR NETWORK SERVICES                  */
*DCL                                                               0696
*     NSRUPCS BIT(8) CONSTANT('02'X),  /* PHYSICAL CONFIG. SERVICES  */
*     NSRUDSS BIT(8) CONSTANT('06'X);  /* DATA/SESSION SERVICES      */
*/*      REQUEST CODE VALUES FOR PHYSICAL CONFIGURATION SERVICES     */
*DCL                                                               0697
*     NSRUCT  BIT(8) CONSTANT('01'X),  /* CONTACT                    */
*     NSRUCTD BIT(8) CONSTANT('80'X),  /* CONTACTED                  */
*     NSRUDSCT BIT(8) CONSTANT('02'X), /* DISCONTACT                 */
*     NSRUIPLI BIT(8) CONSTANT('03'X), /* IPL INITIAL                */
*     NSRUIPLT BIT(8) CONSTANT('04'X), /* IPL TEXT                   */
*     NSRUIPLF BIT(8) CONSTANT('05'X), /* IPL FINAL                  */
*     NSRUDMPI BIT(8) CONSTANT('06'X), /* DUMP INITIAL               */
*     NSRUDMP  BIT(8) CONSTANT('07'X), /* DUMP                       */
*     NSRUDMPF BIT(8) CONSTANT('08'X), /* DUMP FINAL                 */
*     NSRUACTL BIT(8) CONSTANT('0A'X), /* ACTIVATE LINK              */
*     NSRUDCTL BIT(8) CONSTANT('0B'X), /* DEACTIVATE LINK            */
*     NSRURPO  BIT(8) CONSTANT('09'X), /* REMOTE POWER OFF           */
*     NSRUSSV  BIT(8) CONSTANT('11'X), /* SET STATE VECTOR           */
*     NSRUANS  BIT(8) CONSTANT('16'X), /* ENABLE ANSWER              */
*     NSRUAANS BIT(8) CONSTANT('17'X), /* ABANDON ANSWER             */
*     NSRUDIAL BIT(8) CONSTANT('0E'X), /* DIAL                       */
*     NSRUADIL BIT(8) CONSTANT('18'X), /* ABANDON DIAL               */
*     NSRUACON BIT(8) CONSTANT('0F'X), /* ABANDON CONNECTION         */
*     NSRUANA  BIT(8) CONSTANT('19'X), /* ASSIGN NET ADDRESS         */
*     NSRUFNA  BIT(8) CONSTANT('1A'X), /* FREE NET ADDRESS           */
*     NSRUOH   BIT(8) CONSTANT('84'X), /* OFF HOOK                   */
*     NSRUINOP BIT(8) CONSTANT('81'X); /* INOPERATIVE                */
*/*   REQUEST CODE VALUES FOR MAINTENANCE SERVICES                   */
*DCL  NSRUATRC BIT(8) CONSTANT('02'X), /* ACTIVATE TRACE             */
*     NSRUDTRC BIT(8) CONSTANT('03'X); /* DEACTIVATE TRACE           */
*/*   REQUEST CODE VALUES FOR PRE-SNA SERVICES                       */
*DCL  NSRUCTXL BIT(8) CONSTANT('01'X), /* CHANGE TRANS LIMIT         */
*     NSRUCNPL BIT(8) CONSTANT('02'X), /* CHANGE NEGATIVE POLL       */
*     NSRUCSL  BIT(8) CONSTANT('03'X), /* CHANGE SESSION LIMIT       */
*     NSRUCPL  BIT(8) CONSTANT('04'X); /* CHANGE POLL                */
*/*      REQUEST CODE VALUES FOR DATA/SESSION SERVICES               */
*DCL                                                               0700
*     NSRUINSF BIT(8) CONSTANT('81'X), /* INITATE-SELF               */
*     NSRUTMSF BIT(8) CONSTANT('83'X), /* TERMINATE-SELF             */
*     NSRUNSPE BIT(8) CONSTANT('04'X); /* NS PROCEDURE ERROR         */
*/*  UNBIND RU---THIS STRUCTURE IS AN OVERLAY FOR SRUDATA            */
*DCL  1  ISTUNBRU DEF(SRUTYPE),    /* UNBIND MINUS OPCODE            */
*        2 UNBTYPE  CHAR(1);       /* TYPE OF UNBIND                 */
*                                                                  0701
*                                                                  0701
*DCL SRRQR  BIT(8) CONSTANT('A3'X);    /* ELEMENT RECOVERY          */
*DCL SRUSTERR BIT(32) CONSTANT('20000000'X); /* STATE ERROR MASK     */
*DCL SRURRERR BIT(32) CONSTANT('08000000'X); /* REQUEST REJECT MASK  */
*DCL SRUFIERR BIT(32) CONSTANT('10000020'X); /* FUNCTION INTERP MASK */
*DCL SRUFISEN BIT(16) CONSTANT('1000'X);     /* FUNCTION INTERP SENSE*/
*DCL SRUPESEN BIT(16) CONSTANT('8000'X);     /* PATH ERROR SENSE     */
*DCL SRUOPCHK BIT(32) CONSTANT('00000001'X); /* OPERATION CHK SENSE  */
*DCL SRUPESNS BIT(32) CONSTANT('80000000'X); /* PATH ERROR SENSE     */
*DCL SRSIGNAL BIT(8) CONSTANT('C9'X);                              0710
*DCL SRUSRBID BIT(8) CONSTANT('C8'X);                              0711
*DCL SRLUS    BIT(8) CONSTANT('04'X);                              0712
*DCL SRRTR    BIT(8) CONSTANT('05'X);                              0713
*DCL SRRSHUTD BIT(8) CONSTANT('C2'X);                              0714
*/*                                                                  */
*DCL SRUPE    BIT(8) CONSTANT('80'X),     /* PATH ERROR              */
*    SRUCPME  BIT(8) CONSTANT('40'X),     /* CPM ERROR               */
*    SRUSTATE BIT(8) CONSTANT('20'X),     /* STATE ERROR             */
*    SRUFIE   BIT(8) CONSTANT('10'X),     /* FUNCTION INTERPRETER ERR*/
*    SRURRE   BIT(8) CONSTANT('08'X),     /* REQUEST REJECT          */
*    SRUZERO  BIT(8) CONSTANT('00'X);                              0715
*/*  PATH ERRORS                                                     */
*DCL SRUINF   BIT(8) CONSTANT('01'X),     /* INTERMED. NODE FAILURE  */
*    SRULF    BIT(8) CONSTANT('02'X),     /* LINK FAILURE            */
*    SRULUI   BIT(8) CONSTANT('03'X),     /* LU INOPERATIVE          */
*    SRUNODAF BIT(8) CONSTANT('04'X),     /* NO DAF                  */
*    SRUNOSES BIT(8) CONSTANT('05'X),     /* NO SESSION              */
*    SRUFID   BIT(8) CONSTANT('06'X),     /* FID                     */
*    SRUMPF   BIT(8) CONSTANT('07'X),     /* MPF                     */
*    SRUPRI   BIT(8) CONSTANT('08'X),     /* PRIORITY                */
*    SRUSEC   BIT(8) CONSTANT('09'X),     /* SECURITY                */
*    SRUCODE  BIT(8) CONSTANT('0A'X),     /* CODE                    */
*    SRUINTH  BIT(8) CONSTANT('0B'X);     /* INCOMPLETE TH           */
*/*  CPM ERRORS                                                      */
*DCL SRUPENS  BIT(8) CONSTANT('01'X),     /* PE NOT SUPPORTED        */
*    SRURRNNS BIT(8) CONSTANT('02'X),     /* RRN NOT SUPPORTED       */
*    SRURNS   BIT(8) CONSTANT('03'X),     /* RETRY NOT SUPPORTED     */
*    SRULNS   BIT(8) CONSTANT('04'X),     /* LOG NOT SUPPORTED       */
*    SRUINRH  BIT(8) CONSTANT('05'X);     /* INCOMPLETE RH           */
*/*  STATE ERRORS                                                    */
*DCL SRUSEQNR BIT(8) CONSTANT('01'X),     /* SEQUENCE NUMBER         */
*    SRUCHAIN BIT(8) CONSTANT('02'X),     /* CHAINING                */
*    SRUBRCAT BIT(8) CONSTANT('03'X),     /* BRACKET ( CATASTROPHIC )*/
*    SRUCHDIR BIT(8) CONSTANT('04'X);     /* CHANGE DIRECTION        */
*/*  FUNCTION INTERPRETER ERRORS                                     */
*DCL SRURUDE  BIT(8) CONSTANT('01'X),     /* RU DATA ERROR           */
*    SRURUSE  BIT(8) CONSTANT('02'X),     /* RU STRUCTURE ERROR      */
*    SRUFUNC  BIT(8) CONSTANT('03'X),     /* FUNCTION UNKNOWN        */
*    SRUFNS   BIT(8) CONSTANT('04'X),     /* FUNCTION NOT SUPPORTED  */
*    SRUHFE   BIT(8) CONSTANT('05'X),     /* HORIZONTAL FORMAT ERROR */
*    SRUVFE   BIT(8) CONSTANT('06'X);     /* VERTICAL FORMAT ERROE   */
*/*  REQUEST REJECT ERRORS                                           */
*DCL SRURNA   BIT(8) CONSTANT('01'X),     /* RESOURCE NOT AVAILABLE  */
*    SRUINREQ BIT(8) CONSTANT('02'X),     /* INTERVENTION REQUIRED   */
*    SRUMCW   BIT(8) CONSTANT('03'X),     /* MISSING CODEWORD        */
*    SRUINCW  BIT(8) CONSTANT('04'X),     /* INVALID CODEWORD        */
*    SRUSLE   BIT(8) CONSTANT('05'X),     /* SESSION LIMIT EXCEEDED  */
*    SRULUU   BIT(8) CONSTANT('06'X),     /* LU UNKNOWN              */
*    SRULUIN  BIT(8) CONSTANT('07'X),     /* LU INACTIVE             */
*    SRULURS  BIT(8) CONSTANT('08'X),     /* LU RESERVED             */
*    SRUMI    BIT(8) CONSTANT('09'X),     /* MODE INCOSISTENCY       */
*    SRUPR    BIT(8) CONSTANT('0A'X),     /* PERMISSION REJECTED     */
*    SRUFD    BIT(8) CONSTANT('16'X),     /* FUNCTION DISABLED       */
*    SRUFUNS  BIT(8) CONSTANT('0C'X),     /* FUNCTION NOT SUPPORTED  */
*    SRUQUED  BIT(8) CONSTANT('0D'X),     /* QUEUED                  */
*    SRULUNA  BIT(8) CONSTANT('0E'X),     /* LU NOT AUTHORIZED       */
*    SRUEUMNA BIT(8) CONSTANT('0F'X),     /* EUM NOT AUTHORIZED      */
*    SRUMRID  BIT(8) CONSTANT('10'X),     /* MISSING REQUESTOR ID    */
*    SRUBREAK BIT(8) CONSTANT('11'X),     /* BREAK                   */
*    SRUISR   BIT(8) CONSTANT('12'X),     /* INSUFFICIENT SYS RESRCE */
*    SRUBRE   BIT(8) CONSTANT('13'X);     /* BRACKET RACE ERROR      */
*/*  FOUR BYTE EQUATES FOR SRUSENSE                                  */
*DCL SRUSEQNQ BIT(32) CONSTANT('20010000'X); /* SEQUENCE NUMBER ERR. */
*/* RPL HEADER                                                        *
*/*  REVISIONS                                         006 04/09/75   *
*DCL RPHPTR PTR(31) REGISTER(1) RESTRICTED;                        0722
*DCL  1  ISTRPH BDY(WORD) BASED(RPHPTR),                           0723
*       2  RPHCNTL FIXED(32),          /* CONTROL INFORMATION         *
*       3  RPHTYPE CHAR(1),            /* CONTROL BLOCK TYPE          *
*       3  RPHLNGTH PTR(8),            /* LENGTH IN BYTES             *
*       3  RPHFLAGS BIT(8),            /* SYSTEM DEPENDENT FLAGS      *
*         4  RPHOGIND BIT(1),          /* OPEN GATE INDICATOR         *
*         4  RPHSPGIN BIT(1),          /* SPECIAL GATE OPEN IND.      *
*         4  RPHAPTYP BIT(1),          /* APS IS A USER EXIT          *
*            5  RPHAUTEX BIT(1),        /*EXIT TO AUTHORIZED USER VS2 *
*         4  RPHSMQ BIT(1),            /* INDICATOR IF RPH IS TO BE   *
*                                      /* QUEUED                      *
*         4  RPHSMTYP BIT(1),          /* REQUEST TYPE IS BUFFER OR   *
*                                      /* DOUBLE-WORD                 *
*         4  RPHSMCLR BIT(1),          /* INDICATOR IF BUFFER TO BE   *
*                                      /* CLEARED                     *
*           4  RPHMLTCP BIT(1),        /* USED BY LOCAL 3270  SUPPORT *
*                                      /* WHEN BUILDING MULTIPLE CHAN *
*                                      /* PROGRAM                     *
*           4  RPHFSTLC BIT(1),        /* USED BY LOCAL 3270 SUPPORT  *
*                                      /* TO INDICATE FIRST LCCW      *
*              5  RPHFNFLG BIT(1),     /* LCCW SET FUNCTION FLAGS     *
*        3  RPHFLGB BIT(8),            /* SECOND FLAG BYTE            *
*           4  RPHLOCK BIT(1),         /* LOCKING OPTION              *
*           4  RPHBSSP BIT(1),         /* SYSTEM SERVICES PROGRESS    *
*           4  RPHFBAPS BIT(1),        /* STG. OBTAINED BY APS        *
*           4  RPHPGCMP BIT(1),        /* BIT ON INDICATES RESOURCE   *
*                                      /* MGR HAS COMPLETED UNLOCK    *
*           4  RPHNRSAV BIT(1),        /* DO NOT SAVE ON ACTIVATE     *
*           4  RPHRLCRA BIT(1),        /* RPH CAN BE RELEASED         *
*                                      /* WHEN PURGE COMPLETE         *
*           4  *        BIT(2),        /* RESERVED                    *
*       2  RPHRPHA PTR(31),            /* ADDR.OF NEXT RPL HEADER     *
*         3  RPHGATE BIT(1),           /* GATING FLAG                 *
*         3  *       BIT(7),           /* RESERVED                    *
*         3  RPHRPHAP PTR(24),                                     0723
*       2  RPHTSKID PTR(31),           /* TASK IDENTIFICATION         *
*                                      /* OR ADDR.OF APS TABLE        *
*          3  *     CHAR(3),           /* RPH TSK ID                  *
*          3  RPHTIK PTR(8),           /* TIK                         *
*       2  RPHDVTA PTR(31),            /* ADDR.OF  CURRENT DVT        *
*       2  RPHRESMA PTR(31) BDY(WORD), /* TPWAIT-POST INFO */      0723
*         3 RPHWPFLG CHAR(1),          /* WAIT-POST FLAGS */       0723
*           4 RPHRSKEY BIT(4),         /* STORAGE PROTECT KEY TO RESUME
*                                         PROCESSING                  *
*           4 RPHWT BIT(1),            /* WAIT BIT */              0723
*           4 RPHPT BIT(1),            /* POST BIT */              0723
*           4 RPHPURGE BIT(1),         /* RPH FLAGGED BY RECOVERY    */
*                                      /* TO BE PURGED BY PSS        */
*                                      /* VS/2 ONLY                  */
*           4 RPHRSV01 BIT(1),        /* RESERVED                    */
*         3 RPHRESUM PTR(24),          /* RESUME ADDRESS */        0723
*       2  RPHPABOF PTR(8),            /* OFFSET OF PAB IN CONTROL BLK*
*       2  RPHMAJCB PTR(24),           /* ADDR.OF MAJOR CONTROL BLOCK *
*       2  RPHWEA PTR(31),             /* ADDR.OF WORK ELEMENT        *
*         3  RPHCSPA PTR(31),          /* ADDR OF ISTCSP              *
*           4  RPHWEGT BIT(1),         /* GATE FOR WORK ELEMENT PROC. *
*       2  RPHSRPRM PTR(31),           /* SERVICE ROUTINE PARM.FIELD  *
*         3 RPHSRP12 FIXED(15),        /* COUNT OF Q'ED SMS REQUESTS  *
*         3 RPHSRP34 FIXED(15),        /* SIZE OF Q'ED SMS REQUESTS   *
*       2  RPHCRR PTR(31),             /* ADDR.OF COMPONENT RECOVERY  *
*                                      /* RECORD                      *
*       2  RPHPABQA PTR(31),           /* PAB QUEUE ADDRESS           *
*          3 RPHPABFG CHAR(1),         /* FLAG BYTE CARRIED FROM PAB  *
*          3 RPHPABQP PTR(24),         /* POINTER TO QUEUE OF PAB'S   *
*       2  RPHWORK CHAR(64) BDY(WORD), /* 16 WORD WORK AREA           *
*         3  RPHSAVE1 FIXED(31),       /*                             *
*           4  RPHSBYTE CHAR(1),       /* 1-BYTE SAVE FIELD           *
*           4  RPHSBITS BIT(8),        /* SAVE FIELD FOR FLAG BYTE    *
*              5  RPHSBIT1 BIT(1),     /* 1ST SAVE FIELD              *
*              5  RPHSBIT2 BIT(1),     /* 2ND SAVE FIELD              *
*              5  RPHSBIT3 BIT(1),     /* 3RD SAVE FIELD              *
*              5  RPHSBIT4 BIT(1),     /* 4TH SAVE FIELD              *
*              5  RPHSBIT5 BIT(1),     /* 5TH SAVE FIELD              *
*              5  RPHSBIT6 BIT(1),     /* 6TH SAVE FIELD              *
*              5  RPHSBIT7 BIT(1),     /* 7TH SAVE FIELD              *
*              5  RPHSBIT8 BIT(1),     /* 8TH SAVE FIELD              *
*           4  RPHSHALF FIXED(15),     /* HALF WORD SAVE AREA         *
*         3  RPHSAVE2 FIXED(31),       /*                             *
*         3  RPHSAVE3 FIXED(31),       /*                             *
*         3  RPHSAVE4 FIXED(31),       /*                             *
*         3  RPHSAVE5 FIXED(31),       /*                             *
*         3  RPHSAVE6 FIXED(31),       /*                             *
*         3  RPHSAVE7 FIXED(31),       /*                             *
*         3  RPHSAVE8 FIXED(31),       /*                             *
*         3  RPHSAVE9 FIXED(31),       /*                             *
*         3  RPHSAV10 FIXED(31),       /*                             *
*         3  RPHSAV11 FIXED(31),       /*                             *
*         3  RPHSAV12 FIXED(31),       /*                             *
*         3  RPHSAV13 FIXED(31),       /*                             *
*         3  RPHSAV14 FIXED(31),       /*                             *
*         3  RPHSAV15 FIXED(31),       /*                             *
*         3  RPHSAV16 FIXED(31),       /*                             *
*       2  RPHNEXPO PTR(31);           /* ADDR.NEXT RPH TO BE POSTED  *
* DCL RPTYPE BIT(8) CONSTANT('01'X);   /* TYPE CODE FOR RPH           *
* DCL RPHWT0 BIT(32) CONSTANT('F7FFFFFF'X);   /* TURN RPHWT OFF */ 0725
* DCL RPHWT1 BIT(32) CONSTANT('08000000'X);   /* TURN RPHWT ON */  0726
* DCL RPHPT0 BIT(32) CONSTANT('FBFFFFFF'X);   /* TURN RPHPT OFF */ 0727
* DCL RPHPT1 BIT(32) CONSTANT('04000000'X);   /* TURN RPHPT ON */  0728
* DCL RPHPABQ1 BIT(24) CONSTANT('000000'X); /* TURN RPHPBQ GATE */ 0729
*/* PROCESS ANCHOR BLOCK                                              *
*/*  REVISIONS                                         002 11/16/75  */
*/*       APAR      OZ19540    DCL PABSSN ABNORMAL           @ZA19540*/
*DCL  1  ISTPAB BDY(DWORD) BASED,                                  0730
*       2  PABWQCHN CHAR(8) BDY(DWORD), /* CPS SWAP FIELD FOR NEQ&CHN *
*        3  PABWEQA PTR(31) BDY(WORD), /* WORK ELEMENT QUEUE ADDRESS  *
*           4  PABWEQG BIT(1),         /* GATING BIT                  *
*           4  PABRSV01 BIT(7),        /* RESERVED                    *
*           4  PABWEQP PTR(24),        /* WKEL PTR                    *
*        3  PABCHAIN PTR(31) BDY(WORD), /* APS CHAIN                  *
*           4  PABCHNG BIT(1),         /* GATING BIT                  *
*           4  PABRESCH BIT(1),        /* RESCHEDULE PAB AT        0730
*                                         TPEXIT                      *
*           4  PABCDP BIT(1),          /* CLOSE DST/CHANGE IN PROGRESS*
*           4  PABUNCON BIT(1),        /* UNCONDITIONALLY RESCHEDULE
*                                         PAB AT TPEXIT               *
*           4  PABRESET BIT(1),        /* RESET ISSUED ON THIS PAB    *
*           4  PABRUNNG BIT(1),        /* PAB RUNNING                 *
*           4  PABDELAY BIT(1),        /* DELAY OPTION USED           *
*           4  PABRSV02 BIT(1),        /* RESERVED                    *
*           4  PABCHNGP PTR(24),       /* PSS CHAIN PTR               *
*        2  PABOFFST PTR(8),           /* OFFSET FROM CONTROL BLOCK   *
*        2  PABDVTA PTR(24),           /* DVT ADDRESS                 *
*        2  PABRPHFG PTR(31),          /* SCHED FLAGS AND RPH         *
*           3  PABFLAGS BIT(8),        /* SCHEDULING FLAGS            *
*              4  PABAPYP BIT(1),      /* APPLICATION IS A USER EXIT  *
*              4  PABPRIOR BIT(1),     /* IMMEDIATE PRIORITY          *
*              4  PABNORPR BIT(1),     /* NORMAL PRIORITY -           *
*                                      /* RESCHEDUALABLE              *
*              4  PABDYNAM BIT(1),     /* DYNAMIC                     *
*              4  PABSSN BIT(1) ABNL,  /* SYSTEM SERVICES    @ZA19540 *
*              4  PABERLCK BIT(1),     /* PAB ERROR LOCK FLAG         *
*                 5  PABERRLK BIT(1),  /* ERROR LOCK                  *
*                    6  PABERLOK BIT(1), /* ERROR LOCK                *
*/*    ABNORMAL TO ALLOW VARY COMPARE AND SWAP                        *
*              4  PABINHBT BIT(1) ABNL,/* 1=INHIBIT TRAFFIC,0=NO      *
*              4  PABNODQ BIT(1),      /* DO NOT DEQ WORK ELEMENT     *
*           3  PABRPHA PTR(24);        /* RPL HEADER ADDRESS          *
*DCL PABWEQG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABWEQG OFF     *
*    PABWEQG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABWEQG ON      *
*    PABCHNG0 BIT(32) CONSTANT('7FFFFFFF'X),  /* TURN PABCHNG OFF     *
*    PABCHNG1 BIT(32) CONSTANT('80000000'X),  /* TURN PABCHNG ON      *
*    PABRESC0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PABRESCH OFF    *
*    PABRESC1 BIT(32) CONSTANT('40000000'X),  /* TURN PABRESCH ON     *
*    PABCDP0  BIT(32) CONSTANT ('DFFFFFFF'X), /* TURN PABCDP OFF      *
*    PABCDP1  BIT(32) CONSTANT ('20000000'X), /* TURN PABCDP ON       *
*    PABERLK0 BIT(32) CONSTANT('FBFFFFFF'X),  /* TURN PABERRLK ON     *
*    PABERLK1 BIT(32) CONSTANT('04000000'X),  /* TURN PABERRLK OFF    *
*    PABUNCO0 BIT(32) CONSTANT('EFFFFFFF'X),  /* TURN PABUNCON OFF    *
*    PABUNCO1 BIT(32) CONSTANT('10000000'X),  /* TURN PABUNCON ON     *
*    PABPRIR0 BIT(32) CONSTANT('BFFFFFFF'X),  /* TURN PAB PRIOR OFF   *
*    PABPRIR1 BIT(32) CONSTANT('40000000'X),  /* TURN PAB PRIOR ON    *
*    PABRST0  BIT(32) CONSTANT('F7FFFFFF'X),  /* TURN PABRESET OFF    *
*    PABRST1  BIT(32) CONSTANT('08000000'X),  /* TURN PABRESET ON     *
*    PABDLAY0 BIT(32) CONSTANT('FDFFFFFF'X),  /* TURN PAB DELAY OFF   *
*    PABDLAY1 BIT(32) CONSTANT('02000000'X);  /* TURN PAB DELAY ON    *
*              /* DYNAMIC PAB 1K633 */                             0732
* /* 1K0997 JAN 20, 1973  MB   */                                  0732
* /* 1K1142 MAR 03, 1973  MB   */                                  0732
* DCL 1 ISTDYPAB BDY(DWORD) BASED, /* LEVEL 1 DECLARE 1K633 */     0732
*       2  DYPTYPE CHAR(1), /* CONTROL BLOCK TYPE CODE 1K633 */    0732
*       2  DYPLNGTH PTR(8), /* CONTROL BLOCK LENGTH (BYTES)  1K633 */
*       2 DYPFLGS CHAR(2),     /* FLAGS 1K633 */                   0732
*       2 DYPCHAIN PTR(31),    /* CHAIN POINTER 1K633 */           0732
*       2 DYPTSKID PTR(31),    /* TASKID OR PTR TO PSS TABLES 1K633 */
*       2  DYPRSV01 PTR(31),   /* RESERVED TO PRESERVE ALIGNMENT   0732
*                                                             1K0997 */
*       2 DYPPAB CHAR(LENGTH(ISTPAB)) BDY(DWORD); /* LENGTH OF 1K0997
*                                                    PAB         */
*DCL DYTYP   BIT(8) CONSTANT ('11'X);   /* TYPE           1K1142 */
*/*  REVISIONS                                             03/04/77   *
*DCL ATCLCPTR PTR LOCATION(1032);      /* POINTER TO ATCVT            *
*DCL  1  ISTATCVT BDY(DWORD) BASED,                                0735
*        2  ATCCOM BDY(WORD),          /* SYSTEM INDEPENDENT FIELDS   *
*           3  ATCSTAT CHAR(4),        /* VTAM  STATUS INDICATORS     *
*              4  ATCSTAT1 CHAR(1),    /* VTAM  STATUS BYTE 1         *
*                 5  ATCSTART BIT(1),  /* VTAM  IS STARTING           *
*                 5  ATCACTIV BIT(1),  /* VTAM  IS ACTIVE             *
*                 5  ATCSNHLT BIT(1),  /* VTAM  SESSION HALT          *
*                 5  ATCQKHLT BIT(1),  /* VTAM  QUICK HALT            *
*                 5  ATCNETSL BIT(1),  /* NETSOL=YES SPECIFIED ON CMD *
*                 5  ATCINHLT BIT(1),  /* INTERNAL VTAM HALT QUICK    *
*                 5  ATCMDHLT BIT(1),  /* VTAM CMD PROC HALTED        *
*                 5 * BIT(1),          /* RESERVED                    *
*              4  ATCSTFLG BIT(8),     /* STORAGE MANAGEMENT FLAGS    *
*                 5  ATCHSDMF BIT(1),  /* SYSTEM SLOW DOWN FLAG       *
*              4  ATCPOFLG BIT(8),     /* PROGRAM OPERATOR            *
*                                      /* INTERFACE FLAGS             *
*                 5 ATCPOUNS BIT(1),   /* APPLICATION AUTHORIZED TO   *
*                                      /* RECEIVE UNSOLICITED MESSAGES*
*                                      /* 1 = YES                     *
*                 5 *        BIT(7),   /* RESERVED                    *
*              4  ATCSTAT4 CHAR(1),    /* VTAM  STATUS BYTE 4         *
*                 5  ATCPRTAT BIT(1),  /* 1 = TRACE PRINT ACTIVE,  0735
*                                         0 = NOT ACTIVE              *
*                 5  ATCTPRT BIT(1),   /* WHEN 1, TPRINT IN PROCESS   *
*                 5  ATCMTST BIT(1),   /* WHEN 1, MODIFY TEST IN   0735
*                                         PROCESS                     *
*                 5  ATCNCSD BIT(1),   /* NCS QUIESCED DURING HALT    *
*                 5  ATCVTTRC BIT(1),  /* VTAM TRACE, 1=ACTIVE        *
*                 5  ATCRSV04 BIT(3),  /* RESERVED                    *
*           3  ATCAPI PTR(31),         /* ADDR OF API ROUTINE         *
*           3  ATCDCFRR PTR(31),       /* POINTER TO FRR OF CONTROL
*                                         LAYER,INITIALIZED BY OPENDST*
*           3  ATCRDT PTR(31),         /* POINTER TO FIRST RDT        *
*           3  ATCSRT PTR(31),         /* POINTER TO SRT DIRECTORY    *
*           3  ATCASCHD PTR(31),       /* POINTER TO AP SCHEDULER     *
*           3  ATCECMOD CHAR(4),       /* ECB FOR MODIFY COMMAND PROC.*
*           3  ATCMODQ PTR(31),        /* POINTER FOR OUTPUT QUEUE    *
*                                      /* FOR MODIFY COMMAND          *
*           3  ATCECHLT CHAR(4),       /* ECB FOR HALT COMMAND        *
*           3  ATCHALTQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR HALT COMMAND            *
*           3  ATCECVRY CHAR(4),       /* ECB FOR VARY COMMAND PROC.  *
*           3  ATCVARYQ PTR(31),       /* POINTER TO OUTPUT QUEUE     *
*                                      /* FOR VARY COMMAND            *
*           3  ATCECDSP CHAR(4),       /* ECB FOR DISPLAY COMMAND     *
*           3  ATCDSPLQ PTR(31),       /*  POINTER TO OUTPUT QUEUE    *
*                                      /* FOR DISPLAY COMMAND         *
*           3  ATCOCHA PTR(31),        /* POINTER TO OCT HEADER       *
*           3  ATCECSES CHAR(4),       /* ECB TO HALT SESSION MODE    *
*           3  ATCECVRQ CHAR(4),       /* ERP ECB FOR VARY REQ. INFO. *
*                                      /* REQUEST NOTIFICATION        *
*           3  ATCVPARM PTR(31),       /* ADDR OF VARY PARAMETERS     *
*           3  ATCECOPC CHAR(4),       /* ECB TOINDICATE OPERATOR     *
*                                      /* CONTROL PROCESSING COMPLETE *
*           3  ATCECNET CHAR(4),       /* ERP ECB FOR NETWORK         *
*                                      /* CONFIGURATION REQUEST       *
*           3  ATCECPRM PTR(31),       /* POINTER TO QAB FOR ERP'S    *
*                                      /* ECB PARAMETERS              *
*           3  ATCHLTMS PTR(31),       /* POINTER TO HALT COMMAND     *
*                                      /* OR HALT RETURN MESSAGE      *
*           3  ATCFSB PTR(31),         /* PTR TO FEEDBACK STATUS      *
*                                      /* BLOCK                       *
*           3  ATCFRSCH PTR(31),       /* POINTER TO FEEDBACK         *
*                                      /* ROUTINE SCHEDULER           *
*           3  ATCRDTH PTR(31),        /*  POINTER RDT HEADER         *
*           3  ATCACCTA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* ACCOUNTING ROUTINE          *
*           3  ATCAUTHA PTR(31),       /* POINTER TO INSTALLATION     *
*                                      /* AUTHORISATION ROUTINE       *
*           3  ATCPTCHA PTR(31),       /* PTR TO VTAM PATCH AREA      *
*           3  ATCCONFT PTR(31),       /* POINTER TO VTAM             *
*                                      /* CONFIGURATION TABLE         *
*           3  ATCFDVT PTR(31),        /* PTR TO FIRST DVT FOR O/C    *
*           3  ATCFEPT PTR(31),        /* PTR TO FIRST EPT FOR O/C    *
*           3  ATCDVTPT PTR(31),       /* ADDR OF LOAD MOD FOR        *
*                                      /* TYPE=VTAM TRACING           *
*           3  ATCBPDA PTR(31),        /* PTR TO BUFFER POOL DIRECTORY*
*           3  ATCADD PTR(31),         /* POINTER TO ADD PROCEDURE    *
*           3  ATCREMOV PTR(31),       /* POINTER TO REMOVE PROCEDURE *
*           3  ATCIOTRC PTR(31),       /*  POINTER TO I/O TRACE       *
*                                      /* PROCEDURE                   *
*              4 ATCTHTRC PTR(31),     /* ADDR OF TH TRACE ROUTINE    *
*                5 ATCTPBUF PTR(31),   /* TPIOS BUFFER TRACE(ISTRARTP)*
*           3  ATCBFTRC PTR(31),       /* PTR TO BUFFER TRACE         *
*                                      /* PROCEDURE                   *
*           3  ATCFBRPH PTR(31),       /* ADDR OF FEEDBACK PROC RPH   *
*           3  ATCBLDLA PTR(31),       /* ADDR OF BLDL ROUTINE        *
*           3  ATCALOAD PTR(31),       /* ADDR OF ALOAD ROUTINE       *
*           3  ATCREADA PTR(31),       /* ADDR OF SOURCE READ ROUTINE *
*           3  ATCGTSTR PTR(31),       /* ADDR OF GETSTOR ROUTINE     *
*           3  ATCFRSTR PTR(31),       /* ADDR OF FREESTOR ROUTINE    *
*           3  ATCSTMA PTR(31),        /* ADDR OF SM INITIALIZATION   *
*                                      /* ROUTINE                     *
*           3  ATCACDA PTR(31),        /* ADDR OF FIRST ACDEB         *
*           3  ATCSMRQ PTR(31),        /* ADDR OF REQUEST STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMQU PTR(31),        /* ADDR OF QUEUE REQUEST RTNE
*                                         - DOS ONLY                  *
*           3  ATCSMRS PTR(31),        /* ADDR OF RELEASE STORAGE     *
*                                      /* ROUTINE                     *
*           3  ATCSMRC PTR(31),        /* ADDR OF RECOVER STORAGE     *
*                                      /* ROUTINE  - DOS ONLY         *
*           3  ATCSMBQ PTR(31),        /* PTR TO Q'ED REQ. SMS RTN.   *
*           3  ATCFIRA PTR(31),        /* ADDR OF FEEDBACK INITIATION *
*                                      /* RPH                         *
*           3  ATCSRTAD PTR(31),       /* PTR TO SRTADD ROUTINE       *
*           3  ATCSRTDF PTR(31),       /* PTR TO SRTDELE ROUTN        *
*           3  ATCDCC60 PTR(31),       /* PTR TO ISTDCC60 - CTL. LAYER
*                                         MOVE TO USER AREA           *
*           3  ATCDCC61 PTR(31),       /* PTR TO ISTDCC61 - CTL. LAYER
*                                         MOVE FIXED TO PAGABLE       *
*/*  BEGIN 'ANY' DVT                                                  *
*           3  ATCNERST PTR(31),       /* PTR TO ISTDCC00 - REQUEST-ST*
*           3  ATCNERCV PTR(31),       /* PTR TO ISTRCC21-RECEIVE OB  *
*           3  ATCNERNE PTR(31),      /* PTR TO ISTDCC25 - READ-ANY   *
*           3  ATCNERFN PTR(31),      /* PTR TO ISTDCC02 - REQUEST-FN *
*/*  END 'ANY' DVT                                                    *
*           3  ATCAPOST PTR(31),      /* PTR TO VTAM  POST ROUTINE    *
*           3  ATCVTMID CHAR(2),      /* HOST MAJOR NODE I.D.         *
*           3  ATCRSV11 CHAR(2),      /* RESERVED                     *
*           3 ATCRCC63 PTR(31),  /* HSKPANYQ POINTER                  *
*           3 ATCRCC26 PTR(31),  /* SEND RESPONSE POINTER             *
*           3 ATCRCC65 PTR(31),  /* SET RPL POINTER                   *
*           3  ATCNESAL PTR(31),      /* PTR TO ISTDCC24 - SOLICIT-ALL*
*           3  ATCNERAP PTR(31),       /* PTR TO ISTDCC85 - READ ANY
*                                         PURGE                       *
*           3 ATCACTRM FIXED(15),     /* COUNT OF ACTIVE TERMINALS    *
*           3 ATCCIDM BIT(16),        /* CID MASK                     *
*           3 ATCMSGSP BIT(8), /* RESERVED FOR MESAGE SURPRESSION     *
*         2 ATCMAXID PTR(8),   /* MAXIMUM NUMBER OF MAJOR NODES, 0 =
*                                 NUMBER OF ENTRIES IN THE MNT        *
*         2 ATCRSV16 CHAR(2),  /* NOT USED                            *
*         2 ATCMNT PTR(31),    /*PTR TO MAJOR NODE TABLE -SET BY SYS.
*                                DEF. REF. BY ISTSDCCB (CBDEF),    0735
*                                ISTSDCCI (CINDEXY)                   *
*         2 ATCCDADD PTR(31),  /*PTR TO CIDADD ROUTINE ISTSDCCA    0735
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDDEL PTR(31),  /*PTR TO CIDDEL ROUTINE ISTSDCCD    0735
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCCDFND PTR(31),  /*PTR TO CIDFND ROUTINE IATSDCCF    0735
*                                 REF. BY CIDCTL MACRO                *
*         2 ATCESC01 PTR(31),  /*PTR TO ESC01                         *
*         2 ATCESC02 PTR(31),  /*PTR TO ESC02                         *
*         2 ATCCSMR PTR(31),        /* PTR TO CONNECTION SERVICES     *
*                                   /*  MASTER ROUTINE                *
*           3 ATCCSMA PTR(31),      /* PTR TO CONNECTION SERVICES  0735
*                                      MASTER ROUTINE                 *
*         2 ATCOCRT PTR(31),        /* PTR TO OPEN/CLOSE ROUTINE      *
*         2 ATCUEP  PTR(31),        /* POINTER TO USER EXIT           *
*         2 ATCSHRTN CHAR(8),       /* NAME OF VTAM  SHARED RTN       *
*                                   /*  TO BE LOADED                  *
*         2 ATCSHRFG BIT(8),        /* ATTRIBUTE FLAGS                *
*           3 ATCLAST BIT(1),       /* INDICATE HTIS IS LAST MODULE   *
*         2 ATCXRANG CHAR(1),       /* NUMBER OT BITS IN X-VALUE   0735
*                                       PORTION   OF CID              *
*         2 ATCSAF   CHAR(2),       /* SUB AREA ADDRESS FIELD         *
*         2 ATCEPA PTR(31),         /* ENTRY POINT ADDR OF LOADED     *
*         2 ATCALERT PTR(31),       /* POINTER TO ALERT-ROUTINE    0735
*                                      ISTSDCAL                       *
*         2 ATCDVLOD PTR(31),       /* PTR TO ISTSDCOD                *
*         2 ATCTRCPT PTR(31),       /* POINTER TO TRACE PARM LIST     *
*         2 ATCDVT   PTR(31),       /* POINTER TO FIRST DVT ON CHAIN  *
*         2 ATCEPT   PTR(31),       /* POINTER TO FIRST EPT ON CHAIN  *
*         2 ATCMSGP PTR(31),        /* POINTER TO TPMSG PROCESSOR     *
*         2 ATCMSGM PTR(31),        /* POINTER TO TPMSG - MESSAGE  0735
*                                      CSECT                          *
*         2 ATCTRPAB  PTR(31),      /* ADDRESS OF TRACE WRITER PAB    *
*         2 ATCVTLOD PTR(31),       /* ADDR OF VTAM LOAD LIST         *
*         2 ATCECPRT CHAR(4),       /* ECB FOR TRACE FILE PRINT       *
*         2 ATCZDVTB PTR(31),       /* ADDRESS OF ISTZCFBI            *
*         2 ATCECTLP CHAR(4),       /* TOLTEP ECB                     *
*         2 ATCRVCHS CHAR(8),       /* RESERVED                       *
*         2 ATCCRME  PTR(31),       /* VARY PSS CONTROL MECHANISM     *
*         2 ATCHPGM,                /* BUFFER INFORMATION            */
*           3 ATCHBFNO FIXED(15),   /* NUMBER OF BUFFS FOR CHANNEL   */
*           3 ATCHBSIZ FIXED(15),   /* BUFFER SIZE IN BYTES          */
*         2 ATCDEBCH PTR(31),       /* CLOSE DEB CHAIN PTR           */
*         2 ATCTODVT PTR(31),       /* THE TOLTEP DVT PTR POINTED  0735
*                                      TO BY 3RD WORD OF PAB         */
*         2 ATCADEL  PTR(31),       /* A DELETE ROUTINE ADDRESS      */
*         2 ATCCDPTR PTR(31),       /* PTR TO ISTOCCCD - DOS ONLY    */
*         2 ATCLDNCS PTR(31),       /* PTR TO NCSPL FOR LOAD/DUMP    */
*         2 ATCLDECB BIT(32),       /* ECB FOR LOAD/DUMP SUBTASK     */
*         2 ATCAPCR5 PTR(31),       /* POINTER TO ISTINCR5           */
*         2 ATCRSV69 PTR(31),       /* RESERVED TO SYNCH WITH DOS    */
*         2 ATCNODEL CHAR(8),       /* VSAM DATA SET NAME            */
*         2 ATCNODDS PTR(31),       /* POINTER TO RPL                */
*         2 ATCONFIG CHAR(8),       /* START VTAM CONFIG = PARAMETER */
*         2 ATCRSV99 CHAR(4),       /* RESERVED FOR LATER POINTERS   */
*         2 ATCAP33 PTR(31),        /* PTR TO ISTAPC33               */
*         2 ATCAP35 PTR(31),        /* PTR TO ISTAPC35               */
*         2 ATCAP36 PTR(31),        /* PTR TO ISTAPC36               */
*         2 ATCDVTLK CHAR(LENGTH(ISTLOK)), /* LOCK WORD FOR DVT LOCK */
*         2 ATCCDFIN PTR(31),       /* POINTER TO ISTSDCRR           */
*         2 ATCCDFDN PTR(31),       /* POINTER TO ISTSDCCN           */
*         2 ATCVOCLK CHAR(LENGTH(ISTLOK)), /* VOCLOCK LOCK           */
*         2 ATCRDTLK CHAR(LENGTH(ISTLOK)), /* RDTLOCK LOCK           */
*         2 ATCRSV97 PTR(31),              /* DWORD ALIGNMENT        */
*         2 ATCVPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR VARY
*                                           UNDER PSS CONTROL        */
*         2 ATCPGPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* ERP PAB FOR
*                                      PURGE                         */
*         2 ATCDLRPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* DUMP LOAD &
*                                           RESTART PAB              */
*         2 ATCCCLAD PTR(31),       /* ADDRESS OF VARY ERP (ISTINCCL)*/
*         2 ATCCDLAD PTR(31),       /* ADDRESS OF VARY DUMP,LD RSTRT
*                                      (ISTINCDL)                    */
*         2 ATCOCCOB PTR(31),       /* ADDRESS ISTOCCOB              */
*         2 ATCOCCCB PTR(31),       /* ADDRESS ISTOCCCB              */
*         2 ATCTIPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0735
*                                           FOR ISTOLTP              */
*         2 ATCTCIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0735
*                                           FOR TOLTEP CLIP          */
*         2 ATCVTIPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB   0735
*                                           FOR TOLTEP-VTAM INTERFACE*/
*         2 ATCTCLOM PTR(31),      /* ADDR TOLTEP CLOP PROC          */
*         2 ATCTCLIM PTR(31),      /* ADDR TOLTEP CLIP PROC          */
*         2 ATCVTINM PTR(31),      /* ADDR TOLTEP-VTAM INTF PROC     */
*         2 ATCTACB  PTR(31),      /* TOLTEP ACB                     */
*         2 ATCRSV10 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* RESERVED  */
*         2 ATCPTR00 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* A PAB     */
*         2 ATCCFEAD PTR(31),          /* ADDR OF ISTINCFE           */
*         2 ATCVLCNT CHAR(4) BDY(HWORD), /* VARY DEVICE ONLINE COUNTS*/
*           3 ATCRNCNT PTR(16),        /* 370X COUNT                 */
*           3 ATCLCLCT PTR(16),        /* 3270 COUNT                 */
*         2 ATCS49XI PTR(31),          /* ADDRESS OF ISTPICXI        */
*         2 ATCS49XL PTR(31),          /* ADDRESS OF ISTPICXL        */
*         2 ATCPODVT PTR(31),          /* PTR TO PROGRAM OPERATOR DVT*/
*         2 ATCRNO,                                                0735
*           3 *        CHAR(1),                                    0735
*           3 ATCPOIA  PTR(24),        /* PTR TO PROGRAM OPERATOR    */
*                                      /* INTERFACE AREA             */
*         2 ATCSOPD CHAR(8) BDY(WORD), /* SESSION CONTROL            */
*           3 ATCSEC01 PTR(31),        /* OUTBOUND PROCESSING        */
*           3 ATCSEC10 PTR(31),        /* DVT                        */
*         2 ATCSIPD CHAR(12) BDY(WORD),/* SESSION CONTROL            */
*           3 ATCSEC21 PTR(31),        /* INBOUND PROCESSING         */
*           3 ATCSEC30 PTR(31),        /* FEEDBACK                   */
*           3 ATCSEC40 PTR(31),        /* DVT                        */
*         2 ATCSECST CHAR(4) BDY(WORD),/* SESSION CONTROLSESS TERM   */
*           3 ATCSEC51 PTR(31),        /* RECOVERY DVT               */
*         2 ATCNMCTR FIXED(15),        /* NAME COUNTER               */
*         2 ATCSTAT2 BIT(8),           /* TRACE FLAGS                */
*           3 ATCTRAPI BIT(1),         /* API                        */
*           3 ATCTRESC BIT(1),         /* ESC                        */
*           3 ATCTRPSS BIT(1),         /* PSS                        */
*           3 ATCTRLOK BIT(1),         /* LOCKS                      */
*           3 ATCTRSMS BIT(1),         /* SMS                        */
*           3 *        BIT(3),         /* RESERVED                   */
*         2 *        BIT(8),           /* RESERVED                   */
*         2 ATCSRTAB PTR(31),          /* SEARCH LOGON MODE TABLE    */
*                                      /* RTN ADDRESS (ISTINCSH)     */
*         2 ATCUSSPT PTR(31),          /* DEFAULT USS DEFINITION     */
*                                      /* TABLE ADDRESS (ISTINCDT)   */
*         2 ATCMODTB PTR(31),          /* DEFAULT SYSTEM LOGON MODE  */
*                                      /* TABLE ADDRESS (ISTINCLM)   */
*         2 ATCINCW3 PTR(31),          /* ADDRESS OF ISTINCW3        */
*         2 ATCIOECB PTR(31),          /* ECB USED BY IOS -          */
*                                      /* POINTED TO BY IOBECBPT     */
* 2 ATCVDPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                    0735
*                                    /* SSCP COMMAND PROCESSING PAB  */
* 2 ATCVFPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),                    0735
*                                    /* SSCP FRONT END PAB           */
* 2 ATCVDLOK CHAR(LENGTH(ISTLOK)),   /* SSCP SERIALIZATION LOCK      */
*/* END OF COMMON AREA                                               */
*/* VS1/VS2 COMMON CODE.                                             */
*        2  ATCVTBAM CHAR(4),                                      0735
*           3  *     CHAR(3),          /* RESERVED                    *
*           3  *     CHAR(1),          /* FLAGS                       *
*              4 ATCVTMAB BIT(1) ABNL, /* ABEND IN VTAM JOBSTEP       *
*              4 *        BIT(7),      /* RESERVED                    *
*        2  ATCAOSM BDY(DWORD),                                    0735
*/*                                                                   *
*           3  ATCSRBRT PTR(31),       /* POINTER TO ROUTINE UNDER    *
*                                      /* SRB CONTROL                 *
*           3  ATCGSRBQ PTR(31),       /* READY QUEUE FOR GLOBAL SRB'S*
*              4  ATCGSRBG BIT(8),     /* READY QUEUE GATE BYTE       *
*                 5  ATCGSRBF BIT(1),  /* READY QUEUE GATE BIT        *
*           3  ATCPRPH PTR(31),        /* PTR TO PREALLOCATED RPH     *
*           3  ATCCMTCB PTR(31),       /* PTR TO COMMUNICATIONS TASK  *
*                                      /* TCB                         *
*           3  ATCAP11 PTR(31),        /* PTR TO ISTAPC11             *
*           3  ATCAP12 PTR(31),        /* PTR TO ISTAPC12             *
*           3  ATCAP31 PTR(31),        /* PTR TO ISTAPC31             *
*           3  ATCAP32 PTR(31),        /* PTR TO ISTAPC32             *
*           3  ATCAP34 PTR(31),        /* PTR TO ISTAPC34             *
*           3  ATCAP52 PTR(31),        /* PTR TO ISTAPC52             *
*           3  ATCAP53 PTR(31),        /* PTR TO ISTAPC53             *
*           3  ATCAP54 PTR(31),        /* PTR TO ISTAPC54             *
*           3  ATCAP57 PTR(31),        /* PTR TO ISTAPC57             *
*           3  ATCAP58 PTR(31),        /* PTR TO ISTAPC58             *
*           3  ATCAP61 PTR(31),        /* PTR TO ISTAPC61             *
*           3  ATCAP63 PTR(31),        /* PTR TO ISTAPC63             *
*           3  ATCAP64 PTR(31),        /* PTR TO ISTAPC64             *
*           3  ATCZFSVT PTR(31),       /* TPIOS FIXED SRVICES VCTR TAB*
*           3  ATCZPSVT PTR(31),       /* TPIOS PAGBL SRVCES VCTR TABL*
*           3  ATCICNCB PTR(31),       /* HEAD OF ICNCB QUEUE         *
*           3  ATCZDVT1 PTR(31),       /* TPIOS SLODWN RECOVRY PRCSR  *
*           3  ATCZDVT3 PTR(31),       /* 370X FEEDBACK STAT CNTRL RTR*
*           3  ATCZDVT4 PTR(31),       /* OPERATOR MESSAGE SCHEDULER  *
*           3  ATCZDVT6 PTR(31),       /* DIALOGUE SCHEDULER (INBOUND)*
*           3  ATCAP65 PTR(31),        /* PTR TO ISTAPC65            */
*           3  ATCICAPP CHAR(20) BDY(WORD), /* 3705 APPENDAGE VECTOR  *
*              4  ATCCDRPH PTR(31),    /* ADDR CLOSE DEB RPH       0735
*                                         (DUMMY EOA APP.)           */
*              4  ATCZSIOA PTR(31),    /* ADDR 3705 SIO APPENDAGE    */
*              4  ATCCDTCB PTR(31),    /* VTAM TCB (DUMMY PCI APP.)  */
*              4  ATCZCEA PTR(31),     /* ADDR 3705 CHANNEL END    0735
*                                         APPENDAGE                  */
*              4  ATCZAEA PTR(31),     /* ADDR 3705 CHANNEL END    0735
*                                         APPENDAGE                  */
*           3  ATCLDAPP CHAR(20) BDY(WORD), /* LOCAL 3270 APPENDAGE
*                                         VECTOR                     */
*              4  ATCCDTID PTR(31),    /* TASK ID OF VTAM          0735
*                                         (DUMP EOE)                 */
*              4  ATCSMFRR PTR(31),    /* ADDR OF SMS FRR          0735
*                                         (DUMMY SIOA)               */
*              4  ATCRSV17 PTR(31),    /* RESERVED FOR ALIGNMENT     */
*              4  ATCZLCEA PTR(31),    /* ADDR 3270 CHANNEL END    0735
*                                         APPENDAGE                  */
*              4  ATCZLAEA PTR(31),    /* ADDR 3270 CHANNEL END    0735
*                                         APPENDAGE                  */
*           3  ATCDAPVT CHAR(24) BDY(WORD),  /* DUMMY APPENDAGE    0735
*                                         VECTOR TABLE FOR LOAD/DVMMY*/
*              4  ATCDEOEA PTR(31),    /* ADDRESS OF DUMMY END     0735
*                                         OF EXTENT APPENDAGE        */
*              4  ATCDSIOA PTR(31),    /* ADDRESS OF DUMMY END     0735
*                                         OF SIO APPENDAGE           */
*              4  ATCDPCIA PTR(31),    /* ADDRESS OF DUMMY PCI     0735
*                                         APPENDAGE                  */
*              4  ATCDCEA PTR(31),     /* ADDRESS OF CHANNEL END   0735
*                                         APPENDAGE                  */
*              4  ATCDXCEA PTR(31),    /* ADDRESS OF ABNORMAL      0735
*                                         END APPENDAGE              */
*              4  ATCDAPDG CHAR(2),    /* DUMMY APPENDAGE            */
*              4  ATCRSV56 CHAR(2),    /* RESERVED                   */
*           3  ATCZDVT7 PTR(31),       /* ADDR OF RESET CLEANUP    0735
*                                         (PHASE 1)                   *
*           3  ATCZDVT8 PTR(31),       /* 3270 LOCAL TEST AND CTL  0735
*                                         FEEDBACK ROUTER            */
*           3  ATCZDVT9 PTR(31),       /* ADDRESS OF ISTZDFKA        */
*           3  ATCZDVTA PTR(31),       /* ADDRESS OF ISTZCFIA        */
*           3  ATCZDVTX PTR(31),       /* ADDRESS OF TRUNK LINE    0735
*                                         DEACTIVATE ROUTINE         */
*           3  ATCZLPVT PTR(31),       /* ADDRESS OF ISTZPSVA        */
*           3  ATCZLFVT PTR(31),       /* TPIOS 3270 LOCAL FIXED   0735
*                                         SERVICES VECTOR TABLE      */
*           3  ATCZPAB1 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* PAB FOR
*                                         TEST AND CTL FEEDBACK ROUTER*
*           3  ATCZPAB2 CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* 370X 0735
*                                         STATUS AND FEEDBACK ROUTER
*                                         DYNAMIC PAB                */
*           3  ATCAP51  PTR(31),       /* PTR TO ISTAPC51            */
*           3  ATCZDFJ0 PTR(31),       /* ADDR OF ISTZDFJ0           */
*           3  ATCAP37  PTR(31),       /* PTR TO ISTAPC37            */
*           3  ATCAP38  PTR(31),       /* PTR TO ISTAPC38            */
*           3  ATCDMAPP PTR(31),       /* DUMMY APPENDAGE ROUTINE    */
*                                      /* FOR ABEND                  */
*           3  ATCRPT12 PTR(31),       /* RESERVED                   */
*        3  ATCCRA   CHAR(8) BDY(DWORD), /* AVAILABLE CRA             *
*           4 ATCCRAQ  PTR(31),          /* QUEUE OF AVAILABLE CRAS   *
*           4 ATCCRACN FIXED(31),        /* COUNTS                    *
*             5 ATCCRARC FIXED(16),      /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*             5 ATCCRAAC FIXED(16),      /* COUNT OF CRAS ON AVAIL Q  *
*        3  ATCSRB   CHAR(8) BDY(DWORD), /* AVAILABLE SRBS            *
*             4 ATCSRBQ  PTR(31),        /* QUE OF AVAILABLE SRBS     *
*             4 ATCSRBCN FIXED(31),      /* COUNTS                    *
*               5 ATCSRBRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCSRBAC FIXED(16),    /* COUNT OF SRBS ON AVAIL Q  *
*        3  ATCCRPL  CHAR(8) BDY(DWORD), /* AVAILABLE CRPLS           *
*             4 ATCCRPLQ PTR(31),        /* QUE OF AVAILABLE CRPLS    *
*             4 ATCRPLCN FIXED(31),      /* COUNTS                    *
*               5 ATCRPLRC FIXED(16),    /* ENQUEUE COUNT TO ALLOW    *
*                                        /* MULTIPLE SIMUALTANIOUS    *
*                                        /* ENQUEUES AND DEQUEUES     *
*               5 ATCRPLAC FIXED(16),    /* COUNT OF CRPLS ON AVAIL Q *
*           3  ATCSQAFR BDY(DWORD),    /* DOUBLE WORD FOR CDS      0735
*                                          SQA RELEASE       @VSRIUBL*/
*             4 ATCORTBF PTR(31),      /* ANCHOR FOR TO-BE-        0735
*                                          FREED STG Q       @VSRIUBL*/
*             4 ATCORTBC PTR(31),      /* PTR TO TCB OF TASK       0735
*                                          OWNING STG Q      @VSRIUBL*/
*               5 ATCORSRB PTR(31),    /* PTR TO SMS SRB     @VSRIUBL*/
*                 6 ATCORQG  BIT(1)ABNL, /* SRB GATE FOR SMS @VSRIUBL*/
*           3  ATCOROBT PTR(31),      /* ANCHOR FOR OBTAINED       0735
*                                         STAGE              @VSRIUBL*/
*           3  ATCORFRL PTR(31),      /* ADDR OF ISTORFRL    @VSRIUBL*/
*           3  ATCORFMG PTR(31),      /* ADDR OF ISTORFMG    @VSRIUBL*/
*           3  ATCINFDD PTR(31),      /* ADDR OF ISTINFDD    @VSRIUBL*/
*           3  ATCAIWT  PTR(31),      /* ADDRESS OF BYTE           0735
*                                         FOLLOWING WAIT IN        0735
*                                         ISTAICCK           @VSRIUBL*/
*           3  *        BIT(8),       /* RESERVED            @VSRIUBL*/
*             4 ATCABEN BIT(1)ABNL,   /* VTAM IS ABNORMALLY        0735
*                                         ENDING             @VSRIUBL*/
*             4 ATCOPKL BIT(1)ABNL,   /* OPERATOR IS ENDING        0735
*                                         VTAM               @VSRIUBL*/
*             4 ATCSNUF BIT(1)ABNL,   /* RECURSIVE VTAM ABEND      0735
*                                         DURING RSCE MGR          0735
*                                         OPERATION          @VSRIUBL*/
*             4 *       BIT(5),       /* RESERVED            @VSRIUBL*/
*           3  *        BIT(24),      /* RESERVED            @VSRIUBL*/
*           3  ATCRPT27 PTR(31),       /* RESERVED                   */
*           3  ATCRPT28 PTR(31),       /* RESERVED                   */
*           3  ATCRPT29 PTR(31),       /* RESERVED                   */
*           3  ATCRPT30 PTR(31),       /* RESERVED                   */
*           3  ATCRPT31 PTR(31),       /* RESERVED                   */
*           3  ATCRPT32 PTR(31),       /* RESERVED                   */
*           3  ATCRPT33 PTR(31),       /* RESERVED                   */
*           3  ATCRPT34 PTR(31),       /* RESERVED                   */
*           3  ATCRPT35 PTR(31),       /* RESERVED                   */
*           3  ATCRPT36 PTR(31),       /* RESERVED                   */
*           3  ATCRPT37 PTR(31),       /* RESERVED                   */
*           3  ATCRPT38 PTR(31),       /* RESERVED                   */
*           3  ATCRPT39 PTR(31),       /* RESERVED                   */
*           3  ATCRPT40 PTR(31),       /* RESERVED                   */
*/* END OF VS1/VS2 COMMON CODE.                                      */
*/* START OF VS2 UNIQUE CODE.                                        */
*           3  ATCVTFLG BIT(32),                                   0735
*              4 ATCVTACT BIT(1),      /* VTT ACTIVE                 */
*              4 *        BIT(31),     /* RESERVED                   */
*           3  ATCHLTCB PTR(31),       /* ECB FOR HALTING VTAM       */
*           3  ATCATA10 PTR(31),       /* PTR TO ISTATM10            */
*           3  ATCZLAAB PTR(31),       /* PTR TO ISTZLFAB            */
*           3  ATCCACXA PTR(31),       /* PTR TO ISTCFCXA            */
*           3  ATCSMARA PTR(31),       /* PTR TO ISTORFRA            */
*           3  ATCSMAID PTR(31),       /* PTR TO ISTORFID            */
*           3  ATCTPWQA PTR(31),       /* WAIT Q ANCHOR FOR TPIOS    */
*           3  ATCSMAPR PTR(31),       /* PTR TO ISTORFPR            */
*           3  ATCSMABF PTR(31),       /* PTR TO ISTORFBF            */
*           3  ATCPSTA  PTR(31),       /* ACTIVE PST QUEUE           */
*           3  ATCAPBE  PTR(31),       /* POINTER TO ISTAICBE        */
*           3  ATCTRMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),         0735
*                                      /* PAB FOR VTAM TERM TASK     */
*           3  ATCTPSPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),         0735
*                                      /* PAB FOR TPIOS              */
*           3  ATCAP23  PTR(31),       /* PTR TO ISTAPC23            */
*           3  ATCAPC25 PTR(31),       /* PTR TO ISTAPC25            */
*           3  ATCAP41  PTR(31),       /* PTR TO ISTAPC41            */
*           3  ATCRCFY0 PTR(31),       /* PTR TO ISTRCFY0            */
*           3  ATCAP55  PTR(31),       /* PTR TO ISTAPC55            */
*           3  ATCAP56  PTR(31),       /* PTR TO ISTAPC56            */
*           3  ATCAPC59 PTR(31),       /* PTR TO ISTAPC59            */
*           3  ATCAP62  PTR(31),       /* PTR TO ISTAPC62            */
*           3  ATCAP66  PTR(31),       /* PTR TO ISTAPC66            */
*           3  ATCAP69  PTR(31),       /* PTR TO ISTAPM69            */
*           3  ATCAP82  PTR(31),       /* PTR TO ISTAPC82            */
*           3  ATCAP83  PTR(31),       /* PTR TO ISTAPC83            */
*           3  ATCAP84  PTR(31),       /* PTR TO ISTAPC84            */
*           3  ATCAP85  PTR(31),       /* PTR TO ISTAPC85            */
*           3  ATCAP86  PTR(31),       /* PTR TO ISTAPC86            */
*           3  ATCASCB  PTR(31),       /* PTR TO VTAM ASCB           */
*           3  ATCMPLTA  PTR(31),      /* PTR TO MPST LIST TABLE     */
*           3  ATCZR01  PTR(31),       /* PTR TO ISTZRM01            */
*           3  ATCAICTN PTR(31),       /* PTR TO ISTAICTN            */
*           3  ATCTPCP0 PTR(31),       /* PTR TO ISTZFSAV            */
*           3  ATCTPCP1 PTR(31),       /* PTR TO ISTZ19SV            */
*           3  ATCZFLAG BIT(8),        /* FLAG BYTE                  */
*              4 ATCZF001 BIT(1),      /* MDR RECORDING SUSPENDED    */
*              4 ATCRSV66 BIT(7),      /* RESERVED                   */
*           3  ATCRSV75 BIT(8),        /* RESERVED                   */
*           3  ATCSRBCT FIXED(16),     /* COUNT OF PREALLOCATED SRB'S*/
*           3  ATCCRACT FIXED(16),     /* COUNT OF PREALLOCATED CRA'S*/
*           3  ATCRPLCT FIXED(16),     /* COUNT OF PREALLOCATED CRPL */
*           3  ATCRSV88 PTR(31),       /* RESERVED                   */
*           3  ATCTPMPB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /*TP MSG PAB
*                                                         FOR VS2    */
*           3  ATCTPMMI PTR(31),        /* PTR TO ISTCFMMI - MSG ISSUER
*                                          FOR SRB MODE ROUTINES     */
*           3  ATCVIOPM PTR(31),       /* PTR TO ISTVIOPM            */
*           3  ATCPOPAB CHAR(LENGTH(ISTDYPAB)) BDY(DWORD),         0735
*                   /* POPAB FOR REPLY PROCESSING, POI TERMINATION,  */
*                   /* AND VTAM MESSAGE PROCESSOR                    */
*        2  ATCAOS CHAR(0) BDY(WORD);  /* VS2 ONLY FIELDS            */
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                                  0736
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE   0736
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                       0737
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR     0739
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         007 05/19/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                         0744
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                      0744
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                       0744
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(16),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                              0745
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                              0746
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST,    0748
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                                  0749
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE      0749
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                                0750
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                              0756
*DCL  1  ISTZSAVE BDY(WORD) BASED,                                 0756
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                                0757
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE     0757
*BE ABLE TO TAKE IT.                                               0757
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER         0759
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID              0763
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID              0764
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID              0765
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID            0772
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID            0773
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID            0774
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID            0775
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO       0776
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                         0782
*/*  DELTA                                             006 02/10/75  */
*DCL                                                               0782
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                         0782
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),              0782
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN   0786
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                                0787
*                                                                  0787
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                          0816
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE 0816
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS 0816
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS       0816
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                   0817
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                         0817
*        3  APC56E BIT(1),                                         0817
*        3  APC57E BIT(1),                                         0817
*        3  APC58E BIT(1),                                         0817
*        3  APC31E BIT(1),                                         0817
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                         0817
*        3  APC54R BIT(1),                                         0817
*        3  APC56R BIT(1),                                         0817
*        3  APC57R BIT(1),                                         0817
*        3  APC58R BIT(1),                                         0817
*        3  APC31R BIT(1),                                         0817
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                         0817
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                      0817
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND          0818
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH     0818
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
* /*  CONNECTION SERVICES COMPONENT RECOVERY RECORD                  */
* /* COMPLETED DCR SOLUTIONS                                         */
* /* 1H0540 APRIL 28, 1973 MB                                        */
*/* ZTR4417 JUNE 20, 73 DNM */                                     0852
* DCL 1 ISTCNSTA BDY(WORD) BASED,       /* CONNECTION SERVICES     0852
*                                          COMPONENT RECOVERY RECORD */
*     2  CNSTPFX CHAR(LENGTH(ISTPFCRR)), /* STANDARD PREFIX        0852
*                                          FOR CRR                   */
*     2  CNSTFLDA CHAR(3),              /* TRACE FIELD A - HISTORY   */
*        3  CNSMRINA BIT(1),            /* MASTER ENTERED            */
*        3  CNSAUTHA BIT(1),            /* ABOUT TO CALL AUTHORI-  0852
*                                          SATION EXIT       ZTR4417 */
*        3  CNSAQINA BIT(1),            /* ACQUIRE ENTERED           */
*        3  CNSXREQA BIT(1),            /* ACQUIRE SATISFIED         */
*        3  CNSQREQA BIT(1),            /* ACQUIRE QUEUED            */
*        3  CNSRLINA BIT(1),            /* RELEASE ENTERED           */
*        3  CNSDORLA BIT(1),            /* DOREL REALLOCATION      0852
*                                          ENTERED                   */
*        3  CNSTRRLA BIT(1),            /* RELEASE OF ACTIVE       0852
*                                          CONNECTION                */
*        3  CNSRQRLA BIT(1),            /* RELEASE QUEUED REQUEST    */
*        3  CNSPSINA BIT(1),            /* PASS ENTERED              */
*        3  CNSACINA BIT(1),            /* ACCEPT ENTERED            */
*        3  CNSLGINA BIT(1),            /* LOGON ENTERED             */
*        3  CNSGBINA BIT(1),            /* PREEMPT ENTERED           */
*        3  CNSCLINA BIT(1),            /* CANCEL ENTERED            */
*        3  CNSCLAQA BIT(1),            /* CANCEL ACQUIRES           */
*        3  CNSTCONA BIT(1),            /* TCONNECT                  */
*        3  CNSACONA BIT(1),            /* ACONNECT                  */
*        3  CNSQUEUA BIT(1),            /* QUEUE                     */
*        3  CNSSEARA BIT(1),            /* SEARCH Q                  */
*        3  CNSGETSA BIT(1),            /* CONNECTION SERVICES     0852
*                                          GETSTORE                  */
*        3  CNSFREEA BIT(1),            /* CONNECTION SERVICES     0852
*                                          FREESTORE                 */
*        3  CNSACCTA BIT(1),            /* ABOUT TO CALL           0852
*                                          ACCOUNTING EXIT           */
*        3  CNSLOG0A BIT(1),            /* LOGON 0                   */
*        3  CNSRSV01 BIT(1),            /* RESERVED                  */
*     2  CNSTFLDB CHAR(3),              /* TRACE FIELD B -         0852
*                                          CURRENT ACTIVITY          */
*        3  CNSMRINB BIT(1),                                       0852
*        3  CNSAUTHB BIT(1),                                       0852
*        3  CNSAQINB BIT(1),                                       0852
*        3  CNSXREQB BIT(1),                                       0852
*        3  CNSQREQB BIT(1),                                       0852
*        3  CNSRLINB BIT(1),                                       0852
*        3  CNSDORLB BIT(1),                                       0852
*        3  CNSTRRLB BIT(1),                                       0852
*        3  CNSRQRLB BIT(1),                                       0852
*        3  CNSPSINB BIT(1),                                       0852
*        3  CNSACINB BIT(1),                                       0852
*        3  CNSLGINB BIT(1),                                       0852
*        3  CNSGBINB BIT(1),                                       0852
*        3  CNSCLINB BIT(1),                                       0852
*        3  CNSCLAQB BIT(1),                                       0852
*        3  CNSTCONB BIT(1),                                       0852
*        3  CNSACONB BIT(1),                                       0852
*        3  CNSQUEUB BIT(1),                                       0852
*        3  CNSSEARB BIT(1),                                       0852
*        3  CNSGETSB BIT(1),                                       0852
*        3  CNSFREEB BIT(1),                                       0852
*        3  CNSACCTB BIT(1),                                       0852
*        3  CNSLOG0B BIT(1),                                       0852
*        3  CNSRSV05 BIT(1);                                       0852
*/*    CRR FOR VARY                                                  */
*/*  REVISIONS                                         009 03/24/75  */
*/*                                                                  */
* DCL 1 ISTVYCRR BDY(WORD) BASED,       /* CRR FOR SSCP              */
*     2  VYCCNS   CHAR(LENGTH(ISTCNSTA)), /* RESERVE SPACE FOR     0853
*                                          CONN. SVCS. AUDIT         */
*     2  VYCAUDIT,                      /* AUDIT TRAIL FOR SSCP      */
*        3  VYCNTRD CHAR(12),           /* LIST OF MODULES IN SSCP   */
*                                       /* 1 = ENTERED               */
*           4  NINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  NINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  NINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  NINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  NINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  NINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  NINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  NINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  NINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  NINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  NINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  NINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  NINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  NINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  NINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  NINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  NINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  NINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  NINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  NINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  NINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  NINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  NINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  NINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  NINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  NINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  NINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  NINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  NINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  NINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  NINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  NINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  NINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  NINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  NINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  NINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  NINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  NINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  NINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  NINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  NINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  NINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  NINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  NINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  NINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  NINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  NINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  NINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  NINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  NINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  NINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  NINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  NINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  NINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  NINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  NINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  NINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  NINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  NINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  NINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  NINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  NINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  NINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  NINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  NINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  NINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  NINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  NINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  NINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  NINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  NINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  NINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  NINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  NINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  NINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  NINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  NINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  NINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  NINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  NINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  NINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  NINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  NINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  NINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  NINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  NINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  NINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  NINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  NINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  NINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  NINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV01 BIT(4),         /* RESERVED                  */
*        3  VYCCRT CHAR(12),            /* LIST OF SSCP MODULES      */
*                                       /* 2 =  RUNNING              */
*           4  CINCCL BIT(1),           /* MODULE = ISTINCCL         */
*           4  CINCIO BIT(1),           /* MODULE = ISTINCIO         */
*           4  CINCDL BIT(1),           /* MODULE = ISTINCDL         */
*           4  CINCMY BIT(1),           /* MODULE = ISTINCMY         */
*           4  CINCMD BIT(1),           /* MODULE = ISTINCMD         */
*           4  CINCVI BIT(1),           /* MODULE = ISTINCVI         */
*           4  CINCVA BIT(1),           /* MODULE = ISTINCVA         */
*           4  CINCLF BIT(1),           /* MODULE = ISTINCLF         */
*           4  CINCR1 BIT(1),           /* MODULE = ISTINCR1         */
*           4  CINCSM BIT(1),           /* MODULE = ISTINCSM         */
*           4  CINCFS BIT(1),           /* MODULE = ISTINCFS         */
*           4  CINCVX BIT(1),           /* MODULE = ISTINCVX         */
*           4  CINCVP BIT(1),           /* MODULE = ISTINCVP         */
*           4  CINCVS BIT(1),           /* MODULE = ISTINCVS         */
*           4  CINCVN BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCMS BIT(1),           /* MODULE = ISTINCMS         */
*           4  CINCR2 BIT(1),           /* MODULE = ISTINCR2         */
*           4  CINCIP BIT(1),           /* MODULE = ISTINCIP         */
*           4  CINCD1 BIT(1),           /* MODULE = ISTINCD1         */
*           4  CINCD2 BIT(1),           /* MODULE = ISTINCD2         */
*           4  CINCD3 BIT(1),           /* MODULE = ISTINCD3         */
*           4  CINCD4 BIT(1),           /* MODULE = ISTINCD4         */
*           4  CINCD5 BIT(1),           /* MODULE = ISTINCD5         */
*           4  CINCD6 BIT(1),           /* MODULE = ISTINCD6         */
*           4  CINCD7 BIT(1),           /* MODULE = ISTINCD7         */
*           4  CINCD8 BIT(1),           /* MODULE = ISTINCD8         */
*           4  CINCD9 BIT(1),           /* MODULE = ISTINCD9         */
*           4  CINCE0 BIT(1),           /* MODULE = ISTINCE0         */
*           4  CINCE2 BIT(1),           /* MODULE = ISTINCE2         */
*           4  CINCE3 BIT(1),           /* MODULE = ISTINCE3         */
*           4  CINCE4 BIT(1),           /* MODULE = ISTINCE4         */
*           4  CINCFM BIT(1),           /* MODULE = ISTINCFM         */
*           4  CINCF1 BIT(1),           /* MODULE = ISTINCF1         */
*           4  CINCF3 BIT(1),           /* MODULE = ISTINCF3         */
*           4  CINCF4 BIT(1),           /* MODULE = ISTINCF4         */
*           4  CINCL0 BIT(1),           /* MODULE = ISTINCL0         */
*           4  CINCL1 BIT(1),           /* MODULE = ISTINCL1         */
*           4  CINCL2 BIT(1),           /* MODULE = ISTINCL2         */
*           4  CINCL3 BIT(1),           /* MODULE = ISTINCL3         */
*           4  CINCL4 BIT(1),           /* MODULE = ISTINCL4         */
*           4  CINCL5 BIT(1),           /* MODULE = ISTINCL5         */
*           4  CINCL6 BIT(1),           /* MODULE = ISTINCL6         */
*           4  CINCL7 BIT(1),           /* MODULE = ISTINCL7         */
*           4  CINCL8 BIT(1),           /* MODULE = ISTINCL8         */
*           4  CINCS1 BIT(1),           /* MODULE = ISTINCS1         */
*           4  CINCUM BIT(1),           /* MODULE = ISTINCUM         */
*           4  CINCU0 BIT(1),           /* MODULE = ISTINCU0          *
*           4  CINCU1 BIT(1),           /* MODULE = ISTINCU1         */
*           4  CINCU2 BIT(1),           /* MODULE = ISTINCU2         */
*           4  CINCU3 BIT(1),           /* MODULE = ISTINCU3         */
*           4  CINCU4 BIT(1),           /* MODULE = ISTINCU4         */
*           4  CINCU5 BIT(1),           /* MODULE = ISTINCU5         */
*           4  CINCU6 BIT(1),           /* MODULE = ISTINCU6         */
*           4  CINCU7 BIT(1),           /* MODULE = ISTINCU7         */
*           4  CINCU8 BIT(1),           /* MODULE = ISTINCU8         */
*           4  CINCV2 BIT(1),           /* MODULE = ISTINCV2         */
*           4  CINCV3 BIT(1),           /* MODULE = ISTINCV3         */
*           4  CINCV4 BIT(1),           /* MODULE = ISTINCV4         */
*           4  CINCV5 BIT(1),           /* MODULE = ISTINCV5         */
*           4  CINCV6 BIT(1),           /* MODULE = ISTINCV6         */
*           4  CINCV7 BIT(1),           /* MODULE = ISTINCV7         */
*           4  CINCV8 BIT(1),           /* MODULE = ISTINCV8         */
*           4  CINCV9 BIT(1),           /* MODULE = ISTINCV9         */
*           4  CINCW0 BIT(1),           /* MODULE = ISTINCW0         */
*           4  CINCW2 BIT(1),           /* MODULE = ISTINCW2         */
*           4  CINCW4 BIT(1),           /* MODULE = ISTINCW4         */
*           4  CINCW5 BIT(1),           /* MODULE = ISTINCW5         */
*           4  CINCW6 BIT(1),           /* MODULE = ISTINCW6         */
*           4  CINCW7 BIT(1),           /* MODULE = ISTINCW7         */
*           4  CINCW8 BIT(1),           /* MODULE = ISTINCW8         */
*           4  CINCW9 BIT(1),           /* MODULE = ISTINCW9         */
*           4  CINCX0 BIT(1),           /* MODULE = ISTINCX0         */
*           4  CINCX1 BIT(1),           /* MODULE = ISTINCX1         */
*           4  CINCX2 BIT(1),           /* MODULE = ISTINCX2         */
*           4  CINCX3 BIT(1),           /* MODULE = ISTINCX3         */
*           4  CINCX6 BIT(1),           /* MODULE = ISTINCX6         */
*           4  CINCX7 BIT(1),           /* MODULE = ISTINCX7         */
*           4  CINCX8 BIT(1),           /* MODULE = ISTINCX8         */
*           4  CINCX9 BIT(1),           /* MODULE = ISTINCX9         */
*           4  CINCUA BIT(1),           /* MODULE = ISTINCUA         */
*           4  CINCUB BIT(1),           /* MODULE = ISTINCUB         */
*           4  CINCUQ BIT(1),           /* MODULE = ISTINCUQ         */
*           4  CINCE1 BIT(1),           /* MODULE = ISTINCE1         */
*           4  CINCE5 BIT(1),           /* MODULE = ISTINCE5         */
*           4  CINCE6 BIT(1),           /* MODULE = ISTINCE6         */
*           4  CINCE7 BIT(1),           /* MODULE = ISTINCE7         */
*           4  CINCE8 BIT(1),           /* MODULE = ISTINCE8         */
*           4  CINCR3 BIT(1),           /* MODULE = ISTINCR3         */
*           4  CINCR5 BIT(1),           /* MODULE = ISTINCR5         */
*           4  CINCVO BIT(1),           /* MODULE = ISTINCVO         */
*           4  CINCE9 BIT(1),           /* MODULE = ISTINCE9         */
*           4  CINCFE BIT(1),           /* MODULE = ISTINCFE         */
*           4  VYCRSV03 BIT(4),         /* RESERVED                  */
*     2  VYCRRSAV CHAR(72),             /* SAVE AREA USED BY ISTINCIP*/
*                                       /* TO CALL ISTINCW3          */
*     2  VYCRRCW3 CHAR(8),              /* PARAM LIST USED BY        */
*                                       /* ISTINCIP TO CALL ISTINCW3 */
*     2  VYCRSV04 CHAR(2),              /* RESERVED                  */
*     2  VYCRSV02 PTR(31);              /* RESERVED                  */
*DCL TIDINCDL BIT(8) CONSTANT('00'X);   /* THREAD ID FOR ISTINCDL    */
*DCL TIDINCMY BIT(8) CONSTANT('01'X);   /* THREAD ID FOR ISTINCMY    */
*DCL TIDINCCL BIT(8) CONSTANT('02'X);   /* THREAD ID FOR ISTINCCL    */
*DCL TIDINCFE BIT(8) CONSTANT('04'X);   /* THREAD ID FOR ISTINCFE    */
*                                                                  0858
*  DECLARE                                                         0858
*    EMCR0 PTR REG(0),                                             0858
*    EMCR1 PTR REG(1),                                             0858
*    EMCR2 PTR REG(2),                                             0858
*    EMCR3 PTR REG(3),                                             0858
*    EMCR4 PTR REG(4),                                             0858
*    EMCR5 PTR REG(5),                                             0858
*    EMCR6 PTR REG(6),                                             0858
*    EMCR7 PTR REG(7),                                             0858
*    EMCR8 PTR REG(8),                                             0858
*    EMCR9 PTR REG(9),                                             0858
*    EMCR10 PTR REG(10),                                           0858
*    EMCR11 PTR REG(11),                                           0858
*    EMCR12 PTR REG(12),                                           0858
*    EMCR13 PTR REG(13),                                           0858
*    EMCR14 PTR REG(14),                                           0858
*    EMCR15 PTR REG(15);                                           0858
*                                                                  0858
*  DECLARE                                                         0859
*    ISTSDCCA ENTRY BASED(ATCCDADD) VALRG(*), /*CIDCTL ADD ROUTINE*/
*    ISTSDCCD ENTRY BASED(ATCCDDEL) VALRG(*), /*CIDCTL DELETE ROUTINE*/
*    ISTSDCCF ENTRY BASED(ATCCDFND) VALRG(*), /*CIDCTL FIND ROUTINE*/
*    ISTSDCCN ENTRY BASED(ATCCDFDN) VALRG(*), /*CIDCTL FIND NCB ROUTINE
*/   ISTSDCCR ENTRY BASED(ATCCDFIN) VALRG(*); /*CIDCTL FINISH ROUTINE*/
*    DCL CMZCIDM FIXED(15) DEFINED(ATCCIDM); /*CIDMASK ALIAS*/     0860
*  DCL ISTINCR5 ENTRY NONLOCAL EXT;                                0861
*  GEN (PRINT ON);                                                 0862
         PRINT ON
*/* END OF TPEPILOG */                                             0863
*END ISTINCV2                                                      0863
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*;                                                                 0863
@EL00001 DS    0H                                                  0863
@EF00001 DS    0H                                                  0863
@ER00001 L     @14,12(,@13)                                        0863
         LM    @00,@12,20(@13)                                     0863
         BR    @14                                                 0863
@DATA    DS    0H
@CH00784 DC    H'5'
@CH00786 DC    H'6'
@DATD    DSECT
         DS    0F
ISTINCV2 CSECT
         DS    0F
@CF00086 DC    F'4'
@CF00092 DC    F'8'
@CF00032 DC    F'12'
@CF01023 DC    F'72'
@CF00793 DC    F'-8'
@DATD    DSECT
         DS    0D
CVTPTR   DS    A
LCPBPTR  DS    A
CV2WKA   DS    CL67
         ORG   CV2WKA
DATAR    DS    CL4
         ORG   DATAR
CV2SWTCH DS    BL1
         ORG   CV2SWTCH
VANSCMD  DS    BL1
ENABANS  EQU   CV2SWTCH+0
@NM00005 EQU   CV2SWTCH+0
         ORG   DATAR+1
@NM00006 DS    CL3
         ORG   CV2WKA+4
RETCODE  DS    FL4
SAV14A   DS    AL4
SAV14B   DS    AL4
CV2MSGID DS    AL4
CV2MSGTX DS    AL4
CV2MSGPM DS    CL16
CV2VARTX DS    CL14
CV2RUBUF DS    CL6
CV2INBUF DS    CL7
         ORG   CV2WKA+67
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTINCV2 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00915 DC    V(ISTINCIO)
@CV00927 DC    V(ISTINCR5)
         DS    0D
@CC00804 DC    C'600I'
@CC00806 DC    C'670I'
@CC00808 DC    C'671I'
@CC00810 DC    C'672I'
@CC00812 DC    C'691I'
@CB01178 DC    X'0008'
@CB01179 DC    X'0040'
@CB01342 DC    X'301D'
@CB01343 DC    X'301E'
INSTATE  DC    X'0815'
CV2ANS   DC    CL4'ANS '
CV2ANSWR DC    CL6'ANSWER'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR01P   EQU   @01
GPR15P   EQU   @15
R1       EQU   @01
LINKRDTE EQU   @09
R0       EQU   @00
R2       EQU   @02
WRKREG3  EQU   @03
NCSPLPTR EQU   @10
CV2WAPTR EQU   @11
BASEREG  EQU   @12
REGSAPTR EQU   @13
R14      EQU   @14
R15      EQU   @15
EMCR2    EQU   @02
EMCR3    EQU   @03
REG1025  EQU   @01
EMCR13   EQU   @13
REG15025 EQU   @15
RPHPTR   EQU   @01
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15F   EQU   @15
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ISTPOHD  EQU   0
POHSTAT  EQU   ISTPOHD+1
ISTPFX   EQU   0
PFXID    EQU   ISTPFX
ISTNCSPL EQU   0
@NM00009 EQU   ISTNCSPL
NCSPFX   EQU   @NM00009
NCSPLVCD EQU   ISTNCSPL+17
NCSPLVBF EQU   ISTNCSPL+18
NCSVBF16 EQU   NCSPLVBF+1
NCSPLVFL EQU   ISTNCSPL+20
NCSVDEL  EQU   NCSPLVFL
NCSPLVF1 EQU   ISTNCSPL+21
NCSIORC  EQU   ISTNCSPL+23
NCSCRCMD EQU   ISTNCSPL+50
NCSPLRPT EQU   ISTNCSPL+52
NCSPLCMD EQU   ISTNCSPL+60
NCSCMDA  EQU   NCSPLCMD
NCSCRFLG EQU   ISTNCSPL+67
NCSPLRAD EQU   ISTNCSPL+144
NCSIOCID EQU   ISTNCSPL+148
NCSPLCID EQU   NCSIOCID
NCSPLSAF EQU   NCSPLCID
NCSPLDAF EQU   NCSPLCID+2
NCSPLWKA EQU   ISTNCSPL+152
NCSPLCVT EQU   ISTNCSPL+156
NCSPLRPH EQU   ISTNCSPL+160
NCSPLFSB EQU   ISTNCSPL+168
NCSPLFL1 EQU   ISTNCSPL+176
NCSPLFL2 EQU   ISTNCSPL+177
NCSPLRSF EQU   NCSPLFL2
NCSPLFL3 EQU   ISTNCSPL+178
NCSPLANS EQU   NCSPLFL3
NCSPLFL4 EQU   ISTNCSPL+179
NCSPLFL5 EQU   ISTNCSPL+181
NCSPLOLN EQU   ISTNCSPL+182
NCSPLRUO EQU   ISTNCSPL+208
NCSPLRUI EQU   ISTNCSPL+212
NCSPLAPP EQU   ISTNCSPL+216
NCSSENSE EQU   ISTNCSPL+244
NCSCRDTE EQU   ISTNCSPL+264
NCSCRMSK EQU   ISTNCSPL+268
NCSCHKPT EQU   NCSCRMSK
NCSANSMD EQU   NCSCHKPT+1
NCSCRMOD EQU   NCSCRMSK+2
NCSPLSID EQU   ISTNCSPL+271
NCSPLSTA EQU   NCSPLSID
NCSPLPHD EQU   NCSPLSID+1
NCSAPP   EQU   0
NCSAPBUE EQU   NCSAPP+88
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00015 EQU   LOKCHNG+2
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTRPRE  EQU   0
RPRNAME  EQU   ISTRPRE
RPRCOMID EQU   ISTRPRE+8
RPRDAF   EQU   RPRCOMID+2
RPRENTRY EQU   ISTRPRE+20
RPRFLAGA EQU   ISTRPRE+21
RPRFLAGB EQU   ISTRPRE+22
RPRONLIN EQU   RPRFLAGB
RPRCAUSE EQU   ISTRPRE+23
RPRCRCPT EQU   RPRCAUSE
RPRNSNEA EQU   ISTRPRE+36
RPRFLAGD EQU   ISTRPRE+61
RPRFLAGC EQU   ISTRPRE+62
ISTRCPRE EQU   0
RCPPMODE EQU   ISTRCPRE+91
RCPLGNIN EQU   ISTRCPRE+92
ISTRDT   EQU   0
RDTPLEN  EQU   ISTRDT+72
RDTPRIOR EQU   RDTPLEN
RDTFLAGB EQU   ISTRDT+91
RDTVYRPH EQU   ISTRDT+108
RDTSTCNT EQU   ISTRDT+112
ISTRAP   EQU   0
RAPFLG   EQU   ISTRAP+108
RAPFLGB  EQU   ISTRAP+109
RAPFLGC  EQU   ISTRAP+110
ISTRLC   EQU   0
RLCADR   EQU   ISTRLC+72
RLCFLAG  EQU   RLCADR
ISTRRN   EQU   0
RRNADR   EQU   ISTRRN+136
RRNFLAG  EQU   RRNADR
RRNUCBAD EQU   RRNADR+1
RRNRDF   EQU   ISTRRN+172
RRNRDFA  EQU   RRNRDF
RRNRDFB  EQU   RRNRDF+1
RRNCMF   EQU   ISTRRN+176
RRNCMFA  EQU   RRNCMF
RRNCMFB  EQU   RRNCMF+1
RRNCMFC  EQU   RRNCMF+2
RRNCMFD  EQU   RRNCMF+3
RRNNMDPD EQU   ISTRRN+192
RRNHPRE  EQU   ISTRRN+216
ISTRGP   EQU   0
RGPFLG   EQU   ISTRGP+72
ISTRLN   EQU   0
RLNADR   EQU   ISTRLN+72
RLNFLAG  EQU   RLNADR
RLNEAM   EQU   RLNFLAG
RLNUCBAD EQU   RLNADR+1
RLNSTAT1 EQU   ISTRLN+86
RLNSTAT2 EQU   ISTRLN+87
RLNRDF   EQU   ISTRLN+88
RLNRDFA  EQU   RLNRDF
RLNRACNT EQU   RLNRDFA
RLNRACAT EQU   RLNRACNT
RLNRDFB  EQU   RLNRDF+1
RLNANSWR EQU   RLNRDFB
RLNRATRN EQU   RLNRDFB
RLNCRFLG EQU   ISTRLN+102
RLNLSCMD EQU   RLNCRFLG
ISTRPT   EQU   0
RPTLNCID EQU   ISTRPT+116
RPTDITT  EQU   ISTRPT+128
RPTFLAG1 EQU   ISTRPT+140
ISTRCL   EQU   0
RCLADR   EQU   ISTRCL+72
RCLFLAG  EQU   RCLADR
ISTRTR   EQU   0
RTRADR   EQU   ISTRTR+124
RTRFLAG  EQU   RTRADR
RTRRDFA  EQU   ISTRTR+136
RTRRAALL EQU   RTRRDFA
RTRRDFB  EQU   ISTRTR+137
RTRRDFC  EQU   ISTRTR+138
RTRRDFD  EQU   ISTRTR+139
RTRRDFE  EQU   ISTRTR+140
RTRRDFF  EQU   ISTRTR+141
RTRCRFLG EQU   ISTRTR+143
RTRLSCMD EQU   RTRCRFLG
RTRBSCID EQU   ISTRTR+188
ISTRIN   EQU   0
RINDFD   EQU   ISTRIN+124
RINREMPO EQU   RINDFD
RINNODEF EQU   RINDFD
RINLDISC EQU   RINDFD
RINNODID EQU   ISTRIN+125
RINRLDAF EQU   ISTRIN+126
RINREMOT EQU   ISTRIN+128
RINVPAB  EQU   ISTRIN+132
RINRPHCN EQU   ISTRIN+136
RINNCSPL EQU   ISTRIN+140
RINCNCNT EQU   ISTRIN+144
ISTRDS   EQU   0
ISTDOT   EQU   0
ISTRCC   EQU   0
RCCFLAG  EQU   ISTRCC+73
RCCFLAGB EQU   ISTRCC+74
RCCSTAID EQU   ISTRCC+78
RCCID48  EQU   RCCSTAID+2
RCCCRFLG EQU   ISTRCC+108
ISTRLU   EQU   0
RLUFLAG  EQU   ISTRLU+125
RLUCRFLG EQU   ISTRLU+126
RLUPACE  EQU   ISTRLU+132
RLUNCPPC EQU   ISTRLU+134
RLUUSSTB EQU   ISTRLU+140
RLUMODET EQU   ISTRLU+152
ISTRPX   EQU   0
ISTRLX   EQU   0
RLXFLAGA EQU   ISTRLX+76
ISTRSW   EQU   0
ISTRDA   EQU   0
RDAADR   EQU   ISTRDA+72
RDAFLAG  EQU   RDAADR
RDAUCBAD EQU   RDAADR+1
ISTRLS   EQU   0
ISTDNT   EQU   0
ISTGNT   EQU   0
ISTPAT   EQU   0
PATFLAGA EQU   ISTPAT+7
ISTRH    EQU   0
RHFLAGS  EQU   ISTRH
RH1      EQU   RHFLAGS
RH2      EQU   RHFLAGS+1
RHRETRY  EQU   RH2
RHRSVD1  EQU   RH2
RH3      EQU   RHFLAGS+2
ISTRU    EQU   0
RUDATA   EQU   ISTRU
ISTRUB   EQU   0
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCIDM  EQU   ATCCOM+266
ATCCDADD EQU   ISTATCVT+276
ATCCDDEL EQU   ISTATCVT+280
ATCCDFND EQU   ISTATCVT+284
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCMSGP  EQU   ISTATCVT+344
ATCHPGM  EQU   ISTATCVT+384
ATCCDFIN EQU   ISTATCVT+460
ATCCDFDN EQU   ISTATCVT+464
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCVTBAM EQU   ISTATCVT+908
@NM00038 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00040 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
CV2REGSV EQU   0
CV2SVBKP EQU   CV2REGSV+4
CV2SVFWP EQU   CV2REGSV+8
WKA      EQU   0
NXTAVAIL EQU   WKA
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTCNSTA EQU   0
CNSTFLDA EQU   ISTCNSTA+16
CNSTFLDB EQU   ISTCNSTA+19
ISTVYCRR EQU   0
VYCAUDIT EQU   ISTVYCRR+22
VYCNTRD  EQU   VYCAUDIT
NINCV2   EQU   VYCNTRD+6
VYCCRT   EQU   VYCAUDIT+12
CINCV2   EQU   VYCCRT+6
ISTSDCCF EQU   0
@NM00007 EQU   0
CMZID025 EQU   @NM00007
@NM00008 EQU   @NM00007+4
CMZRL025 EQU   @NM00008
CMZRA025 EQU   @NM00008+1
CMZEA025 EQU   @NM00007+8
CMZVP025 EQU   @NM00007+12
CMZSA025 EQU   0
CMTA025  EQU   0
NCSUSSRU EQU   0
NSRUNA5  EQU   0
ISTSDCCA EQU   0
ISTSDCCD EQU   0
ISTSDCCN EQU   0
ISTSDCCR EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
MSGA     EQU   CV2VARTX
CMD1     EQU   MSGA
NAM1     EQU   MSGA+4
MSGB     EQU   CV2VARTX
NAM2     EQU   MSGB
MSGC     EQU   CV2VARTX
CMD3     EQU   MSGC
NAM3     EQU   MSGC+6
ISTSENRU EQU   RUDATA
SRUSENSE EQU   ISTSENRU
SRUSENS1 EQU   SRUSENSE
SRUSENS2 EQU   SRUSENSE+2
ISTSRU   EQU   ISTRUB
SRUDATA  EQU   ISTSRU+1
SRUTYPE  EQU   SRUDATA
SRULDID  EQU   SRUDATA+1
SRUSPSN  EQU   SRULDID
ISTNSRU  EQU   ISTRUB
NSRUNETS EQU   ISTNSRU
NSRUID   EQU   NSRUNETS
NSRUSUB  EQU   NSRUNETS+1
NSRURCD  EQU   NSRUNETS+2
NSRUDATA EQU   ISTNSRU+3
NSRUHOOK EQU   NSRUDATA
NSSSVRU  EQU   NSRUDATA
NSSSVNOD EQU   NSSSVRU+3
NSSSVT3  EQU   NSSSVNOD
NSSSVT3C EQU   NSSSVT3+2
NSSSVT3G EQU   NSSSVT3+5
NSSSVT4  EQU   NSSSVNOD
NSSSVT5  EQU   NSSSVNOD
NSRUDAT1 EQU   NSRUDATA
NSRUDAF  EQU   NSRUDAT1
NSRUDAT2 EQU   NSRUDAT1+2
ISTTRRU  EQU   NSRUDAT2
TRRTYPE  EQU   ISTTRRU
ISTCTDRU EQU   NSRUDAT2
ISTINORU EQU   NSRUDAT2
SRUDAT1  EQU   SRUDATA
SRUDAT1L EQU   SRUDAT1+1
SRUDAT2  EQU   SRUDATA
ISTMRU   EQU   ISTRUB
SRUDATA3 EQU   SRUDATA
SRUDATA4 EQU   SRUDATA
NSRUDAT3 EQU   NSRUDAT2
NSRUDAT4 EQU   NSRUDAT2
NSRUDAT5 EQU   NSRUDAT2
NSRUDAT6 EQU   NSRUDAT2
NSRUDAT7 EQU   NSRUDAT2
NSRUDIL  EQU   NSRUDAT2
NSRUDILB EQU   NSRUDIL+1
NSRUNA   EQU   NSRUDAT2
NSRUNA2  EQU   NSRUNA+1
NSRUCLSP EQU   NSRUDAT2
NSRUOH1  EQU   NSRUDAT2
NSRUDAT8 EQU   NSRUDATA
ISTUNBRU EQU   SRUTYPE
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
CMZCIDM  EQU   ATCCIDM
RTRDNCBA EQU   ISTRTR+40
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
UNBTYPE  EQU   ISTUNBRU
NSRUDA8T EQU   NSRUDAT8
NSRUOHID EQU   NSRUOH1
NSRULSV  EQU   NSRUCLSP
NSRUNA4  EQU   NSRUNA+2
NSRUNA3  EQU   NSRUNA2
NSRUNA1  EQU   NSRUNA
NSRUDILF EQU   NSRUDIL+4
NSRUDILE EQU   NSRUDIL+3
NSRUDILD EQU   NSRUDIL+2
NSRUDILC EQU   NSRUDILB
@NM00028 EQU   NSRUDILB
NSRUDILA EQU   NSRUDIL
NSRUDA7T EQU   NSRUDAT7
NSRUDA6L EQU   NSRUDAT6+4
NSRUDA6S EQU   NSRUDAT6
NSRUDA5E EQU   NSRUDAT5
NSRUDA4T EQU   NSRUDAT4
NSRUDA3S EQU   NSRUDAT3
SRUDAT4D EQU   SRUDATA4
SRUDAT3I EQU   SRUDATA3
MRUDATA  EQU   ISTMRU+9
MRURESP  EQU   ISTMRU+7
MRUMODIF EQU   ISTMRU+6
MRUCMND  EQU   ISTMRU+5
MRUDAF   EQU   ISTMRU+3
MRUREQ   EQU   ISTMRU+2
MRUPREF  EQU   ISTMRU
SRUDAT2N EQU   SRUDAT2+1
SRUDAT2T EQU   SRUDAT2
SRUDAT1I EQU   SRUDAT1+2
SRUTSPRO EQU   SRUDAT1L
SRUFMPRO EQU   SRUDAT1L
SRUDAT1T EQU   SRUDAT1
INORUET  EQU   ISTINORU
CTDRUSTA EQU   ISTCTDRU
TRRDATA  EQU   ISTTRRU+4
TRRSTAT  EQU   ISTTRRU+3
TRRPEP   EQU   ISTTRRU+2
TRRTIME  EQU   ISTTRRU+1
@NM00027 EQU   TRRTYPE
TRRFMT2  EQU   TRRTYPE
@NM00026 EQU   TRRTYPE
NSSSVT5A EQU   NSSSVT5
NSSSVT4D EQU   NSSSVT4+3
NSSSVT4C EQU   NSSSVT4+2
NSSSVT4B EQU   NSSSVT4+1
NSSSVT4A EQU   NSSSVT4
NSSSVT3K EQU   NSSSVT3+8
NSSSVT3J EQU   NSSSVT3+7
NSSSVT3I EQU   NSSSVT3+6
@NM00025 EQU   NSSSVT3G
NSSSVT3H EQU   NSSSVT3G
NSSSVT3F EQU   NSSSVT3+4
NSSSVT3E EQU   NSSSVT3+3
@NM00024 EQU   NSSSVT3C
NSSSVT3D EQU   NSSSVT3C
NSSSVT3B EQU   NSSSVT3+1
NSSSVT3A EQU   NSSSVT3
NSSSVT   EQU   NSSSVRU+2
NSSSVDAF EQU   NSSSVRU
NSRUHKTY EQU   NSRUHOOK
SRURSV01 EQU   SRULDID+4
SRUPSSN  EQU   SRULDID+2
SRUDFCLV EQU   SRUSPSN
@NM00023 EQU   SRUTYPE
SRUPSAC  EQU   SRUTYPE
SRUSPAC  EQU   SRUTYPE
SRUQSREQ EQU   ISTSRU
SENRU    EQU   ISTSENRU+4
SRUSNS4  EQU   SRUSENS2+1
SRUSNS3  EQU   SRUSENS2
SRUSNST  EQU   SRUSENS1+1
SRUSNS1  EQU   SRUSENS1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
NSRUNA6  EQU   NSRUNA5
NCSRUITS EQU   NCSUSSRU+2
NCSRULEN EQU   NCSUSSRU
VYCRSV02 EQU   ISTVYCRR+128
VYCRSV04 EQU   ISTVYCRR+126
VYCRRCW3 EQU   ISTVYCRR+118
VYCRRSAV EQU   ISTVYCRR+46
VYCRSV03 EQU   VYCCRT+11
CINCFE   EQU   VYCCRT+11
CINCE9   EQU   VYCCRT+11
CINCVO   EQU   VYCCRT+11
CINCR5   EQU   VYCCRT+11
CINCR3   EQU   VYCCRT+10
CINCE8   EQU   VYCCRT+10
CINCE7   EQU   VYCCRT+10
CINCE6   EQU   VYCCRT+10
CINCE5   EQU   VYCCRT+10
CINCE1   EQU   VYCCRT+10
CINCUQ   EQU   VYCCRT+10
CINCUB   EQU   VYCCRT+10
CINCUA   EQU   VYCCRT+9
CINCX9   EQU   VYCCRT+9
CINCX8   EQU   VYCCRT+9
CINCX7   EQU   VYCCRT+9
CINCX6   EQU   VYCCRT+9
CINCX3   EQU   VYCCRT+9
CINCX2   EQU   VYCCRT+9
CINCX1   EQU   VYCCRT+9
CINCX0   EQU   VYCCRT+8
CINCW9   EQU   VYCCRT+8
CINCW8   EQU   VYCCRT+8
CINCW7   EQU   VYCCRT+8
CINCW6   EQU   VYCCRT+8
CINCW5   EQU   VYCCRT+8
CINCW4   EQU   VYCCRT+8
CINCW2   EQU   VYCCRT+8
CINCW0   EQU   VYCCRT+7
CINCV9   EQU   VYCCRT+7
CINCV8   EQU   VYCCRT+7
CINCV7   EQU   VYCCRT+7
CINCV6   EQU   VYCCRT+7
CINCV5   EQU   VYCCRT+7
CINCV4   EQU   VYCCRT+7
CINCV3   EQU   VYCCRT+7
CINCU8   EQU   VYCCRT+6
CINCU7   EQU   VYCCRT+6
CINCU6   EQU   VYCCRT+6
CINCU5   EQU   VYCCRT+6
CINCU4   EQU   VYCCRT+6
CINCU3   EQU   VYCCRT+6
CINCU2   EQU   VYCCRT+6
CINCU1   EQU   VYCCRT+5
CINCU0   EQU   VYCCRT+5
CINCUM   EQU   VYCCRT+5
CINCS1   EQU   VYCCRT+5
CINCL8   EQU   VYCCRT+5
CINCL7   EQU   VYCCRT+5
CINCL6   EQU   VYCCRT+5
CINCL5   EQU   VYCCRT+5
CINCL4   EQU   VYCCRT+4
CINCL3   EQU   VYCCRT+4
CINCL2   EQU   VYCCRT+4
CINCL1   EQU   VYCCRT+4
CINCL0   EQU   VYCCRT+4
CINCF4   EQU   VYCCRT+4
CINCF3   EQU   VYCCRT+4
CINCF1   EQU   VYCCRT+4
CINCFM   EQU   VYCCRT+3
CINCE4   EQU   VYCCRT+3
CINCE3   EQU   VYCCRT+3
CINCE2   EQU   VYCCRT+3
CINCE0   EQU   VYCCRT+3
CINCD9   EQU   VYCCRT+3
CINCD8   EQU   VYCCRT+3
CINCD7   EQU   VYCCRT+3
CINCD6   EQU   VYCCRT+2
CINCD5   EQU   VYCCRT+2
CINCD4   EQU   VYCCRT+2
CINCD3   EQU   VYCCRT+2
CINCD2   EQU   VYCCRT+2
CINCD1   EQU   VYCCRT+2
CINCIP   EQU   VYCCRT+2
CINCR2   EQU   VYCCRT+2
CINCMS   EQU   VYCCRT+1
CINCVN   EQU   VYCCRT+1
CINCVS   EQU   VYCCRT+1
CINCVP   EQU   VYCCRT+1
CINCVX   EQU   VYCCRT+1
CINCFS   EQU   VYCCRT+1
CINCSM   EQU   VYCCRT+1
CINCR1   EQU   VYCCRT+1
CINCLF   EQU   VYCCRT
CINCVA   EQU   VYCCRT
CINCVI   EQU   VYCCRT
CINCMD   EQU   VYCCRT
CINCMY   EQU   VYCCRT
CINCDL   EQU   VYCCRT
CINCIO   EQU   VYCCRT
CINCCL   EQU   VYCCRT
VYCRSV01 EQU   VYCNTRD+11
NINCFE   EQU   VYCNTRD+11
NINCE9   EQU   VYCNTRD+11
NINCVO   EQU   VYCNTRD+11
NINCR5   EQU   VYCNTRD+11
NINCR3   EQU   VYCNTRD+10
NINCE8   EQU   VYCNTRD+10
NINCE7   EQU   VYCNTRD+10
NINCE6   EQU   VYCNTRD+10
NINCE5   EQU   VYCNTRD+10
NINCE1   EQU   VYCNTRD+10
NINCUQ   EQU   VYCNTRD+10
NINCUB   EQU   VYCNTRD+10
NINCUA   EQU   VYCNTRD+9
NINCX9   EQU   VYCNTRD+9
NINCX8   EQU   VYCNTRD+9
NINCX7   EQU   VYCNTRD+9
NINCX6   EQU   VYCNTRD+9
NINCX3   EQU   VYCNTRD+9
NINCX2   EQU   VYCNTRD+9
NINCX1   EQU   VYCNTRD+9
NINCX0   EQU   VYCNTRD+8
NINCW9   EQU   VYCNTRD+8
NINCW8   EQU   VYCNTRD+8
NINCW7   EQU   VYCNTRD+8
NINCW6   EQU   VYCNTRD+8
NINCW5   EQU   VYCNTRD+8
NINCW4   EQU   VYCNTRD+8
NINCW2   EQU   VYCNTRD+8
NINCW0   EQU   VYCNTRD+7
NINCV9   EQU   VYCNTRD+7
NINCV8   EQU   VYCNTRD+7
NINCV7   EQU   VYCNTRD+7
NINCV6   EQU   VYCNTRD+7
NINCV5   EQU   VYCNTRD+7
NINCV4   EQU   VYCNTRD+7
NINCV3   EQU   VYCNTRD+7
NINCU8   EQU   VYCNTRD+6
NINCU7   EQU   VYCNTRD+6
NINCU6   EQU   VYCNTRD+6
NINCU5   EQU   VYCNTRD+6
NINCU4   EQU   VYCNTRD+6
NINCU3   EQU   VYCNTRD+6
NINCU2   EQU   VYCNTRD+6
NINCU1   EQU   VYCNTRD+5
NINCU0   EQU   VYCNTRD+5
NINCUM   EQU   VYCNTRD+5
NINCS1   EQU   VYCNTRD+5
NINCL8   EQU   VYCNTRD+5
NINCL7   EQU   VYCNTRD+5
NINCL6   EQU   VYCNTRD+5
NINCL5   EQU   VYCNTRD+5
NINCL4   EQU   VYCNTRD+4
NINCL3   EQU   VYCNTRD+4
NINCL2   EQU   VYCNTRD+4
NINCL1   EQU   VYCNTRD+4
NINCL0   EQU   VYCNTRD+4
NINCF4   EQU   VYCNTRD+4
NINCF3   EQU   VYCNTRD+4
NINCF1   EQU   VYCNTRD+4
NINCFM   EQU   VYCNTRD+3
NINCE4   EQU   VYCNTRD+3
NINCE3   EQU   VYCNTRD+3
NINCE2   EQU   VYCNTRD+3
NINCE0   EQU   VYCNTRD+3
NINCD9   EQU   VYCNTRD+3
NINCD8   EQU   VYCNTRD+3
NINCD7   EQU   VYCNTRD+3
NINCD6   EQU   VYCNTRD+2
NINCD5   EQU   VYCNTRD+2
NINCD4   EQU   VYCNTRD+2
NINCD3   EQU   VYCNTRD+2
NINCD2   EQU   VYCNTRD+2
NINCD1   EQU   VYCNTRD+2
NINCIP   EQU   VYCNTRD+2
NINCR2   EQU   VYCNTRD+2
NINCMS   EQU   VYCNTRD+1
NINCVN   EQU   VYCNTRD+1
NINCVS   EQU   VYCNTRD+1
NINCVP   EQU   VYCNTRD+1
NINCVX   EQU   VYCNTRD+1
NINCFS   EQU   VYCNTRD+1
NINCSM   EQU   VYCNTRD+1
NINCR1   EQU   VYCNTRD+1
NINCLF   EQU   VYCNTRD
NINCVA   EQU   VYCNTRD
NINCVI   EQU   VYCNTRD
NINCMD   EQU   VYCNTRD
NINCMY   EQU   VYCNTRD
NINCDL   EQU   VYCNTRD
NINCIO   EQU   VYCNTRD
NINCCL   EQU   VYCNTRD
VYCCNS   EQU   ISTVYCRR
CNSRSV05 EQU   CNSTFLDB+2
CNSLOG0B EQU   CNSTFLDB+2
CNSACCTB EQU   CNSTFLDB+2
CNSFREEB EQU   CNSTFLDB+2
CNSGETSB EQU   CNSTFLDB+2
CNSSEARB EQU   CNSTFLDB+2
CNSQUEUB EQU   CNSTFLDB+2
CNSACONB EQU   CNSTFLDB+2
CNSTCONB EQU   CNSTFLDB+1
CNSCLAQB EQU   CNSTFLDB+1
CNSCLINB EQU   CNSTFLDB+1
CNSGBINB EQU   CNSTFLDB+1
CNSLGINB EQU   CNSTFLDB+1
CNSACINB EQU   CNSTFLDB+1
CNSPSINB EQU   CNSTFLDB+1
CNSRQRLB EQU   CNSTFLDB+1
CNSTRRLB EQU   CNSTFLDB
CNSDORLB EQU   CNSTFLDB
CNSRLINB EQU   CNSTFLDB
CNSQREQB EQU   CNSTFLDB
CNSXREQB EQU   CNSTFLDB
CNSAQINB EQU   CNSTFLDB
CNSAUTHB EQU   CNSTFLDB
CNSMRINB EQU   CNSTFLDB
CNSRSV01 EQU   CNSTFLDA+2
CNSLOG0A EQU   CNSTFLDA+2
CNSACCTA EQU   CNSTFLDA+2
CNSFREEA EQU   CNSTFLDA+2
CNSGETSA EQU   CNSTFLDA+2
CNSSEARA EQU   CNSTFLDA+2
CNSQUEUA EQU   CNSTFLDA+2
CNSACONA EQU   CNSTFLDA+2
CNSTCONA EQU   CNSTFLDA+1
CNSCLAQA EQU   CNSTFLDA+1
CNSCLINA EQU   CNSTFLDA+1
CNSGBINA EQU   CNSTFLDA+1
CNSLGINA EQU   CNSTFLDA+1
CNSACINA EQU   CNSTFLDA+1
CNSPSINA EQU   CNSTFLDA+1
CNSRQRLA EQU   CNSTFLDA+1
CNSTRRLA EQU   CNSTFLDA
CNSDORLA EQU   CNSTFLDA
CNSRLINA EQU   CNSTFLDA
CNSQREQA EQU   CNSTFLDA
CNSXREQA EQU   CNSTFLDA
CNSAQINA EQU   CNSTFLDA
CNSAUTHA EQU   CNSTFLDA
CNSMRINA EQU   CNSTFLDA
CNSTPFX  EQU   ISTCNSTA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
@NM00056 EQU   ISTAPCRR+137
@NM00055 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00054 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00053 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00052 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00051 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00050 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00049 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00048 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00047 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00046 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00045 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00044 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
@NM00004 EQU   CV2REGSV+12
@NM00003 EQU   CV2REGSV
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00043 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00042 EQU   ATCAOSM+333
@NM00041 EQU   @NM00040
ATCSNUF  EQU   @NM00040
ATCOPKL  EQU   @NM00040
ATCABEN  EQU   @NM00040
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00039 EQU   @NM00038
ATCVTMAB EQU   @NM00038
@NM00037 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00036 EQU   ISTATCVT+819
@NM00035 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00034 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00033 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00032 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00031 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00030 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00029 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
RUBDATA  EQU   ISTRUB
RHRSVD5  EQU   RH3
RHRSVD4  EQU   RH3
RHLOG    EQU   RH3
RHRSVD3  EQU   RH3
RHRCDIR  EQU   RH3
RHCDIR   EQU   RH3
RHEB     EQU   RH3
RHBB     EQU   RH3
RHPACE   EQU   RH2
RHRSVD2  EQU   RH2
RHINOP   EQU   RHRSVD1
RHBUSY   EQU   RHRETRY
RHEXCEPT EQU   RH2
RHRRN    EQU   RH2
RHPE     EQU   RH2
RHFME    EQU   RH2
RHCHAIN  EQU   RH1
RHSENSE  EQU   RH1
RHFORMAT EQU   RH1
RHDIRI   EQU   RH1
RHSCI    EQU   RH1
RHTYPE   EQU   RH1
RHQS     EQU   RH1
PATRSV01 EQU   PATFLAGA
PATUSEFG EQU   PATFLAGA
PATRDCNT EQU   ISTPAT+6
PATGRPID EQU   ISTPAT+5
PATPTHID EQU   ISTPAT+4
PATDINDX EQU   ISTPAT+2
PATGINDX EQU   ISTPAT
GNTGRPNM EQU   ISTGNT
DNTTELNO EQU   ISTDNT+1
DNTCTDIG EQU   ISTDNT
RLSRSV02 EQU   ISTRLS+140
RLSRSV01 EQU   ISTRLS+138
RLSCTELU EQU   ISTRLS+136
RLSPRE   EQU   ISTRLS
RDARSVPT EQU   ISTRDA+84
RDAPUBI  EQU   ISTRDA+83
RDADFCUA EQU   ISTRDA+80
RDACTPCC EQU   ISTRDA+79
RDADACUA EQU   ISTRDA+76
RDALUBA  EQU   RDAUCBAD+1
RDACHQI  EQU   RDAUCBAD
RDARSV01 EQU   RDAFLAG
RDARBISA EQU   RDAFLAG
RDAPRE   EQU   ISTRDA
RSWRSV01 EQU   ISTRSW+152
RSWRSV02 EQU   ISTRSW+150
RSWCTELU EQU   ISTRSW+148
RSWGRUPZ EQU   ISTRSW+146
RSWDIALZ EQU   ISTRSW+144
RSWGRUPT EQU   ISTRSW+140
RSWDIALT EQU   ISTRSW+136
RSWPRE   EQU   ISTRSW
RLXRSV03 EQU   ISTRLX+80
RLXRSV02 EQU   ISTRLX+77
RLXRSV01 EQU   RLXFLAGA
RLXINUSE EQU   RLXFLAGA
RLXNLUX  EQU   ISTRLX+72
RLXPRE   EQU   ISTRLX
RPXRSV01 EQU   ISTRPX+80
RPXRSV02 EQU   ISTRPX+77
RPXMAXLU EQU   ISTRPX+76
RPXFLUX  EQU   ISTRPX+72
RPXPRE   EQU   ISTRPX
RLURSV02 EQU   ISTRLU+172
RLULGMOD EQU   ISTRLU+164
RLUMODEP EQU   RLUMODET+8
RLUMODEN EQU   RLUMODET
RLUUSSPT EQU   RLUUSSTB+8
RLUUSSNM EQU   RLUUSSTB
RLURSV01 EQU   ISTRLU+137
RLULOCAD EQU   ISTRLU+136
RLUNCPPM EQU   RLUNCPPC+1
RLUNCPPN EQU   RLUNCPPC
RLUPACEM EQU   RLUPACE+1
RLUPACEN EQU   RLUPACE
RLUINTA  EQU   ISTRLU+128
RLUSSCFM EQU   ISTRLU+127
RLUCRRSV EQU   RLUCRFLG
RLUACTLU EQU   RLUCRFLG
RLURSV00 EQU   RLUFLAG
RLUNDSES EQU   RLUFLAG
RLUGSTAT EQU   RLUFLAG
RLUBATCH EQU   RLUFLAG
RLURBISA EQU   RLUFLAG
RLUTYPE  EQU   ISTRLU+124
RLUCRPR  EQU   ISTRLU
RCCRVPT2 EQU   ISTRCC+144
RCCXTOSW EQU   ISTRCC+140
RCCSWTOX EQU   ISTRCC+136
RCCRSPT2 EQU   ISTRCC+133
RCCADDR  EQU   ISTRCC+132
RCCPASSL EQU   ISTRCC+131
RCCMXOUT EQU   ISTRCC+130
RCCMXDAT EQU   ISTRCC+128
RCCINDEX EQU   ISTRCC+126
RCCPATHZ EQU   ISTRCC+124
RCCPATHT EQU   ISTRCC+120
RCCDPQ   EQU   ISTRCC+116
RCCTPAB  EQU   ISTRCC+112
RCCRSV02 EQU   ISTRCC+109
RCCCRRSV EQU   RCCCRFLG
RCCCTCFL EQU   RCCCRFLG
RCCACTPU EQU   RCCCRFLG
RCCNCSPL EQU   ISTRCC+104
RCCRPHCN EQU   ISTRCC+100
RCCEPAB  EQU   ISTRCC+96
RCCDPAB  EQU   ISTRCC+92
RCCVPAB  EQU   ISTRCC+88
@NM00022 EQU   ISTRCC+87
RCCSESCT EQU   ISTRCC+86
RCCIDNUM EQU   RCCID48+3
RCCIDBLK EQU   RCCID48+2
RCCIDPA2 EQU   RCCID48+1
RCCIDPUT EQU   RCCID48
RCCIDPA1 EQU   RCCSTAID
RCCCTELU EQU   ISTRCC+76
RCCCNCNT EQU   ISTRCC+75
RCCRTGOH EQU   RCCFLAGB
RCCBRKCN EQU   RCCFLAGB
RCCRESET EQU   RCCFLAGB
RCCFINAL EQU   RCCFLAGB
RCCBNNSP EQU   RCCFLAGB
RCCIRETR EQU   RCCFLAGB
RCCDIALP EQU   RCCFLAGB
RCCDSTCT EQU   RCCFLAGB
RCCCTPGD EQU   RCCFLAG
RCCPRGDN EQU   RCCFLAG
RCCOUERP EQU   RCCFLAG
RCCOHIMM EQU   RCCFLAG
RCCLDISC EQU   RCCFLAG
RCCERPIP EQU   RCCFLAG
RCCCUDIE EQU   RCCFLAG
RCCRBISA EQU   RCCFLAG
RCCTYPE  EQU   ISTRCC+72
RCCPRE   EQU   ISTRCC
DOTADTRM EQU   ISTDOT
RDSADDOT EQU   ISTRDS+76
RDSCTATR EQU   ISTRDS+74
RDSCTTRM EQU   ISTRDS+72
RDSPRE   EQU   ISTRDS
RINRSV05 EQU   ISTRIN+156
RINRSV04 EQU   ISTRIN+152
RINLOCRN EQU   ISTRIN+148
RINRSV02 EQU   ISTRIN+145
RTRCNCNT EQU   RINCNCNT
RTRNCSPL EQU   RINNCSPL
RTRRPHCN EQU   RINRPHCN
RTRVPAB  EQU   RINVPAB
RTRREMOT EQU   RINREMOT
RTRRLDAF EQU   RINRLDAF
RTRNODID EQU   RINNODID
RINRSV01 EQU   RINDFD
RTRLDISC EQU   RINLDISC
RTRNODEF EQU   RINNODEF
RTRREMPO EQU   RINREMPO
RINCRPRE EQU   ISTRIN
RTRRSV04 EQU   ISTRTR+210
RTRLCTI  EQU   ISTRTR+209
RTRIDCAS EQU   RTRBSCID+1
RTRIDLEN EQU   RTRBSCID
RTRRSVDD EQU   ISTRTR+181
RTRRDFG  EQU   ISTRTR+180
RTRDIAA  EQU   ISTRTR+176
RTRPOLA  EQU   ISTRTR+172
RTRCADDR EQU   ISTRTR+164
RTRCTADR EQU   ISTRTR+162
RTRCTPOL EQU   ISTRTR+160
RTRCTDIA EQU   ISTRTR+158
RTRRSV03 EQU   ISTRTR+156
RTRRVPT1 EQU   ISTRTR+152
RTRBHSN1 EQU   ISTRTR+144
RTRCRSV2 EQU   RTRCRFLG
RTRDTRLM EQU   RTRLSCMD
RTRCRSV1 EQU   RTRCRFLG
RTRTRMAX EQU   ISTRTR+142
RTRRSV24 EQU   RTRRDFF
RTRRFDEK EQU   RTRRDFF
RTRRFANK EQU   RTRRDFF
RTRRFPFK EQU   RTRRDFF
RTRRFPEN EQU   RTRRDFF
RTRRFXCT EQU   RTRRDFF
RTRRESCT EQU   RTRRDFE
RTRRESUP EQU   RTRRDFE
RTRREATT EQU   RTRRDFE
RTRRECHK EQU   RTRRDFE
RTRREACR EQU   RTRRDFE
RTRRSV0A EQU   RTRRDFE
RTRREBRK EQU   RTRRDFE
RTRRSV11 EQU   RTRRDFD
RTRRSV10 EQU   RTRRDFD
RTRRDBHI EQU   RTRRDFD
RTRRDBHD EQU   RTRRDFD
RTRRDBHN EQU   RTRRDFD
RTRRSV23 EQU   RTRRDFC
RTRRCXMS EQU   RTRRDFC
RTRRCMSG EQU   RTRRDFC
RTRRCBLK EQU   RTRRDFC
RTRRCPT3 EQU   RTRRDFC
RTRRCIT2 EQU   RTRRDFC
RTRRCIT1 EQU   RTRRDFC
RTRRSV32 EQU   RTRRDFB
RTRRBEND EQU   RTRRDFB
RTRRBECT EQU   RTRRDFB
RTRRSV02 EQU   RTRRDFA
RTRRACTR EQU   RTRRDFA
RTRRSV60 EQU   RTRRDFA
RTRRACDT EQU   RTRRDFA
RTRRAPT3 EQU   RTRRAALL
RTRRAPT2 EQU   RTRRAALL
RTRRAPT1 EQU   RTRRAALL
RTRRAATN EQU   RTRRDFA
RTRRSV45 EQU   ISTRTR+132
RTRRSV01 EQU   ISTRTR+130
RTRCTECM EQU   ISTRTR+128
RTRADRPT EQU   RTRADR+1
RTRRSV22 EQU   RTRFLAG
RTRVTERM EQU   RTRFLAG
RTRRSV51 EQU   RTRFLAG
RTRRBISA EQU   RTRFLAG
RTRRSV21 EQU   RTRFLAG
RTRCRPR  EQU   ISTRTR
RCLRVPT2 EQU   ISTRCL+92
RCLRVPT1 EQU   ISTRCL+88
RCLGPOLA EQU   ISTRCL+84
RCLCTNGP EQU   ISTRCL+82
RCLRSV01 EQU   ISTRCL+80
RCLCTECM EQU   ISTRCL+78
RCLCTETR EQU   ISTRCL+76
RCLGPADR EQU   RCLADR+1
RCLRSV33 EQU   RCLFLAG
RCLBATCH EQU   RCLFLAG
RCLRBISA EQU   RCLFLAG
RCLRSV22 EQU   RCLFLAG
RCLPRE   EQU   ISTRCL
RPTRSV03 EQU   ISTRPT+156
RPTRSV02 EQU   ISTRPT+152
RPTNSNSV EQU   ISTRPT+148
RPTPTHCT EQU   ISTRPT+146
RPTPEPCT EQU   ISTRPT+144
RPTDAFSV EQU   ISTRPT+142
RPTRSV01 EQU   ISTRPT+141
RPTISTAT EQU   RPTFLAG1
RPTDYNAM EQU   RPTFLAG1
RPTVYIMM EQU   RPTFLAG1
RPTVIODN EQU   RPTFLAG1
RPTONLIN EQU   RPTFLAG1
RPTHLVPD EQU   RPTFLAG1
RPTVRYPD EQU   RPTFLAG1
RPTASLEP EQU   RPTFLAG1
RPTUTERM EQU   ISTRPT+136
RPTATERM EQU   ISTRPT+132
RPTDIVT  EQU   RPTDITT
RPTCTNM  EQU   ISTRPT+120
RPTLNDAF EQU   RPTLNCID+2
RPTLNSAF EQU   RPTLNCID
RPTLN    EQU   ISTRPT
RLNRVPT2 EQU   ISTRLN+112
RLNNCSPL EQU   ISTRLN+108
RLNX2SW  EQU   ISTRLN+104
@NM00021 EQU   ISTRLN+103
RLNCRRSV EQU   RLNCRFLG
RLNSWEP  EQU   RLNCRFLG
RLNSVSKP EQU   RLNLSCMD
RLNSESLM EQU   RLNLSCMD
RLNNPRLM EQU   RLNLSCMD
RLNSWNCP EQU   RLNCRFLG
RLNACTLN EQU   RLNCRFLG
RLNPAUSE EQU   ISTRLN+101
RLNPOLMT EQU   ISTRLN+100
RLNACTSN EQU   ISTRLN+98
RLNRESV1 EQU   ISTRLN+97
RLNACTRM EQU   ISTRLN+96
RLNCTSES EQU   ISTRLN+95
RLNRDSLM EQU   ISTRLN+94
RLNAUTOA EQU   ISTRLN+92
RLNRDFD  EQU   RLNRDF+3
RLNRDFC  EQU   RLNRDF+2
RLNMULTP EQU   RLNRDFB
RLNRAPOL EQU   RLNRDFB
RLNTTV   EQU   RLNRDFB
RLNRSV0B EQU   RLNRDFB
RLNAUTOD EQU   RLNRDFB
RLNRBUSE EQU   RLNRDFB
RLNRAPEP EQU   RLNRDFA
RLNRANCP EQU   RLNRDFA
RLNRAEP  EQU   RLNRDFA
RLNIDV   EQU   RLNRDFA
RLNPORT  EQU   RLNRDFA
RLNGANSW EQU   RLNRDFA
RLNRACAN EQU   RLNRACNT
RLNRSV04 EQU   RLNSTAT2
RLNINUSE EQU   RLNSTAT2
RLNOHIN  EQU   RLNSTAT2
RLNRSV03 EQU   RLNSTAT1
RLNVD    EQU   RLNSTAT1
RLNINOPP EQU   RLNSTAT1
RLNINOPL EQU   RLNSTAT1
RLNLRST  EQU   RLNSTAT1
RLNTRAP  EQU   RLNSTAT1
RLNACTCT EQU   ISTRLN+84
RLNCTECM EQU   ISTRLN+82
RLNCTEIN EQU   ISTRLN+80
RLNCTETR EQU   ISTRLN+78
RLNCTECL EQU   ISTRLN+76
RLNCUA   EQU   RLNUCBAD
RLNRSV01 EQU   RLNFLAG
RLNRBISA EQU   RLNFLAG
RLNPRE   EQU   ISTRLN
RGPRVPT2 EQU   ISTRGP+88
RGPRVPT1 EQU   ISTRGP+84
RGPCTECM EQU   ISTRGP+82
RGPCTEIN EQU   ISTRGP+80
RGPCTETR EQU   ISTRGP+78
RGPCTECL EQU   ISTRGP+76
RGPCTELN EQU   ISTRGP+74
RGPRSV03 EQU   ISTRGP+73
RGPRSV02 EQU   RGPFLG
RGPASDLC EQU   RGPFLG
RGPABSC  EQU   RGPFLG
RGPASS   EQU   RGPFLG
RGPADIL  EQU   RGPFLG
RGPPRE   EQU   ISTRGP
RRNRINNM EQU   ISTRRN+248
@NM00020 EQU   ISTRRN+247
RRNRDCUA EQU   ISTRRN+244
RRNLASTE EQU   ISTRRN+240
RRNNCSPL EQU   ISTRRN+236
RRNRPLPT EQU   ISTRRN+232
RRNMSIZE EQU   ISTRRN+228
RRNNCPNM EQU   ISTRRN+221
RRNCTPCC EQU   ISTRRN+220
RRNHBUFS EQU   ISTRRN+218
RRNHLENT EQU   RRNHPRE+1
RRNHLENH EQU   RRNHPRE
RRNNMNCP EQU   ISTRRN+208
RRNDELAY EQU   ISTRRN+206
RRNRSV04 EQU   ISTRRN+200
RRNRSV88 EQU   RRNNMDPD+7
RRNPUBI  EQU   RRNNMDPD+6
RRNDPLUB EQU   RRNNMDPD
RRNEPADR EQU   ISTRRN+190
RRNCPLUB EQU   ISTRRN+184
RRNFLUX  EQU   ISTRRN+180
RRNRSV05 EQU   RRNCMFD
RRNREMPO EQU   RRNCMFD
RRNCDREC EQU   RRNCMFD
RRNCDDSI EQU   RRNCMFD
RRNCDBCK EQU   RRNCMFD
RRNCDDTL EQU   RRNCMFD
RRNCDSTD EQU   RRNCMFD
RRNCDCSP EQU   RRNCMFD
RRNCCCSL EQU   RRNCMFC
RRNCCSIM EQU   RRNCMFC
RRNCCRCM EQU   RRNCMFC
RRNCCRIM EQU   RRNCMFC
RRNCCCRC EQU   RRNCMFC
RRNCCRST EQU   RRNCMFC
RRNCCRDQ EQU   RRNCMFC
RRNCCRCN EQU   RRNCMFC
RRNCBALT EQU   RRNCMFB
RRNCBMOD EQU   RRNCMFB
RRNCBNPL EQU   RRNCMFB
RRNCBRLS EQU   RRNCMFB
RRNCBRDS EQU   RRNCMFB
RRNCBDLR EQU   RRNCMFB
RRNCBDLH EQU   RRNCMFB
RRNCBDLO EQU   RRNCMFB
RRNCADGO EQU   RRNCMFA
RRNCADTD EQU   RRNCMFA
RRNCACDT EQU   RRNCMFA
RRNCAMBH EQU   RRNCMFA
RRNCAATI EQU   RRNCMFA
RRNCAATG EQU   RRNCMFA
RRNCAATD EQU   RRNCMFA
RRNCAALL EQU   RRNCMFA
RRNRSV55 EQU   RRNRDF+3
RRNPTASL EQU   RRNRDFB+1
RRNRSV01 EQU   RRNRDFB+1
RRNVYDON EQU   RRNRDFB+1
RRNRBBUP EQU   RRNRDFB+1
RRNRSV03 EQU   RRNRDFB
RRNRBCT2 EQU   RRNRDFB
RRNRBCT1 EQU   RRNRDFB
RRNRBSEC EQU   RRNRDFB
RRNRBCCT EQU   RRNRDFB
RRNRBCCL EQU   RRNRDFB
RRNRSV02 EQU   RRNRDFB
RRNRBMDL EQU   RRNRDFB
RRNRAPEP EQU   RRNRDFA
RRNRANCP EQU   RRNRDFA
RRNRBREM EQU   RRNRDFA
RRNRAOLT EQU   RRNRDFA
RRNRASYN EQU   RRNRDFA
RRNRADMP EQU   RRNRDFA
RRNRAIPL EQU   RRNRDFA
RRNRASHT EQU   RRNRDFA
RRNCTENT EQU   ISTRRN+170
RRNCTECM EQU   ISTRRN+168
RRNCTEIN EQU   ISTRRN+166
RRNCTETR EQU   ISTRRN+164
RRNCTECL EQU   ISTRRN+162
RRNCTELI EQU   ISTRRN+160
RRNCTEGP EQU   ISTRRN+158
RRNCTBHS EQU   ISTRRN+156
RRNBHSET EQU   ISTRRN+152
RRNTRENT EQU   ISTRRN+148
RRNRLDIP EQU   ISTRRN+147
RRNRNCUA EQU   ISTRRN+144
RRNGRPA  EQU   ISTRRN+140
RRNLUBA  EQU   RRNUCBAD+1
RRNCHQI  EQU   RRNUCBAD
RRNRSV11 EQU   RRNFLAG
RRNDSTCT EQU   RRNFLAG
RRNERPIP EQU   RRNFLAG
RRNLCDIP EQU   RRNFLAG
RRNLCDIE EQU   RRNFLAG
RRNLCSIP EQU   RRNFLAG
RRNRBISA EQU   RRNFLAG
RRNRSV89 EQU   RRNFLAG
RRNPRE   EQU   ISTRRN
RLCRVPT2 EQU   ISTRLC+80
RLCRVPT1 EQU   ISTRLC+79
RLCLCCUA EQU   ISTRLC+76
RLCUCBAD EQU   RLCADR+1
RLCRSVDE EQU   RLCFLAG
RLCACNT  EQU   RLCFLAG
RLCRSV14 EQU   RLCFLAG
RLCRBISA EQU   RLCFLAG
RLCRSV22 EQU   RLCFLAG
RLCPRE   EQU   ISTRLC
RAPRVPT2 EQU   ISTRAP+116
RAPRVPT1 EQU   ISTRAP+112
RAPBFACT EQU   ISTRAP+111
RAPRSV17 EQU   RAPFLGC
RAPRSV16 EQU   RAPFLGC
RAPRSV15 EQU   RAPFLGC
RAPRSV14 EQU   RAPFLGC
RAPRSV13 EQU   RAPFLGC
RAPRSV12 EQU   RAPFLGC
RAPRSV11 EQU   RAPFLGC
RAPRSV10 EQU   RAPFLGC
RAPANVPC EQU   RAPFLGB
RAPASPO  EQU   RAPFLGB
RAPAPPO  EQU   RAPFLGB
RAPAACQ  EQU   RAPFLGB
RAPAPRMT EQU   RAPFLGB
RAPAPASS EQU   RAPFLGB
RAPABLCK EQU   RAPFLGB
RAPALLF  EQU   RAPFLGB
RAPRSV06 EQU   RAPFLG
RAPRSV05 EQU   RAPFLG
RAPRSV04 EQU   RAPFLG
RAPRSV03 EQU   RAPFLG
RAPATLGN EQU   RAPFLG
RAPASLGI EQU   RAPFLG
RAPAQUI  EQU   RAPFLG
RAPABLGN EQU   RAPFLG
RAPACEQD EQU   ISTRAP+106
RAPTRPRE EQU   ISTRAP+104
RAPACEAP EQU   ISTRAP+100
RAPICEAQ EQU   ISTRAP+96
RAPICEAC EQU   ISTRAP+92
RAPICELG EQU   ISTRAP+88
RAPAPPWD EQU   ISTRAP+80
RAPACDEB EQU   ISTRAP+76
RAPACBA  EQU   ISTRAP+72
RAPPRE   EQU   ISTRAP
RDTVSRPL EQU   ISTRDT+132
RDTCRSPW EQU   ISTRDT+124
RDTCRSDS EQU   ISTRDT+116
@NM00019 EQU   ISTRDT+113
RRNSTCNT EQU   RDTSTCNT
RRNVYRPH EQU   RDTVYRPH
RDTTPAB  EQU   ISTRDT+104
RDTDPAB  EQU   ISTRDT+100
RDTEPAB  EQU   ISTRDT+96
RDTVPAB  EQU   ISTRDT+92
RDTRSV01 EQU   RDTFLAGB
RDTBHSET EQU   RDTFLAGB
RDTCTCFL EQU   RDTFLAGB
RDTCTPGD EQU   RDTFLAGB
RDTPRGDN EQU   RDTFLAGB
RDTOUERP EQU   RDTFLAGB
RDTLGCT  EQU   ISTRDT+90
RDTNODID EQU   ISTRDT+89
RDTMAXID EQU   ISTRDT+88
RDTCTSNT EQU   ISTRDT+86
RDTFLAGS EQU   ISTRDT+84
RDTBACK  EQU   ISTRDT+80
RDTFORW  EQU   ISTRDT+76
RDTLEN   EQU   RDTPLEN+1
RDTPRILS EQU   RDTPRIOR
RDTPRISW EQU   RDTPRIOR
RDTPRIRN EQU   RDTPRIOR
RDTPRILC EQU   RDTPRIOR
RDTPRIAP EQU   RDTPRIOR
@NM00018 EQU   RDTPRIOR
RDTPRE   EQU   ISTRDT
RCPRSV05 EQU   ISTRCPRE+120
RCPRSV04 EQU   ISTRCPRE+116
RCPRSV03 EQU   ISTRCPRE+112
RCPINTA  EQU   RCPLGNIN+16
RCPLGNCT EQU   RCPLGNIN+8
RCPLGNAP EQU   RCPLGNIN
@NM00017 EQU   RCPPMODE
RCPRRECD EQU   RCPPMODE
RCPRBASC EQU   RCPPMODE
RCPBFLIM EQU   ISTRCPRE+90
RCPBHSI2 EQU   ISTRCPRE+89
RCPBHSI1 EQU   ISTRCPRE+88
RCPACETR EQU   ISTRCPRE+84
RCPICEAQ EQU   ISTRCPRE+80
RCPLNAPA EQU   ISTRCPRE+76
RCPICELN EQU   ISTRCPRE+72
RCPPRE   EQU   ISTRCPRE
RPRCONID EQU   ISTRPRE+63
RPRCLVPD EQU   RPRFLAGC
RPRINIMM EQU   RPRFLAGD
RPRRSV05 EQU   RPRFLAGD
RPRCONP  EQU   RPRFLAGD
RPRACTP  EQU   RPRFLAGD
RPRRSON  EQU   RPRFLAGD
RPRCONCT EQU   RPRFLAGD
RPRLTASN EQU   RPRFLAGD
RPRPTHCT EQU   ISTRPRE+60
RPRSWDAF EQU   ISTRPRE+58
RPRSTPCT EQU   ISTRPRE+56
RPRRVPT1 EQU   ISTRPRE+52
RPRDEVCH EQU   ISTRPRE+44
RPRNCBA  EQU   ISTRPRE+40
RPRLGONB EQU   ISTRPRE+32
RPRLGONF EQU   ISTRPRE+28
RPRHDTYP EQU   ISTRPRE+27
RPRTIOCT EQU   ISTRPRE+26
RPRPEPCT EQU   ISTRPRE+24
RPRRSV03 EQU   RPRCAUSE
RPRRSYNC EQU   RPRCAUSE
RPRNOSRT EQU   RPRCAUSE
RPRINTST EQU   RPRFLAGB
RPRVYIMM EQU   RPRFLAGB
RPRHLVPD EQU   RPRFLAGB
RPRVIODN EQU   RPRFLAGB
RPRAOPN  EQU   RPRFLAGB
RPRENTVT EQU   RPRFLAGB
RPRENTVH EQU   RPRFLAGB
RPRLIVE  EQU   RPRFLAGA
RPRVRYPD EQU   RPRFLAGA
RPRENTED EQU   RPRFLAGA
RPRENTIO EQU   RPRFLAGA
RPRENTBF EQU   RPRFLAGA
RPRTIED  EQU   RPRFLAGA
RPRINV   EQU   RPRFLAGA
RPRACT   EQU   RPRFLAGA
RPRPELEN EQU   ISTRPRE+18
RPRELEN  EQU   ISTRPRE+16
RPRRLOCK EQU   ISTRPRE+12
RPRSAF   EQU   RPRCOMID
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
LOKXCL   EQU   @NM00015
LOKPRY   EQU   @NM00015
@NM00016 EQU   @NM00015
@NM00014 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
NCSAPPAB EQU   NCSAPP+608
NCSAPDAT EQU   NCSAPBUE+8
NCSAPRU  EQU   NCSAPBUE+3
NCSRSV04 EQU   NCSAPBUE
NCSAPEND EQU   NCSAPP+84
NCSAPTXT EQU   NCSAPP+76
NCSAPECB EQU   NCSAPP+72
NCSAPSA  EQU   NCSAPP
NCSPLPDB EQU   NCSPLSID+5
NCSPLNID EQU   NCSPLPHD
NCSPLPO  EQU   NCSPLSTA
NCSRSVD4 EQU   NCSPLSTA
NCSRSVD2 EQU   NCSCRMOD
NCSPTMOD EQU   NCSCRMOD
NCSAIMOD EQU   NCSCRMOD
NCSRSVD1 EQU   NCSCHKPT+1
NCSPTUSE EQU   NCSCHKPT+1
NCSRNME  EQU   NCSCHKPT+1
NCSCUA   EQU   NCSCHKPT+1
NCSLGMOD EQU   NCSCHKPT
NCSLGAPL EQU   NCSCHKPT
NCSDTRLM EQU   NCSCHKPT
NCSESLM  EQU   NCSCHKPT
NCSNRPL  EQU   NCSCHKPT
NCSPOLD  EQU   NCSCHKPT
NCSPACTV EQU   NCSCHKPT
NCSACTV  EQU   NCSCHKPT
NCSPLRTY EQU   ISTNCSPL+263
NCSPLRH  EQU   ISTNCSPL+260
NCSUFMCB EQU   ISTNCSPL+256
NCSMGLPT EQU   ISTNCSPL+252
NCSCPWPT EQU   ISTNCSPL+248
NCSSENS2 EQU   NCSSENSE+2
NCSSNS2  EQU   NCSSENSE+1
NCSSNS1  EQU   NCSSENSE
NCSPLNSN EQU   ISTNCSPL+240
NCSPLMID EQU   ISTNCSPL+232
NCSPLPID EQU   ISTNCSPL+231
NCSPLGID EQU   ISTNCSPL+230
NCSPLSQN EQU   ISTNCSPL+228
NCSRNAME EQU   ISTNCSPL+220
NCSPLRRP EQU   ISTNCSPL+204
NCSPLWEL EQU   ISTNCSPL+200
NCSPLSPL EQU   ISTNCSPL+196
NCSPLP3  EQU   ISTNCSPL+192
NCSPLP2  EQU   ISTNCSPL+188
NCSPLP1  EQU   ISTNCSPL+184
@NM00013 EQU   NCSPLFL5
NCSFORCE EQU   NCSPLFL5
NCSSDLK  EQU   NCSPLFL5
NCSSCPPS EQU   NCSPLFL5
NCSDLRSN EQU   ISTNCSPL+180
NCSPL2AP EQU   NCSPLFL4
NCSDSPN  EQU   NCSPLFL4
NCSDSPI  EQU   NCSPLFL4
NCSDSPA  EQU   NCSPLFL4
NCSDSPE  EQU   NCSPLFL4
NCSPLVID EQU   NCSPLFL4
NCSPLRSO EQU   NCSPLFL4
NCSDLNID EQU   NCSPLFL4
NCSEND   EQU   NCSPLFL3
NCSFINAL EQU   NCSPLFL3
NCSANS   EQU   NCSPLFL3
NCSPID   EQU   NCSPLFL3
NCSGID   EQU   NCSPLFL3
NCSEPP   EQU   NCSPLFL3
NCSPLMOM EQU   NCSPLFL3
NCSPLVIT EQU   NCSPLFL2
NCSPLVIS EQU   NCSPLFL2
NCSREMPO EQU   NCSPLFL2
NCSPLDS  EQU   NCSPLFL2
NCSOUFMC EQU   NCSPLFL2
NCSPLRIO EQU   NCSPLFL2
NCSPLVDP EQU   NCSPLFL2
NCSPLPOS EQU   NCSPLFL1
NCSPL2CN EQU   NCSPLFL1
NCSPLAPU EQU   NCSPLFL1
NCSPLNON EQU   NCSPLFL1
NCSPLREQ EQU   NCSPLFL1
NCSPLEBN EQU   NCSPLFL1
NCSPLSOM EQU   NCSPLFL1
NCSPL2IN EQU   NCSPLFL1
NCSPLRCR EQU   ISTNCSPL+172
NCSPLECB EQU   ISTNCSPL+164
NCSPLRCD EQU   NCSPLRAD+1
NCSLSCMD EQU   NCSPLRAD
NCSPLWRF EQU   ISTNCSPL+72
NCSPLWRE EQU   ISTNCSPL+68
NCSSTCMD EQU   NCSCRFLG
NCSUSRNF EQU   NCSCRFLG
NCSOPRQU EQU   NCSCRFLG
NCSCRDSE EQU   NCSCRFLG
NCSFMERP EQU   NCSCRFLG
NCSFMCLD EQU   NCSCRFLG
NCSPLCLD EQU   NCSCRFLG
NCSPLWRM EQU   NCSCRFLG
NCSPLUAD EQU   ISTNCSPL+64
NCSMSGSP EQU   ISTNCSPL+63
NCSNCPEP EQU   ISTNCSPL+62
NCSCMDB  EQU   NCSPLCMD+1
@NM00012 EQU   NCSCMDA
NCSPLUFM EQU   NCSCMDA
NCSPLFLO EQU   NCSCMDA
NCSPLSYN EQU   NCSCMDA
NCSPLCTL EQU   NCSCMDA
NCSPLSYS EQU   NCSCMDA
NCSPLLPT EQU   ISTNCSPL+56
NCSCRPID EQU   ISTNCSPL+51
NCSDLID  EQU   ISTNCSPL+44
NCSPLLID EQU   ISTNCSPL+36
NCSPLRID EQU   ISTNCSPL+28
NCSRRNPT EQU   ISTNCSPL+24
NCSPRMRC EQU   ISTNCSPL+22
NCSOVFMC EQU   NCSPLVF1
NCSRSV02 EQU   NCSPLVFL
NCSDACLK EQU   NCSPLVFL
NCSABCON EQU   NCSPLVFL
NCSDCONT EQU   NCSPLVFL
NCSVSTAT EQU   NCSPLVFL
NCSVNCSA EQU   NCSPLVFL
NCSVBF15 EQU   NCSPLVBF+1
NCSVBF14 EQU   NCSPLVBF+1
NCSVBF13 EQU   NCSPLVBF+1
NCSVBF12 EQU   NCSPLVBF+1
NCSVBF11 EQU   NCSPLVBF+1
NCSVBF10 EQU   NCSPLVBF+1
NCSVBF09 EQU   NCSPLVBF+1
NCSVBF08 EQU   NCSPLVBF
NCSVBF07 EQU   NCSPLVBF
NCSVBF06 EQU   NCSPLVBF
NCSVBF05 EQU   NCSPLVBF
NCSVBF04 EQU   NCSPLVBF
NCSVBF03 EQU   NCSPLVBF
NCSVBF02 EQU   NCSPLVBF
NCSVBF01 EQU   NCSPLVBF
@NM00011 EQU   ISTNCSPL+16
NCSCRWKA EQU   NCSPFX+12
@NM00010 EQU   NCSPFX
PFXBCK   EQU   ISTPFX+12
PFXFWD   EQU   ISTPFX+8
PFXLNG   EQU   ISTPFX+5
PFXPRTY  EQU   ISTPFX+4
PFXCBID  EQU   PFXID
POHID    EQU   ISTPOHD+2
POHGEN   EQU   POHSTAT
POHRREQ  EQU   POHSTAT
POHRSVD2 EQU   POHSTAT
POHCNTRL EQU   POHSTAT
POHLBL   EQU   POHSTAT
POHDATA  EQU   POHSTAT
POHEND   EQU   POHSTAT
POHRSVD1 EQU   ISTPOHD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00129 EQU   @RC00126
@RT00262 EQU   @RC00258
@PB00002 EQU   @PB00003
@RC00130 EQU   @RC00129
@RC00132 EQU   @RC00130
@ENDDATA EQU   *
         END   ISTINCV2,(C'PLS1912',0603,78012)
