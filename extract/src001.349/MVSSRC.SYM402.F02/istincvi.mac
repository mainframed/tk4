SVTM     TITLE 'ISTINCVI SSCP VARY INACTIVATE PROCESSOR                *
                        '
ISTINCVI CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTINCVI  78.110'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  LA    @11,4095(,@10)                                      0001
         LA    @12,4095(,@11)                                      0001
         USING @PSTART,@10                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@12                                    0001
*CVINCSPL=CVINPUT;                                                 0732
         LR    CVINCSPL,CVINPUT                                    0732
*  DO;                                                             0733
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(SUB)RPHADD((NCSPLRPH))  *
**/                                                                0734
*                                                                  0734
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTVYCRR)  */                  0734
*  RFY ISTZSAVE;                                                   0734
*  RFY ISTCFCRR;                                                   0735
*  RFY ISTZCRR ;                                                   0736
*  RFY ISTASCRR;                                                   0737
*  RFY ISTAPCRR;                                                   0738
*  RFY ISTCRA  ;                                                   0739
*/* END OF ATBUILD */                                              0740
*  /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                    0740
*NCSPLRPH->RPHCRR->CRACRR->NINCVI = '1'B;                          0740
         L     @09,NCSPLRPH(,CVINCSPL)                             0740
         L     @09,RPHCRR(,@09)                                    0740
         L     @09,CRACRR(,@09)                                    0740
         OI    NINCVI(@09),B'00000100'                             0740
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   0741
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0741
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      0741
         MVI   VYCCRT(@09),B'00000000'                             0741
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          0742
         OI    CINCVI(@09),B'00000100'                             0742
*  END;                                                            0743
*GEN REFS(CVIWKA);                                                 0744
 USING @DATD,CVIWKA
*  /*SEGMENT(CVIHKEP)REQUEST*/DO;GOTO CVIHKEP;CVIHKEP#:END;        0745
         B     CVIHKEP                                             0746
CVIHKEP# DS    0H                                                  0748
*/********************************************************************/
*/* ELSE SYNTAX CHECK THE NEW VARY DEACTIVATE REQUEST BY INVOKING    */
*/* CVISYTX TO VALIDATE THE REQUEST AS REFLECTED IN THE NCSPL.       */
*/********************************************************************/
* NCSPLRAD=NCSPLRPT;                                               0748
         L     @09,NCSPLRPT(,CVINCSPL)                             0748
         ST    @09,NCSPLRAD(,CVINCSPL)                             0748
* CVIWKPT1=NCSPLRPT;                                               0749
         ST    @09,CVIWKPT1                                        0749
* RFY (ISTRPRE,ISTRRN,ISTRLN,ISTRTR,ISTRPT,ISTRCC,ISTRDT)          0750
*  BASED(CVIWKPT1);                                        /*@D32CKLV*/
* RFY ISTDEVCH BASED(ADDR(RPRDEVCH));                              0751
*/*------------------------------------------------------------------*/
*/* IF NCSPL2IN FLAG IS ON THEN CVI2IN SEGMENT IS GIVEN CONTROL      */
*/*------------------------------------------------------------------*/
* IF NCSPL2IN = '1'B                                               0752
*   THEN DO;                                               /*@D31JKLV*/
         TM    NCSPL2IN(CVINCSPL),B'10000000'                      0752
         BNO   @RF00752                                            0752
*      /*SEGMENT(CVI2IN)REQUEST*/DO;GOTO CVI2IN;CVI2IN#:END;       0754
         B     CVI2IN                                              0755
CVI2IN#  DS    0H                                                  0757
*               /*@D31JKLV*/                                       0757
*    F2IN = '1'B;                   /* NCSPL2IN WAS ON       @D31JKLV*/
         OI    F2IN,B'00000100'                                    0757
*    CVIGO = '0'B;                                         /*@D31JKLV*/
         NI    CVIGO,B'01111111'                                   0758
*   END;                                                   /*@D31JKLV*/
*   ELSE;                                                  /*@DC36143*/
@RF00752 DS    0H                                                  0761
* IF F2IN = '0'B                                                   0761
*   THEN DO;                                               /*@D31JKLV*/
         TM    F2IN,B'00000100'                                    0761
         BNZ   @RF00761                                            0761
*      /*SEGMENT(CVISYTX)REQUEST*/DO;GOTO CVISYTX;CVISYTX#:END;    0763
         B     CVISYTX                                             0764
CVISYTX# DS    0H                                                  0766
*                  /*@D31JKLV*/                                    0766
*   END;                                                   /*@D31JKLV*/
*   ELSE;                                                  /*@D31JKLV*/
@RF00761 DS    0H                                                  0768
*/********************************************************************/
*/* IF CVIGO IS SET, INDICATING A SUCCESSFUL SYNTAX CHECK, THEN IF   */
*/* THE VARY REQUEST IS AGAINST AN RN, PU OR LU CALL                 */
*/* ISTINCVX TO SCHEDULE SUBNODE TERMINATION                         */
*/********************************************************************/
* IF CVIGO^='1'B                                                   0768
*   THEN;                                                          0768
         TM    CVIGO,B'10000000'                                   0768
         BNO   @RT00768                                            0768
*   ELSE                                                           0770
*     DO;                                                          0770
*   IF RPRENTRY^=RPRENTAH & (RPRENTRY^=RPRENTLN × RLNRATRN^='1'B)  0771
*   /* TOLTEP                                                @D32CKLV*/
*     THEN                                                         0771
         L     @09,CVIWKPT1                                        0771
         CLI   RPRENTRY(@09),X'02'                                 0771
         BE    @RF00771                                            0771
         CLI   RPRENTRY(@09),X'50'                                 0771
         BNE   @RT00771                                            0771
         TM    RLNRATRN(@09),B'00000010'                           0771
         BO    @RF00771                                            0771
@RT00771 DS    0H                                                  0772
*       DO;                                                        0772
*       CVINPUT=CVINCSPL;                                          0773
         LR    CVINPUT,CVINCSPL                                    0773
*       CALL ISTINCVX;                                             0774
*                                                                  0774
         L     @15,@CV05643                                        0774
         BALR  @14,@15                                             0774
*         DO;                                                      0775
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                0776
*         /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/            0776
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0776
         L     @09,NCSPLRPH(,CVINCSPL)                             0776
         L     @09,RPHCRR(,@09)                                    0776
         L     @09,CRACRR(,@09)                                    0776
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      0776
         MVI   VYCCRT(@09),B'00000000'                             0776
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          0777
         OI    CINCVI(@09),B'00000100'                             0777
*         END;                                                     0778
*       IF NCSVDEL='1'B                                            0779
*         THEN CVIQUIT='1'B;                                       0779
         TM    NCSVDEL(CVINCSPL),B'01000000'                       0779
         BNO   @RF00779                                            0779
         OI    CVIQUIT,B'00000100'                                 0780
*         ELSE IF (RPRENTRY = RPRENTRN  ×                          0781
*                 RPRENTRY=RPRENTLS ×                              0781
*                 RPRENTRY=RPRENTSW) &                             0781
*                 RDTVYRPH ^= 0                                    0781
*                THEN DO;                                  /*@D31JKLV*/
         B     @RC00779                                            0781
@RF00779 L     @09,CVIWKPT1                                        0781
         CLI   RPRENTRY(@09),X'01'                                 0781
         BE    @GL00003                                            0781
         CLI   RPRENTRY(@09),X'05'                                 0781
         BE    @GL00003                                            0781
         CLI   RPRENTRY(@09),X'04'                                 0781
         BNE   @RF00781                                            0781
@GL00003 L     @09,CVIWKPT1                                        0781
         L     @09,RDTVYRPH(,@09)                                  0781
         LTR   @09,@09                                             0781
         BZ    @RF00781                                            0781
*                CALL CVIINCX0; /* CALL CX0 FOR SDLC LINK   @ZD13819 */
         BAL   @14,CVIINCX0                                        0783
*                 CVIQUIT = '1'B;                         /*@D32CKLV*/
         OI    CVIQUIT,B'00000100'                                 0784
*                 IF NCSVBF12='1'B & /* IS VARY DEACT FOLLOWED BY A */
*                  NCSPLRPT->RPRVYIMM='0'B /* VARY DEACT IMM ? */  0785
*                  THEN;                                           0785
         TM    NCSVBF12(CVINCSPL),B'00010000'                      0785
         BNO   @RF00785                                            0785
         L     @09,NCSPLRPT(,CVINCSPL)                             0785
         TM    RPRVYIMM(@09),B'00000010'                           0785
         BZ    @RT00785                                            0785
*                  ELSE DO;                                /*@D32CKLV*/
@RF00785 DS    0H                                                  0788
*                   IF RPRENTRY=RPRENTLS ×                         0788
*                      RPRENTRY=RPRENTSW                           0788
*                   THEN;                                          0788
         L     @09,CVIWKPT1                                        0788
         CLI   RPRENTRY(@09),X'05'                                 0788
         BE    @RT00788                                            0788
         CLI   RPRENTRY(@09),X'04'                                 0788
         BE    @RT00788                                            0788
*                   ELSE DO;                                       0790
*                   CVIMSG1=CVIVARY;                       /*@D32CKLV*/
         MVC   CVIMSG1(8),@CC05605                                 0791
*                   CVIMSG2=NCSPLRID;                      /*@D32CKLV*/
         MVC   CVIMSG2(8),NCSPLRID(CVINCSPL)                       0792
*                   CVIMSG# = '073I';                      /*@D32CKLV*/
         MVC   CVIMSG#(4),@CC05645                                 0793
*                   CALL CVIWTO3;                          /*@D32CKLV*/
         BAL   @14,CVIWTO3                                         0794
*                   END;                                           0795
*                  END;                                    /*@D32CKLV*/
*                END;                                      /*@D31JKLV*/
*                ELSE                                              0798
*           IF NCSREMPO='1'B                                       0798
*             THEN RRNREMPO='1'B;                                  0798
         B     @RC00781                                            0798
@RF00781 TM    NCSREMPO(CVINCSPL),B'00000100'                      0798
         BNO   @RF00798                                            0798
         L     @09,CVIWKPT1                                        0799
         OI    RRNREMPO(@09),B'00000010'                           0799
*             ELSE IF NCSFINAL='1'B                                0800
*              THEN RCCFINAL='1'B;                         /*@D32CKLV*/
         B     @RC00798                                            0800
@RF00798 TM    NCSFINAL(CVINCSPL),B'00000010'                      0800
         BNO   @RF00800                                            0800
         L     @09,CVIWKPT1                                        0801
         OI    RCCFINAL(@09),B'00001000'                           0801
*              ELSE;                                       /*@D32CKLV*/
@RF00800 DS    0H                                                  0803
*       END;                                                       0803
*     ELSE;                                                        0804
@RF00771 DS    0H                                                  0805
*    IF CVIQUIT='1'B                                               0805
*      THEN;                                                       0805
@RC00771 TM    CVIQUIT,B'00000100'                                 0805
         BO    @RT00805                                            0805
*      ELSE                                                        0807
*        DO;                                                       0807
*/********************************************************************/
*/* IF THE VARY REQUEST IS AGAINST AN APPLICATION HEADER, INVOKE     */
*/* APPLICATION SEGMENT PROCESSING (CVIAPPL).                        */
*/* IF THE VARY IS AGAINST A SDLC LINK, INVOKE SDCL SEGMENT          */
*/* PROCESSING (CVISDLC)                                             */
*/********************************************************************/
*      CVIGO='0'B;                                                 0808
         NI    CVIGO,B'01111111'                                   0808
*      IF RPRENTRY=RPRENTAH                                        0809
*      THEN                                                        0809
         L     @09,CVIWKPT1                                        0809
         CLI   RPRENTRY(@09),X'02'                                 0809
         BNE   @RF00809                                            0809
*         DO;                                                      0810
*           /*SEGMENT(CVIAPPL)REQUEST*/DO;GOTO CVIAPPL;CVIAPPL#:END;
         B     CVIAPPL                                             0812
CVIAPPL# DS    0H                                                  0814
*         END;                                                     0814
*      ELSE IF RPRENTRY=RPRENTLN & RLNRATRN='1'B /* SDLC ?   @D32CKLV*/
*        THEN DO;                                          /*@D32CKLV*/
         B     @RC00809                                            0815
@RF00809 L     @09,CVIWKPT1                                        0815
         CLI   RPRENTRY(@09),X'50'                                 0815
         BNE   @RF00815                                            0815
         TM    RLNRATRN(@09),B'00000010'                           0815
         BNO   @RF00815                                            0815
*          /*SEGMENT(CVISDLC)REQUEST*/DO;GOTO CVISDLC;CVISDLC#:END;
         B     CVISDLC                                             0818
CVISDLC# DS    0H                                                  0820
*                         /*@D32CKLV*/                             0820
*        END;                                              /*@D32CKLV*/
*    ELSE DO;                                                      0821
         B     @RC00815                                            0821
@RF00815 DS    0H                                                  0822
*/********************************************************************/
*/* ELSE IF REQUEST IS NOT AGAINST AN APPLICATION HEADER,            */
*/* SDLC LINK, CHECK FOR                                             */
*/* PENDING VARY DEACTIVATE REQUESTS AGAINST THE SAME NODE (CVICKPND)*/
*/* AS SPECIFIED IN COMMAND.                                         */
*/* IF THE RETURN CODE FROM CVICKPND IS ZERO, THEN CONTINUE          */
*/* PROCESSING THE CURRENT COMMAND.                                  */
*/********************************************************************/
*      /*SEGMENT(CVICKPN)REQUEST*/DO;GOTO CVICKPN;CVICKPN#:END;    0822
         B     CVICKPN                                             0823
CVICKPN# DS    0H                                                  0825
*    IF CVIRC=0                     /* CONTINUE?             @XM97000*/
*     THEN DO;                                                     0825
         L     @09,CVIRC                                           0825
         LTR   @09,@09                                             0825
         BNZ   @RF00825                                            0825
*/********************************************************************/
*/* IF COMMAND IS IMMEDIATE OR ERP REQUEST,THEN INVOKE VARY IMMEDIATE*/
*/* PROCESSING (CVIMMM).                                             */
*/* UNLESS 'PURGE ONLY' SWITCH (CVIPGSW) OR 'QUIT' SWITCH (CVIQUIT)  */
*/* SET BY CVIIMM, SET CVIGO TO CONTINUE PROCESSING THE COMMAND.     */
*/* IF COMMAND IS MODIFY, QUIESCE THE RN.  IF THE QUIT SWITCH IS NOT */
*/* SET AFTER QUIESECE, INVOKE VARY IMMEDIATE PROCESSING.            */
*/********************************************************************/
*      IF RPRENTRY=RPRENTLS ×                                      0827
*         RPRENTRY=RPRENTSW          /* FOR LOCAL OR SWITCH SUBAREA */
*        THEN DO;                    /* CALL INCVP TO PROCESS */   0827
         L     @09,CVIWKPT1                                        0827
         CLI   RPRENTRY(@09),X'05'                                 0827
         BE    @RT00827                                            0827
         CLI   RPRENTRY(@09),X'04'                                 0827
         BNE   @RF00827                                            0827
@RT00827 DS    0H                                                  0828
*          IF NCSVBF12='1'B                 /* CMD AGAINST IMM Z3841*/
*           THEN RPRVYIMM='1'B;    /* SET DEACT IMM ON          Z3841*/
         TM    NCSVBF12(CVINCSPL),B'00010000'                      0829
         BNO   @RF00829                                            0829
         L     @09,CVIWKPT1                                        0830
         OI    RPRVYIMM(@09),B'00000010'                           0830
*           ELSE;                  /* ELSE NO-OP                Z3841*/
@RF00829 DS    0H                                                  0832
*          RPRVRYPD='1'B;            /* VARY PENDING         @D32CKLV*/
         L     @09,CVIWKPT1                                        0832
         OI    RPRVRYPD(@09),B'00000010'                           0832
*          RPRPEPCT=1;               /* V.PENDING COUNT=1    @D32CKLV*/
         MVC   RPRPEPCT(2,@09),@CH00096                            0833
*          CVINPUT=CVINCSPL;                               /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    0834
*          CALL ISTINCVP;                                  /*@D32CKLV*/
*                                                                  0835
         L     @15,@CV05656                                        0835
         BALR  @14,@15                                             0835
*            DO;                                                   0836
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                0837
*            /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/         0837
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          0837
         L     @09,NCSPLRPH(,CVINCSPL)                             0837
         L     @09,RPHCRR(,@09)                                    0837
         L     @09,CRACRR(,@09)                                    0837
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      0837
         MVI   VYCCRT(@09),B'00000000'                             0837
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          0838
         OI    CINCVI(@09),B'00000100'                             0838
*            END;                  /*@D32CKLV*/                    0839
*          CVIGO='0'B;               /* NO MORE PROC         @D32CKLV*/
*          CVIVRYPD='1'B;                                  /*@D32CKLV*/
         OI    CVIVRYPD,B'01000000'                                0841
         NI    CVIGO,B'01111111'                                   0841
*        END;                                              /*@D32CKLV*/
*        ELSE DO;                                          /*@D32CKLV*/
         B     @RC00827                                            0843
@RF00827 DS    0H                                                  0844
*      IF NCSVBF12='1'B                                            0844
*       THEN DO;                                                   0844
         TM    NCSVBF12(CVINCSPL),B'00010000'                      0844
         BNO   @RF00844                                            0844
*            CALL CVIIMM;                                          0846
         BAL   @14,CVIIMM                                          0846
*            IF CVIPGSW='1'B × CVIQUIT='1'B                        0847
*              THEN;                                               0847
         TM    CVIPGSW,B'00010100'                                 0847
         BNZ   @RT00847                                            0847
*              ELSE CVIGO='1'B;                                    0849
         OI    CVIGO,B'10000000'                                   0849
*            END;                                                  0850
*        ELSE                                                      0851
*        IF NCSPLVCD=NCSPLVC2                                      0851
*         THEN                                                     0851
         B     @RC00844                                            0851
@RF00844 CLI   NCSPLVCD(CVINCSPL),X'02'                            0851
         BNE   @RF00851                                            0851
*          DO;                                                     0852
*            /*SEGMENT(CVIQUIS)REQUEST*/DO;GOTO CVIQUIS;CVIQUIS#:END;
         B     CVIQUIS                                             0854
CVIQUIS# DS    0H                                                  0856
*          IF CVIQUIT='1'B                                         0856
*           THEN;                                                  0856
         TM    CVIQUIT,B'00000100'                                 0856
         BO    @RT00856                                            0856
*           ELSE DO;                                               0858
*                CALL CVIIMM;                                      0859
         BAL   @14,CVIIMM                                          0859
*                IF CVIQUIT='1'B × CVIPGSW='1'B                    0860
*                 THEN;                                            0860
         TM    CVIQUIT,B'00010100'                                 0860
         BNZ   @RT00860                                            0860
*                 ELSE CVIGO='1'B;                                 0862
         OI    CVIGO,B'10000000'                                   0862
*                END;                                              0863
*          END;                                                    0864
*         ELSE CVIGO='1'B;                                         0865
         B     @RC00851                                            0865
@RF00851 OI    CVIGO,B'10000000'                                   0865
*        END;                        /* END RPRENTRY^=RPRENTLS ×SW */
@RC00851 DS    0H                                                  0866
@RC00844 DS    0H                                                  0867
*      CALL CVI001;                                        /*@D31JKLV*/
@RC00827 BAL   @14,CVI001                                          0867
*     END;                                                 /*@D31JKLV*/
*    ELSE;         /* CVIRTNCD^=0 FROM CVICKPN               @D31JKLV*/
@RF00825 DS    0H                                                  0870
*    CALL CVI002;                                          /*@D31JKLV*/
         BAL   @14,CVI002                                          0870
*   END;       /* END CODE FOR AN RDT NOT AN AP HEAD         @D31JKLV*/
*  END;                                                    /*@D31JKLV*/
@RC00815 DS    0H                                                  0872
@RC00809 DS    0H                                                  0873
* END;                                                     /*@D31JKLV*/
@RT00805 DS    0H                                                  0874
*/********************************************************************/
*/* IF NEITHER 'QUIT' SWITCH NOR INTERNAL 'VARY PENDING' SWITCH SET  */
*/* THEN ISSUE MESSAGE INDICATED IN CVIMSG#.                 @D31JKLV*/
*/********************************************************************/
*IF NCSPLNON='0'B & CVIWKPT1->RPRHDTYP=RPRENTSW & NCSPLRSO='1'B    0874
* THEN;              /* AND RESET ONLY IS ON NO MSG AS40824 ZD13767 */
@RT00768 TM    NCSPLNON(CVINCSPL),B'00001000'                      0874
         BNZ   @RF00874                                            0874
         L     @09,CVIWKPT1                                        0874
         CLI   RPRHDTYP(@09),X'04'                                 0874
         BNE   @RF00874                                            0874
         TM    NCSPLRSO(CVINCSPL),B'01000000'                      0874
         BO    @RT00874                                            0874
* ELSE DO;                                                 /* ZD13767*/
@RF00874 DS    0H                                                  0877
* IF CVIQUIT='0'B & CVIVRYPD='0'B & NCSPLSOM='0'B & F2IN='0'B      0877
*   THEN IF CVIMSG#=CVI600I                                        0877
         TM    CVIQUIT,B'01000100'                                 0877
         BNZ   @RF00877                                            0877
         TM    NCSPLSOM(CVINCSPL),B'01000000'                      0877
         BNZ   @RF00877                                            0877
         TM    F2IN,B'00000100'                                    0877
         BNZ   @RF00877                                            0877
*       THEN CALL CVIWTO3;                                 /*@D31JKLV*/
         CLC   CVIMSG#(4),@CC05610                                 0878
         BNE   @RF00878                                            0878
         BAL   @14,CVIWTO3                                         0879
*       ELSE CALL CVIWTO;                                  /*@D31JKLV*/
         B     @RC00878                                            0880
@RF00878 BAL   @14,CVIWTO                                          0880
*   ELSE;                                                  /*@D31JKLV*/
@RF00877 DS    0H                                                  0882
* END;                                                     /* ZD13767*/
@RC00877 DS    0H                                                  0883
*/********************************************************************/
*/* RESTORE NEXT AVAILABLE POINTER IN THE NCSPL WORK AREA BEFORE     */
*/* RESTORING REGISTERS AND RETURNING TO CALLER.             @D31JKLV*/
*/********************************************************************/
*NCSVDEL='1'B;                                             /*@D31JKLV*/
@RT00874 OI    NCSVDEL(CVINCSPL),B'01000000'                       0883
*NCSPLWKA->CVINXTAV=CVIWKA;                                /*@D31JKLV*/
         L     @09,NCSPLWKA(,CVINCSPL)                             0884
         ST    CVIWKA,CVINXTAV(,@09)                               0884
*RETURN;                                                   /*@D31JKLV*/
@EL00001 L     @13,4(,@13)                                         0885
@EF00001 DS    0H                                                  0885
@ER00001 LM    @14,@12,12(@13)                                     0885
         BR    @14                                                 0885
*GEN( EJECT);                                              /*@D31JKLV*/
          EJECT
*CVI001: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);           /*@D31JKLV*/
         B     @PB00002                                            0887
CVI001   DS    0H                                                  0888
*/*------------------------------------------------------------------*/
*/* IF CVIGO IS SET TO CONTINUE PROCESSING THEN INITIALIZE CVIWKPT2  */
*/* TO THE ADDRESS OF THE FIRST RDT ENTRY TO PROCESS FOR THE VARY    */
*/* REQUEST (INVOKE SETWKPT2).                                       */
*/* OBTAIN THE OPEN/CLOSE/VARY LOCK BEFORE LOOPING TO PROCESS ALL    */
*/* RDT ENTRIES AFFECTED BY THE VARY DEACTIVATE REQUEST.             */
*/********************************************************************/
*CVISAVE4 = CVIRTNAD;                                      /*@D31JKLV*/
         ST    CVIRTNAD,CVISAVE4                                   0888
*      IF CVIGO='1'B                                               0889
*       THEN DO;                                                   0889
         TM    CVIGO,B'10000000'                                   0889
         BNO   @RF00889                                            0889
*        CVIGO='0'B;                                               0891
         NI    CVIGO,B'01111111'                                   0891
*          /*SEGMENT(SETWKP2)REQUEST*/DO;GOTO SETWKP2;SETWKP2#:END;
         B     SETWKP2                                             0893
SETWKP2# DS    0H                                                  0895
*        CVINPUT=4;                                                0895
         LA    CVINPUT,4                                           0895
*        CALL CVILOC;                                              0896
         BAL   @14,CVILOC                                          0896
*        CVILOOP='0'B;                                             0897
         NI    CVILOOP,B'11011111'                                 0897
*        DO WHILE(CVILOOP='0'B);                                   0898
         B     @DE00898                                            0898
@DL00898 DS    0H                                                  0899
*/********************************************************************/
*/* CONTINUE LOOPING TO DO VARY DEACTIVATE NORMAL (CVINORM) AND      */
*/* CVIWKPT2 UPDATING UNTIL THE QUIT SWITCH HAS BEEN SET DUE TO ERROR*/
*/* OR THE LOOP ESCAPE HAS BEEN SET INDICATING ALL RDT ENTRIES FOR   */
*/* THE COMMAND HAVE BEEN PROCESSED.                                 */
*/********************************************************************/
*         IF CVIQUIT='0'B                                          0899
*          THEN DO;                                                0899
         TM    CVIQUIT,B'00000100'                                 0899
         BNZ   @RF00899                                            0899
*                 /*SEGMENT(CVINORM)REQUEST*/DO;GOTO CVINORM;CVINORM#:E
*D;                                                                0901
         B     CVINORM                                             0902
CVINORM# DS    0H                                                  0904
*                 /*SEGMENT(NXTWKP2)REQUEST*/DO;GOTO NXTWKP2;NXTWKP2#:E
*D;                                                                0904
         B     NXTWKP2                                             0905
NXTWKP2# DS    0H                                                  0907
*               END;                                               0907
*          ELSE CVILOOP='1'B;                                      0908
         B     @RC00899                                            0908
@RF00899 OI    CVILOOP,B'00100000'                                 0908
*        END;                                                      0909
@RC00899 DS    0H                                                  0909
@DE00898 TM    CVILOOP,B'00100000'                                 0909
         BZ    @DL00898                                            0909
*       IF NCSPLNON='1'B                                   /*@D31JKLV*/
*         THEN;                                            /*@D31JKLV*/
         TM    NCSPLNON(CVINCSPL),B'00001000'                      0910
         BO    @RT00910                                            0910
*         ELSE DO;                                         /*@D31JKLV*/
*          CVINPUT=4;                                              0913
         LA    CVINPUT,4                                           0913
*          CALL CVIUNLOC;                                          0914
         BAL   @14,CVIUNLOC                                        0914
*         END;                                                     0915
*       END;                                                       0916
*      ELSE;                                                       0917
@RF00889 DS    0H                                                  0918
*CVIRTNAD = CVISAVE4;                                      /*@D31JKLV*/
@RC00889 L     CVIRTNAD,CVISAVE4                                   0918
*END CVI001;                                               /*@D31JKLV*/
@EL00002 DS    0H                                                  0919
@EF00002 DS    0H                                                  0919
@ER00002 BR    @14                                                 0919
@PB00002 DS    0H                                                  0920
*GEN (EJECT);                                              /*@D31JKLV*/
         EJECT
*CVI002: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);           /*@D31JKLV*/
         B     @PB00003                                            0921
CVI002   DS    0H                                                  0922
*/********************************************************************/
*/* IF QUIT SWITCH HAS BEEN SET, THEN RESET THE INTERNAL 'VARY       */
*/* PENDING FLAG, SET THE NCSPL DELETE FLAG, AND SET UP TO ISSUE     */
*/* ERROR MESSAGE.                                                   */
*/********************************************************************/
*CVISAVE4 = CVIRTNAD;                                      /*@D31JKLV*/
         ST    CVIRTNAD,CVISAVE4                                   0922
*    IF CVIQUIT='1'B                                               0923
*     THEN DO;                                                     0923
         TM    CVIQUIT,B'00000100'                                 0923
         BNO   @RF00923                                            0923
*          CVIVRYPD='0'B;                                          0925
         NI    CVIVRYPD,B'10111111'                                0925
*          IF CVIMSG# = '073I' × CVIMSG#='163I'                    0926
*                         /* ALREADY PENDING OR VARY FAILED */     0926
*             THEN;                                                0926
         CLC   CVIMSG#(4),@CC05645                                 0926
         BE    @RT00926                                            0926
         CLC   CVIMSG#(4),@CC05681                                 0926
         BE    @RT00926                                            0926
*             ELSE DO;                                             0928
*                  CVIMSG# = '152I';                               0929
         MVC   CVIMSG#(4),@CC05682                                 0929
*                  CVIQUIT='0'B;                                   0930
         NI    CVIQUIT,B'11111011'                                 0930
*                  END;                                            0931
*         END;                                                     0932
*/********************************************************************/
*/* ELSE QUIT SWITCH NOT SET, SO IF VARY NOT LEFT PENDING AND HEADER */
*/* PROCESSING NOT YET DONE, THEN DO RDT SEGMENT HEADER PROCESSING   */
*/* BY INVOKING CVIHEADP. SET UP TO ISSUE 'OFFLINE' MESSAGE AND      */
*/* SET 'DELETE' FLAG IN NCSPL.                                      */
*/********************************************************************/
*     ELSE                                                         0933
*     IF CVIVRYPD='0'B                                             0933
*      THEN                                                        0933
         B     @RC00923                                            0933
@RF00923 TM    CVIVRYPD,B'01000000'                                0933
         BNZ   @RF00933                                            0933
*        DO;                                                       0934
*        IF CVISKPHD='1'B                                          0935
*          THEN;                                                   0935
         TM    CVISKPHD,B'00001000'                                0935
         BO    @RT00935                                            0935
*          ELSE CALL CVIHEADP;                                     0937
         BAL   @14,CVIHEADP                                        0937
*        IF CVIPGSW='1'B                                           0938
*          THEN CVIVRYPD='1'B;                                     0938
@RT00935 TM    CVIPGSW,B'00010000'                                 0938
         BNO   @RF00938                                            0938
         OI    CVIVRYPD,B'01000000'                                0939
*          ELSE;                                                   0940
@RF00938 DS    0H                                                  0941
*        CVIMSG# = '105I';                                         0941
         MVC   CVIMSG#(4),@CC05684                                 0941
*        END;                                                      0942
*     ELSE;                                                        0943
@RF00933 DS    0H                                                  0944
*CVIRTNAD = CVISAVE4;                                      /*@D31JKLV*/
@RC00923 L     CVIRTNAD,CVISAVE4                                   0944
*END CVI002;                                               /*@D31JKLV*/
@EL00003 DS    0H                                                  0945
@EF00003 DS    0H                                                  0945
@ER00003 BR    @14                                                 0945
@PB00003 DS    0H                                                  0946
* GEN(  EJECT);                                                    0946
           EJECT
*  /*SEGMENT(CVIHKEP)START*/DO;GOTO CVIHKEP@;CVIHKEP:END;          0947
         B     CVIHKEP@                                            0948
CVIHKEP  DS    0H                                                  0950
*/********************************************************************/
*/* PERFORM INITIAL HOUSEKEEPING FOR ISTINCVI                        */
*/* PERFORM STANDARD SAVE AREA CHAINING,USING THE NEXT AVAILABLE SAVE*/
*/* AREA AT THE END OF THE NCSPL WORK AREA AS THE SAVE AREA FOR      */
*/* ISTINCVI.                                                        */
*/********************************************************************/
*RFY CVIWORKR RSTD;                                                0950
*CVIWORKR=CVISAVE;                                                 0951
         LR    CVIWORKR,CVISAVE                                    0951
*CVISAVE=CVISAVE-LENGTH(CVISVMAP);                                 0952
         SL    CVISAVE,@CF03142                                    0952
*CVIWORKR->CVIFWPTR=CVISAVE;                                       0953
         ST    CVISAVE,CVIFWPTR(,CVIWORKR)                         0953
*CVISAVE->CVIBKPTR=CVIWORKR;                                       0954
         ST    CVIWORKR,CVIBKPTR(,CVISAVE)                         0954
*RFY CVIWORKR UNRSTD;                                              0955
*CVISAVE->CVIFWPTR=0;                                              0956
         SLR   @09,@09                                             0956
         ST    @09,CVIFWPTR(,CVISAVE)                              0956
*/********************************************************************/
*/* SET UP BASE FOR WORK AREA (CVIWKA) AT NEXT AVAILABLE SPACE IN    */
*/* NCSPL WORK AREA, CLEAR THE WORK AREA TO ZERO (RESETTING ALL      */
*/* INTERNAL SWITCHES AND POINTERS), AND ESTABLISH A BASE FOR ANY    */
*/* COMPILER GENERATED DYNAMIC AREA (FOLLOWS ISTINCVI WORK AREA)     */
*/* FINALLY, UPDATE THE 'NEXT AVAILABLE POINTER' IN THE NCSPL WORK   */
*/* AREA TO POINT TO THE AVAILABLE SPACE FOLLOWING THE ISTINCVI      */
*/* WORK AREA.                                                       */
*/********************************************************************/
*CVIWKA=NCSPLWKA->CVINXTAV;                                        0957
         L     @09,NCSPLWKA(,CVINCSPL)                             0957
         L     CVIWKA,CVINXTAV(,@09)                               0957
*CVIWKMP0='00'X;                                                   0958
         XC    CVIWKMP0+1(195),CVIWKMP0+1                          0958
         MVI   CVIWKMP0,X'00'                                      0958
*CVINXTAV=CVIWKA+@SIZDATD;                                         0959
         LR    @07,CVIWKA                                          0959
         AL    @07,@SIZDATD                                        0959
         ST    @07,CVINXTAV(,@09)                                  0959
*CVINXTAV=CVINXTAV+(CVI8-(CVINXTAV//CVI8));                        0960
         LR    @02,@07                                             0960
         SRDA  @02,32                                              0960
         D     @02,@CF00094                                        0960
         LCR   @02,@02                                             0960
         AL    @02,@CF00094                                        0960
         ALR   @07,@02                                             0960
         ST    @07,CVINXTAV(,@09)                                  0960
*  /*SEGMENT(CVIHKEP)FINISH*/DO;GOTO CVIHKEP#;CVIHKEP@:END;        0961
         B     CVIHKEP#                                            0962
CVIHKEP@ DS    0H                                                  0964
* GEN(  EJECT);                                                    0964
           EJECT
*CVILOC: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                   0965
         B     @PB00004                                            0965
CVILOC   DS    0H                                                  0966
*/*******************************************************************/
*/* THIS ROUTINE IS CALLED TO GET THE RDTLOCK (CVINPUT=0) OR        */
*/* THE VOCLOCK (CVINPUT=4).                                        */
*/*******************************************************************/
*RFY ISTATCVT BASED(NCSPLCVT);                                     0966
*CVINSI17=CVIRTNAD;                                                0967
         ST    CVIRTNAD,CVINSI17                                   0967
*IF CVINPUT=0                                                      0968
* THEN DO;                                                         0968
         LTR   CVINPUT,CVINPUT                                     0968
         BNZ   @RF00968                                            0968
*  CVINPUT=NCSPLRPH;                                               0970
*                                                                  0970
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         0970
*/*** START -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- ***/                   0971
*    DO;                                                           0971
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         0972
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR15P = ATCAP36;              /*ADDRESS OF LOCK ROUTINE*/
         L     @09,NCSPLCVT(,CVINCSPL)                             0974
         L     GPR15P,ATCAP36(,@09)                                0974
*        GPR02P = ADDR(ATCRDTLK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,ATCRDTLK(,@09)                               0975
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 0976
         L     GPR04P,RPHCRR(,GPR01P)                              0976
*        GPR00P = CRALMS03;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,4                                            0977
*        GPR03P = ADDR(GPR04P->CRAL3PTR);                          0978
         LA    GPR03P,CRAL3PTR(,GPR04P)                            0978
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        DCL FMZL0031 BASED(GPR15P) LABEL VALUERANGE(*);           0979
*        CALL FMZL0031;                                            0980
         BALR  @14,@15                                             0980
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      0981
*                                                                  0981
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       0982
*        END;                                                      0983
*/*** END -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- ***/                     0984
* END;                                                             0984
* ELSE DO;                                                         0985
         B     @RC00968                                            0985
@RF00968 DS    0H                                                  0986
*  CVINPUT=NCSPLRPH;                                               0986
*                                                                  0986
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         0986
*/*** START -TPLOCK (VOCLOCK)TYPE(XCLSIVE)- ***/                   0987
*    DO;                                                           0987
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         0988
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR15P = ATCAP36;              /*ADDRESS OF LOCK ROUTINE*/
         L     @09,NCSPLCVT(,CVINCSPL)                             0990
         L     GPR15P,ATCAP36(,@09)                                0990
*        GPR02P = ADDR(ATCVOCLK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,ATCVOCLK(,@09)                               0991
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 0992
         L     GPR04P,RPHCRR(,GPR01P)                              0992
*        GPR00P = CRALMS02;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,2                                            0993
*        GPR03P = ADDR(GPR04P->CRAL2PTR);                          0994
         LA    GPR03P,CRAL2PTR(,GPR04P)                            0994
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        DCL FMZL0036 BASED(GPR15P) LABEL VALUERANGE(*);           0995
*        CALL FMZL0036;                                            0996
         BALR  @14,@15                                             0996
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      0997
*                                                                  0997
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       0998
*        END;                                                      0999
*/*** END -TPLOCK (VOCLOCK)TYPE(XCLSIVE)- ***/                     1000
* END;                                                             1000
*CVIRTNAD=CVINSI17;                                                1001
@RC00968 L     CVIRTNAD,CVINSI17                                   1001
*END CVILOC;                                                       1002
@EL00004 DS    0H                                                  1002
@EF00004 DS    0H                                                  1002
@ER00004 BR    @14                                                 1002
@PB00004 DS    0H                                                  1003
* GEN(  EJECT);                                                    1003
           EJECT
*CVIUNLOC: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 1004
         B     @PB00005                                            1004
CVIUNLOC DS    0H                                                  1005
*/*******************************************************************/
*/* THIS ROUTINE IS CALLED TO RELEASE THE RDTLOCK (CVINPUT=0) OR    */
*/* THE VOCLOCK (CVINPUT=4).                                        */
*/*****************************************************************/
*RFY ISTATCVT BASED(NCSPLCVT);                                     1005
*CVINSI18=CVIRTNAD;                                                1006
         ST    CVIRTNAD,CVINSI18                                   1006
*IF CVINPUT=0                                                      1007
* THEN DO;                                                         1007
         LTR   CVINPUT,CVINPUT                                     1007
         BNZ   @RF01007                                            1007
*  CVINPUT=NCSPLRPH;                                               1009
*                                                                  1009
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         1009
*/*** START -TPUNLOCK (RDTLOCK)- ***/                              1010
*    DO;                                                           1010
*/* ATBUILD (ISTRPH,ISTLOK,ISTCRA)  */                             1011
*/* END OF ATBUILD */                                              1011
*                                                                  1011
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         1011
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR15P,RPHWORK(GPR01P)
*        GPR02P = ADDR(ATCRDTLK);       /*SET PARAM - LOCKWORD PTR*/
         L     GPR02P,NCSPLCVT(,CVINCSPL)                          1013
         LA    GPR02P,ATCRDTLK(,GPR02P)                            1013
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 1014
         L     GPR04P,RPHCRR(,GPR01P)                              1014
*        GPR00P = CRALMS03;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,4                                            1015
*        GPR03P = ADDR(GPR04P->CRAL3PTR);                          1016
         LA    GPR03P,CRAL3PTR(,GPR04P)                            1016
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*                                                                  1017
*    DO; /* LISATCVT CVTBASE(PAGEABLE,(GPR15P)) */                 1017
*      GPR15P = ATCLCPTR; /*SET UP ATCVT POINTER*/                 1018
         L     GPR15P,ATCLCPTR                                     1018
*    END; /*LISATCVT*/                                             1019
*        GPR15P=GPR15P->ATCAP33;                                   1020
         L     GPR15P,ATCAP33(,GPR15P)                             1020
*        DCL FMZL0041 BASED(GPR15P) LABEL VALUERANGE(*);           1021
*        CALL FMZL0041;                                            1022
         BALR  @14,@15                                             1022
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      1023
*                                                                  1023
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       1024
*        END;                                                      1025
*/*** END -TPUNLOCK (RDTLOCK)- ***/                                1026
* END;                                                             1026
* ELSE DO;                                                         1027
         B     @RC01007                                            1027
@RF01007 DS    0H                                                  1028
*  CVINPUT=NCSPLRPH;                                               1028
*                                                                  1028
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         1028
*/*** START -TPUNLOCK (VOCLOCK)- ***/                              1029
*    DO;                                                           1029
*/* ATBUILD (ISTRPH,ISTLOK,ISTCRA)  */                             1030
*/* END OF ATBUILD */                                              1030
*                                                                  1030
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;         1030
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR15P,RPHWORK(GPR01P)
*        GPR02P = ADDR(ATCVOCLK);       /*SET PARAM - LOCKWORD PTR*/
         L     GPR02P,NCSPLCVT(,CVINCSPL)                          1032
         LA    GPR02P,ATCVOCLK(,GPR02P)                            1032
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 1033
         L     GPR04P,RPHCRR(,GPR01P)                              1033
*        GPR00P = CRALMS02;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,2                                            1034
*        GPR03P = ADDR(GPR04P->CRAL2PTR);                          1035
         LA    GPR03P,CRAL2PTR(,GPR04P)                            1035
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*                                                                  1036
*    DO; /* LISATCVT CVTBASE(PAGEABLE,(GPR15P)) */                 1036
*      GPR15P = ATCLCPTR; /*SET UP ATCVT POINTER*/                 1037
         L     GPR15P,ATCLCPTR                                     1037
*    END; /*LISATCVT*/                                             1038
*        GPR15P=GPR15P->ATCAP33;                                   1039
         L     GPR15P,ATCAP33(,GPR15P)                             1039
*        DCL FMZL0051 BASED(GPR15P) LABEL VALUERANGE(*);           1040
*        CALL FMZL0051;                                            1041
         BALR  @14,@15                                             1041
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      1042
*                                                                  1042
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*    RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;       1043
*        END;                                                      1044
*/*** END -TPUNLOCK (VOCLOCK)- ***/                                1045
* END;                                                             1045
*CVIRTNAD=CVINSI18;                                                1046
@RC01007 L     CVIRTNAD,CVINSI18                                   1046
*END CVIUNLOC;                                                     1047
@EL00005 DS    0H                                                  1047
@EF00005 DS    0H                                                  1047
@ER00005 BR    @14                                                 1047
@PB00005 DS    0H                                                  1048
* GEN(  EJECT);                                                    1048
           EJECT
*CVICID: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                   1049
         B     @PB00006                                            1049
CVICID   DS    0H                                                  1050
*/********************************************************************/
*/* THIS ROUTINE IS CALLED TO DO A CIDCTL (FIND) LOCK(SHARED) AND    */
*/* PUT THE NCB ADDRESS IN REGISTER 2.  THIS ROUTINE EXPECTS THE     */
*/* NCSIOCID FIELD IN THE NCSPL TO ALREADY HAVE THE SAF/DAF.         */
*/********************************************************************/
*RFY (CVIR0,CVIR2) RSTD;                                           1050
*CVINSI19=CVIRTNAD;                                                1051
         ST    CVIRTNAD,CVINSI19                                   1051
*CVINPUT=NCSPLRPH;                                                 1052
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         1052
*CVIR2=NCSIOCID;                                                   1053
*                                                                  1053
         L     CVIR2,NCSIOCID(,CVINCSPL)                           1053
*  DO; /* CIDCTL(FIND) LOCK(SHARED) */                             1054
*                                                                  1054
*  RFY (EMCR2,EMCR3) RSTD;                                         1055
*    GEN SETS(RPHWORK)                                             1056
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1056
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*    EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                           1057
         SLR   EMCR3,EMCR3                                         1057
*    EMCR3 = '01'X; /*INDICATE SHARED LOCK*/                       1058
         LA    EMCR3,1                                             1058
*    CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/        1059
*                                                                  1059
         L     @09,ATCLCPTR                                        1059
         L     @15,ATCCDFND(,@09)                                  1059
         BALR  @14,@15                                             1059
*  RFY (EMCR2,EMCR3) UNRSTD;                                       1060
*  END; /*CIDCTL*/                                                 1061
*CVIR2=CVIR0;              /* NCB */                               1062
         LR    CVIR2,CVIR0                                         1062
*CVIRTNAD=CVINSI19;                                                1063
         L     CVIRTNAD,CVINSI19                                   1063
*END CVICID;                                                       1064
@EL00006 DS    0H                                                  1064
@EF00006 DS    0H                                                  1064
@ER00006 BR    @14                                                 1064
@PB00006 DS    0H                                                  1065
*RFY (CVIR0,CVIR2) UNRSTD;                                         1065
*  /*SEGMENT(CVISYTX)START*/DO;GOTO CVISYTX@;CVISYTX:END;          1066
         B     CVISYTX@                                            1067
CVISYTX  DS    0H                                                  1069
*/********************************************************************/
*/* SYNTAX CHECK VARY DEACTIVATE COMMAND FOR ISTINCVI MAINLINE BY    */
*/* CHECKING THE NCSPL FOR VALID SETTINGS.                           */
*/* SET THE 'GO' SWITCH (CVIGO) ONLY IF THE REQUEST IS VALID, AND    */
*/* SET CVIMSG# TO INDICATE ANY ERROR MESSAGES TO BE ISSUED.         */
*/********************************************************************/
*RFY ISTRPRE BASED(CVIWKPT1);                                      1069
*   IF RPRINV='1'B                                                 1070
*    THEN CVIMSG# = '140I';                                        1070
         L     @09,CVIWKPT1                                        1070
         TM    RPRINV(@09),B'01000000'                             1070
         BNO   @RF01070                                            1070
         MVC   CVIMSG#(4),@CC05714                                 1071
*/********************************************************************/
*/* IF COMMAND RDT ENTRY ALREADY MARKED 'OFFLINE', THEN IT IS        */
*/* SUFFICIENT JUST TO ISSUE AN 'ALREADY OFFLINE' MESSAGE.           */
*/********************************************************************/
*   ELSE                                                           1072
*    IF RPRENTRY = RPRENTLN & RLNPORT = '1'B    /* ZTR 6500 GH */  1072
*     & RPTCTNM = NCSPLRID                                         1072
*    THEN IF RPTONLIN = '0'B                                       1072
         B     @RC01070                                            1072
@RF01070 L     @09,CVIWKPT1                                        1072
         CLI   RPRENTRY(@09),X'50'                                 1072
         BNE   @RF01072                                            1072
         TM    RLNPORT(@09),B'00010000'                            1072
         BNO   @RF01072                                            1072
         CLC   RPTCTNM(8,@09),NCSPLRID(CVINCSPL)                   1072
         BNE   @RF01072                                            1072
*          THEN CVIMSG# = '104I';                                  1073
         TM    RPTONLIN(@09),B'00010000'                           1073
         BNZ   @RF01073                                            1073
         MVC   CVIMSG#(4),@CC05715                                 1074
*          ELSE CVIGO='1'B;                                        1075
         B     @RC01073                                            1075
@RF01073 OI    CVIGO,B'10000000'                                   1075
*/********************************************************************/
*/* IF COMMAND RDT ENTRY IS A CLUSTER CONTROLER CHECK ONLINE,CONTACT */
*/* COUNT,PABS EXIST AND RPH WAITING TO INDICATE A COMPLETELY        */
*/* INACTIVE CLUSTER CONTROLLER                                      */
*/********************************************************************/
*    ELSE IF RPRONLIN='0'B                                         1076
*        THEN IF RPRENTRY=RPRENTCC                                 1076
         B     @RC01072                                            1076
@RF01072 L     @09,CVIWKPT1                                        1076
         TM    RPRONLIN(@09),B'00001000'                           1076
         BNZ   @RF01076                                            1076
*           THEN IF ( RCCCNCNT=0 & RCCVPAB=0 & RCCRPHCN=0 ) ×      1077
         CLI   RPRENTRY(@09),X'71'                                 1077
         BNE   @RF01077                                            1077
*                   RPRVRYPD='1'B                                  1078
*                THEN IF RPRVRYPD='1'B &     /* VARY PENDING @VS41705*/
         CLI   RCCCNCNT(@09),0                                     1078
         BNE   @GL00017                                            1078
         SLR   @07,@07                                             1078
         C     @07,RCCVPAB(,@09)                                   1078
         BNE   @GL00017                                            1078
         C     @07,RCCRPHCN(,@09)                                  1078
         BE    @RT01078                                            1078
@GL00017 L     @09,CVIWKPT1                                        1078
         TM    RPRVRYPD(@09),B'00000010'                           1078
         BNO   @RF01078                                            1078
@RT01078 DS    0H                                                  1079
*                       RPRPEPCT^=0 /*ANY LU'S STILL PENDING @VS41705*/
*                        THEN DO; /*SET UP FOR MSG (DEACTIVATE IN  1079
*                                                PROGRESS)   @VS41705*/
         L     @09,CVIWKPT1                                        1079
         TM    RPRVRYPD(@09),B'00000010'                           1079
         BNO   @RF01079                                            1079
         LH    @09,RPRPEPCT(,@09)                                  1079
         LTR   @09,@09                                             1079
         BZ    @RF01079                                            1079
*                             CVIMSG#='073I'; /*MSG ID       @VS41705*/
         MVC   CVIMSG#(4),@CC05645                                 1081
*                             CVIMSG1=CVIVARY; /*MSG TEXT    @VS41705*/
         MVC   CVIMSG1(8),@CC05605                                 1082
*                             CVIMSG2=NCSPLRID; /*MSG TEXT   @VS41705*/
         MVC   CVIMSG2(8),NCSPLRID(CVINCSPL)                       1083
*                             CVIQUIT='1'B; /*TURN ON QUIT SWITCH TO
*                                             BYPASS TRYING TO ISSUE
*                                             MSG LATER      @VS42118*/
         OI    CVIQUIT,B'00000100'                                 1084
*                             CALL CVIWTO3; /* ISSUE MSG     @VS42118*/
         BAL   @14,CVIWTO3                                         1085
*                             END;                         /*@VS41705*/
*                        ELSE CVIMSG#='104I'; /*SET UP FOR MSG (NODE
*                                          ALREADY INACTIVE) @VS41705*/
         B     @RC01079                                            1087
@RF01079 MVC   CVIMSG#(4),@CC05715                                 1087
*                ELSE CVIGO='1'B; /*TURN ON THE GO SWITCH    @VS41705*/
         B     @RC01078                                            1088
@RF01078 OI    CVIGO,B'10000000'                                   1088
*           ELSE IF NCSPLVCD=NCSPLVC2                              1089
*            THEN DO;                                      /*@ZD13835*/
         B     @RC01077                                            1089
@RF01077 CLI   NCSPLVCD(CVINCSPL),X'02'                            1089
         BNE   @RF01089                                            1089
*             CVIMSG#=CVI600I;                             /*@ZD13835*/
         MVC   CVIMSG#(4),@CC05610                                 1091
*             CVIMSG1A='MODIFY';                           /*@ZD13835*/
         MVC   CVIMSG1A(6),@CC05716                                1092
*             CVIMSG2A=NCSPLRID;                           /*@ZD13835*/
         MVC   CVIMSG2A(8),NCSPLRID(CVINCSPL)                      1093
*            END;                                          /*@ZD13835*/
*            ELSE                                          /*@ZD13835*/
*              IF RPRVRYPD='1'B × RPRHLVPD='1'B /* VRY PND ? @ZA27664*/
*                THEN            /* YES-VARY PENDING         @ZA27664*/
         B     @RC01089                                            1095
@RF01089 L     @09,CVIWKPT1                                        1095
         TM    RPRVRYPD(@09),B'00000010'                           1095
         BO    @RT01095                                            1095
         TM    RPRHLVPD(@09),B'00000100'                           1095
         BNO   @RF01095                                            1095
@RT01095 DS    0H                                                  1096
*                  DO;                                     /*@ZA27664*/
*                    CVIMSG#='073I';                       /*@ZA27664*/
         MVC   CVIMSG#(4),@CC05645                                 1097
*                    CVIMSG1=CVIVARY;                      /*@ZA27664*/
         MVC   CVIMSG1(8),@CC05605                                 1098
*                    CVIMSG2=NCSPLRID;                     /*@ZA27664*/
         MVC   CVIMSG2(8),NCSPLRID(CVINCSPL)                       1099
*                    CVIQUIT='1'B;                         /*@ZA27664*/
         OI    CVIQUIT,B'00000100'                                 1100
*                    CALL CVIWTO3;                         /*@ZA27664*/
         BAL   @14,CVIWTO3                                         1101
*                  END;          /* END-VARY PENDING         @ZA27664*/
*                ELSE                                      /*@ZA27664*/
*                  CVIMSG#='104I';                         /*@ZA27664*/
         B     @RC01095                                            1103
@RF01095 MVC   CVIMSG#(4),@CC05715                                 1103
*/********************************************************************/
*/* MOD DUMP IS VALID ONLY FOR RN'S                                  */
*/********************************************************************/
*      ELSE IF RPRENTRY ^=RPRENTRN                                 1104
*             & NCSPLVCD=NCSPLVC2                                  1104
*          THEN DO;                                                1104
         B     @RC01076                                            1104
@RF01076 L     @09,CVIWKPT1                                        1104
         CLI   RPRENTRY(@09),X'01'                                 1104
         BE    @RF01104                                            1104
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1104
         BNE   @RF01104                                            1104
*               CVIMSG# = CVI600I;                                 1106
         MVC   CVIMSG#(4),@CC05610                                 1106
*               CVIMSG1A = 'MODIFY';                       /*@DM12419*/
         MVC   CVIMSG1A(6),@CC05716                                1107
*               CVIMSG2A = NCSPLRID;                       /*@DM12419*/
         MVC   CVIMSG2A(8),NCSPLRID(CVINCSPL)                      1108
*               END;                                               1109
*/********************************************************************/
*/* SET GO SWITCH IF VARY DEACTIVATE PROCESSING SHOULD CONTINUE      */
*/********************************************************************/
*        ELSE CVIGO='1'B;                                          1110
         B     @RC01104                                            1110
@RF01104 OI    CVIGO,B'10000000'                                   1110
*  /*SEGMENT(CVISYTX)FINISH*/DO;GOTO CVISYTX#;CVISYTX@:END;        1111
@RC01104 DS    0H                                                  1111
@RC01076 DS    0H                                                  1111
@RC01072 DS    0H                                                  1111
@RC01070 DS    0H                                                  1112
         B     CVISYTX#                                            1112
CVISYTX@ DS    0H                                                  1114
*  /*SEGMENT(CVIAPPL)START*/DO;GOTO CVIAPPL@;CVIAPPL:END;          1114
         B     CVIAPPL@                                            1115
CVIAPPL  DS    0H                                                  1117
*/********************************************************************/
*/* DO DEACTIVATE PROCESSING FOR AN APPLICATION RDT SEGMENT, FIRST   */
*/* OBTAINING THE OPEN/CLOSE/VARY LOCK.                              */
*/********************************************************************/
*RFY (ISTRDT,ISTRPRE) BASED(CVIWKPT1);                             1117
*CVINPUT=4;                                                        1118
         LA    CVINPUT,4                                           1118
*CALL CVILOC;                                                      1119
         BAL   @14,CVILOC                                          1119
*/********************************************************************/
*/* USE CVIWKPT2 AS AN RDT ENTRY POINTER TO STEP THROUGH THE         */
*/* APPLICATION RDT ENTRIES WITHIN THE SEGMENT. ALL THE              */
*/* APPLICATIONS MUST BE MARKED 'INACTIVE' (RPRONLIN='0'B). THEN THE */
*/* LOGON CHAIN WILL BE BROKEN, AND ALL NODES ON THAT CHAIN REMOVED  */
*/* BEFORE THE APPLICATION SEGMENT CAN BE DEACTIVATED.               */
*/********************************************************************/
*IF RDTLGCT ^='0'B                                                 1120
*  THEN DO;                                                        1120
         L     @09,CVIWKPT1                                        1120
         CLI   RDTLGCT(@09),0                                      1120
         BE    @RF01120                                            1120
*       CVIMSG# = '103I';                                          1122
         MVC   CVIMSG#(4),@CC05722                                 1122
*       CVINPUT=4;                                                 1123
         LA    CVINPUT,4                                           1123
*       CALL CVIUNLOC;                                             1124
         BAL   @14,CVIUNLOC                                        1124
*       END;                                                       1125
*  ELSE DO;                                                        1126
         B     @RC01120                                            1126
@RF01120 DS    0H                                                  1127
*       CVIWKPT2=CVIWKPT1; /*BEGIN TO LOOP THROUGH APPLICATION'S   1127
*                            RDT SEGMENT                     @DM14933*/
         L     CVIWKPT2,CVIWKPT1                                   1127
*       CVILOOP='0'B;     /*                                 @DM14933*/
         NI    CVILOOP,B'11011111'                                 1128
*       DO WHILE (CVILOOP='0'B & CVIWKPT2->RPRENTED='0'B); /*@DM14933*/
         B     @DE01129                                            1129
@DL01129 DS    0H                                                  1130
*       CVIWKPT2=CVIWKPT2+CVIWKPT2->RPRELEN; /*GET NEXT RDT  @DM14933*/
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1130
*       IF CVIWKPT2->RPRONLIN='1'B /*APPL WITH AN OPEN ACB   @DM14933*/
*          THEN DO;  /* YES, SO FAIL THE COMMAND             @DM14933*/
         TM    RPRONLIN(CVIWKPT2),B'00001000'                      1131
         BNO   @RF01131                                            1131
*               CVIMSG#='103I'; /*SET UP FOR MSG 103I        @DM14933*/
         MVC   CVIMSG#(4),@CC05722                                 1133
*               CVINPUT=4; /*PREPARE TO RELEASE THE VOC LOCK @DM14933*/
         LA    CVINPUT,4                                           1134
*               CALL CVIUNLOC; /*RELEASE THE VOC LOCK        @DM14933*/
         BAL   @14,CVIUNLOC                                        1135
*               CVILOOP='1'B; /*EXIT THE LOOP                @DM14933*/
         OI    CVILOOP,B'00100000'                                 1136
*               END;     /*                                  @DM14933*/
*          ELSE;         /*                                  @DM14933*/
@RF01131 DS    0H                                                  1139
*       END;    /* END DO WHILE                              @DM14933*/
@DE01129 TM    CVILOOP,B'00100000'                                 1139
         BNZ   @DC01129                                            1139
         TM    RPRENTED(CVIWKPT2),B'00000100'                      1139
         BZ    @DL01129                                            1139
@DC01129 DS    0H                                                  1140
*/********************************************************************/
*/* WHEN ALL THE APPLICATION ENTRIES HAVE BEEN FOUND TO BE INACTIVE, */
*/* REMOVE ALL APPLICATION ENTRIES FROM THEIR LOGON QUEUES, AND      */
*/* BREAK THE LOGON CHAIN, AND THEN CALL SYSDEF TO DELETE THE        */
*/* APPLICATION SEGMENT, THEN SET UP FOR THE 'INACTIVE' MESSAGE.     */
*/********************************************************************/
*       CVIWKPT2=CVIWKPT1+RPRELEN; /*PREPARE TO SCAN THE APPLICATION
*                 SEGMENT TO BREAK ALL OF THE LOGON CHAINS   @DM14933*/
         L     @07,CVIWKPT1                                        1140
         LH    CVIWKPT2,RPRELEN(,@07)                              1140
         ALR   CVIWKPT2,@07                                        1140
*       RFY CVIWORKR RSTD;  /*                               @DM14933*/
*       DO WHILE CVILOOP='0'B; /*LOOP THROUGH SEGMENT        @DM14933*/
         B     @DE01142                                            1142
@DL01142 DS    0H                                                  1143
*       CVIWORKR=CVIWKPT2; /*SAVE RDTE POINTER               @DM14933*/
         LR    CVIWORKR,CVIWKPT2                                   1143
*       CVINSI6=CVIWKPT2->RPRLGONF; /*GET THE LOGON FORWARD POINTER
*                                     FOR THIS APPL RDTE     @DM14933*/
         L     @09,RPRLGONF(,CVIWKPT2)                             1144
         ST    @09,CVINSI6                                         1144
*          DO WHILE CVINSI6^=CVIWKPT2; /*SCAN UNTIL THERE ARE NO MORE
*                                      ENTRIES ON THE CHAIN  @DM14933*/
         B     @DE01145                                            1145
@DL01145 DS    0H                                                  1146
*          CVIWKPT2->RPRLGONF=CVIWKPT2; /*REINITIALIZE THE FORWARD 1146
*                                         POINTER            @DM14933*/
         ST    CVIWKPT2,RPRLGONF(,CVIWKPT2)                        1146
*          CVIWKPT2->RPRLGONB=CVIWKPT2; /*REINITIALIZE THE BACKWARD
*                                         POINTER            @DM14933*/
         ST    CVIWKPT2,RPRLGONB(,CVIWKPT2)                        1147
*          CVIWKPT2=CVINSI6; /*POINT TO THE NEXT ENTRY ON THIS APPL'S
*                              LOGON CHAIN                   @DM14933*/
         L     @04,CVINSI6                                         1148
         LR    CVIWKPT2,@04                                        1148
*          CVINSI6=CVINSI6->RPRLGONF; /*POINT TO THE NEXT ENTRY ON THE
*                                       LOGON CHAIN          @DM14933*/
         L     @09,RPRLGONF(,@04)                                  1149
         ST    @09,CVINSI6                                         1149
*          END; /* END DO WHILE                              @DM14933*/
@DE01145 L     @09,CVINSI6                                         1150
         CR    @09,CVIWKPT2                                        1150
         BNE   @DL01145                                            1150
*       CVINSI6->RPRLGONB=CVINSI6; /*RESET THE LAST NODES BACKWARDS
*                                    POINTER                 @DM14933*/
         ST    @09,RPRLGONB(,@09)                                  1151
*       CVIWKPT2=CVIWORKR; /*RESTORE THE RDTE SCAN ADDRESS   @DM14933*/
         LR    CVIWKPT2,CVIWORKR                                   1152
*       IF CVIWKPT2->RPRENTED='0'B /*AT THE END OF THE SEGMENT?      */
*          THEN /*NO, SO UPDATE POINTER TO THE NEXT APPL RDT @DM14933*/
         TM    RPRENTED(CVIWKPT2),B'00000100'                      1153
         BNZ   @RF01153                                            1153
*             CVIWKPT2=CVIWKPT2+CVIWKPT2->RPRELEN; /*GET THE NEXT  1154
*                                          APPLICATION ENTRY @DM14933*/
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1154
*          ELSE DO; /*AT THE END OF THE SEGMENT, SO SET UP TO FREE 1155
*                     THE APPLICATION SEGMENT                @DM14933*/
         B     @RC01153                                            1155
@RF01153 DS    0H                                                  1156
*               RPRVRYPD='1'B; /*SET VARY PENDING ON IN THE APPLICATION
*                                SEGMENT'S HEADER            @DM14933*/
         L     @09,CVIWKPT1                                        1156
         OI    RPRVRYPD(@09),B'00000010'                           1156
*               CVINPUT=4; /*PREPARE TO RELEASE VOC LOCK     @DM14933*/
         LA    CVINPUT,4                                           1157
*               CALL CVIUNLOC; /*RELEASE THE VOC LOCK        @DM14933*/
         BAL   @14,CVIUNLOC                                        1158
*               CVINPUT=CVINCSPL; /*SET REG 1 = NCSPL ADDR   @DM14933*/
         LR    CVINPUT,CVINCSPL                                    1159
*               CALL ISTINCFS; /*FREE APPL SEGMENT           @DM14933*/
*                                                                  1160
         L     @15,@CV05723                                        1160
         BALR  @14,@15                                             1160
*                DO;                                               1161
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1162
*                /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/     1162
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1162
         L     @09,NCSPLRPH(,CVINCSPL)                             1162
         L     @09,RPHCRR(,@09)                                    1162
         L     @09,CRACRR(,@09)                                    1162
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1162
         MVI   VYCCRT(@09),B'00000000'                             1162
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1163
         OI    CINCVI(@09),B'00000100'                             1163
*                END; /*                       @DM14933*/          1164
*               CVIMSG#='105I'; /*SET UP FOR INACTIVE MSG    @DM14933*/
         MVC   CVIMSG#(4),@CC05684                                 1165
*               CVILOOP='1'B; /*EXIT THE LOOP                @DM14933*/
         OI    CVILOOP,B'00100000'                                 1166
*               END; /* END ELSE                             @DM14933*/
*       END; /*END DO WHILE                                  @DM14933*/
@RC01153 DS    0H                                                  1168
@DE01142 TM    CVILOOP,B'00100000'                                 1168
         BZ    @DL01142                                            1168
*       RFY CVIWORKR UNRSTD;  /*                             @DM14933*/
*END;                                                              1170
*  /*SEGMENT(CVIAPPL)FINISH*/DO;GOTO CVIAPPL#;CVIAPPL@:END;        1171
@RC01120 DS    0H                                                  1172
         B     CVIAPPL#                                            1172
CVIAPPL@ DS    0H                                                  1174
*  /*SEGMENT(SETWKP2)START*/DO;GOTO SETWKP2@;SETWKP2:END;          1174
         B     SETWKP2@                                            1175
SETWKP2  DS    0H                                                  1177
*/********************************************************************/
*/* INITIALIZE CVIWKPT2 TO THE ADDRESS OF THE FIRST RDT ENTRY TO BE  */
*/* PROCESSED BY VARY DEACTIVATE NORMAL PROCESSING. INPUT TO THIS    */
*/* SEGMENT IS CVIWKPT1=ADDRESS OF COMMAND RDT ENTRY AND CVINCSPL=   */
*/* ADDRESS OF NCSPL.                                                */
*/********************************************************************/
*RFY (ISTRPRE,ISTRLN,ISTRPT) BASED(CVIWKPT1);                      1177
*/********************************************************************/
*/* CVIWKPT2 WILL BE SAME AS CVIWKPT1 IF NONE OF FOLLOWING CHECKS    */
*/* CAUSE A CHANGE TO CVIWKPT2.                                      */
*/********************************************************************/
*CVIWKPT2=CVIWKPT1;                                                1178
         L     @07,CVIWKPT1                                        1178
         LR    CVIWKPT2,@07                                        1178
*/********************************************************************/
*/* IF COMMAND RDT ENTRY IS LCDO,THEN SET CVIWKPT2 TO ADDRESS OF RDT */
*/* ENTRY IN FIRST SLOT OF ISTDOT TABLE (DOTADTRM) POINTED TO BY     */
*/* RDSADDOT OF THE LCDO ENTRY.                                      */
*/********************************************************************/
*IF RPRENTRY=RPRENTDS                                              1179
* THEN DO;                                                         1179
         CLI   RPRENTRY(@07),X'20'                                 1179
         BNE   @RF01179                                            1179
*  RFY ISTRDS BASED(CVIWKPT1);                                     1181
*  CVIDOTCT=1;                                                     1182
         MVC   CVIDOTCT(2),@CH00096                                1182
*  CVINXDOT=RDSADDOT;                                              1183
         L     @09,RDSADDOT(,@07)                                  1183
         ST    @09,CVINXDOT                                        1183
*  CVIWKPT2=CVINXDOT->DOTADTRM ;                                   1184
         L     CVIWKPT2,DOTADTRM(,@09)                             1184
* END;                                                             1185
*/********************************************************************/
*/* ELSE IF COMMAND RDT ENTRY IS FOR A PORT (RPRENTLN TYPE ENTRY     */
*/* WITH RLNPORT='1'B) WHICH HAS AN ASSOCIATED TERMINAL (RPTATERM NOT*/
*/* ZERO) THEN SET CVIWKPT2 TO ADDRESS OF RDT ENTRY FOR ASSOCIATED   */
*/* TERMINAL. IF LINE ENTRY IS NOT A PORT BUT IS A PURE DIAL OUT     */
*/* LINE (RLNRACAN='1'B AND RLNRACAT='0'B) THEN SET CVIWKPT2 TO      */
*/* ADDRESS OF THE LINE ENTRY.                                       */
*/********************************************************************/
*ELSE                                                              1186
* IF RPRENTRY=RPRENTLN & RLNPORT='1'B & RPTATERM ^= 0              1186
*  THEN CVIWKPT2=RPTATERM;                                         1186
         B     @RC01179                                            1186
@RF01179 L     @09,CVIWKPT1                                        1186
         CLI   RPRENTRY(@09),X'50'                                 1186
         BNE   @RF01186                                            1186
         TM    RLNPORT(@09),B'00010000'                            1186
         BNO   @RF01186                                            1186
         L     @09,RPTATERM(,@09)                                  1186
         LTR   @09,@09                                             1186
         BZ    @RF01186                                            1186
         LR    CVIWKPT2,@09                                        1187
*  ELSE                                                            1188
*   IF RPRENTRY=RPRENTLN & RLNRACAN='1'B & RLNRACAT='0'B           1188
*    THEN;                                                         1188
         B     @RC01186                                            1188
@RF01186 L     @09,CVIWKPT1                                        1188
         CLI   RPRENTRY(@09),X'50'                                 1188
         BNE   @RF01188                                            1188
         TM    RLNRACAN(@09),B'01000000'                           1188
         BNO   @RF01188                                            1188
         TM    RLNRACAT(@09),B'10000000'                           1188
         BZ    @RT01188                                            1188
*    ELSE                                                          1190
*/********************************************************************/
*/* ELSE IF COMMAND RDT ENTRY IS FOR 370X, CLUSTER, TERMINAL,        */
*/* COMPONENT, LOCAL HEADER, OR LEASED LINE,THEN SET CVIWKPT2        */
*/* TO THE ADDRESS OF THE LOWEST LEVEL RDT ENTRY TO WHICH THE VARY   */
*/* REQUEST APPLIES.                                                 */
*/* IN THIS CASE THE STRUCTURE OF THE RDT SEGMENT ALLOWS FOR FINDING */
*/* THE LOWEST LEVEL RDT ENTRY TO WHICH THE VARY REQUEST APPLIES BY  */
*/* SEARCHING ENTRIES BELOW CURRENT UNTIL EITHER THE LAST ENTRY      */
*/* IN THE SEGMENT IS FOUND (RPRENTED='1'B) OR AN ENTRY TYPE CODE    */
*/* LESS THAN OR EQUAL TO THAT OF THE COMMAND RDT ENTRY IS FOUND.    */
*/********************************************************************/
* IF RPRENTRY=RPRENTRN×RPRENTRY=RPRENTCL×RPRENTRY=RPRENTTR×        1190
*    RPRENTRY=RPRENTCM×RPRENTRY=RPRENTLH×RPRENTRY=RPRENTCC×        1190
*    RPRENTRY=RPRENTLU×                                            1190
*     (RPRENTRY=RPRENTLN & RLNRACAT='0'B & RLNRACAN='0'B & RLNPORT='0'B
*  THEN DO;                                                        1190
@RF01188 L     @09,CVIWKPT1                                        1190
         CLI   RPRENTRY(@09),X'01'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'70'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'80'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'90'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'03'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'71'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'81'                                 1190
         BE    @RT01190                                            1190
         CLI   RPRENTRY(@09),X'50'                                 1190
         BNE   @RF01190                                            1190
         TM    RLNRACAT(@09),B'11010000'                           1190
         BNZ   @RF01190                                            1190
@RT01190 DS    0H                                                  1191
*   CVILOOP='0'B;                                                  1192
         NI    CVILOOP,B'11011111'                                 1192
*   RFY ISTRPRE BASED(CVIWKPT2);                                   1193
*   IF RPRENTED='0'B                                               1194
*    THEN DO WHILE(CVILOOP='0'B);                                  1194
         TM    RPRENTED(CVIWKPT2),B'00000100'                      1194
         BNZ   @RF01194                                            1194
         B     @DE01195                                            1195
@DL01195 DS    0H                                                  1196
*     CVIWKPT2=CVIWKPT2+RPRELEN;                                   1196
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1196
*     IF RPRENTRY<=CVIWKPT1->RPRENTRY                              1197
*      THEN DO;                                                    1197
         L     @09,CVIWKPT1                                        1197
         CLC   RPRENTRY(1,CVIWKPT2),RPRENTRY(@09)                  1197
         BH    @RF01197                                            1197
*       CVIWKPT2=CVIWKPT2-RPRPELEN;                                1199
         SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        1199
*       CVILOOP='1'B;                                              1200
         OI    CVILOOP,B'00100000'                                 1200
*      END;                                                        1201
*     ELSE                                                         1202
*     IF RPRENTED='1'B                                             1202
*      THEN CVILOOP='1'B;                                          1202
         B     @RC01197                                            1202
@RF01197 TM    RPRENTED(CVIWKPT2),B'00000100'                      1202
         BNO   @RF01202                                            1202
         OI    CVILOOP,B'00100000'                                 1203
*     ELSE;                                                        1204
@RF01202 DS    0H                                                  1205
*    END;                                                          1205
@RC01197 DS    0H                                                  1205
@DE01195 TM    CVILOOP,B'00100000'                                 1205
         BZ    @DL01195                                            1205
*   ELSE;                                                          1206
@RF01194 DS    0H                                                  1207
*  END;                                                            1207
*  ELSE;                                                           1208
@RF01190 DS    0H                                                  1209
*  /*SEGMENT(SETWKP2)FINISH*/DO;GOTO SETWKP2#;SETWKP2@:END;        1209
@RT01188 DS    0H                                                  1209
@RC01186 DS    0H                                                  1209
@RC01179 DS    0H                                                  1210
         B     SETWKP2#                                            1210
SETWKP2@ DS    0H                                                  1212
* GEN(  EJECT);                                                    1212
           EJECT
*  /*SEGMENT(NXTWKP2)START*/DO;GOTO NXTWKP2@;NXTWKP2:END;          1213
         B     NXTWKP2@                                            1214
NXTWKP2  DS    0H                                                  1216
*/********************************************************************/
*/* UPDATE CVIWKPT2 TO THE ADDRESS OF THE NEXT RDT ENTRY TO BE       */
*/* PROCESSED BY VARY DEACTIVATE NORMAL PROCESSING. INPUT TO THIS    */
*/* SEGMENT IS CVIWKPT2=ADDRESS OF LAST RDT ENTRY PROCESSED AND      */
*/* CVIWKPT1=ADDRESS OF COMMAND RDT ENTRY.                           */
*/* SET LOOP ESCAPE TO TERMINATE VARY NORMAL PROCESSING IF ALREADY   */
*/* PROCESSED RDT ENTRY COMMAND WAS AGAINST.                         */
*/********************************************************************/
* RFY ISTRPRE BASED(CVIWKPT1);                                     1216
*IF CVIWKPT2=CVIWKPT1                                              1217
* THEN CVILOOP='1'B;                                               1217
         C     CVIWKPT2,CVIWKPT1                                   1217
         BNE   @RF01217                                            1217
         OI    CVILOOP,B'00100000'                                 1218
*/********************************************************************/
*/* IF VARY COMMAND AGAINST AN LCDO, THEN SET CVIWKPT2 TO ADDRESS    */
*/* OF RDT ENTRY FROM NEXT ISTDOT TABLE SLOT, OR, IF ALL THE ISTDOT  */
*/* ENTRIES HAVE BEEN PROCESSED (CVIDOTCT IS ACCUMULATOR FOR NUMBER  */
*/* OF ISTDOT ENTRIES PROCESSED AND RDTSCTTRM IN THE LCDO RDT ENTRY  */
*/* IS THE COUNT OF ISTDOT ENTRIES) THEN SET CVIWKPT2 TO ADDRESS OF  */
*/* LCDO RDT ENTRY.                                                  */
*/********************************************************************/
*ELSE DO;                                                          1219
         B     @RC01217                                            1219
@RF01217 DS    0H                                                  1220
* IF RPRENTRY=RPRENTDS                                             1220
*  THEN DO;                                                        1220
         L     @09,CVIWKPT1                                        1220
         CLI   RPRENTRY(@09),X'20'                                 1220
         BNE   @RF01220                                            1220
*   RFY ISTRDS BASED(CVIWKPT1);                                    1222
*   CVIDOTCT=CVIDOTCT+1;                                           1223
         LA    @07,1                                               1223
         AH    @07,CVIDOTCT                                        1223
         STH   @07,CVIDOTCT                                        1223
*    CVINXDOT=CVINXDOT+LENGTH(ISTDOT);                             1224
         LA    @04,4                                               1224
         AL    @04,CVINXDOT                                        1224
         ST    @04,CVINXDOT                                        1224
*   IF CVIDOTCT>RDSCTTRM                                           1225
*    THEN CVIWKPT2=CVIWKPT1;                                       1225
         CH    @07,RDSCTTRM(,@09)                                  1225
         BNH   @RF01225                                            1225
         LR    CVIWKPT2,@09                                        1226
*   ELSE CVIWKPT2=CVINXDOT->DOTADTRM ;                             1227
         B     @RC01225                                            1227
@RF01225 L     @07,CVINXDOT                                        1227
         L     CVIWKPT2,DOTADTRM(,@07)                             1227
*  END;                                                            1228
*/********************************************************************/
*/* ELSE IF VARY COMMAND AGAINST A PORT, THEN SET CVIWKPT2 TO ADDRESS *
*/* OF PORT ENTRY. OTHERWISE, BACK UP CVIWKPT2 BY THE LENGTH OF THE  */
*/* PREVIOUS RDT ENTRY.                                              */
*/********************************************************************/
* ELSE                                                             1229
*   IF RPRENTRY=RPRENTLN & RLNPORT='1'B                            1229
*    THEN CVIWKPT2=CVIWKPT1;                                       1229
         B     @RC01220                                            1229
@RF01220 L     @09,CVIWKPT1                                        1229
         CLI   RPRENTRY(@09),X'50'                                 1229
         BNE   @RF01229                                            1229
         TM    RLNPORT(@09),B'00010000'                            1229
         BNO   @RF01229                                            1229
         LR    CVIWKPT2,@09                                        1230
*   ELSE CVIWKPT2=CVIWKPT2-CVIWKPT2->RPRPELEN;                     1231
         B     @RC01229                                            1231
@RF01229 SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        1231
*END;                                                              1232
@RC01229 DS    0H                                                  1232
@RC01220 DS    0H                                                  1233
*  /*SEGMENT(NXTWKP2)FINISH*/DO;GOTO NXTWKP2#;NXTWKP2@:END;        1233
@RC01217 DS    0H                                                  1234
         B     NXTWKP2#                                            1234
NXTWKP2@ DS    0H                                                  1236
* GEN(  EJECT);                                                    1236
           EJECT
*  /*SEGMENT(CVIQUIS)START*/DO;GOTO CVIQUIS@;CVIQUIS:END;          1237
         B     CVIQUIS@                                            1238
CVIQUIS  DS    0H                                                  1240
*/********************************************************************/
*/* THIS ROUTINE IS INVOKED BY ISTINCVI MAINLINE IF A MODIFY COMMAND */
*/* WAS ISSUED FOR THE RN.  THE DNCB ADDRESS IS OBTAINED VIA CIDCTL  */
*/* FIND USING THE SAF/DAF (RPRCOMID) IN THE RN RDTE.  A CALL IS MADE*/
*/* TO CVIDOIO TO ISSUE QUIESCE LCCW.  IF THE CID FIND OR THE        */
*/* QUIESCE IS NOT SUCCESSFUL, AN ERROR MESSAGE IS ISSUED AND THE    */
*/* INTERNAL 'QUIT' SWITCH IS SET ON.                                */
*/********************************************************************/
*NCSIOCID=CVISAF+NCSPLRPT->RPRDAF;                                 1240
         L     @09,NCSPLRPT(,CVINCSPL)                             1240
         LH    @09,RPRDAF(,@09)                                    1240
         N     @09,@CF06623                                        1240
         ST    @09,NCSIOCID(,CVINCSPL)                             1240
*NCSPLCMD=NCSCQUIS;                                                1241
         MVC   NCSPLCMD(2,CVINCSPL),@CB03396                       1241
*  CALL CVIDOIO;                                                   1242
         BAL   @14,CVIDOIO                                         1242
*  IF NCSIORC=NCSIOSUC                                             1243
*   THEN;                                                          1243
         CLI   NCSIORC(CVINCSPL),X'00'                             1243
         BE    @RT01243                                            1243
*   ELSE DO;                                                       1245
*    CVINPUT=0;                                            /*@ZA30798*/
         SLR   CVINPUT,CVINPUT                                     1246
*    CALL CVILOC;                   /* GET RDT LOCK          @ZA30798*/
         BAL   @14,CVILOC                                          1247
*    RRNLCDIP='0'B;                 /* RESET DEACT IN PROG   @ZA30798*/
         L     @09,CVIWKPT1                                        1248
         NI    RRNLCDIP(@09),B'11110111'                           1248
*    CVINPUT=0;                                            /*@ZA30798*/
         SLR   CVINPUT,CVINPUT                                     1249
*    CALL CVIUNLOC;                 /* RELEASE RDT LOCK      @ZA30798*/
         BAL   @14,CVIUNLOC                                        1250
*    CVIQUIT='1'B;                                                 1251
         OI    CVIQUIT,B'00000100'                                 1251
*    CVIMSG# = '163I';                                             1252
         MVC   CVIMSG#(4),@CC05681                                 1252
*    CALL CVIWTO;                                                  1253
         BAL   @14,CVIWTO                                          1253
*   END;                                                           1254
*  /*SEGMENT(CVIQUIS)FINISH*/DO;GOTO CVIQUIS#;CVIQUIS@:END;        1255
@RT01243 DS    0H                                                  1256
         B     CVIQUIS#                                            1256
*CVIHEADP: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 1258
         B     @PB00007                                            1258
CVIHEADP DS    0H                                                  1259
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY ISTINCVI MAINLINE TO                   */
*/* COMPLETE DEACTIVATION OF AN RDT SEGMENT WHEN CVIWKPT1, THE       */
*/* ADDRESS OF THE COMMAND RDT ENTRY, IS FOR A 370X OR A LOCAL       */
*/* HEADER.                                                          */
*/* INPUT: CVIWKPT1 = RN OR LH                                       */
*/* CALLS ISTINCVP,ISTINCFS                                          */
*/********************************************************************/
*CVINSI2=CVIRTNAD;                                                 1259
         ST    CVIRTNAD,CVINSI2                                    1259
*RFY ISTRPRE BASED(CVIWKPT1);                                      1260
*/********************************************************************/
*/* IF DEACTIVATE FOR 370X AND COMMAND IS IMMEDIATE SET  THE         */
*/* IMMEDIATE TERMINATE FLAG. SET SUPPRESS MESSAGE AND CALL CVP.     */
*/* FOR IMMEDIATE TERMINATE CVP WILL DO TPREDRIVE, DEALLOCATE, CLOSE */
*/* AND FREE SEGMENT                                                 */
*/* FOR THE RN.                                                      */
*/********************************************************************/
*IF RPRENTRY=RPRENTRN                                              1261
* THEN DO;                                                         1261
         L     @09,CVIWKPT1                                        1261
         CLI   RPRENTRY(@09),X'01'                                 1261
         BNE   @RF01261                                            1261
*      IF NCSVBF12='1'B                                            1263
*        THEN NCSPLVIT='1'B;                                       1263
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1263
         BNO   @RF01263                                            1263
         OI    NCSPLVIT(CVINCSPL),B'00000001'                      1264
*        ELSE;                                                     1265
@RF01263 DS    0H                                                  1266
*      CVIVRYPD='1'B;                                              1266
         OI    CVIVRYPD,B'01000000'                                1266
*      CVINPUT=CVINCSPL;                                           1267
         LR    CVINPUT,CVINCSPL                                    1267
*      CALL ISTINCVP;                                              1268
*                                                                  1268
         L     @15,@CV05656                                        1268
         BALR  @14,@15                                             1268
*    DO;                                                           1269
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1270
*    /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 1270
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1270
         L     @09,NCSPLRPH(,CVINCSPL)                             1270
         L     @09,RPHCRR(,@09)                                    1270
         L     @09,CRACRR(,@09)                                    1270
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1270
         MVI   VYCCRT(@09),B'00000000'                             1270
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1271
         OI    CINCVI(@09),B'00000100'                             1271
*    END;                                                          1272
*      END;                                                        1273
*/********************************************************************/
*/* FOR LOCAL HEADER CALL ISTINCFS TO FREE SEGMENT                   */
*/********************************************************************/
*  ELSE IF RPRENTRY=RPRENTLH                                       1274
*      THEN DO;                                                    1274
         B     @RC01261                                            1274
@RF01261 L     @09,CVIWKPT1                                        1274
         CLI   RPRENTRY(@09),X'03'                                 1274
         BNE   @RF01274                                            1274
*       CVINPUT=CVINCSPL;                                          1276
         LR    CVINPUT,CVINCSPL                                    1276
*       CALL ISTINCFS;                                             1277
*                                                                  1277
         L     @15,@CV05723                                        1277
         BALR  @14,@15                                             1277
*    DO;                                                           1278
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1279
*    /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 1279
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1279
         L     @09,NCSPLRPH(,CVINCSPL)                             1279
         L     @09,RPHCRR(,@09)                                    1279
         L     @09,CRACRR(,@09)                                    1279
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1279
         MVI   VYCCRT(@09),B'00000000'                             1279
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1280
         OI    CINCVI(@09),B'00000100'                             1280
*    END;                                                          1281
*       END;                                                       1282
*  ELSE;                                                           1283
@RF01274 DS    0H                                                  1284
*  CVIRTNAD=CVINSI2;                                               1284
@RC01261 L     CVIRTNAD,CVINSI2                                    1284
*  END;                                                            1285
@EL00007 DS    0H                                                  1285
@EF00007 DS    0H                                                  1285
@ER00007 BR    @14                                                 1285
@PB00007 DS    0H                                                  1286
* GEN(  EJECT);                                                    1286
           EJECT
*CVIIMM: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                   1287
         B     @PB00008                                            1287
CVIIMM   DS    0H                                                  1288
*/********************************************************************/
*/* THIS ROUTINE IS INVOKED BY ISTINCVI MAINLINE IF THE NCSPL        */
*/* INDICATES THE DEACTIVATE REQUEST IS IMMEDIATE OR FOR AN ERP OR   */
*/* MODIFY DUMP.                                                     */
*/* INPUT IS CVIWKPT1 POINTING AT THE COMMAND RDT ENTRY.             */
*/* SUBRTNS: CVIPG,CVIENTRY,CVIPEPL2,CVISGIMM                        */
*/* MSGS:    370X XXX NOW DORMANT HARDWARE MAY BE DISCONECTED        */
*/********************************************************************/
*CVINSI16=CVIRTNAD;                                                1288
         ST    CVIRTNAD,CVINSI16                                   1288
*CVIWKPT2=CVIWKPT1;                                                1289
         L     CVIWKPT2,CVIWKPT1                                   1289
*RFY (ISTRPRE,ISTRLN,ISTRPT) BASED(CVIWKPT2);                      1290
*/********************************************************************/
*/* IF COMMAND RDT ENTRY IS DIAL LINE WITH PORT FLAG ON AND AN       */
*/* ASSOCIATED TERMINAL, THEN CALL CVIPG TO ISSUE PURGE COMMAND FOR  */
*/* THE ASSOCIATED TERMINAL.                                         */
*/********************************************************************/
*IF RPRENTRY=RPRENTLN &(RLNRACAT='1'B×RLNRACAN='1'B)               1291
* THEN                                                             1291
         CLI   RPRENTRY(CVIWKPT2),X'50'                            1291
         BNE   @RF01291                                            1291
         TM    RLNRACAT(CVIWKPT2),B'11000000'                      1291
         BZ    @RF01291                                            1291
*  IF RLNPORT='1'B                                                 1292
*   THEN DO;                                                       1292
         TM    RLNPORT(CVIWKPT2),B'00010000'                       1292
         BNO   @RF01292                                            1292
*    IF RPTATERM ^= 0                                              1294
*     THEN DO;                                                     1294
         L     @09,RPTATERM(,CVIWKPT2)                             1294
         LTR   @09,@09                                             1294
         BZ    @RF01294                                            1294
*      CVIWKPT2=RPTATERM;                                          1296
         LR    CVIWKPT2,@09                                        1296
*      CALL CVIPG;                                                 1297
         BAL   @14,CVIPG                                           1297
*      CVIWKPT2=CVIWKPT1;                                          1298
         L     CVIWKPT2,CVIWKPT1                                   1298
*     END;                                                         1299
*    ELSE;                                                         1300
@RF01294 DS    0H                                                  1301
*/********************************************************************/
*/* IF 'QUIT' SWITCH NOT SET, THEN CALL CVIPG TO ISSUE PURGE         */
*/* COMMAND FOR THE CTERM.                                           */
*/* THEN, IF QUIT SWITCH STILL NOT SET, CALL CVIENTRY TO DEACTIVATE  */
*/* THE CTERM DEVICE.                                                */
*/********************************************************************/
*    IF CVIQUIT='0'B                                               1301
*     THEN CALL CVIPG;                                             1301
         TM    CVIQUIT,B'00000100'                                 1301
         BNZ   @RF01301                                            1301
         BAL   @14,CVIPG                                           1302
*    ELSE;                                                         1303
@RF01301 DS    0H                                                  1304
*    IF CVIQUIT='0'B                                               1304
*     THEN DO;                                                     1304
         TM    CVIQUIT,B'00000100'                                 1304
         BNZ   @RF01304                                            1304
*      CVINPUT=4;                                                  1306
         LA    CVINPUT,4                                           1306
*      CALL CVILOC;                                                1307
         BAL   @14,CVILOC                                          1307
*      RPTONLIN='0'B;                                              1308
         NI    RPTONLIN(CVIWKPT2),B'11101111'                      1308
*      RPRLIVE='0'B;                                               1309
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1309
*      CVINPUT=4;                                                  1310
         LA    CVINPUT,4                                           1310
*      CALL CVIUNLOC;                                              1311
         BAL   @14,CVIUNLOC                                        1311
*     END;                                                         1312
*    ELSE;                                                         1313
@RF01304 DS    0H                                                  1314
*/********************************************************************/
*/* IF QUIT SWITCH NOT SET AND RESOURCE NAME IN THE NCSPL (NCSPLRID) */
*/* IS SAME AS LINE PORTION OF PORT ENTRY, INDICATING VARY AGAINST   */
*/* LINE PORTION, THEN INVOKE CVIPEPL2 TO DEACTIVATE THE LINE.       */
*/********************************************************************/
*    IF CVIQUIT='0'B & NCSPLRID=RPRNAME                            1314
*     THEN DO;                                                     1314
         TM    CVIQUIT,B'00000100'                                 1314
         BNZ   @RF01314                                            1314
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(CVIWKPT2)              1314
         BNE   @RF01314                                            1314
*      CALL CVIPEPLN;                                              1316
         BAL   @14,CVIPEPLN                                        1316
*      CVINPUT=4;                                                  1317
         LA    CVINPUT,4                                           1317
*      CALL CVILOC;                                                1318
         BAL   @14,CVILOC                                          1318
*      RPRONLIN='0'B;                                              1319
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1319
*      RPRLIVE='0'B;                                               1320
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1320
*      CVINPUT=4;                                                  1321
         LA    CVINPUT,4                                           1321
*      CALL CVIUNLOC;                                              1322
         BAL   @14,CVIUNLOC                                        1322
*     END;                                                         1323
*    ELSE;                                                         1324
@RF01314 DS    0H                                                  1325
*   END;                                                           1325
*/********************************************************************/
*/* ELSE IF COMMAND RDT ENTRY IS DIAL LINE,BUT NOT A PORT (DIAL OUT  */
*/* ONLY), THEN JUST DEACTIVATE THE LINE.                            */
*/********************************************************************/
*  ELSE DO;                                                        1326
         B     @RC01292                                            1326
@RF01292 DS    0H                                                  1327
*   CALL CVIPEPLN;                                                 1327
         BAL   @14,CVIPEPLN                                        1327
*   CVINPUT=4;                                                     1328
         LA    CVINPUT,4                                           1328
*   CALL CVILOC;                                                   1329
         BAL   @14,CVILOC                                          1329
*   RPRONLIN='0'B;                                                 1330
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1330
*   RPRLIVE='0'B;                                                  1331
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1331
*   CVINPUT=4;                                                     1332
         LA    CVINPUT,4                                           1332
*   CALL CVIUNLOC;                                                 1333
         BAL   @14,CVIUNLOC                                        1333
*  END;                                                            1334
*/********************************************************************/
*/* ELSE IF COMMAND RDT ENTRY IS LCDO, THEN CALL CVIPG TO PURGE I/O  */
*/* FOR EACH TERMINAL IN THE ISTDOT TABLE CHAINED OFF THE LCDO ENTRY.*/
*/********************************************************************/
*ELSE                                                              1335
* IF RPRENTRY=RPRENTDS                                             1335
*  THEN DO;                                                        1335
         B     @RC01291                                            1335
@RF01291 CLI   RPRENTRY(CVIWKPT2),X'20'                            1335
         BNE   @RF01335                                            1335
*   RFY ISTRDS BASED(CVIWKPT1);                                    1337
*   CVINXDOT=RDSADDOT;                                             1338
         L     @09,CVIWKPT1                                        1338
         L     @09,RDSADDOT(,@09)                                  1338
         ST    @09,CVINXDOT                                        1338
*   CVIDOTCT=1;                                                    1339
         MVC   CVIDOTCT(2),@CH00096                                1339
*   DO WHILE(CVIDOTCT<=RDSCTTRM & CVIQUIT='0'B);                   1340
         B     @DE01340                                            1340
@DL01340 DS    0H                                                  1341
*    CVIWKPT2=CVINXDOT->DOTADTRM ;                                 1341
         L     @07,CVINXDOT                                        1341
         L     CVIWKPT2,DOTADTRM(,@07)                             1341
*    IF CVIWKPT2->RPRNSNEA=CVIWKPT1                                1342
*    THEN CALL CVIPG;                                              1342
         CLC   RPRNSNEA(4,CVIWKPT2),CVIWKPT1                       1342
         BNE   @RF01342                                            1342
         BAL   @14,CVIPG                                           1343
*    ELSE;                                                         1344
@RF01342 DS    0H                                                  1345
*    CVIDOTCT=CVIDOTCT+1;                                          1345
         LA    @09,1                                               1345
         AH    @09,CVIDOTCT                                        1345
         STH   @09,CVIDOTCT                                        1345
*    CVINXDOT=CVINXDOT+LENGTH(ISTDOT);                             1346
         LA    @09,4                                               1346
         AL    @09,CVINXDOT                                        1346
         ST    @09,CVINXDOT                                        1346
*   END;                                                           1347
@DE01340 LH    @09,CVIDOTCT                                        1347
         L     @07,CVIWKPT1                                        1347
         CH    @09,RDSCTTRM(,@07)                                  1347
         BH    @DC01340                                            1347
         TM    CVIQUIT,B'00000100'                                 1347
         BZ    @DL01340                                            1347
@DC01340 DS    0H                                                  1348
*  END;                                                            1348
*/********************************************************************/
*/* ELSE COMMAND RDT ENTRY MUST BE 370X,LEASED LINE,CLUSTER,         */
*/* TERMINAL, OR COMPONENT, AND DEACTIVATE IMMEDIATE PROCESSING IS   */
*/* CONTROLLED BY CVISGIMM.                                          */
*/********************************************************************/
* ELSE   /*SEGMENT(CVISGIM)REQUEST*/DO;GOTO CVISGIM;CVISGIM#:END;  1349
         B     @RC01335                                            1349
@RF01335 DS    0H                                                  1350
         B     CVISGIM                                             1350
CVISGIM# DS    0H                                                  1352
*/********************************************************************/
*/* IF 'QUIT' SWITCH NOT SET, THEN ISSUE MESSAGE TO INDICATE THAT    */
*/* THE VARY DEACTIVATE IMMEDIATE REQUEST HAS RESULTED IN HARDWARE   */
*/* BEING TAKEN OFFLINE. HOWEVER, 'SOFTWARE' ASSOCIATED WITH THE     */
*/* DEACTIVATED NODE IS STILL AVAILABLE, ALLOWING QUEUED DATA TO BE  */
*/* OBTAINED.                                                        */
*/********************************************************************/
*IF CVIQUIT='1'B ×                                                 1352
*(RPRHDTYP^=RPRENTRN & RPRENTRY=RPRENTCC & RCCRESET='1'B) THEN;    1352
@RC01335 DS    0H                                                  1352
@RC01291 TM    CVIQUIT,B'00000100'                                 1352
         BO    @RT01352                                            1352
         CLI   RPRHDTYP(CVIWKPT2),X'01'                            1352
         BE    @RF01352                                            1352
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1352
         BNE   @RF01352                                            1352
         L     @09,CVIWKPT1                                        1352
         TM    RCCRESET(@09),B'00000100'                           1352
         BO    @RT01352                                            1352
*                                          /* @ZD13767 AND @AS10698 */
* ELSE DO;                                                         1354
@RF01352 DS    0H                                                  1355
*  CVIMSG# = '141I'; /* 370X XXX NOW DORMANT HARDWARE MAY BE DISCON. */
         MVC   CVIMSG#(4),@CC05758                                 1355
*  CALL CVIWTO;                                                    1356
         BAL   @14,CVIWTO                                          1356
* END;                                                             1357
*CVIRTNAD=CVINSI16;                                                1358
@RT01352 L     CVIRTNAD,CVINSI16                                   1358
* GEN(  EJECT);                                                    1359
           EJECT
*  /*SEGMENT(CVISGIM)START*/DO;GOTO CVISGIM@;CVISGIM:END;          1360
         B     CVISGIM@                                            1361
CVISGIM  DS    0H                                                  1363
*/********************************************************************/
*/* THIS SEGMENT IS USED BY CVIIMM TO CONTROL DEACTIVATE IMMEDIATE   */
*/* PROCESSING FOR THE FOLLOWING RDT ENTRY TYPES: 370X,LEASED LINE,  */
*/* CLUSTER,TERMINAL,COMPONENT,CLU CONTROL,LOGICAL UNIT,UTERM.       */
*/* UPON ENTRY CVIWKPT2 IS THE ADDRESS OF THE COMMAND RDT ENTRY.     */
*/* IN THIS CASE THE STRUCTURE OF THE RDT SEGMENT ALLOWS FOR FINDING */
*/* THE LOWEST LEVEL RDT ENTRY TO WHICH THE VARY REQUEST APPLIES BY  */
*/* SEARCHING ENTRIES BELOW CURRENT UNTIL EITHER THE LAST ENTRY      */
*/* IN THE SEGMENT IS FOUND (RPRENTED='1'B) OR AN ENTRY TYPE CODE    */
*/* LESS THAN OR EQUAL TO THAT OF THE COMMAND RDT ENTRY IS FOUND.    */
*/********************************************************************/
*RFY ISTRPRE BASED(CVIWKPT2);                                      1363
*CVILOOP='0'B;                                                     1364
         NI    CVILOOP,B'11011111'                                 1364
*IF RPRENTED='0'B                                                  1365
* THEN DO WHILE(CVILOOP='0'B);                                     1365
         TM    RPRENTED(CVIWKPT2),B'00000100'                      1365
         BNZ   @RF01365                                            1365
         B     @DE01366                                            1366
@DL01366 DS    0H                                                  1367
*  CVIWKPT2=CVIWKPT2+RPRELEN;                                      1367
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1367
*  IF RPRENTRY<=CVIWKPT1->RPRENTRY                                 1368
*   THEN DO;                                                       1368
         L     @09,CVIWKPT1                                        1368
         CLC   RPRENTRY(1,CVIWKPT2),RPRENTRY(@09)                  1368
         BH    @RF01368                                            1368
*     CVIWKPT2=CVIWKPT2-RPRPELEN;                                  1370
         SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        1370
*     CVILOOP='1'B;                                                1371
         OI    CVILOOP,B'00100000'                                 1371
*    END;                                                          1372
*  ELSE                                                            1373
*   IF RPRENTED='1'B                                               1373
*    THEN CVILOOP='1'B;                                            1373
         B     @RC01368                                            1373
@RF01368 TM    RPRENTED(CVIWKPT2),B'00000100'                      1373
         BNO   @RF01373                                            1373
         OI    CVILOOP,B'00100000'                                 1374
*   ELSE;                                                          1375
@RF01373 DS    0H                                                  1376
* END;                                                             1376
@RC01368 DS    0H                                                  1376
@DE01366 TM    CVILOOP,B'00100000'                                 1376
         BZ    @DL01366                                            1376
*ELSE;                                                             1377
@RF01365 DS    0H                                                  1378
*/********************************************************************/
*/* LOOP CALLING CVIPG TO PURGE I/O FOR EACH RDT ENTRY WITHIN THE    */
*/* SCOPE OF THE COMMAND, STOPPING ONLY IF THE LOOP CONTROL          */
*/* RDT ENTRY POINTER CVIWKPT2 INDICATES THE COMMAND RDT ENTRY HAS   */
*/* BEEN PROCESSED OR IF THE 'QUIT' SWITCH GETS SET.                 */
*/********************************************************************/
*IF RPRENTRY=RPRENTCC                                              1378
*  × RPRENTRY=RPRENTLU                                             1378
*  THEN IF NCSPLEBN='1'B × NCSPLVCD=NCSPLVC2 /*ON PU VARY PAB OR WAS
*                                    THE CMD A MODIFY DUMP   @OZ08415*/
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1378
         BE    @RT01378                                            1378
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1378
         BNE   @RF01378                                            1378
@RT01378 DS    0H                                                  1379
*         THEN CALL CVIPG;                                         1379
         TM    NCSPLEBN(CVINCSPL),B'00100000'                      1379
         BO    @RT01379                                            1379
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1379
         BNE   @RF01379                                            1379
@RT01379 DS    0H                                                  1380
         BAL   @14,CVIPG                                           1380
*         ELSE;                                                    1381
@RF01379 DS    0H                                                  1382
*  ELSE CALL CVIPG;                                                1382
         B     @RC01378                                            1382
@RF01378 BAL   @14,CVIPG                                           1382
*DO WHILE(CVIQUIT='0'B & CVIWKPT2^=CVIWKPT1);                      1383
@RC01378 B     @DE01383                                            1383
@DL01383 DS    0H                                                  1384
* CVIWKPT2=CVIWKPT2-RPRPELEN;                                      1384
         SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        1384
* IF RPRENTRY=RPRENTCC                                             1385
*   × RPRENTRY=RPRENTLU                                            1385
*   THEN IF NCSPLEBN='1'B × NCSPLVCD=NCSPLVC2 /*ON PU VARY PAB OR WAS
*                                     THE CMD A MODIFY DUMP  @OZ08415*/
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1385
         BE    @RT01385                                            1385
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1385
         BNE   @RF01385                                            1385
@RT01385 DS    0H                                                  1386
*          THEN CALL CVIPG;                                        1386
         TM    NCSPLEBN(CVINCSPL),B'00100000'                      1386
         BO    @RT01386                                            1386
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1386
         BNE   @RF01386                                            1386
@RT01386 DS    0H                                                  1387
         BAL   @14,CVIPG                                           1387
*          ELSE;                                                   1388
@RF01386 DS    0H                                                  1389
*   ELSE CALL CVIPG;                                               1389
         B     @RC01385                                            1389
@RF01385 BAL   @14,CVIPG                                           1389
*END;                        /* DO WHILE */                        1390
@RC01385 DS    0H                                                  1390
@DE01383 TM    CVIQUIT,B'00000100'                                 1390
         BNZ   @DC01383                                            1390
         C     CVIWKPT2,CVIWKPT1                                   1390
         BNE   @DL01383                                            1390
@DC01383 DS    0H                                                  1391
*/********************************************************************/
*/* IF ALL PURGES SUCCESSFUL AND A MODIFY DUMP IS INDICATED,         */
*/* SCHEDULE A DUMP OF THE 370X.                                     */
*/********************************************************************/
*IF CVIQUIT='0'B                                                   1391
* THEN                                                             1391
         TM    CVIQUIT,B'00000100'                                 1391
         BNZ   @RF01391                                            1391
*  IF NCSPLVCD=NCSPLVC2                                            1392
*   THEN                                                           1392
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1392
         BNE   @RF01392                                            1392
*    /*SEGMENT(CVIDPIT)REQUEST*/DO;GOTO CVIDPIT;CVIDPIT#:END;      1393
         B     CVIDPIT                                             1394
*   ELSE;                                                          1396
@RF01392 DS    0H                                                  1397
* ELSE;                                                            1397
@RF01391 DS    0H                                                  1398
*/********************************************************************/
*/* IF ALL PURGES SUCCESSFUL AND COMMAND RDT ENTRY IS 370X,  @XM95350*/
*/* THEN CALL ISTINCVP                                       @XM95350*/
*/* TO ISSUE 'DEACTIVATE GROUP ORDERLY' AND 'RECORD DEVICE STATISTICS*/
*/* COMMANDS FOR THE 370X.                                           */
*/********************************************************************/
*IF CVIQUIT='0'B                                                   1398
* THEN DO;                                                         1398
@RC01391 TM    CVIQUIT,B'00000100'                                 1398
         BNZ   @RF01398                                            1398
*  IF RPRENTRY^=RPRENTLH                                           1400
*   THEN                                                           1400
         CLI   RPRENTRY(CVIWKPT2),X'03'                            1400
         BE    @RF01400                                            1400
*    IF RPRENTRY=RPRENTRN                                          1401
*     THEN                                                         1401
         CLI   RPRENTRY(CVIWKPT2),X'01'                            1401
         BNE   @RF01401                                            1401
*      DO;                                                 /*@XM95350*/
*      IF NCSPLVID='1'B       /* ORIGINAL CMD A MODIFY DUMP? @XM95350*/
*       THEN                                                       1403
         TM    NCSPLVID(CVINCSPL),B'00100000'                      1403
         BNO   @RF01403                                            1403
*        NCSVBF11='1'B;  /* YES - TURN ON INTERNAL ONLY FLAG @XM95350*/
         OI    NCSVBF11(CVINCSPL),B'00100000'                      1404
*       ELSE;                                              /*@XM95350*/
@RF01403 DS    0H                                                  1406
*         RFY ISTRUB BASED(ADDR(CVIRU));                   /*@D32CKLV*/
*         IF RRNRBREM='0'B &         /* LOCAL RN AND NOT     @D32CKLV*/
*            NCSVBF11='0'B           /* INTERNAL ONLY        @D32CKLV*/
*          THEN DO;                                        /*@D32CKLV*/
         L     @09,CVIWKPT1                                        1407
         TM    RRNRBREM(@09),B'00000100'                           1407
         BNZ   @RF01407                                            1407
         TM    NCSVBF11(CVINCSPL),B'00100000'                      1407
         BNZ   @RF01407                                            1407
*            NSRUID=NSRUNS;                                /*@D32CKLV*/
         LA    @09,CVIRU                                           1409
         MVI   NSRUID(@09),X'01'                                   1409
*            NSRUSUB=NSRUPCS;                              /*@D32CKLV*/
         MVI   NSRUSUB(@09),X'02'                                  1410
*            NSRURCD=NSRUSSV;                              /*@D32CKLV*/
         MVI   NSRURCD(@09),X'11'                                  1411
*            NSSSVDAF=RPRDAF;        /* RN DAF               @D32CKLV*/
         MVC   NSSSVDAF(2,@09),RPRDAF(CVIWKPT2)                    1412
*            NSSSVT=NSDELAY;                               /*@D32CKLV*/
         MVI   NSSSVT(@09),X'05'                                   1413
*            NSSSVT5A=0;                                   /*@D32CKLV*/
         SLR   @07,@07                                             1414
         STCM  @07,3,NSSSVT5A(@09)                                 1414
*            NCSPLRUO=ADDR(CVIRU);   /* RU ADDR              @D32CKLV*/
         ST    @09,NCSPLRUO(,CVINCSPL)                             1415
*            NCSPLOLN=8;                                   /*@D32CKLV*/
         MVC   NCSPLOLN(2,CVINCSPL),@CH00094                       1416
*            NCSPLRUI=0;                                   /*@D32CKLV*/
         ST    @07,NCSPLRUI(,CVINCSPL)                             1417
*            NCSPLDAF=RPRDAF;                              /*@D32CKLV*/
         MVC   NCSPLDAF(2,CVINCSPL),RPRDAF(CVIWKPT2)               1418
*            NCSPLSAF=0;                                   /*@D32CKLV*/
         STH   @07,NCSPLSAF(,CVINCSPL)                             1419
*            NCSPLCMD=NCSCSSV;                             /*@D32CKLV*/
         MVC   NCSPLCMD(2,CVINCSPL),@CB03447                       1420
*            CALL CVIDOIO;                                 /*@D32CKLV*/
         BAL   @14,CVIDOIO                                         1421
*          END;                                            /*@D32CKLV*/
*          ELSE;                                           /*@D32CKLV*/
@RF01407 DS    0H                                                  1424
*        NCSSDLK='1'B;        /* DONT CALL CXO AT CVINORM @ZD13819 */
         OI    NCSSDLK(CVINCSPL),B'01000000'                       1424
*        CALL CVIINCX0;   /* INTERFACE ISTINCX0             @ZD13819 */
         BAL   @14,CVIINCX0                                        1425
*        NCSPLVIS='1'B;                                            1426
         OI    NCSPLVIS(CVINCSPL),B'00000010'                      1426
*        CVINPUT=CVINCSPL;                                         1427
         LR    CVINPUT,CVINCSPL                                    1427
*        CALL ISTINCVP;                                            1428
*                                                                  1428
         L     @15,@CV05656                                        1428
         BALR  @14,@15                                             1428
*          DO;                                                     1429
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1430
*          /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/           1430
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1430
         L     @09,NCSPLRPH(,CVINCSPL)                             1430
         L     @09,RPHCRR(,@09)                                    1430
         L     @09,CRACRR(,@09)                                    1430
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1430
         MVI   VYCCRT(@09),B'00000000'                             1430
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1431
         OI    CINCVI(@09),B'00000100'                             1431
*          END;                                                    1432
*        NCSPLVIS='0'B;                                            1433
         NI    NCSPLVIS(CVINCSPL),B'11111101'                      1433
*      END;                                                        1434
*/********************************************************************/
*/* ELSE IF ALL PURGES SUCCESSFUL AND COMMAND RDT ENTRY IS LEASED    */
*/* LINE, THEN CALL CVIPEPLN TO DEACTIVATE THE LINE.                 */
*/* OR, IF COMMAND RDT ENTRY IS TERMINAL ON A LOCAL CONTROL UNIT,    */
*/* CALL CVILCLPR TO RECORD DEVICE STATISTICS FOR THE LOCAL TERMINAL */
*/* VARIED OFFLINE.                                                  */
*/* FOR OTHER TYPE RDT ENTRIES, CALL CVIENTRY TO DEACTIVATE THE NODES*/
*/********************************************************************/
*    ELSE                                                          1435
*     IF RPRENTRY=RPRENTLN                                         1435
*      THEN DO;                                                    1435
         B     @RC01401                                            1435
@RF01401 CLI   RPRENTRY(CVIWKPT2),X'50'                            1435
         BNE   @RF01435                                            1435
*       CALL CVIPEPLN;                                             1437
         BAL   @14,CVIPEPLN                                        1437
*       CVINPUT=4;                                                 1438
         LA    CVINPUT,4                                           1438
*       CALL CVILOC;                                               1439
         BAL   @14,CVILOC                                          1439
*       RPRONLIN='0'B;                                             1440
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1440
*       CVINPUT=4;                                                 1441
         LA    CVINPUT,4                                           1441
*       CALL CVIUNLOC;                                             1442
         BAL   @14,CVIUNLOC                                        1442
*      END;                                                        1443
*     ELSE                                                         1444
*      IF RPRENTRY=RPRENTTR                                        1444
*        & RPRNSNEA->RPRENTRY=RPRENTLC                             1444
*         THEN                                                     1444
         B     @RC01435                                            1444
@RF01435 CLI   RPRENTRY(CVIWKPT2),X'80'                            1444
         BNE   @RF01444                                            1444
         L     @09,RPRNSNEA(,CVIWKPT2)                             1444
         CLI   RPRENTRY(@09),X'45'                                 1444
         BNE   @RF01444                                            1444
*           DO;                                                    1445
*           CVIRDS='1'B;                                           1446
         OI    CVIRDS,B'00000010'                                  1446
*           CVIWKPT2=RPRNSNEA;                                     1447
         LR    CVIWKPT2,@09                                        1447
*           CALL CVILCLPR;                                         1448
         BAL   @14,CVILCLPR                                        1448
*           CVINPUT=4;                                             1449
         LA    CVINPUT,4                                           1449
*           CALL CVILOC;                                           1450
         BAL   @14,CVILOC                                          1450
*     /* SETTING ONLINE AND LIVE OFF                         @ZA25164*/
*     /* FOR LC REMOVED FROM HERE                            @ZA25164*/
*           CVIWKPT2=CVIWKPT2+RPRELEN;                             1451
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1451
*           CVINPUT=4;                                             1452
         LA    CVINPUT,4                                           1452
*           CALL CVIUNLOC;                                         1453
         BAL   @14,CVIUNLOC                                        1453
*           CVIRDS='0'B;                                           1454
         NI    CVIRDS,B'11111101'                                  1454
*          END;                                                    1455
*        ELSE DO;                                                  1456
         B     @RC01444                                            1456
@RF01444 DS    0H                                                  1457
*             IF RPRENTRY=RPRENTLU                                 1457
*               THEN CALL CVIDELOG;                                1457
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1457
         BNE   @RF01457                                            1457
         BAL   @14,CVIDELOG                                        1458
*               ELSE IF RPRENTRY=RPRENTCC                          1459
*                    THEN CALL CVIDECC;                            1459
         B     @RC01457                                            1459
@RF01457 CLI   RPRENTRY(CVIWKPT2),X'71'                            1459
         BNE   @RF01459                                            1459
         BAL   @14,CVIDECC                                         1460
*                    ELSE;                                         1461
@RF01459 DS    0H                                                  1462
*             CVINPUT=4;                                           1462
@RC01457 LA    CVINPUT,4                                           1462
*             CALL CVILOC;                                         1463
         BAL   @14,CVILOC                                          1463
*             RPRONLIN='0'B;                                       1464
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1464
*         RPRLIVE='0'B;                                            1465
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1465
*         CVINPUT=4;                                               1466
         LA    CVINPUT,4                                           1466
*         CALL CVIUNLOC;                                           1467
         BAL   @14,CVIUNLOC                                        1467
*        END;                                                      1468
*/*          COMMAND IS AGAINST LOCAL HEADER                  */   1469
*    ELSE;                                                         1469
@RF01400 DS    0H                                                  1470
*   END;                                                           1470
*  ELSE;                                                           1471
@RF01398 DS    0H                                                  1472
*  /*SEGMENT(CVISGIM)FINISH*/DO;GOTO CVISGIM#;CVISGIM@:END;        1472
@RC01398 DS    0H                                                  1473
         B     CVISGIM#                                            1473
*CVIINCX0: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 1475
         B     @PB00009                                            1475
CVIINCX0 DS    0H                                                  1476
*/*------------------------------------------------------------------*/
*/* THIS SUBROUTINE SCAN FOR SDLC LINK RDTE AND INTERFACE INCXO      */
*/*------------------------------------------------------------------*/
*CVISAVE3=CVIRTNAD;                                                1476
         ST    CVIRTNAD,CVISAVE3                                   1476
*        CVIWKPT3=CVIWKPT1;  /* SET UP WORK POINTER      @ZD13819 */
         L     @09,CVIWKPT1                                        1477
         ST    @09,CVIWKPT3                                        1477
*        DO WHILE (CVIWKPT3->RPRENTED='0'B); /* SCAN RN      @ZD13819*/
         B     @DE01478                                            1478
@DL01478 DS    0H                                                  1479
*         IF CVIWKPT3->RPRENTRY=RPRENTLN &                         1479
*         CVIWKPT3->RLNRATRN='1'B            /* SDLC LINK ?  @ZD13819*/
*         THEN DO;                           /* YES, CALL INCXO */ 1479
         L     @09,CVIWKPT3                                        1479
         CLI   RPRENTRY(@09),X'50'                                 1479
         BNE   @RF01479                                            1479
         TM    RLNRATRN(@09),B'00000010'                           1479
         BNO   @RF01479                                            1479
*          CVINPUT=CVINCSPL;                               /*@ZD13819*/
         LR    CVINPUT,CVINCSPL                                    1481
*          NCSPLRAD=CVIWKPT3;                              /*@ZD13819*/
         ST    @09,NCSPLRAD(,CVINCSPL)                             1482
*          CALL ISTINCX0;                                  /*@ZD13819*/
*                                                                  1483
         L     @15,@CV05774                                        1483
         BALR  @14,@15                                             1483
*            DO;                                                   1484
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1485
*            /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/         1485
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1485
         L     @09,NCSPLRPH(,CVINCSPL)                             1485
         L     @09,RPHCRR(,@09)                                    1485
         L     @09,CRACRR(,@09)                                    1485
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1485
         MVI   VYCCRT(@09),B'00000000'                             1485
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1486
         OI    CINCVI(@09),B'00000100'                             1486
*            END;                           /*@ZD13819*/           1487
*         END;                                             /*@ZD13819*/
*         ELSE;                                            /*@ZD13819*/
@RF01479 DS    0H                                                  1490
*         CVIWKPT3=CVIWKPT3+CVIWKPT3->RPRELEN;             /*@ZD13819*/
         L     @09,CVIWKPT3                                        1490
         LH    @07,RPRELEN(,@09)                                   1490
         ALR   @07,@09                                             1490
         ST    @07,CVIWKPT3                                        1490
*        END;                                              /*@ZD13819*/
@DE01478 L     @09,CVIWKPT3                                        1491
         TM    RPRENTED(@09),B'00000100'                           1491
         BZ    @DL01478                                            1491
*CVIRTNAD=CVISAVE3;                                                1492
         L     CVIRTNAD,CVISAVE3                                   1492
*END CVIINCX0;                                                     1493
@EL00009 DS    0H                                                  1493
@EF00009 DS    0H                                                  1493
@ER00009 BR    @14                                                 1493
@PB00009 DS    0H                                                  1494
* GEN(  EJECT);                                                    1494
           EJECT
*  /*SEGMENT(CVIDPIT)START*/DO;GOTO CVIDPIT@;CVIDPIT:END;          1495
         B     CVIDPIT@                                            1496
CVIDPIT  DS    0H                                                  1498
*/********************************************************************/
*/* THIS SEGMENT IS USED IN CONJUNCTION WITH CVISGIM TO SCHEDULE A   */
*/* DUMP OF AN RN DURING DEACTIVATE IMMEDIATE PROCESSING.            */
*/* THE LOAD/DUMP ROUTINES ARE SCHEDULED VIA TPQUE OF THE NCSPL TO   */
*/* THE DLR PAB. THE NCSPL VERB MODIFIER IS SET TO IMMEDIATE AND     */
*/* 'VARY INTERNAL ONLY'.                                            */
*/********************************************************************/
*DCL CVINXTWA PTR(31) BASED(CVINXTAV);                             1498
*CVINXTWA=CVISAVE;                                                 1499
         L     @09,NCSPLWKA(,CVINCSPL)                             1499
         L     @09,CVINXTAV(,@09)                                  1499
         ST    CVISAVE,CVINXTWA(,@09)                              1499
*RFY ISTATCVT BASED(NCSPLCVT);                                     1500
*RFY ISTDYPAB BASED(RDTDPAB);                                      1501
*NCSPLCMD=NCSDUCMD;                                                1502
         MVC   NCSPLCMD(2,CVINCSPL),@CB03489                       1502
*CVINPUT=NCSPLRPH;                                                 1503
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         1503
*/*  TPQUE (CVINCSPL,DYPPAB) NORM */                               1504
*                                                                  1504
* DO;                                                              1504
* RFY (GPR00P,GPR01P,GPR04P,GPR05P,GPR15P) RSTD;                   1505
* GEN REFS(GPR01P) SETS(RPHWORK)                                   1506
*        (STM GPR02P,GPR08P,RPHWORK(GPR01P));                      1506
         STM GPR02P,GPR08P,RPHWORK(GPR01P)
* GPR00P=0;                                                        1507
         SLR   GPR00P,GPR00P                                       1507
* GPR15P=ADDR(DYPPAB); /*HOLD PAB PTR*/                            1508
         L     @09,CVIWKPT1                                        1508
         L     GPR15P,RDTDPAB(,@09)                                1508
         LA    GPR15P,DYPPAB(,GPR15P)                              1508
* GPR04P=CVINCSPL; /*WORK ELE PTR*/                                1509
         LR    GPR04P,CVINCSPL                                     1509
* GPR05P=GPR15P; /*PASS PAB PTR*/                                  1510
         LR    GPR05P,GPR15P                                       1510
* CALL ATCLCPTR->ATCAP37->ISTAPC37;                                1511
         L     @09,ATCLCPTR                                        1511
         L     @15,ATCAP37(,@09)                                   1511
         BALR  @14,@15                                             1511
* GEN(NOPR  0)NOSETS NOREFS;                                       1512
         NOPR  0
* RFY (GPR00P,GPR01P,GPR04P,GPR05P,GPR15P) UNRSTD;                 1513
* END; /**** END OF TPQUE GENERATION ****/                         1514
*CVINPUT=NCSPLRPH;                                                 1515
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         1515
*/*  TPWAIT   */                                                   1516
* DO; /* BEGIN TPWAIT GENERATION*/                                 1516
* RFY (GPR01P,GPR14P,GPR15P) RSTD;                                 1517
* RFY (GPR00P) RSTD;                                               1518
* GEN (STM   GPR00P,GPR15P,RPHWORK(GPR01P))                        1519
* REFS(GPR00P,GPR01P,GPR15P) SETS(RPHWORK);                        1519
         STM   GPR00P,GPR15P,RPHWORK(GPR01P)
* RFY (GPR00P) UNRSTD;                                             1520
* GPR15P=ADDR(LHAA0091);                                           1521
         LA    GPR15P,LHAA0091                                     1521
* GPR14P=0;                                                        1522
         SLR   GPR14P,GPR14P                                       1522
* GPR15P=GPR15P & '00FFFFFF'X;                                     1523
         N     GPR15P,@CF05782                                     1523
* GPR15P=GPR15P × RPHWT1;                                          1524
         O     GPR15P,@CF02523                                     1524
* CS (GPR14P,GPR15P,GPR01P->RPHRESMA);                             1525
         CS    GPR14P,@15,RPHRESMA(GPR01P)                         1525
* BC (7,LHAB0091);                                                 1526
*                                                                  1526
         BC    7,LHAB0091                                          1526
*/* TPEXIT  NONE */                                                1527
* DO;                                                              1527
*   RESPECIFY GPR15P RSTD;                                         1528
*                                                                  1528
*/* ATBUILD (ISTPAB,ISTDYPAB,ISTATCVT)  */                         1529
*/* END OF ATBUILD */                                              1529
*                                                                  1529
* DO; /* LISATCVT CVTBASE(PAGEABLE,(GPR15P)) */                    1529
*   GPR15P = ATCLCPTR; /*SET UP ATCVT POINTER*/                    1530
         L     GPR15P,ATCLCPTR                                     1530
* END; /*LISATCVT*/                                                1531
*   RESPECIFY GPR00F RSTD;                                         1532
*   GPR00F=0;     /*SET PARAMETER REGISTER TO 0*/                  1533
         SLR   GPR00F,GPR00F                                       1533
*   GPR15P=GPR15P->ATCAP31;                                        1534
         L     GPR15P,ATCAP31(,GPR15P)                             1534
*   DCL FMZL0096 BASED(GPR15P) LABEL VALUERANGE(*);                1535
*   CALL FMZL0096;                                                 1536
         BALR  @14,@15                                             1536
*   RESPECIFY (GPR00F,GPR15P) UNRSTD;                              1537
* END; /***** END OF TPEXIT  *****/                                1538
*LHAB0091:;                                                        1539
LHAB0091 DS    0H                                                  1540
* GPR01P->RPHRESMA = 0;                                            1540
         SLR   @09,@09                                             1540
         ST    @09,RPHRESMA(,GPR01P)                               1540
* RFY (GPR00P) RSTD;                                               1541
*LHAA0091:;                                                        1542
LHAA0091 DS    0H                                                  1543
* GEN (LM    GPR00P,GPR15P,RPHWORK(GPR01P))                        1543
* REFS(RPHWORK,GPR01P) SETS(GPR00P,GPR15P);                        1543
         LM    GPR00P,GPR15P,RPHWORK(GPR01P)
* RFY (GPR00P,GPR01P,GPR14P,GPR15P) UNRSTD;                        1544
* END; /*****END OF TPWAIT *****/                                  1545
*  NCSVBF11='1'B;                                       /*   @DM10601*/
*  NCSVBF12='1'B;                                       /*   @DM10601*/
         OI    NCSVBF11(CVINCSPL),B'00110000'                      1547
*  /*SEGMENT(CVIDPIT)FINISH*/DO;GOTO CVIDPIT#;CVIDPIT@:END;        1548
         B     CVIDPIT#                                            1549
*END CVIIMM;                                                       1551
@EL00008 DS    0H                                                  1551
@EF00008 DS    0H                                                  1551
@ER00008 BR    @14                                                 1551
@PB00008 DS    0H                                                  1552
* GEN(  EJECT);                                                    1552
           EJECT
*CVIPG: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                    1553
         B     @PB00010                                            1553
CVIPG    DS    0H                                                  1554
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY DEACTIVATE IMMEDIATE PROCESSING        */
*/* (CVIIMM AND CVISGIMM) TO PURGE I/O FOR NODES BEING DEACTIVATED.  */
*/* CVIWKPT2 IS THE ADDRESS OF THE RDT ENTRY CURRENTLY BEING DONE.   */
*/********************************************************************/
*CVINSI4=CVIRTNAD;                                                 1554
         ST    CVIRTNAD,CVINSI4                                    1554
*RFY ISTRPRE BASED(CVIWKPT2);                                      1555
*/********************************************************************/
*/*  BUILD A CID IN THE NCSPL (NCSIOCID)                     @XM96200*/
*/* TO BE PASSED TO THE I/O ROUTINE THAT WILL SET UP THE PURGE.      */
*/* IF THE RDT ENTRY IS FOR A COMPONENT,TERMINAL,LOGICAL UNIT,       */
*/* CLUSTER,PORT, OR 370X THEN USE THE DAF FROM THE RDT ENTRY.       */
*/********************************************************************/
* IF RPRENTRY=RPRENTTR ×                                           1556
*    RPRENTRY=RPRENTCM×RPRENTRY=RPRENTCL×                          1556
*    RPRENTRY=RPRENTLU×RPRENTRY=RPRENTCC×RPRENTRY=RPRENTUT×        1556
*    (RPRENTRY=RPRENTLN & RLNPORT='1'B)×RPRENTRY=RPRENTRN          1556
*  ×                    /* DO PURGE WHEN DOING MODIGY DUMP   @ZA30470*/
*    ( RPRENTRY=RPRENTRN & NCSPLVCD=NCSPLVC2)              /*@ZA30470*/
*  THEN DO;                                                        1556
         CLI   RPRENTRY(CVIWKPT2),X'80'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'90'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'70'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'75'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'50'                            1556
         BNE   @GL00051                                            1556
         TM    RLNPORT(CVIWKPT2),B'00010000'                       1556
         BO    @RT01556                                            1556
@GL00051 CLI   RPRENTRY(CVIWKPT2),X'01'                            1556
         BE    @RT01556                                            1556
         CLI   RPRENTRY(CVIWKPT2),X'01'                            1556
         BNE   @RF01556                                            1556
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1556
         BNE   @RF01556                                            1556
@RT01556 DS    0H                                                  1557
*/********************************************************************/
*/* IF NO CID WAS BUILT IN THE NCSPL (NOT ONE OF THE APPROPRIATE RDT */
*/* ENTRY TYPES) THEN NO PURGE IS DONE. OTHERWISE, OBTAIN THE DAF    */
*/* LOCK VIA CIDCTL AND CALL ISTINCIO TO ISSUE THE PURGE COMMAND.    */
*/* SET THE MINOR RC IN NCSPL TO INDICATE VARY OFFLINE. SET SPECIAL  */
*/* RC (X'87') FOR DIAL TERMINALS WHEN LINK IS GOING OFF.            */
*/* UPDATE THE COMPONENT RECOVERY RECORD AUDIT TRAIL UPON RETURN FROM*/
*/* ISTINCIO. SET THE QUIT SWITCH IF THE PURGE FAILS (NCSIORC NOT 0) */
*/********************************************************************/
* RFY (CVIR0,CVIR2) RSTD;                                          1558
* NCSIOCID=CVISAF+RPRDAF;                                          1559
         LH    @09,RPRDAF(,CVIWKPT2)                               1559
         N     @09,@CF06623                                        1559
         ST    @09,NCSIOCID(,CVINCSPL)                             1559
* CALL CVICID;                                                     1560
         BAL   @14,CVICID                                          1560
* IF CVIRTNCD=0                                                    1561
*  THEN DO;               /* CVIPURG */                            1561
         LTR   CVIRTNCD,CVIRTNCD                                   1561
         BNZ   @RF01561                                            1561
*   IF RPRENTRY=RPRENTCC                                   /*@ZA20465*/
*      THEN                                                /*@ZA20465*/
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1563
         BNE   @RF01563                                            1563
*        NCSOVFMC='1'B;                                    /*@ZA20465*/
         OI    NCSOVFMC(CVINCSPL),B'10000000'                      1564
*      ELSE                                                /*@ZA20465*/
*        DO;                                               /*@ZA20465*/
         B     @RC01563                                            1565
@RF01563 DS    0H                                                  1566
*         NCSOVFMC='0'B;                                   /*@ZA20465*/
         NI    NCSOVFMC(CVINCSPL),B'01111111'                      1566
*         NCSOUFMC='0'B;                                   /*@ZA20465*/
         NI    NCSOUFMC(CVINCSPL),B'11101111'                      1567
*        END;                                              /*@ZA20465*/
*   NCSPLCMD=NCSNCPPG;                                             1569
@RC01563 MVC   NCSPLCMD(2,CVINCSPL),@CB03481                       1569
*   IF ATCQKHLT='1'B /* IS HALT IN PROCESS                   @XM17552*/
*      THEN                                                        1570
         L     @09,NCSPLCVT(,CVINCSPL)                             1570
         TM    ATCQKHLT(@09),B'00010000'                           1570
         BNO   @RF01570                                            1570
*       NCSPRMRC=LCPMNPR; /*HALT PURGE MINOR R.C.            @XM17552*/
         MVI   NCSPRMRC(CVINCSPL),X'0B'                            1571
*      ELSE                                                        1572
*       NCSPRMRC=LCPMNVD; /*DEACTIVATE PURGE MINOR R.C.      @XM17552*/
         B     @RC01570                                            1572
@RF01570 MVI   NCSPRMRC(CVINCSPL),X'07'                            1572
*   IF RPRENTRY=RPRENTTR                                  /* @DM09828*/
*     THEN IF RPRNSNEA->RPRENTRY=RPRENTDS                 /* @DM09828*/
@RC01570 CLI   RPRENTRY(CVIWKPT2),X'80'                            1573
         BNE   @RF01573                                            1573
*            THEN NCSPRMRC=NCSPRMRC×CVIHBIT;              /* @DM09828*/
         L     @09,RPRNSNEA(,CVIWKPT2)                             1574
         CLI   RPRENTRY(@09),X'20'                                 1574
         BNE   @RF01574                                            1574
         OI    NCSPRMRC(CVINCSPL),X'80'                            1575
*            ELSE IF RPRNSNEA->RPRENTRY                   /* @DM09828*/
*                = RPRENTLN &                             /* @DM09828*/
*                  RPRNSNEA->RLNPORT='1'B                  /*@DM14953*/
*                THEN IF CVIWKPT2=CVIWKPT1                /* @DM09828*/
         B     @RC01574                                            1576
@RF01574 L     @09,RPRNSNEA(,CVIWKPT2)                             1576
         CLI   RPRENTRY(@09),X'50'                                 1576
         BNE   @RF01576                                            1576
         TM    RLNPORT(@09),B'00010000'                            1576
         BNO   @RF01576                                            1576
*                    THEN;                                /* @DM09828*/
         C     CVIWKPT2,CVIWKPT1                                   1577
         BE    @RT01577                                            1577
*                    ELSE NCSPRMRC                        /* @DM09828*/
*                        = NCSPRMRC×CVIHBIT;              /* @DM09828*/
         OI    NCSPRMRC(CVINCSPL),X'80'                            1579
*                ELSE;                                    /* @DM09828*/
@RF01576 DS    0H                                                  1581
*     ELSE IF RPRENTRY=RPRENTUT                           /* @DM09828*/
*            THEN NCSPRMRC=NCSPRMRC×CVIHBIT;              /* @DM09828*/
         B     @RC01573                                            1581
@RF01573 CLI   RPRENTRY(CVIWKPT2),X'75'                            1581
         BNE   @RF01581                                            1581
         OI    NCSPRMRC(CVINCSPL),X'80'                            1582
*            ELSE;                                        /* @DM09828*/
@RF01581 DS    0H                                                  1584
*   NCSPLRAD=CVIWKPT2;                                             1584
@RC01573 ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        1584
*   CVINPUT=CVINCSPL;                                              1585
         LR    CVINPUT,CVINCSPL                                    1585
*   CALL ISTINCIO;                                                 1586
*                                                                  1586
         L     @15,@CV05794                                        1586
         BALR  @14,@15                                             1586
*     DO;                                                          1587
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1588
*     /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                1588
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1588
         L     @09,NCSPLRPH(,CVINCSPL)                             1588
         L     @09,RPHCRR(,@09)                                    1588
         L     @09,CRACRR(,@09)                                    1588
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1588
         MVI   VYCCRT(@09),B'00000000'                             1588
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1589
         OI    CINCVI(@09),B'00000100'                             1589
*     END;                                                         1590
*  END;                    /* END OF CIDFIND OK */                 1591
*  ELSE;                                                           1592
@RF01561 DS    0H                                                  1593
* END;                     /* END OF PURGE ENTRY LOGIC */          1593
*ELSE;                     /* DO NOT DO PURGE */                   1594
@RF01556 DS    0H                                                  1595
* RFY (CVIR0,CVIR2) UNRSTD;                                        1595
*CVIRTNAD=CVINSI4;                                                 1596
         L     CVIRTNAD,CVINSI4                                    1596
*END CVIPG;                                                        1597
@EL00010 DS    0H                                                  1597
@EF00010 DS    0H                                                  1597
@ER00010 BR    @14                                                 1597
@PB00010 DS    0H                                                  1598
* GEN(  EJECT);                                                    1598
           EJECT
*  /*SEGMENT(CVINORM)START*/DO;GOTO CVINORM@;CVINORM:END;          1599
         B     CVINORM@                                            1600
CVINORM  DS    0H                                                  1602
*/********************************************************************/
*/* THIS SEGMENT IS INVOKED BY ISTINCVI MAINLINE TO CONTROL NORMAL   */
*/* DEACTIVATE PROCESSING. (CVINORM IS INVOKED EVEN AFTER DEACTIVATE */
*/* IMMEDIATE PROCESSING HAS OCCURRED, PROVIDED A PREVIOUS VARY      */
*/* NORMAL NCSPL WAS NOT FOUND ON THE PENDING QUEUE.)                */
*/* INPUT IS CVIWKPT2 POINTING AT THE RDT ENTRY TO BE DEACTIVATED.   */
*/********************************************************************/
*RFY (ISTRPRE,ISTRLU) BASED(CVIWKPT2);                             1602
*/********************************************************************/
*/* FURTHER CVINORM PROCESSING IS BYPASSED IF:                       */
*/* 1. THE RDT ENTRY IS INVALID, OR                                  */
*/* 2. THE RDT ENTRY IS OFFLINE AND THE COMMAND IS AN IMMEDIATE      */
*/*    COMMAND BUT NOT PROCESSING THE COMMAND RDT ENTRY NOW, OR      */
*/* 3. THE RDT ENTRY IS OFFLINE ALREADY AND THE COMMAND IS NORMAL    */
*/********************************************************************/
*SWIT='0'B;                                                        1603
         NI    SWIT,B'11110111'                                    1603
*IF RPRENTRY = RPRENTLN             /* IF IT IS SDLC LINK */       1604
*  & RLNRATRN='1'B                   /* AND CVISDLK IS NOT ON */   1604
*  & NCSSDLK='0'B                                                  1604
*  THEN DO;                                                /*@D32CKLV*/
         CLI   RPRENTRY(CVIWKPT2),X'50'                            1604
         BNE   @RF01604                                            1604
         TM    RLNRATRN(CVIWKPT2),B'00000010'                      1604
         BNO   @RF01604                                            1604
         TM    NCSSDLK(CVINCSPL),B'01000000'                       1604
         BNZ   @RF01604                                            1604
*    CVINPUT=4;                                          /*ZD13845 */
         LA    CVINPUT,4                                           1606
*    CALL CVIUNLOC;                                        /*ZD13845 */
         BAL   @14,CVIUNLOC                                        1607
*    CVINPUT=CVINCSPL;                                     /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    1608
*    NCSPLRAD=CVIWKPT2;                                            1609
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        1609
*    CALL ISTINCX0;                 /* PROCESS SDLC LINK     @D32CKLV*/
*                                                                  1610
         L     @15,@CV05774                                        1610
         BALR  @14,@15                                             1610
*      DO;                                                         1611
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                1612
*      /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/               1612
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1612
         L     @09,NCSPLRPH(,CVINCSPL)                             1612
         L     @09,RPHCRR(,@09)                                    1612
         L     @09,CRACRR(,@09)                                    1612
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1612
         MVI   VYCCRT(@09),B'00000000'                             1612
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1613
         OI    CINCVI(@09),B'00000100'                             1613
*      END;                                                        1614
*    CVINPUT=4;                                            /*ZD13854 */
         LA    CVINPUT,4                                           1615
*    CALL CVILOC;                                          /*ZD13854 */
         BAL   @14,CVILOC                                          1616
*    SWIT='1'B;                                            /*@D32CKLV*/
         OI    SWIT,B'00001000'                                    1617
*  END;                                                    /*@D32CKLV*/
*  ELSE IF RPRENTRY=RPRENTIN                                       1619
*  THEN SWIT='1'B;                                         /*@D32CKLV*/
         B     @RC01604                                            1619
@RF01604 CLI   RPRENTRY(CVIWKPT2),X'82'                            1619
         BNE   @RF01619                                            1619
         OI    SWIT,B'00001000'                                    1620
*  ELSE                                                            1621
*    IF RPRENTRY=RPRENTCC × RPRENTRY=RPRENTLU                      1621
*     THEN IF NCSPLEBN='0'B                               /*@D32CKLV*/
         B     @RC01619                                            1621
@RF01619 CLI   RPRENTRY(CVIWKPT2),X'71'                            1621
         BE    @RT01621                                            1621
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1621
         BNE   @RF01621                                            1621
@RT01621 DS    0H                                                  1622
*       THEN SWIT='1'B;                                    /*@D32CKLV*/
         TM    NCSPLEBN(CVINCSPL),B'00100000'                      1622
         BNZ   @RF01622                                            1622
         OI    SWIT,B'00001000'                                    1623
*       ELSE IF RPRONLIN='1'B                              /*@D32CKLV*/
*        THEN RPRRSON='1'B;                                        1624
         B     @RC01622                                            1624
@RF01622 TM    RPRONLIN(CVIWKPT2),B'00001000'                      1624
         BNO   @RF01624                                            1624
         OI    RPRRSON(CVIWKPT2),B'00100000'                       1625
*        ELSE RPRRSON='0'B;                                        1626
         B     @RC01624                                            1626
@RF01624 NI    RPRRSON(CVIWKPT2),B'11011111'                       1626
*     ELSE;                                                /*@D32CKLV*/
@RF01621 DS    0H                                                  1628
*     IF RPRINV='1'B × SWIT='1'B                                   1628
*       THEN;                                                      1628
@RC01621 DS    0H                                                  1628
@RC01619 DS    0H                                                  1628
@RC01604 TM    RPRINV(CVIWKPT2),B'01000000'                        1628
         BO    @RT01628                                            1628
         TM    SWIT,B'00001000'                                    1628
         BO    @RT01628                                            1628
*     ELSE DO;                                                     1630
*      IF RPRENTRY=RPRENTLU & /* CMD AGAINST PU AND RDTE IS LU */  1631
*         NCSPLRPT->RPRENTRY=RPRENTCC &                            1631
*         NCSPLRPT->RCCRESET^='1'B                                 1631
*         THEN DO;            /* CK ERASE C R DATA SET       @X50BHLV*/
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1631
         BNE   @RF01631                                            1631
         L     @09,NCSPLRPT(,CVINCSPL)                             1631
         CLI   RPRENTRY(@09),X'71'                                 1631
         BNE   @RF01631                                            1631
         TM    RCCRESET(@09),B'00000100'                           1631
         BO    @RF01631                                            1631
*          IF RLUGSTAT='1'B   /* GEN I-STATUS ON ?           @X50BHLV*/
*           THEN RLURBISA='1'B; /* LET I-STATUS = GEN I S    @X50BHLV*/
         TM    RLUGSTAT(CVIWKPT2),B'00100000'                      1633
         BNO   @RF01633                                            1633
         OI    RLURBISA(CVIWKPT2),B'10000000'                      1634
*           ELSE RLURBISA='0'B;                            /*@X50BHLV*/
         B     @RC01633                                            1635
@RF01633 NI    RLURBISA(CVIWKPT2),B'01111111'                      1635
*          IF (RLURBISA='1'B & /* IF ISTATUS = ONLIN         @X50BHLV*/
*              RPRONLIN='1'B) ×                                    1636
*             (RLURBISA='0'B &                                     1636
*              RPRONLIN='0'B) THEN;                        /*@X50BHLV*/
@RC01633 TM    RLURBISA(CVIWKPT2),B'10000000'                      1636
         BNO   @GL00067                                            1636
         TM    RPRONLIN(CVIWKPT2),B'00001000'                      1636
         BO    @RT01636                                            1636
@GL00067 TM    RLURBISA(CVIWKPT2),B'10000000'                      1636
         BNZ   @RF01636                                            1636
         TM    RPRONLIN(CVIWKPT2),B'00001000'                      1636
         BZ    @RT01636                                            1636
*            ELSE DO;         /* ISTATUS NOT = ONLIN BIT     @X50BHLV*/
@RF01636 DS    0H                                                  1639
*             NCSACTV='1'B;                                /*@X50BHLV*/
*                                                                  1639
         OI    NCSACTV(CVINCSPL),B'10000000'                       1639
*/*CRIO  FUNC(ERASE)RDT((CVIWKPT2))PROCNM(ISTINCVI)*/              1640
*              DO;                                                 1640
*              RFY (GPR01P,GPR15P) RSTD;                           1641
*              GPR15P = 0;                                         1642
         SLR   GPR15P,GPR15P                                       1642
*              IF CVIWKPT2->RPRCRCPT = '1'B                        1643
*              THEN DO;                                            1643
         TM    RPRCRCPT(CVIWKPT2),B'01000000'                      1643
         BNO   @RF01643                                            1643
*              NCSCRDTE = CVIWKPT2;                                1645
         ST    CVIWKPT2,NCSCRDTE(,CVINCSPL)                        1645
*              NCSCRCMD = NCSCRDEL;                                1646
         MVI   NCSCRCMD(CVINCSPL),X'03'                            1646
*              GPR01P = ADDR(ISTNCSPL);                            1647
         LR    GPR01P,CVINCSPL                                     1647
*              CALL ISTINCR5;                                      1648
*                                                                  1648
         L     @15,@CV05799                                        1648
         BALR  @14,@15                                             1648
*              DO;                                                 1649
*/***  CRRMAINT  RPHADD((NCSPLRPH))PROCNM(ISTINCVI)COMP(VY)FUNC(RET)  *
**/                                                                1650
*              /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/       1650
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1650
         L     @09,NCSPLRPH(,CVINCSPL)                             1650
         L     @09,RPHCRR(,@09)                                    1650
         L     @09,CRACRR(,@09)                                    1650
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1650
         MVI   VYCCRT(@09),B'00000000'                             1650
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1651
         OI    CINCVI(@09),B'00000100'                             1651
*              END;                                                1652
*              RFY (GPR01P,GPR15P) UNRSTD;                         1653
*              END;                                                1654
*              END;                                                1655
@RF01643 DS    0H                                                  1656
*              /* END OF CRIO EXPANSION */                         1656
*            END;                                          /*@X50BHLV*/
*          END;                                            /*@X50BHLV*/
*     ELSE;                                                /*@D32CKLV*/
@RF01631 DS    0H                                                  1659
*     IF RPRONLIN='0'B & CVIWKPT2^=CVIWKPT1 & RPRVRYPD='0'B        1659
*       & (RPRENTRY^=RPRENTLN × RLNRATRN='1'B)             /*@ZA26906*/
*       THEN;                                                      1659
@RC01631 TM    RPRONLIN(CVIWKPT2),B'00001000'                      1659
         BNZ   @RF01659                                            1659
         C     CVIWKPT2,CVIWKPT1                                   1659
         BE    @RF01659                                            1659
         TM    RPRVRYPD(CVIWKPT2),B'00000010'                      1659
         BNZ   @RF01659                                            1659
         CLI   RPRENTRY(CVIWKPT2),X'50'                            1659
         BNE   @RT01659                                            1659
         TM    RLNRATRN(CVIWKPT2),B'00000010'                      1659
         BO    @RT01659                                            1659
*/********************************************************************/
*/* FOR A TERMINAL OR COMPONENT, OBTAIN THE RDT LOCK BEFORE GOING ON */
*/* TO PROCESS THE COMMAND.                                          */
*/********************************************************************/
*   ELSE                                                           1661
*   IF (RPRENTRY=RPRENTTR & DEVSUBND ^= '1'B) × RPRENTRY=RPRENTCM  1661
*      × RPRENTRY=RPRENTLU × RPRENTRY=RPRENTUT                     1661
*    THEN DO;                                                      1661
@RF01659 CLI   RPRENTRY(CVIWKPT2),X'80'                            1661
         BNE   @GL00076                                            1661
         TM    DEVSUBND+44(CVIWKPT2),B'00010000'                   1661
         BNO   @RT01661                                            1661
@GL00076 CLI   RPRENTRY(CVIWKPT2),X'90'                            1661
         BE    @RT01661                                            1661
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1661
         BE    @RT01661                                            1661
         CLI   RPRENTRY(CVIWKPT2),X'75'                            1661
         BNE   @RF01661                                            1661
@RT01661 DS    0H                                                  1662
*         CVINPUT=0;                                               1663
         SLR   CVINPUT,CVINPUT                                     1663
*         CALL CVILOC;                                             1664
         BAL   @14,CVILOC                                          1664
*/********************************************************************/
*/* IF TERMINAL OR COMPONENT RDT ENTRY IS SAME AS COMMAND RDT ENTRY  */
*/* OR IF PATH COUNT FOR THE NODE IS ZERO, THEN CALL CVICANCL TO     */
*/* CANCEL ANY INACTIVE CONNECTIONS OR QUEUED LOGONS FOR THE NODE.   */
*/********************************************************************/
*         RFY ISTRCPRE BASED(CVIWKPT2);                            1665
*         IF CVIWKPT1= CVIWKPT2× RPRPTHCT=0                        1666
*           THEN                                                   1666
         C     CVIWKPT2,CVIWKPT1                                   1666
         BE    @RT01666                                            1666
         CLI   RPRPTHCT(CVIWKPT2),0                                1666
         BNE   @RF01666                                            1666
@RT01666 DS    0H                                                  1667
*             DO;                                                  1667
*               CVINPUT=CVINCSPL;                          /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    1668
*               NCSPLRAD=CVIWKPT2;                         /*@D32CKLV*/
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        1669
*               CALL ISTINCX2;      /* CANCEL INACTIVE CONNECTIONS */
*                                                                  1670
         L     @15,@CV05801                                        1670
         BALR  @14,@15                                             1670
*                 DO;                                              1671
*/***  CRRMAINT  PROCNM(ISTINCVI)FUNC(RET)COMP(VY)RPHADD((NCSPLRPH))  *
**/                                                                1672
*                 /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/    1672
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          1672
         L     @09,NCSPLRPH(,CVINCSPL)                             1672
         L     @09,RPHCRR(,@09)                                    1672
         L     @09,CRACRR(,@09)                                    1672
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      1672
         MVI   VYCCRT(@09),B'00000000'                             1672
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          1673
         OI    CINCVI(@09),B'00000100'                             1673
*                 END;             /*@D32CKLV*/                    1674
*              END;                                                1675
*           ELSE IF CVIWKPT2->RPRNSNEA=CVIWKPT1                    1676
*            THEN;                                                 1676
         B     @RC01666                                            1676
@RF01666 CLC   RPRNSNEA(4,CVIWKPT2),CVIWKPT1                       1676
         BE    @RT01676                                            1676
*            ELSE DO;                                              1678
*                 CVINPUT=0;                                       1679
         SLR   CVINPUT,CVINPUT                                     1679
*                 CALL CVIUNLOC;                                   1680
         BAL   @14,CVIUNLOC                                        1680
*                 SWIT='1'B;                                       1681
         OI    SWIT,B'00001000'                                    1681
*                 END;                                             1682
*/********************************************************************/
*/* IF THERE ARE NO ACTIVE CONNECTIONS FOR THE TERMINAL OR COMPONENT */
*/* AND THE COMMAND IS FOR THE RDT ENTRY BEING PROCESSED, THEN RESET */
*/* THE RDT ENTRY TO 'OFFLINE' (RPRONLIN='0'B). ALSO, IF THE REQUEST */
*/* IS NOT IMMEDIATEOR MODIFY DUMP, CALL CVIENTRY TO DEACTIVATE THE  */
*/* DEVICE.                                                          */
*/* (IMMEDIATE PROCESSING WILL ALREADY HAVE DONE THIS.)              */
*/********************************************************************/
*   IF SWIT = '1'B                                                 1683
*     THEN;                                                        1683
@RT01676 DS    0H                                                  1683
@RC01666 TM    SWIT,B'00001000'                                    1683
         BO    @RT01683                                            1683
*     ELSE                                                         1685
*/* IF ACEVARY IS ON DIAL OPNDST IS IN PROGRESS SO DON'T*/ /*@ZA19893*/
*/* GO PENDING                                          */ /*@ZA19893*/
*     IF RCPACETR=ADDR(RCPACETR) × RCPACETR->ACEVARY='1'B /*@ZA19893*/
*      THEN DO;                                                    1685
         L     @09,RCPACETR(,CVIWKPT2)                             1685
         LA    @07,RCPACETR(,CVIWKPT2)                             1685
         CR    @09,@07                                             1685
         BE    @RT01685                                            1685
         TM    ACEVARY(@09),B'00001000'                            1685
         BNO   @RF01685                                            1685
@RT01685 DS    0H                                                  1686
*       RPRINIMM='0'B;                                    /*AS12052 */
         NI    RPRINIMM(CVIWKPT2),B'11111110'                      1687
*       CVINPUT=0;                                                 1688
         SLR   CVINPUT,CVINPUT                                     1688
*       CALL CVIUNLOC;                                             1689
         BAL   @14,CVIUNLOC                                        1689
*       IF RPRENTRY=RPRENTLU                                       1690
*         THEN DO;                                                 1690
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1690
         BNE   @RF01690                                            1690
*              CVINPUT=4;                                          1692
         LA    CVINPUT,4                                           1692
*              CALL CVIUNLOC;                                      1693
         BAL   @14,CVIUNLOC                                        1693
*              IF (NCSPLVCD=NCSPLVC1                               1694
*                & NCSVBF12='1'B) & CVIWKPT1=CVIWKPT2              1694
*                THEN;                                             1694
         CLI   NCSPLVCD(CVINCSPL),X'01'                            1694
         BNE   @RF01694                                            1694
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1694
         BNO   @RF01694                                            1694
         C     CVIWKPT2,CVIWKPT1                                   1694
         BE    @RT01694                                            1694
*                ELSE CALL CVIDELOG;                               1696
@RF01694 BAL   @14,CVIDELOG                                        1696
*              CALL CVICLOSE;                                      1697
@RT01694 BAL   @14,CVICLOSE                                        1697
*              CVINPUT=4;                                          1698
         LA    CVINPUT,4                                           1698
*              CALL CVILOC;                                        1699
         BAL   @14,CVILOC                                          1699
*              RPRONLIN='0'B;                                      1700
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1700
*              RPRLIVE='0'B;                                       1701
*              RPRVRYPD='0'B;    /* TURN OFF VARY PENDING    @XM18654*/
         NI    RPRLIVE(CVIWKPT2),B'11111100'                       1702
*              END;                                                1703
*  /*  ENTRY IS NOT AN LU    */                                    1704
*         ELSE                                                     1704
*          DO;                                                     1704
         B     @RC01690                                            1704
@RF01690 DS    0H                                                  1705
*          IF CVIWKPT1=CVIWKPT2                                    1705
*          THEN DO;                                                1705
         C     CVIWKPT2,CVIWKPT1                                   1705
         BNE   @RF01705                                            1705
*               RPRONLIN='0'B;                                     1707
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1707
*               RPRLIVE='0'B;                                      1708
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1708
*               END;                                               1709
*          ELSE;                                                   1710
@RF01705 DS    0H                                                  1711
*             IF CVIWKPT2->RPRENTRY =  /* CMD FOR HEADER     @ZA08934*/
*                CVIWKPT2->RPRHDTYP                        /*@ZA08934*/
*               THEN          /* YES-CMD FOR RN              @ZA08934*/
         CLC   RPRENTRY(1,CVIWKPT2),RPRHDTYP(CVIWKPT2)             1711
         BNE   @RF01711                                            1711
*                 DO;                                      /*@ZA08934*/
*                  RPRONLIN='0'B; /* TURN OFF ONLINE         @ZA08934*/
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1713
*                  RPRLIVE='0'B;  /* AND LIVE                @ZA08934*/
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1714
*                 END;            /* END-CMD FOR RN          @ZA08934*/
*               ELSE;          /* NO-CMD NOT FOR RN          @ZA08934*/
@RF01711 DS    0H                                                  1717
*       NCSACTV='1'B; /* UPDATE C R DATA SET                 @X50BHLV*/
         OI    NCSACTV(CVINCSPL),B'10000000'                       1717
*       NCSAIMOD='0'B;                                     /*@X50BHLV*/
         NI    NCSAIMOD(CVINCSPL),B'01111111'                      1718
*       CALL CVICRIO;                                      /*@X50BHLV*/
         BAL   @14,CVICRIO                                         1719
*       IF RPRENTRY=RPRENTTR & RPRNSNEA->RPRENTRY=RPRENTLC         1720
*         THEN DO;                                                 1720
         CLI   RPRENTRY(CVIWKPT2),X'80'                            1720
         BNE   @RF01720                                            1720
         L     @09,RPRNSNEA(,CVIWKPT2)                             1720
         CLI   RPRENTRY(@09),X'45'                                 1720
         BNE   @RF01720                                            1720
*              CVIWKPT2=RPRNSNEA;                                  1722
         LR    CVIWKPT2,@09                                        1722
*              CALL CVILCLPR;                                      1723
         BAL   @14,CVILCLPR                                        1723
*              RPRONLIN='0'B;  /* LC ENTRY */                      1724
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      1724
*              RPRLIVE='0'B;                                       1725
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       1725
*              CVIWKPT2=CVIWKPT2+RPRELEN;;                         1726
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1726
*              END;                                                1728
*         ELSE;                                                    1729
@RF01720 DS    0H                                                  1730
*        END;                                                      1730
*      END;                                                        1731
*/********************************************************************/
*/* ELSE IF TERMINAL OR COMPONENT HAS ACTIVE CONNECTIONS, THEN CALL  */
*/* CVICOUNT TO ACCUMULATE THE 'VARY PENDING' COUNT FOR THE NODE.    */
*/********************************************************************/
*     ELSE DO;                                                     1732
         B     @RC01685                                            1732
@RF01685 DS    0H                                                  1733
*      CVINPUT=0;                                                  1733
         SLR   CVINPUT,CVINPUT                                     1733
*      CALL CVIUNLOC;                                              1734
         BAL   @14,CVIUNLOC                                        1734
*      CALL CVICOUNT;                                              1735
         BAL   @14,CVICOUNT                                        1735
*     END;                                                         1736
*    END;                                                          1737
*   ELSE IF SWIT='1'B                                              1738
*          THEN;                                                   1738
         B     @RC01661                                            1738
@RF01661 TM    SWIT,B'00001000'                                    1738
         BO    @RT01738                                            1738
*          ELSE CALL CVICOUNT;                                     1740
         BAL   @14,CVICOUNT                                        1740
*  END;                                                            1741
@RT01738 DS    0H                                                  1741
@RC01661 DS    0H                                                  1741
@RT01659 DS    0H                                                  1742
*  /*SEGMENT(CVINORM)FINISH*/DO;GOTO CVINORM#;CVINORM@:END;        1742
@RT01628 DS    0H                                                  1743
         B     CVINORM#                                            1743
CVINORM@ DS    0H                                                  1745
* GEN(  EJECT);                                                    1745
           EJECT
*  /*SEGMENT(CVICKPN)START*/DO;GOTO CVICKPN@;CVICKPN:END;          1746
         B     CVICKPN@                                            1747
CVICKPN  DS    0H                                                  1749
*/********************************************************************/
*/* THIS SEGMENT IS USED BY ISTNCVI MAINLINE PROCESSING BEFORE       */
*/* INVOKING VARY IMMEDIATE OR VARY NORMAL PROCESSING TO DETERMINE IF*/
*/* THERE ARE ANY PREVIOUS VARY DEACTIVATE REQUESTS STILL PENDING    */
*/* THAT THE CURRENT COMMAND WILL AFFECT. CVIWKPT1 IS THE ADDRESS    */
*/* OF THE RDT ENTRY SPECIFIED IN THE CURRENT VARY COMMAND.          */
*/********************************************************************/
*RFY (ISTRPRE,ISTRPT,ISTRLN) BASED(CVIWKPT1);                      1749
*/********************************************************************/
*/* OBTAIN THE RDT LOCK AND THEN INVOKE CVIPTPR TO BUILD     @DM12435*/
*/* MASKS FOR THE CURRENT ENTRY.                                     */
*/********************************************************************/
*CVIGO='0'B;                                                       1750
         NI    CVIGO,B'01111111'                                   1750
*CVINPUT=0;                                                /*@DM12435*/
         SLR   CVINPUT,CVINPUT                                     1751
*CALL CVILOC;                                                      1752
         BAL   @14,CVILOC                                          1752
*  /*SEGMENT(CVIPTPR)REQUEST*/DO;GOTO CVIPTPR;CVIPTPR#:END;        1753
         B     CVIPTPR                                             1754
CVIPTPR# DS    0H                                                  1756
*/********************************************************************/
*/* IF THER ARE NO VARY REQUESTS PENDING FOR EITHER THE COMMAND RDT  */
*/* ENTRY OR A HIGHER LEVEL RDT ENTRY, THEN CALL CVIPTCD TO DECREMENT*/
*/* THE PATH COUNTS FOR RDT ENTRIES OF NODES BELOW THE ONE BEING     */
*/* DEACTIVATED.                                                     */
*/********************************************************************/
*RPRCONID=NCSPLSID;                                        /*D402600*/
         L     @09,CVIWKPT1                                        1756
         MVC   RPRCONID(9,@09),NCSPLSID(CVINCSPL)                  1756
*IF VPSW='0'B & VPHLNSW='0'B                                       1757
* THEN CALL CVIPTCD;                                       /*@ZD13332*/
         TM    VPSW,B'11000000'                                    1757
         BNZ   @RF01757                                            1757
         BAL   @14,CVIPTCD                                         1758
*/********************************************************************/
*/* IF VARY IS PENDING AGAINST THE COMMAND RDT ENTRY, THEN CHECK     */
*/* THE PREVIOUS VARY AND COMPARE IT TO THE CURRENT VARY.            */
*/* IF THE PREVIOUS VARY IS FOR AN IMMEDIATE DEACTIVATE OF IF THE    */
*/* CURRENT NCSPL IS FOR A NORMAL DEACTIVATE, THEN CALL CVIWTO TO    */
*/* ISSUE THE 'DEACTIVATE IN PROGRESS' MESSAGE (073I),SET THE QUIT   */
*/* SWITCH, AND RESET THE GO SWITCH TO BYPASS FURTHER PROCESSING.    */
*/* ELSE IF THE PREVIOUS VARY IS FOR A NORMAL DEACTIVATE BUT THE     */
*/* CURRENT REQUEST IS IMMEDIATE, SET THE RDT ENTRY TO 'IMMEDIATE'   */
*/* SET THE 'DELETE' BIT IN CURRENT NCSPL, SET THE 'SKIP HEADER' BIT,*/
*/* AND SET THE 'PURGE ONLY' SWITCH.                                 */
*/********************************************************************/
* ELSE;                                                            1759
@RF01757 DS    0H                                                  1760
*CVIRC=0;                                                  /*@XM97000*/
         SLR   @09,@09                                             1760
         ST    @09,CVIRC                                           1760
* IF VPSW='1'B                                                     1761
*  THEN   /*SEGMENT(CVIVPEN)REQUEST*/DO;GOTO CVIVPEN;CVIVPEN#:END; 1761
         TM    VPSW,B'10000000'                                    1761
         BNO   @RF01761                                            1761
         B     CVIVPEN                                             1763
*/********************************************************************/
*/* ELSE IF VARY NOT PENDING AGAINST THE COMMAND RDT ENTRY, SET THE  */
*/* 'VARY PENDING CLEANUP' FLAG AND 'ACTIVE' FLAG IN THE COMMAND     */
*/* NCSPL IN PREPARATION FOR ADDING IT TO THE 'VARY PENDING' QUEUE.  */
*/* BEFORE ADDING THE NCSPL TO THE PENDING QUEUE, IF THE COMMAND IS  */
*/* AGAINST A 370X AND IS IMMEDIATE OR MODIFY DUMP, THEN INVOKE      */
*/* SCANCEL TO SCAN THE PENDING QUEUE FOR ANY EARLIER REQUESTS       */
*/* AGAINST THE SAME RDT SEGMENT.                                    */
*/********************************************************************/
* ELSE DO;                                                         1765
         B     @RC01761                                            1765
@RF01761 DS    0H                                                  1766
* IF (RPRENTRY=RPRENTRN & NCSVBF12='1'B) × NCSVBF16='1'B           1766
*  THEN   /*SEGMENT(SCANCEL)REQUEST*/DO;GOTO SCANCEL;SCANCEL#:END; 1766
         L     @09,CVIWKPT1                                        1766
         CLI   RPRENTRY(@09),X'01'                                 1766
         BNE   @GL00083                                            1766
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1766
         BO    @RT01766                                            1766
@GL00083 TM    NCSVBF16(CVINCSPL),B'00000001'                      1766
         BNO   @RF01766                                            1766
@RT01766 DS    0H                                                  1767
         B     SCANCEL                                             1768
*  ELSE;                                                           1770
@RF01766 DS    0H                                                  1771
*/********************************************************************/
*/* IF 'HIGHER LEVEL VARY PENDING' FOR COMMAND RDT ENTRY, THEN SET   */
*/* CVIWKPT2 TO THE ADDRESS OF THE HIGHER LEVEL RDT ENTRY IN WHICH   */
*/* 'VARY PENDING' IS SET (RPRVRYPD='1'B). SET CVIWORKR TO THE       */
*/* ADDRESS OF THE NCSPL ON THE PENDING QUEUE FOR THE VARY COMMAND   */
*/* AGAINST THE HIGHER LEVEL NODE.                                   */
*/********************************************************************/
* IF VPHLNSW='1'B                                                  1771
*  THEN DO;                                                        1771
@RC01766 TM    VPHLNSW,B'01000000'                                 1771
         BNO   @RF01771                                            1771
*   IF RPRENTRY=RPRENTLN &                                         1773
*      RLNPORT='1'B &                                              1773
*      NCSPLRID=RPTCTNM                                            1773
*     THEN IF RPTVYIMM='1'B                                        1773
         L     @09,CVIWKPT1                                        1773
         CLI   RPRENTRY(@09),X'50'                                 1773
         BNE   @RF01773                                            1773
         TM    RLNPORT(@09),B'00010000'                            1773
         BNO   @RF01773                                            1773
         CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(@09)                   1773
         BNE   @RF01773                                            1773
*            THEN DO;                                              1774
         TM    RPTVYIMM(@09),B'00000100'                           1774
         BNO   @RF01774                                            1774
*                 CVIGO='1'B;                                      1776
         OI    CVIGO,B'10000000'                                   1776
*                 END;                                             1777
*            ELSE;                                                 1778
@RF01774 DS    0H                                                  1779
*     ELSE IF RPRVYIMM='1'B                                        1779
*            THEN DO;                                              1779
         B     @RC01773                                            1779
@RF01773 L     @09,CVIWKPT1                                        1779
         TM    RPRVYIMM(@09),B'00000010'                           1779
         BNO   @RF01779                                            1779
*                 CVIGO='1'B;                                      1781
         OI    CVIGO,B'10000000'                                   1781
*                 END;                                             1782
*            ELSE;                                                 1783
@RF01779 DS    0H                                                  1784
*/********************************************************************/
*/* ELSE IF PREVIOUS COMMAND IS FOR NORMAL REQUEST AND COMMAND IS AN */
*/* IMMEDIATE REQUEST, THEN SET THE 'PURGE ONLY' SWITCH AND THE      */
*/* INTERNAL 'VARY PENDING' SWITCH SO ONLY THE PURGE PROCESSING      */
*/* REQUIRED BY THE IMMEDIATE REQUEST WILL BE DONE. THE VARY NORMAL  */
*/* PROCESSING WILL BE BYPASSED, TO BE TAKEN CARE OF BY THE PENDING  */
*/* REQUEST.                                                         */
*/********************************************************************/
*   IF CVIGO='0'B             /* VYIMM WAS NOT FOUND */            1784
*    THEN DO;                                                      1784
@RC01773 TM    CVIGO,B'10000000'                                   1784
         BNZ   @RF01784                                            1784
*    IF CVINCSPL->NCSVBF12='1'B × NCSPLVCD=NCSPLVC2                1786
*     THEN DO;                                                     1786
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1786
         BO    @RT01786                                            1786
         CLI   NCSPLVCD(CVINCSPL),X'02'                            1786
         BNE   @RF01786                                            1786
@RT01786 DS    0H                                                  1787
*          IF RPRENTRY=RPRENTLN &                                  1788
*             RLNPORT='1'B &                                       1788
*             NCSPLRID=RPTCTNM                                     1788
*            THEN DO;                                              1788
         L     @09,CVIWKPT1                                        1788
         CLI   RPRENTRY(@09),X'50'                                 1788
         BNE   @RF01788                                            1788
         TM    RLNPORT(@09),B'00010000'                            1788
         BNO   @RF01788                                            1788
         CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(@09)                   1788
         BNE   @RF01788                                            1788
*                 RPTVYIMM='1'B;                                   1790
*                 RPTVRYPD='1'B;                                   1791
         OI    RPTVYIMM(@09),B'01000100'                           1791
*                 END;                                             1792
*            ELSE DO;                                              1793
         B     @RC01788                                            1793
@RF01788 DS    0H                                                  1794
*                 RPRVYIMM='1'B;                                   1794
         L     @09,CVIWKPT1                                        1794
         OI    RPRVYIMM(@09),B'00000010'                           1794
*                 RPRVRYPD='1'B;                                   1795
         OI    RPRVRYPD(@09),B'00000010'                           1795
*                 END;                                             1796
*          CVIPGSW='1'B;                                           1797
@RC01788 DS    0H                                                  1798
*          CVIVRYPD='1'B;                                          1798
         OI    CVIPGSW,B'01010000'                                 1798
*          END;                                                    1799
*/********************************************************************/
*/* ELSE IF PREVIOUS CMMD. AND COMMAND NCSPL ARE BOTH FOR NORMAL VARY*/
*/* DEACTIVATE REQUESTS, SET THE INTERNAL 'VARY PENDING' SWITCH,     */
*/* RESET THE GO BIT TO BYPASS FURTHER PROCESSING, AND SET 'VARY     */
*/* PENDING' IN THE COMMAND RDT ENTRY. DEACTIVATE WILL CONTINUE WHEN */
*/* THE PENDING NCSPL IS PROCESSED.                                  */
*/********************************************************************/
*    ELSE DO;                                                      1800
         B     @RC01786                                            1800
@RF01786 DS    0H                                                  1801
*         CVIVRYPD='1'B;                                           1801
         OI    CVIVRYPD,B'01000000'                                1801
*         CVIRC=4;                                         /*@XM97000*/
         MVC   CVIRC(4),@CF00088                                   1802
*         IF NCSPLRID=RPRNAME                                      1803
*         THEN RPRVRYPD='1'B;                                      1803
         L     @09,CVIWKPT1                                        1803
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(@09)                   1803
         BNE   @RF01803                                            1803
         OI    RPRVRYPD(@09),B'00000010'                           1804
*         ELSE RPTVRYPD='1'B;                                      1805
         B     @RC01803                                            1805
@RF01803 L     @09,CVIWKPT1                                        1805
         OI    RPTVRYPD(@09),B'01000000'                           1805
*         END;                                                     1806
*    END;                                                          1807
*ELSE DO;                   /* VYIMM WAS FOUND */                  1808
         B     @RC01784                                            1808
@RF01784 DS    0H                                                  1809
*     CVIGO='0'B;                                                  1809
*     CVIVRYPD='1'B;                                               1810
         OI    CVIVRYPD,B'01000000'                                1810
         NI    CVIGO,B'01111111'                                   1810
*     CVIRC=4;                                             /*@XM97000*/
         MVC   CVIRC(4),@CF00088                                   1811
*     IF NCSPLRID=RPRNAME                                          1812
*     THEN RPRVRYPD='1'B;                                          1812
         L     @09,CVIWKPT1                                        1812
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(@09)                   1812
         BNE   @RF01812                                            1812
         OI    RPRVRYPD(@09),B'00000010'                           1813
*     ELSE RPTVRYPD='1'B;                                          1814
         B     @RC01812                                            1814
@RF01812 L     @09,CVIWKPT1                                        1814
         OI    RPTVRYPD(@09),B'01000000'                           1814
*     END;                                                         1815
*  END;                                                            1816
* ELSE;                                                            1817
@RF01771 DS    0H                                                  1818
*END;                                                              1818
@RC01771 DS    0H                                                  1819
*/********************************************************************/
*/* RELEASE THE RDT LOCK.                                    @DM12435*/
*/********************************************************************/
*CVINPUT=0;                                                /*@DM12435*/
@RC01761 SLR   CVINPUT,CVINPUT                                     1819
*CALL CVIUNLOC;                                                    1820
         BAL   @14,CVIUNLOC                                        1820
*  /*SEGMENT(CVICKPN)FINISH*/DO;GOTO CVICKPN#;CVICKPN@:END;        1821
         B     CVICKPN#                                            1822
CVICKPN@ DS    0H                                                  1824
* GEN(  EJECT);                                                    1824
           EJECT
*  /*SEGMENT(CVIPTPR)START*/DO;GOTO CVIPTPR@;CVIPTPR:END;          1825
         B     CVIPTPR@                                            1826
CVIPTPR  DS    0H                                                  1828
*/********************************************************************/
*/* THIS SEGMENT IS INVOKED BY CVICKPND TO BUILD MASKS FOR THE       */
*/* CURRENT ENTRY.  IF THE ENTRY IS A PORT AND THE CTERM PORTION IS  */
*/* BEING DEACTIVATED, THE PORT 'VARY PENDING' AND 'HIGHER LEVEL VARY*/
*/* PENDING' BITS ARE CHECKED AND APPROPRIATE MASK SWITCHES ARE SET, */
*/* THE CTERM NAME IS MOVED INTO A NAME MASK FIELD, AND THE RDTE     */
*/* ADDRESS IS PUT IN THE NSNEA MASK FIELD.  IF THE CTERM IS NOT     */
*/* BEING DEACTIVATED OR THE ENTRY IS NOT A PORT, THE 'PENDING' BITS */
*/* ARE CHECKED AND INTERNAL SWITCHES ARE SET, THE ENTRY NAME AND    */
*/* NSNEA FIELDS ARE MOVED INTO THE APPROPRIATE MASK FIELDS.         */
*/* THESE SWITCHES AND FIELDS WILL BE USED BY CVICKPND TO DETERMINE  */
*/* ITS PROCESSING SEQUENCE.                                         */
*/********************************************************************/
*VPSW='0'B;                                                        1828
*VPHLNSW='0'B;                                                     1829
         NI    VPSW,B'00111111'                                    1829
*IF RPRENTRY=RPRENTLN & RLNPORT='1'B                               1830
*  & NCSPLRID^=RPRNAME                                             1830
*  THEN DO;                                                        1830
         L     @09,CVIWKPT1                                        1830
         CLI   RPRENTRY(@09),X'50'                                 1830
         BNE   @RF01830                                            1830
         TM    RLNPORT(@09),B'00010000'                            1830
         BNO   @RF01830                                            1830
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(@09)                   1830
         BE    @RF01830                                            1830
*       IF RPTVRYPD='1'B                                           1832
*         THEN VPSW='1'B;                                          1832
         TM    RPTVRYPD(@09),B'01000000'                           1832
         BNO   @RF01832                                            1832
         OI    VPSW,B'10000000'                                    1833
*         ELSE;                                                    1834
@RF01832 DS    0H                                                  1835
*       IF RPTHLVPD='1'B                                           1835
*         THEN VPHLNSW='1'B;                                       1835
         L     @09,CVIWKPT1                                        1835
         TM    RPTHLVPD(@09),B'00100000'                           1835
         BNO   @RF01835                                            1835
         OI    VPHLNSW,B'01000000'                                 1836
*         ELSE;                                                    1837
@RF01835 DS    0H                                                  1838
*       END;                                                       1838
*  ELSE DO;                                                        1839
         B     @RC01830                                            1839
@RF01830 DS    0H                                                  1840
*       IF RPRVRYPD='1'B                                           1840
*         THEN VPSW='1'B;                                          1840
         L     @09,CVIWKPT1                                        1840
         TM    RPRVRYPD(@09),B'00000010'                           1840
         BNO   @RF01840                                            1840
         OI    VPSW,B'10000000'                                    1841
*         ELSE;                                                    1842
@RF01840 DS    0H                                                  1843
*       IF RPRHLVPD='1'B                                           1843
*         THEN VPHLNSW='1'B;                                       1843
         L     @09,CVIWKPT1                                        1843
         TM    RPRHLVPD(@09),B'00000100'                           1843
         BNO   @RF01843                                            1843
         OI    VPHLNSW,B'01000000'                                 1844
*         ELSE;                                                    1845
@RF01843 DS    0H                                                  1846
*       END;                                                       1846
*  /*SEGMENT(CVIPTPR)FINISH*/DO;GOTO CVIPTPR#;CVIPTPR@:END;        1847
@RC01830 DS    0H                                                  1848
         B     CVIPTPR#                                            1848
CVIPTPR@ DS    0H                                                  1850
* GEN(  EJECT);                                                    1850
           EJECT
*  /*SEGMENT(SCANCEL)START*/DO;GOTO SCANCEL@;SCANCEL:END;          1851
         B     SCANCEL@                                            1852
SCANCEL  DS    0H                                                  1854
*/********************************************************************/
*/* THIS SEGMENT IS INVOKED BY CVICKPN FOR A VARY DEACTIVATE         */
*/* IMMEDIATE REQUEST AGAINST A 370X OR A MODIFY DUMP FOR WHICH      */
*/* THERE IS NO EARLIER VARY PENDING.                                */
*/* CVIWKPT1 IS A POINTER TO THE COMMAND RDT ENTRY.                  */
*/* FOR EVERY RDT ENTRY WITHIN THE 370X SEGMENT THAT HAS A VARY      */
*/* PENDING AGAINST IT (RPRVRYPD OR RPTVRYPD ='1'B) A MESSAGE IS     */
*/* WRITTEN. THE CURRENT DEACTIVATE IMMEDIATE REQUEST AGAINST THE    */
*/* 370X SEGMENT OVERRIDES THE PENDING REQUEST AGAINST LOWER LEVEL   */
*/* NODES WITHIN THE SEGMENT.                                        */
*/********************************************************************/
*RFY (ISTRPRE,ISTRLN,ISTRPT) BASED(CVIWKPT2);                      1854
*CVIWKPT2=CVIWKPT1;                                                1855
         L     CVIWKPT2,CVIWKPT1                                   1855
*CVILOOP='0'B;                                                     1856
         NI    CVILOOP,B'11011111'                                 1856
*DO WHILE(CVILOOP='0'B);                                           1857
         B     @DE01857                                            1857
@DL01857 DS    0H                                                  1858
* CVIGO='1'B;                           /* SCANCEL1 */             1858
         OI    CVIGO,B'10000000'                                   1858
*IF RPRENTRY = RPRENTCC ×             /* NO PROC. FOR PU AND LU */ 1859
*  RPRENTRY = RPRENTLU                                             1859
* THEN;                                                    /*@D32CKLV*/
         CLI   RPRENTRY(CVIWKPT2),X'71'                            1859
         BE    @RT01859                                            1859
         CLI   RPRENTRY(CVIWKPT2),X'81'                            1859
         BE    @RT01859                                            1859
* ELSE DO;                                                 /*@D32CKLV*/
*   IF RPRENTRY=RPRENTLN & RLNPORT='1'B & RPTVRYPD='1'B            1862
*      & RPTVYIMM='0'B /*PREVIOUS CMD NOT DEACT IMMEDIATE    @XM17554*/
*     THEN DO;                                             /*@D32CKLV*/
         CLI   RPRENTRY(CVIWKPT2),X'50'                            1862
         BNE   @RF01862                                            1862
         TM    RLNPORT(CVIWKPT2),B'00010000'                       1862
         BNO   @RF01862                                            1862
         TM    RPTVRYPD(CVIWKPT2),B'01000000'                      1862
         BNO   @RF01862                                            1862
         TM    RPTVYIMM(CVIWKPT2),B'00000100'                      1862
         BNZ   @RF01862                                            1862
*        CVIMSG# = '153I';                               /*  @DM09851*/
         MVC   CVIMSG#(4),@CC05830                                 1864
*        RPTVRYPD='0'B;                                            1865
*        RPTVYIMM='0'B;                                            1866
*        RPTHLVPD='0'B;                                  /*  @DM09851*/
         NI    RPTVRYPD(CVIWKPT2),B'10011011'                      1867
*        CALL CVIWTO2;                                             1868
         BAL   @14,CVIWTO2                                         1868
*        END;                                                      1869
*     ELSE;                                                /*@D32CKLV*/
@RF01862 DS    0H                                                  1871
*  IF RPRVRYPD='1'B & RPRVYIMM='0'B /*PREVIOUS CMD NOT DEACTIVATE  1871
*                                     IMMEDIATE              @XM17554*/
*   THEN DO;                                                       1871
         TM    RPRVRYPD(CVIWKPT2),B'00000010'                      1871
         BNO   @RF01871                                            1871
         TM    RPRVYIMM(CVIWKPT2),B'00000010'                      1871
         BNZ   @RF01871                                            1871
*        CVIMSG# ='153I';                                /*  @DM09851*/
         MVC   CVIMSG#(4),@CC05830                                 1873
*        RPRVRYPD='0'B;                                            1874
         NI    RPRVRYPD(CVIWKPT2),B'11111101'                      1874
*        RPRVYIMM='0'B;                                            1875
*        RPRHLVPD='0'B;                                  /*  @DM09851*/
         NI    RPRVYIMM(CVIWKPT2),B'11111001'                      1876
*        RPRINIMM='0'B;                                   /*AS12052 */
         NI    RPRINIMM(CVIWKPT2),B'11111110'                      1877
*        CALL CVIWTO2;                                             1878
         BAL   @14,CVIWTO2                                         1878
*        END;                                                      1879
*     ELSE;                                                /*@D32CKLV*/
@RF01871 DS    0H                                                  1881
* END;                               /* END OF RDTE^=PU OR LU */   1881
*/********************************************************************/
*/* IF NOT AT LAST RDT ENTRY WITHIN 370X SEGMENT, THEN UPDATE        */
*/* UPDATE CVIWKPT2 TO THE NEXT RDT ENTRY TO BE CHECKED FOR 'VARY    */
*/* PENDING'. ELSE, SET LOOP ESCAPE.                                 */
*/********************************************************************/
* IF RPRENTED='0'B                                                 1882
*  THEN CVIWKPT2=CVIWKPT2+RPRELEN;                                 1882
@RT01859 TM    RPRENTED(CVIWKPT2),B'00000100'                      1882
         BNZ   @RF01882                                            1882
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         1883
*  ELSE CVILOOP='1'B;                                              1884
         B     @RC01882                                            1884
@RF01882 OI    CVILOOP,B'00100000'                                 1884
*END;                                                              1885
@RC01882 DS    0H                                                  1885
@DE01857 TM    CVILOOP,B'00100000'                                 1885
         BZ    @DL01857                                            1885
*CVIGO='1'B;                                                       1886
         OI    CVIGO,B'10000000'                                   1886
*CVIWKPT2=CVIWKPT1;                                                1887
         L     CVIWKPT2,CVIWKPT1                                   1887
*  /*SEGMENT(SCANCEL)FINISH*/DO;GOTO SCANCEL#;SCANCEL@:END;        1888
         B     SCANCEL#                                            1889
SCANCEL@ DS    0H                                                  1891
* GEN(  EJECT);                                                    1891
           EJECT
*CVIPTCD:PROC OPTIONS(NOSAVE,NOSAVEAREA);                          1892
         B     @PB00011                                            1892
CVIPTCD  DS    0H                                                  1893
*CVISAVE2=CVIRTNAD;                                        /*@ZD1333*/
         ST    CVIRTNAD,CVISAVE2                                   1893
*/********************************************************************/
*/* THIS SEGMENT IS INVOKED BY CVICKPN TO DECREMENT PATH COUNTS OF   */
*/* RDT ENTRIES FOR NODES BELOW THE ONE BEING DEACTIVATED, SINCE     */
*/* THERE ARE NO DEACTIVATE REQUESTS PENDING FOR THE COMMAND RDT     */
*/* ENTRY OR FOR HIGHER LEVEL NODES. CVIWKPT1 POINTS AT THE COMMAND  */
*/* RDT ENTRY.                                                       */
*/********************************************************************/
*RFY (ISTRPRE,ISTRLN,ISTRPT) BASED(CVIWKPT1);                      1894
*CVISAVE1=CVIWKPT1;                                                1895
         L     @09,CVIWKPT1                                        1895
         ST    @09,CVISAVE1                                        1895
*/********************************************************************/
*/* IF COMMAND FOR LCDO, THEN REDUCE THE PATH COUNT (RPRPTHCT) IN    */
*/* EACH RDT ENTRY POINTED TO BY THE ISTDOT TABLE CHAINED OFF RDSADDOT*
*/* IN THE LCDO ENTRY. RDSCTTRM IN THE LCDO ENTRY IS THE NUMBER OF   */
*/* NODES REPRESENTED IN THE ISTDOT TABLE. ANY RDT ENTRY REPRESENTED */
*/* IN THE ISTDOT TABLE WHOSE RPRNSNEA FIELD INDICATES THAT ITS NEXT */
*/* HIGHER LEVEL NODE IS THE LCDO HAS ITS LIVE BIT (RPRLIVE) RESET,  */
*/* SINCE DEACTIVATING THE LCDO EFFECTIVELY 'KILLS' THE NODE.        */
*/********************************************************************/
* RPRINIMM='1'B;  /*DO NOT ALLOCATE THIS DEVICE             AS12052 */
         OI    RPRINIMM(@09),B'00000001'                           1896
*IF RPRENTRY=RPRENTDS                                              1897
* THEN DO;                                                         1897
         CLI   RPRENTRY(@09),X'20'                                 1897
         BNE   @RF01897                                            1897
*  RFY ISTRDS BASED(CVIWKPT1);                                     1899
*  CVINXDOT=RDSADDOT;                                              1900
         L     @09,RDSADDOT(,@09)                                  1900
         ST    @09,CVINXDOT                                        1900
*  CVIDOTCT=1;                                                     1901
         MVC   CVIDOTCT(2),@CH00096                                1901
*  DO WHILE(CVIDOTCT<=RDSCTTRM);                                   1902
         B     @DE01902                                            1902
@DL01902 DS    0H                                                  1903
*   CVIWKPT3=CVINXDOT->DOTADTRM ;                                  1903
         L     @09,CVINXDOT                                        1903
         L     @09,DOTADTRM(,@09)                                  1903
         ST    @09,CVIWKPT3                                        1903
*   CVIWKPT3->RPRPTHCT=CVIWKPT3->RPRPTHCT-1;                       1904
         SLR   @07,@07                                             1904
         IC    @07,RPRPTHCT(,@09)                                  1904
         BCTR  @07,0                                               1904
         STC   @07,RPRPTHCT(,@09)                                  1904
*   IF CVIWKPT3->RPRPTHCT=0           /* IF PATH CT IS ZERO  @AS12052*/
*     THEN                            /* AND                 @AS12052*/
         CLI   RPRPTHCT(@09),0                                     1905
         BNE   @RF01905                                            1905
*       IF CVIWKPT3->RPRONLIN='1'B    /* ENTRY IS ONLINE,    @XM18625*/
*         THEN                        /* THEN                @XM18625*/
         TM    RPRONLIN(@09),B'00001000'                           1906
         BNO   @RF01906                                            1906
*           CVIWKPT3->RPRINIMM='1'B;  /* INDICATE DO NOT     @AS12052*/
         OI    RPRINIMM(@09),B'00000001'                           1907
*         ELSE;                       /* REALLOCATE BECAUSE  @XM18625*/
@RF01906 DS    0H                                                  1909
*     ELSE;                           /* DEACT STILL RUNNING @AS12052*/
@RF01905 DS    0H                                                  1910
*   IF CVIWKPT3->RPRNSNEA=CVIWKPT1                                 1910
*    THEN CVIWKPT3->RPRLIVE='0'B;                                  1910
         L     @09,CVIWKPT3                                        1910
         CLC   RPRNSNEA(4,@09),CVIWKPT1                            1910
         BNE   @RF01910                                            1910
         NI    RPRLIVE(@09),B'11111110'                            1911
*   ELSE;                                                          1912
@RF01910 DS    0H                                                  1913
*   CVIDOTCT=CVIDOTCT+1;                                           1913
         LA    @09,1                                               1913
         AH    @09,CVIDOTCT                                        1913
         STH   @09,CVIDOTCT                                        1913
*   CVINXDOT=CVINXDOT+LENGTH(ISTDOT);                              1914
         LA    @09,4                                               1914
         AL    @09,CVINXDOT                                        1914
         ST    @09,CVINXDOT                                        1914
*  END;                                                            1915
@DE01902 LH    @09,CVIDOTCT                                        1915
         L     @07,CVIWKPT1                                        1915
         CH    @09,RDSCTTRM(,@07)                                  1915
         BNH   @DL01902                                            1915
* END;                                                             1916
*/********************************************************************/
*/* ELSE IF COMMAND FOR A DIAL LINE, THEN PROCESS ACCORDING TO THE   */
*/* TYPE OF DIAL LINE.                                               */
*/********************************************************************/
*ELSE IF RPRENTRY = RPRENTLN                                       1917
*         & (RLNRACAT='1'B × RLNRACAN='1'B)                        1917
*       THEN   /*SEGMENT(CVITABD)REQUEST*/DO;GOTO CVITABD;CVITABD#:END;
         B     @RC01897                                            1917
@RF01897 L     @09,CVIWKPT1                                        1917
         CLI   RPRENTRY(@09),X'50'                                 1917
         BNE   @RF01917                                            1917
         TM    RLNRACAT(@09),B'11000000'                           1917
         BZ    @RF01917                                            1917
         B     CVITABD                                             1919
*/********************************************************************/
*/* ELSE IF COMMAND FOR SOMETHING OTHER THAN AN LCDO OR DIAL LINE,   */
*/* THEN DECREMENT PATH COUNTS IN LOWER LEVEL RDT ENTRIES, USING     */
*/* THE STRUCTURE OF THE RDT TO UPDATE TO THE NEXT ENTRY JUST BY     */
*/* ADDING THE CURRENT ENTRY LENGTH TO THE CURRENT ENTRY POINTER.    */
*/********************************************************************/
* ELSE                                                             1921
*   DO;                                                            1921
         B     @RC01917                                            1921
@RF01917 DS    0H                                                  1922
*   IF RPRENTRY=RPRENTTR                                           1922
*     & RPRNSNEA->RPRENTRY=RPRENTLC                                1922
*     THEN CVIWKPT1=RPRNSNEA;                                      1922
         L     @09,CVIWKPT1                                        1922
         CLI   RPRENTRY(@09),X'80'                                 1922
         BNE   @RF01922                                            1922
         L     @09,RPRNSNEA(,@09)                                  1922
         CLI   RPRENTRY(@09),X'45'                                 1922
         BNE   @RF01922                                            1922
         ST    @09,CVIWKPT1                                        1923
*     ELSE;                                                        1924
@RF01922 DS    0H                                                  1925
*   IF RPRENTED='0'B                                               1925
*     THEN                                                         1925
         L     @09,CVIWKPT1                                        1925
         TM    RPRENTED(@09),B'00000100'                           1925
         BNZ   @RF01925                                            1925
*       DO;                                                        1926
*       CVIWKPT3=CVIWKPT1+RPRELEN;                                 1927
         LH    @07,RPRELEN(,@09)                                   1927
         ALR   @07,@09                                             1927
         ST    @07,CVIWKPT3                                        1927
*       CVILOOP='0'B;                                              1928
         NI    CVILOOP,B'11011111'                                 1928
*       DO WHILE(CVILOOP='0'B);                                    1929
         B     @DE01929                                            1929
@DL01929 DS    0H                                                  1930
*       IF CVIWKPT3->RPRENTRY<=CVIWKPT1->RPRENTRY                  1930
*         THEN CVILOOP='1'B;                                       1930
         L     @09,CVIWKPT3                                        1930
         L     @07,CVIWKPT1                                        1930
         CLC   RPRENTRY(1,@09),RPRENTRY(@07)                       1930
         BH    @RF01930                                            1930
         OI    CVILOOP,B'00100000'                                 1931
*         ELSE                                                     1932
*           DO;                                                    1932
         B     @RC01930                                            1932
@RF01930 DS    0H                                                  1933
*           IF CVIWKPT3->RPRPTHCT^=0                               1933
*          THEN IF CVIWKPT1->RPRENTRY=RPRENTRN ×      /* ZTR 6450 GH*/
         L     @09,CVIWKPT3                                        1933
         CLI   RPRPTHCT(@09),0                                     1933
         BE    @RF01933                                            1933
*                  CVIWKPT1->RPRENTRY=RPRENTLS ×                   1934
*                  CVIWKPT1->RPRENTRY=RPRENTSW      /* A HEADER ? */
*           THEN CVIWKPT3->RPRPTHCT=0;                             1934
         L     @09,CVIWKPT1                                        1934
         CLI   RPRENTRY(@09),X'01'                                 1934
         BE    @RT01934                                            1934
         CLI   RPRENTRY(@09),X'05'                                 1934
         BE    @RT01934                                            1934
         CLI   RPRENTRY(@09),X'04'                                 1934
         BNE   @RF01934                                            1934
@RT01934 DS    0H                                                  1935
         L     @09,CVIWKPT3                                        1935
         MVI   RPRPTHCT(@09),X'00'                                 1935
*           ELSE CVIWKPT3->RPRPTHCT=CVIWKPT3->RPRPTHCT-1;          1936
         B     @RC01934                                            1936
@RF01934 L     @09,CVIWKPT3                                        1936
         SLR   @07,@07                                             1936
         IC    @07,RPRPTHCT(,@09)                                  1936
         BCTR  @07,0                                               1936
         STC   @07,RPRPTHCT(,@09)                                  1936
*       ELSE;                                                      1937
@RF01933 DS    0H                                                  1938
*       IF CVIWKPT3->RPRPTHCT=0          /* IF PATH CT IS 0  @AS12052*/
*         THEN                           /* AND              @AS12052*/
@RC01933 L     @09,CVIWKPT3                                        1938
         CLI   RPRPTHCT(@09),0                                     1938
         BNE   @RF01938                                            1938
*           IF CVIWKPT3->RPRONLIN='1'B   /* ENTRY IS ONLINE  @XM18625*/
*             THEN                       /* THEN             @XM18625*/
         TM    RPRONLIN(@09),B'00001000'                           1939
         BNO   @RF01939                                            1939
*               CVIWKPT3->RPRINIMM='1'B; /* INDICATE DO NOT  @AS12052*/
         OI    RPRINIMM(@09),B'00000001'                           1940
*             ELSE;                      /* REALLOC BECAUSE  @XM18625*/
@RF01939 DS    0H                                                  1942
*         ELSE;                          /* DEACT NOT DONE   @AS12052*/
@RF01938 DS    0H                                                  1943
*      IF CVIWKPT3->RPRENTED='1'B                                  1943
*       THEN CVILOOP='1'B;                                         1943
         L     @09,CVIWKPT3                                        1943
         TM    RPRENTED(@09),B'00000100'                           1943
         BNO   @RF01943                                            1943
         OI    CVILOOP,B'00100000'                                 1944
*       ELSE CVIWKPT3=CVIWKPT3+CVIWKPT3->RPRELEN;                  1945
         B     @RC01943                                            1945
@RF01943 L     @09,CVIWKPT3                                        1945
         LH    @07,RPRELEN(,@09)                                   1945
         ALR   @07,@09                                             1945
         ST    @07,CVIWKPT3                                        1945
*    END;                                                          1946
@RC01943 DS    0H                                                  1947
*   END;                                                           1947
@RC01930 DS    0H                                                  1947
@DE01929 TM    CVILOOP,B'00100000'                                 1947
         BZ    @DL01929                                            1947
*  END;                                                            1948
*  ELSE;                                                           1949
@RF01925 DS    0H                                                  1950
* END;                                                             1950
*CVIWKPT1=CVISAVE1;                                                1951
@RC01917 DS    0H                                                  1951
@RC01897 L     @09,CVISAVE1                                        1951
         ST    @09,CVIWKPT1                                        1951
*CVIRTNAD=CVISAVE2;                                        /*@ZD13332*/
         L     CVIRTNAD,CVISAVE2                                   1952
*END CVIPTCD;                                                      1953
@EL00011 DS    0H                                                  1953
@EF00011 DS    0H                                                  1953
@ER00011 BR    @14                                                 1953
@PB00011 DS    0H                                                  1954
*GEN(  EJECT);                                                     1954
           EJECT
*  /*SEGMENT(CVITABD)START*/DO;GOTO CVITABD@;CVITABD:END;          1955
         B     CVITABD@                                            1956
CVITABD  DS    0H                                                  1958
*     /* ZTR 6354 GH */                                            1958
*/********************************************************************/
*/* IF COMMAND IS FOR A PORT AND THE CTERM PORTION IS ONLINE WITH    */
*/* NO VARY PENDING AND NO HIGHER LEVEL VARY PENDING, THEN PROCESS   */
*/* THE PORT ENTRY. IF DIAL OUT ONLY RETURN.                         */
*/********************************************************************/
*   IF RLNPORT^='1'B                       /*ZTR 6354 GH*/         1958
*     THEN;                                                        1958
         L     @09,CVIWKPT1                                        1958
         TM    RLNPORT(@09),B'00010000'                            1958
         BNO   @RT01958                                            1958
*     ELSE IF NCSPLRID=RPRNAME             /* COMMAND AGAINST LINE */
*           THEN DO;                                               1960
         L     @09,CVIWKPT1                                        1960
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(@09)                   1960
         BNE   @RF01960                                            1960
*                 RPTPTHCT=RPTPTHCT-1;                             1962
         LH    @07,RPTPTHCT(,@09)                                  1962
         BCTR  @07,0                                               1962
         STH   @07,RPTPTHCT(,@09)                                  1962
*                 IF RPTONLIN='1'B                                 1963
*                   & RPTHLVPD = '0'B & RPTVRYPD = '0'B            1963
*                  THEN CALL CVILCDIT;                             1963
         TM    RPTONLIN(@09),B'00010000'                           1963
         BNO   @RF01963                                            1963
         TM    RPTHLVPD(@09),B'01100000'                           1963
         BNZ   @RF01963                                            1963
         BAL   @14,CVILCDIT                                        1964
*                  ELSE;                                           1965
@RF01963 DS    0H                                                  1966
*                END;                                              1966
*           ELSE CALL CVILCDIT;             /* COMMAND AGAINST CTERM */
         B     @RC01960                                            1967
@RF01960 BAL   @14,CVILCDIT                                        1967
*  /*SEGMENT(CVITABD)FINISH*/DO;GOTO CVITABD#;CVITABD@:END;        1968
@RC01960 DS    0H                                                  1968
@RT01958 DS    0H                                                  1969
         B     CVITABD#                                            1969
CVITABD@ DS    0H                                                  1971
*GEN(   EJECT);                                                    1971
            EJECT
*  /*SEGMENT(CVIVPEN)START*/DO;GOTO CVIVPEN@;CVIVPEN:END;          1972
         B     CVIVPEN@                                            1973
CVIVPEN  DS    0H                                                  1975
*    IF RPRENTRY=RPRENTLN                                          1975
*      & RLNPORT='1'B                                              1975
*      & NCSPLRID=RPTCTNM                                          1975
*      THEN IF RPTVYIMM='1'B                                       1975
         L     @09,CVIWKPT1                                        1975
         CLI   RPRENTRY(@09),X'50'                                 1975
         BNE   @RF01975                                            1975
         TM    RLNPORT(@09),B'00010000'                            1975
         BNO   @RF01975                                            1975
         CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(@09)                   1975
         BNE   @RF01975                                            1975
*             × NCSVBF12='0'B                                      1976
*            THEN DO;                                              1976
         TM    RPTVYIMM(@09),B'00000100'                           1976
         BO    @RT01976                                            1976
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1976
         BNZ   @RF01976                                            1976
@RT01976 DS    0H                                                  1977
*                 CVIMSG# = '073I';                                1978
         MVC   CVIMSG#(4),@CC05645                                 1978
*                 CVIMSG1 = CVIVARY;                               1979
         MVC   CVIMSG1(8),@CC05605                                 1979
*                 CVIMSG2 = NCSPLRID;                              1980
         MVC   CVIMSG2(8),NCSPLRID(CVINCSPL)                       1980
*                 CALL CVIWTO3;                                    1981
         BAL   @14,CVIWTO3                                         1981
*                 CVIQUIT='1'B;                                    1982
         OI    CVIQUIT,B'00000100'                                 1982
*                 CVIRC=4;                                 /*@XM97000*/
         MVC   CVIRC(4),@CF00088                                   1983
*                 END;                                             1984
*            ELSE;                                                 1985
@RF01976 DS    0H                                                  1986
*      ELSE IF RPRVYIMM='1'B                                       1986
*             × NCSVBF12='0'B                                      1986
*            THEN DO;                                              1986
         B     @RC01975                                            1986
@RF01975 L     @09,CVIWKPT1                                        1986
         TM    RPRVYIMM(@09),B'00000010'                           1986
         BO    @RT01986                                            1986
         TM    NCSVBF12(CVINCSPL),B'00010000'                      1986
         BNZ   @RF01986                                            1986
@RT01986 DS    0H                                                  1987
*                 CVIMSG# = '073I';                                1988
         MVC   CVIMSG#(4),@CC05645                                 1988
*                 CVIMSG1 = CVIVARY;                               1989
         MVC   CVIMSG1(8),@CC05605                                 1989
*                 CVIMSG2 = NCSPLRID;                              1990
         MVC   CVIMSG2(8),NCSPLRID(CVINCSPL)                       1990
*                 CALL CVIWTO3;                                    1991
         BAL   @14,CVIWTO3                                         1991
*                 CVIQUIT='1'B;                                    1992
         OI    CVIQUIT,B'00000100'                                 1992
*                 CVIRC=4;                                 /*@XM97000*/
         MVC   CVIRC(4),@CF00088                                   1993
*                 END;                                             1994
*            ELSE;                                                 1995
@RF01986 DS    0H                                                  1996
*    IF CVIRC=4                                                    1996
*      THEN;                                                       1996
@RC01975 CLC   CVIRC(4),@CF00088                                   1996
         BE    @RT01996                                            1996
*      ELSE                                                        1998
* /* VYIMM IS NOT ON AND THIS COMMAND IS IMMEDIATE */              1998
*      IF RPRENTRY=RPRENTLN                                        1998
*       & RLNPORT='1'B                                             1998
*      THEN DO;                        /* 3418.1 */                1998
         L     @09,CVIWKPT1                                        1998
         CLI   RPRENTRY(@09),X'50'                                 1998
         BNE   @RF01998                                            1998
         TM    RLNPORT(@09),B'00010000'                            1998
         BNO   @RF01998                                            1998
*           RPTVYIMM='1'B;                                         2000
         OI    RPTVYIMM(@09),B'00000100'                           2000
*           IF RPRNAME=NCSPLRID                                    2001
*             THEN RPRVYIMM='1'B;                                  2001
         CLC   RPRNAME(8,@09),NCSPLRID(CVINCSPL)                   2001
         BNE   @RF02001                                            2001
         OI    RPRVYIMM(@09),B'00000010'                           2002
*             ELSE;                                                2003
@RF02001 DS    0H                                                  2004
*           CVISKPHD='1'B;                                         2004
*           CVIPGSW='1'B;                                          2005
         OI    CVISKPHD,B'00011000'                                2005
*           END;                                                   2006
*       ELSE DO;                                                   2007
         B     @RC01998                                            2007
@RF01998 DS    0H                                                  2008
*           RPRVYIMM='1'B;                                         2008
         L     @09,CVIWKPT1                                        2008
         OI    RPRVYIMM(@09),B'00000010'                           2008
*           CVISKPHD='1'B;                                         2009
*           CVIPGSW='1'B;                                          2010
         OI    CVISKPHD,B'00011000'                                2010
*           END;                                                   2011
*  /*SEGMENT(CVIVPEN)FINISH*/DO;GOTO CVIVPEN#;CVIVPEN@:END;        2012
@RC01998 DS    0H                                                  2012
@RT01996 DS    0H                                                  2013
         B     CVIVPEN#                                            2013
CVIVPEN@ DS    0H                                                  2015
*GEN(   EJECT);                                                    2015
            EJECT
*CVILCDIT: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        2016
         B     @PB00012                                            2016
CVILCDIT DS    0H                                                  2017
*/********************************************************************/
*/* IF UTERM ENTRY CHAINED OFF PORT, THEN DECREMENT PATH COUNT FOR   */
*/* NODE REPRESENTED BY THE UTERM.                                   */
*/********************************************************************/
*     RFY ISTRPT BASED(CVIWKPT1);                                  2017
*     IF RPTUTERM^=0                                               2018
*      THEN DO;                                    /*        @AS12052*/
         L     @09,CVIWKPT1                                        2018
         L     @09,RPTUTERM(,@09)                                  2018
         LTR   @09,@09                                             2018
         BZ    @RF02018                                            2018
*         RPTUTERM->RPRPTHCT=RPTUTERM->RPRPTHCT-1; /* DECRMNT PTH CT */
         SLR   @07,@07                                             2020
         IC    @07,RPRPTHCT(,@09)                                  2020
         BCTR  @07,0                                               2020
         STC   @07,RPRPTHCT(,@09)                                  2020
*         IF RPTUTERM->RPRONLIN='1'B    /* IF ENTRY IS       @XM18625*/
*           THEN                        /* ONLINE, THEN      @XM18625*/
         TM    RPRONLIN(@09),B'00001000'                           2021
         BNO   @RF02021                                            2021
*              RPTUTERM->RPRINIMM='1'B; /* INDICATE DO NOT   @AS12052*/
         OI    RPRINIMM(@09),B'00000001'                           2022
*           ELSE;                       /* REALLOC BECAUSE   @XM18625*/
@RF02021 DS    0H                                                  2024
*         END;                          /* DEACT NOT DONE    @AS12052*/
*      ELSE;                                                       2025
@RF02018 DS    0H                                                  2026
*/********************************************************************/
*/* IF THE PORT IS 'ID VERIFIED' (RLNIDV='1'B), THEN THE NODES THAT  */
*/* CAN CONNECT TO THE PORT ARE REPRESENTED BY RDT ENTRY ADDRESSES   */
*/* IN A DIAL-IN VERIFICATION TABLE, CONSISTING OF A HEADER MAPPED   */
*/* BY ISTDIVTH AND ENTRIES MAPPED BY ISTDVE. OTHERWISE, THE DIAL-IN */
*/* TYPE TABLE ENTRIES MAPPED BY ISTDTE CONTAIN THE RDT ENTRY        */
*/* POINTERS. SET CVIWORKR TO THE ADDRESS OF THE FIRST DIAL-IN       */
*/* TABLE ENTRY IN THE APPROPRIATE TABLE.                            */
*/********************************************************************/
*     RFY CVIWORKR RSTD;                                           2026
*     IF RLNIDV='0'B & RLNTTV ='0'B                                2027
*       THEN;                                                      2027
         L     @09,CVIWKPT1                                        2027
         TM    RLNIDV(@09),B'00001000'                             2027
         BNZ   @RF02027                                            2027
         TM    RLNTTV(@09),B'00001000'                             2027
         BZ    @RT02027                                            2027
*       ELSE                                                       2029
*         DO;                                                      2029
@RF02027 DS    0H                                                  2030
*         IF RLNIDV='1'B                                           2030
*           THEN CVIWORKR=RPTDIVT+LENGTH(ISTDIVTH);                2030
         L     @09,CVIWKPT1                                        2030
         TM    RLNIDV(@09),B'00001000'                             2030
         BNO   @RF02030                                            2030
         LA    CVIWORKR,8                                          2031
         AL    CVIWORKR,RPTDIVT(,@09)                              2031
*           ELSE CVIWORKR=RPTDITT;                                 2032
         B     @RC02030                                            2032
@RF02030 L     @09,CVIWKPT1                                        2032
         L     CVIWORKR,RPTDITT(,@09)                              2032
*/********************************************************************/
*/* REDUCE PATH COUNTS AND RESET 'LIVE' BITS FOR EACH RDT ENTRY      */
*/* POINTED TO BY DIAL-IN TABLE CHAINED OFF THE PORT ENTRY.          */
*/********************************************************************/
*     RFY(ISTDTE,ISTDVE) BASED(CVIWORKR);                          2033
@RC02030 DS    0H                                                  2034
*      IF RLNIDV='1'B                                              2034
*       THEN                                                       2034
         L     @09,CVIWKPT1                                        2034
         TM    RLNIDV(@09),B'00001000'                             2034
         BNO   @RF02034                                            2034
*       DO I=1 TO RPTDIVT->DIVNUME;                                2035
         LA    @09,1                                               2035
         B     @DE02035                                            2035
@DL02035 DS    0H                                                  2036
*        CVIWKPT3=DVERDTEA;                                        2036
         L     @09,DVERDTEA(,CVIWORKR)                             2036
         ST    @09,CVIWKPT3                                        2036
*        CVIWKPT3->RPRPTHCT=CVIWKPT3->RPRPTHCT-1;                  2037
         SLR   @04,@04                                             2037
         IC    @04,RPRPTHCT(,@09)                                  2037
         BCTR  @04,0                                               2037
         STC   @04,RPRPTHCT(,@09)                                  2037
*        IF CVIWKPT3->RPRPTHCT=0                                   2038
*          THEN DO;                                        /*@AS12052*/
         CLI   RPRPTHCT(@09),0                                     2038
         BNE   @RF02038                                            2038
*            CVIWKPT3->RPRLIVE='0'B;      /* MARK ENTRY NOT LIVE     */
         NI    RPRLIVE(@09),B'11111110'                            2040
*            IF CVIWKPT3->RPRONLIN='1'B   /* IF ENTRY IS     @XM18625*/
*              THEN                       /* ONLINE, THEN    @XM18625*/
         TM    RPRONLIN(@09),B'00001000'                           2041
         BNO   @RF02041                                            2041
*                CVIWKPT3->RPRINIMM='1'B; /* INDICATE DO NOT @AS12052*/
         OI    RPRINIMM(@09),B'00000001'                           2042
*              ELSE;                      /* REALLOC BECAUSE @XM18625*/
@RF02041 DS    0H                                                  2044
*          END;                           /* DEACT NOT DONE  @AS12052*/
*          ELSE;                                                   2045
@RF02038 DS    0H                                                  2046
*        CVIWORKR=CVIWORKR+(LENGTH(ISTDVE)+RPTDIVT->DIVIDLEN);     2046
         L     @09,CVIWKPT1                                        2046
         L     @09,RPTDIVT(,@09)                                   2046
         LA    @04,5                                               2046
         AH    @04,DIVIDLEN(,@09)                                  2046
         ALR   CVIWORKR,@04                                        2046
*       END;                                                       2047
         LA    @09,1                                               2047
         AH    @09,I                                               2047
@DE02035 STH   @09,I                                               2047
         L     @04,CVIWKPT1                                        2047
         L     @04,RPTDIVT(,@04)                                   2047
         CH    @09,DIVNUME(,@04)                                   2047
         BNH   @DL02035                                            2047
*      ELSE                                                        2048
*      DO WHILE(DTELCTI^=DITTEND);                                 2048
         B     @RC02034                                            2048
@RF02034 B     @DE02048                                            2048
@DL02048 DS    0H                                                  2049
*        IF DTERDTEA=0 THEN; /* NO RDTE ADDR IN DITT         @ZM33649*/
         ICM   @09,15,DTERDTEA(CVIWORKR)                           2049
         BZ    @RT02049                                            2049
*         ELSE DO;                                         /*@ZM33649*/
*          CVIWKPT3=DTERDTEA;                                      2052
         ICM   @09,15,DTERDTEA(CVIWORKR)                           2052
         ST    @09,CVIWKPT3                                        2052
*          CVIWKPT3->RPRPTHCT=CVIWKPT3->RPRPTHCT-1;                2053
         SLR   @04,@04                                             2053
         IC    @04,RPRPTHCT(,@09)                                  2053
         BCTR  @04,0                                               2053
         STC   @04,RPRPTHCT(,@09)                                  2053
*          IF CVIWKPT3->RPRPTHCT=0         /* IF NO MORE PATHS LEFT  */
*           THEN DO;                       /* THEN           @AS12052*/
         CLI   RPRPTHCT(@09),0                                     2054
         BNE   @RF02054                                            2054
*             CVIWKPT3->RPRLIVE='0'B;      /* MARK ENTRY NOT LIVE    */
         NI    RPRLIVE(@09),B'11111110'                            2056
*             IF CVIWKPT3->RPRONLIN='1'B   /* IF ENTRY IS    @XM18625*/
*               THEN                       /* ONLINE, THEN   @XM18625*/
         TM    RPRONLIN(@09),B'00001000'                           2057
         BNO   @RF02057                                            2057
*                 CVIWKPT3->RPRINIMM='1'B; /* INDICATE DON'T @AS12052*/
         OI    RPRINIMM(@09),B'00000001'                           2058
*               ELSE;                      /* REALLOC SINCE  @XM18625*/
@RF02057 DS    0H                                                  2060
*           END;                           /* DEACT NOT DONE @AS12052*/
*           ELSE;                                                  2061
@RF02054 DS    0H                                                  2062
*         END;                                             /*@ZM33649*/
*       CVIWORKR=CVIWORKR+LENGTH(ISTDTE);                          2063
@RT02049 AL    CVIWORKR,@CF00832                                   2063
*      END;                                                        2064
@DE02048 CLI   DTELCTI(CVIWORKR),X'FF'                             2064
         BNE   @DL02048                                            2064
*      END;                                                        2065
*END CVILCDIT;                                                     2066
@EL00012 DS    0H                                                  2066
@EF00012 DS    0H                                                  2066
@ER00012 BR    @14                                                 2066
@PB00012 DS    0H                                                  2067
* GEN(  EJECT);                                                    2067
           EJECT
*CVIPEPLN: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 2068
         B     @PB00013                                            2068
CVIPEPLN DS    0H                                                  2069
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY CVISCAN AND CVICOUNT TO DEACTIVATE THE */
*/* LINE REPRESENTED BY THE RDT ENTRY ADDRESSED BY CVIWKPT2.         */
*/* HOWEVER, IF 'VARY I/O DONE' IS SET (RPRVIODN='1'B), THEN         */
*/* THE DEACTIVATE COMMAND HAS ALREADY BEEN ISSUED, AND CVIPEPLN JUST *
*/* RETURNS.                                                         */
*/********************************************************************/
*CVINSI8=CVIRTNAD;                                                 2069
         ST    CVIRTNAD,CVINSI8                                    2069
*RFY ISTRPRE BASED(CVIWKPT2);                                      2070
*RFY ISTRLN BASED(CVIWKPT2);                                       2071
*IF RPRVIODN='1'B                                                  2072
* THEN;                                                            2072
         TM    RPRVIODN(CVIWKPT2),B'00010000'                      2072
         BO    @RT02072                                            2072
*ELSE DO;                                                          2074
*/********************************************************************/
*/* IF COMMAND RDT ENTRY IS SAME AS CURRENT RDT ENTRY OR IF CURRENT  */
*/* RDT ENTRY IS FOR A PEP LINE, THEN CALL CVIPEPL2 TO ISSUE THE     */
*/* DEACTIVATE LINE COMMAND TO THE 370X FOR THE LINE.                */
*/********************************************************************/
* IF CVIWKPT1=CVIWKPT2×RLNRAPEP='1'B                               2075
*  THEN CALL CVIPEPL2;                                             2075
         C     CVIWKPT2,CVIWKPT1                                   2075
         BE    @RT02075                                            2075
         TM    RLNRAPEP(CVIWKPT2),B'00000001'                      2075
         BNO   @RF02075                                            2075
@RT02075 DS    0H                                                  2076
         BAL   @14,CVIPEPL2                                        2076
*  ELSE;                                                           2077
@RF02075 DS    0H                                                  2078
*/********************************************************************/
*/* IF RDT ENTRY IS FOR A PEP LINE AND NCSPL INDICATES ERP REQUEST   */
*/* (NCSPLVCD=NCSPLVC3), THEN CALL ISTINCAV TO DEALLOCATE THE PEP    */
*/* LINE FROM VTAM. UPDATE THE CRR AUDIT TRAIL UPON RETURN, AND IF   */
*/* THE RETURN CODE INDICATES THAT DEALLOCATE FAILED, THEN CALL      */
*/* CVIWTO TO ISSUE AN ERROR MESSAGE.                                */
*/********************************************************************/
* IF RLNRAPEP='1'B                                                 2078
*  THEN   /*SEGMENT(CVIPEL3)REQUEST*/DO;GOTO CVIPEL3;CVIPEL3#:END; 2078
         TM    RLNRAPEP(CVIWKPT2),B'00000001'                      2078
         BNO   @RF02078                                            2078
         B     CVIPEL3                                             2080
*/********************************************************************/
*/* ELSE IF CURRENT RDT ENTRY IS FOR PEP LINE BUT NOT PROCESSING FOR */
*/* ERP, THEN INVOKE CVIPEL3 TO SWITCH THE PEP LINE TO EP MODE AND   */
*/* TO DEALLOCATE THE PEP LINE.                                      */
*/********************************************************************/
*  ELSE;                                                           2082
@RF02078 DS    0H                                                  2083
*END;                                                              2083
@RC02078 DS    0H                                                  2084
*CVIRTNAD=CVINSI8;                                                 2084
@RT02072 L     CVIRTNAD,CVINSI8                                    2084
*  /*SEGMENT(CVIPEL3)START*/DO;GOTO CVIPEL3@;CVIPEL3:END;          2085
         B     CVIPEL3@                                            2086
CVIPEL3  DS    0H                                                  2088
*/********************************************************************/
*/* THIS SEGMENT IS INVOKED BY CVIPEPLN TO SWITCH THE PEP LINE BEING */
*/* DEACTIVATED TO EP MODE AND TO DEALLOCATE THE PEP LINE FROM VTAM. */
*/* CVIWKPT2 IS THE ADDRESS OF THE RDT ENTRY FOR THE PEP LINE.       */
*/********************************************************************/
*RFY ISTRPRE BASED(CVIWKPT2);                                      2088
*/********************************************************************/
*/* IF THE QUIT SWITCH HAS NOT BEEN SET,THEN SET THE NCSPL COMMAND   */
*/* CODE TO 'SWITCH TO EP', LOCATE THE 370X RDT ENTRY TO OBTAIN THE  */
*/* DAF OF THE 370X, BUILD THE CID IN NCSIOCID USING THE 370X DAF,   */
*/* OBTAIN THE DAF LOCK VIA CIDCTL, AND CALL ISTINCIO TO ISSUE THE   */
*/* COMMAND TO THE 370X.                                             */
*/********************************************************************/
*NCSPLRAD=CVIWKPT2;                                                2089
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        2089
*IF NCSVBF11='1'B × CVIQUIT='1'B                                   2090
* THEN;                                                            2090
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2090
         BO    @RT02090                                            2090
         TM    CVIQUIT,B'00000100'                                 2090
         BO    @RT02090                                            2090
* ELSE                                                             2092
*   DO;                                                            2092
*   NCSPLCMD=NCSCSEP;                                              2093
         MVC   NCSPLCMD(2,CVINCSPL),@CB03453                       2093
*   CVIOUTB1='52'X;                                                2094
         MVI   CVIOUTB1,X'52'                                      2094
*   IF RLNPORT = '1'B /* IF ITS PORT                       @ZD13794 */
*     THEN CVIOUTBB = RPTLNDAF;  /* THEN USE PORT DAF      @ZD13791 */
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2095
         BNO   @RF02095                                            2095
         L     @09,CVIWKPT1                                        2096
         MVC   CVIOUTBB(2),RPTLNDAF(@09)                           2096
*     ELSE CVIOUTBB=RPRDAF;                                        2097
         B     @RC02095                                            2097
@RF02095 MVC   CVIOUTBB(2),RPRDAF(CVIWKPT2)                        2097
*   NCSPLRUO=ADDR(CVIOUTBF);                                       2098
@RC02095 LA    @09,CVIOUTBF                                        2098
         ST    @09,NCSPLRUO(,CVINCSPL)                             2098
*   NCSPLRUI=0;                                                    2099
         SLR   @09,@09                                             2099
         ST    @09,NCSPLRUI(,CVINCSPL)                             2099
*   NCSPLOLN='03'X;                                                2100
         LA    @09,3                                               2100
         STH   @09,NCSPLOLN(,CVINCSPL)                             2100
*   CALL CVIDOIO;                                                  2101
         BAL   @14,CVIDOIO                                         2101
*/********************************************************************/
*/* IF NCSPL RETURN CODE                                             */
*/* INDICATES THAT I/O FAILED, THEN, IF I/O WAS PURGED, SET THE QUIT */
*/* SWITCH. CALL CVIWTO TO ISSUE ERROR MESSAGE FOR 'SWITCH TO EP'    */
*/* FAILURE.                                                         */
*/********************************************************************/
*   IF NCSIORC^=NCSIOSUC                                           2102
*     THEN                                                         2102
         CLI   NCSIORC(CVINCSPL),X'00'                             2102
         BE    @RF02102                                            2102
*       DO;                                                        2103
*       CVIMSG# = '158I';                                          2104
         MVC   CVIMSG#(4),@CC05868                                 2104
*       CALL CVIWTO2;                                              2105
         BAL   @14,CVIWTO2                                         2105
*       END;                                                       2106
*     ELSE DO;                          /* CONFIG RESTART */       2107
         B     @RC02102                                            2107
@RF02102 DS    0H                                                  2108
*          RLNSWNCP='0'B;                                          2108
         NI    RLNSWNCP(CVIWKPT2),B'10111111'                      2108
*          IF RLNRBUSE='1'B THEN                                   2109
         TM    RLNRBUSE(CVIWKPT2),B'10000000'                      2109
         BNO   @RF02109                                            2109
*          RLNSWEP='1'B;                                           2110
         OI    RLNSWEP(CVIWKPT2),B'00000100'                       2110
*          ELSE;                                                   2111
@RF02109 DS    0H                                                  2112
*          END;                                                    2112
*    END;                                                          2113
@RC02102 DS    0H                                                  2114
*  /*SEGMENT(CVIPEL3)FINISH*/DO;GOTO CVIPEL3#;CVIPEL3@:END;        2114
@RT02090 DS    0H                                                  2115
         B     CVIPEL3#                                            2115
*END CVIPEPLN;                                                     2117
@EL00013 DS    0H                                                  2117
@EF00013 DS    0H                                                  2117
@ER00013 BR    @14                                                 2117
@PB00013 DS    0H                                                  2118
* GEN(  EJECT);                                                    2118
           EJECT
*CVIPEPL2: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 2119
         B     @PB00014                                            2119
CVIPEPL2 DS    0H                                                  2120
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY CVIIMM, CVIPEPLN, AND CVICOUNT TO      */
*/* ISSUE A DEACTIVATE LINE COMMAND TO THE 370X FOR THE LINE         */
*/* REPRESENTED BY THE RDT ENTRY POINTED TO BY CVIWKPT2.             */
*/* HOWEVER, CVIPEPL2 RETURNS IMMEDIATELY TO CALLER IF COMMAND IS    */
*/* INTERNAL ONLY                .                                   */
*/********************************************************************/
*CVINSI9=CVIRTNAD;                                                 2120
         ST    CVIRTNAD,CVINSI9                                    2120
*RFY (ISTRPRE,ISTRLN) BASED(CVIWKPT2);                             2121
*IF NCSVBF11='1'B                                                  2122
* THEN;                                                            2122
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2122
         BO    @RT02122                                            2122
*/********************************************************************/
*/* SET UP THE NCSPL TO INDICATE A DEACTIVATE LINE COMMAND TO THE    */
*/* 370X FOR THE LINE. OBTAIN THE DAF LOCK VIA CIDCTL AND CALL       */
*/* ISTINCIO TO ISSUE THE COMMAND.                                   */
*/********************************************************************/
* ELSE DO;                                                         2124
*  IF RPRLTASN = '1'B /* IF LINE TRACE ACTIVE               @ZM32959 */
*    THEN DO;          /* DEACTIVATE TRACE                  @ZM3259 */
         TM    RPRLTASN(CVIWKPT2),B'10000000'                      2125
         BNO   @RF02125                                            2125
*      NCSPLCMD=NCSCDCLT; /* CMD IS DEACT LINE TRACE        @ZM32959 */
         MVC   NCSPLCMD(2,CVINCSPL),@CB03471                       2127
*      CVIOUTBF(1:3)='010303'X; /* SET UP OUTBOUND RU       @ZM32959 */
         MVC   CVIOUTBF(3),@CB05875                                2128
*      CVIOUTBF(6:8)='010000'X; /*                          @ZM32959 */
         MVC   CVIOUTBF+5(3),@CB05876                              2129
*      IF RLNPORT='1'B          /* IF ITS PORT              @ZM32959 */
*        THEN CVIOUTBF(4:5)=RPTLNDAF; /* SET LINE DAF       @ZM32959 */
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2130
         BNO   @RF02130                                            2130
         L     @09,CVIWKPT1                                        2131
         MVC   CVIOUTBF+3(2),RPTLNDAF(@09)                         2131
*        ELSE CVIOUTBF(4:5)=RPRDAF;   /* SET LINE DAF       @ZM32959 */
         B     @RC02130                                            2132
@RF02130 MVC   CVIOUTBF+3(2),RPRDAF(CVIWKPT2)                      2132
*      CVIWKPT3=CVIWKPT2; /* SET UP WORK RDT PTR            @ZM32959 */
@RC02130 ST    CVIWKPT2,CVIWKPT3                                   2133
*      DO UNTIL CVIWKPT3->RPRENTRY=RPRENTRN; /* FIND RN     @ZM32959 */
@DL02134 DS    0H                                                  2135
*        CVIWKPT3=CVIWKPT3->RPRNSNEA; /* GET HIGHER NODE    @ZM32959 */
         L     @09,CVIWKPT3                                        2135
         L     @09,RPRNSNEA(,@09)                                  2135
         ST    @09,CVIWKPT3                                        2135
*      END;                                               /*@ZM32959 */
@DE02134 L     @09,CVIWKPT3                                        2136
         CLI   RPRENTRY(@09),X'01'                                 2136
         BNE   @DL02134                                            2136
*      NCSIOCID=CVISAF+CVIWKPT3->RPRDAF; /* SET UP CID      @ZM32959 */
         LH    @09,RPRDAF(,@09)                                    2137
         N     @09,@CF06623                                        2137
         ST    @09,NCSIOCID(,CVINCSPL)                             2137
*      NCSPLOLN=8;                       /* RECORD LENGTH   @ZM32959 */
         MVC   NCSPLOLN(2,CVINCSPL),@CH00094                       2138
*      NCSPLRUI=0;                  /* INBOUND RU ADDR=0    @ZM32959 */
         SLR   @09,@09                                             2139
         ST    @09,NCSPLRUI(,CVINCSPL)                             2139
*      NCSPLRUO=ADDR(CVIOUTBF);/*OUTBND RU ADDR IN NCSPL    @ZM32959 */
         LA    @09,CVIOUTBF                                        2140
         ST    @09,NCSPLRUO(,CVINCSPL)                             2140
*      CALL CVIDOIO;                     /*                 @ZM32959 */
         BAL   @14,CVIDOIO                                         2141
*      RPRLTASN='0'B; /*TURN OFF TRACE BIT IN LINE          @ZM32959 */
         NI    RPRLTASN(CVIWKPT2),B'01111111'                      2142
*      CVIWKPT3->RPRLTASN='0'B;                          /* @ZM32959 */
         L     @09,CVIWKPT3                                        2143
         NI    RPRLTASN(@09),B'01111111'                           2143
*    END;             /*                                    @ZM32959 */
*    ELSE;            /*                                    @ZM32959 */
@RF02125 DS    0H                                                  2146
*      NCSPLCMD=NCSCDACL;                                          2146
         MVC   NCSPLCMD(2,CVINCSPL),@CB03445                       2146
*      CVIOUTB1='01'X;                                             2147
         MVI   CVIOUTB1,X'01'                                      2147
*      CVIOUTB2='02'X;                                             2148
         MVI   CVIOUTB2,X'02'                                      2148
*      CVIOUTB3='0B'X;                                             2149
         MVI   CVIOUTB3,X'0B'                                      2149
*      IF RLNPORT='1'B                                             2150
*        THEN DO;                                                  2150
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2150
         BNO   @RF02150                                            2150
*             CVISFDF=RPTLNCID;                                    2152
         L     @09,CVIWKPT1                                        2152
         L     @09,RPTLNCID(,@09)                                  2152
         ST    @09,CVISFDF                                         2152
*             CVIOUTBC=CVIDF;                                      2153
         MVC   CVIOUTBC(2),CVIDF                                   2153
*             END;                                                 2154
*        ELSE CVIOUTBC=RPRDAF;                                     2155
         B     @RC02150                                            2155
@RF02150 MVC   CVIOUTBC(2),RPRDAF(CVIWKPT2)                        2155
*      NCSPLRUO=ADDR(CVIOUTBF);                                    2156
@RC02150 LA    @09,CVIOUTBF                                        2156
         ST    @09,NCSPLRUO(,CVINCSPL)                             2156
*      NCSPLRUI=0;                                                 2157
         SLR   @09,@09                                             2157
         ST    @09,NCSPLRUI(,CVINCSPL)                             2157
*      NCSPLOLN='05'X;                                             2158
         LA    @09,5                                               2158
         STH   @09,NCSPLOLN(,CVINCSPL)                             2158
*      CVIWKPT3=CVIWKPT2;                                          2159
         ST    CVIWKPT2,CVIWKPT3                                   2159
*      DO WHILE(CVIWKPT3->RPRENTRY ^= RPRENTRN);                   2160
         B     @DE02160                                            2160
@DL02160 DS    0H                                                  2161
*      CVIWKPT3=CVIWKPT3->RPRNSNEA;                                2161
         L     @09,CVIWKPT3                                        2161
         L     @09,RPRNSNEA(,@09)                                  2161
         ST    @09,CVIWKPT3                                        2161
*      END;                                                        2162
@DE02160 L     @09,CVIWKPT3                                        2162
         CLI   RPRENTRY(@09),X'01'                                 2162
         BNE   @DL02160                                            2162
*      NCSIOCID=CVISAF+CVIWKPT3->RPRDAF;                           2163
         LH    @09,RPRDAF(,@09)                                    2163
         N     @09,@CF06623                                        2163
         ST    @09,NCSIOCID(,CVINCSPL)                             2163
*      CALL CVIDOIO;                                               2164
         BAL   @14,CVIDOIO                                         2164
*/********************************************************************/
*/* UPON RETURN, UPDATE CRR AUDIT TRAIL AND SET THE 'VARY I/O DONE'  */
*/* BIT IN THE RDT ENTRY FOR THE LINE. IF THE NCSPL RETURN CODE      */
*/* INDICATES AN I/O FAILURE, THEN, IF I/O WAS PURGED, SET THE QUIT  */
*/* SWITCH. CALL CVIWTO TO ISSUE ERROR MESSAGE.                      */
*/********************************************************************/
*      RPRVIODN='1'B;                                              2165
*      RPRONLIN='0'B;                                              2166
         OI    RPRVIODN(CVIWKPT2),B'00010000'                      2166
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2166
*      RPRLIVE='0'B;                                               2167
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2167
*      NCSACTV='1'B;                                       /*@X50BHLV*/
         OI    NCSACTV(CVINCSPL),B'10000000'                       2168
*      NCSAIMOD='0'B;                                      /*@X50BHLV*/
         NI    NCSAIMOD(CVINCSPL),B'01111111'                      2169
*      CALL CVICRIO;                                       /*@X50BHLV*/
         BAL   @14,CVICRIO                                         2170
*      IF NCSIORC^=NCSIOSUC                                        2171
*       THEN DO;                                                   2171
         CLI   NCSIORC(CVINCSPL),X'00'                             2171
         BE    @RF02171                                            2171
*        CVIMSG# = '161I';                                         2173
         MVC   CVIMSG#(4),@CC05877                                 2173
*        CALL CVIWTO2;                                             2174
         BAL   @14,CVIWTO2                                         2174
*        END;                                                      2175
* ELSE RLNACTLN='0'B;           /* CONFIG RESTART */               2176
         B     @RC02171                                            2176
@RF02171 NI    RLNACTLN(CVIWKPT2),B'01111111'                      2176
*END;                                                              2177
@RC02171 DS    0H                                                  2178
*CVIRTNAD=CVINSI9;                                                 2178
@RT02122 L     CVIRTNAD,CVINSI9                                    2178
*END CVIPEPL2;                                                     2179
@EL00014 DS    0H                                                  2179
@EF00014 DS    0H                                                  2179
@ER00014 BR    @14                                                 2179
@PB00014 DS    0H                                                  2180
* GEN(  EJECT);                                                    2180
           EJECT
*CVICOUNT: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 2181
         B     @PB00015                                            2181
CVICOUNT DS    0H                                                  2182
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY CVINORM TO ACCUMULATE THE 'VARY        */
*/* PENDING' COUNT FOR THE RDT ENTRY POINTED TO BY CVIWKPT2.         */
*/********************************************************************/
*CVINSI10=CVIRTNAD;                                                2182
         ST    CVIRTNAD,CVINSI10                                   2182
*RFY ISTRPRE BASED(CVIWKPT2);                                      2183
*RFY ISTDEVCH BASED(ADDR(RPRDEVCH));                               2184
*RFY ISTRLN BASED(CVIWKPT2);                                       2185
*/********************************************************************/
*/* FOR COMPONENT, UPDATE THE INTERNAL COMPONENT COUNT AND SET THE   */
*/* RDT ENTRY PENDING COUNT TO 1                                     */
*/********************************************************************/
*IF RPRENTRY=RPRENTCM                                              2186
* THEN DO;                                                         2186
         CLI   RPRENTRY(CVIWKPT2),X'90'                            2186
         BNE   @RF02186                                            2186
*  COMP=COMP+1;                                                    2188
         LA    @09,1                                               2188
         LH    @04,COMP                                            2188
         ALR   @04,@09                                             2188
         STH   @04,COMP                                            2188
*  RPRPEPCT=1;                                                     2189
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2189
* END;                                                             2190
* ELSE;                                                            2191
@RF02186 DS    0H                                                  2192
*IF RPRENTRY=RPRENTTR × RPRENTRY=RPRENTUT /* TERM. OR UTERM  @D32CKLV*/
* THEN DO;                                                         2192
         CLI   RPRENTRY(CVIWKPT2),X'80'                            2192
         BE    @RT02192                                            2192
         CLI   RPRENTRY(CVIWKPT2),X'75'                            2192
         BNE   @RF02192                                            2192
@RT02192 DS    0H                                                  2193
*/********************************************************************/
*/* FOR TERMINAL IN A CLUSTER, UPDATE THE INTERNAL CLUSTER COUNT AND */
*/* SET THE RDT ENTRY PENDING COUNT TO 1.                            */
*/********************************************************************/
*  IF RPRNSNEA->RPRENTRY=RPRENTCL                                  2194
*   THEN DO;                                                       2194
         L     @09,RPRNSNEA(,CVIWKPT2)                             2194
         CLI   RPRENTRY(@09),X'70'                                 2194
         BNE   @RF02194                                            2194
*    CLUSTRM=CLUSTRM+1;                                            2196
         LA    @09,1                                               2196
         LH    @04,CLUSTRM                                         2196
         ALR   @04,@09                                             2196
         STH   @04,CLUSTRM                                         2196
*    RPRPEPCT=1;                                                   2197
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2197
*   END;                                                           2198
*/********************************************************************/
*/* ELSE IF TERMINAL HAS SCHEDULABLE SUBNODES, BUT COMPONENT VARY    */
*/* PENDING COUNT IS ZERO, AND COMMAND IS AGAINST THE 370X, CALL     */
*/* CVICLOSE TO CLOSE THE MULTI-COMPONENT TERMINAL.                  */
*/********************************************************************/
*  ELSE                                                            2199
*    IF DEVSUBND='1'B                                              2199
*    THEN DO;                                                      2199
         B     @RC02194                                            2199
@RF02194 LA    @09,44                                              2199
         LR    @04,CVIWKPT2                                        2199
         ALR   @04,@09                                             2199
         TM    DEVSUBND(@04),B'00010000'                           2199
         BNO   @RF02199                                            2199
*     RFY ISTDEVCH BASED(ADDR(CVIWKPT1->RPRDEVCH));                2201
*     IF COMP=0                                                    2202
*      THEN                                                        2202
         LH    @04,COMP                                            2202
         LTR   @04,@04                                             2202
         BNZ   @RF02202                                            2202
*       IF CVIWKPT1->RPRENTRY=RPRENTRN × (CVIWKPT1->RPRENTRY=RPRENTTR &
*       DEVSUBND='1'B)                                             2203
*        THEN DO;                                                  2203
         L     @04,CVIWKPT1                                        2203
         CLI   RPRENTRY(@04),X'01'                                 2203
         BE    @RT02203                                            2203
         CLI   RPRENTRY(@04),X'80'                                 2203
         BNE   @RF02203                                            2203
         ALR   @04,@09                                             2203
         TM    DEVSUBND(@04),B'00010000'                           2203
         BNO   @RF02203                                            2203
@RT02203 DS    0H                                                  2204
*         RPRONLIN='0'B;                                           2205
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2205
*         RPRLIVE='0'B;                                            2206
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2206
*         CVINPUT=4;                                               2207
         LA    CVINPUT,4                                           2207
*         CALL CVIUNLOC;                                           2208
         BAL   @14,CVIUNLOC                                        2208
*         CALL CVICLOSE;                                           2209
         BAL   @14,CVICLOSE                                        2209
*         CVINPUT=4;                                               2210
         LA    CVINPUT,4                                           2210
*         CALL CVILOC;                                             2211
         BAL   @14,CVILOC                                          2211
*        END;                                                      2212
*       ELSE;                                                      2213
@RF02203 DS    0H                                                  2214
*/********************************************************************/
*/* ELSE IF MULTICOMPONENT TERMINAL HAS COMPONENTS WITH VARY PENDING */
*/* SET THE RDT ENTRY PENDING COUNT TO THE COMPONENT COUNT, UP THE   */
*/* 'PENDING ON LINE' ACCUMULATOR, AND RESET THE COMPONENT           */
*/* ACCUMULATOR TO ZERO.                                             */
*/********************************************************************/
*     ELSE DO;                                                     2214
         B     @RC02202                                            2214
@RF02202 DS    0H                                                  2215
*      RPRPEPCT=COMP;                                              2215
         LH    @09,COMP                                            2215
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2215
*      VPONLINE=VPONLINE+1;                                        2216
         LA    @09,1                                               2216
         AH    @09,VPONLINE                                        2216
         STH   @09,VPONLINE                                        2216
*      COMP=0;                                                     2217
         SLR   @09,@09                                             2217
         STH   @09,COMP                                            2217
*     END;                                                         2218
*   RFY  ISTDEVCH BASED(ADDR(RPRDEVCH));                           2219
@RC02202 DS    0H                                                  2220
*   END;                                                           2220
*/********************************************************************/
*/* ELSE IF TERMINAL CONNECTED TO LCDO AND COMMAND IS AGAINST LCDO   */
*/* OR 370X, THEN INCREMENT THE PENDING COUNT IN THE LCDO×370X ENTRY.*/
*/* IN ANY CASE, SET THE DIAL-OUT TERMINAL RDT ENTRY PENDING COUNT.  */
*/********************************************************************/
*   ELSE                                                           2221
*    IF RPRNSNEA->RPRENTRY=RPRENTDS                                2221
*     THEN DO;                                                     2221
         B     @RC02199                                            2221
@RF02199 L     @09,RPRNSNEA(,CVIWKPT2)                             2221
         CLI   RPRENTRY(@09),X'20'                                 2221
         BNE   @RF02221                                            2221
*      IF CVIWKPT1->RPRENTRY=RPRENTDS×CVIWKPT1->RPRENTRY=RPRENTRN  2223
*       THEN RPRNSNEA->RPRPEPCT=RPRNSNEA->RPRPEPCT+1;              2223
         L     @09,CVIWKPT1                                        2223
         CLI   RPRENTRY(@09),X'20'                                 2223
         BE    @RT02223                                            2223
         CLI   RPRENTRY(@09),X'01'                                 2223
         BNE   @RF02223                                            2223
@RT02223 DS    0H                                                  2224
         L     @09,RPRNSNEA(,CVIWKPT2)                             2224
         LA    @04,1                                               2224
         AH    @04,RPRPEPCT(,@09)                                  2224
         STH   @04,RPRPEPCT(,@09)                                  2224
*      ELSE;                                                       2225
@RF02223 DS    0H                                                  2226
*      RPRPEPCT=1;                                                 2226
         MVC   RPRPEPCT(2,CVIWKPT2),@CH00096                       2226
*     END;                                                         2227
*/********************************************************************/
*/* ELSE IF TERMINAL CONNECTED TO PORT, SET THE TERMINAL PENDING     */
*/* COUNT TO 1.                                                      */
*/********************************************************************/
*    ELSE                                                          2228
*     IF RPRNSNEA->RPRENTRY=RPRENTLN & RPRNSNEA->RLNPORT='1'B      2228
*      THEN RPRPEPCT=1;                                            2228
         B     @RC02221                                            2228
@RF02221 L     @09,RPRNSNEA(,CVIWKPT2)                             2228
         CLI   RPRENTRY(@09),X'50'                                 2228
         BNE   @RF02228                                            2228
         TM    RLNPORT(@09),B'00010000'                            2228
         BNO   @RF02228                                            2228
         MVC   RPRPEPCT(2,CVIWKPT2),@CH00096                       2229
*/********************************************************************/
*/* FOR ANY OTHER TERMINAL, SET PENDING COUNT TO 1 AND INCREMENT THE */
*/* 'VARY PENDING ON LINE' ACCUMULATOR.                              */
*/********************************************************************/
*     ELSE DO;                                                     2230
         B     @RC02228                                            2230
@RF02228 DS    0H                                                  2231
*      RPRPEPCT=1;                                                 2231
         LA    @09,1                                               2231
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2231
*      VPONLINE=VPONLINE+1;                                        2232
         AH    @09,VPONLINE                                        2232
         STH   @09,VPONLINE                                        2232
*     END;                                                         2233
* END;                                                             2234
* ELSE;                                                            2235
@RF02192 DS    0H                                                  2236
*/********************************************************************/
*/* FOR A CLUSTER, INCREMENT THE CLUSTER COUNT, AND IF IT IS 0 (NO   */
*/* NODES ON CLUSTER WITH VARY PENDING) AND THE COMMAND IS AGAINST   */
*/* THE CLUSTER AND THE COMMAND IS A NORMAL VARY, THEN CALL CVIENTRY */
*/* TO DEACTIVATE THE CLUSTER. REGARDLESS OF WHETHER THE COMMAND IS  */
*/* NORMAL OR IMMEDIATE, IF THE COMMAND IS AGAINST THE CLUSTER OR    */
*/* 370X AND NO LOWER NODES ON THE CLUSTER HAVE VARY PENDING, THEN   */
*/* CALL CVICLOSE TO CLOSE THE CLUSTER.                              */
*/********************************************************************/
*IF RPRENTRY=RPRENTLU                                              2236
*  THEN DO;                                                        2236
@RC02192 CLI   RPRENTRY(CVIWKPT2),X'81'                            2236
         BNE   @RF02236                                            2236
*       SNACNT=SNACNT+1;                                           2238
         LA    @09,1                                               2238
         LH    @04,SNACNT                                          2238
         ALR   @04,@09                                             2238
         STH   @04,SNACNT                                          2238
*       RPRPEPCT=1;                                                2239
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2239
*       END;                                                       2240
*  ELSE;                                                           2241
@RF02236 DS    0H                                                  2242
*IF RPRENTRY=RPRENTCL                                              2242
* THEN DO;                                                         2242
         CLI   RPRENTRY(CVIWKPT2),X'70'                            2242
         BNE   @RF02242                                            2242
*  IF CLUSTRM=0                                     /* ZTR6415 GH*/
*   THEN                                                           2244
         LH    @09,CLUSTRM                                         2244
         LTR   @09,@09                                             2244
         BNZ   @RF02244                                            2244
*    IF CVIWKPT1=CVIWKPT2 × CVIWKPT1->RPRENTRY=RPRENTRN            2245
*     THEN DO;                                                     2245
         L     @09,CVIWKPT1                                        2245
         CR    @09,CVIWKPT2                                        2245
         BE    @RT02245                                            2245
         CLI   RPRENTRY(@09),X'01'                                 2245
         BNE   @RF02245                                            2245
@RT02245 DS    0H                                                  2246
*          CVINPUT=4;                                              2247
         LA    CVINPUT,4                                           2247
*          CALL CVIUNLOC;                                          2248
         BAL   @14,CVIUNLOC                                        2248
*          RPRONLIN='0'B;                                          2249
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2249
*          RPRLIVE='0'B;                                           2250
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2250
*          CALL CVICLOSE;                                          2251
         BAL   @14,CVICLOSE                                        2251
*          CVINPUT=4;                                              2252
         LA    CVINPUT,4                                           2252
*          CALL CVILOC;                                            2253
         BAL   @14,CVILOC                                          2253
*          END;                                                    2254
*     ELSE;                                                        2255
@RF02245 DS    0H                                                  2256
*/********************************************************************/
*/* FOR A CLUSTER WITH ACCUMULATED VARY PENDING COUNT, PUT THE       */
*/* ACCUMULATED COUNT IN THE CLUSTER ENTRY PENDING COUNT AND         */
*/* INCREMENT THE 'VARY PENDING ON LINE' COUNT.                      */
*/* RESET THE CLUSTER COUNTER WHEN DONE WITH CLUSTER.                */
*/********************************************************************/
*  ELSE DO;                                                        2256
         B     @RC02244                                            2256
@RF02244 DS    0H                                                  2257
*       RPRPEPCT=CLUSTRM;                                          2257
         LH    @09,CLUSTRM                                         2257
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2257
*       VPONLINE=VPONLINE+1;                                       2258
         LA    @09,1                                               2258
         AH    @09,VPONLINE                                        2258
         STH   @09,VPONLINE                                        2258
*       END;                                                       2259
*  CLUSTRM=0;                                                      2260
@RC02244 SLR   @09,@09                                             2260
         STH   @09,CLUSTRM                                         2260
* END;                                                             2261
* ELSE;                                                            2262
@RF02242 DS    0H                                                  2263
*IF RPRENTRY=RPRENTCC                                              2263
*  THEN DO;                                                        2263
         CLI   RPRENTRY(CVIWKPT2),X'71'                            2263
         BNE   @RF02263                                            2263
*       IF SNACNT=0                                                2265
*         THEN                                                     2265
         LH    @09,SNACNT                                          2265
         LTR   @09,@09                                             2265
         BNZ   @RF02265                                            2265
*           DO;                                                    2266
*           CVINPUT=4;                                             2267
         LA    CVINPUT,4                                           2267
*           CALL CVIUNLOC;                                         2268
         BAL   @14,CVIUNLOC                                        2268
*           CVINPUT=CVINCSPL;                                      2269
         LR    CVINPUT,CVINCSPL                                    2269
*           CALL ISTINCVP;                                         2270
         L     @15,@CV05656                                        2270
         BALR  @14,@15                                             2270
*            END;                                                  2271
*         ELSE RPRPEPCT=SNACNT;                                    2272
         B     @RC02265                                            2272
@RF02265 LH    @09,SNACNT                                          2272
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2272
*       END;                                                       2273
*    ELSE;                                                         2274
@RF02263 DS    0H                                                  2275
*/********************************************************************/
*/* FOR A PORT WITH NO ASSOCIATED TERMINAL, SET THE 'VARY PENDING'   */
*/* BIT, RELEASE THE OPEN/CLOSE/VARY LOCK, AND CALL CVICLOSE TO      */
*/* CLOSE THE PORT. IF COMMAND IS NORMAL AND AGAINST THE LCDI PART   */
*/* OF THE PORT (NCSPLRID=RPRNAME), TURN OFF THE ONLINE AND LIVE BITS*/
*/* AND THEN CALL CVIPEPL2 TO DEACTIVATE THE LINE. IF COMMAND IS     */
*/* NORMAL AND AGAINST THE CTERM, TURN OFF THE LIVE BIT AND THE CTERM*/
*/* ONLINE BIT AND THEN CALL CVIENTRY TO DEACTIVATE THE CTERM DEVICE.*/
*/* REOBTAIN THE OPEN/CLOSE/VARY LOCK AND RESET THE RPTVRYPD BIT IN  */
*/* THE PORT ENTRY.                                                  */
*/********************************************************************/
*RFY ISTRPT BASED(CVIWKPT2);                                       2275
@RC02263 DS    0H                                                  2276
*IF RPRENTRY=RPRENTLN & RLNPORT='1'B & RPRNCBA^=0                  2276
* THEN DO;                                                         2276
         CLI   RPRENTRY(CVIWKPT2),X'50'                            2276
         BNE   @RF02276                                            2276
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2276
         BNO   @RF02276                                            2276
         SLR   @09,@09                                             2276
         L     @04,RPRNCBA(,CVIWKPT2)                              2276
         CR    @04,@09                                             2276
         BE    @RF02276                                            2276
*  IF  RPRNCBA->NCBFMCBA->FMCFMCBA=0           /*@AS10824*/        2278
*   THEN DO;                                                       2278
         L     @04,NCBFMCBA(,@04)                                  2278
         C     @09,FMCFMCBA(,@04)                                  2278
         BNE   @RF02278                                            2278
*    RPTVRYPD='1'B;                                                2280
         OI    RPTVRYPD(CVIWKPT2),B'01000000'                      2280
*    CVINPUT=4;                                                    2281
         LA    CVINPUT,4                                           2281
*    CALL CVIUNLOC;                                                2282
         BAL   @14,CVIUNLOC                                        2282
*    CALL CVICLOSE;                                                2283
         BAL   @14,CVICLOSE                                        2283
*    CVINPUT=4;                                                    2284
         LA    CVINPUT,4                                           2284
*    CALL CVILOC;                                                  2285
         BAL   @14,CVILOC                                          2285
*    CVIWKPT3=CVIWKPT2;                                            2286
         ST    CVIWKPT2,CVIWKPT3                                   2286
*    IF NCSVBF12='1'B × NCSVBF16='1'B                              2287
*     THEN;                                                        2287
         TM    NCSVBF12(CVINCSPL),B'00010001'                      2287
         BNZ   @RT02287                                            2287
*     ELSE                                                         2289
*      IF NCSPLRID=RPRNAME                                         2289
*       THEN DO;                                                   2289
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(CVIWKPT2)              2289
         BNE   @RF02289                                            2289
*        RPRONLIN='0'B;                                            2291
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2291
*        RPTONLIN='0'B;                                            2292
         NI    RPTONLIN(CVIWKPT2),B'11101111'                      2292
*        RPRLIVE='0'B;                                             2293
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2293
*        CVINPUT=4;                                                2294
         LA    CVINPUT,4                                           2294
*        CALL CVIUNLOC;                                            2295
         BAL   @14,CVIUNLOC                                        2295
*        CALL CVIPEPLN;                                            2296
         BAL   @14,CVIPEPLN                                        2296
*        CVINPUT=4;                                                2297
         LA    CVINPUT,4                                           2297
*        CALL CVILOC;                                              2298
         BAL   @14,CVILOC                                          2298
*       END;                                                       2299
*      ELSE                                                        2300
*       IF NCSPLRID=RPTCTNM                                        2300
*        THEN DO;                                                  2300
         B     @RC02289                                            2300
@RF02289 CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(CVIWKPT2)              2300
         BNE   @RF02300                                            2300
*         RPTONLIN='0'B;                                           2302
         NI    RPTONLIN(CVIWKPT2),B'11101111'                      2302
*         RPRLIVE='0'B;                                            2303
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2303
*        END;                                                      2304
*       ELSE;                                                      2305
@RF02300 DS    0H                                                  2306
*    RPTVRYPD='0'B;                                                2306
@RC02289 DS    0H                                                  2306
@RT02287 NI    RPTVRYPD(CVIWKPT2),B'10111111'                      2306
*   END;                                                           2307
*/********************************************************************/
*/* ELSE FOR A PORT WITH AN ASSOCIATED TERMINAL, IF THE COMMAND IS   */
*/* FOR THE LINE, SET THE VARY PENDING COUNT FOR THE LINE TO 1 AND   */
*/* INCREMENT THE INTERNAL 'GROUP VARY PENDING' COUNTER.  SET THE    */
*/* VARY PENDING COUNT FOR THE CTERM TO 1.                           */
*/********************************************************************/
*  ELSE DO;                                                        2308
         B     @RC02278                                            2308
@RF02278 DS    0H                                                  2309
*   IF NCSPLRID=RPTCTNM                                            2309
*    THEN;                                                         2309
         CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(CVIWKPT2)              2309
         BE    @RT02309                                            2309
*    ELSE DO;                                                      2311
*     RPRPEPCT=1;                                                  2312
         LA    @09,1                                               2312
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2312
*     GROUPVP=GROUPVP+1;                                           2313
         AH    @09,GROUPVP                                         2313
         STH   @09,GROUPVP                                         2313
*    END;                                                          2314
*  RPTPEPCT=1;                                                     2315
@RT02309 MVC   RPTPEPCT(2,CVIWKPT2),@CH00096                       2315
*  END;                                                            2316
* END;                                                             2317
* ELSE                                                             2318
*  IF RPRENTRY=RPRENTLN&RLNPORT='1'B&NCSVBF12='0'B&NCSVBF16='0'B   2318
*   THEN                                                 /*@AS11203*/
         B     @RC02276                                            2318
@RF02276 CLI   RPRENTRY(CVIWKPT2),X'50'                            2318
         BNE   @RF02318                                            2318
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2318
         BNO   @RF02318                                            2318
         TM    NCSVBF12(CVINCSPL),B'00010001'                      2318
         BNZ   @RF02318                                            2318
*    IF NCSPLRID=RPRNAME                                   /*@AS11203*/
*     THEN DO;                                             /*@AS11203*/
         CLC   NCSPLRID(8,CVINCSPL),RPRNAME(CVIWKPT2)              2319
         BNE   @RF02319                                            2319
*      RPRONLIN='0'B;                                      /*@AS11203*/
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2321
*      RPRLIVE='0'B;                                       /*@AS11203*/
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2322
*      RPTONLIN='0'B;                                      /*@AS11203*/
         NI    RPTONLIN(CVIWKPT2),B'11101111'                      2323
*      CVINPUT=4;                                          /*@AS11203*/
         LA    CVINPUT,4                                           2324
*      CALL CVIUNLOC;                                      /*@AS11203*/
         BAL   @14,CVIUNLOC                                        2325
*      CALL CVIPEPLN;                                      /*@AS11203*/
         BAL   @14,CVIPEPLN                                        2326
*      CVINPUT=4;                                          /*@AS11203*/
         LA    CVINPUT,4                                           2327
*      CALL CVILOC;                                        /*@AS11203*/
         BAL   @14,CVILOC                                          2328
*      END;                                                /*@AS11203*/
*     ELSE;                                                /*@AS11203*/
@RF02319 DS    0H                                                  2331
*    ELSE;                                                 /*@AS11203*/
@RF02318 DS    0H                                                  2332
*/********************************************************************/
*/* FOR LCDO, IF VARY PENDING COUNT IS ZERO,THEN RESET THE 'ONLINE'  */
*/* BIT TO INDICATE LCDO NOW OFFLINE. ELSE, INCREMENT THE INTERNAL   */
*/* COUNT FOR NUMBER OF VARIES PENDING ON 370X.                      */
*/********************************************************************/
*IF RPRENTRY=RPRENTDS                                              2332
* THEN DO;                                                         2332
@RC02276 CLI   RPRENTRY(CVIWKPT2),X'20'                            2332
         BNE   @RF02332                                            2332
*  IF RPRPEPCT=0                                                   2334
*   THEN DO;                                                       2334
         LH    @09,RPRPEPCT(,CVIWKPT2)                             2334
         LTR   @09,@09                                             2334
         BNZ   @RF02334                                            2334
*        RPRONLIN='0'B;                                            2336
         NI    RPRONLIN(CVIWKPT2),B'11110111'                      2336
*        RPRLIVE='0'B;                                             2337
         NI    RPRLIVE(CVIWKPT2),B'11111110'                       2337
*        END;                                                      2338
*  ELSE RN=RN+1;                                                   2339
         B     @RC02334                                            2339
@RF02334 LA    @09,1                                               2339
         AH    @09,RN                                              2339
         STH   @09,RN                                              2339
* END;                                                             2340
* ELSE                                                             2341
*/********************************************************************/
*/* FOR LEASED LINE OR DIAL-OUT LINE, SET THE RDT ENTRY VARY PENDING */
*/* COUNT TO THE COUNT ACCUMULATED FOR THE LINE. IF THE COUNT IS ZERO*/
*/* AND IF THE COMMAND IS NOT IMMEDIATE OR MODIFY DUMP, THEN CALL    */
*/* CVIPEPLN TO DEACTIVATE THE LINE. OTHERWISE, JUST INCREMENT THE   */
*/* INTERNAL COUNTER OF VARIES PENDING FOR THE GROUP. RESET THE      */
*/* INTERNAL 'VARY PENDING ON LINE' COUNTER.                         */
*/********************************************************************/
*IF RPRENTRY=RPRENTLN & RLNRACAT='0'B & RLNPORT='0'B               2341
* THEN DO;                                                         2341
         B     @RC02332                                            2341
@RF02332 CLI   RPRENTRY(CVIWKPT2),X'50'                            2341
         BNE   @RF02341                                            2341
         TM    RLNRACAT(CVIWKPT2),B'10010000'                      2341
         BNZ   @RF02341                                            2341
*  RPRPEPCT=VPONLINE;                                              2343
         LH    @09,VPONLINE                                        2343
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2343
*  IF RPRPEPCT=0                                                   2344
*   THEN                                                           2344
         LTR   @09,@09                                             2344
         BNZ   @RF02344                                            2344
*    IF NCSVBF12='1'B × NCSVBF16='1'B                              2345
*     THEN;                                                        2345
         TM    NCSVBF12(CVINCSPL),B'00010001'                      2345
         BNZ   @RT02345                                            2345
*     ELSE DO;                                                     2347
*      CVINPUT=4;                                                  2348
         LA    CVINPUT,4                                           2348
*      CALL CVIUNLOC;                                              2349
         BAL   @14,CVIUNLOC                                        2349
*      CALL CVIPEPLN;                                              2350
         BAL   @14,CVIPEPLN                                        2350
*      CVINPUT=4;                                                  2351
         LA    CVINPUT,4                                           2351
*      CALL CVILOC;                                                2352
         BAL   @14,CVILOC                                          2352
*     END;                                                         2353
*  ELSE GROUPVP=GROUPVP+1;                                         2354
         B     @RC02344                                            2354
@RF02344 LA    @09,1                                               2354
         AH    @09,GROUPVP                                         2354
         STH   @09,GROUPVP                                         2354
*  VPONLINE=0;                                                     2355
@RC02344 SLR   @09,@09                                             2355
         STH   @09,VPONLINE                                        2355
* END;                                                             2356
* ELSE;                                                            2357
@RF02341 DS    0H                                                  2358
*/********************************************************************/
*/* FOR A GROUP, SET THE RDT ENTRY 'VARY PENDING' COUNT TO THE COUNT */
*/* ACCUMULATED FOR THE GROUP. IF THE COUNT IS NOT ZERO, THEN        */
*/* INCREMENT THE INTERNAL COUNT FOR VARIES PENDING ON THE 370X AND  */
*/* RESET THE INTERNAL 'GROUP VARY PENDING' COUNTER.                 */
*/********************************************************************/
*IF RPRENTRY=RPRENTGP                                              2358
* THEN DO;                                                         2358
@RC02332 CLI   RPRENTRY(CVIWKPT2),X'30'                            2358
         BNE   @RF02358                                            2358
*  RPRPEPCT=GROUPVP;                                               2360
         LH    @09,GROUPVP                                         2360
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2360
*  IF RPRPEPCT=0                                                   2361
*   THEN;                                                          2361
         LTR   @09,@09                                             2361
         BZ    @RT02361                                            2361
*  ELSE DO;                                                        2363
*   RN=RN+1;                                                       2364
         LA    @09,1                                               2364
         AH    @09,RN                                              2364
         STH   @09,RN                                              2364
*   GROUPVP=0;                                                     2365
         SLR   @09,@09                                             2365
         STH   @09,GROUPVP                                         2365
*  END;                                                            2366
* END;                                                             2367
* ELSE;                                                            2368
@RF02358 DS    0H                                                  2369
*/********************************************************************/
*/* FOR A 370X, SET THE RDT ENTRY 'VARY PENDING' COUNT TO THAT       */
*/* ACCUMULATED FOR THE 370X.                                        */
*/********************************************************************/
*IF RPRENTRY=RPRENTRN                                              2369
* THEN DO;                                                /*@ZD13321*/
@RC02358 CLI   RPRENTRY(CVIWKPT2),X'01'                            2369
         BNE   @RF02369                                            2369
*   IF RPRNCBA->NCBFMCBA=0                                 /*@ZD13321*/
*     THEN;                                                /*@ZD13321*/
         L     @09,RPRNCBA(,CVIWKPT2)                              2371
         L     @09,NCBFMCBA(,@09)                                  2371
         LTR   @09,@09                                             2371
         BZ    @RT02371                                            2371
*     ELSE DO;                                             /*@ZD13321*/
*      CVIFMCB=RPRNCBA->NCBFMCBA;                          /*@ZD13321*/
         L     @09,RPRNCBA(,CVIWKPT2)                              2374
         L     @09,NCBFMCBA(,@09)                                  2374
         ST    @09,CVIFMCB                                         2374
*      RFY ISTFMCB BASED(CVIFMCB);                         /*@ZD13321*/
*      DO WHILE FMCFMCBA^=0;                               /*@ZD13321*/
         B     @DE02376                                            2376
@DL02376 DS    0H                                                  2377
*        RN=RN+1;                                          /*@ZD13321*/
         LA    @09,1                                               2377
         AH    @09,RN                                              2377
         STH   @09,RN                                              2377
*        CVIFMCB=FMCFMCBA;                                 /*@ZD13321*/
         L     @09,CVIFMCB                                         2378
         L     @09,FMCFMCBA(,@09)                                  2378
         ST    @09,CVIFMCB                                         2378
*      END;                                                /*@ZD13321*/
@DE02376 L     @09,CVIFMCB                                         2379
         L     @09,FMCFMCBA(,@09)                                  2379
         LTR   @09,@09                                             2379
         BNZ   @DL02376                                            2379
*     END;                                                 /*@ZD13321*/
*   RPRPEPCT=RN;                                           /*@ZD13321*/
@RT02371 LH    @09,RN                                              2381
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2381
*  END;                                                            2382
* ELSE;                                                            2383
@RF02369 DS    0H                                                  2384
*/********************************************************************/
*/* FOR A LOCAL CONTROL UNIT, SET THE RDT ENTRY 'VARY PENDING' COUNT */
*/* TO THE COUNT ACCUMULATED FOR THE LINE (IN A LOCAL RDT SEGMENT,THE*/
*/* LOCAL CONTROL UNIT ENTRY IS ANALAGOUS TO THE LINE ENTRY IN A 370X*/
*/* SEGMENT). IF THE COUNT IS ZERO, THEN RESET THE 'ONLINE' BIT,     */
*/* RELEASE THE OPEN/CLOSE/VARY LOCK, AND,IF THE COMMAND IS IMMEDIATE*/
*/* THEN CALL CVICLOSE TO CLOSE THE LOCAL CONTROL UNIT.IF THE REQUEST*/
*/* IS NORMAL, CALL CVILCLPR TO DEACTIVATE THE LOCAL DEVICE.         */
*/* REOBTAIN THE OPEN/CLOSE/VARY LOCK.                               */
*/********************************************************************/
*IF RPRENTRY=RPRENTLC                                              2384
* THEN DO;                                                         2384
         CLI   RPRENTRY(CVIWKPT2),X'45'                            2384
         BNE   @RF02384                                            2384
*  RPRPEPCT=VPONLINE;                                              2386
         LH    @09,VPONLINE                                        2386
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2386
*  IF RPRPEPCT=0                                                   2387
*   THEN;                                                          2387
         LTR   @09,@09                                             2387
         BZ    @RT02387                                            2387
*/********************************************************************/
*/* ELSE FOR A LOCAL CONTROL UNIT WITH AN ACCUMULATED 'VARY PENDING' */
*/* COUNT GREATER THAN ZERO, INCREMENT THE INTERNAL 'LOCAL VARY      */
*/* PENDING' COUNT AND RESET THE 'VARY PENDING ON LINE' COUNTER.     */
*/********************************************************************/
*  ELSE DO;                                                        2389
*   LCLCNT=LCLCNT+1;                                               2390
         LA    @09,1                                               2390
         AH    @09,LCLCNT                                          2390
         STH   @09,LCLCNT                                          2390
*   VPONLINE=0;                                                    2391
         SLR   @09,@09                                             2391
         STH   @09,VPONLINE                                        2391
*  END;                                                            2392
* END;                                                             2393
* ELSE;                                                            2394
@RF02384 DS    0H                                                  2395
*/********************************************************************/
*/* FOR A LOCAL HEADER, SET THE RDT ENTRY 'VARY PENDING' COUNT TO THE*/
*/* COUNT ACCUMULATED FOR LOCAL SEGMENT.                             */
*/********************************************************************/
*IF RPRENTRY=RPRENTLH                                              2395
* THEN RPRPEPCT=LCLCNT;                                            2395
@RC02384 CLI   RPRENTRY(CVIWKPT2),X'03'                            2395
         BNE   @RF02395                                            2395
         LH    @09,LCLCNT                                          2396
         STH   @09,RPRPEPCT(,CVIWKPT2)                             2396
* ELSE;                                                            2397
@RF02395 DS    0H                                                  2398
*/********************************************************************/
*/* WHEN CVICOUNT PROCESSING FOR SETTING THE 'VARY PENDING' COUNT IN */
*/* THE CURRENT RDT ENTRY HAS COMPLETED, CHECK THAT COUNT FOR A      */
*/* NONZERO VALUE. IF RPRPEPCT IS NOT ZERO AND THE COMMAND RDT ENTRY */
*/* IS THE SAME AS THE ENTRY BEING PROCESSED, SET THE 'VARY PENDING' */
*/* FLAG (RPRVRYPD) IN THE CURRENT ENTRY. IF RPRPEPCT IS NOT ZERO,BUT*/
*/* THE COMMAND IS NOT AGAINST THE CURRENT RDT ENTRY, SET THE 'HIGHER*/
*/* LEVEL VARY PENDING' FLAG IN THE CURRENT ENTRY. WHEN EITHER RDT   */
*/* ENTRY 'VARY PENDING' FLAG IS SET, ALSO SET THE INTERNAL 'VARY    */
*/* PENDING' FLAG (CVIVRYPD).                                        */
*/********************************************************************/
*IF RPRPEPCT=0                                                     2398
* THEN;                                                            2398
         LH    @09,RPRPEPCT(,CVIWKPT2)                             2398
         LTR   @09,@09                                             2398
         BZ    @RT02398                                            2398
* ELSE DO;                                                         2400
*      RPRCONID=NCSPLSID;                                          2401
         MVC   RPRCONID(9,CVIWKPT2),NCSPLSID(CVINCSPL)             2401
*      IF NCSPLVCD=NCSPLVC1 & NCSVBF12='0'B                        2402
*        THEN;                                                     2402
         CLI   NCSPLVCD(CVINCSPL),X'01'                            2402
         BNE   @RF02402                                            2402
         TM    NCSVBF12(CVINCSPL),B'00010000'                      2402
         BZ    @RT02402                                            2402
*        ELSE RPRVYIMM='1'B;                                       2404
@RF02402 OI    RPRVYIMM(CVIWKPT2),B'00000010'                      2404
*      IF CVIWKPT1=CVIWKPT2                                        2405
*        THEN RPRVRYPD='1'B;                                       2405
@RT02402 C     CVIWKPT2,CVIWKPT1                                   2405
         BNE   @RF02405                                            2405
         OI    RPRVRYPD(CVIWKPT2),B'00000010'                      2406
*        ELSE RPRHLVPD='1'B;                                       2407
         B     @RC02405                                            2407
@RF02405 OI    RPRHLVPD(CVIWKPT2),B'00000100'                      2407
*      CVIVRYPD='1'B;                                              2408
@RC02405 OI    CVIVRYPD,B'01000000'                                2408
*       END;                                                       2409
*/********************************************************************/
*/* IF A PORT ENTRY HAS A NON-ZERO VARY PENDING COUNT, SET THE 'VARY */
*/* PENDING' BIT ON IF THE COMMAND WAS FOR THE CTERM OR SET THE      */
*/* 'HIGHER LEVEL VARY PENDING' BIT ON IF THE COMMAND WAS FOR THE    */
*/* LINE.  IN BOTH CASES, SET THE INTERNAL 'VARY PENDING' SWITCH ON. */
*/********************************************************************/
*IF RPRENTRY=RPRENTLN & RLNPORT='1'B & RPTPEPCT ^= 0               2410
* THEN DO;                                                         2410
@RT02398 CLI   RPRENTRY(CVIWKPT2),X'50'                            2410
         BNE   @RF02410                                            2410
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2410
         BNO   @RF02410                                            2410
         LH    @09,RPTPEPCT(,CVIWKPT2)                             2410
         LTR   @09,@09                                             2410
         BZ    @RF02410                                            2410
*   IF NCSPLVCD=NCSPLVC1 & NCSVBF12='0'B                           2412
*     THEN;                                                        2412
         CLI   NCSPLVCD(CVINCSPL),X'01'                            2412
         BNE   @RF02412                                            2412
         TM    NCSVBF12(CVINCSPL),B'00010000'                      2412
         BZ    @RT02412                                            2412
*     ELSE RPTVYIMM='1'B;                                          2414
@RF02412 OI    RPTVYIMM(CVIWKPT2),B'00000100'                      2414
*  IF NCSPLRID=RPTCTNM                                             2415
*   THEN RPTVRYPD='1'B;                                            2415
@RT02412 CLC   NCSPLRID(8,CVINCSPL),RPTCTNM(CVIWKPT2)              2415
         BNE   @RF02415                                            2415
         OI    RPTVRYPD(CVIWKPT2),B'01000000'                      2416
*   ELSE RPTHLVPD='1'B;                                            2417
         B     @RC02415                                            2417
@RF02415 OI    RPTHLVPD(CVIWKPT2),B'00100000'                      2417
*  CVIVRYPD='1'B;                                                  2418
@RC02415 OI    CVIVRYPD,B'01000000'                                2418
* END;                                                             2419
* ELSE;                                                            2420
@RF02410 DS    0H                                                  2421
* CVICTEND: CVIRTNAD=CVINSI10;                                     2421
CVICTEND L     CVIRTNAD,CVINSI10                                   2421
*END CVICOUNT;                                                     2422
@EL00015 DS    0H                                                  2422
@EF00015 DS    0H                                                  2422
@ER00015 BR    @14                                                 2422
@PB00015 DS    0H                                                  2423
* GEN(  EJECT);                                                    2423
           EJECT
*CVILCLPR: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 2424
         B     @PB00016                                            2424
CVILCLPR DS    0H                                                  2425
*/********************************************************************/
*/* INPUT: CVIWKPT2 HAS ADDR OF ISTRLC ENTRY                         */
*/* THIS ROUTINE IS CALLED BY CVISGIM, CVISCAN, AND CVICOUNT .       */
*/* CVISGIM CALLS DURING VARY IMMEDIATE PROCESSING TO RECORD DEVICE  */
*/* STATISTICS FOR A LOCAL TERMINAL BEING DEACTIVATED, AND THUS SETS */
*/* THE 'RECORD DEVICE STATISTICS' FLAG AS INPUT.                    */
*/* CVICOUNT CALL DURING VARY NORMAL PROCESSING TO COMPLETE          */
*/* OF A LOCAL CONTROL UNIT (CVIWKPT2 IS ADDRESS OF THE LOCAL CONTROL*/
*/* UNIT RDT ENTRY.)                                                 */
*/********************************************************************/
*CVINSI11=CVIRTNAD;                                                2425
         ST    CVIRTNAD,CVINSI11                                   2425
*RFY ISTRPRE BASED(CVIWKPT2);                                      2426
*NCSPLRAD=CVIWKPT2;                                                2427
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        2427
*/********************************************************************/
*/* IF VARY I/O IS ALREADY DONE FOR THE LOCAL OR IF INTERNAL         */
*/* PROCESSING BYPASS I/O OTHERWISE SET NCSPLCMD TO                  */
*/* 'RECORD DEVICE STATISTICS' COMMAND CODE, BUILD CID IN NCSIOCID   */
*/* USING DAF FROM RDT ENTRY, OBTAIN THE DAF LOCK VIA CIDCTL, AND    */
*/* CALL ISTINCIO TO ISSUE THE COMMAND. UPDATE THE CRR AUDIT TRAIL   */
*/* UPON RETURN, AND IF NCSPL RETURN CODE IS BAD, CALL CVIWTO TO     */
*/* ISSUE ERROR MESSAGE. SET THE 'VARY I/O DONE' BIT IN THE RDT ENTRY*/
*/********************************************************************/
*IF RPRVIODN='1'B       /* IF IO DONE THEN NO OP           @ZD14261  */
* THEN;                                                            2428
         TM    RPRVIODN(CVIWKPT2),B'00010000'                      2428
         BO    @RT02428                                            2428
* ELSE DO;                                                /* @ZD14261*/
*  IF NCSVBF11='1'B     /* IF INTERNAL ONLY NO-RECORD DONE   @ZD14261*/
*   THEN;                                                 /* @ZD14261*/
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2431
         BO    @RT02431                                            2431
*   ELSE DO;            /* DO RECORDIG DEVICE STATISTICS     @ZD14261*/
*    RFY (CVIR0,CVIR2) RSTD;                                       2434
*    NCSPLCMD=NCSCRDS;                                             2435
         MVC   NCSPLCMD(2,CVINCSPL),@CB03394                       2435
*    NCSIOCID=CVISAF+RPRDAF;                                       2436
         LH    @09,RPRDAF(,CVIWKPT2)                               2436
         N     @09,@CF06623                                        2436
         ST    @09,NCSIOCID(,CVINCSPL)                             2436
*    CALL CVICID;                                                  2437
         BAL   @14,CVICID                                          2437
*    IF CVIRTNCD^=0                            /* ZD10632 */       2438
*      THEN GOTO CVILCEND;                                         2438
         LTR   CVIRTNCD,CVIRTNCD                                   2438
         BNZ   @RT02438                                            2438
*      ELSE                                                        2440
*       DO;                                                        2440
*       CVIR2->LDNCLOSD='1'B;                                      2441
         L     @09,LDNCLOSD-1(,CVIR2)                              2441
@GL00123 LR    @04,@09                                             2441
         O     @04,@CF06629                                        2441
         CS    @09,@04,LDNCLOSD-1(CVIR2)                           2441
         BNE   @GL00123                                            2441
*       CVINPUT=CVINCSPL;                                          2442
         LR    CVINPUT,CVINCSPL                                    2442
*       CALL ISTINCIO;                                             2443
         L     @15,@CV05794                                        2443
         BALR  @14,@15                                             2443
*       CVINPUT=NCSPLRPH;                                          2444
*                                                                  2444
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         2444
*         DO;                                                      2445
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)  ***/           2446
*         DCL CMZK0134 PTR(31) REG(1);                             2446
*         RFY (CMZK0134) RSTD;                                     2447
*         /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/            2448
*CMZK0134->RPHCRR->CRACRR->VYCCRT = '0'B;                          2448
         L     @09,RPHCRR(,CMZK0134)                               2448
         L     @09,CRACRR(,@09)                                    2448
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2448
         MVI   VYCCRT(@09),B'00000000'                             2448
*CMZK0134->RPHCRR->CRACRR->CINCVI = '1'B;                          2449
         OI    CINCVI(@09),B'00000100'                             2449
*         END;                                                     2450
*       IF NCSIORC^=NCSIOSUC                                       2451
*       THEN                                                       2451
         CLI   NCSIORC(CVINCSPL),X'00'                             2451
         BE    @RF02451                                            2451
*          DO;                                                     2452
*          CVIMSG# = '159I';                                       2453
         MVC   CVIMSG#(4),@CC05899                                 2453
*          CVIWKPT2=CVIWKPT2+RPRELEN;;                             2454
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         2454
*          CALL CVIWTO2;                                           2456
         BAL   @14,CVIWTO2                                         2456
*          CVIWKPT2=RPRNSNEA;                                      2457
         L     CVIWKPT2,RPRNSNEA(,CVIWKPT2)                        2457
*          END;                                                    2458
*       ELSE;                                                      2459
@RF02451 DS    0H                                                  2460
*      END;                                                /*@ZD14261*/
*     END;  /* END OF RECORDING DEVICE STATISTICS            @ZD14261*/
*   RFY (CVIR0,CVIR2) UNRSTD;                                      2462
@RT02431 DS    0H                                                  2463
*/********************************************************************/
*/* CALL ISTINCAV TO DEALLOCATE THE LOCAL, UPDATE THE CRR AUDIT TRAIL*/
*/* UPON RETURN, AND IF RETRUN CODE INDICATES DEALLOCATE FAILED, THEN*/
*/* CALL CVIWTO TO ISSUE ERROR MESSAGE.                              */
*/********************************************************************/
*   CVINPUT=CVINCSPL;                                              2463
         LR    CVINPUT,CVINCSPL                                    2463
*   CALL ISTINCAV;                                                 2464
         L     @15,@CV05900                                        2464
         BALR  @14,@15                                             2464
*   RFY CVIWORKR RSTD;                                             2465
*   CVIWORKR=CVIRTNCD;                                             2466
         LR    CVIWORKR,CVIRTNCD                                   2466
*   CVINPUT=NCSPLRPH;                                              2467
*                                                                  2467
         L     CVINPUT,NCSPLRPH(,CVINCSPL)                         2467
*     DO;                                                          2468
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)  ***/           2469
*     DCL CMZK0135 PTR(31) REG(1);                                 2469
*     RFY (CMZK0135) RSTD;                                         2470
*     /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                2471
*CMZK0135->RPHCRR->CRACRR->VYCCRT = '0'B;                          2471
         L     @09,RPHCRR(,CMZK0135)                               2471
         L     @09,CRACRR(,@09)                                    2471
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2471
         MVI   VYCCRT(@09),B'00000000'                             2471
*CMZK0135->RPHCRR->CRACRR->CINCVI = '1'B;                          2472
         OI    CINCVI(@09),B'00000100'                             2472
*     END;                                                         2473
*   IF CVIWORKR^=0                                                 2474
*   THEN DO;                                                       2474
         LTR   CVIWORKR,CVIWORKR                                   2474
         BZ    @RF02474                                            2474
*        CVIMSG# = '156I';                                         2476
         MVC   CVIMSG#(4),@CC05902                                 2476
*        CVIWKPT2=CVIWKPT2+RPRELEN;                                2477
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         2477
*        CALL CVIWTO2;                                             2478
         BAL   @14,CVIWTO2                                         2478
*        CVIWKPT2=RPRNSNEA;                                        2479
         L     CVIWKPT2,RPRNSNEA(,CVIWKPT2)                        2479
*        END;                                                      2480
*   ELSE;                                                          2481
@RF02474 DS    0H                                                  2482
*RFY CVIWORKR UNRSTD;                                              2482
*END;  /* END IF IO NOT DONE */                                    2483
*RPRVIODN='1'B;                                                    2484
@RT02428 OI    RPRVIODN(CVIWKPT2),B'00010000'                      2484
*/********************************************************************/
*/* IF CALLED ONLY TO RECORD DEVICE STATISTICS, THEN BYPASS CVICLOSE.*/
*/* OTHERWISE, CALL CVICLOSE TO CLOSE THE LOCAL CONTROL UNIT.        */
*/********************************************************************/
*IF CVIRDS='0'B                                                    2485
* THEN DO;                                                         2485
         TM    CVIRDS,B'00000010'                                  2485
         BNZ   @RF02485                                            2485
*      CVINPUT=4;                                                  2487
         LA    CVINPUT,4                                           2487
*      CALL CVIUNLOC;                                              2488
         BAL   @14,CVIUNLOC                                        2488
*      CALL CVICLOSE;                                              2489
         BAL   @14,CVICLOSE                                        2489
*      CVINPUT=4;                                                  2490
         LA    CVINPUT,4                                           2490
*      CALL CVILOC;                                                2491
         BAL   @14,CVILOC                                          2491
*      END;                                                        2492
*ELSE;                                                             2493
@RF02485 DS    0H                                                  2494
*CVILCEND: CVIRTNAD=CVINSI11;                                      2494
CVILCEND L     CVIRTNAD,CVINSI11                                   2494
*END CVILCLPR;                                                     2495
@EL00016 DS    0H                                                  2495
@EF00016 DS    0H                                                  2495
@ER00016 BR    @14                                                 2495
@PB00016 DS    0H                                                  2496
* GEN(  EJECT);                                                    2496
           EJECT
*CVICLOSE: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                 2497
         B     @PB00017                                            2497
CVICLOSE DS    0H                                                  2498
*/********************************************************************/
*/* THIS ROUTINE IS CALLED BY CVICOUNT AND CVILCLPR                  */
*/* TO CLOSE THE NODE REPRESENTED BY THE RDT ENTRY POINTED TO BY     */
*/* CVIWKPT2.                                                        */
*/********************************************************************/
*CVINSI13=CVIRTNAD;                                                2498
         ST    CVIRTNAD,CVINSI13                                   2498
*RFY ISTRPRE BASED(CVIWKPT2);                                      2499
*/********************************************************************/
*/* SET UP RPL FOR CLSDST REQUEST IN THE NEXT AVAILABLE WORK SPACE.  */
*/********************************************************************/
*CVINPUT=CVINCSPL;                                         /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    2500
*NCSPLRAD=CVIWKPT2;                                        /*@D32CKLV*/
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        2501
*CALL ISTINCX9;            /* CLOSE DESTINATION              @D32CKLV*/
         L     @15,@CV05908                                        2502
         BALR  @14,@15                                             2502
*  DO;                                                             2503
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2504
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   2504
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2504
         L     @09,NCSPLRPH(,CVINCSPL)                             2504
         L     @09,RPHCRR(,@09)                                    2504
         L     @09,CRACRR(,@09)                                    2504
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2504
         MVI   VYCCRT(@09),B'00000000'                             2504
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2505
         OI    CINCVI(@09),B'00000100'                             2505
*  END;                                                            2506
*IF CVIRTNCD=0 × (RPRENTRY=RPRENTLN & RLNPORT='1'B)                2507
* THEN;                                                            2507
         LTR   CVIRTNCD,CVIRTNCD                                   2507
         BZ    @RT02507                                            2507
         CLI   RPRENTRY(CVIWKPT2),X'50'                            2507
         BNE   @RF02507                                            2507
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2507
         BO    @RT02507                                            2507
* ELSE DO;                                                         2509
@RF02507 DS    0H                                                  2510
*      CVIMSG# = '622I';  /* CLOSEDST FAILED */                    2510
         MVC   CVIMSG#(4),@CC05612                                 2510
*      CALL CVIWTO2;                                               2511
         BAL   @14,CVIWTO2                                         2511
*      END;                                                        2512
*RFY ISTDEVCH BASED(ADDR(RPRDEVCH));                       /*@D32CKLV*/
@RT02507 DS    0H                                                  2514
*IF (RPRENTRY=RPRENTTR & DEVSUBND='1'B) ×                          2514
*   (RPRENTRY=RPRENTLU & NCSPLRPT->RPRENTRY=RPRENTCC) ×            2514
*   (RPRENTRY=RPRENTLC) ×                                          2514
*   (NCSPLRPT->RPRENTRY=RPRENTCC & RCCRESET='1'B)                  2514
* THEN;                                                    /*@D32CKLV*/
         CLI   RPRENTRY(CVIWKPT2),X'80'                            2514
         BNE   @GL00128                                            2514
         TM    DEVSUBND+44(CVIWKPT2),B'00010000'                   2514
         BO    @RT02514                                            2514
@GL00128 CLI   RPRENTRY(CVIWKPT2),X'81'                            2514
         BNE   @GL00127                                            2514
         L     @09,NCSPLRPT(,CVINCSPL)                             2514
         CLI   RPRENTRY(@09),X'71'                                 2514
         BE    @RT02514                                            2514
@GL00127 CLI   RPRENTRY(CVIWKPT2),X'45'                            2514
         BE    @RT02514                                            2514
         L     @09,NCSPLRPT(,CVINCSPL)                             2514
         CLI   RPRENTRY(@09),X'71'                                 2514
         BNE   @RF02514                                            2514
         L     @09,CVIWKPT1                                        2514
         TM    RCCRESET(@09),B'00000100'                           2514
         BO    @RT02514                                            2514
* ELSE DO; /* UPDATE CR DATA SET IF ELSE                     @D32CKLV*/
@RF02514 DS    0H                                                  2517
*  IF RPRENTRY=RPRENTLN & RLNPORT='1'B                             2517
*   THEN DO;                                               /*@D32CKLV*/
         CLI   RPRENTRY(CVIWKPT2),X'50'                            2517
         BNE   @RF02517                                            2517
         TM    RLNPORT(CVIWKPT2),B'00010000'                       2517
         BNO   @RF02517                                            2517
*    NCSPACTV='1'B;                                        /*@D32CKLV*/
         OI    NCSPACTV(CVINCSPL),B'01000000'                      2519
*    NCSPTMOD='0'B;                                        /*@D32CKLV*/
         NI    NCSPTMOD(CVINCSPL),B'10111111'                      2520
*   END;                                                   /*@D32CKLV*/
*   ELSE DO;                                               /*@D32CKLV*/
         B     @RC02517                                            2522
@RF02517 DS    0H                                                  2523
*    NCSACTV='1'B;                                         /*@D32CKLV*/
         OI    NCSACTV(CVINCSPL),B'10000000'                       2523
*    NCSAIMOD='0'B;                                        /*@D32CKLV*/
         NI    NCSAIMOD(CVINCSPL),B'01111111'                      2524
*   END;                                                   /*@D32CKLV*/
* CALL CVICRIO;                                            /*@D32CKLV*/
@RC02517 BAL   @14,CVICRIO                                         2526
*END;                                                              2527
*CVIRTNAD=CVINSI13;                                                2528
@RT02514 L     CVIRTNAD,CVINSI13                                   2528
*END CVICLOSE;                                                     2529
@EL00017 DS    0H                                                  2529
@EF00017 DS    0H                                                  2529
@ER00017 BR    @14                                                 2529
@PB00017 DS    0H                                                  2530
* GEN(  EJECT);                                                    2530
           EJECT
*CVIWTO2: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                  2531
         B     @PB00018                                            2531
CVIWTO2  DS    0H                                                  2532
*/********************************************************************/
*/* THIS ROUTINE IS CALLED TO ISSUE THE MESSAGE WHOSE IDENTIFICATION */
*/* IS SET IN CVIMSG# WITHIN THE WORK AREA. TPMSG IS INVOKED TO ISSUE*/
*/* THE MESSAGE, WITH AN INDICATION THAT THE TPMSG PARAMETER LIST    */
*/* IS TO BE BUILT IN THE NEXT AVAILABLE SPACE IN THE WORK AREA      */
*/* (PLAREA PARAMETER).                                              */
*/********************************************************************/
*CVINSI3=CVIRTNAD;                                                 2532
         ST    CVIRTNAD,CVINSI3                                    2532
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) RSTD;                            2533
*RFY ISTRPRE BASED(CVIWKPT2);                                      2534
*CVIR2=ADDR(CVIMSG#);                                              2535
         LA    CVIR2,CVIMSG#                                       2535
*CVIR3=ADDR(NCSPLSID);                                             2536
         LA    CVIR3,NCSPLSID(,CVINCSPL)                           2536
*CVIR4=ADDR(RPRNAME);                                              2537
         LR    CVIR4,CVIWKPT2                                      2537
*CVIWORKR=CVINXTAV;                                                2538
         L     @09,NCSPLWKA(,CVINCSPL)                             2538
         L     CVIWORKR,CVINXTAV(,@09)                             2538
*/*TPMSG MSGID((CVIR2))MSG((CVIR4))OPTIONS((CVIR3))PLAREA((CVIWORKR))*/
*                                                                  2539
*  DO;                                                             2539
*    DCL REG1137  REG(1)  PTR;                                     2540
*    RFY (REG1137) RSTD;                                           2541
*                                                                  2541
*  RFY (EMCR13) RSTD;                                              2542
*    DCL 1 * BASED(REG1137),                                       2543
*        2 CMZID137 PTR(31),                                       2543
*        2 *,                                                      2543
*          3 CMZRL137 PTR(8),                                      2543
*          3 CMZRA137 PTR(24) BDY(BYTE),                           2543
*        2 CMZEA137 PTR(31),                                       2543
*        2 CMZVP137 PTR(31);                                       2543
*                                                                  2543
*/*XREGSET  PID('PLAREA')PPARM((CVIWORKR))RREG(,REG1137)*/         2544
*  DO;                                                             2544
*    REG1137=CVIWORKR;                   /*SET RREG SYMBOL TO VALUE*/
         LR    REG1137,CVIWORKR                                    2545
*                                        /*OF PPARM OPERAND        */
*  END;  /* XREGSET */                                             2546
*    CMZID137 = 0;                                                 2547
         SLR   @09,@09                                             2547
         ST    @09,CMZID137(,REG1137)                              2547
*    CMZRL137 = 0;                                                 2548
         MVI   CMZRL137(REG1137),X'00'                             2548
*    CMZRA137 = 0;                                                 2549
         STCM  @09,7,CMZRA137(REG1137)                             2549
*    CMZEA137 = 0;                                                 2550
         ST    @09,CMZEA137(,REG1137)                              2550
*    CMZVP137 = 0;                                                 2551
         ST    @09,CMZVP137(,REG1137)                              2551
*    CMZID137=CVIR2;                                               2552
         ST    CVIR2,CMZID137(,REG1137)                            2552
*    CMZVP137 = CVIR4;                                             2553
         ST    CVIR4,CMZVP137(,REG1137)                            2553
*    DCL CMZSA137 (18) PTR(31) BASED(EMCR13);                      2554
*    CMZSA137(5) = CVIR3;                                          2555
*                                                                  2555
         ST    CVIR3,CMZSA137+16(,EMCR13)                          2555
*    DCL REG15137 REG(15) PTR;                                     2556
*    RFY REG15137 RSTD;                                            2557
*                                                                  2557
*  DO; /* LISATCVT CVTBASE(PAGEABLE,(REG15137)) */                 2558
*    REG15137 = ATCLCPTR; /*SET UP ATCVT POINTER*/                 2559
         L     REG15137,ATCLCPTR                                   2559
*  END; /*LISATCVT*/                                               2560
*    DCL CMTA137 BASED(REG15137) ENTRY VALUERANGE(*);              2561
*    REG15137 = REG15137->ATCMSGP;                                 2562
         L     REG15137,ATCMSGP(,REG15137)                         2562
*    CALL CMTA137;                                                 2563
         BALR  @14,@15                                             2563
*    RESPECIFY (REG1137,REG15137)  UNRESTRICTED;                   2564
*                                                                  2564
*  RFY (EMCR13) UNRSTD;                                            2565
*  END;                                                            2566
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) UNRSTD;                          2567
*CVIRTNAD=CVINSI3;                                                 2568
         L     CVIRTNAD,CVINSI3                                    2568
*END CVIWTO2;                                                      2569
@EL00018 DS    0H                                                  2569
@EF00018 DS    0H                                                  2569
@ER00018 BR    @14                                                 2569
*CVIWTO: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                   2570
CVIWTO   DS    0H                                                  2571
*/********************************************************************/
*/* THIS ROUTINE IS CALLED TO ISSUE THE MESSAGE WHOSE IDENTIFICATION */
*/* IS SET IN CVIMSG# WITHIN THE WORK AREA. TPMSG IS INVOKED TO ISSUE*/
*/* THE MESSAGE, WITH AN INDICATION THAT THE TPMSG PARAMETER LIST    */
*/* IS TO BE BUILT IN THE NEXT AVAILABLE SPACE IN THE WORK AREA      */
*/* (PLAREA PARAMETER).                                              */
*/********************************************************************/
*CVINSI15=CVIRTNAD;                                                2571
         ST    CVIRTNAD,CVINSI15                                   2571
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) RSTD;                            2572
*CVIR2=ADDR(CVIMSG#);                                              2573
         LA    CVIR2,CVIMSG#                                       2573
*CVIR3=ADDR(NCSPLSID);                                             2574
         LA    CVIR3,NCSPLSID(,CVINCSPL)                           2574
*CVIR4=ADDR(NCSPLRID);                                             2575
         LA    CVIR4,NCSPLRID(,CVINCSPL)                           2575
*CVIWORKR=CVINXTAV;                                                2576
         L     @09,NCSPLWKA(,CVINCSPL)                             2576
         L     CVIWORKR,CVINXTAV(,@09)                             2576
*/*TPMSG MSGID((CVIR2))MSG((CVIR4))OPTIONS((CVIR3))PLAREA((CVIWORKR))*/
*                                                                  2577
*  DO;                                                             2577
*    DCL REG1146  REG(1)  PTR;                                     2578
*    RFY (REG1146) RSTD;                                           2579
*                                                                  2579
*  RFY (EMCR13) RSTD;                                              2580
*    DCL 1 * BASED(REG1146),                                       2581
*        2 CMZID146 PTR(31),                                       2581
*        2 *,                                                      2581
*          3 CMZRL146 PTR(8),                                      2581
*          3 CMZRA146 PTR(24) BDY(BYTE),                           2581
*        2 CMZEA146 PTR(31),                                       2581
*        2 CMZVP146 PTR(31);                                       2581
*                                                                  2581
*/*XREGSET  PID('PLAREA')PPARM((CVIWORKR))RREG(,REG1146)*/         2582
*  DO;                                                             2582
*    REG1146=CVIWORKR;                   /*SET RREG SYMBOL TO VALUE*/
         LR    REG1146,CVIWORKR                                    2583
*                                        /*OF PPARM OPERAND        */
*  END;  /* XREGSET */                                             2584
*    CMZID146 = 0;                                                 2585
         SLR   @09,@09                                             2585
         ST    @09,CMZID146(,REG1146)                              2585
*    CMZRL146 = 0;                                                 2586
         MVI   CMZRL146(REG1146),X'00'                             2586
*    CMZRA146 = 0;                                                 2587
         STCM  @09,7,CMZRA146(REG1146)                             2587
*    CMZEA146 = 0;                                                 2588
         ST    @09,CMZEA146(,REG1146)                              2588
*    CMZVP146 = 0;                                                 2589
         ST    @09,CMZVP146(,REG1146)                              2589
*    CMZID146=CVIR2;                                               2590
         ST    CVIR2,CMZID146(,REG1146)                            2590
*    CMZVP146 = CVIR4;                                             2591
         ST    CVIR4,CMZVP146(,REG1146)                            2591
*    DCL CMZSA146 (18) PTR(31) BASED(EMCR13);                      2592
*    CMZSA146(5) = CVIR3;                                          2593
*                                                                  2593
         ST    CVIR3,CMZSA146+16(,EMCR13)                          2593
*    DCL REG15146 REG(15) PTR;                                     2594
*    RFY REG15146 RSTD;                                            2595
*                                                                  2595
*  DO; /* LISATCVT CVTBASE(PAGEABLE,(REG15146)) */                 2596
*    REG15146 = ATCLCPTR; /*SET UP ATCVT POINTER*/                 2597
         L     REG15146,ATCLCPTR                                   2597
*  END; /*LISATCVT*/                                               2598
*    DCL CMTA146 BASED(REG15146) ENTRY VALUERANGE(*);              2599
*    REG15146 = REG15146->ATCMSGP;                                 2600
         L     REG15146,ATCMSGP(,REG15146)                         2600
*    CALL CMTA146;                                                 2601
         BALR  @14,@15                                             2601
*    RESPECIFY (REG1146,REG15146)  UNRESTRICTED;                   2602
*                                                                  2602
*  RFY (EMCR13) UNRSTD;                                            2603
*  END;                                                            2604
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) UNRSTD;                          2605
*CVIRTNAD=CVINSI15;                                                2606
         L     CVIRTNAD,CVINSI15                                   2606
*END CVIWTO;                                                       2607
@EL00019 DS    0H                                                  2607
@EF00019 DS    0H                                                  2607
@ER00019 BR    @14                                                 2607
@PB00019 DS    0H                                                  2608
* GEN(  EJECT);                                                    2608
           EJECT
*CVIWTO3: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                  2609
         B     @PB00020                                            2609
CVIWTO3  DS    0H                                                  2610
*/********************************************************************/
*/* THIS ROUTINE IS CALLED TO ISSUE THE MESSAGE WHOSE IDENTIFICATION */
*/* IS SET IN CVIMSG# WITHIN THE WORK AREA. TPMSG IS INVOKED TO ISSUE*/
*/* THE MESSAGE, WITH AN INDICATION THAT THE TPMSG PARAMETER LIST    */
*/* IS TO BE BUILT IN THE NEXT AVAILABLE SPACE IN THE WORK AREA      */
*/* (PLAREA PARAMETER).                                              */
*/* FOR MESSAGE WITH 2 VARIABLES  600I,073I                          */
*/********************************************************************/
*CVINSI5=CVIRTNAD;   /* CHANGE SAVE AREA */                        2610
         ST    CVIRTNAD,CVINSI5                                    2610
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) RSTD;                            2611
*RFY ISTRPRE BASED(CVIWKPT2);                                      2612
*CVIR2=ADDR(CVIMSG#);                                              2613
         LA    CVIR2,CVIMSG#                                       2613
*CVIR3=ADDR(NCSPLSID);                                             2614
         LA    CVIR3,NCSPLSID(,CVINCSPL)                           2614
*CVIR4=ADDR(CVIMSG);                                               2615
         LA    CVIR4,CVIMSG                                        2615
*CVIWORKR=CVINXTAV;                                                2616
         L     @09,NCSPLWKA(,CVINCSPL)                             2616
         L     CVIWORKR,CVINXTAV(,@09)                             2616
*/*TPMSG MSGID((CVIR2))MSG((CVIR4))OPTIONS((CVIR3))PLAREA((CVIWORKR))*/
*                                                                  2617
*  DO;                                                             2617
*    DCL REG1155  REG(1)  PTR;                                     2618
*    RFY (REG1155) RSTD;                                           2619
*                                                                  2619
*  RFY (EMCR13) RSTD;                                              2620
*    DCL 1 * BASED(REG1155),                                       2621
*        2 CMZID155 PTR(31),                                       2621
*        2 *,                                                      2621
*          3 CMZRL155 PTR(8),                                      2621
*          3 CMZRA155 PTR(24) BDY(BYTE),                           2621
*        2 CMZEA155 PTR(31),                                       2621
*        2 CMZVP155 PTR(31);                                       2621
*                                                                  2621
*/*XREGSET  PID('PLAREA')PPARM((CVIWORKR))RREG(,REG1155)*/         2622
*  DO;                                                             2622
*    REG1155=CVIWORKR;                   /*SET RREG SYMBOL TO VALUE*/
         LR    REG1155,CVIWORKR                                    2623
*                                        /*OF PPARM OPERAND        */
*  END;  /* XREGSET */                                             2624
*    CMZID155 = 0;                                                 2625
         SLR   @09,@09                                             2625
         ST    @09,CMZID155(,REG1155)                              2625
*    CMZRL155 = 0;                                                 2626
         MVI   CMZRL155(REG1155),X'00'                             2626
*    CMZRA155 = 0;                                                 2627
         STCM  @09,7,CMZRA155(REG1155)                             2627
*    CMZEA155 = 0;                                                 2628
         ST    @09,CMZEA155(,REG1155)                              2628
*    CMZVP155 = 0;                                                 2629
         ST    @09,CMZVP155(,REG1155)                              2629
*    CMZID155=CVIR2;                                               2630
         ST    CVIR2,CMZID155(,REG1155)                            2630
*    CMZVP155 = CVIR4;                                             2631
         ST    CVIR4,CMZVP155(,REG1155)                            2631
*    DCL CMZSA155 (18) PTR(31) BASED(EMCR13);                      2632
*    CMZSA155(5) = CVIR3;                                          2633
*                                                                  2633
         ST    CVIR3,CMZSA155+16(,EMCR13)                          2633
*    DCL REG15155 REG(15) PTR;                                     2634
*    RFY REG15155 RSTD;                                            2635
*                                                                  2635
*  DO; /* LISATCVT CVTBASE(PAGEABLE,(REG15155)) */                 2636
*    REG15155 = ATCLCPTR; /*SET UP ATCVT POINTER*/                 2637
         L     REG15155,ATCLCPTR                                   2637
*  END; /*LISATCVT*/                                               2638
*    DCL CMTA155 BASED(REG15155) ENTRY VALUERANGE(*);              2639
*    REG15155 = REG15155->ATCMSGP;                                 2640
         L     REG15155,ATCMSGP(,REG15155)                         2640
*    CALL CMTA155;                                                 2641
         BALR  @14,@15                                             2641
*    RESPECIFY (REG1155,REG15155)  UNRESTRICTED;                   2642
*                                                                  2642
*  RFY (EMCR13) UNRSTD;                                            2643
*  END;                                                            2644
*RFY (CVIR2,CVIR3,CVIR4,CVIWORKR) UNRSTD;                          2645
*CVIRTNAD=CVINSI5;                                                 2646
         L     CVIRTNAD,CVINSI5                                    2646
*END CVIWTO3;                                                      2647
@EL00020 DS    0H                                                  2647
@EF00020 DS    0H                                                  2647
@ER00020 BR    @14                                                 2647
*CVIDELOG: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        2648
CVIDELOG DS    0H                                                  2649
*CVISAVE6=CVIRTNAD;                                                2649
         ST    CVIRTNAD,CVISAVE6                                   2649
*RFY ISTRLU BASED(CVIWKPT2);                                       2650
*IF RPRVIODN='1'B × NCSVBF11='1'B                                  2651
*  THEN;                                                           2651
         TM    RPRVIODN(CVIWKPT2),B'00010000'                      2651
         BO    @RT02651                                            2651
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2651
         BO    @RT02651                                            2651
*  ELSE DO;                                                        2653
*       NCSPLRUO=ADDR(CVIOUTBF);                                   2654
         LA    @09,CVIOUTBF                                        2654
         ST    @09,NCSPLRUO(,CVINCSPL)                             2654
*       NCSPLOLN=1;                                                2655
         MVC   NCSPLOLN(2,CVINCSPL),@CH00096                       2655
*       NCSPLRUI=0;                                                2656
         SLR   @09,@09                                             2656
         ST    @09,NCSPLRUI(,CVINCSPL)                             2656
*       CVIOUTB1='0E'X;                                            2657
         MVI   CVIOUTB1,X'0E'                                      2657
*       NCSPLSAF=0;                                                2658
         STH   @09,NCSPLSAF(,CVINCSPL)                             2658
*       NCSPLDAF=RPRDAF;                                           2659
         MVC   NCSPLDAF(2,CVINCSPL),RPRDAF(CVIWKPT2)               2659
*       NCSPLCMD=NCSCDLU;                                          2660
         MVC   NCSPLCMD(2,CVINCSPL),@CB03419                       2660
*       CALL CVIDOIO;                                              2661
         BAL   @14,CVIDOIO                                         2661
*       END;                                                       2662
*RLUACTLU='0'B;                  /* CONFIG RESTART           @XM96190*/
@RT02651 NI    RLUACTLU(CVIWKPT2),B'01111111'                      2663
*RPRVIODN='1'B;                                                    2664
         OI    RPRVIODN(CVIWKPT2),B'00010000'                      2664
*CVIRTNAD=CVISAVE6;                                                2665
         L     CVIRTNAD,CVISAVE6                                   2665
*END CVIDELOG;                                                     2666
@EL00021 DS    0H                                                  2666
@EF00021 DS    0H                                                  2666
@ER00021 BR    @14                                                 2666
@PB00021 DS    0H                                                  2667
* GEN(  EJECT);                                                    2667
           EJECT
*CVIDOIO: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);                  2668
         B     @PB00022                                            2668
CVIDOIO  DS    0H                                                  2669
*/********************************************************************/
*/********************************************************************/
*/*INPUT:                                                            */
*/*OUTPUT                                                            */
*/********************************************************************/
*RFY (CVIR0,CVIR2) RSTD;                                           2669
*CVISAVE7=CVIRTNAD;                                                2670
         ST    CVIRTNAD,CVISAVE7                                   2670
*CALL CVICID;                                                      2671
         BAL   @14,CVICID                                          2671
*CVINPUT=CVINCSPL;                                                 2672
         LR    CVINPUT,CVINCSPL                                    2672
*CALL ISTINCIO;                                                    2673
         L     @15,@CV05794                                        2673
         BALR  @14,@15                                             2673
*  DO;                                                             2674
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2675
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   2675
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2675
         L     @09,NCSPLRPH(,CVINCSPL)                             2675
         L     @09,RPHCRR(,@09)                                    2675
         L     @09,CRACRR(,@09)                                    2675
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2675
         MVI   VYCCRT(@09),B'00000000'                             2675
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2676
         OI    CINCVI(@09),B'00000100'                             2676
*  END;                                                            2677
*CVIRTNAD=CVISAVE7;                                                2678
         L     CVIRTNAD,CVISAVE7                                   2678
*RFY (CVIR0,CVIR2) UNRSTD;                                         2679
*END CVIDOIO;                                                      2680
@EL00022 DS    0H                                                  2680
@EF00022 DS    0H                                                  2680
@ER00022 BR    @14                                                 2680
*CVIDECC: PROC OPTIONS(NOSAVE,NOSAVEAREA);                         2681
*                                                                  2681
*                                                                  2681
CVIDECC  DS    0H                                                  2682
*/********************************************************************/
*/*INPUT: CVIWKPT2 HAS ADDR OF PU                                    */
*/*OUTPUT                                                            */
*/********************************************************************/
*CVINSI1=CVIRTNAD;                                                 2682
         ST    CVIRTNAD,CVINSI1                                    2682
*RFY ISTRCC BASED(CVIWKPT2);                                       2683
*RFY ISTRPRE BASED(CVIWKPT2);                                      2684
*IF NCSPLVID='1'B            /* ORIGINAL CMD A MODIFY DUMP?  @XM95350*/
* THEN NCSVBF11='1'B;   /* YES - TURN ON INTERNAL ONLY FLAG  @XM95350*/
         TM    NCSPLVID(CVINCSPL),B'00100000'                      2685
         BNO   @RF02685                                            2685
         OI    NCSVBF11(CVINCSPL),B'00100000'                      2686
* ELSE;                                                    /*@XM95350*/
@RF02685 DS    0H                                                  2688
*CVILOOP='0'B;                                                     2688
         NI    CVILOOP,B'11011111'                                 2688
*IF RPRENTED='0'B                                                  2689
* THEN DO WHILE(CVILOOP='0'B);                                     2689
         TM    RPRENTED(CVIWKPT2),B'00000100'                      2689
         BNZ   @RF02689                                            2689
         B     @DE02690                                            2690
@DL02690 DS    0H                                                  2691
*  CVIWKPT2=CVIWKPT2+RPRELEN;                                      2691
         AH    CVIWKPT2,RPRELEN(,CVIWKPT2)                         2691
*  IF RPRENTRY<=CVIWKPT1->RPRENTRY                                 2692
*   THEN DO;                                                       2692
         L     @09,CVIWKPT1                                        2692
         CLC   RPRENTRY(1,CVIWKPT2),RPRENTRY(@09)                  2692
         BH    @RF02692                                            2692
*     CVIWKPT2=CVIWKPT2-RPRPELEN;                                  2694
         SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        2694
*     CVILOOP='1'B;                                                2695
         OI    CVILOOP,B'00100000'                                 2695
*    END;                                                          2696
*  ELSE                                                            2697
*   IF RPRENTED='1'B                                               2697
*    THEN CVILOOP='1'B;                                            2697
         B     @RC02692                                            2697
@RF02692 TM    RPRENTED(CVIWKPT2),B'00000100'                      2697
         BNO   @RF02697                                            2697
         OI    CVILOOP,B'00100000'                                 2698
*   ELSE;                                                          2699
@RF02697 DS    0H                                                  2700
* END;                                                             2700
@RC02692 DS    0H                                                  2700
@DE02690 TM    CVILOOP,B'00100000'                                 2700
         BZ    @DL02690                                            2700
*ELSE;                                                             2701
@RF02689 DS    0H                                                  2702
*/* END OF COMMAND CHAIN                        */                 2702
*DO WHILE (CVIQUIT='0'B & CVIWKPT2^=CVIWKPT1);                     2702
         B     @DE02702                                            2702
@DL02702 DS    0H                                                  2703
*IF RPRONLIN='1'B                                                  2703
* THEN CALL CVIDELOG;                                              2703
         TM    RPRONLIN(CVIWKPT2),B'00001000'                      2703
         BNO   @RF02703                                            2703
         BAL   @14,CVIDELOG                                        2704
* ELSE;                                                            2705
@RF02703 DS    0H                                                  2706
*CVIWKPT2=CVIWKPT2-RPRPELEN;                                       2706
         SH    CVIWKPT2,RPRPELEN(,CVIWKPT2)                        2706
*END;                /* DO WHILE */                                2707
@DE02702 TM    CVIQUIT,B'00000100'                                 2707
         BNZ   @DC02702                                            2707
         C     CVIWKPT2,CVIWKPT1                                   2707
         BNE   @DL02702                                            2707
@DC02702 DS    0H                                                  2708
*   /* DEACT PU                                              @D32CKLV*/
*IF NCSVBF11 = '1'B                                        /*@DX95350*/
* THEN;                                                            2708
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2708
         BO    @RT02708                                            2708
* ELSE DO;                                                         2710
*  NCSPLRAD=CVIWKPT2;                                      /*@D32CKLV*/
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        2711
*  CVINPUT=CVINCSPL;                                       /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    2712
*  CALL ISTINCX7;                    /* SEND DEACT PU        @D32CKLV*/
*                                                                  2713
         L     @15,@CV05968                                        2713
         BALR  @14,@15                                             2713
*    DO;                                                           2714
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2715
*    /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 2715
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2715
         L     @09,NCSPLRPH(,CVINCSPL)                             2715
         L     @09,RPHCRR(,@09)                                    2715
         L     @09,CRACRR(,@09)                                    2715
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2715
         MVI   VYCCRT(@09),B'00000000'                             2715
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2716
         OI    CINCVI(@09),B'00000100'                             2716
*    END;                                                          2717
* END;                                                     /*@D32CKLV*/
*RPRVIODN='1'B;                      /* SET I/O DONE FLAG    @D32CKLV*/
@RT02708 OI    RPRVIODN(CVIWKPT2),B'00010000'                      2719
*IF RPRHDTYP=RPRENTLS                /* IS PU IN LOCAL SUBAREA */  2720
* THEN IF NCSVBF11='1'B &            /* INTERNAL ONLY CMD,NOT RESET*/
         CLI   RPRHDTYP(CVIWKPT2),X'05'                            2720
         BNE   @RF02720                                            2720
*         RCCRESET='0'B              /* DEACT IN PROGRESS ?  @D32CKLV*/
*  THEN;                                                   /*@D32CKLV*/
         TM    NCSVBF11(CVINCSPL),B'00100000'                      2721
         BNO   @RF02721                                            2721
         TM    RCCRESET(CVIWKPT2),B'00000100'                      2721
         BZ    @RT02721                                            2721
*  ELSE DO;                                                /*@D32CKLV*/
@RF02721 DS    0H                                                  2724
*   NCSPLRAD=CVIWKPT2;                                     /*@D32CKLV*/
         ST    CVIWKPT2,NCSPLRAD(,CVINCSPL)                        2724
*   NCSPLP1=RCCDPAB;                                       /*@D32CKLV*/
         L     @09,RCCDPAB(,CVIWKPT2)                              2725
         ST    @09,NCSPLP1(,CVINCSPL)                              2725
*   CVINPUT=CVINCSPL;                                      /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    2726
*   CALL ISTINCL7;                  /* DISCONTACT THE CHANNEL */   2727
*                                                                  2727
         L     @15,@CV05969                                        2727
         BALR  @14,@15                                             2727
*    DO;                                                           2728
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2729
*    /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 2729
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2729
         L     @09,NCSPLRPH(,CVINCSPL)                             2729
         L     @09,RPHCRR(,@09)                                    2729
         L     @09,CRACRR(,@09)                                    2729
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2729
         MVI   VYCCRT(@09),B'00000000'                             2729
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2730
         OI    CINCVI(@09),B'00000100'                             2730
*    END;                                                          2731
*  END;                                                    /*@D32CKLV*/
*ELSE DO;                           /* RPRHDTYP^=RPRENTLS    @D32CKLV*/
         B     @RC02720                                            2733
@RF02720 DS    0H                                                  2734
*  RFY CVIR0 RSTD;                                                 2734
*  GTNCSAD=0;                       /* INDICATE OBTAIN NCSPL @D32CKLV*/
         L     @09,NCSPLRPH(,CVINCSPL)                             2735
         L     @07,RPHCRR(,@09)                                    2735
         LA    @04,118                                             2735
         AL    @04,CRACRR(,@07)                                    2735
         SLR   @07,@07                                             2735
         ST    @07,GTNCSAD(,@04)                                   2735
*  GTNCSREQ='1'B;                   /* MAY USE REQSTOR IF GETSTOR    */
*  GTNCSRQU='0'B;                   /* NO QUEUE OPTION FOR REQSTORE */
*  GTNCSWKA='0'B;                   /* REQUIRE NCSPL WORKAREA*/    2738
         OI    GTNCSREQ(@04),B'10000000'                           2738
         NI    GTNCSRQU(@04),B'10011111'                           2738
*  CVINPUT=NCSPLRPH;                                       /*@D32CKLV*/
         LR    CVINPUT,@09                                         2739
*  CVIR0=ADDR(GTNCSAD);                                    /*@D32CKLV*/
         LR    CVIR0,@04                                           2740
*  CALL NCSPLCVT->ATCINCW3;         /* GET NCSPL             @D32CKLV*/
         L     @09,NCSPLCVT(,CVINCSPL)                             2741
         L     @15,ATCINCW3(,@09)                                  2741
         BALR  @14,@15                                             2741
*  IF CVIRTNCD^=0                   /* GET NCSPL FAILED      @D32CKLV*/
*    THEN;                                                 /*@D32CKLV*/
         LTR   CVIRTNCD,CVIRTNCD                                   2742
         BNZ   @RT02742                                            2742
*    ELSE DO;                                              /*@D32CKLV*/
*      NCSPLRAD=CVIWKPT1;           /* PU ADDR               @D32CKLV*/
         L     @09,CVIWKPT1                                        2745
         ST    @09,NCSPLRAD(,CVINCSPL)                             2745
*      NCSPLSPL=GTNCSAD;            /* NEW NCSPL ADDR        @D32CKLV*/
         L     @09,NCSPLRPH(,CVINCSPL)                             2746
         L     @09,RPHCRR(,@09)                                    2746
         L     @09,CRACRR(,@09)                                    2746
         L     @09,GTNCSAD+118(,@09)                               2746
         ST    @09,NCSPLSPL(,CVINCSPL)                             2746
*      CVINPUT=CVINCSPL;                                   /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    2747
*      CALL ISTINCW5;               /* DISCONTACT            @D32CKLV*/
*                                                                  2748
         L     @15,@CV05970                                        2748
         BALR  @14,@15                                             2748
*       DO;                                                        2749
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2750
*       /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/              2750
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2750
         L     @09,NCSPLRPH(,CVINCSPL)                             2750
         L     @07,RPHCRR(,@09)                                    2750
         L     @07,CRACRR(,@07)                                    2750
         XC    VYCCRT+1(11,@07),VYCCRT+1(@07)                      2750
         MVI   VYCCRT(@07),B'00000000'                             2750
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2751
         OI    CINCVI(@07),B'00000100'                             2751
*       END;                                /*@D32CKLV*/           2752
*     CVINPUT=NCSPLRPH;                                    /*@D32CKLV*/
         LR    CVINPUT,@09                                         2753
*     CVIR0=ADDR(GTNCSAD);                                 /*@D32CKLV*/
         AL    @07,@CF06586                                        2754
         LR    CVIR0,@07                                           2754
*     CALL NCSPLCVT->ATCINCW3;               /* FREE NCSPL   @D32CKLV*/
*                                                                  2755
         L     @09,NCSPLCVT(,CVINCSPL)                             2755
         L     @15,ATCINCW3(,@09)                                  2755
         BALR  @14,@15                                             2755
*   END;                                                   /*@D32CKLV*/
* END;                                                     /*@DX95350*/
@RT02742 DS    0H                                                  2758
*RFY CVIR0 UNRSTD;                                                 2758
@RC02720 DS    0H                                                  2759
*CVIRTNAD=CVINSI1;                                                 2759
         L     CVIRTNAD,CVINSI1                                    2759
*END CVIDECC;                                                      2760
@EL00023 DS    0H                                                  2760
@EF00023 DS    0H                                                  2760
@ER00023 BR    @14                                                 2760
@PB00023 DS    0H                                                  2761
*  /*SEGMENT(CVI2IN)START*/DO;GOTO CVI2IN@;CVI2IN:END;             2761
         B     CVI2IN@                                             2762
CVI2IN   DS    0H                                                  2764
*               /*@D31JKLV*/                                       2764
*/*------------------------------------------------------------------*/
*/* CONTROL IS ROUTING TO ISTINCVP TO COMPLETE PROCESSING IF NCSPL2IN*/
*/* FLAG IS ON. THIS IS BECAUSE THAT ISTINCVP TPEXITS INSTEAD OF     */
*/* TPWAITING FOR SUBNOTE TO TERMINATE                       @D31JKLV*/
*/*------------------------------------------------------------------*/
*RFY ISTRPRE BASED(CVIWKPT1);                              /*@D31JKLV*/
* CVINPUT = CVINCSPL;                                      /*@D31JKLV*/
         LR    CVINPUT,CVINCSPL                                    2765
* CALL ISTINCVP;                                           /*@D31JKLV*/
*                                                                  2766
         L     @15,@CV05656                                        2766
         BALR  @14,@15                                             2766
*  DO;                                                             2767
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2768
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   2768
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2768
         L     @09,NCSPLRPH(,CVINCSPL)                             2768
         L     @09,RPHCRR(,@09)                                    2768
         L     @09,CRACRR(,@09)                                    2768
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2768
         MVI   VYCCRT(@09),B'00000000'                             2768
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2769
         OI    CINCVI(@09),B'00000100'                             2769
*  END;                                                            2770
* IF NCSPLVIS = '1'B & NCSVBF12 = '1'B   /* V DEACT IMM & VARY START */
*   THEN DO;                                               /*@D31JKLV*/
         TM    NCSPLVIS(CVINCSPL),B'00000010'                      2771
         BNO   @RF02771                                            2771
         TM    NCSVBF12(CVINCSPL),B'00010000'                      2771
         BNO   @RF02771                                            2771
*     NCSPLVIS = '0'B;                                      /*@D31JKLV*
         NI    NCSPLVIS(CVINCSPL),B'11111101'                      2773
*     NCSPL2IN = '0'B;                                     /*@D31JKLV*/
         NI    NCSPL2IN(CVINCSPL),B'01111111'                      2774
*     CVIMSG# = '141I';                                    /*@D31JKLV*/
         MVC   CVIMSG#(4),@CC05758                                 2775
*     CALL CVIWTO;                                         /*@D31JKLV*/
         BAL   @14,CVIWTO                                          2776
*     IF RPRPEPCT ^= 0                 /* IF VARY PENDING COUNT NOT */
*       THEN NCSPLSOM='1'B;                                /*@DC36143*/
         L     @09,CVIWKPT1                                        2777
         LH    @09,RPRPEPCT(,@09)                                  2777
         LTR   @09,@09                                             2777
         BZ    @RF02777                                            2777
         OI    NCSPLSOM(CVINCSPL),B'01000000'                      2778
*       ELSE DO;                                           /*@D31JKLV*/
         B     @RC02777                                            2779
@RF02777 DS    0H                                                  2780
*         CVIGO = '1'B;                                    /*@D31JKLV*/
         OI    CVIGO,B'10000000'                                   2780
*         CALL CVI001;                                     /*@D31JKLV*/
         BAL   @14,CVI001                                          2781
*         CALL CVI002;                                     /*@D31JKLV*/
         BAL   @14,CVI002                                          2782
*       END;                                               /*@D31JKLV*/
*   END;                                                   /*@D31JKLV*/
*   ELSE NCSPLSOM='1'B;                                    /*@DC36143*/
         B     @RC02771                                            2785
@RF02771 OI    NCSPLSOM(CVINCSPL),B'01000000'                      2785
*  /*SEGMENT(CVI2IN)FINISH*/DO;GOTO CVI2IN#;CVI2IN@:END;           2786
@RC02771 DS    0H                                                  2787
         B     CVI2IN#                                             2787
CVI2IN@  DS    0H                                                  2789
*                /*@D31JKLV*/                                      2789
*/*-------------------------------------------------------------------*
*/* DO DEACTIVATE PROCESSING FOR AN SDLC LINK                @D32CKLV*/
*/*------------------------------------------------------------------*/
*                                                                  2789
*  /*SEGMENT(CVISDLC)START*/DO;GOTO CVISDLC@;CVISDLC:END;          2789
         B     CVISDLC@                                            2790
CVISDLC  DS    0H                                                  2792
*                 /*@D32CKLV*/                                     2792
*RFY ISTRLN BASED(CVIWKPT1);                               /*@D32CKLV*/
*IF RLNRACAT='1'B × RLNRACAN='1'B   /* IS IT A SWITHCHED LINK */   2793
*  THEN IF RLNINUSE='1'B ×          /* ALLOCATED TO PU       @D32CKLV*/
         L     @09,CVIWKPT1                                        2793
         TM    RLNRACAT(@09),B'11000000'                           2793
         BZ    @RF02793                                            2793
*          RLNOHIN='1'B                                            2794
*    THEN SDLCWTO='1'B;             /* SET WTO FLAG          @D32CKLV*/
         TM    RLNINUSE(@09),B'11000000'                           2794
         BZ    @RF02794                                            2794
         OI    SDLCWTO,B'00000010'                                 2795
*    ELSE DO;                                              /*@X50BHLV*/
         B     @RC02794                                            2796
@RF02794 DS    0H                                                  2797
*      IF RLNGANSW='1'B THEN RLNANSWR='1'B;                /*@X50BHLV*/
         L     @09,CVIWKPT1                                        2797
         TM    RLNGANSW(@09),B'00100000'                           2797
         BNO   @RF02797                                            2797
         OI    RLNANSWR(@09),B'01000000'                           2798
*                       ELSE RLNANSWR='0'B;                /*@X50BHLV*/
         B     @RC02797                                            2799
@RF02797 L     @09,CVIWKPT1                                        2799
         NI    RLNANSWR(@09),B'10111111'                           2799
*      IF (RLNGANSW='1'B & RLNEAM='1'B) ×                          2800
*         (RLNGANSW='0'B & RLNEAM='0'B)                            2800
*        THEN;                                             /*@X50BHLV*/
@RC02797 L     @09,CVIWKPT1                                        2800
         TM    RLNGANSW(@09),B'00100000'                           2800
         BNO   @GL00137                                            2800
         TM    RLNEAM(@09),B'10000000'                             2800
         BO    @RT02800                                            2800
@GL00137 L     @09,CVIWKPT1                                        2800
         TM    RLNGANSW(@09),B'00100000'                           2800
         BNZ   @RF02800                                            2800
         TM    RLNEAM(@09),B'10000000'                             2800
         BZ    @RT02800                                            2800
*        ELSE NCSANSMD='1'B;                               /*@X50BHLV*/
@RF02800 OI    NCSANSMD(CVINCSPL),B'10000000'                      2802
*    IF RLNEAM='1'B            /* ANSWER MODE           @X32CKLV*/ 2803
*      THEN DO;                     /* YES                   @D32CKLV*/
@RT02800 L     @09,CVIWKPT1                                        2803
         TM    RLNEAM(@09),B'10000000'                             2803
         BNO   @RF02803                                            2803
*        CVINPUT=CVINCSPL;                                 /*@D32CKLV*/
         LR    CVINPUT,CVINCSPL                                    2805
*        NCSPLANS='0'B;                                    /*@D32CKLV*/
         NI    NCSPLANS(CVINCSPL),B'11011111'                      2806
*        CALL ISTINCV2;             /* ABANDON ANSWER        @D32CKLV*/
*                                                                  2807
         L     @15,@CV05978                                        2807
         BALR  @14,@15                                             2807
*          DO;                                                     2808
*/***  CRRMAINT  PROCNM(ISTINCVI)COMP(VY)FUNC(RET)RPHADD((NCSPLRPH))  *
**/                                                                2809
*          /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/           2809
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2809
         L     @09,NCSPLRPH(,CVINCSPL)                             2809
         L     @09,RPHCRR(,@09)                                    2809
         L     @09,CRACRR(,@09)                                    2809
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2809
         MVI   VYCCRT(@09),B'00000000'                             2809
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2810
         OI    CINCVI(@09),B'00000100'                             2810
*          END;                    /*@D32CKLV*/                    2811
*      END;                                                /*@D32CKLV*/
*      ELSE;                                               /*@D32CKLV*/
@RF02803 DS    0H                                                  2814
*  END;                                                    /*@D32CKLV*/
*  ELSE IF RLNACTSN=0 /* LINK SUBNOTE COUNT = 0              @D32CKLV*/
*    THEN DO;                                              /*@ZD1333*/
         B     @RC02793                                            2815
@RF02793 L     @09,CVIWKPT1                                        2815
         LH    @09,RLNACTSN(,@09)                                  2815
         LTR   @09,@09                                             2815
         BNZ   @RF02815                                            2815
*      CALL CVIPTCD;                /* DECREMENT RPRPTH CT FOR PU */
         BAL   @14,CVIPTCD                                         2817
*    END;                                                  /*@ZD1333*/
*    ELSE SDLCWTO='1'B;             /* WRIT VARY REJECT MSG  @D32CKLV*/
         B     @RC02815                                            2819
@RF02815 OI    SDLCWTO,B'00000010'                                 2819
*IF SDLCWTO='1'B                    /* REQUIRE WRITE MSG     @D32CKLV*/
*  THEN CVIMSG#='677I';             /* YES,SET MSG NUMBER    @D32CKLV*/
@RC02815 DS    0H                                                  2820
@RC02793 TM    SDLCWTO,B'00000010'                                 2820
         BNO   @RF02820                                            2820
         MVC   CVIMSG#(4),@CC05979                                 2821
*   ELSE DO;                                                       2822
         B     @RC02820                                            2822
@RF02820 DS    0H                                                  2823
*    CVIWKPT2=CVIWKPT1;                                    /*@D32CKLV*/
         L     CVIWKPT2,CVIWKPT1                                   2823
*    CALL CVIPEPLN;                 /* DEACT. LINK           @D32CKLV*/
         BAL   @14,CVIPEPLN                                        2824
*    IF NCSIORC=NCSIOSUC            /* SUCCESSFUL ?          @D32CKLV*/
*      THEN DO;                     /* YES,SET OFFLINE MSG   @D32CKLV*/
         CLI   NCSIORC(CVINCSPL),X'00'                             2825
         BNE   @RF02825                                            2825
*        CVIMSG#='105I';                                   /*@D32CKLV*/
         MVC   CVIMSG#(4),@CC05684                                 2827
*        SDLCWTO='1'B;              /* TPMSG REQUIRED        @D32CKLV*/
         OI    SDLCWTO,B'00000010'                                 2828
*      END;                                                /*@D32CKLV*/
*      ELSE;                                               /*@D32CKLV*/
@RF02825 DS    0H                                                  2831
*  END;                                                    /*@D32CKLV*/
*IF SDLCWTO='1'B                    /* WRITE MSG ?           @D32CKLV*/
*  THEN DO;                                                /*@D32CKLV*/
@RC02820 TM    SDLCWTO,B'00000010'                                 2832
         BNO   @RF02832                                            2832
*    CALL CVIWTO;                                          /*@D32CKLV*/
         BAL   @14,CVIWTO                                          2834
*  END;                                                    /*@D32CKLV*/
*  ELSE;                                                   /*@D32CKLV*/
@RF02832 DS    0H                                                  2837
* NCSPLSOM='1'B;                                           /*@D32CKLV*/
         OI    NCSPLSOM(CVINCSPL),B'01000000'                      2837
*  /*SEGMENT(CVISDLC)FINISH*/DO;GOTO CVISDLC#;CVISDLC@:END;        2838
         B     CVISDLC#                                            2839
*                  /*@D32CKLV*/                                    2841
*CVICRIO: PROC OPTIONS(NOSAVE,NOSAVEAREA,RETREG);          /*@X50BHLV*/
         B     @PB00024                                            2841
CVICRIO  DS    0H                                                  2842
*CVISAVE8=CVIRTNAD;                                        /*@X50BHLV*/
         ST    CVIRTNAD,CVISAVE8                                   2842
*/*CRIO  FUNC(UPDATE)RDT((CVIWKPT2))PROCNM(ISTINCVI)*/             2843
* DO;                                                              2843
* RFY (GPR01P,GPR15P) RSTD;                                        2844
* GPR15P = 0;                                                      2845
         SLR   GPR15P,GPR15P                                       2845
* IF CVIWKPT2->RPRCRCPT = '1'B                                     2846
* THEN DO;                                                         2846
         TM    RPRCRCPT(CVIWKPT2),B'01000000'                      2846
         BNO   @RF02846                                            2846
* NCSCRDTE = CVIWKPT2;                                             2848
         ST    CVIWKPT2,NCSCRDTE(,CVINCSPL)                        2848
* NCSCRCMD = NCSCRWR;                                              2849
         MVI   NCSCRCMD(CVINCSPL),X'00'                            2849
* GPR01P = ADDR(ISTNCSPL);                                         2850
         LR    GPR01P,CVINCSPL                                     2850
* CALL ISTINCR5;                                                   2851
*                                                                  2851
         L     @15,@CV05799                                        2851
         BALR  @14,@15                                             2851
* DO;                                                              2852
*/***  CRRMAINT  RPHADD((NCSPLRPH))PROCNM(ISTINCVI)COMP(VY)FUNC(RET)  *
**/                                                                2853
* /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                    2853
*NCSPLRPH->RPHCRR->CRACRR->VYCCRT = '0'B;                          2853
         L     @09,NCSPLRPH(,CVINCSPL)                             2853
         L     @09,RPHCRR(,@09)                                    2853
         L     @09,CRACRR(,@09)                                    2853
         XC    VYCCRT+1(11,@09),VYCCRT+1(@09)                      2853
         MVI   VYCCRT(@09),B'00000000'                             2853
*NCSPLRPH->RPHCRR->CRACRR->CINCVI = '1'B;                          2854
         OI    CINCVI(@09),B'00000100'                             2854
* END;                                                             2855
* RFY (GPR01P,GPR15P) UNRSTD;                                      2856
* END;                                                             2857
* END;                                                             2858
@RF02846 DS    0H                                                  2859
* /* END OF CRIO EXPANSION */      /*@X50BHLV*/                    2859
*CVIRTNAD=CVISAVE8;                                        /*@X50BHLV*/
         L     CVIRTNAD,CVISAVE8                                   2859
*END CVICRIO;                                              /*@X50BHLV*/
*                                                                  2860
@EL00024 DS    0H                                                  2860
@EF00024 DS    0H                                                  2860
@ER00024 BR    @14                                                 2860
@PB00024 DS    0H                                                  2861
*/*------------------------------------------------------------------*/
*/* END OF ISTINCVI, VTAM VARY DEACTIVATE PROCESSOR          @X50BHLV*/
*/*------------------------------------------------------------------*/
*                                                                  2861
*/* TPEPILOG   */                                                  2861
* GEN (PRINT OFF);                                                 2861
*                                                                  2861
         PRINT OFF
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                              2862
*DCL  1  ISTZSAVE BDY(WORD) BASED,                                 2862
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                                2863
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE     2863
*BE ABLE TO TAKE IT.                                               2863
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                         2869
*/*  DELTA                                             006 02/10/75  */
*DCL                                                               2869
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                         2869
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),              2869
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN   2873
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                                2874
*                                                                  2874
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                          2903
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE 2903
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS 2903
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS       2903
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                   2904
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                         2904
*        3  APC56E BIT(1),                                         2904
*        3  APC57E BIT(1),                                         2904
*        3  APC58E BIT(1),                                         2904
*        3  APC31E BIT(1),                                         2904
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                         2904
*        3  APC54R BIT(1),                                         2904
*        3  APC56R BIT(1),                                         2904
*        3  APC57R BIT(1),                                         2904
*        3  APC58R BIT(1),                                         2904
*        3  APC31R BIT(1),                                         2904
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                         2904
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                      2904
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND          2905
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH     2905
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
*                                                                  2939
* DECLARE                                                          2939
*   EMCR0 PTR REG(0),                                              2939
*   EMCR1 PTR REG(1),                                              2939
*   EMCR2 PTR REG(2),                                              2939
*   EMCR3 PTR REG(3),                                              2939
*   EMCR4 PTR REG(4),                                              2939
*   EMCR5 PTR REG(5),                                              2939
*   EMCR6 PTR REG(6),                                              2939
*   EMCR7 PTR REG(7),                                              2939
*   EMCR8 PTR REG(8),                                              2939
*   EMCR9 PTR REG(9),                                              2939
*   EMCR10 PTR REG(10),                                            2939
*   EMCR11 PTR REG(11),                                            2939
*   EMCR12 PTR REG(12),                                            2939
*   EMCR13 PTR REG(13),                                            2939
*   EMCR14 PTR REG(14),                                            2939
*   EMCR15 PTR REG(15);                                            2939
*                                                                  2939
* DECLARE                                                          2940
*   ISTSDCCA ENTRY BASED(ATCCDADD) VALRG(*), /*CIDCTL ADD ROUTINE*/
*   ISTSDCCD ENTRY BASED(ATCCDDEL) VALRG(*), /*CIDCTL DELETE ROUTINE*/
*   ISTSDCCF ENTRY BASED(ATCCDFND) VALRG(*), /*CIDCTL FIND ROUTINE*/
*   ISTSDCCN ENTRY BASED(ATCCDFDN) VALRG(*), /*CIDCTL FIND NCB ROUTINE*
*   ISTSDCCR ENTRY BASED(ATCCDFIN) VALRG(*); /*CIDCTL FINISH ROUTINE*/
*   DCL CMZCIDM FIXED(15) DEFINED(ATCCIDM); /*CIDMASK ALIAS*/      2941
* DCL ISTAPC34 ENTRY BASED(ATCAP34) VALRG(*); /*RESET ROUTINE*/    2942
* DCL ISTAPC37 ENTRY BASED(ATCAP37) VALRG(*); /*TPQUE ROUTINE*/    2943
* DCL ISTINCR5 ENTRY NONLOCAL EXT;                                 2944
* GEN (PRINT ON);                                                  2945
         PRINT ON
*/* END OF TPEPILOG */                                                /
*@X50BHLV*/                                                        2946
*END ISTINCVI                                              /*@D32CKLV*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEZIOB  )                                        *
*/*%INCLUDE SYSLIB  (IECDIOSB)                                        *
*/*%INCLUDE SYSLIB  (IHASRB  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*;                                                                 2946
         B     @EL00001                                            2946
@DATA    DS    0H
@CH00096 DC    H'1'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
ISTINCVI CSECT
         DS    0F
@CF00088 DC    F'4'
@CF00832 DC    F'5'
@CF00094 DC    F'8'
@CH00094 EQU   @CF00094+2
@CF03142 DC    F'72'
@CF06586 DC    F'118'
@CF02523 DC    XL4'08000000'
@CF05782 DC    XL4'00FFFFFF'
@CF06623 DC    XL4'0000FFFF'
@CF06629 DC    BL4'00000000010000000000000000000000'
@DATD    DSECT
         DS    0D
IOSBPTR  DS    A
SRBPTR   DS    A
CVIWKMAP DS    CL196
         ORG   CVIWKMAP
CVINSI1  DS    AL4
CVINSI2  DS    AL4
CVINSI3  DS    AL4
CVINSI4  DS    AL4
CVINSI5  DS    AL4
CVINSI6  DS    AL4
CVINSI7  DS    AL4
CVINSI8  DS    AL4
CVINSI9  DS    AL4
CVINSI10 DS    AL4
CVINSI11 DS    AL4
CVINSI12 DS    AL4
CVINSI13 DS    AL4
CVINSI14 DS    AL4
CVINSI15 DS    AL4
CVINSI16 DS    AL4
CVINSI17 DS    AL4
CVINSI18 DS    AL4
CVINSI19 DS    AL4
CVIWKPT1 DS    AL4
CVIWKPT3 DS    AL4
CVIWKPT4 DS    AL4
CVINXDOT DS    AL4
CVIFMCB  DS    AL4
CVIRC    DS    FL4
CVISAVE1 DS    FL4
CVISAVE2 DS    FL4
CVISAVE3 DS    FL4
CVISAVE4 DS    FL4
CVISAVE5 DS    FL4
CVISAVE6 DS    FL4
CVISAVE7 DS    FL4
CVISAVE8 DS    FL4
CVIRU    DS    0C
CVISAV8  DS    CL8
CVICNTRS DS    CL18
         ORG   CVICNTRS
COMP     DS    FL2
VPONLINE DS    FL2
CLUSTRM  DS    FL2
GROUPVP  DS    FL2
LCLCNT   DS    FL2
RN       DS    FL2
SNACNT   DS    FL2
CVIDOTCT DS    FL2
I        DS    FL2
         ORG   CVIWKMAP+158
CVISWTCH DS    BL4
         ORG   CVISWTCH
CVIGO    DS    BL1
CVIVRYPD EQU   CVISWTCH+0
CVILOOP  EQU   CVISWTCH+0
CVIPGSW  EQU   CVISWTCH+0
CVISKPHD EQU   CVISWTCH+0
CVIQUIT  EQU   CVISWTCH+0
CVIRDS   EQU   CVISWTCH+0
FAILMSG  EQU   CVISWTCH+0
VPSW     DS    BL1
VPHLNSW  EQU   CVISWTCH+1
SEARLOOP EQU   CVISWTCH+1
CVIEXIT  EQU   CVISWTCH+1
SWIT     EQU   CVISWTCH+1
F2IN     EQU   CVISWTCH+1
SDLCWTO  EQU   CVISWTCH+1
CVISDLCF EQU   CVISWTCH+1
@NM00121 DS    BL2
         ORG   CVIWKMAP+164
CVISFDF  DS    FL4
         ORG   CVISFDF
CVISF    DS    BL2
CVIDF    DS    BL2
         ORG   CVIWKMAP+168
CVIMSG   DS    CL16
         ORG   CVIMSG
CVIMSG1  DS    CL8
CVIMSG2  DS    CL8
         ORG   CVIWKMAP+184
CVIMSG#  DS    CL4
CVIOUTBF DS    CL8
         ORG   CVIOUTBF
CVIOUTB1 DS    CL1
CVIOUTBB DS    CL2
         ORG   CVIOUTBB
CVIOUTB2 DS    CL1
CVIOUTB3 DS    CL1
         ORG   CVIOUTBF+3
CVIOUTBC DS    CL2
         ORG   CVIOUTBC
CVIOUTB4 DS    CL1
CVIOUTB5 DS    CL1
         ORG   CVIOUTBF+5
CVIOUTB6 DS    CL1
CVIOUTB7 DS    CL1
CVIOUTB8 DS    CL1
         ORG   CVIWKMAP+196
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTINCVI CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV05643 DC    V(ISTINCVX)
@CV05656 DC    V(ISTINCVP)
@CV05723 DC    V(ISTINCFS)
@CV05774 DC    V(ISTINCX0)
@CV05794 DC    V(ISTINCIO)
@CV05799 DC    V(ISTINCR5)
@CV05801 DC    V(ISTINCX2)
@CV05900 DC    V(ISTINCAV)
@CV05908 DC    V(ISTINCX9)
@CV05968 DC    V(ISTINCX7)
@CV05969 DC    V(ISTINCL7)
@CV05970 DC    V(ISTINCW5)
@CV05978 DC    V(ISTINCV2)
         DS    0D
@CC05605 DC    C'VARY    '
@CC05716 DC    C'MODIFY'
@CC05610 DC    C'600I'
@CC05612 DC    C'622I'
@CC05645 DC    C'073I'
@CC05681 DC    C'163I'
@CC05682 DC    C'152I'
@CC05684 DC    C'105I'
@CC05714 DC    C'140I'
@CC05715 DC    C'104I'
@CC05722 DC    C'103I'
@CC05758 DC    C'141I'
@CC05830 DC    C'153I'
@CC05868 DC    C'158I'
@CC05877 DC    C'161I'
@CC05899 DC    C'159I'
@CC05902 DC    C'156I'
@CC05979 DC    C'677I'
@CB05875 DC    X'010303'
@CB05876 DC    X'010000'
@CB03394 DC    X'3023'
@CB03396 DC    X'F01A'
@CB03419 DC    X'D004'
@CB03445 DC    X'3011'
@CB03447 DC    X'3012'
@CB03453 DC    X'9014'
@CB03471 DC    X'301E'
@CB03481 DC    X'FFFF'
@CB03489 DC    X'0044'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR02P   EQU   @02
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR10P   EQU   @10
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
RPHPTR   EQU   @01
LDPRMPTR EQU   @01
CVIR0    EQU   @00
CVINPUT  EQU   @01
CVIR2    EQU   @02
CVIR3    EQU   @03
CVIR4    EQU   @04
CVINCSPL EQU   @05
CVIWKA   EQU   @06
CVIWORKR EQU   @07
CVIWKPT2 EQU   @08
CVISAVE  EQU   @13
CVIRTNAD EQU   @14
CVIRTNCD EQU   @15
EMCR2    EQU   @02
EMCR3    EQU   @03
CMZK0134 EQU   @01
CMZK0135 EQU   @01
REG1137  EQU   @01
EMCR13   EQU   @13
REG15137 EQU   @15
REG1146  EQU   @01
REG15146 EQU   @15
REG1155  EQU   @01
REG15155 EQU   @15
CVIREG0  EQU   @00
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR03F   EQU   @03
GPR04F   EQU   @04
GPR05F   EQU   @05
GPR06F   EQU   @06
GPR07F   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
GPR10F   EQU   @10
GPR11F   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00004 EQU   IOSB+20
IOSCSW   EQU   @NM00004+1
IOSTATUS EQU   IOSCSW+3
IOSIPIB  EQU   IOSB+44
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
SRBSECT  EQU   0
SRBFLC   EQU   SRBSECT+12
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ISTPFX   EQU   0
PFXID    EQU   ISTPFX
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVSUBND EQU   DEVCHAR
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00039 EQU   LOKCHNG+2
ISTRPRE  EQU   0
RPRNAME  EQU   ISTRPRE
RPRCOMID EQU   ISTRPRE+8
RPRDAF   EQU   RPRCOMID+2
RPRELEN  EQU   ISTRPRE+16
RPRPELEN EQU   ISTRPRE+18
RPRENTRY EQU   ISTRPRE+20
RPRFLAGA EQU   ISTRPRE+21
RPRINV   EQU   RPRFLAGA
RPRENTED EQU   RPRFLAGA
RPRVRYPD EQU   RPRFLAGA
RPRLIVE  EQU   RPRFLAGA
RPRFLAGB EQU   ISTRPRE+22
RPRVIODN EQU   RPRFLAGB
RPRONLIN EQU   RPRFLAGB
RPRHLVPD EQU   RPRFLAGB
RPRVYIMM EQU   RPRFLAGB
RPRCAUSE EQU   ISTRPRE+23
RPRCRCPT EQU   RPRCAUSE
RPRPEPCT EQU   ISTRPRE+24
RPRHDTYP EQU   ISTRPRE+27
RPRLGONF EQU   ISTRPRE+28
RPRLGONB EQU   ISTRPRE+32
RPRNSNEA EQU   ISTRPRE+36
RPRNCBA  EQU   ISTRPRE+40
RPRDEVCH EQU   ISTRPRE+44
RPRPTHCT EQU   ISTRPRE+60
RPRFLAGD EQU   ISTRPRE+61
RPRLTASN EQU   RPRFLAGD
RPRRSON  EQU   RPRFLAGD
RPRINIMM EQU   RPRFLAGD
RPRFLAGC EQU   ISTRPRE+62
RPRCONID EQU   ISTRPRE+63
ISTRCPRE EQU   0
RCPACETR EQU   ISTRCPRE+84
RCPPMODE EQU   ISTRCPRE+91
RCPLGNIN EQU   ISTRCPRE+92
ISTRDT   EQU   0
RDTPLEN  EQU   ISTRDT+72
RDTPRIOR EQU   RDTPLEN
RDTLGCT  EQU   ISTRDT+90
RDTFLAGB EQU   ISTRDT+91
RDTDPAB  EQU   ISTRDT+100
RDTVYRPH EQU   ISTRDT+108
RDTSTCNT EQU   ISTRDT+112
ISTRAP   EQU   0
RAPFLG   EQU   ISTRAP+108
RAPFLGB  EQU   ISTRAP+109
RAPFLGC  EQU   ISTRAP+110
ISTRLC   EQU   0
RLCADR   EQU   ISTRLC+72
RLCFLAG  EQU   RLCADR
ISTRRN   EQU   0
RRNADR   EQU   ISTRRN+136
RRNFLAG  EQU   RRNADR
RRNLCDIP EQU   RRNFLAG
RRNUCBAD EQU   RRNADR+1
RRNRDF   EQU   ISTRRN+172
RRNRDFA  EQU   RRNRDF
RRNRBREM EQU   RRNRDFA
RRNRDFB  EQU   RRNRDF+1
RRNCMF   EQU   ISTRRN+176
RRNCMFA  EQU   RRNCMF
RRNCMFB  EQU   RRNCMF+1
RRNCMFC  EQU   RRNCMF+2
RRNCMFD  EQU   RRNCMF+3
RRNREMPO EQU   RRNCMFD
RRNNMDPD EQU   ISTRRN+192
RRNHPRE  EQU   ISTRRN+216
ISTRGP   EQU   0
RGPFLG   EQU   ISTRGP+72
ISTRLN   EQU   0
RLNADR   EQU   ISTRLN+72
RLNFLAG  EQU   RLNADR
RLNEAM   EQU   RLNFLAG
RLNUCBAD EQU   RLNADR+1
RLNSTAT1 EQU   ISTRLN+86
RLNSTAT2 EQU   ISTRLN+87
RLNOHIN  EQU   RLNSTAT2
RLNINUSE EQU   RLNSTAT2
RLNRDF   EQU   ISTRLN+88
RLNRDFA  EQU   RLNRDF
RLNRACNT EQU   RLNRDFA
RLNRACAT EQU   RLNRACNT
RLNRACAN EQU   RLNRACNT
RLNGANSW EQU   RLNRDFA
RLNPORT  EQU   RLNRDFA
RLNIDV   EQU   RLNRDFA
RLNRAPEP EQU   RLNRDFA
RLNRDFB  EQU   RLNRDF+1
RLNRBUSE EQU   RLNRDFB
RLNANSWR EQU   RLNRDFB
RLNTTV   EQU   RLNRDFB
RLNRATRN EQU   RLNRDFB
RLNACTSN EQU   ISTRLN+98
RLNCRFLG EQU   ISTRLN+102
RLNACTLN EQU   RLNCRFLG
RLNSWNCP EQU   RLNCRFLG
RLNLSCMD EQU   RLNCRFLG
RLNSWEP  EQU   RLNCRFLG
ISTRPT   EQU   0
RPTLNCID EQU   ISTRPT+116
RPTLNDAF EQU   RPTLNCID+2
RPTCTNM  EQU   ISTRPT+120
RPTDITT  EQU   ISTRPT+128
RPTDIVT  EQU   RPTDITT
RPTATERM EQU   ISTRPT+132
RPTUTERM EQU   ISTRPT+136
RPTFLAG1 EQU   ISTRPT+140
RPTVRYPD EQU   RPTFLAG1
RPTHLVPD EQU   RPTFLAG1
RPTONLIN EQU   RPTFLAG1
RPTVYIMM EQU   RPTFLAG1
RPTPEPCT EQU   ISTRPT+144
RPTPTHCT EQU   ISTRPT+146
ISTRCL   EQU   0
RCLADR   EQU   ISTRCL+72
RCLFLAG  EQU   RCLADR
ISTRTR   EQU   0
RTRADR   EQU   ISTRTR+124
RTRFLAG  EQU   RTRADR
RTRRDFA  EQU   ISTRTR+136
RTRRAALL EQU   RTRRDFA
RTRRDFB  EQU   ISTRTR+137
RTRRDFC  EQU   ISTRTR+138
RTRRDFD  EQU   ISTRTR+139
RTRRDFE  EQU   ISTRTR+140
RTRRDFF  EQU   ISTRTR+141
RTRCRFLG EQU   ISTRTR+143
RTRLSCMD EQU   RTRCRFLG
RTRBSCID EQU   ISTRTR+188
ISTRIN   EQU   0
RINDFD   EQU   ISTRIN+124
RINREMPO EQU   RINDFD
RINNODEF EQU   RINDFD
RINLDISC EQU   RINDFD
RINNODID EQU   ISTRIN+125
RINRLDAF EQU   ISTRIN+126
RINREMOT EQU   ISTRIN+128
RINVPAB  EQU   ISTRIN+132
RINRPHCN EQU   ISTRIN+136
RINNCSPL EQU   ISTRIN+140
RINCNCNT EQU   ISTRIN+144
ISTRDS   EQU   0
RDSCTTRM EQU   ISTRDS+72
RDSADDOT EQU   ISTRDS+76
ISTDOT   EQU   0
DOTADTRM EQU   ISTDOT
ISTRCC   EQU   0
RCCFLAG  EQU   ISTRCC+73
RCCFLAGB EQU   ISTRCC+74
RCCFINAL EQU   RCCFLAGB
RCCRESET EQU   RCCFLAGB
RCCCNCNT EQU   ISTRCC+75
RCCSTAID EQU   ISTRCC+78
RCCID48  EQU   RCCSTAID+2
RCCVPAB  EQU   ISTRCC+88
RCCDPAB  EQU   ISTRCC+92
RCCRPHCN EQU   ISTRCC+100
RCCCRFLG EQU   ISTRCC+108
ISTRLU   EQU   0
RLUFLAG  EQU   ISTRLU+125
RLURBISA EQU   RLUFLAG
RLUGSTAT EQU   RLUFLAG
RLUCRFLG EQU   ISTRLU+126
RLUACTLU EQU   RLUCRFLG
RLUPACE  EQU   ISTRLU+132
RLUNCPPC EQU   ISTRLU+134
RLUUSSTB EQU   ISTRLU+140
RLUMODET EQU   ISTRLU+152
ISTRPX   EQU   0
ISTRLX   EQU   0
RLXFLAGA EQU   ISTRLX+76
ISTRSW   EQU   0
ISTRDA   EQU   0
RDAADR   EQU   ISTRDA+72
RDAFLAG  EQU   RDAADR
RDAUCBAD EQU   RDAADR+1
ISTRLS   EQU   0
ISTDNT   EQU   0
ISTGNT   EQU   0
ISTPAT   EQU   0
PATFLAGA EQU   ISTPAT+7
ISTDTE   EQU   0
DTELCTI  EQU   ISTDTE
DTERDTEA EQU   ISTDTE+1
ISTDIVTH EQU   0
DIVNUME  EQU   ISTDIVTH
DIVIDLEN EQU   ISTDIVTH+4
ISTDVE   EQU   0
DVERDTEA EQU   ISTDVE
DVEBSCID EQU   ISTDVE+4
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
DYPPAB   EQU   ISTDYPAB+16
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCQKHLT EQU   ATCSTAT1
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCIDM  EQU   ATCCOM+266
ATCCDADD EQU   ISTATCVT+276
ATCCDDEL EQU   ISTATCVT+280
ATCCDFND EQU   ISTATCVT+284
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCMSGP  EQU   ISTATCVT+344
ATCHPGM  EQU   ISTATCVT+384
ATCAP33  EQU   ISTATCVT+444
ATCAP36  EQU   ISTATCVT+452
ATCCDFIN EQU   ISTATCVT+460
ATCCDFDN EQU   ISTATCVT+464
ATCVOCLK EQU   ISTATCVT+468
ATCRDTLK EQU   ISTATCVT+472
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCINCW3 EQU   ISTATCVT+832
ATCVTBAM EQU   ISTATCVT+908
@NM00056 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCAP31  EQU   ATCAOSM+24
ATCAP34  EQU   ATCAOSM+32
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCAP37  EQU   ATCAOSM+264
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00058 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTACDEB EQU   0
ACDVTPRX EQU   ISTACDEB
ACDDBPFX EQU   ISTACDEB+16
ACDTBLOF EQU   ACDDBPFX+6
ACDBASIC EQU   ISTACDEB+24
ACDTCBAD EQU   ACDBASIC
ACDNMSUB EQU   ACDTCBAD
ACDDEBAD EQU   ACDBASIC+4
ACDUSRPG EQU   ACDBASIC+16
ACDACBAD EQU   ACDBASIC+24
ACDAPPAD EQU   ACDBASIC+28
ACDVTAM  EQU   ISTACDEB+56
ACDSSFLG EQU   ACDVTAM+80
ACDAPDAT EQU   ACDVTAM+83
ISTPOHD  EQU   0
POHSTAT  EQU   ISTPOHD+1
ISTNCSPL EQU   0
@NM00063 EQU   ISTNCSPL
NCSPFX   EQU   @NM00063
NCSPLVCD EQU   ISTNCSPL+17
NCSPLVBF EQU   ISTNCSPL+18
NCSVBF11 EQU   NCSPLVBF+1
NCSVBF12 EQU   NCSPLVBF+1
NCSVBF16 EQU   NCSPLVBF+1
NCSPLVFL EQU   ISTNCSPL+20
NCSVDEL  EQU   NCSPLVFL
NCSPLVF1 EQU   ISTNCSPL+21
NCSOVFMC EQU   NCSPLVF1
NCSPRMRC EQU   ISTNCSPL+22
NCSIORC  EQU   ISTNCSPL+23
NCSPLRID EQU   ISTNCSPL+28
NCSCRCMD EQU   ISTNCSPL+50
NCSPLRPT EQU   ISTNCSPL+52
NCSPLCMD EQU   ISTNCSPL+60
NCSCMDA  EQU   NCSPLCMD
NCSCRFLG EQU   ISTNCSPL+67
NCSPLRAD EQU   ISTNCSPL+144
NCSIOCID EQU   ISTNCSPL+148
NCSPLCID EQU   NCSIOCID
NCSPLSAF EQU   NCSPLCID
NCSPLDAF EQU   NCSPLCID+2
NCSPLWKA EQU   ISTNCSPL+152
NCSPLCVT EQU   ISTNCSPL+156
NCSPLRPH EQU   ISTNCSPL+160
NCSPLFSB EQU   ISTNCSPL+168
NCSPLFL1 EQU   ISTNCSPL+176
NCSPL2IN EQU   NCSPLFL1
NCSPLSOM EQU   NCSPLFL1
NCSPLEBN EQU   NCSPLFL1
NCSPLNON EQU   NCSPLFL1
NCSPLFL2 EQU   ISTNCSPL+177
NCSOUFMC EQU   NCSPLFL2
NCSREMPO EQU   NCSPLFL2
NCSPLVIS EQU   NCSPLFL2
NCSPLVIT EQU   NCSPLFL2
NCSPLFL3 EQU   ISTNCSPL+178
NCSPLANS EQU   NCSPLFL3
NCSFINAL EQU   NCSPLFL3
NCSPLFL4 EQU   ISTNCSPL+179
NCSPLRSO EQU   NCSPLFL4
NCSPLVID EQU   NCSPLFL4
NCSPLFL5 EQU   ISTNCSPL+181
NCSSDLK  EQU   NCSPLFL5
NCSPLOLN EQU   ISTNCSPL+182
NCSPLP1  EQU   ISTNCSPL+184
NCSPLSPL EQU   ISTNCSPL+196
NCSPLRUO EQU   ISTNCSPL+208
NCSPLRUI EQU   ISTNCSPL+212
NCSPLAPP EQU   ISTNCSPL+216
NCSSENSE EQU   ISTNCSPL+244
NCSCRDTE EQU   ISTNCSPL+264
NCSCRMSK EQU   ISTNCSPL+268
NCSCHKPT EQU   NCSCRMSK
NCSACTV  EQU   NCSCHKPT
NCSPACTV EQU   NCSCHKPT
NCSANSMD EQU   NCSCHKPT+1
NCSCRMOD EQU   NCSCRMSK+2
NCSAIMOD EQU   NCSCRMOD
NCSPTMOD EQU   NCSCRMOD
NCSPLSID EQU   ISTNCSPL+271
NCSPLSTA EQU   NCSPLSID
NCSPLPHD EQU   NCSPLSID+1
NCSAPP   EQU   0
NCSAPBUE EQU   NCSAPP+88
NCSUSSRU EQU   0
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTFMCB  EQU   0
FMCFMCBA EQU   ISTFMCB+20
FMCSTAT  EQU   ISTFMCB+28
FMCSTAT1 EQU   ISTFMCB+29
FMCCMDFL EQU   ISTFMCB+31
FMCCMPS1 EQU   ISTFMCB+36
FMCSIPA  EQU   ISTFMCB+148
FMCNXOSQ EQU   ISTFMCB+152
FMCNXCFM EQU   FMCNXOSQ
FMCNXOSC EQU   FMCNXOSQ+2
FMCSSTAT EQU   ISTFMCB+159
FMCPACE  EQU   ISTFMCB+160
FMCPACEN EQU   FMCPACE
FMCPACEM EQU   FMCPACE+1
FMCPACPC EQU   FMCPACE+2
FMCCVAL  EQU   FMCPACE+3
FMCOBCE  EQU   FMCCVAL
FMCCLEXT EQU   ISTFMCB+164
FMCRPLA  EQU   FMCCLEXT
FMCFBA   EQU   FMCCLEXT+4
FMCCMPS2 EQU   FMCCLEXT+16
FMCFLGA  EQU   FMCCMPS2
FMCFLGCL EQU   FMCCMPS2+1
FMCPSCMD EQU   FMCCMPS2+2
FMCPSTAT EQU   FMCCMPS2+3
FMCSTAT2 EQU   ISTFMCB+186
FMCMODEB EQU   ISTFMCB+189
FMCCLSEQ EQU   ISTFMCB+190
FMCRRESP EQU   ISTFMCB+195
FMCSSEGQ EQU   ISTFMCB+200
FMCFBAS  EQU   ISTFMCB+216
FMCZV002 EQU   FMCFBAS
FMCSNCTL EQU   ISTFMCB+224
FMCSCFLG EQU   FMCSNCTL
FMCVS1   EQU   ISTFMCB+232
FMCZFLAG EQU   FMCVS1
FMCZF006 EQU   FMCZFLAG
FMCLBXM  EQU   FMCVS1+12
FMCSHEAQ EQU   FMCLBXM
FMCLCPBQ EQU   FMCVS1+16
FMCLCPAQ EQU   FMCVS1+20
FMCSEQ1  EQU   FMCVS1+34
FMCZFLG2 EQU   FMCVS1+35
FMCCVFLG EQU   FMCVS1+44
FMCFLAG  EQU   0
FMCFLGB  EQU   FMCFLAG
ISTQAB   EQU   0
QABATTR  EQU   ISTQAB+16
QABATTR2 EQU   QABATTR+1
ISTCSP   EQU   0
CSPOPT   EQU   ISTCSP+2
CSPOPT1  EQU   CSPOPT
CSPOPT2  EQU   CSPOPT+1
CSPRSC2B EQU   ISTCSP+32
ISTNIB   EQU   0
NIBFLGS  EQU   ISTNIB+40
NIBFLG1  EQU   NIBFLGS
ISTLDPRM EQU   0
LDPFG    EQU   ISTLDPRM+20
LDPFB2   EQU   ISTLDPRM+21
ISTCONFT EQU   0
CONHALT  EQU   ISTCONFT+106
CONFLAGS EQU   ISTCONFT+110
CONDSFLG EQU   CONFLAGS
CONOPTFL EQU   CONFLAGS+1
CONSTAT  EQU   CONFLAGS+2
CONBUFF  EQU   CONFLAGS+3
CONFLG01 EQU   ISTCONFT+416
CONSCPID EQU   ISTCONFT+1356
CONSTAID EQU   CONSCPID+3
ISTNCB   EQU   0
NCBFMCBA EQU   ISTNCB+16
NCBFLAGS EQU   ISTNCB+24
NCBFRAS  EQU   NCBFLAGS+1
NCBFTRIO EQU   NCBFRAS
NCBFLAG1 EQU   NCBFLAGS+2
ISTICNCB EQU   0
@NM00098 EQU   ISTICNCB+53
ICNCKFLD EQU   ISTICNCB+96
ICNFLAG  EQU   ISTICNCB+100
ICNZF006 EQU   ICNFLAG
ICNFFLAG EQU   ISTICNCB+101
ICNZSWS  EQU   ISTICNCB+102
ICNFLAG2 EQU   ISTICNCB+236
ICNZD001 EQU   ISTICNCB+288
ICNWSCCW EQU   ICNZD001
ICNZD002 EQU   ISTICNCB+296
ICNZD003 EQU   ISTICNCB+320
ICNRSCCW EQU   ICNZD003
ICNZD004 EQU   ISTICNCB+328
ICNZS1VR EQU   ISTICNCB+348
ICNSRV02 EQU   ICNZS1VR
ICNDIEWA EQU   ICNSRV02
ICNDCDEB EQU   ISTICNCB+480
ICNDIDEB EQU   ICNDCDEB+12
ICNZFLAG EQU   ISTICNCB+508
ICNZH002 EQU   ISTICNCB+509
ICNZS002 EQU   ICNZH002
ICNZS003 EQU   ICNZH002
ICNZS004 EQU   ICNZH002
ICNZS006 EQU   ICNZH002
ICNZS007 EQU   ICNZH002
ICNZS008 EQU   ICNZH002
ICNZS009 EQU   ICNZH002+1
ICNZS00A EQU   ICNZH002+1
ICNZCONS EQU   ISTICNCB+680
ISTLDNCB EQU   0
LDNCFLAG EQU   ISTLDNCB+54
LDNFLAGS EQU   ISTLDNCB+107
LDNCLOSD EQU   LDNFLAGS+2
LDNFLAG2 EQU   ISTLDNCB+110
LDNZIOLK EQU   ISTLDNCB+184
LDNZERPF EQU   ISTLDNCB+185
LDNZCPAN EQU   LDNZERPF
LDNZEPIN EQU   LDNZERPF
LDNZLPC  EQU   ISTLDNCB+186
LDNDCDEB EQU   ISTLDNCB+304
LDNZSAV3 EQU   ISTLDNCB+376
LDNZSAV4 EQU   LDNZSAV3+8
LDNZH003 EQU   ISTLDNCB+577
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTRH    EQU   0
RHFLAGS  EQU   ISTRH
RH1      EQU   RHFLAGS
RH2      EQU   RHFLAGS+1
RHRETRY  EQU   RH2
RHRSVD1  EQU   RH2
RH3      EQU   RHFLAGS+2
ISTRU    EQU   0
RUDATA   EQU   ISTRU
ISTRUB   EQU   0
NSRUNA5  EQU   0
ISTGTNCS EQU   0
GTNCSAD  EQU   ISTGTNCS
GTNCSFLG EQU   ISTGTNCS+4
GTNCSREQ EQU   GTNCSFLG
GTNCSRQU EQU   GTNCSFLG
GTNCSWKA EQU   GTNCSFLG
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCNSTA EQU   0
CNSTFLDA EQU   ISTCNSTA+16
CNSTFLDB EQU   ISTCNSTA+19
ISTVYCRR EQU   0
VYCAUDIT EQU   ISTVYCRR+22
VYCNTRD  EQU   VYCAUDIT
NINCVI   EQU   VYCNTRD
VYCCRT   EQU   VYCAUDIT+12
CINCVI   EQU   VYCCRT
VYCRRCW3 EQU   ISTVYCRR+118
ISTICE   EQU   0
ICEFLAGS EQU   ISTICE+28
ISTACE   EQU   0
ACEFLAGS EQU   ISTACE+20
ACEVARY  EQU   ACEFLAGS
CVISVMAP EQU   0
CVIBKPTR EQU   CVISVMAP+4
CVIFWPTR EQU   CVISVMAP+8
CVINXTAV EQU   0
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRAL2PTR EQU   CRABASIC+16
CRAL3PTR EQU   CRABASIC+20
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
FMZL0031 EQU   0
FMZL0036 EQU   0
FMZL0041 EQU   0
FMZL0051 EQU   0
ISTSDCCF EQU   0
CVINXTWA EQU   0
ISTAPC37 EQU   0
FMZL0096 EQU   0
@NM00123 EQU   0
CMZID137 EQU   @NM00123
@NM00124 EQU   @NM00123+4
CMZRL137 EQU   @NM00124
CMZRA137 EQU   @NM00124+1
CMZEA137 EQU   @NM00123+8
CMZVP137 EQU   @NM00123+12
CMZSA137 EQU   0
CMTA137  EQU   0
@NM00125 EQU   0
CMZID146 EQU   @NM00125
@NM00126 EQU   @NM00125+4
CMZRL146 EQU   @NM00126
CMZRA146 EQU   @NM00126+1
CMZEA146 EQU   @NM00125+8
CMZVP146 EQU   @NM00125+12
CMZSA146 EQU   0
CMTA146  EQU   0
@NM00127 EQU   0
CMZID155 EQU   @NM00127
@NM00128 EQU   @NM00127+4
CMZRL155 EQU   @NM00128
CMZRA155 EQU   @NM00128+1
CMZEA155 EQU   @NM00127+8
CMZVP155 EQU   @NM00127+12
CMZSA155 EQU   0
CMTA155  EQU   0
ISTAPC34 EQU   0
ISTRPL   EQU   0
ISTSDCCA EQU   0
ISTSDCCD EQU   0
ISTSDCCN EQU   0
ISTSDCCR EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
ISTSENRU EQU   RUDATA
SRUSENSE EQU   ISTSENRU
SRUSENS1 EQU   SRUSENSE
SRUSENS2 EQU   SRUSENSE+2
ISTSRU   EQU   ISTRUB
SRUDATA  EQU   ISTSRU+1
SRUTYPE  EQU   SRUDATA
SRULDID  EQU   SRUDATA+1
SRUSPSN  EQU   SRULDID
ISTNSRU  EQU   ISTRUB
NSRUNETS EQU   ISTNSRU
NSRUID   EQU   NSRUNETS
NSRUSUB  EQU   NSRUNETS+1
NSRURCD  EQU   NSRUNETS+2
NSRUDATA EQU   ISTNSRU+3
NSRUHOOK EQU   NSRUDATA
NSSSVRU  EQU   NSRUDATA
NSSSVDAF EQU   NSSSVRU
NSSSVT   EQU   NSSSVRU+2
NSSSVNOD EQU   NSSSVRU+3
NSSSVT3  EQU   NSSSVNOD
NSSSVT3C EQU   NSSSVT3+2
NSSSVT3G EQU   NSSSVT3+5
NSSSVT4  EQU   NSSSVNOD
NSSSVT5  EQU   NSSSVNOD
NSSSVT5A EQU   NSSSVT5
NSRUDAT1 EQU   NSRUDATA
NSRUDAT2 EQU   NSRUDAT1+2
ISTTRRU  EQU   NSRUDAT2
TRRTYPE  EQU   ISTTRRU
ISTCTDRU EQU   NSRUDAT2
ISTINORU EQU   NSRUDAT2
SRUDAT1  EQU   SRUDATA
SRUDAT1L EQU   SRUDAT1+1
SRUDAT2  EQU   SRUDATA
ISTMRU   EQU   ISTRUB
SRUDATA3 EQU   SRUDATA
SRUDATA4 EQU   SRUDATA
NSRUDAT3 EQU   NSRUDAT2
NSRUDAT4 EQU   NSRUDAT2
NSRUDAT5 EQU   NSRUDAT2
NSRUDAT6 EQU   NSRUDAT2
NSRUDAT7 EQU   NSRUDAT2
NSRUDIL  EQU   NSRUDAT2
NSRUDILB EQU   NSRUDIL+1
NSRUNA   EQU   NSRUDAT2
NSRUNA2  EQU   NSRUNA+1
NSRUCLSP EQU   NSRUDAT2
NSRUOH1  EQU   NSRUDAT2
NSRUDAT8 EQU   NSRUDATA
ISTUNBRU EQU   SRUTYPE
CVIMSGA  EQU   CVIMSG
CVIMSG1A EQU   CVIMSGA
CVIMSG2A EQU   CVIMSGA+6
CVIWKMP0 EQU   CVIWKMAP
CMZCIDM  EQU   ATCCIDM
RTRDNCBA EQU   ISTRTR+40
SRB      EQU   SRBSECT
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00122 EQU   CVIMSGA+14
UNBTYPE  EQU   ISTUNBRU
NSRUDA8T EQU   NSRUDAT8
NSRUOHID EQU   NSRUOH1
NSRULSV  EQU   NSRUCLSP
NSRUNA4  EQU   NSRUNA+2
NSRUNA3  EQU   NSRUNA2
NSRUNA1  EQU   NSRUNA
NSRUDILF EQU   NSRUDIL+4
NSRUDILE EQU   NSRUDIL+3
NSRUDILD EQU   NSRUDIL+2
NSRUDILC EQU   NSRUDILB
@NM00114 EQU   NSRUDILB
NSRUDILA EQU   NSRUDIL
NSRUDA7T EQU   NSRUDAT7
NSRUDA6L EQU   NSRUDAT6+4
NSRUDA6S EQU   NSRUDAT6
NSRUDA5E EQU   NSRUDAT5
NSRUDA4T EQU   NSRUDAT4
NSRUDA3S EQU   NSRUDAT3
SRUDAT4D EQU   SRUDATA4
SRUDAT3I EQU   SRUDATA3
MRUDATA  EQU   ISTMRU+9
MRURESP  EQU   ISTMRU+7
MRUMODIF EQU   ISTMRU+6
MRUCMND  EQU   ISTMRU+5
MRUDAF   EQU   ISTMRU+3
MRUREQ   EQU   ISTMRU+2
MRUPREF  EQU   ISTMRU
SRUDAT2N EQU   SRUDAT2+1
SRUDAT2T EQU   SRUDAT2
SRUDAT1I EQU   SRUDAT1+2
SRUTSPRO EQU   SRUDAT1L
SRUFMPRO EQU   SRUDAT1L
SRUDAT1T EQU   SRUDAT1
INORUET  EQU   ISTINORU
CTDRUSTA EQU   ISTCTDRU
TRRDATA  EQU   ISTTRRU+4
TRRSTAT  EQU   ISTTRRU+3
TRRPEP   EQU   ISTTRRU+2
TRRTIME  EQU   ISTTRRU+1
@NM00113 EQU   TRRTYPE
TRRFMT2  EQU   TRRTYPE
@NM00112 EQU   TRRTYPE
NSRUDAF  EQU   NSRUDAT1
NSSSVT4D EQU   NSSSVT4+3
NSSSVT4C EQU   NSSSVT4+2
NSSSVT4B EQU   NSSSVT4+1
NSSSVT4A EQU   NSSSVT4
NSSSVT3K EQU   NSSSVT3+8
NSSSVT3J EQU   NSSSVT3+7
NSSSVT3I EQU   NSSSVT3+6
@NM00111 EQU   NSSSVT3G
NSSSVT3H EQU   NSSSVT3G
NSSSVT3F EQU   NSSSVT3+4
NSSSVT3E EQU   NSSSVT3+3
@NM00110 EQU   NSSSVT3C
NSSSVT3D EQU   NSSSVT3C
NSSSVT3B EQU   NSSSVT3+1
NSSSVT3A EQU   NSSSVT3
NSRUHKTY EQU   NSRUHOOK
SRURSV01 EQU   SRULDID+4
SRUPSSN  EQU   SRULDID+2
SRUDFCLV EQU   SRUSPSN
@NM00109 EQU   SRUTYPE
SRUPSAC  EQU   SRUTYPE
SRUSPAC  EQU   SRUTYPE
SRUQSREQ EQU   ISTSRU
SENRU    EQU   ISTSENRU+4
SRUSNS4  EQU   SRUSENS2+1
SRUSNS3  EQU   SRUSENS2
SRUSNST  EQU   SRUSENS1+1
SRUSNS1  EQU   SRUSENS1
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00009 EQU   IOSPCISC+4
@NM00008 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00007 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
@NM00140 EQU   ISTAPCRR+137
@NM00139 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00138 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00137 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00136 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00135 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00134 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00133 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00132 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00131 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00130 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00129 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
@NM00120 EQU   CVISVMAP+12
@NM00119 EQU   CVISVMAP
@NM00118 EQU   ACEFLAGS
ACETAKER EQU   ACEFLAGS
ACEPREMR EQU   ACEFLAGS
ACETAKEN EQU   ACEFLAGS
ACEPREMD EQU   ACEFLAGS
ACERPHA  EQU   ISTACE+16
ACEOBJQ  EQU   ISTACE+12
ACESUBJQ EQU   ISTACE+8
ACEOBJ   EQU   ISTACE+4
ACESUBJ  EQU   ISTACE
ICERSC2B EQU   ISTICE+36
ICEUECBX EQU   ISTICE+32
@NM00117 EQU   ISTICE+29
@NM00116 EQU   ICEFLAGS
ICESTAPR EQU   ICEFLAGS
ICERSC2F EQU   ICEFLAGS
ICELGON  EQU   ICEFLAGS
ICEICX   EQU   ICEFLAGS
ICESPEC  EQU   ICEFLAGS
ICERPHA  EQU   ISTICE+24
ICEDATA  EQU   ISTICE+20
ICESIDE  EQU   ISTICE+16
ICEOBJQ  EQU   ISTICE+12
ICESUBJQ EQU   ISTICE+8
ICEOBJ   EQU   ISTICE+4
ICESUBJ  EQU   ISTICE
VYCRSV02 EQU   ISTVYCRR+128
VYCRSV04 EQU   ISTVYCRR+126
VYCRRSAV EQU   ISTVYCRR+46
VYCRSV03 EQU   VYCCRT+11
CINCFE   EQU   VYCCRT+11
CINCE9   EQU   VYCCRT+11
CINCVO   EQU   VYCCRT+11
CINCR5   EQU   VYCCRT+11
CINCR3   EQU   VYCCRT+10
CINCE8   EQU   VYCCRT+10
CINCE7   EQU   VYCCRT+10
CINCE6   EQU   VYCCRT+10
CINCE5   EQU   VYCCRT+10
CINCE1   EQU   VYCCRT+10
CINCUQ   EQU   VYCCRT+10
CINCUB   EQU   VYCCRT+10
CINCUA   EQU   VYCCRT+9
CINCX9   EQU   VYCCRT+9
CINCX8   EQU   VYCCRT+9
CINCX7   EQU   VYCCRT+9
CINCX6   EQU   VYCCRT+9
CINCX3   EQU   VYCCRT+9
CINCX2   EQU   VYCCRT+9
CINCX1   EQU   VYCCRT+9
CINCX0   EQU   VYCCRT+8
CINCW9   EQU   VYCCRT+8
CINCW8   EQU   VYCCRT+8
CINCW7   EQU   VYCCRT+8
CINCW6   EQU   VYCCRT+8
CINCW5   EQU   VYCCRT+8
CINCW4   EQU   VYCCRT+8
CINCW2   EQU   VYCCRT+8
CINCW0   EQU   VYCCRT+7
CINCV9   EQU   VYCCRT+7
CINCV8   EQU   VYCCRT+7
CINCV7   EQU   VYCCRT+7
CINCV6   EQU   VYCCRT+7
CINCV5   EQU   VYCCRT+7
CINCV4   EQU   VYCCRT+7
CINCV3   EQU   VYCCRT+7
CINCV2   EQU   VYCCRT+6
CINCU8   EQU   VYCCRT+6
CINCU7   EQU   VYCCRT+6
CINCU6   EQU   VYCCRT+6
CINCU5   EQU   VYCCRT+6
CINCU4   EQU   VYCCRT+6
CINCU3   EQU   VYCCRT+6
CINCU2   EQU   VYCCRT+6
CINCU1   EQU   VYCCRT+5
CINCU0   EQU   VYCCRT+5
CINCUM   EQU   VYCCRT+5
CINCS1   EQU   VYCCRT+5
CINCL8   EQU   VYCCRT+5
CINCL7   EQU   VYCCRT+5
CINCL6   EQU   VYCCRT+5
CINCL5   EQU   VYCCRT+5
CINCL4   EQU   VYCCRT+4
CINCL3   EQU   VYCCRT+4
CINCL2   EQU   VYCCRT+4
CINCL1   EQU   VYCCRT+4
CINCL0   EQU   VYCCRT+4
CINCF4   EQU   VYCCRT+4
CINCF3   EQU   VYCCRT+4
CINCF1   EQU   VYCCRT+4
CINCFM   EQU   VYCCRT+3
CINCE4   EQU   VYCCRT+3
CINCE3   EQU   VYCCRT+3
CINCE2   EQU   VYCCRT+3
CINCE0   EQU   VYCCRT+3
CINCD9   EQU   VYCCRT+3
CINCD8   EQU   VYCCRT+3
CINCD7   EQU   VYCCRT+3
CINCD6   EQU   VYCCRT+2
CINCD5   EQU   VYCCRT+2
CINCD4   EQU   VYCCRT+2
CINCD3   EQU   VYCCRT+2
CINCD2   EQU   VYCCRT+2
CINCD1   EQU   VYCCRT+2
CINCIP   EQU   VYCCRT+2
CINCR2   EQU   VYCCRT+2
CINCMS   EQU   VYCCRT+1
CINCVN   EQU   VYCCRT+1
CINCVS   EQU   VYCCRT+1
CINCVP   EQU   VYCCRT+1
CINCVX   EQU   VYCCRT+1
CINCFS   EQU   VYCCRT+1
CINCSM   EQU   VYCCRT+1
CINCR1   EQU   VYCCRT+1
CINCLF   EQU   VYCCRT
CINCVA   EQU   VYCCRT
CINCMD   EQU   VYCCRT
CINCMY   EQU   VYCCRT
CINCDL   EQU   VYCCRT
CINCIO   EQU   VYCCRT
CINCCL   EQU   VYCCRT
VYCRSV01 EQU   VYCNTRD+11
NINCFE   EQU   VYCNTRD+11
NINCE9   EQU   VYCNTRD+11
NINCVO   EQU   VYCNTRD+11
NINCR5   EQU   VYCNTRD+11
NINCR3   EQU   VYCNTRD+10
NINCE8   EQU   VYCNTRD+10
NINCE7   EQU   VYCNTRD+10
NINCE6   EQU   VYCNTRD+10
NINCE5   EQU   VYCNTRD+10
NINCE1   EQU   VYCNTRD+10
NINCUQ   EQU   VYCNTRD+10
NINCUB   EQU   VYCNTRD+10
NINCUA   EQU   VYCNTRD+9
NINCX9   EQU   VYCNTRD+9
NINCX8   EQU   VYCNTRD+9
NINCX7   EQU   VYCNTRD+9
NINCX6   EQU   VYCNTRD+9
NINCX3   EQU   VYCNTRD+9
NINCX2   EQU   VYCNTRD+9
NINCX1   EQU   VYCNTRD+9
NINCX0   EQU   VYCNTRD+8
NINCW9   EQU   VYCNTRD+8
NINCW8   EQU   VYCNTRD+8
NINCW7   EQU   VYCNTRD+8
NINCW6   EQU   VYCNTRD+8
NINCW5   EQU   VYCNTRD+8
NINCW4   EQU   VYCNTRD+8
NINCW2   EQU   VYCNTRD+8
NINCW0   EQU   VYCNTRD+7
NINCV9   EQU   VYCNTRD+7
NINCV8   EQU   VYCNTRD+7
NINCV7   EQU   VYCNTRD+7
NINCV6   EQU   VYCNTRD+7
NINCV5   EQU   VYCNTRD+7
NINCV4   EQU   VYCNTRD+7
NINCV3   EQU   VYCNTRD+7
NINCV2   EQU   VYCNTRD+6
NINCU8   EQU   VYCNTRD+6
NINCU7   EQU   VYCNTRD+6
NINCU6   EQU   VYCNTRD+6
NINCU5   EQU   VYCNTRD+6
NINCU4   EQU   VYCNTRD+6
NINCU3   EQU   VYCNTRD+6
NINCU2   EQU   VYCNTRD+6
NINCU1   EQU   VYCNTRD+5
NINCU0   EQU   VYCNTRD+5
NINCUM   EQU   VYCNTRD+5
NINCS1   EQU   VYCNTRD+5
NINCL8   EQU   VYCNTRD+5
NINCL7   EQU   VYCNTRD+5
NINCL6   EQU   VYCNTRD+5
NINCL5   EQU   VYCNTRD+5
NINCL4   EQU   VYCNTRD+4
NINCL3   EQU   VYCNTRD+4
NINCL2   EQU   VYCNTRD+4
NINCL1   EQU   VYCNTRD+4
NINCL0   EQU   VYCNTRD+4
NINCF4   EQU   VYCNTRD+4
NINCF3   EQU   VYCNTRD+4
NINCF1   EQU   VYCNTRD+4
NINCFM   EQU   VYCNTRD+3
NINCE4   EQU   VYCNTRD+3
NINCE3   EQU   VYCNTRD+3
NINCE2   EQU   VYCNTRD+3
NINCE0   EQU   VYCNTRD+3
NINCD9   EQU   VYCNTRD+3
NINCD8   EQU   VYCNTRD+3
NINCD7   EQU   VYCNTRD+3
NINCD6   EQU   VYCNTRD+2
NINCD5   EQU   VYCNTRD+2
NINCD4   EQU   VYCNTRD+2
NINCD3   EQU   VYCNTRD+2
NINCD2   EQU   VYCNTRD+2
NINCD1   EQU   VYCNTRD+2
NINCIP   EQU   VYCNTRD+2
NINCR2   EQU   VYCNTRD+2
NINCMS   EQU   VYCNTRD+1
NINCVN   EQU   VYCNTRD+1
NINCVS   EQU   VYCNTRD+1
NINCVP   EQU   VYCNTRD+1
NINCVX   EQU   VYCNTRD+1
NINCFS   EQU   VYCNTRD+1
NINCSM   EQU   VYCNTRD+1
NINCR1   EQU   VYCNTRD+1
NINCLF   EQU   VYCNTRD
NINCVA   EQU   VYCNTRD
NINCMD   EQU   VYCNTRD
NINCMY   EQU   VYCNTRD
NINCDL   EQU   VYCNTRD
NINCIO   EQU   VYCNTRD
NINCCL   EQU   VYCNTRD
VYCCNS   EQU   ISTVYCRR
CNSRSV05 EQU   CNSTFLDB+2
CNSLOG0B EQU   CNSTFLDB+2
CNSACCTB EQU   CNSTFLDB+2
CNSFREEB EQU   CNSTFLDB+2
CNSGETSB EQU   CNSTFLDB+2
CNSSEARB EQU   CNSTFLDB+2
CNSQUEUB EQU   CNSTFLDB+2
CNSACONB EQU   CNSTFLDB+2
CNSTCONB EQU   CNSTFLDB+1
CNSCLAQB EQU   CNSTFLDB+1
CNSCLINB EQU   CNSTFLDB+1
CNSGBINB EQU   CNSTFLDB+1
CNSLGINB EQU   CNSTFLDB+1
CNSACINB EQU   CNSTFLDB+1
CNSPSINB EQU   CNSTFLDB+1
CNSRQRLB EQU   CNSTFLDB+1
CNSTRRLB EQU   CNSTFLDB
CNSDORLB EQU   CNSTFLDB
CNSRLINB EQU   CNSTFLDB
CNSQREQB EQU   CNSTFLDB
CNSXREQB EQU   CNSTFLDB
CNSAQINB EQU   CNSTFLDB
CNSAUTHB EQU   CNSTFLDB
CNSMRINB EQU   CNSTFLDB
CNSRSV01 EQU   CNSTFLDA+2
CNSLOG0A EQU   CNSTFLDA+2
CNSACCTA EQU   CNSTFLDA+2
CNSFREEA EQU   CNSTFLDA+2
CNSGETSA EQU   CNSTFLDA+2
CNSSEARA EQU   CNSTFLDA+2
CNSQUEUA EQU   CNSTFLDA+2
CNSACONA EQU   CNSTFLDA+2
CNSTCONA EQU   CNSTFLDA+1
CNSCLAQA EQU   CNSTFLDA+1
CNSCLINA EQU   CNSTFLDA+1
CNSGBINA EQU   CNSTFLDA+1
CNSLGINA EQU   CNSTFLDA+1
CNSACINA EQU   CNSTFLDA+1
CNSPSINA EQU   CNSTFLDA+1
CNSRQRLA EQU   CNSTFLDA+1
CNSTRRLA EQU   CNSTFLDA
CNSDORLA EQU   CNSTFLDA
CNSRLINA EQU   CNSTFLDA
CNSQREQA EQU   CNSTFLDA
CNSXREQA EQU   CNSTFLDA
CNSAQINA EQU   CNSTFLDA
CNSAUTHA EQU   CNSTFLDA
CNSMRINA EQU   CNSTFLDA
CNSTPFX  EQU   ISTCNSTA
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
@NM00115 EQU   GTNCSFLG
GTNCSAPP EQU   GTNCSFLG
NSRUNA6  EQU   NSRUNA5
RUBDATA  EQU   ISTRUB
RHRSVD5  EQU   RH3
RHRSVD4  EQU   RH3
RHLOG    EQU   RH3
RHRSVD3  EQU   RH3
RHRCDIR  EQU   RH3
RHCDIR   EQU   RH3
RHEB     EQU   RH3
RHBB     EQU   RH3
RHPACE   EQU   RH2
RHRSVD2  EQU   RH2
RHINOP   EQU   RHRSVD1
RHBUSY   EQU   RHRETRY
RHEXCEPT EQU   RH2
RHRRN    EQU   RH2
RHPE     EQU   RH2
RHFME    EQU   RH2
RHCHAIN  EQU   RH1
RHSENSE  EQU   RH1
RHFORMAT EQU   RH1
RHDIRI   EQU   RH1
RHSCI    EQU   RH1
RHTYPE   EQU   RH1
RHQS     EQU   RH1
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00108 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
LDNZS00F EQU   LDNZH003+1
LDNZS00E EQU   LDNZH003+1
LDNZS00D EQU   LDNZH003+1
LDNZS00C EQU   LDNZH003+1
LDNZS00B EQU   LDNZH003+1
LDNZS007 EQU   LDNZH003
LDNZS006 EQU   LDNZH003
LDNZS005 EQU   LDNZH003
LDNZS004 EQU   LDNZH003
LDNZS003 EQU   LDNZH003
LDNZS002 EQU   LDNZH003
LDNZS001 EQU   LDNZH003
LDNZS000 EQU   LDNZH003
LDNZX006 EQU   ISTLDNCB+576
LDNZC001 EQU   ISTLDNCB+569
LDNZX005 EQU   ISTLDNCB+568
LDNZV006 EQU   ISTLDNCB+564
LDNSRB   EQU   ISTLDNCB+520
LDNIOSB  EQU   ISTLDNCB+412
@NM00107 EQU   LDNZSAV3+28
LDNRSV06 EQU   LDNZSAV4+16
LDNZSAV6 EQU   LDNZSAV4+12
LDNZSAV5 EQU   LDNZSAV4
LDNZSAVE EQU   LDNZSAV3
LDNZSAV2 EQU   ISTLDNCB+368
LDNZSAV1 EQU   ISTLDNCB+352
LDNZ3RR  EQU   ISTLDNCB+348
LDNZ2RR  EQU   ISTLDNCB+344
LDNZ1RR  EQU   ISTLDNCB+340
LDNRSV0B EQU   ISTLDNCB+336
LDNRSV0A EQU   ISTLDNCB+332
LDNRSV09 EQU   ISTLDNCB+328
LDNRSV08 EQU   ISTLDNCB+324
LDNRSV07 EQU   ISTLDNCB+320
LDNDEAD  EQU   LDNDCDEB+12
LDNUCBAD EQU   LDNDCDEB+8
LDNAPPAD EQU   LDNDCDEB+5
LDNEXSCL EQU   LDNDCDEB+4
LDNDCBAD EQU   LDNDCDEB+1
LDNDEBID EQU   LDNDCDEB
LDNZRIND EQU   ISTLDNCB+300
LDNRPH   EQU   ISTLDNCB+192
LDNZTCP  EQU   ISTLDNCB+188
LDNZCHNC EQU   ISTLDNCB+187
LDNZLPC7 EQU   LDNZLPC
LDNZLPC6 EQU   LDNZLPC
LDNZLPC5 EQU   LDNZLPC
LDNZLPC4 EQU   LDNZLPC
LDNZLPC3 EQU   LDNZLPC
LDNZLPC2 EQU   LDNZLPC
LDNZLPC1 EQU   LDNZLPC
LDNZLPC0 EQU   LDNZLPC
LDNRSV05 EQU   LDNZERPF
LDNZCTOV EQU   LDNZEPIN
LDNZF001 EQU   LDNZEPIN
LDNZFRDW EQU   LDNZCPAN
LDNZFRD  EQU   LDNZCPAN
LDNZNARD EQU   LDNZCPAN
LDNRSV04 EQU   LDNZIOLK
LDNZATBF EQU   LDNZIOLK
LDNZERLK EQU   LDNZIOLK
LDNZDSIC EQU   LDNZIOLK
LDNZPAB1 EQU   ISTLDNCB+168
LDNZV005 EQU   ISTLDNCB+160
LDNZS1VR EQU   ISTLDNCB+136
LDNZS1RR EQU   ISTLDNCB+132
LDNZS1FC EQU   ISTLDNCB+128
LDNZS1BC EQU   ISTLDNCB+124
LDNZLOCK EQU   ISTLDNCB+120
LDNZFBUF EQU   ISTLDNCB+116
LDNZLAST EQU   ISTLDNCB+112
LDNRSV02 EQU   LDNFLAG2
LDNZFF04 EQU   LDNFLAG2
LDNZFF69 EQU   LDNFLAGS+2
LDNTPBIO EQU   LDNFLAGS+2
LDNZFF03 EQU   LDNFLAGS+2
LDNZFF02 EQU   LDNFLAGS+2
LDNZFF01 EQU   LDNFLAGS+2
LDNZFF00 EQU   LDNFLAGS+2
LDNZENTR EQU   LDNFLAGS+2
LDNZICCW EQU   LDNFLAGS+1
LDNZREC  EQU   LDNFLAGS+1
LDNZCTXT EQU   LDNFLAGS+1
LDNZATLK EQU   LDNFLAGS+1
LDNZCHNE EQU   LDNFLAGS+1
LDNZATTP EQU   LDNFLAGS+1
LDNZIOBY EQU   LDNFLAGS+1
LDNZF00A EQU   LDNFLAGS+1
LDNZF009 EQU   LDNFLAGS
LDNZF008 EQU   LDNFLAGS
LDNZF007 EQU   LDNFLAGS
LDNZF006 EQU   LDNFLAGS
LDNZF005 EQU   LDNFLAGS
LDNZF004 EQU   LDNFLAGS
LDNZF003 EQU   LDNFLAGS
LDNZF002 EQU   LDNFLAGS
LDNZHDCC EQU   ISTLDNCB+106
LDNZARM  EQU   ISTLDNCB+104
LDNZRM   EQU   ISTLDNCB+102
LDNZRB   EQU   ISTLDNCB+100
LDNCPQ   EQU   ISTLDNCB+96
LDNSIOQ  EQU   ISTLDNCB+92
LDNZX002 EQU   ISTLDNCB+91
LDNZX001 EQU   ISTLDNCB+90
LDNZH002 EQU   ISTLDNCB+88
LDNZV001 EQU   ISTLDNCB+84
LDNZACSW EQU   ISTLDNCB+76
LDNZC002 EQU   ISTLDNCB+68
LDNCSWSV EQU   ISTLDNCB+60
LDNCHFLD EQU   ISTLDNCB+56
LDNRESRV EQU   ISTLDNCB+55
@NM00106 EQU   LDNCFLAG
LDNRMF   EQU   LDNCFLAG
LDNIBI   EQU   LDNCFLAG
LDNTSAF  EQU   ISTLDNCB+52
LDNCUUA  EQU   ISTLDNCB+48
LDNCB    EQU   ISTLDNCB
ICNZCON6 EQU   ICNZCONS+10
ICNZCON5 EQU   ICNZCONS+8
ICNZCON4 EQU   ICNZCONS+6
ICNZCON3 EQU   ICNZCONS+4
ICNZCON2 EQU   ICNZCONS+2
ICNZCON1 EQU   ICNZCONS
ICNZATSA EQU   ISTICNCB+676
ICNZX012 EQU   ISTICNCB+675
ICNZX011 EQU   ISTICNCB+674
ICNZX010 EQU   ISTICNCB+672
ICNSRB   EQU   ISTICNCB+628
ICNIOSB  EQU   ISTICNCB+520
ICNZC001 EQU   ISTICNCB+512
ICNZX013 EQU   ISTICNCB+511
ICNZS010 EQU   ICNZH002+1
ICNZS00F EQU   ICNZH002+1
ICNZS00E EQU   ICNZH002+1
ICNZS00D EQU   ICNZH002+1
ICNZS00C EQU   ICNZH002+1
ICNZS00B EQU   ICNZH002+1
ICNZS01A EQU   ICNZS00A
ICNZS019 EQU   ICNZS009
ICNZS018 EQU   ICNZS008
ICNZS017 EQU   ICNZS007
ICNZS016 EQU   ICNZS006
ICNZS005 EQU   ICNZH002
ICNZS014 EQU   ICNZS004
ICNZS013 EQU   ICNZS003
ICNZS012 EQU   ICNZS002
ICNZS001 EQU   ICNZH002
ICNZF028 EQU   ICNZFLAG
ICNZF027 EQU   ICNZFLAG
ICNZF026 EQU   ICNZFLAG
ICNZF025 EQU   ICNZFLAG
ICNZF024 EQU   ICNZFLAG
ICNZF023 EQU   ICNZFLAG
ICNZF022 EQU   ICNZFLAG
ICNZF021 EQU   ICNZFLAG
ICNWORD5 EQU   ISTICNCB+504
ICNMSIZE EQU   ISTICNCB+500
ICNLCVTA EQU   ISTICNCB+496
ICNDEBAD EQU   ICNDIDEB+1
ICNDCBIF EQU   ICNDIDEB
ICNUCBAD EQU   ICNDCDEB+8
ICNAPPAD EQU   ICNDCDEB+5
ICNEXSCL EQU   ICNDCDEB+4
ICNDCBAD EQU   ICNDCDEB+1
ICNDEBID EQU   ICNDCDEB
@NM00105 EQU   ISTICNCB+477
ICNERCNT EQU   ISTICNCB+476
ICNZX002 EQU   ISTICNCB+475
ICNZX001 EQU   ISTICNCB+474
ICNZH001 EQU   ISTICNCB+472
ICNZSW3R EQU   ISTICNCB+468
ICNZSW2R EQU   ISTICNCB+464
ICNZSW1R EQU   ISTICNCB+460
ICNZS4VR EQU   ISTICNCB+436
ICNZS4RR EQU   ISTICNCB+432
ICNZS4FC EQU   ISTICNCB+428
ICNZS4BC EQU   ISTICNCB+424
ICNZS3VR EQU   ISTICNCB+400
ICNZS3RR EQU   ISTICNCB+396
ICNZS3FC EQU   ISTICNCB+392
ICNZS3BC EQU   ISTICNCB+388
ICNZS1RC EQU   ICNZS1VR+36
ICNDIEW3 EQU   ICNDIEWA+8
ICNDIEW2 EQU   ICNDIEWA+4
ICNDIEW1 EQU   ICNDIEWA
ICNZS1RR EQU   ISTICNCB+344
ICNZS1FC EQU   ISTICNCB+340
ICNZS1BC EQU   ISTICNCB+336
ICNRSTIC EQU   ICNZD004
ICNRDCOD EQU   ICNRSCCW
ICNZD006 EQU   ISTICNCB+312
ICNZD005 EQU   ISTICNCB+304
ICNWSTIC EQU   ICNZD002
ICNWRCOD EQU   ICNWSCCW
ICNZV008 EQU   ISTICNCB+284
ICNZV007 EQU   ISTICNCB+280
ICNZV006 EQU   ISTICNCB+276
ICNZV005 EQU   ISTICNCB+272
ICNZV004 EQU   ISTICNCB+268
ICNLSTIT EQU   ISTICNCB+264
ICNLSTIF EQU   ISTICNCB+260
ICNZV002 EQU   ISTICNCB+256
ICNZV001 EQU   ISTICNCB+252
ICNZV00A EQU   ISTICNCB+249
ICNBUFF  EQU   ISTICNCB+248
ICNCPQ   EQU   ISTICNCB+244
ICNNICNA EQU   ISTICNCB+240
@NM00104 EQU   ICNFLAG2+2
ICNZF019 EQU   ICNFLAG2+2
ICNZF018 EQU   ICNFLAG2+2
ICNZF017 EQU   ICNFLAG2+2
ICNZF016 EQU   ICNFLAG2+2
ICNZF015 EQU   ICNFLAG2+2
ICNMSG   EQU   ICNFLAG2+1
ICNCLOSE EQU   ICNFLAG2+1
ICNZF014 EQU   ICNFLAG2+1
ICNZF013 EQU   ICNFLAG2+1
ICNZF012 EQU   ICNFLAG2+1
ICNZF011 EQU   ICNFLAG2+1
ICNZF00D EQU   ICNFLAG2+1
ICNZF00B EQU   ICNFLAG2+1
ICNZF00A EQU   ICNFLAG2
ICNZF008 EQU   ICNFLAG2
ICNZF007 EQU   ICNFLAG2
ICNZF005 EQU   ICNFLAG2
ICNZF004 EQU   ICNFLAG2
ICNZF003 EQU   ICNFLAG2
ICNZF002 EQU   ICNFLAG2
ICNZF001 EQU   ICNFLAG2
ICNLOCK  EQU   ISTICNCB+232
ICNLICNA EQU   ISTICNCB+228
ICNRPH   EQU   ISTICNCB+120
ICNZV003 EQU   ISTICNCB+116
ICNLAST  EQU   ISTICNCB+112
ICNLSTBT EQU   ISTICNCB+108
ICNSIOQ  EQU   ISTICNCB+104
ICNFLAG1 EQU   ISTICNCB+103
ICNZSW08 EQU   ICNZSWS
ICNZSW07 EQU   ICNZSWS
ICNZSW06 EQU   ICNZSWS
ICNZSW05 EQU   ICNZSWS
ICNZSW04 EQU   ICNZSWS
ICNZSW03 EQU   ICNZSWS
ICNZSW02 EQU   ICNZSWS
ICNZSW01 EQU   ICNZSWS
ICNZFF69 EQU   ICNFFLAG
@NM00103 EQU   ICNFFLAG
ICNZFF05 EQU   ICNFFLAG
ICNZFF04 EQU   ICNFFLAG
ICNZFF03 EQU   ICNFFLAG
ICNZFF02 EQU   ICNFFLAG
ICNZFF01 EQU   ICNFFLAG
ICNZFF00 EQU   ICNFFLAG
@NM00102 EQU   ICNFLAG
ICNZCRIT EQU   ICNFLAG
ICNSTART EQU   ICNFLAG
ICNSLOW  EQU   ICNFLAG
ICNZF010 EQU   ICNFLAG
ICNZF00F EQU   ICNFLAG
ICNZF00E EQU   ICNFLAG
ICNCONF  EQU   ICNZF006
ICNCKPAB EQU   ICNCKFLD+1
ICNRSV07 EQU   ICNCKFLD
ICNCKBIT EQU   ICNCKFLD
ICNZPAB4 EQU   ISTICNCB+80
ICNZPAB1 EQU   ISTICNCB+64
ICNRSV01 EQU   ISTICNCB+60
@NM00101 EQU   ISTICNCB+56
@NM00100 EQU   ISTICNCB+54
@NM00099 EQU   @NM00098
ICNRRY   EQU   @NM00098
ICNLCLUS EQU   @NM00098
ICNROLN  EQU   @NM00098
ICNRNRY  EQU   @NM00098
ICNLNKMD EQU   ISTICNCB+52
ICNCUUA  EQU   ISTICNCB+48
ICNCB    EQU   ISTICNCB
NCBRSV01 EQU   ISTNCB+46
NCBSWDAF EQU   ISTNCB+44
NCBDEVCH EQU   ISTNCB+36
NCBFMCBP EQU   ISTNCB+32
NCBLTRC  EQU   ISTNCB+30
NCBRVPT1 EQU   ISTNCB+28
NCBNMLLN EQU   NCBFLAGS+3
@NM00097 EQU   NCBFLAG1
NCBFORCE EQU   NCBFLAG1
NCBTTF   EQU   NCBFLAG1
NCBRSYNC EQU   NCBFLAG1
NCBRSTRT EQU   NCBFLAG1
NCBCONF  EQU   NCBFLAG1
NCBSNAI  EQU   NCBFLAG1
NCBFLTIO EQU   NCBFTRIO
NCBCSTAT EQU   NCBFLAGS
NCBNCSL  EQU   ISTNCB+22
NCBNCBA  EQU   ISTNCB+20
NCBNSNA  EQU   ISTNCB+12
NCBTSKID EQU   ISTNCB+8
NCBRDTE  EQU   ISTNCB+4
NCBDAF   EQU   ISTNCB+2
NCBLNGTH EQU   ISTNCB+1
NCBTYPE  EQU   ISTNCB
CONUESBF EQU   ISTCONFT+1362
CONSTVAR EQU   CONSTAID+1
CONSTFIL EQU   CONSTAID
CONBLKNO EQU   CONSCPID+2
CONFILL  EQU   CONSCPID+1
CONFCNL  EQU   CONSCPID
CONF01SV EQU   ISTCONFT+1352
CONSDMLC EQU   ISTCONFT+1348
CONSDECB EQU   ISTCONFT+1344
CONUNITS EQU   ISTCONFT+1342
CONRVPT1 EQU   ISTCONFT+1341
CONGLBBH EQU   ISTCONFT+1340
CONRSV24 EQU   ISTCONFT+1312
CONFTTAT EQU   ISTCONFT+1284
CONFXXAT EQU   ISTCONFT+1256
CONFLDAT EQU   ISTCONFT+1228
CONFTRAT EQU   ISTCONFT+1200
CONFNSAT EQU   ISTCONFT+1172
CONCSCB  EQU   ISTCONFT+1168
CONRSV50 EQU   ISTCONFT+1166
CONLIST  EQU   ISTCONFT+1164
CONSTAFP EQU   ISTCONFT+1160
CONECDET EQU   ISTCONFT+1156
CONRECON EQU   ISTCONFT+1036
CONNTSOL EQU   ISTCONFT+916
CONTRACE EQU   ISTCONFT+796
CONTOLTP EQU   ISTCONFT+676
CONVVTAM EQU   ISTCONFT+556
CONVTHDR EQU   ISTCONFT+420
CONRSV01 EQU   ISTCONFT+417
CONNSNEC EQU   CONFLG01
CONFTPSA EQU   CONFLG01
CONFTTA  EQU   CONFLG01
CONFTNSA EQU   CONFLG01
CONFTNAC EQU   CONFLG01
CONFTEXS EQU   CONFLG01
CONFTTMR EQU   CONFLG01
CONFTSTM EQU   CONFLG01
CONCRPLD EQU   ISTCONFT+404
CONPPDBF EQU   ISTCONFT+392
CONNPDBF EQU   ISTCONFT+380
CONAPDBF EQU   ISTCONFT+368
CONWPDBF EQU   ISTCONFT+356
CONIODBF EQU   ISTCONFT+344
CONUEDBF EQU   ISTCONFT+332
CONVPDBF EQU   ISTCONFT+320
CONVFDBF EQU   ISTCONFT+308
CONLPDBF EQU   ISTCONFT+296
CONLFDBF EQU   ISTCONFT+284
CONSPDBF EQU   ISTCONFT+272
CONSFDBF EQU   ISTCONFT+260
CONCRPLS EQU   ISTCONFT+248
CONPPSBF EQU   ISTCONFT+236
CONNPSBF EQU   ISTCONFT+224
CONAPSBF EQU   ISTCONFT+212
CONWPSBF EQU   ISTCONFT+200
CONIOSBF EQU   ISTCONFT+188
CONVPSBF EQU   ISTCONFT+176
CONVFSBF EQU   ISTCONFT+164
CONLPSBF EQU   ISTCONFT+152
CONLFSBF EQU   ISTCONFT+140
CONSPSBF EQU   ISTCONFT+128
CONSFSBF EQU   ISTCONFT+116
CONRSV17 EQU   ISTCONFT+115
CONCRPL  EQU   CONBUFF+1
CONPPEX  EQU   CONBUFF+1
CONNPEX  EQU   CONBUFF+1
CONAPEX  EQU   CONBUFF+1
CONWPEX  EQU   CONBUFF+1
CONIOEX  EQU   CONBUFF
CONUECB  EQU   CONBUFF
CONVPEX  EQU   CONBUFF
CONVFEX  EQU   CONBUFF
CONLPEX  EQU   CONBUFF
CONLFEX  EQU   CONBUFF
CONSPEX  EQU   CONBUFF
CONSFEX  EQU   CONBUFF
CONACTV  EQU   CONSTAT
CONVRYIN EQU   CONSTAT
CONLODED EQU   CONSTAT
CONDSOPN EQU   CONSTAT
CONSTOR  EQU   CONSTAT
@NM00096 EQU   CONSTAT
@NM00095 EQU   CONSTAT
@NM00094 EQU   CONSTAT
CONIOTR  EQU   CONOPTFL
CONMODTR EQU   CONOPTFL
CONBTUTR EQU   CONOPTFL
CONBUFTR EQU   CONOPTFL
@NM00093 EQU   CONOPTFL
@NM00092 EQU   CONOPTFL
@NM00091 EQU   CONOPTFL
CONWRMST EQU   CONOPTFL
CONSYLST EQU   CONDSFLG
CONSYLIB EQU   CONDSFLG
CONSYOBJ EQU   CONDSFLG
@NM00090 EQU   CONDSFLG
@NM00089 EQU   CONDSFLG
@NM00088 EQU   CONDSFLG
CONMODFY EQU   ISTCONFT+109
CONDISPL EQU   ISTCONFT+108
CONVARY  EQU   ISTCONFT+107
CONHLTS  EQU   CONHALT
CONHLTQ  EQU   CONHALT
CONLAST  EQU   ISTCONFT+105
CONRES2  EQU   ISTCONFT+104
CONCID   EQU   ISTCONFT+102
CONBUFSZ EQU   ISTCONFT+100
CONRSV02 EQU   ISTCONFT+96
CONDCBBA EQU   ISTCONFT+92
CONDCBLA EQU   ISTCONFT+88
CONDCBOA EQU   ISTCONFT+84
CONLDPRM EQU   ISTCONFT+80
CONRDBUF EQU   ISTCONFT+76
CONSTCIB EQU   ISTCONFT+72
CONENDLA EQU   ISTCONFT+68
CONVARLA EQU   ISTCONFT+64
CONMODLA EQU   ISTCONFT+60
CONHLTLA EQU   ISTCONFT+56
CONNCSLA EQU   ISTCONFT+52
CONDISLA EQU   ISTCONFT+48
CONCIBAD EQU   ISTCONFT+44
CONACB   EQU   ISTCONFT+40
CONFBPNM EQU   ISTCONFT+32
CONDMNM  EQU   ISTCONFT+24
CONAPSNM EQU   ISTCONFT+16
CONAPINM EQU   ISTCONFT+8
CONCONFG EQU   ISTCONFT
LDPTCEP  EQU   ISTLDPRM+24
LDPRSV02 EQU   ISTLDPRM+22
LDPRSV01 EQU   LDPFB2
LDPACTIF EQU   LDPFB2
LDPATACH EQU   LDPFB2
LDPFLAST EQU   LDPFB2
LDPRSV03 EQU   LDPFG
LDPPB    EQU   LDPFG
LDPFX    EQU   LDPFG
LDPDCBA  EQU   ISTLDPRM+16
LDPPDS   EQU   ISTLDPRM+8
LDPMBR   EQU   ISTLDPRM
NIBRESV  EQU   ISTNIB+60
NIBNDAR  EQU   ISTNIB+56
NIBLMODE EQU   ISTNIB+48
NIBEXLST EQU   ISTNIB+44
NIBLIMIT EQU   ISTNIB+42
@NM00087 EQU   ISTNIB+41
@NM00086 EQU   NIBFLG1
@NM00085 EQU   NIBFLG1
@NM00084 EQU   NIBFLG1
@NM00083 EQU   NIBFLG1
NIBSHLTP EQU   NIBFLG1
NIBSDAPP EQU   NIBFLG1
NIBCON   EQU   NIBFLG1
NIBLAST  EQU   NIBFLG1
NIBPROCD EQU   ISTNIB+36
NIBDEVCH EQU   ISTNIB+28
NIBMODE  EQU   ISTNIB+20
NIBSYM   EQU   ISTNIB+12
NIBUSER  EQU   ISTNIB+8
NIBCID   EQU   ISTNIB+4
NIBLEN   EQU   ISTNIB+3
NIBCONDN EQU   ISTNIB+2
NIBRSV01 EQU   ISTNIB+1
NIBID    EQU   ISTNIB
CSPUNUSD EQU   CSPRSC2B+4
CSPUECBA EQU   CSPRSC2B
CSPTRDTE EQU   ISTCSP+28
CSPRLRPH EQU   ISTCSP+24
CSPNO    EQU   ISTCSP+22
CSPCC    EQU   ISTCSP+20
CSPDATA  EQU   ISTCSP+16
CSPRSCE  EQU   ISTCSP+12
CSPDEST  EQU   ISTCSP+8
CSPSRC   EQU   ISTCSP+4
@NM00082 EQU   CSPOPT2
CSPRSC2F EQU   CSPOPT2
CSPWASQD EQU   CSPOPT2
CSPACQS  EQU   CSPOPT2
CSPACES  EQU   CSPOPT2
CSPNOREL EQU   CSPOPT2
CSPCOREQ EQU   CSPOPT2
CSPSTAP  EQU   CSPOPT2
@NM00081 EQU   CSPOPT1
CSPANY   EQU   CSPOPT1
CSPACT   EQU   CSPOPT1
CSPSESS  EQU   CSPOPT1
CSPPND   EQU   CSPOPT1
CSPLOGI  EQU   CSPOPT1
CSPQ     EQU   CSPOPT1
CSPRSC   EQU   CSPOPT1
CSPIDX   EQU   ISTCSP
QABBCKDS EQU   ISTQAB+22
QABFWDDS EQU   ISTQAB+20
QABPTYDS EQU   ISTQAB+18
@NM00080 EQU   QABATTR2
@NM00079 EQU   QABATTR2
@NM00078 EQU   QABATTR2
@NM00077 EQU   QABATTR2
QABFIFO  EQU   QABATTR2
QABLIFO  EQU   QABATTR2
QABPRTY  EQU   QABATTR2
@NM00076 EQU   QABATTR2
QABATTR1 EQU   QABATTR
QABLAST  EQU   ISTQAB+12
QABFIRST EQU   ISTQAB+8
@NM00075 EQU   ISTQAB+6
QABCT    EQU   ISTQAB+4
QABID    EQU   ISTQAB
FMCFLRSV EQU   FMCFLGB
FMCFLGA8 EQU   FMCFLGB
FMCCLRPH EQU   FMCVS1+45
FMCRSV0X EQU   FMCCVFLG
FMCVYRPH EQU   FMCCVFLG
FMCZV004 EQU   FMCVS1+40
FMCLOCK2 EQU   FMCVS1+36
@NM00074 EQU   FMCZFLG2
FMCZF027 EQU   FMCZFLG2
FMCZF026 EQU   FMCZFLG2
FMCSEQ1B EQU   FMCSEQ1
FMCSEQ1T EQU   FMCSEQ1
FMCZX006 EQU   FMCVS1+33
FMCZX005 EQU   FMCVS1+32
FMCZX004 EQU   FMCVS1+31
FMCZX003 EQU   FMCVS1+30
FMCZX002 EQU   FMCVS1+29
FMCZX001 EQU   FMCVS1+28
FMCZV001 EQU   FMCVS1+24
FMCAWATQ EQU   FMCLCPAQ+1
@NM00073 EQU   FMCLCPAQ
FMCLCPB2 EQU   FMCLCPBQ+1
FMCLCPB1 EQU   FMCLCPBQ
FMCASCDQ EQU   FMCSHEAQ+1
@NM00072 EQU   FMCSHEAQ
FMCSHEDQ EQU   FMCVS1+8
FMCZFCSQ EQU   FMCVS1+6
FMCZH001 EQU   FMCVS1+4
FMCZF025 EQU   FMCZFLAG+3
FMCZF024 EQU   FMCZFLAG+3
FMCZF023 EQU   FMCZFLAG+3
FMCZF022 EQU   FMCZFLAG+3
FMCZF021 EQU   FMCZFLAG+3
FMCZF020 EQU   FMCZFLAG+3
FMCZF019 EQU   FMCZFLAG+3
FMCZF018 EQU   FMCZFLAG+3
FMCZF017 EQU   FMCZFLAG+2
FMCZF016 EQU   FMCZFLAG+2
FMCZF015 EQU   FMCZFLAG+2
FMCZF014 EQU   FMCZFLAG+2
FMCZF013 EQU   FMCZFLAG+2
FMCZF012 EQU   FMCZFLAG+2
FMCZF011 EQU   FMCZFLAG+2
FMCZF010 EQU   FMCZFLAG+2
FMCZF00F EQU   FMCZFLAG+1
FMCZF00E EQU   FMCZFLAG+1
FMCZF00D EQU   FMCZFLAG+1
FMCZF00C EQU   FMCZFLAG+1
FMCZF00B EQU   FMCZFLAG+1
FMCRSV10 EQU   FMCZFLAG+1
FMCZF009 EQU   FMCZFLAG+1
FMCZFD06 EQU   FMCZF006+1
FMCZFC06 EQU   FMCZF006
FMCZFB06 EQU   FMCZF006
FMCZFA06 EQU   FMCZF006
FMCZF005 EQU   FMCZFLAG
FMCZF004 EQU   FMCZFLAG
FMCZF003 EQU   FMCZFLAG
FMCZF002 EQU   FMCZFLAG
FMCZF001 EQU   FMCZFLAG
FMCFRESA EQU   ISTFMCB+228
FMCSCSQN EQU   FMCSNCTL+2
FMCSCCTL EQU   FMCSNCTL+1
FMCSTCTL EQU   FMCSCFLG
FMCSCCLO EQU   FMCSCFLG
FMCAPRO  EQU   FMCSCFLG
FMCLURO  EQU   FMCSCFLG
FMCOBSAC EQU   FMCSCFLG
FMCIBSAC EQU   FMCSCFLG
FMCFBRE  EQU   ISTFMCB+220
FMCFBXM  EQU   FMCZV002
FMCASEGQ EQU   ISTFMCB+212
FMCRDTPT EQU   ISTFMCB+208
FMCLOCK  EQU   ISTFMCB+204
FMCSEGD  EQU   FMCSSEGQ
FMCRSPLM EQU   ISTFMCB+198
FMCPSTRS EQU   ISTFMCB+196
@NM00071 EQU   FMCRRESP
FMCTSLHA EQU   FMCRRESP
FMCFRRN  EQU   FMCRRESP
FMCFME   EQU   FMCRRESP
FMCFEX   EQU   FMCRRESP
FMCFPE   EQU   FMCRRESP
FMCCTLB  EQU   ISTFMCB+194
FMCBSQNO EQU   FMCCLSEQ+2
FMCTSQNO EQU   FMCCLSEQ
FMCOBPRG EQU   FMCMODEB
FMCIBPRG EQU   FMCMODEB
FMCRESOT EQU   FMCMODEB
FMCRSTSR EQU   FMCMODEB
FMCLUQ   EQU   FMCMODEB
FMCAPQ   EQU   FMCMODEB
FMCCLEAR EQU   FMCMODEB
FMCHOLD  EQU   FMCMODEB
FMCIPSEQ EQU   ISTFMCB+188
FMCLUSTR EQU   ISTFMCB+187
FMCRSV87 EQU   FMCSTAT2
FMCSEQI  EQU   FMCSTAT2
FMCCPIP  EQU   FMCSTAT2
FMCALIPR EQU   FMCSTAT2
FMCIAIO  EQU   FMCSTAT2
FMCZF00A EQU   FMCSTAT2
FMCVPIP  EQU   FMCSTAT2
FMCBHSET EQU   ISTFMCB+185
FMCPRMRC EQU   FMCCLEXT+20
FMCRSV89 EQU   FMCPSTAT
FMCPCLSD EQU   FMCPSTAT
FMCDDOCD EQU   FMCPSTAT
FMCIDVFD EQU   FMCPSTAT
FMCELKST EQU   FMCPSTAT
FMCRSV88 EQU   FMCPSCMD
FMCRDBLK EQU   FMCPSCMD
FMCDSEOC EQU   FMCPSCMD
FMCPURGE EQU   FMCPSCMD
FMCRESTI EQU   FMCPSCMD
FMCCNTCT EQU   FMCPSCMD
FMCINVT  EQU   FMCPSCMD
FMCFLGB7 EQU   FMCFLGCL
FMCFLGB6 EQU   FMCFLGCL
FMCFLGB5 EQU   FMCFLGCL
FMCFLGB4 EQU   FMCFLGCL
FMCFLGB3 EQU   FMCFLGCL
FMCFLGB2 EQU   FMCFLGCL
FMCFLGB1 EQU   FMCFLGCL
FMCFLGB0 EQU   FMCFLGCL
FMCFLGA7 EQU   FMCFLGA
FMCFLGA6 EQU   FMCFLGA
FMCFLGA5 EQU   FMCFLGA
FMCFLGA4 EQU   FMCFLGA
FMCFLGA3 EQU   FMCFLGA
FMCFLGA2 EQU   FMCFLGA
FMCFLGA1 EQU   FMCFLGA
FMCFLGA0 EQU   FMCFLGA
FMCDCLOK EQU   FMCCLEXT+12
FMCRAFM  EQU   FMCCLEXT+8
FMCFBPTR EQU   FMCFBA+1
FMCFBRSV EQU   FMCFBA
FMCRPLPT EQU   FMCRPLA+1
FMCRPLRS EQU   FMCRPLA
FMCPRCLS EQU   FMCCVAL
FMCIBCE  EQU   FMCCVAL
FMCONLY  EQU   FMCOBCE
FMCLAST  EQU   FMCOBCE
FMCMIDLE EQU   FMCOBCE
FMCFIRST EQU   FMCOBCE
FMCCPCNT EQU   FMCPACPC
FMCMPCNT EQU   FMCPACEM
FMCNPCNT EQU   FMCPACEN
FMCCONF  EQU   FMCSSTAT
FMCPURCH EQU   FMCSSTAT
FMCNSALU EQU   FMCSSTAT
FMCBIP   EQU   FMCSSTAT
FMCSDTR  EQU   FMCSSTAT
FMCUIPI  EQU   FMCSSTAT
FMCCIPI  EQU   FMCSSTAT
FMCSNBI  EQU   FMCSSTAT
FMCRVD01 EQU   ISTFMCB+158
FMCISSN  EQU   ISTFMCB+156
FMCOASN  EQU   FMCNXOSC
FMCOSSN  EQU   FMCNXCFM
FMCSIP   EQU   FMCSIPA
FMCEXLST EQU   ISTFMCB+144
FMCPAB5  EQU   ISTFMCB+128
FMCPAB4  EQU   ISTFMCB+112
FMCPAB3  EQU   ISTFMCB+96
FMCPAB2  EQU   ISTFMCB+80
FMCPAB1  EQU   ISTFMCB+64
FMCFASYA EQU   ISTFMCB+60
FMCMODE  EQU   ISTFMCB+52
FMCPROCD EQU   ISTFMCB+48
FMCVWT   EQU   ISTFMCB+44
FMCRPLH  EQU   ISTFMCB+40
FMCBUFNB EQU   FMCCMPS1+2
FMCBUFLM EQU   FMCCMPS1
FMCDEBA  EQU   ISTFMCB+32
@NM00070 EQU   FMCCMDFL
FMCSNA   EQU   FMCCMDFL
FMCVSNA  EQU   FMCCMDFL
FMCCMDR  EQU   FMCCMDFL
@NM00069 EQU   ISTFMCB+30
@NM00068 EQU   FMCSTAT1
FMCLTCLS EQU   FMCSTAT1
FMCHPURG EQU   FMCSTAT1
FMCVSP2  EQU   FMCSTAT1
FMCVSP1  EQU   FMCSTAT
FMCLTEAS EQU   FMCSTAT
FMCZF007 EQU   FMCSTAT
FMCDEDSC EQU   FMCSTAT
FMCDEVOF EQU   FMCSTAT
FMCDAPT  EQU   FMCSTAT
FMCPRMTE EQU   FMCSTAT
FMCPRMTR EQU   FMCSTAT
FMCUSFLD EQU   ISTFMCB+24
FMCDNCBA EQU   ISTFMCB+16
FMCDVTA  EQU   ISTFMCB+12
FMCTSKID EQU   ISTFMCB+8
FMCNXTCB EQU   ISTFMCB+4
FMCSAF   EQU   ISTFMCB+2
FMCLNGTH EQU   ISTFMCB+1
FMCTYPE  EQU   ISTFMCB
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PROMONT3 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
NCSRUITS EQU   NCSUSSRU+2
NCSRULEN EQU   NCSUSSRU
NCSAPPAB EQU   NCSAPP+608
NCSAPDAT EQU   NCSAPBUE+8
NCSAPRU  EQU   NCSAPBUE+3
NCSRSV04 EQU   NCSAPBUE
NCSAPEND EQU   NCSAPP+84
NCSAPTXT EQU   NCSAPP+76
NCSAPECB EQU   NCSAPP+72
NCSAPSA  EQU   NCSAPP
NCSPLPDB EQU   NCSPLSID+5
NCSPLNID EQU   NCSPLPHD
NCSPLPO  EQU   NCSPLSTA
NCSRSVD4 EQU   NCSPLSTA
NCSRSVD2 EQU   NCSCRMOD
NCSRSVD1 EQU   NCSCHKPT+1
NCSPTUSE EQU   NCSCHKPT+1
NCSRNME  EQU   NCSCHKPT+1
NCSCUA   EQU   NCSCHKPT+1
NCSLGMOD EQU   NCSCHKPT
NCSLGAPL EQU   NCSCHKPT
NCSDTRLM EQU   NCSCHKPT
NCSESLM  EQU   NCSCHKPT
NCSNRPL  EQU   NCSCHKPT
NCSPOLD  EQU   NCSCHKPT
NCSPLRTY EQU   ISTNCSPL+263
NCSPLRH  EQU   ISTNCSPL+260
NCSUFMCB EQU   ISTNCSPL+256
NCSMGLPT EQU   ISTNCSPL+252
NCSCPWPT EQU   ISTNCSPL+248
NCSSENS2 EQU   NCSSENSE+2
NCSSNS2  EQU   NCSSENSE+1
NCSSNS1  EQU   NCSSENSE
NCSPLNSN EQU   ISTNCSPL+240
NCSPLMID EQU   ISTNCSPL+232
NCSPLPID EQU   ISTNCSPL+231
NCSPLGID EQU   ISTNCSPL+230
NCSPLSQN EQU   ISTNCSPL+228
NCSRNAME EQU   ISTNCSPL+220
NCSPLRRP EQU   ISTNCSPL+204
NCSPLWEL EQU   ISTNCSPL+200
NCSPLP3  EQU   ISTNCSPL+192
NCSPLP2  EQU   ISTNCSPL+188
@NM00067 EQU   NCSPLFL5
NCSFORCE EQU   NCSPLFL5
NCSSCPPS EQU   NCSPLFL5
NCSDLRSN EQU   ISTNCSPL+180
NCSPL2AP EQU   NCSPLFL4
NCSDSPN  EQU   NCSPLFL4
NCSDSPI  EQU   NCSPLFL4
NCSDSPA  EQU   NCSPLFL4
NCSDSPE  EQU   NCSPLFL4
NCSDLNID EQU   NCSPLFL4
NCSEND   EQU   NCSPLFL3
NCSANS   EQU   NCSPLFL3
NCSPID   EQU   NCSPLFL3
NCSGID   EQU   NCSPLFL3
NCSEPP   EQU   NCSPLFL3
NCSPLMOM EQU   NCSPLFL3
NCSPLDS  EQU   NCSPLFL2
NCSPLRIO EQU   NCSPLFL2
NCSPLRSF EQU   NCSPLFL2
NCSPLVDP EQU   NCSPLFL2
NCSPLPOS EQU   NCSPLFL1
NCSPL2CN EQU   NCSPLFL1
NCSPLAPU EQU   NCSPLFL1
NCSPLREQ EQU   NCSPLFL1
NCSPLRCR EQU   ISTNCSPL+172
NCSPLECB EQU   ISTNCSPL+164
NCSPLRCD EQU   NCSPLRAD+1
NCSLSCMD EQU   NCSPLRAD
NCSPLWRF EQU   ISTNCSPL+72
NCSPLWRE EQU   ISTNCSPL+68
NCSSTCMD EQU   NCSCRFLG
NCSUSRNF EQU   NCSCRFLG
NCSOPRQU EQU   NCSCRFLG
NCSCRDSE EQU   NCSCRFLG
NCSFMERP EQU   NCSCRFLG
NCSFMCLD EQU   NCSCRFLG
NCSPLCLD EQU   NCSCRFLG
NCSPLWRM EQU   NCSCRFLG
NCSPLUAD EQU   ISTNCSPL+64
NCSMSGSP EQU   ISTNCSPL+63
NCSNCPEP EQU   ISTNCSPL+62
NCSCMDB  EQU   NCSPLCMD+1
@NM00066 EQU   NCSCMDA
NCSPLUFM EQU   NCSCMDA
NCSPLFLO EQU   NCSCMDA
NCSPLSYN EQU   NCSCMDA
NCSPLCTL EQU   NCSCMDA
NCSPLSYS EQU   NCSCMDA
NCSPLLPT EQU   ISTNCSPL+56
NCSCRPID EQU   ISTNCSPL+51
NCSDLID  EQU   ISTNCSPL+44
NCSPLLID EQU   ISTNCSPL+36
NCSRRNPT EQU   ISTNCSPL+24
NCSRSV02 EQU   NCSPLVFL
NCSDACLK EQU   NCSPLVFL
NCSABCON EQU   NCSPLVFL
NCSDCONT EQU   NCSPLVFL
NCSVSTAT EQU   NCSPLVFL
NCSVNCSA EQU   NCSPLVFL
NCSVBF15 EQU   NCSPLVBF+1
NCSVBF14 EQU   NCSPLVBF+1
NCSVBF13 EQU   NCSPLVBF+1
NCSVBF10 EQU   NCSPLVBF+1
NCSVBF09 EQU   NCSPLVBF+1
NCSVBF08 EQU   NCSPLVBF
NCSVBF07 EQU   NCSPLVBF
NCSVBF06 EQU   NCSPLVBF
NCSVBF05 EQU   NCSPLVBF
NCSVBF04 EQU   NCSPLVBF
NCSVBF03 EQU   NCSPLVBF
NCSVBF02 EQU   NCSPLVBF
NCSVBF01 EQU   NCSPLVBF
@NM00065 EQU   ISTNCSPL+16
NCSCRWKA EQU   NCSPFX+12
@NM00064 EQU   NCSPFX
POHID    EQU   ISTPOHD+2
POHGEN   EQU   POHSTAT
POHRREQ  EQU   POHSTAT
POHRSVD2 EQU   POHSTAT
POHCNTRL EQU   POHSTAT
POHLBL   EQU   POHSTAT
POHDATA  EQU   POHSTAT
POHEND   EQU   POHSTAT
POHRSVD1 EQU   ISTPOHD
ACDREFQ  EQU   ISTACDEB+204
ACDASFQ  EQU   ISTACDEB+200
ACDSOP   EQU   ISTACDEB+184
ACDSIP   EQU   ISTACDEB+168
ACDRSV24 EQU   ACDVTAM+108
ACDRSV23 EQU   ACDVTAM+104
ACDRSV22 EQU   ACDVTAM+100
ACDOCWAD EQU   ACDVTAM+96
ACDRSV10 EQU   ACDVTAM+92
ACDAPDDT EQU   ACDAPDAT+1
ACDAPDLN EQU   ACDAPDAT
ACDRSV07 EQU   ACDVTAM+82
ACDRSV06 EQU   ACDVTAM+81
@NM00062 EQU   ACDSSFLG
ACDTSO   EQU   ACDSSFLG
ACDTPEND EQU   ACDSSFLG
ACDAICLS EQU   ACDSSFLG
ACDABEND EQU   ACDSSFLG
ACDCACB  EQU   ACDSSFLG
ACDRSV21 EQU   ACDVTAM+64
ACDSSPAB EQU   ACDVTAM+48
ACDNEPAB EQU   ACDVTAM+32
ACDRSV20 EQU   ACDVTAM+20
ACDRARQ  EQU   ACDVTAM+16
ACDRAFQ  EQU   ACDVTAM+12
ACDFMCB  EQU   ACDVTAM+8
ACDRDTE  EQU   ACDVTAM+4
ACDLOCK  EQU   ACDVTAM
ACDAPP   EQU   ACDAPPAD+1
ACDEXSCL EQU   ACDAPPAD
ACDACB   EQU   ACDACBAD+1
ACDDEBID EQU   ACDACBAD
ACDPROTG EQU   ACDACBAD
ACDECBAD EQU   ACDBASIC+20
ACDUSRPB EQU   ACDUSRPG+1
ACDNMEXT EQU   ACDUSRPG
ACDPRLEN EQU   ACDBASIC+15
ACDFLGS1 EQU   ACDBASIC+14
ACDQSCNT EQU   ACDBASIC+13
ACDOPATB EQU   ACDBASIC+12
ACDIRBAD EQU   ACDBASIC+8
ACDDEB   EQU   ACDDEBAD+1
ACDAMLNG EQU   ACDDEBAD
ACDTCB   EQU   ACDTCBAD+1
ACDOPNAD EQU   ACDNMSUB
ACDRSV03 EQU   ACDTBLOF+1
ACDRSV02 EQU   ACDTBLOF
ACDAMTYP EQU   ACDDBPFX+5
ACDLENG  EQU   ACDDBPFX+4
ACDDEBX  EQU   ACDDBPFX
ACDRSV08 EQU   ACDVTPRX+12
ACDTSKID EQU   ACDVTPRX+8
ACDCHN   EQU   ACDVTPRX+4
ACDSAF   EQU   ACDVTPRX+2
ACDLNGTH EQU   ACDVTPRX+1
ACDTYPE  EQU   ACDVTPRX
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00061 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00060 EQU   ATCAOSM+333
@NM00059 EQU   @NM00058
ATCSNUF  EQU   @NM00058
ATCOPKL  EQU   @NM00058
ATCABEN  EQU   @NM00058
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP32  EQU   ATCAOSM+28
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00057 EQU   @NM00056
ATCVTMAB EQU   @NM00056
@NM00055 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00054 EQU   ISTATCVT+819
@NM00053 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00052 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCDVTLK EQU   ISTATCVT+456
ATCAP35  EQU   ISTATCVT+448
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00051 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00050 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00049 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00048 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00047 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
DVEBSCAR EQU   DVEBSCID+1
DVEBSCLN EQU   DVEBSCID
DVEACIND EQU   DVERDTEA
DIVRSV01 EQU   ISTDIVTH+6
DIVNUMFE EQU   ISTDIVTH+2
PATRSV01 EQU   PATFLAGA
PATUSEFG EQU   PATFLAGA
PATRDCNT EQU   ISTPAT+6
PATGRPID EQU   ISTPAT+5
PATPTHID EQU   ISTPAT+4
PATDINDX EQU   ISTPAT+2
PATGINDX EQU   ISTPAT
GNTGRPNM EQU   ISTGNT
DNTTELNO EQU   ISTDNT+1
DNTCTDIG EQU   ISTDNT
RLSRSV02 EQU   ISTRLS+140
RLSRSV01 EQU   ISTRLS+138
RLSCTELU EQU   ISTRLS+136
RLSPRE   EQU   ISTRLS
RDARSVPT EQU   ISTRDA+84
RDAPUBI  EQU   ISTRDA+83
RDADFCUA EQU   ISTRDA+80
RDACTPCC EQU   ISTRDA+79
RDADACUA EQU   ISTRDA+76
RDALUBA  EQU   RDAUCBAD+1
RDACHQI  EQU   RDAUCBAD
RDARSV01 EQU   RDAFLAG
RDARBISA EQU   RDAFLAG
RDAPRE   EQU   ISTRDA
RSWRSV01 EQU   ISTRSW+152
RSWRSV02 EQU   ISTRSW+150
RSWCTELU EQU   ISTRSW+148
RSWGRUPZ EQU   ISTRSW+146
RSWDIALZ EQU   ISTRSW+144
RSWGRUPT EQU   ISTRSW+140
RSWDIALT EQU   ISTRSW+136
RSWPRE   EQU   ISTRSW
RLXRSV03 EQU   ISTRLX+80
RLXRSV02 EQU   ISTRLX+77
RLXRSV01 EQU   RLXFLAGA
RLXINUSE EQU   RLXFLAGA
RLXNLUX  EQU   ISTRLX+72
RLXPRE   EQU   ISTRLX
RPXRSV01 EQU   ISTRPX+80
RPXRSV02 EQU   ISTRPX+77
RPXMAXLU EQU   ISTRPX+76
RPXFLUX  EQU   ISTRPX+72
RPXPRE   EQU   ISTRPX
RLURSV02 EQU   ISTRLU+172
RLULGMOD EQU   ISTRLU+164
RLUMODEP EQU   RLUMODET+8
RLUMODEN EQU   RLUMODET
RLUUSSPT EQU   RLUUSSTB+8
RLUUSSNM EQU   RLUUSSTB
RLURSV01 EQU   ISTRLU+137
RLULOCAD EQU   ISTRLU+136
RLUNCPPM EQU   RLUNCPPC+1
RLUNCPPN EQU   RLUNCPPC
RLUPACEM EQU   RLUPACE+1
RLUPACEN EQU   RLUPACE
RLUINTA  EQU   ISTRLU+128
RLUSSCFM EQU   ISTRLU+127
RLUCRRSV EQU   RLUCRFLG
RLURSV00 EQU   RLUFLAG
RLUNDSES EQU   RLUFLAG
RLUBATCH EQU   RLUFLAG
RLUTYPE  EQU   ISTRLU+124
RLUCRPR  EQU   ISTRLU
RCCRVPT2 EQU   ISTRCC+144
RCCXTOSW EQU   ISTRCC+140
RCCSWTOX EQU   ISTRCC+136
RCCRSPT2 EQU   ISTRCC+133
RCCADDR  EQU   ISTRCC+132
RCCPASSL EQU   ISTRCC+131
RCCMXOUT EQU   ISTRCC+130
RCCMXDAT EQU   ISTRCC+128
RCCINDEX EQU   ISTRCC+126
RCCPATHZ EQU   ISTRCC+124
RCCPATHT EQU   ISTRCC+120
RCCDPQ   EQU   ISTRCC+116
RCCTPAB  EQU   ISTRCC+112
RCCRSV02 EQU   ISTRCC+109
RCCCRRSV EQU   RCCCRFLG
RCCCTCFL EQU   RCCCRFLG
RCCACTPU EQU   RCCCRFLG
RCCNCSPL EQU   ISTRCC+104
RCCEPAB  EQU   ISTRCC+96
@NM00046 EQU   ISTRCC+87
RCCSESCT EQU   ISTRCC+86
RCCIDNUM EQU   RCCID48+3
RCCIDBLK EQU   RCCID48+2
RCCIDPA2 EQU   RCCID48+1
RCCIDPUT EQU   RCCID48
RCCIDPA1 EQU   RCCSTAID
RCCCTELU EQU   ISTRCC+76
RCCRTGOH EQU   RCCFLAGB
RCCBRKCN EQU   RCCFLAGB
RCCBNNSP EQU   RCCFLAGB
RCCIRETR EQU   RCCFLAGB
RCCDIALP EQU   RCCFLAGB
RCCDSTCT EQU   RCCFLAGB
RCCCTPGD EQU   RCCFLAG
RCCPRGDN EQU   RCCFLAG
RCCOUERP EQU   RCCFLAG
RCCOHIMM EQU   RCCFLAG
RCCLDISC EQU   RCCFLAG
RCCERPIP EQU   RCCFLAG
RCCCUDIE EQU   RCCFLAG
RCCRBISA EQU   RCCFLAG
RCCTYPE  EQU   ISTRCC+72
RCCPRE   EQU   ISTRCC
RDSCTATR EQU   ISTRDS+74
RDSPRE   EQU   ISTRDS
RINRSV05 EQU   ISTRIN+156
RINRSV04 EQU   ISTRIN+152
RINLOCRN EQU   ISTRIN+148
RINRSV02 EQU   ISTRIN+145
RTRCNCNT EQU   RINCNCNT
RTRNCSPL EQU   RINNCSPL
RTRRPHCN EQU   RINRPHCN
RTRVPAB  EQU   RINVPAB
RTRREMOT EQU   RINREMOT
RTRRLDAF EQU   RINRLDAF
RTRNODID EQU   RINNODID
RINRSV01 EQU   RINDFD
RTRLDISC EQU   RINLDISC
RTRNODEF EQU   RINNODEF
RTRREMPO EQU   RINREMPO
RINCRPRE EQU   ISTRIN
RTRRSV04 EQU   ISTRTR+210
RTRLCTI  EQU   ISTRTR+209
RTRIDCAS EQU   RTRBSCID+1
RTRIDLEN EQU   RTRBSCID
RTRRSVDD EQU   ISTRTR+181
RTRRDFG  EQU   ISTRTR+180
RTRDIAA  EQU   ISTRTR+176
RTRPOLA  EQU   ISTRTR+172
RTRCADDR EQU   ISTRTR+164
RTRCTADR EQU   ISTRTR+162
RTRCTPOL EQU   ISTRTR+160
RTRCTDIA EQU   ISTRTR+158
RTRRSV03 EQU   ISTRTR+156
RTRRVPT1 EQU   ISTRTR+152
RTRBHSN1 EQU   ISTRTR+144
RTRCRSV2 EQU   RTRCRFLG
RTRDTRLM EQU   RTRLSCMD
RTRCRSV1 EQU   RTRCRFLG
RTRTRMAX EQU   ISTRTR+142
RTRRSV24 EQU   RTRRDFF
RTRRFDEK EQU   RTRRDFF
RTRRFANK EQU   RTRRDFF
RTRRFPFK EQU   RTRRDFF
RTRRFPEN EQU   RTRRDFF
RTRRFXCT EQU   RTRRDFF
RTRRESCT EQU   RTRRDFE
RTRRESUP EQU   RTRRDFE
RTRREATT EQU   RTRRDFE
RTRRECHK EQU   RTRRDFE
RTRREACR EQU   RTRRDFE
RTRRSV0A EQU   RTRRDFE
RTRREBRK EQU   RTRRDFE
RTRRSV11 EQU   RTRRDFD
RTRRSV10 EQU   RTRRDFD
RTRRDBHI EQU   RTRRDFD
RTRRDBHD EQU   RTRRDFD
RTRRDBHN EQU   RTRRDFD
RTRRSV23 EQU   RTRRDFC
RTRRCXMS EQU   RTRRDFC
RTRRCMSG EQU   RTRRDFC
RTRRCBLK EQU   RTRRDFC
RTRRCPT3 EQU   RTRRDFC
RTRRCIT2 EQU   RTRRDFC
RTRRCIT1 EQU   RTRRDFC
RTRRSV32 EQU   RTRRDFB
RTRRBEND EQU   RTRRDFB
RTRRBECT EQU   RTRRDFB
RTRRSV02 EQU   RTRRDFA
RTRRACTR EQU   RTRRDFA
RTRRSV60 EQU   RTRRDFA
RTRRACDT EQU   RTRRDFA
RTRRAPT3 EQU   RTRRAALL
RTRRAPT2 EQU   RTRRAALL
RTRRAPT1 EQU   RTRRAALL
RTRRAATN EQU   RTRRDFA
RTRRSV45 EQU   ISTRTR+132
RTRRSV01 EQU   ISTRTR+130
RTRCTECM EQU   ISTRTR+128
RTRADRPT EQU   RTRADR+1
RTRRSV22 EQU   RTRFLAG
RTRVTERM EQU   RTRFLAG
RTRRSV51 EQU   RTRFLAG
RTRRBISA EQU   RTRFLAG
RTRRSV21 EQU   RTRFLAG
RTRCRPR  EQU   ISTRTR
RCLRVPT2 EQU   ISTRCL+92
RCLRVPT1 EQU   ISTRCL+88
RCLGPOLA EQU   ISTRCL+84
RCLCTNGP EQU   ISTRCL+82
RCLRSV01 EQU   ISTRCL+80
RCLCTECM EQU   ISTRCL+78
RCLCTETR EQU   ISTRCL+76
RCLGPADR EQU   RCLADR+1
RCLRSV33 EQU   RCLFLAG
RCLBATCH EQU   RCLFLAG
RCLRBISA EQU   RCLFLAG
RCLRSV22 EQU   RCLFLAG
RCLPRE   EQU   ISTRCL
RPTRSV03 EQU   ISTRPT+156
RPTRSV02 EQU   ISTRPT+152
RPTNSNSV EQU   ISTRPT+148
RPTDAFSV EQU   ISTRPT+142
RPTRSV01 EQU   ISTRPT+141
RPTISTAT EQU   RPTFLAG1
RPTDYNAM EQU   RPTFLAG1
RPTVIODN EQU   RPTFLAG1
RPTASLEP EQU   RPTFLAG1
RPTLNSAF EQU   RPTLNCID
RPTLN    EQU   ISTRPT
RLNRVPT2 EQU   ISTRLN+112
RLNNCSPL EQU   ISTRLN+108
RLNX2SW  EQU   ISTRLN+104
@NM00045 EQU   ISTRLN+103
RLNCRRSV EQU   RLNCRFLG
RLNSVSKP EQU   RLNLSCMD
RLNSESLM EQU   RLNLSCMD
RLNNPRLM EQU   RLNLSCMD
RLNPAUSE EQU   ISTRLN+101
RLNPOLMT EQU   ISTRLN+100
RLNRESV1 EQU   ISTRLN+97
RLNACTRM EQU   ISTRLN+96
RLNCTSES EQU   ISTRLN+95
RLNRDSLM EQU   ISTRLN+94
RLNAUTOA EQU   ISTRLN+92
RLNRDFD  EQU   RLNRDF+3
RLNRDFC  EQU   RLNRDF+2
RLNMULTP EQU   RLNRDFB
RLNRAPOL EQU   RLNRDFB
RLNRSV0B EQU   RLNRDFB
RLNAUTOD EQU   RLNRDFB
RLNRANCP EQU   RLNRDFA
RLNRAEP  EQU   RLNRDFA
RLNRSV04 EQU   RLNSTAT2
RLNRSV03 EQU   RLNSTAT1
RLNVD    EQU   RLNSTAT1
RLNINOPP EQU   RLNSTAT1
RLNINOPL EQU   RLNSTAT1
RLNLRST  EQU   RLNSTAT1
RLNTRAP  EQU   RLNSTAT1
RLNACTCT EQU   ISTRLN+84
RLNCTECM EQU   ISTRLN+82
RLNCTEIN EQU   ISTRLN+80
RLNCTETR EQU   ISTRLN+78
RLNCTECL EQU   ISTRLN+76
RLNCUA   EQU   RLNUCBAD
RLNRSV01 EQU   RLNFLAG
RLNRBISA EQU   RLNFLAG
RLNPRE   EQU   ISTRLN
RGPRVPT2 EQU   ISTRGP+88
RGPRVPT1 EQU   ISTRGP+84
RGPCTECM EQU   ISTRGP+82
RGPCTEIN EQU   ISTRGP+80
RGPCTETR EQU   ISTRGP+78
RGPCTECL EQU   ISTRGP+76
RGPCTELN EQU   ISTRGP+74
RGPRSV03 EQU   ISTRGP+73
RGPRSV02 EQU   RGPFLG
RGPASDLC EQU   RGPFLG
RGPABSC  EQU   RGPFLG
RGPASS   EQU   RGPFLG
RGPADIL  EQU   RGPFLG
RGPPRE   EQU   ISTRGP
RRNRINNM EQU   ISTRRN+248
@NM00044 EQU   ISTRRN+247
RRNRDCUA EQU   ISTRRN+244
RRNLASTE EQU   ISTRRN+240
RRNNCSPL EQU   ISTRRN+236
RRNRPLPT EQU   ISTRRN+232
RRNMSIZE EQU   ISTRRN+228
RRNNCPNM EQU   ISTRRN+221
RRNCTPCC EQU   ISTRRN+220
RRNHBUFS EQU   ISTRRN+218
RRNHLENT EQU   RRNHPRE+1
RRNHLENH EQU   RRNHPRE
RRNNMNCP EQU   ISTRRN+208
RRNDELAY EQU   ISTRRN+206
RRNRSV04 EQU   ISTRRN+200
RRNRSV88 EQU   RRNNMDPD+7
RRNPUBI  EQU   RRNNMDPD+6
RRNDPLUB EQU   RRNNMDPD
RRNEPADR EQU   ISTRRN+190
RRNCPLUB EQU   ISTRRN+184
RRNFLUX  EQU   ISTRRN+180
RRNRSV05 EQU   RRNCMFD
RRNCDREC EQU   RRNCMFD
RRNCDDSI EQU   RRNCMFD
RRNCDBCK EQU   RRNCMFD
RRNCDDTL EQU   RRNCMFD
RRNCDSTD EQU   RRNCMFD
RRNCDCSP EQU   RRNCMFD
RRNCCCSL EQU   RRNCMFC
RRNCCSIM EQU   RRNCMFC
RRNCCRCM EQU   RRNCMFC
RRNCCRIM EQU   RRNCMFC
RRNCCCRC EQU   RRNCMFC
RRNCCRST EQU   RRNCMFC
RRNCCRDQ EQU   RRNCMFC
RRNCCRCN EQU   RRNCMFC
RRNCBALT EQU   RRNCMFB
RRNCBMOD EQU   RRNCMFB
RRNCBNPL EQU   RRNCMFB
RRNCBRLS EQU   RRNCMFB
RRNCBRDS EQU   RRNCMFB
RRNCBDLR EQU   RRNCMFB
RRNCBDLH EQU   RRNCMFB
RRNCBDLO EQU   RRNCMFB
RRNCADGO EQU   RRNCMFA
RRNCADTD EQU   RRNCMFA
RRNCACDT EQU   RRNCMFA
RRNCAMBH EQU   RRNCMFA
RRNCAATI EQU   RRNCMFA
RRNCAATG EQU   RRNCMFA
RRNCAATD EQU   RRNCMFA
RRNCAALL EQU   RRNCMFA
RRNRSV55 EQU   RRNRDF+3
RRNPTASL EQU   RRNRDFB+1
RRNRSV01 EQU   RRNRDFB+1
RRNVYDON EQU   RRNRDFB+1
RRNRBBUP EQU   RRNRDFB+1
RRNRSV03 EQU   RRNRDFB
RRNRBCT2 EQU   RRNRDFB
RRNRBCT1 EQU   RRNRDFB
RRNRBSEC EQU   RRNRDFB
RRNRBCCT EQU   RRNRDFB
RRNRBCCL EQU   RRNRDFB
RRNRSV02 EQU   RRNRDFB
RRNRBMDL EQU   RRNRDFB
RRNRAPEP EQU   RRNRDFA
RRNRANCP EQU   RRNRDFA
RRNRAOLT EQU   RRNRDFA
RRNRASYN EQU   RRNRDFA
RRNRADMP EQU   RRNRDFA
RRNRAIPL EQU   RRNRDFA
RRNRASHT EQU   RRNRDFA
RRNCTENT EQU   ISTRRN+170
RRNCTECM EQU   ISTRRN+168
RRNCTEIN EQU   ISTRRN+166
RRNCTETR EQU   ISTRRN+164
RRNCTECL EQU   ISTRRN+162
RRNCTELI EQU   ISTRRN+160
RRNCTEGP EQU   ISTRRN+158
RRNCTBHS EQU   ISTRRN+156
RRNBHSET EQU   ISTRRN+152
RRNTRENT EQU   ISTRRN+148
RRNRLDIP EQU   ISTRRN+147
RRNRNCUA EQU   ISTRRN+144
RRNGRPA  EQU   ISTRRN+140
RRNLUBA  EQU   RRNUCBAD+1
RRNCHQI  EQU   RRNUCBAD
RRNRSV11 EQU   RRNFLAG
RRNDSTCT EQU   RRNFLAG
RRNERPIP EQU   RRNFLAG
RRNLCDIE EQU   RRNFLAG
RRNLCSIP EQU   RRNFLAG
RRNRBISA EQU   RRNFLAG
RRNRSV89 EQU   RRNFLAG
RRNPRE   EQU   ISTRRN
RLCRVPT2 EQU   ISTRLC+80
RLCRVPT1 EQU   ISTRLC+79
RLCLCCUA EQU   ISTRLC+76
RLCUCBAD EQU   RLCADR+1
RLCRSVDE EQU   RLCFLAG
RLCACNT  EQU   RLCFLAG
RLCRSV14 EQU   RLCFLAG
RLCRBISA EQU   RLCFLAG
RLCRSV22 EQU   RLCFLAG
RLCPRE   EQU   ISTRLC
RAPRVPT2 EQU   ISTRAP+116
RAPRVPT1 EQU   ISTRAP+112
RAPBFACT EQU   ISTRAP+111
RAPRSV17 EQU   RAPFLGC
RAPRSV16 EQU   RAPFLGC
RAPRSV15 EQU   RAPFLGC
RAPRSV14 EQU   RAPFLGC
RAPRSV13 EQU   RAPFLGC
RAPRSV12 EQU   RAPFLGC
RAPRSV11 EQU   RAPFLGC
RAPRSV10 EQU   RAPFLGC
RAPANVPC EQU   RAPFLGB
RAPASPO  EQU   RAPFLGB
RAPAPPO  EQU   RAPFLGB
RAPAACQ  EQU   RAPFLGB
RAPAPRMT EQU   RAPFLGB
RAPAPASS EQU   RAPFLGB
RAPABLCK EQU   RAPFLGB
RAPALLF  EQU   RAPFLGB
RAPRSV06 EQU   RAPFLG
RAPRSV05 EQU   RAPFLG
RAPRSV04 EQU   RAPFLG
RAPRSV03 EQU   RAPFLG
RAPATLGN EQU   RAPFLG
RAPASLGI EQU   RAPFLG
RAPAQUI  EQU   RAPFLG
RAPABLGN EQU   RAPFLG
RAPACEQD EQU   ISTRAP+106
RAPTRPRE EQU   ISTRAP+104
RAPACEAP EQU   ISTRAP+100
RAPICEAQ EQU   ISTRAP+96
RAPICEAC EQU   ISTRAP+92
RAPICELG EQU   ISTRAP+88
RAPAPPWD EQU   ISTRAP+80
RAPACDEB EQU   ISTRAP+76
RAPACBA  EQU   ISTRAP+72
RAPPRE   EQU   ISTRAP
RDTVSRPL EQU   ISTRDT+132
RDTCRSPW EQU   ISTRDT+124
RDTCRSDS EQU   ISTRDT+116
@NM00043 EQU   ISTRDT+113
RRNSTCNT EQU   RDTSTCNT
RRNVYRPH EQU   RDTVYRPH
RDTTPAB  EQU   ISTRDT+104
RDTEPAB  EQU   ISTRDT+96
RDTVPAB  EQU   ISTRDT+92
RDTRSV01 EQU   RDTFLAGB
RDTBHSET EQU   RDTFLAGB
RDTCTCFL EQU   RDTFLAGB
RDTCTPGD EQU   RDTFLAGB
RDTPRGDN EQU   RDTFLAGB
RDTOUERP EQU   RDTFLAGB
RDTNODID EQU   ISTRDT+89
RDTMAXID EQU   ISTRDT+88
RDTCTSNT EQU   ISTRDT+86
RDTFLAGS EQU   ISTRDT+84
RDTBACK  EQU   ISTRDT+80
RDTFORW  EQU   ISTRDT+76
RDTLEN   EQU   RDTPLEN+1
RDTPRILS EQU   RDTPRIOR
RDTPRISW EQU   RDTPRIOR
RDTPRIRN EQU   RDTPRIOR
RDTPRILC EQU   RDTPRIOR
RDTPRIAP EQU   RDTPRIOR
@NM00042 EQU   RDTPRIOR
RDTPRE   EQU   ISTRDT
RCPRSV05 EQU   ISTRCPRE+120
RCPRSV04 EQU   ISTRCPRE+116
RCPRSV03 EQU   ISTRCPRE+112
RCPINTA  EQU   RCPLGNIN+16
RCPLGNCT EQU   RCPLGNIN+8
RCPLGNAP EQU   RCPLGNIN
@NM00041 EQU   RCPPMODE
RCPRRECD EQU   RCPPMODE
RCPRBASC EQU   RCPPMODE
RCPBFLIM EQU   ISTRCPRE+90
RCPBHSI2 EQU   ISTRCPRE+89
RCPBHSI1 EQU   ISTRCPRE+88
RCPICEAQ EQU   ISTRCPRE+80
RCPLNAPA EQU   ISTRCPRE+76
RCPICELN EQU   ISTRCPRE+72
RCPPRE   EQU   ISTRCPRE
RPRCLVPD EQU   RPRFLAGC
RPRRSV05 EQU   RPRFLAGD
RPRCONP  EQU   RPRFLAGD
RPRACTP  EQU   RPRFLAGD
RPRCONCT EQU   RPRFLAGD
RPRSWDAF EQU   ISTRPRE+58
RPRSTPCT EQU   ISTRPRE+56
RPRRVPT1 EQU   ISTRPRE+52
RPRTIOCT EQU   ISTRPRE+26
RPRRSV03 EQU   RPRCAUSE
RPRRSYNC EQU   RPRCAUSE
RPRNOSRT EQU   RPRCAUSE
RPRINTST EQU   RPRFLAGB
RPRAOPN  EQU   RPRFLAGB
RPRENTVT EQU   RPRFLAGB
RPRENTVH EQU   RPRFLAGB
RPRENTIO EQU   RPRFLAGA
RPRENTBF EQU   RPRFLAGA
RPRTIED  EQU   RPRFLAGA
RPRACT   EQU   RPRFLAGA
RPRRLOCK EQU   ISTRPRE+12
RPRSAF   EQU   RPRCOMID
LOKXCL   EQU   @NM00039
LOKPRY   EQU   @NM00039
@NM00040 EQU   @NM00039
@NM00038 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
PFXBCK   EQU   ISTPFX+12
PFXFWD   EQU   ISTPFX+8
PFXLNG   EQU   ISTPFX+5
PFXPRTY  EQU   ISTPFX+4
PFXCBID  EQU   PFXID
RPLSEQNO EQU   RPLOF60+6
@NM00037 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00036 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00035 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00034 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00033 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00032 EQU   RPLRESP
@NM00031 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00030 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00029 EQU   RPLVTFL1
@NM00028 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00027 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00026 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00025 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00024 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00023 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00022 EQU   RPLOPT12
@NM00021 EQU   RPLOPT12
@NM00020 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00019 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00018 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00017 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00016 EQU   RPLRBAR+3
@NM00015 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00014 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00013 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00012 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00011 EQU   SRBSECT+40
@NM00010 EQU   SRBSECT+38
SRBPRIOR EQU   SRBSECT+37
SRBPKF   EQU   SRBSECT+36
SRBSAVE  EQU   SRBSECT+32
SRBPARM  EQU   SRBSECT+28
SRBRMTR  EQU   SRBSECT+24
SRBEP    EQU   SRBSECT+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRBSECT+8
SRBFLNK  EQU   SRBSECT+4
SRBID    EQU   SRBSECT
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00006 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00005 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00004
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00003 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSASID  EQU   IOSB+6
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSFLC6  EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSFLB2  EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00798 EQU   @RC00771
@RC00781 EQU   @RC00771
@RC00779 EQU   @RC00771
@RT00847 EQU   @RC00844
@RT00856 EQU   @RC00851
@RT00860 EQU   @RC00851
@RC00878 EQU   @RC00877
@RT00910 EQU   @RC00889
@RT00926 EQU   @RC00923
@RC01073 EQU   @RC01072
@RC01095 EQU   @RC01076
@RC01089 EQU   @RC01076
@RC01077 EQU   @RC01076
@RC01225 EQU   @RC01220
CVIQUIS@ EQU   @PB00007
@RC01292 EQU   @RC01291
@RC01392 EQU   @RC01391
@RC01400 EQU   @RC01398
CVISGIM@ EQU   @PB00009
CVIDPIT@ EQU   @EL00008
@RC01576 EQU   @RC01573
@RC01574 EQU   @RC01573
@RC01624 EQU   @RC01621
@RC01622 EQU   @RC01621
@RT01636 EQU   @RC01631
@RC01685 EQU   @RC01661
@RT01683 EQU   @RC01661
CVIVPEN# EQU   @RC01761
SCANCEL# EQU   @RC01766
@RC01784 EQU   @RC01771
@RC01812 EQU   @RC01771
CVITABD# EQU   @RC01917
@RC01934 EQU   @RC01933
@RT02027 EQU   @EL00012
@RC02034 EQU   @EL00012
CVIPEL3# EQU   @RC02078
CVIPEL3@ EQU   @EL00013
@RC02228 EQU   @RC02192
@RC02221 EQU   @RC02192
@RC02199 EQU   @RC02192
@RC02194 EQU   @RC02192
@RC02265 EQU   @RC02263
@RC02278 EQU   @RC02276
@RC02334 EQU   @RC02332
@RT02345 EQU   @RC02344
@RT02361 EQU   @RC02358
@RT02387 EQU   @RC02384
@RT02438 EQU   CVILCEND
@PB00018 EQU   @PB00019
@PB00020 EQU   @PB00021
@PB00022 EQU   @PB00023
@RT02721 EQU   @RC02720
@RC02777 EQU   @RC02771
@RC02794 EQU   @RC02793
CVISDLC@ EQU   @PB00024
@RT00785 EQU   @RC00781
@RT00788 EQU   @RC00781
@RC01078 EQU   @RC01077
CVIDPIT# EQU   @RC01392
@RC01444 EQU   @RC01400
@RC01435 EQU   @RC01400
@RC01401 EQU   @RC01400
@RT01577 EQU   @RC01576
@RC01690 EQU   @RC01685
@RC01786 EQU   @RC01784
@RC01803 EQU   @RC01784
@RC01079 EQU   @RC01078
@ENDDATA EQU   *
         END   ISTINCVI,(C'PLS1151',0603,78110)
