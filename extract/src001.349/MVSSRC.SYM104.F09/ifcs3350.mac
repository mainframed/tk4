         TITLE 'IFCS3350 - 3350 SUMMARY TABLE MODULE'          @XM09337
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*        DSGEN  MACRO        D S G E N  M A C R O          DSGEN MACRO
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(1000),&ITEMNBR,&SHIFT(1000)
         GBLC  &ITEM(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  500000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCS3350'
&DSECT   SETC  'S3350'
IFCS3350 CSECT
S3350    DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,16)             @Z30RIVS
         DSGEN (RECID,8),(SPARE1,16),(TYPE,8)                  @Z30RIVS
         DSGEN (DAY,32)                                        @Z30RIVS
         DSGEN (HOUR,32)                                       @Z30RIVS
         DSGEN (SPARE2,8),(CPUSERL,24)                         @Z30RIVS
         DSGEN (CPUID,16),(SPARE3,16)                          @Z30RIVS
         DSGEN (JCUAID,16),(JVOLID1,16)                        @Z30RIVS
         DSGEN (JVOLID2,32)                                    @Z30RIVS
         DSGEN (TSNB00,2),(TSNB02,1),(TSNB03,2),(TSNB05,1),    @Z30RIVSC
               (TSNB06,2),(TSNB10,1),                          @Z30RIVSC
               (TSNB11,1),(TSNB12,6),(TSNB20,8),(TSNB30,8)     @Z30RIVS
         DSGEN (TSNB40,8),(TSNB50,8),(TSNB60,8),(TSNB70,8)     @Z30RIVS
         DSGEN (TSNB80,8),(TSNB90,8),(TSNB100,8),(TSNB110,8)   @Z30RIVS
         DSGEN (TSNB120,8),(TSNB130,8),(TSNB140,8),(TSNB150,8) @Z30RIVS
         DSGEN (TSNB160,8),(TSNB170,8),(TSNB180,8),(TSNB190,8) @Z30RIVS
         DSGEN (TSNB200,8),(TSNB210,8),(TSNB220,8),(TSNB230,8) @Z30RIVS
         DSGEN (SPARE4,8),(CUA,24)                             @Z30RIVS
         DSGEN (IORET,24),(SBCNT,8)                            @Z30RIVS
         DSGEN (VOLID1,32)                                     @Z30RIVS
         DSGEN (VOLID2,16),(SPARE5,16)                         @Z30RIVS
         DSGEN (LSKAD1,64)                                     @Z30RIVS
         DSGEN (AHA1,32)                                       @Z30RIVS
         DSGEN (AHA2,16),(SPARE6,16)                           @Z30RIVS
         DSGEN (SNB00,2),(SNB02,1),(SNB03,2),(SNB05,1),        @Z30RIVSC
               (SNB06,2),(SNB10,1),                            @Z30RIVSC
               (SNB11,1),(SNB12,6),(SNB20,8),(SNB30,8)         @Z30RIVS
         DSGEN (SNB40,8),(SNB50,8),(SNB60,8),(SNB70,8)         @Z30RIVS
         DSGEN (SNB80,8),(SNB90,8),(SNB100,8),(SNB110,8)       @Z30RIVS
         DSGEN (SNB120,8),(SNB130,8),(SNB140,8),(SNB150,8)     @Z30RIVS
         DSGEN (SNB160,8),(SNB170,8),(SNB180,8),(SNB190,8)     @Z30RIVS
         DSGEN (SNB200,8),(SNB210,8),(SNB220,8),(SNB230,8)     @Z30RIVS
*                                                              @Z30RIVS
IFCS3350 CSECT                                                 @Z30RIVS
         USING S3350,R2                                        @Z30RIVS
         USING *,R9                                            @Z30RIVS
         DC    A(ENTRIES)                                      @Z30RIVS
         DC    A(PEDIT)                                        @Z30RIVS
*                                                              @Z30RIVS
REG8     DC    F'0'                                            @Z30RIVS
SCSIZE   DC    H'2273'                                         @Z427VLS
*                                                              @Z30RIVS
R0       EQU   0                                               @Z30RIVS
R1       EQU   1                                               @Z30RIVS
R2       EQU   2                                               @Z30RIVS
R3       EQU   3                                               @Z30RIVS
R4       EQU   4                                               @Z30RIVS
R5       EQU   5                                               @Z30RIVS
R6       EQU   6                                               @Z30RIVS
R7       EQU   7                                               @Z30RIVS
R8       EQU   8                                               @Z30RIVS
R9       EQU   9                                               @Z30RIVS
R10      EQU   10                                              @Z30RIVS
R11      EQU   11                                              @Z30RIVS
R12      EQU   12                                              @Z30RIVS
R13      EQU   13                                              @Z30RIVS
R14      EQU   14                                              @Z30RIVS
R15      EQU   15                                              @Z30RIVS
*                                                              @Z30RIVS
L0       EQU   0                                               @Z30RIVS
L1       EQU   1                                               @Z30RIVS
L2       EQU   2                                               @Z30RIVS
L3       EQU   3                                               @Z30RIVS
L4       EQU   4                                               @Z30RIVS
L5       EQU   5                                               @Z30RIVS
L6       EQU   6                                               @Z30RIVS
L7       EQU   7                                               @Z30RIVS
L8       EQU   8                                               @Z30RIVS
L9       EQU   9                                               @Z30RIVS
L10      EQU   10                                              @Z30RIVS
L11      EQU   11                                              @Z30RIVS
L12      EQU   12                                              @Z30RIVS
L13      EQU   13                                              @Z30RIVS
L14      EQU   14                                              @Z30RIVS
L15      EQU   15                                              @Z30RIVS
L16      EQU   16                                              @Z30RIVS
L17      EQU   17                                              @Z30RIVS
L18      EQU   18                                              @Z30RIVS
L19      EQU   19                                              @Z30RIVS
L20      EQU   20                                              @Z30RIVS
L22      EQU   22                                              @Z30RIVS
L23      EQU   23                                              @Z30RIVS
L24      EQU   24                                              @Z30RIVS
L26      EQU   26                                              @Z30RIVS
L27      EQU   27                                              @Z30RIVS
L28      EQU   28                                              @Z30RIVS
L40      EQU   40                                              @Z427VLS
L42      EQU   42                                              @Z427VLS
L29      EQU   29                                              @Z30RIVS
L30      EQU   30                                              @Z30RIVS
L31      EQU   31                                              @Z30RIVS
L32      EQU   32                                              @Z30RIVS
L36      EQU   36                                              @Z30RIVS
L39      EQU   39                                              @Z30RIVS
L44      EQU   44                                              @Z30RIVS
L46      EQU   46                                              @Z30RIVS
L47      EQU   47                                              @Z30RIVS
L48      EQU   48                                              @Z30RIVS
L49      EQU   49                                              @Z30RIVS
L50      EQU   50                                              @Z30RIVS
L480     EQU   480                                             @Z30RIVS
L510     EQU   510                                             @Z30RIVS
L1460    EQU   1460                                            @Z30RIVS
H0F      EQU   X'0F'                                           @Z30RIVS
HE0      EQU   X'E0'                                           @Z30RIVS
HF0      EQU   X'F0'                                           @Z30RIVS
H00      EQU   X'00'                                           @Z30RIVS
H01      EQU   X'01'                                           @Z30RIVS
H02      EQU   X'02'                                           @Z30RIVS
H04      EQU   X'04'                                           @Z30RIVS
H08      EQU   X'08'                                           @Z30RIVS
HC0      EQU   X'C0'                                           @Z30RIVS
H80      EQU   X'80'                                           @Z30RIVS
H50      EQU   X'50'                                           @Z30RIVS
H40      EQU   X'40'                                           @Z30RIVS
H30      EQU   X'30'                                           @Z30RIVS
H20      EQU   X'20'                                           @Z30RIVS
H10      EQU   X'10'                                           @Z30RIVS
H21      EQU   X'21'                                           @Z30RIVS
H23      EQU   X'23'                                           @Z30RIVS
H25      EQU   X'25'                                           @Z30RIVS
H29      EQU   X'29'                                           @Z30RIVS
H18      EQU   X'18'                                           @Z30RIVS
H32      EQU   X'32'                                           @Z30RIVS
H90      EQU   X'90'                                           @Z30RIVS
CHART    EQU   C'T'                                            @Z30RIVS
CLRSGN   EQU   X'F0'                                           @Z30RIVS
LOGMODE  EQU   X'10'                                           @Z30RIVS
NOLOG    EQU   X'7F'                                           @Z30RIVS
HEXFD    EQU   X'FD'                                           @Z30RIVS
SLASH    EQU   C'/'                                            @Z30RIVS
BLANK    EQU   X'40'                                           @Z30RIVS
COLON    EQU   C':'                                            @Z30RIVS
SETSORT  EQU   X'80'                                           @Z30RIVS
ON       EQU   1                                               @Z30RIVS
HEX02    EQU   X'02'                                           @Z30RIVS
NOCARRY  EQU   12                  COND CODE AFTER 'AL' =      @Z30RIVS
**    NO CARRY(OVERFLOW) INTO BIT POSITION 32                  @Z30RIVS
**                                                             @Z30RIVS
XDATE1   STM   R5,R8,XSAVE1        SAVE REGS                   @Z30RIVS
         CLC   DAY(L4),HEX00       IS DATE ZERO                @Z30RIVS
         BE    RETURN1             BR-ZERO                     @Z30RIVS
         CLC   L0(L4,R3),HEX00     IS LOW DATE ZERO            @Z30RIVS
         BNE   XDATE2              BR-NO                       @Z30RIVS
         MVC   L0(L4,R3),DAY       MOVE IN DATE                @Z30RIVS
XDATE2   CLC   DAY(L4),L0(R3)      CHECK FOR LOW DATE          @Z30RIVS
         BL    SAVELOW             LOWER SAVE IT               @Z30RIVS
         CLC   DAY(L4),L4(R3)      CHECK FOR HI                @Z30RIVS
         BNH   RETURN1                                         @Z30RIVS
SAVEHI   MVC   L4(L4,R3),DAY       MOVE HI DATE                @Z30RIVS
         B     RETURN1                                         @Z30RIVS
SAVELOW  MVC   L0(L4,R3),DAY       MOVE LOW DATE               @Z30RIVS
         B     RETURN1                                         @Z30RIVS
ISTPER   STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z30RIVS
         SR    R8,R8               REGS                        @Z30RIVS
         USING T3350A,R3                                       @Z40RIVS
         LA    R6,T3350B           LOAD ADDR OF SUM COUNTER    @Z40RIVS
         ST    R6,VOLPTR           STORE VOL CNTR ADDR         @Z30RIVS
         LA    R6,T3350C           LOAD ADDR OF SUM COUNTER    @Z40RIVS
         ST    R6,FLTPTR           STORE FLT SUM CNTR ADDR     @Z30RIVS
         DROP  R3                                              @Z40RIVS
         LR    R5,R3               GET ADDR OF SUM CNTR        @Z30RIVS
         LA    R5,L32(R5)          INCR TO START OF CNTR       @Z40RIVS
         A     R5,RECTST4          PNT TO REC FOR DEV          @Z30RIVS
         ST    R3,RECTSTS          SAVE SUM PNTR               @Z30RIVS
         ST    R5,RECTSTP          SAVE REC PNTR               @Z30RIVS
         MVC   L0(L32,R3),L0(R5)   MOVE REC TO SUM AREA        @Z40RIVS
         LR    R5,R3               GET ADDRESS OF SUMMARY COUNTER
         MVC   L2(L1,R5),CLASRC    SAVE RECORD CLASS/SOURCE    @Z30RIVS
         TM    CLASRC,H90          TEST FOR A TPER RECORD      @Z30RIVS
         BO    TYPTPER             YES                         @Z30RIVS
**                                                             @Z30RIVS
**       NO - SAVE DEVICE TYPE CODE,BUT DONT ADD TO COUNTERS   @Z30RIVS
**                                                             @Z30RIVS
         MVC   L28(L2,R3),CUA+L1   SAVE DEVICE ADDR            @Z30RIVS
         MVC   L3(L2,R5),TSNB220   SAVE DEVICE CODE            @Z30RIVS
         B     RETURN1             RETURN                      @Z30RIVS
TYPTPER  MVC   L28(L2,R3),JCUAID   SAVE DEVICE ADDR            @Z30RIVS
         BAL   R8,ADDUP            GO ADD TO COUNT OF TPER RECORDS
         LA    R8,DOVOL-L6         MOVE POINTER TO ADD VOL ID  @Z30RIVS
         ST    R8,REG8                                         @Z30RIVS
         MVC   L1(L1,R5),RECID     SAVE RECORD ID              @Z30RIVS
         B     RETURN1                                         @Z30RIVS
ISLOG    STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z30RIVS
         SR    R6,R6               ZERO                        @Z30RIVS
         SR    R8,R8               REGS                        @Z30RIVS
         TM    CLASRC,H32          IS THIS A CONVERTED OBR     @Z30RIVS
         BNO   NEWREC              NO                          @Z40RIVS
TESTCONV TM    SBCNT,H18           HAS THIS RECORD BEEN CONDENSED
         BO    NEWREC              YES                         @Z30RIVS
         MVC   SNB00(L24),SNB100   NO,MOVE SENSE OVER SDR      @Z30RIVS
NEWREC   LR    R5,R3               GET ADDRESS OF SUMMARY COUNTERS
         TM    SNB00,H08           DATA CHECK
         BNO   NEWREC1             NO, GO FOR NORMAL
         TM    SNB70,H50           FORMAT 5?
         BNO   NEWREC1             NO,GO FOR LOGGING MODE
         BAL   R8,ADDUP            SUMM
         L     R3,VOLPTR             PICK UP ADDR OF VOL CNT   @XA20375
         LR    R5,R3                 SET POINTER TO CNTR       @XA20375
CORRVOL  CLC   ZEROS(L6),VOLID1      IS THIS VOLID ZEROS       @XA20375
         BE    LOGRET                DO NOT PROCESS FURTHER    @XA20375
         LA    R7,L50                SET NUM VOL ID'S ALLOWED  @XA20375
CORRVOL2 CLC   L0(L6,R5),VOLID1      COMPARE VOLID TO FIRST    @XA20375
         BNE   CORRVOL4              UNEQUAL BYPASS            @XA20375
         CLC   L26(L2,R5),CUA+L1     MOVE IN DEVICE ADDR       @XA20375
         BE    CORRVOL5              EQUAL GO TO SUM           @XA20375
CORRVOL4 CLC   L0(L6,R5),ZEROS       NO IS VOL ID EQ TO BLANKS @XA20375
         BE    CORRVOL3              YES THIS IS FIRST ONE     @XA20375
         LA    R5,L28(R5)            BUMP TO NEXT VOLID        @XA20375
         BCT   R7,CORRVOL2           LOOP TO FIRST TESTRM ABOV @XA20375
CORRVOL3 MVC   L0(L6,R5),VOLID1      MOVE IN VOLID             @XA20375
         MVC   L26(L2,R5),CUA+L1     MOVE IN DEVICE ADDR       @XA20375
CORRVOL5 LA    R5,L22(R5)            BUMP TO CORR READ CNTR    @XA20375
         STCM  R6,L15,L0(R5)         STORE TOTAL CORR DATA CKS @XA20375
         B     LOGRET
NEWREC1  EQU   *
         TM    SNB20,H10           WAS THIS RECORDED IN LOGGING MOD
         BNO   RETURN1             NO                          @Z40RIVS
         LA    R5,L2(R5)           NO,BUMP POINTER RO DATA CHK RTRY
         TM    SNB70,H40           IS THIS DATA CHECK RETRY    @Z30RIVS
         BO    LOGMOD1             YES,FORMAT 4 INDICATES DCR  @Z30RIVS
         LA    R5,L2(R5)           NO,BUMP POINTER TO SEEK CHECK
         TM    SNB70,H10           IS THIS SEEK CHECK          @Z30RIVS
         BNO   LOGRET              NO                          @Z40RIVS
LOGMOD1  BAL   R8,ADDUP            FMT 1 INDICATES SEEK CK     @Z40RIVS
LOGRET   LA    R8,ENDLOG-L6        LOG MOD ENDS,DO NOT ADD FURTHER
         ST    R8,REG8                                         @Z30RIVS
         B     RETURN1                                         @Z30RIVS
**                                                             @Z30RIVS
         EJECT                                                 @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO SUM INTO THE SPECIFIC SUM AREA FOR DEVICE  @Z30RIVS
**                                                             @Z30RIVS
RECTST0  STM   R5,R8,XSAVE1        SAVE REG                    @Z30RIVS
         IC    R7,JCUAID+L1        PICK UP MDR CUA             @Z40RIVS
         TM    CLASRC,H90          TEST TYPE RECORD            @Z30RIVS
         BO    RECTST1             GO TO CLEAR HIGH BYTES      @Z40RIVS
         IC    R7,CUA+L2           PICK UP OBR CUA             @Z30RIVS
RECTST1  SLL   R7,L28              CLEAR HIGH BYTES
         SRL   R7,L28              IN REG7
         LTR   R7,R7               TEST REG7 FOR ZERO          @Z30RIVS
         BZ    RECTST2             BRANCH FOR ZERO INCRMT      @Z30RIVS
         LA    R5,L32              LOAD REG5 WITH INCRMT       @Z40RIVS
         MR    R6,R5               SET REG7 TO SUM AREA        @Z30RIVS
RECTST2  ST    R7,RECTST4          SAVE INCRMT                 @Z30RIVS
         B     RETURN1             RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**                                                             @Z30RIVS
**       SPECIAL TO RESTORE SUMREC BACK TO ITS PROPER POSITION @Z30RIVS
**                                                             @Z30RIVS
RESTOR   STM   R5,R8,XSAVE1        SAVE WORK REGS              @Z30RIVS
         L     R5,RECTSTS          PICK UP PNTR TO SUM AREA    @Z30RIVS
         L     R6,RECTSTP          PICK UP PNTR TO DEV AREA    @Z30RIVS
         MVC   L0(L32,R6),L0(R5)   RESTORE SUM CNTR            @XM09337
         B     RETURN1             RETURN                      @Z30RIVS
**                                                             @Z30RIVS
EQUIP    STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z30RIVS
         SR    R6,R6               ZERO                        @Z30RIVS
         SR    R8,R8               REGS                        @Z30RIVS
         LR    R5,R3               GET ADDRESS OF SUMMARY COUNTERS
         TM    SNB00,H10           IS THIS EQUIPMET CHECK      @Z30RIVS
         BNO   RETURN1             NO RETURN,DO NOT ADD TO COUNTERS
EQUIPON  TM    SNB70,H30           IS THIS FORMAT 3            @Z30RIVS
         BO    EQUIPON1            YES                         @Z30RIVS
         TM    SNB70,H20           FORMAT 2                    @Z30RIVS
         BO    EQUIPON1            YES                         @Z30RIVS
         TM    SNB70,HF0           FORMAT 0                    @Z30RIVS
         BZ    EQUIPON1            YES                         @Z30RIVS
         TM    SNB70,H50           IS THIS FORMAT 5            @Z30RIVS
         BO    RETURN1             YES,DO NOT ADD TO COUNTERS  @Z30RIVS
         TM    SNB70,H10           FORMAT 1                    @Z30RIVS
         BNO   RETURN1             NO DO NOT ADD TO COUNTERS   @Z40RIVS
EQUIPON3 LA    R5,L4(R5)           POINT TO PROPER COUNTER     @Z40RIVS
         TM    SNB10,H80           IS THIS PERMANENT ERROR     @Z40RIVS
          BO    EQUPON4A               YES  PERM               @XA16795
          TM    SWITCHES+1,X'40'       TEST TEMP BIT HEADER    @XA16795
          BO    EQUIPON4               TEMP GO ADD             @XA16795
EQUPON4A  LA    R5,L2(R5)              BUMP POINT TO PERM CNTR @XA16795
EQUIPON4 BAL   R8,ADDUP            GO ADD TO TOTAL EQ DRIVE PERM
         B     RETURN1                                         @Z40RIVS
EQUIPON1 TM    SNB10,H80           IS THIS PERMANENT ERROR     @Z30RIVS
          BO    EQUPON2A               YES  PERM               @XA16795
          TM    SWITCHES+1,X'40'       TEST TEMP BIT HEADER    @XA16795
          BO    EQUIPON2               TEMP GO ADD             @XA16795
EQUPON2A  LA    R5,L2(R5)              BUMP POINT TO PERM CNTR @XA16795
EQUIPON2 BAL   R8,ADDUP            GO ADD TO TOTAL EQ CONT PERM@Z40RIVS
         B     RETURN1                                         @Z30RIVS
DATACKP  STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z30RIVS
         SR    R6,R6               ZERO                        @Z30RIVS
         LR    R5,R3               GET ADDRESS OF SUMMARY COUNTER
         TM    SNB00,H08           TEST FOR DATA CHECK OBR     @Z30RIVS
         BNO   RETURN1             NO RETURN                   @Z40RIVS
DATACKP1 TM    SNB10,H80           IS THIS DATA CHECK PERMANENT@Z30RIVS
          BO    DATACKP2               YES, GO ADD             @XA16795
          TM    SWITCHES+1,X'40'       TEST TEMP BIT HEADER    @XA16795
          BO    RETURN1                DON'T ADD TEMP          @XA16795
DATACKP2 BAL   R8,ADDUP            ADD TO DATA CHECK,PERM      @Z40RIVS
         B     RETURN1                                         @Z30RIVS
TVOLID   STM   R5,R8,XSAVE1        SAVE THE REGS               @Z30RIVS
         SR    R6,R6                                           @Z30RIVS
         SR    R7,R7                                           @Z30RIVS
         SR    R8,R8                                           @Z30RIVS
         L     R3,VOLPTR           PICK UP ADDR OF VOL CNT     @Z30RIVS
         LR    R5,R3               GET POINTER TO COUNTERS     @Z30RIVS
         TM    CLASRC,H90          IS THIS AN  MDR  RECORD     @Z30RIVS
         BNO   RETURN1             NO RETURN FOR ANOTHER       @Z40RIVS
TVOLID1A CLC   ZEROS(L6),JVOLID1   IS THIS VOL ID ZEROS        @Z30RIVS
         BE    RETURN1             YES GO GET ANOTHER          @Z30RIVS
         LA    R7,L50              SET NO OF VLO ID'S ALLOWED  @Z30RIVS
TVOLID2A CLC   L0(L6,R5),JVOLID1   COMPARE VOL ID TO FIRST     @Z30RIVS
         BNE   TVOLID4Z            UNEQUAL,BYPASS              @Z40RIVS
TVOLID4X CLC   L26(L2,R5),JCUAID   CHECK DEVICE ADDR           @Z40RIVS
         BE    TVOLID4A            EQ GO TO SUM                @Z40RIVS
TVOLID4Z CLC   L0(L6,R5),ZEROS     NO,IS VOL ID EQUAL TO BLANKS@Z30RIVS
         BE    TVOLID3A            YES THEN THIS IS FIRST ONE  @Z30RIVS
         LA    R5,L28(R5)      BUMP TO NEXT VOLID              @XA11914
         BCT   R7,TVOLID2A         LOOP TO FIRST TEST          @Z30RIVS
TVOLID3A MVC   L0(L6,R5),JVOLID1   MOVE IN VOL ID              @Z30RIVS
         MVC   L26(L2,R5),JCUAID   MOVE IN DEVICE ADDR         @Z30RIVS
TVOLID4A LA    R5,L6(R5)           BUMP POINTER TO COUNTERS    @Z30RIVS
         ICM   R6,L15,L0(R5)       SEEKS                       @Z40RIVS
         AH    R6,TSNB160          COUNT OF SEEKS              @Z40RIVS
         STCM  R6,L15,L0(R5)       SAVE TOTAL                  @Z40RIVS
         LA    R5,L4(R5)           BUMP CNTR PTR               @Z30RIVS
         SR    R6,R6               CLEAR REG                   @Z30RIVS
         SPACE 1                                               @Z30RIVS
         IC    R6,TSNB190          GET COUNT OF SEEK ERRORS    @Z30RIVS
         AH    R6,L0(R5)           ADD TO COUNTER              @Z30RIVS
         STCM  R6,L3,L0(R5)        SAVE TOTAL                  @Z40RIVS
         LA    R5,L2(R5)           BUMP COUNTER POINTER        @Z30RIVS
         SPACE 1                                               @Z30RIVS
         ICM   R6,L15,TSNB80       MOVE IN NUMBER OF BYTES READ@Z40RIVS
         ICM   R7,L15,L2(R5)       ADD BYTES READ              @Z40RIVS
         ALR   R6,R7               ADD BYTES READ              @Z40RIVS
         BC    NOCARRY,SAVBTRD     BR IF NO OVERFLOW           @Z30RIVS
**             IF THERE WAS A CARRY                            @Z30RIVS
         LH    R7,L0(R5)           LOAD OVERFLOW CNTR          @Z30RIVS
         LA    R7,L1(R7)           BUMP BY ONE                 @Z30RIVS
         STH   R7,L0(R5)           SAVE CNTR                   @Z30RIVS
**                                                             @Z30RIVS
SAVBTRD  STCM  R6,L15,L2(R5)       SAVE BYTES READ             @Z40RIVS
         LA    R5,L6(R5)           BUMP CNTR PTR               @Z30RIVS
         SPACE 1                                               @Z30RIVS
         ICM   R6,L15,L0(R5)       LOAD TOTAL                  @Z40RIVS
         AH    R6,TSNB140          UNCORR DATA CKS             @Z40RIVS
         STCM  R6,L15,L0(R5)       SAVE TOTAL                  @Z40RIVS
         LA    R5,L4(R5)           BUMP CNTR PTR               @Z30RIVS
         SPACE 1                                               @Z30RIVS
         SPACE 1
**
**       THE FOLLOWING ROUTINE DETERMINES IF THE COUNTS ARE MADE
**       FOR CHANNEL 'A' AND 'B' OR CHANNEL 'C' AND 'D'.       @Z30RIVS
**                                                             @Z30RIVS
         LA    R5,ABCNTR(R3)       SET PTR TO A/B CNTRS        @Z40RIVS
         CLI   TSNB180,H80         IS THIS REC FOR CHNL C/D    @Z30RIVS
         BNE   TVOLID5A            BRANCH TO TOTAL COUNTERS    @Z40RIVS
CHANCD   LA    R5,CDCNTR(R3)       SET POINTER TO C/D CNTRS    @Z30RIVS
**                                                             @Z30RIVS
TVOLID5A SR    R6,R6                                           @Z30RIVS
         IC    R6,TSNB200          GET COUNT OVERRUN A/C CMND  @Z30RIVS
         AH    R6,L0(R5)           ADD TO COUNTER              @Z30RIVS
         STCM  R6,L3,L0(R5)        SAVE TOTAL                  @Z40RIVS
         LA    R5,L2(R5)           BUMP COUNTER POINTER        @Z30RIVS
         SR    R6,R6                                           @Z30RIVS
         IC    R6,TSNB210          GET COUNT OVERRUN A/C DATA  @Z30RIVS
         AH    R6,L0(R5)           ADD TO COUNTER              @Z30RIVS
         STCM  R6,L3,L0(R5)        SAVE TOTAL                  @Z40RIVS
         LA    R5,L2(R5)           BUMP COUNTER POINTER        @Z30RIVS
         SR    R6,R6                                           @Z30RIVS
         IC    R6,TSNB220          GET COUNT OVERRUN B/D CMND  @Z30RIVS
         AH    R6,L0(R5)           ADD TO COUNTER              @Z30RIVS
         STCM  R6,L3,L0(R5)        SAVE TOTAL                  @Z40RIVS
         LA    R5,L2(R5)                                       @Z30RIVS
         SR    R6,R6                                           @Z30RIVS
         IC    R6,TSNB230          GET COUNT OVERRUN B/D DATA  @Z30RIVS
         AH    R6,L0(R5)           ADD TO COUNTER              @Z30RIVS
         STCM  R6,L3,L0(R5)        SAVE TOTAL                  @Z40RIVS
         B     RETURN1                                         @Z30RIVS
ADDUP    LH    R6,L0(R5)           PUT THE SUMMARY COUNTER IN REG 6
         LA    R6,L1(R6)           ADD ONE TO THE SUMMARY COUNTER
         STH   R6,L0(R5)           REPLACE COUNTER             @Z30RIVS
         LA    R5,L2(R5)           BUMP POINTER TO NEXT COUNTER@Z30RIVS
         BR    R8                  RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       SPECIAL TO SUM INTO THE FAULT SYMPTOM COUNTERS        @Z30RIVS
**                                                             @Z30RIVS
TFAULT0  STM   R5,R8,XSAVE1        SAVE WORK REG               @Z30RIVS
         TM    CLASRC,H30          TYPE REC AN OBR             @Z30RIVS
         BNO   RETURN1             ONLY USE OBR REC            @Z40RIVS
         TM    SNB70,H50          FORMAT 5?
         BO    RETURN1            YES, DON'T SUM
TFAULT1  L     R3,FLTPTR           PNT TO FLT SUM AREA         @Z30RIVS
         LA    R6,L1               SET OCCUR INCREMENT         @Z30RIVS
         LA    R7,L50              SET TO NUM OF SUMRECORD     @Z30RIVS
TFAULT2  CLC   L0(L2,R3),SNB220    IS FLT CODE EQ SUM REC      @Z30RIVS
         BE    TFAULT3             YES GO TEST CUA             @Z30RIVS
         CLC   L0(L2,R3),ZEROS     IS SUM REC ZERO             @Z30RIVS
         BE    TFAULT9             YES GO TEST REC CUA         @Z30RIVS
         B     TFAULT8             GO TO GET NEXT SUM REC      @Z30RIVS
TFAULT3  CLC   L2(L2,R3),CUA+L1    IS CUA EQ TO SUM REC        @Z30RIVS
         BE    TFAULT5             YES GO TO SUM               @Z30RIVS
TFAULT9  CLC   L2(L2,R3),ZEROS     IS REC CUA EQU TO ZEROS     @Z30RIVS
         BE    TFAULT4             YES STORE NEW REC           @Z30RIVS
TFAULT8  LA    R3,L40(R3)          STEP TO NEXT COUNTER        @Z427VLS
         BCT   R7,TFAULT2          GO TRY AGAIN                @Z30RIVS
         B     RETURN1             ALL ENTRIES FULL            @Z30RIVS
TFAULT4  MVC   L0(L2,R3),SNB220    MOVE FLT CODE TO REC        @Z30RIVS
         MVC   L2(L2,R3),CUA+L1    MOVE CUA TO SUM REC         @Z30RIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
TFAULT5  MVC   TFAULT7(L4),L4(R3)  INCREMENT                   @Z30RIVS
         A     R6,TFAULT7          NUM OF                      @Z30RIVS
         ST    R6,TFAULT7          OCCUR                       @Z30RIVS
         MVC   L4(L4,R3),TFAULT7   BY ONE                      @Z30RIVS
         CLC   L8(L4,R3),DAY       IS SUM DAY LATER RECDAY     @Z30RIVS
         BH    RETURN1             SUM DAY HIGH RETURN         @Z30RIVS
         CLC   L8(L4,R3),DAY       IS SUMDAY EQ RECDAY         @Z30RIVS
         BE    TFAULT6             GO TEST TIME DAY EQ         @Z30RIVS
         MVC   L8(L8,R3),DAY       MOVE IN NEW DAY/TIME        @Z30RIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
         B     RETURN1             REC UPDATED                 @Z30RIVS
TFAULT6  CLC   L12(L4,R3),HOUR     TEST SUM DAY/REC DAY        @Z30RIVS
         BNL   RETURN1             SUM REC HIGH OR EQ          @Z30RIVS
         MVC   L12(L4,R3),HOUR     MOVE IN NEW TIME TO SUM     @Z30RIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
**                                                             @Z30RIVS
RETURN1  LM    R5,R8,XSAVE1        RESTORE REGS                @Z30RIVS
         BR    R14                                             @Z30RIVS
**                                                             @Z30RIVS
         SPACE 1                                               @Z30RIVS
ENTRIES  DS    0F                                              @Z30RIVS
         SPECIAL RECTST0,00000000,SPACE=0                      @Z30RIVS
         SPECIAL XDATE1,00000000,SPACE=4 FROM TO DAY YEAR      @Z30RIVS
         SPECIAL ISTPER,00000000,SPACE=3 IS THIS A TPER REC    @Z30RIVS
         SPECIAL ISLOG,00000000,SPACE=3                        @Z30RIVS
         SUM   SNB02               ADD TO BUS OUT PARITY       @Z30RIVS
         SPECIAL EQUIP,00000000,SPACE=4 GO CHECK FOR           @Z30RIVS
**                                               EQUIPMENT CHECK IF ON
**                                               IS IT CONTROL UNIT
**                                                      PERMANENT OR
**                                                      TEMPORARY
**                                               OR IS IT DRIVE
**                                                      PERMANENT OR
**                                                      TEMPORARY
**                                               AND ADD TO COUNTERS
         SPECIAL DATACKP,00000000,SPACE=1 GO ADD TO DATA CHK PRM
         SUM   SNB05               ADD TO OVERRN COUNTER       @Z30RIVS
         SUM   SNB11               ADD TO INV TRK FMT CNT      @Z30RIVS
ENDLOG   EQU   *                                               @Z30RIVS
         SPECIAL RESTOR,00000000,SPACE=0                       @Z30RIVS
         SPECIAL TFAULT0,0,SPACE=20 SUM FOR SYMPTOM            @Z427VLS
         DC    XL1'FF'                                         @Z30RIVS
         DS    0H                                              @Z30RIVS
DOVOL    EQU   *                                               @Z30RIVS
         SPECIAL TVOLID,00000000,SPACE=14 LOOK FOR CORRECT     @Z40RIVS
         SPECIAL RESTOR,00000000,SPACE=0                       @Z30RIVS
         DC    XL1'FF'             VOL ID AND ADD T            @Z30RIVS
**                        APPROPRIATE COUNTERS                 @Z30RIVS
PEDIT    DS    0F                                              @Z30RIVS
**                                                             @Z30RIVS
&DSECT   SETC  'T3350'                                         @Z30RIVS
&CSECT   SETC  'PEDIT'                                         @Z30RIVS
         USING *,R9                                            @Z30RIVS
         USING T3350,R2                                        @Z30RIVS
         DC    A(PENTRY)                                       @Z30RIVS
         DC    C'IFCS3350'                                     @Z30RIVS
YR9PTR   DS    F                                               @Z30RIVS
YLABEL   DS    F                                               @Z30RIVS
         EJECT                                                 @Z30RIVS
***********************************************************************
**                                                                    *
**       THE FOLLOWING DSECT DESCRIBES COUNTERS USED TO TOTAL         *
**       INCIDENTS PERTAINING TO ANY ONE PHYSICAL ADDRESS.            *
**       INDIVIDUAL ENTRIES ARE MADE FOR UP TO 20 VOLUME LABELS       *
**       AFTER 20,THE REMAINING ARE COMPILED IN THE 21ST ENTRY.       *
**       ALSO, IN THE 21ST ENTRY THERE ARE COUNTERS FOR TWO AND       *
**       FOUR CHANNEL SWITCHES IF A HEX'80' IS FOUND IN BYTE 18       *
**       OF THE INPUT RECORD,COUNTS ARE MADE FOR CHANNEL 'C' AND 'D'. *
**       IF A HEX'00' IS FOUND,COUNTS ARE KEPT FOR CHNL 'A' AND 'B'.  *
**                                                                    *
***********************************************************************
T3350    DSECT                                                 @Z30RIVS
         DS    3H                                              @Z30RIVS
         DSGEN (YDUMA,16),(YNOREC,16)                          @Z30RIVS
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)         @Z30RIVS
         DSGEN (YCPU,16),(YSMSW,16)                            @Z30RIVS
         DSGEN (TDAY1,32),(TDAY2,32)                           @Z30RIVS
T3350A   DSGEN (TSTAT,16),(TYPDEV,32),(TDACHKC,16)             @Z40RIVS
         DSGEN (TDACHKR,16),(TSKCHK,16)                        @Z30RIVS
         DSGEN (TBUSOPA,16),(TEQCNT,16)                        @Z30RIVS
         DSGEN (TEQCNP,16),(TEQDRT,16)                         @Z30RIVS
         DSGEN (TEQDRP,16),(TDATCHP,16)                        @Z30RIVS
         DSGEN (TOVERRN,16),(TINVTRKF,16),(TCUA,16)            @Z30RIVS
         DSGEN (TSEEK,16)                                      @Z30RIVS
         DSGEN (SUMREC,256,0,15)                               @Z427VLS
**                                                             @Z30RIVS
**       SUM COUNTERS FOR VOLID SUMMARY                        @Z30RIVS
**                                                             @Z30RIVS
T3350B   DSGEN (TVOLID1,48),(TSEEK1,32)                        @Z40RIVS
         DSGEN (TSEEKER1,16),(TBTRDO1,16)                      @Z30RIVS
         DSGEN (TBYTRD1,32),(TUNCRD1,32)                       @Z30RIVS
         DSGEN (TCORRD1,32),(TVCUA,16)                         @Z30RIVS
         DSGEN (TVOLID,224,2,51)                               @Z427VLS
         DSGEN (TOCACA,16)         CNTR FOR 'A' CMD            @Z30RIVS
         DSGEN (TOCADA,16),(TOCBCA,16) 'A' DATA AND CHNL 'B' CMD
         DSGEN (TOCBDA,16),(TOCCCA,16) 'B' DATA AND CHNL 'C' CMD
         DSGEN (TOCCDA,16),(TOCDCA,16) 'C' DATA AND CHNL 'D' CMD
         DSGEN (TOCDDA,16)         CNTR FOR 'D' DATA           @Z30RIVS
         SPACE 1                                               @Z30RIVS
**                                                             @Z30RIVS
**       SUM COUNTERS FOR FAULT SYMPTOM SUMMARY                @Z30RIVS
**                                                             @Z30RIVS
FLTSYM0  DSGEN (SYMCD,16),(SYMCUA,16)                          @Z30RIVS
         DSGEN (SYMOCR,32)                                     @Z30RIVS
         DSGEN (SYMDAY,32),(SYMHR,32)                          @Z30RIVS
         DSGEN (SYMSNS0,48),(SYMSNS1,48),(SYMSNS2,48),(SYMSNS3,48)
T3350C   DSGEN (FLTSYM,320,1,50)                               @Z427VLS
**                                                             @Z30RIVS
**     THE FOLLOWING EQUATES ARE  FOR DISPLACEMENTS FROM THE FIRST
**             VOL SER COUNTERS TO THE CHANNEL OVERRUN COUNTERS
**                                                             @Z30RIVS
ABCNTR   EQU   TOCACA-TVOLID1      DIS TO A/B COUNTERS         @Z30RIVS
CDCNTR   EQU   TOCCCA-TVOLID1      DIS TO C/D COUNTERS         @Z30RIVS
         SPACE 1                                               @Z30RIVS
IFCS3350 CSECT                                                 @Z30RIVS
XR9PTR   DC    F'0'                                            @Z30RIVS
XLABELP  DC    F'0'                                            @Z30RIVS
**                                                             @Z30RIVS
**                                                             @Z30RIVS
**       RESTORE REGISTERS USED BY ROUTINES IN THIS MODULE     @Z30RIVS
**                                                             @Z30RIVS
RETURN   LM    R5,R8,XSAVE         RESTORE REGS                @Z30RIVS
**                                                             @Z40RIVS
**       NO OP RETURN                                          @Z40RIVS
**                                                             @Z40RIVS
SKIPPER  BR    R14                                             @Z40RIVS
         SPACE 1                                               @Z30RIVS
MOVDEV   STM   R5,R8,XSAVE         SAVE REGS                   @Z30RIVS
         LA    R5,DEVTABLE         LOAD ADDR OF DEVICE TAB     @Z30RIVS
         LA    R6,L1               LOAD # OF POSSIBLE DEV      @Z30RIVS
         TM    L0(R4),H90          DO THE COUNTS REPRESENT     @Z30RIVS
**                                       TPER RECORDS          @Z30RIVS
         BO    TDEVCHK             YES - BR TO FIND DEV TYP    @Z30RIVS
         SPACE 1                                               @Z30RIVS
ODEVCHK  CLC   L1(L2,R4),L0(R5)    IS DEV SUPPORTED            @Z30RIVS
         BE    DEVFND              YES - BR TO MOVE DEV TYP    @Z30RIVS
         LA    R5,L10(R5)          BUMP PTR TO NXT TYP         @Z30RIVS
         BCT   R6,ODEVCHK          BR TO CHECK NXT TYP         @Z30RIVS
         B     MOVEUNKN            BR - DEVICE IS UNKNOWN      @Z30RIVS
         SPACE 1                                               @Z30RIVS
TDEVCHK  CLC   L1(L1,R4),L2(R5)    IS DEV SUPPORTED            @Z30RIVS
         BE    DEVFND              YES - BR TO MOVE DEV TYP    @Z30RIVS
         LA    R5,L10(R5)          BUMP PTR TO NXT TYP         @Z30RIVS
         BCT   R6,TDEVCHK          BR TO CHK NXT RECORD ID     @Z30RIVS
**                                                             @Z30RIVS
         SPACE 1                                               @Z30RIVS
**       DEVICE IS NOT SUPPORTED MOVE 'UNKNOWN' TO PRINT LINE  @Z30RIVS
**                                                             @Z30RIVS
MOVEUNKN MVC   L8(L7,R3),UNKNOWN   MOVE 'UNKNOWN' TO PRINT     @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
         SPACE 1                                               @Z30RIVS
DEVFND   MVC   L8(L7,R3),L3(R5)    MOVE DEVICE TYPE TO         @Z30RIVS
**                   PRINT LINE                                @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
         SPACE 2                                               @Z30RIVS
**                                                             @Z30RIVS
**       CHECK FOR CPU AND SERIAL NUMBER                       @Z30RIVS
**                                                             @Z30RIVS
SETCPUNO STM   R5,R8,XSAVE         SAVE REGS                   @Z30RIVS
         SR    R5,R5               CLEAR REG 5                 @Z30RIVS
         IC    R5,L0(R4)           PICK UP MODEL NUMBER        @Z30RIVS
         SLL   R5,L8               INTO                        @Z30RIVS
         IC    R5,L1(R4)           R5                          @Z30RIVS
         LTR   R5,R5               TEST FOR ZERO               @Z30RIVS
         BNZ   RETURN              RETURN                      @Z30RIVS
         LR    R5,R3               PUT LINE ADDRESS IN R5      @Z30RIVS
         LA    R6,L46              OFFSET IN REG 6             @Z30RIVS
         SR    R5,R6               SUBTRACT OFFSET FROM POINTER@Z30RIVS
         MVC   0(L6,R5),SHARED       SAY MODEL SHARED          @XA20374
         B     RETURN              RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       SET THE DATE READY FOR PRINT                          @Z30RIVS
**                                                             @Z30RIVS
SETDATE  UNPK  XSAVE(L8),L1(L3,R4) UNPACK THE DATE             @Z30RIVS
         MVC   L0(L3,R3),XSAVE+L5  MOVE DAY                    @Z30RIVS
         MVC   L6(L2,R3),XSAVE+L3  MOVE YEAR                   @Z30RIVS
         BR    R14                                             @Z30RIVS
**                                                             @Z30RIVS
**       CONVERT COUNTERS FROM HEX TO DECIMAL READY FOR PRINT  @Z30RIVS
**                                                             @Z30RIVS
CONV1    STM   R5,R8,XSAVE         SAVE REGISTERS              @Z30RIVS
         XC    READYP(L8),READYP   CLEAR UNPACK BUFFER         @Z30RIVS
         SR    R6,R6               ZERO REG                    @Z30RIVS
         LH    R6,L0(R4)           LOAD DATA TO BE CONVERTED   @Z30RIVS
CONV2    CVD   R6,READYP           CONVERT ERRORCNTRTO DECI    @Z30RIVS
         UNPK  READYP(L5),READYP+L5(L3) UNPACK DECI COUNT      @Z30RIVS
         OI    READYP+L4,CLRSGN    CLEAR SIGN                  @Z30RIVS
         MVC   L0(L4,R3),READYP+L1 MOVE COUNTER READY TO PRINT @Z30RIVS
         B     RETURN                                          @Z30RIVS
PRVOLS   STM   R4,R8,XSAVEV                                    @Z30RIVS
         L     R4,CNTDN2           LOAD ADDR OF NEXT VOLREC    @Z30RIVS
         LR    R5,R3                                           @Z30RIVS
         CLC   L0(L6,R4),ZEROS                                 @Z30RIVS
         BE    NORETVOL                                        @Z30RIVS
**                                                             @Z30RIVS
         MVC   L0(L6,R5),L0(R4)    MOVE INTO PRINT VOLID       @Z30RIVS
         LA    R5,L13(R5)          INCREMENT PRNT LINE PTR     @Z30RIVS
         IC    R6,L27(R4)          PICK UP DEVICE ADDR         @Z30RIVS
         SLL   R6,L28              SHIFT OUT GARBAGE           @Z30RIVS
         SRL   R6,L28              SHIFT UNIT TO LOW ORDER     @Z30RIVS
         LA    R6,CHARS(R6)        PICK UP ADDRESS OF CHAR     @Z30RIVS
         MVC   L0(L2,R5),CUANR+L1  GET CHAN AND CU             @Z30RIVS
         MVC   L2(L1,R5),L0(R6)    GET UNIT NUMBER             @Z30RIVS
         LA    R4,L6(R4)           POINT TO TOTAL SEEKS        @Z30RIVS
         LA    R5,L13(R5)                                      @Z30RIVS
         ICM   R6,L15,L0(R4)       LOAD SEEKS                  @Z40RIVS
         SRL   R6,L10              REDUCE TO 'X1000'           @Z30RIVS
         L     R7,TOTSKS           LOAD TOTAL SEEKS            @Z30RIVS
         AR    R7,R6               ADD THIS CNT TO TOTAL       @Z30RIVS
         ST    R7,TOTSKS           SAVE TOTAL                  @Z30RIVS
         BAL   R8,CONVH3           PUT SEEKS IN PRINT LINE     @Z30RIVS
**                                                             @Z30RIVS
         LA    R4,L4(R4)           BUMP CNTR PTR               @Z30RIVS
         SPACE 1                                               @Z30RIVS
         LH    R6,L0(R4)           LOAD SEEK ERRS              @Z30RIVS
         LH    R7,TOTSKERS         LOAD TOTAL SEEK ERRS        @Z30RIVS
         AR    R7,R6               ADD THIS VOL TO TOTAL       @Z30RIVS
         STH   R7,TOTSKERS         SAVE NEW TOTAL              @Z30RIVS
         BAL   R8,CONVH2           PUT SEEK ERRS IN PRINT      @Z30RIVS
**                                                             @Z30RIVS
         LA    R4,L2(R4)           BUMP CNTR PTR               @Z30RIVS
         SPACE 1                                               @Z30RIVS
         ICM   R6,L15,L2(R4)       LOAD BYT RD                 @Z40RIVS
         L     R7,TOTMEGRD         LOAD TOTAL                  @Z30RIVS
         AR    R7,R6               ADD THIS VOL TO TOTAL       @Z30RIVS
         ST    R7,TOTMEGRD         SAVE NEW TOTAL              @Z30RIVS
         ST    R6,SAVMEG           SAVE MEG READ               @Z30RIVS
         BAL   R8,CONVH2           PUT MEG READ IN PRINT       @Z30RIVS
**                                                             @Z30RIVS
         LA    R4,L6(R4)           BUMP CNTR PTR               @Z30RIVS
         SPACE 1                                               @Z30RIVS
         ICM   R6,L15,L0(R4)       LOAD RETRY READ ERRS        @Z40RIVS
         BAL   R8,CONVH2           PUT COUNT IN PRINT          @Z30RIVS
         LTR   R6,R6               ANY COUNT ??                @Z30RIVS
         BNZ   GETRETRD            YES - BR                    @Z30RIVS
**                                                             @Z30RIVS
         MVC   L13(L5,R5),NA       PUT N/A FOR MEG RD/R.ERR    @Z30RIVS
         LA    R5,L13(R5)          BUMP PRINT POS PTR          @Z30RIVS
         B     CHKCORRD            BR TO PROCESS CORR READ     @Z30RIVS
**                                                             @Z30RIVS
GETRETRD L     R7,TOTRETRD         LOAD TOTAL RETRY READ ER    @Z30RIVS
         AR    R7,R6               ADD THIS VOL CNT TO TOT     @Z30RIVS
         ST    R7,TOTRETRD         SAVE TOTAL                  @Z30RIVS
**                                                             @Z30RIVS
         L     R7,SAVMEG           LOAD MEG READ               @Z30RIVS
         LR    R8,R6               LOAD RETRY READ ERRS        @Z30RIVS
         SR    R6,R6               CLEAR REG                   @Z30RIVS
         DR    R6,R8               DIVIDE MEG READ/RET RD      @Z30RIVS
         LR    R6,R7               LOAD QUOTIENT               @Z30RIVS
         BAL   R8,CONVH2           PUT RESULT IN PRINT         @Z30RIVS
         SPACE 1                                               @Z30RIVS
CHKCORRD LA    R4,L4(R4)           BUMP CNTR PTR               @Z30RIVS
         ICM   R6,L15,L0(R4)       LOAD CORR RD ERRS           @Z40RIVS
         BAL   R8,CONVH2           COUNT TO PRINT              @Z30RIVS
         LTR   R6,R6               WAS COUNT ZERO ?            @Z30RIVS
         BNZ   GETCORRD            NO - BR TO HANDLE           @Z30RIVS
**                                                             @Z30RIVS
         MVC   L13(L5,R5),NA       MOVE N/A FOR MEG/CORR RD    @Z30RIVS
         B     RETVOL              BR TO RETURN                @Z30RIVS
**                                                             @Z30RIVS
GETCORRD L     R7,TOTCORRD         LOAD TOTAL SO FAR           @Z30RIVS
         AR    R7,R6               ADD THIS VOL TO TOTAL       @Z30RIVS
         ST    R7,TOTCORRD         SAVE NEW TOTAL              @Z30RIVS
**                                                             @Z30RIVS
         L     R7,SAVMEG           LOAD MEG READ               @Z30RIVS
         LR    R8,R6               LOAD CORR READ ERRS         @Z30RIVS
         SR    R6,R6               CLEAR REG                   @Z30RIVS
         DR    R6,R8               DIVIDE MEG READ/COR RD      @Z30RIVS
         LR    R6,R7               LOAD QUOTIENT               @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         B     RETVOL              BR TO RETURN                @Z30RIVS
         SPACE 2                                               @Z30RIVS
**                                                             @Z30RIVS
CONVH2   LA    R5,L13(R5)          BUMP PRINT POS PTR          @Z30RIVS
CONVH3   XC    READYP(L8),READYP                               @Z30RIVS
         CVD   R6,READYP                                       @Z30RIVS
         UNPK  READYP(L5),READYP+L5(L3)                        @Z30RIVS
         OI    READYP+L4,CLRSGN                                @Z30RIVS
         MVC   L0(L5,R5),READYP                                @Z30RIVS
         BR    R8                                              @Z30RIVS
**                                                             @Z30RIVS
**                                                             @Z30RIVS
         EJECT                                                 @Z30RIVS
**                                                             @Z30RIVS
**       THE FOLLOWING INITIALIZES THE TOTALS FOR THE VOLID SUMMARY
**                                                             @Z30RIVS
GETTOTS  STM   R4,R8,XSAVEV        SAVE REGS                   @Z30RIVS
         LR    R5,R3               LOAD PRINT POS PTR          @Z30RIVS
         SPACE 1                                               @Z30RIVS
         L     R6,TOTSKS           LOAD TOTAL SEEKS            @Z30RIVS
         BAL   R8,CONVH3           PUT IN PRINT LINE           @Z30RIVS
         SPACE 1                                               @Z30RIVS
         LH    R6,TOTSKERS         LOAD TOTAL SEEK ERRORS      @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         SPACE 1                                               @Z30RIVS
         L     R6,TOTMEGRD         LOAD TOTAL MEG. READ        @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         SPACE 1                                               @Z30RIVS
         L     R6,TOTRETRD         LOAD TOTAL RETRY READ ERS   @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         SPACE 1                                               @Z30RIVS
         LTR   R6,R6               WERE THERE RETRY RD ERRS    @Z30RIVS
         BZ    NORETRD             NO - BR                     @Z30RIVS
         L     R7,TOTMEGRD         LOAD TOTAL MEG READ         @Z30RIVS
         LR    R8,R6               LOAD RETRY READ ERRS        @Z30RIVS
         SR    R6,R6               CLEAR REG                   @Z30RIVS
         DR    R6,R8               DIVIDE MEG RD/RET RD        @Z30RIVS
         LR    R6,R7               LOAD QUOTIENT               @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         B     GETCRTOT            BR TO CONTINUE              @Z30RIVS
**                                                             @Z30RIVS
NORETRD  LA    R5,L13(R5)          BUMP PRINT POS PTR          @Z30RIVS
         MVC   L0(L5,R5),NA        MOVE N/A TO PRINT LINE      @Z30RIVS
         SPACE 1                                               @Z30RIVS
GETCRTOT L     R6,TOTCORRD         LOAD CORR READ ERR TOTAL    @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         SPACE 1                                               @Z30RIVS
         L     R8,TOTCORRD         LOAD CORR READ TOTAL        @Z30RIVS
         LTR   R8,R8               IS IT ZERO ?                @Z30RIVS
         BZ    NOCORRD             YES - BR                    @Z30RIVS
**                                                             @Z30RIVS
         L     R7,TOTMEGRD         LOAD MEG READ TOTAL         @Z30RIVS
         SR    R6,R6               CLEAR REG                   @Z30RIVS
         DR    R6,R8               DIVIDE MEG RD/CORR RD       @Z30RIVS
         LR    R6,R7               LOAD QUOTIENT               @Z30RIVS
         BAL   R8,CONVH2           PUT IN PRINT LINE           @Z30RIVS
         B     CLRTOTS             BR TO CONTINUE              @Z30RIVS
**                                                             @Z30RIVS
NOCORRD  MVC   L13(L5,R5),NA       MOVE N/A TO PRINT           @Z30RIVS
         SPACE 1                                               @Z30RIVS
CLRTOTS  XC    TOTSKS(TLEN),TOTSKS CLEAR ALL TOTAL AREAS       @Z30RIVS
         B     RETVOL              BR TO RETURN                @Z30RIVS
         EJECT                                                 @Z30RIVS
**                                                             @Z30RIVS
**                                                             @Z30RIVS
GETABCDD STM   R4,R8,XSAVEV        SAVE REGS                   @Z30RIVS
         LR    R5,R3                                           @Z30RIVS
         LA    R7,L4               NO. OF POSSIBLE CHANNELS    @Z30RIVS
         SR    R6,R6
SETCHDTA ICM   R6,L3,L0(R4)        LOAD NO OF DATA OVER.       @Z40RIVS
         BAL   R8,CONVH3                                       @Z30RIVS
**                                                             @Z30RIVS
         LA    R4,L4(R4)           BUMP PNTR TO NEXT DTA CTR   @Z30RIVS
         LA    R5,L29(R5)          BUMP PNTR TO NEXT PRNT POS  @Z30RIVS
         BCT   R7,SETCHDTA         BRANCH IF THERE ARE MORE    @Z30RIVS
**                                                             @Z30RIVS
RETVOL   LM    R4,R8,XSAVEV                                    @Z40RIVS
         BR    R14                                             @Z40RIVS
**                                                             @Z30RIVS
NORETVOL LM    R4,R8,XSAVEV                                    @Z30RIVS
         SR    R15,R15                                         @Z30RIVS
         BR    R14                                             @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO SAVE CHANEL AND CONTROL UNIT FOR SUBSYSTEM @Z30RIVS
**                                                             @Z30RIVS
CUAN0    STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         LA    R5,L10              LOAD DECREMENT FOR R3       @Z30RIVS
         SR    R3,R5               PNT TO START OF PRNT LI     @Z30RIVS
         MVC   CUANR+L1(L3),L1(R3) MOVE CHANEL AND CU          @Z30RIVS
         SR    R15,R15             CLR FOR NO PRINT            @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       SORT FOR VOLID TO PUT HIGHEST ERROR RATE TO PRINT FIRST
**                                                             @Z30RIVS
SORTV0   STM   R5,R8,XSAVE         SAVE WORK REG               @Z30RIVS
         ST    R4,SRTSAV           SAVE REG 4                  @Z30RIVS
         ST    R4,CNTDN2           SAVE VOL PNTR FOR PRT       @Z30RIVS
SORTV1   SR    R8,R8               CLR REG 8 FOR SWITCH        @Z30RIVS
         L     R4,SRTSAV           SET 4 TO START OF SUM       @Z30RIVS
         LA    R5,L28(R4)          SET 5 TO NEXT RECORD        @XM09337
         LA    R7,L49              SET 7 TO NO.REC-1           @Z30RIVS
SORTV2   CLC   L0(L6,R5),ZEROS     IS THERE A VOLID            @Z30RIVS
         BE    SORTV4              NO BR TO TEST SW            @Z30RIVS
         CLC   L12(L2,R4),L12(R5)  TEST FOR HIGH COUNT         @Z30RIVS
         BNH   SORTV3              BRCH IF HIGH REC FIRST      @Z30RIVS
         LA    R8,L15              SET MOVE SWITCH             @Z30RIVS
         XC    L0(L28,R4),L0(R5)   RECORD                      @XM09337
         XC    L0(L28,R5),L0(R4)   SWAP                        @XM09337
         XC    L0(L28,R4),L0(R5)   FOR SORT                    @XM09337
SORTV3   LA    R4,L28(R4)          POINT TO NEXT RECORD        @XM09337
         LA    R5,L28(R5)          POINT TO NEXT RECORD+1      @XM09337
         BCT   R7,SORTV2           MORE TO TEST                @Z30RIVS
SORTV4   LTR   R8,R8               TEST PASS SWITCH            @Z30RIVS
         BZ    RETURN              ALL REC TESTED/MOVED        @Z30RIVS
         B     SORTV1              CONTINUE TO TEST/MOVE       @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO PRINT 50 VOLID SUM ENTRIES                 @Z30RIVS
**                                                             @Z30RIVS
CNTDN0   STM   R5,R8,XSAVE         SAVE THE REGS               @Z30RIVS
         SR    R5,R5               CLEAR REG                   @Z30RIVS
         L     R5,CNTDN3           LOAD WITH 50                @Z30RIVS
         BCT   R5,CNTDN1           BRANCH FOR 50               @Z30RIVS
CNTDN5   SR    R15,R15             CLEAR FOR NO PRINT          @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
CNTDN1   ST    R5,CNTDN3           SAVE R 5                    @Z30RIVS
         L     R5,CNTDN2           GET CNTDN VALUE             @Z30RIVS
         LA    R5,L28(R5)          INCREMENT BY 28
         CLC   L0(L6,R5),ZEROS     TESTFOR VOLID EQ ZERO       @Z30RIVS
         BE    CNTDN5              BRANCH NONE TO PRNT         @Z30RIVS
         ST    R5,CNTDN2           PUT IT BACK                 @Z30RIVS
         LA    R5,SUMTA3-L4        GET LINE ADDRESS            @Z30RIVS
         L     R6,ASUMTA4          GET LABEL ADDRESS           @Z30RIVS
         STM   R5,R6,YR9PTR        MAKE THEM CURRENT           @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
         SPACE 1
*
**       ROUTINE TO DETERMINE IF NECESSARY TO EDIT FLTYSYM
*
FLTTST0  STM   R5,R8,XSAVE         SAVE WORK REGS
         LA    R4,L40(R4)          INCREMENT TO FIRST RECORD   @Z427VLS
         CLC   L0(L4,R4),ZEROS     ARE SYM AND CUA ZERO
         BNE   FLTTST1             NO, CONTINUE
         LA    R7,SUMTAC-4         YES, PICK UP NEW LINE
         LA    R8,SUMTAD-1         AND LABEL ADDRESSES
         STM   R7,R8,YR9PTR        TO START FROM
FLTTST1  B     RETURN              RETURN
         SPACE 1
         SPACE 1                                               @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE FOR SORTING THE FAULT SYMPTOM ENTERIES        @Z30RIVS
**                                                             @Z30RIVS
FLTSRT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         ST    R4,FLTSRT8          SAVE PNTR TO EDIT AREA      @Z30RIVS
         SR    R6,R6               CLEAR FOR SW                @Z30RIVS
FLTSRT1  LA    R4,L40(R4)          INCREMENT TO FIRST REC      @Z427VLS
         SR    R7,R7               CLR MOVE SWITCH             @Z30RIVS
         LA    R8,L50              SET R8 TO NUM REC           @Z30RIVS
FLTSRT2  CLC   L42(L2,R4),ZEROS    IS DEV ADDR ZERO            @Z427VLS
         BE    FLTSRT6             END REC AREA                @Z30RIVS
FLTSRT3  CLC   L2(L2,R4),L42(R4)   COMP CUA/SYM                @Z427VLS
         BNH   FLTSRT4             BRCH IF ASCENDING ORDER     @Z30RIVS
         XC    L0(L40,R4),L40(R4)  SWAP RECORD                 @Z427VLS
         XC    L40(L40,R4),L0(R4)  PUT IN ASCENDING            @Z427VLS
         XC    L0(L40,R4),L40(R4)  ORDER                       @Z427VLS
         LA    R7,L15              TURN MOVE SWITCH ON         @Z30RIVS
FLTSRT4  LA    R4,L40(R4)          INCREMENT FOR NEXT TEST     @Z427VLS
         BCT   R8,FLTSRT2          GO MAX 50 PASSES            @Z30RIVS
FLTSRT6  LTR   R7,R7               MOVE SWITCH SET             @Z30RIVS
         BZ    FLTSRT7             GO TO END                   @Z30RIVS
         L     R4,FLTSRT8          RESET R4 TO START           @Z30RIVS
         B     FLTSRT1             GO CYCLE ONCE MORE          @Z30RIVS
FLTSRT7  L     R4,FLTSRT8          NO RESTORE R4               @Z30RIVS
         LTR   R6,R6               IS THIS FIRST SORT          @Z30RIVS
         BNZ   FLTSRT9             NO GO TO COMPLETION         @Z30RIVS
         LA    R6,L15              YES SET SORT SWITCH         @Z30RIVS
         NI    FLTSRT3+L3,HEXFD    ALTER CLC INSTR             @Z30RIVS
         NI    FLTSRT3+L5,HEXFD    FOR NEXT SORT               @XM09337
         B     FLTSRT1             SORT ON SYM CODE            @Z30RIVS
FLTSRT9  MVC   L0(L40,R4),L40(R4)  MOVE FIRST REC TO EDIT      @Z427VLS
         LA    R4,L40(R4)          INCR R4 BY REC LENGTH       @Z427VLS
         ST    R4,FLTMOV2          KEEP USE BY MOVE RTNE       @Z30RIVS
         LA    R6,L48              SET REG 6 TO NUM REC        @Z30RIVS
         ST    R6,FLTMOV6          KEEP USE BY MOVE RTNE       @Z30RIVS
         B     RETURN                                          @Z30RIVS
         SPACE 1                                               @Z30RIVS
**                                                             @Z30RIVS
**      ROUTINE TO MOVE NEXT REC FROM SUM AREA TO EDIT AREA TO PRINT
**                                                             @Z30RIVS
FLTMOV0  STM   R5,R8,XSAVE         SAVE WORK REG               @Z30RIVS
         L     R5,FLTMOV2          PICK UP PNTR LAST REC       @Z30RIVS
         LA    R5,L40(R5)          POINT TO NEW REC            @Z427VLS
         ST    R5,FLTMOV2          SAVE PNTR                   @Z30RIVS
         CLC   L2(L2,R5),ZEROS     IS REC EQ ZERO              @Z30RIVS
         BE    FLTMOV3             BRNCH PREPARE NEW EDIT      @Z30RIVS
FLTMOV1  MVC   L0(L40,R4),L0(R5)   MOVE NEW REC TO EDIT        @Z427VLS
         LA    R7,SUMTA7-L4        BACK UP LINE AND            @Z30RIVS
         L     R8,ASUMTA8          LABEL PNTR TO               @Z30RIVS
         STM   R7,R8,YR9PTR        PRINT NEXT REC              @Z30RIVS
         L     R6,FLTMOV6          SET R6 TO NUM REC LEFT      @Z30RIVS
         BCT   R6,FLTMOV7          REDUCE COUNT BY ONE         @Z30RIVS
         B     FLTMOV3             END FIRST SECTION           @Z30RIVS
FLTMOV7  ST    R6,FLTMOV6          SAVE NUM REC REMAIN         @Z30RIVS
         SR    R15,R15             CLR FOR NO PRINT            @Z30RIVS
FLTMOV3  B     RETURN              GO PRINT NEXT RECORD        @Z30RIVS
         EJECT                                                 @Z30RIVS
**                                                             @Z30RIVS
**       EDIT CYCLE TO PRINT 16 SUM COUNTERS                   @Z30RIVS
**                                                             @Z30RIVS
EDTFA0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         L     R7,EDTFA4           GET COUNTER                 @Z30RIVS
EDTFA1   L     R5,EDTFA5           PICK UP LAST PRT            @Z30RIVS
         LA    R5,L32(R5)          INCREMENT TO NEXT           @XM09337
         ST    R5,EDTFA5           SAVE LAST REC PRT           @Z30RIVS
         OC    L28(L2,R5),L28(R5)  TEST CUA                    @Z30RIVS
         BNZ   EDTFA2              BRCH IF NO REC INFO         @Z30RIVS
         BCT   R7,EDTFA1           REDUCE REC CNTR             @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
EDTFA2   BCT   R7,EDTFA3           REDUCE REC CNTR             @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
EDTFA3   MVC   L0(L32,R4),L0(R5)   MOVE REC TO PRNT            @XM09337
         ST    R7,EDTFA4           SAVE REC NO                 @Z30RIVS
         LA    R7,SUMTA1-L4        LOAD LINE ADDR-4            @Z30RIVS
         L     R8,ASUMTA2          LOAD LABEL ADDR-1           @Z30RIVS
         STM   R7,R8,YR9PTR        STORE NEW PNTR              @Z30RIVS
         SR    R15,R15             CLEAR FOR NO PRNT           @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
EDTFA6   STM   R5,R8,XSAVE         SAVE WORK REG               @Z30RIVS
         L     R7,EDTFA4           PICK UP NO. REC LEFT        @Z30RIVS
         LR    R5,R4               LOAD SUM AREA PNTR          @Z30RIVS
EDTFA7   LA    R5,L32(R5)          INCRM TO REC AREA           @XM09337
         ST    R5,EDTFA5           SAVE PNTR                   @Z30RIVS
         OC    L28(L2,R5),L28(R5)  TEST FOR CUA                @Z30RIVS
         BNZ   EDTFA8              GO MOVE REC                 @Z30RIVS
         BCT   R7,EDTFA7           NO CUA TEST NEXT REC        @Z30RIVS
         LA    R7,L1               NO REC SET R7 TO ONE        @Z30RIVS
         ST    R7,EDTFA4           STORE TO PRNT ZERO          @Z30RIVS
         ST    R4,EDTFA5           SET TO START OF SUM AREA    @Z30RIVS
         B     RETURN              NO REC                      @Z30RIVS
EDTFA8   ST    R7,EDTFA4           SET TO NO. REC LEFT         @Z30RIVS
         MVC   L0(L32,R4),L0(R5)   MOVE FIRST REC TO PRNT      @XM09337
         B     RETURN                                          @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINES TO INCREMENT OR DECREMENT PRNT LINE PNTR     @Z30RIVS
**                                                             @Z30RIVS
REPNT4   BCTR  R3,R0               DECREMENT R3 BY 5           @XM09337
REPNT1   BCTR  R3,R0               DECREMENT BY ONE            @Z40RIVS
REPNT2   BCTR  R3,R0               DECREMENT BY ONE            @Z40RIVS
         BCTR  R3,R0               DECREMENT BY ONE            @Z40RIVS
REPNT0   BCTR  R3,R0               DECREMENT BY ONE            @Z40RIVS
         BR    R14                 RETURN                      @Z30RIVS
REPNT3   LA    R3,L15(R3)          INCR PRNT LINE PNTR +15     @Z30RIVS
         BR    R14                 RETURN                      @Z30RIVS
REPNT5   LA    R3,L7(R3)           INCREMENT LINE PNTR         @XM09337
         BR    R14                 RETURN                      @XM09337
**                                                             @Z30RIVS
**       ROUTINE TO MOVE DATE TO FAULT SYMPTOM PRINTLINE       @Z30RIVS
**                                                             @Z30RIVS
FLTSYDA  UNPK  XSAVE(L8),L1(L3,R4) UNPACK THE DATE             @Z30RIVS
         MVC   L0(L3,R3),XSAVE+L5  MOVE JULIAN DATE            @Z30RIVS
         MVI   L3(R3),SLASH        MOVE SEPARATOR              @Z30RIVS
         MVC   L4(L2,R3),XSAVE+L3  MOVE YEAR                   @Z30RIVS
         LA    R4,L4               LOAD R4 WITH 4              @Z427VLS
         SR    R3,R4               REDUCE PRINT LINE PNTR      @Z30RIVS
         BR    R14                 RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO PREPARE TO CONVERT OCCUR COUNT TO PRINTABLE@Z30RIVS
**       FORMAT AND BLANK LEADING ZERO ON DEVICE ADDRESS FAULT SUM
**                                                             @Z30RIVS
GETOCCUR STM   R5,R8,XSAVE         SAVE WORK REG               @Z30RIVS
         LA    R5,L20              BLANK OUT                   @Z30RIVS
         LR    R6,R3               LEADING ZERO                @Z30RIVS
         SR    R6,R5               ON DEVICE                   @Z30RIVS
         MVI   L0(R6),BLANK        ADDRESS                     @Z30RIVS
         MVC   READYP(L4),L0(R4)   MOVE CNT FIELD TO WORD      @Z30RIVS
         L     R6,READYP           MOVE CNT INTO REG 6         @Z30RIVS
         LR    R5,R3               SET PRINT LINE PNTR         @Z30RIVS
         BAL   R8,CONVH3           USE STANDARD ROUTINE        @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO REFORMAT TIME IN FAULT SYMPTOM OUTPUT      @Z30RIVS
**                                                             @Z30RIVS
HREDIT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         LA    R5,L10              SET REG5 TO 10              @Z427VLS
         SR    R3,R5               DECR PRNT LINE PNTR         @Z30RIVS
         MVC   READYP(L6),L0(R3)   SAVE FORMATED OUTPUT        @Z30RIVS
         MVI   L0(R3),COLON        MOVE IN SEPERATOR CHAR      @Z30RIVS
         MVC   L1(L2,R3),READYP    MOVE MIN TO PRNT LINE       @Z30RIVS
         MVI   L3(R3),COLON        MOVE IN SEPERATOR CHAR      @Z30RIVS
         MVC   L4(L2,R3),READYP+L2 MOVE SEC TO PRNT LINE       @Z30RIVS
         MVI   L6(R3),COLON        MOVE IN SEPERATOR CHAR      @Z30RIVS
         MVC   L7(L2,R3),READYP+L4 MOVE THOU TO PRNT LINE      @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO BLANK OUT LEADING ZERO ON DEVICE ADDR      @Z30RIVS
**                                                             @Z30RIVS
NOPRNTT  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         LA    R5,L6               LOAD DECRMT INTO REG 5      @Z30RIVS
         LR    R6,R3               LOAD PRNT LINE INTO R6      @Z30RIVS
         SR    R6,R5               BACK UP PRNT LINE PNTR      @Z30RIVS
         MVI   L0(R6),BLANK        BLANK OUT ZERO              @Z30RIVS
         B     RETURN              RETURN                      @Z30RIVS
**                                                             @Z30RIVS
**       ROUTINE TO CALCULATE MEGABYTES READ AND SETUP FIELD FOR SORT
**       FOR THE VOLID SUMMATION                               @Z30RIVS
**                                                             @Z30RIVS
SETUP0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z30RIVS
         LA    R8,L50              LOAD NO. OF SUM REC         @Z30RIVS
SETUP1   CLC   L0(L6,R4),ZEROS     IS VOLID ZERO               @Z30RIVS
         BE    SETUP5              GO TO RETURN                @Z30RIVS
         ICM   R5,L15,L18(R4)      LOAD RETRY COUNT            @Z40RIVS
         SR    R6,R6                                           @Z40RIVS
         ICM   R6,L3,L12(R4)       LOAD OVERFLOW BYTES         @Z40RIVS
         ICM   R7,L15,L14(R4)      LOAD BYTES READ             @Z40RIVS
         SRDL  R6,L20              CONVERT TO MEGABYTES        @Z30RIVS
         ST    R7,SETUP7           SAVE FOR MOVE               @Z30RIVS
         STCM  R7,L15,L14(R4)      SAVE MEGABYTES              @Z40RIVS
         CR    R7,R5               COMPARE RETRY TO MEGA       @Z30RIVS
         BNL   SETUP2              MEGABYTES IS HIGH           @Z30RIVS
         MVC   L12(L2,R4),ZEROS    MOVE IN ZEROS               @Z30RIVS
         B     SETUP4              GO AGAIN                    @Z30RIVS
SETUP2   LTR   R5,R5               TEST FOR NO RETRY CNT       @Z30RIVS
         BZ    SETUP6              GO SET UP FOR SORT          @Z30RIVS
         SR    R6,R6               CLR REG 6 FOR DIV           @Z30RIVS
         DR    R6,R5               RETRY INTO MEGABYTES        @Z30RIVS
         ST    R7,SETUP7           SAVE MEGA/RETRY             @Z30RIVS
SETUP3   MVC   L12(L2,R4),SETUP7+L2 MOVE IN FOR SORT           @Z30RIVS
SETUP4   LA    R4,L28(R4)          INCREMENT TO NEXT RECORD
         BCT   R8,SETUP1           DECREMENT REC CNT           @Z30RIVS
SETUP5   B     RETURN              RETURN                      @Z30RIVS
SETUP6   OI    SETUP7+L2,SETSORT   SET UP FOR SORT             @Z30RIVS
         B     SETUP3              GO TO MOVE SORT FIELD       @Z30RIVS
**                                                             @Z30RIVS
**                                                             @Z30RIVS
THEEND   STM   R14,R12,L12(R13)    SAVE ALL REGS               @Z30RIVS
         LR    R12,R13             SAVE THE SAVE ADDRESS       @Z30RIVS
         LA    R13,FSAVE           POINT TO MY SAVE            @Z30RIVS
         ST    R12,L4(R13)         SET CHAINING POINTERS       @Z30RIVS
         ST    R13,L8(R12)                                     @Z30RIVS
         L     R3,L4(R2)           PICK UP POINTER TO NEXT COUNTER
         ST    R3,L32(R12)         SAVE POINTER TO REG SAVE    @XM09337
         LH    R0,SIZE             PICK UP SIZE OF AREA        @Z30RIVS
         LR    R1,R2               SET ADDRESS                 @Z30RIVS
         FREEMAIN R,LV=(0),A=(1)                               @Z30RIVS
         LTR   R3,R3               ANY MORE COUNTERS           @Z30RIVS
         BZ    RETURNO             NO RETURN                   @Z30RIVS
         LA    R5,PENTRY+L10       POINT TO TOP ENTRY LESS 4   @Z30RIVS
         LA    R6,LABELS-L1        POINT TO FIRST LABEL LESS 1 @Z40RIVS
         STM   R5,R6,YR9PTR                                    @Z40RIVS
RETURNO  L     R13,L4(R13)         PICK UP &                   @Z30RIVS
         LM    R14,R12,L12(R13)    RESTORE REGS                @Z30RIVS
         LR    R2,R3                                           @XM09337
         BR    R14                                             @Z30RIVS
**                                                             @Z30RIVS
SIZE     DC    H'4568'                                         @Z427VLS
         DS    0F                                              @Z30RIVS
ASUMTA2  DC    A(SUMTA2-1)
ASUMTA4  DC    A(SUMTA4-1)
ASUMTA8  DC    A(SUMTA8-1)
RECTST4  DC    F'0'                                            @Z30RIVS
RECTSTS  DC    F'0'                                            @Z30RIVS
RECTSTP  DC    F'0'                                            @Z30RIVS
TFAULT7  DC    F'0'                                            @Z30RIVS
CUANR    DC    F'0'                SAVE AREA FOR CH-CU         @Z30RIVS
SRTSAV   DC    F'0'                SAVE FOR REG 4              @Z30RIVS
CNTDN2   DC    F'0'                                            @Z30RIVS
CNTDN3   DC    F'50'                                           @Z30RIVS
FLTMOV2  DC    F'0'                                            @Z30RIVS
FLTMOV6  DC    F'0'                                            @Z30RIVS
FLTSRT8  DC    F'0'                                            @Z30RIVS
EDTFA4   DC    F'16'               NUMBER OF COUNTERS
EDTFA5   DC    F'0'                                            @Z30RIVS
SETUP7   DC    F'0'                SAVE AREA                   @Z30RIVS
         SPACE 1                                               @Z30RIVS
VOLPTR   DC    F'0'                PNTR TO VOLID,SUM AREA      @Z30RIVS
         SPACE 1                                               @Z30RIVS
FLTPTR   DC    F'0'                PNTR TO FLTSYM SUM AREA     @Z30RIVS
         SPACE 1                                               @Z30RIVS
CON3350  DC    C'3350'                                         @Z30RIVS
         DS    0D                                              @Z30RIVS
XSAVE1   DC    18F'0'                                          @Z40RIVS
FSAVE    EQU   XSAVE1                                          @Z40RIVS
XSAVE    EQU   XSAVE1                                          @Z40RIVS
XSAVEV   EQU   XSAVE1                                          @Z40RIVS
XSAVED   EQU   XSAVE1                                          @Z40RIVS
**                                                             @Z30RIVS
         SPACE 2                                               @Z30RIVS
TOTSKS   DC    F'0'                                            @Z30RIVS
TOTMEGRD DC    F'0'                                            @Z30RIVS
SAVMEG   DC    F'0'                SAVE AREA FOR MEG READ      @Z30RIVS
TOTRETRD DC    F'0'                                            @Z30RIVS
TOTCORRD DC    F'0'                                            @Z30RIVS
TOTSKERS DC    H'0'                                            @Z30RIVS
**                                                             @Z30RIVS
TLEN     EQU   *-TOTSKS            LENGTH OF TOTALS AREA       @Z30RIVS
         SPACE 2                                               @Z30RIVS
ZEROS    DC    5F'0'                                           @Z30RIVS
HEX00    EQU   ZEROS                                           @Z40RIVS
NA       DC    C'-N/A-'                                        @Z30RIVS
SHARED   DC    C'SHARED'                                       @Z427VLS
UNKNOWN  DC    C'UNKNOWN'                                      @Z30RIVS
CHARS    DC    C'0123456789ABCDEF'                             @Z30RIVS
CHAR0    DC    C'0'                                            @Z30RIVS
DEVTABLE DC    X'200B'             DEVICE TYPE &               @Z30RIVS
         DC    X'11'               REC ID FOR A                @Z30RIVS
         DC    C'3350   '          MADRID                      @Z30RIVS
         SPACE 1                                               @Z30RIVS
READYP   DC    D'0'                                            @Z30RIVS
PENTRY   DS    0F                                              @Z30RIVS
         DC    X'0001001'                                      @Z30RIVS
         DC    X'0001001'                                      @Z30RIVS
         DC    A(LABELS)                                       @Z30RIVS
         DC    H'0'                                            @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE YDUMA,SKIPPER     INSURE EJECT                @Z30RIVS
         LABEL ''                                              @Z30RIVS
         DC    X'01'                                           @Z30RIVS
         DC    X'000B8B00'                                     @Z30RIVS
         LABEL ' '                                             @Z30RIVS
         LINE  (61,23),(1,19),SKIP=2                           @Z30RIVS
         ROUTINE TYPDEV,MOVDEV                                 @Z30RIVS
         HEX   YCPU,0,2B                                       @Z30RIVS
         HEX   YSER,0,3B                                       @Z30RIVS
         ROUTINE YCPU,SETCPUNO                                 @Z30RIVS
         LABEL 'SUMMARY OF I/O RECO','RDS  TYPE OBR/MDR  ',    @Z30RIVSC
               'SOURCE-OUTBOARD   D',                          @Z30RIVSC
               'EVICE TYPE ',' MODEL-','SERIAL NO.-'           @Z30RIVS
         LINE  ,(13,13),SKIP=1                                 @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'DAY YEAR','DAY YEAR'                           @Z30RIVS
         LINE  (13,13),(1,21),SKIP=2                           @Z30RIVS
         ROUTINE TDAY1,SETDATE                                 @Z30RIVS
         ROUTINE TDAY2,SETDATE                                 @Z30RIVS
         ROUTINE YDUMA,REPNT3                                  @Z30RIVS
         ROUTINE YNOREC,CONV1                                  @Z30RIVS
         LABEL 'DATE RANGE-','TO','TOTAL NUMBER OF RECORDS'    @Z30RIVS
         LINE  (1,1),(1,1),SKIP=1                              @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'PHYSICAL    BUS OUT    EQUIP. CK.    EQUIP. CK.    DATAC
                  DATA CHECK   OVERRN    INV.    SEEK CHK       STATISTC
               ICAL'                                           @Z30RIVS
         LINE  (1,1),(1,1),SKIP=1                              @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'ADDRESS     PARITY        C.U.         DRIVE       CHECC
               K  CORR  RETRY            TRACK'                @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE TSTAT,EDTFA6                                  @Z30RIVS
         LABEL '                       TEMP  PERM    TEMP  PERM    PERMC
                                         FMT.    '             @XM09337
SUMTA1   LINE  (1,6),(1,1),SKIP=1                              @Z427VLS
         HEX   TCUA,0,2B           CONVERT ADDRESS             @Z30RIVS
         ROUTINE YDUMA,NOPRNTT     DON'T PRINT LEADING ZERO    @Z30RIVS
         ROUTINE TBUSOPA,CONV1     CONVERT BUS OUT PARITY      @Z30RIVS
         ROUTINE YDUMA,REPNT0      ALTER PRNT LINE PNTR        @Z30RIVS
         ROUTINE TEQCNT,CONV1      CONVERT EQ CHK CU TEMP      @Z30RIVS
         ROUTINE TEQCNP,CONV1      CONVERT EQ CHK CU PERM      @Z30RIVS
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE PNTR        @Z30RIVS
         ROUTINE TEQDRT,CONV1      CONVERT EQ CHK DRV TEMP     @Z30RIVS
         ROUTINE TEQDRP,CONV1      CONVERT EQ CHK DRV PERM     @Z30RIVS
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE PNTR        @Z30RIVS
         ROUTINE TDATCHP,CONV1     CONVERT DATA CHK PERM       @Z30RIVS
         ROUTINE YDUMA,REPNT4      ALTER PRNT LINE POINTER     @XM09337
         ROUTINE TDACHKC,CONV1     CONVERT DATA CHK CORR       @XM09337
         ROUTINE TDACHKR,CONV1     CONVERT DATA CHK RETRY      @XM09337
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE PNTR        @XM09337
         ROUTINE TOVERRN,CONV1     CONVERT OVERRUN             @XM09337
         ROUTINE YDUMA,REPNT2      ALTER PRNT LINE PNTR        @Z30RIVS
         ROUTINE TINVTRKF,CONV1    CONVERT INV TRK FORMAT      @XM09337
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE POINTER     @XM09337
         ROUTINE TSKCHK,CONV1      CONVERT SK CHK COUNTER      @XM09337
         ROUTINE YDUMA,REPNT5      ALTER PRINT LINE POINTER    @XM09337
         ROUTINE TSTAT,CONV1       CONVERT STATISTICAL         @Z30RIVS
SUMTA2   LABEL ''                                              @Z30RIVS
         LINE  (1,6),(1,1),SKIP=1                              @Z427VLS
         ROUTINE TSTAT,EDTFA0      CYCLE THROUGH SUMREC        @Z30RIVS
         LABEL ''                                              @Z30RIVS
         LINE  ,(1,1),SKIP=2                                   @Z30RIVS
         ROUTINE SYMCD,FLTTST0
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
SUMTA5   LINE  (61,23),(1,19),SKIP=2                           @Z30RIVS
         ROUTINE TYPDEV,MOVDEV                                 @Z30RIVS
         HEX   YCPU,0,2B                                       @Z30RIVS
         HEX   YSER,0,3B                                       @Z30RIVS
         ROUTINE YCPU,SETCPUNO                                 @Z30RIVS
SUMTA6   LABEL 'FAULT SYMPTOM CODE ','SUMMARY   TYPE-OBR ',    @Z30RIVSC
               ' SOURCE-OUTBOARD  D',                          @Z30RIVSC
               'EVICE TYPE',' MODEL-','SERIAL NO.-'            @Z30RIVS
         LINE  (61,23),(1,19),SKIP=2                           @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
SUMTAA   LABEL 'SEQUENCE BY SYMPTOM CODE'                      @Z30RIVS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'FAULT','PHYSICAL','OCCURRENCES','  DATE/TIME ',,,      X
               'SENSE FROM L','AST OCCURREN','CE'              @Z427VLS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'SYMPTOM','CHANNEL/',,'  LAST ENTRY ','           0',   X
               ' 0 0 0 0 0 0',' 0 0 0 1 1 1',' 1 1 1 1 1 1',   @Z427VLSX
               ' 1 2 2 2 2'                                    @Z427VLS
         LINE  ,,SKIP=1                                        @Z427VLS
         ROUTINE SYMCD,FLTSRT0                                 @Z30RIVS
         LABEL 'CODE','UNIT ADDRESS',,,'           0',' 1 2 3 4 5 6',  X
               ' 7 8 9 0 1 2',' 3 4 5 6 7 8',' 9 0 1 2 3'      @Z427VLS
SUMTA7   LINE  (1,12)                                          @Z427VLS
         HEX   SYMCD,0,2B                                      @Z30RIVS
         HEX   SYMCUA,0,,2B                                    @Z30RIVS
         ROUTINE SYMOCR,GETOCCUR                               @Z30RIVS
         ROUTINE SYMDAY,FLTSYDA                                @Z30RIVS
         HEX   SYMHR,0,4B          CONVERT TIME                @Z30RIVS
         ROUTINE YDUMA,HREDIT0     REFORMAT TIME FIELD         @Z30RIVS
         HEX   SYMSNS0,0,6B                                    @Z427VLS
         HEX   SYMSNS1,0,6B                                    @Z427VLS
         HEX   SYMSNS2,0,6B                                    @Z427VLS
         HEX   SYMSNS3,0,6B                                    @Z427VLS
SUMTA8   LABEL ''                                              @Z30RIVS
         LINE  (1,12)                                          @Z427VLS
         ROUTINE SYMCD,FLTMOV0                                 @Z30RIVS
         LABEL ''                                              @Z30RIVS
         LINE  ,(1,1)                                          @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'NOTE:  IF SYMPTOM CODE IS 0 REFER TO DETAIL OBR RECORD'
SUMTAC   LINE  ,(1,1),SKIP=2
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
SUMTAD   LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  (75,7),(1,63)                                   @Z30RIVS
         ROUTINE TYPDEV,MOVDEV                                 @Z30RIVS
         ROUTINE TVOLID1,SETUP0                                @Z30RIVS
         ROUTINE TVOLID1,SORTV0                                @Z30RIVS
         LABEL 'SUMMARY OF I/O STATISTICAL RECORDS BY VOLUME ID',      C
               'DEVICE TYPE'                                   @Z30RIVS
         LINE  (1,10),,SKIP=2                                  @Z30RIVS
         HEX   TVCUA,0,2B                                      @Z30RIVS
         ROUTINE YDUMA,CUAN0                                   @Z30RIVS
         LABEL ''                                              @Z30RIVS
         LINE  ,(2,13),SKIP=1                                  @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'VOLUME ID','PHYSICAL','TOTAL','ACCESS',        @Z30RIVSC
               'TOTAL','RETRY',                                @Z30RIVSC
               'MEGABYTES','CORRECTABLE','MEGABYTES'           @Z30RIVS
         LINE  ,(2,13),SKIP=1                                  @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL ,'DRIVE','ACCESSES','ERRORS','MEGABYTES',       @Z30RIVSC
               'READ','READ/RETRY','READ','READ/CORR'          @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL ,,'X1024',,'READ','ERRORS','ERRORS','ERRORS','ERRORS'
SUMTA3   LINE  (3,13),(1,1),SKIP=1                             @Z30RIVS
         ROUTINE TVOLID1,PRVOLS                                @Z30RIVS
SUMTA4   LABEL ' '                                             @Z30RIVS
         LINE  (3,13),(1,1),SKIP=1                             @Z30RIVS
         ROUTINE TVOLID1,CNTDN0                                @Z30RIVS
         LABEL ' '                                             @Z30RIVS
         LINE  (3,13),(1,1),SKIP=1                             @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL ' '                                             @Z30RIVS
         LINE  (29,13),(3,1),SKIP=2                            @Z30RIVS
         ROUTINE YDUMA,GETTOTS                                 @Z30RIVS
         LABEL 'TOTALS'                                        @Z30RIVS
         LINE  ,(2,29),SKIP=1                                  @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'TOTAL OVERRUNS  CHNL A',                       @Z30RIVSC
               'TOTAL OVERRUNS  CHNL B',                       @Z30RIVSC
               'TOTAL OVERRUNS  CHNL C',                       @Z30RIVSC
               'TOTAL OVERRUNS  CHNL D'                        @Z30RIVS
         LINE  (21,29),(12,29)                                 @Z30RIVS
         ROUTINE TOCACA,GETABCDD                               @Z40RIVS
         LABEL 'COMMAND','COMMAND','COMMAND','COMMAND'         @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE TOCADA,GETABCDD                               @Z30RIVS
         LABEL 'DATA','DATA','DATA','DATA'                     @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL ''                                              @Z30RIVS
         LINE  ,(1,1),SKIP=1                                   @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'NOTE:  VOLUME ID''S ARE LISTED IN ERROR RATE SEQUENCE SX
               TARTING WITH THE ONE WITH HIGHEST % OF RETRY READ ERRORSX
                '                                              @Z30RIVS
         LINE  ,(1,1),SKIP=1                                   @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'NOTE:  ZEROS IN MEGABYTES READ/XXXX ERROR COLUMNS INDICC
               ATE THAT THERE WAS LESS THAN ONE MEGABYTE READ PER ERRORC
                '                                              @Z30RIVS
         LINE  ,,SKIP=2                                        @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'NOTE:  N/A IS AN INDICATION OF EITHER NO RETRY READ ERRX
               ORS OR CORRECTABLE READ ERRORS IN THE RESPECTIVE COUNTERX
               S '                                             @Z30RIVS
         LINE  ,(1,1),SKIP=2                                   @Z30RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z30RIVS
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  ,(1,1)                                          @Z30RIVS
         ROUTINE YDUMA,THEEND                                  @Z30RIVS
         LABEL ' '                                             @Z30RIVS
         DC    X'FF'                                           @Z30RIVS
         DC    XL2'0000'                                       @Z30RIVS
         DC    XL2'0018'                                       @Z30RIVS
         DC    XL2'0000'                                       @Z30RIVS
         DC    C'$'                                            @Z30RIVS
LABELS   EQU   *                                               @Z30RIVS
         LSTART                                                @Z30RIVS
         END
