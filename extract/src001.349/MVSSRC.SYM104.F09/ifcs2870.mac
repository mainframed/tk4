         TITLE 'IFCS2870 - SUM TABLE - LINKNAME=IFCS2870'
         TITLE '****  2870 CHANNEL SUM  ****'
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
         LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4
.*                            THIS MACRO ALLOWS UP TO FOUR LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         GBLA  &NRENTS
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         LCLA  &NDX
         LINEND
.LOOP    ANOP
&NDX     SETA  &NDX+1
         DC    C'&LABELS(&NDX)'
         AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
         GBLC  &DSECT
         GBLC  &CSECT
&DSECT   SETC  'C2870'
&CSECT   SETC  'IFCS2870'
IFCS2870 CSECT
C2870    DSECT
         DSGEN (XKEY,16),(XSWS,16),(XDUM1,32)
         DSGEN (XDATE,32),(XTIME,32)
         DSGEN (XDUM2,8),(XSER,24),(XMOD,16),(MCEL,16)
         DSGEN (XPGMN,64)
         DSGEN (XAIO1,64)
         DSGEN (XAIO5,64)
         DSGEN (XFCCW,64)
         DSGEN (XCSW,32),(XCSWS,12),(XCDC,1),(XCCC,1),(XIFC,1),(XD,17)
         DSGEN (XECSW,32)
         DSGEN (XDEVT1,16),(XDEVT2,16)
         DSGEN (XCHID,8),(XCUA,24)
         DSGEN (XMPIN,32)
DATA     EQU   *                                                 43068
         EJECT
MPX01    DSGEN (MPXKEYW1,4),(MPXILEN,1),(MPXHLTBT,1),(MPXOPCOD,2),     X
               (MPXDADR,24)
         SPACE 2
MPX01A   DSGEN (MPXFLAGS,7),(MPXPREF,1),(MPXDAPC,1),                   X
               (MPXCNCK,1),(MPXPECK,1),(MPXPROCK,1),(MPXDTACK,1),      X
               (MPXBTCT,1),(MPXCNTPO,1),(MPXCNT7,1),(MPXBYCNT,16)
         SPACE 2
MPX02    DSGEN (MPXKEYW2,4),(DUM70,4),(MPXCOMAD,24)
         SPACE 2
MPX02A   DSGEN (MPXB0,1),(MPXB1,1),(MPXB2,1),(MPXB3,1),(MPXB4,1),      X
               (MPXB5,1),(MPXB6,1),(MPXB7,1),(MPXCMAD,24)
         SPACE 2
MPX03    DSGEN (MPXCAW,1),(MPXCCWR,1),(MPXCCWIN,1),(MPXDTARQ,1),       X
               (MPXGOIO,1),(MPXTSTIO,1),(MPXHLTIO,1),(MPXPSIO,1),      X
               (MPXMOD1,1),(MPXMOD2,1),(MPXMOD3,1),(MPXMOD4,1),        X
               (DUM71,1),(MPXMOD6,1),(MPXMOD7,1),(DUM72,1),(MPXMOD9,1),X
               (MPXMOD10,1),(MPXMOD11,1),(DUM73,1),(MPXMCBCP,1),       X
               (MPXCNLAD,3),(MPXUNAD,8)
         SPACE 2
MPX03A   DSGEN (SELRST,1),(,2),(DISIN,1),(W3UCWCK,1),(,2),(MPXSECCK,1),X
               (MPXW0UCB,1),(MPXW2UCB,1),(MPXLSA,1),(MPXSTOR,1),       X
               (MPXCBTCT,1),(MPXTOUT,1),(MPXPRI,1),(DUM75,1),          X
               (MPXUADCK,1),(MPXCOMCK,1),(MPXBYCTC,1),(MPXINSEL,1),    X
               (MPXNOP,1),(MPXERSEQ,1),(MPXADI,1),(MPXSTI,1),          X
               (MPXBCP,1),(MPXBC4,1),(MPXBC2,1),(MPXBC1,1),(MPXILI,1), X
               (MPXDATAC,1),(MPXCHCK,1),(DUM76,1)
IFCS2870 CSECT
ENTRYPTR DC    A(EDIT)
         DC    A(PEDIT)            POINTER TO EDIT SECTION
REG9     DS    F
SCSIZE   DC    H'300'
ROUTINES EQU   *
LOGREG   EQU   2
@FAILCCW EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,FCCW(LOGREG)
FCCW     EQU   48
         B     COMMON
@UNIT    EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,99(LOGREG)                             XA04765/YA04217
         B     COMMON
@DEVADR  EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7                 LOAD DEVICE ADDRESS
         IC    7,74(LOGREG)
         SLL   7,8
         IC    7,75(LOGREG)
COMMON   EQU   *
         BALR  12,0
         USING *,12
         L     1,R9ADR
         L     9,0(1)
         SR    1,1
         IC    1,1(9)              ITERATIONS
         LR    5,1
         SLL   5,2
         AR    5,3                 COMPUTE COUNTER ADDRESS PAST TEXT
         LH    4,=X'FFFF'
LOOP1    CH    4,0(3)              TEST FOR EMPTY/FULL
         BNE   STORE
         CH    7,2(3)              FULL - COMPARE WITH STORED DATA
         BE    BUMP
         LA    3,4(3)              NOT SAME - GO TO NEXT TEXT CELL
         LA    5,2(5)
         BCT   1,LOOP1
         B     FULL                ALL CELLS FULL - NO MATCH
STORE    EQU   *
         STH   4,0(3)              STORE NEW TEXT DATA
         STH   7,2(3)
BUMP     EQU   *
         LH    6,0(5)              BUMP COUNTER BY ONE
         AH    6,=H'1'
         STH   6,0(5)
FULL     EQU   *
         LM    14,12,12(13)
         BR    14
*
*        SAVE  DATE RANGE
*
         DROP  15
         DROP  12
         USING C2870,R2
         USING IFCS2870,R9
*
XDATE1   CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    EXIT
         CLC   L0(L4,R3),HEX00    IS LOW DATE = ZERO ?
         BNE   XDATE2
         MVC   L0(L4,R3),XDATE    IF YES MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK AGAINST LOW DATE
         BL    SAVELO                   BR-THIS IS LOWER
         CLC   XDATE(L4),L4(R3)         CHECK AGAIN HI
         BH    SAVEHI
EXIT     BR    R14                      RETURN
SAVEHI   MVC   L4(L4,R3),XDATE          SAVE HI DATE IN COUNTER
         B     EXIT
SAVELO   MVC   L0(L4,R3),XDATE          SAVE LO
         B     EXIT
ALLFFF   STM   R5,R8,SSAVE              SAVE REGS                43068
         LA    R4,DATA                  POINT TO DATA            43068
AG       CLC   L0(L4,R4),HFFF           IS WORD ALL FF"S         43068
         BNE   OK                       BR - NO                  43068
         LA    R5,QUIT-L6               POINT TO END             43068
         ST    R5,REG9                  STORE IN LIST            43068
OK       LM    R5,R8,SSAVE              RESTORE REGS             43068
         BR    R14                      EXIT                     43068
SSAVE    DC    4F'0'                    SMALL SAVE AREA          43068
HFFF     DC    X'FFFFFFFF'                                       43068
HEX00    DC    F'0'
R9ADR    DC    A(REG9)
EDIT     EQU   *
*                             SPECIAL ROUTINES REQUIRED
         SPECIAL XDATE1,00000000,SPACE=4
*
*        LABELS NEEDED FOR HEADER
*
         LABEL ' '            SKIP TO CH 1
         LABEL 'DAY YEAR   DAY YEAR'
         LABEL 'INBOARD DATE RANGE','TO'
         LABEL      '---MODEL--','SERIAL NO'                     S21021
         LABEL '---CHANNEL NUMBER--'
         LABEL      'CHANNEL INBOARD SUMMARY FOR 2870 CHANNEL'
         LABEL 'NUMBER OF RECORDS EXAMINED ='
         LABEL '--------TITLE--------','TOTAL'
*
         LABEL 'DEVICE ADDRESS SUMMARY (MAX- 10 VALUES)'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL 'FAILING CCW SUMMARY(MAX-10 VALUES)'
         LABEL 'CMND CODE'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL '--------TITLE--------                TOTAL',           C
               '--------TITLE--------                TOTAL'
         SPECIAL @DEVADR,00001010,SPACE=30
         SPECIAL @FAILCCW,00001010,SPACE=30
         SUM   XCDC                                     XA02809/YA02795
         LABEL 'CHAN DATA CHK'
         SUM   XCCC                                     XA02809/YA02795
         LABEL 'CHAN CTRL CHK'
         SUM   XIFC                                     XA02809/YA02795
         LABEL 'IF CTRL CHK'
         SPECIAL ALLFFF,0,SPACE=0                                43068
         LABEL 'UCW PARITY ERROR SUMMARY'
         SUM   MPXB0
         SUM   MPXB1
         LABEL 'BYTE 0','BYTE 1'
         SUM   MPXB2
         SUM   MPXB3
         LABEL 'BYTE 2','BYTE 3'
         SUM   MPXB4
         SUM   MPXB5
         LABEL 'BYTE 4','BYTE 5'
         SUM   MPXB6
         SUM   MPXB7
         LABEL 'BYTE 6','BYTE 7'
         LABEL 'CONTROL TRIGGER SUMMARY'
         SUM   MPXCAW
         SUM   MPXHLTIO
         LABEL 'CAW','HALT I/O'
         SUM   MPXCCWR
         SUM   MPXPSIO
         LABEL 'CCW REQD','PSEUDO SIO'
         SUM   MPXCCWIN
         SUM   MPXMOD1
         LABEL 'CCW IN CHAN','MODE 1'
         SUM   MPXDTARQ
         SUM   MPXMOD2
         LABEL 'DATA REQD','MODE 2'
         SUM   MPXGOIO
         SUM   MPXMOD3
         LABEL 'START I/O','MODE 3'
         SUM   MPXTSTIO
         SUM   MPXMOD4
         LABEL 'TEST I/O','MODE 4'
         SUM   MPXMOD6
         SUM   MPXMOD10
         LABEL 'MODE 6','MODE 10'
         SUM   MPXMOD7
         SUM   MPXMOD11
         LABEL 'MODE 7','MODE 11'
         SUM   MPXMOD9
         SUM   MPXMCBCP
         LABEL 'MODE 9','MC BC PARITY'
         SUM   DUM71                                           @YM6454P
         SUM   DUM71                                           @YM6454P
         LABEL    'TRG 1 NO-OP'                                @YM6454P
         LABEL 'MAIN CHANNEL CHECKS SUMMARY'
         SUM   MPXW0UCB
         SUM   MPXCBTCT
         LABEL 'WORD 0 UCW','BYTE CT'
         SUM   MPXW2UCB
         SUM   MPXTOUT
         LABEL 'WORD 2 UCW','TIME OUT'
         SUM   MPXLSA
         SUM   MPXPRI
         LABEL 'LS ADR','PRIORITY'
         SUM   MPXSTOR
         SUM   MPXSECCK
         LABEL 'STORE','SECOND CHECK'
         SUM   W3UCWCK                                         @YM6454P
         SUM   SELRST                                          @YM6454P
         SUM   DISIN                                           @YM6454P
         SUM   DUM75                                           @YM6454P
         LABEL   'WORD 3 UCW','SEL RESET'                      @YM6454P
         LABEL   'DISIN IN','IDA FETCH'                        @YM6454P
         LABEL 'SUB-CHANNEL CHECKS'
         SUM   MPXUADCK
         SUM   MPXNOP
         LABEL 'UNIT ADR','NO RESPONSE'
         SUM   MPXCOMCK
         SUM   MPXERSEQ
         LABEL 'CMND','ICRCT TAG SEQ'
         SUM   MPXBYCTC
         SUM   MPXADI
         LABEL 'BYTE CT (SCC)','AD-I'
         SUM   MPXINSEL
         SUM   MPXSTI
         LABEL 'ICRCT SELN','ST-I'
         SPECIAL @UNIT,0001010,SPACE=30
QUIT     DC    XL1'FF'
PEDIT    DS    0F
         USING *,R9
         DC    A(PENTRY)
         DC    C'IFCS2870'
YR9PTR   DC    F'0'
YLABELP  DC    F'0'
&CSECT   SETC  'PEDIT'
&DSECT   SETC  'D2870'
*
D2870    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YLOD,32),(YHID,32)
         DSGEN (YFFF01,16),(YCC01,16),(YFFF02,16),(YCC02,16)
         DSGEN (YFFF03,16),(YCC03,16),(YFFF04,16),(YCC04,16)
         DSGEN (YFFF05,16),(YCC05,16),(YFFF06,16),(YCC06,16)
         DSGEN (YFFF07,16),(YCC07,16),(YFFF08,16),(YCC08,16)
         DSGEN (YFFF09,16),(YCC09,16),(YFFF10,16),(YCC10,16)
         DSGEN (YSC01,16),(YSC02,16)
         DSGEN (YSC03,16),(YSC04,16)
         DSGEN (YSC05,16),(YSC06,16)
         DSGEN (YSC07,16),(YSC08,16)
         DSGEN (YSC09,16),(YSC10,16)
         DSGEN (YFFF11,16),(YNC11,8),(YCC11,8)
         DSGEN (YFFF12,16),(YNC12,8),(YCC12,8)
         DSGEN (YFFF13,16),(YNC13,8),(YCC13,8)
         DSGEN (YFFF14,16),(YNC14,8),(YCC14,8)
         DSGEN (YFFF15,16),(YNC15,8),(YCC15,8)
         DSGEN (YFFF16,16),(YNC16,8),(YCC16,8)
         DSGEN (YFFF17,16),(YNC17,8),(YCC17,8)
         DSGEN (YFFF18,16),(YNC18,8),(YCC18,8)
         DSGEN (YFFF19,16),(YNC19,8),(YCC19,8)
         DSGEN (YFFF20,16),(YNC20,8),(YCC20,8)
         DSGEN (YSC11,16),(YSC12,16)
         DSGEN (YSC13,16),(YSC14,16)
         DSGEN (YSC15,16),(YSC16,16)
         DSGEN (YSC17,16),(YSC18,16)
         DSGEN (YSC19,16),(YSC20,16)
         DSGEN (YCDC,16),(YCCC,16),(YIFC,16),(YBYTE0,16)
         DSGEN (YBYTE1,16),(YBYTE2,16),(YBYTE3,16),(YBYTE4,16)
         DSGEN (YBYTE5,16),(YBYTE6,16),(YBYTE7,16),(YCAWAA,16)
         DSGEN (YHLTIO,16),(YCCWRA,16),(YPSIOA,16),(YCCWIN,16)
         DSGEN (YMOD1A,16),(YDTARQ,16),(YMOD2A,16),(YGOIOA,16)
         DSGEN (YMOD3A,16),(YSTIOA,16),(YMOD4A,16),(YMOD6A,16)
         DSGEN (YMOD10,16),(YMOD7A,16),(YMOD11,16),(YMOD9A,16)
         DSGEN  (YMCBCP,16),(YDUM71,16),(Y,16),(Y0UCBA,16)     @YM6454P
         DSGEN  (YCBTCT,16),(Y2UCBA,16)                        @YM6454P
         DSGEN (YTOUTA,16),(YLSAAA,16),(YPRIAA,16),(YSTORA,16)
         DSGEN   (YSECCK,16),(YW3,16),(YSEL,16),(YDISIN,16)    @YM6454P
         DSGEN   (YDUM75,16),(YUADCK,16),(YNOPAA,16),(YCOMCK,16)
         DSGEN (YERSEQ,16),(YBYCTC,16),(YADIAA,16),(YINSEL,16)
         DSGEN (YSTIAA,16),(YFFF21,16)
         DSGEN (YNC21,8),(YCC21,8),(YFFF22,16),(YNC22,8),(YCC22,8),    C
               (YFFF23,16)
         DSGEN (YNC23,8),(YCC23,8),(YFFF24,16),(YNC24,8),(YCC24,8),    C
               (YFFF25,16)
         DSGEN (YNC25,8),(YCC25,8),(YFFF26,16),(YNC26,8),(YCC26,8),    C
               (YFFF27,16)
         DSGEN (YNC27,8),(YCC27,8),(YFFF28,16),(YNC28,8),(YCC28,8),    C
               (YFFF29,16)
         DSGEN (YNC29,8),(YCC29,8),(YFFF30,16),(YNC30,8),(YCC30,8),    C
               (YSC21,16)
         DSGEN (YSC22,16),(YSC23,16),(YSC24,16),(YSC25,16)
         DSGEN (YSC26,16),(YSC27,16),(YSC28,16),(YSC29,16)
         DSGEN (YSC30,16),(YSC31,16),(YSC32,16),(YSC33,16)
IFCS2870 CSECT
         DS    0F
CONVERT  STM   R5,R8,XSAVE              SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
         CVD   R5,WORK                  CONVERT IT
         UNPK  L0(L4,R3),WORK+L4(L4)    UNPACK IT TO PRINT LINE
         MVZ   L3(L1,R3),L0(R3)         MOVE ON ZONE
RETURNA  LM    R5,R8,XSAVE              RESTORE
RETURNB  BR    R14                      RETURN
*
SKIPPER  BR    R14
*
CONVCC1  CLC   L0(L2,R4),HEXFFFF        IS COUNTER IN USE
         BE    RETURNB                  YES
         SR    R15,R15                  NO STOP PRINTING
         BR    R14
*
SETDATE  OI    L3(R4),HEX0F             PUT ON PROPER SIGN
         UNPK  WORK(L8),L0(L4,R4)       UNPACK DATE
         MVZ   WORK+L7(L1),WORK         SET ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DAY
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR
         BR    R14
*
*              FREE COUNTERS
*
FREECORE STM   R14,R12,L12(R13)         SAVE REGS
         LR    R12,R13                  SAVE SAVE PTR
         LA    R13,FSAVE                SET ADDRESS MYSAVE
         ST    R12,L4(R13)              CHAIN SAVE AREAS TOGETHER
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP NXT COUNTER PTR
         ST    R3,L28(R12)              PRESET REG IN CALLERS AREA
         LH    R0,SIZE                  PICK UP COUNTER LENGTH
         LR    R1,R2                    SET ADDRESS TO COUNTER
*
         FREEMAIN R,LV=(0),A=(1)        FREE COUNTER
*
         LTR   R3,R3                    TEST FOR LAST COUNTER IN
         BZ    RETURN0                  BR-LAST
         LA    R5,PENTRY+L10            RESET R9 &
         LA    R6,LABLAREA-L1           LABEL POINTER TO START
         ST    R5,YR9PTR
         ST    R6,YLABELP
RETURN0  L     R13,L4(R13)              RESET TO CALLERS REGS
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
WORK     DS    D
XSAVE    DS    4F
*
FSAVE    DS    18F
L28      EQU   28
HEXFFFF  DC    X'FFFF'
SIZE     DC    H'622'
HEX0F    EQU   X'0F'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABLAREA)
         DC    H'0'
*
         DC    X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
*
         LINE  ,(23,11)
         ROUTINE    YDUMA,SKIPPER
         LINE       (23,11),(1,30)
         ROUTINE    YLOD,SETDATE
         ROUTINE    YHID,SETDATE
*
         LINE       (56,20),(35,30),SKIP=2                       S21021
         HEX        YCPU,0,2B                                    P0417
         HEX        YSER,0,3B                                    S21021
         LINE
         HEX        YCHAN,0,1B
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (70,1)
         ROUTINE    YNOREC,CONVERT
*
         LINE       (16,24),(2,38)
         ROUTINE    YDUMA,SKIPPER
*
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,,SKIP=1                                     P0417
         HEX        YCC01
         ROUTINE    YSC01,CONVERT
         ROUTINE    YFFF01,CONVCC1
         LINE       ,,SKIP=1
         HEX        YCC02
         ROUTINE    YSC02,CONVERT
         ROUTINE    YFFF02,CONVCC1
         LINE
         HEX        YCC03
         ROUTINE    YSC03,CONVERT
         ROUTINE    YFFF03,CONVCC1
         LINE
         HEX        YCC04
         ROUTINE    YSC04,CONVERT
         ROUTINE    YFFF04,CONVCC1
         LINE
         HEX        YCC05
         ROUTINE    YSC05,CONVERT
         ROUTINE    YFFF05,CONVCC1
         LINE
         HEX        YCC06
         ROUTINE    YSC06,CONVERT
         ROUTINE    YFFF06,CONVCC1
         LINE
         HEX        YCC07
         ROUTINE    YSC07,CONVERT
         ROUTINE    YFFF07,CONVCC1
         LINE
         HEX        YCC08
         ROUTINE    YSC08,CONVERT
         ROUTINE    YFFF08,CONVCC1
         LINE
         HEX        YCC09
         ROUTINE    YSC09,CONVERT
         ROUTINE    YFFF09,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC10
         ROUTINE    YSC10,CONVERT
         ROUTINE    YFFF10,CONVCC1
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(11,1),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,,SKIP=1
         HEX        YCC11
         ROUTINE    YSC11,CONVERT
         ROUTINE    YFFF11,CONVCC1
         LINE
         HEX        YCC12
         ROUTINE    YSC12,CONVERT
         ROUTINE    YFFF12,CONVCC1
         LINE
         HEX        YCC13
         ROUTINE    YSC13,CONVERT
         ROUTINE    YFFF13,CONVCC1
         LINE
         HEX        YCC14
         ROUTINE    YSC14,CONVERT
         ROUTINE    YFFF14,CONVCC1
         LINE
         HEX        YCC15
         ROUTINE    YSC15,CONVERT
         ROUTINE    YFFF15,CONVCC1
         LINE
         HEX        YCC16
         ROUTINE    YSC16,CONVERT
         ROUTINE    YFFF16,CONVCC1
         LINE
         HEX        YCC17
         ROUTINE    YSC17,CONVERT
         ROUTINE    YFFF17,CONVCC1
         LINE
         HEX        YCC18
         ROUTINE    YSC18,CONVERT
         ROUTINE    YFFF18,CONVCC1
         LINE
         HEX        YCC19
         ROUTINE    YSC19,CONVERT
         ROUTINE    YFFF19,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC20
         ROUTINE    YSC20,CONVERT
         ROUTINE    YFFF20,CONVCC1
         LINE       ,(2,56),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (40,55),(3,55),SKIP=1
         ROUTINE    YCDC,CONVERT
         LINE
         ROUTINE    YCCC,CONVERT
         LINE       ,,SKIP=2
         ROUTINE    YIFC,CONVERT
*
*
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(3,55),SKIP=1
         ROUTINE    YBYTE0,CONVERT
         ROUTINE    YBYTE1,CONVERT
         LINE
         ROUTINE    YBYTE2,CONVERT
         ROUTINE    YBYTE3,CONVERT
         LINE
         ROUTINE    YBYTE4,CONVERT
         ROUTINE    YBYTE5,CONVERT
         LINE       ,,SKIP=2
         ROUTINE    YBYTE6,CONVERT
         ROUTINE    YBYTE7,CONVERT
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,(3,55),SKIP=1
         ROUTINE    YCAWAA,CONVERT
         ROUTINE    YHLTIO,CONVERT
         LINE
         ROUTINE    YCCWRA,CONVERT
         ROUTINE    YPSIOA,CONVERT
         LINE
         ROUTINE    YCCWIN,CONVERT
         ROUTINE    YMOD1A,CONVERT
         LINE
         ROUTINE    YDTARQ,CONVERT
         ROUTINE    YMOD2A,CONVERT
         LINE
         ROUTINE    YGOIOA,CONVERT
         ROUTINE    YMOD3A,CONVERT
         LINE
         ROUTINE    YSTIOA,CONVERT
         ROUTINE    YMOD4A,CONVERT
         LINE
         ROUTINE    YMOD6A,CONVERT
         ROUTINE    YMOD10,CONVERT
         LINE
         ROUTINE    YMOD7A,CONVERT
         ROUTINE    YMOD11,CONVERT
         LINE  ,                                               @YM6454P
         ROUTINE    YMOD9A,CONVERT
         ROUTINE    YMCBCP,CONVERT
         LINE    ,,SKIP=2                                      @YM6454P
         ROUTINE YDUM71,CONVERT                                @YM6454P
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(3,55),SKIP=1
         ROUTINE    Y0UCBA,CONVERT
         ROUTINE    YCBTCT,CONVERT
         LINE
         ROUTINE    Y2UCBA,CONVERT
         ROUTINE    YTOUTA,CONVERT
         LINE
         ROUTINE    YLSAAA,CONVERT
         ROUTINE    YPRIAA,CONVERT
         LINE  ,,SKIP=1                                        @YM6454P
         ROUTINE    YSTORA,CONVERT
         ROUTINE    YSECCK,CONVERT
*
         LINE  ,                                               @YM6454P
         ROUTINE YW3,CONVERT                                   @YM6454P
         ROUTINE YSEL,CONVERT                                  @YM6454P
         LINE  ,,SKIP=3                                        @YM6454P
         ROUTINE YDISIN,CONVERT                                @YM6454P
         ROUTINE YDUM75,CONVERT                                @YM6454P
         LINE       ,(2,1),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,(3,55),SKIP=1
         ROUTINE    YUADCK,CONVERT
         ROUTINE    YNOPAA,CONVERT
         LINE
         ROUTINE    YCOMCK,CONVERT
         ROUTINE    YERSEQ,CONVERT
         LINE
         ROUTINE    YBYCTC,CONVERT
         ROUTINE    YADIAA,CONVERT
         LINE       ,,SKIP=3                                     P0417
         ROUTINE    YINSEL,CONVERT
         ROUTINE    YSTIAA,CONVERT
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LABEL      'UNIT NUMBER SUMMARY'                        P0417
*
         LINE       (15,25),,SKIP=1
         HEX        YCC21
         ROUTINE    YSC21,CONVERT
         ROUTINE    YFFF21,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC22
         ROUTINE    YSC22,CONVERT
         ROUTINE    YFFF22,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC23
         ROUTINE    YSC23,CONVERT
         ROUTINE    YFFF23,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC24
         ROUTINE    YSC24,CONVERT
         ROUTINE    YFFF24,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC25
         ROUTINE    YSC25,CONVERT
         ROUTINE    YFFF25,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC26
         ROUTINE    YSC26,CONVERT
         ROUTINE    YFFF26,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC27
         ROUTINE    YSC27,CONVERT
         ROUTINE    YFFF27,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC28
         ROUTINE    YSC28,CONVERT
         ROUTINE    YFFF28,CONVCC1
         LABEL ' '
         LINE
         HEX        YCC29
         ROUTINE    YSC29,CONVERT
         ROUTINE    YFFF29,CONVCC1
         LABEL ' '
         LINE       ,,SKIP=3
         HEX        YCC30
         ROUTINE    YSC30,CONVERT
         ROUTINE    YFFF30,CONVCC1
         LABEL ' '
         LINE
         ROUTINE    YDUMA,FREECORE
         LABEL ' '
         DC    X'FF0000000000'
         DC    C'$'
LABLAREA EQU   *
         LSTART
         END
