         TITLE 'IFCSXXXE- SUM TABLE - LINKNAME-IFCSXXXE'
         MACRO
         CONVT
         GBLC  &ITEM(1000),&DSECT
         GBLA  &INITIAL
         GBLA  &BITS(1000),&ITEMNBR,&SHIFT(1000)
         GBLA  &NRENTS
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY  !R IF YES
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
         LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4
.*                            THIS MACRO ALLOWS UP TO FOUR LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         GBLA  &NRENTS
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         LCLA  &NDX
         LINEND
.LOOP    ANOP
&NDX     SETA  &NDX+1
         DC    C'&LABELS(&NDX)'
         AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
***  SUM MACRO       SUM MACRO       SUM MACRO       SUM MACRO      ***
         SPACE
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&IBITS EQ 1).FORM1      TEST FOR OLD FORM
         AIF   ('&MASK' NE '').FORM1    TEST FOR MASK
         AIF   (&IBITS+&ISHIFT GT 8).MSG     TEST FOR MORE THAN EIGHT
         DC    AL.1(0),AL.3(&ISHIFT),AL.4(&IBITS)
         DC    AL1(0)
         AGO   .ITEM
.MSG     MNOTE '**BITS GREATER THAN 8**'
         MEXIT
.FORM1   ANOP
         DC    AL1(0)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         SPACE 3
***  SPECIAL MACRO   SPECIAL MACRO   SPECIAL MACRO   SPECIAL MACRO  ***
         SPACE
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
         GBLC  &DSECT
         GBLC  &CSECT
&CSECT   SETC  'IFCSXXXE'
&DSECT   SETC  'XXXE'
IFCSXXXE CSECT
XXXE     DSECT
         DSGEN (CLASSRC,8),(SYSREL,8),(SW,1,0,1,0,7),(SPARES,32)
         DSGEN (XDATE,32),(TIME,32)
         DSGEN (SPARE1,8),(CPUSER,24),(CPUID,16),(SPARE2,16)
         DSGEN (JOBID,64)
         DSGEN (COMMCODE,8),(DATAADDR,24),(FLAGS,8),(RESERVED,8),      C
               (CCWCOUNT,16)
         DSGEN (CSWKEY,8),(XCSWCA,24)
         DSGEN (ATTEN,1),(XCSWSM,1),(XCSWCUE,1),(XCSWBSY,1),           M
               (XCSWCE,1),(XCSWDE,1),(XCSWUC,1),(XCSWUE,1),            M
               (XCSWPCI,1),(XCSWSILI,1),(XCSWPC,1),(XCSWPCHK,1),       V
               (XCSWCDC,1),(XCSWCCC,1),(XCSWICC,1),(XCSWCH,1),         M
               (XCSWCT,16)
         DSGEN (DDCOUNT,8),(SECONCUA,24),(XDEVT1,16),(XDEVT2,16)
         DSGEN (SDRCOUNT,8),(PRIMCUA,24),(IORETRYS,16),(SNSBYTES,16)
         DSGEN (DEVD,1,0,7,0,7)
         DSGEN (STATFLG,8),(CEMODE,8)
         DSGEN (CTR,4,0,55),(SNB,1,0,5,0,7)
         ORG   SNB00
         DSGEN (SNSBYT,48)
*
EXPNOBR  DSECT
EXPNHDRA DS    CL52
EXPNDEVA DS    CL12
EXPNDA   DS    CL8
EXPNSDRA DS    CL30
*
SHRTOBR  DSECT
SHRTHDRA DS    CL24
SHRTDEVA DS    CL8
SHRTSDRA DS    CL30
IFCSXXXE CSECT
         USING XXXE,R2
         USING *,R9                PTR TO ENTRIES
         DC    A(ENTRIES)          PTR TO EDIT SECTION OF SUM TBL
         DC    A(PEDIT)
REG8     DC    F'0'
SCSIZE   DC    H'172'                   NO. OF 2 BYTE COUNTERS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*        SPECIAL ROUTINE SECTION   R2=PTR TO LOGREC  R9=BASE ADDR
*                                  R3=PTR TO BUF COUNTER
XDATE1   STM   R14,R15,REGSAVE          SAVE REGS
         STM   R5,R6,XSAVE              SAVE WORK REGS
         LA    R5,OBRAREA               GET EXPAND AREA ADDRESS
         LR    R6,R2                    SWAP ADDRESS OF DSECT
        USING  EXPNOBR,R5
        USING  SHRTOBR,R6
         XC    OBRAREA(L108),OBRAREA    CLEAR AREA
         TM    SW10,HEX20               TEST FOR SHORT RECORD
         BO    MOVESHRT                 YES-GO MOVE SHORT RE
         MVC   EXPNOBR(L108),SHRTOBR    MOVE RE INTACT
         B     EXPNDRET                 SET UP FOR RETURN
*
MOVESHRT MVC   EXPNHDRA(L24),SHRTHDRA   MOVE HEADER
         MVC   EXPNDEVA(L8),SHRTDEVA    MOVE DEVTYPE AND CUA
         MVC   EXPNSDRA(L30),SHRTSDRA   MOVE SDR AREA
EXPNDRET ST    R2,SAVE2                 SAVE DSECT POINTER
         LR    R2,R5                    POINT R2 AT OBRAREA
         LM    R5,R6,XSAVE              GET SAVED REGS
         STM   R0,R12,REGSAVE+L8        SAVE REMAINDER OF REGS
         LA    R5,L0(R3)                GET OUTSET POINTER RIGHT
         CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    RETURN                   GO BACK
         CLC   L0(L4,R3),HEX00          IS LOW DATE ZERO
         BNE   XDATE2                   BR-NO
         MVC   L0(L4,R3),XDATE          MOVE IN DATE
XDATE2   CLC   XDATE(L4),L0(R3)          CHECK FOR LOW DATE
         BL    SAVELOW                  LOWER SAVE IT
         CLC   XDATE(L4),L4(R3)          CHECK FOR HI
         BNH   RETURN
SAVEHI   MVC   L4(L4,R3),XDATE          MOVE HI DATE
         B     RETURN
SAVELOW  MVC   L0(L4,R3),XDATE          MOVE LOW DATE
RETURN   LM    R14,R12,REGSAVE          RESTORE REGS
         BR    R14                      RETURN
XFAILCCW EQU   *
         TM    SW10,HEX20               TEST FOR SHORT RECORD
         BCR   ONE,R14                  YES-RETURN
         STM   R14,R12,REGSAVE          SAVE REGS
         SR    R7,R7
         IC    R7,COMMCODE              PICK UP FAILING CCW CODE
         B     COMMON
*
RESET2   L     R2,SAVE2                 RESET R2
         BR    R14
*
REGSAVE  DC    16F'0'
*
*
COMMON   SR    R1,R1
         L     R8,REG8             GET CURRENT PTR
         IC    R1,L1(R8)           PICK UP NUMBER OF ITERATIONS
         LR    R5,R1               PLACE VALUE IN R5
         SLL   R5,L2               MULTIPLY BY 2
         AR    R5,R3               SET PTR TO POS PAST CTRS HOLDING
*                                  DATA - SUM COUNTER
         LH    R4,HEXFF            PICK UP FULL FLG
LOOP1    CH    R4,L0(R3)           IS THIS COUNT EMPTY
         BNE   STORE               BR-YES NOT FFFF
         CH    R7,L2(R3)           IS DATE EQUAL TO STORED
         BE    BUMP                YES
         LA    R3,L4(R3)           BUMP DATA PTR
         LA    R5,L2(R5)           BUMP SUM PTR
         BCT   R1,LOOP1            LOOP TILL DONE
         B     RETURN              FULL RETURN
STORE    STH   R4,L0(R3)           STORE FFFF FLAG
BUMP     LH    R6,L0(R5)                PICK UP COUNTER
         STH   R7,L2(R3)           STORE DATA
         LA    R6,L1(R6)           BASED ON R5
         STH   R6,L0(R5)
         B     RETURN
XDEVT    MVC   L0(L4,R3),XDEVT1         SAVE DEVICE TYPE
         BR    R14                 RETURN
*                                                                S21021
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L24      EQU   24
L28      EQU   28
L30      EQU   30
L32      EQU   32
L64      EQU   64
L104     EQU   104                                               S21021
L108     EQU   108
ONE      EQU   1
HEX20    EQU   X'20'
SAVE2    DS    F                                                 S21021
OBRAREA  DS    CL108                    DSECT AREA
         DS    0H
HEXFF    DC    X'FFFF'
HEX00    DC    F'0'
*
ENTRIES  DS    0F
         SPECIAL    XDATE1,0,SPACE=4
         SPECIAL    XFAILCCW,00011000,SPACE=72
         SUM   CTR0
         SUM   CTR1
         SUM   CTR2
         SUM   CTR3
         SUM   CTR4
         SUM   CTR5
         SUM   CTR6
         SUM   CTR7
         SUM   CTR8
         SUM   CTR9
         SUM   CTR10
         SUM   CTR11
         SUM   CTR12
         SUM   CTR13
         SUM   CTR14
         SUM   CTR15
         SUM   CTR16
         SUM   CTR17
         SUM   CTR18
         SUM   CTR19
         SUM   CTR20
         SUM   CTR21
         SUM   CTR22
         SUM   CTR23
         SUM   CTR24
         SUM   CTR25
         SUM   CTR26
         SUM   CTR27
         SUM   CTR28
         SUM   CTR29
         SUM   CTR30
         SUM   CTR31
         SUM   CTR32
         SUM   CTR33
         SUM   CTR34
         SUM   CTR35
         SUM   CTR36
         SUM   CTR37
         SUM   CTR38
         SUM   CTR39
         SUM   CTR40
         SUM   CTR41
         SUM   CTR42
         SUM   CTR43
         SUM   CTR44
         SUM   CTR45
         SUM   CTR46
         SUM   CTR47
         SUM   CTR48
         SUM   CTR49
         SUM   CTR50
         SUM   CTR51
         SUM   CTR52
         SUM   CTR53
         SUM   CTR54
         SUM   CTR55
         SUM   SNB00
         SUM   SNB01
         SUM   SNB02
         SUM   SNB03
         SUM   SNB04
         SUM   SNB05
         SUM   SNB06
         SUM   SNB07
         SUM   SNB10
         SUM   SNB11
         SUM   SNB12
         SUM   SNB13
         SUM   SNB14
         SUM   SNB15
         SUM   SNB16
         SUM   SNB17
         SUM   SNB40
         SUM   SNB41
         SUM   SNB42
         SUM   SNB43
         SUM   SNB44
         SUM   SNB45
         SUM   SNB46
         SUM   SNB47
         SUM   SNB50
         SUM   SNB51
         SUM   SNB52
         SUM   SNB53
         SUM   SNB54
         SUM   SNB55
         SUM   SNB56
         SUM   SNB57
         SUM   SW12
         SPECIAL RESET2,0,SPACE=1
         DC    X'FF'
PEDIT    DS    0F
&DSECT   SETC  'YYY5'
&CSECT   SETC  'PEDIT'
         USING *,R9
         USING YYY5,R2
*        EDIT AND PRINT SECTION
         DC    A(PENTRY)
         DC    C'IFCSXXXE'
YR9PTR   DS    F
YLABELP  DS    F
YYY5     DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YLOWD,32)
         DSGEN (YHID,32)
         DSGEN (CC,8,1,24,1,4),(CCCNT,16,1,24)
         DSGEN (SDR,16,0,55),(SNSUM,16,0,3,0,7),(SHTCNT,16),(DUMY1,16)
IFCSXXXE CSECT
*
*              SPECIAL ROUTINES SUMMARY SECTION        **
*
*
*
RETURNA  LM    R5,R8,XSAVE              RESTORE REGS
         BR    R14                      RETURN
*        FREEE COUNTERS AREA LAST THING DONE
*
FREECORE STM   R14,R12,L12(R13)
         LR    R12,R13                  SAVE R13 INTO R12
         LA    R13,FSAVE
         ST    R12,L4(R13)              SET CHAINING POINTERS
         ST    R13,L8(R12)
         L     R3,L4(R2)
         ST    R3,L28(R12)              SET IT IN SAVED REG 2
         LH    R0,SIZE                  PICK SIZE
         LR    R1,R2                    SET POINTER
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3                    ANY MORE AREAA TO PRINT
         BZ    RETURNO                  BR-NO
         LA    R5,PENTRY+L10            SET POINTERS
         ST    R5,YR9PTR                STORE
         LA    R5,LABELS-L1             RESET ADRESS
         ST    R5,YLABELP               STORE
RETURNO  L     R13,L4(R13)              PICK UP REGISTER AND
         LM    R14,R12,L12(R13)         RESET REGS
         BR    R14                      RETURN
SETDATE  UNPK  WORK(L8),L0(L4,R4)  PACK DATE
         MVZ   WORK+L7(L1),WORK    MOVE ON ZONE
         MVC   L0(L3,R3),WORK+L5   MOVE DATE TO PRINT LINE
         MVC   L5(L2,R3),WORK+L3   MOVE YEAR TO PRINT LINE
         BR    R14                 RETURN
SETCPUNO STM   R5,R8,XSAVE              SAVE REGS
         SR    R5,R5                    CLEAR REG 5
         IC    R5,0(R4)                 PICK UP
         SLL   R5,R8                     CPU TYPE
         IC    R5,L1(R4)                    FIELD
         LTR   R5,R5                    IS IT ZERO
         BNZ   RETURNA                  NO LINE IS GOOD RETURN
         LA    R6,L64                   ELSE, BACK UP DATA POINTER
         SR    R3,R6                    TO PUT IN NEW INFO
         MVC   L0(L6,R3),SHARED         SAY MODEL SHARED       @Z427VLS
         B     RETURNA
CONVCC1  CLC   L0(L2,R4),HEXFFFF        IS THIS COUNTER EMPYT
         BCR   L8,R14                   NO TI IS FULL
         SR    R15,R15                  STOP LINE PRINTING
SKIPPER  BR    R14                      RETURN
FFTST    CLC   L0(L2,R4),HEXFFFF        TEST FOR COUNT
         BCR   L8,R14                   YES-RETURN
         SR    R15,R15                  NO-DO NOT PRINT
         BR    R14                      RETURN
*
*              SET LABELS
*
HEX02    EQU   X'02'
*
WORK     DS    D
XSAVE    DS    4F
ZEROS    DC    XL6'00'
FSAVE    DS    18F
HEXFFFF  DC    X'FFFF'
SHARED   DC    C'SHARED'                                       @Z427VLS
SIZE     DC    H'322'                   NO OF BYTES TO FREE
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
         DC    X'01'
         DC    X'000B8B00'
         LABEL ''
         LINE  (57,32),(23,26)
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE    YCPU,SETCPUNO
         LABEL 'DAY YEAR   DAY YEAR','MODEL-','SERIAL NO.'
         LINE  (23,11),(1,30)
         ROUTINE    YLOWD,SETDATE
         ROUTINE    YHID,SETDATE
         LABEL      'OUTBOARD DATE RANGE -','TO'
         LINE  (61,14),(1,65)
         HEX   YCUA
         LABEL 'SUMMARY OF I/O OUTBOARD ENVIRONMENT RECORDS FOR DEVICE'C
               ,'DEVICE TYPE 3886'
         LINE  (29,1),SKIP=1
         CONVT YNOREC
         LABEL 'TOTAL NUMBER OF RECORDS'
         LINE
         CONVT SHTCNT
         LABEL 'TOTAL OF OVERFLOW RECORDS'
         LINE  ,(1,1),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LABEL 'CCW COMMAND CODES ENCOUNTERED(MAXIMUM OF 24)'
         LINE  ,(3,6),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LABEL 'CMND','TOTAL'
         LINE  (5,5),(1,1),SKIP=1
         HEX   CC14
         CONVT CCCNT1
         ROUTINE CC11,FFTST
         LABEL ''
         LINE
         HEX   CC24
         CONVT CCCNT2
         ROUTINE CC21,FFTST
         LABEL ''
         LINE
         HEX   CC34
         CONVT CCCNT3
         ROUTINE CC31,FFTST
         LABEL ''
         LINE
         HEX   CC44
         CONVT CCCNT4
         ROUTINE CC41,FFTST
         LABEL ''
         LINE
         HEX   CC54
         CONVT CCCNT5
         ROUTINE CC51,FFTST
         LABEL ''
         LINE
         HEX   CC64
         CONVT CCCNT6
         ROUTINE CC61,FFTST
         LABEL ''
         LINE
         HEX   CC74
         CONVT CCCNT7
         ROUTINE CC71,FFTST
         LABEL ''
         LINE
         HEX   CC84
         CONVT CCCNT8
         ROUTINE CC81,FFTST
         LABEL ''
         LINE
         HEX   CC94
         CONVT CCCNT9
         ROUTINE CC91,FFTST
         LABEL ''
         LINE
         HEX   CC104
         CONVT CCCNT10
         ROUTINE CC101,FFTST
         LABEL ''
         LINE
         HEX   CC114
         CONVT CCCNT11
         ROUTINE CC111,FFTST
         LABEL ''
         LINE
         HEX   CC124
         CONVT CCCNT12
         ROUTINE CC121,FFTST
         LABEL ''
         LINE
         HEX   CC134
         CONVT CCCNT13
         ROUTINE CC131,FFTST
         LABEL ''
         LINE
         HEX   CC144
         CONVT CCCNT14
         ROUTINE CC141,FFTST
         LABEL ''
         LINE
         HEX   CC154
         CONVT CCCNT15
         ROUTINE CC151,FFTST
         LABEL ''
         LINE
         HEX   CC164
         CONVT CCCNT16
         ROUTINE CC161,FFTST
         LABEL ''
         LINE
         HEX   CC174
         CONVT CCCNT17
         ROUTINE CC171,FFTST
         LABEL ''
         LINE
         HEX   CC184
         CONVT CCCNT18
         ROUTINE CC181,FFTST
         LABEL ''
         LINE
         HEX   CC194
         CONVT CCCNT19
         ROUTINE CC191,FFTST
         LABEL ''
         LINE
         HEX   CC204
         CONVT CCCNT20
         ROUTINE CC201,FFTST
         LABEL ''
         LINE
         HEX   CC214
         CONVT CCCNT21
         ROUTINE CC211,FFTST
         LABEL ''
         LINE
         HEX   CC224
         CONVT CCCNT22
         ROUTINE CC221,FFTST
         LABEL ''
         LINE
         HEX   CC234
         CONVT CCCNT23
         ROUTINE CC231,FFTST
         LABEL ''
         LINE
         HEX   CC244
         CONVT CCCNT24
         ROUTINE CC241,FFTST
         LABEL ''
         LINE  SKIP=1
         LABEL ''
         LINE  ,(1,1),SKIP=2
         LABEL 'STATISTICAL DATA COUNTERS 0-39'
         LINE  (19,29),(1,29),SKIP=1
         CONVT SDR0
         CONVT SDR10
         CONVT SDR20
         CONVT SDR30
         LABEL 'SPRTOR JAM SW','INTM TRNS OVRRUN','LINE MK REQ ERROR','X
               LINE MK PRT CHK'
         LINE
         CONVT SDR1
         CONVT SDR11
         CONVT SDR21
         CONVT SDR31
         LABEL 'SPRTOR TIMEOUT','STEP MOT STOP ERR','TRAV LIMIT SW','LIX
               NE MK DET ERR'
         LINE
         CONVT SDR2
         CONVT SDR12
         CONVT SDR22
         CONVT SDR32
         LABEL 'TOO LONG DOC','STACK A OR B JAM','TRAV TIME OVRRUN','LIX
               NE MK MISCOMP'
         LINE
         CONVT SDR3
         CONVT SDR13
         CONVT SDR23
         CONVT SDR33
         LABEL 'ALGN SCT TIMEOUT','STEP MOT STRT ERR','TRAV EMITTER ERRX
               ','CHAR OUT OF SCAN'
         LINE
         CONVT SDR4
         CONVT SDR14
         CONVT SDR24
         CONVT SDR34
         LABEL 'INTD TRANSPORT','STEP MOT SPD ERR','TRAV SPEED ERR','FLX
               D DELIM NOT FND'
         LINE
         CONVT SDR5
         CONVT SDR15
         CONVT SDR25
         CONVT SDR35
         LABEL 'STACKER SEL ERR','INC TIMEOUT','TRAV SCAN PITCH','CHAR X
               ON FLD BOUND'
         LINE
         CONVT SDR6
         CONVT SDR16
         CONVT SDR26
         CONVT SDR36
         LABEL 'HOP NOT IN POS','STACK SEL JAM','SPARE','VIDEO OVRRUN'
         LINE
         CONVT SDR7
         CONVT SDR17
         CONVT SDR27
         CONVT SDR37
         LABEL 'SER NO UPDATE CHK','CLUTCH FAIL PICK','SPARE','CHAR BUFX
               F OVRFLOW'
         LINE
         CONVT SDR8
         CONVT SDR18
         CONVT SDR28
         CONVT SDR38
         LABEL 'STACKER A JAM','SPARE','LINE MK NOT COMP','NOISE CHECK'
         LINE  SKIP=2
         CONVT SDR9
         CONVT SDR19
         CONVT SDR29
         CONVT SDR39
         LABEL 'STACKER B JAM','RD STA TIME MK CK','SER NO PRT CHK','SPX
               ARE'
         LINE  ,(3,),SKIP=2
         LABEL 'STATISTICAL DATA COUNTERS 40-55'
         LINE  (19,29),(1,29),SKIP=1
         CONVT SDR40
         CONVT SDR50
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR41
         CONVT SDR51
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR42
         CONVT SDR52
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR43
         CONVT SDR53
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR44
         CONVT SDR54
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR45
         CONVT SDR55
         LABEL 'SPARE','SPARE'
         LINE
         CONVT SDR46
         LABEL 'SPARE'
         LINE
         CONVT SDR47
         LABEL 'SPARE'
         LINE
         CONVT SDR48
         LABEL 'SPARE'
         LINE  SKIP=2
         CONVT SDR49
         LABEL 'SPARE'
         LINE  ,(1,1),SKIP=2
         LABEL 'SENSE BYTES SUMMARY'
         LINE  (19,29),(8,29)
         LABEL 'BYTE 0','BYTE 1','BYTE 4','BYTE 5'
         LINE  ,(1,29),SKIP=1
         CONVT SNSUM00
         CONVT SNSUM10
         CONVT SNSUM20
         CONVT SNSUM30
         LABEL 'CMND REJ','NOT USED','ISM M SIZE','NOT USED'
         LINE
         CONVT SNSUM01
         CONVT SNSUM11
         CONVT SNSUM21
         CONVT SNSUM31
         LABEL 'INT REQD','MARK CHECK','ISM M SIZE','A DATA S7'
         LINE
         CONVT SNSUM02
         CONVT SNSUM12
         CONVT SNSUM22
         CONVT SNSUM32
         LABEL 'BUS O CHK','INV FORMAT','ISM M SIZE','NHP/G HARD'
         LINE
         CONVT SNSUM03
         CONVT SNSUM13
         CONVT SNSUM23
         CONVT SNSUM33
         LABEL 'EQUIP CHK','NOT USED','ISM M SIZE','A ISM PG R'
         LINE
         CONVT SNSUM04
         CONVT SNSUM14
         CONVT SNSUM24
         CONVT SNSUM34
         LABEL 'NOT USED','INCP SCAN','NOT USED','N ISM PG R'
         LINE
         CONVT SNSUM05
         CONVT SNSUM15
         CONVT SNSUM25
         CONVT SNSUM35
         LABEL 'NOT USED','NOT USED','INC HOP/ST','A/N B-FONT'
         LINE
         CONVT SNSUM06
         CONVT SNSUM16
         CONVT SNSUM26
         CONVT SNSUM36
         LABEL 'NON INIT','NON RECVRY','SERL NUMB','NUM B-FONT'
         LINE
         CONVT SNSUM07
         CONVT SNSUM17
         CONVT SNSUM27
         CONVT SNSUM37
         LABEL 'N IN/RCP F','OUTB RECD','LINE MKNG','NHP G ISM'
         LINE
         ROUTINE SNSUM00,FREECORE
         LABEL ''
         DC    X'FF'
         DC    XL6'00'
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
