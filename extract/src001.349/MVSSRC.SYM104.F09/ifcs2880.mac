         TITLE 'IFCS2880 - SUM TABLE - LINKNAME=IFCS2880'
         TITLE '****  2880C SUMMARY  ****'
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         EJECT
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
         MACRO
         LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4
.*                            THIS MACRO ALLOWS UP TO FOUR LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         GBLA  &NRENTS
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         LCLA  &NDX
         LINEND
.LOOP    ANOP
&NDX     SETA  &NDX+1
         DC    C'&LABELS(&NDX)'
         AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         EJECT
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
         GBLC  &DSECT
         GBLC  &CSECT
&DSECT   SETC  'C2880'
&CSECT   SETC  'IFCS2880'
IFCS2880 CSECT
C2880    DSECT
DUM      EQU   *
         EJECT
         DSGEN (XKEY,16),(XSWS,16),(XDUM1,32)
         DSGEN (XDATE,32),(XTIME,32)
         DSGEN (XDUM2,8),(XSER,24),(XMOD,16),(MCEL,16)
         DSGEN (XPGMN,64)
         DSGEN (XAIO1,64)
         DSGEN (XAIO5,64)
         DSGEN (XFCCW,64)
         DSGEN (XCSW,32),(XCSWS,12),(XCDC,1),(XCCC,1),(XIFC,1),(XD,17)
         DSGEN (XECSW,32)
         DSGEN (XDEVT1,16),(XDEVT2,16)
         DSGEN (XCHID,8),(XCUA,24)
         DSGEN (XMPIN,32)
DATA     EQU   *                                                 43068
BLKMPX00 DSGEN (BKMXPPCI,1),(BKMXCPCT,1),(BKMXPGCK,1),(BKMXPRCK,1),    X
               (BKMXDACK,1),(BKMXCTCK,1),(BKMXIFCK,1),(BKMXCHCK,1),    X
               (BKMXPCCK,1),(BKMXNORP,1),(BKMXMINT,1),(BKMXILSQ,1),    X
               (BKMXSCCK,1),(BKMXIRCK,1),(BKMXWCCK,1),(BKMXTCCK,1),    X
               (BKMXBRCK,1),(BKMXLBCK,1),(BKMXIOIV,1),(BKMXIOCK,1),    X
               (BKMXIOPK,1),(BKMXSSPC,1),(BKMXUPCK,1),(BKMXUCCK,1),    X
               (BKMXIVUC,1),(BKMXDUM1,1),(BKMXSMPK,1),(BKMXSAPK,1),    X
               (BKMXKPCK,1),(BKMXIVAK,1),(BKMXSPIK,1),(BKMXDUM2,1)
         SPACE 2
BLKMPX01 DSGEN (BKMXPICK,1),(BKMXSQCK,1),(BKMXIVUA,1),(BKMXCXCK,1),    X
               (BKMXCBCK,1),(BKMXIACK,1),(BKMXDUM3,1),(BKMXLGDI,1),    X
               (BKMXTOCP,1),(BKMXTOSI,1),(BKMXTOIO,1),(BKMXUDCK,1),    X
               (BKMXWDCK,1),(BKMXMGCK,1),(BKMXSOPK,1),(BKMXSIPC,1),    X
               (BKMXSPCK,1),(BKMXDUM4,1),(BKMXBOPK,1),(BKMXBIPK,1),    X
               (BKMXARCK,1),(BKMXALCK,1),(BKMXHSCK,1),(BKMXCYCK,1),    X
               (BKMXJLCK,1),(BKMXCARK,1),(BKMXCTCT,1),(BKMXDTAR,1),    X
               (BKMXBYT0,1),(BKMXBYT1,1),(BKMXBYT2,1),(BKMXBYT3,1)
         SPACE 2
BLKMPX02 DSGEN (BKMXUSVL,1),(BKMXCAVL,1),(BKMXDUM5,1),(BKMXCARO,4),    X
               (BKMXUPTY,1),(BKMXUCWR,8),(BKMXWDE2,3),(BKMXSSCH,1),    X
               (BKMXICBX,3),(BKMXIABP,1),(BKMXIAB8,8)
         SPACE 2
BLKMPX03 DSGEN (BKMXSCAN,1),(BKMXCCRQ,1),(BKMXSSIO,1),(BKMXTTIO,1),    X
               (BKMXHHIO,1),(BKMXDTXF,1),(BKMXCCRS,1),(BKMXCCDA,1),    X
               (BKMXCCPR,1),(BKMXTERM,1),(BKMXINRP,1),(BKMXIIPL,1),    X
               (BKMXRSET,1),(BKMXCURC,1),(BKMXINSR,1),(BKMXESCN,1),    X
               (BKMXCCWF,1),(BKMX1SER,1),(BKMXDAT1,1),(BKMXPPE2,1),    X
               (BKMXFET3,1),(BKMXTGDL,1),(BKMXCDPF,1),(BKMXLDCY,1),    X
               (BKMXCMDS,1),(BKMXXFCT,1),(BKMXRCHE,1),(BKMXUCW1,1),    X
               (BKMXMOD0,1),(BKMXSPCC,1),(BKMXHIOB,1),(BKMXHDVM,1)
         SPACE 2
BLKMPX04 DSGEN (BKMXUASU,1),(BKMXUCW2,1),(BKMXCTFT,1),(BKMXCINS,1),    X
               (BKMXINSL,1),(BKMXSTCD,1),(BKMXDTSQ,1),(BKMXRDDT,1),    X
               (BKMXCTRC,1),(BKMXCSWS,1),(BKMXRSFL,1),(BKMXCCHK,1),    X
               (BKMXINCH,1),(BKMXIPLT,1),(BKMXIOTM,1),(BKMXDUM6,1),    X
               (BKMXDUM7,1),(BKMXDUM8,1),(BKMXINKF,1),(BKMXINCA,1),    X
               (BKMXINCM,1),(BKMXINFF,1),(BKMXTCOS,1),(BKMXTCOT,1),    X
               (BKMXCLC1,4),(BKMXCLC2,4)
         SPACE 2
BLKMPX05 DSGEN (BKMXUAST,1),(BKMXUCW3,1),(BKMXCLFT,1),(BKMXCINP,1),    X
               (BKMXISL2,1),(BKMXSTC2,1),(BKMXDSQ2,1),(BKMXRSD2,1),    X
               (BKMXCRC2,1),(BKMXCSW2,1),(BKMXRSF2,1),(BKMXCCK2,1),    X
               (BKMXICH2,1),(BKMXIPT2,1),(BKMXIOT2,1),(BKMXDUM9,1),    X
               (BKMXDM10,8),(BKMXPCBD,1),(BKMXRTIC,1),(BKMXCTFC,1),    X
               (BKMXSGTD,1),(BKMXDSIH,1),(BKMXRSDS,1),(BKMXOFLO,1),    X
               (BKMXCMDR,1)
         SPACE 2
BLKMPX06 DSGEN (BKMXSTOR,1),(BKMXREQO,1),(BKMX2REQ,1),(BKMXBT28,1),    X
               (BKMXADV1,1),(BKMXBADV,1),(BKMXEXCP,1),(BKMXBKEX,1),    X
               (BKMXSTOF,1),(BKMXDATC,1),(BKMX1OBL,1),(BKMX2OBL,1),    X
               (BKMX1REQ,1),(BKMXLREQ,1),(BKMXACPT,1),(BKMXDM11,1),    X
               (BKMXDM12,4),(BKMXWLLD,4),(BKMXBARV,4),(BKMXQUAD,2),    X
               (BKMXDAWL,2)
         SPACE 2
BLKMPX07 DSGEN (BKMXAOUT,1),(BKMXSOUT,1),(BKMXSVOT,1),(BKMXCMOT,1),    X
               (BKMXSBOT,1),(BKMXOPOT,1),(BKMXDAOT,1),(BKMXAORI,1),    X
               (BKMXSTAI,1),(BKMXREQI,1),(BKMXINOP,1),(BKMXISSL,1),    X
               (BKMXCD01,1),(BKMXCC01,1),(BKMXSLI1,1),(BKMXSKIP,1),    X
               (BKMXCD02,1),(BKMXCC02,1),(BKMXBSLI,1),(BKMXBSKP,1),    X
               (BKMXBPCI,1),(BKMXDM27,1),(BKMXMKIP,1),(BKMXMKOP,1),    X
               (BKMXMKI0,1),(BKMXMKI1,1),(BKMXDM13,1),(BKMXDM14,1),    X
               (BKMXMKO0,1),(BKMXMKO1,1),(BKMXDM15,1),(BKMXDM16,1)
         SPACE 2
BLKMPX08 DSGEN (BKMXIRCD,6),(BKMXDTTC,4),(BKMXDTWC,4),(BKMXDTSC,3),    X
               (BKMXDLSP,7),(BKMXPP05,8)
         SPACE 2
BLKMPX09 DSGEN (BKMXUTSL,1),(BKMXTDDA,1),(BKMXALLI,1),(BKMXINTD,1),    X
               (BKMXSDOM,1),(BKMXSYTG,1),(BKMXSYLT,1),(BKMXSYT2,1),    X
               (BKMXSYL2,1),(BKMXIRIM,1),(BKMXIROM,1),(BKMXWRTR,1),    X
               (BKMXSKWF,1),(BKMX2BYL,1),(BKMXLBYL,1),(BKMXLBRD,1),    X
               (BKMXENCD,1),(BKMXS1CD,1),(BKMXEEIC,1),(BKMXBKIC,1),    X
               (BKMXLOWC,1),(BKMXBKLC,1),(BKMXSTOP,1),(BKMXSTPI,1),    X
               (BKMXDMOD,1),(BKMXWIDE,1),(BKMXDM17,3),(BKMXSIRC,3)
         SPACE 2
BLKMPX10 DSGEN (BKMXUCBO,8),(BKMXUCB1,8),(BKMXUCB2,8),(BKMXUCB3,8)
         SPACE 2
BLKMPX11 DSGEN (BKMXKKEY,8),(BKMXCAB1,8),(BKMXCAB2,8),(BKMXCAB3,8)
         SPACE 2
BLKMPX12 DSGEN (BKMXDVSA,1),(BKMXSTAM,1),(BKMXCEND,1),(BKMXBUSY,1),    X
               (BKMXSTCE,1),(BKMXSTDE,1),(BKMXSTUC,1),(BKMXSTUE,1),    X
               (BKMXSPCI,1),(BKMXINCL,1),(BKMXPRGC,1),(BKMXPRTC,1),    X
               (BKMXCDTC,1),(BKMXCCTC,1),(BKMXICTC,1),(BKMXCHAC,1),    X
               (BKMXCRB2,8),(BKMXCRB3,8)
         SPACE 2
BLKMPX13 DSGEN (BKMXCCB0,8),(BKMXDAB1,8),(BKMXDAB2,8),(BKMXDAB3,8)
         SPACE 2
BLKMPX14 DSGEN (BKMXIRB0,8),(BKMXIRB1,8),(BKMXDM18,16)
         SPACE 2
BLKMPX15 DSGEN (BKMXLSI0,8),(BKMXLSI1,8),(BKMXLSI2,8),(BKMXLSI3,8)
         SPACE 2
BLKMPX16 DSGEN (BKMXLSD0,8),(BKMXLSD1,8),(BKMXLSD2,8),(BKMXLSD3,8)
         SPACE 2
BLKMPX17 DSGEN (BKMXDCWS,1),(BKMXP815,1),(BKMXP623,1),(BKMXP431,1),    X
               (BKMXCMND,1),(BKMXAD15,1),(BKMXRG23,1),(BKMXPT31,1),    X
               (BKMXRP07,1),(BKMXRP15,1),(BKMXRP23,1),(BKMXRP31,1),    X
               (BKMXDT07,1),(BKMXAR15,1),(BKMXRE23,1),(BKMXPY31,1),    X
               (BKMXIR07,1),(BKMXOT15,1),(BKMXPA23,1),(BKMXPA31,1),    X
               (BKMXLO07,1),(BKMXST15,1),(BKMXIF23,1),(BKMXPTY1,1),    X
               (BKMXLOC7,1),(BKMXSTO5,1),(BKMXDAT3,1),(BKMXPART,1),    X
               (BKMXDD18,4)
         SPACE 2
BLKMPX18 DSGEN (BKMXSR00,8),(BKMXSR01,8),(BKMXSR02,8),(BKMXSR03,8)
         SPACE 2
BLKMPX19 DSGEN (BKMXSR10,8),(BKMXSR11,8),(BKMXSR12,8),(BKMXSR13,8)
         SPACE 2
BLKMPX20 DSGEN (BKMXSR20,8),(BKMXSR21,8),(BKMXSR22,8),(BKMXSR23,8)
         SPACE 2
BLKMPX21 DSGEN (BKMXSR30,8),(BKMXSR31,8),(BKMXSR32,8),(BKMXSR33,8)
         SPACE 2
BLKMPX22 DSGEN (BKMXUCWS,4),(BKMXSCHS,4),(BKMXLTH1,8),(BKMXLTH2,8),    X
               (BKMXLTH3,8)
         SPACE 2
BLKMPX23 DSGEN (BKMXPRSM,2),(BKMXDGMD,2),(BKMXCHMM,1),(BKMXMCFR,1),    X
               (BKMXMCPC,1),(BKMXSRCK,1),(BKMXPRFI,1),(BKMXINSB,4),    X
               (BKMXSTPC,1),(BKMXSIMS,1),(BKMXCPII,1),(BKMXCTTC,1),    X
               (BKMXSTCY,1),(BKMXMCAC,1),(BKMXPSLR,1),(BKMXPSCC,1),    X
               (BKMXRSTI,1),(BKMXDM19,10)
         SPACE 2
BLKMPX24 DSGEN (BKMXDM20,1),(BKMXMCWP,1),(BKMXLOGO,1),(BKMXMHCL,1),    X
               (BKMXRVSP,1),(BKMXRSPT,1),(BKMXENCC,1),(BKMXSPCD,1),    X
               (BKMXSRQI,1),(BKMXISIN,1),(BKMXMADI,1),(BKMXOPLI,1),    X
               (BKMXSTAA,1),(BKMXSVCI,1),(BKMXGDTI,1),(BKMXASIO,1),    X
               (BKMXSLAB,8),(BKMXPGSC,8)
         SPACE 2
BLKMPX25 DSGEN (BKMXCANA,1),(BKMXCANB,1),(BKMXENBL,1),(BKMXDLAY,1),    X
               (BKMXCLWR,1),(BKMXBASY,1),(BKMXLSCC,1),(BKMXLOGC,1),    X
               (BKMXLGCK,1),(BKMXSMSC,1),(BKMXDM21,5),(BKMXSIMP,1),    X
               (BKMXSMDR,8),(BKMXECIR,8)
         SPACE 2
BLKMPX26 DSGEN (BKMXSI07,1),(BKMXWD01,1),(BKMXWD02,1),(BKMXPT01,1),    X
               (BKMXSI17,1),(BKMXWD11,1),(BKMXWD12,1),(BKMXPT11,1),    X
               (BKMXSI27,1),(BKMXWD21,1),(BKMXWD22,1),(BKMXPT02,1),    X
               (BKMXSI37,1),(BKMXWD31,1),(BKMXWD32,1),(BKMXPT22,1),    X
               (BKMXDM22,1),(BKMXJ815,1),(BKMXL163,1),(BKMXP241,1),    X
               (BKMXOHSV,1),(BKMXCH85,1),(BKMXM163,1),(BKMXPY41,1),    X
               (BKMXDM23,8)
         SPACE 2
BLKMPX27 DSGEN (BKMXUSIO,1),(BKMXUTIO,1),(BKMXUHIO,1),(BKMXDM24,4),    X
               (BKMXUIRQ,1),(BKMXUIRP,1),(BKMXUBSY,1),(BKMXDM25,1),    X
               (BKMXBLPU,1),(BKMXBLCH,1),(BKMXBLSC,1),(BKMXBLSU,1),    X
               (BKMXBLCU,1),(BKMXDM26,16)
IFCS2880 CSECT
ENTRYPTR DC    A(EDIT)
         DC    A(PEDIT)            POINTER TO EDIT SECTION
REG9     DS    F
SCSIZE   DC    H'300'
ROUTINES EQU   *
LOGREG   EQU   2
@FAILCCW DS    0F
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,FCCW(LOGREG)
FCCW     EQU   48
         B     COMMON
@DEVADR  DS    0F
         USING *,15
         STM   14,12,12(13)
         SR    7,7                 LOAD DEVICE ADDRESS
         IC    7,74(LOGREG)
         SLL   7,8
         IC    7,75(LOGREG)
COMMON   EQU   *
         BALR  12,0
         USING *,12
         L     1,R9ADR
         L     9,0(1)
         SR    1,1
         IC    1,1(9)              ITERATIONS
         LR    5,1
         SLL   5,2
         AR    5,3                 COMPUTE COUNTER ADDRESS PAST TEXT
         LH    4,=X'FFFF'
LOOP1    CH    4,0(3)              TEST FOR EMPTY/FULL
         BNE   STORE
         CH    7,2(3)              FULL - COMPARE WITH STORED DATA
         BE    BUMP
         LA    3,4(3)              NOT SAME - GO TO NEXT TEXT CELL
         LA    5,2(5)
         BCT   1,LOOP1
         B     FULL                ALL CELLS FULL - NO MATCH
STORE    EQU   *
         STH   4,0(3)              STORE NEW TEXT DATA
         STH   7,2(3)
BUMP     EQU   *
         LH    6,0(5)              BUMP COUNTER BY ONE
         AH    6,=H'1'
         STH   6,0(5)
FULL     EQU   *
         LM    14,12,12(13)
         BR    14
*
*        SAVE  DATE RANGE
*
         DROP  12
         DROP  15
         USING C2880,R2
         USING IFCS2880,R9
*
XDATE1   CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    EXIT
         CLC   L0(L4,R3),HEX00    IS LOW DATE = ZERO ?
         BNE   XDATE2
         MVC   L0(L4,R3),XDATE    IF YES MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK AGAINST LOW DATE
         BL    SAVELO                   BR-THIS IS LOWER
         CLC   XDATE(L4),L4(R3)         CHECK AGAIN HI
         BH    SAVEHI
EXIT     BR    R14                      RETURN
SAVEHI   MVC   L4(L4,R3),XDATE          SAVE HI DATE IN COUNTER
         B     EXIT
SAVELO   MVC   L0(L4,R3),XDATE          SAVE LO
         B     EXIT
ALLFFF   STM   R5,R8,SSAVE              SAVE REGS                43068
         LA    R4,DATA                  POINT TO DATA            43068
AG       CLC   L0(L4,R4),HFFF           IS WORD ALL FF"S         43068
         BNE   OK                       BR - NO                  43068
         LA    R5,QUIT-L6               POINT TO END             43068
         ST    R5,REG9                  STORE IN LIST            43068
OK       LM    R5,R8,SSAVE              RESTORE REGS             43068
         BR    R14                      EXIT                     43068
SSAVE    DC    4F'0'                    SMALL SAVE AREA          43068
HFFF     DC    X'FFFFFFFF'                                       43068
HEX00    DC    F'0'
R9ADR    DC    A(REG9)
EDIT     EQU   *
         EJECT
***********************************************************************
*                                                                     *
*        2880C SUMMARY FORMATER                                       *
***********************************************************************
         SPACE 2
         SPECIAL XDATE1,00000000,SPACE=4
*
*        LABELS NEEDED FOR HEADER
*
         LABEL ' '            SKIP TO CH 1
         LABEL 'DAY YEAR   DAY YEAR'
         LABEL 'INBOARD DATE RANGE','TO'
         LABEL      '---MODEL--','SERIAL NO'                     S21021
         LABEL '---CHANNEL NUMBER--'
         LABEL      'CHANNEL INBOARD SUMMARY FOR 2880 CHANNEL'
         LABEL 'NUMBER OF RECORDS EXAMINED ='
         LABEL '--------TITLE--------','TOTAL'
*
         LABEL 'DEVICE ADDRESS SUMMARY (MAX- 10 VALUES)'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL 'FAILING CCW SUMMARY(MAX-10 VALUES)'
         LABEL 'CMND CODE'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL '--------TITLE--------                TOTAL',           C
               '--------TITLE--------                TOTAL'
         SPECIAL  @DEVADR,00001010,SPACE=30
         SPECIAL  @FAILCCW,00001010,SPACE=30
         SUM   BKMXDACK
         LABEL 'CHAN DATA CHK'
         SUM   BKMXCTCK
         LABEL 'CHAN CTRL CHK'
         SUM   BKMXIFCK
         LABEL 'IF CTRL CHK'
         SPECIAL ALLFFF,0,SPACE=0                                43068
         LABEL 'ERROR TRIGGER SUMMARY'
         SUM   BKMXPCCK
         SUM   BKMXNORP
         LABEL 'PSEUDO CTRL CHK','NO RESP'
         SUM   BKMXMINT
         SUM   BKMXILSQ
         LABEL 'MPLE IN TAG','ILL SEQ'
         SUM   BKMXSCCK
         SUM   BKMXIRCK
         LABEL 'SCD CHK','IRC CHK'
         SUM   BKMXWCCK
         SUM   BKMXTCCK
         LABEL 'WC CHK','TC CHK'
         SUM   BKMXBRCK
         SUM   BKMXLBCK
         LABEL 'BIRC CHK','LBP CHK'
         SUM   BKMXIOIV
         SUM   BKMXIOCK
         LABEL      'I/O INVD MK IN',' '
         SUM   BKMXIOPK
         SUM   BKMXSSPC
         LABEL 'I/O MK IN P CHK','SUB CHAN STAT P CHK'
         SUM   BKMXUPCK
         SUM   BKMXUCCK
         LABEL 'UCWAR P CHK','UCWAR CT CHK'
         SUM   BKMXIVUC
         SUM   BKMXSMPK
         LABEL 'INVD UCWAR','SCU MK P CHK'
         SUM   BKMXSAPK
         SUM   BKMXKPCK
         LABEL 'STOR ADR P CHK','KEY P CHK'
         SUM   BKMXIVAK
         SUM   BKMXSPIK
         LABEL 'INVD ADR CHK','STOR PROT INVD KEYS'
         SUM   BKMXPICK
         SUM   BKMXSQCK
         LABEL      'UA NO CMPR','SEQ CLK CHK'
         SUM   BKMXIVUA
         SUM   BKMXCXCK
         LABEL      'UNIT ADR CHK','I RSPNSE INVD UA'
         SUM   BKMXCBCK
         SUM   BKMXIACK
         LABEL 'CU BUSY CHK',' '
         SUM   BKMXLGDI
         SUM   BKMXTOCP
         LABEL      'LOG DISC IN',' '
         SUM   BKMXTOSI
         SUM   BKMXTOIO
         LABEL      'STOR INTF T/O','CHN T/O'
         SUM   BKMXUDCK
         SUM   BKMXWDCK
         LABEL      'STOR DATA CHK','WD PNTR CHK'
         SUM   BKMXMGCK
         SUM   BKMXSOPK
         LABEL 'MK GEN CHK','SIR OUT P CHK'
         SUM   BKMXSIPC
         SUM   BKMXSPCK
         LABEL      'LSD DATA CHK','SCU BO P CHK'
         SUM   BKMXBOPK
         SUM   BKMXBIPK
         LABEL 'BUS OUT P CHK','BUS IN P CHK'
         SUM   BKMXARCK
         SUM   BKMXALCK
         LABEL 'AR IN CHK','AL IN CHK'
         SUM   BKMXHSCK
         SUM   BKMXCYCK
         LABEL 'HS CHK','CARRY CHK'
         SUM   BKMXJLCK
         SUM   BKMXCARK
         LABEL 'J LTH CHK','CMND ADR REG CHK'
         SUM   BKMXCTCT
         SUM   BKMXDTAR
         LABEL      'CT REG CHK','DATA ADR REG CHK'
         SUM   BKMXBYT0
         SUM   BKMXBYT1
         LABEL 'BYTE 0','BYTE1'
         LABEL 'SCU STOR HANG','INSTR T/O'                     @YA02787
         LABEL 'BYTE 2','BYTE3'                                @YA02787
         SUM   BKMXBYT2
         SUM   BKMXBYT3
         LABEL      ' ',' '
         LABEL 'BLAME FIELD'
         SUM   BKMXBLPU
         SUM   BKMXINCA
         LABEL 'CPU','CH'
         SUM   BKMXBLSC
         SUM   BKMXBLSU
         LABEL 'SCU','SU'
         SUM   BKMXBLCU
         LABEL 'CU'
         SUM   BKMXDUM1                                        @YA02787
         SUM   BKMXTOCP                                        @YA02787
         SUM   BKMXBYT2                                        @YA02787
         SUM   BKMXBYT3                                        @YA02787
QUIT     DC    XL1'FF'
PEDIT    DS    0F
         USING *,R9
         DC    A(PENTRY)
         DC    C'IFCS2880'
YR9PTR   DC    F'0'
YLABELP  DC    F'0'
&CSECT   SETC  'PEDIT'
&DSECT   SETC  'D2880'
*
D2880    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YLOD,32),(YHID,32)
         DSGEN (YFFF01,16),(YCC01,16),(YFFF02,16),(YCC02,16)
         DSGEN (YFFF03,16),(YCC03,16),(YFFF04,16),(YCC04,16)
         DSGEN (YFFF05,16),(YCC05,16),(YFFF06,16),(YCC06,16)
         DSGEN (YFFF07,16),(YCC07,16),(YFFF08,16),(YCC08,16)
         DSGEN (YFFF09,16),(YCC09,16),(YFFF10,16),(YCC10,16)
         DSGEN (YSC01,16),(YSC02,16)
         DSGEN (YSC03,16),(YSC04,16)
         DSGEN (YSC05,16),(YSC06,16)
         DSGEN (YSC07,16),(YSC08,16)
         DSGEN (YSC09,16),(YSC10,16)
         DSGEN (YFFF11,16),(YNC11,8),(YCC11,8)
         DSGEN (YFFF12,16),(YNC12,8),(YCC12,8)
         DSGEN (YFFF13,16),(YNC13,8),(YCC13,8)
         DSGEN (YFFF14,16),(YNC14,8),(YCC14,8)
         DSGEN (YFFF15,16),(YNC15,8),(YCC15,8)
         DSGEN (YFFF16,16),(YNC16,8),(YCC16,8)
         DSGEN (YFFF17,16),(YNC17,8),(YCC17,8)
         DSGEN (YFFF18,16),(YNC18,8),(YCC18,8)
         DSGEN (YFFF19,16),(YNC19,8),(YCC19,8)
         DSGEN (YFFF20,16),(YNC20,8),(YCC20,8)
         DSGEN (YSC11,16),(YSC12,16)
         DSGEN (YSC13,16),(YSC14,16)
         DSGEN (YSC15,16),(YSC16,16)
         DSGEN (YSC17,16),(YSC18,16)
         DSGEN (YSC19,16),(YSC20,16)
         DSGEN (YCDC,16),(YCCC,16),(YIFC,16),(YPCCK,16)
         DSGEN (YNORP,16),(YMINT,16),(YILSQ,16),(YSCCK,16)
         DSGEN (YIRCK,16),(YWCCK,16),(YTCCK,16),(YBRCK,16)
         DSGEN (YLBCK,16),(YIOIV,16),(YIOIC,16),(YIOPK,16)
         DSGEN (YSSPC,16),(YUPCK,16),(YUCCK,16),(YIVUC,16)
         DSGEN (YSMPK,16),(YSAPK,16),(YKPCK,16),(YIVAK,16)
         DSGEN (YSPIK,16),(YPICK,16),(YSQCK,16),(YIVUA,16)
         DSGEN (YCXCK,16),(YCBCK,16),(YIACK,16),(YLGDI,16)
         DSGEN (YTOCP,16),(YTOSI,16),(YTOIO,16),(YUDCK,16)
         DSGEN (YWDCK,16),(YMGCK,16),(YSOPK,16),(YSIPK,16)
         DSGEN (YSPCK,16),(YBOPK,16),(YBIPK,16),(YARCK,16)
         DSGEN (YALCK,16),(YHSCK,16),(YCYCK,16),(YJLCK,16)
         DSGEN (YCARK,16),(YCTCT,16),(YDTAR,16),(YBYT0,16)
         DSGEN (YBYT1,16),(YBYT2,16),(YBYT3,16),(YBLPU,16)
         DSGEN (YINCA,16),(YBLSC,16),(YBLSU,16),(YBLCU,16)
         DSGEN (YRANCT01,16),(YRANCT02,16)                     @YA02787
         DSGEN (YRANCT03,16),(YRANCT04,16)                     @YA02787
IFCS2880 CSECT
         DS    0F
CONVERT  STM   R5,R8,XSAVE              SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
         CVD   R5,WORK                  CONVERT IT
         UNPK  L0(L4,R3),WORK+L4(L4)    UNPACK IT TO PRINT LINE
         MVZ   L3(L1,R3),L0(R3)         MOVE ON ZONE
RETURNA  LM    R5,R8,XSAVE              RESTORE
RETURNB  BR    R14                      RETURN
*
SKIPPER  BR    R14
*
CONVCC1  CLC   L0(L2,R4),HEXFFFF        IS COUNTER IN USE
         BE    RETURNB                  YES
         SR    R15,R15                  NO STOP PRINTING
         BR    R14
*
SETDATE  OI    L3(R4),HEX0F             PUT ON PROPER SIGN
         UNPK  WORK(L8),L0(L4,R4)       UNPACK DATE
         MVZ   WORK+L7(L1),WORK         SET ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DAY
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR
         BR    R14
*
*              FREE COUNTERS
*
FREECORE STM   R14,R12,L12(R13)         SAVE REGS
         LR    R12,R13                  SAVE SAVE PTR
         LA    R13,FSAVE                SET ADDRESS MYSAVE
         ST    R12,L4(R13)              CHAIN SAVE AREAS TOGETHER
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP NXT COUNTER PTR
         ST    R3,L28(R12)              PRESET REG IN CALLERS AREA
         LH    R0,SIZE                  PICK UP COUNTER LENGTH
         LR    R1,R2                    SET ADDRESS TO COUNTER
*
         FREEMAIN R,LV=(0),A=(1)        FREE COUNTER
*
         LTR   R3,R3                    TEST FOR LAST COUNTER IN
         BZ    RETURN0                  BR-LAST
         LA    R5,PENTRY+L10            RESET R9 &
         LA    R6,LABLAREA-L1           LABEL POINTER TO START
         ST    R5,YR9PTR
         ST    R6,YLABELP
RETURN0  L     R13,L4(R13)              RESET TO CALLERS REGS
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
WORK     DS    D
XSAVE    DS    4F
*
FSAVE    DS    18F
L28      EQU   28
HEXFFFF  DC    X'FFFF'
SIZE     DC    H'622'
HEX0F    EQU   X'0F'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABLAREA)
         DC    H'0'
*
         DC    X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
*
         LINE  ,(23,11)
         ROUTINE    YDUMA,SKIPPER
         LINE       (23,11),(1,30)
         ROUTINE    YLOD,SETDATE
         ROUTINE    YHID,SETDATE
*
         LINE       (56,20),(35,30),SKIP=2                       S21021
         HEX        YCPU,0,2B                                    P0417
         HEX        YSER,0,3B                                    S21021
         LINE
         HEX   YCHAN,0,1B
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (70,1)
         ROUTINE    YNOREC,CONVERT
*
         LINE       (16,24),(2,38)
         ROUTINE    YDUMA,SKIPPER
*
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,,SKIP=1
         HEX        YCC01
         ROUTINE    YSC01,CONVERT
         ROUTINE    YFFF01,CONVCC1
         LINE
         HEX        YCC02
         ROUTINE    YSC02,CONVERT
         ROUTINE    YFFF02,CONVCC1
         LINE
         HEX        YCC03
         ROUTINE    YSC03,CONVERT
         ROUTINE    YFFF03,CONVCC1
         LINE
         HEX        YCC04
         ROUTINE    YSC04,CONVERT
         ROUTINE    YFFF04,CONVCC1
         LINE
         HEX        YCC05
         ROUTINE    YSC05,CONVERT
         ROUTINE    YFFF05,CONVCC1
         LINE
         HEX        YCC06
         ROUTINE    YSC06,CONVERT
         ROUTINE    YFFF06,CONVCC1
         LINE
         HEX        YCC07
         ROUTINE    YSC07,CONVERT
         ROUTINE    YFFF07,CONVCC1
         LINE
         HEX        YCC08
         ROUTINE    YSC08,CONVERT
         ROUTINE    YFFF08,CONVCC1
         LINE
         HEX        YCC09
         ROUTINE    YSC09,CONVERT
         ROUTINE    YFFF09,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC10
         ROUTINE    YSC10,CONVERT
         ROUTINE    YFFF10,CONVCC1
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(11,1),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,,SKIP=1
         HEX        YCC11
         ROUTINE    YSC11,CONVERT
         ROUTINE    YFFF11,CONVCC1
         LINE
         HEX        YCC12
         ROUTINE    YSC12,CONVERT
         ROUTINE    YFFF12,CONVCC1
         LINE
         HEX        YCC13
         ROUTINE    YSC13,CONVERT
         ROUTINE    YFFF13,CONVCC1
         LINE
         HEX        YCC14
         ROUTINE    YSC14,CONVERT
         ROUTINE    YFFF14,CONVCC1
         LINE
         HEX        YCC15
         ROUTINE    YSC15,CONVERT
         ROUTINE    YFFF15,CONVCC1
         LINE
         HEX        YCC16
         ROUTINE    YSC16,CONVERT
         ROUTINE    YFFF16,CONVCC1
         LINE
         HEX        YCC17
         ROUTINE    YSC17,CONVERT
         ROUTINE    YFFF17,CONVCC1
         LINE
         HEX        YCC18
         ROUTINE    YSC18,CONVERT
         ROUTINE    YFFF18,CONVCC1
         LINE
         HEX        YCC19
         ROUTINE    YSC19,CONVERT
         ROUTINE    YFFF19,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC20
         ROUTINE    YSC20,CONVERT
         ROUTINE    YFFF20,CONVCC1
         LINE       ,(2,56),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (40,55),(3,55),SKIP=1
         ROUTINE    YCDC,CONVERT
         LINE
         ROUTINE    YCCC,CONVERT
         LINE       ,,SKIP=2
         ROUTINE    YIFC,CONVERT
*
*
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(3,55),SKIP=1
         ROUTINE    YPCCK,CONVERT
         ROUTINE    YNORP,CONVERT
         LINE
         ROUTINE    YMINT,CONVERT
         ROUTINE    YILSQ,CONVERT
         LINE
         ROUTINE    YSCCK,CONVERT
         ROUTINE    YIRCK,CONVERT
         LINE
         ROUTINE    YWCCK,CONVERT
         ROUTINE    YTCCK,CONVERT
         LINE
         ROUTINE    YBRCK,CONVERT
         ROUTINE    YLBCK,CONVERT
         LINE
         ROUTINE    YIOIV,CONVERT
         ROUTINE    YDUMA,SKIPPER
         LINE
         ROUTINE    YIOPK,CONVERT
         ROUTINE    YSSPC,CONVERT
         LINE
         ROUTINE    YUPCK,CONVERT
         ROUTINE    YUCCK,CONVERT
         LINE
         ROUTINE    YIVUC,CONVERT
         ROUTINE    YSMPK,CONVERT
         LINE
         ROUTINE    YSAPK,CONVERT
         ROUTINE    YKPCK,CONVERT
         LINE
         ROUTINE    YIVAK,CONVERT
         ROUTINE    YSPIK,CONVERT
         LINE
         ROUTINE    YPICK,CONVERT
         ROUTINE    YSQCK,CONVERT
         LINE
         ROUTINE    YIVUA,CONVERT
         ROUTINE    YCXCK,CONVERT
         LINE
         ROUTINE    YCBCK,CONVERT
         ROUTINE    YDUMA,SKIPPER
         LINE
         ROUTINE    YLGDI,CONVERT
         LINE       ,(3,55)
         ROUTINE    YTOSI,CONVERT
         ROUTINE    YTOIO,CONVERT
         LINE
         ROUTINE    YUDCK,CONVERT
         ROUTINE    YWDCK,CONVERT
         LINE
         ROUTINE    YMGCK,CONVERT
         ROUTINE    YSOPK,CONVERT
         LINE
         ROUTINE    YSIPK,CONVERT
         ROUTINE    YSPCK,CONVERT
         LINE
         ROUTINE    YBOPK,CONVERT
         ROUTINE    YBIPK,CONVERT
         LINE
         ROUTINE    YARCK,CONVERT
         ROUTINE    YALCK,CONVERT
         LINE
         ROUTINE    YHSCK,CONVERT
         ROUTINE    YCYCK,CONVERT
         ROUTINE    YDUMA,SKIPPER
         LINE
         ROUTINE    YJLCK,CONVERT
         ROUTINE    YCARK,CONVERT
         LINE
         ROUTINE    YCTCT,CONVERT
         ROUTINE    YDTAR,CONVERT
         LINE
         ROUTINE    YBYT0,CONVERT
         ROUTINE    YBYT1,CONVERT
         LINE  ,,SKIP=1                                        @YA02787
         ROUTINE  YRANCT01,CONVERT                             @YA02787
         ROUTINE  YRANCT02,CONVERT                             @YA02787
         LINE  ,,SKIP=1                                        @YA02787
         ROUTINE  YRANCT03,CONVERT                             @YA02787
         ROUTINE  YRANCT04,CONVERT                             @YA02787
         LINE       ,,SKIP=3
         ROUTINE    YDUMA,SKIPPER
         ROUTINE    YDUMA,SKIPPER
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,(3,55),SKIP=1
         ROUTINE    YBLPU,CONVERT
         ROUTINE    YINCA,CONVERT
         LINE
         ROUTINE    YBLSC,CONVERT
         ROUTINE    YBLSU,CONVERT
         LINE       ,,SKIP=2
         ROUTINE    YBLCU,CONVERT
         LINE
         ROUTINE    YDUMA,FREECORE
         LABEL ' '
         DC    X'FF0000000000'
         DC    C'$'
LABLAREA EQU   *
         LSTART
         END
