         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCSXXXX'
&DSECT   SETC  'XTCAM'
          TITLE 'IFCSXXXX- LINKNAME - IFCSXXXX'
IFCSXXXX CSECT
         USING *,R9
*
*              TCAM  SUMMARY MODULE
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         DC    A(SUMSTART)
         DC    A(PENTRY)
R8PTR    DS    F
SCSIZE   DC    H'70'           NO. OF COUNTERS                 @ZA00433
HEX00    DC    XL4'00'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L17      EQU   17                                                P4954
HEX01    EQU   X'01'
HEX02    EQU   X'02'
HEX06    EQU   X'06'
HEX08    EQU   X'08'
HEX10    EQU   X'10'
HEX20    EQU   X'20'
HEX23    EQU   X'23'
HEX25    EQU   X'25'
HEX29    EQU   X'29'
HEX32    EQU   X'32'
HEX60    EQU   X'60'
HEX70    EQU   X'70'
HEX80    EQU   X'80'
HEXE0    EQU   X'E0'
*
*
*        DSGEN  FOR SUMMARY COUNTER AREA
YTCAM    DSECT
         DSGEN (TBLPTR,32),(FWDPTR,32)             HEADER PORTION
         DSGEN (TOTAL,16),(DUM1,16)                 TACKED ON BY EP009
         DSGEN (YCUA,24),(SRIAL,24),(CPUNO,16)      32 BYTES
         DS    CL2
         DSGEN (TERMINAL,64)
*
         DSGEN (LODATE,32),(HIDATE,32)            COMMON SECT
         DSGEN (DEVTYPE,16),(DUM3,16)             L COUNTERS
*
         DSGEN (UNRCSIO,32),(DUMMY1,16),(UNRCTE,16)            @YA02789
         DSGEN (UNRCPE,16),(UNRCLD,16)                         @YA02789
         DSGEN (UNRCCRI,16),(UNRCCRO,16),(UNRCUE,16),(UNRCTOP,16)  REC-
         DSGEN (UNRCTOR,16),(UNRCTOD,16),(UNRCTOO,16),(UNRCI,16)   VOR-
         DSGEN (UNRCOVR,16),(UNRCBOW,16),(UNRCBOD,16),(UNRCBOO,16) ABLE
         DSGEN (UNRCDW,16),(UNRCDR,16),(UNRCDO,16),(UNRCEC,16)   40BYTE
*
         DSGEN (INTVSIO,32),(DUMMY2,16),(INTVTE,16)            @YA02789
         DSGEN (INTVPE,16),(INTVLD,16)                         @YA02789
         DSGEN (INTVCRI,16),(INTVCRO,16),(INTVUE,16),(INTVTOP,16) IFIED
         DSGEN (INTVTOR,16),(INTVTOD,16),(INTVTOO,16),(INTVI,16) SELTIO
         DSGEN (INTVOVR,16),(INTVBOW,16),(INTVBOD,16),(INTVBOO,16)
         DSGEN (INTVDW,16),(INTVDR,16),(INTVDO,16),(INTVEC,16)   40BYTE
         DSGEN (GRTE,16),(GRTIO,16),(GRRP,16),(GRTRP,16) GRAPIC ERR
*
*
*              DSGEN FOR RECORD
*
XTCAM    DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,16)
         DSGEN (SPARE1,32)                                       S21926
         DSGEN (DAY,32),(TIME,32)
         DSGEN (SPARE2,8),(CPUSERL,24),(CPUID,16),(SPARE3,16)
         DSGEN (JOBID1,32)
         DSGEN (JOBID2,32)                                       S21926
         DSGEN (FCCWCC,8),(FCCWA,24),(FCCWFL,8),(FCCW,8),(FCCWCT,16)
         DSGEN (CSWK,8),(CSWCA,24)
         DSGEN (CSWUS1,1),(CSWUS2,1),(CSWUS3,1),(CSWUS4,1),            X
               (CSWUS5,1),(CSWUS6,1),(CSWUS7,1),(CSWUS8,1),            X
               (CSWCS1,1),(CSWCS2,1),(CSWCS3,1),(CSWCS4,1),            X
               (CSWCS5,1),(CSWCS6,1),(CSWCS7,1),(CSWCS8,1),(CSWCT,16)
         DSGEN (DEVDPD,8),(SECCUA,24)                            S21926
         DSGEN (DEVTYP1,8),(DEVTYP1A,8),(DEVTYP2,16)             S21926
         DSGEN (SPARE4,8),(CUA,24)                               S21926
         DSGEN (IORET,24),(SBCNT,8)                              S21926
         DSGEN (SIOCNT,16),(TEMPER,8),(MASK,8),(OP1,8),(OP2,8),        X
               (TCAMFL,8),(LDGRAPH,8)
         DSGEN (TERMNM,64)
         DSGEN (SNB11,1),(SNB12,1),(SNB13,1),(SNB14,1),                C
               (SNB15,1),(SNB16,1),(SNB17,1),(SNB18,1),                *
               (SNB01,1),(SNB02,1),(SNB03,1),(SNB04,1),                *
               (SNB05,1),(SNB06,1),(SNB07,1),(SNB08,1),(SPARE5,16)
*
*
IFCSXXXX CSECT
         USING XTCAM,R2
*
SETDATE  CLC   DAY(L4),HEX00            IS DATE ZERO
         BE    NODATE                   BR-YES
         CLC   L0(L4,R3),HEX00          IS THIS FIRST TIME
         BNE   TESTDTE                  BR-NO
         MVC   L0(L4,R3),DAY            MOVE IN DAY
SAVEHI   MVC   L4(L4,R3),DAY            TO BOTH HI & LOW CNTRS
         BE    NODATE                   EXIT
TESTDTE  CLC   L0(L4,R3),DAY            TEST FOR LOW
         BNH   TESTHI                   BR-SAVED DATE LOW
         MVC   L0(L4,R3),DAY            NEW DATE LOW
TESTHI   CLC   L4(L4,R3),DAY            TEST FOR HI
         BL    SAVEHI              BR-SAVED DATE LOW
NODATE   BR    R14                      RETURN
*
*
*
SETDEV   MVC   L0(L2,R3),DEVTYP2        SAVE DEVTYPE
         BR    R14                      RETURN
*
*
TESTMODE STM   R5,R8,SAVEREG            SAVE REGS
         TM    CLASRC,HEX32            IS THIS A CONVERTED RECORDS21926
         BO    TESTCONV                YES                       S21926
         B     NEWREC                  NO                        S21926
TESTCONV TM    SBCNT,HEX02             HAS THIS RECORD BEEN CONDENSED
         BO    NEWREC                  YES                       S21926
         MVC   SNB11(L2),SNB11+L17      MOVE SENSE OVER SDR      P4954
NEWREC   TM    TCAMFL,HEX80            TEST FOR INTENSIFIED      S21926
         BZ    RETURN                   BR-NO
         LA    R5,INTVMODE-L6           YES SET PTR TO
         ST    R5,R8PTR                 INTENSIFIED SECTION
RETURN   LM    R5,R8,SAVEREG        RESTORE REGS
         BR    R14
*
*
ADDSIO   STM   R5,R8,SAVEREG       SAVE REGS
         MVC   TEMPWORK+L2(L2),SIOCNT   GET SIO COUNT          @YA02789
         L     R5,TEMPWORK                                     @YA02789
         MVC   TEMPWORK(L4),L0(R3)      GET VALUE TO BEADDED   @YA02789
         A     R5,TEMPWORK              ADD                    @YA02789
         ST    R5,TEMPWORK              SAVE IT                @YA02789
         MVC   L0(L4,R3),TEMPWORK       SAVE IT                @YA02789
         XC    TEMPWORK(L4),TEMPWORK    CLEAR WORK AREA        @YA02789
         B     RETURN
*
ADDTE    STM   R5,R8,SAVEREG
         SR    R5,R5                    PICK UP TEMP
         IC    R5,TEMPER                 ERR COUNT
         AH    R5,L0(R3)                ADD SUM TO IT
         STH   R5,L0(R3)                SAVE IT
         TM    TCAMFL,HEX60             TEST FOR EOD & OVERFLOW
         BM    RECDONE                  BR YES
         LH    R5,L2(R3)                YES ADD 1 TO PER
         LA    R5,L1(R5)                COUNTER &
         STH   R5,L2(R3)                SAVE IT
         CLI   LDGRAPH,L0          IS IT A LEADING GRAPHIC ERR
         BZ    RETURN              BR-NO
         TM    TCAMFL,HEX80        IS MODE INTENSIVE
         BZ    RETURN                   BR-NO
         LA    R5,GRAPMODE-L6      SET PTR TO DO GRAPHIC SUMM
STOREPTR ST    R5,R8PTR            SAVE PTR FOR SUM MODULE
         B     RETURN
RECDONE  LA    R5,UNRECEND-L6      SET PTR TO X'FF' TO SIGNAL END
         B     STOREPTR
*
ADDCR    STM   R5,R8,SAVEREG
         TM    TCAMFL,HEX10        TEST FOR INTIAL SELECT
         BZ    ADDCRO              BR-NO
         LA    R5,L0               SET PTR TO FIRSTCOUNTER
         B     TESTSNB
ADDCRO   LA    R5,L2               SET PTR TO 2ND CNTR
TESTSNB  AR    R5,R3
         TM    SNB11,HEX80         IS CMND REJ BIT ON
         BZ    RETURN              BR-NO
         LH    R6,L0(R5)           YES ADD
         LA    R6,L1(R6)                  ONE TO
         STH   R6,L0(R5)                        COUNTER
         B     RETURN
*
ADDTO    STM   R5,R8,SAVEREG
         SR    R5,R5
         TM    SNB18,HEX01              IS TIME OUT ON
         BZ    RETURN                   BR-NO
         CLI   FCCWCC,HEX06             IS IT PREP
         BE    ADD1                     BR-YES  ADD TO 1ST CNTR
         CLI   FCCWCC,HEX02             IS IT READ
         BE    ADD2                BR-YES  ADD TO 2ND
         CLI   FCCWCC,HEX29             IS IT DIAL
         BE    ADD3                     BR-YES ADD TO 3RD
ADD4     LA    R5,L2(R5)                ADD TO 4TH
ADD3     LA    R5,L2(R5)                ADD TO 3RD
ADD2     LA    R5,L2(R5)                ADD TO 2ND
ADD1     AR    R5,R3                    ADD TO 1ST
         LH    R6,L0(R5)                ADD
         LA    R6,L1(R6)               ONE TO INDICATED
         STH   R6,L0(R5)                               COUNTER
         B     RETURN
ADDBO    STM   R5,R8,SAVEREG
         SR    R5,R5
         TM    SNB13,HEX20              IS THERE A BUS OUT CR
         BZ    RETURN                   BR-NO
         CLI   FCCWCC,HEX01             IS IT WRIT
         BE    ADD1                     BR-YES
         CLI   FCCWCC,HEX29             IS IT DIAL
         BE    ADD2                BR-YES
         B     ADD3                ADD TO OTHER
*
ADDOC    STM   R5,R8,SAVEREG
         SR    R5,R5
         TM    SNB15,HEX08         IS THERE P DATA CK
         BZ    RETURN              BR-NO
         CLI   FCCWCC,HEX01             IS IT WRIT
         BE    ADD1                BR-YES
         CLI   FCCWCC,HEX02             IS IT READ
         BE    ADD2                BR-YES
         B     ADD3                BR-OTHR
*
ADDGR    STM   R5,R8,SAVEREG
         SR    R5,R5
         CLI   LDGRAPH,HEX23       TEST GRAPHIC CHAR FOR TERM ELEC
         BE    ADD1
         CLI   LDGRAPH,HEX25                              TERM I/O
         BE    ADD2
         CLI   LDGRAPH,HEX29                              REC PARITY
         BE    ADD3
         B     ADD4                                       TRAN PARITY
*
*
*
*
SUMSTART DS    0F
         SPECIAL    SETDATE,0,SPACE=4
         SPECIAL    SETDEV,0,SPACE=1
         SPECIAL    TESTMODE,0,SPACE=1
*
UNRECSCT EQU   *
         SPECIAL   ADDSIO,0,SPACE=3                            @YA02789
         SPECIAL    ADDTE,0,SPACE=2               ADD TEMP/PERM ERRORS
         SUM        SNB17                         ADD LOST DATA BOTH
         SPECIAL    ADDCR,0,SPACE=2               ADD CMND REJ SEL 0/1
         SUM        CSWUS8
         SPECIAL    ADDTO,0,SPACE=4               ADD TIME OUT 4 CNTRS
         SUM        SNB12                         ADD INTV REQ  BOTH
         SUM        SNB16                         ADD TO OVERUN BOTH
         SPECIAL    ADDBO,0,SPACE=3               ADD TO BUS OUT BOTH
         SPECIAL    ADDOC,0,SPACE=3               ADD TO DATA CHK BOTH
         SUM        SNB14
UNRECEND DC         X'FF'                         END OF SUM SECTION
*
*
         DS    0H
INTVMODE EQU   *                        INTENSIVE MODE  SECTION
         SPECIAL   ADDSIO,0,SPACE=3                            @YA02789
         SPECIAL    ADDTE,0,SPACE=2
         SUM   SNB17
         SPECIAL    ADDCR,0,SPACE=2
         SUM        CSWUS8
         SPECIAL    ADDTO,0,SPACE=4
         SUM        SNB12
         SUM        SNB16
         SPECIAL    ADDBO,0,SPACE=3
         SPECIAL    ADDOC,0,SPACE=3
         SUM        SNB14
         DC         X'FF'
*
*
         DS    0H
GRAPMODE EQU   *
GRAPMODE SPECIAL    ADDGR,0,SPACE=4
         DC         X'FF'
*
*
         DROP  R2
*
*              EDIT PRINT SECTION
*
&CSECT   SETC  'PENTRY'
&DSECT   SETC  'YTCAM'
*
PENTRY   DS    0F
         DC    A(PENTRIES)
         DC    CL8'IFCSXXXX'
R9PTR    DS    2F
*
*              SPECIAL ROUTINES
*
         USING PENTRY,R9
         USING YTCAM,R2
*
CONVTOT  STM   R5,R8,SAVEREG            CONVERT TOTALS FOUND BY
         LH    R5,TOTREC                FINDTOTS ROUTINE
         B     CONVT
CONVSIO  STM   R5,R8,SAVEREG
         L     R5,TOTSIO                GET TOTAL              @YA02789
         B     CONVTSIO                                        @YA02789
CONVTE   STM   R5,R8,SAVEREG
         LH    R5,TOTTE
         B     CONVT
CONVUNR  STM   R5,R8,SAVEREG
         LH    R5,TOTUNR
         B     CONVT
CONVIM   STM   R5,R8,SAVEREG
         LH    R5,TOTIM
         B     CONVT
*
CONVERT1 STM   R5,R8,SAVEREG            SAVE REGISTERS         @YA02789
         MVC   TEMPWORK(L4),L0(R4)                             @YA02789
         L     R5,TEMPWORK                                     @YA02789
         XC    TEMPWORK(L4),TEMPWORK                           @YA02789
         LTR   R5,R5                                           @YA02789
         BZ    RETURNA                                         @YA02789
CONVTSIO CVD   R5,WORK                                         @YA02789
         LR    R6,R3                                           @YA02789
         BCTR  R6,0                                            @YA02789
         UNPK  L0(L6,R6),WORK+L4(L4)                           @YA02789
         MVC   L5(L1,R6),L0(R6)         PUT IN ZONE            @YA02789
         B     RETURNA                                         @YA02789
*
CONVERT  STM   R5,R8,SAVEREG
         LH    R5,L0(R4)           PICK UP CNTR
         LTR   R5,R5               IS IT ZERO
         BZ    RETURNA             BR-YES
CONVT    CVD   R5,WORK
         UNPK  L0(L5,R3),WORK+L4(L4)    PAK IT INTO BUFFER     @YA02789
         MVZ   L4(L1,R3),L0(R3)         PUT IN ZONE            @YA02789
RETURNA  LM    R5,R8,SAVEREG
SKIPPER  BR    R14
*
*
FINDTOTS STM   R2,R8,SAVEREG
         SR    R3,R3               CLEAR WORK REGS
         SR    R4,R4
         SR    R5,R5
         SR    R6,R6
         SR    R7,R7
         LR    R8,R2
         ST    R8,SAVE8
FNDTOTSA AH    R3,TOTAL            ADD TOTAL RCDS
         MVC   TEMPWORK(L4),UNRCSIO                            @YA02789
         A     R4,TEMPWORK                                     @YA02789
         MVC   TEMPWORK(L4),INTVSIO                            @YA02789
         A     R4,TEMPWORK                                     @YA02789
         XC    TEMPWORK(L4),TEMPWORK                           @YA02789
         AH    R5,UNRCTE               TEMP ERRORS
         AH    R5,INTVTE
         AH    R6,UNRCPE               PERM ERRORS
         AH    R7,INTVPE
         CLC   LODATE(L4),L30(R8)       CHECK DATE RANGE
         BNL   FNDTOTSB                 BNOT LOW
         MVC   L30(L4,R8),LODATE        MOVE IN LOW DATE
FNDTOTSB CLC   HIDATE(L4),L34(R8)       TEST HI
         BNH   FNDTOTSC                 BR-NOT HI
         MVC   L34(L4,R8),HIDATE        MOVE IN HI DATE
FNDTOTSC L     R2,FWDPTR                PICK UP CHAIN
         LTR   R2,R2                    IS IT ZERO
         BNZ   FNDTOTSA                 BR-NO MORE AREAS
         STH   R3,TOTREC
         ST    R4,TOTSIO                                       @YA02789
         STH   R5,TOTTE                 HALF WDS IN CORE
         STH   R6,TOTUNR
         STH   R7,TOTIM
         LM    R2,R8,SAVEREG
         BR    R14
*
SETCPUNO STM   R5,R8,SAVEREG            SAVE REGS
         SR    R5,R5                    CLEAR R5
         IC    R5,0(R4)                 PICK UP CPU TYPE
         SLL   R5,R8
         IC    R5,L1(R4)
         LTR   R5,R5                    IS IT ZERO
         BNZ   RETURNA                  NO
         LA    R6,L64                   CORREST DATA POINTER
         SR    R3,R6
         MVC   L0(L6,R3),SHARED         MOVE IN SHARED         @Z427VLS
         B     RETURNA
*
SHARED   DC    C'SHARED'                                       @Z427VLS
*
SETDATE2 UNPK  WORK(L8),L0(L4,R4)
         MVZ   WORK+L7(L1),WORK
         MVC   L0(L3,R3),WORK+L5        MOVE IN DAYS
         MVC   L5(L2,R3),WORK+L3        MOVE IN YEAR
         BR    R14
SETDEV2  CLI   L0(R4),HEX40
         BNE   NEXTCHK                                         @XA20610
         TM    L1(R4),HEX05
         BO    SET3705
         TM    L1(R4),HEX03
         BO    SET2703
         TM    L1(R4),HEX02
         BO    SET2701
         TM    L1(R4),HEX01             IS IT A 7770
         BO    SET2702                  BRANCH--NO
SET7770  MVC   L0(L4,R3),C7770          LABEL 7770
         BR    R14                      RETURN
SET2702  MVC   L0(L4,R3),C2702
         BR    R14
NEXTCHK  TM    L1(R4),HEX0B                                    @XA20610
         BO    SET3286                                         @XA20610
SET2848  CLC   L0(L2,R4),T3270L                                @YA02789
         BE    SET3270L                                        @YA02789
         MVC   L0(L4,R3),C2848                                 @YA02789
         BR    R14                                             @YA02789
SET3270L MVC   L0(L4,R3),C3270L                                @YA02789
         BR    R14                                             @YA02789
SET3286  MVC   L0(L4,R3),C3286                                 @XA20610
         BR    R14
SET2701  MVC   L0(L4,R3),C2701
         BR    R14
SET2703  MVC   L0(L4,R3),C2703
         BR    R14
SET3705  MVC   L0(L4,R3),C3705
         BR    R14
*
*
SETTERM  STM   R5,R8,SAVEREG
         LR    R5,R3               SET R5
         SH    R5,H10              DEC BACK 10 BYTES
         MVC   L0(L8,R5),L0(R4)    MOVE IN TERMINAL NAME
         B     RETURNA
*
CHKMORE1 STM   R5,R8,SAVEREG       SAVE REGS
         LA    R5,ADDTERM-L4       SET UP TO
         LA    R6,ADDLABEL         LOOP THROUGH TBL AGAIN
CHKMORE  L     R2,FWDPTR           IF ANY CNTRS FOR ANOTHER TERMINAL
         LTR   R2,R2               EXISTS
         BZ    NOMORE              IF NOT END PGM
         STM   R5,R6,R9PTR
         B     RETURNA
CHKMORE2 STM   R5,R8,SAVEREG       SAME AS CHKMORE1
         LA    R5,ADDGRAP-L4       BUT DOING GRAPHIC SECTION
         LA    R6,ADDGRPHL
         B     CHKMORE
NOMORE   L     R2,SAVE8
         B     RETURNA
*
*
*
FREEALL  STM   R14,R12,L12(R13)         SAVE ALL REGS
         LR    R12,R13
         LA    R13,SAVEREG
         ST    R12,L4(R13)
         ST    R13,L8(R12)
FREEALLA L     R3,FWDPTR
         LH    R0,SIZE
         LR    R1,R2
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3
         BZ    RETURN0
         LR    R2,R3
         B     FREEALLA
RETURN0  ST    R3,L28(R12)
         LR    R13,R12
         LM    R14,R12,L12(R13)
         BR    R14
SAVEREG  DS    18F
*
SAVE8    DS    F
TEMPWORK DC    F'0'                                            @YA02789
WORK     DS    D
TOTREC   DS    H
TOTSIO   DC    F'0'                                            @YA02789
TOTTE    DS    H
TOTUNR   DS    H
TOTIM    DS    H
SIZE     DC    H'138'                                          @YA02789
H10      DC    H'10'
L30      EQU   30
L34      EQU   34
L28      EQU   28
HEX40    EQU   X'40'
HEX03    EQU   X'03'
HEX05    EQU   X'05'
HEX0B    EQU   X'0B'                                           @XA20610
L12      EQU   12
LBLPTR   EQU   TBLPTR
C2701    DC    C'2701'
C2702    DC    C'2702'
C2703    DC    C'2703'
C2848    DC    C'2848'
C7770    DC    C'7770'
C3705    DC    C'3705'
C3270L   DC    C'3270'                                         @YA02789
T3270L   DC    X'1009'                                         @YA02789
C3286    DC    C'3286'                                         @XA20610
L32      EQU   32
L64      EQU   64
PENTRIES DS    0F
         DC    XL4'00'
         DC    XL4'00'
         DC    A(LABELS)
         DC    H'0'
*
         DC    X'01'
         DC    X'000B8B00'              SKIP TP  CHANNEL 1
         LABEL ''
*
         LINE  (57,32),(23,26),SKIP=1
         HEX   CPUNO,0,2B
         HEX   SRIAL,0,3B
         ROUTINE   CPUNO,SETCPUNO
         ROUTINE   TBLPTR,FINDTOTS
         LABEL 'DAY YEAR   DAY YEAR','MODEL-','SERIAL NO.'
*
         LINE       (23,11),(1,30),SKIP=2
         ROUTINE    LODATE,SETDATE2
         ROUTINE    HIDATE,SETDATE2
         LABEL      'OUTBOARD DATE RANGE -','TO'
*
         LINE       (52,22),(1,61)
         HEX        YCUA,0,3B
         ROUTINE    DEVTYPE,SETDEV2
         LABEL      'SUMMARY OF TCAM I/O OUTBOARD RECORDS FOR CUA/LINE'X
               ,'DEVICE TYPE'
*
         LINE       (26,1),,SKIP=3
         ROUTINE    TBLPTR,CONVTOT
         LABEL      'TOTAL NUMBER OF RECORDS'
*
         LINE       (40,67),(5,55),SKIP=1
         ROUTINE    TBLPTR,CONVSIO
         ROUTINE    TBLPTR,CONVUNR
         LABEL      'TOTAL NUMBER OF SIO','TOTAL NUMBER OF UNRECOVERABL*
               E (UNREC) ERRORS'
*
         LINE       ,,SKIP=3
         ROUTINE    TBLPTR,CONVTE
         ROUTINE    TBLPTR,CONVIM
         LABEL      'TOTAL NUMBER OF TEMPORARY FAILURES',              *
               'TOTAL NUMBER OF INTENSIVE (INTEN) ERRORS'
*
         LINE       ,(5,1),SKIP=1
         ROUTINE    TBLPTR,SKIPPER
         LABEL      'ERROR TYPES .TOTL.TOTL.TOTL.LOST.COMD.COMD.UNIT.TI*
               ME.TIME.TIME.TIME.INTR.OVER.BUSO.BUSO.BUSO.DATA.DATA.DAT*
               A.EQPT.'
         LINE       ,(17,1)
         ROUTINE    TBLPTR,SKIPPER
         LABEL      '.SIOS.TEMP.PERM.DATA.REJ .REJ .XCPT.OUT .OUT .OUT *
               .OUT .REQ .RUN .CHK .CHK .CHK .CHK .CHK .CHK .CHK .'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         LABEL      '.    .ERR .ERR .ALL .INIT.OTHR.ALL .PRE .READ.DIAL*
               .OTHR.ALL .ALL .WRIT.DIAL.OTHR.WRIT.READ.OTHR.ALL .'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         LABEL      '.    .    .    .    .SEL .    .    .PARE.NTXT.    *
               .    .    .    .    .    .    .    .    .    .    .'
         LINE       ,(2,5)
         ROUTINE    TBLPTR,SKIPPER
         LABEL      'TERMI','NAL R','ECORD','.','.','.','.','.','.',   C
               '.','.','.','.','.','.','.','.','.','.','.','.','.',    C
               '.','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         LABEL      'NAME','','MODE','.','.','.','.','.','.',          C
               '.','.','.','.','.','.','.','.','.','.','.','.','.',    C
               '.','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
ADDLABEL LABEL      '','','','.','.','.','.','.','.','.','.',          C
               '.','.','.','.','.','.','.','.','.','.','.','.','.'
*
ADDTERM  LINE  (12,5)                                          @YA02789
         ROUTINE    TERMINAL,SETTERM
         ROUTINE   UNRCSIO,CONVERT1                            @YA02789
         ROUTINE    UNRCTE,CONVERT
         ROUTINE    UNRCPE,CONVERT
         ROUTINE    UNRCLD,CONVERT
         ROUTINE    UNRCCRI,CONVERT
         ROUTINE    UNRCCRO,CONVERT
         ROUTINE    UNRCUE,CONVERT
         ROUTINE    UNRCTOP,CONVERT
         ROUTINE    UNRCTOR,CONVERT
         ROUTINE    UNRCTOD,CONVERT
         ROUTINE    UNRCTOO,CONVERT
         ROUTINE    UNRCI,CONVERT
         ROUTINE    UNRCOVR,CONVERT
         ROUTINE    UNRCBOW,CONVERT
         ROUTINE    UNRCBOD,CONVERT
         ROUTINE    UNRCBOO,CONVERT
         ROUTINE    UNRCDW,CONVERT
         ROUTINE    UNRCDR,CONVERT
         ROUTINE    UNRCDO,CONVERT
         ROUTINE    UNRCEC,CONVERT
         LABEL     '','','UNREC','','.','.','.','.','.','.','.',       C
               '.','.','.','.','.','.','.','.','.','.','.','.','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         ROUTINE   INTVSIO,CONVERT1                            @YA02789
         ROUTINE    INTVTE,CONVERT
         ROUTINE    INTVPE,CONVERT
         ROUTINE    INTVLD,CONVERT
         ROUTINE    INTVCRI,CONVERT
         ROUTINE    INTVCRO,CONVERT
         ROUTINE    INTVUE,CONVERT
         ROUTINE    INTVTOP,CONVERT
         ROUTINE    INTVTOR,CONVERT
         ROUTINE    INTVTOD,CONVERT
         ROUTINE    INTVTOO,CONVERT
         ROUTINE    INTVI,CONVERT
         ROUTINE    INTVOVR,CONVERT
         ROUTINE    INTVBOW,CONVERT
         ROUTINE    INTVBOD,CONVERT
         ROUTINE    INTVBOO,CONVERT
         ROUTINE    INTVDW,CONVERT
         ROUTINE    INTVDR,CONVERT
         ROUTINE    INTVDO,CONVERT
         ROUTINE    INTVEC,CONVERT
         LABEL      '','','INTEN','','.','.','.','.','.','.','.',      C
               '.','.','.','.','.','.','.','.','.','.','.','.','.'
         LINE
         ROUTINE    TBLPTR,CHKMORE1
         LABEL      ''
*
         LINE       ,(1,1),SKIP=2
         ROUTINE    TBLPTR,SKIPPER
         LABEL      'GRAPHIC ERROR SECTION'
*
         LINE       ,(2,5),SKIP=1
         ROUTINE    TBLPTR,SKIPPER
         LABEL      '  274','0-II ','','','.TERM','.TERM','.REC','.TRNS*
               ','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         LABEL      'GRAPH','IC RE','SP','','.ELEC','.I/O','.PRTY','.PR*
               TY','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
         LABEL      '','','','','.ERR','.ERR','.ERR','.ERR','.'
         LINE
         ROUTINE    TBLPTR,SKIPPER
ADDGRPHL LABEL      '','','','','.','.','.','.','.'
*
ADDGRAP  LINE       (13,5)
         ROUTINE    TERMINAL,SETTERM
         ROUTINE    TBLPTR,SKIPPER
         ROUTINE    GRTE,CONVERT
         ROUTINE    GRTIO,CONVERT
         ROUTINE    GRRP,CONVERT
         ROUTINE    GRTRP,CONVERT
         LABEL      '','','','','.','.','.','.','.'
*
         LINE
         ROUTINE    TBLPTR,CHKMORE2
         LABEL      ''
         LINE
         ROUTINE    TBLPTR,FREEALL
         LABEL      ''
         DC    X'FF'
         DC    XL6'00'
*
LABELS   EQU   *
         LSTART
         END
