         TITLE 'I F C S X X X F --- ARGONAUT SUMMARY SUPPORT'
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
&TEMP    SETA  &ISHIFT
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         MACRO
         CONVT ,
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  100000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB   &SW(4000)
         LCLC  &C1,&C2
         ACTR   200000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
           MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
&LASTCC  SETA  184
&TEST    SETB  1
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(3000),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(3000),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(3000)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(3000)
         GBLC  &LABELS(3000),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(3000),&SHIFT(3000)
         GBLC  &ITEM(3000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&IBITS EQ 1).FORM1      TEST FOR OLD FORM
         AIF   ('&MASK' NE '').FORM1    TEST FOR MASK
         AIF   (&IBITS+&ISHIFT GT 8).MSG     TEST FOR MORE THAN EIGHT
         DC    AL.1(0),AL.3(&ISHIFT),AL.4(&IBITS)
         DC    AL1(0)
         AGO   .ITEM
.MSG     MNOTE '**BITS GREATER THAN 8**'
         MEXIT
.FORM1   ANOP
         DC    AL1(0)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
** THIS MODULE SUPPORTS ARGONAUT DEVICE ---
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCSXXXF'          ALIAS IFCST00C
&DSECT   SETC  'RECORD'
IFCSXXXF CSECT
RECORD   DSECT
         DS    0F                  HEADING DSECT FOR OBR & MDR
         DSGEN (CLASRC,8),              RECORD TYPE                    X
               (SYSREL,8),              SYSTEM & RELEASE LEVEL         X
               (SWITCH,8,0,3),          SWITCHES (4, OF THEM)          X
               (RCDCNT,8),              COUNT & MULTI PART ID          X
               (SPACE1,8),              SPACE (1,BYTE)                 X
               (DATE,32),               DATE                           X
               (TIME,32),               TIME                           X
               (VERNO,8),               MACHINE VERSION                X
               (CPUSER,24),             C P U SERIAL NO.               X
               (CPUID,16),              C P U I.D.                     X
               (MCEL,16)                MAX LGTH OF MACH DEP LOG
*                            --------------------------
*                                  OBR (UNIT CHECK) DSECT
*                            --------------------------
         DSGEN (JOBID,64),              JOB NAME                       X
               (FAILCCW,64),            FAILING CCW                    X
               (CSW,64),                CSW CONTENTS                   X
               (DEVDEPC,8),             DEV DEPNOT DATA COUNT          X
               (SECUA,24),              SECONDARY CHAN & UNIT ADDR     X
               (DEVTYPE,32),            DEVICE TYPE BYTES              X
               (SDRCNT,8),              # OF SDR BYTES IN RCD          X
               (PCUP,24),               PRIMARY CHAN & UNIT ADDR       X
               (IORETRY,16),            # OF I/O RETRY ATTEMPTS        X
               (SENSCNT,16),            # OF SENSE BYTES IN RCD        X
               (SDR,4,0,1,0,9),         SDR WORK AREA                  X
               (SNS,1,0,23,0,7)         SENSE BYTES
*                                  MDR DSECT
         ORG   JOBID
         DSGEN (DEVCUA,16),             DEV CHAN & UNIT ADDR           X
               (SPARE,16),              SPACE (2 BYTES)                X
               (SENSE01,64),            SENSE INFO  1                  X
               (SENSE02,64),            SENSE INFO  2                  X
               (SENSE03,64),            SENSE INFO  3                  X
               (SENSE04,64),            SENSE INFO  4                  X
               (SENSE05,64),            SENSE INFO  5                  X
               (SENSE06,64),            SENSE INFO  6                  X
               (SENSE07,64),            SENSE INFO  7                  X
               (SENSE08,64),            SENSE INFO  8                  X
               (SENSE09,64),            SENSE INFO  9                  X
               (SENSE10,64),            SENSE INFO 10                  X
               (SENSE11,64),            SENSE INFO 11                  X
               (SENSE12,64),            SENSE INFO 12                  X
               (SENSE13,64),            SENSE INFO 13                  X
               (SENSE14,64),            SENSE BYTE 14                  X
               (SENSE15,64),            SENSE BYTE 15                  X
               (SENSE16,64),            SENSE BYTE 16                  X
               (BTSSHTS,16),            BTSS SHEETS                    X
               (CFSFOLDS,16),           CFS FOLDS                      X
               (PAPERPRS,16),           PAPER PROCESD                  X
               (SERIALNO,16)            SERIAL NO.
         TITLE 'IF C S X X X F    SUMMARY TABLE FOR      PRINTER'
         ORG   CSW+5
         DSGEN (DUMMY,4),                                              X
               (CDCK,1),                CHAN DATA CK                   X
               (CCCK,1),                CHAN CTRL CK                   X
               (IFCK,1),                INTR CTRL CK                   X
               (CHCK,1)                 CHAIN CK
         DSGEN (SNS,8,EQU,SNS00)        EQUATE FOR PTR SET-UP
IFCSXXXF CSECT
         USING RECORD,R2
         USING *,R9
         DC    A(ENTRY)                 PTR TO SUM ENTRIES
         DC    A(PEDIT)                 PTR TO EDIT TABLE
REG8     DC    F'0'                     PTR TO ACTIVE ENTRY
SCSIZE   DC    AL2(JUB#)                # OF 2 BYTE COUNTERS   @Y17CSWT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3                        COUNTER POINTER
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L21      EQU   21
L22      EQU   22
L23      EQU   23
L28      EQU   28
REGSAVE  DC    4F'0'                    REG SAVE AREA
HW2      DC    H'2'
HW8      DC    H'8'                     EIGHT
HW16     DC    H'16'                    SIXTEEN
WORK1    DC    D'0'                     WORK AREA # 1
ENTRYNO  DC    H'0'                     ENTRY NUMBER
NOCARRY  EQU   12                       COND CODE AFTER'AL'END CARRY
L46      EQU   46                       FOURTY SIX
X20      EQU   X'20'
X40      EQU   X'40'
X7F      EQU   X'7F'
X80      EQU   X'80'
X90      EQU   X'90'
X00      DC    2F'0'
         DS    0F
RETURN   LM    R5,R8,REGSAVE            RESTORE REGS
SKIP     BR    R14                      RETURN
MDRCK    EQU   *
         STM   R5,R8,REGSAVE            SAVE REGS
         TM    CLASRC,X90               MDR RECORD ?
         BNO   RETURN                   NO, BR TO RETURN
         XC    ENTRYNO(L2),ENTRYNO      ZERO ENTRY NO. FIELD
         LR    R5,R3                    GET CTR PTR
         BAL   R8,ADDUP                 GO ADD TO MDR CTR
         LA    R8,MDRCT-L6              GET MDR STUFF ADDR
         ST    R8,REG8                  PUT IT IN PTR
         LA    R7,SENSE01               GET ADDR OF 1ST SENSE
         SR    R8,R8                    ZERO REG 8
LOOPER   DS    0H
         LA    R8,L1(R8)                INCREMENT ENTRY NO. BY 1
         LR    R6,R8                    AND PUT IT IN R6
         CH    R6,HW16                  ALL DONE W/SNS INFO ?
         BH    RETURN                   YES, RETURN
         MH    R6,HW8                   CALC OFFSET
         SH    R6,HW8                   NOW ADJUST OFFSET
         AR    R6,R7                    GET CURRENT ENTRY ADDR
         OC    L0(L8,R6),L0(R6)         ANY SENSE INFO ?
         BZ    RETURN                   NO, BRANCH
         LH    R6,L0(R5)                YES,LOAD SUM CTR
         LA    R6,L1(R6)                BUMP CTR BY ONE
         STH   R6,L0(R5)                SAVE CTR
         B     LOOPER                   GO TO TOP OF LOOP
ADDUP    EQU   *
         LH    R6,L0(R5)                LOAD SUM CTR
         LA    R6,L1(R6)                ADD ONE TO CTR
         STH   R6,L0(R5)                SAVE CTR
         LA    R5,L2(R5)                BUMP SUM CTR PTR
         BR    R8                       RETURN
OBRCNT   DS    0H
         STM   R5,R8,REGSAVE            SAVE REGS
         TM    CLASRC,X90               MDR RECORD ?
         BO    RETURN                   YES, RETURN
          LR    R5,R3                    GET COUNTER PTR
         TM    SWITCH1,X20              OBR SHORT RECORD ?
         BNO   OBRLNG                   NO,BRANCH TO LONG
         BAL   R8,ADDUP                 YES, BR TO BUMP CTR
         LA    R5,L2(R5)               BUMP POINTER
         LA    R8,SHORTOBR-L6          GET ADDR FOR SHORT CTR START
         ST    R8,REG8                 PUT IT IN THE POINTER
         MVC   DEVTYPE(L8),JOBID       GET DEV TYPE,SDR CTR,CUA
         MVC   SDR00(L8),FAILCCW       GET SDR INFO
*                                      MAKING SHORT RECORD LOOK LONG
         B     RETURN                   RETURN
OBRLNG   DS    0H
         LA    R5,L2(R5)                BUMP CTR PTR
         BAL   R8,ADDUP                 GO ADD TO CTR
         B     RETURN                   RETURN
OBRERR   DS    0H
         STM   R5,R8,REGSAVE            SAVE REGISTERS
         TM    SWITCH1,X20              SHORT OBR ?
         BO    RETURN                   YES, RETURN
         SR    R6,R6                    ZERO R6
         IC    R6,SNS40                 GET ERROR CODE
         MH    R6,HW2                   MULTIPLY ERR CDE BY 2
         LR    R5,R3                    GET CTR PTR
         AR    R5,R6                    POINT TO PROPER CTR
         BAL   R8,ADDUP                 GO ADD TO OBR CTR
         B     RETURN                   RETURN
MDRERR   EQU   *
         STM   R5,R8,REGSAVE            SAVE REGISTERS
MDRERR1  EQU   *
         LH    R6,ENTRYNO               GET ENTRY NO.
         LA    R6,L1(R6)                INCREMENT ENTRY NO. BY 1
         STH   R6,ENTRYNO               SAVE ENTRY NO.
         CH    R6,HW16                  FINISHED W/SENSE INFO ?
         BH    RETURN                   YES, BRANCH
         MH    R6,HW8                   CALC OFFSET (ENTRYNO X8)
         SH    R6,HW8                   AND SUB 8
         LA    R7,SENSE01               GET ADDR OF 1ST SNS INFO
         AR    R6,R7                    INCREMENT TO CURRENT ENTRY
         OC    L0(L8,R6),L0(R6)         ANY SENSE INFO ?
         BZ    RETURN                   NO, BRANCH
         SR    R8,R8                    ZERO R8
         IC    R8,L0(R6)                GET ERROR CODE
         MH    R8,HW2                   MULT ERR CODE BY 2
         LR    R5,R3                    GET CTR PTR
         AR    R5,R8                    POINT TO PROPER CTR
         BAL   R8,ADDUP                 GO ADD TO MDR CTR
         B     MDRERR1                  GO LOOK AT NEXT SNS ENTRY
BOP      DS    0H
         STM   R5,R8,REGSAVE            SAVE REGS
         TM    SNS02,X20                BUS OUT PARITY BIT ON ?
         BNO   RETURN                   NO, GET OUT !!
         LR    R5,R3                    GET COUNTER POINTER
         TM    SWITCH1,X40              TEMP ERROR ?
         BO    BOP1                     YES, BRANCH
         BAL   R8,ADDUP                 NO, GO ADD
         LA    R5,L2(R5)                BUMP POINTER
         B     RETURN
BOP1     DS    0H
         LA    R5,L2(R5)                BUMP POINTER
         BAL   R8,ADDUP                 GO ADD TO CTR
         B     RETURN                   RETURN
XDATE1    DS    0H
         STM   R5,R8,REGSAVE            SAVE REGS
         CLC   DATE(L4),X00             IS DATE 0 ?
         BE    RETURN                   YES, BR
         CLC   L0(L4,R3),X00            IS LO DATE / ?
         BNE   XDATE2                   NO, BR
         MVC   L0(L4,R3),DATE           MOVE DATE IN
XDATE2   EQU   *
         CLC   DATE(L4),L0(R3)          CHECK FOR LO DATE
         BL    SAVELOW                  IT IS LOWER, BRANCH
         CLC   DATE(L4),L4(R3)          CHECK FOR HI DATE
         BNH   RETURN                   IT IS IN BETWEEN, BR
         MVC   L4(L4,R3),DATE           IT IS HIGHER, SAVE IT
         B     RETURN                   RETURN
SAVELOW  EQU   *
         MVC   L0(L4,R3),DATE           IT IS LO, SAVE IT
         B     RETURN                   RETURN
ADDCC    EQU   *                        ADD BTSS COUNT
         STM   R5,R8,REGSAVE            SAVE REGS
         MVC   WORK1(L2),BTSSHTS        GET BTSS COUNT FROM RECORD
COMADD   EQU   *
         SR    R6,R6       CLEAR REGISTER
         ICM   R6,X'3',WORK1  LOAD PAPER COUNT
         LR    R5,R3                    GET COUNTER POINTER
         XC    WORK1(L8),WORK1          CLEAR WORK AREA
         MVC   WORK1(L4),L2(R5)         GET CURRENT COUNTER TOTAL
         AL    R6,WORK1                 ADD TOTAL TO CC FROM RCD
         BC    NOCARRY,CTROK            BRANCH IF NO OVERFLOW
*                                       IF OVERFLOW DID OCCUR
         LH    R7,L0(R5)                GET OVERFLOW COUNTER
         LA    R7,L1(R7)                INCREMENT IT BY ONE
         STH   R7,L0(R5)                PUT IT BACK IN COUNTER
CTROK    EQU   *
         ST    R6,WORK1                 STORE TOTAL INTO WORK AREA
         TM    WORK1,X80                HI ORDER BIT ON ?
         BNO   NOVFLO                   NO, BRANCH
         NI    WORK1,X7F                TURN HI ORDER BIT OFF
         LH    R7,L0(R5)                GET OVERFLOW COUNTER
         LA    R7,L1(R7)                INCREMENT IT BY ONE
         STH   R7,L0(R5)                PUT IT BACK IN COUNTER
NOVFLO   EQU   *
         MVC   L2(L4,R5),WORK1          MOVE TOTAL TO COUNTER
         B     RETURN
ADDFF    EQU   *                        ADD CFS FOLDS
         STM   R5,R8,REGSAVE            SAVE REGS
         MVC   WORK1(L2),CFSFOLDS       GET CFS FOLDS COUNT
         B     COMADD                   BRANCH TO COMMON ADD
ADDPP    EQU   *                        ADD PAPER FOOTAGE
         STM   R5,R8,REGSAVE            SAVE REGS
         MVC   WORK1(L2),PAPERPRS       GET PAPER FOOTAGE COUNT
         B     COMADD                   BRANCH TO COMMON ADD
SETSER   EQU   *                        PUT IN SERIAL NUMBER
         STM   R5,R8,REGSAVE            SAVE REGS
         LR    R5,R3
         MVC   L0(L2,R5),SERIALNO       MOVE IN SERIAL NUMBER
         B     RETURN
***********************************************************************
*                                                                     *
*             SUM 4 BIT STATISTICAL DATA COUNTERS UP TO 9999          *
*                                                                     *
***********************************************************************
SDRSUM   EQU   *                                               @XA20147
         MVC   SDRWRK(L4),SDR02    PLACE SDR DATA ON FULLWD BOUNDARY
         CLC   SDRWRK(L4),FULLZERO CHECK IF ZERO               @XA20147
         BER   R14                 NO NEED TO GO FURTHER       @XA20147
         STM   R5,R8,REGSAVE       START OF SUM ROUTINE FOR SDR DATA
         ST    R0,R0SAVE           SAVE REG0                   @XA20147
         LA    R0,L7               SEVEN PIECES OF DATA TO BE SUMMED
         LR    R8,R3               GET TWO BYTE CTR POINTER    @XA20147
         L     R7,SDRWRK           PUT SDR DATA INTO REG       @XA20147
SDRSUM1  SR    R6,R6               CLEAR REG6                  @XA20147
         SLDL  R6,4                SHIFT LEFT 4 BIT POS REGS 6 AND 7
         LH    R5,L0(R8)           GET PREVIOUS SUMMED DATA    @XA20147
         AR    R6,R5               ADD NEW DATA TO PREVIOUS SUM@XA20147
         CH    R6,CTR9999          CHK SUM FOR MAX PRNT TOTL OF 9999
         BNH   SDRSUM2                                         @XA20147
         L     R6,CTR9999          SET REG TO STORE MAX VALUE  @XA20147
SDRSUM2  STH   R6,L0(R8)           STORE SUMMED OR MAX VALUE   @XA20147
         LA    R8,L2(R8)           INCR POINTER BY 2           @XA20147
         BCT   R0,SDRSUM1          IF COUNT NOT ZERO, LOOP     @XA20147
         L     R0,R0SAVE           RESTORE REG0                @XA20147
         B     RETURN                                          @XA20147
         DS    0F                                              @XA20147
SDRWRK   DC    1F'0'                                           @XA20147
FULLZERO DC    1F'0'                                           @XA20147
CTR9999  DC    H'9999'             MAX PRINTABLE CTR VALUE IS 9999
R0SAVE   DC    1F'0'                                           @XA20147
ENTRY    DS    0F
         SPECIAL XDATE1,0,SPACE=4
         SPECIAL MDRCK,0,SPACE=2
         SPECIAL OBRCNT,0,SPACE=2
         SUM   CDCK                    CHL DATA CK
         SUM   CCCK                    CHL CTL CK
         SUM   IFCK                    INTF CTL CK
         SUM   SNS01                   INTV RQD CK
         SUM   SNS03                   EQUIP CK
         SPECIAL BOP,0,SPACE=2         BUS OUT PARITY CHECK
SHORTOBR EQU   *
         SPECIAL SDRSUM,0,SPACE=7                              @XA20147
         SPECIAL OBRERR,0,SPACE=160
         DC    XL1'FF'                  OBR END - BAIL OUT
         DS    0H
MDRCT    EQU   *
         SPECIAL MDRERR,0,SPACE=160
         SPECIAL ADDCC,0,SPACE=3
         SPECIAL ADDFF,0,SPACE=3
         SPECIAL ADDPP,0,SPACE=3
         SPECIAL SETSER,0,SPACE=1
         DC    XL1'FF'                  MDR END - BAIL OUT
PEDIT    DS    0F
&DSECT   SETC  'JUBCTR'
&CSECT   SETC  'PEDIT'
         USING *,R9
         USING JUBCTR,R2
         DC    A(PENTRY)
         DC    C'IFCSXXXF'                                     @Y17CSWT
*
*        COUNTER DSECT DEFINITION,MUST BE IN ACCESS SEQUENCE
*
JUBCTR   DSECT
         DS    3H
         DSGEN (YDUMA,16),              DUMMY                          X
               (YNOREC,16),             NO. OF RECORDS                 X
               (YTYPE,8),               LAST TYPE ENCOUNTERED          X
               (YCHAN,8),               CHAN ADDR                      X
               (YDUMB,8),          DUMMY                       @XA14320X
               (YCUA,16),          CHAN UNIT ADR               @XA14320X
               (YSER,24),               CPU SERIAL #                   X
               (YCPU,16),               CPU MODEL #                    X
               (YSMSW,16)               SWITCH
         DSGEN (LODATE,32),             EARLIEST DATE                  X
               (HIDATE,32)              LATEST DATE
         DSGEN (MDRCD,16),              COUNT OF MDR RECORDS           X
               (CULOG,16),              ENTRIES IN ALL MDR RECORDS     X
               (OBRST,16),              COUNT OF OBR SHORT RECORDS     X
               (OBRLG,16),              COUNT OF OBR LONG RECORDS      X
               (CHLDC,16),              CHANNEL DATA CK                X
               (CHLCC,16),              CHANNEL CTL CK, PERM           X
               (INTCK,16),              INTERFACE CTL CK               X
               (INTRQ,16),              INTERVENTION REQD. CK          X
               (EQUIP,16),              EQUIPMENT CHECK                X
               (BUSOP,16),              BUS OUT PARITY                 X
               (TBUSOP,16),             TEMPORARY BUS OUT PARITY       X
               (TCDC,16),               TEMP CHL DATA CK               X
               (TCCC,16),               TEMP CHL CTL CK                X
               (TICC,16),               TEMP INTF CTL CK               X
               (FOLD,16),               CFS MISFOLD            @Y17CSWT*
               (BUTRJ,16),              BUR/TRIM JAM           @Y17CSWT*
               (BURST,16),              BURST FAIL             @Y17CSWT*
               (BUSTJ,16)               BUR/STACK JAM          @Y17CSWT
         DSGEN (OBRCT,16,0,159),        ERROR CODE SUM TABLE OBR       X
               (MDRCT,16,0,159)         ERROR CODE SUM TABLE MDR
         DSGEN (BTOVFLO,16),            BTSS OVERFLOW                  X
               (BTSSCT,32),             BTSS SHEET COUNT               X
               (CFOVFLO,16),            CFS FOLDS OVERFLOW             X
               (CFSCT,32),              CFS FOLDS COUNT                X
               (PAPOVFLO,16),           PAPER FOOTAGE OVERFLOW         X
               (PAPCT,32),              PAPER FOOTAGE COUNT            X
               (SERNO,16)               SERIAL NUMBER
         DS    0F
         DSGEN (WRKCT,16,0,1)           WORK COUNTER
         DSGEN (CCCNT,48,EQU,BTOVFLO),                                 X
               (FFCNT,48,EQU,CFOVFLO)
JUB#     EQU   (*-JUBCTR)/2           NUMBER OF COUNTERS USED  @Y17CSWT
IFCSXXXF CSECT
YR9PTR   DC    F'0'
YLABEL   DC    F'0'
*
*                        SPECIAL ROUTINES FOR SUMMARY
*
         DS    0F
RETURN1  LM    R5,R8,REGSAVE1           RESTORE REGS
RETURN2  BR    R14                      RETURN TO CALLER
SETCPUNO EQU   *
         STM   R5,R8,REGSAVE1           SAVE REGS
         SR    R5,R5                    ZERO R5
         IC    R5,L0(R4)                PICK UP CPU TYPE
         SLL   R5,L8                      V
         IC    R5,L1(R4)                  V
         LTR   R5,R5                    IS IT ZERO ?
         BNZ   RETURN1                  NO, BRANCH
         LA    R6,L46                   BACK UP POINTER 46 BYTES
         SR    R3,R6                     TO PUT IN NEW INFO
         MVC   L23(L6,R3),SHARED            SAY SERIAL = SHARED
         B     RETURN1                  RETURN
SETDATE  EQU   *
         UNPK  WORK(L8),L0(L4,R4)       UNPACK A DATE
         MVZ   WORK+L7(L1),WORK         MOVE IN ZONE BITS
         MVC   L0(L3,R3),WORK+L5        MOVE DAY TO PRINT BUFF
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR TO RPINT BUFF
         BR    R14                      RETURN
SPACE20  EQU   *
         LA    R3,L19(R3)               BUMP POINTER TO BUFF
         BR    R14                      RETURN
ADDEMUP  EQU   *
         STM   R5,R8,REGSAVE1           SAVE REGS
         LR    R5,R4                    GET POINTER TO DATA
         LA    R6,L9                    COUNTER VALUE IN R6
         SR    R7,R7                    ZERO R7
ADDLOOP1 EQU   *                     GO THRU LOOP 8 TIMES
         AH    R7,L0(R5)                ADD ERR COUNT TO REG
         LA    R5,L2(R5)                BUMP DATA POINTER
         BCT   R6,ADDLOOP1              BRANCH BACK TO LOOP TOP
         LA    R5,L6(R5)               BYPASS ERR CODES 89,8A, & 8B
         LA    R6,L4                   COUNTER VALUE IN R6
ADDLOOP2 EQU   *                     GO THRU THIS LOOP 5 TIMES
         AH    R7,L0(R5)                ADD ERR COUNT TO REG
         LA    R5,L2(R5)                BUMP DATA POINTER
         BCT   R6,ADDLOOP2              BRANCH BACK TO LOOP TOP
         ST    R7,WRKCT0                STORE TOTAL OF 8X ERRS
         LA    R6,24
         SR    R3,R6                    BACKUP PRT BUFF PTR
         B     RETURN1                  RETURN
CCOVFLO1 EQU   *
         CLC   L0(L2,R4),HW0            DID OVERFLOW CUER OCCUR ?
         BNE   RETURN2                  YES RETURN
         SR    R15,R15                  INDICATE NO PRINT REQD
         B     RETURN2                  RETURN
FFOVFLO1 EQU   *
         CLC   L0(L2,R4),HW0            DID OVERFLOW EVER OCCUR ?
         BNE   RETURN2                  YES RETURN
         SR    R15,R15                  INDICATE NO PRINT REQD
         B     RETURN2                  RETURN
CVTODEC  EQU   *
         STM   R5,R8,REGSAVE1           SAVE REGS
         L     R6,L0(R4)                GET COUNTER
         CVD   R6,WORK                  CONVERT IT TO DECIMAL
         UNPK  L0(L10,R3),WORK+L2(L6)   UNPACK IN INTO PRT BUFF
         MVZ   L9(L1,R3),L0(R3)         FIX ZONE BITS
         B     RETURN1                  RETURN
THEND    EQU   *
         STM   R14,R12,L12(R13)         SAVE REGS
         LR    R12,R13                  LOAD SAVE AREA ADDR
         LA    R13,FSAVE                LOAD MY SAVE AREA ADDR
         ST    R12,L4(R13)              SAVE CALLERS SAVE AREA ADDR
         ST    R13,L8(R12)              SAVE MY SAVE AREA ADDR IN CALLR
         L     R3,L4(R2)                LOAD ADDR OF NEXT CTR
         ST    R3,L28(R12)              SAVE ADDR NEXT CTR     @Y17CSWT
         LH    R0,SIZE                  LOAD SIZE OF CTRS
         LR    R1,R2                    LOAD ADDR OF CTRS
         FREEMAIN R,LV=(0),A=(1)        FREE CTR STORAGE
         LTR   R3,R3                    ARE THERE MORE CTRS ?
         BZ    RETURNF                  NO,RETURN
         LR    R2,R3                    LOAD POINTER
         LA    R5,PENTRY+L10            LOAD EDIT TBL ADDR
         ST    R5,YR9PTR                STORE IT FOR EREP CTL
         LA    R5,LABELS-L1             LOAD LABEL ADDR
         ST    R5,YLABEL                STORE IT FOR EREP CTL
RETURNF  EQU   *
         L     R13,L4(R13)              LOAD CALLERS SAVE AREA ADDR
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
FFLINE1  DC    A(FFLINE-4)
FFLABEL1 DC    A(FFLABEL-1)
OUTLINE1 DC    A(OUTLINE-4)
OUTLABL1 DC    A(OUTLABL-1)
FSAVE    DC    18F'0'
SIZE     DC    H'706'                   BYTES OF COUNTERS + 22
REGSAVE1 DC    4F'0'                    REG SAVE AREA
SHARED   DC    C'SHARED'                                       @Z427VLS
WORK     DC    D'0'                     WORK AREA
HW0      DC    H'0'                     ZERO FOR CTR COMPARE
PENTRY   DS    0F
         DC   X'00010001'
         DC   X'00010001'
         DC    A(LABELS)
         DC    H'0'
         DC    X'01'
         DC    X'000B8B00'
         LABEL ''
         LINE  (97,18),(1,103),SKIP=2
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE YCPU,SETCPUNO
         LABEL 'SUMMARY OF I/O RECORDS  TYPE-OBR/SDR/MDR  SOURCE-OUTBOAX
               RD/MISC    DEVICE TYPE 3800    CPU MODEL-','SERIAL NO.'
         LINE  ,(13),SKIP=1
         LABEL 'DAY YEAR    DAY YEAR'
         LINE  (13,12),(1,20),SKIP=1
         ROUTINE LODATE,SETDATE
         ROUTINE HIDATE,SETDATE
         LABEL 'DATE RANGE','TO'
         LINE  (75),(50),SKIP=1
         CONVT OBRST,2,4
         LABEL 'NO. OBR SHORT RECORDS'
         LINE
         CONVT OBRLG,2,4
         LABEL 'NO. OBR LONG RECORDS'
         LINE
         CONVT MDRCD,2,4
         LABEL 'NO. MDR RECORDS'
         LINE  ,(74),SKIP=1
         LABEL '------'
         LINE  (31,44),(9,41),SKIP=2
         HEX   YCUA,0,2B
         CONVT YNOREC,2,4
         LABEL ' CHANNEL UNIT ADDRESS','TOTAL NUMBER OF RECORDS'
         LINE  ,(1),SKIP=2
         LABEL '--SUMMARY BY ERROR TYPE (COUNTS IN DECIMAL) --'
         LINE  ,(18,40),SKIP=2
         LABEL 'SDR COUNTERS','OBR RECORDS','MDR RECORDS'
         LINE  (19,24),(1,24),SKIP=1
         CONVT TCDC,2,4
         CONVT FOLD,2,4                                        @Y17CSWT
         CONVT CHLDC,2,4
         CONVT INTRQ,2,4
         CONVT CULOG,2,4
         LABEL 'TEMP CHL DATA CK','CFS MISFOLD (32)','PERM CHL DATA CK'X
               ,'INTVN RQD CK','NO. INT LOG ENTRS'
         LINE
         CONVT TCCC,2,4
         CONVT BUTRJ,2,4                                       @Y17CSWT
         CONVT CHLCC,2,4
         CONVT EQUIP,2,4
         LABEL 'TEMP CHL CTL CK','BUR/TRIM JAM(40)','PERM CHL CTL CK','X
               EQUIP CK'
         LINE
         CONVT TICC,2,4
         CONVT BURST,2,4                                       @Y17CSWT
         CONVT INTCK,2,4
         CONVT TBUSOP,2,4
         LABEL 'TEMP INTF CTL CK','NO BURST CK (41)','PERM INTF CTL CK'X
               ,'TEMP BOPAR'
         LINE  (43,48),(25,48),SKIP=2
         CONVT BUSTJ,2,4                                       @Y17CSWT
         CONVT BUSOP,2,4
         LABEL 'BUR/STKR JAM(42)','PERM BOPAR'
         LINE  ,(1),SKIP=2
         LABEL '--SUMMARY OF PERMANENT ERRORS BY STATUS CODE (SENSE BYTX
               E 4) - COUNTS IN DECIMAL--'
         LINE  (19,24),(1,24),SKIP=1
         CONVT OBRCT17,2,4
         CONVT OBRCT36,2,4
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT104,2,4
         CONVT OBRCT137,2,4
         LABEL '11 XFR UNDETENTED','24 FSR BUR NOPEN',' ',             X
               '68 DRUM SLOW','89 PERM IEU PE'
         LINE
         CONVT OBRCT20,2,4
         CONVT OBRCT37,2,4
         CONVT OBRCT67,2,4
         CONVT OBRCT105,2,4
         CONVT OBRCT138,2,4
         LABEL '14 XFR ST/SP CK','25 PRT ALGN/CNTST',                  X
               '43 EARLY BURST CK','69 DRUM FAST','8A DISK FILE CK'
         LINE
         CONVT OBRCT21,2,4
         CONVT OBRCT38,2,4
         CONVT OBRCT75,2,4
         CONVT OBRCT106,2,4
         CONVT OBRCT139,2,4
         LABEL '15 XFR REGSTN CK','26 FSR WIDTH CK','4B BTS LOOP CK',  X
               '6A DRUM MTR OVRLD','8B SSYS CLOCK CK'
         LINE
         CONVT OBRCT22,2,4
         CONVT OBRCT39,2,4
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT108,2,4
         CONVT OBRCT140,2,4
         LABEL '16 XFR ENCODER CK','27 FSR MTR OVRLD',' ',             X
               '6C TONER OVERFEED','8C THERM/PWR CK'
         LINE
         CONVT OBRCT23,2,4
         CONVT OBRCT40,2,4
         CONVT OBRCT81,2,4
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT142,2,4
         LABEL '17 XFR MTR OVRLD','28 FSR PAPR SKEW','51 MISNG FO FLASHX
               ',' ','8E SSYS RESET CK'
         LINE
         CONVT OBRCT24,2,4
         CONVT OBRCT42,2,4
         CONVT OBRCT82,2,4
         CONVT OBRCT113,2,4
         CONVT OBRCT143,2,4
         LABEL '18 XFR GUIDE CK','2A T/F SHORT LOOP','52 EXTRA FO FLASHX
               ','71 CGEN PE','8F IEU CLOCK CK'
         LINE
         CONVT OBRCT28,2,4
         CONVT OBRCT43,2,4
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT114,2,4
         LABEL '1C XFR TRCTR CK','2B T/F LONG LOOP',' ','72 LINE OVERRUX
               N'
         LINE
         CONVT OBRCT30,2,4
         CONVT OBRCT46,2,4
         CONVT OBRCT99,2,4
         CONVT OBRCT115,2,4
         CONVT OBRCT145,2,4
         LABEL '1E TNSION ARM CK','2E FSR ROLL WRAP','63 VAC SYSTEM CK'X
               ,'73 LINE BUFFER CK','91 CHG CORONA CK'
         LINE
         ROUTINE YDUMA,RETURN2
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT101,2,4
         CONVT OBRCT116,2,4
         CONVT OBRCT146,2,4
         LABEL ' ',' ','65 CLNR BRUSH CK','74 WCGM LOAD CK',           X
               '92 XFR CORONA CK'
         LINE
         CONVT OBRCT33,2,4
         CONVT OBRCT48,2,4
         ROUTINE YDUMA,RETURN2
         CONVT OBRCT117,2,4
         CONVT OBRCT147,2,4
         LABEL '21 FSR TEMP CK','30 OUTPT LENTH CK',' ',               X
               '75 PRT SYNC CK','93 PRECLN CORONA'
         LINE
         CONVT OBRCT34,2,4
         CONVT OBRCT49,2,4
         CONVT OBRCT102,2,4
         CONVT OBRCT118,2,4
         CONVT OBRCT148,2,4
         LABEL '22 PLATN TEMP CK','31 DATRDY LEN CK',                  X
               '66 ERASE LAMP CK','76 LASER CK','94 DEVPRROLL BIAS'
         LINE  (19,24),(1,24),SKIP=3
         CONVT OBRCT35,2,4
         CONVT OBRCT52,2,4
         CONVT OBRCT103,2,4
         CONVT OBRCT119,2,4
         CONVT OBRCT149,2,4
         LABEL '23 FSR BUR NCLOSD','34 FSR OUTPUT CK',                 X
               '67 PCM SENSOR CK','77 MIRROR CK','95 POST XFR COR'
         LINE  ,(1),SKIP=2
         LABEL '--SUMMARY OF RECOVERED ERRORS BY STATUS CODE (INTERNAL X
               LOG ENTRY BYTE 0) - COUNTS IN DECIMAL--'
         LINE  (19,24),(1,24),SKIP=1
         CONVT MDRCT81,2,4
         CONVT MDRCT99,2,4
         CONVT MDRCT113,2,4
         ROUTINE MDRCT128,ADDEMUP
         CONVT WRKCT1,2,4
         CONVT MDRCT145,2,4
         LABEL '51 MISNG FO FLASH','63 VAC SYSTEM CK','71 CGEN PE',    X
               '8X TEMP IEU PE','91 CHG CORONA CK'
         LINE
         CONVT MDRCT82,2,4
         CONVT MDRCT101,2,4
         CONVT MDRCT115,2,4
         CONVT MDRCT137,2,4
         CONVT MDRCT147,2,4
         LABEL '52 EXTRA FO FLASH','65 CLNR BRUSH CK',                 X
               '73 LINE BUFFER CK','89 PERM IEU PE','93 PRECLN CORONA'
         LINE
         ROUTINE YDUMA,RETURN2
         CONVT MDRCT102,2,4
         CONVT MDRCT117,2,4
         CONVT MDRCT138,2,4
         CONVT MDRCT148,2,4
         LABEL ' ','66 ERASE LAMP CK','75 PRT SYNC CK',                X
               '8A DISK FILE CK','94 DVLPRROLL BIAS'
         LINE
         ROUTINE YDUMA,RETURN2
         ROUTINE YDUMA,RETURN2
         CONVT MDRCT118,2,4
         CONVT MDRCT139,2,4
        LABEL ' ',' ','76 LASER CK','8B SSYS CLOCK CK'
         LINE  (19,24),(1,24),SKIP=3
         ROUTINE YDUMA,RETURN2
         ROUTINE YDUMA,RETURN2
         CONVT MDRCT119,2,4
         LABEL ' ',' ','77 MIRROR CK'
         LINE  ,(1),SKIP=2
         LABEL '--SUMMARY OF STATISTICAL USAGE DATA FROM INTERNAL LOG FX
               OR DATE RANGE INDICATED ABOVE - COUNTS IN DECIMAL--'
CCLINE   LINE  (27),(2,35),SKIP=1
         ROUTINE BTSSCT,CVTODEC
CCLABEL  LABEL 'BTS COUNT','00'
         LINE (20),(2,26),SKIP=1
         CONVT BTOVFLO,2,4
         ROUTINE BTOVFLO,CCOVFLO1
         LABEL 'COUNTER EXCEEDED','TIMES'
FFLINE   LINE  (27),(2,35),SKIP=1
         ROUTINE CFSCT,CVTODEC
FFLABEL  LABEL 'CFS COUNT','00'
         LINE (20),(2,26),SKIP=1
         CONVT CFOVFLO,2,4
         ROUTINE CFOVFLO,CCOVFLO1
         LABEL 'COUNTER EXCEEDED','TIMES'
PPLINE   LINE  (27),(2,35,),SKIP=1
         ROUTINE PAPCT,CVTODEC
PPLABEL  LABEL 'PAPER COUNT','00'
         LINE (20),(2,26),SKIP=1
         CONVT PAPOVFLO,2,4
         ROUTINE PAPOVFLO,CCOVFLO1
         LABEL 'COUNTER EXCEEDED','TIMES'
OUTLINE  LINE
OUTLABL  LABEL ' '
         LINE
         ROUTINE WRKCT0,THEND
         LABEL ' '
         DC    X'FF'
         DC    X'0000'                  DUMP COUNT
         DC    X'0018'                  HEADER LGTH
         DC    X'0000'                  ADDR TO USE AT DUMP START
         DC    X'FF'                    BAIL OUT
         DC    X'0000'                  DUMP LENGTH
         DC    X'0018'                  HEADER LGTH
         DC    X'0000'                  ADDR TO USE AT DUMP START
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
