         SPACE 2
*   MADRID/WINCHESTER SVS REL2 1.7                             @Y17ASRB
*A001080                                                       @Y17ASRB
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*        DSGEN  MACRO        D S G E N  M A C R O          DSGEN MACRO
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(1000),&ITEMNBR,&SHIFT(1000)
         GBLC  &ITEM(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  500000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCS3330'
&DSECT   SETC  'S3330'
IFCS3330 CSECT
S3330    DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,16)
         DSGEN (RECID,8),(SPARE1,16),(TYPE,8)
         DSGEN (DAY,32)
         DSGEN (HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24)
         DSGEN (CPUID,16),(SPARE3,16)
         DSGEN (JCUAID,16),(JVOLID1,16)
         DSGEN (JVOLID2,32)
         DSGEN (TSNB00,2),(TSNB02,1),(TSNB03,2),(TSNB05,1),(TSNB06,2), C
               (TSNB10,1),(TSNB11,1),(TSNB12,6),(TSNB20,8),(TSNB30,8)
         DSGEN (TSNB40,8),(TSNB50,8),(TSNB60,8),(TSNB70,8)
         DSGEN (TSNB80,8),(TSNB90,8),(TSNB100,8),(TSNB110,8)
         DSGEN (TSNB120,8),(TSNB130,8),(TSNB140,8),(TSNB150,8)
         DSGEN (TSNB160,8),(TSNB170,8),(TSNB180,8),(TSNB190,8)
         DSGEN (TSNB200,8),(TSNB210,8),(TSNB220,8),(TSNB230,8)
         DSGEN (SPARE4,8),(CUA,24)
         DSGEN (IORET,24),(SBCNT,8)                              S21021
         DSGEN (VOLID1,32)
         DSGEN (VOLID2,16),(SPARE5,16)
         DSGEN (LSKAD1,64)
         DSGEN (AHA1,32)
         DSGEN (AHA2,16),(SPARE6,16)
         DSGEN (SNB00,2),(SNB02,1),(SNB03,2),(SNB05,1),(SNB06,2),      C
               (SNB10,1),(SNB11,1),(SNB12,6),(SNB20,8),(SNB30,8)
         DSGEN (SNB40,8),(SNB50,8),(SNB60,8),(SNB70,8)           S21926
         DSGEN (SNB80,8),(SNB90,8),(SNB100,8),(SNB110,8)         S21926
         DSGEN (SNB120,8),(SNB130,8),(SNB140,8),(SNB150,8)       S21926
         DSGEN (SNB160,8),(SNB170,8),(SNB180,8),(SNB190,8)       S21926
         DSGEN (SNB200,8),(SNB210,8),(SNB220,8),(SNB230,8)       S21926
*
IFCS3330 CSECT
         USING S3330,R2
         USING *,R9
         DC    A(ENTRIES)
         DC    A(PEDIT)
*
REG8    DC    F'0'
SCSIZE   DC    H'2877'                                         @Z427VLS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L22      EQU   22
L23      EQU   23
L24      EQU   24
L26      EQU   26
L27      EQU   27                                              @Z40NIVS
L28      EQU   28
L29      EQU   29                                                Y01124
L30      EQU   30                                              @Z40NIVS
L31      EQU   31
L32      EQU   32
L36      EQU   36
L39      EQU   39
L42      EQU   42                                              @Z427VLS
L44      EQU   44
L46      EQU   46                                                S21021
L47      EQU   47                                              @Z40NIVS
L48      EQU   48                                              @Z40NIVS
L49      EQU   49                                              @Z40NIVS
L50      EQU   50                                              @Z40NIVS
L64      EQU   64                                              @Z40RIVS
L480     EQU   480                                             @Z40NIVS
L510     EQU   510                                             @Z40NIVS
L1460    EQU   1460                                            @Z40NIVS
         SPACE 2                                               @Z40NIVS
BLANK    EQU   C' '                                            @Z40NIVS
SLASH    EQU   C'/'                                            @Z40NIVS
COLON    EQU   C':'                                            @Z40NIVS
SORTFLG  EQU   X'80'                                           @Z40NIVS
BASEDISP EQU   X'FD'                                           @Z40NIVS
DOGFOX   EQU   X'DF'                                           @Z40RIVS
ONE      EQU   1                                               @Z40NIVS
TWO      EQU   2                                               @Z40NIVS
THREE    EQU   3                                               @Z40NIVS
FOUR     EQU   4                                               @Z40NIVS
FIVE     EQU   5                                               @Z40NIVS
H0F      EQU   X'0F'
HE0      EQU   X'E0'
HF0      EQU   X'F0'
H00      EQU   X'00'
H01      EQU   X'01'
H02      EQU   X'02'
H04      EQU   X'04'
H08      EQU   X'08'
HC0      EQU   X'C0'
H80      EQU   X'80'
H50      EQU   X'50'
H40      EQU   X'40'
H30      EQU   X'30'
H20      EQU   X'20'
H10      EQU   X'10'
H21      EQU   X'21'
H23      EQU   X'23'
H25      EQU   X'25'
H29      EQU   X'29'
H18      EQU   X'18'                                             S21926
H32      EQU   X'32'
H90      EQU   X'90'
CHART    EQU   C'T'
CLRSGN   EQU   X'F0'
LOGMODE  EQU   X'10'
NOLOG    EQU   X'7F'
NOCARRY  EQU   12                      COND CODE AFTER 'AL' =
*                                       NO CARRY(OVERFLOW) INTO
*                                       BIT POSITION 32
XDATE1   STM   R5,R8,XSAVE1            SAVE REGS
         CLC   DAY(L4),HEX00           IS DATE ZERO
         BE    RETURN1                 BR-ZERO
         CLC   L0(L4,R3),HEX00          IS LOW DATE ZERO
         BNE   XDATE2                   BR-NO
         MVC   L0(L4,R3),DAY           MOVE IN DATE
XDATE2   CLC   DAY(L4),L0(R3)          CHECK FOR LOW DATE
         BL    SAVELOW                  LOWER SAVE IT
         CLC   DAY(L4),L4(R3)          CHECK FOR HI
         BNH   RETURN1
SAVEHI   MVC   L4(L4,R3),DAY           MOVE HI DATE
         B     RETURN1
SAVELOW  MVC   L0(L4,R3),DAY           MOVE LOW DATE
         B     RETURN1
ISTPER   STM   R5,R8,XSAVE1            SAVE REGISTERS
         SR    R8,R8               ZERO REGS
         USING T3330A,R3                                       @Z40NIVS
         LA    R6,T3330B           LOAD ADDR SUM CNTR          @Z40NIVS
         ST    R6,VOLPTR           STORE VOL CNTR ADDR         @Z40NIVS
         LA    R6,T3330C           LOAD ADDR OF SUM CNTR       @Z40NIVS
         ST    R6,FLTPTR           STORE FLT SUM CNTR ADDR     @Z40NIVS
         DROP  R3                                              @Z40NIVS
         LR    R5,R3               GET ADDR OF SUM CNTR        @Z40NIVS
         LA    R5,L32(R5)          INCR TO START OF CNTR       @Z40RIVS
         A     R5,RECTST4          PNT TO REC FOR DEV          @Z40NIVS
         TM    CLASRC,H90          IS THIS MDR REC             @Z40RIVS
         BO    ISTPER3             YES GO TEST SENSE           @Z40RIVS
         TM    CLASRC,H32          IS THIS A CONV OBR          @Z40RIVS
         BO    ISTPER4             YES GO TEST SENSE           @Z40RIVS
         TM    SNB20,H08           IS OBR EMULATION            @Z40RIVS
         BO    ISTPER5             YES GO TEST LOGICAL         @Z40RIVS
ISTPER2  ST    R3,RECTSTS          SAVE SUM PNTR               @Z40RIVS
         ST    R5,RECTSTP          SAVE REC PNTR               @Z40RIVS
         TM    EMCUA1,H80          ARE REC EMULATED            @Z40RIVS
         BNO   PASSSW1             NO CONTINUE                 @Z40RIVS
         LR    R7,R3               PICK UP DSECT PNTR          @Z40RIVS
         LA    R6,T3330A-T3330     GET DISPLACEMENT            @Z40RIVS
         SR    R7,R6               BACK UP TO DSECT START      @Z40RIVS
         OI    L0(R7),H80          PASS EMULATOR SW TO EDIT    @Z40RIVS
PASSSW1  MVC   L0(L32,R3),L0(R5)   MOVE REC TO SUM AREA        @Z40RIVS
         LR    R5,R3               GET ADDRESS OF SUM COUNTER  @Z40NIVS
         MVC   L2(L1,R5),CLASRC        SAVE RECORD CLASS/SOURCE XL03145
         TM    CLASRC,H90              TEST FOR A TPER RECORD    S21021
         BO    TYPTPER                 YES                       S21021
         TM    EMCUA1,H80          IS THIS EMULATION           @Z40RIVS
         BNO   ISTPER2A            NO GO HANDLE REC NORMAL     @Z40RIVS
         MVC   L30(L2,R3),TSNB180  MOVE IN LOGICAL CUA         @Z40RIVS
         NI    EMCUA1,H00          TURN OFF EMULATOR SW        @Z40RIVS
*                                      NO - SAVE DEVICE TYPE    XL03145
*                                       CODE,BUT DONT ADD TO    XL03145
*                                       COUNTERS                XL03145
ISTPER2A MVC   L28(L2,R3),CUA+L1   SAVE DEVICE ADDR            @Z40RIVS
         MVC   L3(L2,R5),TSNB220       SAVE DEVICE CODE         XL03145
         B     RETURN1                 RETURN                   XL03145
ISTPER3  TM    TSNB20,H08          MDR IN EMULATION            @Z40RIVS
         BNO   ISTPER2             NO GO TO HANDEL NORMAL      @Z40RIVS
         OI    EMCUA1,H80          TURN ON EMULATOR SW         @Z40RIVS
         TM    JCUAID+L1,H20       YES-IS THIS 2ND LOGICAL     @Z40RIVS
         BNO   ISTPER2             NO-GO TO SAVE SUM PNTRS     @Z40RIVS
         B     ISTPER1             YES-INCR SUM PNTR           @Z40RIVS
ISTPER4  TM    SNB120,H08          CONV OBR REC IN EMUL        @Z40RIVS
         BNO   ISTPER2             NO-GO SAVE PNTRS            @Z40RIVS
ISTPER5  OI    EMCUA1,H80          TURN ON EMULATOR SW         @Z40RIVS
         TM    CUA+L2,H20          YES-IS THIS 2ND LOGICAL     @Z40RIVS
         BNO   ISTPER2             NO-USE PHYSICAL AREA        @Z40RIVS
ISTPER1  LA    R5,L32(R5)          INCREMENT FOR 2ND REC       @Z40RIVS
         B     ISTPER2             GO TO USE PHYSICAL AREA     @Z40RIVS
TYPTPER  MVC   EMCUA(L2),JCUAID    MOVE CUA TO WORK AREA       @Z40RIVS
         TM    TSNB20,H08          TEST FOR EMULATION          @Z40RIVS
         BNO   TYPTPER1            NO HANDLE REC               @Z40RIVS
         MVC   L30(L2,R3),JCUAID   MOVE LOGICAL UNIT TO REC    @Z40RIVS
         NI    EMCUA1,H00          TURN OFF EMULATOR SW        @Z40RIVS
TYPTPER1 MVC   L28(L2,R3),EMCUA    SAVE DEVICE ADDR            @Z40RIVS
         BAL   R8,ADDUP            GO ADD TO COUNT OF TPER RECORDS
         LA    R8,DOVOL-L6             MOVE POINTER TO ADD VOL ID
         ST    R8,REG8
         MVC   L1(L1,R5),RECID         SAVE RECORD ID           XL03145
         B     RETURN1
ISLOG    STM   R5,R8,XSAVE1            SAVE REGISTERS
         SR    R6,R6                   ZERO
         TM    CLASRC,H32              IS THIS A CONVERTED OBR   S21021
         BNO   NEWREC              NO
TESTCONV TM    SBCNT,H18               HAS THIS RECORD BEEN CONDENSED
         BO    NEWREC                  YES                       S21021
         MVC   SNB00(L24),SNB100       NO,MOVE SENSE OVER SDR    S21021
NEWREC   LR    R5,R3                   GET ADDRESS OF SUMMARY COUNTERS
         TM    SNB20,H10               WAS THIS RECORDED IN LOGGING MOD
         BNO   RETURN1             NO, EXIT
LOGMOD   TM    SNB70,H50               IS THIS DATA CHECK CORRECTABLE
         BO    LOGMOD1                 YES,FORMAT 5 INDICATES DCC
         LA    R5,L2(R5)               NO,BUMP POINTER RO DATA CHK RTRY
         TM    SNB70,H40               IS THIS DATA CHECK RETRY
         BO    LOGMOD1                 YES,FORMAT 4 INDICATES DCR
         LA    R5,L2(R5)               NO,BUMP POINTER TO SEEK CHECK
         TM    SNB70,H10               IS THIS SEEK CHECK
         BNO   LOGRET              NO
*                                  YES, FORMAT 1 INDICATES SK CHK
LOGMOD1  BAL   R8,ADDUP            GO ADD TO SUMMARY CTR
LOGRET   LA    R8,ENDLOG-L6            LOG MOD ENDS,DO NOT ADD FURTHER
         ST    R8,REG8
         B     RETURN1
*
         EJECT                                                 @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO SUM INTO THE SPECIFIC SUM AREA FOR DEVICE  @Z40NIVS
*                                                              @Z40NIVS
RECTST0  STM   R5,R8,XSAVE1        SAVE REG                    @Z40NIVS
         IC    R7,JCUAID+ONE       PICK UP MDR CUA             @Z40NIVS
         TM    CLASRC,H90          TEST TYPE RECORD            @Z40NIVS
         BO    RECTST1             BRANCH IF MDR               @Z40NIVS
         IC    R7,CUA+TWO          PICK UP OBR CUA             @Z40NIVS
RECTST1  SLL   R7,L28              CLR HIGH BYTES              @Z40NIVS
         SRL   R7,L28              IN REG7                     @Z40NIVS
         LTR   R7,R7               TEST REG7 FOR ZERO          @Z40NIVS
         BZ    RECTST2             BRANCH FOR ZERO INCRMT      @Z40NIVS
         LA    R5,L64              LOAD REG5 WITH INCRMT       @Z40RIVS
         MR    R6,R5               SET REG7 TO SUM AREA        @Z40NIVS
RECTST2  ST    R7,RECTST4          SAVE INCRMT                 @Z40NIVS
         B     RETURN1             RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*                                                              @Z40NIVS
*    SPECIAL TO RESTORE SUMREC BACK TO ITS PROPER POSITION     @Z40NIVS
*                                                              @Z40NIVS
RESTOR   STM   R5,R8,XSAVE1        SAVE WORK REGS              @Z40NIVS
         L     R5,RECTSTS          PICK UP PNTR TO SUM AREA    @Z40NIVS
         L     R6,RECTSTP          PICK UP PNTR TO DEV AREA    @Z40NIVS
         MVC   L0(L32,R6),L0(R5)   RESTORE SUM CNTR            @Z40RIVS
         B     RETURN1             RETURN                      @Z40NIVS
*                                                              @Z40NIVS
EQUIP    STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z40NIVS
         SR    R6,R6               ZERO                        @Z40NIVS
         LR    R5,R3                   GET ADDRESS OF SUMMARY COUNTERS
         TM    SNB00,H10               IS THIS EQUIPMET CHECK
         BNO   RETURN1             NO RETURN, DO NOT ADD TO CTRS
EQUIPON  TM    SNB70,H30               IS THIS FORMAT 3
         BO    EQUIPON1                YES
         TM    SNB70,H20                       FORMAT 2
         BO    EQUIPON1                YES
         TM    SNB70,HF0                       FORMAT 0
         BZ    EQUIPON1                YES
         TM    SNB70,H50               IS THIS FORMAT 5
         BO    RETURN1                 YES,DO NOT ADD TO COUNTERS
         TM    SNB70,H10                       FORMAT 1
         BNO   RETURN1             NO RETURN, DO NOT ADD TO CTRS
EQUIPON3 LA    R5,L4(R5)               POINT TO PROPER COUNTER
         TM    SNB10,H80               IS THIS PERMANENT ERROR
         BO    EQUPON4A            YES                         @XA11914
         TM    SWITCHES+1,X'40'    TEST HEADER                 @XA11914
         BO    EQUIPON4            TEMP, GO ADD                @XA11914
EQUPON4A LA    R5,L2(R5)           BUMP POINTER TO COUNTER     @XA11914
EQUIPON4 BAL   R8,ADDUP            GO ADD TO TOTAL EQ DRIVE
         B     RETURN1
EQUIPON1 TM    SNB10,H80           IS THIS A PERM ERROR
         BO    EQUPON2A            YES                         @XA11914
         TM    SWITCHES+1,X'40'    TEST HEADER FOR PERM        @XA11914
         BO    EQUIPON2                                        @XA11914
EQUPON2A LA    R5,L2(R5)           BUMP POINTER TO COUNTER     @XA11914
EQUIPON2 BAL   R8,ADDUP            GO ADD TO TOTAL EQ CONT
         B     RETURN1             RETURN
DATACKP  STM   R5,R8,XSAVE1            SAVE REGISTERS
         SR    R6,R6                   ZERO
         LR    R5,R3                   GET ADDRESS OF SUMMARY COUNTER
         TM    SNB00,H08               TEST FOR DATA CHECK OBR
         BNO   RETURN1             EXIT
DATACKP1 TM    SNB10,H80               IS THIS DATA CHECK PERMANENT
         BO    DATACKP2            YES, GO ADD                 @XA11914
         TM    SWITCHES+1,X'40'    TEST HEADER FOR PERM        @XA11914
         BO    RETURN1                                         @XA11914
DATACKP2 BAL   R8,ADDUP                GO OUT TO ADD
         B     RETURN1
TVOLIDM  TM    TSNB20,H08          TEST FOR EMULATION          @Z40NIVS
         BNO   TVOLID3A            NO BYPASS LOG CUA MOVE      @Z40NIVS
         MVC   L28(L2,R5),JCUAID   MOVE LOGICAL CUA TO REC     @Z40NIVS
         B     TVOLID3A            GO TO CONTINUE PROCESSING   @Z40NIVS
TVOLID   STM   R5,R8,XSAVE1            SAVE THE REGS
         SR    R6,R6
         L     R3,VOLPTR           PICK UP ADDR OF VOL CNT     @Z40NIVS
         LR    R5,R3                   GET POINTER TO COUNTERS
         TM    CLASRC,H90              IS THIS AN  MDR  RECORD
         BNO   RETURN1             NO RETURN FOR ANOTHER
TVOLID1A CLC   ZEROS(L6),JVOLID1       IS THIS VOL ID ZEROS      A44063
         BE    RETURN1                 YES GO GET ANOTHER        A44063
         LA    R7,L50              SET NO OF VLO ID'S ALLOWED  @Z40NIVS
TVOLID2A CLC   L0(L6,R5),JVOLID1       COMPARE VOL ID TO FIRST
         BNE   TVOLID4Z            UNEQUAL                     @Z40NIVS
         CLC   L26(L2,R5),EMCUA    CHECK DEVADDR               @Z40RIVS
         BNE   TVOLID4Z            BYPASS EMUL                 @Z40RIVS
         TM    TSNB20,H08          TEST FOR EMUL               @Z40RIVS
         BNO   TVOLID4A            NO GO HANDLE MDR            @Z40RIVS
         CLC   L28(L2,R5),JCUAID   YES, TEST LOGICAL CUA       @Z40RIVS
         BE    TVOLID4A            YES, GOTO SUMMARY           @Z40RIVS
TVOLID4Z CLC   L0(L6,R5),ZEROS     NO,IS VOL ID EQUAL TO BLANKS@Z40NIVS
         BE    TVOLIDM             GO TEST FOR EMULATION       @Z40RIVS
         LA    R5,L30(R5)          BUMP PTR TO NEXT VOLID      @Z40RIVS
         BCT   R7,TVOLID2A             LOOP TO FIRST TEST
TVOLID3A MVC   L0(L6,R5),JVOLID1       MOVE IN VOL ID
         MVC   L26(L2,R5),EMCUA    MOVE IN DEVICE ADDR         @Z40RIVS
TVOLID4A LA    R5,L6(R5)               BUMP POINTER TO COUNTERS
         ICM   R6,L15,L0(R5)
         AH    R6,TSNB160          ADD IN COUNT OF SEEKS
         STCM  R6,L15,L0(R5)       STORE TOTAL
         LA    R5,L4(R5)               BUMP CNTR PTR
         SR    R6,R6                   CLEAR REG
         SPACE
         IC    R6,TSNB190              GET COUNT OF SEEK ERRORS
         BAL   R8,ADDUP3           GO ADD TO COUNTER           @Z40NIVS
         SPACE
         ICM   R6,L15,TSNB80       LOAD NUMBER OF BYTES READ.
         ICM   R7,L15,L2(R5)       PUT COUNTER ON BOUNDARY
         ALR   R6,R7               ADD BYTES READ
*                                                              @XA21166
         BC    NOCARRY,SAVBTRD         BR IF NO OVERFLOW
*                                      IF THERE WAS A CARRY
         LH    R7,L0(R5)               LOAD OVERFLOW CNTR
         LA    R7,L1(R7)               BUMP BY ONE
         STH   R7,L0(R5)               SAVE CNTR
*
SAVBTRD  STCM  R6,L15,L2(R5)       SAVE BYTES READ
         LA    R5,L6(R5)               BUMP CNTR PTR
         SPACE
         ICM   R6,L15,L0(R5)       LOAD CURRENT TOTAL
         AH    R6,TSNB140          UNCORR DATA CKS
         STCM  R6,L15,L0(R5)       STORE TOTAL
         LA    R5,L4(R5)               BUMP CNTR PTR
         SPACE
         ICM   R6,L15,L0(R5)       CURRENT TOTAL
         AH    R6,TSNB120          CORR DATA CKS
         STCM  R6,L15,L0(R5)       STORE TOTAL
         SPACE
*        THE FOLLOWING ROUTINE DETERMINES IF THE COUNTS ARE MADE
*        FOR CHANNEL 'A' AND 'B' OR CHANNEL 'C' AND 'D'.
         CLI   TSNB180,H80             IS THIS REC FOR CHNL C/D  Y01124
         BE    CHANCD                  YES  BRANCH               Y01124
         LA    R5,ABCNTR(R3)           NO SET PTR TO A/B CNTRS
         B     TVOLID5A                BRANCH TO TOTAL COUNTERS  Y01124
CHANCD   LA    R5,CDCNTR(R3)           SET POINTER TO C/D CNTRS
*
TVOLID5A SR    R6,R6                                             Y01124
         IC    R6,TSNB200              GET COUNT OVERRUN A/C CMNDY01124
         BAL   R8,ADDUP3
         IC    R6,TSNB210              GET COUNT OVERRUN A/C DATAY01124
         BAL   R8,ADDUP3
         IC    R6,TSNB220              GET COUNT OVERRUN B/D CMNDY01124
         BAL   R8,ADDUP3
         IC    R6,TSNB230              GET COUNT OVERRUN B/D DATAY01124
         BAL   R8,ADDUP3
         B     RETURN1
ADDUP3   AH    R6,L0(R5)           ADD TO COUNTER
         STCM  R6,L3,L0(R5)        STORE TOTAL
         LA    R5,L2(R5)           INCREMENT POINTER
         SR    R6,R6               CLEAR R6                    @Z40RIVS
         BR    R8
ADDUP    LH    R6,L0(R5)               PUT THE SUMMARY COUNTER IN REG 6
         LA    R6,L1(R6)               ADD ONE TO THE SUMMARY COUNTER
         STH   R6,L0(R5)               REPLACE COUNTER
         LA    R5,L2(R5)               BUMP POINTER TO NEXT COUNTER
         BR    R8                      RETURN
*                                                              @Z40NIVS
*        SPECIAL TO SUM INTO THE FAULT SYMPTOM COUNTERS        @Z40NIVS
*                                                              @Z40NIVS
TFAULT0  STM   R5,R8,XSAVE1        SAVE WORK REG               @Z40NIVS
         TM    CLASRC,H30          TYPE REC AN OBR             @Z40NIVS
         BNO   RETURN1             NO,EXIT
         TM    SNB70,H50           FORMAT 5?
         BO    RETURN1             YES,DON'T SAVE
TFAULT1  L     R3,FLTPTR           PNT TO FLT SUM AREA         @Z40NIVS
         LA    R6,L1               SET OCCUR INCREMENT         @Z40NIVS
         LA    R7,L50              SET TO NUM OF SUMRECORD     @Z40NIVS
TFAULT2  CLC   L0(L2,R3),SNB220    IS FLT CODE EQ SUM REC      @Z40NIVS
         BE    TFAULT3             YES GO TEST CUA             @Z40NIVS
         CLC   L0(L2,R3),ZEROS     IS SUM REC ZERO             @Z40NIVS
         BE    TFAULT9             YES GO TEST REC CUA         @Z40NIVS
         B     TFAULT8             GO TO GET NEXT SUM REC      @Z40NIVS
TFAULT3  CLC   L2(L2,R3),CUA+ONE   IS CUA EQ TO SUM REC        @Z40NIVS
         BE    TFAULTA             TEST EMUL FOR COMP          @Z40RIVS
TFAULT9  CLC   L2(L2,R3),ZEROS     IS REC CUA EQU TO ZEROS     @Z40NIVS
         BE    TFAULTB             TEST EMUL FOR MOVE          @Z40RIVS
TFAULT8  LA    R3,L42(R3)          STEP TO NEXT COUNTER        @Z427VLS
         BCT   R7,TFAULT2          GO TRY AGAIN                @Z40NIVS
         B     RETURN1             ALL ENTRIES FULL            @Z40NIVS
TFAULTB  TM    SNB20,H08           IS THIS EMULATION           @Z40RIVS
         BNO   TFAULT4             NO DONT USE LAGICAL         @Z40RIVS
         MVC   L16(L2,R3),TSNB180  MOVE IN LOGICAL CUA         @Z40RIVS
TFAULT4  MVC   L0(L2,R3),SNB220    MOVE FLT CODE TO REC        @Z40NIVS
         MVC   L2(L2,R3),CUA+ONE   MOVE CUA TO SUM REC         @Z40NIVS
         MVC   L18(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
TFAULT5  MVC   TFAULT7(L4),L4(R3)  INCREMENT                   @Z40NIVS
         A     R6,TFAULT7          NUM OF                      @Z40NIVS
         ST    R6,TFAULT7          OCCUR                       @Z40NIVS
         MVC   L4(L4,R3),TFAULT7   BY ONE                      @Z40NIVS
         CLC   L8(L4,R3),DAY       IS SUM DAY LATER RECDAY     @Z40NIVS
         BH    RETURN1             SUM DAY HIGH RETURN         @Z40NIVS
         CLC   L8(L4,R3),DAY       IS SUMDAY EQ RECDAY         @Z40NIVS
         BE    TFAULT6             GO TEST TIME DAY EQ         @Z40NIVS
         MVC   L8(L8,R3),DAY       MOVE IN NEW DAY/TIME        @Z40NIVS
         MVC   L18(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
RETURN1  LM    R5,R8,XSAVE1        RESTORE REGS
         BR    R14                 EXIT
TFAULT6  CLC   L12(L4,R3),HOUR     TEST SUM DAY/REC DAY        @Z40NIVS
         BNL   RETURN1             SUM REC HIGH OR EQ          @Z40NIVS
         MVC   L12(L4,R3),HOUR     MOVE IN NEW TIME TO SUM     @Z40NIVS
         MVC   L18(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
         B     RETURN1         EXIT                            @Z40NIVS
TFAULTA  TM    SNB20,H08           IS THIS EMULATION           @Z40RIVS
         BNO   TFAULT5             NO DONT USE LOGICAL         @Z40RIVS
         CLC   L16(L2,R3),TSNB180  SUMREC EQ TO REC            @Z40RIVS
         BE    TFAULT5             YES GO SUM                  @Z40RIVS
         B     TFAULT8             NO GET NEXT SUM REC         @Z40RIVS
         SPACE 1                                               @Z40NIVS
VOLPTR   DC    F'0'                PNTR TO VOLID,SUM AREA      @Z40NIVS
         SPACE 1                                               @Z40NIVS
FLTPTR   DC    F'0'                PNTR TO FLTSYM SUM AREA     @Z40NIVS
         SPACE 1                                               @Z40NIVS
ENTRIES  DS    0F
         SPECIAL RECTST0,00000000,SPACE=0                      @Z40NIVS
         SPECIAL   XDATE1,00000000,SPACE=4       FROM TO DAY YEAR
         SPECIAL   ISTPER,00000000,SPACE=3  IS THIS A TPER REC  XL03145
         SPECIAL   ISLOG,00000000,SPACE=3
         SUM   SNB02                             ADD TO BUS OUT PARITY
         SPECIAL   EQUIP,00000000,SPACE=4        GO CHECK FOR
*                                                EQUIPMENT CHECK IF ON
*                                                IS IT CONTROL UNIT
*                                                       PERMANENT OR
*                                                       TEMPORARY
*                                                OR IS IT DRIVE
*                                                       PERMANENT OR
*                                                       TEMPORARY
*                                                AND ADD TO COUNTERS
         SPECIAL   DATACKP,00000000,SPACE=1      GO ADD TO DATA CHK PRM
         SUM   SNB05                             ADD TO OVERRN COUNTER
         SUM   SNB11                             ADD TO INV TRK FMT CNT
ENDLOG   EQU   *                                               @Z40NIVS
         SPECIAL RESTOR,00000000,SPACE=0                       @Z40NIVS
         SPECIAL TFAULT0,0,SPACE=21 SUM FOR SYMPTOM            @Z427VLS
         DC    XL1'FF'                                         @Z40NIVS
         DS    0H
DOVOL    EQU   *
         SPECIAL TVOLID,0,SPACE=15 LOOK FOR CORRECT            @Z40NIVS
         SPECIAL RESTOR,00000000,SPACE=0                       @Z40NIVS
         DC    XL1'FF'                           VOL ID AND ADD T
*                                                APPROPRIATE COUNTERS
PEDIT    DS    0F
*
&DSECT   SETC  'T3330'
&CSECT   SETC  'PEDIT'
         USING *,R9
         USING T3330,R2
         DC    A(PENTRY)
         DC    C'IFCS3330'
YR9PTR   DS    F
YLABEL   DS    F
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING DSECT DESCRIBES COUNTERS USED TO TOTAL         *
*        INCIDENTS PERTAINING TO ANY ONE PHYSICAL ADDRESS.            *
**       INDIVIDUAL ENTRIES ARE MADE FOR UP TO 50 VOLUME LABELS       *
**       AFTER 50,THE REMAINING ARE COMPILED IN THE 51ST ENTRY.       *
**       ALSO, IN THE 51ST ENTRY THERE ARE COUNTERS FOR TWO AND       *
*        FOUR CHANNEL SWITCHES IF A HEX'80' IS FOUND IN BYTE 18       *
*        OF THE INPUT RECORD,COUNTS ARE MADE FOR CHANNEL 'C' AND 'D'.*
*        IF A HEX'00' IS FOUND,COUNTS ARE KEPT FOR CHNL 'A' AND 'B'. *
*                                                                     *
***********************************************************************
T3330    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (TDAY1,32),(TDAY2,32)
T3330A   DSGEN (TSTAT,16),(TYPDEV,32),(TDACHKC,16)             @Z40NIVS
         DSGEN (TDACHKR,16),(TSKCHK,16)
         DSGEN (TBUSOPA,16),(TEQCNT,16)
         DSGEN (TEQCNP,16),(TEQDRT,16)
         DSGEN (TEQDRP,16),(TDATCHP,16)
         DSGEN (TOVERRN,16),(TINVTRKF,16),(TCUA,16)            @Z40NIVS
         DSGEN (LCUA,16)           ENTRY FOR LOGICAL UNIT      @Z40RIVS
         DSGEN (SUMREC,512,0,31)                               @Z427VLS
**                                                             @Z40RIVS
**       SUM COUNTERS FOR VOLID SUMMARY                        @Z40RIVS
**                                                             @Z40RIVS
T3330B   DSGEN (TVOLID1,48),(TSEEK1,32)                        @Z40RIVS
         DSGEN (TSEEKER1,16),(TBTRDO1,16)
         DSGEN (TBYTRD1,32),(TUNCRD1,32)
         DSGEN (TCORRD1,32),(TVCUA,16),(TLVCUA,16)             @Z40RIVS
         DSGEN (TVOLID,240,2,51)                               @Z427VLS
         DSGEN (TOCACA,16)         CNTR FOR 'A' CMD            @Z40NIVS
         DSGEN (TOCADA,16),(TOCBCA,16) 'A' DATA AND CHNL 'B' CMD Y01124
         DSGEN (TOCBDA,16),(TOCCCA,16) 'B' DATA AND CHNL 'C' CMD Y01124
         DSGEN (TOCCDA,16),(TOCDCA,16) 'C' DATA AND CHNL 'D' CMD Y01124
         DSGEN (TOCDDA,16)             CNTR FOR 'D' DATA
         SPACE
*                                                              @Z40NIVS
*        SUM COUNTERS FOR FAULT SYMPTOM SUMMARY                @Z40NIVS
*                                                              @Z40NIVS
FLTSYM0  DSGEN (SYMCD,16),(SYMCUA,16)                          @Z40NIVS
         DSGEN (SYMOCR,32)                                     @Z40NIVS
         DSGEN (SYMDAY,32),(SYMHR,32),(SYMLCUA,16)             @Z40RIVS
         DSGEN (SYMSNS0,48),(SYMSNS1,48),(SYMSNS2,48),(SYMSNS3,48)
T3330C   DSGEN (FLTSYM,336,1,50)                               @Z427VLS
*                                                              @Z40NIVS
*        THE FOLLOWING EQUATES ARE FOR DISPLACEMENTS FROM THE  @Z40NIVS
*        FIRST VOL SER COUNTERS TO THE CHANNEL OVERRUN COUNTERS@Z40NIVS
*                                                              @Z40NIVS
ABCNTR   EQU   TOCACA-TVOLID1      DIS TO A/B COUNTERS         @Z40NIVS
CDCNTR   EQU   TOCCCA-TVOLID1      DIS TO C/D COUNTERS         @Z40NIVS
         SPACE 1                                               @Z40NIVS
IFCS3330 CSECT                                                 @Z40NIVS
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
         SPACE
MOVDEV   STM   R5,R8,XSAVE             SAVE REGS
         LA    R5,DEVTABLE             LOAD ADDR OF DEVICE TAB  XL03145
         LA    R6,L2                   LOAD # OF POSSIBLE DEV   XL03145
         TM    L0(R4),H90              DO THE COUNTS REPRESENT  XL03145
*                                       TPER RECORDS            XL03145
         BO    TDEVCHK                 YES - BR TO FIND DEV TYP XL03145
         SPACE
ODEVCHK  CLC   L1(L2,R4),L0(R5)        IS DEV SUPPORTED         XL03145
         BE    DEVFND                  YES - BR TO MOVE DEV TYP XL03145
         LA    R5,L10(R5)              BUMP PTR TO NXT TYP      XL03145
         BCT   R6,ODEVCHK              BR TO CHECK NXT TYP      XL03145
         B     MOVEUNKN                BR - DEVICE IS UNKNOWN   XL03145
         SPACE
TDEVCHK  CLC   L1(L1,R4),L2(R5)        IS DEV SUPPORTED         XL03145
         BE    DEVFND                  YES - BR TO MOVE DEV TYP XL03145
         LA    R5,L10(R5)              BUMP PTR TO NXT TYP      XL03145
         BCT   R6,TDEVCHK              BR TO CHK NXT RECORD ID  XL03145
*                                                               XL03145
         SPACE
*      DEVICE IS NOT SUPPORTED MOVE 'UNKNOWN' TO PRINT LINE
MOVEUNKN MVC   L8(L7,R3),UNKNOWN       MOVE 'UNKNOWN' TO PRINT  XL03145
**
**       RESTORE REGISTERS USED BY ROUTINES IN THIS MODULE
**
RETURN   LM    R5,R8,XSAVE         RESTORE REGS
SKIPPER  BR    R14
         SPACE
DEVFND   MVC   L8(L7,R3),L3(R5)        MOVE DEVICE TYPE TO      XL03145
*                                       PRINT LINE              XL03145
         B     RETURN                  RETURN                   XL03145
         SPACE 2
*
*        CHECK FOR CPU AND SERIAL NUMBER
*
SETCPUNO STM   R5,R8,XSAVE             SAVE REGS                 S21926
         SR    R5,R5                   CLEAR REG 5               S21926
         IC    R5,L0(R4)               PICK UP MODEL NUMBER      S21926
         SLL   R5,L8                    INTO                     S21926
         IC    R5,L1(R4)               R5                        S21926
         LTR   R5,R5                   TEST FOR ZERO             S21926
         BNZ   RETURN                  RETURN                    S21926
         LR    R5,R3                   PUT LINE ADDRESS IN R5    S21926
         LA    R6,L46                  OFFSET IN REG 6           S21926
         SR    R5,R6                   SUBTRACT OFFSET FROM POINTER
         MVC   L0(L6,R5),SHARED        PUT IN SHARED           @Z427VLS
         B     RETURN                  RETURN
*
*        SET THE DATE READY FOR PRINT
*
SETDATE  UNPK  XSAVE(L8),L1(L3,R4)     UNPACK THE DATE
         MVC   L0(L3,R3),XSAVE+L5      MOVE DAY
         MVC   L6(L2,R3),XSAVE+L3      MOVE YEAR
         BR    R14
*
*        CONVERT COUNTERS FROM HEX TO DECIMAL READY FOR PRINT
*
CONV1    STM   R5,R8,XSAVE             SAVE REGISTERS
         XC    READYP(L8),READYP       CLEAR UNPACK BUFFER
         SR    R6,R6                   ZERO REG
         LH    R6,L0(R4)               LOAD DATA TO BE CONVERTED
CONV2    CVD   R6,READYP               CONVERT ERRORCNTRTO DECI
         UNPK  READYP(L5),READYP+L5(L3)  UNPACK DECI COUNT
         OI    READYP+L4,CLRSGN        CLEAR SIGN
         MVC   L0(L4,R3),READYP+L1     MOVE COUNTER READY TO PRINT
         B     RETURN
*
*
PRVOLS   STM   R4,R8,XSAVEV
         L     R4,CNTDN2           LOAD ADDR OF NEXT VOLREC    @Z40NIVS
         LR    R5,R3
         CLC   L0(L6,R4),ZEROS
         BE    NORETVOL
*
         MVC   L0(L6,R5),L0(R4)        MOVE INTO PRINT VOLID
         LA    R5,L13(R5)          INCRE PRNT LINE PNTR        @Z40NIVS
         IC    R6,L27(R4)          PICK UP DEVICE ADDR         @Z40NIVS
         SLL   R6,L28              SHIFT OUT GARBAGE           @Z40NIVS
         SRL   R6,L28              SHIFT UNIT TO LOW ORDER     @Z40NIVS
         LA    R6,CHARS(R6)        PICK UP ADDRESS OF CHAR     @Z40NIVS
         MVC   L0(L2,R5),CUANR+ONE GET CHAN AND CU             @Z40NIVS
         MVC   L2(L1,R5),L0(R6)    GET UNIT NUMBER             @Z40NIVS
         LA    R4,L6(R4)               POINT TO TOTAL SEEKS
         LA    R5,L13(R5)
         ICM   R6,L15,L0(R4)       LOAD SEEKS
         SRL   R6,L10                  REDUCE TO 'X1000'
         L     R7,TOTSKS               LOAD TOTAL SEEKS
         AR    R7,R6                   ADD THIS CNT TO TOTAL
         ST    R7,TOTSKS               SAVE TOTAL
         BAL   R8,CONVH3               PUT SEEKS IN PRINT LINE
*
         LA    R4,L4(R4)               BUMP CNTR PTR
         SR    R6,R6
         SPACE
         LH    R6,L0(R4)               LOAD SEEK ERRS
         LH    R7,TOTSKERS             LOAD TOTAL SEEK ERRS
         AR    R7,R6                   ADD THIS VOL TO TOTAL
         STH   R7,TOTSKERS             SAVE NEW TOTAL
         BAL   R8,CONVH2               PUT SEEK ERRS IN PRINT
*
         LA    R4,L2(R4)               BUMP CNTR PTR
         SPACE 1                                               @Z40NIVS
         ICM   R6,L15,L2(R4)       LOAD BYTES READ
         L     R7,TOTMEGRD             LOAD TOTAL
         AR    R7,R6                   ADD THIS VOL TO TOTAL
         ST    R7,TOTMEGRD             SAVE NEW TOTAL
         ST    R6,SAVMEG               SAVE MEG READ
         BAL   R8,CONVH2               PUT MEG READ IN PRINT
*
         LA    R4,L6(R4)               BUMP CNTR PTR
         SPACE
         ICM   R6,L15,L0(R4)       LOAD COUNT
         BAL   R8,CONVH2               PUT COUNT IN PRINT
         LTR   R6,R6                   ANY COUNT ??
         BNZ   GETRETRD                YES - BR
*
         MVC   L13(L5,R5),NA           PUT N/A FOR MEG RD/R.ERR
         LA    R5,L13(R5)              BUMP PRINT POS PTR
         B     CHKCORRD                BR TO PROCESS CORR READ
*
GETRETRD DS    0H
         L     R7,TOTRETRD             LOAD TOTAL RETRY READ ER
         AR    R7,R6                   ADD THIS VOL CNT TO TOT
         ST    R7,TOTRETRD             SAVE TOTAL
*
         L     R7,SAVMEG               LOAD MEG READ
         LR    R8,R6                   LOAD RETRY READ ERRS
         SR    R6,R6                   CLEAR REG
         DR    R6,R8                   DIVIDE MEG READ/RET RD
         LR    R6,R7                   LOAD QUOTIENT
         BAL   R8,CONVH2               PUT RESULT IN PRINT
         SPACE
CHKCORRD DS    0H
         LA    R4,L4(R4)               BUMP CNTR PTR
         ICM   R6,L15,L0(R4)       LOAD CORR RD ERRORS
         BAL   R8,CONVH2               COUNT TO PRINT
         LTR   R6,R6                   WAS COUNT ZERO ?
         BNZ   GETCORRD                NO - BR TO HANDLE
*
         MVC   L13(L5,R5),NA           MOVE N/A FOR MEG/CORR RD
         B     RETVOL                  BR TO RETURN
*
GETCORRD DS    0H
         L     R7,TOTCORRD             LOAD TOTAL SO FAR
         AR    R7,R6                   ADD THIS VOL TO TOTAL
         ST    R7,TOTCORRD             SAVE NEW TOTAL
*
         L     R7,SAVMEG               LOAD MEG READ
         LR    R8,R6                   LOAD CORR READ ERRS
         SR    R6,R6                   CLEAR REG
         DR    R6,R8                   DIVIDE MEG READ/COR RD
         LR    R6,R7                   LOAD QUOTIENT
         BAL   R8,CONVH2               PUT IN PRINT LINE
         B     RETVOL                  BR TO RETURN
         SPACE 2
CONVH2   DS    0H
         LA    R5,L13(R5)              BUMP PRINT POS PTR
CONVH3   XC    READYP(L8),READYP
         CVD   R6,READYP
         UNPK  READYP(L5),READYP+L5(L3)
         OI    READYP+L4,CLRSGN
         MVC   L0(L5,R5),READYP
         BR    R8
*
*
         EJECT
*
*      THE FOLLOWING INITIALIZES THE TOTALS FOR THE VOLID SUMMARY
*
GETTOTS  DS    0H
         STM   R4,R8,XSAVEV            SAVE REGS
         LR    R5,R3                   LOAD PRINT POS PTR
         SPACE
         L     R6,TOTSKS               LOAD TOTAL SEEKS
         BAL   R8,CONVH3               PUT IN PRINT LINE
         SPACE
         LH    R6,TOTSKERS             LOAD TOTAL SEEK ERRORS
         BAL   R8,CONVH2               PUT IN PRINT LINE
         SPACE
         L     R6,TOTMEGRD             LOAD TOTAL MEG. READ
         BAL   R8,CONVH2               PUT IN PRINT LINE
         SPACE
         L     R6,TOTRETRD             LOAD TOTAL RETRY READ ERS
         BAL   R8,CONVH2               PUT IN PRINT LINE
         SPACE
         LTR   R6,R6                   WERE THERE RETRY RD ERRS
         BZ    NORETRD                 NO - BR
         L     R7,TOTMEGRD             LOAD TOTAL MEG READ
         LR    R8,R6                   LOAD RETRY READ ERRS
         SR    R6,R6                   CLEAR REG
         DR    R6,R8                   DIVIDE MEG RD/RET RD
         LR    R6,R7                   LOAD QUOTIENT
         BAL   R8,CONVH2               PUT IN PRINT LINE
         B     GETCRTOT                BR TO CONTINUE
*
NORETRD  DS    0H
         LA    R5,L13(R5)              BUMP PRINT POS PTR
         MVC   L0(L5,R5),NA            MOVE N/A TO PRINT LINE
         SPACE
GETCRTOT DS    0H
         L     R6,TOTCORRD             LOAD CORR READ ERR TOTAL
         BAL   R8,CONVH2               PUT IN PRINT LINE
         SPACE
         L     R8,TOTCORRD             LOAD CORR READ TOTAL
         LTR   R8,R8                   IS IT ZERO ?
         BZ    NOCORRD                 YES - BR
*
         L     R7,TOTMEGRD             LOAD MEG READ TOTAL
         SR    R6,R6                   CLEAR REG
         DR    R6,R8                   DIVIDE MEG RD/CORR RD
         LR    R6,R7                   LOAD QUOTIENT
         BAL   R8,CONVH2               PUT IN PRINT LINE
         B     CLRTOTS                 BR TO CONTINUE
*
NOCORRD  DS    0H
         MVC   L13(L5,R5),NA           MOVE N/A TO PRINT
         SPACE
CLRTOTS  DS    0H
         XC    TOTSKS(TLEN),TOTSKS     CLEAR ALL TOTAL AREAS
         B     RETVOL                  BR TO RETURN
         EJECT
GETABCDD STM   R4,R8,XSAVEV            SAVE REGS                 Y01124
         LR    R5,R3
         LA    R7,L4                   NO. OF POSSIBLE CHANNELS  Y01124
         SR    R6,R6               CLEAR R6                    @Z40RIVS
SETCHDTA ICM   R6,L3,L0(R4)        MOVE IN NO. OF DATA OVERRUN
         BAL   R8,CONVH3
*
         LA    R4,L4(R4)               BUMP PNTR TO NEXT DTA CTR Y01124
         LA    R5,L29(R5)              BUMP PNTR TO NEXT PRNT POSY01124
         BCT   R7,SETCHDTA             BRANCH IF THERE ARE MORE  Y01124
*
RETVOL   LM    R4,R8,XSAVEV
         BR    R14
*                                                              @Z40NIVS
NORETVOL LM    R4,R8,XSAVEV                                    @Z40NIVS
         SR    R15,R15                                         @Z40NIVS
         BR    R14                                             @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO SAVE CHANEL AND CONTROL UNIT FOR SUBSYSTEM @Z40NIVS
*                                                              @Z40NIVS
CUAN0    STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L10              LOAD DECREMENT FOR R3       @Z40NIVS
         SR    R3,R5               PNT TO START OF PRNT LI     @Z40NIVS
         MVC   CUANR+ONE(L3),L1(R3) MOVE CHANEL AND CU         @Z40NIVS
         SR    R15,R15             CLR FOR NO PRINT            @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*        SORT FOR VOLID TO PUT HIGHEST ERROR RATE  FIRST       @Z40NIVS
*                                                              @Z40NIVS
SORTV0   STM   R5,R8,XSAVE         SAVE WORK REG               @Z40NIVS
         ST    R4,SRTSAV           SAVE REG 4                  @Z40NIVS
         ST    R4,CNTDN2           SAVE VOL PNTR FOR PRT       @Z40NIVS
SORTV1   SR    R8,R8               CLR REG 8 FOR SWITCH        @Z40NIVS
         L     R4,SRTSAV           SET 4 TO START OF SUM       @Z40NIVS
         LA    R5,L30(R4)          SET 5 TO NEXT REC           @Z40RIVS
         LA    R7,L49              SET 7 TO NO.REC-1           @Z40NIVS
SORTV2   CLC   L0(L6,R5),ZEROS     IS THERE A VOLID            @Z40NIVS
         BE    SORTV4              NO BR TO TEST SW            @Z40NIVS
         CLC   L12(L2,R4),L12(R5)  TEST FOR HIGH COUNT         @Z40NIVS
         BNH   SORTV3              BRCH IF HIGH REC FIRST      @Z40NIVS
         LA    R8,L15              SET MOVE SWITCH             @Z40NIVS
         XC    L0(L30,R4),L0(R5)   RECORD                      @Z40RIVS
         XC    L0(L30,R5),L0(R4)   SWAP                        @Z40RIVS
         XC    L0(L30,R4),L0(R5)   FOR SORT                    @Z40RIVS
SORTV3   LA    R4,L30(R4)          POINT TO NEXT REC           @Z40RIVS
         LA    R5,L30(R5)          POINT TO NEXT REC+1         @Z40RIVS
         BCT   R7,SORTV2           MORE TO TEST                @Z40NIVS
SORTV4   LTR   R8,R8               TEST PASS SWITCH            @Z40NIVS
         BZ    RETURN              ALL REC TESTED/MOVED        @Z40NIVS
         B     SORTV1              CONTINUE TO TEST/MOVE       @Z40NIVS
*                                                              @Z40NIVS
**  ROUTINE TO PRINT 50 VOLID SUM ENTRIES                      @Z40NIVS
*                                                              @Z40NIVS
CNTDN0   STM   R5,R8,XSAVE         SAVE THE REGS               @Z40NIVS
         SR    R5,R5               CLEAR REG                   @Z40NIVS
         L     R5,CNTDN3           LOAD WITH 50                @Z40NIVS
         BCT   R5,CNTDN1           BRANCH FOR 50               @Z40NIVS
CNTDN5   SR    R15,R15             CLEAR FOR NO PRINT          @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
CNTDN1   ST    R5,CNTDN3           SAVE R 5                    @Z40NIVS
         L     R5,CNTDN2           GET CNTDN VALUE             @Z40NIVS
         LA    R5,L30(R5)          INCREMENT BY 30             @Z40RIVS
         CLC   L0(L6,R5),ZEROS     TESTFOR VOLID EQ ZERO       @Z40NIVS
         BE    CNTDN5              BRANCH NONE TO PRNT         @Z40NIVS
         ST    R5,CNTDN2           PUT IT BACK                 @Z40NIVS
         LA    R5,SUMTA3-4         GET LINE ADDRESS            @Z40NIVS
         L     R6,ASUMTA4          GET LABEL ADDRESS           @Z40NIVS
         STM   R5,R6,YR9PTR        MAKE THEM CURRENT           @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
         SPACE 1                                               @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO DETERMINE IF NECESSARY TO EDIT FLTYSYM     @Z40NIVS
*                                                              @Z40NIVS
FLTTST0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R4,L42(R4)          INCREMENT TO FIRST REC      @Z427VLS
         CLC   L0(L4,R4),ZEROS     ARE SYM AND CUA ZERO        @Z40NIVS
         BNE   FLTTST1             NO CONTINUE                 @Z40NIVS
         LA    R7,SUMTAC-4         YES, PICK UP NEW LINE       @Z40NIVS
         L     R8,ASUMTAD          AND LABEL ADDRESSES         @Z40NIVS
         STM   R7,R8,YR9PTR        TO START FROM               @Z40NIVS
FLTTST1  B     RETURN              RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*       ROUTINE FOR SORTING THE FAULT SYMPTOM ENTERIES         @Z40NIVS
*                                                              @Z40NIVS
FLTSRT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         ST    R4,FLTSRT8          SAVE PNTR TO EDIT AREA      @Z40NIVS
         SR    R6,R6               CLEAR FOR SW                @Z40NIVS
FLTSRT1  LA    R4,L42(R4)          INCREMENT TO FIRST REC      @Z427VLS
         SR    R7,R7               CLR MOVE SWITCH             @Z40NIVS
         LA    R8,L50              SET R8 TO NUM REC           @Z40NIVS
FLTSRT2  CLC   L44(L2,R4),ZEROS    IS DEV ADDR ZERO            @Z427VLS
         BE    FLTSRT6             END REC AREA                @Z40NIVS
         LTR   R6,R6               IS THIS FIRST SORT          @Z40RIVS
         BZ    FLTSRT3             YES GO TO CUA SORT          @Z40RIVS
         CLC   L0(L2,R4),L42(R4)   COMPARE SYM CODE            @Z427VLS
         BNH   FLTSRT4             BRCH IF ASCENDING           @Z40RIVS
         B     FLTSRT35            DECENDING GO SWAP           @Z40RIVS
FLTSRT3  CLC   L2(L2,R4),L44(R4)   COMP CUA/SYM                @Z427VLS
         BNH   FLTSRT4             BRCH IF ASCENDING ORDER     @Z40RIVS
FLTSRT35 XC    L0(L42,R4),L42(R4)  SWAP REC                    @Z40RIVS
         XC    L42(L42,R4),L0(R4)  PUT IN ASCENDING            @Z40RIVS
         XC    L0(L42,R4),L42(R4)  ORDER                       @Z40RIVS
         LA    R7,L15              TURN MOVE SWITCH ON         @Z40RIVS
FLTSRT4  LA    R4,L42(R4)          INCREMENT FOR NEXT TEST     @Z427VLS
         BCT   R8,FLTSRT2          GO MAX 50 PASSES            @Z40RIVS
FLTSRT6  LTR   R7,R7               MOVE SWITCH SET             @Z40RIVS
         BZ    FLTSRT7             GO TO END                   @Z40RIVS
         L     R4,FLTSRT8          RESET R4 TO START           @Z40RIVS
         B     FLTSRT1             GO CYCLE ONCE MORE          @Z40RIVS
FLTSRT7  L     R4,FLTSRT8          NO RESTORE R4               @Z40RIVS
         LTR   R6,R6               IS THIS FIRST SORT          @Z40RIVS
         BNZ   FLTSRT9             NO  GO TO COMPLETION        @Z40RIVS
         LA    R6,L15              YES SET SORT SWITCH         @Z40RIVS
         B     FLTSRT1             SORT ON SYM CODE            @Z40RIVS
FLTSRT9  MVC   L0(L42,R4),L42(R4)  MOVE FIRST REC TO EDIT      @Z427VLS
         LA    R4,L42(R4)          INCREMENT R4 BY REC LENGTH  @Z427VLS
         ST    R4,FLTMOV2          KEEP USE BY MOVE RTNE       @Z40RIVS
         LA    R6,L48              SET REG 6 TO NUM REC        @Z40RIVS
         ST    R6,FLTMOV6          KEEP USE BY MOVE RTNE       @Z40RIVS
         B     RETURN                                          @Z40RIVS
         SPACE 1                                               @Z40RIVS
**                                                             @Z40RIVS
**       ROUTINE TO MOVE NEXT REC FROM SUM AREA TO EDIT AREA TO PRINT
**                                                             @Z40RIVS
FLTMOV0  STM   R5,R8,XSAVE         SAVE WORK REG               @Z40RIVS
         L     R5,FLTMOV2          PICK UP PNTR LAST REC       @Z40RIVS
         LA    R5,L42(R5)          POINT TO NEW REC            @Z427VLS
         ST    R5,FLTMOV2          SAVE PNTR                   @Z40RIVS
         CLC   L2(L2,R5),ZEROS     IS REC EQ ZERO              @Z40RIVS
         BE    FLTMOV3             BRNCH PREPARE NEW EDIT      @Z40RIVS
FLTMOV1  MVC   L0(L42,R4),L0(R5)   MOVE NEW REC TO EDIT        @Z427VLS
         LA    R7,SUMTA7-L4        BACK UP LINE AND            @Z40RIVS
         L     R8,ASUMTA8          LABEL POINTER TO            @Z40RIVS
         STM   R7,R8,YR9PTR        PRINT NEXT REC              @Z40RIVS
         L     R6,FLTMOV6          SET R6 TO NUM REC T         @Z40RIVS
         BCT   R6,FLTMOV7          REDUCE COUNT BY ONE         @Z40RIVS
         B     FLTMOV3             END FIRST SECTION           @Z40RIVS
FLTMOV7  ST    R6,FLTMOV6          SAVE NUM REC REMAIN         @Z40RIVS
         SR    R15,R15             CLR FOR NO PRINT            @Z40RIVS
FLTMOV3  B     RETURN              GO PRINT NEXT RECORD        @Z40RIVS
         EJECT                                                 @Z40RIVS
**                                                             @Z40RIVS
**       EDIT CYCLE TO PRINT 16 SUM COUNTERS                   @Z40RIVS
**                                                             @Z40RIVS
EDTFA0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40RIVS
         L     R7,EDTFA4           GET COUNTER                 @Z40RIVS
EDTFA1   L     R5,EDTFA5           PICK UP LAST PRT            @Z40RIVS
         LA    R5,L32(R5)          INCREMENT TO NEXT           @Z40RIVS
         ST    R5,EDTFA5           SAVE LAST REC PRT           @Z40RIVS
         OC    L28(L2,R5),L28(R5)  TEST CUA                    @Z40RIVS
         BNZ   EDTFA2              BRCH IF NO REC INFO         @Z40RIVS
         BCT   R7,EDTFA1           REDUCE REC CNTR             @Z40RIVS
         B     RETURN              RETURN                      @Z40RIVS
EDTFA2   BCT   R7,EDTFA3           REDUCE REC CNTR             @Z40RIVS
         B     RETURN              RETURN                      @Z40RIVS
EDTFA3   MVC   L0(L32,R4),L0(R5)   MOVE REC TO PRNT            @Z40RIVS
         ST    R7,EDTFA4           SAVE REC NO                 @Z40RIVS
         LA    R7,SUMTA1-L4        LOAD LINE ADDR-4            @Z40RIVS
         L     R8,ASUMTA2          LABEL POINTER TO ADDR-1     @Z40RIVS
         STM   R7,R8,YR9PTR        STORE NEW PNTR              @Z40RIVS
         SR    R15,R15             CLEAR FOR NO PRNT           @Z40RIVS
         B     RETURN              RETURN                      @Z40RIVS
EDTFA6   STM   R5,R8,XSAVE         SAVE WORK REG               @Z40RIVS
         L     R7,EDTFA4           PICK UP NO. REC T           @Z40RIVS
         LR    R5,R4               LOAD SUM AREA PNTR          @Z40RIVS
EDTFA7   LA    R5,L32(R5)          INCRM TO REC AREA           @Z40RIVS
         ST    R5,EDTFA5           SAVE PNTR                   @Z40RIVS
         OC    L28(L2,R5),L28(R5)  TEST FOR CUA                @Z40RIVS
         BNZ   EDTFA8              GO MOVE REC                 @Z40RIVS
         BCT   R7,EDTFA7           NO CUA TEST NEXT REC        @Z40RIVS
         LA    R7,L1               NO REC SET R7 TO ONE        @Z40RIVS
         ST    R7,EDTFA4           STORE TO PRNT ZERO          @Z40RIVS
         ST    R4,EDTFA5           SET TO START OF SUM AREA    @Z40RIVS
         B     RETURN              NO REC                      @Z40RIVS
EDTFA8   ST    R7,EDTFA4           SET TO NO. REC T            @Z40RIVS
         MVC   L0(L32,R4),L0(R5)   MOVE FIRST REC TO PRNT      @Z40RIVS
         B     RETURN                                          @Z40RIVS
**                                                             @Z40RIVS
**       ROUTINES TO INCREMENT OR DECREMENT PRNT LINE PNTR     @Z40RIVS
**                                                             @Z40RIVS
REPNT0   BCTR  R3,R0               REDUCE PRNT LINE PNTR       @Z40RIVS
         BR    R14                 RETURN                      @Z40RIVS
REPNT1   LA    R4,L4               SET REG4 TO FOUR            @Z40RIVS
         SR    R3,R4               REDUCE PRNT LINE PNTR       @Z40RIVS
         BR    R14                 RETURN                      @Z40RIVS
REPNT2   LA    R4,L3               SET REG4 TO THREE           @Z40RIVS
         SR    R3,R4               REDUCE PRNT LINE PNTR       @Z40RIVS
         BR    R14                 RETURN                      @Z40RIVS
REPNT3   LA    R3,L15(R3)          INCR PRNT LINE PNTR +15     @Z40RIVS
         BR    R14                 RETURN                      @Z40RIVS
**                                                             @Z40RIVS
**       ROUTINE TO MOVE DATE TO FAULT SYMPTOM PRINTLINE       @Z40RIVS
**                                                             @Z40RIVS
FLTSYDA  UNPK  XSAVE(L8),L1(L3,R4) UNPACK THE DATE             @Z40RIVS
         MVC   L0(L3,R3),XSAVE+L5  MOVE JULIAN DATE            @Z40RIVS
         MVI   L3(R3),SLASH        MOVE SEPARATOR              @Z40RIVS
         MVC   L4(L2,R3),XSAVE+L3  MOVE YEAR                   @Z40RIVS
         LA    R4,L4               LOAD R4 WITH 4              @Z427VLS
         SR    R3,R4               REDUCE PRINT LINE PNTR      @Z40RIVS
         BR    R14                 RETURN                      @Z40RIVS
**                                                             @Z40RIVS
**       ROUTINE TO PREPARE TO CONVERT OCCUR COUNT TO PRINTABLE
**       FORMAT AND BLANK LEADING ZERO ON DEVICE ADDRESS FAULT SUM
**                                                             @Z40RIVS
GETOCCUR STM   R5,R8,XSAVE         SAVE WORK REG               @Z40RIVS
         LA    R5,L20              BLANK OUT                   @Z40RIVS
         LR    R6,R3               LEADING ZERO                @Z40RIVS
         SR    R6,R5               ON DEVICE                   @Z40NIVS
         MVI   L0(R6),BLANK        ADDRESS                     @Z40NIVS
         ICM   R6,L15,L0(R4)       LOAD CNT                    @Z40NIVS
         LR    R5,R3               SET PRINT LINE PNTR         @Z40NIVS
         BAL   R8,CONVH3           USE STANDARD ROUTINE        @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO REFORMAT TIME IN FAULT SYMPTOM OUTPUT      @Z40NIVS
*                                                              @Z40NIVS
HREDIT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L10              SET REG5 TO 10              @Z427VLS
         SR    R3,R5               DECR PRNT LINE PNTR         @Z40NIVS
         MVC   READYP(L6),L0(R3)   SAVE FORMATED OUTPUT        @Z40NIVS
         MVI   L0(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L1(L2,R3),READYP    MOVE MIN TO PRNT LINE       @Z40NIVS
         MVI   L3(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L4(L2,R3),READYP+TWO  MOVE SEC TO PRNT LINE     @Z40NIVS
         MVI   L6(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L7(L2,R3),READYP+FOUR  MOVE THOU TO PRNT LINE   @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO BLANK OUT LEADING ZERO ON DEVICE ADDR      @Z40NIVS
*                                                              @Z40NIVS
NOPRNTT  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L6               LOAD DECRMT INTO REG 5      @Z40NIVS
         LR    R6,R3               LOAD PRNT LINE INTO R6      @Z40NIVS
         SR    R6,R5               BACK UP PRNT LINE PNTR      @Z40NIVS
         MVI   L0(R6),BLANK        BLANK OUT ZERO              @Z40NIVS
         LA    R3,L2(R3)           INCREMENT LINE PNTR         @Z40RIVS
         B     RETURN              RETURN                      @Z40NIVS
*                                                              @Z40NIVS
*        ROUTINE TO CALCULATE MEGABYTES READ AND SETUP FIELD   @Z40NIVS
*        FOR SORT FOR THE VOLID SUMMATION                      @Z40NIVS
*                                                              @Z40NIVS
SETUP0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R8,L50              LOAD NO. OF SUM REC         @Z40NIVS
SETUP1   CLC   L0(L6,R4),ZEROS     IS VOLID ZERO               @Z40NIVS
         BE    SETUP5              GO TO RETURN                @Z40NIVS
         MVC   READYP(L4),L18(R4)  MOVE RETRY CNT              @Z40NIVS
         L     R5,READYP           LOAD RETRY COUNT            @Z40NIVS
         MVC   READYP+L2(L6),L12(R4) MOVE BYTES READ           @Z40NIVS
         LH    R6,READYP+L2        LOAD OVERFLOW BYTES         @Z40NIVS
         L     R7,READYP+L4        LOAD BYTES READ             @Z40NIVS
         SRDL  R6,L20              CONVERT TO MEGABYTES        @Z40NIVS
         ST    R7,SETUP7           SAVE FOR MOVE               @Z40NIVS
         MVC   L14(L4,R4),SETUP7   MOVE MEGABYTES TO REC       @Z40NIVS
         CR    R7,R5               COMPARE RETRY TO MEGA       @Z40NIVS
         BNL   SETUP2              MEGABYTES IS HIGH           @Z40NIVS
         MVC   L12(L2,R4),ZEROS    MOVE IN ZEROS               @Z40NIVS
         B     SETUP4              GO AGAIN                    @Z40NIVS
SETUP2   LTR   R5,R5               TEST FOR NO RETRY CNT       @Z40NIVS
         BZ    SETUP6              GO SET UP FOR SORT          @Z40NIVS
         SR    R6,R6               CLR REG 6 FOR DIV           @Z40NIVS
         DR    R6,R5               RETRY INTO MEGABYTES        @Z40NIVS
         ST    R7,SETUP7           SAVE MEGA/RETRY             @Z40NIVS
SETUP3   MVC   L12(L2,R4),SETUP7+L2 MOVE IN FOR SORT           @Z40NIVS
SETUP4   LA    R4,L30(R4)          INCREMENT TO NEXT REC       @Z40RIVS
         BCT   R8,SETUP1           DECREMENT REC CNT           @Z40NIVS
SETUP5   B     RETURN              RETURN                      @Z40NIVS
SETUP6   OI    SETUP7+L2,SORTFLG   SET UP FOR SORT             @Z40NIVS
         B     SETUP3              GO TO MOVE SORT FIELD       @Z40NIVS
*                                                              @Z40NIVS
*                                                              @Z40NIVS
THEEND   STM   R14,R12,L12(R13)        SAVE ALL REGS           @Z40NIVS
         LR    R12,R13                 SAVE THE SAVE ADDRESS   @Z40NIVS
         LA    R13,FSAVE               POINT TO MY SAVE        @Z40NIVS
         ST    R12,L4(R13)             SET CHAINING POINTERS   @Z40NIVS
         ST    R13,L8(R12)                                       S21926
         L     R3,L4(R2)               PICK UP POINTER TO NEXT COUNTER
         ST    R3,L28(R12)             SAVE POINTER IN REG SAVE  S21926
         LH    R0,SIZE                 PICK UP SIZE OF AREA      S21926
         LR    R1,R2                   SET ADDRESS               S21926
         FREEMAIN R,LV=(0),A=(1)                                 S21926
         LTR   R3,R3                   ANY MORE COUNTERS         S21926
         BZ    RETURNO                 NO RETURN                 S21926
         LA    R5,PENTRY+L10       POINT TO TOP ENTRY LESS 4
         LA    R6,LABELS-L1        POINT TO FIRST LABEL LESS 1
         STM   R5,R6,YR9PTR        STORE IT IN TABLE
RETURNO  L     R13,L4(R13)             PICK UP &                 S21926
         LM    R14,R12,L12(R13)        RESTORE REGS              S21926
         BR    R14
*
SIZE     DC    H'5776'                                         @Z427VLS
         DS    0D
XSAVE    DC    5F'0'
XSAVE1   EQU   XSAVE
XSAVEV   EQU   XSAVE
FSAVE    DS    18F
*
EMCUA1   DC    X'00'                                           @Z40RIVS
EMCUA    DC    H'0'                                            @Z40RIVS
RECTST4  DC    F'0'                                            @Z40NIVS
RECTSTS  DC    F'0'                                            @Z40NIVS
RECTSTP  DC    F'0'                                            @Z40NIVS
TFAULT7  DC    F'0'                                            @Z40NIVS
CUANR    DC    F'0'                SAVE AREA FOR CH-CU         @Z40NIVS
SRTSAV   DC    F'0'                SAVE FOR REG 4              @Z40NIVS
CNTDN2   DC    F'0'                                            @Z40NIVS
CNTDN3   DC    F'50'                                           @Z40NIVS
ASUMTA4  DC    A(SUMTA4-1)                                     @Z40NIVS
ASUMTAD  DC    A(SUMTAD-1)                                     @Z40NIVS
FLTSRT8  DC    F'0'                                            @Z40NIVS
ASUMTA8  DC    A(SUMTA8-1)                                     @Z40NIVS
FLTMOV2  DC    F'0'                                            @Z40NIVS
FLTMOV6  DC    F'0'                                            @Z40NIVS
ASUMTA2  DC    A(SUMTA2-1)                                     @Z40NIVS
EDTFA4   DC    F'64'               NUMBER OF COUNTERS          @Z40RIVS
EDTFA5   DC    F'0'                                            @Z40NIVS
SETUP7   DC    F'0'                SAVE AREA                   @Z40NIVS
         SPACE 2
TOTSKS   DC    F'0'
TOTMEGRD DC    F'0'
SAVMEG   DC    F'0'                    SAVE AREA FOR MEG READ
TOTRETRD DC    F'0'
TOTCORRD DC    F'0'
TOTSKERS DC    H'0'
*
TLEN     EQU   *-TOTSKS                LENGTH OF TOTALS AREA
         SPACE 2
ZEROS    DC    5F'0'
HEX00    EQU   ZEROS
NA       DC    C'-N/A-'                                        @Z40NIVS
SHARED   DC    C'SHARED'                                       @Z427VLS
UNKNOWN  DC    C'UNKNOWN'                                       XL03145
CHARS    DC    C'0123456789ABCDEF'
CHAR0    DC    C'0'
DEVTABLE DC    X'2009'                 DEVICE TYPE &            XL03145
         DC    X'01'                         REC ID FOR A       XL03145
         DC    C'3330   '                            MERLIN     XL03145
*
         DC    X'200D'                 DEVICE TYPE &            XL03145
         DC    X'0A'                         REC ID FOR AN      XL03145
         DC    C'3330   '                            ICEBERG   @Z40NIVS
         SPACE
         DS    0D
READYP   DC    D'0'                                            @Z40NIVS
PENTRY   DS    0F
         DC    X'0001001'
         DC    X'0001001'
         DC    A(LABELS)
         DC    H'0'
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER     INSURE EJECT                @Z40NIVS
         LABEL ''                                              @Z40NIVS
         DC    X'01'
         DC    X'000B8B00'
         LABEL ' '
         LINE  (61,23),(1,19),SKIP=2                           @Z40NIVS
         ROUTINE   TYPDEV,MOVDEV                                XL03145
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE   YCPU,SETCPUNO
         LABEL 'SUMMARY OF I/O RECO','RDS  TYPE OBR/MDR  ',    @Z40NIVSC
               'SOURCE-OUTBOARD   D',                          @Z40NIVSC
               'EVICE TYPE ',' MODEL-','SERIAL NO.-'           @Z40NIVS
*
         LINE  ,(13,13),SKIP=1
         ROUTINE   YDUMA,SKIPPER
         LABEL 'DAY YEAR','DAY YEAR'
         LINE  (13,13),(1,21),SKIP=2
         ROUTINE   TDAY1,SETDATE
         ROUTINE   TDAY2,SETDATE
         ROUTINE YDUMA,REPNT3                                  @Z40NIVS
         ROUTINE YNOREC,CONV1                                  @Z40NIVS
         LABEL 'DATE RANGE-','TO','TOTAL NUMBER OF RECORDS'    @Z40NIVS
*
         LINE  (1,1),(1,1),SKIP=1                              @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'UNIT          BUS OUT    EQUIP. CK.    EQUIP. CK.    DAC
               TA     OVERRN     INV.         LOGGING MODE        STATIC
               S-'                                             @Z40RIVS
         LINE  ,,SKIP=1                                        @Z40RIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'ADDRESS       PARITY        C.U.         DRIVE       CHC
               ECK               TRACK    DATA CHECK     SEEK     TICALC
                '                                              @Z40RIVS
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE TSTAT,EDTFA6                                  @Z40NIVS
SUMMAD0  LABEL 'PHYSICAL                 TEMP  PERM    TEMP  PERM    PEC
               RM                FMT.     CORR  RETRY    CHECK'
SUMTA1   LINE  (1,6),(1,1),SKIP=1                              @Z427VLS
         HEX   TCUA,0,2B           CONVERT ADDRESS             @Z40NIVS
         ROUTINE YDUMA,NOPRNTT     DON'T PRINT LEADING ZERO    @Z40NIVS
         ROUTINE TBUSOPA,CONV1     CONVERT BUS OUT PARITY      @Z40NIVS
         ROUTINE YDUMA,REPNT0      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TEQCNT,CONV1      CONVERT EQ CHK CU TEMP      @Z40NIVS
         ROUTINE TEQCNP,CONV1      CONVERT EQ CHK CU PERM      @Z40NIVS
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TEQDRT,CONV1      CONVERT EQ CHK DRV TEMP     @Z40NIVS
         ROUTINE TEQDRP,CONV1      CONVERT EQ CHK DRV PERM     @Z40NIVS
         ROUTINE YDUMA,REPNT1      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TDATCHP,CONV1     CONVERT DATA CHK PERM       @Z40NIVS
         ROUTINE YDUMA,REPNT2      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TOVERRN,CONV1     CONVERT OVERRUN             @Z40NIVS
         ROUTINE YDUMA,REPNT0      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TINVTRKF,CONV1    CONVERT INV TRK FORMAT      @Z40NIVS
         ROUTINE YDUMA,REPNT2      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TDACHKC,CONV1     CONVERT DATA CHK CORR       @Z40NIVS
         ROUTINE TDACHKR,CONV1     CONVERT DATA CHK RETRY      @Z40NIVS
         ROUTINE YDUMA,REPNT2      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TSKCHK,CONV1      CONVERT SK CHK COUNTER      @Z40NIVS
         ROUTINE YDUMA,REPNT2      ALTER PRNT LINE PNTR        @Z40NIVS
         ROUTINE TSTAT,CONV1       CONVERT STATISTICAL         @Z40NIVS
SUMTA2   LABEL ''                                              @Z40NIVS
         LINE  (1,6),(1,1),SKIP=1                              @Z427VLS
         ROUTINE TSTAT,EDTFA0      CYCLE THROUGH SUMREC        @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE SYMCD,FLTTST0                                 @Z40NIVS
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
SUMTA5   LINE  (61,23),(1,19),SKIP=2                           @Z40NIVS
         ROUTINE TYPDEV,MOVDEV                                 @Z40NIVS
         HEX   YCPU,0,2B                                       @Z40NIVS
         HEX   YSER,0,3B                                       @Z40NIVS
         ROUTINE YCPU,SETCPUNO                                 @Z40NIVS
SUMTA6   LABEL 'FAULT SYMPTOM CODE ','SUMMARY   TYPE-OBR ',    @Z40NIVSC
               ' SOURCE-OUTBOARD  D',                          @Z40RIVSC
               'EVICE TYPE',' MODEL-','SERIAL NO.-'            @Z30RIVS
         LINE  (61,23),(1,19),SKIP=2                           @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
SUMTAA   LABEL 'SEQUENCE BY SYMPTOM CODE'                      @Z40NIVS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'FAULT','UNIT   ','OCCURRENCES','  DATE/TIME ',,,       X
               'SENSE FROM L','AST OCCURREN','CE'              @Z427VLS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'SYMPTOM','ADDRESS ',,'  LAST ENTRY','           0',    X
               ' 0 0 0 0 0 0',' 0 0 0 1 1 1',' 1 1 1 1 1 1',   @Z427VLSX
               ' 1 2 2 2 2'                                    @Z427VLS
         LINE  ,,SKIP=1                                        @Z427VLS
         ROUTINE SYMCD,FLTSRT0                                 @Z40NIVS
SUMMAD1  LABEL 'CODE','PHYSICAL    ',,,'           0',' 1 2 3 4 5 6',  X
               ' 7 8 9 0 1 2',' 3 4 5 6 7 8',' 9 0 1 2 3'      @Z427VLS
SUMTA7   LINE  (1,12)                                          @Z427VLS
         HEX   SYMCD,0,2B                                      @Z40NIVS
         HEX   SYMCUA,0,,2B                                    @Z40NIVS
         ROUTINE SYMOCR,GETOCCUR                               @Z40NIVS
         ROUTINE SYMDAY,FLTSYDA                                @Z40NIVS
         HEX   SYMHR,0,4B          CONVERT TIME                @Z40NIVS
         ROUTINE YDUMA,HREDIT0     REFORMAT TIME FIELD         @Z40NIVS
         HEX   SYMSNS0,0,6B                                    @Z427VLS
         HEX   SYMSNS1,0,6B                                    @Z427VLS
         HEX   SYMSNS2,0,6B                                    @Z427VLS
         HEX   SYMSNS3,0,6B                                    @Z427VLS
SUMTA8   LABEL ''                                              @Z40NIVS
         LINE  (1,12)                                          @Z427VLS
         ROUTINE SYMCD,FLTMOV0                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1)                                          @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  IF SYMPTOM CODE IS 0 REFER TO DETAIL OBR RECORD'
SUMTAC   LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE   YDUMA,SKIPPER
SUMTAD   LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  (75,7),(1,63)                                   @Z40NIVS
         ROUTINE   TYPDEV,MOVDEV                                XL03145
         ROUTINE TVOLID1,SETUP0                                @Z40NIVS
         ROUTINE TVOLID1,SORTV0                                @Z40NIVS
         LABEL 'SUMMARY OF I/O STATISTICAL RECORDS BY VOLUME ID','DEVICC
               E TYPE'                                          XL03145
         LINE  (1,10),,SKIP=2                                  @Z40NIVS
         HEX   TVCUA,0,2B                                      @Z40NIVS
         ROUTINE YDUMA,CUAN0                                   @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(2,13),SKIP=1
         ROUTINE   YDUMA,SKIPPER
         LABEL 'VOLUME ID','UNIT    ','TOTAL','SEEK','TOTAL',  @Z40RIVSC
               'RETRY','MEGABYTES',                            @Z40NIVSC
               'CORRECTABLE','MEGABYTES'                       @Z40NIVS
         LINE
         ROUTINE   YDUMA,SKIPPER
         LABEL ,'ADDRESS','ACCESSES','ACCESS','MEGABYTES',     @Z40NIVSC
               'READ','READ/RETRY',                            @Z40NIVSC
               'READ','READ/CORR'                              @Z40NIVS
         LINE  ,,SKIP=2
         ROUTINE   YDUMA,SKIPPER
SUMMAD2  LABEL ,'PHYSICAL   ','X1024','ERRORS','READ','ERRORS',        C
               'ERRORS','ERRORS','ERRORS'                      @Z40RIVS
*
SUMTA3   LINE  (3,13),(1,1),SKIP=1                             @Z40NIVS
         ROUTINE   TVOLID1,PRVOLS
SUMTA4   LABEL ''                                              @Z40NIVS
         LINE
         ROUTINE TVOLID1,CNTDN0                                @Z40NIVS
          LABEL ' '
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE   YDUMA,SKIPPER
         LABEL ' '
         LINE  (29,13),(3,1),SKIP=2                            @Z40NIVS
         ROUTINE   YDUMA,GETTOTS
         LABEL 'TOTALS'
*
         LINE  ,(2,29),SKIP=1                                    Y01124
         ROUTINE   YDUMA,SKIPPER
         LABEL 'TOTAL OVERRUNS  CHNL A','TOTAL OVERRUNS CHNL  B','TOTALC
                OVERRUNS  CHNL C','TOTAL OVERRUNS  CHNL D'       Y01124
         LINE  (21,29),(12,29)                                   Y01124
         ROUTINE TOCACA,GETABCDD
         LABEL 'COMMAND','COMMAND','COMMAND','COMMAND'           Y01124
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE   TOCADA,GETABCDD                               Y01124
         LABEL 'DATA','DATA','DATA','DATA'                       Y01124
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1),SKIP=1                                   @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  VOLUME ID''S ARE LISTED IN ERROR RATE SEQUENCE SX
               TARTING WITH THE ONE WITH HIGHEST % OF RETRY READ ERRORSX
               '                                               @Z40NIVS
         LINE  ,(1,1),SKIP=1                                   @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  ZEROS IN MEGABYTES READ/XXXX ERROR COLUMNS INDICC
               ATE THAT THERE WAS LESS THAN ONE MEGABYTE READ PER ERRORC
               '                                               @Z40NIVS
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  N/A IS AN INDICATION OF EITHER NO RETRY READ ERRX
               ORS OR CORRECTABLE READ ERRORS IN THE RESPECTIVE COUNTERX
               S '                                             @Z40NIVS
         LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  ,(1,1)                                          @Z40NIVS
         ROUTINE YDUMA,THEEND                                  @Z40NIVS
         LABEL ' '                                             @Z40NIVS
         DC    X'FF'
         DC    XL2'0000'
         DC    XL2'0018'
         DC    XL2'0000'
*
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
