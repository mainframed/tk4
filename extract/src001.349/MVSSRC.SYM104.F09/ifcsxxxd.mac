         TITLE 'IFCSXXXD - SUMMARY TABLE - LINKNAME=IFCST002, ALIASES=IC
               FCST012,IFCS2305'
         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&DSECT   SETC  'S0002'
&CSECT   SETC  'IFCSXXXD'
***********************************************************************
*                                                                     *
*              THIS ENTIRE MODULE IS IN SUPPORT OF  S20201            *
*                                                                     *
***********************************************************************
IFCSXXXD CSECT
S0002    DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCH1,8),(SWITCH2,8)
         DSGEN (SPARE1,32)
         DSGEN (DATE,32)
         DSGEN (HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24)
         DSGEN (CPUID,16),(SPARE3,16)
         DSGEN (JOBID1,32)
         DSGEN (JOBID2,32)
         DSGEN (FCCWCC,8),(FCCWDA,24)
         DSGEN (FCCWFL,8),(FCCW,8),(FCCWCT,16)
         DSGEN (CSWUS1,8),(CSWUS2,24)
         DSGEN (CSWUS3,8),(CSWUS4,8),(CSWUS5,16)
         DSGEN (ECSW,32)
         DSGEN (DEVTYP1,16),(DEVTYP2,16)
         DSGEN (SPARE4,8),(CUA,24)
         DSGEN (IORET,24),(SBCNT,8)
         DSGEN (VOLLAB1,8),(VOLLAB2,16),(VOLLAB3,8)
         DSGEN (VOLLAB4,8),(VOLLAB5,8),(SPARE5,16)
         DSGEN (LSKAD1,8),(LSKAD2,16),(LSKAD3,8)
         DSGEN (LSKAD4,8),(LSKAD5,16),(LSKAD6,8)
         DSGEN (AHA1,32)
         DSGEN (AHA2,16),(SPARE6,16)
         DSGEN (SPARE7,16),(SPARE8,16)
         DS    6C
         DSGEN (SNB00,1),(SNB01,1),(SNB02,1),(SNB03,1),(SNB04,1),      C
               (SNB05,1),(SNB06,1),(SNB07,1),(SNB10,1),(SNB11,1),      C
               (SNB12,1),(SNB13,1),(SNB14,1),(SNB15,1),(SNB16,1),      C
               (SNB17,1),(SNB20,1),(SNB21,1),(SNB22,1),(SNB23,1),      C
               (SNB24,1),(SNB25,1),(SNB26,1),(SNB27,1),(SNB30,1),      C
               (SNB31,1),(SNB32,1),(SNB33,1),(SNB34,1),(SNB35,1),      C
               (SNB36,1),(SNB37,1)
         DSGEN (SNB40,1),(SNB41,1),(SNB42,1),(SNB43,1),(SNB44,1),      C
               (SNB45,1),(SNB46,1),(SNB47,1),(SNB50,1),(SNB51,1),      C
               (SNB52,1),(SNB53,1),(SNB54,1),(SNB55,1),(SNB56,1),      C
               (SNB57,1),(SNB60,1),(SNB61,1),(SNB62,1),(SNB63,1),      C
               (SNB64,1),(SNB65,1),(SNB66,1),(SNB67,1),(SNB70,1),      C
               (SNB71,1),(SNB72,1),(SNB73,1),(SNB74,1),(SNB75,1),      C
               (SNB76,1),(SNB77,1)
         DSGEN (SNB80,1),(SNB81,1),(SNB82,1),(SNB83,1),(SNB84,1),      C
               (SNB85,1),(SNB86,1),(SNB87,1),(SNB90,1),(SNB91,1),      C
               (SNB92,1),(SNB93,1),(SNB94,1),(SNB95,1),(SNB96,1),      C
               (SNB97,1),(SNB100,1),(SNB101,1),(SNB102,1),(SNB103,1),  C
               (SNB104,1),(SNB105,1),(SNB106,1),(SNB107,1),(SNB110,1), C
               (SNB111,1),(SNB112,1),(SNB113,1),(SNB114,1),(SNB115,1), C
               (SNB116,1),(SNB117,1)
         DSGEN (SNB120,1),(SNB121,1),(SNB122,1),(SNB123,1),(SNB124,1), C
               (SNB125,1),(SNB126,1),(SNB127,1),(SNB130,1),(SNB131,1), C
               (SNB132,1),(SNB133,1),(SNB134,1),(SNB135,1),(SNB136,1), C
               (SNB137,1),(SNB140,1),(SNB141,1),(SNB142,1),(SNB143,1), C
               (SNB144,1),(SNB145,1),(SNB146,1),(SNB147,1),(SNB150,1), C
               (SNB151,1),(SNB152,1),(SNB153,1),(SNB154,1),(SNB155,1), C
               (SNB156,1),(SNB157,1)
         DSGEN (SNB160,1),(SNB161,1),(SNB162,1),(SNB163,1),(SNB164,1), C
               (SNB165,1),(SNB166,1),(SNB167,1),(SNB170,1),(SNB171,1), C
               (SNB172,1),(SNB173,1),(SNB174,1),(SNB175,1),(SNB176,1), C
               (SNB177,1),(SNB180,1),(SNB181,1),(SNB182,1),(SNB183,1), C
               (SNB184,1),(SNB185,1),(SNB186,1),(SNB187,1),(SNB190,1), C
               (SNB191,1),(SNB192,1),(SNB193,1),(SNB194,1),(SNB195,1), C
               (SNB196,1),(SNB197,1)
         DSGEN (SNB200,1),(SNB201,1),(SNB202,1),(SNB203,1),(SNB204,1), C
               (SNB205,1),(SNB206,1),(SNB207,1),(SNB210,1),(SNB211,1), C
               (SNB212,1),(SNB213,1),(SNB214,1),(SNB215,1),(SNB216,1), C
               (SNB217,1),(SNB220,1),(SNB221,1),(SNB222,1),(SNB223,1), C
               (SNB224,1),(SNB225,1),(SNB226,1),(SNB227,1),(SNB230,1), C
               (SNB231,1),(SNB232,1),(SNB233,1),(SNB234,1),(SNB235,1), C
               (SNB236,1),(SNB237,1)
*
MYDSECT  DSECT
MPLFSCK  DS    1H                       MPL FILE SEEK CHECKS 0 AND 1
MPLFRCK  DS    1H                       MPL FILE READ CHECKS 0 AND 1
CTLUSR   DS    1H                       CTL UNIT SET RESET CTR 0 AND 1
MODEL    DS    1H                       MODEL NUMBER
DATACKS  DS    1H                       DATA CHECKS MODULE 0
EQUIPCK  DS    1H                       EQUIPMENT CHECKS MODULE 0
BUSOUTP  DS    1H                       BUSOUT PARITY CTR MODULE 0
ORCHANA  DS    1H                       OVERRUNS CHANNEL A MODULE 0
ORCHANB  DS    1H                       OVERRUNS CHANNEL B MODULE 0
MISSADM  DS    1H                       MISSING ADDR MARK MODULE 0
CORR     DS    1H
PERM     DS    1H
CURETRY  DS    1H                       CTL UNIT RETRIES MODULE 0
RETRYIN  DS    1H
BIG      DS    2H                       NO. OF GIGABYTES MODULE 0
TABLE    DS    46H                      DATA CHECK TABLE MODULE 0
TABADDR  DS    2H                       ADDR OF MODULE 0 TABLE ENTRY
MOD1OUX  DS    4H
DATACKS1 DS    1H                       DATA CHECKS MODULE 1
EQUIPCK1 DS    1H                       EQUIPMENT CHECKS MODULE 1
BUSOUTP1 DS    1H                       BUSOUT PARITY CTR MODULE 1
ORCHANA1 DS    1H                       OVERRUNS CHANNEL A MODULE 1
ORCHANB1 DS    1H                       OVERRUNS CHANNEL B MODULE 1
MISSADM1 DS    1H                       MISSING ADDR MARK MODULE 1
CORR1    DS    1H
PERM1    DS    1H
CURETRY1 DS    1H                       CTL UNIT RETIRES MODULE 1
RETRYIN1 DS    1H
BIG1     DS    2H                       NO. OF GIGABYTES MODULE 1
TABLE1   DS    46H                      DATA CHECK TABLE MODULE 1
TABADDR1 DS    2H                       ADDR FOR MODULE 1 TABLE ENTRY
TABDSECT DSECT
TABYTE0  DS    CL1
TABYTE1  DS    CL1
TABYTE2  DS    CL1
TABYTE3  DS    CL1
SPDSECT  DSECT
BYTE0    DS    CL1
BYTE1    DS    CL1
BYTE2    DS    CL1
BYTE3    DS    CL1
BYTE4    DS    CL1
BYTE5    DS    CL1
BYTE6    DS    CL1
BYTE7    DS    CL1
IFCSXXXD CSECT
         USING S0002,R2
         USING *,R9
         USING SPDSECT,R6
         USING MYDSECT,R5
         USING TABDSECT,R4
         DC    A(ENTRIES)
         DC    A(PEDIT)
REG8     DC    F'0'
SCSIZE   DC    H'280'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L10      EQU   10
L12      EQU   12
L13      EQU   13
L15      EQU   15
L18      EQU   18
L20      EQU   20
L25      EQU   25
L26      EQU   26
L28      EQU   28
L29      EQU   29
L30      EQU   30
L31      EQU   31
L32      EQU   32
L36      EQU   36
L41      EQU   41
L46      EQU   46
L52      EQU    52
L53      EQU   53
L9       EQU   9                                               @Z427VLS
L61      EQU   61                                              @Z427VLS
L64      EQU   64
L78      EQU   78
L82      EQU   82
L92      EQU   92
L106     EQU   106
L128     EQU   128
L136     EQU   136
L168     EQU   168
L172     EQU    172
L266     EQU   266
H00      EQU   X'00'
H01      EQU   X'01'
H02      EQU   X'02'
H03      EQU   X'03'
H04      EQU   X'04'
H07      EQU   X'07'
H08      EQU   X'08'
H0C      EQU   X'0C'
H0F      EQU   X'0F'
H10      EQU   X'10'
H1F      EQU   X'1F'
H20      EQU   X'20'
H30      EQU   X'30'
H40      EQU   X'40'
H60      EQU   X'60'
H80      EQU   X'80'
HC0      EQU   X'C0'
HE0      EQU   X'E0'
HFF      EQU   X'FF'
ONE      DC    C'1'
TWO      DC    C'2'
PERMCORR DC    C'0'
HEX00    DC    F'0'
ZEROA    DC    H'0'
MOVEIT   DS    F
XSAVE    DS    6F
XSAVEA   DC    F'0'
EOR      DC    F'0'
OBR0     DC    F'0'
FORTY    DC    H'40'
TWENTY   DC    H'20'
IF0      DC    F'0'                     IF MODULE 0 DSECT NEEDED
*
*        SPECIAL ROUTINES
*
XDATE1   STM   R4,R8,XSAVE              SAVE REGS
         LA    R5,L266(R3)              POINT TO MPL FILE SEEK CHECKS
         ST    R5,IF0                   STORE 5 IF MODUE 0 DEFAULT
         CLC   DATE(L4),HEX00           IS DATE ZERO
         BE    RECORDCK                 BR-ZERO
         CLC   L0(L4,R3),HEX00          IS LOW DATE ZERO
         BNE   XDATE2                   BR-NO
         MVC      L0(L4,R3),DATE                 MOVE IN DATE
XDATE2   CLC   DATE(L4),L0(R3)          CHECK FOR LOW DATE
         BL    SAVELOW                  LOWER SAVE IT
         CLC   DATE(L4),L4(R3)          CHECK FOR HI
         BNH   RECORDCK                 BR-NOT HI
SAVEHI   MVC   L4(L4,R3),DATE           MOVE HI DATE
         B     RECORDCK                 SEE WHAT TYPE RECORD
SAVELOW  MVC   L0(L4,R3),DATE           MOVE LOW DATE
         B     RECORDCK                 SEE WHAT TYPE RECORD
RECORDCK TM    CLASRC,H30               SEE IF IT IS AN OBR RECORD
         BO    OBRCKS                   BRANCH IF IT IS TO CHECK OBR
MODCHK   TM    SPARE1,H10             SEE IF MOD-1
         BO    MOD1                     BR-YES
         MVC   MODEL(L1),TWO            MOVE IN TWO
         B     AROUND                   BR-AROUND
MOD1     MVC   MODEL(L1),ONE            MOVE IN ONE
AROUND   LA    R6,L26(R2)               GET TO START OF RECORD SENSE
         LA     R7,L128(R6)             GET ADDR OF END OF RECORD
         ST    R7,EOR
AGAIN    L     R5,IF0                   LOAD AS IF MODULE 0
         TM    BYTE0,HE0                TEST FIRST THREE BITS
         BO    UDC                      BR IF 111
         TM    BYTE0,HC0                TEST FIRST THREE BITS
         BO    CDC                      BR IF 110
         TM    BYTE0,H60                TEST FIRST THREE BITS
         BO    MFC                      BR IF 011
         TM    BYTE0,H80                TEST FIRST THREE BITS
         BO    UOC                      BR IF 100
         TM    BYTE0,H20                TEST FIRST THREE BITS
         BO    CSR                      BR IF 001
TEST     LA    R6,L8(R6)                BUMP R4 UP 8 TO NEW ENTRY
         CL    R6,EOR                   COMPARE IT WITH END OF RECORD
         BL    AGAIN                    GO BACK IF LESS
         LA    R8,QUIT-L6
         ST    R8,REG8
         LM    R4,R8,XSAVE              RESTORE REGS IF NOT
         BR    R14                      GO BACK
MFC      SR    R7,R7                    CLEAR REG 7
         IC    R7,BYTE1                 GET READS AND SEEKS
         ST    R6,XSAVEA                STORE R6 TEMP.
         SR    R6,R6
         SLDL  R6,L28                   PUT READS IN 6
         SRL   R7,L28                   PUT SEEKS IN 7
         AH    R6,MPLFRCK               ADD TOTAL READ CHECKS
         AH    R7,MPLFSCK               ADD TOTAL SEEK CHECKS
         STH   R6,MPLFRCK               STORE TOTAL READ CHECKS
         STH   R7,MPLFSCK               STORE TOTAL SEEK&CHECKS
         L     R6,XSAVEA                RELOAD R6
         B     TEST                     GO TEST ANOTHER BLOCK
CSR      LA    R8,L1                    GET ONE IN R6
         AH    R8,CTLUSR                ADD TOTAL CTLUSR
         STH   R8,CTLUSR                STORE TOTAL RESET COUNT
         B     TEST                     GO TEST ANOTHER BLOCK
UOC      TM    BYTE0,H08                SEE IF MODULE 0
         BZ    MOD0                     BRANCH YES
         LA    R5,MOD1OUX               UPDATE PTR IF ON
MOD0     SR    R8,R8                    CLEAR REG 8
         IC    R8,BYTE1                 GET OVERRUN CHANNEL A
         AH    R8,ORCHANA               ADD TOTAL OVERRUN A
         STH   R8,ORCHANA               STORE TOTAL
         SR    R8,R8                    CLEAR REG 6
         IC    R8,BYTE2                 GET OVERRUN CHANNEL B
         AH    R8,ORCHANB               ADD TOTAL OVERRUN B
         STH   R8,ORCHANB               STORE TOTAL
         SR    R8,R8                    CLEAR REG6
         IC    R8,BYTE3                 GET MISSING AM
         AH    R8,MISSADM               ADD TOTAL MISSING AM'S
         STH   R8,MISSADM               STORE TOTAL
         MVC   MOVEIT(L4),BYTE4         GET BYTES READ ON FWB
         L     R8,MOVEIT                PUT IN REG 8
         SRL   R8,L10                   DIVIDE BY 1000
         MVC   MOVEIT(L4),BIG
         L     R7,MOVEIT
         AR    R8,R7
         ST    R8,MOVEIT
         MVC   BIG(L4),MOVEIT
         B     TEST                     GO TO TEST ROUTINE
CDC      EQU   *
UDC      TM    BYTE2,H08                SEE IF MODULE 0
         BZ    TABSAVE                  BRANCH YES
         LA    R5,MOD1OUX               UPDATE PTR IF ON
TABSAVE  L     R4,TABADDR               LOAD ADDRESS OF NEXT TABLE ENTY
         LTR   R4,R4                    TEST 4
         BNZ   ONWARD                   BRANCH IF SOMTHING IN 4
         LA    R4,TABLE                 LOAD INITIAL PTR INTO 4
ONWARD   LA    R8,L1                    GET 1 IN REG 8
         AH    R8,DATACKS               ADD TOTAL DATA CHECKS
         STH   R8,DATACKS               STORE TOTAL DATA CHECKS
         LA    R8,L1                    GET 1 IN REG 8
         AH    R8,CURETRY               ADD TOTAL CU TIMES
         STH   R8,CURETRY               STORE TOTAL
         CLC   TWENTY(L2),DATACKS       SEE IF MORE THAN 20 DATA CHECKS
         BL    TEST                     GO BACK IF MORE THAN 40
         MVC   TABYTE0(L1),BYTE0        PUT BYTE 0 IN TABLE BYTE 0
         MVC   TABYTE1(L1),BYTE3        PUT BYTE 3 IN TABLE BYTE 1
         MVC   TABYTE2(L1),BYTE4        PUT BYTE 4 IN TABLE BYTE 2
         MVC   TABYTE3(L1),BYTE5        PUT BYTE 5 IN TABLE BYTE 3
         LA    R4,L4(R4)                BUMP UP POINTER 4
         ST    R4,TABADDR               SAVE TABLE ENTRY ADDRESS
         B     TEST                     GO BACK FOR MORE
OBRCKS   TM    CUA+L2,H08               SEE IF MODULE 0
         BZ    BACKWARD                 BRANCH YES
         LA    R3,NAME-L6
         ST    R3,REG8
         LA    R5,MOD1OUX               UP PTR IF ON            OX00636
BACKWARD TM    DEVTYP2+L1,H07           SEE IF MODEL 1
         BO    MODEL2                   BRANCH AROUND IF NO
         MVC   MODEL(L1),ONE            MOVE IN ONE
         B     NO1X                     BRANCH AROUND            S21021
MODEL2   MVC   MODEL(L1),TWO            MOVE IN TWO
NO1X     TM    CLASRC,X32               IS IT AN OLD RECORD      S21021
         BO    NO1                      BR-YES                   S21021
         S     R2,TEN                   NO- SUBTRACT TEN         S21021
NO1      EQU   *                                                OX00636
UPWARD   TM    SNB00,H10                IS IT AN EQUIPMENT CHECK
         BZ    NO2                      BRANCH AROUND IF OFF
         LA    R8,L1                    GET 1 IN REG 8
         AH    R8,EQUIPCK               ADD EQUIP. CHECK
         STH   R8,EQUIPCK               STORE TOTAL
NO2      TM    SNB00,H20                IS IT A BUS OUT PARITY
         BZ    NO3                      BRANCH AROUND IF OFF
         LA    R8,L1                    GET 1 IN REG 8
         AH    R8,BUSOUTP               ADD BUS OUTS
         STH   R8,BUSOUTP               STORE TOTAL
NO3      TM    SNB00,H08                IS IT A DATA CHECK
         BZ    RETURN
         LA    R8,L1                    GET 1 IN REG 8
         AH    R8,DATACKS               ADD DATA CHECKS
         STH   R8,DATACKS               STORE TOTAL
         TM    SNB10,H80                SEE IF PERM ERROR
         BZ    NEXT1                    BR IF NO
         LA    R8,L1                    GET 1 IN R8
         AH    R8,PERM                  ADD TOTAL PERMS SO FAR
         STH   R8,PERM                  STORE NEW TOTAL
         B     OVER                     GO ON OVER CODE
NEXT1    TM    SNB20,H40                SEE IF CORRECTABLE
         BZ    INHIBIT                  BR NO INHIBIT
         B     CORECA                   BR TO CORRECTABLE CODE
INHIBIT  LA    R8,L1                    GET 1 IN R8
         AH    R8,RETRYIN               ADD TOTAL RETRY INHIBITS
         STH   R8,RETRYIN               STORE NEW TOTAL
         B     OVER                     BR OVER CODE
CORECA   LA    R8,L1                    GET 1 IN R8
         AH    R8,CORR                  ADD TOTAL CORRECTABLES
         STH   R8,CORR                  STORE NEW TOTAL
OVER     EQU   *
         CLC   TWENTY(L2),DATACKS       SEE IF MORE THAN 0 DATA CHECKS
         BL    RETURN                   BR-YES
         L     R4,TABADDR               LOAD ADDR OF NEXT ENTRY MODULE1
         LTR   R4,R4                    TEST 4
         BNZ   FORWARD                  BRANCH IF SOMETHING IN 4
         LA    R4,TABLE                 LOAD INITIAL PTR INTO 4
FORWARD  SR    R7,R7                    CLEAR R7
         IC    R7,SNB10                 LOAD BYTE
         SRL   R7,L7                    PERM IN BIT31
         SR    R8,R8                    CLEAR REG 8
         IC    R8,SNB20                 LOAD BYTE
         SLL   R8,L25                   GET RID OF BIT 0
         SRL   R8,L31                   CORR IN BIT31
         SLL   R8,L1                    CORR IN BIT 30
         OR    R7,R8                    COMBINE
         MVC   PERMCORR(L1),ZEROA       PUT IN ZEROES
         STC   R7,PERMCORR              PUT IN TABLE CONSTANT
         OI    PERMCORR,H20
         MVC   TABYTE0(L1),PERMCORR
         MVC   TABYTE1(L1),SNB140       PUT BYTE 14 IN TABLE BYTE 1
         MVC   TABYTE2(L1),SNB50        PUT BYTE 5 IN TAB BY 2  OX00637
         MVC   TABYTE3(L1),SNB60        PUT BYTE 6 IN TAB BYT 3 OX00637
         LA    R4,L4(R4)                BUMP UP POINTER 4
         ST    R4,TABADDR               STOORE TABLE ENTRY ADDR
         B     RETURN                   GO BACK
ADD2     TM    CLASRC,X32               IS IT AN OLD RECORD      S21021
         BO    BACK                     BR-YES                   S21021
         LA    R2,L10(R2)               NO ADD TEN               S21021
BACK     BR    R14                      GO BACK                  S21021
RETURN   LM    R4,R8,XSAVE              RESTORE REGS
         BR    R14                      GO BACK
TEN      DC    F'10'                    TEN                      S21021
X32      EQU   X'32'                    HEX 32                   S21021
ENTRIES  EQU   *
         SPECIAL XDATE1,00000000,SPACE=4
* OBR REOCRDS ARE SUMMED BY THE FOLLOWING CODE
         SUM   SNB160
         SUM   SNB161
         SUM   SNB162
         SUM   SNB163
         SUM   SNB164
         SUM   SNB165
         SUM   SNB166
         SUM   SNB167
         SUM   SNB170
         SUM   SNB171
         SUM   SNB172
         SUM   SNB173
         SUM   SNB174
         SUM   SNB175
         SUM   SNB176
         SUM   SNB177
         SUM   SNB180
         SUM   SNB181
         SUM   SNB182
         SUM   SNB183
         SUM   SNB184
         SUM   SNB185
         SUM   SNB186
         SUM   SNB187
         SUM   SNB190
         SUM   SNB191
         SUM   SNB192
         SUM   SNB193
         SUM   SNB194
         SUM   SNB195
         SUM   SNB196
         SUM   SNB197
         SUM   SNB200
         SUM   SNB201
         SUM   SNB202
         SUM   SNB203
         SUM   SNB204
         SUM   SNB205
         SUM   SNB206
         SUM   SNB207
         SUM   SNB210
         SUM   SNB212
         SUM   SNB212
         SUM   SNB213
         SUM   SNB214
         SUM   SNB215
         SUM   SNB216
         SUM   SNB217
         SUM   SNB220
         SUM   SNB221
         SUM   SNB222
         SUM   SNB223
         SUM   SNB224
         SUM   SNB225
         SUM   SNB226
         SUM   SNB227
         SUM   SNB230
         SUM   SNB231
         SUM   SNB232
         SUM   SNB233
         SUM   SNB234
         SUM   SNB235
         SUM   SNB236
         SUM   SNB237
         SPECIAL ADD2,0,SPACE=0
QUIT     DC    X'FFFF'
NAME     EQU   *
         SUM   SNB160
         SUM   SNB161
         SUM   SNB162
         SUM   SNB163
         SUM   SNB164
         SUM   SNB165
         SUM   SNB166
         SUM   SNB167
         SUM   SNB170
         SUM   SNB171
         SUM   SNB172
         SUM   SNB173
         SUM   SNB174
         SUM   SNB175
         SUM   SNB176
         SUM   SNB177
         SUM   SNB180
         SUM   SNB181
         SUM   SNB182
         SUM   SNB183
         SUM   SNB184
         SUM   SNB185
         SUM   SNB186
         SUM   SNB187
         SUM   SNB190
         SUM   SNB191
         SUM   SNB192
         SUM   SNB193
         SUM   SNB194
         SUM   SNB195
         SUM   SNB196
         SUM   SNB197
         SUM   SNB200
         SUM   SNB201
         SUM   SNB202
         SUM   SNB203
         SUM   SNB204
         SUM   SNB205
         SUM   SNB206
         SUM   SNB207
         SUM   SNB210
         SUM   SNB212
         SUM   SNB212
         SUM   SNB213
         SUM   SNB214
         SUM   SNB215
         SUM   SNB216
         SUM   SNB217
         SUM   SNB220
         SUM   SNB221
         SUM   SNB222
         SUM   SNB223
         SUM   SNB224
         SUM   SNB225
         SUM   SNB226
         SUM   SNB227
         SUM   SNB230
         SUM   SNB231
         SUM   SNB232
         SUM   SNB233
         SUM   SNB234
         SUM   SNB235
         SUM   SNB236
         SUM   SNB237
         SPECIAL ADD2,0,SPACE=0
         DC    X'FFFF'
PEDIT    DS    0F
&DSECT   SETC  'YYYY2'
&CSECT   SETC  'PEDIT'
         USING *,R9
         USING YYYY2,R2
*
*        EDIT AND PRINT SECTION
*
         DC    A(PENTRY)
         DC    C'IFCS0002'
YR9PTR   DS    F
YLABEL   DS    F
YYYY2    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YDATES,64)
         DSGEN (YSNB160,16),(YSNB161,16),(YSNB162,16),(YSNB163,16)
         DSGEN (YSNB164,16),(YSNB165,16),(YSNB166,16),(YSNB167,16)
         DSGEN (YSNB170,16),(YSNB171,16),(YSNB172,16),(YSNB173,16)
         DSGEN (YSNB174,16),(YSNB175,16),(YSNB176,16),(YSNB177,16)
         DSGEN (YSNB180,16),(YSNB181,16),(YSNB182,16),(YSNB183,16)
         DSGEN (YSNB184,16),(YSNB185,16),(YSNB186,16),(YSNB187,16)
         DSGEN (YSNB190,16),(YSNB191,16),(YSNB192,16),(YSNB193,16)
         DSGEN (YSNB194,16),(YSNB195,16),(YSNB196,16),(YSNB197,16)
         DSGEN (YSNB200,16),(YSNB201,16),(YSNB202,16),(YSNB203,16)
         DSGEN (YSNB204,16),(YSNB205,16),(YSNB206,16),(YSNB207,16)
         DSGEN (YSNB210,16),(YSNB211,16),(YSNB212,16),(YSNB213,16)
         DSGEN (YSNB214,16),(YSNB215,16),(YSNB216,16),(YSNB217,16)
         DSGEN (YSNB220,16),(YSNB221,16),(YSNB222,16),(YSNB223,16)
         DSGEN (YSNB224,16),(YSNB225,16),(YSNB226,16),(YSNB227,16)
         DSGEN (YSNB230,16),(YSNB231,16),(YSNB232,16),(YSNB233,16)
         DSGEN (YSNB234,16),(YSNB235,16),(YSNB236,16),(YSNB237,16)
         DSGEN (XSNB160,16),(XSNB161,16),(XSNB162,16),(XSNB163,16)
         DSGEN (XSNB164,16),(XSNB165,16),(XSNB166,16),(XSNB167,16)
         DSGEN (XSNB170,16),(XSNB171,16),(XSNB172,16),(XSNB173,16)
         DSGEN (XSNB174,16),(XSNB175,16),(XSNB176,16),(XSNB177,16)
         DSGEN (XSNB180,16),(XSNB181,16),(XSNB182,16),(XSNB183,16)
         DSGEN (XSNB184,16),(XSNB185,16),(XSNB186,16),(XSNB187,16)
         DSGEN (XSNB190,16),(XSNB191,16),(XSNB192,16),(XSNB193,16)
         DSGEN (XSNB194,16),(XSNB195,16),(XSNB196,16),(XSNB197,16)
         DSGEN (XSNB200,16),(XSNB201,16),(XSNB202,16),(XSNB203,16)
         DSGEN (XSNB204,16),(XSNB205,16),(XSNB206,16),(XSNB207,16)
         DSGEN (XSNB210,16),(XSNB211,16),(XSNB212,16),(XSNB213,16)
         DSGEN (XSNB214,16),(XSNB215,16),(XSNB216,16),(XSNB217,16)
         DSGEN (XSNB220,16),(XSNB221,16),(XSNB222,16),(XSNB223,16)
         DSGEN (XSNB224,16),(XSNB225,16),(XSNB226,16),(XSNB227,16)
         DSGEN (XSNB230,16),(XSNB231,16),(XSNB232,16),(XSNB233,16)
         DSGEN (XSNB234,16),(XSNB235,16),(XSNB236,16),(XSNB237,16)
         DS    1H
         DSGEN (YMPLFSC,16),(YMPLFRC,16),(YCTLUSR,16),(YMOD,16)
         DSGEN (YDATACHK,16),(YECCCHK,16),(YBUSOUTP,16),(YORCHA,16)
         DSGEN (YORCHB,16),(YMISSAM,16),(YCORR,16),(YPERM,16)
         DSGEN (YCURETRY,16),(YRETRYIN,16),(YGIGA,32)
         DSGEN (YTABLE,64)
TABREST0 DS    42H
         DS    2H
         DS    4H             DUMMY CTRS
         DSGEN (XDATACHK,16),(XECCCHK,16),(XBUSOUTP,16),(XORCHA,16)
         DSGEN (XORCHB,16),(XMISSAM,16),(XCORR,16),(XPERM,16)
         DSGEN (XCURETRY,16),(XRETRYIN,16),(XGIGA,32)
         DSGEN (XTABLE,64)
IFCSXXXD CSECT
WORK     DS    D
WORKAREA DS    D
INTERMIX DS    F
XSAVE1   DC    5F'0'
FSAVE    DS    18F
YPTR     DC    A(YYY1)
LASTONE  DC    F'0'
ZEROES   DC    F'0'
STOR4    DC    F'0'
FORTA    DC    H'40'
SIZE     DC    H'582'
TRANS    DS    CL3
PERIOD   DC    C'.'
X        DC    C'X'
ZERO     DC    C'0'
ONEA     DC    C'1'
TWOA     DC    C'2'
U        DC    C'U'
A        DC    C'A'
B        DC    C'B'
NOTAVIL  DC    C'N/A'
ZEROMOD  DC    X'00'
ZER      DC    F'0'
QPTR     DC    A(QQQ1)
TWENTA   DC     H'20'
SKIP     BR    R14
*
*        SPECIAL ROUTINES
CLEANUP  MVC   LASTONE(L4),ZER
         BR    R14                      GO BACK
*
CONVERT5 STM   R5,R8,XSAVE1             SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
         CVD   R5,WORK                  CONVERT TO DECIMAL
         UNPK  L0(L5,R3),WORK+L5(L3)    UNPACK TO PRINT BUFF
         MVZ   L4(L1,R3),L0(R3)         PUT IN TIGHT ZONE
         B     RETURNA                  RETURN
CONVERT  STM   R5,R8,XSAVE1             SAVE REGS
         LH    R6,L0(R4)                PICK UP COUNT
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L0(L3,R3),TRANS          PUT NUMBER IN RIGHT PLACE
RETURNA  LM    R5,R8,XSAVE1             RESTORE REGS
         BR    R14                      RETURN
CHECKND  CLC   TWENTA(L2),L0(R4)
         BL    BACK1
         SR    R15,R15
BACK1    BR    R14
FREECTR  STM   R14,R12,L12(R13)        SAVE ALL REGS
         LR    R12,R13                 SAVE SAVE AREA ADDR
         LA    R13,FSAVE               POINT TO MY SAVE
         ST    R12,L4(R13)             SET CHAINING POINTERS
         ST    R13,L8(R12)
         L     R3,L4(R2)               PICK UP POINTER TO NEXT COUNTER
         ST    R3,L28(R12)             SAVE POINTER IN REG SAVE
         LH    R0,SIZE                 PICK UP SAZE OF AREA
         LR    R1,R2                   SET ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3                   ANY MORE COUNTERS
         BZ    RETURN0                 NO RETURN
         LA    R5,PENTRY+L10           POINT TO TOP ENTRY - 4
         ST    R5,YR9PTR
         LA    R5,LABELS-L1            POINT TO FIRST LABEL -1
         ST    R5,YLABEL               STORE IT IN TABLE
RETURN0  L     R13,L4(R13)             PICK UP &
         LM    R14,R12,L12(R13)        RESTORE REGS
         BR    R14
SETCPUNO STM   R5,R8,FSAVE         SAVE WORK REGS              @Z427VLS
         SR    R5,R5               CLEAR REG 5                 @Z427VLS
         ICM   R5,X'3',0(R4)       PICKUP CPU TYPE FIELD       @Z427VLS
         BNZ   RET1                IF CPU TYPE NOT ZERO, THEN RETURN
         LA    R6,L61              AMOUNT TO BACK UP           @Z427VLS
         SR    R3,R6               BACK UP OUTPUT PTR          @Z427VLS
         MVC   0(L9,R3),SHARED     SERIAL NO. - SHARED         @Z427VLS
RET1     LM    R5,R8,FSAVE         RESTORE REGS                @Z427VLS
         BR    R14                 RETURN                      @Z427VLS
*                                                              @Z427VLS
SHARED   DC    CL9'SHARED'                                     @Z427VLS
GIGAPTR  STM   R4,R8,XSAVE1             SAVE REGS
         ST    R4,STOR4
         MVC   INTERMIX(L4),L20(R4)     GET BYTES READ ON BOUNDRY RIGHT
         L     R4,INTERMIX              LOAD R4 FOR CONVERTING
         CVD   R4,WORKAREA              CONVERT TO DECIMAL
         BAL   R8,CONVERT3              GO TO SPECIAL ROUTINE
         LA    R3,L18(R3)               BUMP UP BUFFER POINTER TO 35
         L     R5,STOR4
         LH    R6,L0(R5)                LOAD NUMBER OF DATA CHECKS
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L0(L3,R3),TRANS          PUT NUMBER IN RIGHT PLACE
         L     R5,STOR4
         CLC   L0(L2,R5),ZEROES         SEE IF ZERO DATA CKS
         BE    ZEROERR                  BR IF 0  FOR NO ABEND
         SRDL  R4,L32                   MOVE DIVIDEND INTO R5
         DR    R4,R6                    GET ERROR RATE INTO R5
         CVD   R5,WORKAREA              CONVERT TO DECIMAL
         LA    R3,L10(R3)               BUMP UP BUFFER POINTER TO 45
         BAL   R8,CONVERT3              GO TO SPECIAL ROUTINE
HERE     LA    R3,L13(R3)               BUMP UP BUFFER POINTER TO 58
         LM    R4,R8,XSAVE1             RESTORE REGS
         BR    R14                      GO BACK
ZEROERR  LA    R3,L10(R3)
         MVC   L2(L3,R3),NOTAVIL        PUT IN NOT AVIAL NOTE
         B     HERE
CONVERT3 OI    WORKAREA+L5,H0F          GET SIGN FOR UNPACK
         UNPK  WORK(L7),WORKAREA+L2(L4) UNPK GIGABYTES PLUS
         MVC   L0(L5,R3),WORK           GET NUMBER OF GIGABYTES
         MVC   L5(L1,R3),PERIOD         PUT IN DECIMAL POINT
         MVC   L6(L2,R3),WORK+L5        GET DIGIT ON RIGHT OF POINT
         BR    R8                       GO BACK
SETMOD   MVC   L0(L1,R3),YMOD           PUT MODEL NO. IN PRINT BUFFER
         BR    R14                      GO BACK
SETDATES UNPK  WORK(L8),L0(L4,R4)       UNPACK LOW DATE
         MVZ   WORK+L7(L1),WORK         MOVE IN RIGHT ZONE
         MVC   L0(L3,R3),WORK+L5        PUT DATE IN PTR BUFF
         MVC   L5(L2,R3),WORK+L3        PUT YEAR IN PTR BUFF
         UNPK  WORK(L8),L4(L4,R4)       UNPACK HIGH DATE
         MVZ   WORK+L7(L1),WORK         MOVE IN RIGHT ZONE
         MVC   L13(L3,R3),WORK+L5       PUT DATE IN PTR BUFF
         MVC   L18(L2,R3),WORK+L3       PUT YEAR IN PTR BUFF
         BR    R14
CONVERT2 CVD   R6,WORKAREA              CONVERT HEX TO DECIMAL
         UNPK  WORKAREA(8),WORKAREA(8)  UNPACK INTO SAME
         MVZ   WORKAREA+7(L1),WORKAREA+6 FIX SIGN
         MVC   TRANS(L3),WORKAREA+5     PUT IN TRANSIENT AREA
         BR    R8                       GO BACK
TABXRITE STM   R5,R8,XSAVE1             SAVE REGS
         MVI   ZEROMOD,HFF              PUT IN FF FOR MODULE 1
         B     PLUS1                    GO REGULAR
TABWRITE STM   R5,R8,XSAVE1             SAVE REGS
PLUS1    L     R5,LASTONE               GET ADDR OF TABLE ENTRY
         LTR   R5,R5                    IS ADDR ZERO?
         BNZ   GOON                     BRANCH IF IT IS NOT
         LA    R5,L0(R4)                LOAD R5 WITH ADDRESS 1ST TIME
GOON     CLC   L0(L4,R5),ZEROES         IS IT A ZERO ENTRY
         BE    ENDTABLE                 BR-END OF TABLE
         SR    R6,R6                    CLEAR REG 6
         IC    R6,L2(R5)                GET CYL IN HEX IN REG 6
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC    L0(L3,R3),TRANS         GET NUMBER FROM TRANSIENT AREA
         SR    R6,R6                    CLEAR REG6
         IC    R6,L3(R5)                GET HEAD IN HEX IN REG 6
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L5(L3,R3),TRANS          GET NUMBER FROM TRANS AREA
         TM    L0(R5),HC0               SEE IF FIRST 3BITS ARE ZERO
         BM    RETURNA
         BZ    NOCU                     IF IS-NO CU RETRIES
         SR    R6,R6                    CLEAR REG 6
         NI    L0(R5),H1F               GET RID OF FIRST 3 BITS
         IC    R6,L0(R5)                GET NUMBER OF RETRIES FROM TAB
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L78(L2,R3),TRANS+L1      GET NO. OF RETRIES TO BUFFER
         B     OUTERR                   GET TO END
NOCU     TM    L0(R5),H02               SEE IF CORRECTABLE
         BZ    NO10                     BR-NO
         MVC   L64(L1,R3),X                PUT X IN SPACE 65
         B     OUTERR                   GET OUT OF ERROR ROUTINE
NO10     TM    L0(R5),H01               SEE IF PERMANENT
         BZ    NO11                     BR-NO
         MVC   L106(L1,R3),X               PUT X IN SPACE 107
         B     OUTERR                   GET OUT OF ERROR ROUTINE
NO11     MVC   L92(L1,R3),X                PUT X IN SPACE 93
OUTERR   TM    L1(R5),H40               IS BIT 2 ON -SPARE
         BO    NO12                     BR-YES
         MVC   L15(L1,R3),ZERO             MOVE IN ZERO
         B     NO13                     BR-AROUND
NO12     MVC   L15(L1,R3),ONEA             MOVE IN ONE
NO13     TM    L2(R5),H01               IS BIT 7 ON -COLUMN
         BO    NO14                     BR-YES
         MVC   L25(L1,R3),ZERO             MOVE IN ZERO
         B     NO15                     BR-AROUND
NO14     MVC   L25(L1,R3),ONEA          MOVE IN ONE
NO15     IC    R6,L3(R5)                ELE PRINT.
         SLL   R6,L29                   SAVE BITS 5-7
         SRL   R6,L29                   PUT IN LOW ORDER BITS 29-31
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L46(L1,R3),TRANS+L2      PUT NUMBER IN SPACE 47
         TM    YMOD,H01                 TEST WHICH(MODEL-1)
         BO    MOD1OUT                  BR-MODEL 1 OUTPUT
* FOLLOWING IS CODE FOR MODEL TWO OUTPUT
         TM    L2(R5),H02               IS SIDE ON?  BIT 6 BYTE 4-9
         BO    NO16                     BR-NO IT ISN'T
         MVC   L20(L1,R3),A             MOVE IN A
         B     NO17                     BR-AROUND
NO16     MVC   L20(L1,R3),B             MOVE IN B
NO17     TM    L2(R5),H04               IS CARDX ON?  BIT 5 BYTE 4-9
         BZ    NO18                     BR-NO IT ISN'T
         MVC   L30(L1,R3),ONEA          MOVE IN 1  IN 31
         B     NO19                     BR-AROUND
NO18     MVC   L30(L1,R3),ZERO          MOVE IN 0  IN 31
NO19     TM    L2(R5),H08               IS SLIDER ON?  BIT 4 BYTE 4-9
         BZ    NO20                     BR-NO IT IS'T
         MVC   L36(L1,R3),ONEA          MOVE IN 1 IN 37
         B     NO21                     BR-AROUND
NO20     MVC   L36(L1,R3),ZERO          MOVE IN 0 IN 37
NO21     SR    R6,R6                    CLEAR 6
         IC    R6,L2(R5)                GET IN DISK BYTE
         SLL   R6,L25                   GET RID OF 1ST BIT
         SRL   R6,L29                   GET RID OF BIT 4-7
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L41(L1,R3),TRANS+L2      GET DISK NUMBER - 1 DIGIT
         B     DONE
*
MOD1OUT  TM    L1(R5),H08               IS SIDE ON  BIT 4 BYTE 3-14
         BO    NO22                     BR-NO
         MVC   L20(L1,R3),A             MOVE IN A
         B     NO23                     BR-AROUND
NO22     MVC   L20(L1,R3),B             MOVE IN B
NO23     TM    L2(R5),H04               IS SLIDER ON BIT 5 BYTE 4-9
         BZ    NO24                     BR-NO
         MVC   L36(L1,R3),ONEA          MOVE IN 1
         B     NO25                     BR-AROUND
NO24     MVC   L36(L1,R3),ZERO          MOVE IN 0
NO25     SR    R6,R6                    CLEAR 6
         IC    R6,L2(R5)                GET IN DISK BYTE
         SLL   R6,L26                   GET RID OF 2 BITS IN FRONT
         SRL   R6,L29                   GET RID OF BITS 5-7
         BAL   R8,CONVERT2              GO TO SPECIAL CONVERT ROUTINE
         MVC   L41(L1,R3),TRANS+L2      GET DISK NUMBER - 1 DIGIT
         TM    L2(R5),H02               IS DISK HALF ON BIT 6 BYTE 4-9
         BZ    NO26                     BR-NO IT ISN'T
         MVC   L52(L1,R3),ONEA          MOVE IN ONE
         B     NO27                     BR-AROUND
NO26     MVC   L52(L1,R3),ZERO          MOVE IN ZERO
NO27     TM    L1(R5),H03               IS CARDX 'W' BITS 6-7 BYTE 3-14
         BZ    UNDIF                    YES- PUT IN W
         BO    TWOPL                    BOTH OFF-PUT IN '2'
         TM    L1(R5),H01               IS ONLY BIT 7 ON
         BO    NO28                     BE-NO
         MVC   L30(L1,R3),ZERO          MOVE IN           10
         B     DONE                     BR-AROUND
UNDIF    MVC   L30(L1,R3),U             MOVE IN A 'U'
         B     DONE                     BR-AROUND
TWOPL    MVC   L30(L1,R3),TWOA          MOVE IN A '2'
         B     DONE                     BR-AROUND
NO28     MVC   L30(L1,R3),ONEA          MOVE IN           01
DONE     LA    R5,L4(R5)
         TM    ZEROMOD,HFF              IS MOD 1 SWITCH ON
         BO    DONE1                    BR-YES
         ST    R5,LASTONE
         LA    R5,XXX1-L4
         ST    R5,YR9PTR
         L     R5,YPTR
         ST    R5,YLABEL
         B     RETURNA
DONE1    ST    R5,LASTONE               STORE ADDR OF LAST PROCESS
         LA    R5,PPP1-L4               POINT TO LINE
         ST    R5,YR9PTR                STORE IT
         L     R5,QPTR                  GET LABEL ADDR
         ST    R5,YLABEL                STORE IT
         B     RETURNA                  GO BACK
ENDTABLE TM    ZEROMOD,HFF              IS MOD 1 SWITCH ON
         BO    ENDXABLE                 GO TO DIFFERENT EXIT
         LA    R5,XXX2-L4
         ST    R5,YR9PTR
         L     R5,YPTR
         ST    R5,YLABEL
         B     RETURNA
ENDXABLE LA    R5,PPP2-L4               POINT TO NEXT LINE
         ST    R5,YR9PTR                STORE IT
         L     R5,QPTR                  GET NEXT LABEL PTR
         ST    R5,YLABEL                STORE IT
         MVI   ZEROMOD,H00              PUT IN 00 FOR MODULE 0
         B     RETURNA                  GO BACK
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
         DC    X'01'
         DC    X'000B8B00'
         LABEL ' '
         LINE  (106,1),(1,110),SKIP=1
         HEX   YCUA,0,3B
         LABEL 'SUMMARY OF I/O OUTBOARD ENVIRONMENT RECORDS      DAY YEX
               AR     DAY YEAR                CHANNEL UNIT ADDR','X'
         LINE  (50,61),(31,28)
         ROUTINE YDATES,SETDATES
         ROUTINE YMOD,SETMOD
         ROUTINE YMOD,SETCPUNO                                 @Z427VLS
         LABEL 'DATE RANGE - FROM','TO','DEVICE TYPE-MODEL  2305-'
         LINE  (109,),(88,),SKIP=2
         HEX   YSER
         ROUTINE YMOD,SETCPUNO                                 @Z427VLS
         LABEL 'SERIAL NO.'
         LINE  (83,10),(1,80),SKIP=2
         ROUTINE YNOREC,CONVERT
         LABEL '----------   SUMMARY BY ERROR TYPE FOR MODULES 0 AND 1 X
               ----- TOTAL NO. OF RECORDS'
         LINE  ,(26,49),SKIP=1
         LABEL 'MODULE 0    MODULE 1','MODULE 0    MODULE 1'
         LINE  (32,12),(14,44)
         ROUTINE YDATACHK,CONVERT
         ROUTINE XDATACHK,CONVERT
         ROUTINE YMOD,SKIP
         ROUTINE YMOD,SKIP
         ROUTINE YORCHA,CONVERT5
         ROUTINE XORCHA,CONVERT5
         LABEL 'DATA CHECKS','OVERRUN CHANNEL A'
         LINE
         ROUTINE YECCCHK,CONVERT
         ROUTINE XECCCHK,CONVERT
         ROUTINE YMOD,SKIP
         ROUTINE YMOD,SKIP
         ROUTINE YORCHB,CONVERT5
         ROUTINE XORCHB,CONVERT5
         LABEL 'EQUIPMENT CHECKS','OVERRUN CHANNEL B'
         LINE  ,,SKIP=2
         ROUTINE YBUSOUTP,CONVERT
         ROUTINE XBUSOUTP,CONVERT
         ROUTINE YMOD,SKIP
         ROUTINE YMOD,SKIP
         ROUTINE YMISSAM,CONVERT5
         ROUTINE XMISSAM,CONVERT5
         LABEL 'BUS OUT PARITY','MISSING ADDR MARK'
         LINE  (86,),(58,),SKIP=1
         ROUTINE YCTLUSR,CONVERT5
         LABEL 'CTL UNIT SEL RESET'
         LINE
         ROUTINE YMPLFRC,CONVERT5
         LABEL 'MPL FILE READ CHK'
         LINE  ,,SKIP=3
         ROUTINE YMPLFSC,CONVERT5
         LABEL 'MPL FILE SEEK CHK'
         LINE  ,(1,80),SKIP=2
         LABEL '---------- DATA CHECK ERROR RATE FOR MODULES 0 AND 1 --X
               --------'
         LINE  ,(13,90),SKIP=1
         LABEL 'TOTAL GIGABYTES      TOTAL      GIGABYTES            --X
               ------ERROR DESCRIPTION---------'
         LINE  ,,SKIP=2
         LABEL '     READ         DATA CHECKS   READ/ERROR           COX
               RRECTABLE   CU RETRY   RETRY INHIB   PERMANENT'
         LINE  (18,12),(5,),SKIP=1
         ROUTINE  YDATACHK,GIGAPTR      BACK UP R5 FROM R3
         ROUTINE  YCORR,CONVERT
         ROUTINE  YCURETRY,CONVERT
         ROUTINE  YRETRYIN,CONVERT
         ROUTINE  YPERM,CONVERT
         LABEL 'MODULE 0'
         LINE  (18,12),,SKIP=3
         ROUTINE  XDATACHK,GIGAPTR      BACK UP R5 FROM R3
         ROUTINE  XCORR,CONVERT
         ROUTINE  XCURETRY,CONVERT
         ROUTINE  XRETRYIN,CONVERT
         ROUTINE  XPERM,CONVERT
         LABEL 'MODULE 1'
         LINE  ,(1,80),SKIP=2
         LABEL '----------  SUMMARY OF EQUIPMENT CHECKS FOR MODULE 0 --X
               -------'
         LINE  ,,SKIP=1
         LABEL 'BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAME---- X
               QTY    BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAMX
               E---- QTY'
         LINE  ,,SKIP=2
         LABEL ' 16   MODEL 1/MODEL 2           17   MODEL 1/MODEL 2   X
                       18   MODEL 1/MODEL 2           19   MODEL 1/MODEX
               L 2'
         LINE  (25,31),(2,31),SKIP=1
         ROUTINE YSNB160,CONVERT
         ROUTINE YSNB170,CONVERT
         ROUTINE YSNB180,CONVERT
         ROUTINE YSNB190,CONVERT
         LABEL '0  XOVERSKEW/SD PAR','0   SD PAR 0/IW PAR','0   DR+BR PX
               0/DRV SEL','0   DRV SEL /'
         LINE
         ROUTINE YSNB161,CONVERT
         ROUTINE YSNB171,CONVERT
         ROUTINE YSNB181,CONVERT
         ROUTINE YSNB191,CONVERT
         LABEL '1  XOVERRUN /OVERRUNX','1   SD PAR 1/DR+BR CHK','1   DRX
               +BR P1/INV TAG','1   INV TAG /'
         LINE
         ROUTINE YSNB162,CONVERT
         ROUTINE YSNB172,CONVERT
         ROUTINE YSNB182,CONVERT
         ROUTINE YSNB192,CONVERT
         LABEL '2   MARK OUT/IR PAR','2   IW REG 0/CUE A+B X','2VFO CK X
               P0+1/DEV CK','2   DEV CK  /'
         LINE
         ROUTINE YSNB163,CONVERT
         ROUTINE YSNB173,CONVERT
         ROUTINE YSNB183,CONVERT
         ROUTINE YSNB193,CONVERT
         LABEL '3   FETCH CT/CBO PAR','3   IW REG 1/MISS PLO','3PLO CK X
               P0+1/TA REG','3   TA REG  /'
         LINE
         ROUTINE YSNB164,CONVERT
         ROUTINE YSNB174,CONVERT
         ROUTINE YSNB184,CONVERT
         ROUTINE YSNB194,CONVERT
         LABEL '4   ECC CK 1/ECC CK A','4   IR REG 0/VFO PHSE','4   ECCX
                DEC /CUDI REG','4   CUDI REG/'
         LINE
         ROUTINE YSNB165,CONVERT
         ROUTINE YSNB175,CONVERT
         ROUTINE YSNB185,CONVERT
         ROUTINE YSNB195,CONVERT
         LABEL '5   ECC CK 2/ECC CK B','5   IR REG 1/CHAN CK','5   CHANX
                CK /TD REG','5   TD REG  /'
         LINE
         ROUTINE YSNB166,CONVERT
         ROUTINE YSNB176,CONVERT
         ROUTINE YSNB186,CONVERT
         ROUTINE YSNB196,CONVERT
         LABEL '6   ECC INPT/ECC INPT','6   SKBO 0  /DATA ERRX','6  XDAX
               TA ERR/SRCH COM','6   SRCH COM/'
         LINE  ,,SKIP=3
         ROUTINE YSNB167,CONVERT
         ROUTINE YSNB177,CONVERT
         ROUTINE YSNB187,CONVERT
         ROUTINE YSNB197,CONVERT
         LABEL '7   BYTE CTR/BYTE CTR','7   SKBO 1  /CUDI CK','7   CUDIX
                CK /ECC CHK','7'
         LINE  ,(1,80),SKIP=1
         LABEL 'BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAME---- X
               QTY    BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAMX
               E---- QTY'
         LINE  ,(2,31),SKIP=2
         LABEL '20','21','22','23'
         LINE  ,(2,31),SKIP=1
         ROUTINE YSNB200,CONVERT
         ROUTINE YSNB210,CONVERT
         ROUTINE YSNB220,CONVERT
         ROUTINE YSNB230,CONVERT
         LABEL '0      INOPERATIVE','0      BUS OUT PAR','0      CLIP EX
               RROR','0      WRT XITION'
         LINE
         ROUTINE YSNB201,CONVERT
         ROUTINE YSNB211,CONVERT
         ROUTINE YSNB221,CONVERT
         ROUTINE YSNB231,CONVERT
         LABEL '1      DISK SPEED','1','1      ADDRESS REG','1'
         LINE
         ROUTINE YSNB202,CONVERT
         ROUTINE YSNB212,CONVERT
         ROUTINE YSNB222,CONVERT
         ROUTINE YSNB232,CONVERT
         LABEL '2      APC FAILURE','2','2      WRT IX(MOD 1)','2      X
               WRT DRIVER'
         LINE
         ROUTINE YSNB203,CONVERT
         ROUTINE YSNB213,CONVERT
         ROUTINE YSNB223,CONVERT
         ROUTINE YSNB233,CONVERT
         LABEL '3      APC SYNC','3      BUS IN PAR','3      RD SEQ FAIX
               L','3      I SOURCE'
         LINE
         ROUTINE YSNB204,CONVERT
         ROUTINE YSNB214,CONVERT
         ROUTINE YSNB224,CONVERT
         ROUTINE YSNB234,CONVERT
         LABEL '4      378 JUMP','4   BOTH PATHS(MOD 1)','4','4      HIX
                I SOURCE'
         LINE
         ROUTINE YSNB205,CONVERT
         ROUTINE YSNB215,CONVERT
         ROUTINE YSNB225,CONVERT
         ROUTINE YSNB235,CONVERT
         LABEL '5      378 SEQUENCE','5','5      WRT SEQ FAIL','5      X
               SLIDER SEL'
         LINE
         ROUTINE YSNB206,CONVERT
         ROUTINE YSNB216,CONVERT
         ROUTINE YSNB226,CONVERT
         ROUTINE YSNB236,CONVERT
         LABEL '6      378 ILLEGAL','6','6      SIMULT R/W','6      REAX
               D BIAS'
         LINE  ,,SKIP=2
         ROUTINE YSNB207,CONVERT
         ROUTINE YSNB217,CONVERT
         ROUTINE YSNB227,CONVERT
         ROUTINE YSNB237,CONVERT
         LABEL '7      PLO SYNC','7      PATH 1(MOD 1)','7      I SINK X
               ON','7'
         LINE  ,,SKIP=1
         LABEL 'NOTE -- AN X BEFORE OR AFTER AN EQUIPMENT CHECK INDICATX
               ES THAT IT WILL NOT CAUSE AN EQUIPMENT'
         LINE
         LABEL '        CHECK BUT MAY BE ON IF AN EQUIPMENT CHECK WAS CX
               AUSED BY OTHER ERRORS'
         LINE  ,,SKIP=3
         LABEL ' '
         LINE  ,(1,80),SKIP=2
         LABEL '----------  SUMMARY OF EQUIPMENT CHECKS FOR MODULE 1 --X
               -------'
         LINE  ,,SKIP=1
         LABEL 'BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAME---- X
               QTY    BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAMX
               E---- QTY'
         LINE  ,,SKIP=2
         LABEL ' 16   MODEL 1/MODEL 2           17   MODEL 1/MODEL 2   X
                       18   MODEL 1/MODEL 2           19   MODEL 1/MODEX
               L 2'
         LINE  (25,31),(2,31),SKIP=1
         ROUTINE XSNB160,CONVERT
         ROUTINE XSNB170,CONVERT
         ROUTINE XSNB180,CONVERT
         ROUTINE XSNB190,CONVERT
         LABEL '0  XOVERSKEW/SD PAR','0   SD PAR 0/IW PAR','0   DR+BR PX
               0/DRV SEL','0   DRV SEL /'
         LINE
         ROUTINE XSNB161,CONVERT
         ROUTINE XSNB171,CONVERT
         ROUTINE XSNB181,CONVERT
         ROUTINE XSNB191,CONVERT
         LABEL '1  XOVERRUN /OVERRUNX','1   SD PAR 1/DR+BR CHK','1   DRX
               +BR P1/INV TAG','1   INV TAG /'
         LINE
         ROUTINE XSNB162,CONVERT
         ROUTINE XSNB172,CONVERT
         ROUTINE XSNB182,CONVERT
         ROUTINE XSNB192,CONVERT
         LABEL '2   MARK OUT/IR PAR','2   IW REG 0/CUE A+B X','2VFO CK X
               P0+1/DEV CK','2   DEV CK  /'
         LINE
         ROUTINE XSNB163,CONVERT
         ROUTINE XSNB173,CONVERT
         ROUTINE XSNB183,CONVERT
         ROUTINE XSNB193,CONVERT
         LABEL '3   FETCH CT/CBO PAR','3   IW REG 1/MISS PLO','3PLO CK X
               P0+1/TA REG','3   TA REG  /'
         LINE
         ROUTINE XSNB164,CONVERT
         ROUTINE XSNB174,CONVERT
         ROUTINE XSNB184,CONVERT
         ROUTINE XSNB194,CONVERT
         LABEL '4   ECC CK 1/ECC CK A','4   IR REG 0/VFO PHSE','4   ECCX
                DEC /CUDI REG','4   CUDI REG/'
         LINE
         ROUTINE XSNB165,CONVERT
         ROUTINE XSNB175,CONVERT
         ROUTINE XSNB185,CONVERT
         ROUTINE XSNB195,CONVERT
         LABEL '5   ECC CK 2/ECC CK B','5   IR REG 1/CHAN CK','5   CHANX
                CK /TD REG','5   TD REG  /'
         LINE
         ROUTINE XSNB166,CONVERT
         ROUTINE XSNB176,CONVERT
         ROUTINE XSNB186,CONVERT
         ROUTINE XSNB196,CONVERT
         LABEL '6   ECC INPT/ECC INPT','6   SKBO 0  /DATA ERRX','6  XDAX
               TA ERR/SRCH COM','6   SRCH COM/'
         LINE  ,,SKIP=3
         ROUTINE XSNB167,CONVERT
         ROUTINE XSNB177,CONVERT
         ROUTINE XSNB187,CONVERT
         ROUTINE XSNB197,CONVERT
         LABEL '7   BYTE CTR/BYTE CTR','7   SKBO 1  /CUDI CK','7   CUDIX
                CK /ECC CHK','7'
         LINE  ,(1,80),SKIP=1
         LABEL 'BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAME---- X
               QTY    BYTE ----ERROR NAME---- QTY    BYTE ----ERROR NAMX
               E---- QTY'
         LINE  ,(2,31),SKIP=2
         LABEL '20','21','22','23'
         LINE  ,(2,31),SKIP=1
         ROUTINE XSNB200,CONVERT
         ROUTINE XSNB210,CONVERT
         ROUTINE XSNB220,CONVERT
         ROUTINE XSNB230,CONVERT
         LABEL '0      INOPERATIVE','0      BUS OUT PAR','0      CLIP EX
               RROR','0      WRT XITION'
         LINE
         ROUTINE XSNB201,CONVERT
         ROUTINE XSNB211,CONVERT
         ROUTINE XSNB221,CONVERT
         ROUTINE XSNB231,CONVERT
         LABEL '1      DISK SPEED','1','1      ADDRESS REG','1'
         LINE
         ROUTINE XSNB202,CONVERT
         ROUTINE XSNB212,CONVERT
         ROUTINE XSNB222,CONVERT
         ROUTINE XSNB232,CONVERT
         LABEL '2      APC FAILURE','2','2      WRT IX(MOD 1)','2      X
               WRT DRIVER'
         LINE
         ROUTINE XSNB203,CONVERT
         ROUTINE XSNB213,CONVERT
         ROUTINE XSNB223,CONVERT
         ROUTINE XSNB233,CONVERT
         LABEL '3      APC SYNC','3      BUS IN PAR','3      RD SEQ FAIX
               L','3      I SOURCE'
         LINE
         ROUTINE XSNB204,CONVERT
         ROUTINE XSNB214,CONVERT
         ROUTINE XSNB224,CONVERT
         ROUTINE XSNB234,CONVERT
         LABEL '4      378 JUMP','4   BOTH PATHS(MOD 1)','4','4      HIX
                I SOURCE'
         LINE
         ROUTINE XSNB205,CONVERT
         ROUTINE XSNB215,CONVERT
         ROUTINE XSNB225,CONVERT
         ROUTINE XSNB235,CONVERT
         LABEL '5      378 SEQUENCE','5','5      WRT SEQ FAIL','5      X
               SLIDER SEL'
         LINE
         ROUTINE XSNB206,CONVERT
         ROUTINE XSNB216,CONVERT
         ROUTINE XSNB226,CONVERT
         ROUTINE XSNB236,CONVERT
         LABEL '6      378 ILLEGAL','6','6      SIMULT R/W','6      REAX
               D BIAS'
         LINE  ,,SKIP=2
         ROUTINE XSNB207,CONVERT
         ROUTINE XSNB217,CONVERT
         ROUTINE XSNB227,CONVERT
         ROUTINE XSNB237,CONVERT
         LABEL '7      PLO SYNC','7      PATH 1(MOD 1)','7      I SINK X
               ON','7'
         LINE  ,,SKIP=1
         LABEL 'NOTE -- AN X BEFORE OR AFTER AN EQUIPMENT CHECK INDICATX
               ES THAT IT WILL NOT CAUSE AN EQUIPMENT'
         LINE
         LABEL '        CHECK BUT MAY BE ON IF AN EQUIPMENT CHECK WAS CX
               AUSED BY OTHER ERRORS'
         LINE  ,,SKIP=3
         LABEL ' '
         LINE  (2,100),(1,100),SKIP=2
         LABEL '----------  LISTING OF DATA CHECKS FOR MODULE 0 -------H
               --'
         LINE  ,,SKIP=1
         LABEL 'SYSTEM       ---------- DRIVE ADDRESS ----------       X
                    ----- ERROR DESCRIPTION -----'
         LINE
         LABEL 'ADDRESS                                           DISK X
               HALF CORRECTABLE    CU RETRY    RETRY INHIB     PERMANENX
               T'
         LINE  ,,SKIP=2
         LABEL 'CYL HEAD     SPARE SIDE COL CARD X SLDR DISK ELE  (MOD X
               1)                 (RETRY NO)'
XXX1     LINE  (1,1),(100,1),SKIP=1
         ROUTINE YTABLE,TABWRITE
YYY1     LABEL ' '
XXX2     LINE  ,(1,100),SKIP=3
         ROUTINE  YDATACHK,CHECKND
YYY2     LABEL '---------- MORE THAN 20 ERRORS HAVE OCCURED. NO FURTHERX
                LISTING WILL BE MADE ----------'
         LINE  ,(5,20),SKIP=1
         LABEL 'X ON MODEL 1 THIS IS THE FAILING PATH - A U INDICATES'
         LINE
         LABEL '  THE FAILING PATH CANNOT BE DETERMINED,A 2 INDICATES'
         LINE  ,,SKIP=2
         LABEL '  BOTH PATHS FAILED'
         LINE
         ROUTINE XTABLE,CLEANUP
         LABEL ' '
         LINE  (2,100),(1,100),SKIP=2
         LABEL '----------  LISTING OF DATA CHECKS FOR MODULE 1 -------H
               --'
         LINE  ,,SKIP=1
         LABEL 'SYSTEM       ---------- DRIVE ADDRESS ----------       X
                    ----- ERROR DESCRIPTION -----'
         LINE
         LABEL 'ADDRESS                                           DISK X
               HALF CORRECTABLE    CU RETRY    RETRY INHIB     PERMANENX
               T'
         LINE  ,,SKIP=2
         LABEL 'CYL HEAD     SPARE SIDE COL CARD X SLDR DISK ELE  (MOD X
               1)                 (RETRY NO)'
PPP1     LINE  (1,1),(100,1),SKIP=1
         ROUTINE XTABLE,TABXRITE
QQQ1     LABEL ' '
PPP2     LINE  ,(1,100),SKIP=3
         ROUTINE  XDATACHK,CHECKND
QQQ2     LABEL '---------- MORE THAN 20 ERRORS HAVE OCCURED. NO FURTHERX
                LISTING WILL BE MADE ----------'
         LINE  ,(5,20),SKIP=1
         LABEL 'X ON MODEL 1 THIS IS THE FAILING PATH - A U INDICATES'
         LINE
         LABEL '  THE FAILING PATH CANNOT BE DETERMINED,A 2 INDICATES'
         LINE  ,,SKIP=2
         LABEL '  BOTH PATHS FAILED'
         LINE
         ROUTINE   XTABLE,CLEANUP                               YM07626
         ROUTINE YMOD,FREECTR
         LABEL ' '
DUMPCODE DC    XL1'FF'
DUMPSIZE DC    XL2'0000'
DUMPBEGN DC    XL2'0'
ADDRLABL DC    XL2'0'
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
