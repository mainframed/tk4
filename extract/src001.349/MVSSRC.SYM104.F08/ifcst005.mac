         TITLE 'IFCST005 SUMMARY FOR 3705 27RN'
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         EJECT
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         EJECT
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         EJECT
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         EJECT
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         EJECT
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         EJECT
         MACRO
         CONVT
         GBLC  &ITEM(1000),&DSECT
         GBLA  &INITIAL
         GBLA  &BITS(1000),&ITEMNBR,&SHIFT(1000)
         GBLA  &NRENTS
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLB  &SUB
         LCLA  &OP
         LCLA  &OFFSET,&OUT,&IN,&IND,&IBITS,&ISHIFT
.*
.*       CONVERT BINARY TO DECIMAL
.*             &NAME IS THE REFERENCE INTO THE DSECT RECORD
.*             &OUT    IS THE NUMBER OF CHARS TO BE PUT ONTO PRINT LINE
.*                                      DEFAULT IS FOUR MAXIMUM IS 8
.*             &IN       IS THE NUMBER OF BYTES AS INPUT
.*                                      ERROR DEFAULT IS 2 MAXIMUM IS 4
.*
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LLOP
&SUB     SETB  1
.LLOP    ANOP
&OP      SETA  &OP+1
&OUT     SETA  4                        .BR NOT NULL ELSE SET TO 4
         AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(3)' EQ '').B  TEST FOR NULL INPUT
&OUT     SETA  &SYSLIST(3)             SET &OUT FROM INPUT
         AGO   .A
.SUBA    AIF   ('&SYSLIST(&OP,3)' EQ '').B
&OUT     SETA  &SYSLIST(&OP,3)          SET &OUT FROM INPUT
.A       AIF   (&OUT GT 0 AND &OUT LT 9).B   TEST RANGE
.AERR    MNOTE '*** BYTES OUT INCORRECTLY SPECIFIED DEFAULT USED ***'
&OUT     SETA  4
.B       AIF   (&SUB EQ 1).SUBB
         AIF   ('&SYSLIST(2)' EQ '').LOOP    BRANCH IF NULL
&IN      SETA  &SYSLIST(2)              .SET &IN FROM INPUT
         AGO   .BB
.SUBB    AIF   ('&SYSLIST(&OP,2)' EQ '').LOOP
&IN      SETA  &SYSLIST(&OP,2)          .SET &IN FROM INPUT
.BB      AIF   (&IN GT 0 AND &IN LT 5).D     TEST RANGE
.BERR    MNOTE '*** BYTES IN INCORRECTLY SPECIFIED DEFAULT USED ***'
&IN      SETA  2
         AGO   .D
.LOOP    ANOP                           .LOOP TO FIND &NAME IN DSECT
&IND     SETA  &IND+1                   .SET UP LOOP COUNTER
         AIF   ('&ITEM(&IND)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&IND LT &ITEMNBR).LOOP  .TEST FOR END OF DSECT
         MNOTE '*** LOG ITEM NOT DEFINED ***'
         MEXIT
.FOUND   ANOP
&IBITS   SETA  &BITS(&IND)              .SET UP NUMBER OF BITS SPEC
         AIF   (&IBITS-((&IBITS/8)*8) EQ 0).C  .TEST FOR MULTIPLE OF 8
         MNOTE '*** DATA NOT DEFINED A MULTIPLE OF 8 BITS ***'
         MEXIT
.C       ANOP
&IN      SETA  &IBITS/8                 .COMPUTE NUMBER OF BYTES
         AIF   (&IN LT 1 OR &IN GT 4).BERR  .TEST RANGE B IF IN ERROR
&ISHIFT  SETA  &SHIFT(&IND)             .SET UP FOR TEST OF BYTE BNDR
         AIF   (&ISHIFT EQ 0).D         .TEST FOR BYTE BNDRY  !R IF YES
         MNOTE '*** DATA NOT ALIGNED ON A BYTE BOUNDARY ***'
         MEXIT
.*
.D       ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),AL.4(9)
         DC    X'&IN',X'&OUT'
&IND     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LLOP
.OUTA    ANOP
         MEND
         EJECT
*
         GBLC  &DSECT,&CSECT
IFCST005 CSECT
&CSECT   SETC  'IFCST005'
&DSECT   SETC  'S3705'
S3705    DSECT
         DS    0F
*
         DSGEN (RECT,8),(OPSYS,8),(SWITCH,24),(RCDID,8),(SPARE1,16)
         DSGEN (DATE,32),(TIME,32)
         DSGEN (SPARE2,8),(CPUSER,24),(MODEL,16),(SPARE3,16)
         DSGEN (CUA,16),(TERMN1,16),(TERMN2,32)
         DSGEN (TERMN3,16),(RESID,16),(LINEADD,16),(RECMD,8),(RECID,8)
         DSGEN (ISBOX,8),(BTUMOD,8),(REG100,8),(REG108,8),             C
               (REG200,8),(REG208,8),(REG300,8),(REG308,8)
         DSGEN (REG400,16),(REG500,8),(REG508,8)
         DSGEN (REG600,8),(REG608,8),(REG700,16)
         DSGEN (REG800,8),(,8),(,16)
         EJECT
IFCST005 CSECT
         USING S3705,R2
         USING *,R9
         DC    A(ENTRIES)
         DC    A(PEDIT)
REG8     DC    F'0'
SCSIZE   DC    AL2(TABSIZE1)       # OF HALF-WORD COUNTERS
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
L14      EQU   14
L16      EQU   16
L18      EQU   18
L20      EQU   20
L22      EQU   22
L23      EQU   23
L24      EQU   24
L26      EQU   26
L28      EQU   28
L32      EQU   32
L46      EQU   46
H00      EQU   X'00'
H01      EQU   X'01'
H10      EQU   X'10'
HEX01    EQU   X'01'
HEX02    EQU   X'02'
HEX03    EQU   X'03'
HEX04    EQU   X'04'
HEX08    EQU   X'08'
HEX10    EQU   X'10'
HEX11    EQU   X'11'
HEX12    EQU   X'12'
HEX13    EQU   X'13'
HEX20    EQU   X'20'
HEX40    EQU   X'40'
HEX80    EQU   X'80'
HEX84    EQU   X'84'
HEXC0    EQU   X'C0'
*
*        SET UP FROM - TO DATE
*
XDATE1   STM   R5,R8,XSAVE1
         CLC   DATE(L4),HEX00
         BE    RETURN1
         CLC   L0(L4,R3),HEX00
         BNE   XDATE2
         MVC   L0(L4,R3),DATE
XDATE2   CLC   DATE(L4),L0(R3)         CK FOR LO DATE            SM5193
         BL    SAVELOW                 LOWER SAVE IT             SM5193
         CLC   DATE(L4),L4(R3)                                   SM5193
         BNH   RETURN1                                           SM5193
SAVEHI   MVC   L4(L4,R3),DATE
         B     RETURN1                                           OM5193
SAVELOW  MVC   L0(L4,R3),DATE          MOVE LOW DATE             OM5193
*
RETURN1  LM    R5,R8,XSAVE1
DUMMY    BR 14                                                 @XA12830
**
**   LOCATE THE PROPER ENTRY FOR THIS RECORD
**
LOCATE   STM   R5,R8,XSAVE1        SAVE REGISTERS
         CLI   RECMD,HEX10         IS THE RECORDING MODE LESS THAN
         BL    FIND                CHANNEL ADAPTER             @VS48714
         XC    LINEADD(2),LINEADD  IF SO, CLEAR LIBADR
FIND     LA    R5,200              NUMBER OF ENTRIES           @VS48714
         LR    R6,R3               START OF TABLE
         MVC   VALUES(L12),TERMN1  MOVE IN SORT KEY
FIND1    CLC   TERMN1(L12),L0(R6)  IS THIS THE RIGHT SET OF CTRS
         BE    UPDATE              YES, EXIT
         OC    L0(L12,R6),L0(R6)   END OF ENTRIES
         BZ    UPDATE              YES, EXIT
         LA    R6,L32(R6)          STEP TO NEXT ENTRY
         BCT   R5,FIND1            NEXT ENTRY
         XC    VALUES(L12),VALUES  CLEAR THE SORT KEY OF 51ST ENTRY
         MVC   VALUES(L8),OVERFLOW INDICATE OVERFLOW
UPDATE   MVC   VALUES+L12(L20),L12(R6) MOVE IN COUNTERS
         ST    R6,WHEREGOT         SAVE LOCATION
         B     RETURN1             EXIT
**
**   TOTAL THE RECORD INTO THE APPROPRIATE COUNTERS
**
TOTAL    STM   R5,R8,XSAVE1        SAVE REGISTERS
         CLI   RECMD,HEX01         LINE STATISTICS
         BNE   TOTAL2              NO, BYPASS
         SR    R6,R6
         ICM   R6,X'1',REG800      GET TEMP COUNTERS
         ICM   R7,X'3',VTEMPS      GET TOTALS
         AR    R7,R6               SUM
         STCM  R7,X'3',VTEMPS      STORE
         ICM   R6,X'3',REG700      GET IO OPERS
         ICM   R7,X'F',VIOPS       GET TOTALS
         AR    R7,R6
         STCM  R7,X'F',VIOPS       STORE TOTALS
         B     RETURN1
TOTAL2   SR    R6,R6
         ICM   R6,X'3',VPERMS      GET PERMS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VPERMS      STORE
         CLI   RECMD,HEX10         CHANNEL ADAPTER?
         BL    TOTAL1              LESS THAN, EXIT
         CLI   RECMD,HEX10+HEX01   COMMUNICATIONS SCAN
         BH    TOTAL3              HIGH, TOTAL AS MISC
         SR    R6,R6
         ICM   R6,X'3',VHDWR       GET HARDWARE TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VHDWR       STORE
         B     RETURN1
TOTAL3   SR    R6,R6
         ICM   R6,X'3',VMISC       GET MISCELLANEOUS TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VMISC       STORE
         B     RETURN1
TOTAL1   SR    R6,R6
         ICM   R6,X'1',REG800      GET TEMP COUNTERS
         ICM   R7,X'3',VTEMPS      GET TOTALS
         AR    R7,R6               SUM
         STCM  R7,X'3',VTEMPS      STORE
         ICM   R6,X'3',REG700      GET IO OPERS
         ICM   R7,X'F',VIOPS       GET TOTALS
         AR    R7,R6
         STCM  R7,X'F',VIOPS       STORE TOTALS
         MVC   STATUS,REG508       GET INITAL ERROR STATUS
         OC    STATUS,STATUS       IS IT ZERO
         BNZ   TOTAL6              IF NO, BYPASS
         MVC   STATUS,REG400       IF YES, USE FINAL ERROR STATUS
TOTAL6   CLI   STATUS,HEX10        DATA CHECK?
         BE    TOTAL7              YES, GO TOTAL
         CLI   STATUS,HEX20        SYNC CHECK?
         BNE   TOTAL8              NO, GO TO NEXT TEST
TOTAL7   SR    R6,R6
         ICM   R6,X'3',VDATACK     GET DATA CHECK TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VDATACK     STORE
         B     RETURN1
TOTAL8   CLI   STATUS,HEX40        STAT FORM
         BNE   TOTAL9              NO, GO TO NEXT TEST
TOTAL13  SR    R6,R6
         ICM   R6,X'3',VRCV        GET RECEIVER TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VRCV        STORE
         B     RETURN1
TOTAL9   OC    STATUS+L2(L1),STATUS+L2 IS STATUS ZERO
         BZ    ANALYZE             IF YES, GO TO ANALYZE SECTION
         TM    STATUS+L2,HEX80+HEX08+HEX02 OVERRUN/UNDERRUN/ABORT?
         BZ    TOTAL10             NO, GO TO NEXT TEST
TOTAL11  SR    R6,R6
         ICM   R6,X'3',VMISC       GET MISCELLANEOUS TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VMISC       STORE
         B     RETURN1
TOTAL10  TM    STATUS+L2,HEX40+HEX20+HEX01 LINE-QUIET/DLE/SDLC
         BZ    TOTAL11             NO, GO TOTAL AS MISCELLANEOUS
         B     TOTAL13
ANALYZE  NI    STATUS+L1,X'FE'     SET LEADING GRAPHICS BIT OFF
         LA    R8,LXBSTATB         GET START OF LXB TABLE
         LA    R7,LLXBSTB          GET LENGTH OF LXB TABLE
         CLI   RECMD,H00           IS IT A PERM LINE ERROR
         BNE   TRT                 NO, GO LOOK UP IN TABLE
         LA    R8,IOBSTATB         GET START OF IOB TABLE
         LA    R7,LIOBSTB          GET LENGTH OF IOB TABLE
         CLI   STATUS+1,H00        IS IT ZERO?
         BNE   TRT                 NO, GO LOOK UP IN TABLE
         NI    STATUS,HEX08+HEX04+HEX02 AND OFF BITS
         CLI   STATUS,HEX04
         BE    TOTAL7              GO ADD TO DATA CHECK COUNTERS
         CLI   STATUS,HEX04+HEX02
         BNE   TOTAL11             GO ADD TO MISCELLANEOUS
         SR    R6,R6
         ICM   R6,X'3',VINTRQD     GET INTERVENTION REQUIRED TOTALS
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',VINTRQD     STORE
         B     RETURN1
TRT      CLC   STATUS+L1(L1),L0(R8) CHECK FOR VALUE IN TABLE
         BE    FOUND               YES, EXIT
         LA    R8,L2(R8)           UP TO NEXT VALUE
         BCT   R7,TRT              LOOP
FOUND    SR    R7,R7
         ICM   R7,X'1',L1(R8)      GET INDEX VALUE
         LA    R7,VALUES(R7)       GET TO COUNTER
         SR    R6,R6
         ICM   R6,X'3',L0(R7)      GET COUNTER VALUE
         LA    R6,L1(R6)           ADD ONE
         STCM  R6,X'3',L0(R7)      STORE
         B     RETURN1
**
**   RESTORE THE COUNTERS TO THE TABLE
**
RESTORE  STM   R5,R8,XSAVE1
         L     R6,WHEREGOT         LOAD THE COUNTER LOCATION
         MVC   L0(L32,R6),VALUES   PLACE BACK INTO TABLE
         B     RETURN1
         EJECT
         DS    0D
XSAVE1   DC    5F'0'
HEX00    DC    F'0'
WHEREGOT DC    F'0'
VALUES   DS    0CL32
VTERMN   DS    CL8
VRESID   DS    CL2
VLIBADR  DS    CL2
VIOPS    DS    CL4
VTEMPS   DS    CL2
VPERMS   DS    CL2
VHDWR    DS    CL2
VTMOUT   DS    CL2
VDATACK  DS    CL2
VRCV     DS    CL2
VINTRQD  DS    CL2
VMISC    DS    CL2
OVERFLOW DC    C'OVERFLOW'
STATUS   DS    CL3
         EJECT
IOBSTATB DC    X'E4',AL1(VHDWR-VALUES)
         DC    X'E8',AL1(VHDWR-VALUES)
         DC    X'EA',AL1(VHDWR-VALUES)
         DC    X'F0',AL1(VHDWR-VALUES)
         DC    X'F2',AL1(VHDWR-VALUES)
         DC    X'F4',AL1(VHDWR-VALUES)
         DC    X'F6',AL1(VHDWR-VALUES)
         DC    X'20',AL1(VTMOUT-VALUES)
         DC    X'40',AL1(VTMOUT-VALUES)
         DC    X'60',AL1(VTMOUT-VALUES)
         DC    X'80',AL1(VTMOUT-VALUES)
         DC    X'FC',AL1(VTMOUT-VALUES)
         DC    X'0C',AL1(VTMOUT-VALUES)
         DC    X'06',AL1(VRCV-VALUES)
         DC    X'08',AL1(VRCV-VALUES)
         DC    X'0A',AL1(VRCV-VALUES)
         DC    X'92',AL1(VRCV-VALUES)
         DC    X'9A',AL1(VRCV-VALUES)
LIOBSTB  EQU   (*-IOBSTATB)/2
         DC    X'00',AL1(VMISC-VALUES)
LXBSTATB DC    X'E4',AL1(VHDWR-VALUES)
         DC    X'E8',AL1(VHDWR-VALUES)
         DC    X'EA',AL1(VHDWR-VALUES)
         DC    X'F0',AL1(VHDWR-VALUES)
         DC    X'F2',AL1(VHDWR-VALUES)
         DC    X'F4',AL1(VHDWR-VALUES)
         DC    X'F6',AL1(VHDWR-VALUES)
         DC    X'00',AL1(VTMOUT-VALUES)
         DC    X'20',AL1(VTMOUT-VALUES)
         DC    X'60',AL1(VTMOUT-VALUES)
         DC    X'80',AL1(VTMOUT-VALUES)
         DC    X'A0',AL1(VTMOUT-VALUES)
         DC    X'FC',AL1(VTMOUT-VALUES)
         DC    X'0C',AL1(VDATACK-VALUES)
         DC    X'0E',AL1(VDATACK-VALUES)
         DC    X'2C',AL1(VDATACK-VALUES)
         DC    X'2E',AL1(VDATACK-VALUES)
         DC    X'24',AL1(VRCV-VALUES)
         DC    X'64',AL1(VRCV-VALUES)
         DC    X'A2',AL1(VRCV-VALUES)
         DC    X'A4',AL1(VRCV-VALUES)
         DC    X'A6',AL1(VRCV-VALUES)
LLXBSTB  EQU   (*-LXBSTATB)/2
         DC    X'00',AL1(VMISC-VALUES)
         EJECT
ENTRIES  DS    0F
         SPECIAL XDATE1,00000000,SPACE=4
         SPECIAL LOCATE,00000000,SPACE=3
         SPECIAL TOTAL,00000000,SPACE=4
         SPECIAL RESTORE,00000000,SPACE=4
         DC    X'FF'
         EJECT
*
PEDIT    DS    0F
*
&DSECT   SETC  'T3705'
&CSECT   SETC  'PEDIT'
         USING *,9
         USING T3705,R2
         DC    A(PENTRY)
         DC    C'IFCST005'
YR9PTR   DS    F
YLABEL   DS    F
T3705    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (TDAY1,32),(TDAY2,32)
ITEM1    DSGEN (TERMN,64)
         DSGEN (RESID1,16),(LIBADDR1,16)
         DSGEN (IOPS1,32)
         DSGEN (TEMPS1,16),(PERMS1,16)
         DSGEN (HDWR1,16),(TMOUT1,16),(DATACK1,16),(RCV1,16)
         DSGEN (INTRQD1,16),(MISC1,16)
TERMNO2  DS    CL32
TERMNO3  DS    CL32
TERMNO4  DS    CL32
TERMNO5  DS    CL32
TERMNO6  DS    CL32
TERMNO7  DS    CL32
TERMNO8  DS    CL32
TERMNO9  DS    CL32
TERMNO10 DS    CL32
TERMNO11 DS    CL32
TERMNO12 DS    CL32
TERMNO13 DS    CL32
TERMNO14 DS    CL32
TERMNO15 DS    CL32
TERMNO16 DS    CL32
TERMNO17 DS    CL32
TERMNO18 DS    CL32
TERMNO19 DS    CL32
TERMNO20 DS    CL32
TERMNO21 DS    CL32
TERMNO22 DS    CL32
TERMNO23 DS    CL32
TERMNO24 DS    CL32
TERMNO25 DS    CL32
TERMNO26 DS    CL32
TERMNO27 DS    CL32
TERMNO28 DS    CL32
TERMNO29 DS    CL32
TERMNO30 DS    CL32
TERMNO31 DS    CL32
TERMNO32 DS    CL32
TERMNO33 DS    CL32
TERMNO34 DS    CL32
TERMNO35 DS    CL32
TERMNO36 DS    CL32
TERMNO37 DS    CL32
TERMNO38 DS    CL32
TERMNO39 DS    CL32
TERMNO40 DS    CL32
TERMNO41 DS    CL32
TERMNO42 DS    CL32
TERMNO43 DS    CL32
TERMNO44 DS    CL32
TERMNO45 DS    CL32
TERMNO46 DS    CL32
TERMNO47 DS    CL32
TERMNO48 DS    CL32
TERMNO49 DS    CL32
TERMNO50 DS    CL32
TERMNO51 DS    CL32
TERMS    DS    150CL32                                         @VS48714
TABSIZE  EQU   (*-T3705)
TABSIZE1 EQU   (*-TDAY1)/2
         EJECT
IFCST005 CSECT
*
*        CHECK FOR CPU AND SERIAL NUMBER
*
SETCPUNO STM   R5,R8,XSAVE             SAVE REGS
         SR    R5,R5                   CLEAR REG 5
         IC    R5,L0(R4)               PICK UP MODEL NUMBER
         SLL   R5,L8                    INTO
         IC    R5,L1(R4)               R5
         LTR   R5,R5                   TEST FOR ZERO
         BNZ   RETURN                  RETURN
         LR    R5,R3                   PUT LINE ADDRESS IN R5
         LA    R6,L46                  OFFSET IN REG 6
         SR    R5,R6                   SUBTRACT OFFSET FROM POINTER
         MVC   L0(L6,R5),SHARED         PUT IN SHARED          @Z427VLS
RETURN   LM    R5,R8,XSAVE
SKIPPER  BR    R14                 NOP RETURN
*
*        SET THE DATE READY FOR PRINT
*
SETDATE  UNPK  XSAVE(L8),L1(L3,R4)     UNPACK THE DATE
         MVC   L0(L3,R3),XSAVE+L5      MOVE DAY
         MVC   L6(L2,R3),XSAVE+L3      MOVE YEAR
         BR    R14
**
**    FREE THIS SET OF COUNTERS AND CHECK FOR ANOTHER SET.  IF
**    YES, GO TO PRINT THE NEXT SET OF COUNTERS.
**
THEEND   STM   R14,R12,L12(R13)    SAVE ALL REGISTERS
         LR    R12,R13             SAVE THE SAVE ADDRESS
         LA    R13,FSAVE           POINT TO MY SAVE
         ST    R12,L4(R13)         SET CHAINING POINTERS
         ST    R13,L8(R12)
         L     R3,L4(R2)           PICK UP POINTER TO NEXT COUNTER
         LH    R0,SIZE             PICK UP SIZE OF AREA
         LR    R1,R2               SET ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3               ANY MORE COUNTERS
         BZ    RETURNO             NO RETURN
         LA    R5,PENTRY+L10       POINT TO TOP ENTRY LESS 4
         ST    R5,YR9PTR
         ST    R3,L28(R12)         SAVE POINTER IN REG SIZE   @ZA00435
         LA    R5,LABELS-L1        POINT TO FIRST LABEL LESS 1
         ST    R5,YLABEL           STORE IT IN TABLE
RETURNO  L     R13,L4(R13)         PICK UP &
         LM    R14,R12,L12(R13)    RESTORE REGS
         XC    VALINDX,VALINDX     CLEAR THE INDEX
         BR    R14
*
MVCNAME  MVC   L0(L8,R3),TERMN     TERMINAL NAME
         LA    R3,L3(R3)           INCREMENT LINE POINTER BY THREE
         BR    R14
*
SUB12    SH    R3,TWELVE           DECREMENT THE LINE POINTER
         BR    R14                 EXIT
SUB5     SH    R3,FIVE             DECREMENT THE LINE POINTER
         BR    R14                 EXIT
SUB8     SH    R3,EIGHT            DECREMENT THE LINE POINTER
         BR    R14                 EXIT
SUB7     SH    R3,SEVEN            DECREMENT THE LINE POINTER
         BR    R14                 EXIT
**
**   CHECK FOR THE NEXT ENTRY IN THE TABLE.  IF THERE IS ONE,
**   LOOP BACK TO PRINT IT.  IF NOT, TERMINATE THE SUMMARY SECTION.
**
NEXTVAL  STM   R5,R8,XSAVE         SAVE REGISTERS
         L     R5,VALINDX          INDEX INTO TABLE
         LA    R5,L32(R5)          NEXT ENTRY
         ST    R5,VALINDX          SAVE
         LA    R6,TERMN            ADDRESS OF START
         AR    R6,R5
         CLC   TERMN(L8),OVERFL    IS THIS THE 51ST ENTRY
         BE    THATSIT             YES,EXIT
         MVC   TERMN(L32),L0(R6)
         OC    TERMN(L12),TERMN    IS THE NAME ZEROS
         BZ    THATSIT             IF YES, EXIT
         LA    R6,OUTLOOP-L4
         LA    R7,OUTLOOP1-L1
         STM   R6,R7,YR9PTR        SAVE NEW POINTERS
THATSIT  LM    R5,R8,XSAVE
         SR    R15,R15             DONT PRINT THE LINE
         BR    R14
**
         DS    0D
XSAVE    DC    5F'0'
FSAVE    DS    18F
VALINDX  DC    F'0'
TWELVE   DC    H'12'
FIVE     DC    H'5'
SEVEN    DC    H'7'
EIGHT    DC    H'8'
SIZE     DC    AL2(TABSIZE)
OVERFL   DC    C'OVERFLOW'
SHARED   DC    C'SHARED'
         EJECT
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
         DC    X'01'
         DC    X'000B8B00'
         LABEL ' '
         LINE  (77,23),(1,88),SKIP=2
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE  YCPU,SETCPUNO
         LABEL '---SUMMARY OF ENTRY TYPE - 3705 MDR        DEVICE TYPE C
               3705          MODEL-','SERIAL NO.'
         LINE  ,(16,13),SKIP=1
         LABEL 'DAY YEAR','DAY YEAR'
         LINE  (16,13),(4,21),SKIP=2
         ROUTINE  TDAY1,SETDATE
         ROUTINE  TDAY2,SETDATE
         LABEL 'DATE RANGE-','TO'                                OM5193
         LINE  (26,49),(5,45)
         HEX   YCUA,0,3B
         CONVT YNOREC
         LABEL 'CHANNEL UNIT ADDRESS','TOTAL NUMBER OF RECORDS'
         LINE  ,,SKIP=1
         LABEL ' '
         LINE  ,(63,30)
         LABEL '- - - - - - - PERMANENT ERROR ',                       X
               'TYPES - - - - - - - -'
         LINE  ,(20,10)
         LABEL 'LIB',' ',' TEMP',' PERM'
         LINE  ,(1,30)
         LABEL 'TERM NAME   RIB   ADDR    # I/',                       X
               'O OPS    ERRORS    ERRORS     ',                       X
               '  HDWR    TM OUT   DATA CK   ',                        X
               '  RCV    ITV RQD    MISC'
         LINE
         LABEL ' '
OUTLOOP  LINE  (1,9),(60)
         ROUTINE TERMN,MVCNAME
         HEX   RESID1,0,2B
         ROUTINE TERMN,SUB12
         HEX   LIBADDR1,0,2B
         CONVT IOPS1,4,8
         ROUTINE TERMN,SUB5
         CONVT TEMPS1,2,6
         ROUTINE TERMN,SUB8
         CONVT PERMS1,2,6
         ROUTINE TERMN,SUB5
         CONVT HDWR1,2,5
         CONVT TMOUT1,2,5
         CONVT DATACK1,2,5
         ROUTINE TERMN,SUB7
         CONVT RCV1,2,5
         CONVT INTRQD1,2,5
         CONVT MISC1,2,5
OUTLOOP1 LABEL '%%'
         LINE
         ROUTINE TERMN,NEXTVAL
         LABEL ' '
         LINE
         ROUTINE TERMN,THEEND
         LABEL ' '
         DC    X'FF'
         DC    XL2'0000'
         DC    XL2'0018'
         DC    XL2'0000'
*
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
