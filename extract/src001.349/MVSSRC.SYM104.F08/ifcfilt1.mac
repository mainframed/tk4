         TITLE 'IFCFILT1-RECORD FILTER FOR EDIT AND SUMMARY            *
                        '
IFCFILT1 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFILT1  78.122'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*                  /*PROCESS ERROR RECORDS SEQUENTIALLY      @Z427VLS*/
*  IF DEBUG4 = ON THEN                                             0186
         TM    DEBUG4(R2),B'00001000'                              0186
         BNO   @RF00186                                            0186
*  DO;                                                     /*@Z427VLS*/
*   R15 = R12 - 27;                                        /*@Z427VLS*/
         LR    R15,R12                                             0188
         SL    R15,@CF00863                                        0188
*   GEN(MVC  PRINTBDY(16),0(R15));                         /*@Z427VLS*/
         MVC  PRINTBDY(16),0(R15)
*   PRINTADR = ADDR(PRINTLIN);                             /*@Z427VLS*/
         LA    @14,PRINTLIN                                        0190
         ST    @14,PRINTADR(,R2)                                   0190
*   CALL IOHND(RITEPRTR);                                  /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0191
         LA    @01,@AL00191                                        0191
         BALR  @14,@15                                             0191
*   R15 = ZERO;                                            /*@Z427VLS*/
         SLR   R15,R15                                             0192
*  END;                                                    /*@Z427VLS*/
*  CALL INITIATE;  /*GET CORE AND USER PROGRAM               @Z427VLS*/
@RF00186 BAL   @14,INITIATE                                        0194
*  R15 = ERROR; /*GET ANY PROBLEMS FROM INITIATE             @Z427VLS*/
         L     R15,ERROR                                           0195
*  DO WHILE R15 = SUCCESS & I <= MAXENT; /*DO IF ROOM I SORTABLE*/ 0196
         B     @DE00196                                            0196
@DL00196 DS    0H                                                  0197
*    CALL IOHND(READSEQ);                        /*GET A RECORD*/  0197
         L     @15,ADIOHND(,R2)                                    0197
         LA    @01,@AL00197                                        0197
         BALR  @14,@15                                             0197
*    IF R15 = SUCCESS THEN  /*CONTINUE IF NOT EOF OR UNREADABLE*/  0198
         LTR   R15,R15                                             0198
         BNZ   @RF00198                                            0198
*      DO;                                                 /*@Z427VLS*/
*        BUG(1) = BUG(1) + 1;   /*NUMBER OF RECORDS READ     @Z427VLS*/
         LA    @14,1                                               0200
         AL    @14,BUG                                             0200
         ST    @14,BUG                                             0200
*       IF (LRTKEY1 & GENREC) = HEXA0 × /* IF MCH OR CCH FRAME RECORD *
*        (LRTKEY1 & GENREC) = HEXB0 THEN                           0201
         MVC   @TS00001(1),LRTKEY1(R7)                             0201
         NI    @TS00001,X'F0'                                      0201
         CLI   @TS00001,X'A0'                                      0201
         BE    @RT00201                                            0201
         MVC   @TS00001(1),LRTKEY1(R7)                             0201
         NI    @TS00001,X'F0'                                      0201
         CLI   @TS00001,X'B0'                                      0201
         BNE   @RF00201                                            0201
@RT00201 DS    0H                                                  0202
*    DO;                                                   /*@G51DGGB*/
*    BUG(39) = BUG(39) + 1;                                /*@G51DGGB*/
         LA    @14,1                                               0203
         AL    @14,BUG+152                                         0203
         ST    @14,BUG+152                                         0203
*    IF (PMCH = ON × PCHAN = ON) THEN                              0204
         TM    PMCH(R2),B'11000000'                                0204
         BZ    @RF00204                                            0204
*       CALL CKFRAMES;             /*GO SEE IF WE DO ANY THING WITH IT*
         BAL   @14,CKFRAMES                                        0205
*     ELSE                                                         0206
*      BUG(37) = BUG(37) + ONE;                            /*@G51DGGB*/
         B     @RC00204                                            0206
@RF00204 LA    @14,1                                               0206
         AL    @14,BUG+144                                         0206
         ST    @14,BUG+144                                         0206
*    END;                                                  /*@G51DGGB*/
*      ELSE  /*NORMAL ERROR RECORD PROCESSING                @G51DGGB*/
*       DO;                                                /*@G51DGGB*/
         B     @RC00201                                            0208
@RF00201 DS    0H                                                  0209
*        CALL FILTER;          /*SELECT RECORD, BUILD SORTKEY*/    0209
         BAL   @14,FILTER                                          0209
*        IF PASSFLAG = YES THEN                                    0210
         TM    PASSFLAG(R2),B'00000001'                            0210
         BNO   @RF00210                                            0210
*          DO;                                             /*@Z427VLS*/
*            IF PACC = YES THEN    /*HISTORY D.S. TO BE CREATED*/  0212
         TM    PACC(R2),B'01000000'                                0212
         BNO   @RF00212                                            0212
*                CALL IOHND(RITEHIST);  /*WRITE TO ACCDEV    @Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0213
         LA    @01,@AL00213                                        0213
         BALR  @14,@15                                             0213
*            IF R15 = SUCCESS & PRINTES ^= NEITHER /*RECORDS PRINTED?*/
*              THEN DO;                                    /*@Z427VLS*/
@RF00212 LTR   R15,R15                                             0214
         BNZ   @RF00214                                            0214
         TM    PRINTES(R2),B'00011000'                             0214
         BZ    @RF00214                                            0214
*                SORTABLE(I) = WORKTABL;                   /*@Z427VLS*/
         L     @14,I                                               0216
         MH    @14,@CH00034                                        0216
         L     @08,SORTADR(,R2)                                    0216
         ALR   @08,@14                                             0216
         AL    @08,@CF01518                                        0216
         MVC   SORTABLE(10,@08),WORKTABL                           0216
*                IF PHIST = ON THEN /*IF HISTORY INPUT, MUST SAVE*/
         TM    PHIST(R2),B'00100000'                               0217
         BNO   @RF00217                                            0217
*                  DO;              /*RECORDS ON D.A.D.S.    @Z427VLS*/
*                    CALL IOHND(RITESCRT);                 /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0219
         LA    @01,@AL00219                                        0219
         BALR  @14,@15                                             0219
*                    IF R15 = OVERFLOW THEN /*SCRATCH D.S. TOO SMALL*/
         C     R15,@CF00066                                        0220
         BNE   @RF00220                                            0220
*                     DO;                                  /*@Z427VLS*/
*                      ZEROALL = NO; /*DONT CLEAR SERLOG IF ALL*/  0222
         NI    ZEROALL(R2),B'10111111'                             0222
*                      PASSNUM = PASSNUM - 1; /*NO ROOM FOR RECORD*/
         L     @14,PASSNUM                                         0223
         BCTR  @14,0                                               0223
         ST    @14,PASSNUM                                         0223
*                     END;                                 /*@Z427VLS*/
*                  END;              /*RECORDS NOT PROCESSED @Z427VLS*/
@RF00220 DS    0H                                                  0226
*                IF R15 = SUCCESS THEN  /*SAVE RECORD LOCATION AND*/
@RF00217 LTR   R15,R15                                             0226
         BNZ   @RF00226                                            0226
*                  DO;                  /*UPDATE INDEX TO NEXT */  0227
*                    SORTCCHR(I) = RECCCHHR; /*TABLE ENTRY.  @Z427VLS*/
         L     @14,I                                               0228
         LR    @08,@14                                             0228
         MH    @08,@CH00034                                        0228
         L     @06,SORTADR(,R2)                                    0228
         ALR   @06,@08                                             0228
         AL    @06,@CF01520                                        0228
         MVC   SORTCCHR-5(5,@06),RECCCHHR(R2)                      0228
*                    I = I + 1;                            /*@Z427VLS*/
         AL    @14,@CF00055                                        0229
         ST    @14,I                                               0229
*                  END;                                    /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
@RF00226 DS    0H                                                  0232
*          END;                                            /*@Z427VLS*/
@RF00214 DS    0H                                                  0233
* END;                                                     /*@G51DGGB*/
@RF00210 DS    0H                                                  0234
*      END;                                                /*@Z427VLS*/
@RC00201 DS    0H                                                  0235
*  END;                                                    /*@Z427VLS*/
@RF00198 DS    0H                                                  0235
@DE00196 LTR   R15,R15                                             0235
         BNZ   @DC00196                                            0235
         L     @14,I                                               0235
         C     @14,MAXENT                                          0235
         BNH   @DL00196                                            0235
@DC00196 DS    0H                                                  0236
*  ERROR = R15; /*TELL ENDOFILE ERROR STATUS                 @Z427VLS*/
         ST    R15,ERROR                                           0236
*  CALL ENDOFILE; /*SORT SORTABLE, FREE EXCESS CORE, HANDLE  @Z427VLS*/
         BAL   @14,ENDOFILE                                        0237
*                 /*ERROR CONDITIONS                         @Z427VLS*/
*  R15 = ERROR; /*PASS RETURN CODE TO USER                   @Z427VLS*/
         L     R15,ERROR                                           0238
*  IF DEBUG16 = ON THEN                                            0239
         TM    DEBUG16(R2),B'10000000'                             0239
         BNO   @RF00239                                            0239
*    CALL BUGCNTS; /*PRINT COUNTS OF DIFFERENT RECORDS PROCESSED*/ 0240
         BAL   @14,BUGCNTS                                         0240
*  IF DEBUG11 = ON THEN                                            0241
@RF00239 TM    DEBUG11(R2),B'00010000'                             0241
         BNO   @RF00241                                            0241
*    GEN(ABEND 120,DUMP); /*SHOW STATUS IF TESTING SITUATION @Z427VLS*/
         ABEND 120,DUMP
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*INITIATE: PROC; /*LOAD USER PROGRAM AND GET CORE FOR SORT TABLE*/ 0244
@EL00001 L     @13,4(,@13)                                         0244
@EF00001 DS    0H                                                  0244
@ER00001 L     @14,12(,@13)                                        0244
         LM    @00,@12,20(@13)                                     0244
         BR    @14                                                 0244
INITIATE STM   @14,@12,@SA00002                                    0244
*RESPECIFY(R0,R3,R15) RESTRICTED;                          /*@Z427VLS*/
*  R15 = ZERO;                                             /*@Z427VLS*/
         SLR   R15,R15                                             0246
*  IF USERPGM ^= BLANKS THEN /*IF USER PROGRAM EXISTS        @Z427VLS*/
         CLC   USERPGM(8,R2),@CC00977                              0247
         BE    @RF00247                                            0247
*    DO;                                                   /*@Z427VLS*/
*       BLDNAME = USERPGM;                                 /*@Z427VLS*/
         MVC   BLDNAME(8),USERPGM(R2)                              0249
*       GEN(BLDL  0,BLDLIST);                              /*@Z427VLS*/
         BLDL  0,BLDLIST
*       IF R15 ^= SUCCESS THEN /* USER PROGRAM NOT IN LIBRARY IF*/ 0251
         LTR   R15,R15                                             0251
         BZ    @RF00251                                            0251
*         DO;                  /* R15 NOT SUCCESS            @Z427VLS*/
*            MSGNO = 1; /*PRINT - CANT FIND USER PROGRAM     @Z427VLS*/
         MVI   MSGNO,X'01'                                         0253
*            CALL ERRMSG;                                  /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0254
*            R15 = TERMINAT;                               /*@Z427VLS*/
         LA    R15,12                                              0255
*         END;                                             /*@Z427VLS*/
*       ELSE                                                       0257
*         DO;                                              /*@Z427VLS*/
         B     @RC00251                                            0257
@RF00251 DS    0H                                                  0258
*             GEN(LOADEREP EPLOC=BLDNAME);  /*LOAD USER PROGRAM INTO */
         LOADEREP EPLOC=BLDNAME
*            USERLOC = R0;          /*VIRTUAL STORAGE AND    @Z427VLS*/
         ST    R0,USERLOC                                          0259
*         END;                      /*SAVE ITS LOCATION      @Z427VLS*/
*    END;                                                  /*@Z427VLS*/
@RC00251 DS    0H                                                  0262
*  IF R15 = SUCCESS THEN /*IF SUCCESSFUL LOAD OR NO USER PROGRAM*/ 0262
@RF00247 LTR   R15,R15                                             0262
         BNZ   @RF00262                                            0262
*    DO;                                                   /*@Z427VLS*/
*      IF PEDIT = ON × PSUM = ON THEN /*SORTABLE BUILT IF EDIT OR*/
         TM    PEDIT(R2),B'00011000'                               0264
         BZ    @RF00264                                            0264
*        DO;                          /*SUMMARY PRINTING     @Z427VLS*/
*           MAXENT = TABSIZE / 10; /*MAX SORT TABLE ENTRY    @Z427VLS*/
         L     @14,TABSIZE(,R2)                                    0266
         LR    @04,@14                                             0266
         SRDA  @04,32                                              0266
         D     @04,@CF00034                                        0266
         ST    @05,MAXENT                                          0266
*           R0     = TABSIZE; /*AMOUNT OF CORE FOR GETMAIN   @Z427VLS*/
         LR    R0,@14                                              0267
*           GEN(GETMAIN EC,LV=(R0),A=GETADR); /*CONDITIONAL GETMAIN*/
         GETMAIN EC,LV=(R0),A=GETADR
*           IF R15 ^= SUCCESS THEN  /*IF CANT GET CORE, TELL WORLD*/
         LTR   R15,R15                                             0269
         BZ    @RF00269                                            0269
*             DO;                                          /*@Z427VLS*/
*               MSGNO = 2;                                 /*@Z427VLS*/
         MVI   MSGNO,X'02'                                         0271
*               CALL ERRMSG;                               /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0272
*               R15 = NOSRTABL;                            /*@Z427VLS*/
         LA    R15,12                                              0273
*               GETFAIL = YES;                             /*@0001VLS*/
         OI    GETFAIL,B'00010000'                                 0274
*             END;                                         /*@Z427VLS*/
*           ELSE                                                   0276
*             SORTADR = GETADR; /*SET SORTABLE ADDRESS BASE  @Z427VLS*/
         B     @RC00269                                            0276
@RF00269 L     @14,GETADR                                          0276
         ST    @14,SORTADR(,R2)                                    0276
*         END;                                             /*@Z427VLS*/
*       ELSE                                                       0278
*         MAXENT = MAXMAX; /*IF NO TABLES, SET BIG ARBITRARY LOOP LIM*/
         B     @RC00264                                            0278
@RF00264 MVC   MAXENT(4),@CF01046                                  0278
*     END;                                                 /*@Z427VLS*/
*  ELSE                                                            0280
*    MAXENT = MAXMAX;     /* AVOID MSG # 64 IN EOF           @G51DGGB*/
         B     @RC00262                                            0280
@RF00262 MVC   MAXENT(4),@CF01046                                  0280
*IF R15 = SUCCESS &  /*IF OTHER GETMAINS HAVE BEEN SUCCESSFULL  */ 0281
*         (PMCH = ON × PCHAN = ON) THEN /*IF MCH OR CCH SELECTED*/ 0281
@RC00262 LTR   R15,R15                                             0281
         BNZ   @RF00281                                            0281
         TM    PMCH(R2),B'11000000'                                0281
         BZ    @RF00281                                            0281
*  DO;                                                     /*@G51DGGB*/
*    R0 = FRAMBENT * EVMAX; /*NUMBER OF ENTRIES TIMES BYTES PER ENTRY*/
         LA    R0,384                                              0283
*    R0 = R0 + 4;           /*ADD FRAMENUM LENGTH            @G51DGGB*/
         AL    R0,@CF00064                                         0284
*    GEN(GETMAIN EC,LV=(0),A=TEMPSAV,SP=21);               /*@G51DGGB*/
         GETMAIN EC,LV=(0),A=TEMPSAV,SP=21
*    FRAMEPTR = TEMPSAV;                                   /*@G51DGGB*/
         L     @14,TEMPSAV                                         0286
         ST    @14,FRAMEPTR(,R2)                                   0286
*    IF R15 = SUCCESS THEN   /*IF GETMAIN SUCCESSFULL        @G51DGGB*/
         LTR   R15,R15                                             0287
         BNZ   @RF00287                                            0287
*      DO;                                                 /*@G51DGGB*/
*       BUG(42) = BUG(42) + 1;                             /*@G51DGGB*/
         LA    @14,1                                               0289
         L     @08,BUG+164                                         0289
         ALR   @08,@14                                             0289
         ST    @08,BUG+164                                         0289
*        DO Y = 1 BY 1 TO EVMAX; /*CLEAR FRAMETAB TO ZEROS   @G51DGGB*/
         ST    @14,Y                                               0290
@DL00290 DS    0H                                                  0291
*          FRAMEDTA(Y) = (FRAMEDTA(Y) && FRAMEDTA(Y));     /*@G51DGGB*/
         LR    @08,@14                                             0291
         MH    @08,@CH00227                                        0291
         L     @01,FRAMEPTR(,R2)                                   0291
         ALR   @01,@08                                             0291
         AL    @01,@CF01522                                        0291
         XC    FRAMEDTA-4(24,@01),FRAMEDTA-4(@01)                  0291
*        END;                                              /*@G51DGGB*/
         AL    @14,@CF00055                                        0292
         ST    @14,Y                                               0292
         C     @14,@CF00088                                        0292
         BNH   @DL00290                                            0292
*        FRAMENUM = ZERO;                                  /*@G51DGGB*/
         L     @01,FRAMEPTR(,R2)                                   0293
         SLR   @14,@14                                             0293
         ST    @14,FRAMENUM(,@01)                                  0293
*      END;                                                /*@G51DGGB*/
*  ELSE  /*UNSUCCESSFULL GETMAIN                             @G51DGGB*/
*    DO;                                                   /*@G51DGGB*/
         B     @RC00287                                            0295
@RF00287 DS    0H                                                  0296
*      MSGNO = XX;   /*ERROR MESSAGE NUMBER                  @G51DGGB*/
         MVI   MSGNO,X'08'                                         0296
*      CALL ERRMSG;  /*PRINT ERROR MESSAGE                   @G51DGGB*/
         BAL   @14,ERRMSG                                          0297
*      R15 = TWELVE;  /*DONT CONTINUE RETURN CODE            @G51DGGB*/
         LA    @08,12                                              0298
         LR    R15,@08                                             0298
*      ERROR = 12;                                         /*@G51DGGB*/
         ST    @08,ERROR                                           0299
*    END;                                                  /*@G51DGGB*/
* END; /*END OF FRAMETAB GETMAIN                             @G51DGGB*/
@RC00287 DS    0H                                                  0302
*ERROR = R15; /*TELL MAIN PROC IF ERROR CONDITION            @Z427VLS*/
@RF00281 ST    R15,ERROR                                           0302
*RESPECIFY(R0,R1,R15) UNRESTRICTED;                        /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00002 DS    0H                                                  0304
@EF00002 DS    0H                                                  0304
@ER00002 LM    @14,@12,@SA00002                                    0304
         BR    @14                                                 0304
*ENDOFILE: PROC; /*SORT SORTABLE AND PASS RETURN CODE TO EREP1*/   0305
ENDOFILE STM   @14,@12,@SA00003                                    0305
*RESPECIFY(R15) RESTRICTED;                                /*@Z427VLS*/
*IF ERROR = OVERFLOW & PHIST = ON & PLOGREC = OFF THEN             0307
         CLC   ERROR(4),@CF00066                                   0307
         BNE   @RF00307                                            0307
         TM    PHIST(R2),B'00100000'                               0307
         BNO   @RF00307                                            0307
         TM    PLOGREC(R2),B'00000010'                             0307
         BNZ   @RF00307                                            0307
*  DO;                                                     /*@0001VLS*/
*    CLOSEIO = (CLOSEIO && CLOSEIO);                       /*@0001VLS*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0309
*    CACCIN = ON;                                          /*@0001VLS*/
         OI    CACCIN(R2),B'00010000'                              0310
*    CALL IOHND(IOCLOSE);                                  /*@0001VLS*/
         L     @15,ADIOHND(,R2)                                    0311
         LA    @01,@AL00311                                        0311
         BALR  @14,@15                                             0311
*  END;                                                    /*@0001VLS*/
*R15 = ERROR; /*GET MAIN PROCEDURE ERROR STATUS              @Z427VLS*/
@RF00307 L     R15,ERROR                                           0313
*IF R15 = OVERFLOW × R15 = ENDFILE THEN                            0314
         C     R15,@CF00066                                        0314
         BE    @RT00314                                            0314
         C     R15,@CF00064                                        0314
         BNE   @RF00314                                            0314
@RT00314 DS    0H                                                  0315
*  R15 = ZERO;          /*DOESNT NEED TO KNOW                @Z427VLS*/
         SLR   R15,R15                                             0315
*IF MAXENT < I & ERROR ^= ENDFILE & GETFAIL = NO THEN              0316
@RF00314 L     @14,MAXENT                                          0316
         C     @14,I                                               0316
         BNL   @RF00316                                            0316
         CLC   ERROR(4),@CF00064                                   0316
         BE    @RF00316                                            0316
         TM    GETFAIL,B'00010000'                                 0316
         BNZ   @RF00316                                            0316
*  DO;                   /*WORLD, DONT TELL EREP1, DONT LET LOGREC*/
*    ZEROALL = NO;       /*BE RESET.                         @Z427VLS*/
         NI    ZEROALL(R2),B'10111111'                             0318
*    MSGNO = 3;                                            /*@Z427VLS*/
         MVI   MSGNO,X'03'                                         0319
*    CALL ERRMSG;                                          /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0320
*    ERROR = ZERO;                                         /*@0001VLS*/
         SLR   @14,@14                                             0321
         ST    @14,ERROR                                           0321
*  END;                                                    /*@Z427VLS*/
*IF ERROR = OVERFLOW × ERROR = ENDFILE THEN                        0323
@RF00316 L     @14,ERROR                                           0323
         C     @14,@CF00066                                        0323
         BE    @RT00323                                            0323
         C     @14,@CF00064                                        0323
         BNE   @RF00323                                            0323
@RT00323 DS    0H                                                  0324
*  ERROR = ZERO;                                           /*@0001VLS*/
         SLR   @14,@14                                             0324
         ST    @14,ERROR                                           0324
* IF DEBUG16 = ON THEN                                             0325
@RF00323 TM    DEBUG16(R2),B'10000000'                             0325
         BNO   @RF00325                                            0325
*  DO;                                                     /*@0099VLS*/
*BINWORD = BUG(1);                                         /*@G51DGGB*/
         L     @14,BUG                                             0327
         ST    @14,BINWORD                                         0327
*CALL IFCMSG(83,ADDR(PRINTBDY));                           /*@G51DGGB*/
         LA    @14,PRINTBDY                                        0328
         ST    @14,@AFTEMPS                                        0328
         L     @15,ADIFCMSG(,R2)                                   0328
         LA    @01,@AL00328                                        0328
         BALR  @14,@15                                             0328
*  GEN(MVC  PRINTBDY(7),BUG16);                            /*@0099VLS*/
         MVC  PRINTBDY(7),BUG16
*DECADDR= ADDR(PRINTBDY) + 7;                              /*@G51DGGB*/
         LA    @14,PRINTBDY                                        0330
         AL    @14,@CF00083                                        0330
         ST    @14,DECADDR                                         0330
*CALL CONVBIN;                                             /*@G51DGGB*/
         BAL   @14,CONVBIN                                         0331
*CALL PRINTIT;                                             /*@G51DGGB*/
         BAL   @14,PRINTIT                                         0332
*  END;                                                    /*@0099VLS*/
*CALL IFCMSG(54,ADDR(PRINTBDY));                           /*@G51DGGB*/
@RF00325 LA    @14,PRINTBDY                                        0334
         ST    @14,@AFTEMPS                                        0334
         L     @15,ADIFCMSG(,R2)                                   0334
         LA    @01,@AL00334                                        0334
         BALR  @14,@15                                             0334
*DECADDR = ADDR(PRINTBDY) + 7; /*WHERE TO PUT CONVERTED VALUE*/    0335
         LA    @14,PRINTBDY                                        0335
         AL    @14,@CF00083                                        0335
         ST    @14,DECADDR                                         0335
*DECADDR = ADDR(PRINTBDY) + 7; /*WHERE TO PUT CONVERTED VALUE*/    0336
         ST    @14,DECADDR                                         0336
*BINWORD  = PASSNUM;                                       /*@G51DGGB*/
         L     @14,PASSNUM                                         0337
         ST    @14,BINWORD                                         0337
*CALL CONVBIN;                                             /*@G51DGGB*/
         BAL   @14,CONVBIN                                         0338
*CALL PRINTIT;                                             /*@G51DGGB*/
         BAL   @14,PRINTIT                                         0339
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        0340
         ST    @14,PRINTADR(,R2)                                   0340
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0341
         LA    @01,@AL00341                                        0341
         BALR  @14,@15                                             0341
*IF PHIST = ON THEN                 /*HAVE TO CLOSE THE DIRECTWK */
         TM    PHIST(R2),B'00100000'                               0342
         BNO   @RF00342                                            0342
*  DO;                                                     /*@G51DGGB*/
*   CLOSEIO = CLOSEIO && CLOSEIO;                          /*@G51DGGB*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0344
*   CDRCTWRK= ON;                   /*SET THE FLAG TO ON     @G51DGGB*/
         OI    CDRCTWRK(R2),B'00000010'                            0345
*   CALL IOHND(IOCLOSE);                                   /*@G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0346
         LA    @01,@AL00346                                        0346
         BALR  @14,@15                                             0346
*  END;                                                    /*@G51DGGB*/
*IF FRAMEPTR ^= 0 & FRAMENUM ^= 0 THEN                             0348
@RF00342 SLR   @14,@14                                             0348
         L     @08,FRAMEPTR(,R2)                                   0348
         CR    @08,@14                                             0348
         BE    @RF00348                                            0348
         C     @14,FRAMENUM(,@08)                                  0348
         BE    @RF00348                                            0348
* DO J = 1 BY 1 TO FRAMENUM;                               /*@G51DGGB*/
         LA    @14,1                                               0349
         ST    @14,J                                               0349
         B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
*  IF FRAMETYP(J) = ALLALL THEN                                    0350
         MH    @14,@CH00227                                        0350
         L     @08,FRAMEPTR(,R2)                                   0350
         ALR   @08,@14                                             0350
         AL    @08,@CF01524                                        0350
         CLI   FRAMETYP-17(@08),X'FF'                              0350
         BNE   @RF00350                                            0350
*   BUG(38) = BUG(38) + 1;                                 /*@G51DGGB*/
         LA    @14,1                                               0351
         AL    @14,BUG+148                                         0351
         ST    @14,BUG+148                                         0351
* END;                                                     /*@G51DGGB*/
@RF00350 LA    @14,1                                               0352
         AL    @14,J                                               0352
         ST    @14,J                                               0352
@DE00349 L     @08,FRAMEPTR(,R2)                                   0352
         C     @14,FRAMENUM(,@08)                                  0352
         BNH   @DL00349                                            0352
*IF ERROR < TWELVE & FRAMEPTR ^= 0                                 0353
*   &  FRAMENUM > ZERO THEN /* IF FRAMES CPUS FOUND          @G51DGGB*/
@RF00348 L     @14,ERROR                                           0353
         C     @14,@CF00032                                        0353
         BNL   @RF00353                                            0353
         SLR   @14,@14                                             0353
         L     @08,FRAMEPTR(,R2)                                   0353
         CR    @08,@14                                             0353
         BE    @RF00353                                            0353
         C     @14,FRAMENUM(,@08)                                  0353
         BNL   @RF00353                                            0353
*    CALL WRITEFRM;                                        /*@G51DGGB*/
         BAL   @14,WRITEFRM                                        0354
*IF ERROR ^= NOSRTABL & (PSUM = ON × PEDIT = ON) THEN              0355
@RF00353 CLC   ERROR(4),@CF00032                                   0355
         BE    @RF00355                                            0355
         TM    PSUM(R2),B'00011000'                                0355
         BZ    @RF00355                                            0355
* DO;                                                      /*@Z427VLS*/
*   SORTNUM = PASSNUM;     /*TELL EREP1 HOW MANY RECORDS IN SORTABLE*/
         L     @14,PASSNUM                                         0357
         ST    @14,SORTNUM(,R2)                                    0357
*   EXCESS = TABSIZE - (PASSNUM * SORTELNT); /*UNUSED SORTABLE*/   0358
         L     @08,TABSIZE(,R2)                                    0358
         MH    @14,@CH00034                                        0358
         LCR   @14,@14                                             0358
         ALR   @14,@08                                             0358
         ST    @14,EXCESS                                          0358
*   IF EXCESS > 16 THEN  /*IF AT LEAST ONE DOUBLEWORD AFTER ROUNDING*/
         C     @14,@CF00088                                        0359
         BNH   @RF00359                                            0359
*   DO;                                                    /*@Z427VLS*/
*     EXCESS = (EXCESS & DBWRD); /*ROUND DOWN TO DOUBLE WORD AMMOUNT*/
         N     @14,@CF01049                                        0361
         ST    @14,EXCESS                                          0361
*     RESPECIFY (R0,R1) RESTRICTED;                        /*@Z427VLS*/
*     R0 = EXCESS;                                         /*@Z427VLS*/
         LR    R0,@14                                              0363
*     R1 = SORTADR + TABSIZE - EXCESS; /*POINT TO BEGINNING OF UNUSED*/
         AL    @08,SORTADR(,R2)                                    0364
         SLR   @08,@14                                             0364
         LR    R1,@08                                              0364
*     GEN(FREEMAIN  R,LV=(0),A=(1));                       /*@Z427VLS*/
         FREEMAIN  R,LV=(0),A=(1)
*   END;                                                   /*@Z427VLS*/
*   RESPECIFY(R0,R1) UNRESTRICTED;                         /*@Z427VLS*/
@RF00359 DS    0H                                                  0368
*  END;                                                    /*@Z427VLS*/
*CLOSEIO = '0000'X; /*DONT CLOSE UNNECESSARY DATA SETS       @Z427VLS*/
@RF00355 MVC   CLOSEIO(2,R2),@CB00208                              0369
*IF PACC = YES THEN  /*IF WROTE RECORDS TO ACCDEV, THEN BETTER CLOSE*/
         TM    PACC(R2),B'01000000'                                0370
         BNO   @RF00370                                            0370
*  CACCDEV = ON;                                           /*@Z427VLS*/
         OI    CACCDEV(R2),B'00001000'                             0371
*IF CACCDEV = ON × CDRCTWRK = ON THEN                              0372
@RF00370 TM    CACCDEV(R2),B'00001010'                             0372
         BZ    @RF00372                                            0372
*  CALL IOHND(IOCLOSE);                                    /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0373
         LA    @01,@AL00373                                        0373
         BALR  @14,@15                                             0373
*IF PASSNUM = ZERO THEN     /*IF NO RECORDS, EREP1 SHOULD QUIT*/   0374
@RF00372 L     @14,PASSNUM                                         0374
         LTR   @14,@14                                             0374
         BNZ   @RF00374                                            0374
*  ERROR = TERMINAT;                                       /*@0001VLS*/
         MVC   ERROR(4),@CF00032                                   0375
*IF ERROR = SUCCESS & PRINTES ^= NEITHER THEN                      0376
@RF00374 L     @14,ERROR                                           0376
         LTR   @14,@14                                             0376
         BNZ   @RF00376                                            0376
         TM    PRINTES(R2),B'00011000'                             0376
         BZ    @RF00376                                            0376
* DO;                                                      /*@Z427VLS*/
*  CALL SIFTSORT;                                          /*@Z427VLS*/
         BAL   @14,SIFTSORT                                        0378
*  CALL FREETAB; /*FREE CORE FOR PARAMETER TABLES NO LONGER USED*/ 0379
         BAL   @14,FREETAB                                         0379
* END;                                                     /*@Z427VLS*/
*RESPECIFY    (R15) UNRESTRICTED;                          /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00003 DS    0H                                                  0382
@EF00003 DS    0H                                                  0382
@ER00003 LM    @14,@12,@SA00003                                    0382
         BR    @14                                                 0382
*FILTER: PROC; /*FILTER RECORDS AND SAVE SORT INFORMATION    @Z427VLS*/
FILTER   STM   @14,@12,@SA00004                                    0383
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*CALL ALLREC;  /*RECORD HEADER CHECKS                        @Z427VLS*/
         BAL   @14,ALLREC                                          0385
*IF PASSFLAG = ON THEN                                             0386
         TM    PASSFLAG(R2),B'00000001'                            0386
         BNO   @RF00386                                            0386
*  DO;                                                     /*@Z427VLS*/
*    CALL RECDEP; /* RECORD BODY CHECKS- SOME DEVICE DEPENDENT*/   0388
         BAL   @14,RECDEP                                          0388
*    IF PASSFLAG = ON THEN                                         0389
         TM    PASSFLAG(R2),B'00000001'                            0389
         BNO   @RF00389                                            0389
*      DO;                                                 /*@Z427VLS*/
*        /*IF FURTHER CHECKS LIKE SYMCDE, WHICH ASSUME ALL OTHER*/ 0391
*        /*SELECTIONS HAVE ALREADY BEEN DONE, LOAD SPECIAL PROGRAM*/
*        IF USERPGM ^= BLANKS THEN                                 0391
         CLC   USERPGM(8,R2),@CC00977                              0391
         BE    @RF00391                                            0391
*          DO;                                             /*@Z427VLS*/
*            GEN(L R15,USERLOC);                           /*@Z427VLS*/
         L R15,USERLOC
*            GEN(BALR  R14,R15);                           /*@Z427VLS*/
         BALR  R14,R15
*          END;                                            /*@Z427VLS*/
*        IF PASSFLAG = YES THEN  /*USER PROGRAM GETS PASSFLAG FROM*/
@RF00391 TM    PASSFLAG(R2),B'00000001'                            0396
         BNO   @RF00396                                            0396
*                                /*PARM TABLE ADDRESSED BY REG2*/  0397
*          PASSNUM = PASSNUM + 1;                          /*@Z427VLS*/
         LA    @14,1                                               0397
         AL    @14,PASSNUM                                         0397
         ST    @14,PASSNUM                                         0397
*      END;                                                /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*END;                                                      /*@Z427VLS*/
@EL00004 DS    0H                                                  0401
@EF00004 DS    0H                                                  0401
@ER00004 LM    @14,@12,@SA00004                                    0401
         BR    @14                                                 0401
*ALLREC: PROC;  /*RECORD DEPENDENT SELECTION CRITTERIA       @Z427VLS*/
ALLREC   STM   @14,@12,12(@13)                                     0402
*               /*COMPARE RECORD ITEMS PRECEEDED BY          @Z427VLS*/
*               /* LRT TO PARAMETER TABLE SELECTION          @Z427VLS*/
*               /*VALUES AND RANGES                          @Z427VLS*/
*PASSFLAG = YES; /*RECORD SELECTED IF PASSFLAG NOT SET TO NO @Z427VLS*/
         OI    PASSFLAG(R2),B'00000001'                            0403
*/*RECORD IS PASSED IF IT IS IN DATE RANGE. TIME RANGE MAY BE COM*/
*/*POSED OF TWO RANGES IF A MIDNIGHT IS CROSSED. IF TIME IS  @Z427VLS*/
*/*SPECIFIED, THEN DATE MUST BE SPECIFIED ALSO TO ELIMINATE  @Z427VLS*/
*/*PROBLEMS ELIMINATING INTERVALS IF THIRD SHIFT IS CROSSED  @Z427VLS*/
*IF LRTDATE >= STDATE & LRTDATE <= ENDDATE THEN                    0404
         CLC   LRTDATE(4,R7),STDATE(R2)                            0404
         BL    @RF00404                                            0404
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           0404
         BH    @RF00404                                            0404
*  DO;                                                     /*@Z427VLS*/
*    IF (LRTTIME >= STTIME1 & LRTTIME <= ENDTIME1) ×               0406
*       (LRTTIME >= STTIME2 & LRTTIME <= ENDTIME2) THEN            0406
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0406
         BL    @GL00016                                            0406
         CLC   LRTTIME(4,R7),ENDTIME1(R2)                          0406
         BNH   @RT00406                                            0406
@GL00016 CLC   LRTTIME(4,R7),STTIME2(R2)                           0406
         BL    @RF00406                                            0406
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0406
         BH    @RF00406                                            0406
@RT00406 DS    0H                                                  0407
*      DO;                                                 /*@Z427VLS*/
*        IF CPUPTR ^= ZERO THEN /*IF TABLE OF ALLOWABLE CPU SERIAL*/
         L     @14,CPUPTR(,R2)                                     0408
         LTR   @14,@14                                             0408
         BZ    @RF00408                                            0408
*                               /*NUMBERS EXISTS THEN        @Z427VLS*/
*          DO;                                             /*@Z427VLS*/
*            CPUOK = NO;                                   /*@Z427VLS*/
         NI    CPUOK,B'11011111'                                   0410
*            DO J = 1 BY 1 TO CPUNUM WHILE CPUOK = NO;     /*@Z427VLS*/
         LA    @14,1                                               0411
         ST    @14,J                                               0411
         B     @DE00411                                            0411
@DL00411 TM    CPUOK,B'00100000'                                   0411
         BNZ   @DC00411                                            0411
*              IF CPUVAL(J) = LRTCPMOD THEN CPUOK = YES;   /*@Z427VLS*/
         MH    @14,@CH00079                                        0412
         L     @08,CPUPTR(,R2)                                     0412
         ALR   @08,@14                                             0412
         AL    @08,@CF01528                                        0412
         CLC   CPUVAL-2(5,@08),LRTCPMOD(R7)                        0412
         BNE   @RF00412                                            0412
         OI    CPUOK,B'00100000'                                   0413
*            END;                                          /*@Z427VLS*/
@RF00412 LA    @14,1                                               0414
         AL    @14,J                                               0414
         ST    @14,J                                               0414
@DE00411 L     @08,CPUPTR(,R2)                                     0414
         CH    @14,CPUNUM(,@08)                                    0414
         BNH   @DL00411                                            0414
@DC00411 DS    0H                                                  0415
*            IF CPUOK = NO THEN                                    0415
         TM    CPUOK,B'00100000'                                   0415
         BNZ   @RF00415                                            0415
*              DO;                                         /*@Z427VLS*/
*                PASSFLAG = NO;                            /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0417
*                BUG(4) = BUG(4) + 1;                      /*@Z427VLS*/
         LA    @14,1                                               0418
         AL    @14,BUG+12                                          0418
         ST    @14,BUG+12                                          0418
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00415 DS    0H                                                  0421
*        IF PASSFLAG = YES & MODPTR ^= ZERO THEN                   0421
@RF00408 TM    PASSFLAG(R2),B'00000001'                            0421
         BNO   @RF00421                                            0421
         L     @14,MODPTR(,R2)                                     0421
         LTR   @14,@14                                             0421
         BZ    @RF00421                                            0421
*          DO;     /*DO IF MODEL ID. SELECTED                @Z427VLS*/
*            MODOK = NO;                                   /*@Z427VLS*/
         NI    MODOK,B'11101111'                                   0423
*            DO J = 1 BY 1 TO MODNUM WHILE MODOK = NO;     /*@Z427VLS*/
         LA    @14,1                                               0424
         ST    @14,J                                               0424
         B     @DE00424                                            0424
@DL00424 TM    MODOK,B'00010000'                                   0424
         BNZ   @DC00424                                            0424
*              IF LRTMODEL = MODVAL(J) THEN MODOK = YES;   /*@Z427VLS*/
         ALR   @14,@14                                             0425
         L     @08,MODPTR(,R2)                                     0425
         ALR   @08,@14                                             0425
         CLC   LRTMODEL(2,R7),MODVAL-2(@08)                        0425
         BNE   @RF00425                                            0425
         OI    MODOK,B'00010000'                                   0426
*            END;                                          /*@Z427VLS*/
@RF00425 LA    @14,1                                               0427
         AL    @14,J                                               0427
         ST    @14,J                                               0427
@DE00424 L     @08,MODPTR(,R2)                                     0427
         CH    @14,MODNUM(,@08)                                    0427
         BNH   @DL00424                                            0427
@DC00424 DS    0H                                                  0428
*            IF MODOK = NO THEN                                    0428
         TM    MODOK,B'00010000'                                   0428
         BNZ   @RF00428                                            0428
*              DO;                                         /*@Z427VLS*/
*                PASSFLAG = NO;                            /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0430
*                BUG(5) = BUG(5) + 1;                      /*@Z427VLS*/
         LA    @14,1                                               0431
         AL    @14,BUG+16                                          0431
         ST    @14,BUG+16                                          0431
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00428 DS    0H                                                  0434
*          /*ELIMINATE NON THIRD SHIFT INTERVALS IF MIDNIGHT @Z427VLS*/
*          /*BOUNDARY HAS BEEN CROSSED IN TIME INTERVAL      @Z427VLS*/
*        IF SHIFT3RD = ON & PASSFLAG = YES &                       0434
*          ((LRTDATE = STDATE & LRTTIME < STTIME1) ×               0434
*           (LRTDATE = ENDDATE & LRTTIME > ENDTIME2))              0434
*           THEN                                                   0434
@RF00421 TM    SHIFT3RD(R2),B'00010000'                            0434
         BNO   @RF00434                                            0434
         TM    PASSFLAG(R2),B'00000001'                            0434
         BNO   @RF00434                                            0434
         CLC   LRTDATE(4,R7),STDATE(R2)                            0434
         BNE   @GL00022                                            0434
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0434
         BL    @RT00434                                            0434
@GL00022 CLC   LRTDATE(4,R7),ENDDATE(R2)                           0434
         BNE   @RF00434                                            0434
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0434
         BNH   @RF00434                                            0434
@RT00434 DS    0H                                                  0435
*             DO;                                          /*@Z427VLS*/
*               PASSFLAG = NO;                             /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0436
*               BUG(6) = BUG(6) + 1;                       /*@Z427VLS*/
         LA    @14,1                                               0437
         AL    @14,BUG+20                                          0437
         ST    @14,BUG+20                                          0437
*             END;                                         /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0440
*      DO;                                                 /*@Z427VLS*/
         B     @RC00406                                            0440
@RF00406 DS    0H                                                  0441
*        PASSFLAG = NO;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0441
*        BUG(3) = BUG(3) + 1;                              /*@Z427VLS*/
         LA    @14,1                                               0442
         AL    @14,BUG+8                                           0442
         ST    @14,BUG+8                                           0442
*      END;                                                /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*  ELSE                                                            0445
*    DO;                                                   /*@Z427VLS*/
         B     @RC00404                                            0445
@RF00404 DS    0H                                                  0446
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0446
*      BUG(2) = BUG(2) + 1;                                /*@Z427VLS*/
         LA    @14,1                                               0447
         AL    @14,BUG+4                                           0447
         ST    @14,BUG+4                                           0447
*    END;                                                  /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00005 DS    0H                                                  0449
@EF00005 DS    0H                                                  0449
@ER00005 LM    @14,@12,12(@13)                                     0449
         BR    @14                                                 0449
*RECDEP: PROC; /*IDENTIFY RECORD TYPE, SET SORT TABLE KEY    @Z427VLS*/
RECDEP   STM   @14,@12,@SA00006                                    0450
*              /*PERFORM FILTERING                           @Z427VLS*/
*WORKTABL = (WORKTABL && WORKTABL); /*CLEAR SORTABLE WORK AREA*/   0451
         XC    WORKTABL(10),WORKTABL                               0451
*WORKMOD = LRTMODEL; /*NO LONGER MASK OFF LEFTMOST HALF BYTE @Z427VLS*/
         MVC   WORKMOD(2),LRTMODEL(R7)                             0452
*WORKTYPE = (LRTKEY1 & GENREC); /*JUST LOOK AT GENERAL RECORD TYPE*/
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0453
         NI    WORKTYPE,X'F0'                                      0453
*IF LRTRUNC = ON × (WORKTYPE < HEX10) /*IF INCOMPLETE OR UNKNOWN REC*/
*                × (WORKTYPE > HEX90) THEN                         0454
         TM    LRTRUNC(R7),B'00100000'                             0454
         BO    @RT00454                                            0454
         CLI   WORKTYPE,X'10'                                      0454
         BL    @RT00454                                            0454
         CLI   WORKTYPE,X'90'                                      0454
         BNH   @RF00454                                            0454
@RT00454 DS    0H                                                  0455
*   WORKTYPE = UNKNOWN;                                    /*@Z427VLS*/
         MVI   WORKTYPE,X'FF'                                      0455
*ELSE                                                              0456
*  DO;                                                     /*@Z427VLS*/
         B     @RC00454                                            0456
@RF00454 DS    0H                                                  0457
*    IF WORKTYPE = HEX30 THEN                                      0457
         CLI   WORKTYPE,X'30'                                      0457
         BNE   @RF00457                                            0457
*      CALL OBRFILT;                                       /*@Z427VLS*/
         BAL   @14,OBRFILT                                         0458
*    ELSE                                                          0459
*      DO;                                                 /*@Z427VLS*/
         B     @RC00457                                            0459
@RF00457 DS    0H                                                  0460
*        IF WORKTYPE = HEX90 THEN                                  0460
         CLI   WORKTYPE,X'90'                                      0460
         BNE   @RF00460                                            0460
*          CALL MDRFILT;                                   /*@Z427VLS*/
         BAL   @14,MDRFILT                                         0461
*        ELSE                                                      0462
*          DO;                                             /*@Z427VLS*/
         B     @RC00460                                            0462
@RF00460 DS    0H                                                  0463
*            IF WORKTYPE = HEX10 THEN                              0463
         CLI   WORKTYPE,X'10'                                      0463
         BNE   @RF00463                                            0463
*              CALL MCHFILT;                               /*@Z427VLS*/
         BAL   @14,MCHFILT                                         0464
*            ELSE                                                  0465
*             DO;                                          /*@Z427VLS*/
         B     @RC00463                                            0465
@RF00463 DS    0H                                                  0466
*               IF WORKTYPE = HEX20 THEN                           0466
         CLI   WORKTYPE,X'20'                                      0466
         BNE   @RF00466                                            0466
*                 CALL CCHFILT;                            /*@Z427VLS*/
         BAL   @14,CCHFILT                                         0467
*               ELSE                                               0468
*                DO;                                       /*@Z427VLS*/
         B     @RC00466                                            0468
@RF00466 DS    0H                                                  0469
*                   IF WORKTYPE = HEX40 THEN                       0469
         CLI   WORKTYPE,X'40'                                      0469
         BNE   @RF00469                                            0469
*                     CALL SOFTFILT;                       /*@Z427VLS*/
         BAL   @14,SOFTFILT                                        0470
*                   ELSE                                           0471
*                     DO;                                  /*@Z427VLS*/
         B     @RC00469                                            0471
@RF00469 DS    0H                                                  0472
*                       IF WORKTYPE = HEX50 THEN                   0472
         CLI   WORKTYPE,X'50'                                      0472
         BNE   @RF00472                                            0472
*                         CALL IPLFILT;                    /*@Z427VLS*/
         BAL   @14,IPLFILT                                         0473
*                       ELSE                                       0474
*                         DO;                              /*@Z427VLS*/
         B     @RC00472                                            0474
@RF00472 DS    0H                                                  0475
*                           IF WORKTYPE = HEX60 THEN               0475
         CLI   WORKTYPE,X'60'                                      0475
         BNE   @RF00475                                            0475
*                             CALL DDRFILT;                /*@Z427VLS*/
         BAL   @14,DDRFILT                                         0476
*                           ELSE                                   0477
*                             DO;                          /*@Z427VLS*/
         B     @RC00475                                            0477
@RF00475 DS    0H                                                  0478
*                               IF WORKTYPE = HEX70 THEN           0478
         CLI   WORKTYPE,X'70'                                      0478
         BNE   @RF00478                                            0478
*                                 CALL MIHFILT;            /*@Z427VLS*/
         BAL   @14,MIHFILT                                         0479
*                               ELSE                               0480
*                                 CALL EODFILT;            /*@Z427VLS*/
         B     @RC00478                                            0480
@RF00478 BAL   @14,EODFILT                                         0480
*                             END;                         /*@Z427VLS*/
*                         END;                             /*@Z427VLS*/
*                     END;                                 /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
*             END;                                         /*@Z427VLS*/
*         END;                                             /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00006 DS    0H                                                  0489
@EF00006 DS    0H                                                  0489
@ER00006 LM    @14,@12,@SA00006                                    0489
         BR    @14                                                 0489
*SIFTSORT: PROC;                                           /*@Z427VLS*/
SIFTSORT STM   @14,@12,@SA00007                                    0490
*/* SORT THAT ONLY EXAMINES AN ENTRY ONCE IF DATA IS IN ORDER*/    0491
*IF SORTNUM > 1 & DEBUG23 = OFF THEN /*IF AT LEAST TWO ENTRIES AND*/
         L     @14,SORTNUM(,R2)                                    0491
         C     @14,@CF00055                                        0491
         BNH   @RF00491                                            0491
         TM    DEBUG23(R2),B'00000001'                             0491
         BNZ   @RF00491                                            0491
*  DO;  /*DEBUG INPUT DATA ORDER OPTION IS ON THEN           @Z427VLS*/
*SRTCONT =((PASSNUM - 1) * 10) + SORTADR;                  /*@Z427VLS*/
         L     @14,PASSNUM                                         0493
         BCTR  @14,0                                               0493
         MH    @14,@CH00034                                        0493
         AL    @14,SORTADR(,R2)                                    0493
         ST    @14,SRTCONT                                         0493
*/* THIS SORT IS DONE IN BAL IN ORDER TO GET MIN PROCESSING TIME    */
*/* SOME 35 INSTRUCTIONS WERE CUT FROM THE BEST THAT PLS WOULD DO   */
*/* THIS CUT THE RUN TIME DOWN BY APP. 50 PER CENT.          @Z427VLS*/
*         GENERATE REFS(SORTKEY,SORTABLE);                 /*@Z427VLS*/
          LA     R15,10              LOAD THE INCREMENT VALUE
          L      R3,SORTADR(R2)      LOAD THE START OF THE TABLE
          L      R4,SRTCONT          LOAD THE MAX LIMIT
          LR     R1,R3               SET UP THE STOP LIMIT ON BACK UP
          B      DOIT                GO AROUND THIS CODE FIRST TIME
LOOPBCK1  ALR    R3,R15              MOVE THE POINTER TO NEXT ENTRY
          CR     R3,R4               ARE WE POINTING TO LAST ENTRY
          BNL    DONE                FINISHED WITH THE SORT SO EXIT
DOIT      CLC    SORTABLE(10,R3),SORTABLE+10(R3)
          BNH    LOOPBCK1            DONT NEED TO SORT ITEM
          XC     SORTABLE(10,R3),SORTABLE+10(R3)
          XC     SORTABLE+10(10,R3),SORTABLE(R3)
          XC     SORTABLE(10,R3),SORTABLE+10(R3)
          LR     R6,R3               SET NEW POINTER(BACKWARD)
LOOPBCK2  SR     R6,R15              POINT TO LAST ENTRY
          CR     R6,R1               DONT BACK OUT OF THE TABLE
          BL     LOOPBCK1            START WITH NEXT ENTRY
          CLC    SORTABLE(10,R6),SORTABLE+10(R6)
          BNH    LOOPBCK1            NO FUTHER SHUFFEL THIS SAMPLE
          XC     SORTABLE+10(10,R6),SORTABLE(R6)
          XC     SORTABLE(10,R6),SORTABLE+10(R6)
          XC     SORTABLE+10(10,R6),SORTABLE(R6)
          B      LOOPBCK2            DOES IT NEED TO BE MOVED AGAIN
DONE      EQU    *                   COME HERE WHEN DONE
*END;                                                      /*@Z427VLS*/
*  RESPECIFY (R3,R6,R1,R15) UNRESTRICTED;                  /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00007 DS    0H                                                  0497
@EF00007 DS    0H                                                  0497
@ER00007 LM    @14,@12,@SA00007                                    0497
         BR    @14                                                 0497
*FREETAB: PROC; /*FREE CORE FOR PARM SELECTION CRITERIA TABLES*/   0498
FREETAB  STM   @14,@12,@SA00008                                    0498
*IF CUAPTR ^= ZERO × LIBADPTR ^= ZERO × SYMCDPTR ^= ZERO ×         0499
*   DEVPTR ^= ZERO × MODPTR ^= ZERO × SERPTR ^= ZERO ×             0499
*   VOLPTR ^= ZERO × CPUPTR ^= ZERO × CPCUAPTR ^= ZERO THEN        0499
         SLR   @08,@08                                             0499
         C     @08,CUAPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,LIBADPTR(,R2)                                   0499
         BNE   @RT00499                                            0499
         C     @08,SYMCDPTR(,R2)                                   0499
         BNE   @RT00499                                            0499
         C     @08,DEVPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,MODPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,SERPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,VOLPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,CPUPTR(,R2)                                     0499
         BNE   @RT00499                                            0499
         C     @08,CPCUAPTR(,R2)                                   0499
         BE    @RF00499                                            0499
@RT00499 DS    0H                                                  0500
*    GEN(FREEMAIN R,SP=20);                                /*@Z427VLS*/
         FREEMAIN R,SP=20
*IF FRAMEPTR ^= ZERO &        /*DID WE GET THE CORE AT THE START*/ 0501
*   FRAMENUM  = ZERO  THEN    /*DID WE FIND ANY MCH × CCH MERDIAN*/
@RF00499 SLR   @08,@08                                             0501
         L     @06,FRAMEPTR(,R2)                                   0501
         CR    @06,@08                                             0501
         BE    @RF00501                                            0501
         C     @08,FRAMENUM(,@06)                                  0501
         BNE   @RF00501                                            0501
*    DO;                                                   /*@G51DGGB*/
*    GEN(FREEMAIN R,SP=21);   /*FREE AREA FOR THE FRAME INFORMATION*/
         FREEMAIN R,SP=21
*    FRAMEPTR = ZERO;         /*MAKE SURE EVERY ONE KNOWS ABOUT IT*/
         SLR   @08,@08                                             0504
         ST    @08,FRAMEPTR(,R2)                                   0504
*    END;                                                  /*@G51DGGB*/
*END;                                                      /*@Z427VLS*/
@EL00008 DS    0H                                                  0506
@EF00008 DS    0H                                                  0506
@ER00008 LM    @14,@12,@SA00008                                    0506
         BR    @14                                                 0506
*OBRFILT: PROC;                                            /*@Z427VLS*/
OBRFILT  STM   @14,@12,@SA00009                                    0507
*IF POBR = OFF THEN                                                0508
         TM    POBR(R2),B'00100000'                                0508
         BNZ   @RF00508                                            0508
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0510
*    BUG(7) = BUG(7) +1;                                   /*@Z427VLS*/
         LA    @08,1                                               0511
         AL    @08,BUG+24                                          0511
         ST    @08,BUG+24                                          0511
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0513
*  DO;                                                     /*@Z427VLS*/
         B     @RC00508                                            0513
@RF00508 DS    0H                                                  0514
*    IF SHORTSW = ON THEN                                          0514
         TM    SHORTSW(R7),B'00100000'                             0514
         BNO   @RF00514                                            0514
*      DO;                                                 /*@Z427VLS*/
*        WORKCUA = (OBRSCUA & ONLYCUA3);                   /*@Z427VLS*/
         MVC   WORKCUA(3),OBRSCUA(R7)                              0516
         NC    WORKCUA(3),@CB01018                                 0516
*        WORKDEV = OBRSDEV2;                               /*@Z427VLS*/
         MVC   WORKDEV(2),OBRSDEV2(R7)                             0517
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0519
*      DO;                                                 /*@Z427VLS*/
         B     @RC00514                                            0519
@RF00514 DS    0H                                                  0520
*        WORKCUA = (OBRPCUA & ONLYCUA3);                   /*@Z427VLS*/
         MVC   WORKCUA(3),OBRPCUA(R7)                              0520
         NC    WORKCUA(3),@CB01018                                 0520
*        WORKDEV = OBRDEV;                                 /*@Z427VLS*/
         MVC   WORKDEV(2),OBRDEV(R7)                               0521
*        IF WORKDEV = DEV23051 ×                                   0522
*           WORKDEV = DEV23052 THEN                                0522
         CLC   WORKDEV(2),@CB00980                                 0522
         BE    @RT00522                                            0522
         CLC   WORKDEV(2),@CB00982                                 0522
         BNE   @RF00522                                            0522
@RT00522 DS    0H                                                  0523
*           WORKCUA = (WORKCUA & NOUNIT3);                 /*@Z427VLS*/
         NC    WORKCUA(3),@CB01010                                 0523
*      END;                                                /*@Z427VLS*/
@RF00522 DS    0H                                                  0525
*    IF CUAPTR ^= ZERO THEN                                        0525
@RC00514 L     @08,CUAPTR(,R2)                                     0525
         LTR   @08,@08                                             0525
         BZ    @RF00525                                            0525
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0526
*    IF PASSFLAG = YES THEN                                        0527
@RF00525 TM    PASSFLAG(R2),B'00000001'                            0527
         BNO   @RF00527                                            0527
*      DO;                                                 /*@Z427VLS*/
*         IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECTION LIST EXISTS*/
         L     @08,DEVPTR(,R2)                                     0529
         LTR   @08,@08                                             0529
         BZ    @RF00529                                            0529
*           CALL DEVSEL; /*CHECK LIST OF ALLOWABLE DEVICES   @Z427VLS*/
         BAL   @14,DEVSEL                                          0530
*         IF PASSFLAG = YES THEN                                   0531
@RF00529 TM    PASSFLAG(R2),B'00000001'                            0531
         BNO   @RF00531                                            0531
*           DO;                                            /*@Z427VLS*/
*             IF CPCUAPTR ^= ZERO THEN /*IF CPU,CUA SELECTION LIST EX*/
         L     @08,CPCUAPTR(,R2)                                   0533
         LTR   @08,@08                                             0533
         BZ    @RF00533                                            0533
*               CALL CPCUASEL; /*CHECK LIST OF VALID CPU,CUAS*/    0534
         BAL   @14,CPCUASEL                                        0534
*             IF PASSFLAG = YES THEN                               0535
@RF00533 TM    PASSFLAG(R2),B'00000001'                            0535
         BNO   @RF00535                                            0535
*               DO;                                        /*@Z427VLS*/
*                  IF VOLPTR ^= ZERO THEN                          0537
         L     @08,VOLPTR(,R2)                                     0537
         LTR   @08,@08                                             0537
         BZ    @RF00537                                            0537
*                    CALL VOLID;                           /*@Z427VLS*/
         BAL   @14,VOLID                                           0538
*                  IF PASSFLAG = YES THEN                          0539
@RF00537 TM    PASSFLAG(R2),B'00000001'                            0539
         BNO   @RF00539                                            0539
*                    DO;                                   /*@Z427VLS*/
*                      CALL TERMID;                        /*@Z427VLS*/
         BAL   @14,TERMID                                          0541
*                      IF PASSFLAG = YES THEN                      0542
         TM    PASSFLAG(R2),B'00000001'                            0542
         BNO   @RF00542                                            0542
*                        DO;                               /*@Z427VLS*/
*                          IF SHAREPTR ^= ZERO THEN                0544
         L     @08,SHAREPTR(,R2)                                   0544
         LTR   @08,@08                                             0544
         BZ    @RF00544                                            0544
*                             CALL SHARCONV; /*CONVERT TO BASE CUA*/
         BAL   @14,SHARCONV                                        0545
*                          IF WORKDEV = DEV23051 ×                 0546
*                             WORKDEV = DEV3330  ×                 0546
*                             WORKDEV = DEV3340  ×                 0546
*                             WORKDEV = DEV33301 ×                 0546
*                             WORKDEV = DEV3350  ×                 0546
*                             WORKDEV = DEV23052 THEN              0546
@RF00544 CLC   WORKDEV(2),@CB00980                                 0546
         BE    @RT00546                                            0546
         CLC   WORKDEV(2),@CB00984                                 0546
         BE    @RT00546                                            0546
         CLC   WORKDEV(2),@CB00986                                 0546
         BE    @RT00546                                            0546
         CLC   WORKDEV(2),@CB00990                                 0546
         BE    @RT00546                                            0546
         CLC   WORKDEV(2),@CB00988                                 0546
         BE    @RT00546                                            0546
         CLC   WORKDEV(2),@CB00982                                 0546
         BNE   @RF00546                                            0546
@RT00546 DS    0H                                                  0547
*                             WORKCUA = (WORKCUA & NOUNIT3);       0547
         NC    WORKCUA(3),@CB01010                                 0547
*                         END;                             /*@Z427VLS*/
*                       ELSE /*IF FAILED TERMID SELECTION    @Z427VLS*/
*                         BUG(12) = BUG(12) + 1;           /*@Z427VLS*/
         B     @RC00542                                            0549
@RF00542 LA    @08,1                                               0549
         AL    @08,BUG+44                                          0549
         ST    @08,BUG+44                                          0549
*                     END;                                 /*@Z427VLS*/
*                   ELSE /*IF FAILED VOLID SELECTION         @Z427VLS*/
*                     BUG(11) = BUG(11) + 1;               /*@Z427VLS*/
         B     @RC00539                                            0551
@RF00539 LA    @08,1                                               0551
         AL    @08,BUG+40                                          0551
         ST    @08,BUG+40                                          0551
*                 END;                                     /*@Z427VLS*/
*               ELSE  /*IF FAILED CPU,CUA SELECTION          @Z427VLS*/
*                 BUG(10) = BUG(10) + 1;                   /*@Z427VLS*/
         B     @RC00535                                            0553
@RF00535 LA    @08,1                                               0553
         AL    @08,BUG+36                                          0553
         ST    @08,BUG+36                                          0553
*             END;                                         /*@Z427VLS*/
*           ELSE /*IF FAILED DEVICE SELECTION                @Z427VLS*/
*             BUG(9) = BUG(9) + 1;                         /*@Z427VLS*/
         B     @RC00531                                            0555
@RF00531 LA    @08,1                                               0555
         AL    @08,BUG+32                                          0555
         ST    @08,BUG+32                                          0555
*         END;                                             /*@Z427VLS*/
*       ELSE /*IF FAILED CUA SELECTION                       @Z427VLS*/
*         BUG(8) = BUG(8) + 1;                             /*@Z427VLS*/
         B     @RC00527                                            0557
@RF00527 LA    @08,1                                               0557
         AL    @08,BUG+28                                          0557
         ST    @08,BUG+28                                          0557
*      END;                                                /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
@EL00009 DS    0H                                                  0559
@EF00009 DS    0H                                                  0559
@ER00009 LM    @14,@12,@SA00009                                    0559
         BR    @14                                                 0559
*MDRFILT: PROC;   /*MISCELLANEOUS DATA RECORD FILTER.        @Z427VLS*/
MDRFILT  STM   @14,@12,@SA00010                                    0560
*                 /*PASSFLAG IS TURNED OFF IF RECORD FAILS   @Z427VLS*/
*IF PTTYP = OFF THEN  /*ARE MDR RECORDS SELECTED             @Z427VLS*/
         TM    PTTYP(R2),B'10000000'                               0561
         BNZ   @RF00561                                            0561
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0563
*    BUG(13) = BUG(13) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0564
         AL    @08,BUG+48                                          0564
         ST    @08,BUG+48                                          0564
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0566
*  DO;                                                     /*@Z427VLS*/
         B     @RC00561                                            0566
@RF00561 DS    0H                                                  0567
*    WORKMOD = (TPRCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKMOD(2),TPRCUA(R7)                               0567
         NC    WORKMOD(2),@CB01014                                 0567
*    IF TPRDEV = DV23051 × TPRDEV = DV23052 THEN                   0568
         CLI   TPRDEV(R7),X'12'                                    0568
         BE    @RT00568                                            0568
         CLI   TPRDEV(R7),X'02'                                    0568
         BNE   @RF00568                                            0568
@RT00568 DS    0H                                                  0569
*      WORKMOD = (WORKMOD & NOUNIT2); /*HEAVEN ONLY KNOWS WHY*/    0569
         NC    WORKMOD(2),@CB01012                                 0569
*    IF CUAPTR ^= ZERO THEN                                        0570
@RF00568 L     @08,CUAPTR(,R2)                                     0570
         LTR   @08,@08                                             0570
         BZ    @RF00570                                            0570
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0571
*    IF PASSFLAG = YES THEN                                        0572
@RF00570 TM    PASSFLAG(R2),B'00000001'                            0572
         BNO   @RF00572                                            0572
*     DO;                                                  /*@Z427VLS*/
*       IF DEVPTR ^= ZERO THEN /*IF LIST OF VALID DEVICES EXISTS THEN*/
         L     @08,DEVPTR(,R2)                                     0574
         LTR   @08,@08                                             0574
         BZ    @RF00574                                            0574
*         CALL DEVSEL; /*COMPARE RECORD DEVICE AGAINST VALID LIST*/
         BAL   @14,DEVSEL                                          0575
*       IF PASSFLAG = YES THEN                                     0576
@RF00574 TM    PASSFLAG(R2),B'00000001'                            0576
         BNO   @RF00576                                            0576
*         DO;                                              /*@Z427VLS*/
*           IF CPCUAPTR ^= ZERO THEN /*IF LIST OF CPU,CUAS EXISTS*/
         L     @08,CPCUAPTR(,R2)                                   0578
         LTR   @08,@08                                             0578
         BZ    @RF00578                                            0578
*             CALL CPCUASEL; /*CHECK RECORD CPU,CUA AGAINST LIST*/ 0579
         BAL   @14,CPCUASEL                                        0579
*           IF PASSFLAG = YES THEN                                 0580
@RF00578 TM    PASSFLAG(R2),B'00000001'                            0580
         BNO   @RF00580                                            0580
*             DO;                                          /*@Z427VLS*/
*               IF LIBADPTR ^= ZERO & TPRDEV  = DV3705 THEN        0582
         L     @08,LIBADPTR(,R2)                                   0582
         LTR   @08,@08                                             0582
         BZ    @RF00582                                            0582
         CLI   TPRDEV(R7),X'05'                                    0582
         BNE   @RF00582                                            0582
*                 CALL LIBSEL;                             /*@Z427VLS*/
         BAL   @14,LIBSEL                                          0583
*               IF PASSFLAG = YES THEN                             0584
@RF00582 TM    PASSFLAG(R2),B'00000001'                            0584
         BNO   @RF00584                                            0584
*                 DO;                                      /*@Z427VLS*/
*                   IF VOLPTR ^= ZERO THEN                         0586
         L     @08,VOLPTR(,R2)                                     0586
         LTR   @08,@08                                             0586
         BZ    @RF00586                                            0586
*                     CALL VOLID;                          /*@Z427VLS*/
         BAL   @14,VOLID                                           0587
*                   IF PASSFLAG = YES THEN                         0588
@RF00586 TM    PASSFLAG(R2),B'00000001'                            0588
         BNO   @RF00588                                            0588
*                     DO;                                  /*@Z427VLS*/
*                       IF SHAREPTR ^= ZERO THEN /*IF SHARED IO*/  0590
         L     @08,SHAREPTR(,R2)                                   0590
         LTR   @08,@08                                             0590
         BZ    @RF00590                                            0590
*                         CALL SHARCONV;                   /*@Z427VLS*/
         BAL   @14,SHARCONV                                        0591
*                       WORKCHAN = TPRDEV;                 /*@Z427VLS*/
@RF00590 MVC   WORKCHAN(1),TPRDEV(R7)                              0592
*                       IF TPRDEV = DV23052 ×                      0593
*                          TPRDEV = DV3330  ×                      0593
*                          TPRDEV = DV3340  ×                      0593
*                          TPRDEV = DV3350  ×                      0593
*                          TPRDEV = DV33302 ×                      0593
*                          TPRDEV = DV23051 THEN                   0593
         CLI   TPRDEV(R7),X'02'                                    0593
         BE    @RT00593                                            0593
         CLI   TPRDEV(R7),X'01'                                    0593
         BE    @RT00593                                            0593
         CLI   TPRDEV(R7),X'09'                                    0593
         BE    @RT00593                                            0593
         CLI   TPRDEV(R7),X'11'                                    0593
         BE    @RT00593                                            0593
         CLI   TPRDEV(R7),X'0A'                                    0593
         BE    @RT00593                                            0593
         CLI   TPRDEV(R7),X'12'                                    0593
         BNE   @RF00593                                            0593
@RT00593 DS    0H                                                  0594
*                          DO;                             /*@Z427VLS*/
*                            WORKMOD = (WORKMOD & NOUNIT2);/*@Z427VLS*/
         NC    WORKMOD(2),@CB01012                                 0595
*                            WORKTYPE = HEX30;             /*@Z427VLS*/
         MVI   WORKTYPE,X'30'                                      0596
*                            WORKCHAN = HEX00;             /*@Z427VLS*/
         MVI   WORKCHAN,X'00'                                      0597
*                          END;                            /*@Z427VLS*/
*                        IF TPRDEV = DV3800 ×                      0599
*                           TPRDEV = DV3895 ×                      0599
*                           TPRDEV = DV3850 THEN                   0599
@RF00593 CLI   TPRDEV(R7),X'0C'                                    0599
         BE    @RT00599                                            0599
         CLI   TPRDEV(R7),X'0D'                                    0599
         BE    @RT00599                                            0599
         CLI   TPRDEV(R7),X'0E'                                    0599
         BNE   @RF00599                                            0599
@RT00599 DS    0H                                                  0600
*                          DO;                             /*@Z427VLS*/
*                            WORKCHAN = HEX00;             /*@Z427VLS*/
         MVI   WORKCHAN,X'00'                                      0601
*                            WORKTYPE = HEX30;             /*@Z427VLS*/
         MVI   WORKTYPE,X'30'                                      0602
*                          END;                            /*@Z427VLS*/
*                     END;                                 /*@Z427VLS*/
*                   ELSE /*IF FAILED VOLID SELECTION         @Z427VLS*/
*                     BUG(18) = BUG(18) + 1;               /*@Z427VLS*/
         B     @RC00588                                            0605
@RF00588 LA    @08,1                                               0605
         AL    @08,BUG+68                                          0605
         ST    @08,BUG+68                                          0605
*                 END;                                     /*@Z427VLS*/
*               ELSE /*IF FAILED LIN.INT.BASE ADDR.SELECTION @Z427VLS*/
*                 BUG(17) = BUG(17) + 1;                   /*@Z427VLS*/
         B     @RC00584                                            0607
@RF00584 LA    @08,1                                               0607
         AL    @08,BUG+64                                          0607
         ST    @08,BUG+64                                          0607
*            END;                                          /*@Z427VLS*/
*           ELSE /*IF FAILED CPU,CUA SELECTION               @Z427VLS*/
*             BUG(16) = BUG(16) + 1;                       /*@Z427VLS*/
         B     @RC00580                                            0609
@RF00580 LA    @08,1                                               0609
         AL    @08,BUG+60                                          0609
         ST    @08,BUG+60                                          0609
*          END;                                            /*@Z427VLS*/
*        ELSE /*IF FAILED DEVICE SELECTION                   @Z427VLS*/
*         BUG(15) = BUG(15) + 1;                           /*@Z427VLS*/
         B     @RC00576                                            0611
@RF00576 LA    @08,1                                               0611
         AL    @08,BUG+56                                          0611
         ST    @08,BUG+56                                          0611
*      END;                                                /*@Z427VLS*/
*    ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*/
*      BUG(14) = BUG(14) + 1;                              /*@Z427VLS*/
         B     @RC00572                                            0613
@RF00572 LA    @08,1                                               0613
         AL    @08,BUG+52                                          0613
         ST    @08,BUG+52                                          0613
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00010 DS    0H                                                  0615
@EF00010 DS    0H                                                  0615
@ER00010 LM    @14,@12,@SA00010                                    0615
         BR    @14                                                 0615
*DDRFILT: PROC;                                            /*@Z427VLS*/
DDRFILT  STM   @14,@12,@SA00011                                    0616
*IF PDDR = OFF THEN                                                0617
         TM    PDDR(R2),B'00000100'                                0617
         BNZ   @RF00617                                            0617
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0619
*    BUG(19) = BUG(19) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0620
         AL    @08,BUG+72                                          0620
         ST    @08,BUG+72                                          0620
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0622
*  DO;                                                     /*@Z427VLS*/
         B     @RC00617                                            0622
@RF00617 DS    0H                                                  0623
*    WORKCUA = DDRFCUA;                                    /*@Z427VLS*/
         MVC   WORKCUA(3),DDRFCUA(R7)                              0623
*    WORKDEV = DDRCODE2; /*SET DEVICE                        @Z427VLS*/
         MVC   WORKDEV(2),DDRCODE2(R7)                             0624
*    IF CUAPTR ^= ZERO THEN                                        0625
         L     @08,CUAPTR(,R2)                                     0625
         LTR   @08,@08                                             0625
         BZ    @RF00625                                            0625
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0626
*    IF PASSFLAG = YES THEN                                        0627
@RF00625 TM    PASSFLAG(R2),B'00000001'                            0627
         BNO   @RF00627                                            0627
*      DO;                                                 /*@Z427VLS*/
*        IF CPCUAPTR ^= ZERO THEN                                  0629
         L     @08,CPCUAPTR(,R2)                                   0629
         LTR   @08,@08                                             0629
         BZ    @RF00629                                            0629
*          CALL CPCUASEL;                                  /*@Z427VLS*/
         BAL   @14,CPCUASEL                                        0630
*        IF PASSFLAG = YES THEN /*IF PASS CPU,CUA SELECTION  @Z427VLS*/
@RF00629 TM    PASSFLAG(R2),B'00000001'                            0631
         BNO   @RF00631                                            0631
*          DO;                                             /*@Z427VLS*/
*            IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECION LIST*/    0633
         L     @08,DEVPTR(,R2)                                     0633
         LTR   @08,@08                                             0633
         BZ    @RF00633                                            0633
*               CALL DEVSEL;                               /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0634
*            IF PASSFLAG = NO THEN                                 0635
@RF00633 TM    PASSFLAG(R2),B'00000001'                            0635
         BNZ   @RF00635                                            0635
*               BUG(22) = BUG(22) + 1;                     /*@Z427VLS*/
         LA    @08,1                                               0636
         AL    @08,BUG+84                                          0636
         ST    @08,BUG+84                                          0636
*          END;                                            /*@Z427VLS*/
*        ELSE  /*IF RECORD FAILED CPU,CUA SELECTION THEN     @Z427VLS*/
*          BUG(21) = BUG(21) + 1;                          /*@Z427VLS*/
         B     @RC00631                                            0638
@RF00631 LA    @08,1                                               0638
         AL    @08,BUG+80                                          0638
         ST    @08,BUG+80                                          0638
*      END;                                                /*@Z427VLS*/
*    ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*/
*      BUG(20) = BUG(20) + 1;                              /*@Z427VLS*/
         B     @RC00627                                            0640
@RF00627 LA    @08,1                                               0640
         AL    @08,BUG+76                                          0640
         ST    @08,BUG+76                                          0640
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00011 DS    0H                                                  0642
@EF00011 DS    0H                                                  0642
@ER00011 LM    @14,@12,@SA00011                                    0642
         BR    @14                                                 0642
*MIHFILT: PROC;                                            /*@Z427VLS*/
MIHFILT  STM   @14,@12,@SA00012                                    0643
*IF PMIH = OFF THEN                                                0644
         TM    PMIH(R2),B'00000010'                                0644
         BNZ   @RF00644                                            0644
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0646
*    BUG(23) = BUG(23) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0647
         AL    @08,BUG+88                                          0647
         ST    @08,BUG+88                                          0647
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0649
*  DO;                                                     /*@Z427VLS*/
         B     @RC00644                                            0649
@RF00644 DS    0H                                                  0650
*    WORKCUA = MIHCUA;                                     /*@Z427VLS*/
         MVC   WORKCUA(3),MIHCUA(R7)                               0650
*    WORKDEV = MIHCODE2;                                   /*@Z427VLS*/
         MVC   WORKDEV(2),MIHCODE2(R7)                             0651
*    IF CUAPTR ^= ZERO THEN                                        0652
         L     @08,CUAPTR(,R2)                                     0652
         LTR   @08,@08                                             0652
         BZ    @RF00652                                            0652
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0653
*    IF PASSFLAG = YES THEN                                        0654
@RF00652 TM    PASSFLAG(R2),B'00000001'                            0654
         BNO   @RF00654                                            0654
*      DO;                                                 /*@Z427VLS*/
*        IF CPCUAPTR ^= ZERO THEN                                  0656
         L     @08,CPCUAPTR(,R2)                                   0656
         LTR   @08,@08                                             0656
         BZ    @RF00656                                            0656
*          CALL CPCUASEL;                                  /*@Z427VLS*/
         BAL   @14,CPCUASEL                                        0657
*        IF PASSFLAG = YES THEN /*IF PASSED CPU,CUA SELECTION*/    0658
@RF00656 TM    PASSFLAG(R2),B'00000001'                            0658
         BNO   @RF00658                                            0658
*          DO;                                             /*@Z427VLS*/
*            IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECTION LIST*/   0660
         L     @08,DEVPTR(,R2)                                     0660
         LTR   @08,@08                                             0660
         BZ    @RF00660                                            0660
*              CALL DEVSEL;                                /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0661
*            IF PASSFLAG = NO THEN /*IF NOT SELECTED DEVICE THEN*/ 0662
@RF00660 TM    PASSFLAG(R2),B'00000001'                            0662
         BNZ   @RF00662                                            0662
*              BUG(26) = BUG(26) + 1;                      /*@Z427VLS*/
         LA    @08,1                                               0663
         AL    @08,BUG+100                                         0663
         ST    @08,BUG+100                                         0663
*          END;                                            /*@Z427VLS*/
*        ELSE /*IF FAILED CPU,CUA SELECTION                  @Z427VLS*/
*          BUG(25) = BUG(25) + 1;                          /*@Z427VLS*/
         B     @RC00658                                            0665
@RF00658 LA    @08,1                                               0665
         AL    @08,BUG+96                                          0665
         ST    @08,BUG+96                                          0665
*      END;                                                /*@Z427VLS*/
*    ELSE /*IF FAILED CUA SELECTION THEN                     @Z427VLS*/
*     BUG(24) = BUG(24) + 1;                               /*@Z427VLS*/
         B     @RC00654                                            0667
@RF00654 LA    @08,1                                               0667
         AL    @08,BUG+92                                          0667
         ST    @08,BUG+92                                          0667
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00012 DS    0H                                                  0669
@EF00012 DS    0H                                                  0669
@ER00012 LM    @14,@12,@SA00012                                    0669
         BR    @14                                                 0669
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*CCHFILT: PROC;                                            /*@Z427VLS*/
CCHFILT  STM   @14,@12,@SA00013                                    0670
*IF PCHAN = OFF THEN                                               0671
         TM    PCHAN(R2),B'01000000'                               0671
         BNZ   @RF00671                                            0671
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0673
*    BUG(27) = BUG(27) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0674
         AL    @08,BUG+104                                         0674
         ST    @08,BUG+104                                         0674
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0676
*  DO;                                                     /*@Z427VLS*/
         B     @RC00671                                            0676
@RF00671 DS    0H                                                  0677
*    WORKMOD = (CCHCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKMOD(2),CCHCUA(R7)                               0677
         NC    WORKMOD(2),@CB01014                                 0677
*    WORKCHAN = (CCHCUA & ONLYCHAN);                       /*@Z427VLS*/
         MVC   WORKCHAN(1),CCHCUA(R7)                              0678
         NI    WORKCHAN,X'0F'                                      0678
*    IF CUAPTR ^= ZERO THEN                                        0679
         L     @08,CUAPTR(,R2)                                     0679
         LTR   @08,@08                                             0679
         BZ    @RF00679                                            0679
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0680
*    IF PASSFLAG = YES THEN                                        0681
@RF00679 TM    PASSFLAG(R2),B'00000001'                            0681
         BNO   @RF00681                                            0681
*      DO;                                                 /*@Z427VLS*/
*        IF CPCUAPTR ^= ZERO THEN                                  0683
         L     @08,CPCUAPTR(,R2)                                   0683
         LTR   @08,@08                                             0683
         BZ    @RF00683                                            0683
*          CALL CPCUASEL;                                  /*@Z427VLS*/
         BAL   @14,CPCUASEL                                        0684
*        IF PASSFLAG = OFF THEN /*IF FAILED CPU,CUA SELECTION*/    0685
@RF00683 TM    PASSFLAG(R2),B'00000001'                            0685
         BNZ   @RF00685                                            0685
*          BUG(29) = BUG(29) + 1;                          /*@Z427VLS*/
         LA    @08,1                                               0686
         AL    @08,BUG+112                                         0686
         ST    @08,BUG+112                                         0686
*         ELSE                                                     0687
*          DO;                                             /*@G51DGGB*/
         B     @RC00685                                            0687
@RF00685 DS    0H                                                  0688
*           CALL MERIDCK1;       /*IS THIS A MERIDAN CPU     @G51DGGB*/
         BAL   @14,MERIDCK1                                        0688
*          END;                                            /*@G51DGGB*/
*        WORKMOD = LRTMODEL; /*RESET TO WHAT IT WAS          @Z427VLS*/
@RC00685 MVC   WORKMOD(2),LRTMODEL(R7)                             0690
*      END;                                                /*@Z427VLS*/
*    ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*/
*      BUG(28) = BUG(28) + 1;                              /*@Z427VLS*/
         B     @RC00681                                            0692
@RF00681 LA    @08,1                                               0692
         AL    @08,BUG+108                                         0692
         ST    @08,BUG+108                                         0692
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00013 DS    0H                                                  0694
@EF00013 DS    0H                                                  0694
@ER00013 LM    @14,@12,@SA00013                                    0694
         BR    @14                                                 0694
*/*                                                          @Z427VLS*/
*IPLFILT: PROC;                                            /*@Z427VLS*/
IPLFILT  STM   @14,@12,12(@13)                                     0695
*IF PIPL = OFF THEN                                                0696
         TM    PIPL(R2),B'00001000'                                0696
         BNZ   @RF00696                                            0696
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0698
*    BUG(30) = BUG(30) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0699
         AL    @08,BUG+116                                         0699
         ST    @08,BUG+116                                         0699
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00014 DS    0H                                                  0701
@EF00014 DS    0H                                                  0701
@ER00014 LM    @14,@12,12(@13)                                     0701
         BR    @14                                                 0701
*EODFILT: PROC;                                            /*@Z427VLS*/
EODFILT  STM   @14,@12,12(@13)                                     0702
*IF PEOD = OFF THEN                                                0703
         TM    PEOD(R2),B'00000001'                                0703
         BNZ   @RF00703                                            0703
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0705
*    BUG(31) = BUG(31) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0706
         AL    @08,BUG+120                                         0706
         ST    @08,BUG+120                                         0706
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0708
* WORKTYPE = LRTKEY1;                                      /*@Z427VLS*/
         B     @RC00703                                            0708
@RF00703 MVC   WORKTYPE(1),LRTKEY1(R7)                             0708
*END;                                                      /*@Z427VLS*/
@EL00015 DS    0H                                                  0709
@EF00015 DS    0H                                                  0709
@ER00015 LM    @14,@12,12(@13)                                     0709
         BR    @14                                                 0709
*MCHFILT: PROC;                                            /*@Z427VLS*/
MCHFILT  STM   @14,@12,@SA00016                                    0710
*IF PMCH = OFF THEN                                                0711
         TM    PMCH(R2),B'10000000'                                0711
         BNZ   @RF00711                                            0711
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0713
*    BUG(32) = BUG(32) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0714
         AL    @08,BUG+124                                         0714
         ST    @08,BUG+124                                         0714
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0716
* DO;                                                      /*@Z427VLS*/
         B     @RC00711                                            0716
@RF00711 DS    0H                                                  0717
*  IF ERRORID = ON THEN                                            0717
         TM    ERRORID(R2),B'00000100'                             0717
         BNO   @RF00717                                            0717
*    CALL ERIDFILT;                                        /*@Z427VLS*/
         BAL   @14,ERIDFILT                                        0718
*  IF PASSFLAG = OFF THEN /*IF FAILED ERROR ID FILTERING     @Z427VLS*/
@RF00717 TM    PASSFLAG(R2),B'00000001'                            0719
         BNZ   @RF00719                                            0719
*    BUG(33) = BUG(33) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0720
         AL    @08,BUG+128                                         0720
         ST    @08,BUG+128                                         0720
*  ELSE                                                            0721
*   DO;                                                    /*@G51DGGB*/
         B     @RC00719                                            0721
@RF00719 DS    0H                                                  0722
*    CALL MERIDCK1;            /*CHECK TO SEE IF THIS IS A MERDIAN*/
         BAL   @14,MERIDCK1                                        0722
*   END;                                                   /*@G51DGGB*/
* END;                                                     /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00016 DS    0H                                                  0725
@EF00016 DS    0H                                                  0725
@ER00016 LM    @14,@12,@SA00016                                    0725
         BR    @14                                                 0725
*SOFTFILT: PROC;                                           /*@Z427VLS*/
SOFTFILT STM   @14,@12,@SA00017                                    0726
*IF PSOFT = OFF THEN                                               0727
         TM    PSOFT(R2),B'00010000'                               0727
         BNZ   @RF00727                                            0727
*  DO;                                                     /*@Z427VLS*/
*    PASSFLAG = OFF;                                       /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0729
*    BUG(34) = BUG(34) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0730
         AL    @08,BUG+132                                         0730
         ST    @08,BUG+132                                         0730
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0732
*  DO;                                                     /*@Z427VLS*/
         B     @RC00727                                            0732
@RF00727 DS    0H                                                  0733
*    IF ERRORID = ON THEN                                          0733
         TM    ERRORID(R2),B'00000100'                             0733
         BNO   @RF00733                                            0733
*      CALL ERIDFILT;                                      /*@Z427VLS*/
         BAL   @14,ERIDFILT                                        0734
*    IF PASSFLAG = OFF THEN /*IF FAILED ERROR ID FILTERING   @Z427VLS*/
@RF00733 TM    PASSFLAG(R2),B'00000001'                            0735
         BNZ   @RF00735                                            0735
*      BUG(35) = BUG(35) + 1;                              /*@Z427VLS*/
         LA    @08,1                                               0736
         AL    @08,BUG+136                                         0736
         ST    @08,BUG+136                                         0736
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00017 DS    0H                                                  0738
@EF00017 DS    0H                                                  0738
@ER00017 LM    @14,@12,@SA00017                                    0738
         BR    @14                                                 0738
*ERIDFILT: PROC;                                           /*@Z427VLS*/
ERIDFILT STM   @14,@12,12(@13)                                     0739
*IF (LRTKEY1 = MVSMCH & (LRTERRID & HEX10) = HEX10) ×              0740
*   (WORKTYPE = HEX40 & (LRTERRID & HEX20) = HEX20) THEN           0740
         CLI   LRTKEY1(R7),X'13'                                   0740
         BNE   @GL00052                                            0740
         MVC   @TS00001(1),LRTERRID(R7)                            0740
         NI    @TS00001,X'10'                                      0740
         CLI   @TS00001,X'10'                                      0740
         BE    @RT00740                                            0740
@GL00052 CLI   WORKTYPE,X'40'                                      0740
         BNE   @RF00740                                            0740
         MVC   @TS00001(1),LRTERRID(R7)                            0740
         NI    @TS00001,X'20'                                      0740
         CLI   @TS00001,X'20'                                      0740
         BNE   @RF00740                                            0740
@RT00740 DS    0H                                                  0741
*  DO;                                                     /*@Z427VLS*/
*    IF IDVALUE ^= RSEQ THEN                                       0742
         LR    @08,R7                                              0742
         AH    @08,RECLNGTH(,R2)                                   0742
         AL    @08,@CF01518                                        0742
         CLC   IDVALUE(2,R2),RSEQ(@08)                             0742
         BE    @RF00742                                            0742
*      PASSFLAG = OFF;                                     /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0743
*    ELSE                                                          0744
*      DO;                                                 /*@Z427VLS*/
         B     @RC00742                                            0744
@RF00742 DS    0H                                                  0745
*        IF IDCPU ^= 'FF'X THEN /*DEFAULT UNSET FLAG IS FF   @Z427VLS*/
         CLI   IDCPU(R2),X'FF'                                     0745
         BE    @RF00745                                            0745
*          DO;                                             /*@Z427VLS*/
*            IF IDCPU ^= RCPU THEN                                 0747
         LR    @08,R7                                              0747
         AH    @08,RECLNGTH(,R2)                                   0747
         AL    @08,@CF01524                                        0747
         CLC   IDCPU(1,R2),RCPU-3(@08)                             0747
         BE    @RF00747                                            0747
*              PASSFLAG = OFF;                             /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0748
*            ELSE                                                  0749
*              DO;                                         /*@Z427VLS*/
         B     @RC00747                                            0749
@RF00747 DS    0H                                                  0750
*                IF IDASID ^= RASID THEN                           0750
         LR    @08,R7                                              0750
         AH    @08,RECLNGTH(,R2)                                   0750
         AL    @08,@CF01532                                        0750
         CLC   IDASID(2,R2),RASID-4(@08)                           0750
         BE    @RF00750                                            0750
*                  PASSFLAG = OFF;                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0751
*                ELSE                                              0752
*                  DO;                                     /*@Z427VLS*/
         B     @RC00750                                            0752
@RF00750 DS    0H                                                  0753
*                   TIME=(IDHOUR*CONVSECT) +                       0753
*                        (IDMIN*CST) +                             0753
*                        (IDSEC*TEN) +                             0753
*                         IDTSEC;    /* ERRID TIME TO TSEC  @XA19973 */
         SLR   @01,@01                                             0753
         IC    @01,IDHOUR(,R2)                                     0753
         M     @00,@CF01024                                        0753
         SLR   @08,@08                                             0753
         IC    @08,IDMIN(,R2)                                      0753
         MH    @08,@CH01026                                        0753
         ALR   @01,@08                                             0753
         SLR   @05,@05                                             0753
         IC    @05,IDSEC(,R2)                                      0753
         M     @04,TEN                                             0753
         ALR   @01,@05                                             0753
         SLR   @08,@08                                             0753
         IC    @08,IDTSEC(,R2)                                     0753
         ALR   @01,@08                                             0753
         ST    @01,TIME                                            0753
*                   IF TIME^=RTIME  THEN                           0754
         LR    @08,R7                                              0754
         AH    @08,RECLNGTH(,R2)                                   0754
         AL    @08,@CF01533                                        0754
         ICM   @06,15,RTIME-6(@08)                                 0754
         CR    @01,@06                                             0754
         BE    @RF00754                                            0754
*                     PASSFLAG=NO; /* ERROR ID^=RECORD TIME @XA19973 */
         NI    PASSFLAG(R2),B'11111110'                            0755
*                   END;                                   /*@Z427VLS*/
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
*    END;                                                  /*@Z427VLS*/
*  ELSE /*IF RECORD DOES NOT HAVE ERRORID THEN REJECT IT     @Z427VLS*/
*    PASSFLAG = NO;                                        /*@Z427VLS*/
         B     @RC00740                                            0761
@RF00740 NI    PASSFLAG(R2),B'11111110'                            0761
*END;                                                      /*@Z427VLS*/
@EL00018 DS    0H                                                  0762
@EF00018 DS    0H                                                  0762
@ER00018 LM    @14,@12,12(@13)                                     0762
         BR    @14                                                 0762
*CUASELCT: PROC;                                           /*@Z427VLS*/
CUASELCT STM   @14,@12,12(@13)                                     0763
*CUAOK = NO;                                               /*@Z427VLS*/
         NI    CUAOK,B'11111110'                                   0764
*DO J = 1 BY 1 TO CUANUM WHILE CUAOK = NO;                 /*@Z427VLS*/
         LA    @08,1                                               0765
         ST    @08,J                                               0765
         B     @DE00765                                            0765
@DL00765 TM    CUAOK,B'00000001'                                   0765
         BNZ   @DC00765                                            0765
*  IF WORKMOD >= CUA1(J) & WORKMOD <= CUA2(J) THEN                 0766
         SLA   @08,2                                               0766
         L     @06,CUAPTR(,R2)                                     0766
         ST    @08,@TF00001                                        0766
         ALR   @08,@06                                             0766
         BCTR  @08,0                                               0766
         BCTR  @08,0                                               0766
         CLC   WORKMOD(2),CUA1-2(@08)                              0766
         BL    @RF00766                                            0766
         AL    @06,@TF00001                                        0766
         CLC   WORKMOD(2),CUA2-4(@06)                              0766
         BH    @RF00766                                            0766
*    CUAOK = YES;                                          /*@Z427VLS*/
         OI    CUAOK,B'00000001'                                   0767
*END;                                                      /*@Z427VLS*/
@RF00766 LA    @08,1                                               0768
         AL    @08,J                                               0768
         ST    @08,J                                               0768
@DE00765 L     @06,CUAPTR(,R2)                                     0768
         CH    @08,CUANUM(,@06)                                    0768
         BNH   @DL00765                                            0768
@DC00765 DS    0H                                                  0769
*IF CUAOK = NO THEN                                                0769
         TM    CUAOK,B'00000001'                                   0769
         BNZ   @RF00769                                            0769
*  PASSFLAG = NO;                                          /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0770
*END;                                                      /*@Z427VLS*/
@EL00019 DS    0H                                                  0771
@EF00019 DS    0H                                                  0771
@ER00019 LM    @14,@12,12(@13)                                     0771
         BR    @14                                                 0771
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*CPCUASEL: PROC;                                           /*@Z427VLS*/
CPCUASEL STM   @14,@12,12(@13)                                     0772
*WKCPU = LRTCPUS;                                          /*@Z427VLS*/
         MVC   WKCPU(3),LRTCPUS(R7)                                0773
*WKCUA = WORKMOD;                                          /*@Z427VLS*/
         MVC   WKCUA(2),WORKMOD                                    0774
*CPUCUAOK = NO;                                            /*@Z427VLS*/
         NI    CPUCUAOK,B'01111111'                                0775
*DO J = 1 BY 1 TO CPCUANUM WHILE CPUCUAOK = NO ;           /*@Z427VLS*/
         LA    @08,1                                               0776
         ST    @08,J                                               0776
         B     @DE00776                                            0776
@DL00776 TM    CPUCUAOK,B'10000000'                                0776
         BNZ   @DC00776                                            0776
*   IF CPUCUX1(J) = LRTCPUS THEN                                   0777
         MH    @08,@CH00083                                        0777
         L     @06,CPCUAPTR(,R2)                                   0777
         ST    @08,@TF00001                                        0777
         ALR   @08,@06                                             0777
         AL    @08,@CF01520                                        0777
         CLC   CPUCUX1-2(3,@08),LRTCPUS(R7)                        0777
         BNE   @RF00777                                            0777
*    DO;                                                   /*@0099VLS*/
*     IF WKCUA >= CPUCUX2(J) &                                     0779
*        WKCUA <= CPUCUX3(J) THEN                                  0779
         LR    @08,@06                                             0779
         AL    @08,@TF00001                                        0779
         BCTR  @08,0                                               0779
         BCTR  @08,0                                               0779
         CLC   WKCUA(2),CPUCUX2-5(@08)                             0779
         BL    @RF00779                                            0779
         AL    @06,@TF00001                                        0779
         CLC   WKCUA(2),CPUCUX3-7(@06)                             0779
         BH    @RF00779                                            0779
*         CPUCUAOK = YES;                                  /*@0099VLS*/
         OI    CPUCUAOK,B'10000000'                                0780
*    END;                                                  /*@0099VLS*/
@RF00779 DS    0H                                                  0782
*END;                                                      /*@Z427VLS*/
@RF00777 LA    @08,1                                               0782
         AL    @08,J                                               0782
         ST    @08,J                                               0782
@DE00776 L     @06,CPCUAPTR(,R2)                                   0782
         CH    @08,CPCUANUM(,@06)                                  0782
         BNH   @DL00776                                            0782
@DC00776 DS    0H                                                  0783
*IF CPUCUAOK = NO THEN                                             0783
         TM    CPUCUAOK,B'10000000'                                0783
         BNZ   @RF00783                                            0783
*  PASSFLAG = NO;                                          /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0784
*END;                                                      /*@Z427VLS*/
@EL00020 DS    0H                                                  0785
@EF00020 DS    0H                                                  0785
@ER00020 LM    @14,@12,12(@13)                                     0785
         BR    @14                                                 0785
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*VOLID: PROC;                                              /*@Z427VLS*/
VOLID    STM   @14,@12,12(@13)                                     0786
*IF WORKTYPE = HEX90 THEN /*IF RECORD IS MDR                 @Z427VLS*/
         CLI   WORKTYPE,X'90'                                      0787
         BNE   @RF00787                                            0787
* DO;                                                      /*@Z427VLS*/
*    IF TPRDEV = DV3330 ×    /*VOL SELECTION FOR 33XX DEVICES*/    0789
*       TPRDEV = DV3340 ×                                          0789
*       TPRDEV = DV33302 ×                                         0789
*       TPRDEV = DV3350 THEN                                       0789
         CLI   TPRDEV(R7),X'01'                                    0789
         BE    @RT00789                                            0789
         CLI   TPRDEV(R7),X'09'                                    0789
         BE    @RT00789                                            0789
         CLI   TPRDEV(R7),X'0A'                                    0789
         BE    @RT00789                                            0789
         CLI   TPRDEV(R7),X'11'                                    0789
         BNE   @RF00789                                            0789
@RT00789 DS    0H                                                  0790
*  DO;                                                     /*@Z427VLS*/
*    VOLOK = NO;                                           /*@Z427VLS*/
         NI    VOLOK,B'10111111'                                   0791
*    DO J = 1 BY 1 TO VOLNUM WHILE VOLOK = NO;             /*@Z427VLS*/
         LA    @08,1                                               0792
         ST    @08,J                                               0792
         B     @DE00792                                            0792
@DL00792 TM    VOLOK,B'01000000'                                   0792
         BNZ   @DC00792                                            0792
*      IF VOLVAL(J) = TPRVOL THEN                                  0793
         MH    @08,@CH00081                                        0793
         L     @06,VOLPTR(,R2)                                     0793
         ALR   @06,@08                                             0793
         AL    @06,@CF01533                                        0793
         CLC   VOLVAL-2(6,@06),TPRVOL(R7)                          0793
         BNE   @RF00793                                            0793
*        VOLOK = YES;                                      /*@Z427VLS*/
         OI    VOLOK,B'01000000'                                   0794
*    END;                                                  /*@Z427VLS*/
@RF00793 LA    @08,1                                               0795
         AL    @08,J                                               0795
         ST    @08,J                                               0795
@DE00792 L     @06,VOLPTR(,R2)                                     0795
         CH    @08,VOLNUM(,@06)                                    0795
         BNH   @DL00792                                            0795
@DC00792 DS    0H                                                  0796
*    IF VOLOK = NO THEN                                            0796
         TM    VOLOK,B'01000000'                                   0796
         BNZ   @RF00796                                            0796
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0797
*  END;                                                    /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
*  ELSE                                                            0800
*   DO; /*OBR BY DEFAULT                                     @Z427VLS*/
         B     @RC00787                                            0800
@RF00787 DS    0H                                                  0801
*IF WORKDEV = DEV3330 ×                                            0801
*   WORKDEV = DEV3340 ×                                            0801
*   WORKDEV = DEV3350 ×                                            0801
*   WORKDEV = DEV33301 THEN                                        0801
         CLC   WORKDEV(2),@CB00984                                 0801
         BE    @RT00801                                            0801
         CLC   WORKDEV(2),@CB00986                                 0801
         BE    @RT00801                                            0801
         CLC   WORKDEV(2),@CB00988                                 0801
         BE    @RT00801                                            0801
         CLC   WORKDEV(2),@CB00990                                 0801
         BNE   @RF00801                                            0801
@RT00801 DS    0H                                                  0802
*  DO;                                                     /*@Z427VLS*/
*    VOLOK = NO;                                           /*@Z427VLS*/
         NI    VOLOK,B'10111111'                                   0803
*    DO J = 1 BY 1 TO VOLNUM WHILE VOLOK = NO;             /*@Z427VLS*/
         LA    @08,1                                               0804
         ST    @08,J                                               0804
         B     @DE00804                                            0804
@DL00804 TM    VOLOK,B'01000000'                                   0804
         BNZ   @DC00804                                            0804
*      IF VOLVAL(J) = OBRVOL THEN                                  0805
         MH    @08,@CH00081                                        0805
         L     @06,VOLPTR(,R2)                                     0805
         ALR   @06,@08                                             0805
         AL    @06,@CF01533                                        0805
         CLC   VOLVAL-2(6,@06),OBRVOL(R7)                          0805
         BNE   @RF00805                                            0805
*        VOLOK = YES;                                      /*@Z427VLS*/
         OI    VOLOK,B'01000000'                                   0806
*    END;                                                  /*@Z427VLS*/
@RF00805 LA    @08,1                                               0807
         AL    @08,J                                               0807
         ST    @08,J                                               0807
@DE00804 L     @06,VOLPTR(,R2)                                     0807
         CH    @08,VOLNUM(,@06)                                    0807
         BNH   @DL00804                                            0807
@DC00804 DS    0H                                                  0808
*    IF VOLOK = NO THEN                                            0808
         TM    VOLOK,B'01000000'                                   0808
         BNZ   @RF00808                                            0808
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0809
*  END;                                                    /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*END; /*END OF VOLID PROC                                    @Z427VLS*/
@EL00021 DS    0H                                                  0812
@EF00021 DS    0H                                                  0812
@ER00021 LM    @14,@12,12(@13)                                     0812
         BR    @14                                                 0812
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
* TERMID: PROC;                                            /*@Z427VLS*/
TERMID   STM   @14,@12,12(@13)                                     0813
* IF LRTKEY1 = OBRVTAM ×                                           0814
*  ((LRTKEY1=OBRCONV×OBRKEY1=OBRTCM) &                             0814
*   (OBRTCAM & '0F'X) = TCAMYES)                                   0814
*    THEN                                                  /*@XA21139*/
         CLI   LRTKEY1(R7),X'36'                                   0814
         BE    @RT00814                                            0814
         CLI   LRTKEY1(R7),X'32'                                   0814
         BE    @GL00064                                            0814
         CLI   OBRKEY1(R7),X'34'                                   0814
         BNE   @RF00814                                            0814
@GL00064 MVC   @TS00001(1),OBRTCAM(R7)                             0814
         NI    @TS00001,X'0F'                                      0814
         CLI   @TS00001,X'0F'                                      0814
         BNE   @RF00814                                            0814
@RT00814 DS    0H                                                  0815
*      DO;                                                 /*@Z427VLS*/
*        WORKTYPE = LRTKEY1;                               /*@Z427VLS*/
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0816
*        IF TERM  ^= BLANKS & TERM  ^= OBRTERMN THEN               0817
         CLC   TERM(8,R2),@CC00977                                 0817
         BE    @RF00817                                            0817
         CLC   TERM(8,R2),OBRTERMN(R7)                             0817
         BE    @RF00817                                            0817
*          PASSFLAG = NO;                                  /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0818
*      END;                                                /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
@EL00022 DS    0H                                                  0820
@EF00022 DS    0H                                                  0820
@ER00022 LM    @14,@12,12(@13)                                     0820
         BR    @14                                                 0820
*/*                                                          @Z427VLS*/
*/******************************************************************/
*/*    THIS PROC WILL DETERMINE WHAT TO DO WITH THE FRAME RECORDS   */
*      RESPECIFY (R15) UNRESTRICTED;                       /*@G51DGGB*/
*/*                                                          @G51DGGB*/
*CKFRAMES: PROC;                                           /*@G51DGGB*/
CKFRAMES STM   @14,@12,@SA00023                                    0822
* RESPECIFY (R15) RESTRICTED;                              /*@G51DGGB*/
*IF DEBUG49 = ON THEN                                              0824
         TM    DEBUG49(R2),B'01000000'                             0824
         BNO   @RF00824                                            0824
* CALL HEXDUMP;                                            /*@G51DGGB*/
         BAL   @14,HEXDUMP                                         0825
*      IF LRTCNT = ONE & FRAMENUM ^= ZERO & (LRTKEY1 & 'F0'X) = 'A0'X
*       THEN                                                       0826
@RF00824 CLI   LRTCNT(R7),1                                        0826
         BNE   @RF00826                                            0826
         L     @14,FRAMEPTR(,R2)                                   0826
         L     @14,FRAMENUM(,@14)                                  0826
         LTR   @14,@14                                             0826
         BZ    @RF00826                                            0826
         MVC   @TS00001(1),LRTKEY1(R7)                             0826
         NI    @TS00001,X'F0'                                      0826
         CLI   @TS00001,X'A0'                                      0826
         BNE   @RF00826                                            0826
*        DO;                                               /*@G51DGGB*/
*          SAVESEQ = ONE;           /* RESET SEQUENCE CHECK  @G51DGGB*/
         MVC   SAVESEQ(4),@CF00055                                 0828
*          CALL FRAMEREP;           /* SEE IF THIS FRAME SET MUST*/
         BAL   @14,FRAMEREP                                        0829
*          R15 = ERROR;             /* BE SAVED              @G51DGGB*/
         L     @08,ERROR                                           0830
         LR    R15,@08                                             0830
*          IF LRTNLAST = OFF & FRAMEYES = ON & ERROR = 0 THEN      0831
         TM    LRTNLAST(R7),B'10000000'                            0831
         BNZ   @RF00831                                            0831
         TM    FRAMEYES,B'00000100'                                0831
         BNO   @RF00831                                            0831
         SLR   @14,@14                                             0831
         CR    @08,@14                                             0831
         BNE   @RF00831                                            0831
*           DO;                                            /*@G51DGGB*/
*            FRAMETYP(CCHINDX) = ALLMCH;                   /*@G51DGGB*/
         L     @08,CCHINDX                                         0833
         MH    @08,@CH00227                                        0833
         L     @06,FRAMEPTR(,R2)                                   0833
         ALR   @06,@08                                             0833
         AL    @06,@CF01524                                        0833
         MVI   FRAMETYP-17(@06),X'02'                              0833
*            SAVESEQ = 0;                                  /*@G51DGGB*/
         ST    @14,SAVESEQ                                         0834
*           END;                                           /*@G51DGGB*/
*        END;                                              /*@G51DGGB*/
*      ELSE                         /* NON-FIRST FRAME       @G51DGGB*/
*        DO;                                               /*@G51DGGB*/
         B     @RC00826                                            0837
@RF00826 DS    0H                                                  0838
*          IF FRAMEYES = ON THEN    /* IF FRAME IS TO BE SAVED  */ 0838
         TM    FRAMEYES,B'00000100'                                0838
         BNO   @RF00838                                            0838
*            DO;                                           /*@G51DGGB*/
*              SAVESEQ = SAVESEQ + 1;  /* UP SEQ CHECK       @G51DGGB*/
         LA    @14,1                                               0840
         AL    @14,SAVESEQ                                         0840
         ST    @14,SAVESEQ                                         0840
*              IF SAVESEQ = LRTCNT THEN /* IF RECORD NOT MISSING */
         SLR   @08,@08                                             0841
         IC    @08,LRTCNT(,R7)                                     0841
         CR    @14,@08                                             0841
         BNE   @RF00841                                            0841
*                DO;                                       /*@G51DGGB*/
*                  CALL BUILDTTR;   /* SAVE EXTERNAL LOCATION */   0843
         BAL   @14,BUILDTTR                                        0843
*                  R15 = ERROR;                            /*@G51DGGB*/
         L     R15,ERROR                                           0844
*                  IF R15 = ZERO THEN  /* IF FRAME EXTERNAL LOC  */
         SLR   @14,@14                                             0845
         CR    R15,@14                                             0845
         BNE   @RF00845                                            0845
*                    DO;               /* SUCCESSFULLY SAVED @G51DGGB*/
*                      IF LRTNLAST = OFF THEN /* IF LAST FRAME  */ 0847
         TM    LRTNLAST(R7),B'10000000'                            0847
         BNZ   @RF00847                                            0847
*                        DO;                               /*@G51DGGB*/
*                          IF( LRTKEY1 & GENREC) = HEXA0 THEN      0849
         MVC   @TS00001(1),LRTKEY1(R7)                             0849
         NI    @TS00001,X'F0'                                      0849
         CLI   @TS00001,X'A0'                                      0849
         BNE   @RF00849                                            0849
*                           DO;                            /*@G51DGGB*/
*                            FRAMETYP(CCHINDX) = ALLMCH;   /*@G51DGGB*/
         L     @08,CCHINDX                                         0851
         MH    @08,@CH00227                                        0851
         L     @06,FRAMEPTR(,R2)                                   0851
         ALR   @06,@08                                             0851
         AL    @06,@CF01524                                        0851
         MVI   FRAMETYP-17(@06),X'02'                              0851
*                            SAVESEQ = 0;                  /*@G51DGGB*/
         ST    @14,SAVESEQ                                         0852
*                           END;                           /*@G51DGGB*/
*                          /*IF ALL MCH FRAMES HAVE BEEN SAVED,  */
*                          /*THEN INDICATE SUCH              @G51DGGB*/
*                           ELSE                  /*IS CCH FRAME */
*                            DO;                           /*@G51DGGB*/
         B     @RC00849                                            0854
@RF00849 DS    0H                                                  0855
*                            FRAMEYES = OFF;               /*@G51DGGB*/
         NI    FRAMEYES,B'11111011'                                0855
*                            IF FRAMETYP(CCHINDX) ^= ALLMCH THEN   0856
         L     @14,CCHINDX                                         0856
         MH    @14,@CH00227                                        0856
         L     @08,FRAMEPTR(,R2)                                   0856
         ALR   @08,@14                                             0856
         AL    @08,@CF01524                                        0856
         CLI   FRAMETYP-17(@08),X'02'                              0856
         BE    @RF00856                                            0856
*                              DO; /*IF MISSING LAST MCH FRAME   */
*                                MSGNO = QQ1;              /*@G51DGGB*/
         MVI   MSGNO,X'0A'                                         0858
*                                CALL ERRMSG;              /*@G51DGGB*/
         BAL   @14,ERRMSG                                          0859
*                                CALL FIXENTRY; /*DELETE INCOM-  */
         BAL   @14,FIXENTRY                                        0860
*                              END;             /*PLETE SET. @G51DGGB*/
*                             ELSE   /*IS COMPLETE SET -INDICATE  */
*                              FRAMETYP(CCHINDX) = ALLALL; /*IT IS*/
         B     @RC00856                                            0862
@RF00856 L     @14,CCHINDX                                         0862
         MH    @14,@CH00227                                        0862
         L     @08,FRAMEPTR(,R2)                                   0862
         ALR   @08,@14                                             0862
         AL    @08,@CF01524                                        0862
         MVI   FRAMETYP-17(@08),X'FF'                              0862
*                            END;                          /*@G51DGGB*/
*                        END;                              /*@G51DGGB*/
*                   END;                                   /*@G51DGGB*/
*              END;                                        /*@G51DGGB*/
*            ELSE   /*MISSING MIDDLE FRAME                   @G51DGGB*/
*              DO;                                         /*@G51DGGB*/
         B     @RC00841                                            0867
@RF00841 DS    0H                                                  0868
*                MSGNO = QQ1;                              /*@G51DGGB*/
         MVI   MSGNO,X'0A'                                         0868
*                CALL ERRMSG;                              /*@G51DGGB*/
         BAL   @14,ERRMSG                                          0869
*                FRAMEYES = OFF; /*DONT SAVE INCOMPLETE SET  @G51DGGB*/
         NI    FRAMEYES,B'11111011'                                0870
*                CALL FIXENTRY; /*DELETE REFS TO INCOMPLETE SET*/  0871
         BAL   @14,FIXENTRY                                        0871
*              END;                                        /*@G51DGGB*/
*           END;                                           /*@G51DGGB*/
*          ELSE      /*FRAME NOT TO BE SAVED                 @G51DGGB*/
*            BUG(37) = BUG(37) + 1;                        /*@G51DGGB*/
         B     @RC00838                                            0874
@RF00838 LA    @14,1                                               0874
         AL    @14,BUG+144                                         0874
         ST    @14,BUG+144                                         0874
*      END;                                                /*@G51DGGB*/
*RESPECIFY (R15) UNRESTRICTED;                             /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00023 DS    0H                                                  0877
@EF00023 DS    0H                                                  0877
@ER00023 LM    @14,@12,@SA00023                                    0877
         BR    @14                                                 0877
*/********************************************************************/
*/*    THIS PROC WILL WRITE FRAMES TO THE ACCDEV DATA SET IF ANY WERE*/
*/*    SAVED DURING THIS JOB STEP                            @G51DGGB*/
*/*                                                          @G51DGGB*/
*WRITEFRM: PROC;                                           /*@G51DGGB*/
WRITEFRM STM   @14,@12,@SA00024                                    0878
*DCL F FIXED(31) INIT(0);                                  /*@G51DGGB*/
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*         DO F = 1 BY 1 TO FRAMENUM WHILE R15 < FOUR;       /*SETS. */
         LA    @14,1                                               0881
         ST    @14,F                                               0881
         B     @DE00881                                            0881
@DL00881 C     R15,@CF00064                                        0881
         BNL   @DC00881                                            0881
*           IF FRAMETYP(F) = ALLALL THEN /*IF COMPLETE SET   @G51DGGB*/
         MH    @14,@CH00227                                        0882
         L     @08,FRAMEPTR(,R2)                                   0882
         ST    @14,@TF00001                                        0882
         ALR   @14,@08                                             0882
         AL    @14,@CF01524                                        0882
         CLI   FRAMETYP-17(@14),X'FF'                              0882
         BNE   @RF00882                                            0882
*             DO;                                          /*@G51DGGB*/
*              IF PACC = YES THEN                                  0884
         TM    PACC(R2),B'01000000'                                0884
         BNO   @RF00884                                            0884
*               DO;                                        /*@G51DGGB*/
*               LISTPTR = FRAMLOCM(F);   /*ESTABLISH LISTLOC ADDR.*/
         L     @14,@TF00001                                        0886
         AL    @08,@CF01533                                        0886
         L     @14,FRAMLOCM-20(@14,@08)                            0886
         ST    @14,LISTPTR                                         0886
*               DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR ;/*@G51DGGB*/
         LA    @14,1                                               0887
         ST    @14,Z                                               0887
         B     @DE00887                                            0887
@DL00887 C     R15,@CF00064                                        0887
         BNL   @DC00887                                            0887
*                 RECCCHHR = LISTCCHR(Z);  /*GET ALL MCH FRAMES*/  0888
         MH    @14,@CH00079                                        0888
         L     @08,LISTPTR                                         0888
         ALR   @08,@14                                             0888
         BCTR  @08,0                                               0888
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0888
*                 CALL IOHND(READIRCT);    /*READ FRAME FROM DIRECTWK*/
         L     @15,ADIOHND(,R2)                                    0889
         LA    @01,@AL00889                                        0889
         BALR  @14,@15                                             0889
*                 IF R15 = ZERO THEN       /*WRITE FRAME TO ACCDEV*/
         LTR   R15,R15                                             0890
         BNZ   @RF00890                                            0890
*                  DO;                                     /*@G51DGGB*/
*                   CALL IOHND(RITEHIST);                  /*@G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0892
         LA    @01,@AL00892                                        0892
         BALR  @14,@15                                             0892
*                   BUG(44) = BUG(44) + 1;                 /*@G51DGGB*/
         LA    @14,1                                               0893
         AL    @14,BUG+172                                         0893
         ST    @14,BUG+172                                         0893
*                  END;                                    /*@G51DGGB*/
*                 ELSE                     /*IDENTIFY MISSING FRAME*/
*                   DO;                    /*ON ACCDEV       @G51DGGB*/
         B     @RC00890                                            0895
@RF00890 DS    0H                                                  0896
*                     MSGNO = RR;          /*FRAME LOST WRITING TO */
         MVI   MSGNO,X'09'                                         0896
*                     ERROR = 12;                          /*@G51DGGB*/
         MVC   ERROR(4),@CF00032                                   0897
*                     CALL ERRMSG;         /*ACCDEV MESSAGE. @G51DGGB*/
         BAL   @14,ERRMSG                                          0898
*                   END;                                   /*@G51DGGB*/
*              END;                                        /*@G51DGGB*/
@RC00890 LA    @14,1                                               0900
         AL    @14,Z                                               0900
         ST    @14,Z                                               0900
@DE00887 L     @08,LISTPTR                                         0900
         C     @14,LISTNUM(,@08)                                   0900
         BNH   @DL00887                                            0900
@DC00887 DS    0H                                                  0901
*              IF R15 = ZERO THEN /*IF NO ACCDEV WRITE ERROR @G51DGGB*/
         LTR   R15,R15                                             0901
         BNZ   @RF00901                                            0901
*                DO;                                       /*@G51DGGB*/
*                  LISTPTR = FRAMLOCC(F); /*GET CCH FRAMES   @G51DGGB*/
         L     @14,F                                               0903
         MH    @14,@CH00227                                        0903
         L     @08,FRAMEPTR(,R2)                                   0903
         L     @14,FRAMLOCC-24(@14,@08)                            0903
         ST    @14,LISTPTR                                         0903
*                  DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR;      0904
         LA    @14,1                                               0904
         ST    @14,Z                                               0904
         B     @DE00904                                            0904
@DL00904 C     R15,@CF00064                                        0904
         BNL   @DC00904                                            0904
*                    RECCCHHR = LISTCCHR(Z);               /*@G51DGGB*/
         MH    @14,@CH00079                                        0905
         L     @08,LISTPTR                                         0905
         ALR   @08,@14                                             0905
         BCTR  @08,0                                               0905
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0905
*                      CALL IOHND(READIRCT); /*READ FRAME OFF DRCTWK*/
         L     @15,ADIOHND(,R2)                                    0906
         LA    @01,@AL00906                                        0906
         BALR  @14,@15                                             0906
*                      IF R15 = ZERO THEN    /*IF SUCCESS THEN WRITE*/
         LTR   R15,R15                                             0907
         BNZ   @RF00907                                            0907
*                  DO;                                     /*@G51DGGB*/
*                   CALL IOHND(RITEHIST);                  /*@G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0909
         LA    @01,@AL00909                                        0909
         BALR  @14,@15                                             0909
*                   BUG(44) = BUG(44) + 1;                 /*@G51DGGB*/
         LA    @14,1                                               0910
         AL    @14,BUG+172                                         0910
         ST    @14,BUG+172                                         0910
*                  END;                                    /*@G51DGGB*/
*                      ELSE /*ACCDEV WRITE ERROR             @G51DGGB*/
*                        DO;                               /*@G51DGGB*/
         B     @RC00907                                            0912
@RF00907 DS    0H                                                  0913
*                          MSGNO = RR; /*FRAME LOST WRITING TO ACCDEV*/
         MVI   MSGNO,X'09'                                         0913
*                          ERROR = 12;                     /*@G51DGGB*/
         MVC   ERROR(4),@CF00032                                   0914
*                          CALL ERRMSG;   /*MESSAGE.         @G51DGGB*/
         BAL   @14,ERRMSG                                          0915
*                        END;                              /*@G51DGGB*/
*                    END;                                  /*@G51DGGB*/
@RC00907 LA    @14,1                                               0917
         AL    @14,Z                                               0917
         ST    @14,Z                                               0917
@DE00904 L     @08,LISTPTR                                         0917
         C     @14,LISTNUM(,@08)                                   0917
         BNH   @DL00904                                            0917
@DC00904 DS    0H                                                  0918
*                 END;                                     /*@G51DGGB*/
*              END;                                        /*@G51DGGB*/
*             END;                                         /*@G51DGGB*/
*           ELSE  /*INCOMPLETE FRAME SET                     @G51DGGB*/
*             DO;                                          /*@G51DGGB*/
         B     @RC00882                                            0921
@RF00882 DS    0H                                                  0922
*               MSGNO = QQ; /*MISSING FRAME SET MESSAGE      @G51DGGB*/
         MVI   MSGNO,X'07'                                         0922
*               CCHINDX = F;   /*CORRECT DEBUG FRAME COUNTS BY */  0923
         L     @14,F                                               0923
         ST    @14,CCHINDX                                         0923
*               CALL ERRMSG;                               /*@G51DGGB*/
         BAL   @14,ERRMSG                                          0924
*               CALL FIXENTRY; /*PASSING ENTRY INDEX TO FIXENTRY*/ 0925
         BAL   @14,FIXENTRY                                        0925
*             END;                                         /*@G51DGGB*/
*         END;                                             /*@G51DGGB*/
@RC00882 LA    @14,1                                               0927
         AL    @14,F                                               0927
         ST    @14,F                                               0927
@DE00881 L     @08,FRAMEPTR(,R2)                                   0927
         C     @14,FRAMENUM(,@08)                                  0927
         BNH   @DL00881                                            0927
@DC00881 DS    0H                                                  0928
*      END;                                                /*@G51DGGB*/
@EL00024 DS    0H                                                  0928
@EF00024 DS    0H                                                  0928
@ER00024 LM    @14,@12,@SA00024                                    0928
         BR    @14                                                 0928
*/******************************************************************/
*/*    THIS PROC WILL DETERMINE IF THE MODEL IS A MERIDAN CPU      */
*MERIDCK1: PROC;                                           /*@G51DGGB*/
MERIDCK1 STM   @14,@12,@SA00025                                    0929
*DCL A FIXED(31) INIT(0);                                  /*@G51DGGB*/
*ISMERD = NO;              /*SET THE FLAG PRIOR TO START     @G51DGGB*/
         NI    ISMERD,B'10111111'                                  0931
*DO A = 1 BY 1 TO MRDNUMBR WHILE(ISMERD = NO);             /*@G51DGGB*/
         LA    @14,1                                               0932
         ST    @14,A                                               0932
         B     @DE00932                                            0932
@DL00932 TM    ISMERD,B'01000000'                                  0932
         BNZ   @DC00932                                            0932
* IF LRTMODEL = MODEL(A) THEN                                      0933
         ALR   @14,@14                                             0933
         L     @08,MERDCPTR(,R2)                                   0933
         ALR   @08,@14                                             0933
         CLC   LRTMODEL(2,R7),MODEL-2(@08)                         0933
         BNE   @RF00933                                            0933
*  DO;                                                     /*@G51DGGB*/
*  ISMERD = YES;          /*TELL THE CALLER IT WAS MERDIAN   @G51DGGB*/
         OI    ISMERD,B'01000000'                                  0935
*  WORKTYPE = (WORKTYPE × '0F'X);                          /*@G51DGGB*/
         OI    WORKTYPE,X'0F'                                      0936
*  CALL BUILDFTB;                                          /*@G51DGGB*/
         BAL   @14,BUILDFTB                                        0937
*  END;                                                    /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@RF00933 LA    @14,1                                               0939
         AL    @14,A                                               0939
         ST    @14,A                                               0939
@DE00932 L     @08,MERDCPTR(,R2)                                   0939
         CH    @14,MRDNUMBR(,@08)                                  0939
         BNH   @DL00932                                            0939
@DC00932 DS    0H                                                  0940
*END;                                                      /*@G51DGGB*/
@EL00025 DS    0H                                                  0940
@EF00025 DS    0H                                                  0940
@ER00025 LM    @14,@12,@SA00025                                    0940
         BR    @14                                                 0940
*/******************************************************************/
*/*THIS PROC WILL EXAMINE THE MERIDIAN MCH OR CCH IN ORDER TO BUILD*/
*/*FRAMTAB ENTRIES FOR UNIQUE RECORDS                        @G51DGGB*/
*BUILDFTB: PROC; /*BUILD NEW ENTRY IF CPU IS UNIQUE          @G51DGGB*/
BUILDFTB STM   @14,@12,@SA00026                                    0941
*LOOPOUT = NO;                                             /*@G51DGGB*/
         NI    LOOPOUT,B'11101111'                                 0942
*DO T = 1 BY 1 TO EVMAX WHILE LOOPOUT = NO; /*EXAMINE ALL FRAMETAB*/
         LA    @14,1                                               0943
         ST    @14,T                                               0943
@DL00943 TM    LOOPOUT,B'00010000'                                 0943
         BNZ   @DC00943                                            0943
*  IF FRAMECPU(T) = LRTCPMOD THEN  /*IF CPU ALREADY IN TABLE THEN*/
         MH    @14,@CH00227                                        0944
         L     @08,FRAMEPTR(,R2)                                   0944
         ALR   @08,@14                                             0944
         AL    @08,@CF01522                                        0944
         CLC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      0944
         BNE   @RF00944                                            0944
*    LOOPOUT = YES; /*EXIT LOOP                              @G51DGGB*/
         OI    LOOPOUT,B'00010000'                                 0945
*  ELSE     /*IF ENTRY DOESNT MATCH THE FRAME                @G51DGGB*/
*    DO;                                                   /*@G51DGGB*/
         B     @RC00944                                            0946
@RF00944 DS    0H                                                  0947
*      IF FRAMECPU(T) = ZERO1 THEN/*NO MATCH,ALL SET ENTRIES EXAMINED*/
         L     @14,T                                               0947
         MH    @14,@CH00227                                        0947
         L     @08,FRAMEPTR(,R2)                                   0947
         ST    @14,@TF00001                                        0947
         ALR   @14,@08                                             0947
         AL    @14,@CF01522                                        0947
         CLC   FRAMECPU-4(5,@14),ZERO1                             0947
         BNE   @RF00947                                            0947
*        DO;                                               /*@G51DGGB*/
*          FRAMECPU(T) = LRTCPMOD;                         /*@G51DGGB*/
         LR    @14,@08                                             0949
         AL    @14,@TF00001                                        0949
         AL    @14,@CF01522                                        0949
         MVC   FRAMECPU-4(5,@14),LRTCPMOD(R7)                      0949
*          FRAMENUM = FRAMENUM + 1;                        /*@G51DGGB*/
         LA    @14,1                                               0950
         AL    @14,FRAMENUM(,@08)                                  0950
         ST    @14,FRAMENUM(,@08)                                  0950
*          LOOPOUT= YES;   /*HAVE A MATCH SO EXIT            @G51DGGB*/
         OI    LOOPOUT,B'00010000'                                 0951
*        END;                                              /*@G51DGGB*/
*      ELSE                                                        0953
*        IF T = EVMAX THEN /*UNIQUE ENTRY BUT NOT ROOM IN TABLE*/  0953
         B     @RC00947                                            0953
@RF00947 CLC   T(4),@CF00088                                       0953
         BNE   @RF00953                                            0953
*          DO;                                             /*@G51DGGB*/
*            IF ONETIME = NO THEN   /*ISSUE MESSAGE ONLY ONCE*/    0955
         TM    ONETIME,B'10000000'                                 0955
         BNZ   @RF00955                                            0955
*              DO;                                         /*@G51DGGB*/
*                MSGNO = YY;/*SET FLAG FOR OBTAINING THE MESSAGE*/ 0957
         MVI   MSGNO,X'05'                                         0957
*                CALL ERRMSG; /*GO OBTAIN THE MESSAGE AND PRINT IT*/
         BAL   @14,ERRMSG                                          0958
*                ONETIME = YES;/*SET SO AS TO NOT RETURN     @G51DGGB*/
         OI    ONETIME,B'10000000'                                 0959
*              END;                                        /*@G51DGGB*/
*          END;                                            /*@G51DGGB*/
@RF00955 DS    0H                                                  0962
*    END;                                                  /*@G51DGGB*/
@RF00953 DS    0H                                                  0962
@RC00947 DS    0H                                                  0963
* END;                                                     /*@G51DGGB*/
@RC00944 LA    @14,1                                               0963
         AL    @14,T                                               0963
         ST    @14,T                                               0963
         C     @14,@CF00088                                        0963
         BNH   @DL00943                                            0963
@DC00943 DS    0H                                                  0964
*END; /*END OF PROC BUILDFTB                                 @G51DGGB*/
@EL00026 DS    0H                                                  0964
@EF00026 DS    0H                                                  0964
@ER00026 LM    @14,@12,@SA00026                                    0964
         BR    @14                                                 0964
*FRAMEREP: PROC; /*REPLACE FRAME IF MORE CURRENT FRAME FOUND @G51DGGB*/
FRAMEREP STM   @14,@12,@SA00027                                    0965
*                /*COMPLETE ENTRY IF NO DATE ETC.            @G51DGGB*/
*                /*APPEND LOCATION OF FRAME EXTERNAL LOCATION LIST*/
*GETOUT = NO;                                              /*@G51DGGB*/
         NI    GETOUT,B'11111101'                                  0966
*DO X = 1 BY 1 TO FRAMENUM WHILE GETOUT = NO; /*LOOP THROUGH ALL SET*/
         LA    @14,1                                               0967
         ST    @14,X                                               0967
         B     @DE00967                                            0967
@DL00967 TM    GETOUT,B'00000010'                                  0967
         BNZ   @DC00967                                            0967
*                                             /*ENTRIES OF FRAMETAB */
*  IF FRAMECPU(X) = LRTCPMOD THEN             /*IF RECORD CPU MODEL */
         LA    @08,24                                              0968
         LR    @01,@14                                             0968
         MR    @00,@08                                             0968
         L     @06,FRAMEPTR(,R2)                                   0968
         ST    @01,@TF00001                                        0968
         ALR   @01,@06                                             0968
         AL    @01,@CF01522                                        0968
         CLC   FRAMECPU-4(5,@01),LRTCPMOD(R7)                      0968
         BNE   @RF00968                                            0968
*    DO;                                      /*SERIAL MATCHES THOSE*/
*      CCHINDX = X;  /*SAVE INDEX*/           /*OF THE ENTRY @G51DGGB*/
         ST    @14,CCHINDX                                         0970
*      IF FRAMEDT(X) < LRTDT THEN             /*IF REC DATE GREATER */
         LR    @14,@06                                             0971
         AL    @14,@TF00001                                        0971
         AL    @14,@CF01539                                        0971
         CLC   FRAMEDT-9(8,@14),LRTDT(R7)                          0971
         BNL   @RF00971                                            0971
*        DO;                                  /*THAN ENTRY DATE     */
*         IF DEBUG16 = ON & FRAMEDT(Q) ^= '0000000000000000'X THEN 0973
         TM    DEBUG16(R2),B'10000000'                             0973
         BNO   @RF00973                                            0973
         LR    @01,@08                                             0973
         M     @00,Q                                               0973
         ALR   @06,@01                                             0973
         AL    @06,@CF01539                                        0973
         CLC   FRAMEDT-9(8,@06),@CB01424                           0973
         BE    @RF00973                                            0973
*         /* DEBUG SWITCH ON AND IT IS THE FIRST TIME DONT ISSUE MES*/
*          CALL FRAMMORE; /*GO ISSUE THE FRAME REPLACED MESSAGE*/  0974
         BAL   @14,FRAMMORE                                        0974
*         ELSE                                                     0975
*          DO;                                             /*@G51DGGB*/
         B     @RC00973                                            0975
@RF00973 DS    0H                                                  0976
*           CALL FIXENTRY;     /*SET UP TO ADD THE FRAMES TO THE TABLE*
         BAL   @14,FIXENTRY                                        0976
*           FRAMEDT(X) = LRTDT; /*SAVE THE DATE OF THIS FRAME*/    0977
         L     @14,X                                               0977
         MH    @14,@CH00227                                        0977
         L     @08,FRAMEPTR(,R2)                                   0977
         ALR   @08,@14                                             0977
         AL    @08,@CF01539                                        0977
         MVC   FRAMEDT-9(8,@08),LRTDT(R7)                          0977
*          END;                                            /*@G51DGGB*/
*              CALL BUILDTTR;                /*SAVE FRAME LOCATION*/
@RC00973 BAL   @14,BUILDTTR                                        0979
*               FRAMEYES = YES;/*SAVE SUCCEEDING FRAMES OF THIS    */
         OI    FRAMEYES,B'00000100'                                0980
*                              /*LOGICAL SET                 @G51DGGB*/
*         END;                                             /*@G51DGGB*/
*       ELSE  /*IMPLIES DATE IS LOW OR EQUAL                 @G51DGGB*/
*        DO;                                               /*@G51DGGB*/
         B     @RC00971                                            0982
@RF00971 DS    0H                                                  0983
*         IF FRAMEDT(X) = LRTDT THEN /*IF TABLE DATE EQUALS RECORD DAT*
         L     @14,X                                               0983
         MH    @14,@CH00227                                        0983
         L     @08,FRAMEPTR(,R2)                                   0983
         ST    @14,@TF00001                                        0983
         ALR   @14,@08                                             0983
         AL    @14,@CF01539                                        0983
         CLC   FRAMEDT-9(8,@14),LRTDT(R7)                          0983
         BNE   @RF00983                                            0983
*           DO;                                            /*@G51DGGB*/
*            IF FRAMETYP(X) ^= ALLALL THEN                         0985
         AL    @08,@TF00001                                        0985
         AL    @08,@CF01524                                        0985
         CLI   FRAMETYP-17(@08),X'FF'                              0985
         BE    @RF00985                                            0985
*             DO;                                          /*@G51DGGB*/
*                      CALL FIXENTRY; /*DELETE INCOMPLETE SET       */
         BAL   @14,FIXENTRY                                        0987
*                      MSGNO = QQ1;/*ISSUE FRAME SET INCOMPLETE MESS*/
         MVI   MSGNO,X'0A'                                         0988
*                      CALL ERRMSG;                        /*@G51DGGB*/
         BAL   @14,ERRMSG                                          0989
*                      CALL BUILDTTR; /*SAVE THIS FRAME      @G51DGGB*/
         BAL   @14,BUILDTTR                                        0990
*                      FRAMEYES = YES; /*SAVE SUCCEEDING MEMBERS */
         OI    FRAMEYES,B'00000100'                                0991
*             END;                                         /*@G51DGGB*/
*            ELSE  /*COMPLETE SET FOR THIS DATE ALREADY EXISTS      */
*               DO; /*FRAMETYP IS EQUAL TO ALLALL            @G51DGGB*/
         B     @RC00985                                            0993
@RF00985 DS    0H                                                  0994
*                   FRAMEYES = NO;/*DELETE SUCCEEDING FRAMES OF SET */
         NI    FRAMEYES,B'11111011'                                0994
*                   BUG(37) = BUG(37) + 1; /*COUNT FRAME AS NOT USED*/
         LA    @14,1                                               0995
         AL    @14,BUG+144                                         0995
         ST    @14,BUG+144                                         0995
*               END;                                       /*@G51DGGB*/
*        END; /*END OF CODE IF DATE IN RECORD EQUALS DATE IN TABLE*/
*       ELSE /*DATE IN TABLE GREATER THAN FRAME RECORD DATE  @G51DGGB*/
*        BUG(37) = BUG(37)  + 1; /*INCREMENT # OF REJECTED FRAMES */
         B     @RC00983                                            0998
@RF00983 LA    @14,1                                               0998
         AL    @14,BUG+144                                         0998
         ST    @14,BUG+144                                         0998
*    END; /*END OF CODE IF DATE IN RECORD IS LOW OR EQUAL    @G51DGGB*/
@RC00983 DS    0H                                                  1000
*  GETOUT = YES; /*GET OUT OF LOOP AFTER CPU MATCH           @G51DGGB*/
@RC00971 OI    GETOUT,B'00000010'                                  1000
* END; /*END OF CODE FOR A RECORD TO ENTRY CPU MATCH         @G51DGGB*/
*END; /*END OF FRAMETAB LOOP                                 @G51DGGB*/
@RF00968 LA    @14,1                                               1002
         AL    @14,X                                               1002
         ST    @14,X                                               1002
@DE00967 L     @08,FRAMEPTR(,R2)                                   1002
         C     @14,FRAMENUM(,@08)                                  1002
         BNH   @DL00967                                            1002
@DC00967 DS    0H                                                  1003
*IF GETOUT = NO THEN /*MERIDIAN FRAME BUT NO ROOM IN TABLE   @G51DGGB*/
         TM    GETOUT,B'00000010'                                  1003
         BNZ   @RF01003                                            1003
*  BUG(45) = BUG(45) + 1;                                  /*@G51DGGB*/
         LA    @14,1                                               1004
         AL    @14,BUG+176                                         1004
         ST    @14,BUG+176                                         1004
*END; /*END OF PROC FRAMEREP                                 @G51DGGB*/
@EL00027 DS    0H                                                  1005
@EF00027 DS    0H                                                  1005
@ER00027 LM    @14,@12,@SA00027                                    1005
         BR    @14                                                 1005
*BUILDTTR: PROC; /*SAVE LOCATION OF A FRAME IN LISTLOC       @G51DGGB*/
BUILDTTR STM   @14,@12,@SA00028                                    1006
*DCL TEMPSTOR FIXED(31) INIT(0);  /*FOR STORING THE ADDRESS OF CORE*/
*DCL G FIXED(31) INIT(0);                                  /*@G51DGGB*/
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*IF (LRTKEY1 & GENREC) = HEXA0 THEN /* IF MCH FRAME          @G51DGGB*/
         MVC   @TS00001(1),LRTKEY1(R7)                             1010
         NI    @TS00001,X'F0'                                      1010
         CLI   @TS00001,X'A0'                                      1010
         BNE   @RF01010                                            1010
*  DO;                                                     /*@G51DGGB*/
*    IF FRAMLOCM(CCHINDX) = ZERO THEN /*IF LISTLOC CORE FOR A CPU*/
         L     @14,CCHINDX                                         1012
         MH    @14,@CH00227                                        1012
         L     @08,FRAMEPTR(,R2)                                   1012
         AL    @08,@CF01533                                        1012
         L     @14,FRAMLOCM-20(@14,@08)                            1012
         LTR   @14,@14                                             1012
         BNZ   @RF01012                                            1012
*      DO;                            /*IS UNALLOCATED       @G51DGGB*/
*       RESPECIFY (R0,R1) RESTRICTED;                      /*@G51DGGB*/
*        R0 = LISTBENT * LISTMAX * 2; /*ALLOCATE CORE FOR BOTH CCH*/
         LA    R0,500                                              1015
*        R0 = R0 + 12;                /*AND MCH FRAME LOCATIONS   */
         AL    R0,@CF00032                                         1016
*        GEN(GETMAIN EC,LV=(0),A=TEMPSTOR,SP=21);          /*@G51DGGB*/
         GETMAIN EC,LV=(0),A=TEMPSTOR,SP=21
*        IF R15 = SUCCESS THEN                                     1018
         LTR   R15,R15                                             1018
         BNZ   @RF01018                                            1018
*          DO;                                             /*@G51DGGB*/
*            BUG(42) = BUG(42) + 1;                        /*@G51DGGB*/
         LA    @14,1                                               1020
         AL    @14,BUG+164                                         1020
         ST    @14,BUG+164                                         1020
*            R1 = TEMPSTOR;                                /*@G51DGGB*/
         L     R1,TEMPSTOR                                         1021
*            FRAMLOCM(CCHINDX) = R1;  /*SET POINTERS TO LISTLOC   */
         L     @14,CCHINDX                                         1022
         MH    @14,@CH00227                                        1022
         L     @08,FRAMEPTR(,R2)                                   1022
         AL    @08,@CF01533                                        1022
         ST    R1,FRAMLOCM-20(@14,@08)                             1022
*            R1 = R1+LISTBENT *       /*TABLES FOR BOTH CCL AND MCH*/
*                LISTMAX+4;           /*FRAMES               @G51DGGB*/
         AL    R1,@CF01510                                         1023
*            R0 = ZERO;          /*ENSURE THAT TABLE ON WORD BOUNDARY*/
         SLR   R0,R0                                               1024
*            RESPECIFY (R4) RESTRICTED;                    /*@G51DGGB*/
*            R4 = 4;             /*DIVIDE BY NUMBER OF BYTES IN WORD*/
         LA    R4,4                                                1026
*            GEN(DR R0,R4);                                /*@G51DGGB*/
         DR R0,R4
*            RESPECIFY (R4) UNRESTRICTED;                  /*@G51DGGB*/
*            IF R0 > ZERO THEN /*REMAINDER MEANS NOT INTEGRAL NUMBER*/
         LTR   R0,R0                                               1029
         BNP   @RF01029                                            1029
*                              /*NUMBER OF DOUBLEWORDS.      @G51DGGB*/
*              R1 = R1 + 1; /*ADD ONE EXTRA FULL WORD        @G51DGGB*/
         AL    R1,@CF00055                                         1030
*            R1 = R1 * FOUR; /*RESET ONE TO NUMBER OF BYTES  @G51DGGB*/
@RF01029 SLL   R1,2                                                1031
*            FRAMLOCC(CCHINDX) = R1; /*SET POINTER TO CCH CCHHR TABLE*/
         L     @14,CCHINDX                                         1032
         MH    @14,@CH00227                                        1032
         L     @08,FRAMEPTR(,R2)                                   1032
         ST    R1,FRAMLOCC-24(@14,@08)                             1032
*            LISTPTR = R1;      /*ESTABLISH ADDRESSABILITY FOR CCH TB*/
         ST    R1,LISTPTR                                          1033
*            LISTNUM = ZERO;    /*ZERO CCH LISTLOC TABLE     @G51DGGB*/
         L     @14,LISTPTR                                         1034
         SLR   @08,@08                                             1034
         ST    @08,LISTNUM(,@14)                                   1034
*            DO G = 1 BY 1 TO LISTMAX;                     /*@G51DGGB*/
         LA    @14,1                                               1035
         ST    @14,G                                               1035
@DL01035 DS    0H                                                  1036
*              LISTCCHR(G) = LISTCCHR(G) &&                        1036
*                            LISTCCHR(G);                  /*@G51DGGB*/
         LR    @08,@14                                             1036
         MH    @08,@CH00079                                        1036
         L     @06,LISTPTR                                         1036
         ALR   @06,@08                                             1036
         BCTR  @06,0                                               1036
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1036
*            END;                                          /*@G51DGGB*/
         AL    @14,@CF00055                                        1037
         ST    @14,G                                               1037
         C     @14,@CF00293                                        1037
         BNH   @DL01035                                            1037
*            LISTPTR = FRAMLOCM(CCHINDX); /*ADDRESS OF MCH LISTLOC */
         L     @14,CCHINDX                                         1038
         MH    @14,@CH00227                                        1038
         L     @08,FRAMEPTR(,R2)                                   1038
         AL    @08,@CF01533                                        1038
         L     @14,FRAMLOCM-20(@14,@08)                            1038
         ST    @14,LISTPTR                                         1038
*            DO G = 1 BY 1 TO LISTMAX;   /* ZERO MCH LISTLOC TABLE  */
         LA    @14,1                                               1039
         ST    @14,G                                               1039
@DL01039 DS    0H                                                  1040
*            LISTCCHR(G) = LISTCCHR(G) &&                          1040
*                          LISTCCHR(G);                    /*@G51DGGB*/
         LR    @08,@14                                             1040
         MH    @08,@CH00079                                        1040
         L     @06,LISTPTR                                         1040
         ALR   @06,@08                                             1040
         BCTR  @06,0                                               1040
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1040
*            END;                                          /*@G51DGGB*/
         AL    @14,@CF00055                                        1041
         ST    @14,G                                               1041
         C     @14,@CF00293                                        1041
         BNH   @DL01039                                            1041
*            LISTNUM = ZERO;                               /*@G51DGGB*/
         L     @14,LISTPTR                                         1042
         SLR   @08,@08                                             1042
         ST    @08,LISTNUM(,@14)                                   1042
*          END;                                            /*@G51DGGB*/
*        ELSE /*UNSUCCESSFUL GETMAIN                         @G51DGGB*/
*          DO;                                             /*@G51DGGB*/
         B     @RC01018                                            1044
@RF01018 DS    0H                                                  1045
*            MSGNO = XX;   /*TELL MESSAGE PROC WHICH ERROR MESSAGE*/
         MVI   MSGNO,X'08'                                         1045
*            CALL ERRMSG;  /*GO OBTAIN THE MESSAGE AND PRINTIT*/   1046
         BAL   @14,ERRMSG                                          1046
*            R15 = TWELVE; /*SET ERROR CODE FOR EXIT         @G51DGGB*/
         LA    R15,12                                              1047
*            ERROR = R15;                                  /*@G51DGGB*/
         ST    R15,ERROR                                           1048
*          END;                                            /*@G51DGGB*/
*       RESPECIFY (R0,R1) UNRESTRICTED;                    /*@G51DGGB*/
@RC01018 DS    0H                                                  1051
*      END;                                                /*@G51DGGB*/
*    IF R15 = ZERO THEN /*IF GETMAIN WAS SUCCESSFUL OR NO GETMAIN*/
@RF01012 LTR   R15,R15                                             1052
         BNZ   @RF01052                                            1052
*      LISTPTR = FRAMLOCM(CCHINDX);/*ESTABLISH LISTLOC ADDRESS   */
         L     @14,CCHINDX                                         1053
         MH    @14,@CH00227                                        1053
         L     @08,FRAMEPTR(,R2)                                   1053
         AL    @08,@CF01533                                        1053
         L     @14,FRAMLOCM-20(@14,@08)                            1053
         ST    @14,LISTPTR                                         1053
*  END;                                                    /*@G51DGGB*/
*ELSE /* IS A CCH FRAME                                      @G51DGGB*/
*  IF R15 = ZERO THEN                                              1055
         B     @RC01010                                            1055
@RF01010 LTR   R15,R15                                             1055
         BNZ   @RF01055                                            1055
*    LISTPTR = FRAMLOCC(CCHINDX);  /*ESTABLISH CCH LISTLOC ADDRESS*/
         L     @14,CCHINDX                                         1056
         MH    @14,@CH00227                                        1056
         L     @08,FRAMEPTR(,R2)                                   1056
         L     @14,FRAMLOCC-24(@14,@08)                            1056
         ST    @14,LISTPTR                                         1056
*IF R15 = ZERO THEN  /*WAS THE I/O A SUCCESSFUL OPERATION    @G51DGGB*/
@RF01055 DS    0H                                                  1057
@RC01010 LTR   R15,R15                                             1057
         BNZ   @RF01057                                            1057
*  DO;                                                     /*@G51DGGB*/
*    IF LISTNUM + 1 <= LISTMAX THEN /*IF ROOM IN LISTLOC     @G51DGGB*/
         LA    @14,1                                               1059
         L     @08,LISTPTR                                         1059
         AL    @14,LISTNUM(,@08)                                   1059
         C     @14,@CF00293                                        1059
         BH    @RF01059                                            1059
*      DO;                                                 /*@G51DGGB*/
*        IF PHIST = ON THEN        /*IF HISTORY INPUT        @G51DGGB*/
         TM    PHIST(R2),B'00100000'                               1061
         BNO   @RF01061                                            1061
*          CALL IOHND(RITESCRT);   /*WRITE TO SCRATCH DATA SET*/   1062
         L     @15,ADIOHND(,R2)                                    1062
         LA    @01,@AL01062                                        1062
         BALR  @14,@15                                             1062
*        IF R15 = SUCCESS THEN     /*IF SUCCESSFULL WRITE    @G51DGGB*/
@RF01061 LTR   R15,R15                                             1063
         BNZ   @RF01063                                            1063
*          DO;                                             /*@G51DGGB*/
*            LISTCCHR(LISTNUM+1) = RECCCHHR;/*SAVE FRAME EXTERNAL LOC*/
         L     @14,LISTPTR                                         1065
         L     @08,LISTNUM(,@14)                                   1065
         LR    @06,@08                                             1065
         MH    @06,@CH00079                                        1065
         ALR   @06,@14                                             1065
         MVC   LISTCCHR(5,@06),RECCCHHR(R2)                        1065
*            LISTNUM = LISTNUM + 1; /*INCREMENT NO OF BUILT ENTRIES*/
         LA    @06,1                                               1066
         ALR   @08,@06                                             1066
         ST    @08,LISTNUM(,@14)                                   1066
*            BUG(36) = BUG(36) + 1;                        /*@G51DGGB*/
         AL    @06,BUG+140                                         1067
         ST    @06,BUG+140                                         1067
*          END;                                            /*@G51DGGB*/
*        ELSE  /*UNSUCCESSFUL WRITE TO SCRATCH D.S.          @G51DGGB*/
*          R15 = TWELVE; /*TERMINATE FURTHER PROCESSING      @G51DGGB*/
         B     @RC01063                                            1069
@RF01063 LA    R15,12                                              1069
*      END;                                                /*@G51DGGB*/
*    ELSE     /*NO ROOM IN LISTLOC                           @G51DGGB*/
*      DO;                                                 /*@G51DGGB*/
         B     @RC01059                                            1071
@RF01059 DS    0H                                                  1072
*        MSGNO = PP;  /*MORE THAN 50 FRAMES                  @G51DGGB*/
         MVI   MSGNO,X'06'                                         1072
*        CALL ERRMSG;                                      /*@G51DGGB*/
         BAL   @14,ERRMSG                                          1073
*        R15 = TWELVE;                                     /*@G51DGGB*/
         LA    R15,12                                              1074
*        ERROR = R15;                                      /*@G51DGGB*/
         ST    R15,ERROR                                           1075
*      END;                                                /*@G51DGGB*/
*  END;                                                    /*@G51DGGB*/
*RESPECIFY (R0,R1,R15) UNRESTRICTED;                       /*@G51DGGB*/
*END; /*END OF BUILDTTR PROC                                 @G51DGGB*/
@EL00028 DS    0H                                                  1079
@EF00028 DS    0H                                                  1079
@ER00028 LM    @14,@12,@SA00028                                    1079
         BR    @14                                                 1079
*FIXENTRY: PROC;  /*RESET LISTLOC TABLE TO ZEROS BUT DONT FREE CORE*/
FIXENTRY STM   @14,@12,12(@13)                                     1080
*                 /*RESET DATE,TYPE TO ZEROS                 @G51DGGB*/
*DCL T FIXED(31) INIT(0);                                  /*@G51DGGB*/
*FRAMEDT(CCHINDX) = '0000000000000000'X; /*ZERO DATE,TIME    @G51DGGB*/
         L     @08,CCHINDX                                         1082
         MH    @08,@CH00227                                        1082
         L     @06,FRAMEPTR(,R2)                                   1082
         ST    @08,@TF00001                                        1082
         ALR   @08,@06                                             1082
         AL    @08,@CF01539                                        1082
         MVC   FRAMEDT-9(8,@08),@CB01424                           1082
*FRAMETYP(CCHINDX) = '00'X; /*RESET TO NO TYPES OF FRAMES STORED*/ 1083
         LR    @08,@06                                             1083
         AL    @08,@TF00001                                        1083
         AL    @08,@CF01524                                        1083
         MVI   FRAMETYP-17(@08),X'00'                              1083
*IF FRAMLOCM(CCHINDX) > ZERO THEN /*IF MCH FRAME LOC. TAB. ALLOCATED*/
         L     @08,@TF00001                                        1084
         AL    @06,@CF01533                                        1084
         L     @08,FRAMLOCM-20(@08,@06)                            1084
         LTR   @08,@08                                             1084
         BNP   @RF01084                                            1084
*  DO;                                                     /*@G51DGGB*/
*    LISTPTR = FRAMLOCM(CCHINDX); /*SET TABLE BASE ADDRESS   @G51DGGB*/
         ST    @08,LISTPTR                                         1086
*    DO T = 1 BY 1 TO LISTNUM; /*CLEAR ALL STORED CCHHRS TO ZERO*/ 1087
         LA    @08,1                                               1087
         ST    @08,T                                               1087
         B     @DE01087                                            1087
@DL01087 DS    0H                                                  1088
*      LISTCCHR(T) = (LISTCCHR(T) && LISTCCHR(T));         /*@G51DGGB*/
         LR    @06,@08                                             1088
         MH    @06,@CH00079                                        1088
         L     @03,LISTPTR                                         1088
         ALR   @03,@06                                             1088
         BCTR  @03,0                                               1088
         XC    LISTCCHR-4(5,@03),LISTCCHR-4(@03)                   1088
*      BUG(37) = BUG(37) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1089
         LA    @06,1                                               1089
         AL    @06,BUG+144                                         1089
         ST    @06,BUG+144                                         1089
*      BUG(36) = BUG(36) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*/
         L     @06,BUG+140                                         1090
         BCTR  @06,0                                               1090
         ST    @06,BUG+140                                         1090
*    END;                                                  /*@G51DGGB*/
         AL    @08,@CF00055                                        1091
         ST    @08,T                                               1091
@DE01087 L     @06,LISTPTR                                         1091
         C     @08,LISTNUM(,@06)                                   1091
         BNH   @DL01087                                            1091
*    LISTNUM = ZERO; /*SET NUMBER OF STORED CCHHRS TO ZERO   @G51DGGB*/
         L     @08,LISTPTR                                         1092
         SLR   @06,@06                                             1092
         ST    @06,LISTNUM(,@08)                                   1092
*   END;                                                   /*@G51DGGB*/
*IF FRAMLOCC(CCHINDX) > ZERO THEN /*IF CCH FRAM LOC TABLE ALLOCATED*/
@RF01084 L     @08,CCHINDX                                         1094
         MH    @08,@CH00227                                        1094
         L     @06,FRAMEPTR(,R2)                                   1094
         L     @08,FRAMLOCC-24(@08,@06)                            1094
         LTR   @08,@08                                             1094
         BNP   @RF01094                                            1094
*  DO;                                                     /*@G51DGGB*/
*    LISTPTR = FRAMLOCC(CCHINDX); /*SET BASE ADDRESS OF LISTLOC*/  1096
         ST    @08,LISTPTR                                         1096
*    DO T = 1 BY 1 TO LISTNUM; /*ZERO ALL SAVED CCHHRS       @G51DGGB*/
         LA    @08,1                                               1097
         ST    @08,T                                               1097
         B     @DE01097                                            1097
@DL01097 DS    0H                                                  1098
*      LISTCCHR(T) = (LISTCCHR(T) && LISTCCHR(T));         /*@G51DGGB*/
         LR    @06,@08                                             1098
         MH    @06,@CH00079                                        1098
         L     @03,LISTPTR                                         1098
         ALR   @03,@06                                             1098
         BCTR  @03,0                                               1098
         XC    LISTCCHR-4(5,@03),LISTCCHR-4(@03)                   1098
*      BUG(37) = BUG(37) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1099
         LA    @06,1                                               1099
         AL    @06,BUG+144                                         1099
         ST    @06,BUG+144                                         1099
*      BUG(36) = BUG(36) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*/
         L     @06,BUG+140                                         1100
         BCTR  @06,0                                               1100
         ST    @06,BUG+140                                         1100
*    END;                                                  /*@G51DGGB*/
         AL    @08,@CF00055                                        1101
         ST    @08,T                                               1101
@DE01097 L     @06,LISTPTR                                         1101
         C     @08,LISTNUM(,@06)                                   1101
         BNH   @DL01097                                            1101
*    LISTNUM = ZERO; /*SET NUMBER OF  CCHHRS SAVED TO ZERO   @G51DGGB*/
         L     @08,LISTPTR                                         1102
         SLR   @06,@06                                             1102
         ST    @06,LISTNUM(,@08)                                   1102
*  END;                                                    /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00029 DS    0H                                                  1104
@EF00029 DS    0H                                                  1104
@ER00029 LM    @14,@12,12(@13)                                     1104
         BR    @14                                                 1104
*DEVSEL: PROC;                                             /*@Z427VLS*/
DEVSEL   STM   @14,@12,12(@13)                                     1105
*IF WORKTYPE = HEX90 THEN                                          1106
         CLI   WORKTYPE,X'90'                                      1106
         BNE   @RF01106                                            1106
*  DO;                                                     /*@Z427VLS*/
*    IF DEVEXCL = ON THEN                                          1108
         TM    DEVEXCL(R2),B'00100000'                             1108
         BNO   @RF01108                                            1108
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1110
*        DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               1111
         ST    @08,J                                               1111
         B     @DE01111                                            1111
@DL01111 TM    DEVOK,B'00100000'                                   1111
         BNO   @DC01111                                            1111
*        IF TPRDEV = MDRVAL(J) THEN                                1112
         L     @06,DEVPTR(,R2)                                     1112
         ALR   @06,@08                                             1112
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1112
         BNE   @RF01112                                            1112
*          DO;                                             /*@Z427VLS*/
*            DEVOK = NO;                                   /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1114
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1115
*          END;                                            /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF01112 LA    @08,1                                               1117
         AL    @08,J                                               1117
         ST    @08,J                                               1117
@DE01111 L     @06,DEVPTR(,R2)                                     1117
         CH    @08,MDRNUM(,@06)                                    1117
         BNH   @DL01111                                            1117
@DC01111 DS    0H                                                  1118
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          1119
*      DO;                                                 /*@Z427VLS*/
         B     @RC01108                                            1119
@RF01108 DS    0H                                                  1120
*        DEVOK = NO;                                       /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1120
*        DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = NO;         /*@Z427VLS*/
         LA    @08,1                                               1121
         ST    @08,J                                               1121
         B     @DE01121                                            1121
@DL01121 TM    DEVOK,B'00100000'                                   1121
         BNZ   @DC01121                                            1121
*        IF TPRDEV = MDRVAL(J) THEN                                1122
         L     @06,DEVPTR(,R2)                                     1122
         ALR   @06,@08                                             1122
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1122
         BNE   @RF01122                                            1122
*          DEVOK = YES;                                    /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1123
*        END;                                              /*@Z427VLS*/
@RF01122 LA    @08,1                                               1124
         AL    @08,J                                               1124
         ST    @08,J                                               1124
@DE01121 L     @06,DEVPTR(,R2)                                     1124
         CH    @08,MDRNUM(,@06)                                    1124
         BNH   @DL01121                                            1124
@DC01121 DS    0H                                                  1125
*        IF DEVOK = NO THEN                                        1125
         TM    DEVOK,B'00100000'                                   1125
         BNZ   @RF01125                                            1125
*          PASSFLAG = NO;                                  /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1126
*       END;                                               /*@Z427VLS*/
*    END;                                                  /*@Z427VLS*/
*  ELSE                                                            1129
*    IF DEVEXCL = ON THEN                                          1129
         B     @RC01106                                            1129
@RF01106 TM    DEVEXCL(R2),B'00100000'                             1129
         BNO   @RF01129                                            1129
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1131
*        DO J = 1 BY 1 TO DEVNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               1132
         ST    @08,J                                               1132
         B     @DE01132                                            1132
@DL01132 TM    DEVOK,B'00100000'                                   1132
         BNO   @DC01132                                            1132
*          IF WORKDEV = DEVVAL(J) THEN                             1133
         ALR   @08,@08                                             1133
         L     @06,DEVPTR(,R2)                                     1133
         ALR   @06,@08                                             1133
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1133
         BNE   @RF01133                                            1133
*            DO;                                           /*@Z427VLS*/
*              DEVOK = NO;                                 /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1135
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1136
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF01133 LA    @08,1                                               1138
         AL    @08,J                                               1138
         ST    @08,J                                               1138
@DE01132 L     @06,DEVPTR(,R2)                                     1138
         CH    @08,DEVNUM(,@06)                                    1138
         BNH   @DL01132                                            1138
@DC01132 DS    0H                                                  1139
*      END;                                                /*@Z427VLS*/
*  ELSE                                                            1140
*   DO;                                                    /*@Z427VLS*/
         B     @RC01129                                            1140
@RF01129 DS    0H                                                  1141
*     DEVOK = NO;                                          /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1141
*     DO J =  1 BY 1 TO DEVNUM WHILE DEVOK = NO;           /*@Z427VLS*/
         LA    @08,1                                               1142
         ST    @08,J                                               1142
         B     @DE01142                                            1142
@DL01142 TM    DEVOK,B'00100000'                                   1142
         BNZ   @DC01142                                            1142
*       IF WORKDEV = DEVVAL(J) THEN                                1143
         ALR   @08,@08                                             1143
         L     @06,DEVPTR(,R2)                                     1143
         ALR   @06,@08                                             1143
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1143
         BNE   @RF01143                                            1143
*         DEVOK = YES;                                     /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1144
*     END;                                                 /*@Z427VLS*/
@RF01143 LA    @08,1                                               1145
         AL    @08,J                                               1145
         ST    @08,J                                               1145
@DE01142 L     @06,DEVPTR(,R2)                                     1145
         CH    @08,DEVNUM(,@06)                                    1145
         BNH   @DL01142                                            1145
@DC01142 DS    0H                                                  1146
*     IF DEVOK = NO THEN                                           1146
         TM    DEVOK,B'00100000'                                   1146
         BNZ   @RF01146                                            1146
*       PASSFLAG = OFF;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1147
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00030 DS    0H                                                  1149
@EF00030 DS    0H                                                  1149
@ER00030 LM    @14,@12,12(@13)                                     1149
         BR    @14                                                 1149
*ERRMSG: PROC;                                             /*@Z427VLS*/
ERRMSG   STM   @14,@12,@SA00031                                    1150
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1151
         ST    @08,PRINTADR(,R2)                                   1151
*IF MSGNO = 1 THEN                                                 1152
         CLI   MSGNO,1                                             1152
         BNE   @RF01152                                            1152
* DO;                                                      /*@Z427VLS*/
*   CALL IFCMSG(64,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1154
         ST    @08,@AFTEMPS+4                                      1154
         L     @15,ADIFCMSG(,R2)                                   1154
         LA    @01,@AL01154                                        1154
         BALR  @14,@15                                             1154
*   LINTXT1B = USERPGM;                                    /*@Z427VLS*/
         MVC   LINTXT1B(8),USERPGM(R2)                             1155
* END;                                                     /*@Z427VLS*/
*IF MSGNO = 2 THEN                                                 1157
@RF01152 CLI   MSGNO,2                                             1157
         BNE   @RF01157                                            1157
*  DO;                                                     /*@GZZDGVS*/
*    ZEROALL=NO;  /* DONT RESET LOGREC HEADER OF ALL        @XA19728 */
         NI    ZEROALL(R2),B'10111111'                             1159
*                 /* RECORDS NOT PROCESSED                  @XA19728 */
*    CALL IFCMSG(55,ADDR(PRINTBDY));                     /* @Z427VLS */
         LA    @08,PRINTBDY                                        1160
         ST    @08,@AFTEMPS+4                                      1160
         L     @15,ADIFCMSG(,R2)                                   1160
         LA    @01,@AL01160                                        1160
         BALR  @14,@15                                             1160
*  END;                                                    /*@GZZDGVS*/
*IF MSGNO = 3 THEN                                                 1162
@RF01157 CLI   MSGNO,3                                             1162
         BNE   @RF01162                                            1162
* CALL IFCMSG(53,ADDR(PRINTBDY));                          /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1163
         ST    @08,@AFTEMPS+4                                      1163
         L     @15,ADIFCMSG(,R2)                                   1163
         LA    @01,@AL01163                                        1163
         BALR  @14,@15                                             1163
*NOMESAGE = OFF;           /*SET TO NORMALLY PRINT THE MESSAGE*/   1164
@RF01162 NI    NOMESAGE,B'11110111'                                1164
* IF MSGNO = QQ1 THEN      /*SCREW UP IN THE INCOMING FRAME #S*/   1165
         CLI   MSGNO,10                                            1165
         BNE   @RF01165                                            1165
*  DO;                                                     /*@G51DGGB*/
*  IF DEBUG16 = ON THEN    /*WAS THE USER INTRESTED IN THE RESULT*/
         TM    DEBUG16(R2),B'10000000'                             1167
         BNO   @RF01167                                            1167
*   CALL FRAMDROP;                                         /*@G51DGGB*/
         BAL   @14,FRAMDROP                                        1168
*  ELSE                                                            1169
*  NOMESAGE = ON;                                          /*@G51DGGB*/
         B     @RC01167                                            1169
@RF01167 OI    NOMESAGE,B'00001000'                                1169
*  END;                                                    /*@G51DGGB*/
@RC01167 DS    0H                                                  1171
* IF MSGNO = QQ  THEN                                              1171
@RF01165 CLI   MSGNO,7                                             1171
         BNE   @RF01171                                            1171
*  DO;                                                     /*@G51DGGB*/
*  CALL IFCMSG(78,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1173
         ST    @08,@AFTEMPS+4                                      1173
         L     @15,ADIFCMSG(,R2)                                   1173
         LA    @01,@AL01173                                        1173
         BALR  @14,@15                                             1173
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1174
*   ADDNXT = ADDR(PFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1175
         LA    @08,PFRAMSER                                        1175
         ST    @08,ADDNXT                                          1175
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,CCHINDX                                         1176
         MH    @08,@CH00227                                        1176
         L     @06,FRAMEPTR(,R2)                                   1176
         AL    @06,@CF01522                                        1176
         LA    @08,FRAMESER-4(@08,@06)                             1176
         ST    @08,NEXTBY                                          1176
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1177
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1178
*   ADDNXT = ADDR(PFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @08,PFRAMMOD                                        1179
         ST    @08,ADDNXT                                          1179
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @08,CCHINDX                                         1180
         MH    @08,@CH00227                                        1180
         L     @06,FRAMEPTR(,R2)                                   1180
         AL    @06,@CF01542                                        1180
         LA    @08,FRAMEMOD-7(@08,@06)                             1180
         ST    @08,NEXTBY                                          1180
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1181
*  END;                                                    /*@G51DGGB*/
* IF MSGNO = ZZ THEN                                               1183
@RF01171 CLI   MSGNO,4                                             1183
         BNE   @RF01183                                            1183
*  CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1184
         ST    @08,@AFTEMPS+4                                      1184
         L     @15,ADIFCMSG(,R2)                                   1184
         LA    @01,@AL01184                                        1184
         BALR  @14,@15                                             1184
* IF MSGNO = PP THEN                                               1185
@RF01183 CLI   MSGNO,6                                             1185
         BNE   @RF01185                                            1185
*  CALL IFCMSG(5,ADDR(PRINTBDY));                          /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1186
         ST    @08,@AFTEMPS+4                                      1186
         L     @15,ADIFCMSG(,R2)                                   1186
         LA    @01,@AL01186                                        1186
         BALR  @14,@15                                             1186
* IF MSGNO = XX THEN                                               1187
@RF01185 CLI   MSGNO,8                                             1187
         BNE   @RF01187                                            1187
*  CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1188
         ST    @08,@AFTEMPS+4                                      1188
         L     @15,ADIFCMSG(,R2)                                   1188
         LA    @01,@AL01188                                        1188
         BALR  @14,@15                                             1188
*IF MSGNO = YY THEN                                                1189
@RF01187 CLI   MSGNO,5                                             1189
         BNE   @RF01189                                            1189
*  CALL IFCMSG(24,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1190
         ST    @08,@AFTEMPS+4                                      1190
         L     @15,ADIFCMSG(,R2)                                   1190
         LA    @01,@AL01190                                        1190
         BALR  @14,@15                                             1190
*IF MSGNO = RR THEN                                                1191
@RF01189 CLI   MSGNO,9                                             1191
         BNE   @RF01191                                            1191
*  CALL IFCMSG(5,ADDR(PRINTBDY));                          /*@G51DGGB*/
         LA    @08,PRINTBDY                                        1192
         ST    @08,@AFTEMPS+4                                      1192
         L     @15,ADIFCMSG(,R2)                                   1192
         LA    @01,@AL01192                                        1192
         BALR  @14,@15                                             1192
* IF NOMESAGE = OFF THEN                                           1193
@RF01191 TM    NOMESAGE,B'00001000'                                1193
         BNZ   @RF01193                                            1193
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1194
         LA    @01,@AL01194                                        1194
         BALR  @14,@15                                             1194
*END;                                                      /*@Z427VLS*/
@EL00031 DS    0H                                                  1195
@EF00031 DS    0H                                                  1195
@ER00031 LM    @14,@12,@SA00031                                    1195
         BR    @14                                                 1195
*/*******************************************************************/
*/*   IF A DEVICE OR CONTROL UNIT IS SHARED ACROSS MULTIPLE SYSTEMS,*/
*/*   AND THE USER WANTS ALL ERRORS WHICH RELATE TO ONE PHYSICAL    */
*/*   LOCATION SUMMED TOGETHER, THEN THE CUA IN THE SORT TABLE MAY  */
*/*   HAVE TO BE CONVERTED TO A BASE CUA.                    @Z427VLS*/
*/*******************************************************************/
*SHARCONV: PROC;                                           /*@Z427VLS*/
SHARCONV STM   @14,@12,12(@13)                                     1196
*      SHAREYES = NO;                                      /*@Z427VLS*/
         NI    SHAREYES,B'11110111'                                1197
*      DO J = 1 BY 1 TO SHARENUM WHILE SHAREYES = NO;      /*@Z427VLS*/
         LA    @08,1                                               1198
         ST    @08,J                                               1198
         B     @DE01198                                            1198
@DL01198 TM    SHAREYES,B'00001000'                                1198
         BNZ   @DC01198                                            1198
*        IF LRTCPUS = SHARSERA(J) THEN                             1199
         MH    @08,@CH00033                                        1199
         L     @06,SHAREPTR(,R2)                                   1199
         ST    @08,@TF00001                                        1199
         ALR   @08,@06                                             1199
         AL    @08,@CF01524                                        1199
         CLC   LRTCPUS(3,R7),SHARSERA-4(@08)                       1199
         BNE   @RF01199                                            1199
*          DO;                                             /*@Z427VLS*/
*            IF SHAREDX(J) = ON THEN                               1201
         LR    @08,@06                                             1201
         AL    @08,@TF00001                                        1201
         AL    @08,@CF01543                                        1201
         TM    SHAREDX-2(@08),B'10000000'                          1201
         BNO   @RF01201                                            1201
*              DO;                                         /*@Z427VLS*/
*                IF (SHARECUA(J) & CUXOFF) = (WORKMOD & NOUNIT2) THEN
         LR    @08,@06                                             1203
         AL    @08,@TF00001                                        1203
         AL    @08,@CF01543                                        1203
         MVC   @TS00001(2),SHARECUA-2(@08)                         1203
         NC    @TS00001(2),@CB01016                                1203
         MVC   @TS00001+2(2),WORKMOD                               1203
         NC    @TS00001+2(2),@CB01012                              1203
         CLC   @TS00001(2),@TS00001+2                              1203
         BNE   @RF01203                                            1203
*                  DO;                                     /*@Z427VLS*/
*                    WORKMOD = (WORKMOD & UNITONLY);       /*@Z427VLS*/
         NC    WORKMOD(2),@CB01037                                 1205
*                    WORKMOD = (WORKMOD × SHARECUB(J));    /*@Z427VLS*/
         AL    @06,@TF00001                                        1206
         AL    @06,@CF01533                                        1206
         OC    WORKMOD(2),SHARECUB-7(@06)                          1206
*                    SHAREYES = ON;                        /*@Z427VLS*/
         OI    SHAREYES,B'00001000'                                1207
*                  END;                                    /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
*         ELSE                                                     1210
*           DO;                                            /*@Z427VLS*/
         B     @RC01201                                            1210
@RF01201 DS    0H                                                  1211
*             IF SHARECUA(J) = WORKMOD THEN                        1211
         L     @08,J                                               1211
         MH    @08,@CH00033                                        1211
         L     @06,SHAREPTR(,R2)                                   1211
         ST    @08,@TF00001                                        1211
         ALR   @08,@06                                             1211
         AL    @08,@CF01543                                        1211
         CLC   SHARECUA-2(2,@08),WORKMOD                           1211
         BNE   @RF01211                                            1211
*               DO;                                        /*@Z427VLS*/
*                 WORKMOD = SHARECUB(J);                   /*@Z427VLS*/
         AL    @06,@TF00001                                        1213
         AL    @06,@CF01533                                        1213
         MVC   WORKMOD(2),SHARECUB-7(@06)                          1213
*                 SHAREYES = ON;                           /*@Z427VLS*/
         OI    SHAREYES,B'00001000'                                1214
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
@RF01211 DS    0H                                                  1217
*          END;                                            /*@Z427VLS*/
@RC01201 DS    0H                                                  1218
*       END;                                               /*@Z427VLS*/
@RF01199 LA    @08,1                                               1218
         AL    @08,J                                               1218
         ST    @08,J                                               1218
@DE01198 L     @06,SHAREPTR(,R2)                                   1218
         CH    @08,SHARENUM(,@06)                                  1218
         BNH   @DL01198                                            1218
@DC01198 DS    0H                                                  1219
*END; /*CLOSING END TO SHARCONV                              @Z427VLS*/
@EL00032 DS    0H                                                  1219
@EF00032 DS    0H                                                  1219
@ER00032 LM    @14,@12,12(@13)                                     1219
         BR    @14                                                 1219
*LIBSEL: PROC;                                             /*@Z427VLS*/
LIBSEL   STM   @14,@12,12(@13)                                     1220
*/*SELECT MDR RECORDS BY LINE INTERFACE BASE ADDRESS IF IT IS*/    1221
*/*APPLICABLE.                                               @Z427VLS*/
*IF TPRMODE = LINSTAT0 × TPRMODE = LINSTAT1 THEN                   1221
         CLI   TPRMODE(R7),X'00'                                   1221
         BE    @RT01221                                            1221
         CLI   TPRMODE(R7),X'01'                                   1221
         BNE   @RF01221                                            1221
@RT01221 DS    0H                                                  1222
*  DO;                                                     /*@Z427VLS*/
*    LIBOK = NO;                                           /*@Z427VLS*/
         NI    LIBOK,B'11110111'                                   1223
*    DO J = 1 BY 1 TO LIBADNUM WHILE LIBOK = NO;           /*@Z427VLS*/
         LA    @08,1                                               1224
         ST    @08,J                                               1224
         B     @DE01224                                            1224
@DL01224 TM    LIBOK,B'00001000'                                   1224
         BNZ   @DC01224                                            1224
*      IF LIBVAL(J) = TPRLINAD THEN LIBOK = YES;           /*@Z427VLS*/
         ALR   @08,@08                                             1225
         L     @06,LIBADPTR(,R2)                                   1225
         ALR   @06,@08                                             1225
         CLC   LIBVAL-2(2,@06),TPRLINAD(R7)                        1225
         BNE   @RF01225                                            1225
         OI    LIBOK,B'00001000'                                   1226
*    END;                                                  /*@Z427VLS*/
@RF01225 LA    @08,1                                               1227
         AL    @08,J                                               1227
         ST    @08,J                                               1227
@DE01224 L     @06,LIBADPTR(,R2)                                   1227
         CH    @08,LIBADNUM(,@06)                                  1227
         BNH   @DL01224                                            1227
@DC01224 DS    0H                                                  1228
*    IF LIBOK = NO THEN                                            1228
         TM    LIBOK,B'00001000'                                   1228
         BNZ   @RF01228                                            1228
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1229
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              1231
*  PASSFLAG = NO;                                          /*@Z427VLS*/
         B     @RC01221                                            1231
@RF01221 NI    PASSFLAG(R2),B'11111110'                            1231
*END;                                                      /*@Z427VLS*/
@EL00033 DS    0H                                                  1232
@EF00033 DS    0H                                                  1232
@ER00033 LM    @14,@12,12(@13)                                     1232
         BR    @14                                                 1232
*BUGCNTS: PROC;                                            /*@Z427VLS*/
BUGCNTS  STM   @14,@12,@SA00034                                    1233
*/*PRINT OUT COUNTS OF RECORDS PROCESSED IF DEBUG16 IS ON    @Z427VLS*/
*PRINTADR = ADDR(PRINTLIN); /*ADDRESS OF PRINT LINE          @Z427VLS*/
         LA    @08,PRINTLIN                                        1234
         ST    @08,PRINTADR(,R2)                                   1234
*J = 46;                                                   /*@G51DGGB*/
         LA    @08,46                                              1235
         ST    @08,J                                               1235
*PRINTLIN = ERRLINE(J);/*THIS WILL MAKE IT COMPUTE THE CORRECT ADDR*/
         MVI   PRINTLIN+63,C' '                                    1236
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1236
         MH    @08,@CH01512                                        1236
         LA    @06,ERRLINE-63(@08)                                 1236
         MVC   PRINTLIN(63),0(@06)                                 1236
*IF FRAMEPTR ^= 0 THEN                                             1237
         L     @08,FRAMEPTR(,R2)                                   1237
         LTR   @08,@08                                             1237
         BZ    @RF01237                                            1237
* BUG(43) = FRAMENUM;                                      /*@G51DGGB*/
         L     @08,FRAMENUM(,@08)                                  1238
         ST    @08,BUG+168                                         1238
*BUG(37) = BUG(37) + BUG(45);                              /*@G51DGGB*/
@RF01237 L     @08,BUG+144                                         1239
         AL    @08,BUG+176                                         1239
         ST    @08,BUG+144                                         1239
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
*                                                                  1240
         L     @15,ADIOHND(,R2)                                    1240
         LA    @01,@AL01240                                        1240
         BALR  @14,@15                                             1240
*DO J = 1 BY 1 TO 45;                                      /*@G51DGGB*/
         LA    @08,1                                               1241
         ST    @08,J                                               1241
@DL01241 DS    0H                                                  1242
*  NUMREC = BUG(J);                                        /*@Z427VLS*/
         SLA   @08,2                                               1242
         L     @08,BUG-4(@08)                                      1242
         ST    @08,NUMREC                                          1242
*  CVD(NUMREC,PACKPAS);                                    /*@Z427VLS*/
         CVD   @08,@TS00001                                        1243
         MVC   PACKPAS(4),@TS00001+4                               1243
*  PACKPAS = (PACKPAS × '0000000F'X);                      /*@Z427VLS*/
         OC    PACKPAS(4),@CB01459                                 1244
*  UNPK(EDFLD,PACKPAS);                                    /*@Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 1245
*  NONBLANK = OFF;                                         /*@Z427VLS*/
         NI    NONBLANK,B'01111111'                                1246
*  DO K = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                /*@Z427VLS*/
         LA    @08,1                                               1247
         ST    @08,K                                               1247
@DL01247 TM    NONBLANK,B'10000000'                                1247
         BNZ   @DC01247                                            1247
*    IF EDIFILD(K) = CHARZERO THEN                                 1248
         LA    @06,EDIFILD-1(@08)                                  1248
         CLI   0(@06),X'F0'                                        1248
         BNE   @RF01248                                            1248
*      EDIFILD(K) = BLANK;                                 /*@Z427VLS*/
         LA    @06,EDIFILD-1(@08)                                  1249
         MVI   0(@06),X'40'                                        1249
*    ELSE                                                          1250
*      NONBLANK = ON;                                      /*@Z427VLS*/
         B     @RC01248                                            1250
@RF01248 OI    NONBLANK,B'10000000'                                1250
*  END;                                                    /*@Z427VLS*/
@RC01248 LA    @08,1                                               1251
         AL    @08,K                                               1251
         ST    @08,K                                               1251
         C     @08,@CF00066                                        1251
         BNH   @DL01247                                            1251
@DC01247 DS    0H                                                  1252
*  ERXNUM(J) = EDFLD;                                      /*@Z427VLS*/
         L     @08,J                                               1252
         MH    @08,@CH01512                                        1252
         LA    @06,ERXNUM-63(@08)                                  1252
         MVC   0(9,@06),EDFLD                                      1252
*  PRINTLIN = ERRLINE(J);                                  /*@Z427VLS*/
         MVI   PRINTLIN+63,C' '                                    1253
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1253
         LA    @06,ERRLINE-63(@08)                                 1253
         MVC   PRINTLIN(63),0(@06)                                 1253
*  PRINTADR = ADDR(PRINTLIN);                              /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1254
         ST    @08,PRINTADR(,R2)                                   1254
*  CALL IOHND(RITEPRTR);                                   /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1255
         LA    @01,@AL01255                                        1255
         BALR  @14,@15                                             1255
* END;                                                     /*@Z427VLS*/
         LA    @08,1                                               1256
         AL    @08,J                                               1256
         ST    @08,J                                               1256
         C     @08,@CF01427                                        1256
         BNH   @DL01241                                            1256
*END; /*CLOSING END TO PROC BUGCNTS                          @Z427VLS*/
@EL00034 DS    0H                                                  1257
@EF00034 DS    0H                                                  1257
@ER00034 LM    @14,@12,@SA00034                                    1257
         BR    @14                                                 1257
*FRAMDROP: PROC;                                           /*@G51DGGB*/
FRAMDROP STM   @14,@12,@SA00035                                    1258
*  PRINTBDY = ERR7816;                                     /*@G51DGGB*/
         MVI   PRINTBDY+18,C' '                                    1259
         MVC   PRINTBDY+19(113),PRINTBDY+18                        1259
         MVC   PRINTBDY(18),ERR7816                                1259
*  TYPERROR= INCOMP;                                       /*@G51DGGB*/
         MVC   TYPERROR(10),INCOMP                                 1260
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1261
*   ADDNXT = ADDR(ZFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1262
         LA    @08,ZFRAMSER                                        1262
         ST    @08,ADDNXT                                          1262
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,CCHINDX                                         1263
         MH    @08,@CH00227                                        1263
         L     @06,FRAMEPTR(,R2)                                   1263
         AL    @06,@CF01522                                        1263
         LA    @08,FRAMESER-4(@08,@06)                             1263
         ST    @08,NEXTBY                                          1263
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1264
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1265
*   ADDNXT = ADDR(ZFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @08,ZFRAMMOD                                        1266
         ST    @08,ADDNXT                                          1266
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @08,CCHINDX                                         1267
         MH    @08,@CH00227                                        1267
         L     @06,FRAMEPTR(,R2)                                   1267
         AL    @06,@CF01542                                        1267
         LA    @08,FRAMEMOD-7(@08,@06)                             1267
         ST    @08,NEXTBY                                          1267
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1268
*   NUMBER = 14;                                           /*@G51DGGB*/
         MVC   NUMBER(4),@CF01353                                  1269
*   NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*/
         L     @08,CCHINDX                                         1270
         MH    @08,@CH00227                                        1270
         L     @06,FRAMEPTR(,R2)                                   1270
         AL    @06,@CF01522                                        1270
         LA    @08,FRAMEKEY-4(@08,@06)                             1270
         ST    @08,NEXTBY                                          1270
*   ADDNXT = ADDR(ZFRAMKEY);                               /*@G51DGGB*/
         LA    @08,ZFRAMKEY                                        1271
         ST    @08,ADDNXT                                          1271
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1272
*END;                                                      /*@G51DGGB*/
@EL00035 DS    0H                                                  1273
@EF00035 DS    0H                                                  1273
@ER00035 LM    @14,@12,@SA00035                                    1273
         BR    @14                                                 1273
*FRAMMORE: PROC;                                           /*@G51DGGB*/
FRAMMORE STM   @14,@12,@SA00036                                    1274
*  CALL FRAMDROP;                                          /*@G51DGGB*/
         BAL   @14,FRAMDROP                                        1275
*  CALL FIXENTRY;                                          /*@G51DGGB*/
         BAL   @14,FIXENTRY                                        1276
*  FRAMEDT(CCHINDX) = LRTDT;           /*SAVE HIGH DATE      @G51DGGB*/
         L     @08,CCHINDX                                         1277
         MH    @08,@CH00227                                        1277
         L     @06,FRAMEPTR(,R2)                                   1277
         ST    @08,@TF00001                                        1277
         ALR   @08,@06                                             1277
         AL    @08,@CF01539                                        1277
         MVC   FRAMEDT-9(8,@08),LRTDT(R7)                          1277
*  TYPERROR= REPLACED;                                     /*@G51DGGB*/
         MVI   TYPERROR+8,C' '                                     1278
         MVI   TYPERROR+9,C' '                                     1278
         MVC   TYPERROR(8),REPLACED                                1278
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1279
*   ADDNXT = ADDR(YFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1280
         LA    @08,YFRAMSER                                        1280
         ST    @08,ADDNXT                                          1280
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,@TF00001                                        1281
         AL    @06,@CF01522                                        1281
         LA    @08,FRAMESER-4(@08,@06)                             1281
         ST    @08,NEXTBY                                          1281
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1282
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1283
*   ADDNXT = ADDR(YFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @08,YFRAMMOD                                        1284
         ST    @08,ADDNXT                                          1284
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @08,CCHINDX                                         1285
         MH    @08,@CH00227                                        1285
         L     @06,FRAMEPTR(,R2)                                   1285
         AL    @06,@CF01542                                        1285
         LA    @08,FRAMEMOD-7(@08,@06)                             1285
         ST    @08,NEXTBY                                          1285
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1286
*   NUMBER = 14;                                           /*@G51DGGB*/
         MVC   NUMBER(4),@CF01353                                  1287
*   NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*/
         L     @08,CCHINDX                                         1288
         MH    @08,@CH00227                                        1288
         L     @06,FRAMEPTR(,R2)                                   1288
         AL    @06,@CF01522                                        1288
         LA    @08,FRAMEKEY-4(@08,@06)                             1288
         ST    @08,NEXTBY                                          1288
*   ADDNXT = ADDR(YFRAMKEY);                               /*@G51DGGB*/
         LA    @08,YFRAMKEY                                        1289
         ST    @08,ADDNXT                                          1289
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1290
*   CALL PRINTIT;                                          /*@G51DGGB*/
         BAL   @14,PRINTIT                                         1291
*END;                                                      /*@G51DGGB*/
@EL00036 DS    0H                                                  1292
@EF00036 DS    0H                                                  1292
@ER00036 LM    @14,@12,@SA00036                                    1292
         BR    @14                                                 1292
*/*  PROC TO CONVERT TO PRINTABLE FOR ALL ROUTINES           @G51DGGB*/
*CONVERT: PROC;                                            /*@G51DGGB*/
CONVERT  STM   @14,@12,12(@13)                                     1293
*RESPECIFY (R4,R5) RESTRICTED;                             /*@G51DGGB*/
*    DO J = NUMBER   BY -1 TO ONE;                         /*@G51DGGB*/
         L     @08,NUMBER                                          1295
         ST    @08,J                                               1295
         B     @DE01295                                            1295
@DL01295 DS    0H                                                  1296
*      R4 = NEXTBYTE(J);                                   /*@G51DGGB*/
         L     @06,NEXTBY                                          1296
         BCTR  @06,0                                               1296
         SLR   R4,R4                                               1296
         IC    R4,NEXTBYTE(@08,@06)                                1296
*      T = TWO*J;                                          /*@G51DGGB*/
         LR    @06,@08                                             1297
         ALR   @06,@06                                             1297
         ST    @06,T                                               1297
*      SRDL (R4,FOUR);                                     /*@G51DGGB*/
         SRDL  R4,4                                                1298
*      SRL  (R5,28);                                       /*@G51DGGB*/
         SRL   R5,28                                               1299
*      ADDNUM(T-ONE) = CHAR1(R4+1);                        /*@G51DGGB*/
         L     @03,ADDNXT                                          1300
         ALR   @06,@03                                             1300
         BCTR  @06,0                                               1300
         BCTR  @06,0                                               1300
         LA    @01,CHAR1(R4)                                       1300
         MVC   ADDNUM(1,@06),0(@01)                                1300
*      ADDNUM(T)     = CHAR1(R5+1);                        /*@G51DGGB*/
         L     @06,T                                               1301
         ALR   @03,@06                                             1301
         BCTR  @03,0                                               1301
         LA    @06,CHAR1(R5)                                       1301
         MVC   ADDNUM(1,@03),0(@06)                                1301
*    END;                                                  /*@G51DGGB*/
         BCTR  @08,0                                               1302
         ST    @08,J                                               1302
@DE01295 LTR   @08,@08                                             1302
         BP    @DL01295                                            1302
*RESPECIFY (R4,R5) UNRESTRICTED;                           /*@G51DGGB*/
* END;                                                     /*@G51DGGB*/
@EL00037 DS    0H                                                  1304
@EF00037 DS    0H                                                  1304
@ER00037 LM    @14,@12,12(@13)                                     1304
         BR    @14                                                 1304
*HEXDUMP: PROC;                                            /*@G51DGGB*/
HEXDUMP  STM   @14,@12,@SA00038                                    1305
* DCL ITEM1 FIXED(31) INIT(0);                             /*@G51DGGB*/
* NUMBER = 66;                                             /*@G51DGGB*/
         LA    @08,66                                              1307
         ST    @08,NUMBER                                          1307
* ADDNXT = ADDR(PRINTBDY);                                 /*@G51DGGB*/
         LA    @06,PRINTBDY                                        1308
         ST    @06,ADDNXT                                          1308
* NEXTBY = R7;                                             /*@G51DGGB*/
         ST    R7,NEXTBY                                           1309
*DO ITEM1 = 66 BY 66 TO RECLNGTH;                          /*@G51DGGB*/
         ST    @08,ITEM1                                           1310
         B     @DE01310                                            1310
@DL01310 DS    0H                                                  1311
* NEXTBY = NEXTBY + 66;                                    /*@G51DGGB*/
         LA    @08,66                                              1311
         AL    @08,NEXTBY                                          1311
         ST    @08,NEXTBY                                          1311
* CALL PRINTIT;                                            /*@G51DGGB*/
         BAL   @14,PRINTIT                                         1312
*END;                                                      /*@G51DGGB*/
         LA    @08,66                                              1313
         AL    @08,ITEM1                                           1313
         ST    @08,ITEM1                                           1313
@DE01310 CH    @08,RECLNGTH(,R2)                                   1313
         BNH   @DL01310                                            1313
*NUMBER = RECLNGTH - (ITEM1 - 66);                         /*@G51DGGB*/
         L     @08,ITEM1                                           1314
         SL    @08,@CF01477                                        1314
         LCR   @08,@08                                             1314
         AH    @08,RECLNGTH(,R2)                                   1314
         ST    @08,NUMBER                                          1314
*IF NUMBER > 0 THEN                                                1315
         LTR   @08,@08                                             1315
         BNP   @RF01315                                            1315
* DO;                                                      /*@G51DGGB*/
*  CALL CONVERT;    /*GO CONVERT THE ITEM TO PRINTABLE       @G51DGGB*/
         BAL   @14,CONVERT                                         1317
*  CALL PRINTIT;    /*GO PRINT THE LINE                      @G51DGGB*/
         BAL   @14,PRINTIT                                         1318
* END;                                                     /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00038 DS    0H                                                  1320
@EF00038 DS    0H                                                  1320
@ER00038 LM    @14,@12,@SA00038                                    1320
         BR    @14                                                 1320
*PRINTIT: PROC;                                            /*@G51DGGB*/
PRINTIT  STM   @14,@12,@SA00039                                    1321
* PRINTADR = ADDR(PRINTLIN);   /*SET THE ADDRESS OF THE PRINT LINE*/
         LA    @08,PRINTLIN                                        1322
         ST    @08,PRINTADR(,R2)                                   1322
* CALL IOHND(RITEPRTR);        /*TELL IO HANDLER TO PRINTIT  @G51DGGB*/
         L     @15,ADIOHND(,R2)                                    1323
         LA    @01,@AL01323                                        1323
         BALR  @14,@15                                             1323
*END;                                                      /*@G51DGGB*/
@EL00039 DS    0H                                                  1324
@EF00039 DS    0H                                                  1324
@ER00039 LM    @14,@12,@SA00039                                    1324
         BR    @14                                                 1324
*/*  PROC TO CONVERT FROM BINARY TO PRINTABLE DIGITS         @G51DGGB*/
*CONVBIN: PROC;                                            /*@G51DGGB*/
CONVBIN  STM   @14,@12,@SA00040                                    1325
*RESPECIFY (R4,R5) RESTRICTED;                             /*@G51DGGB*/
*    R4 = BINWORD;           /*LOAD THE WORD TO CONVERT      @G51DGGB*/
         L     R4,BINWORD                                          1327
*    CVD(R4,DBLWORD);        /*CONVERT TO PRINTABLE          @G51DGGB*/
         CVD   R4,DBLWORD                                          1328
*    UNPK(WORK(1:8),DBLWORD) ;                             /*@G51DGGB*/
         UNPK  WORK(8),DBLWORD(8)                                  1329
*    WORK(8) = WORK(8) × FOXZERO;                          /*@G51DGGB*/
         OI    WORK+7,X'F0'                                        1330
*    SWITCH1 = OFF;    /*TURN OFF THE CONTROL FOR THE LOOP   @G51DGGB*/
         NI    SWITCH1,B'11011111'                                 1331
*    DO J = 1 TO 7 BY 1 WHILE (SWITCH1 = OFF);/*DONT DO LAST CHAR*/
         LA    @08,1                                               1332
         ST    @08,J                                               1332
@DL01332 TM    SWITCH1,B'00100000'                                 1332
         BNZ   @DC01332                                            1332
*      IF WORK(J) = FOXZERO THEN  /*SUPPRESS ANY LEADING BLANKES*/ 1333
         LA    @06,WORK-1(@08)                                     1333
         CLI   0(@06),X'F0'                                        1333
         BNE   @RF01333                                            1333
*        WORK(J) = BLANK;    /*SET TO A BLANK                @G51DGGB*/
         LA    @06,WORK-1(@08)                                     1334
         MVI   0(@06),X'40'                                        1334
*      ELSE                                                        1335
*        SWITCH1 = ON;     /*END OF THE LEADING ZEROS        @G51DGGB*/
         B     @RC01333                                            1335
@RF01333 OI    SWITCH1,B'00100000'                                 1335
*    END;                                                  /*@G51DGGB*/
@RC01333 LA    @08,1                                               1336
         AL    @08,J                                               1336
         ST    @08,J                                               1336
         C     @08,@CF00083                                        1336
         BNH   @DL01332                                            1336
@DC01332 DS    0H                                                  1337
*    IF (10-J) > NUMDIG THEN                                       1337
         LA    @08,10                                              1337
         SL    @08,J                                               1337
         C     @08,@CF00083                                        1337
         BNH   @RF01337                                            1337
*      WORK = '9999999';  /*NUMBER WAS LARGER THAN ROOM ALLOWED*/  1338
         MVI   WORK+7,C' '                                         1338
         MVC   WORK(7),@CC01484                                    1338
*    RESPECIFY (R6) RESTRICTED;                            /*@G51DGGB*/
@RF01337 DS    0H                                                  1340
*    R6 = DECADDR;                                         /*@G51DGGB*/
         L     R6,DECADDR                                          1340
*    R5 = 6;                                               /*@G51DGGB*/
         LA    R5,6                                                1341
*    R4 = ADDR(WORK) + 1;                                  /*@G51DGGB*/
         LA    R4,WORK                                             1342
         AL    R4,@CF00055                                         1342
*    GEN(EX  R5,MVCDATA);                                  /*@G51DGGB*/
         EX  R5,MVCDATA
*    GENERATE DATA;                                        /*@G51DGGB*/
*RESPECIFY (R4,R5,R6) UNRESTRICTED;                        /*@G51DGGB*/
* END;                                                     /*@G51DGGB*/
@EL00040 DS    0H                                                  1346
@EF00040 DS    0H                                                  1346
@ER00040 LM    @14,@12,@SA00040                                    1346
         BR    @14                                                 1346
*END   /*CLOSING END FOR IFCFILT1 EXTERNAL PROC              @Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 1347
@DATA    DS    0H
@CH00081 DC    H'6'
@CH00033 DC    H'11'
@CH01512 DC    H'63'
@CH01026 DC    H'600'
         DS    0F
@AL00191 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00341 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01194 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01240 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01255 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01323 DC    A(@CF00074+2)           LIST WITH   1 ARGUMENT(S)
@AL00197 DC    A(@CF00076+2)           LIST WITH   1 ARGUMENT(S)
@AL00213 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00892 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00909 DC    A(@CF00064+2)           LIST WITH   1 ARGUMENT(S)
@AL00219 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01062 DC    A(@CF00079+2)           LIST WITH   1 ARGUMENT(S)
@AL00311 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00346 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00373 DC    A(@CF00083+2)           LIST WITH   1 ARGUMENT(S)
@AL00328 DC    A(@CF01306)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00334 DC    A(@CF00643)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00889 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00906 DC    A(@CH00081)             LIST WITH   1 ARGUMENT(S)
@AL01154 DC    A(@CF00627)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01160 DC    A(@CF01443)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01163 DC    A(@CF01444)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01173 DC    A(@CF01446)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01184 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL01188 DC    A(@CF01152)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01186 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL01192 DC    A(@CF00079)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01190 DC    A(@CF00227)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00023 DS    15F
@SA00004 DS    15F
@SA00003 DS    15F
@SA00034 DS    15F
@SA00031 DS    15F
@SA00040 DS    15F
@SA00039 DS    15F
@SA00024 DS    15F
@SA00007 DS    15F
@SA00008 DS    15F
@SA00006 DS    15F
@SA00009 DS    15F
@SA00010 DS    15F
@SA00016 DS    15F
@SA00013 DS    15F
@SA00017 DS    15F
@SA00011 DS    15F
@SA00012 DS    15F
@SA00025 DS    15F
@SA00038 DS    15F
@SA00027 DS    15F
@SA00028 DS    15F
@SA00026 DS    15F
@SA00036 DS    15F
@SA00035 DS    15F
@TF00001 DS    F
@AFTEMPS DS    2F
         DS    0F
@CF00055 DC    F'1'
@CF00074 DC    F'2'
@CH00074 EQU   @CF00074+2
@CF00076 DC    F'3'
@CH00076 EQU   @CF00076+2
@CF00064 DC    F'4'
@CH00064 EQU   @CF00064+2
@CF00079 DC    F'5'
@CH00079 EQU   @CF00079+2
@CF00083 DC    F'7'
@CH00083 EQU   @CF00083+2
@CF00066 DC    F'8'
@CF00034 DC    F'10'
@CH00034 EQU   @CF00034+2
@CF00032 DC    F'12'
@CF01353 DC    F'14'
@CF00088 DC    F'16'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF00863 DC    F'27'
@CF01152 DC    F'40'
@CF01427 DC    F'45'
@CF00293 DC    F'50'
@CF01444 DC    F'53'
@CF00643 DC    F'54'
@CF01443 DC    F'55'
@CF00627 DC    F'64'
@CF01477 DC    F'66'
@CF01446 DC    F'78'
@CF01306 DC    F'83'
@CF01510 DC    F'254'
@CF01024 DC    F'36000'
@CF01046 DC    F'500000'
@CF01522 DC    F'-20'
@CF01542 DC    F'-17'
@CF01539 DC    F'-15'
@CF01518 DC    F'-10'
@CF01543 DC    F'-9'
@CF01524 DC    F'-7'
@CF01532 DC    F'-6'
@CF01520 DC    F'-5'
@CF01533 DC    F'-4'
@CF01528 DC    F'-3'
@CF01049 DC    XL4'FFFFFFF8'
         DS    0D
LISTPTR  DC    A(0)
TEMPSAV  DC    F'0'
X        DC    A(0)
Y        DC    A(0)
Z        DC    A(0)
Q        DC    A(0)
CCHINDX  DC    A(0)
SAVESEQ  DC    F'0'
TIME     DC    F'0'
TEN      DC    F'10'
BINWORD  DC    F'0'
DECADDR  DC    F'0'
NUMBER   DC    F'0'
ADDNXT   DC    F'0'
NEXTBY   DC    F'0'
F        DC    F'0'
A        DC    F'0'
T        DC    F'0'
TEMPSTOR DC    F'0'
G        DC    F'0'
ITEM1    DC    F'0'
SECTIME  DS    H
HRTIME   DS    FL1
MINTIME  DS    FL1
         DS    0D
@TS00001 DS    CL8
@CC00977 DC    C'        '
@CC01484 DC    C'9999999'
@CB01424 DC    X'0000000000000000'
@CB01459 DC    X'0000000F'
@CB01010 DC    X'000FF0'
@CB01018 DC    X'000FFF'
@CB00208 EQU   @CB01424
@CB00980 DC    X'2006'
@CB00982 DC    X'2007'
@CB00984 DC    X'2009'
@CB00986 DC    X'200A'
@CB00988 DC    X'200B'
@CB00990 DC    X'200D'
@CB01012 DC    X'0FF0'
@CB01014 DC    X'0FFF'
@CB01016 DC    X'7FFF'
@CB01037 EQU   @CB01010
BUG16    DC    CL9'DEBUG16- '
ERR7816  DC    CL18' '
         ORG   ERR7816
@NM00088 DC    CL18'DEBUG16 FRAME SET '
         ORG   ERR7816+18
INCOMP   DC    CL10'INCOMPLETE'
REPLACED DC    CL8'REPLACED'
SWITCHS  DC    AL2(0)
         ORG   SWITCHS
ONETIME  DS    BL1
ISMERD   EQU   SWITCHS+0
SWITCH1  EQU   SWITCHS+0
LOOPOUT  EQU   SWITCHS+0
NOMESAGE EQU   SWITCHS+0
FRAMEYES EQU   SWITCHS+0
         ORG   SWITCHS+2
ZERO1    DC    X'0000000000'
WORKTABL DS    CL10
         ORG   WORKTABL
WORKKEY  DS    CL5
         ORG   WORKKEY
WORKTYPE DS    CL1
WORKCHAN DS    BL1
WORKCUA  DS    CL3
         ORG   WORKCUA
WORKCU   DS    CL1
WORKMOD  DS    CL2
         ORG   WORKTABL+5
WORKCCHR DS    CL5
         ORG   WORKCCHR
WORKCNT  DS    CL2
         ORG   WORKTABL+10
BLDLIST  DS    CL62
         ORG   BLDLIST
BLDNUM   DC    X'0001'
BLDLL    DC    X'003A'
BLDNAME  DC    CL8'        '
BLDLOC   DC    X'000000000000'
BLDUSER  DS    CL44
         ORG   BLDLIST+62
         DS    CL1
FILT1ITM DS    CL77
         ORG   FILT1ITM
USERLOC  DC    F'0'
ERROR    DC    F'0'
MAXENT   DC    F'0'
EXCESS   DC    F'0'
FREEADR  DC    A(0)
I        DC    A(1)
J        DC    A(0)
K        DC    A(0)
M        DC    A(0)
SRTCONT  DC    F'0'
SRTCONT1 DC    F'0'
PACKPAS  DC    CL4'    '
CHARPAS  DC    CL8'        '
PASSNUM  DC    F'0'
NUMREC   DC    F'0'
GETADR   DC    A(0)
WORKDEV  DC    X'0000'
         DS    CL2
GETBYT   DC    F'0'
MSGNO    DC    AL1(0)
         ORG   FILT1ITM+77
PRINTLIN DS    CL134
         ORG   PRINTLIN
PRINTDS  DC    X'01'
PRINTCC  DC    X'09'
PRINTBDY DC    CL132' '
         ORG   PRINTLIN+134
BITSWIT  DC    X'0000'
         ORG   BITSWIT
NONBLANK DS    BL1
ONBOUND  EQU   BITSWIT+0
CPUOK    EQU   BITSWIT+0
MODOK    EQU   BITSWIT+0
LIBOK    EQU   BITSWIT+0
SORTSW   EQU   BITSWIT+0
GETOUT   EQU   BITSWIT+0
CUAOK    EQU   BITSWIT+0
CPUCUAOK DS    BL1
VOLOK    EQU   BITSWIT+1
DEVOK    EQU   BITSWIT+1
GETFAIL  EQU   BITSWIT+1
SHAREYES EQU   BITSWIT+1
         ORG   BITSWIT+2
WKCPUCUA DC    X'0000000000'
         ORG   WKCPUCUA
WKCPU    DS    CL3
WKCUA    DS    CL2
         ORG   WKCPUCUA+5
         DS    CL6
DBLWORD  DS    CL8
WORK     DS    CL8
CHARS    DC    CL16'0123456789ABCDEF'
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL2
PATCH    DC    25F'0'
BUG      DC    46F'0'
ERRLINE  DS    CL63
         ORG   ERRLINE+0
ERRDS    DC    CL1'1'
ERCC     DC    X'09'
ERRMES   DC    CL10'DEBUG16  '
ERXNUM   DC    CL9'         '
@NM00096 DC    CL2'  '
ERRTXT   DC    CL40'RECORDS RETRIEVED VIA READSEQ           '
         ORG   ERRLINE+63
         ORG   ERRLINE+63
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED DATE FILTERING           '
         ORG   ERRLINE+126
         ORG   ERRLINE+126
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED NON 3RD TIME FILTERING   '
         ORG   ERRLINE+189
         ORG   ERRLINE+189
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED CPU MODEL,SERIAL FILTER  '
         ORG   ERRLINE+252
         ORG   ERRLINE+252
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED CPU MODEL FILTERING      '
         ORG   ERRLINE+315
         ORG   ERRLINE+315
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED 3RD SHIFT TIME FILTERING '
         ORG   ERRLINE+378
         ORG   ERRLINE+378
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+441
         ORG   ERRLINE+441
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+504
         ORG   ERRLINE+504
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+567
         ORG   ERRLINE+567
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+630
         ORG   ERRLINE+630
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED VOLID SELECTION      '
         ORG   ERRLINE+693
         ORG   ERRLINE+693
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED TERMINAL ID SELECTION'
         ORG   ERRLINE+756
         ORG   ERRLINE+756
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+819
         ORG   ERRLINE+819
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+882
         ORG   ERRLINE+882
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+945
         ORG   ERRLINE+945
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1008
         ORG   ERRLINE+1008
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECS FAILED LINE INT.BASE ADDR. SEL '
         ORG   ERRLINE+1071
         ORG   ERRLINE+1071
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED VOLID SELECTION      '
         ORG   ERRLINE+1134
         ORG   ERRLINE+1134
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED TYPE FILTERING       '
         ORG   ERRLINE+1197
         ORG   ERRLINE+1197
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1260
         ORG   ERRLINE+1260
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1323
         ORG   ERRLINE+1323
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+1386
         ORG   ERRLINE+1386
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1449
         ORG   ERRLINE+1449
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1512
         ORG   ERRLINE+1512
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1575
         ORG   ERRLINE+1575
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+1638
         ORG   ERRLINE+1638
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1701
         ORG   ERRLINE+1701
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1764
         ORG   ERRLINE+1764
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1827
         ORG   ERRLINE+1827
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'IPL RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1890
         ORG   ERRLINE+1890
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'EOD RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1953
         ORG   ERRLINE+1953
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+2016
         ORG   ERRLINE+2016
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH RECORDS FAILED ERROR ID SELECTION   '
         ORG   ERRLINE+2079
         ORG   ERRLINE+2079
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT RECORDS FAILED TYPE SELECTION      '
         ORG   ERRLINE+2142
         ORG   ERRLINE+2142
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT RECORDS FAILED ERROR ID SELECTION  '
         ORG   ERRLINE+2205
         ORG   ERRLINE+2205
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES THAT WERE ACCEPTED               '
         ORG   ERRLINE+2268
         ORG   ERRLINE+2268
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES THAT FAILED SELECTION            '
         ORG   ERRLINE+2331
         ORG   ERRLINE+2331
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS THAT WERE COMPLETE           '
         ORG   ERRLINE+2394
         ORG   ERRLINE+2394
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME RECORDS READ                      '
         ORG   ERRLINE+2457
         ORG   ERRLINE+2457
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS REPLACED DUE TO LATER DATE   '
         ORG   ERRLINE+2520
         ORG   ERRLINE+2520
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS REPLACED SET INCOMPLETE      '
         ORG   ERRLINE+2583
         ORG   ERRLINE+2583
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'NUMBER OF SUBPOOL-21 GETMAINS           '
         ORG   ERRLINE+2646
         ORG   ERRLINE+2646
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'ENTRIES IN FRAME TABLE                  '
         ORG   ERRLINE+2709
         ORG   ERRLINE+2709
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES WRITTEN TO ACCDEV                '
         ORG   ERRLINE+2772
         ORG   ERRLINE+2772
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS THAT FAILED NO MCH/CCH FOUND '
         ORG   ERRLINE+2835
         ORG   ERRLINE+2835
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'******IFCFILT1 DEBUG16 RECORD COUNTS****'
         ORG   ERRLINE+2898
IFCFILT1 CSECT
         DC    S(SUPERZAP)
IFCFILT1 CSECT
         DC    S(PATCH)
IFCFILT1 CSECT
MVCDATA  MVC  R0(R0,R6),0(R4)
IFCFILT1 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R7       EQU   @07
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R12      EQU   @12
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R8       EQU   @08
R9       EQU   @09
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
PMCH     EQU   RECTYPE
PCHAN    EQU   RECTYPE
POBR     EQU   RECTYPE
PSOFT    EQU   RECTYPE
PIPL     EQU   RECTYPE
PDDR     EQU   RECTYPE
PMIH     EQU   RECTYPE
PEOD     EQU   RECTYPE
PTTYP    EQU   RECTYPE+1
SWITCHES EQU   PARM+2
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUG11  EQU   DEBUG+1
DEBUG16  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUGA   EQU   PARM+8
DEBUG49  EQU   DEBUGA+2
MISC     EQU   PARM+12
PACC     EQU   MISC
PHIST    EQU   MISC
PRINTES  EQU   MISC
PEDIT    EQU   PRINTES
PSUM     EQU   PRINTES
ERRORID  EQU   MISC
PLOGREC  EQU   MISC
PASSFLAG EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
CACCIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
TERM     EQU   PARM+58
@NM00007 EQU   PARM+75
TABSIZE  EQU   PARM+80
SORTNUM  EQU   PARM+84
ERRID    EQU   PARM+92
IDVALUE  EQU   ERRID
IDCPU    EQU   ERRID+3
IDASID   EQU   ERRID+4
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
IDHOUR   EQU   IDTIME
IDMIN    EQU   IDTIME+1
IDSEC    EQU   IDTIME+2
IDTSEC   EQU   IDTIME+3
USERPGM  EQU   PARM+102
CCHHRLNG EQU   PARM+112
RECCCHHR EQU   CCHHRLNG
RECLNGTH EQU   CCHHRLNG+6
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
FRAMEPTR EQU   PARM+200
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
SHAREDX  EQU   SHARECUA
SHARSERA EQU   SHRCUCPU+2
SHARECUB EQU   SHAREIO+5
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUANUM   EQU   CUA
CUAVAL   EQU   CUA+2
CUA1     EQU   CUAVAL
CUA2     EQU   CUAVAL+2
DEVICE   EQU   0
DEVNUM   EQU   DEVICE
DEVVAL   EQU   DEVICE+2
MDRNUM   EQU   DEVICE+202
MDRVAL   EQU   DEVICE+204
MODELS   EQU   0
MODNUM   EQU   MODELS
MODVAL   EQU   MODELS+2
DEVSERAL EQU   0
VOLUME   EQU   0
VOLNUM   EQU   VOLUME
VOLVAL   EQU   VOLUME+2
CPUS     EQU   0
CPUNUM   EQU   CPUS
CPUVAL   EQU   CPUS+2
CPUCUAS  EQU   0
CPCUANUM EQU   CPUCUAS
CPUCUAV  EQU   CPUCUAS+2
CPUCUX1  EQU   CPUCUAV
CPUCUX2  EQU   CPUCUAV+3
CPUCUX3  EQU   CPUCUAV+5
LIBADR   EQU   0
LIBADNUM EQU   LIBADR
LIBVAL   EQU   LIBADR+2
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
TMT2     EQU   0
TMTKEY   EQU   TMT2
TMTSRT   EQU   TMTKEY+1
TMTCPUS  EQU   TMTKEY+3
TMTITEM  EQU   TMTKEY+4
TMTPERM1 EQU   TMT2+8
TMP2     EQU   0
TMPKEY   EQU   TMP2
TMPSRT   EQU   TMPKEY+1
TMPCPUS  EQU   TMPKEY+3
TMPITEM  EQU   TMPKEY+4
TMPPERM1 EQU   TMP2+7
MERIDIAN EQU   0
MRDNUMBR EQU   MERIDIAN
MODEL    EQU   MERIDIAN+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTNLAST EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRTERRID EQU   LRTREC+3
@NM00017 EQU   LRTREC+4
LRTCNT   EQU   @NM00017+2
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTDT+4
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHCPUID EQU   MCHHEAD+16
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRKEY1  EQU   OBRKEY
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
SHORTSW  EQU   OBRSUBTP
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRSDEV2 EQU   OBRJOBID+2
OBRSCUA  EQU   OBRJOBID+5
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRPCUA  EQU   OBRREC+57
OBRVOL   EQU   OBRREC+64
OBRSEEK  EQU   OBRREC+70
OBRTCAM  EQU   OBRSEEK
OBRTERMN EQU   OBRSEEK+2
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00052 EQU   DDRREC+24
DDRFCUA  EQU   DDRREC+45
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
MIHCPUID EQU   MIHHEAD+16
@NM00058 EQU   MIHREC+24
MIHCUA   EQU   MIHREC+35
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRDEV   EQU   TPRHEAD+4
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
TPRCUA   EQU   TPRREC+24
@NM00066 EQU   TPRREC+26
TPRVOL   EQU   @NM00066
TPRLINAD EQU   TPRREC+36
TPRMODE  EQU   TPRREC+38
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFSMS   EQU   MCFHEAD+2
@NM00074 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00082 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
FRAMETAB EQU   0
FRAMENUM EQU   FRAMETAB
FRAMEDTA EQU   FRAMETAB+4
FRAMEKEY EQU   FRAMEDTA
FRAMECPU EQU   FRAMEKEY
FRAMESER EQU   FRAMECPU
FRAMEMOD EQU   FRAMECPU+3
FRAMEDT  EQU   FRAMEKEY+5
FRAMETYP EQU   FRAMEKEY+13
FRAMLOCM EQU   FRAMEDTA+16
FRAMLOCC EQU   FRAMEDTA+20
LISTLOC  EQU   0
LISTNUM  EQU   LISTLOC
LISTCCHR EQU   LISTLOC+4
RERR     EQU   0
RSEQ     EQU   RERR
RCPU     EQU   RERR+3
RASID    EQU   RERR+4
RTIME    EQU   RERR+6
NEXTBYTE EQU   0
ADDNUM   EQU   0
ERR78    EQU   PRINTBDY
PFRAMMOD EQU   ERR78+27
PFRAMSER EQU   ERR78+32
ERR78161 EQU   PRINTBDY+19
TYPERROR EQU   ERR78161
ZFRAMMOD EQU   ERR78161+11
ZFRAMSER EQU   ERR78161+16
ZFRAMKEY EQU   ERR78161+24
YFRAMMOD EQU   ERR78161+58
YFRAMSER EQU   ERR78161+63
YFRAMKEY EQU   ERR78161+71
SORTKEYY EQU   SORTKEY
SORTCUA  EQU   SORTKEYY+2
LINTXT1B EQU   PRINTBDY+36
EDIFILD  EQU   PRINTBDY+7
EDFLD    EQU   EDIFILD
CHAR1    EQU   CHARS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SORTMOD  EQU   SORTCUA+1
SORTCU   EQU   SORTCUA
SORTCHAN EQU   SORTKEYY+1
SORTYPE  EQU   SORTKEYY
@NM00094 EQU   ERR78161+69
@NM00093 EQU   ERR78161+62
@NM00092 EQU   ERR78161+52
@NM00091 EQU   ERR78161+22
@NM00090 EQU   ERR78161+15
@NM00089 EQU   ERR78161+10
PFRAMKEY EQU   ERR78+44
@NM00087 EQU   ERR78+38
@NM00086 EQU   ERR78+31
@NM00085 EQU   ERR78
@NM00095 EQU   RERR+2
FRAMETIM EQU   FRAMEDT+4
FRAMEDAT EQU   FRAMEDT
CCFFRAME EQU   CCFREC+24
@NM00084 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00082
@NM00083 EQU   @NM00082
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00081 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00080 EQU   CCFHEAD+4
@NM00079 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00078 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00077 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00076 EQU   MCFHEAD+22
MCFMOD   EQU   MCFSMO+3
MCFSER   EQU   MCFSMO
MCFVER   EQU   @NM00074
@NM00075 EQU   @NM00074
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00073 EQU   MCFHEAD+7
MCFCNT   EQU   MCFHEAD+6
@NM00072 EQU   MCFHEAD+4
@NM00071 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00070 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00069 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFLST   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
MCFKEY1  EQU   MCFKEY
DVBSDRE  EQU   TPRREC+56
@NM00068 EQU   TPRREC+39
@NM00067 EQU   TPRREC+34
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00065 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00064 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00063 EQU   TPRBUFC
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00062 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00061 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00060 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
@NM00059 EQU   @NM00058+8
MIHJOBID EQU   @NM00058
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00057 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00056 EQU   MIHHEAD+6
@NM00055 EQU   MIHHEAD+5
MIHDEBIT EQU   MIHHEAD+5
MIHCEBIT EQU   MIHHEAD+5
@NM00054 EQU   MIHHEAD+4
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00053 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRPHD   EQU   @NM00052+20
DDRVOL2  EQU   @NM00052+14
DDRVOL1  EQU   @NM00052+8
DDRJOBID EQU   @NM00052
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00051 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00050 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00049 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00048 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00047 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00046 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00045 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00044 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00043 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00042 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00041 EQU   SFTAEC1
@NM00040 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00039 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00038 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
SFTKEY1  EQU   SFTKEY
OBR34CT2 EQU   OBRTERMN+5
OBR34CT1 EQU   OBRTERMN+4
@NM00037 EQU   OBRTERMN
@NM00036 EQU   OBRSEEK+1
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRLSDRC EQU   OBRREC+56
OBRTYPE  EQU   OBRDEV+1
OBRCLASS EQU   OBRDEV
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRDEVDC EQU   OBRREC+48
OBRSTAT  EQU   OBRCSW+4
@NM00035 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSSDRC EQU   OBRJOBID+4
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00034 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00033 EQU   OBRHEAD+4
@NM00032 EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
@NM00031 EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SDRCOUNT EQU   OBRSUBTP
@NM00030 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00029 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00028 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00027 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00026 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00025 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00024 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00023 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00022 EQU   MCHHEAD+4
MCHSYSTR EQU   MCHSMS+1
@NM00021 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00020 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00019 EQU   @NM00017+3
@NM00018 EQU   @NM00017
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
TMPTEMP  EQU   TMP2+9
TMPPERM  EQU   TMPPERM1+1
@NM00012 EQU   TMPPERM1
TMPDEV   EQU   TMPKEY+5
TMPOLDA  EQU   TMPITEM
TMP3705  EQU   TMPITEM
TMPOLD   EQU   TMPCPUS
TMPCPU   EQU   TMPCPUS
TMPCUA   EQU   TMPSRT
TMPGROUP EQU   TMPKEY
TMTTEMP  EQU   TMT2+10
TMTPERM  EQU   TMTPERM1+1
@NM00011 EQU   TMTPERM1
TMTDEV   EQU   TMTKEY+6
TMTDAT   EQU   TMTKEY+5
TMTOLDA  EQU   TMTITEM
TMT3705  EQU   TMTITEM
TMTOLD   EQU   TMTCPUS
TMTCPU   EQU   TMTCPUS
TMTCUA   EQU   TMTSRT
TMTGROUP EQU   TMTKEY
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERB EQU   SHAREIO+7
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TRECCH0  EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
@NM00009 EQU   CCHHRLNG+5
@NM00008 EQU   ERRID+2
NUMDAYS  EQU   PARM+88
SYSRETRN EQU   @NM00007
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00204 EQU   @RC00201
@RC00264 EQU   @RC00262
@RF00376 EQU   @EL00003
@RF00386 EQU   @EL00004
@RF00389 EQU   @EL00004
@RF00396 EQU   @EL00004
@RC00404 EQU   @EL00005
@RC00454 EQU   @EL00006
@RC00457 EQU   @EL00006
@RC00460 EQU   @EL00006
@RC00463 EQU   @EL00006
@RC00466 EQU   @EL00006
@RC00469 EQU   @EL00006
@RC00472 EQU   @EL00006
@RC00475 EQU   @EL00006
@RC00478 EQU   @EL00006
@RF00491 EQU   @EL00007
@RF00501 EQU   @EL00008
@RC00508 EQU   @EL00009
@RC00527 EQU   @EL00009
@RC00561 EQU   @EL00010
@RC00572 EQU   @EL00010
@RC00617 EQU   @EL00011
@RC00627 EQU   @EL00011
@RC00644 EQU   @EL00012
@RC00654 EQU   @EL00012
@RC00671 EQU   @EL00013
@RC00681 EQU   @EL00013
@RF00696 EQU   @EL00014
@RC00703 EQU   @EL00015
@RC00711 EQU   @EL00016
@RC00719 EQU   @EL00016
@RC00727 EQU   @EL00017
@RF00735 EQU   @EL00017
@RC00740 EQU   @EL00018
@RF00769 EQU   @EL00019
@RF00783 EQU   @EL00020
@RC00787 EQU   @EL00021
@RF00801 EQU   @EL00021
@RF00808 EQU   @EL00021
@RF00814 EQU   @EL00022
@RF00817 EQU   @EL00022
@RC00826 EQU   @EL00023
@RC00838 EQU   @EL00023
@RF00884 EQU   @RC00882
@RF00901 EQU   @RC00882
@RC00985 EQU   @RC00983
@RF01003 EQU   @EL00027
@RF01052 EQU   @RC01010
@RF01057 EQU   @EL00028
@RC01059 EQU   @EL00028
@RF01094 EQU   @EL00029
@RC01129 EQU   @EL00030
@RC01106 EQU   @EL00030
@RF01146 EQU   @EL00030
@RF01193 EQU   @EL00031
@RF01203 EQU   @RC01201
@RC01221 EQU   @EL00033
@RF01315 EQU   @EL00038
@PB00040 EQU   @EL00001
@RC00269 EQU   @RC00264
@RC00406 EQU   @RC00404
@RC00531 EQU   @RC00527
@RC00576 EQU   @RC00572
@RC00631 EQU   @RC00627
@RC00658 EQU   @RC00654
@RC00742 EQU   @RC00740
@RF00745 EQU   @RC00740
@RC00747 EQU   @RC00740
@RC00750 EQU   @RC00740
@RF00754 EQU   @RC00740
@RF00789 EQU   @RC00787
@RF00796 EQU   @RC00787
@RF00831 EQU   @RC00826
@RC00841 EQU   @RC00838
@RC01063 EQU   @RC01059
@RC01108 EQU   @RC01106
@RF01125 EQU   @RC01106
@RF01228 EQU   @RC01221
@PB00039 EQU   @PB00040
@RF00434 EQU   @RC00406
@RC00535 EQU   @RC00531
@RC00580 EQU   @RC00576
@RF00635 EQU   @RC00631
@RF00662 EQU   @RC00658
@RF00845 EQU   @RC00841
@RF00847 EQU   @RC00841
@RC00849 EQU   @RC00841
@RC00856 EQU   @RC00841
@PB00038 EQU   @PB00039
@RC00539 EQU   @RC00535
@RC00584 EQU   @RC00580
@PB00037 EQU   @PB00038
@RC00542 EQU   @RC00539
@RC00588 EQU   @RC00584
@PB00036 EQU   @PB00037
@RF00546 EQU   @RC00542
@RF00599 EQU   @RC00588
@PB00035 EQU   @PB00036
@PB00034 EQU   @PB00035
@PB00033 EQU   @PB00034
@PB00032 EQU   @PB00033
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RF00241 EQU   @PB00002
@ENDDATA EQU   *
         END   IFCFILT1
