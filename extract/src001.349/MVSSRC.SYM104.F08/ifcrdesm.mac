         TITLE 'IFCRDESM - RDE SUMMARY                                 *
                        '
IFCRDESM CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCRDESM  78.039'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  LA    @11,4095(,@10)                                      0001
         LA    @12,4095(,@11)                                      0001
         USING @PSTART,@10                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
***********************************************************************
*                                                                     *
* NAME - RELIABILITY DATA EXTRACTOR SUMMARY PROGRAM - IFCRDESM        *
*                                                                     *
* FUNCTION -   THIS MODULE PRODUCES TWO REPORTS. AN IPL REPORT AND    *
*              A  HARDWARE ERROR REPORT. THE FUNCTION OF THIS MODULE  *
*              IS ACHIEVED BY EXECUTING THE IFCEREP0 SERVICE AID USING*
*              THE RDESUM=Y PARAMETER.                                *
*                                                                     *
*               A.THE IPL SUMMARY REPORT PROVIDES THE USER WITH A LIST*
*                 OF IPLS  WITHIN A SPECIFIED TIME FRAME, THE DATE AND*
*                 TIME OF EACH IPL, THE REASON FOR IPL, AND THE       *
*                 SUBSYSTEM RESPONSIBLE FOR EACH IPL.                 *
*                                                                     *
*                  NOTE: THE REASON FOR IPL AND THE SUBSYSTEM TO WHICH*
*                        THE IPL IS ATTRIBUTED ARE PROVIDED BY THE    *
*                        OPERATOR DURING THE IPL SEQUENCE.            *
*                                                                     *
*               B.THE HARDWARE ERROR REPORT PROVIDES STATISTICS ON NON*
*                 TRANSPARENT SYSTEM ERRORS. THESE STATISTICS ARE     *
*                 BROKEN DOWN BY SUBSYSTEM AND DEVICE ADDRESS WHENEVER*
*                 POSSIBLE. THESE STATISTICS ARE ALSO SUBDIVIDED BY   *
*                 SEVERITY INTO TWO CATEGORIES:                       *
*                                                                     *
*                  1.SYSTEM CONTINUED TO OPERATE.                     *
*                                                                     *
*                  2.SYSTEM STOPPED.                                  *
*                                                                     *
* ENTRY POINT - IFCRDESM                                              *
*                                                                     *
* INPUT - THE ONLY VALID INPUT TO THIS PROGRAM IS THE MEASUREMENT DATA*
*         SET CREATED BY THE EREP MODULE IFCRDE03. THIS DATA SET IS   *
*         CREATED ONLY IF RDE HAS BEEN SELECTED AT SYSGEN TIME. THE   *
*         DSNAME IS EREPTAPE. THE DD NAME FOR INPUT PURPOSES IS RDETP.*
*                                                                     *
* OUTPUT - THE OUTPUT OF THIS PROGRAM CONSISTS OF THE TWO REPORTS     *
*         PREVIOUSLY DESCRIBED UNDER FUNCTION. THEY GO TO SYSOUT.     *
*                                                                     *
* EXTERNAL REFERENCES - THE FOLLOWING ARE USED BY THIS MODULE:        *
*                        OPEN - INPUT AND OUTPUT DATA SETS            *
*                        CLOSE - INPUT AND OUTPUT DATA SETS           *
*                        GET - TO READ INPUT DATA SET                 *
*                        PUT - TO WRITE OUTPUT DATA SET               *
*                                                                     *
* EXITS,NORMAL - NORMAL EXIT TO R14 WITH RETURN CODE IN R15.          *
*                                                                     *
* EXITS,ERROR  - ERROR EXIT TO R14 WITH RETURN CODE IN R15.           *
*                                                                     *
* TABLES/WORK AREAS - NO EXTERNAL TABLES OR WORK AREAS ARE USED.ALL   *
*                     WORK AREAS ARE INTERNAL TO THE MODULE.          *
*                                                                     *
* ATTRIBUTES - PROBLEM PROGRAM, NON RESIDENT, NON-REUSABLE.           *
*                                                                     *
* CHARACTER CODE DEPENDENCY - THIS MODULE IS CHARACTER CODE DEPENDENT *
*                             AND MUST BE REASSEMBLED IF MODE CHANGED *
*                             FROM EBCDIC.                            *
*                                                                     *
* NOTES - IN ORDER TO INSURE THE ACCURACY OF THIS REPORT, Z EOD SHOULD*
*         BE USED WHEN ENDING OPERATION.                              *
*                                                                     *
*              RELIABILITY  DATA  EXTRACTOR  SUMMARY  PROGRAM         *
*                                                                     *
*    PHASE 1 :    STATISTICS OF IPLS  DUE TO ALL CAUSES               *
*                                                                     *
*    PHASE 2 :    STATISTICS OF ERRORS FROM  HARDWARE UNITS           *
*                                                                     *
***********************************************************************
*
*        SAVER2 = R2;                                      /*@Z427VLS*/
         ST    R2,SAVER2                                           0058
*        IF DEBUG4 = ON THEN       /*PRINT NAME AND COMPILE DATE     */
         L     @15,SAVER2                                          0059
         TM    DEBUG4(@15),B'00001000'                             0059
         BNO   @RF00059                                            0059
*         DO;                                              /*@Z427VLS*/
*          R0 = R10 - 27;                                  /*@Z427VLS*/
         LR    R0,R10                                              0061
         SL    R0,@CF00763                                         0061
*          GEN(MVC  IPLRPT+1(16),0(R0));                   /*@Z427VLS*/
         MVC  IPLRPT+1(16),0(R0)
*          PRINTADR = ADDR(PRINTER);                       /*@Z427VLS*/
         L     @15,SAVER2                                          0063
         LA    @14,PRINTER                                         0063
         ST    @14,PRINTADR(,@15)                                  0063
*          CALL IOHND(RITEPRTR);                           /*@Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0064
         LA    @01,@AL00064                                        0064
         BALR  @14,@15                                             0064
*          R0 = ZERO;                                      /*@Z427VLS*/
         SLR   R0,R0                                               0065
*         END;                                             /*@Z427VLS*/
*        CALL  IOHND(READCARD);    /* READ CONTROL CARD      @Z427VLS*/
@RF00059 L     @14,SAVER2                                          0067
         L     @15,ADIOHND(,@14)                                   0067
         LA    @01,@AL00067                                        0067
         BALR  @14,@15                                             0067
*GENERATE REFS(PRINTADR);                                  /*@Z427VLS*/
         LTR   R15,R15             ANY ERROR.
         BNZ   NOCRDMSG            YES, EXIT.
         MVC   CTLCRD,N0(R7)       MOVE CONTROL CARD
***********************************************************************
*                                                                     *
*              INTREPRET CONTROL CARD                                 *
*                                                                     *
***********************************************************************
         MVC   CTLCRLIN(N80),CTLCRD PRINT CONTROL CARD
         BAL   R14,PRINT           PRINT CONTROL CARD
         CLC   CCLEDGEN(N6),CTLCRDTS VALID CONTROL CARD
         BNE   NOCRDMSG            PRINT ERROR
         LA    R2,CCSTART          GET ADDR OF DATE FOR
         BAL   R14,PACKHEX         CONVERT DATE
         LTR   R15,R15             COND CODE 0  START DATE
         BNZ   STRDTMSG            PRODUCE ERROR MSG AND STOP
         ST    R9,STRTIME          SAVE JULIAN START TIME SEC
         ST    R9,STRTIMEP          SAVE CTL CD STARTIME       @XA16800
         CLC   CCEND(N5),BLANKS    END DATE AVAILABLE
         BE    CKCLUSTR            NO CHECK IPL CLUSTER VALUE
         LA    R2,CCEND            GO CONVERT JULIAN DATE TO
         BAL   R14,PACKHEX         CONVERT DATE
         LTR   R15,R15             RETURN CODE 0 END DATE
         BNZ   ENDDTMSG            OTHERWISE LEAVE BLANK
         A     R9,TWENFOUR         ADD 24 HRS TO END DATE
         ST    R9,ENDTIME          SAVE END TIME + 24 HRS
         CLC   STRTIME(N4),ENDTIME IS END TIME LOWER THAN
         BNL   ENDDTMSG            BRANCH TO ERROR ROUTINE
CKCLUSTR CLC   CCCLUST(N2),BLANKS  CLUSTER TIME AVAILABLE
         BE    STARTRUN            START RDE SUMMARY PROCESS
         XC    BWORK(N8),BWORK     ZERO OUT WORK AREA
         TM    CCCLUST,XF0         IS CLUSTER TIME NUMERIC
          BNO   CLUSTMSG            ED MUST BE VALID           @XA16800
         TM    CCCLUST+N1,XF0      IS SECOND BYTE OK
         BNO   CLUSTMSG            ED MUST BE VALID
         PACK  INVALUE(N2),CCCLUST(N2) PACK CLUSTER TIME
         XR    R8,R8               CLEAR REG 8
         CVB   R9,BWORK            CONVERT TO BINARY
         M     R8,SIXTY            COMPUTE SECONDS
         ST    R9,CLUSTIME         SAVE
         EJECT                               SKIP PAGE
***********************************************************************
*   THIS ROUTINE READS THE HISTORY TAPE - CONVERTS TIME TO SEC AND    *
*   PASSES ONLY RECORDS WITHIN THE SPECIFIED REPORTING TIME PERIOD.   *
***********************************************************************
*
STARTRUN MVI   SW,X00              CLEAR SWITCH INITIALLY
READ     EQU   *
*        R2 = SAVER2;                                      /*@Z427VLS*/
         L     @15,SAVER2                                          0069
         LR    R2,@15                                              0069
*        CALL  IOHND(READSEQ);     /* READ HISTORY INPUT TAPE        */
         L     @15,ADIOHND(,@15)                                   0070
         LA    @01,@AL00070                                        0070
         BALR  @14,@15                                             0070
*GENERATE REFS(LRTKEY1,LOGCODE,MCHLOG,CCHCUA,OBRCSW,OBRPCUA,       0071
*              PRINTADR,IPLREAS,IPLSYSID,LRTMODEL);        /*@Z427VLS*/
         MVI   PRINTER,C'0'        INDICATE EREPPT DATA SET OUTPUT
         LTR   R15,R15             EOF/ERROR
         BNZ   WRAPUP              END REPORT
         LR    R1,R7               LOAD RECORD ENTRY
         ST    R7,SAVERDE          SAVE RECORD PTR
         TM    SW,X01              BYPASS THIS RECORD
         BO    CHKMORE             YES                         @XA16800
         B     SKIPEDIT            DONT CHECK FURTHER          @XA16800
CHKMORE  CLI   LRTKEY(R1),X'10'    IS RECORD MACHINE TYPE      @XA16800
         BE    READ                 SKIP THIS RECORD           @XA16800
SKIPEDIT DS    0H                                              @XA16800
         NI    SW,XFE              CLEAR SWITCH
         LA    R2,LRTDATE(R1)      GO EDIT AND CONVERT THET
         MVC   BNDRY(4),0(R2)       PREVENT 0C6                @XA16800
         L     R9,BNDRY             GET LOGDATE DATA           @XA16800
         LTR   R9,R9                TEST FOR ZERO              @XA16800
         BZ    HOLDSEC0             USE ZERO DATA FOR REPORT   @XA16800
         CLI  0(R2),X'00'        IS DATE VALID                 @XA16800
         BNE   HOLDSEC0            USE BAD DATA BUT ABBR RPT   @XA16800
         LA    R0,4                SET # BYTES TO CHECK PACK   @XA16800
         LA    R1,BNDRY            SET ADDR OF PCK DEC FIELD   @XA16800
         BAL   R14,CHKDEC          GO CHK FOR VALID PCK DEC    @XA16800
         LTR   R15,R15             IS IT A VALID PCK DEC FLD   @XA16800
         BNZ   HOLDSEC0            YES--CONTINUE               @XA16800
         BAL   R14,CONVDATE        JULIAN DATE TO SECONDS
         LTR   R15,R15             RETURN CODE OF 0
         BZ    HOLDSEC            DATE IS LEGAL NON-ZERO       @XA16800
HOLDSEC0 OI    SW1,XC0             SET ABBR RPT SW AND BAD TM  @XA16800
         B     RECIDENT             CHECK REC TYPE             @XA16800
HOLDSEC  EQU   *                  HOLD TIME IN SECONDS         @XA16800
         BAL   R14,CONVTIME        GO CONVERT TIME TO SEC
         L     R3,STRTIMEP         GET USER CTRL CD STRT TIME  @XA16800
         CR    R9,R3               CMP LOG TIME TO START TIME
         BL    READ                LOG TIME LOW GET NEXT RCD
         A     R3,MONTH            ONE MONTH OF START TIME
         CR    R9,R3
         BH    READ                NOT WITHIN ONE MONTH LIMIT
         TM    SW,X02              IS START TIME STORED
         BO    ENDPEROI            YES
         ST    R9,STRTIME          SET ACTUAL START TIME.
         OI    SW,X02              START TIME STORED
         CLC   FRSTTIME(N4),FULLZERO FIRST RECORD PROCESSED
         BNE   ENDPEROI            BRANCH-- NOT FIRST
         ST    R9,FRSTTIME         YES - SAVE TIME
ENDPEROI L     R4,ENDTIME          WAS END OF REPORT TIME
         LTR   R4,R4               SUPPLIED BY THE USER
         BZ    RECIDENT            NO CONT TILL EOF
         CR    R9,R4               YES IS TIME GREATER THAN
         BH    READ                READ NEXT RECORD
RECIDENT MVC   SAVEDATE(N4),LRTDATE(R1) SAVE DATE LAST ACCEPTED RCD
         ST    R9,CURRTIME         TIME BECOMES CURRENT TIME
         NI    PH2SW,X00           TURN LAST INCIDENT SWS  OFF
         CLI   LRTKEY1(R1),X'10'   IS RECORD TYPE HEX 0X
         BL    OTHERID             YES, GO TO OTHER
         CLI   LRTKEY1(R1),X'20'   IS RECORD TYPE HEX 1X
         BL    MCH                 YES, GO TO MACH CK
         CLI   LRTKEY1(R1),X'30'   IS RECORD TYPE HEX 2X
         BL    CCH                 YES, GO TO CHANNEL CK
         CLI   LRTKEY1(R1),X'40'   IS RECORD TYPE HEX 3X
         BL    OBR                 YES, GO TO OBR ROUTINE
         CLI   LRTKEY1(R1),X'50'   IS RECORD TYPE HEX 4X
         BL    OTHERID             YES, GO TO OTHER ID
         CLI   LRTKEY1(R1),X'60'   IS RECORD TYPE HEX 5X
         BL    IPL                 YES, GO TO IPL
         CLI   LRTKEY1(R1),X'80'   IS RECORD TYPE HEX 6X OR 7X
         BL    OTHERID             YES, GO TO OTHER ID
         CLI   LRTKEY1(R1),X'90'   IS RECORD TYPE HEX 8X
         BL    EOD                 YES, GO TO END OF DAY
         EJECT
***********************************************************************
*      RECORD  TYPE EQ OTHER                                          *
***********************************************************************
*
OTHERID  NI    SW,X7F              TURN OFF CCH SWITCH
         ST    R9,PH2TIME          ASSIGN TIME TO LAST INCID
         B     READ                RETURN FOR NEXT RECORD
         EJECT
***********************************************************************
*    RECORD TYPE EQU MACHINE CHECK                                    *
***********************************************************************
*
MCH      NI    SW,X7F              TURN OFF CCH SWITCH
         TM    LOGCODE(R1),X10     IS RECORD 1ST OF TWO
         BZ    MCHGO               NO, GO ON.
         OI    SW,X01              SET TO BYPASS 2ND RECORD
MCHGO    MVI   PH2INCID,X01        INCIDENT TYPE EQ SI
         TM    LOGCODE(R1),X60     SYS TERM OR REC INCOMPL ON
         BM    COMPPH2             YES, SI TYPE
         MVI   PH2INCID,X02        NO INCIDENT TYPE = SRI
         TM    MCHLOG(R1),XC0      BIT 0 OR 1 OF MCI CODE ON
         BNZ   COMPPH2             LAST INCID = SRI
         ST    R9,PH2TIME          ASIGN TIME TO LAST INCID.
         MVI   PH2INCID,X04        SET OTHER FOR LAST INCIDENT
         B     READ                GO READ NEXT RECORD
COMPPH2  MVI   PH2DEV,N1           CODE DEVICE AS CPU
         TM    MCHLOG+2(R1),XA0    BITS 16 - 18 OFF = CPU
         BZ    ENDMCH              DEVICE = CPU
         MVI   PH2DEV,N2           CODE DEVICE AS STORAGE
         BM    ENDMCH              DEVICE = STORAGE
         MVI   PH2DEV,N3           CODE DEVICE CHANNEL
         TM    LOGCODE(R1),X08     IS LOGCODE CHANNEL CODE
         BO    ENDMCH              DEVICE EQ CHANNEL
         MVI   PH2DEV,N4           NONE OF ABOVE,CODE OTHER
ENDMCH   ST    R9,PH2TIME          ASSIGN TIME TO LAST INCID
         B     RDEPH2              DATA READY GO TO PHASE 2
         EJECT
***********************************************************************
*    RECORD TYPE EQ CHANNEL CHECK                                     *
***********************************************************************
*
CCH      NI    SW,X7F              TURN OFF CCH SWITCH
         TM    LOGCODE(R1),X70     SYS TERM OR REC INCOMPL OR
         BM    CCHSI               CHAN UNSUPPORTED BIT ON
         OI    SW,X80              NO TURN ON CCH SWITCH
         MVI   PH2SW,N0            LAST INCIDENT TYP = OTHER
ENDCCH   MVC   PH2DEV,CCHCODE+2(R1)  DEVICE TYPE               @XA16800
         MVC   PH2CUA,CCHCUA(R1)   CONTROL UNIT ADDRESS
         ST    R9,PH2TIME          ASSIGN TIME
         TM    SW,X80              CCH SWITCH ON
         BO    READ                READ NEXT RECORD
         B     RDEPH2              REG 4 =4 GO TO PHASE 2
CCHSI    MVI   PH2INCID,X01        LAST INCIDENT = SI
         B     ENDCCH              GO END CCH PROCESS
         EJECT
**********************************************************************
*     RECORD TYPE EQU OBR                                             *
**********************************************************************
*
OBR      TM    LOGCODE(R1),X80     IS SDR DUMP BIT ON
         BO    OBROTHER            YES INCIDENT TYPE = OTHER
         TM    SW,X80              IS CCH SW ON
         BZ    OBRUCB              NO-CONTINUE
         NI    SW,X7F              TURN OFF CCH SW
         CLC   OBRCODE+2(N1,R1),PH2DEV  DEVICE DOE THE SAME-CCH@XA16800
         BE    OBRSRI              YES INC TYPE = SRI
OBRUCB   TM    OBRCSW+4(R1),X02    BIT 38 IS UNIT CHECK
         BZ    OBROTHER            YES INCIDENT TYPE = OTHER
         TM    LOGCODE(R1),X40     IS TEMP ERROR BIT OFF
         BZ    OBRSRI              YES INCIDENT TYPE = SRI
OBROTHER MVI   PH2INCID,X04        INCIDENT TYPE = OTHER
         ST    R9,PH2TIME          ASSIGN TIME LAST INCIDENT
         B     READ                READ NEXT RECORD
OBRSRI   MVI   PH2INCID,X02        INCIDENT TYPE EQ SRI
         ST    R9,PH2TIME          ASSIGN TIME
         MVC   PH2DEV,OBRCODE+2(R1)  DEVICE TYPE               @XA16800
         MVC   PH2CUA,OBRPCUA(R1)  *CONTROL UNIT ADDRESS
         B     RDEPH2              GO TO PHASE 2
         EJECT
**********************************************************************
*    RECORD TYPE EQU IPL                                              *
**********************************************************************
*
IPL      NI    SW,X77              TURN OFF CCH SW & CLUSTER TBL SHIFT
         L     R4,SEQNO            GET SEQ NO
         LA    R4,N1(R4)           ADD 1 TO SEQ NO
         ST    R4,SEQNO            SEQ NO = SEQ NO +1
         CLI   PH2INCID,X01        IS LAST INCIDENT TYPE SI
         BE    LASTSI              YES GO TURN ON SI BIT
         CLI   PH2INCID,X02        IS LAST INCIDENT TYPE SRI
         BE    LASTSRI             YES GO TURN ON SRI BIT
         OI    PH2SW,X20           LAST INCIDENT TYPE = IPL
         B     INCIDIPL            NO MAKE LAST INCIDENT IPL
LASTSI   OI    PH2SW,X80
         B     INCIDIPL            BRANCH TO INCIDIPL
LASTSRI  OI    PH2SW,X40
INCIDIPL MVI   PH2INCID,N53        SET LAST INCID TO IPL.
         MVC   PH2DEV(N4),FULLZERO ZERO OUT DEV TYPE AND CUA
         ST    R9,PH2TIME          ASSIGN TIME
         ST    R9,LASTINCT         SAVE LAST INCIDENT TIME
         MVC   PH2REA(N2),IPLREAS(R1)  IPL REASON CODE
         MVC   PH2SSID,IPLSYSID(R1)  USE SSID IN IPL RECORD
         TM    SW,X10              IPL HEADING REQUIRED
         BO    PRTLINE             NO- NOT REQUIRED
         OI    SW,X10              INDICATE HEADING FINISHED
         MVC   RPTCUS(N55),CCCUST  CUSTOMER NAME
         MVI   PRT,SKIP            SKIP A PAGE
         BAL   R14,PRINT           GO PRINT LINE
         L     R1,SAVERDE          RESTORE RDE POINTER.
         MVO   JULIAN(N4),LRTMODEL(N2,R1)  OFFSET MODEL NO.    @XA16800
         OI    JULIAN3,X0F         SETUP UP FOR EDIT
         LA    R0,2                CHECK 2 BYTES FOR MDL NO    @XA16800
         LA    R1,JULIAN2          STARTING AT JULIAN2         @XA16800
         BAL   R14,CHKDEC          CHECK FOR DEC NUMBERS       @XA16800
         LTR   R15,R15             CHK RETURN CODE             @XA16800
         BZ    MDLNUMOK            CANT GET MDL NO.FR 1ST REC  @XA16800
         OI    SW1,X04             SET SW FOR 1ST REC BAD      @XA16800
         B     MDLNUMNG            SKIP MDL NO. INSERTION      @XA16800
MDLNUMOK EQU   *                                               @XA16800
         MVC   HDMODEL(N3),MDPATRN
         ED    HDMODEL(N3),JULIAN2 EDIT MODEL NUMBER
MDLNUMNG EQU   *                                               @XA16800
         MVC   RPTHDLN1(N61),HEADLIN1 HEADING
         MVI   PRT,SPACE2          DOUBLE SPACE
         BAL   R14,PRINT           PRINT LINE
         MVC   HDDATE(N7),DTPATRN  DATE PATTERN 202048202020
         PACK  JULIAN(N4),CCSTART(N5) PACK CC DATE
         ED    HDDATE(N7),JULIAN1  EDIT CC START DATE
         MVC   RPTHDLN2(N31),HEADLIN2 PRINT
         MVI   PRT,SPACE2          DOUBLE SPACE
         BAL   R14,PRINT           HEADING LINE
         MVC   RPTHDLN3(N11),HEADLIN3 PRINT
         MVI   PRT,SPACE2          DOUBLE SPACE REPORT
         BAL   R14,PRINT           REPORT
         MVC   RPTHDLN4(N112),HEADLIN4 HEADING
         BAL   R14,PRINT           PRINT LINE
         MVI   PRT,SPACE2          DOUBLE SPACE FIRST DETAIL
         XC    LINES,LINES         SET LINE COUNT
         MVI   LINES+1,X'09'       INITIALLY FOR HEADER
         L     R1,SAVERDE          RESTORE RDE POINTER
PRTLINE  L     R2,SEQNO            IPL SEQ NO IN BINARY
         CVD   R2,BWORK            CONVERT TO DEC
         OI    BWORK7,X0F          CORRECT SIGN
         MVC   RPTSEQ(N4),EDITSEQ  EDIT PATTERN TO PRINT AREA  @XA16800
         ED    RPTSEQ(N4),BWORK6   EDIT IPL SEQUENCE NUMBER    @XA16800
         TM    SW1,X04             TEST SW FOR BAD MDL NO.     @XA16800
         BNO   PRTOKLIN            NO SET - NORMAL PRINT       @XA16800
         NI    SW1,XFB             CLEAR BAD MDL NO SW         @XA16800
         OI    SW1,X90             SET SWS FOR ABBR RPT,WNLNOTE@XA16800
         MVI   PRT7,C'*'                                       @XA16800
         MVI   PRT8,C'*'                                       @XA16800
         MVC   RPTLOST(N10),WNLNOTE SET WARNING FOR PRINT      @XA16800
         B     PRTLIN10            PRINT LINE AS IS - NO DATA  @XA16800
PRTOKLIN L     R3,PREVSTRT         GET PREVIOUS IPL TIME SAVED @XA16800
         CR    R9,R3               COMPARE NEW WITH PREVIOUS   @XA16800
         BH    PREVTMOK            PREVIOUS TIME LOWER - O.K.  @XA16800
         OI    SW1,X80             SET ABBR REPORT IND         @XA16800
         MVI   PRT7,C'*'           FLAG ALL LOWER              @XA16800
         MVI   PRT8,C'*'           IPL RECORDS                 @XA16800
         B     NOSAVIPL            DO NOT SAVE THIS IPL DATE   @XA16800
PREVTMOK ST    R9,PREVSTRT         SAVE LATEST IPL TIME        @XA16800
NOSAVIPL EQU   *                                               @XA16800
         TM    SW1,X40             TEST FOR BAD DATE DATA PRT  @XA16800
         BNO   PRTNORLN            DO NORMAL PRINT LINE        @XA16800
         STM   R5,R8,BDDRSV        SAVE REGS5-8                @XA16800
         MVI   PRT7,X'5C'          INSERT FLAGS AFTER          @XA16800
         MVI   PRT8,X'5C'          SEQUENCE NUMBER             @XA16800
         L     R7,LRTDATE(R1)      GET LOGREC YR-DAY DATA      @XA16800
PRTLINE1 SR    R6,R6               CLEAR REG6                  @XA16800
PRTLINE2 L     R5,MASK0F           MASK INTO REG5              @XA16800
         SLDL  R6,N4               POSITION DIGIT FOR TEST     @XA16800
         NR    R5,R6               LIMIT TEST TO LOW 4 BITS    @XA16800
         C     R5,NINE             CHK FOR HEX CHARS A-F       @XA16800
         BH    PRTLINE3            EQUAL OR HIGH BRANCH        @XA16800
         A     R6,ZONEF0           ADD ZONE FOR NUMERIC DIGIT  @XA16800
         B     PRTLINE4            GO PRINT                    @XA16800
PRTLINE3 A     R6,CONSTB7          FORMS ALPHABETIC CHAR CODE  @XA16800
PRTLINE4 LTR   R6,R6               CHK FOR FULL REG            @XA16800
         BM    PRTLINE5            YES FULL                    @XA16800
         SLL   R6,N4               NO, SHIFT AND GO BACK       @XA16800
         B     PRTLINE2            REPEAT ABOVE ROUTINE        @XA16800
PRTLINE5 TM    SW1,X20             TEST FOR 1ST TIME THRU SW   @XA16800
         BO    PRTLINE6            NO - SECOND TIME            @XA16800
         OI    SW1,X20             YES BUT SET INDICATOR       @XA16800
         ST    R6,PRTWRKA          PUT IN WORK AREA            @XA16800
         MVC   PRT10(4),PRTWRKA    MOVE INTO PRT BFR           @XA16800
         MVI   PRT14,C'.'          SET PERIOD AFTER YEAR DATA  @XA16800
         B     PRTLINE1            DO LOOP AGAIN FOR DAY DATA  @XA16800
PRTLINE6 ST    R6,PRTWRKA          PUT DAY DATA IN WRK AREA    @XA16800
         MVC   PRT15(4),PRTWRKA    MOVE INTO PRT BFR           @XA16800
         NI    SW1,X9F             CLEAR SWS EXCEPT ABBR RPT   @XA16800
         LM    R5,R8,BDDRSV        RESTORE REGS                @XA16800
         B     PRTLINE7            GO CHK EDITTIME AND PNT     @XA16800
PRTNORLN EQU   *                                               @XA16800
         MVC   RPTDATE(N7),DTPATRN EDIT AND MOVE DATE
         ED    RPTDATE(N7),LRTDATE+1(R1) TO REPORT AREA
PRTLINE7 EQU   *                                               @XA16800
         MVC   EDITTIME(N4),LRTTIME(R1)     EDIT TIME          @XA16800
         OI    EDITIME3,X0F        ASSURE VALID DEC FIELD IND  @XA16800
         MVC   RPTTIME(N9),DTPATTN        EDIT AND MOVE TIME   @XA16800
         LA    R0,4                SET # BYTES TO CHECK        @XA16800
         LA    R1,EDITTIME         LOAD ADDR OF EDITTIME       @XA16800
         BAL   R14,CHKDEC          IS IT VALID PACK DEC FIELD  @XA16800
         LTR   R15,R15             TEST RETURN CODE            @XA16800
         BZ    PRTLINE8            YES--VALID PACK DEC FIELD   @XA16800
         MVI   PRT7,C'*'           NO---SET TIME ERROR FLAGS   @XA16800
         MVI   PRT8,C'*'           TIME ERROR FLAG             @XA16800
         B     PRTLINE9            GO PRINT IPL DETAIL LINE    @XA16800
PRTLINE8 EQU   *                                               @XA16800
         ED    RPTTIME(N9),EDITTIME
PRTLINE9 EQU   *                                               @XA16800
         BAL   R14,LOOKDESC        DESC,SUB-SYS,AND
PRTLIN10 EQU   *                                               @XA16800
         BAL   R14,PRINT           GO PRINT IPL DETAIL LINE
         LH    R6,LINES            ADD
         LA    R6,N1(R6)           ONE
         STH   R6,LINES            LINE COUNT
         CLC   LINES(N2),MAXLINCT  LINE COUNT EQ MAXIMUM
         BL    PROCCLUS            CONTINUE TO CLUSTER
         NI    SW,XEF              PRINT HEADER NEXT TIME
         XC    LINES(N2),LINES     CLEAR LINE COUNT
PROCCLUS L     R4,CLUSTIME         CHECK IF USER HAS REQ
         LTR   R4,R4               IPL CLUSTERING
         BZ    RDEPH2              NO GO TO RDE PHASE 2
         TM    SW,X04              CLUSTER TABLE FULL
         BNZ   RDEPH2              YES-GO TO RDE PHASE 2 IF FULL..
         EJECT
***********************************************************************
*     THIS ROUTINE MAINTAINS AN IPL CLUSTER TABLE ONLY IF USER HAS    *
*      PROVIDED THE CLUSTER VALUE IN MINUTES IN THE CONTROL CARD.     *
*           THE CLUSTER TABLE IS PRINTED AT THE END OF THE IPL REPORT *
***********************************************************************
*
         USING IPLTABLE,R5         IPL TABLE ADDRESSIBILITY
         USING SEQTABLE,R7         SEQ TABLE ADDRESSIBILITY
GENCLUS  DS    0H                                              @XA16800
         TM    SW1,X80              TEST FOR FULL REPORT       @XA16800
         BO    RDEPH2               NO DO PHASE 2 REPORT       @XA16800
         LA    R3,SEQTABE           END OF CLUSTER TABLE       @XA16800
         L     R4,SEQINDX          PTR TO NEXT CLUSTER ENTRY.
         CR    R3,R4               IS CLUSTER TABLE FULL
         BNE   ENTRY1              NO,CONTINUE.
STOPCLUS OI    SW,X04              SET TABLE FULL
         B     RDEPH2              GO TO PHASE 2 PROCESSING.
ENTRY1   L     R6,CLUSTIME         GET USER CLUSTER REQ IN R6
         L     R5,IPLINDX          GET ADDR OF IPL TABLE
         L     R7,SEQINDX          GET ADDR OF SEQ TABLE
         L     R4,IPLTIME          LOWEST IPL TIME IN 4
         L     R3,LASTINCT         LAST INDICENT TIME IN 3
         SR    R3,R4               INTERVAL TIME IN R3
         CR    R3,R6               IS INTERVAL GR THAN CLUSTER
         BH    ENTRY2              YES GO CHECK NEXT ENTRY
         L     R5,IPLHIDX          HI ELEMENT ADDR IN R5
         LA    R5,N8(R5)           INCREMENT TO NEXT ENTRY
         MVC   IPLTIME,LASTINCT    LAST INCIDENT TIME IN TABLE
         MVC   IPLSEQ,SEQNO        IPL SEQ NO IN TABLE
         ST    R5,IPLHIDX          SAVE HI IPL INDEX PTR
         LA    R3,IPLTBEND         IS IPL TABLE
         CR    R3,R5               FULL
         BE    STOPCLUS            YES STOP CLUSTERING
         OI    SW,X40              CHECK CLUSTER DURING WRAPUP
         B     RDEPH2              GO TO RDE PHASE 2
ENTRY2   LA    R5,N8(R5)           CHECK IF SECOND ENTRY IS 0
         L     R3,IPLTIME          GET IPL TIME
         LTR   R3,R3               IS ENTRY = 0
         BZ    FILLIPL             YES GO TO ENTER ENTRY IN TABLE
         TM    SW,X08              IS TABLE SHIFT REQUIRED
         BO    SHIFTTAB            YES-SHIFT IT
         OI    SW,X08              SHIFT NEXT TIME
         L     R5,IPLINDX          GET LOW SEQ NO IN IPL TABLE
         MVC   LOWSEQ,IPLSEQ2      MOVE TO SEQ TABLE LOW
         L     R5,IPLHIDX          GET HI SEQ NO IN IPL TABLE
         MVC   HISEQ,IPLSEQ2       MOVE TO SEQ TABLE HI
         LA    R7,N4(R7)           INCREMENT TO NEXT ENTRY SEQ TAB
         ST    R7,SEQINDX          SAVE SEQ TABLE PTR
SHIFTTAB L     R5,IPLINDX          LOAD BEGINING IPL TABLE ADDR
         L     R3,IPLHIDX          LOAD LAST ENTRY ADDR
         SR    R3,R5               CALC THE LENGTH OF MOVE IN R3
         BCTR  R3,R0               DECREMENT FOR MVC INST
         EX    R3,SHIFTMVC         SHIFT TABLE DOWN ONE ENTRY
         L     R5,IPLHIDX          GET ADDR OF HI ELEMENT
         XC    0(8,R5),0(R5)       ZERO HI ENTRY/IPL TIME IN IPL TABLE
         S     R5,CONST8           BACK UP ONE ELEMENT
         ST    R5,IPLHIDX          ADJUST HI INDEX PTR
         B     GENCLUS             RETURN TO PROCESS NXT INTERVAL
FILLIPL  L     R5,IPLINDX          LOWEST IPL = LAST INCIDENT
         MVC   IPLTIME,LASTINCT    LOWEST SEQ = SEQ NUMBER
         MVC   IPLSEQ,SEQNO        GO TO
         NI    SW,XBF              BYPASS CLUSTER DURING WRAPUP
         B     RDEPH2              PHASE 2 PROCESSING
*
SHIFTMVC MVC   N0(N0,R5),N8(R5)    EX- SHIFT IPL TABLE DOWN
*
         EJECT
***********************************************************************
*  THIS ROUTINE CHECKS VARIABLE LENGTH PACKED DECIMAL FIELDS UP TO  4 *
*  BYTES TO ENSURE VALID PACKED DECIMAL DATA.                         *
*        R0 =  NUMBER OF BYTES TO BE CHECKED                          *
*        R1 =  ADDR OF DATA                                           *
*        R15= RETURN CODE                                             *
***********************************************************************
CHKDEC   DS    0H                                              @XA16800
         STM   R4,R5,CHKDECSV      SAVE WORK REGS              @XA16800
         SR    R15,R15             CLEAR RETURN REG            @XA16800
         MVC   CHKDECWA(4),0(R1)   MOVE IN DATA                @XA16800
         L     R4,CHKDECWA         SET UP OTHER CHECK          @XA16800
         CH    R0,=H'4'            IS LEN 4 BYTES              @XA16800
         BE    NOSHIFT             NO SHIFTING REQUIRED        @XA16800
         CH    R0,=H'3'            IS LEN 3 BYTES              @XA16800
         BNE   SHIFT16             ASSUME 2 BYTE CHECK         @XA16800
         SRL   R4,8                GET RID OF LOW ORDER BYTE   @XA16800
         B     NOSHIFT             START CHECK                 @XA16800
SHIFT16  SRL   R4,16               GET RID OF LOW TWO BYTES    @XA16800
NOSHIFT  SLA   R0,1                MULTIPLY R0 BY 2            @XA16800
         BCTR  R0,0                DECR LOOP COUNTER BY ONE    @XA16800
         SR    R5,R5               CLEAR R5                    @XA16800
         SRDL  R4,4                SHIFT SIGN INTO R5          @XA16800
         SRL   R5,28               PLACE IN LOW ORDER POS.     @XA16800
         STC   R5,CHKBYT           STORE IN CHECK BYTE         @XA16800
         CLI   CHKBYT,X'0A'        LAST 4 BITS HIGHER THAN 9   @XA16800
         BL    NOTPKD              INVALID                     @XA16800
         SR    R5,R5               CLEAR R5                    @XA16800
CHKDEC1  DS    0H                                              @XA16800
         SRDL  R4,4                CHECK 4 BITS AT A TIME      @XA16800
         SRL   R5,28               PLACE IN LOW ORDER POS.     @XA16800
         STC   R5,CHKBYT           STORE IN CHECK BYTE         @XA16800
         CLI   CHKBYT,X'09'        SEE IF VALID                @XA16800
         BH    NOTPKD              NOT VALID                   @XA16800
         SR    R5,R5               CLEAR R5                    @XA16800
         BCT   R0,CHKDEC1          CHECK NEXT BITS             @XA16800
         B     NORMRET             NORMAL RETURN               @XA16800
NOTPKD   LA    R15,4               BAD RETURN CODE             @XA16800
NORMRET  LM    R4,R5,CHKDECSV      RESET REGISTERS FOR RETURN  @XA16800
         L     R1,SAVERDE          RESTORE RDE POINTER         @XA16800
         BR    R14                 RETURN TO CALLER            @XA16800
CHKDECSV DS    2F                  REGISTER SAVE AREA          @XA16800
CHKDECWA DC    F'0'                TEMP WORK AREA              @XA16800
CHKBYT   DC    X'00'               TEMP WORK AREA              @XA16800
         EJECT                                                 @XA16800
***********************************************************************
*                                  END OF DAY RECORD
*                                  *
***********************************************************************
*
EOD      LR    R5,R9               LENGTH OF DAY =
         S     R5,STRTIME          TIME MINUS START TIME
         A     R5,ELAPTIME         PLUS ELAPSED TIME
         ST    R5,ELAPTIME         SAVE ELAPSED TIME
         ST    R9,STRTIME          NO STARTING TIME BECOMES TIME
         NI    SW,XFD               CLEAR START TIME STORED    @XA16800
         B     READ                GO GET NEXT RECORD
*
         EJECT
**********************************************************************
*  END OF IPL REPORT PROCESSING:  PRODUCE FOOTINGS                   *
*                                 PRINT IPL CLUSTER TABLE            *
**********************************************************************
*
WRAPUP   OC    SEQNO(N4),SEQNO     ANY IPL RECORDS
         BZ    NOIPLS              BRANCH--NO
         L     R5,CURRTIME          CURRENT TIME               @XA16800
         S     R5,FRSTTIME          MINUS FIRST TIME           @XA16800
         BNH   WRAPUPB              TESTED FOR PLUS VALUE      @XA16800
         ST    R5,FRSTTIME          AND SAVED IF PLUS          @XA16800
         L     R5,CURRTIME         LAST RECORD TIME
         S     R5,STRTIME          MINUS START TIME
         BNM   WRAPUPA              TEST FOR NEG. TIME         @XA16800
WRAPUPB  OI    SW1,X80              SET SW1 BIT FOR ABBR RPT   @XA16800
         B     WRAPUPC                                         @XA16800
WRAPUPA  DS    0H                   ADD ELAPSED TIME           @XA16800
         A     R5,ELAPTIME         ADD ELAPSED TIME
         ST    R5,ELAPTIME         NEW ELAPSED TIME
         SPACE 1
         MVI   PRT,SPACE2          DOUBLE SPACE
         LH    R6,LINES            LINE COUNT
         LA    R6,N5(R6)           ADD IN 5 FOR CLOSING
         CH    R6,MAXLINCT         WILL IT FIT
         BL    WRAPUP1             BRANCH--YES
         MVI   PRT,SKIP            EJECT TO NEXT PAGE
         SR    R6,R6               ZERO LINE COUNT
WRAPUP1  STH   R6,LINES            SAVE LINE COUNT
WRAPUPC  TM    SW1,X80              TEST FOR ABBR REPORT       @XA16800
         BZ    WRAPUP2A             O.K. FOR STD REPORT        @XA16800
         MVC   RPTFTLN3(N77),FOOTLIN3       ABBR REPORT MSG    @XA16800
         BAL   R14,PRINT            PRINT IT                   @XA16800
         TM    SW1,X10             TEST WNLNOTE SW             @XA16800
         BNO   WRAPUPD             BRANCH TO SKIP              @XA16800
         MVC   RPTFTLN3(N50),WNLNOTE1    MOVE IN MSG           @XA16800
         BAL   R14,PRINT           PRINT                       @XA16800
WRAPUPD  EQU   *                                               @XA16800
         MVI   PRT,SKIP             EJECT TO NEXT PAGE         @XA16800
         B     WRAPUPED             PHASE 1 DONE               @XA16800
WRAPUP2A DS    0H                                              @XA16800
         SPACE 1
* CHECK FOR CLUSTER TABLE PROCESSING
         TM    SW,X40              CHECK CLUSTER
         BZ    WRAPUP2             NO-BYPASS
         L     R7,SEQINDX          SEQ TABLE POINTER
         L     R5,IPLINDX          IPL LOW POINTER
         MVC   LOWSEQ(N2),IPLSEQ2  LOW CLUSTER TO SEQ TABLE
         L     R5,IPLHIDX          IPL HIGH POINTER
         MVC   HISEQ(N2),IPLSEQ2   HI CLUSTER TO SEQ TABLE
         LA    R7,N4(R7)           UPDATE SEQ POINTER
         ST    R7,SEQINDX          SAVE IT
         SPACE 1
WRAPUP2  MVC   RPTFTNOT(N56),FOOTLIN1 PRODUCE NOTE
         BAL   R14,PRINT           GO PRINT LINE
***********************************************************************
*  ROUTINE TO PRINT IPL CLUSTER REPORT                                *
***********************************************************************
         CLC   CCCLUST(N2),BLANKS  TEST FOR CLUSTER REQUEST
         BE    NOCLUST             BRANCH--NOT REQUESTED
         MVC   FOOTIPL(N2),CCCLUST PRINT CLUSTER SPAN
         MVI   PRT,SPACE2          DOUBLE SPACE
         LA    R7,SEQTAB           SEQ TABLE BASE
         LA    R4,N1               START GROUP CT AT ONE
         L     R5,SEQINDX          LAST ENTRY IN SEQ TABLE
         OC    HISEQ(N2),HISEQ     ANY IPL CLUSTERING
         BZ    NOCLUST             BRANCH--NONE PRESENT
CLUST1   MVC   RPTFTLN3(N49),FOOTLIN4 CLUSTER PRINT HEADING
         BAL   R14,PRINT           PRINT LINE
         MVI   PRT,SPACE2          DOUBLE SPACE
CLUST2   CVD   R4,BWORK            COUNT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         UNPK  FOOTGRUP(N2),BWORK6(N2) REPORT AREA
         LH    R3,LOWSEQ           LOW SEQ #
         CVD   R3,BWORK            CONVERT IT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         UNPK  LOWCLUST(N2),BWORK6(2) REPORT AREA
         LH    R3,HISEQ            HIGH SEQ #
         CVD   R3,BWORK            CONVERT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         UNPK  HICLUST(N2),BWORK6(N2) REPORT AREA
         MVC   RPTGROUP(N16),FOOTLIN5 REPORT TO PRINT
         BAL   R14,PRINT           PRINT LINE
         LA    R7,N4(R7)           UPDATE SEQ
         LA    R4,N1(R4)           NEXT GROUP
         CR    R7,R5               IS THIS THE LAST ENTRY
         BE    NOCLUST             BRANCH--ALL DONE
         LH    R6,LINES            LINE CT
         LA    R6,N1(R6)           ADD ONE
         STH   R6,LINES            SAVE LINE CT
         CH    R6,MAXLINCT         WILL IT FIT
         BL    CLUST2              BRANCH--YES
         XC    LINES(N2),LINES     ZERO COUNT
         MVI   PRT,SKIP            NEXT PAGE
         B     CLUST1              REDO HEADING
***********************************************************************
*   LOST TIME SUMMARY REPORT                                          *
***********************************************************************
NOCLUST  LH    R6,LINES            LINE CT
         LA    R6,N25(R6)          ADD 25 LINES
         STH   R6,LINES            SAVE LINE CT
         CH    R6,MAXLINCT         WILL IT FIT
         BL    WRAPUP3             BRANCH--YES
         XC    LINES(N2),LINES     ZERO LINE CT
         MVI   PRT,SKIP            EJECT
WRAPUP3  TM    SW1,X01             TEST TO BYPASS LOST SUMMARY @XA16800
         BZ    WRAPUP3A            NO  DO IT                   @XA16800
         MVI   PRT,SKIP            YES BUT SKIP TO NEW PAGE    @XA16800
         B     WRAPUPED            PHASE 1 PORTION COMPLETE    @XA16800
WRAPUP3A MVC   RPTLTSUM(N17),SUMHEAD  LOST TIME SUMMARY HEADING@XA16800
         MVI   PRT,SPACE3          TRIPLE SPACE
         BAL   R14,PRINT           PRINT IT
         MVC   RPTLTSM1(N60),SUMHEAD1 MORE HEADING
         MVI   PRT,SPACE2          DOUBLE SPACE
         BAL   R14,PRINT           PRINT IT
         MVC   RPTLTSM2(N54),SUMHEAD2 LAST HEADING
         BAL   R14,PRINT           PRINT IT
         MVI   PRT,SPACE2          DOUBLE SPACE
         LA    R8,IPLLOST          LOST TIME LABELS
WRAPUP4  LA    R1,RPTLTHR1         REPORT POSITION HOURS
         LA    R7,RPTLTCT1         REPORT POSITION CT
         SR    R4,R4               CLEAR
         SR    R5,R5               REGS
         IC    R4,N0(R8)           SUMMARY OFFSET
         IC    R5,N1(R8)           LABEL LENGTH
         EX    R5,MOVLSTLB         LABEL TO REPORT
         LA    R8,N3(R8,R5)        UPDATE LABEL PTR
         SR    R5,R5               CLEAR
         SR    R6,R6               REGS
WRAPUP5  L     R2,LOSTSUM(R4)      ENTRY
         LTR   R2,R2               ZERO
         BZ    WRAPUP6             BRANCH--YES BYPASS
         L     R2,LOSTTIME(R4)     LOST TIME
         AR    R5,R2               SAVE FRO TOTAL
         BAL   R14,PRINTIME        PLACE TIME IN REPORT
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         L     R2,LOSTSUM(R4)      LOST COUNT
         AR    R6,R2               SAVE FOR TOTAL
         CVD   R2,BWORK            CONVERT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         MVC   N0(N4,R7),EDITSEQ   PATTERN
         ED    N0(N4,R7),BWORK6    PLACE CT IN REPORT
WRAPUP6  LA    R4,N32(R4)          NEXT ENTRY
         LA    R1,N20(R1)          REPORT POINTER
         LA    R7,N20(R7)          REPORT POINTER
         LA    R2,N64              LAST ENTRY IN TABLE
         CR    R4,R2               ARE WE THERE
         BL    WRAPUP5             BRANCH--NO CONTINUE
         LA    R2,N31(R2)          UPDATE AGAIN
         CR    R4,R2               ABOVE THE END
         BH    WRAPUP7             BRANCH--YES
         ST    R5,LOSTTIME(R4)     STORE TIME FOR TOTAL
         ST    R6,LOSTSUM(R4)      STORE COUNT FOR TOTAL
         B     WRAPUP5             DO TOTAL
WRAPUP7  BAL   R14,PRINT           PRINT LINE COMPLETED
         CLI   N0(R8),XFF          SUMMARY FINISHED
         BNE   WRAPUP4             BRANCH--NO
         MVC   RPTLTSM1(N5),TOTALLAB LABEL TO REPORT
         MVI   PRT,SPACE2          DOUBLE SPACE
         LA    R1,RPTLTHR1         REPORT AREA
         LA    R8,RPTLTCT1         REPORT AREA
         SR    R4,R4               CLEAR
WRAPUP10 LA    R7,N4               SET INDEX TO FOUR
         SR    R2,R2               CLEAR
         SR    R3,R3               REGS
WRAPUP11 L     R5,LOSTTIME(R4)     LOST TIME
         AR    R2,R5               TOTAL IT
         L     R5,LOSTSUM(R4)      LOST CT
         AR    R3,R5               TOTAL IT
         LA    R4,N8(R4)           NEXT
         BCT   R7,WRAPUP11         ENTRY
         ST    R2,LOSTTOT          STORE LOST TOTAL
         CVD   R3,BWORK            CONVERT CT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         MVC   N0(N4,R8),EDITSEQ   PATTERN
         ED    N0(N4,R8),BWORK6    PLACE CT IN REPORT
         BAL   R14,PRINTIME        PLACE TIME IN REPORT
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         LA    R1,N20(R1)          REPORT POINTER
         LA    R8,N20(R8)          REPORT POINTER
         LA    R2,N64              HIGH SUMMARY ENTRY
         CR    R4,R2               FINISHED
         BNH   WRAPUP10            BRANCH--NO CONTINUE
         BAL   R14,PRINT           PRINT LINE WHEN DONE
         MVI   PRT,SPACE2          DOUBLE SPACE
         MVC   FOOTDATE(N7),DTPATRN DATE PATTERN
         ED    FOOTDATE(N7),SAVEDAT1 PLACE IN REPORT
         MVC   RPTFTLN1(N29),FOOTLIN2 PLACE IN REPORT
         BAL   R14,PRINT           PRINT IT
         MVI   PRT,SPACE2          DOUBLE SPACE
         MVC   RPTLTFT1(N12),TOTALLAB TOTAL TIME
         LA    R1,RPTLTFT2         REPORT AREA
         L     R2,FRSTTIME          LOAD R2 FOR PRINT          @XA16800
         BAL   R14,PRINTIME        EQUALS TOTAL TIME
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         BAL   R14,PRINT           PRINT IT
         MVC   RPTLTFT1(N14),PROCTM PROCESS TIME
         LA    R1,RPTLTFT2         REPORT AREA
         L     R2,ELAPTIME         PROCESS TIME
         CLC   ELAPTIME(N4),FRSTTIME ELAPSED TIME TO TOTAL TIME
         BL    WRAPUP12            BRANCH -ELAPSED LOW
         S     R2,LOSTTOT          SUBTRACT LOST TIME
         ST    R2,ELAPTIME         NEW PROCESS TIME
WRAPUP12 BAL   R14,PRINTIME        PRINT IT
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         BAL   R14,PRINT           PRINT IT
         SR    R4,R4               CLEAR
         L     R5,ELAPTIME         PROCESS TIME
         LTR   R5,R5                TEST FOR NEG ELAPTIME      @XA16800
         BP    WRAPUP13             POSITIVE                   @XA16800
         L     R4,ALLONES           NEGATIVE                   @XA16800
WRAPUP13 DS    0H                                              @XA16800
         D     R4,SEQNO            SECONDS/IPL
         MVC   RPTLTFT1(N22),AVRUNTIM AVERAGE RUN TIME
         LA    R1,RPTLTFT2         REPORT AREA
         LR    R2,R5               TIME
         LTR   R5,R5                TEST AVG RUNTIME FOR NEG.  @XA16800
         BM    WRAPUP14             YES IT IS NEG              @XA16800
         BAL   R14,PRINTIME        PLACE TIME IN REPORT
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         BAL   R14,PRINT           PRINT IT
         B     WRAPUP15                                        @XA16800
WRAPUP14 LCR   R2,R5                LOAD COMPL OF RUN TIME     @XA16800
         BAL   R14,PRINTIME         PRINT NEG RUN TIME AMT     @XA16800
         MVC   N7(N3,R1),NEGIND     INDICATE NEG RUN TIME      @XA16800
         BAL   R14,PRINT            PRINT IT                   @XA16800
WRAPUP15 DS    0H                                              @XA16800
         MVC   RPTLTFT1(N22),PRODAV PRODUCT AVAIL.
         L     R3,ELAPTIME         PROCESS TIME
         M     R2,ONEHUND          MULT BY 100
         D     R2,FRSTTIME         TOTAL TIME
         CVD   R3,BWORK            CONVERT PERCENT TO DECIMAL
         OI    BWORK7,X0F          ZONE
         MVC   RPTLTFT3(N4),MNPATRN PATTERN
         ED    RPTLTFT3(N4),BWORK6 PLACE IN REPORT
         BAL   R14,PRINT           PRINT IT
         MVC   RPTLTFT1(N19),AVLOSTTM AVERAGE LOST TIME
         LA    R1,RPTLTFT2         REPORT AREA
         L     R3,LOSTTOT          TOTAL LOST TIME
         SR    R2,R2               CLEAR
         D     R2,SEQNO            NUMBER OF IPLS
         LR    R2,R3               LOST TIME / IPL
         BAL   R14,PRINTIME        PLACE IT IN REPORT
         MVC   N7(N3,R1),BLANKS    BLANK OUT SECONDS
         BAL   R14,PRINT           PRINT IT
         MVC   RPTFTLN2(N66),WARNLINE WARNING USE EOD
         MVI   PRT,SPACE2          DOUBLE SPACE
         BAL   R14,PRINT           PRINT IT
*WRAPUPED: ;                                               /*@Z427VLS*/
WRAPUPED DS    0H                                                  0073
*GENERATE;                                                 /*@Z427VLS*/
*
         MVI   PRINTER,C'0'        INDICATE EREPPT DATA SET OUTPUT
         XC    LINES(N2),LINES     ZERO OUT LINE COUNT         @XA21049
         B     PHS2PRT             GO PRINT PHASE 2 REPORT
*
*
MOVLSTLB MVC   RPTLTSM1(N0),N2(R8) EX-MOVE LOST TIME LABEL
*
         EJECT
***********************************************************************
*          THE PRINT ROUTINE PRINTS A LINE CLEARS PRINT AREA          *
*              AND RETURNS TO THE REQUESTOR                           *
*        EXIT    R14  RETURN ADDRESS                                  *
***********************************************************************
*
PRINT    ST    R14,SAVERET         SAVE RETURN POINTER
         CLI   PRT,SKIP            EJECT TO NEW PAGE
         BNE   NOEJECT
*        PRINTADR = ADDR(ELINE);                           /*@Z427VLS*/
         L     @15,SAVER2                                          0074
         LA    @14,ELINE                                           0074
         ST    @14,PRINTADR(,@15)                                  0074
*        R2 = SAVER2;                                      /*@Z427VLS*/
         LR    R2,@15                                              0075
*        CALL  IOHND(RITEPRTR);                            /*@Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0076
         LA    @01,@AL00076                                        0076
         BALR  @14,@15                                             0076
*GENERATE;                                                 /*@Z427VLS*/
         BAL   R14,SPCNCNT         SPACE AND COUNT 1 LINE      @XA21049
NOEJECT  CLI   PRT,SPACE2          SPACE TWO LINES
         BNE   NOSP2               NO, BYPASS
*        PRINTADR = ADDR(LINETWO);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0078
         LA    @14,LINETWO                                         0078
         ST    @14,PRINTADR(,@15)                                  0078
*        R2 = SAVER2;                                      /*@Z427VLS*/
         LR    R2,@15                                              0079
*        CALL IOHND(RITEPRTR);                             /*@Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0080
         LA    @01,@AL00080                                        0080
         BALR  @14,@15                                             0080
*GENERATE;                                                 /*@Z427VLS*/
         BAL   R14,SPCNCNT         SPACE AND COUNT 1 LINE      @XA21049
NOSP2    CLI   PRT,SPACE3          SPACE THREE LINES
         BNE   NOSP3               NO, BYPASS
*        PRINTADR = ADDR(LINETHR);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0082
         LA    @14,LINETHR                                         0082
         ST    @14,PRINTADR(,@15)                                  0082
*        R2 = SAVER2;                                      /*@Z427VLS*/
         LR    R2,@15                                              0083
*        CALL IOHND(RITEPRTR);                             /*@Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0084
         LA    @01,@AL00084                                        0084
         BALR  @14,@15                                             0084
*GENERATE;                                                 /*@Z427VLS*/
         BAL   R14,SPCNCNT         SPACE AND COUNT 1 LINE      @XA21049
NOSP3    EQU  *
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0086
         LA    @14,PRINTER                                         0086
         ST    @14,PRINTADR(,@15)                                  0086
*        R2 = SAVER2;                                      /*@Z427VLS*/
         LR    R2,@15                                              0087
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0088
         LA    @01,@AL00088                                        0088
         BALR  @14,@15                                             0088
*GENERATE REFS(LOGCODE,PRINTADR,IPLREAS,IPLSYSID,IPLTEMP,IPLSTIME, 0089
*              IPLSDATE);                                 /* @XA16800*/
         MVI   PRT,X'09'           SKIP TO NEXT LINE
         MVI   PRT+1,X40           BLANK
         MVC   CTLCRLIN+1(N119),PRT+1  PRINT BUFFER
         L     R14,SAVERET         RETURN POINTER
         BR    R14                 RETURN
         EJECT
*
***********************************************************************
*     THIS ROUTINE PRODUCES THE IPL REASON DESCRIPTION FOR THE IPL    *
*     REPORT.                                                         *
*                EXIT :    REPORT AREA WILL CONTAIN IPL REASON        *
*                          DESCRIPTION ASSOCIATED WITH THE IPL REASON *
*                          CODE FROM THE IPL RECORD OR  UN-UNKNOWN.   *
***********************************************************************
*
LOOKDESC SR    R5,R5               REG 5  WORK REG
         LA    R4,IPLDESC          ADDR OF IPL DESC TABLE IN R4
         MVC   RPTREA(N10),REAUN1  ASSUME AN UNKNOWN IPL DESC
         MVI   IPLTEMP(R1),X08     LOST TIME IND. - UNKNOWN
TABLITEM IC    R5,0(R4)            GET LENGTH OF DESC IN R5
         CLC   N2(N2,R4),IPLREAS(R1)   COMPARE TABLE ITEM TO RECORD
         BE    FOUNDREA            EQ COND ITEM FOUND
         CLI   N0(R4),XFF          END OF TABLE
         BE    LOOKSUB             YES GO PRODUCE UNKNOWN VALUE
         LA    R4,N3(R4,R5)        INCREMENT TO NEXT ENTRY
         B     TABLITEM            GO CHECK NEXT ITEM IN THE TABLE
FOUNDREA EX    R5,MOVEDESC         MOVE DESC OR UNKNOWN TO RPT
         MVC   IPLTEMP(N1,R1),N1(R4) SAVE LOST TIME INDICATOR
         SPACE 3
***********************************************************************
*     THIS ROUTINE PRODUCES THE SUB-SYSTEM DESCRIPTION FOR IPL REPORT
*     EXIT :   REPORT AREA WILL CONTAIN THE SUB-SYSTEM DESC. ASSOCIATED
*              WITH THE SUB-SYSTEM CODE IN IPL RECORD OR UNKNOWN.
***********************************************************************
*
LOOKSUB  SR    R5,R5               SUB-SYSTEM DESC LENGTH
         LA    R4,SUBTABLE         GET START ADDR OF TABLE
         MVC   RPTSUB(N7),IPLNUL   ASSUME 00-NULL
SUBITEM  IC    R5,N1(R4)           GET LENGTH
         CLC   N0(N1,R4),IPLSYSID(R1)  COMP SUB-SYS TABLE CODE TO RCD
         BE    FOUNDSUB            EQ COND GO PRODUCE DESC
         CLI   0(R4),X'FF'         IS IT END OF TABLE
         BE    LOOKLOST            YES PRODUCE UNKNOWN DESC
         LA    R4,N3(R4,R5)        INCREMENT TO NEXT ENTRY
         B     SUBITEM             CHECK NEXT CODE IN TABLE
FOUNDSUB EX    R5,MOVESUB          MOVE SUB-SYS DESC TO RPT AREA
         EJECT
***********************************************************************
*    THIS ROUTINE PRODUCES THE LOST TIME REPORT FOR THE IPL REPORT    *
*         EXIT: REPORT AREA WILL CONTAIN THE LOST TIME AND ITS        *
*               CATEGORY -MAINT.,IBM RESP.,OTHER,OR IDLE.             *
***********************************************************************
*
LOOKLOST TM    LOGCODE(R1),X80     LOST TIME DATA IN RECORD-DATE
         BO    LOOKLST1            MVS RECORD WITH TIME STAMP  @XA19764
         OI    SW1,X01             SET SW FOR NON-MVS RECORD   @XA16800
         B     NOTAVAIL            PRINTS NOT AVAILABLE FOR NON-MVS
LOOKLST1 EQU   *                                               @XA16800
         SR    R5,R5               CLEAR R5
         LA    R4,IPLLOST          LOST TIME CATEGORY TABLE
CATITEM  IC    R5,N1(R4)           GET LENGTH
         CLC   N0(N1,R4),IPLTEMP(R1) COMPARE FOR CATEGORY IND.
         BE    FOUNDCAT            BRACNH-FOUND
         CLI   N0(R4),XFF          END OF TABLE
         BE    NOTAVAIL            NOT AVAILABLE
         LA    R4,N3(R4,R5)        INCREMENT TO NEXT ENTRY
         B     CATITEM             TRY AGAIN
FOUNDCAT EX    R5,MOVECAT          MOVE CATEGORY TO REPORT
         IC    R5,N0(R4)           SAVE OFFSET
         CLC  FULLZERO(N4),IPLSDATE(R1)    IS DATE ZERO        @XA16800
         BE    MVSNODTE            ZERO - NOT AVAILABLE        @XA16800
         ST    R14,SAVER14         SAVE RETURN ADDRESS
         LA    R2,IPLSDATE(R1)  GO EDIT AND CONVERT THE LOST   @XA16800
         LA    R0,4                SET # BYTES TO CHK IN PACK  @XA16800
         LA    R1,IPLSDATE(R1)     SET ADDR OF PACK DEC FIELD  @XA16800
         BAL   R14,CHKDEC          GO CHK FOR VALID PCK DEC FLD@XA16800
         LTR   R15,R15             IS THIS A VALID PCK DEC FLD @XA16800
         BZ    OKIPLDT             YES--OK IPL DATE            @XA16800
         B     IPLNOTE1            TIME STAMP HAS INVALID DATA @XA16800
OKIPLDT  EQU   *                                               @XA16800
         BAL   R14,CONVDATE        TIME DATE TO SECONDS
         LA    R2,IPLSTIME(R1)     GO EDIT AND CONVERT THE LOST
         BAL   R14,CONVTIM1        TIME TIME TO SECONDS
         LTR   R9,R9                                           @XA16800
         BZ    IPLNOTE1            TIME STAMP RESULTS IN ZERO VALUE
         CLI   IPLSYSID(R1),X8F    HARDWARE/SOFTWARE
         BNH   LSTTIME             HARDWARE
         LA    R5,N32(R5)          SOFTWARE OFFSET
LSTTIME  L     R2,CURRTIME         CURRENT TIME
         CR    R2,R9               COMPARE TIMES
         BH    OKTIME              OUTAGE OK
         B     IPLNOTE1            TIME STAMP CAUSES NEGATIVE LOST TIME
OKTIME   SR    R2,R9               LOST TIME
         L     R9,LOSTTIME(R5)     LOST TIME SUMMARY
USEZERO  AR    R9,R2               ADD IN THIS RECORD
         ST    R9,LOSTTIME(R5)     SAVE IT
         L     R9,LOSTSUM(R5)      LOST TIME COUNT
         LA    R9,N1(R9)           ADD ONE
         ST    R9,LOSTSUM(R5)      SAVE IT
         LA    R1,RPTLOST          PRINT POSITION
         BAL   R14,PRINTIME        SET TIME FOR PRINT
         L     R14,SAVER14         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 1
IPLNOTE1 MVC   RPTLOST(N10),WNLNOTE    SET WARNING FOR PRINT   @XA16800
         OI    SW1,X90             SET ABBR RPT AND WNLNOTE SW @XA16800
         MVI   PRT7,C'*'           SET ERROR                   @XA16800
         MVI   PRT8,C'*'           INDICATOR                   @XA16800
         L     R14,SAVER14         RESTORE RETURN ADDRESS      @XA16800
         BR    R14                 RETURN                      @XA16800
MVSNODTE MVI   PRT7,C'*'           SET ERROR                   @XA16800
         MVI   PRT8,C'*'           INDICATOR                   @XA16800
         OI    SW1,X80             SET ABBR RPT INDICATOR      @XA16800
NOTAVAIL MVC   RPTLOST(N13),NOAVA
         BR    R14                 RETURN
*
MOVECAT  MVC   RPTCAT(N0),N2(R4)   EX-MOVE CATEGORY
*
MOVEDESC MVC   RPTREA(N0),N2(R4)   EX-MOVE IPL REASON CODE
*
MOVESUB  MVC   RPTSUB(N0),N2(R4)   EX-MOVE SUB-SYSTEM TO REPORT
         EJECT
***********************************************************************
*    THIS ROUTINE CONVERTS A JULIAN DATE TO SECONDS SINCE 1960        *
*                                                                     *
*        AT ENTRY :  R2 MUST CONTAIN THE ADDRESS OF THE DATE          *
*                    FIELD TO BE CONVERTED.                           *
*        EXIT :      R9  CONTAINS ANSR IN SECONDS SINCE 1960.         *
*                    R15 CONDITION CODE  0 = GOOD, 4 = ERROR          *
***********************************************************************
PACKHEX  XR    R9,R9               CLEAR
         LA    R15,N4              SET DATE IS BAD.
PACKHEX1 CLI   N0(R2),XEF          VERFIY THAT
         BCR   13,R14              NOT-HIGH, THE DATE FIELD
         CLI   N0(R2),XF9          BEING PASSED
         BCR   2,R14               HIGH-IS NUMBERIC
         C     R9,CONST4           ALL DONE
         BE    PACKIT              YES
         LA    R9,N1(R9)           ADD ONE
         LA    R2,N1(R2)           NEXT CHARACTER
         B     PACKHEX1            DO IT
PACKIT   SR    R2,R9               SET ADDRESS BACK
         PACK  JULIAN(N4),N0(N5,R2) PACK INTO WORK AREA
         B     CONVPACK            CONTINUE
CONVDATE SR    R9,R9               CLEAR
         MVC   JULIAN(N4),N0(R2)   MOVE PACKED DATE TO WORK.
CONVPACK IC    R9,JULIAN1          MOVE YEARS TO REGISTER,
         SLA   R9,N4               SHIFT LEFT AND
         STC   R9,PACKYR1          STORE UNITS OF YEAR,
         SRA   R9,N8               SHIFT RIGHT AND
         STC   R9,PACKYR           STORE TENS OF YEAR,
         OI    PACKYR1,X0F         THEN SET SIGN.
         NI    JULIAN1,X00         ZERO OUT YEAR.
         XC    BWORK(N4),BWORK     CLEAR HIGH ORDER
         CVB   R2,BWORK            CONVERT DAYS ONLY TO BINARY
         MVC   JULIAN2(N2),PACKYR  MOVE YEAR.
         CVB   R9,BWORK            CONVERT YEAR TO BINARY.
         S     R9,SIXTY            SUBTRACT 60 YEARS.
         LTR   R9,R9
         BCR   4,R14               MINUS-BR IF DATE PRIOR TO 1960.
         BZ    ALLDAYS             BR IF 1960.
         XR    R8,R8
         M     R8,DAYSYR           MULTIPLY YEARS BY 365.
         AR    R2,R9               AND ADD TO DAYS.
         CVB   R9,BWORK            CONVERT YEAR TO BINARY.
         S     R9,SIXTY            SUBTRACT 60 YEARS.
         D     R8,CONST4           DIVIDE BY FOUR
         AR    R2,R9               AND ADD TO DAYS.
ALLDAYS  LR    R9,R2               MOVE TOTAL DAYS TO REG. 9.
         XR    R8,R8               MULTIPLY DAYS BY SECONDS
         M     R8,TWENFOUR         PER/DAY - RESULT IN R9
         XR    R15,R15             SET DATE IS O.K.
         BR    R14                 AND RETURN TO CALLER.
         EJECT
**********************************************************************
*   THIS ROUTINE CONVERTS THE TIME FIELD IN THE RDE RECORD TO SEC.   *
**********************************************************************
*
CONVTIME LA    R2,LRTTIME(R1)      STANDARD TIME FIELD
CONVTIM1 MVC   WORKTIME(N4),N0(R2) MOVE INTO WORK AREA
         TR    WORKTIME(N4),HEXTOBIN CONVERT HEX TO BINARY
         SR    R2,R2               CLEAR R2
         SR    R3,R3               CLEAR R3
         IC    R3,LOGHRS           INSERT HRS IN R3
         M     R2,THRTYSIX         CONVERT HRS TO SEC
         AR    R9,R3               ADD TO TOTAL TIME
         SR    R3,R3
         IC    R3,LOGMIN           MULTIPLIER  IN R3
         M     R2,SIXTY            CONVERT MIN TO SEC
         AR    R9,R3               ADD SEC TO TOTAL TIME
         SR    R3,R3               CLEAR R3
         IC    R3,LOGSEC           GET SEC
         AR    R9,R3               ADD SEC TO TOTAL TIME
         BR    R14                 RETURN
*
         EJECT
***********************************************************************
*        THIS ROUTINE PRODUCES PRINTABLE TIME IN THE FORM HH.MM.SS    *
*        FROM SECONDS.                                                *
*        ENTRY: R1 ADDRESS OF THE REPORT AREA                         *
*               R2 TIME IN SECONDS                                    *
*        EXIT : REPORT AREA WILL CONTAIN TIME READY FOR PRINT         *
***********************************************************************
*
PRINTIME STM   R8,R9,REGSAVE       SAVE REGS
         LR    R3,R2               TIME IN SECONDS
         XR    R2,R2               CLEAR
         D     R2,SIXTY            DIVIDE BY SIXTY
         CVD   R2,BWORK            SECONDS TO DECIMAL
         LH    R8,BWORK6           SECONDS
         SRDL  R8,N12              POSITIONED
         XR    R2,R2               CLEAR
         D     R2,SIXTY            DIVIDE BY SIXTY
         CVD   R2,BWORK            MINUTES TO DECIMAL
         LH    R8,BWORK6           MINUTES
         SRL   R8,N4               POSITIONED
         SRDL  R8,N8
         CVD   R3,BWORK            HOURS TO DECIMAL
         LH    R8,BWORK6           HOURS
         SRL   R8,N4               POSITIONED
         SRDL  R8,N12
         O     R9,CONSTF           ZONE
         ST    R9,BWORK            STORE IT IN WORK AREA
         MVC   N0(N10,R1),LSPATRN  PATTERN
         ED    N0(N10,R1),BWORK    EDIT
         LM    R8,R9,REGSAVE       RESTORE REGS
         BR    R14                 RETURN
*
*
HEXTOBIN DS    0CL90
         DC    XL25'000102030405060708090000000000000A0B0C0D0E0F101112'
         DC    XL25'130000000000001415161718191A1B1C1D0000000000001E1F'
         DC    XL25'202122232425262700000000000028292A2B2C2D2E2F303100'
         DC    XL15'000000000032333435363738393A3B' CONV. TABLE
*
         EJECT
***********************************************************************
*    PHASE 2 BEGINS HERE. PHASE 2 COUNTS SIS  AND SRIS  USING THE     *
*    BASIC 10 MIN. RULE, 30 MINUTE RULE, AND SI 10 MIN. RULE.         *
***********************************************************************
*
RDEPH2   CLI   PH2INCID,X'02'      IS LAST INCIDENT SRI
         BL    PH2SI               BR IF SI.
         BH    PH2IPL              IF IPL.
         BAL   P2RETURN,SRCHSRI    GO SEARCH SRI-SI TABLE ON DEV-CUA.
         TM    PH2SWS,X40+X20      FIND IN TABLE OR IS TABLE FULL
         BNE   SRIINTAB             BR IF NO                   @XA16800
         MVC   N0(N8,R3),PH2DEV    MOVE DEV-CUA-TIME TO TABLE
         MVC   N8(N4,R3),FULLZERO  AND SET SI-SRI COUNTS TO ZERO.
         MVC   PH2LSRI(N12),PH2DEV SAVE THIS SRI IN LAST SRI HOLD.
         B     READ                BRANCH TO READ
SRIINTAB L     R5,N4(,R3)          LOAD TIME OF THE TABLE SRI.
         LTR   R5,R5               TEST TIME FOR ZERO.
         L     R4,PH2TIME          LOAD TIME OF THIS SRI.
         SR    R4,R5               FIND TIME SINCE TABLE SRI.
         L     R5,MIN10            LOAD 10 MIN. OF SECONDS.
         CR    R4,R5               IS ELAPSED TIME GREATER THAN 10 MIN.
         BL    SRIUTIME            IF NO, UPDATE TIME AND RETURN.
         LH    R4,N8(,R3)          LOAD SRI COUNT,
         LA    R4,N1(,R4)          ADD 1,
         STH   R4,N8(,R3)          AND MOVE BACK TO TABLE.
SRIUTIME MVC   N4(N4,R3),PH2TIME   SET TABLE TIME TO THIS SRI.
         MVC   PH2LSRI(N12),PH2DEV SAVE THIS SRI IN LAST SRI HOLD.
         B     READ               RETURN TO PHASE 1.
         EJECT
***********************************************************************
*    COME HERE IF RECORD FROM PHASE 1 IS AN SI.                       *
*      ROUTINE TESTS FOR SI 10 MINUTE RULE AND COUNTS SI IF REQUIRED. *
*      NOTE: THE SI 10 MINUTE RULE IS APPLIED ONLY IF AN SI-IPL       *
*            COMBINATION HAS OCCURRED WITHIN THE LAST 10 MINUTES.     *
***********************************************************************
*
PH2SI    TM    PH2SWS,X80          IS SI-IPL SWITCH ON
         BNO   PH2SITAB            BR IF NO.
         NI    PH2SWS,X7F          TURN SI-IPL SWITCH 0FF.
         L     R4,PH2TIME          LOAD THIS SI TIME.
         L     R5,PH2LIPL4         LOAD LAST IPL TIME.
         SR    R4,R5               FIND TIME ELAPSED.
         L     R5,MIN10            LOAD 10 MIN. OF SECONDS.
         CR    R4,R5               ELAPSED TIME GREATER THAN 10 MIN.
         BH    PH2SITAB            BR IF YES.
         BAL   P2RETURN,SRISITO0   GO SET ALL SRI TIMES TO ZERO.
*
PH2SILAS MVC   PH2LSI(N12),PH2DEV  SET LAST SI HOLD TO THIS SI.
         B     READ                RETURN TO PHASE 1.
PH2SITAB BAL   P2RETURN,SRCHSRI    GO SEARCH SRI-SI TABLE ON DEV-CUA.
         TM    PH2SWS,X40+X20      FIND IN TABLE OR TABLE FULL
         BO    SIINTAB             BR IF YES,
         MVC   N0(N4,R3),PH2DEV   MOVE DEV-CUA TO TABLE, SET TIME
         MVC   N4(N8,R3),FULLZERO       ZERO TIME & COUNT
SIINTAB  LH    R4,N10(,R3)         LOAD SI COUNT,
         LA    R4,N1(,R4)             ADD 1,
         STH   R4,N10(,R3)               AND MOVE BACK TO TABLE.
         B     PH2SILAS                    BRANCH TO PH2SILAS
         EJECT
***********************************************************************
*    COME HERE IF RECORD FROM PHASE 1 IS AN IPL.                      *
*      ROUTINE TESTS FOR AN SI-IPL COMBINATION, THE 30 MINUTE RULE,   *
*      AND THE SI 10 MINUTE RULE.                                     *
*      NOTE: AN SRI MAY BE RECLASSIFIED TO AN SI, WHICH RESULTS IN AN *
*            SI-IPL COMBINATION(30 MIN. RULE).                        *
***********************************************************************
*
PH2IPL   LA    R3,SSIDTAB          LOAD ADDR OF SSID CONVERSION TABLE.
         LA    R4,N2               LOAD TABLE ENTRY LENGTH.
         LA    R5,SSIDTABT         LOAD ADDR OF SSID CONVER. TABLE TOP.
PH2IPL1  CLC   PH2SSID,0(R3)       IS SSID IN CONVERSION TABLE
         BE    PH2IPL2             BR IF YES.
         BXLE  R3,R4,PH2IPL1       CLOSE LOOP.
         LA    R3,SSIDTAB          SET TO UNKNOWN.
PH2IPL2  MVC   TEMPSSID,N1(R3)     STORE CONVERTED SSID
         TM    PH2SW,X40           WAS IPL PRECEEDED BY AN SRI
         BZ    PH2IPL20            BR IF NO.
         L     R4,PH2TIME          LOAD THIS IPL TIME.
         L     R5,PH2LSRI4         LOAD LAST SRI TIME.
         SR    R4,R5               FIND DIFFERENCE IN TIME.
         L     R5,MIN30            LOAD 30 MIN. OF SECONDS.
         CR    R4,R5               ELAPSED TIME GREATER THAN 30 MIN.
         BH    PH2IPL7             BR IF YES.
         CLC   PH2REA(N2),REAIE1   REASON CODE 'IE'
         BE    PH2IPL3             BRANCH--YES
         CLC   PH2REA(N2),REAIM1   REASON CODE 'IM'
         BE    PH2IPL3             BRANCH--YES
         CLC   PH2REA(N2),REAUN1   REASON CODE 'UN'
         BE    PH2IPL3             BRANCH--YES
         CLC   PH2REA(N2),REAME1   REASON CODE 'ME'
         BNE   PH2IPL7             BRANCH--NO - NONE OF THEM
PH2IPL3  CLI   PH2SSID,X'00'       IS SSID UNKNOWN
         BE    PH2IPL4             BR IF YES.
         CLC   TEMPSSID,PH2LSRI    IPL SSID SAME AS LAST SRI SSID
         BNE   PH2IPL7             BR IF NO.
         MVC   PH2LSI,PH2LSRI      MOVE LAST SRI TO LAST SI.
         TM    PH2SWS,X80          IS SI-IPL SWITCH ON
         BO    PH2IPL4             BR IF YES.
PH2IPL5  MVC   PH2DEV(N4),PH2LSRI  MOVE SRI DEV-CUA TO LAST INCI.
         BAL   P2RETURN,SRCHSRI    GO SEARCH SRI-SI TABLE ON DEV-CUA.
         LH    R4,N10(,R3)         LOAD SI COUNT,
         LA    R4,N1(,R4)          ADD 1 TO COUNT,
         STH   R4,N10(,R3)         AND MOVE BACK TO TABLE.
         MVC   N4(N4,R3),FULLZERO  ZERO TABLE TIME.
         OI    PH2SWS,X80          TURN SI-IPL SWITCH ONN.
PH2IPL9  BAL   P2RETURN,COUNTSRI   GO COUNT ALL SRIS .
PH2IPL6  MVC   PH2LIPL,PH2DEV      SET LAST IPL TO THIS IPL.
         B     READ                RETURN TO PHASE 1.
PH2IPL4  L     R3,PH2LSRI4         LOAD LAST SRI TIME.
         L     R4,PH2LIPL4         LOAD LAST IPL TIME
         SR    R3,R4               FIND TIME ELAPSED SINCE LAST IPL.
         L     R4,MIN10            LOAD 10 MIN. OF SECONDS.
         CR    R3,R4               ELAPSED TIME GREATER THAN 10 MIN.
         BH    PH2IPL5             BR IF YES.
         BAL   P2RETURN,SRISITO0   GO SET ALL SRI TIMES TO ZERO.
         NI    PH2SWS,X7F          SET SI-IPL SWITCH OFF.
         B     PH2IPL6             GO TO RETURN.
PH2IPL7  NI    PH2SWS,X7F          SET SI-IPL SWITCH OFF.
         MVC   PH2LSI4(N4),PH2TIME SET LAST SI TIME TO THIS IPL
         CLC   PH2REA(N2),REAIE1   REASON CODE 'IE'
         BE    PH2IPL8             BRANCH--YES
         CLC   PH2REA(N2),REAIM1   REASON CODE 'IM'
         BE    PH2IPL8             BRANCH--YES
         CLC   PH2REA(N2),REAUN1   REASON CODE 'UN'
         BE    PH2IPL8             BRANCH--YES
         CLC   PH2REA(N2),REAME1   REASON CODE 'ME'
         BNE   PH2IPL9             BRANCH--NO - NONE OF THEM
PH2IPL8  CLI   TEMPSSID,X'99'
         BE    PH2IPL9             BR IF IBM SOFTWARRE.
         CLI   TEMPSSID,X'10'
         BNE   PH2IPL10            BRANCH IF EQUAL TO PH2IPL10
         MVI   PH2DEV,X04          SET LAST INCI. TO UNKNOWN PROCESSOR.
         MVC   PH2CUA,FULLZERO     SET LAST INCI. CUA TO 0.
         B     PH2IPL12            GO TO COUNT SI.
PH2IPL10 CLI   TEMPSSID,X'00'
         BNE   PH2IPL11            BR IF SSID KNOWN.
         MVI   PH2DEV,X99          SET UNKNOWN
         MVC   PH2CUA,FULLZERO     SUBSYSTEM.
         B     PH2IPL12            GO TO COUNT SI.
PH2IPL11 MVC   PH2DEV,TEMPSSID     SET UNKOWN
         MVC   PH2CUA,ALL9S        UNIT IN PROPER SUBSYSTEM.
PH2IPL12 BAL   P2RETURN,SRCHSRI    GO SEARCH SRI-SI TABLE ON DEV-CUA.
         TM    PH2SWS,X40+X20      FIND IN TABLE OR TABLE FULL
         BO    PH2IPL13            BR IF YES
         MVC   N0(N4,R3),PH2DEV    PUT SI IN TABLE,
         MVC   N4(N8,R3),FULLZERO  ZERO TIME & COUNT
         LA    R4,N1               SET SI COUNT
         STH   R4,N10(,R3)         TO 1.
         B     PH2IPL9             GO TO COUNT SRIS
PH2IPL13 LH    R4,N10(,R3)         LOAD SI COUNT,
         LA    R4,N1(R4)           ADD 1 TO COUNT,
         STH   R4,N10(,R3)         AND PLACE BACK IN TABLE.
         B     PH2IPL9             GO TO COUNT SRIS
PH2IPL20 TM    PH2SW,X80           WAS IPL PRECEEDED BY SI
         BNO   PH2IPL22            BR IF NO.
         OI    PH2SWS,X80          SET SI-IPL SWITCH ON.
         BAL   P2RETURN,COUNTSRI   GO COUNT ALL SRIS .
PH2IPL21 MVC   PH2LIPL,PH2DEV      SET LAST IPL HOLD TO THIS IPL
         B     READ                RETURN TO PHASE 1.
PH2IPL22 TM    PH2SW,X20           WAS IPL PRECEEDED BY IPL
         BNO   PH2IPL7             BR IF NO.
         L     R3,PH2TIME          LOAD TIME OF THIS IPL.
         L     R4,PH2LIPL4         LOAD TIME OF LAST IPL.
         SR    R3,R4               FIND TIME DIFFERENCE.
         L     R4,MIN10            LOAD 10 MIN OF SECONDS.
         CR    R3,R4               ELAPSED TIME GREATER THAN 10
*                                  MINUTES.
         BH    PH2IPL7             BR IF YES.
         BAL   P2RETURN,SRISITO0   GO SET ALL SRI TIMES TO ZERO.
         B     PH2IPL21            GO TO SET LAST IPL HOLD AND RETURN.
*
         EJECT
***********************************************************************
*    THIS ROUTINE SEARCHES THE SRI-SI TABLE USING THE DEVICE TYPE,    *
*      CONTROL UNIT ADDRESS AS A SEARCH ARGUMENT. SWITCHES ARE SET TO *
*        INDICATE TO CALLER, A FIND, NO FIND, AND TABLE IS FULL.      *
*      IF A FIND OCCURRS REGISTER R3 POINTS TO THE FIND.              *
*      IF NO FIND OCCURRS REGISTER R3 POINTS TO THE FIRST VACCANT     *
*        ELEMENT.                                                     *
*      IF THE TABLE IS FULL, REGISTER R3 POINTS TO THE LAST TABLE     *
*        ELEMENT.                                                     *
***********************************************************************
*
SRCHSRI  LA    R3,SRISITAB         SET TABLE BOTTOM
         LA    R4,N12              SET TABLE ENTRY LENGTH
         LA    R5,SRSITLOW         TOP OF TABLE - TWO ENTRIES
         NI    PH2SWS,X9F          SET TABLE FIND AND TABLE FULL OFF
SRCHSRI1 CLC   PH2DEV(N4),N0(R3)   DEV. AND CUA IN TABLE
         BE    SRCHSRI2            BR IF YES
         CLC   FULLZERO(N4),N0(R3) TABLE ENTRY ZERO
         BER   P2RETURN            RETURN TO CALLING POINT
         BXLE  R3,R4,SRCHSRI1      CLOSE LOOP
         OI    PH2SWS,X20          TURN ON TABLE FULL
         BR    P2RETURN            RETURN TO CALLING POINT.
SRCHSRI2 OI    PH2SWS,X40          TURN ON FIND
         BR    P2RETURN            RETURN TO CALLING POINT.
         EJECT
***********************************************************************
*    THIS ROUTINE SETS ALL SRI TIMES IN THE SRI-SI TABLE TO ZERO.     *
***********************************************************************
*
SRISITO0 LA    R3,SRISITAB         SET TABLE BOTTOM
         LA    R4,N12              SET TABLE ENTRY LENGTH
         LA    R5,SRSITP12         SET TABLE TOP
SRISIT0R MVC   N4(N4,R3),FULLZERO  SET TABLE TIME TO 0.
         BXLE  R3,R4,SRISIT0R      BR UNTIL TABLE ZEROED.
         BR    P2RETURN           RETURN TO CALLING POINT.
*
***********************************************************************
*    THIS ROUTINE ADDS ONE TO THE SRI COUNT IN THE SRI-SI TABLE FOR   *
*      ALL ELEMENTS WHICH DO NOT HAVE A ZERO TIME.                    *
*      NOTE: AN ELEMENT WHICH HAS A ZERO TIME IS ONE WHICH HAS NOT    *
*            HAD AN SRI OCCURR SINCE THE LAST IPL RECORD.             *
***********************************************************************
*
COUNTSRI LA    R3,SRISITAB         SET TABLE BOTTOM.
         LA    R4,N12              SET TABLE ENTRY
         LA    R5,SRISITOP         SET TABLE TOP.
CNTSRI1  L     R6,N4(,R3)          LOAD TIME.
         LTR   R6,R6               TEST TIME.
         BZ    CNTSRI2             BR IF ZERO.
         LH    R6,N8(,R3)          LOAD SRI COUNT,
         LA    R6,N1(,R6)          ADD 1 TO COUNT,
         STH   R6,N8(,R3)          AND MOVE BACK TO TABLE.
         MVC   N4(N4,R3),FULLZERO  ZERO OUT TIME.
CNTSRI2  BXLE  R3,R4,CNTSRI1       CLOSE LOOP.
         BR    P2RETURN            RETURN TO CALLING POINT.
*
         EJECT
***********************************************************************
*    COME HERE AFTER ALL RDE TAPE RECORDS HAVE BEEN READ AND PROCESSED*
*      ALL OF THE RECORD COUNTS ARE THEN SORTED                       *
*      INTO DEVICE TYPE(SUBSYSTEM ID.), CONTROL UNIT ADDRESS ORDER,   *
*      THEN PRINTS THE PHASE 2 REPORT FROM THE INFORMATION IN THE     *
*      TABLE.                                                         *
***********************************************************************
*
PHS2PRT  BAL   P2RETURN,COUNTSRI   GO COUNT ALL SRIS .
         LA    R3,SRISITAB         SET TABLE BOTTOM.
         LA    R4,N12              SET TABLE ENTRY LENGTH.
         LA    R5,SRISITOP         SET TABLE TOP.
P2EJ2    CLC   N8(N4,R3),FULLZERO  TEST SRI AND SI COUNTS FOR ZERO.
         BNE   P2EJ3               BR IF EITHER NON-ZERO.
         MVI   N0(R3),XFF          SET NON-PRINTABLE ENTRY,
         B     P2EJ4               GO TRY NEXT ENTRY.
P2EJ3    LA    R6,SUBSTAB          SET SUBSYSTEM TABLE BOTTOM.
         LA    R7,SUBSTBE3         SET SUBSYSTEM TABLE TOP.
P2EJ3A   CLC   N0(N1,R3),N0(R6)    IS TABLE SSID IN SUBSYSTEM TABLE
         BNE   P2EJ8               NO, GO TO NEXT ENTRY
         L     R6,N0(R6)           YES, GET ROUTINE ADDRESS
         B     0(R6)               GO TO EDIT SRI-SI TABLE ENTRY
P2EJ8    LA    R6,N4(R6)           RAISE SUBSYSTEM TABLE BOTTOM BY 4.
         CR    R6,R7               END OF SUBSYSTEM TABLE
         BL    P2EJ3A              BR IF NO.
         MVI   N0(R3),X99          SET UNKNOWN SUBSYSTEM.
P2EJ6    NI    N3(R3),X00          ZERO OUT LOW ORDER BYTE OF CUA.
P2EJ7    NC    N1(N2,R3),CUAMASK   AND OUT CUA UNUSED DATA
         B     P2EJ4               TRY NEXT.
P2EJ5    MVC   N1(N3,R3),FULLZERO  ZERO OUT CUA.
P2EJ4    BXLE  R3,R4,P2EJ2         CLOSE SRI-SI TABLE LOOP.
*
         LA    R3,SRISITAB         SET TABLE BOTTOM.
         LA    R4,N12              SET TABLE ENTRY LENGTH.
         LA    R5,SRSIT            SET TABLE TOP MINUS ONE.
         LA    R8,N12              SET TABLE ENTRY LENGTH.
         LA    R9,SRISITOP         SET TABLE TOP.
P2EJ9    LA    R7,N12(R3)          SET TABLE BOTTOM PLUS ONE.
P2EJ10   CLC   N0(N4,R3),N0(R7)    IS BOTTOM ENTRY LESS THAN NEXT ONE.
         BL    P2EJ11              BR IF YES.
         MVC   PH2DEV(N12),N0(R3)  REVERSE
         MVC   N0(N12,R3),N0(R7)   THE TWO
         MVC   N0(N12,R7),PH2DEV   ENTRIES.
P2EJ11   BXLE  R7,R8,P2EJ10        CLOSE INSIDE LOOP.
         BXLE  R3,R4,P2EJ9         CLOSE OUTSIDE LOOP.
*
         BAL   R1,HEADING          GO TO PRINT PAGE HEADINGS.
*
         LA    R3,SRISITAB         SET TABLE BOTTOM.
         LA    R4,N12              SET TABLE ENTRY LENGTH.
         LA    R5,SRISITOP         SET TABLE TOP.
         MVI   PRT,SPACE2          PRINT
         MVC   PRT1(N9),PROCLAB    PROCESSOR
         MVC   PRT11(N9),SUBLAB    SUBSYSTEM
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         MVI   PH2DEV,X01          SET CPU.
         MVC   PH2CUA,FULLZERO     SET CUA TO ZERO.
         BAL   P2RETURN,SETSUBHD   GO SET SUB-HEADER IN PRINT LINE.
         XR    R8,R8               ZERO SUBSYSTEM
         XR    R9,R9               ACCUMULATORS.
         BAL   P2RETURN,COUNTTAB   GO COUNT SRIS  AND SIS .
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         MVI   PH2DEV,X02          SET STORAGE.
         BAL   P2RETURN,SETSUBHD   GO SET SUB-HEADER IN PRINT LINE.
         BAL   P2RETURN,COUNTTAB   GO COUNT SRIS  AND SIS .
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         MVI   PH2DEV,X03          SET CHANNELS SUBSYSTEM.
         BAL   P2RETURN,SETSUBHD   GO SET SUB-HEADER IN PRINT LINE.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         XR    R1,R1               ZERO REG. 1.
         ST    R1,SAVER1
         ST    R1,CHANACCU         ZERO OUT
         ST    R1,CHANACU4         CHANNEL ACCUMULATORS.
P2EJ13   L     R1,SAVER1           MOVE CHANNEL NUMBER TO R1.
         STC   R1,PH2CUA1          MOVE CHANNEL NUMBER TO SEARCH ARG.
         STC   R1,PRT6             MOVE CHANNEL NUMBER TO PRINT LINE.
         LA    R1,N1(,R1)          BUMP CHANNEL NUMBER BY ONE.
         ST    R1,SAVER1           SAVE CHANNEL NUMBER.
         CLI   PH2CUA1,X0F         ALL CHANNELS DONE
         BH    P2EJ14              BR IF YES.
         TR    PRT6(N1),CHANTAB    TRANSLATE HEX CHANNEL NUMBER TO
*                                  EBDIC
         BAL   P2RETURN,COUNTTAB   GO COUNT SRIS  AND SIS .
         LM    R1,R2,CHANACCU      LOAD CHANNEL TOTALS.
         AR    R1,R6               ADD CHANNEL X SRIS
         AR    R2,R7               AND SIS  TO TOTAL.
         STM   R1,R2,CHANACCU      SAVE CHANNEL TOTALS.
         AR    R6,R7               COMBINE CHANNEL X SRIS  AND SIS .
         LTR   R6,R6               TEST CHANNEL X ERRORS
         BZ    P2EJ13              AND BYPASS PRINTING IF ZERO.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         B     P2EJ13              GO TO DO NEXT CHANNEL.
P2EJ14   MVI   PRT,SPACE2          SET TOTALS
         MVC   PRT6(N5),TOTALLAB   TOTAL
         LM    R6,R7,CHANACCU      MOVE TOTALS FOR ALL CHANNELS.
         BAL   P2RETURN,CNTTAB2A   GO SET SRI-SI TOTALS IN PRINT LINE.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         MVI   PH2DEV,X04          SET UNKNOWN
         MVC   PH2CUA,FULLZERO     PROCESSOR
         BAL   P2RETURN,SETSUBHD   GO SET SUB-HEADER IN PRINT LINE.
         BAL   P2RETURN,COUNTTAB   GO COUNT SRIS  AND SIS .
         AR    R6,R7               COMBINE SRIS  AND SIS ,
         LTR   R6,R6               AND TES FOR ZERO ERRORS.
         BZ    P2EJ15              BR IF ZERO.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
P2EJ15   MVC   PRT2(N18),PRT1      CLEAR PRINT LINE.
         MVI   PRT,SPACE2          SET TOTAL
         MVC   PRT2(N5),TOTALLAB   TOTAL
         LR    R6,R8               MOVE SUBSYSTEM TOTALS
         LR    R7,R9               TO REGS. R6-R7.
         BAL   P2RETURN,CNTTAB2A   GO SET SRI-SI TOTALS IN PRINT LINE.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
P2EJ15A  XR    R8,R8               ZERO SUBSYSTEM
         XR    R9,R9               ACCUMULATORS.
         MVI   PRT,SPACE2          SET DOUBLE SPACE IN PRINT LINE.
         CLI   0(R3),X'FF'         END OF PRINTABLE ENTRIES
         BE    P2EJ30              BR IF YES
         MVC   PH2DEV(N4),N0(R3)   MOVE SSID-CUA TO COMPARE AREA.
         BAL   P2RETURN,SETSUBHD   GO SET SUB-HEADER IN PRINT LINE.
         BAL   P2RETURN,PRTLIN     GO PRINT IT.
         MVI   PRT,SPACE2          DOUBLE SPACE
P2EJ25   CLC   PH2CUA(N3),ALL99S   UNKNOWN CUA - '000999'
         BNE   P2EJ26              BR IF NO.
         MVC   PRT6(N7),UNKNOW     UNKNOWN
         B     P2EJ27              BYPASS DEVICE TRANSLATION.
P2EJ26   MVC   PRT6(N1),PH2CUA1
         IC    R1,PH2CUA2
         SRA   R1,N4
         STC   R1,PRT7
         NI    PRT7,X0F
         MVC   PRT8(N1),PH2CUA2
         NI    PRT8,X0F
         TR    PRT6(N3),CHANTAB
P2EJ27   BAL   P2RETURN,COUNTTAB   GO COUNT SRIS  AND SIS .
         AR    R6,R7               ADD SIS  TO SRIS .
         LTR   R6,R6               ARE BOTH ZERO
         BZ    P2EJ28              BR IF YES.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
P2EJ28   CLC   N0(N1,R3),PH2DEV    NEXT IS SAME SSID AS LAST
         BNE   P2EJ29              BR IF NO.
         MVC   PH2CUA,N1(R3)       MOVE NEXT DEVICE ADDRESS TO SEARCH.
         B     P2EJ25              GO TO PROCESS NEXT.
P2EJ29   MVI   PRT,SPACE2          SET TOTALS FOR
         MVC   PRT6(N5),TOTALLAB   TOTAL
         LR    R6,R8               IN PRINT
         LR    R7,R9               LINE
         BAL   P2RETURN,CNTTAB2A   GO SET SRI-SI TOTALS IN PRINT LINE.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         B     P2EJ15A             GO START NEXT SUBSYSTEM.
*
P2EJ30   MVI   PRT,SPACE3          SET TRIPLE SPACE.
         MVC   PRT9(N13),RPTEND    END OF REPORT
         BAL   P2RETURN,PRINT      GO PRINT END OF REPORT.
         B     PHASE2ND            RETURN TO END JOB ROUTINE.
*
SETSUBHD MVI   PRT,SPACE2          SET DOUBLE SPACE IN PRINT LINE.
         LA    R1,SUBHDRT          LOAD TABLE START.
         LA    R2,SUBHDRTE         LOAD TABLE END.
SUBHDR1  CLC   PH2DEV,0(R1)
         BE    SUBHDR2             BR IF FIND SUB-HEADER.
         LA    R1,N22(R1)          BUMP ADDRESS TO NEXT SUBSYSTEM.
         CR    R1,R2
         BL    SUBHDR1             BR IF NOT TABLE END.
         LA    R1,SBHDRTE          SET TO UNKNOWN SUBSYSTEM.
SUBHDR2  MVC   PRT1(N21),N1(R1)    MOVE SUB-HEADER TO PRINT LINE.
         BR    P2RETURN            RETURN TO CALLER.
         EJECT
***********************************************************************
*    THIS ROUTINE COUNTS THE SRIS  AND SIS  FOR A GIVEN SUBSYSTEM,    *
*      CONTROL UNIT ADDRESS.                                          *
*      NOTE: SRI AND SI COUNTS ARE MOVED TO THE PRINT LINE, CONVERTED *
*            TO EBDIC, HIGH ORDER ZEROS ARE SURPRESSED, AND THE COUNTS*
*            ARE ALSO ADDED TO THE SUBSYSTEM TOTALS.                  *
*            IF ENTRY OCCURRS AT CNTTAB2A THEN THE PRINT LINE IS      *
*            LOADED FROM THE CONTENTS OF REGISTERS R6 AND R7 (THIS    *
*            ENTRY IS USED TO PRINT SUBSYSTEM TOTALS).                *
***********************************************************************
*
COUNTTAB XR    R6,R6               ZERO REGISTERS R6,
         XR    R7,R7               AND R7.
CNTTAB1  CLC   N0(N4,R3),PH2DEV    SEE IF DEV-CUA IS PROPER.
         BNE   CNTTAB2             BR IF NO.
         AH    R6,N8(,R3)          ADD SRIS  TO REG. 6,
         AH    R7,N10(,R3)         SIS  TO REG. 7.
         BXLE  R3,R4,CNTTAB1       CLOSE ADD LOOP.
CNTTAB2  AR    R8,R6               ACCUMULATE
         AR    R9,R7               SUBSYSTEM TOTALS.
CNTTAB2A CVD   R6,BWORK            CONVERT
         UNPK  PRT35(N5),BWORK5(N3) SRI
         OI    PRT39,XF0           AND
         CVD   R7,BWORK            SI
         UNPK  PRT60(N5),BWORK5(N3) COUNTS
         OI    PRT64,XF0           TO EBDIC.
         STM   R1,R2,SAVER1R2      SAVE R1 AND R2 TEMP.
         LA    R1,PRT35            SET START AND
         LA    R2,PRT39            STOP ADDRESSES.
CNTTAB3  CLI   0(R1),X'F0'         HI ORDER ZERO
         BNE   CNTTAB4             BR IF NO.
         MVI   N0(R1),C' '         BLANK HIGH ORDER BYTE
         LA    R1,N1(,R1)          BUMP ADDRESS BY ONE
         CR    R1,R2               DONE
         BL    CNTTAB3             BR IF NO.
CNTTAB4  LA    R2,PRT40            SET FIRST COUNT ADDRESS.
         CR    R1,R2               SEE IF SECOND COUNT ADDRESS.
         BH    CNTTAB5             BR IF YES.
         LA    R1,PRT60            SET START AND STOP
         LA    R2,PRT64            ADDRESSES FOR SECOND.
         B     CNTTAB3             GO TO EDIT SECOND COUNT.
CNTTAB5  LM    R1,R2,SAVER1R2      RETURN R1 AND R2 VALUES.
         BR    P2RETURN            RETURN TO CALLING POINT.
         EJECT
***********************************************************************
*    COME HERE TO PRINT HEADINGS ON THE PHASE 2 REPORT.               *
***********************************************************************
*
HEADING  ST    R1,SAVER1           SAVE REG.1 FOR LATER RETURN.
         MVI   PRT,SKIP            SET RESTORE FORM.
         MVC   PRT10(N55),CCCUST   MOVE CUSTOMER NAME TO FIRST LINE.
         BAL   P2RETURN,PRTLIN     GO TO PRINT IT.
         MVI   PRT,SPACE2          SET DOUBLE SPACE.
         MVC   PRT24(N27),P2HEAD1  HEADING TO REPORT
         BAL   P2RETURN,PRTLIN     PRINT IT
         MVI   PRT,SPACE3          TRIPLE SPACE
         MVC   PRT1(N72),P2HEAD2   HEADING TO REPORT
         BAL   P2RETURN,PRTLIN     PRINT IT
         MVI   PRT,SPACE2          SET DOUBLE SPACE ON FIRST LINE.
         L     R1,SAVER1           RETURN ADDRESS TO REG. 1.
         BR    R1                  BRANCH TO READ
         EJECT
***********************************************************************
*    COME HERE PRIOR TO PRINTING ALL LINES ON THE PHASE 2 REPORT.     *
*      PRINT LINES INCLUDING PRINTER SPACING ARE COUNTED.             *
*      A COMMON PRINT ROUTINE FOR PHASE 1 AND PHASE 2 IS USED.        *
*      IF A PAGE OVERFLOW OCCURRS, THE HEADING WILL BE PRINTED AT THE *
*        TOP OF THE NEW PAGE.                                         *
***********************************************************************
*
PRTLIN   ST    P2RETURN,SAVER14    SAVE RETURN ADDRESS.
         LH    R1,LINES            LOAD LINE COUNT.
         LA    R1,N1(,R1)          BUMP LINE COUNT BY ONE.
         CLI   PRT,X'09'                                       @XA21049
         BE    PRTLIN1             BR IF SPACE 1 LINE.
         LA    R1,N1(,R1)          BUMP LINE COUNT ONE MORE.
         CLI   PRT,X'11'                                       @XA21049
         BE    PRTLIN1             BR IF SPACE 2 LINES.
         LA    R1,N1(,R1)          BUMP LINE COUNT ONE MORE.
         CLI   PRT,X'19'                                       @XA21049
         BE    PRTLIN1             BR IF SPACE 3 LINES.
         XR    R1,R1               ZERO LINE COUNT.
PRTLIN1  STH   R1,LINES            STORE LINE COUNT.
         BAL   P2RETURN,PRINT      GO TO COMMON PRINT ROUTINE.
         CLC   LINES(N2),MAXLINCT  MAXIMUM LINES REACHED       @XA21049
         BL    PRTLIN3             BR IF NO.
         L     R1,SAVER14          RETURN ADDRESS IN REG 1
         B     HEADING             DO HEADING
PRTLIN3  L     P2RETURN,SAVER14    SET RETURN ADDRESS.
         BR    P2RETURN            RETURN TO CALLING POINT.
*
SPCNCNT  MVI   PRT,X'09'           SPACE 1 LINE                @XA21049
         LH    R1,LINES            LOAD LINE COUNT             @XA21049
         LA    R1,N1(,R1)          BUMP LINE COUNT ONCE        @XA21049
         STH   R1,LINES            STORE LINE COUNT            @XA21049
         BR    R14                                             @XA21049
         EJECT
*NOIPLS:   R2 = SAVER2;                                    /*@Z427VLS*/
NOIPLS   L     @15,SAVER2                                          0090
         LR    R2,@15                                              0090
*        CALL  IFCMSG(62,ADDR(PRINTER)+2);                 /*@Z427VLS*/
         LA    @14,PRINTER                                         0091
         AL    @14,@CF00073                                        0091
         ST    @14,@AFTEMPS                                        0091
         L     @15,ADIFCMSG(,@15)                                  0091
         LA    @01,@AL00091                                        0091
         BALR  @14,@15                                             0091
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0092
         LA    @14,PRINTER                                         0092
         ST    @14,PRINTADR(,@15)                                  0092
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0093
         LA    @01,@AL00093                                        0093
         BALR  @14,@15                                             0093
*        GO TO WRAPUPED;                                   /*@Z427VLS*/
         B     WRAPUPED                                            0094
*NOCRDMSG: R2 = SAVER2;                                    /*@Z427VLS*/
NOCRDMSG L     @15,SAVER2                                          0095
         LR    R2,@15                                              0095
*        CALL  IFCMSG(58,ADDR(PRINTER)+2);                 /*@Z427VLS*/
         LA    @14,PRINTER                                         0096
         AL    @14,@CF00073                                        0096
         ST    @14,@AFTEMPS                                        0096
         L     @15,ADIFCMSG(,@15)                                  0096
         LA    @01,@AL00096                                        0096
         BALR  @14,@15                                             0096
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0097
         LA    @14,PRINTER                                         0097
         ST    @14,PRINTADR(,@15)                                  0097
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0098
         LA    @01,@AL00098                                        0098
         BALR  @14,@15                                             0098
*        GO TO CCERROR;                                    /*@Z427VLS*/
         B     CCERROR                                             0099
*STRDTMSG: R2 = SAVER2;                                    /*@Z427VLS*/
STRDTMSG L     @15,SAVER2                                          0100
         LR    R2,@15                                              0100
*        CALL  IFCMSG(59,ADDR(PRINTER)+2);                 /*@Z427VLS*/
         LA    @14,PRINTER                                         0101
         AL    @14,@CF00073                                        0101
         ST    @14,@AFTEMPS                                        0101
         L     @15,ADIFCMSG(,@15)                                  0101
         LA    @01,@AL00101                                        0101
         BALR  @14,@15                                             0101
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0102
         LA    @14,PRINTER                                         0102
         ST    @14,PRINTADR(,@15)                                  0102
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0103
         LA    @01,@AL00103                                        0103
         BALR  @14,@15                                             0103
*        GO TO CCERROR;                                    /*@Z427VLS*/
         B     CCERROR                                             0104
*ENDDTMSG: R2 = SAVER2;                                    /*@Z427VLS*/
ENDDTMSG L     @15,SAVER2                                          0105
         LR    R2,@15                                              0105
*        CALL  IFCMSG(60,ADDR(PRINTER)+2);                 /*@Z427VLS*/
         LA    @14,PRINTER                                         0106
         AL    @14,@CF00073                                        0106
         ST    @14,@AFTEMPS                                        0106
         L     @15,ADIFCMSG(,@15)                                  0106
         LA    @01,@AL00106                                        0106
         BALR  @14,@15                                             0106
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0107
         LA    @14,PRINTER                                         0107
         ST    @14,PRINTADR(,@15)                                  0107
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0108
         LA    @01,@AL00108                                        0108
         BALR  @14,@15                                             0108
*        GO TO CCERROR;                                    /*@Z427VLS*/
         B     CCERROR                                             0109
*CLUSTMSG: R2 = SAVER2;                                    /*@Z427VLS*/
CLUSTMSG L     @15,SAVER2                                          0110
         LR    R2,@15                                              0110
*        CALL  IFCMSG(61,ADDR(PRINTER)+2);                 /*@Z427VLS*/
         LA    @14,PRINTER                                         0111
         AL    @14,@CF00073                                        0111
         ST    @14,@AFTEMPS                                        0111
         L     @15,ADIFCMSG(,@15)                                  0111
         LA    @01,@AL00111                                        0111
         BALR  @14,@15                                             0111
*        PRINTADR = ADDR(PRINTER);                         /*@Z427VLS*/
         L     @15,SAVER2                                          0112
         LA    @14,PRINTER                                         0112
         ST    @14,PRINTADR(,@15)                                  0112
*        CALL  IOHND(RITEPRTR);    /* WRITE A LINE           @Z427VLS*/
         L     @15,ADIOHND(,@15)                                   0113
         LA    @01,@AL00113                                        0113
         BALR  @14,@15                                             0113
*CCERROR: ;                                                /*@Z427VLS*/
CCERROR  DS    0H                                                  0115
*GENERATE;                                                 /*@Z427VLS*/
         LA    R15,4               RETURN CODE
***********************************************************************
*                                                                     *
*        END OF PROGRAM - CLOSE DATA SETS AND RETURN                  *
***********************************************************************
*                                                                     *
*                                                                     *
PHASE2ND EQU   *
P2RETURN EQU   14
*RETURN;                                                   /*@Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0116
@EF00001 DS    0H                                                  0116
@ER00001 L     @14,12(,@13)                                        0116
         LM    @00,@12,20(@13)                                     0116
         BR    @14                                                 0116
*GENERATE DATA;                                            /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
         B     @EL00001                                            0118
@DATA    DS    0H
@CH00075 DC    H'3'
@CH00085 DC    H'9'
         DS    0F
@AL00064 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00076 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00080 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00084 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00088 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00093 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00098 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00103 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00108 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00113 DC    A(@CF00073+2)           LIST WITH   1 ARGUMENT(S)
@AL00067 DC    A(@CH00085)             LIST WITH   1 ARGUMENT(S)
@AL00070 DC    A(@CH00075)             LIST WITH   1 ARGUMENT(S)
@AL00091 DC    A(@CF00769)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00096 DC    A(@CF00772)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00101 DC    A(@CF00776)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00106 DC    A(@CF00779)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00111 DC    A(@CF00782)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
         DS    0F
@SA00001 DS    18F
@AFTEMPS DS    1F
         DS    0F
@CF00073 DC    F'2'
@CH00073 EQU   @CF00073+2
@CF00763 DC    F'27'
@CF00772 DC    F'58'
@CF00776 DC    F'59'
@CF00779 DC    F'60'
@CF00782 DC    F'61'
@CF00769 DC    F'62'
         DS    0D
SAVER2   DS    F
PRINTER  DC    CL134' '
         ORG   PRINTER
@NM00067 DC    CL1'1'
IPLRPT   DS    CL121
         ORG   PRINTER+134
ELINE    DC    CL134' '
         ORG   ELINE
@NM00068 DC    CL1'0'
@NM00069 DC    X'89'
         ORG   ELINE+134
LINETWO  DC    CL134' '
         ORG   LINETWO
@NM00070 DC    CL1'0'
@NM00071 DC    X'13'
         ORG   LINETWO+134
LINETHR  DC    CL134' '
         ORG   LINETHR
@NM00072 DC    CL1'0'
@NM00073 DC    X'1B'
         ORG   LINETHR+134
IFCRDESM CSECT
         EJECT
***********************************************************************
*    THE SRI-SI TABLE IS USED TO ACCUMULATE COUNTS WHILE THE RDE TAPE *
*      IS BEING READ. WHEN THE RDE TAPE REACHES END OF FILE, THE TABLE*
*      CONTAINS THE DATA NEEDED TO PRINT THE PHASE 2 REPORT.          *
*      NOTE: THE TABLE ELEMENTS ARE 12 BYTES LONG AND CONTAIN         *
*            ONE BYTE DEVICE TYPE(SUBSYSTEM ID.) IN HEX.,             *
*            THREE BYTE CONTROL UNIT ADDRESS IN HEX.,                 *
*            ONE WORD TIME(IN SECONDS SINCE JAN. 1, 1960) IN BINARY,  *
*            HALF WORD SRI COUNT  IN BINARY,                          *
*            HALF WORD SI COUNT  IN BINARY.                           *
***********************************************************************
*
         DS    0F
SRISITAB DC    100XL12'00'               WORD OF ZEROS.
SRISITOP EQU   *-12
SRSITP12 EQU   SRISITOP+12
SRSIT    EQU   SRISITOP-12
SRSITLOW EQU   SRISITOP-24
         SPACE 2
PH2LSRI  DC    XL12'00'           AREA TO HOLD LAST SRI RECORD.
PH2LSRI4 EQU   PH2LSRI+4
PH2LSI   DC    XL12'00'           AREA TO HOLD LAST SI RECORD.
PH2LSI4  EQU   PH2LSI+4
PH2LIPL  DC    XL12'00'           AREA TO HOLD LAST IPL RECORD.
PH2LIPL4 EQU   PH2LIPL+4
MIN10    DC    XL4'00000258'      TEN MINUTES = 600 SECONDS.
MIN30    DC    XL4'00000708'      THIRTY MINUTES = 1800 SECONDS.
SAVER1   DC    XL4'00'            TEMPORARY SAVE AREA FOR REGISTER 1.
SAVER1R2 DC    XL8'00'            TEMPORARY SAVE AREA FOR REG.S  1&2.
SAVER14  DC    XL4'00'            TEMPORARY SAVE AREA FOR REGISTER 14.
CHANACCU DC    XL8'00'            CHANNEL TOTALS FOR SRIS  AND SIS .
CHANACU4 EQU   CHANACCU+4
         EJECT
***********************************************************************
*    THE FOLLOWING TABLE CONTAINS ALL LEGITAMATE SUBSYSTEM IDS        *
*      (DEVICE TYPES) AND THE ADDRESS OF THE ASSOCIATED EDIT FOR THE  *
*      SRI-SI TABLE ELEMENT.                                          *
***********************************************************************
*
SUBSTAB  DC    X'01'              CPU SUBSYSTEM ID.
         DC    AL3(P2EJ5)
         DC    X'02'              STORAGE SUBSYSTEM ID.
         DC    AL3(P2EJ5)
         DC    X'03'              CHANNELS SUBSYSTEM ID,
         DC    AL3(P2EJ6)
         DC    X'04'              UNKNOWN PROCESSOR SUBSYSTEM ID.
         DC    AL3(P2EJ5)
         DC    X'08'              UNIT RECORD SUBSYSTEM ID.
         DC    AL3(P2EJ7)
         DC    X'10'              GRAPHICIS SUBSYSTEM ID.
         DC    AL3(P2EJ7)
         DC    X'20'              DASD SUBSYSTEM ID.
         DC    AL3(P2EJ7)
         DC    X'40'              TELEPROCESSING SUBSYSTEM ID.
         DC    AL3(P2EJ7)
         DC    X'80'              TAPE SUBSYSTEM ID.
         DC    AL3(P2EJ7)
         DC    X'99'              UNKNOWN SUBSYSTEM ID.
SUBSTABE DC    AL3(P2EJ6)
SUBSTBE3 EQU   SUBSTABE+2
*
***********************************************************************
*    THE FOLLOWING TABLE IS USED TO CONVERT THE IPL SUBSYSTEM ID. TO  *
*      THE PROPER DEVICE TYPE(SUBSYSTEM ID.) AS IN THE UCB.           *
*      NOTE: THE FIRST BYTE IS THE IPL SUBSYSTEM ID., THE SECOND BYTE *
*            IS ITS  CORRESPONDING UCB DEVICE TYPE.                   *
***********************************************************************
*
SSIDTAB  DC    XL2'0000'
         DC    XL2'1010'
         DC    XL2'2020'
         DC    XL2'3099'
         DC    XL2'4080'
         DC    XL2'5008'
         DC    XL2'6008'
         DC    XL2'7040'
         DC    XL2'8010'
         DC    XL2'9099'
SSIDTABT DC    XL2'9199'
         EJECT
***********************************************************************
*       THE FOLLOWING TABLE CONTAINS PHASE 2 SUBHEADINGS              *
***********************************************************************
*
SUBHDRT  DC    X'01'
         DC    CL21' CPU                 '
         DC    X'02'
         DC    CL21' STORAGE             '
         DC    X'03'
         DC    CL21' CHANNELS            '
         DC    X'04'
PROC     DC    C' UNKNOWN PROCESSOR   '
         DC    X'08'
         DC    CL21'UNIT RECORD SUBSYSTEM'
         DC    X'10'
         DC    CL21'GRAPHICS SUBSYSTEM   '
         DC    X'20'
         DC    CL21'DASD SUBSYSTEM       '
         DC    X'40'
         DC    CL21'TELEPROC SUBSYSTEM   '
         DC    X'80'
         DC    CL21'TAPE SUBSYSTEM       '
         DC    X'99'
         DC    CL21'UNKNOWN SUBSYSTEM    '
SUBHDRTE DC    C' '
UNKNOW   EQU   PROC+1
PROCLAB  EQU   PROC+9
SBHDRTE  EQU   SUBHDRTE-22
*
***********************************************************************
*    THE FOLLOWING CONSTANTS ARE THE PHASE 2 REPORT HEADING LINES.    *
***********************************************************************
*
P2HEAD1  DC    C'STATISTICS OF SYSTEM ERRORS'
P2HEAD2  DC    C'SUBSYSTEM                     IPL NOT REQUIRED        C
                     IPL REQUIRED'
SUBLAB   EQU   P2HEAD2
*
         EJECT
***********************************************************************
*        TABLE:        SUB-SYSTEM  RESPONSIBLE DESCRIPTIONS           *
***********************************************************************
*
SUBTABLE DC    XL2'0006',C'00-NULL'
         DC    XL2'100B',C'10-PROCESSOR'
         DC    XL2'200F',C'20-DIRECT ACCESS'
         DC    XL2'3012',C'30-AUXILIARY EQUIP.'
         DC    XL2'4006',C'40-TAPE'
         DC    XL2'500C',C'50-CARD/PRINT'
         DC    XL2'600A',C'60-MICR/OCR'
         DC    XL2'7010',C'70-TELEPROCESSING'
         DC    XL2'8010',C'80-GRAPHICS/AUDIO'
         DC    XL2'9013',C'90-IBM CONTROL PROG.'
         DC    XL2'9113',C'91-IBM PROGRAM PRODUCT'             @XA16800
IPLNUL   EQU   SUBTABLE+2
         DC    XL1'FF'
*
***********************************************************************
*              IPL REASON CODE TABLE, CODE IS ENTERED BY OPERATOR     *
*               AND BECOMES A FIELD WITHIN THE IPL RECORD             *
***********************************************************************
*
IPLDESC  DC    XL2'0C18',C'NM-NORMAL IPL'
REAIE    DC    XL2'1E08',C'IE-IBM PROBLEM-NO CE/SE SUPPORT'
REAIM    DC    XL2'1B00',C'IM-IBM PROBLEM-CE/SE SUPPORT'
         DC    XL2'2010',C'OP-OPERATIONAL/PROCEDURAL PROBLEM'
         DC    XL2'1A10',C'UP-USER PROGRAMMING PROBLEM'
         DC    XL2'2210',C'EN-ENVIRONMENTAL- POWER FAILURE ETC'
         DC    XL2'2008',C'CE-CE/SE PLANNED-UNPLANNED MAINT.'
REAME    DC    XL2'2010',C'ME-FAULTY MEDIA (TAPES,DISK,ETC.)'
         DC    XL2'1418',C'DF-DEFAULT NORMAL IPL'
REAUN    DC    XL2'0908',C'UN-UNKNOWN'
REAIE1   EQU   REAIE+2
REAIM1   EQU   REAIM+2
REAME1   EQU   REAME+2
REAUN1   EQU   REAUN+2
         DC    XL1'FF'                  END OF TABLE
*
***********************************************************************
*        IPL LOST TIME CATEGORY TABLE, CODE IS ENTERED BY OPERATOR    *
*         AS IPL REASON CODE IN IPL RECORD                            *
***********************************************************************
*
IPLLOST  DC    XL2'0008',C'IBM MAINT'
         DC    XL2'0808',C'IBM RESP.'
         DC    XL2'1004',C'OTHER'
         DC    XL2'1803',C'IDLE'
         DC    X'FF'               END OF TABLE
NOAVA    DC    C'NOT AVAILABLE'
WNLNOTE  DC    C' SEE NOTE1'                                   @XA16800
WNLNOTE1 DC    C'NOTE1 - IPL RECORD TIME STAMP OR DATA DISCREPANCY.'
*
***********************************************************************
*     THIS AREA RESERVED FOR OUTPUT FROM PHASE 1  AND USED AS INPUT   *
*     TO PHASE 2                                                      *
***********************************************************************
*
         DS    0F
         DC    CL3'   '
PH2INCID DC    XL1'00'            INCIDENT 1=SI,2=SRI,3=IPL,4=OTHER
PH2DEV   DC    XL1'00'            DEVICE TYPE
PH2CUA   DC    XL3'000000'        CONTROL UNIT ADDRESS
PH2CUA1  EQU   PH2CUA+1
PH2CUA2  EQU   PH2CUA+2
PH2TIME  DC    XL4'00000000'      TIME IN SEC SINCE 1960
PH2SW    DC    XL1'00'            BIT 0=LSI, BIT 1=LSRI, BIT 2=LIPL
PH2REA   DC    XL2'0000'          IPL REASON CODE
PH2SSID  DC    XL1'00'            IPL SSID
*
***********************************************************************
*        IPL CLUSTER TABLES CONTAIN ELEMENTS IN THE FOLLOWING FORMAT  *
*                     IPL TABLE (20)            SEQ  TABLE (250)      *
*                  SEQUENCE NO   4 BYTES        LOW SEQ NO  2 BYTES   *
*                  TIME IN SEC   4 BYTES        HI  SEQ NO  2 BYTES   *
***********************************************************************
*
IPLTAB   DC    160X'0'            RESERVE 160 BYTES FOR CLUSTER TABLE
IPLTBEND EQU   *                            END OF IPL CLUSTER TABLE
*
SEQTAB   DC    1000X'0'           SEQUENCE NO TABLE 1000 BYTES
SEQTABE  EQU   *
         EJECT
***********************************************************************
*        PRINT AREA - 121 BYTES -                                     *
***********************************************************************
*
*
SKIP     EQU   X'89'
SPACE2   EQU   X'11'
SPACE3   EQU   X'19'
*
CTLCRLIN EQU   IPLRPT+1            MESSAGE OFFSET
CTLCRLN1 EQU   IPLRPT+6
CTLCRLN2 EQU   IPLRPT+17
*
PRT      EQU   IPLRPT
PRT1     EQU   IPLRPT+1
PRT2     EQU   IPLRPT+2
PRT6     EQU   IPLRPT+6
PRT7     EQU   IPLRPT+7
PRT8     EQU   IPLRPT+8
PRT9     EQU   IPLRPT+9
PRT10    EQU   IPLRPT+10
PRT11    EQU   IPLRPT+11
PRT14    EQU   IPLRPT+14                                       @XA16800
PRT15    EQU   IPLRPT+15                                       @XA16800
PRT24    EQU   IPLRPT+24
PRT35    EQU   IPLRPT+35
PRT39    EQU   IPLRPT+39
PRT40    EQU   IPLRPT+40
PRT60    EQU   IPLRPT+60
PRT64    EQU   IPLRPT+64
*
RPTSEQ   EQU   IPLRPT+3                 SEQUENCE #
RPTDATE  EQU   IPLRPT+11                DATE
RPTTIME  EQU   IPLRPT+19                TIME
RPTREA   EQU   IPLRPT+30                REASON FOR IPL
RPTSUB   EQU   IPLRPT+67                SUBSYSTEM RESPONSIBLE
RPTLOST  EQU   IPLRPT+91                LOST TIME
RPTCAT   EQU   IPLRPT+104               CATEGORY
*
RPTCUS   EQU   IPLRPT+40                CUSTOMER NAME
*                                       HEADING LINES
RPTHDLN1 EQU   IPLRPT+30                 STATISTICS OF ERROR
RPTHDLN2 EQU   IPLRPT+1                  STARTING DATE OF REPORT
RPTHDLN3 EQU   IPLRPT+41                 IPL REPORT
RPTHDLN4 EQU   IPLRPT+1                  SEQ#,DATE,ETC
*                                       FOOTING LINES
RPTFTNOT EQU   IPLRPT+1                  * PLEASE NOTE
RPTFTLN1 EQU   IPLRPT+1                  ENDING DATE
RPTFTLN2 EQU   IPLRPT+6                  MEAN TIME
RPTFTLN3 EQU   IPLRPT+6                  IPL CLUSTERING
*
RPTGROUP EQU   IPLRPT+18                CLUSTER GROUPING
*
RPTLTSUM EQU   IPLRPT+22                LOST SUMMARY
RPTLTSM1 EQU   IPLRPT+1                  HEADING
RPTLTSM2 EQU   IPLRPT+12                  REPORT
RPTLTCT1 EQU   IPLRPT+11
RPTLTHR1 EQU   IPLRPT+19
*
RPTLTFT1 EQU   IPLRPT+14                LOST SUM FOOTING 1
RPTLTFT2 EQU   IPLRPT+38                LOST SUM FOOTING 2
RPTLTFT3 EQU   IPLRPT+41
*
         SPACE 2
SW       DC    XL1'0'                   CONTROL SWITCH
*  BIT 0 -     CCH RECORD BEING PROCESSED
*  BIT 1 -     CHECK CLUSTER DUDING WRAPUP
*  BIT 2 -     INITIAL CLUSTER SET UP COMPLETE
*  BIT 3 -     IPL HEADING PRINT NOT REQUIRED
*  BIT 4 -     CLUSTER TABLE SHIFT
*  BIT 5 -     CLUSTER TABLE FULL
*  BIT 6 -     START TIME STORED IN 'STRTIME'
*  BIT 7 -     BYPASS NEXT RECORD READ
*
*
SW1      DC    XL1'0'                   CONTROL SWITCH
*  BIT 0 -
*  BIT 1 -
*  BIT 2 -
*  BIT 3 -
*  BIT 4 -
*  BIT 5 -
*  BIT 6 -
*  BIT 7 -
         SPACE 2
PH2SWS   DC    X'00'
*  BIT 0 -     SI-IPL INCIDENT
*  BIT 1 -     FOUND IN TABLE
*  BIT 2 -     TABLE FULL
*  BIT 3 -
*  BIT 4 -
*  BIT 5 -
*  BIT 6 -
*  BIT 7 -
         SPACE 3
DTPATRN  DC    X'4020204B202020'            EDIT DATE YYDDD
DTPATTN  DC    X'4021204B20204B2020'         EDIT TIME
LSPATRN  DC    X'402021204B20204B2020'
MNPATRN  DC    X'4020202020'            EDIT MEAN IPL
MDPATRN  EQU   MNPATRN+1                EDIT MODEL #
EDITSEQ  EQU   MNPATRN                  EDIT SEQUENCE #
         EJECT
***********************************************************************
*        IPL REPORT  HEADING AND FOOTING CONSTANT AREA                *
***********************************************************************
*
HEADLIN1 DC    C'STATISTICS OF IPL''S DUE TO ALL CAUSES ON THE MODEL '
HDMODEL  DC    C'XXX SYSTEM'
*
*
HEADLIN2 DC    C'STARTING DATE OF REPORT='
HDDATE   DC    C' XX.XXX'
*
HEADLIN3 DC    C'IPL  RECORD'
*
HEADLIN4 DC    C'SEQUENCE#   DATE     TIME             REASON FOR IPL*'
         DC    C'             SUBSYSTEM RESPONSIBLE*   LOST TIME   '
         DC    C'CATEGORY*'
*
FOOTLIN1 DC    C'* PLEASE NOTE THIS INFORMATION WAS PROVIDED BY OPERAT'
         DC    C'OR.'
*
FOOTLIN2 DC    C'ENDING DATE OF REPORT='
FOOTDATE DC    C' XX.XXX'                                      @XA16800
FOOTLIN3 DC    C'REPORT IS ABBREVIATED DUE TO ERRONEOUS IPL RECORDS WH'
         DC    C'ICH ARE FLAGGED WITH **.'                     @XA16800
*
FOOTLIN4 DC    C'IPL CLUSTERING, MULTIPLE IPL''S BETWEEN '
FOOTIPL  DC    C'XX MINUTES'
*
FOOTLIN5 DC    C'GROUP '
FOOTGRUP DC    C' X = '                 CLUSTER GROUP #
LOWCLUST DC    C'XX-'                   LOW SEQ
HICLUST  DC    C'XX'                    HIGH SEQ
*
WARNLINE DC    C'WARNING: ACCURACY DEPENDS ON USE OF HALT EOD WHEN '
         DC    C'ENDING OPERATION'
*
RPTEND   DC    C'END OF REPORT'
*
SUMHEAD  DC    C'LOST TIME SUMMARY'
*
SUMHEAD1 DC    C'CATEGORY      HARDWARE            SOFTWARE'
         DC    C'            '
TOTALLAB DC    C'TOTAL TIME -'
*
SUMHEAD2 DC    C'CNT    HRS/MIN      CNT    HRS/MIN      CNT    HRS/MINC
               '
*
PROCTM   DC    C'PROCESS TIME -'
AVRUNTIM DC    C'AVERAGE RUN TIME/IPL -'
PRODAV   DC    C'PROD AVAILABILITY(',X'6C',C') -'
AVLOSTTM DC    C'AVERAGE LOST TIME -'
         EJECT
***********************************************************************
*            LOST TIME SUMMARY AREA                                   *
***********************************************************************
*
LOSTSUM  DC    24F'0'                   AREA RESERVED FOR
LOSTTIME EQU   LOSTSUM+4                 LOST TIME SUMMARY
         SPACE 3
***********************************************************************
*              CONTROL CARD BUFFER                                    *
***********************************************************************
*
CTLCRD   DC    CL80' '                  CONTROL CARD
         SPACE 1
CCLEDGEN EQU   CTLCRD                   LEDGEN         CTLCRD
CCSTART  EQU   CTLCRD+10                START DATE     YYDDD
CCEND    EQU   CTLCRD+16                END DATE       YYDDD
CCCLUST  EQU   CTLCRD+22                IPL CLUSTER TIME
CCCUST   EQU   CTLCRD+25                CUSTOMER NAME
         EJECT
***********************************************************************
*     WORK AREA --  USED BY PHASE 1 OF THIS PROGRAM                   *
***********************************************************************
*
         DS    0F
STRTIME  DC    F'0'               START TIME SEC
NEGIND   DC   C'***'                                           @XA16800
STRTIMEP DC   F'0'                                             @XA16800
BNDRY    DC   F'0'                                             @XA16800
ALLONES  DC   X'FFFFFFFF'                                      @XA16800
ENDTIME  DC    XL4'7FFFFFFF'      END TIME SEC
CLUSTIME DC    F'0'               CLUSTER TIME SEC
CURRTIME DC    F'0'               CURRENT TIME IN SEC
ELAPTIME DC    F'0'               ELAPSED TIME IN SEC
FRSTTIME DC    F'0'
LOSTTOT  DC    F'0'
PREVSTRT DC    F'0'                HIGHEST PREVIOUS IPL TIME   @XA16800
SAVEDATE DC    F'0'
SAVEDAT1 EQU   SAVEDATE+1
CONST4   DC    F'4'
CONST8   DC    F'8'
CONSTF   DC    F'15'
CUAMASK  EQU   CONSTF+2
ONEHUND  DC    F'100'
FULLZERO DC    2F'0'
BLANKS   DC    C'        '
REGSAVE  DC    2F'0'
SEQNO    DC    F'0'               IPL SEQ NUMBER
LASTINCT DC    F'0'               LAST INCIDENT TIME
IPLINDX  DC    A(IPLTAB)          IPL TABLE PTR
IPLHIDX  DC    A(IPLTAB)          IPL HI INDEX TABLE PTR
SEQINDX  DC    A(SEQTAB)          SEQ TABLE PTR
SAVERDE  DC    F'0'
SAVERET  DC    F'0'          SAVE  AREA FOR RETURN ADDRESS
MONTH    DC    F'2592000'
TWENFOUR DC    F'86400'                     TWENTYFOUR HRS IN SEC
SIXTY    DC    F'60'                        TIME BASED ON YR 1960
THRTYSIX DC    F'3600'                 NO OF SEC PER HOUR
DAYSYR   DC    F'365'                      REGULER YR
PACKYR   DC    PL2'0'
PACKYR1  EQU   PACKYR+1
*
BWORK    DS    D'0'                     WORK AREA USED TO
BWORK5   EQU   BWORK+5
BWORK6   EQU   BWORK+6
BWORK7   EQU   BWORK+7
*
JULIAN   EQU   BWORK+4
JULIAN1  EQU   BWORK+5
JULIAN2  EQU   BWORK+6
JULIAN3  EQU   BWORK+7
*
INVALUE  EQU   BWORK+6
*
WORKTIME EQU   BWORK
LOGHRS   EQU   BWORK
LOGMIN   EQU   BWORK+1
LOGSEC   EQU   BWORK+2
*
EDITTIME EQU   BWORK
EDITIME3 EQU   BWORK+3
PRTWRKA  DC    F'0'                WORK AREA                   @XA16800
MASK0F   DC    X'0000000F'         MASK PCK DEC FIELD IND      @XA16800
ZONEF0   DC    X'000000F0'         MASK UNITS PCK DEC FIELD    @XA16800
CONSTB7  DC    X'000000B7'         FORMS ALPHA CHAR CODE       @XA16800
NINE     DC    F'9'                SET CONSTANT OF 9           @XA16800
BDDRSV   DS    4F'0'               SAVE AREA FOR REGS5-8       @XA16800
MAXLINCT DC    H'59'
LINES    DC    XL2'0'                   LINE COUNT
ALL9S    DC    X'999999'
ALL99S   DC    X'000999'
TEMPSSID DC    X'00'                    TEMP SAVE AREA-CONV SSID
CHANTAB  DC    C'0123456789ABCDEF'
*
CTLCRDTS DC    C'CTLCRD'
PTCHAREA DC    20F'0'
ADDPATCH DC    S(PTCHAREA)
         SPACE 3
IPLTABLE DSECT                    20 ELEMENTS
IPLSEQ   DS    XL4                4 BYTE SEQ NO
IPLSEQ2  EQU   IPLSEQ+2
IPLTIME  DS    XL4                4 BYTE TIME  IN SECONDS
*
SEQTABLE DSECT                   250 ELEMENTS
LOWSEQ   DS    XL2                LOW SEQ NO IN TABLE
HISEQ    DS    XL2                HI  SEQ NO IN TABLE
*
         DROP  R5
         DROP  R7
N0       EQU   0
N1       EQU   1
N2       EQU   2
N3       EQU   3
N4       EQU   4
N5       EQU   5
N6       EQU   6
N7       EQU   7
N8       EQU   8
N9       EQU   9
N10      EQU   10
N11      EQU   11
N12      EQU   12
N13      EQU   13
N14      EQU   14
N16      EQU   16
N17      EQU   17
N18      EQU   18
N19      EQU   19
N20      EQU   20
N21      EQU   21
N22      EQU   22
N25      EQU   25
N27      EQU   27
N29      EQU   29
N31      EQU   31
N32      EQU   32
N49      EQU   49
N50      EQU   50                                              @XA16800
N53      EQU   53
N54      EQU   54
N55      EQU   55
N56      EQU   56
N60      EQU   60
N61      EQU   61
N64      EQU   64
N66      EQU   66
N72      EQU   72
N77      EQU   77                                              @XA16800
N80      EQU   80
N112     EQU   112
N119     EQU   119
N120     EQU   120
*
*
X00      EQU   X'00'
X01      EQU   X'01'
X02      EQU   X'02'
X03      EQU   X'03'
X04      EQU   X'04'
X08      EQU   X'08'
X0F      EQU   X'0F'
X10      EQU   X'10'
X20      EQU   X'20'
X40      EQU   X'40'
X60      EQU   X'60'
X77      EQU   X'77'
X70      EQU   X'70'
X7F      EQU   X'7F'
X80      EQU   X'80'
X8F      EQU   X'8F'
X90      EQU   X'90'                                           @XA16800
X99      EQU   X'99'
X9F      EQU   X'9F'
XA0      EQU   X'A0'
XBF      EQU   X'BF'
XC0      EQU   X'C0'
XEF      EQU   X'EF'
XF0      EQU   X'F0'
XF7      EQU   X'F7'
XF9      EQU   X'F9'
XFB      EQU   X'FB'
XFD      EQU   X'FD'                                           @XA16800
XFE      EQU   X'FE'
XFF      EQU   X'FF'
*
IFCRDESM CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R12      EQU   @12
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
SWITCHES EQU   PARM+2
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUGA   EQU   PARM+8
MISC     EQU   PARM+12
PRINTES  EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
DUMPTABL EQU   PARM+200
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
TREND2   EQU   0
TRENDKEY EQU   TREND2
TRENDRT  EQU   TRENDKEY+1
TRENCPUS EQU   TRENDKEY+3
TRENDITM EQU   TRENDKEY+4
TRENDTMP EQU   TREND2+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUM2   EQU   0
SYSUMKEY EQU   SYSUM2
SYSRT    EQU   SYSUMKEY+1
SYSCPUS  EQU   SYSUMKEY+3
SYSITEM  EQU   SYSUMKEY+4
SYSTEMP  EQU   SYSUM2+7
SHARE    EQU   0
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUAVAL   EQU   CUA+2
DEVICE   EQU   0
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUCUAS  EQU   0
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTERRID EQU   LRTREC+3
LRTDATE  EQU   LRTREC+8
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTREC+12
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHCPUID EQU   MCHHEAD+16
MCHLOG   EQU   MCHREC+48
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRPCUA  EQU   OBRREC+57
OBRSEEK  EQU   OBRREC+70
OBRTERMN EQU   OBRSEEK+2
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSYSID EQU   IPLREC+24
IPLREAS  EQU   IPLREC+28
IPLTEMP  EQU   IPLREC+46
IPLSDATE EQU   IPLREC+48
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00050 EQU   DDRREC+24
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
MIHCPUID EQU   MIHHEAD+16
@NM00056 EQU   MIHREC+24
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
@NM00064 EQU   TPRREC+26
LOGCODE  EQU   LRTSMS+1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DVBSDRE  EQU   TPRREC+56
@NM00066 EQU   TPRREC+39
TPRMODE  EQU   TPRREC+38
TPRLINAD EQU   TPRREC+36
@NM00065 EQU   TPRREC+34
TPRVOL   EQU   @NM00064
TPRCUA   EQU   TPRREC+24
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00063 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00062 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00061 EQU   TPRBUFC
TPRDEV   EQU   TPRHEAD+4
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00060 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00059 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00058 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
MIHCUA   EQU   MIHREC+35
@NM00057 EQU   @NM00056+8
MIHJOBID EQU   @NM00056
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00055 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00054 EQU   MIHHEAD+6
@NM00053 EQU   MIHHEAD+5
MIHDEBIT EQU   MIHHEAD+5
MIHCEBIT EQU   MIHHEAD+5
@NM00052 EQU   MIHHEAD+4
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00051 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRFCUA  EQU   DDRREC+45
DDRPHD   EQU   @NM00050+20
DDRVOL2  EQU   @NM00050+14
DDRVOL1  EQU   @NM00050+8
DDRJOBID EQU   @NM00050
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00049 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00048 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00047 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00046 EQU   IPLREC+30
@NM00045 EQU   IPLREC+25
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00044 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00043 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00042 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00041 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00040 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00039 EQU   SFTAEC1
@NM00038 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00037 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00036 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
SFTKEY1  EQU   SFTKEY
OBR34CT2 EQU   OBRTERMN+5
OBR34CT1 EQU   OBRTERMN+4
@NM00035 EQU   OBRTERMN
@NM00034 EQU   OBRSEEK+1
OBRTCAM  EQU   OBRSEEK
OBRVOL   EQU   OBRREC+64
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRLSDRC EQU   OBRREC+56
OBRTYPE  EQU   OBRDEV+1
OBRCLASS EQU   OBRDEV
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRDEVDC EQU   OBRREC+48
OBRSTAT  EQU   OBRCSW+4
@NM00033 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSCUA  EQU   OBRJOBID+5
OBRSSDRC EQU   OBRJOBID+4
OBRSDEV2 EQU   OBRJOBID+2
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00032 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00031 EQU   OBRHEAD+4
@NM00030 EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
@NM00029 EQU   OBRSUBTP
SHORTSW  EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SDRCOUNT EQU   OBRSUBTP
@NM00028 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00027 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
OBRKEY1  EQU   OBRKEY
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00026 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00025 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00024 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00023 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00022 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00021 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00020 EQU   MCHHEAD+4
MCHSYSTR EQU   MCHSMS+1
@NM00019 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
LRTCPUS  EQU   LRTCPMOD
@NM00018 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00017 EQU   LRTREC+4
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRNS     EQU   LRTSMS
@NM00012 EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUAV  EQU   CPUCUAS+2
CPCUANUM EQU   CPUCUAS
CPUVAL   EQU   CPUS+2
CPUNUM   EQU   CPUS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
MDRVAL   EQU   DEVICE+36
MDRNUM   EQU   DEVICE+34
DEVVAL   EQU   DEVICE+2
DEVNUM   EQU   DEVICE
CUA2     EQU   CUAVAL+2
CUA1     EQU   CUAVAL
CUANUM   EQU   CUA
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERB EQU   SHAREIO+7
SHARECUB EQU   SHAREIO+5
SHARSERA EQU   SHRCUCPU+2
SHAREDX  EQU   SHARECUA
SHARENUM EQU   SHARE
@NM00011 EQU   SYSTEMP
SYSPERM  EQU   SYSTEMP
SYSDEV   EQU   SYSUM2+5
SYSOLDA  EQU   SYSITEM
SYS3705  EQU   SYSITEM
SYSOLD   EQU   SYSCPUS
SYSCPU   EQU   SYSCPUS
SYSCUA   EQU   SYSRT
SYSGROUP EQU   SYSUMKEY
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TRENDPRM EQU   TRENDTMP
TRENDDEV EQU   TREND2+6
TRENDDAT EQU   TRENDKEY+5
TRENDOD  EQU   TRENDITM
TREND037 EQU   TRENDITM
TRENDOLD EQU   TRENCPUS
TRENDCPU EQU   TRENCPUS
@NM00010 EQU   TRENDRT+1
TRENDCUA EQU   TRENDRT
TRENDGRP EQU   TRENDKEY
TREPRE   EQU   TREGEN+12
TRECCH   EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
RECLNGTH EQU   CCHHRLNG+6
@NM00009 EQU   CCHHRLNG+5
RECCCHHR EQU   CCHHRLNG
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SORTNUM  EQU   PARM+84
TABSIZE  EQU   PARM+80
@NM00007 EQU   PARM+75
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CACCIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PASSFLAG EQU   MISC
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PHIST    EQU   MISC
PACC     EQU   MISC
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG23  EQU   DEBUG+2
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG16  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG11  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SHIFT3RD EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
ZEROALL  EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
PCHAN    EQU   RECTYPE
PMCH     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IFCRDESM,(C'PLS1816',0701,78039)
