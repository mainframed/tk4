         TITLE 'IFCSVOL0  MES DATA SUMMARY BY VOLUME'
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR3    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
IFCSVOL0 CSECT
&CSECT   SETC   'IFCSVOL0'
&DSECT   SETC  'M3420'
M3420    DSECT
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCHES,16),                   C
               (SPARES,32)
         DSGEN (DATE,32),(TIME,32)
         DSGEN (DUM2,8),(CPUSER,24),(CPUID,16),(DUM3,16)
         DSGEN (,264)
         DSGEN (PRIMCUA,8,0,2),(IORETRY,16),(,16)
         DSGEN (VOLID,48),(BLKLENG,16),(,32),(TEMPRDS,8),(TEMPWRTS,8), C
               (SIOCNT,16),(PERMRDS,8),(PERMWRTS,8),(NOISEBLK,8),      C
               (,8),(ERASEGPS,16),(CLNRACTS,16)
         DSGEN (SPAR,8),(NOISE,8),(RWVRC,8),(MTELRCR,8)
         DSGEN (EDCCRC,8),(ENVCKVRC,8),(OVERRUN,4),(SKEWCHK,4),        C
               (CCOMPARE,4),(WRTTRVRC,4)
         DSGEN (PEIDCHK,1),(MASKEXP,6),(PARITY,1),(TRKINERR,8),        C
               (WRTTMCHK,4),(STRDCHK,4),(PARTREC,4),(EXCPAMB,4)
         DSGEN  (ORDROP,4),(FEEDTHRU,4),(EXP,4),(EARLBGRD,4),          C
               (EARLNDRD,4),(SLBGRD,4),(SLWNDRD,4),(VELRETRY,4),       C
               (EXP2,4),(VELCHNG,4),(EXP3A,4),(EXP3,4),(BACKWARD,8),   ,
               (BUSOCHK,4),(ALUHRDER,4)
         DSGEN (SNB,1,0,23,0,7)
         DSGEN (TUSERIAL,16,EQU,SNB150)
IFCSVOL0 CSECT
         USING M3420,R2
         USING *,R9
         DC    A(ENTRIES)
         DC    A(EDIT)
REG8     DC    F'0'
SCSIZE   DC    H'18'
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R9       EQU   9
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L8       EQU   8
L28      EQU   28
L73      EQU   73
DISMOUNT EQU   X'84'
F0       EQU   X'F0'
FF       EQU   X'FF'
*                                                                     *
* THIS ROUTINE WILL PUT A HIGH AND LOW DATE INTO THE COUNTER AREA.    *
* THE FIRST TIME IT PUTS THE SAME DATE IN BOTH AREAS.  WITH EACH NEW  *
* RECORD A COMPARE IS DONE FOR A LOWER AND HIGHER DATE.               *
*                                                                     *
SETDATES CLC   L0(L4,R3),ZEROES   IS DATE IN COUNTER AREAS ZEROES
         ST    R5,SAVE5                SAVE REGISTER
         BNE   CHKLO
         MVC   L0(L4,R3),DATE     MOVE DATE TO LO AREA
         MVC   L4(L4,R3),DATE     MOVE DATE TO HI AREA
         B     RETURN
CHKLO    CLC   L0(L4,R3),DATE     IS LOW DATE LOWER THAN RECORD DATE
         BL    CHKHI              YES CHECK HIGH
         MVC   L0(L4,R3),DATE     NO - MOVE IN RECORD DATE
CHKHI    CLC   L4(L4,R3),DATE     IS HIGH DATE HIGHER THAN RECORD DATE
         BH    RETURN             YES- RETURN
         MVC   L4(L4,R3),DATE     NO- MOVE IN RECORD DATE
RETURN   BR    R14                RETURN
*                                                                     *
* THIS ROUTINE WILL CHECK THE MODEL BITS IN THE LAST HALF OF BYTE SIX *
* AND PUT THE EBCDIC VALUE ON THE PRINT BUFFER.                       *
*        3410 MODEL BITS           3420 MODEL BITS                    *
*        0000  MODEL 1             0011  MODEL 3                      *
*        0001  MODEL 2             0100  MODEL 5                      *
*        0010  MODEL 3             0101  MODEL 7                      *
*                                  1011  MODEL 4                 S99223
*                                  1100  MODEL 6                 S99223
*                                  1101  MODEL 8                 S99223
*                                                                S99223
MODEL    TM    SWITCHES+L1,DISMOUNT IS THIS DISMOUNT RECORD      XM9111
         BCR   4,R14              IF YES NO SENSE INFO           XM9111
         STM   R6,R7,STOREREG+L4  SAVE REGISTERS                 XM9111
         SR    R7,R7              CLEAR REGISTER
         IC    R7,SNB60           GET THE MODEL BITS
         SLL   R7,L28             SHIFT OUT UNNEEDED BITS
         SRL   R7,L28             MOVE BACK INTO POSITION
         LA    R6,MODNO(R7)       GET THE ADDRESS OF EBCDIC NUMBER
         MVC   L0(L1,R3),L0(R6)   MOVE THE DIGIT TO THE PRINT BUFFER
         LM    R6,R7,STOREREG+L4  GET SAVED REGISTERS
         BR    R14                RETURN CONTROL
MODNO    DC    X'F1F2F3F3F5F76060606060F4F6F8'                   S99223
CPUIDENT MVC   L0(L5,R3),CPUSER   MOVE CPU INFO TO SAVE AREA
         BR    R14                RETURN CONTROL
* THE NEXT ROUTINES WILL TAKE THE COUNTERS FROM THE RECORD AND        *
* ADD THEM TO THE COUNTER AREAS.  HALF BYTE COUNTERS ARE ISOLATED AND *
* THEM ADDED. DEVICE DEPENDENT COUNTERS ARE ADDED ONLY FOR DISMOUNT   *
* RECORDS.                                                            *
*                                                                     *
DENS16   EQU   X'04'
NOISERTN SR    R5,R5              CLEAR REGISTER
         TM    SNB30,DENS16            IS THIS A 1600 BPI DRIVE
         BZ    GOON                    IF NOT ADD COUNTER
         MVI   L0(R3),X'7C'            MOVE IN NOT VALID INDICATOR
         BR    R14
GOON     IC    R5,NOISE           GET QUANTITY TO BE ADDED
ADD      AH    R5,L0(R3)          ADD HALFWORD COUNTER TO IT
         STH   R5,L0(R3)          STORE SUM BACK IN COUNTER AREA
         L     R5,SAVE5           RELOAD REGISTER FIVE
         BR    R14                RETURN
TRDSRTN  TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD TO COUNTER
         SR    R5,R5              CLEAR REGISTER
         IC    R5,TEMPRDS         GET NUMBER OF TEMP READ ERRORS
         B     ADD                GO TO ADD TO COUNTER
TWRTSRTN TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD TO COUNTER
         SR    R5,R5              CLEAR REGISTER
         IC    R5,TEMPWRTS        GET NUMBER OF TEMPORARY WRITE ERRORS
         B     ADD                GO TO ADD THEM TO COUNTER
PRDSRTN  TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD TO COUNTER
         SR    R5,R5              CLEAR REGISTER
         IC    R5,PERMRDS         GET NUMBER OF PERM READ ERRORS
         B     ADD                GO TO ADD TO COUNTER
PWRTSRTN TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD TO COUNTER
         SR    R5,R5              CLEAR REGISTER
         IC    R5,PERMWRTS        GET NUMBER OF PERMANENT WRITE ERRORS
         B     ADD                GO TO ADD THEM TO COUNTER
CLNRRTN  TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD TO COUNTER
         MVC   STOREREG+L2(L2),CLNRACTS GET COUNT FROM RECORD
         L     R5,STOREREG        PUT IT IN REGISTER
         B     ADD                RETURN
ERASERTN TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NOT ADD COUNTERS
         MVC   STOREREG+L2(L2),ERASEGPS GET COUNT FROM RECORD
         L     R5,STOREREG
         B     ADD                GO TO ADD TO COUNTER
SIORTN   STM   R5,R6,STOREREG+4   SAVE REGISTERS
         TM    SWITCHES+L1,DISMOUNT IS THIS A DISMOUNT RECORD
         BCR   8,R14              NO-DO NO ADD TO COUNTER
         MVC   STOREREG+L2(L2),SIOCNT GET THE SIO COUNT FROM THE RECORD
         L     R5,STOREREG        PUT IT INTO A REGISTER
         MVC   STOREREG(L4),L0(R3) GET COUNTER ON BOUNDARY
         L     R6,STOREREG        PUT IT INTO A REGISTER
         AR    R5,R6              ADD THE COUNTS
         ST    R5,STOREREG        PUT COUNTER BACK ON BOUNDARY
         MVC   L0(L4,R3),STOREREG PUT IT BACK IN COUNTER AREA
         XC    STOREREG(4),STOREREG     CLEAR WORK AREA         YM8389P
         LM    R5,R6,STOREREG+4   RELOAD REGISTERS
         BR    R14                RETURN
STOREREG DC    3F'0'
SAVE5    DC    F'0'
ZEROES   DC   4X'00'
ENTRIES  DS    0F
         SPECIAL SETDATES,0,SPACE=4
         SPECIAL PRDSRTN,0,SPACE=1
         SPECIAL PWRTSRTN,0,SPACE=1
         SPECIAL TRDSRTN,0,SPACE=1
         SPECIAL TWRTSRTN,0,SPACE=1
         SPECIAL SIORTN,0,SPACE=2
         SPECIAL NOISERTN,0,SPACE=1
         SPECIAL CPUIDENT,0,SPACE=3
         SPECIAL MODEL,0,SPACE=1
         SPECIAL ERASERTN,0,SPACE=1
         SPECIAL CLNRRTN,0,SPACE=1
         DC    X'FF'
EDIT     DS    0F
&DSECT   SETC   'CNTRAREA'
&CSECT   SETC  'EDIT'
         USING *,R9
         USING CNTRAREA,R2
         DC    A(SUMEDIT)
         DC    CL8'IFCSVOL0'
NINE     DC    F'0'
LABELPTR DC    F'0'
CNTRAREA DSECT
         DS    2H
         DSGEN (VOLIDA,48),(,96)
         DSGEN (LOWDATE,32),(HIDATE,32)
         DSGEN (PRDSCTR,16),(PWRTSCTR,16),(TRDSCTR,16),(TWRTSCTR,16)
         DSGEN (SIOCTR,32),(NOISECTR,16),(SERIAL,24),(ID,24),          C
               (TAPEMOD,16)
         DSGEN (ERASECTR,16),(CLNRCTR,16)
IFCSVOL0 CSECT
*                                                                     *
* THE CONVERT ROUTINES WILL TAKE A COUNTER AND CONVERT IT TO          *
* PRINTABLE EBCDIC CHARACTERS. THEY ALL CONVERT INTO A DIFFERENT      *
* NUMBER OF DIGITS.                                                   *
* CONVERT-3 DIGITS  CONVERT1-4 DIGITS  CONVERT2-5 DIGITS              *
* CONVERT3-6 DIGITS                                                   *
*                                                                     *
*                                                                     *
CONVERT1 ST    R5,SAVE            SAVE REGISTER
         LH    R5,L0(R4)           LOAD COUNTER TO BE CONVERTED
         CVD   R5,DECAREA          CONVERT THE COUNTER
         UNPK  L0(L4,R3),DECAREA(L8) UNPACK AND PLACE IN PRINT BUFFER
         OI    L3(R3),F0           MAKE LAST DIGIT PRINTABLE
         L     R5,SAVE            RESTORE REGISTER
ADD4     LA    R3,4(R3)           CHANGE PRINT BUFFER POINTER    S99223
DONOTHNG BR    R14                 RETURN
CONVERT2 ST    R5,SAVE            SAVE REGISTER
         LH    R5,L0(R4)          GET COUNTER TO BE CONVERTED
         CVD   R5,DECAREA          CONVERT THE COUNTER
         UNPK  L0(L5,R3),DECAREA(L8) UNPACK INTO PRINT BUFFER
         OI    L4(R3),F0           MAKE LAST DIGIT PRINTABLE
         L     R5,SAVE            RESTORE REGISTER
         LA    R3,6(R3)            CHANGE PRINT BUFFER POINTER   S99223
         BR    R14                 RETURN
CONVERT3 ST    R5,SAVE            SAVE THE REGISTER
         MVC   DECAREA(4),L0(R4)   MOVE NUMBER TO INTEGRAL BOUNDARY
         L     R5,DECAREA          PUT NUMBER IN A REGISTER
         CVD   R5,DECAREA         CONVERT COUNTER TO DECIMAL
         UNPK  L0(L6,R3),DECAREA(L8) UNPACK THE COUNTER
         OI    L5(R3),F0          MAKE LAST DIGIT PRINTABLE
         L     R5,SAVE            RESTORE THE REFISTER
ADD6     LA    R3,6(R3)           UPDATE PRINT BUFFER PTR       S99223
         BR    R14                  RETURN
MOVEVOL  MVC   L0(L6,R3),L0(R4)   MOVE VOLID TO PRINT BUFFER
         CLI   TAPEMOD,X'00'      IS TAPE MODEL AVAILABLE        XM9111
         BNE   PUTMOD             PUT MODEL NBR IN PRINT BUFFER  XM9111
         MVC   L72(L3,R3),NA      MOVE N/A TO PRINT BUFFER       XM9111
         B     UPDATE              GO TO PUT OUT DATE            S99223
L72      EQU   72
PUTMOD   MVC   L73(L1,R3),TAPEMOD PUT IN TAPE MODEL NBR          XM9111
UPDATE   LA    R3,12(R3)           CHANGE PRINT BUFFER POINTER   S99223
         LA    R4,LOWDATE          GET ADDRESS OF LOW DATE       S99223
*                                                                     *
* THIS ROUTINE WILL TAKE THE DATES FROM THE HIGH AND LOW DATE ARES    *
* AND PUT THEM INTO THE PRINT BUFFER IN UNPACKED FORMAT.              *
*                                                                     *
GETDATE  UNPK  DECAREA(L5),L1(L3,R4) UNPACK THE DATE
         OI    DECAREA+L4,F0       MAKE LAST DIGIT PRINTABLE
         MVC   L0(L3,R3),DECAREA+L2 MOVE DAY TO PRINT LINE
         MVC   L4(L2,R3),DECAREA   MOVE YEAR TO PRINT LINE
         LA    R3,6(R3)            CHANGE PRINT BUFFER POINTER   S99223
         BR    R14                 RETURN
*                                                                     *
FIRSTIME ST    R7,SAVE                 SAVE REGISTER
         TM    FIRST,FF                IS THIS FIRST TIME THRU CODE
         MVI   FIRST,FF                MOVE FF TO FIRST TIME SWITCH
         BCR   8,R14                   FIRST TIME GO TO SKIP LABELS
         LA    R7,CNTLAB               GET ADDRESS TO UPDATE
         ST    R7,LABELPTR             STORE ADDRESS
         LA    R7,CNTENT-4             GET ADDRESS
         ST    R7,NINE                 STORE THE POINTER
         L     R7,SAVE                 RESTORE SAVED REGISTER
         SR    R15,R15
         BR    R14
CHKNRZI  CLI   L0(R4),X'7C'            IS THIS A PE DRIVE
         BNE   CONVERT1                NO IT IS NRZI
PUTNA    MVC   L1(L3,R3),NA            MOVE N/A TO PRINT BUFFER
         LA    R3,4(R3)            CHANGE PRINT BUFFER POINTER   S99223
         BR    R14
NA       DC    C'N/A'
FIRST    DC    X'00'
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
ADD3     LA    R3,3(R3)            CHANGE PRINT BUFFER POINTER   S99223
         BR    R14                 RETURN                        S99223
ADD14    LA    R3,14(R3)           CHANGE PRINT BUFFER POINTER   S99223
         BR    R14                 RETURN                        S99223
*                                                                     *
*                                                                     *
*                                                                     *
DECAREA  DC    D'0'
SAVE     DC    F'0'
SUMEDIT  DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
         LINE  ,,SKIP=1
         ROUTINE VOLIDA,FIRSTIME
         LABEL ''
         DC    X'01000B8B00'
         LABEL ''
         LINE  ,(35,),SKIP=1
         ROUTINE VOLIDA,DONOTHNG
         LABEL 'SUMMARY--MAGNETIC TAPE ERROR STATISTICS BY VOLUME'
         LINE  ,(1,53)
         ROUTINE VOLIDA,DONOTHNG
         LABEL 'VOLUME  DATE-FROM-  -TO-  --PERM--  --TEMP--  SIO',    C
               'NRZI  --- CPU ---  MOD     ERASE  CLEANER'
         LINE  ,(1,53)
         ROUTINE VOLIDA,DONOTHNG
CNTLAB   LABEL 'SERIAL      DAY YR DAY YR RDS  WRTS RDS  WRTS COUNT',  C
               'NOISE  ID  NUMBER  NO      GAPS   ACTIONS'
CNTENT   LINE  (1,1),,SKIP=2                                     S99223
         ROUTINE VOLIDA,MOVEVOL                                  S99223
         ROUTINE HIDATE,GETDATE                                  S99223
         ROUTINE PRDSCTR,CONVERT1
         ROUTINE PWRTSCTR,CONVERT1
         ROUTINE TRDSCTR,CONVERT1
         ROUTINE TWRTSCTR,CONVERT1
         ROUTINE SIOCTR,CONVERT3
         ROUTINE NOISECTR,CHKNRZI                                S99223
         ROUTINE ID,DONOTHNG                                     S99223
         HEX   ID,0,2B                                           S99223
         ROUTINE ID,ADD3                                         S99223
         HEX   SERIAL,0,3B                                       S99223
         ROUTINE ID,ADD14                                        S99223
         ROUTINE ERASECTR,CONVERT2                               S99223
         ROUTINE CLNRCTR,CONVERT2                                S99223
         LABEL ''
         DC    X'FF'
         DC    6X'00'
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
