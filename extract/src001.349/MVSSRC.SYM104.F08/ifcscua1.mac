         TITLE 'IFCSCUA1  MES DATA SUMMARY BY CUA WITH THRESHOLD'
*                                  THIS MODULE IS INCLUDE AS   @Z40NIVS
*                                  PART OF THE DASDI/TAPE EREP @Z40NIVS
*                                  ENHANCEMENTS.               @Z40NIVS
*                                                              @Z40NIVS
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR3    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT                                   @Z40NIVS
IFCSCUA1 CSECT                                                 @Z40NIVS
&CSECT   SETC  'IFCSCUA1'                                      @Z40NIVS
&DSECT   SETC  'M3420'                                         @Z40NIVS
M3420    DSECT                                                 @Z40NIVS
         DSGEN (CLASSRC,8),(SYSREL,8),(SWITCHES,16),           @Z40NIVSC
               (SPARES,32)                                     @Z40NIVS
         DSGEN (DATE,32),(TIME,32)                             @Z40NIVS
         DSGEN (DUM2,8),(CPUSER,24),(CPUID,16),(DUM3,16)       @Z40NIVS
         DSGEN (,264)                                          @Z40NIVS
         DSGEN (PRIMCUA,8,0,2),(IORETRY,16),(SNSCNT,16)        @Z40NIVS
         DSGEN (VOLID,48),(BLKLENG,16),(,32),(TEMPRDS,8),      @Z40NIVSC
               (TEMPWRTS,8),                                   @Z40NIVSX
               (SIOCNT,16),(PERMRDS,8),(PERMWRTS,8),           @Z40NIVSC
               (NOISEBLK,8),                                   @Z40NIVSX
               (,8),(ERASEGPS,16),(CLNRACTS,16)                @Z40NIVS
         DSGEN (SPAR,8),(NOISE,8),(RWVRC,8),(MTELRCR,8)        @Z40NIVS
         DSGEN (EDCCRC,8),(ENVCKVRC,8),(OVERRUN,4),            @Z40NIVSC
               (SKEWCHK,4),                                    @Z40NIVSC
               (CCOMPARE,4),(WRTTRVRC,4)                       @Z40NIVS
         DSGEN (PEIDCHK,1),(MASKEXP,6),(PARITY,1),             @Z40NIVSC
               (TRKINERR,8),                                   @Z40NIVSC
               (WRTTMCHK,4),(STRDCHK,4),(PARTREC,4),           @Z40NIVSC
               (EXCPAMB,4)                                     @Z40NIVS
         DSGEN (ORDROP,4),(FEEDTHRU,4),(EXP,4),(EARLBGRD,4),   @Z40NIVSC
               (EARLNDRD,4),(SLBGRD,4),(SLWNDRD,4),            @Z40NIVSC
               (VELRETRY,4),                                   @Z40NIVSC
               (EXP2,4),(VELCHNG,4),(EXP3A,4),(EXP3,4),        @Z40NIVSC
               (BACKWARD,8),                                   @Z40NIVSC
               (BUSOCHK,4),(ALUHRDER,4)                        @Z40NIVS
         DSGEN (SNB,1,0,23,0,7)                                @Z40NIVS
         DSGEN (TUSERIAL,16,EQU,SNB150)                        @Z40NIVS
IFCSCUA1 CSECT                                                 @Z40NIVS
         USING M3420,R2                                        @Z40NIVS
         USING *,R9                                            @Z40NIVS
         DC    A(ENTRIES)                                      @Z40NIVS
         DC    A(EDIT)                                         @Z40NIVS
REG8     DC    F'0'                                            @Z40NIVS
SCSIZE   DC    H'544'                                          @Z40NIVS
R2       EQU   2                                               @Z40NIVS
R3       EQU   3                                               @Z40NIVS
R4       EQU   4                                               @Z40NIVS
R5       EQU   5                                               @Z40NIVS
R6       EQU   6                                               @Z40NIVS
R7       EQU   7                                               @Z40NIVS
R8       EQU   8                                               @Z40NIVS
R9       EQU   9                                               @Z40NIVS
R14      EQU   14                                              @Z40NIVS
R15      EQU   15                                              @Z40NIVS
L0       EQU   0                                               @Z40NIVS
L1       EQU   1                                               @Z40NIVS
L2       EQU   2                                               @Z40NIVS
L3       EQU   3                                               @Z40NIVS
L4       EQU   4                                               @Z40NIVS
L5       EQU   5                                               @Z40NIVS
L6       EQU   6                                               @Z40NIVS
L7       EQU   7                                               @Z40NIVS
L8       EQU   8                                               @Z40NIVS
L28      EQU   28                                              @Z40NIVS
ZERO     EQU   0                                               @Z40NIVS
ONE      EQU   1                                               @Z40NIVS
TWO      EQU   2                                               @Z40NIVS
THREE    EQU   3                                               @Z40NIVS
FOUR     EQU   4                                               @Z40NIVS
FIVE     EQU   5                                               @Z40NIVS
SIX      EQU   6                                               @Z40NIVS
SEVEN    EQU   7                                               @Z40NIVS
EIGHT    EQU   8                                               @Z40NIVS
TWELVE   EQU   12                                              @Z40NIVS
L16      EQU   16                                              @Z40NIVS
L20      EQU   20                                              @Z40NIVS
L22      EQU   22                                              @Z40NIVS
L24      EQU   24                                              @Z40NIVS
L78      EQU   78                                              @Z40NIVS
L12      EQU   12                                              @Z40NIVS
R12      EQU   12                                              @Z40NIVS
L59      EQU   59                                              @Z40NIVS
L64      EQU   64                                              @Z40NIVS
L76      EQU   76                                              @Z40NIVS
L77      EQU   77                                              @Z40NIVS
L84      EQU   84                                              @Z40NIVS
L86      EQU   86                                              @Z40NIVS
DISMOUNT EQU   X'84'                                           @Z40NIVS
MOUNT    EQU   X'04'                                           @Z427VLS
F0       EQU   X'F0'                                           @Z40NIVS
FF       EQU   X'FF'                                           @Z40NIVS
DUMMYR   EQU   X'FE'                                           @Z40NIVS
FOXZERO  EQU   X'F0'                                           @Z40NIVS
LSTDEV   EQU   X'10'                                           @Z40NIVS
FSTSW    EQU   X'01'                                           @Z40NIVS
DECIMAL  EQU   C'.'                                            @Z40NIVS
         SPACE 2                                               @Z40NIVS
DEVICES  STM   R5,R8,XSAVE         SAVE THE REGS               @Z40NIVS
         TM    FOUR(R2),DUMMYR     IS THIS A DUMMY RECORD      @Z40NIVS
         BO    DONTSUM             YES, DON'T SUM IT           @Z40NIVS
         IC    R5,L59(R2)          GET CUA AND DEV ADDR        @Z40NIVS
         SLL   R5,L28              ISOLATE DEV AND             @Z40NIVS
         SRL   R5,L22              MULTIPLY BY 64              @Z40NIVS
         LA    R5,L64(R5)          ADD 64                      @Z40NIVS
         AR    R5,R3               POINT TO CORRECT SUM FIELD  @Z40NIVS
         ST    R5,THISDEVA         SAVE THE ADDRESS            @Z40NIVS
         ST    R3,THISDUMM         SAVE THE DUMMY SUM  AREA    @Z40NIVS
         MVC   ZERO(L64,R3),ZERO(R5) MOVE DATA TO DUMMY AREA   @Z40NIVS
         TM    L3(R2),DISMOUNT     IS THIS A DISMOUNT?         @Z40NIVS
         BZ    CUAS                NO, RETURN                  @Z40NIVS
TEMPRD   LH    R5,ZERO(R3)         GET RDERRS                  @Z40NIVS
         SR    R6,R6               CLEAR WORKREG               @Z40NIVS
         IC    R6,L76(R2)          GET NO. TEMP READ ERRORS    @Z40NIVS
         AR    R5,R6               SUM                         @Z40NIVS
         STH   R5,ZERO(R3)         PUT INTO SUM COUNTER        @Z40NIVS
TEMPWRT  LH    R5,TWO(R3)          GET WRITE ERROR SUM         @Z40NIVS
         IC    R6,L77(R2)          WRITE ERRORS THIS RECORD    @Z40NIVS
         AR    R5,R6               SUM                         @Z40NIVS
         STH   R5,TWO(R3)          PUT INTO SUM COUNTER        @Z40NIVS
STRTIOS  L     R5,FOUR(R3)         GET SIO SUM                 @Z40NIVS
         XR    R6,R6               CLEAR REG 6                 @Z40NIVS
         ICM   R6,THREE,L78(R2)    LOAD SIO COUNT              @Z40NIVS
         AR    R5,R6               SUM                         @Z40NIVS
         C     R5,TEN9             HAS OVERFLOW ACCURED        @Z40NIVS
         BH    SETR59S             IF YES SET MAXIMUN VALUE    @Z40NIVS
         ST    R5,FOUR(R3)         PUT INTO SUM COUNTER        @Z40NIVS
CLNACTS  L     R5,EIGHT(R3)        GET CLEANER ACTION SUM      @Z40NIVS
         LH    R6,L86(R2)          GET NO. THIS RECORD         @Z40NIVS
         AR    R5,R6               SUM                         @Z40NIVS
         ST    R5,EIGHT(R3)        PUT INTO SUM COUNTER        @Z40NIVS
ERASGAPS L     R5,TWELVE(R3)       GET ERASE GAP CTR           @Z40NIVS
         LH    R6,L84(R2)          GET NO. THIS RECORD         @Z40NIVS
         AR    R5,R6               SUM                         @Z40NIVS
         ST    R5,TWELVE(R3)       PUT INTO SUM COUNTER        @Z40NIVS
CUAS     MVC   L24(TWO,R3),PRIMCUA1  SAVE THE CUA              @Z40NIVS
FIRSTDAT L     R5,L16(R3)          GET HIDATE                  @Z40NIVS
         LTR   R5,R5               DOES IT EXIST?              @Z40NIVS
         BZ    HIANDLO             NO, GO UPDATE BOTH DATES    @Z40NIVS
         L     R6,EIGHT(R2)        GET OBRDATE                 @Z40NIVS
         CR    R5,R6               NEW HIGHER?                 @Z40NIVS
         BNH   UPHI                IF SO, GO UPDATE HIDATE     @Z40NIVS
         L     R5,L20(R3)          GET LODATE                  @Z40NIVS
         CR    R5,R6               NEW LOWER?                  @Z40NIVS
         BNL   UPLO                IF SO, GO UPDATE LODATE     @Z40NIVS
         B     SPRET3              GO SET R3 FOR SUMS          @Z40NIVS
SETR59S  MVC   FOUR(FOUR,R3),TEN9  SET MAXIMUM VALUE           @Z40NIVS
         B     CLNACTS             CONTINUE PROCESSING         @Z40NIVS
HIANDLO  L     R6,EIGHT(R2)        GET OBRDATE                 @Z40NIVS
         ST    R6,L16(R3)          SET HIDATE                  @Z40NIVS
         ST    R6,L20(R3)          SET LODATE                  @Z40NIVS
         B     SPRET3              GO SET R3 FOR SUMS          @Z40NIVS
UPHI     ST    R6,L16(R3)          SET NEW HIDATE              @Z40NIVS
         B     SPRET3              GO SET R3 FOR SUMS          @Z40NIVS
UPLO     ST    R6,L20(R3)          SET NEW LODATE              @Z40NIVS
*        B     SPRET3              GO SET R3 FOR SUMS          @Z40NIVS
SPRET3   LM    R5,R8,XSAVE         RESTORE REGS                @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
DONTSUM  LA    R5,ENDSUM-SIX       GET ENDING FF               @Z40NIVS
         ST    R5,EIGHT(R9)        MAKE IT CURRENT             @Z40NIVS
         LM    R5,R8,XSAVE         RESTORE THE REGS            @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
MOVEBACK STM   R5,R6,XSAVE         SAVE THE REGS               @Z40NIVS
         L     R5,THISDEVA         GET SUM AREA                @Z40NIVS
         L     R6,THISDUMM         GET DUMMY SUM ADDRESS       @Z40NIVS
         MVC   ZERO(L64,R5),ZERO(R6)  MOVE TO SUM AREA         @Z40NIVS
         LM    R5,R6,XSAVE         RESTORE THE REGS            @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
SUMMOUNT TM    L3(R2),MOUNT        CHECK IF DISMOUNT ONLY, NO EOD
         BNOR  R14                 NOT A DISMOUNT, GET OUT     @Z427VLS
         ST    R5,XSAVE            SAVE R5                     @Z427VLS
         L     R5,MOUNTS           LOAD MOUNTS                 @Z427VLS
         LA    R5,ONE(R5)          ADD 1 TO DISMOUNT           @Z427VLS
         ST    R5,MOUNTS           SAVE                        @Z427VLS
         LA    R5,ONE              LOAD R5 WITH ONE            @Z427VLS
         B     SUM                 GO TO SUM                   @Z427VLS
SUMECC   ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,ENVCKVRC         GET THE FIELD               @Z40NIVS
         B     BOTH                GO ISOLATE IT               @Z40NIVS
SUMSTRD  ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,STRDCHK          GET THE FIELD               @Z40NIVS
         B     RIGHT               GO ISOLATE IT               @Z40NIVS
SUMPART  ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,PARTREC          GET THE FIELD               @Z40NIVS
         B     LEFT                GO ISOLATE IT               @Z40NIVS
SUMOVER  ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,OVERRUN          GET THE FIELD               @Z40NIVS
         B     LEFT                GO ISOLATE IT               @Z40NIVS
SUMVEL   ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,VELCHNG          GET THE FIELD               @Z40NIVS
         B     RIGHT               GO ISOLATE IT               @Z40NIVS
SUMIBG   ST    R5,XSAVE            SAVE R5                     @Z40NIVS
         IC    R5,ORDROP           GET THE FIELD               @Z40NIVS
LEFT     SLL   R5,L24              SHIFT OUT UNWANTED BITS     @Z40NIVS
         SRL   R5,L28              SHIFT TO LOW ORDER          @Z40NIVS
         B     SUM                 GO GET TOTAL                @Z40NIVS
RIGHT    SLL   R5,L28              SHIFT UNWANTED BITS         @Z40NIVS
         SRL   R5,L28              BACK TO LOW ORDER           @Z40NIVS
         B     SUM                 GO GET TOTAL                @Z40NIVS
BOTH     SLL   R5,L24              SHIFT UNWANTED BITS         @Z40NIVS
         SRL   R5,L24              BACK TO LOW ORDER           @Z40NIVS
SUM      AH    R5,ZERO(R3)         ADD EXISTING COUNT          @Z40NIVS
         STH   R5,ZERO(R3)         SAVE NEW TOTAL              @Z40NIVS
         L     R5,XSAVE            RESTORE R5                  @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
THISDEVA DS    F                   SAVE AREA FOR TRUE SUM AREA @Z40NIVS
THISDUMM DS    F                   ADDRESS OF DUMMY SUM AREA   @Z40NIVS
ENTRIES  DS    0F                                              @Z40NIVS
         SPECIAL DEVICES,0,SPACE=13                            @Z40NIVS
         SPECIAL SUMMOUNT,0,SPACE=1                            @Z427VLS
         SPECIAL SUMECC,0,SPACE=1                              @Z40NIVS
         SPECIAL SUMSTRD,0,SPACE=1                             @Z40NIVS
         SPECIAL SUMPART,0,SPACE=1                             @Z40NIVS
         SPECIAL SUMOVER,0,SPACE=1                             @Z40NIVS
         SPECIAL SUMVEL,0,SPACE=1                              @Z40NIVS
         SPECIAL SUMIBG,0,SPACE=1                              @Z40NIVS
         SPECIAL MOVEBACK,0,SPACE=1 GO MOVE DATE TO REAL CTR.  @Z40NIVS
ENDSUM   DC    X'FF'                                           @Z40NIVS
EDIT     DS    0F                                              @Z40NIVS
&DSECT   SETC  'BEGINEDT'                                      @Z40NIVS
&CSECT   SETC  'EDIT'                                          @Z40NIVS
         USING *,R9                                            @Z40NIVS
         USING HDR,R2                                          @Z40NIVS
         DC    A(SUMEDIT)                                      @Z40NIVS
         DC    CL8'IFCSCUA1'                                   @Z40NIVS
NINE     EQU   *                                               @Z40NIVS
LINE     DC    F'0'                                            @Z40NIVS
LABELPTR DC    F'0'                                            @Z40NIVS
BEGINEDT DSECT                                                 @Z40NIVS
         DSGEN (HDR,176)                                       @Z40NIVS
         DSGEN (RDERR,16),(WRTERR,16),(SIOS,32)                @Z40NIVS
         DSGEN (BEGIN,16,EQU,RDERR)                            @Z40NIVS
         DSGEN (CAS,32),(ERGS,32),(HIDATE,32),(LODATE,32)      @Z40NIVS
         DSGEN (THISCUA,16)                                    @Z40NIVS
         DSGEN (PCCOMP,16),(ECCVRC,16),(STRD,16),(PART,16)     @Z40NIVS
         DSGEN (OVER,16),(VELCH,16),(IBG,16)                   @Z40NIVS
IFCSCUA1 CSECT                                                 @Z40NIVS
*                                                                     *
* THE CONVERT ROUTINES WILL TAKE A COUNTER AND CONVERT IT TO          *
* PRINTABLE EBCDIC CHARACTERS. THEY ALL CONVERT INTO A DIFFERENT      *
* NUMBER OF DIGITS.                                                   *
*  CONVERT ---- FOUR DIGITS TO SIX DIGITS
*  CONVERT1 --- TWO DIGITS TO FOUR DIGITS
*  CONVERT2 --- TWO DIGITS TO SIX DIGITS
*  CONVERT3 --- FOUR DIGITS TO EIGHT DIGITS
*                                                                     *
*                                                                     *
CONVERT  ST    R5,SAVE             SAVE THE REGISTER           @Z40NIVS
         MVC   DECAREA(FOUR),L0(R4) MOVE NUMBER TO INTEGRAL    @Z40NIVS
         L     R5,DECAREA          GET INTO REG                @Z40NIVS
         CVD   R5,DECAREA          CONVERT TO DECIMAL          @Z40NIVS
         UNPK  ZERO(L6,R3),DECAREA+FOUR(L4) UNPACK THE COUNTER @Z40NIVS
         OI    FIVE(R3),FOXZERO    OR IN THE SIGN              @Z40NIVS
         L     R5,SAVE             RESTORE THE REGISTER        @Z40NIVS
         BR    14                  RETURN                      @Z40NIVS
CONVERT1 ST    R5,SAVE             SAVE REGISTER               @Z40NIVS
         MVC   SAVENBR+L2(L2),L0(R4) GET NUMBER TO CONVERT     @Z40NIVS
         L     R5,SAVENBR                                      @Z40NIVS
         CVD   R5,DECAREA          CONVERT THE COUNTER         @Z40NIVS
         UNPK  L0(L5,R3),DECAREA(L8) UNPACK INTO PRINT BUFFER  @XA19162
         OI    L4(R3),F0             MAKE LAST DIGIT PRINTABLE @XA19162
         L     R5,SAVE             RESTORE REGISTER            @Z40NIVS
DONOTHNG BR    R14                 RETURN                      @Z40NIVS
CONVERT2 ST    R5,SAVE             SAVE REGISTER               @Z40NIVS
         MVC   SAVENBR+L2(L2),L0(R4) GET NUMBER TO CONVERT     @Z40NIVS
         L     R5,SAVENBR                                      @Z40NIVS
         CVD   R5,DECAREA          CONVERT THE COUNTER         @Z40NIVS
         UNPK  L0(L6,R3),DECAREA(L8) UNPACK INTO PRINT BUFFER  @Z40NIVS
         OI    L5(R3),F0           MAKE LAST DIGIT PRINTABLE   @Z40NIVS
         L     R5,SAVE             RESTORE REGISTER            @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
CONVERT3 ST    R5,SAVE             SAVE THE REGISTER           @Z40NIVS
         MVC   DECAREA(FOUR),L0(R4)   MOVE NUMBER TO INTEGRAL BOUNDARY
         L     R5,DECAREA          PUT NUMBER IN A REGISTER    @Z40NIVS
         CVD   R5,DECAREA          CONVERT COUNTER TO DECIMAL  @Z40NIVS
         UNPK  L0(L8,R3),DECAREA(L8) UNPACK THE COUNTER        @Z40NIVS
         OI    L7(R3),F0           MAKE LAST DIGIT PRINTABLE   @Z40NIVS
         L     R5,SAVE             RESTORE THE REFISTER        @Z40NIVS
         LA    R3,FOUR(R3)         INCREMENT PRINT BUFFER PTR  @Z427VLS
         BR    R14                 RETURN                      @Z40NIVS
*                                                                     *
* THIS ROUTINE WILL TAKE THE DATES FROM THE HIGH AND LOW DATE ARES    *
* AND PUT THEM INTO THE PRINT BUFFER IN UNPACKED FORMAT.              *
*                                                                     *
GETDATE  UNPK  DECAREA(L5),L1(L3,R4) UNPACK THE DATE           @Z40NIVS
         OI    DECAREA+L4,F0       MAKE LAST DIGIT PRINTABLE   @Z40NIVS
         MVC   L0(L5,R3),DECAREA   MOVE YEAR TO PRINT LINE     @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
*                                                                     *
         SPACE 2                                               @Z40NIVS
ROUTER   STM   R5,R8,XSAVE1        SAVE REGISTERS              @Z40NIVS
         LA    R5,CALLINE-FOUR     GET DETAIL LINE AND         @Z40NIVS
         LA    R6,CALLABEL-ONE     DETAIL LABEL AND            @Z40NIVS
         STM   R5,R6,LINE          SAVE
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
CALCDEV  STM   R5,R8,XSAVE1        SAVE REGS                   @Z40NIVS
RELD8    L     R8,DEVOFFST         GET NEXT DEVICE TO PROCESS  @Z40NIVS
CHKNXTDV CLI   DEVOFFST+THREE,LSTDEV   LAST DEVICE?            @Z40NIVS
         BNL   DONE                YES, LEAVE                  @Z40NIVS
         LR    R7,R8               PUT OFFSET IN R7 ALSO       @Z40NIVS
         LA    R8,ONE(R8)          INCREMENT DEVICE PRT        @Z40NIVS
         ST    R8,DEVOFFST         SAVE IT                     @Z40NIVS
         SLL   R7,SIX              MULTIPLY BY 64              @Z40NIVS
         LA    R7,L64(R7)          ADD 64                      @Z40NIVS
         LR    R6,R4               GET BASE START IN R6        @Z40NIVS
         AR    R6,R7               ADD OFFSET TO CORRECT SET   @Z40NIVS
         CLC   FOUR(FOUR,R6),ZEROES  ANY SIOS?                 @Z40NIVS
         BE    CHKNXTDV            NO, TRY NEXT UNIT           @Z40NIVS
         B     CHKHDR              GO GET PERCENT ERRORS       @Z40NIVS
DONE     XC    DEVOFFST(FOUR),DEVOFFST RESET DEVICE OFFSET     @Z40NIVS
         MVI   FIRST,ZERO          RESET ALL SWITCHES          @Z40NIVS
         LA    R12,ONE             FAKE OUT IFCEP008           @Z40NIVS
         LA    R5,ENDLINE-FOUR     GET ENDING LINE             @Z40NIVS
         LA    R6,ENDLABEL-ONE     AND ENDING LABEL            @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
*        B     SKIPPRNT            RETURN                      @Z40NIVS
*                                  WITHOUT PRINT               @Z40NIVS
SKIPPRNT SR    R15,R15             CLEAR REG FOR NO PRINT      @Z40NIVS
RETURN   LM    R5,R8,XSAVE1        RESTORE THE REGS            @Z40NIVS
SKIPPER  BR    R14                 RETURN                      @Z40NIVS
         SPACE 2                                               @Z40NIVS
PRTHDR   OI    FIRST,FSTSW         SET FIRST TIME SWITCH       @Z40NIVS
         IC    R5,DEVOFFST+THREE   GET DEVICE OFFSET AND       @Z40NIVS
         BCTR  R5,ZERO             DECREMENT BY ONE SO WILL    @Z40NIVS
         STC   R5,DEVOFFST+THREE   PRINT LINE NEXT TIME        @Z40NIVS
         LA    R12,ONE             FAKE OUT IFCEP008           @Z40NIVS
         LA    R5,HDRLINE-FOUR     FOR THIS TIME MAKE THE      @Z40NIVS
         LA    R6,HDRLABEL-ONE     HEADER LINE AND LABEL       @Z40NIVS
         STM   R5,R6,LINE          CURRENT AND                 @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
         SPACE 2                                               @Z40NIVS
CHKHDR   TM    FIRST,FSTSW         HAS HEADER BEEN PRINTED     @Z40NIVS
         BZ    PRTHDR              NO,  GO PRINT IT            @Z40NIVS
         SPACE 2                                               @Z40NIVS
CALCPERC LA    R7,SIX              CONSTANT SIX                @Z40NIVS
         LR    R5,R3               GET PRINT POSITION          @Z40NIVS
         SR    R5,R7               BACKUP                      @Z40NIVS
         L     R7,DEVOFFST         GET DEVICE OFFSET           @Z40NIVS
         IC    R7,TABLE(R7)        GET CORRECT LAST DIGIT      @Z40NIVS
         STC   R7,ZERO(R5)         STORE INTO PRINT LINE       @Z40NIVS
         LA    R5,THREE            CONSTANT 3                  @Z40NIVS
         SR    R3,R5               BACK UP PRINT POSIT         @Z40NIVS
         MVC   ZERO(L64,R4),ZERO(R6) MOVE FOR ADDRESSABILITY   @Z40NIVS
         L     R6,SYSSIOS          GET NUJBER OF STARTIOS      @Z40NIVS
         A     R6,FOUR(R4)         ADD SIOS FOR THIS DEVICE    @Z40NIVS
         ST    R6,SYSSIOS          AND PUT INTO SUM CTR        @Z40NIVS
         L     R6,SYSRDS           GET NUMBER OF READS         @Z40NIVS
         AH    R6,ZERO(R4)         ADD TEMP RD ERRS THIS DEV   @Z40NIVS
         ST    R6,SYSRDS           PUT INTO SUM COUNTER        @Z40NIVS
         L     R6,SYSWRTS          GET NUMBER OF WRT ERRS      @Z40NIVS
         AH    R6,TWO(R4)          ADD TEMP WRT ERRS THIS DEV  @Z40NIVS
         ST    R6,SYSWRTS          PUT INTO SUM COUNTER        @Z40NIVS
         LH    R7,RDERR            GET READ ERRORS             @Z40NIVS
         L     R6,HUNDREDK         GET CONSTANT 100000         @Z40NIVS
         MR    R6,R6               MULTIBYL READS BY 100000    @Z40NIVS
         CVD   R7,DIVIDEND         CONVERT THE RESULT          @Z40NIVS
         MVC   SAVE(L4),SIOS       MOVE TO BOUNDARY            @Z40NIVS
         L     R7,SAVE             GET NUMBER OF SIOS          @Z40NIVS
         BAL   R8,PERC             GO CONVERT TO PERCENTAGE    @Z40NIVS
         LA    R3,SIX(R3)          POINT TO NEW PRINT POSITION @Z40NIVS
         LH    R7,WRTERR           GET WRITE ERRORS            @Z40NIVS
         L     R6,HUNDREDK         GET CONSTANT 100000         @Z40NIVS
         MR    R6,R6               WRITES TIMES 100000         @Z40NIVS
         CVD   R7,DIVIDEND         CONVERT THE RESULT          @Z40NIVS
         MVC   SAVE(FOUR),SIOS     MOVE TO BOUNDARY            @Z40NIVS
         L     R7,SAVE             GET NUMBER OF SIOS          @Z40NIVS
         BAL   R8,PERC             GO CONVERT TO PERCENTAGE    @Z40NIVS
         LA    R3,ONE(R3)          INCREMENT PRINT POSITION    @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
BACK2    LA    R4,TWO              CONSTANT 2                  @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
BACK3    LA    R4,THREE            CONSTANT 3                  @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
BACK4    LA    R4,FOUR             CONSTANT 4                  @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
BACK5    LA    R4,FIVE             CONSTANT 5                  @Z40NIVS
         SR    R3,R4               BACKUP                      @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
AGAIN    STM   R5,R8,XSAVE1        SAVE THE REGS               @Z40NIVS
         LA    R5,CALLINE-FOUR     GET CALC LINE ADDRESS       @Z40NIVS
         LA    R6,CALLABEL-ONE     GET CALC LABEL ADDRESS      @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINT        @Z40NIVS
SYSTOT   STM   R5,R8,XSAVE1        SAVE REGS                   @Z40NIVS
         L     R7,SYSRDS           GET SYSTEM READS            @Z40NIVS
         L     R6,HUNDREDK         CONSTANT 100000             @Z40NIVS
         MR    R6,R6               READS TIMES 100000          @Z40NIVS
         CVD   R7,DIVIDEND         CONVERT THE RESULT          @Z40NIVS
         L     R7,SYSSIOS          GET SUBSYSTEM SIOS          @Z40NIVS
         LTR   R7,R7               CHECK FOR ANY SIO'S         @Z40NIVS
*                                  WHICH MEANS HAVE HAD AT     @Z40NIVS
*                                  LEAST ONE RECORD            @Z40NIVS
         BZ    NOSYSTOT            NONE,  GO SET UP MESSAGE    @Z40NIVS
         BAL   R8,PERC             GO CALCULATE PERCENTAGE     @Z40NIVS
         LA    R3,SIX(R3)          POINT TO NEW PRINT POSITION @Z40NIVS
         L     R7,SYSWRTS          GET SYSTEM WRITES           @Z40NIVS
         L     R6,HUNDREDK         CONSTANT 100000             @Z40NIVS
         MR    R6,R6               WRITES TIMES 100000         @Z40NIVS
         CVD   R7,DIVIDEND         CONVERT THE RESULT          @Z40NIVS
         L     R7,SYSSIOS          GET THE DIVISOR             @Z40NIVS
         BAL   R8,PERC             GO CALCULATE PERCENTAGE     @Z40NIVS
         STM   R14,R15,SAVEPNTR    SAVE LINK REGISTERS         @Z427VLS
         LA    R3,21(R3)           BUMP PRINT REGISTER         @Z427VLS
         LA    R4,SYSSIOS          GET TOTAL SYSTEM START IOS  @Z427VLS
         BAL   R14,CONVERT3        CONVERT INTO PRINT LINE     @Z427VLS
         LA    R3,SIX(R3)          BUMP PRINT POINTER          @Z427VLS
         LA    R4,MOUNTS+L2        GET TOTAL SYSTEM DISMOUNTS  @Z427VLS
         BAL   R14,CONVERT1        CONVERT INTO PRINT LINE     @Z427VLS
         LA    R3,SEVEN(R3)        BUMP PRINT POINTER          @Z427VLS
         LA    R4,SYSRDS           GET TOTAL SYSTEM READ ERRORS
         BAL   R14,CONVERT         CONVERT INTO PRINT LINE     @Z427VLS
         LA    R3,17(R3)           BUMP PRINT POINTER          @Z427VLS
         LA    R4,SYSWRTS          GET TOTAL SYSTEM WRITE ERRORS
         BAL   R14,CONVERT         CONVERT INTO PRINT LINE     @Z427VLS
         LM    R14,R15,SAVEPNTR    RESTORE LINK REGISTERS      @Z427VLS
         XC    SYSSIOS(L16),SYSSIOS CLEAR COUNTERS             @Z427VLS
         B     RETURN              RETURN TO PRINT LINE        @Z40NIVS
NOSYSTOT LA    R5,NOTOTAL-FOUR     GET NOTOTAL LINE AND        @Z40NIVS
         LA    R6,NOTOTALA-ONE     NOTOTAL LABEL AND           @Z40NIVS
         STM   R5,R6,LINE          MAKE THEM CURRENT           @Z40NIVS
         B     SKIPPRNT            RETURN WITHOUT PRINTING     @Z40NIVS
         SPACE 2                                               @Z40NIVS
PERC     CVD   R7,DIVISOR          CONVERT TO DECIMAL          @Z40NIVS
         XC    DIVEXT(EIGHT),DIVEXT  CLEAR DIVIDEND EXTENSION  @Z40NIVS
         DP    DIVEXT(L16),DIVISOR DO THE DIVIDE               @Z40NIVS
         CLC   DIVEXT(EIGHT),THOUSX  GT 100?                   @Z40NIVS
         BNL   GT100               YES, BRANCH                 @Z40NIVS
         UNPK  DIVEXT(L3),DIVEXT+SIX(L2) UNPACK THE RESULT     @Z40NIVS
         MVC   ZERO(L2,R3),DIVEXT+ONE  MOVE TO PRINT LINE      @Z40NIVS
         OI    ONE(R3),FOXZERO     OR IN SIGN                  @Z40NIVS
         MVI   TWO(R3),DECIMAL     MOVE IN DECIMAL POINT       @Z40NIVS
         XC    DIVEXT(EIGHT),DIVEXT  CLEAR FOR NEXT CALC       @Z40NIVS
         MP    DIVEXT(L16),D100(TWO) TIMES 100
         DP    DIVEXT(L16),DIVISOR DO THE DIVIDE               @Z40NIVS
         UNPK  DIVEXT(L3),DIVEXT+SIX(L2)                       @Z40NIVS
         MVC   THREE(L2,R3),DIVEXT+ONE  MOVE TO PRINT LINE     @Z40NIVS
         OI    FOUR(R3),FOXZERO    OR IN SIGN                  @Z40NIVS
         BR    R8                  RETURN TO CALLER            @Z40NIVS
GT100    MVC   ZERO(FOUR,R3),HUNDPLUS  INDICATE GT 100         @Z40NIVS
         BR    R8                  RETURN                      @Z40NIVS
THOUSX   DC    X'0000000000001000'                             @Z40NIVS
HUNDPLUS DC    C'100+'                                         @Z40NIVS
TEN9     DC    F'999999999'                                    @Z40NIVS
         DS    0D                                              @Z40NIVS
XSAVE    DC    3F'0'                                           @Z40NIVS
FIRST    DC    X'00'                                           @Z40NIVS
SYSSIOS  DC    F'0'                SUBSYSTEM SIOS              @Z40NIVS
SYSRDS   DC    F'0'                SUBSYSTEM READ ERRORS       @Z40NIVS
SYSWRTS  DC    F'0'                SUBSYSTEM WRITE ERRORS      @Z40NIVS
MOUNTS   DC    F'0'                                            @Z427VLS
SAVEPNTR DS    2F                                              @Z427VLS
XSAVE1   DS    4F                  REGISTER SAVE AREA          @Z40NIVS
DEVOFFST DC    F'0'                OFFSET TO NEXT DEVICE       @Z40NIVS
DIVISOR  DC    D'0'                                            @Z40NIVS
DIVEXT   DS    D                                               @Z40NIVS
DIVIDEND DC    D'0'                                            @Z40NIVS
HUNDREDK DC    F'100000'             CONSTANT 100000           @XA19162
ZEROES   DC    XL4'00000000'                                   @Z40NIVS
D100     DC    X'100C'             CONSTANT 100                @Z40NIVS
TABLE    DC    C' 0123456789ABCDEF'                            @Z40NIVS
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
DECAREA  DC    D'0'                                            @Z40NIVS
SAVENBR  DC    F'0'                                            @Z40NIVS
SAVE     DC    F'0'                                            @Z40NIVS
SUMEDIT  DS    0F                                              @Z40NIVS
         DC    X'00010001'                                     @Z40NIVS
         DC    X'00010001'                                     @Z40NIVS
         DC    A(LABELS)                                       @Z40NIVS
         DC    H'0'                                            @Z40NIVS
         LINE  (1,1),(40,1),SKIP=1                             @Z40NIVS
         LABEL '34XX/3803 SUBSYSTEM TEMPORARY ERROR SUMMARY'
         LINE
         ROUTINE BEGIN,ROUTER                                  @Z40NIVS
         LABEL ''                                              @Z40NIVS
HDRLINE  LINE  ,(7,49)                                         @Z427VLS
HDRLABEL LABEL 'ERRORS/100K',                                  @Z40NIVSX
               ' READ            WRITE        ECC'             @Z427VLS
         LINE  ,(11,45)                                        @Z40NIVS
         LABEL 'SIOS           DATE      TOTAL    TOTAL    ST',        X
               'ATISTICS       STATISTICS     VRC   STRD  PAR',        X
               'T  OVER  VEL   IBG'                            @Z427VLS
         LINE  ,(2,45)                                         @Z40NIVS
         LABEL 'CUA   READ  WRITE  -FROM---TO--    SIOS   MOU',        X
               'NTS. ERRORS  CLNRAC . ERRORS  ERSGAP . ENV   ',        X
               'CHK   RECK  RUN   CHG   DET'                   @Z427VLS
CALLINE  LINE  (5,6),(50,17),SKIP=1                            @Z427VLS
         HEX   THISCUA,,2B                                     @Z40NIVS
         ROUTINE BEGIN,CALCDEV                                 @Z40NIVS
         ROUTINE LODATE,GETDATE                                @Z40NIVS
         ROUTINE BEGIN,BACK5                                   @Z40NIVS
         ROUTINE HIDATE,GETDATE                                @Z40NIVS
         ROUTINE BEGIN,BACK5                                   @Z40NIVS
         ROUTINE SIOS,CONVERT3                                 @Z40NIVS
         ROUTINE PCCOMP,CONVERT1                               @Z427VLS
         ROUTINE BEGIN,BACK5                                   @Z427VLS
         ROUTINE RDERR,CONVERT2                                @Z40NIVS
         ROUTINE BEGIN,BACK4                                   @Z40NIVS
         ROUTINE CAS,CONVERT                                   @Z40NIVS
         ROUTINE BEGIN,BACK3                                   @Z40NIVS
         ROUTINE WRTERR,CONVERT2                               @Z40NIVS
         ROUTINE BEGIN,BACK4                                   @Z40NIVS
         ROUTINE ERGS,CONVERT                                  @Z40NIVS
         ROUTINE BEGIN,BACK3                                   @Z40NIVS
         ROUTINE ECCVRC,CONVERT1                               @Z40NIVS
         ROUTINE STRD,CONVERT1                                 @Z40NIVS
         ROUTINE PART,CONVERT1                                 @Z40NIVS
         ROUTINE OVER,CONVERT1                                 @Z40NIVS
         ROUTINE VELCH,CONVERT1                                @Z40NIVS
         ROUTINE IBG,CONVERT1                                  @Z40NIVS
CALLABEL LABEL '.','.','.'                                     @Z40NIVS
         LINE  (5,6),(45,17),SKIP=1                            @Z40NIVS
         ROUTINE BEGIN,AGAIN                                   @Z40NIVS
         LABEL ''                                              @Z40NIVS
ENDLINE  LINE  (8,6),(1,40),SKIP=1                             @Z40NIVS
         ROUTINE BEGIN,DONOTHNG                                @Z427VLS
ENDLABEL LABEL ''                                              @Z427VLS
         LINE  (8,6),(1,40),SKIP=1                             @Z427VLS
         ROUTINE BEGIN,SYSTOT                                  @Z427VLS
         LABEL 'TOTALS'                                        @Z427VLS
         DC    X'FF000000000000'                               @Z40NIVS
NOTOTAL  LINE  ,(1,60),SKIP=1                                  @Z40NIVS
NOTOTALA LABEL 'NO TEMPORARY ERRORS ENCOUNTERED'               @Z40NIVS
         DC    X'FF000000000000'                               @Z40NIVS
         DC    C'$'                                            @Z40NIVS
LABELS   EQU   *                                               @Z40NIVS
         LSTART                                                @Z40NIVS
         END
