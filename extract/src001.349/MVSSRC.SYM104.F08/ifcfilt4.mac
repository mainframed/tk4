         TITLE 'IFCFILT4-RECORD FILTER FOR EVENT HISTORY REPORT        *
                        '
IFCFILT4 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFILT4  78.209'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*                  /*PROCESS ERROR RECORDS SEQUENTIALLY      @Z427VLS*/
* CALL DBUGSET;            /*SET ITEMS REQUESTED VIA DEBUG   @G51DGGB*/
         BAL   @14,DBUGSET                                         0253
* IF DEBUG16 = ON                THEN  /*SPECIAL CASE COMMING UP*/ 0254
         TM    DEBUG16(R2),B'10000000'                             0254
         BNO   @RF00254                                            0254
*  DO;                                                     /*@0099VLS*/
*   IF VOLPTR ^= ZERO THEN      /*USER ASK FOR VOLUME SELECTION*/  0256
         L     @14,VOLPTR(,R2)                                     0256
         LTR   @14,@14                                             0256
         BZ    @RF00256                                            0256
*    VOLTRY = ONE;              /*SET FOR USE IN DEBUG OUT SECTION*/
         MVC   VOLTRY(2),@CH00055                                  0257
*                               /*BE THE INDEX FOR THE OUTPUT    */
*   IF CPUPTR ^= ZERO THEN      /*USER ASK FOR CPU SELECTION @0099VLS*/
@RF00256 L     @14,CPUPTR(,R2)                                     0258
         LTR   @14,@14                                             0258
         BZ    @RF00258                                            0258
*    CPUTRY = ONE;              /*SET OUTPUT INDEX FOR CPUS  @0099VLS*/
         MVC   CPUTRY(2),@CH00055                                  0259
*   IF TERM ^= '        ' THEN  /*USER ASK FOR TERMINAL FILTERING  */
@RF00258 CLC   TERM(8,R2),@CC01004                                 0260
         BE    @RF00260                                            0260
*    TERMTRY = ONE;             /*SET THE TERMINAL OUT INDEX @0099VLS*/
         MVC   TERMTRY(4),@CF00055                                 0261
*  END;                                                    /*@0099VLS*/
@RF00260 DS    0H                                                  0263
*  CALL GETCORE;   /*GET CORE FOR SORTABLE AND EVTABLE       @Z427VLS*/
@RF00254 BAL   @14,GETCORE                                         0263
*  R15 = ERROR; /*SEE WHAT HAPPENED IN GETCORE               @Z427VLS*/
         L     R15,ERROR                                           0264
*  DO WHILE R15 = SUCCESS & I <= MAXENT; /*DO IF ROOM I SORTABLE*/ 0265
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*    CALL IOHND(READSEQ);                        /*GET A RECORD*/  0266
         L     @15,ADIOHND(,R2)                                    0266
         LA    @01,@AL00266                                        0266
         BALR  @14,@15                                             0266
*    IF R15 = SUCCESS THEN  /*CONTINUE IF NOT EOF OR UNREADABLE*/  0267
         LTR   R15,R15                                             0267
         BNZ   @RF00267                                            0267
*      DO;                                                 /*@Z427VLS*/
*        BYTECT = BYTECT + RECLNGTH;                       /*@Z427VLS*/
         LH    @14,RECLNGTH(,R2)                                   0269
         AL    @14,BYTECT                                          0269
         ST    @14,BYTECT                                          0269
*        NUMREC = NUMREC + ONE;              /*NUMBER OF RECORDS READ*/
         LA    @14,1                                               0270
         L     @08,NUMREC                                          0270
         ALR   @08,@14                                             0270
         ST    @08,NUMREC                                          0270
*RESPECIFY (R0) RESTRICTED;                                /*@0099VLS*/
*        R0 = LRTKEY1;          /*LOAD THE RECORD TYPE       @Z427VLS*/
         SLR   R0,R0                                               0272
         IC    R0,LRTKEY1(,R7)                                     0272
*      SRL(R0,FOUR);            /*REMOVE UNWANTED BITS       @0099VLS*/
         SRL   R0,4                                                0273
*   IF R0 < 1 × R0 > 11           /* IF NOT A VALID TYPE MUST CHANGE */
*       THEN                                                       0274
         CR    R0,@14                                              0274
         BL    @RT00274                                            0274
         C     R0,@CF00033                                         0274
         BNH   @RF00274                                            0274
@RT00274 DS    0H                                                  0275
*        DO;                                               /*@0099VLS*/
*        ODDREC = ON;           /*TURN ON SWITCH FOR DEBUG   @0099VLS*/
         OI    ODDREC,B'00000010'                                  0276
*       RTYP1 = 10;                                        /*@0099VLS*/
         LA    @14,10                                              0277
         ST    @14,RTYP1                                           0277
*       R0 = 10;                                           /*@0099VLS*/
         LR    R0,@14                                              0278
*                               /*ARRAYS                     @0099VLS*/
*        END;                                              /*@0099VLS*/
*       ELSE                                                       0280
*        RTYP1 = R0;                                       /*@Z427VLS*/
         B     @RC00274                                            0280
@RF00274 ST    R0,RTYP1                                            0280
*      IF LRTKEY1 ^= 'A0'X & LRTKEY1 ^= 'B0'X THEN         /*@VS48726*/
@RC00274 CLI   LRTKEY1(R7),X'A0'                                   0281
         BE    @RF00281                                            0281
         CLI   LRTKEY1(R7),X'B0'                                   0281
         BE    @RF00281                                            0281
*        INCOUNT(R0) = INCOUNT(R0) + ONE;                  /*@Z427VLS*/
         LR    @14,R0                                              0282
         SLA   @14,2                                               0282
         LA    @08,1                                               0282
         AL    @08,INCOUNT-4(@14)                                  0282
         ST    @08,INCOUNT-4(@14)                                  0282
*      IF DEBUG47 ^= ON THEN /*DO THEY ONLY WANT FRAMES OUTPUT*/   0283
@RF00281 TM    DEBUG47(R2),B'00000001'                             0283
         BO    @RF00283                                            0283
*        PASSFLAG = YES;   /*SET THE FLAG TO ON PRIOR TO CALL*/    0284
         OI    PASSFLAG(R2),B'00000001'                            0284
*      ELSE                                                        0285
*       DO;                                                /*@G51DGGB*/
         B     @RC00283                                            0285
@RF00283 DS    0H                                                  0286
*        PASSFLAG = OFF;   /*DO NOT ALLOW RECORD TO PASS     @G51DGGB*/
         NI    PASSFLAG(R2),B'11111110'                            0286
*      IF LRTKEY1 ^= 'A0'X & LRTKEY1 ^= 'B0'X THEN         /*@VS48726*/
         CLI   LRTKEY1(R7),X'A0'                                   0287
         BE    @RF00287                                            0287
         CLI   LRTKEY1(R7),X'B0'                                   0287
         BE    @RF00287                                            0287
*        RDEPCT(R0) = RDEPCT(R0) + 1;/*KEEP TRACK OF DROPPED RECORDS*/
         LR    @14,R0                                              0288
         SLA   @14,2                                               0288
         LA    @08,1                                               0288
         AL    @08,RDEPCT-4(@14)                                   0288
         ST    @08,RDEPCT-4(@14)                                   0288
*       END;                                               /*@G51DGGB*/
@RF00287 DS    0H                                                  0290
*           IF RTYP1 = TEN ×  /*IS IT A MCF TYPE RECORD      @G51DGGB*/
*           RTYP1 = ELEVEN THEN /*IS IT A CCF TYPE OF RECORD @G51DGGB*/
@RC00283 L     @14,RTYP1                                           0290
         C     @14,@CF00034                                        0290
         BE    @RT00290                                            0290
         C     @14,@CF00033                                        0290
         BNE   @RF00290                                            0290
@RT00290 DS    0H                                                  0291
*           DO;                                            /*@G51DGGB*/
*            FRINDEX = RTYP1 - 9; /*SET INDEX TO 1 OR 2      @G51DGGB*/
         L     @14,RTYP1                                           0292
         SL    @14,@CF00035                                        0292
         ST    @14,FRINDEX                                         0292
*            FRMREAD(FRINDEX) = FRMREAD(FRINDEX) + 1;      /*@G51DGGB*/
         ALR   @14,@14                                             0293
         LA    @08,1                                               0293
         AH    @08,FRMREAD-2(@14)                                  0293
         STH   @08,FRMREAD-2(@14)                                  0293
*           IF DEBUG47 = ON THEN                                   0294
         TM    DEBUG47(R2),B'00000001'                             0294
         BNO   @RF00294                                            0294
*            DO;                                           /*@G51DGGB*/
*            IF PHIST = ON THEN                                    0296
         TM    PHIST(R2),B'00100000'                               0296
         BNO   @RF00296                                            0296
*             CALL IOHND(RITESCRT);                        /*@G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0297
         LA    @01,@AL00297                                        0297
         BALR  @14,@15                                             0297
*             IF R15 = ZERO THEN                                   0298
@RF00296 LTR   R15,R15                                             0298
         BNZ   @RF00298                                            0298
*             DO;                                          /*@G51DGGB*/
*             CALL ADDTABLE;     /*ADD TO THE SORT TABLE     @G51DGGB*/
         BAL   @14,ADDTABLE                                        0300
*             CALL EVSET;        /*ADD TO EVTABLE            @G51DGGB*/
         BAL   @14,EVSET                                           0301
*             KEPT(FRINDEX) = KEPT(FRINDEX) + 1;           /*@G51DGGB*/
         L     @14,FRINDEX                                         0302
         ALR   @14,@14                                             0302
         LA    @08,1                                               0302
         AH    @08,KEPT-2(@14)                                     0302
         STH   @08,KEPT-2(@14)                                     0302
*             END;                                         /*@G51DGGB*/
*             PASSFLAG = OFF;    /*SET FLAG SO RECORD PROCESSING STOPS*
@RF00298 NI    PASSFLAG(R2),B'11111110'                            0304
*            END;                                          /*@G51DGGB*/
*            ELSE                                                  0306
*            CALL CKFRAMES;      /*IF FRAME MAY WANT TO KEEP @G51DGGB*/
         B     @RC00294                                            0306
@RF00294 BAL   @14,CKFRAMES                                        0306
*                                /*PASSFLAG WILL RETURN IN NO CONDITON*
*           END;                                           /*@G51DGGB*/
@RC00294 DS    0H                                                  0308
*RESPECIFY (R0) UNRESTRICTED;                              /*@G51DGGB*/
@RF00290 DS    0H                                                  0309
*      IF PASSFLAG = ON THEN    /*STOP PROCESSING THIS REC IF OFF*/
         TM    PASSFLAG(R2),B'00000001'                            0309
         BNO   @RF00309                                            0309
*        CALL ALLREC; /*PERFORM SELECTIONS FROM RECORD HEADER*/    0310
         BAL   @14,ALLREC                                          0310
*        IF PASSFLAG = ON THEN                                     0311
@RF00309 TM    PASSFLAG(R2),B'00000001'                            0311
         BNO   @RF00311                                            0311
*         DO;                                              /*@Z427VLS*/
*           MIDCOUNT(RTYP1) = MIDCOUNT(RTYP1) + ONE;       /*@Z427VLS*/
         L     @14,RTYP1                                           0313
         SLA   @14,2                                               0313
         LA    @08,1                                               0313
         AL    @08,MIDCOUNT-4(@14)                                 0313
         ST    @08,MIDCOUNT-4(@14)                                 0313
*  IF CPUPTR ^= ZERO THEN                                          0314
         L     @14,CPUPTR(,R2)                                     0314
         LTR   @14,@14                                             0314
         BZ    @RF00314                                            0314
*   CALL CPUSELCT  ;                                       /*@0099VLS*/
         BAL   @14,CPUSELCT                                        0315
*  IF PASSFLAG = ON THEN                                           0316
@RF00314 TM    PASSFLAG(R2),B'00000001'                            0316
         BNO   @RF00316                                            0316
*   CALL RECDEP;                                           /*@0099VLS*/
         BAL   @14,RECDEP                                          0317
*          IF PASSFLAG = ON THEN /*INSERT IN EVTABLE IF YES  @0001VLS*/
@RF00316 TM    PASSFLAG(R2),B'00000001'                            0318
         BNO   @RF00318                                            0318
*           CALL EVSET;          /*WILL INSERT IF NEW CPU    @0001VLS*/
         BAL   @14,EVSET                                           0319
*           IF PASSFLAG = ON THEN                                  0320
@RF00318 TM    PASSFLAG(R2),B'00000001'                            0320
         BNO   @RF00320                                            0320
*            DO;                                           /*@Z427VLS*/
*           OUTCOUNT(RTYP1) = OUTCOUNT(RTYP1) + ONE;       /*@Z427VLS*/
         L     @14,RTYP1                                           0322
         SLA   @14,2                                               0322
         LA    @08,1                                               0322
         AL    @08,OUTCOUNT-4(@14)                                 0322
         ST    @08,OUTCOUNT-4(@14)                                 0322
*            IF PACC = YES THEN    /*HISTORY D.S. TO BE CREATED*/  0323
         TM    PACC(R2),B'01000000'                                0323
         BNO   @RF00323                                            0323
*                CALL IOHND(RITEHIST);  /*WRITE TO ACCDEV    @Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0324
         LA    @01,@AL00324                                        0324
         BALR  @14,@15                                             0324
*            IF R15 = SUCCESS                                      0325
*              THEN DO;                                    /*@Z427VLS*/
@RF00323 LTR   R15,R15                                             0325
         BNZ   @RF00325                                            0325
*                IF PHIST = ON THEN /*IF HISTORY INPUT, MUST SAVE*/
         TM    PHIST(R2),B'00100000'                               0327
         BNO   @RF00327                                            0327
*                  DO;              /*RECORDS ON D.A.D.S.    @Z427VLS*/
*                    CALL IOHND(RITESCRT);                 /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0329
         LA    @01,@AL00329                                        0329
         BALR  @14,@15                                             0329
*                    IF R15 = OVERFLOW THEN                        0330
         C     R15,@CF00066                                        0330
         BNE   @RF00330                                            0330
*                     DO;                                  /*@Z427VLS*/
*                      ZEROALL = NO; /*DONT CLEAR SERLOG IF ALL*/  0332
         NI    ZEROALL(R2),B'10111111'                             0332
*                      PASSNUM = PASSNUM - ONE;/*REC.NOT PROCESSED*/
         L     @14,PASSNUM                                         0333
         BCTR  @14,0                                               0333
         ST    @14,PASSNUM                                         0333
*                     END;                                 /*@Z427VLS*/
*                  END;                                    /*@Z427VLS*/
@RF00330 DS    0H                                                  0336
*                IF R15 = SUCCESS THEN  /*SAVE RECORD LOCATION AND*/
@RF00327 LTR   R15,R15                                             0336
         BNZ   @RF00336                                            0336
*                 CALL ADDTABLE;  /*ADD THIS ENTRY TO SORT TABLE*/ 0337
         BAL   @14,ADDTABLE                                        0337
*              END;                                        /*@Z427VLS*/
*           ELSE                                                   0339
*            ZEROALL = NO;   /*MAKE SURE WE DONT ZERO        @Z427VLS*/
         B     @RC00325                                            0339
@RF00325 NI    ZEROALL(R2),B'10111111'                             0339
*           END;                                           /*@Z427VLS*/
@RC00325 DS    0H                                                  0341
*          END;                                            /*@Z427VLS*/
@RF00320 DS    0H                                                  0342
*      END;                                                /*@Z427VLS*/
@RF00311 DS    0H                                                  0343
*  END;                                                    /*@Z427VLS*/
@RF00267 DS    0H                                                  0343
@DE00265 LTR   R15,R15                                             0343
         BNZ   @DC00265                                            0343
         L     @14,I                                               0343
         C     @14,MAXENT                                          0343
         BNH   @DL00265                                            0343
@DC00265 DS    0H                                                  0344
*                    RESPECIFY(R1,R0) UNRESTRICTED;        /*@Z427VLS*/
*  ERROR = R15; /*TELL ENDOFILE THE ERROR STATUS             @Z427VLS*/
         ST    R15,ERROR                                           0345
*  CALL ENDOFILE; /*SORT SORTABLE, FREE EXCESS CORE, HANDLE  @Z427VLS*/
         BAL   @14,ENDOFILE                                        0346
*                 /*ERROR CONDITIONS                         @Z427VLS*/
*  IF EXCESSCT ^= ZERO THEN             /*TO MANY CPU'S IN INPUT DATA*/
         L     @14,EXCESSCT                                        0347
         LTR   @14,@14                                             0347
         BZ    @RF00347                                            0347
*    DO;                                                   /*@Z427VLS*/
*     CVD(EXCESSCT,PACKPAS);                               /*@Z427VLS*/
         CVD   @14,@TS00001                                        0349
         MVC   PACKPAS(4),@TS00001+4                               0349
*     UNPK(CT,PACKPAS);                                    /*@Z427VLS*/
         UNPK  CT(8),PACKPAS(4)                                    0350
*     GEN(OI  CT+7,X'F0');                                 /*@Z427VLS*/
         OI  CT+7,X'F0'
*     NONBLANK = OFF;                                      /*@Z427VLS*/
         NI    NONBLANK,B'01111111'                                0352
*     DO J = 1 BY 1 TO 9 ;                                 /*@Z427VLS*/
         LA    @14,1                                               0353
         ST    @14,J                                               0353
@DL00353 DS    0H                                                  0354
*      IF CTARRAY(J) = CHARZERO                                    0354
*       THEN                                                       0354
         LA    @08,CTARRAY-1(@14)                                  0354
         CLI   0(@08),X'F0'                                        0354
         BNE   @RF00354                                            0354
*        CTARRAY(J) = BLANK;                               /*@Z427VLS*/
         LA    @08,CTARRAY-1(@14)                                  0355
         MVI   0(@08),X'40'                                        0355
*       ELSE                                                       0356
*        NONBLANK = ON;                                    /*@Z427VLS*/
         B     @RC00354                                            0356
@RF00354 OI    NONBLANK,B'10000000'                                0356
*     END;                                                 /*@Z427VLS*/
@RC00354 LA    @14,1                                               0357
         AL    @14,J                                               0357
         ST    @14,J                                               0357
         C     @14,@CF00035                                        0357
         BNH   @DL00353                                            0357
*     MSGNO = 5;                                           /*@Z427VLS*/
         MVC   MSGNO(4),@CF00079                                   0358
*     CALL ERRMSG;                                         /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0359
*    END;                                                  /*@Z427VLS*/
*IF DEBUG11 = ON                                                   0361
* THEN                                                             0361
@RF00347 TM    DEBUG11(R2),B'00010000'                             0361
         BNO   @RF00361                                            0361
*  GEN(ABEND  420,DUMP);                                   /*@Z427VLS*/
         ABEND  420,DUMP
*R15 = ERROR;                                              /*@Z427VLS*/
@RF00361 L     R15,ERROR                                           0363
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*GETCORE: PROC; /* GET CORE FOR SORTABLE AND EVTABLE         @Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0365
@EF00001 DS    0H                                                  0365
@ER00001 L     @14,12(,@13)                                        0365
         LM    @00,@12,20(@13)                                     0365
         BR    @14                                                 0365
GETCORE  STM   @14,@12,@SA00002                                    0365
*RESPECIFY(R0,R1,R15)RESTRICTED;                           /*@Z427VLS*/
*  R15 = ZERO;                                             /*@Z427VLS*/
         SLR   R15,R15                                             0367
*          TABSIZE = TABSIZE + EVSIZE;                     /*@Z427VLS*/
         LA    @14,104                                             0368
         AL    @14,TABSIZE(,R2)                                    0368
         ST    @14,TABSIZE(,R2)                                    0368
*          R0 =  TABSIZE; /*HELP COMPILER ACCESS TABSIZE     @Z427VLS*/
         LR    R0,@14                                              0369
*          GEN(GETMAIN EC,LV=(R0),A=EVPTR1);               /*@Z427VLS*/
         GETMAIN EC,LV=(R0),A=EVPTR1
*          ERROR = R15;                                    /*@0001VLS*/
         ST    R15,ERROR                                           0371
*          IF R15  = ZERO THEN                                     0372
         LTR   R15,R15                                             0372
         BNZ   @RF00372                                            0372
*            DO;                                           /*@Z427VLS*/
*              EVPTR = EVPTR1;                             /*@Z427VLS*/
         L     @14,EVPTR1                                          0374
         ST    @14,EVPTR(,R2)                                      0374
*              SORTADR = EVPTR1 +  EVSIZE ;                /*@Z427VLS*/
         LA    @08,104                                             0375
         LR    @06,@14                                             0375
         ALR   @06,@08                                             0375
         ST    @06,SORTADR(,R2)                                    0375
*              MAXENT =(TABSIZE- EVSIZE) / 10;             /*@Z427VLS*/
         LR    @04,@08                                             0376
         LCR   @04,@04                                             0376
         AL    @04,TABSIZE(,R2)                                    0376
         SRDA  @04,32                                              0376
         D     @04,@CF00034                                        0376
         ST    @05,MAXENT                                          0376
*              EVTABLE = (EVTABLE && EVTABLE);/*EVNUM IMPLICITLY 0.*/
         XC    EVTABLE(102,@14),EVTABLE(@14)                       0377
*            END;                                          /*@Z427VLS*/
*          ELSE                                                    0379
*            DO;                                           /*@Z427VLS*/
         B     @RC00372                                            0379
@RF00372 DS    0H                                                  0380
*              MSGNO = 2;                                  /*@Z427VLS*/
         MVC   MSGNO(4),@CF00074                                   0380
*              CALL ERRMSG;                                /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0381
*            END;                                          /*@Z427VLS*/
*IF ERROR =  SUCCESS THEN/*  OTHER GETMAINS HAVE BEEN SUCCESSFULL*/
@RC00372 L     @14,ERROR                                           0383
         LTR   @14,@14                                             0383
         BNZ   @RF00383                                            0383
*  DO;                                                     /*@G51DGGB*/
*    R0 = FRAMBENT * EVMAXENT;/* # OF ENTRIES * BYTES/ENTRY  @G51DGGB*/
         LA    R0,384                                              0385
*    R0 = R0 + 4;           /*ADD FRAMENUM LENGTH            @G51DGGB*/
         AL    R0,@CF00064                                         0386
*    GEN(GETMAIN EC,LV=(0),A=TEMP11,SP=21);                /*@G51DGGB*/
         GETMAIN EC,LV=(0),A=TEMP11,SP=21
*    FRAMEPTR = TEMP11;      /*SET IN THE ADDRESS OF THE TABLE*/   0388
         L     @14,TEMP11                                          0388
         ST    @14,FRAMEPTR(,R2)                                   0388
*    IF R15 = SUCCESS THEN   /*IF GETMAIN SUCCESSFULL        @G51DGGB*/
         LTR   R15,R15                                             0389
         BNZ   @RF00389                                            0389
*      DO;                                                 /*@G51DGGB*/
*        DO Y = 1 BY 1 TO EVMAXENT; /*CLEAR FRAMETAB TO ZERO @G51DGGB*/
         LA    @14,1                                               0391
         ST    @14,Y                                               0391
@DL00391 DS    0H                                                  0392
*          FRAMEDTA(Y) = (FRAMEDTA(Y) && FRAMEDTA(Y));     /*@G51DGGB*/
         LR    @08,@14                                             0392
         MH    @08,@CH00227                                        0392
         L     @06,FRAMEPTR(,R2)                                   0392
         ALR   @06,@08                                             0392
         AL    @06,@CF01618                                        0392
         XC    FRAMEDTA-4(24,@06),FRAMEDTA-4(@06)                  0392
*        END;                                              /*@G51DGGB*/
         AL    @14,@CF00055                                        0393
         ST    @14,Y                                               0393
         C     @14,@CF00088                                        0393
         BNH   @DL00391                                            0393
*        FRAMENUM = ZERO;  /*SET NEW CORE TO ZERO            @G51DGGB*/
         L     @14,FRAMEPTR(,R2)                                   0394
         SLR   @08,@08                                             0394
         ST    @08,FRAMENUM(,@14)                                  0394
*      END;                                                /*@G51DGGB*/
*  ELSE  /*UNSUCCESSFULL GETMAIN                             @G51DGGB*/
*    DO;                                                   /*@G51DGGB*/
         B     @RC00389                                            0396
@RF00389 DS    0H                                                  0397
*      R15 = TWELVE;  /*DONT CONTINUE RETURN CODE            @G51DGGB*/
         LA    R15,12                                              0397
*      MSGNO = XX;   /*ERROR MESSAGE NUMBER                  @G51DGGB*/
         MVC   MSGNO(4),@CF00081                                   0398
*      CALL ERRMSG;  /*PRINT ERROR MESSAGE                   @G51DGGB*/
         BAL   @14,ERRMSG                                          0399
*    END;                                                  /*@G51DGGB*/
* END; /*END OF FRAMETAB GETMAIN                             @G51DGGB*/
*DCL EVPTR1 FIXED(31) INIT(0);                             /*@Z427VLS*/
*RESPECIFY(R0,R1,R15) UNRESTRICTED;                        /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00002 DS    0H                                                  0404
@EF00002 DS    0H                                                  0404
@ER00002 LM    @14,@12,@SA00002                                    0404
         BR    @14                                                 0404
*HEXDUMP: PROC; /*HEXDUMP THE CURRENT RECORD                 @0099VLS*/
HEXDUMP  STM   @14,@12,@SA00003                                    0405
* NUMBER = 66;                    /*SET UP FOR 132 BYTES/LINE    */
         LA    @08,66                                              0406
         ST    @08,NUMBER                                          0406
* ADDNXT = ADDR(PRINTBDY);        /*ADDRESS OF WHERE TO PUT THE DATA*/
         LA    @06,PRINTBDY                                        0407
         ST    @06,ADDNXT                                          0407
* DO M = 66 BY 66 TO RECLNGTH;    /*DO ENTIRE RECORD         @0099VLS*/
         ST    @08,M                                               0408
         B     @DE00408                                            0408
@DL00408 DS    0H                                                  0409
*  CALL CONVERT;/*GO CONVERT THE RECORD TO PRINTABLE         @0099VLS*/
         BAL   @14,CONVERT                                         0409
*  NEXTBY = NEXTBY + 66;      /*MOVE TO THE NEXT 66 BYTES    @0099VLS*/
         LA    @08,66                                              0410
         AL    @08,NEXTBY                                          0410
         ST    @08,NEXTBY                                          0410
*  CALL PRINTIT;                /*GO AND PRINT THE LINE      @0099VLS*/
         BAL   @14,PRINTIT                                         0411
* END;                                                     /*@0099VLS*/
         LA    @08,66                                              0412
         AL    @08,M                                               0412
         ST    @08,M                                               0412
@DE00408 CH    @08,RECLNGTH(,R2)                                   0412
         BNH   @DL00408                                            0412
* NUMBER = RECLNGTH - (M - 66); /*SEE IF ANY BYTES LEFT      @0099VLS*/
         L     @08,M                                               0413
         SL    @08,@CF01439                                        0413
         LCR   @08,@08                                             0413
         AH    @08,RECLNGTH(,R2)                                   0413
         ST    @08,NUMBER                                          0413
* IF NUMBER > ZERO THEN         /*IF ANY BYTES LEFT PRINT THEM    */
         LTR   @08,@08                                             0414
         BNP   @RF00414                                            0414
*  DO;                                                     /*@0099VLS*/
*   CALL CONVERT;              /*GO AND CONVERT THE REST OF BYTES */
         BAL   @14,CONVERT                                         0416
*   CALL PRINTIT;             /*GO PRINT THE DATA LINE       @0099VLS*/
         BAL   @14,PRINTIT                                         0417
*  END;                                                    /*@0099VLS*/
* END;                                                     /*@0099VLS*/
@EL00003 DS    0H                                                  0419
@EF00003 DS    0H                                                  0419
@ER00003 LM    @14,@12,@SA00003                                    0419
         BR    @14                                                 0419
*/********************************************************************/
*/*      THIS PROC WILL DETERMINE IF THE RECORD HAS A VOLID ASSOC */
*/*      WITH THIS RECORD(BY DEVICE) KEEP TRACK  OF THE # OF SAMPLES*/
*/*      (DEBUG16) AND THEN DETERMINE IF THE VOLID MATCHES THE ONE(S)*/
*/*      IN THE COMM TABLE BUILT BY IFCEPARM                 @0099VLS*/
*VOLID:  PROC;                                             /*@0099VLS*/
VOLID    STM   @14,@12,@SA00004                                    0420
*PASSFLAG = NO;                                            /*@0099VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0421
*VOLFLAG = ZERO;                      /*SET UP FOR NOT FOUND @0099VLS*/
         SLR   @08,@08                                             0422
         STH   @08,VOLFLAG                                         0422
*SPCCOUNT = SPCCOUNT + ONE;  /*COUNT OF RECORDS PROCESSED BY THIS PRO*/
         LA    @08,1                                               0423
         AL    @08,SPCCOUNT                                        0423
         ST    @08,SPCCOUNT                                        0423
*/*    FIRST TEST FOR MDR RECORDS THEN OBR USE VOLFLAG AS A FLAG*/ 0424
*/*    TO INDICATE A RECORD WITH A VOLID & AN INDEX FOR DEBUG16   */
*/*    IF NEITHER O OR T THEN MUST BE A DDR WITH VOILD IN 2 PLACES*/
*IF RTYP1 = NINE THEN                 /*IS IT AN MDR RECORD  @0099VLS*/
         CLC   RTYP1(4),@CF00035                                   0424
         BNE   @RF00424                                            0424
* DO;                                                      /*@0099VLS*/
* IF TPRDEV = '01'X × TPRDEV = '09'X × TPRDEV = '11'X ×            0426
*    TPRDEV = '0A'X THEN                                           0426
         CLI   TPRDEV(R7),X'01'                                    0426
         BE    @RT00426                                            0426
         CLI   TPRDEV(R7),X'09'                                    0426
         BE    @RT00426                                            0426
         CLI   TPRDEV(R7),X'11'                                    0426
         BE    @RT00426                                            0426
         CLI   TPRDEV(R7),X'0A'                                    0426
         BNE   @RF00426                                            0426
@RT00426 DS    0H                                                  0427
*  VOLFLAG = 1;                                            /*@0099VLS*/
         MVC   VOLFLAG(2),@CH00055                                 0427
* END;                                                     /*@0099VLS*/
* ELSE                                                             0429
* IF RTYP1 = THREE THEN               /*IS IT AN OBR RECORD  @0099VLS*/
         B     @RC00424                                            0429
@RF00424 CLC   RTYP1(4),@CF00076                                   0429
         BNE   @RF00429                                            0429
*  DO;                                                     /*@0099VLS*/
* IF OBRCLASS = '20'X THEN                                         0431
         CLI   OBRCLASS(R7),X'20'                                  0431
         BNE   @RF00431                                            0431
*  VOLFLAG = 2;                                            /*@0099VLS*/
         MVC   VOLFLAG(2),@CH00074                                 0432
* ELSE                                                             0433
*  IF OBRCLASS = '80'X THEN                                        0433
         B     @RC00431                                            0433
@RF00431 CLI   OBRCLASS(R7),X'80'                                  0433
         BNE   @RF00433                                            0433
*   VOLFLAG = 3;                                           /*@0099VLS*/
         MVC   VOLFLAG(2),@CH00076                                 0434
*  ELSE                                                            0435
*   IF OBRDEV = '0844'X × OBRDEV = '0843'X THEN                    0435
         B     @RC00433                                            0435
@RF00433 CLC   OBRDEV(2,R7),@CB01447                               0435
         BE    @RT00435                                            0435
         CLC   OBRDEV(2,R7),@CB01448                               0435
         BNE   @RF00435                                            0435
@RT00435 DS    0H                                                  0436
*    VOLFLAG = 2;                                          /*@0099VLS*/
         MVC   VOLFLAG(2),@CH00074                                 0436
*  END;                                                    /*@0099VLS*/
*     ELSE                                                         0438
*    VOLFLAG = 4;  /*FOR A DDR RECORD                        @0099VLS*/
         B     @RC00429                                            0438
@RF00429 MVC   VOLFLAG(2),@CH00064                                 0438
*IF VOLFLAG ^= ZERO THEN              /*DID WE HAVE ANY MATCH*/    0439
@RC00429 DS    0H                                                  0439
@RC00424 LH    @08,VOLFLAG                                         0439
         LTR   @08,@08                                             0439
         BZ    @RF00439                                            0439
* DO;                                                      /*@0099VLS*/
*  NOTYPECT = ON;                     /*TELL WORLD WE FOUND SOMEONE*/
         OI    NOTYPECT,B'00001000'                                0441
*  VOLCOUNT(VOLFLAG) = VOLCOUNT(VOLFLAG) + ONE; /*ONES FOUND @0099VLS*/
         SLA   @08,2                                               0442
         LA    @06,1                                               0442
         AL    @06,VOLCOUNT-4(@08)                                 0442
         ST    @06,VOLCOUNT-4(@08)                                 0442
*  CALL VOLSEL;                       /*SEE IF REC IS ANY GOOD*/   0443
         BAL   @14,VOLSEL                                          0443
*  IF PASSFLAG = YES THEN             /*ALLOW RECORD TO PASS @0099VLS*/
         TM    PASSFLAG(R2),B'00000001'                            0444
         BNO   @RF00444                                            0444
*   VOLPASS(VOLFLAG) = VOLPASS(VOLFLAG) + ONE; /*ONES THAT FAIL*/  0445
         LH    @08,VOLFLAG                                         0445
         SLA   @08,2                                               0445
         LA    @06,1                                               0445
         AL    @06,VOLPASS-4(@08)                                  0445
         ST    @06,VOLPASS-4(@08)                                  0445
* END;                                                     /*@0099VLS*/
*END;/*END OF VOL PROC                                       @0099VLS*/
@EL00004 DS    0H                                                  0447
@EF00004 DS    0H                                                  0447
@ER00004 LM    @14,@12,@SA00004                                    0447
         BR    @14                                                 0447
*/*******************************************************************/
*/*    THIS PROC WILL COMPARE THE COMM TABLE VOLID WITH THE ONE IN  */
*/*    THE RECORD FOR DDR HAS TO CHECK IN 2 PLACES           @0099VLS*/
*VOLSEL: PROC;  /*DETERMINE IF RECORD MATCHES SELECTED VOLID @0099VLS*/
VOLSEL   STM   @14,@12,12(@13)                                     0448
* VOLOK = NO;                     /*FLAG TO CONTROL LOOP     @0099VLS*/
         NI    VOLOK,B'11111110'                                   0449
* PASSFLAG = NO;                  /*ASSUME WILL FAIL         @0099VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0450
* IF RTYP1 = SIX THEN             /*IS AN DDR TYPE RECORD    @0099VLS*/
         CLC   RTYP1(4),@CF00081                                   0451
         BNE   @RF00451                                            0451
*  DO J = 1 BY 1 TO VOLNUM WHILE(VOLOK = NO);              /*@0099VLS*/
         LA    @08,1                                               0452
         ST    @08,J                                               0452
         B     @DE00452                                            0452
@DL00452 TM    VOLOK,B'00000001'                                   0452
         BNZ   @DC00452                                            0452
*   IF VOLVAL(J) = DDRVOL1 × VOLVAL(J) = DDRVOL2 THEN              0453
         MH    @08,@CH00081                                        0453
         L     @06,VOLPTR(,R2)                                     0453
         ST    @08,@TF00001                                        0453
         ALR   @08,@06                                             0453
         AL    @08,@CF01620                                        0453
         CLC   VOLVAL-2(6,@08),DDRVOL1(R7)                         0453
         BE    @RT00453                                            0453
         AL    @06,@TF00001                                        0453
         AL    @06,@CF01620                                        0453
         CLC   VOLVAL-2(6,@06),DDRVOL2(R7)                         0453
         BNE   @RF00453                                            0453
@RT00453 DS    0H                                                  0454
*    VOLOK = YES;                                          /*@0099VLS*/
         OI    VOLOK,B'00000001'                                   0454
*  END;                                                    /*@0099VLS*/
@RF00453 LA    @08,1                                               0455
         AL    @08,J                                               0455
         ST    @08,J                                               0455
@DE00452 L     @06,VOLPTR(,R2)                                     0455
         CH    @08,VOLNUM(,@06)                                    0455
         BNH   @DL00452                                            0455
@DC00452 DS    0H                                                  0456
* ELSE                                                             0456
* DO;                                                      /*@0099VLS*/
         B     @RC00451                                            0456
@RF00451 DS    0H                                                  0457
* IF RTYP1 = NINE THEN             /*RECORD IS AN MDR        @0099VLS*/
         CLC   RTYP1(4),@CF00035                                   0457
         BNE   @RF00457                                            0457
*   VOLCOMP = TPRVOL;                                      /*@0099VLS*/
         MVC   VOLCOMP(6),TPRVOL(R7)                               0458
*  ELSE                                                            0459
*   VOLCOMP = OBRVOL ;   /*HAS T BE AN OBR RECORD            @0099VLS*/
         B     @RC00457                                            0459
@RF00457 MVC   VOLCOMP(6),OBRVOL(R7)                               0459
* DO J = 1 BY 1 TO VOLNUM WHILE (VOLOK = NO);              /*@0099VLS*/
@RC00457 LA    @08,1                                               0460
         ST    @08,J                                               0460
         B     @DE00460                                            0460
@DL00460 TM    VOLOK,B'00000001'                                   0460
         BNZ   @DC00460                                            0460
*  IF VOLVAL(J) = VOLCOMP THEN                                     0461
         MH    @08,@CH00081                                        0461
         L     @06,VOLPTR(,R2)                                     0461
         ALR   @06,@08                                             0461
         AL    @06,@CF01620                                        0461
         CLC   VOLVAL-2(6,@06),VOLCOMP                             0461
         BNE   @RF00461                                            0461
*     VOLOK = YES;                                         /*@0099VLS*/
         OI    VOLOK,B'00000001'                                   0462
* END;                                                     /*@0099VLS*/
@RF00461 LA    @08,1                                               0463
         AL    @08,J                                               0463
         ST    @08,J                                               0463
@DE00460 L     @06,VOLPTR(,R2)                                     0463
         CH    @08,VOLNUM(,@06)                                    0463
         BNH   @DL00460                                            0463
@DC00460 DS    0H                                                  0464
* END;                                                     /*@0099VLS*/
* IF VOLOK = YES                                                   0465
*  THEN                                                            0465
@RC00451 TM    VOLOK,B'00000001'                                   0465
         BNO   @RF00465                                            0465
*   PASSFLAG = YES;               /*SET FLAG TO ACCEPT THE RECORD*/
         OI    PASSFLAG(R2),B'00000001'                            0466
*END;  /*END OF VOLSEL PROC                                  @0099VLS*/
@EL00005 DS    0H                                                  0467
@EF00005 DS    0H                                                  0467
@ER00005 LM    @14,@12,12(@13)                                     0467
         BR    @14                                                 0467
*/******************************************************************/
*/*    THIS PROC WILL SELECT RECORDS BY TERMINAL NAME        @0099VLS*/
*TERMID:  PROC;                                            /*@0099VLS*/
TERMID   STM   @14,@12,12(@13)                                     0468
* OBRFLAG = ZERO;                 /*SET FLAG TO NO PASS      @0099VLS*/
         SLR   @08,@08                                             0469
         STH   @08,OBRFLAG                                         0469
* PASSFLAG = NO ;                 /*ASSUME THAT THE RECORD WILL FAIL*/
         NI    PASSFLAG(R2),B'11111110'                            0470
* IF LRTKEY1 = OBRVTAM THEN                                        0471
         CLI   LRTKEY1(R7),X'36'                                   0471
         BNE   @RF00471                                            0471
*   OBRFLAG = ONE;                /*INDEX TO REFLECT    VTAM REC */
         MVC   OBRFLAG(2),@CH00055                                 0472
*  ELSE                                                            0473
*  IF LRTKEY1 = OBRCONV & OBRTCAM = TCAMYES THEN                   0473
         B     @RC00471                                            0473
@RF00471 CLI   LRTKEY1(R7),X'32'                                   0473
         BNE   @RF00473                                            0473
         CLI   OBRTCAM(R7),X'0F'                                   0473
         BNE   @RF00473                                            0473
*    OBRFLAG = TWO;               /*SET THE INDEX TO CONV TYPE    */
         MVC   OBRFLAG(2),@CH00074                                 0474
*   ELSE                                                           0475
*    IF LRTKEY1 = OBRTCM & OBRTCAM = TCAMYES THEN                  0475
         B     @RC00473                                            0475
@RF00473 CLI   LRTKEY1(R7),X'34'                                   0475
         BNE   @RF00475                                            0475
         CLI   OBRTCAM(R7),X'0F'                                   0475
         BNE   @RF00475                                            0475
*      OBRFLAG = THREE ;          /*SET THE INDEX TO A TCAM TYPE  */
         MVC   OBRFLAG(2),@CH00076                                 0476
* IF OBRFLAG ^= ZERO THEN         /*MUST HAVE THE CORRECT TERM NAME*/
@RF00475 DS    0H                                                  0477
@RC00473 DS    0H                                                  0477
@RC00471 LH    @08,OBRFLAG                                         0477
         LTR   @08,@08                                             0477
         BZ    @RF00477                                            0477
*  DO;                                                     /*@0099VLS*/
*   PASSFLAG = NO;                /*ASSUME WILL NOT MAKE IT  @0099VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0479
*   TERMTYPE(OBRFLAG) = TERMTYPE(OBRFLAG) + ONE;           /*@0099VLS*/
         SLA   @08,2                                               0480
         LA    @06,1                                               0480
         L     @03,TERMTYPE-4(@08)                                 0480
         ALR   @03,@06                                             0480
         ST    @03,TERMTYPE-4(@08)                                 0480
*   IF  TERM  = OBRTERMN THEN                                      0481
         CLC   TERM(8,R2),OBRTERMN(R7)                             0481
         BNE   @RF00481                                            0481
*    DO;                                                   /*@0099VLS*/
*     PASSFLAG = YES;             /*ALLOW RECORD TO PASS     @0099VLS*/
         OI    PASSFLAG(R2),B'00000001'                            0483
*     TERMKEPT(OBRFLAG) = TERMKEPT(OBRFLAG) + ONE;         /*@0099VLS*/
         AL    @06,TERMKEPT-4(@08)                                 0484
         ST    @06,TERMKEPT-4(@08)                                 0484
*    END;                                                  /*@0099VLS*/
*  END;                                                    /*@0099VLS*/
*END;                                                      /*@0099VLS*/
@EL00006 DS    0H                                                  0487
@EF00006 DS    0H                                                  0487
@ER00006 LM    @14,@12,12(@13)                                     0487
         BR    @14                                                 0487
*/****************************************************************/
*/*   THIS PROC WILL SELECT RECORDS BY CPU IF REQUESTED      @0099VLS*/
*/*                                                          @0099VLS*/
*CPUSELCT: PROC;  /*SELECT RECORD IF CORRECT CPU             @0099VLS*/
CPUSELCT STM   @14,@12,12(@13)                                     0488
* PASSFLAG = OFF;                 /*ASSUME IT WILL FAIL      @0099VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0489
* DO P = 1 BY 1 TO CPUNUM WHILE(PASSFLAG = OFF);           /*@0099VLS*/
         LA    @08,1                                               0490
         ST    @08,P                                               0490
         B     @DE00490                                            0490
@DL00490 TM    PASSFLAG(R2),B'00000001'                            0490
         BNZ   @DC00490                                            0490
*  IF CPUVAL(P) = LRTCPMOD  THEN  /*DOES IT MATCH INPUT PARM DATA*/
         MH    @08,@CH00079                                        0491
         L     @06,CPUPTR(,R2)                                     0491
         ALR   @06,@08                                             0491
         AL    @06,@CF01621                                        0491
         CLC   CPUVAL-2(5,@06),LRTCPMOD(R7)                        0491
         BNE   @RF00491                                            0491
*    DO;                                                   /*@0099VLS*/
*    PASSFLAG = YES;              /*SET FLAG TO ACCEPT THE RECORD*/
         OI    PASSFLAG(R2),B'00000001'                            0493
*    CPUOUT(RTYP1) = CPUOUT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0494
         SLA   @08,2                                               0494
         LA    @06,1                                               0494
         AL    @06,CPUOUT-4(@08)                                   0494
         ST    @06,CPUOUT-4(@08)                                   0494
*/* # OF GOOD RECORDS                                        @0099VLS*/
*    END;                                                  /*@0099VLS*/
*    ELSE                                                          0496
*    CPUIN(RTYP1) = CPUIN(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         B     @RC00491                                            0496
@RF00491 L     @08,RTYP1                                           0496
         SLA   @08,2                                               0496
         LA    @06,1                                               0496
         AL    @06,CPUIN-4(@08)                                    0496
         ST    @06,CPUIN-4(@08)                                    0496
*/* # OF ONES THAT FAILED                                    @0099VLS*/
*  END;                                                    /*@0099VLS*/
@RC00491 LA    @08,1                                               0497
         AL    @08,P                                               0497
         ST    @08,P                                               0497
@DE00490 L     @06,CPUPTR(,R2)                                     0497
         CH    @08,CPUNUM(,@06)                                    0497
         BNH   @DL00490                                            0497
@DC00490 DS    0H                                                  0498
* END;                                                     /*@0099VLS*/
@EL00007 DS    0H                                                  0498
@EF00007 DS    0H                                                  0498
@ER00007 LM    @14,@12,12(@13)                                     0498
         BR    @14                                                 0498
*ENDOFILE: PROC; /*SORT SORTABLE, EVTABLE AND SET R.C. FOR EREP1*/ 0499
ENDOFILE STM   @14,@12,@SA00008                                    0499
*RESPECIFY (R0,R15) RESTRICTED;                            /*@G51DGGB*/
*R15 = ERROR; /*GET ERROR STATUS FROM MAIN PROC              @Z427VLS*/
         L     R15,ERROR                                           0501
*CLOSEIO = CLOSEIO && CLOSEIO;     /*CLEAR AREA TO AVOID PROBLEMS  */
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0502
*IF R15 = OVERFLOW & PHIST = ON THEN /*DROP BUFFERS FOR ACCIN      */
         C     R15,@CF00066                                        0503
         BNE   @RF00503                                            0503
         TM    PHIST(R2),B'00100000'                               0503
         BNO   @RF00503                                            0503
*  CACCIN = ON;                                            /*@Z427VLS*/
         OI    CACCIN(R2),B'00010000'                              0504
*  IF ERROR = OVERFLOW × ERROR = ENDFILE THEN                      0505
@RF00503 L     @14,ERROR                                           0505
         C     @14,@CF00066                                        0505
         BE    @RT00505                                            0505
         C     @14,@CF00064                                        0505
         BNE   @RF00505                                            0505
@RT00505 DS    0H                                                  0506
* DO;                                                      /*@Z427VLS*/
*  ERROR = ZERO;               /*RESET THE ERROR INDICATOR   @Z427VLS*/
         SLR   @14,@14                                             0507
         ST    @14,ERROR                                           0507
*    R15 = ZERO;                                           /*@0099VLS*/
         SLR   R15,R15                                             0508
* END;                                                     /*@Z427VLS*/
*  IF MAXENT < I & ERROR ^= ENDFILE THEN                           0510
@RF00505 L     @14,MAXENT                                          0510
         C     @14,I                                               0510
         BNL   @RF00510                                            0510
         CLC   ERROR(4),@CF00064                                   0510
         BE    @RF00510                                            0510
*  DO;             /*WORLD,DONT TELL EREP1, DONT LET LOGREC BE*/   0511
*    ZEROALL = NO;       /*RESET.                            @Z427VLS*/
         NI    ZEROALL(R2),B'10111111'                             0512
*    MSGNO = 3;                                            /*@Z427VLS*/
         MVC   MSGNO(4),@CF00076                                   0513
*    IF PHIST = ON THEN                                            0514
         TM    PHIST(R2),B'00100000'                               0514
         BNO   @RF00514                                            0514
*     CACCIN = ON;                                         /*@Z427VLS*/
         OI    CACCIN(R2),B'00010000'                              0515
*    CALL ERRMSG;                                          /*@Z427VLS*/
@RF00514 BAL   @14,ERRMSG                                          0516
*  ERROR = ZERO;                                           /*@Z427VLS*/
         SLR   @14,@14                                             0517
         ST    @14,ERROR                                           0517
*  END;                                                    /*@Z427VLS*/
* IF CLOSEIO ^= '0000'X THEN                                       0519
@RF00510 CLC   CLOSEIO(2,R2),@CB00208                              0519
         BE    @RF00519                                            0519
*   CALL IOHND(IOCLOSE);                                   /*@G51DGBB*/
         L     @15,ADIOHND(,R2)                                    0520
         LA    @01,@AL00520                                        0520
         BALR  @14,@15                                             0520
*IF PHIST = ON THEN                                                0521
@RF00519 TM    PHIST(R2),B'00100000'                               0521
         BNO   @RF00521                                            0521
* DO;                                                      /*@G51DGGB*/
*  CLOSEIO = CLOSEIO && CLOSEIO;  /*MAKE SURE ALL CLOSE FLAGS ARE 0*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0523
*  CDRCTWRK = ON;       /*CLOSE DIRECTWK FOR WRITE SO CAN READ*/   0524
         OI    CDRCTWRK(R2),B'00000010'                            0524
*  CALL IOHND(IOCLOSE); /*ASK I/O TO CLOSE THE DATA SET      @G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0525
         LA    @01,@AL00525                                        0525
         BALR  @14,@15                                             0525
* END;                                                     /*@G51DGGB*/
*IF ERROR < TWELVE  & FRAMEPTR ^= 0 &                              0527
* (PACC = YES & FRAMENUM > ZERO)THEN /* IF ACCUMULATION AND FRAMES*/
@RF00521 L     @14,ERROR                                           0527
         C     @14,@CF00032                                        0527
         BNL   @RF00527                                            0527
         SLR   @14,@14                                             0527
         L     @08,FRAMEPTR(,R2)                                   0527
         CR    @08,@14                                             0527
         BE    @RF00527                                            0527
         TM    PACC(R2),B'01000000'                                0527
         BNO   @RF00527                                            0527
         C     @14,FRAMENUM(,@08)                                  0527
         BNL   @RF00527                                            0527
*     CALL WRITEFRM;             /*GO WRITE TO ACCDEV        @G51DGGB*/
         BAL   @14,WRITEFRM                                        0528
*     ELSE                                                         0529
*      IF ERROR  < TWELVE &   DEBUG46 = ON & FRAMENUM ^= 0 THEN    0529
         B     @RC00527                                            0529
@RF00527 L     @14,ERROR                                           0529
         C     @14,@CF00032                                        0529
         BNL   @RF00529                                            0529
         TM    DEBUG46(R2),B'00000010'                             0529
         BNO   @RF00529                                            0529
         L     @01,FRAMEPTR(,R2)                                   0529
         L     @14,FRAMENUM(,@01)                                  0529
         LTR   @14,@14                                             0529
         BZ    @RF00529                                            0529
*             CALL WRITEFRM;    /*ADD KEPT FRAMES TO SORT TABLE*/  0530
         BAL   @14,WRITEFRM                                        0530
*IF DEBUG16 = ON THEN                                              0531
@RF00529 DS    0H                                                  0531
@RC00527 TM    DEBUG16(R2),B'10000000'                             0531
         BNO   @RF00531                                            0531
* DO;                                                      /*@0099VLS*/
*CALL IFCMSG(83,ADDR(PRINTBDY));                           /*@G51DGGB*/
         LA    @14,PRINTBDY                                        0533
         ST    @14,@AFTEMPS                                        0533
         L     @15,ADIFCMSG(,R2)                                   0533
         LA    @01,@AL00533                                        0533
         BALR  @14,@15                                             0533
* GEN(MVC PRINTBDY(7),BUGS16);                             /*@0099VLS*/
         MVC PRINTBDY(7),BUGS16
*BINWORD = NUMREC;                                         /*@G51DGGB*/
         L     @14,NUMREC                                          0535
         ST    @14,BINWORD                                         0535
*DECADDR = ADDR(EDIFILD);                                  /*@G51DGGB*/
         LA    @14,EDIFILD                                         0536
         ST    @14,DECADDR                                         0536
*CALL CONVBIN;                                             /*@G51DGGB*/
         BAL   @14,CONVBIN                                         0537
*CALL PRINTIT;                                             /*@G51DGGB*/
         BAL   @14,PRINTIT                                         0538
* END;                                                     /*@0099VLS*/
*SORTNUM = PASSNUM;   /*SET THE NUMBER OF RECORDS THAT PASSED*/    0540
@RF00531 L     @14,PASSNUM                                         0540
         ST    @14,SORTNUM(,R2)                                    0540
*CALL IFCMSG(54,ADDR(PRINTBDY));                           /*@G51DGGB*/
         LA    @14,PRINTBDY                                        0541
         ST    @14,@AFTEMPS                                        0541
         L     @15,ADIFCMSG(,R2)                                   0541
         LA    @01,@AL00541                                        0541
         BALR  @14,@15                                             0541
* DECADDR = ADDR(EDIFILD);                                 /*@0099VLS*/
         LA    @14,EDIFILD                                         0542
         ST    @14,DECADDR                                         0542
*BINWORD = PASSNUM;           /*PICK UP NUMBER OF RECORDS READ*/   0543
         L     @14,PASSNUM                                         0543
         ST    @14,BINWORD                                         0543
*CALL CONVBIN;                /*CONVERT # RECORDS READ TO PRINTABLE*/
         BAL   @14,CONVBIN                                         0544
*CALL PRINTIT;                                             /*@G51DGGB*/
         BAL   @14,PRINTIT                                         0545
*CLOSEIO = CLOSEIO && CLOSEIO;                             /*@G51DGGB*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0546
*IF PACC = YES THEN  /*IF WROTE RECORDS TO ACCDEV, THEN BETTER CLOSE*/
         TM    PACC(R2),B'01000000'                                0547
         BNO   @RF00547                                            0547
*   CACCDEV  = ON;                                         /*@Z427VLS*/
         OI    CACCDEV(R2),B'00001000'                             0548
*IF PACC = ON THEN                                                 0549
@RF00547 TM    PACC(R2),B'01000000'                                0549
         BNO   @RF00549                                            0549
* CALL IOHND(IOCLOSE);                                     /*@G51DGGB*/
         L     @15,ADIOHND(,R2)                                    0550
         LA    @01,@AL00550                                        0550
         BALR  @14,@15                                             0550
*IF TRUNCT ^= ZERO THEN        /*DID WE DROP ANY TRUNCATED RECORDS  */
@RF00549 L     @14,TRUNCT                                          0551
         LTR   @14,@14                                             0551
         BZ    @RF00551                                            0551
* DO;                                                      /*@Z427VLS*/
*  CALL IFCMSG(56,ADDR(PRINTBDY));                         /*@Z427VLS*/
         LA    @14,PRINTBDY                                        0553
         ST    @14,@AFTEMPS                                        0553
         L     @15,ADIFCMSG(,R2)                                   0553
         LA    @01,@AL00553                                        0553
         BALR  @14,@15                                             0553
*  BINWORD = TRUNCT;        /*LOAD # OF RECORDS FAILED FOR CONVERT  */
         L     @14,TRUNCT                                          0554
         ST    @14,BINWORD                                         0554
*  DECADDR =  ADDR(CT1);    /*WHERE IN THE MESSAGE TO PUT PRINTABLE */
         LA    @14,CT1                                             0555
         ST    @14,DECADDR                                         0555
*  CALL CONVBIN;            /*GO CONVERT TO PRINTABLE        @Z427VLS*/
         BAL   @14,CONVBIN                                         0556
*  CALL PRINTIT;                                           /*@Z427VLS*/
         BAL   @14,PRINTIT                                         0557
* END;                                                     /*@Z427VLS*/
*IF WHATYPE ^= ZERO THEN       /*DID WE DROP ANY UNKNOWN   RECORDS  */
@RF00551 L     @14,WHATYPE                                         0559
         LTR   @14,@14                                             0559
         BZ    @RF00559                                            0559
* DO;                                                      /*@Z427VLS*/
*  CALL IFCMSG(57,ADDR(PRINTBDY));                         /*@Z427VLS*/
         LA    @14,PRINTBDY                                        0561
         ST    @14,@AFTEMPS                                        0561
         L     @15,ADIFCMSG(,R2)                                   0561
         LA    @01,@AL00561                                        0561
         BALR  @14,@15                                             0561
*  BINWORD = WHATYPE;       /*LOAD # OF RECORDS FAILED FOR CONVERT  */
         L     @14,WHATYPE                                         0562
         ST    @14,BINWORD                                         0562
*  DECADDR =  ADDR(CT2);    /*WHERE IN THE MESSAGE TO PUT PRINTABLE */
         LA    @14,CT2                                             0563
         ST    @14,DECADDR                                         0563
*  CALL CONVBIN;            /*GO CONVERT TO PRINTABLE        @Z427VLS*/
         BAL   @14,CONVBIN                                         0564
*  CALL PRINTIT;                                           /*@Z427VLS*/
         BAL   @14,PRINTIT                                         0565
* END;                                                     /*@Z427VLS*/
*IF SORTNUM = ZERO THEN     /*IF NO RECORDS, EREP1 SHOULD QUIT*/   0567
@RF00559 L     @14,SORTNUM(,R2)                                    0567
         LTR   @14,@14                                             0567
         BNZ   @RF00567                                            0567
*  ERROR = TERMINAT;                                       /*@Z427VLS*/
         MVC   ERROR(4),@CF00032                                   0568
*IF BADTIME ^= ZERO THEN       /*DID WE HAVE ANY BAD TIMES   @Z427VLS*/
@RF00567 L     @14,BADTIME                                         0569
         LTR   @14,@14                                             0569
         BZ    @RF00569                                            0569
* DO;                                                      /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
* IF DEBUG48 = ON THEN                                             0572
@RF00569 TM    DEBUG48(R2),B'10000000'                             0572
         BNO   @RF00572                                            0572
*  DO;                                                     /*@G51DGGB*/
*   PRINTBDY = BUG48;                                      /*@G51DGGB*/
         MVI   PRINTBDY+33,C' '                                    0574
         MVC   PRINTBDY+34(98),PRINTBDY+33                         0574
         MVC   PRINTBDY(33),BUG48                                  0574
*   CALL PRINTIT;                                          /*@G51DGGB*/
         BAL   @14,PRINTIT                                         0575
*   RECLNGTH = 384;                                        /*@G51DGGB*/
         MVC   RECLNGTH(2,R2),@CH01468                             0576
*   NEXTBY = FRAMEPTR;                                     /*@G51DGGB*/
         L     @14,FRAMEPTR(,R2)                                   0577
         ST    @14,NEXTBY                                          0577
*   CALL HEXDUMP;                                          /*@G51DGGB*/
         BAL   @14,HEXDUMP                                         0578
*  END;                                                    /*@G51DGGB*/
* IF EXCESS ^= ZERO THEN      /*PRINT IF REC DROPPED DUE TO EXCESS*/
@RF00572 L     @14,EXCESS                                          0580
         LTR   @14,@14                                             0580
         BZ    @RF00580                                            0580
*  DO;                                                     /*@0001VLS*/
*    CALL IFCMSG(73,ADDR(PRINTBDY)); /*GET MESSAGE TEXT FOR MODULE*/
         LA    @14,PRINTBDY                                        0582
         ST    @14,@AFTEMPS                                        0582
         L     @15,ADIFCMSG(,R2)                                   0582
         LA    @01,@AL00582                                        0582
         BALR  @14,@15                                             0582
*    BINWORD = EXCESS;               /*GET # TO CONVERT TO PRINT  */
         L     @14,EXCESS                                          0583
         ST    @14,BINWORD                                         0583
*    DECADDR = ADDR(PRINTBDY) + 38;  /*WHERE TO PUT THE NUMBER    */
         LA    @14,PRINTBDY                                        0584
         AL    @14,@CF01470                                        0584
         ST    @14,DECADDR                                         0584
*    CALL CONVBIN;                   /*CONVERT TO PRINTABLE  @0001VLS*/
         BAL   @14,CONVBIN                                         0585
*    GEN(MVC  PRINTBDY+45(16),DROP);/*FINISH MESSAGE         @0001VLS*/
         MVC  PRINTBDY+45(16),DROP
*    CALL PRINTIT;                   /*GO TELL THEM ABOUT IT @0001VLS*/
         BAL   @14,PRINTIT                                         0587
*   END;                                                   /*@0001VLS*/
*  IF (ERROR = ENDFILE × ERROR = SUCCESS) & I > 1 THEN             0589
@RF00580 L     @14,ERROR                                           0589
         C     @14,@CF00064                                        0589
         BE    @GL00021                                            0589
         LTR   @14,@14                                             0589
         BNZ   @RF00589                                            0589
@GL00021 CLC   I(4),@CF00055                                       0589
         BNH   @RF00589                                            0589
*  CALL SIFTSORT; /*SORT EVTABLE AND SORTABLE, ASSIGN LETTERS TO CPUS*/
         BAL   @14,SIFTSORT                                        0590
* IF DEBUG16 = ON & NUMREC ^= 0 THEN                               0591
@RF00589 TM    DEBUG16(R2),B'10000000'                             0591
         BNO   @RF00591                                            0591
         L     @14,NUMREC                                          0591
         LTR   @14,@14                                             0591
         BZ    @RF00591                                            0591
*  CALL DBUG16;                                            /*@0099VLS*/
         BAL   @14,DBUG16                                          0592
*RESPECIFY (R0,R15) UNRESTRICTED;                          /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00008 DS    0H                                                  0594
@EF00008 DS    0H                                                  0594
@ER00008 LM    @14,@12,@SA00008                                    0594
         BR    @14                                                 0594
*/********************************************************************/
*/*    THIS PROC WILL PRINT OUT THE COUNTS OF THE # OF RECORDS THAT  */
*/*    WERE READ AND THE NUMBER THAT FALL BY THE WAY SIDE AS THE    */
*/*    RECORDS ARE FILTERED USER SHOULD BE ABLE TO TELL WHERE THE   */
*/*    RECORDS ARE GOING BASED ON THESE COUNTS               @0099VLS*/
*DBUG16: PROC;                                             /*@0099VLS*/
DBUG16   STM   @14,@12,@SA00009                                    0595
*PRINTBDY = BUGS16;         /*MOVE IN THE BUG16 HEADING      @0099VLS*/
         MVI   PRINTBDY+31,C' '                                    0596
         MVC   PRINTBDY+32(100),PRINTBDY+31                        0596
         MVC   PRINTBDY(31),BUGS16                                 0596
*CALL PRINTIT;              /*PRINT THE HEADER               @0099VLS*/
         BAL   @14,PRINTIT                                         0597
*BNDECNUM = 6;              /*ALL OUTPUT WILL BE 6 FIGURES LONG*/  0598
         MVC   BNDECNUM(4),@CF00081                                0598
*DO P = 1 BY 1 TO RECTYPES; /*ONE LINE FOR EACH REC          @0099VLS*/
         LA    @08,1                                               0599
         ST    @08,P                                               0599
@DL00599 DS    0H                                                  0600
* BINWORD = INCOUNT(P);     /*LOAD THE # READ OF THIS RECORD @0099VLS*/
         SLA   @08,2                                               0600
         L     @08,INCOUNT-4(@08)                                  0600
         ST    @08,BINWORD                                         0600
* DECADDR = ADDR(RECNUM);   /*WHERE TO PUT THE CONVERTED VALUE*/   0601
         LA    @08,RECNUM                                          0601
         ST    @08,DECADDR                                         0601
* CALL CONVBIN;             /*GO CONVERT THE BINARY TO PRINTABLE*/ 0602
         BAL   @14,CONVBIN                                         0602
* RECTYP2 = RECNAME(P);     /*MOVE IN THE RECORD TYPE TO PRINT LINE*/
         L     @08,P                                               0603
         LR    @06,@08                                             0603
         MH    @06,@CH00076                                        0603
         LA    @03,RECNAME-3(@06)                                  0603
         MVC   RECTYP2(3),0(@03)                                   0603
* BINWORD = MIDCOUNT(P);    /* THE # OF RECORDS THAT PASS THE TIME*/
         SLA   @08,2                                               0604
         L     @08,MIDCOUNT-4(@08)                                 0604
         ST    @08,BINWORD                                         0604
* DECADDR = ADDR(RECPASS);  /*LOCATION OF WHERE TO PUT CONVERTED ITEM*/
         LA    @08,RECPASS                                         0605
         ST    @08,DECADDR                                         0605
* CALL CONVBIN;             /*GO CONVERT THE ITEM TO PRINTABLE      */
         BAL   @14,CONVBIN                                         0606
* BINWORD = DEVCT(P);       /*# THAT PASSED THE DEVICE FILTER*/    0607
         L     @08,P                                               0607
         SLA   @08,2                                               0607
         L     @08,DEVCT-4(@08)                                    0607
         ST    @08,BINWORD                                         0607
* DECADDR = ADDR(DEVPASS);  /*WHERE IN THE LINE TO MOVE IT   @0099VLS*/
         LA    @08,DEVPASS                                         0608
         ST    @08,DECADDR                                         0608
* CALL CONVBIN;             /*CHANGE TO A PRINTABLE FORM     @0099VLS*/
         BAL   @14,CONVBIN                                         0609
* BINWORD = CUACT(P);       /*# THAT PASS THE CUA SELECTION  @0099VLS*/
         L     @08,P                                               0610
         SLA   @08,2                                               0610
         L     @08,CUACT-4(@08)                                    0610
         ST    @08,BINWORD                                         0610
* DECADDR= ADDR(CUAPASS);   /*WHERE TO PUT THE CONVERTED VALUE*/   0611
         LA    @08,CUAPASS                                         0611
         ST    @08,DECADDR                                         0611
* CALL CONVBIN;             /*CHANGE TO A READABLE FORMAT    @0099VLS*/
         BAL   @14,CONVBIN                                         0612
* BINWORD = RDEPCT(P);      /*NUMBER THAT WERE DROPPED       @0099VLS*/
         L     @08,P                                               0613
         SLA   @08,2                                               0613
         L     @08,RDEPCT-4(@08)                                   0613
         ST    @08,BINWORD                                         0613
* DECADDR = ADDR(TYPEFAIL); /*WHERE TO PUT VALUE IN THE MESSAGE*/  0614
         LA    @08,TYPEFAIL                                        0614
         ST    @08,DECADDR                                         0614
* CALL CONVBIN;             /*GO CONVERT THE VALUE           @0099VLS*/
         BAL   @14,CONVBIN                                         0615
* PRINTBDY = RECINFO;       /*MOVE ALL THIS GOOD INFO TO PRINT LINE*/
         MVC   PRINTBDY(132),RECINFO                               0616
* CALL PRINTIT;             /*PRINT ON THE TOURIST DATA SET  @0099VLS*/
         BAL   @14,PRINTIT                                         0617
*END;                                                      /*@0099VLS*/
         LA    @08,1                                               0618
         AL    @08,P                                               0618
         ST    @08,P                                               0618
         C     @08,@CF00034                                        0618
         BNH   @DL00599                                            0618
*CALL BUG13;                /*DEBUG COUNTS USED WITH DEBUG13 @0099VLS*/
         BAL   @14,BUG13                                           0619
*DO P = 1 BY 1 TO RECTYPES;                                /*@0099VLS*/
         LA    @08,1                                               0620
         ST    @08,P                                               0620
@DL00620 DS    0H                                                  0621
* PTYP = RECNAME(P);        /*MOVE IN THE RECORD             @0099VLS*/
         LR    @06,@08                                             0621
         MH    @06,@CH00076                                        0621
         LA    @03,RECNAME-3(@06)                                  0621
         MVC   PTYP(3),0(@03)                                      0621
* BINWORD = EXCPUCT(P);   /*# OF EXTRA CPU COUNTS            @0099VLS*/
         SLA   @08,2                                               0622
         L     @08,EXCPUCT-4(@08)                                  0622
         ST    @08,BINWORD                                         0622
* DECADDR = ADDR(EXCPU);    /*WHERE IN OUTPUT MESSAGE TO PLACE #*/ 0623
         LA    @08,EXCPU                                           0623
         ST    @08,DECADDR                                         0623
* CALL CONVBIN;             /*GO CONVERT THE ITEM            @0099VLS*/
         BAL   @14,CONVBIN                                         0624
* BINWORD = OUTCOUNT(P);    /*# OF RECORDS THAT PASS ALL FILTERING*/
         L     @08,P                                               0625
         SLA   @08,2                                               0625
         L     @08,OUTCOUNT-4(@08)                                 0625
         ST    @08,BINWORD                                         0625
* DECADDR = ADDR(RECKEPT);  /*WHERE IN OUTPUT MESSAGE TO PLACE #*/ 0626
         LA    @08,RECKEPT                                         0626
         ST    @08,DECADDR                                         0626
* CALL CONVBIN;             /*GO CONVERT THE # TO PRINTABLE  @0099VLS*/
         BAL   @14,CONVBIN                                         0627
* PRINTBDY = RECINFO1;      /*MOVE THE MESSAGE TO THE PRINT LINE*/ 0628
         MVI   PRINTBDY+61,C' '                                    0628
         MVC   PRINTBDY+62(70),PRINTBDY+61                         0628
         MVC   PRINTBDY(61),RECINFO1                               0628
* CALL PRINTIT;             /*PRINT DROPPED DUE TO EXCESS CPUS   */
         BAL   @14,PRINTIT                                         0629
*                           /*& COUNT OF NUMBER THAT PASS ALL FILTER*/
*END;                                                      /*@0099VLS*/
         LA    @08,1                                               0630
         AL    @08,P                                               0630
         ST    @08,P                                               0630
         C     @08,@CF00034                                        0630
         BNH   @DL00620                                            0630
*CALL PRINTIT;              /*IMPROVE THE LOOKS WITH A BLANK LINE*/
         BAL   @14,PRINTIT                                         0631
*BINWORD = OUTDATE;         /*CONVERT THE # DROPPED DUE TO THE DATE*/
         L     @08,OUTDATE                                         0632
         ST    @08,BINWORD                                         0632
*DECADDR = ADDR(DAYFAIL);   /*WHERE TO PUT THE VALUE         @0099VLS*/
         LA    @08,DAYFAIL                                         0633
         ST    @08,DECADDR                                         0633
*CALL CONVBIN;              /*CONVERT THE # THAT FAILED DAY FILTERING*/
         BAL   @14,CONVBIN                                         0634
*BINWORD = OUTTIME;         /*LOAD THE # THAT FAILED THE TIME CHECK*/
         L     @08,OUTTIME                                         0635
         ST    @08,BINWORD                                         0635
*DECADDR = ADDR(TIMEFAIL);  /*WHERE IN THE MESSAGE TO PLACE THE VALUE*/
         LA    @08,TIMEFAIL                                        0636
         ST    @08,DECADDR                                         0636
*CALL CONVBIN;              /*CONVERT THE ITEM TO PRINTABLE  @0099VLS*/
         BAL   @14,CONVBIN                                         0637
*BINWORD = OUTTHIRD;        /*LOAD THE # THAT FAILED 3RD SHIFT CHECK*/
         L     @08,OUTTHIRD                                        0638
         ST    @08,BINWORD                                         0638
*DECADDR = ADDR(THIRDROP);  /*DUE TO THE DATE/TIME FILTERING @0099VLS*/
         LA    @08,THIRDROP                                        0639
         ST    @08,DECADDR                                         0639
*CALL CONVBIN;              /*CONVERT THIS TO PRINTABLE      @0099VLS*/
         BAL   @14,CONVBIN                                         0640
*PRINTBDY = TIMEMSG;        /*MOVE TO THE PRINT LINE         @0099VLS*/
         MVI   PRINTBDY+87,C' '                                    0641
         MVC   PRINTBDY+88(44),PRINTBDY+87                         0641
         MVC   PRINTBDY(87),TIMEMSG                                0641
*CALL PRINTIT;              /*PRINT THE # DROPPED MESSAGE    @0099VLS*/
         BAL   @14,PRINTIT                                         0642
*IF NUMREC ^= ZERO THEN     /*MAKE SURE NO ERROR             @0099VLS*/
         L     @08,NUMREC                                          0643
         LTR   @08,@08                                             0643
         BZ    @RF00643                                            0643
* DO;                                                      /*@0099VLS*/
*  BINWORD = BYTECT/NUMREC; /*FIND THE AVERAGE BYTE COUNT    @0099VLS*/
         L     @00,BYTECT                                          0645
         SRDA  @00,32                                              0645
         DR    @00,@08                                             0645
         ST    @01,BINWORD                                         0645
*  DECADDR = ADDR(AVERAGE); /*WHERE THE VALUE GOES           @0099VLS*/
         LA    @08,AVERAGE                                         0646
         ST    @08,DECADDR                                         0646
*  CALL CONVBIN;            /*GO CONVERT TO PRINTABLE        @0099VLS*/
         BAL   @14,CONVBIN                                         0647
*  PRINTBDY = AVEBYTE;      /*MOVE THE MESSAGE TO THE PRINT LINE*/ 0648
         MVI   PRINTBDY+27,C' '                                    0648
         MVC   PRINTBDY+28(104),PRINTBDY+27                        0648
         MVC   PRINTBDY(27),AVEBYTE                                0648
*  CALL PRINTIT;            /*GO PRINT THE MESSAGE           @0099VLS*/
         BAL   @14,PRINTIT                                         0649
* END;                                                     /*@0099VLS*/
* IF (FRAMEPTR ^= ZERO & FRAMENUM ^= ZERO) × DEBUG47 = ON THEN     0651
@RF00643 SLR   @08,@08                                             0651
         L     @06,FRAMEPTR(,R2)                                   0651
         CR    @06,@08                                             0651
         BE    @GL00024                                            0651
         C     @08,FRAMENUM(,@06)                                  0651
         BNE   @RT00651                                            0651
@GL00024 TM    DEBUG47(R2),B'00000001'                             0651
         BNO   @RF00651                                            0651
@RT00651 DS    0H                                                  0652
*   CALL FRAMINFO;                                         /*@G51DGBB*/
         BAL   @14,FRAMINFO                                        0652
*END;                                                      /*@0099VLS*/
@EL00009 DS    0H                                                  0653
@EF00009 DS    0H                                                  0653
@ER00009 LM    @14,@12,@SA00009                                    0653
         BR    @14                                                 0653
*/*******************************************************************/
*/*******************************************************************/
*/*   THIS PROC WILL PRINT THE RESULT OF EXTRA FILTERING DUE TO     */
*/*   DEBUG 13 BEENING USED                                  @0099VLS*/
*BUG13: PROC;                                              /*@0099VLS*/
BUG13    STM   @14,@12,@SA00010                                    0654
*      CALL PRINTIT;          /*ADD A BLANK LINE TO OUTPUT   @0099VLS*/
         BAL   @14,PRINTIT                                         0655
*       IF VOLTRY ^> 4 × CPUTRY ^> NINE ×   TERMTRY ^> THREE THEN  0656
         LH    @08,VOLTRY                                          0656
         C     @08,@CF00064                                        0656
         BNH   @RT00656                                            0656
         LH    @08,CPUTRY                                          0656
         C     @08,@CF00035                                        0656
         BNH   @RT00656                                            0656
         L     @08,TERMTRY                                         0656
         C     @08,@CF00076                                        0656
         BH    @RF00656                                            0656
@RT00656 DS    0H                                                  0657
*        DO UNTIL (VOLTRY >4 & CPUTRY > NINE & TERMTRY > THREE );  0657
@DL00657 DS    0H                                                  0658
*        IF CPUTRY ^> NINE THEN                                    0658
         LH    @08,CPUTRY                                          0658
         C     @08,@CF00035                                        0658
         BH    @RF00658                                            0658
*         DO;                                              /*@0099VLS*/
*          BINWORD = CPUIN(CPUTRY) - CPUOUT(CPUTRY);       /*@0099VLS*/
         SLA   @08,2                                               0660
         L     @06,CPUIN-4(@08)                                    0660
         SL    @06,CPUOUT-4(@08)                                   0660
         ST    @06,BINWORD                                         0660
*          DECADDR = ADDR(CPUIN1);         /*WHERE TO PUT NUM IN    */
         LA    @08,CPUIN1                                          0661
         ST    @08,DECADDR                                         0661
*          CALL CONVBIN;                   /*CONVERT THE #   @0099VLS*/
         BAL   @14,CONVBIN                                         0662
*          BINWORD = CPUOUT(CPUTRY);       /*#REC KEPT THIS REC     */
         LH    @08,CPUTRY                                          0663
         SLA   @08,2                                               0663
         L     @08,CPUOUT-4(@08)                                   0663
         ST    @08,BINWORD                                         0663
*          DECADDR = ADDR(CPUOUT1);        /*WHERE TO PUT IN THE LINE*/
         LA    @08,CPUOUT1                                         0664
         ST    @08,DECADDR                                         0664
*          CALL CONVBIN;                   /*CONVERT TO PRINTABLE   */
         BAL   @14,CONVBIN                                         0665
*          CPUR = RECNAME(CPUTRY);         /*MOVE IN RECORD TYPE    */
         LH    @08,CPUTRY                                          0666
         MH    @08,@CH00076                                        0666
         LA    @06,RECNAME-3(@08)                                  0666
         MVC   CPUR(3),0(@06)                                      0666
*         END;                                             /*@0099VLS*/
*         ELSE                                                     0668
*          CPUDATA = ' ';             /*NO CPU FILTERING SO BLANK LI*/
         B     @RC00658                                            0668
@RF00658 MVI   CPUDATA+1,C' '                                      0668
         MVC   CPUDATA+2(39),CPUDATA+1                             0668
         MVI   CPUDATA,C' '                                        0668
*          IF VOLTRY ^> 4 THEN                                     0669
@RC00658 LH    @08,VOLTRY                                          0669
         C     @08,@CF00064                                        0669
         BH    @RF00669                                            0669
*           DO;                                            /*@0099VLS*/
*            BINWORD = VOLCOUNT(VOLTRY); /*# FOUND THIS DEV  @0099VLS*/
         SLA   @08,2                                               0671
         L     @08,VOLCOUNT-4(@08)                                 0671
         ST    @08,BINWORD                                         0671
*            DECADDR = ADDR(VOLIN);      /* WHERE IN LINE TO PUT IT*/
         LA    @08,VOLIN                                           0672
         ST    @08,DECADDR                                         0672
*            CALL CONVBIN;               /*GO CONVERT IT TO PRINT*/
         BAL   @14,CONVBIN                                         0673
*            BINWORD = VOLPASS(VOLTRY);  /*# KEPT  FOR THIS DEV  */
         LH    @08,VOLTRY                                          0674
         SLA   @08,2                                               0674
         L     @08,VOLPASS-4(@08)                                  0674
         ST    @08,BINWORD                                         0674
*            DECADDR = ADDR(VOLOUT);     /* WHERE IN LINE TO PUT IT*/
         LA    @08,VOLOUT                                          0675
         ST    @08,DECADDR                                         0675
*            CALL CONVBIN;               /*GO CONVERT IT TO PRINT*/
         BAL   @14,CONVBIN                                         0676
*            VOLTYPE = VOLDEV(VOLTRY);   /*MOVE IN THE TYPE OF DEV*/
         LH    @08,VOLTRY                                          0677
         SLA   @08,3                                               0677
         LA    @06,VOLDEV-8(@08)                                   0677
         MVC   VOLTYPE(8),0(@06)                                   0677
*           END;                                           /*@0099VLS*/
*           ELSE                                                   0679
*           VOLDATA = ' '; /*NO VOLID FILTERING MAKE THIS PART BLANK*/
         B     @RC00669                                            0679
@RF00669 MVI   VOLDATA+1,C' '                                      0679
         MVC   VOLDATA+2(47),VOLDATA+1                             0679
         MVI   VOLDATA,C' '                                        0679
*           IF TERMTRY ^> THREE THEN     /*WILL BE 1 IF HAD TERM F-*/
@RC00669 L     @08,TERMTRY                                         0680
         C     @08,@CF00076                                        0680
         BH    @RF00680                                            0680
*            DO;                                           /*@0099VLS*/
*            BINWORD = TERMTYPE(TERMTRY);/*# FOUND FOR THIS REC  */
         SLA   @08,2                                               0682
         L     @08,TERMTYPE-4(@08)                                 0682
         ST    @08,BINWORD                                         0682
*            DECADDR = ADDR(TERMIN);     /*PLACE IN LINE TO PUT IT*/
         LA    @08,TERMIN                                          0683
         ST    @08,DECADDR                                         0683
*            CALL CONVBIN;               /*PUT IT IN TO PRINT LINE*/
         BAL   @14,CONVBIN                                         0684
*            BINWORD = TERMKEPT(TERMTRY);/*# KEPT THIS REC   @0099VLS*/
         L     @08,TERMTRY                                         0685
         SLA   @08,2                                               0685
         L     @08,TERMKEPT-4(@08)                                 0685
         ST    @08,BINWORD                                         0685
*            DECADDR = ADDR(TERMOUT);    /*LOCATION WHERE TO PUT IT*/
         LA    @08,TERMOUT                                         0686
         ST    @08,DECADDR                                         0686
*            CALL CONVBIN;               /*CONVERT TO PRINTABLE*/  0687
         BAL   @14,CONVBIN                                         0687
*            TERMTYP = TRMTYPE(TERMTRY);/*MOVE IN THE TYPE OF OBR*/
         L     @08,TERMTRY                                         0688
         ALR   @08,@08                                             0688
         LA    @06,TRMTYPE-2(@08)                                  0688
         MVC   TERMTYP(2),0(@06)                                   0688
*            END;                                          /*@0099VLS*/
*            ELSE                                                  0690
*            TERMDATA = ' ';           /*BLANK OUT THIS PART OF LINE*/
         B     @RC00680                                            0690
@RF00680 MVI   TERMDATA+1,C' '                                     0690
         MVC   TERMDATA+2(39),TERMDATA+1                           0690
         MVI   TERMDATA,C' '                                       0690
*            TERMTRY = TERMTRY + ONE ;   /*INCREMENT THE INDEX BY 1*/
@RC00680 LA    @08,1                                               0691
         L     @06,TERMTRY                                         0691
         ALR   @06,@08                                             0691
         ST    @06,TERMTRY                                         0691
*            VOLTRY = VOLTRY + ONE;  /*IJNCREMENT THE VOLUME CONTROL*/
         LH    @06,VOLTRY                                          0692
         ALR   @06,@08                                             0692
         STH   @06,VOLTRY                                          0692
*            CPUTRY = CPUTRY + ONE;  /*INCREMENT THE CPU CONTROL*/ 0693
         AH    @08,CPUTRY                                          0693
         STH   @08,CPUTRY                                          0693
*           PRINTBDY = NEWFILT;                            /*@0099VLS*/
         MVC   PRINTBDY(132),NEWFILT                               0694
*           CALL PRINTIT;                                  /*@0099VLS*/
         BAL   @14,PRINTIT                                         0695
*         END;                                             /*@0099VLS*/
@DE00657 LH    @08,VOLTRY                                          0696
         C     @08,@CF00064                                        0696
         BNH   @DL00657                                            0696
         LH    @08,CPUTRY                                          0696
         C     @08,@CF00035                                        0696
         BNH   @DL00657                                            0696
         L     @08,TERMTRY                                         0696
         C     @08,@CF00076                                        0696
         BNH   @DL00657                                            0696
*   CALL PRINTIT;                        /*ADD SPACE BETWEEN @0099VLS*/
@RF00656 BAL   @14,PRINTIT                                         0697
*END;                                                      /*@0099VLS*/
@EL00010 DS    0H                                                  0698
@EF00010 DS    0H                                                  0698
@ER00010 LM    @14,@12,@SA00010                                    0698
         BR    @14                                                 0698
*/********************************************************************/
*/* * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * */
*/*    THIS PROC WILL CONVERT THE BINARY NUMBER IN ITEM BINWORD TO   */
*/*    PRINTABLE IF THE NUMBER (CONVERTED) IS > THAN THE NUMBER OF   */
*/*    CHARACTERS REQUESTED (IN ITEM BNDECNUM) A NINE WILL BE PLACED */
*/*    IN EACH PRINT POSITION                                @Z427VLS*/
*/*                                                          @Z427VLS*/
*CONVBIN:  PROC;                                           /*@Z427VLS*/
CONVBIN  STM   @14,@12,@SA00011                                    0699
*RESPECIFY (R4,R5) RESTRICTED;                             /*@0099VLS*/
* R4 = BINWORD;                                            /*@G51DGGB*/
         L     R4,BINWORD                                          0701
* GEN(CVD  R4,DBLWORD);                                    /*@G51DGGB*/
         CVD  R4,DBLWORD
* GEN(UNPK  WORK(8),DBLWORD);                              /*@G51DGGB*/
         UNPK  WORK(8),DBLWORD
* GEN(OI  WORK+7,X'F0');                                   /*@G51DGGB*/
         OI  WORK+7,X'F0'
* SWITCH1 = OFF;                                           /*@G51DGGB*/
         NI    SWITCH1,B'10111111'                                 0705
* DO L = 1 BY 1 TO 7 WHILE(SWITCH1 = OFF );                /*@G51DGGB*/
         LA    @08,1                                               0706
         ST    @08,L                                               0706
@DL00706 TM    SWITCH1,B'01000000'                                 0706
         BNZ   @DC00706                                            0706
*  IF WORKOVER(L) = 'F0'X THEN                                     0707
         LA    @06,WORKOVER-1(@08)                                 0707
         CLI   0(@06),X'F0'                                        0707
         BNE   @RF00707                                            0707
*   WORKOVER(L) = '40'X;                                   /*@G51DGGB*/
         LA    @06,WORKOVER-1(@08)                                 0708
         MVI   0(@06),X'40'                                        0708
*  ELSE                                                            0709
*   SWITCH1 = ON;                                          /*@G51DGGB*/
         B     @RC00707                                            0709
@RF00707 OI    SWITCH1,B'01000000'                                 0709
* END;                                                     /*@G51DGGB*/
@RC00707 LA    @08,1                                               0710
         AL    @08,L                                               0710
         ST    @08,L                                               0710
         C     @08,@CF00083                                        0710
         BNH   @DL00706                                            0710
@DC00706 DS    0H                                                  0711
* R4 = ADDR(WORKOVER) + 8 - BNDECNUM;                      /*@G51DGGB*/
         L     @08,BNDECNUM                                        0711
         LA    R4,WORKOVER                                         0711
         AL    R4,@CF00066                                         0711
         SLR   R4,@08                                              0711
* R5 = BNDECNUM - ONE;                                     /*@G51DGGB*/
         BCTR  @08,0                                               0712
         LR    R5,@08                                              0712
* RESPECIFY (R6) RESTRICTED;                               /*@G51DGGB*/
* R6 = DECADDR;                                            /*@G51DGGB*/
         L     R6,DECADDR                                          0714
* GEN(EX  R5,MVCINS);                                      /*@G51DGGB*/
         EX  R5,MVCINS
* GENERATE DATA;                                           /*@G51DGGB*/
*RESPECIFY (R4,R5,R6) UNRESTRICTED;                        /*@G51DGGB*/
*END;                                                      /*@Z427VLS*/
@EL00011 DS    0H                                                  0718
@EF00011 DS    0H                                                  0718
@ER00011 LM    @14,@12,@SA00011                                    0718
         BR    @14                                                 0718
*PRINTIT: PROC;                                            /*@Z427VLS*/
PRINTIT  STM   @14,@12,@SA00012                                    0719
* PRINTADR = ADDR(PRINTLIN);                               /*@Z427VLS*/
         LA    @08,PRINTLIN                                        0720
         ST    @08,PRINTADR(,R2)                                   0720
* CALL IOHND(RITEPRTR);                                    /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0721
         LA    @01,@AL00721                                        0721
         BALR  @14,@15                                             0721
*END;                                                      /*@Z427VLS*/
@EL00012 DS    0H                                                  0722
@EF00012 DS    0H                                                  0722
@ER00012 LM    @14,@12,@SA00012                                    0722
         BR    @14                                                 0722
*/********************************************************************/
*/* * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * */
*/*    THIS PROC WILL CONVERT THE HEX DATA INTO PRINTABLE    @Z427VLS*/
*/*                                                          @Z427VLS*/
*/*    IF IT IS NECESSARY TO CONVERT ONLY 1/2 OF FIRST BYTE(CUA FOR  */
*/*    EXP. THEN THE USER SHOULD SET THE SWITCH1 TO THEON CONDITION  */
*CONVERT: PROC;                                            /*@Z427VLS*/
CONVERT  STM   @14,@12,12(@13)                                     0723
* RESPECIFY (R4,R5) RESTRICTED;                            /*@Z427VLS*/
* DO P = NUMBER BY -1 TO 1;      /*# = # OF BYTES TO CONVERT TO PRINT*/
         L     @08,NUMBER                                          0725
         ST    @08,P                                               0725
         B     @DE00725                                            0725
@DL00725 DS    0H                                                  0726
*   R4 = NEXTBYTE(P);            /*LOAD THE NEXT BYTE TO CONVERT     */
         L     @06,NEXTBY                                          0726
         BCTR  @06,0                                               0726
         SLR   R4,R4                                               0726
         IC    R4,NEXTBYTE(@08,@06)                                0726
*   X =  TWO * P;                /*OUTPUT INDEX MUST BE TWICE INPUT  */
         LR    @06,@08                                             0727
         ALR   @06,@06                                             0727
         ST    @06,X                                               0727
*   SRDL  (R4,FOUR);             /*MOVE 1/2 IN TO NEXT REG   @Z427VLS*/
         SRDL  R4,4                                                0728
*   SRL   (R5,TWOEIGHT);         /*SHIFT THE REG 28 BITS     @Z427VLS*/
         L     @06,TWOEIGHT                                        0729
         SRL   R5,0(@06)                                           0729
*   R5  =  R5 + NUMBER1;         /*INSURE INDEX BY 0 DOES NOT AFFECT */
         L     @06,NUMBER1                                         0730
         ALR   R5,@06                                              0730
*   R4  =  R4 + NUMBER1;         /*SAME                      @Z427VLS*/
         ALR   R4,@06                                              0731
*   IF SWITCH1 = ON & P = ONE    /*DO WE NOT PUT THE HALF BYTE OUT   */
*    THEN                                                          0732
         TM    SWITCH1,B'01000000'                                 0732
         BNO   @RF00732                                            0732
         C     @08,@CF00055                                        0732
         BNE   @RF00732                                            0732
*     SWITCH1 = OFF;             /*TURN OFF THE SWITCH       @Z427VLS*/
         NI    SWITCH1,B'10111111'                                 0733
*    ELSE                                                          0734
*     ADDNUM(X-ONE) = CHARS(R4);/*PUT THE PRINT CHAR INTO THE OUTPUT*/
         B     @RC00732                                            0734
@RF00732 L     @08,ADDNXT                                          0734
         AL    @08,X                                               0734
         BCTR  @08,0                                               0734
         BCTR  @08,0                                               0734
         LA    @06,CHARS-1(R4)                                     0734
         MVC   ADDNUM(1,@08),0(@06)                                0734
*     ADDNUM(X)  = CHARS(R5);   /*FINSH THE BYTE             @Z427VLS*/
@RC00732 L     @08,ADDNXT                                          0735
         AL    @08,X                                               0735
         BCTR  @08,0                                               0735
         LA    @06,CHARS-1(R5)                                     0735
         MVC   ADDNUM(1,@08),0(@06)                                0735
* END;                                                     /*@Z427VLS*/
         SLR   @08,@08                                             0736
         BCTR  @08,0                                               0736
         AL    @08,P                                               0736
         ST    @08,P                                               0736
@DE00725 LTR   @08,@08                                             0736
         BP    @DL00725                                            0736
* END;                                                     /*@Z427VLS*/
@EL00013 DS    0H                                                  0737
@EF00013 DS    0H                                                  0737
@ER00013 LM    @14,@12,12(@13)                                     0737
         BR    @14                                                 0737
* RESPECIFY (R4,R5) UNRESTRICTED;                          /*@Z427VLS*/
*/*******************************************************************/
*/*    THIS PROC WILL PRINT THE DEBUG INFORMATION ABOUT FRAMES      */
*FRAMINFO: PROC;                                           /*@G51DGGB*/
FRAMINFO STM   @14,@12,@SA00014                                    0739
*    BINWORD = FRMREAD(1) ; /*PICK UP THE NUMBER OF FRAMES READ*/  0740
         LH    @08,FRMREAD                                         0740
         ST    @08,BINWORD                                         0740
*    DECADDR = ADDR(MCFNUMB); /*ADDRESS IN DATA LINE TO PLACE VALUE*/
         LA    @08,MCFNUMB                                         0741
         ST    @08,DECADDR                                         0741
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0742
*    BINWORD = NOMATCH(1); /*# OF FRAMES WITH OUT A MATCHING CPU*/ 0743
         LH    @08,NOMATCH                                         0743
         ST    @08,BINWORD                                         0743
*    DECADDR = ADDR(MCFNOMCH);/*LOCATION IN MESSAGE OF NO-MATCH ON CPU*
         LA    @08,MCFNOMCH                                        0744
         ST    @08,DECADDR                                         0744
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0745
*    BINWORD = KEPT(1); /* # OF MCF FRAMES KEPT              @G51DGGB*/
         LH    @08,KEPT                                            0746
         ST    @08,BINWORD                                         0746
*    DECADDR = ADDR(MCFKEPT); /*ADDRESS OF WHERE TO PLACE THE NUMBER*/
         LA    @08,MCFKEPT                                         0747
         ST    @08,DECADDR                                         0747
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0748
*    BINWORD = SETREJCT(1) + NOMATCH(1);                   /*@G51DGGB*/
         LH    @08,SETREJCT                                        0749
         AH    @08,NOMATCH                                         0749
         ST    @08,BINWORD                                         0749
*    DECADDR = ADDR(MCFREJ); /*ADDRESS OF WHERE IN THE DATA LINE*/ 0750
         LA    @08,MCFREJ                                          0750
         ST    @08,DECADDR                                         0750
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0751
*    BINWORD = DUPLICAT(1); /* # OF SETS THAT WERE A DUPLICATE*/   0752
         LH    @08,DUPLICAT                                        0752
         ST    @08,BINWORD                                         0752
*    DECADDR = ADDR(MCFDUP);                               /*@G51DGGB*/
         LA    @08,MCFDUP                                          0753
         ST    @08,DECADDR                                         0753
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0754
*    BINWORD = TOACCDEV(1);  /* # OF MCF THAT WERE WRITTEN TO ACCDEV*/
         LH    @08,TOACCDEV                                        0755
         ST    @08,BINWORD                                         0755
*    DECADDR = ADDR(MFACCDEV);                             /*@G51DGGB*/
         LA    @08,MFACCDEV                                        0756
         ST    @08,DECADDR                                         0756
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0757
*    PRINTBDY = MCF; /*MOVE THE ITEM INTO THE PRINT LINE     @G51DGGB*/
         MVI   PRINTBDY+131,C' '                                   0758
         MVC   PRINTBDY(131),MCF                                   0758
*    CALL PRINTIT;   /*GO PRINT THE MCF DEBUG DATA           @G51DGGB*/
         BAL   @14,PRINTIT                                         0759
*    BINWORD = FRMREAD(2) ; /* # OF CCF RECORDS READ         @G51DGGB*/
         LH    @08,FRMREAD+2                                       0760
         ST    @08,BINWORD                                         0760
*    DECADDR = ADDR(CCFNUMB); /* ADDRESS OF WHERE IN THE PRINT LINE*/
         LA    @08,CCFNUMB                                         0761
         ST    @08,DECADDR                                         0761
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0762
*    BINWORD = KEPT(2);  /* # OF CCF FRAMES THAT WERE KEPT   @G51DGGB*/
         LH    @08,KEPT+2                                          0763
         ST    @08,BINWORD                                         0763
*    DECADDR = ADDR(CCFKEPT);                              /*@G51DGGB*/
         LA    @08,CCFKEPT                                         0764
         ST    @08,DECADDR                                         0764
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0765
*    BINWORD = SETREJCT(2) + NOMATCH(2);                   /*@G51DGGB*/
         LH    @08,SETREJCT+2                                      0766
         AH    @08,NOMATCH+2                                       0766
         ST    @08,BINWORD                                         0766
*    DECADDR = ADDR(CCFREJ);                               /*@G51DGGB*/
         LA    @08,CCFREJ                                          0767
         ST    @08,DECADDR                                         0767
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0768
*    BINWORD = TOACCDEV(2); /*NUMBER OF CCF WRITTEN TO ACCDEV*/    0769
         LH    @08,TOACCDEV+2                                      0769
         ST    @08,BINWORD                                         0769
*    DECADDR = ADDR(CFACCDEV);                             /*@G51DGGB*/
         LA    @08,CFACCDEV                                        0770
         ST    @08,DECADDR                                         0770
*    CALL CONVBIN;  /*CONVERT THE ITEM TO PRINTABLE          @G51DGGB*/
         BAL   @14,CONVBIN                                         0771
*    PRINTBDY = CCF; /*MOVE THE CCF INFO TO THE PRINT LINE   @G51DGGB*/
         MVI   PRINTBDY+131,C' '                                   0772
         MVC   PRINTBDY(131),CCF                                   0772
*    CALL PRINTIT;  /*GO PRINT THE CCF DEBUG DATA            @G51DGGB*/
         BAL   @14,PRINTIT                                         0773
*    BINWORD = 0;   /* SET NUMBER FOUND TO 0 FIRST           @G51DGGB*/
         SLR   @08,@08                                             0774
         ST    @08,BINWORD                                         0774
*    DO P = 1 BY 1 TO FRAMENUM; /*CHECK EACH TO SEE IF COMPLETE*/  0775
         LA    @08,1                                               0775
         ST    @08,P                                               0775
         B     @DE00775                                            0775
@DL00775 DS    0H                                                  0776
*     IF FRAMETYP(P) = ALLALL THEN  /* = TO 'FF'X IF COMPLETE*/    0776
         MH    @08,@CH00227                                        0776
         L     @06,FRAMEPTR(,R2)                                   0776
         ALR   @06,@08                                             0776
         AL    @06,@CF01624                                        0776
         CLI   FRAMETYP-17(@06),X'FF'                              0776
         BNE   @RF00776                                            0776
*       BINWORD = BINWORD + 1; /*COUNT THE NUMBER OF COMPLETE ONES*/
         LA    @08,1                                               0777
         AL    @08,BINWORD                                         0777
         ST    @08,BINWORD                                         0777
*    END;                                                  /*@G51DGGB*/
@RF00776 LA    @08,1                                               0778
         AL    @08,P                                               0778
         ST    @08,P                                               0778
@DE00775 L     @06,FRAMEPTR(,R2)                                   0778
         C     @08,FRAMENUM(,@06)                                  0778
         BNH   @DL00775                                            0778
*    DECADDR = ADDR(FFNUMD);/*WHERE IN MESSAGE FOR CONVERTED VALUE*/
         LA    @08,FFNUMD                                          0779
         ST    @08,DECADDR                                         0779
*    CALL CONVBIN;/*CONVERT THE HEX VALUE TO PRINTABLE       @G51DGGB*/
         BAL   @14,CONVBIN                                         0780
*    PRINTBDY = FFSETS; /*MOVE THE MESSAGE TO PRINT LINE     @G51DGGB*/
         MVI   PRINTBDY+37,C' '                                    0781
         MVC   PRINTBDY+38(94),PRINTBDY+37                         0781
         MVC   PRINTBDY(37),FFSETS                                 0781
*    CALL PRINTIT; /*GO AND PRINT THE MESSAGE                @G51DGGB*/
         BAL   @14,PRINTIT                                         0782
*    BINWORD = BUILDCT;        /*ENTRIES THROUGH THE PROC    @G51DGGB*/
         L     @08,BUILDCT                                         0783
         ST    @08,BINWORD                                         0783
*    DECADDR = ADDR(BUILDNUM); /*LOCATION IN THE PRINT LINE  @G51DGGB*/
         LA    @08,BUILDNUM                                        0784
         ST    @08,DECADDR                                         0784
*    CALL CONVBIN;             /*CONVERT TO PRINTABLE        @G51DGGB*/
         BAL   @14,CONVBIN                                         0785
*    BINWORD = LASTCT;         /*NUMBER OF FRAMES WITH LAST FLAG OFF*/
         L     @08,LASTCT                                          0786
         ST    @08,BINWORD                                         0786
*    DECADDR = ADDR(LASTCTS);  /*ADDRESS IN THE PRINT LINE   @G51DGGB*/
         LA    @08,LASTCTS                                         0787
         ST    @08,DECADDR                                         0787
*    CALL CONVBIN;             /*CONVERT BINARY COUNT TO PRINTABLE*/
         BAL   @14,CONVBIN                                         0788
*    PRINTBDY = EXTRACT;       /*MOVE THE MESSAGE TO PRINT LINE*/  0789
         MVI   PRINTBDY+49,C' '                                    0789
         MVC   PRINTBDY+50(82),PRINTBDY+49                         0789
         MVC   PRINTBDY(49),EXTRACT                                0789
*    CALL PRINTIT;             /*GO PRINT THE DEBUG MESSAGE  @G51DGGB*/
         BAL   @14,PRINTIT                                         0790
*END;                                                      /*@G51DGGB*/
@EL00014 DS    0H                                                  0791
@EF00014 DS    0H                                                  0791
@ER00014 LM    @14,@12,@SA00014                                    0791
         BR    @14                                                 0791
*ALLREC: PROC;  /*FILTER BY DATE, TIME.                      @Z427VLS*/
ALLREC   STM   @14,@12,12(@13)                                     0792
*PASSFLAG = YES; /*RECORD SELECTED IF PASSFLAG NOT SET TO NO @Z427VLS*/
         OI    PASSFLAG(R2),B'00000001'                            0793
*IF (LRTDAY & '000F'X) = '000F'X THEN  /*PROTECT CVD FROM POSSIBLE  */
         MVC   @TS00001(2),LRTDAY(R7)                              0794
         NC    @TS00001(2),@CB01061                                0794
         CLC   @TS00001(2),@CB01061                                0794
         BNE   @RF00794                                            0794
*DO;                                   /*ABEND IF DATA IS BAD       */
*IF LRTDATE >= STDATE & LRTDATE <= ENDDATE THEN                    0796
         CLC   LRTDATE(4,R7),STDATE(R2)                            0796
         BL    @RF00796                                            0796
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           0796
         BH    @RF00796                                            0796
*  DO;                                                     /*@Z427VLS*/
*    IF (LRTTIME >= STTIME1 & LRTTIME <= ENDTIME1) ×               0798
*       (LRTTIME >= STTIME2 & LRTTIME <= ENDTIME2) THEN            0798
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0798
         BL    @GL00032                                            0798
         CLC   LRTTIME(4,R7),ENDTIME1(R2)                          0798
         BNH   @RT00798                                            0798
@GL00032 CLC   LRTTIME(4,R7),STTIME2(R2)                           0798
         BL    @RF00798                                            0798
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0798
         BH    @RF00798                                            0798
@RT00798 DS    0H                                                  0799
*      DO;                                                 /*@Z427VLS*/
*        IF SHIFT3RD = ON &                                        0800
*        /*IF CROSS MIDNIGHT BOUNDARY, ELIMINATE NON-THIRD SHIFT*/ 0800
*        /*INTERVALS                                         @Z427VLS*/
*          ((LRTDATE = STDATE & LRTTIME < STTIME1) ×               0800
*           (LRTDATE = ENDDATE & LRTTIME > ENDTIME2))              0800
*           THEN                                                   0800
         TM    SHIFT3RD(R2),B'00010000'                            0800
         BNO   @RF00800                                            0800
         CLC   LRTDATE(4,R7),STDATE(R2)                            0800
         BNE   @GL00036                                            0800
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0800
         BL    @RT00800                                            0800
@GL00036 CLC   LRTDATE(4,R7),ENDDATE(R2)                           0800
         BNE   @RF00800                                            0800
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0800
         BNH   @RF00800                                            0800
@RT00800 DS    0H                                                  0801
*             DO;                                          /*@Z427VLS*/
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0802
*              OUTTHIRD = OUTTHIRD + ONE;                  /*@Z427VLS*/
         LA    @08,1                                               0803
         AL    @08,OUTTHIRD                                        0803
         ST    @08,OUTTHIRD                                        0803
*             END;                                         /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0806
*     DO;                                                  /*@Z427VLS*/
         B     @RC00798                                            0806
@RF00798 DS    0H                                                  0807
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0807
*      OUTTIME = OUTTIME + ONE;                            /*@Z427VLS*/
         LA    @08,1                                               0808
         AL    @08,OUTTIME                                         0808
         ST    @08,OUTTIME                                         0808
*     END;                                                 /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*  ELSE                                                            0811
*  DO;                                                     /*@Z427VLS*/
         B     @RC00796                                            0811
@RF00796 DS    0H                                                  0812
*   PASSFLAG = NO;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0812
*   OUTDATE = OUTDATE + ONE;                               /*@Z427VLS*/
         LA    @08,1                                               0813
         AL    @08,OUTDATE                                         0813
         ST    @08,OUTDATE                                         0813
*  IF DEBUG38 = ON & LRTDATE > ENDDATE THEN  /*DOES THE USER WANT TO*/
         TM    DEBUG38(R2),B'00000010'                             0814
         BNO   @RF00814                                            0814
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           0814
         BNH   @RF00814                                            0814
*   WEAREFIN = ON;    /*STOP WHEN WE ARE PAST THE STOP DATE ON THE */
         OI    WEAREFIN,B'00000010'                                0815
*                     /*INPUT DATA SET AFTER READ WILL ACT AS IF EOF*/
*                     /*HAS BEEN FOUND ON INPUT DATA SET     @0099VLS*/
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
*ELSE                                                              0818
*DO;                                                       /*@Z427VLS*/
         B     @RC00794                                            0818
@RF00794 DS    0H                                                  0819
*PASSFLAG = NO;                                            /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0819
*BADTIME = BADTIME + ONE;                                  /*@Z427VLS*/
         LA    @08,1                                               0820
         AL    @08,BADTIME                                         0820
         ST    @08,BADTIME                                         0820
*END;                                                      /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00015 DS    0H                                                  0822
@EF00015 DS    0H                                                  0822
@ER00015 LM    @14,@12,12(@13)                                     0822
         BR    @14                                                 0822
*RECDEP: PROC; /*IDENTIFY RECORD TYPE, SET SORT TABLE KEY    @Z427VLS*/
RECDEP   STM   @14,@12,@SA00016                                    0823
*              /*PERFORM FILTERING                           @Z427VLS*/
*IF LRTRUNC = ON THEN                                              0824
         TM    LRTRUNC(R7),B'00100000'                             0824
         BNO   @RF00824                                            0824
*  DO;                                                     /*@Z427VLS*/
*   TRUNCT = TRUNCT + 1  ;                                 /*@Z427VLS*/
         LA    @08,1                                               0826
         AL    @08,TRUNCT                                          0826
         ST    @08,TRUNCT                                          0826
*   PASSFLAG = OFF;                                        /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0827
*  END;                                                    /*@Z427VLS*/
* ELSE                                                             0829
*  DO;                                                     /*@Z427VLS*/
         B     @RC00824                                            0829
@RF00824 DS    0H                                                  0830
*IF  (RTYP1 < ONE  )                                               0830
*                × (RTYP1 > NINE ) THEN                            0830
         L     @08,RTYP1                                           0830
         LTR   @08,@08                                             0830
         BNP   @RT00830                                            0830
         C     @08,@CF00035                                        0830
         BNH   @RF00830                                            0830
@RT00830 DS    0H                                                  0831
*   DO;                                                    /*@Z427VLS*/
*     WHATYPE = WHATYPE + 1;                               /*@Z427VLS*/
         LA    @08,1                                               0832
         AL    @08,WHATYPE                                         0832
         ST    @08,WHATYPE                                         0832
*     PASSFLAG = OFF;                                      /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0833
*   END;                                                   /*@Z427VLS*/
*ELSE                                                              0835
*  DO;                                                     /*@Z427VLS*/
         B     @RC00830                                            0835
@RF00830 DS    0H                                                  0836
*    IF RTYP1 = THREE THEN                                         0836
         CLC   RTYP1(4),@CF00076                                   0836
         BNE   @RF00836                                            0836
*      CALL OBRFILT;                                       /*@Z427VLS*/
         BAL   @14,OBRFILT                                         0837
*    ELSE                                                          0838
*      DO;                                                 /*@Z427VLS*/
         B     @RC00836                                            0838
@RF00836 DS    0H                                                  0839
*        IF RTYP1 = NINE  THEN                                     0839
         CLC   RTYP1(4),@CF00035                                   0839
         BNE   @RF00839                                            0839
*          CALL MDRFILT;                                   /*@Z427VLS*/
         BAL   @14,MDRFILT                                         0840
*        ELSE                                                      0841
*          DO;                                             /*@Z427VLS*/
         B     @RC00839                                            0841
@RF00839 DS    0H                                                  0842
*            IF RTYP1 = ONE   THEN                                 0842
         CLC   RTYP1(4),@CF00055                                   0842
         BNE   @RF00842                                            0842
*              CALL MCHFILT;                               /*@Z427VLS*/
         BAL   @14,MCHFILT                                         0843
*            ELSE                                                  0844
*             DO;                                          /*@Z427VLS*/
         B     @RC00842                                            0844
@RF00842 DS    0H                                                  0845
*               IF RTYP1 = TWO   THEN                              0845
         CLC   RTYP1(4),@CF00074                                   0845
         BNE   @RF00845                                            0845
*                 CALL CCHFILT;                            /*@Z427VLS*/
         BAL   @14,CCHFILT                                         0846
*               ELSE                                               0847
*                DO;                                       /*@Z427VLS*/
         B     @RC00845                                            0847
@RF00845 DS    0H                                                  0848
*                   IF RTYP1 = FOUR  THEN                          0848
         CLC   RTYP1(4),@CF00064                                   0848
         BNE   @RF00848                                            0848
*                     CALL SOFTFILT;                       /*@Z427VLS*/
         BAL   @14,SOFTFILT                                        0849
*                   ELSE                                           0850
*                     DO;                                  /*@Z427VLS*/
         B     @RC00848                                            0850
@RF00848 DS    0H                                                  0851
*                       IF RTYP1 = FIVE  THEN                      0851
         CLC   RTYP1(4),@CF00079                                   0851
         BNE   @RF00851                                            0851
*                         CALL IPLFILT;                    /*@Z427VLS*/
         BAL   @14,IPLFILT                                         0852
*                       ELSE                                       0853
*                         DO;                              /*@Z427VLS*/
         B     @RC00851                                            0853
@RF00851 DS    0H                                                  0854
*                           IF RTYP1 = SIX   THEN                  0854
         CLC   RTYP1(4),@CF00081                                   0854
         BNE   @RF00854                                            0854
*                             CALL DDRFILT;                /*@Z427VLS*/
         BAL   @14,DDRFILT                                         0855
*                           ELSE                                   0856
*                             DO;                          /*@Z427VLS*/
         B     @RC00854                                            0856
@RF00854 DS    0H                                                  0857
*                               IF RTYP1 = SEVEN THEN              0857
         CLC   RTYP1(4),@CF00083                                   0857
         BNE   @RF00857                                            0857
*                                 CALL MIHFILT;            /*@Z427VLS*/
         BAL   @14,MIHFILT                                         0858
*                               ELSE                               0859
*                                 CALL EODFILT;            /*@Z427VLS*/
         B     @RC00857                                            0859
@RF00857 BAL   @14,EODFILT                                         0859
*                             END;                         /*@Z427VLS*/
*                         END;                             /*@Z427VLS*/
*                     END;                                 /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
*             END;                                         /*@Z427VLS*/
*         END;                                             /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00016 DS    0H                                                  0869
@EF00016 DS    0H                                                  0869
@ER00016 LM    @14,@12,@SA00016                                    0869
         BR    @14                                                 0869
*SIFTSORT: PROC;                                           /*@Z427VLS*/
SIFTSORT STM   @14,@12,@SA00017                                    0870
*/* SORT THAT ONLY EXAMINES AN ENTRY ONCE IF DATA IS IN ORDER*/    0871
* IF DEBUG23^= ON & I > TWO THEN /*NO SORT IF ONLY 1         @Z427VLS*/
         TM    DEBUG23(R2),B'00000001'                             0871
         BO    @RF00871                                            0871
         CLC   I(4),@CF00074                                       0871
         BNH   @RF00871                                            0871
* DO;                                                      /*@Z427VLS*/
*SRTCONT =((PASSNUM-1) * 10)  + SORTADR;                   /*@Z427VLS*/
         L     @08,PASSNUM                                         0873
         BCTR  @08,0                                               0873
         MH    @08,@CH00034                                        0873
         AL    @08,SORTADR(,R2)                                    0873
         ST    @08,SRTCONT                                         0873
*/* THIS SORT IS DONE IN BAL IN ORDER TO GET MIN PROCESSING TIME    */
*/* SOME 35 INSTRUCTIONS WERE CUT FROM THE BEST THAT PLS WOULD DO   */
*/* THIS CUT THE RUN TIME DOWN BY APP. 50 PERCENT            @Z427VLS*/
*         GENERATE REFS(SORTKEY,SORTABLE);                 /*@Z427VLS*/
          LA     R15,10              LOAD THE INCREMENT VALUE
          L      R3,SORTADR(R2)      LOAD THE START OF THE TABLE
          L      R4,SRTCONT          LOAD THE MAX LIMIT
          LR     R1,R3               SET UP THE STOP LIMIT ON BACK UP
          B      DOIT                GO AROUND THIS CODE FIRST TIME
LOOPBCK1  ALR    R3,R15              MOVE THE POINTER TO NEXT ENTRY
          CR     R3,R4               ARE WE POINTING TO LAST ENTRY
          BNL    DONE                FINISHED WITH THE SORT SO EXIT
DOIT      CLC    SORTKEY(5,R3),SORTABLE+10(R3)
          BNH    LOOPBCK1            DONT NEED TO SORT ITEM
          XC     SORTABLE(10,R3),SORTABLE+10(R3)
          XC     SORTABLE+10(10,R3),SORTABLE(R3)
          XC     SORTABLE(10,R3),SORTABLE+10(R3)
          LR     R6,R3               SET NEW POINTER(BACKWARD)
LOOPBCK2  SR     R6,R15              POINT TO LAST ENTRY
          CR     R6,R1               DONT BACK OUT OF THE TABLE
          BL     LOOPBCK1            START WITH NEXT ENTRY
          CLC    SORTABLE(10,R6),SORTABLE+10(R6)
          BNH    LOOPBCK1            NO FUTHER SHUFFEL THIS SAMPLE
          XC     SORTABLE+10(10,R6),SORTABLE(R6)
          XC     SORTABLE(10,R6),SORTABLE+10(R6)
          XC     SORTABLE+10(10,R6),SORTABLE(R6)
          B      LOOPBCK2            DOES IT NEED TO BE MOVED AGAIN
DONE      EQU    *
*SORTSW = OFF; /*SORT EVTABLE BY CPU MODEL, SERIAL IN DESCENDING ORDR*/
         NI    SORTSW,B'10111111'                                  0875
*DO J = 1 BY 1 TO EVNUM - 1;                               /*@Z427VLS*/
         LA    @08,1                                               0876
         ST    @08,J                                               0876
         B     @DE00876                                            0876
@DL00876 DS    0H                                                  0877
*  IF EVKEY(J) < EVKEY(J+1) THEN                                   0877
         LR    @06,@08                                             0877
         MH    @06,@CH00081                                        0877
         L     @03,EVPTR(,R2)                                      0877
         ST    @06,@TF00001                                        0877
         ALR   @06,@03                                             0877
         LR    @01,@03                                             0877
         AL    @01,@TF00001                                        0877
         CLC   EVKEY-6(6,@06),EVKEY(@01)                           0877
         BNL   @RF00877                                            0877
*    DO;                                                   /*@Z427VLS*/
*      EVKEY(J) = (EVKEY(J)    &&   EVKEY(J+1));           /*@Z427VLS*/
         LR    @06,@03                                             0879
         AL    @06,@TF00001                                        0879
         LR    @01,@03                                             0879
         AL    @01,@TF00001                                        0879
         XC    EVKEY-6(6,@06),EVKEY(@01)                           0879
*      EVKEY(J+1) = (EVKEY(J+1) &&  EVKEY(J));             /*@Z427VLS*/
         LR    @06,@03                                             0880
         AL    @06,@TF00001                                        0880
         LR    @01,@03                                             0880
         AL    @01,@TF00001                                        0880
         XC    EVKEY(6,@06),EVKEY-6(@01)                           0880
*      EVKEY(J) = (EVKEY(J)    &&   EVKEY(J+1));           /*@Z427VLS*/
         LR    @06,@03                                             0881
         AL    @06,@TF00001                                        0881
         AL    @03,@TF00001                                        0881
         XC    EVKEY-6(6,@06),EVKEY(@03)                           0881
*  SORTSW = OFF;                                           /*@Z427VLS*/
         NI    SORTSW,B'10111111'                                  0882
*  DO K = J BY -1 TO 2 WHILE (SORTSW = OFF);               /*@Z427VLS*/
         ST    @08,K                                               0883
         B     @DE00883                                            0883
@DL00883 TM    SORTSW,B'01000000'                                  0883
         BNZ   @DC00883                                            0883
*  IF EVKEY(K) > EVKEY(K-1) THEN /*DO WE NEED TO BACK UP     @0001VLS*/
         MH    @08,@CH00081                                        0884
         L     @06,EVPTR(,R2)                                      0884
         ST    @08,@TF00001                                        0884
         ALR   @08,@06                                             0884
         LR    @03,@06                                             0884
         AL    @03,@TF00001                                        0884
         AL    @03,@CF01625                                        0884
         CLC   EVKEY-6(6,@08),EVKEY-6(@03)                         0884
         BNH   @RF00884                                            0884
*      DO;                                                 /*@Z427VLS*/
*        EVKEY(K)    = (EVKEY(K)   &&    EVKEY(K-1));      /*@Z427VLS*/
         LR    @08,@06                                             0886
         AL    @08,@TF00001                                        0886
         LR    @03,@06                                             0886
         AL    @03,@TF00001                                        0886
         AL    @03,@CF01625                                        0886
         XC    EVKEY-6(6,@08),EVKEY-6(@03)                         0886
*        EVKEY(K-1)  = (EVKEY(K-1) &&    EVKEY(K));        /*@Z427VLS*/
         LR    @08,@06                                             0887
         AL    @08,@TF00001                                        0887
         AL    @08,@CF01625                                        0887
         LR    @03,@06                                             0887
         AL    @03,@TF00001                                        0887
         XC    EVKEY-6(6,@08),EVKEY-6(@03)                         0887
*        EVKEY(K)    = (EVKEY(K)   &&    EVKEY(K-1));      /*@Z427VLS*/
         LR    @08,@06                                             0888
         AL    @08,@TF00001                                        0888
         AL    @06,@TF00001                                        0888
         AL    @06,@CF01625                                        0888
         XC    EVKEY-6(6,@08),EVKEY-6(@06)                         0888
*      END;                                                /*@Z427VLS*/
*    ELSE SORTSW = ON;                                     /*@Z427VLS*/
         B     @RC00884                                            0890
@RF00884 OI    SORTSW,B'01000000'                                  0890
*  END;                                                    /*@Z427VLS*/
@RC00884 SLR   @08,@08                                             0891
         BCTR  @08,0                                               0891
         AL    @08,K                                               0891
         ST    @08,K                                               0891
@DE00883 C     @08,@CF00074                                        0891
         BNL   @DL00883                                            0891
@DC00883 DS    0H                                                  0892
*  END;                                                    /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
@RF00877 LA    @08,1                                               0893
         AL    @08,J                                               0893
         ST    @08,J                                               0893
@DE00876 L     @06,EVPTR(,R2)                                      0893
         LH    @06,EVNUM(,@06)                                     0893
         BCTR  @06,0                                               0893
         CR    @08,@06                                             0893
         BNH   @DL00876                                            0893
* END;                                                     /*@Z427VLS*/
*DO I = 1 BY 1 TO EVNUM;                                   /*@Z427VLS*/
@RF00871 LA    @08,1                                               0895
         ST    @08,I                                               0895
         B     @DE00895                                            0895
@DL00895 DS    0H                                                  0896
* EVLETTER(I) = LETTERS(I);                                /*@Z427VLS*/
         LR    @06,@08                                             0896
         MH    @06,@CH00081                                        0896
         L     @03,EVPTR(,R2)                                      0896
         ALR   @03,@06                                             0896
         LA    @06,LETTERS-1(@08)                                  0896
         MVC   EVLETTER-6(1,@03),0(@06)                            0896
*END;                                                      /*@Z427VLS*/
         AL    @08,@CF00055                                        0897
         ST    @08,I                                               0897
@DE00895 L     @06,EVPTR(,R2)                                      0897
         CH    @08,EVNUM(,@06)                                     0897
         BNH   @DL00895                                            0897
*  END;                                                    /*@Z427VLS*/
@EL00017 DS    0H                                                  0898
@EF00017 DS    0H                                                  0898
@ER00017 LM    @14,@12,@SA00017                                    0898
         BR    @14                                                 0898
*OBRFILT: PROC;                                            /*@Z427VLS*/
OBRFILT  STM   @14,@12,@SA00018                                    0899
*IF POBR = OFF THEN                                                0900
         TM    POBR(R2),B'00100000'                                0900
         BNZ   @RF00900                                            0900
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0902
         SLA   @08,2                                               0902
         LA    @06,1                                               0902
         AL    @06,RDEPCT-4(@08)                                   0902
         ST    @06,RDEPCT-4(@08)                                   0902
*  PASSFLAG=OFF;                                           /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0903
*  END;                                                    /*@0099VLS*/
*ELSE                                                              0905
*  DO;                                                     /*@Z427VLS*/
         B     @RC00900                                            0905
@RF00900 DS    0H                                                  0906
*    IF SHORTSW = ON THEN                                          0906
         TM    SHORTSW(R7),B'00100000'                             0906
         BNO   @RF00906                                            0906
*      DO;                                                 /*@Z427VLS*/
*        WORKCUA = (OBRSCUA & ONLYCUA3);                   /*@Z427VLS*/
         MVC   WORKCUA(3),OBRSCUA(R7)                              0908
         NC    WORKCUA(3),@CB01043                                 0908
*        WORKDEV = OBRSDEV2;                               /*@Z427VLS*/
         MVC   WORKDEV(2),OBRSDEV2(R7)                             0909
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0911
*      DO;                                                 /*@Z427VLS*/
         B     @RC00906                                            0911
@RF00906 DS    0H                                                  0912
*        WORKCUA = (OBRPCUA & ONLYCUA3);                   /*@Z427VLS*/
         MVC   WORKCUA(3),OBRPCUA(R7)                              0912
         NC    WORKCUA(3),@CB01043                                 0912
*        WORKDEV = OBRDEV;                                 /*@Z427VLS*/
         MVC   WORKDEV(2),OBRDEV(R7)                               0913
*        IF WORKDEV = DEV23051 ×                                   0914
*           WORKDEV = DEV23052 THEN                                0914
         CLC   WORKDEV(2),@CB01007                                 0914
         BE    @RT00914                                            0914
         CLC   WORKDEV(2),@CB01009                                 0914
         BNE   @RF00914                                            0914
@RT00914 DS    0H                                                  0915
*           WORKCUA = (WORKCUA & NOUNIT3);                 /*@Z427VLS*/
         NC    WORKCUA(3),@CB01037                                 0915
*      END;                                                /*@Z427VLS*/
@RF00914 DS    0H                                                  0917
*    IF CUAPTR ^= ZERO THEN                                        0917
@RC00906 L     @08,CUAPTR(,R2)                                     0917
         LTR   @08,@08                                             0917
         BZ    @RF00917                                            0917
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0918
*    IF PASSFLAG = YES  &  DEVPTR ^= ZERO THEN                     0919
@RF00917 TM    PASSFLAG(R2),B'00000001'                            0919
         BNO   @RF00919                                            0919
         L     @08,DEVPTR(,R2)                                     0919
         LTR   @08,@08                                             0919
         BZ    @RF00919                                            0919
*      CALL DEVSEL;                                        /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0920
*   IF PASSFLAG = YES & VOLPTR ^= ZERO THEN                        0921
@RF00919 TM    PASSFLAG(R2),B'00000001'                            0921
         BNO   @RF00921                                            0921
         L     @08,VOLPTR(,R2)                                     0921
         LTR   @08,@08                                             0921
         BZ    @RF00921                                            0921
*      CALL VOLID;                  /*DO VOLUME SELECTION    @0099VLS*/
         BAL   @14,VOLID                                           0922
*   IF PASSFLAG = YES & TERMTRY = ONE  THEN                        0923
@RF00921 TM    PASSFLAG(R2),B'00000001'                            0923
         BNO   @RF00923                                            0923
         CLC   TERMTRY(4),@CF00055                                 0923
         BNE   @RF00923                                            0923
*      CALL TERMID;                 /*DO TERMINAL SELECTION  @0099VLS*/
         BAL   @14,TERMID                                          0924
*   END;                                                   /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
@EL00018 DS    0H                                                  0926
@EF00018 DS    0H                                                  0926
@ER00018 LM    @14,@12,@SA00018                                    0926
         BR    @14                                                 0926
*MDRFILT: PROC;   /*MISCELLANEOUS DATA RECORD FILTER.        @Z427VLS*/
MDRFILT  STM   @14,@12,@SA00019                                    0927
*                 /*PASSFLAG IS TURNED OFF IF RECORD FAILS   @Z427VLS*/
*IF PTTYP = OFF THEN  /*ARE MDR RECORDS SELECTED             @Z427VLS*/
         TM    PTTYP(R2),B'10000000'                               0928
         BNZ   @RF00928                                            0928
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0930
         SLA   @08,2                                               0930
         LA    @06,1                                               0930
         AL    @06,RDEPCT-4(@08)                                   0930
         ST    @06,RDEPCT-4(@08)                                   0930
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0931
*  END;                                                    /*@0099VLS*/
*ELSE                                                              0933
*  DO;                                                     /*@Z427VLS*/
         B     @RC00928                                            0933
@RF00928 DS    0H                                                  0934
*    WORKMOD = (TPRCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKMOD(2),TPRCUA(R7)                               0934
         NC    WORKMOD(2),@CB01041                                 0934
*    IF TPRDEV = DV23051 × TPRDEV = DV23052 THEN                   0935
         CLI   TPRDEV(R7),X'12'                                    0935
         BE    @RT00935                                            0935
         CLI   TPRDEV(R7),X'02'                                    0935
         BNE   @RF00935                                            0935
@RT00935 DS    0H                                                  0936
*      WORKMOD = (WORKMOD & NOUNIT2); /*HEAVEN ONLY KNOWS WHY*/    0936
         NC    WORKMOD(2),@CB01039                                 0936
*    IF CUAPTR ^= ZERO THEN                                        0937
@RF00935 L     @08,CUAPTR(,R2)                                     0937
         LTR   @08,@08                                             0937
         BZ    @RF00937                                            0937
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0938
*    IF PASSFLAG = YES & DEVPTR ^= ZERO THEN                       0939
@RF00937 TM    PASSFLAG(R2),B'00000001'                            0939
         BNO   @RF00939                                            0939
         L     @08,DEVPTR(,R2)                                     0939
         LTR   @08,@08                                             0939
         BZ    @RF00939                                            0939
*      CALL DEVSEL;                                        /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0940
*   IF PASSFLAG = YES & VOLPTR ^= ZERO THEN                        0941
@RF00939 TM    PASSFLAG(R2),B'00000001'                            0941
         BNO   @RF00941                                            0941
         L     @08,VOLPTR(,R2)                                     0941
         LTR   @08,@08                                             0941
         BZ    @RF00941                                            0941
*      CALL VOLID;                 /*DO VOLUME SELECTION     @0099VLS*/
         BAL   @14,VOLID                                           0942
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00019 DS    0H                                                  0944
@EF00019 DS    0H                                                  0944
@ER00019 LM    @14,@12,@SA00019                                    0944
         BR    @14                                                 0944
*DDRFILT: PROC;                                            /*@Z427VLS*/
DDRFILT  STM   @14,@12,@SA00020                                    0945
*IF PDDR = OFF THEN                                                0946
         TM    PDDR(R2),B'00000100'                                0946
         BNZ   @RF00946                                            0946
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0948
         SLA   @08,2                                               0948
         LA    @06,1                                               0948
         AL    @06,RDEPCT-4(@08)                                   0948
         ST    @06,RDEPCT-4(@08)                                   0948
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0949
*  END;                                                    /*@0099VLS*/
*ELSE                                                              0951
*  DO;                                                     /*@Z427VLS*/
         B     @RC00946                                            0951
@RF00946 DS    0H                                                  0952
*    WORKDEV = DDRFCUA;                                    /*@Z427VLS*/
         MVC   WORKDEV(2),DDRFCUA(R7)                              0952
*    WORKMOD = DDRCODE2;                                   /*@Z427VLS*/
         MVC   WORKMOD(2),DDRCODE2(R7)                             0953
*    IF CUAPTR ^= ZERO THEN                                        0954
         L     @08,CUAPTR(,R2)                                     0954
         LTR   @08,@08                                             0954
         BZ    @RF00954                                            0954
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0955
*    IF PASSFLAG = YES  &  DEVPTR ^= ZERO THEN                     0956
@RF00954 TM    PASSFLAG(R2),B'00000001'                            0956
         BNO   @RF00956                                            0956
         L     @08,DEVPTR(,R2)                                     0956
         LTR   @08,@08                                             0956
         BZ    @RF00956                                            0956
*      CALL DEVSEL;                                        /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0957
*    IF PASSFLAG = YES & VOLPTR ^= ZERO THEN                       0958
@RF00956 TM    PASSFLAG(R2),B'00000001'                            0958
         BNO   @RF00958                                            0958
         L     @08,VOLPTR(,R2)                                     0958
         LTR   @08,@08                                             0958
         BZ    @RF00958                                            0958
*       CALL VOLID;               /*GO AND DO THE VOLUME SELECTION*/
         BAL   @14,VOLID                                           0959
*  END;                                                    /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00020 DS    0H                                                  0961
@EF00020 DS    0H                                                  0961
@ER00020 LM    @14,@12,@SA00020                                    0961
         BR    @14                                                 0961
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*MIHFILT: PROC;                                            /*@Z427VLS*/
MIHFILT  STM   @14,@12,@SA00021                                    0962
*IF PMIH = OFF THEN                                                0963
         TM    PMIH(R2),B'00000010'                                0963
         BNZ   @RF00963                                            0963
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0965
         SLA   @08,2                                               0965
         LA    @06,1                                               0965
         AL    @06,RDEPCT-4(@08)                                   0965
         ST    @06,RDEPCT-4(@08)                                   0965
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0966
*  END;                                                    /*@0099VLS*/
*ELSE                                                              0968
*  DO;                                                     /*@Z427VLS*/
         B     @RC00963                                            0968
@RF00963 DS    0H                                                  0969
*    WORKCUA = MIHCUA;                                     /*@Z427VLS*/
         MVC   WORKCUA(3),MIHCUA(R7)                               0969
*    WORKDEV = MIHCODE2;                                   /*@Z427VLS*/
         MVC   WORKDEV(2),MIHCODE2(R7)                             0970
*    IF CUAPTR ^= ZERO THEN                                        0971
         L     @08,CUAPTR(,R2)                                     0971
         LTR   @08,@08                                             0971
         BZ    @RF00971                                            0971
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0972
*    IF PASSFLAG = YES & DEVPTR ^= ZERO THEN                       0973
@RF00971 TM    PASSFLAG(R2),B'00000001'                            0973
         BNO   @RF00973                                            0973
         L     @08,DEVPTR(,R2)                                     0973
         LTR   @08,@08                                             0973
         BZ    @RF00973                                            0973
*      CALL DEVSEL;                                        /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0974
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00021 DS    0H                                                  0976
@EF00021 DS    0H                                                  0976
@ER00021 LM    @14,@12,@SA00021                                    0976
         BR    @14                                                 0976
*CCHFILT: PROC;                                            /*@Z427VLS*/
CCHFILT  STM   @14,@12,@SA00022                                    0977
*IF PCHAN = OFF THEN                                               0978
         TM    PCHAN(R2),B'01000000'                               0978
         BNZ   @RF00978                                            0978
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0980
         SLA   @08,2                                               0980
         LA    @06,1                                               0980
         AL    @06,RDEPCT-4(@08)                                   0980
         ST    @06,RDEPCT-4(@08)                                   0980
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0981
*  END;                                                    /*@0099VLS*/
*ELSE                                                              0983
*  DO;                                                     /*@Z427VLS*/
         B     @RC00978                                            0983
@RF00978 DS    0H                                                  0984
*    WORKMOD = (CCHCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKMOD(2),CCHCUA(R7)                               0984
         NC    WORKMOD(2),@CB01041                                 0984
*    IF CUAPTR ^= ZERO THEN                                        0985
         L     @08,CUAPTR(,R2)                                     0985
         LTR   @08,@08                                             0985
         BZ    @RF00985                                            0985
*      CALL CUASELCT;                                      /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0986
*    IF PASSFLAG = YES THEN      /*MAKE SURE KEEPING THIS RECORD*/ 0987
@RF00985 TM    PASSFLAG(R2),B'00000001'                            0987
         BNO   @RF00987                                            0987
*      CALL MERIDCK;             /*IS THIS A MERDIAN CPU     @G51DGGB*/
         BAL   @14,MERIDCK                                         0988
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00022 DS    0H                                                  0990
@EF00022 DS    0H                                                  0990
@ER00022 LM    @14,@12,@SA00022                                    0990
         BR    @14                                                 0990
*/*                                                          @Z427VLS*/
*IPLFILT: PROC;                                            /*@Z427VLS*/
IPLFILT  STM   @14,@12,12(@13)                                     0991
*IF PIPL = OFF THEN                                                0992
         TM    PIPL(R2),B'00001000'                                0992
         BNZ   @RF00992                                            0992
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           0994
         SLA   @08,2                                               0994
         LA    @06,1                                               0994
         AL    @06,RDEPCT-4(@08)                                   0994
         ST    @06,RDEPCT-4(@08)                                   0994
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0995
*  END;                                                    /*@0099VLS*/
*END;                                                      /*@Z427VLS*/
@EL00023 DS    0H                                                  0997
@EF00023 DS    0H                                                  0997
@ER00023 LM    @14,@12,12(@13)                                     0997
         BR    @14                                                 0997
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*EODFILT: PROC;                                            /*@Z427VLS*/
EODFILT  STM   @14,@12,12(@13)                                     0998
*IF PEOD = OFF THEN                                                0999
         TM    PEOD(R2),B'00000001'                                0999
         BNZ   @RF00999                                            0999
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           1001
         SLA   @08,2                                               1001
         LA    @06,1                                               1001
         AL    @06,RDEPCT-4(@08)                                   1001
         ST    @06,RDEPCT-4(@08)                                   1001
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1002
*  END;                                                    /*@0099VLS*/
*END;                                                      /*@Z427VLS*/
@EL00024 DS    0H                                                  1004
@EF00024 DS    0H                                                  1004
@ER00024 LM    @14,@12,12(@13)                                     1004
         BR    @14                                                 1004
*MCHFILT: PROC;                                            /*@Z427VLS*/
MCHFILT  STM   @14,@12,@SA00025                                    1005
*IF PMCH = OFF THEN                                                1006
         TM    PMCH(R2),B'10000000'                                1006
         BNZ   @RF01006                                            1006
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           1008
         SLA   @08,2                                               1008
         LA    @06,1                                               1008
         AL    @06,RDEPCT-4(@08)                                   1008
         ST    @06,RDEPCT-4(@08)                                   1008
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1009
*  END;                                                    /*@0099VLS*/
* ELSE                                                             1011
*   CALL MERIDCK;     /*GO SEE IF THIS IS AN MERDIAN CPU     @G51DGGB*/
         B     @RC01006                                            1011
@RF01006 BAL   @14,MERIDCK                                         1011
*END;                                                      /*@Z427VLS*/
@EL00025 DS    0H                                                  1012
@EF00025 DS    0H                                                  1012
@ER00025 LM    @14,@12,@SA00025                                    1012
         BR    @14                                                 1012
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*SOFTFILT: PROC;                                           /*@Z427VLS*/
SOFTFILT STM   @14,@12,12(@13)                                     1013
*IF PSOFT = OFF THEN                                               1014
         TM    PSOFT(R2),B'00010000'                               1014
         BNZ   @RF01014                                            1014
*  DO;                                                     /*@0099VLS*/
*  RDEPCT(RTYP1) = RDEPCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF THIS*/
         L     @08,RTYP1                                           1016
         SLA   @08,2                                               1016
         LA    @06,1                                               1016
         AL    @06,RDEPCT-4(@08)                                   1016
         ST    @06,RDEPCT-4(@08)                                   1016
*  PASSFLAG = OFF;                                         /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1017
*  END;                                                    /*@0099VLS*/
*END;                                                      /*@Z427VLS*/
@EL00026 DS    0H                                                  1019
@EF00026 DS    0H                                                  1019
@ER00026 LM    @14,@12,12(@13)                                     1019
         BR    @14                                                 1019
*CUASELCT: PROC;                                           /*@Z427VLS*/
CUASELCT STM   @14,@12,12(@13)                                     1020
*CUAOK = NO;                                               /*@Z427VLS*/
         NI    CUAOK,B'11011111'                                   1021
*DO J = 1 BY 1 TO CUANUM WHILE CUAOK = NO;                 /*@Z427VLS*/
         LA    @08,1                                               1022
         ST    @08,J                                               1022
         B     @DE01022                                            1022
@DL01022 TM    CUAOK,B'00100000'                                   1022
         BNZ   @DC01022                                            1022
*  IF WORKMOD >= CUA1(J) & WORKMOD <= CUA2(J) THEN                 1023
         SLA   @08,2                                               1023
         L     @06,CUAPTR(,R2)                                     1023
         ST    @08,@TF00001                                        1023
         ALR   @08,@06                                             1023
         BCTR  @08,0                                               1023
         BCTR  @08,0                                               1023
         CLC   WORKMOD(2),CUA1-2(@08)                              1023
         BL    @RF01023                                            1023
         AL    @06,@TF00001                                        1023
         CLC   WORKMOD(2),CUA2-4(@06)                              1023
         BH    @RF01023                                            1023
*    CUAOK = YES;                                          /*@Z427VLS*/
         OI    CUAOK,B'00100000'                                   1024
*END;                                                      /*@Z427VLS*/
@RF01023 LA    @08,1                                               1025
         AL    @08,J                                               1025
         ST    @08,J                                               1025
@DE01022 L     @06,CUAPTR(,R2)                                     1025
         CH    @08,CUANUM(,@06)                                    1025
         BNH   @DL01022                                            1025
@DC01022 DS    0H                                                  1026
*IF CUAOK = NO THEN                                                1026
         TM    CUAOK,B'00100000'                                   1026
         BNZ   @RF01026                                            1026
* DO;                                                      /*@Z427VLS*/
*  PASSFLAG = NO;                                          /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1028
*  CUACT(RTYP1) = CUACT(RTYP1) + ONE;                      /*@Z427VLS*/
         L     @08,RTYP1                                           1029
         SLA   @08,2                                               1029
         LA    @06,1                                               1029
         AL    @06,CUACT-4(@08)                                    1029
         ST    @06,CUACT-4(@08)                                    1029
* END;                                                     /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00027 DS    0H                                                  1031
@EF00027 DS    0H                                                  1031
@ER00027 LM    @14,@12,12(@13)                                     1031
         BR    @14                                                 1031
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*/********************************************************************/
*/*    THIS PROC WILL SET THE FLAG IF THIS CPU IS A MERDIAN TYPE    */
*MERIDCK: PROC;                                            /*@G51DGGB*/
MERIDCK  STM   @14,@12,@SA00028                                    1032
*DCL A   FIXED(31) INIT(0);                                /*@G51DGGB*/
*ISMERD = NO;                     /*SET THE FLAG PRIOR TO START*/  1034
         NI    ISMERD,B'11111101'                                  1034
*DO A = 1 BY 1 TO MRDNUMBR WHILE(ISMERD = NO);             /*@G51DGGB*/
         LA    @08,1                                               1035
         ST    @08,A                                               1035
         B     @DE01035                                            1035
@DL01035 TM    ISMERD,B'00000010'                                  1035
         BNZ   @DC01035                                            1035
* IF LRTMODEL = MODEL(A) THEN /*COMPARE AGAINST THE MERDIAN CPUS*/ 1036
         ALR   @08,@08                                             1036
         L     @06,MERDCPTR(,R2)                                   1036
         ALR   @06,@08                                             1036
         CLC   LRTMODEL(2,R7),MODEL-2(@06)                         1036
         BNE   @RF01036                                            1036
*  DO;                                                     /*@G51DGGB*/
*  ISMERD = YES;      /*SET TO EXIT FROM THE LOOP            @G51DGGB*/
         OI    ISMERD,B'00000010'                                  1038
*  CALL BUILDFTB;     /*BUILD ENTRY IN FRAME TABLE IF REQUIRED*/   1039
         BAL   @14,BUILDFTB                                        1039
*  END;                                                    /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@RF01036 LA    @08,1                                               1041
         AL    @08,A                                               1041
         ST    @08,A                                               1041
@DE01035 L     @06,MERDCPTR(,R2)                                   1041
         CH    @08,MRDNUMBR(,@06)                                  1041
         BNH   @DL01035                                            1041
@DC01035 DS    0H                                                  1042
*END;                                                      /*@G51DGGB*/
@EL00028 DS    0H                                                  1042
@EF00028 DS    0H                                                  1042
@ER00028 LM    @14,@12,@SA00028                                    1042
         BR    @14                                                 1042
*/********************************************************************/
*/*    THIS PROC WILL WRITE ALL SAVED MCF & CCF TYPE RECORDS TO THE  */
*/*    ACCDEV DATA SET                                       @G51DGGB*/
*WRITEFRM: PROC;                                           /*@G51DGGB*/
WRITEFRM STM   @14,@12,@SA00029                                    1043
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*DCL YY1 FIXED(31) INIT(0);                                /*@G51DGGB*/
*         DO YY1 = 1 BY 1 TO FRAMENUM WHILE R15 < FOUR;     /*SETS. */
         LA    @14,1                                               1046
         ST    @14,YY1                                             1046
         B     @DE01046                                            1046
@DL01046 C     R15,@CF00064                                        1046
         BNL   @DC01046                                            1046
*           IF FRAMETYP(YY1) = ALLALL THEN /*IF COMPLETE SET @G51DGGB*/
         MH    @14,@CH00227                                        1047
         L     @08,FRAMEPTR(,R2)                                   1047
         ST    @14,@TF00001                                        1047
         ALR   @14,@08                                             1047
         AL    @14,@CF01624                                        1047
         CLI   FRAMETYP-17(@14),X'FF'                              1047
         BNE   @RF01047                                            1047
*             DO;                                          /*@G51DGGB*/
*               LISTPTR = FRAMLOCM(YY1);   /*ESTABLISH LISTLOC ADDR.*/
         L     @14,@TF00001                                        1049
         AL    @08,@CF01620                                        1049
         L     @14,FRAMLOCM-20(@14,@08)                            1049
         ST    @14,LISTPTR                                         1049
*               DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR ;/*@G51DGGB*/
         LA    @14,1                                               1050
         ST    @14,Z                                               1050
         B     @DE01050                                            1050
@DL01050 C     R15,@CF00064                                        1050
         BNL   @DC01050                                            1050
*                 RECCCHHR = LISTCCHR(Z);  /*GET ALL MCH FRAMES*/  1051
         MH    @14,@CH00079                                        1051
         L     @08,LISTPTR                                         1051
         ALR   @08,@14                                             1051
         BCTR  @08,0                                               1051
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      1051
*                 CALL IOHND(READIRCT);    /*READ FRAME FROM DIRECTWK*/
         L     @15,ADIOHND(,R2)                                    1052
         LA    @01,@AL01052                                        1052
         BALR  @14,@15                                             1052
*                 IF R15 = ZERO THEN       /*WRITE FRAME TO ACCDEV*/
         LTR   R15,R15                                             1053
         BNZ   @RF01053                                            1053
*                  DO;                                     /*@G51DGGB*/
*                   IF DEBUG46 ^= ON THEN  /*NORMAL WRITE TO HIST*/
         TM    DEBUG46(R2),B'00000010'                             1055
         BO    @RF01055                                            1055
*                    DO;                                   /*@G51DGGB*/
*                    CALL IOHND(RITEHIST); /*ADD TO HISTORY FILE*/ 1057
         L     @15,ADIOHND(,R2)                                    1057
         LA    @01,@AL01057                                        1057
         BALR  @14,@15                                             1057
*                     TOACCDEV(1) = TOACCDEV(1) + 1;       /*@G51DGGB*/
         LA    @14,1                                               1058
         AH    @14,TOACCDEV                                        1058
         STH   @14,TOACCDEV                                        1058
*                    END;                                  /*@G51DGGB*/
*                   ELSE                                           1060
*                   CALL ADDTABLE;  /*PASS ON TO EVENT THE FRAME REC*/
         B     @RC01055                                            1060
@RF01055 BAL   @14,ADDTABLE                                        1060
*                  END;                                    /*@G51DGGB*/
*                 ELSE                     /*IDENTIFY MISSING FRAME*/
*                   ERROR = 12;                            /*@G51DGGB*/
         B     @RC01053                                            1062
@RF01053 MVC   ERROR(4),@CF00032                                   1062
*              END;                                        /*@G51DGGB*/
@RC01053 LA    @14,1                                               1063
         AL    @14,Z                                               1063
         ST    @14,Z                                               1063
@DE01050 L     @08,LISTPTR                                         1063
         C     @14,LISTNUM(,@08)                                   1063
         BNH   @DL01050                                            1063
@DC01050 DS    0H                                                  1064
*              IF ERROR = ZERO THEN /*IF NO ACCDEV WRITE ERROR*/   1064
         L     @14,ERROR                                           1064
         LTR   @14,@14                                             1064
         BNZ   @RF01064                                            1064
*                DO;                                       /*@G51DGGB*/
*                  LISTPTR = FRAMLOCC(YY1); /*GET CCH FRAMES @G51DGGB*/
         L     @14,YY1                                             1066
         MH    @14,@CH00227                                        1066
         L     @08,FRAMEPTR(,R2)                                   1066
         L     @14,FRAMLOCC-24(@14,@08)                            1066
         ST    @14,LISTPTR                                         1066
*                  DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR;      1067
         LA    @14,1                                               1067
         ST    @14,Z                                               1067
         B     @DE01067                                            1067
@DL01067 C     R15,@CF00064                                        1067
         BNL   @DC01067                                            1067
*                    RECCCHHR = LISTCCHR(Z);               /*@G51DGGB*/
         MH    @14,@CH00079                                        1068
         L     @08,LISTPTR                                         1068
         ALR   @08,@14                                             1068
         BCTR  @08,0                                               1068
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      1068
*                      CALL IOHND(READIRCT); /*READ FRAME OFF DRCTWK*/
         L     @15,ADIOHND(,R2)                                    1069
         LA    @01,@AL01069                                        1069
         BALR  @14,@15                                             1069
*                      IF R15 = ZERO THEN    /*IF SUCCESS THEN WRITE*/
         LTR   R15,R15                                             1070
         BNZ   @RF01070                                            1070
*                       DO;                                /*@G51DGGB*/
*                        IF DEBUG46 ^= ON THEN                     1072
         TM    DEBUG46(R2),B'00000010'                             1072
         BO    @RF01072                                            1072
*                         DO;                              /*@G51DGGB*/
*                          CALL IOHND(RITEHIST); /*WRITE TO ACCDEV*/
         L     @15,ADIOHND(,R2)                                    1074
         LA    @01,@AL01074                                        1074
         BALR  @14,@15                                             1074
*                           TOACCDEV(2) = TOACCDEV(2) + 1; /*@G51DGGB*/
         LA    @14,1                                               1075
         AH    @14,TOACCDEV+2                                      1075
         STH   @14,TOACCDEV+2                                      1075
*                         END;                             /*@G51DGGB*/
*                          ELSE /*USER WANTS EVENT TO RECEIVE RECORD*/
*                        CALL ADDTABLE;  /*ADD REC TO THE SORT TABLE*/
         B     @RC01072                                            1077
@RF01072 BAL   @14,ADDTABLE                                        1077
*                        END;                              /*@G51DGGB*/
@RC01072 DS    0H                                                  1079
*                    END;                                  /*@G51DGGB*/
@RF01070 LA    @14,1                                               1079
         AL    @14,Z                                               1079
         ST    @14,Z                                               1079
@DE01067 L     @08,LISTPTR                                         1079
         C     @14,LISTNUM(,@08)                                   1079
         BNH   @DL01067                                            1079
@DC01067 DS    0H                                                  1080
*                 END;                                     /*@G51DGGB*/
*             END;                                         /*@G51DGGB*/
*           ELSE  /*INCOMPLETE FRAME SET                     @G51DGGB*/
*             DO;                                          /*@G51DGGB*/
         B     @RC01047                                            1082
@RF01047 DS    0H                                                  1083
*               MSGNO = QQ1;/*MISSING FRAME SET MESSAGE      @G51DGGB*/
         MVC   MSGNO(4),@CF00083                                   1083
*               CCHINDX = YY1; /*CORRECT DEBUG FRAME COUNTS BY */  1084
         L     @14,YY1                                             1084
         ST    @14,CCHINDX                                         1084
*               CALL ERRMSG;  /*GO AND BUILD ERROR MESSAGE   @G51DGGB*/
         BAL   @14,ERRMSG                                          1085
*               CALL FIXENTRY; /*PASSING ENTRY INDEX TO FIXENTRY*/ 1086
         BAL   @14,FIXENTRY                                        1086
*             END;                                         /*@G51DGGB*/
*         END;                                             /*@G51DGGB*/
@RC01047 LA    @14,1                                               1088
         AL    @14,YY1                                             1088
         ST    @14,YY1                                             1088
@DE01046 L     @08,FRAMEPTR(,R2)                                   1088
         C     @14,FRAMENUM(,@08)                                  1088
         BNH   @DL01046                                            1088
@DC01046 DS    0H                                                  1089
*RESPECIFY (R15) UNRESTRICTED;                             /*@G51DGGB*/
* END;                                                     /*@G51DGGB*/
@EL00029 DS    0H                                                  1090
@EF00029 DS    0H                                                  1090
@ER00029 LM    @14,@12,@SA00029                                    1090
         BR    @14                                                 1090
*DEVSEL: PROC;                                             /*@Z427VLS*/
DEVSEL   STM   @14,@12,12(@13)                                     1091
*IF RTYP1 = NINE THEN                                              1092
         CLC   RTYP1(4),@CF00035                                   1092
         BNE   @RF01092                                            1092
*  DO;                                                     /*@Z427VLS*/
*    IF DEVEXCL = ON THEN                                          1094
         TM    DEVEXCL(R2),B'00100000'                             1094
         BNO   @RF01094                                            1094
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1096
*        DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               1097
         ST    @08,J                                               1097
         B     @DE01097                                            1097
@DL01097 TM    DEVOK,B'00100000'                                   1097
         BNO   @DC01097                                            1097
*        IF TPRDEV = MDRVAL(J) THEN                                1098
         L     @06,DEVPTR(,R2)                                     1098
         ALR   @06,@08                                             1098
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1098
         BNE   @RF01098                                            1098
*          DO;                                             /*@Z427VLS*/
*            DEVOK = NO;                                   /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1100
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1101
*          END;                                            /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF01098 LA    @08,1                                               1103
         AL    @08,J                                               1103
         ST    @08,J                                               1103
@DE01097 L     @06,DEVPTR(,R2)                                     1103
         CH    @08,MDRNUM(,@06)                                    1103
         BNH   @DL01097                                            1103
@DC01097 DS    0H                                                  1104
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          1105
*      DO;                                                 /*@Z427VLS*/
         B     @RC01094                                            1105
@RF01094 DS    0H                                                  1106
*        DEVOK = NO;                                       /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1106
*        DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = NO;         /*@Z427VLS*/
         LA    @08,1                                               1107
         ST    @08,J                                               1107
         B     @DE01107                                            1107
@DL01107 TM    DEVOK,B'00100000'                                   1107
         BNZ   @DC01107                                            1107
*        IF TPRDEV = MDRVAL(J) THEN                                1108
         L     @06,DEVPTR(,R2)                                     1108
         ALR   @06,@08                                             1108
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1108
         BNE   @RF01108                                            1108
*          DEVOK = YES;                                    /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1109
*        END;                                              /*@Z427VLS*/
@RF01108 LA    @08,1                                               1110
         AL    @08,J                                               1110
         ST    @08,J                                               1110
@DE01107 L     @06,DEVPTR(,R2)                                     1110
         CH    @08,MDRNUM(,@06)                                    1110
         BNH   @DL01107                                            1110
@DC01107 DS    0H                                                  1111
*        IF DEVOK = NO THEN                                        1111
         TM    DEVOK,B'00100000'                                   1111
         BNZ   @RF01111                                            1111
*          PASSFLAG = NO;                                  /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1112
*       END;                                               /*@Z427VLS*/
*    END;                                                  /*@Z427VLS*/
*  ELSE                    /*OBR,MIH DDR TYPES OF RECORDS    @Z427VLS*/
*    IF DEVEXCL = ON THEN                                          1115
         B     @RC01092                                            1115
@RF01092 TM    DEVEXCL(R2),B'00100000'                             1115
         BNO   @RF01115                                            1115
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1117
*        DO J = 1 BY 1 TO DEVNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               1118
         ST    @08,J                                               1118
         B     @DE01118                                            1118
@DL01118 TM    DEVOK,B'00100000'                                   1118
         BNO   @DC01118                                            1118
*          IF WORKDEV = DEVVAL(J) THEN                             1119
         ALR   @08,@08                                             1119
         L     @06,DEVPTR(,R2)                                     1119
         ALR   @06,@08                                             1119
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1119
         BNE   @RF01119                                            1119
*            DO;                                           /*@Z427VLS*/
*              DEVOK = NO;                                 /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1121
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1122
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF01119 LA    @08,1                                               1124
         AL    @08,J                                               1124
         ST    @08,J                                               1124
@DE01118 L     @06,DEVPTR(,R2)                                     1124
         CH    @08,DEVNUM(,@06)                                    1124
         BNH   @DL01118                                            1124
@DC01118 DS    0H                                                  1125
*      END;                                                /*@Z427VLS*/
*  ELSE                                                            1126
*   DO;                                                    /*@Z427VLS*/
         B     @RC01115                                            1126
@RF01115 DS    0H                                                  1127
*     DEVOK = NO;                                          /*@Z427VLS*/
         NI    DEVOK,B'11011111'                                   1127
*     DO J =  1 BY 1 TO DEVNUM WHILE DEVOK = NO;           /*@Z427VLS*/
         LA    @08,1                                               1128
         ST    @08,J                                               1128
         B     @DE01128                                            1128
@DL01128 TM    DEVOK,B'00100000'                                   1128
         BNZ   @DC01128                                            1128
*       IF WORKDEV = DEVVAL(J) THEN                                1129
         ALR   @08,@08                                             1129
         L     @06,DEVPTR(,R2)                                     1129
         ALR   @06,@08                                             1129
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1129
         BNE   @RF01129                                            1129
*         DEVOK = YES;                                     /*@Z427VLS*/
         OI    DEVOK,B'00100000'                                   1130
*     END;                                                 /*@Z427VLS*/
@RF01129 LA    @08,1                                               1131
         AL    @08,J                                               1131
         ST    @08,J                                               1131
@DE01128 L     @06,DEVPTR(,R2)                                     1131
         CH    @08,DEVNUM(,@06)                                    1131
         BNH   @DL01128                                            1131
@DC01128 DS    0H                                                  1132
*     IF DEVOK = NO THEN                                           1132
         TM    DEVOK,B'00100000'                                   1132
         BNZ   @RF01132                                            1132
*       PASSFLAG = OFF;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1133
*    END;                                                  /*@Z427VLS*/
@RF01132 DS    0H                                                  1135
* IF PASSFLAG = OFF THEN                                           1135
@RC01115 DS    0H                                                  1135
@RC01092 TM    PASSFLAG(R2),B'00000001'                            1135
         BNZ   @RF01135                                            1135
*  DEVCT(RTYP1) = DEVCT(RTYP1) + ONE;                      /*@Z427VLS*/
         L     @08,RTYP1                                           1136
         SLA   @08,2                                               1136
         LA    @06,1                                               1136
         AL    @06,DEVCT-4(@08)                                    1136
         ST    @06,DEVCT-4(@08)                                    1136
*END;                                                      /*@Z427VLS*/
@EL00030 DS    0H                                                  1137
@EF00030 DS    0H                                                  1137
@ER00030 LM    @14,@12,12(@13)                                     1137
         BR    @14                                                 1137
*/********************************************************************/
*/*    THIS PROC DETERMINE IF THE FRAMES ARE TO BE PROCESSED AND IF  */
*/*     THERE ARE ANY ERROR WITH THE LOGICAL FRAME SET       @G51DGGB*/
*CKFRAMES: PROC;                                           /*@G51DGGB*/
CKFRAMES STM   @14,@12,@SA00031                                    1138
* RESPECIFY (R15)  RESTRICTED;                             /*@G51DGGB*/
*   IF PMCH = ON × PCHAN = ON  THEN /* MCH OR CCH SELECTION THEN */
         TM    PMCH(R2),B'11000000'                                1140
         BZ    @RF01140                                            1140
*    DO;                            /* DONT SELECT FRAMES    @G51DGGB*/
*      IF LRTCNT = ONE & (LRTKEY1 & 'F0'X) = 'A0'X THEN            1142
         CLI   LRTCNT(R7),1                                        1142
         BNE   @RF01142                                            1142
         MVC   @TS00001(1),LRTKEY1(R7)                             1142
         NI    @TS00001,X'F0'                                      1142
         CLI   @TS00001,X'A0'                                      1142
         BNE   @RF01142                                            1142
*        DO;                                               /*@G51DGGB*/
*          SAVESEQ = ONE;           /* RESET SEQUENCE CHECK  @G51DGGB*/
         MVC   SAVESEQ(2),@CH00055                                 1144
*          CALL FRAMEREP;           /*IS THIS SET TO BE SAVED    */
         BAL   @14,FRAMEREP                                        1145
*                                   /*IF YES THEN FRAMEREP WILL  */
*                                   /*SAVE ONLY THE FIRST RECORD */
*          R15 = ERROR;             /* BE SAVED              @G51DGGB*/
         L     R15,ERROR                                           1146
*          IF LRTNLAST = OFF & R15 = ZERO THEN                     1147
         TM    LRTNLAST(R7),B'10000000'                            1147
         BNZ   @RF01147                                            1147
         SLR   @14,@14                                             1147
         CR    R15,@14                                             1147
         BNE   @RF01147                                            1147
*           DO;                                            /*@G51DGGB*/
*            FRAMETYP(CCHINDX) = ALLMCH;                   /*@G51DGGB*/
         L     @08,CCHINDX                                         1149
         MH    @08,@CH00227                                        1149
         L     @06,FRAMEPTR(,R2)                                   1149
         ALR   @06,@08                                             1149
         AL    @06,@CF01624                                        1149
         MVI   FRAMETYP-17(@06),X'02'                              1149
*            SAVESEQ = 0;                                  /*@G51DGGB*/
         STH   @14,SAVESEQ                                         1150
*           END;                                           /*@G51DGGB*/
*        END;                                              /*@G51DGGB*/
*      ELSE                         /* NON-FIRST FRAME       @G51DGGB*/
*        DO;                                               /*@G51DGGB*/
         B     @RC01142                                            1153
@RF01142 DS    0H                                                  1154
*          IF FRAMEYES = ON THEN    /* IF FRAME IS TO BE SAVED  */ 1154
         TM    FRAMEYES,B'00000001'                                1154
         BNO   @RF01154                                            1154
*            DO;                                           /*@G51DGGB*/
*              SAVESEQ = SAVESEQ + 1;  /* UP SEQ CHECK       @G51DGGB*/
         LA    @14,1                                               1156
         AH    @14,SAVESEQ                                         1156
         STH   @14,SAVESEQ                                         1156
*              IF SAVESEQ = LRTCNT THEN /* IF RECORD NOT MISSING */
         SLR   @08,@08                                             1157
         IC    @08,LRTCNT(,R7)                                     1157
         CR    @14,@08                                             1157
         BNE   @RF01157                                            1157
*                DO;                                       /*@G51DGGB*/
*                  CALL BUILDTTR;    /* SAVE EXTERNAL LOCATION */  1159
         BAL   @14,BUILDTTR                                        1159
*                  R15 = ERROR;     /*LOAD ERROR IF THERE WAS ONE*/
         L     R15,ERROR                                           1160
*                  IF R15 = ZERO THEN  /* IF FRAME EXTERNAL LOC  */
         SLR   @14,@14                                             1161
         CR    R15,@14                                             1161
         BNE   @RF01161                                            1161
*                    DO;               /* SUCCESSFULLY SAVED @G51DGGB*/
*                      IF LRTNLAST = OFF THEN /* IF LAST FRAME  */ 1163
         TM    LRTNLAST(R7),B'10000000'                            1163
         BNZ   @RF01163                                            1163
*                        DO;                               /*@G51DGGB*/
*                          LASTCT = LASTCT + 1;            /*@G51DGGB*/
         LA    @08,1                                               1165
         AL    @08,LASTCT                                          1165
         ST    @08,LASTCT                                          1165
*                          IF(LRTKEY1 & GENREC)= HEXA0 THEN        1166
         MVC   @TS00001(1),LRTKEY1(R7)                             1166
         NI    @TS00001,X'F0'                                      1166
         CLI   @TS00001,X'A0'                                      1166
         BNE   @RF01166                                            1166
*                            DO;                           /*@G51DGGB*/
*                            FRAMETYP(CCHINDX) = ALLMCH;   /*@G51DGGB*/
         L     @08,CCHINDX                                         1168
         MH    @08,@CH00227                                        1168
         L     @06,FRAMEPTR(,R2)                                   1168
         ALR   @06,@08                                             1168
         AL    @06,@CF01624                                        1168
         MVI   FRAMETYP-17(@06),X'02'                              1168
*                            SAVESEQ = 0;                  /*@G51DGGB*/
         STH   @14,SAVESEQ                                         1169
*                            END;                          /*@G51DGGB*/
*                          /*IF ALL MCH FRAMES HAVE BEEN SAVED,  */
*                          /*THEN INDICATE SUCH              @G51DGGB*/
*                           ELSE                  /*IS CCH FRAME */
*                            DO;                           /*@G51DGGB*/
         B     @RC01166                                            1171
@RF01166 DS    0H                                                  1172
*                            FRAMEYES = OFF;               /*@G51DGGB*/
         NI    FRAMEYES,B'11111110'                                1172
*                            IF FRAMETYP(CCHINDX) ^= ALLMCH THEN   1173
         L     @14,CCHINDX                                         1173
         MH    @14,@CH00227                                        1173
         L     @08,FRAMEPTR(,R2)                                   1173
         ALR   @08,@14                                             1173
         AL    @08,@CF01624                                        1173
         CLI   FRAMETYP-17(@08),X'02'                              1173
         BE    @RF01173                                            1173
*                              DO; /*IF MISSING LAST MCH FRAME   */
*                                MSGNO = QQ; /*SET FLAG FOR CORRECT M*/
         MVC   MSGNO(4),@CF00032                                   1175
*                                CALL ERRMSG;  /*PRINT OUT MESSAGE*/
         BAL   @14,ERRMSG                                          1176
*                                SETREJCT(FRINDEX) =               1177
*                                SETREJCT(FRINDEX) + 1;    /*@G51DGGB*/
         L     @14,FRINDEX                                         1177
         ALR   @14,@14                                             1177
         LA    @08,1                                               1177
         AH    @08,SETREJCT-2(@14)                                 1177
         STH   @08,SETREJCT-2(@14)                                 1177
*                                CALL FIXENTRY; /*DELETE INCOM-  */
         BAL   @14,FIXENTRY                                        1178
*                              END;             /*PLETE SET. @G51DGGB*/
*                            ELSE   /*IS COMPLETE SET -INDICATE  */
*                              FRAMETYP(CCHINDX) = ALLALL; /*IT IS*/
         B     @RC01173                                            1180
@RF01173 L     @14,CCHINDX                                         1180
         MH    @14,@CH00227                                        1180
         L     @08,FRAMEPTR(,R2)                                   1180
         ALR   @08,@14                                             1180
         AL    @08,@CF01624                                        1180
         MVI   FRAMETYP-17(@08),X'FF'                              1180
*                             END;                         /*@G51DGGB*/
*                        END;                              /*@G51DGGB*/
*                   END;                                   /*@G51DGGB*/
*              END;                                        /*@G51DGGB*/
*            ELSE   /*MISSING MIDDLE FRAME                   @G51DGGB*/
*              DO;                                         /*@G51DGGB*/
         B     @RC01157                                            1185
@RF01157 DS    0H                                                  1186
*                MSGNO = QQ;  /*TELL ERROR WHICH MESSAGE     @G51DGGB*/
         MVC   MSGNO(4),@CF00032                                   1186
*                CALL ERRMSG; /*GO AND PRINT THE MISSING FRAME MSG*/
         BAL   @14,ERRMSG                                          1187
*                SETREJCT(FRINDEX) = SETREJCT(FRINDEX) + 1;/*@G51DGGB*/
         L     @14,FRINDEX                                         1188
         ALR   @14,@14                                             1188
         LA    @08,1                                               1188
         AH    @08,SETREJCT-2(@14)                                 1188
         STH   @08,SETREJCT-2(@14)                                 1188
*                FRAMEYES = OFF; /*DONT SAVE INCOMPLETE SET  @G51DGGB*/
         NI    FRAMEYES,B'11111110'                                1189
*                CALL FIXENTRY; /*DELETE REFS TO INCOMPLETE SET*/  1190
         BAL   @14,FIXENTRY                                        1190
*              END;                                        /*@G51DGGB*/
*            END;                                          /*@G51DGGB*/
*          ELSE      /*FRAME NOT TO BE SAVED                 @G51DGGB*/
*            SETREJCT(FRINDEX) = SETREJCT(FRINDEX) + 1;    /*@G51DGGB*/
         B     @RC01154                                            1193
@RF01154 L     @14,FRINDEX                                         1193
         ALR   @14,@14                                             1193
         LA    @08,1                                               1193
         AH    @08,SETREJCT-2(@14)                                 1193
         STH   @08,SETREJCT-2(@14)                                 1193
*      END;                                                /*@G51DGGB*/
*   END;                                                   /*@G51DGGB*/
*  ELSE   /*NOT ACCUMULATING OR SELECTING MCH OR CCH RECORDS @G51DGGB*/
*    SETREJCT(FRINDEX) = SETREJCT(FRINDEX) + 1; /*COUNT FRAMES DROPPED*
         B     @RC01140                                            1196
@RF01140 L     @14,FRINDEX                                         1196
         ALR   @14,@14                                             1196
         LA    @08,1                                               1196
         AH    @08,SETREJCT-2(@14)                                 1196
         STH   @08,SETREJCT-2(@14)                                 1196
*PASSFLAG = NO;         /*STOP IT FRAOM GETTING IN TO NORMAL PROCESS*/
@RC01140 NI    PASSFLAG(R2),B'11111110'                            1197
*END; /*END OF CKFRAMES                                      @G51DGGB*/
@EL00031 DS    0H                                                  1198
@EF00031 DS    0H                                                  1198
@ER00031 LM    @14,@12,@SA00031                                    1198
         BR    @14                                                 1198
*/********************************************************************/
*/*    THIS PROC WILL SERVICE CERTAIN DEBUG REQUEST          @G51DGGB*/
*/*     DEBUG4 - PRINT THE NAME AND THE COMPILE DATE OF THIS ROUTINE */
*DBUGSET: PROC;                                            /*@G51DGGB*/
DBUGSET  STM   @14,@12,@SA00032                                    1199
*DCL  BUG4 CHAR(9) INIT('DEBUG4 - ');                      /*@G51DGGB*/
* IF DEBUG4 = ON THEN        /*DID USER REQUEST COMPILE DATE PRINTED*/
         TM    DEBUG4(R2),B'00001000'                              1201
         BNO   @RF01201                                            1201
*  DO;                                                     /*@G51DGGB*/
*   RESPECIFY (R15) RESTRICTED;                            /*@G51DGGB*/
*   R15 = R12 - 27;    /*SET REG TO WHERE ID & COMPILE DATE ARE AT*/
         LR    R15,R12                                             1204
         SL    R15,@CF01331                                        1204
*   PRINTBDY = BUG4;   /*MOVE THE DEBUG4 LABEL INTO THE PRINT LINE*/
         MVI   PRINTBDY+9,C' '                                     1205
         MVC   PRINTBDY+10(122),PRINTBDY+9                         1205
         MVC   PRINTBDY(9),BUG4                                    1205
*   GEN(MVC   PRINTBDY+10(16),0(R15));/*MOVE THIS TO THE PRINT LINE*/
         MVC   PRINTBDY+10(16),0(R15)
*   CALL PRINTIT;         /*GO PRINT THE MESSAGE             @G51DGGB*/
         BAL   @14,PRINTIT                                         1207
*   R15 = ZERO;         /*SET THE REG BACK TO ZERO           @G51DGGB*/
         SLR   R15,R15                                             1208
*   RESPECIFY (R15) UNRESTRICTED;                          /*@G51DGGB*/
*  END;                                                    /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00032 DS    0H                                                  1211
@EF00032 DS    0H                                                  1211
@ER00032 LM    @14,@12,@SA00032                                    1211
         BR    @14                                                 1211
*/********************************************************************/
*/*                                                          @G51DGGB*/
*/*THIS PROC WILL EXAMINE THE MERIDIAN MCH OR CCH IN ORDER TO BUILD*/
*/*FRAMTAB ENTRIES FOR UNIQUE RECORDS                        @G51DGGB*/
*BUILDFTB: PROC; /*BUILD NEW ENTRY IF CPU IS UNIQUE          @G51DGGB*/
BUILDFTB STM   @14,@12,@SA00033                                    1212
*LOOPOUT = NO;                                             /*@G51DGGB*/
         NI    LOOPOUT,B'11101111'                                 1213
*DO Y = 1 BY 1 TO EVMAXENT WHILE LOOPOUT = NO; /*EXAMINE ALL FRAMETAB*/
         LA    @08,1                                               1214
         ST    @08,Y                                               1214
@DL01214 TM    LOOPOUT,B'00010000'                                 1214
         BNZ   @DC01214                                            1214
*  IF FRAMECPU(Y) = LRTCPMOD THEN  /*IF CPU ALREADY IN TABLE THEN*/
         MH    @08,@CH00227                                        1215
         L     @06,FRAMEPTR(,R2)                                   1215
         ALR   @06,@08                                             1215
         AL    @06,@CF01618                                        1215
         CLC   FRAMECPU-4(5,@06),LRTCPMOD(R7)                      1215
         BNE   @RF01215                                            1215
*    LOOPOUT = YES; /*EXIT LOOP                              @G51DGGB*/
         OI    LOOPOUT,B'00010000'                                 1216
*  ELSE     /*IF ENTRY DOESNT MATCH THE FRAME                @G51DGGB*/
*    DO;                                                   /*@G51DGGB*/
         B     @RC01215                                            1217
@RF01215 DS    0H                                                  1218
*      IF FRAMECPU(Y) = ZERO1 THEN/*NO MATCH,ALL SET ENTRIES EXAMINED*/
         L     @08,Y                                               1218
         MH    @08,@CH00227                                        1218
         L     @06,FRAMEPTR(,R2)                                   1218
         ST    @08,@TF00001                                        1218
         ALR   @08,@06                                             1218
         AL    @08,@CF01618                                        1218
         CLC   FRAMECPU-4(5,@08),ZERO1                             1218
         BNE   @RF01218                                            1218
*        DO;                                               /*@G51DGGB*/
*          FRAMECPU(Y) = LRTCPMOD;  /*SET THE MODLE AND SERIAL # */
         LR    @08,@06                                             1220
         AL    @08,@TF00001                                        1220
         AL    @08,@CF01618                                        1220
         MVC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      1220
*          LOOPOUT = YES;              /*SET TO EXIT FROM THE LOOP*/
         OI    LOOPOUT,B'00010000'                                 1221
*          FRAMENUM = FRAMENUM + ONE;  /*KEEP TRACK OF NUMBER ENTRIES*/
         LA    @08,1                                               1222
         AL    @08,FRAMENUM(,@06)                                  1222
         ST    @08,FRAMENUM(,@06)                                  1222
*        END;                                              /*@G51DGGB*/
*      ELSE                                                        1224
*        IF Y = EVMAXENT THEN /*UNIQUE ENTRY BUT NOT ROOM IN TABLE*/
         B     @RC01218                                            1224
@RF01218 CLC   Y(4),@CF00088                                       1224
         BNE   @RF01224                                            1224
*          DO;                                             /*@G51DGGB*/
*            IF ONETIME = NO THEN   /*ISSUE MESSAGE ONLY ONCE*/    1226
         TM    ONETIME,B'00000100'                                 1226
         BNZ   @RF01226                                            1226
*              DO;                                         /*@G51DGGB*/
*                MSGNO = YY;   /*TELL THE ERROR PROC WHICH MESSAGE*/
         MVC   MSGNO(4),@CF00066                                   1228
*                CALL ERRMSG;  /*PRINT OUT THE ERROR MESSAGE @G51DGGB*/
         BAL   @14,ERRMSG                                          1229
*                ONETIME = YES; /*SET TO NOT RETURN          @G51DGGB*/
         OI    ONETIME,B'00000100'                                 1230
*              END;                                        /*@G51DGGB*/
*          END;                                            /*@G51DGGB*/
@RF01226 DS    0H                                                  1233
*     END;                                                 /*@G51DGGB*/
@RF01224 DS    0H                                                  1233
@RC01218 DS    0H                                                  1234
*   END;                                                   /*@G51DGGB*/
@RC01215 LA    @08,1                                               1234
         AL    @08,Y                                               1234
         ST    @08,Y                                               1234
         C     @08,@CF00088                                        1234
         BNH   @DL01214                                            1234
@DC01214 DS    0H                                                  1235
*END; /*END OF PROC BUILDFTB                                 @G51DGGB*/
@EL00033 DS    0H                                                  1235
@EF00033 DS    0H                                                  1235
@ER00033 LM    @14,@12,@SA00033                                    1235
         BR    @14                                                 1235
*/********************************************************************/
*/*    THIS PROC WILL TAKE THE FRAMES NOW FOUND AND REPLACE THE ONES */
*/*    ALREADY FOUND IF THE DATE IS LATER OR IF NONE HAVE BEEN FOUND */
*/*    FOR THIS CPU THEN KEEP THEM AND FILL IN THE TABLE     @G51DGGB*/
*FRAMEREP: PROC; /*REPLACE FRAME IF MORE CURRENT FRAME FOUND @G51DGGB*/
FRAMEREP STM   @14,@12,@SA00034                                    1236
*                /*COMPLETE ENTRY IF NO DATE ETC.            @G51DGGB*/
*                /*APPEND LOCATION OF FRAME EXTERNAL LOCATION LIST*/
*DCL Q FIXED(31) INIT(0);                                  /*@G51DGGB*/
*GETOUT = NO;                                              /*@G51DGGB*/
         NI    GETOUT,B'11110111'                                  1238
*DO Q = 1 BY 1 TO FRAMENUM WHILE GETOUT = NO; /*LOOP THROUGH  SET*/
         LA    @08,1                                               1239
         ST    @08,Q                                               1239
         B     @DE01239                                            1239
@DL01239 TM    GETOUT,B'00001000'                                  1239
         BNZ   @DC01239                                            1239
*                                             /*ENTRIES OF FRAMETAB */
*  IF FRAMECPU(Q) = LRTCPMOD THEN             /*IF RECORD CPU MODEL */
         MH    @08,@CH00227                                        1240
         L     @06,FRAMEPTR(,R2)                                   1240
         ST    @08,@TF00001                                        1240
         ALR   @08,@06                                             1240
         AL    @08,@CF01618                                        1240
         CLC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      1240
         BNE   @RF01240                                            1240
*    DO;                                      /*SERIAL MATCHES THOSE*/
*  IF FRAMETYP(Q) ^= '00'X THEN                                    1242
         AL    @06,@TF00001                                        1242
         AL    @06,@CF01624                                        1242
         CLI   FRAMETYP-17(@06),X'00'                              1242
         BE    @RF01242                                            1242
*    DUPLICAT(FRINDEX) = DUPLICAT(FRINDEX) + 1;            /*@G51DGGB*/
         L     @08,FRINDEX                                         1243
         ALR   @08,@08                                             1243
         LA    @06,1                                               1243
         AH    @06,DUPLICAT-2(@08)                                 1243
         STH   @06,DUPLICAT-2(@08)                                 1243
*      CCHINDX = Q;  /*SAVE INDEX*/           /*OF THE ENTRY @G51DGGB*/
@RF01242 L     @08,Q                                               1244
         ST    @08,CCHINDX                                         1244
*      IF FRAMEDT(Q) < LRTDT THEN             /*IF REC DATE GREATER */
         MH    @08,@CH00227                                        1245
         L     @06,FRAMEPTR(,R2)                                   1245
         ST    @08,@TF00001                                        1245
         ALR   @08,@06                                             1245
         AL    @08,@CF01632                                        1245
         CLC   FRAMEDT-9(8,@08),LRTDT(R7)                          1245
         BNL   @RF01245                                            1245
*        DO;                                  /*THAN ENTRY DATE     */
*         IF DEBUG16 = ON & FRAMEDT(Q) ^= '0000000000000000'X THEN 1247
         TM    DEBUG16(R2),B'10000000'                             1247
         BNO   @RF01247                                            1247
         AL    @06,@TF00001                                        1247
         AL    @06,@CF01632                                        1247
         CLC   FRAMEDT-9(8,@06),@CB01577                           1247
         BE    @RF01247                                            1247
*          CALL FRAMMORE; /*PRINT THE INFO ABOUT THE NEW & DROPPED*/
         BAL   @14,FRAMMORE                                        1248
*           ELSE                                                   1249
*            DO;                                           /*@G51DGGB*/
         B     @RC01247                                            1249
@RF01247 DS    0H                                                  1250
*              CALL FIXENTRY;               /*DELETE OLD FRAME SET*/
         BAL   @14,FIXENTRY                                        1250
*              FRAMEDT(Q) = LRTDT;           /*SAVE HIGH DATE*/    1251
         L     @08,Q                                               1251
         MH    @08,@CH00227                                        1251
         L     @06,FRAMEPTR(,R2)                                   1251
         ALR   @06,@08                                             1251
         AL    @06,@CF01632                                        1251
         MVC   FRAMEDT-9(8,@06),LRTDT(R7)                          1251
*            END;                                          /*@G51DGGB*/
*              CALL BUILDTTR;                /*SAVE FRAME LOCATION*/
@RC01247 BAL   @14,BUILDTTR                                        1253
*               FRAMEYES = YES;/*SAVE SUCCEEDING FRAMES OF THIS    */
         OI    FRAMEYES,B'00000001'                                1254
*                              /*LOGICAL SET                 @G51DGGB*/
*         END;                                             /*@G51DGGB*/
*       ELSE  /*IMPLIES DATE IS LOW OR EQUAL                 @G51DGGB*/
*        DO;                                               /*@G51DGGB*/
         B     @RC01245                                            1256
@RF01245 DS    0H                                                  1257
*         IF FRAMEDT(Q) = LRTDT THEN /*IF TABLE DATE EQUALS RECORD DAT*
         L     @08,Q                                               1257
         MH    @08,@CH00227                                        1257
         L     @06,FRAMEPTR(,R2)                                   1257
         ST    @08,@TF00001                                        1257
         ALR   @08,@06                                             1257
         AL    @08,@CF01632                                        1257
         CLC   FRAMEDT-9(8,@08),LRTDT(R7)                          1257
         BNE   @RF01257                                            1257
*           DO;                                            /*@G51DGGB*/
*            IF FRAMETYP(Q) ^= ALLALL THEN                         1259
         AL    @06,@TF00001                                        1259
         AL    @06,@CF01624                                        1259
         CLI   FRAMETYP-17(@06),X'FF'                              1259
         BE    @RF01259                                            1259
*             DO;                                          /*@G51DGGB*/
*                      MSGNO = QQ; /*ISSUE FRAME SET INCOMPLETE MESS*/
         MVC   MSGNO(4),@CF00032                                   1261
*                      CALL ERRMSG;                        /*@G51DGGB*/
         BAL   @14,ERRMSG                                          1262
*                      CALL FIXENTRY; /*DELETE INCOMPLETE SET       */
         BAL   @14,FIXENTRY                                        1263
*                      CALL BUILDTTR; /*SAVE THIS FRAME      @G51DGGB*/
         BAL   @14,BUILDTTR                                        1264
*                      FRAMEYES = YES; /*SAVE SUCCEEDING MEMBERS */
         OI    FRAMEYES,B'00000001'                                1265
*             END;                                         /*@G51DGGB*/
*            ELSE  /*COMPLETE SET FOR THIS DATE ALREADY EXISTS      */
*               DO; /*FRAMETYP IS EQUAL TO ALLALL            @G51DGGB*/
         B     @RC01259                                            1267
@RF01259 DS    0H                                                  1268
*                   FRAMEYES = NO;/*DELETE SUCCEEDING FRAMES OF SET */
         NI    FRAMEYES,B'11111110'                                1268
*                   SETREJCT(FRINDEX) = SETREJCT(FRINDEX) + 1;     1269
         L     @08,FRINDEX                                         1269
         ALR   @08,@08                                             1269
         LA    @06,1                                               1269
         AH    @06,SETREJCT-2(@08)                                 1269
         STH   @06,SETREJCT-2(@08)                                 1269
*               END;                                       /*@G51DGGB*/
*        END; /*END OF CODE IF DATE IN RECORD EQUALS DATE IN TABLE*/
*       ELSE /*DATE IN TABLE GREATER THAN FRAME RECORD DATE  @G51DGGB*/
*        SETREJCT(FRINDEX) = SETREJCT(FRINDEX) + 1;        /*@G51DGGB*/
         B     @RC01257                                            1272
@RF01257 L     @08,FRINDEX                                         1272
         ALR   @08,@08                                             1272
         LA    @06,1                                               1272
         AH    @06,SETREJCT-2(@08)                                 1272
         STH   @06,SETREJCT-2(@08)                                 1272
*    END; /*END OF CODE IF DATE IN RECORD IS LOW OR EQUAL    @G51DGGB*/
@RC01257 DS    0H                                                  1274
*  GETOUT = YES; /*GET OUT OF LOOP AFTER CPU MATCH           @G51DGGB*/
@RC01245 OI    GETOUT,B'00001000'                                  1274
* END; /*END OF CODE FOR A RECORD TO ENTRY CPU MATCH         @G51DGGB*/
*END; /*END OF FRAMETAB LOOP                                 @G51DGGB*/
@RF01240 LA    @08,1                                               1276
         AL    @08,Q                                               1276
         ST    @08,Q                                               1276
@DE01239 L     @06,FRAMEPTR(,R2)                                   1276
         C     @08,FRAMENUM(,@06)                                  1276
         BNH   @DL01239                                            1276
@DC01239 DS    0H                                                  1277
*IF GETOUT = NO THEN /*MERIDIAN FRAME BUT NO ROOM IN TABLE   @G51DGGB*/
         TM    GETOUT,B'00001000'                                  1277
         BNZ   @RF01277                                            1277
*  NOMATCH(FRINDEX) = NOMATCH(FRINDEX) + 1;                /*@G51DGGB*/
         L     @08,FRINDEX                                         1278
         ALR   @08,@08                                             1278
         LA    @06,1                                               1278
         AH    @06,NOMATCH-2(@08)                                  1278
         STH   @06,NOMATCH-2(@08)                                  1278
*END; /*END OF PROC FRAMEREP                                 @G51DGGB*/
@EL00034 DS    0H                                                  1279
@EF00034 DS    0H                                                  1279
@ER00034 LM    @14,@12,@SA00034                                    1279
         BR    @14                                                 1279
*BUILDTTR: PROC; /*SAVE LOCATION OF A FRAME IN LISTLOC       @G51DGGB*/
BUILDTTR STM   @14,@12,@SA00035                                    1280
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*/
*DCL TEMP FIXED(31) INIT(0);                               /*@G51DGGB*/
*BUILDCT = BUILDCT + 1;                                    /*@G51DGGB*/
         LA    @14,1                                               1283
         AL    @14,BUILDCT                                         1283
         ST    @14,BUILDCT                                         1283
*IF (LRTKEY1 & GENREC) = HEXA0 THEN /* IF MCH FRAME          @G51DGGB*/
         MVC   @TS00001(1),LRTKEY1(R7)                             1284
         NI    @TS00001,X'F0'                                      1284
         CLI   @TS00001,X'A0'                                      1284
         BNE   @RF01284                                            1284
*  DO;                                                     /*@G51DGGB*/
*    IF FRAMLOCM(CCHINDX) = ZERO THEN /*IF LISTLOC CORE FOR A CPU*/
         L     @14,CCHINDX                                         1286
         MH    @14,@CH00227                                        1286
         L     @08,FRAMEPTR(,R2)                                   1286
         AL    @08,@CF01620                                        1286
         L     @14,FRAMLOCM-20(@14,@08)                            1286
         LTR   @14,@14                                             1286
         BNZ   @RF01286                                            1286
*      DO;                            /*IS UNALLOCATED       @G51DGGB*/
*        RESPECIFY (R0) RESTRICTED;                        /*@G51DGGB*/
*        R0 = LISTBENT * LISTMAX * 2; /*ALLOCATE CORE FOR BOTH CCH*/
         LA    R0,500                                              1289
*        R0 = R0 + 12;                /*AND MCH FRAME LOCATIONS   */
         AL    R0,@CF00032                                         1290
*        GEN(GETMAIN EC,LV=(0),A=TEMP,SP=21);              /*@G51DGGB*/
         GETMAIN EC,LV=(0),A=TEMP,SP=21
*        RESPECIFY (R0) UNRESTRICTED;                      /*@G51DGGB*/
*        IF R15 = SUCCESS THEN    /*DID WE GET THE CORE      @G51DGGB*/
         LTR   R15,R15                                             1293
         BNZ   @RF01293                                            1293
*          DO;                                             /*@G51DGGB*/
*            RESPECIFY (R0,R1,R4) RESTRICTED;              /*@G51DGGB*/
*            R1 = TEMP;               /*LOAD THE LOCATION OF THE CORE*/
         L     R1,TEMP                                             1296
*            FRAMLOCM(CCHINDX) = R1;  /*SET POINTERS TO LISTLOC   */
         L     @14,CCHINDX                                         1297
         MH    @14,@CH00227                                        1297
         L     @08,FRAMEPTR(,R2)                                   1297
         AL    @08,@CF01620                                        1297
         ST    R1,FRAMLOCM-20(@14,@08)                             1297
*            R1 = R1+LISTBENT *       /*TABLES FOR BOTH CCL AND MCH*/
*                LISTMAX+4;           /*FRAMES               @G51DGGB*/
         AL    R1,@CF01610                                         1298
*            R0 = ZERO;          /*ENSURE THAT TABLE ON WORD BOUNDARY*/
         SLR   R0,R0                                               1299
*            R4 = 4;             /*DIVIDE BY NUMBER OF BYTES IN WORD*/
         LA    R4,4                                                1300
*            GEN(DR R0,R4);                                /*@G51DGGB*/
         DR R0,R4
*            IF R0 > ZERO THEN /*REMAINDER MEANS NOT INTEGRAL NUMBER*/
         LTR   R0,R0                                               1302
         BNP   @RF01302                                            1302
*                              /*NUMBER OF DOUBLEWORDS.      @G51DGGB*/
*              R1 = R1 + 1; /*ADD ONE EXTRA FULL WORD        @G51DGGB*/
         AL    R1,@CF00055                                         1303
*            R1 = R1 * FOUR; /*RESET ONE TO NUMBER OF BYTES  @G51DGGB*/
@RF01302 SLL   R1,2                                                1304
*            FRAMLOCC(CCHINDX) = R1; /*SET POINTER TO CCH CCHHR TABLE*/
         L     @14,CCHINDX                                         1305
         MH    @14,@CH00227                                        1305
         L     @08,FRAMEPTR(,R2)                                   1305
         ST    R1,FRAMLOCC-24(@14,@08)                             1305
*            LISTPTR = R1;      /*ESTABLISH ADDRESSABILITY FOR CCH TB*/
         ST    R1,LISTPTR                                          1306
*            RESPECIFY (R0,R1,R4) UNRESTRICTED;            /*@G51DGGB*/
*            LISTNUM = ZERO;    /*ZERO CCH LISTLOC TABLE     @G51DGGB*/
         L     @14,LISTPTR                                         1308
         SLR   @08,@08                                             1308
         ST    @08,LISTNUM(,@14)                                   1308
*            DO Y = 1 BY 1 TO LISTMAX;                     /*@G51DGGB*/
         LA    @14,1                                               1309
         ST    @14,Y                                               1309
@DL01309 DS    0H                                                  1310
*              LISTCCHR(Y) = LISTCCHR(Y) &&                        1310
*                            LISTCCHR(Y);                  /*@G51DGGB*/
         LR    @08,@14                                             1310
         MH    @08,@CH00079                                        1310
         L     @06,LISTPTR                                         1310
         ALR   @06,@08                                             1310
         BCTR  @06,0                                               1310
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1310
*            END;                                          /*@G51DGGB*/
         AL    @14,@CF00055                                        1311
         ST    @14,Y                                               1311
         C     @14,@CF00293                                        1311
         BNH   @DL01309                                            1311
*            LISTPTR = FRAMLOCM(CCHINDX); /*ADDRESS OF MCH LISTLOC */
         L     @14,CCHINDX                                         1312
         MH    @14,@CH00227                                        1312
         L     @08,FRAMEPTR(,R2)                                   1312
         AL    @08,@CF01620                                        1312
         L     @14,FRAMLOCM-20(@14,@08)                            1312
         ST    @14,LISTPTR                                         1312
*            DO Y = 1 BY 1 TO LISTMAX;   /* ZERO MCH LISTLOC TABLE  */
         LA    @14,1                                               1313
         ST    @14,Y                                               1313
@DL01313 DS    0H                                                  1314
*            LISTCCHR(Y) = LISTCCHR(Y) &&                          1314
*                          LISTCCHR(Y);                    /*@G51DGGB*/
         LR    @08,@14                                             1314
         MH    @08,@CH00079                                        1314
         L     @06,LISTPTR                                         1314
         ALR   @06,@08                                             1314
         BCTR  @06,0                                               1314
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1314
*            END;                                          /*@G51DGGB*/
         AL    @14,@CF00055                                        1315
         ST    @14,Y                                               1315
         C     @14,@CF00293                                        1315
         BNH   @DL01313                                            1315
*            LISTNUM = ZERO;                               /*@G51DGGB*/
         L     @14,LISTPTR                                         1316
         SLR   @08,@08                                             1316
         ST    @08,LISTNUM(,@14)                                   1316
*          END;                                            /*@G51DGGB*/
*        ELSE /*UNSUCCESSFUL GETMAIN                         @G51DGGB*/
*          DO;                                             /*@G51DGGB*/
         B     @RC01293                                            1318
@RF01293 DS    0H                                                  1319
*            MSGNO = ZZ;     /*SET THE MESSAGE TYPE          @G51DGGB*/
         MVC   MSGNO(4),@CF00034                                   1319
*            CALL ERRMSG;    /*FIND THE MESSAGE AND PRINT IT @G51DGGB*/
         BAL   @14,ERRMSG                                          1320
*            ERROR = TWELVE;   /*STOP THIS HERE              @G51DGGB*/
         MVC   ERROR(4),@CF00032                                   1321
*          END;                                            /*@G51DGGB*/
*      END;                                                /*@G51DGGB*/
@RC01293 DS    0H                                                  1324
*    IF ERROR = ZERO THEN /*IF GETMAIN WAS SUCCESSFUL OR NO GETMAIN*/
@RF01286 L     @14,ERROR                                           1324
         LTR   @14,@14                                             1324
         BNZ   @RF01324                                            1324
*      LISTPTR = FRAMLOCM(CCHINDX);/*ESTABLISH LISTLOC ADDRESS   */
         L     @14,CCHINDX                                         1325
         MH    @14,@CH00227                                        1325
         L     @08,FRAMEPTR(,R2)                                   1325
         AL    @08,@CF01620                                        1325
         L     @14,FRAMLOCM-20(@14,@08)                            1325
         ST    @14,LISTPTR                                         1325
*  END;                                                    /*@G51DGGB*/
*ELSE /* IS A CCH FRAME                                      @G51DGGB*/
*  IF ERROR = ZERO THEN                                            1327
         B     @RC01284                                            1327
@RF01284 L     @14,ERROR                                           1327
         LTR   @14,@14                                             1327
         BNZ   @RF01327                                            1327
*    LISTPTR = FRAMLOCC(CCHINDX);  /*ESTABLISH CCH LISTLOC ADDRESS*/
         L     @14,CCHINDX                                         1328
         MH    @14,@CH00227                                        1328
         L     @08,FRAMEPTR(,R2)                                   1328
         L     @14,FRAMLOCC-24(@14,@08)                            1328
         ST    @14,LISTPTR                                         1328
*IF ERROR = ZERO THEN   /*KEEP OUT IF ANY ERRORS             @G51DGGB*/
@RF01327 DS    0H                                                  1329
@RC01284 L     @14,ERROR                                           1329
         LTR   @14,@14                                             1329
         BNZ   @RF01329                                            1329
*  DO;                                                     /*@G51DGGB*/
*    IF LISTNUM + 1 <= LISTMAX THEN /*IF ROOM IN LISTLOC     @G51DGGB*/
         LA    @14,1                                               1331
         L     @08,LISTPTR                                         1331
         AL    @14,LISTNUM(,@08)                                   1331
         C     @14,@CF00293                                        1331
         BH    @RF01331                                            1331
*      DO;                                                 /*@G51DGGB*/
*        IF PHIST = ON THEN        /*IF HISTORY INPUT        @G51DGGB*/
         TM    PHIST(R2),B'00100000'                               1333
         BNO   @RF01333                                            1333
*          CALL IOHND(RITESCRT);   /*WRITE TO SCRATCH DATA SET*/   1334
         L     @15,ADIOHND(,R2)                                    1334
         LA    @01,@AL01334                                        1334
         BALR  @14,@15                                             1334
*        IF R15 = SUCCESS THEN     /*IF SUCCESSFULL WRITE    @G51DGGB*/
@RF01333 LTR   R15,R15                                             1335
         BNZ   @RF01335                                            1335
*          DO;                                             /*@G51DGGB*/
*            LISTCCHR(LISTNUM+1) = RECCCHHR;/*SAVE FRAME EXTERNAL LOC*/
         L     @14,LISTPTR                                         1337
         L     @08,LISTNUM(,@14)                                   1337
         LR    @06,@08                                             1337
         MH    @06,@CH00079                                        1337
         ALR   @06,@14                                             1337
         MVC   LISTCCHR(5,@06),RECCCHHR(R2)                        1337
*            LISTNUM = LISTNUM + 1; /*INCREMENT NO OF BUILT ENTRIES*/
         LA    @06,1                                               1338
         ALR   @08,@06                                             1338
         ST    @08,LISTNUM(,@14)                                   1338
*            KEPT(FRINDEX) = KEPT(FRINDEX) + 1;            /*@G51DGGB*/
         L     @14,FRINDEX                                         1339
         ALR   @14,@14                                             1339
         AH    @06,KEPT-2(@14)                                     1339
         STH   @06,KEPT-2(@14)                                     1339
*          END;                                            /*@G51DGGB*/
*        ELSE  /*UNSUCCESSFUL WRITE TO SCRATCH D.S.          @G51DGGB*/
*         ERROR= TWELVE; /*TERMINATE FURTHER PROCESSING      @G51DGGB*/
         B     @RC01335                                            1341
@RF01335 MVC   ERROR(4),@CF00032                                   1341
*      END;                                                /*@G51DGGB*/
*    ELSE     /*NO ROOM IN LISTLOC                           @G51DGGB*/
*      DO;                                                 /*@G51DGGB*/
         B     @RC01331                                            1343
@RF01331 DS    0H                                                  1344
*        MSGNO = PP;  /*MORE THAN 35 FRAMES                  @G51DGGB*/
         MVC   MSGNO(4),@CF00035                                   1344
*        CALL ERRMSG; /*TELL THE WORLD THAT THERE ARE TOO MANY*/   1345
         BAL   @14,ERRMSG                                          1345
*        ERROR = TWELVE;/*SET THE RETURN CODE TO AN ERROR CONDITION*/
         MVC   ERROR(4),@CF00032                                   1346
*      END;                                                /*@G51DGGB*/
*  END;                                                    /*@G51DGGB*/
*END; /*END OF BUILDTTR PROC                                 @G51DGGB*/
@EL00035 DS    0H                                                  1349
@EF00035 DS    0H                                                  1349
@ER00035 LM    @14,@12,@SA00035                                    1349
         BR    @14                                                 1349
*FIXENTRY: PROC;  /*RESET LISTLOC TABLE TO ZERO BUT DONT FREE CORE*/
FIXENTRY STM   @14,@12,12(@13)                                     1350
*                 /*RESET DATE,TYPE TO ZERO                  @G51DGGB*/
*FRAMEDT(CCHINDX) = '0000000000000000'X; /*ZERO DATE,TIME    @G51DGGB*/
         L     @14,CCHINDX                                         1351
         MH    @14,@CH00227                                        1351
         L     @08,FRAMEPTR(,R2)                                   1351
         ST    @14,@TF00001                                        1351
         ALR   @14,@08                                             1351
         AL    @14,@CF01632                                        1351
         MVC   FRAMEDT-9(8,@14),@CB01577                           1351
*FRAMETYP(CCHINDX) = '00'X; /*RESET TO NO TYPES OF FRAMES STORED*/ 1352
         LR    @14,@08                                             1352
         AL    @14,@TF00001                                        1352
         AL    @14,@CF01624                                        1352
         MVI   FRAMETYP-17(@14),X'00'                              1352
*IF FRAMLOCM(CCHINDX) > ZERO THEN /*IF MCH FRAME LOC. TAB. ALLOCATED*/
         L     @14,@TF00001                                        1353
         AL    @08,@CF01620                                        1353
         L     @14,FRAMLOCM-20(@14,@08)                            1353
         LTR   @14,@14                                             1353
         BNP   @RF01353                                            1353
*  DO;                                                     /*@G51DGGB*/
*    LISTPTR = FRAMLOCM(CCHINDX); /*SET TABLE BASE ADDRESS   @G51DGGB*/
         ST    @14,LISTPTR                                         1355
*    DO Y = 1 BY 1 TO LISTNUM; /*CLEAR ALL STORED CCHHRS TO ZERO*/ 1356
         LA    @14,1                                               1356
         ST    @14,Y                                               1356
         B     @DE01356                                            1356
@DL01356 DS    0H                                                  1357
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGGB*/
         LR    @08,@14                                             1357
         MH    @08,@CH00079                                        1357
         L     @06,LISTPTR                                         1357
         ALR   @06,@08                                             1357
         BCTR  @06,0                                               1357
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1357
*      SETREJCT(1) = SETREJCT(1) + 1; /*ADD TO COUNT OF REJECTED FRMS*/
         LA    @08,1                                               1358
         AH    @08,SETREJCT                                        1358
         STH   @08,SETREJCT                                        1358
*      KEPT(1) = KEPT(1) - 1; /*CHANGE THE COUNT OF KEPT FRAMES*/  1359
         LH    @08,KEPT                                            1359
         BCTR  @08,0                                               1359
         STH   @08,KEPT                                            1359
*    END;                                                  /*@G51DGGB*/
         AL    @14,@CF00055                                        1360
         ST    @14,Y                                               1360
@DE01356 L     @08,LISTPTR                                         1360
         C     @14,LISTNUM(,@08)                                   1360
         BNH   @DL01356                                            1360
*    LISTNUM = ZERO; /*SET NUMBER OF STORED CCHHRS TO ZERO   @G51DGGB*/
         L     @14,LISTPTR                                         1361
         SLR   @08,@08                                             1361
         ST    @08,LISTNUM(,@14)                                   1361
*  END;                                                    /*@G51DGGB*/
*IF FRAMLOCC(CCHINDX) > ZERO THEN /*IF CCH FRAM LOC TABLE ALLOCATED*/
@RF01353 L     @14,CCHINDX                                         1363
         MH    @14,@CH00227                                        1363
         L     @08,FRAMEPTR(,R2)                                   1363
         L     @14,FRAMLOCC-24(@14,@08)                            1363
         LTR   @14,@14                                             1363
         BNP   @RF01363                                            1363
*  DO;                                                     /*@G51DGGB*/
*    LISTPTR = FRAMLOCC(CCHINDX); /*SET BASE ADDRESS OF LISTLOC*/  1365
         ST    @14,LISTPTR                                         1365
*    DO Y = 1 BY 1 TO LISTNUM; /*ZERO ALL SAVED CCHHRS       @G51DGGB*/
         LA    @14,1                                               1366
         ST    @14,Y                                               1366
         B     @DE01366                                            1366
@DL01366 DS    0H                                                  1367
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGGB*/
         LR    @08,@14                                             1367
         MH    @08,@CH00079                                        1367
         L     @06,LISTPTR                                         1367
         ALR   @06,@08                                             1367
         BCTR  @06,0                                               1367
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1367
*      SETREJCT(2) = SETREJCT(2) + 1; /*ADD TO COUNT OF REJECTED FRMS*/
         LA    @08,1                                               1368
         AH    @08,SETREJCT+2                                      1368
         STH   @08,SETREJCT+2                                      1368
*      KEPT(2) = KEPT(2) - 1; /*CHANGE THE COUNT OF KEPT FRAMES*/  1369
         LH    @08,KEPT+2                                          1369
         BCTR  @08,0                                               1369
         STH   @08,KEPT+2                                          1369
*    END;                                                  /*@G51DGGB*/
         AL    @14,@CF00055                                        1370
         ST    @14,Y                                               1370
@DE01366 L     @08,LISTPTR                                         1370
         C     @14,LISTNUM(,@08)                                   1370
         BNH   @DL01366                                            1370
*    LISTNUM = ZERO; /*SET NUMBER OF  CCHHRS SAVED TO ZERO   @G51DGGB*/
         L     @14,LISTPTR                                         1371
         SLR   @08,@08                                             1371
         ST    @08,LISTNUM(,@14)                                   1371
*  END;                                                    /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00036 DS    0H                                                  1373
@EF00036 DS    0H                                                  1373
@ER00036 LM    @14,@12,12(@13)                                     1373
         BR    @14                                                 1373
*/********************************************************************/
*/*    THIS PROC WILL CONVERT THE RECORD DATE & TIME INTO HUNDREDS   */
*/*     AND APPEND THIS TO THE YEAR IN THE CURRENT SORT TABLE ENTRY  */
*ADDTABLE: PROC;                                           /*@G51DGGB*/
ADDTABLE STM   @14,@12,12(@13)                                     1374
*RESPECIFY (R0,R1) RESTRICTED;                             /*@G51DGGB*/
*SORTYEAR(I) = LRTYEAR;   /*SET THE YEAR INTO THE SORT TABLE @G51DGGB*/
         L     @14,I                                               1376
         LA    @08,10                                              1376
         LR    @05,@14                                             1376
         MR    @04,@08                                             1376
         L     @06,SORTADR(,R2)                                    1376
         ST    @05,@TF00001                                        1376
         ALR   @05,@06                                             1376
         AL    @05,@CF01633                                        1376
         MVC   SORTYEAR(1,@05),LRTYEAR(R7)                         1376
*CVB(R1,LRTDAY);          /*CONVERT THE DATE FROM HEX REP TO BINARY*/
         XC    @TS00001(8),@TS00001                                1377
         MVC   @TS00001+6(2),LRTDAY(R7)                            1377
         CVB   R1,@TS00001                                         1377
*TEMPSAVE = R1 * N8MIL64H;/*8640000 HUNDREDTS IN ONE DAY     @G51DGGB*/
         LR    @05,R1                                              1378
         M     @04,@CF00864                                        1378
         ST    @05,TEMPSAVE                                        1378
*R0 = LRTHOUR;            /*LOAD THE RECORD S HOUR           @G51DGGB*/
         SLR   R0,R0                                               1379
         IC    R0,LRTHOUR(,R7)                                     1379
*SRDL(R0,FOUR);           /*SPLIT THE BYTE IN HALF           @G51DGGB*/
         SRDL  R0,4                                                1380
*SRL(R1,28);              /*RIGHT JUSTIFY THE VALUE          @G51DGGB*/
         SRL   R1,28                                               1381
*TEMPSAVE = (R0 * TEN + R1) * N36000 + TEMPSAVE;           /*@G51DGGB*/
         ST    @05,@TF00002                                        1382
         LR    @05,R0                                              1382
         MR    @04,@08                                             1382
         ALR   @05,R1                                              1382
         M     @04,@CF00866                                        1382
         AL    @05,@TF00002                                        1382
         ST    @05,TEMPSAVE                                        1382
*R0 = LRTMIN;             /*LOAD THE MIN VALUE INTO THE REG  @G51DGGB*/
         SLR   R0,R0                                               1383
         IC    R0,LRTMIN(,R7)                                      1383
*SRDL(R0,FOUR);           /*SPLIT THE BYTE IN HALF           @G51DGGB*/
         SRDL  R0,4                                                1384
*SRL(R1,28);              /*RIGHT JUSTIFY THE VALUE          @G51DGGB*/
         SRL   R1,28                                               1385
*TEMPSAVE = (R0*10 + R1) * N6000 + TEMPSAVE; /*CONVERT TO USEABLE */
         ST    @05,@TF00002                                        1386
         LR    @05,R0                                              1386
         MR    @04,@08                                             1386
         ALR   @05,R1                                              1386
         MH    @05,@CH00868                                        1386
         AL    @05,@TF00002                                        1386
         ST    @05,TEMPSAVE                                        1386
*R0 = LRTSEC;             /*LOAD THE SEC VALUE INTO THE REG  @XA22531*/
         SLR   R0,R0                                               1387
         IC    R0,LRTSEC(,R7)                                      1387
*SRDL(R0,FOUR);           /*SPLIT THE BYTE IN HALF           @XA22531*/
         SRDL  R0,4                                                1388
*SRL(R1,28);              /*RIGHT JUSTIFY THE VALUE          @XA22531*/
         SRL   R1,28                                               1389
*TEMPSAVE = (R0*10 + R1) *   100 + TEMPSAVE; /*CONVERT TO USEABLE */
         ST    @05,@TF00002                                        1390
         LR    @05,R0                                              1390
         MR    @04,@08                                             1390
         ALR   @05,R1                                              1390
         MH    @05,@CH00392                                        1390
         AL    @05,@TF00002                                        1390
         ST    @05,TEMPSAVE                                        1390
*R0 = LRTHSECS;           /*PICK UP THE HUNSECS VALUE        @XA22531*/
         SLR   R0,R0                                               1391
         IC    R0,LRTHSECS(,R7)                                    1391
*SRDL(R0,FOUR);           /*SPLIT THE BYTE IN HALF           @G51DGGB*/
         SRDL  R0,4                                                1392
*SRL(R1,28);              /*RIGHT JUSTIFY                    @G51DGGB*/
         SRL   R1,28                                               1393
*SORTTIME(I) = TEMPSAVE + R0*10 +  R1; /*MOVE TOTAL VALUE TO SORT TAB*/
         ST    @05,@TF00002                                        1394
         LR    @05,@08                                             1394
         MR    @04,R0                                              1394
         AL    @05,@TF00002                                        1394
         ALR   @05,R1                                              1394
         LR    @08,@06                                             1394
         AL    @08,@TF00001                                        1394
         AL    @08,@CF01634                                        1394
         STCM  @05,15,SORTTIME-1(@08)                              1394
*SORTCCHR(I) = RECCCHHR;  /*MOVE IN THE LOCATION OF THE RECORD*/   1395
         AL    @06,@TF00001                                        1395
         AL    @06,@CF01635                                        1395
         MVC   SORTCCHR-5(5,@06),RECCCHHR(R2)                      1395
*I = I + 1;               /*BUMP THE INDEX FOR THE RECORD THAT PASSES*/
         LA    @08,1                                               1396
         ALR   @14,@08                                             1396
         ST    @14,I                                               1396
* PASSNUM = PASSNUM + ONE;/*ADD 1 TO THE NUMBER OF RECORDS KEPT*/  1397
         AL    @08,PASSNUM                                         1397
         ST    @08,PASSNUM                                         1397
*RESPECIFY (R0,R1) UNRESTRICTED;                           /*@G51DGGB*/
*END;                                                      /*@G51DGGB*/
@EL00037 DS    0H                                                  1399
@EF00037 DS    0H                                                  1399
@ER00037 LM    @14,@12,12(@13)                                     1399
         BR    @14                                                 1399
*ERRMSG: PROC;                                             /*@Z427VLS*/
ERRMSG   STM   @14,@12,@SA00038                                    1400
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        1401
         ST    @14,PRINTADR(,R2)                                   1401
*IF MSGNO = 2 THEN                                                 1402
         CLC   MSGNO(4),@CF00074                                   1402
         BNE   @RF01402                                            1402
* CALL IFCMSG(55,ADDR(PRINTBDY));                          /*@Z427VLS*/
         LA    @14,PRINTBDY                                        1403
         ST    @14,@AFTEMPS+4                                      1403
         L     @15,ADIFCMSG(,R2)                                   1403
         LA    @01,@AL01403                                        1403
         BALR  @14,@15                                             1403
*IF MSGNO = 3 THEN                                                 1404
@RF01402 CLC   MSGNO(4),@CF00076                                   1404
         BNE   @RF01404                                            1404
* CALL IFCMSG(53,ADDR(PRINTBDY));                          /*@Z427VLS*/
         LA    @14,PRINTBDY                                        1405
         ST    @14,@AFTEMPS+4                                      1405
         L     @15,ADIFCMSG(,R2)                                   1405
         LA    @01,@AL01405                                        1405
         BALR  @14,@15                                             1405
*  IF MSGNO = 5                                                    1406
*   THEN                                                           1406
@RF01404 CLC   MSGNO(4),@CF00079                                   1406
         BNE   @RF01406                                            1406
*    PRINTBDY = EXCESCPU;                                  /*@Z427VLS*/
         MVI   PRINTBDY+16,C' '                                    1407
         MVC   PRINTBDY+17(115),PRINTBDY+16                        1407
         MVC   PRINTBDY(16),EXCESCPU                               1407
*NOMESAGE = OFF;                                           /*@G51DGGB*/
@RF01406 NI    NOMESAGE,B'01111111'                                1408
* IF MSGNO = YY THEN                                               1409
         CLC   MSGNO(4),@CF00066                                   1409
         BNE   @RF01409                                            1409
*  CALL IFCMSG(24,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @14,PRINTBDY                                        1410
         ST    @14,@AFTEMPS+4                                      1410
         L     @15,ADIFCMSG(,R2)                                   1410
         LA    @01,@AL01410                                        1410
         BALR  @14,@15                                             1410
* IF MSGNO = QQ THEN                                               1411
@RF01409 CLC   MSGNO(4),@CF00032                                   1411
         BNE   @RF01411                                            1411
*  DO;                                                     /*@G51DGGB*/
*  IF DEBUG16 = ON THEN                                            1413
         TM    DEBUG16(R2),B'10000000'                             1413
         BNO   @RF01413                                            1413
*   CALL FRAMDROP;                                         /*@G51DGGB*/
         BAL   @14,FRAMDROP                                        1414
*  ELSE                                                            1415
*  NOMESAGE = ON;                                          /*@G51DGGB*/
         B     @RC01413                                            1415
@RF01413 OI    NOMESAGE,B'10000000'                                1415
*  END;                                                    /*@G51DGGB*/
@RC01413 DS    0H                                                  1417
* IF MSGNO = QQ1 THEN                                              1417
@RF01411 CLC   MSGNO(4),@CF00083                                   1417
         BNE   @RF01417                                            1417
*  DO;                                                     /*@G51DGGB*/
*  CALL IFCMSG(78,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @14,PRINTBDY                                        1419
         ST    @14,@AFTEMPS+4                                      1419
         L     @15,ADIFCMSG(,R2)                                   1419
         LA    @01,@AL01419                                        1419
         BALR  @14,@15                                             1419
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1420
*   ADDNXT = ADDR(PFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1421
         LA    @14,PFRAMSER                                        1421
         ST    @14,ADDNXT                                          1421
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @14,CCHINDX                                         1422
         MH    @14,@CH00227                                        1422
         L     @08,FRAMEPTR(,R2)                                   1422
         AL    @08,@CF01618                                        1422
         LA    @14,FRAMESER-4(@14,@08)                             1422
         ST    @14,NEXTBY                                          1422
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1423
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1424
*   ADDNXT = ADDR(PFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @14,PFRAMMOD                                        1425
         ST    @14,ADDNXT                                          1425
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @14,CCHINDX                                         1426
         MH    @14,@CH00227                                        1426
         L     @08,FRAMEPTR(,R2)                                   1426
         AL    @08,@CF01636                                        1426
         LA    @14,FRAMEMOD-7(@14,@08)                             1426
         ST    @14,NEXTBY                                          1426
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1427
*  END;                                                    /*@G51DGGB*/
* IF MSGNO = ZZ THEN                                               1429
@RF01417 CLC   MSGNO(4),@CF00034                                   1429
         BNE   @RF01429                                            1429
*  CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @14,PRINTBDY                                        1430
         ST    @14,@AFTEMPS+4                                      1430
         L     @15,ADIFCMSG(,R2)                                   1430
         LA    @01,@AL01430                                        1430
         BALR  @14,@15                                             1430
* IF MSGNO = PP THEN                                               1431
@RF01429 CLC   MSGNO(4),@CF00035                                   1431
         BNE   @RF01431                                            1431
*  CALL IFCMSG(5,ADDR(PRINTBDY));                          /*@G51DGGB*/
         LA    @14,PRINTBDY                                        1432
         ST    @14,@AFTEMPS+4                                      1432
         L     @15,ADIFCMSG(,R2)                                   1432
         LA    @01,@AL01432                                        1432
         BALR  @14,@15                                             1432
* IF MSGNO = XX THEN                                               1433
@RF01431 CLC   MSGNO(4),@CF00081                                   1433
         BNE   @RF01433                                            1433
*  CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*/
         LA    @14,PRINTBDY                                        1434
         ST    @14,@AFTEMPS+4                                      1434
         L     @15,ADIFCMSG(,R2)                                   1434
         LA    @01,@AL01434                                        1434
         BALR  @14,@15                                             1434
* IF NOMESAGE = OFF THEN                                           1435
@RF01433 TM    NOMESAGE,B'10000000'                                1435
         BNZ   @RF01435                                            1435
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1436
         LA    @01,@AL01436                                        1436
         BALR  @14,@15                                             1436
*END;                                                      /*@Z427VLS*/
@EL00038 DS    0H                                                  1437
@EF00038 DS    0H                                                  1437
@ER00038 LM    @14,@12,@SA00038                                    1437
         BR    @14                                                 1437
*FRAMDROP: PROC;                                           /*@G51DGGB*/
FRAMDROP STM   @14,@12,@SA00039                                    1438
*  PRINTBDY = ERR7816;                                     /*@G51DGGB*/
         MVI   PRINTBDY+18,C' '                                    1439
         MVC   PRINTBDY+19(113),PRINTBDY+18                        1439
         MVC   PRINTBDY(18),ERR7816                                1439
*  TYPERROR= INCOMP;                                       /*@G51DGGB*/
         MVC   TYPERROR(10),INCOMP                                 1440
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1441
*   ADDNXT = ADDR(ZFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1442
         LA    @14,ZFRAMSER                                        1442
         ST    @14,ADDNXT                                          1442
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @14,CCHINDX                                         1443
         MH    @14,@CH00227                                        1443
         L     @08,FRAMEPTR(,R2)                                   1443
         AL    @08,@CF01618                                        1443
         LA    @14,FRAMESER-4(@14,@08)                             1443
         ST    @14,NEXTBY                                          1443
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1444
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1445
*   ADDNXT = ADDR(ZFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @14,ZFRAMMOD                                        1446
         ST    @14,ADDNXT                                          1446
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @14,CCHINDX                                         1447
         MH    @14,@CH00227                                        1447
         L     @08,FRAMEPTR(,R2)                                   1447
         AL    @08,@CF01636                                        1447
         LA    @14,FRAMEMOD-7(@14,@08)                             1447
         ST    @14,NEXTBY                                          1447
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1448
*   NUMBER = 14;                                           /*@G51DGGB*/
         MVC   NUMBER(4),@CF01286                                  1449
*   NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*/
         L     @14,CCHINDX                                         1450
         MH    @14,@CH00227                                        1450
         L     @08,FRAMEPTR(,R2)                                   1450
         AL    @08,@CF01618                                        1450
         LA    @14,FRAMEKEY-4(@14,@08)                             1450
         ST    @14,NEXTBY                                          1450
*   ADDNXT = ADDR(ZFRAMKEY);                               /*@G51DGGB*/
         LA    @14,ZFRAMKEY                                        1451
         ST    @14,ADDNXT                                          1451
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1452
*END;                                                      /*@G51DGGB*/
@EL00039 DS    0H                                                  1453
@EF00039 DS    0H                                                  1453
@ER00039 LM    @14,@12,@SA00039                                    1453
         BR    @14                                                 1453
*FRAMMORE: PROC;                                           /*@G51DGGB*/
FRAMMORE STM   @14,@12,@SA00040                                    1454
*  CALL FRAMDROP;                                          /*@G51DGGB*/
         BAL   @14,FRAMDROP                                        1455
*  CALL FIXENTRY;                                          /*@G51DGGB*/
         BAL   @14,FIXENTRY                                        1456
*  FRAMEDT(CCHINDX) = LRTDT;           /*SAVE HIGH DATE      @G51DGGB*/
         L     @14,CCHINDX                                         1457
         MH    @14,@CH00227                                        1457
         L     @08,FRAMEPTR(,R2)                                   1457
         ST    @14,@TF00001                                        1457
         ALR   @14,@08                                             1457
         AL    @14,@CF01632                                        1457
         MVC   FRAMEDT-9(8,@14),LRTDT(R7)                          1457
*  TYPERROR= REPLACED;                                     /*@G51DGGB*/
         MVI   TYPERROR+8,C' '                                     1458
         MVI   TYPERROR+9,C' '                                     1458
         MVC   TYPERROR(8),REPLACED                                1458
*   NUMBER = 3;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00076                                  1459
*   ADDNXT = ADDR(YFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/ 1460
         LA    @14,YFRAMSER                                        1460
         ST    @14,ADDNXT                                          1460
*   NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @14,@TF00001                                        1461
         AL    @08,@CF01618                                        1461
         LA    @14,FRAMESER-4(@14,@08)                             1461
         ST    @14,NEXTBY                                          1461
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1462
*   NUMBER = 2;                                            /*@G51DGGB*/
         MVC   NUMBER(4),@CF00074                                  1463
*   ADDNXT = ADDR(YFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*/
         LA    @14,YFRAMMOD                                        1464
         ST    @14,ADDNXT                                          1464
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*/
         L     @14,CCHINDX                                         1465
         MH    @14,@CH00227                                        1465
         L     @08,FRAMEPTR(,R2)                                   1465
         AL    @08,@CF01636                                        1465
         LA    @14,FRAMEMOD-7(@14,@08)                             1465
         ST    @14,NEXTBY                                          1465
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1466
*   NUMBER = 14;                                           /*@G51DGGB*/
         MVC   NUMBER(4),@CF01286                                  1467
*   NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*/
         L     @14,CCHINDX                                         1468
         MH    @14,@CH00227                                        1468
         L     @08,FRAMEPTR(,R2)                                   1468
         AL    @08,@CF01618                                        1468
         LA    @14,FRAMEKEY-4(@14,@08)                             1468
         ST    @14,NEXTBY                                          1468
*   ADDNXT = ADDR(YFRAMKEY);                               /*@G51DGGB*/
         LA    @14,YFRAMKEY                                        1469
         ST    @14,ADDNXT                                          1469
*   CALL CONVERT;                                          /*@G51DGGB*/
         BAL   @14,CONVERT                                         1470
*   CALL PRINTIT;                                          /*@G51DGGB*/
         BAL   @14,PRINTIT                                         1471
*END;                                                      /*@G51DGGB*/
@EL00040 DS    0H                                                  1472
@EF00040 DS    0H                                                  1472
@ER00040 LM    @14,@12,@SA00040                                    1472
         BR    @14                                                 1472
*EVSET: PROC; /*SAVE UNIQUE CPUS AND END DATE IN EVTABLE     @Z427VLS*/
EVSET    STM   @14,@12,12(@13)                                     1473
*EVFLAG = NO;                                              /*@Z427VLS*/
         NI    EVFLAG,B'11101111'                                  1474
*DO J = 1 BY 1 TO EVMAXENT WHILE EVFLAG = NO;              /*@Z427VLS*/
         LA    @14,1                                               1475
         ST    @14,J                                               1475
@DL01475 TM    EVFLAG,B'00010000'                                  1475
         BNZ   @DC01475                                            1475
*  IF J > EVNUM THEN                                               1476
         L     @08,EVPTR(,R2)                                      1476
         LH    @06,EVNUM(,@08)                                     1476
         CR    @14,@06                                             1476
         BNH   @RF01476                                            1476
*   DO;                                                    /*@Z427VLS*/
*     EVMODEL(J) = LRTMODEL;                               /*@Z427VLS*/
         MH    @14,@CH00081                                        1478
         ST    @14,@TF00001                                        1478
         ALR   @14,@08                                             1478
         MVC   EVMODEL-6(2,@14),LRTMODEL(R7)                       1478
*     EVSERIAL(J) = LRTCPUS;                               /*@Z427VLS*/
         LR    @14,@08                                             1479
         AL    @14,@TF00001                                        1479
         MVC   EVSERIAL-6(3,@14),LRTCPUS(R7)                       1479
*     EVNUM = EVNUM + 1;                                   /*@Z427VLS*/
         AL    @06,@CF00055                                        1480
         STH   @06,EVNUM(,@08)                                     1480
*     EVFLAG = ON;                                         /*@Z427VLS*/
         OI    EVFLAG,B'00010000'                                  1481
*   END;                                                   /*@Z427VLS*/
*   ELSE                                                           1483
*  IF LRTMODEL = EVMODEL(J) & LRTCPUS = EVSERIAL(J) THEN           1483
         B     @RC01476                                            1483
@RF01476 L     @14,J                                               1483
         MH    @14,@CH00081                                        1483
         L     @08,EVPTR(,R2)                                      1483
         ST    @14,@TF00001                                        1483
         ALR   @14,@08                                             1483
         CLC   LRTMODEL(2,R7),EVMODEL-6(@14)                       1483
         BNE   @RF01483                                            1483
         AL    @08,@TF00001                                        1483
         CLC   LRTCPUS(3,R7),EVSERIAL-6(@08)                       1483
         BNE   @RF01483                                            1483
*    EVFLAG = ON;                                          /*@Z427VLS*/
         OI    EVFLAG,B'00010000'                                  1484
*END;                                                      /*@Z427VLS*/
@RF01483 DS    0H                                                  1485
@RC01476 LA    @14,1                                               1485
         AL    @14,J                                               1485
         ST    @14,J                                               1485
         C     @14,@CF00088                                        1485
         BNH   @DL01475                                            1485
@DC01475 DS    0H                                                  1486
*  IF EVFLAG = NO THEN            /*ONLY HAPPEN IF TOO MANY CPUS */
         TM    EVFLAG,B'00010000'                                  1486
         BNZ   @RF01486                                            1486
*   DO;                                                    /*@0001VLS*/
*    EXCESS = EXCESS + ONE;       /*KEEP TRACK OF # RECORDS DROPPED*/
         LA    @14,1                                               1488
         L     @08,EXCESS                                          1488
         ALR   @08,@14                                             1488
         ST    @08,EXCESS                                          1488
*    PASSFLAG = NO;               /*TELL PRIME ROUTINE TO CHUCK    */
         NI    PASSFLAG(R2),B'11111110'                            1489
*    EXCPUCT(RTYP1) = EXCPUCT(RTYP1) + ONE;  /*ADD TO THE COUNT OF  */
         L     @08,RTYP1                                           1490
         SLA   @08,2                                               1490
         AL    @14,EXCPUCT-4(@08)                                  1490
         ST    @14,EXCPUCT-4(@08)                                  1490
*       /*EXCESSS CPU REC TYPE DROPPED                       @0099VLS*/
*   END;                                                   /*@0001VLS*/
*   ELSE                                                           1492
*   DO;                                                    /*@0001VLS*/
         B     @RC01486                                            1492
@RF01486 DS    0H                                                  1493
*IF LRTYRDAY > EVSTOP THEN            /*FIND THE LAST DATE ON DATA */
         L     @14,EVPTR(,R2)                                      1493
         CLC   LRTYRDAY(3,R7),EVSTOP(@14)                          1493
         BNH   @RF01493                                            1493
*  EVSTOP = LRTYRDAY;                                      /*@Z427VLS*/
         MVC   EVSTOP(3,@14),LRTYRDAY(R7)                          1494
*IF LRTYRDAY < STRTDATE THEN          /*IS THIS EARLY START DATE  */
@RF01493 CLC   LRTYRDAY(3,R7),STRTDATE(R2)                         1495
         BNL   @RF01495                                            1495
*  STRTDATE = LRTYRDAY;                /*SET TO NEW EARLY DATE     */
         MVC   STRTDATE(3,R2),LRTYRDAY(R7)                         1496
*   END;                                                   /*@0001VLS*/
*END;                                                      /*@Z427VLS*/
@EL00041 DS    0H                                                  1498
@EF00041 DS    0H                                                  1498
@ER00041 LM    @14,@12,12(@13)                                     1498
         BR    @14                                                 1498
*END   /*CLOSING END FOR IFCFILT4 EXTERNAL PROC              @Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 1499
@DATA    DS    0H
@CH00392 DC    H'100'
@CH01468 DC    H'384'
@CH00868 DC    H'6000'
         DS    0F
@AL00266 DC    A(@CF00076+2)           LIST WITH   1 ARGUMENT(S)
@AL00297 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00329 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01334 DC    A(@CF00079+2)           LIST WITH   1 ARGUMENT(S)
@AL00324 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01057 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01074 DC    A(@CF00064+2)           LIST WITH   1 ARGUMENT(S)
@AL00520 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00525 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00550 DC    A(@CF00083+2)           LIST WITH   1 ARGUMENT(S)
@AL00533 DC    A(@CF01464)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00541 DC    A(@CF00643)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00553 DC    A(@CF01466)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00561 DC    A(@CF01467)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00582 DC    A(@CF01469)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00721 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01436 DC    A(@CF00074+2)           LIST WITH   1 ARGUMENT(S)
@AL01052 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01069 DC    A(@CF00081+2)           LIST WITH   1 ARGUMENT(S)
@AL01403 DC    A(@CF01594)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01405 DC    A(@CF01595)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01410 DC    A(@CF00227)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01419 DC    A(@CF01597)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01430 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL01434 DC    A(@CF01598)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01432 DC    A(@CF00079)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
         DS    0F
@SA00001 DS    18F
@SA00032 DS    15F
@SA00002 DS    15F
@SA00031 DS    15F
@SA00016 DS    15F
@SA00008 DS    15F
@SA00038 DS    15F
@SA00003 DS    15F
@SA00012 DS    15F
@SA00004 DS    15F
@SA00029 DS    15F
@SA00011 DS    15F
@SA00017 DS    15F
@SA00009 DS    15F
@SA00010 DS    15F
@SA00014 DS    15F
@SA00018 DS    15F
@SA00019 DS    15F
@SA00025 DS    15F
@SA00022 DS    15F
@SA00020 DS    15F
@SA00021 DS    15F
@SA00028 DS    15F
@SA00033 DS    15F
@SA00034 DS    15F
@SA00035 DS    15F
@SA00040 DS    15F
@SA00039 DS    15F
@TF00001 DS    F
@TF00002 DS    F
@AFTEMPS DS    2F
         DS    0F
@CF00055 DC    F'1'
@CH00055 EQU   @CF00055+2
@CF00074 DC    F'2'
@CH00074 EQU   @CF00074+2
@CF00076 DC    F'3'
@CH00076 EQU   @CF00076+2
@CF00064 DC    F'4'
@CH00064 EQU   @CF00064+2
@CF00079 DC    F'5'
@CH00079 EQU   @CF00079+2
@CF00081 DC    F'6'
@CH00081 EQU   @CF00081+2
@CF00083 DC    F'7'
@CH00083 EQU   @CF00083+2
@CF00066 DC    F'8'
@CF00035 DC    F'9'
@CF00034 DC    F'10'
@CH00034 EQU   @CF00034+2
@CF00033 DC    F'11'
@CF00032 DC    F'12'
@CF01286 DC    F'14'
@CF00088 DC    F'16'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF01331 DC    F'27'
@CF01470 DC    F'38'
@CF01598 DC    F'40'
@CF00293 DC    F'50'
@CF01595 DC    F'53'
@CF00643 DC    F'54'
@CF01594 DC    F'55'
@CF01466 DC    F'56'
@CF01467 DC    F'57'
@CF01439 DC    F'66'
@CF01469 DC    F'73'
@CF01597 DC    F'78'
@CF01464 DC    F'83'
@CF01610 DC    F'254'
@CF00866 DC    F'360000'
@CF00864 DC    F'8640000'
@CF01618 DC    F'-20'
@CF01636 DC    F'-17'
@CF01632 DC    F'-15'
@CF01633 DC    F'-10'
@CF01634 DC    F'-9'
@CF01624 DC    F'-7'
@CF01625 DC    F'-6'
@CF01635 DC    F'-5'
@CF01620 DC    F'-4'
@CF01621 DC    F'-3'
         DS    0D
SPCCOUNT DC    F'0'
BYTECT   DC    F'0'
EXCESSCT DC    F'0'
BADTIME  DC    F'0'
TERMTRY  DC    F'5'
X        DC    F'0'
M        DC    F'0'
P        DC    F'0'
L        DC    F'0'
TEMPSAVE DC    A(0)
NUMBER   DC    F'0'
RTYP1    DC    F'0'
OUTTHIRD DC    F'0'
OUTTIME  DC    F'0'
OUTDATE  DC    F'0'
NUMBER1  DC    F'1'
TWOEIGHT DC    F'28'
NEXTBY   DC    F'0'
ADDNXT   DC    F'0'
BINWORD  DC    F'0'
BNDECNUM DC    F'6'
DECADDR  DC    F'0'
SRTCONT  DC    F'0'
FLIPFLOP DC    F'0'
TRUNCT   DC    F'0'
LISTPTR  DC    A(0)
Y        DC    A(0)
Z        DC    A(0)
CCHINDX  DC    A(0)
TEMP11   DC    F'0'
FRINDEX  DC    F'0'
BUILDCT  DC    F'0'
LASTCT   DC    F'0'
EVPTR1   DC    F'0'
A        DC    F'0'
YY1      DC    F'0'
Q        DC    F'0'
TEMP     DC    F'0'
VOLFLAG  DC    H'0'
OBRFLAG  DC    H'0'
VOLTRY   DC    H'13'
CPUTRY   DC    H'10'
SAVESEQ  DC    H'0'
         DS    0D
@TS00001 DS    CL8
@CC01004 DC    C'        '
@CB01577 DC    X'0000000000000000'
@CB01037 DC    X'000FF0'
@CB01043 DC    X'000FFF'
@CB00208 EQU   @CB01577
@CB01007 DC    X'2006'
@CB01009 DC    X'2007'
@CB01039 DC    X'0FF0'
@CB01041 DC    X'0FFF'
@CB01061 EQU   @CB01037
@CB01447 DC    X'0844'
@CB01448 DC    X'0843'
DROP     DC    CL16' RECORDS DROPPED'
BUGS16   DC    CL31'DEBUG16 - FILTERING INFORMATION'
NEWFILT  DC    CL132' '
         ORG   NEWFILT
CPUDATA  DS    CL41
         ORG   CPUDATA
CPUIN1   DS    CL6
@NM00084 DS    CL1
CPUR     DS    CL3
@NM00085 DS    CL1
@NM00086 DC    CL12' FAILED CPU '
CPUOUT1  DS    CL6
@NM00087 DC    CL12' PASSED,    '
         ORG   NEWFILT+41
VOLDATA  DS    CL49
         ORG   VOLDATA
VOLIN    DS    CL6
@NM00088 DC    CL17' VOLID FOUND FOR '
VOLTYPE  DS    CL8
@NM00089 DC    CL12' # SAVED IS '
VOLOUT   DS    CL6
         ORG   NEWFILT+90
TERMDATA DS    CL41
         ORG   TERMDATA
TERMIN   DS    CL6
@NM00090 DC    CL6' TYPE '
TERMTYP  DS    CL2
@NM00091 DC    CL16' TERMINAL FOUND '
TERMOUT  DS    CL6
@NM00092 DC    CL5' KEPT'
         ORG   NEWFILT+132
NOVOLOT  DC    CL32' '
         ORG   NOVOLOT
NUMNOVOL DS    CL6
@NM00093 DS    CL1
RHERE    DS    CL3
@NM00094 DC    CL22' DID NOT HAVE A VOLUME'
         ORG   NOVOLOT+32
RECINFO  DS    CL132
         ORG   RECINFO
RECNUM   DS    CL6
@NM00095 DC    CL1' '
RECTYP2  DS    CL3
@NM00096 DC    CL1' '
@NM00097 DC    CL16' RECORDS READ,  '
RECPASS  DS    CL6
@NM00098 DC    CL2'  '
@NM00099 DC    CL20'PASSED TIME FILTER, '
CUAPASS  DS    CL6
@NM00100 DC    CL2'  '
@NM00101 DC    CL20'FAILED CUA  FILTER, '
DEVPASS  DS    CL6
@NM00102 DC    CL2'  '
@NM00103 DC    CL21'FAILED DEV FILTERING '
TYPEFAIL DS    CL6
@NM00104 DC    CL2'  '
@NM00105 DC    CL12' FAILED TYPE'
         ORG   RECINFO+132
RECINFO1 DC    CL61' '
         ORG   RECINFO1
EXCPU    DS    CL6
@NM00106 DC    CL2'  '
@NM00107 DC    CL20'FAILED EXCESS CPUS, '
RECKEPT  DC    CL6' '
@NM00108 DC    CL2'  '
PTYP     DC    CL3'   '
@NM00109 DC    CL1' '
@NM00110 DC    CL21' PASSED ALL FILTERING'
         ORG   RECINFO1+61
         DS    CL2
FILT1ITM DS    CL68
         ORG   FILT1ITM
MAXENT   DC    F'0'
EXCESS   DC    F'0'
CORSIZE  DC    A(0)
ERROR    DC    F'0'
FREEADR  DC    A(0)
I        DC    A(1)
J        DC    A(0)
K        DC    A(0)
WHATYPE  DC    F'0'
PACKPAS  DC    CL4'    '
CHARPAS  DC    CL8'        '
PASSNUM  DC    F'0'
NUMREC   DC    F'0'
WORKDEV  DC    X'0000'
WORKCUA  DC    X'000000'
         ORG   WORKCUA
WORKCU   DS    CL1
WORKMOD  DS    CL2
         ORG   FILT1ITM+64
MSGNO    DC    F'0'
         ORG   FILT1ITM+68
PRINTLIN DS    CL134
         ORG   PRINTLIN
PRINTDS  DC    X'F1'
PRINTCC  DC    X'40'
PRINTBDY DC    CL132' '
         ORG   PRINTLIN+134
BITSWIT  DC    X'000000'
         ORG   BITSWIT
NONBLANK DS    BL1
SORTSW   EQU   BITSWIT+0
CUAOK    EQU   BITSWIT+0
LOOPOUT  EQU   BITSWIT+0
GETOUT   EQU   BITSWIT+0
ONETIME  EQU   BITSWIT+0
ISMERD   EQU   BITSWIT+0
FRAMEYES EQU   BITSWIT+0
NOMESAGE DS    BL1
SWITCH1  EQU   BITSWIT+1
DEVOK    EQU   BITSWIT+1
EVFLAG   EQU   BITSWIT+1
ONBOUND  EQU   BITSWIT+1
CPUEXCES EQU   BITSWIT+1
ODDREC   EQU   BITSWIT+1
VOLOK    EQU   BITSWIT+1
TERMOK   DS    BL1
LIBOK    EQU   BITSWIT+2
CPUOK    EQU   BITSWIT+2
FIRSTIME EQU   BITSWIT+2
NOTYPECT EQU   BITSWIT+2
BADREC   EQU   BITSWIT+2
WEAREFIN EQU   BITSWIT+2
         ORG   BITSWIT+3
VOLCOMP  DC    CL6' '
BUG38    DC    CL51'DEBUG38 - HEX DUMP OF RECORD(S) THAT FAIL FILTERINGC
               '
BUG42    DC    CL65'DEBUG42 - PROCESSING INPUT DATA STOPPED PRIOR TO EOC
               F AS REQUESTED'
         DS    CL1
WORK     DS    CL8
EXCESCPU DS    CL16
         ORG   EXCESCPU
@NM00111 DS    CL8
CT       DC    CL8'        '
         ORG   EXCESCPU+16
MCF      DC    CL131' '
         ORG   MCF
MCFNUMB  DS    CL6
@NM00112 DC    CL10' MCF READ '
MCFNOMCH DS    CL6
@NM00113 DC    CL21' NO MATCHING MCH REC'
MCFDUP   DS    CL6
@NM00114 DC    CL22' DUPLICAT FRAME SETS '
MCFREJ   DS    CL6
@NM00115 DC    CL20' MCF FRAMES REJECTED'
MCFKEPT  DS    CL6
@NM00116 DC    CL12' FRAMES KEPT'
MFACCDEV DS    CL6
@NM00117 DC    CL10' TO ACCDEV'
         ORG   MCF+131
CCF      DC    CL131' '
         ORG   CCF
CCFNUMB  DS    CL6
@NM00118 DC    CL10' CCF READ '
CCFNOCCH DS    CL6
@NM00119 DC    CL21'                    '
CCFDUP   DS    CL6
@NM00120 DC    CL22'                     '
CCFREJ   DS    CL6
@NM00121 DC    CL20' CCF FRAMES REJECTED'
CCFKEPT  DS    CL6
@NM00122 DC    CL12' FRAMES KEPT'
CFACCDEV DS    CL6
@NM00123 DC    CL10' TO ACCDEV'
         ORG   CCF+131
FFSETS   DS    CL37
         ORG   FFSETS
FFNUMD   DS    CL6
@NM00124 DC    CL31'  NUMBER OF COMPLETE FRAME SETS'
         ORG   FFSETS+37
GETSOK   DC    CL38' '
         ORG   GETSOK
GETNUM   DS    CL6
@NM00125 DC    CL32'  SUCCESSFUL SUBPOOL 21 GETMAINS'
         ORG   GETSOK+38
EXTRACT  DC    CL49' '
         ORG   EXTRACT
BUILDNUM DS    CL6
@NM00126 DC    CL18'  BUILDTTR ENTRIES'
LASTCTS  DS    CL6
@NM00127 DC    CL19'  LAST FRAMES FOUND'
         ORG   EXTRACT+49
BUG48    DC    CL33'DEBUG48 -  HEXDUMP OF FRAME TABLE'
CHARS    DC    CL16'0123456789ABCDEF'
BYTES1   DS    CL22
         ORG   BYTES1
BYTCT    DS    CL8
@NM00128 DC    CL14'  # BYTES READ'
         ORG   BYTES1+22
RECCT    DS    CL66
         ORG   RECCT
RECCTS   DC    CL6'      '
NAME     DC    CL3'   '
@NM00129 DC    CL13'RECORDS READ'
@NM00130 DC    CL44'RECORDS DROPPED DO TO EXCESS NUMBER OF CPUS'
         ORG   RECCT+66
TIMEMSG  DS    CL87
         ORG   TIMEMSG
DAYFAIL  DS    CL6
@NM00131 DC    CL2'  '
@NM00132 DC    CL16'OUT OF DAY RANGE'
@NM00133 DC    CL2'  '
TIMEFAIL DS    CL6
@NM00134 DC    CL2'  '
@NM00135 DC    CL17'OUT OF TIME RANGE'
@NM00136 DC    CL2'  '
THIRDROP DS    CL6
@NM00137 DC    CL2'  '
@NM00138 DC    CL26'DROPPED DUE TO THIRD SHIFT'
         ORG   TIMEMSG+87
AVEBYTE  DS    CL27
         ORG   AVEBYTE
AVERAGE  DC    CL6'      '
@NM00139 DC    CL21' AVERAGE BYTES/RECORD'
         ORG   AVEBYTE+27
ERR7816  DC    CL18' '
         ORG   ERR7816
@NM00143 DC    CL18'DEBUG16 FRAME SET '
         ORG   ERR7816+18
INCOMP   DC    CL10'INCOMPLETE'
REPLACED DC    CL8'REPLACED'
ZERO1    DC    X'0000000000'
BUG4     DC    CL9'DEBUG4 - '
         DS    CL1
DBLWORD  DS    CL8
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL2
INCOUNT  DC    12F'0'
MIDCOUNT DC    12F'0'
OUTCOUNT DC    12F'0'
CUACT    DC    12F'0'
DEVCT    DC    12F'0'
RDEPCT   DC    12F'0'
EXCPUCT  DC    12F'0'
TERMTYPE DC    3F'0'
TERMKEPT DC    3F'0'
VOLCOUNT DC    13F'0'
VOLPASS  DC    11F'0'
CPUIN    DC    16F'0'
CPUOUT   DC    16F'0'
LETTERS  DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
TRMTYPE  DC    CL2'36'
         DC    CL2'32'
         DC    CL2'34'
VOLDEV   DC    CL8'MDR-DASD'
         DC    CL8'OBR-DASD'
         DC    CL8'OBR-TAPE'
         DC    CL8'DDR-REC '
         DS    CL2
PATCH    DC    15F'0'
RECNAME  DC    CL3'MCH'
         DC    CL3'CCH'
         DC    CL3'OBR'
         DC    CL3'SFT'
         DC    CL3'IPL'
         DC    CL3'DDR'
         DC    CL3'MIH'
         DC    CL3'EOD'
         DC    CL3'MDR'
         DC    CL3'UKN'
NEWCPUS  DS    CL2
         ORG   NEWCPUS+0
NEWMOD   DS    CL2
         ORG   NEWCPUS+6
NOMATCH  DC    2H'0'
FRMREAD  DC    2H'0'
DUPLICAT DC    2H'0'
KEPT     DC    2H'0'
TOACCDEV DC    2H'0'
SETREJCT DC    2H'0'
IFCFILT4 CSECT
         DC    S(SUPERZAP)
IFCFILT4 CSECT
          DC    S(PATCH)
IFCFILT4 CSECT
MVCINS  MVC  R0(R0,R6),0(R4)
IFCFILT4 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R7       EQU   @07
R0       EQU   @00
R1       EQU   @01
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R12      EQU   @12
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R3       EQU   @03
R8       EQU   @08
R9       EQU   @09
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
PMCH     EQU   RECTYPE
PCHAN    EQU   RECTYPE
POBR     EQU   RECTYPE
PSOFT    EQU   RECTYPE
PIPL     EQU   RECTYPE
PDDR     EQU   RECTYPE
PMIH     EQU   RECTYPE
PEOD     EQU   RECTYPE
PTTYP    EQU   RECTYPE+1
SWITCHES EQU   PARM+2
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUG11  EQU   DEBUG+1
DEBUG16  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUGA   EQU   PARM+8
DEBUG38  EQU   DEBUGA
DEBUG46  EQU   DEBUGA+1
DEBUG47  EQU   DEBUGA+1
DEBUG48  EQU   DEBUGA+2
MISC     EQU   PARM+12
PACC     EQU   MISC
PHIST    EQU   MISC
PRINTES  EQU   MISC
PASSFLAG EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
CACCIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
TERM     EQU   PARM+58
@NM00007 EQU   PARM+75
TABSIZE  EQU   PARM+80
SORTNUM  EQU   PARM+84
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
RECCCHHR EQU   CCHHRLNG
RECLNGTH EQU   CCHHRLNG+6
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
FRAMEPTR EQU   PARM+200
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVNUM    EQU   EVTABLE+4
EVKEY    EQU   EVTABLE+6
EVMODEL  EQU   EVKEY
EVSERIAL EQU   EVKEY+2
EVLETTER EQU   EVKEY+5
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTYEAR EQU   SORTKEY
SORTTIME EQU   SORTKEY+1
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SHARE    EQU   0
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUANUM   EQU   CUA
CUAVAL   EQU   CUA+2
CUA1     EQU   CUAVAL
CUA2     EQU   CUAVAL+2
DEVICE   EQU   0
DEVNUM   EQU   DEVICE
DEVVAL   EQU   DEVICE+2
MDRNUM   EQU   DEVICE+202
MDRVAL   EQU   DEVICE+204
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
VOLNUM   EQU   VOLUME
VOLVAL   EQU   VOLUME+2
CPUS     EQU   0
CPUNUM   EQU   CPUS
CPUVAL   EQU   CPUS+2
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
TMT2     EQU   0
TMTKEY   EQU   TMT2
TMTSRT   EQU   TMTKEY+1
TMTCPUS  EQU   TMTKEY+3
TMTITEM  EQU   TMTKEY+4
TMTPERM1 EQU   TMT2+8
TMP2     EQU   0
TMPKEY   EQU   TMP2
TMPSRT   EQU   TMPKEY+1
TMPCPUS  EQU   TMPKEY+3
TMPITEM  EQU   TMPKEY+4
TMPPERM1 EQU   TMP2+7
MERIDIAN EQU   0
MRDNUMBR EQU   MERIDIAN
MODEL    EQU   MERIDIAN+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTNLAST EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRTERRID EQU   LRTREC+3
@NM00017 EQU   LRTREC+4
LRTCNT   EQU   @NM00017+2
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTYEAR  EQU   LRTYRDAY
LRTDAY   EQU   LRTYRDAY+1
LRTTIME  EQU   LRTDT+4
LRTHOUR  EQU   LRTTIME
LRTMIN   EQU   LRTTIME+1
LRTSEC   EQU   LRTTIME+2
LRTHSECS EQU   LRTTIME+3
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHCPUID EQU   MCHHEAD+16
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
SHORTSW  EQU   OBRSUBTP
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRSDEV2 EQU   OBRJOBID+2
OBRSCUA  EQU   OBRJOBID+5
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRCLASS EQU   OBRDEV
OBRPCUA  EQU   OBRREC+57
OBRVOL   EQU   OBRREC+64
OBRSEEK  EQU   OBRREC+70
OBRTCAM  EQU   OBRSEEK
OBRTERMN EQU   OBRSEEK+2
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00052 EQU   DDRREC+24
DDRVOL1  EQU   @NM00052+8
DDRVOL2  EQU   @NM00052+14
DDRFCUA  EQU   DDRREC+45
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
@NM00054 EQU   MIHHEAD+4
MIHCPUID EQU   MIHHEAD+16
@NM00057 EQU   MIHREC+24
MIHCUA   EQU   MIHREC+35
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRDEV   EQU   TPRHEAD+4
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
TPRCUA   EQU   TPRREC+24
@NM00065 EQU   TPRREC+26
TPRVOL   EQU   @NM00065
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFSMS   EQU   MCFHEAD+2
@NM00073 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00081 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
NEXTBYTE EQU   0
ADDNUM   EQU   0
FRAMETAB EQU   0
FRAMENUM EQU   FRAMETAB
FRAMEDTA EQU   FRAMETAB+4
FRAMEKEY EQU   FRAMEDTA
FRAMECPU EQU   FRAMEKEY
FRAMESER EQU   FRAMECPU
FRAMEMOD EQU   FRAMECPU+3
FRAMEDT  EQU   FRAMEKEY+5
FRAMETYP EQU   FRAMEKEY+13
FRAMLOCM EQU   FRAMEDTA+16
FRAMLOCC EQU   FRAMEDTA+20
LISTLOC  EQU   0
LISTNUM  EQU   LISTLOC
LISTCCHR EQU   LISTLOC+4
WORKOVER EQU   WORK
EDIFILD  EQU   PRINTBDY+8
CT1      EQU   PRINTBDY+8
CT2      EQU   PRINTBDY+8
CTARRAY  EQU   CT
ERR78    EQU   PRINTBDY
PFRAMMOD EQU   ERR78+27
PFRAMSER EQU   ERR78+32
ERR78161 EQU   PRINTBDY+19
TYPERROR EQU   ERR78161
ZFRAMMOD EQU   ERR78161+11
ZFRAMSER EQU   ERR78161+16
ZFRAMKEY EQU   ERR78161+24
YFRAMMOD EQU   ERR78161+58
YFRAMSER EQU   ERR78161+63
YFRAMKEY EQU   ERR78161+71
CHAR1    EQU   CHARS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00149 EQU   ERR78161+69
@NM00148 EQU   ERR78161+62
@NM00147 EQU   ERR78161+52
@NM00146 EQU   ERR78161+22
@NM00145 EQU   ERR78161+15
@NM00144 EQU   ERR78161+10
PFRAMKEY EQU   ERR78+44
@NM00142 EQU   ERR78+38
@NM00141 EQU   ERR78+31
@NM00140 EQU   ERR78
FRAMETIM EQU   FRAMEDT+4
FRAMEDAT EQU   FRAMEDT
CCFFRAME EQU   CCFREC+24
@NM00083 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00081
@NM00082 EQU   @NM00081
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00080 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00079 EQU   CCFHEAD+4
@NM00078 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00077 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00076 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00075 EQU   MCFHEAD+22
MCFMOD   EQU   MCFSMO+3
MCFSER   EQU   MCFSMO
MCFVER   EQU   @NM00073
@NM00074 EQU   @NM00073
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00072 EQU   MCFHEAD+7
MCFCNT   EQU   MCFHEAD+6
@NM00071 EQU   MCFHEAD+4
@NM00070 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00069 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00068 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFLST   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
MCFKEY1  EQU   MCFKEY
DVBSDRE  EQU   TPRREC+56
@NM00067 EQU   TPRREC+39
TPRMODE  EQU   TPRREC+38
TPRLINAD EQU   TPRREC+36
@NM00066 EQU   TPRREC+34
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00064 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00063 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00062 EQU   TPRBUFC
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00061 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00060 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00059 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
@NM00058 EQU   @NM00057+8
MIHJOBID EQU   @NM00057
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00056 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00055 EQU   MIHHEAD+6
MIHCSID  EQU   MIHHEAD+5
MIHDEBIT EQU   @NM00054
MIHCEBIT EQU   @NM00054
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00053 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRPHD   EQU   @NM00052+20
DDRJOBID EQU   @NM00052
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00051 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00050 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00049 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00048 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00047 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00046 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00045 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00044 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00043 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00042 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00041 EQU   SFTAEC1
@NM00040 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00039 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00038 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
SFTKEY1  EQU   SFTKEY
OBR34CT2 EQU   OBRTERMN+5
OBR34CT1 EQU   OBRTERMN+4
@NM00037 EQU   OBRTERMN
@NM00036 EQU   OBRSEEK+1
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRLSDRC EQU   OBRREC+56
OBRTYPE  EQU   OBRDEV+1
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRDEVDC EQU   OBRREC+48
OBRSTAT  EQU   OBRCSW+4
@NM00035 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSSDRC EQU   OBRJOBID+4
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00034 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00033 EQU   OBRHEAD+4
@NM00032 EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
@NM00031 EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SDRCOUNT EQU   OBRSUBTP
@NM00030 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00029 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
OBRKEY1  EQU   OBRKEY
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00028 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00027 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00026 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00025 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00024 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00023 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00022 EQU   MCHHEAD+4
MCHSYSTR EQU   MCHSMS+1
@NM00021 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00020 EQU   LRTCPU
LRTDATE0 EQU   LRTDATE
@NM00019 EQU   @NM00017+3
@NM00018 EQU   @NM00017
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
TMPTEMP  EQU   TMP2+9
TMPPERM  EQU   TMPPERM1+1
@NM00012 EQU   TMPPERM1
TMPDEV   EQU   TMPKEY+5
TMPOLDA  EQU   TMPITEM
TMP3705  EQU   TMPITEM
TMPOLD   EQU   TMPCPUS
TMPCPU   EQU   TMPCPUS
TMPCUA   EQU   TMPSRT
TMPGROUP EQU   TMPKEY
TMTTEMP  EQU   TMT2+10
TMTPERM  EQU   TMTPERM1+1
@NM00011 EQU   TMTPERM1
TMTDEV   EQU   TMTKEY+6
TMTDAT   EQU   TMTKEY+5
TMTOLDA  EQU   TMTITEM
TMT3705  EQU   TMTITEM
TMTOLD   EQU   TMTCPUS
TMTCPU   EQU   TMTCPUS
TMTCUA   EQU   TMTSRT
TMTGROUP EQU   TMTKEY
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERB EQU   SHAREIO+7
SHARECUB EQU   SHAREIO+5
SHARSERA EQU   SHRCUCPU+2
SHAREDX  EQU   SHARECUA
SHARENUM EQU   SHARE
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TRECCH0  EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
@NM00009 EQU   CCHHRLNG+5
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SYSRETRN EQU   @NM00007
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00336 EQU   @RC00325
@RF00383 EQU   @EL00002
@RC00389 EQU   @EL00002
@RF00414 EQU   @EL00003
@RF00426 EQU   @RC00424
@RF00435 EQU   @RC00429
@RC00433 EQU   @RC00429
@RC00431 EQU   @RC00429
@RF00439 EQU   @EL00004
@RF00444 EQU   @EL00004
@RF00465 EQU   @EL00005
@RF00477 EQU   @EL00006
@RF00481 EQU   @EL00006
@RF00591 EQU   @EL00008
@RF00651 EQU   @EL00009
@RC00794 EQU   @EL00015
@RC00824 EQU   @EL00016
@RC00830 EQU   @EL00016
@RC00836 EQU   @EL00016
@RC00839 EQU   @EL00016
@RC00842 EQU   @EL00016
@RC00845 EQU   @EL00016
@RC00848 EQU   @EL00016
@RC00851 EQU   @EL00016
@RC00854 EQU   @EL00016
@RC00857 EQU   @EL00016
@RC00900 EQU   @EL00018
@RF00923 EQU   @EL00018
@RC00928 EQU   @EL00019
@RF00941 EQU   @EL00019
@RC00946 EQU   @EL00020
@RF00958 EQU   @EL00020
@RC00963 EQU   @EL00021
@RF00973 EQU   @EL00021
@RC00978 EQU   @EL00022
@RF00987 EQU   @EL00022
@RF00992 EQU   @EL00023
@RF00999 EQU   @EL00024
@RC01006 EQU   @EL00025
@RF01014 EQU   @EL00026
@RF01026 EQU   @EL00027
@RC01055 EQU   @RC01053
@RF01064 EQU   @RC01047
@RC01094 EQU   @RC01092
@RF01111 EQU   @RC01092
@RF01135 EQU   @EL00030
@RC01142 EQU   @RC01140
@RC01154 EQU   @RC01140
@RF01201 EQU   @EL00032
@RC01259 EQU   @RC01257
@RF01277 EQU   @EL00034
@RF01324 EQU   @RC01284
@RF01329 EQU   @EL00035
@RC01331 EQU   @EL00035
@RF01363 EQU   @EL00036
@RF01435 EQU   @EL00038
@RC01486 EQU   @EL00041
@RF01495 EQU   @EL00041
@PB00041 EQU   @EL00001
@RC00796 EQU   @RC00794
@RF00814 EQU   @RC00794
@RF01147 EQU   @RC01142
@RC01157 EQU   @RC01154
@RC01335 EQU   @RC01331
@PB00040 EQU   @PB00041
@RC00798 EQU   @RC00796
@RF01161 EQU   @RC01157
@RF01163 EQU   @RC01157
@RC01166 EQU   @RC01157
@RC01173 EQU   @RC01157
@PB00039 EQU   @PB00040
@RF00800 EQU   @RC00798
@PB00038 EQU   @PB00039
@PB00037 EQU   @PB00038
@PB00036 EQU   @PB00037
@PB00035 EQU   @PB00036
@PB00034 EQU   @PB00035
@PB00033 EQU   @PB00034
@PB00032 EQU   @PB00033
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IFCFILT4
