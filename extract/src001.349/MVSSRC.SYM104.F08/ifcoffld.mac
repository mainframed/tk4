         TITLE 'IFCOFFLD-CONTROL MODULE QUICK DUMP OF SERLOG           *
                        '
IFCOFFLD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCOFFLD  77.315'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*PACC = YES;                    /*WILL WRITE A HISTORY TAPE  @Z427VLS*/
*PLOGREC = YES;                 /*OPEN THE LOGREC DATA SET   @Z427VLS*/
         OI    PACC,B'01000010'                                    0058
*R2 = ADDR(PARM);               /*SET ADDRESS OF THE COMM TABLE      */
         LA    R2,PARM                                             0059
*OTOURIST = YES;                /*OPEN THE TOURIST DATA SET  @Z427VLS*/
*OEREPPT = YES;                 /*OPEN THE ERREP PRINT DATA SET      */
*OSERLOG  = YES;                /*DATA IS FROM SERLOG        @Z427VLS*/
         OI    OTOURIST,B'11100000'                                0062
*SYSUM = YES;                   /*NOT NEEDED BUT FOR ANY DUMP BEST HV*/
         OI    SYSUM,B'00000100'                                   0063
*OACCDEV = YES;                 /*OPEN THE OUTPUT TAPE DATA SET      */
         OI    OACCDEV,B'00001000'                                 0064
*CALL IOHND(IOOPEN);            /*HAVE THE IO PROCESSOR OPEN THE SETS*/
         L     @15,ADIOHND                                         0065
         LA    @01,@AL00065                                        0065
         BALR  @14,@15                                             0065
*IF R15 = ZERO THEN             /*BEFORE WE KEEP GOING CHECK FOR ERR */
         LTR   R15,R15                                             0066
         BNZ   @RF00066                                            0066
* DO;                                                      /*@Z427VLS*/
*  ZEROALL = YES;               /*SET TO WIPE CLEAN SERLOG AT EOJ    */
         OI    ZEROALL,B'01000000'                                 0068
*  GEN(TIME  DEC);              /*HAVE OS TELL US TODAYS DATE        */
         TIME  DEC
*  GEN(STCM  R1,X'7',YYDDD);        /*SAVE THE DAY FROM THE REG      */
         STCM  R1,X'7',YYDDD
*  UNPK(HOLDAREA,YYDDD);        /*CHANGE TO PRINTABLE        @Z427VLS*/
         UNPK  HOLDAREA(5),YYDDD(3)                                0071
*  DAYNOW = HOLDAREA(3:5);      /*SAVE THE DAY               @Z427VLS*/
         MVC   DAYNOW(3),HOLDAREA+2                                0072
*  YEARNOW = HOLDAREA(1:2);     /*SAVE THE YEAR              @Z427VLS*/
         MVC   YEARNOW(2),HOLDAREA                                 0073
*  DAYDATE = DATENOW;             /*MOVE TODAYS DATE INTO THE MSG*/
         MVC   DAYDATE(6),DATENOW                                  0074
*  GEN(MVC PRTLINE+45(42),HEADLINE);/*   MESSAGE INTO THE BUFFER  */
         MVC PRTLINE+45(42),HEADLINE
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0076
         ST    @03,PRINTADR                                        0076
*  CALL IOHND(RITEPRTR);          /*GO PRINT THE MESSAGE     @0001VLS*/
         L     @15,ADIOHND                                         0077
         LA    @01,@AL00077                                        0077
         BALR  @14,@15                                             0077
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0078
         ST    @03,PRINTADR                                        0078
*  CALL IOHND(RITEPRTR);          /*GO PRINT A BLANK LINE    @0001VLS*/
         L     @15,ADIOHND                                         0079
         LA    @01,@AL00079                                        0079
         BALR  @14,@15                                             0079
*  PRTLINE = PARMS;             /*MOVE IN PARMS FOR THIS EXCUTION*/
         MVI   PRTLINE+42,C' '                                     0080
         MVC   PRTLINE+43(89),PRTLINE+42                           0080
         MVC   PRTLINE(42),PARMS                                   0080
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0081
         ST    @03,PRINTADR                                        0081
*  CALL IOHND(RITEPRTR);          /*GO PRINT THE LINE OF INFO     */
         L     @15,ADIOHND                                         0082
         LA    @01,@AL00082                                        0082
         BALR  @14,@15                                             0082
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0083
         ST    @03,PRINTADR                                        0083
*  CALL IOHND(RITEPRTR);          /*GO PRINT A BLANK LINE    @0001VLS*/
         L     @15,ADIOHND                                         0084
         LA    @01,@AL00084                                        0084
         BALR  @14,@15                                             0084
*  PRTLINE = TYPEJOB;             /*PRINT THE TYPE OF JOB    @0001VLS*/
         MVI   PRTLINE+36,C' '                                     0085
         MVC   PRTLINE+37(95),PRTLINE+36                           0085
         MVC   PRTLINE(36),TYPEJOB                                 0085
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0086
         ST    @03,PRINTADR                                        0086
*  CALL IOHND(RITEPRTR);          /*GO PRINT THE LINE OF INFO     */
         L     @15,ADIOHND                                         0087
         LA    @01,@AL00087                                        0087
         BALR  @14,@15                                             0087
*  PRINTADR = ADDR(PRINTLIN);     /*TELL I/O WHERE THE BUFFER IS  */
         LA    @03,PRINTLIN                                        0088
         ST    @03,PRINTADR                                        0088
*  CALL IOHND(RITEPRTR);          /*GO PRINT A BLANK LINE    @0001VLS*/
         L     @15,ADIOHND                                         0089
         LA    @01,@AL00089                                        0089
         BALR  @14,@15                                             0089
* R15=1;                     /*SET TO NOT FALL THROUGH THE LOOP*/  0090
         LA    R15,1                                               0090
*  CALL IFCFILT2;               /*GO LET THE FILTER DO IT'S THING    */
         L     @15,@CV00497                                        0091
         BALR  @14,@15                                             0091
*  IF R15 = ZERO                /*ONLY GO ON IF GOOD RETURN  @Z427VLS*/
*   THEN                                                           0092
         LTR   R15,R15                                             0092
         BNZ   @RF00092                                            0092
*    CALL IFCSYSUM;             /*LET THE FILTER DO IT'S THING       */
         L     @15,@CV00498                                        0093
         BALR  @14,@15                                             0093
*  RESPECIFY (R0,R1) RESTRICTED;                           /*@Z427VLS*/
@RF00092 DS    0H                                                  0095
*  IF SORTNUM ^= ZERO THEN      /*FREE CORE ONLY IF SOME THING FOUND */
         L     @03,SORTNUM                                         0095
         SLR   @15,@15                                             0095
         CR    @03,@15                                             0095
         BE    @RF00095                                            0095
*   DO;                                                    /*@Z427VLS*/
*    R1 = SORTADR;              /*LOAD THE ADDRESS OF WHERE DATA IS  */
         L     R1,SORTADR                                          0097
*   R0 = SORTNUM * THIRTEEN;      /* DETERMINE THE LENGTH OF SORTTABLE*
         MH    @03,@CH00464                                        0098
         LR    R0,@03                                              0098
*    IF (R0 & '00000007'X)      /*MAKE SURE DOUBLE WORD BOUNDRY      */
*     ^= ZERO THEN                                                 0099
         LR    @03,R0                                              0099
         N     @03,@CF00499                                        0099
         CR    @03,@15                                             0099
         BE    @RF00099                                            0099
*      DO;                                                 /*@Z427VLS*/
*        R0 = (R0 & 'FFFFFFF8'X);   /*MOVE THE VALUE TO DOUBLE WORD  */
         N     R0,@CF00500                                         0101
*                                   /*FILT2 LEFT SOME EXTRA BYTES TO */
*                                   /*MAKE THIS OK           @Z427VLS*/
*        R0 = R0 + EIGHT;           /*DO SAME AS FILTER DID IT       */
         AL    R0,@CF00062                                         0102
*      END;                                                /*@Z427VLS*/
*    GEN(FREEMAIN R,LV=(0),A=(1));  /*AT LAST GO FREE THE CORE       */
@RF00099 DS    0H                                                  0104
         FREEMAIN R,LV=(0),A=(1)
*   END;                                                   /*@Z427VLS*/
* END;                                                     /*@Z427VLS*/
@RF00095 DS    0H                                                  0107
*CLOSEIO = 'FFFF'X;             /*CLOSE ANY THING THAT IS OPEN       */
@RF00066 MVC   CLOSEIO(2),@CB00259                                 0107
*CALL IOHND(IOCLOSE);           /*GO TO IOHANDLER TO CLOSE DATA SETS */
         L     @15,ADIOHND                                         0108
         LA    @01,@AL00108                                        0108
         BALR  @14,@15                                             0108
*     R15 = SYSRETRN;                                      /*@ZA25584*/
         SLR   R15,R15                                             0109
         IC    R15,SYSRETRN                                        0109
*END                                                       /*@Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 0110
@EL00001 L     @13,4(,@13)                                         0110
@EF00001 DS    0H                                                  0110
@ER00001 L     @14,12(,@13)                                        0110
         LM    @00,@12,20(@13)                                     0110
         BR    @14                                                 0110
@DATA    DS    0H
@CH00051 DC    H'1'
@CH00071 DC    H'2'
@CH00080 DC    H'7'
@CH00464 DC    H'13'
         DS    0F
@AL00065 DC    A(@CH00051)             LIST WITH   1 ARGUMENT(S)
@AL00077 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00079 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00082 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00084 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00087 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00089 DC    A(@CH00071)             LIST WITH   1 ARGUMENT(S)
@AL00108 DC    A(@CH00080)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00062 DC    F'8'
@CF00499 DC    XL4'00000007'
@CF00500 DC    XL4'FFFFFFF8'
@CV00294 DC    V(IFCIOHND)
@CV00295 DC    V(IFCMSG01)
@CV00497 DC    V(IFCFILT2)
@CV00498 DC    V(IFCSYSUM)
         DS    0D
@CB00259 DC    X'FFFF'
         DS    CL2
PARM     DS    CL328
         ORG   PARM
RECTYPE  DC    X'FFE0'
         ORG   RECTYPE
PMCH     DS    BL1
PCHAN    EQU   RECTYPE+0
POBR     EQU   RECTYPE+0
PSOFT    EQU   RECTYPE+0
PIPL     EQU   RECTYPE+0
PDDR     EQU   RECTYPE+0
PMIH     EQU   RECTYPE+0
PEOD     EQU   RECTYPE+0
PTTYP    DS    BL1
PMCHFRAM EQU   RECTYPE+1
PCCHFRAM EQU   RECTYPE+1
         ORG   PARM+2
SWITCHES DC    X'0100'
         ORG   SWITCHES
RDESUM   DS    BL1
PARMMES  EQU   SWITCHES+0
SHORTOBR EQU   SWITCHES+0
TREND    EQU   SWITCHES+0
PARMTHR  EQU   SWITCHES+0
SYSUM    EQU   SWITCHES+0
TIMESEQ  EQU   SWITCHES+0
NOSDR    EQU   SWITCHES+0
NOTALL   DS    BL1
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
SORTBRK  EQU   SWITCHES+1
         ORG   PARM+4
DEBUG    DC    X'00000000'
         ORG   DEBUG
DEBUG0   DS    BL1
DEBUG1   EQU   DEBUG+0
DEBUG2   EQU   DEBUG+0
DEBUG3   EQU   DEBUG+0
DEBUG4   EQU   DEBUG+0
DEBUG5   EQU   DEBUG+0
DEBUG6   EQU   DEBUG+0
DEBUG7   EQU   DEBUG+0
DEBUG8   DS    BL1
DEBUG9   EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG11  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG15  EQU   DEBUG+1
DEBUG16  DS    BL1
DEBUG17  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG22  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUG24  DS    BL1
DEBUG25  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG31  EQU   DEBUG+3
         ORG   PARM+8
DEBUGA   DC    X'00000000'
         ORG   DEBUGA
DEBUG32  DS    BL1
DEBUG33  EQU   DEBUGA+0
DEBUG34  EQU   DEBUGA+0
DEBUG35  EQU   DEBUGA+0
DEBUG36  EQU   DEBUGA+0
DEBUG37  EQU   DEBUGA+0
DEBUG38  EQU   DEBUGA+0
DEBUG39  EQU   DEBUGA+0
DEBUG40  DS    BL1
DEBUG41  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG47  EQU   DEBUGA+1
DEBUG48  DS    BL1
DEBUG49  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG55  EQU   DEBUGA+2
DEBUG56  DS    BL1
DEBUG57  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG63  EQU   DEBUGA+3
         ORG   PARM+12
MISC     DC    X'4A'
         ORG   MISC
PZERO    DS    BL1
PACC     EQU   MISC+0
PHIST    EQU   MISC+0
PRINTES  EQU   MISC+0
         ORG   PRINTES
PEDIT    EQU   PRINTES+0
PSUM     EQU   PRINTES+0
         ORG   MISC+0
ERRORID  EQU   MISC+0
PLOGREC  EQU   MISC+0
PASSFLAG EQU   MISC+0
         ORG   PARM+13
OPENCLSE DS    CL4
         ORG   OPENCLSE
OPENIO   DC    X'8000'
         ORG   OPENIO
OTOURIST DS    BL1
OEREPPT  EQU   OPENIO+0
OSERLOG  EQU   OPENIO+0
OACCIN   EQU   OPENIO+0
OACCDEV  EQU   OPENIO+0
OSYSIN   EQU   OPENIO+0
ODRCTWRK EQU   OPENIO+0
OSNAP    EQU   OPENIO+0
         ORG   OPENCLSE+2
CLOSEIO  DC    X'0000'
         ORG   CLOSEIO
CTOURIST DS    BL1
CEREPPT  EQU   CLOSEIO+0
CSERLOG  EQU   CLOSEIO+0
CACCIN   EQU   CLOSEIO+0
CACCDEV  EQU   CLOSEIO+0
CSYSIN   EQU   CLOSEIO+0
CDRCTWRK EQU   CLOSEIO+0
CSNAP    EQU   CLOSEIO+0
         ORG   PARM+17
DATENOW  DC    CL6' '
         ORG   DATENOW
DAYNOW   DS    CL3
@NM00001 DS    CL1
YEARNOW  DS    CL2
         ORG   PARM+23
STDT     DS    CL8
         ORG   STDT
STDATE   DS    CL4
         ORG   STDATE
@NM00002 DC    X'00'
PSTD     DC    X'00000F'
         ORG   PSTD
PSTYR    DS    BL1
PSTDY    DS    BL2
         ORG   STDT+4
@NM00003 DC    X'00000000'
         ORG   PARM+31
ENDDT    DS    CL8
         ORG   ENDDT
ENDDATE  DS    CL4
         ORG   ENDDATE
@NM00004 DC    X'7F'
PEND     DC    X'FFFFFF'
         ORG   PEND
PENYR    DS    BL1
PENDY    DS    BL2
         ORG   ENDDT+4
@NM00005 DC    X'24000000'
         ORG   PARM+39
STTIME1  DC    X'00000000'
         ORG   STTIME1
PSTHOUR1 DS    BL1
PSTMIN1  DS    BL1
PSTSEC1  DS    BL1
         ORG   PARM+43
ENDTIME1 DC    X'24000000'
         ORG   ENDTIME1
PENHOUR1 DS    BL1
PENMIN1  DS    BL1
PENSEC1  DS    BL1
         ORG   PARM+47
STTIME2  DC    X'00000000'
         ORG   STTIME2
PSTHOUR2 DS    BL1
PSTMIN2  DS    BL1
PSTSEC2  DS    BL1
         ORG   PARM+51
ENDTIME2 DC    X'24000000'
         ORG   ENDTIME2
PENHOUR2 DS    BL1
PENMIN2  DS    BL1
PENSEC2  DS    BL1
         ORG   PARM+55
STRTDATE DS    CL3
         ORG   STRTDATE
EVSYEAR  DC    X'7F'
EVSDAY   DC    X'FFFF'
         ORG   PARM+58
TERM     DC    CL8' '
RDTHRSH  DC    CL3'000'
WRTHRSH  DC    CL3'000'
@NM00006 DC    CL3'000'
@NM00007 DC    CL3'000'
         ORG   @NM00007
SYSRETRN DC    X'00'
         ORG   PARM+80
TABSIZE  DC    XL4'00006000'
SORTNUM  DC    F'0'
NUMDAYS  DC    F'0'
ERRID    DS    CL10
         ORG   ERRID
IDVALUE  DC    X'0000'
@NM00008 DC    X'00'
IDCPU    DC    X'FF'
IDASID   DC    X'0000'
IDTIMEA  DS    CL4
         ORG   IDTIMEA
IDTIME   DS    CL4
         ORG   IDTIME
IDHOUR   DC    XL1'00'
IDMIN    DC    XL1'00'
IDSEC    DC    XL1'00'
IDTSEC   DC    XL1'00'
         ORG   PARM+102
USERPGM  DC    CL8' '
         DS    CL2
CCHHRLNG DS    CL8
         ORG   CCHHRLNG
RECCCHHR DC    X'0000000000'
@NM00009 DS    CL1
RECLNGTH DC    H'0'
         ORG   PARM+120
LINECT   DC    H'50'
         DS    CL2
ADIOHND  DC    VL4(IFCIOHND)
ADIFCMSG DC    VL4(IFCMSG01)
ADEDITB  DC    A(0)
EVPTR    DC    A(0)
SORTADR  DC    A(0)
ADCPUT   DC    A(0)
PRINTADR DC    A(0)
CUAPTR   DC    A(0)
DEVPTR   DC    A(0)
MODPTR   DC    A(0)
SERPTR   DC    A(0)
VOLPTR   DC    A(0)
CPUPTR   DC    A(0)
CPCUAPTR DC    A(0)
LIBADPTR DC    A(0)
SYMCDPTR DC    A(0)
SYSUMPTR DC    A(0)
TRENPTR  DC    A(0)
SHAREPTR DC    A(0)
FRAMEPTR DC    A(0)
RECLNGT1 DC    F'0'
MERDCPTR DC    AL4(NEWCPU)
@NM00010 DC    A(0)
         DS    3XL4
DUMPTABL DS    CL100
         ORG   DUMPTABL
DUMPNUM  DC    H'1'
         DS    CL2
DUMPINFO DS    CL8
         ORG   DUMPINFO+0
DUMPADR  DC    F'0'
DUMPSIZE DC    F'0'
         ORG   PARM+328
NEWCPU   DS    CL8
         ORG   NEWCPU
MRDNUMBR DC    H'3'
MODEL    DC    X'3033'
         DC    X'3032'
         DC    X'3031'
         ORG   NEWCPU+8
HOLDAREA DC    CL5' '
PARMS    DC    CL42'PARAMETER OPTIONS VALID FOR THIS EXECUTION'
PRINTLIN DC    CL134' '
         ORG   PRINTLIN
DDTYPE   DC    CL1'1'
SPACING  DS    CL1
PRTLINE  DS    CL132
         ORG   PRINTLIN+134
HEADLINE DC    CL44' '
         ORG   HEADLINE
@NM00012 DC    CL36'EREP INFORMATIONAL MESSAGES  DATE - '
DAYDATE  DS    CL6
         ORG   HEADLINE+44
TYPEJOB  DC    CL36' '
         ORG   TYPEJOB
@NM00013 DC    CL40'    OFFLOAD IS BEING EXECUTED'
         ORG   TYPEJOB+40
YYDDD    DC    CL3' '
PATCH    DC    CL40'PATCH AREA'
SUPERZAP DC    3CL10'SUPERZAP'
IFCOFFLD CSECT
         DC    S(SUPERZAP)
IFCOFFLD CSECT
         ENTRY PARM
IFCOFFLD CSECT
     DC   S(PATCH)                                             @0001VLS
IFCOFFLD CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
IOHND    EQU   0
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
TRECCH0  EQU   TREGEN+8
TREND2   EQU   0
TRENDKEY EQU   TREND2
TRENDRT  EQU   TRENDKEY+1
TRENCPUS EQU   TRENDKEY+3
TRENDITM EQU   TRENDKEY+4
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUM2   EQU   0
SYSUMKEY EQU   SYSUM2
SYSRT    EQU   SYSUMKEY+1
SYSCPUS  EQU   SYSUMKEY+3
SYSITEM  EQU   SYSUMKEY+4
SHARE    EQU   0
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUAVAL   EQU   CUA+2
DEVICE   EQU   0
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
IFCMSG   EQU   0
TRECCH   EQU   TRECCH0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
CPUVAL   EQU   CPUS+2
CPUNUM   EQU   CPUS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
MDRVAL   EQU   DEVICE+204
MDRNUM   EQU   DEVICE+202
DEVVAL   EQU   DEVICE+2
DEVNUM   EQU   DEVICE
CUA2     EQU   CUAVAL+2
CUA1     EQU   CUAVAL
CUANUM   EQU   CUA
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERB EQU   SHAREIO+7
SHARECUB EQU   SHAREIO+5
SHARSERA EQU   SHRCUCPU+2
SHAREDX  EQU   SHARECUA
SHARENUM EQU   SHARE
SYSTEMP  EQU   SYSUM2+9
SYSPERM  EQU   SYSUM2+7
SYSDEV   EQU   SYSUM2+5
SYSOLDA  EQU   SYSITEM
SYS3705  EQU   SYSITEM
SYSOLD   EQU   SYSCPUS
SYSCPU   EQU   SYSCPUS
SYSCUA   EQU   SYSRT
SYSGROUP EQU   SYSUMKEY
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TRETMP   EQU   TREND2+10
TREPRM   EQU   TREND2+8
TRENDDEV EQU   TREND2+6
TRENDDAT EQU   TRENDKEY+5
TRENDOD  EQU   TRENDITM
TREND037 EQU   TRENDITM
TRENDOLD EQU   TRENCPUS
TRENDCPU EQU   TRENCPUS
@NM00011 EQU   TRENDRT+1
TRENDCUA EQU   TRENDRT
TRENDGRP EQU   TRENDKEY
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IFCOFFLD,(C'PLS0456',0701,77315)
