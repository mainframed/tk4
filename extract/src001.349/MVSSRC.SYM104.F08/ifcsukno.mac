***************************************************************  S21021
*
************             ENTIRE MODULE REPLACED UNDER CODE S21021
         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
*
&CSECT   SETC  'IFCSUKNO'
&DSECT   SETC  'COMMON'
         TITLE 'IFCSUKNO-SUM  TABLE-LINKNAME IFCSUKNO'
IFCSUKNO CSECT
*
         USING *,R9
         USING COMMON,R2
*
*
COMMON   DSECT
         DSGEN (CLASS,8),(DUM,24)
         DSGEN (DUMA,32),(DATE,32)
*
CLASSARE DSECT
         DS    CL22                     HEADER ALWAYS PRESENT
         DS    CL8                      NOT ALWAYS PRESENT
         DS    CL8
CLASSCTR DS    CL40                     ALWAYS PRESENT
LODATE   DS    CL4
HIDATE   DS    CL4
RECTYPE  DS    CL2                                             @XL03162
IFCSUKNO CSECT
*
         DC    A(SUM)
         DC    A(EDIT)
         DS    F
SCSIZE   DC    H'33'                                           @XL03162
         EJECT
*
*   SPECIAL ROUTINES FOR SUMM SECTION
*
         USING CLASSARE,R6
SAVEDATE CLC   DATE(L4),ZERO            IS DATE IN ZERO
         BE    EXIT                     YES
         CLC   LODATE(L4),ZERO          IS THIS FIRST DATE
         BNE   CHKLOW                   BR-NO
SAVELOW  MVC   LODATE(L4),DATE          MOVE IN LOW DATE
CHKLOW   CLC   DATE(L4),DATE            IS THIS DATE LOWER
         BL    SAVELOW                  YES
CHKHI    CLC   DATE(L4),HIDATE          IS THIS DATE HI
         BL    EXIT                     BR-NO
SAVEHI   MVC   HIDATE(L4),DATE          MOVE IN HIDATE
EXIT     BR    R14
SAVECLAS STM   R5,R6,WORK               SAVE WORK REGS
         LA    R5,CLASSCTR              PICK UP ADDRESS OF COUNTERS
         LA    R6,L10                   SET LOOP COUNTER
LOOP     CLI   L0(R5),HEXFF             IS COUNTER IN USE
         BNE   EMPTY                    BR NOT USED
         CLC   L1(L1,R5),CLASS          IS CLASS EQUAL
         BE    ADD1                     BR YES
         LA    R5,L4(R5)                BUMP TO NEXT SLOT
         BCT   R6,LOOP                  LOOP TEN TIMES
DONE     LM    R5,R6,WORK               RESET REGS
DONEA    BR    R14                      RETURN
EMPTY    MVI   L0(R5),HEXFF             MOVE IN IN USE FLAG
         MVC   L1(L1,R5),CLASS          MOVE IN CLASS
ADD1     LH    R6,L2(R5)                PICK UP COUNTER
         LA    R6,L1(R6)                ADD 1 TO IT
         STH   R6,L2(R5)                PUT IT BACK
         B     DONE
SAVETYPE MVC   RECTYPE(L1),DUMA         MOVE SUB ID TO SUM AREA
         BR    R14                                             @XL03162
*
*
         EJECT
SUM      DS    0F
         SPECIAL    SAVECLAS,0,SPACE=1
         SPECIAL    SAVEDATE,0,SPACE=4
         SPECIAL SAVETYPE,0,SPACE=1                            @XL03162
         DC    X'FF'
*
         EJECT
&DSECT   SETC  'SUMDSECT'
&CSECT   SETC  'EDIT'
EDIT     DS    0F
         USING EDIT,R9
         USING SUMDSECT,R2
         DC    A(ENTRIES)
         DC    C'IFCSUKNO'
R9PTR    DS    2F
*
SUMDSECT DSECT
         DSGEN (TBLPTR,32),(FWDPTR,32)
         DSGEN (NOREC,16),(TYPE,8),(DUMM,8)
         DSGEN (YCUA,24),(YSER,24),(YCPU,16)
         DS    9H
         DSGEN (FF1,8),(TYP1,8),(CNT1,16)
         DSGEN (FF2,8),(TYP2,8),(CNT2,16)
         DSGEN (FF3,8),(TYP3,8),(CNT3,16)
         DSGEN (FF4,8),(TYP4,8),(CNT4,16)
         DSGEN (FF5,8),(TYP5,8),(CNT5,16)
         DSGEN (FF6,8),(TYP6,8),(CNT6,16)
         DSGEN (FF7,8),(TYP7,8),(CNT7,16)
         DSGEN (FF8,8),(TYP8,8),(CNT8,16)
         DSGEN (FF9,8),(TYP9,8),(CNT9,16)
         DSGEN (FFA,8),(TYPA,8),(CNTA,16)
         DSGEN (LO,32),(HI,32)
         DSGEN (SUBID,8),(FLAG,8)                              @XL03162
*
IFCSUKNO CSECT
*
R0       EQU        0
R1       EQU        1
R2       EQU        2
R3       EQU        3
R4       EQU        4
R5       EQU        5
R6       EQU        6
R7       EQU        7
R8       EQU        8
R9       EQU        9
R10      EQU        10
R11      EQU        11
R12      EQU        12
R13      EQU        13
R14      EQU        14
R15      EQU        15
L0       EQU        0
L1       EQU        1
L2       EQU        2
L3       EQU        3
L4       EQU        4
L5       EQU        5
L6       EQU        6
L7       EQU        7
L8       EQU        8
L9       EQU        9
L10      EQU        10
L11      EQU        11
L12      EQU        12
L15      EQU   15                                              @XL03162
L16      EQU   16                                              @XL03162
L20      EQU   20                                              @XL03162
L24      EQU        24
L28      EQU        28
L30      EQU   30                                              @XL03162
L37      EQU   37                                              @XL03162
L41      EQU   41                                              @XL03162
L42      EQU   42                                              @XL03162
HEXFF    EQU   X'FF'
HEX0F    EQU   X'0F'
*
*        SPECIAL ROUTINES EDIT SECTION
CONVERT  ST    R5,SAVE5
         LH    R5,L0(R4)                PICK UP NUMBER TO CONVERT
         CVD   R5,WORK                  CONVERT IT
         UNPK   L0(L4,R3),WORK+L4(L4)    UNPACK IT INTO PRINT LINE
         MVZ   L3(L1,R3),L0(R3)         MOVE ON PROPER ZONE
         L     R5,SAVE5                 RESET REG
SKIPPER  BR    R14
*
SETTYP   CLI   L0(R4),HEXFF             IS COUNTER IN USE
         BE    SKIPPER
         SR    R15,R15                  NO STOP PRINT
         BR    R14                      RETURN
*
FREECORE STM    R14,R12,L12(R13)
         LR    R12,R13                  CHAIN SAVE AREAS
         LA    R13,FSAVE
         ST    R12,L4(R13)
         ST    R13,L8(R12)
         L     R3,FWDPTR                PICK UP FORWARD PTR
         ST    R3,L28(R12)              SET IT IN SAVED REG 2
         LH    R0,SIZE                  PICK UP SEZE
         LR    R1,R2                    SET POINTER
         FREEMAIN R,LV=(0),A=(1)
         LTR    R3,R3                   ANY MORE AREAS TO PRINT
         BZ    RETURN                   BR-NO
         LA    R5,ENTRIES+L10           SET POINTERS
         LA    R6,LABELS-L1             TO RELLOOP
         STM    R5,R6,R9PTR             SET THEM
RETURN   LR    R13,R12
         LM    R14,R12,L12(R13)         RESET REGS
         SR    R15,R15                  CLEAR REG FOR NO PRINT @XL03162
         BR    R14
*
SETDATE  OI    L3(R4),HEX0F             SET UP SIGN TO PACK
         UNPK  WORKA(L8),L0(L4,R4)      UNPACK VALUE
         MVZ   WORKA+L7(L1),WORKA       SET UP ZONE TO PRINT
         MVC   L0(L3,R3),WORKA+L5       MOVE DAY
         MVC   L5(L2,R3),WORKA+L3       MOVE YEAR
         BR    R14
WHATYPE  ST    R5,SAVE5                 SAVE REG               @XL03162
         L     R5,R9PTR+L4              GET POINTER TO CURRENT LABEL
         CLI   TYPE,X'70'               IS RECORD A MIH RECORDING
         BNE   CHKDDR                   BRANCH-NO              @XL03162
         MVI   FLAG,X'FF'               PUT IN FLAG TO SKIP TYPES
         MVC   L11(L30,R5),L10(R5)      BLANK OUT LABEL        @XL03162
         MVC   L11(L11,R5),MIHHDR       MOVE IN MIH LABEL      @XL03162
         MVC   L37(L3,R5),CUAHDR        MOVE IN CUA            @XL03162
         B     BACKB                    BRANCH TO RETURN       @XL03162
CHKDDR   CLI   TYPE,X'60'               IS RECORD A DDR RECORDING
         BNE   CHK3211                  CHK FOR A 3211         @XL03162
         MVI   FLAG,X'FF'               OUT IN FLAG TO SKIP TYPES
         MVC   L11(L30,R5),L10(R5)      BLANK LABEL            @XL03162
         MVC   L11(L3,R5),DDRHDR        MOVE IN 'DDR' HEADER   @XL03162
         MVC   L15(L7,R5),HDR1                                 @XL03162
         MVC   L37(L3,R5),CUAHDR        MOVE IN 'CUA' LABEL    @XL03162
         B     BACKB                    BRANCH TO RETURN       @XL03162
CHK3211  MVC   TYPE1(L1),TYPE           CHK TYPE FOR A 90      @XL03162
         NI    TYPE1,X'90'              CHK FOR AN MDR RECORD  @XL03162
         CLI   TYPE1,X'90'              IS THIS A POSSIBLE MDR @XL03162
         BNE   CHKSOFT                  NOT 3211-CHK FOR SOFTWARE
         CLI   SUBID,X'04'              CHK SUB ID FOR A 3211  @XL03162
         BNE   BLNKOUT                  NO-GO TO BLANKOUT CUA  @XL03162
         MVI   FLAG,X'FF'               PUT IN FLAG TO SKIP TYPES
         MVC   L11(L30,R5),L10(R5)      BLANK OUT LABEL        @XL03162
         MVC   L11(L4,R5),HDR3211       MOVE IN 3211           @XL03162
         MVC   L16(L7,R5),HDR1          MOVE IN 'RECORD'       @XL03162
         MVC   L37(L3,R5),CUAHDR        MOVE IN 'CUA'          @XL03162
         B     BACKB                    GO TO RETURN           @XL03162
CHKSOFT  MVC   TYPE1(L1),TYPE                                  @XL03162
         NI    TYPE1,X'40'              IS RECORD A SOFTWARE   @XL03162
         CLI   TYPE1,X'40'              IS THIS A SOFTWARE RECORD
         BNE   BLNKOUT                 NO-IT IS TRUE UNKNOWN   @XL03162
         MVC   L11(L30,R5),L10(R5)      BLANK LABEL            @XL03162
         MVC   L11(L8,R5),SOFTHDR       PUT IN SOFTWARE HEADER @XL03162
         MVC   L20(L7,R5),HDR1                                 @XL03162
BLNKOUT  BCTR  R3,0                     REDUCE PRINT BUFFER PTR
         MVC   L0(L6,R3),L6(R3)         BLANK OUT CUA          @XL03162
BACKB    L     R5,SAVE5                 RELOAD REG5            @XL03162
         BR    R14                      RETURN                 @XL03162
SOFTHDR  DC    CL8'SOFTWARE'                                   @XL03162
DDRHDR   DC    CL3'DDR'                                        @XL03162
CUAHDR   DC    CL3'CUA'                                        @XL03162
MIHHDR   DC    CL4'MIH '                                       @XL03162
HDR1     DC    CL7'RECORDS'                                    @XL03162
HDR3211  DC    CL4'3211'                                       @XL03162
TYPE1    DC    X'00'                                           @XL03162
WHERETO  ST    R5,SAVE5                 SAVE REG               @XL03162
         CLI   FLAG,X'FF'               IS THIS MIH OR DDR     @XL03162
         BCR   7,R14                    RETURN TO PRINT CLASSES
         SR    R15,R15                  CLEAR FOR NO PRINT     @XL03162
         LA    R5,LASTENT-4             NO RECORD TYPE COUNTERS PRINTED
         ST    R5,R9PTR                 UPDATE ENTRY TO END OF TABLE
         L     R5,SAVE5                 RELOAD REG             @XL03162
         BR    R14                      RETURN                 @XL03162
         EJECT
*
ENTRIES  DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
*
         DC         X'01'
         DC         X'000B8B00'
         LABEL      ''
*
         LINE  (42,1),(1,1),SKIP=2                             @XL03162
         HEX   YCUA,0,3B                                       @XL03162
         ROUTINE DUMM,WHATYPE                                  @XL03162
         LABEL      'SUMMARY OF UNKNOWN OR UNSUPPORTED RECORDS'
*
         LINE       ,(23,11),SKIP=1
         ROUTINE    DUMM,SKIPPER
         LABEL      'DAY YEAR   DAY YEAR'
         LINE       (23,11),(1,30),SKIP=2
         ROUTINE    LO,SETDATE
         ROUTINE    HI,SETDATE
         LABEL      'RECORD DATE RANGE'
*
         LINE       (9,21),(1,17)
         HEX        YCPU,0,2B
         HEX        YSER,0,3B
         LABEL      'MODEL -','SERIAL NO -'
*
         LINE       (25,1)
         ROUTINE    NOREC,CONVERT
         LABEL      'TOTAL NUMBER OF RECORDS='
*
         LINE
         ROUTINE    DUMM,SKIPPER
         ROUTINE DUMM,WHERETO                                  @XL03162
         LABEL      'CLASSES ENCOUNTERED(MAXIMUM OF 10)'
         LINE       (15,5),(1,1),SKIP=1
         HEX        TYP1,0,1B
         ROUTINE    CNT1,CONVERT
         ROUTINE     FF1,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP2,0,1B
         ROUTINE    CNT2,CONVERT
         ROUTINE     FF2,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP3,0,1B
         ROUTINE    CNT3,CONVERT
         ROUTINE     FF3,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP4,0,1B
         ROUTINE    CNT4,CONVERT
         ROUTINE     FF4,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP5,0,1B
         ROUTINE    CNT5,CONVERT
         ROUTINE     FF5,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP6,0,1B
         ROUTINE    CNT6,CONVERT
         ROUTINE     FF6,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP7,0,1B
         ROUTINE    CNT7,CONVERT
         ROUTINE     FF7,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP8,0,1B
         ROUTINE    CNT8,CONVERT
         ROUTINE     FF8,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYP9,0,1B
         ROUTINE    CNT9,CONVERT
         ROUTINE     FF9,SETTYP
         LABEL      'RECORD CLASS -'
         LINE
         HEX        TYPA,0,1B
         ROUTINE    CNTA,CONVERT
         ROUTINE     FFA,SETTYP
         LABEL      'RECORD CLASS -'
         LABEL      ''
LASTENT  LINE  (1,1)                                           @XL03162
         ROUTINE    TBLPTR,FREECORE
         LABEL      ''
         DC         X'FF'
         DC         X'000000000000'
*
WORK     DS         D
FSAVE    DS         18F
SAVE5    DS         F
SIZE     DC    H'87'                                           @XL03162
WORKA    DC    D'0'
ZERO     DC    F'0'
         DC         C'$'
LABELS   EQU        *
         LSTART
         END
