         TITLE 'I F C S A X X C  SUMMARY TABLE FOR A 3340'
*   MADRID/WINCHESTER SVS REL2 1.7                             @Y17ASRB
*A000600                                                       @Y17ASRB
***  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO    ***
         SPACE
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000)
         GBLC  &ITEM(3000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
***  BIN MACRO       BIN MACRO       BIN MACRO       BIN MACRO      ***
         SPACE
         MACRO
         BIN
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         GBLC  &ITEM(3000),&DSECT
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000),&NRENTS
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
.BIN2    AIF   (&SUB EQ 1).BIN2A
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2B
.BIN2A   AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2B   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
***  HEX MACRO       HEX MACRO       HEX MACRO       HEX MACRO      ***
         SPACE
         MACRO
         HEX
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000),&NRENTS
         GBLC  &ITEM(3000),&DSECT
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
         MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
***  LINE MACRO      LINE MACRO      LINE MACRO      LINE MACRO     ***
         SPACE
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         SPACE 3
***  ROUTINE MACRO   ROUTINE MACRO   ROUTINE MACRO   ROUTINE MACRO  ***
         SPACE
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
***  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO    ***
         SPACE
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR,&INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         EJECT
***  LSTART MACRO    LSTART MACRO    LSTART MACRO    LSTART MACRO   ***
         SPACE
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLC &LABELS(2000)
         GBLA  &LBLCTR(100)
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &NDX,&CTR
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 3
***  LINEND MACRO    LINEND MACRO    LINEND MACRO    LINEND MACRO   ***
         SPACE
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         AIF   (&NRENTS EQ 0).NORENTS   TEST FOR NO COUNT
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
.NORENTS ANOP
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         EJECT
***  SUM MACRO       SUM MACRO       SUM MACRO       SUM MACRO      ***
         SPACE
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(3000),&SHIFT(3000)
         GBLC  &ITEM(3000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&IBITS EQ 1).FORM1      TEST FOR OLD FORM
         AIF   ('&MASK' NE '').FORM1    TEST FOR MASK
         AIF   (&IBITS+&ISHIFT GT 8).MSG     TEST FOR MORE THAN EIGHT
         DC    AL.1(0),AL.3(&ISHIFT),AL.4(&IBITS)
         DC    AL1(0)
         AGO   .ITEM
.MSG     MNOTE '**BITS GREATER THAN 8**'
         MEXIT
.FORM1   ANOP
         DC    AL1(0)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         SPACE 3
***  SPECIAL MACRO   SPECIAL MACRO   SPECIAL MACRO   SPECIAL MACRO  ***
         SPACE
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCSAXXC'
&DSECT   SETC  'S3340'
         SPACE
IFCSAXXC CSECT
         SPACE
*
*      THE FOLLOWING DSECT DESCRIBES THE HEADER FOR AN OBR OR MDR REC.
*
         SPACE
S3340    DSECT
         SPACE
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,8),(SW1,8)
         DSGEN (RECID,8),(SW2,8),(RECNT,8),(SPARE1,8)
         DSGEN (DAY,32),(HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24),(CPUID,16),(MCEL,16)
         SPACE 2
*
*      THE FOLLOWING DESCRIBES AN OBR(UNIT CHECK) RECORD
*
         SPACE
         DSGEN (JOBID,64),(FAILCCW,64),(CSW,64)
         DSGEN (DDCNT,8),(SECUA,24),(DEVTYP1,16),(DEVTYP2,16)
         DSGEN (SDRCNT,8),(CUA,24),(IORET,16),(SNSCT,16)
         DSGEN (VOLID,48),(SPARE3,16)
         DSGEN (LASTSK,64),(HOMADR,32),(SPARE4,32)
         DSGEN (SNB,1,0,23,0,7)
         SPACE 4
*
*      THE FOLLOWING DESCRIBES AN MDR RECROD
*
         SPACE
         ORG   JOBID
         SPACE
         DSGEN (MCUA,16),(MVOLID,48)
         DSGEN (MSNB,1,0,23,0,7)
         EJECT
IFCSAXXC CSECT
         SPACE
         USING S3340,R2
         USING *,R9
         SPACE
         DC    A(ENTRIES)
         DC    A(PEDIT)
REG8     DC    F'0'
SCSIZE   DC    H'1975'                                         @Z427VLS
         SPACE
***********************************************************************
*                                                                     *
*      THIS ENTIRE MODULE IN SUPPORT OF XL03130                       *
*                                                                     *
***********************************************************************
         SPACE 3
R0       EQU   0                       R
R1       EQU   1                        E
R2       EQU   2                         G
R3       EQU   3                          I
R4       EQU   4                           S
R5       EQU   5                            T
R6       EQU   6                             E
R7       EQU   7                              R
R8       EQU   8
R9       EQU   9                                E
R10      EQU   10                                Q
R11      EQU   11                                 U
R12      EQU   12                                  A
R13      EQU   13                                   T
R14      EQU   14                                    E
R15      EQU   15                                     S
         EJECT
L0       EQU   0                       EQUATES
L1       EQU   1
L2       EQU   2
L3       EQU   3                          FOR
L4       EQU   4
L5       EQU   5
L6       EQU   6                              LENGTHS
L7       EQU   7
L8       EQU   8
L9       EQU   9                                 AND
L10      EQU   10
L11      EQU   11
L12      EQU   12                                   DISPLACEMENTS
L13      EQU   13
L14      EQU   14
L15      EQU   15
L16      EQU   16
L17      EQU   17
L18      EQU   18
L19      EQU   19
L20      EQU   20
L21      EQU   21
L23      EQU   23
L24      EQU   24                                              @Z40NIVS
L25      EQU   25                                              @Z40NIVS
L26      EQU   26
L27      EQU   27                                              @Z40NIVS
L28      EQU   28
L29      EQU   29
L42      EQU   42                                              @Z427VLS
L40      EQU   40                                              @Z427VLS
L46      EQU   46
L47      EQU   47                                              @Z40NIVS
L48      EQU   48                                              @Z40NIVS
L49      EQU   49                                              @Z40NIVS
L50      EQU   50                                              @Z40NIVS
L432     EQU   432                                             @Z40NIVS
L459     EQU   459                                             @Z40NIVS
L1409    EQU   1409                                            @Z40NIVS
         SPACE 2                                               @Z40NIVS
COLON    EQU   C':'                                            @Z40NIVS
BASEDISP EQU   X'FD'                                           @Z40NIVS
BLANK    EQU   C' '                                            @Z40NIVS
SORTFLG  EQU   X'80'                                           @Z40NIVS
SLASH    EQU   C'/'                                            @Z40NIVS
ONE      EQU   1                                               @Z40NIVS
TWO      EQU   2                                               @Z40NIVS
THREE    EQU   3                                               @Z40NIVS
FOUR     EQU   4                                               @Z40NIVS
FIVE     EQU   5                                               @Z40NIVS
         SPACE 2
H01      EQU   X'01'
H10      EQU   X'10'
H30      EQU   X'30'
H40      EQU   X'40'
H50      EQU   X'50'
H80      EQU   X'80'
H90      EQU   X'90'
HE0      EQU   X'E0'
CLRSGN   EQU   X'F0'
NOCARRY  EQU   12                      COND CODE AFTER 'AL'= NO
*                                       CARRY(OVERFLOW) INTO BIT POS 32
         EJECT
***********************************************************************
*                                                                     *
*      ALL THE FOLLOWING ROUTINES ARE EXECUTED,VIA THE                *
*                                                                     *
*        'SPECIAL' MACRO,TO KEEP COUNTS AND INFORMATION FOR ANY       *
*                                                                     *
**    ONE C.U. SUBSYSTEM  NOTE: R3-PTR TO COUNTER              @Z40NIVS
*                                                                     *
***********************************************************************
         SPACE 3
*
*      THE FOLLOWING DETERMINES HIGH AND LOW DATE FOR THIS SUMMARY
*
XDATE1   STM   R5,R8,XSAVE1            SAVE REGS
         CLC   DAY(L4),ZERO            IS DATE ZERO
         BE    RETURN1                 YES - RETURN
         CLC   L0(L4,R3),ZERO          IS LOW-DATE-COUNTER ZERO
         BNE   XDATE2                  NO - BR TO CK
         MVC   L0(L4,R3),DAY           MOVE DATE TO LOW-DATE-COUNTER
         SPACE
XDATE2   CLC   DAY(L4),L0(R3)          IS DATE LOWER THEN LOW-DATE-CTR
         BL    SAVELOW                 YES - BR TO MOVE LOW DATE
         SPACE
         CLC   DAY(L4),L4(R3)          IS DATE HIGHER THEN HIGH-DATE-CT
         BNH   RETURN1                 NO - RETURN
         MVC   L4(L4,R3),DAY           MOVE HIGH DATE TO CTR
         B     RETURN1                 RETURN
         SPACE
SAVELOW  MVC   L0(L4,R3),DAY           MOVE LOWER DATE TO LOW-DATE-CNTR
         B     RETURN1                 RETURN
         EJECT
*
*      THE FOLLOWING CHECKS THE TYPE OF RECORD,SAVES THE RECORD TYPE
*        AND DEVICE TYPE,AND SETS POINTERS TO BRANCH AROUND SOME
*        'SPECIAL' ROUTINES IF THIS IS AN MDR RECORD.
*
ISMDR    STM   R5,R8,XSAVE1            SAVE REGS
         SR    R6,R6                   CLEAR
         SR    R8,R8                         REGS
         USING SUMRECT,R3          GET ADDRESSABILITY          @Z40NIVS
         LA    R5,TVOLID1          PNT TO VOLID1 SUM AREA      @Z40NIVS
         ST    R5,VOLPTR           SAVE PNT TO VOLID1          @Z40NIVS
         LA    R5,FLTSYM1          PNT TO FLT SUM AREA         @Z40NIVS
         ST    R5,FLTPTR           SAVE PNTR                   @Z40NIVS
         DROP  R3                                              @Z40NIVS
         LR    R5,R3               LOAD REG 5 SUM AEA PNTR     @Z40NIVS
         A     R5,RECTST4          ADD PROPER DEVICE INCR      @Z40NIVS
         LA    R5,L27(R5)          ADD REC LENGTH              @Z40NIVS
         ST    R5,RECTSTP          SAVE DEV REC PNTR           @Z40NIVS
         ST    R3,RECTSTS          SAVE SUM AREA PNTR          @Z40NIVS
         MVC   L0(L27,R3),L0(R5)   MOVE DEV REC TO SUM         @Z40NIVS
         LR    R5,R3                   LOAD ADDR OF SUMMARY COUNTERS
         MVC   L2(L1,R5),CLASRC        SAVE CLASS/SOURCE OF RECORD
         SPACE
         TM    CLASRC,H90              IS THIS AN MDR RECORD
         BO    TYPMDR                  YES - BR TO ADD TO COUNTER
         SPACE
         MVC   L25(L2,R5),CUA+ONE  MOVE CUA TO SUM REC         @Z40NIVS
         MVC   L3(L2,R5),DEVTYP2       SAVE DEVICE CODE FROM OBR REC
         B     RETURN1                 RETURN
         SPACE
TYPMDR   MVC   L25(L2,R5),MCUA     MOVE CUA TO SUM REC         @Z40NIVS
         BAL   R8,ADDUP            GO ADD TO COUNTER           @Z40NIVS
         LA    R8,DOVOL-L6             LOAD ADDR OF SPECIAL FOR VOL CNT
         ST    R8,REG8                 STORE ADDR FOR EREP CONTROL
         MVC   L1(L1,R5),RECID         SAVE RECORD ID FROM MDR REC
         B     RETURN1                 RETURN
         SPACE 2
*
*      THE FOLLOWING CHECKS THIS OBR RECORD FOR EQUIPMENT CHECKS
*        ON THE DRIVE OR ATTACHMENT(CU/CTRLR),AND ADDS TO THE
*        APPROPRIATE COUNTERS.
*
EQIPCK   STM   R5,R8,XSAVE1            SAVE REGS                 XM3751
         TM    SNB00,H10               IS THIS AN EQUIPMENT CK   XM3751
         BNO   RETURN1                 NO - RETURN               XM3751
         SPACE
         SR R6,R6                      CLEAR                     XM3751
         SR    R8,R8                         REGS                XM3751
         LR    R5,R3                   LOAD COUNTER ADDR         XM3751
         TM    SNB70,H30               IS THIS A FMT 3(EQ CK-ATT)XM3751
         BO    EQIPCKAT                YES - BR TO ADD TO CNTR   XM3751
         SPACE
         TM    SNB70,H10               IS THIS A FMT 1(EQ CK-DRV)XM3751
         BNO   EQIPCKAT                NO - IT MUST BE ATTCH-ADD XM3751
*                                       TO COUNTER               XM3751
         LA    R5,L2(R5)               BUMP PTR TO DRV EQ CK CTR XM3751
         BAL   R8,ADDUP                GO ADD TO COUNT           XM3751
         B     RETURN1                 RETURN                    XM3751
         SPACE
EQIPCKAT BAL   R8,ADDUP                GO ADD TO COUNT           XM3751
         B     RETURN1                 RETURN                    XM3751
         SPACE 2
*
*      THE FOLLOWING CHECKS FOR DATA CHECK CORRECTABLE,RETRY,OR
*        PERMANENT,IF THIS OBR RECORD FITS THOSE CONDITIONS,THE
*        APPROPRIATE COUNTERS ARE ADDED TO.
*
DATACK   STM   R5,R8,XSAVE1            SAVE REGS
         SR    R6,R6                         REGS
         SR    R8,R8                   CLEAR
         LR    R5,R3                   LOAD COUNTER ADDRESS
         TM    SNB70,H50               IS THIS FMT 5(DATA CK CORRCT'BL)
         BO    DATACKC                 YES - BR TO ADD TO COUNTER
         SPACE
         TM    SNB70,H40               IS THIS FMT 4
         BNO   RETURN1                 NO - RETURN THIS ISNT DATA CK
         SPACE
         TM    SWITCHES+1,X'40'      IS THIS DATA CK TEMP?     @XA21363
         BNO   DATACKP               NO-BR TO ADD TO PERM CNTR @XA21363
         SPACE
         LA    R5,L2(R5)               THIS IS DATA CK-RETRY(BUMP PTR)
         BAL   R8,ADDUP                GO ADD TO COUNTER
         B     RETURN1                 RETURN
         SPACE
DATACKP  LA    R5,L4(R5)               BUMP PTR TO CORRECT COUNTER
         BAL   R8,ADDUP                GO ADD TO COUNT
         B     RETURN1                 RETURN
         SPACE
DATACKC  BAL   R8,ADDUP                GO ADD TO COUNTER
         B     RETURN1                 RETURN
         EJECT
**                                                             @Z40NIVS
**       ROUTINE TO SUM INTO THE SPECIFIC SUM AREA FOR DEVICE  @Z40NIVS
**                                                             @Z40NIVS
RECTST0  STM   R5,R8,XSAVE1        SAVE REG                    @Z40NIVS
         TM    CLASRC,H90          TEST TYPE RECORD            @Z40NIVS
         BO    RECTST3             BRANCH IF MDR               @Z40NIVS
         IC    R7,CUA+TWO          PICK UP OBR CUA             @Z40NIVS
RECTST1  SLL   R7,L28              CLR HIGH BYTES              @Z40NIVS
         SRL   R7,L28              IN REG7                     @Z40NIVS
         LTR   R7,R7               TEST REG7 FOR ZERO          @Z40NIVS
         BZ    RECTST2             BRANCH FOR ZERO INCRMT      @Z40NIVS
         LA    R5,L27              LOAD REG5 WITH INCRMT       @Z40NIVS
         MR    R6,R5               SET REG7 TO SUM AREA        @Z40NIVS
RECTST2  ST    R7,RECTST4          SAVE INCRMT                 @Z40NIVS
         B     RETURN1             RETURN                      @Z40NIVS
RECTST3  IC    R7,MCUA+ONE         PICK UP MDR CUA             @Z40NIVS
         B     RECTST1             GO TO CLEAR HIGH BYTES      @Z40NIVS
**                                                             @Z40NIVS
**      SPECIAL TO RESTORE SUM REC TO PROPER DEV AREA          @Z40NIVS
**                                                             @Z40NIVS
RESTOR   STM   R5,R8,XSAVE1        SAVE WORK REGS              @Z40NIVS
         L     R5,RECTSTS          PICK UP PNTR TO SUM AREA    @Z40NIVS
         L     R6,RECTSTP          PICK UP PNTR TO DEV AREA    @Z40NIVS
         MVC   L0(L27,R6),L0(R5)   MOVE REC AND STORE          @Z40NIVS
         B     RETURN1             RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       THE FOLLOWING TOTALS SEEK CHECKS -                    @Z40NIVS
**             PERMANENT AND RETRY                             @Z40NIVS
*
SEEKCK   STM   R5,R8,XSAVE1            SAVE REGS
         SR    R6,R6                   CLEAR
         SR    R8,R8                         REGS
         LR    R5,R3                   LOAD ADDR OF COUNTER
         TM    SNB00,H01               IS THIS A SEEK CHECK
         BNO   RETURN1                 NO - RETURN
         SPACE
         TM    SNB10,H80               IS THIS SEEK CK PERMANENT
         BO    SEEKPM                  YES - BR TO ADD TO CNTR
         BAL   R8,ADDUP                NO-ADD TO SEEK CK-RETRY COUNTER
         B     RETURN1                 RETURN
         SPACE
SEEKPM   LA    R5,L2(R5)               BUMP CNTR PTR TO PERM CNTR
         BAL   R8,ADDUP                ADD TO SEEK CK-PERM COUNTER
         B     RETURN1                 RETURN
         SPACE 2
*
*      THE FOLLOWING KEEPS COUNTS FOR THE 'SUMMARY BY VOLID'
*
TVOLID   STM   R5,R8,XSAVE1            SAVE REGS
         SR    R6,R6                   CLEAR
         SR    R7,R7                         WORK
         SR    R8,R8                              REGS
         L     R3,VOLPTR           LOAD 3 FROM PNTR AREA       @Z40NIVS
         LR    R5,R3                   LOAD ADDR OF 1ST SET OF VOL CTRS
         SPACE
         TM    CLASRC,H30              IS THIS AN OBR RECORD
         BO    OVOLID                  YES - BR TO MAKE COUNTS
         SPACE
         CLC   ZERO(L6),MVOLID         NO-(ITS MDR) IS VOLID ZEROS
         BE    RETURN1                 YES - RETURN - NO COUNTS
         SPACE
         LA    R7,L50              LOAD NUM OF ALLOWABLE VOLIDS@Z40NIVS
MVOLID1  CLC   L0(L6,R5),MVOLID        IS THIS VOLID = TO ONE IN CNTR
         BE    MVOLID3                 YES - BR TO ADD TO COUNTERS
         SPACE
MVOLID6  CLC   L0(L6,R5),ZERO      IS VOLID IN THE CNTR ZERO   @Z40NIVS
         BE    MVOLID2                 YES - BR TO RECORD COUNTS
         SPACE
         LA    R5,ENTRYLN(R5)          BUMP COUNTER ADDR TO NEXT ENTRY
         BCT   R7,MVOLID1              BR TO CHECK THIS ENTRY
         EJECT
MVOLID2  MVC   L0(L6,R5),MVOLID        MOVE VOLID TO COUNTER
         MVC   L25(L2,R5),MCUA     MOVE DEVICE FROM MDR        @Z40NIVS
         B     MVOLID5             GO TO SUM NEW CNTR          @Z40NIVS
         SPACE
MVOLID3  CLC   L25(L2,R5),MCUA     TEST DEVICE                 @Z40NIVS
         BNE   MVOLID6             UNIT NOT EQ GET NEW CNTR    @Z40NIVS
MVOLID5  LA    R5,L6(R5)           BUMP PNTR TO SK CNT         @Z40NIVS
         MVC   READYA(L2),MSNB160      MOVE SEEK COUNT TO WORK AREA
         LH    R6,READYA               LOAD SEEK COUNT FROM RECORD
         XC    READYA(L8),READYA       CLEAR WORK AREA
         MVC   READYA(L4),L0(R5)       MOVE SEEK COUNT FROM COUNTER
         A     R6,READYA               ADD SEEKS
         ST    R6,READYA               STORE NEW TOTAL IN WORK AREA
         MVC   L0(L4,R5),READYA        MOVE TOTAL TO COUNTER
         LA    R5,L4(R5)               BUMP COUNTER PTR TO BYTES READ
         SPACE
         MVC   READYA(L4),MSNB80       MOVE BYTES READ FROM RECORD
         L     R6,READYA               LOAD BYTES READ
         XC    READYA(L8),READYA       CLEAR WORK AREA
         MVC   READYA(L4),L2(R5)       MOVE BYTES READ FROM COUNTER
         AL    R6,READYA               ADD BYTES READ
         BC    NOCARRY,MSAVBR          BR IF THERE WAS NOT AN OVERFLOW
*                                       IF THERE WAS AN OVERFOLW
         LH    R7,L0(R5)               LOAD OVERFLOW COUNTER
         LA    R7,L1(R7)               BUMP OVBRFLOW COUNT BY ONE
         STH   R7,L0(R5)               STORE UPDATED OVERFLOW COUNT
*
MSAVBR   ST    R6,READYA               STORE TOTAL IN WORK AREA
         MVC   L2(L4,R5),READYA        MOVE TOTAL TO COUNTERS
         SPACE
*        THE FOLLOWING DETERMINES IF OVERRUN COUNTS ARE FOR
*        CHANNEL 'A' & 'B' OR CHANNEL 'C' & 'D',AND UPDATES THE
*        APPROPRIATE COUNTERS
         CLI   MSNB180,H80             ARE COUNTS FOR CHAN C & D
         BE    MCHANCD                 YES - BR TO SET PTR
         LA    R5,ABCNTR(R3)           SET POINTER TO 'A''B' CNTRS
         B     MVOLID4                 BR TO TOTAL COUNTS
         SPACE
MCHANCD  LA    R5,CDCNTR(R3)           SET PTR TO CHAN 'C'&'D' COUNTERS
MVOLID4  SR    R6,R6                   CLEAR REG
         IC    R6,MSNB200              INSERT OVERRUN-CHAN A/C CMND
         AH    R6,L0(R5)               ADD CURRENT TOTAL TO THIS COUNT
         STH   R6,L0(R5)               STORE NEW TOTAL
         SPACE
         SR    R6,R6                   CLEAR REG
         IC    R6,MSNB210              INSERT DATA OVERRUNS FOR A/C
         AH    R6,L2(R5)               ADD CURRENT TOTAL TO THAT COUNT
         STH   R6,L2(R5)               STORE NEW TOTAL
         EJECT
         SR    R6,R6                   CLEAR REG
         IC    R6,MSNB220              INSERT CHAN B/D CMND OVERRUNS
         AH    R6,L4(R5)               ADD CURRENT TOTAL TO THAT COUNT
         STH   R6,L4(R5)               SAVE NEW TOTAL
         SPACE
         SR    R6,R6                   CLEAR REG
         IC    R6,MSNB230              INSERT CHAN B/D DATA OVERRUNS
         AH    R6,L6(R5)               ADD CURRENT TOTAL TO THAT COUNT
         STH   R6,L6(R5)               SAVE NEW TOTAL
         B     RETURN1                 RETURN
         SPACE 2
*        THE FOLLOWING KEEPS READ AND SEEK ERROR COUNTS FROM
*        OBR RECORDS
         SPACE
OVOLID   CLC   ZERO(L6),VOLID          IS VOLID IN RECORD ZERO
         BE    RETURN1                 YES - RETURN
         SPACE
         LA    R7,L50              LOAD NUM OF ALLOWABLE VOLID @Z40NIVS
OVOLID1  CLC   L0(L6,R5),VOLID         IS VOLID=TO ONE IN COUNTER
         BE    OVOLID3                 YES - BR TO MAKE COUNTS
         SPACE
OVOLID4  CLC   L0(L6,R5),ZERO      IS VOLID IN CNTR=TO ZERO    @Z40NIVS
         BE    OVOLID2                 YES - BR TO INIT CNTR
         SPACE
         LA    R5,ENTRYLN(R5)          BUMP COUNTER ADDR TO NEXT ENTRY
         BCT   R7,OVOLID1              BR TO CHECK THIS ENTRY
         SPACE
OVOLID2  MVC   L0(L6,R5),VOLID         MOVE VOLID TO COUNTER
         MVC   L25(L2,R5),CUA+ONE  MOVE CUA TO VOL CNTR        @Z40NIVS
         B     OVOLID5             GO TO SUM NEW CNTR          @Z40NIVS
         SPACE 1                                               @Z40NIVS
OVOLID3  CLC   L25(L2,R5),CUA+ONE  IS DEVICE EQUAL             @Z40NIVS
         BNE   OVOLID4             BRCH NO DUP                 @Z40NIVS
OVOLID5  LA    R5,L16(R5)          BUMP PTR TO SEEK ERR CNT    @Z40NIVS
         TM    SNB70,H50               IS THIS A FMT 5
         BO    OCORDATA                YES-BR TO ADD TO CORR DATA CK
         SPACE
         TM    SNB70,H40               IS THIS A FMT 4
         BO    OUNCDATA                YES-BR TO CK IF PERM ERROR
         SPACE
OCKSEEK  TM    SNB00,H01               IS THIS A SEEK CK ERROR
         BNO   RETURN1                 NO-RETURN
         LH    R7,L0(R5)               LOAD SEEK CK CNTR
         LA    R7,L1(R7)               ADD ONE TO COUNT
         STH   R7,L0(R5)               SAVE UPDATED SEEK CK COUNTER
         B     RETURN1                 RETURN
         SPACE
OUNCDATA TM    SNB10,H80               WAS THIS UNCORR DATA CK PERM
         BO    OCKSEEK                 YES-DONT ADD TO RETRY CNT
         LH    R7,L2(R5)               LOAD RETRY READ COUNTER
         LA    R7,L1(R7)               ADD ONE TO COUNT
         STH   R7,L2(R5)               SAVE UPDATED COUNTER
         B     OCKSEEK                 BR TO CK FOR SEEK ERROR
         SPACE
OCORDATA LH    R7,L4(R5)               LOAD CORR DATA CK COUNTER
         LA    R7,L1(R7)               ADD ONE TO COUNTER
         STH   R7,L4(R5)               SAVE UPDATED COUNTER
         B     OCKSEEK                 BR TO CHECK FOR SEEK ERROR
         SPACE 2
*
*      THE FOLLOWING ADDS ONE TO ANY SUMMARY COUNTER
*
ADDUP    LH    R6,L0(R5)               LOAD SUMMARY COUNTER
         LA    R6,L1(R6)               ADD ONE TO COUNTER
         STH   R6,L0(R5)               SAVE COUNTER
         LA    R5,L2(R5)               BUMP SUMMARY COUNTER POINTER
         BR    R8                      RETURN TO MAIN LINE
         SPACE 2                                               @Z40NIVS
**                                                             @Z40NIVS
**       SPECIAL TO SUM INTO THE FAULT SYMPTOM COUNTERS        @Z40NIVS
**                                                             @Z40NIVS
TFAULT0  STM   R5,R8,XSAVE1        SAVE WORK REG               @Z40NIVS
         TM    CLASRC,H30          TYPE REC AN OBR             @Z40NIVS
         BNO   RETURN1       EXIT
         TM    SNB70,H50     FORMAT 5?
         BO    RETURN1       YES, DON'T SUM
TFAULT1  L     R3,FLTPTR           PNT TO FLT SUM AREA         @Z40NIVS
         LA    R6,L1               SET OCCUR INCREMENT         @Z40NIVS
         LA    R7,L50              SET TO NUM OF SUMRECORD     @Z40NIVS
TFAULT2  CLC   L0(L2,R3),SNB220    IS FLT CODE EQ SUM REC      @Z40NIVS
         BE    TFAULT3             YES GO TEST CUA             @Z40NIVS
         CLC   L0(L2,R3),ZEROS     IS SUM REC ZERO             @Z40NIVS
         BE    TFAULT9             GO TO ENTER NEW REC         @Z40NIVS
         B     TFAULT8             GO TO PICK UP NEXT REC      @Z40NIVS
TFAULT3  CLC   L2(L2,R3),CUA+ONE   IS CUA EQ TO SUM REC        @Z40NIVS
         BE    TFAULT5             YES GO TO SUM               @Z40NIVS
TFAULT9  CLC   L2(L2,R3),ZEROS     CUA EQUAL TO ZERO           @Z40NIVS
         BE    TFAULT4             IF YES REC IS EMPTY         @Z40NIVS
TFAULT8  LA    R3,L40(R3)          STEP TO NEXT COUNTER        @Z427VLS
         BCT   R7,TFAULT2          GO TRY AGAIN                @Z40NIVS
         B     RETURN1             ALL ENTRIES FULL            @Z40NIVS
TFAULT4  MVC   L0(L2,R3),SNB220    MOVE FLT CODE TO REC        @Z40NIVS
         MVC   L2(L2,R3),CUA+ONE   MOVE CUA TO SUM REC         @Z40NIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
TFAULT5  MVC   TFAULT7(L4),L4(R3)  INCREMENT                   @Z40NIVS
         A     R6,TFAULT7          NUM OF                      @Z40NIVS
         ST    R6,TFAULT7          OCCUR                       @Z40NIVS
         MVC   L4(L4,R3),TFAULT7   BY ONE                      @Z40NIVS
         CLC   L8(L4,R3),DAY       IS SUM DAY LATER RECDAY     @Z40NIVS
         BH    RETURN1             SUM DAY HIGH RETURN         @Z40NIVS
         CLC   L8(L4,R3),DAY       IS SUMDAY EQ RECDAY         @Z40NIVS
         BE    TFAULT6             GO TEST TIME DAY EQ         @Z40NIVS
         MVC   L8(L8,R3),DAY       MOVE IN NEW DAY/TIME        @Z40NIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
         B     RETURN1             REC UPDATED                 @Z40NIVS
TFAULT6  CLC   L12(L4,R3),HOUR     TEST SUM DAY/REC DAY        @Z40NIVS
         BNL   RETURN1             SUM REC HIGH OR EQ          @Z40NIVS
         MVC   L12(L4,R3),HOUR     MOVE IN NEW TIME TO SUM     @Z40NIVS
         MVC   L16(L24,R3),SNB00   MOVE 24 SENSE BYTES         @Z427VLS
         SPACE 2                                               @Z40NIVS
**                                                             @Z40NIVS
*      THE FOLLOWING RETURNS TO EREP CONTROL
*
RETURN1  LM    R5,R8,XSAVE1            RESTORE REGS
         BR    R14                     RETURN TO EREP CONTROL
         EJECT
*
*      THE FOLLOWING STORAGE CONSTANTS ARE USED
*        IN THE PREVIOUS ROUTINES
*
         SPACE
VOLPTR   DC    F'0'                PNTR TO VOLID SUM AREA      @Z40NIVS
         SPACE 1                                               @Z40NIVS
FLTPTR   DC    F'0'                PNTR TO FLTSYM SUM AREA     @Z40NIVS
         SPACE 1                                               @Z40NIVS
READYA   DC    D'0'                    WORK AREA
         SPACE
ZERO     DC    2F'0'                   ZERO'S - USED FOR COMPARES
         SPACE
XSAVE1   DC    5F'0'                   REGISTER SAVE AREA
         EJECT
*                                                                     *
*      THE FOLLOWING 'SPECIAL' AND 'SUM' MACRO'S KEEP TOTAL COUNTS    *
*        FOR ANY ONE CUA                                              *
*                                                                     *
ENTRIES  DS    0F
         SPECIAL RECTST0,00000000,SPACE=0                      @Z40NIVS
         SPECIAL   XDATE1,00000000,SPACE=4       FROM-TO DATE
         SPECIAL   ISMDR,00000000,SPACE=3        SAVE REC CLAS/CK MDR
         SUM   SNB02                             ADD TO BUS OUT PARITY
         SPECIAL   EQIPCK,00000000,SPACE=2       CK FOR EQIP CK  XM3751
         SPECIAL   DATACK,00000000,SPACE=3       CK FOR DATA CHECKS
         SPECIAL   SEEKCK,00000000,SPACE=2       CK FOR SEEK CHECKS
         SUM   SNB05                             ADD TO OVERRUN
         SPACE
DOVOL    EQU   *
         SPECIAL   TVOLID,00000000,SPACE=12      ADD TO VOLID SUMRY CTS
         SPECIAL RESTOR,00000000,SPACE=0                       @Z40NIVS
         SPACE 1                                               @Z40NIVS
         SPECIAL TFAULT0,0,SPACE=20 SUM FOR SYMPTOM            @Z427VLS
         SPACE 1                                               @Z40NIVS
         DC    XL1'FF'                           END OF SUMMARY COUNTNG
         EJECT
PEDIT    DS    0F
&DSECT   SETC  'T3340'
&CSECT   SETC  'PEDIT'
         SPACE
         USING *,R9
         USING T3340,R2
         SPACE
         DC    A(PENTRY)
         DC    C'IFCSAXXC'
         SPACE
YR9PTR   DS    F
YLABEL   DS    F
         SPACE 2
***********************************************************************
*                                                                     *
*      THE FOLLOWING DSECT DESCRIBES COUNTERS USED TO TOTAL INCIDENTS *
*      PERTAINING TO ANY ONE PHYSICAL ADDRESS. INDIVIDUAL ENTRIES ARE *
**     MADE FOR UP TO 50 VOLUME LABELS,AFTER 50,THE REMAINING ARE     *
**     COMPILED IN THE 51ST ENTRY.AFTER THE 51ST ENTRY,THERE ARE      *
*      COUNTERS FOR TWO AND FOUR CHANNEL SWITCH OVERRUNS. IF A HEX'80'*
*      IS FOUND IN SENSE BYTE 18 OF THE MDR RECORD,COUNTS ARE MADE    *
*      FOR CHANNEL 'C' AND 'D'. IF A HEX'00' IS FOUND,COUNTS ARE KEPT *
*      FOR CHANNEL 'A' AND 'B'.                                       *
***********************************************************************
         SPACE
T3340    DSECT
         SPACE 2
         DS    3H
         SPACE
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         SPACE
         DSGEN (TDAY1,32),(TDAY2,32)
         SPACE
SUMRECT  DSGEN (TSTAT,16),(TRECLS,8),(TYPDEV,16),(TEXTRA,8)    @Z40NIVS
         SPACE
         DSGEN (TBUSOPA,16)
         SPACE
         DSGEN (TEQIPATH,16),(TEQIPDRV,16)                       XM3751
         SPACE
         DSGEN (TDACKCOR,16),(TDACKRET,16),(TDACKPRM,16)
         SPACE
         DSGEN (TSEEKR,16),(TSEEKP,16)
         SPACE
         DSGEN (TOVERRN,16),(TCUA,24)                          @Z40NIVS
         SPACE
SUMREC0  DS    27C                                             @Z40NIVS
SUMREC1  DS    27C                                             @Z40NIVS
SUMREC2  DS    27C                                             @Z40NIVS
SUMREC3  DS    27C                                             @Z40NIVS
SUMREC4  DS    27C                                             @Z40NIVS
SUMREC5  DS    27C                                             @Z40NIVS
SUMREC6  DS    27C                                             @Z40NIVS
SUMREC7  DS    27C                                             @Z40NIVS
SUMREC8  DS    27C                                             @Z40NIVS
SUMREC9  DS    27C                                             @Z40NIVS
SUMRECA  DS    27C                                             @Z40NIVS
SUMRECB  DS    27C                                             @Z40NIVS
SUMRECC  DS    27C                                             @Z40NIVS
SUMRECD  DS    27C                                             @Z40NIVS
SUMRECE  DS    27C                                             @Z40NIVS
SUMRECF  DS    27C                                             @Z40NIVS
         EJECT
*
*      THE FOLLOWING COUNTERS FOR VOLID SUMMARY
*
         SPACE
         DSGEN (TVOLID1,48),(TSEEK1,32)
         DSGEN (TBTRDO1,16),(TBYTRD1,32)
         DSGEN (TSEKER1,16),(TUNDTA1,16)
         DSGEN (TCRDTA1,16),(SUPBUF1,16),(TVCUA,24)            @Z40NIVS
TVOLID2  DS    27C                                             @Z40NIVS
TVOLID3  DS    27C                                             @Z40NIVS
TVOLID4  DS    27C                                             @Z40NIVS
TVOLID5  DS    27C                                             @Z40NIVS
TVOLID6  DS    27C                                             @Z40NIVS
TVOLID7  DS    27C                                             @Z40NIVS
TVOLID8  DS    27C                                             @Z40NIVS
TVOLID9  DS    27C                                             @Z40NIVS
TVOLID10 DS    27C                                             @Z40NIVS
TVOLID11 DS    27C                                             @Z40NIVS
TVOLID12 DS    27C                                             @Z40NIVS
TVOLID13 DS    27C                                             @Z40NIVS
TVOLID14 DS    27C                                             @Z40NIVS
TVOLID15 DS    27C                                             @Z40NIVS
TVOLID16 DS    27C                                             @Z40NIVS
TVOLID17 DS    27C                                             @Z40NIVS
TVOLID18 DS    27C                                             @Z40NIVS
TVOLID19 DS    27C                                             @Z40NIVS
TVOLID20 DS    27C                                             @Z40NIVS
TVOLID21 DS    27C                                             @Z40NIVS
TVOLID22 DS    27C                                             @Z40NIVS
TVOLID23 DS    27C                                             @Z40NIVS
TVOLID24 DS    27C                                             @Z40NIVS
TVOLID25 DS    27C                                             @Z40NIVS
TVOLID26 DS    27C                                             @Z40NIVS
TVOLID27 DS    27C                                             @Z40NIVS
TVOLID28 DS    27C                                             @Z40NIVS
TVOLID29 DS    27C                                             @Z40NIVS
TVOLID30 DS    27C                                             @Z40NIVS
TVOLID31 DS    27C                                             @Z40NIVS
TVOLID32 DS    27C                                             @Z40NIVS
TVOLID33 DS    27C                                             @Z40NIVS
TVOLID34 DS    27C                                             @Z40NIVS
TVOLID35 DS    27C                                             @Z40NIVS
TVOLID36 DS    27C                                             @Z40NIVS
TVOLID37 DS    27C                                             @Z40NIVS
TVOLID38 DS    27C                                             @Z40NIVS
TVOLID39 DS    27C                                             @Z40NIVS
TVOLID40 DS    27C                                             @Z40NIVS
TVOLID41 DS    27C                                             @Z40NIVS
TVOLID42 DS    27C                                             @Z40NIVS
TVOLID43 DS    27C                                             @Z40NIVS
TVOLID44 DS    27C                                             @Z40NIVS
TVOLID45 DS    27C                                             @Z40NIVS
TVOLID46 DS    27C                                             @Z40NIVS
TVOLID47 DS    27C                                             @Z40NIVS
TVOLID48 DS    27C                                             @Z40NIVS
TVOLID49 DS    27C                                             @Z40NIVS
TVOLID50 DS    27C                                             @Z40NIVS
TVOLID51 DS    27C                                             @Z40NIVS
         DSGEN (TOCACA,16),(TOCADA,16)                         @Z40NIVS
         DSGEN (TOCBCA,16),(TOCBDA,16)
         DSGEN (TOCCCA,16),(TOCCDA,16)
         DSGEN (TOCDCA,16),(TOCDDA,16)
**                                                             @Z40NIVS
**       SUM COUNTERS FOR FAULT SYMPTOM                        @Z40NIVS
**                                                             @Z40NIVS
FLTSYM0  DSGEN (SYMCD,16),(SYMCUA,16)                          @Z40NIVS
         DSGEN (SYMOCR,32)                                     @Z40NIVS
         DSGEN (SYMDAY,32),(SYMHR,32)                          @Z40NIVS
         DSGEN (SYMSNS0,48),(SYMSNS1,48),(SYMSNS2,48),(SYMSNS3,48)
FLTSYM1  DS    40C                                             @Z40NIVS
FLTSYM2  DS    40C                                             @Z40NIVS
FLTSYM3  DS    40C                                             @Z40NIVS
FLTSYM4  DS    40C                                             @Z40NIVS
FLTSYM5  DS    40C                                             @Z40NIVS
FLTSYM6  DS    40C                                             @Z40NIVS
FLTSYM7  DS    40C                                             @Z40NIVS
FLTSYM8  DS    40C                                             @Z40NIVS
FLTSYM9  DS    40C                                             @Z40NIVS
FLTSYM10 DS    40C                                             @Z40NIVS
FLTSYM11 DS    40C                                             @Z40NIVS
FLTSYM12 DS    40C                                             @Z40NIVS
FLTSYM13 DS    40C                                             @Z40NIVS
FLTSYM14 DS    40C                                             @Z40NIVS
FLTSYM15 DS    40C                                             @Z40NIVS
FLTSYM16 DS    40C                                             @Z40NIVS
FLTSYM17 DS    40C                                             @Z40NIVS
FLTSYM18 DS    40C                                             @Z40NIVS
FLTSYM19 DS    40C                                             @Z40NIVS
FLTSYM20 DS    40C                                             @Z40NIVS
FLTSYM21 DS    40C                                             @Z40NIVS
FLTSYM22 DS    40C                                             @Z40NIVS
FLTSYM23 DS    40C                                             @Z40NIVS
FLTSYM24 DS    40C                                             @Z40NIVS
FLTSYM25 DS    40C                                             @Z40NIVS
FLTSYM26 DS    40C                                             @Z40NIVS
FLTSYM27 DS    40C                                             @Z40NIVS
FLTSYM28 DS    40C                                             @Z40NIVS
FLTSYM29 DS    40C                                             @Z40NIVS
FLTSYM30 DS    40C                                             @Z40NIVS
FLTSYM31 DS    40C                                             @Z40NIVS
FLTSYM32 DS    40C                                             @Z40NIVS
FLTSYM33 DS    40C                                             @Z40NIVS
FLTSYM34 DS    40C                                             @Z40NIVS
FLTSYM35 DS    40C                                             @Z40NIVS
FLTSYM36 DS    40C                                             @Z40NIVS
FLTSYM37 DS    40C                                             @Z40NIVS
FLTSYM38 DS    40C                                             @Z40NIVS
FLTSYM39 DS    40C                                             @Z40NIVS
FLTSYM40 DS    40C                                             @Z40NIVS
FLTSYM41 DS    40C                                             @Z40NIVS
FLTSYM42 DS    40C                                             @Z40NIVS
FLTSYM43 DS    40C                                             @Z40NIVS
FLTSYM44 DS    40C                                             @Z40NIVS
FLTSYM45 DS    40C                                             @Z40NIVS
FLTSYM46 DS    40C                                             @Z40NIVS
FLTSYM47 DS    40C                                             @Z40NIVS
FLTSYM48 DS    40C                                             @Z40NIVS
FLTSYM49 DS    40C                                             @Z40NIVS
FLTSYM50 DS    40C                                             @Z40NIVS
**                                                             @Z40NIVS
**       THE FOLLOWING EQUATES ARE FOR DISPLACEMENT WITHIN     @Z40NIVS
**       THE VOLID                                             @Z40NIVS
*        SUMMARY COUNTERS - FROM THE FIRST VOLID
*
ABCNTR   EQU   TOCACA-TVOLID1          DIS TO A/B COUNTERS
CDCNTR   EQU   TOCCCA-TVOLID1          DIS TO C/D COUNTERS
ENTRYLN  EQU   TVOLID2-TVOLID1         LENGTH OF COUNTERS FOR ONE VOLID
         EJECT
IFCSAXXC CSECT
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
         SPACE 2
*
*      ALL THE FOLLOWING ROUTINES ARE EXECUTED VIA
*        THE 'ROUTINE' MACRO - NOTE: R3=ADDR OF PRINT POSITION
*                                   R4=ADDR OF DATA IN SUMMARY COUNTER
*
         SPACE 2
*
*      THE FOLLOWING MOVES THE DEVICE TYPE TO THE PRINT LINE
*
MOVDEV   STM   R5,R8,XSAVE             SAVE REGS
         LA    R5,DEVTABLE             LOAD ADDR OF DEVICE TABLE
         LA    R6,DEVNUM               LOAD NUMBER OF SUPPORTED DEVICES
         TM    L0(R4),H90              WAS RECORD TYPE MDR
         BO    MDEVCHK                 YES BR TO CHECK ID
         SPACE
ODEVCK   CLC   L1(L2,R4),L0(R5)        IS DEVICE CODE SUPPORTED
         BE    DEVFND                  YES - BR TO MOVE DEVICE TYPE
         LA    R5,L9(R5)               BUMP TABLE PTR TO NEXT ENTRY
         BCT   R6,ODEVCK               BR TO CHECK THIS DEVICE CODE
         B     MOVUNKN                 BR - DEVICE IS UNKNOWN
         SPACE
MDEVCHK  CLC   L1(L1,R4),L2(R5)        IS RECORD ID SUPPORTED
         BE    DEVFND                  YES - BR TO MOVE DEVICE TYPE
         LA    R5,L9(R5)               BUMP PTR TO NEXT REC ID
         BCT   R6,MDEVCHK              BR TO CHECK THIS ONE
         SPACE
*        DEVICE IS NOT SUPPORTED MOVE 'UNKNOWN' TO PRINT LINE
MOVUNKN  MVC   L9(L7,R3),UNKNOWN       MOVE TO PRINT LINE
         B     RETURN                  RETURN
         SPACE
DEVFND   MVC   L9(L6,R3),L3(R5)        MOVE DEVICE TYPE TO PRINT LINE
         B     RETURN                  RETURN
         SPACE 2
*
*      THE FOLLOWING PUTS THE DATE IN THE PRINT LINE
*
SETDATE  UNPK  XSAVE(L8),L1(L3,R4)     UNPACK THE DATE
         MVC   L0(L3,R3),XSAVE+L5      MOVE 'JULIAN' DAY TO PRINT LINE
         MVC   L6(L2,R3),XSAVE+L3      MOVE YEAR TO PRINT LINE
         BR    R14                     RETURN
         EJECT
*
*      THE FOLLOWING INSERTS DEFAULTS FOR CPU MODEL # AND SERIAL #
*        IF THEY ARE NOT IN RECORD
*
SETCPUNO STM   R5,R8,XSAVE             SAVE REGS
         SR    R5,R5                   CLEAR REG
         IC    R5,L0(R4)               INSERT FIRST 1/2 OF MODEL #
         SLL   R5,L8               SHIFT IT T                  @Z40NIVS
         IC    R5,L1(R4)               INSERT LAST 1/2 OF MODEL #
         LTR   R5,R5                   IS MODEL # ZERO
         BNZ   RETURN                  NO - RETURN
         SPACE
         LR    R5,R3                   LOAD PRINT POS ADDR
         LA    R6,L46                  LOAD # OF PRINT POS TO BACK UP
         SR    R5,R6                   SUBTRACT OFFSET
         MVC   0(L6,R5),SHARED           SAY MODEL SHARED      @Z427VLS
         B     RETURN                  RETURN
         SPACE 2
*
*      THE FOLLOWING CONVERTS HEX TO DECIMAL,READY FOR PRINT
*
CONV1    STM   R5,R8,XSAVE             SAVE REGS
         XC    READYP(L8),READYP       CLEAR WORK AREA
         SR    R6,R6                   CLEAR REG
         LH    R6,L0(R4)               LOAD COUNT
CONV2    CVD   R6,READYP               CONVERT COUNT TO DECIMAL
         UNPK  READYP(L5),READYP+L5(L3) UNPACK DECIMAL COUNT
         OI    READYP+L4,CLRSGN        SET THE SIGN
         MVC   L0(L4,R3),READYP+L1     MOVE PRINTABLE COUNT TO PRINT
         B     RETURN                  RETURN
         SPACE 2
**                                                             @Z40NIVS
**       ROUTINES TO ALTER PRINT LINE                          @Z40NIVS
**                                                             @Z40NIVS
REPNT0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L6               LOAD THE DECREMENT          @Z40NIVS
         LR    R6,R3               PNT CRNT PRNT LINE POS      @Z40NIVS
         SR    R6,R5               PNT TO START OF PRNT        @Z40NIVS
         MVC   L0(L3,R6),L3(R6)    MOVE CUA BACK 3 POS         @Z40NIVS
         XC    L3(L3,R6),L3(R6)    CLEAR 3 BYTES               @Z40NIVS
         LA    R3,L1(R3)           INCR PRNT LINE PNTR 13      @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
REPNT1   LA    R4,L4               CONSTANT FOUR               @Z40NIVS
         SR    R3,R4               DECREMENT PNTR TO 8         @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
REPNT2   LA    R4,L2               CONSTANT TWO                @Z40NIVS
         SR    R3,R4               DECREMENT PNTR TO 10        @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
**                                                             @Z40NIVS
***      EDIT CYCLE TO PRINT 16 SUMCTR                         @Z40NIVS
**                                                             @Z40NIVS
EDTFA0   STM   R5,R8,XSAVE         SAVE REG                    @Z40NIVS
         L     R7,EDTFA4           GET COUNTER                 @Z40NIVS
EDTFA1   L     R5,EDTFA5           PICK UP LAST PRT            @Z40NIVS
         LA    R5,L27(R5)          INCREMENT TO NEXT           @Z40NIVS
         ST    R5,EDTFA5           SAVE LAST REC PTR           @Z40NIVS
         OC    L24(L3,R5),L24(R5)  TEST CUA + 0                @Z40NIVS
         BNZ   EDTFA2              BR IF NO REC INFO           @Z40NIVS
         BCT   R7,EDTFA1           REDUCE RECCTR               @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
EDTFA2   BCT   R7,EDTFA3           REDUCE REG CTR              @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
EDTFA3   MVC   L0(L27,R4),L0(R5)   MOVE REC TO PRINT           @Z40NIVS
         ST    R7,EDTFA4           SAVE REC NO                 @Z40NIVS
         LA    R7,SUMTA1-FOUR      LOAD LINE ADDR-4            @Z40NIVS
         LA    R8,SUMTA2-ONE       LOAD LABEL ADDR-1           @Z40NIVS
         STM   R7,R8,YR9PTR        STORE NEW PNTR              @Z40NIVS
         SR    R15,R15             CLEAR FOR NO PRINT          @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
EDTFA6   STM   R5,R8,XSAVE         SAVE WORK REG               @Z40NIVS
         L     R7,EDTFA4           PICK UP NO. REC TO GO       @Z40NIVS
         LR    R5,R4               LOAD SUM AREA PNTR          @Z40NIVS
EDTFA7   LA    R5,L27(R5)          PICK UP ADDR OF REC         @Z40NIVS
         ST    R5,EDTFA5           SAVE FIRST DEV REC          @Z40NIVS
         OC    L24(L3,R5),L24(R5)  TEST FOR CUA                @Z40NIVS
         BNZ   EDTFA8              GOT TO MOVE REC             @Z40NIVS
         BCT   R7,EDTFA7           GO TO TEST NEXT REC         @Z40NIVS
         LA    R7,L1               SET R7 TO 1 REC LEFT        @Z40NIVS
         ST    R7,EDTFA4           STORE TO PRNT ZERO          @Z40NIVS
         ST    R4,EDTFA5           SET TO START OF SUM AREA    @Z40NIVS
         B     RETURN              NO REC TO PRNT              @Z40NIVS
EDTFA8   ST    R7,EDTFA4           STORE TO NO. REC TO PRNT    @Z40NIVS
         MVC   L0(L27,R4),L0(R5)   MOVE FIRST REC TO PRNT      @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO SAVE CHANNEL AND CONTROL UNIT FOR SUBSYS   @Z40NIVS
**                                                             @Z40NIVS
CUAN0    STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L10              LOAD DECREMENT FOR R3       @Z40NIVS
         SR    R3,R5               PNT TO START OF PRNT        @Z40NIVS
         MVC   CUANR+ONE(L3),L3(R3)  MOVE CHANEL AND CU        @Z40NIVS
         SR    R15,R15             CLR FOR NO PRNT             @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       THE FOLLOWING PUTS THE PHYSICAL DRIVE                 @Z40NIVS
**       IN THE PRINT LINE                                     @Z40NIVS
**                                                             @Z40NIVS
SETPHY   STM   R5,R8,XSAVE         SAVE REGS                   @Z40NIVS
         IC    R5,L2(R4)               INSERT LO-ORDER BYTE OF CUA
         SLL   R5,L28              SHIFT OUT ALL BUT UNIT ADDR @Z40NIVS
         SRL   R5,L28              SHIFT UNIT ADDR BACK        @Z40NIVS
         LA    R5,PHYDRIVS(R5)         LOAD ADDR OF PHYSICAL DRIVE
         MVC   L0(L2,R3),CUANR+ONE  MOVE CHAN AND CTRL UNT     @Z40NIVS
         MVC   L2(L1,R3),L0(R5)    MOVE CUA TO PRT LINE        @Z40NIVS
         B     RETURN                  RETURN
         EJECT
*
*      THE FOLLOWING TOTALS OBR RECORDS THAT WERE SUMMARIZED
*
TOTOBR   STM   R5,R8,XSAVE             SAVE REGS
         SR    R6,R6                   CLEAR REGS
         AH    R6,TBUSOPA              ADD BUS OUT PARITY
         AH    R6,TEQIPATH             ADD EQUIPMENT CKS-ATTACH  XM3751
         AH    R6,TEQIPDRV             ADD EQUIPMENT CKS-DRIVE   XM3751
         AH    R6,TDACKCOR             ADD DATA CHK CORRECTABLE
         AH    R6,TDACKRET             ADD DATA CHK RETRY
         AH    R6,TDACKPRM             ADD DATA CHK PERMANENT
         AH    R6,TSEEKR               ADD SEEK CHK RETRY
         AH    R6,TSEEKP               ADD SEEK CHK PERMANENT
         AH    R6,TOVERRN              ADD OVERRUNS
         XC    READYP(L8),READYP       CLEAR WORK AREA
         B     CONV2                   BR TO CONVERT TOTAL TO PRINT
         SPACE 2
*
*      THE FOLLOWING INITIALIZES THE COUNT FIELDS FOR THE VOLID SUMMARY
*        AND KEEPS A RUNNING TOTAL FOR EACH FIELD
*
PRVOLS   L     R4,CNTDN2           LOAD REG 4                  @Z40NIVS
         CLC   L0(L6,R4),ZEROS     IS THERE A VOLID            @Z40NIVS
         BNE   SETTOTS                 YES - BR TO INIT SUMMARY LINE
         SPACE
         SR    R15,R15                 DONT PRINT THIS LINE
         BR    R14                     RETURN
         SPACE
SETTOTS  STM   R4,R8,XSAVE             SAVE REGS
         LR    R5,R3                   LOAD PRINT ADDR
         MVC   L0(L6,R5),L0(R4)        MOVE VOL SER TO PRINT LINE
         LA    R5,L13(R5)          UP PRNT LINE PTR            @Z40NIVS
         IC    R6,L26(R4)          PICK UP NO. FROM TVCUA      @Z40NIVS
         SLL   R6,L28              SHIFT OUT GARBAGE           @Z40NIVS
         SRL   R6,L28              SHIFT UNIT NO.TO LOW        @Z40NIVS
         LA    R6,PHYDRIVS(R6)     PICK UP UNIT PRNT CHAR      @Z40NIVS
         MVC   L0(L2,R5),CUANR+ONE  MOVE IN CHAN AND CU        @Z40NIVS
         MVC   L2(L1,R5),L0(R6)    INSERT DRIVE NUM            @Z40NIVS
         SPACE
         LA    R4,L6(R4)               BUMP CTR PTR TO SEEKS
         LA    R5,L13(R5)              BUMP PRINT POS PTR
         MVC   READYP(L4),L0(R4)       MOVE SEEKS TO WORK AREA
         L     R6,READYP               LOAD SEEKS
         SRL   R6,L10                  REDUCE SEEK TO X1000
         L     R7,TOTSKS               LOAD TOTAL SEEKS
         AR    R7,R6                   ADD SEEKS(THIS REC) TO TOTAL
         ST    R7,TOTSKS               SAVE NEW TOTAL
         BAL   R8,CONVH                BR TO CONV AND MOVE SEEKS TO PNT
         EJECT
         MVC   READYP(L2),L10(R4)      MOVE SEEK ERRS TO WORK AREA
         LH    R6,READYP               LOAD SEEK ERRS
         LH    R7,TOTSKER              LOAD TOTAL SEEK ERRS
         AR    R7,R6                   ADD SEEK ERRS TO TOTAL
         STH   R7,TOTSKER              SAVE TOTAL
         BAL   R8,CONVH                BR TO CONV AND MOVE SEEK ERRORS
         SPACE
         LA    R4,L4(R4)               BUMP CTR PTR TO BYTES READ CNTRS
         MVC   READYP(L4),L2(R4)   MOVE MEGABYTES READ         @Z40NIVS
         L     R6,READYP           LOAD BYTES READ             @Z40NIVS
         L     R7,TOTMEGRD             LOAD TOTAL MEG READ
         AR    R7,R6                   ADD MEG READ TO TOTAL
         ST    R7,TOTMEGRD             SAVE TOTAL
         ST    R6,SAVMEG               SAVE MEGABYTES READ FOR LATER
         BAL   R8,CONVH                BR TO CONV AND MOVE MEGABYTES
         SPACE
         LA    R4,L8(R4)               BUMP CTR PTR TO RETRY READ ERRS
         MVC   READYP(L2),L0(R4)       MOVE RETRY READ ERRORS
         LH    R6,READYP               LOAD RETRY READ ERRORS
         LTR   R6,R6                   IS THERE A COUNT
         BNZ   GETRETRD                YES - BR TO HANDLE
         SPACE
         MVC   L0(L5,R5),NONA      NO, MOVE '-0-' TO PRINT LINE@Z40NIVS
         MVC   L13(L5,R5),NA       MOVE -N/A- TO PRNT LINE     @Z40NIVS
         LA    R5,L26(R5)              BUMP PRT POS PTR
         B     CHKCORRD                BR TO CHECK CORR READ ERRS
         SPACE
GETRETRD LH    R7,TOTRETRD             LOAD TOTAL RETRY READS
         AR    R7,R6                   ADD RETRY READS TO TOTAL
         STH   R7,TOTRETRD             SAVE TOTAL
         BAL   R8,CONVH                BR TO CONV ANDMOVE RETRY READS
         SPACE
         L     R7,SAVMEG               LOAD MEGABYTES READ FOR THIS VOL
         LR    R8,R6                   LOAD RETRY READ ERRORS
         SR    R6,R6                   CLEAR EVEN REG FOR DIVIDE
         DR    R6,R8                   DIVIDE MEG RD BY RETRY READ ERRS
         LR    R6,R7                   LOAD QUOTIENT(MEG/RET READ)
         BAL   R8,CONVH                BR TO CONV AND MOVE MEG/RET RDS
         EJECT
CHKCORRD LA    R4,L2(R4)               BUMP CTR PTR TO CORR READ ERRS
         MVC   READYP(L2),L0(R4)       MOVE CORR READ ERRS TO WORK AREA
         LH    R6,READYP               LOAD CORR READ ERRS
         LTR   R6,R6                   IS THERE A COUNT
         BNZ   GETCORRD                YES - BR TO HANDLE
         SPACE
         MVC   L0(L5,R5),NONA      NO, MOVE '-0-' TO PRINT LINE@Z40NIVS
         MVC   L13(L5,R5),NA       MOVE -N/A- TO PRNT LINE     @Z40NIVS
         B     RETVOL                  BR TO RETURN
         SPACE
GETCORRD LH    R7,TOTCORRD             LOAD TOTAL CORR READ ERRS
         AR    R7,R6                   ADD CORR ERRS TO TOTAL
         STH   R7,TOTCORRD             SAVE TOTAL
         BAL   R8,CONVH                BR TO CONV AND MOVE CORR READ ER
         SPACE
         L     R7,SAVMEG               LOAD MEGABYTES READ
         LR    R8,R6                   LOAD CORR READ ERRS
         SR    R6,R6                   CLEAR 'EVEN' REG FOR DIVIDE
         DR    R6,R8                   DIVIDE MEG RD BY CORR READ ERRS
         LR    R6,R7                   LOAD QUOTIENT(MEG/CORR READ)
         BAL   R8,CONVH                BR TO CONV AN MOVE MEG/CORR READ
         SPACE
RETVOL   LM    R4,R8,XSAVE             RESTORE REGS
         BR    R14                     RETURN
         SPACE 2
*        THE FOLLOWING CONVERTS A COUNT IN REG 6 TO
*        PRINTABLE EBCDIC AND MOVES IT TO THE PRINT LINE
         SPACE
CONVH    XC    READYP(L8),READYP       CLEAR WORK AREA
         CVD   R6,READYP               CONVERT COUNT TO DECIMAL
         UNPK  READYP(L5),READYP+L5(L3) UNPACK COUNT
         OI    READYP+L4,CLRSGN        FIX SIGN
         MVC   L0(L5,R5),READYP        MOVE TO PRINT LINE
         LA    R5,L13(R5)              BUMP PRINT POSITION POINTER
         BR    R8                      RETURN TO MAINLINE
         EJECT
*
*      THE FOLLOWING INITIALIZES THE TOTALS FOR THE VOLID SUMMARY
*
GETTOTS  STM   R5,R8,XSAVE             SAVE REGS
         LR    R5,R3                   LOAD PRINT POSITION ADDR
         SPACE
         L     R6,TOTSKS               LOAD TOTAL SEEKS
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         SPACE
         LH    R6,TOTSKER              LOAD TOTAL SEEK ERRORS
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         SPACE
         L     R6,TOTMEGRD             LOAD TOTAL MEGABYTES READ
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         SPACE
         LH    R6,TOTRETRD             LOAD TOTAL RETRY READ ERRORS
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         SPACE
         L     R7,TOTMEGRD             LOAD TOTAL MEG READ
         LH    R8,TOTRETRD             LOAD TOTAL RETRY READ ERRORS
         LTR   R8,R8                   WERE THERE ANY RETRY READ ERRS
         BZ    NOMEGR                  NO - BR TO MOVE 'N/A'
         SR    R6,R6                   CLEAR 'EVEN' REG
         DR    R6,R8                   DIVIDE TO FIND MEG READ PER PETY
         LR    R6,R7                   LOAD QUOTIENT(MEG/RET READ)
         BAL   R8,CONVH                BR TO CONVERT AND MOVE TO PRINT
         B     GETCRTOT                BR TO GET CORR READ TOTAL
*
NOMEGR   MVC   L0(L5,R5),NA        MOVE 'N/A' TO PRINT LINE    @Z40NIVS
         LA    R5,L13(R5)              BUMP PRINT POSITION PTR
         SPACE
GETCRTOT LH    R6,TOTCORRD             LOAD TOTAL CORRECTABLE READ ERRS
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         SPACE
         L     R7,TOTMEGRD             LOAD TOTAL MEG READ
         LH    R8,TOTCORRD             LOAD CORR READ ERRS
         LTR   R8,R8                   WERE THERE ANY CORR READ ERRS
         BZ    NOMEGC                  NO - BR TO MOVE 'N/A'
         SR    R6,R6                   CLEAR 'EVEN' REG
         DR    R6,R8                   DIVIDE TO FIND MEG READ PER CORR
         LR    R6,R7                   LOAD QUOTIENT(MEG/CORR READ ER)
         BAL   R8,CONVH                BR TO CONVERT AND MOVE TO PRINT
         B     CLRTOTS                 BR TO CLEAR TOTAL AREAS
*
NOMEGC   MVC   L0(L5,R5),NA        MOVE 'N/A' TO PRINT LINE    @Z40NIVS
         LA    R5,L13(R5)              BUMP PRINT POSITION PTR
         EJECT
CLRTOTS  SR    R6,R6                   CLEAR REG
         ST    R6,TOTSKS               C
         ST    R6,TOTMEGRD              L     T     A
         ST    R6,SAVMEG                 E     O     R
         STH   R6,TOTSKER                 A     T     E
         STH   R6,TOTRETRD                 R     A     A
         STH   R6,TOTCORRD                        L     S
         B     RETURN                  RETURN
         EJECT
*
*      THE FOLLOWING RETURNS TO EREP CONTROL
*
RETURN   LM    R5,R8,XSAVE             RESTORE REGS
SKIPPER  BR    R14                     RETURN
**                                                             @Z40NIVS
**       SORT FOR VOLID TO PUT HIGHEST ERROR                   @Z40NIVS
**       RATE TO PRINT FIRST                                   @Z40NIVS
**                                                             @Z40NIVS
SORTV0   STM   R5,R8,XSAVE         SAVE WORK REG               @Z40NIVS
         ST    R4,SRTSAV           SAVE REG 4                  @Z40NIVS
         ST    R4,CNTDN2           SAVE VOL PNTR FOR PRT       @Z40NIVS
SORTV1   SR    R8,R8               CLR REG 8 FOR SWITCH        @Z40NIVS
         L     R4,SRTSAV           SET 4 TO START OF SUM       @Z40NIVS
         LA    R5,L27(R4)          SET 5 TO NEXT REC           @Z40NIVS
         LA    R7,L49              SET 7 TO NO.REC-1           @Z40NIVS
SORTV2   CLC   L0(L6,R5),ZEROS     IS THERE A VOLID            @Z40NIVS
         BE    SORTV4              NO BR TO TEST SW            @Z40NIVS
         CLC   L10(L2,R4),L10(R5)  TEST FOR HIGH COUNT         @Z40NIVS
         BNH   SORTV3              BRCH IF HIGH REC FIRST      @Z40NIVS
         LA    R8,L15              SET MOVE SWITCH             @Z40NIVS
         XC    L0(L27,R4),L0(R5)   RECORD                      @Z40NIVS
         XC    L0(L27,R5),L0(R4)   SWAP                        @Z40NIVS
         XC    L0(L27,R4),L0(R5)   FOR SORT                    @Z40NIVS
SORTV3   LA    R4,L27(R4)          POINT TO NEXT REC           @Z40NIVS
         LA    R5,L27(R5)          POINT TO NEXT REC+1         @Z40NIVS
         BCT   R7,SORTV2           MORE TO TEST                @Z40NIVS
SORTV4   LTR   R8,R8               TEST PASS SWITCH            @Z40NIVS
         BZ    RETURN              ALL REC TESTED/MOVED        @Z40NIVS
         B     SORTV1              CONTINUE TO TEST/MOVE       @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO PRINT 50 VOLID SUM ENTRIES                 @Z40NIVS
**                                                             @Z40NIVS
CNTDN0   STM   R5,R8,XSAVE         SAVE THE REGS               @Z40NIVS
         SR    R5,R5               CLEAR REG                   @Z40NIVS
         L     R5,CNTDN3           LOAD WITH 50                @Z40NIVS
         BCT   R5,CNTDN1           BRANCH FOR 50               @Z40NIVS
CNTDN5   SR    R15,R15             CLEAR FOR NO PRINT          @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
CNTDN1   ST    R5,CNTDN3           SAVE R 5                    @Z40NIVS
         L     R5,CNTDN2           GET CNTDN VALUE             @Z40NIVS
         LA    R5,L27(R5)          INCREMENT BY 27             @Z40NIVS
         CLC   L0(L6,R5),ZEROS     TESTFOR VOLID EQ ZERO       @Z40NIVS
         BE    CNTDN5              BRANCH NONE TO PRNT         @Z40NIVS
         ST    R5,CNTDN2           PUT IT BACK                 @Z40NIVS
         LA    R5,SUMTA3-FOUR      GET LINE ADDRESS            @Z40NIVS
         LA    R6,SUMTA4-ONE       GET LABEL ADDRESS           @Z40NIVS
         STM   R5,R6,YR9PTR        MAKE THEM CURRENT           @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
         SPACE 1                                               @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO DETERMINE IF FLTSYM SHOULD BE EDITED       @Z40NIVS
**                                                             @Z40NIVS
FLTTST0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R4,L40(R4)          INCREMENT TO FIRST RECORD   @Z427VLS
         CLC   L0(L4,R4),ZEROS     ARE SYM AND CUA ZERO        @Z40NIVS
         BNE   FLTTST1             NO CONTINUE TO PRINT        @Z40NIVS
         LA    R7,SUMTAC-FOUR      YES, PREPARE TO SKIP        @Z40NIVS
         LA    R8,SUMTAD-ONE       ROUTINES FOR FLT SYM        @Z40NIVS
         STM   R7,R8,YR9PTR        EDIT                        @Z40NIVS
FLTTST1  B     RETURN              RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE FOR SORTING THE FAULT SYMPTOM ENTRIES         @Z40NIVS
**                                                             @Z40NIVS
FLTSRT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         ST    R4,FLTSRT8          SAVE PNTR TO EDIT AREA      @Z40NIVS
         SR    R6,R6               CLEAR FOR SWITCH            @Z40NIVS
FLTSRT1  LA    R4,L40(R4)          INCREMENT TO FIRST RECORD   @Z427VLS
         SR    R7,R7               CLR MOVE SWITCH             @Z40NIVS
         LA    R8,L50              SET R8 TO NUM REC           @Z40NIVS
FLTSRT2  CLC   L42(L2,R4),ZEROS    IS DEV ADDR ZERO            @Z427VLS
         BE    FLTSRT6             END REC AREA                @Z40NIVS
FLTSRT3  CLC   L2(L2,R4),L42(R4)   COMP CUA/SYM                @Z427VLS
         BNH   FLTSRT4             BRCH IF ASCENDING ORDER     @Z40NIVS
         XC    L0(L40,R4),L40(R4)  SWAP REC                    @Z40NIVS
         XC    L40(L40,R4),L0(R4)  PUT IN ASCENDING            @Z40NIVS
         XC    L0(L40,R4),L40(R4)  ORDER                       @Z40NIVS
         LA    R7,L15              TURN MOVE SWITCH ON         @Z40NIVS
FLTSRT4  LA    R4,L40(R4)          INCRMENT FOR NEXT TEST      @Z427VLS
         BCT   R8,FLTSRT2          GO MAX 50 PASSES            @Z40NIVS
FLTSRT6  LTR   R7,R7               MOVE SWITCH SET             @Z40NIVS
         BZ    FLTSRT7             YES SORT COMPLETE           @Z40NIVS
         L     R4,FLTSRT8          RESET R4 TO START           @Z40NIVS
         B     FLTSRT1             GO CYCLE ONCE MORE          @Z40NIVS
FLTSRT7  L     R4,FLTSRT8          NO RESTORE R4               @Z40NIVS
         LTR   R6,R6               IS THIS FIRST SORT          @Z40NIVS
         BNZ   FLTSRT9             NO GO TO COMPLETION         @Z40NIVS
         LA    R6,L15              YES SET SORT SWITCH         @Z40NIVS
         NI    FLTSRT3+THREE,BASEDISP  ALTER CLC INSTR         @Z40NIVS
         NI    FLTSRT3+FIVE,BASEDISP  FOR NEXT SORT            @Z40NIVS
         B     FLTSRT1             SORT ON SYM CODE            @Z40NIVS
FLTSRT9  MVC   L0(L40,R4),L40(R4)  MOVE FIRST REC TO EDIT      @Z427VLS
         LA    R4,L40(R4)          INCR R4 BY REC LENGTH       @Z427VLS
         ST    R4,FLTMOV2          KEEP USE BY MOVE RTNE       @Z40NIVS
         LA    R6,L48              SET REG 6 TO NUM REC        @Z40NIVS
         ST    R6,FLTMOV6          KEEP USE BY MOVE RTNE       @Z40NIVS
         B     RETURN                                          @Z40NIVS
         SPACE 1                                               @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO MOVE NEXT REC FROM SUM AREA                @Z40NIVS
**       TO EDIT AREA TO PRINT                                 @Z40NIVS
**                                                             @Z40NIVS
FLTMOV0  STM   R5,R8,XSAVE         SAVE WORK REG               @Z40NIVS
         L     R5,FLTMOV2          PICK UP PNTR LAST REC       @Z40NIVS
         LA    R5,L40(R5)          POINT TO NEW REC            @Z427VLS
         ST    R5,FLTMOV2          SAVE PNTR                   @Z40NIVS
         CLC   L2(L2,R5),ZEROS     IS REC EQ ZERO              @Z40NIVS
         BNE   FLTMOV1             NO GO TO MOVE               @Z40NIVS
         B     FLTMOV3             BRNCH PREPARE NEW EDIT      @Z40NIVS
FLTMOV1  MVC   L0(L40,R4),L0(R5)   MOVE NEW REC TO EDIT        @Z427VLS
         LA    R7,SUMTA7-FOUR      BACK UP LINE AND            @Z40NIVS
         LA    R8,SUMTA8-ONE       LABEL PNTR TO               @Z40NIVS
         STM   R7,R8,YR9PTR        PRINT NEXT REC              @Z40NIVS
         L     R6,FLTMOV6          SET R6 TO NUM REC LEFT      @Z40NIVS
         BCT   R6,FLTMOV7          REDUCE COUNT BY ONE         @Z40NIVS
         B     FLTMOV3             END FIRST SECTION           @Z40NIVS
FLTMOV7  ST    R6,FLTMOV6          SAVE NUM REC REMAIN         @Z40NIVS
         SR    R15,R15             CLR FOR NO PRINT            @Z40NIVS
FLTMOV3  B     RETURN              RETURN *************        @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO MOVE DATE TO FAULT SYMPTON PRINTLINE       @Z40NIVS
**                                                             @Z40NIVS
FLTSYDA  UNPK  XSAVE(L8),L1(L3,R4) UNPACK THE DATE             @Z40NIVS
         MVC   L0(L3,R3),XSAVE+L5  MOVE JULIAN DATE            @Z40NIVS
         MVI   L3(R3),SLASH        MOVE SERARATOR              @Z40NIVS
         MVC   L4(L2,R3),XSAVE+L3  MOVE YEAR                   @Z40NIVS
         LA    R4,L4               LOAD R4 WITH 4              @Z427VLS
         SR    R3,R4               REDUCE PRINT LINE PTR       @Z40NIVS
         BR    R14                 RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO PREPARE CONVERT OCCUR COUNT TO PRINTABLE   @Z40NIVS
**       FORMAT.                                               @Z40NIVS
**                                                             @Z40NIVS
GETOCCUR STM   R5,R8,XSAVE         STORE WORK REGS             @Z40NIVS
         LA    R5,L20              BLANK OUT                   @Z40NIVS
         LR    R6,R3               LEADING ZERO                @Z40NIVS
         SR    R6,R5               ON DEVICE                   @Z40NIVS
         MVI   L0(R6),BLANK        ADDRESS                     @Z40NIVS
         MVC   READYP(L4),L0(R4)   MOVE CNT FIELD TO WORD      @Z40NIVS
         L     R6,READYP           MOVE INTO REG               @Z40NIVS
         LR    R5,R3               SET PRINT LINE POINTER      @Z40NIVS
         BAL   R8,CONVH            USE STANDARD ROUTINE        @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO REFORMAT TIME IN FAULT SYMPTOM OUTPUT      @Z40NIVS
**                                                             @Z40NIVS
HREDIT0  STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R5,L10              SET REG5 TO 10              @Z427VLS
         SR    R3,R5               DECR PRNT LINE PNTR         @Z40NIVS
         MVC   READYP(L6),L0(R3)   SAVE FORMATED OUTPUT        @Z40NIVS
         MVI   L0(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L1(L2,R3),READYP    MOVE MIN TO PRNT LINE       @Z40NIVS
         MVI   L3(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L4(L2,R3),READYP+TWO  MOVE SEC TO PRNT LINE     @Z40NIVS
         MVI   L6(R3),COLON        MOVE IN SEPERATOR CHAR      @Z40NIVS
         MVC   L7(L2,R3),READYP+FOUR  MOVE THOU TO PRNT LINE   @Z40NIVS
         B     RETURN              RETURN                      @Z40NIVS
**                                                             @Z40NIVS
**       ROUTINE TO CONVERT BYTES READ TO MEGABYTES            @Z40NIVS
**       READ AND SETUP FOR SORT                               @Z40NIVS
**                                                             @Z40NIVS
SETUP0   STM   R5,R8,XSAVE         SAVE WORK REGS              @Z40NIVS
         LA    R8,L50              LOAD NO. OF SUM REC         @Z40NIVS
SETUP1   CLC   L0(L6,R4),ZEROS     IS VOLID ZERO               @Z40NIVS
         BE    SETUP5              GO TO RETURN                @Z40NIVS
         MVC   READYP(L2),L18(R4)  MOVE RETRY COUNT            @Z40NIVS
         LH    R5,READYP           LOAD RETRY COUNT            @Z40NIVS
         MVC   READYP+L2(L6),L10(R4) MOVE IN BYTES READ        @Z40NIVS
         LH    R6,READYP+L2        LOAD OVERFLOW BYTES         @Z40NIVS
         L     R7,READYP+L4        LOAD BYTES READ             @Z40NIVS
         SRDL  R6,L20              CONVERT TO MEGABYTES        @Z40NIVS
         ST    R7,SETUP7           SAVE FOR MOVE               @Z40NIVS
         MVC   L12(L4,R4),SETUP7   MOVE MEGABYTES TO REC       @Z40NIVS
         CR    R7,R5               COMPARE RETRY TO MEGA       @Z40NIVS
         BNL   SETUP2              MEGA IS HIGH                @Z40NIVS
         MVC   L10(L2,R4),ZEROS    MOVE IN ZEROS TO SORT       @Z40NIVS
         B     SETUP4              GO AGAIN                    @Z40NIVS
SETUP2   LTR   R5,R5               TEST FOR NO RETRY           @Z40NIVS
         BZ    SETUP6              GO SET FOR SORT             @Z40NIVS
         SR    R6,R6               CLR REG 6 FOR DIV           @Z40NIVS
         DR    R6,R5               RETRY INTO MEGABYTES        @Z40NIVS
         ST    R7,SETUP7           SAVE RATIO RETRY/MEGA       @Z40NIVS
SETUP3   MVC   L10(L2,R4),SETUP7+L2 MOVE RATIO FOR SORT        @Z40NIVS
SETUP4   LA    R4,L27(R4)          INCREMENT TO NEXT REC       @Z40NIVS
         BCT   R8,SETUP1           DECREMENT CNT AND GO        @Z40NIVS
SETUP5   B     RETURN              RETURN                      @Z40NIVS
SETUP6   OI    SETUP7+L2,SORTFLG   SET UP FOR SORT             @Z40NIVS
         B     SETUP3              GO TO MOVE                  @Z40NIVS
**                                                             @Z40NIVS
**       THE FOLLOWING INITIALIZES THE COMMAND                 @Z40NIVS
**       AND DATA OVERRUN COUNTS                               @Z40NIVS
**                                                             @Z40NIVS
GETCHANT STM   R4,R8,XSAVE         SAVE REGS                   @Z40NIVS
         LR    R5,R3               LOAD PRINT POS ADDR         @Z40NIVS
         LA    R7,L4               LOAD # OF POSIBLE CHANNELS  @Z40NIVS
         SPACE
SETCHANT LH    R6,L0(R4)               LOAD OVERRUN COUNT
         BAL   R8,CONVH                BR TO CONVERT & MOVE TO PRINT
         LA    R4,L4(R4)               BUMP COUNTER PTR TO NXT COUNT
         LA    R5,L16(R5)              BUMP PRINT POS PTR
         BCT   R7,SETCHANT             BR TO SET COUNT FOR NXT CHANNEL
         B     RETVOL                  RETURN
         SPACE 2
*
*      THE FOLLOWING SAVES REGS,FREES STORAGE FOR COUNTERS,AND CHECKS
*        TO SEE IF THERE IS ANOTHER SET OF COUNTERS TO BE SUMMARIZED.
*        IF THERE IS,POINT TO TOP OF TABLE AND SUMMARIZE THOSE COUNTS.
*
THEEND   STM   R14,R12,L12(R13)        SAVE REGS
         LR    R12,R13                 LOAD SAVE AREA ADDR
         LA    R13,FSAVE               LOAD MY SAVE AREA ADDR
         ST    R12,L4(R13)             SAVE CALLERS SAVE AREA ADDR
         ST    R13,L8(R13)             SAVE MY SAVE AREA ADDR IN CALLER
         SPACE
         L     R3,L4(R2)               LOAD ADDR OF NEXT COUNTERS
         ST    R3,L28(R12)             SAVE COUNTER ADDR
         SPACE
         LH    R0,SIZE                 LOAD SIZE OF COUNTERS
         LR    R1,R2                   LOAD ADDR OF COUNTERS
         FREEMAIN  R,LV=(0),A=(1)      FREE COUNTER STORAGE
         SPACE
         LTR   R3,R3                   ARE THERE MORE COUNTERS
         BZ    RETURNF                 NO - RETURN
         SPACE
         LA    R5,PENTRY+L10           LOAD EDIT TABLE ADDR
         ST    R5,YR9PTR               STORE ADDR FOR EREP CONTROL
         LA    R5,LABELS-L1            LOAD LABEL ADDR
         ST    R5,YLABEL               STORE ADDR FOR EREP CONTROL
         SPACE
RETURNF  L     R13,L4(R13)             LOAD CALLERS SAVE AREA ADDR
         LM    R14,R12,L12(R13)        RESTORE REGS
         BR    R14                     RETURN
         EJECT
*
*      THE FOLLOWING STORAGE CONSTANTS ARE USED BY THE
*        ABOVE ROUTINES
*
         DS    0D
FSAVE    DC    18F'0'                  FULL REG SAVE AREA
         SPACE
READYP   DC    D'0'
ZEROS    DC    2F'0'
         SPACE
XSAVE    DC    5F'0'                   REG SAVE AREA
         SPACE
TOTSKS   DC    F'0'
TOTMEGRD DC    F'0'
SAVMEG   DC    F'0'                    SAVE AREA FOR MEGABYTES READ
TOTSKER  DC    H'0'
TOTRETRD DC    H'0'
TOTCORRD DC    H'0'
RECTST4  DC    F'0'                                            @Z40NIVS
RECTSTS  DC    F'0'                SAVE AREA SUM REC PNTR      @Z40NIVS
RECTSTP  DC    F'0'                SAVE AREA DEV REC PNTR      @Z40NIVS
TFAULT7  DC    F'0'                                            @Z40NIVS
EDTFA4   DC    F'16'                                           @Z40NIVS
EDTFA5   DC    F'0'                                            @Z40NIVS
CUANR    DC    F'0'                SAVE AREA FOR CH-CU         @Z40NIVS
SRTSAV   DC    F'0'                SAVE FOR REG 4              @Z40NIVS
CNTDN2   DC    F'0'                                            @Z40NIVS
CNTDN3   DC    F'50'                                           @Z40NIVS
FLTSRT8  DC    F'0'                                            @Z40NIVS
FLTMOV2  DC    F'0'                                            @Z40NIVS
FLTMOV4  DC    F'0'                                            @Z40NIVS
FLTMOV6  DC    F'0'                                            @Z40NIVS
SETUP7   DC    F'0'                SAVE AREA                   @Z40NIVS
         SPACE
SIZE     DC    H'3972'                                         @Z427VLS
         SPACE
UNKNOWN  DC    C'UNKNOWN'
SHARED   DC    C'SHARED'                                       @Z427VLS
NA       DC    C'-N/A-'                                        @Z40NIVS
NONA     DC    C'00000'                                        @Z40NIVS
         SPACE
PHYDRIVS DC    C'0123456789ABCDEF'                             @Z40NIVS
         SPACE
DEVNUM   EQU   1                       NUMBER OF DEVICES SUPPORTED
DEVTABLE DC    X'200A'                 DEVICE TYPE &
         DC    X'09'                         REC ID FOR A
         DC    C'3340  '                           WINCHESTER
         EJECT
*                                                                     *
*   S U M M A R Y  T A B L E  F O R  3 3 4 0 ( W I N C H E S T E R )  *
*                                                                     *
PENTRY   DS    0F
         DC    X'0001001'
         DC    X'0001001'
         DC    A(LABELS)
         DC    H'0'
         LINE  (1,1),(1,1),SKIP=2                              @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         SPACE
*
*      SKIP TO CHANNEL 1(EJECT)
*
         DC    X'01'
         DC    X'000B8B00'
         SPACE
         LABEL ' '
         LINE  (61,23),(1,19),SKIP=2                           @Z40NIVS
         ROUTINE   TRECLS,MOVDEV
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE   YCPU,SETCPUNO
         LABEL 'SUMMARY OF I/O RECO','RDS  TYPE OBR/MDR  ',    @Z40NIVSC
               'SOURCE-OUTBOARD   D',                          @Z40NIVSC
               'EVICE TYPE ',' MODEL-','SERIAL NO.-'           @Z40NIVS
         LINE  ,(13,13),SKIP=1
         ROUTINE   YDUMA,SKIPPER
         LABEL 'DAY YEAR','DAY YEAR'
         LINE  (13,13),(1,21),SKIP=2
         ROUTINE   TDAY1,SETDATE
         ROUTINE   TDAY2,SETDATE
         LABEL 'DATE RANGE-','TO'                              @Z40NIVS
         LINE  (1,10),,SKIP=2                                  @Z40NIVS
         HEX   YCUA,0,3B                                       @Z40NIVS
         ROUTINE YDUMA,CUAN0                                   @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,,SKIP=1                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'PHYSICAL     BUS OUT     EQUIP. CHECK         DATA CHECX
               K         SEEK CHECK      OVERRUN     STATISTICAL'
         LINE  ,,SKIP=3                                        @Z40NIVS
         ROUTINE TSTAT,EDTFA6                                  @Z40NIVS
         LABEL 'ADDRESS      PARITY      C.U.    DRIVE     PERM  CORR  X
               RETRY     PERM  RETRY'                          @Z40NIVS
SUMTA1   LINE  (1,6),,SKIP=1                                   @Z427VLS
         HEX   TCUA,00000000,3B    CONVERT DEVICE ADDR         @Z40NIVS
         ROUTINE YDUMA,REPNT0      UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TBUSOPA,CONV1     CONV BUS OUT PARITY         @Z40NIVS
         ROUTINE YDUMA,SKIPPER     UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TEQIPATH,CONV1    ATTACH EQ CHK               @Z40NIVS
         ROUTINE YDUMA,REPNT1      UPDATE LINE PTR             @Z40NIVS
         ROUTINE TEQIPDRV,CONV1    DRIVE EQ CHK                @Z40NIVS
         ROUTINE YDUMA,REPNT2      UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TDACKPRM,CONV1    DATA CHK PERM               @Z40NIVS
         ROUTINE TDACKCOR,CONV1    DATA CHK CORR               @Z40NIVS
         ROUTINE TDACKRET,CONV1    DATA CHK RETRY              @Z40NIVS
         ROUTINE YDUMA,REPNT2      UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TSEEKP,CONV1      SEEK CHK PERM               @Z40NIVS
         ROUTINE TSEEKR,CONV1      SEEK CHK RETRY              @Z40NIVS
         ROUTINE YDUMA,REPNT2      UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TOVERRN,CONV1     OVERRUN CONV                @Z40NIVS
         ROUTINE YDUMA,SKIPPER     UPDATE PRNT LINE PTR        @Z40NIVS
         ROUTINE TSTAT,CONV1       STATISTICAL SUM             @Z40NIVS
SUMTA2   LABEL ''                                              @Z40NIVS
         LINE  (1,6),,SKIP=1                                   @Z427VLS
         ROUTINE TSTAT,EDTFA0      CYCLE THROUGH SUMREC        @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE SYMCD,FLTTST0                                 @Z40NIVS
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
SUMTA5   LINE  (61,23),(1,19),SKIP=2                           @Z40NIVS
         ROUTINE TRECLS,MOVDEV                                 @Z40NIVS
         HEX   YCPU,0,2B                                       @Z40NIVS
         HEX   YSER,0,3B                                       @Z40NIVS
         ROUTINE YCPU,SETCPUNO                                 @Z40NIVS
SUMTA6   LABEL 'FAULT SYMPTOM CODE ','SUMMARY   TYPE-OBR ',    @Z40NIVSC
               'SOURCE-OUTBOARD   D',                                  X
               'EVICE TYPE ',' MODEL-',                                X
               'SERIAL NO.-'                                   @Z40NIVS
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
SUMTAA   LABEL 'SEQUENCE BY SYMPTOM CODE'                      @Z40NIVS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'FAULT','PHYSICAL','OCCURRENCES','  DATE/TIME ',,,      X
               'SENSE FROM L','AST OCCURREN','CE'              @Z427VLS
         LINE  (1,1),(1,12),SKIP=1                             @Z427VLS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'SYMPTOM','ADDRESS',,'  LAST ENTRY','           0',     X
               ' 0 0 0 0 0 0',' 0 0 0 1 1 1',' 1 1 1 1 1 1',   @Z427VLSX
               ' 1 2 2 2 2'                                    @Z427VLS
         LINE  ,,SKIP=1                                        @Z427VLS
         ROUTINE SYMCD,FLTSRT0                                 @Z40NIVS
         LABEL 'CODE',,,,'           0',' 1 2 3 4 5 6',' 7 8 9 0 1 2', X
               ' 3 4 5 6 7 8',' 9 0 1 2 3'                     @Z427VLS
SUMTA7   LINE  (1,12),,SKIP=1                                  @Z427VLS
         HEX   SYMCD,0,2B                                      @Z40NIVS
         HEX   SYMCUA,0,2B                                     @Z40NIVS
         ROUTINE SYMOCR,GETOCCUR                               @Z40NIVS
         ROUTINE SYMDAY,FLTSYDA                                @Z40NIVS
         HEX   SYMHR,0,4B                                      @Z40NIVS
         ROUTINE YDUMA,HREDIT0     REFORMAT TIME FIELD         @Z40NIVS
         HEX   SYMSNS0,0,6B                                    @Z427VLS
         HEX   SYMSNS1,0,6B                                    @Z427VLS
         HEX   SYMSNS2,0,6B                                    @Z427VLS
         HEX   SYMSNS3,0,6B                                    @Z427VLS
SUMTA8   LABEL ''                                              @Z40NIVS
         LINE  ,,SKIP=1                                        @Z427VLS
         ROUTINE SYMCD,FLTMOV0                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1)                                          @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  IF SYMPTOM CODE IS 0 REFER TO DETAIL OBR RECORD'
SUMTAC   LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE  YDUMA,SKIPPER
SUMTAD   LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  (75,6),(1,63)                                   @Z40NIVS
         ROUTINE   TRECLS,MOVDEV
         ROUTINE TVOLID1,SETUP0                                @Z40NIVS
         ROUTINE TVOLID1,SORTV0                                @Z40NIVS
         LABEL 'SUMMARY OF I/O STATISTICAL AND OBR RECORDS BY VOLUME IDC
               ','DEVICE TYPE'
         LINE  ,(2,13),SKIP=1
         ROUTINE   YDUMA,SKIPPER
         LABEL 'VOLUME ID','PHYSICAL','TOTAL','SEEK','TOTAL',  @Z40NIVSX
               'RETRY','MEGABYTES','CORRECTABLE','MEGABYTES'   @Z40NIVS
         LINE
         ROUTINE   YDUMA,SKIPPER
         LABEL ,'ADDRESS','ACCESSES','ERRORS','MEGABYTES',     @Z40NIVSX
               'READ','READ/RETRY','READ','READ/CORR'          @Z40NIVS
         LINE  ,,SKIP=2
         ROUTINE   YDUMA,SKIPPER
         LABEL ,,'(X1024)',,'READ','ERRORS','ERRORS',                  X
               'ERRORS','ERRORS'                               @Z40NIVS
SUMTA3   LINE  (3,13),(1,1),SKIP=1                             @Z40NIVS
         ROUTINE   TVOLID1,PRVOLS
SUMTA4   LABEL ''                                              @Z40NIVS
         LINE
         ROUTINE TVOLID1,CNTDN0                                @Z40NIVS
         LABEL ' '
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  (29,13),(3,1),SKIP=2                            @Z40NIVS
         ROUTINE   YDUMA,GETTOTS
         LABEL 'TOTALS'
         LINE  ,(2,29),SKIP=1
         ROUTINE   YDUMA,SKIPPER
         LABEL 'TOTAL OVERRUNS CHAN A','TOTAL OVERRUNS CHAN B','TOTAL OC
               VERRUNS CHAN C','TOTAL OVERRUNS CHAN D'
         LINE  (21,29),(12,29)
         ROUTINE   TOCACA,GETCHANT
         LABEL 'COMMAND','COMMAND','COMMAND','COMMAND'
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE   TOCADA,GETCHANT
         LABEL 'DATA','DATA','DATA','DATA'
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL ''                                              @Z40NIVS
         LINE  ,(1,1),SKIP=1                                   @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  VOLUME ID''S ARE LISTED IN ERROR RATE SEQUENCE SX
               TARTING WITH THE ONE WITH HIGHEST % OF RETRY READ ERRORSX
               '                                               @Z40NIVS
         LINE  ,,SKIP=1                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  ZEROS IN MEGABYTES READ/XXXX COLUMNS INDICATE THX
               AT THERE WAS LESS THAN ONE MEGABYTE READ PER ERROR'
         LINE  ,,SKIP=2                                        @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'NOTE:  N/A IS AN INDICATION OF EITHER NO RETRY READ ERRX
               ORS OR CORRECTABLE READ ERRORS IN THE RESPECTIVE COUNTERX
               S '                                             @Z40NIVS
         LINE  ,(1,1),SKIP=2                                   @Z40NIVS
         ROUTINE YDUMA,SKIPPER                                 @Z40NIVS
         LABEL 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC
               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
         LINE  ,(1,1)                                          @Z40NIVS
         ROUTINE   YDUMA,THEEND
         LABEL ' '
         SPACE 2
         DC    X'FF'
         DC    XL2'0000'
         DC    XL2'0018'
         DC    XL2'0000'
         SPACE
         DC    C'$'
LABELS   EQU   *
         LSTART
         SPACE 2
         END
