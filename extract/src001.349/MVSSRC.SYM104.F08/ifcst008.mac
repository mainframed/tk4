         SPACE 2
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
         SPACE 2
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLC  &DSECT,&CSECT
         GBLC  &ITEM(1000)
         GBLA  &SHIFT(1000),&ITEMNBR
         GBLA  &NRENTS
         LCLA  &ISHIFT,&NDX
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL.4(&ISHIFT),AL.12(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN &X1,&X2,&X3,&X4,&X5,&X6,&X7,&X8,&X9,&X10,&X11,&X12,&X13,X
               &X14,&X15,&X16,&X17,&X18,&X19,&X20,&X21,&X22,&X23,&X24, X
               &X25,&X26,&X27,&X28,&X29,&X30,&X31,&X32
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLC  &SYMBOL
         LCLA  &OP,&COUNT,&BYTE
.LOOP    ANOP
&OP      SETA  &OP+1
&ITEMNBR SETA  &ITEMNBR+1
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE *,'NULL BIT COUNT FIELD'
         MEXIT
.OK1     ANOP
         AIF   ('&SYMBOL' NE '').OK
         MNOTE 'LOG ITEM SYMBOL NOT PROVIDED'
         AGO   .CNT
.OK      ANOP
         AIF   ('&SYMBOL'(1,1) EQ '''').CNT                *TEMP*
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR)  SETC '&SYSLIST(&OP,1)'
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF (&OP LT N'&SYSLIST).LOOP
         AIF   (&COUNT NE 32).NOT32
&NAME    DS    4C
         MEXIT
.NOT32   AIF   (&COUNT NE 64).ERR
&NAME    DS    8C
         MEXIT
.ERR     MNOTE '**BIT COUNT FIELDS DO NOT TOTAL 32 OR 64**'
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                            THIS MACRO ALLOWS UP TO ACHT LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         SPACE 2
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(2000)
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         LCLA  &NDX,&CTR
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 2
*  BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO     BIN MACRO  *
         SPACE 2
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
&B       SETB  1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCST008'
&DSECT   SETC  'X2715'
         TITLE 'IFCST008 - SUM MODULE - LINKNAME=IFCST008'
IFCST008 CSECT
         USING *,R9
         DC    A(ENTRIES)
         DC    A(PENTRY)
REG8     DS    F
SCSIZE   DC    H'1591'
*
*              DSGEN & DSECT FOR RECORD
*
X2715    DSECT
         DSGEN (KEY,16),(TSWS,16),(TID,8),(TDUM1,16),(TCHAR,8)
         DSGEN (DATE,32),(TIME,32)
         DSGEN (TDUM2,8),(TSER,24),(TMOD,16),(TDUM3,16)
         DSGEN (TCUA,16),(TSID,16)
*
*                   TABLE   DSGEN & DSECT
*
YDSECT   DSECT
         DSGEN (RECDATE,24),(RECTIME,32),(B0BIT0,1),(B0BIT1,1),        C
               (B0BIT2,1),(B0BIT3,1),(B0BIT4,1),(B0BIT5,1),(B0BIT6,1), C
               (B0BIT7,1)
         DSGEN (B1BIT0,1),(B1BIT1,1),(B1BIT2,1),(B1BIT3,1),            C
               (B1BIT4,1),(B1BIT5,1),(B1BIT6,1),(B1BIT7,1),            C
               (B2BIT0,1),(B2BIT1,1),(B2BIT2,1),(B2BIT3,1),            C
               (B2BIT4,1),(B2BIT5,1),(B2BIT6,1),(B2BIT7,1),            C
               (B3BIT0,1),(B3BIT1,1),(B3BIT2,1),(B3BIT3,1),            C
               (B3BIT4,1),(B3BIT5,1),(B3BIT6,1),(B3BIT7,1),(DUM5,8)
*
*              COUNTER DSGEN & CSECT
*
Y2715    DSECT
         DSGEN (DUM1,32),(FWDPTR,32)
         DSGEN (TOTALREC,16),(TYPE,8),(CHAN,8),(CUA,24),(YSER1,8)
         DSGEN (YSER2,16),(CPU,16),(SMSW,16),(XSWTCH,8),(DUM2,8)
         DS    6C
         DSGEN (DUM3,64)
         DSGEN (DUMM3,64)
*
*              DISK ADPT  COUNTERS  18 CNTRS  1 DUMMY
*
         DSGEN (DALOW,32),(DAHIGH,32)
         DSGEN (DATOTAL,16),(DB2BIT0,16),(DB2BIT1,16),(DB2BIT2,16)
         DSGEN (DB2BIT3,16),(DB2BIT4,16),(DB2BIT5,16),(DB2BIT6,16)
         DSGEN (DB2BIT7,16),(DB3BIT0,16),(DB3BIT1,16),(DB3BIT2,16)
         DSGEN (DB3BIT3,16),(DB3BIT4,16)
*
*              2790 ADPT           20 CNTRS
*
         DSGEN (MALOW,32),(MAHIGH,32)
         DSGEN (MATOTAL,16),(MB1BIT0,16),(MB1BIT1,16),(MB1BIT2,16)
         DSGEN (MB1BIT3,16),(MB1BIT4,16),(MB1BIT5,16),(MB1BIT6,16)
         DSGEN (MB1BIT7,16),(MB2BIT0,16),(MB2BIT1,16),(MB2BIT2,16)
         DSGEN (MB2BIT3,16),(MB2BIT4,16),(MB2BIT5,16),(MB2BIT6,16)
         DSGEN (MB2BIT7,16),(MB3BIT0,16),(MB3BIT1,16),(MB3BIT4,16)
         DSGEN (MB3BIT5,16),(MB3BIT6,16),(MB3BIT7,16),(MB3BIT2,16)
*
*              MPX SECTION    12 COUNTERS
*
         DSGEN (MPLODATE,32),(MPHIDATE,32)
         DSGEN (MPTOTAL,16),(PB3BIT0,16),(PB3BIT2,16),(PB3BIT3,16)
         DSGEN (PB3BIT5,16),(PB3BIT7,16),(PB3BIT1,16),(PB3BIT4,16)
*
*              2740AOPTER   SECTION  10 CTRS
*
         DSGEN (ADLODATE,32),(ADHIDATE,32)
         DSGEN (ADTOTAL,16),(AB2BIT3,16),(AB2BIT5,16),(AB2BIT6,16)
         DSGEN (AB2BIT4,16),(AB2BIT7,16)
*
*              BSC ADAPTER    28 CTRS
*
         DSGEN (BSLODATE,32),(BSHIDATE,32)
         DSGEN (BSTOTAL,16),(BB0BIT5,16),(BB0BIT6,16),(BB0BIT7,16)
         DSGEN (BB1BIT0,16),(BB1BIT3,16),(BB1BIT4,16),(BB1BIT5,16)
         DSGEN (BB1BIT6,16),(BB1BIT7,16),(BB2BIT3,16),(BB2BIT4,16)
         DSGEN (BB2BIT5,16),(BB2BIT6,16),(BB3BIT0,16),(BB3BIT1,16)
         DSGEN (BB3BIT2,16),(BB3BIT3,16),(BB3BIT4,16),(BB3BIT5,16)
         DSGEN (BB3BIT6,16),(BB3BIT7,16),(BB0BIT0,16),(BB0BIT1,16)
*
*              70 0  SPECIAL CODES    257 CTRS
*
*
*
         DSGEN (SPLODATE,32),(SPHIDATE,32)
         DSGEN (SPTOTAL,16),(SP70,16),(SP75,16),(SP78,16)
         DSGEN (SP79,16),(SP7A,16),(SP7X,16),(SP,16)
         DS    CL500
SPFFFF   DS    CL10
*
*              AREA STATIONS  1200 COUNTERS
*
         DSGEN (ASLODATE,32),(ASHIDATE,32)
         DSGEN (ASTOTAL,16),(ASF0,16),(ASF1,16),(AS,16)
         DS    CL2400
ASFFFF   DS    CL24
*
IFCST008 CSECT
*
         USING YDSECT,R2
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
*        SPECIAL ROUTINES FOR SUMMARY MODULE
*
LOOPER   LA    R2,L11(R2)               BUMP TO NXT ENTRY
         STM   R14,R12,L12(R13)         SAVE REGS
         CLI   L0(R2),HEXFF             DONE WITH TABLE
         BE    DONE                     YES-
         CLI   L7(R2),HEX80             IS IT AREA STATIONS
         BL    REGULAR                  BR-NO
         LA    R5,AREASTAT-L6           POINT TO NEXT TO DO
LOOPRTN  ST    R5,REG8                  PUT PTR INTO SAVE AREA
         B    RETURN                    RETURN
REGULAR  CLI   L7(R2),HEX70             TEST FOR SPECIAL ERRS
         BL    NOTSPEC                  BR-NO
         LA    R5,SPECERR-L6            SET TO DO PTR
         B     LOOPRTN
NOTSPEC  CLI   L7(R2),HEX4F             TEST FOR ILLEGAL CODE
         BH    LOOPER                   LOOP IF YES
         SR    R5,R5                    CLEAR REG
         IC    R5,L7(R2)                PICK UP CODE
         SRL   R5,L4                    DROP OFF UNUSED BITS
         SLL   R5,L2                    MULTI BY 4
         L     R5,ADCONS(R5)            PICK UP PROPER ADDRESS
         B     LOOPRTN
*
ADCONS   DC    A(DISKADPT-L6)           CODE=00
         DC    A(D2790ADP-L6)                10
         DC    A(MPXADPT-L6)                 20
         DC    A(ADPT2740-L6)                30
         DC    A(BSCADPT-L6)                 40
DONE     LA    R5,ALLDONE-L6
         B     LOOPRTN
XDATE    STM   R14,R12,L12(R13)         SAVE REGS
         CLC   RECDATE(L3),ZEROS        IS INPUT DATE 0'S
         BE    ADDONE                   BR-YES
         CLC   L1(R3,R3),ZEROS          IS LOW DATE FILLED IN
         BNE   CHKLOW                   BR-YES
         MVC   L1(L3,R3),RECDATE        PUT IN DATE
CHKLOW   CLC   L1(L3,R3),RECDATE        IS LOW DATE LOWER THAN REC
         BNH   CHKHI                    BR-YES
         MVC   L1(L3,R3),RECDATE        PUT IN LOWER DATE
CHKHI    CLC   L5(L3,R3),RECDATE        IS HI DATE HGHR THAN REC
         BNL   ADDONE                   BR-YES
         MVC   L5(L3,R3),RECDATE        PUT IN HI DATE
ADDONE   LH    R5,L8(R3)                ADD
         LA    R5,L1(R5)                    ONE TO
         STH   R5,L8(R3)                          COUNTER
         B     RETURN                   RETURN
*
*              SPECIAL ERRORS  70-75
*
DO7075   STM   R14,R12,L12(R13)
         CLI   L7(R2),HEX70             IS IT CODE 70
         BE    ADD70                    BR-YES
         CLI   L7(R2),HEX75             IS IT CODE 75
         BL    ADD7174                  BR CODES 71-74
         LR    R5,R3                    SET COUNTER POINTER
         BE    ADD75
         CLI   L7(R2),HEX78             TEST CODE FOR 78
         BL    ADD7X                    BR CODES 76 77
         BE    ADD78                    BR CODES 78
         CLI   L7(R2),HEX7A             TEST CODE FOR 7A
         BL    ADD79                    BR CODES 79
         BE    ADD7A                    BR CODES 7A
ADD7X    LA    R5,L2(R5)                BUMP POINTER TO COUNTER
ADD7A    LA    R5,L2(R5)
ADD79    LA    R5,L2(R5)
ADD78    LA    R5,L2(R5)
ADD75    LA    R5,L2(R5)
         B     ADDER                    BR-TO ADD 1
ADD70    LR    R5,R3                    POINT TO 1ST CTR
         B     ADDER                    BR-TO ADD
ADD7174  LA    R5,L12(R3)               BUMP UP TO 71-74 CNTRS
         LA    R7,L50                   # OF AREA STATIONS
ADD7174A CLI   L0(R5),HEXFF             IS AREA FREE
         BE    ADD7174B                 YES
         CLC   L1(L1,R5),L8(R2)         AREA STA EQUAL
         BE    ADD7174C
         LA    R5,L10(R5)               BUMP TO NXT CTRS
         BCT   R7,ADD7174A              LOOP
         B     RETURN
ADD7174B MVI   L0(R5),HEX00             SET TO ZERO
         MVC   L1(L1,R5),L8(R2)         MOVE IN AREA CODE
ADD7174C IC    R8,L7(R2)
         SLL   R8,L28                   PICK UP AREA STA
         SRL   R8,L27                   DROP OFF HIGHER 4 BITS X BY 2
         AR    R5,R8                    COMPUTE CNTR TO ADD TO
ADDER    LH    R6,L0(R5)                ADD
         LA    R6,L1(R6)                   ONE TO
         STH   R6,L0(R5)                        COUNTER
         B     RETURN                   RETURN
*
*
*
*
*
*
DOAREA   STM   R14,R12,L12(R13)
         CLI   L7(R2),HEXF0             IS IT F0
         BE    ADD70                    BR-YES ADD TO 1ST CTR
         CLI   L7(R2),HEXF1             IS IT F1
         BE    ADD75                    BR-YES ADD TO 2ND
         LA    R5,L4(R3)                SET PTR TO AREA STATIONS
         LA    R6,L100                  SET LOOP CTR
DOAREAA  CLI   L0(R5),HEXFF             IS CTRS FREE
         BE    DOAREAB                  BR-YES
         CLC   L0(L2,R5),L7(R2)         ARE AREA STATIONS EQUAL
         BE    DOAREAC                  BR-YES
         LA    R5,L24(R5)               BUMP TO NXT SET
         BCT   R6,DOAREAA               LOOP
         B     RETURN
DOAREAB  MVC   L0(L2,R5),L7(R2)         MOVE IN AREA STATION
DOAREAC  LH    R6,L2(R5)                ADD
         LA    R6,L1(R6)                    ONE TO
         STH   R6,L2(R5)                          CNTR
         LA    R5,L4(R5)                BUMP OVER TOTAL COUNTER
         SR    R8,R8
         IC    R8,L9(R2)                PICK UP ERROR CODE
         SRL   R8,L4                    DROP OFF LOW BITS
         CH    R8,H9                    CHK FOR 9
         BH    RETURN                   BR-HI
         SLL   R8,L1
         AR    R5,R8                    ADD TO 5 TO POINT TO CNTR
         B     ADDER                    ADD TO CRTR
*
*
*
*
*
*
SETUP    STM   R14,R12,L12(R13)         SAVE  REGS
         LA    R6,L4095                 TO FFFF IN FIRST SET
         CLI   L0(R3),HEXFF             TEST SET UP SWITCH
         BE    SETTABLE                 DONE
         MVI   L0(R3),HEXFF             SET SWITCH
         SH    R3,H30                   SET DSECT BASE
         USING Y2715,R3
         MVC   SPFFFF(L2),CHARFFFF
         MVC   ASFFFF(L2),CHARFFFF
         LA    R4,SP                    SET SPECIAL CNTRS
         LA    R5,L50                   AND  AREA STATION CTRS
         LA    R7,L10                   TO INDICATE EMPTY CNTRS
         BAL   R8,STOREFF
         LA    R4,AS
         LA    R5,L100
         LA    R7,L24
         BAL   R8,STOREFF
SETTABLE LA    R4,TABLE                 SET TABLE TO FFFF
         LA    R5,L234                  PRIOR TO BRINGING IN ENTRIES
         LA    R7,L2
         BAL   R8,STOREFF
*
         LA    R6,TABLE
         LR    R5,R2               PICK
         SH    R5,H2                   UP
         LH    R5,L0(R5)               REC SIZE
         SH    R5,H26              SUBTRACT REC SIZE
         SR    R4,R4
         D     R4,F35              GET NUMBER OF 35BYTE FLDS IN R5
         LTR   R5,R5               CHK FOR ZERO
         BZ    RETURN              BR-NONE TO DO
         LA    R4,L28(R2)          SET PTR TO ERROR SECTION
SETTBL01 MVC   DAYTIME(L7),L0(R4)  SAVE DATE & TIME
         LA    R4,L7(R4)           BUMP OVER DAY&TIME
         LA    R8,L7               LOOP CNTR
SETTBL02 CLC   L0(L4,R4),CHARFFFF  DUMMY ENTRY
         BE    SETTBL03            BR-YES
         CLC   L0(L4,R4),ZEROS     DUMMY ENTRY
         BE    SETTBL03            BR-YES
         MVC   L0(L7,R6),DAYTIME   MOVE DAY TIME
         MVC   L7(L4,R6),L0(R4)    MOVE ENTRY
         LA    R6,L11(R6)          BUMP OVER ENTRY
SETTBL03 LA    R4,L4(R4)           BUMP TO NXT ENTRY
         BCT   R8,SETTBL02         LOOP
         BCT   R5,SETTBL01         LOOP TILL ALL 35 BYTE ENTRY DONE
*
         LA    R4,TABLE-L11             SET PTR
SORTTBL1 LA    R4,L11(R4)               UP PTR A      TABLE SORT
         LA    R5,L11(R4)               UP PTR B TO A+11
         CR    R4,R6                    PTR A = PTR C---TABLE SORTED
         BE    RETURN                   BR-YES
SORTTBL2 CLC   L7(L1,R4),L7(R5)         COMPARE ENTRY CODES
         BL    SORTTBL3                 LOW NO SWAP
         BH    SWAP                     HI SWAP
         CLC   L0(L7,R4),L0(R5)         COMPARE DATES
         BNH   SORTTBL3                 BR-NO SWAP
SWAP     XC    L0(L11,R4),L0(R5)        SWAP
         XC    L0(L11,R5),L0(R4)           ENTRIES
         XC    L0(L11,R4),L0(R5)
SORTTBL3 LA    R5,L11(R5)               BUMP PTR B
         CR    R5,R6                    PTR B= A
         BL    SORTTBL2                 BR-NO
         B     SORTTBL1                 BR-YES
*
*
STOREFF  STC   R6,L0(R4)                STORE FFFF
         STC   R6,L1(R4)
         AR    R4,R7                    BUMP PTR BY SET AMOUNT
         BCT   R5,STOREFF               LOOP TILL DONE
         BR    R8                       RTN
*
         DROP  R3
*
*
*
SETR2    ST    R2,SAVE2                 SAVE R2
         LA    R2,TABLE-L11             SET PTR TO TABLE
         STM   R14,R12,L12(R13)         SAVE REGS
         LR    R14,R3                   SAVE FOR LATER
         L     R3,SAVE2                 SET DSECT BASE
         USING X2715,R3
         IC    R7,TCUA                  PICK UP
         SLL   R7,L8                          CUA TO CONVERT
         IC    R7,TCUA+L1
         SLL   R7,L16                   MOVE IT TO HI ORDER
         LA    R4,CUAFLD                OF R7 FOR CONVERSION
         BAL   R8,SETUPA                SET AREA
         IC    R7,TSID
         SLL   R7,L8                    PICK
         IC    R7,TSID+L1                    UP ID  &
         SLL   R7,L16                   MOVE TO HI POS
         LR    R4,R14                RESET ADDR OF COUNTER
         LA    R8,RETURN
SETUPA   LA    R5,L4                    LOOP CNT
SETUPB   SR    R6,R6                    CLEAR R6
         SLDL  R6,L4                    MOVE OVER 4 BITS
         LA    R6,CHARS(R6)             INDEX TO CHAR
         MVC   L0(L1,R4),L0(R6)         MOVE CHAR
         LA    R4,L1(R4)                BUMP PTR
         BCT   R5,SETUPB                LOOP
         BR    R8                       RETURN
*
RESETR2  L     R2,SAVE2                 PICK UP R2
         BR    R14                      RETURN
DAYTIME  DS    CL7
TABLE    DS    CL464
         DC    11X'FF'
         DROP  R3
ENTRIES  DS    0F
**
*        SUMMARY MODULE FOR 2715
**
STARTPT  EQU   *
STARTPT  SPECIAL    SETUP,0,SPACE=2     SET TABLE
         SPECIAL    SETR2,0,SPACE=2
*
*
&DSECT   SETC  'YDSECT'
*
*
         SPECIAL    LOOPER,0,SPACE=2
ALLDONE  EQU   *
ALLDONE  SPECIAL    RESETR2,0,SPACE=2
*
*
         DC    X'FF'                    END OF SUMMARY SECTION IND.
*
*
&DSECT   SETC  'YDSECT'
         EJECT
*              DISK ADAPTER      CODE=00
*
         DS    0H
DISKADPT EQU   *
DISKADPT SPECIAL    XDATE,0,SPACE=5
         SUM        B2BIT0
         SUM        B2BIT1
         SUM        B2BIT2
         SUM        B2BIT3
         SUM        B2BIT4
         SUM        B2BIT5
         SUM        B2BIT6
         SUM        B2BIT7
         SUM        B3BIT0
         SUM        B3BIT1
         SUM        B3BIT2
         SUM        B3BIT3
         SPECIAL    LOOPER,0,SPACE=1
         EJECT
*
*        2790  ADAPTER  CODE=10
*
         DS    0H
D2790ADP EQU   *
D2790ADP SPECIAL    XDATE,0,SPACE=5
         SUM        B1BIT0
         SUM        B1BIT1
         SUM        B1BIT2
         SUM        B1BIT3
         SUM        B1BIT4
         SUM        B1BIT5
         SUM        B1BIT6
         SUM        B1BIT7
         SUM        B2BIT0
         SUM        B2BIT1
         SUM        B2BIT2
         SUM        B2BIT3
         SUM        B2BIT4
         SUM        B2BIT5
         SUM        B2BIT6
         SUM        B2BIT7
         SUM        B3BIT0
         SUM        B3BIT1
         SUM        B3BIT4
         SUM        B3BIT5
         SUM        B3BIT6
         SUM        B3BIT7
         SPECIAL    LOOPER,0,SPACE=1
         EJECT
*
*        MPX SUMMARY    CODE=20
*
         DS    0H
MPXADPT  EQU   *
MPXADPT  SPECIAL    XDATE,0,SPACE=5
         SUM        B3BIT0
         SUM        B3BIT2
         SUM        B3BIT3
         SUM        B3BIT5
         SUM        B3BIT7
         SPECIAL    LOOPER,0,SPACE=2
         EJECT
*
*              2740 ADAPTER CODE=30
*
         DS    0H
ADPT2740 EQU   *
ADPT2740 SPECIAL    XDATE,0,SPACE=5
         SUM        B2BIT3
         SUM        B2BIT5
         SUM        B2BIT6
         SPECIAL    LOOPER,0,SPACE=2
         EJECT
*
*              BSC ADAPTER  CODE=40
*
         DS    0H
BSCADPT  EQU   *
BSCADPT  SPECIAL    XDATE,0,SPACE=5
         SUM        B0BIT5
         SUM        B0BIT6
         SUM        B0BIT7
         SUM        B1BIT0
         SUM        B1BIT3
         SUM        B1BIT4
         SUM        B1BIT5
         SUM        B1BIT6
         SUM        B1BIT7
         SUM        B2BIT3
         SUM        B2BIT4
         SUM        B2BIT5
         SUM        B2BIT6
         SUM        B3BIT0
         SUM        B3BIT1
         SUM        B3BIT2
         SUM        B3BIT3
         SUM        B3BIT4
         SUM        B3BIT5
         SUM        B3BIT6
         SUM        B3BIT7
         SPECIAL    LOOPER,0,SPACE=2
         EJECT
*
*              SPECIAL CODES 70--75
*
         DS    0H
SPECERR  EQU   *
SPECERR  SPECIAL    XDATE,0,SPACE=5
         SPECIAL    DO7075,0,SPACE=261
         SPECIAL    LOOPER,0,SPACE=1
*
*                   AREA STATIONS
*
         DS    0H
AREASTAT  EQU   *
AREASTA  SPECIAL    XDATE,0,SPACE=5
         SPECIAL    DOAREA,0,SPACE=1214
         SPECIAL    LOOPER,0,SPACE=1
         EJECT
&DSECT   SETC  'Y2715'
&CSECT   SETC  'PENTRY'
*
PENTRY   DS    0F
         USING *,R9
         USING Y2715,R2
         DC    A(PEDIT)
         DC    CL8'IFCST008'
R9PTR    DS    F
LABELPTR DS    F
*
*
*
*
*              SPECIAL ROUTINES FOR EDIT SECTION
*
*
FREECORE STM   R14,R12,L12(R13)
         LR    R12,R13                  SAVE POINTERS
         LA    R13,FSAVE                SET UP LINK CONVS
         ST    R12,L4(R13)
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP POSS PTR
         ST    R3,L28(R12)              SAVE IT IN SAVE AREA
         LH    R0,SIZE                  SET UP TO FREE CNTRS
         LR    R1,R2                    SET ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3                    IS THERE ANOTHER COUNTER BUFF
         BZ    RETURN0                  BR-NO
         LA    R5,PEDIT+L10        SET UP POINTERS
         LA    R6,LABELS-L1             TO RESTART TABLE
         STM   R5,R6,R9PTR              STORE THEM
RETURN0  L     R13,L4(R13)              PICK UP HI SAVE AREA
         LM    R14,R12,L12(R13)
         BR    R14                      RETRUN
*
*
*
SETADCON LM    R5,R6,RTNADDRS            POINT TO NXT SECTION
         STM   R5,R6,R9PTR              BY PUTTING ADCONS INTO TBL PTRS
         STM   R14,R15,L12(R13)         STORE 0 INTO RRIB STOP PRINT
         B     SWAPADCN                 BR
*
CONVERT  STM   R14,R12,L12(R13)          SAVE REGS
         LH    R5,L0(R4)                PICK UP NUMBER
         CVD   R5,DBLWORD               CONVERT TO PACKED DEC
         UNPK  L0(L5,R3),DBLWORD+L3(L5)    UNPK IT INTO PR BUFF
         MVZ   L4(L1,R3),L0(R3)          MOVE ON PROPER ZONE
         B     RETURN                    RETURN
SETCPUNO STM   R5,R8,FSAVE         SAVE WORK REGS              @Z427VLS
         SR    R5,R5               CLEAR REG 5                 @Z427VLS
         ICM   R5,X'3',0(R4)       PICK UP CPU TYPE FIELD      @Z427VLS
         LTR   R5,R5               IS FIELD ZERO?              @Z427VLS
         BNZ   RET1                NO,CPU TYPE THERE RETURN    @Z427VLS
         LA    R6,L48              AMOUNT TO BACK UP           @Z427VLS
         SR    R3,R6               BACK UP OUTPUT PTR          @Z427VLS
         MVC   L24(L6,R3),SHARED   SERIAL NO.- SHARED          @Z427VLS
RET1     LM    R5,R8,FSAVE         RESTORE REGS                @Z427VLS
         BR    R14                 RETURN                      @Z427VLS
*                                                              @Z427VLS
SHARED   DC   C'SHARED'                                        @Z427VLS
*
*
*
CONVERT1 ST    R4,SAVE4
CONVERT3 LH    R2,L0(R4)                PICK UP COUNTER
         CVD   R2,DBLWORD               CONVERT IT
         UNPK  L0(L5,R3),DBLWORD+L3(L5) UNPACK IT
         MVZ   L4(L1,R3),L0(R3)         PUT ON PROPER ZONE
         AR    R3,R6                    UP TO NXT COLUMN
         LA    R4,L2(R4)                 UP TO NXT COUNTER
         BCT   R5,CONVERT3              LOOP TILL DONE
         STM   R7,R8,R9PTR
         L     R5,SAVE4
         SH    R5,H2                    BACK UP TO START OF CNTRS
CONVERT2 MVC   L0(L100,R5),L0(R4)       SHIFT COUNTERS OCER TOP
         LA    R4,L100(R4)               THE COUNTERS JUST USED
         LA    R5,L100(R5)
         BCT   R10,CONVERT2             LOOP TILL ALL DONE
         B     RETURN                    RETURN
*
*
*
SETSPEC  STM   R14,R12,L12(R13)         SAVE REGS
         LH    R7,L0(R4)                PICK UP AREA STA
         LTR   R7,R7                    END OF LIST
         BZ    RETURN                   BR END
         CLC   L0(L2,R4),CHARFFFF       IS IT END
         BE    RETURN
         SLL   R7,L24                   SHIFT TO HI SIDE
         LA    R5,L1                    LOOP COUNT
         BAL   R8,AREAHEX               CONVERT AREA STA
         LA    R3,L12(R3)                SET BUFF PTR
         LA    R4,L2(R4)                 SET CTR PTR
         LA    R5,L4                     COUNTER #
         LA    R6,L10                   BUFFER SPACE VALUE
         LM    R7,R8,SPECADS            SET RTN PTRS
         LA    R10,L5                    NUMBER OF 100 BYTE MOVES
         B     CONVERT1
*
AREAHEX  LR    R2,R3                     SET WORK REG
AREAHEX1 SR    R6,R6
         SLDL  R6,L4                     MOVE 4 BITS TO R6
         LA    R6,CHARS(R6)              INDEX INTO CHARS
         MVC   L0(L1,R2),L0(R6)         MOVE INDEXED CHAR TO BUFF
         SR    R6,R6                    CLEAR 6
         SLDL  R6,L4                    MOVE NXT 4 BYTS
         LA    R6,CHARS(R6)              INDEX AGAIN
         MVC   L1(L1,R2),L0(R6)          MOVE INDEXED CHAR
         LA    R2,L4(R2)                BUMP PTR
         BCT   R5,AREAHEX1              LOOP
         BR    R8                       RETURN
*
*
*
SETAREA  STM   R14,R12,L12(R13)         SAVE REGS
         LH    R7,L0(R4)                PICK UP CNTR
         LTR   R7,R7                     TEST FOR END
         BZ    RETURN                   BR-YES
         CLC   L0(L2,R4),CHARFFFF       IS IT FF'S
         BE    RETURN                    BR-YES
         SLL   R7,L16                   MOVE TO HI
         LA    R5,L2                     SET LOOP CNT
         BAL   R8,AREAHEX               CONVERT AREA STA
         LA    R3,L12(R3)               SET BUFF PTR
         LA    R4,L2(R4)                SET COUNTER POINTER
         LA    R5,L11                   #OF CNTRS
         LA    R6,L9                    BUFFER SPACE
         LM    R7,R8,AREAADS            SET RTN PTS
         LA    R10,L24                   #OF 100 BYTE MOVES
         B     CONVERT1                 1
*
*
*
SORTSPEC STM   R14,R12,L12(R13)
         LA    R5,L500(R4)              SET PTR TO END OF TABLE
         LA    R6,L10                   SET SIZE OF AREA
         B     SORTIT
*
*
*
SORTAREA STM   R14,R12,L12(R13)
         LA    R5,L2400(R4)             SET PTR TO END OF TABLE
         LA    R6,L24                    SET SIZE OF AREA
         B     SORTIT
SORTIT0  AR    R4,R6                    BUMP R4 TO NEXT ENTRY
SORTIT   CR    R4,R5                    AT END OF TABLE
         BNL   RETURN                    BR-YES
         LR    R7,R4
SORTIT1  AR    R7,R6                    POINT TO NXT ENTRY
         CR    R7,R5                    IS ONE PASS DONE
         BNL   SORTIT0                   BR-YES
         CLC   L0(L2,R4),L0(R7)
         BL    SORTIT1
         BCTR  R6,R0
         EX    R6,SWAP1
         EX    R6,SWAP2
         EX    R6,SWAP1
         LA    R6,L1(R6)
         B     SORTIT1
SWAP1    XC    L0(L0,R4),L0(R7)
SWAP2    XC    L0(L0,R7),L0(R4)
*
*
SETHEAD  STM   R14,R12,L12(R13)         SAVE REGS
         LH    R15,L8(R4)               CHECK COUNT
         LTR   R15,R15                  IS IT ZERO
         BZ    SETADCON                 BR-YES SKIP SECTION
         MVC   IDFLD(L4),DUM3+L4       MOVE IN REC ID
         MVC   L0(L30,R3),HEADER1       SET
         MVC   FROMDAY(L3),L1(R4)          UP
         MVC   TODAY(L3),L5(R4)             HEADER
         MVC   L33(L33,R3),HEADER2      IF NOT ZERO
SWAPADCN LM    R5,R6,RTNADDRS
         MVC   RTNADDRS(L48),RTNADDRS+L8     ADDJUST PTRS TO NXT DECT
         STM   R5,R6,RTNADDRS+L48
RETURN   LM    R14,R12,L12(R13)
SKIPPER  BR    R14
*
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L11      EQU   11
L12      EQU   12
L13      EQU   13
L16      EQU   16
L24      EQU   24
L27      EQU   27
L28      EQU   28
L30      EQU   30
L33      EQU   33
L48      EQU   48
L50      EQU   50
L64      EQU   64
L100     EQU   100
L234     EQU   234
L500     EQU   500
L2400    EQU   2400
L4095    EQU   4095
HEX00    EQU   X'00'
HEXFF    EQU   X'FF'
HEX80    EQU   X'80'
HEX70    EQU   X'70'
HEX4F    EQU   X'4F'
HEX75    EQU   X'75'
HEX78    EQU   X'78'
HEX7A    EQU   X'7A'
HEXF0    EQU   X'F0'
HEXF1    EQU   X'F1'
*
DBLWORD  DS    D
*
FSAVE    DS    18F
SAVE2    DS    F
SAVE4    DS    F
F35      DC    F'35'
SPECADS  DC    A(SPECIALR-L4)
         DC    A(ASSTARTL-L2)
AREAADS  DC    A(AREASTA-L4)
         DC    A(AREASTAL-L1)
RTNADDRS DC    A(MASTART-L4)
         DC    A(MASTARTL)
         DC    A(MPSTART-L4)
         DC    A(MPSTARTL)
         DC    A(ADSTART-L4)
         DC    A(ADSTARTL)
         DC    A(BSSTART-L4)
         DC    A(BSSTARTL)
         DC    A(SPSTART-L4)
         DC    A(SPSTARTL)
         DC    A(ASSTART-L4)
         DC    A(ASSTARTL)
         DC    A(FRBUFF-L4)
         DC    A(FRBUFFL)
H2       DC    H'2'
H9       DC    H'9'
H26      DC    H'26'
SIZE     DC    H'3212'
H30      DC    H'30'
ZEROS    DC    XL4'00'
CHARFFFF DC    4X'FF'
CHARS    DC    C'0123456789ABCDEF'
HEADER1  DS    0CL30
         DC    CL5'CUA'
CUAFLD   DC    CL10' '
         DC    CL10'2715 ID'
IDFLD    DC    CL5' '
HEADER2  DS    0CL33
         DC    C'DATE RANGE - FROM - '
FROMDAY  DC    C'XX  TO - '
TODAY    DC    C'XXX'
*
&DSECT   SETC  'Y2715'
&CSECT   SETC  'PENTRY'
PEDIT    DC    2F'0'
         DC    A(LABELS)
         DC    H'0'
*
RESTART  DC    X'01'
         DC    X'000B8B00'              SKIP TO CHAN 1
         LABEL ''
*
         LINE       (1,1),(1,1),SKIP=2
         ROUTINE    DUM1,SKIPPER
         LABEL      '2715 ERROR LOG DATA SUMMARY'
*
         LINE       (8,24),(1,20)                                S21021
         HEX        CPU,0,2B                                     S21021
         HEX        YSER1,0,3B                                   S21021
         ROUTINE CPU,SETCPUNO                                  @Z427VLS
         LABEL      'MODEL -','SERIAL NO'                        S21021
         LINE       (40,1),(5,1)
         ROUTINE    TOTALREC,CONVERT
         LABEL      'TOTAL NUMBER OF RECORDS PROCESSED'
*
         LINE       (29,35),(2,35)
         ROUTINE    DUM1,SKIPPER
         LABEL      ''
*
         EJECT
         LINE
         ROUTINE    DALOW,SETHEAD
         LABEL      'DISK ADAPTER ERROR SUMMARY'
*
         LINE       ,(4,35),SKIP=1
         ROUTINE    DUM1,SKIPPER
         ROUTINE    DATOTAL,CONVERT
         LABEL 'ERROR STATUS','TOTAL RECORDS PROCESSED'
*
         LINE       ,(5,35)
         ROUTINE    DB2BIT0,CONVERT
         LABEL      'READ CHECK'
*
         LINE
         ROUTINE    DB2BIT1,CONVERT
         LABEL      'CSBI PTY ERROR - DATA'
*
         LINE       ,(5,34)
         ROUTINE    DB2BIT2,CONVERT
         LABEL      'CSBI PTY ERROR - ADDR','READ/WRITE OP CODE STATUS'
*
         LINE       ,(5,35)
         ROUTINE   DB2BIT3,CONVERT
         ROUTINE   DB3BIT0,CONVERT
         LABEL      'DATA REG PARITY CK','READ LABEL'
*
         LINE
         ROUTINE    DB2BIT4,CONVERT
         ROUTINE    DB3BIT1,CONVERT
         LABEL      'ADDR REG PARITY CX','WRITE'
*
         LINE
         ROUTINE    DB2BIT5,CONVERT
         ROUTINE    DB3BIT2,CONVERT
         LABEL      'OVERRUN','READ CHECK'
*
         LINE
         ROUTINE    DB2BIT6,CONVERT
         ROUTINE    DB3BIT3,CONVERT
         LABEL      'WRITE SELECT CHECK','READ'
*
         LINE       ,,SKIP=2
         ROUTINE    DB2BIT7,CONVERT
MASTARTL LABEL      'MODULO 4/LENGTH CK'
*
         EJECT
MASTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    MALOW,SETHEAD
         LABEL      '2790 ADAPTER ERROR SUMMARY'
*
         LINE       ,(4,35),SKIP=1
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MATOTAL,CONVERT
         LABEL      '','TOTAL ERROR RECORDS'
*
         LINE
         ROUTINE    DUM1,SKIPPER
         LABEL      'PC ADAPTER STATUS'
*
         LINE       ,(5,34)
         ROUTINE    MB1BIT0,CONVERT
         LABEL      'TRANSMFT ACTIVE FRAME','PARITY ERRORS'
*
         LINE
         ROUTINE    MB1BIT1,CONVERT
         ROUTINE    MB2BIT0,CONVERT
         LABEL      'RECEIVE CHARACTER SYNC',' ACCUMULATOR HIGH',      C
               'SERVICE REQUESTS'
*
         LINE       ,(5,35)
         ROUTINE    MB1BIT2,CONVERT
         ROUTINE    MB2BIT1,CONVERT
         ROUTINE    MB3BIT0,CONVERT
         LABEL      'LOOP ACTIVE','ACCUMULATOR LOW','RECEIVE'
         LINE
         ROUTINE    MB1BIT3,CONVERT
         ROUTINE    MB2BIT2,CONVERT
         ROUTINE    MB3BIT1,CONVERT
         LABEL      'RECEIVE ACTIVE FRAME','TRANSMIT SHIFT REGISTER',  X
               'TRANSMIT'
*
         LINE
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MB2BIT3,CONVERT
         LABEL      ' ','RECEIVE  SHIFT REGISTER'
*
         LINE       ,(4,35)
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MB2BIT7,CONVERT
         ROUTINE    MB3BIT4,CONVERT
         LABEL      'SEGMENT STATUS',' CONTROL REGISTER 2',            *
               'PC NOT RECEIVING FRAME'
*
         LINE
         ROUTINE    MB1BIT4,CONVERT
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MB2BIT4,CONVERT
         LABEL      ' SEGMENT A ACTIVE',' ','TRANSMIT FRAME OVERRUN'
         LINE
         ROUTINE    MB1BIT5,CONVERT
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MB2BIT5,CONVERT
         LABEL      ' SEGMENT B ACTIVE',' ','RECEIVE FRAME OVERRUN'
*
         LINE
         ROUTINE    MB1BIT6,CONVERT
         ROUTINE    MB3BIT6,CONVERT
         ROUTINE    MB2BIT6,CONVERT
         LABEL      ' SEGMENT C ACTIVE','RECEIVE RESET ERROR',         X
               'RECEIVE RE-SYNC ERROR'
         LINE       ,,SKIP=2
         ROUTINE    MB1BIT7,CONVERT
         ROUTINE    MB3BIT7,CONVERT
         ROUTINE    MB3BIT5,CONVERT
MPSTARTL LABEL      ' SEGMENT D ACTIVE','TRANSMIT RESET ERROR',        X
               'LOST LOOP SYNC'
*
         EJECT
MPSTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    MPLODATE,SETHEAD
         LABEL      'MPX ADAPTER ERROR SUMMARY'
*
         LINE       ,(4,35),SKIP=1
         ROUTINE    DUM1,SKIPPER
         ROUTINE    MPTOTAL,CONVERT
         LABEL      'ERROR STATUS','TOTAL RECORDS PROCESSED'
*
         LINE       ,(5,35)
         ROUTINE    PB3BIT0,CONVERT
         LABEL      'PROGRAM CHECK'
*
         LINE
         ROUTINE    PB3BIT2,CONVERT
         LABEL      'I/O BUS OUT CHECK'
*
         LINE
         ROUTINE    PB3BIT3,CONVERT
         LABEL      'EQUIPMENT CHECK'
*
         LINE
         ROUTINE    PB3BIT3,CONVERT
         LABEL      'XFER CHECK'
*
         LINE       ,,SKIP=2
         ROUTINE    PB3BIT7,CONVERT
ADSTARTL LABEL      'I/O BUS IN CHECK'
*
         EJECT
ADSTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    ADLODATE,SETHEAD
         LABEL      '2740 ADAPTER ERROR SUMMARY'
*
         LINE       ,(4,35),SKIP=1
         ROUTINE    DUM1,SKIPPER
         ROUTINE    ADTOTAL,CONVERT
         LABEL      'HARDWARE ERROR','TOTAL RECORDS PROCESSED'
*
         LINE       ,(5,35)
         ROUTINE    AB2BIT3,CONVERT
         LABEL      'KEYBOARD BIT OVERRUN'
*
         LINE
         ROUTINE    AB2BIT5,CONVERT
         LABEL      'ADAPTER INPUT PRTY ERR'
*
         LINE       ,,SKIP=2
         ROUTINE    AB2BIT6,CONVERT
BSSTARTL LABEL      'CSBO PARITY ERROR'
*
         EJECT
BSSTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    BSLODATE,SETHEAD
         LABEL      'BSC ADAPTER ERROR SUMMARY'
*
         LINE       ,(4,35)
         ROUTINE    BSTOTAL,CONVERT
         LABEL      'TOTAL RECORDS PROCESSED'
*
         LINE       ,,SKIP=1
         ROUTINE    DUM1,SKIPPER
         LABEL      'MODE OF OPERATION','BSC STATUS','BSC ADAPTER STATUX
               S'
*
         LINE       ,(5,35)
         ROUTINE    BB0BIT5,CONVERT
         ROUTINE    BB1BIT0,CONVERT
         ROUTINE    BB3BIT0,CONVERT
         LABEL      'INITIALIZATION','LOST OPERATIONAL COND',          C
               'DATA SET READY OFF'
*
         LINE
         ROUTINE    BB0BIT6,CONVERT
         ROUTINE    BB1BIT3,CONVERT
         ROUTINE    BB3BIT1,CONVERT
         LABEL      'TRANSMIT TEXT','TEXT TIMEOUT','CLEAR TO SEND OFF'
*
         LINE
         ROUTINE    BB0BIT7,CONVERT
         ROUTINE    BB1BIT4,CONVERT
         ROUTINE    BB3BIT2,CONVERT
         LABEL      'RECEIVE TEXT','N - RETRYS','OVERRUN'
*
         LINE
         ROUTINE    BB0BIT7,SKIPPER
         ROUTINE    BB1BIT5,CONVERT
         ROUTINE    BB3BIT3,CONVERT
         LABEL      '','INVALID CHARACTER','LOST BIT SERVICE'
*
         LINE       ,(4,35)
         ROUTINE    BB0BIT7,SKIPPER
         ROUTINE    BB1BIT6,CONVERT
         ROUTINE    BB3BIT4,CONVERT
         LABEL      'HARDWARE ERROR',' DATA CHECK',' TRANSMIT'
*
         LINE       ,(5,35)
         ROUTINE    BB2BIT3,CONVERT
         ROUTINE    BB1BIT7,CONVERT
         ROUTINE    BB3BIT5,CONVERT
         LABEL      'XFER ADAPT WORD LATCH','RESPONSE TIMEOUT',        C
               'DATA TERMINAL READY'
*
         LINE
         ROUTINE    BB2BIT4,CONVERT
         ROUTINE    BB2BIT4,SKIPPER
         ROUTINE    BB3BIT6,CONVERT
         LABEL      'BSC CHARACTER OVERRUN','','REQUEST TO SEND'
*
         LINE
         ROUTINE    BB2BIT5,CONVERT
         ROUTINE    BB2BIT5,SKIPPER
         ROUTINE    BB3BIT7,CONVERT
         LABEL      'ADAPTER IN PARITY ERROR','','DATA CARRIER OFF'
*
         LINE       ,,SKIP=2
         ROUTINE    BB2BIT6,CONVERT
SPSTARTL LABEL      'CSBO PARITY ERROR'
*
         EJECT
SPSTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    SPLODATE,SETHEAD
         LABEL      'SPECIAL ERROR LOG SUMMARY'
*
         LINE       ,(4,35)
         ROUTINE    SPTOTAL,CONVERT
         LABEL      'TOTAL RECORDS PROCESSED'
*
         LINE       (46,35),(5,35),SKIP=1
         ROUTINE    SP70,CONVERT
         LABEL      'ERROR CODE 70 TOTAL RECORDS PROCESSED -'
*
         LINE
         ROUTINE    SP75,CONVERT
         LABEL      'ERROR CODE 75 TOTAL RECORDS PROCESSED -'
         LINE
         ROUTINE    SP78,CONVERT
         LABEL      'ERROR CODE 78 TOTAL RECORDS PROCESSED -'
         LINE
         ROUTINE    SP79,CONVERT
         LABEL      'ERROR CODE 79 TOTAL RECORDS PROCESSED -'
         LINE
         ROUTINE    SP7A,CONVERT
         LABEL      'ERROR CODE 7A TOTAL RECORDS PROCESSED -'
         LINE       ,,SKIP=2
         ROUTINE    SP7X,CONVERT
         LABEL      'ERROR CODE 7X TOTAL RECORDS PROCESSED -'
*
         LINE       ,,SKIP=1
         ROUTINE    DUM1,SKIPPER
         LABEL      'AREA STA.      ERROR     ERROR     ERROR     ERRORX
               '
         LINE
         ROUTINE    DUM1,SKIPPER
         LABEL      ' ADDRESS      CODE 71   CODE 72   CODE 73   CODE 7X
               4'
         LINE       ,,SKIP=1
         ROUTINE    DUM3,SKIPPER
         LABEL      ' -----         -----     -----     -----     -----X
               '
         LINE       ,,SKIP=1
         ROUTINE    SP,SORTSPEC
         LABEL      ''
SPECIALR LINE       (8,11),(1,1),SKIP=1
         ROUTINE    SP,SETSPEC
         LABEL      ''
         LINE
         ROUTINE    SP,SKIPPER
ASSTARTL LABEL      ''
*
         EJECT
*
ASSTART  LINE       (29,35),(2,35),SKIP=2
         ROUTINE    ASLODATE,SETHEAD
         LABEL      'AREA STATION ERROR SUMMARY'
*
         LINE
         ROUTINE    ASTOTAL,CONVERT
         LABEL      'TOTAL RECORDS PROCESSED'
*
         LINE       ,(5,1),SKIP=1
         ROUTINE    DUM1,SKIPPER
         LABEL      'ERROR TYPE---------(0)------(1)------(2)------(3)-X
               -----(4)------(5)------(6)------(7)------(8)------(9)'
*
         LINE       ,(14,1)
         ROUTINE    DUM1,SKIPPER
         LABEL      'TOTAL  AREA STA  DEVICE   INVALID   CHANGE  CHANGEX
               - END REQST RECEIVE   NULL    RECORD   VALID'
*
         LINE       ,(1,1)
         ROUTINE    DUM1,SKIPPER
         LABEL      'AREA DEV.   RECORDS  ADDRESS  ADDRESS AREA STA  INX
               -DATA IN STATUS STATUS    DATA   ACKNWLDG LGTH CHK CHAR *
               CK'
*
         LINE       (2,1),,SKIP=1
         ROUTINE    DUM1,SKIPPER
         LABEL      'STA. ADDR  PROCESSED ERROR    ERROR   RESPONSE    *
               BYTE    BYTE    ERROR    OVERRUN  OVERRUN  ERROR     ERR*
               OR'
*
         LINE       ,,SKIP=1
         ROUTINE    AS,SORTAREA
         LABEL      ''
AREASTA  LINE
         ROUTINE    AS,SETAREA
AREASTAL LABEL      ''
*
         LINE       (15,1),(3,1)
         ROUTINE    ASF0,CONVERT
         LABEL      'F0'
*
         LINE
         ROUTINE    ASF1,CONVERT
FRBUFFL  LABEL      'F1'
*
*
         EJECT
FRBUFF   LINE
         ROUTINE    DUM1,FREECORE
         LABEL      ''
         DC    X'FF'
         DC    XL6'00'
         DC    C'$'
LABELS   EQU   *
         LSTART
         END
