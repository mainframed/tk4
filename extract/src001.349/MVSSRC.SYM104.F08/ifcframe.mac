         TITLE 'IFCFRAME - FRAME PROCESSOR/INTERPRETER                 *
                        '
IFCFRAME CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFRAME  78.139'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  LA    @11,4095(,@10)                                      0001
         LA    @12,4095(,@11)                                      0001
         USING @PSTART,@10                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS IS THE ROOT SEGMENT.                                @G51DGJJ*/
*/* FUNCTIONS - CHECKS FOR MISSING FRAMES, PRINTS APPROPRIATE        */
*/*             ERROR MESSAGES.                              @G51DGJJ*/
*/*           - INVOKES IFCFRAMM, IFCFRAMC TO EDIT AND PRINT @G51DGJJ*/
*/*             MACHINE-INDEPEND. PARTS OF MCH, CCH LOG ERROR        */
*/*             RECORDS, RESPECTIVELY.                       @G51DGJJ*/
*/*           - INVOKES 'FRAMES' WHICH PERFORMS MORE MISSING @G51DGJJ*/
*/*             FRAME CHECKS BEFORE PROCEEDING TO EDIT       @G51DGJJ*/
*/*             AND PRINT EXTENDED LOGOUT, CHANNEL LOGOUT    @G51DGJJ*/
*/*             AREAS OF MCH, CCH LOG ERROR RECORDS, RESPECTIVELY.   */
*/*           - EXERCISES SELECTABLE DEBUGGING OPTIONS.      @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*  IF DB4 = ON THEN                                                0164
         TM    DB4,B'10000000'                                     0164
         BNO   @RF00164                                            0164
*    DO;                                                   /*@G51DGJJ*/
*      DB4 = OFF;                                          /*@G51DGJJ*/
         NI    DB4,B'01111111'                                     0166
*      Q = LINECT/FRMSPACE;    /* ENSURE INTEGRAL NO. OF FRAMES ON A */
         LA    @14,25                                              0167
         LH    @00,LINECT(,R2)                                     0167
         SRDA  @00,32                                              0167
         DR    @00,@14                                             0167
         ST    @01,Q                                               0167
*      LINECT1 = FRMSPACE * Q; /* PAGE - 25 LINES PER FRAME  @G51DGJJ*/
         MR    @00,@14                                             0168
         ST    @01,LINECT1                                         0168
*      IF DEBUG4 = ON THEN                                         0169
         TM    DEBUG4(R2),B'00001000'                              0169
         BNO   @RF00169                                            0169
*        DO;                 /* PRINT PROGRAM NAME, COMPILE DATE     */
*          R15 = R10 - 27;                                 /*@G51DGJJ*/
         LR    R15,R10                                             0171
         SH    R15,@CH01142                                        0171
*          DDTYPE = '1';                                   /*@G51DGJJ*/
         MVI   DDTYPE,C'1'                                         0172
*          GEN(MVC  PRTLINE1(16),0(15));                   /*@G51DGJJ*/
         MVC  PRTLINE1(16),0(15)
*          R15 = ADDR(IFCFRAMM);                           /*@G51DGJJ*/
         L     R15,@CV01143                                        0174
*          GEN(MVC  PRTLINE1+20(16),5(15));                /*@G51DGJJ*/
         MVC  PRTLINE1+20(16),5(15)
*          R15 = ADDR(IFCFRAMC);                           /*@G51DGJJ*/
         L     R15,@CV01144                                        0176
*          GEN(MVC  PRTLINE1+40(16),5(15));                /*@G51DGJJ*/
         MVC  PRTLINE1+40(16),5(15)
*          CALL PRINT2;                                    /*@G51DGJJ*/
         BAL   @14,PRINT2                                          0178
*          DDTYPE = '0';                                   /*@G51DGJJ*/
         MVI   DDTYPE,C'0'                                         0179
*        END;                                              /*@G51DGJJ*/
*    END;                                                  /*@G51DGJJ*/
@RF00169 DS    0H                                                  0182
*  IF FIRSTFRM = ON & R5 = ZERO THEN                               0182
@RF00164 TM    FIRSTFRM,B'00100000'                                0182
         BNO   @RF00182                                            0182
         LTR   R5,R5                                               0182
         BNZ   @RF00182                                            0182
*     DO;                                                  /*@G51DGJJ*/
*       IF (LRTKEY1 & 'F0'X) = MCHLG THEN                          0184
         MVC   @TS00001(1),LRTKEY1(R7)                             0184
         NI    @TS00001,X'F0'                                      0184
         CLI   @TS00001,X'10'                                      0184
         BNE   @RF00184                                            0184
*         CALL IFCFRAMM;      /* PRINT MCH MACH.-INDEPEND. DATA      */
         L     @15,@CV01143                                        0185
         BALR  @14,@15                                             0185
*       ELSE                                                       0186
*         CALL IFCFRAMC;      /* PRINT CCH CHAN.-INDEPEND. DATA      */
         B     @RC00184                                            0186
@RF00184 L     @15,@CV01144                                        0186
         BALR  @14,@15                                             0186
*       IF MCHCEL ^= ZERO THEN  /* TEST EXTENDED LOGOUT PRESENT      */
@RC00184 MVC   @ZT00002+2(2),MCHCEL(R7)                            0187
         L     @14,@ZT00002                                        0187
         LTR   @14,@14                                             0187
         BZ    @RF00187                                            0187
*       CALL NOFRAMES;        /* NO FRAMES AVAILABLE TO EDIT LOGOUT  */
         BAL   @14,NOFRAMES                                        0188
*       CALL HEXDUMPL;        /* HEX DUMP LOG ERROR RECORD   @G51DGJJ*/
@RF00187 BAL   @14,HEXDUMPL                                        0189
*     END;                                                 /*@G51DGJJ*/
*  ELSE                                                            0191
*    DO;                                                   /*@G51DGJJ*/
         B     @RC00182                                            0191
@RF00182 DS    0H                                                  0192
*     CALL FRAMES;            /* FRAMES AVAILABLE            @G51DGJJ*/
         BAL   @14,FRAMES                                          0192
*     IF HXDMPFRM = ON × DEBUG45 = ON THEN                         0193
         TM    HXDMPFRM,B'00000100'                                0193
         BO    @RT00193                                            0193
         TM    DEBUG45(R2),B'00000100'                             0193
         BNO   @RF00193                                            0193
@RT00193 DS    0H                                                  0194
*       CALL HEXDUMPF;        /* HEX DUMP FRAME              @G51DGJJ*/
         BAL   @14,HEXDUMPF                                        0194
*     IF HXDMPLOG = ON THEN                                        0195
@RF00193 TM    HXDMPLOG,B'01000000'                                0195
         BNO   @RF00195                                            0195
*       DO;                        /* END OF FRAME SET       @G51DGJJ*/
*         HXDMPLOG = OFF;                                  /*@G51DGJJ*/
         NI    HXDMPLOG,B'10111111'                                0197
*         CALL HEXDUMPL;           /* HEXDUMP LOG ERROR RECORD       */
         BAL   @14,HEXDUMPL                                        0198
*         IF DEBUG44 = ON THEN                                     0199
         TM    DEBUG44(R2),B'00001000'                             0199
         BNO   @RF00199                                            0199
*           GEN(ABEND 160,DUMP);                           /*@G51DGJJ*/
         ABEND 160,DUMP
*       END;                                               /*@G51DGJJ*/
@RF00199 DS    0H                                                  0202
*    END;                                                  /*@G51DGJJ*/
@RF00195 DS    0H                                                  0203
*  R15 = RETCODE;                                          /*@G51DGJJ*/
@RC00182 LH    R15,RETCODE                                         0203
*  RESPECIFY (R15) UNRESTRICTED;                           /*@G51DGJJ*/
*  RETURN;                                                 /*@G51DGJJ*/
@EL00001 L     @13,4(,@13)                                         0205
@EF00001 DS    0H                                                  0205
@ER00001 L     @14,12(,@13)                                        0205
         LM    @00,@12,20(@13)                                     0205
         BR    @14                                                 0205
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A 'NO FRAMES AVAILABLE' MESSAGE         @G51DGJJ*/
*/* ON EREPPT PRINTER DATA SET.                              @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NOFRAMES: PROC;                                           /*@G51DGJJ*/
NOFRAMES STM   @14,@12,@SA00002                                    0206
*  SPACING = SINGLE;                                       /*@G51DGJJ*/
         MVI   SPACING,X'09'                                       0207
*  CALL PRINT2;              /* PRINT BLANK LINE, SINGLE SPACE       */
         BAL   @14,PRINT2                                          0208
*  CALL IFCMSG(79,ADDR(MESSAGE)); /* GET ERROR MESSAGE       @G51DGJJ*/
         LA    @06,MESSAGE                                         0209
         ST    @06,@AFTEMPS                                        0209
         L     @15,ADIFCMSG(,R2)                                   0209
         LA    @01,@AL00209                                        0209
         BALR  @14,@15                                             0209
*  IF (LRTKEY1 & 'F0'X) = MCHLG THEN /* INSERT VAR. INFO INTO MSG.   */
         MVC   @TS00001(1),LRTKEY1(R7)                             0210
         NI    @TS00001,X'F0'                                      0210
         CLI   @TS00001,X'10'                                      0210
         BNE   @RF00210                                            0210
*    MCHCCH79 = MCHL;                                      /*@G51DGJJ*/
         MVC   MCHCCH79(3),MCHL                                    0211
*  ELSE                                                            0212
*    MCHCCH79 = CCHL;                                      /*@G51DGJJ*/
         B     @RC00210                                            0212
@RF00210 MVC   MCHCCH79(3),CCHL                                    0212
*    PARM3 = TWO;                                          /*@G51DGJJ*/
@RC00210 MVC   PARM3(4),@CF00073                                   0213
*    CALL CONVERT(LRTMODEL,MOD79,PARM3);                   /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00214                              0214
         LA    @06,LRTMODEL(,R7)                                   0214
         ST    @06,@AL00001                                        0214
         LA    @01,@AL00001                                        0214
         BAL   @14,CONVERT                                         0214
*    PARM3 = THREE;                                        /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0215
*    CALL CONVERT(LRTCPUS,SER79,PARM3);                    /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00216                              0216
         LA    @06,LRTCPUS(,R7)                                    0216
         ST    @06,@AL00001                                        0216
         LA    @01,@AL00001                                        0216
         BAL   @14,CONVERT                                         0216
*    MESSAGET = MESSAGE;    /* MOVE MESSAGE TO TOURIST PRINT LINE    */
         MVC   MESSAGET(58),MESSAGE                                0217
*    CALL PRINT2;           /* PRINT MESSAGE ON EREPPT, SINGLE SPACE */
         BAL   @14,PRINT2                                          0218
*    CALL PRINT2;           /* PRINT BLANK LINE, SINGLE SPACE        */
         BAL   @14,PRINT2                                          0219
* /* CALL PRINT3;              PRINT MESSAGE ON TOURIST,SINGLE SPACE */
*END;                                                      /*@G51DGJJ*/
@EL00002 DS    0H                                                  0220
@EF00002 DS    0H                                                  0220
@ER00002 LM    @14,@12,@SA00002                                    0220
         BR    @14                                                 0220
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC CHECKS FOR MISSING FRAMES AT THE BEGINNING     @G51DGJJ*/
*/* OF A FRAME SET. IF ANY ARE MISSING, MESSAGE(S) INDICATING        */
*/* WHICH ONES ARE PRINTED ON EREPPT, TOURIST PRINTER DATA SETS.     */
*/* FRAME PROCESSING CONTINUES.                              @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FRAMES:    PROC;                                          /*@G51DGJJ*/
FRAMES   STM   @14,@12,@SA00003                                    0221
*  IF FIRSTFRM = ON THEN                                           0222
         TM    FIRSTFRM,B'00100000'                                0222
         BNO   @RF00222                                            0222
*    DO;                     /* 1ST FRAME - THIS SET         @G51DGJJ*/
*      FIRSTFRM = OFF;                                     /*@G51DGJJ*/
         NI    FIRSTFRM,B'11011111'                                0224
*      IF MCFKEY1 = MCF THEN                                       0225
         CLI   MCFKEY1(R5),X'A0'                                   0225
         BNE   @RF00225                                            0225
*        CALL IFCFRAMM;                                    /*@G51DGJJ*/
         L     @15,@CV01143                                        0226
         BALR  @14,@15                                             0226
*      ELSE                                                        0227
*        CALL IFCFRAMC;                                    /*@G51DGJJ*/
         B     @RC00225                                            0227
@RF00225 L     @15,@CV01144                                        0227
         BALR  @14,@15                                             0227
*      SPACING = UPSPACE;   /* SET NEW PAGE FOR FIRST FRAME  @G51DGJJ*/
@RC00225 MVI   SPACING,X'89'                                       0228
*      CALL PRINT2;                                        /*@G51DGJJ*/
         BAL   @14,PRINT2                                          0229
*      SPACING = SINGLE;                                   /*@G51DGJJ*/
         MVI   SPACING,X'09'                                       0230
*      MYLINECT = ZERO;                                    /*@G51DGJJ*/
         SLR   @06,@06                                             0231
         ST    @06,MYLINECT                                        0231
*      MCHS = MCHSER;                                      /*@G51DGJJ*/
         MVC   MCHS(3),MCHSER(R7)                                  0232
*      MCHMO = MCHMOD;                                     /*@G51DGJJ*/
         MVC   MCHMO(2),MCHMOD(R7)                                 0233
*      IF MCHSMO ^= MCFSMO THEN                                    0234
         CLC   MCHSMO(5),MCFSMO(R5)                                0234
         BE    @RF00234                                            0234
*        DO;                /* DIFF. MOD./SER. IN ERR. REC., FRAME   */
*          CALL NFRAMES;    /* PRINT MESSAGE ON TOURIST      @G51DGJJ*/
         BAL   @14,NFRAMES                                         0236
*          CALL NMTCHSER;   /* PRINT MESSAGE ON EREPPT       @G51DGJJ*/
         BAL   @14,NMTCHSER                                        0237
*          SERSW = ON;                                     /*@G51DGJJ*/
         OI    SERSW,B'00001000'                                   0238
*        END;                                              /*@G51DGJJ*/
*      IF (MCFCNT - PREVSEQN) > 1 THEN                             0240
@RF00234 SLR   @06,@06                                             0240
         IC    @06,MCFCNT(,R5)                                     0240
         SL    @06,PREVSEQN                                        0240
         CH    @06,@CH00054                                        0240
         BNH   @RF00240                                            0240
*        DO;                /* MISSING FRAME(S) AT BEGINNING OF SET  */
*          CALL MISSFRMS;                                  /*@G51DGJJ*/
         BAL   @14,MISSFRMS                                        0242
*        END;                                              /*@G51DGJJ*/
*      PREVSEQN = MCFCNT;    /* SAVE CURRENT FRAME SEQUENCE NO.      */
@RF00240 SLR   @06,@06                                             0244
         IC    @06,MCFCNT(,R5)                                     0244
         ST    @06,PREVSEQN                                        0244
*    END;                                                  /*@G51DGJJ*/
*  CALL NEXTFRMS;            /* CONTINUE PROCESSING          @G51DGJJ*/
@RF00222 BAL   @14,NEXTFRMS                                        0246
*END;                                                      /*@G51DGJJ*/
@EL00003 DS    0H                                                  0247
@EF00003 DS    0H                                                  0247
@ER00003 LM    @14,@12,@SA00003                                    0247
         BR    @14                                                 0247
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC CHECKS FOR MISSING FRAMES AT THE END OF THE    @G51DGJJ*/
*/* FRAME SET AND WITHIN THE SET AND PRINTS ERROR MESSAGES   @G51DGJJ*/
*/* IDENTIFYING WHICH ONES - ON EREPPT AND TOURIST.          @G51DGJJ*/
*/* THE FRAME INTERPRETER IS THEN INVOKED FOLLOWED BY A HEX DUMP     */
*/* OF THE FRAME IF INDICATED BY THE INTERPRETER.            @G51DGJJ*/
*/* THE LOG ERROR RECORD IS HEX DUMPED AFTER THE LAST FRAME  @G51DGJJ*/
*/* OF THE SET IS PROCESED.                                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NEXTFRMS:  PROC;                                          /*@G51DGJJ*/
NEXTFRMS STM   @14,@12,@SA00004                                    0248
*  IF R5 = ZERO THEN                                               0249
         LTR   R5,R5                                               0249
         BNZ   @RF00249                                            0249
*    DO;                     /* MISSING FRAME(S) AT END OF SET       */
*      LASTFRM = ON;                                       /*@G51DGJJ*/
         OI    LASTFRM,B'00010000'                                 0251
*      CALL MISSFRME;                                      /*@G51DGJJ*/
         BAL   @14,MISSFRME                                        0252
*    END;                                                  /*@G51DGJJ*/
*  ELSE                                                            0254
*    DO;                                                   /*@G51DGJJ*/
         B     @RC00249                                            0254
@RF00249 DS    0H                                                  0255
*      IF SERSW = OFF THEN                                         0255
         TM    SERSW,B'00001000'                                   0255
         BNZ   @RF00255                                            0255
*        CALL PRINT1;                                      /*@G51DGJJ*/
         BAL   @14,PRINT1                                          0256
*      SERSW = OFF;                                        /*@G51DGJJ*/
@RF00255 NI    SERSW,B'11110111'                                   0257
*      IF (MCFCNT - PREVSEQN) > 1 THEN                             0258
         SLR   @06,@06                                             0258
         IC    @06,MCFCNT(,R5)                                     0258
         SL    @06,PREVSEQN                                        0258
         CH    @06,@CH00054                                        0258
         BNH   @RF00258                                            0258
*        CALL MISSFRMS;     /* MISSING FRAME(S) WITHIN SET   @G51DGJJ*/
         BAL   @14,MISSFRMS                                        0259
*      PREVSEQN = MCFCNT;   /* SAVE CURRENT FRAME SEQUENCE NO.       */
@RF00258 SLR   @06,@06                                             0260
         IC    @06,MCFCNT(,R5)                                     0260
         ST    @06,PREVSEQN                                        0260
*      CALL INTRPRET;       /* INTERPRET FRAME - EDIT,PRINT LOGOUT   */
         BAL   @14,INTRPRET                                        0261
*    END;                                                  /*@G51DGJJ*/
*  IF MCFLST = OFF × LASTFRM = ON THEN                             0263
@RC00249 TM    MCFLST(R5),B'10000000'                              0263
         BZ    @RT00263                                            0263
         TM    LASTFRM,B'00010000'                                 0263
         BNO   @RF00263                                            0263
@RT00263 DS    0H                                                  0264
*    DO;                                                   /*@G51DGJJ*/
*      LASTFRM = OFF;                                      /*@G51DGJJ*/
*      FIRSTFRM = ON;                                      /*@G51DGJJ*/
         OI    FIRSTFRM,B'00100000'                                0266
         NI    LASTFRM,B'11101111'                                 0266
*      PREVSEQN = ZERO;                                    /*@G51DGJJ*/
         SLR   @06,@06                                             0267
         ST    @06,PREVSEQN                                        0267
*      HXDMPLOG = ON;                                      /*@G51DGJJ*/
         OI    HXDMPLOG,B'01000000'                                0268
*    END;                                                  /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00004 DS    0H                                                  0270
@EF00004 DS    0H                                                  0270
@ER00004 LM    @14,@12,@SA00004                                    0270
         BR    @14                                                 0270
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A 'MISSING FRAME' ERROR MESSAGE         @G51DGJJ*/
*/* ON EREPPT AND TOURIST, IDENTIFYING EACH MISSING FRAME.   @G51DGJJ*/
*/* MESSAGE(S) ARE PRINTED IN THE SPACE RESERVED FOR THE FRAME.      */
*MISSFRMS:  PROC;                                          /*@G51DGJJ*/
MISSFRMS STM   @14,@12,@SA00005                                    0271
*    K = MCFCNT - PREVSEQN - 1;   /* NO. OF CONTIGUOUS MISSING FRAMES*/
         SLR   @06,@06                                             0272
         IC    @06,MCFCNT(,R5)                                     0272
         SL    @06,PREVSEQN                                        0272
         BCTR  @06,0                                               0272
         ST    @06,K                                               0272
*    DO J = 1 TO K;                                        /*@G51DGJJ*/
         LA    @06,1                                               0273
         B     @DE00273                                            0273
@DL00273 DS    0H                                                  0274
*      CALL IFCMSG(20,ADDR(MESSAGE));  /* GET ERROR MESSAGE  @G51DGJJ*/
         LA    @06,MESSAGE                                         0274
         ST    @06,@AFTEMPS+4                                      0274
         L     @15,ADIFCMSG(,R2)                                   0274
         LA    @01,@AL00274                                        0274
         BALR  @14,@15                                             0274
*      IF (LRTKEY1 & 'F0'X) = MCHLG THEN /* INSERT VAR. INFO INTO MSG*/
         MVC   @TS00001(1),LRTKEY1(R7)                             0275
         NI    @TS00001,X'F0'                                      0275
         CLI   @TS00001,X'10'                                      0275
         BNE   @RF00275                                            0275
*        MCFCCF20 = MCFL;                                  /*@G51DGJJ*/
         MVC   MCFCCF20(3),MCFL                                    0276
*      ELSE                                                        0277
*        MCFCCF20 = CCFL;                                  /*@G51DGJJ*/
         B     @RC00275                                            0277
@RF00275 MVC   MCFCCF20(3),CCFL                                    0277
*      PARM3 = TWO;                                        /*@G51DGJJ*/
@RC00275 MVC   PARM3(4),@CF00073                                   0278
*      CALL CONVERT(MCHMOD,MOD20,PARM3);                   /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00279                              0279
         LA    @06,MCHMOD(,R7)                                     0279
         ST    @06,@AL00001                                        0279
         LA    @01,@AL00001                                        0279
         BAL   @14,CONVERT                                         0279
*      PARM3 = THREE;                                      /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0280
*      CALL CONVERT(MCHSER,SER20,PARM3);                   /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00281                              0281
         LA    @06,MCHSER(,R7)                                     0281
         ST    @06,@AL00001                                        0281
         LA    @01,@AL00001                                        0281
         BAL   @14,CONVERT                                         0281
*      PSN = PREVSEQN + J;        /* SEQ. NO. OF MISSING FRAME       */
         L     @06,PREVSEQN                                        0282
         AL    @06,J                                               0282
         ST    @06,PSN                                             0282
*      CALL CONVBIN(PSN,BINOUT);                           /*@G51DGJJ*/
         LA    @01,@AL00283                                        0283
         BAL   @14,CONVBIN                                         0283
*      FRAME20 = BINOUT(4:5);                              /*@G51DGJJ*/
         MVC   FRAME20(2),BINOUT+3                                 0284
*      MESSAGET = MESSAGE;   /* MOVE MESSAGE TO TOURIST PRINT LINE   */
         MVC   MESSAGET(58),MESSAGE                                0285
*      CALL PRINT1;          /* PRINT MESSAGE ON EREPPT, SINGLE SPACE*/
         BAL   @14,PRINT1                                          0286
*      CALL PRINT3;          /* PRINT MESSAGE ON TOURIST,SINGLE SPACE*/
         BAL   @14,PRINT3                                          0287
*    END;                                                  /*@G51DGJJ*/
         LA    @06,1                                               0288
         AL    @06,J                                               0288
@DE00273 ST    @06,J                                               0288
         C     @06,K                                               0288
         BNH   @DL00273                                            0288
*    R = LINECT1 - MYLINECT; /* SET LINE CONTROL TO (LAST LINE)-1    */
         L     @06,MYLINECT                                        0289
         L     @04,LINECT1                                         0289
         SLR   @04,@06                                             0289
         ST    @04,R                                               0289
*    Q = R/FRMSPACE;         /* IN FRAME SPACE.              @G51DGJJ*/
         LA    @03,25                                              0290
         LR    @00,@04                                             0290
         SRDA  @00,32                                              0290
         DR    @00,@03                                             0290
         ST    @01,Q                                               0290
*    MYLINECT = MYLINECT + (R - FRMSPACE * Q) - 1;         /*@G51DGJJ*/
         MR    @00,@03                                             0291
         SLR   @04,@01                                             0291
         ALR   @06,@04                                             0291
         BCTR  @06,0                                               0291
         ST    @06,MYLINECT                                        0291
*    CALL PRINT1;                                          /*@G51DGJJ*/
         BAL   @14,PRINT1                                          0292
*END;                                                      /*@G51DGJJ*/
@EL00005 DS    0H                                                  0293
@EF00005 DS    0H                                                  0293
@ER00005 LM    @14,@12,@SA00005                                    0293
         BR    @14                                                 0293
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A 'MISSING FRAME' ERROR MESSAGE         @G51DGJJ*/
*/* ON EREPPT AND TOURIST, IDENTIFYING AT LEAST THE LAST     @G51DGJJ*/
*/* FRAME IN A POSSIBLE SERIES OF FRAMES MISSING AT THE END  @G51DGJJ*/
*/* OF THE FRAME SET.                                        @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*MISSFRME:  PROC;                                          /*@G51DGJJ*/
MISSFRME STM   @14,@12,@SA00006                                    0294
*  CALL IFCMSG(20,ADDR(MESSAGE)); /* GET ERROR MESSAGE       @G51DGJJ*/
         LA    @06,MESSAGE                                         0295
         ST    @06,@AFTEMPS+8                                      0295
         L     @15,ADIFCMSG(,R2)                                   0295
         LA    @01,@AL00295                                        0295
         BALR  @14,@15                                             0295
*  IF (LRTKEY1 & 'F0'X) = MCHLG THEN                               0296
         MVC   @TS00001(1),LRTKEY1(R7)                             0296
         NI    @TS00001,X'F0'                                      0296
         CLI   @TS00001,X'10'                                      0296
         BNE   @RF00296                                            0296
*    MCFCCF20 = MCFL;                                      /*@G51DGJJ*/
         MVC   MCFCCF20(3),MCFL                                    0297
*  ELSE                                                            0298
*    MCFCCF20 = CCFL;                                      /*@G51DGJJ*/
         B     @RC00296                                            0298
@RF00296 MVC   MCFCCF20(3),CCFL                                    0298
*    PARM3 = TWO;                                          /*@G51DGJJ*/
@RC00296 MVC   PARM3(4),@CF00073                                   0299
*    CALL CONVERT(MCHMOD,MOD20,PARM3);                     /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00300                              0300
         LA    @06,MCHMOD(,R7)                                     0300
         ST    @06,@AL00001                                        0300
         LA    @01,@AL00001                                        0300
         BAL   @14,CONVERT                                         0300
*    PARM3 = THREE;                                        /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0301
*    CALL CONVERT(MCHSER,SER20,PARM3);                     /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00302                              0302
         LA    @06,MCHSER(,R7)                                     0302
         ST    @06,@AL00001                                        0302
         LA    @01,@AL00001                                        0302
         BAL   @14,CONVERT                                         0302
*    PSN = PREVSEQN + 1;     /* SEQ. NO. OF 1ST MISSING FRAME AT END */
         LA    @06,1                                               0303
         AL    @06,PREVSEQN                                        0303
         ST    @06,PSN                                             0303
*    CALL CONVBIN(PSN,BINOUT);                             /*@G51DGJJ*/
         LA    @01,@AL00304                                        0304
         BAL   @14,CONVBIN                                         0304
*    FRAME20 = BINOUT(4:5);                                /*@G51DGJJ*/
         MVC   FRAME20(2),BINOUT+3                                 0305
*    MESSAGET = MESSAGE;     /* MOVE MESSAGE TO TOURIST PRINT LINE   */
         MVC   MESSAGET(58),MESSAGE                                0306
*    CALL PRINT1;            /* PRINT MESSAGE ON EREPPT      @G51DGJJ*/
         BAL   @14,PRINT1                                          0307
*    CALL PRINT3;            /* PRINT MESSAGE ON TOURIST,SINGLE SPACE*/
         BAL   @14,PRINT3                                          0308
*END;                                                      /*@G51DGJJ*/
@EL00006 DS    0H                                                  0309
@EF00006 DS    0H                                                  0309
@ER00006 LM    @14,@12,@SA00006                                    0309
         BR    @14                                                 0309
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THESE ARE THE PRINT PROC'S                               @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*PRINT1:   PROC;                                           /*@G51DGJJ*/
PRINT1   STM   @14,@12,@SA00007                                    0310
*  CALL PRINT2;              /* PRINT MESSAGE ON EREPPT, SINGLE SPACE*/
         BAL   @14,PRINT2                                          0311
*  MYLINECT = MYLINECT + LNESPACE;                         /*@G51DGJJ*/
         L     @06,MYLINECT                                        0312
         AL    @06,LNESPACE                                        0312
         ST    @06,MYLINECT                                        0312
*  IF MYLINECT = LINECT1 THEN                                      0313
         C     @06,LINECT1                                         0313
         BNE   @RF00313                                            0313
*    DO;                                                   /*@G51DGJJ*/
*      SPACING = UPSPACE;                                  /*@G51DGJJ*/
         MVI   SPACING,X'89'                                       0315
*      CALL PRINT2;          /* PRINT MESSAGE ON EREPPT, EJECT PAGE  */
         BAL   @14,PRINT2                                          0316
*      SPACING = SINGLE;                                   /*@G51DGJJ*/
         MVI   SPACING,X'09'                                       0317
*      MYLINECT = ZERO;                                    /*@G51DGJJ*/
         SLR   @06,@06                                             0318
         ST    @06,MYLINECT                                        0318
*    END;                                                  /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00007 DS    0H                                                  0320
@EF00007 DS    0H                                                  0320
@ER00007 LM    @14,@12,@SA00007                                    0320
         BR    @14                                                 0320
*PRINT2:    PROC;                                          /*@G51DGJJ*/
PRINT2   STM   @14,@12,@SA00008                                    0321
*  PRINTADR = ADDR(PRINTLNE);                              /*@G51DGJJ*/
         LA    @06,PRINTLNE                                        0322
         ST    @06,PRINTADR(,R2)                                   0322
*  CALL IOHND(RITEPRTR);     /* PRINT MESSAGE ON EREPPT, CARR. CNTRL */
         L     @15,ADIOHND(,R2)                                    0323
         LA    @01,@AL00323                                        0323
         BALR  @14,@15                                             0323
*END;                                                      /*@G51DGJJ*/
@EL00008 DS    0H                                                  0324
@EF00008 DS    0H                                                  0324
@ER00008 LM    @14,@12,@SA00008                                    0324
         BR    @14                                                 0324
*PRINT3:    PROC;                                          /*@G51DGJJ*/
PRINT3   STM   @14,@12,@SA00009                                    0325
*  PRINTADR = ADDR(PRINTLNT);                              /*@G51DGJJ*/
         LA    @06,PRINTLNT                                        0326
         ST    @06,PRINTADR(,R2)                                   0326
*  CALL IOHND(RITEPRTR);     /* PRINT MESSAGE ON TOURIST,SINGLE SPACE*/
         L     @15,ADIOHND(,R2)                                    0327
         LA    @01,@AL00327                                        0327
         BALR  @14,@15                                             0327
*END;                                                      /*@G51DGJJ*/
@EL00009 DS    0H                                                  0328
@EF00009 DS    0H                                                  0328
@ER00009 LM    @14,@12,@SA00009                                    0328
         BR    @14                                                 0328
*/*                                                          @G51DGJJ*/
*/* CONVERT BINARY TO DECIMAL PRINTABLE                      @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*/*     CALL CONVBIN(A,B);                                   @G51DGJJ*/
*/*        WHERE,   A IS FIXED(31) - INPUT (BINARY NO.)      @G51DGJJ*/
*/*                 B IS CHAR(5)   - OUTPUT (DATA RIGHT-JUSTIFIED)   */
*/*                                                          @G51DGJJ*/
*CONVBIN: PROC(BINWORD,DECADDR);                           /*@G51DGJJ*/
CONVBIN  STM   @14,@12,12(@13)                                     0329
         MVC   @PC00010(8),0(@01)                                  0329
* DCL  BINWORD FIXED(31);                                  /*@G51DGJJ*/
* DCL  DECADDR CHAR(20);                                   /*@G51DGJJ*/
* RESPECIFY (R8) RESTRICTED;                               /*@G51DGJJ*/
* R8 = BINWORD;                  /*LOAD THE ITEM TO CONVERT  @G51DGJJ*/
         L     @06,@PC00010                                        0333
         L     R8,BINWORD(,@06)                                    0333
* CVD(R8,DBLWORD);                                         /*@G51DGJJ*/
         CVD   R8,DBLWORD                                          0334
* UNPK(WORK(1:8),DBLWORD);                                 /*@G51DGJJ*/
         UNPK  WORK(8),DBLWORD(8)                                  0335
* WORK(8) = WORK(8) × FOXZERO;                             /*@G51DGJJ*/
         OI    WORK+7,X'F0'                                        0336
* SWITCH1 = OFF;                                           /*@G51DGJJ*/
         NI    SWITCH1,B'01111111'                                 0337
* DO L = 1 BY 1 TO 7 WHILE(SWITCH1 = OFF);                 /*@G51DGJJ*/
         LA    @09,1                                               0338
         ST    @09,L                                               0338
@DL00338 TM    SWITCH1,B'10000000'                                 0338
         BNZ   @DC00338                                            0338
*  IF WORKOVER(L) = FOXZERO THEN /*REMOVE THE LEADING ZEROS  @G51DGJJ*/
         LA    @06,WORKOVER-1(@09)                                 0339
         CLI   0(@06),X'F0'                                        0339
         BNE   @RF00339                                            0339
*    WORKOVER(L) = BLANK;        /*REPLACE WITH A BLANK CHARACTER*/
         LA    @06,WORKOVER-1(@09)                                 0340
         MVI   0(@06),C' '                                         0340
*   ELSE                                                           0341
*    SWITCH1 = ON;               /*TELL LOOP THE END OF LEADING ZEROS*/
         B     @RC00339                                            0341
@RF00339 OI    SWITCH1,B'10000000'                                 0341
* END;                                                     /*@G51DGJJ*/
@RC00339 LA    @09,1                                               0342
         AL    @09,L                                               0342
         ST    @09,L                                               0342
         CH    @09,@CH00082                                        0342
         BNH   @DL00338                                            0342
@DC00338 DS    0H                                                  0343
* DECADDR(1:5) = WORK(4:8);      /* MOVE THE DATA TO THE OUTPUT LINE */
         L     @09,@PC00010+4                                      0343
         MVC   DECADDR(5,@09),WORK+3                               0343
* RESPECIFY (R8) UNRESTRICTED;                             /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00010 DS    0H                                                  0345
@EF00010 DS    0H                                                  0345
@ER00010 LM    @14,@12,12(@13)                                     0345
         BR    @14                                                 0345
* /*                                                         @G51DGJJ*/
* /* CONVERT HEX CHARACTERS TO PRINTABLE                     @G51DGJJ*/
* /*                                                         @G51DGJJ*/
* /*     CALL CONVERT(A,B,C);                                @G51DGJJ*/
* /*        WHERE,   A IS CHAR     - INPUT (HEX CHAR. STRING)        */
* /*                 B IS CHAR     - OUTPUT (DATA LEFT-JUSTIFIED)    */
* /*                 C IS FIXED(31)- INPUT (NO. OF LEFT-MOST BYTES   */
* /*                                        TO CONVERT)      @G51DGJJ*/
* /*                                                         @G51DGJJ*/
*CONVERT: PROC(NEXTBYTE,ADDNUM,LENNUM);                    /*@G51DGJJ*/
CONVERT  STM   @14,@12,12(@13)                                     0346
         MVC   @PC00011(12),0(@01)                                 0346
* DCL NEXTBYTE  CHAR(11);                                  /*@G51DGJJ*/
* DCL ADDNUM    CHAR(133);                                 /*@G51DGJJ*/
* DCL LENNUM    FIXED(31);        /* HOW MUCH TO CONVERT     @G51DGJJ*/
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
* DO LC= LENNUM BY -1 TO ONE;                              /*@G51DGJJ*/
         L     @06,@PC00011+8                                      0351
         L     LC,LENNUM(,@06)                                     0351
         B     @DE00351                                            0351
@DL00351 DS    0H                                                  0352
*  R8 = NEXTBYTE(LC);             /* LOAD THE NEXT BYTE      @G51DGJJ*/
         L     @06,@PC00011                                        0352
         BCTR  @06,0                                               0352
         SLR   R8,R8                                               0352
         IC    R8,NEXTBYTE(LC,@06)                                 0352
*  JC= TWO * LC;                  /* INDEX FOR STORING CONVERTED 1/2 */
         LR    JC,LC                                               0353
         ALR   JC,JC                                               0353
*                                 /* BYTE.  INPUT IS 2 CHARS @G51DGJJ*/
*  SRDL(R8,FOUR);                 /* SPLIT THE BYTE IN HALF  @G51DGJJ*/
         SRDL  R8,4                                                0354
*  SRL(R9,28);                    /* RIGHT JUSTIFY SPLIT HALF BYTE   */
         SRL   R9,28                                               0355
*  R9 = R9 + ONE;                                          /*@G51DGJJ*/
         LA    @06,1                                               0356
         ALR   R9,@06                                              0356
*  R8 = R8 + ONE;                                          /*@G51DGJJ*/
         ALR   R8,@06                                              0357
*  ADDNUM(JC-ONE)= CHARS(R8);     /* CHARS IS 16 CHAR STRING FOR     */
         L     @06,@PC00011+4                                      0358
         LR    @01,@06                                             0358
         ALR   @01,JC                                              0358
         BCTR  @01,0                                               0358
         BCTR  @01,0                                               0358
         LA    @15,CHARS-1(R8)                                     0358
         MVC   ADDNUM(1,@01),0(@15)                                0358
*  ADDNUM(JC)    = CHARS(R9);     /* CONVERTING  HEX NUMS TO PRINT   */
         ALR   @06,JC                                              0359
         BCTR  @06,0                                               0359
         LA    @01,CHARS-1(R9)                                     0359
         MVC   ADDNUM(1,@06),0(@01)                                0359
* END;                                                     /*@G51DGJJ*/
         BCTR  LC,0                                                0360
@DE00351 LTR   LC,LC                                               0360
         BP    @DL00351                                            0360
*RESPECIFY (R8,R9) UNRESTRICTED;                           /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00011 DS    0H                                                  0362
@EF00011 DS    0H                                                  0362
@ER00011 LM    @14,@12,12(@13)                                     0362
         BR    @14                                                 0362
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A HEX DUMP OF THE FRAME RECORD -        @G51DGJJ*/
*/* HEADER + 24 LINES AT 80 CHARS PER LINE.                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*HEXDUMPF:  PROC;                                          /*@G51DGJJ*/
HEXDUMPF STM   @14,@12,@SA00012                                    0363
*  DUMPMSG = FRMHD;                                        /*@G51DGJJ*/
         MVC   DUMPMSG(18),FRMHD                                   0364
*  CALL PRINT1;              /* PRINT HEADER MESSAGE         @G51DGJJ*/
         BAL   @14,PRINT1                                          0365
*  FRMREG = R5;              /* START OF RECORD - HEADER     @G51DGJJ*/
         ST    R5,FRMREG                                           0366
*  NUMBER = 24;                                            /*@G51DGJJ*/
         MVC   NUMBER(4),@CF00227                                  0367
*                            /* CONVERT HEADER               @G51DGJJ*/
*  CALL CONVERT(FRMRECD,PRNTAREA,NUMBER);                  /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00368                              0368
         L     @06,FRMREG                                          0368
         ST    @06,@AL00001                                        0368
         LA    @01,@AL00001                                        0368
         BAL   @14,CONVERT                                         0368
*  CALL PRINT1;              /* PRINT HEADER                 @G51DGJJ*/
         BAL   @14,PRINT1                                          0369
*  RCL = RECLNGTH - 24;                                    /*@G51DGJJ*/
         LA    @06,24                                              0370
         LH    @04,RECLNGTH(,R2)                                   0370
         SLR   @04,@06                                             0370
         ST    @04,RCL                                             0370
*  FRMREG = R5 + 24;         /* START BEYOND HEADER          @G51DGJJ*/
         ALR   @06,R5                                              0371
         ST    @06,FRMREG                                          0371
*  NUMBER = 40;                                            /*@G51DGJJ*/
         LA    @06,40                                              0372
         ST    @06,NUMBER                                          0372
*  DO J = 40 BY 40 TO RCL;                                 /*@G51DGJJ*/
         ST    @06,J                                               0373
         B     @DE00373                                            0373
@DL00373 DS    0H                                                  0374
*                            /* CONVERT REST OF RECORD       @G51DGJJ*/
*    CALL CONVERT(FRMRECD,PRNTAREA,NUMBER);                /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00374                              0374
         L     @06,FRMREG                                          0374
         ST    @06,@AL00001                                        0374
         LA    @01,@AL00001                                        0374
         BAL   @14,CONVERT                                         0374
*    CALL PRINT1;            /* PRINT                        @G51DGJJ*/
         BAL   @14,PRINT1                                          0375
*    FRMREG = FRMREG + 40;   /* BUMP FRAME POINTER           @G51DGJJ*/
         LA    @06,40                                              0376
         AL    @06,FRMREG                                          0376
         ST    @06,FRMREG                                          0376
*  END;                                                    /*@G51DGJJ*/
         LA    @06,40                                              0377
         AL    @06,J                                               0377
         ST    @06,J                                               0377
@DE00373 C     @06,RCL                                             0377
         BNH   @DL00373                                            0377
*END;                                                      /*@G51DGJJ*/
@EL00012 DS    0H                                                  0378
@EF00012 DS    0H                                                  0378
@ER00012 LM    @14,@12,@SA00012                                    0378
         BR    @14                                                 0378
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A FORMATTED HEX DUMP OF THE LOG ERROR RECORD.   */
*/* DATA IS CONVERTED ON A LINE BASIS INTO A BUFFER(CNVRTBUF).       */
*/* A PRINT LINE(PRNTAREA) IS BUILT BY SEQUENTIALLY EXTRACTING       */
*/* 8-BYTE DATA GROUPS FROM THE CONVERT BUFFER AND STORING   @G51DGJJ*/
*/* THEM INTO THE PRINT LINE AT THE PRINT POSITIONS DICTATED @G51DGJJ*/
*/* BY THE LOCATION OF AN OVERLAY DATA STRUCTURE. THE OVERLAY        */
*/* ADVANCES ALONG THE PRINT LINE WITH EACH EXTRACTION.      @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*HEXDUMPL:  PROC;                                          /*@G51DGJJ*/
HEXDUMPL STM   @14,@12,@SA00013                                    0379
*  DUMPMSG = LOGHD1;                                       /*@G51DGJJ*/
         MVC   DUMPMSG(18),LOGHD1                                  0380
*  CALL PRINT1;              /* PRINT HEADER MESSAGE         @G51DGJJ*/
         BAL   @14,PRINT1                                          0381
*  DUMPMSG = LOGHD2;         /* SET UP 'HEADER' LABEL        @G51DGJJ*/
         MVI   DUMPMSG+10,C' '                                     0382
         MVC   DUMPMSG+11(7),DUMPMSG+10                            0382
         MVC   DUMPMSG(10),LOGHD2                                  0382
*  LGREG = R7;               /* START OF RECORD - HEADER     @G51DGJJ*/
         ST    R7,LGREG                                            0383
*  NUMBER = 24;                                            /*@G51DGJJ*/
         MVC   NUMBER(4),@CF00227                                  0384
*                            /* CONVERT HEADER - HEX TO EBCDIC       */
*  CALL CONVERT(LOGRECD,CNVRTBUF,NUMBER);                  /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00385                              0385
         L     @06,LGREG                                           0385
         ST    @06,@AL00001                                        0385
         LA    @01,@AL00001                                        0385
         BAL   @14,CONVERT                                         0385
*  GROUP = ADDR(PRNTAREA) + 13; /* SET PRINT AREA OVERLAY    @G51DGJJ*/
         LA    @06,PRNTAREA                                        0386
         AH    @06,@CH01216                                        0386
         ST    @06,GROUP                                           0386
*  K = 1;                       /* SET BYTE INDEX            @G51DGJJ*/
         LA    @06,1                                               0387
         ST    @06,K                                               0387
*  DO J = 1 TO 4;             /* MOVE TO PRINT AREA          @G51DGJJ*/
         ST    @06,J                                               0388
@DL00388 DS    0H                                                  0389
*    PTGROUP = CNVRTBUF(K:K+7);                            /*@G51DGJJ*/
         L     @04,GROUP                                           0389
         L     @03,K                                               0389
         LA    @01,CNVRTBUF-1(@03)                                 0389
         MVC   PTGROUP(8,@04),0(@01)                               0389
*    GROUP = GROUP + 12;      /* BUMP OVERLAY                @G51DGJJ*/
         AH    @04,@CH00035                                        0390
         ST    @04,GROUP                                           0390
*    K = K + 8;                                            /*@G51DGJJ*/
         AH    @03,@CH00065                                        0391
         ST    @03,K                                               0391
*  END;                                                    /*@G51DGJJ*/
         AH    @06,@CH00054                                        0392
         ST    @06,J                                               0392
         CH    @06,@CH00063                                        0392
         BNH   @DL00388                                            0392
*  GROUP = GROUP + 4;         /* SET EXTRA  SPACING          @G51DGJJ*/
         LA    @06,4                                               0393
         AL    @06,GROUP                                           0393
         ST    @06,GROUP                                           0393
*  DO J = 1 TO 2;                                          /*@G51DGJJ*/
         LA    @06,1                                               0394
         ST    @06,J                                               0394
@DL00394 DS    0H                                                  0395
*    PTGROUP = CNVRTBUF(K:K+7); /* MOVE CONVERT. DATA TO PRINT AREA  */
         L     @04,GROUP                                           0395
         L     @03,K                                               0395
         LA    @01,CNVRTBUF-1(@03)                                 0395
         MVC   PTGROUP(8,@04),0(@01)                               0395
*    GROUP = GROUP + 12;        /* BUMP OVERLAY              @G51DGJJ*/
         AH    @04,@CH00035                                        0396
         ST    @04,GROUP                                           0396
*    K = K + 8;                                            /*@G51DGJJ*/
         AH    @03,@CH00065                                        0397
         ST    @03,K                                               0397
*  END;                                                    /*@G51DGJJ*/
         AH    @06,@CH00054                                        0398
         ST    @06,J                                               0398
         CH    @06,@CH00073                                        0398
         BNH   @DL00394                                            0398
*  CALL PRINT1;              /* PRINT HEADER                 @G51DGJJ*/
         BAL   @14,PRINT1                                          0399
*  CALL PRINT1;              /* PRINT BLANK LINE             @G51DGJJ*/
         BAL   @14,PRINT1                                          0400
*  LINEADDR = 0;             /* ADDRESS OF 1ST BYTE IN LINE  @G51DGJJ*/
         SLR   @06,@06                                             0401
         STH   @06,LINEADDR                                        0401
*  LGREG = R7 + 24;          /* START BEYOND HEADER          @G51DGJJ*/
         LA    @06,24                                              0402
         LR    @04,R7                                              0402
         ALR   @04,@06                                             0402
         ST    @04,LGREG                                           0402
*  RCL = RECLNGT1 - 24;                                    /*@G51DGJJ*/
         LCR   @06,@06                                             0403
         AL    @06,RECLNGT1(,R2)                                   0403
         ST    @06,RCL                                             0403
*  DO L = 32 BY 32 TO RCL;                                 /*@G51DGJJ*/
         LA    @06,32                                              0404
         ST    @06,L                                               0404
         B     @DE00404                                            0404
@DL00404 DS    0H                                                  0405
*    CALL CNVTPRNT;          /* CONVERT  REST OF RECORD TO EBCDIC    */
         BAL   @14,CNVTPRNT                                        0405
*    CALL PRINT1;                                          /*@G51DGJJ*/
         BAL   @14,PRINT1                                          0406
*    LGREG = LGREG + 32;     /* BUMP BYTE POINTER            @G51DGJJ*/
         LA    @06,32                                              0407
         AL    @06,LGREG                                           0407
         ST    @06,LGREG                                           0407
*  END;                                                    /*@G51DGJJ*/
         LA    @06,32                                              0408
         AL    @06,L                                               0408
         ST    @06,L                                               0408
@DE00404 C     @06,RCL                                             0408
         BNH   @DL00404                                            0408
*  NUMBER = RCL - (L - 32);                                /*@G51DGJJ*/
         LA    @06,32                                              0409
         SL    @06,L                                               0409
         AL    @06,RCL                                             0409
         ST    @06,NUMBER                                          0409
*  IF NUMBER > ZERO THEN                                           0410
         LTR   @06,@06                                             0410
         BNP   @RF00410                                            0410
*    DO;                                                   /*@G51DGJJ*/
*      CALL CNVTPRNT;       /* CLEAN UP                      @G51DGJJ*/
         BAL   @14,CNVTPRNT                                        0412
*      CALL PRINT1;                                        /*@G51DGJJ*/
         BAL   @14,PRINT1                                          0413
*    END;                                                  /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00013 DS    0H                                                  0415
@EF00013 DS    0H                                                  0415
@ER00013 LM    @14,@12,@SA00013                                    0415
         BR    @14                                                 0415
*CNVTPRNT:  PROC;                                          /*@G51DGJJ*/
CNVTPRNT STM   @14,@12,@SA00014                                    0416
*  NUMBER = TWO;                                           /*@G51DGJJ*/
         MVC   NUMBER(4),@CF00073                                  0417
*  CALL CONVERT(HEXA,PTADDR,NUMBER);                       /*@G51DGJJ*/
         MVC   @AL00001(12),@AL00418                               0418
         LA    @06,PRNTAREA                                        0418
         LA    @06,PTADDR+7(,@06)                                  0418
         ST    @06,@AL00001+4                                      0418
         LA    @01,@AL00001                                        0418
         BAL   @14,CONVERT                                         0418
*  LINEADDR = LINEADDR + 32;   /* INCREMENT BYTE ADDRESS     @G51DGJJ*/
         LA    @06,32                                              0419
         LH    @04,LINEADDR                                        0419
         ALR   @04,@06                                             0419
         STH   @04,LINEADDR                                        0419
*  CNVRTBUF = BLANKS;                                      /*@G51DGJJ*/
         MVC   CNVRTBUF(64),BLANKS                                 0420
*  NUMBER = 32;                                            /*@G51DGJJ*/
         ST    @06,NUMBER                                          0421
*  CALL CONVERT(LOGRECD,CNVRTBUF,NUMBER); /* CONVERT 32 BYTES        */
         MVC   @AL00001+4(8),@AL00422                              0422
         L     @06,LGREG                                           0422
         ST    @06,@AL00001                                        0422
         LA    @01,@AL00001                                        0422
         BAL   @14,CONVERT                                         0422
*  GROUP = ADDR(PRNTAREA) + 13;                            /*@G51DGJJ*/
         LA    @06,PRNTAREA                                        0423
         AH    @06,@CH01216                                        0423
         ST    @06,GROUP                                           0423
*  K = 1;                                                  /*@G51DGJJ*/
         LA    @06,1                                               0424
         ST    @06,K                                               0424
*  DO M = 1 TO 2;                                          /*@G51DGJJ*/
         ST    @06,M                                               0425
@DL00425 DS    0H                                                  0426
*    DO J = 1 TO 4;                                        /*@G51DGJJ*/
         LA    @06,1                                               0426
         ST    @06,J                                               0426
@DL00426 DS    0H                                                  0427
*      PTGROUP = CNVRTBUF(K:K+7);                          /*@G51DGJJ*/
         L     @04,GROUP                                           0427
         L     @03,K                                               0427
         LA    @01,CNVRTBUF-1(@03)                                 0427
         MVC   PTGROUP(8,@04),0(@01)                               0427
*      GROUP = GROUP + 12;           /* BUMP OVERLAY         @G51DGJJ*/
         AH    @04,@CH00035                                        0428
         ST    @04,GROUP                                           0428
*      K = K + 8;                                          /*@G51DGJJ*/
         AH    @03,@CH00065                                        0429
         ST    @03,K                                               0429
*    END;                                                  /*@G51DGJJ*/
         AH    @06,@CH00054                                        0430
         ST    @06,J                                               0430
         CH    @06,@CH00063                                        0430
         BNH   @DL00426                                            0430
*    GROUP = GROUP + 4;              /* SET EXTRA SPACING    @G51DGJJ*/
         LA    @06,4                                               0431
         AL    @06,GROUP                                           0431
         ST    @06,GROUP                                           0431
*  END;                                                    /*@G51DGJJ*/
         LA    @06,1                                               0432
         AL    @06,M                                               0432
         ST    @06,M                                               0432
         CH    @06,@CH00073                                        0432
         BNH   @DL00425                                            0432
*END;                                                      /*@G51DGJJ*/
@EL00014 DS    0H                                                  0433
@EF00014 DS    0H                                                  0433
@ER00014 LM    @14,@12,@SA00014                                    0433
         BR    @14                                                 0433
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS A 'NO FRAMES AVAILABLE' MESSAGE         @G51DGJJ*/
*/* ON TOURIST WHEN THE CPU SERIAL NOS. OF THE ERROR         @G51DGJJ*/
*/* RECORD AND THE FRAME DISAGREE.                           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NFRAMES:   PROC;                                          /*@G51DGJJ*/
NFRAMES  STM   @14,@12,@SA00015                                    0434
*  CALL IFCMSG(79,ADDR(MESSAGE));                          /*@G51DGJJ*/
         LA    @06,MESSAGE                                         0435
         ST    @06,@AFTEMPS+12                                     0435
         L     @15,ADIFCMSG(,R2)                                   0435
         LA    @01,@AL00435                                        0435
         BALR  @14,@15                                             0435
*  IF (LRTKEY1 & 'F0'X) = MCHLG THEN                               0436
         MVC   @TS00001(1),LRTKEY1(R7)                             0436
         NI    @TS00001,X'F0'                                      0436
         CLI   @TS00001,X'10'                                      0436
         BNE   @RF00436                                            0436
*    MCHCCH79 = MCHL;                                      /*@G51DGJJ*/
         MVC   MCHCCH79(3),MCHL                                    0437
*  ELSE                                                            0438
*    MCHCCH79 = CCHL;                                      /*@G51DGJJ*/
         B     @RC00436                                            0438
@RF00436 MVC   MCHCCH79(3),CCHL                                    0438
*    PARM3 = TWO;                                          /*@G51DGJJ*/
@RC00436 MVC   PARM3(4),@CF00073                                   0439
*    CALL CONVERT(LRTMODEL,MOD79,PARM3);                   /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00440                              0440
         LA    @06,LRTMODEL(,R7)                                   0440
         ST    @06,@AL00001                                        0440
         LA    @01,@AL00001                                        0440
         BAL   @14,CONVERT                                         0440
*    PARM3 = THREE;                                        /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0441
*    CALL CONVERT(LRTCPUS,SER79,PARM3);                    /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00442                              0442
         LA    @06,LRTCPUS(,R7)                                    0442
         ST    @06,@AL00001                                        0442
         LA    @01,@AL00001                                        0442
         BAL   @14,CONVERT                                         0442
*    MESSAGET = MESSAGE;                                   /*@G51DGJJ*/
         MVC   MESSAGET(58),MESSAGE                                0443
*    CALL PRINT3;                                          /*@G51DGJJ*/
         BAL   @14,PRINT3                                          0444
*END;                                                      /*@G51DGJJ*/
@EL00015 DS    0H                                                  0445
@EF00015 DS    0H                                                  0445
@ER00015 LM    @14,@12,@SA00015                                    0445
         BR    @14                                                 0445
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS AN ATTENTION MESSAGE ON EREPT TO        @G51DGJJ*/
*/* INDICATE THAT THE ERROR RECORD IS BEING EDITED BY        @G51DGJJ*/
*/* A SET OF FRAMES FOR A DIFFERENT CPU SERIAL NO.           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NMTCHSER:  PROC;                                          /*@G51DGJJ*/
NMTCHSER STM   @14,@12,@SA00016                                    0446
*  MESSAGE = SERMSG;                                       /*@G51DGJJ*/
         MVI   MESSAGE+50,C' '                                     0447
         MVC   MESSAGE+51(7),MESSAGE+50                            0447
         MVC   MESSAGE(50),SERMSG                                  0447
*  CALL PRINT1;                                            /*@G51DGJJ*/
         BAL   @14,PRINT1                                          0448
*END;                                                      /*@G51DGJJ*/
@EL00016 DS    0H                                                  0449
@EF00016 DS    0H                                                  0449
@ER00016 LM    @14,@12,@SA00016                                    0449
         BR    @14                                                 0449
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC EDITS AND PRINTS THE EXTENDED LOGOUT AND       @G51DGJJ*/
*/* CHANNEL LOGOUT OF THE MCH AND CCH ERROR RECORDS,         @G51DGJJ*/
*/* RESPECTIVELY. THIS IS DONE BY INTERPRETING A FRAME       @G51DGJJ*/
*/* (FROM A SET OF FRAMES) OF EDIT INFORMATION WHICH         @G51DGJJ*/
*/* CONSISTS OF TEXT AND COMMANDS. TEXT IS HEADER            @G51DGJJ*/
*/* INFORMATION AND LOG DATA LABELS. COMMANDS SPECIFY        @G51DGJJ*/
*/* THE LOCATION OF THE LOG DATA WITHIN THE ERROR            @G51DGJJ*/
*/* RECORD, HOW MUCH DATA TO RETRIEVE, AND HOW TO FORMAT     @G51DGJJ*/
*/* IT FOR DISPLAY.                                          @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*/* THE FOLLOWING IS A DESCRIPTION OF THE OVERALL PROGRAM    @G51DGJJ*/
*/* LOGIC WHICH IS PATTERNED AFTER THE SVP MICRO-PROGRAM     @G51DGJJ*/
*/* WHICH DISPLAYS FRAMES ON THE CONSOLE CRT.                @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*/*  FOR EACH SCAN LINE IN THE FRAME:                        @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*/*    - MOVE SCAN LINE TO PRINT BUFFER. INTERPRET SCAN      @G51DGJJ*/
*/*      CODES,IF NECESSARY,IN PRINT BUFFER. OTHERWISE,      @G51DGJJ*/
*/*      TRANSLATE PRINT BUFFER, PRINT IT, GET NEXT SCAN     @G51DGJJ*/
*/*      LINE.                                               @G51DGJJ*/
*/*    - INTERPRET:                                          @G51DGJJ*/
*/*        - REPLACE COMMANDS WITH BLANKS.                   @G51DGJJ*/
*/*        - FETCH LOG DATA AND FORMAT INTO PRINT BUFFER     @G51DGJJ*/
*/*          AS SPECIFIED BY COMMANDS.                       @G51DGJJ*/
*/*        - SKIP OVER TEXT.                                 @G51DGJJ*/
*/*        - TRANSLATE PRINT BUFFER, PRINT IT, GET NEXT      @G51DGJJ*/
*/*          SCAN LINE                                       @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*INTRPRET:  PROC;                                          /*@G51DGJJ*/
INTRPRET STM   @14,@12,@SA00017                                    0450
*  HXDMPFRM = OFF;                                         /*@G51DGJJ*/
         NI    HXDMPFRM,B'11111011'                                0451
*  ENDSCN = OFF;                                           /*@G51DGJJ*/
         NI    ENDSCN,B'01111111'                                  0452
*  FRMPOINT = R5 + 24;       /* SET FRAME POINTER TO FIRST   @G51DGJJ*/
         LA    @06,24                                              0453
         ALR   @06,R5                                              0453
         ST    @06,FRMPOINT                                        0453
*                            /* SCAN LINE                    @G51DGJJ*/
*  IF FRAMECHR = T1 ×                                              0454
*     FRAMECHR = T2 ×                                              0454
*     FRAMECHR = T7 THEN                                           0454
         CLI   FRAMECHR(@06),X'E9'                                 0454
         BE    @RT00454                                            0454
         CLI   FRAMECHR(@06),X'EA'                                 0454
         BE    @RT00454                                            0454
         CLI   FRAMECHR(@06),X'EF'                                 0454
         BNE   @RF00454                                            0454
@RT00454 DS    0H                                                  0455
*    DO;                     /* LOG TYPE SCAN CODE ERROR     @G51DGJJ*/
*      HXDMPFRM = ON;        /* INDICATE HEX DUMP FRAME      @G51DGJJ*/
         OI    HXDMPFRM,B'00000100'                                0456
*      CALL LOGTPERR;        /* PRINT ERROR MESSAGE          @G51DGJJ*/
         BAL   @14,LOGTPERR                                        0457
*    END;                                                  /*@G51DGJJ*/
*  ELSE                                                            0459
*    DO LINECTR = 1 TO 24;                                 /*@G51DGJJ*/
         B     @RC00454                                            0459
@RF00454 LA    @06,1                                               0459
         ST    @06,LINECTR                                         0459
@DL00459 DS    0H                                                  0460
*      LINEPTR = ADDR(PRTBUFF);    /* SET POINTER TO START   @G51DGJJ*/
         LA    @06,PRTBUFF                                         0460
         ST    @06,LINEPTR                                         0460
*                                  /* OF PRINT BUFFER        @G51DGJJ*/
*      PRTBUFF = FRMCHARS;         /* MOVE NEXT SCAN LINE    @G51DGJJ*/
         L     @06,FRMPOINT                                        0461
         MVC   PRTBUFF(80),FRMCHARS(@06)                           0461
*                                  /* TO PRINT BUFFER        @G51DGJJ*/
*      IF ENDSCN = OFF THEN                                        0462
         TM    ENDSCN,B'10000000'                                  0462
         BNZ   @RF00462                                            0462
*        CALL LINEPREP;       /* INTERPRET 1 SCAN LINE       @G51DGJJ*/
         BAL   @14,LINEPREP                                        0463
*                            /* IN PRINT BUFFER              @G51DGJJ*/
*        CALL TRNSLATE;       /* TRANSLATE BUFFER, PRINT     @G51DGJJ*/
@RF00462 BAL   @14,TRNSLATE                                        0464
*        FRMPOINT = FRMPOINT + 80; /* SET FRAME POINTER      @G51DGJJ*/
         LA    @06,80                                              0465
         AL    @06,FRMPOINT                                        0465
         ST    @06,FRMPOINT                                        0465
*                                  /* TO NEXT SCAN LINE      @G51DGJJ*/
*    END;                                                  /*@G51DGJJ*/
         LA    @06,1                                               0466
         AL    @06,LINECTR                                         0466
         ST    @06,LINECTR                                         0466
         CH    @06,@CH00227                                        0466
         BNH   @DL00459                                            0466
*END;                                                      /*@G51DGJJ*/
@EL00017 DS    0H                                                  0467
@EF00017 DS    0H                                                  0467
@ER00017 LM    @14,@12,@SA00017                                    0467
         BR    @14                                                 0467
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PRINTS AN ERROR MESSAGE ON EREPT, TOURIST      @G51DGJJ*/
*/* WHEN AN INVALID LOG TYPE SCAN CODE IS DETECTED.          @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*LOGTPERR:  PROC;                                          /*@G51DGJJ*/
LOGTPERR STM   @14,@12,@SA00018                                    0468
*  CALL IFCMSG(80,ADDR(MESSAGE)); /* GET ERROR MESSAGE       @G51DGJJ*/
         LA    @06,MESSAGE                                         0469
         ST    @06,@AFTEMPS+16                                     0469
         L     @15,ADIFCMSG(,R2)                                   0469
         LA    @01,@AL00469                                        0469
         BALR  @14,@15                                             0469
*  IF MCFKEY1 = MCF THEN     /* INSERT VAR. INFO INTO MSG.   @G51DGJJ*/
         CLI   MCFKEY1(R5),X'A0'                                   0470
         BNE   @RF00470                                            0470
*    MCFCCF80 = MCFL;                                      /*@G51DGJJ*/
         MVC   MCFCCF80(3),MCFL                                    0471
*  ELSE                                                            0472
*    MCFCCF80 = CCFL;                                      /*@G51DGJJ*/
         B     @RC00470                                            0472
@RF00470 MVC   MCFCCF80(3),CCFL                                    0472
*    PARM3 = TWO;                                          /*@G51DGJJ*/
@RC00470 MVC   PARM3(4),@CF00073                                   0473
*    CALL CONVERT(MCFMOD,MOD80,PARM3);                     /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00474                              0474
         LA    @06,MCFMOD(,R5)                                     0474
         ST    @06,@AL00001                                        0474
         LA    @01,@AL00001                                        0474
         BAL   @14,CONVERT                                         0474
*    PARM3 = THREE;                                        /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0475
*    CALL CONVERT(MCFSER,SER80,PARM3);                     /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00476                              0476
         LA    @06,MCFSER(,R5)                                     0476
         ST    @06,@AL00001                                        0476
         LA    @01,@AL00001                                        0476
         BAL   @14,CONVERT                                         0476
*    K = MCFCNT;                  /* FRAME SEQUENCE NO.      @G51DGJJ*/
         SLR   @06,@06                                             0477
         IC    @06,MCFCNT(,R5)                                     0477
         ST    @06,K                                               0477
*    CALL CONVBIN(K,BINOUT);                               /*@G51DGJJ*/
         LA    @01,@AL00478                                        0478
         BAL   @14,CONVBIN                                         0478
*    FRAME80 = BINOUT(4:5);                                /*@G51DGJJ*/
         MVC   FRAME80(2),BINOUT+3                                 0479
*    MESSAGET = MESSAGE;     /* MOVE MSG. TO TOURIST PRINT   @G51DGJJ*/
         MVC   MESSAGET(58),MESSAGE                                0480
*                            /* LINE                         @G51DGJJ*/
*    CALL PRINT1;            /* PRINT MSG. ON EREPPT,        @G51DGJJ*/
         BAL   @14,PRINT1                                          0481
*                            /* SINGLE SPACE                 @G51DGJJ*/
*    CALL PRINT3;            /* PRINT MSG. ON TOURIST,       @G51DGJJ*/
         BAL   @14,PRINT3                                          0482
*                            /* SINGLE SPACE                 @G51DGJJ*/
*    R = LINECT1 - MYLINECT; /* SET LINE CONTROL TO (LAST    @G51DGJJ*/
         L     @06,MYLINECT                                        0483
         L     @04,LINECT1                                         0483
         SLR   @04,@06                                             0483
         ST    @04,R                                               0483
*    Q = R/FRMSPACE;         /* LINE)-1 IN FRAME SPACE.      @G51DGJJ*/
         LA    @03,25                                              0484
         LR    @00,@04                                             0484
         SRDA  @00,32                                              0484
         DR    @00,@03                                             0484
         ST    @01,Q                                               0484
*    MYLINECT = MYLINECT + (R - FRMSPACE * Q) - 1;         /*@G51DGJJ*/
         MR    @00,@03                                             0485
         SLR   @04,@01                                             0485
         ALR   @06,@04                                             0485
         BCTR  @06,0                                               0485
         ST    @06,MYLINECT                                        0485
*END;                                                      /*@G51DGJJ*/
@EL00018 DS    0H                                                  0486
@EF00018 DS    0H                                                  0486
@ER00018 LM    @14,@12,@SA00018                                    0486
         BR    @14                                                 0486
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC INTERPRETS 1 SCAN LINE IN THE PRINT BUFFER.    @G51DGJJ*/
*/* COMMANDS ARE REPLACED WITH BLANKS. LOG DATA IS FETCHED   @G51DGJJ*/
*/* AND FORMATTED IN THE PRINT BUFFER. TEXT IS SKIPPED AS    @G51DGJJ*/
*/* INDICATED BY THE 'SKIP' COMMAND. 'END-OF-LINE' IS        @G51DGJJ*/
*/* SIGNALED IF THE 'SKIP' COMMAND INDICATES THERE ARE NO    @G51DGJJ*/
*/* SCAN COMMANDS REMAINING IN THE LINE.                     @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*LINEPREP:  PROC;                                          /*@G51DGJJ*/
LINEPREP STM   @14,@12,@SA00019                                    0487
*  SCANERR = OFF;                                          /*@G51DGJJ*/
*  ENDLINE = OFF;                                          /*@G51DGJJ*/
         NI    SCANERR,B'10011111'                                 0489
*  CHARCNT = 0;                                            /*@G51DGJJ*/
         SLR   @06,@06                                             0490
         ST    @06,CHARCNT                                         0490
*  SW = ON;                                                /*@G51DGJJ*/
         OI    SW,B'00000010'                                      0491
*  DO WHILE(SW = ON);                                      /*@G51DGJJ*/
         B     @DE00492                                            0492
@DL00492 DS    0H                                                  0493
*    IF (CHARCNT => 80) × ENDLINE = ON × ENDSCN = ON THEN          0493
         L     @06,CHARCNT                                         0493
         CH    @06,@CH00550                                        0493
         BNL   @RT00493                                            0493
         TM    ENDLINE,B'10100000'                                 0493
         BZ    @RF00493                                            0493
@RT00493 DS    0H                                                  0494
*      SW = OFF;                                           /*@G51DGJJ*/
         NI    SW,B'11111101'                                      0494
*    ELSE                                                          0495
*      CALL CODETYPE;                                      /*@G51DGJJ*/
         B     @RC00493                                            0495
@RF00493 BAL   @14,CODETYPE                                        0495
*  END;                                                    /*@G51DGJJ*/
@RC00493 DS    0H                                                  0496
@DE00492 TM    SW,B'00000010'                                      0496
         BO    @DL00492                                            0496
*END;                                                      /*@G51DGJJ*/
@EL00019 DS    0H                                                  0497
@EF00019 DS    0H                                                  0497
@ER00019 LM    @14,@12,@SA00019                                    0497
         BR    @14                                                 0497
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC EXAMINES THE SCAN CODE POINTED TO BY           @G51DGJJ*/
*/* 'LINEPTR' AND TURNS CONTROL TO THE CORRESPONDING         @G51DGJJ*/
*/* SCAN CODE PROCESSOR.                                     @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*CODETYPE:  PROC;                                          /*@G51DGJJ*/
CODETYPE STM   @14,@12,@SA00020                                    0498
*  IF PRINTBUF => 'E8'X &                                          0499
*     PRINTBUF <= 'EF'X THEN                                       0499
         L     @06,LINEPTR                                         0499
         CLI   PRINTBUF(@06),X'E8'                                 0499
         BL    @RF00499                                            0499
         CLI   PRINTBUF(@06),X'EF'                                 0499
         BH    @RF00499                                            0499
*     CALL LOGTYPE;               /* LOG TYPE                @G51DGJJ*/
         BAL   @14,LOGTYPE                                         0500
*  ELSE                                                            0501
*   IF PRINTBUF => 'F0'X &                                         0501
*      PRINTBUF <= 'F7'X THEN                                      0501
         B     @RC00499                                            0501
@RF00499 L     @06,LINEPTR                                         0501
         CLI   PRINTBUF(@06),X'F0'                                 0501
         BL    @RF00501                                            0501
         CLI   PRINTBUF(@06),X'F7'                                 0501
         BH    @RF00501                                            0501
*      CALL SKIP;                 /* SKIP                    @G51DGJJ*/
         BAL   @14,SKIP                                            0502
*   ELSE                                                           0503
*    IF PRINTBUF => '00'X &                                        0503
*       PRINTBUF <= '3F'X THEN                                     0503
         B     @RC00501                                            0503
@RF00501 L     @06,LINEPTR                                         0503
         CLI   PRINTBUF(@06),X'00'                                 0503
         BL    @RF00503                                            0503
         CLI   PRINTBUF(@06),X'3F'                                 0503
         BH    @RF00503                                            0503
*       CALL TEXT;                /* TEXT                    @G51DGJJ*/
         BAL   @14,TEXT                                            0504
*    ELSE                                                          0505
*     IF (PRINTBUF & 'C0'X) = '40'X &                              0505
*        ((PRINTB2 & 'C0'X) = '00'X ×                              0505
*         (PRINTB2 & 'C0'X) = '80'X) THEN                          0505
         B     @RC00503                                            0505
@RF00503 L     @06,LINEPTR                                         0505
         MVC   @TS00001(1),PRINTBUF(@06)                           0505
         NI    @TS00001,X'C0'                                      0505
         CLI   @TS00001,X'40'                                      0505
         BNE   @RF00505                                            0505
         MVC   @TS00001(1),PRINTB2(@06)                            0505
         NI    @TS00001,X'C0'                                      0505
         CLI   @TS00001,X'00'                                      0505
         BE    @RT00505                                            0505
         MVC   @TS00001(1),PRINTB2(@06)                            0505
         NI    @TS00001,X'C0'                                      0505
         CLI   @TS00001,X'80'                                      0505
         BNE   @RF00505                                            0505
@RT00505 DS    0H                                                  0506
*        CALL DISPLAYB;           /* DISPLAY BINARY          @G51DGJJ*/
         BAL   @14,DISPLAYB                                        0506
*     ELSE                                                         0507
*      IF (PRINTBUF & 'C0'X) = '40'X &                             0507
*         ((PRINTB2 & 'C0'X) = '40'X ×                             0507
*          (PRINTB2 & 'C0'X) = 'C0'X) THEN                         0507
         B     @RC00505                                            0507
@RF00505 L     @06,LINEPTR                                         0507
         MVC   @TS00001(1),PRINTBUF(@06)                           0507
         NI    @TS00001,X'C0'                                      0507
         CLI   @TS00001,X'40'                                      0507
         BNE   @RF00507                                            0507
         MVC   @TS00001(1),PRINTB2(@06)                            0507
         NI    @TS00001,X'C0'                                      0507
         CLI   @TS00001,X'40'                                      0507
         BE    @RT00507                                            0507
         MVC   @TS00001(1),PRINTB2(@06)                            0507
         NI    @TS00001,X'C0'                                      0507
         CLI   @TS00001,X'C0'                                      0507
         BNE   @RF00507                                            0507
@RT00507 DS    0H                                                  0508
*         CALL DISPLAYH;          /* DISPLAY HEX             @G51DGJJ*/
         BAL   @14,DISPLAYH                                        0508
*      ELSE                                                        0509
*       IF PRINTBUF = 'FF'X THEN                                   0509
         B     @RC00507                                            0509
@RF00507 L     @06,LINEPTR                                         0509
         CLI   PRINTBUF(@06),X'FF'                                 0509
         BNE   @RF00509                                            0509
*          CALL ENDSCAN;         /* END SCAN                 @G51DGJJ*/
         BAL   @14,ENDSCAN                                         0510
*       ELSE                                                       0511
*        IF PRINTBUF = 'C0'X THEN                                  0511
         B     @RC00509                                            0511
@RF00509 L     @06,LINEPTR                                         0511
         CLI   PRINTBUF(@06),X'C0'                                 0511
         BNE   @RF00511                                            0511
*           CALL SPCASE10;        /* SPECIAL CASE 1-0        @G51DGJJ*/
         BAL   @14,SPCASE10                                        0512
*        ELSE                                                      0513
*         IF PRINTBUF = 'C1'X THEN                                 0513
         B     @RC00511                                            0513
@RF00511 L     @06,LINEPTR                                         0513
         CLI   PRINTBUF(@06),X'C1'                                 0513
         BNE   @RF00513                                            0513
*            CALL SPCASE11;       /* SPECIAL CASE 1-1        @G51DGJJ*/
         BAL   @14,SPCASE11                                        0514
*         ELSE                                                     0515
*          IF PRINTBUF = 'C2'X THEN                                0515
         B     @RC00513                                            0515
@RF00513 L     @06,LINEPTR                                         0515
         CLI   PRINTBUF(@06),X'C2'                                 0515
         BNE   @RF00515                                            0515
*             CALL SPCASE12;      /* SPECIAL CASE 1-2        @G51DGJJ*/
         BAL   @14,SPCASE12                                        0516
*           ELSE                                                   0517
*           IF PRINTBUF = 'C3'X THEN                               0517
         B     @RC00515                                            0517
@RF00515 L     @06,LINEPTR                                         0517
         CLI   PRINTBUF(@06),X'C3'                                 0517
         BNE   @RF00517                                            0517
*              CALL SPCASE13;     /* SPECIAL CASE 1-3        @G51DGJJ*/
         BAL   @14,SPCASE13                                        0518
*           ELSE                                                   0519
*            IF PRINTBUF ='C4'X THEN                               0519
         B     @RC00517                                            0519
@RF00517 L     @06,LINEPTR                                         0519
         CLI   PRINTBUF(@06),X'C4'                                 0519
         BNE   @RF00519                                            0519
*               CALL SPCASE14;    /* SPECIAL CASE 1-4        @G51DGJJ*/
         BAL   @14,SPCASE14                                        0520
*           ELSE                                                   0521
*            IF PRINTBUF = 'C8'X THEN                              0521
         B     @RC00519                                            0521
@RF00519 L     @06,LINEPTR                                         0521
         CLI   PRINTBUF(@06),X'C8'                                 0521
         BNE   @RF00521                                            0521
*               CALL SPCASE20;    /* SPECIAL CASE 2-0        @G51DGJJ*/
         BAL   @14,SPCASE20                                        0522
*             ELSE                                                 0523
*              IF PRINTBUF => 'D0'X &                              0523
*                 PRINTBUF <= 'D7'X THEN                           0523
         B     @RC00521                                            0523
@RF00521 L     @06,LINEPTR                                         0523
         CLI   PRINTBUF(@06),X'D0'                                 0523
         BL    @RF00523                                            0523
         CLI   PRINTBUF(@06),X'D7'                                 0523
         BH    @RF00523                                            0523
*                 CALL SPCASE30;  /* SPECIAL CASE 3-0        @G51DGJJ*/
         BAL   @14,SPCASE30                                        0524
*              ELSE                                                0525
*                 CALL UNDEFINE;  /* UNDEFINED COMMAND       @G51DGJJ*/
         B     @RC00523                                            0525
@RF00523 BAL   @14,UNDEFINE                                        0525
*END;                                                      /*@G51DGJJ*/
@EL00020 DS    0H                                                  0526
@EF00020 DS    0H                                                  0526
@ER00020 LM    @14,@12,@SA00020                                    0526
         BR    @14                                                 0526
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'LOG TYPE' SCAN CODE.            @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*LOGTYPE:   PROC;                                          /*@G51DGJJ*/
LOGTYPE  STM   @14,@12,12(@13)                                     0527
*  SAVELOGT = PRNTB123;      /* SAVE FOR P-BIT OFFSET-LATER  @G51DGJJ*/
         L     @06,LINEPTR                                         0528
         MVC   @ZT00001+1(3),PRNTB123(@06)                         0528
         L     @04,@ZT00001                                        0528
         ST    @04,SAVELOGT                                        0528
*  PRNTB123 = BLANK3;        /* REPLACE WITH 3 BLANKS;       @G51DGJJ*/
         MVC   PRNTB123(3,@06),BLANK3                              0529
*  LINEPTR = LINEPTR + 3;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,3                                               0530
         ALR   @06,@04                                             0530
         ST    @06,LINEPTR                                         0530
*  CHARCNT = CHARCNT + 3;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         0531
         ST    @04,CHARCNT                                         0531
*   IF MCFKEY1 = MCF THEN                                          0532
         CLI   MCFKEY1(R5),X'A0'                                   0532
         BNE   @RF00532                                            0532
*     DO;                    /* MCH FRAME                    @G51DGJJ*/
*      IF SVLOGTF = OFF THEN                                       0534
         TM    SVLOGTF,B'10000000'                                 0534
         BNZ   @RF00534                                            0534
*        LOGPTR = R7 + 328;  /* SET LOGREC POINTER TO        @XA21775*/
         LA    @06,328                                             0535
         ALR   @06,R7                                              0535
         ST    @06,LOGPTR                                          0535
*                            /* BEGIN OF EXTENDED LOGOUT     @G51DGJJ*/
*      ELSE                                                        0536
*        LOGPTR = R7 + 72;   /* SET LOGREC POINTER TO        @XA21775*/
         B     @RC00534                                            0536
@RF00534 LA    @06,72                                              0536
         ALR   @06,R7                                              0536
         ST    @06,LOGPTR                                          0536
*                            /* BEGIN OF FIXED LOGOUT        @G51DGJJ*/
*    END;                                                  /*@G51DGJJ*/
*  ELSE                                                            0538
*    LOGPTR = R7 + 80;       /* CCH FRAME                    @G51DGJJ*/
         B     @RC00532                                            0538
@RF00532 LA    @06,80                                              0538
         ALR   @06,R7                                              0538
         ST    @06,LOGPTR                                          0538
*                            /* SET LOGREC POINTER TO        @G51DGJJ*/
*END;                        /* BEGIN OF CHANNEL LOGOUT      @G51DGJJ*/
@EL00021 DS    0H                                                  0539
@EF00021 DS    0H                                                  0539
@ER00021 LM    @14,@12,12(@13)                                     0539
         BR    @14                                                 0539
*/*******************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'SKIP' COMMAND.                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SKIP:      PROC;                                          /*@G51DGJJ*/
SKIP     STM   @14,@12,12(@13)                                     0540
*  J = PRINTBUF & '07'X;     /* GET SPACING CONTROL          @G51DGJJ*/
         L     @06,LINEPTR                                         0541
         LA    @04,7                                               0541
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0541
         N     @04,@ZT00003                                        0541
         ST    @04,J                                               0541
*  PRINTBUF = BLANK;                                       /*@G51DGJJ*/
         MVI   PRINTBUF(@06),C' '                                  0542
*  IF J = ZERO THEN                                                0543
         LTR   @04,@04                                             0543
         BNZ   @RF00543                                            0543
*    ENDLINE = ON;                                         /*@G51DGJJ*/
         OI    ENDLINE,B'00100000'                                 0544
*  ELSE                                                            0545
*    DO;                                                   /*@G51DGJJ*/
         B     @RC00543                                            0545
@RF00543 DS    0H                                                  0546
*      K = SKPCODE(J);                                     /*@G51DGJJ*/
         L     @06,J                                               0546
         ALR   @06,@06                                             0546
         LH    @06,SKPCODE-2(@06)                                  0546
         ST    @06,K                                               0546
*      LINEPTR = LINEPTR + K + 1; /* BUMP PRINT BUFFER POINTER,      */
         LA    @04,1                                               0547
         L     @03,LINEPTR                                         0547
         ALR   @03,@06                                             0547
         ALR   @03,@04                                             0547
         ST    @03,LINEPTR                                         0547
*      CHARCNT = CHARCNT + K + 1; /* SCAN CODE COUNTER       @G51DGJJ*/
         AL    @06,CHARCNT                                         0548
         ALR   @06,@04                                             0548
         ST    @06,CHARCNT                                         0548
*    END;                                                  /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00022 DS    0H                                                  0550
@EF00022 DS    0H                                                  0550
@ER00022 LM    @14,@12,12(@13)                                     0550
         BR    @14                                                 0550
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'TEXT' SCAN CODE.                @G51DGJJ*/
*TEXT:      PROC OPTIONS(NOSAVEAREA);                      /*@G51DGJJ*/
TEXT     STM   @14,@12,12(@13)                                     0551
*  LINEPTR = LINEPTR + 1;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @06,1                                               0552
         L     @04,LINEPTR                                         0552
         ALR   @04,@06                                             0552
         ST    @04,LINEPTR                                         0552
*  CHARCNT = CHARCNT + 1;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @06,CHARCNT                                         0553
         ST    @06,CHARCNT                                         0553
*END;                                                      /*@G51DGJJ*/
@EL00023 DS    0H                                                  0554
@EF00023 DS    0H                                                  0554
@ER00023 LM    @14,@12,12(@13)                                     0554
         BR    @14                                                 0554
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'DISPLAY BINARY' COMMAND.        @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*DISPLAYB:  PROC;                                          /*@G51DGJJ*/
DISPLAYB STM   @14,@12,@SA00024                                    0555
*  PREVD = PRINTB2 & '3F'X;  /* OFFSET TO STARTING BYTE      @G51DGJJ*/
         L     @06,LINEPTR                                         0556
         LA    @04,63                                              0556
         MVC   @ZT00003+3(1),PRINTB2(@06)                          0556
         N     @04,@ZT00003                                        0556
         ST    @04,PREVD                                           0556
*  SLL(PREVD,5);             /* OF LOG DATA -- DDDDDD        @G51DGJJ*/
         SLL   @04,5                                               0557
         ST    @04,PREVD                                           0557
*  PREVD = PREVD × PRINTB3 & '1F'X;    /*   -- DDDDDDDDDDD   @G51DGJJ*/
         SLR   @04,@04                                             0558
         IC    @04,PRINTB3(,@06)                                   0558
         LA    @03,31                                              0558
         NR    @03,@04                                             0558
         O     @03,PREVD                                           0558
         ST    @03,PREVD                                           0558
*  PREVZ = PRINTB3;          /* OFFSET TO STARTING BIT       @G51DGJJ*/
         ST    @04,PREVZ                                           0559
*  SRL(PREVZ,5);             /* WITHIN BYTE -- ZZZ           @G51DGJJ*/
         SRL   @04,5                                               0560
         ST    @04,PREVZ                                           0560
*  PREVB = ZERO;                                           /*@G51DGJJ*/
         SLR   @04,@04                                             0561
         ST    @04,PREVB                                           0561
*  CURRB = PRINTBUF & '07'X; /* LENGTH OF BIT STRING -- BBB  @G51DGJJ*/
         LA    @03,7                                               0562
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0562
         N     @03,@ZT00003                                        0562
         ST    @03,CURRB                                           0562
*  IF CURRB = ZERO THEN                                            0563
         CR    @03,@04                                             0563
         BNE   @RF00563                                            0563
*    CURRB = EIGHT;                                        /*@G51DGJJ*/
         MVC   CURRB(4),@CF00065                                   0564
*  CURRG = PRINTBUF & '38'X; /* NO. SPACES TO DISPLAY        @G51DGJJ*/
@RF00563 L     @06,LINEPTR                                         0565
         LA    @04,56                                              0565
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0565
         N     @04,@ZT00003                                        0565
         ST    @04,CURRG                                           0565
*  SRL(CURRG,3);             /* BETWEEN BITS -- GGG          @G51DGJJ*/
         SRL   @04,3                                               0566
         ST    @04,CURRG                                           0566
*  PRNTB123 = BLANK3;        /* REPLACE COMM. WITH 3 BLANKS  @G51DGJJ*/
         MVC   PRNTB123(3,@06),BLANK3                              0567
*  LINEPTR = LINEPTR + 3;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,3                                               0568
         ALR   @06,@04                                             0568
         ST    @06,LINEPTR                                         0568
*  CHARCNT = CHARCNT + 3;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         0569
         ST    @04,CHARCNT                                         0569
*  CALL BINLOG;              /* GET LOG DATA, FORMAT IT      @G51DGJJ*/
         BAL   @14,BINLOG                                          0570
*  SW1 = ON;                                               /*@G51DGJJ*/
         OI    SW1,B'00010000'                                     0571
*  DO WHILE (SW1 = ON);                                    /*@G51DGJJ*/
         B     @DE00572                                            0572
@DL00572 DS    0H                                                  0573
*    IF CHARCNT => 80 THEN                                         0573
         L     @06,CHARCNT                                         0573
         CH    @06,@CH00550                                        0573
         BL    @RF00573                                            0573
*      SW1 = OFF;                                          /*@G51DGJJ*/
         NI    SW1,B'11101111'                                     0574
*    ELSE                                                          0575
*      DO;                   /* EXAMINE NEXT SCAN CODE       @G51DGJJ*/
         B     @RC00573                                            0575
@RF00573 DS    0H                                                  0576
*        IF (PRINTBUF & 'C0'X) = '80'X THEN                        0576
         L     @06,LINEPTR                                         0576
         MVC   @TS00001(1),PRINTBUF(@06)                           0576
         NI    @TS00001,X'C0'                                      0576
         CLI   @TS00001,X'80'                                      0576
         BNE   @RF00576                                            0576
*          CALL NEXTBIN;     /* 'DISPLAY NEXT' COMMAND       @G51DGJJ*/
         BAL   @14,NEXTBIN                                         0577
*        ELSE                                                      0578
*          IF PRINTBUF => '00'X &                                  0578
*             PRINTBUF <= '3F'X THEN                               0578
         B     @RC00576                                            0578
@RF00576 L     @06,LINEPTR                                         0578
         CLI   PRINTBUF(@06),X'00'                                 0578
         BL    @RF00578                                            0578
         CLI   PRINTBUF(@06),X'3F'                                 0578
         BH    @RF00578                                            0578
*             CALL TEXT;     /* TEXT - TOO MANY PLACE-HOLDERS?       */
         BAL   @14,TEXT                                            0579
*          ELSE              /* NOT 'DISPLAY NEXT' --        @G51DGJJ*/
*            SW1 = OFF;      /* LET 'CODETYPE' PROCEDURE     @G51DGJJ*/
         B     @RC00578                                            0580
@RF00578 NI    SW1,B'11101111'                                     0580
*      END;                  /* PROCESS IT                   @G51DGJJ*/
@RC00578 DS    0H                                                  0581
@RC00576 DS    0H                                                  0582
*  END;                                                    /*@G51DGJJ*/
@RC00573 DS    0H                                                  0582
@DE00572 TM    SW1,B'00010000'                                     0582
         BO    @DL00572                                            0582
*END;                                                      /*@G51DGJJ*/
@EL00024 DS    0H                                                  0583
@EF00024 DS    0H                                                  0583
@ER00024 LM    @14,@12,@SA00024                                    0583
         BR    @14                                                 0583
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE LOG DATA AND THEN INVOKES          @G51DGJJ*/
*/* 'FORMATB' WHICH FORMATS IT FOR DISPLAY.                  @G51DGJJ*/
*/* THE PROC IS CALLED BY BOTH 'DISPLAYB'(DISPLAY BINARY)    @G51DGJJ*/
*/* AND 'NEXTBIN'(DISPLAY NEXT BINARY). TWO OR THREE LOG     @G51DGJJ*/
*/* DATA BYTES ARE FETCHED BY A "FLOG" ROUTINE DEPENDING     @G51DGJJ*/
*/* ON DATA FORMAT M, G, OR Y.   EACH  "FLOG" ROUTINE        @G51DGJJ*/
*/* COMPUTES - OFFSET TO 1ST DATA BYTE-(CURRD)               @G51DGJJ*/
*/*          - OFFSET TO 1ST DATA BIT-(CURRZ)                @G51DGJJ*/
*/*     FROM - OFFSET TO PREVIOUS 1ST DATA BYTE-(PREVD)      @G51DGJJ*/
*/*          - OFFSET TO PREVIOUS 1ST DATA BIT-(PREVZ)       @G51DGJJ*/
*/*          - LENGTH OF PREVIOUS BIT STRING-(PREVB)         @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*BINLOG:   PROC;                                           /*@G51DGJJ*/
BINLOG   STM   @14,@12,@SA00025                                    0584
*  IF SVLOGT1 = 'E8'X ×                                            0585
*     SVLOGT1 = 'EC'X THEN                                         0585
         CLI   SVLOGT1,X'E8'                                       0585
         BE    @RT00585                                            0585
         CLI   SVLOGT1,X'EC'                                       0585
         BNE   @RF00585                                            0585
@RT00585 DS    0H                                                  0586
*     CALL FLOGM;            /* FETCH FORMAT M DATA          @G51DGJJ*/
         BAL   @14,FLOGM                                           0586
*  ELSE                                                            0587
*    IF SVLOGT1 = 'ED'X THEN                                       0587
         B     @RC00585                                            0587
@RF00585 CLI   SVLOGT1,X'ED'                                       0587
         BNE   @RF00587                                            0587
*       CALL FLOGG;          /* FETCH FORMAT G DATA          @G51DGJJ*/
         BAL   @14,FLOGG                                           0588
*    ELSE                                                          0589
*       CALL FLOGY;          /* FETCH FORMAT Y DATA          @G51DGJJ*/
         B     @RC00587                                            0589
@RF00587 BAL   @14,FLOGY                                           0589
*  CALL FORMATB;             /* FORMAT BIN. DATA FOR PRINT   @G51DGJJ*/
@RC00587 DS    0H                                                  0590
@RC00585 BAL   @14,FORMATB                                         0590
*END;                                                      /*@G51DGJJ*/
@EL00025 DS    0H                                                  0591
@EF00025 DS    0H                                                  0591
@ER00025 LM    @14,@12,@SA00025                                    0591
         BR    @14                                                 0591
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE NEXT 2 LOG DATA BYTES              @G51DGJJ*/
*/* AND COMPUTES THE OFFSET TO THE 1ST BIT OF                @G51DGJJ*/
*/* THE BIT STRING. DATA IN 1ST OR BOTH BYTES.               @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FLOGM:     PROC;                                          /*@G51DGJJ*/
FLOGM    STM   @14,@12,12(@13)                                     0592
*  Q = (PREVZ + PREVB)/NUM8;                               /*@G51DGJJ*/
         L     @06,PREVZ                                           0593
         AL    @06,PREVB                                           0593
         LR    @00,@06                                             0593
         SRDA  @00,32                                              0593
         D     @00,@CF00065                                        0593
         ST    @01,Q                                               0593
*  R = (PREVZ + PREVB) - NUM8 * Q;                         /*@G51DGJJ*/
         LR    @04,@01                                             0594
         SLA   @04,3                                               0594
         SLR   @06,@04                                             0594
         ST    @06,R                                               0594
*  PREVB = CURRB;             /* SAVE FOR NEXT TIME          @G51DGJJ*/
         MVC   PREVB(4),CURRB                                      0595
*                             /* 'CURRB' = BBB IF BINARY,    @G51DGJJ*/
*                             /* 'CURRB' = CC+MMM IF HEX     @G51DGJJ*/
*  CURRD = PREVD + Q;         /* OFFSET TO 1ST DATA BYTE     @G51DGJJ*/
         AL    @01,PREVD                                           0596
         ST    @01,CURRD                                           0596
*  PREVD = CURRD;             /* SAVE FOR NEXT TIME          @G51DGJJ*/
         ST    @01,PREVD                                           0597
*  CURRZ = R;                 /* OFFSET TO 1ST DATA BIT      @G51DGJJ*/
         ST    @06,CURRZ                                           0598
*  PREVZ = CURRZ;             /* SAVE FOR NEXT TIME          @G51DGJJ*/
         ST    @06,PREVZ                                           0599
*  LOG1 = LOG;                /* FETCH 1ST LOG DATA BYTE     @G51DGJJ*/
         L     @06,LOGPTR                                          0600
         LR    @04,@06                                             0600
         ALR   @04,@01                                             0600
         MVC   LOG1(1),LOG(@04)                                    0600
*  CURRD = CURRD + 1;                                      /*@G51DGJJ*/
         AH    @01,@CH00054                                        0601
         ST    @01,CURRD                                           0601
*  LOG2 = LOG;                /* FETCH 2ND LOG DATA BYTE     @G51DGJJ*/
         ALR   @06,@01                                             0602
         MVC   LOG2(1),LOG(@06)                                    0602
*END;                                                      /*@G51DGJJ*/
@EL00026 DS    0H                                                  0603
@EF00026 DS    0H                                                  0603
@ER00026 LM    @14,@12,12(@13)                                     0603
         BR    @14                                                 0603
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC CONVERTS THE BINARY LOG DATA TO SCAN CODE      @G51DGJJ*/
*/* AND FORMATS IT INTO THE PRINT BUFFER(PRTBUFF),           @G51DGJJ*/
*/* REPLACING THE LOG DATA PLACE-HOLDERS.                    @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FORMATB:   PROC;                                          /*@G51DGJJ*/
FORMATB  STM   @14,@12,12(@13)                                     0604
*  WORKL = LOGDATA;                                        /*@G51DGJJ*/
         MVC   WORKL(2),LOGDATA                                    0605
*  SLL(WORKL,CURRZ);        /* LEFT JUSTIFY BIT STRING       @G51DGJJ*/
         MVC   @ZT00002+2(2),WORKL                                 0606
         L     @06,@ZT00002                                        0606
         L     @04,CURRZ                                           0606
         SLL   @06,0(@04)                                          0606
         STH   @06,@TF00001                                        0606
         MVC   WORKL(2),@TF00001                                   0606
*  DO J = 1 TO CURRB;                                      /*@G51DGJJ*/
         LA    @06,1                                               0607
         B     @DE00607                                            0607
@DL00607 DS    0H                                                  0608
*    SCNCODE = '30'X;       /* SCAN CODE FOR 0               @G51DGJJ*/
         MVI   SCNCODE,X'30'                                       0608
*    IF (WK & '80'X) ^= ZERO THEN                                  0609
         LA    @06,128                                             0609
         MVC   @ZT00003+3(1),WK                                    0609
         N     @06,@ZT00003                                        0609
         LTR   @06,@06                                             0609
         BZ    @RF00609                                            0609
*      SCNCODE = '31'X;     /* SCAN CODE FOR 1               @G51DGJJ*/
         MVI   SCNCODE,X'31'                                       0610
*    PRINTBUF = SCNCODE;    /* PLACE CODE IN PRINT BUFFER    @G51DGJJ*/
@RF00609 L     @06,LINEPTR                                         0611
         MVC   PRINTBUF(1,@06),SCNCODE                             0611
*    LINEPTR = LINEPTR + CURRG + 1;    /* BUMP POINTERS      @G51DGJJ*/
         LA    @04,1                                               0612
         L     @03,CURRG                                           0612
         ALR   @06,@03                                             0612
         ALR   @06,@04                                             0612
         ST    @06,LINEPTR                                         0612
*    CHARCNT = CHARCNT + CURRG + 1;                        /*@G51DGJJ*/
         AL    @03,CHARCNT                                         0613
         ALR   @03,@04                                             0613
         ST    @03,CHARCNT                                         0613
*    SLL(WK,1);                                            /*@G51DGJJ*/
         SLR   @06,@06                                             0614
         IC    @06,WK                                              0614
         SLL   @06,1                                               0614
         STC   @06,WK                                              0614
*  END;                                                    /*@G51DGJJ*/
         LA    @06,1                                               0615
         AL    @06,J                                               0615
@DE00607 ST    @06,J                                               0615
         C     @06,CURRB                                           0615
         BNH   @DL00607                                            0615
*  LINEPTR = LINEPTR - CURRG;          /* ADJUST POINTERS    @G51DGJJ*/
         L     @06,CURRG                                           0616
         L     @04,LINEPTR                                         0616
         SLR   @04,@06                                             0616
         ST    @04,LINEPTR                                         0616
*  CHARCNT = CHARCNT - CURRG;                              /*@G51DGJJ*/
         LCR   @06,@06                                             0617
         AL    @06,CHARCNT                                         0617
         ST    @06,CHARCNT                                         0617
*END;                                                      /*@G51DGJJ*/
@EL00027 DS    0H                                                  0618
@EF00027 DS    0H                                                  0618
@ER00027 LM    @14,@12,12(@13)                                     0618
         BR    @14                                                 0618
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'DISPLAY NEXT CHARACTER BINARY'  @G51DGJJ*/
*/* COMMAND.                                                 @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NEXTBIN:   PROC;                                          /*@G51DGJJ*/
NEXTBIN  STM   @14,@12,@SA00028                                    0619
*  CURRB = PRINTBUF & '07'X; /* LENGTH OF BIT STRING         @G51DGJJ*/
         LA    @06,7                                               0620
         L     @04,LINEPTR                                         0620
         MVC   @ZT00003+3(1),PRINTBUF(@04)                         0620
         N     @06,@ZT00003                                        0620
         ST    @06,CURRB                                           0620
*  IF CURRB = ZERO THEN                                            0621
         LTR   @06,@06                                             0621
         BNZ   @RF00621                                            0621
*    CURRB = EIGHT;                                        /*@G51DGJJ*/
         MVC   CURRB(4),@CF00065                                   0622
*  CURRG = PRINTBUF & '38'X; /* NO. SPACES TO DISPLAY        @G51DGJJ*/
@RF00621 L     @06,LINEPTR                                         0623
         LA    @04,56                                              0623
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0623
         N     @04,@ZT00003                                        0623
         ST    @04,CURRG                                           0623
*  SRL(CURRG,3);             /* BETWEEN BITS                 @G51DGJJ*/
         SRL   @04,3                                               0624
         ST    @04,CURRG                                           0624
*  PRINTBUF = BLANK;                                       /*@G51DGJJ*/
         MVI   PRINTBUF(@06),C' '                                  0625
*  LINEPTR = LINEPTR + 1;    /* BUMP POINTERS                @G51DGJJ*/
         LA    @04,1                                               0626
         ALR   @06,@04                                             0626
         ST    @06,LINEPTR                                         0626
*  CHARCNT = CHARCNT + 1;                                  /*@G51DGJJ*/
         AL    @04,CHARCNT                                         0627
         ST    @04,CHARCNT                                         0627
*  CALL BINLOG;              /* GET LOG DATA, FORMAT IT      @G51DGJJ*/
         BAL   @14,BINLOG                                          0628
*END;                                                      /*@G51DGJJ*/
@EL00028 DS    0H                                                  0629
@EF00028 DS    0H                                                  0629
@ER00028 LM    @14,@12,@SA00028                                    0629
         BR    @14                                                 0629
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'END SCAN' COMMAND.              @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*ENDSCAN:   PROC;                                          /*@G51DGJJ*/
ENDSCAN  STM   @14,@12,12(@13)                                     0630
*  PRINTBUF = BLANK;                                       /*@G51DGJJ*/
         L     @06,LINEPTR                                         0631
         MVI   PRINTBUF(@06),C' '                                  0631
*  ENDSCN = ON;                                            /*@G51DGJJ*/
         OI    ENDSCN,B'10000000'                                  0632
*END;                                                      /*@G51DGJJ*/
@EL00029 DS    0H                                                  0633
@EF00029 DS    0H                                                  0633
@ER00029 LM    @14,@12,12(@13)                                     0633
         BR    @14                                                 0633
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES AN UNDEFINED SCAN COMMAND.           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*UNDEFINE:  PROC;                                          /*@G51DGJJ*/
UNDEFINE STM   @14,@12,12(@13)                                     0634
*  SCANERR = ON;             /* INDICATE SCAN CODE ERROR     @G51DGJJ*/
         OI    SCANERR,B'01000000'                                 0635
*  HXDMPFRM = ON;            /* INDICATE HEX DUMP FRAME      @G51DGJJ*/
         OI    HXDMPFRM,B'00000100'                                0636
*  PRNTB123 = '1C1C1C'X;     /* FLAG COMM. WITH '***'        @G51DGJJ*/
         L     @06,LINEPTR                                         0637
         MVC   PRNTB123(3,@06),@CB01313                            0637
*  LINEPTR = LINEPTR + 3;    /* BUMP POINTERS                @G51DGJJ*/
         LA    @04,3                                               0638
         ALR   @06,@04                                             0638
         ST    @06,LINEPTR                                         0638
*  CHARCNT = CHARCNT + 3;                                  /*@G51DGJJ*/
         AL    @04,CHARCNT                                         0639
         ST    @04,CHARCNT                                         0639
*END;                                                      /*@G51DGJJ*/
@EL00030 DS    0H                                                  0640
@EF00030 DS    0H                                                  0640
@ER00030 LM    @14,@12,12(@13)                                     0640
         BR    @14                                                 0640
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE NEXT 2 LOG DATA BYTES FOR FORMAT Y.        */
*/* IT INSERTS A PARITY BIT FROM THE                         @G51DGJJ*/
*/* PARITY BIT AREA INTO THE LOG DATA.                       @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FLOGY:     PROC;                                          /*@G51DGJJ*/
FLOGY    STM   @14,@12,@SA00031                                    0641
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  IF SVLOGTK = OFF THEN                                           0643
         TM    SVLOGTK,B'01000000'                                 0643
         BNZ   @RF00643                                            0643
*    CALL FLOGM;                       /* K = 0              @G51DGJJ*/
         BAL   @14,FLOGM                                           0644
*  ELSE                                                            0645
*    DO;                               /* K = 1              @G51DGJJ*/
         B     @RC00643                                            0645
@RF00643 DS    0H                                                  0646
*      IF (PREVD & '600'X) = ZERO THEN                             0646
         LA    @06,1536                                            0646
         N     @06,PREVD                                           0646
         LTR   @06,@06                                             0646
         BNZ   @RF00646                                            0646
*        CALL FLOGM;                   /* SS = 00            @G51DGJJ*/
         BAL   @14,FLOGM                                           0647
*      ELSE                                                        0648
*        IF (PREVD & '600'X) = '600'X THEN                         0648
         B     @RC00646                                            0648
@RF00646 LA    @06,1536                                            0648
         L     @04,PREVD                                           0648
         NR    @04,@06                                             0648
         CR    @04,@06                                             0648
         BNE   @RF00648                                            0648
*          CALL UNDEFINE;              /* SS = 11            @G51DGJJ*/
         BAL   @14,UNDEFINE                                        0649
*        ELSE                                                      0650
*          DO;                         /* SS = 01 OR 10      @G51DGJJ*/
         B     @RC00648                                            0650
@RF00648 DS    0H                                                  0651
*            Q = (PREVZ + PREVB) / NUM8;                   /*@G51DGJJ*/
         L     @06,PREVZ                                           0651
         AL    @06,PREVB                                           0651
         LR    @00,@06                                             0651
         SRDA  @00,32                                              0651
         D     @00,@CF00065                                        0651
         ST    @01,Q                                               0651
*            R = (PREVZ + PREVB) - NUM8 * Q;               /*@G51DGJJ*/
         LR    @04,@01                                             0652
         SLA   @04,3                                               0652
         SLR   @06,@04                                             0652
         ST    @06,R                                               0652
*            PREVB = CURRB;       /* SAVE FOR NEXT TIME      @G51DGJJ*/
         MVC   PREVB(4),CURRB                                      0653
*                                 /* CURRB = BBB IF BINARY,  @G51DGJJ*/
*                                 /* CURRB = CC+MMM IF HEX   @G51DGJJ*/
*            CURRD = PREVD + Q;   /* OFFSET TO 1ST BYTE      @G51DGJJ*/
         AL    @01,PREVD                                           0654
         ST    @01,CURRD                                           0654
*            PREVD = CURRD;       /* SAVE FOR NEXT TIME      @G51DGJJ*/
         ST    @01,PREVD                                           0655
*            CURRZ = R;           /* OFFSET TO 1ST BIT       @G51DGJJ*/
         ST    @06,CURRZ                                           0656
*            PREVZ = CURRZ;       /* SAVE FOR NEXT TIME      @G51DGJJ*/
         ST    @06,PREVZ                                           0657
*            CURRD = CURRD & '1FF'X;   /* RIGHT-MOST 9 BITS  @G51DGJJ*/
         LA    @06,511                                             0658
         NR    @06,@01                                             0658
         ST    @06,CURRD                                           0658
*            LOG1 = LOG;          /* FETCH 1ST DATA BYTE     @G51DGJJ*/
         L     @04,LOGPTR                                          0659
         LR    @03,@04                                             0659
         ALR   @03,@06                                             0659
         MVC   LOG1(1),LOG(@03)                                    0659
*            CURRD = CURRD + 1;                            /*@G51DGJJ*/
         AH    @06,@CH00054                                        0660
         ST    @06,CURRD                                           0660
*            LOG2 = LOG;          /* FETCH 2ND DATA BYTE     @G51DGJJ*/
         ALR   @04,@06                                             0661
         MVC   LOG2(1),LOG(@04)                                    0661
*            IF (PREVD & '400'X) = ZERO THEN                       0662
         N     @01,@CF01319                                        0662
         LTR   @01,@01                                             0662
         BNZ   @RF00662                                            0662
*               DO;                    /* SS = 01            @G51DGJJ*/
*                 CURDL = CURRD - 1;                       /*@G51DGJJ*/
         BCTR  @06,0                                               0664
         ST    @06,CURDL                                           0664
*                 CALL FETCHPAR;       /* FETCH PARITY BIT   @G51DGJJ*/
         BAL   @14,FETCHPAR                                        0665
*                 R8 = PARBIT;         /* SHIFT BOTH BYTES RIGHT     */
         L     R8,PARBIT                                           0666
*                 R9 = LOGDATA;        /* 1 BIT POSITION. INSERT     */
         MVC   @ZT00002+2(2),LOGDATA                               0667
         L     R9,@ZT00002                                         0667
*                 SLL(R9,16);          /* PARITY BIT IN LEFT-        */
         SLL   R9,16                                               0668
*                 SRDL(R8,17);         /* MOST POSITION OF 1ST       */
         SRDL  R8,17                                               0669
*                 LOGDATA = R9;        /* LOG DATA BYTE.     @G51DGJJ*/
         ST    R9,@TF00001                                         0670
         MVC   LOGDATA(2),@TF00001+2                               0670
*               END;                                       /*@G51DGJJ*/
*            ELSE                                                  0672
*              DO;                     /* SS = 10            @G51DGJJ*/
         B     @RC00662                                            0672
@RF00662 DS    0H                                                  0673
*                CURDL = CURRD;                            /*@G51DGJJ*/
         MVC   CURDL(4),CURRD                                      0673
*                CALL FETCHPAR;   /* FETCH PARITY BIT        @G51DGJJ*/
         BAL   @14,FETCHPAR                                        0674
*                R8 = PARBIT;     /* SHIFT 2ND DATA BYTE     @G51DGJJ*/
         L     R8,PARBIT                                           0675
*                R9 = LOG2;       /* RIGHT 1 BIT POSITION    @G51DGJJ*/
         SLR   R9,R9                                               0676
         IC    R9,LOG2                                             0676
*                SLL(R9,24);      /* AND INSERT PARITY BIT   @G51DGJJ*/
         SLL   R9,24                                               0677
*                SRDL(R8,1);      /* IN LEFT-MOST BIT        @G51DGJJ*/
         SRDL  R8,1                                                0678
*                R8 = LOG1;       /* POSITION.               @G51DGJJ*/
         SLR   R8,R8                                               0679
         IC    R8,LOG1                                             0679
*                SRDL(R8,24);                              /*@G51DGJJ*/
         SRDL  R8,24                                               0680
*                LOGDATA = R9;                             /*@G51DGJJ*/
         ST    R9,@TF00001                                         0681
         MVC   LOGDATA(2),@TF00001+2                               0681
*               END;                                       /*@G51DGJJ*/
*          END;                                            /*@G51DGJJ*/
*    END;                                                  /*@G51DGJJ*/
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00031 DS    0H                                                  0686
@EF00031 DS    0H                                                  0686
@ER00031 LM    @14,@12,@SA00031                                    0686
         BR    @14                                                 0686
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE NEXT 3 LOG DATA BYTES FOR FORMAT G.        */
*/* IT COMPRESSES THIS DATA TO 2 BYTES                       @G51DGJJ*/
*/* BY DROPPING THE 2 RIGHT-MOST BITS FROM THE 1ST 2         @G51DGJJ*/
*/* BYTES AND THE 4 RIGHT-MOST BITS FROM THE 3RD BYTE.       @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FLOGG:     PROC;                                          /*@G51DGJJ*/
FLOGG    STM   @14,@12,@SA00032                                    0687
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  IF PREVD <= '23F'X THEN                                         0689
         L     @06,PREVD                                           0689
         CH    @06,@CH01324                                        0689
         BH    @RF00689                                            0689
*     CALL FLOGM;                                          /*@G51DGJJ*/
         BAL   @14,FLOGM                                           0690
*  ELSE                                                            0691
*    DO;                     /* MICRO-FICHE LOG DATA         @G51DGJJ*/
         B     @RC00689                                            0691
@RF00689 DS    0H                                                  0692
*      CALL FLOGM;           /* FETCH NEXT 2 BYYTES          @G51DGJJ*/
         BAL   @14,FLOGM                                           0692
*      CURRD = CURRD + 1;                                  /*@G51DGJJ*/
         LA    @06,1                                               0693
         AL    @06,CURRD                                           0693
         ST    @06,CURRD                                           0693
*      LOG3 = LOG;           /* FETCH 3RD BYTE               @G51DGJJ*/
         AL    @06,LOGPTR                                          0694
         MVC   LOG3(1),LOG(@06)                                    0694
*      R8 = LOG1;                                          /*@G51DGJJ*/
         SLR   R8,R8                                               0695
         IC    R8,LOG1                                             0695
*      SRL(R8,2);                                          /*@G51DGJJ*/
         SRL   R8,2                                                0696
*      R9 = LOG2;                                          /*@G51DGJJ*/
         SLR   R9,R9                                               0697
         IC    R9,LOG2                                             0697
*      SLL(R9,24);                                         /*@G51DGJJ*/
         SLL   R9,24                                               0698
*      SLDL(R8,6);                                         /*@G51DGJJ*/
         SLDL  R8,6                                                0699
*      R9 = LOG3;                                          /*@G51DGJJ*/
         SLR   R9,R9                                               0700
         IC    R9,LOG3                                             0700
*      SLL(R9,24);                                         /*@G51DGJJ*/
         SLL   R9,24                                               0701
*      SRDL(R8,28);                                        /*@G51DGJJ*/
         SRDL  R8,28                                               0702
*      LOGDATA = R9;                                       /*@G51DGJJ*/
         ST    R9,@TF00001                                         0703
         MVC   LOGDATA(2),@TF00001+2                               0703
*    END;                                                  /*@G51DGJJ*/
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00032 DS    0H                                                  0706
@EF00032 DS    0H                                                  0706
@ER00032 LM    @14,@12,@SA00032                                    0706
         BR    @14                                                 0706
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'DISPLAY HEX - PARITY×NOT'       @G51DGJJ*/
*/* COMMAND.                                                 @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*DISPLAYH: PROC;                                           /*@G51DGJJ*/
DISPLAYH STM   @14,@12,@SA00033                                    0707
*  PARITY = OFF;                                           /*@G51DGJJ*/
         NI    PARITY,B'11110111'                                  0708
*  IF (PRINTB2 & '80'X) ^= ZERO THEN                               0709
         L     @06,LINEPTR                                         0709
         LA    @04,128                                             0709
         MVC   @ZT00003+3(1),PRINTB2(@06)                          0709
         N     @04,@ZT00003                                        0709
         LTR   @04,@04                                             0709
         BZ    @RF00709                                            0709
*    DO;                                                   /*@G51DGJJ*/
*      PARITY = ON;               /* DISPLAY HEX - PARITY    @G51DGJJ*/
         OI    PARITY,B'00001000'                                  0711
*      SAVEL = PRINTBUF & '20'X;  /* SAVE 'L' BIT            @G51DGJJ*/
         MVC   SAVEL(1),PRINTBUF(@06)                              0712
         NI    SAVEL,X'20'                                         0712
*    END;                                                  /*@G51DGJJ*/
*  PREVD = PRINTB2 & '3F'X; /* OFFSET TO STARTING BYTE       @G51DGJJ*/
@RF00709 L     @06,LINEPTR                                         0714
         LA    @04,63                                              0714
         MVC   @ZT00003+3(1),PRINTB2(@06)                          0714
         N     @04,@ZT00003                                        0714
         ST    @04,PREVD                                           0714
*  SLL(PREVD,5);            /* OF LOG DATA - DDDDDD          @G51DGJJ*/
         SLL   @04,5                                               0715
         ST    @04,PREVD                                           0715
*  PREVD = PREVD × PRINTB3 & '1F'X;   /*   - DDDDDDDDDDD     @G51DGJJ*/
         SLR   @04,@04                                             0716
         IC    @04,PRINTB3(,@06)                                   0716
         LA    @03,31                                              0716
         NR    @03,@04                                             0716
         O     @03,PREVD                                           0716
         ST    @03,PREVD                                           0716
*  PREVZ = PRINTB3;         /* OFFSET TO STARTING BIT        @G51DGJJ*/
         ST    @04,PREVZ                                           0717
*  SRL(PREVZ,5);            /* WITHIN BYTE - ZZZ             @G51DGJJ*/
         SRL   @04,5                                               0718
         ST    @04,PREVZ                                           0718
*  PREVB = 0;                                              /*@G51DGJJ*/
         SLR   @04,@04                                             0719
         ST    @04,PREVB                                           0719
*  CURRC = PRINTBUF & '18'X;                               /*@G51DGJJ*/
         LA    @03,24                                              0720
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0720
         N     @03,@ZT00003                                        0720
         ST    @03,CURRC                                           0720
*  SRL(CURRC,3);            /* CC                            @G51DGJJ*/
         SRL   @03,3                                               0721
         ST    @03,CURRC                                           0721
*  IF CURRC = ZERO THEN                                            0722
         C     @04,CURRC                                           0722
         BNE   @RF00722                                            0722
*    CURRC= FOUR;                                          /*@G51DGJJ*/
         MVC   CURRC(4),@CF00063                                   0723
*  CURRM = PRINTBUF & '07'X; /* MMM                          @G51DGJJ*/
@RF00722 L     @06,LINEPTR                                         0724
         LA    @04,7                                               0724
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0724
         N     @04,@ZT00003                                        0724
         ST    @04,CURRM                                           0724
*  CURRB = CURRC + CURRM;    /* BIT STRING LENGTH = CC+MMM   @G51DGJJ*/
         AL    @04,CURRC                                           0725
         ST    @04,CURRB                                           0725
*  PRNTB123 = BLANK3;        /* REPLACE COMM. WITH 3 BLANKS  @G51DGJJ*/
         MVC   PRNTB123(3,@06),BLANK3                              0726
*  LINEPTR = LINEPTR + 3;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,3                                               0727
         ALR   @06,@04                                             0727
         ST    @06,LINEPTR                                         0727
*  CHARCNT = CHARCNT + 3;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         0728
         ST    @04,CHARCNT                                         0728
*  CALL HEXLOG;              /* GET LOG DATA, FORMAT IT      @G51DGJJ*/
         BAL   @14,HEXLOG                                          0729
*  SW1 = ON;                                               /*@G51DGJJ*/
         OI    SW1,B'00010000'                                     0730
*  DO WHILE (SW1 = ON);                                    /*@G51DGJJ*/
         B     @DE00731                                            0731
@DL00731 DS    0H                                                  0732
*    IF CHARCNT => 80 THEN                                         0732
         L     @06,CHARCNT                                         0732
         CH    @06,@CH00550                                        0732
         BL    @RF00732                                            0732
*      SW1 = OFF;                                          /*@G51DGJJ*/
         NI    SW1,B'11101111'                                     0733
*    ELSE                                                          0734
*      DO;                   /* EXAMINE NEXT SCAN CODE       @G51DGJJ*/
         B     @RC00732                                            0734
@RF00732 DS    0H                                                  0735
*        IF (PRINTBUF & 'C0'X) = '80'X THEN                        0735
         L     @06,LINEPTR                                         0735
         MVC   @TS00001(1),PRINTBUF(@06)                           0735
         NI    @TS00001,X'C0'                                      0735
         CLI   @TS00001,X'80'                                      0735
         BNE   @RF00735                                            0735
*          CALL NEXTHEX;     /* 'DISPLAY NEXT' COMMAND       @G51DGJJ*/
         BAL   @14,NEXTHEX                                         0736
*        ELSE                                                      0737
*          IF PRINTBUF => '00'X &                                  0737
*             PRINTBUF <= '3F'X THEN                               0737
         B     @RC00735                                            0737
@RF00735 L     @06,LINEPTR                                         0737
         CLI   PRINTBUF(@06),X'00'                                 0737
         BL    @RF00737                                            0737
         CLI   PRINTBUF(@06),X'3F'                                 0737
         BH    @RF00737                                            0737
*             CALL TEXT;     /* TEXT - TOO MANY PLACE-HOLDERS?       */
         BAL   @14,TEXT                                            0738
*          ELSE              /* NOT 'DISPLAY NEXT' --        @G51DGJJ*/
*            SW1 = OFF;      /* LET 'CODETYPE' PROCEDURE     @G51DGJJ*/
         B     @RC00737                                            0739
@RF00737 NI    SW1,B'11101111'                                     0739
*      END;                  /* PROCESS IT                   @G51DGJJ*/
@RC00737 DS    0H                                                  0740
@RC00735 DS    0H                                                  0741
*  END;                                                    /*@G51DGJJ*/
@RC00732 DS    0H                                                  0741
@DE00731 TM    SW1,B'00010000'                                     0741
         BO    @DL00731                                            0741
*END;                                                      /*@G51DGJJ*/
@EL00033 DS    0H                                                  0742
@EF00033 DS    0H                                                  0742
@ER00033 LM    @14,@12,@SA00033                                    0742
         BR    @14                                                 0742
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE LOG DATA. PARITY IS CHECKED-       @G51DGJJ*/
*/* (IF INDICATED)-USING THE PARITY BIT FROM THE DATA        @G51DGJJ*/
*/* (L=0) OR FROM THE PARITY BIT AREA (L=1). 'FORMATHX'      @G51DGJJ*/
*/* IS THEN INVOKED WHICH FORMATS THE DATA FOR PRINT.        @G51DGJJ*/
*/* THE PROC IS CALLED BY BOTH 'DISPLAYH'(DISPLAY HEX)       @G51DGJJ*/
*/* AND 'NEXTHEX'(DISPLAY NEXT HEX). TWO OR THREE LOG        @G51DGJJ*/
*/* DATA BYTES ARE FETCHED BY THE SAME "FLOG" ROUTINES       @G51DGJJ*/
*/* DESCRIBED IN THE PROC 'BINLOG'.                          @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*HEXLOG:    PROC;                                          /*@G51DGJJ*/
HEXLOG   STM   @14,@12,@SA00034                                    0743
*  IF SVLOGT1 = 'E8'X ×                                            0744
*     SVLOGT1 = 'EC'X THEN                                         0744
         CLI   SVLOGT1,X'E8'                                       0744
         BE    @RT00744                                            0744
         CLI   SVLOGT1,X'EC'                                       0744
         BNE   @RF00744                                            0744
@RT00744 DS    0H                                                  0745
*     CALL FLOGM;            /* CCH OR 3033 MCH - FETCH DATA @G51DGJJ*/
         BAL   @14,FLOGM                                           0745
*  ELSE                                                            0746
*    IF SVLOGT1 = 'ED'X THEN                                       0746
         B     @RC00744                                            0746
@RF00744 CLI   SVLOGT1,X'ED'                                       0746
         BNE   @RF00746                                            0746
*      CALL FLOGG;           /* FETCH FORMAT G DATA          @G51DGJJ*/
         BAL   @14,FLOGG                                           0747
*    ELSE                                                          0748
*      CALL FLOGY;           /* FETCH FORMAT Y DATA          @G51DGJJ*/
         B     @RC00746                                            0748
@RF00746 BAL   @14,FLOGY                                           0748
*  IF PARITY = ON THEN                                             0749
@RC00746 DS    0H                                                  0749
@RC00744 TM    PARITY,B'00001000'                                  0749
         BNO   @RF00749                                            0749
*   DO;                                                    /*@G51DGJJ*/
*    IF SAVEL = ZERO THEN                                          0751
         CLI   SAVEL,0                                             0751
         BNE   @RF00751                                            0751
*     DO;                    /* PARITY WITH DATA - GET IT    @G51DGJJ*/
*      IF CURRZ = ZERO THEN                                        0753
         L     @06,CURRZ                                           0753
         LTR   @06,@06                                             0753
         BNZ   @RF00753                                            0753
*       DO;                  /* PARITY BIT IN PREV. BYTE     @G51DGJJ*/
*        CURRD = CURRD - 2;                                /*@G51DGJJ*/
         LA    @06,2                                               0755
         L     @04,CURRD                                           0755
         SLR   @04,@06                                             0755
         ST    @04,CURRD                                           0755
*        WK = LOG;           /* GET BYTE - BIT RIGHT JUST.   @G51DGJJ*/
         L     @03,LOGPTR                                          0756
         ALR   @03,@04                                             0756
         MVC   WK(1),LOG(@03)                                      0756
*        CURRD = CURRD + 2;                                /*@G51DGJJ*/
         ALR   @04,@06                                             0757
         ST    @04,CURRD                                           0757
*       END;                                               /*@G51DGJJ*/
*      ELSE                                                        0759
*       DO;                  /* PARITY BIT IN SAME BYTE      @G51DGJJ*/
         B     @RC00753                                            0759
@RF00753 DS    0H                                                  0760
*        WK = LOG1;                                        /*@G51DGJJ*/
         MVC   WK(1),LOG1                                          0760
*        X = EIGHT - CURRZ;                                /*@G51DGJJ*/
         LA    @06,8                                               0761
         SL    @06,CURRZ                                           0761
         ST    @06,X                                               0761
*        SRL(WK,X);          /* RIGHT JUSTIFY PARITY BIT     @G51DGJJ*/
         SLR   @04,@04                                             0762
         IC    @04,WK                                              0762
         SRL   @04,0(@06)                                          0762
         STC   @04,WK                                              0762
*       END;                                               /*@G51DGJJ*/
*       PARBIT = WK & '01'X; /* EXTRACT, SAVE PARITY BIT     @G51DGJJ*/
@RC00753 LA    @06,1                                               0764
         MVC   @ZT00003+3(1),WK                                    0764
         N     @06,@ZT00003                                        0764
         ST    @06,PARBIT                                          0764
*     END;                                                 /*@G51DGJJ*/
*    ELSE                                                          0766
*     DO;                                                  /*@G51DGJJ*/
         B     @RC00751                                            0766
@RF00751 DS    0H                                                  0767
*      CURDL = CURRD - 1;                                  /*@G51DGJJ*/
         L     @06,CURRD                                           0767
         BCTR  @06,0                                               0767
         ST    @06,CURDL                                           0767
*      CALL FETCHPAR;        /* PARITY NOT WITH DATA - FETCH @G51DGJJ*/
         BAL   @14,FETCHPAR                                        0768
*     END;                                                 /*@G51DGJJ*/
*    CALL CKPARITY;          /* CHECK PARITY                 @G51DGJJ*/
@RC00751 BAL   @14,CKPARITY                                        0770
*   END;                                                   /*@G51DGJJ*/
*    CALL FORMATHX;          /* FORMAT HEX DATA FOR PRINT    @G51DGJJ*/
@RF00749 BAL   @14,FORMATHX                                        0772
*END;                                                      /*@G51DGJJ*/
@EL00034 DS    0H                                                  0773
@EF00034 DS    0H                                                  0773
@ER00034 LM    @14,@12,@SA00034                                    0773
         BR    @14                                                 0773
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FETCHES THE PARITY BIT FROM THE                @G51DGJJ*/
*/* PARITY BIT AREA OF THE LOGOUT.                           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FETCHPAR:  PROC;                                          /*@G51DGJJ*/
FETCHPAR STM   @14,@12,12(@13)                                     0774
*  PBYTEPTR = CURDL & '0007'X;    /* EXTRACT P-BIT OFFSET    @G51DGJJ*/
         L     @06,CURDL                                           0775
         LA    @04,7                                               0775
         NR    @04,@06                                             0775
         STH   @04,PBYTEPTR                                        0775
*  PBITPTR = PBYTEPTR;            /* SAVE (DDD)              @G51DGJJ*/
         STH   @04,PBITPTR                                         0776
*  PBYTEPTR = CURDL;              /* OFFSET - LOG DATA BYTE  @G51DGJJ*/
         STH   @06,PBYTEPTR                                        0777
*  SRL(PBYTEPTR,3);               /* OFFSET TO P-BIT BYTE +  @G51DGJJ*/
         SRL   @06,3                                               0778
         STH   @06,PBYTEPTR                                        0778
*                                 /* OFFSET TO P-BIT AREA    @G51DGJJ*/
*  PBYTEPTR = PBYTEPTR + (SVLOGT23 & '3FFF'X);             /*@G51DGJJ*/
         LH    @06,@CH01342                                        0779
         MVC   @ZT00002+2(2),SVLOGT23                              0779
         N     @06,@ZT00002                                        0779
         AH    @06,PBYTEPTR                                        0779
         STH   @06,PBYTEPTR                                        0779
*  WK = PARBYTE;                  /* FETCH PARITY BYTE       @G51DGJJ*/
         AL    @06,LOGPTR                                          0780
         MVC   WK(1),PARBYTE(@06)                                  0780
*  X = 7 - PBITPTR;               /* COMPUTE SHIFT VALUE     @G51DGJJ*/
         LCR   @04,@04                                             0781
         AH    @04,@CH00082                                        0781
         ST    @04,X                                               0781
*  SRL(WK,X);                     /* RIGHT JUSTIFY P-BIT     @G51DGJJ*/
         SLR   @06,@06                                             0782
         IC    @06,WK                                              0782
         SRL   @06,0(@04)                                          0782
         STC   @06,WK                                              0782
*  PARBIT = WK & '01'X;           /* EXTRACT, SAVE IT        @G51DGJJ*/
         LA    @06,1                                               0783
         MVC   @ZT00003+3(1),WK                                    0783
         N     @06,@ZT00003                                        0783
         ST    @06,PARBIT                                          0783
*END;                                                      /*@G51DGJJ*/
@EL00035 DS    0H                                                  0784
@EF00035 DS    0H                                                  0784
@ER00035 LM    @14,@12,12(@13)                                     0784
         BR    @14                                                 0784
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PERFORMS A PARITY CHECK ON LOG DATA            @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*CKPARITY:  PROC;                                          /*@G51DGJJ*/
CKPARITY STM   @14,@12,12(@13)                                     0785
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  R8 = ZERO;                                              /*@G51DGJJ*/
         SLR   R8,R8                                               0787
*  R9 = LOGDATA;             /* LOAD LOG DATA                @G51DGJJ*/
         MVC   @ZT00002+2(2),LOGDATA                               0788
         L     R9,@ZT00002                                         0788
*  X = 16 + CURRZ;           /* COMPUTE SHIFT VALUE          @G51DGJJ*/
         LA    @06,16                                              0789
         AL    @06,CURRZ                                           0789
         ST    @06,X                                               0789
*  SLL(R9,X);                /* LEFT JUSTIFY LOG DATA        @G51DGJJ*/
         SLL   R9,0(@06)                                           0790
*  P = PARBIT;                                             /*@G51DGJJ*/
         MVC   P(4),PARBIT                                         0791
*  DO X = 1 TO CURRB;                                      /*@G51DGJJ*/
         LA    @06,1                                               0792
         B     @DE00792                                            0792
@DL00792 DS    0H                                                  0793
*    SLDL(R8,1);             /*'EXCLUSIVE OR' PARITY BIT,    @G51DGJJ*/
         SLDL  R8,1                                                0793
*    R8 = R8 && P;           /* DATA BITS. RESULT = 1 IF     @G51DGJJ*/
         X     R8,P                                                0794
*    P = R8;                 /* ODD PARITY (OK)              @G51DGJJ*/
         ST    R8,P                                                0795
*    R8 = ZERO;                                            /*@G51DGJJ*/
         SLR   R8,R8                                               0796
*  END;                                                    /*@G51DGJJ*/
         AH    @06,@CH00054                                        0797
@DE00792 ST    @06,X                                               0797
         C     @06,CURRB                                           0797
         BNH   @DL00792                                            0797
*  IF P = ZERO THEN                                                0798
         L     @06,P                                               0798
         LTR   @06,@06                                             0798
         BNZ   @RF00798                                            0798
*    DO;                     /* EVEN PARITY - ERROR          @G51DGJJ*/
*      LINEPTR = LINEPTR - 1;                              /*@G51DGJJ*/
         L     @06,LINEPTR                                         0800
         BCTR  @06,0                                               0800
         ST    @06,LINEPTR                                         0800
*      PRINTBUF = '1C'X;     /* INSERT '*' IN BUFFER         @G51DGJJ*/
         MVI   PRINTBUF(@06),X'1C'                                 0801
*      LINEPTR = LINEPTR + 1;                              /*@G51DGJJ*/
         AH    @06,@CH00054                                        0802
         ST    @06,LINEPTR                                         0802
*    END;                                                  /*@G51DGJJ*/
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00036 DS    0H                                                  0805
@EF00036 DS    0H                                                  0805
@ER00036 LM    @14,@12,12(@13)                                     0805
         BR    @14                                                 0805
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC CONVERTS HEX LOG DATA TO SCAN CODE             @G51DGJJ*/
*/* AND FORMATS IT INTO THE PRINT BUFFER(PRTBUFF),           @G51DGJJ*/
*/* REPLACING THE LOG DATA PLACE-HOLDERS.                    @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FORMATHX:  PROC;                                          /*@G51DGJJ*/
FORMATHX STM   @14,@12,12(@13)                                     0806
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  R9 = LOGDATA;                                           /*@G51DGJJ*/
         MVC   @ZT00002+2(2),LOGDATA                               0808
         L     R9,@ZT00002                                         0808
*  X = 16 + CURRZ;           /* COMPUTE SHIFT VALUE          @G51DGJJ*/
         LA    @06,16                                              0809
         AL    @06,CURRZ                                           0809
         ST    @06,X                                               0809
*  SLL(R9,X);                /* LEFT JUSTIFY LOG DATA        @G51DGJJ*/
         SLL   R9,0(@06)                                           0810
*  R8 = ZERO;                                              /*@G51DGJJ*/
         SLR   R8,R8                                               0811
*  SLDL(R8,CURRC);           /* 1ST HEX CHARACTER            @G51DGJJ*/
         L     @06,CURRC                                           0812
         SLDL  R8,0(@06)                                           0812
*  SCNCODE = R8;                                           /*@G51DGJJ*/
         STC   R8,SCNCODE                                          0813
*  TR(SCNCODE,TRSCANCD);     /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 0814
*  PRINTBUF = SCNCODE;       /* PLACE CODE IN PRINT BUFFER   @G51DGJJ*/
         L     @06,LINEPTR                                         0815
         MVC   PRINTBUF(1,@06),SCNCODE                             0815
*  LINEPTR = LINEPTR + 1;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,1                                               0816
         ALR   @06,@04                                             0816
         ST    @06,LINEPTR                                         0816
*  CHARCNT = CHARCNT + 1;    /* SCAN CODE COUNTER            @G51DGJJ*/
         L     @03,CHARCNT                                         0817
         ALR   @03,@04                                             0817
         ST    @03,CHARCNT                                         0817
*  IF CURRM ^= ZERO THEN                                           0818
         L     @15,CURRM                                           0818
         LTR   @15,@15                                             0818
         BZ    @RF00818                                            0818
*    DO;                                                   /*@G51DGJJ*/
*      R8 = ZERO;                                          /*@G51DGJJ*/
         SLR   R8,R8                                               0820
*      SLDL(R8,CURRM);       /* 2ND HEX CHARACTER            @G51DGJJ*/
         SLDL  R8,0(@15)                                           0821
*      SCNCODE = R8;                                       /*@G51DGJJ*/
         STC   R8,SCNCODE                                          0822
*      TR(SCNCODE,TRSCANCD); /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 0823
*      PRINTBUF = SCNCODE;   /* PLACE CODE IN PRINT BUFFER   @G51DGJJ*/
         MVC   PRINTBUF(1,@06),SCNCODE                             0824
*      LINEPTR = LINEPTR + 1;/* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         ALR   @06,@04                                             0825
         ST    @06,LINEPTR                                         0825
*      CHARCNT = CHARCNT + 1;/* SCAN CODE COUNTER            @G51DGJJ*/
         ALR   @03,@04                                             0826
         ST    @03,CHARCNT                                         0826
*    END;                                                  /*@G51DGJJ*/
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00037 DS    0H                                                  0829
@EF00037 DS    0H                                                  0829
@ER00037 LM    @14,@12,12(@13)                                     0829
         BR    @14                                                 0829
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC PROCESSES THE 'DISPLAY NEXT CHARACTER HEX'     @G51DGJJ*/
*/* COMMAND.                                                 @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*NEXTHEX:   PROC;                                          /*@G51DGJJ*/
NEXTHEX  STM   @14,@12,@SA00038                                    0830
*  CURRC = PRINTBUF & '18'X;                               /*@G51DGJJ*/
         LA    @06,24                                              0831
         L     @04,LINEPTR                                         0831
         MVC   @ZT00003+3(1),PRINTBUF(@04)                         0831
         N     @06,@ZT00003                                        0831
         ST    @06,CURRC                                           0831
*  SRL(CURRC,3);             /* CC                           @G51DGJJ*/
         SRL   @06,3                                               0832
         ST    @06,CURRC                                           0832
*  IF CURRC = ZERO THEN                                            0833
         L     @06,CURRC                                           0833
         LTR   @06,@06                                             0833
         BNZ   @RF00833                                            0833
*  CURRC = FOUR;                                           /*@G51DGJJ*/
         MVC   CURRC(4),@CF00063                                   0834
*  CURRM = PRINTBUF & '07'X; /* MMM                          @G51DGJJ*/
@RF00833 L     @06,LINEPTR                                         0835
         LA    @04,7                                               0835
         MVC   @ZT00003+3(1),PRINTBUF(@06)                         0835
         N     @04,@ZT00003                                        0835
         ST    @04,CURRM                                           0835
*  CURRB = CURRC + CURRM;    /* BIT STRING LENGTH = CC+MMM   @G51DGJJ*/
         AL    @04,CURRC                                           0836
         ST    @04,CURRB                                           0836
*  SAVEL = PRINTBUF & '20'X; /* SAVE 'L' BIT                 @G51DGJJ*/
         MVC   SAVEL(1),PRINTBUF(@06)                              0837
         NI    SAVEL,X'20'                                         0837
*  PRINTBUF = BLANK;                                       /*@G51DGJJ*/
         MVI   PRINTBUF(@06),C' '                                  0838
*  LINEPTR = LINEPTR + 1;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,1                                               0839
         ALR   @06,@04                                             0839
         ST    @06,LINEPTR                                         0839
*  CHARCNT = CHARCNT + 1;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         0840
         ST    @04,CHARCNT                                         0840
*  CALL HEXLOG;              /* GET LOG DATA, FORMAT IT      @G51DGJJ*/
         BAL   @14,HEXLOG                                          0841
*END;                                                      /*@G51DGJJ*/
@EL00038 DS    0H                                                  0842
@EF00038 DS    0H                                                  0842
@ER00038 LM    @14,@12,@SA00038                                    0842
         BR    @14                                                 0842
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS MESSAGES(AS REQUIRED) ON THE SAME      @G51DGJJ*/
*/* PRINT LINE AS THE EDITED DATA TO PRINTABLE(EBCDIC)       @G51DGJJ*/
*/* AND PRINTS THE LINE ON EREPPT.                           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*TRNSLATE:  PROC;                                          /*@G51DGJJ*/
TRNSLATE STM   @14,@12,@SA00039                                    0843
*  IF SCANERR = ON THEN                                            0844
         TM    SCANERR,B'01000000'                                 0844
         BNO   @RF00844                                            0844
*    CALL SCANCODE;              /* FORMAT ERROR MESSAGE     @G51DGJJ*/
         BAL   @14,SCANCODE                                        0845
*  IF LINECTR = 1 THEN                                             0846
@RF00844 CLC   LINECTR(4),@CF00054                                 0846
         BNE   @RF00846                                            0846
*    CALL FRSTLINE;              /* FORMAT FRAME ID HEADER MSG.      */
         BAL   @14,FRSTLINE                                        0847
*  IF LINECTR = 24 THEN                                            0848
@RF00846 CLC   LINECTR(4),@CF00227                                 0848
         BNE   @RF00848                                            0848
*    CALL LASTLINE;              /* FORMAT LINE 24 ID MESSAGE        */
         BAL   @14,LASTLINE                                        0849
*  TR(PRTBUFF,TRTABLE);          /* TRANSLATE TO PRINTABLE   @G51DGJJ*/
@RF00848 TR    PRTBUFF(80),TRTABLE                                 0850
*  PRNTBUFF = PRTBUFF;                                     /*@G51DGJJ*/
         MVC   PRNTBUFF(80),PRTBUFF                                0851
*  CALL PRINT1;                  /* PRINT LINE               @G51DGJJ*/
         BAL   @14,PRINT1                                          0852
*END;                                                      /*@G51DGJJ*/
@EL00039 DS    0H                                                  0853
@EF00039 DS    0H                                                  0853
@ER00039 LM    @14,@12,@SA00039                                    0853
         BR    @14                                                 0853
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS A 'SCAN CODE ERROR' MESSAGE FOR        @G51DGJJ*/
*/* EREPPT.                                                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SCANCODE:     PROC;                                       /*@G51DGJJ*/
SCANCODE STM   @14,@12,@SA00040                                    0854
*  CALL IFCMSG(77,ADDR(MESSAGE)); /* GET ERROR MESSAGE       @G51DGJJ*/
         LA    @06,MESSAGE                                         0855
         ST    @06,@AFTEMPS+20                                     0855
         L     @15,ADIFCMSG(,R2)                                   0855
         LA    @01,@AL00855                                        0855
         BALR  @14,@15                                             0855
*END;                                                      /*@G51DGJJ*/
@EL00040 DS    0H                                                  0856
@EF00040 DS    0H                                                  0856
@ER00040 LM    @14,@12,@SA00040                                    0856
         BR    @14                                                 0856
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS A FRAME IDENTIFICATION MESSAGE ON      @G51DGJJ*/
*/* THE FIRST LINE OF EACH FRAME TO PRINT BESIDE LINE 1.     @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FRSTLINE:  PROC;                                          /*@G51DGJJ*/
FRSTLINE STM   @14,@12,@SA00041                                    0857
*  K = MCFCNT;               /* FRAME SEQUENCE NO.           @G51DGJJ*/
         SLR   @06,@06                                             0858
         IC    @06,MCFCNT(,R5)                                     0858
         ST    @06,K                                               0858
*  CALL CONVBIN(K,BINOUT);                                 /*@G51DGJJ*/
         LA    @01,@AL00859                                        0859
         BAL   @14,CONVBIN                                         0859
*  FRMNO = BINOUT(4:5);                                    /*@G51DGJJ*/
         MVC   FRMNO(2),BINOUT+3                                   0860
*  IF MCFKEY1 = MCF THEN                                           0861
         CLI   MCFKEY1(R5),X'A0'                                   0861
         BNE   @RF00861                                            0861
*    MCFCCFFR = MCFL;                                      /*@G51DGJJ*/
         MVC   MCFCCFFR(2),MCFL                                    0862
*  ELSE                                                            0863
*    MCFCCFFR = CCFL;                                      /*@G51DGJJ*/
         B     @RC00861                                            0863
@RF00861 MVC   MCFCCFFR(2),CCFL                                    0863
*  PARM3 = TWO;                                            /*@G51DGJJ*/
@RC00861 MVC   PARM3(4),@CF00073                                   0864
*  CALL CONVERT(MCFMOD,MODFR,PARM3);                       /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00865                              0865
         LA    @06,MCFMOD(,R5)                                     0865
         ST    @06,@AL00001                                        0865
         LA    @01,@AL00001                                        0865
         BAL   @14,CONVERT                                         0865
*   PARM3 = THREE;                                         /*@G51DGJJ*/
         MVC   PARM3(4),@CF00075                                   0866
*  CALL CONVERT(MCFSER,SERFR,PARM3);                       /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00867                              0867
         LA    @06,MCFSER(,R5)                                     0867
         ST    @06,@AL00001                                        0867
         LA    @01,@AL00001                                        0867
         BAL   @14,CONVERT                                         0867
*  MESSAGE = FRMIDENT;                                     /*@G51DGJJ*/
         MVI   MESSAGE+31,C' '                                     0868
         MVC   MESSAGE+32(26),MESSAGE+31                           0868
         MVC   MESSAGE(31),FRMIDENT                                0868
*END;                                                      /*@G51DGJJ*/
@EL00041 DS    0H                                                  0869
@EF00041 DS    0H                                                  0869
@ER00041 LM    @14,@12,@SA00041                                    0869
         BR    @14                                                 0869
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS THE INFORMATION IN LINE 24             @G51DGJJ*/
*/* OF EACH FRAME INTO A SEPARATE MESSAGE TO PRINT           @G51DGJJ*/
*/* BESIDE LINE 24.                                          @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*LASTLINE:  PROC;                                          /*@G51DGJJ*/
LASTLINE STM   @14,@12,@SA00042                                    0870
*  LINEPTR = LINEPTR + 1;                                  /*@G51DGJJ*/
         LA    @06,1                                               0871
         L     @04,LINEPTR                                         0871
         ALR   @04,@06                                             0871
         ST    @04,LINEPTR                                         0871
*  PARM3 = ONE;                                            /*@G51DGJJ*/
         ST    @06,PARM3                                           0872
*  CALL CONVERT(PRINTBUF,GROUPL24,PARM3);                  /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00873                              0873
         ST    @04,@AL00001                                        0873
         LA    @01,@AL00001                                        0873
         BAL   @14,CONVERT                                         0873
*  CALL CONVERT(PRINTB2,IDL24,PARM3);                      /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00874                              0874
         L     @06,LINEPTR                                         0874
         LA    @06,PRINTB2(,@06)                                   0874
         ST    @06,@AL00001                                        0874
         LA    @01,@AL00001                                        0874
         BAL   @14,CONVERT                                         0874
*  CALL CONVERT(PRINTB3,ECLEVL24,PARM3);                   /*@G51DGJJ*/
         MVC   @AL00001+4(8),@AL00875                              0875
         L     @06,LINEPTR                                         0875
         LA    @06,PRINTB3(,@06)                                   0875
         ST    @06,@AL00001                                        0875
         LA    @01,@AL00001                                        0875
         BAL   @14,CONVERT                                         0875
*  MESSAGE = LINE24;                                       /*@G51DGJJ*/
         MVI   MESSAGE+30,C' '                                     0876
         MVC   MESSAGE+31(27),MESSAGE+30                           0876
         MVC   MESSAGE(30),LINE24                                  0876
*  PRNTB123 = BLANK3;                                      /*@G51DGJJ*/
         L     @06,LINEPTR                                         0877
         MVC   PRNTB123(3,@06),BLANK3                              0877
*END;                                                      /*@G51DGJJ*/
@EL00042 DS    0H                                                  0878
@EF00042 DS    0H                                                  0878
@ER00042 LM    @14,@12,@SA00042                                    0878
         BR    @14                                                 0878
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THESE PROC'S HANDLE THE SPECIAL CASE SCAN CODES.         @G51DGJJ*/
*/* REFERENCE APPENDIX 'A' - SCAN BUFFER CODES - FOR         @G51DGJJ*/
*/* DESCRIPTIONS.                                            @G51DGJJ*/
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 1-0.                      @G51DGJJ*/
*/* IT DISPLAYS 16 BITS OF BINARY DATA AS 4 CONTIGUOUS       @G51DGJJ*/
*/* HEX CHARACTERS.                                          @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE10:  PROC;                                          /*@G51DGJJ*/
SPCASE10 STM   @14,@12,@SA00043                                    0879
*  PARITY = OFF;                                           /*@G51DGJJ*/
         NI    PARITY,B'11110111'                                  0880
*  IF (PRINTB2 & '80'X) ^= ZERO THEN                               0881
         LA    @06,128                                             0881
         L     @04,LINEPTR                                         0881
         MVC   @ZT00003+3(1),PRINTB2(@04)                          0881
         N     @06,@ZT00003                                        0881
         LTR   @06,@06                                             0881
         BZ    @RF00881                                            0881
*    PARITY = ON;                 /* CHECK PARITY            @G51DGJJ*/
         OI    PARITY,B'00001000'                                  0882
*  CALL LGOFFSET;                 /* ASSEMBLE LOG OFFSET     @G51DGJJ*/
@RF00881 BAL   @14,LGOFFSET                                        0883
*  LOG1 = LOG;               /* FETCH 1ST LOG DATA BYTE      @G51DGJJ*/
         L     @06,LOGPTR                                          0884
         L     @04,CURRD                                           0884
         LR    @03,@06                                             0884
         ALR   @03,@04                                             0884
         MVC   LOG1(1),LOG(@03)                                    0884
*  CURRD = CURRD + 1;                                      /*@G51DGJJ*/
         AL    @04,@CF00054                                        0885
         ST    @04,CURRD                                           0885
*  LOG2 = LOG;               /* FETCH 2ND LOG DATA BYTE      @G51DGJJ*/
         ALR   @06,@04                                             0886
         MVC   LOG2(1),LOG(@06)                                    0886
*  IF PARITY = ON THEN                                             0887
         TM    PARITY,B'00001000'                                  0887
         BNO   @RF00887                                            0887
*    DO;                                                   /*@G51DGJJ*/
*      CURDL = CURRD - 1;                                  /*@G51DGJJ*/
         BCTR  @04,0                                               0889
         ST    @04,CURDL                                           0889
*      CALL FETCHPAR;        /* PARITY NOT WITH DATA - FETCH @G51DGJJ*/
         BAL   @14,FETCHPAR                                        0890
*      CURRZ = 3;            /* OFFSET TO STARTING BIT       @G51DGJJ*/
         MVC   CURRZ(4),@CF00075                                   0891
*      CURRB = 12;           /* LENGTH OF BIT STRING         @G51DGJJ*/
         MVC   CURRB(4),@CF00035                                   0892
*      CALL CKPARITY;        /* CHECK PARITY                 @G51DGJJ*/
         BAL   @14,CKPARITY                                        0893
*    END;                                                  /*@G51DGJJ*/
*    CALL FORMAT10;          /* FORMAT 4 HEX CHAR'S - 'NNNN' @G51DGJJ*/
@RF00887 BAL   @14,FORMAT10                                        0895
*END;                                                      /*@G51DGJJ*/
@EL00043 DS    0H                                                  0896
@EF00043 DS    0H                                                  0896
@ER00043 LM    @14,@12,@SA00043                                    0896
         BR    @14                                                 0896
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS HEX DATA FOR SPECIAL CASE 1-0.         @G51DGJJ*/
*/* IT CONVERTS HEX LOG DATA TO SCAN CODE AND FORMATS IT     @G51DGJJ*/
*/* INTO THE PRINT BUFFER(PRTBUFF), REPLACING THE            @G51DGJJ*/
*/* LOG DATA PLACE-HOLDERS.                                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FORMAT10:  PROC;                                          /*@G51DGJJ*/
FORMAT10 STM   @14,@12,12(@13)                                     0897
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  R9 = LOGDATA;                                           /*@G51DGJJ*/
         MVC   @ZT00002+2(2),LOGDATA                               0899
         L     R9,@ZT00002                                         0899
*  R9 = R9 & '1FFF'X;        /* SET 1ST 3 BITS = 0           @G51DGJJ*/
         N     R9,@CF01378                                         0900
*  SLL(R9,16);               /* LEFT JUSTIFY LOG DATA        @G51DGJJ*/
         SLL   R9,16                                               0901
*  DO J = 1 TO 4;            /* LOOP THRU 4 HEX CHARACTERS   @G51DGJJ*/
         LA    @06,1                                               0902
         ST    @06,J                                               0902
@DL00902 DS    0H                                                  0903
*    R8 = ZERO;                                            /*@G51DGJJ*/
         SLR   R8,R8                                               0903
*    SLDL(R8,FOUR);          /* ISOLATE CHARACTER            @G51DGJJ*/
         SLDL  R8,4                                                0904
*    SCNCODE = R8;                                         /*@G51DGJJ*/
         STC   R8,SCNCODE                                          0905
*    TR(SCNCODE,TRSCANCD);   /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 0906
*    PRINTBUF = SCNCODE;     /* PLACE CODE IN PRINT BUFFER   @G51DGJJ*/
         L     @04,LINEPTR                                         0907
         MVC   PRINTBUF(1,@04),SCNCODE                             0907
*    LINEPTR = LINEPTR + 1;  /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @03,1                                               0908
         ALR   @04,@03                                             0908
         ST    @04,LINEPTR                                         0908
*    CHARCNT = CHARCNT + 1;  /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @03,CHARCNT                                         0909
         ST    @03,CHARCNT                                         0909
*  END;                                                    /*@G51DGJJ*/
         AL    @06,@CF00054                                        0910
         ST    @06,J                                               0910
         CH    @06,@CH00063                                        0910
         BNH   @DL00902                                            0910
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00044 DS    0H                                                  0912
@EF00044 DS    0H                                                  0912
@ER00044 LM    @14,@12,12(@13)                                     0912
         BR    @14                                                 0912
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 1-1.                      @G51DGJJ*/
*/* IT DISPLAYS SELECTED BITS FROM 6 CONTIGUOUS BYTES        @G51DGJJ*/
*/* OF BINARY DATA AS 8 HEX CHARACTERS IN THE FOLLOWING      @G51DGJJ*/
*/* FORMAT-  NN NN NN NN                                     @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE11:  PROC;                                          /*@G51DGJJ*/
SPCASE11 STM   @14,@12,@SA00045                                    0913
*  CALL LGOFFSET;            /* ASSEMBLE LOG OFFSET          @G51DGJJ*/
         BAL   @14,LGOFFSET                                        0914
*  CURRZ = ZERO;             /* OFFSET TO STARTING BIT       @G51DGJJ*/
         SLR   @06,@06                                             0915
         ST    @06,CURRZ                                           0915
*  CURRB = EIGHT;            /* LENGTH OF BIT STRING         @G51DGJJ*/
         MVC   CURRB(4),@CF00065                                   0916
*  DO J = 1 TO 2;                                          /*@G51DGJJ*/
         LA    @06,1                                               0917
         ST    @06,J                                               0917
@DL00917 DS    0H                                                  0918
*    M = 2;                  /* OFFSET INCREMENT             @G51DGJJ*/
         MVC   M(4),@CF00073                                       0918
*    NUMBER = 5;             /* SHIFT CONTROL                @G51DGJJ*/
         MVC   NUMBER(4),@CF00078                                  0919
*    DO K = 1 TO 2;                                        /*@G51DGJJ*/
         LA    @06,1                                               0920
         ST    @06,K                                               0920
@DL00920 DS    0H                                                  0921
*      LOG1 = LOG & 'FC'X;   /* FETCH 1ST LOG DATA BYTE      @G51DGJJ*/
         L     @06,LOGPTR                                          0921
         L     @04,CURRD                                           0921
         LR    @03,@06                                             0921
         ALR   @03,@04                                             0921
         MVC   LOG1(1),LOG(@03)                                    0921
         NI    LOG1,X'FC'                                          0921
*      CURRD = CURRD + M;                                  /*@G51DGJJ*/
         AL    @04,M                                               0922
         ST    @04,CURRD                                           0922
*      LOG2 = LOG;           /* FETCH 2ND LOG DATA BYTE      @G51DGJJ*/
         ALR   @06,@04                                             0923
         MVC   LOG2(1),LOG(@06)                                    0923
*      WK = LOG2;                                          /*@G51DGJJ*/
         MVC   WK(1),LOG2                                          0924
*      SRL(WK,NUMBER);                                     /*@G51DGJJ*/
         SLR   @06,@06                                             0925
         IC    @06,WK                                              0925
         L     @04,NUMBER                                          0925
         SRL   @06,0(@04)                                          0925
         STC   @06,WK                                              0925
*      PARBIT = WK & '01'X;  /* SAVE PARITY BIT              @G51DGJJ*/
         SLR   @06,@06                                             0926
         IC    @06,WK                                              0926
         LA    @04,1                                               0926
         NR    @04,@06                                             0926
         ST    @04,PARBIT                                          0926
*      SRL(WK,1);                                          /*@G51DGJJ*/
         SRL   @06,1                                               0927
         STC   @06,WK                                              0927
*      WK = WK & '03'X;                                    /*@G51DGJJ*/
         NI    WK,X'03'                                            0928
*      LOG1 = LOG1 × WK;                                   /*@G51DGJJ*/
         OC    LOG1(1),WK                                          0929
*      CALL CKPARITY;        /* CHECK PARITY                 @G51DGJJ*/
         BAL   @14,CKPARITY                                        0930
*      CALL FORMAT11;        /* FORMAT 2 HEX CHAR'S - 'NN '  @G51DGJJ*/
         BAL   @14,FORMAT11                                        0931
*      CURRD = CURRD - 1;    /* ADJUST OFFSET                @G51DGJJ*/
         L     @06,CURRD                                           0932
         BCTR  @06,0                                               0932
         ST    @06,CURRD                                           0932
*      M = 1;                /* ADJUST OFFSET INCREMENT      @G51DGJJ*/
         MVC   M(4),@CF00054                                       0933
*      NUMBER = 0;           /* ADJUST SHIFT CONTROL         @G51DGJJ*/
         SLR   @06,@06                                             0934
         ST    @06,NUMBER                                          0934
*    END;                                                  /*@G51DGJJ*/
         LA    @06,1                                               0935
         AL    @06,K                                               0935
         ST    @06,K                                               0935
         CH    @06,@CH00073                                        0935
         BNH   @DL00920                                            0935
*    CURRD = CURRD + 2;      /* ADJUST OFFSET                @G51DGJJ*/
         LA    @06,2                                               0936
         AL    @06,CURRD                                           0936
         ST    @06,CURRD                                           0936
*  END;                                                    /*@G51DGJJ*/
         LA    @06,1                                               0937
         AL    @06,J                                               0937
         ST    @06,J                                               0937
         CH    @06,@CH00073                                        0937
         BNH   @DL00917                                            0937
*  LINEPTR = LINEPTR - 1;    /* ADJUST PRINT BUFFER POINTER  @G51DGJJ*/
         L     @06,LINEPTR                                         0938
         BCTR  @06,0                                               0938
         ST    @06,LINEPTR                                         0938
*  CHARCNT = CHARCNT - 1;    /* AND SCAN CODE COUNTER        @G51DGJJ*/
         L     @06,CHARCNT                                         0939
         BCTR  @06,0                                               0939
         ST    @06,CHARCNT                                         0939
*END;                                                      /*@G51DGJJ*/
@EL00045 DS    0H                                                  0940
@EF00045 DS    0H                                                  0940
@ER00045 LM    @14,@12,@SA00045                                    0940
         BR    @14                                                 0940
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS HEX DATA FOR SPECIAL CASE 1-1.         @G51DGJJ*/
*/* IT CONVERTS HEX LOG DATA TO SCAN CODE AND FORMATS IT     @G51DGJJ*/
*/* INTO THE PRINT BUFFER(PRTBUFF), REPLACING THE            @G51DGJJ*/
*/* LOG DATA PLACE-HOLDERS.                                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FORMAT11:  PROC;                                          /*@G51DGJJ*/
FORMAT11 STM   @14,@12,12(@13)                                     0941
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  R9 = LOGDATA;                                           /*@G51DGJJ*/
         MVC   @ZT00002+2(2),LOGDATA                               0943
         L     R9,@ZT00002                                         0943
*  SLL(R9,16);               /* LEFT JUSTIFY LOG DATA        @G51DGJJ*/
         SLL   R9,16                                               0944
*  DO P = 1 TO 2;            /* LOOP THRU 2 HEX CHARACTERS   @G51DGJJ*/
         LA    @06,1                                               0945
         ST    @06,P                                               0945
@DL00945 DS    0H                                                  0946
*    R8 = ZERO;                                            /*@G51DGJJ*/
         SLR   R8,R8                                               0946
*    SLDL(R8,FOUR);          /* ISOLATE CHARACTER            @G51DGJJ*/
         SLDL  R8,4                                                0947
*    SCNCODE = R8;                                         /*@G51DGJJ*/
         STC   R8,SCNCODE                                          0948
*    TR(SCNCODE,TRSCANCD);   /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 0949
*    PRINTBUF = SCNCODE;     /* PLACE CODE IN PRINT BUFFER   @G51DGJJ*/
         L     @04,LINEPTR                                         0950
         MVC   PRINTBUF(1,@04),SCNCODE                             0950
*    LINEPTR = LINEPTR + 1;  /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @03,1                                               0951
         ALR   @04,@03                                             0951
         ST    @04,LINEPTR                                         0951
*    CHARCNT = CHARCNT + 1;  /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @03,CHARCNT                                         0952
         ST    @03,CHARCNT                                         0952
*  END;                                                    /*@G51DGJJ*/
         AL    @06,@CF00054                                        0953
         ST    @06,P                                               0953
         CH    @06,@CH00073                                        0953
         BNH   @DL00945                                            0953
*  LINEPTR = LINEPTR + 1;    /* LEAVE 1 SPACE                @G51DGJJ*/
         LA    @06,1                                               0954
         L     @04,LINEPTR                                         0954
         ALR   @04,@06                                             0954
         ST    @04,LINEPTR                                         0954
*  CHARCNT = CHARCNT + 1;                                  /*@G51DGJJ*/
         AL    @06,CHARCNT                                         0955
         ST    @06,CHARCNT                                         0955
* RESPECIFY (R8,R9) UNRESTRICTED;                          /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00046 DS    0H                                                  0957
@EF00046 DS    0H                                                  0957
@ER00046 LM    @14,@12,12(@13)                                     0957
         BR    @14                                                 0957
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 1-2.                      @G51DGJJ*/
*/* IT DISPLAYS THE LOGICAL CHANNEL NO. AS A HEX CHARACTER.  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE12:   PROC;                                         /*@G51DGJJ*/
SPCASE12 STM   @14,@12,@SA00047                                    0958
*  WK = PRINTB3 & '07'X;      /* SAVE PHYSICAL CHANNEL NO.   @G51DGJJ*/
         L     @06,LINEPTR                                         0959
         MVC   WK(1),PRINTB3(@06)                                  0959
         NI    WK,X'07'                                            0959
*  IF WK > '05'X THEN                                              0960
         CLI   WK,X'05'                                            0960
         BNH   @RF00960                                            0960
*    CALL UNDEFINE;           /* INVALID PCN                 @G51DGJJ*/
         BAL   @14,UNDEFINE                                        0961
*  ELSE                                                            0962
*    DO;                                                   /*@G51DGJJ*/
         B     @RC00960                                            0962
@RF00960 DS    0H                                                  0963
*      SW1 = OFF;                                          /*@G51DGJJ*/
         NI    SW1,B'11101111'                                     0963
*      CURRD = '00000110'X;                                /*@G51DGJJ*/
         LA    @06,272                                             0964
         ST    @06,CURRD                                           0964
*      LOG1 = LOG;            /* FETCH LOG DATA              @G51DGJJ*/
         AL    @06,LOGPTR                                          0965
         MVC   LOG1(1),LOG(@06)                                    0965
*      IF (LOG1 & '03'X) = ZERO THEN                               0966
         LA    @06,3                                               0966
         MVC   @ZT00003+3(1),LOG1                                  0966
         N     @06,@ZT00003                                        0966
         LTR   @06,@06                                             0966
         BNZ   @RF00966                                            0966
*        SCNCODE = '2F'X;    /* INVALID DIRECTOR IN LOG - PRINT '?'  */
         MVI   SCNCODE,X'2F'                                       0967
*      ELSE                                                        0968
*        DO;                                               /*@G51DGJJ*/
         B     @RC00966                                            0968
@RF00966 DS    0H                                                  0969
*          IF (LOG1 & '03'X) = '01'X THEN                          0969
         MVC   @TS00001(1),LOG1                                    0969
         NI    @TS00001,X'03'                                      0969
         CLI   @TS00001,X'01'                                      0969
         BNE   @RF00969                                            0969
*            DO;                       /* DIRECTOR 1         @G51DGJJ*/
*              SCNCODE = WK;           /* LCN = PCN          @G51DGJJ*/
         MVC   SCNCODE(1),WK                                       0971
*              SW1 = ON;                                   /*@G51DGJJ*/
         OI    SW1,B'00010000'                                     0972
*            END;                                          /*@G51DGJJ*/
*          ELSE                                                    0974
*            DO;                                           /*@G51DGJJ*/
         B     @RC00969                                            0974
@RF00969 DS    0H                                                  0975
*              IF (LOG1 & '03'X) = '02'X THEN                      0975
         MVC   @TS00001(1),LOG1                                    0975
         NI    @TS00001,X'03'                                      0975
         CLI   @TS00001,X'02'                                      0975
         BNE   @RF00975                                            0975
*                DO;                   /* DIRECTOR 2         @G51DGJJ*/
*                  SCNCODE = WK + 6;   /* LCN = PCN + 6      @G51DGJJ*/
         IC    @06,WK                                              0977
         LA    @06,6(,@06)                                         0977
         STC   @06,SCNCODE                                         0977
*                  SW1 = ON;                               /*@G51DGJJ*/
         OI    SW1,B'00010000'                                     0978
*                END;                                      /*@G51DGJJ*/
*              ELSE                                                0980
*                DO;                   /* DIRECTOR 3         @G51DGJJ*/
         B     @RC00975                                            0980
@RF00975 DS    0H                                                  0981
*                  CURRD = '88'X;                          /*@G51DGJJ*/
         LA    @06,136                                             0981
         ST    @06,CURRD                                           0981
*                  LOG1 = LOG;         /* FETCH LOG DATA     @G51DGJJ*/
         AL    @06,LOGPTR                                          0982
         MVC   LOG1(1),LOG(@06)                                    0982
*                  K = WK + 1;                             /*@G51DGJJ*/
         LA    @06,1                                               0983
         MVC   @ZT00003+3(1),WK                                    0983
         AL    @06,@ZT00003                                        0983
         ST    @06,K                                               0983
*                  IF (LOG1 & '40'X) = ZERO THEN                   0984
         LA    @04,64                                              0984
         MVC   @ZT00003+3(1),LOG1                                  0984
         N     @04,@ZT00003                                        0984
         LTR   @04,@04                                             0984
         BNZ   @RF00984                                            0984
*                    SCNCODE = LCN0(K);     /* LCN FOR BIT 1=0       */
         LA    @04,LCN0-1(@06)                                     0985
         MVC   SCNCODE(1),0(@04)                                   0985
*                  ELSE                                            0986
*                    SCNCODE = LCN1(K);     /* LCN FOR BIT 1=1       */
         B     @RC00984                                            0986
@RF00984 L     @06,K                                               0986
         LA    @04,LCN1-1(@06)                                     0986
         MVC   SCNCODE(1),0(@04)                                   0986
*                END;                                      /*@G51DGJJ*/
@RC00984 DS    0H                                                  0988
*            END;                                          /*@G51DGJJ*/
@RC00975 DS    0H                                                  0989
*        END;                                              /*@G51DGJJ*/
@RC00969 DS    0H                                                  0990
*        PRNTB123 = BLANK3;                                /*@G51DGJJ*/
@RC00966 L     @06,LINEPTR                                         0990
         MVC   PRNTB123(3,@06),BLANK3                              0990
*        LINEPTR = LINEPTR + 3;                            /*@G51DGJJ*/
         LA    @04,3                                               0991
         ALR   @06,@04                                             0991
         ST    @06,LINEPTR                                         0991
*        CHARCNT = CHARCNT + 3;                            /*@G51DGJJ*/
         AL    @04,CHARCNT                                         0992
         ST    @04,CHARCNT                                         0992
*        IF SW1 = ON THEN                                          0993
         TM    SW1,B'00010000'                                     0993
         BNO   @RF00993                                            0993
*          TR(SCNCODE,TRSCANCD);  /* LCN = SCAN CODE         @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 0994
*        PRINTBUF = SCNCODE;                               /*@G51DGJJ*/
@RF00993 L     @06,LINEPTR                                         0995
         MVC   PRINTBUF(1,@06),SCNCODE                             0995
*        LINEPTR = LINEPTR + 1;                            /*@G51DGJJ*/
         LA    @04,1                                               0996
         ALR   @06,@04                                             0996
         ST    @06,LINEPTR                                         0996
*        CHARCNT = CHARCNT + 1;                            /*@G51DGJJ*/
         AL    @04,CHARCNT                                         0997
         ST    @04,CHARCNT                                         0997
*    END;                                                  /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00047 DS    0H                                                  0999
@EF00047 DS    0H                                                  0999
@ER00047 LM    @14,@12,@SA00047                                    0999
         BR    @14                                                 0999
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 1-3.                      @G51DGJJ*/
*/* IT DISPLAYS THE PARITY BIT AS A BINARY CHARACTER.        @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE13:  PROC;                                          /*@G51DGJJ*/
SPCASE13 STM   @14,@12,@SA00048                                    1000
*  CALL LGOFFSET;            /* ASSEMBLE LOG OFFSET, ETC.    @G51DGJJ*/
         BAL   @14,LGOFFSET                                        1001
*  CURDL = CURRD;                                          /*@G51DGJJ*/
         MVC   CURDL(4),CURRD                                      1002
*  CALL FETCHPAR;            /* FETCH PARITY BIT             @G51DGJJ*/
         BAL   @14,FETCHPAR                                        1003
*  SCNCODE = PARBIT;                                       /*@G51DGJJ*/
         MVC   SCNCODE(1),PARBIT+3                                 1004
*  TR(SCNCODE,TRSCANCD);     /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 1005
*  PRINTBUF = SCNCODE;                                     /*@G51DGJJ*/
         L     @06,LINEPTR                                         1006
         MVC   PRINTBUF(1,@06),SCNCODE                             1006
*  LINEPTR = LINEPTR + 1;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,1                                               1007
         ALR   @06,@04                                             1007
         ST    @06,LINEPTR                                         1007
*  CHARCNT = CHARCNT + 1;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         1008
         ST    @04,CHARCNT                                         1008
*END;                                                      /*@G51DGJJ*/
@EL00048 DS    0H                                                  1009
@EF00048 DS    0H                                                  1009
@ER00048 LM    @14,@12,@SA00048                                    1009
         BR    @14                                                 1009
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 1-4.                      @G51DGJJ*/
*/* IT DISPLAYS 4 HEX CHARACTERS AND 3 BINARY CHARACTERS     @G51DGJJ*/
*/* FROM THE LOG DATA, AND THE PARITY BIT.                   @G51DGJJ*/
*SPCASE14:  PROC;                                          /*@G51DGJJ*/
SPCASE14 STM   @14,@12,@SA00049                                    1010
*  PARITY = OFF;                                           /*@G51DGJJ*/
         NI    PARITY,B'11110111'                                  1011
*  IF (PRINTB2 & '80'X) ^= ZERO THEN                               1012
         LA    @06,128                                             1012
         L     @04,LINEPTR                                         1012
         MVC   @ZT00003+3(1),PRINTB2(@04)                          1012
         N     @06,@ZT00003                                        1012
         LTR   @06,@06                                             1012
         BZ    @RF01012                                            1012
*    PARITY = ON;            /* CHECK PARITY                 @G51DGJJ*/
         OI    PARITY,B'00001000'                                  1013
*  CALL LGOFFSET;            /* ASSEMBLE LOG OFFSET, ETC.    @G51DGJJ*/
@RF01012 BAL   @14,LGOFFSET                                        1014
*  LOG1 = LOG;               /* FETCH 1ST LOG DATA BYTE      @G51DGJJ*/
         L     @06,LOGPTR                                          1015
         L     @04,CURRD                                           1015
         LR    @03,@06                                             1015
         ALR   @03,@04                                             1015
         MVC   LOG1(1),LOG(@03)                                    1015
*  CURRD = CURRD + 1;                                      /*@G51DGJJ*/
         AL    @04,@CF00054                                        1016
         ST    @04,CURRD                                           1016
*  LOG2 = LOG;               /* FETCH 2ND LOG DATA BYTE      @G51DGJJ*/
         ALR   @06,@04                                             1017
         MVC   LOG2(1),LOG(@06)                                    1017
*  IF PARITY = ON THEN                                             1018
         TM    PARITY,B'00001000'                                  1018
         BNO   @RF01018                                            1018
*    DO;                                                   /*@G51DGJJ*/
*      CURDL = CURRD - 1;                                  /*@G51DGJJ*/
         BCTR  @04,0                                               1020
         ST    @04,CURDL                                           1020
*      CALL FETCHPAR;       /* PARITY NOT WITH DATA - FETCH  @G51DGJJ*/
         BAL   @14,FETCHPAR                                        1021
*      CURRZ = 3;           /* OFFSET TO STARTING BIT        @G51DGJJ*/
         MVC   CURRZ(4),@CF00075                                   1022
*      CURRB = 12;          /* LENGTH OF BIT STRING          @G51DGJJ*/
         MVC   CURRB(4),@CF00035                                   1023
*      CALL CKPARITY;       /* CHECK PARITY                  @G51DGJJ*/
         BAL   @14,CKPARITY                                        1024
*    END;                                                  /*@G51DGJJ*/
*  CALL FORMAT10;            /* FORMAT 4 HEX CHAR'S - 'HHHH' @G51DGJJ*/
@RF01018 BAL   @14,FORMAT10                                        1026
*  CALL FORMAT14;            /* FORMAT 4 BIN CHAR'S - 'RBIP' @G51DGJJ*/
         BAL   @14,FORMAT14                                        1027
*END;                                                      /*@G51DGJJ*/
@EL00049 DS    0H                                                  1028
@EF00049 DS    0H                                                  1028
@ER00049 LM    @14,@12,@SA00049                                    1028
         BR    @14                                                 1028
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC FORMATS HEX AND BINARY DATA FOR SPECIAL        @G51DGJJ*/
*/* CASE 1-4.                                                @G51DGJJ*/
*/* IT CONVERTS HEX LOG DATA TO SCAN CODE AND FORMATS IT     @G51DGJJ*/
*/* INTO THE PRINT BUFFER(PRTBUFF), REPLACING THE            @G51DGJJ*/
*/* LOG DATA PLACE-HOLDERS.                                  @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*FORMAT14:  PROC;                                          /*@G51DGJJ*/
FORMAT14 STM   @14,@12,@SA00050                                    1029
* RESPECIFY (R8,R9) RESTRICTED;                            /*@G51DGJJ*/
*  LINEPTR = LINEPTR + 3;    /* LEAVE 3 SPACES IN PRINT      @G51DGJJ*/
         LA    @06,3                                               1031
         L     @04,LINEPTR                                         1031
         ALR   @04,@06                                             1031
         ST    @04,LINEPTR                                         1031
*  CHARCNT = CHARCNT + 3;    /* BUFFER                       @G51DGJJ*/
         AL    @06,CHARCNT                                         1032
         ST    @06,CHARCNT                                         1032
*  R8 = ZERO;                                              /*@G51DGJJ*/
         SLR   R8,R8                                               1033
*  R9 = LOGDATA;                                           /*@G51DGJJ*/
         MVC   @ZT00002+2(2),LOGDATA                               1034
         L     R9,@ZT00002                                         1034
*  SLDL (R8,17);                                           /*@G51DGJJ*/
         SLDL  R8,17                                               1035
*  WK = R8;                  /* SAVE 'I' BIT                 @G51DGJJ*/
         STC   R8,WK                                               1036
*  DO J = 1 TO 2;                                          /*@G51DGJJ*/
         LA    @06,1                                               1037
         ST    @06,J                                               1037
@DL01037 DS    0H                                                  1038
*    R8 = ZERO;                                            /*@G51DGJJ*/
         SLR   R8,R8                                               1038
*    SLDL(R8,1);             /* ISOLATE BITS - R, THEN B     @G51DGJJ*/
         SLDL  R8,1                                                1039
*    SCNCODE = R8;                                         /*@G51DGJJ*/
         STC   R8,SCNCODE                                          1040
*    TR(SCNCODE,TRSCANCD);   /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 1041
*    PRINTBUF = SCNCODE;     /* PLACE CODE IN PRINT BUFFER   @G51DGJJ*/
         L     @04,LINEPTR                                         1042
         MVC   PRINTBUF(1,@04),SCNCODE                             1042
*    LINEPTR = LINEPTR + 1;  /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @03,1                                               1043
         ALR   @04,@03                                             1043
         ST    @04,LINEPTR                                         1043
*    CHARCNT = CHARCNT + 1;  /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @03,CHARCNT                                         1044
         ST    @03,CHARCNT                                         1044
*  END;                                                    /*@G51DGJJ*/
         AL    @06,@CF00054                                        1045
         ST    @06,J                                               1045
         CH    @06,@CH00073                                        1045
         BNH   @DL01037                                            1045
*  LINEPTR = LINEPTR + 3;    /* LEAVE 3 SPACES IN PRINT      @G51DGJJ*/
         LA    @06,3                                               1046
         L     @04,LINEPTR                                         1046
         ALR   @04,@06                                             1046
         ST    @04,LINEPTR                                         1046
*  CHARCNT = CHARCNT + 3;    /* BUFFER                       @G51DGJJ*/
         AL    @06,CHARCNT                                         1047
         ST    @06,CHARCNT                                         1047
*  SCNCODE = WK;             /* 'I' BIT                      @G51DGJJ*/
         MVC   SCNCODE(1),WK                                       1048
*  TR(SCNCODE,TRSCANCD);     /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 1049
*  PRINTBUF = SCNCODE;                                     /*@G51DGJJ*/
         MVC   PRINTBUF(1,@04),SCNCODE                             1050
*  LINEPTR = LINEPTR + 1;                                  /*@G51DGJJ*/
         LA    @03,1                                               1051
         ALR   @04,@03                                             1051
         ST    @04,LINEPTR                                         1051
*  CHARCNT = CHARCNT + 1;                                  /*@G51DGJJ*/
         ALR   @06,@03                                             1052
         ST    @06,CHARCNT                                         1052
*      CURDL = CURRD;                                      /*@G51DGJJ*/
         MVC   CURDL(4),CURRD                                      1053
*      CALL FETCHPAR;                                      /*@G51DGJJ*/
         BAL   @14,FETCHPAR                                        1054
*      SCNCODE = PARBIT;     /* PARITY BIT                   @G51DGJJ*/
         MVC   SCNCODE(1),PARBIT+3                                 1055
*      TR(SCNCODE,TRSCANCD); /* TRANSLATE TO SCAN CODE       @G51DGJJ*/
         TR    SCNCODE(1),TRSCANCD                                 1056
*      PRINTBUF = SCNCODE;                                 /*@G51DGJJ*/
         L     @06,LINEPTR                                         1057
         MVC   PRINTBUF(1,@06),SCNCODE                             1057
*      LINEPTR = LINEPTR + 1;                              /*@G51DGJJ*/
         LA    @04,1                                               1058
         ALR   @06,@04                                             1058
         ST    @06,LINEPTR                                         1058
*      CHARCNT = CHARCNT + 1;                              /*@G51DGJJ*/
         AL    @04,CHARCNT                                         1059
         ST    @04,CHARCNT                                         1059
*  RESPECIFY (R8,R9) UNRESTRICTED;                         /*@G51DGJJ*/
*END;                                                      /*@G51DGJJ*/
@EL00050 DS    0H                                                  1061
@EF00050 DS    0H                                                  1061
@ER00050 LM    @14,@12,@SA00050                                    1061
         BR    @14                                                 1061
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 2-0.                      @G51DGJJ*/
*/* IT DISPLAYS SELECTED BYTES FROM A STRING OF 24 BYTES     @G51DGJJ*/
*/* TO FORM A PARITY-CHECKED 8 BYTE CHARACTER REGISTER.      @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE20:  PROC;                                          /*@G51DGJJ*/
SPCASE20 STM   @14,@12,@SA00051                                    1062
*  CALL LGOFFSET;            /* ASSEMBLE LOG OFFSET, ETC.    @G51DGJJ*/
         BAL   @14,LGOFFSET                                        1063
*  SW1 = ON;                                               /*@G51DGJJ*/
         OI    SW1,B'00010000'                                     1064
*  NUMBER = ZERO;                                          /*@G51DGJJ*/
         SLR   @06,@06                                             1065
         ST    @06,NUMBER                                          1065
*  DO J = 1 TO 3;                                          /*@G51DGJJ*/
         LA    @06,1                                               1066
         ST    @06,J                                               1066
@DL01066 DS    0H                                                  1067
*    DO K = 1 TO 3 WHILE (SW1 = ON);                       /*@G51DGJJ*/
         LA    @06,1                                               1067
         ST    @06,K                                               1067
@DL01067 TM    SW1,B'00010000'                                     1067
         BNO   @DC01067                                            1067
*      LOG1 = LOG;           /* GET 1 BYTE OF LOG DATA       @G51DGJJ*/
         L     @06,CURRD                                           1068
         L     @04,LOGPTR                                          1068
         ALR   @04,@06                                             1068
         MVC   LOG1(1),LOG(@04)                                    1068
*      CURDL = CURRD;                                      /*@G51DGJJ*/
         ST    @06,CURDL                                           1069
*      CALL FETCHPAR;        /* FETCH PARITY BIT             @G51DGJJ*/
         BAL   @14,FETCHPAR                                        1070
*      CURRZ = ZERO;         /* OFFSET TO STARTING BIT       @G51DGJJ*/
         SLR   @06,@06                                             1071
         ST    @06,CURRZ                                           1071
*      CURRB = EIGHT;        /* LENGTH OF BIT STRING         @G51DGJJ*/
         MVC   CURRB(4),@CF00065                                   1072
*      CALL CKPARITY;        /* CHECK PARITY                 @G51DGJJ*/
         BAL   @14,CKPARITY                                        1073
*      CALL FORMAT11;        /* FORMAT HEX DATA              @G51DGJJ*/
         BAL   @14,FORMAT11                                        1074
*      NUMBER = NUMBER + 1;                                /*@G51DGJJ*/
         LA    @06,1                                               1075
         AL    @06,NUMBER                                          1075
         ST    @06,NUMBER                                          1075
*      IF NUMBER = EIGHT THEN                                      1076
         CH    @06,@CH00065                                        1076
         BNE   @RF01076                                            1076
*        SW1 = OFF;                                        /*@G51DGJJ*/
         NI    SW1,B'11101111'                                     1077
*      CURRD = CURRD + 1;                                  /*@G51DGJJ*/
@RF01076 LA    @06,1                                               1078
         AL    @06,CURRD                                           1078
         ST    @06,CURRD                                           1078
*    END;                                                  /*@G51DGJJ*/
         LA    @06,1                                               1079
         AL    @06,K                                               1079
         ST    @06,K                                               1079
         CH    @06,@CH00075                                        1079
         BNH   @DL01067                                            1079
@DC01067 DS    0H                                                  1080
*    CURRD = CURRD + 5;                                    /*@G51DGJJ*/
         LA    @06,5                                               1080
         AL    @06,CURRD                                           1080
         ST    @06,CURRD                                           1080
*  END;                                                    /*@G51DGJJ*/
         LA    @06,1                                               1081
         AL    @06,J                                               1081
         ST    @06,J                                               1081
         CH    @06,@CH00075                                        1081
         BNH   @DL01066                                            1081
*  LINEPTR = LINEPTR - 1;    /* ADJUST PRINT BUFFER POINTER  @G51DGJJ*/
         L     @06,LINEPTR                                         1082
         BCTR  @06,0                                               1082
         ST    @06,LINEPTR                                         1082
*  CHARCNT = CHARCNT - 1;    /* AND SCAN CODE COUNTER        @G51DGJJ*/
         L     @06,CHARCNT                                         1083
         BCTR  @06,0                                               1083
         ST    @06,CHARCNT                                         1083
*END;                                                      /*@G51DGJJ*/
@EL00051 DS    0H                                                  1084
@EF00051 DS    0H                                                  1084
@ER00051 LM    @14,@12,@SA00051                                    1084
         BR    @14                                                 1084
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC HANDLES SPECIAL CASE 3-0.                      @G51DGJJ*/
*/* IT DISPLAYS A VARIABLE STRING OF BYTES AS HEX CHAR.'S    @G51DGJJ*/
*/* IN THE FOLLOWING FORMAT-  NN NN ... NN                   @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*SPCASE30:  PROC;                                          /*@G51DGJJ*/
SPCASE30 STM   @14,@12,@SA00052                                    1085
*  PARITY = OFF;                                           /*@G51DGJJ*/
         NI    PARITY,B'11110111'                                  1086
*  IF (PRINTB2 & '80'X) ^= ZERO THEN                               1087
         LA    @06,128                                             1087
         L     @04,LINEPTR                                         1087
         MVC   @ZT00003+3(1),PRINTB2(@04)                          1087
         N     @06,@ZT00003                                        1087
         LTR   @06,@06                                             1087
         BZ    @RF01087                                            1087
*    PARITY = ON;            /* CHECK PARITY                 @G51DGJJ*/
         OI    PARITY,B'00001000'                                  1088
*  L = PRINTBUF & '07'X;     /* EXTRACT BBB - NO. OF BYTES   @G51DGJJ*/
@RF01087 LA    @06,7                                               1089
         L     @04,LINEPTR                                         1089
         MVC   @ZT00003+3(1),PRINTBUF(@04)                         1089
         N     @06,@ZT00003                                        1089
         ST    @06,L                                               1089
*  IF L = ZERO THEN          /* IN DATA STRING               @G51DGJJ*/
         LTR   @06,@06                                             1090
         BNZ   @RF01090                                            1090
*    L = EIGHT;                                            /*@G51DGJJ*/
         MVC   L(4),@CF00065                                       1091
*  CURRZ = PRINTB3;          /* EXTRACT ZZZ - OFFSET TO 1ST  @G51DGJJ*/
@RF01090 L     @06,LINEPTR                                         1092
         SLR   @04,@04                                             1092
         IC    @04,PRINTB3(,@06)                                   1092
         ST    @04,CURRZ                                           1092
*  SRL(CURRZ,5);             /* BIT IN STRING                @G51DGJJ*/
         SRL   @04,5                                               1093
         ST    @04,CURRZ                                           1093
*  CURRB = EIGHT - CURRZ;    /* NO. OF BITS IN 1ST BYTE      @G51DGJJ*/
         LA    @06,8                                               1094
         SL    @06,CURRZ                                           1094
         ST    @06,CURRB                                           1094
*  CALL LGOFFSET;            /* ASSEMBLE LOG OFFSET, ETC.    @G51DGJJ*/
         BAL   @14,LGOFFSET                                        1095
*  DO J = 1 TO L;            /* LOOP THRU 'BBB' BYTES        @G51DGJJ*/
         LA    @06,1                                               1096
         B     @DE01096                                            1096
@DL01096 DS    0H                                                  1097
*    LOG1 = LOG;             /* FETCH 1 BYTE OF LOG DATA     @G51DGJJ*/
         L     @06,CURRD                                           1097
         L     @04,LOGPTR                                          1097
         ALR   @04,@06                                             1097
         MVC   LOG1(1),LOG(@04)                                    1097
*    SLL(LOG1,CURRZ);        /* SET 'ZZZ' BITS = 0 IN        @G51DGJJ*/
         SLR   @04,@04                                             1098
         IC    @04,LOG1                                            1098
         L     @03,CURRZ                                           1098
         SLL   @04,0(@03)                                          1098
         STC   @04,LOG1                                            1098
*    SRL(LOG1,CURRZ);        /* FIRST BYTE ONLY              @G51DGJJ*/
         SLR   @04,@04                                             1099
         IC    @04,LOG1                                            1099
         SRL   @04,0(@03)                                          1099
         STC   @04,LOG1                                            1099
*    IF PARITY = ON THEN                                           1100
         TM    PARITY,B'00001000'                                  1100
         BNO   @RF01100                                            1100
*      DO;                                                 /*@G51DGJJ*/
*        CURDL = CURRD;                                    /*@G51DGJJ*/
         ST    @06,CURDL                                           1102
*        CALL FETCHPAR;      /* FETCH PARITY BIT             @G51DGJJ*/
         BAL   @14,FETCHPAR                                        1103
*        CALL CKPARITY;      /* CHECK PARITY                 @G51DGJJ*/
         BAL   @14,CKPARITY                                        1104
*      END;                                                /*@G51DGJJ*/
*      CALL FORMAT11;        /* FORMAT 2 HEX CHAR.'S         @G51DGJJ*/
@RF01100 BAL   @14,FORMAT11                                        1106
*      CURRD = CURRD + 1;                                  /*@G51DGJJ*/
         LA    @06,1                                               1107
         AL    @06,CURRD                                           1107
         ST    @06,CURRD                                           1107
*      CURRZ = ZERO;         /* RE-INITIALIZE - FOR NEXT CALLS       */
         SLR   @06,@06                                             1108
         ST    @06,CURRZ                                           1108
*      CURRB = EIGHT;        /* TO 'CKPARITY', 'FORMAT11'    @G51DGJJ*/
         MVC   CURRB(4),@CF00065                                   1109
*  END;                                                    /*@G51DGJJ*/
         LA    @06,1                                               1110
         AL    @06,J                                               1110
@DE01096 ST    @06,J                                               1110
         C     @06,L                                               1110
         BNH   @DL01096                                            1110
*  LINEPTR = LINEPTR - 1;    /* ADJUST PRINT BUFFER POINTER  @G51DGJJ*/
         L     @06,LINEPTR                                         1111
         BCTR  @06,0                                               1111
         ST    @06,LINEPTR                                         1111
*  CHARCNT = CHARCNT - 1;    /* AND SCAN CODE COUNTER        @G51DGJJ*/
         L     @06,CHARCNT                                         1112
         BCTR  @06,0                                               1112
         ST    @06,CHARCNT                                         1112
*END;                                                      /*@G51DGJJ*/
@EL00052 DS    0H                                                  1113
@EF00052 DS    0H                                                  1113
@ER00052 LM    @14,@12,@SA00052                                    1113
         BR    @14                                                 1113
*/********************************************************************/
*/*                                                          @G51DGJJ*/
*/* THIS PROC ASSEMBLES THE OFFSET TO THE STARTING           @G51DGJJ*/
*/* BYTE OF LOG DATA, REPLACES THE SCAN COMMAND WITH         @G51DGJJ*/
*/* 3 BLANK CHARACTERS, AND ADJUSTS THE PRINT BUFFER         @G51DGJJ*/
*/* POINTER AND SCAN CODE COUNTER.                           @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*LGOFFSET:  PROC;                                          /*@G51DGJJ*/
LGOFFSET STM   @14,@12,12(@13)                                     1114
*  CURRD = PRINTB2 & '3F'X;  /* OFFSET TO STARTING BYTE      @G51DGJJ*/
         L     @06,LINEPTR                                         1115
         LA    @04,63                                              1115
         MVC   @ZT00003+3(1),PRINTB2(@06)                          1115
         N     @04,@ZT00003                                        1115
         ST    @04,CURRD                                           1115
*  SLL(CURRD,5);             /* OF LOG DATA -- DDDDDD        @G51DGJJ*/
         SLL   @04,5                                               1116
         ST    @04,CURRD                                           1116
*  CURRD = CURRD × PRINTB3 & '1F'X;    /*   -- DDDDDDDDDDD   @G51DGJJ*/
         LA    @04,31                                              1117
         MVC   @ZT00003+3(1),PRINTB3(@06)                          1117
         N     @04,@ZT00003                                        1117
         O     @04,CURRD                                           1117
         ST    @04,CURRD                                           1117
*  PRNTB123 = BLANK3;        /* SET COMMAND TO BLANKS        @G51DGJJ*/
         MVC   PRNTB123(3,@06),BLANK3                              1118
*  LINEPTR = LINEPTR + 3;    /* BUMP PRINT BUFFER POINTER,   @G51DGJJ*/
         LA    @04,3                                               1119
         ALR   @06,@04                                             1119
         ST    @06,LINEPTR                                         1119
*  CHARCNT = CHARCNT + 3;    /* SCAN CODE COUNTER            @G51DGJJ*/
         AL    @04,CHARCNT                                         1120
         ST    @04,CHARCNT                                         1120
*END;                                                      /*@G51DGJJ*/
@EL00053 DS    0H                                                  1121
@EF00053 DS    0H                                                  1121
@ER00053 LM    @14,@12,12(@13)                                     1121
         BR    @14                                                 1121
*/*                                                          @G51DGJJ*/
*/*   END OF 'INTRPRET'                                      @G51DGJJ*/
*/*                                                          @G51DGJJ*/
*/********************************************************************/
*END  /* CLOSING END TO IFCFRAME                             @G51DGJJ*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 1122
@DATA    DS    0H
@CH00082 DC    H'7'
@CH01216 DC    H'13'
@CH01142 DC    H'27'
@CH01342 DC    XL2'3FFF'
@CH01324 DC    XL2'23F'
         DS    0F
@AL00209 DC    A(@CF01153)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00214 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00440 DC    A(MOD79)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00216 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00442 DC    A(SER79)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00274 DC    A(@CF01171)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL00279 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00300 DC    A(MOD20)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00281 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00302 DC    A(SER20)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00283 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00304 DC    A(PSN)                  LIST WITH   2 ARGUMENT(S)
         DC    A(BINOUT)
@AL00295 DC    A(@CF01171)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+8)
@AL00368 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00374 DC    A(PRNTAREA)             LIST WITH   2 ARGUMENT(S)
         DC    A(NUMBER)
@AL00385 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00422 DC    A(CNVRTBUF)             LIST WITH   2 ARGUMENT(S)
         DC    A(NUMBER)
@AL00418 DC    A(HEXA)                 LIST WITH   3 ARGUMENT(S)
@AL00323 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00327 DC    A(@CF00073+2)           LIST WITH   1 ARGUMENT(S)
         DC    A(NUMBER)
@AL00435 DC    A(@CF01153)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+12)
@AL00469 DC    A(@CF00550)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+16)
@AL00474 DC    A(MOD80)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00476 DC    A(SER80)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00478 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00859 DC    A(K)                    LIST WITH   2 ARGUMENT(S)
         DC    A(BINOUT)
@AL00855 DC    A(@CF01363)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+20)
@AL00865 DC    A(MODFR)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00867 DC    A(SERFR)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00873 DC    A(GROUPL24)             LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00874 DC    A(IDL24)                LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
@AL00875 DC    A(ECLEVL24)             LIST WITH   2 ARGUMENT(S)
         DC    A(PARM3)
         DS    0F
@SA00001 DS    18F
@SA00008 DS    15F
@SA00002 DS    15F
@SA00013 DS    15F
@SA00003 DS    15F
@SA00012 DS    15F
@PC00011 DS    3F
@SA00015 DS    15F
@SA00016 DS    15F
@SA00005 DS    15F
@SA00004 DS    15F
@SA00006 DS    15F
@SA00007 DS    15F
@SA00017 DS    15F
@PC00010 DS    2F
@SA00009 DS    15F
@SA00014 DS    15F
@SA00018 DS    15F
@SA00019 DS    15F
@SA00039 DS    15F
@SA00020 DS    15F
@SA00024 DS    15F
@SA00033 DS    15F
@SA00043 DS    15F
@SA00045 DS    15F
@SA00047 DS    15F
@SA00048 DS    15F
@SA00049 DS    15F
@SA00051 DS    15F
@SA00052 DS    15F
@SA00025 DS    15F
@SA00028 DS    15F
@SA00032 DS    15F
@SA00031 DS    15F
@SA00034 DS    15F
@SA00038 DS    15F
@SA00040 DS    15F
@SA00041 DS    15F
@SA00042 DS    15F
@SA00050 DS    15F
@AL00001 DS    3A
@TF00001 DS    F
@AFTEMPS DS    6F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZT00002 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
         DS    0F
@CF00054 DC    F'1'
@CH00054 EQU   @CF00054+2
@CF00073 DC    F'2'
@CH00073 EQU   @CF00073+2
@CF00075 DC    F'3'
@CH00075 EQU   @CF00075+2
@CF00063 DC    F'4'
@CH00063 EQU   @CF00063+2
@CF00078 DC    F'5'
@CF00065 DC    F'8'
@CH00065 EQU   @CF00065+2
@CF00035 DC    F'12'
@CH00035 EQU   @CF00035+2
@CF01171 DC    F'20'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF01363 DC    F'77'
@CF01153 DC    F'79'
@CF00550 DC    F'80'
@CH00550 EQU   @CF00550+2
@CF01378 DC    XL4'1FFF'
@CF01319 DC    XL4'400'
@CV01143 DC    V(IFCFRAMM)
@CV01144 DC    V(IFCFRAMC)
         DS    0D
GROUP    DC    A(0)
LINEPTR  DC    A(0)
SAVELOGT DS    FL4
         ORG   SAVELOGT
@NM00116 DS    BL1
SVLOGT1  DS    BL1
SVLOGT23 DS    BL2
         ORG   SVLOGT23
SVLOGTF  DS    BL1
SVLOGTK  EQU   SVLOGT23+0
@NM00117 EQU   SVLOGT23+0
         ORG   SAVELOGT+4
PREVSEQN DC    F'0'
PARM3    DC    F'0'
K        DC    F'0'
J        DC    F'0'
Q        DC    F'0'
R        DC    F'0'
PSN      DC    F'0'
LINECT1  DC    F'0'
MYLINECT DC    F'0'
LNESPACE DC    F'1'
FRMREG   DC    F'0'
NUMBER   DC    F'0'
LGREG    DC    F'0'
L        DC    F'0'
M        DC    F'0'
RCL      DC    F'0'
FRMPOINT DC    A(0)
CHARCNT  DC    F'0'
LINECTR  DC    F'0'
LOGPTR   DC    A(0)
CURRD    DC    F'0'
PREVZ    DC    F'0'
PREVB    DC    F'0'
PREVD    DC    F'0'
CURRB    DC    F'0'
CURRZ    DC    F'0'
CURDL    DC    F'0'
CURRG    DC    F'0'
CURRC    DC    F'0'
CURRM    DC    F'0'
PARBIT   DC    F'0'
P        DC    F'0'
X        DC    F'0'
RETCODE  DC    H'0'
LINEADDR DC    H'0'
PBYTEPTR DC    H'0'
PBITPTR  DC    H'0'
@TS00001 DS    CL1
@CB01313 DC    X'1C1C1C'
PRINTLNE DS    CL134
         ORG   PRINTLNE
DDTYPE   DC    CL1'0'
SPACING  DC    X'89'
PRTLINE1 DC    CL132' '
         ORG   PRTLINE1
MESSAGE  DS    CL58
         ORG   PRINTLNE+134
PRINTLNT DS    CL134
         ORG   PRINTLNT
DDTYPET  DC    CL1'1'
SPACINGT DC    X'09'
PRTLINET DC    CL132' '
         ORG   PRTLINET
MESSAGET DS    CL58
         ORG   PRINTLNT+134
SERMSG   DS    CL50
         ORG   SERMSG
@NM00093 DC    CL24'FRAME, ERROR RECORD CPU '
@NM00094 DC    CL26'SERIAL NOS. DISAGREE.     '
         ORG   SERMSG+50
SWITCHS  DC    X'A0'
         ORG   SWITCHS
DB4      DS    BL1
HXDMPLOG EQU   SWITCHS+0
FIRSTFRM EQU   SWITCHS+0
LASTFRM  EQU   SWITCHS+0
SERSW    EQU   SWITCHS+0
HXDMPFRM EQU   SWITCHS+0
         ORG   SWITCHS+1
LABELS   DS    CL12
         ORG   LABELS
MCHL     DC    CL3'MCH'
CCHL     DC    CL3'CCH'
MCFL     DC    CL3'MCF'
CCFL     DC    CL3'CCF'
         ORG   LABELS+12
MCHSMO   DS    CL5
         ORG   MCHSMO
MCHS     DS    CL3
MCHMO    DS    CL2
         ORG   MCHSMO+5
LOGDATA  DS    BL2
         ORG   LOGDATA
LOG1     DS    BL1
LOG2     DS    BL1
         ORG   LOGDATA+2
SWCHS    DC    X'00'
         ORG   SWCHS
ENDSCN   DS    BL1
SCANERR  EQU   SWCHS+0
ENDLINE  EQU   SWCHS+0
SW1      EQU   SWCHS+0
PARITY   EQU   SWCHS+0
PARERR   EQU   SWCHS+0
SW       EQU   SWCHS+0
         ORG   SWCHS+1
TRTABLE  DS    CL256
         ORG   TRTABLE
@NM00103 DC    CL8' ABCDEFG'
@NM00104 DC    CL2'HI'
@NM00105 DC    X'4A'
@NM00106 DC    CL5'.<(+×'
@NM00107 DC    CL8'&&JKLMNOP'
@NM00108 DC    CL8'QR!$*);^'
@NM00109 DC    CL8'-/STUVWX'
@NM00110 DC    CL2'YZ'
@NM00111 DC    X'6A'
@NM00112 DC    CL5',%_>?'
@NM00113 DC    CL8'01234567'
@NM00114 DC    CL8'89:#@''="'
@NM00115 DC    CL192' '
         ORG   TRTABLE+256
WORKL    DS    BL2
         ORG   WORKL
WK       DS    BL1
@NM00118 DS    BL1
         ORG   WORKL+2
TRSCANCD DS    CL256
         ORG   TRSCANCD
@NM00119 DC    X'30'
@NM00120 DC    X'31'
@NM00121 DC    X'32'
@NM00122 DC    X'33'
@NM00123 DC    X'34'
@NM00124 DC    X'35'
@NM00125 DC    X'36'
@NM00126 DC    X'37'
@NM00127 DC    X'38'
@NM00128 DC    X'39'
@NM00129 DC    X'01'
@NM00130 DC    X'02'
@NM00131 DC    X'03'
@NM00132 DC    X'04'
@NM00133 DC    X'05'
@NM00134 DC    X'06'
@NM00135 DC    CL240' '
         ORG   TRSCANCD+256
FRMIDENT DC    CL31' '
         ORG   FRMIDENT
@NM00138 DC    CL6'FRAME '
FRMNO    DS    CL2
@NM00139 DS    CL1
MCFCCFFR DS    CL2
@NM00140 DC    CL5' MOD '
MODFR    DS    CL4
@NM00141 DC    CL5' SER '
SERFR    DS    CL6
         ORG   FRMIDENT+31
LINE24   DC    CL30' '
         ORG   LINE24
@NM00142 DC    CL6'GROUP '
GROUPL24 DS    CL2
@NM00143 DC    CL6'   ID '
IDL24    DS    CL2
@NM00144 DC    CL12'   EC LEVEL '
ECLEVL24 DS    CL2
         ORG   LINE24+30
BINOUT   DC    CL5' '
FRMHD    DC    CL18'HEX DUMP OF FRAME '
LOGHD1   DC    CL18'HEX DUMP OF RECORD'
LOGHD2   DC    CL10'HEADER    '
CNVRTBUF DC    CL64' '
BLANKS   DC    CL64' '
PRTBUFF  DC    CL80' '
BLANK3   DC    CL3' '
SCNCODE  DC    AL1(0)
SAVEL    DC    AL1(0)
LOG3     DC    AL1(0)
         DS    CL1
DBLWORD  DS    CL8
WORK     DS    CL8
SWITCH   DC    X'00'
         ORG   SWITCH
SWITCH1  DS    BL1
         ORG   SWITCH+1
CHARS    DC    CL16'0123456789ABCDEF'
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL1
SKPCODE  DC    H'1'
         DC    H'2'
         DC    H'4'
         DC    H'8'
         DC    H'16'
         DC    H'32'
         DC    H'64'
LCN0     DC    X'27'
         DC    X'03'
         DC    X'04'
         DC    X'05'
         DC    X'06'
         DC    X'27'
LCN1     DC    X'03'
         DC    X'04'
         DC    X'05'
         DC    X'06'
         DC    X'27'
         DC    X'27'
IFCFRAME CSECT
        DC    S(SUPERZAP)
IFCFRAME CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LC       EQU   @03
JC       EQU   @04
R2       EQU   @02
R5       EQU   @05
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R15      EQU   @15
R0       EQU   @00
R1       EQU   @01
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R3       EQU   @03
R4       EQU   @04
R6       EQU   @06
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
SWITCHES EQU   PARM+2
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUGA   EQU   PARM+8
DEBUG44  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
MISC     EQU   PARM+12
PRINTES  EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
@NM00007 EQU   PARM+75
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
RECLNGTH EQU   CCHHRLNG+6
LINECT   EQU   PARM+120
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
RECLNGT1 EQU   PARM+204
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
TRECCH0  EQU   TREGEN+8
TREND2   EQU   0
TRENDKEY EQU   TREND2
TRENDRT  EQU   TRENDKEY+1
TRENCPUS EQU   TRENDKEY+3
TRENDITM EQU   TRENDKEY+4
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUM2   EQU   0
SYSUMKEY EQU   SYSUM2
SYSRT    EQU   SYSUMKEY+1
SYSCPUS  EQU   SYSUMKEY+3
SYSITEM  EQU   SYSUMKEY+4
SHARE    EQU   0
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUAVAL   EQU   CUA+2
DEVICE   EQU   0
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
MERIDIAN EQU   0
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTERRID EQU   LRTREC+3
@NM00016 EQU   LRTREC+4
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTDT+4
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHCPUID EQU   MCHHEAD+16
MCHSER   EQU   MCHCPUID+1
MCHMOD   EQU   MCHCPUID+4
MCHCEL   EQU   MCHCPUID+6
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRSEEK  EQU   OBRREC+70
OBRTERMN EQU   OBRSEEK+2
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00051 EQU   DDRREC+24
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
MIHCPUID EQU   MIHHEAD+16
@NM00057 EQU   MIHREC+24
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
@NM00065 EQU   TPRREC+26
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFKEY1  EQU   MCFKEY
MCFSMS   EQU   MCFHEAD+2
MCFLST   EQU   MCFSMS
MCFCNT   EQU   MCFHEAD+6
@NM00073 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
MCFSER   EQU   MCFSMO
MCFMOD   EQU   MCFSMO+3
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00081 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
PRTGROUP EQU   0
PTGROUP  EQU   PRTGROUP
PRTDMPAD EQU   0
PTADDR   EQU   PRTDMPAD
PRNTB123 EQU   0
PRINTB12 EQU   PRNTB123
PRINTBUF EQU   PRINTB12
PRINTB23 EQU   PRINTB12+1
PRINTB2  EQU   PRINTB23
PRINTB3  EQU   PRINTB23+1
FRMRECD  EQU   0
LOGRECD  EQU   0
FRAMECHR EQU   0
FRMCHARS EQU   0
LOG      EQU   0
PARBYTE  EQU   0
BINWORD  EQU   0
DECADDR  EQU   0
NEXTBYTE EQU   0
ADDNUM   EQU   0
LENNUM   EQU   0
PRTLINE2 EQU   PRTLINE1
PRNTBUFF EQU   PRTLINE2+50
ERR79    EQU   MESSAGE
MCHCCH79 EQU   ERR79+25
MOD79    EQU   ERR79+33
SER79    EQU   ERR79+42
ERR20    EQU   MESSAGE
MCFCCF20 EQU   ERR20+8
FRAME20  EQU   ERR20+18
MOD20    EQU   ERR20+34
SER20    EQU   ERR20+43
PRTDMPHD EQU   PRTLINE1
DUMPMSG  EQU   PRTDMPHD+3
PRNTAREA EQU   PRTLINE1
ERR80    EQU   MESSAGE
MCFCCF80 EQU   ERR80+17
FRAME80  EQU   ERR80+27
MOD80    EQU   ERR80+34
SER80    EQU   ERR80+43
ERR77    EQU   MESSAGE
HEXA     EQU   LINEADDR
WORKOVER EQU   WORK
TRECCH   EQU   TRECCH0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00137 EQU   ERR77+8
@NM00136 EQU   ERR77
@NM00102 EQU   ERR80+38
@NM00101 EQU   ERR80+29
@NM00100 EQU   ERR80+20
@NM00099 EQU   ERR80+8
@NM00098 EQU   ERR80
@NM00095 EQU   PRTDMPHD
@NM00092 EQU   ERR20+38
@NM00091 EQU   ERR20+20
@NM00090 EQU   ERR20+11
@NM00089 EQU   ERR20
@NM00088 EQU   ERR79+37
@NM00087 EQU   ERR79+28
@NM00086 EQU   ERR79+8
@NM00085 EQU   ERR79
@NM00084 EQU   PRTLINE2
@NM00097 EQU   PRTDMPAD+4
@NM00096 EQU   PRTGROUP+8
CCFFRAME EQU   CCFREC+24
@NM00083 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00081
@NM00082 EQU   @NM00081
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00080 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00079 EQU   CCFHEAD+4
@NM00078 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00077 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00076 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00075 EQU   MCFHEAD+22
MCFVER   EQU   @NM00073
@NM00074 EQU   @NM00073
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00072 EQU   MCFHEAD+7
@NM00071 EQU   MCFHEAD+4
@NM00070 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00069 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00068 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
DVBSDRE  EQU   TPRREC+56
@NM00067 EQU   TPRREC+39
TPRMODE  EQU   TPRREC+38
TPRLINAD EQU   TPRREC+36
@NM00066 EQU   TPRREC+34
TPRVOL   EQU   @NM00065
TPRCUA   EQU   TPRREC+24
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00064 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00063 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00062 EQU   TPRBUFC
TPRDEV   EQU   TPRHEAD+4
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00061 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00060 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00059 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
MIHCUA   EQU   MIHREC+35
@NM00058 EQU   @NM00057+8
MIHJOBID EQU   @NM00057
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00056 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00055 EQU   MIHHEAD+6
@NM00054 EQU   MIHHEAD+5
MIHDEBIT EQU   MIHHEAD+5
MIHCEBIT EQU   MIHHEAD+5
@NM00053 EQU   MIHHEAD+4
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00052 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRFCUA  EQU   DDRREC+45
DDRPHD   EQU   @NM00051+20
DDRVOL2  EQU   @NM00051+14
DDRVOL1  EQU   @NM00051+8
DDRJOBID EQU   @NM00051
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00050 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00049 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00048 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00047 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00046 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00045 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00044 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00043 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00042 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00041 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00040 EQU   SFTAEC1
@NM00039 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00038 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00037 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
SFTKEY1  EQU   SFTKEY
OBR34CT2 EQU   OBRTERMN+5
OBR34CT1 EQU   OBRTERMN+4
@NM00036 EQU   OBRTERMN
@NM00035 EQU   OBRSEEK+1
OBRTCAM  EQU   OBRSEEK
OBRVOL   EQU   OBRREC+64
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRPCUA  EQU   OBRREC+57
OBRLSDRC EQU   OBRREC+56
OBRTYPE  EQU   OBRDEV+1
OBRCLASS EQU   OBRDEV
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRDEVDC EQU   OBRREC+48
OBRSTAT  EQU   OBRCSW+4
@NM00034 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSCUA  EQU   OBRJOBID+5
OBRSSDRC EQU   OBRJOBID+4
OBRSDEV2 EQU   OBRJOBID+2
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00033 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00032 EQU   OBRHEAD+4
@NM00031 EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
@NM00030 EQU   OBRSUBTP
SHORTSW  EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SDRCOUNT EQU   OBRSUBTP
@NM00029 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00028 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
OBRKEY1  EQU   OBRKEY
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
CCHCUA   EQU   CCHREC+74
@NM00027 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00026 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00025 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00024 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00023 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
@NM00022 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00021 EQU   MCHHEAD+4
MCHSYSTR EQU   MCHSMS+1
@NM00020 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00019 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00018 EQU   @NM00016+3
LRTCNT   EQU   @NM00016+2
@NM00017 EQU   @NM00016
LRTDSMNT EQU   LRTERRID
@NM00015 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00014 EQU   LRTERRID
@NM00013 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00012 EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTNLAST EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
MODEL    EQU   MERIDIAN+2
MRDNUMBR EQU   MERIDIAN
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
CPUVAL   EQU   CPUS+2
CPUNUM   EQU   CPUS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
MDRVAL   EQU   DEVICE+204
MDRNUM   EQU   DEVICE+202
DEVVAL   EQU   DEVICE+2
DEVNUM   EQU   DEVICE
CUA2     EQU   CUAVAL+2
CUA1     EQU   CUAVAL
CUANUM   EQU   CUA
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+10
SHARSERB EQU   SHAREIO+7
SHARECUB EQU   SHAREIO+5
SHARSERA EQU   SHRCUCPU+2
SHAREDX  EQU   SHARECUA
SHARENUM EQU   SHARE
SYSTEMP  EQU   SYSUM2+9
SYSPERM  EQU   SYSUM2+7
SYSDEV   EQU   SYSUM2+5
SYSOLDA  EQU   SYSITEM
SYS3705  EQU   SYSITEM
SYSOLD   EQU   SYSCPUS
SYSCPU   EQU   SYSCPUS
SYSCUA   EQU   SYSRT
SYSGROUP EQU   SYSUMKEY
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TRETMP   EQU   TREND2+10
TREPRM   EQU   TREND2+8
TRENDDEV EQU   TREND2+6
TRENDDAT EQU   TRENDKEY+5
TRENDOD  EQU   TRENDITM
TREND037 EQU   TRENDITM
TRENDOLD EQU   TRENCPUS
TRENDCPU EQU   TRENCPUS
@NM00011 EQU   TRENDRT+1
TRENDCUA EQU   TRENDRT
TRENDGRP EQU   TRENDKEY
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
FRAMEPTR EQU   PARM+200
ADCPUT   EQU   PARM+144
@NM00009 EQU   CCHHRLNG+5
RECCCHHR EQU   CCHHRLNG
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SORTNUM  EQU   PARM+84
TABSIZE  EQU   PARM+80
SYSRETRN EQU   @NM00007
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CACCIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PASSFLAG EQU   MISC
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PHIST    EQU   MISC
PACC     EQU   MISC
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG23  EQU   DEBUG+2
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG16  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG11  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
ZEROALL  EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
PCHAN    EQU   RECTYPE
PMCH     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00263 EQU   @EL00004
@RF00313 EQU   @EL00007
@RF00410 EQU   @EL00013
@RC00454 EQU   @EL00017
@RC00523 EQU   @EL00020
@RC00521 EQU   @EL00020
@RC00519 EQU   @EL00020
@RC00517 EQU   @EL00020
@RC00515 EQU   @EL00020
@RC00513 EQU   @EL00020
@RC00511 EQU   @EL00020
@RC00509 EQU   @EL00020
@RC00507 EQU   @EL00020
@RC00505 EQU   @EL00020
@RC00503 EQU   @EL00020
@RC00501 EQU   @EL00020
@RC00499 EQU   @EL00020
@RC00532 EQU   @EL00021
@RC00543 EQU   @EL00022
@RC00643 EQU   @EL00031
@RC00648 EQU   @EL00031
@RC00646 EQU   @EL00031
@RC00662 EQU   @EL00031
@RC00689 EQU   @EL00032
@RF00798 EQU   @EL00036
@RF00818 EQU   @EL00037
@RC00960 EQU   @EL00047
@RC00534 EQU   @RC00532
@ENDDATA EQU   *
         END   IFCFRAME,(C'PLS2040',0701,78139)
