         TITLE 'IFCST006 - SUM TABLE - LINKNAME=IFCST006'
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
*  LINE MACRO     LINE MACRO     LINE MACRO     LINE MACRO            *
         SPACE 2
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         EJECT
*  ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO     ROUTINE MACRO*
         SPACE 2
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
*  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO        *
         SPACE 2
         MACRO
         LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4
.*                            THIS MACRO ALLOWS UP TO FOUR LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         GBLA  &NRENTS
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         LCLA  &NDX
         LINEND
.LOOP    ANOP
&NDX     SETA  &NDX+1
         DC    C'&LABELS(&NDX)'
         AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         SPACE 2
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                 ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         MACRO
         SPECIAL &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         EJECT
*  HEX MACRO     HEX MACRO     HEX MACRO    HEXN MACRO     HEX MACRO  *
         SPACE 2
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         SPACE 2
         GBLC  &DSECT
         GBLC  &CSECT
&DSECT   SETC  'C3670'
&CSECT   SETC  'IFCST006'
IFCST006 CSECT
C3670    DSECT
         DSGEN (XDUM1,8),(XRELN,8),(XDUM2,8),(XDMSW,1),(XSHRT,1),      X
               (XSWS,6)
         DSGEN (TID,8),(TDUM1,16),(TCHAR,8)
         DSGEN (XDATE,32),(XTIME,32)
         DSGEN (TDUM2,8),(XSER,24),(XMODEL,16),(TDUM3,16)
         DSGEN (TCUA,16),(DEVSER,16)
DATA     EQU   *
         DSGEN (STAT1,8),(STAT2,8),(STAT3,8),(STAT4,8)
         DSGEN (STAT5,8),(STAT6,8),(STAT7,8),(STAT8,8)
         DSGEN (STAT9,8),(XDUMX,24)
IFCST006 CSECT
ENTRYPTR DC    A(EDIT)
         DC    A(PEDIT)            POINTER TO EDIT SECTION
REG9     DS    F
SCSIZE   DC    H'23'
ROUTINES EQU   *
LOGREG   EQU   2
@FAILCCW EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,FCCW(LOGREG)
FCCW     EQU   48
         B     COMMON
@UNIT    EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,91(LOGREG)
         B     COMMON
@DEVADR  EQU   *
         USING *,15
         STM   14,12,12(13)
         SR    7,7                 LOAD DEVICE ADDRESS
         IC    7,74(LOGREG)
         SLL   7,8
         IC    7,75(LOGREG)
COMMON   EQU   *
         BALR  12,0
         USING *,12
         L     1,R9ADR
         L     9,0(1)
         SR    1,1
         IC    1,1(9)              ITERATIONS
         LR    5,1
         SLL   5,2
         AR    5,3                 COMPUTE COUNTER ADDRESS PAST TEXT
         LH    4,=X'FFFF'
LOOP1    CH    4,0(3)              TEST FOR EMPTY/FULL
         BNE   STORE
         CH    7,2(3)              FULL - COMPARE WITH STORED DATA
         BE    BUMP
         LA    3,4(3)              NOT SAME - GO TO NEXT TEXT CELL
         LA    5,2(5)
         BCT   1,LOOP1
         B     FULL                ALL CELLS FULL - NO MATCH
STORE    EQU   *
         STH   4,0(3)              STORE NEW TEXT DATA
         STH   7,2(3)
BUMP     EQU   *
         LH    6,0(5)              BUMP COUNTER BY ONE
         AH    6,=H'1'
         STH   6,0(5)
FULL     EQU   *
         LM    14,12,12(13)
         BR    14
*
*        SAVE  DATE RANGE
*
         DROP  15
         DROP  12
         USING C3670,R2
         USING IFCST006,R9
*
XDATE1   CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    EXIT
         CLC   L0(L4,R3),HEX00    IS LOW DATE = ZERO ?
         BNE   XDATE2
         MVC   L0(L4,R3),XDATE    IF YES MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK AGAINST LOW DATE
         BL    SAVELO                   BR-THIS IS LOWER
         CLC   XDATE(L4),L4(R3)         CHECK AGAIN HI
         BH    SAVEHI
EXIT     BR    R14                      RETURN
SAVEHI   MVC   L4(L4,R3),XDATE          SAVE HI DATE IN COUNTER
         B     EXIT
SAVELO   MVC   L0(L4,R3),XDATE          SAVE LO
         B     EXIT
ALLFFF   STM   R5,R8,SSAVE              SAVE REGS                43068
         LA    R4,DATA                  POINT TO DATA            43068
AG       CLC   L0(L4,R4),HFFF           IS WORD ALL FF"S         43068
         BNE   OK                       BR - NO                  43068
         LA    R5,QUIT-L6               POINT TO END             43068
         ST    R5,REG9                  STORE IN LIST            43068
OK       LM    R5,R8,SSAVE              RESTORE REGS             43068
         BR    R14                      EXIT                     43068
SUMST1   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT1                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST2   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT2                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST3   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT3                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST4   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT4                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST5   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT5                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST6   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT6                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST7   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT7                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST8   ST    R5,SAVE                       SAVE REGS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT8                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
SUMST9   ST    R5,SAVE                       SAV& R&GS
         SR    R5,R5                         CLEAR R5
         IC    R5,STAT9                      MOVE COUNTER TO R5
         B     ADDSUM                        GO SUMMARIZE
ADDSUM   MVC   SAVCOUNT(L4),L0(R3)           MOVE TO WORD BOUNDRY
         A     R5,SAVCOUNT                   ADD TO SUMMARIZE
         ST    R5,SAVCOUNT                   PUT BACK IN WORD
         MVC   L0(L4,R3),SAVCOUNT            PUT BACK IN SUMMARY CTR
         L     R5,SAVE                       RESTORE REG
         BR    R14                           RETURN TO FLOW
CHKSHORT STM   R6,R7,SAVE                    SAVE REGS
         TM    XDMSW,SHORT                   Q/ IS RECORD SHORT FORM
         BNO   GOBACK                        NO--RETURN
         LA    R6,QUIT-L6                    ADDR TO END ON
         ST    R6,REG9                       STORE IN REG9
GOBACK   LM    R6,R7,SAVE                    RESTORE REGS
         BR    R14                           RETURN
SSAVE    DC    4F'0'                    SMALL SAVE AREA          43068
HFFF     DC    X'FFFFFFFF'                                       43068
HEX00    DC    F'0'
R9ADR    DC    A(REG9)
*                             SPECIAL ROUTINES REQUIRED
SAVE     DC    5F'0'                         SAVE AREA
SAVCOUNT DC    1F'0'                         WORD TO ALIGN COUNTERS
SHORT    EQU   X'40'
EDIT     EQU   *
         SPECIAL XDATE1,0,SPACE=4
         SUM   XSHRT
         SPECIAL CHKSHORT,0,SPACE=0
         SPECIAL SUMST1,0,SPACE=2
         SPECIAL SUMST2,0,SPACE=2
         SPECIAL SUMST3,0,SPACE=2
         SPECIAL SUMST4,0,SPACE=2
         SPECIAL SUMST5,0,SPACE=2
         SPECIAL SUMST6,0,SPACE=2
         SPECIAL SUMST7,0,SPACE=2
         SPECIAL SUMST8,0,SPACE=2
QUIT     DC    XL1'FF'
*
D3670    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YDID,8),(SUBID,16),(XXTRA,8),(YXTRA,32)
         DSGEN (YLOD,32),(YHID,32)
         DSGEN (YSHST,16)
         DSGEN (YSTAT1,32),(YSTAT2,32)
         DSGEN (YSTAT3,32),(YSTAT4,32)
         DSGEN (YSTAT5,32),(YSTAT6,32)
         DSGEN (YSTAT7,32),(YSTAT8,32)
         DSGEN (YSTAT9,32)
IFCST006 CSECT
PEDIT    DS    0F
&DSECT   SETC  'D3670'
&CSECT   SETC  'PEDIT'
         USING *,R9
         DC    A(PENTRY)
         DC    C'IFCST006'
YR9PTR   DC    F'0'
YLABELP  DC    F'0'
         DS    0F
CONVERT  STM   R5,R8,XSAVE              SAVE REGS
         MVC   CONVWORD(L4),L0(R4)           MOVE COUNTER
         L     R5,CONVWORD                   LOAD COUNTER
CONVX    CVD   R5,WORK                       CONVERT IT
         UNPK  L0(L5,R3),WORK+L5(L3)         UNPACK
         MVZ   L4(L1,R3),L0(R3)              MOVE ZONES
RETURNA  LM    R5,R8,XSAVE              RESTORE
RETURNB  BR    R14                      RETURN
CONV2    STM   R5,R8,XSAVE                   SAVE REGS
         SR    R5,R5
         IC    R5,L0(R4)                     FETCH
         SLL   R5,L8
         IC    R5,L1(R4)                      DATA
         B     CONVX
*
SKIPPER  BR    R14
*
SETCPUNO STM   R5,R8,XSAVE              SAVE REGS
         SR    R5,R5                    CLEAR R5
         IC    R5,0(R4)                 PICK UP
         SLL   R5,L8                      CPU TYPE
         IC    R5,L1(R4)                    FIELD
         LTR   R5,R5                    IS IT ZERO?
         BNZ   RETURNA                  NO, HEX IS GOOD, RETURN
         LA    R6,L64                   ELSE, BACK UP DATA PTR
         SR    R3,R6                    TO PUT IN NEW INFO
         MVC   0(L6,R3),SHARED        SAY MODEL SHARED         @Z427VLS
         B     RETURNA                       RETURN
*
SETDATE  OI    L3(R4),HEX0F             PUT ON PROPER SIGN
         UNPK  WORK(L8),L0(L4,R4)       UNPACK DATE
         MVZ   WORK+L7(L1),WORK         SET ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DAY
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR
         BR    R14
*
*              FREE COUNTERS
*
FREECORE STM   R14,R12,L12(R13)         SAVE REGS
         LR    R12,R13                  SAVE SAVE PTR
         LA    R13,FSAVE                SET ADDRESS MYSAVE
         ST    R12,L4(R13)              CHAIN SAVE AREAS TOGETHER
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP NXT COUNTER PTR
         ST    R3,L28(R12)              PRESET REG IN CALLERS AREA
         LH    R0,SIZE                  PICK UP COUNTER LENGTH
         LR    R1,R2                    SET ADDRESS TO COUNTER
*
         FREEMAIN R,LV=(0),A=(1)        FREE COUNTER
*
         LTR   R3,R3                    TEST FOR LAST COUNTER IN
         BZ    RETURN0                  BR-LAST
         LA    R5,PENTRY+L10            RESET R9 &
         LA    R6,LABLAREA-L1           LABEL POINTER TO START
         ST    R5,YR9PTR
         ST    R6,YLABELP
RETURN0  L     R13,L4(R13)              RESET TO CALLERS REGS
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
WORK     DS    D
XSAVE    DS    4F
*
FSAVE    DS    18F
SHARED   DC    C'SHARED'                                       @Z427VLS
CONVWORD DC    1F'0'
HEXFFFF  DC    X'FFFF'
SIZE     DC    H'76'
HEX0F    EQU   X'0F'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L28      EQU   28
L32      EQU   32
L64      EQU   64
*
*
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABLAREA)
         DC    H'0'
*
         DC    X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
*
         LABEL ' '
         LINE  (57,32),(23,26),SKIP=1
         HEX   YCPU,0,2B
         HEX   YSER,0,3B
         ROUTINE  YCPU,SETCPUNO
         LABEL 'DAY YEAR   DAY YEAR','MODEL-','SERIAL NO.'
         LINE  (23,11),(1,30),SKIP=1
         ROUTINE    YLOD,SETDATE
         ROUTINE    YHID,SETDATE
         LABEL      'OUTBOARD DATE RANGE -','TO'
*
         LINE  (53,50),(1,59),SKIP=1
         ROUTINE SUBID,CONV2
         LABEL 'SUMMARY OF MISCELLANEOUS RECORDS FOR DEVICE SERIAL',   C
               'DEVICE 3670 REMOTE'
         LINE  (19,50),(1,25)
         ROUTINE YNOREC,CONV2
         LABEL 'SUMMARY INCLUDES','TOTAL RECORDS'
         LINE  ,,SKIP=2
         ROUTINE YSHST,CONV2
         LABEL 'SUMMARY INCLUDES','SHORT FORMAT RECORDS'
         LINE  (28,41),(1,40),SKIP=2
         LABEL 'COMMUNICATIONS ADAPTER','DESK CONSOLE'
         LINE  ,,SKIP=1
         ROUTINE YSTAT1,CONVERT
         ROUTINE YSTAT4,CONVERT
         LABEL 'PARITY ERROR COUNTER','PARITY ERROR COUNTER'
         LINE
         ROUTINE YSTAT2,CONVERT
         ROUTINE YSTAT5,CONVERT
         LABEL 'RECEIVE OVERRUN COUNTER','SERIAL XMIT ERROR COUNTER'
         LINE  ,,SKIP=2
         ROUTINE YSTAT3,CONVERT
         ROUTINE YSTAT6,CONVERT
         LABEL 'TIMEOUT ERROR COUNTER','NO RELEASE ERROR COUNTER'
         LINE  ,(30,60),SKIP=2
         LABEL 'PRINTER/KEYBOARD'
         LINE  ,(1,40),SKIP=1
         ROUTINE YSTAT7,CONVERT
         ROUTINE YSTAT8,CONVERT
         LABEL 'ATTACHMENT ERROR COUNTER','DEVICE ERROR COUNTER'
         LINE  ,,SKIP=1
         ROUTINE    YDUMA,FREECORE
         LABEL ' '
         DC    X'FF0000000000'
         DC    C'$'
LABLAREA EQU   *
         LSTART
         END
