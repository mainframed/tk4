         TITLE 'IFCFILT2-RECORD FILTER FOR SYSTEM SUMMARY REPORT       *
                        '
IFCFILT2 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFILT2  78.079'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
* IF DEBUG4 = ON THEN    /*PRINT THE NAME AND COMPILE DATE   @Z427VLS*/
         TM    DEBUG4(R2),B'00001000'                              0192
         BNO   @RF00192                                            0192
*  DO;                                                     /*@Z427VLS*/
*   R15 = R12 - 27;                                        /*@Z427VLS*/
         LR    R15,R12                                             0194
         SL    R15,@CF01102                                        0194
*   GEN(MVC  PRINTBDY(16),0(R15));                         /*@Z427VLS*/
         MVC  PRINTBDY(16),0(R15)
*   PRINTADR = ADDR(PRINTLIN);  /*SET UP IOHND COMM          @Z427VLS*/
         LA    @14,PRINTLIN                                        0196
         ST    @14,PRINTADR(,R2)                                   0196
*   CALL  IOHND(RITEPRTR);                                 /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0197
         LA    @01,@AL00197                                        0197
         BALR  @14,@15                                             0197
*   R15 = ZERO;                                            /*@Z427VLS*/
         SLR   R15,R15                                             0198
*  END;                                                    /*@Z427VLS*/
*  ZERO5 = ZERO5 && ZERO5;/*COMPAR WILL ALWAYS WORK NO MATTER LENG*/
@RF00192 XC    ZERO5(5),ZERO5                                      0200
*                         /* OF A SORT TABLE ENTRY           @Z427VLS*/
*                  /*PROCESS ERROR RECORDS SEQUENTIALLY      @Z427VLS*/
*  CALL INITAB;    /*GET CORE FOR SYSUM2, EVTABLE, AND ONE ENTRY  */
         BAL   @14,INITAB                                          0201
*                  /*OF SYSUMONE AND STSUMONE.               @Z427VLS*/
*  R15 = ERROR; /*GET RETURN CODES FROM INITAB               @Z427VLS*/
         L     R15,ERROR                                           0202
*DO WHILE R15 = SUCCESS & ENTRIES < MAXENT;                /*@0099VLS*/
         B     @DE00203                                            0203
@DL00203 DS    0H                                                  0204
*                                     /*DONT SET LAST ENTRY  @Z427VLS*/
*    CALL IOHND(READSEQ);                        /*GET A RECORD*/  0204
         L     @15,ADIOHND(,R2)                                    0204
         LA    @01,@AL00204                                        0204
         BALR  @14,@15                                             0204
*    IF R15 = SUCCESS THEN  /*CONTINUE IF NOT EOF OR UNREADABLE*/  0205
         LTR   R15,R15                                             0205
         BNZ   @RF00205                                            0205
*      DO;                                                 /*@Z427VLS*/
*        BUG(21) = BUG(21) + 1; /*NUMBER OF RECORDS RETRIEVED*/    0207
         LA    @14,1                                               0207
         AL    @14,BUG+80                                          0207
         ST    @14,BUG+80                                          0207
*IF ((LRTKEY1 & GENREC) = HEXA0)×   /* IF MCH OR CCH FRAME RECORD */
*   ((LRTKEY1 & GENREC) = HEXB0) THEN                              0208
         MVC   @TS00001(1),LRTKEY1(R7)                             0208
         NI    @TS00001,X'F0'                                      0208
         CLI   @TS00001,X'A0'                                      0208
         BE    @RT00208                                            0208
         MVC   @TS00001(1),LRTKEY1(R7)                             0208
         NI    @TS00001,X'F0'                                      0208
         CLI   @TS00001,X'B0'                                      0208
         BNE   @RF00208                                            0208
@RT00208 DS    0H                                                  0209
* DO;                                                      /*@G51DGBB*/
*  CALL FLIMFRAM; /*PROCESS FRAME RECORDS                    @G51DGBB*/
         BAL   @14,FLIMFRAM                                        0210
*  R15 = ERROR; /*GET FRAME PROCESSING ERROR CONDITIONS      @G51DGBB*/
         L     R15,ERROR                                           0211
* END;                                                     /*@G51DGBB*/
*ELSE  /*NORMAL ERROR RECORD PROCESSING                      @G51DGBB*/
*  DO; /*NON FRAME RECORDS                                   @G51DGBB*/
         B     @RC00208                                            0213
@RF00208 DS    0H                                                  0214
*        CALL ALLREC;          /*SELECT BY RECORD HEADER CRITERIA*/
         BAL   @14,ALLREC                                          0214
*        IF PASSFLAG = YES THEN                                    0215
         TM    PASSFLAG(R2),B'00000001'                            0215
         BNO   @RF00215                                            0215
*          DO;                                             /*@Z427VLS*/
*            BUG(22) = BUG(22) + 1; /*PASS DATE, TIME FILTER COUNT*/
         LA    @14,1                                               0217
         AL    @14,BUG+84                                          0217
         ST    @14,BUG+84                                          0217
*            CALL RECDEP; /*ADD TO SYSUMONE,SYSUM2 IF PASS   @Z427VLS*/
         BAL   @14,RECDEP                                          0218
*       IF LRTYRDAY > EVSTOP THEN    /*CHECK IF REC TIME > LAST*/  0219
         L     @14,EVPTR(,R2)                                      0219
         CLC   LRTYRDAY(3,R7),EVSTOP(@14)                          0219
         BNH   @RF00219                                            0219
*        EVSTOP = LRTYRDAY;        /*THEN CHANGE LAST DAY FOR REPORT*/
         MVC   EVSTOP(3,@14),LRTYRDAY(R7)                          0220
*       IF LRTYRDAY < STRTDATE THEN  /*CHECK START DAY FOR NEW LOW*/
@RF00219 CLC   LRTYRDAY(3,R7),STRTDATE(R2)                         0221
         BNL   @RF00221                                            0221
*        STRTDATE = LRTYRDAY;        /*CHANGE START DATE OF DATA */
         MVC   STRTDATE(3,R2),LRTYRDAY(R7)                         0222
*            IF PACC = YES THEN    /*HISTORY D.S. TO BE CREATED*/  0223
@RF00221 TM    PACC(R2),B'01000000'                                0223
         BNO   @RF00223                                            0223
*                CALL IOHND(RITEHIST);  /*WRITE TO ACCDEV    @Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0224
         LA    @01,@AL00224                                        0224
         BALR  @14,@15                                             0224
*               IF R15 = SUCCESS & SYSUMKEY  ^= ZERO5              0225
*               THEN DO; /*NO ERRORS PLUS ENTRY FOR NON 0 CPU CREATED*/
@RF00223 LTR   R15,R15                                             0225
         BNZ   @RF00225                                            0225
         CLC   SYSUMKEY(5),ZERO5                                   0225
         BE    @RF00225                                            0225
*               /*IF IF RECORD HAS BEEN SAVED IN SYSUM2 THEN MUST UP*/
*                CALL ADDVALUE;   /*BUILD THE SORT TABLE ENTRY*/   0227
         BAL   @14,ADDVALUE                                        0227
*                    SYSUM2  = (SYSUM2  && SYSUM2 ); /*CLEAR @0099VLS*/
         XC    SYSUM2(13),SYSUM2                                   0228
*               END;                                       /*@Z427VLS*/
*            ELSE                                                  0230
*              IF R15 ^= SUCCESS THEN                              0230
         B     @RC00225                                            0230
@RF00225 LTR   R15,R15                                             0230
         BZ    @RF00230                                            0230
*                ZEROALL = NO; /*DONT RESET LOGREC HEADER OF ALL */
         NI    ZEROALL(R2),B'10111111'                             0231
*                             /*RECORDS NOT PROCESSED        @Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00230 DS    0H                                                  0232
@RC00225 DS    0H                                                  0233
*   END; /*END OF NON-FRAME ERROR RECORD SEQUENTIAL PROCESSING*/   0233
@RF00215 DS    0H                                                  0234
*      END;                                                /*@Z427VLS*/
@RC00208 DS    0H                                                  0235
*  END;                                                    /*@Z427VLS*/
@RF00205 DS    0H                                                  0235
@DE00203 LTR   R15,R15                                             0235
         BNZ   @DC00203                                            0235
         L     @14,ENTRIES                                         0235
         C     @14,MAXENT                                          0235
         BL    @DL00203                                            0235
@DC00203 DS    0H                                                  0236
*  ERROR = R15; /*TELL ENDOFILE IF THERE ARE ERRORS          @Z427VLS*/
         ST    R15,ERROR                                           0236
*PASSNUM = ENTRIES - 1;                                    /*@0099VLS*/
         L     @14,ENTRIES                                         0237
         BCTR  @14,0                                               0237
         ST    @14,PASSNUM                                         0237
*  CALL ENDOFILE; /*SORT SORTABLE, FREE EXCESS CORE, HANDLE  @Z427VLS*/
         BAL   @14,ENDOFILE                                        0238
*                 /*ERROR CONDITIONS                         @Z427VLS*/
*  R15 = ERROR; /*PRESERVE R.C. ALTERATION FROM ENDOFILE PROC*/    0239
         L     R15,ERROR                                           0239
*  IF DEBUG16 = ON THEN                                            0240
         TM    DEBUG16(R2),B'10000000'                             0240
         BNO   @RF00240                                            0240
*    CALL BUGCNTS; /*PRINT COUNTS OF DIFFERENT RECORD TYPES PROCESSED*/
         BAL   @14,BUGCNTS                                         0241
*  IF DEBUG11 = ON THEN                                            0242
@RF00240 TM    DEBUG11(R2),B'00010000'                             0242
         BNO   @RF00242                                            0242
*    GEN(ABEND 220,DUMP); /*SHOW STATUS IF TESTING SITUATION @Z427VLS*/
         ABEND 220,DUMP
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*INITAB: PROC;                                             /*@Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0245
@EF00001 DS    0H                                                  0245
@ER00001 L     @14,12(,@13)                                        0245
         LM    @00,@12,20(@13)                                     0245
         BR    @14                                                 0245
INITAB   STM   @14,@12,@SA00002                                    0245
*RESPECIFY(R0,R15) RESTRICTED;                             /*@Z427VLS*/
*/*CORE IS ALLOCATED FOR SYSUM2, EVTABLE, THE SUMMARY COLUMN ENTRY OF*/
*/*SYSUMONE. IF SHARE TABLE EXISTS, EXTRA ENTRIES OF SYSUMONE ARE  */
*/* ALLOCATED FOR EVERY UNIQUE CPU SERIAL ENCOUNTERED IN SHARE     */
*/* TABLE. ERROR MESSAGES ARE ISSUED AND A SERIOUS RETURN CODE     */
*/*     ISSUED IF CORE IS NOT AVAILABLE                      @Z427VLS*/
*R0 = TABSIZE + EVSIZE + SUMSIZE1; /*GET CORE FOR ALL TABLES @Z427VLS*/
         LA    R0,208                                              0247
         AL    R0,TABSIZE(,R2)                                     0247
*GEN(GETMAIN EC,LV=(R0),A=EVPTR1);                         /*@Z427VLS*/
         GETMAIN EC,LV=(R0),A=EVPTR1
*IF R15 ^= SUCCESS THEN                                            0249
         LTR   R15,R15                                             0249
         BZ    @RF00249                                            0249
*  DO;                                                     /*@Z427VLS*/
*    MSGNO = 2;                                            /*@Z427VLS*/
         MVI   MSGNO,X'02'                                         0251
*    CALL ERRMSG;                                          /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0252
*    R15 = NOSRTABL;                                       /*@0001VLS*/
         LA    R15,12                                              0253
*    GETFAIL = YES;                                        /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0254
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0256
*  DO;                                                     /*@Z427VLS*/
         B     @RC00249                                            0256
@RF00249 DS    0H                                                  0257
*    MAXENT = TABSIZE/13;      /*DETERMINE MAX NUMBER OF ENTRIES*/ 0257
         L     @04,TABSIZE(,R2)                                    0257
         SRDA  @04,32                                              0257
         D     @04,@CF00966                                        0257
         ST    @05,MAXENT                                          0257
*    EVPTR = EVPTR1; /*ESTABLISH EVTABLE ADDRESSIBILITY      @Z427VLS*/
         L     @14,EVPTR1                                          0258
         ST    @14,EVPTR(,R2)                                      0258
*    EVSTOP = '00000F'X; /*INSURE VALUE ALWAYS SET FROM FIRST RECORD*/
         MVC   EVSTOP(3,@14),@CB00228                              0259
*    STRTDATE = '99366F'X; /*LIKEWISE FOR START DATE         @Z427VLS*/
         MVC   STRTDATE(3,R2),@CB01317                             0260
*    EVTABLE = (EVTABLE && EVTABLE); /*CLEAR TO HEX ZEROS    @Z427VLS*/
         XC    EVTABLE(102,@14),EVTABLE(@14)                       0261
*    STSUMPTR = EVPTR1 + EVSIZE; /*LOCATION JUST BEYOND EVTABLE*/  0262
         LA    @08,104                                             0262
         ALR   @14,@08                                             0262
         ST    @14,STSUMPTR                                        0262
*    SORTADR = STSUMPTR + SUMSIZE1;                        /*@Z427VLS*/
         ALR   @08,@14                                             0263
         ST    @08,SORTADR(,R2)                                    0263
*    SYSUM2(1) = (SYSUM2(1) && SYSUM2(1));                 /*@Z427VLS*/
         XC    SYSUM2(1),SYSUM2                                    0264
*    STSUMONE = (STSUMONE && STSUMONE);                    /*@Z427VLS*/
         XC    STSUMONE(100,@14),STSUMONE(@14)                     0265
*    IF SHAREPTR ^= ZERO THEN                                      0266
         L     @14,SHAREPTR(,R2)                                   0266
         LTR   @14,@14                                             0266
         BZ    @RF00266                                            0266
*      DO;                                              /* @ZA17692 */
*        CALL SORTSHAR;   /* SORT SHARE TABLE CPU LETTER   @ZA17692 */
         BAL   @14,SORTSHAR                                        0268
*        DO J = 1 BY 1 TO SHARENUM WHILE R15 = SUCCESS;    /*@Z427VLS*/
         LA    @14,1                                               0269
         ST    @14,J                                               0269
         B     @DE00269                                            0269
@DL00269 LTR   R15,R15                                             0269
         BNZ   @DC00269                                            0269
*          UNIQUE = YES;                                   /*@Z427VLS*/
         OI    UNIQUE,B'00100000'                                  0270
*          DO K = 1 BY 1 TO EVMAX WHILE UNIQUE = YES;      /*@Z427VLS*/
         LA    @14,1                                               0271
         ST    @14,K                                               0271
@DL00271 TM    UNIQUE,B'00100000'                                  0271
         BNO   @DC00271                                            0271
*            IF SHARSERA(J) = EVSERIAL(K) THEN                     0272
         L     @08,J                                               0272
         MH    @08,@CH00033                                        0272
         L     @01,SHAREPTR(,R2)                                   0272
         MH    @14,@CH00081                                        0272
         L     @06,EVPTR(,R2)                                      0272
         ALR   @01,@08                                             0272
         AL    @01,@CF01502                                        0272
         ALR   @06,@14                                             0272
         CLC   SHARSERA-4(3,@01),EVSERIAL-6(@06)                   0272
         BNE   @RF00272                                            0272
*              UNIQUE = NO;                                /*@Z427VLS*/
         NI    UNIQUE,B'11011111'                                  0273
*            ELSE IF EVSERIAL(K) = ZERO THEN                       0274
         B     @RC00272                                            0274
@RF00272 L     @14,K                                               0274
         MH    @14,@CH00081                                        0274
         L     @08,EVPTR(,R2)                                      0274
         L     @06,EVSERIAL-7(@14,@08)                             0274
         LA    @06,0(,@06)                                         0274
         LTR   @06,@06                                             0274
         BNZ   @RF00274                                            0274
*              DO;                                         /*@Z427VLS*/
*                UNIQUE = NO;                              /*@Z427VLS*/
         NI    UNIQUE,B'11011111'                                  0276
*                EVSERIAL(K) = SHARSERA(J);                /*@Z427VLS*/
         ST    @14,@TF00001                                        0277
         ALR   @14,@08                                             0277
         L     @06,J                                               0277
         MH    @06,@CH00033                                        0277
         L     @03,SHAREPTR(,R2)                                   0277
         ST    @06,@TF00002                                        0277
         ALR   @06,@03                                             0277
         AL    @06,@CF01502                                        0277
         MVC   EVSERIAL-6(3,@14),SHARSERA-4(@06)                   0277
*                EVLETTER(K) = SHARLET(J);                 /*@Z427VLS*/
         LR    @14,@08                                             0278
         AL    @14,@TF00001                                        0278
         AL    @03,@TF00002                                        0278
         MVC   EVLETTER-6(1,@14),SHARLET-11(@03)                   0278
*                EVNUM = EVNUM + 1;                        /*@Z427VLS*/
         LA    @14,1                                               0279
         AH    @14,EVNUM(,@08)                                     0279
         STH   @14,EVNUM(,@08)                                     0279
*                    R0 = SUMSIZE1; /*SYSUMONE TABLE SIZE    @Z427VLS*/
         LA    R0,104                                              0280
*                    GEN(GETMAIN EC,LV=(R0),A=COMPLINK);   /*@Z427VLS*/
         GETMAIN EC,LV=(R0),A=COMPLINK
*                    IF R15  = SUCCESS THEN                        0282
         LTR   R15,R15                                             0282
         BNZ   @RF00282                                            0282
*                      DO;                                 /*@Z427VLS*/
*                        IF K > 1 THEN /*IF ALREADY SYSUMONE ENTRY*/
         CLC   K(4),@CF00055                                       0284
         BNH   @RF00284                                            0284
*                          SYSUMNXT = COMPLINK; /*POINT TO NEW ENTRY*/
         L     @01,SYSUMPTR(,R2)                                   0285
         L     @14,COMPLINK                                        0285
         ST    @14,SYSUMNXT(,@01)                                  0285
*                                               /*FROM OLD ENTRY*/ 0286
*                          SYSUMPTR = COMPLINK; /*ADDRESS NEW ENTRY*/
@RF00284 L     @14,COMPLINK                                        0286
         ST    @14,SYSUMPTR(,R2)                                   0286
*                          SAVEADR(K) = COMPLINK; /*SAVE ADDRESS*/ 0287
         L     @08,K                                               0287
         SLA   @08,2                                               0287
         ST    @14,SAVEADR-4(@08)                                  0287
*                          SYSUMONE = (SYSUMONE && SYSUMONE); /*CLEAR*/
         XC    SYSUMONE(100,@14),SYSUMONE(@14)                     0288
*                      END;                                /*@Z427VLS*/
*                    ELSE  /*IF GETMAIN FAILURE THEN         @Z427VLS*/
*                      DO;                                 /*@Z427VLS*/
         B     @RC00282                                            0290
@RF00282 DS    0H                                                  0291
*                        MSGNO = 1; /*SELECT ERROR TEXT      @Z427VLS*/
         MVI   MSGNO,X'01'                                         0291
*                        CALL ERRMSG; /*GO PRINT MESSAGE TO TOURIST*/
         BAL   @14,ERRMSG                                          0292
*                        R15 = NOSRTABL;                   /*@0001VLS*/
         LA    R15,12                                              0293
*                        GETFAIL = YES;                    /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0294
*                      END;                                /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
@RC00282 DS    0H                                                  0297
*          END;                                          /* @Z427VLS */
@RF00274 DS    0H                                                  0297
@RC00272 LA    @14,1                                               0297
         AL    @14,K                                               0297
         ST    @14,K                                               0297
         C     @14,@CF00034                                        0297
         BNH   @DL00271                                            0297
@DC00271 DS    0H                                                  0298
*        END;                                            /* @Z427VLS */
         LA    @14,1                                               0298
         AL    @14,J                                               0298
         ST    @14,J                                               0298
@DE00269 L     @01,SHAREPTR(,R2)                                   0298
         CH    @14,SHARENUM(,@01)                                  0298
         BNH   @DL00269                                            0298
@DC00269 DS    0H                                                  0299
*      END;                                             /* @ZA17692 */
*  END;                                                    /*@Z427VLS*/
@RF00266 DS    0H                                                  0301
*  NUMUNSHR = EVNUM + 1;                                   /*@Z427VLS*/
@RC00249 L     @01,EVPTR(,R2)                                      0301
         LH    @01,EVNUM(,@01)                                     0301
         LA    @01,1(,@01)                                         0301
         STH   @01,NUMUNSHR                                        0301
*IF R15 = SUCCESS &  /*IF OTHER GETMAINS HAVE BEEN SUCCESSFULL  */ 0302
*         PACC = ON &  /*ONLY CHECK FRAMES IF WRITTEN TO ACCDEV*/  0302
*         (PMCH = ON × PCHAN = ON) THEN /*IF MCH OR CCH SELECTED*/ 0302
         LTR   R15,R15                                             0302
         BNZ   @RF00302                                            0302
         TM    PACC(R2),B'01000000'                                0302
         BNO   @RF00302                                            0302
         TM    PMCH(R2),B'11000000'                                0302
         BZ    @RF00302                                            0302
*  DO;                                                     /*@G51DGBB*/
* RESPECIFY (R1) RESTRICTED;                               /*@G51DGBB*/
*    R0 = FRAMBENT * EVMAX; /*NUMBER OF ENTRIES TIMES BYTES PER ENTRY*/
         LA    R0,240                                              0305
*    R0 = R0 + 4;           /*ADD FRAMENUM LENGTH            @G51DGBB*/
         AL    R0,@CF00064                                         0306
*    GEN(GETMAIN EC,LV=(R0),A=LINKPTR,SP=21); /*GET THE STORAGE*/  0307
         GETMAIN EC,LV=(R0),A=LINKPTR,SP=21
*    RESPECIFY (R0) UNRESTRICTED;                          /*@G51DGBB*/
*    IF R15 = SUCCESS THEN   /*IF GETMAIN SUCCESSFULL        @G51DGBB*/
         LTR   R15,R15                                             0309
         BNZ   @RF00309                                            0309
*      DO;                                                 /*@G51DGBB*/
*        FRAMEPTR = LINKPTR;  /*ESTABLISH FRAMETAB BASE ADDRESS*/  0311
         L     @14,LINKPTR                                         0311
         ST    @14,FRAMEPTR(,R2)                                   0311
*        DO Y = 1 BY 1 TO EVMAX; /*CLEAR FRAMETAB TO ZEROS   @G51DGBB*/
         LA    @14,1                                               0312
         ST    @14,Y                                               0312
@DL00312 DS    0H                                                  0313
*          FRAMEDTA(Y) = (FRAMEDTA(Y) && FRAMEDTA(Y));     /*@G51DGBB*/
         LR    @08,@14                                             0313
         MH    @08,@CH00227                                        0313
         L     @06,FRAMEPTR(,R2)                                   0313
         ALR   @06,@08                                             0313
         AL    @06,@CF01504                                        0313
         XC    FRAMEDTA-4(24,@06),FRAMEDTA-4(@06)                  0313
*        END;                                              /*@G51DGBB*/
         AL    @14,@CF00055                                        0314
         ST    @14,Y                                               0314
         C     @14,@CF00034                                        0314
         BNH   @DL00312                                            0314
*        FRAMENUM = ZEROS;                                 /*@G51DGBB*/
         L     @14,FRAMEPTR(,R2)                                   0315
         SLR   @08,@08                                             0315
         ST    @08,FRAMENUM(,@14)                                  0315
*      END;                                                /*@G51DGBB*/
*  ELSE  /*UNSUCCESSFULL GETMAIN                             @G51DGBB*/
*    DO;                                                   /*@G51DGBB*/
         B     @RC00309                                            0317
@RF00309 DS    0H                                                  0318
*      R15 = TWELVE;  /*DONT CONTINUE RETURN CODE            @G51DGBB*/
         LA    R15,12                                              0318
*      MSGNO = 40;   /*CORE NOT AVAILABLE MESSAGE            @G51DGBB*/
         MVI   MSGNO,X'28'                                         0319
*      CALL ERRMSG;  /*PRINT ERROR MESSAGE                   @G51DGBB*/
         BAL   @14,ERRMSG                                          0320
*    END;                                                  /*@G51DGBB*/
* END; /*END OF FRAMETAB GETMAIN                             @G51DGBB*/
@RC00309 DS    0H                                                  0323
*  ERROR = R15; /*COMMUNICATE ERROR CONDITIONS TO CALLING PROC*/   0323
@RF00302 ST    R15,ERROR                                           0323
*RESPECIFY(R0,R15) UNRESTRICTED;                           /*@Z427VLS*/
*END; /*END OF PROC INITAB                                   @Z427VLS*/
@EL00002 DS    0H                                                  0325
@EF00002 DS    0H                                                  0325
@ER00002 LM    @14,@12,@SA00002                                    0325
         BR    @14                                                 0325
*CONVERT: PROC;                                            /*@Z427VLS*/
CONVERT  STM   @14,@12,12(@13)                                     0326
*   RESPECIFY (R4,R5) RESTRICTED;                          /*@0099VLS*/
* DCL  T      FIXED(31) INIT(0);                           /*@Z427VLS*/
*DCL P    FIXED(31) INIT(0);                               /*@G51DGBB*/
*DCL Q    FIXED(31) INIT(0);                               /*@G51DGBB*/
* DCL  NUMBER FIXED(31) INIT(0);                           /*@Z427VLS*/
* DCL  NEXTBYTE(1) CHAR(1) BASED(NEXTBY);                  /*@Z427VLS*/
* DCL  ADDNUM(1)   CHAR(1) BASED(ADDNXT);                  /*@Z427VLS*/
* DCL  CHARS       CHAR(16) INIT('0123456789ABCDEF');      /*@Z427VLS*/
* DCL  NEXTBY FIXED(31) INIT(0);                           /*@Z427VLS*/
* DCL  ADDNXT FIXED(31) INIT(0);                           /*@Z427VLS*/
*DO Q = NUMBER BY -1 TO 1;                                 /*@G51DGBB*/
         L     @08,NUMBER                                          0337
         ST    @08,Q                                               0337
         B     @DE00337                                            0337
@DL00337 DS    0H                                                  0338
* R4 = NEXTBYTE(Q);                                        /*@G51DGBB*/
         L     @06,NEXTBY                                          0338
         BCTR  @06,0                                               0338
         SLR   R4,R4                                               0338
         IC    R4,NEXTBYTE(@08,@06)                                0338
* P = 2 * Q;                                               /*@G51DGBB*/
         LR    @06,@08                                             0339
         ALR   @06,@06                                             0339
         ST    @06,P                                               0339
*  SRDL(R4,4);                                             /*@Z427VLS*/
         SRDL  R4,4                                                0340
*  SRL(R5,28);                                             /*@Z427VLS*/
         SRL   R5,28                                               0341
*  R5 = R5 + 1;                                            /*@Z427VLS*/
         LA    @03,1                                               0342
         ALR   R5,@03                                              0342
*  R4 = R4 + 1;                                            /*@Z427VLS*/
         ALR   R4,@03                                              0343
* ADDNUM(P-1) = CHARS(R4);                                 /*@G51DGBB*/
         L     @03,ADDNXT                                          0344
         ALR   @06,@03                                             0344
         BCTR  @06,0                                               0344
         BCTR  @06,0                                               0344
         LA    @15,CHARS-1(R4)                                     0344
         MVC   ADDNUM(1,@06),0(@15)                                0344
* ADDNUM(P) = CHARS(R5);                                   /*@G51DGBB*/
         L     @06,P                                               0345
         ALR   @03,@06                                             0345
         BCTR  @03,0                                               0345
         LA    @06,CHARS-1(R5)                                     0345
         MVC   ADDNUM(1,@03),0(@06)                                0345
* END;                                                     /*@Z427VLS*/
         BCTR  @08,0                                               0346
         ST    @08,Q                                               0346
@DE00337 LTR   @08,@08                                             0346
         BP    @DL00337                                            0346
*END;                                                      /*@Z427VLS*/
@EL00003 DS    0H                                                  0347
@EF00003 DS    0H                                                  0347
@ER00003 LM    @14,@12,12(@13)                                     0347
         BR    @14                                                 0347
*RESPECIFY (R4,R5) UNRESTRICTED;                           /*@Z427VLS*/
*/*******************************************************************/
*/*    THIS PROC WILL SEARCH THE SORT TABLE FOR A ENTRY WITH THE SAME*/
*/*    KEY AS THIS ONE THEN SUM THE PERM AND TEMP ERRORS WITH THIS REC*
*/*    IF NO MATCH CAN BE FOUND THEN CREATE A NEW ONE        @0099VLS*/
*/*                                                          @0099VLS*/
*ADDVALUE: PROC;                                           /*@0099VLS*/
ADDVALUE STM   @14,@12,@SA00004                                    0349
* DCL ZZ PTR(31)  INIT(0);                                 /*@0099VLS*/
* DCL Z1 FIXED(31)  INIT(0);                               /*@0099VLS*/
* DCL Z2 FIXED(31)  INIT(0);                               /*@0099VLS*/
* DCL Z3 FIXED(31)  INIT(0);                               /*@0099VLS*/
*DCL ZZ3 FIXED(31) INIT(0);                                /*@G51DGBB*/
* DCL  1  TMPA  BASED(ZZ),                                         0355
*       2 TMPKEYA  CHAR(7),                                        0355
*       2 TMPPERMA FIXED(15) BDY(BYTE),                            0355
*       2 TMPTEMPA FIXED(31) BDY(BYTE);                    /*@0099VLS*/
* FOUND = NO;        /*SET FLAG TO ASSUME THE WORST          @0099VLS*/
         NI    FOUND,B'01111111'                                   0356
* ZZ3 = ZZ3 + 1;     /*NUMBER OF RECORDS FOR PART 2          @0099VLS*/
         LA    @08,1                                               0357
         AL    @08,ZZ3                                             0357
         ST    @08,ZZ3                                             0357
* DO ZZ = SORTADR + (ENTRIES - 1) * 13 BY -13 TO SORTADR WHILE(    0358
*                                   FOUND = NO);           /*@0099VLS*/
         L     @08,ENTRIES                                         0358
         BCTR  @08,0                                               0358
         MH    @08,@CH00966                                        0358
         AL    @08,SORTADR(,R2)                                    0358
         ST    @08,ZZ                                              0358
         B     @DE00358                                            0358
@DL00358 TM    FOUND,B'10000000'                                   0358
         BNZ   @DC00358                                            0358
*  IF TMPKEYA = SYSUMKEY THEN                                      0359
         CLC   TMPKEYA(7,@08),SYSUMKEY                             0359
         BNE   @RF00359                                            0359
*   DO;                                                    /*@0099VLS*/
*    TMPPERMA = TMPPERMA + SYSPERM1;                       /*@0099VLS*/
         ICM   @06,12,TMPPERMA(@08)                                0361
         SRA   @06,16                                              0361
         ICM   @03,12,SYSPERM1                                     0361
         SRA   @03,16                                              0361
         ALR   @06,@03                                             0361
         STCM  @06,3,TMPPERMA(@08)                                 0361
*    TMPTEMPA = TMPTEMPA + SYSTEMP;                        /*@0099VLS*/
         ICM   @06,15,TMPTEMPA(@08)                                0362
         ICM   @03,15,SYSTEMP                                      0362
         ALR   @06,@03                                             0362
         STCM  @06,15,TMPTEMPA(@08)                                0362
*    FOUND = YES;                                          /*@0099VLS*/
         OI    FOUND,B'10000000'                                   0363
*   END;                                                   /*@0099VLS*/
* END;                                                     /*@0099VLS*/
@RF00359 L     @08,@CF01350                                        0365
         AL    @08,ZZ                                              0365
         ST    @08,ZZ                                              0365
@DE00358 C     @08,SORTADR(,R2)                                    0365
         BNL   @DL00358                                            0365
@DC00358 DS    0H                                                  0366
* IF FOUND = NO THEN                                               0366
         TM    FOUND,B'10000000'                                   0366
         BNZ   @RF00366                                            0366
*  DO;                                                     /*@0099VLS*/
*   TMP2(ENTRIES) = SYSUM2;                                /*@0099VLS*/
         L     @08,ENTRIES                                         0368
         LR    @06,@08                                             0368
         MH    @06,@CH00966                                        0368
         L     @03,SORTADR(,R2)                                    0368
         ALR   @03,@06                                             0368
         AL    @03,@CF01350                                        0368
         MVC   TMP2(13,@03),SYSUM2                                 0368
*   ENTRIES = ENTRIES + 1;                                 /*@0099VLS*/
         AL    @08,@CF00055                                        0369
         ST    @08,ENTRIES                                         0369
*  END;                                                    /*@0099VLS*/
*IF DEBUG50 = ON THEN                                              0371
@RF00366 TM    DEBUG50(R2),B'00100000'                             0371
         BNO   @RF00371                                            0371
* DO;                                                      /*@0099VLS*/
*  NUMBER = 13;                                            /*@0099VLS*/
         MVC   NUMBER(4),@CF00966                                  0373
*  NEXTBY = ADDR(SYSUM2);                                  /*@0099VLS*/
         LA    @08,SYSUM2                                          0374
         ST    @08,NEXTBY                                          0374
*  ADDNXT = ADDR(PRINTBDY);                                /*@0099VLS*/
         LA    @08,PRINTBDY                                        0375
         ST    @08,ADDNXT                                          0375
*  CALL CONVERT;                                           /*@0099VLS*/
         BAL   @14,CONVERT                                         0376
*  IF FOUND = YES THEN                                             0377
         TM    FOUND,B'10000000'                                   0377
         BNO   @RF00377                                            0377
*  DO;                                                     /*@0099VLS*/
*  NEXTBY = ZZ + 13;                                       /*@0099VLS*/
         LA    @08,13                                              0379
         AL    @08,ZZ                                              0379
         ST    @08,NEXTBY                                          0379
*  ADDNXT = ADDR(PRINTBDY) + 40;                           /*@0099VLS*/
         LA    @08,PRINTBDY                                        0380
         AL    @08,@CF01198                                        0380
         ST    @08,ADDNXT                                          0380
*  CALL CONVERT;                                           /*@0099VLS*/
         BAL   @14,CONVERT                                         0381
*  END;                                                    /*@0099VLS*/
*  PRINTADR = ADDR(PRINTLIN);                              /*@0099VLS*/
@RF00377 LA    @08,PRINTLIN                                        0383
         ST    @08,PRINTADR(,R2)                                   0383
*  CALL IOHND(RITEPRTR);                                   /*@0099VLS*/
         L     @15,ADIOHND(,R2)                                    0384
         LA    @01,@AL00384                                        0384
         BALR  @14,@15                                             0384
* END;                                                     /*@0099VLS*/
*SYSUM2  = SYSUM2  && SYSUM2;    /*CLEAR FOR THE NEXT ENTRY  @0099VLS*/
@RF00371 XC    SYSUM2(13),SYSUM2                                   0386
*END;                                                      /*@0099VLS*/
@EL00004 DS    0H                                                  0387
@EF00004 DS    0H                                                  0387
@ER00004 LM    @14,@12,@SA00004                                    0387
         BR    @14                                                 0387
*CUASELCT: PROC;                                           /*@Z427VLS*/
CUASELCT STM   @14,@12,12(@13)                                     0388
*CUAOK = NO;                                               /*@Z427VLS*/
         NI    CUAOK,B'10111111'                                   0389
*DO Z = 1 BY 1 TO CUANUM WHILE(CUAOK = NO);                /*@Z427VLS*/
         LA    @08,1                                               0390
         ST    @08,Z                                               0390
         B     @DE00390                                            0390
@DL00390 TM    CUAOK,B'01000000'                                   0390
         BNZ   @DC00390                                            0390
* IF WORKDEV >= CUA1(Z) & WORKDEV <= CUA2(Z) THEN                  0391
         SLA   @08,2                                               0391
         L     @06,CUAPTR(,R2)                                     0391
         ST    @08,@TF00001                                        0391
         ALR   @08,@06                                             0391
         BCTR  @08,0                                               0391
         BCTR  @08,0                                               0391
         CLC   WORKDEV(2),CUA1-2(@08)                              0391
         BL    @RF00391                                            0391
         AL    @06,@TF00001                                        0391
         CLC   WORKDEV(2),CUA2-4(@06)                              0391
         BH    @RF00391                                            0391
*  CUAOK = YES;                                            /*@Z427VLS*/
         OI    CUAOK,B'01000000'                                   0392
*END;                                                      /*@Z427VLS*/
@RF00391 LA    @08,1                                               0393
         AL    @08,Z                                               0393
         ST    @08,Z                                               0393
@DE00390 L     @06,CUAPTR(,R2)                                     0393
         CH    @08,CUANUM(,@06)                                    0393
         BNH   @DL00390                                            0393
@DC00390 DS    0H                                                  0394
*IF CUAOK = NO THEN                                                0394
         TM    CUAOK,B'01000000'                                   0394
         BNZ   @RF00394                                            0394
* PASSFLAG = NO;                                           /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0395
*END;                                                      /*@Z427VLS*/
@EL00005 DS    0H                                                  0396
@EF00005 DS    0H                                                  0396
@ER00005 LM    @14,@12,12(@13)                                     0396
         BR    @14                                                 0396
*DEVSEL: PROC;                                             /*@Z427VLS*/
DEVSEL   STM   @14,@12,12(@13)                                     0397
*IF WORKTYPE = HEX90 THEN                                          0398
         CLI   WORKTYPE,X'90'                                      0398
         BNE   @RF00398                                            0398
*  DO;                                                     /*@Z427VLS*/
*    IF DEVEXCL = ON THEN                                          0400
         TM    DEVEXCL(R2),B'00100000'                             0400
         BNO   @RF00400                                            0400
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0402
*        DO Z = 1 BY 1 TO MDRNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               0403
         ST    @08,Z                                               0403
         B     @DE00403                                            0403
@DL00403 TM    DEVOK,B'01000000'                                   0403
         BNO   @DC00403                                            0403
*        IF TPRDEV = MDRVAL(Z) THEN                                0404
         L     @06,DEVPTR(,R2)                                     0404
         ALR   @06,@08                                             0404
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          0404
         BNE   @RF00404                                            0404
*          DO;                                             /*@Z427VLS*/
*            DEVOK = NO;                                   /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0406
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0407
*          END;                                            /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF00404 LA    @08,1                                               0409
         AL    @08,Z                                               0409
         ST    @08,Z                                               0409
@DE00403 L     @06,DEVPTR(,R2)                                     0409
         CH    @08,MDRNUM(,@06)                                    0409
         BNH   @DL00403                                            0409
@DC00403 DS    0H                                                  0410
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0411
*      DO;                                                 /*@Z427VLS*/
         B     @RC00400                                            0411
@RF00400 DS    0H                                                  0412
*        DEVOK = NO;                                       /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0412
*        DO Z = 1 BY 1 TO MDRNUM WHILE DEVOK = NO;         /*@Z427VLS*/
         LA    @08,1                                               0413
         ST    @08,Z                                               0413
         B     @DE00413                                            0413
@DL00413 TM    DEVOK,B'01000000'                                   0413
         BNZ   @DC00413                                            0413
*        IF TPRDEV = MDRVAL(Z) THEN                                0414
         L     @06,DEVPTR(,R2)                                     0414
         ALR   @06,@08                                             0414
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          0414
         BNE   @RF00414                                            0414
*          DEVOK = YES;                                    /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0415
*        END;                                              /*@Z427VLS*/
@RF00414 LA    @08,1                                               0416
         AL    @08,Z                                               0416
         ST    @08,Z                                               0416
@DE00413 L     @06,DEVPTR(,R2)                                     0416
         CH    @08,MDRNUM(,@06)                                    0416
         BNH   @DL00413                                            0416
@DC00413 DS    0H                                                  0417
*        IF DEVOK = NO THEN                                        0417
         TM    DEVOK,B'01000000'                                   0417
         BNZ   @RF00417                                            0417
*          PASSFLAG = NO;                                  /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0418
*       END;                                               /*@Z427VLS*/
*    END;                                                  /*@Z427VLS*/
*  ELSE                                                            0421
*    IF DEVEXCL = ON THEN                                          0421
         B     @RC00398                                            0421
@RF00398 TM    DEVEXCL(R2),B'00100000'                             0421
         BNO   @RF00421                                            0421
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0423
*        DO Z = 1 BY 1 TO DEVNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               0424
         ST    @08,Z                                               0424
         B     @DE00424                                            0424
@DL00424 TM    DEVOK,B'01000000'                                   0424
         BNO   @DC00424                                            0424
*          IF WORKDEV = DEVVAL(Z) THEN                             0425
         ALR   @08,@08                                             0425
         L     @06,DEVPTR(,R2)                                     0425
         ALR   @06,@08                                             0425
         CLC   WORKDEV(2),DEVVAL-2(@06)                            0425
         BNE   @RF00425                                            0425
*            DO;                                           /*@Z427VLS*/
*              DEVOK = NO;                                 /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0427
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0428
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF00425 LA    @08,1                                               0430
         AL    @08,Z                                               0430
         ST    @08,Z                                               0430
@DE00424 L     @06,DEVPTR(,R2)                                     0430
         CH    @08,DEVNUM(,@06)                                    0430
         BNH   @DL00424                                            0430
@DC00424 DS    0H                                                  0431
*      END;                                                /*@Z427VLS*/
*  ELSE                                                            0432
*   DO;                                                    /*@Z427VLS*/
         B     @RC00421                                            0432
@RF00421 DS    0H                                                  0433
*     DEVOK = NO;                                          /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0433
*     DO Z =  1 BY 1 TO DEVNUM WHILE DEVOK = NO;           /*@Z427VLS*/
         LA    @08,1                                               0434
         ST    @08,Z                                               0434
         B     @DE00434                                            0434
@DL00434 TM    DEVOK,B'01000000'                                   0434
         BNZ   @DC00434                                            0434
*       IF WORKDEV = DEVVAL(Z) THEN                                0435
         ALR   @08,@08                                             0435
         L     @06,DEVPTR(,R2)                                     0435
         ALR   @06,@08                                             0435
         CLC   WORKDEV(2),DEVVAL-2(@06)                            0435
         BNE   @RF00435                                            0435
*         DEVOK = YES;                                     /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0436
*     END;                                                 /*@Z427VLS*/
@RF00435 LA    @08,1                                               0437
         AL    @08,Z                                               0437
         ST    @08,Z                                               0437
@DE00434 L     @06,DEVPTR(,R2)                                     0437
         CH    @08,DEVNUM(,@06)                                    0437
         BNH   @DL00434                                            0437
@DC00434 DS    0H                                                  0438
*     IF DEVOK = NO THEN                                           0438
         TM    DEVOK,B'01000000'                                   0438
         BNZ   @RF00438                                            0438
*       PASSFLAG = OFF;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0439
*   END;                                                   /*@Z427VLS*/
*END;                                                      /*@Z427VLS*/
@EL00006 DS    0H                                                  0441
@EF00006 DS    0H                                                  0441
@ER00006 LM    @14,@12,12(@13)                                     0441
         BR    @14                                                 0441
*SUMONADR: PROC;                                           /*@Z427VLS*/
SUMONADR STM   @14,@12,@SA00007                                    0442
*RESPECIFY(R3,R15) RESTRICTED;                             /*@Z427VLS*/
*/*ADDRESS THE SYSUMONE ENTRY THAT RELATES TO THE RECORD CPU @Z427VLS*/
*/*SERIAL NUMBER. IF THE ENTRY DOES NOT EXIST, CREATE IT AND @Z427VLS*/
*/*ADDRESS IT. SYSUMONE ENTRY NUMBER IS EQUAL TO EVTABLE     @Z427VLS*/
*/*ENTRY NUMBER AT THIS STAGE OF IFCFILT2 EXECUTION. IF MORE @Z427VLS*/
*/*THAN 16 CPUS ARE IDENTIFIED, AN ERROR MESSAGE IS ISSUED   @Z427VLS*/
*/*THE FIRST TIME, AND THE RECORDS FOR THE EXCESS CPUS ARE   @Z427VLS*/
*/*SUMMED INTO THE 16TH CPU BUCKET BEFORE THE BUCKETS ARE IN @Z427VLS*/
*/*CPU SERIAL ORDER.                                         @Z427VLS*/
*    SYSUMPTR = SAVEADR(1); /*ADDRESS 1ST ENTRY IN SYSUMONE CHAIN*/
         L     @14,SAVEADR                                         0444
         ST    @14,SYSUMPTR(,R2)                                   0444
*                           /*MAY BE ZERO IF NO ENTRIES EXIST*/    0445
*    GETOUT = NO;                                          /*@Z427VLS*/
         NI    GETOUT,B'11110111'                                  0445
*    DO K = 1 BY 1 TO EVMAX WHILE GETOUT = NO;             /*@Z427VLS*/
         LA    @14,1                                               0446
         ST    @14,K                                               0446
@DL00446 TM    GETOUT,B'00001000'                                  0446
         BNZ   @DC00446                                            0446
*      IF EVSERIAL(K) = LRTCPUS THEN                               0447
         MH    @14,@CH00081                                        0447
         L     @08,EVPTR(,R2)                                      0447
         ST    @14,@TF00001                                        0447
         ALR   @14,@08                                             0447
         CLC   EVSERIAL-6(3,@14),LRTCPUS(R7)                       0447
         BNE   @RF00447                                            0447
*        DO;                                               /*@Z427VLS*/
*          EVMODEL(K) = LRTMODEL; /*SET IN CASE THIS ENTRY CREATED*/
         AL    @08,@TF00001                                        0449
         MVC   EVMODEL-6(2,@08),LRTMODEL(R7)                       0449
*          GETOUT = YES;          /*FROM EVTABLE ENTRY WHICH IS   */
         OI    GETOUT,B'00001000'                                  0450
*        END;                     /*MISSING MODEL NUMBER     @Z427VLS*/
*      ELSE                                                        0452
*        DO;                                               /*@Z427VLS*/
         B     @RC00447                                            0452
@RF00447 DS    0H                                                  0453
*          IF SYSUMNXT ^= ZERO & SYSUMPTR ^= ZERO THEN /*IF ANOTHER*/
         SLR   @14,@14                                             0453
         L     @08,SYSUMPTR(,R2)                                   0453
         L     @06,SYSUMNXT(,@08)                                  0453
         CR    @06,@14                                             0453
         BE    @RF00453                                            0453
         CR    @08,@14                                             0453
         BE    @RF00453                                            0453
*          /*ENTRY OF SYSUMONE AND ANOTHER ENTRY OF EVTABLE EXIST.*/
*          /*ALSO, IF AN ENTRY OF SYSUMONE HAS BEE N CREATED @Z427VLS*/
*                  SYSUMPTR = SYSUMNXT; /*RESET BASE TO NEXT ENTRY*/
         ST    @06,SYSUMPTR(,R2)                                   0454
*          ELSE /*IMPLIES WE HAVE SCANNED ALL EV ENTRIES WITH NO MATCH*
*            DO;                                           /*@Z427VLS*/
         B     @RC00453                                            0455
@RF00453 DS    0H                                                  0456
*              GETOUT = YES; /*EXIT LOOP IF CREATE AN ENTRY  @Z427VLS*/
         OI    GETOUT,B'00001000'                                  0456
*              IF K < EVMAX × /*IF ROOM TO CREATE EXTRA ENTRY*/    0457
*                 (K = EVMAX & EVSERIAL(K) = ZERO) THEN /*IF LAST */
         L     @14,K                                               0457
         LA    @08,10                                              0457
         CR    @14,@08                                             0457
         BL    @RT00457                                            0457
         CR    @14,@08                                             0457
         BNE   @RF00457                                            0457
         MH    @14,@CH00081                                        0457
         L     @08,EVPTR(,R2)                                      0457
         L     @14,EVSERIAL-7(@14,@08)                             0457
         LA    @14,0(,@14)                                         0457
         LTR   @14,@14                                             0457
         BNZ   @RF00457                                            0457
@RT00457 DS    0H                                                  0458
*                 /*ENTRY BUT IT REMAINS UNSET THEN          @Z427VLS*/
*                DO;                                       /*@Z427VLS*/
*                  L = EVNUM + 1; /*BUILD NEXT EVTABLE ENTRY @Z427VLS*/
         L     @14,EVPTR(,R2)                                      0459
         LA    @08,1                                               0459
         AH    @08,EVNUM(,@14)                                     0459
         ST    @08,L                                               0459
*                  R3 = SUMSIZE1; /*LENGTH OF SYSUMONE TABLE IN BYTES*/
         LA    R3,104                                              0460
*                  GEN(GETMAIN EC,LV=(R3),A=COMPLINK); /*GET CORE FOR*/
         GETMAIN EC,LV=(R3),A=COMPLINK
*                                           /*NEW SYSUMONE ENTRY*/ 0462
*                  IF R15 = SUCCESS THEN /*IF GOOD GETMAIN   @Z427VLS*/
         SLR   @14,@14                                             0462
         CR    R15,@14                                             0462
         BNE   @RF00462                                            0462
*                  DO;                                     /*@Z427VLS*/
*                  IF EVNUM > ZERO THEN /*DONT SET PTR IF ONLY ENTRY*/
         L     @08,EVPTR(,R2)                                      0464
         CH    @14,EVNUM(,@08)                                     0464
         BNL   @RF00464                                            0464
*                    SYSUMNXT = COMPLINK; /*SET PTR IN OLD ENT TO NEW*/
         L     @14,SYSUMPTR(,R2)                                   0465
         L     @08,COMPLINK                                        0465
         ST    @08,SYSUMNXT(,@14)                                  0465
*                  SYSUMPTR = COMPLINK; /*ADDRESS NEW ENTRY OF SYSUMON*
@RF00464 L     @14,COMPLINK                                        0466
         ST    @14,SYSUMPTR(,R2)                                   0466
*                  SYSUMONE = (SYSUMONE && SYSUMONE); /*CLEAR ENTRY*/
         XC    SYSUMONE(100,@14),SYSUMONE(@14)                     0467
*                  EVMODEL(L) = LRTMODEL; /*SET NEW EVTABLE ENTRY FOR*/
         L     @14,L                                               0468
         LR    @08,@14                                             0468
         MH    @08,@CH00081                                        0468
         L     @06,EVPTR(,R2)                                      0468
         ST    @08,@TF00001                                        0468
         ALR   @08,@06                                             0468
         MVC   EVMODEL-6(2,@08),LRTMODEL(R7)                       0468
*                  EVSERIAL(L) = LRTCPUS; /*CPU IDENTIFIED AS UNIQUE*/
         LR    @08,@06                                             0469
         AL    @08,@TF00001                                        0469
         MVC   EVSERIAL-6(3,@08),LRTCPUS(R7)                       0469
*                  SAVEADR(L) = SYSUMPTR; /*SAVE ADDRESS FOR SORTING*/
         SLA   @14,2                                               0470
         L     @08,SYSUMPTR(,R2)                                   0470
         ST    @08,SAVEADR-4(@14)                                  0470
*                  EVNUM = EVNUM + 1; /*ADD 1 TO NUMBER OF ENTRIES*/
         LA    @14,1                                               0471
         AH    @14,EVNUM(,@06)                                     0471
         STH   @14,EVNUM(,@06)                                     0471
*                  END;                                    /*@Z427VLS*/
*                  ELSE  /*IF UNSUCCESSFUL GETMAIN THEN      @Z427VLS*/
*                    DO;                                   /*@Z427VLS*/
         B     @RC00462                                            0473
@RF00462 DS    0H                                                  0474
*                      MSGNO = 1; /*REPORT LACK OF CORE FOR SYSTB*/
         MVI   MSGNO,X'01'                                         0474
*                      CALL ERRMSG;                        /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0475
*                      R15 = NOSRTABL;                     /*@0001VLS*/
         LA    R15,12                                              0476
*                      GETFAIL = YES;                      /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0477
*                    END;                                  /*@Z427VLS*/
*                END;                                      /*@Z427VLS*/
*              ELSE  /*HERE WE HAVE NEW CPU WITH NO ROOM IN EVTABLE*/
*                DO;                                       /*@Z427VLS*/
         B     @RC00457                                            0480
@RF00457 DS    0H                                                  0481
*                  BUG(13) = BUG(13) + 1; /*COUNT NMBER OF TIMES*/ 0481
         LA    @14,1                                               0481
         AL    @14,BUG+48                                          0481
         ST    @14,BUG+48                                          0481
*                  IF FIRSTIME = OFF   THEN /*PRINT ERROR MESSAGE ONLY*
         TM    FIRSTIME,B'00000100'                                0482
         BNZ   @RF00482                                            0482
*                    DO;                    /*FOR FIRST EXCESS CPU*/
*                      MSGNO = 6;                          /*@Z427VLS*/
         MVI   MSGNO,X'06'                                         0484
*                      CALL ERRMSG;                        /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0485
*                      EVSERIAL(K) = 'FFFFFF'X;            /*@Z427VLS*/
         L     @14,K                                               0486
         MH    @14,@CH00081                                        0486
         L     @08,EVPTR(,R2)                                      0486
         ST    @14,@TF00001                                        0486
         ALR   @14,@08                                             0486
         MVC   EVSERIAL-6(3,@14),@CB00237                          0486
*                      EVMODEL(K) = 'FFFF'X;               /*@Z427VLS*/
         AL    @08,@TF00001                                        0487
         MVC   EVMODEL-6(2,@08),@CB00261                           0487
*                      FIRSTIME = ON;       /*NEVER TO RETURN*/    0488
         OI    FIRSTIME,B'00000100'                                0488
*                    END;                                  /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
@RF00482 DS    0H                                                  0491
*               END;                                       /*@Z427VLS*/
@RC00457 DS    0H                                                  0492
*             END;                                         /*@Z427VLS*/
@RC00453 DS    0H                                                  0493
*         END;                                             /*@Z427VLS*/
@RC00447 LA    @14,1                                               0493
         AL    @14,K                                               0493
         ST    @14,K                                               0493
         C     @14,@CF00034                                        0493
         BNH   @DL00446                                            0493
@DC00446 DS    0H                                                  0494
* ERROR = R15; /*COMMUNICATE BAD TIDINGS TO CALLING PROC     @Z427VLS*/
         ST    R15,ERROR                                           0494
*RESPECIFY(R3,R15) UNRESTRICTED;                           /*@Z427VLS*/
* END; /*CLOSING END FOR SUMONADR                            @Z427VLS*/
@EL00007 DS    0H                                                  0496
@EF00007 DS    0H                                                  0496
@ER00007 LM    @14,@12,@SA00007                                    0496
         BR    @14                                                 0496
*SORTONE: PROC; /*SORT EVTABLE IN DESCENDING ORDER BY MODEL, SERIAL*/
SORTONE  STM   @14,@12,@SA00008                                    0497
*               /*NUMBER FOR UNSHARED CPUS AND RELINK THE NEXT     */
*               /*ENTRY POINTERS FOR TABLE SYSUMONE.         @Z427VLS*/
*               /*SET EVLETTER FOR UNSHARED CPUS             @Z427VLS*/
*IF NUMUNSHR < EVNUM THEN  /*IF TWO OR MORE CPUS IDENTIFIED AND    */
         LH    @08,NUMUNSHR                                        0498
         L     @06,EVPTR(,R2)                                      0498
         CH    @08,EVNUM(,@06)                                     0498
         BNL   @RF00498                                            0498
*                          /*NOT IN SHARE TABLE THEN SORT.   @Z427VLS*/
*    DO J = NUMUNSHR BY 1 TO EVNUM - 1; /*SORT IN DESCENDING ORDER */
         ST    @08,J                                               0499
         B     @DE00499                                            0499
@DL00499 DS    0H                                                  0500
*      DO K = J+1 BY 1 TO EVNUM;                           /*@Z427VLS*/
         AL    @08,@CF00055                                        0500
         ST    @08,K                                               0500
         B     @DE00500                                            0500
@DL00500 DS    0H                                                  0501
*        IF EVKEY(J) < EVKEY(K) THEN                               0501
         L     @06,J                                               0501
         LA    @03,6                                               0501
         LR    @05,@06                                             0501
         MR    @04,@03                                             0501
         L     @04,EVPTR(,R2)                                      0501
         LR    @15,@03                                             0501
         MR    @14,@08                                             0501
         ST    @05,@TF00001                                        0501
         ALR   @05,@04                                             0501
         ST    @15,@TF00002                                        0501
         ALR   @15,@04                                             0501
         CLC   EVKEY-6(6,@05),EVKEY-6(@15)                         0501
         BNL   @RF00501                                            0501
*          DO;                                             /*@Z427VLS*/
*            EVKEY(J) = (EVKEY(J)   &&   EVKEY(K));        /*@Z427VLS*/
         LR    @03,@04                                             0503
         AL    @03,@TF00001                                        0503
         LR    @05,@04                                             0503
         AL    @05,@TF00001                                        0503
         MVC   @TS00001(6),EVKEY-6(@05)                            0503
         LR    @05,@04                                             0503
         AL    @05,@TF00002                                        0503
         XC    @TS00001(6),EVKEY-6(@05)                            0503
         MVC   EVKEY-6(6,@03),@TS00001                             0503
*            EVKEY(K) = (EVKEY(K)   &&   EVKEY(J));        /*@Z427VLS*/
         LR    @03,@04                                             0504
         AL    @03,@TF00002                                        0504
         LR    @05,@04                                             0504
         AL    @05,@TF00002                                        0504
         MVC   @TS00001(6),EVKEY-6(@05)                            0504
         LR    @05,@04                                             0504
         AL    @05,@TF00001                                        0504
         XC    @TS00001(6),EVKEY-6(@05)                            0504
         MVC   EVKEY-6(6,@03),@TS00001                             0504
*            EVKEY(J) = (EVKEY(J)   &&   EVKEY(K));        /*@Z427VLS*/
         LR    @03,@04                                             0505
         AL    @03,@TF00001                                        0505
         LR    @05,@04                                             0505
         AL    @05,@TF00001                                        0505
         MVC   @TS00001(6),EVKEY-6(@05)                            0505
         AL    @04,@TF00002                                        0505
         XC    @TS00001(6),EVKEY-6(@04)                            0505
         MVC   EVKEY-6(6,@03),@TS00001                             0505
*            SAVEADR(J) = (SAVEADR(J)  &&  SAVEADR(K));    /*@Z427VLS*/
         LR    @03,@06                                             0506
         SLA   @03,2                                               0506
         LR    @15,@08                                             0506
         SLA   @15,2                                               0506
         L     @00,SAVEADR-4(@03)                                  0506
         X     @00,SAVEADR-4(@15)                                  0506
         ST    @00,SAVEADR-4(@03)                                  0506
*            SAVEADR(K) = (SAVEADR(K)  &&  SAVEADR(J));    /*@Z427VLS*/
         X     @00,SAVEADR-4(@15)                                  0507
         ST    @00,SAVEADR-4(@15)                                  0507
*            SAVEADR(J) = (SAVEADR(J)  &&  SAVEADR(K));    /*@Z427VLS*/
         X     @00,SAVEADR-4(@03)                                  0508
         ST    @00,SAVEADR-4(@03)                                  0508
*            /*MUST NOW SHOW HOW EVTABLE HAS BEEN SORTED IN ORDER TO*/
*            /*ADJUST ENTRY POINTERS TO EVTABLE IN TABLE SYSUM2*/  0509
*            FLIP(J) = (FLIP(J) && FLIP(K));               /*@Z427VLS*/
         SLR   @15,@15                                             0509
         IC    @15,FLIP-1(@06)                                     0509
         SLR   @14,@14                                             0509
         IC    @14,FLIP-1(@08)                                     0509
         XR    @15,@14                                             0509
         STC   @15,FLIP-1(@06)                                     0509
*            FLIP(K) = (FLIP(K) && FLIP(J));               /*@Z427VLS*/
         SLR   @14,@14                                             0510
         IC    @14,FLIP-1(@08)                                     0510
         XR    @15,@14                                             0510
         STC   @15,FLIP-1(@08)                                     0510
*            FLIP(J) = (FLIP(J) && FLIP(K));               /*@Z427VLS*/
         SLR   @08,@08                                             0511
         IC    @08,FLIP-1(@06)                                     0511
         XR    @15,@08                                             0511
         STC   @15,FLIP-1(@06)                                     0511
*            IF J > 1 THEN                                         0512
         C     @06,@CF00055                                        0512
         BNH   @RF00512                                            0512
*             DO;                                          /*@Z427VLS*/
*               SYSUMPTR = SAVEADR(J-1);                   /*@Z427VLS*/
         L     @08,SAVEADR-8(@03)                                  0514
         ST    @08,SYSUMPTR(,R2)                                   0514
*               SYSUMNXT = SAVEADR(J);                     /*@Z427VLS*/
         ST    @00,SYSUMNXT(,@08)                                  0515
*             END;                                         /*@Z427VLS*/
*            SYSUMPTR = SAVEADR(J);                        /*@Z427VLS*/
@RF00512 L     @08,J                                               0517
         SLA   @08,2                                               0517
         L     @06,SAVEADR-4(@08)                                  0517
         ST    @06,SYSUMPTR(,R2)                                   0517
*            SYSUMNXT = SAVEADR(J+1);                      /*@Z427VLS*/
         L     @08,SAVEADR(@08)                                    0518
         ST    @08,SYSUMNXT(,@06)                                  0518
*            SYSUMPTR = SAVEADR(K-1);                      /*@Z427VLS*/
         L     @08,K                                               0519
         LR    @06,@08                                             0519
         SLA   @06,2                                               0519
         L     @03,SAVEADR-8(@06)                                  0519
         ST    @03,SYSUMPTR(,R2)                                   0519
*            SYSUMNXT = SAVEADR(K);                        /*@Z427VLS*/
         L     @15,SAVEADR-4(@06)                                  0520
         ST    @15,SYSUMNXT(,@03)                                  0520
*            IF K < EVNUM THEN                                     0521
         L     @03,EVPTR(,R2)                                      0521
         CH    @08,EVNUM(,@03)                                     0521
         BNL   @RF00521                                            0521
*              DO;                                         /*@Z427VLS*/
*                SYSUMPTR = SAVEADR(K);                    /*@Z427VLS*/
         ST    @15,SYSUMPTR(,R2)                                   0523
*                SYSUMNXT = SAVEADR(K+1);                  /*@Z427VLS*/
         L     @08,SAVEADR(@06)                                    0524
         ST    @08,SYSUMNXT(,@15)                                  0524
*              END;                                        /*@Z427VLS*/
*            IF K = EVNUM THEN /*DONT RESET LAST ENTRY FORWARD PTR*/
@RF00521 L     @08,K                                               0526
         L     @06,EVPTR(,R2)                                      0526
         CH    @08,EVNUM(,@06)                                     0526
         BNE   @RF00526                                            0526
*              DO;                                         /*@Z427VLS*/
*                SYSUMPTR = SAVEADR(K);                    /*@Z427VLS*/
         SLA   @08,2                                               0528
         L     @08,SAVEADR-4(@08)                                  0528
         ST    @08,SYSUMPTR(,R2)                                   0528
*                SYSUMNXT = 0; /*LAST ENTRY CANT POINT TO ANOTHER*/
         SLR   @06,@06                                             0529
         ST    @06,SYSUMNXT(,@08)                                  0529
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00526 DS    0H                                                  0532
*        END;                                              /*@Z427VLS*/
@RF00501 LA    @08,1                                               0532
         AL    @08,K                                               0532
         ST    @08,K                                               0532
@DE00500 L     @06,EVPTR(,R2)                                      0532
         CH    @08,EVNUM(,@06)                                     0532
         BNH   @DL00500                                            0532
*     END;                                                 /*@Z427VLS*/
         LA    @08,1                                               0533
         AL    @08,J                                               0533
         ST    @08,J                                               0533
@DE00499 L     @06,EVPTR(,R2)                                      0533
         LH    @06,EVNUM(,@06)                                     0533
         BCTR  @06,0                                               0533
         CR    @08,@06                                             0533
         BNH   @DL00499                                            0533
* CALL SUMTHEM; /*ADD TO SUMMARY COLUMN OF SYSUMONE          @Z427VLS*/
@RF00498 BAL   @14,SUMTHEM                                         0534
*END; /*CLOSING END TO PROC SORTONE                          @Z427VLS*/
@EL00008 DS    0H                                                  0535
@EF00008 DS    0H                                                  0535
@ER00008 LM    @14,@12,@SA00008                                    0535
         BR    @14                                                 0535
*SUMTHEM: PROC; /*SET SUMMARY COLUMN OF SYSUMONE AND LINK IT AS THE*/
SUMTHEM  STM   @14,@12,12(@13)                                     0536
*               /*FIRST ENTRY OF THE TABLE. SET EVLETTER FOR THOSE*/
*               /*ENTRIES IN WHICH IT IS UNSET               @Z427VLS*/
*IF NUMUNSHR < EVNUM + 1 THEN  /*IF SOME EVLETTERS REMAIN UNSET*/  0537
         LH    @08,NUMUNSHR                                        0537
         L     @06,EVPTR(,R2)                                      0537
         LA    @03,1                                               0537
         AH    @03,EVNUM(,@06)                                     0537
         CR    @08,@03                                             0537
         BNL   @RF00537                                            0537
*  DO J = NUMUNSHR BY 1 TO EVNUM;                          /*@Z427VLS*/
         ST    @08,J                                               0538
         B     @DE00538                                            0538
@DL00538 DS    0H                                                  0539
*    EVLETTER(J) = EVCON(J); /*GET APPROPRIATE NEXT CONSECUTIVE LETTR*/
         LR    @06,@08                                             0539
         MH    @06,@CH00081                                        0539
         L     @03,EVPTR(,R2)                                      0539
         ALR   @03,@06                                             0539
         LA    @06,EVCON-1(@08)                                    0539
         MVC   EVLETTER-6(1,@03),0(@06)                            0539
*  END;                                                    /*@Z427VLS*/
         AL    @08,@CF00055                                        0540
         ST    @08,J                                               0540
@DE00538 L     @06,EVPTR(,R2)                                      0540
         CH    @08,EVNUM(,@06)                                     0540
         BNH   @DL00538                                            0540
*/* ADD ALL CPU ENTRIES TO THE SUMMARY COLUMN ENTRY          @Z427VLS*/
*  SYSUMPTR = SAVEADR(1); /*ADDRESS 1ST SYSUMONE ENTRY       @Z427VLS*/
@RF00537 L     @08,SAVEADR                                         0541
         ST    @08,SYSUMPTR(,R2)                                   0541
*DO J = 1 BY 1 TO EVNUM;                                   /*@Z427VLS*/
         LA    @08,1                                               0542
         ST    @08,J                                               0542
         B     @DE00542                                            0542
@DL00542 DS    0H                                                  0543
*  SYSUMNUM = EVNUM + 1; /*NUMBER OF ENTRIES INTO PARTICULAR ENTRY*/
         L     @08,SYSUMPTR(,R2)                                   0543
         LA    @06,1                                               0543
         L     @03,EVPTR(,R2)                                      0543
         LH    @03,EVNUM(,@03)                                     0543
         ALR   @03,@06                                             0543
         ST    @03,SYSUMNUM(,@08)                                  0543
*  STSUMIPL = STSUMIPL + SYSUMIPL; /*ADD IPL COUNTER         @Z427VLS*/
         L     @03,STSUMPTR                                        0544
         L     @00,STSUMIPL(,@03)                                  0544
         AL    @00,SYSUMIPL(,@08)                                  0544
         ST    @00,STSUMIPL(,@03)                                  0544
*  STSUMMCR = STSUMMCR + SYSUMMCR; /*ADD MCH RECOVERABLE COUNTER*/ 0545
         L     @00,STSUMMCR(,@03)                                  0545
         AL    @00,SYSUMMCR(,@08)                                  0545
         ST    @00,STSUMMCR(,@03)                                  0545
*  STSUMMCN = STSUMMCN + SYSUMMCN; /*ADD MCH NON-RECOVERABLE COUNTER*/
         L     @00,STSUMMCN(,@03)                                  0546
         AL    @00,SYSUMMCN(,@08)                                  0546
         ST    @00,STSUMMCN(,@03)                                  0546
*  STSUMPEI = STSUMPEI + SYSUMPEI; /*ADD PGM INTERRUPT COUNTER*/   0547
         L     @00,STSUMPEI(,@03)                                  0547
         AL    @00,SYSUMPEI(,@08)                                  0547
         ST    @00,STSUMPEI(,@03)                                  0547
*  STSUMPEA = STSUMPEA + SYSUMPEA; /*ADD PGM ABEND COUNTER   @Z427VLS*/
         L     @00,STSUMPEA(,@03)                                  0548
         AL    @00,SYSUMPEA(,@08)                                  0548
         ST    @00,STSUMPEA(,@03)                                  0548
*  STSUMPER = STSUMPER + SYSUMPER; /*ADD PGM RESTART COUNTER @Z427VLS*/
         L     @00,STSUMPER(,@03)                                  0549
         AL    @00,SYSUMPER(,@08)                                  0549
         ST    @00,STSUMPER(,@03)                                  0549
*  STSUMEOD = STSUMEOD + SYSUMEOD; /*ADD EOD COUNTER         @Z427VLS*/
         L     @00,STSUMEOD(,@03)                                  0550
         AL    @00,SYSUMEOD(,@08)                                  0550
         ST    @00,STSUMEOD(,@03)                                  0550
*  DO K = 1 BY 1 TO 16; /*LOOP THROUGH ALL POSSIBLE CHANNELS @Z427VLS*/
         ST    @06,K                                               0551
@DL00551 DS    0H                                                  0552
*    STSUMCH(K) = STSUMCH(K) + SYSUMCH(K); /*ADD CHANNEL X TO CTR*/
         L     @08,STSUMPTR                                        0552
         LR    @03,@06                                             0552
         SLA   @03,2                                               0552
         L     @15,SYSUMPTR(,R2)                                   0552
         L     @00,STSUMCH-4(@03,@08)                              0552
         AL    @00,SYSUMCH-4(@03,@15)                              0552
         ST    @00,STSUMCH-4(@03,@08)                              0552
*  END;                                                    /*@Z427VLS*/
         AL    @06,@CF00055                                        0553
         ST    @06,K                                               0553
         C     @06,@CF00088                                        0553
         BNH   @DL00551                                            0553
*  SYSUMPTR = SYSUMNXT; /*UPDATE SYSUMONE ENTRY ADDRESS      @Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0554
         L     @08,SYSUMNXT(,@08)                                  0554
         ST    @08,SYSUMPTR(,R2)                                   0554
*END;                                                      /*@Z427VLS*/
         LA    @08,1                                               0555
         AL    @08,J                                               0555
         ST    @08,J                                               0555
@DE00542 L     @06,EVPTR(,R2)                                      0555
         CH    @08,EVNUM(,@06)                                     0555
         BNH   @DL00542                                            0555
*/* LINK STSUMONE, SUMMARY COLUMN TO THE FIRST ENTRY OF SYSUMONE*/ 0556
*SYSUMPTR = STSUMPTR; /*ADDRESS SUMMARY COLUMN AS FIRST SYSUMONE ENTRY*
         L     @08,STSUMPTR                                        0556
         ST    @08,SYSUMPTR(,R2)                                   0556
*SYSUMNXT = SAVEADR(1); /*POINT TO FIRST CPU ENTRY           @Z427VLS*/
         L     @06,SAVEADR                                         0557
         ST    @06,SYSUMNXT(,@08)                                  0557
*SYSUMNUM = EVNUM + 1; /*NUMBER OF CPUS PLUS SUMMARY COLUMN  @Z427VLS*/
         L     @06,EVPTR(,R2)                                      0558
         LA    @03,1                                               0558
         AH    @03,EVNUM(,@06)                                     0558
         ST    @03,SYSUMNUM(,@08)                                  0558
*END; /*CLOSING END FOR SUMTHEM                              @Z427VLS*/
@EL00009 DS    0H                                                  0559
@EF00009 DS    0H                                                  0559
@ER00009 LM    @14,@12,12(@13)                                     0559
         BR    @14                                                 0559
*SORTSHAR: PROC;        /* SORT SHARE TABLE CPU BY LETTER  @ZA17692 */
SORTSHAR STM   @14,@12,12(@13)                                     0560
*  DO J=1 BY 1 TO SHARENUM-1;                           /* @ZA17692 */
         LA    @08,1                                               0561
         ST    @08,J                                               0561
         B     @DE00561                                            0561
@DL00561 DS    0H                                                  0562
*    DO K= J+1 BY 1 TO SHARENUM;                        /* @ZA17692 */
         AL    @08,@CF00055                                        0562
         ST    @08,K                                               0562
         B     @DE00562                                            0562
@DL00562 DS    0H                                                  0563
*      IF SHARLET(J) > SHARLET(K)  THEN               /* @ZA17692 */
         LA    @06,11                                              0563
         L     @05,J                                               0563
         MR    @04,@06                                             0563
         L     @03,SHAREPTR(,R2)                                   0563
         LR    @15,@08                                             0563
         MR    @14,@06                                             0563
         ST    @05,@TF00001                                        0563
         ALR   @05,@03                                             0563
         ST    @15,@TF00002                                        0563
         ALR   @15,@03                                             0563
         CLC   SHARLET-11(1,@05),SHARLET-11(@15)                   0563
         BNH   @RF00563                                            0563
*        DO;                                            /* @ZA17692 */
*          SHAREIO(J)=(SHAREIO(J)&&SHAREIO(K));         /* @ZA17692 */
         LR    @08,@03                                             0565
         AL    @08,@TF00001                                        0565
         AL    @08,@CF01510                                        0565
         LR    @06,@03                                             0565
         AL    @06,@TF00001                                        0565
         AL    @06,@CF01510                                        0565
         MVC   @TS00001(11),SHAREIO-2(@06)                         0565
         LR    @06,@03                                             0565
         AL    @06,@TF00002                                        0565
         AL    @06,@CF01510                                        0565
         XC    @TS00001(11),SHAREIO-2(@06)                         0565
         MVC   SHAREIO-2(11,@08),@TS00001                          0565
*          SHAREIO(K)=(SHAREIO(K)&&SHAREIO(J));         /* @ZA17692 */
         LR    @08,@03                                             0566
         AL    @08,@TF00002                                        0566
         AL    @08,@CF01510                                        0566
         LR    @06,@03                                             0566
         AL    @06,@TF00002                                        0566
         AL    @06,@CF01510                                        0566
         MVC   @TS00001(11),SHAREIO-2(@06)                         0566
         LR    @06,@03                                             0566
         AL    @06,@TF00001                                        0566
         AL    @06,@CF01510                                        0566
         XC    @TS00001(11),SHAREIO-2(@06)                         0566
         MVC   SHAREIO-2(11,@08),@TS00001                          0566
*          SHAREIO(J)=(SHAREIO(J)&&SHAREIO(K));         /* @ZA17692 */
         LR    @08,@03                                             0567
         AL    @08,@TF00001                                        0567
         AL    @08,@CF01510                                        0567
         LR    @06,@03                                             0567
         AL    @06,@TF00001                                        0567
         AL    @06,@CF01510                                        0567
         MVC   @TS00001(11),SHAREIO-2(@06)                         0567
         AL    @03,@TF00002                                        0567
         AL    @03,@CF01510                                        0567
         XC    @TS00001(11),SHAREIO-2(@03)                         0567
         MVC   SHAREIO-2(11,@08),@TS00001                          0567
*        END;                                           /* @ZA17692 */
*     END;                                              /* @ZA17692 */
@RF00563 LA    @08,1                                               0569
         AL    @08,K                                               0569
         ST    @08,K                                               0569
@DE00562 L     @06,SHAREPTR(,R2)                                   0569
         CH    @08,SHARENUM(,@06)                                  0569
         BNH   @DL00562                                            0569
*  END;                                                 /* @ZA17692 */
         LA    @08,1                                               0570
         AL    @08,J                                               0570
         ST    @08,J                                               0570
@DE00561 L     @06,SHAREPTR(,R2)                                   0570
         LH    @06,SHARENUM(,@06)                                  0570
         BCTR  @06,0                                               0570
         CR    @08,@06                                             0570
         BNH   @DL00561                                            0570
*END;                       /*  CLOSING END FOR SORTSHAR   @ZA17692 */
@EL00010 DS    0H                                                  0571
@EF00010 DS    0H                                                  0571
@ER00010 LM    @14,@12,12(@13)                                     0571
         BR    @14                                                 0571
* RECDEP: PROC; /*IDENTIFY RECORD TYPE AND ACCUMULATE RECORD OR*/  0572
RECDEP   STM   @14,@12,@SA00011                                    0572
*               /*APPROPRIATE ERRORS IN SYSUMONE OR SYSUM2   @Z427VLS*/
* WORKTYPE = (LRTKEY1 & GENREC);                           /*@Z427VLS*/
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0573
         NI    WORKTYPE,X'F0'                                      0573
* IF LRTRUNC = ON × (WORKTYPE < HEX10)                             0574
*                 × (WORKTYPE > HEX90) THEN                        0574
         TM    LRTRUNC(R7),B'00100000'                             0574
         BO    @RT00574                                            0574
         CLI   WORKTYPE,X'10'                                      0574
         BL    @RT00574                                            0574
         CLI   WORKTYPE,X'90'                                      0574
         BNH   @RF00574                                            0574
@RT00574 DS    0H                                                  0575
*   BUG(1) = BUG(1) + 1;                                   /*@Z427VLS*/
         LA    @08,1                                               0575
         AL    @08,BUG                                             0575
         ST    @08,BUG                                             0575
* ELSE                                                             0576
*   DO;                                                    /*@Z427VLS*/
         B     @RC00574                                            0576
@RF00574 DS    0H                                                  0577
*     IF WORKTYPE = HEX30 × WORKTYPE = HEX90 THEN /*OBR OR MDR REC.*/
         CLI   WORKTYPE,X'30'                                      0577
         BE    @RT00577                                            0577
         CLI   WORKTYPE,X'90'                                      0577
         BNE   @RF00577                                            0577
@RT00577 DS    0H                                                  0578
*       CALL CONTERR;                                      /*@Z427VLS*/
         BAL   @14,CONTERR                                         0578
*     ELSE                                                         0579
*       DO;                                                /*@Z427VLS*/
         B     @RC00577                                            0579
@RF00577 DS    0H                                                  0580
*         IF WORKTYPE = HEX40 THEN                                 0580
         CLI   WORKTYPE,X'40'                                      0580
         BNE   @RF00580                                            0580
*           DO;                                            /*@Z427VLS*/
*             CALL SUMONADR;                               /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0582
*             CALL SOFTFILT;                               /*@Z427VLS*/
         BAL   @14,SOFTFILT                                        0583
*           END;                                           /*@Z427VLS*/
*         ELSE                                                     0585
*           DO;                                            /*@Z427VLS*/
         B     @RC00580                                            0585
@RF00580 DS    0H                                                  0586
*             IF WORKTYPE = HEX10 THEN                             0586
         CLI   WORKTYPE,X'10'                                      0586
         BNE   @RF00586                                            0586
*               DO;                                        /*@Z427VLS*/
*                 CALL SUMONADR;                           /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0588
*                 CALL MCHFILT;                            /*@Z427VLS*/
         BAL   @14,MCHFILT                                         0589
*                 BUG(3) = BUG(3) + 1;                     /*@Z427VLS*/
         LA    @08,1                                               0590
         AL    @08,BUG+8                                           0590
         ST    @08,BUG+8                                           0590
*               END;                                       /*@Z427VLS*/
*             ELSE                                                 0592
*               DO;                                        /*@Z427VLS*/
         B     @RC00586                                            0592
@RF00586 DS    0H                                                  0593
*                 IF WORKTYPE = HEX20 THEN                         0593
         CLI   WORKTYPE,X'20'                                      0593
         BNE   @RF00593                                            0593
*                   DO;                                    /*@Z427VLS*/
*                     CALL SUMONADR;                       /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0595
*                     SYSUMCH(WORKCHAN+1) = SYSUMCH(WORKCHAN+1) + 1;
         SLR   @08,@08                                             0596
         IC    @08,WORKCHAN(,R7)                                   0596
         SLA   @08,2                                               0596
         L     @06,SYSUMPTR(,R2)                                   0596
         LA    @03,1                                               0596
         L     @00,SYSUMCH(@08,@06)                                0596
         ALR   @00,@03                                             0596
         ST    @00,SYSUMCH(@08,@06)                                0596
*                     BUG(4) = BUG(4) + 1;                 /*@Z427VLS*/
         L     @08,BUG+12                                          0597
         ALR   @08,@03                                             0597
         ST    @08,BUG+12                                          0597
*                      IF FRAMEPTR ^= ZERO THEN /*IF FRAMETAB ALLOC*/
         L     @08,FRAMEPTR(,R2)                                   0598
         LTR   @08,@08                                             0598
         BZ    @RF00598                                            0598
*                      DO;                                 /*@G51DGBB*/
*                      GETOUT = NO;                        /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  0600
*                      DO A = 1 BY 1 TO MRDNUMBR WHILE GETOUT = NO;
         ST    @03,A                                               0601
         B     @DE00601                                            0601
@DL00601 TM    GETOUT,B'00001000'                                  0601
         BNZ   @DC00601                                            0601
*                      /*LOOP THROUGH LIST OF MERIDIAN-LIKE CPUS*/ 0602
*                      IF MODEL(A) = LRTMODEL THEN /*IF MERID-LIKE */
         ALR   @03,@03                                             0602
         L     @08,MERDCPTR(,R2)                                   0602
         ALR   @08,@03                                             0602
         CLC   MODEL-2(2,@08),LRTMODEL(R7)                         0602
         BNE   @RF00602                                            0602
*                        DO;                               /*@G51DGBB*/
*                          CALL BUILDFTB; /*SEE IF UNIQUE,BUILD IF IS*/
         BAL   @14,BUILDFTB                                        0604
*                          GETOUT = YES;  /*EXIT LOOP        @G51DGBB*/
         OI    GETOUT,B'00001000'                                  0605
*                        END;                              /*@G51DGBB*/
*                      END;                                /*@G51DGBB*/
@RF00602 LA    @03,1                                               0607
         AL    @03,A                                               0607
         ST    @03,A                                               0607
@DE00601 L     @08,MERDCPTR(,R2)                                   0607
         CH    @03,MRDNUMBR(,@08)                                  0607
         BNH   @DL00601                                            0607
@DC00601 DS    0H                                                  0608
*                      END;                                /*@G51DGBB*/
*                   END;                                   /*@Z427VLS*/
*                 ELSE                                             0610
*                   DO;                                    /*@Z427VLS*/
         B     @RC00593                                            0610
@RF00593 DS    0H                                                  0611
*                     IF WORKTYPE = HEX50 THEN                     0611
         CLI   WORKTYPE,X'50'                                      0611
         BNE   @RF00611                                            0611
*                       DO;                                /*@Z427VLS*/
*                         CALL SUMONADR;                   /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0613
*                         SYSUMIPL = SYSUMIPL + 1;         /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0614
         LA    @06,1                                               0614
         L     @03,SYSUMIPL(,@08)                                  0614
         ALR   @03,@06                                             0614
         ST    @03,SYSUMIPL(,@08)                                  0614
*                         BUG(5) = BUG(5) + 1;             /*@Z427VLS*/
         AL    @06,BUG+16                                          0615
         ST    @06,BUG+16                                          0615
*                       END;                               /*@Z427VLS*/
*                     ELSE                                         0617
*                       DO;                                /*@Z427VLS*/
         B     @RC00611                                            0617
@RF00611 DS    0H                                                  0618
*                         IF WORKTYPE = HEX80 THEN                 0618
         CLI   WORKTYPE,X'80'                                      0618
         BNE   @RF00618                                            0618
*                           DO;                            /*@Z427VLS*/
*                             CALL SUMONADR;               /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0620
*                             SYSUMEOD = SYSUMEOD + 1;     /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0621
         LA    @06,1                                               0621
         L     @03,SYSUMEOD(,@08)                                  0621
         ALR   @03,@06                                             0621
         ST    @03,SYSUMEOD(,@08)                                  0621
*                             BUG(6) = BUG(6) + 1;         /*@Z427VLS*/
         AL    @06,BUG+20                                          0622
         ST    @06,BUG+20                                          0622
*                           END;                           /*@Z427VLS*/
*                         ELSE /*VALID RECORD BUT NOT USED   @Z427VLS*/
*                           BUG(8) = BUG(8) + 1;           /*@Z427VLS*/
         B     @RC00618                                            0624
@RF00618 LA    @08,1                                               0624
         AL    @08,BUG+28                                          0624
         ST    @08,BUG+28                                          0624
*                       END;                               /*@Z427VLS*/
*                   END;                                   /*@Z427VLS*/
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
*       END;                                               /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*END; /*CLOSING END FOR RECDEP                               @Z427VLS*/
@EL00011 DS    0H                                                  0631
@EF00011 DS    0H                                                  0631
@ER00011 LM    @14,@12,@SA00011                                    0631
         BR    @14                                                 0631
*CONTERR: PROC; /*DETERMINE IF OBR OR MDR REPRESENTS PERMANENT */  0632
CONTERR  STM   @14,@12,@SA00012                                    0632
*               /*AND/OR TEMPORARY ERRORS. IF YES, SAVE ERROR  */  0633
*               /*COUNTS IN SYSUM2                           @Z427VLS*/
*IF WORKTYPE = HEX30 THEN                                          0633
         CLI   WORKTYPE,X'30'                                      0633
         BNE   @RF00633                                            0633
*  CALL COUNTOBR;                                          /*@Z427VLS*/
         BAL   @14,COUNTOBR                                        0634
*ELSE                                                              0635
*  DO;                                                     /*@Z427VLS*/
         B     @RC00633                                            0635
@RF00633 DS    0H                                                  0636
*    IF LRTKEY1 = HEX91 & (TPRDEV = DV3705 × TPRDEV = DV3705A) THEN
         CLI   LRTKEY1(R7),X'91'                                   0636
         BNE   @RF00636                                            0636
         CLI   TPRDEV(R7),X'05'                                    0636
         BE    @RT00636                                            0636
         CLI   TPRDEV(R7),X'15'                                    0636
         BNE   @RF00636                                            0636
@RT00636 DS    0H                                                  0637
*      CALL CONTMDR;                                       /*@Z427VLS*/
         BAL   @14,CONTMDR                                         0637
*    ELSE /*MDR NOT TYPE 91 AND DEVICE TYPE 3705             @Z427VLS*/
*      DO;                                                 /*@Z427VLS*/
         B     @RC00636                                            0638
@RF00636 DS    0H                                                  0639
*        BUG(23) = BUG(23) + 1;                            /*@Z427VLS*/
         LA    @08,1                                               0639
         AL    @08,BUG+88                                          0639
         ST    @08,BUG+88                                          0639
*        IF TPRDEV = DV3330 ×                                      0640
*           TPRDEV = DV3340 ×                                      0640
*           TPRDEV = DV33302 ×                                     0640
*           TPRDEV = DV3350 THEN                                   0640
         CLI   TPRDEV(R7),X'01'                                    0640
         BE    @RT00640                                            0640
         CLI   TPRDEV(R7),X'09'                                    0640
         BE    @RT00640                                            0640
         CLI   TPRDEV(R7),X'0A'                                    0640
         BE    @RT00640                                            0640
         CLI   TPRDEV(R7),X'11'                                    0640
         BNE   @RF00640                                            0640
@RT00640 DS    0H                                                  0641
*          DO;                                             /*@Z427VLS*/
*            SYSTEMP  = SYSTEMP  /*ADD CORRECTIBLE DATA CHECKS*/   0642
*                       + TPRS1213   /*AND RETRY DATA CHECKS AND*/ 0642
*                       + TPRS1415   /*SEEK CHECKS           @Z427VLS*/
*                       + TPRS19;                          /*@Z427VLS*/
         LA    @08,TPRVOL(,R7)                                     0642
         LA    @06,15                                              0642
         SLR   @03,@03                                             0642
         IC    @03,TPRBUFC(,R7)                                    0642
         NR    @06,@03                                             0642
         ALR   @08,@06                                             0642
         AL    @08,@CF01152                                        0642
         ICM   @06,15,SYSTEMP                                      0642
         SLR   @03,@03                                             0642
         ICM   @03,3,TPRS1213(@08)                                 0642
         ALR   @06,@03                                             0642
         SLR   @03,@03                                             0642
         ICM   @03,3,TPRS1415(@08)                                 0642
         ALR   @06,@03                                             0642
         SLR   @03,@03                                             0642
         IC    @03,TPRS19(,@08)                                    0642
         ALR   @06,@03                                             0642
         STCM  @06,15,SYSTEMP                                      0642
*            IF SYSTEMP  > ZERO THEN                               0643
         SLR   @08,@08                                             0643
         CR    @06,@08                                             0643
         BNH   @RF00643                                            0643
*              DO;                                         /*@Z427VLS*/
*                WORKCUA = (TPRCUA & ONLYCUA2);            /*@Z427VLS*/
         MVC   WORKCUA(2),TPRCUA(R7)                               0645
         NC    WORKCUA(2),@CB00936                                 0645
*                BUG(24) = BUG(24) + 1;                    /*@Z427VLS*/
         LA    @06,1                                               0646
         AL    @06,BUG+92                                          0646
         ST    @06,BUG+92                                          0646
*                IF CUAPTR ^= ZERO THEN                            0647
         C     @08,CUAPTR(,R2)                                     0647
         BE    @RF00647                                            0647
*                 CALL CUASELCT;                           /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0648
*                IF DEVPTR ^= ZERO THEN                            0649
@RF00647 L     @08,DEVPTR(,R2)                                     0649
         LTR   @08,@08                                             0649
         BZ    @RF00649                                            0649
*                 CALL DEVSEL;                             /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0650
*                IF PASSFLAG = YES THEN                            0651
@RF00649 TM    PASSFLAG(R2),B'00000001'                            0651
         BNO   @RF00651                                            0651
*                 DO;                                      /*@Z427VLS*/
*                SYSGROUP  = TWO; /*DASDI DEVICE GROUP     @Z427VLS*/
         MVI   SYSGROUP,X'02'                                      0653
*                SYSRT  = (TPRCUA & ONLYCUA2);           /*@Z427VLS*/
         MVC   SYSRT(2),TPRCUA(R7)                                 0654
         NC    SYSRT(2),@CB00936                                   0654
*                SYSDEV  = '3830'X;                      /*@Z427VLS*/
         MVC   SYSDEV(2),@CB01387                                  0655
*                CALL SETCPU;                              /*@Z427VLS*/
         BAL   @14,SETCPU                                          0656
*                SYSRT  = (SYSRT  & NOU);              /*@Z427VLS*/
         NC    SYSRT(2),@CB00934                                   0657
*                 END;                                     /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
*        ELSE /*NOT 33XX OR OR 3705 VALID MDR                @Z427VLS*/
*          BUG(10) = BUG(10) + 1;                          /*@Z427VLS*/
         B     @RC00640                                            0661
@RF00640 LA    @08,1                                               0661
         AL    @08,BUG+36                                          0661
         ST    @08,BUG+36                                          0661
*       END;                                               /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*END; /*CLOSING END FOR CONTERR                              @Z427VLS*/
@EL00012 DS    0H                                                  0664
@EF00012 DS    0H                                                  0664
@ER00012 LM    @14,@12,@SA00012                                    0664
         BR    @14                                                 0664
*CONTMDR: PROC; /*COUNT TEMPORARY ERRORS AND INDICATE PERMANENT */ 0665
CONTMDR  STM   @14,@12,@SA00013                                    0665
*               /*ERROR IF RECORD REPRESENTS SUCH.           @Z427VLS*/
*BUG(9) = BUG(9) + 1;                                      /*@Z427VLS*/
         LA    @08,1                                               0666
         AL    @08,BUG+32                                          0666
         ST    @08,BUG+32                                          0666
*IF TPRMODE = LINSTAT0 THEN                                        0667
         CLI   TPRMODE(R7),X'00'                                   0667
         BNE   @RF00667                                            0667
*  DO;                                                     /*@Z427VLS*/
*    SYSTEMP  = SYSTEMP  + ERRCT1;                     /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0669
         SLR   @06,@06                                             0669
         IC    @06,ERRCT1(,R7)                                     0669
         ALR   @08,@06                                             0669
         STCM  @08,15,SYSTEMP                                      0669
*    SYSPERM  = ON; /*IDENTIFY ERROR AS PERMANENT          @Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0670
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0672
*  DO;                                                     /*@Z427VLS*/
         B     @RC00667                                            0672
@RF00667 DS    0H                                                  0673
*    IF TPRMODE = LINSTAT1 THEN                                    0673
         CLI   TPRMODE(R7),X'01'                                   0673
         BNE   @RF00673                                            0673
*      SYSTEMP = ERRCT1;                                   /*@VS48722*/
         SLR   @08,@08                                             0674
         IC    @08,ERRCT1(,R7)                                     0674
         STCM  @08,15,SYSTEMP                                      0674
*  ELSE                                                            0675
*    DO;                                                   /*@Z427VLS*/
         B     @RC00673                                            0675
@RF00673 DS    0H                                                  0676
*      IF TPRMODE = CHANADAP × /*CHANNEL ADAPTER ERROR       @Z427VLS*/
*         TPRMODE = COMSCAN  × /*COMMUNICATION SCANNER ERROR @Z427VLS*/
*         TPRMODE = IOERROR  × /*I/O INSTRUCTION EXCEPTION   @Z427VLS*/
*         TPRMODE = UNRESOLV × /*UNRESOLVED PROGRAM LEVEL ONE */   0676
*                              /*INTERRUPT                   @Z427VLS*/
*         TPRMODE = LINKERR THEN  /* LINK ERROR              @Z427VLS*/
         CLI   TPRMODE(R7),X'10'                                   0676
         BE    @RT00676                                            0676
         CLI   TPRMODE(R7),X'11'                                   0676
         BE    @RT00676                                            0676
         CLI   TPRMODE(R7),X'12'                                   0676
         BE    @RT00676                                            0676
         CLI   TPRMODE(R7),X'13'                                   0676
         BE    @RT00676                                            0676
         CLI   TPRMODE(R7),X'02'                                   0676
         BNE   @RF00676                                            0676
@RT00676 DS    0H                                                  0677
*           SYSPERM  = ON;                               /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0677
*      ELSE                                                        0678
*      DO;                                                 /*@Z427VLS*/
         B     @RC00676                                            0678
@RF00676 DS    0H                                                  0679
*      IF TPRMODE = LINSTAT3 THEN /*IF MODE IS 03            @Z427VLS*/
         CLI   TPRMODE(R7),X'03'                                   0679
         BNE   @RF00679                                            0679
*         DO;                                              /*@Z427VLS*/
*           SYSTEMP  = SYSTEMP  + ERRCT1;              /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0681
         SLR   @06,@06                                             0681
         IC    @06,ERRCT1(,R7)                                     0681
         ALR   @08,@06                                             0681
         STCM  @08,15,SYSTEMP                                      0681
*           SYSPERM  = ON; /*ALWAYS SET TEMP BEFORE PERM   @Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0682
*         END;                                             /*@Z427VLS*/
*       END;                                               /*@Z427VLS*/
@RF00679 DS    0H                                                  0685
*       END;                                               /*@Z427VLS*/
@RC00676 DS    0H                                                  0686
*    END;                                                  /*@Z427VLS*/
@RC00673 DS    0H                                                  0687
*IF SYSPERM  = ON × SYSTEMP  > ZERO THEN                           0687
@RC00667 TM    SYSPERM,B'00000001'                                 0687
         BO    @RT00687                                            0687
         ICM   @08,15,SYSTEMP                                      0687
         BNP   @RF00687                                            0687
@RT00687 DS    0H                                                  0688
*  DO;                                                     /*@Z427VLS*/
*    WORKCUA = (TPRCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKCUA(2),TPRCUA(R7)                               0689
         NC    WORKCUA(2),@CB00936                                 0689
*    BUG(11) = BUG(11) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0690
         L     @06,BUG+40                                          0690
         ALR   @06,@08                                             0690
         ST    @06,BUG+40                                          0690
*    BUG(19) = BUG(19) + 1;                                /*@Z427VLS*/
         AL    @08,BUG+72                                          0691
         ST    @08,BUG+72                                          0691
*    IF CUAPTR ^= ZERO THEN                                        0692
         L     @08,CUAPTR(,R2)                                     0692
         LTR   @08,@08                                             0692
         BZ    @RF00692                                            0692
*     CALL CUASELCT;                                       /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0693
*    IF DEVPTR ^= ZERO THEN                                        0694
@RF00692 L     @08,DEVPTR(,R2)                                     0694
         LTR   @08,@08                                             0694
         BZ    @RF00694                                            0694
*     CALL DEVSEL;                                         /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0695
*    IF PASSFLAG = YES THEN                                        0696
@RF00694 TM    PASSFLAG(R2),B'00000001'                            0696
         BNO   @RF00696                                            0696
*    DO;                                                   /*@Z427VLS*/
*    SYSGROUP  = FIVE; /*SET GROUP TO TP CNTRL             @Z427VLS*/
         MVI   SYSGROUP,X'05'                                      0698
*    SYSRT  = (TPRCUA & ONLYCUA2);                       /*@Z427VLS*/
         MVC   SYSRT(2),TPRCUA(R7)                                 0699
         NC    SYSRT(2),@CB00936                                   0699
*    /*SYSCUA IS 4 BITS TOO FAR TO THE RIGHT FOR NOW         @Z427VLS*/
*    SYSDEV  = '3705'X;                                  /*@Z427VLS*/
         MVC   SYSDEV(2),@CB01393                                  0700
*    CALL SETCPU;                                          /*@Z427VLS*/
         BAL   @14,SETCPU                                          0701
*    CALL SET3705;                                         /*@Z427VLS*/
         BAL   @14,SET3705                                         0702
*    END;                                                  /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*END; /*END FOR PROC COUNTMDR                                @Z427VLS*/
@EL00013 DS    0H                                                  0705
@EF00013 DS    0H                                                  0705
@ER00013 LM    @14,@12,@SA00013                                    0705
         BR    @14                                                 0705
*COUNTOBR:PROC; /*IDENTIFY AND SUM PERMANENT AND TEMPORARY ERRORS*/
COUNTOBR STM   @14,@12,@SA00014                                    0706
*               /*FROM OBR RECORDS IN SYSUM2                 @Z427VLS*/
*BUG(7) = BUG(7) + 1;                                      /*@Z427VLS*/
         LA    @08,1                                               0707
         AL    @08,BUG+24                                          0707
         ST    @08,BUG+24                                          0707
*IF SHORTSW = ON THEN /*IF SHORT OBR                         @Z427VLS*/
         TM    SHORTSW(R7),B'00100000'                             0708
         BNO   @RF00708                                            0708
*  DO;                                                     /*@Z427VLS*/
*    CUA3 = (OBRSCUA & ONLYCUA3);                          /*@Z427VLS*/
         MVC   CUA3(3),OBRSCUA(R7)                                 0710
         NC    CUA3(3),@CB00938                                    0710
*    WORKDEV = OBRSDEV2;                                   /*@Z427VLS*/
         MVC   WORKDEV(2),OBRSDEV2(R7)                             0711
*  END;                                                    /*@Z427VLS*/
*ELSE  /*LONG OBR BY DEFAULT                                 @Z427VLS*/
*  DO;                                                     /*@Z427VLS*/
         B     @RC00708                                            0713
@RF00708 DS    0H                                                  0714
*    WORKDEV = OBRDEV;                                     /*@Z427VLS*/
         MVC   WORKDEV(2),OBRDEV(R7)                               0714
*    CUA3 = (OBRPCUA & ONLYCUA3);                          /*@Z427VLS*/
         MVC   CUA3(3),OBRPCUA(R7)                                 0715
         NC    CUA3(3),@CB00938                                    0715
*  END;                                                    /*@Z427VLS*/
*IF CUAPTR ^= ZERO THEN                                            0717
@RC00708 L     @08,CUAPTR(,R2)                                     0717
         LTR   @08,@08                                             0717
         BZ    @RF00717                                            0717
* CALL CUASELCT;                                           /*@Z427VLS*/
         BAL   @14,CUASELCT                                        0718
*IF DEVPTR ^= ZERO THEN                                            0719
@RF00717 L     @08,DEVPTR(,R2)                                     0719
         LTR   @08,@08                                             0719
         BZ    @RF00719                                            0719
* CALL DEVSEL;                                             /*@Z427VLS*/
         BAL   @14,DEVSEL                                          0720
*IF PASSFLAG = YES THEN                                            0721
@RF00719 TM    PASSFLAG(R2),B'00000001'                            0721
         BNO   @RF00721                                            0721
*DO;                                                       /*@Z427VLS*/
*IF WORKDEV = DEV3410 ×                                            0723
*   WORKDEV = DEV3420 ×                                            0723
*   WORKDEV = DEV34XX THEN                                         0723
         CLC   WORKDEV(2),@CB00895                                 0723
         BE    @RT00723                                            0723
         CLC   WORKDEV(2),@CB00897                                 0723
         BE    @RT00723                                            0723
         CLC   WORKDEV(2),@CB00899                                 0723
         BNE   @RF00723                                            0723
@RT00723 DS    0H                                                  0724
*  CALL CHECK34X; /*IF 34XX TAPE THEN USE ANOTHER ALGORITM   @Z427VLS*/
         BAL   @14,CHECK34X                                        0724
*ELSE /*OTHER THAN 34XX RECORD                               @Z427VLS*/
*  DO;                                                     /*@Z427VLS*/
         B     @RC00723                                            0725
@RF00723 DS    0H                                                  0726
*   IF WORKDEV = DEV3330  ×                                        0726
*      WORKDEV = DEV3340  ×                                        0726
*      WORKDEV = DEV3350  ×                                        0726
*      WORKDEV = DEV33301 ×                                        0726
*      WORKDEV = DEV23051 ×                                        0726
*      WORKDEV = DEV23052 THEN /*33XX OR 2305 DEVICE TYPE    @Z427VLS*/
         CLC   WORKDEV(2),@CB00887                                 0726
         BE    @RT00726                                            0726
         CLC   WORKDEV(2),@CB00889                                 0726
         BE    @RT00726                                            0726
         CLC   WORKDEV(2),@CB00891                                 0726
         BE    @RT00726                                            0726
         CLC   WORKDEV(2),@CB00893                                 0726
         BE    @RT00726                                            0726
         CLC   WORKDEV(2),@CB00883                                 0726
         BE    @RT00726                                            0726
         CLC   WORKDEV(2),@CB00885                                 0726
         BNE   @RF00726                                            0726
@RT00726 DS    0H                                                  0727
*     CALL CHECK33X;                                       /*@Z427VLS*/
         BAL   @14,CHECK33X                                        0727
*    ELSE /*IF NOT 33XX OR 34XX DEVICE THEN                  @Z427VLS*/
*      DO;                                                 /*@Z427VLS*/
         B     @RC00726                                            0728
@RF00726 DS    0H                                                  0729
*         IF SHORTSW = YES THEN                                    0729
         TM    SHORTSW(R7),B'00100000'                             0729
         BNO   @RF00729                                            0729
*           DO;                                            /*@Z427VLS*/
*             IF OBRSSDRC > ZERO THEN /*IF STAT COUNTERS EXIST*/   0731
         CLI   OBRSSDRC(R7),0                                      0731
         BNH   @RF00731                                            0731
*               DO;                                        /*@Z427VLS*/
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0733
*                 ERRPLACE = (ERRPLACE × OBRSRDS); /*GET R,R ERRORS*/
         OC    ERRPLACE(1),OBRSRDS(R7)                             0734
*                 SRL(ERRPLACE,4); /*SHIFT TO ACCESS AS NUMERIC*/  0735
         SLR   @08,@08                                             0735
         IC    @08,ERRPLACE                                        0735
         SRL   @08,4                                               0735
         STC   @08,ERRPLACE                                        0735
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0736
         SLR   @06,@06                                             0736
         IC    @06,ERRNUM                                          0736
         ALR   @08,@06                                             0736
         STCM  @08,15,SYSTEMP                                      0736
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0737
*                 ERRPLACE = OBRSRDS; /*GET BOTH READ AND WRITE*/  0738
         MVC   ERRPLACE(1),OBRSRDS(R7)                             0738
*                 ERRPLACE = (ERRPLACE & NOREAD); /*REMOVE READS*/ 0739
         NI    ERRPLACE,X'0F'                                      0739
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         SLR   @06,@06                                             0740
         IC    @06,ERRNUM                                          0740
         ALR   @08,@06                                             0740
         STCM  @08,15,SYSTEMP                                      0740
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
*         ELSE /*LONG OBR BY DEFAULT                         @Z427VLS*/
*           DO;                                            /*@Z427VLS*/
         B     @RC00729                                            0743
@RF00729 DS    0H                                                  0744
*             IF DISMOUNT = ON × /*IF A DISMOUNT RECORD WITH STAT DTA*/
*                SDRCOUNT = ON × /*SDR COUNTER DUMPED AT EOD @Z427VLS*/
*                OBRTEMP = ON THEN /*OBR TEMPORARY ERROR FLAG ON     */
         TM    DISMOUNT(R7),B'11000100'                            0744
         BZ    @RF00744                                            0744
*              DO;                     /*                    @XA21207*/
*              IF OBRLSDRC > ZERO THEN /*IF STAT CNTRS EXIST @XA21207*/
         CLI   OBRLSDRC(R7),0                                      0746
         BNH   @RF00746                                            0746
*               DO;  /*ACCUMULATE READ WRITE ERRORS          @Z427VLS*/
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0748
*                 ERRPLACE = (ERRPLACE × OBRLSDR); /*GET LNG R,R ERR*/
         LA    @08,64                                              0749
         ALR   @08,R7                                              0749
         SLR   @06,@06                                             0749
         IC    @06,OBRDEVDC(,R7)                                   0749
         SLA   @06,3                                               0749
         ALR   @08,@06                                             0749
         OC    ERRPLACE(1),OBRLSDR(@08)                            0749
*                 SRL(ERRPLACE,4); /*SHIFT TO ACCESS AS NUMERIC*/  0750
         SLR   @06,@06                                             0750
         IC    @06,ERRPLACE                                        0750
         SRL   @06,4                                               0750
         STC   @06,ERRPLACE                                        0750
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         ICM   @06,15,SYSTEMP                                      0751
         SLR   @03,@03                                             0751
         IC    @03,ERRNUM                                          0751
         ALR   @06,@03                                             0751
         STCM  @06,15,SYSTEMP                                      0751
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0752
*                 ERRPLACE = OBRLSDR; /*GET READ, WRITE ERRORS*/   0753
         MVC   ERRPLACE(1),OBRLSDR(@08)                            0753
*                 ERRPLACE = (ERRPLACE & NOREAD); /*ELIM READ ERRORS*/
         NI    ERRPLACE,X'0F'                                      0754
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         SLR   @08,@08                                             0755
         IC    @08,ERRNUM                                          0755
         ALR   @06,@08                                             0755
         STCM  @06,15,SYSTEMP                                      0755
*               END;                                       /*@Z427VLS*/
*              END;                    /*                    @XA21207*/
*             ELSE /*CONTINUE CHECKING TO FIND PERM ERRORS   @Z427VLS*/
*               DO;                                        /*@Z427VLS*/
         B     @RC00744                                            0758
@RF00744 DS    0H                                                  0759
*                 IF OBRSENS0 ^= '40'X THEN    /* IF NOT INTERV REQ */
         LA    @08,64                                              0759
         ALR   @08,R7                                              0759
         SLR   @06,@06                                             0759
         IC    @06,OBRDEVDC(,R7)                                   0759
         SLA   @06,3                                               0759
         ALR   @08,@06                                             0759
         SLR   @06,@06                                             0759
         IC    @06,OBRLSDRC(,R7)                                   0759
         ALR   @08,@06                                             0759
         CLI   OBRSENS0(@08),X'40'                                 0759
         BE    @RF00759                                            0759
*                   SYSPERM  = ON;                       /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0760
*               END;                                       /*@Z427VLS*/
@RF00759 DS    0H                                                  0762
*            END;                                          /*@Z427VLS*/
@RC00744 DS    0H                                                  0763
*         END;                                             /*@Z427VLS*/
@RC00729 DS    0H                                                  0764
*    END;                                                  /*@Z427VLS*/
@RC00726 DS    0H                                                  0765
*    IF SYSPERM  = ON × SYSTEMP  > ZERO THEN                       0765
@RC00723 TM    SYSPERM,B'00000001'                                 0765
         BO    @RT00765                                            0765
         ICM   @08,15,SYSTEMP                                      0765
         BNP   @RF00765                                            0765
@RT00765 DS    0H                                                  0766
*      CALL SETSYS2;                                       /*@Z427VLS*/
         BAL   @14,SETSYS2                                         0766
* END;                                                     /*@Z427VLS*/
*  END; /*CLOSING END FOR PROC COUNTOBR                      @Z427VLS*/
@EL00014 DS    0H                                                  0768
@EF00014 DS    0H                                                  0768
@ER00014 LM    @14,@12,@SA00014                                    0768
         BR    @14                                                 0768
*SETSYS2: PROC; /*CREATE SYSUM2 SORT KEY                     @Z427VLS*/
SETSYS2  STM   @14,@12,@SA00015                                    0769
*        BUG(12) = BUG(12) + 1;                            /*@Z427VLS*/
         LA    @08,1                                               0770
         AL    @08,BUG+44                                          0770
         ST    @08,BUG+44                                          0770
*        CALL GROUPASN;                                    /*@Z427VLS*/
         BAL   @14,GROUPASN                                        0771
*        SYSRT  = WORKCUA; /*CUA IS 4 BITS RIGHT OF CORRECT POS NOW*/
         MVC   SYSRT(2),WORKCUA                                    0772
*        LINKDEV = (LINKDEV && LINKDEV); /*ZERO TO ELIMINATE PREV SET*/
         XC    LINKDEV(4),LINKDEV                                  0773
*        CALL IFCDEVIC(3,WORKDEV,LINKDEV); /*GET DEVICE LABEL*/    0774
         L     @15,@CV01405                                        0774
         LA    @01,@AL00774                                        0774
         BALR  @14,@15                                             0774
*        /*IFCDEVIC IS AN EXTERNAL PROGRAM, MUST BE LINKEDITED TO FLT2*
*        SYSDEV = DEVLABEL;  /* PUT DEVICE LABEL IN SORT TABLE   */
         MVC   SYSDEV(2),DEVLABEL                                  0775
*        CALL SETCPU;                                      /*@Z427VLS*/
         BAL   @14,SETCPU                                          0776
*        IF SYSGROUP  = TWO ×                                      0777
*           SYSGROUP  = THREE ×                                    0777
*           SYSGROUP  = FOUR THEN                                  0777
         CLI   SYSGROUP,2                                          0777
         BE    @RT00777                                            0777
         CLI   SYSGROUP,3                                          0777
         BE    @RT00777                                            0777
         CLI   SYSGROUP,4                                          0777
         BNE   @RF00777                                            0777
@RT00777 DS    0H                                                  0778
*          SYSRT  = (SYSRT  & NOU); /*GOODBY UNIT ADDRESS    @0099VLS*/
         NC    SYSRT(2),@CB00934                                   0778
*      END;                                                /*@Z427VLS*/
@EL00015 DS    0H                                                  0779
@EF00015 DS    0H                                                  0779
@ER00015 LM    @14,@12,@SA00015                                    0779
         BR    @14                                                 0779
*CHECK34X: PROC; /*FIND PERM, TEMP ERRORS IN 34XX DEVICES    @Z427VLS*/
CHECK34X STM   @14,@12,12(@13)                                     0780
*/*TEMPORARY READ, WRITE ERRORS ARE FOUND AT LOCATION 76 INTO OBR*/
*/*RECORDS FOR 34XX DEVICES. TEMPORARY ERRORS ARE IN RECORDS WHICH*/
*/*HAVE EITHER THE DISMOUNT OR SDR COUNTER FLAG ON. SHORT OBRS ARE*/
*/*NEVER GENERATED FOR 34XX DEVICES BUT LONG RECORDS MAY MASQUERADE*/
*/*AS SHORT RECORDS SOMETIMES. PERMANENT RECORDS ARE DEFINED BY */ 0781
*/*DEFAULT AS THOSE RECORDS THAT ARENT TEMPORARY, EXCEPT THAT*/    0781
*/*INVALID RECORDS MAY BE CREATED WITH THE TEMP BIT ON BUT NEITHER*/
*/*THE DISMOUNT OR SDR COUNTER FLAG ON WHICH MUST BE ELIMINATED*/  0781
*BUG(27) = BUG(27) + 1;                                    /*@Z427VLS*/
         LA    @08,1                                               0781
         AL    @08,BUG+104                                         0781
         ST    @08,BUG+104                                         0781
*IF SHORTSW = NO THEN /*IF NOT A SHORT OBR THEN              @Z427VLS*/
         TM    SHORTSW(R7),B'00100000'                             0782
         BNZ   @RF00782                                            0782
*  DO;                                                     /*@Z427VLS*/
*  IF DISMOUNT = ON × SDRCOUNT = ON THEN /*IF IS EITHER A DISMOUNT*/
         TM    DISMOUNT(R7),B'10000100'                            0784
         BZ    @RF00784                                            0784
*                         /*RECORD OR A SDR COUNTER RECORD THEN*/  0785
*    SYSTEMP  = SYSTEMP  + OBR34CT1 + OBR34CT2; /*ADD R,W ERRORS*/ 0785
         ICM   @08,15,SYSTEMP                                      0785
         SLR   @06,@06                                             0785
         IC    @06,OBR34CT1(,R7)                                   0785
         ALR   @08,@06                                             0785
         SLR   @06,@06                                             0785
         IC    @06,OBR34CT2(,R7)                                   0785
         ALR   @08,@06                                             0785
         STCM  @08,15,SYSTEMP                                      0785
*  ELSE /*PERMANENT ERROR BY DEFAULT                         @Z427VLS*/
*   IF OBRTEMP = OFF THEN /*IF NOT INVALID TEMPORARY ERROR THEN*/  0786
         B     @RC00784                                            0786
@RF00784 TM    OBRTEMP(R7),B'01000000'                             0786
         BNZ   @RF00786                                            0786
*    SYSPERM  = ON;                                      /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0787
*  END;                                                    /*@Z427VLS*/
@RF00786 DS    0H                                                  0788
@RC00784 DS    0H                                                  0789
*  IF SYSTEMP  = 1 × SYSPERM  = ON THEN                            0789
@RF00782 CLC   SYSTEMP(4),@CF00055                                 0789
         BE    @RT00789                                            0789
         TM    SYSPERM,B'00000001'                                 0789
         BNO   @RF00789                                            0789
@RT00789 DS    0H                                                  0790
*    BUG(28) = BUG(28) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0790
         AL    @08,BUG+108                                         0790
         ST    @08,BUG+108                                         0790
*END; /*END OF 34XX PROC                                     @Z427VLS*/
@EL00016 DS    0H                                                  0791
@EF00016 DS    0H                                                  0791
@ER00016 LM    @14,@12,12(@13)                                     0791
         BR    @14                                                 0791
*CHECK33X: PROC; /*LOCATE 33XX AND 2305 OBR PERM, TEMP ERRORS*/    0792
CHECK33X STM   @14,@12,12(@13)                                     0792
*             /*SET SYSGROUP IN TABLE SYSUM2 TO THE ENTRY NUMBER*/ 0793
*             /*IN TABLE DEVGROUP RELATING TO THIS DEVICE GROUP */ 0793
*BUG(25) = BUG(25) + 1;                                    /*@Z427VLS*/
         LA    @08,1                                               0793
         AL    @08,BUG+96                                          0793
         ST    @08,BUG+96                                          0793
*    IF (OBRSENS1 & PERMBIT) = PERMBIT THEN                        0794
         LA    @08,64                                              0794
         ALR   @08,R7                                              0794
         SLR   @06,@06                                             0794
         IC    @06,OBRDEVDC(,R7)                                   0794
         SLA   @06,3                                               0794
         ALR   @08,@06                                             0794
         SLR   @06,@06                                             0794
         IC    @06,OBRLSDRC(,R7)                                   0794
         ALR   @08,@06                                             0794
         MVC   @TS00001(1),OBRSENS1(@08)                           0794
         NI    @TS00001,B'10000000'                                0794
         CLI   @TS00001,B'10000000'                                0794
         BNE   @RF00794                                            0794
*      SYSPERM  = ON;                                    /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0795
*    ELSE                                                          0796
*      DO;                                                 /*@Z427VLS*/
         B     @RC00794                                            0796
@RF00794 DS    0H                                                  0797
*        IF OBRTEMP = ON THEN                                      0797
         TM    OBRTEMP(R7),B'01000000'                             0797
         BNO   @RF00797                                            0797
*          SYSTEMP  = SYSTEMP  + 1;                    /*@Z427VLS*/
         LA    @08,1                                               0798
         ICM   @06,15,SYSTEMP                                      0798
         ALR   @08,@06                                             0798
         STCM  @08,15,SYSTEMP                                      0798
*        ELSE                                                      0799
*          SYSPERM  = ON;                                /*@Z427VLS*/
         B     @RC00797                                            0799
@RF00797 OI    SYSPERM,B'00000001'                                 0799
*      END;                                                /*@Z427VLS*/
@RC00797 DS    0H                                                  0801
*IF SYSTEMP  = 1  × SYSPERM  = ON THEN                             0801
@RC00794 CLC   SYSTEMP(4),@CF00055                                 0801
         BE    @RT00801                                            0801
         TM    SYSPERM,B'00000001'                                 0801
         BNO   @RF00801                                            0801
@RT00801 DS    0H                                                  0802
*  BUG(26) = BUG(26) + 1;                                  /*@Z427VLS*/
         LA    @08,1                                               0802
         AL    @08,BUG+100                                         0802
         ST    @08,BUG+100                                         0802
*END;                                                      /*@Z427VLS*/
@EL00017 DS    0H                                                  0803
@EF00017 DS    0H                                                  0803
@ER00017 LM    @14,@12,12(@13)                                     0803
         BR    @14                                                 0803
*GROUPASN: PROC; /*DETERMINE DEVICE GROUP FOR SYSTEM SUMMARY REPORT*/
GROUPASN STM   @14,@12,12(@13)                                     0804
*                /*SET SYSGROUP IN TABLE SYSUM2 TO THE ENTRY NUMBER*/
*                /*IN TABLE DEVGROUP RELATING TO THIS DEVICE GROUP*/
*IF (WORKDEV1 = HEX08 & WORKDEV2 ^= HEX42) ×                       0805
*   WORKDEV  = HEX100C ×                                           0805
*   WORKDEV  = HEX1008 THEN                                        0805
         CLI   WORKDEV1,X'08'                                      0805
         BNE   @GL00036                                            0805
         CLI   WORKDEV2,X'42'                                      0805
         BNE   @RT00805                                            0805
@GL00036 CLC   WORKDEV(2),@CB00901                                 0805
         BE    @RT00805                                            0805
         CLC   WORKDEV(2),@CB00903                                 0805
         BNE   @RF00805                                            0805
@RT00805 DS    0H                                                  0806
*  DO;                                                     /*@Z427VLS*/
*   BUG(15) = BUG(15) + 1;                                 /*@Z427VLS*/
         LA    @08,1                                               0807
         AL    @08,BUG+56                                          0807
         ST    @08,BUG+56                                          0807
*   SYSGROUP  = ONE;                                     /*@Z427VLS*/
         MVI   SYSGROUP,X'01'                                      0808
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0810
*  DO;                                                     /*@Z427VLS*/
         B     @RC00805                                            0810
@RF00805 DS    0H                                                  0811
*    IF WORKDEV1 = HEX10 THEN                                      0811
         CLI   WORKDEV1,X'10'                                      0811
         BNE   @RF00811                                            0811
*     DO;                                                  /*@Z427VLS*/
*      BUG(18) = BUG(18) + 1;                              /*@Z427VLS*/
         LA    @08,1                                               0813
         AL    @08,BUG+68                                          0813
         ST    @08,BUG+68                                          0813
*      SYSGROUP  = FOUR;                                 /*@Z427VLS*/
         MVI   SYSGROUP,X'04'                                      0814
*     END;                                                 /*@Z427VLS*/
*    ELSE                                                          0816
*      DO;                                                 /*@Z427VLS*/
         B     @RC00811                                            0816
@RF00811 DS    0H                                                  0817
*        IF WORKDEV1 = HEX20 ×                                     0817
*           WORKDEV = HEX0842 THEN                                 0817
         CLI   WORKDEV1,X'20'                                      0817
         BE    @RT00817                                            0817
         CLC   WORKDEV(2),@CB00905                                 0817
         BNE   @RF00817                                            0817
@RT00817 DS    0H                                                  0818
*         DO;                                              /*@Z427VLS*/
*          BUG(16) = BUG(16) + 1;                          /*@Z427VLS*/
         LA    @08,1                                               0819
         AL    @08,BUG+60                                          0819
         ST    @08,BUG+60                                          0819
*          SYSGROUP  = TWO;                              /*@Z427VLS*/
         MVI   SYSGROUP,X'02'                                      0820
*         END;                                             /*@Z427VLS*/
*        ELSE                                                      0822
*         DO;                                              /*@Z427VLS*/
         B     @RC00817                                            0822
@RF00817 DS    0H                                                  0823
*           IF WORKDEV1 = HEX40 THEN                               0823
         CLI   WORKDEV1,X'40'                                      0823
         BNE   @RF00823                                            0823
*             DO;                                          /*@Z427VLS*/
*               SYSGROUP  = FIVE;                        /*@Z427VLS*/
         MVI   SYSGROUP,X'05'                                      0825
*               BUG(19) = BUG(19) + 1;                     /*@Z427VLS*/
         LA    @08,1                                               0826
         AL    @08,BUG+72                                          0826
         ST    @08,BUG+72                                          0826
*             END;                                         /*@Z427VLS*/
*           ELSE                                                   0828
*             DO;                                          /*@Z427VLS*/
         B     @RC00823                                            0828
@RF00823 DS    0H                                                  0829
*               IF WORKDEV1 = HEX42 ×                              0829
*                  WORKDEV1 = HEX44 THEN                           0829
         CLI   WORKDEV1,X'42'                                      0829
         BE    @RT00829                                            0829
         CLI   WORKDEV1,X'44'                                      0829
         BNE   @RF00829                                            0829
@RT00829 DS    0H                                                  0830
*                DO;                                       /*@Z427VLS*/
*                 BUG(20) = BUG(20) + 1;                   /*@Z427VLS*/
         LA    @08,1                                               0831
         AL    @08,BUG+76                                          0831
         ST    @08,BUG+76                                          0831
*                 SYSGROUP  = SIX;                       /*@Z427VLS*/
         MVI   SYSGROUP,X'06'                                      0832
*                END;                                      /*@Z427VLS*/
*               ELSE                                               0834
*                 DO;                                      /*@Z427VLS*/
         B     @RC00829                                            0834
@RF00829 DS    0H                                                  0835
*                   IF WORKDEV1 = HEX80 THEN                       0835
         CLI   WORKDEV1,X'80'                                      0835
         BNE   @RF00835                                            0835
*                    DO;                                   /*@Z427VLS*/
*                     BUG(17) = BUG(17) + 1;               /*@Z427VLS*/
         LA    @08,1                                               0837
         AL    @08,BUG+64                                          0837
         ST    @08,BUG+64                                          0837
*                     SYSGROUP  = THREE;                 /*@Z427VLS*/
         MVI   SYSGROUP,X'03'                                      0838
*                    END;                                  /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
*             END;                                         /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*    END; /*CLOSING END TO GROUPASN PROC                     @Z427VLS*/
@EL00018 DS    0H                                                  0845
@EF00018 DS    0H                                                  0845
@ER00018 LM    @14,@12,12(@13)                                     0845
         BR    @14                                                 0845
*SET3705: PROC;                                            /*@Z427VLS*/
SET3705  STM   @14,@12,12(@13)                                     0846
*  IF TPRMODE = LINKERR ×                                          0847
*     TPRMODE = LINSTAT1 ×                                         0847
*     TPRMODE = LINSTAT0 ×                                         0847
*     TPRMODE = LINSTAT3 THEN                                      0847
         CLI   TPRMODE(R7),X'02'                                   0847
         BE    @RT00847                                            0847
         CLI   TPRMODE(R7),X'01'                                   0847
         BE    @RT00847                                            0847
         CLI   TPRMODE(R7),X'00'                                   0847
         BE    @RT00847                                            0847
         CLI   TPRMODE(R7),X'03'                                   0847
         BNE   @RF00847                                            0847
@RT00847 DS    0H                                                  0848
*    SYSITEM  = (SYSITEM  ×   '20'X);                  /*@Z427VLS*/
         OI    SYSITEM,X'20'                                       0848
*  ELSE                                                            0849
*      IF  TPRMODE = IOERROR ×                                     0849
*          TPRMODE = UNRESOLV THEN                                 0849
         B     @RC00847                                            0849
@RF00847 CLI   TPRMODE(R7),X'12'                                   0849
         BE    @RT00849                                            0849
         CLI   TPRMODE(R7),X'13'                                   0849
         BNE   @RF00849                                            0849
@RT00849 DS    0H                                                  0850
*          SYSITEM  = (SYSITEM  ×   '10'X);            /*@Z427VLS*/
         OI    SYSITEM,X'10'                                       0850
*  /*IF TPRMODE IS EQUAL TO DEFAULT OF COMSCAN OR CHANADAP ERRORS*/
*  /*TREN37 NEED NOT BE SET AS ITS CORRECT VALUE IS ZERO. SYSRT */ 0851
*  /*IS SET HERE AS THE STUPID COMPILER WILL NOT ACCESS TREN37*/   0851
*END;    /*CLOSING END TO SET3705 PROC                       @Z427VLS*/
@EL00019 DS    0H                                                  0851
@EF00019 DS    0H                                                  0851
@ER00019 LM    @14,@12,12(@13)                                     0851
         BR    @14                                                 0851
*SETCPU: PROC;                                             /*@Z427VLS*/
SETCPU   STM   @14,@12,@SA00020                                    0852
*/* SET NEW AND OLD CPUS IN SYSUM2. CHECK AND SEE IF THE DEVICE*/  0853
*/* IS SHARED. IF SO, RESET THE NEW CPU AND ALSO THE CUA. GO TO*/  0853
*/*SUMONADR TO CREATE NEW ENTRIES OF EVTABLE AND SYSUMONE IF NEED BE*/
*CALL SUMONADR; /* IF TOO MANY CPUS ENCOUNTERED, NEW ENTRY OF EVTABLE*/
         BAL   @14,SUMONADR                                        0853
*               /* IS NOT CREATED, AND THIS SYSUM2 ENTRY WILL NOT BE*/
*               /* CREATED                                   @Z427VLS*/
*MISSW = OFF; /*PRESET LOOP KICKOUT SWITCH                   @Z427VLS*/
         NI    MISSW,B'11101111'                                   0854
*DO J = 1 BY 1 TO EVNUM WHILE MISSW = OFF;                 /*@Z427VLS*/
         LA    @08,1                                               0855
         ST    @08,J                                               0855
         B     @DE00855                                            0855
@DL00855 TM    MISSW,B'00010000'                                   0855
         BNZ   @DC00855                                            0855
*  IF EVSERIAL(J) = LRTCPUS × EVSERIAL(J) = 'FFFFFF'X THEN         0856
         MH    @08,@CH00081                                        0856
         L     @06,EVPTR(,R2)                                      0856
         ST    @08,@TF00001                                        0856
         ALR   @08,@06                                             0856
         CLC   EVSERIAL-6(3,@08),LRTCPUS(R7)                       0856
         BE    @RT00856                                            0856
         AL    @06,@TF00001                                        0856
         CLC   EVSERIAL-6(3,@06),@CB00237                          0856
         BNE   @RF00856                                            0856
@RT00856 DS    0H                                                  0857
*         /*EVSERIAL ONLY = FOXES IF 11TH OR HIGHER CPU IN INPUT*/ 0857
*    DO;                                                   /*@Z427VLS*/
*      MISSW = ON; /*KICK OUT OF LOOP AFTER PROCESSING       @Z427VLS*/
         OI    MISSW,B'00010000'                                   0858
*      WORKNM = J - 1; /*SET TO EVTABLE ENTRY NUMBER MINUS ONE*/   0859
         L     @08,J                                               0859
         BCTR  @08,0                                               0859
         STC   @08,WORKNM                                          0859
*      SYSCPUS  = WORKBYTE; /*REFERENCE WORKNM VIA BIT STRING AND*/
         MVC   SYSCPUS(1),WORKBYTE                                 0860
*                             /*SET SYSOLD EQUAL TO IT       @Z427VLS*/
*      IF SHAREPTR ^= ZERO THEN                                    0861
         L     @08,SHAREPTR(,R2)                                   0861
         LTR   @08,@08                                             0861
         BZ    @RF00861                                            0861
*        DO;                                               /*@Z427VLS*/
*          SHAREYES = NO;                                  /*@Z427VLS*/
         NI    SHAREYES,B'01111111'                                0863
*          DO K = 1 BY 1 TO SHARENUM WHILE SHAREYES = NO;  /*@Z427VLS*/
         LA    @08,1                                               0864
         ST    @08,K                                               0864
         B     @DE00864                                            0864
@DL00864 TM    SHAREYES,B'10000000'                                0864
         BNZ   @DC00864                                            0864
*            IF LRTCPUS = SHARSERA(K) THEN                         0865
         MH    @08,@CH00033                                        0865
         L     @06,SHAREPTR(,R2)                                   0865
         ST    @08,@TF00001                                        0865
         ALR   @08,@06                                             0865
         AL    @08,@CF01502                                        0865
         CLC   LRTCPUS(3,R7),SHARSERA-4(@08)                       0865
         BNE   @RF00865                                            0865
*              DO;                                         /*@Z427VLS*/
*                IF SHAREDX(K) = ON THEN                           0867
         LR    @08,@06                                             0867
         AL    @08,@TF00001                                        0867
         AL    @08,@CF01510                                        0867
         TM    SHAREDX-2(@08),B'10000000'                          0867
         BNO   @RF00867                                            0867
*                  DO;                                     /*@Z427VLS*/
*                    IF (SHARECUA(K) & CUXOFF) = (WORKCUA & NOUNIT2)
*                    THEN /*ELIMINATE CUX FLAG AND SEE IF CHANNEL AND*/
         LR    @08,@06                                             0869
         AL    @08,@TF00001                                        0869
         AL    @08,@CF01510                                        0869
         MVC   @TS00001(2),SHARECUA-2(@08)                         0869
         NC    @TS00001(2),@CB00976                                0869
         MVC   @TS00001+2(2),WORKCUA                               0869
         NC    @TS00001+2(2),@CB00932                              0869
         CLC   @TS00001(2),@TS00001+2                              0869
         BNE   @RF00869                                            0869
*                         /*CONTROL UNIT ADDRESS HALF BYTES MATCH*/
*                      DO;                                 /*@Z427VLS*/
*                        SYSRT  = (SYSRT  & UNITON); /*GET UNIT*/  0871
         NC    SYSRT(2),@CB00957                                   0871
*                                               /*ADDRESS UNCHANGED*/
*                        SYSRT  = (SYSRT  × SHARECUB(K));  /*@0099VLS*/
         AL    @06,@TF00001                                        0872
         AL    @06,@CF01512                                        0872
         OC    SYSRT(2),SHARECUB-7(@06)                            0872
*                        /*CONVER CHANNEL,CONTROL UNIT TO BASE ADDRS*/
*                        MISSW1 = OFF;                     /*@Z427VLS*/
         NI    MISSW1,B'11111101'                                  0873
*                        DO L = 1 BY 1 TO EVNUM WHILE MISSW1 = OFF;
         LA    @08,1                                               0874
         ST    @08,L                                               0874
         B     @DE00874                                            0874
@DL00874 TM    MISSW1,B'00000010'                                  0874
         BNZ   @DC00874                                            0874
*                          IF EVSERIAL(L) = SHARSERB(K) ×          0875
*                             EVSERIAL(L) = 'FFFFFF'X THEN         0875
         MH    @08,@CH00081                                        0875
         L     @06,EVPTR(,R2)                                      0875
         L     @03,K                                               0875
         MH    @03,@CH00033                                        0875
         L     @15,SHAREPTR(,R2)                                   0875
         ST    @08,@TF00001                                        0875
         ALR   @08,@06                                             0875
         ALR   @15,@03                                             0875
         BCTR  @15,0                                               0875
         BCTR  @15,0                                               0875
         CLC   EVSERIAL-6(3,@08),SHARSERB-9(@15)                   0875
         BE    @RT00875                                            0875
         AL    @06,@TF00001                                        0875
         CLC   EVSERIAL-6(3,@06),@CB00237                          0875
         BNE   @RF00875                                            0875
@RT00875 DS    0H                                                  0876
*                            DO;                           /*@Z427VLS*/
*                              WORKNM = L - 1; /*SET TO EVTABLE ENT.*/
         L     @08,L                                               0877
         BCTR  @08,0                                               0877
         STC   @08,WORKNM                                          0877
*                                              /*NUMBER MINUS ONE*/
*                              MISSW1 = ON;                /*@Z427VLS*/
         OI    MISSW1,B'00000010'                                  0878
*                            END;                          /*@Z427VLS*/
*                        END;                              /*@Z427VLS*/
@RF00875 LA    @08,1                                               0880
         AL    @08,L                                               0880
         ST    @08,L                                               0880
@DE00874 L     @06,EVPTR(,R2)                                      0880
         CH    @08,EVNUM(,@06)                                     0880
         BNH   @DL00874                                            0880
@DC00874 DS    0H                                                  0881
*                        SHAREYES = ON;                    /*@Z427VLS*/
         OI    SHAREYES,B'10000000'                                0881
*                      END;                                /*@Z427VLS*/
*                  END;                                    /*@Z427VLS*/
*                ELSE                                              0884
*                  DO;                                     /*@Z427VLS*/
         B     @RC00867                                            0884
@RF00867 DS    0H                                                  0885
*                    IF SHARECUA(K) = WORKCUA THEN                 0885
         L     @08,K                                               0885
         MH    @08,@CH00033                                        0885
         L     @06,SHAREPTR(,R2)                                   0885
         ST    @08,@TF00001                                        0885
         ALR   @08,@06                                             0885
         AL    @08,@CF01510                                        0885
         CLC   SHARECUA-2(2,@08),WORKCUA                           0885
         BNE   @RF00885                                            0885
*                      DO;                                 /*@Z427VLS*/
*                        SYSRT  = SHARECUB(K); /*GET BASE CPU*/    0887
         AL    @06,@TF00001                                        0887
         AL    @06,@CF01512                                        0887
         MVC   SYSRT(2),SHARECUB-7(@06)                            0887
*                        MISSW1 = OFF;                     /*@Z427VLS*/
         NI    MISSW1,B'11111101'                                  0888
*                        DO L = 1 BY 1 TO EVNUM WHILE MISSW1 = OFF;
         LA    @08,1                                               0889
         ST    @08,L                                               0889
         B     @DE00889                                            0889
@DL00889 TM    MISSW1,B'00000010'                                  0889
         BNZ   @DC00889                                            0889
*                          IF EVSERIAL(L) = SHARSERB(K) ×          0890
*                             EVSERIAL(L) = 'FFFFFF'X THEN         0890
         MH    @08,@CH00081                                        0890
         L     @06,EVPTR(,R2)                                      0890
         L     @03,K                                               0890
         MH    @03,@CH00033                                        0890
         L     @15,SHAREPTR(,R2)                                   0890
         ST    @08,@TF00001                                        0890
         ALR   @08,@06                                             0890
         ALR   @15,@03                                             0890
         BCTR  @15,0                                               0890
         BCTR  @15,0                                               0890
         CLC   EVSERIAL-6(3,@08),SHARSERB-9(@15)                   0890
         BE    @RT00890                                            0890
         AL    @06,@TF00001                                        0890
         CLC   EVSERIAL-6(3,@06),@CB00237                          0890
         BNE   @RF00890                                            0890
@RT00890 DS    0H                                                  0891
*                            DO;                           /*@Z427VLS*/
*                              WORKNM = L - 1; /*SET TO EVTABLE ENT.*/
         L     @08,L                                               0892
         BCTR  @08,0                                               0892
         STC   @08,WORKNM                                          0892
*                                             /*NUMBER MINUS ONE*/ 0893
*                              MISSW1 = ON;                /*@Z427VLS*/
         OI    MISSW1,B'00000010'                                  0893
*                            END;                          /*@Z427VLS*/
*                        END;                              /*@Z427VLS*/
@RF00890 LA    @08,1                                               0895
         AL    @08,L                                               0895
         ST    @08,L                                               0895
@DE00889 L     @06,EVPTR(,R2)                                      0895
         CH    @08,EVNUM(,@06)                                     0895
         BNH   @DL00889                                            0895
@DC00889 DS    0H                                                  0896
*                        SHAREYES = ON;                    /*@Z427VLS*/
         OI    SHAREYES,B'10000000'                                0896
*                    END;                                  /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
@RF00885 DS    0H                                                  0899
*              END;                                        /*@Z427VLS*/
@RC00867 DS    0H                                                  0900
*           END;                                           /*@Z427VLS*/
@RF00865 LA    @08,1                                               0900
         AL    @08,K                                               0900
         ST    @08,K                                               0900
@DE00864 L     @06,SHAREPTR(,R2)                                   0900
         CH    @08,SHARENUM(,@06)                                  0900
         BNH   @DL00864                                            0900
@DC00864 DS    0H                                                  0901
*        END;                                              /*@Z427VLS*/
*        SLL(SYSRT ,4); /*SHIFT TO SYSCUA FROM SYSRT       @Z427VLS*/
@RF00861 SLR   @08,@08                                             0902
         ICM   @08,3,SYSRT                                         0902
         SLL   @08,4                                               0902
         STCM  @08,3,SYSRT                                         0902
*        SLL(WORKNM,4); /*SHIFT BASE CPU INDEX TO BYTE BOUNDARY*/  0903
         SLR   @08,@08                                             0903
         IC    @08,WORKNM                                          0903
         SLL   @08,4                                               0903
         STC   @08,WORKNM                                          0903
*        SYSCPUS  = (SYSCPUS  × WORKBYTE); /*SET SYSCPU  @Z427VLS*/
         OC    SYSCPUS(1),WORKBYTE                                 0904
*     END;                                                 /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
@RF00856 LA    @08,1                                               0906
         AL    @08,J                                               0906
         ST    @08,J                                               0906
@DE00855 L     @06,EVPTR(,R2)                                      0906
         CH    @08,EVNUM(,@06)                                     0906
         BNH   @DL00855                                            0906
@DC00855 DS    0H                                                  0907
*END;/*CLOSING END TO SETCPU                                 @Z427VLS*/
@EL00020 DS    0H                                                  0907
@EF00020 DS    0H                                                  0907
@ER00020 LM    @14,@12,@SA00020                                    0907
         BR    @14                                                 0907
*ENDOFILE: PROC; /*SORT SORTABLE AND PASS RETURN CODE TO EREP1*/   0908
ENDOFILE STM   @14,@12,@SA00021                                    0908
*RESPECIFY(R15) RESTRICTED;                                /*@Z427VLS*/
*IF ERROR = OVERFLOW & PHIST = ON THEN                             0910
         CLC   ERROR(4),@CF00066                                   0910
         BNE   @RF00910                                            0910
         TM    PHIST(R2),B'00100000'                               0910
         BNO   @RF00910                                            0910
*  DO;                                                     /*@0001VLS*/
*    CLOSEIO = (CLOSEIO && CLOSEIO);                       /*@0001VLS*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0912
*    CACCIN = ON;                                          /*@0001VLS*/
         OI    CACCIN(R2),B'00010000'                              0913
*    CALL IOHND(IOCLOSE);                                  /*@0001VLS*/
         L     @15,ADIOHND(,R2)                                    0914
         LA    @01,@AL00914                                        0914
         BALR  @14,@15                                             0914
*  END;                                                    /*@0001VLS*/
*IF MAXENT <= I & ERROR ^= ENDFILE & GETFAIL = OFF THEN            0916
@RF00910 L     @14,MAXENT                                          0916
         C     @14,I                                               0916
         BH    @RF00916                                            0916
         CLC   ERROR(4),@CF00064                                   0916
         BE    @RF00916                                            0916
         TM    GETFAIL,B'00001000'                                 0916
         BNZ   @RF00916                                            0916
*  DO;            /*WORLD, DONT TELL EREP1, DONT LET LOGREC BE*/   0917
*    ZEROALL = NO;       /*RESET.                            @Z427VLS*/
         NI    ZEROALL(R2),B'10111111'                             0918
*    MSGNO = 3;                                            /*@Z427VLS*/
         MVI   MSGNO,X'03'                                         0919
*    CALL ERRMSG;                                          /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0920
*    ERROR = ZERO;                                         /*@0001VLS*/
         SLR   @14,@14                                             0921
         ST    @14,ERROR                                           0921
*    IF PHIST = ON THEN                                            0922
         TM    PHIST(R2),B'00100000'                               0922
         BNO   @RF00922                                            0922
*      DO;                                                 /*@Z427VLS*/
*        CLOSEIO = (CLOSEIO && CLOSEIO);                   /*@Z427VLS*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0924
*        CACCIN = ON;                                      /*@Z427VLS*/
         OI    CACCIN(R2),B'00010000'                              0925
*        CALL IOHND(IOCLOSE);                              /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0926
         LA    @01,@AL00926                                        0926
         BALR  @14,@15                                             0926
*     END;                                                 /*@G51DGBB*/
* END;                                                     /*@G51DGBB*/
@RF00922 DS    0H                                                  0929
* IF ERROR = FOUR THEN                                             0929
@RF00916 CLC   ERROR(4),@CF00064                                   0929
         BNE   @RF00929                                            0929
*   DO;                                                    /*@G51DGBB*/
*     R15 = ZERO;                                          /*@G51DGBB*/
         SLR   R15,R15                                             0931
*     ERROR = ZERO;                                        /*@G51DGBB*/
         SLR   @14,@14                                             0932
         ST    @14,ERROR                                           0932
*   END;                                                   /*@G51DGBB*/
*/*THE FOLLOWING CODE MUST BE ADDED TO THE END OF FILE PROC BEFORE*/
*/*CLOSING ACCDEV TO WRITE FRAMES TO ACCDEV, IF NECESSARY    @G51DGBB*/
*IF R15 < TWELVE &             /*IF NON TERMINATE RETURN CODE */   0934
*   FRAMEPTR ^= ZERO THEN      /*IF FRAME TABLE WAS ALLOCATED */   0934
@RF00929 C     R15,@CF00032                                        0934
         BNL   @RF00934                                            0934
         SLR   @14,@14                                             0934
         L     @08,FRAMEPTR(,R2)                                   0934
         CR    @08,@14                                             0934
         BE    @RF00934                                            0934
* DO;                                                      /*@G51DGBB*/
*    IF  FRAMENUM > ZERO THEN /* IF ENTRIES IN FRAMTAB HAVE BEEN BUILT*
         C     @14,FRAMENUM(,@08)                                  0936
         BNL   @RF00936                                            0936
*      DO;                                                 /*@G51DGBB*/
*         IF PHIST = ON THEN /*IF DIRECTWK WAS USED TO STORE FRAMES */
         TM    PHIST(R2),B'00100000'                               0938
         BNO   @RF00938                                            0938
*           DO;                                            /*@G51DGBB*/
*             CLOSEIO = (CLOSEIO && CLOSEIO); /*ZERO CLOSE FLAGS*/ 0940
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0940
*             CDRCTWRK = ON;      /*INDICATE CLOSE OF DIRECTWK FOR  */
         OI    CDRCTWRK(R2),B'00000010'                            0941
*             CALL IOHND(IOCLOSE); /*WRITING, IMPLICITLY OPENED FOR RD*
         L     @15,ADIOHND(,R2)                                    0942
         LA    @01,@AL00942                                        0942
         BALR  @14,@15                                             0942
*           END;                                           /*@G51DGBB*/
*         DO A = 1 BY 1 TO FRAMENUM WHILE R15 < FOUR;       /*SETS. */
@RF00938 LA    @14,1                                               0944
         ST    @14,A                                               0944
         B     @DE00944                                            0944
@DL00944 C     R15,@CF00064                                        0944
         BNL   @DC00944                                            0944
*           IF FRAMETYP(A) = ALLALL THEN /*IF COMPLETE SET   @G51DGBB*/
         MH    @14,@CH00227                                        0945
         L     @08,FRAMEPTR(,R2)                                   0945
         ST    @14,@TF00001                                        0945
         ALR   @14,@08                                             0945
         AL    @14,@CF01502                                        0945
         CLI   FRAMETYP-17(@14),X'FF'                              0945
         BNE   @RF00945                                            0945
*             DO;                                          /*@G51DGBB*/
*               LISTPTR = FRAMLOCM(A);   /*ESTABLISH LISTLOC ADDR.*/
         L     @14,@TF00001                                        0947
         AL    @08,@CF01512                                        0947
         L     @14,FRAMLOCM-20(@14,@08)                            0947
         ST    @14,LISTPTR                                         0947
*               DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR ;/*@G51DGBB*/
         LA    @14,1                                               0948
         ST    @14,Z                                               0948
         B     @DE00948                                            0948
@DL00948 C     R15,@CF00064                                        0948
         BNL   @DC00948                                            0948
*                 RECCCHHR = LISTCCHR(Z);  /*GET ALL MCH FRAMES*/  0949
         MH    @14,@CH00079                                        0949
         L     @08,LISTPTR                                         0949
         ALR   @08,@14                                             0949
         BCTR  @08,0                                               0949
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0949
*                 CALL IOHND(READIRCT);    /*READ FRAME FROM DIRECTWK*/
         L     @15,ADIOHND(,R2)                                    0950
         LA    @01,@AL00950                                        0950
         BALR  @14,@15                                             0950
*                 IF R15 = ZERO THEN       /*WRITE FRAME TO ACCDEV*/
         LTR   R15,R15                                             0951
         BNZ   @RF00951                                            0951
*                   CALL IOHND(RITEHIST);                  /*@G51DGBB*/
         L     @15,ADIOHND(,R2)                                    0952
         LA    @01,@AL00952                                        0952
         BALR  @14,@15                                             0952
*              END;                                        /*@G51DGBB*/
@RF00951 LA    @14,1                                               0953
         AL    @14,Z                                               0953
         ST    @14,Z                                               0953
@DE00948 L     @08,LISTPTR                                         0953
         C     @14,LISTNUM(,@08)                                   0953
         BNH   @DL00948                                            0953
@DC00948 DS    0H                                                  0954
*              IF R15 = ZERO THEN /*IF NO ACCDEV WRITE ERROR @G51DGBB*/
         LTR   R15,R15                                             0954
         BNZ   @RF00954                                            0954
*                DO;                                       /*@G51DGBB*/
*                  LISTPTR = FRAMLOCC(A); /*GET CCH FRAMES   @G51DGBB*/
         L     @14,A                                               0956
         MH    @14,@CH00227                                        0956
         L     @08,FRAMEPTR(,R2)                                   0956
         L     @14,FRAMLOCC-24(@14,@08)                            0956
         ST    @14,LISTPTR                                         0956
*                  DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR;      0957
         LA    @14,1                                               0957
         ST    @14,Z                                               0957
         B     @DE00957                                            0957
@DL00957 C     R15,@CF00064                                        0957
         BNL   @DC00957                                            0957
*                    RECCCHHR = LISTCCHR(Z);               /*@G51DGBB*/
         MH    @14,@CH00079                                        0958
         L     @08,LISTPTR                                         0958
         ALR   @08,@14                                             0958
         BCTR  @08,0                                               0958
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0958
*                      CALL IOHND(READIRCT); /*READ FRAME OFF DRCTWK*/
         L     @15,ADIOHND(,R2)                                    0959
         LA    @01,@AL00959                                        0959
         BALR  @14,@15                                             0959
*                      IF R15 = ZERO THEN    /*IF SUCCESS THEN WRITE*/
         LTR   R15,R15                                             0960
         BNZ   @RF00960                                            0960
*                        CALL IOHND(RITEHIST); /*TO ACCDEV   @G51DGBB*/
         L     @15,ADIOHND(,R2)                                    0961
         LA    @01,@AL00961                                        0961
         BALR  @14,@15                                             0961
*                    END;                                  /*@G51DGBB*/
@RF00960 LA    @14,1                                               0962
         AL    @14,Z                                               0962
         ST    @14,Z                                               0962
@DE00957 L     @08,LISTPTR                                         0962
         C     @14,LISTNUM(,@08)                                   0962
         BNH   @DL00957                                            0962
@DC00957 DS    0H                                                  0963
*                 END;                                     /*@G51DGBB*/
*             END;                                         /*@G51DGBB*/
*           ELSE  /*INCOMPLETE FRAME SET                     @G51DGBB*/
*             DO;                                          /*@G51DGBB*/
         B     @RC00945                                            0965
@RF00945 DS    0H                                                  0966
*               MSGNO = 78; /*MISSING FRAME SET MESSAGE      @G51DGBB*/
         MVI   MSGNO,X'4E'                                         0966
*               CCHINDX = A;   /*CORRECT DEBUG FRAME COUNTS BY */  0967
         L     @14,A                                               0967
         ST    @14,CCHINDX                                         0967
*               CALL ERRMSG;                               /*@G51DGBB*/
         BAL   @14,ERRMSG                                          0968
*               CALL FIXENTRY; /*PASSING ENTRY INDEX TO FIXENTRY*/ 0969
         BAL   @14,FIXENTRY                                        0969
*             END;                                         /*@G51DGBB*/
*         END;                                             /*@G51DGBB*/
@RC00945 LA    @14,1                                               0971
         AL    @14,A                                               0971
         ST    @14,A                                               0971
@DE00944 L     @08,FRAMEPTR(,R2)                                   0971
         C     @14,FRAMENUM(,@08)                                  0971
         BNH   @DL00944                                            0971
@DC00944 DS    0H                                                  0972
*      END;                                                /*@G51DGBB*/
*     GEN(FREEMAIN R,SP=21);                               /*@G51DGBB*/
@RF00936 DS    0H                                                  0973
         FREEMAIN R,SP=21
* END;                                                     /*@G51DGBB*/
*IF ERROR = OVERFLOW × ERROR = ENDFILE THEN                        0975
@RF00934 L     @14,ERROR                                           0975
         C     @14,@CF00066                                        0975
         BE    @RT00975                                            0975
         C     @14,@CF00064                                        0975
         BNE   @RF00975                                            0975
@RT00975 DS    0H                                                  0976
*  ERROR = ZERO;                                           /*@0001VLS*/
         SLR   @14,@14                                             0976
         ST    @14,ERROR                                           0976
*BUG(40) = BUG(2) + BUG(3) + BUG(4) + BUG(5) + BUG(6); /*ADD SAVED*/
@RF00975 L     @14,BUG+4                                           0977
         AL    @14,BUG+8                                           0977
         AL    @14,BUG+12                                          0977
         AL    @14,BUG+16                                          0977
         AL    @14,BUG+20                                          0977
         ST    @14,BUG+156                                         0977
*/*SOFT, MCH, CCH, IPL, AND EOD RECORDS USED IN SYSUM PART ONE*/   0978
*NUMREC = BUG(40);                                         /*@G51DGBB*/
         ST    @14,NUMREC                                          0978
*CVD(NUMREC,PACKPAS); /*PRINT NUMBER OF RECORDS PASSED FILTERING*/ 0979
         CVD   @14,@TS00001                                        0979
         MVC   PACKPAS(4),@TS00001+4                               0979
*PACKPAS = (PACKPAS × '0000000F'X); /*CHANGE SIGN FROM C TO F*/    0980
         OC    PACKPAS(4),@CB01430                                 0980
*UNPK(EDFLD,PACKPAS);                                      /*@Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 0981
*NONBLANK = OFF; /*INITIALIZE TO NO LEADING ZEROS            @G51DGBB*/
         NI    NONBLANK,B'01111111'                                0982
*DO J = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                  /*@Z427VLS*/
         LA    @14,1                                               0983
         ST    @14,J                                               0983
@DL00983 TM    NONBLANK,B'10000000'                                0983
         BNZ   @DC00983                                            0983
*  IF EDIFILD(J) = CHARZERO THEN                                   0984
         LA    @08,EDIFILD-1(@14)                                  0984
         CLI   0(@08),X'F0'                                        0984
         BNE   @RF00984                                            0984
*    EDIFILD(J) = BLANK;                                   /*@Z427VLS*/
         LA    @08,EDIFILD-1(@14)                                  0985
         MVI   0(@08),X'40'                                        0985
*  ELSE                                                            0986
*    NONBLANK = ON;                                        /*@Z427VLS*/
         B     @RC00984                                            0986
@RF00984 OI    NONBLANK,B'10000000'                                0986
*END;                                                      /*@Z427VLS*/
@RC00984 LA    @14,1                                               0987
         AL    @14,J                                               0987
         ST    @14,J                                               0987
         C     @14,@CF00066                                        0987
         BNH   @DL00983                                            0987
@DC00983 DS    0H                                                  0988
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        0988
         ST    @14,PRINTADR(,R2)                                   0988
*CALL IFCMSG(75,ADDR(PRINTBDY));                           /*@Z427VLS*/
         LA    @14,PRINTBDY                                        0989
         ST    @14,@AFTEMPS                                        0989
         L     @15,ADIFCMSG(,R2)                                   0989
         LA    @01,@AL00989                                        0989
         BALR  @14,@15                                             0989
*PRINTED=EDFLD;                                            /*@Z427VLS*/
         MVC   PRINTED(9),EDFLD                                    0990
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0991
         LA    @01,@AL00991                                        0991
         BALR  @14,@15                                             0991
*CVD(ZZ3,PACKPAS);                                         /*@0099VLS*/
         L     @14,ZZ3                                             0992
         CVD   @14,@TS00001                                        0992
         MVC   PACKPAS(4),@TS00001+4                               0992
*PACKPAS = (PACKPAS × '0000000F'X); /*CHANGE SIGN TO F       @Z427VLS*/
         OC    PACKPAS(4),@CB01430                                 0993
*UNPK(EDFLD,PACKPAS); /*CONVERT PACK TO PRINTABLE            @Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 0994
*NONBLANK = OFF; /*REINITIALIZE SWITCH                       @Z427VLS*/
         NI    NONBLANK,B'01111111'                                0995
*DO J = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                  /*@Z427VLS*/
         LA    @14,1                                               0996
         ST    @14,J                                               0996
@DL00996 TM    NONBLANK,B'10000000'                                0996
         BNZ   @DC00996                                            0996
*  IF EDIFILD(J) = CHARZERO THEN                                   0997
         LA    @08,EDIFILD-1(@14)                                  0997
         CLI   0(@08),X'F0'                                        0997
         BNE   @RF00997                                            0997
*    EDIFILD(J) = BLANK;                                   /*@Z427VLS*/
         LA    @08,EDIFILD-1(@14)                                  0998
         MVI   0(@08),X'40'                                        0998
*  ELSE                                                            0999
*    NONBLANK = ON;                                        /*@Z427VLS*/
         B     @RC00997                                            0999
@RF00997 OI    NONBLANK,B'10000000'                                0999
*END;                                                      /*@Z427VLS*/
@RC00997 LA    @14,1                                               1000
         AL    @14,J                                               1000
         ST    @14,J                                               1000
         C     @14,@CF00066                                        1000
         BNH   @DL00996                                            1000
@DC00996 DS    0H                                                  1001
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        1001
         ST    @14,PRINTADR(,R2)                                   1001
*CALL IFCMSG(76,ADDR(PRINTBDY));                           /*@Z427VLS*/
         LA    @14,PRINTBDY                                        1002
         ST    @14,@AFTEMPS                                        1002
         L     @15,ADIFCMSG(,R2)                                   1002
         LA    @01,@AL01002                                        1002
         BALR  @14,@15                                             1002
*PRINTED=EDFLD;                                            /*@Z427VLS*/
         MVC   PRINTED(9),EDFLD                                    1003
*CALL IOHND(RITEPRTR);                                     /*@0001VLS*/
         L     @15,ADIOHND(,R2)                                    1004
         LA    @01,@AL01004                                        1004
         BALR  @14,@15                                             1004
*IF ERROR ^= NOSRTABL THEN                                         1005
         CLC   ERROR(4),@CF00032                                   1005
         BE    @RF01005                                            1005
* DO;                                                      /*@Z427VLS*/
*   SORTNUM = PASSNUM; /*TELL EREP1 HOW MANY RECORDS IN SORTABLE*/ 1007
         L     @14,PASSNUM                                         1007
         ST    @14,SORTNUM(,R2)                                    1007
*   EXCESS = TABSIZE - (SORTNUM * SORTELNT); /*UNUSED SYSUM2 TABLE*/
         L     @08,TABSIZE(,R2)                                    1008
         MH    @14,@CH00966                                        1008
         LCR   @14,@14                                             1008
         ALR   @14,@08                                             1008
         ST    @14,EXCESS                                          1008
*   IF EXCESS > 16 THEN /*IF AT LEAST A DOUBLEWORD TO FREE AFTER*/ 1009
         C     @14,@CF00088                                        1009
         BNH   @RF01009                                            1009
*     DO;               /*ROUNDING THE BYTE COUNT            @Z427VLS*/
*       EXCESS = (EXCESS & DBWRD); /*ROUND DOWN TO DOUBLEWORD AMMOUNT*/
         N     @14,@CF00878                                        1011
         ST    @14,EXCESS                                          1011
*       RESPECIFY (R0,R1) RESTRICTED;                      /*@Z427VLS*/
*       R0 = EXCESS;                                       /*@Z427VLS*/
         LR    R0,@14                                              1013
*       R1 = SORTADR + TABSIZE - EXCESS; /*POINT TO BEGINNING OF UNUSE*
         AL    @08,SORTADR(,R2)                                    1014
         SLR   @08,@14                                             1014
         LR    R1,@08                                              1014
*       GEN(FREEMAIN  R,LV=(0),A=(1));                     /*@Z427VLS*/
         FREEMAIN  R,LV=(0),A=(1)
*       RESPECIFY (R0,R1) UNRESTRICTED;                    /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*     RESPECIFY(R1) UNRESTRICTED;                          /*@Z427VLS*/
@RF01009 DS    0H                                                  1019
*  END;                                                    /*@Z427VLS*/
*IF SORTNUM = ZERO & NUMREC = ZERO THEN                            1020
@RF01005 SLR   @14,@14                                             1020
         C     @14,SORTNUM(,R2)                                    1020
         BNE   @RF01020                                            1020
         C     @14,NUMREC                                          1020
         BNE   @RF01020                                            1020
*  ERROR = TERMINAT;                                       /*@0001VLS*/
         MVC   ERROR(4),@CF00032                                   1021
*IF ERROR = SUCCESS THEN                                           1022
@RF01020 SLR   @14,@14                                             1022
         C     @14,ERROR                                           1022
         BNE   @RF01022                                            1022
* DO;                                                      /*@Z427VLS*/
*  IF NUMREC > ZERO × SORTNUM > ZERO THEN /*IF SOME PART1 RECORDS*/
         C     @14,NUMREC                                          1024
         BL    @RT01024                                            1024
         C     @14,SORTNUM(,R2)                                    1024
         BNL   @RF01024                                            1024
@RT01024 DS    0H                                                  1025
*    CALL SORTONE; /*SORT EVTABLE,SYSUMONE,SET EVLETTER IF UNSET*/ 1025
         BAL   @14,SORTONE                                         1025
*  IF SORTNUM > ZERO THEN /*IF SOME OBR,MDR RECS SAVED IN SYSUM2*/ 1026
@RF01024 L     @14,SORTNUM(,R2)                                    1026
         LTR   @14,@14                                             1026
         BNP   @RF01026                                            1026
*    CALL SORTWO; /*SORT SYSUM2                              @Z427VLS*/
         BAL   @14,SORTWO                                          1027
* END;                                                     /*@Z427VLS*/
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*END; /*CLOSING END TO PROC ENDOFILE                         @Z427VLS*/
@EL00021 DS    0H                                                  1030
@EF00021 DS    0H                                                  1030
@ER00021 LM    @14,@12,@SA00021                                    1030
         BR    @14                                                 1030
*ALLREC: PROC;  /*RECORD DEPENDENT SELECTION CRITTERIA       @Z427VLS*/
ALLREC   STM   @14,@12,@SA00022                                    1031
*               /*COMPARE RECORD ITEMS PRECEEDED BY          @Z427VLS*/
*               /* LRT TO PARAMETER TABLE SELECTION          @Z427VLS*/
*               /*VALUES AND RANGES                          @Z427VLS*/
*PASSFLAG = YES; /*RECORD SELECTED IF PASSFLAG NOT SET TO NO @Z427VLS*/
         OI    PASSFLAG(R2),B'00000001'                            1032
*IF LRTDATE >= STDATE & LRTDATE <= ENDDATE THEN                    1033
         CLC   LRTDATE(4,R7),STDATE(R2)                            1033
         BL    @RF01033                                            1033
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           1033
         BH    @RF01033                                            1033
*  DO;                                                     /*@Z427VLS*/
*    IF (LRTTIME >= STTIME1 & LRTTIME <= ENDTIME1) ×               1035
*       (LRTTIME >= STTIME2 & LRTTIME <= ENDTIME2) THEN            1035
         CLC   LRTTIME(4,R7),STTIME1(R2)                           1035
         BL    @GL00055                                            1035
         CLC   LRTTIME(4,R7),ENDTIME1(R2)                          1035
         BNH   @RT01035                                            1035
@GL00055 CLC   LRTTIME(4,R7),STTIME2(R2)                           1035
         BL    @RF01035                                            1035
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          1035
         BH    @RF01035                                            1035
@RT01035 DS    0H                                                  1036
*      DO;                                                 /*@Z427VLS*/
*        IF CPUPTR ^= ZERO THEN                                    1037
         L     @08,CPUPTR(,R2)                                     1037
         LTR   @08,@08                                             1037
         BZ    @RF01037                                            1037
*         DO;                                              /*@Z427VLS*/
*          CPUOK = NO;                                     /*@Z427VLS*/
         NI    CPUOK,B'11011111'                                   1039
*          DO Z = 1 BY 1 TO CPUNUM WHILE CPUOK = NO;       /*@Z427VLS*/
         LA    @08,1                                               1040
         ST    @08,Z                                               1040
         B     @DE01040                                            1040
@DL01040 TM    CPUOK,B'00100000'                                   1040
         BNZ   @DC01040                                            1040
*           IF CPUVAL(Z) = LRTCPMOD THEN CPUOK = YES;      /*@Z427VLS*/
         MH    @08,@CH00079                                        1041
         L     @06,CPUPTR(,R2)                                     1041
         ALR   @06,@08                                             1041
         AL    @06,@CF01515                                        1041
         CLC   CPUVAL-2(5,@06),LRTCPMOD(R7)                        1041
         BNE   @RF01041                                            1041
         OI    CPUOK,B'00100000'                                   1042
*          END;                                            /*@Z427VLS*/
@RF01041 LA    @08,1                                               1043
         AL    @08,Z                                               1043
         ST    @08,Z                                               1043
@DE01040 L     @06,CPUPTR(,R2)                                     1043
         CH    @08,CPUNUM(,@06)                                    1043
         BNH   @DL01040                                            1043
@DC01040 DS    0H                                                  1044
*          IF CPUOK = NO THEN                                      1044
         TM    CPUOK,B'00100000'                                   1044
         BNZ   @RF01044                                            1044
*           DO;                                            /*@Z427VLS*/
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1046
*           END;                                           /*@Z427VLS*/
*         END;                                             /*@Z427VLS*/
@RF01044 DS    0H                                                  1049
*        IF PASSFLAG = YES THEN                                    1049
@RF01037 TM    PASSFLAG(R2),B'00000001'                            1049
         BNO   @RF01049                                            1049
*        DO;                                               /*@Z427VLS*/
*        IF SHIFT3RD = ON &                                        1051
*          ((LRTDATE = STDATE & LRTTIME < STTIME1) ×               1051
*           (LRTDATE = ENDDATE & LRTTIME > ENDTIME2))              1051
*           THEN                                                   1051
         TM    SHIFT3RD(R2),B'00010000'                            1051
         BNO   @RF01051                                            1051
         CLC   LRTDATE(4,R7),STDATE(R2)                            1051
         BNE   @GL00059                                            1051
         CLC   LRTTIME(4,R7),STTIME1(R2)                           1051
         BL    @RT01051                                            1051
@GL00059 CLC   LRTDATE(4,R7),ENDDATE(R2)                           1051
         BNE   @RF01051                                            1051
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          1051
         BNH   @RF01051                                            1051
@RT01051 DS    0H                                                  1052
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1052
*        END;                                              /*@Z427VLS*/
@RF01051 DS    0H                                                  1054
*      IF PASSFLAG = YES & LRTCPUS = ZERO THEN                     1054
@RF01049 TM    PASSFLAG(R2),B'00000001'                            1054
         BNO   @RF01054                                            1054
         ICM   @08,7,LRTCPUS(R7)                                   1054
         BNZ   @RF01054                                            1054
*       DO;                                                /*@Z427VLS*/
*        MSGNO = 5;                                        /*@Z427VLS*/
         MVI   MSGNO,X'05'                                         1056
*        CALL ERRMSG;                                      /*@Z427VLS*/
         BAL   @14,ERRMSG                                          1057
*        PASSFLAG = NO;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1058
*       END;                                               /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          1061
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         B     @RC01035                                            1061
@RF01035 NI    PASSFLAG(R2),B'11111110'                            1061
*   END;                                                   /*@Z427VLS*/
*  ELSE                                                            1063
*   PASSFLAG = NO;                                         /*@Z427VLS*/
         B     @RC01033                                            1063
@RF01033 NI    PASSFLAG(R2),B'11111110'                            1063
*END;                                                      /*@Z427VLS*/
@EL00022 DS    0H                                                  1064
@EF00022 DS    0H                                                  1064
@ER00022 LM    @14,@12,@SA00022                                    1064
         BR    @14                                                 1064
*SORTWO  : PROC;                                           /*@Z427VLS*/
SORTWO   STM   @14,@12,@SA00023                                    1065
*  /*MUST ADJUST POINTERS TO EVTABLE, SYSCPU AND SYSOLD, AS A RESULT*/
*  /*OF SORT OF EVTABLE                                      @Z427VLS*/
*  DO J = 1 BY 1 TO PASSNUM; /*EXAMINE ALL ENTRIES OF SYSUM2 @Z427VLS*/
         LA    @08,1                                               1066
         ST    @08,J                                               1066
         B     @DE01066                                            1066
@DL01066 DS    0H                                                  1067
*    WORKBYTE = TMPCPUS(J); /*GET CPU,OLD FROM PARTICULAR ENTRY*/  1067
         LR    @06,@08                                             1067
         MH    @06,@CH00966                                        1067
         L     @03,SORTADR(,R2)                                    1067
         ST    @06,@TF00001                                        1067
         ALR   @06,@03                                             1067
         AL    @06,@CF01516                                        1067
         MVC   WORKBYTE(1),TMPCPUS-3(@06)                          1067
*    WORKTWO  = WORKBYTE; /*DITTO                            @Z427VLS*/
         MVC   WORKTWO(1),WORKBYTE                                 1068
*    SRL(WORKBYTE,4); /*WORKBYTE, WORKNUM NOW ARE TMPCPU     @Z427VLS*/
         SLR   @06,@06                                             1069
         IC    @06,WORKBYTE                                        1069
         SRL   @06,4                                               1069
         STC   @06,WORKBYTE                                        1069
*    WORKTWO = (WORKTWO & '0F'X);   /*WORKTWO, WORKNM2 NOW ARE TMPOLD*/
         NI    WORKTWO,X'0F'                                       1070
*    WORKNM2 = WORKNM2 + 1; /*ADJUST INDEX TO START AT ONE, NOT ZERO*/
         LA    @06,1                                               1071
         SLR   @15,@15                                             1071
         IC    @15,WORKNM2                                         1071
         ALR   @15,@06                                             1071
         STC   @15,WORKNM2                                         1071
*    TMPCPUS(J) = FLIPFLOP(WORKNM2);    /*SET SORTED TMPOLD  @Z427VLS*/
         LR    @01,@03                                             1072
         AL    @01,@TF00001                                        1072
         AL    @01,@CF01516                                        1072
         LA    @14,FLIPFLOP-1(@15)                                 1072
         MVC   TMPCPUS-3(1,@01),0(@14)                             1072
*    WORKNM = WORKNM + 1; /*ADJUST INDEX TO START AT ONE, NOT ZERO*/
         SLR   @15,@15                                             1073
         IC    @15,WORKNM                                          1073
         ALR   @06,@15                                             1073
         STC   @06,WORKNM                                          1073
*    WORKTWO = FLIPFLOP(WORKNM);     /*SET SORTED TMPCPU     @Z427VLS*/
         LA    @01,FLIPFLOP-1(@06)                                 1074
         MVC   WORKTWO(1),0(@01)                                   1074
*    SLL(WORKTWO,4); /*SET SORTED TMPCPU TO FIRST FOUR BITS  @Z427VLS*/
         SLR   @06,@06                                             1075
         IC    @06,WORKTWO                                         1075
         SLL   @06,4                                               1075
         STC   @06,WORKTWO                                         1075
*    TMPCPUS(J) = (TMPCPUS(J) × WORKTWO); /*PUT VALUE BACK IN RECORD*/
         LR    @06,@03                                             1076
         AL    @06,@TF00001                                        1076
         AL    @06,@CF01516                                        1076
         OC    TMPCPUS-3(1,@06),WORKTWO                            1076
*    /*CODE ADDED TO SHIFT 3705 ERROR TYPE PAST TMPCPU INDEX FOR*/ 1077
*    /*PROPER SORTING. LAST SECOND CHANGE OCT 13, 1976       @Z427VLS*/
*    WORKTWO = (TMPCPUS(J) & '0F'X); /*GET OLD CPU INDEX     @Z427VLS*/
         LR    @06,@03                                             1077
         AL    @06,@TF00001                                        1077
         AL    @06,@CF01516                                        1077
         MVC   WORKTWO(1),TMPCPUS-3(@06)                           1077
         NI    WORKTWO,X'0F'                                       1077
*    TMPCPUS(J) = (TMPCPUS(J) & 'F0'X); /*ZERO OLD CPU INDEX @Z427VLS*/
         LR    @06,@03                                             1078
         AL    @06,@TF00001                                        1078
         AL    @06,@CF01516                                        1078
         NI    TMPCPUS-3(@06),X'F0'                                1078
*    TMPITEM(J) = (TMPITEM(J) × WORKTWO); /*REPLACE OLD INDEX AT TMPOD*
         AL    @03,@TF00001                                        1079
         AL    @03,@CF01510                                        1079
         OC    TMPITEM-4(1,@03),WORKTWO                            1079
*  END;                                                    /*@Z427VLS*/
         AL    @08,@CF00055                                        1080
         ST    @08,J                                               1080
@DE01066 C     @08,PASSNUM                                         1080
         BNH   @DL01066                                            1080
*/* SORT THAT ONLY EXAMINES AN ENTRY ONCE IF DATA IS IN ORDER*/    1081
*RESPECIFY (R15,R3,R4,R6,R1) RESTRICTED;                   /*@Z427VLS*/
*IF SORTNUM > 1 & DEBUG23 = OFF THEN /*IF AT LEAST TWO RECORDS AND*/
         L     @14,SORTNUM(,R2)                                    1082
         C     @14,@CF00055                                        1082
         BNH   @RF01082                                            1082
         TM    DEBUG23(R2),B'00000001'                             1082
         BNZ   @RF01082                                            1082
*  DO;     /*DEBUG OPTION DOESNT SAY DONT SORT THEN          @Z427VLS*/
* SRTCONT = ((PASSNUM-1)*13) + SORTADR;                    /*@0099VLS*/
         L     @14,PASSNUM                                         1084
         BCTR  @14,0                                               1084
         MH    @14,@CH00966                                        1084
         AL    @14,SORTADR(,R2)                                    1084
         ST    @14,SRTCONT                                         1084
*GENERATE REFS(TMP2,TMPKEY);                               /*@0099VLS*/
    LA   R15,13
    L    R3,SORTADR(R2)
    L    R4,SRTCONT
    LR   R1,R3
    B    DOIT
LOOPBCK1 ALR  R3,R15
         CR   R3,R4
         BNL  DONE
DOIT     CLC  TMPKEY(5,R3),TMPKEY+13(R3)
         BNH  LOOPBCK1
         XC   TMP2(13,R3),TMP2+13(R3)
         XC   TMP2+13(13,R3),TMP2(R3)
         XC   TMP2(13,R3),TMP2+13(R3)
         LR   R6,R3
LOOPBCK2 SR   R6,R15
         CR   R6,R1
         BL   LOOPBCK1
         CLC  TMPKEY(5,R6),TMPKEY+13(R6)
         BNH  LOOPBCK1
         XC   TMP2+13(13,R6),TMP2(R6)
         XC   TMP2(13,R6),TMP2+13(R6)
         XC   TMP2+13(13,R6),TMP2(R6)
          B     LOOPBCK2           TRY COMPARE UP ONE MORE IN TABLE
DONE      EQU   *
*END;                                                      /*@Z427VLS*/
* RESPECIFY (R1,R3,R4,R6,R15) UNRESTRICTED;                /*@Z427VLS*/
*END; /*CLOSING END TO PROC SORTWO                           @Z427VLS*/
@EL00023 DS    0H                                                  1088
@EF00023 DS    0H                                                  1088
@ER00023 LM    @14,@12,@SA00023                                    1088
         BR    @14                                                 1088
*/*                                                          @Z427VLS*/
*MCHFILT: PROC;                                            /*@Z427VLS*/
MCHFILT  STM   @14,@12,@SA00024                                    1089
*IF MCHSYSTR = ON THEN /*IF NON-RECOVERABLE MCH              @Z427VLS*/
         TM    MCHSYSTR(R7),B'10000000'                            1090
         BNO   @RF01090                                            1090
*  SYSUMMCN = SYSUMMCN + 1;                                /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1091
         LA    @06,1                                               1091
         AL    @06,SYSUMMCN(,@08)                                  1091
         ST    @06,SYSUMMCN(,@08)                                  1091
*ELSE            /*IF RECOVERABLE MCH                        @Z427VLS*/
*  SYSUMMCR = SYSUMMCR + 1;                                /*@Z427VLS*/
         B     @RC01090                                            1092
@RF01090 L     @08,SYSUMPTR(,R2)                                   1092
         LA    @06,1                                               1092
         AL    @06,SYSUMMCR(,@08)                                  1092
         ST    @06,SYSUMMCR(,@08)                                  1092
*IF FRAMEPTR ^= ZERO THEN /*IF FRAMETAB HAS BEEN ALLOCATED   @G51DGBB*/
@RC01090 L     @08,FRAMEPTR(,R2)                                   1093
         LTR   @08,@08                                             1093
         BZ    @RF01093                                            1093
*DO;                                                       /*@G51DGBB*/
*GETOUT = NO;                                              /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  1095
*DO A = 1 BY 1 TO MRDNUMBR WHILE GETOUT = NO; /*LOOP THROUGH LIST OF */
         LA    @08,1                                               1096
         ST    @08,A                                               1096
         B     @DE01096                                            1096
@DL01096 TM    GETOUT,B'00001000'                                  1096
         BNZ   @DC01096                                            1096
*                                           /*MERIDIAN-LIKE CPUS   */
*  IF MODEL(A) = LRTMODEL THEN             /*IF MERIDIAN-LIKE CPU */
         ALR   @08,@08                                             1097
         L     @06,MERDCPTR(,R2)                                   1097
         ALR   @06,@08                                             1097
         CLC   MODEL-2(2,@06),LRTMODEL(R7)                         1097
         BNE   @RF01097                                            1097
*    DO;                                                   /*@G51DGBB*/
*      CALL BUILDFTB; /*SEE IF UNIQUE, BUILD FRAMTAB ENTRY IF IT IS */
         BAL   @14,BUILDFTB                                        1099
*      GETOUT = YES;  /*EXIT LOOP                            @G51DGBB*/
         OI    GETOUT,B'00001000'                                  1100
*    END;                                                  /*@G51DGBB*/
*END;                                                      /*@G51DGBB*/
@RF01097 LA    @08,1                                               1102
         AL    @08,A                                               1102
         ST    @08,A                                               1102
@DE01096 L     @06,MERDCPTR(,R2)                                   1102
         CH    @08,MRDNUMBR(,@06)                                  1102
         BNH   @DL01096                                            1102
@DC01096 DS    0H                                                  1103
*END;                                                      /*@G51DGBB*/
*END;                                                      /*@Z427VLS*/
@EL00024 DS    0H                                                  1104
@EF00024 DS    0H                                                  1104
@ER00024 LM    @14,@12,@SA00024                                    1104
         BR    @14                                                 1104
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*SOFTFILT: PROC;                                           /*@Z427VLS*/
SOFTFILT STM   @14,@12,12(@13)                                     1105
*IF SFTKEY1 = HEX40 THEN /*IF PROGRAM ABEND                  @Z427VLS*/
         CLI   SFTKEY1(R7),X'40'                                   1106
         BNE   @RF01106                                            1106
* DO;                                                      /*@0001VLS*/
*  SYSUMPEA = SYSUMPEA + ONE;                              /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1108
         LA    @06,1                                               1108
         L     @03,SYSUMPEA(,@08)                                  1108
         ALR   @03,@06                                             1108
         ST    @03,SYSUMPEA(,@08)                                  1108
*  BUG(2) = BUG(2) + ONE;                                  /*@0001VLS*/
         AL    @06,BUG+4                                           1109
         ST    @06,BUG+4                                           1109
* END;                                                     /*@0001VLS*/
*ELSE                                                              1111
*  DO;                                                     /*@Z427VLS*/
         B     @RC01106                                            1111
@RF01106 DS    0H                                                  1112
*    IF SFTKEY1 = HEX42 THEN /*IF PROGRAM INTERRUPT          @Z427VLS*/
         CLI   SFTKEY1(R7),X'42'                                   1112
         BNE   @RF01112                                            1112
*     DO;                                                  /*@0001VLS*/
*      SYSUMPEI = SYSUMPEI + ONE;                          /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1114
         LA    @06,1                                               1114
         L     @03,SYSUMPEI(,@08)                                  1114
         ALR   @03,@06                                             1114
         ST    @03,SYSUMPEI(,@08)                                  1114
*      BUG(2) = BUG(2) + ONE;                              /*@0001VLS*/
         AL    @06,BUG+4                                           1115
         ST    @06,BUG+4                                           1115
*     END;                                                 /*@0001VLS*/
*    ELSE                                                          1117
*      DO;                                                 /*@Z427VLS*/
         B     @RC01112                                            1117
@RF01112 DS    0H                                                  1118
*        IF SFTKEY1 = HEX44 THEN /*IF PROGRAM RESTART        @Z427VLS*/
         CLI   SFTKEY1(R7),X'44'                                   1118
         BNE   @RF01118                                            1118
*          DO;                                             /*@0001VLS*/
*          SYSUMPER = SYSUMPER + ONE;                      /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1120
         LA    @06,1                                               1120
         L     @03,SYSUMPER(,@08)                                  1120
         ALR   @03,@06                                             1120
         ST    @03,SYSUMPER(,@08)                                  1120
*           BUG(2) = BUG(2) + ONE;                         /*@0001VLS*/
         AL    @06,BUG+4                                           1121
         ST    @06,BUG+4                                           1121
*          END;                                            /*@0001VLS*/
*      END;                                                /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*                                                                  1124
*END;                                                      /*@Z427VLS*/
@EL00025 DS    0H                                                  1125
@EF00025 DS    0H                                                  1125
@ER00025 LM    @14,@12,12(@13)                                     1125
         BR    @14                                                 1125
*ERRMSG: PROC;                                             /*@Z427VLS*/
ERRMSG   STM   @14,@12,@SA00026                                    1126
*RESPECIFY(R3) RESTRICTED;                                 /*@Z427VLS*/
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1128
         ST    @08,PRINTADR(,R2)                                   1128
*IF MSGNO=1  ×                                           /* @XA19728 */
*   MSGNO=2  THEN                                        /* @XA19728 */
         CLI   MSGNO,1                                             1129
         BE    @RT01129                                            1129
         CLI   MSGNO,2                                             1129
         BNE   @RF01129                                            1129
@RT01129 DS    0H                                                  1130
*  DO;                                                     /*@GZZDGVS*/
*    ZEROALL=NO;         /* DONT RESET LOGREC HEADER OF ALL  @GZZDGVS*/
         NI    ZEROALL(R2),B'10111111'                             1131
*                        /* RECORDS NOT PROCESSED           @XA19728 */
*    CALL IFCMSG(55,ADDR(PRINTBDY));  /*GET FAILED SORT TBL @Z427VLS */
         LA    @08,PRINTBDY                                        1132
         ST    @08,@AFTEMPS+4                                      1132
         L     @15,ADIFCMSG(,R2)                                   1132
         LA    @01,@AL01132                                        1132
         BALR  @14,@15                                             1132
*  END;                                                    /*@GZZDGVS*/
*IF MSGNO = 3 THEN                                                 1134
@RF01129 CLI   MSGNO,3                                             1134
         BNE   @RF01134                                            1134
*   CALL IFCMSG(53,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1135
         ST    @08,@AFTEMPS+4                                      1135
         L     @15,ADIFCMSG(,R2)                                   1135
         LA    @01,@AL01135                                        1135
         BALR  @14,@15                                             1135
*IF MSGNO = 6 THEN  /*TOO MANY CPU SERIAL NUMBERS IN INPUT STREAM*/
@RF01134 CLI   MSGNO,6                                             1136
         BNE   @RF01136                                            1136
*  DO;                                                     /*@Z427VLS*/
*   CALL IFCMSG(74,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1138
         ST    @08,@AFTEMPS+4                                      1138
         L     @15,ADIFCMSG(,R2)                                   1138
         LA    @01,@AL01138                                        1138
         BALR  @14,@15                                             1138
*    ER3 = EVSERIAL(K);                                    /*@Z427VLS*/
         L     @08,K                                               1139
         MH    @08,@CH00081                                        1139
         L     @06,EVPTR(,R2)                                      1139
         ALR   @06,@08                                             1139
         MVC   ER3(3),EVSERIAL-6(@06)                              1139
*    SLL(ERSER,4); /*SHIFT SERIAL IN ORDER TO ADD PACKED SIGN*/    1140
         L     @08,ERSER                                           1140
         SLL   @08,4                                               1140
         ST    @08,ERSER                                           1140
*    ER3 = (ER3 × '00000F'X); /*ADD SIGN FOR UNPACKING OPERATION*/ 1141
         OC    ER3(3),@CB00228                                     1141
*    UNPK(PRNTSER,ERSER);                                  /*@Z427VLS*/
         UNPK  PRNTSER(7),ERSER(4)                                 1142
*  END;                                                    /*@Z427VLS*/
*IF MSGNO = 5   THEN                                               1144
@RF01136 CLI   MSGNO,5                                             1144
         BNE   @RF01144                                            1144
*   CALL IFCMSG(72,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1145
         ST    @08,@AFTEMPS+4                                      1145
         L     @15,ADIFCMSG(,R2)                                   1145
         LA    @01,@AL01145                                        1145
         BALR  @14,@15                                             1145
*IF MSGNO = 78 THEN                                                1146
@RF01144 CLI   MSGNO,78                                            1146
         BNE   @RF01146                                            1146
* DO;                                                      /*@G51DGBB*/
*   CALL IFCMSG(78,ADDR(PRINTBDY));                        /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1148
         ST    @08,@AFTEMPS+4                                      1148
         L     @15,ADIFCMSG(,R2)                                   1148
         LA    @01,@AL01148                                        1148
         BALR  @14,@15                                             1148
*   NUMBER = 3;                                            /*@G51DGBB*/
         MVC   NUMBER(4),@CF00076                                  1149
*   ADDNXT = ADDR(PFRAMSER);                               /*@G51DGBB*/
         LA    @08,PFRAMSER                                        1150
         ST    @08,ADDNXT                                          1150
*   NEXTBY = ADDR(FRAMESER(CCHINDX));                      /*@G51DGBB*/
         L     @08,CCHINDX                                         1151
         MH    @08,@CH00227                                        1151
         L     @06,FRAMEPTR(,R2)                                   1151
         AL    @06,@CF01504                                        1151
         LA    @08,FRAMESER-4(@08,@06)                             1151
         ST    @08,NEXTBY                                          1151
*   CALL CONVERT;                                          /*@G51DGBB*/
         BAL   @14,CONVERT                                         1152
*   NUMBER = 2;                                            /*@G51DGBB*/
         MVC   NUMBER(4),@CF00074                                  1153
*   ADDNXT = ADDR(PFRAMMOD);                               /*@G51DGBB*/
         LA    @08,PFRAMMOD                                        1154
         ST    @08,ADDNXT                                          1154
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX));                      /*@G51DGBB*/
         L     @08,CCHINDX                                         1155
         MH    @08,@CH00227                                        1155
         L     @06,FRAMEPTR(,R2)                                   1155
         AL    @06,@CF01517                                        1155
         LA    @08,FRAMEMOD-7(@08,@06)                             1155
         ST    @08,NEXTBY                                          1155
*   CALL CONVERT;                                          /*@G51DGBB*/
         BAL   @14,CONVERT                                         1156
*  END;                                                    /*@G51DGBB*/
*IF MSGNO = 79 & DEBUG16 = ON THEN /*IF PARTIAL FRAME SET AND DEBUG16*/
@RF01146 CLI   MSGNO,79                                            1158
         BNE   @RF01158                                            1158
         TM    DEBUG16(R2),B'10000000'                             1158
         BNO   @RF01158                                            1158
*  DO;                                                     /*@G51DGBB*/
*    NUMBER = 3;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00076                                  1160
*    ADDNXT = ADDR(PARSER);                                /*@G51DGBB*/
         LA    @08,PARSER                                          1161
         ST    @08,ADDNXT                                          1161
*    NEXTBY = ADDR(FRAMESER(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1162
         MH    @08,@CH00227                                        1162
         L     @06,FRAMEPTR(,R2)                                   1162
         AL    @06,@CF01504                                        1162
         LA    @08,FRAMESER-4(@08,@06)                             1162
         ST    @08,NEXTBY                                          1162
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1163
*    NUMBER = 2;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00074                                  1164
*    ADDNXT = ADDR(PARMOD);                                /*@G51DGBB*/
         LA    @08,PARMOD                                          1165
         ST    @08,ADDNXT                                          1165
*    NEXTBY = ADDR(FRAMEMOD(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1166
         MH    @08,@CH00227                                        1166
         L     @06,FRAMEPTR(,R2)                                   1166
         AL    @06,@CF01517                                        1166
         LA    @08,FRAMEMOD-7(@08,@06)                             1166
         ST    @08,NEXTBY                                          1166
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1167
*    NUMBER = 1;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00055                                  1168
*    ADDNXT = ADDR(PARREP);                                /*@G51DGBB*/
         LA    @08,PARREP                                          1169
         ST    @08,ADDNXT                                          1169
*    NEXTBY = ADDR(FRAMETYP(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1170
         MH    @08,@CH00227                                        1170
         L     @06,FRAMEPTR(,R2)                                   1170
         AL    @06,@CF01502                                        1170
         LA    @08,FRAMETYP-17(@08,@06)                            1170
         ST    @08,NEXTBY                                          1170
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1171
*    PRINTBDY(1:58) = PARTIAL;                             /*@G51DGBB*/
         MVC   PRINTBDY(58),PARTIAL                                1172
*  END;                                                    /*@G51DGBB*/
*IF MSGNO = 40 THEN                                                1174
@RF01158 CLI   MSGNO,40                                            1174
         BNE   @RF01174                                            1174
* CALL IFCMSG(40,ADDR(PRINTBDY));                          /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1175
         ST    @08,@AFTEMPS+4                                      1175
         L     @15,ADIFCMSG(,R2)                                   1175
         LA    @01,@AL01175                                        1175
         BALR  @14,@15                                             1175
*IF MSGNO = 24 THEN                                                1176
@RF01174 CLI   MSGNO,24                                            1176
         BNE   @RF01176                                            1176
* CALL IFCMSG(24,ADDR(PRINTBDY));                          /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1177
         ST    @08,@AFTEMPS+4                                      1177
         L     @15,ADIFCMSG(,R2)                                   1177
         LA    @01,@AL01177                                        1177
         BALR  @14,@15                                             1177
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
@RF01176 L     @15,ADIOHND(,R2)                                    1178
         LA    @01,@AL01178                                        1178
         BALR  @14,@15                                             1178
*END;                                                      /*@Z427VLS*/
@EL00026 DS    0H                                                  1179
@EF00026 DS    0H                                                  1179
@ER00026 LM    @14,@12,@SA00026                                    1179
         BR    @14                                                 1179
*BUGCNTS: PROC;                                            /*@Z427VLS*/
BUGCNTS  STM   @14,@12,@SA00027                                    1180
*/*PRINT OUT COUNTS OF RECORDS PROCESSED IF DEBUG16 IS ON    @Z427VLS*/
*PRINTADR = ADDR(PRINTLIN); /*ADDRESS OF PRINT LINE TO IFCIOND*/   1181
         LA    @08,PRINTLIN                                        1181
         ST    @08,PRINTADR(,R2)                                   1181
*PRINTLIN = ERRLINE(31);                                   /*@G51DGBB*/
         MVI   PRINTLIN+63,C' '                                    1182
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1182
         MVC   PRINTLIN(63),ERRLINE+1890                           1182
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1183
         LA    @01,@AL01183                                        1183
         BALR  @14,@15                                             1183
* DO J = 1 BY 1 TO 30;                                     /*@G51DGBB*/
         LA    @08,1                                               1184
         ST    @08,J                                               1184
@DL01184 DS    0H                                                  1185
*  NUMREC = BUG(J);                                        /*@Z427VLS*/
         SLA   @08,2                                               1185
         L     @08,BUG-4(@08)                                      1185
         ST    @08,NUMREC                                          1185
*  CVD(NUMREC,PACKPAS);                                    /*@Z427VLS*/
         CVD   @08,@TS00001                                        1186
         MVC   PACKPAS(4),@TS00001+4                               1186
*  PACKPAS = (PACKPAS × '0000000F'X);                      /*@Z427VLS*/
         OC    PACKPAS(4),@CB01430                                 1187
*  UNPK(EDFLD,PACKPAS);                                    /*@Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 1188
*  NONBLANK = OFF;                                         /*@Z427VLS*/
         NI    NONBLANK,B'01111111'                                1189
*  DO K = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                /*@Z427VLS*/
         LA    @08,1                                               1190
         ST    @08,K                                               1190
@DL01190 TM    NONBLANK,B'10000000'                                1190
         BNZ   @DC01190                                            1190
*    IF EDIFILD(K) = CHARZERO THEN                                 1191
         LA    @06,EDIFILD-1(@08)                                  1191
         CLI   0(@06),X'F0'                                        1191
         BNE   @RF01191                                            1191
*      EDIFILD(K) = BLANK;                                 /*@Z427VLS*/
         LA    @06,EDIFILD-1(@08)                                  1192
         MVI   0(@06),X'40'                                        1192
*    ELSE                                                          1193
*      NONBLANK = ON;                                      /*@Z427VLS*/
         B     @RC01191                                            1193
@RF01191 OI    NONBLANK,B'10000000'                                1193
*  END;                                                    /*@Z427VLS*/
@RC01191 LA    @08,1                                               1194
         AL    @08,K                                               1194
         ST    @08,K                                               1194
         C     @08,@CF00066                                        1194
         BNH   @DL01190                                            1194
@DC01190 DS    0H                                                  1195
*  ERXNUM(J) = EDFLD;                                      /*@Z427VLS*/
         L     @08,J                                               1195
         MH    @08,@CH01491                                        1195
         LA    @06,ERXNUM-63(@08)                                  1195
         MVC   0(9,@06),EDFLD                                      1195
*  PRINTLIN = ERRLINE(J);                                  /*@Z427VLS*/
         MVI   PRINTLIN+63,C' '                                    1196
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1196
         LA    @06,ERRLINE-63(@08)                                 1196
         MVC   PRINTLIN(63),0(@06)                                 1196
*  PRINTADR = ADDR(PRINTLIN);                              /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1197
         ST    @08,PRINTADR(,R2)                                   1197
*  CALL IOHND(RITEPRTR);                                   /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1198
         LA    @01,@AL01198                                        1198
         BALR  @14,@15                                             1198
* END;                                                     /*@Z427VLS*/
         LA    @08,1                                               1199
         AL    @08,J                                               1199
         ST    @08,J                                               1199
         C     @08,@CF01458                                        1199
         BNH   @DL01184                                            1199
*END; /*CLOSING END TO PROC BUGCNTS                          @Z427VLS*/
@EL00027 DS    0H                                                  1200
@EF00027 DS    0H                                                  1200
@ER00027 LM    @14,@12,@SA00027                                    1200
         BR    @14                                                 1200
*/*THIS PROC WILL EXAMINE THE MERIDIAN MCH OR CCH IN ORDER TO BUILD*/
*/*FRAMTAB ENTRIES FOR UNIQUE RECORDS                        @G51DGBB*/
*BUILDFTB: PROC; /*BUILD NEW ENTRY IF CPU IS UNIQUE          @G51DGBB*/
BUILDFTB STM   @14,@12,@SA00028                                    1201
*LOOPOUT = NO;                                             /*@G51DGBB*/
         NI    LOOPOUT,B'11111011'                                 1202
*DO Y = 1 BY 1 TO EVMAX WHILE LOOPOUT = NO; /*EXAMINE ALL FRAMETAB*/
         LA    @08,1                                               1203
         ST    @08,Y                                               1203
@DL01203 TM    LOOPOUT,B'00000100'                                 1203
         BNZ   @DC01203                                            1203
*  IF FRAMECPU(Y) = LRTCPMOD THEN  /*IF CPU ALREADY IN TABLE THEN*/
         MH    @08,@CH00227                                        1204
         L     @06,FRAMEPTR(,R2)                                   1204
         ALR   @06,@08                                             1204
         AL    @06,@CF01504                                        1204
         CLC   FRAMECPU-4(5,@06),LRTCPMOD(R7)                      1204
         BNE   @RF01204                                            1204
*    LOOPOUT = YES; /*EXIT LOOP                              @G51DGBB*/
         OI    LOOPOUT,B'00000100'                                 1205
*  ELSE     /*IF ENTRY DOESNT MATCH THE FRAME                @G51DGBB*/
*    DO;                                                   /*@G51DGBB*/
         B     @RC01204                                            1206
@RF01204 DS    0H                                                  1207
*      IF FRAMECPU(Y) = '0000000000'X THEN /*NO MATCH ,ALL ENTS CHKED*/
         L     @08,Y                                               1207
         MH    @08,@CH00227                                        1207
         L     @06,FRAMEPTR(,R2)                                   1207
         ST    @08,@TF00001                                        1207
         ALR   @08,@06                                             1207
         AL    @08,@CF01504                                        1207
         CLC   FRAMECPU-4(5,@08),@CB00288                          1207
         BNE   @RF01207                                            1207
*        DO;                                               /*@G51DGBB*/
*          FRAMECPU(Y) = LRTCPMOD;                         /*@G51DGBB*/
         LR    @08,@06                                             1209
         AL    @08,@TF00001                                        1209
         AL    @08,@CF01504                                        1209
         MVC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      1209
*          FRAMENUM = FRAMENUM + 1; /*ADD 1 TO SET ENTRY COUNT*/   1210
         LA    @08,1                                               1210
         AL    @08,FRAMENUM(,@06)                                  1210
         ST    @08,FRAMENUM(,@06)                                  1210
*          LOOPOUT = YES;                                  /*@G51DGBB*/
         OI    LOOPOUT,B'00000100'                                 1211
*        END;                                              /*@G51DGBB*/
*      ELSE                                                        1213
*        IF Y = EVMAX THEN /*UNIQUE ENTRY BUT NOT ROOM IN TABLE*/  1213
         B     @RC01207                                            1213
@RF01207 CLC   Y(4),@CF00034                                       1213
         BNE   @RF01213                                            1213
*          DO;                                             /*@G51DGBB*/
*            IF ONETIME = NO THEN   /*ISSUE MESSAGE ONLY ONCE*/    1215
         TM    ONETIME,B'00000001'                                 1215
         BNZ   @RF01215                                            1215
*              DO;                                         /*@G51DGBB*/
*                MSGNO = 24;                               /*@G51DGBB*/
         MVI   MSGNO,X'18'                                         1217
*                CALL ERRMSG;                              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1218
*                ONETIME = YES;                            /*@G51DGBB*/
         OI    ONETIME,B'00000001'                                 1219
*              END;                                        /*@G51DGBB*/
*          END;                                            /*@G51DGBB*/
@RF01215 DS    0H                                                  1222
*   END;                                                   /*@G51DGBB*/
@RF01213 DS    0H                                                  1222
@RC01207 DS    0H                                                  1223
* END;                                                     /*@G51DGBB*/
@RC01204 LA    @08,1                                               1223
         AL    @08,Y                                               1223
         ST    @08,Y                                               1223
         C     @08,@CF00034                                        1223
         BNH   @DL01203                                            1223
@DC01203 DS    0H                                                  1224
*END; /*END OF PROC BUILDFTB                                 @G51DGBB*/
@EL00028 DS    0H                                                  1224
@EF00028 DS    0H                                                  1224
@ER00028 LM    @14,@12,@SA00028                                    1224
         BR    @14                                                 1224
*FRAMEREP: PROC; /*REPLACE FRAME IF MORE CURRENT FRAME FOUND @G51DGBB*/
FRAMEREP STM   @14,@12,@SA00029                                    1225
*                /*COMPLETE ENTRY IF NO DATE ETC.            @G51DGBB*/
*                /*APPEND LOCATION OF FRAME EXTERNAL LOCATION LIST*/
*GETOUT = NO;                                              /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  1226
*DO X = 1 BY 1 TO FRAMENUM WHILE GETOUT = NO; /*LOOP THROUGH ALL SET*/
         LA    @08,1                                               1227
         ST    @08,X                                               1227
         B     @DE01227                                            1227
@DL01227 TM    GETOUT,B'00001000'                                  1227
         BNZ   @DC01227                                            1227
*                                             /*ENTRIES OF FRAMETAB */
*  IF FRAMECPU(X) = LRTCPMOD THEN             /*IF RECORD CPU MODEL */
         LR    @06,@08                                             1228
         MH    @06,@CH00227                                        1228
         L     @15,FRAMEPTR(,R2)                                   1228
         ST    @06,@TF00001                                        1228
         ALR   @06,@15                                             1228
         AL    @06,@CF01504                                        1228
         CLC   FRAMECPU-4(5,@06),LRTCPMOD(R7)                      1228
         BNE   @RF01228                                            1228
*    DO;                                      /*SERIAL MATCHES THOSE*/
*      CCHINDX = X;  /*SAVE INDEX*/           /*OF THE ENTRY @G51DGBB*/
         ST    @08,CCHINDX                                         1230
*      IF FRAMEDT(X) < LRTDT THEN             /*IF REC DATE GREATER */
         AL    @15,@TF00001                                        1231
         AL    @15,@CF01519                                        1231
         CLC   FRAMEDT-9(8,@15),LRTDT(R7)                          1231
         BNL   @RF01231                                            1231
*        DO;                                  /*THAN ENTRY DATE     */
*              CALL FIXENTRY;               /*DELETE OLD FRAME SET*/
         BAL   @14,FIXENTRY                                        1233
*              FRAMEDT(X) = LRTDT;           /*SAVE HIGH DATE*/    1234
         L     @08,X                                               1234
         MH    @08,@CH00227                                        1234
         L     @06,FRAMEPTR(,R2)                                   1234
         ALR   @06,@08                                             1234
         AL    @06,@CF01519                                        1234
         MVC   FRAMEDT-9(8,@06),LRTDT(R7)                          1234
*              CALL BUILDTTR;                /*SAVE FRAME LOCATION*/
         BAL   @14,BUILDTTR                                        1235
*               FRAMEYES = YES;/*SAVE SUCCEEDING FRAMES OF THIS    */
         OI    FRAMEYES,B'00000010'                                1236
*                              /*LOGICAL SET                 @G51DGBB*/
*         END;                                             /*@G51DGBB*/
*       ELSE  /*IMPLIES DATE IS LOW OR EQUAL                 @G51DGBB*/
*        DO;                                               /*@G51DGBB*/
         B     @RC01231                                            1238
@RF01231 DS    0H                                                  1239
*         IF FRAMEDT(X) = LRTDT THEN /*IF TABLE DATE EQUALS RECORD DAT*
         L     @08,X                                               1239
         MH    @08,@CH00227                                        1239
         L     @06,FRAMEPTR(,R2)                                   1239
         ST    @08,@TF00001                                        1239
         ALR   @08,@06                                             1239
         AL    @08,@CF01519                                        1239
         CLC   FRAMEDT-9(8,@08),LRTDT(R7)                          1239
         BNE   @RF01239                                            1239
*           DO;                                            /*@G51DGBB*/
*            IF FRAMETYP(X) ^= ALLALL THEN                         1241
         AL    @06,@TF00001                                        1241
         AL    @06,@CF01502                                        1241
         CLI   FRAMETYP-17(@06),X'FF'                              1241
         BE    @RF01241                                            1241
*             DO;                                          /*@G51DGBB*/
*                      CALL FIXENTRY; /*DELETE INCOMPLETE SET       */
         BAL   @14,FIXENTRY                                        1243
*                      MSGNO = 79; /*ISSUE FRAME SET INCOMPLETE MESS*/
         MVI   MSGNO,X'4F'                                         1244
*                      CALL ERRMSG;                        /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1245
*                      CALL BUILDTTR; /*SAVE THIS FRAME      @G51DGBB*/
         BAL   @14,BUILDTTR                                        1246
*                      FRAMEYES = YES; /*SAVE SUCCEEDING MEMBERS */
         OI    FRAMEYES,B'00000010'                                1247
*             END;                                         /*@G51DGBB*/
*            ELSE  /*COMPLETE SET FOR THIS DATE ALREADY EXISTS      */
*               DO; /*FRAMETYP IS EQUAL TO ALLALL            @G51DGBB*/
         B     @RC01241                                            1249
@RF01241 DS    0H                                                  1250
*                   FRAMEYES = NO;/*DELETE SUCCEEDING FRAMES OF SET */
         NI    FRAMEYES,B'11111101'                                1250
*                   BUG(30) = BUG(30) + 1; /*COUNT FRAME AS NOT USED*/
         LA    @08,1                                               1251
         AL    @08,BUG+116                                         1251
         ST    @08,BUG+116                                         1251
*               END;                                       /*@G51DGBB*/
*        END; /*END OF CODE IF DATE IN RECORD EQUALS DATE IN TABLE*/
*       ELSE /*DATE IN TABLE GREATER THAN FRAME RECORD DATE  @G51DGBB*/
*        BUG(30) = BUG(30)  + 1;                           /*@G51DGBB*/
         B     @RC01239                                            1254
@RF01239 LA    @08,1                                               1254
         AL    @08,BUG+116                                         1254
         ST    @08,BUG+116                                         1254
*    END; /*END OF CODE IF DATE IN RECORD IS LOW OR EQUAL    @G51DGBB*/
@RC01239 DS    0H                                                  1256
*  GETOUT = YES; /*GET OUT OF LOOP AFTER CPU MATCH           @G51DGBB*/
@RC01231 OI    GETOUT,B'00001000'                                  1256
* END; /*END OF CODE FOR A RECORD TO ENTRY CPU MATCH         @G51DGBB*/
*END; /*END OF FRAMETAB LOOP                                 @G51DGBB*/
@RF01228 LA    @08,1                                               1258
         AL    @08,X                                               1258
         ST    @08,X                                               1258
@DE01227 L     @06,FRAMEPTR(,R2)                                   1258
         C     @08,FRAMENUM(,@06)                                  1258
         BNH   @DL01227                                            1258
@DC01227 DS    0H                                                  1259
*IF GETOUT = NO THEN /*MERIDIAN FRAME BUT NO ROOM IN TABLE   @G51DGBB*/
         TM    GETOUT,B'00001000'                                  1259
         BNZ   @RF01259                                            1259
*  BUG(30) = BUG(30) + 1;                                  /*@G51DGBB*/
         LA    @08,1                                               1260
         AL    @08,BUG+116                                         1260
         ST    @08,BUG+116                                         1260
*END; /*END OF PROC FRAMEREP                                 @G51DGBB*/
@EL00029 DS    0H                                                  1261
@EF00029 DS    0H                                                  1261
@ER00029 LM    @14,@12,@SA00029                                    1261
         BR    @14                                                 1261
*BUILDTTR: PROC; /*SAVE LOCATION OF A FRAME IN LISTLOC       @G51DGBB*/
BUILDTTR STM   @14,@12,@SA00030                                    1262
*RESPECIFY (R0,R1,R4,R15) RESTRICTED;                      /*@G51DGBB*/
*IF (LRTKEY1 & GENREC) = HEXA0 THEN /* IF MCH FRAME          @G51DGBB*/
         MVC   @TS00001(1),LRTKEY1(R7)                             1264
         NI    @TS00001,X'F0'                                      1264
         CLI   @TS00001,X'A0'                                      1264
         BNE   @RF01264                                            1264
*  DO;                                                     /*@G51DGBB*/
*    IF FRAMLOCM(CCHINDX) = ZERO THEN /*IF LISTLOC CORE FOR A CPU*/
         L     @14,CCHINDX                                         1266
         MH    @14,@CH00227                                        1266
         L     @08,FRAMEPTR(,R2)                                   1266
         AL    @08,@CF01512                                        1266
         L     @14,FRAMLOCM-20(@14,@08)                            1266
         LTR   @14,@14                                             1266
         BNZ   @RF01266                                            1266
*      DO;                            /*IS UNALLOCATED       @G51DGBB*/
*        R0 = LISTBENT * LISTMAX * 2; /*ALLOCATE CORE FOR BOTH CCH*/
         LA    R0,500                                              1268
*        R0 = R0 + 12;                /*AND MCH FRAME LOCATIONS   */
         AL    R0,@CF00032                                         1269
*        GEN(GETMAIN EC,LV=(0),A=TMPSTORE,SP=21); /*GET STORAGE*/  1270
         GETMAIN EC,LV=(0),A=TMPSTORE,SP=21
*        IF R15 = SUCCESS THEN                                     1271
         LTR   R15,R15                                             1271
         BNZ   @RF01271                                            1271
*          DO;                                             /*@G51DGBB*/
*            R1 = TMPSTORE;           /*SET STORAGE ADDRESS IN REG 1*/
         L     R1,TMPSTORE                                         1273
*            FRAMLOCM(CCHINDX) = R1;  /*SET POINTERS TO LISTLOC   */
         L     @14,CCHINDX                                         1274
         MH    @14,@CH00227                                        1274
         L     @08,FRAMEPTR(,R2)                                   1274
         AL    @08,@CF01512                                        1274
         ST    R1,FRAMLOCM-20(@14,@08)                             1274
*            R1 = R1+LISTBENT *       /*TABLES FOR BOTH CCL AND MCH*/
*                LISTMAX+4;           /*FRAMES               @G51DGBB*/
         AL    R1,@CF01495                                         1275
*            R0 = ZERO;          /*ENSURE THAT TABLE ON WORD BOUNDARY*/
         SLR   R0,R0                                               1276
*            R4 = 4;             /*DIVIDE BY NUMBER OF BYTES IN WORD*/
         LA    R4,4                                                1277
*            GEN(DR R0,R4);                                /*@G51DGBB*/
         DR R0,R4
*            IF R0 > ZERO THEN /*REMAINDER MEANS NOT INTEGRAL NUMBER*/
         LTR   R0,R0                                               1279
         BNP   @RF01279                                            1279
*                              /*NUMBER OF DOUBLEWORDS.      @G51DGBB*/
*              R1 = R1 + 1; /*ADD ONE EXTRA FULL WORD        @G51DGBB*/
         AL    R1,@CF00055                                         1280
*            R1 = R1 * FOUR; /*RESET ONE TO NUMBER OF BYTES  @G51DGBB*/
@RF01279 SLL   R1,2                                                1281
*            FRAMLOCC(CCHINDX) = R1; /*SET POINTER TO CCH CCHHR TABLE*/
         L     @14,CCHINDX                                         1282
         MH    @14,@CH00227                                        1282
         L     @08,FRAMEPTR(,R2)                                   1282
         ST    R1,FRAMLOCC-24(@14,@08)                             1282
*            LISTPTR = R1;      /*ESTABLISH ADDRESSABILITY FOR CCH TB*/
         ST    R1,LISTPTR                                          1283
*            LISTNUM = ZERO;    /*ZERO CCH LISTLOC TABLE     @G51DGBB*/
         L     @14,LISTPTR                                         1284
         SLR   @08,@08                                             1284
         ST    @08,LISTNUM(,@14)                                   1284
*            DO Y = 1 BY 1 TO LISTMAX;                     /*@G51DGBB*/
         LA    @14,1                                               1285
         ST    @14,Y                                               1285
@DL01285 DS    0H                                                  1286
*              LISTCCHR(Y) = LISTCCHR(Y) &&                        1286
*                            LISTCCHR(Y);                  /*@G51DGBB*/
         LR    @08,@14                                             1286
         MH    @08,@CH00079                                        1286
         L     @06,LISTPTR                                         1286
         ALR   @06,@08                                             1286
         BCTR  @06,0                                               1286
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1286
*            END;                                          /*@G51DGBB*/
         AL    @14,@CF00055                                        1287
         ST    @14,Y                                               1287
         C     @14,@CF00293                                        1287
         BNH   @DL01285                                            1287
*            LISTPTR = FRAMLOCM(CCHINDX); /*ADDRESS OF MCH LISTLOC */
         L     @14,CCHINDX                                         1288
         MH    @14,@CH00227                                        1288
         L     @08,FRAMEPTR(,R2)                                   1288
         AL    @08,@CF01512                                        1288
         L     @14,FRAMLOCM-20(@14,@08)                            1288
         ST    @14,LISTPTR                                         1288
*            DO Y = 1 BY 1 TO LISTMAX;   /* ZERO MCH LISTLOC TABLE  */
         LA    @14,1                                               1289
         ST    @14,Y                                               1289
@DL01289 DS    0H                                                  1290
*            LISTCCHR(Y) = LISTCCHR(Y) &&                          1290
*                          LISTCCHR(Y);                    /*@G51DGBB*/
         LR    @08,@14                                             1290
         MH    @08,@CH00079                                        1290
         L     @06,LISTPTR                                         1290
         ALR   @06,@08                                             1290
         BCTR  @06,0                                               1290
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1290
*            END;                                          /*@G51DGBB*/
         AL    @14,@CF00055                                        1291
         ST    @14,Y                                               1291
         C     @14,@CF00293                                        1291
         BNH   @DL01289                                            1291
*            LISTNUM = ZERO;                               /*@G51DGBB*/
         L     @14,LISTPTR                                         1292
         SLR   @08,@08                                             1292
         ST    @08,LISTNUM(,@14)                                   1292
*          END;                                            /*@G51DGBB*/
*        ELSE /*UNSUCCESSFUL GETMAIN                         @G51DGBB*/
*          DO;                                             /*@G51DGBB*/
         B     @RC01271                                            1294
@RF01271 DS    0H                                                  1295
*            MSGNO = 40;                                   /*@G51DGBB*/
         MVI   MSGNO,X'28'                                         1295
*            CALL ERRMSG;                                  /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1296
*            R15 = TWELVE;                                 /*@G51DGBB*/
         LA    @08,12                                              1297
         LR    R15,@08                                             1297
*            ERROR = TWELVE;                               /*@G51DGBB*/
         ST    @08,ERROR                                           1298
*          END;                                            /*@G51DGBB*/
*      END;                                                /*@G51DGBB*/
@RC01271 DS    0H                                                  1301
*    IF R15 = ZERO THEN /*IF GETMAIN WAS SUCCESSFUL OR NO GETMAIN*/
@RF01266 LTR   R15,R15                                             1301
         BNZ   @RF01301                                            1301
*      LISTPTR = FRAMLOCM(CCHINDX);/*ESTABLISH LISTLOC ADDRESS   */
         L     @14,CCHINDX                                         1302
         MH    @14,@CH00227                                        1302
         L     @08,FRAMEPTR(,R2)                                   1302
         AL    @08,@CF01512                                        1302
         L     @14,FRAMLOCM-20(@14,@08)                            1302
         ST    @14,LISTPTR                                         1302
*  END;                                                    /*@G51DGBB*/
*ELSE /* IS A CCH FRAME                                      @G51DGBB*/
*    LISTPTR = FRAMLOCC(CCHINDX);  /*ESTABLISH CCH LISTLOC ADDRESS*/
         B     @RC01264                                            1304
@RF01264 L     @14,CCHINDX                                         1304
         MH    @14,@CH00227                                        1304
         L     @08,FRAMEPTR(,R2)                                   1304
         L     @14,FRAMLOCC-24(@14,@08)                            1304
         ST    @14,LISTPTR                                         1304
*IF ERROR = ZERO THEN                                              1305
@RC01264 L     @14,ERROR                                           1305
         LTR   @14,@14                                             1305
         BNZ   @RF01305                                            1305
*  DO;                                                     /*@G51DGBB*/
*    IF LISTNUM + 1 <= LISTMAX THEN /*IF ROOM IN LISTLOC     @G51DGBB*/
         LA    @14,1                                               1307
         L     @08,LISTPTR                                         1307
         AL    @14,LISTNUM(,@08)                                   1307
         C     @14,@CF00293                                        1307
         BH    @RF01307                                            1307
*      DO;                                                 /*@G51DGBB*/
*        RESPECIFY (R1) UNRESTRICTED;                      /*@G51DGBB*/
*        IF PHIST = ON THEN        /*IF HISTORY INPUT        @G51DGBB*/
         TM    PHIST(R2),B'00100000'                               1310
         BNO   @RF01310                                            1310
*          CALL IOHND(RITESCRT);   /*WRITE TO SCRATCH DATA SET*/   1311
         L     @15,ADIOHND(,R2)                                    1311
         LA    @01,@AL01311                                        1311
         BALR  @14,@15                                             1311
*        IF R15 = SUCCESS THEN     /*IF SUCCESSFULL WRITE    @G51DGBB*/
@RF01310 LTR   R15,R15                                             1312
         BNZ   @RF01312                                            1312
*          DO;                                             /*@G51DGBB*/
*            LISTCCHR(LISTNUM+1) = RECCCHHR;/*SAVE FRAME EXTERNAL LOC*/
         L     @14,LISTPTR                                         1314
         L     @08,LISTNUM(,@14)                                   1314
         LR    @06,@08                                             1314
         MH    @06,@CH00079                                        1314
         ALR   @06,@14                                             1314
         MVC   LISTCCHR(5,@06),RECCCHHR(R2)                        1314
*            LISTNUM = LISTNUM + 1; /*INCREMENT NO OF BUILT ENTRIES*/
         LA    @06,1                                               1315
         ALR   @08,@06                                             1315
         ST    @08,LISTNUM(,@14)                                   1315
*            BUG(29) = BUG(29) + 1; /*COUNT NUMBER OF USED FRAMES*/
         AL    @06,BUG+112                                         1316
         ST    @06,BUG+112                                         1316
*          END;                                            /*@G51DGBB*/
*        ELSE  /*UNSUCCESSFUL WRITE TO SCRATCH D.S.          @G51DGBB*/
*          R15 = TWELVE; /*TERMINATE FURTHER PROCESSING      @G51DGBB*/
         B     @RC01312                                            1318
@RF01312 LA    R15,12                                              1318
*      END;                                                /*@G51DGBB*/
@RC01312 DS    0H                                                  1320
*  END;                                                    /*@G51DGBB*/
@RF01307 DS    0H                                                  1321
*ERROR = R15;                                              /*@G51DGBB*/
@RF01305 ST    R15,ERROR                                           1321
*RESPECIFY (R0,R4,R15) UNRESTRICTED;                       /*@G51DGBB*/
*END; /*END OF BUILDTTR PROC                                 @G51DGBB*/
@EL00030 DS    0H                                                  1323
@EF00030 DS    0H                                                  1323
@ER00030 LM    @14,@12,@SA00030                                    1323
         BR    @14                                                 1323
*FIXENTRY: PROC;  /*RESET LISTLOC TABLE TO ZEROS BUT DONT FREE CORE*/
FIXENTRY STM   @14,@12,12(@13)                                     1324
*                 /*RESET DATE,TYPE TO ZEROS                 @G51DGBB*/
*FRAMEDT(CCHINDX) = '0000000000000000'X; /*ZERO DATE,TIME    @G51DGBB*/
         L     @08,CCHINDX                                         1325
         MH    @08,@CH00227                                        1325
         L     @06,FRAMEPTR(,R2)                                   1325
         ST    @08,@TF00001                                        1325
         ALR   @08,@06                                             1325
         AL    @08,@CF01519                                        1325
         MVC   FRAMEDT-9(8,@08),@CB01473                           1325
*FRAMETYP(CCHINDX) = '00'X; /*RESET TO NO TYPES OF FRAMES STORED*/ 1326
         LR    @08,@06                                             1326
         AL    @08,@TF00001                                        1326
         AL    @08,@CF01502                                        1326
         MVI   FRAMETYP-17(@08),X'00'                              1326
*IF FRAMLOCM(CCHINDX) > ZERO THEN /*IF MCH FRAME LOC. TAB. ALLOCATED*/
         L     @08,@TF00001                                        1327
         AL    @06,@CF01512                                        1327
         L     @08,FRAMLOCM-20(@08,@06)                            1327
         LTR   @08,@08                                             1327
         BNP   @RF01327                                            1327
*  DO;                                                     /*@G51DGBB*/
*    LISTPTR = FRAMLOCM(CCHINDX); /*SET TABLE BASE ADDRESS   @G51DGBB*/
         ST    @08,LISTPTR                                         1329
*    DO Y = 1 BY 1 TO LISTNUM; /*CLEAR ALL STORED CCHHRS TO ZERO*/ 1330
         LA    @08,1                                               1330
         ST    @08,Y                                               1330
         B     @DE01330                                            1330
@DL01330 DS    0H                                                  1331
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGBB*/
         LR    @06,@08                                             1331
         MH    @06,@CH00079                                        1331
         L     @01,LISTPTR                                         1331
         ALR   @01,@06                                             1331
         BCTR  @01,0                                               1331
         XC    LISTCCHR-4(5,@01),LISTCCHR-4(@01)                   1331
*      BUG(30) = BUG(30) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1332
         LA    @06,1                                               1332
         AL    @06,BUG+116                                         1332
         ST    @06,BUG+116                                         1332
*      BUG(29) = BUG(29) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*/
         L     @06,BUG+112                                         1333
         BCTR  @06,0                                               1333
         ST    @06,BUG+112                                         1333
*    END;                                                  /*@G51DGBB*/
         AL    @08,@CF00055                                        1334
         ST    @08,Y                                               1334
@DE01330 L     @06,LISTPTR                                         1334
         C     @08,LISTNUM(,@06)                                   1334
         BNH   @DL01330                                            1334
*    LISTNUM = ZERO; /*SET NUMBER OF STORED CCHHRS TO ZERO   @G51DGBB*/
         L     @08,LISTPTR                                         1335
         SLR   @06,@06                                             1335
         ST    @06,LISTNUM(,@08)                                   1335
*  END;                                                    /*@G51DGBB*/
*IF FRAMLOCC(CCHINDX) > ZERO THEN /*IF CCH FRAM LOC TABLE ALLOCATED*/
@RF01327 L     @08,CCHINDX                                         1337
         MH    @08,@CH00227                                        1337
         L     @06,FRAMEPTR(,R2)                                   1337
         L     @08,FRAMLOCC-24(@08,@06)                            1337
         LTR   @08,@08                                             1337
         BNP   @RF01337                                            1337
*  DO;                                                     /*@G51DGBB*/
*    LISTPTR = FRAMLOCC(CCHINDX); /*SET BASE ADDRESS OF LISTLOC*/  1339
         ST    @08,LISTPTR                                         1339
*    DO Y = 1 BY 1 TO LISTNUM; /*ZERO ALL SAVED CCHHRS       @G51DGBB*/
         LA    @08,1                                               1340
         ST    @08,Y                                               1340
         B     @DE01340                                            1340
@DL01340 DS    0H                                                  1341
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGBB*/
         LR    @06,@08                                             1341
         MH    @06,@CH00079                                        1341
         L     @01,LISTPTR                                         1341
         ALR   @01,@06                                             1341
         BCTR  @01,0                                               1341
         XC    LISTCCHR-4(5,@01),LISTCCHR-4(@01)                   1341
*      BUG(30) = BUG(30) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1342
         LA    @06,1                                               1342
         AL    @06,BUG+116                                         1342
         ST    @06,BUG+116                                         1342
*      BUG(29) = BUG(29) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRAMES*
         L     @06,BUG+112                                         1343
         BCTR  @06,0                                               1343
         ST    @06,BUG+112                                         1343
*    END;                                                  /*@G51DGBB*/
         AL    @08,@CF00055                                        1344
         ST    @08,Y                                               1344
@DE01340 L     @06,LISTPTR                                         1344
         C     @08,LISTNUM(,@06)                                   1344
         BNH   @DL01340                                            1344
*    LISTNUM = ZERO; /*SET NUMBER OF  CCHHRS SAVED TO ZERO   @G51DGBB*/
         L     @08,LISTPTR                                         1345
         SLR   @06,@06                                             1345
         ST    @06,LISTNUM(,@08)                                   1345
*  END;                                                    /*@G51DGBB*/
*END;                                                      /*@G51DGBB*/
@EL00031 DS    0H                                                  1347
@EF00031 DS    0H                                                  1347
@ER00031 LM    @14,@12,12(@13)                                     1347
         BR    @14                                                 1347
*FLIMFRAM: PROC; /*PROCESS FRAME RECORDS SEQUENTIALLY        @G51DGBB*/
FLIMFRAM STM   @14,@12,@SA00032                                    1348
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGBB*/
*   IF PACC = ON &                 /* IF NO ACCUMULATION OR NO  */ 1350
*     (PMCH = ON × PCHAN = ON) THEN /* MCH OR CCH SELECTION THEN */
         TM    PACC(R2),B'01000000'                                1350
         BNO   @RF01350                                            1350
         TM    PMCH(R2),B'11000000'                                1350
         BZ    @RF01350                                            1350
*    DO;                            /* DONT SELECT FRAMES    @G51DGBB*/
*      IF LRTCNT = ONE &            /* IF FIRST PHYSICAL FRAME   */
*         (LRTKEY1 & GENREC) = HEXA0 THEN /*IS MCH FRAME WHICH MUST*/
         CLI   LRTCNT(R7),1                                        1352
         BNE   @RF01352                                            1352
         MVC   @TS00001(1),LRTKEY1(R7)                             1352
         NI    @TS00001,X'F0'                                      1352
         CLI   @TS00001,X'A0'                                      1352
         BNE   @RF01352                                            1352
*        DO;                         /*BE INPUT BEFORE CCH FRAMES*/
*          SAVESEQ = ONE;           /* RESET SEQUENCE CHECK  @G51DGBB*/
         MVI   SAVESEQ,X'01'                                       1354
*          CALL FRAMEREP;           /* SEE IF THIS FRAME SET MUST*/
         BAL   @14,FRAMEREP                                        1355
*          R15 = ERROR;             /* BE SAVED              @G51DGBB*/
         L     R15,ERROR                                           1356
*          IF LRTNLAST = OFF &      /*IF ONLY ONE MCH FRAME  @G51DGBB*/
*             FRAMEYES = ON  &      /*FRAME SET TO BE SAVED  @G51DGBB*/
*             R15 = ZERO THEN       /*NO ERROR CONDITIONS    @G51DGBB*/
         TM    LRTNLAST(R7),B'10000000'                            1357
         BNZ   @RF01357                                            1357
         TM    FRAMEYES,B'00000010'                                1357
         BNO   @RF01357                                            1357
         LTR   R15,R15                                             1357
         BNZ   @RF01357                                            1357
*            DO;                                           /*@G51DGBB*/
*              FRAMETYP(CCHINDX) = ALLMCH; /*ALL MCH FRAMES ARE IN*/
         L     @14,CCHINDX                                         1359
         MH    @14,@CH00227                                        1359
         L     @08,FRAMEPTR(,R2)                                   1359
         ALR   @08,@14                                             1359
         AL    @08,@CF01502                                        1359
         MVI   FRAMETYP-17(@08),X'02'                              1359
*              SAVESEQ = ZERO;      /*REINITIALIZE FOR CCH S @G51DGBB*/
         MVI   SAVESEQ,X'00'                                       1360
*            END;                                          /*@G51DGBB*/
*        END;                                              /*@G51DGBB*/
*      ELSE                         /* NON-FIRST FRAME       @G51DGBB*/
*        DO;                                               /*@G51DGBB*/
         B     @RC01352                                            1363
@RF01352 DS    0H                                                  1364
*          IF FRAMEYES = ON THEN    /* IF FRAME IS TO BE SAVED  */ 1364
         TM    FRAMEYES,B'00000010'                                1364
         BNO   @RF01364                                            1364
*            DO;                                           /*@G51DGBB*/
*              SAVESEQ = SAVESEQ + 1;  /* UP SEQ CHECK       @G51DGBB*/
         IC    @14,SAVESEQ                                         1366
         LA    @14,1(,@14)                                         1366
         STC   @14,SAVESEQ                                         1366
*              IF SAVESEQ = LRTCNT THEN /* IF RECORD NOT MISSING */
         CLC   SAVESEQ(1),LRTCNT(R7)                               1367
         BNE   @RF01367                                            1367
*                DO;                                       /*@G51DGBB*/
*                  CALL BUILDTTR;    /* BUILD EXTERNAL LOCATION */ 1369
         BAL   @14,BUILDTTR                                        1369
*                  R15 = ERROR;                            /*@G51DGBB*/
         L     R15,ERROR                                           1370
*                  IF R15 = ZERO THEN  /* IF FRAME EXTERNAL LOC  */
         LTR   R15,R15                                             1371
         BNZ   @RF01371                                            1371
*                    DO;               /* SUCCESSFULLY SAVED @G51DGBB*/
*                      IF LRTNLAST = OFF THEN /* IF LAST FRAME  */ 1373
         TM    LRTNLAST(R7),B'10000000'                            1373
         BNZ   @RF01373                                            1373
*                        DO;                               /*@G51DGBB*/
*                          IF (LRTKEY1 & GENREC) = HEXA0 THEN      1375
         MVC   @TS00001(1),LRTKEY1(R7)                             1375
         NI    @TS00001,X'F0'                                      1375
         CLI   @TS00001,X'A0'                                      1375
         BNE   @RF01375                                            1375
*                           DO;                            /*@G51DGBB*/
*                            SAVESEQ = ZERO;               /*@G51DGBB*/
         MVI   SAVESEQ,X'00'                                       1377
*                            FRAMETYP(CCHINDX) = ALLMCH;   /*@G51DGBB*/
         L     @14,CCHINDX                                         1378
         MH    @14,@CH00227                                        1378
         L     @08,FRAMEPTR(,R2)                                   1378
         ALR   @08,@14                                             1378
         AL    @08,@CF01502                                        1378
         MVI   FRAMETYP-17(@08),X'02'                              1378
*                           END;                           /*@G51DGBB*/
*                          /*IF ALL MCH FRAMES HAVE BEEN SAVED,  */
*                          /*THEN INDICATE SUCH              @G51DGBB*/
*                           ELSE                  /*IS CCH FRAME */
*                            DO;                           /*@G51DGBB*/
         B     @RC01375                                            1380
@RF01375 DS    0H                                                  1381
*                            FRAMEYES = OFF;               /*@G51DGBB*/
         NI    FRAMEYES,B'11111101'                                1381
*                            IF FRAMETYP(CCHINDX) ^= ALLMCH THEN   1382
         L     @14,CCHINDX                                         1382
         MH    @14,@CH00227                                        1382
         L     @08,FRAMEPTR(,R2)                                   1382
         ALR   @08,@14                                             1382
         AL    @08,@CF01502                                        1382
         CLI   FRAMETYP-17(@08),X'02'                              1382
         BE    @RF01382                                            1382
*                              DO; /*IF MISSING LAST MCH FRAME   */
*                                MSGNO = 79; /*FRAME SET INCOMPLET MSG*
         MVI   MSGNO,X'4F'                                         1384
*                                CALL ERRMSG;              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1385
*                                CALL FIXENTRY; /*DELETE INCOM-  */
         BAL   @14,FIXENTRY                                        1386
*                              END;             /*PLETE SET. @G51DGBB*/
*                            ELSE   /*IS COMPLETE SET -INDICATE  */
*                              FRAMETYP(CCHINDX) = ALLALL; /*IT IS*/
         B     @RC01382                                            1388
@RF01382 L     @14,CCHINDX                                         1388
         MH    @14,@CH00227                                        1388
         L     @08,FRAMEPTR(,R2)                                   1388
         ALR   @08,@14                                             1388
         AL    @08,@CF01502                                        1388
         MVI   FRAMETYP-17(@08),X'FF'                              1388
*                            END;                          /*@G51DGBB*/
*                        END;                              /*@G51DGBB*/
*                   END;                                   /*@G51DGBB*/
*              END;                                        /*@G51DGBB*/
*            ELSE   /*MISSING MIDDLE FRAME                   @G51DGBB*/
*              DO;                                         /*@G51DGBB*/
         B     @RC01367                                            1393
@RF01367 DS    0H                                                  1394
*                MSGNO = 79; /*FRAME SET INCOMPLETE          @G51DGBB*/
         MVI   MSGNO,X'4F'                                         1394
*                CALL ERRMSG;                              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1395
*                FRAMEYES = OFF; /*DONT SAVE INCOMPLETE SET  @G51DGBB*/
         NI    FRAMEYES,B'11111101'                                1396
*                CALL FIXENTRY; /*DELETE REFS TO INCOMPLETE SET*/  1397
         BAL   @14,FIXENTRY                                        1397
*                BUG(30) = BUG(30) + 1;                    /*@G51DGBB*/
         LA    @14,1                                               1398
         AL    @14,BUG+116                                         1398
         ST    @14,BUG+116                                         1398
*              END;                                        /*@G51DGBB*/
*       END;                                               /*@G51DGBB*/
*          ELSE      /*FRAME NOT TO BE SAVED                 @G51DGBB*/
*            BUG(30) = BUG(30) + 1;                        /*@G51DGBB*/
         B     @RC01364                                            1401
@RF01364 LA    @14,1                                               1401
         AL    @14,BUG+116                                         1401
         ST    @14,BUG+116                                         1401
*      END;                                                /*@G51DGBB*/
*   END;                                                   /*@G51DGBB*/
*  ELSE   /*NOT ACCUMULATING OR SELECTING MCH OR CCH RECORDS @G51DGBB*/
*    BUG(30) = BUG(30) + 1; /*COUNT FRAMES REJECTED          @G51DGBB*/
         B     @RC01350                                            1404
@RF01350 LA    @14,1                                               1404
         AL    @14,BUG+116                                         1404
         ST    @14,BUG+116                                         1404
*RESPECIFY (R15) UNRESTRICTED;                             /*@G51DGBB*/
*END;  /*END OF PROC FLIMFRAM                                @G51DGBB*/
@EL00032 DS    0H                                                  1406
@EF00032 DS    0H                                                  1406
@ER00032 LM    @14,@12,@SA00032                                    1406
         BR    @14                                                 1406
*END  /*CLOSING END TO IFCFILT2 EXTERNAL PROC                @Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 1407
@DATA    DS    0H
@CH00079 DC    H'5'
@CH00081 DC    H'6'
@CH00083 DC    H'7'
@CH00033 DC    H'11'
@CH01491 DC    H'63'
         DS    0F
@AL00197 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00384 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00991 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01004 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01178 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01183 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01198 DC    A(@CF00074+2)           LIST WITH   1 ARGUMENT(S)
@AL00204 DC    A(@CF00076+2)           LIST WITH   1 ARGUMENT(S)
@AL00224 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00952 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00961 DC    A(@CF00064+2)           LIST WITH   1 ARGUMENT(S)
@AL00774 DC    A(@CF00076)             LIST WITH   3 ARGUMENT(S)
         DC    A(WORKDEV)
         DC    A(LINKDEV)
@AL00914 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00926 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00942 DC    A(@CH00083)             LIST WITH   1 ARGUMENT(S)
@AL00950 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00959 DC    A(@CH00081)             LIST WITH   1 ARGUMENT(S)
@AL00989 DC    A(@CF01432)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL01002 DC    A(@CF01433)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL01132 DC    A(@CF01450)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01135 DC    A(@CF01451)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01138 DC    A(@CF01452)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01145 DC    A(@CF01453)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01148 DC    A(@CF01427)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01175 DC    A(@CF01198)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01177 DC    A(@CF00227)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01311 DC    A(@CH00079)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00032 DS    15F
@SA00022 DS    15F
@SA00011 DS    15F
@SA00004 DS    15F
@SA00021 DS    15F
@SA00027 DS    15F
@SA00026 DS    15F
@SA00007 DS    15F
@SA00008 DS    15F
@SA00012 DS    15F
@SA00024 DS    15F
@SA00028 DS    15F
@SA00014 DS    15F
@SA00013 DS    15F
@SA00020 DS    15F
@SA00015 DS    15F
@SA00023 DS    15F
@SA00029 DS    15F
@SA00030 DS    15F
@TF00001 DS    F
@TF00002 DS    F
@AFTEMPS DS    2F
         DS    0F
@CF00055 DC    F'1'
@CF00074 DC    F'2'
@CH00074 EQU   @CF00074+2
@CF00076 DC    F'3'
@CH00076 EQU   @CF00076+2
@CF00064 DC    F'4'
@CH00064 EQU   @CF00064+2
@CF00066 DC    F'8'
@CF00034 DC    F'10'
@CF00032 DC    F'12'
@CF00966 DC    F'13'
@CH00966 EQU   @CF00966+2
@CF00088 DC    F'16'
@CF01152 DC    F'18'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF01102 DC    F'27'
@CF01458 DC    F'30'
@CF01198 DC    F'40'
@CF00293 DC    F'50'
@CF01451 DC    F'53'
@CF01450 DC    F'55'
@CF01453 DC    F'72'
@CF01452 DC    F'74'
@CF01432 DC    F'75'
@CF01433 DC    F'76'
@CF01427 DC    F'78'
@CF01495 DC    F'254'
@CF01504 DC    F'-20'
@CF01517 DC    F'-17'
@CF01519 DC    F'-15'
@CF01350 DC    F'-13'
@CF01516 DC    F'-10'
@CF01510 DC    F'-9'
@CF01502 DC    F'-7'
@CF01512 DC    F'-4'
@CF01515 DC    F'-3'
@CF00878 DC    XL4'FFFFFFF8'
@CV01405 DC    V(IFCDEVIC)
         DS    0D
ENTRIES  DC    F'1'
LISTPTR  DC    A(0)
T        DC    F'0'
P        DC    F'0'
Q        DC    F'0'
NUMBER   DC    F'0'
NEXTBY   DC    F'0'
ADDNXT   DC    F'0'
ZZ       DC    A(0)
Z1       DC    F'0'
Z2       DC    F'0'
Z3       DC    F'0'
ZZ3      DC    F'0'
         DS    0D
@TS00001 DS    CL11
@CB01473 DC    X'0000000000000000'
@CB00288 EQU   @CB01473
@CB01430 DC    X'0000000F'
@CB00228 DC    X'00000F'
@CB00237 DC    X'FFFFFF'
@CB00938 DC    X'000FFF'
@CB01317 DC    X'99366F'
@CB00261 EQU   @CB00237
@CB00883 DC    X'2006'
@CB00885 DC    X'2007'
@CB00887 DC    X'2009'
@CB00889 DC    X'200A'
@CB00891 DC    X'200B'
@CB00893 DC    X'200D'
@CB00895 DC    X'8004'
@CB00897 DC    X'8005'
@CB00899 DC    X'8003'
@CB00901 DC    X'100C'
@CB00903 DC    X'1008'
@CB00905 DC    X'0842'
@CB00932 DC    X'0FF0'
@CB00934 DC    X'FF00'
@CB00936 DC    X'0FFF'
@CB00957 EQU   @CB00938
@CB00976 DC    X'7FFF'
@CB01387 DC    X'3830'
@CB01393 DC    X'3705'
         DS    CL1
FILT1ITM DS    CL131
         ORG   FILT1ITM
MAXENT   DC    F'0'
FREEADR  DC    A(0)
I        DC    A(1)
J        DC    A(0)
K        DC    A(0)
L        DC    A(0)
A        DC    A(0)
X        DC    A(0)
Y        DC    A(0)
Z        DC    A(0)
TMPSTORE DC    A(0)
LINKPTR  DC    A(0)
CCHINDX  DC    A(0)
SAVESEQ  DC    AL1(0)
         DS    CL3
UNKNWN   DC    F'0'
ALLCORE  DC    F'0'
STSUMPTR DC    A(0)
COMPLINK DC    A(0)
M        DC    A(0)
SRTCONT  DC    F'0'
SRTCONT1 DC    F'0'
ERROR    DC    F'0'
EVPTR1   DC    A(0)
ERSER    DC    X'00000000'
         ORG   ERSER
@NM00085 DS    CL1
ER3      DS    CL3
         ORG   FILT1ITM+96
NUMUNSHR DC    H'1'
PACKPAS  DC    CL4'    '
CHARPAS  DC    CL8'        '
         DS    CL2
PASSNUM  DC    F'0'
NUMREC   DC    F'0'
EXCESS   DC    F'0'
WORKDEV  DC    X'0000'
         ORG   WORKDEV
WORKDEV1 DS    CL1
WORKDEV2 DS    CL1
         ORG   FILT1ITM+126
WORKTYPE DC    X'00'
CUA3     DC    X'000000'
         ORG   CUA3
@NM00086 DS    BL1
WORKCUA  DS    BL2
         ORG   WORKCUA
WRKCUA   DS    BL2
         ORG   FILT1ITM+130
MSGNO    DC    AL1(0)
         ORG   FILT1ITM+131
LINKDEV  DS    CL4
         ORG   LINKDEV
DEVLABEL DS    CL2
@NM00087 DS    CL2
         ORG   LINKDEV+4
ERRPLACE DS    BL1
         ORG   ERRPLACE
ERRP1    DS    BL1
ERRP2    EQU   ERRPLACE+0
         ORG   ERRPLACE+1
PRINTLIN DS    CL134
         ORG   PRINTLIN
PRINTDS  DC    X'F1'
PRINTCC  DC    X'09'
PRINTBDY DC    CL132' '
         ORG   PRINTBDY
@NM00088 DS    CL8
PRINTED  DS    CL9
@NM00089 DS    CL24
PRNTSER  DS    CL7
         ORG   PRINTLIN+134
PARTIAL  DS    CL58
         ORG   PARTIAL
@NM00092 DC    CL29'DEBUG16 FRAME SET INCOMPLETE '
PARMOD   DS    CL4
@NM00093 DC    CL1' '
PARSER   DS    CL6
@NM00094 DC    CL17' FRAMEREP SET TO '
PARREP   DS    CL1
         ORG   PARTIAL+58
BITSWIT  DC    X'000000'
         ORG   BITSWIT
NONBLANK DS    BL1
SORTSW   EQU   BITSWIT+0
UNIQUE   EQU   BITSWIT+0
MISSW    EQU   BITSWIT+0
GETOUT   EQU   BITSWIT+0
FIRSTIME EQU   BITSWIT+0
MISSW1   EQU   BITSWIT+0
ONBOUND  EQU   BITSWIT+0
SHAREYES DS    BL1
CUAOK    EQU   BITSWIT+1
CPUOK    EQU   BITSWIT+1
CPU0FLG  EQU   BITSWIT+1
GETFAIL  EQU   BITSWIT+1
LOOPOUT  EQU   BITSWIT+1
FRAMEYES EQU   BITSWIT+1
ONETIME  EQU   BITSWIT+1
FOUND    DS    BL1
DEVOK    EQU   BITSWIT+2
         ORG   BITSWIT+3
WORKBYTE DS    BL1
         ORG   WORKBYTE
WORKBYT4 DS    BL1
         ORG   WORKBYTE+1
WORKTWO  DS    BL1
ZERO5    DC    X'0000000000'
SYSUM2   DC    X'00000000000000000000000000'
         ORG   SYSUM2
SYSUMKEY DS    CL7
         ORG   SYSUMKEY
SYSGROUP DS    FL1
SYSRT    DS    BL2
         ORG   SYSRT
SYSCUA   DS    BL2
         ORG   SYSUMKEY+3
SYSCPUS  DS    BL1
         ORG   SYSCPUS
SYSCPU   DS    BL1
SYSOLD   EQU   SYSCPUS+0
         ORG   SYSUMKEY+4
SYSITEM  DS    BL1
         ORG   SYSITEM
SYS3705  DS    BL1
SYSOLDA  EQU   SYSITEM+0
         ORG   SYSUMKEY+5
SYSDEV   DS    CL2
         ORG   SYSUM2+7
SYSPERM1 DS    FL2
         ORG   SYSPERM1
@NM00096 DS    BL2
SYSPERM  EQU   SYSPERM1+1
         ORG   SYSUM2+9
SYSTEMP  DS    FL4
         ORG   SYSUM2+13
CHARS    DC    CL16'0123456789ABCDEF'
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL3
SAVEADR  DC    A(0)
         DS    15XL4
EVCON    DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
FLIP     DC    AL1(0)
         DC    AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(5)
         DC    AL1(6)
         DC    AL1(7)
         DC    AL1(8)
         DC    AL1(9)
         DC    AL1(10)
         DC    AL1(11)
         DC    AL1(12)
         DC    AL1(13)
         DC    AL1(14)
         DC    AL1(15)
EDIFILD  DS    9CL1
         DS    CL3
PATCH    DC    25F'0'
BUG      DC    40F'0'
ERRLINE  DS    CL63
         ORG   ERRLINE+0
ERRDS    DC    CL1'1'
ERCC     DC    X'09'
ERRMES   DC    CL10'DEBUG16   '
ERXNUM   DC    CL9'         '
@NM00097 DC    CL2'  '
ERRTXT   DC    CL40'UNKNOWN RECORDS IDENTIFIED              '
         ORG   ERRLINE+63
         ORG   ERRLINE+63
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT    RECORDS IDENTIFIED              '
         ORG   ERRLINE+126
         ORG   ERRLINE+126
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH     RECORDS IDENTIFIED              '
         ORG   ERRLINE+189
         ORG   ERRLINE+189
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH     RECORDS IDENTIFIED              '
         ORG   ERRLINE+252
         ORG   ERRLINE+252
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'IPL     RECORDS IDENTIFIED              '
         ORG   ERRLINE+315
         ORG   ERRLINE+315
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'EOD     RECORDS IDENTIFIED              '
         ORG   ERRLINE+378
         ORG   ERRLINE+378
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR     RECORDS IDENTIFIED              '
         ORG   ERRLINE+441
         ORG   ERRLINE+441
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OTHER VALID RECORDS IDENTIFIED          '
         ORG   ERRLINE+504
         ORG   ERRLINE+504
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR TYPE 91 DEVICE TYPE 3705 RECORDS    '
         ORG   ERRLINE+567
         ORG   ERRLINE+567
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR NOT DEVICE 3705 OR 33XX             '
         ORG   ERRLINE+630
         ORG   ERRLINE+630
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS SAVED IN SYSUM2             '
         ORG   ERRLINE+693
         ORG   ERRLINE+693
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS SAVED IN SYSUM2             '
         ORG   ERRLINE+756
         ORG   ERRLINE+756
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS SAVED WITH CPU SERIAL NO. FFFFFF'
         ORG   ERRLINE+819
         ORG   ERRLINE+819
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SORTWO FLIPS DONE                       '
         ORG   ERRLINE+882
         ORG   ERRLINE+882
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 1 RECORDS SAVED            '
         ORG   ERRLINE+945
         ORG   ERRLINE+945
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 2 RECORDS SAVED            '
         ORG   ERRLINE+1008
         ORG   ERRLINE+1008
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 3 RECORDS SAVED            '
         ORG   ERRLINE+1071
         ORG   ERRLINE+1071
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 4 RECORDS SAVED            '
         ORG   ERRLINE+1134
         ORG   ERRLINE+1134
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 5 RECORDS SAVED            '
         ORG   ERRLINE+1197
         ORG   ERRLINE+1197
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 6 RECORDS SAVED            '
         ORG   ERRLINE+1260
         ORG   ERRLINE+1260
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS RETRIEVED VIA READSEQ           '
         ORG   ERRLINE+1323
         ORG   ERRLINE+1323
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS PASSED DATE,TIME FILTERING      '
         ORG   ERRLINE+1386
         ORG   ERRLINE+1386
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR 33XX RECORDS IDENTIFIED             '
         ORG   ERRLINE+1449
         ORG   ERRLINE+1449
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR 33XX RECORDS SAVED                  '
         ORG   ERRLINE+1512
         ORG   ERRLINE+1512
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR 33XX RECORDS IDENTIFIED             '
         ORG   ERRLINE+1575
         ORG   ERRLINE+1575
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR 33XX RECORDS SAVED                  '
         ORG   ERRLINE+1638
         ORG   ERRLINE+1638
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'34XX     RECORDS FOUND                  '
         ORG   ERRLINE+1701
         ORG   ERRLINE+1701
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'34XX     RECORDS SAVED                  '
         ORG   ERRLINE+1764
         ORG   ERRLINE+1764
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES USED IN PROCESSING               '
         ORG   ERRLINE+1827
         ORG   ERRLINE+1827
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES NOT USED IN PROCESSING           '
         ORG   ERRLINE+1890
         ORG   ERRLINE+1890
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'****IFCFILT2 DEBUG16 RECORD COUNTS******'
         ORG   ERRLINE+1953
         ORG   ERRLINE+1953
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2016
         ORG   ERRLINE+2016
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2079
         ORG   ERRLINE+2079
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2142
         ORG   ERRLINE+2142
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2205
         ORG   ERRLINE+2205
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2268
         ORG   ERRLINE+2268
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2331
         ORG   ERRLINE+2331
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2394
         ORG   ERRLINE+2394
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2457
         ORG   ERRLINE+2457
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2520
IFCFILT2 CSECT
         DC    S(SUPERZAP)
IFCFILT2 CSECT
         DC    S(PATCH)   BASE DISPLACEMENT ADDRESS OF PATCH AREA
IFCFILT2 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R7       EQU   @07
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R12      EQU   @12
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R8       EQU   @08
R9       EQU   @09
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
PMCH     EQU   RECTYPE
PCHAN    EQU   RECTYPE
SWITCHES EQU   PARM+2
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUG11  EQU   DEBUG+1
DEBUG16  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUGA   EQU   PARM+8
DEBUG50  EQU   DEBUGA+2
MISC     EQU   PARM+12
PACC     EQU   MISC
PHIST    EQU   MISC
PRINTES  EQU   MISC
PASSFLAG EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
CACCIN   EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
@NM00007 EQU   PARM+75
TABSIZE  EQU   PARM+80
SORTNUM  EQU   PARM+84
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
RECCCHHR EQU   CCHHRLNG
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
FRAMEPTR EQU   PARM+200
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVNUM    EQU   EVTABLE+4
EVKEY    EQU   EVTABLE+6
EVMODEL  EQU   EVKEY
EVSERIAL EQU   EVKEY+2
EVLETTER EQU   EVKEY+5
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUMNUM EQU   SYSUMONE
SYSUMIPL EQU   SYSUMONE+4
SYSUMNXT EQU   SYSUMONE+8
SYSUMMCR EQU   SYSUMONE+12
SYSUMMCN EQU   SYSUMONE+16
SYSUMCH  EQU   SYSUMONE+20
SYSUMPEI EQU   SYSUMONE+84
SYSUMPEA EQU   SYSUMONE+88
SYSUMPER EQU   SYSUMONE+92
SYSUMEOD EQU   SYSUMONE+96
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHRCUCPU EQU   SHAREIO
SHARECUA EQU   SHRCUCPU
SHAREDX  EQU   SHARECUA
SHARSERA EQU   SHRCUCPU+2
SHARECUB EQU   SHAREIO+5
SHARSERB EQU   SHAREIO+7
SHARLET  EQU   SHAREIO+10
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUANUM   EQU   CUA
CUAVAL   EQU   CUA+2
CUA1     EQU   CUAVAL
CUA2     EQU   CUAVAL+2
DEVICE   EQU   0
DEVNUM   EQU   DEVICE
DEVVAL   EQU   DEVICE+2
MDRNUM   EQU   DEVICE+202
MDRVAL   EQU   DEVICE+204
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUNUM   EQU   CPUS
CPUVAL   EQU   CPUS+2
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
TMT2     EQU   0
TMTKEY   EQU   TMT2
TMTSRT   EQU   TMTKEY+1
TMTCPUS  EQU   TMTKEY+3
TMTITEM  EQU   TMTKEY+4
TMTPERM1 EQU   TMT2+8
TMP2     EQU   0
TMPKEY   EQU   TMP2
TMPSRT   EQU   TMPKEY+1
TMPCPUS  EQU   TMPKEY+3
TMPITEM  EQU   TMPKEY+4
TMPPERM1 EQU   TMP2+7
MERIDIAN EQU   0
MRDNUMBR EQU   MERIDIAN
MODEL    EQU   MERIDIAN+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTNLAST EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRTERRID EQU   LRTREC+3
@NM00017 EQU   LRTREC+4
LRTCNT   EQU   @NM00017+2
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTDT+4
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHSYSTR EQU   MCHSMS+1
MCHCPUID EQU   MCHHEAD+16
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
SDRCOUNT EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SHORTSW  EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRSDEV2 EQU   OBRJOBID+2
OBRSSDRC EQU   OBRJOBID+4
OBRSCUA  EQU   OBRJOBID+5
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRDEVDC EQU   OBRREC+48
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRLSDRC EQU   OBRREC+56
OBRPCUA  EQU   OBRREC+57
OBRSEEK  EQU   OBRREC+70
OBRTERMN EQU   OBRSEEK+2
OBR34CT1 EQU   OBRTERMN+4
OBR34CT2 EQU   OBRTERMN+5
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTKEY1  EQU   SFTKEY
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00052 EQU   DDRREC+24
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
MIHCPUID EQU   MIHHEAD+16
@NM00058 EQU   MIHREC+24
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRDEV   EQU   TPRHEAD+4
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
TPRCUA   EQU   TPRREC+24
@NM00066 EQU   TPRREC+26
TPRVOL   EQU   @NM00066
TPRMODE  EQU   TPRREC+38
DVBSDRE  EQU   TPRREC+56
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFSMS   EQU   MCFHEAD+2
@NM00074 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00082 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
STSUMONE EQU   0
STSUMIPL EQU   STSUMONE+4
STSUMMCR EQU   STSUMONE+12
STSUMMCN EQU   STSUMONE+16
STSUMCH  EQU   STSUMONE+20
STSUMPEI EQU   STSUMONE+84
STSUMPEA EQU   STSUMONE+88
STSUMPER EQU   STSUMONE+92
STSUMEOD EQU   STSUMONE+96
OBRLSDR  EQU   0
OBRSENSE EQU   0
OBRSENS0 EQU   OBRSENSE
OBRSENS1 EQU   OBRSENSE+1
TPRSENSE EQU   0
TPRS1213 EQU   TPRSENSE
TPRS1415 EQU   TPRSENSE+2
TPRS19   EQU   TPRSENSE+7
FRAMETAB EQU   0
FRAMENUM EQU   FRAMETAB
FRAMEDTA EQU   FRAMETAB+4
FRAMEKEY EQU   FRAMEDTA
FRAMECPU EQU   FRAMEKEY
FRAMESER EQU   FRAMECPU
FRAMEMOD EQU   FRAMECPU+3
FRAMEDT  EQU   FRAMEKEY+5
FRAMETYP EQU   FRAMEKEY+13
FRAMLOCM EQU   FRAMEDTA+16
FRAMLOCC EQU   FRAMEDTA+20
LISTLOC  EQU   0
LISTNUM  EQU   LISTLOC
LISTCCHR EQU   LISTLOC+4
NEXTBYTE EQU   0
ADDNUM   EQU   0
TMPA     EQU   0
TMPKEYA  EQU   TMPA
TMPPERMA EQU   TMPA+7
TMPTEMPA EQU   TMPA+9
WORKCHAN EQU   CCHCUA
FLIPFLOP EQU   FLIP
EDFLD    EQU   EDIFILD
ERRCT1   EQU   DVBSDRE
ERRNUM   EQU   ERRPLACE
ERR78    EQU   PRINTBDY
PFRAMMOD EQU   ERR78+27
PFRAMSER EQU   ERR78+32
WORKNM   EQU   WORKBYTE
WORKNM2  EQU   WORKTWO
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00091 EQU   ERR78+31
@NM00090 EQU   ERR78
FRAMETIM EQU   FRAMEDT+4
FRAMEDAT EQU   FRAMEDT
@NM00095 EQU   TPRSENSE+4
OBRLSDR2 EQU   OBRLSDR
OBRLSDR1 EQU   OBRLSDR
STSUMNXT EQU   STSUMONE+8
STSUMNUM EQU   STSUMONE
CCFFRAME EQU   CCFREC+24
@NM00084 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00082
@NM00083 EQU   @NM00082
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00081 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00080 EQU   CCFHEAD+4
@NM00079 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00078 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00077 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00076 EQU   MCFHEAD+22
MCFMOD   EQU   MCFSMO+3
MCFSER   EQU   MCFSMO
MCFVER   EQU   @NM00074
@NM00075 EQU   @NM00074
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00073 EQU   MCFHEAD+7
MCFCNT   EQU   MCFHEAD+6
@NM00072 EQU   MCFHEAD+4
@NM00071 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00070 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00069 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFLST   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
MCFKEY1  EQU   MCFKEY
@NM00068 EQU   TPRREC+39
TPRLINAD EQU   TPRREC+36
@NM00067 EQU   TPRREC+34
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00065 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00064 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00063 EQU   TPRBUFC
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00062 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00061 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00060 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
MIHCUA   EQU   MIHREC+35
@NM00059 EQU   @NM00058+8
MIHJOBID EQU   @NM00058
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00057 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00056 EQU   MIHHEAD+6
@NM00055 EQU   MIHHEAD+5
MIHDEBIT EQU   MIHHEAD+5
MIHCEBIT EQU   MIHHEAD+5
@NM00054 EQU   MIHHEAD+4
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00053 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRFCUA  EQU   DDRREC+45
DDRPHD   EQU   @NM00052+20
DDRVOL2  EQU   @NM00052+14
DDRVOL1  EQU   @NM00052+8
DDRJOBID EQU   @NM00052
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00051 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00050 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00049 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00048 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00047 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00046 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00045 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00044 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00043 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00042 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00041 EQU   SFTAEC1
@NM00040 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00039 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00038 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
@NM00037 EQU   OBRTERMN
@NM00036 EQU   OBRSEEK+1
OBRTCAM  EQU   OBRSEEK
OBRVOL   EQU   OBRREC+64
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRTYPE  EQU   OBRDEV+1
OBRCLASS EQU   OBRDEV
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRSTAT  EQU   OBRCSW+4
@NM00035 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00034 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00033 EQU   OBRHEAD+4
@NM00032 EQU   OBRSUBTP
@NM00031 EQU   OBRSUBTP
@NM00030 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00029 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
OBRKEY1  EQU   OBRKEY
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00028 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00027 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00026 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00025 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00024 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00023 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00022 EQU   MCHHEAD+4
@NM00021 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00020 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00019 EQU   @NM00017+3
@NM00018 EQU   @NM00017
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
TMPTEMP  EQU   TMP2+9
TMPPERM  EQU   TMPPERM1+1
@NM00012 EQU   TMPPERM1
TMPDEV   EQU   TMPKEY+5
TMPOLDA  EQU   TMPITEM
TMP3705  EQU   TMPITEM
TMPOLD   EQU   TMPCPUS
TMPCPU   EQU   TMPCPUS
TMPCUA   EQU   TMPSRT
TMPGROUP EQU   TMPKEY
TMTTEMP  EQU   TMT2+10
TMTPERM  EQU   TMTPERM1+1
@NM00011 EQU   TMTPERM1
TMTDEV   EQU   TMTKEY+6
TMTDAT   EQU   TMTKEY+5
TMTOLDA  EQU   TMTITEM
TMT3705  EQU   TMTITEM
TMTOLD   EQU   TMTCPUS
TMTCPU   EQU   TMTCPUS
TMTCUA   EQU   TMTSRT
TMTGROUP EQU   TMTKEY
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TRECCH0  EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
RECLNGTH EQU   CCHHRLNG+6
@NM00009 EQU   CCHHRLNG+5
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SYSRETRN EQU   @NM00007
@NM00006 EQU   PARM+72
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00394 EQU   @EL00005
@RC00421 EQU   @EL00006
@RC00398 EQU   @EL00006
@RF00438 EQU   @EL00006
@RC00462 EQU   @RC00457
@RC00574 EQU   @EL00011
@RC00577 EQU   @EL00011
@RC00580 EQU   @EL00011
@RC00586 EQU   @EL00011
@RC00593 EQU   @EL00011
@RC00611 EQU   @EL00011
@RC00618 EQU   @EL00011
@RC00633 EQU   @EL00012
@RC00636 EQU   @EL00012
@RC00640 EQU   @EL00012
@RF00687 EQU   @EL00013
@RF00696 EQU   @EL00013
@RF00731 EQU   @RC00729
@RF00746 EQU   @RC00744
@RF00721 EQU   @EL00014
@RF00765 EQU   @EL00014
@RF00777 EQU   @EL00015
@RF00789 EQU   @EL00016
@RF00801 EQU   @EL00017
@RC00805 EQU   @EL00018
@RC00811 EQU   @EL00018
@RC00817 EQU   @EL00018
@RC00823 EQU   @EL00018
@RC00829 EQU   @EL00018
@RF00835 EQU   @EL00018
@RF00849 EQU   @EL00019
@RC00847 EQU   @EL00019
@RF00869 EQU   @RC00867
@RF00954 EQU   @RC00945
@RF01022 EQU   @EL00021
@RF01026 EQU   @EL00021
@RC01033 EQU   @EL00022
@RF01082 EQU   @EL00023
@RF01093 EQU   @EL00024
@RC01106 EQU   @EL00025
@RC01112 EQU   @EL00025
@RF01118 EQU   @EL00025
@RC01241 EQU   @RC01239
@RF01259 EQU   @EL00029
@RF01301 EQU   @RC01264
@RF01337 EQU   @EL00031
@RC01350 EQU   @EL00032
@PB00032 EQU   @EL00001
@RC00400 EQU   @RC00398
@RF00417 EQU   @RC00398
@RF00598 EQU   @RC00593
@RF00643 EQU   @RC00640
@RF00651 EQU   @RC00640
@RC01035 EQU   @RC01033
@PB00031 EQU   @PB00032
@RC01352 EQU   @RC01350
@RC01364 EQU   @RC01350
@RF01054 EQU   @RC01035
@PB00030 EQU   @PB00031
@RF01357 EQU   @RC01352
@RC01367 EQU   @RC01364
@PB00029 EQU   @PB00030
@RF01371 EQU   @RC01367
@RF01373 EQU   @RC01367
@RC01375 EQU   @RC01367
@RC01382 EQU   @RC01367
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RF00242 EQU   @PB00002
@ENDDATA EQU   *
         END   IFCFILT2
