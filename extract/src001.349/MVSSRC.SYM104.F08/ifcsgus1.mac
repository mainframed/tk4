         TITLE 'IFCSGUS1 - SUM TABLE - LINKNAME=IFCSGUS1'
         SPACE 2
*
***********************************************************************
*  DSGEN MACRO DSGEN MACRO DSGEN MACRO DSGEN MACRO DSGEN MACRO
         MACRO
&NAME    DSGEN ,
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  500000
         AIF   (&ITEMITR EQ 0).START
 MNOTE   20,'DSGEN MACRO OCCURRS AFTER ITEMSORT MACRO HAS BEEN ISSUED.'
         MEXIT
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
*
***********************************************************************
* HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO  HEX MACRO
         MACRO
         HEX   ,
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER,&ARG
       ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND  &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
.MEXIT   MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
*
***********************************************************************
* BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO  BIN MACRO
         MACRO
         BIN   ,
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLB  &B,&SUB
         LCLA  &IBITS,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S,&ARG
          ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
&ARG     SETC  '&SYSLIST(&OP,1)'
         ITEMFIND &ARG
         AIF   (&ITEMXPT EQ 0).MEXIT
&ISHIFT  SETA  &SHIFT(&ITEMXPT)
&IBITS   SETA  &BITS(&ITEMXPT)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
.MEXIT   MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
         AIF   (&SUB EQ 1).BIN2
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2A
.BIN2    AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2A   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&ITEMXPT     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
*
***********************************************************************
* LINE MACRO  LINE MACRO  LINE MACRO  LINE MACRO  LINE MACRO LINE MACRO
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
*
***********************************************************************
* LINEND MACRO  LINEND MACRO  LINEND MACRO  LINEND MACRO  LINEND MACRO
         MACRO
         LINEND ,
.*                                 THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
*
***********************************************************************
* LABEL MACRO   LABEL MACRO  LABEL MACRO  LABEL MACRO  LABEL MACRO
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
*
***********************************************************************
* ROUTINE MACRO  ROUTINE MACRO  ROUTINE MACRO  ROUTINE MACRO
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
*
***********************************************************************
* ITEMFIND MACRO  ITEMFIND MACRO  ITEMFIND MACRO  ITEMFIND MACRO
         MACRO
         ITEMFIND &ARG,&ITFDIAG=
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &A,&B,&X,&I
         LCLC  &C1,&C2,&S
         ACTR  500000
&ITEMXPT SETA  0                  INDICATE ITEM NOT FOUND.
         AIF   ('&ARG' NE '').NORM
         AIF   ('&ITFDIAG' EQ 'OFF'  OR  '&ITFDIAG' EQ 'ON').DIAGSET
  MNOTE 0,'ITEMFIND - OPERAND (&ITFDIAG) INVALID FOR ITFDIAG KEYWORD.'
         MEXIT
.DIAGSET ANOP
&DIAGITF SETB  ('&ITFDIAG' EQ 'ON')
         MEXIT
.NORM    AIF   (&ITEMITR GT 0).SORTED
         ITEMSORT
.SORTED  ANOP
&I       SETA  &ITEMITR           COMPUTED ITTERATION COUNT.
&X       SETA  &ITEMMDX           COMPUTED MAXIMUM INDEX.
&C1      SETC  '&ARG'             ISOLATE SEARCH ARGUMENT.
&C1      SETC  '&C1'.'       '(1,8-K'&C1) PAD TO FULL 8 CHARACTERS.
.SRCHUP  ANOP
&A       SETA  &A+&X              CURRENT TABLE SUBSCRIPT + INDEX.
&S       SETC  '+'
         AIF   (&A  GT &ITEMNBR  AND  NOT &DIAGITF).SRCHDN1
         AIF   (&A  LE &ITEMNBR).SRCH00
&C2      SETC  '*-OVER-*'
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X'
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
.NOFIND  MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEXIT
.SRCH00  ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
         AIF   (&I LT 0).NOFIND   IF COUNT HAS GONE TO ZERO.
&X       SETA  &X/2               HALVE INDEX VALUE.
&B       SETA  &ITEMNDX(&A)       GET SUBSCRIPT FROM INDEX TABLE.
&C2      SETC  '&ITEM(&B)'.'       '(1,8-K'&ITEM(&B))  PAD COMPARAND.
         AIF   (NOT &DIAGITF).COMPARE
 MNOTE *,'&ARG - &C2   ITRCTR = &I   PTR = &A&S &X   POS = &B'
.COMPARE AIF   ('&C1' LT '&C2').SRCHDWN   ARGUMENT LOWER, MOVE DOWN.
         AIF   ('&C1' GT '&C2').SRCHUP    ARGUMENT HIGHER, MOVE UP.
&ITEMXPT SETA  &B                 FOUND. SET INDEX POINTER FOR RETURN.
&ITEMFST(&I+1)  SETA  &ITEMFST(&I+1)+1
         MEXIT
.SRCHDWN ANOP
&A       SETA  &A-&X              CURRENT POINTER MINUS INDEX VALUE.
&S       SETC  '-'
         AIF   (&A LE &ITEMNBR).SRCH00    IF WITHIN BOUNDS OF TABLE.
.SRCHDN1 ANOP
&I       SETA  &I-1               DECREMENT ITTERATION COUNTER.
&X       SETA  &X/2               HALVE INDEX VALUE.
         AIF   (&I GE 0).SRCHDWN  IF ITTERATION COUNT NOT EXPIRED.
         MNOTE  20,' ITEMFIND FAILED FOR NAME  &C1  '
         MEND
*
***********************************************************************
* ITEMSORT MACRO  ITEMSORT MACRO  ITEMSORT MACRO  ITEMSORT MACRO
         MACRO
         ITEMSORT  &DUMMY
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &R,&ZI,&I,&A1,&A2,&TEMP
         LCLB  &SR,&GOTO,&TB
         LCLB  &SW(3000)
         LCLC  &C1,&C2
         ACTR  500000
&A1      SETA  0
         AIF   (&ITEMITR EQ 0).LOOP0   TEST FOR RE-ENTRY.
 MNOTE   0,'ITEMSORT MACRO OCCURRS MORE THAN ONCE. TABLE NOT RESORTED.'
         MEXIT
.LOOP0   ANOP
&A1      SETA  &A1+1
&ITEMNDX(&A1) SETA &A1
         AIF   (&A1 LT &ITEMNBR).LOOP0
         AIF   (&ITEMNBR LT 2).MEXIT
&A1      SETA  &ITEMNBR/2         HALF OF TOTAL ENTRIES.
&A2      SETA  0
.LOOP1   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  1                  SET FIRST HALF OF SWITCHES TO 1.
         AIF   (&A2 LT &A1).LOOP1
.LOOP2   ANOP
&A2      SETA  &A2+1
&SW(&A2) SETB  0                  SET SECOND HALF TO ZERO.
         AIF   (&A2 LT &ITEMNBR).LOOP2
&R       SETA  0                  SET R TO FIRST TRIAL ITEM.
&ZI      SETA  &ITEMNBR-1         SET ZI TO LAST ITEM.
&I       SETA  &ZI-1
.T3      ANOP
&SR      SETB  (&SW(&R+1))        GET FLAG, WHICH WAY TO GO?
&R       SETA  (&R*2)+1+&SR       R=2R+(1 OR 2)
         AIF   (&R LE &I).T3
.T4      ANOP
&R       SETA  (&R-1)/2           R=(R-1)/2
&SR      SETB  (&SW(&R+1))        GET SUBTREE SELECT FLAG.
         AIF   (&SR EQ 0).T7
         AIF   (&GOTO EQ 0).T5
.T7      ANOP
&A1      SETA  &ITEMNDX(&R+1)
&A2      SETA  &ITEMNDX(&ZI+1)
&C1      SETC  '&ITEM(&A1)'.'       '(1,8-K'&ITEM(&A1))
&C2      SETC  '&ITEM(&A2)'.'       '(1,8-K'&ITEM(&A2))
         AIF   ('&C1' LT '&C2').T8
.T9      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
.T8      AIF   (&R GT 0).T4
&GOTO    SETB  1                  SET 'GO TO' T7
&ZI      SETA  &ZI-1
&I       SETA  &I-1
         AIF   (&I GE 0).T3
.MEXIT   ANOP
&ITEMITR SETA 1
&ITEMMDX SETA 1
.ITRLOOP ANOP
&ITEMITR SETA &ITEMITR+1
&ITEMMDX SETA &ITEMMDX+&ITEMMDX
         AIF  (&ITEMMDX LT &ITEMNBR).ITRLOOP
&ITEMITR SETA &ITEMITR-1
&ITEMMDX SETA &ITEMMDX/2
&A1      SETA &ITEMNBR
&A2      SETA &ITEMMDX
&TEMP    SETA &ITEMITR
 MNOTE *,' ITEMS = &A1, MAX INDEX = &A2, ITTERATION COUNT = &TEMP'
         MEXIT
.T5      ANOP
&TEMP    SETA  &ITEMNDX(&R+1)     Z(R) TO TEMP.
&TB      SETB  (&SW(&R+1))
&ITEMNDX(&R+1) SETA &ITEMNDX(&ZI+1)    Z(I) TO Z(R)
&SW(&R+1) SETB (&SW(&ZI+1))
&ITEMNDX(&ZI+1) SETA &TEMP        TEMP TO Z(I)
&SW(&ZI+1) SETB (&TB)
&SR      SETB  (&SR EQ 0)
&SW(&R+1) SETB (&SR)
         AGO   .T3
         MEND
*
***********************************************************************
* LSTART MACRO  LSTART MACRO  LSTART MACRO  LSTART MACRO  LSTART MACRO
         MACRO
         LSTART ,
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &BITS(2600),&DB,&DT,&INITIAL
         GBLA  &ITEMITR,&ITEMFST(20),&ITEMNBR,&ITEMMDX
         GBLA  &ITEMNDX(2600),&ITEMXPT
         GBLA  &LABELNR,&LASTCC,&LB,&LBLCTR(100),&LPTR,&LT
         GBLA  &NRENTS,&SHIFT(2600)
         GBLB  &DIAGITF,&DIAGLIN,&DIAGSET,&DIAGTST,&FSW,&TEST
         GBLC  &CARRCON,&CSECT,&DSECT,&ITEM(2600)
         GBLC  &LABELS(2600),&LBL(100),&NRENTSX
         LCLA  &NDX,&CTR
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
*
***********************************************************************
*   SPECIAL MACRO    SPECIAL MACRO    SPECIAL MACRO    SPECIAL MACRO  *
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
*
***********************************************************************
*  SUM MACRO  SUM MACRO  SUM MACRO  SUM MACRO  SUM MACRO  SUM MACRO   *
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(2600),&SHIFT(2600)
         GBLC  &ITEM(2600),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCSGUS1'
&DSECT   SETC  'GUS1'
IFCSGUS1 CSECT
***********************************************************************
*              OBR SUM TABLE
*              DEVICE CODE=2008   DEVICE=3838  ALIAS=IFCS3838
***********************************************************************
GUS1     DSECT
         DSGEN (XDUM1,8),(XRELN,8),(XDUM2,8),                          X
               (SW2B0,1),(SW2B1,1),(SW2B2,1),(SW2B3,1),                X
               (SW2B4,1),(SW2B5,1),(SW2B6,1),(SW2B7,1)
         DSGEN (XDUM2A,32)                   SPARES
         DSGEN (XDATE,32)                    DATE
         DSGEN (XTIME,32)                    TIME
         DSGEN (XDUM3,8),(XSER,24)           SPARE AND SERIAL NO
         DSGEN (XMODEL,16),(XMCEL,16)        MODEL #  AND MCEL
         DSGEN (XPGN1,32)                    PROGRAM
         DSGEN (XPGN2,32)                           NAME
         DSGEN (XFCCWCC,8),(XFCCWDA,24)      FAILING COMM & ADDR
         DSGEN (XFCCWFL,8),(XZERO,8),(XFCCWCT,16)  CCW CHAIN & COUNT
         DSGEN (XCSWK,8),(XCSWCA,24)         CSW COMM & ADDR
         DSGEN (XCSWATTN,1),(XCSWSM,1),(XCSWCUE,1),(XCSWBSY,1),        X
               (XCSWCE,1),(XCSWDE,1),(XCSWUC,1),(XCSWUE,1),            X
               (XCSWPCI,1),(XCSWSILI,1),(XCSWPC,1),(XCSWPCHK,1),       X
               (XCSWCDC,1),(XCSWCCC,1),(XCSWICC,1),(XCSWCH,1),         X
               (XCSWCT,16)
         DSGEN (XDUMA,8),(XCUA2,24)          SPARE AND SECONDARY CUA
         DSGEN (XDEVT1,16),(XDEVT2,16)       DEVICE TYPE
         DSGEN (XDUM4,8),(XCUA,24)           SPARE & CUA
         DSGEN (XDUM5,32)                    SPARES
         DSGEN (SDR1,8),(SDR2,8),(SDR3,8),(SDR4,8),                    X
               (SDR5,8),(SDR6,8),(SDR7,8),(SDR8,8)
         DSGEN (SDR9,8),(SDR10,8),                                     X
               (XB0CMDR,1),(XB0INTRQ,1),(XB0BUSC,1),(XB0ECHK,1),       X
               (XB0DCHK,1),(XB0NU1,1),(XB0NOTIN,1),(XB0PRE,1),         X
               (XB1RST,1),(XB1URERR,1),(XB1DDEP,1),(XB1INVP,1),        X
               (XB1NU1,1),(XB1NU2,1),(XB1NU3,1),(XB1NU4,1)
         DSGEN (XB2CPMC,1),(XB2IO,1),(XB2ARELM,1),(XB2DTC,1),          X
               (XB2CPEXC,1),(XB2PERM,1),(XB2NU1,1),(XB2NU2,1),         X
               (XB3SNSTY,8),(XB4B5,16)
         DSGEN (XB6B7,16),                                             X
               (XB8BIT0,1),(XB8BIT1,1),(XB8BIT2,1),(XB8BIT3,1),        X
               (XB8BIT4,1),(XB8BIT5,1),(XB8BIT6,1),(XB8BIT7,1),        X
               (XB9BIT0,1),(XB9BIT1,1),(XB9BIT2,1),(XB9BIT3,1),        X
               (XB9BIT4,1),(XB9BIT5,1),(XB9BIT6,1),(XB9BIT7,1)
         DSGEN (XB10BIT0,1),(XB10BIT1,1),(XB10BIT2,1),(XB10BIT3,1),    X
               (XB10BIT4,1),(XB10BIT5,1),(XB10BIT6,1),(XB10BIT7,1),    X
               (XB11BIT0,1),(XB11BIT1,1),(XB11BIT2,1),(XB11BIT3,1),    X
               (XB11BIT4,1),(XB11BIT5,1),(XB11BIT6,1),(XB11BIT7,1),    X
               (XB12BIT0,1),(XB12BIT1,1),(XB12BIT2,1),(XB12BIT3,1),    X
               (XB12BIT4,1),(XB12BIT5,1),(XB12BIT6,1),(XB12BIT7,1),    X
               (XB13BIT0,1),(XB13BIT1,1),(XB13BIT2,1),(XB13BIT3,1),    X
               (XB13BIT4,1),(XB13BIT5,1),(XB13BIT6,1),(XB13BIT7,1)
         DSGEN (XB14BIT0,1),(XB14BIT1,1),(XB14BIT2,1),(XB14BIT3,1),    X
               (XB14BIT4,1),(XB14BIT5,1),(XB14BIT6,1),(XB14BIT7,1),    X
               (XB15BIT0,1),(XB15BIT1,1),(XB15BIT2,1),(XB15BIT3,1),    X
               (XB15BIT4,1),(XB15BIT5,1),(XB15BIT6,1),(XB15BIT7,1),    X
               (XB16BIT0,1),(XB16BIT1,1),(XB16BIT2,1),(XB16BIT3,1),    X
               (XB16BIT4,1),(XB16BIT5,1),(XB16BIT6,1),(XB16BIT7,1),    X
               (XB17BIT0,1),(XB17BIT1,1),(XB17BIT2,1),(XB17BIT3,1),    X
               (XB17BIT4,1),(XB17BIT5,1),(XB17BIT6,1),(XB17BIT7,1)
         DSGEN (XB18BIT0,1),(XB18BIT1,1),(XB18BIT2,1),(XB18BIT3,1),    X
               (XB18BIT4,1),(XB18BIT5,1),(XB18BIT6,1),(XB18BIT7,1),    X
               (XB19BIT0,1),(XB19BIT1,1),(XB19BIT2,1),(XB19BIT3,1),    X
               (XB19BIT4,1),(XB19BIT5,1),(XB19BIT6,1),(XB19BIT7,1),    X
               (XB20,8),(XB21,8)
         DSGEN (XB22,8),(XB23,8),(XB24,8),(XB25,8)
         DSGEN (XB26XB27,16),(XB28XB29,16)
         DSGEN (XB30XB31,16)
***********************************************************************
EXPNOBR  DSECT
EXPNHDRA DS    CL64
EXPNSDRA DS    CL10
EXPNSNSA DS    CL32
***********************************************************************
NORMOBR  DSECT
NORMHDRA DS    CL64
NORMSDRA DS    CL10
NORMSNSA DS    CL32
***********************************************************************
SHRTOBR  DSECT
SHRTHDRA DS    CL24
SHRTSDRA DS    CL10
***********************************************************************
IFCSGUS1 CSECT
         USING GUS1,R2
         USING *,R9
         DC    A(ENTRIES)               PTR TO ENTRIES
         DC    A(PEDIT)                 PTR TO EDIT SECTION OF SUM TBL
REG8     DC    F'0'                     R8 SAVE AREA CURRENT ENTRY
SCSIZE   DC    H'220'                   NUMBER OF 2-BYTES IN SUM
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
L13      EQU   13
L14      EQU   14
L16      EQU   16
L17      EQU   17
L18      EQU   18
L20      EQU   20
L24      EQU   24
L28      EQU   28
L32      EQU   32
L42      EQU   42
L46      EQU   46
L48      EQU   48
L54      EQU   54
L64      EQU   64
L106     EQU   106
L112     EQU   112
HEX01    EQU   X'01'
HEX02    EQU   X'02'
HEX04    EQU   X'04'
HEX10    EQU   X'10'
HEX20    EQU   X'20'
HEX40    EQU   X'40'
HEX80    EQU   X'80'
SAVE2    DS    F
OBRAREA  DS    CL106
         DS    0H
HEXFF    DC    X'FFFF'
HEX00    DC    XL4'00'
***********************************************************************
*              SPECIAL ROUTINE SECTION
*                      R2=PTR TO LOGREC
*                      R3=PTR TO SUM COUNTER
*                      R9=BASE ADDR
***********************************************************************
***********************************************************************
*              CHECK TO SEE IF BYTES 9-15 SHOULD BE SUMMARIZED FOR
*              EXTENDED FORMAT 4 SENSE DATA
***********************************************************************
CHKBIT7  STM   R5,R8,XSAVE              SAVE WORK REGS
         TM    XB0CMDR,HEX01            Q/ IS BIT 7 ON
         BO    CBEXIT                   YES, SUM BYTES 9-11
         LA    R5,NIBIT3S-6             GET ADDR OF WHERE TO SKIP TO
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         LA    R3,L48(R3)               UPDATE PTR TO SUM TABLE ENTRY
CBEXIT   LM    R5,R8,XSAVE              RESTORE WORK REGS
         BR    R14                      EXIT
CHKBIT3  STM   R5,R8,XSAVE              SAVE WORK REGS
         TM    XB0CMDR,HEX10            Q/ IS BIT 3 ON
         BO    CBEXIT                   YES, SUM BYTES 12,14,15
         LA    R5,ENDSUM-6              GET ADDR OF WHERE TO SKIP TO
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         LA    R3,L46(R3)               UPDATE PTR TO SUM TABLE ENTRY
         B     CBEXIT
***********************************************************************
*              SAVE HI AND LOW DATES ENCOUNTERED
***********************************************************************
XDATE1   STM   R14,R15,L12(R13)         SAVE R14 & R 15
         BAL   R14,EXPANDER             BAL TO EXPAND REC
         STM   R0,R12,L20(R13)          SAVE REMAINDER OF REGS
         CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    RETURN                   BR-ZERO
         CLC   L0(L4,R3),HEX00          IS LOW DATE ZERO
         BNE   XDATE2                   BR-NO
         MVC   L0(L4,R3),XDATE          MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK FOR LOW DATE
         BL    SAVELOW                  LOWER SAVE IT
         CLC   XDATE(L4),L4(R3)         CHECK FOR HI
         BNH   RETURN                   BR-NOT HI
SAVEHI   MVC   L4(L4,R3),XDATE          MOVE HI DATE
         B     RETURN
SAVELOW  MVC   L0(L4,R3),XDATE          MOVE LOW DATE
         B     RETURN
***********************************************************************
*              ROUTINE TO SUM SDR CNTRS
***********************************************************************
SDR1L    IC    R15,SDR1
SDRLEFT  SLL   R15,L24                  SHIFT OFF UNUSED BITS
SDRADD   SRL   R15,L28                  MOVE IT BACK FOR ADD
         AH    R15,L0(R3)               ADD IN COUNTER
         STH   R15,L0(R3)               SAVE RESULT
         BR    R14  RETURN
SDR1R    IC    R15,SDR1                 PICK UP COUNTER
SDRRIGHT SLL   R15,L28                  SHIFT OFF UNUSED BITS
         B     SDRADD
SDR2L    IC    R15,SDR2
         B     SDRLEFT
SDR3L    IC    R15,SDR3
         B     SDRLEFT
SDR4L    IC    R15,SDR4
         B     SDRLEFT
SDR5L    IC    R15,SDR5
         B     SDRLEFT
SDR6L    IC    R15,SDR6
         B     SDRLEFT
SDR7L    IC    R15,SDR7
         B     SDRLEFT
SDR8L    IC    R15,SDR8
         B     SDRLEFT
SDR2R    IC    R15,SDR2
         B     SDRRIGHT
SDR3R    IC    R15,SDR3
         B     SDRRIGHT
SDR4R    IC    R15,SDR4
         B     SDRRIGHT
SDR5R    IC    R15,SDR5
         B     SDRRIGHT
SDR6R    IC    R15,SDR6
         B     SDRRIGHT
SDR7R    IC    R15,SDR7
         B     SDRRIGHT
SDR8R    IC    R15,SDR8
         B     SDRRIGHT
***********************************************************************
*              EXPAND ROUTINE
***********************************************************************
EXPANDER STM   R5,R6,XSAVE              SAVE WORK REGS
         LA    R5,OBRAREA               GET EXP AREA
         LR    R6,R2                    SWAP ADDRESSES
         USING EXPNOBR,R5               SET DSECT ADDRESSABILITY
         USING NORMOBR,R6
         XC    OBRAREA(L106),OBRAREA    CLEAR AREA
         TM    SW2B0,HEX20              IS IT A SHORT RECORD
         BO    MOVESHRT                 YES
MOVEALL  MVC   EXPNOBR(L106),NORMOBR    MOVE ALL OF RECORD
EXPNDRET ST    R2,SAVE2                 SAVE R2
         LR    R2,R5                    SWAP REG POINTERS
         LM    R5,R6,XSAVE              RESET REGS
         BR    R14  RETURN
         USING SHRTOBR,R6
MOVESHRT MVC   EXPNHDRA(L24),SHRTHDRA
         MVC   EXPNSDRA(L10),SHRTSDRA
         B     EXPNDRET
         DROP  R5,R6
***********************************************************************
*              RESTORE POINTER TO LOGREC
***********************************************************************
RESETR2  L     R2,SAVE2                 RESET R2
         BR    R14
***********************************************************************
*              COMMON EXIT
***********************************************************************
RETURN   LM    R14,R12,L12(R13)    RESTORE REGS
         BR    R14                 RETURN
***********************************************************************
*              MOVE DEVICE TYPE TO SUM TABLE
***********************************************************************
XDEVT    MVC   L0(L4,R3),XDEVT1         MOVE INTO SUM AREA DEVTYPE
         BR    R14                      RETURN
***********************************************************************
*              DETERMINE TYPE OF RECORD AND SUM
***********************************************************************
SNSSUM   ST    R5,XSAVE                 SAVE WORK REG
         LH    R5,L0(R3)                LOAD CNT OF REC WITH SNS DATA
         LA    R5,L1(R5)                INCR CNT
         STH   R5,L0(R3)                STORE NEW CNT
         TM    XB3SNSTY,HEX01           Q/ IS THIS HARDWARE-VERF SNS
         BO    HWSENSE                  YES
         TM    XB3SNSTY,HEX02           Q/ IS THIS DATA-RELATED SNS
         BO    DATAREL                  YES
         TM    XB3SNSTY,HEX04           Q/ IS THIS NOT-INITIALIZED SNS
         BO    NOTIN                    YES
         LH    R5,L2(R3)                GET CNT OF REC WITH EQ-REL SNS
         LA    R5,L1(R5)                INCR CNT
         STH   R5,L2(R3)                STORE NEW CNT
SNSRETN  L     R5,XSAVE                 RESTORE WORK REG
         BR    R14                      RETURN
HWSENSE  LH    R5,L4(R3)                GET CNT OF REC WITH HW-VER SNS
         LA    R5,L1(R5)                INCR CNT
         STH   R5,L4(R3)                STORE NEW CNT
         B     SNSRETN
DATAREL  LH    R5,L6(R3)                GET CNT OF REC WITH DAT-REL SNS
         LA    R5,L1(R5)                INCR CNT
         STH   R5,L6(R3)                STORE NEW CNT
         B     SNSRETN
NOTIN    LH    R5,L8(R3)                GET CNT OF REC WITH NOT-INT SNS
         LA    R5,L1(R5)                INCR CNT
         STH   R5,L8(R3)                SAVE NEW CNT
         B     SNSRETN
***********************************************************************
*              TEST FOR SHORT OBR RECORD
***********************************************************************
SHRTREC  TM    SW2B0,HEX20              Q/ IS THIS A SHORT OBR REC
         BO    SHORTY                   YES
         ST    R5,XSAVE                 SAVE WORK REG
         LA    R5,NORMREC               GET ADDR OF NEXT SUM TAB ENTRY
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         L     R5,XSAVE                 RESTORE WORK REG
SHORTY   BR    R14
***********************************************************************
*              DETERMINE WHAT PART OF SUM TAB TO PROCESS FOR SENSE DATA
***********************************************************************
SNSTYPE  ST    R5,XSAVE                 SAVE WORK REG
         TM    XB3SNSTY,HEX01           Q/ IS THIS HW-VER SENSE DATA
         BO    HWSNS1                   YES
         TM    XB3SNSTY,HEX02           Q/ IS THIS DATAREL SENSE DATA
         BO    DATREL1                  YES
         TM    XB3SNSTY,HEX04           Q/ IS THIS NOT-INIT SENSE DATA
         BO    NOTIN1                   YES
         BR    R14                      MUST BE EQ-REL NO CHANGE REQD.
HWSNS1   LA    R5,HWVERSNS              GET ADDR OF 1ST SUM TAB ENTRY
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         LA    R3,L42(R3)               GET ADDR OF 1ST SUM TAB ENTRY
SNSEXIT  L     R5,XSAVE                 RESTORE WORK REG
         BR    R14
         BR    R14                      RETURN
DATREL1  LA    R5,DRSENSE               GET ADDR OF 1ST SUM TAB ENTRY
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         LA    R3,L54(R3)               GET ADDR OF 1ST CTR FOR DAT-REL
         B     SNSEXIT                  RETURN
NOTIN1   LA    R5,NISENSE               GET ADDR OF 1ST SUM TABLE ENTRY
         ST    R5,REG8                  UPDATE PTR TO CURRENT ENTRY
         LA    R3,L112(R3)              GET ADDR OF 1ST CTR FOR NOT-INT
         B     SNSEXIT
***********************************************************************
*              SUM BYTES 8 AND 9 FOR HW-VER SENSE DATA
***********************************************************************
HWCNT    STM   R5,R8,XSAVE              SAVE WORK REGS
         CLC   L0(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    HWNEXT                   YES
         SR    R5,R5                    CLEAR REG
         IC    R5,XB8BIT0               PICK UP INCREMENT
         LH    R6,L0(R3)                PICK UP CTR
         AR    R6,R5                    INCR CTR
         STH   R6,L0(R3)                STORE CTR
HWNEXT   CLC   L2(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    HWNEXT1                  YES
         SR    R5,R5                    CLEAR REG
         IC    R5,XB9BIT0               PICK UP INCR
         LH    R6,L2(R3)                PICK UP CTR
         AR    R6,R5                    INCR CTR
         STH   R6,L2(R3)                STORE CTR
HWNEXT1  LM R5,R8,XSAVE                 RESTORE WORK REGS
         BR    R14
***********************************************************************
*              SUM 4 BITS OF BYTES 10-19 (HW-VERIF. SENSE DATA)
***********************************************************************
HW1019   STM   R5,R8,XSAVE              SAVE WORK REGS
         SR    R7,R7                    CLEAR REG
         LA    R7,L10                   LOAD ITERATION COUNT
         LA    R5,XB10BIT0              LOAD ADDR OF 1ST BYTE TO SUM
HWLOOP   TM    L0(R5),HEX10             Q/ IS BIT 0 ON
         BNO   HWN1                     NO, SKIP SUM
         BAL   R6,ADD3                  YES, SUM IT
HWN1     TM    L0(R5),HEX20             Q/ IS BIT 1 ON
         BNO   HWN2                     NO, SKIP SUM
         BAL   R6,ADD2                  YES, SUM IT
HWN2     TM    L0(R5),HEX40             Q/ IS BIT 2 ON
         BNO   HWN3                     NO, SKIP SUM
         BAL   R6,ADD1                  YES, SUM IT
HWN3     TM    L0(R5),HEX80             Q/ IS BIT 3 ON
         BNO   HWTEST                   NO, SKIP SUM
         BAL   R6,ADD0                  YES, SUM IT
HWTEST   LA    R5,L1(R5)                POINT TO NEXT BYTE TO SUM
         BCT   R7,HWLOOP                DECREMENT INDEX
         LM    R5,R8,XSAVE              DONE, SO RESTORE REGS
         BR    R14
ADD0     CLC   L0(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    ADD0R                    YES, SKIP SUM
         LH    R8,L0(R3)                PICK UP CTR
         LA    R8,L1(R8)                INCR CTR
         STH   R8,L0(R3)                STORE CTR
ADD0R    BR    R6                       RETURN TO LOOP
ADD1     CLC   L2(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    ADD1R                    YES, SKIP SUM
         LH    R8,L2(R3)                PICK UP CTR
         LA    R8,L1(R8)                INCR CTR
         STH   R8,L2(R3)                STORE CTR
ADD1R    BR    R6                       RETURN TO LOOP
ADD2     CLC   L4(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    ADD2R                    YES, SKIP SUM
         LH    R8,L4(R3)                PICK UP CTR
         LA    R8,L1(R8)                INCR CTR
         STH   R8,L4(R3)                STORE CTR
ADD2R    BR    R6                       RETURN TO LOOP
ADD3     CLC   L6(L2,R3),HEXFF          Q/ IS CTR FULL
         BE    ADD3R                    YES, SKIP SUM
         LH    R8,L6(R3)                PICK UP CTR
         LA    R8,L1(R8)                INCR CTR
         STH   R8,L6(R3)                STORE CTR
ADD3R    BR    R6                       RETURN TO LOOP
***********************************************************************
*              SUMMARY TABLE
***********************************************************************
ENTRIES  DS    0F
         SPECIAL XDATE1,0,SPACE=4
         SPECIAL XDEVT,0,SPACE=2
         SUM   XCSWATTN
         SUM   XCSWSM
         SUM   XCSWCUE
         SUM   XCSWBSY
         SUM   XCSWCE
         SUM   XCSWDE
         SUM   XCSWUC
         SUM   XCSWUE
         SUM   XCSWPCI
         SUM   XCSWSILI
         SUM   XCSWPC
         SUM   XCSWPCHK
         SUM   XCSWCDC
         SUM   XCSWCCC
         SUM   XCSWICC
         SUM   XCSWCH
         SPECIAL SDR1L,0,SPACE=1
         SPECIAL SDR2L,0,SPACE=1
         SPECIAL SDR3L,0,SPACE=1
         SPECIAL SDR4L,0,SPACE=1
         SPECIAL SDR5L,0,SPACE=1
         SPECIAL SDR8R,0,SPACE=1
         SPECIAL SHRTREC,0,SPACE=0
NORMREC  DC    X'FF'
         DC    XL5'00'
         SPECIAL SNSSUM,0,SPACE=5
         SUM   XB0CMDR
         SUM   XB0INTRQ
         SUM   XB0BUSC
         SUM   XB0ECHK
         SUM   XB0DCHK
         SUM   XB0NOTIN
         SUM   XB0PRE
         SUM   XB1RST
         SUM   XB1URERR
         SUM   XB1DDEP
         SUM   XB1INVP
         SUM   XB2CPMC
         SUM   XB2IO
         SUM   XB2ARELM
         SUM   XB2DTC
         SUM   XB2CPEXC
         SUM   XB2PERM
         SPECIAL SNSTYPE,0,SPACE=0
         SUM   XB8BIT0
         SUM   XB8BIT1
         SUM   XB8BIT2
         SUM   XB8BIT3
         SUM   XB8BIT4
         SUM   XB9BIT0
         SUM   XB9BIT1
         SUM   XB10BIT0
         SUM   XB10BIT1
         SUM   XB10BIT2
         SUM   XB10BIT3
         SUM   XB11BIT0
         SUM   XB11BIT1
         SUM   XB12BIT0
         SUM   XB12BIT1
         SUM   XB12BIT2
         SUM   XB12BIT3
         SUM   XB12BIT4
         SUM   XB12BIT5
         SUM   XB12BIT6
         SUM   XB12BIT7
         SUM   XB13BIT0
         SUM   XB13BIT1
         SUM   XB13BIT2
         SPECIAL RESETR2,0,SPACE=0
HWVERSNS DC    X'FF'
         DC    XL5'00'
         SPECIAL HWCNT,0,SPACE=2
         SPECIAL HW1019,0,SPACE=4
         SPECIAL RESETR2,0,SPACE=0
DRSENSE  DC    X'FF'
         DC    XL5'00'
         SUM   XB8BIT0
         SUM   XB8BIT1
         SUM   XB8BIT2
         SUM   XB8BIT3
         SUM   XB8BIT4
         SUM   XB8BIT5
         SUM   XB8BIT6
         SUM   XB8BIT7
         SUM   XB9BIT0
         SUM   XB9BIT1
         SUM   XB9BIT2
         SUM   XB9BIT3
         SUM   XB9BIT4
         SUM   XB10BIT0
         SUM   XB10BIT1
         SUM   XB10BIT2
         SUM   XB10BIT3
         SUM   XB10BIT4
         SUM   XB10BIT5
         SUM   XB10BIT6
         SUM   XB10BIT7
         SUM   XB11BIT0
         SUM   XB11BIT1
         SUM   XB11BIT2
         SUM   XB11BIT3
         SUM   XB11BIT4
         SUM   XB11BIT5
         SUM   XB11BIT6
         SUM   XB11BIT7
NISENSE  DC    X'FF'
         DC    XL5'00'
         SPECIAL CHKBIT7,0,SPACE=0
         SUM   XB9BIT0
         SUM   XB9BIT1
         SUM   XB9BIT2
         SUM   XB9BIT3
         SUM   XB9BIT4
         SUM   XB9BIT5
         SUM   XB9BIT6
         SUM   XB9BIT7
         SUM   XB10BIT0
         SUM   XB10BIT1
         SUM   XB10BIT2
         SUM   XB10BIT3
         SUM   XB10BIT4
         SUM   XB10BIT5
         SUM   XB10BIT6
         SUM   XB10BIT7
         SUM   XB11BIT0
         SUM   XB11BIT1
         SUM   XB11BIT2
         SUM   XB11BIT3
         SUM   XB11BIT4
         SUM   XB11BIT5
         SUM   XB11BIT6
         SUM   XB11BIT7
NIBIT3S  EQU   *
         SPECIAL CHKBIT3,0,SPACE=0
         SUM   XB12BIT0
         SUM   XB12BIT1
         SUM   XB12BIT2
         SUM   XB12BIT3
         SUM   XB12BIT4
         SUM   XB12BIT5
         SUM   XB12BIT6
         SUM   XB12BIT7
         SUM   XB14BIT0
         SUM   XB14BIT1
         SUM   XB14BIT2
         SUM   XB14BIT3
         SUM   XB14BIT4
         SUM   XB14BIT5
         SUM   XB14BIT6
         SUM   XB14BIT7
         SUM   XB15BIT0
         SUM   XB15BIT1
         SUM   XB15BIT2
         SUM   XB15BIT3
         SUM   XB15BIT4
         SUM   XB15BIT5
         SUM   XB15BIT6
         SUM   XB15BIT7
ENDSUM   EQU *
         SPECIAL RESETR2,0,SPACE=0
***********************************************************************
         DC    X'FF'
PEDIT    DS    0F
&DSECT   SETC  'YY3838'
&CSECT   SETC  'PEDIT'
         USING *,R9
***********************************************************************
*              EDIT AND PRINT SECTION
***********************************************************************
         DC    A(PENTRY)                ADDRESS OF EDIT ENTRIES
         DC    C'IFCSGUS1'
YR9PTR   DS    F
YLABELP  DS    F
***********************************************************************
YY3838   DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YLOWD,32)               LOW DATE
         DSGEN (YHID,32)                HI DATE
         DSGEN (YDEVT1,16),(YDEVT2,16)
         DSGEN (YCSWATTN,16),(YCSWSM,16)
         DSGEN (YCSWCUE,16),(YCSWBSY,16)
         DSGEN (YCSWCE,16),(YCSWDE,16)
         DSGEN (YCSWUC,16),(YCSWUE,16)
         DSGEN (YCSWPCI,16),(YCSWSILI,16)
         DSGEN (YCSWPC,16),(YCSWPCHK,16)
         DSGEN (YCSWCDC,16),(YCSWCCC,16)
         DSGEN (YCSWICC,16),(YCSWCH,16)
         DSGEN (YSDR1L,16),(YSDR2L,16),(YSDR3L,16),(YSDR4L,16)
         DSGEN (YSDR5L,16),(YSDR8R,16),(YSNSSUM,16),(YEQREL,16)
         DSGEN (YHWVER,16),(YDATREL,16),(YNOTIN,16)
         DSGEN (YB0CMDR,16),(YB0INTRQ,16)
         DSGEN (YB0BUSC,16),(YB0ECHK,16)
         DSGEN (YB0DCHK,16),(YB0NOTIN,16),(YB0PRE,16),(YB1RST,16)
         DSGEN (YB1URERR,16),(YB1DDEP,16)
         DSGEN (YB1INVP,16),(YB2CPMC,16),(YB2IO,16),(YB2ARELM,16)
         DSGEN (YB2DTC,16),(YB2CPEXC,16),(YB2PERM,16),(YB8BIT0,16)
         DSGEN (YB8BIT1,16),(YB8BIT2,16),(YB8BIT3,16),(YB8BIT4,16)
         DSGEN (YB9BIT0,16),(YB9BIT1,16),(YB10BIT0,16),(YB10BIT1,16)
         DSGEN (YB10BIT2,16),(YB10BIT3,16),(YB11BIT0,16),(YB11BIT1,16)
         DSGEN (YB12BIT0,16),(YB12BIT1,16),(YB12BIT2,16),(YB12BIT3,16)
         DSGEN (YB12BIT4,16),(YB12BIT5,16),(YB12BIT6,16),(YB12BIT7,16)
         DSGEN (YB13BIT0,16),(YB13BIT1,16),(YB13BIT2,16)
HWSENSE1 DSGEN (HWEXCNT,16),(HWERCNT,16),(HWBIT0,16),(HWBIT1,16)
         DSGEN (HWBIT2,16),(HWBIT3,16)
DRSENSE1 DSGEN (DR8BIT0,16),(DR8BIT1,16),(DR8BIT2,16),(DR8BIT3,16)
         DSGEN (DR8BIT4,16),(DR8BIT5,16),(DR8BIT6,16),(DR8BIT7,16)
         DSGEN (DR9BIT0,16),(DR9BIT1,16),(DR9BIT2,16),(DR9BIT3,16)
         DSGEN (DR9BIT4,16),(DR10BIT0,16),(DR10BIT1,16),(DR10BIT2,16)
         DSGEN (DR10BIT3,16),(DR10BIT4,16),(DR10BIT5,16),(DR10BIT6,16)
         DSGEN (DR10BIT7,16),(DR11BIT0,16),(DR11BIT1,16),(DR11BIT2,16)
         DSGEN (DR11BIT3,16),(DR11BIT4,16),(DR11BIT5,16),(DR11BIT6,16)
         DSGEN (DR11BIT7,16)
         DSGEN (NI9BIT,16,0,7),(NI10BIT,16,0,7)
         DSGEN (NI11BIT,16,0,7),(NI12BIT,16,0,7)
         DSGEN (NI14BIT,16,0,7),(NI15BIT,16,0,7)
IFCSGUS1 CSECT
***********************************************************************
*              SPECIAL ROUTINE SECTION
***********************************************************************
***********************************************************************
*              CHECK FOR ZERO CPU NUMBER
***********************************************************************
SETCPUNO STM   R5,R8,XSAVE              SAVE REGS
         SR    R5,R5                    CLEAR R5
         IC    R5,L0(R4)                PICK UP
         SLL   R5,L8                    CPU TYPE
         IC    R5,L1(R4)                FIELD
         LTR   R5,R5                    Q/ IS FIELD ZERO
         BNZ   RETURNA                  NO, LINE IS GOOD, RETURN
         LA    R6,L4                    AMOUNT TO BACKSPACE
         SR    R3,R6                    BACKSPACE PRINT POS. PTR
         MVC   L0(L6,R3),SHARED         SAY MODEL SHARED
         B     RETURNA                  RETURN
***********************************************************************
*              CONVERT HALF-WORD COUNTER TO DECIMAL
***********************************************************************
CONVERT  STM   R5,R8,XSAVE              SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
CONV1    CVD   R5,WORK                  CONVERT IT TO DECIMAL
         UNPK  L0(L3,R3),WORK+L5(L3)    UNPACK IT TO PRINT BUFF
         MVZ   L2(L1,R3),L0(R3)         PUT ON PRINTABLE ZONE
RETURNA  LM    R5,R8,XSAVE              RESTORE REGS
         BR    R14
***********************************************************************
*              CONVERT HALF-WORD COUNTER TO 4 DECIMAL DIGITS
***********************************************************************
CONVERT4 STM   R5,R8,XSAVE              SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
         CVD   R5,WORK                  CONVERT IT TO DECIMAL
         UNPK  L0(L4,R3),WORK+L4(L4)    UNPACK IT TO PRINT BUFF
         MVZ   L3(L1,R3),L0(R3)         PUT ON PRINTABLE ZONE
         B     RETURNA                  RESTORE REGS
***********************************************************************
*              ADVANCE PRINT POS. PTR
***********************************************************************
SKIPPER  BR    R14                      RETURN
***********************************************************************
*              CONVERT DATE TO EBCDIC
***********************************************************************
SETDATE  UNPK  WORK(L8),L0(L4,R4)       PACK DATE
         MVZ   WORK+L7(L1),WORK         MOVE ON ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DATE TO PRINT LINE
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR TO PRINT LINE
         BR    R14
***********************************************************************
*              SET LABELS
*              FREE COUNTERS AREA, LAST THING DONE
***********************************************************************
FREECTR  STM   R14,R12,L12(R13)         SAVE ALL REGS
         LR    R12,R13                  SAVE SAVE AREA ADDR
         LA    R13,FSAVE                POINT TO MY SAVE
         ST    R12,L4(R13)              SET CHAINING POINTERS
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP POINTER TO NEXT COUNTER
         ST    R3,L28(R12)              SAVE POINTER IN REG SAVE
         LH    R0,SIZE                  PICK UP SIZE OF AREA
         LR    R1,R2                    SET ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         LTR   R3,R3                    Q/ ANY MORE COUNTERS
         BZ    RETURN0                  NO, RETURN
         LA    R5,PENTRY+L10            POINT TO TOP ENTRY - 4
         ST    R5,YR9PTR
         LA    R5,LABELS-L1             POINT TO FIRST LABEL - 1
         ST    R5,YLABELP               STORE IT IN TABLE
RETURN0  L     R13,L4(R13)              PICK UP &
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14
***********************************************************************
WORK     DS    D
XSAVE    DS    4F
FSAVE    DS    18F
SHARED   DC    C'SHARED'
SIZE     DC    H'462'                   NUMBER OF BYTES TO FREE
HEXFFFF  DC    X'FFFF'
***********************************************************************
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABELS)
         DC    H'0'
***********************************************************************
         DC    X'01'
         DC    X'000B8B00'              SKIP TO CHANNEL 1
         LABEL ' '
***********************************************************************
         LINE  (63,1),(1,65),SKIP=1
         HEX   YCUA
         LABEL 'SUMMARY OF I/O OUTBOARD ENVIRONMENT RECORDS FOR DEVICE'X
               ,'DEVICE TYPE 3838'
***********************************************************************
         LINE  (115,1),(100,1)
         HEX   YCPU
         ROUTINE YCPU,SETCPUNO
         LABEL 'CPU MODEL'
***********************************************************************
         LINE  (117,1),(100,1)
         HEX   YSER
         LABEL 'CPU SERIAL'
***********************************************************************
         LINE  ,(23,1)
         LABEL 'DAY YEAR      DAY YEAR'
***********************************************************************
         LINE  (23,14),(1,32),SKIP=2
         ROUTINE YLOWD,SETDATE
         ROUTINE YHID,SETDATE
         LABEL 'OUTBOARD DATE RANGE -','TO'
***********************************************************************
         LINE  (29,14),(1,1)
         ROUTINE YNOREC,CONVERT
         LABEL 'TOTAL NUMBER OF RECORDS'
***********************************************************************
         LINE  ,(5,28)
         LABEL 'UNIT STATUS','CHANNEL STATUS','STATISTICAL DATA',      X
               'STATISTICAL DATA'
***********************************************************************
         LINE  (22,28),(3,27),SKIP=1
         ROUTINE YCSWATTN,CONVERT
         ROUTINE YCSWPCI,CONVERT
         ROUTINE YSDR1L,CONVERT4
         LABEL 'ATTENTION','PRGM-CTL INTRPT','DATA CHECK (READ)',      X
               '    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWSM,CONVERT
         ROUTINE YCSWSILI,CONVERT
         ROUTINE YSDR2L,CONVERT4
         LABEL 'STATUS MODIFIER','INCORRECT LENGTH',                   X
               'DATA CHECK (WRITE)','    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWCUE,CONVERT
         ROUTINE YCSWPC,CONVERT
         ROUTINE YSDR3L,CONVERT4
         LABEL 'CONTROL UNIT END','PROGRAM CHECK',                     X
               'INTERVENTION REQD','    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWBSY,CONVERT
         ROUTINE YCSWPCHK,CONVERT
         ROUTINE YSDR4L,CONVERT4
         LABEL 'BUSY','PROTECTION CHECK','BUS OUT PARITY',             X
               '    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWCE,CONVERT
         ROUTINE YCSWCDC,CONVERT
         ROUTINE YSDR5L,CONVERT4
         LABEL 'CHANNEL END','CHAN DATA CHECK','EQUIPMENT CHECK',      X
               '    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWDE,CONVERT
         ROUTINE YCSWCCC,CONVERT
         LABEL 'DEVICE END','CHAN CTL CHECK',                          X
               'NOT USED             0000',                            X
               '    NOT USED          0000'
***********************************************************************
         LINE
         ROUTINE YCSWUC,CONVERT
         ROUTINE YCSWICC,CONVERT
         LABEL 'UNIT CHECK','I/F CTL CHECK',                           X
               'NOT USED             0000',                            X
               '    NOT USED          0000'
***********************************************************************
         LINE  ,,SKIP=3
         ROUTINE YCSWUE,CONVERT
         ROUTINE YCSWCH,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YSDR8R,CONVERT4
         LABEL 'UNIT EXCEPTION','CHAINING CHECK',                      X
               'NOT USED             0000','    CHAN DATA CHK'
***********************************************************************
         LINE  (57,1),(1,54),SKIP=2
         ROUTINE YSNSSUM,CONVERT
         LABEL 'SENSE BYTE SUMMARY - FIXED FORMAT - NUMBER OF RECORDS 'X
               ,'='
***********************************************************************
         LINE  ,(5,30)
         LABEL 'STANDARD STATUS (+0)','REQUEST STATUS (+1)',           X
               'DETECTING COMP (+2)'
***********************************************************************
         LINE  (22,30),(1,30),SKIP=1
         ROUTINE YB0CMDR,CONVERT
         ROUTINE YB1RST,CONVERT
         ROUTINE YB2CPMC,CONVERT
         LABEL 'COMMAND REJECT','RESTARTABLE','CP MACHINE CHECK'
***********************************************************************
         LINE
         ROUTINE YB0INTRQ,CONVERT
         ROUTINE YB1URERR,CONVERT
         ROUTINE YB2IO,CONVERT
         LABEL 'INTERVENTN REQD','UNRELATED ERROR','I/O'
***********************************************************************
         LINE
         ROUTINE YB0BUSC,CONVERT
         ROUTINE YB1DDEP,CONVERT
         ROUTINE YB2ARELM,CONVERT
         LABEL 'BUS OUT PARITY','DATA-DEPENDENT','ARITH ELEMENT'
***********************************************************************
         LINE
         ROUTINE YB0ECHK,CONVERT
         ROUTINE YB1INVP,CONVERT
         ROUTINE YB2DTC,CONVERT
         LABEL 'EQUIPMENT CHECK','INV PASSWORD','DATA TRANS CTLR'
***********************************************************************
         LINE
         ROUTINE YB0DCHK,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB2CPEXC,CONVERT
         LABEL 'DATA CHECK','NOT USED             000','CP EXECUTIVE'
***********************************************************************
         LINE
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB2PERM,CONVERT
         LABEL 'NOT USED             000','NOT USED             000',  X
               'PERF MONITOR'
***********************************************************************
         LINE
         ROUTINE YB0NOTIN,CONVERT
         LABEL 'NOT INITIALIZED','NOT USED             000',           X
               'NOT USED             000'
***********************************************************************
         LINE  ,,SKIP=3
         ROUTINE YB0PRE,CONVERT
         LABEL 'PREV I/O EXCEPTION','NOT USED             000',        X
               'NOT USED             000'
***********************************************************************
         LINE  (84,1),(1,39),SKIP=2
         ROUTINE YEQREL,CONVERT
         LABEL 'SENSE BYTE SUMMARY - EXTENDED FORMAT 0 ',              X
               '(EQUIPMENT-RELATED) - NUMBER OF RECORDS = '
***********************************************************************
         LINE  ,(3,19)
         LABEL 'STOR PAR (+8)','ADDR CHK (+9)','CP STAT (+10)',        X
               'AE STAT (+11)','CP EXEC (+12)','CP EXEC (+13)'
***********************************************************************
         LINE  (16,19),(3,19),SKIP=1
         ROUTINE YB8BIT0,CONVERT
         ROUTINE YB9BIT0,CONVERT
         ROUTINE YB10BIT0,CONVERT
         ROUTINE YB11BIT0,CONVERT
         ROUTINE YB12BIT0,CONVERT
         ROUTINE YB13BIT0,CONVERT
         LABEL 'BULK STOR','BULK STOR','ILL MICRO','MACH CHK',         X
               'INV INSTR','INV AD REF'
***********************************************************************
         LINE
         ROUTINE YB8BIT1,CONVERT
         ROUTINE YB9BIT1,CONVERT
         ROUTINE YB10BIT1,CONVERT
         ROUTINE YB11BIT1,CONVERT
         ROUTINE YB12BIT1,CONVERT
         ROUTINE YB13BIT1,CONVERT
         LABEL 'CP PGM ST','CP PGM ST','EDB T/O','WS CNFLCT',          X
               'DIV ZERO','INT ERR'
***********************************************************************
         LINE
         ROUTINE YB8BIT2,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB10BIT2,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT2,CONVERT
         ROUTINE YB13BIT2,CONVERT
         LABEL 'CP CTL ST','NOT USED     000','EDB PAR R',             X
               'NOT USED     000','I/O INIT','BUF SPACE'
***********************************************************************
         LINE
         ROUTINE YB8BIT3,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB10BIT3,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT3,CONVERT
         LABEL 'AE WRK ST','NOT USED     000','EDB PAR O',             X
               'NOT USED     000','INV IOCW','NOT USED     000'
***********************************************************************
         LINE
         ROUTINE YB8BIT4,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT4,CONVERT
         LABEL 'AE CTL ST','NOT USED     000','NOT USED     000',      X
               'NOT USED     000','DTC INIT','NOT USED     000'
***********************************************************************
         LINE
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT5,CONVERT
         LABEL 'NOT USED     000','NOT USED     000','NOT USED     000'X
               ,'NOT USED     000','INV TCB','NOT USED     000'
***********************************************************************
         LINE
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT6,CONVERT
         LABEL 'NOT USED     000','NOT USED     000','NOT USED     000'X
               ,'NOT USED     000','AE INIT','NOT USED     000'
***********************************************************************
         LINE  ,,SKIP=3
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YDUMA,SKIPPER
         ROUTINE YB12BIT7,CONVERT
         LABEL 'NOT USED     000','NOT USED     000','NOT USED     000'X
               ,'NOT USED     000','INV AFCW','NOT USED     000'
***********************************************************************
         LINE  (88,3),(1,38),SKIP=2
         ROUTINE YHWVER,CONVERT
         LABEL 'SENSE BYTE SUMMARY - EXTENDED FORMAT 1',               X
               ' (HARDWARE-VERIFICATION) - NUMBER OF RECORDS = '
***********************************************************************
         LINE  ,(11,50)
         LABEL 'TOTAL PERF MON EXEC CNT (+8)',                         X
               'PM ERR STAT (+10-+19)'
***********************************************************************
         LINE  (26,54),(61,1),SKIP=1
         ROUTINE HWEXCNT,CONVERT4
         ROUTINE HWBIT0,CONVERT4
         LABEL 'CP FAILURE'
***********************************************************************
         LINE  (80,1),(61,1)
         ROUTINE HWBIT1,CONVERT4
         LABEL 'AE FAILURE'
***********************************************************************
         LINE
         ROUTINE HWBIT2,CONVERT4
         LABEL 'BULK STOR'
***********************************************************************
         LINE  ,(11,50)
         ROUTINE HWBIT3,CONVERT4
         LABEL 'TOTAL PERF MON ERR CNT (+9)','DTC FAILURE'
***********************************************************************
         LINE  ,(61,1)
         LABEL 'NOT USED           0000'
***********************************************************************
         LINE  (26,1),(61,1)
         ROUTINE HWERCNT,CONVERT4
         LABEL 'NOT USED           0000'
***********************************************************************
         LINE  ,(61,1)
         LABEL 'NOT USED           0000'
***********************************************************************
         LINE  ,,SKIP=3
         LABEL 'NOT USED           0000'
***********************************************************************
         LINE  (79,1),(1,53),SKIP=2
         ROUTINE YDATREL,CONVERT
         LABEL 'SENSE BYTE SUMMARY - EXTENDED FORMAT 2 (DATA-RELATED)',X
               ' - NUMBER OF RECORDS ='
***********************************************************************
         LINE  ,(5,28)
         LABEL 'DATA-DEP STAT (+8)','DATA-DEP STAT (+9)',              X
               'AE DATA CHK STAT (+10)','AE DATA CHK STAT (+11)'
***********************************************************************
         LINE  (22,28),(3,28),SKIP=1
         ROUTINE DR8BIT0,CONVERT
         ROUTINE DR9BIT0,CONVERT
         ROUTINE DR10BIT0,CONVERT
         ROUTINE DR11BIT0,CONVERT
         LABEL 'I/O LIMIT CHECK','CIT INDEX OVFL','NOT USED',          X
               'ADDER A EXP OVFL'
***********************************************************************
         LINE
         ROUTINE DR8BIT1,CONVERT
         ROUTINE DR9BIT1,CONVERT
         ROUTINE DR10BIT1,CONVERT
         ROUTINE DR11BIT1,CONVERT
         LABEL 'I/O LENGTH ERR','CIT INDX CHK','NOT USED',             X
               'ADDER A EXP UNFL'
***********************************************************************
         LINE
         ROUTINE DR8BIT2,CONVERT
         ROUTINE DR9BIT2,CONVERT
         ROUTINE DR10BIT2,CONVERT
         ROUTINE DR11BIT2,CONVERT
         LABEL 'CHAN PGM CORRES','BULK ST LIM CHK','NOT USED',         X
               'ADDER A INT OVFL'
***********************************************************************
         LINE
         ROUTINE DR8BIT3,CONVERT
         ROUTINE DR9BIT3,CONVERT
         ROUTINE DR10BIT3,CONVERT
         ROUTINE DR11BIT3,CONVERT
         LABEL 'CIT LIMIT CHECK','DTC CONVERT CHK',                    X
               'RECIP EST EXP OVFL','ADDER A RT EXP LRG'
***********************************************************************
         LINE
         ROUTINE DR8BIT4,CONVERT
         ROUTINE DR9BIT4,CONVERT
         ROUTINE DR10BIT4,CONVERT
         ROUTINE DR11BIT4,CONVERT
         LABEL 'INV CIT OPER','SELEC ERROR STOP','MULT EXP OVFL',      X
               'ADDER B EXP OVFL'
***********************************************************************
         LINE
         ROUTINE DR8BIT5,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE DR10BIT5,CONVERT
         ROUTINE DR11BIT5,CONVERT
         LABEL 'INV CIT PARAM','NOT USED           000',               X
               'MULT EXP UNFL','ADDER B EXP UNFL'
***********************************************************************
         LINE
         ROUTINE DR8BIT6,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE DR10BIT6,CONVERT
         ROUTINE DR11BIT6,CONVERT
         LABEL 'INV CIT BRANCH','NOT USED           000',              X
               'INT MULT OVFL','ADDER B INT OVFL'
***********************************************************************
         LINE  ,,SKIP=E
         ROUTINE DR8BIT7,CONVERT
         ROUTINE YDUMA,SKIPPER
         ROUTINE DR10BIT7,CONVERT
         ROUTINE DR11BIT7,CONVERT
         LABEL 'CIT BR CNT EXCD','NOT USED           000',             X
               'UNNORM RECP EST','ADDER B RT EXP LRG'
***********************************************************************
         LINE  (82,1),(1,39),SKIP=2
         ROUTINE YNOTIN,CONVERT
         LABEL 'SENSE BYTE SUMMARY - EXTENDED FORMAT 4 ',              X
               '(NOT-INITIALIZED) - NUMBER OF RECORDS ='
***********************************************************************
         LINE  ,(3,19)
         LABEL 'I/O STAT  (+9)','I/O STAT (+10)','I/O STAT (+11)',     X
               'CP CHECK (+12)','CP MCH CK (+14)','CP MCH CK (+15)'
***********************************************************************
         LINE  (16,19),,SKIP=1
         ROUTINE NI9BIT0,CONVERT
         ROUTINE NI10BIT0,CONVERT
         ROUTINE NI11BIT0,CONVERT
         ROUTINE NI12BIT0,CONVERT
         ROUTINE NI14BIT0,CONVERT
         ROUTINE NI15BIT0,CONVERT
         LABEL 'NOT USED','READ','CMD REJ','NOT USED','NOT USED',      X
               'PS PAR I-F'
***********************************************************************
         LINE
         ROUTINE NI9BIT1,CONVERT
         ROUTINE NI10BIT1,CONVERT
         ROUTINE NI11BIT1,CONVERT
         ROUTINE NI12BIT1,CONVERT
         ROUTINE NI14BIT1,CONVERT
         ROUTINE NI15BIT1,CONVERT
         LABEL 'NOT USED','WRITE','BUS O PAR','ILL MICBR','NOT USED',  X
               'PS PAR D-F'
***********************************************************************
         LINE
         ROUTINE NI9BIT2,CONVERT
         ROUTINE NI10BIT2,CONVERT
         ROUTINE NI11BIT2,CONVERT
         ROUTINE NI12BIT2,CONVERT
         ROUTINE NI14BIT2,CONVERT
         ROUTINE NI15BIT2,CONVERT
         LABEL 'NOT USED','SENSE','SUPPRESS 0','EQUIP CHK','NOT USED', X
               'NOT USED'
***********************************************************************
         LINE
         ROUTINE NI9BIT3,CONVERT
         ROUTINE NI10BIT3,CONVERT
         ROUTINE NI11BIT3,CONVERT
         ROUTINE NI12BIT3,CONVERT
         ROUTINE NI14BIT3,CONVERT
         ROUTINE NI15BIT3,CONVERT
         LABEL 'SENSE ID','CTL PROC','STOP','DIV ZERO','NOT USED',     X
               'ILL AD I-F'
***********************************************************************
         LINE
         ROUTINE NI9BIT4,CONVERT
         ROUTINE NI10BIT4,CONVERT
         ROUTINE NI11BIT4,CONVERT
         ROUTINE NI12BIT4,CONVERT
         ROUTINE NI14BIT4,CONVERT
         ROUTINE NI15BIT4,CONVERT
         LABEL 'CHAN END','CTL SYS','DATA CHK','INV ADDR','NOT USED',  X
               'ILL AD D-F'
***********************************************************************
         LINE
         ROUTINE NI9BIT5,CONVERT
         ROUTINE NI10BIT5,CONVERT
         ROUTINE NI11BIT5,CONVERT
         ROUTINE NI12BIT5,CONVERT
         ROUTINE NI14BIT5,CONVERT
         ROUTINE NI15BIT5,CONVERT
         LABEL 'UNIT CHK','DISCON IN','ADDR CHK','INV INSTR',          X
               'EDB PAR R','EDB PAR T/O'
***********************************************************************
         LINE
         ROUTINE NI9BIT6,CONVERT
         ROUTINE NI10BIT6,CONVERT
         ROUTINE NI11BIT6,CONVERT
         ROUTINE NI12BIT6,CONVERT
         ROUTINE NI14BIT6,CONVERT
         ROUTINE NI15BIT6,CONVERT
         LABEL 'STAT MOD','SEL RESET','STAT TAKN','NOT USED',          X
               'EDB PAR W','NOT USED'
***********************************************************************
         LINE
         ROUTINE NI9BIT7,CONVERT
         ROUTINE NI10BIT7,CONVERT
         ROUTINE NI11BIT7,CONVERT
         ROUTINE NI12BIT7,CONVERT
         ROUTINE NI14BIT7,CONVERT
         ROUTINE NI15BIT7,CONVERT
         LABEL 'BUSY','INT DISCN','ONLINE','NOT USED','CTL ST PAR',    X
               'NOT USED'
***********************************************************************
         LINE
         ROUTINE YDUMA,FREECTR
         LABEL ''
***********************************************************************
         DC    X'FF'
         DC    X'000000000000'
***********************************************************************
LABELS   EQU   *
         LSTART
         END
